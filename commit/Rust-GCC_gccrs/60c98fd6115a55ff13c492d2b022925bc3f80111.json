{"sha": "60c98fd6115a55ff13c492d2b022925bc3f80111", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjBjOThmZDYxMTVhNTVmZjEzYzQ5MmQyYjAyMjkyNWJjM2Y4MDExMQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-31T06:32:37Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-31T06:32:37Z"}, "message": "VMID.java, [...]: Reformatted.\n\n2003-03-31  Michael Koch  <konqueror@gmx.de>\n\n\t* java/rmi/dgc/VMID.java,\n\tjava/rmi/registry/RegistryHandler.java,\n\tjava/rmi/server/LogStream.java,\n\tjava/rmi/server/Operation.java,\n\tjava/rmi/server/RemoteCall.java,\n\tjava/rmi/server/RemoteRef.java,\n\tjava/rmi/server/RemoteStub.java:\n\tReformatted.\n\nFrom-SVN: r65078", "tree": {"sha": "fa831270c85982f422006a91567c687feca02603", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa831270c85982f422006a91567c687feca02603"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/60c98fd6115a55ff13c492d2b022925bc3f80111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c98fd6115a55ff13c492d2b022925bc3f80111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/60c98fd6115a55ff13c492d2b022925bc3f80111", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/60c98fd6115a55ff13c492d2b022925bc3f80111/comments", "author": null, "committer": null, "parents": [{"sha": "2ce0d0b097225538935a0ac9e1b713c024183547", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ce0d0b097225538935a0ac9e1b713c024183547", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ce0d0b097225538935a0ac9e1b713c024183547"}], "stats": {"total": 346, "additions": 199, "deletions": 147}, "files": [{"sha": "393d82af9bec98f118f7c1c83c99dc9d04df9919", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=60c98fd6115a55ff13c492d2b022925bc3f80111", "patch": "@@ -1,3 +1,14 @@\n+2003-03-31  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/rmi/dgc/VMID.java,\n+\tjava/rmi/registry/RegistryHandler.java,\n+\tjava/rmi/server/LogStream.java,\n+\tjava/rmi/server/Operation.java,\n+\tjava/rmi/server/RemoteCall.java,\n+\tjava/rmi/server/RemoteRef.java,\n+\tjava/rmi/server/RemoteStub.java:\n+\tReformatted.\n+\n 2003-03-31  Michael Koch  <konqueror@gmx.de>\n \n \t* javax/swing/AbstractCellEditor.java,"}, {"sha": "c7946cd142c25f43e63dbce2df6b630094c47e91", "filename": "libjava/java/rmi/dgc/VMID.java", "status": "modified", "additions": 91, "deletions": 72, "changes": 163, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fdgc%2FVMID.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fdgc%2FVMID.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fdgc%2FVMID.java?ref=60c98fd6115a55ff13c492d2b022925bc3f80111", "patch": "@@ -38,79 +38,98 @@\n package java.rmi.dgc;\n \n import java.io.Serializable;\n-import java.rmi.server.UID;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n+import java.rmi.server.UID;\n \n-public final class VMID\n-\timplements Serializable {\n-\n-static final long serialVersionUID = -538642295484486218L;\n-static final boolean areWeUnique;\n-static byte[] localAddr;\n-\n-private byte[] addr;\n-private UID uid;\n-\n-static {\n-\tbyte[] addr;\n-\tboolean awu = true;\n-\ttry {\n-\t\taddr = InetAddress.getLocalHost().getAddress();\n-\t\tif (addr[0] == 127 && addr[1] == 0 && addr[2] == 0 && addr[3] == 1) {\n-\t\t\tawu = false;\n-\t\t}\n-\t}\n-\tcatch (UnknownHostException _) {\n-\t\taddr = new byte[]{ 127, 0, 0, 1 };\n-\t\tawu = false;\n-\t}\n-\tlocalAddr = addr;\n-\tareWeUnique = awu;\n-}\n-\n-public VMID() {\n-\taddr = localAddr;\n-\tuid = new UID();\n-}\n-\n-public static boolean isUnique() {\n-\treturn (areWeUnique);\n-}\n-\n-public int hashCode() {\n-\treturn (super.hashCode());\n-}\n-\n-public boolean equals(Object obj) {\n-\tif (!(obj instanceof VMID)) {\n-\t\treturn (false);\n-\t}\n-\tVMID other = (VMID)obj;\n-\tif (addr.length != other.addr.length) {\n-\t\treturn (false);\n-\t}\n-\tfor (int i = addr.length - 1; i >= 0; i--) {\n-\t\tif (addr[i] != other.addr[i]) {\n-\t\t\treturn (false);\n-\t\t}\n-\t}\n-\treturn (uid.equals(other.uid));\n-}\n-\n-public String toString() {\n-\tStringBuffer buf = new StringBuffer(\"[VMID: \");\n-\tfor (int i = 0; i < addr.length; i++) {\n-\t\tif (i > 0) {\n-\t\t\tbuf.append(\".\");\n-\t\t}\n-\t\tbuf.append(Integer.toString(addr[i]));\n-\t}\n-\tbuf.append(\" \");\n-\tbuf.append(uid.toString());\n-\tbuf.append(\"]\");\n-\n-\treturn (buf.toString());\n-}\n-\n+public final class VMID\timplements Serializable\n+{\n+  static final long serialVersionUID = -538642295484486218L;\n+  \n+  static final boolean areWeUnique;\n+  \n+  static byte[] localAddr;\n+\n+  private byte[] addr;\n+  \n+  private UID uid;\n+\n+  static\n+  {\n+    byte[] addr;\n+    boolean awu = true;\n+    try {\n+      addr = InetAddress.getLocalHost().getAddress();\n+      if (addr[0] == 127 && addr[1] == 0 && addr[2] == 0 && addr[3] == 1) {\n+        awu = false;\n+      }\n+    }\n+    catch (UnknownHostException _) {\n+      addr = new byte[]{ 127, 0, 0, 1 };\n+      awu = false;\n+    }\n+    localAddr = addr;\n+    areWeUnique = awu;\n+  }\n+\n+  public VMID()\n+  {\n+    addr = localAddr;\n+    uid = new UID();\n+  }\n+\n+  public static boolean isUnique ()\n+  {\n+    return areWeUnique;\n+  }\n+\n+  public int hashCode ()\n+  {\n+    return super.hashCode();\n+  }\n+\n+  public boolean equals (Object obj)\n+  {\n+    if (!(obj instanceof VMID))\n+      {\n+        return false;\n+      }\n+    \n+    VMID other = (VMID) obj;\n+    if (addr.length != other.addr.length)\n+      {\n+        return false;\n+      }\n+    \n+    for (int i = addr.length - 1; i >= 0; i--)\n+      {\n+        if (addr[i] != other.addr[i])\n+          {\n+            return false;\n+          }\n+      }\n+    \n+    return uid.equals(other.uid);\n+  }\n+\n+  public String toString ()\n+  {\n+    StringBuffer buf = new StringBuffer (\"[VMID: \");\n+    \n+    for (int i = 0; i < addr.length; i++)\n+      {\n+        if (i > 0)\n+          {\n+            buf.append (\".\");\n+          }\n+        \n+        buf.append (Integer.toString (addr [i]));\n+      }\n+    \n+    buf.append (\" \");\n+    buf.append (uid.toString ());\n+    buf.append (\"]\");\n+\n+    return buf.toString();\n+  }\n }"}, {"sha": "bf89b6a397ccf3a05b2e1ff09b4bd20ddfe77e88", "filename": "libjava/java/rmi/registry/RegistryHandler.java", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fregistry%2FRegistryHandler.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fregistry%2FRegistryHandler.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fregistry%2FRegistryHandler.java?ref=60c98fd6115a55ff13c492d2b022925bc3f80111", "patch": "@@ -43,12 +43,16 @@\n /**\n  * @deprecated\n  */\n-public interface RegistryHandler {\n-\n-/** @deprecated */\n-public Registry registryStub(String host, int port) throws RemoteException, UnknownHostException;\n-\n-/** @deprecated */\n-public Registry registryImpl(int port) throws RemoteException;\n-\n+public interface RegistryHandler\n+{\n+  /**\n+   * @deprecated\n+   */\n+  public Registry registryStub (String host, int port)\n+    throws RemoteException, UnknownHostException;\n+\n+  /**\n+   * @deprecated\n+   */\n+  public Registry registryImpl (int port) throws RemoteException;\n }"}, {"sha": "2f4fe764f3000867d62bb77c7f1b200685edb0d1", "filename": "libjava/java/rmi/server/LogStream.java", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fserver%2FLogStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fserver%2FLogStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FLogStream.java?ref=60c98fd6115a55ff13c492d2b022925bc3f80111", "patch": "@@ -44,77 +44,79 @@\n /**\n  * @deprecated\n  */\n-public class LogStream\n-\textends PrintStream\n+public class LogStream extends PrintStream\n {\n   public static final int SILENT = 0;\n   public static final int BRIEF = 10;\n   public static final int VERBOSE = 20;\n \n   private static PrintStream defStream;\n \n-  private LogStream(OutputStream s)\n+  private LogStream (OutputStream s)\n   {\n-    super(s);\n+    super (s);\n   }\n \n-  public static LogStream log(String name)\n+  /**\n+   * @deprecated\n+   */\n+  public static LogStream log (String name)\n   {\n-    throw new Error(\"Not implemented\");\n+    throw new Error (\"Not implemented\");\n   }\n \n-  public static PrintStream getDefaultStream()\n+  public static PrintStream getDefaultStream ()\n   {\n-    return (defStream);\n+    return defStream;\n   }\n   \n-  public static void setDefaultStream(PrintStream s)\n+  public static void setDefaultStream (PrintStream s)\n   {\n     defStream = s;\n   }\n \n-  public OutputStream getOutputStream()\n+  public OutputStream getOutputStream ()\n   {\n-    return (out);\n+    return out;\n   }\n \n-  public void setOutputStream(OutputStream s)\n+  public void setOutputStream (OutputStream s)\n   {\n     out = s;\n   }\n \n-  public void write(int b)\n+  public void write (int buffer)\n   {\n-    super.write(b);\n+    super.write (buffer);\n   }\n \n-  public void write(byte[] b, int off, int len)\n+  public void write (byte[] buffer, int offset, int len)\n   {\n-    super.write(b, off, len);\n+    super.write (buffer, offset, len);\n   }\n \n-  public String toString()\n+  public String toString ()\n   {\n-    throw new Error(\"Not implemented\");\n+    throw new Error (\"Not implemented\");\n   }\n \n-  public static int parseLevel(String s) {\n-    if (s.equalsIgnoreCase(\"silent\"))\n+  public static int parseLevel (String s)\n+  {\n+    if (s.equalsIgnoreCase (\"silent\"))\n       {\n-        return (SILENT);\n+        return SILENT;\n       }\n     \n-    if (s.equalsIgnoreCase(\"brief\"))\n+    if (s.equalsIgnoreCase (\"brief\"))\n       {\n-        return (BRIEF);\n+        return BRIEF;\n       }\n     \n-    if (s.equalsIgnoreCase(\"verbose\"))\n+    if (s.equalsIgnoreCase (\"verbose\"))\n       {\n-        return (VERBOSE);\n+        return VERBOSE;\n       }\n     \n-    return (SILENT);\n-}\n-\n+    return SILENT;\n+  }\n }"}, {"sha": "6fd408c997528d56ef67fab90f9e111374fe135d", "filename": "libjava/java/rmi/server/Operation.java", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fserver%2FOperation.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fserver%2FOperation.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FOperation.java?ref=60c98fd6115a55ff13c492d2b022925bc3f80111", "patch": "@@ -40,20 +40,22 @@\n /**\n  * @deprecated\n  */\n-public class Operation {\n-\n-private String operation;\n-\n-public Operation(String op) {\n-\toperation = op;\n-}\n-\n-public String getOperation() {\n-\treturn (operation);\n-}\n-\n-public String toString() {\n-\treturn (operation);\n-}\n-\n+public class Operation\n+{\n+  private String operation;\n+\n+  public Operation (String op)\n+  {\n+    operation = op;\n+  }\n+\n+  public String getOperation ()\n+  {\n+    return operation;\n+  }\n+\n+  public String toString ()\n+  {\n+    return operation;\n+  }\n }"}, {"sha": "7621152b688b96cb51b019dd824982d3ebec749b", "filename": "libjava/java/rmi/server/RemoteCall.java", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fserver%2FRemoteCall.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fserver%2FRemoteCall.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRemoteCall.java?ref=60c98fd6115a55ff13c492d2b022925bc3f80111", "patch": "@@ -46,14 +46,20 @@\n /**\n  * @deprecated\n  */\n-public interface RemoteCall {\n+public interface RemoteCall\n+{\n+  public ObjectOutput getOutputStream () throws IOException;\n \n-public ObjectOutput getOutputStream() throws IOException;\n-public void releaseOutputStream() throws IOException;\n-public ObjectInput getInputStream() throws IOException;\n-public void releaseInputStream() throws IOException;\n-public ObjectOutput getResultStream(boolean success) throws IOException, StreamCorruptedException;\n-public void executeCall() throws Exception;\n-public void done() throws IOException;\n+  public void releaseOutputStream () throws IOException;\n \n+  public ObjectInput getInputStream () throws IOException;\n+\n+  public void releaseInputStream () throws IOException;\n+\n+  public ObjectOutput getResultStream (boolean success)\n+    throws IOException, StreamCorruptedException;\n+\n+  public void executeCall () throws Exception;\n+\n+  public void done () throws IOException;\n }"}, {"sha": "d9f92320897bb92c104a05dc59d6d2d4ff35ea00", "filename": "libjava/java/rmi/server/RemoteRef.java", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fserver%2FRemoteRef.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fserver%2FRemoteRef.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRemoteRef.java?ref=60c98fd6115a55ff13c492d2b022925bc3f80111", "patch": "@@ -43,19 +43,28 @@\n import java.rmi.RemoteException;\n import java.io.ObjectOutput;\n \n-public interface RemoteRef\n-\textends Externalizable {\n+public interface RemoteRef extends Externalizable\n+{\n+  public static final long serialVersionUID = 0;\n+  \n+  public static final String packagePrefix = \"gnu.java.rmi.server\";\n \n-public static final long serialVersionUID = 0;\n-public static final String packagePrefix = \"gnu.java.rmi.server\";\n-\n-public void invoke(RemoteCall call) throws Exception;\n-public Object invoke(Remote obj, Method method, Object[] params, long opnum) throws Exception;\n-public RemoteCall newCall(RemoteObject obj, Operation[] op, int opnum, long hash) throws RemoteException;\n-public void done(RemoteCall call) throws RemoteException;\n-public boolean remoteEquals(RemoteRef ref);\n-public int remoteHashCode();\n-public String getRefClass(ObjectOutput out);\n-public String remoteToString();\n+  public void invoke(RemoteCall call) throws Exception;\n+  \n+  public Object invoke (Remote obj, Method method, Object[] params, long opnum)\n+    throws Exception;\n+  \n+  public RemoteCall newCall (RemoteObject obj, Operation[] op, int opnum,\n+                             long hash)\n+    throws RemoteException;\n \n+  public void done (RemoteCall call) throws RemoteException;\n+  \n+  public boolean remoteEquals (RemoteRef ref);\n+  \n+  public int remoteHashCode ();\n+  \n+  public String getRefClass (ObjectOutput out);\n+  \n+  public String remoteToString ();\n }"}, {"sha": "cc6b58939ce6ff22680d838a7f6f7ec93b62c2ae", "filename": "libjava/java/rmi/server/RemoteStub.java", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fserver%2FRemoteStub.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/60c98fd6115a55ff13c492d2b022925bc3f80111/libjava%2Fjava%2Frmi%2Fserver%2FRemoteStub.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Frmi%2Fserver%2FRemoteStub.java?ref=60c98fd6115a55ff13c492d2b022925bc3f80111", "patch": "@@ -37,8 +37,7 @@\n \n package java.rmi.server;\n \n-public abstract class RemoteStub\n-  extends RemoteObject\n+public abstract class RemoteStub extends RemoteObject\n {\n   static final long serialVersionUID = -1585587260594494182l;\n "}]}