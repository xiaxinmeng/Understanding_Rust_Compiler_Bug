{"sha": "f5225dbf5cf2a57ed5a2073b1a90a854093d063e", "node_id": "C_kwDOANBUbNoAKGY1MjI1ZGJmNWNmMmE1N2VkNWEyMDczYjFhOTBhODU0MDkzZDA2M2U", "commit": {"author": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-11-08T05:42:20Z"}, "committer": {"name": "Xi Ruoyao", "email": "xry111@xry111.site", "date": "2022-11-12T07:01:13Z"}, "message": "LoongArch: Add flogb.{s,d} instructions and expand logb{sf,df}2\n\nOn LoongArch, flogb instructions extract the exponent of a non-negative\nfloating point value, but produces NaN for negative values.  So we need\nto add a fabs instruction when we expand logb.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.md (UNSPEC_FLOGB): New unspec.\n\t(type): Add flogb.\n\t(logb_non_negative<mode>2): New instruction template.\n\t(logb<mode>2): New define_expand.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/flogb.c: New test.", "tree": {"sha": "05d30315007f73e4d32e45a0097b7d999bc25519", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05d30315007f73e4d32e45a0097b7d999bc25519"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f5225dbf5cf2a57ed5a2073b1a90a854093d063e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQSR0PV2MB+STX3t3OisqtIOGecQ4wUCY29EuQAKCRCsqtIOGecQ\n45nvAQCSMNjKAblqAViH1miqM38YANWRO8aYyE9fdygCynbp7wD+N3tK60av+7fj\nGh7iSlgo0Rj7NsKLPhbYnOFENMciBA4=\n=+zFz\n-----END PGP SIGNATURE-----", "payload": "tree 05d30315007f73e4d32e45a0097b7d999bc25519\nparent d26c757b2ec22d2d752af94908ce54a1266cca01\nauthor Xi Ruoyao <xry111@xry111.site> 1667886140 +0800\ncommitter Xi Ruoyao <xry111@xry111.site> 1668236473 +0800\n\nLoongArch: Add flogb.{s,d} instructions and expand logb{sf,df}2\n\nOn LoongArch, flogb instructions extract the exponent of a non-negative\nfloating point value, but produces NaN for negative values.  So we need\nto add a fabs instruction when we expand logb.\n\ngcc/ChangeLog:\n\n\t* config/loongarch/loongarch.md (UNSPEC_FLOGB): New unspec.\n\t(type): Add flogb.\n\t(logb_non_negative<mode>2): New instruction template.\n\t(logb<mode>2): New define_expand.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/loongarch/flogb.c: New test.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5225dbf5cf2a57ed5a2073b1a90a854093d063e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f5225dbf5cf2a57ed5a2073b1a90a854093d063e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f5225dbf5cf2a57ed5a2073b1a90a854093d063e/comments", "author": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xry111", "id": 8733039, "node_id": "MDQ6VXNlcjg3MzMwMzk=", "avatar_url": "https://avatars.githubusercontent.com/u/8733039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xry111", "html_url": "https://github.com/xry111", "followers_url": "https://api.github.com/users/xry111/followers", "following_url": "https://api.github.com/users/xry111/following{/other_user}", "gists_url": "https://api.github.com/users/xry111/gists{/gist_id}", "starred_url": "https://api.github.com/users/xry111/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xry111/subscriptions", "organizations_url": "https://api.github.com/users/xry111/orgs", "repos_url": "https://api.github.com/users/xry111/repos", "events_url": "https://api.github.com/users/xry111/events{/privacy}", "received_events_url": "https://api.github.com/users/xry111/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d26c757b2ec22d2d752af94908ce54a1266cca01", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d26c757b2ec22d2d752af94908ce54a1266cca01", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d26c757b2ec22d2d752af94908ce54a1266cca01"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "682ab961741bb14c109ebdedb96017b13cc24e68", "filename": "gcc/config/loongarch/loongarch.md", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5225dbf5cf2a57ed5a2073b1a90a854093d063e/gcc%2Fconfig%2Floongarch%2Floongarch.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5225dbf5cf2a57ed5a2073b1a90a854093d063e/gcc%2Fconfig%2Floongarch%2Floongarch.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Floongarch%2Floongarch.md?ref=f5225dbf5cf2a57ed5a2073b1a90a854093d063e", "patch": "@@ -42,6 +42,7 @@\n   UNSPEC_FTINTRM\n   UNSPEC_FTINTRP\n   UNSPEC_FSCALEB\n+  UNSPEC_FLOGB\n \n   ;; Override return address for exception handling.\n   UNSPEC_EH_RETURN\n@@ -217,6 +218,7 @@\n ;; fdiv\t\tfloating point divide\n ;; frdiv\tfloating point reciprocal divide\n ;; fabs\t\tfloating point absolute value\n+;; flogb\tfloating point exponent extract\n ;; fneg\t\tfloating point negation\n ;; fcmp\t\tfloating point compare\n ;; fcopysign\tfloating point copysign\n@@ -233,8 +235,8 @@\n   \"unknown,branch,jump,call,load,fpload,fpidxload,store,fpstore,fpidxstore,\n    prefetch,prefetchx,condmove,mgtf,mftg,const,arith,logical,\n    shift,slt,signext,clz,trap,imul,idiv,move,\n-   fmove,fadd,fmul,fmadd,fdiv,frdiv,fabs,fneg,fcmp,fcopysign,fcvt,fscaleb,\n-   fsqrt,frsqrt,accext,accmod,multi,atomic,syncloop,nop,ghost\"\n+   fmove,fadd,fmul,fmadd,fdiv,frdiv,fabs,flogb,fneg,fcmp,fcopysign,fcvt,\n+   fscaleb,fsqrt,frsqrt,accext,accmod,multi,atomic,syncloop,nop,ghost\"\n   (cond [(eq_attr \"jirl\" \"!unset\") (const_string \"call\")\n \t (eq_attr \"got\" \"load\") (const_string \"load\")\n \n@@ -1039,6 +1041,35 @@\n    (set_attr \"mode\" \"<UNITMODE>\")])\n \f\n ;;\n+;;  ....................\n+;;\n+;;\tFLOATING POINT EXPONENT EXTRACT\n+;;\n+;;  ....................\n+\n+(define_insn \"logb_non_negative<mode>2\"\n+  [(set (match_operand:ANYF 0 \"register_operand\" \"=f\")\n+\t(unspec:ANYF [(match_operand:ANYF 1 \"register_operand\" \"f\")]\n+\t\t     UNSPEC_FLOGB))]\n+  \"TARGET_HARD_FLOAT\"\n+  \"flogb.<fmt>\\t%0,%1\"\n+  [(set_attr \"type\" \"flogb\")\n+   (set_attr \"mode\" \"<UNITMODE>\")])\n+\n+(define_expand \"logb<mode>2\"\n+  [(set (match_operand:ANYF 0 \"register_operand\")\n+\t(unspec:ANYF [(abs:ANYF (match_operand:ANYF 1 \"register_operand\"))]\n+\t\t     UNSPEC_FLOGB))]\n+  \"TARGET_HARD_FLOAT\"\n+{\n+  rtx tmp = gen_reg_rtx (<MODE>mode);\n+\n+  emit_insn (gen_abs<mode>2 (tmp, operands[1]));\n+  emit_insn (gen_logb_non_negative<mode>2 (operands[0], tmp));\n+  DONE;\n+})\n+\f\n+;;\n ;;  ...................\n ;;\n ;;  Count leading zeroes."}, {"sha": "1daefe54e139abf1864eb12df9825fc8a3ad988d", "filename": "gcc/testsuite/gcc.target/loongarch/flogb.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f5225dbf5cf2a57ed5a2073b1a90a854093d063e/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflogb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f5225dbf5cf2a57ed5a2073b1a90a854093d063e/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflogb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Floongarch%2Fflogb.c?ref=f5225dbf5cf2a57ed5a2073b1a90a854093d063e", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mdouble-float -fno-math-errno\" } */\n+/* { dg-final { scan-assembler \"fabs\\\\.s\" } } */\n+/* { dg-final { scan-assembler \"fabs\\\\.d\" } } */\n+/* { dg-final { scan-assembler \"flogb\\\\.s\" } } */\n+/* { dg-final { scan-assembler \"flogb\\\\.d\" } } */\n+\n+double\n+my_logb (double a)\n+{\n+  return __builtin_logb (a);\n+}\n+\n+float\n+my_logbf (float a)\n+{\n+  return __builtin_logbf (a);\n+}"}]}