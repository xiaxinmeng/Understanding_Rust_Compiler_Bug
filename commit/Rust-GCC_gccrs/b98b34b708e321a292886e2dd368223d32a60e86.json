{"sha": "b98b34b708e321a292886e2dd368223d32a60e86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjk4YjM0YjcwOGUzMjFhMjkyODg2ZTJkZDM2ODIyM2QzMmE2MGU4Ng==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2017-07-19T13:05:21Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2017-07-19T13:05:21Z"}, "message": "Add v2si support for nvptx\n\n2017-07-19  Tom de Vries  <tom@codesourcery.com>\n\n\t* config/nvptx/nvptx-modes.def: New file.  Add V2SImode.\n\t* config/nvptx/nvptx.c (nvptx_ptx_type_from_mode): Handle V2SImode.\n\t(nvptx_vector_mode_supported): New function.  Allow V2SImode.\n\t(TARGET_VECTOR_MODE_SUPPORTED_P): Redefine to nvptx_vector_mode_supported.\n\t* config/nvptx/nvptx.md (VECIM): New mode iterator. Add V2SI.\n\t(mov<VECIM>_insn): New define_insn.\n\t(define_expand \"mov<VECIM>): New define_expand.\n\n\t* gcc.target/nvptx/slp-run.c: New test.\n\t* gcc.target/nvptx/slp.c: New test.\n\t* gcc.target/nvptx/v2si-cvt.c: New test.\n\t* gcc.target/nvptx/v2si-run.c: New test.\n\t* gcc.target/nvptx/v2si.c: New test.\n\t* gcc.target/nvptx/vec.inc: New test.\n\nFrom-SVN: r250340", "tree": {"sha": "e4db190e9097d5c04e3dcdbdc2382673d54d4db5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e4db190e9097d5c04e3dcdbdc2382673d54d4db5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b98b34b708e321a292886e2dd368223d32a60e86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b98b34b708e321a292886e2dd368223d32a60e86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b98b34b708e321a292886e2dd368223d32a60e86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b98b34b708e321a292886e2dd368223d32a60e86/comments", "author": null, "committer": null, "parents": [{"sha": "1310ff035d548056ad4a0def038a6c5dedd98b47", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1310ff035d548056ad4a0def038a6c5dedd98b47", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1310ff035d548056ad4a0def038a6c5dedd98b47"}], "stats": {"total": 261, "additions": 261, "deletions": 0}, "files": [{"sha": "f117bd96a5e36b076dc79d8eb463adb88b7bc14c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b98b34b708e321a292886e2dd368223d32a60e86", "patch": "@@ -1,3 +1,13 @@\n+2017-07-19  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* config/nvptx/nvptx-modes.def: New file.  Add V2SImode.\n+\t* config/nvptx/nvptx.c (nvptx_ptx_type_from_mode): Handle V2SImode.\n+\t(nvptx_vector_mode_supported): New function.  Allow V2SImode.\n+\t(TARGET_VECTOR_MODE_SUPPORTED_P): Redefine to nvptx_vector_mode_supported.\n+\t* config/nvptx/nvptx.md (VECIM): New mode iterator. Add V2SI.\n+\t(mov<VECIM>_insn): New define_insn.\n+\t(define_expand \"mov<VECIM>): New define_expand.\n+\n 2017-07-19  Tom de Vries  <tom@codesourcery.com>\n \n \t* config/nvptx/nvptx.c (nvptx_print_operand): Handle v2 vector mode."}, {"sha": "d49429cf1b1843d930ed71ead3c28c83ca4cb19c", "filename": "gcc/config/nvptx/nvptx-modes.def", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Fconfig%2Fnvptx%2Fnvptx-modes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Fconfig%2Fnvptx%2Fnvptx-modes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx-modes.def?ref=b98b34b708e321a292886e2dd368223d32a60e86", "patch": "@@ -0,0 +1 @@\n+VECTOR_MODE (INT, SI, 2);  /* V2SI */"}, {"sha": "bc94713bf0a5b7130a8f516b210793f5e7801186", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=b98b34b708e321a292886e2dd368223d32a60e86", "patch": "@@ -236,6 +236,9 @@ nvptx_ptx_type_from_mode (machine_mode mode, bool promote)\n     case DFmode:\n       return \".f64\";\n \n+    case V2SImode:\n+      return \".v2.u32\";\n+\n     default:\n       gcc_unreachable ();\n     }\n@@ -5433,6 +5436,12 @@ nvptx_cannot_force_const_mem (machine_mode mode ATTRIBUTE_UNUSED,\n   return true;\n }\n \n+static bool\n+nvptx_vector_mode_supported (machine_mode mode)\n+{\n+  return mode == V2SImode;\n+}\n+\n #undef TARGET_OPTION_OVERRIDE\n #define TARGET_OPTION_OVERRIDE nvptx_option_override\n \n@@ -5550,6 +5559,9 @@ nvptx_cannot_force_const_mem (machine_mode mode ATTRIBUTE_UNUSED,\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM nvptx_cannot_force_const_mem\n \n+#undef TARGET_VECTOR_MODE_SUPPORTED_P\n+#define TARGET_VECTOR_MODE_SUPPORTED_P nvptx_vector_mode_supported\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \n #include \"gt-nvptx.h\""}, {"sha": "96a90e7f20d48b2e340c2d95ae02019156d7e3fa", "filename": "gcc/config/nvptx/nvptx.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Fconfig%2Fnvptx%2Fnvptx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.md?ref=b98b34b708e321a292886e2dd368223d32a60e86", "patch": "@@ -184,6 +184,7 @@\n (define_mode_iterator SDCM [SC DC])\n (define_mode_iterator BITS [SI SF])\n (define_mode_iterator BITD [DI DF])\n+(define_mode_iterator VECIM [V2SI])\n \n ;; This mode iterator allows :P to be used for patterns that operate on\n ;; pointer-sized quantities.  Exactly one of the two alternatives will match.\n@@ -200,6 +201,20 @@\n    %.\\\\tsetp.eq.u32\\\\t%0, 1, 0;\n    %.\\\\tsetp.eq.u32\\\\t%0, 1, 1;\")\n \n+(define_insn \"*mov<mode>_insn\"\n+  [(set (match_operand:VECIM 0 \"nonimmediate_operand\" \"=R,R,m\")\n+\t(match_operand:VECIM 1 \"general_operand\" \"Ri,m,R\"))]\n+  \"!MEM_P (operands[0]) || REG_P (operands[1])\"\n+{\n+  if (which_alternative == 1)\n+    return \"%.\\\\tld%A1%u1\\\\t%0, %1;\";\n+  if (which_alternative == 2)\n+    return \"%.\\\\tst%A0%u0\\\\t%0, %1;\";\n+\n+  return nvptx_output_mov_insn (operands[0], operands[1]);\n+}\n+  [(set_attr \"subregs_ok\" \"true\")])\n+\n (define_insn \"*mov<mode>_insn\"\n   [(set (match_operand:QHSDIM 0 \"nonimmediate_operand\" \"=R,R,m\")\n \t(match_operand:QHSDIM 1 \"general_operand\" \"Ri,m,R\"))]\n@@ -242,6 +257,20 @@\n   \"\"\n   \"%.\\\\tmov%t0\\\\t%0, %%ar%1;\")\n \n+ (define_expand \"mov<mode>\"\n+  [(set (match_operand:VECIM 0 \"nonimmediate_operand\" \"\")\n+\t(match_operand:VECIM 1 \"general_operand\" \"\"))]\n+  \"\"\n+{\n+  if (MEM_P (operands[0]) && !REG_P (operands[1]))\n+    {\n+      rtx tmp = gen_reg_rtx (<MODE>mode);\n+      emit_move_insn (tmp, operands[1]);\n+      emit_move_insn (operands[0], tmp);\n+      DONE;\n+    }\n+})\n+\n (define_expand \"mov<mode>\"\n   [(set (match_operand:QHSDISDFM 0 \"nonimmediate_operand\" \"\")\n \t(match_operand:QHSDISDFM 1 \"general_operand\" \"\"))]"}, {"sha": "fd55c688b46ee7b365e579fee9d4ee23a38e96ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b98b34b708e321a292886e2dd368223d32a60e86", "patch": "@@ -1,3 +1,12 @@\n+2017-07-19  Tom de Vries  <tom@codesourcery.com>\n+\n+\t* gcc.target/nvptx/slp-run.c: New test.\n+\t* gcc.target/nvptx/slp.c: New test.\n+\t* gcc.target/nvptx/v2si-cvt.c: New test.\n+\t* gcc.target/nvptx/v2si-run.c: New test.\n+\t* gcc.target/nvptx/v2si.c: New test.\n+\t* gcc.target/nvptx/vec.inc: New test.\n+\n 2017-07-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/81346"}, {"sha": "dedec471bb998eed2df1987c211a8b5a3bbca744", "filename": "gcc/testsuite/gcc.target/nvptx/slp-run.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fslp-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fslp-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fslp-run.c?ref=b98b34b708e321a292886e2dd368223d32a60e86", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -ftree-slp-vectorize\" } */\n+\n+#include \"slp.c\"\n+\n+int\n+main(void)\n+{\n+  unsigned int i;\n+  for (i = 0; i < 1000; i += 1)\n+    {\n+      p[i] = i;\n+      p2[i] = 0;\n+    }\n+\n+  foo ();\n+\n+  for (i = 0; i < 1000; i += 1)\n+    if (p2[i] != i)\n+      return 1;\n+\n+  return 0;\n+}"}, {"sha": "5dee147af9c1f9c552e8407ed8e3487979a0c57e", "filename": "gcc/testsuite/gcc.target/nvptx/slp.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fslp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fslp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fslp.c?ref=b98b34b708e321a292886e2dd368223d32a60e86", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -ftree-slp-vectorize -save-temps\" } */\n+\n+int p[1000] __attribute__((aligned(8)));\n+int p2[1000] __attribute__((aligned(8)));\n+\n+void __attribute__((noinline, noclone))\n+foo ()\n+{\n+  int a, b;\n+\n+  unsigned int i;\n+  for (i = 0; i < 1000; i += 2)\n+    {\n+      a = p[i];\n+      b = p[i+1];\n+\n+      p2[i] = a;\n+      p2[i+1] = b;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler \"ld.v2.u32\" } } */\n+/* { dg-final { scan-assembler \"st.v2.u32\" } } */\n+"}, {"sha": "73f86bcfa9e3d0066ef6e6bd73df7e9396230125", "filename": "gcc/testsuite/gcc.target/nvptx/v2si-cvt.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si-cvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si-cvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si-cvt.c?ref=b98b34b708e321a292886e2dd368223d32a60e86", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+\n+typedef int __v2si __attribute__((__vector_size__(8)));\n+\n+int __attribute__((unused))\n+vector_cvt (__v2si arg)\n+{\n+  __v2si val4 = arg;\n+  char *p = (char*)&val4;\n+\n+  if (p[0] != 1)\n+    return 1;\n+  if (p[1] != 2)\n+    return 1;\n+  if (p[2] != 3)\n+    return 1;\n+\n+  return 0;\n+}\n+\n+int\n+vector_cvt_2 (__v2si val, __v2si val2)\n+{\n+  char *p = (char*)&val;\n+  char *p2 = (char*)&val2;\n+\n+  if (p[0] != p2[0])\n+    return 1;\n+  if (p[4] != p2[4])\n+    return 1;\n+\n+  return 0;\n+}\n+\n+/* We want to test for 'mov.t' here, but given PR80845 we test for cvt.t.t\n+   instead.\n+   { dg-final { scan-assembler \"(?n)cvt\\\\.u32\\\\.u32.*\\\\.x\" } } */\n+/* { dg-final { scan-assembler \"(?n)cvt\\\\.u16\\\\.u32.*\\\\.x\" } } */"}, {"sha": "5821a5a95d6bdd593152ab33843b104b0052c18a", "filename": "gcc/testsuite/gcc.target/nvptx/v2si-run.c", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si-run.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si-run.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si-run.c?ref=b98b34b708e321a292886e2dd368223d32a60e86", "patch": "@@ -0,0 +1,83 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2\" } */\n+\n+#include \"v2si.c\"\n+\n+void __attribute__((noinline, noclone))\n+init_val ( __v2si *p)\n+{\n+  char *p2 = (char*)p;\n+  p2[0] = 8;\n+  p2[1] = 7;\n+  p2[2] = 6;\n+  p2[3] = 5;\n+  p2[4] = 4;\n+  p2[5] = 3;\n+  p2[6] = 2;\n+  p2[7] = 1;\n+}\n+\n+int\n+main (void)\n+{\n+  {\n+    __v2si val;\n+    __v2si val2;\n+    __v2si val3;\n+\n+    init_val(&val);\n+\n+    /* Copy val to val2.  */\n+    vector_store (&val2, val);\n+\n+    /* Copy val2 to val3.  */\n+    val3 = vector_load (&val2);\n+\n+    /* Compare val to val3.  */\n+    {\n+      char *p = (char*)&val;\n+      char *p2 = (char*)&val3;\n+\n+      if (p[0] != p2[0])\n+\treturn 1;\n+      if (p[1] != p2[1])\n+\treturn 1;\n+      if (p[2] != p2[2])\n+\treturn 1;\n+      if (p[3] != p2[3])\n+\treturn 1;\n+      if (p[4] != p2[4])\n+\treturn 1;\n+      if (p[5] != p2[5])\n+\treturn 1;\n+      if (p[6] != p2[6])\n+\treturn 1;\n+      if (p[7] != p2[7])\n+\treturn 1;\n+    }\n+  }\n+\n+  {\n+    __v2si val4 = vector_const ();\n+    char *p = (char*)&val4;\n+\n+    if (p[0] != 1)\n+      return 1;\n+    if (p[1] != 0)\n+      return 1;\n+    if (p[2] != 0)\n+      return 1;\n+    if (p[3] != 0)\n+      return 1;\n+    if (p[4] != 2)\n+      return 1;\n+    if (p[5] != 0)\n+      return 1;\n+    if (p[6] != 0)\n+      return 1;\n+    if (p[7] != 0)\n+      return 1;\n+  }\n+\n+  return 0;\n+}"}, {"sha": "ce423d82c2cae5b1e5403201e4379b92c7d1b694", "filename": "gcc/testsuite/gcc.target/nvptx/v2si.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fv2si.c?ref=b98b34b708e321a292886e2dd368223d32a60e86", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O2 -save-temps\" } */\n+\n+typedef int __v2si __attribute__((__vector_size__(8)));\n+\n+#define TYPE __v2si\n+#include \"vec.inc\"\n+\n+/* { dg-final { scan-assembler \".reg\\\\.v2\\\\.u32\" } } */\n+/* { dg-final { scan-assembler \"ld\\\\.v2\\\\.u32\" } } */\n+/* { dg-final { scan-assembler \"st\\\\.v2\\\\.u32\" } } */\n+/* { dg-final { scan-assembler \"(?n)mov\\\\.v2\\\\.u32.*\\\\{ 1, 2 \\\\}\" } } */"}, {"sha": "269a9749e26afd59a1953f42bd86bd5613b18a8d", "filename": "gcc/testsuite/gcc.target/nvptx/vec.inc", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fvec.inc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b98b34b708e321a292886e2dd368223d32a60e86/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fvec.inc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fnvptx%2Fvec.inc?ref=b98b34b708e321a292886e2dd368223d32a60e86", "patch": "@@ -0,0 +1,18 @@\n+TYPE __attribute__((noinline, noclone))\n+vector_load (TYPE *p)\n+{\n+  return *p;\n+}\n+\n+void __attribute__((noinline, noclone))\n+vector_store (TYPE *p, TYPE val)\n+{\n+  *p = val;\n+}\n+\n+TYPE __attribute__((noinline, noclone))\n+vector_const ()\n+{\n+  TYPE res = {1, 2};\n+  return res;\n+}"}]}