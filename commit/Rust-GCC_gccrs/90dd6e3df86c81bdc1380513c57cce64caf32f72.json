{"sha": "90dd6e3df86c81bdc1380513c57cce64caf32f72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTBkZDZlM2RmODZjODFiZGMxMzgwNTEzYzU3Y2NlNjRjYWYzMmY3Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-04-28T08:30:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-04-28T08:30:44Z"}, "message": "re PR fortran/62283 (basic-block vectorization fails)\n\n2015-04-28  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/62283\n\t* tree-vect-slp.c (vect_build_slp_tree): When the SLP build\n\tfails fatally and we are vectorizing a basic-block simply\n\tcause the child to be constructed piecewise.\n\t(vect_analyze_slp_cost_1): Adjust.\n\t(vect_detect_hybrid_slp_stmts): Likewise.\n\t(vect_bb_slp_scalar_cost): Likewise.\n\t(vect_get_constant_vectors): For piecewise constructed\n\tconstants place them after the last def.\n\t(vect_get_slp_defs): Adjust.\n\t* tree-vect-stmts.c (vect_is_simple_use): Detect in-BB\n\texternals for basic-block vectorization.\n\n\t* gfortran.dg/vect/pr62283-2.f: New testcase.\n\t* gcc.dg/vect/bb-slp-14.c: Adjust.\n\nFrom-SVN: r222514", "tree": {"sha": "bdcf186857724357c1663bf3fe7816d98815ea78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdcf186857724357c1663bf3fe7816d98815ea78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90dd6e3df86c81bdc1380513c57cce64caf32f72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90dd6e3df86c81bdc1380513c57cce64caf32f72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90dd6e3df86c81bdc1380513c57cce64caf32f72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90dd6e3df86c81bdc1380513c57cce64caf32f72/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fde9b31b61aa281b502e4f49200e3090aa8a4dd1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fde9b31b61aa281b502e4f49200e3090aa8a4dd1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fde9b31b61aa281b502e4f49200e3090aa8a4dd1"}], "stats": {"total": 135, "additions": 111, "deletions": 24}, "files": [{"sha": "8efe3d87e442717605a8bc5b41ad097034f7f844", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90dd6e3df86c81bdc1380513c57cce64caf32f72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90dd6e3df86c81bdc1380513c57cce64caf32f72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90dd6e3df86c81bdc1380513c57cce64caf32f72", "patch": "@@ -1,3 +1,18 @@\n+2015-04-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/62283\n+\t* tree-vect-slp.c (vect_build_slp_tree): When the SLP build\n+\tfails fatally and we are vectorizing a basic-block simply\n+\tcause the child to be constructed piecewise.\n+\t(vect_analyze_slp_cost_1): Adjust.\n+\t(vect_detect_hybrid_slp_stmts): Likewise.\n+\t(vect_bb_slp_scalar_cost): Likewise.\n+\t(vect_get_constant_vectors): For piecewise constructed\n+\tconstants place them after the last def.\n+\t(vect_get_slp_defs): Adjust.\n+\t* tree-vect-stmts.c (vect_is_simple_use): Detect in-BB\n+\texternals for basic-block vectorization.\n+\n 2015-04-28  Thomas Preud'homme  <thomas.preudhomme@arm.com>\n \n \tPR target/63503"}, {"sha": "703bc3aa19e4fcc3467437f92df701eec6c7b9f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90dd6e3df86c81bdc1380513c57cce64caf32f72/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90dd6e3df86c81bdc1380513c57cce64caf32f72/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=90dd6e3df86c81bdc1380513c57cce64caf32f72", "patch": "@@ -1,3 +1,9 @@\n+2015-04-28  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/62283\n+\t* gfortran.dg/vect/pr62283-2.f: New testcase.\n+\t* gcc.dg/vect/bb-slp-14.c: Adjust.\n+\n 2015-04-28  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/65851"}, {"sha": "d8ba10b974fe88871d72556473816f2c39695919", "filename": "gcc/testsuite/gcc.dg/vect/bb-slp-14.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90dd6e3df86c81bdc1380513c57cce64caf32f72/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-14.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90dd6e3df86c81bdc1380513c57cce64caf32f72/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-14.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fbb-slp-14.c?ref=90dd6e3df86c81bdc1380513c57cce64caf32f72", "patch": "@@ -14,7 +14,8 @@ main1 (unsigned int x, unsigned int y)\n   int i;\n   unsigned int a0, a1, a2, a3;\n \n-  /* Not consecutive load with permutation - not supported.  */\n+  /* Not consecutive load with permutation - supported with building up\n+     the vector from scalars.  */\n   a0 = in[0] + 23;\n   a1 = in[1] + 142;\n   a2 = in[1] + 2;\n@@ -47,6 +48,6 @@ int main (void)\n   return 0;\n }\n \n-/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 0 \"slp2\"  } } */\n+/* { dg-final { scan-tree-dump-times \"basic block vectorized\" 1 \"slp2\"  } } */\n /* { dg-final { cleanup-tree-dump \"slp2\" } } */\n   "}, {"sha": "b71ac3eecef54b38c1d9d41f1a3bc913bda39263", "filename": "gcc/testsuite/gfortran.dg/vect/pr62283-2.f", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90dd6e3df86c81bdc1380513c57cce64caf32f72/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr62283-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90dd6e3df86c81bdc1380513c57cce64caf32f72/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr62283-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr62283-2.f?ref=90dd6e3df86c81bdc1380513c57cce64caf32f72", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+! { dg-require-effective-target vect_float }\n+! { dg-additional-options \"-fdump-tree-slp2-details\" }\n+      subroutine saxpy(alpha,x,y)\n+      real x(4),y(4),alpha\n+      y(1)=y(1)+alpha*x(1)\n+      y(2)=y(2)+alpha*x(2)\n+      y(3)=y(3)+alpha*x(3)\n+      y(4)=y(4)+alpha*x(4)\n+      end\n+! { dg-final { scan-tree-dump \"basic block vectorized\" \"slp2\" } }\n+! { dg-final { cleanup-tree-dump \"slp2\" } }\n+! { dg-final { cleanup-tree-dump \"vect\" } }"}, {"sha": "b066763bec78780a4169b8ca70618a3823a9ac4b", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 70, "deletions": 21, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90dd6e3df86c81bdc1380513c57cce64caf32f72/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90dd6e3df86c81bdc1380513c57cce64caf32f72/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=90dd6e3df86c81bdc1380513c57cce64caf32f72", "patch": "@@ -1017,6 +1017,29 @@ vect_build_slp_tree (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \t  continue;\n \t}\n \n+      /* If the SLP build failed fatally and we analyze a basic-block\n+         simply treat nodes we fail to build as externally defined\n+\t (and thus build vectors from the scalar defs).\n+\t The cost model will reject outright expensive cases.\n+\t ???  This doesn't treat cases where permutation ultimatively\n+\t fails (or we don't try permutation below).  Ideally we'd\n+\t even compute a permutation that will end up with the maximum\n+\t SLP tree size...  */\n+      if (bb_vinfo\n+\t  && !matches[0]\n+\t  /* ???  Rejecting patterns this way doesn't work.  We'd have to\n+\t     do extra work to cancel the pattern so the uses see the\n+\t     scalar version.  */\n+\t  && !is_pattern_stmt_p (vinfo_for_stmt (stmt)))\n+\t{\n+\t  dump_printf_loc (MSG_NOTE, vect_location,\n+\t\t\t   \"Building vector operands from scalars\\n\");\n+\t  oprnd_info->def_stmts = vNULL;\n+\t  vect_free_slp_tree (child);\n+\t  SLP_TREE_CHILDREN (*node).quick_push (NULL);\n+\t  continue;\n+\t}\n+\n       /* If the SLP build for operand zero failed and operand zero\n \t and one can be commutated try that for the scalar stmts\n \t that failed the match.  */\n@@ -1417,9 +1440,10 @@ vect_analyze_slp_cost_1 (loop_vec_info loop_vinfo, bb_vec_info bb_vinfo,\n \n   /* Recurse down the SLP tree.  */\n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n-    vect_analyze_slp_cost_1 (loop_vinfo, bb_vinfo,\n-\t\t\t     instance, child, prologue_cost_vec,\n-\t\t\t     ncopies_for_cost);\n+    if (child)\n+      vect_analyze_slp_cost_1 (loop_vinfo, bb_vinfo,\n+\t\t\t       instance, child, prologue_cost_vec,\n+\t\t\t       ncopies_for_cost);\n \n   /* Look at the first scalar stmt to determine the cost.  */\n   stmt = SLP_TREE_SCALAR_STMTS (node)[0];\n@@ -1885,7 +1909,8 @@ vect_detect_hybrid_slp_stmts (slp_tree node, unsigned i, slp_vect_type stype)\n     STMT_SLP_TYPE (stmt_vinfo) = hybrid;\n \n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), j, child)\n-    vect_detect_hybrid_slp_stmts (child, i, stype);\n+    if (child)\n+      vect_detect_hybrid_slp_stmts (child, i, stype);\n }\n \n /* Helpers for vect_detect_hybrid_slp walking pattern stmt uses.  */\n@@ -2162,7 +2187,8 @@ vect_bb_slp_scalar_cost (basic_block bb,\n     }\n \n   FOR_EACH_VEC_ELT (SLP_TREE_CHILDREN (node), i, child)\n-    scalar_cost += vect_bb_slp_scalar_cost (bb, child, life);\n+    if (child)\n+      scalar_cost += vect_bb_slp_scalar_cost (bb, child, life);\n \n   return scalar_cost;\n }\n@@ -2612,6 +2638,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n \n   number_of_places_left_in_vector = nunits;\n   elts = XALLOCAVEC (tree, nunits);\n+  bool place_after_defs = false;\n   for (j = 0; j < number_of_copies; j++)\n     {\n       for (i = group_size - 1; stmts.iterate (i, &stmt); i--)\n@@ -2682,6 +2709,7 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n \n           /* Create 'vect_ = {op0,op1,...,opn}'.  */\n           number_of_places_left_in_vector--;\n+\t  tree orig_op = op;\n \t  if (!types_compatible_p (TREE_TYPE (vector_type), TREE_TYPE (op)))\n \t    {\n \t      if (CONSTANT_CLASS_P (op))\n@@ -2704,6 +2732,12 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n \t  elts[number_of_places_left_in_vector] = op;\n \t  if (!CONSTANT_CLASS_P (op))\n \t    constant_p = false;\n+\t  if (TREE_CODE (orig_op) == SSA_NAME\n+\t      && !SSA_NAME_IS_DEFAULT_DEF (orig_op)\n+\t      && STMT_VINFO_BB_VINFO (stmt_vinfo)\n+\t      && (STMT_VINFO_BB_VINFO (stmt_vinfo)->bb\n+\t\t  == gimple_bb (SSA_NAME_DEF_STMT (orig_op))))\n+\t    place_after_defs = true;\n \n           if (number_of_places_left_in_vector == 0)\n             {\n@@ -2720,16 +2754,25 @@ vect_get_constant_vectors (tree op, slp_tree slp_node,\n \t\t    CONSTRUCTOR_APPEND_ELT (v, NULL_TREE, elts[k]);\n \t\t  vec_cst = build_constructor (vector_type, v);\n \t\t}\n-              voprnds.quick_push (vect_init_vector (stmt, vec_cst,\n-\t\t\t\t\t\t    vector_type, NULL));\n+\t      tree init;\n+\t      gimple_stmt_iterator gsi;\n+\t      if (place_after_defs)\n+\t\t{\n+\t\t  gsi = gsi_for_stmt\n+\t\t          (vect_find_last_scalar_stmt_in_slp (slp_node));\n+\t\t  init = vect_init_vector (stmt, vec_cst, vector_type, &gsi);\n+\t\t}\n+\t      else\n+\t\tinit = vect_init_vector (stmt, vec_cst, vector_type, NULL);\n \t      if (ctor_seq != NULL)\n \t\t{\n-\t\t  gimple init_stmt = SSA_NAME_DEF_STMT (voprnds.last ());\n-\t\t  gimple_stmt_iterator gsi = gsi_for_stmt (init_stmt);\n+\t\t  gsi = gsi_for_stmt (SSA_NAME_DEF_STMT (init));\n \t\t  gsi_insert_seq_before_without_update (&gsi, ctor_seq,\n \t\t\t\t\t\t\tGSI_SAME_STMT);\n \t\t  ctor_seq = NULL;\n \t\t}\n+\t      voprnds.quick_push (init);\n+\t      place_after_defs = false;\n             }\n         }\n     }\n@@ -2825,20 +2868,26 @@ vect_get_slp_defs (vec<tree> ops, slp_tree slp_node,\n           child = SLP_TREE_CHILDREN (slp_node)[child_index];\n \n \t  /* We have to check both pattern and original def, if available.  */\n-\t  gimple first_def = SLP_TREE_SCALAR_STMTS (child)[0];\n-\t  gimple related = STMT_VINFO_RELATED_STMT (vinfo_for_stmt (first_def));\n-\n-\t  if (operand_equal_p (oprnd, gimple_get_lhs (first_def), 0)\n-\t      || (related\n-\t\t  && operand_equal_p (oprnd, gimple_get_lhs (related), 0)))\n+\t  if (child)\n \t    {\n-\t      /* The number of vector defs is determined by the number of\n-\t\t vector statements in the node from which we get those\n-\t\t statements.  */\n-\t      number_of_vects = SLP_TREE_NUMBER_OF_VEC_STMTS (child);\n-\t      vectorized_defs = true;\n-\t      child_index++;\n+\t      gimple first_def = SLP_TREE_SCALAR_STMTS (child)[0];\n+\t      gimple related\n+\t\t= STMT_VINFO_RELATED_STMT (vinfo_for_stmt (first_def));\n+\n+\t      if (operand_equal_p (oprnd, gimple_get_lhs (first_def), 0)\n+\t\t  || (related\n+\t\t      && operand_equal_p (oprnd, gimple_get_lhs (related), 0)))\n+\t\t{\n+\t\t  /* The number of vector defs is determined by the number of\n+\t\t     vector statements in the node from which we get those\n+\t\t     statements.  */\n+\t\t  number_of_vects = SLP_TREE_NUMBER_OF_VEC_STMTS (child);\n+\t\t  vectorized_defs = true;\n+\t\t  child_index++;\n+\t\t}\n \t    }\n+\t  else\n+\t    child_index++;\n         }\n \n       if (!vectorized_defs)"}, {"sha": "2ce6d4d7c2510e7a5cfe2207e1ae883b8a42a681", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90dd6e3df86c81bdc1380513c57cce64caf32f72/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90dd6e3df86c81bdc1380513c57cce64caf32f72/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=90dd6e3df86c81bdc1380513c57cce64caf32f72", "patch": "@@ -7752,7 +7752,10 @@ vect_is_simple_use (tree operand, gimple stmt, loop_vec_info loop_vinfo,\n   else\n     {\n       stmt_vinfo = vinfo_for_stmt (*def_stmt);\n-      *dt = STMT_VINFO_DEF_TYPE (stmt_vinfo);\n+      if (!loop && !STMT_VINFO_VECTORIZABLE (stmt_vinfo))\n+\t*dt = vect_external_def;\n+      else\n+\t*dt = STMT_VINFO_DEF_TYPE (stmt_vinfo);\n     }\n \n   if (dump_enabled_p ())"}]}