{"sha": "6816f04063a29a51f23898e8fde845a5ddffe822", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgxNmYwNDA2M2EyOWE1MWYyMzg5OGU4ZmRlODQ1YTVkZGZmZTgyMg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "1999-12-20T15:53:43Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "1999-12-20T15:53:43Z"}, "message": "typeck.c (strip_all_pointer_quals): New static function.\n\n* typeck.c (strip_all_pointer_quals): New static function.\n(build_static_cast): Use it. Don't use at_least_as_qualified_p.\n\nFrom-SVN: r31034", "tree": {"sha": "e8ad976331ce00676f70265e10ce93bcd0d9244d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e8ad976331ce00676f70265e10ce93bcd0d9244d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6816f04063a29a51f23898e8fde845a5ddffe822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6816f04063a29a51f23898e8fde845a5ddffe822", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6816f04063a29a51f23898e8fde845a5ddffe822", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6816f04063a29a51f23898e8fde845a5ddffe822/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "01d939e8fb624ea88487fd41ce93c238a5eb870a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01d939e8fb624ea88487fd41ce93c238a5eb870a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01d939e8fb624ea88487fd41ce93c238a5eb870a"}], "stats": {"total": 31, "additions": 24, "deletions": 7}, "files": [{"sha": "8c67559b7c38e3878a0869eed7f46418efc36e2c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6816f04063a29a51f23898e8fde845a5ddffe822/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6816f04063a29a51f23898e8fde845a5ddffe822/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6816f04063a29a51f23898e8fde845a5ddffe822", "patch": "@@ -1,3 +1,8 @@\n+1999-12-20  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* typeck.c (strip_all_pointer_quals): New static function.\n+\t(build_static_cast): Use it. Don't use at_least_as_qualified_p.\n+\n 1999-12-16  Mark Mitchell  <mark@codesourcery.com>\n \n \t* cp-tree.h (cp_tree_index): Add CPTI_DSO_HANDLE."}, {"sha": "ee12ee66d217412d0d309cc4f5360b3151cf2a4d", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6816f04063a29a51f23898e8fde845a5ddffe822/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6816f04063a29a51f23898e8fde845a5ddffe822/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=6816f04063a29a51f23898e8fde845a5ddffe822", "patch": "@@ -65,6 +65,7 @@ static int comp_cv_target_types PROTO((tree, tree, int));\n static void casts_away_constness_r PROTO((tree *, tree *));\n static int casts_away_constness PROTO ((tree, tree));\n static void maybe_warn_about_returning_address_of_local PROTO ((tree));\n+static tree strip_all_pointer_quals PROTO ((tree));\n \n /* Return the target type of TYPE, which means return T for:\n    T*, T&, T[], T (...), and otherwise, just T.  */\n@@ -5182,14 +5183,13 @@ build_static_cast (type, expr)\n   /* FIXME handle casting to array type.  */\n \n   ok = 0;\n-  if (can_convert_arg (type, intype, expr))\n+  if (can_convert_arg (strip_all_pointer_quals (type),\n+                       strip_all_pointer_quals (intype), expr))\n     ok = 1;\n   else if (TYPE_PTROB_P (type) && TYPE_PTROB_P (intype))\n     {\n       tree binfo;\n       if (IS_AGGR_TYPE (TREE_TYPE (type)) && IS_AGGR_TYPE (TREE_TYPE (intype))\n-\t  && at_least_as_qualified_p (TREE_TYPE (type),\n-\t\t\t\t      TREE_TYPE (intype))\n \t  && (binfo = get_binfo (TREE_TYPE (intype), TREE_TYPE (type), 0))\n \t  && ! TREE_VIA_VIRTUAL (binfo))\n \tok = 1;\n@@ -5198,8 +5198,6 @@ build_static_cast (type, expr)\n     {\n       if (same_type_p (TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (type))),\n \t\t       TYPE_MAIN_VARIANT (TREE_TYPE (TREE_TYPE (intype))))\n-\t  && at_least_as_qualified_p (TREE_TYPE (TREE_TYPE (type)),\n-\t\t\t\t      TREE_TYPE (TREE_TYPE (intype)))\n \t  && (binfo = get_binfo (TYPE_OFFSET_BASETYPE (TREE_TYPE (type)),\n \t\t\t\t TYPE_OFFSET_BASETYPE (TREE_TYPE (intype)), 0))\n \t  && ! TREE_VIA_VIRTUAL (binfo))\n@@ -5208,13 +5206,13 @@ build_static_cast (type, expr)\n   else if (TREE_CODE (intype) != BOOLEAN_TYPE\n \t   && TREE_CODE (type) != ARRAY_TYPE\n \t   && TREE_CODE (type) != FUNCTION_TYPE\n-\t   && can_convert (intype, type))\n+\t   && can_convert (intype, strip_all_pointer_quals (type)))\n     ok = 1;\n \n   /* [expr.static.cast]\n \n      The static_cast operator shall not be used to cast away\n-     constnes.  */\n+     constness.  */\n   if (ok && casts_away_constness (intype, type))\n     {\n       cp_error (\"static_cast from `%T' to `%T' casts away constness\",\n@@ -7173,3 +7171,17 @@ casts_away_constness (t1, t2)\n \n   return 0;\n }\n+\n+/* Returns TYPE with its cv qualifiers removed\n+   TYPE is T cv* .. *cv where T is not a pointer type,\n+   returns T * .. *  */\n+\n+static tree\n+strip_all_pointer_quals (type)\n+     tree type;\n+{\n+  if (TREE_CODE (type) == POINTER_TYPE)\n+    return build_pointer_type (strip_all_pointer_quals (TREE_TYPE (type)));\n+  else\n+    return strip_top_quals (type);\n+}"}]}