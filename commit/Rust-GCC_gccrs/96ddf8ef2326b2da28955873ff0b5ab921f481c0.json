{"sha": "96ddf8ef2326b2da28955873ff0b5ab921f481c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTZkZGY4ZWYyMzI2YjJkYTI4OTU1ODczZmYwYjVhYjkyMWY0ODFjMA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2005-03-31T23:26:33Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2005-03-31T23:26:33Z"}, "message": "re PR target/20632 (GCC should avoid generating F- and B-unit NOPs)\n\n2005-03-31  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR target/20632\n\t* genautomata.c (first_cycle_unit_presence): Check all alternative\n\tstates for unit presence.\n\n\t* doc/md.texi: Remove remark about impossibility to query unit\n\tpresence in non nondeterministic automaton state.\n\n\t* config/ia64/ia64.c (get_template): Change order of unit querying.\n\nFrom-SVN: r97351", "tree": {"sha": "15ba83c430e72fa4e12a0498791b5840382d54ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15ba83c430e72fa4e12a0498791b5840382d54ee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96ddf8ef2326b2da28955873ff0b5ab921f481c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ddf8ef2326b2da28955873ff0b5ab921f481c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96ddf8ef2326b2da28955873ff0b5ab921f481c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96ddf8ef2326b2da28955873ff0b5ab921f481c0/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b08ee07eb26a89c19c5c245fbc04f3935f271363", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b08ee07eb26a89c19c5c245fbc04f3935f271363", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b08ee07eb26a89c19c5c245fbc04f3935f271363"}], "stats": {"total": 91, "additions": 55, "deletions": 36}, "files": [{"sha": "9b9ff0d25ce306e9540a7a271974bcf027c54644", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ddf8ef2326b2da28955873ff0b5ab921f481c0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ddf8ef2326b2da28955873ff0b5ab921f481c0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=96ddf8ef2326b2da28955873ff0b5ab921f481c0", "patch": "@@ -1,3 +1,14 @@\n+2005-03-31  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR target/20632\n+\t* genautomata.c (first_cycle_unit_presence): Check all alternative\n+\tstates for unit presence.\n+\n+\t* doc/md.texi: Remove remark about impossibility to query unit\n+\tpresence in non nondeterministic automaton state.\n+\t\n+\t* config/ia64/ia64.c (get_template): Change order of unit querying.\n+\n 2005-03-31  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* tree-ssa-dom.c (cprop_into_successor_phis): Remove an"}, {"sha": "fef372983646f426570c99301f3130a7077c7b69", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 33, "deletions": 27, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ddf8ef2326b2da28955873ff0b5ab921f481c0/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ddf8ef2326b2da28955873ff0b5ab921f481c0/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=96ddf8ef2326b2da28955873ff0b5ab921f481c0", "patch": "@@ -6481,53 +6481,59 @@ get_max_pos (state_t state)\n \n /* The function returns code of a possible template for given position\n    and state.  The function should be called only with 2 values of\n-   position equal to 3 or 6.  */\n+   position equal to 3 or 6.  We avoid generating F NOPs by putting\n+   templates containing F insns at the end of the template search\n+   because undocumented anomaly in McKinley derived cores which can\n+   cause stalls if an F-unit insn (including a NOP) is issued within a\n+   six-cycle window after reading certain application registers (such\n+   as ar.bsp).  Furthermore, power-considerations also argue against\n+   the use of F-unit instructions unless they're really needed.  */\n \n static int\n get_template (state_t state, int pos)\n {\n   switch (pos)\n     {\n     case 3:\n-      if (cpu_unit_reservation_p (state, _0mii_))\n-\treturn 0;\n-      else if (cpu_unit_reservation_p (state, _0mmi_))\n+      if (cpu_unit_reservation_p (state, _0mmi_))\n \treturn 1;\n-      else if (cpu_unit_reservation_p (state, _0mfi_))\n-\treturn 2;\n-      else if (cpu_unit_reservation_p (state, _0mmf_))\n-\treturn 3;\n-      else if (cpu_unit_reservation_p (state, _0bbb_))\n-\treturn 4;\n-      else if (cpu_unit_reservation_p (state, _0mbb_))\n-\treturn 5;\n-      else if (cpu_unit_reservation_p (state, _0mib_))\n-\treturn 6;\n+      else if (cpu_unit_reservation_p (state, _0mii_))\n+\treturn 0;\n       else if (cpu_unit_reservation_p (state, _0mmb_))\n \treturn 7;\n+      else if (cpu_unit_reservation_p (state, _0mib_))\n+\treturn 6;\n+      else if (cpu_unit_reservation_p (state, _0mbb_))\n+\treturn 5;\n+      else if (cpu_unit_reservation_p (state, _0bbb_))\n+\treturn 4;\n+      else if (cpu_unit_reservation_p (state, _0mmf_))\n+\treturn 3;\n+      else if (cpu_unit_reservation_p (state, _0mfi_))\n+\treturn 2;\n       else if (cpu_unit_reservation_p (state, _0mfb_))\n \treturn 8;\n       else if (cpu_unit_reservation_p (state, _0mlx_))\n \treturn 9;\n       else\n \tabort ();\n     case 6:\n-      if (cpu_unit_reservation_p (state, _1mii_))\n-\treturn 0;\n-      else if (cpu_unit_reservation_p (state, _1mmi_))\n+      if (cpu_unit_reservation_p (state, _1mmi_))\n \treturn 1;\n-      else if (cpu_unit_reservation_p (state, _1mfi_))\n-\treturn 2;\n-      else if (_1mmf_ >= 0 && cpu_unit_reservation_p (state, _1mmf_))\n-\treturn 3;\n-      else if (cpu_unit_reservation_p (state, _1bbb_))\n-\treturn 4;\n-      else if (cpu_unit_reservation_p (state, _1mbb_))\n-\treturn 5;\n-      else if (cpu_unit_reservation_p (state, _1mib_))\n-\treturn 6;\n+      else if (cpu_unit_reservation_p (state, _1mii_))\n+\treturn 0;\n       else if (cpu_unit_reservation_p (state, _1mmb_))\n \treturn 7;\n+      else if (cpu_unit_reservation_p (state, _1mib_))\n+\treturn 6;\n+      else if (cpu_unit_reservation_p (state, _1mbb_))\n+\treturn 5;\n+      else if (cpu_unit_reservation_p (state, _1bbb_))\n+\treturn 4;\n+      else if (_1mmf_ >= 0 && cpu_unit_reservation_p (state, _1mmf_))\n+\treturn 3;\n+      else if (cpu_unit_reservation_p (state, _1mfi_))\n+\treturn 2;\n       else if (cpu_unit_reservation_p (state, _1mfb_))\n \treturn 8;\n       else if (cpu_unit_reservation_p (state, _1mlx_))"}, {"sha": "608b0a8f0a679f16baff363b039f74ae7992ad19", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ddf8ef2326b2da28955873ff0b5ab921f481c0/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ddf8ef2326b2da28955873ff0b5ab921f481c0/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=96ddf8ef2326b2da28955873ff0b5ab921f481c0", "patch": "@@ -6232,9 +6232,7 @@ the treatment of operator @samp{|} in the regular expressions.  The\n usual treatment of the operator is to try the first alternative and,\n if the reservation is not possible, the second alternative.  The\n nondeterministic treatment means trying all alternatives, some of them\n-may be rejected by reservations in the subsequent insns.  You can not\n-query functional unit reservations in nondeterministic automaton\n-states.\n+may be rejected by reservations in the subsequent insns.\n \n @item\n @dfn{progress} means output of a progress bar showing how many states"}, {"sha": "ac1f69cb285a729a8cfbe9d9c7cbf291d17703af", "filename": "gcc/genautomata.c", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96ddf8ef2326b2da28955873ff0b5ab921f481c0/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96ddf8ef2326b2da28955873ff0b5ab921f481c0/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=96ddf8ef2326b2da28955873ff0b5ab921f481c0", "patch": "@@ -6120,15 +6120,19 @@ copy_equiv_class (vla_ptr_t *to, const vla_ptr_t *from)\n static int\n first_cycle_unit_presence (state_t state, int unit_num)\n {\n-  int presence_p;\n+  alt_state_t alt_state;\n \n   if (state->component_states == NULL)\n-    presence_p = test_unit_reserv (state->reservs, 0, unit_num);\n+    return test_unit_reserv (state->reservs, 0, unit_num);\n   else\n-    presence_p\n-      = test_unit_reserv (state->component_states->state->reservs,\n-\t\t\t  0, unit_num);\n-  return presence_p;\n+    {\n+      for (alt_state = state->component_states;\n+\t   alt_state != NULL;\n+\t   alt_state = alt_state->next_sorted_alt_state)\n+\tif (test_unit_reserv (alt_state->state->reservs, 0, unit_num))\n+\t  return true;\n+    }\n+  return false;\n }\n \n /* The function returns nonzero value if STATE is not equivalent to"}]}