{"sha": "472f272337752547c77fc9607f627edb08afcd61", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDcyZjI3MjMzNzc1MjU0N2M3N2ZjOTYwN2Y2MjdlZGIwOGFmY2Q2MQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-02-19T21:21:21Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-02-19T21:21:21Z"}, "message": "h8300.c (output_logical_op): Optimize or.l when ORing with 0xffff??00 with the highest bit of the ?? part set.\n\n\t* config/h8300/h8300.c (output_logical_op): Optimize or.l when\n\tORing with 0xffff??00 with the highest bit of the ?? part set.\n\t(compute_logical_op_length): Update.\n\t(compute_logical_op_cc): Likewise.\n\nFrom-SVN: r63131", "tree": {"sha": "bcad4f4791fc9fb3267ab4da028df814fced5a6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcad4f4791fc9fb3267ab4da028df814fced5a6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/472f272337752547c77fc9607f627edb08afcd61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472f272337752547c77fc9607f627edb08afcd61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/472f272337752547c77fc9607f627edb08afcd61", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472f272337752547c77fc9607f627edb08afcd61/comments", "author": null, "committer": null, "parents": [{"sha": "6d9cc15b64b2a3f2520f73df963fae2c1ea34abe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d9cc15b64b2a3f2520f73df963fae2c1ea34abe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d9cc15b64b2a3f2520f73df963fae2c1ea34abe"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "fb7d4423d16052c4e824bdb9446b59ba96037986", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472f272337752547c77fc9607f627edb08afcd61/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472f272337752547c77fc9607f627edb08afcd61/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=472f272337752547c77fc9607f627edb08afcd61", "patch": "@@ -1,3 +1,10 @@\n+2003-02-19  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* config/h8300/h8300.c (output_logical_op): Optimize or.l when\n+\tORing with 0xffff??00 with the highest bit of the ?? part set.\n+\t(compute_logical_op_length): Update.\n+\t(compute_logical_op_cc): Likewise.\n+\n 2003-02-19  Josef Zlomek  <zlomekj@suse.cz>\n \n \t* bb-reorder.c (find_traces_1_round): Fixed condition for small"}, {"sha": "08a7cc606a657cc1c939facf9d7c6229dab3c166", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472f272337752547c77fc9607f627edb08afcd61/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472f272337752547c77fc9607f627edb08afcd61/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=472f272337752547c77fc9607f627edb08afcd61", "patch": "@@ -2206,7 +2206,9 @@ output_logical_op (mode, operands)\n \t using multiple insns.  */\n       if ((TARGET_H8300H || TARGET_H8300S)\n \t  && w0 != 0 && w1 != 0\n-\t  && !(lower_half_easy_p && upper_half_easy_p))\n+\t  && !(lower_half_easy_p && upper_half_easy_p)\n+\t  && !(code == IOR && w1 == 0xffff\n+\t       && (w0 & 0x8000) != 0 && lower_half_easy_p))\n \t{\n \t  sprintf (insn_buf, \"%s.l\\t%%S2,%%S0\", opname);\n \t  output_asm_insn (insn_buf, operands);\n@@ -2250,6 +2252,13 @@ output_logical_op (mode, operands)\n \t    output_asm_insn ((code == AND)\n \t\t\t     ? \"sub.w\\t%e0,%e0\" : \"not.w\\t%e0\",\n \t\t\t     operands);\n+\t  else if ((TARGET_H8300H || TARGET_H8300S)\n+\t\t   && code == IOR\n+\t\t   && w1 == 0xffff\n+\t\t   && (w0 & 0x8000) != 0)\n+\t    {\n+\t      output_asm_insn (\"exts.l\\t%S0\", operands);\n+\t    }\n \t  else if ((TARGET_H8300H || TARGET_H8300S)\n \t\t   && code == AND\n \t\t   && w1 == 0xff00)\n@@ -2354,7 +2363,9 @@ compute_logical_op_length (mode, operands)\n \t using multiple insns.  */\n       if ((TARGET_H8300H || TARGET_H8300S)\n \t  && w0 != 0 && w1 != 0\n-\t  && !(lower_half_easy_p && upper_half_easy_p))\n+\t  && !(lower_half_easy_p && upper_half_easy_p)\n+\t  && !(code == IOR && w1 == 0xffff\n+\t       && (w0 & 0x8000) != 0 && lower_half_easy_p))\n \t{\n \t  if (REG_P (operands[2]))\n \t    length += 4;\n@@ -2394,6 +2405,13 @@ compute_logical_op_length (mode, operands)\n \t    {\n \t      length += 2;\n \t    }\n+\t  else if ((TARGET_H8300H || TARGET_H8300S)\n+\t\t   && code == IOR\n+\t\t   && w1 == 0xffff\n+\t\t   && (w0 & 0x8000) != 0)\n+\t    {\n+\t      length += 2;\n+\t    }\n \t  else if ((TARGET_H8300H || TARGET_H8300S)\n \t\t   && code == AND\n \t\t   && w1 == 0xff00)\n@@ -2475,10 +2493,22 @@ compute_logical_op_cc (mode, operands)\n \t using multiple insns.  */\n       if ((TARGET_H8300H || TARGET_H8300S)\n \t  && w0 != 0 && w1 != 0\n-\t  && !(lower_half_easy_p && upper_half_easy_p))\n+\t  && !(lower_half_easy_p && upper_half_easy_p)\n+\t  && !(code == IOR && w1 == 0xffff\n+\t       && (w0 & 0x8000) != 0 && lower_half_easy_p))\n \t{\n \t  cc = CC_SET_ZNV;\n \t}\n+      else\n+\t{\n+\t  if ((TARGET_H8300H || TARGET_H8300S)\n+\t      && code == IOR\n+\t      && w1 == 0xffff\n+\t      && (w0 & 0x8000) != 0)\n+\t    {\n+\t      cc = CC_SET_ZNV;\n+\t    }\n+\t}\n       break;\n     default:\n       abort ();"}]}