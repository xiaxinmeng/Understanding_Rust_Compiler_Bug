{"sha": "e52253bcc0916d9a7c7ba4bbe7501ae1ded3b8a8", "node_id": "C_kwDOANBUbNoAKGU1MjI1M2JjYzA5MTZkOWE3YzdiYTRiYmU3NTAxYWUxZGVkM2I4YTg", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2019-08-09T20:01:33Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2022-01-13T09:42:17Z"}, "message": "Wait at end of OpenACC asynchronous kernels regions\n\nIn OpenACC 'kernels' decomposition, we're improperly nesting synchronous and\nasynchronous data and compute regions, giving rise to data races when the\nasynchronicity is actually executed, as is visible in at least on test case\nwith GCN offloading.\n\nThe proper fix is to correctly use the asynchronous interfaces, making the\ncurrently synchronous data regions fully asynchronous (see also\n<https://gcc.gnu.org/PR97390> \"[OpenACC] 'async' clause on 'data' construct\",\nwhich is to share the same implementation), but that's for later; for now add\nsome more synchronization.\n\n\tgcc/\n\t* omp-oacc-kernels-decompose.cc (add_wait): New function, split out\n\tof...\n\t(add_async_clauses_and_wait): ...here. Call new outlined function.\n\t(decompose_kernels_region_body): Add wait at the end of\n\texplicitly-asynchronous kernels regions.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/f-asyncwait-1.c: Remove GCN\n\toffloading execution XFAIL.\n\nCo-Authored-By: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "f3db6f02e83c461c74ebcac56f2558a7f3936fe4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3db6f02e83c461c74ebcac56f2558a7f3936fe4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e52253bcc0916d9a7c7ba4bbe7501ae1ded3b8a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52253bcc0916d9a7c7ba4bbe7501ae1ded3b8a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e52253bcc0916d9a7c7ba4bbe7501ae1ded3b8a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e52253bcc0916d9a7c7ba4bbe7501ae1ded3b8a8/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b32c1669aad5459dd053424f9967011348add83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b32c1669aad5459dd053424f9967011348add83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b32c1669aad5459dd053424f9967011348add83"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "21872db3ed3d11bb6ce1ef4d8375fa00f42d290b", "filename": "gcc/omp-oacc-kernels-decompose.cc", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52253bcc0916d9a7c7ba4bbe7501ae1ded3b8a8/gcc%2Fomp-oacc-kernels-decompose.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52253bcc0916d9a7c7ba4bbe7501ae1ded3b8a8/gcc%2Fomp-oacc-kernels-decompose.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-oacc-kernels-decompose.cc?ref=e52253bcc0916d9a7c7ba4bbe7501ae1ded3b8a8", "patch": "@@ -878,6 +878,18 @@ maybe_build_inner_data_region (location_t loc, gimple *body,\n   return body;\n }\n \n+static void\n+add_wait (location_t loc, gimple_seq *region_body)\n+{\n+  /* A \"#pragma acc wait\" is just a call GOACC_wait (acc_async_sync, 0).  */\n+  tree wait_fn = builtin_decl_explicit (BUILT_IN_GOACC_WAIT);\n+  tree sync_arg = build_int_cst (integer_type_node, GOMP_ASYNC_SYNC);\n+  gimple *wait_call = gimple_build_call (wait_fn, 2,\n+\t\t\t\t\t sync_arg, integer_zero_node);\n+  gimple_set_location (wait_call, loc);\n+  gimple_seq_add_stmt (region_body, wait_call);\n+}\n+\n /* Helper function of decompose_kernels_region_body.  The statements in\n    REGION_BODY are expected to be decomposed parts; add an 'async' clause to\n    each.  Also add a 'wait' directive at the end of the sequence.  */\n@@ -900,13 +912,7 @@ add_async_clauses_and_wait (location_t loc, gimple_seq *region_body)\n       gimple_omp_target_set_clauses (as_a <gomp_target *> (stmt),\n \t\t\t\t     target_clauses);\n     }\n-  /* A '#pragma acc wait' is just a call 'GOACC_wait (acc_async_sync, 0)'.  */\n-  tree wait_fn = builtin_decl_explicit (BUILT_IN_GOACC_WAIT);\n-  tree sync_arg = build_int_cst (integer_type_node, GOMP_ASYNC_SYNC);\n-  gimple *wait_call = gimple_build_call (wait_fn, 2,\n-\t\t\t\t\t sync_arg, integer_zero_node);\n-  gimple_set_location (wait_call, loc);\n-  gimple_seq_add_stmt (region_body, wait_call);\n+  add_wait (loc, region_body);\n }\n \n /* Auxiliary analysis of the body of a kernels region, to determine for each\n@@ -1352,6 +1358,17 @@ decompose_kernels_region_body (gimple *kernels_region, tree kernels_clauses)\n      a wait directive at the end.  */\n   if (async_clause == NULL)\n     add_async_clauses_and_wait (loc, &region_body);\n+  else\n+    /* !!! If we have asynchronous parallel blocks inside a (synchronous) data\n+       region, then target memory will get unmapped at the point the data\n+       region ends, even if the inner asynchronous parallels have not yet\n+       completed.  For kernels marked \"async\", we might want to use \"enter data\n+       async(...)\" and \"exit data async(...)\" instead, or asynchronous data\n+       regions (see also <https://gcc.gnu.org/PR97390>\n+       \"[OpenACC] 'async' clause on 'data' construct\",\n+       which is to share the same implementation).\n+       For now, insert a (synchronous) wait at the end of the block.  */\n+    add_wait (loc, &region_body);\n \n   tree kernels_locals = gimple_bind_vars (as_a <gbind *> (kernels_body));\n   gimple *body = gimple_build_bind (kernels_locals, region_body,"}, {"sha": "ef7735b2ef4e14d7ceea538444b175cc76ee9fbe", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/f-asyncwait-1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e52253bcc0916d9a7c7ba4bbe7501ae1ded3b8a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e52253bcc0916d9a7c7ba4bbe7501ae1ded3b8a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ff-asyncwait-1.c?ref=e52253bcc0916d9a7c7ba4bbe7501ae1ded3b8a8", "patch": "@@ -3,7 +3,6 @@\n /* Based on '../libgomp.oacc-fortran/asyncwait-1.f90'.  */\n \n /* { dg-additional-options \"--param=openacc-kernels=decompose\" } */\n-/* { dg-xfail-run-if TODO { openacc_radeon_accel_selected } } */\n \n /* { dg-additional-options \"-fopt-info-all-omp\" }\n    { dg-additional-options \"-foffload=-fopt-info-all-omp\" } */"}]}