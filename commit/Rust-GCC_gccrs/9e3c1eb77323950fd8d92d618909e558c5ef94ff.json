{"sha": "9e3c1eb77323950fd8d92d618909e558c5ef94ff", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUzYzFlYjc3MzIzOTUwZmQ4ZDkyZDYxODkwOWU1NThjNWVmOTRmZg==", "commit": {"author": {"name": "Thomas Rodgers", "email": "trodgers@redhat.com", "date": "2020-01-08T03:00:40Z"}, "committer": {"name": "Thomas Rodgers", "email": "rodgertq@gcc.gnu.org", "date": "2020-01-08T03:00:40Z"}, "message": "Rename condition_variable_any wait* methods to match current draft standard\n\n2020-01-07  Thomas Rodgers  <trodgers@redhat.com>\n\n\t* include/std/condition_variable\n\t(condition_variable_any::wait_on): Rename to match current draft\n\tstandard.\n\t(condition_variable_any::wait_on_until): Likewise.\n\t(condition_variable_any::wait_on_for): Likewise.\n\t* testsuite/30_threads/condition_variable_any/stop_token/wait_on.cc:\n\tAdjust tests to account for renamed methods.\n\nFrom-SVN: r279988", "tree": {"sha": "ee8b367b4cb33aa201aeb7f1f2815c043353d983", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ee8b367b4cb33aa201aeb7f1f2815c043353d983"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e3c1eb77323950fd8d92d618909e558c5ef94ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3c1eb77323950fd8d92d618909e558c5ef94ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e3c1eb77323950fd8d92d618909e558c5ef94ff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e3c1eb77323950fd8d92d618909e558c5ef94ff/comments", "author": {"login": "rodgert", "id": 120839, "node_id": "MDQ6VXNlcjEyMDgzOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/120839?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rodgert", "html_url": "https://github.com/rodgert", "followers_url": "https://api.github.com/users/rodgert/followers", "following_url": "https://api.github.com/users/rodgert/following{/other_user}", "gists_url": "https://api.github.com/users/rodgert/gists{/gist_id}", "starred_url": "https://api.github.com/users/rodgert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rodgert/subscriptions", "organizations_url": "https://api.github.com/users/rodgert/orgs", "repos_url": "https://api.github.com/users/rodgert/repos", "events_url": "https://api.github.com/users/rodgert/events{/privacy}", "received_events_url": "https://api.github.com/users/rodgert/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42d73fa9d575e3c8c21e88bd7f65922e17b052f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d73fa9d575e3c8c21e88bd7f65922e17b052f1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42d73fa9d575e3c8c21e88bd7f65922e17b052f1"}], "stats": {"total": 62, "additions": 36, "deletions": 26}, "files": [{"sha": "98449aadf5e010b9f8ddb63f9e8f494dad41c4a2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3c1eb77323950fd8d92d618909e558c5ef94ff/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3c1eb77323950fd8d92d618909e558c5ef94ff/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=9e3c1eb77323950fd8d92d618909e558c5ef94ff", "patch": "@@ -1,3 +1,13 @@\n+2020-01-07  Thomas Rodgers  <trodgers@redhat.com>\n+\n+\t* include/std/condition_variable\n+\t(condition_variable_any::wait_on): Rename to match current draft\n+\tstandard.\n+\t(condition_variable_any::wait_on_until): Likewise.\n+\t(condition_variable_any::wait_on_for): Likewise.\n+\t* testsuite/30_threads/condition_variable_any/stop_token/wait_on.cc:\n+\tAdjust tests to account for renamed methods.\n+\n 2020-01-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \tPR libstdc++/92124"}, {"sha": "5e98d1b0a6c7ae6f9339c8719b543107e235c23c", "filename": "libstdc++-v3/include/std/condition_variable", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3c1eb77323950fd8d92d618909e558c5ef94ff/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3c1eb77323950fd8d92d618909e558c5ef94ff/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcondition_variable?ref=9e3c1eb77323950fd8d92d618909e558c5ef94ff", "patch": "@@ -369,9 +369,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #ifdef __cpp_lib_jthread\n     template <class _Lock, class _Predicate>\n-    bool wait_on(_Lock& __lock,\n-                 stop_token __stoken,\n-                 _Predicate __p)\n+    bool wait(_Lock& __lock,\n+              stop_token __stoken,\n+              _Predicate __p)\n     {\n       if (__stoken.stop_requested())\n         {\n@@ -397,10 +397,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     template <class _Lock, class _Clock, class _Duration, class _Predicate>\n-    bool wait_on_until(_Lock& __lock,\n-                       stop_token __stoken,\n-                       const chrono::time_point<_Clock, _Duration>& __abs_time,\n-                       _Predicate __p)\n+    bool wait_until(_Lock& __lock,\n+                    stop_token __stoken,\n+                    const chrono::time_point<_Clock, _Duration>& __abs_time,\n+                    _Predicate __p)\n     {\n       if (__stoken.stop_requested())\n         {\n@@ -432,16 +432,16 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n     template <class _Lock, class _Rep, class _Period, class _Predicate>\n-    bool wait_on_for(_Lock& __lock,\n-                     stop_token __stoken,\n-                     const chrono::duration<_Rep, _Period>& __rel_time,\n-                     _Predicate __p)\n+    bool wait_for(_Lock& __lock,\n+                  stop_token __stoken,\n+                  const chrono::duration<_Rep, _Period>& __rel_time,\n+                  _Predicate __p)\n     {\n       auto __abst = std::chrono::steady_clock::now() + __rel_time;\n-      return wait_on_until(__lock,\n-                           std::move(__stoken),\n-                           __abst,\n-                           std::move(__p));\n+      return wait_until(__lock,\n+                        std::move(__stoken),\n+                        __abst,\n+                        std::move(__p));\n     }\n #endif\n   };"}, {"sha": "cb1637c306de344b80246ce76203565ec42c0938", "filename": "libstdc++-v3/testsuite/30_threads/condition_variable_any/stop_token/wait_on.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e3c1eb77323950fd8d92d618909e558c5ef94ff/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fstop_token%2Fwait_on.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e3c1eb77323950fd8d92d618909e558c5ef94ff/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fstop_token%2Fwait_on.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F30_threads%2Fcondition_variable_any%2Fstop_token%2Fwait_on.cc?ref=9e3c1eb77323950fd8d92d618909e558c5ef94ff", "patch": "@@ -28,7 +28,7 @@\n \n using namespace::std::literals;\n \n-void test_wait_on_stop()\n+void test_wait_stop()\n {\n   bool ready = false;\n   std::mutex mtx;\n@@ -40,7 +40,7 @@ void test_wait_on_stop()\n   std::thread t([&ready, &mtx, &cv, tok]\n                 {\n                   std::unique_lock lck(mtx);\n-                  auto res = cv.wait_on(lck, tok, [&ready] { return ready; });\n+                  auto res = cv.wait(lck, tok, [&ready] { return ready; });\n                   if (!res)\n                     {\n                       VERIFY(tok.stop_requested());\n@@ -54,7 +54,7 @@ void test_wait_on_stop()\n   VERIFY(src.stop_requested());\n }\n \n-void test_wait_on_until(bool ck = true)\n+void test_wait_until(bool ck = true)\n {\n   bool ready = false;\n   std::mutex mtx;\n@@ -67,7 +67,7 @@ void test_wait_on_until(bool ck = true)\n   std::thread t([ck, &ready, &mtx, &cv, abst, tok]\n                 {\n                   std::unique_lock lck(mtx);\n-                  auto res = cv.wait_on_until(lck, tok, abst, [&ready] { return ready; });\n+                  auto res = cv.wait_until(lck, tok, abst, [&ready] { return ready; });\n                   if (!res && ck)\n                     {\n                       VERIFY(tok.stop_requested());\n@@ -90,7 +90,7 @@ void test_wait_on_until(bool ck = true)\n     }\n }\n \n-void test_wait_on_for(bool ck = true)\n+void test_wait_for(bool ck = true)\n {\n   bool ready = false;\n   std::mutex mtx;\n@@ -102,7 +102,7 @@ void test_wait_on_for(bool ck = true)\n   std::thread t([ck, &ready, &mtx, &cv, tok]\n                 {\n                   std::unique_lock lck(mtx);\n-                  auto res = cv.wait_on_for(lck, tok, 1.0s, [&ready] { return ready; });\n+                  auto res = cv.wait_for(lck, tok, 1.0s, [&ready] { return ready; });\n                   if (!res && ck)\n                     {\n                       VERIFY(tok.stop_requested());\n@@ -127,10 +127,10 @@ void test_wait_on_for(bool ck = true)\n \n int main()\n {\n-  test_wait_on_stop();\n-  test_wait_on_until(false);\n-  test_wait_on_until();\n-  test_wait_on_for();\n-  test_wait_on_for(false);\n+  test_wait_stop();\n+  test_wait_until(false);\n+  test_wait_until();\n+  test_wait_for();\n+  test_wait_for(false);\n   return 0;\n }"}]}