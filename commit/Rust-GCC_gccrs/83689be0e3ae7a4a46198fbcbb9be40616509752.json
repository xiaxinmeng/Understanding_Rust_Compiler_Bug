{"sha": "83689be0e3ae7a4a46198fbcbb9be40616509752", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODM2ODliZTBlM2FlN2E0YTQ2MTk4ZmJjYmI5YmU0MDYxNjUwOTc1Mg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-05-19T08:14:04Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2008-05-19T08:14:04Z"}, "message": "i386.c (ix86_secondary_reload): New static function.\n\n        * config/i386/i386.c (ix86_secondary_reload): New static function.\n        (TARGET_SECONDARY_RELOAD): New define.\n        * config/i386/i386.h (SECONDARY_OUTPUT_RELOAD_CLASS): Remove.\n        * config/i386/i386.md (reload_outqi): Remove.\n\nFrom-SVN: r135526", "tree": {"sha": "969edc42c6a109a99b644e31a09420b723ce4109", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/969edc42c6a109a99b644e31a09420b723ce4109"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83689be0e3ae7a4a46198fbcbb9be40616509752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83689be0e3ae7a4a46198fbcbb9be40616509752", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83689be0e3ae7a4a46198fbcbb9be40616509752", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83689be0e3ae7a4a46198fbcbb9be40616509752/comments", "author": null, "committer": null, "parents": [{"sha": "04cdd3c66014b2ce23a3f04ca5662cc1dc2807e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04cdd3c66014b2ce23a3f04ca5662cc1dc2807e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04cdd3c66014b2ce23a3f04ca5662cc1dc2807e6"}], "stats": {"total": 73, "additions": 42, "deletions": 31}, "files": [{"sha": "7c0605d9719134f172c3db3b542dc6b9ba369581", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83689be0e3ae7a4a46198fbcbb9be40616509752/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83689be0e3ae7a4a46198fbcbb9be40616509752/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=83689be0e3ae7a4a46198fbcbb9be40616509752", "patch": "@@ -1,7 +1,13 @@\n+2008-05-19  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_secondary_reload): New static function.\n+\t(TARGET_SECONDARY_RELOAD): New define.\n+\t* config/i386/i386.h (SECONDARY_OUTPUT_RELOAD_CLASS): Remove.\n+\t* config/i386/i386.md (reload_outqi): Remove.\n+\n 2008-05-18  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \tPR middle-end/35509\n-\n \t* builtins.c (mathfn_built_in_1): Renamed from mathfn_built_in.\n \tAdd `implicit' parameter.  Handle BUILT_IN_SIGNBIT.\n \t(mathfn_built_in): Rewrite in terms of mathfn_built_in_1.\n@@ -13,7 +19,6 @@\n \t* doc/extend.texi: Document __builtin_isinf_sign.\n \t* fold-const.c (operand_equal_p): Handle COND_EXPR.\n \n-\n 2008-05-18  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* tree-ssa-dom.c (tree_ssa_dominator_optimize): If some blocks need\n@@ -86,7 +91,8 @@\n \t* ifcvt.c (dead_or_predicable): Rename\n \tdf_simulate_one_insn_backwards to df_simulate_one_insn.\n \t* recog.c (peephole2_optimize): Ditto.\n-\t* rtl-factoring.c (collect_pattern_seqs, clear_regs_live_in_seq): Ditto.\n+\t* rtl-factoring.c (collect_pattern_seqs, clear_regs_live_in_seq):\n+\tDitto.\n \t* df.h: Rename df_simulate_one_insn_backwards to\n \tdf_simulate_one_insn.  and delete df_simulate_one_insn_forwards.\n \t* df-problems.c (df_simulate_artificial_refs_at_top) Reversed"}, {"sha": "fa3df97a2b67b7d3fe8dd10e7bb984c03826903a", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83689be0e3ae7a4a46198fbcbb9be40616509752/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83689be0e3ae7a4a46198fbcbb9be40616509752/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=83689be0e3ae7a4a46198fbcbb9be40616509752", "patch": "@@ -22023,6 +22023,36 @@ ix86_preferred_output_reload_class (rtx x, enum reg_class regclass)\n   return regclass;\n }\n \n+static enum reg_class\n+ix86_secondary_reload (bool in_p, rtx x, enum reg_class class,\n+\t\t       enum machine_mode mode,\n+\t\t       secondary_reload_info *sri ATTRIBUTE_UNUSED)\n+{\n+  /* QImode spills from non-QI registers require\n+     intermediate register on 32bit targets.  */\n+  if (!in_p && mode == QImode && !TARGET_64BIT\n+      && (class == GENERAL_REGS\n+\t  || class == LEGACY_REGS\n+\t  || class == INDEX_REGS))\n+    {\n+      int regno;\n+\n+      if (REG_P (x))\n+\tregno = REGNO (x);\n+      else\n+\tregno = -1;\n+\n+      if (regno >= FIRST_PSEUDO_REGISTER || GET_CODE (x) == SUBREG)\n+\tregno = true_regnum (x);\n+\n+      /* Return Q_REGS if the operand is in memory.  */\n+      if (regno == -1)\n+\treturn Q_REGS;\n+    }\n+\n+  return NO_REGS;\n+}\n+\n /* If we are copying between general and FP registers, we need a memory\n    location. The same is true for SSE and MMX registers.\n \n@@ -25878,6 +25908,9 @@ x86_builtin_vectorization_cost (bool runtime_test)\n #undef TARGET_FUNCTION_VALUE\n #define TARGET_FUNCTION_VALUE ix86_function_value\n \n+#undef TARGET_SECONDARY_RELOAD\n+#define TARGET_SECONDARY_RELOAD ix86_secondary_reload\n+\n #undef TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST\n #define TARGET_VECTORIZE_BUILTIN_VECTORIZATION_COST x86_builtin_vectorization_cost\n "}, {"sha": "f259d74d9d703dd4a7dff683c82ed973a06e7b39", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83689be0e3ae7a4a46198fbcbb9be40616509752/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83689be0e3ae7a4a46198fbcbb9be40616509752/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=83689be0e3ae7a4a46198fbcbb9be40616509752", "patch": "@@ -1524,15 +1524,6 @@ enum reg_class\n    ? mode_for_size (32, GET_MODE_CLASS (MODE), 0)\t\t\\\n    : MODE)\n \n-/* QImode spills from non-QI registers need a scratch.  This does not\n-   happen often -- the only example so far requires an uninitialized\n-   pseudo.  */\n-\n-#define SECONDARY_OUTPUT_RELOAD_CLASS(CLASS, MODE, OUT)\t\t\t\\\n-  (((CLASS) == GENERAL_REGS || (CLASS) == LEGACY_REGS\t\t\t\\\n-    || (CLASS) == INDEX_REGS) && !TARGET_64BIT && (MODE) == QImode\t\\\n-   ? Q_REGS : NO_REGS)\n-\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n /* On the 80386, this is the size of MODE in words,"}, {"sha": "a021e7c75e7261ab1aa66d0cd9754e398a32c073", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83689be0e3ae7a4a46198fbcbb9be40616509752/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83689be0e3ae7a4a46198fbcbb9be40616509752/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=83689be0e3ae7a4a46198fbcbb9be40616509752", "patch": "@@ -1810,25 +1810,6 @@\n \t   ]\n \t   (const_string \"QI\")))])\n \n-(define_expand \"reload_outqi\"\n-  [(parallel [(match_operand:QI 0 \"\" \"=m\")\n-              (match_operand:QI 1 \"register_operand\" \"r\")\n-              (match_operand:QI 2 \"register_operand\" \"=&q\")])]\n-  \"\"\n-{\n-  rtx op0, op1, op2;\n-  op0 = operands[0]; op1 = operands[1]; op2 = operands[2];\n-\n-  gcc_assert (!reg_overlap_mentioned_p (op2, op0));\n-  if (! q_regs_operand (op1, QImode))\n-    {\n-      emit_insn (gen_movqi (op2, op1));\n-      op1 = op2;\n-    }\n-  emit_insn (gen_movqi (op0, op1));\n-  DONE;\n-})\n-\n (define_insn \"*swapqi_1\"\n   [(set (match_operand:QI 0 \"register_operand\" \"+r\")\n \t(match_operand:QI 1 \"register_operand\" \"+r\"))"}]}