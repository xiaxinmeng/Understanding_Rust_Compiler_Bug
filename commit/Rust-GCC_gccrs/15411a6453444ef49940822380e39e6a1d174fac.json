{"sha": "15411a6453444ef49940822380e39e6a1d174fac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU0MTFhNjQ1MzQ0NGVmNDk5NDA4MjIzODBlMzllNmExZDE3NGZhYw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T11:54:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-02-19T12:46:57Z"}, "message": "libstdc++: \"safe\" in several library names is misleading (LWG 3379)\n\n\t* include/bits/range_access.h (enable_safe_range): Rename to\n\tenable_borrowed_range.\n\t(__detail::__maybe_safe_range): Rename to __maybe_borrowed_range.\n\t(safe_range): Rename to borrowed_range.\n\t* include/bits/ranges_algo.h: Adjust to use new names.\n\t* include/bits/ranges_algobase.h: Likewise.\n\t* include/bits/ranges_uninitialized.h: Likewise.\n\t* include/std/ranges: Likewise.\n\t(safe_iterator_t): Rename to borrowed_iterator_t.\n\t(safe_subrange_t): Rename to borrowed_subrange_t.\n\t* include/std/span: Adjust to use new names.\n\t* include/std/string_view: Likewise.\n\t* include/experimental/string_view: Likewise.\n\t* testsuite/std/ranges/access/begin.cc: Likewise.\n\t* testsuite/std/ranges/access/cbegin.cc: Likewise.\n\t* testsuite/std/ranges/access/cdata.cc: Likewise.\n\t* testsuite/std/ranges/access/cend.cc: Likewise.\n\t* testsuite/std/ranges/access/crbegin.cc: Likewise.\n\t* testsuite/std/ranges/access/crend.cc: Likewise.\n\t* testsuite/std/ranges/access/data.cc: Likewise.\n\t* testsuite/std/ranges/access/end.cc: Likewise.\n\t* testsuite/std/ranges/access/rbegin.cc: Likewise.\n\t* testsuite/std/ranges/access/rend.cc: Likewise.\n\t* testsuite/std/ranges/safe_range.cc: Likewise.\n\t* testsuite/std/ranges/safe_range_types.cc: Likewise.\n\t* testsuite/util/testsuite_iterators.h: Likewise.", "tree": {"sha": "da024ea95ee19783b89782e813db8d4e0d8643c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da024ea95ee19783b89782e813db8d4e0d8643c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15411a6453444ef49940822380e39e6a1d174fac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15411a6453444ef49940822380e39e6a1d174fac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15411a6453444ef49940822380e39e6a1d174fac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15411a6453444ef49940822380e39e6a1d174fac/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa89adaa979093936d8f148ef5496db05ad308e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa89adaa979093936d8f148ef5496db05ad308e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa89adaa979093936d8f148ef5496db05ad308e5"}], "stats": {"total": 371, "additions": 201, "deletions": 170}, "files": [{"sha": "045f0badfaea5775db428fcf1cf6ee78cf884374", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -1,5 +1,33 @@\n 2020-02-19  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tLWG 3379. \"safe\" in several library names is misleading\n+\t* include/bits/range_access.h (enable_safe_range): Rename to\n+\tenable_borrowed_range.\n+\t(__detail::__maybe_safe_range): Rename to __maybe_borrowed_range.\n+\t(safe_range): Rename to borrowed_range.\n+\t* include/bits/ranges_algo.h: Adjust to use new names.\n+\t* include/bits/ranges_algobase.h: Likewise.\n+\t* include/bits/ranges_uninitialized.h: Likewise.\n+\t* include/std/ranges: Likewise.\n+\t(safe_iterator_t): Rename to borrowed_iterator_t.\n+\t(safe_subrange_t): Rename to borrowed_subrange_t.\n+\t* include/std/span: Adjust to use new names.\n+\t* include/std/string_view: Likewise.\n+\t* include/experimental/string_view: Likewise.\n+\t* testsuite/std/ranges/access/begin.cc: Likewise.\n+\t* testsuite/std/ranges/access/cbegin.cc: Likewise.\n+\t* testsuite/std/ranges/access/cdata.cc: Likewise.\n+\t* testsuite/std/ranges/access/cend.cc: Likewise.\n+\t* testsuite/std/ranges/access/crbegin.cc: Likewise.\n+\t* testsuite/std/ranges/access/crend.cc: Likewise.\n+\t* testsuite/std/ranges/access/data.cc: Likewise.\n+\t* testsuite/std/ranges/access/end.cc: Likewise.\n+\t* testsuite/std/ranges/access/rbegin.cc: Likewise.\n+\t* testsuite/std/ranges/access/rend.cc: Likewise.\n+\t* testsuite/std/ranges/safe_range.cc: Likewise.\n+\t* testsuite/std/ranges/safe_range_types.cc: Likewise.\n+\t* testsuite/util/testsuite_iterators.h: Likewise.\n+\n \t* include/std/ranges (tuple_element<0, const subrange<I, S, K>>)\n \t(tuple_element<1, const subrange<I, S, K>>): Add partial\n \tspecializations (LWG 3398)."}, {"sha": "e2a2c28c7d23fc8842b6197846eb45d11f1e4801", "filename": "libstdc++-v3/include/bits/range_access.h", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frange_access.h?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -344,7 +344,7 @@ namespace ranges\n     inline constexpr bool disable_sized_range = false;\n \n   template<typename _Tp>\n-    inline constexpr bool enable_safe_range = false;\n+    inline constexpr bool enable_borrowed_range = false;\n \n   namespace __detail\n   {\n@@ -357,16 +357,17 @@ namespace ranges\n       using __make_unsigned_like_t\n \t= conditional_t<_MaxDiff, __max_size_type, make_unsigned_t<_Tp>>;\n \n-    // Part of the constraints of ranges::safe_range\n+    // Part of the constraints of ranges::borrowed_range\n     template<typename _Tp>\n-      concept __maybe_safe_range\n-\t= is_lvalue_reference_v<_Tp> || enable_safe_range<remove_cvref_t<_Tp>>;\n+      concept __maybe_borrowed_range\n+\t= is_lvalue_reference_v<_Tp>\n+\t  || enable_borrowed_range<remove_cvref_t<_Tp>>;\n \n   } // namespace __detail\n \n   namespace __cust_access\n   {\n-    using std::ranges::__detail::__maybe_safe_range;\n+    using std::ranges::__detail::__maybe_borrowed_range;\n     using std::__detail::__class_or_enum;\n \n     template<typename _Tp>\n@@ -407,7 +408,7 @@ namespace ranges\n \t}\n \n     public:\n-      template<__maybe_safe_range _Tp>\n+      template<__maybe_borrowed_range _Tp>\n \trequires is_array_v<remove_reference_t<_Tp>> || __member_begin<_Tp>\n \t  || __adl_begin<_Tp>\n \tconstexpr auto\n@@ -459,7 +460,7 @@ namespace ranges\n \t}\n \n     public:\n-      template<__maybe_safe_range _Tp>\n+      template<__maybe_borrowed_range _Tp>\n \trequires is_array_v<remove_reference_t<_Tp>> || __member_end<_Tp>\n \t|| __adl_end<_Tp>\n \tconstexpr auto\n@@ -559,7 +560,7 @@ namespace ranges\n \t}\n \n     public:\n-      template<__maybe_safe_range _Tp>\n+      template<__maybe_borrowed_range _Tp>\n \trequires __member_rbegin<_Tp> || __adl_rbegin<_Tp> || __reversable<_Tp>\n \tconstexpr auto\n \toperator()(_Tp&& __t) const\n@@ -616,7 +617,7 @@ namespace ranges\n \t}\n \n     public:\n-      template<__maybe_safe_range _Tp>\n+      template<__maybe_borrowed_range _Tp>\n \trequires __member_rend<_Tp> || __adl_rend<_Tp> || __reversable<_Tp>\n \tconstexpr auto\n \toperator()(_Tp&& __t) const\n@@ -875,9 +876,10 @@ namespace ranges\n \tranges::end(__t);\n       };\n \n-  /// [range.range] The safe_range concept.\n+  /// [range.range] The borrowed_range concept.\n   template<typename _Tp>\n-    concept safe_range = range<_Tp> && __detail::__maybe_safe_range<_Tp>;\n+    concept borrowed_range\n+      = range<_Tp> && __detail::__maybe_borrowed_range<_Tp>;\n \n   template<range _Range>\n     using iterator_t = decltype(ranges::begin(std::declval<_Range&>()));"}, {"sha": "7de1072abf09a57a35b34f5e9ec72953dd4ea397", "filename": "libstdc++-v3/include/bits/ranges_algo.h", "status": "modified", "additions": 65, "deletions": 65, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algo.h?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -190,7 +190,7 @@ namespace ranges\n     template<input_range _Range, typename _Proj = identity,\n \t     indirectly_unary_invocable<projected<iterator_t<_Range>, _Proj>>\n \t       _Fun>\n-      constexpr for_each_result<safe_iterator_t<_Range>, _Fun>\n+      constexpr for_each_result<borrowed_iterator_t<_Range>, _Fun>\n       operator()(_Range&& __r, _Fun __f, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -253,7 +253,7 @@ namespace ranges\n       requires indirect_binary_predicate<ranges::equal_to,\n \t\t\t\t\t projected<iterator_t<_Range>, _Proj>,\n \t\t\t\t\t const _Tp*>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, const _Tp& __value, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -281,7 +281,7 @@ namespace ranges\n     template<input_range _Range, typename _Proj = identity,\n \t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n \t       _Pred>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -309,7 +309,7 @@ namespace ranges\n     template<input_range _Range, typename _Proj = identity,\n \t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n \t       _Pred>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -345,7 +345,7 @@ namespace ranges\n \t     typename _Proj1 = identity, typename _Proj2 = identity>\n       requires indirectly_comparable<iterator_t<_Range1>, iterator_t<_Range2>,\n \t\t\t\t     _Pred, _Proj1, _Proj2>\n-      constexpr safe_iterator_t<_Range1>\n+      constexpr borrowed_iterator_t<_Range1>\n       operator()(_Range1&& __r1, _Range2&& __r2, _Pred __pred = {},\n \t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n@@ -536,7 +536,7 @@ namespace ranges\n \t     typename _Proj1 = identity, typename _Proj2 = identity>\n       requires indirectly_comparable<iterator_t<_Range1>, iterator_t<_Range2>,\n \t\t\t\t     _Pred, _Proj1, _Proj2>\n-      constexpr safe_subrange_t<_Range1>\n+      constexpr borrowed_subrange_t<_Range1>\n       operator()(_Range1&& __r1, _Range2&& __r2, _Pred __pred = {},\n \t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n@@ -625,7 +625,7 @@ namespace ranges\n \t     typename _Pred = ranges::equal_to, typename _Proj = identity>\n       requires indirectly_comparable<iterator_t<_Range>, const _Tp*,\n \t\t\t\t     _Pred, _Proj>\n-      constexpr safe_subrange_t<_Range>\n+      constexpr borrowed_subrange_t<_Range>\n       operator()(_Range&& __r, range_difference_t<_Range> __count,\n \t       const _Tp& __value, _Pred __pred = {}, _Proj __proj = {}) const\n       {\n@@ -701,7 +701,7 @@ namespace ranges\n \t     typename _Proj1 = identity, typename _Proj2 = identity>\n       requires indirectly_comparable<iterator_t<_Range1>, iterator_t<_Range2>,\n \t\t\t\t     _Pred, _Proj1, _Proj2>\n-      constexpr safe_subrange_t<_Range1>\n+      constexpr borrowed_subrange_t<_Range1>\n       operator()(_Range1&& __r1, _Range2&& __r2, _Pred __pred = {},\n \t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n@@ -742,7 +742,7 @@ namespace ranges\n \t     indirect_binary_predicate<\n \t       projected<iterator_t<_Range>, _Proj>,\n \t       projected<iterator_t<_Range>, _Proj>> _Pred = ranges::equal_to>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Pred __pred = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -866,7 +866,7 @@ namespace ranges\n \t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n \t       _Pred>\n       requires indirectly_copyable<iterator_t<_Range>, _Out>\n-      constexpr copy_if_result<safe_iterator_t<_Range>, _Out>\n+      constexpr copy_if_result<borrowed_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result,\n \t\t _Pred __pred, _Proj __proj = {}) const\n       {\n@@ -898,8 +898,8 @@ namespace ranges\n \n     template<input_range _Range1, input_range _Range2>\n       requires indirectly_swappable<iterator_t<_Range1>, iterator_t<_Range2>>\n-      constexpr swap_ranges_result<safe_iterator_t<_Range1>,\n-\t\t\t\t   safe_iterator_t<_Range2>>\n+      constexpr swap_ranges_result<borrowed_iterator_t<_Range1>,\n+\t\t\t\t   borrowed_iterator_t<_Range2>>\n       operator()(_Range1&& __r1, _Range2&& __r2) const\n       {\n \treturn (*this)(ranges::begin(__r1), ranges::end(__r1),\n@@ -961,7 +961,7 @@ namespace ranges\n       requires indirectly_writable<_Out,\n \t\t\t\t   indirect_result_t<_Fp&,\n \t\t\t\t     projected<iterator_t<_Range>, _Proj>>>\n-      constexpr unary_transform_result<safe_iterator_t<_Range>, _Out>\n+      constexpr unary_transform_result<borrowed_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result, _Fp __op, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -998,8 +998,8 @@ namespace ranges\n \t\t\t\t   indirect_result_t<_Fp&,\n \t\t\t\t     projected<iterator_t<_Range1>, _Proj1>,\n \t\t\t\t     projected<iterator_t<_Range2>, _Proj2>>>\n-      constexpr binary_transform_result<safe_iterator_t<_Range1>,\n-\t\t\t\t\tsafe_iterator_t<_Range2>, _Out>\n+      constexpr binary_transform_result<borrowed_iterator_t<_Range1>,\n+\t\t\t\t\tborrowed_iterator_t<_Range2>, _Out>\n       operator()(_Range1&& __r1, _Range2&& __r2, _Out __result, _Fp __binary_op,\n \t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n@@ -1036,7 +1036,7 @@ namespace ranges\n \t&& indirect_binary_predicate<ranges::equal_to,\n \t\t\t\t     projected<iterator_t<_Range>, _Proj>,\n \t\t\t\t     const _Tp1*>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r,\n \t\t const _Tp1& __old_value, const _Tp2& __new_value,\n \t\t _Proj __proj = {}) const\n@@ -1068,7 +1068,7 @@ namespace ranges\n \t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n \t       _Pred>\n       requires indirectly_writable<iterator_t<_Range>, const _Tp&>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r,\n \t\t _Pred __pred, const _Tp& __new_value, _Proj __proj = {}) const\n       {\n@@ -1109,7 +1109,7 @@ namespace ranges\n \t&& indirect_binary_predicate<ranges::equal_to,\n \t\t\t\t     projected<iterator_t<_Range>, _Proj>,\n \t\t\t\t     const _Tp1*>\n-      constexpr replace_copy_result<safe_iterator_t<_Range>, _Out>\n+      constexpr replace_copy_result<borrowed_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result,\n \t\t const _Tp1& __old_value, const _Tp2& __new_value,\n \t\t _Proj __proj = {}) const\n@@ -1150,7 +1150,7 @@ namespace ranges\n \t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n \t       _Pred>\n       requires indirectly_copyable<iterator_t<_Range>, _Out>\n-      constexpr replace_copy_if_result<safe_iterator_t<_Range>, _Out>\n+      constexpr replace_copy_if_result<borrowed_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result,\n \t\t _Pred __pred, const _Tp& __new_value, _Proj __proj = {}) const\n       {\n@@ -1194,7 +1194,7 @@ namespace ranges\n \n     template<typename _Range, copy_constructible _Fp>\n       requires invocable<_Fp&> && output_range<_Range, invoke_result_t<_Fp&>>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Fp __gen) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r), std::move(__gen));\n@@ -1232,7 +1232,7 @@ namespace ranges\n \t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n \t       _Pred>\n       requires permutable<iterator_t<_Range>>\n-      constexpr safe_subrange_t<_Range>\n+      constexpr borrowed_subrange_t<_Range>\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -1265,7 +1265,7 @@ namespace ranges\n \t&& indirect_binary_predicate<ranges::equal_to,\n \t\t\t\t     projected<iterator_t<_Range>, _Proj>,\n \t\t\t\t     const _Tp*>\n-      constexpr safe_subrange_t<_Range>\n+      constexpr borrowed_subrange_t<_Range>\n       operator()(_Range&& __r, const _Tp& __value, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -1302,7 +1302,7 @@ namespace ranges\n \t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n \t       _Pred>\n       requires indirectly_copyable<iterator_t<_Range>, _Out>\n-      constexpr remove_copy_if_result<safe_iterator_t<_Range>, _Out>\n+      constexpr remove_copy_if_result<borrowed_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result,\n \t\t _Pred __pred, _Proj __proj = {}) const\n       {\n@@ -1344,7 +1344,7 @@ namespace ranges\n \t&& indirect_binary_predicate<ranges::equal_to,\n \t\t\t\t     projected<iterator_t<_Range>, _Proj>,\n \t\t\t\t     const _Tp*>\n-      constexpr remove_copy_result<safe_iterator_t<_Range>, _Out>\n+      constexpr remove_copy_result<borrowed_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result,\n \t\t const _Tp& __value, _Proj __proj = {}) const\n       {\n@@ -1383,7 +1383,7 @@ namespace ranges\n \t     indirect_equivalence_relation<\n \t       projected<iterator_t<_Range>, _Proj>> _Comp = ranges::equal_to>\n       requires permutable<iterator_t<_Range>>\n-      constexpr safe_subrange_t<_Range>\n+      constexpr borrowed_subrange_t<_Range>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -1467,7 +1467,7 @@ namespace ranges\n \t    || (input_iterator<_Out>\n \t\t&& same_as<range_value_t<_Range>, iter_value_t<_Out>>)\n \t    || indirectly_copyable_storable<iterator_t<_Range>, _Out>)\n-      constexpr unique_copy_result<safe_iterator_t<_Range>, _Out>\n+      constexpr unique_copy_result<borrowed_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result,\n \t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n@@ -1519,7 +1519,7 @@ namespace ranges\n \n     template<bidirectional_range _Range>\n       requires permutable<iterator_t<_Range>>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r));\n@@ -1552,7 +1552,7 @@ namespace ranges\n \n     template<bidirectional_range _Range, weakly_incrementable _Out>\n       requires indirectly_copyable<iterator_t<_Range>, _Out>\n-      constexpr reverse_copy_result<safe_iterator_t<_Range>, _Out>\n+      constexpr reverse_copy_result<borrowed_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -1699,7 +1699,7 @@ namespace ranges\n \n     template<forward_range _Range>\n       requires permutable<iterator_t<_Range>>\n-      constexpr safe_subrange_t<_Range>\n+      constexpr borrowed_subrange_t<_Range>\n       operator()(_Range&& __r, iterator_t<_Range> __middle) const\n       {\n \treturn (*this)(ranges::begin(__r), std::move(__middle),\n@@ -1732,7 +1732,7 @@ namespace ranges\n \n     template<forward_range _Range, weakly_incrementable _Out>\n       requires indirectly_copyable<iterator_t<_Range>, _Out>\n-      constexpr rotate_copy_result<safe_iterator_t<_Range>, _Out>\n+      constexpr rotate_copy_result<borrowed_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, iterator_t<_Range> __middle, _Out __result) const\n       {\n \treturn (*this)(ranges::begin(__r), std::move(__middle),\n@@ -1818,7 +1818,7 @@ namespace ranges\n     template<random_access_range _Range, typename _Gen>\n       requires permutable<iterator_t<_Range>>\n \t&& uniform_random_bit_generator<remove_reference_t<_Gen>>\n-      safe_iterator_t<_Range>\n+      borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Gen&& __g) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -1847,7 +1847,7 @@ namespace ranges\n     template<random_access_range _Range,\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -1875,7 +1875,7 @@ namespace ranges\n     template<random_access_range _Range,\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -1903,7 +1903,7 @@ namespace ranges\n     template<random_access_range _Range,\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -1931,7 +1931,7 @@ namespace ranges\n     template<random_access_range _Range,\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -1968,7 +1968,7 @@ namespace ranges\n \t     typename _Proj = identity,\n \t     indirect_strict_weak_order<projected<iterator_t<_Range>, _Proj>>\n \t       _Comp = ranges::less>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -2026,7 +2026,7 @@ namespace ranges\n     template<random_access_range _Range,\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -2054,7 +2054,7 @@ namespace ranges\n     template<random_access_range _Range,\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n-      safe_iterator_t<_Range>\n+      borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -2095,7 +2095,7 @@ namespace ranges\n     template<random_access_range _Range,\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, iterator_t<_Range> __middle,\n \t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n@@ -2168,8 +2168,8 @@ namespace ranges\n \t&& indirect_strict_weak_order<_Comp,\n \t\t\t\t      projected<iterator_t<_Range1>, _Proj1>,\n \t\t\t\t      projected<iterator_t<_Range2>, _Proj2>>\n-      constexpr partial_sort_copy_result<safe_iterator_t<_Range1>,\n-\t\t\t\t\t safe_iterator_t<_Range2>>\n+      constexpr partial_sort_copy_result<borrowed_iterator_t<_Range1>,\n+\t\t\t\t\t borrowed_iterator_t<_Range2>>\n       operator()(_Range1&& __r, _Range2&& __out, _Comp __comp = {},\n \t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n       {\n@@ -2207,7 +2207,7 @@ namespace ranges\n     template<forward_range _Range, typename _Proj = identity,\n \t     indirect_strict_weak_order<projected<iterator_t<_Range>, _Proj>>\n \t       _Comp = ranges::less>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -2270,7 +2270,7 @@ namespace ranges\n     template<random_access_range _Range,\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, iterator_t<_Range> __nth,\n \t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n@@ -2314,7 +2314,7 @@ namespace ranges\n \t     indirect_strict_weak_order<const _Tp*,\n \t\t\t\t\tprojected<iterator_t<_Range>, _Proj>>\n \t       _Comp = ranges::less>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r,\n \t\t const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n@@ -2358,7 +2358,7 @@ namespace ranges\n \t     indirect_strict_weak_order<const _Tp*,\n \t\t\t\t\tprojected<iterator_t<_Range>, _Proj>>\n \t       _Comp = ranges::less>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r,\n \t\t const _Tp& __value, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n@@ -2418,7 +2418,7 @@ namespace ranges\n \t     indirect_strict_weak_order<const _Tp*,\n \t\t\t\t\tprojected<iterator_t<_Range>, _Proj>>\n \t       _Comp = ranges::less>\n-      constexpr safe_subrange_t<_Range>\n+      constexpr borrowed_subrange_t<_Range>\n       operator()(_Range&& __r, const _Tp& __value,\n \t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n@@ -2554,7 +2554,7 @@ namespace ranges\n \t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n \t       _Pred>\n       requires permutable<iterator_t<_Range>>\n-      constexpr safe_subrange_t<_Range>\n+      constexpr borrowed_subrange_t<_Range>\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -2585,7 +2585,7 @@ namespace ranges\n \t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n \t       _Pred>\n       requires permutable<iterator_t<_Range>>\n-      safe_subrange_t<_Range>\n+      borrowed_subrange_t<_Range>\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -2658,7 +2658,7 @@ namespace ranges\n \t       _Pred>\n       requires indirectly_copyable<iterator_t<_Range>, _Out1>\n \t&& indirectly_copyable<iterator_t<_Range>, _O2>\n-      constexpr partition_copy_result<safe_iterator_t<_Range>, _Out1, _O2>\n+      constexpr partition_copy_result<borrowed_iterator_t<_Range>, _Out1, _O2>\n       operator()(_Range&& __r, _Out1 out_true, _O2 out_false,\n \t\t _Pred __pred, _Proj __proj = {}) const\n       {\n@@ -2701,7 +2701,7 @@ namespace ranges\n     template<forward_range _Range, typename _Proj = identity,\n \t     indirect_unary_predicate<projected<iterator_t<_Range>, _Proj>>\n \t       _Pred>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Pred __pred, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -2756,8 +2756,8 @@ namespace ranges\n \t     typename _Proj1 = identity, typename _Proj2 = identity>\n       requires mergeable<iterator_t<_Range1>, iterator_t<_Range2>, _Out,\n \t\t\t _Comp, _Proj1, _Proj2>\n-      constexpr merge_result<safe_iterator_t<_Range1>,\n-\t\t\t     safe_iterator_t<_Range2>,\n+      constexpr merge_result<borrowed_iterator_t<_Range1>,\n+\t\t\t     borrowed_iterator_t<_Range2>,\n \t\t\t     _Out>\n       operator()(_Range1&& __r1, _Range2&& __r2, _Out __result,\n \t\t _Comp __comp = {},\n@@ -2791,7 +2791,7 @@ namespace ranges\n     template<bidirectional_range _Range,\n \t     typename _Comp = ranges::less, typename _Proj = identity>\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n-      safe_iterator_t<_Range>\n+      borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, iterator_t<_Range> __middle,\n \t\t _Comp __comp = {}, _Proj __proj = {}) const\n       {\n@@ -2906,8 +2906,8 @@ namespace ranges\n \t     typename _Proj1 = identity, typename _Proj2 = identity>\n       requires mergeable<iterator_t<_Range1>, iterator_t<_Range2>, _Out,\n \t\t\t _Comp, _Proj1, _Proj2>\n-      constexpr set_union_result<safe_iterator_t<_Range1>,\n-\t\t\t\t safe_iterator_t<_Range2>, _Out>\n+      constexpr set_union_result<borrowed_iterator_t<_Range1>,\n+\t\t\t\t borrowed_iterator_t<_Range2>, _Out>\n       operator()(_Range1&& __r1, _Range2&& __r2,\n \t\t _Out __result, _Comp __comp = {},\n \t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n@@ -2964,8 +2964,8 @@ namespace ranges\n \t     typename _Proj1 = identity, typename _Proj2 = identity>\n       requires mergeable<iterator_t<_Range1>, iterator_t<_Range2>, _Out,\n \t\t\t _Comp, _Proj1, _Proj2>\n-      constexpr set_intersection_result<safe_iterator_t<_Range1>,\n-\t\t\t\t\tsafe_iterator_t<_Range2>, _Out>\n+      constexpr set_intersection_result<borrowed_iterator_t<_Range1>,\n+\t\t\t\t\tborrowed_iterator_t<_Range2>, _Out>\n       operator()(_Range1&& __r1, _Range2&& __r2, _Out __result,\n \t\t _Comp __comp = {},\n \t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n@@ -3022,7 +3022,7 @@ namespace ranges\n \t     typename _Proj1 = identity, typename _Proj2 = identity>\n       requires mergeable<iterator_t<_Range1>, iterator_t<_Range2>, _Out,\n \t\t\t _Comp, _Proj1, _Proj2>\n-      constexpr set_difference_result<safe_iterator_t<_Range1>, _Out>\n+      constexpr set_difference_result<borrowed_iterator_t<_Range1>, _Out>\n       operator()(_Range1&& __r1, _Range2&& __r2, _Out __result,\n \t\t _Comp __comp = {},\n \t\t _Proj1 __proj1 = {}, _Proj2 __proj2 = {}) const\n@@ -3088,8 +3088,8 @@ namespace ranges\n \t     typename _Proj1 = identity, typename _Proj2 = identity>\n       requires mergeable<iterator_t<_Range1>, iterator_t<_Range2>, _Out,\n \t\t\t _Comp, _Proj1, _Proj2>\n-      constexpr set_symmetric_difference_result<safe_iterator_t<_Range1>,\n-\t\t\t\t\t\tsafe_iterator_t<_Range2>,\n+      constexpr set_symmetric_difference_result<borrowed_iterator_t<_Range1>,\n+\t\t\t\t\t\tborrowed_iterator_t<_Range2>,\n \t\t\t\t\t\t_Out>\n       operator()(_Range1&& __r1, _Range2&& __r2, _Out __result,\n \t\t _Comp __comp = {},\n@@ -3343,7 +3343,7 @@ namespace ranges\n     template<forward_range _Range, typename _Proj = identity,\n \t     indirect_strict_weak_order<projected<iterator_t<_Range>, _Proj>>\n \t       _Comp = ranges::less>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -3380,7 +3380,7 @@ namespace ranges\n     template<forward_range _Range, typename _Proj = identity,\n \t     indirect_strict_weak_order<projected<iterator_t<_Range>, _Proj>>\n \t       _Comp = ranges::less>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -3425,7 +3425,7 @@ namespace ranges\n     template<forward_range _Range, typename _Proj = identity,\n \t     indirect_strict_weak_order<projected<iterator_t<_Range>, _Proj>>\n \t       _Comp = ranges::less>\n-      constexpr minmax_element_result<safe_iterator_t<_Range>>\n+      constexpr minmax_element_result<borrowed_iterator_t<_Range>>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -3610,7 +3610,7 @@ namespace ranges\n     template<bidirectional_range _Range, typename _Comp = ranges::less,\n \t     typename _Proj = identity>\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n-      constexpr next_permutation_result<safe_iterator_t<_Range>>\n+      constexpr next_permutation_result<borrowed_iterator_t<_Range>>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -3672,7 +3672,7 @@ namespace ranges\n     template<bidirectional_range _Range, typename _Comp = ranges::less,\n \t     typename _Proj = identity>\n       requires sortable<iterator_t<_Range>, _Comp, _Proj>\n-      constexpr prev_permutation_result<safe_iterator_t<_Range>>\n+      constexpr prev_permutation_result<borrowed_iterator_t<_Range>>\n       operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),"}, {"sha": "807822e99c86802dc41f976b397e568bad8d8673", "filename": "libstdc++-v3/include/bits/ranges_algobase.h", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_algobase.h?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -310,7 +310,7 @@ namespace ranges\n \n     template<input_range _Range, weakly_incrementable _Out>\n       requires indirectly_copyable<iterator_t<_Range>, _Out>\n-      constexpr copy_result<safe_iterator_t<_Range>, _Out>\n+      constexpr copy_result<borrowed_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -335,7 +335,7 @@ namespace ranges\n \n     template<input_range _Range, weakly_incrementable _Out>\n       requires indirectly_movable<iterator_t<_Range>, _Out>\n-      constexpr move_result<safe_iterator_t<_Range>, _Out>\n+      constexpr move_result<borrowed_iterator_t<_Range>, _Out>\n       operator()(_Range&& __r, _Out __result) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -452,7 +452,7 @@ namespace ranges\n \n     template<bidirectional_range _Range, bidirectional_iterator _Iter>\n       requires indirectly_copyable<iterator_t<_Range>, _Iter>\n-      constexpr copy_backward_result<safe_iterator_t<_Range>, _Iter>\n+      constexpr copy_backward_result<borrowed_iterator_t<_Range>, _Iter>\n       operator()(_Range&& __r, _Iter __result) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -477,7 +477,7 @@ namespace ranges\n \n     template<bidirectional_range _Range, bidirectional_iterator _Iter>\n       requires indirectly_movable<iterator_t<_Range>, _Iter>\n-      constexpr move_backward_result<safe_iterator_t<_Range>, _Iter>\n+      constexpr move_backward_result<borrowed_iterator_t<_Range>, _Iter>\n       operator()(_Range&& __r, _Iter __result) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r),\n@@ -577,7 +577,7 @@ namespace ranges\n       }\n \n     template<typename _Tp, output_range<const _Tp&> _Range>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, const _Tp& __value) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r), __value);"}, {"sha": "01e1cad646c21d9091db4aa67cf2b6198b321053", "filename": "libstdc++-v3/include/bits/ranges_uninitialized.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Franges_uninitialized.h?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -88,7 +88,7 @@ namespace ranges\n \n     template<__detail::__nothrow_input_range _Range>\n       requires destructible<range_value_t<_Range>>\n-      constexpr safe_iterator_t<_Range>\n+      constexpr borrowed_iterator_t<_Range>\n       operator()(_Range&& __r) const noexcept;\n   };\n \n@@ -159,7 +159,7 @@ namespace ranges\n \n     template<__detail::__nothrow_forward_range _Range>\n       requires default_initializable<range_value_t<_Range>>\n-      safe_iterator_t<_Range>\n+      borrowed_iterator_t<_Range>\n       operator()(_Range&& __r) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r));\n@@ -217,7 +217,7 @@ namespace ranges\n \n     template<__detail::__nothrow_forward_range _Range>\n       requires default_initializable<range_value_t<_Range>>\n-      safe_iterator_t<_Range>\n+      borrowed_iterator_t<_Range>\n       operator()(_Range&& __r) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r));\n@@ -290,8 +290,8 @@ namespace ranges\n     template<input_range _IRange, __detail::__nothrow_forward_range _ORange>\n       requires constructible_from<range_value_t<_ORange>,\n \t\t\t\t  range_reference_t<_IRange>>\n-      uninitialized_copy_result<safe_iterator_t<_IRange>,\n-\t\t\t\tsafe_iterator_t<_ORange>>\n+      uninitialized_copy_result<borrowed_iterator_t<_IRange>,\n+\t\t\t\tborrowed_iterator_t<_ORange>>\n       operator()(_IRange&& __inr, _ORange&& __outr) const\n       {\n \treturn (*this)(ranges::begin(__inr), ranges::end(__inr),\n@@ -377,8 +377,8 @@ namespace ranges\n     template<input_range _IRange, __detail::__nothrow_forward_range _ORange>\n       requires constructible_from<range_value_t<_ORange>,\n \t       range_rvalue_reference_t<_IRange>>\n-      uninitialized_move_result<safe_iterator_t<_IRange>,\n-\t\t\t\tsafe_iterator_t<_ORange>>\n+      uninitialized_move_result<borrowed_iterator_t<_IRange>,\n+\t\t\t\tborrowed_iterator_t<_ORange>>\n       operator()(_IRange&& __inr, _ORange&& __outr) const\n       {\n \treturn (*this)(ranges::begin(__inr), ranges::end(__inr),\n@@ -450,7 +450,7 @@ namespace ranges\n \n     template<__detail::__nothrow_forward_range _Range, typename _Tp>\n       requires constructible_from<range_value_t<_Range>, const _Tp&>\n-      safe_iterator_t<_Range>\n+      borrowed_iterator_t<_Range>\n       operator()(_Range&& __r, const _Tp& __x) const\n       {\n \treturn (*this)(ranges::begin(__r), ranges::end(__r), __x);\n@@ -531,7 +531,7 @@ namespace ranges\n \n   template<__detail::__nothrow_input_range _Range>\n     requires destructible<range_value_t<_Range>>\n-    constexpr safe_iterator_t<_Range>\n+    constexpr borrowed_iterator_t<_Range>\n     __destroy_fn::operator()(_Range&& __r) const noexcept\n     {\n       return (*this)(ranges::begin(__r), ranges::end(__r));"}, {"sha": "439650154aea8074814a5f3188599fc01f5fb0fd", "filename": "libstdc++-v3/include/experimental/string_view", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fstring_view?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -694,11 +694,11 @@ namespace experimental\n #if __cpp_lib_concepts\n   namespace ranges\n   {\n-    template<typename> extern inline const bool enable_safe_range;\n-    // Opt-in to safe_range concept\n+    template<typename> extern inline const bool enable_borrowed_range;\n+    // Opt-in to borrowed_range concept\n     template<typename _CharT, typename _Traits>\n       inline constexpr bool\n-\tenable_safe_range<experimental::basic_string_view<_CharT, _Traits>>\n+\tenable_borrowed_range<experimental::basic_string_view<_CharT, _Traits>>\n \t  = true;\n   }\n #endif"}, {"sha": "4bfda88c3192532e55a3d836954b405e11bb60d0", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -93,7 +93,7 @@ namespace ranges\n   /// A range which can be safely converted to a view.\n   template<typename _Tp>\n     concept viewable_range = range<_Tp>\n-      && (safe_range<_Tp> || view<remove_cvref_t<_Tp>>);\n+      && (borrowed_range<_Tp> || view<remove_cvref_t<_Tp>>);\n \n   namespace __detail\n   {\n@@ -294,7 +294,7 @@ namespace ranges\n       }\n \n       template<__detail::__not_same_as<subrange> _Rng>\n-\trequires safe_range<_Rng>\n+\trequires borrowed_range<_Rng>\n \t  && convertible_to<iterator_t<_Rng>, _It>\n \t  && convertible_to<sentinel_t<_Rng>, _Sent>\n \tconstexpr\n@@ -305,7 +305,7 @@ namespace ranges\n \t    _M_size._M_size = ranges::size(__r);\n \t}\n \n-      template<safe_range _Rng>\n+      template<borrowed_range _Rng>\n \trequires convertible_to<iterator_t<_Rng>, _It>\n \t  && convertible_to<sentinel_t<_Rng>, _Sent>\n \tconstexpr\n@@ -417,14 +417,14 @@ namespace ranges\n       -> subrange<tuple_element_t<0, _Pr>, tuple_element_t<1, _Pr>,\n \t\t  subrange_kind::sized>;\n \n-  template<safe_range _Rng>\n+  template<borrowed_range _Rng>\n     subrange(_Rng&&)\n       -> subrange<iterator_t<_Rng>, sentinel_t<_Rng>,\n \t\t (sized_range<_Rng>\n \t\t  || sized_sentinel_for<sentinel_t<_Rng>, iterator_t<_Rng>>)\n \t\t ? subrange_kind::sized : subrange_kind::unsized>;\n \n-  template<safe_range _Rng>\n+  template<borrowed_range _Rng>\n     subrange(_Rng&&,\n \t     __detail::__make_unsigned_like_t<range_difference_t<_Rng>>)\n       -> subrange<iterator_t<_Rng>, sentinel_t<_Rng>, subrange_kind::sized>;\n@@ -454,7 +454,7 @@ namespace ranges\n   template<input_or_output_iterator _It, sentinel_for<_It> _Sent,\n \t   subrange_kind _Kind>\n     inline constexpr bool\n-      enable_safe_range<subrange<_It, _Sent, _Kind>> = true;\n+      enable_borrowed_range<subrange<_It, _Sent, _Kind>> = true;\n \n } // namespace ranges\n \n@@ -471,14 +471,14 @@ namespace ranges\n   };\n \n   template<range _Range>\n-    using safe_iterator_t = conditional_t<safe_range<_Range>,\n-\t\t\t\t\t  iterator_t<_Range>,\n-\t\t\t\t\t  dangling>;\n+    using borrowed_iterator_t = conditional_t<borrowed_range<_Range>,\n+\t\t\t\t\t      iterator_t<_Range>,\n+\t\t\t\t\t      dangling>;\n \n   template<range _Range>\n-    using safe_subrange_t = conditional_t<safe_range<_Range>,\n-\t\t\t\t\t  subrange<iterator_t<_Range>>,\n-\t\t\t\t\t  dangling>;\n+    using borrowed_subrange_t = conditional_t<borrowed_range<_Range>,\n+\t\t\t\t\t      subrange<iterator_t<_Range>>,\n+\t\t\t\t\t      dangling>;\n \n   template<typename _Tp> requires is_object_v<_Tp>\n     class empty_view\n@@ -493,7 +493,7 @@ namespace ranges\n     };\n \n   template<typename _Tp>\n-    inline constexpr bool enable_safe_range<empty_view<_Tp>> = true;\n+    inline constexpr bool enable_borrowed_range<empty_view<_Tp>> = true;\n \n   namespace __detail\n   {\n@@ -919,7 +919,8 @@ namespace ranges\n     iota_view(_Winc, _Bound) -> iota_view<_Winc, _Bound>;\n \n   template<weakly_incrementable _Winc, semiregular _Bound>\n-    inline constexpr bool enable_safe_range<iota_view<_Winc, _Bound>> = true;\n+    inline constexpr bool\n+      enable_borrowed_range<iota_view<_Winc, _Bound>> = true;\n \n namespace views\n {\n@@ -1221,7 +1222,7 @@ namespace views\n     ref_view(_Range&) -> ref_view<_Range>;\n \n   template<typename _Tp>\n-    inline constexpr bool enable_safe_range<ref_view<_Tp>> = true;\n+    inline constexpr bool enable_borrowed_range<ref_view<_Tp>> = true;\n \n   namespace views\n   {"}, {"sha": "63dc2515b25ec482392a5351d6def110578107e0", "filename": "libstdc++-v3/include/std/span", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fspan?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -207,7 +207,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       template<typename _Range>\n \trequires ranges::contiguous_range<_Range> && ranges::sized_range<_Range>\n-\t  && (ranges::safe_range<_Range> || is_const_v<element_type>)\n+\t  && (ranges::borrowed_range<_Range> || is_const_v<element_type>)\n \t  && (!__detail::__is_std_span<remove_cvref_t<_Range>>::value)\n \t  && (!__detail::__is_std_array<remove_cvref_t<_Range>>::value)\n \t  && (!is_array_v<remove_cvref_t<_Range>>)\n@@ -465,11 +465,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   namespace ranges\n   {\n-    template<typename> extern inline const bool enable_safe_range;\n-    // Opt-in to safe_range concept\n+    template<typename> extern inline const bool enable_borrowed_range;\n+    // Opt-in to borrowed_range concept\n     template<typename _ElementType, size_t _Extent>\n       inline constexpr bool\n-\tenable_safe_range<span<_ElementType, _Extent>> = true;\n+\tenable_borrowed_range<span<_ElementType, _Extent>> = true;\n   }\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std"}, {"sha": "16687f6c352abd7ef855a66ef4c5d1ca77e0211c", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -727,11 +727,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #if __cpp_lib_concepts\n   namespace ranges\n   {\n-    template<typename> extern inline const bool enable_safe_range;\n-    // Opt-in to safe_range concept\n+    template<typename> extern inline const bool enable_borrowed_range;\n+    // Opt-in to borrowed_range concept\n     template<typename _CharT, typename _Traits>\n       inline constexpr bool\n-\tenable_safe_range<basic_string_view<_CharT, _Traits>> = true;\n+\tenable_borrowed_range<basic_string_view<_CharT, _Traits>> = true;\n   }\n #endif\n _GLIBCXX_END_NAMESPACE_VERSION"}, {"sha": "b6801552c6085d9bcae9d85f53a7e971fa4cbb53", "filename": "libstdc++-v3/testsuite/std/ranges/access/begin.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fbegin.cc?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -85,7 +85,7 @@ struct RV // view on an R\n };\n \n // Allow ranges::begin to work with RV&&\n-template<> constexpr bool std::ranges::enable_safe_range<RV> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<RV> = true;\n \n void\n test03()\n@@ -102,7 +102,7 @@ test03()\n   VERIFY( std::ranges::begin(c) == begin(c) );\n \n   RV v{r};\n-  // enable_safe_range<RV> allows ranges::begin to work for rvalues,\n+  // enable_borrowed_range<RV> allows ranges::begin to work for rvalues,\n   // but it will call v.begin() or begin(v) on an lvalue:\n   static_assert(same_as<decltype(std::ranges::begin(std::move(v))),\n \t\tdecltype(begin(v))>);\n@@ -132,7 +132,7 @@ struct RR\n };\n \n // N.B. this is a lie, begin on an RR rvalue will return a dangling pointer.\n-template<> constexpr bool std::ranges::enable_safe_range<RR> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<RR> = true;\n \n void\n test04()"}, {"sha": "6e994210c6b89c6b4a682c695db7c399ee5f9b0b", "filename": "libstdc++-v3/testsuite/std/ranges/access/cbegin.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcbegin.cc?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -54,7 +54,7 @@ struct RV // view on an R\n };\n \n // Allow ranges::begin to work with RV&&\n-template<> constexpr bool std::ranges::enable_safe_range<RV> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<RV> = true;\n \n void\n test03()\n@@ -86,7 +86,7 @@ struct RR\n };\n \n // N.B. this is a lie, cbegin on an RR rvalue will return a dangling pointer.\n-template<> constexpr bool std::ranges::enable_safe_range<RR> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<RR> = true;\n \n void\n test04()"}, {"sha": "8e68514bfad7ed8b7ddc1f3fe9d45614e68631a1", "filename": "libstdc++-v3/testsuite/std/ranges/access/cdata.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcdata.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcdata.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcdata.cc?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -57,7 +57,7 @@ struct R\n };\n \n // This is a lie, ranges::begin(R&&) returns a dangling iterator.\n-template<> constexpr bool std::ranges::enable_safe_range<R> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<R> = true;\n \n void\n test03()"}, {"sha": "f3a00863a78e17d732024740a154118e4e704ef8", "filename": "libstdc++-v3/testsuite/std/ranges/access/cend.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcend.cc?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -60,7 +60,7 @@ struct RV // view on an R\n };\n \n // Allow ranges::end to work with RV&&\n-template<> constexpr bool std::ranges::enable_safe_range<RV> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<RV> = true;\n \n void\n test03()\n@@ -98,7 +98,7 @@ struct RR\n };\n \n // N.B. this is a lie, begin/end on an RR rvalue will return a dangling pointer.\n-template<> constexpr bool std::ranges::enable_safe_range<RR> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<RR> = true;\n \n void\n test04()"}, {"sha": "50d8eb43e75b625dba8146b59e8a1ac2c87de4aa", "filename": "libstdc++-v3/testsuite/std/ranges/access/crbegin.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrbegin.cc?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -40,7 +40,7 @@ struct R1V // view on an R1\n };\n \n // Allow ranges::end to work with R1V&&\n-template<> constexpr bool std::ranges::enable_safe_range<R1V> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<R1V> = true;\n \n void\n test01()\n@@ -69,7 +69,7 @@ struct R2\n };\n \n // N.B. this is a lie, rbegin on an R2 rvalue will return a dangling pointer.\n-template<> constexpr bool std::ranges::enable_safe_range<R2> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<R2> = true;\n \n void\n test02()"}, {"sha": "4d50f4a0965a393d4b23777bf0ca7081f0d094ed", "filename": "libstdc++-v3/testsuite/std/ranges/access/crend.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fcrend.cc?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -34,7 +34,7 @@ struct R1\n };\n \n // N.B. this is a lie, rend on an R1 rvalue will return a dangling pointer.\n-template<> constexpr bool std::ranges::enable_safe_range<R1> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<R1> = true;\n \n void\n test01()\n@@ -60,7 +60,7 @@ struct R2\n };\n \n // N.B. this is a lie, rend on an R2 rvalue will return a dangling pointer.\n-template<> constexpr bool std::ranges::enable_safe_range<R2> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<R2> = true;\n \n void\n test02()\n@@ -85,7 +85,7 @@ struct R3\n };\n \n // N.B. this is a lie, rend on an R3 rvalue will return a dangling pointer.\n-template<> constexpr bool std::ranges::enable_safe_range<R3> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<R3> = true;\n \n void\n test03()"}, {"sha": "bcd564b75c8ebde7bff69bd85bcfe388f715c005", "filename": "libstdc++-v3/testsuite/std/ranges/access/data.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fdata.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fdata.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fdata.cc?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -61,15 +61,15 @@ struct R3\n };\n \n // N.B. this is a lie, begin on an R3 rvalue will return a dangling pointer.\n-template<> constexpr bool std::ranges::enable_safe_range<R3> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<R3> = true;\n \n void\n test03()\n {\n   R3 r;\n   const R3& c = r;\n   // r.data() can only be used on an lvalue, but ranges::begin(R3&&) is OK\n-  // because R3 satisfies ranges::safe_range.\n+  // because R3 satisfies ranges::borrowed_range.\n   VERIFY( std::ranges::data(std::move(r)) == std::to_address(std::ranges::begin(std::move(r))) );\n   VERIFY( std::ranges::data(std::move(c)) == std::to_address(std::ranges::begin(std::move(c))) );\n }"}, {"sha": "245f246c5173d4d75b4a330b8d5bcd656bee6c55", "filename": "libstdc++-v3/testsuite/std/ranges/access/end.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fend.cc?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -90,7 +90,7 @@ struct RV // view on an R\n };\n \n // Allow ranges::begin to work with RV&&\n-template<> constexpr bool std::ranges::enable_safe_range<RV> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<RV> = true;\n \n void\n test03()\n@@ -146,7 +146,7 @@ struct RR\n };\n \n // N.B. this is a lie, end on an RR rvalue will return a dangling pointer.\n-template<> constexpr bool std::ranges::enable_safe_range<RR> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<RR> = true;\n \n void\n test04()"}, {"sha": "bc49a10a734ebcd2f5fbbfc4709358b71ac996b5", "filename": "libstdc++-v3/testsuite/std/ranges/access/rbegin.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frbegin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frbegin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frbegin.cc?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -32,7 +32,7 @@ struct R1\n };\n \n // N.B. this is a lie, rbegin on an R1 rvalue will return a dangling pointer.\n-template<> constexpr bool std::ranges::enable_safe_range<R1> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<R1> = true;\n \n void\n test01()\n@@ -56,7 +56,7 @@ struct R2\n };\n \n // N.B. this is a lie, begin/end on an R2 rvalue will return a dangling pointer.\n-template<> constexpr bool std::ranges::enable_safe_range<R2> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<R2> = true;\n \n void\n test02()"}, {"sha": "e80b5526f8465d02256003e67220554805736818", "filename": "libstdc++-v3/testsuite/std/ranges/access/rend.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frend.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frend.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Frend.cc?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -34,7 +34,7 @@ struct R1\n };\n \n // N.B. this is a lie, rend on an R1 rvalue will return a dangling pointer.\n-template<> constexpr bool std::ranges::enable_safe_range<R1> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<R1> = true;\n \n void\n test01()\n@@ -87,7 +87,7 @@ struct R3\n };\n \n // N.B. this is a lie, begin/end on an R3 rvalue will return a dangling pointer.\n-template<> constexpr bool std::ranges::enable_safe_range<R3> = true;\n+template<> constexpr bool std::ranges::enable_borrowed_range<R3> = true;\n \n void\n test03()"}, {"sha": "ec43f7884dc35d5c8366151a3e5d731a1a93ae2b", "filename": "libstdc++-v3/testsuite/std/ranges/safe_range.cc", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsafe_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsafe_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsafe_range.cc?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -21,21 +21,21 @@\n #include <ranges>\n #include <testsuite_iterators.h>\n \n-static_assert( std::ranges::safe_range<int(&)[1]> );\n-static_assert( std::ranges::safe_range<const int(&)[1]> );\n-static_assert( !std::ranges::safe_range<int[1]> );\n-static_assert( !std::ranges::safe_range<int*> );\n+static_assert( std::ranges::borrowed_range<int(&)[1]> );\n+static_assert( std::ranges::borrowed_range<const int(&)[1]> );\n+static_assert( !std::ranges::borrowed_range<int[1]> );\n+static_assert( !std::ranges::borrowed_range<int*> );\n \n using __gnu_test::test_contiguous_range;\n \n-static_assert( !std::ranges::safe_range<test_contiguous_range<int>> );\n-static_assert( std::ranges::safe_range<test_contiguous_range<int>&> );\n-static_assert( !std::ranges::safe_range<test_contiguous_range<int>&&> );\n+static_assert( !std::ranges::borrowed_range<test_contiguous_range<int>> );\n+static_assert( std::ranges::borrowed_range<test_contiguous_range<int>&> );\n+static_assert( !std::ranges::borrowed_range<test_contiguous_range<int>&&> );\n \n template<>\n constexpr bool\n-  std::ranges::enable_safe_range<test_contiguous_range<long>> = true;\n+  std::ranges::enable_borrowed_range<test_contiguous_range<long>> = true;\n \n-static_assert( std::ranges::safe_range<test_contiguous_range<long>> );\n-static_assert( std::ranges::safe_range<test_contiguous_range<long>&> );\n-static_assert( std::ranges::safe_range<test_contiguous_range<long>&&> );\n+static_assert( std::ranges::borrowed_range<test_contiguous_range<long>> );\n+static_assert( std::ranges::borrowed_range<test_contiguous_range<long>&> );\n+static_assert( std::ranges::borrowed_range<test_contiguous_range<long>&&> );"}, {"sha": "2835babfd82597601ddedb126b87cd3d8d6124be", "filename": "libstdc++-v3/testsuite/std/ranges/safe_range_types.cc", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsafe_range_types.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsafe_range_types.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fsafe_range_types.cc?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -25,35 +25,35 @@\n \n template<typename T>\n constexpr bool\n-rvalue_is_safe_range()\n+rvalue_is_borrowed_range()\n {\n-  using std::ranges::safe_range;\n+  using std::ranges::borrowed_range;\n \n-  // An lvalue range always models safe_range\n-  static_assert( safe_range<T&> );\n-  static_assert( safe_range<const T&> );\n+  // An lvalue range always models borrowed_range\n+  static_assert( borrowed_range<T&> );\n+  static_assert( borrowed_range<const T&> );\n \n   // Result should not depend on addition of const or rvalue-reference.\n-  static_assert( safe_range<T&&> == safe_range<T> );\n-  static_assert( safe_range<const T> == safe_range<T> );\n-  static_assert( safe_range<const T&&> == safe_range<T> );\n+  static_assert( borrowed_range<T&&> == borrowed_range<T> );\n+  static_assert( borrowed_range<const T> == borrowed_range<T> );\n+  static_assert( borrowed_range<const T&&> == borrowed_range<T> );\n \n-  return std::ranges::safe_range<T>;\n+  return std::ranges::borrowed_range<T>;\n }\n \n-static_assert( rvalue_is_safe_range<std::ranges::subrange<int*, int*>>() );\n-static_assert( rvalue_is_safe_range<std::ranges::empty_view<int>>() );\n-static_assert( rvalue_is_safe_range<std::ranges::iota_view<int>>() );\n-static_assert( rvalue_is_safe_range<std::ranges::iota_view<int, int>>() );\n+static_assert( rvalue_is_borrowed_range<std::ranges::subrange<int*, int*>>() );\n+static_assert( rvalue_is_borrowed_range<std::ranges::empty_view<int>>() );\n+static_assert( rvalue_is_borrowed_range<std::ranges::iota_view<int>>() );\n+static_assert( rvalue_is_borrowed_range<std::ranges::iota_view<int, int>>() );\n \n-static_assert( rvalue_is_safe_range<std::span<int>>() );\n-static_assert( rvalue_is_safe_range<std::span<int, 99>>() );\n+static_assert( rvalue_is_borrowed_range<std::span<int>>() );\n+static_assert( rvalue_is_borrowed_range<std::span<int, 99>>() );\n \n-static_assert( ! rvalue_is_safe_range<std::string>() );\n-static_assert( ! rvalue_is_safe_range<std::wstring>() );\n+static_assert( ! rvalue_is_borrowed_range<std::string>() );\n+static_assert( ! rvalue_is_borrowed_range<std::wstring>() );\n \n-static_assert( rvalue_is_safe_range<std::string_view>() );\n-static_assert( rvalue_is_safe_range<std::wstring_view>() );\n+static_assert( rvalue_is_borrowed_range<std::string_view>() );\n+static_assert( rvalue_is_borrowed_range<std::wstring_view>() );\n \n-static_assert( rvalue_is_safe_range<std::experimental::string_view>() );\n-static_assert( rvalue_is_safe_range<std::experimental::wstring_view>() );\n+static_assert( rvalue_is_borrowed_range<std::experimental::string_view>() );\n+static_assert( rvalue_is_borrowed_range<std::experimental::wstring_view>() );"}, {"sha": "7b7093919b79185d53db85c5ca56316b765dd8a7", "filename": "libstdc++-v3/testsuite/util/testsuite_iterators.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15411a6453444ef49940822380e39e6a1d174fac/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Futil%2Ftestsuite_iterators.h?ref=15411a6453444ef49940822380e39e6a1d174fac", "patch": "@@ -765,8 +765,8 @@ namespace __gnu_test\n       = test_sized_range<T, output_iterator_wrapper>;\n \n // test_range and test_sized_range do not own their elements, so they model\n-// std::ranges::safe_range.  This file does not define specializations of\n-// std::ranges::enable_safe_range, so that individual tests can decide\n+// std::ranges::borrowed_range.  This file does not define specializations of\n+// std::ranges::enable_borrowed_range, so that individual tests can decide\n // whether or not to do so.\n // This is also true for test_container, although only when it has forward\n // iterators (because output_iterator_wrapper and input_iterator_wrapper are"}]}