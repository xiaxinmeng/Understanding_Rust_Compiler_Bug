{"sha": "db292b0ecdf2cf9b65e130a2726447588531bb50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGIyOTJiMGVjZGYyY2Y5YjY1ZTEzMGEyNzI2NDQ3NTg4NTMxYmI1MA==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-12T23:19:27Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-10-12T23:19:27Z"}, "message": "re PR target/54680 ([SH] Unnecessary int-float-int conversion of fsca fixed point input)\n\n\tPR target/54680\n\t* config/sh/sh.c (sh_fsca_sf2int, sh_fsca_int2sf): Fix swapped\n\tcomments.\n\t* config/sh/predicates.md (fpul_operand): Add comment.\n\t(fpul_fsca_operand, fsca_scale_factor): New predicates.\n\t* config/sh/sh.md (fsca): Move below sincossf3 expander.  Convert to\n\tinsn_and_split.  Use fpul_fsca_operand and fsca_scale_factor predicates.\n\tSimplify fpul operand in splitter.\n\n\tPR target/54680\n\t* gcc.target/sh/pr54680.c: New.\n\nFrom-SVN: r192416", "tree": {"sha": "588096527984a2541e06ca104cf1d8b8068f2b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/588096527984a2541e06ca104cf1d8b8068f2b5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db292b0ecdf2cf9b65e130a2726447588531bb50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db292b0ecdf2cf9b65e130a2726447588531bb50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db292b0ecdf2cf9b65e130a2726447588531bb50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db292b0ecdf2cf9b65e130a2726447588531bb50/comments", "author": null, "committer": null, "parents": [{"sha": "535269f4f984e10f912283b2817ec86f0004e442", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/535269f4f984e10f912283b2817ec86f0004e442", "html_url": "https://github.com/Rust-GCC/gccrs/commit/535269f4f984e10f912283b2817ec86f0004e442"}], "stats": {"total": 176, "additions": 148, "deletions": 28}, "files": [{"sha": "a501decafda4d2cd78dd1576ebfbe2452a0d4f7b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db292b0ecdf2cf9b65e130a2726447588531bb50/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db292b0ecdf2cf9b65e130a2726447588531bb50/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db292b0ecdf2cf9b65e130a2726447588531bb50", "patch": "@@ -1,3 +1,14 @@\n+2012-10-12  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54680\n+\t* config/sh/sh.c (sh_fsca_sf2int, sh_fsca_int2sf): Fix swapped\n+\tcomments.\n+\t* config/sh/predicates.md (fpul_operand): Add comment.\n+\t(fpul_fsca_operand, fsca_scale_factor): New predicates.\n+\t* config/sh/sh.md (fsca): Move below sincossf3 expander.  Convert to\n+\tinsn_and_split.  Use fpul_fsca_operand and fsca_scale_factor predicates.\n+\tSimplify fpul operand in splitter.\n+\n 2012-10-12  Jan Hubicka <jh@suse.cz>\n \n \t* tree-ssa-threadupdate.c (def_split_header_continue_p): Do not"}, {"sha": "cd980556002b61dc4d829eb016c1cf5710429975", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db292b0ecdf2cf9b65e130a2726447588531bb50/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db292b0ecdf2cf9b65e130a2726447588531bb50/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=db292b0ecdf2cf9b65e130a2726447588531bb50", "patch": "@@ -345,8 +345,10 @@\n \t  && GET_MODE (op) == PSImode);\n })\n \n-;; TODO: Add a comment here.\n-\n+;; Returns true if OP is an operand that is either the fpul hard reg or\n+;; a pseudo.  This prevents combine from propagating function arguments\n+;; in hard regs into insns that need the operand in fpul.  If it's a pseudo\n+;; reload can fix it up.\n (define_predicate \"fpul_operand\"\n   (match_code \"reg\")\n {\n@@ -358,6 +360,29 @@\n \t  && GET_MODE (op) == mode);\n })\n \n+;; Returns true if OP is a valid fpul input operand for the fsca insn.\n+;; The value in fpul is a fixed-point value and its scaling is described\n+;; in the fsca insn by a mult:SF.  To allow pre-scaled fixed-point inputs\n+;; in fpul we have to permit things like\n+;;   (reg:SI)\n+;;   (fix:SF (float:SF (reg:SI)))\n+(define_predicate \"fpul_fsca_operand\"\n+  (match_code \"fix,reg\")\n+{\n+  if (fpul_operand (op, SImode))\n+    return true;\n+  if (GET_CODE (op) == FIX && GET_MODE (op) == SImode\n+      && GET_CODE (XEXP (op, 0)) == FLOAT && GET_MODE (XEXP (op, 0)) == SFmode)\n+    return fpul_fsca_operand (XEXP (XEXP (op, 0), 0),\n+\t\t\t      GET_MODE (XEXP (XEXP (op, 0), 0)));\n+  return false;\n+})\n+\n+;; Returns true if OP is a valid constant scale factor for the fsca insn.\n+(define_predicate \"fsca_scale_factor\"\n+  (and (match_code \"const_double\")\n+       (match_test \"op == sh_fsca_int2sf ()\")))\n+\n ;; TODO: Add a comment here.\n \n (define_predicate \"general_extend_operand\""}, {"sha": "b617351172e0378a7bb62eddcccd7dabed561f92", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db292b0ecdf2cf9b65e130a2726447588531bb50/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db292b0ecdf2cf9b65e130a2726447588531bb50/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=db292b0ecdf2cf9b65e130a2726447588531bb50", "patch": "@@ -12659,11 +12659,9 @@ check_use_sfunc_addr (rtx insn, rtx reg)\n   gcc_unreachable ();\n }\n \n-/* This function returns a constant rtx that represents pi / 2**15 in\n-   SFmode.  it's used to scale SFmode angles, in radians, to a\n-   fixed-point signed 16.16-bit fraction of a full circle, i.e., 2*pi\n-   maps to 0x10000).  */\n-\n+/* This function returns a constant rtx that represents 2**15 / pi in\n+   SFmode.  It's used to scale a fixed-point signed 16.16-bit fraction\n+   of a full circle back to an SFmode value, i.e. 0x10000 maps to 2*pi.  */\n static GTY(()) rtx sh_fsca_sf2int_rtx;\n \n rtx\n@@ -12680,11 +12678,10 @@ sh_fsca_sf2int (void)\n   return sh_fsca_sf2int_rtx;\n }\n \n-/* This function returns a constant rtx that represents 2**15 / pi in\n-   SFmode.  it's used to scale a fixed-point signed 16.16-bit fraction\n-   of a full circle back to a SFmode value, i.e., 0x10000 maps to\n-   2*pi).  */\n-\n+/* This function returns a constant rtx that represents pi / 2**15 in\n+   SFmode.  It's used to scale SFmode angles, in radians, to a\n+   fixed-point signed 16.16-bit fraction of a full circle, i.e. 2*pi\n+   maps to 0x10000.  */\n static GTY(()) rtx sh_fsca_int2sf_rtx;\n \n rtx"}, {"sha": "6e168eafd2d0318b503033354be67f9a6cc403f1", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db292b0ecdf2cf9b65e130a2726447588531bb50/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db292b0ecdf2cf9b65e130a2726447588531bb50/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=db292b0ecdf2cf9b65e130a2726447588531bb50", "patch": "@@ -12208,22 +12208,6 @@ label:\n   [(set_attr \"type\" \"fsrra\")\n    (set_attr \"fp_mode\" \"single\")])\n \n-(define_insn \"fsca\"\n-  [(set (match_operand:V2SF 0 \"fp_arith_reg_operand\" \"=f\")\n-\t(vec_concat:V2SF\n-\t (unspec:SF [(mult:SF\n-\t\t      (float:SF (match_operand:SI 1 \"fpul_operand\" \"y\"))\n-\t\t      (match_operand:SF 2 \"immediate_operand\" \"i\"))\n-\t\t    ] UNSPEC_FSINA)\n-\t (unspec:SF [(mult:SF (float:SF (match_dup 1)) (match_dup 2))\n-\t\t    ] UNSPEC_FCOSA)))\n-   (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n-  \"TARGET_FPU_ANY && TARGET_FSCA\n-   && operands[2] == sh_fsca_int2sf ()\"\n-  \"fsca\tfpul,%d0\"\n-  [(set_attr \"type\" \"fsca\")\n-   (set_attr \"fp_mode\" \"single\")])\n-\n ;; When the sincos pattern is defined, the builtin functions sin and cos\n ;; will be expanded to the sincos pattern and one of the output values will\n ;; remain unused.\n@@ -12250,6 +12234,38 @@ label:\n   DONE;\n })\n \n+(define_insn_and_split \"fsca\"\n+  [(set (match_operand:V2SF 0 \"fp_arith_reg_operand\" \"=f\")\n+\t(vec_concat:V2SF\n+\t (unspec:SF [(mult:SF\n+\t\t      (float:SF (match_operand:SI 1 \"fpul_fsca_operand\" \"y\"))\n+\t\t      (match_operand:SF 2 \"fsca_scale_factor\" \"i\"))\n+\t\t    ] UNSPEC_FSINA)\n+\t (unspec:SF [(mult:SF (float:SF (match_dup 1)) (match_dup 2))\n+\t\t    ] UNSPEC_FCOSA)))\n+   (use (match_operand:PSI 3 \"fpscr_operand\" \"c\"))]\n+  \"TARGET_FPU_ANY && TARGET_FSCA\"\n+  \"fsca\tfpul,%d0\"\n+  \"&& !fpul_operand (operands[1], SImode)\"\n+  [(const_int 0)]\n+{\n+  /* If operands[1] is something like (fix:SF (float:SF (reg:SI))) reduce it\n+     to a simple reg, otherwise reload will have trouble reloading the\n+     pseudo into fpul.  */\n+  rtx x = XEXP (operands[1], 0);\n+  while (x != NULL_RTX && !fpul_operand (x, SImode))\n+    {\n+      gcc_assert (GET_CODE (x) == FIX || GET_CODE (x) == FLOAT);\n+      x = XEXP (x, 0);\n+    }\n+\n+  gcc_assert (x != NULL_RTX && fpul_operand (x, SImode));\n+  emit_insn (gen_fsca (operands[0], x, operands[2], operands[3]));\n+  DONE;\n+}\n+  [(set_attr \"type\" \"fsca\")\n+   (set_attr \"fp_mode\" \"single\")])\n+\n (define_expand \"abssf2\"\n   [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"\")\n \t(abs:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"\")))]"}, {"sha": "96624674ecd90e506570bb400c8ed0e763fe13aa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db292b0ecdf2cf9b65e130a2726447588531bb50/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db292b0ecdf2cf9b65e130a2726447588531bb50/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=db292b0ecdf2cf9b65e130a2726447588531bb50", "patch": "@@ -1,3 +1,8 @@\n+2012-10-12  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/54680\n+\t* gcc.target/sh/pr54680.c: New.\n+\n 2012-10-12  Jan Hubicka <jh@suse.cz>\n \n \t* gcc.dg/webizer.c: New testcase."}, {"sha": "27c44d3ca4d84be641b6d83224917a326538f2aa", "filename": "gcc/testsuite/gcc.target/sh/pr54680.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db292b0ecdf2cf9b65e130a2726447588531bb50/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54680.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db292b0ecdf2cf9b65e130a2726447588531bb50/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54680.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr54680.c?ref=db292b0ecdf2cf9b65e130a2726447588531bb50", "patch": "@@ -0,0 +1,66 @@\n+/* Verify that the fsca input value is not converted to float and then back\n+   to int.  Notice that we can't count just \"lds\" insns because mode switches\n+   use \"lds.l\".  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O2 -mfsca -funsafe-math-optimizations\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2*\" \"-m3*\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fsca\" 7 } } */\n+/* { dg-final { scan-assembler-times \"shad\" 1 } } */\n+/* { dg-final { scan-assembler-times \"lds\\t\" 6 } } */\n+/* { dg-final { scan-assembler-times \"fmul\" 2 } } */\n+/* { dg-final { scan-assembler-times \"ftrc\" 1 } } */\n+\n+#include <math.h>\n+\n+static const float pi = 3.14159265359f;\n+\n+float\n+test00 (int x)\n+{\n+  /* 1x shad, 1x lds, 1x fsca  */\n+  return sinf ( (x >> 8) * (2*pi) / (1 << 16));\n+}\n+\n+float\n+test01 (int x)\n+{\n+  /* 1x lds, 1x fsca  */\n+  return sinf (x * (2*pi) / 65536);\n+}\n+\n+float\n+test02 (int x)\n+{\n+  /* 1x lds, 1x fsca  */\n+  return sinf (x * (2*pi / 65536));\n+}\n+\n+float\n+test03 (int x)\n+{\n+  /* 1x lds, 1x fsca  */\n+  float scale = 2*pi / 65536;\n+  return sinf (x * scale);\n+}\n+\n+float\n+test04 (int x)\n+{\n+  /* 1x lds, 1x fsca  */\n+  return cosf (x / 65536.0f * 2*pi);\n+}\n+\n+float\n+test05 (int x)\n+{\n+  /* 1x lds, 1x fsca, 1x fmul  */\n+  float scale = 2*pi / 65536;\n+  return sinf (x * scale) * cosf (x * scale);\n+}\n+\n+float\n+test_06 (float x)\n+{\n+  /* 1x fmul, 1x ftrc, 1x fsca  */\n+  return sinf (x);\n+}"}]}