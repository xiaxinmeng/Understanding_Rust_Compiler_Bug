{"sha": "a5a4ce3c3c0eee620f62210898d661a3b05f283a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhNGNlM2MzYzBlZWU2MjBmNjIyMTA4OThkNjYxYTNiMDVmMjgzYQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-01-05T07:50:24Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-01-05T07:50:24Z"}, "message": "cpp.texi: Update for -MP.\n\n        * cpp.texi: Update for -MP.  Clarify behaviour of -MT.\n        * cppinit.c (initialize_dependency_output):  Update.\n        (cpp_finish): Output dummy targets for -MP.\n        (OPT_MP): New.\n        (cpp_handle_option): Handle -MP.  Don't quote -MT options.\n        * cpplib.h (struct cpp_options): Add deps_phony_targets.\n        * gcc.c (cpp_options): Update to handle -MP.\n        * mkdeps.c (deps_add_target, deps_add_default_target): Update\n        to quote only the default target.\n        (deps_phony_targets): Insert a preceding newline.  Rename from\n        deps_dummy_targets for consistency.\n        * mkdeps.h: Update\njava:\n        * lang.c (lang_decode_option): Change -MA to -MP.\n        * jcf-depend.c (jcf_dependency_add_target, jcf_dependency_set_target):\n        Update to new prototype; do quote targets.\n        (jcf_dependency_write): Update.\n\nFrom-SVN: r38707", "tree": {"sha": "4a7fde9382b70c566caa911a671a363b63d0df58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a7fde9382b70c566caa911a671a363b63d0df58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5a4ce3c3c0eee620f62210898d661a3b05f283a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a4ce3c3c0eee620f62210898d661a3b05f283a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a4ce3c3c0eee620f62210898d661a3b05f283a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a4ce3c3c0eee620f62210898d661a3b05f283a/comments", "author": null, "committer": null, "parents": [{"sha": "97fc4caf7d18cd4aaa2a31a55c68b4a4ec7deb36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97fc4caf7d18cd4aaa2a31a55c68b4a4ec7deb36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97fc4caf7d18cd4aaa2a31a55c68b4a4ec7deb36"}], "stats": {"total": 118, "additions": 93, "deletions": 25}, "files": [{"sha": "d06ad0a1630aaadf0aac28a4b30dbd2687967906", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5a4ce3c3c0eee620f62210898d661a3b05f283a", "patch": "@@ -1,3 +1,18 @@\n+2001-01-05  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+        * cpp.texi: Update for -MP.  Clarify behaviour of -MT.\n+        * cppinit.c (initialize_dependency_output):  Update.\n+        (cpp_finish): Output dummy targets for -MP.\n+        (OPT_MP): New.\n+        (cpp_handle_option): Handle -MP.  Don't quote -MT options.  \n+        * cpplib.h (struct cpp_options): Add deps_phony_targets.\n+        * gcc.c (cpp_options): Update to handle -MP.\n+        * mkdeps.c (deps_add_target, deps_add_default_target): Update\n+        to quote only the default target.\n+        (deps_phony_targets): Insert a preceding newline.  Rename from\n+        deps_dummy_targets for consistency.\n+        * mkdeps.h: Update\n+\n 2001-01-05  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* calls.c (emit_library_call_value_1): Support"}, {"sha": "7df4531af039b4fdd7d65121386e1fbed3e2a81b", "filename": "gcc/cpp.texi", "status": "modified", "additions": 27, "deletions": 3, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=a5a4ce3c3c0eee620f62210898d661a3b05f283a", "patch": "@@ -3476,14 +3476,38 @@ files into a single dependency file suitable for using with the\n Like @samp{-MD} except mention only user header files, not system\n header files.\n \n+@item -MP\n+@findex -MP\n+This option instructs CPP to add a phony target for each dependency\n+other than the main file, causing each to depend on nothing.  These\n+dummy rules work around errors MAKE gives if you remove header files\n+without updating the Makefile to match.\n+\n+This is typical output:-\n+\n+@smallexample\n+/tmp/test.o: /tmp/test.c /tmp/test.h\n+\n+/tmp/test.h:\n+@end smallexample\n+\n @item -MT @var{target}\n @findex -MT\n By default CPP uses the base file name and appends the object suffix,\n normally ``.o'', to it to obtain the name of the target for dependency\n-generation.  With @samp{-MT} you can specify one or more of your own\n-targets; doing so overrides the default.\n+generation.  With @samp{-MT} you can specify a target yourself,\n+overriding the default one.\n+\n+If you want multiple targets, you can specify them as a single argument\n+to @samp{-MT}, or use multiple @samp{-MT} options.\n+\n+The targets you specify are output in the order they appear on the\n+command line, and, unlike the default target, are not quoted for MAKE.\n+This allows you to do things like, for example,\n \n-The targets are output in the order they appear on the command line.\n+@smallexample\n+-MT '$(objpfx)foo.o $(objpfx)foo.os $(objpfx)foo.op'\n+@end smallexample\n \n @item -H\n @findex -H"}, {"sha": "310fc04edba6adcb5004f0f7b31df740ed9f0cfb", "filename": "gcc/cppinit.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=a5a4ce3c3c0eee620f62210898d661a3b05f283a", "patch": "@@ -760,7 +760,8 @@ initialize_dependency_output (pfile)\n       s = strchr (spec, ' ');\n       if (s)\n \t{\n-\t  deps_add_target (pfile->deps, s + 1);\n+\t  /* Let the caller perform MAKE quoting.  */\n+\t  deps_add_target (pfile->deps, s + 1, 0);\n \t  output_file = (char *) xmalloc (s - spec + 1);\n \t  memcpy (output_file, spec, s - spec);\n \t  output_file[s - spec] = 0;\n@@ -1018,6 +1019,10 @@ cpp_finish (pfile)\n       if (deps_stream)\n \t{\n \t  deps_write (pfile->deps, deps_stream, 72);\n+\n+\t  if (CPP_OPTION (pfile, deps_phony_targets))\n+\t    deps_phony_targets (pfile->deps, deps_stream);\n+\n \t  if (CPP_OPTION (pfile, deps_file))\n \t    {\n \t      if (ferror (deps_stream) || fclose (deps_stream) != 0)\n@@ -1077,6 +1082,7 @@ new_pending_directive (pend, text, handler)\n   DEF_OPT(\"MG\",                       0,      OPT_MG)                         \\\n   DEF_OPT(\"MM\",                       0,      OPT_MM)                         \\\n   DEF_OPT(\"MMD\",                      no_fil, OPT_MMD)                        \\\n+  DEF_OPT(\"MP\",                       0,      OPT_MP)                         \\\n   DEF_OPT(\"MT\",                       no_tgt, OPT_MT)                         \\\n   DEF_OPT(\"P\",                        0,      OPT_P)                          \\\n   DEF_OPT(\"U\",                        no_mac, OPT_U)                          \\\n@@ -1496,11 +1502,15 @@ cpp_handle_option (pfile, argc, argv)\n \t      CPP_OPTION (pfile, no_output) = 1;\n \t  break;\n \n+\tcase OPT_MP:\n+\t  CPP_OPTION (pfile, deps_phony_targets) = 1;\n+\t  break;\n+\n \tcase OPT_MT:\n \t  /* Add a target.  */\n \t  if (! pfile->deps)\n \t    pfile->deps = deps_init ();\n-\t  deps_add_target (pfile->deps, arg);\n+\t  deps_add_target (pfile->deps, arg, 0);\n \t  break;\n \n \tcase OPT_A:"}, {"sha": "c2049d787abae2e09f018975a6853429510286c6", "filename": "gcc/cpplib.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=a5a4ce3c3c0eee620f62210898d661a3b05f283a", "patch": "@@ -329,6 +329,9 @@ struct cpp_options\n      #include <...> as well.  */\n   unsigned char print_deps;\n \n+  /* Nonzero if phony targets are created for each header.  */\n+  unsigned char deps_phony_targets;\n+\n   /* Nonzero if missing .h files in -M output are assumed to be\n      generated files and not errors.  */\n   unsigned char print_deps_missing_files;\n@@ -570,7 +573,7 @@ struct cpp_reader\n   cpp_token date;\n   cpp_token time;\n \n-  /* Buffer of -M output.  */\n+  /* Opaque handle to the dependencies of mkdeps.c.  Used by -M etc.  */\n   struct deps *deps;\n \n   /* Obstack holding all macro hash nodes.  This never shrinks."}, {"sha": "b33cacc09a1f4e755ebad57fa900ed5b13a52eb2", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=a5a4ce3c3c0eee620f62210898d661a3b05f283a", "patch": "@@ -584,7 +584,7 @@ static const char *cpp_options =\n \"%{C:%{!E:%eGNU C does not support -C without using -E}}\\\n  %{std*} %{nostdinc*}\\\n  %{C} %{v} %{I*} %{P} %{$} %I\\\n- %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG} %{MT}\\\n+ %{M} %{MM} %{MD:-MD %b.d} %{MMD:-MMD %b.d} %{MG} %{MP} %{MT}\\\n  %{!no-gcc:-D__GNUC__=%v1 -D__GNUC_MINOR__=%v2 -D__GNUC_PATCHLEVEL__=%v3}\\\n  %{!undef:%{!ansi:%{!std=*:%p}%{std=gnu*:%p}} %P} %{trigraphs}\\\n  %c %{Os:-D__OPTIMIZE_SIZE__} %{O*:%{!O0:-D__OPTIMIZE__}}\\"}, {"sha": "0b8306b2861ebb03e823d3bf5124ca1dc8cd2c2f", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=a5a4ce3c3c0eee620f62210898d661a3b05f283a", "patch": "@@ -1,3 +1,10 @@\n+2001-01-04  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* lang.c (lang_decode_option): Change -MA to -MP.\n+\t* jcf-depend.c (jcf_dependency_add_target, jcf_dependency_set_target):\n+\tUpdate to new prototype; do quote targets.\n+\t(jcf_dependency_write): Update.\n+\n 2000-12-22  Bryce McKinlay  <bryce@albatross.co.nz>\n \n \tShorten primitive array allocation path:"}, {"sha": "c9995609517ed09c8c9d528c77b7af1ba20ea48f", "filename": "gcc/java/jcf-depend.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fjava%2Fjcf-depend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fjava%2Fjcf-depend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-depend.c?ref=a5a4ce3c3c0eee620f62210898d661a3b05f283a", "patch": "@@ -1,6 +1,6 @@\n /* Functions for handling dependency tracking when reading .class files.\n \n-   Copyright (C) 1998, 1999, 2000  Free Software Foundation, Inc.\n+   Copyright (C) 1998, 1999, 2000, 2001  Free Software Foundation, Inc.\n \n This program is free software; you can redistribute it and/or modify\n it under the terms of the GNU General Public License as published by\n@@ -74,15 +74,15 @@ jcf_dependency_set_target (name)\n {\n   /* We just handle this the same as an `add_target'.  */\n   if (dependencies != NULL && name != NULL)\n-    deps_add_target (dependencies, name);\n+    deps_add_target (dependencies, name, 1);\n }\n \n void\n jcf_dependency_add_target (name)\n      const char *name;\n {\n   if (dependencies != NULL)\n-    deps_add_target (dependencies, name);\n+    deps_add_target (dependencies, name, 1);\n }\n \n void\n@@ -138,6 +138,6 @@ jcf_dependency_write ()\n \n   deps_write (dependencies, dep_out, 72);\n   if (print_dummies)\n-    deps_dummy_targets (dependencies, dep_out);\n+    deps_phony_targets (dependencies, dep_out);\n   fflush (dep_out);\n }"}, {"sha": "7565eba9e24198ed65f9d68cd2ac4b6edfda34f2", "filename": "gcc/java/lang.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fjava%2Flang.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fjava%2Flang.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Flang.c?ref=a5a4ce3c3c0eee620f62210898d661a3b05f283a", "patch": "@@ -1,5 +1,6 @@\n /* Java(TM) language-specific utility routines.\n-   Copyright (C) 1996, 1997, 1998, 1999, 2000 Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001\n+   Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -340,7 +341,7 @@ lang_decode_option (argc, argv)\n       dependency_tracking |= DEPEND_ENABLE;\n       return 1;\n     }\n-  else if (strcmp (p, \"-MA\") == 0)\n+  else if (strcmp (p, \"-MP\") == 0)\n     {\n       jcf_dependency_print_dummies ();\n       return 1;"}, {"sha": "f83d82f9e30eb81a3d0277f31b101b1f7fe1b86a", "filename": "gcc/mkdeps.c", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fmkdeps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fmkdeps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkdeps.c?ref=a5a4ce3c3c0eee620f62210898d661a3b05f283a", "patch": "@@ -73,8 +73,7 @@ munge (filename)\n \t  break;\n \n \tcase '$':\n-\t  /* '$' is quoted by doubling it. This can mishandle things\n-\t     like \"$(\" but there's no easy fix.  */\n+\t  /* '$' is quoted by doubling it.  */\n \t  len++;\n \t  break;\n \t}\n@@ -172,25 +171,32 @@ deps_free (d)\n   free (d);\n }\n \n+/* Adds a target T.  We make a copy, so it need not be a permanent\n+   string.  QUOTE is true if the string should be quoted.  */\n void\n-deps_add_target (d, t)\n+deps_add_target (d, t, quote)\n      struct deps *d;\n      const char *t;\n+     int quote;\n {\n-  t = munge (t);  /* Also makes permanent copy.  */\n-\n   if (d->ntargets == d->targets_size)\n     {\n       d->targets_size *= 2;\n       d->targetv = (const char **) xrealloc (d->targetv,\n \t\t\t     d->targets_size * sizeof (const char *));\n     }\n \n+  if (quote)\n+    t = munge (t);  /* Also makes permanent copy.  */\n+  else\n+    t = xstrdup (t);\n+\n   d->targetv[d->ntargets++] = t;\n }\n \n /* Sets the default target if none has been given already.  An empty\n-   string as the default target in interpreted as stdin.  */\n+   string as the default target in interpreted as stdin.  The string\n+   is quoted for MAKE.  */\n void\n deps_add_default_target (d, tgt)\n      struct deps *d;\n@@ -203,7 +209,7 @@ deps_add_default_target (d, tgt)\n     return;\n \n   if (tgt[0] == '\\0')\n-    deps_add_target (d, \"-\");\n+    deps_add_target (d, \"-\", 1);\n   else\n     {\n       tgt = base_name (tgt);\n@@ -220,7 +226,7 @@ deps_add_default_target (d, tgt)\n \tstrcpy (suffix, OBJECT_SUFFIX);\n       else\n \tstrcat (o, OBJECT_SUFFIX);\n-      deps_add_target (d, o);\n+      deps_add_target (d, o, 1);\n     }\n }\n \n@@ -293,14 +299,15 @@ deps_write (d, fp, colmax)\n }\n   \n void\n-deps_dummy_targets (d, fp)\n+deps_phony_targets (d, fp)\n      const struct deps *d;\n      FILE *fp;\n {\n   unsigned int i;\n \n   for (i = 1; i < d->ndeps; i++)\n     {\n+      putc ('\\n', fp);\n       fputs (d->depv[i], fp);\n       putc (':', fp);\n       putc ('\\n', fp);"}, {"sha": "2484af18f3e677d7e0517253bc7468a9b36e0dba", "filename": "gcc/mkdeps.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fmkdeps.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a4ce3c3c0eee620f62210898d661a3b05f283a/gcc%2Fmkdeps.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmkdeps.h?ref=a5a4ce3c3c0eee620f62210898d661a3b05f283a", "patch": "@@ -34,8 +34,9 @@ extern struct deps *deps_init\tPARAMS ((void));\n /* Destroy a deps buffer.  */\n extern void deps_free\t\tPARAMS ((struct deps *));\n \n-/* Add a target (appears on left side of the colon) to the deps list. */\n-extern void deps_add_target\tPARAMS ((struct deps *, const char *));\n+/* Add a target (appears on left side of the colon) to the deps list.  Takes\n+   a boolean indicating whether to quote the target for MAKE.  */\n+extern void deps_add_target\tPARAMS ((struct deps *, const char *, int));\n \n /* Sets the default target if none has been given already.  An empty\n    string as the default target in interpreted as stdin.  */\n@@ -56,6 +57,6 @@ extern void deps_write\t\tPARAMS ((const struct deps *, FILE *,\n    file, causing it to depend on nothing.  This is used to work around\n    the intermediate-file deletion misfeature in Make, in some\n    automatic dependency schemes.  */\n-extern void deps_dummy_targets\tPARAMS ((const struct deps *, FILE *));\n+extern void deps_phony_targets\tPARAMS ((const struct deps *, FILE *));\n \n #endif"}]}