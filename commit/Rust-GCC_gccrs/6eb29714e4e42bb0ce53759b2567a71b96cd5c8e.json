{"sha": "6eb29714e4e42bb0ce53759b2567a71b96cd5c8e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmViMjk3MTRlNGU0MmJiMGNlNTM3NTliMjU2N2E3MWI5NmNkNWM4ZQ==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2009-08-12T16:51:41Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2009-08-12T16:51:41Z"}, "message": "Fix to PR41012\n\nFrom-SVN: r150703", "tree": {"sha": "169e66302796b1a698328523a598d07c824939db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/169e66302796b1a698328523a598d07c824939db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e8e76230ed27bb3a942c0db135089f905c43684f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e8e76230ed27bb3a942c0db135089f905c43684f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e8e76230ed27bb3a942c0db135089f905c43684f"}], "stats": {"total": 126, "additions": 91, "deletions": 35}, "files": [{"sha": "2bfd318cd8a308fb5dc26906f09da1c74a0f2cf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6eb29714e4e42bb0ce53759b2567a71b96cd5c8e", "patch": "@@ -1,3 +1,16 @@\n+2009-08-12  Xinliang David Li  <davidxl@google.com>\n+\n+\tPR tree-optimization/41012\n+\t* tree-flow.h : New external interface.\n+\t* gimple-low.c (check_call_arg): Change to public function.\n+\tRemove argument mismatch check in lowering.\n+\t* tree-inline.h (tree_can_inline_p): Interface change.\n+\t* tree-inline.c (tree_can_inline_p): Fold argument mismatch check\n+\tinto this function.\n+\t* ipa-inline.c (cgraph_decide_inlining_of_small_functions): \n+\tCall change to tree_can_inline_p function.\n+\t(cgraph_decide_inlining_incrementally): Ditto.\n+\n 2009-08-12  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tPR tree-optimization/41031"}, {"sha": "eba86727a0595031c6bd2fd1415d68edc50c5246", "filename": "gcc/gimple-low.c", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2Fgimple-low.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2Fgimple-low.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-low.c?ref=6eb29714e4e42bb0ce53759b2567a71b96cd5c8e", "patch": "@@ -221,17 +221,14 @@ struct gimple_opt_pass pass_lower_cf =\n \n /* Verify if the type of the argument matches that of the function\n    declaration.  If we cannot verify this or there is a mismatch,\n-   mark the call expression so it doesn't get inlined later.  */\n+   return false.  */\n \n-static void\n-check_call_args (gimple stmt)\n+bool\n+gimple_check_call_args (gimple stmt)\n {\n   tree fndecl, parms, p;\n   unsigned int i, nargs;\n \n-  if (gimple_call_cannot_inline_p (stmt))\n-    return;\n-\n   nargs = gimple_call_num_args (stmt);\n \n   /* Get argument types for verification.  */\n@@ -244,7 +241,7 @@ check_call_args (gimple stmt)\n \n   /* Verify if the type of the argument matches that of the function\n      declaration.  If we cannot verify this or there is a mismatch,\n-     mark the call expression so it doesn't get inlined later.  */\n+     return false.  */\n   if (fndecl && DECL_ARGUMENTS (fndecl))\n     {\n       for (i = 0, p = DECL_ARGUMENTS (fndecl);\n@@ -260,10 +257,7 @@ check_call_args (gimple stmt)\n \t      || gimple_call_arg (stmt, i) == error_mark_node\n \t      || !fold_convertible_p (DECL_ARG_TYPE (p),\n \t\t\t\t      gimple_call_arg (stmt, i)))\n-\t    {\n-\t      gimple_call_set_cannot_inline (stmt, true);\n-\t      break;\n-\t    }\n+            return false;\n \t}\n     }\n   else if (parms)\n@@ -279,17 +273,15 @@ check_call_args (gimple stmt)\n \t      || TREE_CODE (TREE_VALUE (p)) == VOID_TYPE\n \t      || !fold_convertible_p (TREE_VALUE (p),\n \t\t\t\t      gimple_call_arg (stmt, i)))\n-\t    {\n-\t      gimple_call_set_cannot_inline (stmt, true);\n-\t      break;\n-\t    }\n+            return false;\n \t}\n     }\n   else\n     {\n       if (nargs != 0)\n-\tgimple_call_set_cannot_inline (stmt, true);\n+        return false;\n     }\n+  return true;\n }\n \n \n@@ -394,7 +386,6 @@ lower_stmt (gimple_stmt_iterator *gsi, struct lower_data *data)\n \t    lower_builtin_setjmp (gsi);\n \t    return;\n \t  }\n-\tcheck_call_args (stmt);\n       }\n       break;\n "}, {"sha": "79de3634d865d37ffbe0803a1b7b6d76d15a1051", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=6eb29714e4e42bb0ce53759b2567a71b96cd5c8e", "patch": "@@ -1006,10 +1006,8 @@ cgraph_decide_inlining_of_small_functions (void)\n \t    }\n \t  continue;\n \t}\n-      if (!tree_can_inline_p (edge->caller->decl, edge->callee->decl))\n+      if (!tree_can_inline_p (edge))\n \t{\n-\t  gimple_call_set_cannot_inline (edge->call_stmt, true);\n-\t  edge->inline_failed = CIF_TARGET_OPTION_MISMATCH;\n \t  if (dump_file)\n \t    fprintf (dump_file, \" inline_failed:%s.\\n\",\n \t\t     cgraph_inline_failed_string (edge->inline_failed));\n@@ -1184,11 +1182,8 @@ cgraph_decide_inlining (void)\n \t      if (cgraph_recursive_inlining_p (e->caller, e->callee,\n \t\t\t\t\t       &e->inline_failed))\n \t\tcontinue;\n-\t      if (!tree_can_inline_p (e->caller->decl, e->callee->decl))\n-\t\t{\n-\t\t  gimple_call_set_cannot_inline (e->call_stmt, true);\n-\t\t  continue;\n-\t\t}\n+\t      if (!tree_can_inline_p (e))\n+                continue;\n \t      if (cgraph_mark_inline_edge (e, true, NULL))\n \t\tredo_always_inline = true;\n \t      if (dump_file)\n@@ -1440,14 +1435,14 @@ cgraph_decide_inlining_incrementally (struct cgraph_node *node,\n \t      }\n \t    continue;\n \t  }\n-\tif (!tree_can_inline_p (node->decl, e->callee->decl))\n+\tif (!tree_can_inline_p (e))\n \t  {\n-\t    gimple_call_set_cannot_inline (e->call_stmt, true);\n \t    if (dump_file)\n \t      {\n \t\tindent_to (dump_file, depth);\n \t\tfprintf (dump_file,\n-\t\t\t \"Not inlining: Target specific option mismatch.\\n\");\n+\t\t\t \"Not inlining: %s\",\n+                         cgraph_inline_failed_string (e->inline_failed));\n \t      }\n \t    continue;\n \t  }\n@@ -1553,14 +1548,14 @@ cgraph_decide_inlining_incrementally (struct cgraph_node *node,\n \t      }\n \t    continue;\n \t  }\n-\tif (!tree_can_inline_p (node->decl, e->callee->decl))\n+\tif (!tree_can_inline_p (e))\n \t  {\n-\t    gimple_call_set_cannot_inline (e->call_stmt, true);\n \t    if (dump_file)\n \t      {\n \t\tindent_to (dump_file, depth);\n \t\tfprintf (dump_file,\n-\t\t\t \"Not inlining: Target specific option mismatch.\\n\");\n+\t\t\t \"Not inlining: %s.\",\n+                         cgraph_inline_failed_string (e->inline_failed));\n \t      }\n \t    continue;\n \t  }"}, {"sha": "a0d488284b9990b3e97341d3fc157e484a956d9e", "filename": "gcc/testsuite/g++.dg/tree-prof/inline_mismatch_args.C", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Finline_mismatch_args.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Finline_mismatch_args.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Finline_mismatch_args.C?ref=6eb29714e4e42bb0ce53759b2567a71b96cd5c8e", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-options \"-O2 -fdump-tree-einline2\" } */\n+class DocId {\n+ public:\n+ DocId() { }\n+ DocId(const DocId &other) {  }\n+};\n+\n+int g;\n+class Base {\n+ public:\n+ virtual void Foo(DocId id) { g++; }\n+};\n+\n+class Super: public Base {\n+ public:\n+ void Foo(DocId id) { }\n+ void Bar(Base *base, DocId id) __attribute__((noinline));\n+};\n+\n+void Super::Bar(Base *base, DocId id) {\n+ Super::Foo(id); // direct call is inlined\n+ base->Foo(id); // indirect call is marked do not inline\n+}\n+\n+int main(void)\n+{\n+ Base bah;\n+ Super baz;\n+ DocId gid;\n+\n+ baz.Bar(&baz, gid);\n+ return 0;\n+}\n+/* { dg-final-use { scan-tree-dump \"Inlining virtual void Super::Foo\" \"einline2\"} } */                                                                                \n+/* { dg-final-use { scan-tree-dump-not \"mismatched arguments\" \"einline2\"} } */                                                                 \n+/* { dg-final-use { cleanup-tree-dump \"einline2\" } } */"}, {"sha": "ff2b52bd8c0c3a70785615f099d6a2f24cecf8cb", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=6eb29714e4e42bb0ce53759b2567a71b96cd5c8e", "patch": "@@ -597,6 +597,7 @@ extern void record_vars (tree);\n extern bool block_may_fallthru (const_tree);\n extern bool gimple_seq_may_fallthru (gimple_seq);\n extern bool gimple_stmt_may_fallthru (gimple);\n+extern bool gimple_check_call_args (gimple);\n \n \n /* In tree-ssa.c  */"}, {"sha": "97c9261b4690612eee996ed2cbdcec8e845c1d21", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=6eb29714e4e42bb0ce53759b2567a71b96cd5c8e", "patch": "@@ -4754,9 +4754,10 @@ build_duplicate_type (tree type)\n }\n \n /* Return whether it is safe to inline a function because it used different\n-   target specific options or different optimization options.  */\n+   target specific options or call site actual types mismatch parameter types.\n+   E is the call edge to be checked.  */\n bool\n-tree_can_inline_p (tree caller, tree callee)\n+tree_can_inline_p (struct cgraph_edge *e)\n {\n #if 0\n   /* This causes a regression in SPEC in that it prevents a cold function from\n@@ -4785,7 +4786,25 @@ tree_can_inline_p (tree caller, tree callee)\n \treturn false;\n     }\n #endif\n+  tree caller, callee;\n+\n+  caller = e->caller->decl;\n+  callee = e->callee->decl;\n \n   /* Allow the backend to decide if inlining is ok.  */\n-  return targetm.target_option.can_inline_p (caller, callee);\n+  if (!targetm.target_option.can_inline_p (caller, callee))\n+    {\n+      e->inline_failed = CIF_TARGET_OPTION_MISMATCH;\n+      gimple_call_set_cannot_inline (e->call_stmt, true);\n+      return false;\n+    }\n+\n+  if (!gimple_check_call_args (e->call_stmt))\n+    {\n+      e->inline_failed = CIF_MISMATCHED_ARGUMENTS;\n+      gimple_call_set_cannot_inline (e->call_stmt, true);\n+      return false;\n+    }\n+\n+  return true;\n }"}, {"sha": "76ac17adcee63f3a323e268ed9b2da8b6eb09d5e", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6eb29714e4e42bb0ce53759b2567a71b96cd5c8e/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=6eb29714e4e42bb0ce53759b2567a71b96cd5c8e", "patch": "@@ -24,6 +24,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"pointer-set.h\"\n \n+struct cgraph_edge;\n \n /* Indicate the desired behavior wrt call graph edges.  We can either\n    duplicate the edge (inlining, cloning), move the edge (versioning,\n@@ -170,7 +171,7 @@ int estimate_num_insns (gimple, eni_weights *);\n int estimate_num_insns_fn (tree, eni_weights *);\n int count_insns_seq (gimple_seq, eni_weights *);\n bool tree_versionable_function_p (tree);\n-bool tree_can_inline_p (tree, tree);\n+bool tree_can_inline_p (struct cgraph_edge *e);\n \n extern gimple_seq remap_gimple_seq (gimple_seq, copy_body_data *);\n extern tree remap_decl (tree decl, copy_body_data *id);"}]}