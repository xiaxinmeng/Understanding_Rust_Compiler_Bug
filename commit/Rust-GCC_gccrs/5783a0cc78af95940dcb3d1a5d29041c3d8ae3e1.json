{"sha": "5783a0cc78af95940dcb3d1a5d29041c3d8ae3e1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTc4M2EwY2M3OGFmOTU5NDBkY2IzZDFhNWQyOTA0MWMzZDhhZTNlMQ==", "commit": {"author": {"name": "Indu Bhagat", "email": "indu.bhagat@oracle.com", "date": "2021-05-20T17:30:13Z"}, "committer": {"name": "Jose E. Marchesi", "email": "jose.marchesi@oracle.com", "date": "2021-06-28T16:47:20Z"}, "message": "dwarf: externalize some DWARF internals for needs of CTF/BTF\n\nThis patch externalizes some internal DIE structures and their attributes\nfor the use of DWARF-based debug formats like CTF and BTF.\n\nThe following functions which were previously defined as static in\ndwarf2out.c are now non-static, and extern prototypes for them have\nbeen added to dwarf2out.h:\n\n- get_AT\n- AT_int\n- AT_class\n- AT_loc\n- get_AT_ref\n- get_AT_string\n- get_AT_class\n- AT_unsigned\n- get_AT_unsigned\n- get_AT_flag\n- add_name_attribute\n- new_die_raw\n- base_type_die\n- lookup_decl_die\n- get_AT_file\n\nNote how this patch doens't change the names of these functions to\navoid a massive renaming in dwarf2out.c, but in the future we probably\nwant these functions to sport a dw_* prefix.\n\nAlso, some type definitions have been moved from dwarf2out.c to\ndwarf2out.h:\n\n- dw_attr_node\n- struct dwarf_file_data\n\nFinally, three new accessor functions have been added to dwarf2out.c\nwith prototypes in dwarf2out.h:\n\n- dw_get_die_child\n- dw_get_die_sib\n- dw_get_die_tag\n\n2021-06-28  Jose E. Marchesi  <jose.marchesi@oracle.com>\n\n\t* dwarf2out.c (AT_class): Function is no longer static.\n\t(AT_int): Likewise.\n\t(AT_unsigned): Likewise.\n\t(AT_loc): Likewise.\n\t(get_AT): Likewise.\n\t(get_AT_string): Likewise.\n\t(get_AT_flag): Likewise.\n\t(get_AT_unsigned): Likewise.\n\t(get_AT_ref): Likewise.\n\t(new_die_raw): Likewise.\n\t(lookup_decl_die): Likewise.\n\t(base_type_die): Likewise.\n\t(add_name_attribute): Likewise.\n\t(add_AT_int): Likewise.\n\t(add_AT_unsigned): Likewise.\n\t(add_AT_loc): Likewise.\n\t(dw_get_die_tag): New function.\n\t(dw_get_die_child): Likewise.\n\t(dw_get_die_sib): Likewise.\n\t(struct dwarf_file_data): Move from here to dwarf2out.h\n\t(struct dw_attr_struct): Likewise.\n\t* dwarf2out.h: Analogous changes.", "tree": {"sha": "20114eea92e6caff1304c0d44027516887ce2a30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20114eea92e6caff1304c0d44027516887ce2a30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5783a0cc78af95940dcb3d1a5d29041c3d8ae3e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5783a0cc78af95940dcb3d1a5d29041c3d8ae3e1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5783a0cc78af95940dcb3d1a5d29041c3d8ae3e1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5783a0cc78af95940dcb3d1a5d29041c3d8ae3e1/comments", "author": {"login": "ibhagatgnu", "id": 51812649, "node_id": "MDQ6VXNlcjUxODEyNjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/51812649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibhagatgnu", "html_url": "https://github.com/ibhagatgnu", "followers_url": "https://api.github.com/users/ibhagatgnu/followers", "following_url": "https://api.github.com/users/ibhagatgnu/following{/other_user}", "gists_url": "https://api.github.com/users/ibhagatgnu/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibhagatgnu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibhagatgnu/subscriptions", "organizations_url": "https://api.github.com/users/ibhagatgnu/orgs", "repos_url": "https://api.github.com/users/ibhagatgnu/repos", "events_url": "https://api.github.com/users/ibhagatgnu/events{/privacy}", "received_events_url": "https://api.github.com/users/ibhagatgnu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jemarch", "id": 7061875, "node_id": "MDQ6VXNlcjcwNjE4NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/7061875?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jemarch", "html_url": "https://github.com/jemarch", "followers_url": "https://api.github.com/users/jemarch/followers", "following_url": "https://api.github.com/users/jemarch/following{/other_user}", "gists_url": "https://api.github.com/users/jemarch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jemarch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jemarch/subscriptions", "organizations_url": "https://api.github.com/users/jemarch/orgs", "repos_url": "https://api.github.com/users/jemarch/repos", "events_url": "https://api.github.com/users/jemarch/events{/privacy}", "received_events_url": "https://api.github.com/users/jemarch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2902991a6b61d473f7cb996a2b80eef4a90f8eda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2902991a6b61d473f7cb996a2b80eef4a90f8eda", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2902991a6b61d473f7cb996a2b80eef4a90f8eda"}], "stats": {"total": 125, "additions": 82, "deletions": 43}, "files": [{"sha": "e10006c50817ff60291fd2bac04242a16bcee06b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 38, "deletions": 43, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5783a0cc78af95940dcb3d1a5d29041c3d8ae3e1/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5783a0cc78af95940dcb3d1a5d29041c3d8ae3e1/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=5783a0cc78af95940dcb3d1a5d29041c3d8ae3e1", "patch": "@@ -1332,12 +1332,6 @@ dwarf2out_switch_text_section (void)\n /* And now, the subset of the debugging information support code necessary\n    for emitting location expressions.  */\n \n-/* Data about a single source file.  */\n-struct GTY((for_user)) dwarf_file_data {\n-  const char * filename;\n-  int emitted_number;\n-};\n-\n /* Describe an entry into the .debug_addr section.  */\n \n enum ate_kind {\n@@ -3123,17 +3117,6 @@ maybe_reset_location_view (rtx_insn *insn, dw_line_info_table *table)\n     RESET_NEXT_VIEW (table->view);\n }\n \n-/* Each DIE attribute has a field specifying the attribute kind,\n-   a link to the next attribute in the chain, and an attribute value.\n-   Attributes are typically linked below the DIE they modify.  */\n-\n-typedef struct GTY(()) dw_attr_struct {\n-  enum dwarf_attribute dw_attr;\n-  dw_val_node dw_attr_val;\n-}\n-dw_attr_node;\n-\n-\n /* The Debugging Information Entry (DIE) structure.  DIEs form a tree.\n    The children of each node form a circular list linked by\n    die_sib.  die_child points to the node *before* the \"first\" child node.  */\n@@ -3711,14 +3694,11 @@ static const char *dwarf_form_name (unsigned);\n static tree decl_ultimate_origin (const_tree);\n static tree decl_class_context (tree);\n static void add_dwarf_attr (dw_die_ref, dw_attr_node *);\n-static inline enum dw_val_class AT_class (dw_attr_node *);\n static inline unsigned int AT_index (dw_attr_node *);\n static void add_AT_flag (dw_die_ref, enum dwarf_attribute, unsigned);\n static inline unsigned AT_flag (dw_attr_node *);\n static void add_AT_int (dw_die_ref, enum dwarf_attribute, HOST_WIDE_INT);\n-static inline HOST_WIDE_INT AT_int (dw_attr_node *);\n static void add_AT_unsigned (dw_die_ref, enum dwarf_attribute, unsigned HOST_WIDE_INT);\n-static inline unsigned HOST_WIDE_INT AT_unsigned (dw_attr_node *);\n static void add_AT_double (dw_die_ref, enum dwarf_attribute,\n \t\t\t   HOST_WIDE_INT, unsigned HOST_WIDE_INT);\n static inline void add_AT_vec (dw_die_ref, enum dwarf_attribute, unsigned int,\n@@ -3733,7 +3713,6 @@ static inline dw_die_ref AT_ref (dw_attr_node *);\n static inline int AT_ref_external (dw_attr_node *);\n static inline void set_AT_ref_external (dw_attr_node *, int);\n static void add_AT_loc (dw_die_ref, enum dwarf_attribute, dw_loc_descr_ref);\n-static inline dw_loc_descr_ref AT_loc (dw_attr_node *);\n static void add_AT_loc_list (dw_die_ref, enum dwarf_attribute,\n \t\t\t     dw_loc_list_ref);\n static inline dw_loc_list_ref AT_loc_list (dw_attr_node *);\n@@ -3750,12 +3729,7 @@ static void add_AT_macptr (dw_die_ref, enum dwarf_attribute, const char *);\n static void add_AT_range_list (dw_die_ref, enum dwarf_attribute,\n                                unsigned long, bool);\n static inline const char *AT_lbl (dw_attr_node *);\n-static dw_attr_node *get_AT (dw_die_ref, enum dwarf_attribute);\n static const char *get_AT_low_pc (dw_die_ref);\n-static const char *get_AT_string (dw_die_ref, enum dwarf_attribute);\n-static int get_AT_flag (dw_die_ref, enum dwarf_attribute);\n-static unsigned get_AT_unsigned (dw_die_ref, enum dwarf_attribute);\n-static inline dw_die_ref get_AT_ref (dw_die_ref, enum dwarf_attribute);\n static bool is_c (void);\n static bool is_cxx (void);\n static bool is_cxx (const_tree);\n@@ -3769,7 +3743,6 @@ static dw_die_ref lookup_type_die (tree);\n static dw_die_ref strip_naming_typedef (tree, dw_die_ref);\n static dw_die_ref lookup_type_die_strip_naming_typedef (tree);\n static void equate_type_number_to_die (tree, dw_die_ref);\n-static dw_die_ref lookup_decl_die (tree);\n static var_loc_list *lookup_decl_loc (const_tree);\n static void equate_decl_number_to_die (tree, dw_die_ref);\n static struct var_loc_node *add_var_loc_to_decl (tree, rtx, const char *, var_loc_view);\n@@ -3842,7 +3815,6 @@ static void output_ranges (void);\n static dw_line_info_table *new_line_info_table (void);\n static void output_line_info (bool);\n static void output_file_names (void);\n-static dw_die_ref base_type_die (tree, bool);\n static int is_base_type (tree);\n static dw_die_ref subrange_type_die (tree, tree, tree, tree, dw_die_ref);\n static int decl_quals (const_tree);\n@@ -3890,7 +3862,6 @@ static rtx rtl_for_decl_location (tree);\n static bool add_location_or_const_value_attribute (dw_die_ref, tree, bool);\n static bool tree_add_const_value_attribute (dw_die_ref, tree);\n static bool tree_add_const_value_attribute_for_decl (dw_die_ref, tree);\n-static void add_name_attribute (dw_die_ref, const char *);\n static void add_desc_attribute (dw_die_ref, tree);\n static void add_gnat_descriptive_type_attribute (dw_die_ref, tree, dw_die_ref);\n static void add_comp_dir_attribute (dw_die_ref);\n@@ -4497,7 +4468,7 @@ add_dwarf_attr (dw_die_ref die, dw_attr_node *attr)\n   vec_safe_push (die->die_attr, *attr);\n }\n \n-static inline enum dw_val_class\n+enum dw_val_class\n AT_class (dw_attr_node *a)\n {\n   return a->dw_attr_val.val_class;\n@@ -4553,7 +4524,7 @@ add_AT_int (dw_die_ref die, enum dwarf_attribute attr_kind, HOST_WIDE_INT int_va\n   add_dwarf_attr (die, &attr);\n }\n \n-static inline HOST_WIDE_INT\n+HOST_WIDE_INT\n AT_int (dw_attr_node *a)\n {\n   gcc_assert (a && (AT_class (a) == dw_val_class_const\n@@ -4576,7 +4547,7 @@ add_AT_unsigned (dw_die_ref die, enum dwarf_attribute attr_kind,\n   add_dwarf_attr (die, &attr);\n }\n \n-static inline unsigned HOST_WIDE_INT\n+unsigned HOST_WIDE_INT\n AT_unsigned (dw_attr_node *a)\n {\n   gcc_assert (a && (AT_class (a) == dw_val_class_unsigned_const\n@@ -4960,7 +4931,7 @@ add_AT_loc (dw_die_ref die, enum dwarf_attribute attr_kind, dw_loc_descr_ref loc\n   add_dwarf_attr (die, &attr);\n }\n \n-static inline dw_loc_descr_ref\n+dw_loc_descr_ref\n AT_loc (dw_attr_node *a)\n {\n   gcc_assert (a && AT_class (a) == dw_val_class_loc);\n@@ -5201,6 +5172,30 @@ index_addr_table_entry (addr_table_entry **h, unsigned int *index)\n   return 1;\n }\n \n+/* Return the tag of a given DIE.  */\n+\n+enum dwarf_tag\n+dw_get_die_tag (dw_die_ref die)\n+{\n+  return die->die_tag;\n+}\n+\n+/* Return a reference to the children list of a given DIE.  */\n+\n+dw_die_ref\n+dw_get_die_child (dw_die_ref die)\n+{\n+  return die->die_child;\n+}\n+\n+/* Return a reference to the sibling of a given DIE.  */\n+\n+dw_die_ref\n+dw_get_die_sib (dw_die_ref die)\n+{\n+  return die->die_sib;\n+}\n+\n /* Add an address constant attribute value to a DIE.  When using\n    dwarf_split_debug_info, address attributes in dies destined for the\n    final executable should be direct references--setting the parameter\n@@ -5398,7 +5393,7 @@ AT_lbl (dw_attr_node *a)\n \n /* Get the attribute of type attr_kind.  */\n \n-static dw_attr_node *\n+dw_attr_node *\n get_AT (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n   dw_attr_node *a;\n@@ -5453,7 +5448,7 @@ get_AT_low_pc (dw_die_ref die)\n /* Return the value of the string attribute designated by ATTR_KIND, or\n    NULL if it is not present.  */\n \n-static inline const char *\n+const char *\n get_AT_string (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n   dw_attr_node *a = get_AT (die, attr_kind);\n@@ -5464,7 +5459,7 @@ get_AT_string (dw_die_ref die, enum dwarf_attribute attr_kind)\n /* Return the value of the flag attribute designated by ATTR_KIND, or -1\n    if it is not present.  */\n \n-static inline int\n+int\n get_AT_flag (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n   dw_attr_node *a = get_AT (die, attr_kind);\n@@ -5475,23 +5470,23 @@ get_AT_flag (dw_die_ref die, enum dwarf_attribute attr_kind)\n /* Return the value of the unsigned attribute designated by ATTR_KIND, or 0\n    if it is not present.  */\n \n-static inline unsigned\n+unsigned\n get_AT_unsigned (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n   dw_attr_node *a = get_AT (die, attr_kind);\n \n   return a ? AT_unsigned (a) : 0;\n }\n \n-static inline dw_die_ref\n+dw_die_ref\n get_AT_ref (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n   dw_attr_node *a = get_AT (die, attr_kind);\n \n   return a ? AT_ref (a) : NULL;\n }\n \n-static inline struct dwarf_file_data *\n+struct dwarf_file_data *\n get_AT_file (dw_die_ref die, enum dwarf_attribute attr_kind)\n {\n   dw_attr_node *a = get_AT (die, attr_kind);\n@@ -5776,7 +5771,7 @@ splice_child_die (dw_die_ref parent, dw_die_ref child)\n \n /* Create and return a new die with TAG_VALUE as tag.  */\n  \n-static inline dw_die_ref\n+dw_die_ref\n new_die_raw (enum dwarf_tag tag_value)\n {\n   dw_die_ref die = ggc_cleared_alloc<die_node> ();\n@@ -5921,7 +5916,7 @@ decl_die_hasher::equal (die_node *x, tree y)\n \n /* Return the DIE associated with a given declaration.  */\n \n-static inline dw_die_ref\n+dw_die_ref\n lookup_decl_die (tree decl)\n {\n   dw_die_ref *die = decl_die_table->find_slot_with_hash (decl, DECL_UID (decl),\n@@ -13150,7 +13145,7 @@ need_endianity_attribute_p (bool reverse)\n    This routine must only be called for GCC type nodes that correspond to\n    Dwarf base (fundamental) types.  */\n \n-static dw_die_ref\n+dw_die_ref\n base_type_die (tree type, bool reverse)\n {\n   dw_die_ref base_type_result;\n@@ -20994,7 +20989,7 @@ compute_frame_pointer_to_fb_displacement (poly_int64 offset)\n /* Generate a DW_AT_name attribute given some string value to be included as\n    the value of the attribute.  */\n \n-static void\n+void\n add_name_attribute (dw_die_ref die, const char *name_string)\n {\n   if (name_string != NULL && *name_string != 0)"}, {"sha": "057afdb53a0e3542e2137d47bfb529b45a6b54e0", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5783a0cc78af95940dcb3d1a5d29041c3d8ae3e1/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5783a0cc78af95940dcb3d1a5d29041c3d8ae3e1/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=5783a0cc78af95940dcb3d1a5d29041c3d8ae3e1", "patch": "@@ -387,4 +387,48 @@ struct fixed_point_type_info\n \n void dwarf2out_c_finalize (void);\n \n+/* Some DWARF internals are exposed for the needs of DWARF-based debug\n+   formats.  */\n+\n+/* Each DIE attribute has a field specifying the attribute kind,\n+   a link to the next attribute in the chain, and an attribute value.\n+   Attributes are typically linked below the DIE they modify.  */\n+\n+typedef struct GTY(()) dw_attr_struct {\n+  enum dwarf_attribute dw_attr;\n+  dw_val_node dw_attr_val;\n+}\n+dw_attr_node;\n+\n+extern dw_attr_node *get_AT (dw_die_ref, enum dwarf_attribute);\n+extern HOST_WIDE_INT AT_int (dw_attr_node *);\n+extern unsigned HOST_WIDE_INT AT_unsigned (dw_attr_node *a);\n+extern dw_loc_descr_ref AT_loc (dw_attr_node *);\n+extern dw_die_ref get_AT_ref (dw_die_ref, enum dwarf_attribute);\n+extern const char *get_AT_string (dw_die_ref, enum dwarf_attribute);\n+extern enum dw_val_class AT_class (dw_attr_node *);\n+extern unsigned HOST_WIDE_INT AT_unsigned (dw_attr_node *);\n+extern unsigned get_AT_unsigned (dw_die_ref, enum dwarf_attribute);\n+extern int get_AT_flag (dw_die_ref, enum dwarf_attribute);\n+\n+extern void add_name_attribute (dw_die_ref, const char *);\n+\n+extern dw_die_ref new_die_raw (enum dwarf_tag);\n+extern dw_die_ref base_type_die (tree, bool);\n+\n+extern dw_die_ref lookup_decl_die (tree);\n+\n+extern dw_die_ref dw_get_die_child (dw_die_ref);\n+extern dw_die_ref dw_get_die_sib (dw_die_ref);\n+extern enum dwarf_tag dw_get_die_tag (dw_die_ref);\n+\n+/* Data about a single source file.  */\n+struct GTY((for_user)) dwarf_file_data {\n+  const char * filename;\n+  int emitted_number;\n+};\n+\n+extern struct dwarf_file_data *get_AT_file (dw_die_ref,\n+\t\t\t\t\t    enum dwarf_attribute);\n+\n #endif /* GCC_DWARF2OUT_H */"}]}