{"sha": "e072b0c410818178beda7e3da622d7ff29d0c3be", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA3MmIwYzQxMDgxODE3OGJlZGE3ZTNkYTYyMmQ3ZmYyOWQwYzNiZQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2017-04-15T03:28:31Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2017-04-15T03:28:31Z"}, "message": "[libcp1] handle anon aggregates linkage-named by typedefs\n\nArrange for the first typedef to an anonymous type in the same context\nto be used as the linkage name for the type.\n\nfor  gcc/cp/ChangeLog\n\n\t* decl.c (name_unnamed_type): Split out of...\n\t(grokdeclarator): ... this.\n\t* decl.h (name_unnamed_type): Declare.\n\nfor  libcc1/ChangeLog\n\n\t* libcp1plugin.cc (plugin_build_decl): Call name_unnamed_type.\n\nFrom-SVN: r246938", "tree": {"sha": "4d33781a146f21c9564a837fd95a447a96ac847c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d33781a146f21c9564a837fd95a447a96ac847c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e072b0c410818178beda7e3da622d7ff29d0c3be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e072b0c410818178beda7e3da622d7ff29d0c3be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e072b0c410818178beda7e3da622d7ff29d0c3be", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e072b0c410818178beda7e3da622d7ff29d0c3be/comments", "author": null, "committer": null, "parents": [{"sha": "51477ac2b9eeaf48c330942e281518d8b6b5c230", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51477ac2b9eeaf48c330942e281518d8b6b5c230", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51477ac2b9eeaf48c330942e281518d8b6b5c230"}], "stats": {"total": 95, "additions": 64, "deletions": 31}, "files": [{"sha": "0aa6351c06b57fd3586910a4786db5fb694a239f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e072b0c410818178beda7e3da622d7ff29d0c3be/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e072b0c410818178beda7e3da622d7ff29d0c3be/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e072b0c410818178beda7e3da622d7ff29d0c3be", "patch": "@@ -1,3 +1,9 @@\n+2017-04-15  Alexandre Oliva <aoliva@redhat.com>\n+\n+\t* decl.c (name_unnamed_type): Split out of...\n+\t(grokdeclarator): ... this.\n+\t* decl.h (name_unnamed_type): Declare.\n+\n 2017-04-12  Richard Biener  <rguenther@suse.de>\n \tBernd Edlinger  <bernd.edlinger@hotmail.de>\n "}, {"sha": "8e9a466afa0630d0e455c97bcab1ab5d51655e95", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 44, "deletions": 31, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e072b0c410818178beda7e3da622d7ff29d0c3be/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e072b0c410818178beda7e3da622d7ff29d0c3be/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e072b0c410818178beda7e3da622d7ff29d0c3be", "patch": "@@ -9852,6 +9852,49 @@ mark_inline_variable (tree decl)\n     }\n }\n \n+\n+/* Assign a typedef-given name to a class or enumeration type declared\n+   as anonymous at first.  This was split out of grokdeclarator\n+   because it is also used in libcc1.  */\n+\n+void\n+name_unnamed_type (tree type, tree decl)\n+{\n+  gcc_assert (TYPE_UNNAMED_P (type));\n+\n+  /* Replace the anonymous name with the real name everywhere.  */\n+  for (tree t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n+    {\n+      if (anon_aggrname_p (TYPE_IDENTIFIER (t)))\n+\t/* We do not rename the debug info representing the\n+\t   unnamed tagged type because the standard says in\n+\t   [dcl.typedef] that the naming applies only for\n+\t   linkage purposes.  */\n+\t/*debug_hooks->set_name (t, decl);*/\n+\tTYPE_NAME (t) = decl;\n+    }\n+\n+  if (TYPE_LANG_SPECIFIC (type))\n+    TYPE_WAS_UNNAMED (type) = 1;\n+\n+  /* If this is a typedef within a template class, the nested\n+     type is a (non-primary) template.  The name for the\n+     template needs updating as well.  */\n+  if (TYPE_LANG_SPECIFIC (type) && CLASSTYPE_TEMPLATE_INFO (type))\n+    DECL_NAME (CLASSTYPE_TI_TEMPLATE (type))\n+      = TYPE_IDENTIFIER (type);\n+\n+  /* Adjust linkage now that we aren't unnamed anymore.  */\n+  reset_type_linkage (type);\n+\n+  /* FIXME remangle member functions; member functions of a\n+     type with external linkage have external linkage.  */\n+\n+  /* Check that our job is done, and that it would fail if we\n+     attempted to do it again.  */\n+  gcc_assert (!TYPE_UNNAMED_P (type));\n+}\n+\n /* Given declspecs and a declarator (abstract or otherwise), determine\n    the name and type of the object declared and construct a DECL node\n    for it.\n@@ -11576,37 +11619,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  && declspecs->type_definition_p\n \t  && attributes_naming_typedef_ok (*attrlist)\n \t  && cp_type_quals (type) == TYPE_UNQUALIFIED)\n-\t{\n-\t  tree t;\n-\n-\t  /* Replace the anonymous name with the real name everywhere.  */\n-\t  for (t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n-\t    {\n-\t      if (anon_aggrname_p (TYPE_IDENTIFIER (t)))\n-\t\t/* We do not rename the debug info representing the\n-\t\t   unnamed tagged type because the standard says in\n-\t\t   [dcl.typedef] that the naming applies only for\n-\t\t   linkage purposes.  */\n-\t\t/*debug_hooks->set_name (t, decl);*/\n-\t\tTYPE_NAME (t) = decl;\n-  \t    }\n-\n-\t  if (TYPE_LANG_SPECIFIC (type))\n-\t    TYPE_WAS_UNNAMED (type) = 1;\n-\n-\t  /* If this is a typedef within a template class, the nested\n-\t     type is a (non-primary) template.  The name for the\n-\t     template needs updating as well.  */\n-\t  if (TYPE_LANG_SPECIFIC (type) && CLASSTYPE_TEMPLATE_INFO (type))\n-\t    DECL_NAME (CLASSTYPE_TI_TEMPLATE (type))\n-\t      = TYPE_IDENTIFIER (type);\n-\n-\t  /* Adjust linkage now that we aren't unnamed anymore.  */\n-\t  reset_type_linkage (type);\n-\n-\t  /* FIXME remangle member functions; member functions of a\n-\t     type with external linkage have external linkage.  */\n-\t}\n+\tname_unnamed_type (type, decl);\n \n       if (signed_p\n \t  || (typedef_decl && C_TYPEDEF_EXPLICITLY_SIGNED (typedef_decl)))"}, {"sha": "d84d90c82d2369d016dc0bd7ae4d9cbb29308dc0", "filename": "gcc/cp/decl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e072b0c410818178beda7e3da622d7ff29d0c3be/gcc%2Fcp%2Fdecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e072b0c410818178beda7e3da622d7ff29d0c3be/gcc%2Fcp%2Fdecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.h?ref=e072b0c410818178beda7e3da622d7ff29d0c3be", "patch": "@@ -35,6 +35,7 @@ enum decl_context\n extern tree grokdeclarator (const cp_declarator *,\n \t\t\t    cp_decl_specifier_seq *,\n \t\t\t    enum decl_context, int, tree*);\n+extern void name_unnamed_type (tree, tree);\n \n /* States indicating how grokdeclarator() should handle declspecs marked\n    with __attribute__((deprecated)).  An object declared as"}, {"sha": "a6b9985e4ab56a30571ed0696c8a9b71672cd3ad", "filename": "libcc1/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e072b0c410818178beda7e3da622d7ff29d0c3be/libcc1%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e072b0c410818178beda7e3da622d7ff29d0c3be/libcc1%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2FChangeLog?ref=e072b0c410818178beda7e3da622d7ff29d0c3be", "patch": "@@ -1,3 +1,7 @@\n+2017-04-15  Alexandre Oliva <aoliva@redhat.com>\n+\n+\t* libcp1plugin.cc (plugin_build_decl): Call name_unnamed_type.\n+\n 2017-01-30  Alexandre Oliva <aoliva@redhat.com>\n \n \tIntroduce C++ support."}, {"sha": "2464aa2f39d4fc8c6e406c19770f7cb0eb48e62e", "filename": "libcc1/libcp1plugin.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e072b0c410818178beda7e3da622d7ff29d0c3be/libcc1%2Flibcp1plugin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e072b0c410818178beda7e3da622d7ff29d0c3be/libcc1%2Flibcp1plugin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Flibcp1plugin.cc?ref=e072b0c410818178beda7e3da622d7ff29d0c3be", "patch": "@@ -1494,6 +1494,15 @@ plugin_build_decl (cc1_plugin::connection *self,\n \n   set_access_flags (decl, acc_flags);\n \n+  /* If this is the typedef that names an otherwise anonymous type,\n+     propagate the typedef name to the type.  In normal compilation,\n+     this is done in grokdeclarator.  */\n+  if (sym_kind == GCC_CP_SYMBOL_TYPEDEF\n+      && !template_decl_p\n+      && DECL_CONTEXT (decl) == TYPE_CONTEXT (sym_type)\n+      && TYPE_UNNAMED_P (sym_type))\n+    name_unnamed_type (sym_type, decl);\n+\n   if (sym_kind != GCC_CP_SYMBOL_TYPEDEF\n       && sym_kind != GCC_CP_SYMBOL_CLASS\n       && sym_kind != GCC_CP_SYMBOL_UNION"}]}