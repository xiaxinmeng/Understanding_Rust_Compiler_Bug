{"sha": "d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE5ZTk0OTlmYzRmN2NmMWJiY2M0OGE4Yzc5NDdkNTgxODgyN2E3Zg==", "commit": {"author": {"name": "Daniel Berlin", "email": "dberlin@dberlin.org", "date": "2005-03-30T22:10:47Z"}, "committer": {"name": "Daniel Berlin", "email": "dberlin@gcc.gnu.org", "date": "2005-03-30T22:10:47Z"}, "message": "tree-ssa-alias.c (compute_flow_insensitive_aliasing): Make sure subvars get marked properly in tags for grouping.\n\n2005-03-30  Daniel Berlin  <dberlin@dberlin.org>\n\n\t* tree-ssa-alias.c (compute_flow_insensitive_aliasing): Make sure\n\tsubvars get marked properly in tags for grouping.\n\t(add_pointed_to_var): Mark only actual pointed to\n\tvariables/subvars in addresses needed.\n\t(create_overlap_variables_for): Clear call clobbered on original\n\tvariable.\n\t* tree-ssa-operands.c (get_asm_expr_operands): Don't let regular\n\taddresable vars with subvars into list.\n\t* tree-ssa.c (verify_ssa_name): Verify original is not used where\n\tsubvar should be.\n\nFrom-SVN: r97285", "tree": {"sha": "f6eaaa98001b2da1eb839c4603dc4bf351b73e15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6eaaa98001b2da1eb839c4603dc4bf351b73e15"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f/comments", "author": {"login": "dberlin", "id": 324715, "node_id": "MDQ6VXNlcjMyNDcxNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/324715?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dberlin", "html_url": "https://github.com/dberlin", "followers_url": "https://api.github.com/users/dberlin/followers", "following_url": "https://api.github.com/users/dberlin/following{/other_user}", "gists_url": "https://api.github.com/users/dberlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/dberlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dberlin/subscriptions", "organizations_url": "https://api.github.com/users/dberlin/orgs", "repos_url": "https://api.github.com/users/dberlin/repos", "events_url": "https://api.github.com/users/dberlin/events{/privacy}", "received_events_url": "https://api.github.com/users/dberlin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "12527dcee33276926ce75f6117544205982291e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12527dcee33276926ce75f6117544205982291e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12527dcee33276926ce75f6117544205982291e9"}], "stats": {"total": 72, "additions": 62, "deletions": 10}, "files": [{"sha": "9fac180b8e7e430b51c192b43512dda4238b3e40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f", "patch": "@@ -1,3 +1,16 @@\n+2005-03-30  Daniel Berlin  <dberlin@dberlin.org>\n+\n+\t* tree-ssa-alias.c (compute_flow_insensitive_aliasing): Make sure\n+\tsubvars get marked properly in tags for grouping.\n+\t(add_pointed_to_var): Mark only actual pointed to\n+\tvariables/subvars in addresses needed.\n+\t(create_overlap_variables_for): Clear call clobbered on original\n+\tvariable.\n+\t* tree-ssa-operands.c (get_asm_expr_operands): Don't let regular\n+\taddresable vars with subvars into list.\n+\t* tree-ssa.c (verify_ssa_name): Verify original is not used where\n+\tsubvar should be.\n+\n 2005-03-30  Richard Henderson  <rth@redhat.com>\n \n \t* cgraph.h (struct cgraph_node): Add alias."}, {"sha": "c08cf3b1bfa1125aadb8d4820b23fca829d6a88b", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 31, "deletions": 10, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f", "patch": "@@ -1006,11 +1006,19 @@ compute_flow_insensitive_aliasing (struct alias_info *ai)\n \t\t  subvar_t sv;\n \n \t\t  for (sv = svars; sv; sv = sv->next)\n-\t\t    add_may_alias (tag, sv->var);\n+\t\t    {\n+\t\t      add_may_alias (tag, sv->var);\n+\t\t      /* Update the bitmap used to represent TAG's alias set\n+\t\t\t in case we need to group aliases.  */\n+\t\t      SET_BIT (p_map->may_aliases, var_ann (sv->var)->uid);\n+\t\t    }\n \t\t}\n \t      else\n \t\t{\n \t\t  add_may_alias (tag, var);\n+\t\t  /* Update the bitmap used to represent TAG's alias set\n+\t\t     in case we need to group aliases.  */\n+\t\t  SET_BIT (p_map->may_aliases, var_ann (var)->uid);\n \t\t}\n \n \t      /* Update the total number of virtual operands due to\n@@ -1022,9 +1030,7 @@ compute_flow_insensitive_aliasing (struct alias_info *ai)\n \t      ai->total_alias_vops += (num_var_refs + num_tag_refs);\n \t      p_map->total_alias_vops += (num_var_refs + num_tag_refs);\n \n-\t      /* Update the bitmap used to represent TAG's alias set\n-\t\t in case we need to group aliases.  */\n-\t      SET_BIT (p_map->may_aliases, var_ann (var)->uid);\n+\n \t    }\n \t}\n     }\n@@ -1982,7 +1988,7 @@ add_pointed_to_var (struct alias_info *ai, tree ptr, tree value)\n       svars = get_subvars_for_var (ref);\n \n       uid = var_ann (pt_var)->uid;\n-      bitmap_set_bit (ai->addresses_needed, uid);\n+      \n       if (pi->pt_vars == NULL)\n \tpi->pt_vars = BITMAP_GGC_ALLOC ();\n        /* If the variable is a global, mark the pointer as pointing to\n@@ -1993,15 +1999,17 @@ add_pointed_to_var (struct alias_info *ai, tree ptr, tree value)\n       for (sv = svars; sv; sv = sv->next)\n \t{\n \t  if (overlap_subvar (offset, size, sv, NULL))\n-\t    bitmap_set_bit (pi->pt_vars, var_ann (sv->var)->uid);\n+\t    {\n+\t      bitmap_set_bit (pi->pt_vars, var_ann (sv->var)->uid);\n+\t      bitmap_set_bit (ai->addresses_needed, var_ann (sv->var)->uid);\n+\t    }\n \t}\n     }\n   else if (pt_var && SSA_VAR_P (pt_var))\n     {\n     \n       uid = var_ann (pt_var)->uid;\n-      bitmap_set_bit (ai->addresses_needed, uid);\n-\n+      \n       if (pi->pt_vars == NULL)\n \tpi->pt_vars = BITMAP_GGC_ALLOC ();\n \n@@ -2019,7 +2027,10 @@ add_pointed_to_var (struct alias_info *ai, tree ptr, tree value)\n \t    }\n \t}\n       else\t\n-\tbitmap_set_bit (pi->pt_vars, uid);\t  \n+\t{\n+\t  bitmap_set_bit (ai->addresses_needed, uid);\n+\t  bitmap_set_bit (pi->pt_vars, uid);\t  \n+\t}\n \n       /* If the variable is a global, mark the pointer as pointing to\n \t global memory (which will make its tag a global variable).  */\n@@ -2894,8 +2905,18 @@ create_overlap_variables_for (tree var)\n \t  *subvars = sv;\n \t  free (fo);\n \t}\n+\n+      /* Once we have created subvars, the original is no longer call\n+\t clobbered on its own.  Its call clobbered status depends\n+\t completely on the call clobbered status of the subvars.\n+\n+\t add_referenced_var in the above loop will take care of\n+\t marking subvars of global variables as call clobbered for us\n+\t to start, since they are global as well.  */\n+      clear_call_clobbered (var);\n+\n     }\n-  \n+\n   VEC_free (fieldoff_t, fieldstack);\n }\n "}, {"sha": "916814dc4deac28dd1cec14de07b2ff2acc5b55b", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f", "patch": "@@ -1370,6 +1370,17 @@ get_asm_expr_operands (tree stmt)\n \tEXECUTE_IF_SET_IN_BITMAP (addressable_vars, 0, i, bi)\n \t    {\n \t      tree var = referenced_var (i);\n+\n+\t      /* Subvars are explicitly represented in this list, so\n+\t\t we don't need the original to be added to the clobber\n+\t\t ops, but the original *will* be in this list because \n+\t\t we keep the addressability of the original\n+\t\t variable up-to-date so we don't screw up the rest of\n+\t\t the backend.  */\n+\t      if (var_can_have_subvars (var)\n+\t\t  && get_subvars_for_var (var) != NULL)\n+\t\tcontinue;\t\t\n+\n \t      add_stmt_operand (&var, s_ann, opf_is_def);\n \t    }\n "}, {"sha": "899594db2228a972654967c33b24db442d8e200f", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=d19e9499fc4f7cf1bbcc48a8c7947d5818827a7f", "patch": "@@ -136,6 +136,13 @@ verify_ssa_name (tree ssa_name, bool is_virtual)\n       return true;\n     }\n \n+  if (is_virtual && var_ann (SSA_NAME_VAR (ssa_name)) \n+      && get_subvars_for_var (SSA_NAME_VAR (ssa_name)) != NULL)\n+    {\n+      error (\"Found real variable when subvariables should have appeared\");\n+      return true;\n+    }\n+\n   return false;\n }\n "}]}