{"sha": "14d11d4097091e8abaa63866f8cc0903f581c82a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRkMTFkNDA5NzA5MWU4YWJhYTYzODY2ZjhjYzA5MDNmNTgxYzgyYQ==", "commit": {"author": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-01-07T13:57:45Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2011-01-07T13:57:45Z"}, "message": "allow the target to label code fragments generated by partitioning.\n\n\t* target.def (function_switched_text_sections): New Hook.\n\t* doc/tm.texi Regenerated.\n\t* doc/tm.texi.in (TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS)\n\tNew.\n\t* final.c (default_function_switched_text_sections): New.\n\t(final_scan_insn): Call function_switched_text_sections when a mid-function section\n\tchange occurs.\n\t* output.h (default_function_switched_text_sections): Declare.\n\t* config/darwin-protos.h (darwin_function_switched_text_sections) : Likewise.\n\t* config/darwin.c (darwin_function_switched_text_sections): New.\n\t* config/darwin.h (TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS)\n\tNew.\n\nFrom-SVN: r168571", "tree": {"sha": "cf51df2cf5cae2810e51692d844e2d9afa6b187f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf51df2cf5cae2810e51692d844e2d9afa6b187f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14d11d4097091e8abaa63866f8cc0903f581c82a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14d11d4097091e8abaa63866f8cc0903f581c82a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14d11d4097091e8abaa63866f8cc0903f581c82a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14d11d4097091e8abaa63866f8cc0903f581c82a/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b764288f97fbb0f33b42c66ebffc061ba59cb7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b764288f97fbb0f33b42c66ebffc061ba59cb7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b764288f97fbb0f33b42c66ebffc061ba59cb7d"}], "stats": {"total": 101, "additions": 75, "deletions": 26}, "files": [{"sha": "54c14cc9236c8e3be7603583d6f295c7121d0b6f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14d11d4097091e8abaa63866f8cc0903f581c82a", "patch": "@@ -1,3 +1,18 @@\n+2011-01-07  Iain Sandoe  <iains@gcc.gnu.org>\n+\n+\t* target.def (function_switched_text_sections): New Hook.\n+\t* doc/tm.texi Regenerated.\n+\t* doc/tm.texi.in (TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS)\n+\tNew.\n+\t* final.c (default_function_switched_text_sections): New.\n+\t(final_scan_insn): Call function_switched_text_sections when a mid-function section\n+\tchange occurs.\n+\t* output.h (default_function_switched_text_sections): Declare.\n+\t* config/darwin-protos.h (darwin_function_switched_text_sections) : Likewise.\n+\t* config/darwin.c (darwin_function_switched_text_sections): New.\n+\t* config/darwin.h (TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS)\n+\tNew.\n+\n 2011-01-07  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* dwarf2out.c (gen_subprogram_die):  Add pubnames with code ranges for"}, {"sha": "bf81ed97c4c137c77a64c06d8d4dcea61d87c928", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=14d11d4097091e8abaa63866f8cc0903f581c82a", "patch": "@@ -58,6 +58,8 @@ extern section *machopic_select_rtx_section (enum machine_mode, rtx,\n \t\t\t\t\t     unsigned HOST_WIDE_INT);\n \n extern section *darwin_function_section (tree, enum node_frequency, bool, bool); \n+extern void darwin_function_switched_text_sections (FILE *, tree, bool);\n+\n extern void darwin_unique_section (tree decl, int reloc);\n extern void darwin_asm_named_section (const char *, unsigned int, tree);\n extern void darwin_non_lazy_pcrel (FILE *, rtx);"}, {"sha": "5560bf913fb3e7df0401bd1b9ee7e3d6e6056f5e", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 24, "deletions": 26, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=14d11d4097091e8abaa63866f8cc0903f581c82a", "patch": "@@ -2572,32 +2572,20 @@ darwin_override_options (void)\n   if (!global_options_set.x_dwarf_strict) \n     dwarf_strict = 1;\n \n-  /* FIXME: Darwin cannot support multiple function sections until (a) the new code\n-     atoms created have a proper start label and (b) there are suitable pubnames \n-     emitted.  This applies to all current Darwin versions (OSX <= 10.6.5).  */\n-  if (global_options.x_flag_reorder_blocks_and_partition)\n-    {\n-      inform (input_location,\n-\t      \"-freorder-blocks-and-partition is currently disabled for this \"\n-\t      \"platform\");\n-      flag_reorder_blocks_and_partition = 0;\n-      flag_reorder_blocks = 1;\n-    }\n-\n   /* Do not allow unwind tables to be generated by default for m32.  \n      fnon-call-exceptions will override this, regardless of what we do.  */\n   if (generating_for_darwin_version < 10\n       && !global_options_set.x_flag_asynchronous_unwind_tables\n       && !TARGET_64BIT)\n     global_options.x_flag_asynchronous_unwind_tables = 0;\n \n-  /* Disable -freorder-blocks-and-partition when unwind tables are being emitted\n-     for Darwin < 10 (OSX 10.6).  \n-     The strategy is, \"Unless the User has specifically set/unset an unwind flag\n-     we will switch off -freorder-blocks-and-partition when unwind tables will be\n-     generated\".  If the User specifically sets flags... we assume (s)he knows\n-     why...  */\n-   if (generating_for_darwin_version < 10\n+   /* Disable -freorder-blocks-and-partition when unwind tables are being emitted\n+      for Darwin < 10 (OSX 10.6).  \n+      The strategy is, \"Unless the User has specifically set/unset an unwind flag\n+      we will switch off -freorder-blocks-and-partition when unwind tables will be\n+      generated\".  If the User specifically sets flags... we assume (s)he knows\n+      why...  */\n+   if (generating_for_darwin_version < 9\n        && global_options_set.x_flag_reorder_blocks_and_partition\n        && ((global_options.x_flag_exceptions \t\t/* User, c++, java */\n \t    && !global_options_set.x_flag_exceptions) \t/* User specified... */\n@@ -2607,13 +2595,6 @@ darwin_override_options (void)\n \t\t&& !global_options_set.x_flag_non_call_exceptions)\n \t   || (global_options.x_flag_asynchronous_unwind_tables\n \t\t&& !global_options_set.x_flag_asynchronous_unwind_tables)))\n-    {\n-      inform (input_location,\n-\t      \"-freorder-blocks-and-partition does not work with exceptions \"\n-\t      \"on this architecture\");\n-      flag_reorder_blocks_and_partition = 0;\n-      flag_reorder_blocks = 1;\n-    }\n \n   if (flag_mkernel || flag_apple_kext)\n     {\n@@ -3066,4 +3047,21 @@ darwin_function_section (tree decl, enum node_frequency freq,\n     }\n }\n \n+/* When a function is partitioned between sections, we need to insert a label\n+   at the start of each new chunk - so that it may become a valid 'atom' for\n+   eh and debug purposes.  Without this the linker will emit warnings if one \n+   tries to add line location information (since the switched fragment will \n+   be anonymous).  */\n+\n+void\n+darwin_function_switched_text_sections (FILE *fp, tree decl, bool new_is_cold)\n+{\n+  char buf[128];\n+  snprintf (buf, 128, \"%s%s\",new_is_cold?\"__cold_sect_of_\":\"__hot_sect_of_\",\n+\t    IDENTIFIER_POINTER (DECL_NAME (decl)));\n+  /* Make sure we pick up all the relevant quotes etc.  */\n+  assemble_name_raw (fp, (const char *) buf);\n+  fputs (\":\\n\", fp);\n+}\n+\n #include \"gt-darwin.h\""}, {"sha": "74ced9c31ca8bb4c87c8cff25ad18cb648e1eaee", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=14d11d4097091e8abaa63866f8cc0903f581c82a", "patch": "@@ -673,6 +673,10 @@ extern GTY(()) section * darwin_sections[NUM_DARWIN_SECTIONS];\n #undef\tTARGET_ASM_FUNCTION_SECTION\n #define TARGET_ASM_FUNCTION_SECTION darwin_function_section\n \n+#undef\tTARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS\n+#define TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS \\\n+\tdarwin_function_switched_text_sections\n+\n #undef\tTARGET_ASM_SELECT_RTX_SECTION\n #define TARGET_ASM_SELECT_RTX_SECTION machopic_select_rtx_section\n #undef  TARGET_ASM_UNIQUE_SECTION"}, {"sha": "139c5a7374cb9cd8703d4b964f63090ed414464c", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=14d11d4097091e8abaa63866f8cc0903f581c82a", "patch": "@@ -7325,6 +7325,10 @@ at startup (from static constructors or it is @code{main()}).\n Return NULL if function should go to default text section.\n @end deftypefn\n \n+@deftypefn {Target Hook} void TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS (FILE *@var{file}, tree @var{decl}, bool @var{new_is_cold})\n+Used by the target to emit any assembler directives or additional  labels needed when a function is partitioned between different  sections.  Output should be written to @var{file}.  The function  decl is available as @var{decl} and the new section is `cold' if  @var{new_is_cold} is @code{true}.\n+@end deftypefn\n+\n @deftypevr {Target Hook} bool TARGET_HAVE_NAMED_SECTIONS\n This flag is true if the target supports @code{TARGET_ASM_NAMED_SECTION}.\n It must not be modified by command-line option processing."}, {"sha": "208581645bcdd6d97d9aaf7b800ddfd754558899", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=14d11d4097091e8abaa63866f8cc0903f581c82a", "patch": "@@ -7298,6 +7298,8 @@ at startup (from static constructors or it is @code{main()}).\n Return NULL if function should go to default text section.\n @end deftypefn\n \n+@hook TARGET_ASM_FUNCTION_SWITCHED_TEXT_SECTIONS\n+\n @hook TARGET_HAVE_NAMED_SECTIONS\n This flag is true if the target supports @code{TARGET_ASM_NAMED_SECTION}.\n It must not be modified by command-line option processing."}, {"sha": "09dec08e0eabe4fa30f6152df84d0a98a78c4e42", "filename": "gcc/final.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=14d11d4097091e8abaa63866f8cc0903f581c82a", "patch": "@@ -256,6 +256,13 @@ default_function_pro_epilogue (FILE *file ATTRIBUTE_UNUSED,\n {\n }\n \n+void\n+default_function_switched_text_sections (FILE *file ATTRIBUTE_UNUSED,\n+\t\t\t\t\t tree decl ATTRIBUTE_UNUSED,\n+\t\t\t\t\t bool new_is_cold ATTRIBUTE_UNUSED)\n+{\n+}\n+\n /* Default target hook that outputs nothing to a stream.  */\n void\n no_asm_to_stream (FILE *file ATTRIBUTE_UNUSED)\n@@ -1841,6 +1848,9 @@ final_scan_insn (rtx insn, FILE *file, int optimize_p ATTRIBUTE_UNUSED,\n \t    debug_hooks->switch_text_section ();\n \n \t  switch_to_section (current_function_section ());\n+\t  targetm.asm_out.function_switched_text_sections (asm_out_file,\n+\t\t\t\t\t\t\t   current_function_decl,\n+\t\t\t\t\t\t\t   in_cold_section_p);\n \t  break;\n \n \tcase NOTE_INSN_BASIC_BLOCK:"}, {"sha": "39225a3a6cc10730f19060fa043b101143119ccd", "filename": "gcc/output.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Foutput.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Foutput.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foutput.h?ref=14d11d4097091e8abaa63866f8cc0903f581c82a", "patch": "@@ -417,6 +417,9 @@ extern const char *user_label_prefix;\n /* Default target function prologue and epilogue assembler output.  */\n extern void default_function_pro_epilogue (FILE *, HOST_WIDE_INT);\n \n+/* Default target function switched text sections.  */\n+extern void default_function_switched_text_sections (FILE *, tree, bool);\n+\n /* Default target hook that outputs nothing to a stream.  */\n extern void no_asm_to_stream (FILE *);\n "}, {"sha": "9d96e65e537d7f2546127cd1083b4441d3b8ac9f", "filename": "gcc/target.def", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Ftarget.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14d11d4097091e8abaa63866f8cc0903f581c82a/gcc%2Ftarget.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.def?ref=14d11d4097091e8abaa63866f8cc0903f581c82a", "patch": "@@ -294,6 +294,17 @@ DEFHOOK\n  section *, (tree decl, enum node_frequency freq, bool startup, bool exit),\n  default_function_section)\n \n+/* Output the assembler code for function exit.  */\n+DEFHOOK\n+(function_switched_text_sections,\n+ \"Used by the target to emit any assembler directives or additional\\\n+  labels needed when a function is partitioned between different\\\n+  sections.  Output should be written to @var{file}.  The function\\\n+  decl is available as @var{decl} and the new section is `cold' if\\\n+  @var{new_is_cold} is @code{true}.\",\n+ void, (FILE *file, tree decl, bool new_is_cold),\n+ default_function_switched_text_sections)\n+\n /* Return a mask describing how relocations should be treated when\n    selecting sections.  Bit 1 should be set if global relocations\n    should be placed in a read-write section; bit 0 should be set if"}]}