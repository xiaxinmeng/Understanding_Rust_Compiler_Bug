{"sha": "01ffa370154d0d553874a5fa4e8e54852a8b93e7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDFmZmEzNzAxNTRkMGQ1NTM4NzRhNWZhNGU4ZTU0ODUyYThiOTNlNw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2007-01-25T04:15:26Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2007-01-25T04:15:26Z"}, "message": "re PR middle-end/30447 (Evaluate complex math functions at compile-time)\n\n\tPR middle-end/30447\n\t* builtins.c (fold_builtin_cabs): Use MPFR to evaluate a\n\tconstant argument to cabs and do it without checking for\n\t-funsafe-math-optimizations.\n\nFrom-SVN: r121163", "tree": {"sha": "d9f25c626dbbd015348068c552bd651f441b5dc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9f25c626dbbd015348068c552bd651f441b5dc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/01ffa370154d0d553874a5fa4e8e54852a8b93e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ffa370154d0d553874a5fa4e8e54852a8b93e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01ffa370154d0d553874a5fa4e8e54852a8b93e7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01ffa370154d0d553874a5fa4e8e54852a8b93e7/comments", "author": null, "committer": null, "parents": [{"sha": "e1f1ee86a8b97bdf12593c02c0ef6e286f2c795d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1f1ee86a8b97bdf12593c02c0ef6e286f2c795d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1f1ee86a8b97bdf12593c02c0ef6e286f2c795d"}], "stats": {"total": 36, "additions": 14, "deletions": 22}, "files": [{"sha": "d8f1cddc59cf46b6b283d6d1071bfc183066333c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ffa370154d0d553874a5fa4e8e54852a8b93e7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ffa370154d0d553874a5fa4e8e54852a8b93e7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=01ffa370154d0d553874a5fa4e8e54852a8b93e7", "patch": "@@ -1,3 +1,10 @@\n+2007-01-24  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\tPR middle-end/30447\n+\t* builtins.c (fold_builtin_cabs): Use MPFR to evaluate a\n+\tconstant argument to cabs and do it without checking for\n+\t-funsafe-math-optimizations.\n+\n 2007-01-24  Douglas Gregor  <dgregor@osl.iu.edu>\n \n \t* c-common.h (RID_FIRST_CXX0X): New."}, {"sha": "c33cdf13979ce2435936cce8611927727e0d6740", "filename": "gcc/builtins.c", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/01ffa370154d0d553874a5fa4e8e54852a8b93e7/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/01ffa370154d0d553874a5fa4e8e54852a8b93e7/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=01ffa370154d0d553874a5fa4e8e54852a8b93e7", "patch": "@@ -7021,7 +7021,7 @@ fold_fixed_mathfn (tree fndecl, tree arglist)\n static tree\n fold_builtin_cabs (tree arglist, tree type, tree fndecl)\n {\n-  tree arg;\n+  tree arg, res;\n \n   if (!arglist || TREE_CHAIN (arglist))\n     return NULL_TREE;\n@@ -7031,27 +7031,12 @@ fold_builtin_cabs (tree arglist, tree type, tree fndecl)\n       || TREE_CODE (TREE_TYPE (TREE_TYPE (arg))) != REAL_TYPE)\n     return NULL_TREE;\n \n-  /* Evaluate cabs of a constant at compile-time.  */\n-  if (flag_unsafe_math_optimizations\n-      && TREE_CODE (arg) == COMPLEX_CST\n-      && TREE_CODE (TREE_REALPART (arg)) == REAL_CST\n-      && TREE_CODE (TREE_IMAGPART (arg)) == REAL_CST\n-      && !TREE_OVERFLOW (TREE_REALPART (arg))\n-      && !TREE_OVERFLOW (TREE_IMAGPART (arg)))\n-    {\n-      REAL_VALUE_TYPE r, i;\n-\n-      r = TREE_REAL_CST (TREE_REALPART (arg));\n-      i = TREE_REAL_CST (TREE_IMAGPART (arg));\n-\n-      real_arithmetic (&r, MULT_EXPR, &r, &r);\n-      real_arithmetic (&i, MULT_EXPR, &i, &i);\n-      real_arithmetic (&r, PLUS_EXPR, &r, &i);\n-      if (real_sqrt (&r, TYPE_MODE (type), &r)\n-\t  || ! flag_trapping_math)\n-\treturn build_real (type, r);\n-    }\n-\n+  /* Calculate the result when the argument is a constant.  */\n+  if (TREE_CODE (arg) == COMPLEX_CST\n+      && (res = do_mpfr_arg2 (TREE_REALPART (arg), TREE_IMAGPART (arg),\n+\t\t\t      type, mpfr_hypot)))\n+    return res;\n+  \n   /* If either part is zero, cabs is fabs of the other.  */\n   if (TREE_CODE (arg) == COMPLEX_EXPR\n       && real_zerop (TREE_OPERAND (arg, 0)))"}]}