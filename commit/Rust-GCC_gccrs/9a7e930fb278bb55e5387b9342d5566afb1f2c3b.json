{"sha": "9a7e930fb278bb55e5387b9342d5566afb1f2c3b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE3ZTkzMGZiMjc4YmI1NWU1Mzg3YjkzNDJkNTU2NmFmYjFmMmMzYg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-22T08:49:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-12-22T08:49:14Z"}, "message": "[multiple changes]\n\n2011-12-22  Vincent Pucci  <pucci@adacore.com>\n\n\t* sem_dim.adb: Addressed all ??? comments. Replacement of warnings by\n\terrors using continuation marks.\n\t(Error_Dim_Msg_For_?): Renaming of Error_Dim_For_?.\n\n2011-12-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch3.adb, sem_ch3.ads, sem_prag.adb: Minor code clean up.\n\nFrom-SVN: r182616", "tree": {"sha": "c5e4c37ce3de7ff65afc6f01b922a4a62e4bee02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5e4c37ce3de7ff65afc6f01b922a4a62e4bee02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a7e930fb278bb55e5387b9342d5566afb1f2c3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7e930fb278bb55e5387b9342d5566afb1f2c3b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a7e930fb278bb55e5387b9342d5566afb1f2c3b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a7e930fb278bb55e5387b9342d5566afb1f2c3b/comments", "author": null, "committer": null, "parents": [{"sha": "868df137e65ba607dd4bdc627ed2a72b35663024", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/868df137e65ba607dd4bdc627ed2a72b35663024", "html_url": "https://github.com/Rust-GCC/gccrs/commit/868df137e65ba607dd4bdc627ed2a72b35663024"}], "stats": {"total": 316, "additions": 167, "deletions": 149}, "files": [{"sha": "5780f4c6db8b3852fc221c60a4328a0732b85bdf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7e930fb278bb55e5387b9342d5566afb1f2c3b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7e930fb278bb55e5387b9342d5566afb1f2c3b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9a7e930fb278bb55e5387b9342d5566afb1f2c3b", "patch": "@@ -1,3 +1,13 @@\n+2011-12-22  Vincent Pucci  <pucci@adacore.com>\n+\n+\t* sem_dim.adb: Addressed all ??? comments. Replacement of warnings by\n+\terrors using continuation marks.\n+\t(Error_Dim_Msg_For_?): Renaming of Error_Dim_For_?.\n+\n+2011-12-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch3.adb, sem_ch3.ads, sem_prag.adb: Minor code clean up.\n+\n 2011-12-21  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n \n \t* s-oscons-tmplt.c [__alpha__ && __osf__] (_XOPEN_SOURCE): Define."}, {"sha": "662f7e132d2c98663d574b37e3f16c165fd56c7c", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7e930fb278bb55e5387b9342d5566afb1f2c3b/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7e930fb278bb55e5387b9342d5566afb1f2c3b/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=9a7e930fb278bb55e5387b9342d5566afb1f2c3b", "patch": "@@ -9640,37 +9640,39 @@ package body Sem_Ch3 is\n       end loop;\n    end Check_Completion;\n \n-   --------------------\n-   -- Check_CPP_Type --\n-   --------------------\n+   ------------------------------------\n+   -- Check_CPP_Type_Has_No_Defaults --\n+   ------------------------------------\n \n-   procedure Check_CPP_Type (T : Entity_Id) is\n+   procedure Check_CPP_Type_Has_No_Defaults (T : Entity_Id) is\n       Tdef  : constant Node_Id := Type_Definition (Declaration_Node (T));\n       Clist : Node_Id;\n       Comp  : Node_Id;\n \n    begin\n+      --  Obtain the component list\n+\n       if Nkind (Tdef) = N_Record_Definition then\n          Clist := Component_List (Tdef);\n-\n-      else\n-         pragma Assert (Nkind (Tdef) = N_Derived_Type_Definition);\n+      else pragma Assert (Nkind (Tdef) = N_Derived_Type_Definition);\n          Clist := Component_List (Record_Extension_Part (Tdef));\n       end if;\n \n+      --  Check all components to ensure no default expressions\n+\n       if Present (Clist) then\n          Comp := First (Component_Items (Clist));\n          while Present (Comp) loop\n             if Present (Expression (Comp)) then\n                Error_Msg_N\n-                 (\"component of imported 'C'P'P type cannot have\" &\n-                    \" default expression\", Expression (Comp));\n+                 (\"component of imported 'C'P'P type cannot have \"\n+                  & \"default expression\", Expression (Comp));\n             end if;\n \n             Next (Comp);\n          end loop;\n       end if;\n-   end Check_CPP_Type;\n+   end Check_CPP_Type_Has_No_Defaults;\n \n    ----------------------------\n    -- Check_Delta_Expression --\n@@ -18130,7 +18132,7 @@ package body Sem_Ch3 is\n          --  Check that components of imported CPP types do not have default\n          --  expressions.\n \n-         Check_CPP_Type (Full_T);\n+         Check_CPP_Type_Has_No_Defaults (Full_T);\n       end if;\n \n       --  If the private view has user specified stream attributes, then so has"}, {"sha": "a57b65d7d6c63840d6ef76af0ec8f30e9f9a6e5a", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7e930fb278bb55e5387b9342d5566afb1f2c3b/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7e930fb278bb55e5387b9342d5566afb1f2c3b/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=9a7e930fb278bb55e5387b9342d5566afb1f2c3b", "patch": "@@ -115,7 +115,7 @@ package Sem_Ch3 is\n    --  and errors are posted on that node, rather than on the declarations that\n    --  require completion in the package declaration.\n \n-   procedure Check_CPP_Type (T : Entity_Id);\n+   procedure Check_CPP_Type_Has_No_Defaults (T : Entity_Id);\n    --  Check that components of imported CPP type T do not have default\n    --  expressions because the constructor (if any) is on the C++ side.\n "}, {"sha": "edb434396ab23ca8e8a00123d8bb110bc791878c", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 138, "deletions": 133, "changes": 271, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7e930fb278bb55e5387b9342d5566afb1f2c3b/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7e930fb278bb55e5387b9342d5566afb1f2c3b/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=9a7e930fb278bb55e5387b9342d5566afb1f2c3b", "patch": "@@ -258,7 +258,7 @@ package body Sem_Dim is\n    --  Subroutine of Analyze_Dimension for object declaration. Check that\n    --  the dimensions of the object type and the dimensions of the expression\n    --  (if expression is present) match. Note that when the expression is\n-   --  a literal, no warning is returned. This special case allows object\n+   --  a literal, no error is returned. This special case allows object\n    --  declaration such as: m : constant Length := 1.0;\n \n    procedure Analyze_Dimension_Object_Renaming_Declaration (N : Node_Id);\n@@ -274,7 +274,7 @@ package body Sem_Dim is\n    --  Subroutine of Analyze_Dimension for subtype declaration. Propagate the\n    --  dimensions from the parent type to the identifier of N. Note that if\n    --  both the identifier and the parent type of N are not dimensionless,\n-   --  return an error message.\n+   --  return an error.\n \n    procedure Analyze_Dimension_Unary_Op (N : Node_Id);\n    --  Subroutine of Analyze_Dimension for unary operators. For Plus, Minus and\n@@ -1035,26 +1035,33 @@ package body Sem_Dim is\n       Rhs         : constant Node_Id := Expression (N);\n       Dims_Of_Rhs : constant Dimension_Type := Dimensions_Of (Rhs);\n \n-      procedure Error_Dim_For_Assignment_Statement (N, Lhs, Rhs : Node_Id);\n-      --  Error using Error_Msg_N at node N. Output in the error message the\n-      --  dimensions of left and right hand sides.\n-\n-      ----------------------------------------\n-      -- Error_Dim_For_Assignment_Statement --\n-      ----------------------------------------\n-\n-      procedure Error_Dim_For_Assignment_Statement (N, Lhs, Rhs : Node_Id) is\n+      procedure Error_Dim_Msg_For_Assignment_Statement\n+        (N   : Node_Id;\n+         Lhs : Node_Id;\n+         Rhs : Node_Id);\n+      --  Error using Error_Msg_N at node N. Output the dimensions of left\n+      --  and right hand sides.\n+\n+      --------------------------------------------\n+      -- Error_Dim_Msg_For_Assignment_Statement --\n+      --------------------------------------------\n+\n+      procedure Error_Dim_Msg_For_Assignment_Statement\n+        (N   : Node_Id;\n+         Lhs : Node_Id;\n+         Rhs : Node_Id)\n+      is\n       begin\n-         Error_Msg_N (\"?dimensions mismatch in assignment\", N);\n-         Error_Msg_N (\"?left-hand side \" & Dimensions_Msg_Of (Lhs), N);\n-         Error_Msg_N (\"?right-hand side \" & Dimensions_Msg_Of (Rhs), N);\n-      end Error_Dim_For_Assignment_Statement;\n+         Error_Msg_N (\"dimensions mismatch in assignment\", N);\n+         Error_Msg_N (\"\\left-hand side \" & Dimensions_Msg_Of (Lhs), N);\n+         Error_Msg_N (\"\\right-hand side \" & Dimensions_Msg_Of (Rhs), N);\n+      end Error_Dim_Msg_For_Assignment_Statement;\n \n    --  Start of processing for Analyze_Dimension_Assignment\n \n    begin\n       if Dims_Of_Lhs /= Dims_Of_Rhs then\n-         Error_Dim_For_Assignment_Statement (N, Lhs, Rhs);\n+         Error_Dim_Msg_For_Assignment_Statement (N, Lhs, Rhs);\n       end if;\n    end Analyze_Dimension_Assignment_Statement;\n \n@@ -1068,23 +1075,23 @@ package body Sem_Dim is\n    procedure Analyze_Dimension_Binary_Op (N : Node_Id) is\n       N_Kind : constant Node_Kind := Nkind (N);\n \n-      procedure Error_Dim_For_Binary_Op (N, L, R : Node_Id);\n-      --  Error using Error_Msg_N at node N\n-      --  Output in the error message the dimensions of both operands.\n+      procedure Error_Dim_Msg_For_Binary_Op (N, L, R : Node_Id);\n+      --  Error using Error_Msg_NE and Error_Msg_N at node N. Output the\n+      --  dimensions of both operands.\n \n-      -----------------------------\n-      -- Error_Dim_For_Binary_Op --\n-      -----------------------------\n+      ---------------------------------\n+      -- Error_Dim_Msg_For_Binary_Op --\n+      ---------------------------------\n \n-      procedure Error_Dim_For_Binary_Op (N, L, R : Node_Id) is\n+      procedure Error_Dim_Msg_For_Binary_Op (N, L, R : Node_Id) is\n       begin\n-         Error_Msg_NE (\"?both operands for operation& must have same \" &\n+         Error_Msg_NE (\"both operands for operation& must have same \" &\n                        \"dimensions\",\n                        N,\n                        Entity (N));\n-         Error_Msg_N (\"?left operand \" & Dimensions_Msg_Of (L), N);\n-         Error_Msg_N (\"?right operand \" & Dimensions_Msg_Of (R), N);\n-      end Error_Dim_For_Binary_Op;\n+         Error_Msg_N (\"\\left operand \" & Dimensions_Msg_Of (L), N);\n+         Error_Msg_N (\"\\right operand \" & Dimensions_Msg_Of (R), N);\n+      end Error_Dim_Msg_For_Binary_Op;\n \n    --  Start of processing for Analyze_Dimension_Binary_Op\n \n@@ -1110,7 +1117,7 @@ package body Sem_Dim is\n                --  Check both operands have same dimension\n \n                if Dims_Of_L /= Dims_Of_R then\n-                  Error_Dim_For_Binary_Op (N, L, R);\n+                  Error_Dim_Msg_For_Binary_Op (N, L, R);\n                else\n                   --  Check both operands are not dimensionless\n \n@@ -1216,7 +1223,7 @@ package body Sem_Dim is\n                if (L_Has_Dimensions or R_Has_Dimensions)\n                  and then Dims_Of_L /= Dims_Of_R\n                then\n-                  Error_Dim_For_Binary_Op (N, L, R);\n+                  Error_Dim_Msg_For_Binary_Op (N, L, R);\n                end if;\n             end if;\n \n@@ -1239,26 +1246,26 @@ package body Sem_Dim is\n       Dims_Of_Etyp : constant Dimension_Type := Dimensions_Of (Etyp);\n       Dims_Of_Expr : Dimension_Type;\n \n-      procedure Error_Dim_For_Component_Declaration\n+      procedure Error_Dim_Msg_For_Component_Declaration\n         (N    : Node_Id;\n          Etyp : Entity_Id;\n          Expr : Node_Id);\n-      --  Error using Error_Msg_N at node N. Output in the error message the\n-      --  dimensions of the type Etyp and the expression Expr of N.\n+      --  Error using Error_Msg_N at node N. Output the dimensions of the\n+      --  type Etyp and the expression Expr of N.\n \n-      -----------------------------------------\n-      -- Error_Dim_For_Component_Declaration --\n-      -----------------------------------------\n+      ---------------------------------------------\n+      -- Error_Dim_Msg_For_Component_Declaration --\n+      ---------------------------------------------\n \n-      procedure Error_Dim_For_Component_Declaration\n+      procedure Error_Dim_Msg_For_Component_Declaration\n         (N    : Node_Id;\n          Etyp : Entity_Id;\n          Expr : Node_Id) is\n       begin\n-         Error_Msg_N (\"?dimensions mismatch in component declaration\", N);\n-         Error_Msg_N (\"\\?component type \" & Dimensions_Msg_Of (Etyp), N);\n-         Error_Msg_N (\"\\?component expression \" & Dimensions_Msg_Of (Expr), N);\n-      end Error_Dim_For_Component_Declaration;\n+         Error_Msg_N (\"dimensions mismatch in component declaration\", N);\n+         Error_Msg_N (\"\\component type \" & Dimensions_Msg_Of (Etyp), N);\n+         Error_Msg_N (\"\\component expression \" & Dimensions_Msg_Of (Expr), N);\n+      end Error_Dim_Msg_For_Component_Declaration;\n \n    --  Start of processing for Analyze_Dimension_Component_Declaration\n \n@@ -1270,7 +1277,7 @@ package body Sem_Dim is\n          --  dimension of the type mismatch.\n \n          if Dims_Of_Etyp /= Dims_Of_Expr then\n-            Error_Dim_For_Component_Declaration (N, Etyp, Expr);\n+            Error_Dim_Msg_For_Component_Declaration (N, Etyp, Expr);\n          end if;\n \n          --  Removal of dimensions in expression\n@@ -1296,31 +1303,31 @@ package body Sem_Dim is\n       Return_Obj_Decl       : Node_Id;\n       Return_Obj_Id         : Entity_Id;\n \n-      procedure Error_Dim_For_Extended_Return_Statement\n+      procedure Error_Dim_Msg_For_Extended_Return_Statement\n         (N             : Node_Id;\n          Return_Etyp   : Entity_Id;\n          Return_Obj_Id : Entity_Id);\n-      --  Warning using Error_Msg_N at node N. Output in the error message the\n-      --  dimensions of the returned type Return_Etyp and the returned object\n-      --  Return_Obj_Id of N.\n+      --  Error using Error_Msg_N at node N. Output the dimensions of the\n+      --  returned type Return_Etyp and the returned object Return_Obj_Id of N.\n \n-      ---------------------------------------------\n-      -- Error_Dim_For_Extended_Return_Statement --\n-      ---------------------------------------------\n+      -------------------------------------------------\n+      -- Error_Dim_Msg_For_Extended_Return_Statement --\n+      -------------------------------------------------\n \n-      procedure Error_Dim_For_Extended_Return_Statement\n+      procedure Error_Dim_Msg_For_Extended_Return_Statement\n         (N             : Node_Id;\n          Return_Etyp   : Entity_Id;\n          Return_Obj_Id : Entity_Id)\n       is\n       begin\n-         Error_Msg_N (\"?dimensions mismatch in extended return statement\", N);\n-         Error_Msg_N (\"?returned type \" & Dimensions_Msg_Of (Return_Etyp), N);\n-         Error_Msg_N (\"?returned object \" & Dimensions_Msg_Of (Return_Obj_Id),\n+         Error_Msg_N (\"dimensions mismatch in extended return statement\", N);\n+         Error_Msg_N (\"\\returned type \" & Dimensions_Msg_Of (Return_Etyp), N);\n+         Error_Msg_N (\"\\returned object \" & Dimensions_Msg_Of (Return_Obj_Id),\n                       N);\n-      end Error_Dim_For_Extended_Return_Statement;\n+      end Error_Dim_Msg_For_Extended_Return_Statement;\n \n    --  Start of processing for Analyze_Dimension_Extended_Return_Statement\n+\n    begin\n       if Present (Return_Obj_Decls) then\n          Return_Obj_Decl := First (Return_Obj_Decls);\n@@ -1332,7 +1339,7 @@ package body Sem_Dim is\n                   Dims_Of_Return_Obj_Id := Dimensions_Of (Return_Obj_Id);\n \n                   if Dims_Of_Return_Etyp /= Dims_Of_Return_Obj_Id then\n-                     Error_Dim_For_Extended_Return_Statement\n+                     Error_Dim_Msg_For_Extended_Return_Statement\n                        (N, Return_Etyp, Return_Obj_Id);\n                      return;\n                   end if;\n@@ -1355,21 +1362,19 @@ package body Sem_Dim is\n       Dims_Of_Actual : Dimension_Type;\n       Dims_Of_Call   : Dimension_Type;\n \n-      function Is_Elementary_Function_Call (N : Node_Id) return Boolean;\n+      function Is_Elementary_Function_Call return Boolean;\n       --  Return True if the call is a call of an elementary function (see\n       --  Ada.Numerics.Generic_Elementary_Functions).\n \n       ---------------------------------\n       -- Is_Elementary_Function_Call --\n       ---------------------------------\n \n-      function Is_Elementary_Function_Call (N : Node_Id) return Boolean is\n+      function Is_Elementary_Function_Call return Boolean is\n          Ent : Entity_Id;\n \n       begin\n-         --  Note that the node must come from source (why not???)\n-\n-         if Comes_From_Source (N) and then Is_Entity_Name (Name_Call) then\n+         if Is_Entity_Name (Name_Call) then\n             Ent := Entity (Name_Call);\n \n             --  Check the procedure is defined in an instantiation of a generic\n@@ -1395,7 +1400,7 @@ package body Sem_Dim is\n    begin\n       --  Elementary function case\n \n-      if Is_Elementary_Function_Call (N) then\n+      if Is_Elementary_Function_Call then\n \n          --  Sqrt function call case\n \n@@ -1421,11 +1426,12 @@ package body Sem_Dim is\n                Dims_Of_Actual := Dimensions_Of (Actual);\n \n                if Exists (Dims_Of_Actual) then\n-                  Error_Msg_NE\n-                    (\"?parameter should be dimensionless for elementary \"\n-                     & \"function&\", Actual, Name_Call);\n-                  Error_Msg_N\n-                    (\"?parameter \" & Dimensions_Msg_Of (Actual), Actual);\n+                  Error_Msg_NE (\"parameter should be dimensionless for \" &\n+                                \"elementary function&\",\n+                                Actual,\n+                                Name_Call);\n+                  Error_Msg_N (\"\\parameter \" & Dimensions_Msg_Of (Actual),\n+                               Actual);\n                end if;\n \n                Next (Actual);\n@@ -1446,7 +1452,6 @@ package body Sem_Dim is\n    procedure Analyze_Dimension_Has_Etype (N : Node_Id) is\n       Etyp         : constant Entity_Id := Etype (N);\n       Dims_Of_Etyp : constant Dimension_Type := Dimensions_Of (Etyp);\n-      N_Kind       : constant Node_Kind := Nkind (N);\n \n    begin\n       --  Propagation of the dimensions from the type\n@@ -1457,31 +1462,35 @@ package body Sem_Dim is\n \n       --  Removal of dimensions in expression\n \n-      --  Wouldn't a case statement be clearer here???\n+      case Nkind (N) is\n \n-      if Nkind_In (N_Kind, N_Attribute_Reference, N_Indexed_Component) then\n-         declare\n-            Expr  : Node_Id;\n-            Exprs : constant List_Id := Expressions (N);\n-         begin\n-            if Present (Exprs) then\n-               Expr := First (Exprs);\n-               while Present (Expr) loop\n-                  Remove_Dimensions (Expr);\n-                  Next (Expr);\n-               end loop;\n-            end if;\n-         end;\n+         when N_Attribute_Reference |\n+              N_Indexed_Component   =>\n+            declare\n+               Expr  : Node_Id;\n+               Exprs : constant List_Id := Expressions (N);\n \n-      elsif Nkind_In (N_Kind, N_Qualified_Expression,\n-                              N_Type_Conversion,\n-                              N_Unchecked_Type_Conversion)\n-      then\n-         Remove_Dimensions (Expression (N));\n+            begin\n+               if Present (Exprs) then\n+                  Expr := First (Exprs);\n+                  while Present (Expr) loop\n+                     Remove_Dimensions (Expr);\n+                     Next (Expr);\n+                  end loop;\n+               end if;\n+            end;\n \n-      elsif N_Kind = N_Selected_Component then\n-         Remove_Dimensions (Selector_Name (N));\n-      end if;\n+         when N_Qualified_Expression      |\n+              N_Type_Conversion           |\n+              N_Unchecked_Type_Conversion =>\n+            Remove_Dimensions (Expression (N));\n+\n+         when N_Selected_Component =>\n+            Remove_Dimensions (Selector_Name (N));\n+\n+         when others => null;\n+\n+      end case;\n    end Analyze_Dimension_Has_Etype;\n \n    ------------------------------------------\n@@ -1495,26 +1504,26 @@ package body Sem_Dim is\n       Dim_Of_Etyp : constant Dimension_Type := Dimensions_Of (Etyp);\n       Dim_Of_Expr : Dimension_Type;\n \n-      procedure Error_Dim_For_Object_Declaration\n+      procedure Error_Dim_Msg_For_Object_Declaration\n         (N    : Node_Id;\n          Etyp : Entity_Id;\n          Expr : Node_Id);\n-      --  Warnings using Error_Msg_N at node N. Output in the error message the\n-      --  dimensions of the type Etyp and the ???\n+      --  Error using Error_Msg_N at node N. Output the dimensions of the\n+      --  type Etyp and of the expression Expr.\n \n-      --------------------------------------\n-      -- Error_Dim_For_Object_Declaration --\n-      --------------------------------------\n+      ------------------------------------------\n+      -- Error_Dim_Msg_For_Object_Declaration --\n+      ------------------------------------------\n \n-      procedure Error_Dim_For_Object_Declaration\n+      procedure Error_Dim_Msg_For_Object_Declaration\n         (N    : Node_Id;\n          Etyp : Entity_Id;\n          Expr : Node_Id) is\n       begin\n-         Error_Msg_N (\"?dimensions mismatch in object declaration\", N);\n-         Error_Msg_N (\"\\?object type \" & Dimensions_Msg_Of (Etyp), N);\n-         Error_Msg_N (\"\\?object expression \" & Dimensions_Msg_Of (Expr), N);\n-      end Error_Dim_For_Object_Declaration;\n+         Error_Msg_N (\"dimensions mismatch in object declaration\", N);\n+         Error_Msg_N (\"\\object type \" & Dimensions_Msg_Of (Etyp), N);\n+         Error_Msg_N (\"\\object expression \" & Dimensions_Msg_Of (Expr), N);\n+      end Error_Dim_Msg_For_Object_Declaration;\n \n    --  Start of processing for Analyze_Dimension_Object_Declaration\n \n@@ -1532,7 +1541,7 @@ package body Sem_Dim is\n                              N_Integer_Literal)\n            and then Dim_Of_Expr /= Dim_Of_Etyp\n          then\n-            Error_Dim_For_Object_Declaration (N, Etyp, Expr);\n+            Error_Dim_Msg_For_Object_Declaration (N, Etyp, Expr);\n          end if;\n \n          --  Removal of dimensions in expression\n@@ -1549,34 +1558,34 @@ package body Sem_Dim is\n       Renamed_Name : constant Node_Id := Name (N);\n       Sub_Mark     : constant Node_Id := Subtype_Mark (N);\n \n-      procedure Error_Dim_For_Object_Renaming_Declaration\n+      procedure Error_Dim_Msg_For_Object_Renaming_Declaration\n         (N            : Node_Id;\n          Sub_Mark     : Node_Id;\n          Renamed_Name : Node_Id);\n-      --  Error using Error_Msg_N at node N. Output in the error message the\n-      --  dimensions of Sub_Mark and of Renamed_Name.\n+      --  Error using Error_Msg_N at node N. Output the dimensions of\n+      --  Sub_Mark and of Renamed_Name.\n \n-      -----------------------------------------------\n-      -- Error_Dim_For_Object_Renaming_Declaration --\n-      -----------------------------------------------\n+      ---------------------------------------------------\n+      -- Error_Dim_Msg_For_Object_Renaming_Declaration --\n+      ---------------------------------------------------\n \n-      procedure Error_Dim_For_Object_Renaming_Declaration\n+      procedure Error_Dim_Msg_For_Object_Renaming_Declaration\n         (N            : Node_Id;\n          Sub_Mark     : Node_Id;\n          Renamed_Name : Node_Id) is\n       begin\n-         Error_Msg_N (\"?dimensions mismatch in object renaming declaration\",\n+         Error_Msg_N (\"dimensions mismatch in object renaming declaration\",\n                       N);\n-         Error_Msg_N (\"?type \" & Dimensions_Msg_Of (Sub_Mark), N);\n-         Error_Msg_N (\"?renamed object \" & Dimensions_Msg_Of (Renamed_Name),\n+         Error_Msg_N (\"\\type \" & Dimensions_Msg_Of (Sub_Mark), N);\n+         Error_Msg_N (\"\\renamed object \" & Dimensions_Msg_Of (Renamed_Name),\n                       N);\n-      end Error_Dim_For_Object_Renaming_Declaration;\n+      end Error_Dim_Msg_For_Object_Renaming_Declaration;\n \n    --  Start of processing for Analyze_Dimension_Object_Renaming_Declaration\n \n    begin\n       if Dimensions_Of (Renamed_Name) /= Dimensions_Of (Sub_Mark) then\n-         Error_Dim_For_Object_Renaming_Declaration\n+         Error_Dim_Msg_For_Object_Renaming_Declaration\n            (N, Sub_Mark, Renamed_Name);\n       end if;\n    end Analyze_Dimension_Object_Renaming_Declaration;\n@@ -1594,34 +1603,33 @@ package body Sem_Dim is\n       Dims_Of_Return_Etyp : constant Dimension_Type :=\n                               Dimensions_Of (Return_Etyp);\n \n-      procedure Error_Dim_For_Simple_Return_Statement\n+      procedure Error_Dim_Msg_For_Simple_Return_Statement\n         (N           : Node_Id;\n          Return_Etyp : Entity_Id;\n          Expr        : Node_Id);\n-      --  Error using Error_Msg_N at node N. Output in the error message\n-      --  the dimensions of the returned type Return_Etyp and the returned\n-      --  expression Expr of N.\n+      --  Error using Error_Msg_N at node N. Output the dimensions of the\n+      --  returned type Return_Etyp and the returned expression Expr of N.\n \n-      -------------------------------------------\n-      -- Error_Dim_For_Simple_Return_Statement --\n-      -------------------------------------------\n+      -----------------------------------------------\n+      -- Error_Dim_Msg_For_Simple_Return_Statement --\n+      -----------------------------------------------\n \n-      procedure Error_Dim_For_Simple_Return_Statement\n+      procedure Error_Dim_Msg_For_Simple_Return_Statement\n         (N           : Node_Id;\n          Return_Etyp : Entity_Id;\n          Expr        : Node_Id)\n       is\n       begin\n-         Error_Msg_N (\"?dimensions mismatch in return statement\", N);\n-         Error_Msg_N (\"\\?returned type \" & Dimensions_Msg_Of (Return_Etyp), N);\n-         Error_Msg_N (\"\\?returned expression \" & Dimensions_Msg_Of (Expr), N);\n-      end Error_Dim_For_Simple_Return_Statement;\n+         Error_Msg_N (\"dimensions mismatch in return statement\", N);\n+         Error_Msg_N (\"\\returned type \" & Dimensions_Msg_Of (Return_Etyp), N);\n+         Error_Msg_N (\"\\returned expression \" & Dimensions_Msg_Of (Expr), N);\n+      end Error_Dim_Msg_For_Simple_Return_Statement;\n \n    --  Start of processing for Analyze_Dimension_Simple_Return_Statement\n \n    begin\n       if Dims_Of_Return_Etyp /= Dims_Of_Expr then\n-         Error_Dim_For_Simple_Return_Statement (N, Return_Etyp, Expr);\n+         Error_Dim_Msg_For_Simple_Return_Statement (N, Return_Etyp, Expr);\n          Remove_Dimensions (Expr);\n       end if;\n    end Analyze_Dimension_Simple_Return_Statement;\n@@ -1649,7 +1657,7 @@ package body Sem_Dim is\n             --  it cannot inherit a dimension from its subtype.\n \n             if Exists (Dims_Of_Id) then\n-               Error_Msg_N (\"?subtype& already\" & Dimensions_Msg_Of (Id), N);\n+               Error_Msg_N (\"subtype& already\" & Dimensions_Msg_Of (Id), N);\n             else\n                Set_Dimensions (Id, Dims_Of_Etyp);\n                Set_Symbol (Id, Symbol_Of (Etyp));\n@@ -1698,7 +1706,7 @@ package body Sem_Dim is\n    --  RATIONAL ::= [-] NUMERAL [/ NUMERAL]\n \n    --  A rational number is a number that can be expressed as the quotient or\n-   --  fraction a/b of two integers, where b is non-zero.\n+   --  fraction a/b of two integers, where b is non-zero positive.\n \n    function Create_Rational_From\n      (Expr     : Node_Id;\n@@ -1889,7 +1897,7 @@ package body Sem_Dim is\n \n       if Exists (Dims_Of_N) then\n          System := System_Of (Base_Type (Etype (N)));\n-         Add_Str_To_Name_Buffer (\"has dimensions: \");\n+         Add_Str_To_Name_Buffer (\"has dimensions \");\n          Add_Dimension_Vector_To_Buffer (Dims_Of_N, System);\n       else\n          Add_Str_To_Name_Buffer (\"is dimensionless\");\n@@ -1914,8 +1922,7 @@ package body Sem_Dim is\n    -- Eval_Op_Expon_For_Dimensioned_Type --\n    ----------------------------------------\n \n-   --  Evaluate the expon operator for real dimensioned type. Note that the\n-   --  node must come from source. Why???\n+   --  Evaluate the expon operator for real dimensioned type.\n \n    --  Note that if the exponent is an integer (denominator = 1) the node is\n    --  evaluated by the regular Eval_Op_Expon routine (see Sem_Eval).\n@@ -1928,9 +1935,7 @@ package body Sem_Dim is\n       R_Value : Rational := No_Rational;\n \n    begin\n-      if Comes_From_Source (N)\n-        and then Is_Real_Type (Btyp)\n-      then\n+      if Is_Real_Type (Btyp) then\n          R_Value := Create_Rational_From (R, False);\n       end if;\n "}, {"sha": "0afe05cd4674fc8038c2115e9606219924a85092", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a7e930fb278bb55e5387b9342d5566afb1f2c3b/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a7e930fb278bb55e5387b9342d5566afb1f2c3b/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=9a7e930fb278bb55e5387b9342d5566afb1f2c3b", "patch": "@@ -4604,11 +4604,12 @@ package body Sem_Prag is\n \n          elsif C = Convention_CPP\n            and then (Is_Record_Type (Def_Id)\n-                       or else Ekind (Def_Id) = E_Incomplete_Type)\n+                      or else Ekind (Def_Id) = E_Incomplete_Type)\n          then\n             if Ekind (Def_Id) = E_Incomplete_Type then\n                if Present (Full_View (Def_Id)) then\n                   Def_Id := Full_View (Def_Id);\n+\n                else\n                   Error_Msg_N\n                     (\"cannot import 'C'P'P type before full declaration seen\",\n@@ -4650,7 +4651,7 @@ package body Sem_Prag is\n             --  full view is analyzed (see Process_Full_View).\n \n             if not Is_Private_Type (Def_Id) then\n-               Check_CPP_Type (Def_Id);\n+               Check_CPP_Type_Has_No_Defaults (Def_Id);\n             end if;\n \n          elsif Nkind (Parent (Def_Id)) = N_Incomplete_Type_Declaration then\n@@ -4662,8 +4663,8 @@ package body Sem_Prag is\n \n          else\n             Error_Pragma_Arg\n-              (\"second argument of pragma% must be object, subprogram\" &\n-               \" or incomplete type\",\n+              (\"second argument of pragma% must be object, subprogram \"\n+               & \"or incomplete type\",\n                Arg2);\n          end if;\n "}]}