{"sha": "4b59dbb5d6759e43bfa23161a8d3feb9ae969e1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI1OWRiYjVkNjc1OWU0M2JmYTIzMTYxYThkM2ZlYjlhZTk2OWUxYQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-26T12:32:27Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-26T13:27:04Z"}, "message": "middle-end/98726 - fix VECTOR_CST element access\n\nThis fixes VECTOR_CST element access with POLY_INT elements and\nallows to produce dump files of the PR98726 testcase without\nICEing.\n\n2021-01-26  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-end/98726\n\t* tree.h (vector_cst_int_elt): Remove.\n\t* tree.c (vector_cst_int_elt): Use poly_wide_int for computations,\n\tmake static.", "tree": {"sha": "1885647ed7b37d416eae98e739afd4cd90fa7f27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1885647ed7b37d416eae98e739afd4cd90fa7f27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b59dbb5d6759e43bfa23161a8d3feb9ae969e1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b59dbb5d6759e43bfa23161a8d3feb9ae969e1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b59dbb5d6759e43bfa23161a8d3feb9ae969e1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b59dbb5d6759e43bfa23161a8d3feb9ae969e1a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e81b16c24367d7cc92f6d369606dca5575f6b5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e81b16c24367d7cc92f6d369606dca5575f6b5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e81b16c24367d7cc92f6d369606dca5575f6b5f"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "f9d57e6d4094ef1755ebf7d75e543f572e53e1df", "filename": "gcc/tree.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b59dbb5d6759e43bfa23161a8d3feb9ae969e1a/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b59dbb5d6759e43bfa23161a8d3feb9ae969e1a/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4b59dbb5d6759e43bfa23161a8d3feb9ae969e1a", "patch": "@@ -11079,13 +11079,13 @@ build_opaque_vector_type (tree innertype, poly_int64 nunits)\n \n /* Return the value of element I of VECTOR_CST T as a wide_int.  */\n \n-wide_int\n+static poly_wide_int\n vector_cst_int_elt (const_tree t, unsigned int i)\n {\n   /* First handle elements that are directly encoded.  */\n   unsigned int encoded_nelts = vector_cst_encoded_nelts (t);\n   if (i < encoded_nelts)\n-    return wi::to_wide (VECTOR_CST_ENCODED_ELT (t, i));\n+    return wi::to_poly_wide (VECTOR_CST_ENCODED_ELT (t, i));\n \n   /* Identify the pattern that contains element I and work out the index of\n      the last encoded element for that pattern.  */\n@@ -11096,13 +11096,13 @@ vector_cst_int_elt (const_tree t, unsigned int i)\n \n   /* If there are no steps, the final encoded value is the right one.  */\n   if (!VECTOR_CST_STEPPED_P (t))\n-    return wi::to_wide (VECTOR_CST_ENCODED_ELT (t, final_i));\n+    return wi::to_poly_wide (VECTOR_CST_ENCODED_ELT (t, final_i));\n \n   /* Otherwise work out the value from the last two encoded elements.  */\n   tree v1 = VECTOR_CST_ENCODED_ELT (t, final_i - npatterns);\n   tree v2 = VECTOR_CST_ENCODED_ELT (t, final_i);\n-  wide_int diff = wi::to_wide (v2) - wi::to_wide (v1);\n-  return wi::to_wide (v2) + (count - 2) * diff;\n+  poly_wide_int diff = wi::to_poly_wide (v2) - wi::to_poly_wide (v1);\n+  return wi::to_poly_wide (v2) + (count - 2) * diff;\n }\n \n /* Return the value of element I of VECTOR_CST T.  */"}, {"sha": "17a811c02e8416946a5b228f498dc4e13ae6d766", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b59dbb5d6759e43bfa23161a8d3feb9ae969e1a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b59dbb5d6759e43bfa23161a8d3feb9ae969e1a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4b59dbb5d6759e43bfa23161a8d3feb9ae969e1a", "patch": "@@ -4762,7 +4762,6 @@ extern tree last_field (const_tree) ATTRIBUTE_NONNULL (1);\n extern bool initializer_zerop (const_tree, bool * = NULL);\n extern bool initializer_each_zero_or_onep (const_tree);\n \n-extern wide_int vector_cst_int_elt (const_tree, unsigned int);\n extern tree vector_cst_elt (const_tree, unsigned int);\n \n /* Given a vector VEC, return its first element if all elements are"}]}