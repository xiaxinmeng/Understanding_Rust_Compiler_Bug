{"sha": "b9af73fca3e2e71b67880731f9be888e0445e9de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlhZjczZmNhM2UyZTcxYjY3ODgwNzMxZjliZTg4OGUwNDQ1ZTlkZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-02-24T12:47:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-02-24T12:47:56Z"}, "message": "re PR tree-optimization/52361 (gcc.dg/pr48141.c times out with checking enabled)\n\n2012-02-24  Richard Guenther  <rguenther@suse.de>\n\n\tPR middle-end/52361\n\t* gimple.c (walk_gimple_op): Use predicates with less redundant\n\ttests.\n\t(is_gimple_reg_type): Move inline ...\n\t* gimple.h (is_gimple_reg_type): ... here.\n\nFrom-SVN: r184552", "tree": {"sha": "5bf77ec7639aa0b5fc27763151dd1b71c3daae43", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bf77ec7639aa0b5fc27763151dd1b71c3daae43"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9af73fca3e2e71b67880731f9be888e0445e9de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9af73fca3e2e71b67880731f9be888e0445e9de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9af73fca3e2e71b67880731f9be888e0445e9de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9af73fca3e2e71b67880731f9be888e0445e9de/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6ae4eccdca78d0a584dcabbd84f6876c8b871e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ae4eccdca78d0a584dcabbd84f6876c8b871e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ae4eccdca78d0a584dcabbd84f6876c8b871e37"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "28ee9f739fcca4f9efb0220a3cd4ce47b770aaa8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9af73fca3e2e71b67880731f9be888e0445e9de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9af73fca3e2e71b67880731f9be888e0445e9de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b9af73fca3e2e71b67880731f9be888e0445e9de", "patch": "@@ -1,3 +1,11 @@\n+2012-02-24  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR middle-end/52361\n+\t* gimple.c (walk_gimple_op): Use predicates with less redundant\n+\ttests.\n+\t(is_gimple_reg_type): Move inline ...\n+\t* gimple.h (is_gimple_reg_type): ... here.\n+\n 2012-02-24  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52361"}, {"sha": "3876912e471ac47979779986d8669ec7b0fa4d1c", "filename": "gcc/gimple.c", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9af73fca3e2e71b67880731f9be888e0445e9de/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9af73fca3e2e71b67880731f9be888e0445e9de/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=b9af73fca3e2e71b67880731f9be888e0445e9de", "patch": "@@ -1481,7 +1481,7 @@ walk_gimple_op (gimple stmt, walk_tree_fn callback_op,\n \t  tree lhs = gimple_assign_lhs (stmt);\n \t  wi->val_only\n \t    = (is_gimple_reg_type (TREE_TYPE (lhs)) && !is_gimple_reg (lhs))\n-\t      || !gimple_assign_single_p (stmt);\n+\t      || gimple_assign_rhs_class (stmt) != GIMPLE_SINGLE_RHS;\n \t}\n \n       for (i = 1; i < gimple_num_ops (stmt); i++)\n@@ -1497,11 +1497,14 @@ walk_gimple_op (gimple stmt, walk_tree_fn callback_op,\n       if (wi)\n \t{\n           /* If the RHS has more than 1 operand, it is not appropriate\n-             for the memory.  */\n-\t  wi->val_only = !(is_gimple_mem_rhs (gimple_assign_rhs1 (stmt))\n-\t\t\t   || TREE_CODE (gimple_assign_rhs1 (stmt))\n-\t\t\t      == CONSTRUCTOR)\n-                         || !gimple_assign_single_p (stmt);\n+             for the memory.\n+\t     ???  A lhs always requires an lvalue, checking the val_only flag\n+\t     does not make any sense, so we should be able to avoid computing\n+\t     it here.  */\n+\t  tree rhs1 = gimple_assign_rhs1 (stmt);\n+\t  wi->val_only = !(is_gimple_mem_rhs (rhs1)\n+\t\t\t   || TREE_CODE (rhs1) == CONSTRUCTOR)\n+                         || gimple_assign_rhs_class (stmt) != GIMPLE_SINGLE_RHS;\n \t  wi->is_lhs = true;\n \t}\n \n@@ -2908,14 +2911,6 @@ is_gimple_id (tree t)\n \t  || TREE_CODE (t) == STRING_CST);\n }\n \n-/* Return true if TYPE is a suitable type for a scalar register variable.  */\n-\n-bool\n-is_gimple_reg_type (tree type)\n-{\n-  return !AGGREGATE_TYPE_P (type);\n-}\n-\n /* Return true if T is a non-aggregate register variable.  */\n \n bool"}, {"sha": "b2b345edfabac1631d1bfaba530e0b70c425c0dd", "filename": "gcc/gimple.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9af73fca3e2e71b67880731f9be888e0445e9de/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9af73fca3e2e71b67880731f9be888e0445e9de/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=b9af73fca3e2e71b67880731f9be888e0445e9de", "patch": "@@ -963,8 +963,6 @@ tree gimple_extract_devirt_binfo_from_cst (tree);\n /* Returns true iff T is a valid GIMPLE statement.  */\n extern bool is_gimple_stmt (tree);\n \n-/* Returns true iff TYPE is a valid type for a scalar register variable.  */\n-extern bool is_gimple_reg_type (tree);\n /* Returns true iff T is a scalar register variable.  */\n extern bool is_gimple_reg (tree);\n /* Returns true iff T is any sort of variable.  */\n@@ -4838,6 +4836,13 @@ gimple_expr_type (const_gimple stmt)\n     return void_type_node;\n }\n \n+/* Return true if TYPE is a suitable type for a scalar register variable.  */\n+\n+static inline bool\n+is_gimple_reg_type (tree type)\n+{\n+  return !AGGREGATE_TYPE_P (type);\n+}\n \n /* Return a new iterator pointing to GIMPLE_SEQ's first statement.  */\n "}]}