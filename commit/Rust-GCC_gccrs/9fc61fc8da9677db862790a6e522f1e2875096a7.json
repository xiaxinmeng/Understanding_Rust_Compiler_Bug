{"sha": "9fc61fc8da9677db862790a6e522f1e2875096a7", "node_id": "C_kwDOANBUbNoAKDlmYzYxZmM4ZGE5Njc3ZGI4NjI3OTBhNmU1MjJmMWUyODc1MDk2YTc", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-07T10:59:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2022-07-07T11:22:31Z"}, "message": "Speedup update-ssa some more\n\nThe following avoids copying an sbitmap and one traversal by avoiding\nto re-allocate old_ssa_names when not necessary.  In addition this\nactually checks what the comment before PHI insert iterating promises,\nthat the old_ssa_names set does not grow.\n\n\t* tree-into-ssa.cc (iterating_old_ssa_names): New.\n\t(add_new_name_mapping): Grow {new,old}_ssa_names separately\n\tand only when actually needed.  Assert we are not growing\n\tthe old_ssa_names set when iterating over it.\n\t(update_ssa): Remove old_ssa_names copying and empty_p\n\tquery, note we are iterating over it and expect no set changes.", "tree": {"sha": "c914bd6e75a680e2179b9ff1c05d16ecb6eb9d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c914bd6e75a680e2179b9ff1c05d16ecb6eb9d34"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9fc61fc8da9677db862790a6e522f1e2875096a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc61fc8da9677db862790a6e522f1e2875096a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fc61fc8da9677db862790a6e522f1e2875096a7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fc61fc8da9677db862790a6e522f1e2875096a7/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ef714539cb7cc1cd746312fd5dcc987bf167471", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ef714539cb7cc1cd746312fd5dcc987bf167471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ef714539cb7cc1cd746312fd5dcc987bf167471"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "9f45e62c6d066a72948f30ca2cc0eec538c36fb1", "filename": "gcc/tree-into-ssa.cc", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9fc61fc8da9677db862790a6e522f1e2875096a7/gcc%2Ftree-into-ssa.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9fc61fc8da9677db862790a6e522f1e2875096a7/gcc%2Ftree-into-ssa.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.cc?ref=9fc61fc8da9677db862790a6e522f1e2875096a7", "patch": "@@ -587,6 +587,8 @@ add_to_repl_tbl (tree new_tree, tree old)\n   bitmap_set_bit (*set, SSA_NAME_VERSION (old));\n }\n \n+/* Debugging aid to fence old_ssa_names changes when iterating over it.  */\n+static bool iterating_old_ssa_names;\n \n /* Add a new mapping NEW_TREE -> OLD REPL_TBL.  Every entry N_i in REPL_TBL\n    represents the set of names O_1 ... O_j replaced by N_i.  This is\n@@ -602,10 +604,15 @@ add_new_name_mapping (tree new_tree, tree old)\n \n   /* We may need to grow NEW_SSA_NAMES and OLD_SSA_NAMES because our\n      caller may have created new names since the set was created.  */\n-  if (SBITMAP_SIZE (new_ssa_names) <= num_ssa_names - 1)\n+  if (SBITMAP_SIZE (new_ssa_names) <= SSA_NAME_VERSION (new_tree))\n     {\n       unsigned int new_sz = num_ssa_names + NAME_SETS_GROWTH_FACTOR;\n       new_ssa_names = sbitmap_resize (new_ssa_names, new_sz, 0);\n+    }\n+  if (SBITMAP_SIZE (old_ssa_names) <= SSA_NAME_VERSION (old))\n+    {\n+      gcc_assert (!iterating_old_ssa_names);\n+      unsigned int new_sz = num_ssa_names + NAME_SETS_GROWTH_FACTOR;\n       old_ssa_names = sbitmap_resize (old_ssa_names, new_sz, 0);\n     }\n \n@@ -619,8 +626,11 @@ add_new_name_mapping (tree new_tree, tree old)\n \n   /* Register NEW_TREE and OLD in NEW_SSA_NAMES and OLD_SSA_NAMES,\n      respectively.  */\n+  if (iterating_old_ssa_names)\n+    gcc_assert (bitmap_bit_p (old_ssa_names, SSA_NAME_VERSION (old)));\n+  else\n+    bitmap_set_bit (old_ssa_names, SSA_NAME_VERSION (old));\n   bitmap_set_bit (new_ssa_names, SSA_NAME_VERSION (new_tree));\n-  bitmap_set_bit (old_ssa_names, SSA_NAME_VERSION (old));\n }\n \n \n@@ -3460,20 +3470,14 @@ update_ssa (unsigned update_flags)\n \tbitmap_initialize (&dfs[bb->index], &bitmap_default_obstack);\n       compute_dominance_frontiers (dfs);\n \n-      if (bitmap_first_set_bit (old_ssa_names) >= 0)\n-\t{\n-\t  sbitmap_iterator sbi;\n-\n-\t  /* insert_update_phi_nodes_for will call add_new_name_mapping\n-\t     when inserting new PHI nodes, so the set OLD_SSA_NAMES\n-\t     will grow while we are traversing it (but it will not\n-\t     gain any new members).  Copy OLD_SSA_NAMES to a temporary\n-\t     for traversal.  */\n-\t  auto_sbitmap tmp (SBITMAP_SIZE (old_ssa_names));\n-\t  bitmap_copy (tmp, old_ssa_names);\n-\t  EXECUTE_IF_SET_IN_BITMAP (tmp, 0, i, sbi)\n-\t    insert_updated_phi_nodes_for (ssa_name (i), dfs, update_flags);\n-\t}\n+      /* insert_update_phi_nodes_for will call add_new_name_mapping\n+\t when inserting new PHI nodes, but it will not add any\n+\t new members to OLD_SSA_NAMES.  */\n+      iterating_old_ssa_names = true;\n+      sbitmap_iterator sbi;\n+      EXECUTE_IF_SET_IN_BITMAP (old_ssa_names, 0, i, sbi)\n+\tinsert_updated_phi_nodes_for (ssa_name (i), dfs, update_flags);\n+      iterating_old_ssa_names = false;\n \n       symbols_to_rename.qsort (insert_updated_phi_nodes_compare_uids);\n       FOR_EACH_VEC_ELT (symbols_to_rename, i, sym)"}]}