{"sha": "5bf04509f437ff175c001a1c84a13b3a845174eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWJmMDQ1MDlmNDM3ZmYxNzVjMDAxYTFjODRhMTNiM2E4NDUxNzRlYg==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-05-17T19:13:15Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-05-17T19:13:15Z"}, "message": "[PR89433] Use 'oacc_verify_routine_clauses' for C/C++ OpenACC 'routine' directives\n\n\tgcc/\n\tPR middle-end/89433\n\t* omp-general.c (oacc_build_routine_dims): Move some of its\n\tprocessing into...\n\t(oacc_verify_routine_clauses): ... this new function.\n\t* omp-general.h (oacc_verify_routine_clauses): New prototype.\n\tgcc/c/\n\tPR c/89433\n\t* c-parser.c (c_parser_oacc_routine): Normalize order of clauses.\n\t(c_finish_oacc_routine): Call oacc_verify_routine_clauses.\n\tgcc/cp/\n\tPR c++/89433\n\t* parser.c (cp_parser_oacc_routine)\n\t(cp_parser_late_parsing_oacc_routine): Normalize order of clauses.\n\t(cp_finalize_oacc_routine): Call oacc_verify_routine_clauses.\n\tgcc/testsuite/\n\tPR testsuite/89433\n\t* c-c++-common/goacc/routine-2.c: Update, and move some test\n\tinto...\n\t* c-c++-common/goacc/routine-level-of-parallelism-1.c: ... this\n\tnew file.\n\nFrom-SVN: r271344", "tree": {"sha": "05c7809fb44b3510da14c00b79c3d9443f04d7d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05c7809fb44b3510da14c00b79c3d9443f04d7d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5bf04509f437ff175c001a1c84a13b3a845174eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf04509f437ff175c001a1c84a13b3a845174eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5bf04509f437ff175c001a1c84a13b3a845174eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5bf04509f437ff175c001a1c84a13b3a845174eb/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e03436e7ac2ddbbf397a6d64309b01ad37cfcadf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e03436e7ac2ddbbf397a6d64309b01ad37cfcadf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e03436e7ac2ddbbf397a6d64309b01ad37cfcadf"}], "stats": {"total": 391, "additions": 362, "deletions": 29}, "files": [{"sha": "b8a4358605255d4e6544bc72ca1825143c0f20e8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5bf04509f437ff175c001a1c84a13b3a845174eb", "patch": "@@ -1,3 +1,11 @@\n+2019-05-17  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR middle-end/89433\n+\t* omp-general.c (oacc_build_routine_dims): Move some of its\n+\tprocessing into...\n+\t(oacc_verify_routine_clauses): ... this new function.\n+\t* omp-general.h (oacc_verify_routine_clauses): New prototype.\n+\n 2019-05-17  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/rs6000/rs6000.c (machopic_output_stub): Adjust the"}, {"sha": "1393e8f47fd25e90004df95fa8184ae8d2d65a29", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=5bf04509f437ff175c001a1c84a13b3a845174eb", "patch": "@@ -1,5 +1,9 @@\n 2019-05-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR c/89433\n+\t* c-parser.c (c_parser_oacc_routine): Normalize order of clauses.\n+\t(c_finish_oacc_routine): Call oacc_verify_routine_clauses.\n+\n \tPR c/89433\n \t* c-parser.c (c_finish_oacc_routine): Refer to OpenACC 'routine'\n \tclauses from \"omp declare target\" attribute."}, {"sha": "8337f1cce0cf88b350efe67c67d4c78d3a9c21cc", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=5bf04509f437ff175c001a1c84a13b3a845174eb", "patch": "@@ -15801,6 +15801,9 @@ c_parser_oacc_routine (c_parser *parser, enum pragma_context context)\n       data.clauses\n \t= c_parser_oacc_all_clauses (parser, OACC_ROUTINE_CLAUSE_MASK,\n \t\t\t\t     \"#pragma acc routine\");\n+      /* The clauses are in reverse order; fix that to make later diagnostic\n+\t emission easier.  */\n+      data.clauses = nreverse (data.clauses);\n \n       if (TREE_CODE (decl) != FUNCTION_DECL)\n \t{\n@@ -15815,6 +15818,9 @@ c_parser_oacc_routine (c_parser *parser, enum pragma_context context)\n       data.clauses\n \t= c_parser_oacc_all_clauses (parser, OACC_ROUTINE_CLAUSE_MASK,\n \t\t\t\t     \"#pragma acc routine\");\n+      /* The clauses are in reverse order; fix that to make later diagnostic\n+\t emission easier.  */\n+      data.clauses = nreverse (data.clauses);\n \n       /* Emit a helpful diagnostic if there's another pragma following this\n \t one.  Also don't allow a static assertion declaration, as in the\n@@ -15878,6 +15884,8 @@ c_finish_oacc_routine (struct oacc_routine_data *data, tree fndecl,\n       return;\n     }\n \n+  oacc_verify_routine_clauses (&data->clauses, data->loc);\n+\n   if (oacc_get_fn_attrib (fndecl))\n     {\n       error_at (data->loc,"}, {"sha": "2f1e06ca458fd1b6bae1ff7a631db8300101fe08", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5bf04509f437ff175c001a1c84a13b3a845174eb", "patch": "@@ -1,5 +1,10 @@\n 2019-05-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR c++/89433\n+\t* parser.c (cp_parser_oacc_routine)\n+\t(cp_parser_late_parsing_oacc_routine): Normalize order of clauses.\n+\t(cp_finalize_oacc_routine): Call oacc_verify_routine_clauses.\n+\n \tPR c++/89433\n \t* parser.c (cp_finalize_oacc_routine): Refer to OpenACC 'routine'\n \tclauses from \"omp declare target\" attribute."}, {"sha": "aa6507e42f41bbadf946b5a7b722713a16f9c131", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5bf04509f437ff175c001a1c84a13b3a845174eb", "patch": "@@ -40136,6 +40136,9 @@ cp_parser_oacc_routine (cp_parser *parser, cp_token *pragma_tok,\n \t= cp_parser_oacc_all_clauses (parser, OACC_ROUTINE_CLAUSE_MASK,\n \t\t\t\t      \"#pragma acc routine\",\n \t\t\t\t      cp_lexer_peek_token (parser->lexer));\n+      /* The clauses are in reverse order; fix that to make later diagnostic\n+\t emission easier.  */\n+      data.clauses = nreverse (data.clauses);\n \n       if (decl && is_overloaded_fn (decl)\n \t  && (TREE_CODE (decl) != FUNCTION_DECL\n@@ -40232,6 +40235,9 @@ cp_parser_late_parsing_oacc_routine (cp_parser *parser, tree attrs)\n   parser->oacc_routine->clauses\n     = cp_parser_oacc_all_clauses (parser, OACC_ROUTINE_CLAUSE_MASK,\n \t\t\t\t  \"#pragma acc routine\", pragma_tok);\n+  /* The clauses are in reverse order; fix that to make later diagnostic\n+     emission easier.  */\n+  parser->oacc_routine->clauses = nreverse (parser->oacc_routine->clauses);\n   cp_parser_pop_lexer (parser);\n   /* Later, cp_finalize_oacc_routine will process the clauses, and then set\n      fndecl_seen.  */\n@@ -40266,6 +40272,9 @@ cp_finalize_oacc_routine (cp_parser *parser, tree fndecl, bool is_defn)\n \t  return;\n \t}\n \n+      oacc_verify_routine_clauses (&parser->oacc_routine->clauses,\n+\t\t\t\t   parser->oacc_routine->loc);\n+\n       if (oacc_get_fn_attrib (fndecl))\n \t{\n \t  error_at (parser->oacc_routine->loc,"}, {"sha": "f1d859b0275cfdcc9c20ba6df63d12c705d09cac", "filename": "gcc/omp-general.c", "status": "modified", "additions": 56, "deletions": 10, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=5bf04509f437ff175c001a1c84a13b3a845174eb", "patch": "@@ -608,9 +608,61 @@ oacc_set_fn_attrib (tree fn, tree clauses, vec<tree> *args)\n     }\n }\n \n-/*  Process the routine's dimension clauess to generate an attribute\n-    value.  Issue diagnostics as appropriate.  We default to SEQ\n-    (OpenACC 2.5 clarifies this). All dimensions have a size of zero\n+/* Verify OpenACC routine clauses.\n+\n+   Upon returning, the chain of clauses will contain exactly one clause\n+   specifying the level of parallelism.  */\n+\n+void\n+oacc_verify_routine_clauses (tree *clauses, location_t loc)\n+{\n+  tree c_level = NULL_TREE;\n+  tree c_p = NULL_TREE;\n+  for (tree c = *clauses; c; c_p = c, c = OMP_CLAUSE_CHAIN (c))\n+    switch (OMP_CLAUSE_CODE (c))\n+      {\n+      case OMP_CLAUSE_GANG:\n+      case OMP_CLAUSE_WORKER:\n+      case OMP_CLAUSE_VECTOR:\n+      case OMP_CLAUSE_SEQ:\n+\tif (c_level == NULL_TREE)\n+\t  c_level = c;\n+\telse if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_CODE (c_level))\n+\t  {\n+\t    /* This has already been diagnosed in the front ends.  */\n+\t    /* Drop the duplicate clause.  */\n+\t    gcc_checking_assert (c_p != NULL_TREE);\n+\t    OMP_CLAUSE_CHAIN (c_p) = OMP_CLAUSE_CHAIN (c);\n+\t    c = c_p;\n+\t  }\n+\telse\n+\t  {\n+\t    error_at (OMP_CLAUSE_LOCATION (c),\n+\t\t      \"%qs specifies a conflicting level of parallelism\",\n+\t\t      omp_clause_code_name[OMP_CLAUSE_CODE (c)]);\n+\t    inform (OMP_CLAUSE_LOCATION (c_level),\n+\t\t    \"... to the previous %qs clause here\",\n+\t\t    omp_clause_code_name[OMP_CLAUSE_CODE (c_level)]);\n+\t    /* Drop the conflicting clause.  */\n+\t    gcc_checking_assert (c_p != NULL_TREE);\n+\t    OMP_CLAUSE_CHAIN (c_p) = OMP_CLAUSE_CHAIN (c);\n+\t    c = c_p;\n+\t  }\n+\tbreak;\n+      default:\n+\tgcc_unreachable ();\n+      }\n+  if (c_level == NULL_TREE)\n+    {\n+      /* Default to an implicit 'seq' clause.  */\n+      c_level = build_omp_clause (loc, OMP_CLAUSE_SEQ);\n+      OMP_CLAUSE_CHAIN (c_level) = *clauses;\n+      *clauses = c_level;\n+    }\n+}\n+\n+/*  Process the OpenACC 'routine' directive clauses to generate an attribute\n+    for the level of parallelism.  All dimensions have a size of zero\n     (dynamic).  TREE_PURPOSE is set to indicate whether that dimension\n     can have a loop partitioned on it.  non-zero indicates\n     yes, zero indicates no.  By construction once a non-zero has been\n@@ -632,16 +684,10 @@ oacc_build_routine_dims (tree clauses)\n     for (ix = GOMP_DIM_MAX + 1; ix--;)\n       if (OMP_CLAUSE_CODE (clauses) == ids[ix])\n \t{\n-\t  if (level >= 0)\n-\t    error_at (OMP_CLAUSE_LOCATION (clauses),\n-\t\t      \"multiple loop axes specified for routine\");\n \t  level = ix;\n \t  break;\n \t}\n-\n-  /* Default to SEQ.  */\n-  if (level < 0)\n-    level = GOMP_DIM_MAX;\n+  gcc_checking_assert (level >= 0);\n \n   tree dims = NULL_TREE;\n "}, {"sha": "4241c33d99e0558bde0c2ccfa015d62a9840652d", "filename": "gcc/omp-general.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Fomp-general.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Fomp-general.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.h?ref=5bf04509f437ff175c001a1c84a13b3a845174eb", "patch": "@@ -84,6 +84,7 @@ extern tree oacc_launch_pack (unsigned code, tree device, unsigned op);\n extern tree oacc_replace_fn_attrib_attr (tree attribs, tree dims);\n extern void oacc_replace_fn_attrib (tree fn, tree dims);\n extern void oacc_set_fn_attrib (tree fn, tree clauses, vec<tree> *args);\n+extern void oacc_verify_routine_clauses (tree *, location_t);\n extern tree oacc_build_routine_dims (tree clauses);\n extern tree oacc_get_fn_attrib (tree fn);\n extern bool offloading_function_p (tree fn);"}, {"sha": "4b07888dadbc59f1e5d187de2fae1a4c3932cc41", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5bf04509f437ff175c001a1c84a13b3a845174eb", "patch": "@@ -1,5 +1,11 @@\n 2019-05-17  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR testsuite/89433\n+\t* c-c++-common/goacc/routine-2.c: Update, and move some test\n+\tinto...\n+\t* c-c++-common/goacc/routine-level-of-parallelism-1.c: ... this\n+\tnew file.\n+\n \tPR testsuite/89433\n \t* c-c++-common/goacc/classify-routine.c: Update.\n \t* gfortran.dg/goacc/classify-routine.f95: Likewise."}, {"sha": "be1510a369cae816e488298a3835110417949f7f", "filename": "gcc/testsuite/c-c++-common/goacc/routine-2.c", "status": "modified", "additions": 1, "deletions": 19, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-2.c?ref=5bf04509f437ff175c001a1c84a13b3a845174eb", "patch": "@@ -1,21 +1,3 @@\n-#pragma acc routine gang worker /* { dg-error \"multiple loop axes\" } */\n-void gang (void)\n-{\n-}\n-\n-#pragma acc routine worker vector /* { dg-error \"multiple loop axes\" } */\n-void worker (void)\n-{\n-}\n-\n-#pragma acc routine vector seq /* { dg-error \"multiple loop axes\" } */\n-void vector (void)\n-{\n-}\n-\n-#pragma acc routine seq gang /* { dg-error \"multiple loop axes\" } */\n-void seq (void)\n-{\n-}\n+/* Test invalid use of the OpenACC 'routine' directive.  */\n \n #pragma acc routine (nothing) gang /* { dg-error \"not been declared\" } */"}, {"sha": "ab0414bfed69f3f1ee271c14f3c6db27ffa2c49c", "filename": "gcc/testsuite/c-c++-common/goacc/routine-level-of-parallelism-1.c", "status": "added", "additions": 264, "deletions": 0, "changes": 264, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-level-of-parallelism-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5bf04509f437ff175c001a1c84a13b3a845174eb/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-level-of-parallelism-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-level-of-parallelism-1.c?ref=5bf04509f437ff175c001a1c84a13b3a845174eb", "patch": "@@ -0,0 +1,264 @@\n+/* Test various aspects of clauses specifying incompatible levels of\n+   parallelism with the OpenACC 'routine' directive.  */\n+\n+extern void g_1 (void);\n+#pragma acc routine (g_1) gang gang /* { dg-error \"too many 'gang' clauses\" } */\n+\n+#pragma acc routine worker worker /* { dg-error \"too many 'worker' clauses\" } */\n+void w_1 (void)\n+{\n+}\n+\n+#pragma acc routine vector vector /* { dg-error \"too many 'vector' clauses\" } */\n+void v_1 (void)\n+{\n+}\n+\n+#pragma acc routine seq seq /* { dg-error \"too many 'seq' clauses\" } */\n+extern void s_1 (void);\n+\n+\n+#pragma acc routine gang gang gang /* { dg-error \"too many 'gang' clauses\" } */\n+void g_2 (void)\n+{\n+}\n+\n+#pragma acc routine worker worker worker /* { dg-error \"too many 'worker' clauses\" } */\n+extern void w_2 (void);\n+\n+extern void v_2 (void);\n+#pragma acc routine (v_2) vector vector vector /* { dg-error \"too many 'vector' clauses\" } */\n+\n+#pragma acc routine seq seq seq /* { dg-error \"too many 'seq' clauses\" } */\n+void s_2 (void)\n+{\n+}\n+\n+\n+#pragma acc routine \\\n+  gang \\\n+  worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */\n+void g_3 (void)\n+{\n+}\n+#pragma acc routine (g_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*g_3.\" } */ \\\n+  gang \\\n+  seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */\n+#pragma acc routine (g_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*g_3.\" } */ \\\n+  gang \\\n+  vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */\n+\n+extern void w_3 (void);\n+#pragma acc routine (w_3) \\\n+  worker \\\n+  vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */\n+#pragma acc routine (w_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*w_3.\" } */ \\\n+  worker \\\n+  gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n+#pragma acc routine (w_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*w_3.\" } */ \\\n+  worker \\\n+  seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */\n+\n+#pragma acc routine \\\n+  vector \\\n+  seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */\n+void v_3 (void)\n+{\n+}\n+#pragma acc routine (v_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*v_3.\" } */ \\\n+  vector \\\n+  worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */\n+#pragma acc routine (v_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*v_3.\" } */ \\\n+  vector \\\n+  gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n+\n+extern void s_3 (void);\n+#pragma acc routine (s_3) \\\n+  seq \\\n+  gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n+#pragma acc routine (s_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*s_3.\" } */ \\\n+  seq \\\n+  vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */\n+#pragma acc routine (s_3) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*s_3.\" } */ \\\n+  seq \\\n+  worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */\n+\n+\n+#pragma acc routine \\\n+  gang gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */ \\\n+  vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n+  seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */\n+extern void g_4 (void);\n+#pragma acc routine (g_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*g_4.\" } */ \\\n+  gang gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n+  worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */ \\\n+  seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */\n+#pragma acc routine (g_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*g_4.\" } */ \\\n+  gang gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */ \\\n+  vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n+  worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */\n+\n+extern void w_4 (void);\n+#pragma acc routine (w_4) \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */ \\\n+  vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n+  gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n+#pragma acc routine (w_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*w_4.\" } */ \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n+  seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */ \\\n+  gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n+#pragma acc routine (w_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*w_4.\" } */ \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */ \\\n+  gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */ \\\n+  vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */\n+\n+#pragma acc routine \\\n+  vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */ \\\n+  seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */ \\\n+  gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n+void v_4 (void)\n+{\n+}\n+#pragma acc routine (v_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*v_4.\" } */ \\\n+  vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */ \\\n+  worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */ \\\n+  gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n+#pragma acc routine (v_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*v_4.\" } */ \\\n+  vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */ \\\n+  seq /* { dg-error \".seq. specifies a conflicting level of parallelism\" } */ \\\n+  worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */\n+\n+#pragma acc routine \\\n+  seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n+  worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */ \\\n+  gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n+void s_4 (void)\n+{\n+}\n+#pragma acc routine (s_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*s_4.\" } */ \\\n+  seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n+  gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */ \\\n+  worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */\n+#pragma acc routine (s_4) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*s_4.\" } */ \\\n+  seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  worker /* { dg-error \".worker. specifies a conflicting level of parallelism\" } */ \\\n+  vector /* { dg-error \".vector. specifies a conflicting level of parallelism\" } */ \\\n+  gang /* { dg-error \".gang. specifies a conflicting level of parallelism\" } */\n+\n+\n+#pragma acc routine \\\n+  gang gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+void g_5 (void)\n+{\n+}\n+#pragma acc routine (g_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*g_5.\" } */ \\\n+  gang gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  seq seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+#pragma acc routine (g_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*g_5.\" } */ \\\n+  gang gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+\n+#pragma acc routine \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  vector vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+extern void w_5 (void);\n+#pragma acc routine (w_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*w_5.\" } */ \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+#pragma acc routine (w_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*w_5.\" } */ \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+\n+#pragma acc routine \\\n+  vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  seq seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+extern void v_5 (void);\n+#pragma acc routine (v_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*v_5.\" } */ \\\n+  vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  seq seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+#pragma acc routine (v_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*v_5.\" } */ \\\n+  vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  seq seq seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  /* { dg-error \".seq. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+\n+extern void s_5 (void);\n+#pragma acc routine (s_5) \\\n+  seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+#pragma acc routine (s_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*s_5.\" } */ \\\n+  seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  worker worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */\n+#pragma acc routine (s_5) /* { dg-error \".#pragma acc routine. already applied to .\\[void \\]*s_5.\" } */ \\\n+  seq seq seq /* { dg-error \"too many 'seq' clauses\" } */ \\\n+  worker worker /* { dg-error \"too many 'worker' clauses\" } */ \\\n+  /* { dg-error \".worker. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  vector vector vector vector /* { dg-error \"too many 'vector' clauses\" } */ \\\n+  /* { dg-error \".vector. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */ \\\n+  gang gang /* { dg-error \"too many 'gang' clauses\" } */ \\\n+  /* { dg-error \".gang. specifies a conflicting level of parallelism\" \"\" { target *-*-* } .-1 } */"}]}