{"sha": "9866586167b7591ff1bbfe59ccdeba1dad796246", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg2NjU4NjE2N2I3NTkxZmYxYmJmZTU5Y2NkZWJhMWRhZDc5NjI0Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-11-19T17:38:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-11-19T17:38:15Z"}, "message": "tree.c (build2_stat): Allow non-POINTER_PLUS_EXPRs with non-sizetype offsets if...\n\n2008-11-19  Richard Guenther  <rguenther@suse.de>\n\n\t* tree.c (build2_stat): Allow non-POINTER_PLUS_EXPRs with\n\tnon-sizetype offsets if their precision matches that of\n\tthe pointer.\n\t* expr.c (expand_expr_real_1): Always sign-extend the offset\n\toperand of a POINTER_PLUS_EXPR.\n\nFrom-SVN: r142009", "tree": {"sha": "ff9eb564008c7a7510b130d8f124d17e3259003c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ff9eb564008c7a7510b130d8f124d17e3259003c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9866586167b7591ff1bbfe59ccdeba1dad796246", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9866586167b7591ff1bbfe59ccdeba1dad796246", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9866586167b7591ff1bbfe59ccdeba1dad796246", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9866586167b7591ff1bbfe59ccdeba1dad796246/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "059c51ecb4201c53acc659543e00fc7e2586ef82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059c51ecb4201c53acc659543e00fc7e2586ef82", "html_url": "https://github.com/Rust-GCC/gccrs/commit/059c51ecb4201c53acc659543e00fc7e2586ef82"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "6b972eec096fb84434b951f28913530c85a73b56", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9866586167b7591ff1bbfe59ccdeba1dad796246/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9866586167b7591ff1bbfe59ccdeba1dad796246/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9866586167b7591ff1bbfe59ccdeba1dad796246", "patch": "@@ -1,3 +1,11 @@\n+2008-11-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* tree.c (build2_stat): Allow non-POINTER_PLUS_EXPRs with\n+\tnon-sizetype offsets if their precision matches that of\n+\tthe pointer.\n+\t* expr.c (expand_expr_real_1): Always sign-extend the offset\n+\toperand of a POINTER_PLUS_EXPR.\n+\n 2008-11-19  Rainer Orth  <ro@TechFak.Uni-Bielefeld.DE>\n \n \t* config.gcc: Unobsolete mips-sgi-irix[56]*."}, {"sha": "0f46b199883b4525b3b3d77f0d0fc596dcf45c17", "filename": "gcc/expr.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9866586167b7591ff1bbfe59ccdeba1dad796246/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9866586167b7591ff1bbfe59ccdeba1dad796246/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=9866586167b7591ff1bbfe59ccdeba1dad796246", "patch": "@@ -8334,6 +8334,14 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       /* Even though the sizetype mode and the pointer's mode can be different\n          expand is able to handle this correctly and get the correct result out \n          of the PLUS_EXPR code.  */\n+      /* Make sure to sign-extend the sizetype offset in a POINTER_PLUS_EXPR\n+         if sizetype precision is smaller than pointer precision.  */\n+      if (TYPE_PRECISION (sizetype) < TYPE_PRECISION (type))\n+\texp = build2 (PLUS_EXPR, type,\n+\t\t      TREE_OPERAND (exp, 0),\n+\t\t      fold_convert (type,\n+\t\t\t\t    fold_convert (ssizetype,\n+\t\t\t\t\t\t  TREE_OPERAND (exp, 1))));\n     case PLUS_EXPR:\n \n       /* Check if this is a case for multiplication and addition.  */"}, {"sha": "e74b779212733fa692a8c97dafc0017b9c51486d", "filename": "gcc/tree.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9866586167b7591ff1bbfe59ccdeba1dad796246/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9866586167b7591ff1bbfe59ccdeba1dad796246/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=9866586167b7591ff1bbfe59ccdeba1dad796246", "patch": "@@ -3289,8 +3289,13 @@ build2_stat (enum tree_code code, tree tt, tree arg0, tree arg1 MEM_STAT_DECL)\n   gcc_assert (TREE_CODE_LENGTH (code) == 2);\n \n   if ((code == MINUS_EXPR || code == PLUS_EXPR || code == MULT_EXPR)\n-      && arg0 && arg1 && tt && POINTER_TYPE_P (tt))\n-    gcc_assert (TREE_CODE (arg0) == INTEGER_CST && TREE_CODE (arg1) == INTEGER_CST);\n+      && arg0 && arg1 && tt && POINTER_TYPE_P (tt)\n+      /* When sizetype precision doesn't match that of pointers\n+         we need to be able to build explicit extensions or truncations\n+\t of the offset argument.  */\n+      && TYPE_PRECISION (sizetype) == TYPE_PRECISION (tt))\n+    gcc_assert (TREE_CODE (arg0) == INTEGER_CST\n+\t\t&& TREE_CODE (arg1) == INTEGER_CST);\n \n   if (code == POINTER_PLUS_EXPR && arg0 && arg1 && tt)\n     gcc_assert (POINTER_TYPE_P (tt) && POINTER_TYPE_P (TREE_TYPE (arg0))"}]}