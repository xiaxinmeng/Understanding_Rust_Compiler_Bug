{"sha": "1f032c533faf596b4627444a2a0f9f68f05f3ef0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwMzJjNTMzZmFmNTk2YjQ2Mjc0NDRhMmEwZjlmNjhmMDVmM2VmMA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-05-31T19:49:16Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-05-31T19:49:16Z"}, "message": "PR c++/60095 - partial specialization of variable templates\n\n\tPR c++/69515\n\tPR c++/69009\n\t* pt.c (instantiate_template_1): Don't put the partial\n\tspecialization in DECL_TI_TEMPLATE.\n\t(partial_specialization_p, impartial_args): Remove.\n\t(regenerate_decl_from_template): Add args parm.\n\t(instantiate_decl): Look up the partial specialization again.\n\nFrom-SVN: r236946", "tree": {"sha": "48c650b8312aad72c6b80eebafb7ba43f71a687a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48c650b8312aad72c6b80eebafb7ba43f71a687a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f032c533faf596b4627444a2a0f9f68f05f3ef0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f032c533faf596b4627444a2a0f9f68f05f3ef0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f032c533faf596b4627444a2a0f9f68f05f3ef0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f032c533faf596b4627444a2a0f9f68f05f3ef0/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f795360d35caef4aa3a17015f415e8f3b200a3e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f795360d35caef4aa3a17015f415e8f3b200a3e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f795360d35caef4aa3a17015f415e8f3b200a3e5"}], "stats": {"total": 131, "additions": 87, "deletions": 44}, "files": [{"sha": "dabf2ec8d897c5858e5a3b51c2eb74d6c30ea62b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f032c533faf596b4627444a2a0f9f68f05f3ef0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f032c533faf596b4627444a2a0f9f68f05f3ef0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1f032c533faf596b4627444a2a0f9f68f05f3ef0", "patch": "@@ -1,5 +1,14 @@\n 2016-05-31  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/60095\n+\tPR c++/69515\n+\tPR c++/69009\n+\t* pt.c (instantiate_template_1): Don't put the partial\n+\tspecialization in DECL_TI_TEMPLATE.\n+\t(partial_specialization_p, impartial_args): Remove.\n+\t(regenerate_decl_from_template): Add args parm.\n+\t(instantiate_decl): Look up the partial specialization again.\n+\n \tPR c++/71227\n \t* pt.c (check_explicit_specialization): Give better diagnostic about\n \tspecializing a hidden friend."}, {"sha": "b25cd13659e31af13f3e8c16c1557d5e812ccde4", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 25, "deletions": 43, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f032c533faf596b4627444a2a0f9f68f05f3ef0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f032c533faf596b4627444a2a0f9f68f05f3ef0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1f032c533faf596b4627444a2a0f9f68f05f3ef0", "patch": "@@ -182,7 +182,6 @@ static tree copy_template_args (tree);\n static tree tsubst_template_arg (tree, tree, tsubst_flags_t, tree);\n static tree tsubst_template_args (tree, tree, tsubst_flags_t, tree);\n static tree tsubst_template_parms (tree, tree, tsubst_flags_t);\n-static void regenerate_decl_from_template (tree, tree);\n static tree most_specialized_partial_spec (tree, tsubst_flags_t);\n static tree tsubst_aggr_type (tree, tree, tsubst_flags_t, tree, int);\n static tree tsubst_arg_types (tree, tree, tree, tsubst_flags_t, tree);\n@@ -17398,6 +17397,7 @@ instantiate_template_1 (tree tmpl, tree orig_args, tsubst_flags_t complain)\n \n   tree pattern = DECL_TEMPLATE_RESULT (gen_tmpl);\n \n+  fndecl = NULL_TREE;\n   if (VAR_P (pattern))\n     {\n       /* We need to determine if we're using a partial or explicit\n@@ -17409,14 +17409,16 @@ instantiate_template_1 (tree tmpl, tree orig_args, tsubst_flags_t complain)\n \tpattern = error_mark_node;\n       else if (elt)\n \t{\n-\t  tmpl = TREE_VALUE (elt);\n-\t  pattern = DECL_TEMPLATE_RESULT (tmpl);\n-\t  targ_ptr = TREE_PURPOSE (elt);\n+\t  tree partial_tmpl = TREE_VALUE (elt);\n+\t  tree partial_args = TREE_PURPOSE (elt);\n+\t  tree partial_pat = DECL_TEMPLATE_RESULT (partial_tmpl);\n+\t  fndecl = tsubst (partial_pat, partial_args, complain, gen_tmpl);\n \t}\n     }\n \n   /* Substitute template parameters to obtain the specialization.  */\n-  fndecl = tsubst (pattern, targ_ptr, complain, gen_tmpl);\n+  if (fndecl == NULL_TREE)\n+    fndecl = tsubst (pattern, targ_ptr, complain, gen_tmpl);\n   if (DECL_CLASS_SCOPE_P (gen_tmpl))\n     pop_nested_class ();\n   pop_from_top_level ();\n@@ -20888,36 +20890,6 @@ most_general_template (tree decl)\n   return decl;\n }\n \n-/* True iff the TEMPLATE_DECL tmpl is a partial specialization.  */\n-\n-static bool\n-partial_specialization_p (tree tmpl)\n-{\n-  /* Any specialization has DECL_TEMPLATE_SPECIALIZATION.  */\n-  if (!DECL_TEMPLATE_SPECIALIZATION (tmpl))\n-    return false;\n-  tree t = DECL_TI_TEMPLATE (tmpl);\n-  /* A specialization that fully specializes one of the containing classes is\n-     not a partial specialization.  */\n-  return (list_length (DECL_TEMPLATE_PARMS (tmpl))\n-\t  == list_length (DECL_TEMPLATE_PARMS (t)));\n-}\n-\n-/* If TMPL is a partial specialization, return the arguments for its primary\n-   template.  */\n-\n-static tree\n-impartial_args (tree tmpl, tree args)\n-{\n-  if (!partial_specialization_p (tmpl))\n-    return args;\n-\n-  /* If TMPL is a partial specialization, we need to substitute to get\n-     the args for the primary template.  */\n-  return tsubst_template_args (DECL_TI_ARGS (tmpl), args,\n-\t\t\t       tf_warning_or_error, tmpl);\n-}\n-\n /* Return the most specialized of the template partial specializations\n    which can produce TARGET, a specialization of some class or variable\n    template.  The value returned is actually a TREE_LIST; the TREE_VALUE is\n@@ -21419,14 +21391,12 @@ do_type_instantiation (tree t, tree storage, tsubst_flags_t complain)\n    to instantiate the DECL, we regenerate it.  */\n \n static void\n-regenerate_decl_from_template (tree decl, tree tmpl)\n+regenerate_decl_from_template (tree decl, tree tmpl, tree args)\n {\n   /* The arguments used to instantiate DECL, from the most general\n      template.  */\n-  tree args;\n   tree code_pattern;\n \n-  args = DECL_TI_ARGS (decl);\n   code_pattern = DECL_TEMPLATE_RESULT (tmpl);\n \n   /* Make sure that we can see identifiers, and compute access\n@@ -21742,7 +21712,7 @@ instantiate_decl (tree d, int defer_ok,\n     return d;\n \n   gen_tmpl = most_general_template (tmpl);\n-  gen_args = impartial_args (tmpl, DECL_TI_ARGS (d));\n+  gen_args = DECL_TI_ARGS (d);\n \n   if (tmpl != gen_tmpl)\n     /* We should already have the extra args.  */\n@@ -21761,6 +21731,20 @@ instantiate_decl (tree d, int defer_ok,\n   /* Set TD to the template whose DECL_TEMPLATE_RESULT is the pattern\n      for the instantiation.  */\n   td = template_for_substitution (d);\n+  args = gen_args;\n+\n+  if (VAR_P (d))\n+    {\n+      /* Look up an explicit specialization, if any.  */\n+      tree tid = lookup_template_variable (gen_tmpl, gen_args);\n+      tree elt = most_specialized_partial_spec (tid, tf_warning_or_error);\n+      if (elt && elt != error_mark_node)\n+\t{\n+\t  td = TREE_VALUE (elt);\n+\t  args = TREE_PURPOSE (elt);\n+\t}\n+    }\n+\n   code_pattern = DECL_TEMPLATE_RESULT (td);\n \n   /* We should never be trying to instantiate a member of a class\n@@ -21773,9 +21757,7 @@ instantiate_decl (tree d, int defer_ok,\n        outside the class, we may have too many arguments.  Drop the\n        ones we don't need.  The same is true for specializations.  */\n     args = get_innermost_template_args\n-      (gen_args, TMPL_PARMS_DEPTH  (DECL_TEMPLATE_PARMS (td)));\n-  else\n-    args = gen_args;\n+      (args, TMPL_PARMS_DEPTH (DECL_TEMPLATE_PARMS (td)));\n \n   if (TREE_CODE (d) == FUNCTION_DECL)\n     {\n@@ -21941,7 +21923,7 @@ instantiate_decl (tree d, int defer_ok,\n \n   /* Regenerate the declaration in case the template has been modified\n      by a subsequent redeclaration.  */\n-  regenerate_decl_from_template (d, td);\n+  regenerate_decl_from_template (d, td, args);\n \n   /* We already set the file and line above.  Reset them now in case\n      they changed as a result of calling regenerate_decl_from_template.  */"}, {"sha": "5170a5bda52f27175f214bd0ef85780e09f0e61e", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ39.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f032c533faf596b4627444a2a0f9f68f05f3ef0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ39.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f032c533faf596b4627444a2a0f9f68f05f3ef0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ39.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ39.C?ref=1f032c533faf596b4627444a2a0f9f68f05f3ef0", "patch": "@@ -1,5 +1,5 @@\n // PR c++/66260\n-// { dg-do compile { target c++14 } }\n+// { dg-do assemble { target c++14 } }\n \n template <class>\n constexpr bool foo = false;"}, {"sha": "5ba1b9d4579e865ede52bc2eb7cd6cb6902ad4b0", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ39a.C", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f032c533faf596b4627444a2a0f9f68f05f3ef0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ39a.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f032c533faf596b4627444a2a0f9f68f05f3ef0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ39a.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ39a.C?ref=1f032c533faf596b4627444a2a0f9f68f05f3ef0", "patch": "@@ -0,0 +1,27 @@\n+// PR c++/66260\n+// { dg-do compile { target c++14 } }\n+\n+template <class>\n+bool foo = false;\n+template <>\n+bool foo<int> = true;\n+template <class T, int N>\n+bool foo<T[N]> = foo<T>;\n+\n+#define assert(X) if (!(X)) __builtin_abort();\n+\n+int main()\n+{\n+  // { dg-final { scan-assembler \"_Z3fooIiE\" } }\n+  assert(foo<int>);\n+  // { dg-final { scan-assembler \"_Z3fooIdE\" } }\n+  assert(!foo<double>);\n+  // { dg-final { scan-assembler \"_Z3fooIA3_iE\" } }\n+  assert(foo<int[3]>);\n+  // { dg-final { scan-assembler \"_Z3fooIA3_dE\" } }\n+  assert(!foo<double[3]>);\n+  // { dg-final { scan-assembler \"_Z3fooIA2_A5_A3_iE\" } }\n+  assert(foo<int[2][5][3]>);\n+  // { dg-final { scan-assembler \"_Z3fooIA2_A5_A3_dE\" } }\n+  assert(!foo<double[2][5][3]>);\n+}"}, {"sha": "f85ef9c117772e2a259e877d8c279e8dd42be39f", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ51.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f032c533faf596b4627444a2a0f9f68f05f3ef0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ51.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f032c533faf596b4627444a2a0f9f68f05f3ef0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ51.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ51.C?ref=1f032c533faf596b4627444a2a0f9f68f05f3ef0", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/60095\n+// { dg-do link { target c++14 } }\n+\n+template <class>\n+constexpr bool b = false;\n+template<typename T>\n+constexpr bool b<T*> = true;\n+int main() {\n+    b<int*>;\n+    b<double*>;\n+}"}, {"sha": "61fd19e44cebccc51414d16474fd4faf381ab867", "filename": "gcc/testsuite/g++.dg/cpp1y/var-templ52.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f032c533faf596b4627444a2a0f9f68f05f3ef0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f032c533faf596b4627444a2a0f9f68f05f3ef0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fvar-templ52.C?ref=1f032c533faf596b4627444a2a0f9f68f05f3ef0", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/69515\n+// { dg-do link { target c++14 } }\n+\n+struct A { A(int = 0) {} };\n+\n+template<class...> class meow;\n+\n+template<typename T> A foo;\n+template<typename... Ts> A foo<meow<Ts...>> = 1;\n+\n+auto&& a = foo<meow<int>>;\n+auto&& b = foo<meow<int, int>>;\n+\n+int main() {}"}]}