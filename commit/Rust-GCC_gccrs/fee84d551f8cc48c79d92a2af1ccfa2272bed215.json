{"sha": "fee84d551f8cc48c79d92a2af1ccfa2272bed215", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVlODRkNTUxZjhjYzQ4Yzc5ZDkyYTJhZjFjY2ZhMjI3MmJlZDIxNQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-05-11T20:30:44Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2017-05-11T20:30:44Z"}, "message": "2017-05-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\t* include/bits/stl_tree.h [_GLIBCXX_INLINE_VERSION]\n\t(_Rb_tree_impl<>): Remove _Is_pod_comparator\n\ttemplate parameter.\n\nFrom-SVN: r247929", "tree": {"sha": "ce42d76eb5f2c082712eb0a4e6d994bab660a99a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce42d76eb5f2c082712eb0a4e6d994bab660a99a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fee84d551f8cc48c79d92a2af1ccfa2272bed215", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee84d551f8cc48c79d92a2af1ccfa2272bed215", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee84d551f8cc48c79d92a2af1ccfa2272bed215", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee84d551f8cc48c79d92a2af1ccfa2272bed215/comments", "author": null, "committer": null, "parents": [{"sha": "1bea0f26630c2c7fc35968a6e646bd67a706bf08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bea0f26630c2c7fc35968a6e646bd67a706bf08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bea0f26630c2c7fc35968a6e646bd67a706bf08"}], "stats": {"total": 208, "additions": 107, "deletions": 101}, "files": [{"sha": "1aea9ca01c8ca8275820d944865c39830fe26be2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee84d551f8cc48c79d92a2af1ccfa2272bed215/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee84d551f8cc48c79d92a2af1ccfa2272bed215/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fee84d551f8cc48c79d92a2af1ccfa2272bed215", "patch": "@@ -1,5 +1,9 @@\n 2017-05-11  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n+\t* include/bits/stl_tree.h [_GLIBCXX_INLINE_VERSION]\n+\t(_Rb_tree_impl<>): Remove _Is_pod_comparator\n+\ttemplate parameter.\n+\n \t* include/debug/safe_container.h [_GLIBCXX_USE_CXX11_ABI]\n \t(_Safe_container<>): Remove _IsCxx11AllocatorAware template parameter.\n \t* include/debug/string: Adapt.\n@@ -48,8 +52,6 @@\n \t* include/std/variant: Adapt.\n \t* python/libstdcxx/v6/printers.py: Adapt.\n \t* testsuite/libstdc++-prettyprinters/48362.cc: Adapt.\n-\t* include/bits/stl_tree.h (_Rb_tree_impl<>): Remove _Is_pod_comparator\n-\ttemplate parameter when version namespace is active.\n \n \t* include/bits/stl_algobase.h (std::__iter_swap<false>): Remove\n \t_GLIBCXX_MOVE usage."}, {"sha": "aedee06be765956f544e81c52774151e1a73f989", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 103, "deletions": 99, "changes": 202, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fee84d551f8cc48c79d92a2af1ccfa2272bed215/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fee84d551f8cc48c79d92a2af1ccfa2272bed215/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=fee84d551f8cc48c79d92a2af1ccfa2272bed215", "patch": "@@ -91,7 +91,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // time begin(), and to the rightmost node of the tree, to enable\n   // linear time performance when used with the generic set algorithms\n   // (set_union, etc.)\n-  // \n+  //\n   // (2) when a node being deleted has two children its successor node\n   // is relinked into its place, rather than copied, so that the only\n   // iterators invalidated are those referring to the deleted node.\n@@ -260,11 +260,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef _Tp* pointer;\n \n       typedef bidirectional_iterator_tag iterator_category;\n-      typedef ptrdiff_t                  difference_type;\n+      typedef ptrdiff_t\t\t  difference_type;\n \n-      typedef _Rb_tree_iterator<_Tp>        _Self;\n+      typedef _Rb_tree_iterator<_Tp>\t_Self;\n       typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;\n-      typedef _Rb_tree_node<_Tp>*           _Link_type;\n+      typedef _Rb_tree_node<_Tp>*\t   _Link_type;\n \n       _Rb_tree_iterator() _GLIBCXX_NOEXCEPT\n       : _M_node() { }\n@@ -325,18 +325,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     struct _Rb_tree_const_iterator\n     {\n-      typedef _Tp        value_type;\n+      typedef _Tp\t value_type;\n       typedef const _Tp& reference;\n       typedef const _Tp* pointer;\n \n       typedef _Rb_tree_iterator<_Tp> iterator;\n \n       typedef bidirectional_iterator_tag iterator_category;\n-      typedef ptrdiff_t                  difference_type;\n+      typedef ptrdiff_t\t\t\t difference_type;\n \n-      typedef _Rb_tree_const_iterator<_Tp>        _Self;\n-      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;\n-      typedef const _Rb_tree_node<_Tp>*           _Link_type;\n+      typedef _Rb_tree_const_iterator<_Tp>\t\t_Self;\n+      typedef _Rb_tree_node_base::_Const_Base_ptr\t_Base_ptr;\n+      typedef const _Rb_tree_node<_Tp>*\t\t\t_Link_type;\n \n       _Rb_tree_const_iterator() _GLIBCXX_NOEXCEPT\n       : _M_node() { }\n@@ -404,20 +404,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Val>\n     inline bool\n     operator==(const _Rb_tree_iterator<_Val>& __x,\n-               const _Rb_tree_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT\n+\t       const _Rb_tree_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT\n     { return __x._M_node == __y._M_node; }\n \n   template<typename _Val>\n     inline bool\n     operator!=(const _Rb_tree_iterator<_Val>& __x,\n-               const _Rb_tree_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT\n+\t       const _Rb_tree_const_iterator<_Val>& __y) _GLIBCXX_NOEXCEPT\n     { return __x._M_node != __y._M_node; }\n \n   void\n   _Rb_tree_insert_and_rebalance(const bool __insert_left,\n-                                _Rb_tree_node_base* __x,\n-                                _Rb_tree_node_base* __p,\n-                                _Rb_tree_node_base& __header) throw ();\n+\t\t\t\t_Rb_tree_node_base* __x,\n+\t\t\t\t_Rb_tree_node_base* __p,\n+\t\t\t\t_Rb_tree_node_base& __header) throw ();\n \n   _Rb_tree_node_base*\n   _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,\n@@ -440,11 +440,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc = allocator<_Val> >\n+\t   typename _Compare, typename _Alloc = allocator<_Val> >\n     class _Rb_tree\n     {\n       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template\n-        rebind<_Rb_tree_node<_Val> >::other _Node_allocator;\n+\trebind<_Rb_tree_node<_Val> >::other _Node_allocator;\n \n       typedef __gnu_cxx::__alloc_traits<_Node_allocator> _Alloc_traits;\n \n@@ -573,7 +573,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       _Node_allocator&\n       _M_get_Node_allocator() _GLIBCXX_NOEXCEPT\n       { return *static_cast<_Node_allocator*>(&this->_M_impl); }\n-      \n+\n       const _Node_allocator&\n       _M_get_Node_allocator() const _GLIBCXX_NOEXCEPT\n       { return *static_cast<const _Node_allocator*>(&this->_M_impl); }\n@@ -636,8 +636,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n       template<typename... _Args>\n-        _Link_type\n-        _M_create_node(_Args&&... __args)\n+\t_Link_type\n+\t_M_create_node(_Args&&... __args)\n \t{\n \t  _Link_type __tmp = _M_get_node();\n \t  _M_construct_node(__tmp, std::forward<_Args>(__args)...);\n@@ -671,14 +671,18 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n \n     protected:\n+#if _GLIBCXX_INLINE_VERSION\n+      template<typename _Key_compare>\n+#else\n       // Unused _Is_pod_comparator is kept as it is part of mangled name.\n       template<typename _Key_compare,\n \t       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>\n-        struct _Rb_tree_impl\n+#endif\n+\tstruct _Rb_tree_impl\n \t: public _Node_allocator\n \t, public _Rb_tree_key_compare<_Key_compare>\n \t, public _Rb_tree_header\n-        {\n+\t{\n \t  typedef _Rb_tree_key_compare<_Key_compare> _Base_key_compare;\n \n #if __cplusplus < 201103L\n@@ -828,19 +832,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     private:\n #if __cplusplus >= 201103L\n       template<typename _Arg, typename _NodeGen>\n-        iterator\n+\titerator\n \t_M_insert_(_Base_ptr __x, _Base_ptr __y, _Arg&& __v, _NodeGen&);\n \n       iterator\n       _M_insert_node(_Base_ptr __x, _Base_ptr __y, _Link_type __z);\n \n       template<typename _Arg>\n-        iterator\n-        _M_insert_lower(_Base_ptr __y, _Arg&& __v);\n+\titerator\n+\t_M_insert_lower(_Base_ptr __y, _Arg&& __v);\n \n       template<typename _Arg>\n-        iterator\n-        _M_insert_equal_lower(_Arg&& __x);\n+\titerator\n+\t_M_insert_equal_lower(_Arg&& __x);\n \n       iterator\n       _M_insert_lower_node(_Base_ptr __p, _Link_type __z);\n@@ -991,7 +995,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       { return _M_impl._M_node_count == 0; }\n \n       size_type\n-      size() const _GLIBCXX_NOEXCEPT \n+      size() const _GLIBCXX_NOEXCEPT\n       { return _M_impl._M_node_count; }\n \n       size_type\n@@ -1005,15 +1009,15 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       // Insert/erase.\n #if __cplusplus >= 201103L\n       template<typename _Arg>\n-        pair<iterator, bool>\n-        _M_insert_unique(_Arg&& __x);\n+\tpair<iterator, bool>\n+\t_M_insert_unique(_Arg&& __x);\n \n       template<typename _Arg>\n-        iterator\n-        _M_insert_equal(_Arg&& __x);\n+\titerator\n+\t_M_insert_equal(_Arg&& __x);\n \n       template<typename _Arg, typename _NodeGen>\n-        iterator\n+\titerator\n \t_M_insert_unique_(const_iterator __pos, _Arg&& __x, _NodeGen&);\n \n       template<typename _Arg>\n@@ -1083,12 +1087,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n       template<typename _InputIterator>\n-        void\n-        _M_insert_unique(_InputIterator __first, _InputIterator __last);\n+\tvoid\n+\t_M_insert_unique(_InputIterator __first, _InputIterator __last);\n \n       template<typename _InputIterator>\n-        void\n-        _M_insert_equal(_InputIterator __first, _InputIterator __last);\n+\tvoid\n+\t_M_insert_equal(_InputIterator __first, _InputIterator __last);\n \n     private:\n       void\n@@ -1166,7 +1170,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       void\n       clear() _GLIBCXX_NOEXCEPT\n       {\n-        _M_erase(_M_begin());\n+\t_M_erase(_M_begin());\n \t_M_impl._M_reset();\n       }\n \n@@ -1526,7 +1530,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     inline bool\n     operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n \t       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n@@ -1536,7 +1540,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     inline bool\n     operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n \t      const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n@@ -1546,43 +1550,43 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     inline bool\n     operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n \t       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n     { return !(__x == __y); }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     inline bool\n     operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n \t      const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n     { return __y < __x; }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     inline bool\n     operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n \t       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n     { return !(__y < __x); }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     inline bool\n     operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n \t       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n     { return !(__x < __y); }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     inline void\n     swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,\n \t _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)\n     { __x.swap(__y); }\n \n #if __cplusplus >= 201103L\n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _Rb_tree(_Rb_tree&& __x, _Node_allocator&& __a)\n     : _M_impl(__x._M_impl._M_key_compare, std::move(__a))\n@@ -1593,7 +1597,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_move_data(_Rb_tree& __x, std::false_type)\n@@ -1614,7 +1618,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     inline void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_move_assign(_Rb_tree& __x, true_type)\n@@ -1627,7 +1631,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_move_assign(_Rb_tree& __x, false_type)\n@@ -1653,7 +1657,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     inline _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     operator=(_Rb_tree&& __x)\n@@ -1666,7 +1670,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     template<typename _Iterator>\n       void\n       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n@@ -1679,7 +1683,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     template<typename _Iterator>\n       void\n       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n@@ -1693,7 +1697,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     operator=(const _Rb_tree& __x)\n@@ -1728,7 +1732,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n #if __cplusplus >= 201103L\n     template<typename _Arg, typename _NodeGen>\n #else\n@@ -1757,7 +1761,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n #if __cplusplus >= 201103L\n     template<typename _Arg>\n #endif\n@@ -1782,7 +1786,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n #if __cplusplus >= 201103L\n     template<typename _Arg>\n #endif\n@@ -1800,7 +1804,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  __y = __x;\n \t  __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?\n-\t        _S_left(__x) : _S_right(__x);\n+\t\t_S_left(__x) : _S_right(__x);\n \t}\n       return _M_insert_lower(__y, _GLIBCXX_FORWARD(_Arg, __v));\n     }\n@@ -1843,7 +1847,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_erase(_Link_type __x)\n@@ -1859,7 +1863,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t      _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n@@ -1875,7 +1879,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t      _Compare, _Alloc>::const_iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n@@ -1891,7 +1895,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t      _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n@@ -1907,7 +1911,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t      _Compare, _Alloc>::const_iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n@@ -1923,7 +1927,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t\t   _Compare, _Alloc>::iterator,\n \t typename _Rb_tree<_Key, _Val, _KeyOfValue,\n@@ -1946,7 +1950,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      __y = __x, __x = _S_left(__x);\n \t      __xu = _S_right(__xu);\n \t      return pair<iterator,\n-\t\t          iterator>(_M_lower_bound(__x, __y, __k),\n+\t\t\t  iterator>(_M_lower_bound(__x, __y, __k),\n \t\t\t\t    _M_upper_bound(__xu, __yu, __k));\n \t    }\n \t}\n@@ -1955,7 +1959,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t\t   _Compare, _Alloc>::const_iterator,\n \t typename _Rb_tree<_Key, _Val, _KeyOfValue,\n@@ -1978,7 +1982,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t      __y = __x, __x = _S_left(__x);\n \t      __xu = _S_right(__xu);\n \t      return pair<const_iterator,\n-\t\t          const_iterator>(_M_lower_bound(__x, __y, __k),\n+\t\t\t  const_iterator>(_M_lower_bound(__x, __y, __k),\n \t\t\t\t\t  _M_upper_bound(__xu, __yu, __k));\n \t    }\n \t}\n@@ -1987,7 +1991,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     swap(_Rb_tree& __t)\n@@ -2005,7 +2009,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  std::swap(_M_root(),__t._M_root());\n \t  std::swap(_M_leftmost(),__t._M_leftmost());\n \t  std::swap(_M_rightmost(),__t._M_rightmost());\n-\t  \n+\n \t  _M_root()->_M_parent = _M_end();\n \t  __t._M_root()->_M_parent = __t._M_end();\n \t  std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);\n@@ -2018,7 +2022,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t\t   _Compare, _Alloc>::_Base_ptr,\n \t typename _Rb_tree<_Key, _Val, _KeyOfValue,\n@@ -2050,7 +2054,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t\t   _Compare, _Alloc>::_Base_ptr,\n \t typename _Rb_tree<_Key, _Val, _KeyOfValue,\n@@ -2065,13 +2069,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  __y = __x;\n \t  __x = _M_impl._M_key_compare(__k, _S_key(__x)) ?\n-\t        _S_left(__x) : _S_right(__x);\n+\t\t_S_left(__x) : _S_right(__x);\n \t}\n       return _Res(__x, __y);\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n #if __cplusplus >= 201103L\n     template<typename _Arg>\n #endif\n@@ -2100,7 +2104,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n #if __cplusplus >= 201103L\n     template<typename _Arg>\n #endif\n@@ -2120,10 +2124,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t\t   _Compare, _Alloc>::_Base_ptr,\n-         typename _Rb_tree<_Key, _Val, _KeyOfValue,\n+\t typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t\t   _Compare, _Alloc>::_Base_ptr>\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_get_insert_hint_unique_pos(const_iterator __position,\n@@ -2179,7 +2183,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n #if __cplusplus >= 201103L\n     template<typename _Arg, typename _NodeGen>\n #else\n@@ -2206,10 +2210,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t\t   _Compare, _Alloc>::_Base_ptr,\n-         typename _Rb_tree<_Key, _Val, _KeyOfValue,\n+\t typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t\t   _Compare, _Alloc>::_Base_ptr>\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_get_insert_hint_equal_pos(const_iterator __position, const key_type& __k)\n@@ -2244,7 +2248,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t}\n       else\n \t{\n-\t  // ... then try after.  \n+\t  // ... then try after.\n \t  iterator __after = __pos;\n \t  if (__pos._M_node == _M_rightmost())\n \t    return _Res(0, _M_rightmost());\n@@ -2261,7 +2265,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n #if __cplusplus >= 201103L\n     template<typename _Arg, typename _NodeGen>\n #else\n@@ -2290,7 +2294,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n #if __cplusplus >= 201103L\n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_insert_node(_Base_ptr __x, _Base_ptr __p, _Link_type __z)\n@@ -2306,7 +2310,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_insert_lower_node(_Base_ptr __p, _Link_type __z)\n@@ -2322,7 +2326,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_insert_equal_lower_node(_Link_type __z)\n@@ -2333,13 +2337,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t{\n \t  __y = __x;\n \t  __x = !_M_impl._M_key_compare(_S_key(__x), _S_key(__z)) ?\n-\t        _S_left(__x) : _S_right(__x);\n+\t\t_S_left(__x) : _S_right(__x);\n \t}\n       return _M_insert_lower_node(__y, __z);\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     template<typename... _Args>\n       pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t\t     _Compare, _Alloc>::iterator, bool>\n@@ -2366,7 +2370,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     template<typename... _Args>\n       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n@@ -2387,7 +2391,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     template<typename... _Args>\n       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n@@ -2413,7 +2417,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     template<typename... _Args>\n       typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator\n       _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n@@ -2439,7 +2443,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #endif\n \n   template<typename _Key, typename _Val, typename _KoV,\n-           typename _Cmp, typename _Alloc>\n+\t   typename _Cmp, typename _Alloc>\n     template<class _II>\n       void\n       _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::\n@@ -2451,7 +2455,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n   template<typename _Key, typename _Val, typename _KoV,\n-           typename _Cmp, typename _Alloc>\n+\t   typename _Cmp, typename _Alloc>\n     template<class _II>\n       void\n       _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::\n@@ -2463,7 +2467,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_erase_aux(const_iterator __position)\n@@ -2477,7 +2481,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     _M_erase_aux(const_iterator __first, const_iterator __last)\n@@ -2490,7 +2494,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     erase(const _Key& __x)\n@@ -2502,7 +2506,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     void\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     erase(const _Key* __first, const _Key* __last)\n@@ -2512,7 +2516,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t      _Compare, _Alloc>::iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n@@ -2525,20 +2529,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue,\n \t\t      _Compare, _Alloc>::const_iterator\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     find(const _Key& __k) const\n     {\n       const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);\n       return (__j == end()\n-\t      || _M_impl._M_key_compare(__k, \n+\t      || _M_impl._M_key_compare(__k,\n \t\t\t\t\t_S_key(__j._M_node))) ? end() : __j;\n     }\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type\n     _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::\n     count(const _Key& __k) const\n@@ -2550,10 +2554,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   _GLIBCXX_PURE unsigned int\n   _Rb_tree_black_count(const _Rb_tree_node_base* __node,\n-                       const _Rb_tree_node_base* __root) throw ();\n+\t\t       const _Rb_tree_node_base* __root) throw ();\n \n   template<typename _Key, typename _Val, typename _KeyOfValue,\n-           typename _Compare, typename _Alloc>\n+\t   typename _Compare, typename _Alloc>\n     bool\n     _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const\n     {"}]}