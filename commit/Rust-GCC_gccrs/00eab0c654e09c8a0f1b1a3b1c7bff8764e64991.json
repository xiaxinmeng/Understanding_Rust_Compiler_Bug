{"sha": "00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "node_id": "C_kwDOANBUbNoAKDAwZWFiMGM2NTRlMDljOGEwZjFiMWEzYjFjN2JmZjg3NjRlNjQ5OTE", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-07-12T13:09:44Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-07-12T13:09:44Z"}, "message": "Add internal functions for iround etc. [PR106253]\n\nThe PR is about the aarch64 port using an ACLE built-in function\nto vectorise a scalar function call, even though the ECF_* flags for\nthe ACLE function didn't match the ECF_* flags for the scalar call.\n\nTo some extent that kind of difference is inevitable, since the\nACLE intrinsics are supposed to follow the behaviour of the\nunderlying instruction as closely as possible.  Also, using\ntarget-specific builtins has the drawback of limiting further\ngimple optimisation, since the gimple optimisers won't know what\nthe function does.\n\nWe handle several other maths functions, including round, floor\nand ceil, by defining directly-mapped internal functions that\nare linked to the associated built-in functions.  This has two\nmain advantages:\n\n- it means that, internally, we are not restricted to the set of\n  scalar types that happen to have associated C/C++ functions\n\n- the functions (and thus the underlying optabs) extend naturally\n  to vectors\n\nThis patch takes the same approach for the remaining functions\nhandled by aarch64_builtin_vectorized_function.\n\ngcc/\n\tPR target/106253\n\t* predict.h (insn_optimization_type): Declare.\n\t* predict.cc (insn_optimization_type): New function.\n\t* internal-fn.def (IFN_ICEIL, IFN_IFLOOR, IFN_IRINT, IFN_IROUND)\n\t(IFN_LCEIL, IFN_LFLOOR, IFN_LRINT, IFN_LROUND, IFN_LLCEIL)\n\t(IFN_LLFLOOR, IFN_LLRINT, IFN_LLROUND): New internal functions.\n\t* internal-fn.cc (unary_convert_direct): New macro.\n\t(expand_convert_optab_fn): New function.\n\t(expand_unary_convert_optab_fn): New macro.\n\t(direct_unary_convert_optab_supported_p): Likewise.\n\t* optabs.cc (expand_sfix_optab): Pass insn_optimization_type to\n\tconvert_optab_handler.\n\t* config/aarch64/aarch64-protos.h\n\t(aarch64_builtin_vectorized_function): Delete.\n\t* config/aarch64/aarch64-builtins.cc\n\t(aarch64_builtin_vectorized_function): Delete.\n\t* config/aarch64/aarch64.cc\n\t(TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION): Delete.\n\t* config/i386/i386.cc (ix86_optab_supported_p): Handle lround_optab.\n\t* config/i386/i386.md (lround<X87MODEF:mode><SWI248x:mode>2): Remove\n\toptimize_insn_for_size_p test.\n\ngcc/testsuite/\n\tPR target/106253\n\t* gcc.target/aarch64/vect_unary_1.c: Add tests for iroundf,\n\tllround, iceilf, llceil, ifloorf, llfloor, irintf and llrint.\n\t* gfortran.dg/vect/pr106253.f: New test.", "tree": {"sha": "ed24b3892cc22b0ca6d05528e728b019613d2401", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed24b3892cc22b0ca6d05528e728b019613d2401"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b06b9d23799ecad5db710e80f214fac0ae175f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b06b9d23799ecad5db710e80f214fac0ae175f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b06b9d23799ecad5db710e80f214fac0ae175f3"}], "stats": {"total": 250, "additions": 157, "deletions": 93}, "files": [{"sha": "adfddb8b215731511752206b7c93902573963ed2", "filename": "gcc/config/aarch64/aarch64-builtins.cc", "status": "modified", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-builtins.cc?ref=00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "patch": "@@ -2555,89 +2555,6 @@ aarch64_general_expand_builtin (unsigned int fcode, tree exp, rtx target,\n   gcc_unreachable ();\n }\n \n-tree\n-aarch64_builtin_vectorized_function (unsigned int fn, tree type_out,\n-\t\t\t\t     tree type_in)\n-{\n-  machine_mode in_mode, out_mode;\n-\n-  if (TREE_CODE (type_out) != VECTOR_TYPE\n-      || TREE_CODE (type_in) != VECTOR_TYPE)\n-    return NULL_TREE;\n-\n-  out_mode = TYPE_MODE (type_out);\n-  in_mode = TYPE_MODE (type_in);\n-\n-#undef AARCH64_CHECK_BUILTIN_MODE\n-#define AARCH64_CHECK_BUILTIN_MODE(C, N) 1\n-#define AARCH64_FIND_FRINT_VARIANT(N) \\\n-  (AARCH64_CHECK_BUILTIN_MODE (2, D) \\\n-    ? aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_##N##v2df] \\\n-    : (AARCH64_CHECK_BUILTIN_MODE (4, S) \\\n-\t? aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_##N##v4sf] \\\n-\t: (AARCH64_CHECK_BUILTIN_MODE (2, S) \\\n-\t   ? aarch64_builtin_decls[AARCH64_SIMD_BUILTIN_UNOP_##N##v2sf] \\\n-\t   : NULL_TREE)))\n-  switch (fn)\n-    {\n-#undef AARCH64_CHECK_BUILTIN_MODE\n-#define AARCH64_CHECK_BUILTIN_MODE(C, N) \\\n-  (out_mode == V##C##N##Imode && in_mode == V##C##N##Fmode)\n-    CASE_CFN_IFLOOR:\n-    CASE_CFN_LFLOOR:\n-    CASE_CFN_LLFLOOR:\n-      {\n-\tenum aarch64_builtins builtin;\n-\tif (AARCH64_CHECK_BUILTIN_MODE (2, D))\n-\t  builtin = AARCH64_SIMD_BUILTIN_UNOP_lfloorv2dfv2di;\n-\telse if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-\t  builtin = AARCH64_SIMD_BUILTIN_UNOP_lfloorv4sfv4si;\n-\telse if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n-\t  builtin = AARCH64_SIMD_BUILTIN_UNOP_lfloorv2sfv2si;\n-\telse\n-\t  return NULL_TREE;\n-\n-\treturn aarch64_builtin_decls[builtin];\n-      }\n-    CASE_CFN_ICEIL:\n-    CASE_CFN_LCEIL:\n-    CASE_CFN_LLCEIL:\n-      {\n-\tenum aarch64_builtins builtin;\n-\tif (AARCH64_CHECK_BUILTIN_MODE (2, D))\n-\t  builtin = AARCH64_SIMD_BUILTIN_UNOP_lceilv2dfv2di;\n-\telse if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-\t  builtin = AARCH64_SIMD_BUILTIN_UNOP_lceilv4sfv4si;\n-\telse if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n-\t  builtin = AARCH64_SIMD_BUILTIN_UNOP_lceilv2sfv2si;\n-\telse\n-\t  return NULL_TREE;\n-\n-\treturn aarch64_builtin_decls[builtin];\n-      }\n-    CASE_CFN_IROUND:\n-    CASE_CFN_LROUND:\n-    CASE_CFN_LLROUND:\n-      {\n-\tenum aarch64_builtins builtin;\n-\tif (AARCH64_CHECK_BUILTIN_MODE (2, D))\n-\t  builtin =\tAARCH64_SIMD_BUILTIN_UNOP_lroundv2dfv2di;\n-\telse if (AARCH64_CHECK_BUILTIN_MODE (4, S))\n-\t  builtin =\tAARCH64_SIMD_BUILTIN_UNOP_lroundv4sfv4si;\n-\telse if (AARCH64_CHECK_BUILTIN_MODE (2, S))\n-\t  builtin =\tAARCH64_SIMD_BUILTIN_UNOP_lroundv2sfv2si;\n-\telse\n-\t  return NULL_TREE;\n-\n-\treturn aarch64_builtin_decls[builtin];\n-      }\n-    default:\n-      return NULL_TREE;\n-    }\n-\n-  return NULL_TREE;\n-}\n-\n /* Return builtin for reciprocal square root.  */\n \n tree"}, {"sha": "19c9d3cb17995e4ffb047a51831627ba95d20e72", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "patch": "@@ -986,7 +986,6 @@ gimple *aarch64_general_gimple_fold_builtin (unsigned int, gcall *,\n rtx aarch64_general_expand_builtin (unsigned int, tree, rtx, int);\n tree aarch64_general_builtin_decl (unsigned, bool);\n tree aarch64_general_builtin_rsqrt (unsigned int);\n-tree aarch64_builtin_vectorized_function (unsigned int, tree, tree);\n void handle_arm_acle_h (void);\n void handle_arm_neon_h (void);\n "}, {"sha": "25f4cbb466d3b84c88c40b264e0742d7a65b75f7", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "patch": "@@ -27584,10 +27584,6 @@ aarch64_libgcc_floating_mode_supported_p\n #undef TARGET_VECTORIZE_BUILTINS\n #define TARGET_VECTORIZE_BUILTINS\n \n-#undef TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION\n-#define TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION \\\n-  aarch64_builtin_vectorized_function\n-\n #undef TARGET_VECTORIZE_AUTOVECTORIZE_VECTOR_MODES\n #define TARGET_VECTORIZE_AUTOVECTORIZE_VECTOR_MODES \\\n   aarch64_autovectorize_vector_modes"}, {"sha": "3a3c7299eb40d1ecd2ea45fda6a3b9970e566810", "filename": "gcc/config/i386/i386.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fconfig%2Fi386%2Fi386.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fconfig%2Fi386%2Fi386.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.cc?ref=00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "patch": "@@ -24004,6 +24004,7 @@ ix86_optab_supported_p (int op, machine_mode mode1, machine_mode,\n     case ldexp_optab:\n     case scalb_optab:\n     case round_optab:\n+    case lround_optab:\n       return opt_type == OPTIMIZE_FOR_SPEED;\n \n     case rint_optab:"}, {"sha": "bf29f444382248f1c3c4207a8e1aac21a052afd2", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "patch": "@@ -19926,9 +19926,6 @@\n        && ((<SWI248x:MODE>mode != DImode) || TARGET_64BIT)\n        && !flag_trapping_math && !flag_rounding_math)\"\n {\n-  if (optimize_insn_for_size_p ())\n-    FAIL;\n-\n   if (SSE_FLOAT_MODE_P (<X87MODEF:MODE>mode) && TARGET_SSE_MATH\n       && <SWI248x:MODE>mode != HImode\n       && ((<SWI248x:MODE>mode != DImode) || TARGET_64BIT)"}, {"sha": "28973d957fbf7a3265d8984d35b89488ae7e0607", "filename": "gcc/internal-fn.cc", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Finternal-fn.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Finternal-fn.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.cc?ref=00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "patch": "@@ -120,6 +120,7 @@ init_internal_fns ()\n #define len_store_direct { 3, 3, false }\n #define vec_set_direct { 3, 3, false }\n #define unary_direct { 0, 0, true }\n+#define unary_convert_direct { -1, 0, true }\n #define binary_direct { 0, 0, true }\n #define ternary_direct { 0, 0, true }\n #define cond_unary_direct { 1, 1, true }\n@@ -3679,6 +3680,19 @@ expand_while_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n     emit_move_insn (lhs_rtx, ops[0].value);\n }\n \n+/* Expand a call to a convert-like optab using the operands in STMT.\n+   FN has a single output operand and NARGS input operands.  */\n+\n+static void\n+expand_convert_optab_fn (internal_fn fn, gcall *stmt, convert_optab optab,\n+\t\t\t unsigned int nargs)\n+{\n+  tree_pair types = direct_internal_fn_types (fn, stmt);\n+  insn_code icode = convert_optab_handler (optab, TYPE_MODE (types.first),\n+\t\t\t\t\t  TYPE_MODE (types.second));\n+  expand_fn_using_insn (stmt, icode, 1, nargs);\n+}\n+\n /* Expanders for optabs that can use expand_direct_optab_fn.  */\n \n #define expand_unary_optab_fn(FN, STMT, OPTAB) \\\n@@ -3711,6 +3725,11 @@ expand_while_optab_fn (internal_fn, gcall *stmt, convert_optab optab)\n #define expand_check_ptrs_optab_fn(FN, STMT, OPTAB) \\\n   expand_direct_optab_fn (FN, STMT, OPTAB, 4)\n \n+/* Expanders for optabs that can use expand_convert_optab_fn.  */\n+\n+#define expand_unary_convert_optab_fn(FN, STMT, OPTAB) \\\n+  expand_convert_optab_fn (FN, STMT, OPTAB, 1)\n+\n /* RETURN_TYPE and ARGS are a return type and argument list that are\n    in principle compatible with FN (which satisfies direct_internal_fn_p).\n    Return the types that should be used to determine whether the\n@@ -3783,6 +3802,7 @@ multi_vector_optab_supported_p (convert_optab optab, tree_pair types,\n }\n \n #define direct_unary_optab_supported_p direct_optab_supported_p\n+#define direct_unary_convert_optab_supported_p convert_optab_supported_p\n #define direct_binary_optab_supported_p direct_optab_supported_p\n #define direct_ternary_optab_supported_p direct_optab_supported_p\n #define direct_cond_unary_optab_supported_p direct_optab_supported_p"}, {"sha": "7c398baadc86501052c5fb13a114326eb9c3b9d2", "filename": "gcc/internal-fn.def", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Finternal-fn.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Finternal-fn.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Finternal-fn.def?ref=00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "patch": "@@ -61,6 +61,9 @@ along with GCC; see the file COPYING3.  If not see\n    - binary: a normal binary optab, such as vec_interleave_lo_<mode>\n    - ternary: a normal ternary optab, such as fma<mode>4\n \n+   - unary_convert: a single-input conversion optab, such as\n+     lround<srcmode><dstmode>2.\n+\n    - cond_binary: a conditional binary optab, such as cond_add<mode>\n    - cond_ternary: a conditional ternary optab, such as cond_fma_rev<mode>\n \n@@ -267,6 +270,26 @@ DEF_INTERNAL_FLT_FLOATN_FN (SQRT, ECF_CONST, sqrt, unary)\n DEF_INTERNAL_FLT_FN (TAN, ECF_CONST, tan, unary)\n DEF_INTERNAL_FLT_FN (TANH, ECF_CONST, tanh, unary)\n \n+/* Floating-point to integer conversions.\n+\n+   ??? Here we preserve the I/L/LL prefix convention from the\n+   corresponding built-in functions, rather than make the internal\n+   functions polymorphic in both the argument and the return types.\n+   Perhaps an alternative would be to pass a zero of the required\n+   return type as a second parameter.  */\n+DEF_INTERNAL_FLT_FN (ICEIL, ECF_CONST, lceil, unary_convert)\n+DEF_INTERNAL_FLT_FN (IFLOOR, ECF_CONST, lfloor, unary_convert)\n+DEF_INTERNAL_FLT_FN (IRINT, ECF_CONST, lrint, unary_convert)\n+DEF_INTERNAL_FLT_FN (IROUND, ECF_CONST, lround, unary_convert)\n+DEF_INTERNAL_FLT_FN (LCEIL, ECF_CONST, lceil, unary_convert)\n+DEF_INTERNAL_FLT_FN (LFLOOR, ECF_CONST, lfloor, unary_convert)\n+DEF_INTERNAL_FLT_FN (LRINT, ECF_CONST, lrint, unary_convert)\n+DEF_INTERNAL_FLT_FN (LROUND, ECF_CONST, lround, unary_convert)\n+DEF_INTERNAL_FLT_FN (LLCEIL, ECF_CONST, lceil, unary_convert)\n+DEF_INTERNAL_FLT_FN (LLFLOOR, ECF_CONST, lfloor, unary_convert)\n+DEF_INTERNAL_FLT_FN (LLRINT, ECF_CONST, lrint, unary_convert)\n+DEF_INTERNAL_FLT_FN (LLROUND, ECF_CONST, lround, unary_convert)\n+\n /* FP rounding.  */\n DEF_INTERNAL_FLT_FLOATN_FN (CEIL, ECF_CONST, ceil, unary)\n DEF_INTERNAL_FLT_FLOATN_FN (FLOOR, ECF_CONST, floor, unary)"}, {"sha": "165f8d1fa22432b96967c69a58dbb7b4bf18120d", "filename": "gcc/optabs.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Foptabs.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Foptabs.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.cc?ref=00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "patch": "@@ -5828,7 +5828,8 @@ expand_sfix_optab (rtx to, rtx from, convert_optab tab)\n   FOR_EACH_MODE_FROM (fmode, GET_MODE (from))\n     FOR_EACH_MODE_FROM (imode, GET_MODE (to))\n       {\n-\ticode = convert_optab_handler (tab, imode, fmode);\n+\ticode = convert_optab_handler (tab, imode, fmode,\n+\t\t\t\t       insn_optimization_type ());\n \tif (icode != CODE_FOR_nothing)\n \t  {\n \t    rtx_insn *last = get_last_insn ();"}, {"sha": "1bc7ab944540478d9b1b1fb58b88eecd8a51bac0", "filename": "gcc/predict.cc", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fpredict.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fpredict.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.cc?ref=00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "patch": "@@ -362,6 +362,17 @@ optimize_insn_for_speed_p (void)\n   return !optimize_insn_for_size_p ();\n }\n \n+/* Return the optimization type that should be used for the current\n+   instruction.  */\n+\n+optimization_type\n+insn_optimization_type ()\n+{\n+  return (optimize_insn_for_speed_p ()\n+\t  ? OPTIMIZE_FOR_SPEED\n+\t  : OPTIMIZE_FOR_SIZE);\n+}\n+\n /* Return TRUE if LOOP should be optimized for size.  */\n \n optimize_size_level"}, {"sha": "2548437376928b2f50ccae6ea0020ac9465e3500", "filename": "gcc/predict.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fpredict.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Fpredict.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.h?ref=00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "patch": "@@ -68,6 +68,7 @@ extern enum optimize_size_level optimize_edge_for_size_p (edge);\n extern bool optimize_edge_for_speed_p (edge);\n extern enum optimize_size_level optimize_insn_for_size_p (void);\n extern bool optimize_insn_for_speed_p (void);\n+extern optimization_type insn_optimization_type ();\n extern enum optimize_size_level optimize_loop_for_size_p (class loop *);\n extern bool optimize_loop_for_speed_p (class loop *);\n extern bool optimize_loop_nest_for_speed_p (class loop *);"}, {"sha": "94d9af1a55d91cf865d7988e054d10abaf67b017", "filename": "gcc/testsuite/gcc.target/aarch64/vect_unary_1.c", "status": "modified", "additions": 64, "deletions": 1, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_unary_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_unary_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvect_unary_1.c?ref=00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-options \"-O3 --save-temps\" } */\n+/* { dg-options \"-O3 -fno-math-errno --save-temps\" } */\n /* { dg-final { check-function-bodies \"**\" \"\" \"\" } } */\n \n #include <stdint.h>\n@@ -184,3 +184,66 @@ TEST2 (int, ctz, int)\n **\tret\n */\n TEST4 (int, ctz, int)\n+\n+/*\n+** test2_int_iroundf_float:\n+**\tfcvtas\tv0.2s, v1.2s\n+**\tret\n+*/\n+TEST2 (int, iroundf, float)\n+\n+/*\n+** test2_int64_t_llround_double:\n+**\tfcvtas\tv0.2d, v1.2d\n+**\tret\n+*/\n+TEST2 (int64_t, llround, double)\n+\n+/*\n+** test4_int_iroundf_float:\n+**\tfcvtas\tv0.4s, v1.4s\n+**\tret\n+*/\n+TEST4 (int, iroundf, float)\n+\n+/*\n+** test2_int_ifloorf_float:\n+**\tfcvtms\tv0.2s, v1.2s\n+**\tret\n+*/\n+TEST2 (int, ifloorf, float)\n+\n+/*\n+** test2_int64_t_llfloor_double:\n+**\tfcvtms\tv0.2d, v1.2d\n+**\tret\n+*/\n+TEST2 (int64_t, llfloor, double)\n+\n+/*\n+** test4_int_ifloorf_float:\n+**\tfcvtms\tv0.4s, v1.4s\n+**\tret\n+*/\n+TEST4 (int, ifloorf, float)\n+\n+/*\n+** test2_int_iceilf_float:\n+**\tfcvtps\tv0.2s, v1.2s\n+**\tret\n+*/\n+TEST2 (int, iceilf, float)\n+\n+/*\n+** test2_int64_t_llceil_double:\n+**\tfcvtps\tv0.2d, v1.2d\n+**\tret\n+*/\n+TEST2 (int64_t, llceil, double)\n+\n+/*\n+** test4_int_iceilf_float:\n+**\tfcvtps\tv0.4s, v1.4s\n+**\tret\n+*/\n+TEST4 (int, iceilf, float)"}, {"sha": "1b6b7e892f240bbbd8b17195e240419119930275", "filename": "gcc/testsuite/gfortran.dg/vect/pr106253.f", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr106253.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eab0c654e09c8a0f1b1a3b1c7bff8764e64991/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr106253.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr106253.f?ref=00eab0c654e09c8a0f1b1a3b1c7bff8764e64991", "patch": "@@ -0,0 +1,35 @@\n+! { dg-do compile }\n+\n+      SUBROUTINE DGEMV ( TRANS, M, N, ALPHA, A, LDA, X, INCX,           &\n+     &                   BETA, Y, INCY )\n+      LOGICAL            LSAME\n+      IF     ( .NOT.LSAME( TRANS, 'N' ).AND.                            &\n+     &         .NOT.LSAME( TRANS, 'C' )      )THEN\n+      END IF\n+      END\n+      subroutine evlrnf (ptrs0t, nclsm, prnf0t) \n+      real, dimension (1:nclsm,1:nclsm), intent (in) :: ptrs0t\n+      real, dimension (1:nclsm,1:nclsm), intent (out):: prnf0t\n+      real, allocatable, dimension (:,:) :: utrsft ! probas up\n+      real, allocatable, dimension (:,:) :: dtrsft ! probas down\n+      real, allocatable, dimension (:,:) :: xwrkt ! matrice\n+      do icls = 1, nclsm\n+         do ival = ipic - 1, 1, -1\n+            xwrkt = trs2a2 (ival, ipic, utrsft, dtrsft, ncls)\n+         enddo\n+      enddo\n+      contains\n+      function trs2a2 (j, k, u, d, m)\n+      real, dimension (1:m,1:m) :: trs2a2  ! resultat\n+      real, dimension (1:m,1:m) :: u, d    ! matrices utrsft, dtrsft\n+      end function trs2a2\n+      end\n+      program rnflow\n+      integer, parameter :: ncls  =     256 ! nombre de classes\n+      integer, dimension (1:ncls,1:ncls) :: mrnftt ! matrice theorique\n+      real, dimension (1:ncls,1:ncls)    :: ptrst  ! matrice Markov\n+      real, dimension (1:ncls,1:ncls)    :: prnft  ! matrice Rainflow\n+      call evlrnf (ptrst, ncls, prnft)\n+      mrnftt = nint (real (nsim) * real (npic) * prnft)\n+      call cmpmat (mrnftt, mrnfst)\n+      end program rnflow"}]}