{"sha": "a62abb91257e37394607041104b47ed5d9b4baed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTYyYWJiOTEyNTdlMzczOTQ2MDcwNDExMDRiNDdlZDVkOWI0YmFlZA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-03-25T13:06:52Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-03-25T13:06:52Z"}, "message": "2003-03-25  Michael Koch  <konqueror@gmx.de>\n\n\t* java/io/FileInputStream.java\n\t(read): Renamed b to buf and off to offset.\n\t* java/io/FileOutputStream.java\n\t(ch): Documentation added.\n\t(FileOutputStream): Documentation added.\n\t(getFD): Documentation added.\n\t(write): Documentation added.\n\t(close): Documentation added.\n\t(getChannel): Documentation added.\n\nFrom-SVN: r64845", "tree": {"sha": "9f15c51e61878ea40347d0c638b354f0b8b8fef1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f15c51e61878ea40347d0c638b354f0b8b8fef1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a62abb91257e37394607041104b47ed5d9b4baed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a62abb91257e37394607041104b47ed5d9b4baed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a62abb91257e37394607041104b47ed5d9b4baed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a62abb91257e37394607041104b47ed5d9b4baed/comments", "author": null, "committer": null, "parents": [{"sha": "d2fc77254d4bc5cb5e784cc7823607cc85bc77af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2fc77254d4bc5cb5e784cc7823607cc85bc77af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2fc77254d4bc5cb5e784cc7823607cc85bc77af"}], "stats": {"total": 149, "additions": 137, "deletions": 12}, "files": [{"sha": "9ad5618988f2e10531e14a13f9c296d990bbcef3", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62abb91257e37394607041104b47ed5d9b4baed/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62abb91257e37394607041104b47ed5d9b4baed/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a62abb91257e37394607041104b47ed5d9b4baed", "patch": "@@ -1,3 +1,15 @@\n+2003-03-25  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/io/FileInputStream.java\n+\t(read): Renamed b to buf and off to offset.\n+\t* java/io/FileOutputStream.java\n+\t(ch): Documentation added.\n+\t(FileOutputStream): Documentation added.\n+\t(getFD): Documentation added.\n+\t(write): Documentation added.\n+\t(close): Documentation added.\n+\t(getChannel): Documentation added.\n+\n 2003-03-24  Michael Koch  <konqueror@gmx.de>\n \n \t* java/io/DataOutputStream.java"}, {"sha": "50abeaa6e6707e6bc249e85598750a8ed18f9e8b", "filename": "libjava/java/io/FileInputStream.java", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62abb91257e37394607041104b47ed5d9b4baed/libjava%2Fjava%2Fio%2FFileInputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62abb91257e37394607041104b47ed5d9b4baed/libjava%2Fjava%2Fio%2FFileInputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileInputStream.java?ref=a62abb91257e37394607041104b47ed5d9b4baed", "patch": "@@ -52,7 +52,6 @@\n  *\n  * @author Aaron M. Renn <arenn@urbanophile.com>\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @date October 28, 1998.  \n  */\n public class FileInputStream extends InputStream\n {\n@@ -224,9 +223,9 @@ public int read() throws IOException\n    *\n    * @exception IOException If an error occurs.\n    */\n-  public int read(byte[] b) throws IOException\n+  public int read(byte[] buf) throws IOException\n   {\n-    return fd.read(b, 0, b.length);\n+    return read(buf, 0, buf.length);\n   }\n \n   /**\n@@ -248,12 +247,14 @@ public int read(byte[] b) throws IOException\n    *\n    * @exception IOException If an error occurs.\n    */\n-  public int read(byte[] b, int off, int len) throws IOException\n+  public int read(byte[] buf, int offset, int len) throws IOException\n   {\n-    if (off < 0 || len < 0 || off + len > b.length)\n+    if (offset < 0\n+        || len < 0\n+        || offset + len > buf.length)\n       throw new ArrayIndexOutOfBoundsException();\n \n-    return fd.read(b, off, len);\n+    return fd.read(buf, offset, len);\n   }\n \n   /**"}, {"sha": "c0f8b268c4c70c450d466c15e514237e5e151253", "filename": "libjava/java/io/FileOutputStream.java", "status": "modified", "additions": 118, "deletions": 6, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a62abb91257e37394607041104b47ed5d9b4baed/libjava%2Fjava%2Fio%2FFileOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a62abb91257e37394607041104b47ed5d9b4baed/libjava%2Fjava%2Fio%2FFileOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fio%2FFileOutputStream.java?ref=a62abb91257e37394607041104b47ed5d9b4baed", "patch": "@@ -52,10 +52,29 @@\n  */\n public class FileOutputStream extends OutputStream\n {\n-  // Instance variables.\n   private FileDescriptor fd;\n-  private FileChannel ch;\n-  \n+\n+  private FileChannel ch; /* cached associated file-channel */\n+\n+  /**\n+   * This method initializes a <code>FileOutputStream</code> object to write\n+   * to the named file.  The file is created if it does not exist, and\n+   * the bytes written are written starting at the beginning of the file if\n+   * the <code>append</code> argument is <code>false</code> or at the end\n+   * of the file if the <code>append</code> argument is true.\n+   * <p>\n+   * Before opening a file, a security check is performed by calling the\n+   * <code>checkWrite</code> method of the <code>SecurityManager</code> (if\n+   * one exists) with the name of the file to be opened.  An exception is\n+   * thrown if writing is not allowed. \n+   *\n+   * @param name The name of the file this stream should write to\n+   * @param append <code>true</code> to append bytes to the end of the file,\n+   * or <code>false</code> to write bytes to the beginning\n+   *\n+   * @exception SecurityException If write access to the file is not allowed\n+   * @exception FileNotFoundException If a non-security error occurs\n+   */\n   public FileOutputStream (String path, boolean append)\n     throws SecurityException, FileNotFoundException\n   {\n@@ -67,12 +86,43 @@ public FileOutputStream (String path, boolean append)\n \t\t\t\t    : FileDescriptor.WRITE));\n   }\n \n+  /**\n+   * This method initializes a <code>FileOutputStream</code> object to write\n+   * to the named file.  The file is created if it does not exist, and\n+   * the bytes written are written starting at the beginning of the file.\n+   * <p>\n+   * Before opening a file, a security check is performed by calling the\n+   * <code>checkWrite</code> method of the <code>SecurityManager</code> (if\n+   * one exists) with the name of the file to be opened.  An exception is\n+   * thrown if writing is not allowed. \n+   *\n+   * @param name The name of the file this stream should write to\n+   *\n+   * @exception SecurityException If write access to the file is not allowed\n+   * @exception FileNotFoundException If a non-security error occurs\n+   */\n   public FileOutputStream (String path)\n     throws SecurityException, FileNotFoundException\n   {\n     this (path, false);\n   }\n \n+  /**\n+   * This method initializes a <code>FileOutputStream</code> object to write\n+   * to the specified <code>File</code> object.  The file is created if it \n+   * does not exist, and the bytes written are written starting at the \n+   * beginning of the file.\n+   * <p>\n+   * Before opening a file, a security check is performed by calling the\n+   * <code>checkWrite</code> method of the <code>SecurityManager</code> (if\n+   * one exists) with the name of the file to be opened.  An exception is\n+   * thrown if writing is not allowed. \n+   *\n+   * @param file The <code>File</code> object this stream should write to\n+   *\n+   * @exception SecurityException If write access to the file is not allowed\n+   * @exception FileNotFoundException If a non-security error occurs\n+   */\n   public FileOutputStream (File file)\n     throws SecurityException, FileNotFoundException\n   {\n@@ -99,12 +149,28 @@ public FileOutputStream (File file)\n    * @exception SecurityException If write access to the file is not allowed\n    * @exception FileNotFoundException If a non-security error occurs\n    */\n-  public\n-  FileOutputStream(File file, boolean append) throws FileNotFoundException\n+  public FileOutputStream (File file, boolean append)\n+    throws FileNotFoundException\n   {\n-    this(file.getPath(), append);\n+    this (file.getPath(), append);\n   }\n \n+  /**\n+   * This method initializes a <code>FileOutputStream</code> object to write\n+   * to the file represented by the specified <code>FileDescriptor</code>\n+   * object.  This method does not create any underlying disk file or\n+   * reposition the file pointer of the given descriptor.  It assumes that\n+   * this descriptor is ready for writing as is.\n+   * <p>\n+   * Before opening a file, a security check is performed by calling the\n+   * <code>checkWrite</code> method of the <code>SecurityManager</code> (if\n+   * one exists) with the specified <code>FileDescriptor</code> as an argument.\n+   * An exception is thrown if writing is not allowed. \n+   *\n+   * @param file The <code>FileDescriptor</code> this stream should write to\n+   *\n+   * @exception SecurityException If write access to the file is not allowed\n+   */\n   public FileOutputStream (FileDescriptor fdObj)\n     throws SecurityException\n   {\n@@ -120,23 +186,56 @@ protected void finalize () throws IOException\n     // mentioned in the JCL.\n   }\n \n+  /**\n+   * This method returns a <code>FileDescriptor</code> object representing\n+   * the file that is currently being written to\n+   *\n+   * @return A <code>FileDescriptor</code> object for this stream\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public final FileDescriptor getFD () throws IOException\n   {\n     if (! fd.valid())\n       throw new IOException ();\n     return fd;\n   }\n \n+  /**\n+   * This method writes a single byte of data to the file.  \n+   *\n+   * @param b The byte of data to write, passed as an <code>int</code>\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public void write (int b) throws IOException\n   {\n     fd.write (b);\n   }\n \n+  /**\n+   * This method writes all the bytes in the specified array to the\n+   * file.\n+   *\n+   * @param buf The array of bytes to write to the file\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public void write (byte[] b) throws IOException, NullPointerException\n   {\n     fd.write (b, 0, b.length);\n   }\n \n+  /**\n+   * This method writes <code>len</code> bytes from the byte array \n+   * <code>buf</code> to the file starting at index <code>offset</code>.\n+   *\n+   * @param buf The array of bytes to write to the file\n+   * @param offset The offset into the array to start writing bytes from\n+   * @param len The number of bytes to write to the file\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public void write (byte[] b, int off, int len)\n     throws IOException, NullPointerException, IndexOutOfBoundsException\n   {\n@@ -145,12 +244,25 @@ public void write (byte[] b, int off, int len)\n     fd.write (b, off, len);\n   }\n \n+  /**\n+   * This method closes the underlying file.  Any further attempts to\n+   * write to this stream will likely generate an exception since the\n+   * file is closed.\n+   *\n+   * @exception IOException If an error occurs\n+   */\n   public void close () throws IOException\n   {\n     if (fd.valid())\n       fd.close();\n   }\n \n+  /**\n+   * This method creates a java.nio.channels.FileChannel.\n+   * Nio does not allow one to create a file channel directly.\n+   * A file channel must be created by first creating an instance of\n+   * Input/Output/RandomAccessFile and invoking the getChannel() method on it.\n+   */\n   public FileChannel getChannel ()\n   {\n     synchronized (this)"}]}