{"sha": "7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2IyODg4ZTYyY2VlM2ZmOGZhNDRlMzE2YjhkOWQyMWE0NjExZGJjYQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T12:50:43Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T12:50:43Z"}, "message": "[multiple changes]\n\n2014-07-30  Robert Dewar  <dewar@adacore.com>\n\n\t* s-tasuti.adb, s-tasuti.ads, einfo.ads, sem_prag.adb, s-taasde.adb,\n\tg-socthi-vms.adb, s-taprop-mingw.adb, s-interr.adb, s-interr-hwint.adb,\n\tg-decstr.adb, s-tasdeb-vms.adb, g-expect-vms.adb, makeutl.adb,\n\ts-interr-vms.adb, g-socthi.adb, exp_aggr.adb, s-tasdeb.adb,\n\tg-awk.adb, gnatls.adb, s-taspri-posix.ads, g-catiio.adb,\n\ts-interr-sigaction.adb, s-os_lib.adb, s-fileio.adb: Minor reformatting\n\t& code reorganization.\n\n2014-07-30  Bob Duff  <duff@adacore.com>\n\n\t* s-tassta.adb, sem_util.ads: Minor reformatting.\n\n2014-07-30  Yannick Moy  <moy@adacore.com>\n\n\t* inline.adb (Build_Body_To_Inline): Detect when\n\tsubprogram has multiple returns, or not a single last return\n\tstatement, in GNATprove mode.\n\t(Cannot_Inline): Simplify logic to handle case of GNATprove\n\tinlining first.\n\n2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb: Stubs are not subject to inlining.\n\nFrom-SVN: r213257", "tree": {"sha": "82cb5a0a73d4ce482a182db0452c8c54599c4272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/82cb5a0a73d4ce482a182db0452c8c54599c4272"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/comments", "author": null, "committer": null, "parents": [{"sha": "b0c5fdda662f6e7291088eaa6158b938f224f3e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0c5fdda662f6e7291088eaa6158b938f224f3e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0c5fdda662f6e7291088eaa6158b938f224f3e0"}], "stats": {"total": 223, "additions": 156, "deletions": 67}, "files": [{"sha": "fa02f389d3f2324f5abbe4c1bd6d2e8ca1b46078", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -1,3 +1,29 @@\n+2014-07-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* s-tasuti.adb, s-tasuti.ads, einfo.ads, sem_prag.adb, s-taasde.adb,\n+\tg-socthi-vms.adb, s-taprop-mingw.adb, s-interr.adb, s-interr-hwint.adb,\n+\tg-decstr.adb, s-tasdeb-vms.adb, g-expect-vms.adb, makeutl.adb,\n+\ts-interr-vms.adb, g-socthi.adb, exp_aggr.adb, s-tasdeb.adb,\n+\tg-awk.adb, gnatls.adb, s-taspri-posix.ads, g-catiio.adb,\n+\ts-interr-sigaction.adb, s-os_lib.adb, s-fileio.adb: Minor reformatting\n+\t& code reorganization.\n+\n+2014-07-30  Bob Duff  <duff@adacore.com>\n+\n+\t* s-tassta.adb, sem_util.ads: Minor reformatting.\n+\n+2014-07-30  Yannick Moy  <moy@adacore.com>\n+\n+\t* inline.adb (Build_Body_To_Inline): Detect when\n+\tsubprogram has multiple returns, or not a single last return\n+\tstatement, in GNATprove mode.\n+\t(Cannot_Inline): Simplify logic to handle case of GNATprove\n+\tinlining first.\n+\n+2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb: Stubs are not subject to inlining.\n+\n 2014-07-30  Bob Duff  <duff@adacore.com>\n \n \t* s-tasuti.ads, s-tasuti.adb (Make_Independent): Change this"}, {"sha": "d6f6beccd57c7edeeb3047b1ce76b545dbd91ede", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -2476,7 +2476,7 @@ package Einfo is\n --       be compiled. Is_Inlined is also set on generic subprograms and is\n --       inherited by their instances. It is also set on the body entities\n --       of inlined subprograms. See also Has_Pragma_Inline.\n-\n+--\n --       Is_Inlined is also set for subprograms that are always inlined in\n --       GNATprove mode. GNATprove uses this flag to know when a body does not\n --       need to be analyzed."}, {"sha": "beb5f45068b184436482428c4858834ebda28c10", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -4016,6 +4016,8 @@ package body Exp_Aggr is\n       --       an integer whose unsigned value is the binary concatenation of\n       --       K times its remainder modulo 2**Storage_Unit.\n \n+      --  What on earth does 5 mean, incomprehensible???\n+\n       --  The ultimate goal is to generate a call to a fast memset routine\n       --  specifically optimized for the target.\n \n@@ -4054,6 +4056,7 @@ package body Exp_Aggr is\n             end loop;\n \n             Ctyp := Component_Type (Ctyp);\n+\n             if Is_Atomic (Ctyp) then\n                return False;\n             end if;"}, {"sha": "6f58e46a584d4e94f00e5f53f712514da85d2b96", "filename": "gcc/ada/g-awk.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fg-awk.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fg-awk.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-awk.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2000-2011, AdaCore                     --\n+--                     Copyright (C) 2000-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -929,7 +929,6 @@ package body GNAT.AWK is\n          if Callbacks in Only .. Pass_Through then\n             declare\n                Discard : Boolean;\n-               pragma Unreferenced (Discard);\n             begin\n                Discard := Apply_Filters (Session);\n             end;"}, {"sha": "c0ccb4b7961837ef616f9ba7327fc144fe533e9e", "filename": "gcc/ada/g-catiio.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fg-catiio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fg-catiio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-catiio.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 1999-2010, AdaCore                     --\n+--                     Copyright (C) 1999-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -789,7 +789,6 @@ package body GNAT.Calendar.Time_IO is\n       else\n          declare\n             Discard : Second_Duration;\n-            pragma Unreferenced (Discard);\n          begin\n             Split (Clock, Year, Month, Day, Hour, Minute, Second,\n                    Sub_Second => Discard);"}, {"sha": "ab8d06c2b7fa327e676c2ac5d895f4cb2bec0895", "filename": "gcc/ada/g-decstr.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fg-decstr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fg-decstr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-decstr.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---                     Copyright (C) 2007-2013, AdaCore                     --\n+--                     Copyright (C) 2007-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -323,7 +323,6 @@ package body GNAT.Decode_String is\n \n    procedure Next_Wide_Character (Input : String; Ptr : in out Natural) is\n       Discard : Wide_Character;\n-      pragma Unreferenced (Discard);\n    begin\n       Decode_Wide_Character (Input, Ptr, Discard);\n    end Next_Wide_Character;\n@@ -334,7 +333,6 @@ package body GNAT.Decode_String is\n \n    procedure Next_Wide_Wide_Character (Input : String; Ptr : in out Natural) is\n       Discard : Wide_Wide_Character;\n-      pragma Unreferenced (Discard);\n    begin\n       Decode_Wide_Wide_Character (Input, Ptr, Discard);\n    end Next_Wide_Wide_Character;"}, {"sha": "aa1f8038b2f44c2a3d203f2475f8ec24a8fc32ed", "filename": "gcc/ada/g-expect-vms.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fg-expect-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fg-expect-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-expect-vms.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -1111,7 +1111,6 @@ package body GNAT.Expect is\n       Descriptors : Array_Of_Pd := (1 => Descriptor'Unrestricted_Access);\n \n       Discard : Natural;\n-      pragma Unreferenced (Discard);\n \n    begin\n       if Empty_Buffer then"}, {"sha": "e2adc8c488d69e60f61cbd0098d0fa83b9520582", "filename": "gcc/ada/g-socthi-vms.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fg-socthi-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fg-socthi-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi-vms.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2013, AdaCore                     --\n+--                     Copyright (C) 2001-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -415,7 +415,6 @@ package body GNAT.Sockets.Thin is\n       Val : aliased C.int := 1;\n \n       Discard : C.int;\n-      pragma Unreferenced (Discard);\n \n    begin\n       R := Syscall_Socket (Domain, Typ, Protocol);"}, {"sha": "6f6fd376968fc4a9d3d43d670f20019a154bd208", "filename": "gcc/ada/g-socthi.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fg-socthi.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fg-socthi.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fg-socthi.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---                     Copyright (C) 2001-2013, AdaCore                     --\n+--                     Copyright (C) 2001-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -383,7 +383,6 @@ package body GNAT.Sockets.Thin is\n       Val : aliased C.int := 1;\n \n       Discard : C.int;\n-      pragma Unreferenced (Discard);\n \n    begin\n       R := Syscall_Socket (Domain, Typ, Protocol);"}, {"sha": "2fd05d9d82dd5b2d45f5a3614e0230fd8080d47f", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -1796,7 +1796,6 @@ begin\n \n             declare\n                Discard : ALI_Id;\n-               pragma Unreferenced (Discard);\n             begin\n                Discard :=\n                  Scan_ALI"}, {"sha": "b9d0d8e27229e14e6474a864a5c8697d848ddf33", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 84, "deletions": 6, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -860,6 +860,11 @@ package body Inline is\n       --  function. In that case the call can be replaced by that local\n       --  variable as is done for other inlined calls.\n \n+      function Has_Single_Return_In_GNATprove_Mode return Boolean;\n+      --  This function is called only in GNATprove mode, and it returns\n+      --  True if the subprogram has no or a single return statement as\n+      --  last statement.\n+\n       procedure Remove_Pragmas;\n       --  A pragma Unreferenced or pragma Unmodified that mentions a formal\n       --  parameter has no meaning when the body is inlined and the formals\n@@ -1143,6 +1148,57 @@ package body Inline is\n          end if;\n       end Has_Single_Return;\n \n+      -----------------------------------------\n+      -- Has_Single_Return_In_GNATprove_Mode --\n+      -----------------------------------------\n+\n+      function Has_Single_Return_In_GNATprove_Mode return Boolean is\n+         Last_Statement : Node_Id := Empty;\n+\n+         function Check_Return (N : Node_Id) return Traverse_Result;\n+         --  Returns OK on node N if this is not a return statement different\n+         --  from the last statement in the subprogram.\n+\n+         ------------------\n+         -- Check_Return --\n+         ------------------\n+\n+         function Check_Return (N : Node_Id) return Traverse_Result is\n+         begin\n+            if Nkind_In (N, N_Simple_Return_Statement,\n+                            N_Extended_Return_Statement)\n+            then\n+               if N = Last_Statement then\n+                  return OK;\n+               else\n+                  return Abandon;\n+               end if;\n+\n+            else\n+               return OK;\n+            end if;\n+         end Check_Return;\n+\n+         function Check_All_Returns is new Traverse_Func (Check_Return);\n+\n+      --  Start of processing for Has_Single_Return_In_GNATprove_Mode\n+\n+      begin\n+         --  Retrieve last statement inside possible block statements\n+\n+         Last_Statement := Last (Statements (Handled_Statement_Sequence (N)));\n+\n+         while Nkind (Last_Statement) = N_Block_Statement loop\n+            Last_Statement :=\n+              Last (Statements (Handled_Statement_Sequence (Last_Statement)));\n+         end loop;\n+\n+         --  Check that the last statement is the only possible return\n+         --  statement in the subprogram.\n+\n+         return Check_All_Returns (N) = OK;\n+      end Has_Single_Return_In_GNATprove_Mode;\n+\n       --------------------\n       -- Remove_Pragmas --\n       --------------------\n@@ -1211,6 +1267,16 @@ package body Inline is\n       then\n          return;\n \n+      --  Subprograms that have return statements in the middle of the body are\n+      --  inlined with gotos. GNATprove does not currently support gotos, so\n+      --  we prevent such inlining.\n+\n+      elsif GNATprove_Mode\n+        and then not Has_Single_Return_In_GNATprove_Mode\n+      then\n+         Cannot_Inline (\"cannot inline & (multiple returns)?\", N, Subp);\n+         return;\n+\n       --  Functions that return unconstrained composite types require\n       --  secondary stack handling, and cannot currently be inlined, unless\n       --  all return statements return a local variable that is the first\n@@ -1378,6 +1444,14 @@ package body Inline is\n          then\n             null;\n \n+         --  In GNATprove mode, issue a warning, and indicate that the\n+         --  subprogram is not always inlined by setting flag Is_Inlined\n+         --  to False.\n+\n+         elsif GNATprove_Mode then\n+            Set_Is_Inlined (Subp, False);\n+            Error_Msg_NE (Msg & \"p?\", N, Subp);\n+\n          elsif Has_Pragma_Inline_Always (Subp) then\n \n             --  Remove last character (question mark) to make this into an\n@@ -1399,12 +1473,16 @@ package body Inline is\n \n          Error_Msg_NE (Msg (Msg'First .. Msg'Last - 1), N, Subp);\n \n-      --  Do not issue errors/warnings when compiling with optimizations. Note\n-      --  that GNATprove mode is only set when we are analyzing (not compiling)\n-      --  the program, so in that case the value of optimization level does not\n-      --  matter.\n+      --  In GNATprove mode, issue a warning, and indicate that the subprogram\n+      --  is not always inlined by setting flag Is_Inlined to False.\n+\n+      elsif GNATprove_Mode then\n+         Set_Is_Inlined (Subp, False);\n+         Error_Msg_NE (Msg & \"p?\", N, Subp);\n+\n+      --  Do not issue errors/warnings when compiling with optimizations\n \n-      elsif Optimization_Level = 0 or else GNATprove_Mode then\n+      elsif Optimization_Level = 0 then\n \n          --  Do not emit warning if this is a predefined unit which is not\n          --  the main unit. This behavior is currently provided for backward\n@@ -1441,7 +1519,7 @@ package body Inline is\n \n             Error_Msg_NE (Msg (Msg'First .. Msg'Last - 1), N, Subp);\n \n-         else pragma Assert (Front_End_Inlining or GNATprove_Mode);\n+         else pragma Assert (Front_End_Inlining);\n             Set_Is_Inlined (Subp, False);\n \n             --  When inlining cannot take place we must issue an error."}, {"sha": "7f7d060dcbef5a378b543408ebdbd71f6f67dfcf", "filename": "gcc/ada/makeutl.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fmakeutl.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fmakeutl.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmakeutl.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -2811,7 +2811,6 @@ package body Makeutl is\n          With_Roots : Boolean := False)\n       is\n          Discard : Boolean;\n-         pragma Unreferenced (Discard);\n       begin\n          Discard := Insert (Source, With_Roots);\n       end Insert;"}, {"sha": "72f7db8e7a2008bea63ad26ac9d30381dfce1ce6", "filename": "gcc/ada/s-fileio.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-fileio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-fileio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-fileio.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -400,7 +400,6 @@ package body System.File_IO is\n       Fptr2   : AFCB_Ptr;\n \n       Discard : int;\n-      pragma Unreferenced (Discard);\n \n    begin\n       --  Take a lock to protect global Open_Files data structure"}, {"sha": "8e2950f30fbb88aa2ed7ada18ffb05883d13abd2", "filename": "gcc/ada/s-interr-hwint.adb", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-interr-hwint.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-interr-hwint.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-hwint.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -31,7 +31,7 @@\n \n --  Invariants:\n \n---  All user-handleable signals are masked at all times in all tasks/threads\n+--  All user-handlable signals are masked at all times in all tasks/threads\n --  except possibly for the Interrupt_Manager task.\n \n --  When a user task wants to have the effect of masking/unmasking an signal,\n@@ -123,8 +123,11 @@ package body System.Interrupts is\n    end Interrupt_Manager;\n \n    task type Interrupt_Server_Task\n-     (Interrupt : Interrupt_ID; Int_Sema : Binary_Semaphore_Id) is\n+     (Interrupt : Interrupt_ID;\n+      Int_Sema  : Binary_Semaphore_Id)\n+   is\n       --  Server task for vectored hardware interrupt handling\n+\n       pragma Interrupt_Priority (System.Interrupt_Priority'First + 2);\n    end Interrupt_Server_Task;\n \n@@ -152,7 +155,7 @@ package body System.Interrupts is\n    --  is specified through the pragma Attach_Handler.\n \n    User_Entry : array (Interrupt_ID) of Entry_Assoc :=\n-     (others => (T => Null_Task, E => Null_Task_Entry));\n+                  (others => (T => Null_Task, E => Null_Task_Entry));\n    pragma Volatile_Components (User_Entry);\n    --  Holds the task and entry index (if any) for each interrupt / signal\n \n@@ -172,19 +175,18 @@ package body System.Interrupts is\n    Registered_Handler_Tail : R_Link := null;\n \n    Server_ID : array (Interrupt_ID) of System.Tasking.Task_Id :=\n-     (others => System.Tasking.Null_Task);\n+                 (others => System.Tasking.Null_Task);\n    pragma Atomic_Components (Server_ID);\n    --  Holds the Task_Id of the Server_Task for each interrupt / signal.\n    --  Task_Id is needed to accomplish locking per interrupt base. Also\n    --  is needed to determine whether to create a new Server_Task.\n \n    Semaphore_ID_Map : array\n-     (Interrupt_ID range 0 .. System.OS_Interface.Max_HW_Interrupt)\n-      of Binary_Semaphore_Id := (others => 0);\n+     (Interrupt_ID range 0 .. System.OS_Interface.Max_HW_Interrupt) of\n+        Binary_Semaphore_Id := (others => 0);\n    --  Array of binary semaphores associated with vectored interrupts. Note\n    --  that the last bound should be Max_HW_Interrupt, but this will raise\n-   --  Storage_Error if Num_HW_Interrupts is null, so use an extra 4 bytes\n-   --  instead.\n+   --  Storage_Error if Num_HW_Interrupts is null so use extra 4 bytes instead.\n \n    Interrupt_Access_Hold : Interrupt_Task_Access;\n    --  Variable for allocating an Interrupt_Server_Task\n@@ -1040,7 +1042,6 @@ package body System.Interrupts is\n \n    task body Interrupt_Server_Task is\n       Ignore : constant Boolean := System.Tasking.Utilities.Make_Independent;\n-      pragma Unreferenced (Ignore);\n \n       Self_Id         : constant Task_Id := Self;\n       Tmp_Handler     : Parameterless_Handler;\n@@ -1052,8 +1053,8 @@ package body System.Interrupts is\n       Semaphore_ID_Map (Interrupt) := Int_Sema;\n \n       loop\n-         --  Pend on semaphore that will be triggered by the\n-         --  umbrella handler when the associated interrupt comes in\n+         --  Pend on semaphore that will be triggered by the umbrella handler\n+         --  when the associated interrupt comes in.\n \n          Status := Binary_Semaphore_Obtain (Int_Sema);\n          pragma Assert (Status = 0);\n@@ -1075,8 +1076,8 @@ package body System.Interrupts is\n               (Tmp_ID, Tmp_Entry_Index, System.Null_Address);\n \n          else\n-            --  Semaphore has been flushed by an unbind operation in\n-            --  the Interrupt_Manager. Terminate the server task.\n+            --  Semaphore has been flushed by an unbind operation in the\n+            --  Interrupt_Manager. Terminate the server task.\n \n             --  Wait for the Interrupt_Manager to complete its work\n "}, {"sha": "2e646a2042258e3950948648dbfab03c322c5ea4", "filename": "gcc/ada/s-interr-sigaction.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-interr-sigaction.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-interr-sigaction.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-sigaction.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -617,7 +617,6 @@ package body System.Interrupts is\n \n    task body Server_Task is\n       Ignore : constant Boolean := Utilities.Make_Independent;\n-      pragma Unreferenced (Ignore);\n \n       Desc    : Handler_Desc renames Descriptors (Interrupt);\n       Self_Id : constant Task_Id := STPO.Self;"}, {"sha": "1fc141f62e6aa5a99c30464eca09499ced05e728", "filename": "gcc/ada/s-interr-vms.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-interr-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-interr-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr-vms.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -570,7 +570,6 @@ package body System.Interrupts is\n       --  away, the Interrupt_Manager will terminate gracefully.\n \n       Ignore : constant Boolean := System.Tasking.Utilities.Make_Independent;\n-      pragma Unreferenced (Ignore);\n \n       --------------------\n       -- Local Routines --\n@@ -897,7 +896,6 @@ package body System.Interrupts is\n       --  goes away, the Server_Task will terminate gracefully.\n \n       Ignore : constant Boolean := System.Tasking.Utilities.Make_Independent;\n-      pragma Unreferenced (Ignore);\n \n       Self_ID         : constant Task_Id := Self;\n       Tmp_Handler     : Parameterless_Handler;\n@@ -1010,10 +1008,10 @@ package body System.Interrupts is\n             POP.Unlock_RTS;\n          end if;\n \n-         System.Tasking.Initialization.Undefer_Abort (Self_ID);\n+         --  Undefer abort here to allow a window for this task to be aborted\n+         --  at the time of system shutdown.\n \n-         --  Undefer abort here to allow a window for this task\n-         --  to be aborted  at the time of system shutdown.\n+         System.Tasking.Initialization.Undefer_Abort (Self_ID);\n       end loop;\n    end Server_Task;\n "}, {"sha": "3c988af5a02ee72e0aac7ce7b66525f69a83eafa", "filename": "gcc/ada/s-interr.adb", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-interr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-interr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-interr.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -685,7 +685,6 @@ package body System.Interrupts is\n       --  goes away, the Interrupt_Manager will terminate gracefully.\n \n       Ignore : constant Boolean := System.Tasking.Utilities.Make_Independent;\n-      pragma Unreferenced (Ignore);\n \n       ---------------------\n       -- Local Variables --\n@@ -1241,7 +1240,6 @@ package body System.Interrupts is\n       --  away, the Server_Task will terminate gracefully.\n \n       Ignore : constant Boolean := System.Tasking.Utilities.Make_Independent;\n-      pragma Unreferenced (Ignore);\n \n       Intwait_Mask    : aliased IMNG.Interrupt_Mask;\n       Ret_Interrupt   : Interrupt_ID;\n@@ -1307,7 +1305,7 @@ package body System.Interrupts is\n \n          elsif Blocked (Interrupt) then\n \n-            --  Interrupt is blocked. Stay here, so we won't catch it\n+            --  Interrupt is blocked, stay here, so we won't catch it\n \n             Self_ID.Common.State := Interrupt_Server_Blocked_Interrupt_Sleep;\n             POP.Sleep (Self_ID, Interrupt_Server_Blocked_Interrupt_Sleep);"}, {"sha": "940bf514c327db39d7e115a14a2be5dcfb987073", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -279,7 +279,6 @@ package body System.OS_Lib is\n    procedure Close (FD : File_Descriptor) is\n       use CRTL;\n       Discard : constant int := close (int (FD));\n-      pragma Unreferenced (Discard);\n    begin\n       null;\n    end Close;"}, {"sha": "061ef0dbad7ecd6c02868a3305c693ea38c32499", "filename": "gcc/ada/s-taasde.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-taasde.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-taasde.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taasde.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -283,7 +283,6 @@ package body System.Tasking.Async_Delays is\n \n    task body Timer_Server is\n       Ignore : constant Boolean := STU.Make_Independent;\n-      pragma Unreferenced (Ignore);\n \n       --  Local Declarations\n "}, {"sha": "126ef64c1f86d5e054ea966ab0fb8198c45b4547", "filename": "gcc/ada/s-taprop-mingw.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-taprop-mingw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-taprop-mingw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taprop-mingw.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -1029,7 +1029,6 @@ package body System.Task_Primitives.Operations is\n \n    procedure Initialize (Environment_Task : Task_Id) is\n       Discard : BOOL;\n-      pragma Unreferenced (Discard);\n \n    begin\n       Environment_Task_Id := Environment_Task;"}, {"sha": "0ef6322f517937e099932afa185ff6c4a6cd35cb", "filename": "gcc/ada/s-tasdeb-vms.adb", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-tasdeb-vms.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-tasdeb-vms.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasdeb-vms.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 2008-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2008-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -2148,11 +2148,12 @@ package body System.Tasking.Debug is\n \n    procedure Write (Fd : Integer; S : String; Count : Integer) is\n       Discard : System.CRTL.ssize_t;\n-      pragma Unreferenced (Discard);\n+      --  Ignore write errors here; this is just debugging output, and there's\n+      --  nothing to be done about errors anyway.\n    begin\n-      Discard := System.CRTL.write (Fd, S (S'First)'Address,\n-                                    System.CRTL.size_t (Count));\n-      --  Is it really right to ignore write errors here ???\n+      Discard :=\n+        System.CRTL.write\n+          (Fd, S (S'First)'Address, System.CRTL.size_t (Count));\n    end Write;\n \n end System.Tasking.Debug;"}, {"sha": "5c084b584bd55b33051f8cc25c9325895aec550c", "filename": "gcc/ada/s-tasdeb.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-tasdeb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-tasdeb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasdeb.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                  B o d y                                 --\n --                                                                          --\n---          Copyright (C) 1997-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNARL is free software; you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -396,12 +396,12 @@ package body System.Tasking.Debug is\n \n    procedure Write (Fd : Integer; S : String; Count : Integer) is\n       Discard : System.CRTL.ssize_t;\n-      pragma Unreferenced (Discard);\n-   begin\n-      Discard := System.CRTL.write (Fd, S'Address,\n-                                    System.CRTL.size_t (Count));\n       --  Ignore write errors here; this is just debugging output, and there's\n       --  nothing to be done about errors anyway.\n+   begin\n+      Discard :=\n+        System.CRTL.write\n+          (Fd, S'Address, System.CRTL.size_t (Count));\n    end Write;\n \n end System.Tasking.Debug;"}, {"sha": "2fa27fdbde31c6669dc9bc5857f24ab1e784bd94", "filename": "gcc/ada/s-taspri-posix.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-taspri-posix.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-taspri-posix.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taspri-posix.ads?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---            Copyright (C) 1991-1914, Florida State University             --\n+--            Copyright (C) 1991-1994, Florida State University             --\n --                     Copyright (C) 1995-2014, AdaCore                     --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --"}, {"sha": "f8a8a71a6d998892de523d35aad931f0fdad7ffc", "filename": "gcc/ada/s-tassta.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-tassta.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-tassta.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tassta.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -814,7 +814,6 @@ package body System.Tasking.Stages is\n \n       Ignore_1 : Boolean;\n       Ignore_2 : Boolean;\n-      pragma Unreferenced (Ignore_1, Ignore_2);\n \n       function State\n         (Int : System.Interrupt_Management.Interrupt_ID) return Character;"}, {"sha": "e1940252782b43576b2d882b93fb9e403ba721bb", "filename": "gcc/ada/s-tasuti.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-tasuti.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-tasuti.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasuti.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -322,7 +322,10 @@ package body System.Tasking.Utilities is\n \n       Initialization.Undefer_Abort (Self_Id);\n \n-      return True; -- return value doesn't matter\n+      --  Return True. Actually the return value is junk, since we expect it\n+      --  always to be ignored (see spec), but we have to return something!\n+\n+      return True;\n    end Make_Independent;\n \n    ------------------"}, {"sha": "875489297ea378f30d5614ad392627069a653f3d", "filename": "gcc/ada/s-tasuti.ads", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-tasuti.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fs-tasuti.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasuti.ads?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -70,7 +70,6 @@ package System.Tasking.Utilities is\n    --     task body Some_Independent_Task is\n    --        ...\n    --        Ignore : constant Boolean := Make_Independent;\n-   --        pragma Unreferenced (Ignore);\n    --        ...\n    --     begin\n    --"}, {"sha": "c18718e8110c1665ba3a148e08dbc81ebe9c4f72", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -3038,6 +3038,7 @@ package body Sem_Ch6 is\n                  and then GNATprove_Mode\n                  and then Debug_Flag_QQ\n                  and then Full_Analysis\n+                 and then Nkind (N) /= N_Subprogram_Body_Stub\n                  and then Comes_From_Source (Body_Id)\n                  and then Is_List_Member (N)\n                  and then not Body_Has_Contract"}, {"sha": "fee781caac48449e8d85c85e2e794b57cef6fee0", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -15804,9 +15804,7 @@ package body Sem_Prag is\n             Type_Id : Node_Id;\n             Typ     : Entity_Id;\n             PDecl   : Node_Id;\n-\n             Discard : Boolean;\n-            pragma Unreferenced (Discard);\n \n          begin\n             GNAT_Pragma;\n@@ -18201,9 +18199,7 @@ package body Sem_Prag is\n          when Pragma_Predicate => Predicate : declare\n             Type_Id : Node_Id;\n             Typ     : Entity_Id;\n-\n             Discard : Boolean;\n-            pragma Unreferenced (Discard);\n \n          begin\n             GNAT_Pragma;"}, {"sha": "68746d65bb05fd30ccd6de53b9eeaef14f414a93", "filename": "gcc/ada/sem_util.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fsem_util.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b2888e62cee3ff8fa44e316b8d9d21a4611dbca/gcc%2Fada%2Fsem_util.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.ads?ref=7b2888e62cee3ff8fa44e316b8d9d21a4611dbca", "patch": "@@ -1211,7 +1211,7 @@ package Sem_Util is\n    --    junk\n    --    unused\n    --  Used to suppress warnings on names matching these patterns. The contents\n-   --  of Name_Buffer and Name_Len are desteoyed by this call.\n+   --  of Name_Buffer and Name_Len are destroyed by this call.\n \n    type Is_LHS_Result is (Yes, No, Unknown);\n    function Is_LHS (N : Node_Id) return Is_LHS_Result;"}]}