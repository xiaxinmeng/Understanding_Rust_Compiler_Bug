{"sha": "a3927ffb90429d9ac6bd73190063f8b922cfec45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM5MjdmZmI5MDQyOWQ5YWM2YmQ3MzE5MDA2M2Y4YjkyMmNmZWM0NQ==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2018-10-08T14:12:53Z"}, "committer": {"name": "Martin Liska", "email": "marxin@gcc.gnu.org", "date": "2018-10-08T14:12:53Z"}, "message": "Come up with gcc/testsuite/g++.target/i386/i386.dg and move there some tests.\n\n2018-10-08  Martin Liska  <mliska@suse.cz>\n\n\t* gcc.target/i386/i386.exp: Move procedures to\n\ttarget-supports.exp.\n\t* g++.target/i386/i386.exp: New file.\n\t* gcc.target/i386/mv*.C: Move here tests and remove\n\ttarget filter in these tests.\n\nFrom-SVN: r264929", "tree": {"sha": "c26e942daf7a694e0737f3487b695f67e1dd4bb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c26e942daf7a694e0737f3487b695f67e1dd4bb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a3927ffb90429d9ac6bd73190063f8b922cfec45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3927ffb90429d9ac6bd73190063f8b922cfec45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3927ffb90429d9ac6bd73190063f8b922cfec45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3927ffb90429d9ac6bd73190063f8b922cfec45/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed9984a03070a1be7c5b3815e410e6269ab721e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed9984a03070a1be7c5b3815e410e6269ab721e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed9984a03070a1be7c5b3815e410e6269ab721e4"}], "stats": {"total": 1054, "additions": 552, "deletions": 502}, "files": [{"sha": "a4ee18f58d0b4a4cdf4a2dec491612937674d8ca", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,3 +1,11 @@\n+2018-10-08  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc.target/i386/i386.exp: Move procedures to\n+\ttarget-supports.exp.\n+\t* g++.target/i386/i386.exp: New file.\n+\t* gcc.target/i386/mv*.C: Move here tests and remove\n+\ttarget filter in these tests.\n+\n 2018-10-08  Cesar Philippidis  <cesar@codesourcery.com>\n \n \t* gfortran.dg/contiguous_4.f90: Adjust."}, {"sha": "76a7e536f10c32d7e52b94ec1829ae3ad5ca2b2c", "filename": "gcc/testsuite/g++.target/i386/i386.exp", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fi386.exp?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -0,0 +1,43 @@\n+# Copyright (C) 2018 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `g++.exp' driver.\n+\n+# Exit immediately if this isn't a x86 target.\n+if { ![istarget i?86*-*-*] && ![istarget x86_64-*-*] } then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib g++-dg.exp\n+load_lib clearcap.exp\n+\n+global DEFAULT_CXXFLAGS\n+if ![info exists DEFAULT_CXXFLAGS] then {\n+    set DEFAULT_CXXFLAGS \" -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+clearcap-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.C]] \\\n+        \"\" $DEFAULT_CXXFLAGS\n+\n+# All done.\n+clearcap-finish\n+dg-finish"}, {"sha": "fc713477c1eb999db627f81be48fd3031cf53b91", "filename": "gcc/testsuite/g++.target/i386/mv1.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv1.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,5 +1,5 @@\n /* Test case to check if Multiversioning works.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n /* { dg-require-ifunc \"\" }  */\n /* { dg-options \"-O2 -fPIC\" } */\n ", "previous_filename": "gcc/testsuite/g++.dg/ext/mv1.C"}, {"sha": "07fbd0e9fd99748194c6c719d712e41e495bf964", "filename": "gcc/testsuite/g++.target/i386/mv10.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv10.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv10.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv10.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do assemble { target i?86-*-* x86_64-*-* } }\n+// { dg-do assemble }\n // { dg-options \"\" }\n \n __attribute__((target (\"popcnt\"), used))", "previous_filename": "gcc/testsuite/g++.dg/ext/mv10.C"}, {"sha": "58aaf50eb3645e14a1ba3a3cb42328575e449c5b", "filename": "gcc/testsuite/g++.target/i386/mv11.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv11.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-do compile }\n // { dg-options \"-msse2\" }\n \n int foo () __attribute__ ((target(\"default\")));", "previous_filename": "gcc/testsuite/g++.dg/ext/mv11.C"}, {"sha": "611c679bbc4a6cc70d8d1c39d41bb1ac15f79ef6", "filename": "gcc/testsuite/g++.target/i386/mv12-aux.cc", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv12-aux.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv12-aux.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv12-aux.cc?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "previous_filename": "gcc/testsuite/g++.dg/ext/mv12-aux.cc"}, {"sha": "21569627250feccf1e245b31a099e8b41d9442c3", "filename": "gcc/testsuite/g++.target/i386/mv12.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv12.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,7 +1,7 @@\n // Test case to check if multiversioning works as expected when the versions\n // are defined in different files.\n \n-// { dg-do run { target i?86-*-* x86_64-*-* } }\n+// { dg-do run }\n // { dg-require-ifunc \"\" }\n // { dg-options \"-O2\" }\n // { dg-additional-sources \"mv12-aux.cc\" }", "previous_filename": "gcc/testsuite/g++.dg/ext/mv12.C"}, {"sha": "650358d835fb513f48aff968bd63c0a500c21685", "filename": "gcc/testsuite/g++.target/i386/mv12.h", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv12.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv12.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv12.h?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "previous_filename": "gcc/testsuite/g++.dg/ext/mv12.h"}, {"sha": "39d05c71bdaf94543da072126c29e5855a22bcef", "filename": "gcc/testsuite/g++.target/i386/mv13.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv13.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,7 +1,7 @@\n // Test case to check if multiversioning functions that are extern \"C\"\n // generates errors.\n \n-// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-do compile }\n \n extern \"C\"\n __attribute__ ((target (\"default\")))", "previous_filename": "gcc/testsuite/g++.dg/ext/mv13.C"}, {"sha": "ccebb3371febeef4565432f61ff89b43d04ab618", "filename": "gcc/testsuite/g++.target/i386/mv14.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv14.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,5 +1,5 @@\n /* Test case to check if Multiversioning works.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n /* { dg-require-ifunc \"\" }  */\n /* { dg-options \"-O2 -fPIC -march=x86-64\" } */\n ", "previous_filename": "gcc/testsuite/g++.dg/ext/mv14.C"}, {"sha": "4e867f28a5ad1e64dff436462c8637690b68a959", "filename": "gcc/testsuite/g++.target/i386/mv15.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv15.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,5 +1,5 @@\n /* Test case to check if Multiversioning works.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n /* { dg-require-ifunc \"\" }  */\n /* { dg-options \"-O2 -fPIC -march=x86-64\" } */\n ", "previous_filename": "gcc/testsuite/g++.dg/ext/mv15.C"}, {"sha": "1091868a29ce24b8c7bab59d80f14bb713b212a2", "filename": "gcc/testsuite/g++.target/i386/mv16.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv16.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -2,7 +2,7 @@\n // for Intel CPUs with the same internal GCC processor id\n // but slighly different sets of x86 extensions.\n \n-// { dg-do run { target i?86-*-* x86_64-*-* } }\n+// { dg-do run }\n // { dg-require-ifunc \"\" }\n // { dg-options \"-O2\" }\n ", "previous_filename": "gcc/testsuite/g++.dg/ext/mv16.C"}, {"sha": "fefbfaac6ffeb62aa3183e938451cdccb6e428a7", "filename": "gcc/testsuite/g++.target/i386/mv17.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv17.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv17.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv17.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,6 +1,6 @@\n // Test case to check if Multiversioning works for BMI and BMI2.\n \n-// { dg-do run { target i?86-*-* x86_64-*-* } }\n+// { dg-do run }\n // { dg-require-ifunc \"\" }\n // { dg-options \"-O2\" }\n ", "previous_filename": "gcc/testsuite/g++.dg/ext/mv17.C"}, {"sha": "b62bc363d988c55f7682c74d29c05d7cd5146b12", "filename": "gcc/testsuite/g++.target/i386/mv18.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv18.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv18.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv18.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,5 +1,5 @@\n /* Test case to check if Multiversioning works.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n /* { dg-require-ifunc \"\" }  */\n /* { dg-require-effective-target pie } */\n /* { dg-options \"-O2 -fPIE -pie\" } */", "previous_filename": "gcc/testsuite/g++.dg/ext/mv18.C"}, {"sha": "b014c2e730df495e1bdb6020cf4cbcbc42f654cb", "filename": "gcc/testsuite/g++.target/i386/mv19.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv19.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv19.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv19.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,5 +1,5 @@\n /* Test case to check if Multiversioning works.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n /* { dg-require-ifunc \"\" }  */\n /* { dg-require-effective-target pie } */\n /* { dg-options \"-O2 -fPIE -pie -march=x86-64\" } */", "previous_filename": "gcc/testsuite/g++.dg/ext/mv19.C"}, {"sha": "3013a2f6374ed41afda5191eddabaa8d5d751239", "filename": "gcc/testsuite/g++.target/i386/mv2.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv2.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,6 +1,6 @@\n /* Test case to check if Multiversioning chooses the correct\n    dispatching order when versions are for various ISAs.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n /* { dg-require-ifunc \"\" }  */\n /* { dg-options \"-O2\" } */\n ", "previous_filename": "gcc/testsuite/g++.dg/ext/mv2.C"}, {"sha": "ed8607e1432ab3857c5340b4da3f58bc5d01b983", "filename": "gcc/testsuite/g++.target/i386/mv20.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv20.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,5 +1,5 @@\n /* Test case to check if Multiversioning works.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n /* { dg-require-ifunc \"\" }  */\n /* { dg-require-effective-target pie } */\n /* { dg-options \"-O2 -fPIE -pie -march=x86-64\" } */", "previous_filename": "gcc/testsuite/g++.dg/ext/mv20.C"}, {"sha": "a99805f28688edfdb1b4bca0636ce98f0995cd54", "filename": "gcc/testsuite/g++.target/i386/mv21.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv21.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,5 +1,5 @@\n /* Test case to check if Multiversioning works.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n /* { dg-require-ifunc \"\" }  */\n /* { dg-require-effective-target static } */\n /* { dg-options \"-O2 -static\" } */", "previous_filename": "gcc/testsuite/g++.dg/ext/mv21.C"}, {"sha": "5e43de712c952e958cfa4dc4c32aecea0d0ac3ac", "filename": "gcc/testsuite/g++.target/i386/mv22.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv22.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,5 +1,5 @@\n /* Test case to check if Multiversioning works.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n /* { dg-require-ifunc \"\" }  */\n /* { dg-require-effective-target static } */\n /* { dg-options \"-O2 -static -march=x86-64\" } */", "previous_filename": "gcc/testsuite/g++.dg/ext/mv22.C"}, {"sha": "674a0ff4a61b9b3f7344e044807f0e40c67199e7", "filename": "gcc/testsuite/g++.target/i386/mv23.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv23.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,5 +1,5 @@\n /* Test case to check if Multiversioning works.  */\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n /* { dg-require-ifunc \"\" }  */\n /* { dg-require-effective-target static } */\n /* { dg-options \"-O2 -static -march=x86-64\" } */", "previous_filename": "gcc/testsuite/g++.dg/ext/mv23.C"}, {"sha": "f8736ccc9ab13906f9e0f84b596ec259e4bcd072", "filename": "gcc/testsuite/g++.target/i386/mv24.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv24.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,6 +1,6 @@\n // Test case to check if Multiversioning works for AES\n \n-// { dg-do run { target i?86-*-* x86_64-*-* } }\n+// { dg-do run }\n // { dg-require-ifunc \"\" }\n // { dg-options \"-O2\" }\n ", "previous_filename": "gcc/testsuite/g++.dg/ext/mv24.C"}, {"sha": "2e2fcc38e50dc3eb1b9dc26fd723ab99e64e96ca", "filename": "gcc/testsuite/g++.target/i386/mv25.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv25.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv25.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv25.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,6 +1,6 @@\n // Test case to check if Multiversioning works for PCLMUL\n \n-// { dg-do run { target i?86-*-* x86_64-*-* } }\n+// { dg-do run }\n // { dg-require-ifunc \"\" }\n // { dg-options \"-O2\" }\n ", "previous_filename": "gcc/testsuite/g++.dg/ext/mv25.C"}, {"sha": "6693ca1f81adf8ec0d12566a855aa89046ccb9ae", "filename": "gcc/testsuite/g++.target/i386/mv26.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv26.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,5 +1,5 @@\n // PR c++/84059\n-// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-do compile }\n // { dg-require-ifunc \"\" }\n \n template <typename> struct a", "previous_filename": "gcc/testsuite/g++.dg/ext/mv26.C"}, {"sha": "60fa8ca7f8cf2c7f36df56b5223c7424cabea19d", "filename": "gcc/testsuite/g++.target/i386/mv27.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv27.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,5 +1,5 @@\n // PR c++/83911\n-// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-do compile }\n // { dg-require-ifunc \"\" }\n \n class SimdFloat", "previous_filename": "gcc/testsuite/g++.dg/ext/mv27.C"}, {"sha": "4a57a523015297cdd7ee2540233cacfff6132964", "filename": "gcc/testsuite/g++.target/i386/mv3.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv3.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -9,7 +9,7 @@\n    with a direct call to the popcnt version of foo.  Hence, this\n    test should pass.  */\n \n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n /* { dg-options \"-O2\" } */\n \n ", "previous_filename": "gcc/testsuite/g++.dg/ext/mv3.C"}, {"sha": "c4c4d68c4e4db0657c1e206e2076cbaee85791ef", "filename": "gcc/testsuite/g++.target/i386/mv4.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv4.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -2,7 +2,7 @@\n    when the default version of a multiversioned function is absent\n    and its pointer is taken.  */\n \n-/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do compile } */\n /* { dg-require-ifunc \"\" }  */\n /* { dg-options \"-O2\" } */\n ", "previous_filename": "gcc/testsuite/g++.dg/ext/mv4.C"}, {"sha": "6690a02a47f09d05ea38e1ad63b7cd3575cada44", "filename": "gcc/testsuite/g++.target/i386/mv5.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv5.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,7 +1,7 @@\n /* Test case to check if multiversioned functions are still generated if they are\n    marked comdat with inline keyword.  */\n \n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n /* { dg-require-ifunc \"\" }  */\n /* { dg-options \"-O2\" } */\n ", "previous_filename": "gcc/testsuite/g++.dg/ext/mv5.C"}, {"sha": "766b6de39f8b4f0889658cfd9870b0069cc22304", "filename": "gcc/testsuite/g++.target/i386/mv6.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv6.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,6 +1,6 @@\n /* Test to check if member version multiversioning works correctly.  */\n \n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run } */\n /* { dg-require-ifunc \"\" }  */\n /* { dg-options \"-march=x86-64\" } */\n ", "previous_filename": "gcc/testsuite/g++.dg/ext/mv6.C"}, {"sha": "2a7ce659cdb0ba5c36d52cf588bffa0637268e78", "filename": "gcc/testsuite/g++.target/i386/mv7.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv7.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target i?86-*-* x86_64-*-* } }\n+// { dg-do compile }\n // { dg-options \"\" }\n \n __attribute__((target (\"default\")))", "previous_filename": "gcc/testsuite/g++.dg/ext/mv7.C"}, {"sha": "f25399d8a5f1d50d4e7d55df198dbccdde67e3ea", "filename": "gcc/testsuite/g++.target/i386/mv8.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv8.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target i?86-*-* x86_64-*-* powerpc*-*-* aarch64*-*-* } }\n+// { dg-do compile }\n // { dg-options \"\" }\n \n __attribute__((target (11,12)))", "previous_filename": "gcc/testsuite/g++.dg/ext/mv8.C"}, {"sha": "876a736222077e6ff6d5289977dc7b6c2ac9ddb8", "filename": "gcc/testsuite/g++.target/i386/mv9.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmv9.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do compile { target i?86-*-* x86_64-*-* } }    \n+// { dg-do compile }\n // { dg-options \"\" }   \n \n void foo ();", "previous_filename": "gcc/testsuite/g++.dg/ext/mv9.C"}, {"sha": "b307d01ace63d8b3f27b6131a311cb0dd361e190", "filename": "gcc/testsuite/g++.target/i386/mvc1.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmvc1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmvc1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmvc1.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do run { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do run} */\n /* { dg-require-ifunc \"\" } */\n \n __attribute__((target_clones(\"avx\",\"arch=slm\",\"arch=core-avx2\",\"default\")))", "previous_filename": "gcc/testsuite/g++.dg/ext/mvc1.C"}, {"sha": "7c1fb6518d04f404123086660c32853dcd9f65ba", "filename": "gcc/testsuite/g++.target/i386/mvc2.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmvc2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmvc2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmvc2.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do compile } */\n /* { dg-require-ifunc \"\" } */\n \n __attribute__((target_clones(\"avx\",\"arch=slm\",\"default\")))", "previous_filename": "gcc/testsuite/g++.dg/ext/mvc2.C"}, {"sha": "5d634fd7ea68b905a0e93ca1c25f6907bc9d2858", "filename": "gcc/testsuite/g++.target/i386/mvc3.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmvc3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmvc3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmvc3.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do compile } */\n /* { dg-require-ifunc \"\" } */\n \n __attribute__((target(\"avx\")))", "previous_filename": "gcc/testsuite/g++.dg/ext/mvc3.C"}, {"sha": "68df5e3e4d0ca79d8be07b149574bdb6fde4925f", "filename": "gcc/testsuite/g++.target/i386/mvc4.C", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmvc4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmvc4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.target%2Fi386%2Fmvc4.C?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -1,4 +1,4 @@\n-/* { dg-do compile { target i?86-*-* x86_64-*-* } } */\n+/* { dg-do compile } */\n /* { dg-require-ifunc \"\" } */\n /* { dg-options \"-mavx\" } */\n ", "previous_filename": "gcc/testsuite/g++.dg/ext/mvc4.C"}, {"sha": "42bb7e693c14de36849f269de5a49043e7ed7733", "filename": "gcc/testsuite/gcc.target/i386/i386.exp", "status": "modified", "additions": 0, "deletions": 471, "changes": 471, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fi386.exp?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -25,477 +25,6 @@ if { ![istarget i?86*-*-*] && ![istarget x86_64-*-*] } then {\n load_lib gcc-dg.exp\n load_lib clearcap.exp\n \n-# Return 1 if attribute ms_hook_prologue is supported.\n-proc check_effective_target_ms_hook_prologue { } {\n-    if { [check_no_compiler_messages ms_hook_prologue object {\n-\t     void __attribute__ ((__ms_hook_prologue__)) foo ();\n-\t } \"\"] } {\n-\treturn 1\n-    } else {\n-\treturn 0\n-    }\n-}\n-\n-# Return 1 if 3dnow instructions can be compiled.\n-proc check_effective_target_3dnow { } {\n-    return [check_no_compiler_messages 3dnow object {\n-\ttypedef int __m64 __attribute__ ((__vector_size__ (8)));\n-\ttypedef float __v2sf __attribute__ ((__vector_size__ (8)));\n-\n-\t__m64 _m_pfadd (__m64 __A, __m64 __B)\n-\t{\n-\t    return (__m64) __builtin_ia32_pfadd ((__v2sf)__A, (__v2sf)__B);\n-\t}\n-    } \"-O2 -m3dnow\" ]\n-}\n-\n-# Return 1 if sse3 instructions can be compiled.\n-proc check_effective_target_sse3 { } {\n-    return [check_no_compiler_messages sse3 object {\n-\ttypedef double __m128d __attribute__ ((__vector_size__ (16)));\n-\ttypedef double __v2df __attribute__ ((__vector_size__ (16)));\n-\n-\t__m128d _mm_addsub_pd (__m128d __X, __m128d __Y)\n-\t{\n-\t    return (__m128d) __builtin_ia32_addsubpd ((__v2df)__X, (__v2df)__Y);\n-\t}\n-    } \"-O2 -msse3\" ]\n-}\n-\n-# Return 1 if ssse3 instructions can be compiled.\n-proc check_effective_target_ssse3 { } {\n-    return [check_no_compiler_messages ssse3 object {\n-\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n-\ttypedef int __v4si __attribute__ ((__vector_size__ (16)));\n-\n-\t__m128i _mm_abs_epi32 (__m128i __X)\n-\t{\n-\t    return (__m128i) __builtin_ia32_pabsd128 ((__v4si)__X);\n-\t}\n-    } \"-O2 -mssse3\" ]\n-}\n-\n-# Return 1 if aes instructions can be compiled.\n-proc check_effective_target_aes { } {\n-    return [check_no_compiler_messages aes object {\n-\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n-\ttypedef long long __v2di __attribute__ ((__vector_size__ (16)));\n-\n-\t__m128i _mm_aesimc_si128 (__m128i __X)\n-\t{\n-\t    return (__m128i) __builtin_ia32_aesimc128 ((__v2di)__X);\n-\t}\n-    } \"-O2 -maes\" ]\n-}\n-\n-# Return 1 if vaes instructions can be compiled.\n-proc check_effective_target_vaes { } {\n-    return [check_no_compiler_messages vaes object {\n-\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n-\ttypedef long long __v2di __attribute__ ((__vector_size__ (16)));\n-\n-\t__m128i _mm_aesimc_si128 (__m128i __X)\n-\t{\n-\t    return (__m128i) __builtin_ia32_aesimc128 ((__v2di)__X);\n-\t}\n-    } \"-O2 -maes -mavx\" ]\n-}\n-\n-# Return 1 if pclmul instructions can be compiled.\n-proc check_effective_target_pclmul { } {\n-    return [check_no_compiler_messages pclmul object {\n-\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n-\ttypedef long long __v2di __attribute__ ((__vector_size__ (16)));\n-\n-\t__m128i pclmulqdq_test (__m128i __X, __m128i __Y)\n-\t{\n-\t    return (__m128i) __builtin_ia32_pclmulqdq128 ((__v2di)__X,\n-\t\t\t\t\t\t\t  (__v2di)__Y,\n-\t\t\t\t\t\t\t  1);\n-\t}\n-    } \"-O2 -mpclmul\" ]\n-}\n-\n-# Return 1 if vpclmul instructions can be compiled.\n-proc check_effective_target_vpclmul { } {\n-    return [check_no_compiler_messages vpclmul object {\n-\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n-\ttypedef long long __v2di __attribute__ ((__vector_size__ (16)));\n-\n-\t__m128i pclmulqdq_test (__m128i __X, __m128i __Y)\n-\t{\n-\t    return (__m128i) __builtin_ia32_pclmulqdq128 ((__v2di)__X,\n-\t\t\t\t\t\t\t  (__v2di)__Y,\n-\t\t\t\t\t\t\t  1);\n-\t}\n-    } \"-O2 -mpclmul -mavx\" ]\n-}\n-\n-# Return 1 if sse4a instructions can be compiled.\n-proc check_effective_target_sse4a { } {\n-    return [check_no_compiler_messages sse4a object {\n-\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n-\ttypedef long long __v2di __attribute__ ((__vector_size__ (16)));\n-\n-\t__m128i _mm_insert_si64 (__m128i __X,__m128i __Y)\n-\t{\n-\t    return (__m128i) __builtin_ia32_insertq ((__v2di)__X, (__v2di)__Y);\n-\t}\n-    } \"-O2 -msse4a\" ]\n-}\n-\n-# Return 1 if fma4 instructions can be compiled.\n-proc check_effective_target_fma4 { } {\n-    return [check_no_compiler_messages fma4 object {\n-        typedef float __m128 __attribute__ ((__vector_size__ (16)));\n-\ttypedef float __v4sf __attribute__ ((__vector_size__ (16)));\n-\t__m128 _mm_macc_ps(__m128 __A, __m128 __B, __m128 __C)\n-\t{\n-\t    return (__m128) __builtin_ia32_vfmaddps ((__v4sf)__A,\n-\t\t\t\t\t\t     (__v4sf)__B,\n-\t\t\t\t\t\t     (__v4sf)__C);\n-\t}\n-    } \"-O2 -mfma4\" ]\n-}\n-\n-# Return 1 if fma instructions can be compiled.\n-proc check_effective_target_fma { } {\n-    return [check_no_compiler_messages fma object {\n-        typedef float __m128 __attribute__ ((__vector_size__ (16)));\n-\ttypedef float __v4sf __attribute__ ((__vector_size__ (16)));\n-\t__m128 _mm_macc_ps(__m128 __A, __m128 __B, __m128 __C)\n-\t{\n-\t    return (__m128) __builtin_ia32_vfmaddps ((__v4sf)__A,\n-\t\t\t\t\t\t     (__v4sf)__B,\n-\t\t\t\t\t\t     (__v4sf)__C);\n-\t}\n-    } \"-O2 -mfma\" ]\n-}\n-\n-# Return 1 if xop instructions can be compiled.\n-proc check_effective_target_xop { } {\n-    return [check_no_compiler_messages xop object {\n-\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n-\ttypedef short __v8hi __attribute__ ((__vector_size__ (16)));\n-\t__m128i _mm_maccs_epi16(__m128i __A, __m128i __B, __m128i __C)\n-\t{\n-\t    return (__m128i) __builtin_ia32_vpmacssww ((__v8hi)__A,\n-\t\t\t\t\t\t       (__v8hi)__B,\n-\t\t\t\t\t\t       (__v8hi)__C);\n-\t}\n-    } \"-O2 -mxop\" ]\n-}\n-\n-# Return 1 if lzcnt instruction can be compiled.\n-proc check_effective_target_lzcnt { } {\n-    return [check_no_compiler_messages lzcnt object {\n-\tunsigned short _lzcnt (unsigned short __X)\n-\t{\n-\t   return __builtin_clzs (__X);\n-\t}\n-    } \"-mlzcnt\" ]\n-}\n-\n-# Return 1 if bmi instructions can be compiled.\n-proc check_effective_target_bmi { } {\n-    return [check_no_compiler_messages bmi object {\n-\tunsigned int __bextr_u32 (unsigned int __X, unsigned int __Y)\n-\t{\n-\t  return __builtin_ia32_bextr_u32 (__X, __Y);\n-\t}\n-    } \"-mbmi\" ]\n-}\n-\n-# Return 1 if ADX instructions can be compiled.\n-proc check_effective_target_adx { } {\n-    return [check_no_compiler_messages adx object {\n-\tunsigned char\n-\t_adxcarry_u32 (unsigned char __CF, unsigned int __X,\n-\t\t   unsigned int __Y, unsigned int *__P)\n-\t{\n-\t    return __builtin_ia32_addcarryx_u32 (__CF, __X, __Y, __P);\n-\t}\n-    } \"-madx\" ]\n-}\n-\n-# Return 1 if rtm instructions can be compiled.\n-proc check_effective_target_rtm { } {\n-    return [check_no_compiler_messages rtm object {\n-\tvoid\n-\t_rtm_xend (void)\n-\t{\n-\t    return __builtin_ia32_xend ();\n-\t}\n-    } \"-mrtm\" ]\n-}\n-\n-# Return 1 if avx512vl instructions can be compiled.\n-proc check_effective_target_avx512vl { } {\n-    return [check_no_compiler_messages avx512vl object {\n-\ttypedef long long __v4di __attribute__ ((__vector_size__ (32)));\n-\t__v4di\n-\tmm256_and_epi64  (__v4di __X, __v4di __Y)\n-\t{\n-            __v4di __W;\n-            return __builtin_ia32_pandq256_mask (__X, __Y, __W, -1);\n-\t}\n-    } \"-mavx512vl\" ]\n-}\n-\n-# Return 1 if avx512cd instructions can be compiled.\n-proc check_effective_target_avx512cd { } {\n-    return [check_no_compiler_messages avx512cd_trans object {\n-\ttypedef long long __v8di __attribute__ ((__vector_size__ (64)));\n-\t__v8di\n-\t_mm512_conflict_epi64 (__v8di __W, __v8di __A)\n-\t{\n-\t  return (__v8di) __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,\n-\t\t\t\t\t\t\t\t (__v8di) __W,\n-\t\t\t\t\t\t\t\t -1);\n-\t}\n-   } \"-Wno-psabi -mavx512cd\" ]\n-}\n-\n-# Return 1 if avx512er instructions can be compiled.\n-proc check_effective_target_avx512er { } {\n-    return [check_no_compiler_messages avx512er_trans object {\n-\ttypedef float __v16sf __attribute__ ((__vector_size__ (64)));\n-\t__v16sf\n-\tmm512_exp2a23_ps  (__v16sf __X)\n-\t{\n-\t    return __builtin_ia32_exp2ps_mask (__X, __X, -1, 4);\n-\t}\n-   } \"-Wno-psabi -mavx512er\" ]\n-}\n-\n-# Return 1 if sha instructions can be compiled.\n-proc check_effective_target_sha { } {\n-    return [check_no_compiler_messages sha object {\n-\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n-\ttypedef int __v4si __attribute__ ((__vector_size__ (16)));\n-\n-\t__m128i _mm_sha1msg1_epu32 (__m128i __X, __m128i __Y)\n-\t{\n-            return (__m128i) __builtin_ia32_sha1msg1 ((__v4si)__X,\n-\t\t\t\t\t\t      (__v4si)__Y);\n-\t}\n-    } \"-O2 -msha\" ]\n-}\n-\n-# Return 1 if avx512dq instructions can be compiled.\n-proc check_effective_target_avx512dq { } {\n-    return [check_no_compiler_messages avx512dq object {\n-\ttypedef long long __v8di __attribute__ ((__vector_size__ (64)));\n-\t__v8di\n-\t_mm512_mask_mullo_epi64 (__v8di __W, __v8di __A, __v8di __B)\n-\t{\n-\t    return (__v8di) __builtin_ia32_pmullq512_mask ((__v8di) __A,\n-\t\t\t\t\t\t\t    (__v8di) __B,\n-\t\t\t\t\t\t\t    (__v8di) __W,\n-\t\t\t\t\t\t\t    -1);\n-\t}\n-    } \"-mavx512dq\" ]\n-}\n-\n-# Return 1 if avx512bw instructions can be compiled.\n-proc check_effective_target_avx512bw { } {\n-    return [check_no_compiler_messages avx512bw object {\n-\ttypedef short __v32hi __attribute__ ((__vector_size__ (64)));\n-\t__v32hi\n-\t_mm512_mask_mulhrs_epi16 (__v32hi __W, __v32hi __A, __v32hi __B)\n-\t{\n-\t    return (__v32hi) __builtin_ia32_pmulhrsw512_mask ((__v32hi) __A,\n-\t\t\t\t\t\t\t    (__v32hi) __B,\n-\t\t\t\t\t\t\t    (__v32hi) __W,\n-\t\t\t\t\t\t\t    -1);\n-\t}\n-    } \"-mavx512bw\" ]\n-}\n-\n-# Return 1 if avx512ifma instructions can be compiled.\n-proc check_effective_target_avx512ifma { } {\n-    return [check_no_compiler_messages avx512ifma object {\n-\ttypedef long long __v8di __attribute__ ((__vector_size__ (64)));\n-\t__v8di\n-\t_mm512_madd52lo_epu64 (__v8di __X, __v8di __Y, __v8di __Z)\n-\t{\n-\t  return (__v8di) __builtin_ia32_vpmadd52luq512_mask ((__v8di) __X,\n-\t\t\t\t\t\t\t       (__v8di) __Y,\n-\t\t\t\t\t\t               (__v8di) __Z,\n-\t\t\t\t\t\t               -1);\n-\t}\n-    } \"-mavx512ifma\" ]\n-}\n-\n-# Return 1 if avx512vbmi instructions can be compiled.\n-proc check_effective_target_avx512vbmi { } {\n-    return [check_no_compiler_messages avx512vbmi object {\n-\ttypedef char __v64qi __attribute__ ((__vector_size__ (64)));\n-\t__v64qi\n-\t_mm512_multishift_epi64_epi8 (__v64qi __X, __v64qi __Y)\n-\t{\n-\t  return (__v64qi) __builtin_ia32_vpmultishiftqb512_mask ((__v64qi) __X,\n-\t\t\t\t\t\t\t\t (__v64qi) __Y,\n-\t\t\t\t\t\t\t\t (__v64qi) __Y,\n-\t\t\t\t\t\t\t\t -1);\n-\t}\n-    } \"-mavx512vbmi\" ]\n-}\n-\n-# Return 1 if avx512_4fmaps instructions can be compiled.\n-proc check_effective_target_avx5124fmaps { } {\n-    return [check_no_compiler_messages avx5124fmaps object {\n-\ttypedef float __v16sf __attribute__ ((__vector_size__ (64)));\n-\ttypedef float __v4sf __attribute__ ((__vector_size__ (16)));\n-\n-\t__v16sf\n-\t_mm512_mask_4fmadd_ps (__v16sf __DEST, __v16sf __A, __v16sf __B, __v16sf __C,\n-\t\t\t       __v16sf __D, __v16sf __E, __v4sf *__F)\n-\t{\n-\t    return (__v16sf) __builtin_ia32_4fmaddps_mask ((__v16sf) __A,\n-\t\t\t\t\t\t\t  (__v16sf) __B,\n-\t\t\t\t\t\t\t  (__v16sf) __C,\n-\t\t\t\t\t\t\t  (__v16sf) __D,\n-\t\t\t\t\t\t\t  (__v16sf) __E,\n-\t\t\t\t\t\t\t  (const __v4sf *) __F,\n-\t\t\t\t\t\t\t  (__v16sf) __DEST,\n-\t\t\t\t\t\t\t  0xffff);\n-\t}\n-    } \"-mavx5124fmaps\" ]\n-}\n-\n-# Return 1 if avx512_4vnniw instructions can be compiled.\n-proc check_effective_target_avx5124vnniw { } {\n-    return [check_no_compiler_messages avx5124vnniw object {\n-\ttypedef int __v16si __attribute__ ((__vector_size__ (64)));\n-\ttypedef int __v4si __attribute__ ((__vector_size__ (16)));\n-\n-\t__v16si\n-\t_mm512_4dpwssd_epi32 (__v16si __A, __v16si __B, __v16si __C,\n-\t\t\t      __v16si __D, __v16si __E, __v4si *__F)\n-\t{\n-\t    return (__v16si) __builtin_ia32_vp4dpwssd ((__v16si) __B,\n-\t\t\t\t\t\t       (__v16si) __C,\n-\t\t\t\t\t\t       (__v16si) __D,\n-\t\t\t\t\t\t       (__v16si) __E,\n-\t\t\t\t\t\t       (__v16si) __A,\n-\t\t\t\t\t\t       (const __v4si *) __F);\n-\t}\n-    } \"-mavx5124vnniw\" ]\n-}\n-\n-# Return 1 if avx512_vpopcntdq instructions can be compiled.\n-proc check_effective_target_avx512vpopcntdq { } {\n-    return [check_no_compiler_messages avx512vpopcntdq object {\n-        typedef int __v16si __attribute__ ((__vector_size__ (64)));\n-\n-        __v16si\n-        _mm512_popcnt_epi32 (__v16si __A)\n-        {\n-            return (__v16si) __builtin_ia32_vpopcountd_v16si ((__v16si) __A);\n-        }\n-    } \"-mavx512vpopcntdq\" ]\n-}\n-\n-# Return 1 if 128 or 256-bit avx512_vpopcntdq instructions can be compiled.\n-proc check_effective_target_avx512vpopcntdqvl { } {\n-    return [check_no_compiler_messages avx512vpopcntdqvl object {\n-        typedef int __v8si __attribute__ ((__vector_size__ (32)));\n-\n-        __v8si\n-        _mm256_popcnt_epi32 (__v8si __A)\n-        {\n-            return (__v8si) __builtin_ia32_vpopcountd_v8si ((__v8si) __A);\n-        }\n-    } \"-mavx512vpopcntdq -mavx512vl\" ]\n-}\n-\n-# Return 1 if gfni instructions can be compiled.\n-proc check_effective_target_gfni { } {\n-    return [check_no_compiler_messages gfni object {\n-        typedef char __v16qi __attribute__ ((__vector_size__ (16)));\n-\n-        __v16qi\n-        _mm_gf2p8affineinv_epi64_epi8 (__v16qi __A, __v16qi __B, const int __C)\n-        {\n-            return (__v16qi) __builtin_ia32_vgf2p8affineinvqb_v16qi ((__v16qi) __A,\n-\t\t\t\t\t\t\t\t     (__v16qi) __B,\n-\t\t\t\t\t\t\t\t      0);\n-        }\n-    } \"-mgfni\" ]\n-}\n-\n-# Return 1 if avx512vbmi2 instructions can be compiled.\n-proc check_effective_target_avx512vbmi2 { } {\n-    return [check_no_compiler_messages avx512vbmi2 object {\n-        typedef char __v16qi __attribute__ ((__vector_size__ (16)));\n-\ttypedef unsigned long long __mmask16;\n-\n-\t__v16qi\n-\t_mm_mask_compress_epi8 (__v16qi __A, __mmask16 __B, __v16qi __C)\n-\t{\n-  \t\treturn (__v16qi) __builtin_ia32_compressqi128_mask((__v16qi)__C,\n-\t\t\t\t\t\t\t\t   (__v16qi)__A,\n-\t\t\t\t\t\t\t\t   (__mmask16)__B);\n-\t}\n-    } \"-mavx512vbmi2 -mavx512vl\" ]\n-}\n-\n-# Return 1 if avx512vbmi2 instructions can be compiled.\n-proc check_effective_target_avx512vnni { } {\n-    return [check_no_compiler_messages avx512vnni object {\n-        typedef int __v16si __attribute__ ((__vector_size__ (64)));\n-\n-\t__v16si\n-\t_mm_mask_compress_epi8 (__v16si __A, __v16si __B, __v16si __C)\n-\t{\n-  \t\treturn (__v16si) __builtin_ia32_vpdpbusd_v16si ((__v16si)__A,\n-\t\t\t\t\t\t\t\t(__v16si)__B,\n-\t\t\t\t\t\t\t\t(__v16si)__C);\n-\t}\n-    } \"-mavx512vnni -mavx512f\" ]\n-}\n-\n-# Return 1 if vaes instructions can be compiled.\n-proc check_effective_target_avx512vaes { } {\n-    return [check_no_compiler_messages avx512vaes object {\n-\n-        typedef int __v16si __attribute__ ((__vector_size__ (64)));\n-\n-\t__v32qi\n-\t_mm256_aesdec_epi128 (__v32qi __A, __v32qi __B)\n-\t{\n-\t  return (__v32qi)__builtin_ia32_vaesdec_v32qi ((__v32qi) __A, (__v32qi) __B);\n-\t}\n-    } \"-mvaes\" ]\n-}\n-\n-# Return 1 if vpclmulqdq instructions can be compiled.\n-proc check_effective_target_vpclmulqdq { } {\n-    return [check_no_compiler_messages vpclmulqdq object {\n-        typedef long long __v4di __attribute__ ((__vector_size__ (32)));\n-\n-        __v4di\n-        _mm256_clmulepi64_epi128 (__v4di __A, __v4di __B)\n-        {\n-            return (__v4di) __builtin_ia32_vpclmulqdq_v4di (__A, __B, 0);\n-        }\n-    } \"-mvpclmulqdq -mavx512vl\" ]\n-}\n-\n-# Return 1 if avx512_bitalg instructions can be compiled.\n-proc check_effective_target_avx512bitalg { } {\n-    return [check_no_compiler_messages avx512bitalg object {\n-        typedef short int __v32hi __attribute__ ((__vector_size__ (64)));\n-\n-        __v32hi\n-        _mm512_popcnt_epi16 (__v32hi __A)\n-        {\n-            return (__v32hi) __builtin_ia32_vpopcountw_v32hi ((__v32hi) __A);\n-        }\n-    } \"-mavx512bitalg\" ]\n-}\n-\n # If a testcase doesn't have special options, use these.\n global DEFAULT_CFLAGS\n if ![info exists DEFAULT_CFLAGS] then {"}, {"sha": "fd74c04d092b0e2341b85eefbebb1f0df9423492", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 470, "deletions": 0, "changes": 470, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a3927ffb90429d9ac6bd73190063f8b922cfec45/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=a3927ffb90429d9ac6bd73190063f8b922cfec45", "patch": "@@ -7296,6 +7296,476 @@ proc check_effective_target_f16c { } {\n     } \"-O2 -mf16c\" ]\n }\n \n+proc check_effective_target_ms_hook_prologue { } {\n+    if { [check_no_compiler_messages ms_hook_prologue object {\n+\t     void __attribute__ ((__ms_hook_prologue__)) foo ();\n+\t } \"\"] } {\n+\treturn 1\n+    } else {\n+\treturn 0\n+    }\n+}\n+\n+# Return 1 if 3dnow instructions can be compiled.\n+proc check_effective_target_3dnow { } {\n+    return [check_no_compiler_messages 3dnow object {\n+\ttypedef int __m64 __attribute__ ((__vector_size__ (8)));\n+\ttypedef float __v2sf __attribute__ ((__vector_size__ (8)));\n+\n+\t__m64 _m_pfadd (__m64 __A, __m64 __B)\n+\t{\n+\t    return (__m64) __builtin_ia32_pfadd ((__v2sf)__A, (__v2sf)__B);\n+\t}\n+    } \"-O2 -m3dnow\" ]\n+}\n+\n+# Return 1 if sse3 instructions can be compiled.\n+proc check_effective_target_sse3 { } {\n+    return [check_no_compiler_messages sse3 object {\n+\ttypedef double __m128d __attribute__ ((__vector_size__ (16)));\n+\ttypedef double __v2df __attribute__ ((__vector_size__ (16)));\n+\n+\t__m128d _mm_addsub_pd (__m128d __X, __m128d __Y)\n+\t{\n+\t    return (__m128d) __builtin_ia32_addsubpd ((__v2df)__X, (__v2df)__Y);\n+\t}\n+    } \"-O2 -msse3\" ]\n+}\n+\n+# Return 1 if ssse3 instructions can be compiled.\n+proc check_effective_target_ssse3 { } {\n+    return [check_no_compiler_messages ssse3 object {\n+\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\ttypedef int __v4si __attribute__ ((__vector_size__ (16)));\n+\n+\t__m128i _mm_abs_epi32 (__m128i __X)\n+\t{\n+\t    return (__m128i) __builtin_ia32_pabsd128 ((__v4si)__X);\n+\t}\n+    } \"-O2 -mssse3\" ]\n+}\n+\n+# Return 1 if aes instructions can be compiled.\n+proc check_effective_target_aes { } {\n+    return [check_no_compiler_messages aes object {\n+\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\ttypedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+\n+\t__m128i _mm_aesimc_si128 (__m128i __X)\n+\t{\n+\t    return (__m128i) __builtin_ia32_aesimc128 ((__v2di)__X);\n+\t}\n+    } \"-O2 -maes\" ]\n+}\n+\n+# Return 1 if vaes instructions can be compiled.\n+proc check_effective_target_vaes { } {\n+    return [check_no_compiler_messages vaes object {\n+\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\ttypedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+\n+\t__m128i _mm_aesimc_si128 (__m128i __X)\n+\t{\n+\t    return (__m128i) __builtin_ia32_aesimc128 ((__v2di)__X);\n+\t}\n+    } \"-O2 -maes -mavx\" ]\n+}\n+\n+# Return 1 if pclmul instructions can be compiled.\n+proc check_effective_target_pclmul { } {\n+    return [check_no_compiler_messages pclmul object {\n+\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\ttypedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+\n+\t__m128i pclmulqdq_test (__m128i __X, __m128i __Y)\n+\t{\n+\t    return (__m128i) __builtin_ia32_pclmulqdq128 ((__v2di)__X,\n+\t\t\t\t\t\t\t  (__v2di)__Y,\n+\t\t\t\t\t\t\t  1);\n+\t}\n+    } \"-O2 -mpclmul\" ]\n+}\n+\n+# Return 1 if vpclmul instructions can be compiled.\n+proc check_effective_target_vpclmul { } {\n+    return [check_no_compiler_messages vpclmul object {\n+\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\ttypedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+\n+\t__m128i pclmulqdq_test (__m128i __X, __m128i __Y)\n+\t{\n+\t    return (__m128i) __builtin_ia32_pclmulqdq128 ((__v2di)__X,\n+\t\t\t\t\t\t\t  (__v2di)__Y,\n+\t\t\t\t\t\t\t  1);\n+\t}\n+    } \"-O2 -mpclmul -mavx\" ]\n+}\n+\n+# Return 1 if sse4a instructions can be compiled.\n+proc check_effective_target_sse4a { } {\n+    return [check_no_compiler_messages sse4a object {\n+\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\ttypedef long long __v2di __attribute__ ((__vector_size__ (16)));\n+\n+\t__m128i _mm_insert_si64 (__m128i __X,__m128i __Y)\n+\t{\n+\t    return (__m128i) __builtin_ia32_insertq ((__v2di)__X, (__v2di)__Y);\n+\t}\n+    } \"-O2 -msse4a\" ]\n+}\n+\n+# Return 1 if fma4 instructions can be compiled.\n+proc check_effective_target_fma4 { } {\n+    return [check_no_compiler_messages fma4 object {\n+        typedef float __m128 __attribute__ ((__vector_size__ (16)));\n+\ttypedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\t__m128 _mm_macc_ps(__m128 __A, __m128 __B, __m128 __C)\n+\t{\n+\t    return (__m128) __builtin_ia32_vfmaddps ((__v4sf)__A,\n+\t\t\t\t\t\t     (__v4sf)__B,\n+\t\t\t\t\t\t     (__v4sf)__C);\n+\t}\n+    } \"-O2 -mfma4\" ]\n+}\n+\n+# Return 1 if fma instructions can be compiled.\n+proc check_effective_target_fma { } {\n+    return [check_no_compiler_messages fma object {\n+        typedef float __m128 __attribute__ ((__vector_size__ (16)));\n+\ttypedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\t__m128 _mm_macc_ps(__m128 __A, __m128 __B, __m128 __C)\n+\t{\n+\t    return (__m128) __builtin_ia32_vfmaddps ((__v4sf)__A,\n+\t\t\t\t\t\t     (__v4sf)__B,\n+\t\t\t\t\t\t     (__v4sf)__C);\n+\t}\n+    } \"-O2 -mfma\" ]\n+}\n+\n+# Return 1 if xop instructions can be compiled.\n+proc check_effective_target_xop { } {\n+    return [check_no_compiler_messages xop object {\n+\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\ttypedef short __v8hi __attribute__ ((__vector_size__ (16)));\n+\t__m128i _mm_maccs_epi16(__m128i __A, __m128i __B, __m128i __C)\n+\t{\n+\t    return (__m128i) __builtin_ia32_vpmacssww ((__v8hi)__A,\n+\t\t\t\t\t\t       (__v8hi)__B,\n+\t\t\t\t\t\t       (__v8hi)__C);\n+\t}\n+    } \"-O2 -mxop\" ]\n+}\n+\n+# Return 1 if lzcnt instruction can be compiled.\n+proc check_effective_target_lzcnt { } {\n+    return [check_no_compiler_messages lzcnt object {\n+\tunsigned short _lzcnt (unsigned short __X)\n+\t{\n+\t   return __builtin_clzs (__X);\n+\t}\n+    } \"-mlzcnt\" ]\n+}\n+\n+# Return 1 if bmi instructions can be compiled.\n+proc check_effective_target_bmi { } {\n+    return [check_no_compiler_messages bmi object {\n+\tunsigned int __bextr_u32 (unsigned int __X, unsigned int __Y)\n+\t{\n+\t  return __builtin_ia32_bextr_u32 (__X, __Y);\n+\t}\n+    } \"-mbmi\" ]\n+}\n+\n+# Return 1 if ADX instructions can be compiled.\n+proc check_effective_target_adx { } {\n+    return [check_no_compiler_messages adx object {\n+\tunsigned char\n+\t_adxcarry_u32 (unsigned char __CF, unsigned int __X,\n+\t\t   unsigned int __Y, unsigned int *__P)\n+\t{\n+\t    return __builtin_ia32_addcarryx_u32 (__CF, __X, __Y, __P);\n+\t}\n+    } \"-madx\" ]\n+}\n+\n+# Return 1 if rtm instructions can be compiled.\n+proc check_effective_target_rtm { } {\n+    return [check_no_compiler_messages rtm object {\n+\tvoid\n+\t_rtm_xend (void)\n+\t{\n+\t    return __builtin_ia32_xend ();\n+\t}\n+    } \"-mrtm\" ]\n+}\n+\n+# Return 1 if avx512vl instructions can be compiled.\n+proc check_effective_target_avx512vl { } {\n+    return [check_no_compiler_messages avx512vl object {\n+\ttypedef long long __v4di __attribute__ ((__vector_size__ (32)));\n+\t__v4di\n+\tmm256_and_epi64  (__v4di __X, __v4di __Y)\n+\t{\n+            __v4di __W;\n+            return __builtin_ia32_pandq256_mask (__X, __Y, __W, -1);\n+\t}\n+    } \"-mavx512vl\" ]\n+}\n+\n+# Return 1 if avx512cd instructions can be compiled.\n+proc check_effective_target_avx512cd { } {\n+    return [check_no_compiler_messages avx512cd_trans object {\n+\ttypedef long long __v8di __attribute__ ((__vector_size__ (64)));\n+\t__v8di\n+\t_mm512_conflict_epi64 (__v8di __W, __v8di __A)\n+\t{\n+\t  return (__v8di) __builtin_ia32_vpconflictdi_512_mask ((__v8di) __A,\n+\t\t\t\t\t\t\t\t (__v8di) __W,\n+\t\t\t\t\t\t\t\t -1);\n+\t}\n+   } \"-Wno-psabi -mavx512cd\" ]\n+}\n+\n+# Return 1 if avx512er instructions can be compiled.\n+proc check_effective_target_avx512er { } {\n+    return [check_no_compiler_messages avx512er_trans object {\n+\ttypedef float __v16sf __attribute__ ((__vector_size__ (64)));\n+\t__v16sf\n+\tmm512_exp2a23_ps  (__v16sf __X)\n+\t{\n+\t    return __builtin_ia32_exp2ps_mask (__X, __X, -1, 4);\n+\t}\n+   } \"-Wno-psabi -mavx512er\" ]\n+}\n+\n+# Return 1 if sha instructions can be compiled.\n+proc check_effective_target_sha { } {\n+    return [check_no_compiler_messages sha object {\n+\ttypedef long long __m128i __attribute__ ((__vector_size__ (16)));\n+\ttypedef int __v4si __attribute__ ((__vector_size__ (16)));\n+\n+\t__m128i _mm_sha1msg1_epu32 (__m128i __X, __m128i __Y)\n+\t{\n+            return (__m128i) __builtin_ia32_sha1msg1 ((__v4si)__X,\n+\t\t\t\t\t\t      (__v4si)__Y);\n+\t}\n+    } \"-O2 -msha\" ]\n+}\n+\n+# Return 1 if avx512dq instructions can be compiled.\n+proc check_effective_target_avx512dq { } {\n+    return [check_no_compiler_messages avx512dq object {\n+\ttypedef long long __v8di __attribute__ ((__vector_size__ (64)));\n+\t__v8di\n+\t_mm512_mask_mullo_epi64 (__v8di __W, __v8di __A, __v8di __B)\n+\t{\n+\t    return (__v8di) __builtin_ia32_pmullq512_mask ((__v8di) __A,\n+\t\t\t\t\t\t\t    (__v8di) __B,\n+\t\t\t\t\t\t\t    (__v8di) __W,\n+\t\t\t\t\t\t\t    -1);\n+\t}\n+    } \"-mavx512dq\" ]\n+}\n+\n+# Return 1 if avx512bw instructions can be compiled.\n+proc check_effective_target_avx512bw { } {\n+    return [check_no_compiler_messages avx512bw object {\n+\ttypedef short __v32hi __attribute__ ((__vector_size__ (64)));\n+\t__v32hi\n+\t_mm512_mask_mulhrs_epi16 (__v32hi __W, __v32hi __A, __v32hi __B)\n+\t{\n+\t    return (__v32hi) __builtin_ia32_pmulhrsw512_mask ((__v32hi) __A,\n+\t\t\t\t\t\t\t    (__v32hi) __B,\n+\t\t\t\t\t\t\t    (__v32hi) __W,\n+\t\t\t\t\t\t\t    -1);\n+\t}\n+    } \"-mavx512bw\" ]\n+}\n+\n+# Return 1 if avx512ifma instructions can be compiled.\n+proc check_effective_target_avx512ifma { } {\n+    return [check_no_compiler_messages avx512ifma object {\n+\ttypedef long long __v8di __attribute__ ((__vector_size__ (64)));\n+\t__v8di\n+\t_mm512_madd52lo_epu64 (__v8di __X, __v8di __Y, __v8di __Z)\n+\t{\n+\t  return (__v8di) __builtin_ia32_vpmadd52luq512_mask ((__v8di) __X,\n+\t\t\t\t\t\t\t       (__v8di) __Y,\n+\t\t\t\t\t\t               (__v8di) __Z,\n+\t\t\t\t\t\t               -1);\n+\t}\n+    } \"-mavx512ifma\" ]\n+}\n+\n+# Return 1 if avx512vbmi instructions can be compiled.\n+proc check_effective_target_avx512vbmi { } {\n+    return [check_no_compiler_messages avx512vbmi object {\n+\ttypedef char __v64qi __attribute__ ((__vector_size__ (64)));\n+\t__v64qi\n+\t_mm512_multishift_epi64_epi8 (__v64qi __X, __v64qi __Y)\n+\t{\n+\t  return (__v64qi) __builtin_ia32_vpmultishiftqb512_mask ((__v64qi) __X,\n+\t\t\t\t\t\t\t\t (__v64qi) __Y,\n+\t\t\t\t\t\t\t\t (__v64qi) __Y,\n+\t\t\t\t\t\t\t\t -1);\n+\t}\n+    } \"-mavx512vbmi\" ]\n+}\n+\n+# Return 1 if avx512_4fmaps instructions can be compiled.\n+proc check_effective_target_avx5124fmaps { } {\n+    return [check_no_compiler_messages avx5124fmaps object {\n+\ttypedef float __v16sf __attribute__ ((__vector_size__ (64)));\n+\ttypedef float __v4sf __attribute__ ((__vector_size__ (16)));\n+\n+\t__v16sf\n+\t_mm512_mask_4fmadd_ps (__v16sf __DEST, __v16sf __A, __v16sf __B, __v16sf __C,\n+\t\t\t       __v16sf __D, __v16sf __E, __v4sf *__F)\n+\t{\n+\t    return (__v16sf) __builtin_ia32_4fmaddps_mask ((__v16sf) __A,\n+\t\t\t\t\t\t\t  (__v16sf) __B,\n+\t\t\t\t\t\t\t  (__v16sf) __C,\n+\t\t\t\t\t\t\t  (__v16sf) __D,\n+\t\t\t\t\t\t\t  (__v16sf) __E,\n+\t\t\t\t\t\t\t  (const __v4sf *) __F,\n+\t\t\t\t\t\t\t  (__v16sf) __DEST,\n+\t\t\t\t\t\t\t  0xffff);\n+\t}\n+    } \"-mavx5124fmaps\" ]\n+}\n+\n+# Return 1 if avx512_4vnniw instructions can be compiled.\n+proc check_effective_target_avx5124vnniw { } {\n+    return [check_no_compiler_messages avx5124vnniw object {\n+\ttypedef int __v16si __attribute__ ((__vector_size__ (64)));\n+\ttypedef int __v4si __attribute__ ((__vector_size__ (16)));\n+\n+\t__v16si\n+\t_mm512_4dpwssd_epi32 (__v16si __A, __v16si __B, __v16si __C,\n+\t\t\t      __v16si __D, __v16si __E, __v4si *__F)\n+\t{\n+\t    return (__v16si) __builtin_ia32_vp4dpwssd ((__v16si) __B,\n+\t\t\t\t\t\t       (__v16si) __C,\n+\t\t\t\t\t\t       (__v16si) __D,\n+\t\t\t\t\t\t       (__v16si) __E,\n+\t\t\t\t\t\t       (__v16si) __A,\n+\t\t\t\t\t\t       (const __v4si *) __F);\n+\t}\n+    } \"-mavx5124vnniw\" ]\n+}\n+\n+# Return 1 if avx512_vpopcntdq instructions can be compiled.\n+proc check_effective_target_avx512vpopcntdq { } {\n+    return [check_no_compiler_messages avx512vpopcntdq object {\n+        typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+\n+        __v16si\n+        _mm512_popcnt_epi32 (__v16si __A)\n+        {\n+            return (__v16si) __builtin_ia32_vpopcountd_v16si ((__v16si) __A);\n+        }\n+    } \"-mavx512vpopcntdq\" ]\n+}\n+\n+# Return 1 if 128 or 256-bit avx512_vpopcntdq instructions can be compiled.\n+proc check_effective_target_avx512vpopcntdqvl { } {\n+    return [check_no_compiler_messages avx512vpopcntdqvl object {\n+        typedef int __v8si __attribute__ ((__vector_size__ (32)));\n+\n+        __v8si\n+        _mm256_popcnt_epi32 (__v8si __A)\n+        {\n+            return (__v8si) __builtin_ia32_vpopcountd_v8si ((__v8si) __A);\n+        }\n+    } \"-mavx512vpopcntdq -mavx512vl\" ]\n+}\n+\n+# Return 1 if gfni instructions can be compiled.\n+proc check_effective_target_gfni { } {\n+    return [check_no_compiler_messages gfni object {\n+        typedef char __v16qi __attribute__ ((__vector_size__ (16)));\n+\n+        __v16qi\n+        _mm_gf2p8affineinv_epi64_epi8 (__v16qi __A, __v16qi __B, const int __C)\n+        {\n+            return (__v16qi) __builtin_ia32_vgf2p8affineinvqb_v16qi ((__v16qi) __A,\n+\t\t\t\t\t\t\t\t     (__v16qi) __B,\n+\t\t\t\t\t\t\t\t      0);\n+        }\n+    } \"-mgfni\" ]\n+}\n+\n+# Return 1 if avx512vbmi2 instructions can be compiled.\n+proc check_effective_target_avx512vbmi2 { } {\n+    return [check_no_compiler_messages avx512vbmi2 object {\n+        typedef char __v16qi __attribute__ ((__vector_size__ (16)));\n+\ttypedef unsigned long long __mmask16;\n+\n+\t__v16qi\n+\t_mm_mask_compress_epi8 (__v16qi __A, __mmask16 __B, __v16qi __C)\n+\t{\n+  \t\treturn (__v16qi) __builtin_ia32_compressqi128_mask((__v16qi)__C,\n+\t\t\t\t\t\t\t\t   (__v16qi)__A,\n+\t\t\t\t\t\t\t\t   (__mmask16)__B);\n+\t}\n+    } \"-mavx512vbmi2 -mavx512vl\" ]\n+}\n+\n+# Return 1 if avx512vbmi2 instructions can be compiled.\n+proc check_effective_target_avx512vnni { } {\n+    return [check_no_compiler_messages avx512vnni object {\n+        typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+\n+\t__v16si\n+\t_mm_mask_compress_epi8 (__v16si __A, __v16si __B, __v16si __C)\n+\t{\n+  \t\treturn (__v16si) __builtin_ia32_vpdpbusd_v16si ((__v16si)__A,\n+\t\t\t\t\t\t\t\t(__v16si)__B,\n+\t\t\t\t\t\t\t\t(__v16si)__C);\n+\t}\n+    } \"-mavx512vnni -mavx512f\" ]\n+}\n+\n+# Return 1 if vaes instructions can be compiled.\n+proc check_effective_target_avx512vaes { } {\n+    return [check_no_compiler_messages avx512vaes object {\n+\n+        typedef int __v16si __attribute__ ((__vector_size__ (64)));\n+\n+\t__v32qi\n+\t_mm256_aesdec_epi128 (__v32qi __A, __v32qi __B)\n+\t{\n+\t  return (__v32qi)__builtin_ia32_vaesdec_v32qi ((__v32qi) __A, (__v32qi) __B);\n+\t}\n+    } \"-mvaes\" ]\n+}\n+\n+# Return 1 if vpclmulqdq instructions can be compiled.\n+proc check_effective_target_vpclmulqdq { } {\n+    return [check_no_compiler_messages vpclmulqdq object {\n+        typedef long long __v4di __attribute__ ((__vector_size__ (32)));\n+\n+        __v4di\n+        _mm256_clmulepi64_epi128 (__v4di __A, __v4di __B)\n+        {\n+            return (__v4di) __builtin_ia32_vpclmulqdq_v4di (__A, __B, 0);\n+        }\n+    } \"-mvpclmulqdq -mavx512vl\" ]\n+}\n+\n+# Return 1 if avx512_bitalg instructions can be compiled.\n+proc check_effective_target_avx512bitalg { } {\n+    return [check_no_compiler_messages avx512bitalg object {\n+        typedef short int __v32hi __attribute__ ((__vector_size__ (64)));\n+\n+        __v32hi\n+        _mm512_popcnt_epi16 (__v32hi __A)\n+        {\n+            return (__v32hi) __builtin_ia32_vpopcountw_v32hi ((__v32hi) __A);\n+        }\n+    } \"-mavx512bitalg\" ]\n+}\n+\n # Return 1 if C wchar_t type is compatible with char16_t.\n \n proc check_effective_target_wchar_t_char16_t_compatible { } {"}]}