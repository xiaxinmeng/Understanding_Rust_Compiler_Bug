{"sha": "c83027f32d9cca84959c7d6a1e519a0129731501", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzgzMDI3ZjMyZDljY2E4NDk1OWM3ZDZhMWU1MTlhMDEyOTczMTUwMQ==", "commit": {"author": {"name": "Nicol\u00e1s B\u00e9rtolo", "email": "nicolasbertolo@gmail.com", "date": "2020-05-22T20:54:41Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-05-28T18:43:58Z"}, "message": "jit: port libgccjit to Windows\n\n2020-05-28  Nicolas B\u00e9rtolo  <nicolasbertolo@gmail.com>\n\n/ChangeLog:\n\t* configure.ac: Don't require --enable-host-shared when building\n\tfor Mingw.\n\t* configure: Regenerate.\n\n2020-05-28  Nicolas B\u00e9rtolo  <nicolasbertolo@gmail.com>\n\ngcc/ChangeLog:\n\t* Makefile.in: don't look for libiberty in the \"pic\" subdirectory\n\twhen building for Mingw. Add dependency on xgcc with the proper\n\textension.\n\n2020-05-28  Nicolas B\u00e9rtolo  <nicolasbertolo@gmail.com>\n\ngcc/c/ChangeLog:\n\t* Make-lang.in: Remove extra slash.\n\n2020-05-28  Nicolas B\u00e9rtolo  <nicolasbertolo@gmail.com>\n\ngcc/jit/ChangeLog:\n\t* Make-lang.in: Remove extra slash. Build libgccjit.dll and its\n\timport library in Windows.\n\t* config-lang.in: Update comment about --enable-host-shared.\n\t* jit-w32.h: New file.\n\t* jit-w32.c: New file.\n\t(print_last_error): New function that prints the error\n\tstring corresponding to GetLastError().\n\t(get_TOKEN_USER_current_user): Helper function used for getting\n\tthe SID belonging to the current user.\n\t(create_directory_for_current_user): Helper function to create\n\ta directory with permissions such that only the current user can\n\taccess it.\n\t(win_mkdtemp): Create a temporary directory using Windows APIs.\n\t* jit-playback.c: Do not chmod files in Windows. Use LoadLibrary,\n\tFreeLibrary and GetProcAddress instead of libdl.\n\t* jit-result.h, jit-result.c: Introduce result::handle_t to\n\tabstract over the types used for dynamic library handles.\n\t* jit-tempdir.c: Do not use mkdtemp() in Windows, use\n\twin_mkdtemp().", "tree": {"sha": "4dad20ef88f0f41236b4da3f2e2c90c5ce1da512", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4dad20ef88f0f41236b4da3f2e2c90c5ce1da512"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c83027f32d9cca84959c7d6a1e519a0129731501", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83027f32d9cca84959c7d6a1e519a0129731501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c83027f32d9cca84959c7d6a1e519a0129731501", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83027f32d9cca84959c7d6a1e519a0129731501/comments", "author": {"login": "nicber", "id": 3106794, "node_id": "MDQ6VXNlcjMxMDY3OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3106794?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicber", "html_url": "https://github.com/nicber", "followers_url": "https://api.github.com/users/nicber/followers", "following_url": "https://api.github.com/users/nicber/following{/other_user}", "gists_url": "https://api.github.com/users/nicber/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicber/subscriptions", "organizations_url": "https://api.github.com/users/nicber/orgs", "repos_url": "https://api.github.com/users/nicber/repos", "events_url": "https://api.github.com/users/nicber/events{/privacy}", "received_events_url": "https://api.github.com/users/nicber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccf4e86dc01d8c89a8d56b228757a689d1fcc564", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ccf4e86dc01d8c89a8d56b228757a689d1fcc564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ccf4e86dc01d8c89a8d56b228757a689d1fcc564"}], "stats": {"total": 503, "additions": 452, "deletions": 51}, "files": [{"sha": "b7897446c7007cee025de21fb77f9755c34db96d", "filename": "configure", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83027f32d9cca84959c7d6a1e519a0129731501/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83027f32d9cca84959c7d6a1e519a0129731501/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=c83027f32d9cca84959c7d6a1e519a0129731501", "patch": "@@ -6489,9 +6489,13 @@ $as_echo \"$as_me: WARNING: GNAT is required to build $language\" >&2;}\n         esac\n \n         # Disable jit if -enable-host-shared not specified\n-        case ${add_this_lang}:${language}:${host_shared} in\n-          yes:jit:no)\n-\t    # PR jit/64780: explicitly specify --enable-host-shared\n+        # but not if building for Mingw\n+        case $target in\n+          *mingw*) ;;\n+          *)\n+          case ${add_this_lang}:${language}:${host_shared} in\n+            yes:jit:no)\n+\t           # PR jit/64780: explicitly specify --enable-host-shared\n \t    as_fn_error $? \"\n Enabling language \\\"jit\\\" requires --enable-host-shared.\n \n@@ -6502,17 +6506,19 @@ If you want to build both the jit and the regular compiler, it is often\n best to do this via two separate configure/builds, in separate\n directories, to avoid imposing the performance cost of\n --enable-host-shared on the regular compiler.\" \"$LINENO\" 5\n-\t    ;;\n-          all:jit:no)\n-\t    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: --enable-host-shared required to build $language\" >&5\n+\t            ;;\n+            all:jit:no)\n+\t      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: --enable-host-shared required to build $language\" >&5\n $as_echo \"$as_me: WARNING: --enable-host-shared required to build $language\" >&2;}\n-            add_this_lang=unsupported\n-            ;;\n-          *:jit:no)\n-            # Silently disable.\n-            add_this_lang=unsupported\n-            ;;\n-\tesac\n+              add_this_lang=unsupported\n+              ;;\n+            *:jit:no)\n+              # Silently disable.\n+              add_this_lang=unsupported\n+              ;;\n+\t        esac\n+          ;;\n+        esac\n \n         # Disable a language that is unsupported by the target.\n \tcase \"${add_this_lang}: $unsupported_languages \" in"}, {"sha": "59bd92a3e536588c18e6b1b0e8d8aac3c6c44cef", "filename": "configure.ac", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83027f32d9cca84959c7d6a1e519a0129731501/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83027f32d9cca84959c7d6a1e519a0129731501/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=c83027f32d9cca84959c7d6a1e519a0129731501", "patch": "@@ -2079,9 +2079,14 @@ if test -d ${srcdir}/gcc; then\n         esac\n \n         # Disable jit if -enable-host-shared not specified\n-        case ${add_this_lang}:${language}:${host_shared} in\n-          yes:jit:no)\n-\t    # PR jit/64780: explicitly specify --enable-host-shared\n+        # but not if building for Mingw. All code in Windows\n+        # is position independent code (PIC).\n+        case $target in\n+          *mingw*) ;;\n+          *)\n+          case ${add_this_lang}:${language}:${host_shared} in\n+            yes:jit:no)\n+\t           # PR jit/64780: explicitly specify --enable-host-shared\n \t    AC_MSG_ERROR([\n Enabling language \"jit\" requires --enable-host-shared.\n \n@@ -2092,16 +2097,18 @@ If you want to build both the jit and the regular compiler, it is often\n best to do this via two separate configure/builds, in separate\n directories, to avoid imposing the performance cost of\n --enable-host-shared on the regular compiler.])\n-\t    ;;\n-          all:jit:no)\n-\t    AC_MSG_WARN([--enable-host-shared required to build $language])\n-            add_this_lang=unsupported\n-            ;;\n-          *:jit:no)\n-            # Silently disable.\n-            add_this_lang=unsupported\n-            ;;\n-\tesac\n+\t            ;;\n+            all:jit:no)\n+\t      AC_MSG_WARN([--enable-host-shared required to build $language])\n+              add_this_lang=unsupported\n+              ;;\n+            *:jit:no)\n+              # Silently disable.\n+              add_this_lang=unsupported\n+              ;;\n+\t        esac\n+          ;;\n+        esac\n \n         # Disable a language that is unsupported by the target.\n \tcase \"${add_this_lang}: $unsupported_languages \" in"}, {"sha": "45851eca81544054a45a17aecc5fc6cfa329b5e2", "filename": "gcc/Makefile.in", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c83027f32d9cca84959c7d6a1e519a0129731501", "patch": "@@ -1046,10 +1046,12 @@ ALL_LINKERFLAGS = $(ALL_CXXFLAGS)\n \n # Build and host support libraries.\n \n-# Use the \"pic\" build of libiberty if --enable-host-shared.\n+# Use the \"pic\" build of libiberty if --enable-host-shared, unless we are\n+# building for mingw.\n+LIBIBERTY_PICDIR=$(if $(findstring mingw,$(target)),,pic)\n ifeq ($(enable_host_shared),yes)\n-LIBIBERTY = ../libiberty/pic/libiberty.a\n-BUILD_LIBIBERTY = $(build_libobjdir)/libiberty/pic/libiberty.a\n+LIBIBERTY = ../libiberty/$(LIBIBERTY_PICDIR)/libiberty.a\n+BUILD_LIBIBERTY = $(build_libobjdir)/libiberty/$(LIBIBERTY_PICDIR)/libiberty.a\n else\n LIBIBERTY = ../libiberty/libiberty.a\n BUILD_LIBIBERTY = $(build_libobjdir)/libiberty/libiberty.a\n@@ -1726,7 +1728,7 @@ MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n # This symlink makes the full installation name of the driver be available\n # from within the *build* directory, for use when running the JIT library\n # from there (e.g. when running its testsuite).\n-$(FULL_DRIVER_NAME): ./xgcc\n+$(FULL_DRIVER_NAME): ./xgcc$(exeext)\n \trm -f $@\n \t$(LN_S) $< $@\n "}, {"sha": "7efc7c2c332cd841de85faee9d0082e9ae04d80b", "filename": "gcc/c/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fc%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fc%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FMake-lang.in?ref=c83027f32d9cca84959c7d6a1e519a0129731501", "patch": "@@ -162,7 +162,7 @@ c.install-plugin: installdirs\n # Install import library.\n ifeq ($(plugin_implib),yes)\n \t$(mkinstalldirs) $(DESTDIR)$(plugin_resourcesdir)\n-\t$(INSTALL_DATA) cc1$(exeext).a $(DESTDIR)/$(plugin_resourcesdir)/cc1$(exeext).a\n+\t$(INSTALL_DATA) cc1$(exeext).a $(DESTDIR)$(plugin_resourcesdir)/cc1$(exeext).a\n endif\n \n c.uninstall:"}, {"sha": "9cb7814d6d57caa0ed53d6e8019e5ab242ef543b", "filename": "gcc/jit/Make-lang.in", "status": "modified", "additions": 46, "deletions": 10, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FMake-lang.in?ref=c83027f32d9cca84959c7d6a1e519a0129731501", "patch": "@@ -40,10 +40,19 @@\n # into the jit rule, but that needs a little bit of work\n # to do the right thing within all.cross.\n \n+ifneq (,$(findstring mingw,$(target)))\n+LIBGCCJIT_FILENAME = libgccjit.dll\n+\n+jit: $(LIBGCCJIT_FILENAME) \\\n+\t$(FULL_DRIVER_NAME)\n+\n+else\n+\n LIBGCCJIT_LINKER_NAME = libgccjit.so\n LIBGCCJIT_VERSION_NUM = 0\n LIBGCCJIT_MINOR_NUM = 0\n LIBGCCJIT_RELEASE_NUM = 1\n+\n LIBGCCJIT_SONAME = $(LIBGCCJIT_LINKER_NAME).$(LIBGCCJIT_VERSION_NUM)\n LIBGCCJIT_FILENAME = \\\n   $(LIBGCCJIT_SONAME).$(LIBGCCJIT_MINOR_NUM).$(LIBGCCJIT_RELEASE_NUM)\n@@ -68,6 +77,7 @@ jit: $(LIBGCCJIT_FILENAME) \\\n \t$(LIBGCCJIT_SYMLINK) \\\n \t$(LIBGCCJIT_LINKER_NAME_SYMLINK) \\\n \t$(FULL_DRIVER_NAME)\n+endif\n \n # Tell GNU make to ignore these if they exist.\n .PHONY: jit\n@@ -84,9 +94,21 @@ jit_OBJS = attribs.o \\\n \tjit/jit-spec.o \\\n \tgcc.o\n \n+ifneq (,$(findstring mingw,$(target)))\n+jit_OBJS += jit/jit-w32.o\n+endif\n+\n # Use strict warnings for this front end.\n jit-warn = $(STRICT_WARN)\n \n+ifneq (,$(findstring mingw,$(target)))\n+# Create import library libgccjit.dll.a\n+LIBGCCJIT_EXTRA_OPTS = -Wl,--out-implib,$(LIBGCCJIT_FILENAME).a\n+else\n+LIBGCCJIT_EXTRA_OPTS = $(LIBGCCJIT_VERSION_SCRIPT_OPTION) \\\n+\t$(LIBGCCJIT_SONAME_OPTION)\n+endif\n+\n # We avoid using $(BACKEND) from Makefile.in in order to avoid pulling\n # in main.o\n $(LIBGCCJIT_FILENAME): $(jit_OBJS) \\\n@@ -98,14 +120,16 @@ $(LIBGCCJIT_FILENAME): $(jit_OBJS) \\\n \t     $(jit_OBJS) libbackend.a libcommon-target.a libcommon.a \\\n \t     $(CPPLIB) $(LIBDECNUMBER) $(EXTRA_GCC_LIBS) $(LIBS) $(BACKENDLIBS) \\\n \t     $(EXTRA_GCC_OBJS) \\\n-\t     $(LIBGCCJIT_VERSION_SCRIPT_OPTION) \\\n-\t     $(LIBGCCJIT_SONAME_OPTION)\n+\t     $(LIBGCCJIT_EXTRA_OPTS)\n \n+# Create symlinks when not building for Windows\n+ifeq (,$(findstring mingw,$(target)))\n $(LIBGCCJIT_SONAME_SYMLINK): $(LIBGCCJIT_FILENAME)\n \tln -sf $(LIBGCCJIT_FILENAME) $(LIBGCCJIT_SONAME_SYMLINK)\n \n $(LIBGCCJIT_LINKER_NAME_SYMLINK): $(LIBGCCJIT_SONAME_SYMLINK)\n \tln -sf $(LIBGCCJIT_SONAME_SYMLINK) $(LIBGCCJIT_LINKER_NAME_SYMLINK)\n+endif\n \n #\f\n # Build hooks:\n@@ -275,19 +299,31 @@ selftest-jit:\n \n #\f\n # Install hooks:\n-jit.install-common: installdirs\n+jit.install-headers:\n+\t$(INSTALL_DATA) $(srcdir)/jit/libgccjit.h \\\n+\t  $(DESTDIR)$(includedir)/libgccjit.h\n+\t$(INSTALL_DATA) $(srcdir)/jit/libgccjit++.h \\\n+\t  $(DESTDIR)$(includedir)/libgccjit++.h\n+\n+ifneq (,$(findstring mingw,$(target)))\n+jit.install-common: installdirs jit.install-headers\n+# Install import library\n+\t$(INSTALL_PROGRAM) $(LIBGCCJIT_FILENAME).a \\\n+\t  $(DESTDIR)$(libdir)/$(LIBGCCJIT_FILENAME).a\n+# Install DLL file\n \t$(INSTALL_PROGRAM) $(LIBGCCJIT_FILENAME) \\\n-\t  $(DESTDIR)/$(libdir)/$(LIBGCCJIT_FILENAME)\n+\t  $(DESTDIR)$(bindir)/$(LIBGCCJIT_FILENAME)\n+else\n+jit.install-common: installdirs jit.install-headers\n+\t$(INSTALL_PROGRAM) $(LIBGCCJIT_FILENAME) \\\n+\t  $(DESTDIR)$(libdir)/$(LIBGCCJIT_FILENAME)\n \tln -sf \\\n \t  $(LIBGCCJIT_FILENAME) \\\n-\t  $(DESTDIR)/$(libdir)/$(LIBGCCJIT_SONAME_SYMLINK)\n+\t  $(DESTDIR)$(libdir)/$(LIBGCCJIT_SONAME_SYMLINK)\n \tln -sf \\\n \t  $(LIBGCCJIT_SONAME_SYMLINK)\\\n-\t  $(DESTDIR)/$(libdir)/$(LIBGCCJIT_LINKER_NAME_SYMLINK)\n-\t$(INSTALL_DATA) $(srcdir)/jit/libgccjit.h \\\n-\t  $(DESTDIR)/$(includedir)/libgccjit.h\n-\t$(INSTALL_DATA) $(srcdir)/jit/libgccjit++.h \\\n-\t  $(DESTDIR)/$(includedir)/libgccjit++.h\n+\t  $(DESTDIR)$(libdir)/$(LIBGCCJIT_LINKER_NAME_SYMLINK)\n+endif\n \n jit.install-man:\n "}, {"sha": "f8ef6042b396fa7c27d5c71a659d6d9d116b0f2c", "filename": "gcc/jit/config-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fconfig-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fconfig-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fconfig-lang.in?ref=c83027f32d9cca84959c7d6a1e519a0129731501", "patch": "@@ -32,7 +32,7 @@ target_libs=\"\"\n gtfiles=\"\\$(srcdir)/jit/dummy-frontend.c\"\n \n # The configuration requires --enable-host-shared\n-# for jit to be supported.\n+# for jit to be supported (only when not building for Mingw).\n # Hence to get the jit, one must configure with:\n #   --enable-host-shared --enable-languages=jit\n build_by_default=\"no\""}, {"sha": "0fddf04da873a98a0004694e58f141da9b2d68a5", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=c83027f32d9cca84959c7d6a1e519a0129731501", "patch": "@@ -47,6 +47,10 @@ along with GCC; see the file COPYING3.  If not see\n #include \"jit-builtins.h\"\n #include \"jit-tempdir.h\"\n \n+#ifdef _WIN32\n+#include \"jit-w32.h\"\n+#endif\n+\n /* Compare with gcc/c-family/c-common.h: DECL_C_BIT_FIELD,\n    SET_DECL_C_BIT_FIELD.\n    These are redefined here to avoid depending from the C frontend.  */\n@@ -2159,15 +2163,18 @@ playback::compile_to_file::copy_file (const char *src_path,\n \n   gcc_assert (total_sz_in == total_sz_out);\n   if (get_logger ())\n-    get_logger ()->log (\"total bytes copied: %ld\", total_sz_out);\n+    get_logger ()->log (\"total bytes copied: %zu\", total_sz_out);\n \n+  /* fchmod does not exist in Windows. */\n+#ifndef _WIN32\n   /* Set the permissions of the copy to those of the original file,\n      in particular the \"executable\" bits.  */\n   if (fchmod (fileno (f_out), stat_buf.st_mode) == -1)\n     add_error (NULL,\n \t       \"error setting mode of %s: %s\",\n \t       dst_path,\n \t       xstrerror (errno));\n+#endif\n \n   fclose (f_out);\n }\n@@ -2644,10 +2651,19 @@ dlopen_built_dso ()\n {\n   JIT_LOG_SCOPE (get_logger ());\n   auto_timevar load_timevar (get_timer (), TV_LOAD);\n-  void *handle = NULL;\n-  const char *error = NULL;\n+  result::handle handle = NULL;\n   result *result_obj = NULL;\n \n+#ifdef _WIN32\n+  /* Clear any existing error.  */\n+  SetLastError(0);\n+\n+  handle = LoadLibrary(m_tempdir->get_path_so_file ());\n+  if (GetLastError() != 0)  {\n+    print_last_error();\n+  }\n+#else\n+  const char *error = NULL;\n   /* Clear any existing error.  */\n   dlerror ();\n \n@@ -2656,6 +2672,8 @@ dlopen_built_dso ()\n   if ((error = dlerror()) != NULL)  {\n     add_error (NULL, \"%s\", error);\n   }\n+#endif\n+\n   if (handle)\n     {\n       /* We've successfully dlopened the result; create a"}, {"sha": "633626412168c52a5f5d216aeb50d0bde5f59e0f", "filename": "gcc/jit/jit-result.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fjit-result.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fjit-result.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-result.c?ref=c83027f32d9cca84959c7d6a1e519a0129731501", "patch": "@@ -27,13 +27,17 @@ along with GCC; see the file COPYING3.  If not see\n #include \"jit-result.h\"\n #include \"jit-tempdir.h\"\n \n+#ifdef _WIN32\n+#include \"jit-w32.h\"\n+#endif\n+\n namespace gcc {\n namespace jit {\n \n /* Constructor for gcc::jit::result.  */\n \n result::\n-result(logger *logger, void *dso_handle, tempdir *tempdir_) :\n+result(logger *logger, handle dso_handle, tempdir *tempdir_) :\n   log_user (logger),\n   m_dso_handle (dso_handle),\n   m_tempdir (tempdir_)\n@@ -49,8 +53,11 @@ result::~result()\n {\n   JIT_LOG_SCOPE (get_logger ());\n \n+#ifdef _WIN32\n+  FreeLibrary(m_dso_handle);\n+#else\n   dlclose (m_dso_handle);\n-\n+#endif\n   /* Responsibility for cleaning up the tempdir (including \"fake.so\" within\n      the filesystem) might have been handed to us by the playback::context,\n      so that the cleanup can be delayed (see PR jit/64206).\n@@ -72,8 +79,17 @@ get_code (const char *funcname)\n   JIT_LOG_SCOPE (get_logger ());\n \n   void *code;\n-  const char *error;\n \n+#ifdef _WIN32\n+  /* Clear any existing error.  */\n+  SetLastError(0);\n+\n+  code = (void *)GetProcAddress(m_dso_handle, funcname);\n+  if (GetLastError() != 0)  {\n+    print_last_error ();\n+  }\n+#else\n+  const char *error;\n   /* Clear any existing error.  */\n   dlerror ();\n \n@@ -82,6 +98,7 @@ get_code (const char *funcname)\n   if ((error = dlerror()) != NULL)  {\n     fprintf(stderr, \"%s\\n\", error);\n   }\n+#endif\n \n   return code;\n }\n@@ -99,8 +116,17 @@ get_global (const char *name)\n   JIT_LOG_SCOPE (get_logger ());\n \n   void *global;\n-  const char *error;\n \n+#ifdef _WIN32\n+  /* Clear any existing error.  */\n+  SetLastError(0);\n+\n+  global = (void *)GetProcAddress(m_dso_handle, name);\n+  if (GetLastError() != 0)  {\n+    print_last_error ();\n+  }\n+#else\n+  const char *error;\n   /* Clear any existing error.  */\n   dlerror ();\n \n@@ -109,6 +135,7 @@ get_global (const char *name)\n   if ((error = dlerror()) != NULL)  {\n     fprintf(stderr, \"%s\\n\", error);\n   }\n+#endif\n \n   return global;\n }"}, {"sha": "d8e940aafb0be1c073e583ab06243baf2e2e8149", "filename": "gcc/jit/jit-result.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fjit-result.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fjit-result.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-result.h?ref=c83027f32d9cca84959c7d6a1e519a0129731501", "patch": "@@ -21,6 +21,10 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef JIT_RESULT_H\n #define JIT_RESULT_H\n \n+#ifdef _WIN32\n+#include <minwindef.h>\n+#endif\n+\n namespace gcc {\n \n namespace jit {\n@@ -29,7 +33,13 @@ namespace jit {\n class result : public log_user\n {\n public:\n-  result(logger *logger, void *dso_handle, tempdir *tempdir_);\n+#ifdef _WIN32\n+  typedef HMODULE handle;\n+#else\n+  typedef void* handle;\n+#endif\n+\n+  result(logger *logger, handle dso_handle, tempdir *tempdir_);\n \n   virtual ~result();\n \n@@ -40,7 +50,7 @@ class result : public log_user\n   get_global (const char *name);\n \n private:\n-  void *m_dso_handle;\n+  handle m_dso_handle;\n   tempdir *m_tempdir;\n };\n "}, {"sha": "050d53409caf1948c24aea14e79cc9f3ec1aff1d", "filename": "gcc/jit/jit-tempdir.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fjit-tempdir.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fjit-tempdir.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-tempdir.c?ref=c83027f32d9cca84959c7d6a1e519a0129731501", "patch": "@@ -24,7 +24,11 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"jit-tempdir.h\"\n \n+#ifdef _WIN32\n+#include \"jit-w32.h\"\n+#endif\n \n+#ifndef _WIN32\n /* Construct a tempdir path template suitable for use by mkdtemp\n    e.g. \"/tmp/libgccjit-XXXXXX\", but respecting the rules in\n    libiberty's choose_tempdir rather than hardcoding \"/tmp/\".\n@@ -62,6 +66,7 @@ make_tempdir_path_template ()\n \n   return result;\n }\n+#endif\n \n /* The constructor for the jit::tempdir object.\n    The real work is done by the jit::tempdir::create method.  */\n@@ -87,6 +92,9 @@ gcc::jit::tempdir::create ()\n {\n   JIT_LOG_SCOPE (get_logger ());\n \n+#ifdef _WIN32\n+  m_path_tempdir = win_mkdtemp ();\n+#else\n   m_path_template = make_tempdir_path_template ();\n   if (!m_path_template)\n     return false;\n@@ -97,6 +105,8 @@ gcc::jit::tempdir::create ()\n      is unique.  Hence no other (non-root) users should have access to\n      the paths within it.  */\n   m_path_tempdir = mkdtemp (m_path_template);\n+#endif\n+\n   if (!m_path_tempdir)\n     return false;\n   log (\"m_path_tempdir: %s\", m_path_tempdir);"}, {"sha": "f24f4f0c941be5d8b30484a1e4fb11f449461f4f", "filename": "gcc/jit/jit-w32.c", "status": "added", "additions": 255, "deletions": 0, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fjit-w32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fjit-w32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-w32.c?ref=c83027f32d9cca84959c7d6a1e519a0129731501", "patch": "@@ -0,0 +1,255 @@\n+/* Functions used by the Windows port of libgccjit.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+   Contributed by Nicolas Bertolo <nicolasbertolo@gmail.com>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+\n+/* Required for rand_s */\n+#define _CRT_RAND_S\n+\n+#include <cstdio>\n+#include <cstdint>\n+\n+#include \"jit-w32.h\"\n+\n+#include \"libiberty.h\"\n+\n+#include <accctrl.h>\n+#include <aclapi.h>\n+\n+namespace gcc {\n+namespace jit {\n+void\n+print_last_error (void)\n+{\n+  LPSTR psz = NULL;\n+  DWORD dwErrorCode;\n+  dwErrorCode = GetLastError();\n+  const DWORD cchMsg = FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM\n+                                     | FORMAT_MESSAGE_IGNORE_INSERTS\n+                                     | FORMAT_MESSAGE_ALLOCATE_BUFFER\n+                                     | FORMAT_MESSAGE_MAX_WIDTH_MASK,\n+                                     NULL,\n+                                     dwErrorCode,\n+                                     MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n+                                     reinterpret_cast<LPSTR>(&psz),\n+                                     0,\n+                                     NULL);\n+  if (cchMsg > 0)\n+    {\n+      fprintf (stderr, \"%s\\n\", psz);\n+      LocalFree (psz);\n+    }\n+  else\n+    {\n+      fprintf (stderr, \"Failed to retrieve error message string for error %lu\\n\",\n+               dwErrorCode);\n+    }\n+}\n+\n+/* Helper function used for getting the SID belonging to the current user. */\n+static TOKEN_USER*\n+get_TOKEN_USER_current_user ()\n+{\n+  TOKEN_USER *result = NULL;\n+\n+  HANDLE process_token = INVALID_HANDLE_VALUE;\n+\n+  DWORD token_user_info_len;\n+  TOKEN_USER *token_user = NULL;\n+\n+  /* Get current process access token. */\n+  if (!OpenProcessToken (GetCurrentProcess (), TOKEN_READ,\n+                         &process_token))\n+    return NULL;\n+\n+  /* Get necessary buffer size. */\n+  if (!GetTokenInformation(process_token, TokenUser, NULL, 0, &token_user_info_len)\n+      && GetLastError() != ERROR_INSUFFICIENT_BUFFER)\n+    goto cleanup;\n+\n+  token_user = (TOKEN_USER*) new char[token_user_info_len];\n+\n+  /* Get info about the user of the process */\n+  if (!GetTokenInformation (process_token, TokenUser, token_user,\n+                            token_user_info_len, &token_user_info_len))\n+      goto cleanup;\n+\n+  result = token_user;\n+\n+ cleanup:\n+  if (process_token != INVALID_HANDLE_VALUE)\n+    CloseHandle(process_token);\n+\n+  if (token_user != NULL && result == NULL)\n+    delete[] (char*)token_user;\n+\n+  return result;\n+}\n+\n+/* Helper function to create a directory with permissions such that only the\n+  current user can access it. */\n+static bool\n+create_directory_for_current_user (const char * path)\n+{\n+  PACL pACL = NULL;\n+  EXPLICIT_ACCESS ea;\n+  SECURITY_ATTRIBUTES sa;\n+  SECURITY_DESCRIPTOR SD;\n+  DWORD dwRes;\n+  bool result = true;\n+  TOKEN_USER *token_user = NULL;\n+\n+  token_user = get_TOKEN_USER_current_user();\n+  if (!token_user)\n+    return false;\n+\n+  memset (&ea, 0, sizeof (EXPLICIT_ACCESS));\n+  ea.grfAccessPermissions = GENERIC_ALL; /* Access to all. */\n+  ea.grfAccessMode = SET_ACCESS; /* Set access and revoke everything else. */\n+  /* This is necessary for the Windows Explorer GUI to show the correct tick\n+     boxes in the \"Security\" tab. */\n+  ea.grfInheritance = OBJECT_INHERIT_ACE | CONTAINER_INHERIT_ACE;\n+  ea.Trustee.TrusteeForm = TRUSTEE_IS_SID;\n+  ea.Trustee.TrusteeType = TRUSTEE_IS_USER;\n+  ea.Trustee.ptstrName = (char*) token_user->User.Sid;\n+\n+  /* Create a new ACL that contains the new ACEs. */\n+  dwRes = SetEntriesInAcl(1, &ea, NULL, &pACL);\n+  if (dwRes != ERROR_SUCCESS)\n+    return false;\n+\n+  if (!InitializeSecurityDescriptor (&SD,\n+                                     SECURITY_DESCRIPTOR_REVISION))\n+    goto cleanup;\n+\n+  /* Add the ACL to the security descriptor. */\n+  if (!SetSecurityDescriptorDacl (&SD,\n+                                  TRUE,     /* use pACL */\n+                                  pACL,\n+                                  FALSE))   /* not a default DACL */\n+    goto cleanup;\n+\n+  /* Initialize a security attributes structure. */\n+  sa.nLength = sizeof (SECURITY_ATTRIBUTES);\n+  sa.lpSecurityDescriptor = &SD;\n+  sa.bInheritHandle = FALSE;\n+\n+  /* Finally create the directory */\n+  if (!CreateDirectoryA (path, &sa))\n+    result = false;\n+\n+ cleanup:\n+  if (pACL)\n+    LocalFree (pACL);\n+\n+  if (token_user)\n+    delete[] (char*)token_user;\n+\n+  return result;\n+}\n+\n+\n+char *\n+win_mkdtemp (void)\n+{\n+  char lpTempPathBuffer[MAX_PATH];\n+\n+  /* Gets the temp path env string (no guarantee it's a valid path). */\n+  DWORD dwRetVal = GetTempPath (MAX_PATH, lpTempPathBuffer);\n+  if (dwRetVal > MAX_PATH || (dwRetVal == 0))\n+    {\n+      print_last_error ();\n+      return NULL;\n+    }\n+\n+  /* Check that the directory actually exists. */\n+  DWORD dwAttrib = GetFileAttributes (lpTempPathBuffer);\n+  bool temp_path_exists = (dwAttrib != INVALID_FILE_ATTRIBUTES\n+                           && (dwAttrib & FILE_ATTRIBUTE_DIRECTORY));\n+  if (!temp_path_exists)\n+    {\n+      fprintf (stderr, \"Path returned by GetTempPath does not exist: %s\\n\",\n+               lpTempPathBuffer);\n+    }\n+\n+  /* Make sure there is enough space in the buffer for the prefix and random\n+     number.*/\n+  int temp_path_buffer_len = dwRetVal;\n+  const int appended_len = strlen (\"\\\\libgccjit-123456\");\n+  if (temp_path_buffer_len + appended_len + 1 >= MAX_PATH)\n+    {\n+      fprintf (stderr, \"Temporary file path too long for generation of random\"\n+               \" directories: %s\", lpTempPathBuffer);\n+    }\n+\n+  /* This is all the space we have in the buffer to store the random number and\n+     prefix. */\n+  int extraspace = MAX_PATH - temp_path_buffer_len - 1;\n+\n+  int tries;\n+  const int max_tries = 1000;\n+\n+  for (tries = 0; tries < max_tries; ++tries)\n+    {\n+      /* Get a random number in [0; UINT_MAX]. */\n+      unsigned int rand_num;\n+      if (rand_s (&rand_num) != 0)\n+        {\n+          fprintf (stderr,\n+                   \"Failed to create a random number using rand_s(): %s\\n\",\n+                   _strerror (NULL));\n+          return NULL;\n+        }\n+\n+      /* Create 6 digits random number. */\n+      rand_num = ((double)rand_num / ((double) UINT_MAX + 1 ) * 1000000);\n+\n+      /* Copy the prefix and random number to the buffer. */\n+      snprintf (&lpTempPathBuffer[temp_path_buffer_len], extraspace,\n+                \"\\\\libgccjit-%06u\", rand_num);\n+\n+      if (create_directory_for_current_user (lpTempPathBuffer))\n+        break; // success!\n+\n+      /* If we can't create the directory because we got unlucky and the\n+         directory already exists retry, otherwise fail. */\n+      if (GetLastError () != ERROR_ALREADY_EXISTS)\n+        {\n+          print_last_error ();\n+          return NULL;\n+        }\n+    }\n+\n+  if (tries == max_tries)\n+    {\n+      fprintf (stderr, \"Failed to create a random directory in %s\\n\",\n+               lpTempPathBuffer);\n+      return NULL;\n+    }\n+\n+  {\n+    int allocate_len = temp_path_buffer_len + appended_len + 1;\n+    char * result = XNEWVEC (char, allocate_len);\n+    strcpy (result, lpTempPathBuffer);\n+    return result;\n+  }\n+}\n+}\n+}"}, {"sha": "c6e30ea6de7fc2b2c4bae9dc665d2779677c43f7", "filename": "gcc/jit/jit-w32.h", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fjit-w32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c83027f32d9cca84959c7d6a1e519a0129731501/gcc%2Fjit%2Fjit-w32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-w32.h?ref=c83027f32d9cca84959c7d6a1e519a0129731501", "patch": "@@ -0,0 +1,30 @@\n+/* Functions used by the Windows port of libgccjit.\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+   Contributed by Nicolas Bertolo <nicolasbertolo@gmail.com>.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+\n+#include <windows.h>\n+\n+namespace gcc {\n+namespace jit {\n+extern void print_last_error (void);\n+extern char * win_mkdtemp(void);\n+}\n+}"}]}