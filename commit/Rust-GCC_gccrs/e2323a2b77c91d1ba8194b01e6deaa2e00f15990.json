{"sha": "e2323a2b77c91d1ba8194b01e6deaa2e00f15990", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTIzMjNhMmI3N2M5MWQxYmE4MTk0YjAxZTZkZWFhMmUwMGYxNTk5MA==", "commit": {"author": {"name": "Vladimir Makarov", "email": "vmakarov@redhat.com", "date": "2017-04-05T15:07:51Z"}, "committer": {"name": "Vladimir Makarov", "email": "vmakarov@gcc.gnu.org", "date": "2017-04-05T15:07:51Z"}, "message": "re PR rtl-optimization/70703 (Regression in register usage on x86)\n\n2017-04-05  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/70703\n\t* ira-color.c (update_costs_from_allocno): Use the smallest mode.\n\t(update_conflict_hard_regno_costs): Use long instead of unsigned\n\tarithmetic for cost calculation.\n\n2017-04-05  Vladimir Makarov  <vmakarov@redhat.com>\n\n\tPR rtl-optimization/70703\n\t* gcc.target/i386/pr70703.c: New.\n\nFrom-SVN: r246707", "tree": {"sha": "f6b934776426804443cf92790fbf182c67668c72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f6b934776426804443cf92790fbf182c67668c72"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2323a2b77c91d1ba8194b01e6deaa2e00f15990", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2323a2b77c91d1ba8194b01e6deaa2e00f15990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2323a2b77c91d1ba8194b01e6deaa2e00f15990", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2323a2b77c91d1ba8194b01e6deaa2e00f15990/comments", "author": {"login": "vnmakarov", "id": 9855671, "node_id": "MDQ6VXNlcjk4NTU2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/9855671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vnmakarov", "html_url": "https://github.com/vnmakarov", "followers_url": "https://api.github.com/users/vnmakarov/followers", "following_url": "https://api.github.com/users/vnmakarov/following{/other_user}", "gists_url": "https://api.github.com/users/vnmakarov/gists{/gist_id}", "starred_url": "https://api.github.com/users/vnmakarov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vnmakarov/subscriptions", "organizations_url": "https://api.github.com/users/vnmakarov/orgs", "repos_url": "https://api.github.com/users/vnmakarov/repos", "events_url": "https://api.github.com/users/vnmakarov/events{/privacy}", "received_events_url": "https://api.github.com/users/vnmakarov/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "47a113429b00669d57bbea6aa84f51e4c4869592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/47a113429b00669d57bbea6aa84f51e4c4869592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/47a113429b00669d57bbea6aa84f51e4c4869592"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "951e0401ed1e9ff054b97497227f950c4decb8b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2323a2b77c91d1ba8194b01e6deaa2e00f15990/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2323a2b77c91d1ba8194b01e6deaa2e00f15990/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e2323a2b77c91d1ba8194b01e6deaa2e00f15990", "patch": "@@ -1,3 +1,10 @@\n+2017-04-05  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/70703\n+\t* ira-color.c (update_costs_from_allocno): Use the smallest mode.\n+\t(update_conflict_hard_regno_costs): Use long instead of unsigned\n+\tarithmetic for cost calculation.\n+\n 2017-04-05  Jakub Jelinek  <jakub@redhat.com>\n \t    Bernd Edlinger  <bernd.edlinger@hotmail.de>\n "}, {"sha": "7886db4ffff38cfb6e7d25635c82400d7ffa0b53", "filename": "gcc/ira-color.c", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2323a2b77c91d1ba8194b01e6deaa2e00f15990/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2323a2b77c91d1ba8194b01e6deaa2e00f15990/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=e2323a2b77c91d1ba8194b01e6deaa2e00f15990", "patch": "@@ -1367,6 +1367,16 @@ update_costs_from_allocno (ira_allocno_t allocno, int hard_regno,\n \t      || ALLOCNO_ASSIGNED_P (another_allocno))\n \t    continue;\n \n+\t  if (GET_MODE_SIZE (ALLOCNO_MODE (cp->second)) < GET_MODE_SIZE (mode))\n+\t    /* If we have different modes use the smallest one.  It is\n+\t       a sub-register move.  It is hard to predict what LRA\n+\t       will reload (the pseudo or its sub-register) but LRA\n+\t       will try to minimize the data movement.  Also for some\n+\t       register classes bigger modes might be invalid,\n+\t       e.g. DImode for AREG on x86.  For such cases the\n+\t       register move cost will be maximal. */\n+\t    mode = ALLOCNO_MODE (cp->second);\n+\t  \n \t  cost = (cp->second == allocno\n \t\t  ? ira_register_move_cost[mode][rclass][aclass]\n \t\t  : ira_register_move_cost[mode][aclass][rclass]);\n@@ -1512,7 +1522,7 @@ update_conflict_hard_regno_costs (int *costs, enum reg_class aclass,\n \t\tindex = ira_class_hard_reg_index[aclass][hard_regno];\n \t\tif (index < 0)\n \t\t  continue;\n-\t\tcost = (int) ((unsigned) conflict_costs [i] * mult) / div;\n+\t\tcost = (int) (((long) conflict_costs [i] * mult) / div);\n \t\tif (cost == 0)\n \t\t  continue;\n \t\tcont_p = true;"}, {"sha": "44a34f985e60012e74cb5ccdb4b6d2bf48202b5e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2323a2b77c91d1ba8194b01e6deaa2e00f15990/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2323a2b77c91d1ba8194b01e6deaa2e00f15990/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=e2323a2b77c91d1ba8194b01e6deaa2e00f15990", "patch": "@@ -1,3 +1,8 @@\n+2017-04-05  Vladimir Makarov  <vmakarov@redhat.com>\n+\n+\tPR rtl-optimization/70703\n+\t* gcc.target/i386/pr70703.c: New.\n+\n 2017-04-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR sanitizer/80308"}, {"sha": "d0950aec19d24021322bdc5e6b131041ce2a84ed", "filename": "gcc/testsuite/gcc.target/i386/pr70703.c", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2323a2b77c91d1ba8194b01e6deaa2e00f15990/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70703.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2323a2b77c91d1ba8194b01e6deaa2e00f15990/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70703.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr70703.c?ref=e2323a2b77c91d1ba8194b01e6deaa2e00f15990", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fomit-frame-pointer\" } */\n+/* { dg-require-effective-target ia32 } */\n+/* { dg-final { scan-assembler \"movl\\t\\\\\\$6700417, %eax\" } } */\n+\n+unsigned ud_x_641_mul(unsigned x) {\n+    /* optimized version of x / 641 */\n+    return ((unsigned long long)x * 0x663d81) >> 32;\n+}"}]}