{"sha": "68f27c97bff2d21c107ca90e1b597fed45b52ba5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhmMjdjOTdiZmYyZDIxYzEwN2NhOTBlMWI1OTdmZWQ0NWI1MmJhNQ==", "commit": {"author": {"name": "Hristian Kirtchev", "email": "kirtchev@adacore.com", "date": "2019-07-01T13:34:49Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-07-01T13:34:49Z"}, "message": "[Ada] Minor reformatting\n\n2019-07-01  Hristian Kirtchev  <kirtchev@adacore.com>\n\ngcc/ada/\n\n\t* exp_attr.adb, exp_ch7.adb, exp_unst.adb, sem_ch3.adb,\n\tsem_util.adb, uintp.adb, uintp.ads: Minor reformatting.\n\nFrom-SVN: r272859", "tree": {"sha": "502dec3b91fe96d3e4ab7d00ef2f01b19f0f4de6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/502dec3b91fe96d3e4ab7d00ef2f01b19f0f4de6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68f27c97bff2d21c107ca90e1b597fed45b52ba5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f27c97bff2d21c107ca90e1b597fed45b52ba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68f27c97bff2d21c107ca90e1b597fed45b52ba5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68f27c97bff2d21c107ca90e1b597fed45b52ba5/comments", "author": {"login": "kirtchev-adacore", "id": 60669983, "node_id": "MDQ6VXNlcjYwNjY5OTgz", "avatar_url": "https://avatars.githubusercontent.com/u/60669983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kirtchev-adacore", "html_url": "https://github.com/kirtchev-adacore", "followers_url": "https://api.github.com/users/kirtchev-adacore/followers", "following_url": "https://api.github.com/users/kirtchev-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/kirtchev-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/kirtchev-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kirtchev-adacore/subscriptions", "organizations_url": "https://api.github.com/users/kirtchev-adacore/orgs", "repos_url": "https://api.github.com/users/kirtchev-adacore/repos", "events_url": "https://api.github.com/users/kirtchev-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/kirtchev-adacore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54948285e6267a68d5f08f1d1c09e677abcbb34f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54948285e6267a68d5f08f1d1c09e677abcbb34f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54948285e6267a68d5f08f1d1c09e677abcbb34f"}], "stats": {"total": 132, "additions": 66, "deletions": 66}, "files": [{"sha": "95b52b6ac6d13acc072ad108b2da6ca26655dacf", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=68f27c97bff2d21c107ca90e1b597fed45b52ba5", "patch": "@@ -1,3 +1,8 @@\n+2019-07-01  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_attr.adb, exp_ch7.adb, exp_unst.adb, sem_ch3.adb,\n+\tsem_util.adb, uintp.adb, uintp.ads: Minor reformatting.\n+\n 2019-07-01  Javier Miranda  <miranda@adacore.com>\n \n \t* exp_attr.adb (Expand_Min_Max_Attribute): Disable expansion of"}, {"sha": "bd8fdf461491f402636bd0df2ea13a4520702d1b", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=68f27c97bff2d21c107ca90e1b597fed45b52ba5", "patch": "@@ -4248,8 +4248,8 @@ package body Exp_Attr is\n       when Attribute_Invalid_Value =>\n          Rewrite (N, Get_Simple_Init_Val (Ptyp, N));\n \n-         --  The value produced may be a conversion of a literal, which\n-         --  must be resolved to establish its proper type.\n+         --  The value produced may be a conversion of a literal, which must be\n+         --  resolved to establish its proper type.\n \n          Analyze_And_Resolve (N);\n "}, {"sha": "4209785c2fa2e66997d083ae291d6041e80c46d6", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=68f27c97bff2d21c107ca90e1b597fed45b52ba5", "patch": "@@ -379,10 +379,6 @@ package body Exp_Ch7 is\n    --  references within these nested subprograms (typically generated\n    --  subprograms to handle finalization actions).\n \n-   function Contains_Subprogram (Blk : Entity_Id) return Boolean;\n-   --  Check recursively whether a loop or block contains a subprogram that\n-   --  may need an activation record.\n-\n    procedure Check_Visibly_Controlled\n      (Prim : Final_Primitives;\n       Typ  : Entity_Id;\n@@ -400,6 +396,10 @@ package body Exp_Ch7 is\n    --  and use it instead.  This is one case that might be solved more cleanly\n    --  once Overriding pragmas or declarations are in place.\n \n+   function Contains_Subprogram (Blk : Entity_Id) return Boolean;\n+   --  Check recursively whether a loop or block contains a subprogram that\n+   --  may need an activation record.\n+\n    function Convert_View\n      (Proc : Entity_Id;\n       Arg  : Node_Id;\n@@ -5187,6 +5187,7 @@ package body Exp_Ch7 is\n \n          Set_Finalizer (Id, Fin_Id);\n       end if;\n+\n       Check_Unnesting_In_Declarations (Visible_Declarations (Spec));\n       Check_Unnesting_In_Declarations (Private_Declarations (Spec));\n    end Expand_N_Package_Declaration;"}, {"sha": "5aa1fa6494d22ce8b1a46a8f03f573582414bf0a", "filename": "gcc/ada/exp_unst.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fexp_unst.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fexp_unst.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_unst.adb?ref=68f27c97bff2d21c107ca90e1b597fed45b52ba5", "patch": "@@ -254,8 +254,7 @@ package body Exp_Unst is\n             Typ := Full_View (Typ);\n          end if;\n \n-         return Is_Array_Type (Typ)\n-           and then not Is_Constrained (Typ);\n+         return Is_Array_Type (Typ) and then not Is_Constrained (Typ);\n       else\n          return False;\n       end if;\n@@ -2188,8 +2187,7 @@ package body Exp_Unst is\n                  and then Present (Constant_Value (UPJ.Ent))\n                  and then Is_Static_Expression (Constant_Value (UPJ.Ent))\n                then\n-                  Rewrite (UPJ.Ref,\n-                    New_Copy_Tree (Constant_Value (UPJ.Ent)));\n+                  Rewrite (UPJ.Ref, New_Copy_Tree (Constant_Value (UPJ.Ent)));\n                   goto Continue;\n                end if;\n "}, {"sha": "bc5e73d93086e80a9cb4d03924e22beb80a5fab3", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=68f27c97bff2d21c107ca90e1b597fed45b52ba5", "patch": "@@ -10376,10 +10376,9 @@ package body Sem_Ch3 is\n          --  build-in-place library function, child unit or not.\n \n          if (Nkind (Nod) in N_Entity and then Is_Compilation_Unit (Nod))\n-           or else\n-             (Nkind_In (Nod,\n-                N_Defining_Program_Unit_Name, N_Subprogram_Declaration)\n-               and then Is_Compilation_Unit (Defining_Entity (Nod)))\n+           or else (Nkind_In (Nod, N_Defining_Program_Unit_Name,\n+                                   N_Subprogram_Declaration)\n+                      and then Is_Compilation_Unit (Defining_Entity (Nod)))\n          then\n             Add_Global_Declaration (IR);\n          else"}, {"sha": "13a06ccf5abee8eb7d5a9199a9cd4e5071b66fee", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=68f27c97bff2d21c107ca90e1b597fed45b52ba5", "patch": "@@ -9201,12 +9201,12 @@ package body Sem_Util is\n          Next_Entity (Func);\n       end loop;\n \n-      --  If not found, no way to resolve remaining primitives.\n+      --  If not found, no way to resolve remaining primitives\n \n       if Cursor = Any_Type then\n          Error_Msg_N\n-           (\"primitive operation for Iterable type must appear \"\n-             & \"in the same list of declarations as the type\", Aspect);\n+           (\"primitive operation for Iterable type must appear in the same \"\n+            & \"list of declarations as the type\", Aspect);\n       end if;\n \n       return Cursor;"}, {"sha": "61e9f3d1be454c502ef13b9f84047abe6b14903b", "filename": "gcc/ada/uintp.adb", "status": "modified", "additions": 43, "deletions": 46, "changes": 89, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fuintp.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fuintp.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.adb?ref=68f27c97bff2d21c107ca90e1b597fed45b52ba5", "patch": "@@ -1492,6 +1492,49 @@ package body Uintp is\n       end;\n    end UI_From_Int;\n \n+   ----------------------\n+   -- UI_From_Integral --\n+   ----------------------\n+\n+   function UI_From_Integral (Input : In_T) return Uint is\n+   begin\n+      --  If in range of our normal conversion function, use it so we can use\n+      --  direct access and our cache.\n+\n+      if In_T'Size <= Int'Size\n+        or else Input in In_T (Int'First) .. In_T (Int'Last)\n+      then\n+         return UI_From_Int (Int (Input));\n+\n+      else\n+         --  For values of larger magnitude, compute digits into a vector and\n+         --  call Vector_To_Uint.\n+\n+         declare\n+            Max_For_In_T : constant Int  := 3 * In_T'Size / Int'Size;\n+            Our_Base     : constant In_T := In_T (Base);\n+            Temp_Integer : In_T := Input;\n+            --  Base is defined so that 3 Uint digits is sufficient to hold the\n+            --  largest possible Int value.\n+\n+            U : Uint;\n+            V : UI_Vector (1 .. Max_For_In_T);\n+\n+         begin\n+            for J in reverse V'Range loop\n+               V (J) := Int (abs (Temp_Integer rem Our_Base));\n+               Temp_Integer := Temp_Integer / Our_Base;\n+            end loop;\n+\n+            U := Vector_To_Uint (V, Input < 0);\n+            Uints_Min := Uints.Last;\n+            Udigits_Min := Udigits.Last;\n+\n+            return U;\n+         end;\n+      end if;\n+   end UI_From_Integral;\n+\n    ------------\n    -- UI_GCD --\n    ------------\n@@ -2324,50 +2367,4 @@ package body Uintp is\n       return Uint_0;\n    end Vector_To_Uint;\n \n-   ----------------------\n-   -- UI_From_Integral --\n-   ----------------------\n-\n-   function UI_From_Integral (Input : In_T) return Uint is\n-      U : Uint;\n-\n-   begin\n-      --  If in range of our normal conversion function, use it so we can\n-      --  use direct access and our cache.\n-\n-      if In_T'Size <= Int'Size\n-        or else Input in In_T (Int'First) .. In_T (Int'Last)\n-      then\n-         return UI_From_Int (Int (Input));\n-\n-      else\n-         --  pragma Warnings (Off);\n-\n-         --  For values of larger magnitude, compute digits into a vector\n-         --  and call Vector_To_Uint.\n-\n-         declare\n-            Max_For_In_T : constant Int  := 3 * In_T'Size / Int'Size;\n-            Our_Base     : constant In_T := In_T (Base);\n-            Temp_Integer : In_T := Input;\n-            --  Base is defined so that 3 Uint digits is sufficient to hold the\n-            --  largest possible Int value.\n-\n-            V : UI_Vector (1 .. Max_For_In_T);\n-\n-         begin\n-            for J in reverse V'Range loop\n-               V (J) := Int (abs (Temp_Integer rem Our_Base));\n-               Temp_Integer := Temp_Integer / Our_Base;\n-            end loop;\n-\n-            U := Vector_To_Uint (V, Input < 0);\n-            Uints_Min := Uints.Last;\n-            Udigits_Min := Udigits.Last;\n-            return U;\n-         end;\n-\n-         --  pragma Warnings (On);\n-      end if;\n-   end UI_From_Integral;\n end Uintp;"}, {"sha": "d8342baa52f86267e444b249f62506a897e9e4a7", "filename": "gcc/ada/uintp.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fuintp.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68f27c97bff2d21c107ca90e1b597fed45b52ba5/gcc%2Fada%2Fuintp.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fuintp.ads?ref=68f27c97bff2d21c107ca90e1b597fed45b52ba5", "patch": "@@ -251,9 +251,9 @@ package Uintp is\n    generic\n       type In_T is range <>;\n    function UI_From_Integral (Input : In_T) return Uint;\n-   --  Likewise, but converts from any integer type.\n-   --  Must not be applied to biased types (instantiation will provide\n-   --  a warning if actual is a biased type).\n+   --  Likewise, but converts from any integer type. Must not be applied to\n+   --  biased types (instantiation will provide a warning if actual is a biased\n+   --  type).\n \n    function UI_From_CC (Input : Char_Code) return Uint;\n    --  Converts Char_Code value to universal integer form"}]}