{"sha": "3576f984e8e8cc65385cffcba23f403632aa88c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3NmY5ODRlOGU4Y2M2NTM4NWNmZmNiYTIzZjQwMzYzMmFhODhjOA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rdsandiford@googlemail.com", "date": "2011-09-22T12:26:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2011-09-22T12:26:41Z"}, "message": "re PR middle-end/50113 (soft-float MIPS64 compiler is miscompiling ggc-page.c)\n\ngcc/\n\tPR middle-end/50113\n\tPR middle-end/50061\n\t* calls.c (emit_library_call_value_1): Use BLOCK_REG_PADDING to\n\tget the locate.where_pad value for register-only arguments.\n\t* config/arm/arm.c (arm_pad_arg_upward): Remove HFmode handling.\n\t(arm_pad_reg_upward): Handle null types.\n\nFrom-SVN: r179085", "tree": {"sha": "ea10f15658f10eca2def948025beed6db152833c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea10f15658f10eca2def948025beed6db152833c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3576f984e8e8cc65385cffcba23f403632aa88c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3576f984e8e8cc65385cffcba23f403632aa88c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3576f984e8e8cc65385cffcba23f403632aa88c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3576f984e8e8cc65385cffcba23f403632aa88c8/comments", "author": {"login": "rsandifo", "id": 4235983, "node_id": "MDQ6VXNlcjQyMzU5ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/4235983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo", "html_url": "https://github.com/rsandifo", "followers_url": "https://api.github.com/users/rsandifo/followers", "following_url": "https://api.github.com/users/rsandifo/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo/orgs", "repos_url": "https://api.github.com/users/rsandifo/repos", "events_url": "https://api.github.com/users/rsandifo/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9e990d143674829b6583da2ab91030abbb8257dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e990d143674829b6583da2ab91030abbb8257dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e990d143674829b6583da2ab91030abbb8257dc"}], "stats": {"total": 86, "additions": 53, "deletions": 33}, "files": [{"sha": "ed624bb35f50609b375983fe758a2d8142a07f08", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3576f984e8e8cc65385cffcba23f403632aa88c8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3576f984e8e8cc65385cffcba23f403632aa88c8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3576f984e8e8cc65385cffcba23f403632aa88c8", "patch": "@@ -1,3 +1,12 @@\n+2011-09-22  Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR middle-end/50113\n+\tPR middle-end/50061\n+\t* calls.c (emit_library_call_value_1): Use BLOCK_REG_PADDING to\n+\tget the locate.where_pad value for register-only arguments.\n+\t* config/arm/arm.c (arm_pad_arg_upward): Remove HFmode handling.\n+\t(arm_pad_reg_upward): Handle null types.\n+\n 2011-09-22  Jan Hubicka  <jh@suse.cz>\n \n \t* ipa-inline-analysis.c: Fix overly long lines."}, {"sha": "3fa70b571f485d7cd89535ef0c0a6d42e1e19e99", "filename": "gcc/calls.c", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3576f984e8e8cc65385cffcba23f403632aa88c8/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3576f984e8e8cc65385cffcba23f403632aa88c8/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=3576f984e8e8cc65385cffcba23f403632aa88c8", "patch": "@@ -3577,20 +3577,29 @@ emit_library_call_value_1 (int retval, rtx orgfun, rtx value,\n       argvec[count].partial\n \t= targetm.calls.arg_partial_bytes (args_so_far, mode, NULL_TREE, 1);\n \n-      locate_and_pad_parm (mode, NULL_TREE,\n+      if (argvec[count].reg == 0\n+\t  || argvec[count].partial != 0\n+\t  || reg_parm_stack_space > 0)\n+\t{\n+\t  locate_and_pad_parm (mode, NULL_TREE,\n #ifdef STACK_PARMS_IN_REG_PARM_AREA\n-\t\t\t   1,\n+\t\t\t       1,\n #else\n-\t\t\t   argvec[count].reg != 0,\n+\t\t\t       argvec[count].reg != 0,\n+#endif\n+\t\t\t       argvec[count].partial,\n+\t\t\t       NULL_TREE, &args_size, &argvec[count].locate);\n+\t  args_size.constant += argvec[count].locate.size.constant;\n+\t  gcc_assert (!argvec[count].locate.size.var);\n+\t}\n+#ifdef BLOCK_REG_PADDING\n+      else\n+\t/* The argument is passed entirely in registers.  See at which\n+\t   end it should be padded.  */\n+\targvec[count].locate.where_pad =\n+\t  BLOCK_REG_PADDING (mode, NULL_TREE,\n+\t\t\t     GET_MODE_SIZE (mode) <= UNITS_PER_WORD);\n #endif\n-\t\t\t   argvec[count].partial,\n-\t\t\t   NULL_TREE, &args_size, &argvec[count].locate);\n-\n-      gcc_assert (!argvec[count].locate.size.var);\n-\n-      if (argvec[count].reg == 0 || argvec[count].partial != 0\n-\t  || reg_parm_stack_space > 0)\n-\targs_size.constant += argvec[count].locate.size.constant;\n \n       targetm.calls.function_arg_advance (args_so_far, mode, (tree) 0, true);\n     }"}, {"sha": "e730881f40b732c54a61f8a2207f0a653d5a3580", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3576f984e8e8cc65385cffcba23f403632aa88c8/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3576f984e8e8cc65385cffcba23f403632aa88c8/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=3576f984e8e8cc65385cffcba23f403632aa88c8", "patch": "@@ -11573,44 +11573,46 @@ arm_must_pass_in_stack (enum machine_mode mode, const_tree type)\n    aggregate types are placed in the lowest memory address.  */\n \n bool\n-arm_pad_arg_upward (enum machine_mode mode, const_tree type)\n+arm_pad_arg_upward (enum machine_mode mode ATTRIBUTE_UNUSED, const_tree type)\n {\n   if (!TARGET_AAPCS_BASED)\n     return DEFAULT_FUNCTION_ARG_PADDING(mode, type) == upward;\n \n   if (type && BYTES_BIG_ENDIAN && INTEGRAL_TYPE_P (type))\n     return false;\n \n-  /* Half-float values are only passed to libcalls, not regular functions.\n-     They should be passed and returned as \"short\"s (see RTABI).  To achieve\n-     that effect in big-endian mode, pad downwards so the value is passed in\n-     the least-significant end of the register.  ??? This needs to be here\n-     rather than in arm_pad_reg_upward due to peculiarity in the handling of\n-     libcall arguments.  */\n-  if (BYTES_BIG_ENDIAN && mode == HFmode)\n-    return false;\n-\n   return true;\n }\n \n \n /* Similarly, for use by BLOCK_REG_PADDING (MODE, TYPE, FIRST).\n-   For non-AAPCS, return !BYTES_BIG_ENDIAN if the least significant\n-   byte of the register has useful data, and return the opposite if the\n-   most significant byte does.\n-   For AAPCS, small aggregates and small complex types are always padded\n-   upwards.  */\n+   Return !BYTES_BIG_ENDIAN if the least significant byte of the\n+   register has useful data, and return the opposite if the most\n+   significant byte does.  */\n \n bool\n-arm_pad_reg_upward (enum machine_mode mode ATTRIBUTE_UNUSED,\n+arm_pad_reg_upward (enum machine_mode mode,\n                     tree type, int first ATTRIBUTE_UNUSED)\n {\n-  if (TARGET_AAPCS_BASED\n-      && BYTES_BIG_ENDIAN\n-      && (AGGREGATE_TYPE_P (type) || TREE_CODE (type) == COMPLEX_TYPE\n-\t  || FIXED_POINT_TYPE_P (type))\n-      && int_size_in_bytes (type) <= 4)\n-    return true;\n+  if (TARGET_AAPCS_BASED && BYTES_BIG_ENDIAN)\n+    {\n+      /* For AAPCS, small aggregates, small fixed-point types,\n+\t and small complex types are always padded upwards.  */\n+      if (type)\n+\t{\n+\t  if ((AGGREGATE_TYPE_P (type)\n+\t       || TREE_CODE (type) == COMPLEX_TYPE\n+\t       || FIXED_POINT_TYPE_P (type))\n+\t      && int_size_in_bytes (type) <= 4)\n+\t    return true;\n+\t}\n+      else\n+\t{\n+\t  if ((COMPLEX_MODE_P (mode) || ALL_FIXED_POINT_MODE_P (mode))\n+\t      && GET_MODE_SIZE (mode) <= 4)\n+\t    return true;\n+\t}\n+    }\n \n   /* Otherwise, use default padding.  */\n   return !BYTES_BIG_ENDIAN;"}]}