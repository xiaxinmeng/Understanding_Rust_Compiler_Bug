{"sha": "1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWZmMGRkY2Q4YjQ3MjhiY2M5NmUxZGFmMmU3MGEwM2RjOWZiZjE3MQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-01-05T13:42:29Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2021-01-05T13:45:28Z"}, "message": "i386: Prevent spurious FP exceptions with _mm_cvt{,t}ps_pi32 [PR98522]\n\nPrevent spurious FP exceptions with _mm_cvt{,t}ps_pi32 for TARGET_MMX_WITH_SSE\nby clearing the top 64 bytes of the input XMM register.\n\n2021-01-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/\n\tPR target/98522\n\t* config/i386/sse.md (sse_cvtps2pi): Redefine as define_insn_and_split.\n\tClear the top 64 bytes of the input XMM register.\n\t(sse_cvttps2pi): Ditto.\n\ngcc/testsuite\n\n\tPR target/98522\n\t* gcc.target/i386/pr98522.c: New test.", "tree": {"sha": "4afbc51f1eb04e9b7b0274ad105f467b51a5c9be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4afbc51f1eb04e9b7b0274ad105f467b51a5c9be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "951bdbde6ade56eb63af1dfa18777348a8a0d89e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/951bdbde6ade56eb63af1dfa18777348a8a0d89e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/951bdbde6ade56eb63af1dfa18777348a8a0d89e"}], "stats": {"total": 89, "additions": 81, "deletions": 8}, "files": [{"sha": "4fd7358dc183c11a8f4447aed3e271655362bb81", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 42, "deletions": 8, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171", "patch": "@@ -5103,31 +5103,65 @@\n    (set_attr \"type\" \"ssecvt\")\n    (set_attr \"mode\" \"V4SF\")])\n \n-(define_insn \"sse_cvtps2pi\"\n+(define_insn_and_split \"sse_cvtps2pi\"\n   [(set (match_operand:V2SI 0 \"register_operand\" \"=y,Yv\")\n \t(vec_select:V2SI\n-\t  (unspec:V4SI [(match_operand:V4SF 1 \"register_mmxmem_operand\" \"xm,YvBm\")]\n+\t  (unspec:V4SI [(match_operand:V4SF 1 \"nonimmediate_operand\" \"xm,YvBm\")]\n \t\t       UNSPEC_FIX_NOTRUNC)\n \t  (parallel [(const_int 0) (const_int 1)])))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSE\"\n   \"@\n    cvtps2pi\\t{%1, %0|%0, %q1}\n-   %vcvtps2dq\\t{%1, %0|%0, %1}\"\n+   #\"\n+  \"TARGET_SSE2 && reload_completed\n+   && SSE_REG_P (operands[0])\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = lowpart_subreg (V2SFmode, operands[1],\n+\t\t\t    GET_MODE (operands[1]));\n+  rtx tmp = lowpart_subreg (V4SFmode, operands[0],\n+\t\t\t    GET_MODE (operands[0]));\n+\n+  op1 = gen_rtx_VEC_CONCAT (V4SFmode, op1, CONST0_RTX (V2SFmode));\n+  emit_insn (gen_rtx_SET (tmp, op1));\n+\n+  rtx dest = lowpart_subreg (V4SImode, operands[0],\n+\t\t\t    GET_MODE (operands[0]));\n+  emit_insn (gen_sse2_fix_notruncv4sfv4si (dest, tmp));\n+  DONE;\n+}\n   [(set_attr \"isa\" \"*,sse2\")\n    (set_attr \"mmx_isa\" \"native,*\")\n    (set_attr \"type\" \"ssecvt\")\n    (set_attr \"unit\" \"mmx,*\")\n    (set_attr \"mode\" \"DI\")])\n \n-(define_insn \"sse_cvttps2pi\"\n+(define_insn_and_split \"sse_cvttps2pi\"\n   [(set (match_operand:V2SI 0 \"register_operand\" \"=y,Yv\")\n \t(vec_select:V2SI\n-\t  (fix:V4SI (match_operand:V4SF 1 \"register_mmxmem_operand\" \"xm,YvBm\"))\n+\t  (fix:V4SI (match_operand:V4SF 1 \"nonimmediate_operand\" \"xm,YvBm\"))\n \t  (parallel [(const_int 0) (const_int 1)])))]\n   \"(TARGET_MMX || TARGET_MMX_WITH_SSE) && TARGET_SSE\"\n   \"@\n    cvttps2pi\\t{%1, %0|%0, %q1}\n-   %vcvttps2dq\\t{%1, %0|%0, %1}\"\n+   #\"\n+  \"TARGET_SSE2 && reload_completed\n+   && SSE_REG_P (operands[0])\"\n+  [(const_int 0)]\n+{\n+  rtx op1 = lowpart_subreg (V2SFmode, operands[1],\n+\t\t\t    GET_MODE (operands[1]));\n+  rtx tmp = lowpart_subreg (V4SFmode, operands[0],\n+\t\t\t    GET_MODE (operands[0]));\n+\n+  op1 = gen_rtx_VEC_CONCAT (V4SFmode, op1, CONST0_RTX (V2SFmode));\n+  emit_insn (gen_rtx_SET (tmp, op1));\n+\n+  rtx dest = lowpart_subreg (V4SImode, operands[0],\n+\t\t\t    GET_MODE (operands[0]));\n+  emit_insn (gen_fix_truncv4sfv4si2 (dest, tmp));\n+  DONE;\n+}\n   [(set_attr \"isa\" \"*,sse2\")\n    (set_attr \"mmx_isa\" \"native,*\")\n    (set_attr \"type\" \"ssecvt\")\n@@ -8026,7 +8060,7 @@\n (define_insn \"*vec_concatv4sf_0\"\n   [(set (match_operand:V4SF 0 \"register_operand\"       \"=v\")\n \t(vec_concat:V4SF\n-\t  (match_operand:V2SF 1 \"nonimmediate_operand\" \"xm\")\n+\t  (match_operand:V2SF 1 \"nonimmediate_operand\" \"vm\")\n \t  (match_operand:V2SF 2 \"const0_operand\"       \" C\")))]\n   \"TARGET_SSE2\"\n   \"%vmovq\\t{%1, %0|%0, %1}\"\n@@ -10457,7 +10491,7 @@\n   [(set (match_operand:VF2_512_256 0 \"register_operand\" \"=v\")\n \t(vec_merge:VF2_512_256\n \t  (vec_duplicate:VF2_512_256\n-\t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"xm\"))\n+\t    (match_operand:<ssescalarmode> 2 \"nonimmediate_operand\" \"vm\"))\n \t  (match_operand:VF2_512_256 1 \"const0_operand\" \"C\")\n \t  (const_int 1)))]\n   \"TARGET_AVX\""}, {"sha": "762f2eded500dfab5b8a361a81ca47c0aae219f0", "filename": "gcc/testsuite/gcc.target/i386/pr98522.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98522.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98522.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr98522.c?ref=1ff0ddcd8b4728bcc96e1daf2e70a03dc9fbf171", "patch": "@@ -0,0 +1,39 @@\n+/* PR target/98522 */\n+/* { dg-do run { target { ! ia32 } } } */\n+/* { dg-options \"-O2\" } */\n+/* { dg-require-effective-target fenv_exceptions } */\n+\n+#include <emmintrin.h>\n+#include <fenv.h>\n+\n+__m64\n+__attribute__((noinline))\n+test_cvt (__m128 a)\n+{\n+  return _mm_cvt_ps2pi (a);\n+}\n+\n+__m64\n+__attribute__((noinline))\n+test_cvtt (__m128 a)\n+{\n+  return _mm_cvtt_ps2pi (a);\n+}\n+\n+int\n+main ()\n+{\n+  __m128 x = (__m128)(__m128i){0x0000000000000000LL, 0x7fffffffffffffffLL};\n+  volatile __m64 y;\n+\n+  feclearexcept (FE_INVALID);\n+\n+  y = test_cvt(x);\n+  y = test_cvtt (x);\n+\n+    if (fetestexcept (FE_INVALID))\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+"}]}