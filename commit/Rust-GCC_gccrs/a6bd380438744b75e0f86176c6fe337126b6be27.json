{"sha": "a6bd380438744b75e0f86176c6fe337126b6be27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZiZDM4MDQzODc0NGI3NWUwZjg2MTc2YzZmZTMzNzEyNmI2YmUyNw==", "commit": {"author": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2007-07-01T12:08:59Z"}, "committer": {"name": "Janne Blomqvist", "email": "jb@gcc.gnu.org", "date": "2007-07-01T12:08:59Z"}, "message": "fortran frontend:\n\n\t\n2007-07-01  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* trans.h: Remove decls for 64-bit allocation functions.\n\t* trans-array.c (gfc_grow_array): Always pick the standard realloc\n\tfunction decl.\n\t(gfc_array_allocate): Likewise.\n\t* trans-decl.c: Remove trees for 64-bit allocation functions.\n\t(gfc_build_builtin_function_decls): Don't build fndecls for 64-bit\n\tallocations functions, use index_int_type for normal allocation\n\tfunctions.\n\nlibgfortran changelog:\n\n2007-07-01  Janne Blomqvist  <jb@gcc.gnu.org>\n\n\t* runtime/memory.c (internal_realloc): Use index_type for size\n\targument instead of GFC_INTEGER_4.\n\t(allocate_array): Likewise.\n\t(allocate): Likewise, add ifdef around unnecessary check.\n\t(internal_reallo64): Remove.\n\t(allocate_array64): Remove.\n\t(allocate64): Remove.\n\t* gfortran.map: Remove symbols for 64-bit allocation functions.\n\nFrom-SVN: r126166", "tree": {"sha": "5bb9fc2057f4bb1d9f02aaf996558df2062ba915", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5bb9fc2057f4bb1d9f02aaf996558df2062ba915"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6bd380438744b75e0f86176c6fe337126b6be27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bd380438744b75e0f86176c6fe337126b6be27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6bd380438744b75e0f86176c6fe337126b6be27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6bd380438744b75e0f86176c6fe337126b6be27/comments", "author": null, "committer": null, "parents": [{"sha": "c67e4bcd9f1a4dff58973ea9b3bf3297b0cdc709", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c67e4bcd9f1a4dff58973ea9b3bf3297b0cdc709", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c67e4bcd9f1a4dff58973ea9b3bf3297b0cdc709"}], "stats": {"total": 152, "additions": 42, "deletions": 110}, "files": [{"sha": "d76029dc748ccc2dee12dd46b6c1f9d7d5c2eff4", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bd380438744b75e0f86176c6fe337126b6be27/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bd380438744b75e0f86176c6fe337126b6be27/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a6bd380438744b75e0f86176c6fe337126b6be27", "patch": "@@ -1,3 +1,14 @@\n+2007-07-01  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        * trans.h: Remove decls for 64-bit allocation functions.\n+        * trans-array.c (gfc_grow_array): Always pick the standard realloc\n+        function decl.\n+        (gfc_array_allocate): Likewise.\n+        * trans-decl.c: Remove trees for 64-bit allocation functions.\n+        (gfc_build_builtin_function_decls): Don't build fndecls for 64-bit\n+        allocations functions, use index_int_type for normal allocation\n+        functions.\n+\n 2007-06-30  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/20373"}, {"sha": "07862d6a5ac6a3a1dcd4f55eb264dfa14fd7fc10", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bd380438744b75e0f86176c6fe337126b6be27/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bd380438744b75e0f86176c6fe337126b6be27/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=a6bd380438744b75e0f86176c6fe337126b6be27", "patch": "@@ -842,11 +842,9 @@ gfc_grow_array (stmtblock_t * pblock, tree desc, tree extra)\n   arg1 = build2 (MULT_EXPR, gfc_array_index_type, tmp,\n \t\t fold_convert (gfc_array_index_type, size));\n \n-  /* Pick the appropriate realloc function.  */\n-  if (gfc_index_integer_kind == 4)\n+  /* Pick the realloc function.  */\n+  if (gfc_index_integer_kind == 4 || gfc_index_integer_kind == 8)\n     tmp = gfor_fndecl_internal_realloc;\n-  else if (gfc_index_integer_kind == 8)\n-    tmp = gfor_fndecl_internal_realloc64;\n   else\n     gcc_unreachable ();\n \n@@ -3575,20 +3573,14 @@ gfc_array_allocate (gfc_se * se, gfc_expr * expr, tree pstat)\n   pointer = gfc_conv_descriptor_data_get (se->expr);\n   STRIP_NOPS (pointer);\n \n-  if (TYPE_PRECISION (gfc_array_index_type) == 32)\n+  if (TYPE_PRECISION (gfc_array_index_type) == 32 ||\n+      TYPE_PRECISION (gfc_array_index_type) == 64)\n     {\n       if (allocatable_array)\n \tallocate = gfor_fndecl_allocate_array;\n       else\n \tallocate = gfor_fndecl_allocate;\n     }\n-  else if (TYPE_PRECISION (gfc_array_index_type) == 64)\n-    {\n-      if (allocatable_array)\n-\tallocate = gfor_fndecl_allocate64_array;\n-      else\n-\tallocate = gfor_fndecl_allocate64;\n-    }\n   else\n     gcc_unreachable ();\n "}, {"sha": "e1379bad827f29b827579639e40e1145fcc50579", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bd380438744b75e0f86176c6fe337126b6be27/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bd380438744b75e0f86176c6fe337126b6be27/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=a6bd380438744b75e0f86176c6fe337126b6be27", "patch": "@@ -75,11 +75,8 @@ tree gfc_static_ctors;\n /* Function declarations for builtin library functions.  */\n \n tree gfor_fndecl_internal_realloc;\n-tree gfor_fndecl_internal_realloc64;\n tree gfor_fndecl_allocate;\n-tree gfor_fndecl_allocate64;\n tree gfor_fndecl_allocate_array;\n-tree gfor_fndecl_allocate64_array;\n tree gfor_fndecl_deallocate;\n tree gfor_fndecl_pause_numeric;\n tree gfor_fndecl_pause_string;\n@@ -2241,46 +2238,28 @@ gfc_build_builtin_function_decls (void)\n {\n   tree gfc_c_int_type_node = gfc_get_int_type (gfc_c_int_kind);\n   tree gfc_int4_type_node = gfc_get_int_type (4);\n-  tree gfc_int8_type_node = gfc_get_int_type (8);\n   tree gfc_logical4_type_node = gfc_get_logical_type (4);\n   tree gfc_pint4_type_node = build_pointer_type (gfc_int4_type_node);\n+  tree gfc_index_int_type_node = gfc_get_int_type (gfc_index_integer_kind);\n \n   gfor_fndecl_internal_realloc =\n     gfc_build_library_function_decl (get_identifier\n \t\t\t\t     (PREFIX(\"internal_realloc\")),\n \t\t\t\t     pvoid_type_node, 2, pvoid_type_node,\n-\t\t\t\t     gfc_int4_type_node);\n-\n-  gfor_fndecl_internal_realloc64 =\n-    gfc_build_library_function_decl (get_identifier\n-\t\t\t\t     (PREFIX(\"internal_realloc64\")),\n-\t\t\t\t     pvoid_type_node, 2, pvoid_type_node,\n-\t\t\t\t     gfc_int8_type_node);\n+\t\t\t\t     gfc_index_int_type_node);\n \n   gfor_fndecl_allocate =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"allocate\")),\n \t\t\t\t     pvoid_type_node, 2,\n-\t\t\t\t     gfc_int4_type_node, gfc_pint4_type_node);\n+\t\t\t\t     gfc_index_int_type_node, gfc_pint4_type_node);\n   DECL_IS_MALLOC (gfor_fndecl_allocate) = 1;\n \n-  gfor_fndecl_allocate64 =\n-    gfc_build_library_function_decl (get_identifier (PREFIX(\"allocate64\")),\n-\t\t\t\t     pvoid_type_node, 2,\n-\t\t\t\t     gfc_int8_type_node, gfc_pint4_type_node);\n-  DECL_IS_MALLOC (gfor_fndecl_allocate64) = 1;\n-\n   gfor_fndecl_allocate_array =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"allocate_array\")),\n \t\t\t\t     pvoid_type_node, 3, pvoid_type_node,\n-\t\t\t\t     gfc_int4_type_node, gfc_pint4_type_node);\n+\t\t\t\t     gfc_index_int_type_node, gfc_pint4_type_node);\n   DECL_IS_MALLOC (gfor_fndecl_allocate_array) = 1;\n \n-  gfor_fndecl_allocate64_array =\n-    gfc_build_library_function_decl (get_identifier (PREFIX(\"allocate64_array\")),\n-\t\t\t\t     pvoid_type_node, 3, pvoid_type_node,\n-\t\t\t\t     gfc_int8_type_node, gfc_pint4_type_node);\n-  DECL_IS_MALLOC (gfor_fndecl_allocate64_array) = 1;\n-\n   gfor_fndecl_deallocate =\n     gfc_build_library_function_decl (get_identifier (PREFIX(\"deallocate\")),\n \t\t\t\t     void_type_node, 2, pvoid_type_node,"}, {"sha": "a57deca97f3d824c471915f006d6d753dbb4ecfe", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bd380438744b75e0f86176c6fe337126b6be27/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bd380438744b75e0f86176c6fe337126b6be27/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=a6bd380438744b75e0f86176c6fe337126b6be27", "patch": "@@ -482,11 +482,8 @@ void gfc_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *, tree);\n \n /* Runtime library function decls.  */\n extern GTY(()) tree gfor_fndecl_internal_realloc;\n-extern GTY(()) tree gfor_fndecl_internal_realloc64;\n extern GTY(()) tree gfor_fndecl_allocate;\n-extern GTY(()) tree gfor_fndecl_allocate64;\n extern GTY(()) tree gfor_fndecl_allocate_array;\n-extern GTY(()) tree gfor_fndecl_allocate64_array;\n extern GTY(()) tree gfor_fndecl_deallocate;\n extern GTY(()) tree gfor_fndecl_pause_numeric;\n extern GTY(()) tree gfor_fndecl_pause_string;"}, {"sha": "1b6a6bdcd9ab01412ce9027b2f08635ee9fc9c8d", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bd380438744b75e0f86176c6fe337126b6be27/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bd380438744b75e0f86176c6fe337126b6be27/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=a6bd380438744b75e0f86176c6fe337126b6be27", "patch": "@@ -1,3 +1,14 @@\n+2007-07-01  Janne Blomqvist  <jb@gcc.gnu.org>\n+\n+        * runtime/memory.c (internal_realloc): Use index_type for size\n+        argument instead of GFC_INTEGER_4.\n+        (allocate_array): Likewise.\n+        (allocate): Likewise, add ifdef around unnecessary check.\n+        (internal_reallo64): Remove.\n+        (allocate_array64): Remove.\n+        (allocate64): Remove.\n+        * gfortran.map: Remove symbols for 64-bit allocation functions.\n+\n 2007-06-29  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR libgfortran/32456"}, {"sha": "e1357845ddcbebff9eb7e9ddd6e6efe75f9fd148", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bd380438744b75e0f86176c6fe337126b6be27/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bd380438744b75e0f86176c6fe337126b6be27/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=a6bd380438744b75e0f86176c6fe337126b6be27", "patch": "@@ -10,8 +10,6 @@ GFORTRAN_1.0 {\n     _gfortran_all_l4;\n     _gfortran_all_l8;\n     _gfortran_allocate;\n-    _gfortran_allocate64;\n-    _gfortran_allocate64_array;\n     _gfortran_allocate_array;\n     _gfortran_any_l16;\n     _gfortran_any_l4;\n@@ -168,7 +166,6 @@ GFORTRAN_1.0 {\n     _gfortran_ierrno_i8;\n     _gfortran_internal_pack;\n     _gfortran_internal_realloc;\n-    _gfortran_internal_realloc64;\n     _gfortran_internal_unpack;\n     _gfortran_irand;\n     _gfortran_isatty_l4;"}, {"sha": "7d89371697831e36069961cb3de5e1e8d4b8163e", "filename": "libgfortran/runtime/memory.c", "status": "modified", "additions": 12, "deletions": 67, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6bd380438744b75e0f86176c6fe337126b6be27/libgfortran%2Fruntime%2Fmemory.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6bd380438744b75e0f86176c6fe337126b6be27/libgfortran%2Fruntime%2Fmemory.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fruntime%2Fmemory.c?ref=a6bd380438744b75e0f86176c6fe337126b6be27", "patch": "@@ -1,5 +1,5 @@\n /* Memory management routines.\n-   Copyright 2002, 2005, 2006 Free Software Foundation, Inc.\n+   Copyright 2002, 2005, 2006, 2007 Free Software Foundation, Inc.\n    Contributed by Paul Brook <paul@nowt.org>\n \n This file is part of the GNU Fortran 95 runtime library (libgfortran).\n@@ -102,11 +102,11 @@ internal_realloc_size (void *mem, size_t size)\n   return mem;\n }\n \n-extern void *internal_realloc (void *, GFC_INTEGER_4);\n+extern void *internal_realloc (void *, index_type);\n export_proto(internal_realloc);\n \n void *\n-internal_realloc (void *mem, GFC_INTEGER_4 size)\n+internal_realloc (void *mem, index_type size)\n {\n #ifdef GFC_CHECK_MEMORY\n   /* Under normal circumstances, this is _never_ going to happen!  */\n@@ -116,21 +116,6 @@ internal_realloc (void *mem, GFC_INTEGER_4 size)\n   return internal_realloc_size (mem, (size_t) size);\n }\n \n-extern void *internal_realloc64 (void *, GFC_INTEGER_8);\n-export_proto(internal_realloc64);\n-\n-void *\n-internal_realloc64 (void *mem, GFC_INTEGER_8 size)\n-{\n-#ifdef GFC_CHECK_MEMORY\n-  /* Under normal circumstances, this is _never_ going to happen!  */\n-  if (size < 0)\n-    runtime_error (\"Attempt to allocate a negative amount of memory.\");\n-#endif\n-  return internal_realloc_size (mem, (size_t) size);\n-}\n-\n-\n /* User-allocate, one call for each member of the alloc-list of an\n    ALLOCATE statement. */\n \n@@ -157,12 +142,15 @@ allocate_size (size_t size, GFC_INTEGER_4 * stat)\n   return newmem;\n }\n \n-extern void *allocate (GFC_INTEGER_4, GFC_INTEGER_4 *);\n+extern void *allocate (index_type, GFC_INTEGER_4 *);\n export_proto(allocate);\n \n void *\n-allocate (GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n+allocate (index_type size, GFC_INTEGER_4 * stat)\n {\n+#ifdef GFC_CHECK_MEMORY\n+  /* The only time this can happen is the size computed by the\n+     frontend wraps around.  */\n   if (size < 0)\n     {\n       if (stat)\n@@ -174,40 +162,19 @@ allocate (GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n \truntime_error (\"Attempt to allocate negative amount of memory. \"\n \t\t       \"Possible integer overflow\");\n     }\n-\n-  return allocate_size ((size_t) size, stat);\n-}\n-\n-extern void *allocate64 (GFC_INTEGER_8, GFC_INTEGER_4 *);\n-export_proto(allocate64);\n-\n-void *\n-allocate64 (GFC_INTEGER_8 size, GFC_INTEGER_4 * stat)\n-{\n-  if (size < 0)\n-    {\n-      if (stat)\n-\t{\n-\t  *stat = ERROR_ALLOCATION;\n-\t  return NULL;\n-\t}\n-      else\n-\truntime_error (\"ALLOCATE64: Attempt to allocate negative amount of \"\n-\t\t       \"memory. Possible integer overflow\");\n-    }\n-\n+#endif\n   return allocate_size ((size_t) size, stat);\n }\n \n /* Function to call in an ALLOCATE statement when the argument is an\n    allocatable array.  If the array is currently allocated, it is\n-   an error to allocate it again.  32-bit version.  */\n+   an error to allocate it again.  */\n \n-extern void *allocate_array (void *, GFC_INTEGER_4, GFC_INTEGER_4 *);\n+extern void *allocate_array (void *, index_type, GFC_INTEGER_4 *);\n export_proto(allocate_array);\n \n void *\n-allocate_array (void *mem, GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n+allocate_array (void *mem, index_type size, GFC_INTEGER_4 * stat)\n {\n   if (mem == NULL)\n     return allocate (size, stat);\n@@ -222,28 +189,6 @@ allocate_array (void *mem, GFC_INTEGER_4 size, GFC_INTEGER_4 * stat)\n   runtime_error (\"Attempting to allocate already allocated array.\");\n }\n \n-/* Function to call in an ALLOCATE statement when the argument is an\n-   allocatable array.  If the array is currently allocated, it is\n-   an error to allocate it again.  64-bit version.  */\n-\n-extern void *allocate64_array (void *, GFC_INTEGER_8, GFC_INTEGER_4 *);\n-export_proto(allocate64_array);\n-\n-void *\n-allocate64_array (void *mem, GFC_INTEGER_8 size, GFC_INTEGER_4 * stat)\n-{\n-  if (mem == NULL)\n-    return allocate64 (size, stat);\n-  if (stat)\n-    {\n-      free (mem);\n-      mem = allocate (size, stat);\n-      *stat = ERROR_ALLOCATION;\n-      return mem;\n-    }\n-\n-  runtime_error (\"Attempting to allocate already allocated array.\");\n-}\n \n /* User-deallocate; pointer is then NULLified by the front-end. */\n "}]}