{"sha": "d3722bf7325e1cf63215d69fda8d0667e4bb0321", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM3MjJiZjczMjVlMWNmNjMyMTVkNjlmZGE4ZDA2NjdlNGJiMDMyMQ==", "commit": {"author": {"name": "David Edelsohn", "email": "dje.gcc@gmail.com", "date": "2017-11-06T17:24:57Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2017-11-06T17:24:57Z"}, "message": "collect2.c (add_lto_object): Compile for OBJECT_COFF.\n\n* collect2.c (add_lto_object): Compile for OBJECT_COFF.\n(scan_prog_file): Don't skip PASS_LTOINFO. Scan for LTO objects.\n\nFrom-SVN: r254460", "tree": {"sha": "a94a16d8f2264f896b20e943b09c52386c468e7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a94a16d8f2264f896b20e943b09c52386c468e7b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3722bf7325e1cf63215d69fda8d0667e4bb0321", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3722bf7325e1cf63215d69fda8d0667e4bb0321", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3722bf7325e1cf63215d69fda8d0667e4bb0321", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3722bf7325e1cf63215d69fda8d0667e4bb0321/comments", "author": {"login": "edelsohn", "id": 667700, "node_id": "MDQ6VXNlcjY2NzcwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/667700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edelsohn", "html_url": "https://github.com/edelsohn", "followers_url": "https://api.github.com/users/edelsohn/followers", "following_url": "https://api.github.com/users/edelsohn/following{/other_user}", "gists_url": "https://api.github.com/users/edelsohn/gists{/gist_id}", "starred_url": "https://api.github.com/users/edelsohn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edelsohn/subscriptions", "organizations_url": "https://api.github.com/users/edelsohn/orgs", "repos_url": "https://api.github.com/users/edelsohn/repos", "events_url": "https://api.github.com/users/edelsohn/events{/privacy}", "received_events_url": "https://api.github.com/users/edelsohn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "86907740aae15bf62cc0b74eb81d8f15caa210d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86907740aae15bf62cc0b74eb81d8f15caa210d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86907740aae15bf62cc0b74eb81d8f15caa210d6"}], "stats": {"total": 27, "additions": 24, "deletions": 3}, "files": [{"sha": "798cc3744fb200eb33d060481bc00eb8110f2401", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3722bf7325e1cf63215d69fda8d0667e4bb0321/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3722bf7325e1cf63215d69fda8d0667e4bb0321/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d3722bf7325e1cf63215d69fda8d0667e4bb0321", "patch": "@@ -1,3 +1,8 @@\n+2017-11-06  David Edelsohn  <dje.gcc@gmail.com>\n+\n+\t* collect2.c (add_lto_object): Compile for OBJECT_COFF.\n+\t(scan_prog_file): Don't skip PASS_LTOINFO. Scan for LTO objects.\n+\n 2017-11-06  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR jit/82826"}, {"sha": "7fccf12cf093d707dc26d4b2d7cc61159a59a0d2", "filename": "gcc/collect2.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3722bf7325e1cf63215d69fda8d0667e4bb0321/gcc%2Fcollect2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3722bf7325e1cf63215d69fda8d0667e4bb0321/gcc%2Fcollect2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcollect2.c?ref=d3722bf7325e1cf63215d69fda8d0667e4bb0321", "patch": "@@ -614,7 +614,7 @@ static const char *const target_machine = TARGET_MACHINE;\n \n    Return 0 if not found, otherwise return its name, allocated with malloc.  */\n \n-#ifdef OBJECT_FORMAT_NONE\n+#if defined (OBJECT_FORMAT_NONE) || defined (OBJECT_FORMAT_COFF)\n \n /* Add an entry for the object file NAME to object file list LIST.\n    New entries are added at the end of the list. The original pointer\n@@ -634,7 +634,7 @@ add_lto_object (struct lto_object_list *list, const char *name)\n \n   list->last = n;\n }\n-#endif /* OBJECT_FORMAT_NONE */\n+#endif\n \n \n /* Perform a link-time recompilation and relink if any of the object\n@@ -2750,8 +2750,10 @@ scan_prog_file (const char *prog_name, scanpass which_pass,\n   LDFILE *ldptr = NULL;\n   int sym_index, sym_count;\n   int is_shared = 0;\n+  int found_lto = 0;\n \n-  if (which_pass != PASS_FIRST && which_pass != PASS_OBJ)\n+  if (which_pass != PASS_FIRST && which_pass != PASS_OBJ\n+      && which_pass != PASS_LTOINFO)\n     return;\n \n #ifdef COLLECT_EXPORT_LIST\n@@ -2764,6 +2766,7 @@ scan_prog_file (const char *prog_name, scanpass which_pass,\n      eliminate scan_libraries() function.  */\n   do\n     {\n+      found_lto = 0;\n #endif\n       /* Some platforms (e.g. OSF4) declare ldopen as taking a\n \t non-const char * filename parameter, even though it will not\n@@ -2806,6 +2809,19 @@ scan_prog_file (const char *prog_name, scanpass which_pass,\n \t\t\t++name;\n #endif\n \n+                      if (which_pass == PASS_LTOINFO)\n+                        {\n+\t\t\t  if (found_lto)\n+\t\t\t    continue;\n+\t\t\t  if (strncmp (name, \"__gnu_lto_v1\", 12) == 0)\n+\t\t\t    {\n+\t\t\t      add_lto_object (&lto_objects, prog_name);\n+\t\t\t      found_lto = 1;\n+\t\t\t      break;\n+\t\t\t    }\n+\t\t\t  continue;\n+\t\t\t}\n+\n \t\t      switch (is_ctor_dtor (name))\n \t\t\t{\n #if TARGET_AIX_VERSION"}]}