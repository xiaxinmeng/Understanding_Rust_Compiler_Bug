{"sha": "04ddfe064b58a9ce69a332942d51722dfb13db66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRkZGZlMDY0YjU4YTljZTY5YTMzMjk0MmQ1MTcyMmRmYjEzZGI2Ng==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2016-11-02T08:57:08Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2016-11-02T08:57:08Z"}, "message": "[AArch64] Add function comments to some prologue/epilogue helpers\n\n\t* config/aarch64/aarch64.c (aarch64_register_saved_on_entry): Add\n\tfunction comment.\n\t(aarch64_next_callee_save): Likewise.\n\t(aarch64_pushwb_single_reg): Likewise.\n\t(aarch64_gen_storewb_pair): Likewise.\n\t(aarch64_push_regs): Likewise.\n\t(aarch64_gen_loadwb_pair): Likewise.\n\t(aarch64_pop_regs): Likewise.\n\t(aarch64_gen_store_pair): Likewise.\n\t(aarch64_gen_load_pair): Likewise.\n\t(aarch64_save_callee_saves): Likewise.\n\t(aarch64_restore_callee_saves): Likewise.\n\nFrom-SVN: r241777", "tree": {"sha": "0939727515ec37fb16672754a6366db6a5fb14d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0939727515ec37fb16672754a6366db6a5fb14d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04ddfe064b58a9ce69a332942d51722dfb13db66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ddfe064b58a9ce69a332942d51722dfb13db66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04ddfe064b58a9ce69a332942d51722dfb13db66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04ddfe064b58a9ce69a332942d51722dfb13db66/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "da42ac7bc51006101e94711e6847f561d7b08005", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da42ac7bc51006101e94711e6847f561d7b08005", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da42ac7bc51006101e94711e6847f561d7b08005"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "52215f6eebf107833f6bc5f1a28614dc8158e3a2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ddfe064b58a9ce69a332942d51722dfb13db66/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ddfe064b58a9ce69a332942d51722dfb13db66/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=04ddfe064b58a9ce69a332942d51722dfb13db66", "patch": "@@ -1,3 +1,18 @@\n+2016-11-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_register_saved_on_entry): Add\n+\tfunction comment.\n+\t(aarch64_next_callee_save): Likewise.\n+\t(aarch64_pushwb_single_reg): Likewise.\n+\t(aarch64_gen_storewb_pair): Likewise.\n+\t(aarch64_push_regs): Likewise.\n+\t(aarch64_gen_loadwb_pair): Likewise.\n+\t(aarch64_pop_regs): Likewise.\n+\t(aarch64_gen_store_pair): Likewise.\n+\t(aarch64_gen_load_pair): Likewise.\n+\t(aarch64_save_callee_saves): Likewise.\n+\t(aarch64_restore_callee_saves): Likewise.\n+\n 2016-11-02  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/78035"}, {"sha": "28bdbceaa8f427ad3a60f2cb9bbd1a3d3a7e310e", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04ddfe064b58a9ce69a332942d51722dfb13db66/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04ddfe064b58a9ce69a332942d51722dfb13db66/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=04ddfe064b58a9ce69a332942d51722dfb13db66", "patch": "@@ -2936,12 +2936,18 @@ aarch64_layout_frame (void)\n   cfun->machine->frame.laid_out = true;\n }\n \n+/* Return true if the register REGNO is saved on entry to\n+   the current function.  */\n+\n static bool\n aarch64_register_saved_on_entry (int regno)\n {\n   return cfun->machine->frame.reg_offset[regno] >= 0;\n }\n \n+/* Return the next register up from REGNO up to LIMIT for the callee\n+   to save.  */\n+\n static unsigned\n aarch64_next_callee_save (unsigned regno, unsigned limit)\n {\n@@ -2950,6 +2956,9 @@ aarch64_next_callee_save (unsigned regno, unsigned limit)\n   return regno;\n }\n \n+/* Push the register number REGNO of mode MODE to the stack with write-back\n+   adjusting the stack by ADJUSTMENT.  */\n+\n static void\n aarch64_pushwb_single_reg (machine_mode mode, unsigned regno,\n \t\t\t   HOST_WIDE_INT adjustment)\n@@ -2966,6 +2975,10 @@ aarch64_pushwb_single_reg (machine_mode mode, unsigned regno,\n   RTX_FRAME_RELATED_P (insn) = 1;\n }\n \n+/* Generate and return an instruction to store the pair of registers\n+   REG and REG2 of mode MODE to location BASE with write-back adjusting\n+   the stack location BASE by ADJUSTMENT.  */\n+\n static rtx\n aarch64_gen_storewb_pair (machine_mode mode, rtx base, rtx reg, rtx reg2,\n \t\t\t  HOST_WIDE_INT adjustment)\n@@ -2985,6 +2998,9 @@ aarch64_gen_storewb_pair (machine_mode mode, rtx base, rtx reg, rtx reg2,\n     }\n }\n \n+/* Push registers numbered REGNO1 and REGNO2 to the stack, adjusting the\n+   stack pointer by ADJUSTMENT.  */\n+\n static void\n aarch64_push_regs (unsigned regno1, unsigned regno2, HOST_WIDE_INT adjustment)\n {\n@@ -3004,6 +3020,9 @@ aarch64_push_regs (unsigned regno1, unsigned regno2, HOST_WIDE_INT adjustment)\n   RTX_FRAME_RELATED_P (insn) = 1;\n }\n \n+/* Load the pair of register REG, REG2 of mode MODE from stack location BASE,\n+   adjusting it by ADJUSTMENT afterwards.  */\n+\n static rtx\n aarch64_gen_loadwb_pair (machine_mode mode, rtx base, rtx reg, rtx reg2,\n \t\t\t HOST_WIDE_INT adjustment)\n@@ -3021,6 +3040,10 @@ aarch64_gen_loadwb_pair (machine_mode mode, rtx base, rtx reg, rtx reg2,\n     }\n }\n \n+/* Pop the two registers numbered REGNO1, REGNO2 from the stack, adjusting it\n+   afterwards by ADJUSTMENT and writing the appropriate REG_CFA_RESTORE notes\n+   into CFI_OPS.  */\n+\n static void\n aarch64_pop_regs (unsigned regno1, unsigned regno2, HOST_WIDE_INT adjustment,\n \t\t  rtx *cfi_ops)\n@@ -3045,6 +3068,9 @@ aarch64_pop_regs (unsigned regno1, unsigned regno2, HOST_WIDE_INT adjustment,\n     }\n }\n \n+/* Generate and return a store pair instruction of mode MODE to store\n+   register REG1 to MEM1 and register REG2 to MEM2.  */\n+\n static rtx\n aarch64_gen_store_pair (machine_mode mode, rtx mem1, rtx reg1, rtx mem2,\n \t\t\trtx reg2)\n@@ -3062,6 +3088,9 @@ aarch64_gen_store_pair (machine_mode mode, rtx mem1, rtx reg1, rtx mem2,\n     }\n }\n \n+/* Generate and regurn a load pair isntruction of mode MODE to load register\n+   REG1 from MEM1 and register REG2 from MEM2.  */\n+\n static rtx\n aarch64_gen_load_pair (machine_mode mode, rtx reg1, rtx mem1, rtx reg2,\n \t\t       rtx mem2)\n@@ -3079,6 +3108,9 @@ aarch64_gen_load_pair (machine_mode mode, rtx reg1, rtx mem1, rtx reg2,\n     }\n }\n \n+/* Emit code to save the callee-saved registers from register number START\n+   to LIMIT to the stack at the location starting at offset START_OFFSET,\n+   skipping any write-back candidates if SKIP_WB is true.  */\n \n static void\n aarch64_save_callee_saves (machine_mode mode, HOST_WIDE_INT start_offset,\n@@ -3137,6 +3169,11 @@ aarch64_save_callee_saves (machine_mode mode, HOST_WIDE_INT start_offset,\n     }\n }\n \n+/* Emit code to restore the callee registers of mode MODE from register\n+   number START up to and including LIMIT.  Restore from the stack offset\n+   START_OFFSET, skipping any write-back candidates if SKIP_WB is true.\n+   Write the appropriate REG_CFA_RESTORE notes into CFI_OPS.  */\n+\n static void\n aarch64_restore_callee_saves (machine_mode mode,\n \t\t\t      HOST_WIDE_INT start_offset, unsigned start,"}]}