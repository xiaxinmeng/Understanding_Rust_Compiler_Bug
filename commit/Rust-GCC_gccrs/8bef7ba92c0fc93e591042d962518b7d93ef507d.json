{"sha": "8bef7ba92c0fc93e591042d962518b7d93ef507d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJlZjdiYTkyYzBmYzkzZTU5MTA0MmQ5NjI1MThiN2Q5M2VmNTA3ZA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T14:34:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T14:34:37Z"}, "message": "[multiple changes]\n\n2014-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* opt.ads (No_Elab_Code_All_Pragma): New global variable.\n\t* sem_ch10.adb (Check_No_Elab_Code_All): New procedure\n\t(Analyze_Compilation_Unit): Call Check_No_Elab_Code_All\n\t(Analyze_Subunit_Context): Call Check_No_Elab_Code_All.\n\t* sem_prag.adb (Analyze_Pragma, case No_Elaboration_Code_All):\n\tRemove code for checking with's, now in sem_ch10.adb, set\n\tOpt.No_Elab_Code_All_Pragma.\n\n2014-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n\n\t* sem_ch3.adb (Copy_And_Build): Copy the declaration for\n\taccess types as well and adjust the subtype mark if there are\n\tno constraints.\n\n2014-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_eval.adb (Test_In_Range): Return Unknown if error posted.\n\nFrom-SVN: r213478", "tree": {"sha": "05c1bea5e0529ce863dbffc73a496d988681f2ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05c1bea5e0529ce863dbffc73a496d988681f2ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bef7ba92c0fc93e591042d962518b7d93ef507d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bef7ba92c0fc93e591042d962518b7d93ef507d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bef7ba92c0fc93e591042d962518b7d93ef507d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bef7ba92c0fc93e591042d962518b7d93ef507d/comments", "author": null, "committer": null, "parents": [{"sha": "316e3a13c6743c8c3181f0bf6df2d7af23edd10a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/316e3a13c6743c8c3181f0bf6df2d7af23edd10a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/316e3a13c6743c8c3181f0bf6df2d7af23edd10a"}], "stats": {"total": 202, "additions": 172, "deletions": 30}, "files": [{"sha": "6b32f9822491cbb4a312e4bc762bd274cadc69e9", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bef7ba92c0fc93e591042d962518b7d93ef507d/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bef7ba92c0fc93e591042d962518b7d93ef507d/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8bef7ba92c0fc93e591042d962518b7d93ef507d", "patch": "@@ -1,3 +1,23 @@\n+2014-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* opt.ads (No_Elab_Code_All_Pragma): New global variable.\n+\t* sem_ch10.adb (Check_No_Elab_Code_All): New procedure\n+\t(Analyze_Compilation_Unit): Call Check_No_Elab_Code_All\n+\t(Analyze_Subunit_Context): Call Check_No_Elab_Code_All.\n+\t* sem_prag.adb (Analyze_Pragma, case No_Elaboration_Code_All):\n+\tRemove code for checking with's, now in sem_ch10.adb, set\n+\tOpt.No_Elab_Code_All_Pragma.\n+\n+2014-08-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* sem_ch3.adb (Copy_And_Build): Copy the declaration for\n+\taccess types as well and adjust the subtype mark if there are\n+\tno constraints.\n+\n+2014-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_eval.adb (Test_In_Range): Return Unknown if error posted.\n+\n 2014-08-01  Robert Dewar  <dewar@adacore.com>\n \n \t* sem_ch3.adb, einfo.ads, exp_ch4.adb: Code clean ups."}, {"sha": "2e7636dc6bab670b572eaa88f4c48a0d247d4b0a", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 72, "deletions": 4, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bef7ba92c0fc93e591042d962518b7d93ef507d/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bef7ba92c0fc93e591042d962518b7d93ef507d/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=8bef7ba92c0fc93e591042d962518b7d93ef507d", "patch": "@@ -705,10 +705,6 @@ package Opt is\n    --  True if a pragma Discard_Names appeared as a configuration pragma for\n    --  the current compilation unit.\n \n-   GNAT_Mode : Boolean := False;\n-   --  GNAT\n-   --  True if compiling in GNAT system mode (-gnatg switch)\n-\n    Identifier_Character_Set : Character;\n    --  GNAT\n    --  This variable indicates the character set to be used for identifiers.\n@@ -1042,6 +1038,11 @@ package Opt is\n    --  Undefined_Symbols_Are_False. Useful to perform a syntax check on all\n    --  branches of #if constructs.\n \n+   No_Elab_Code_All_Pragma : Node_Id := Empty;\n+   --  Set to point to a No_Elaboration_Code_All pragma or aspect encountered\n+   --  in the spec of the extended main unit. Used to determine if we need to\n+   --  do special tests for violation of this aspect.\n+\n    No_Main_Subprogram : Boolean := False;\n    --  GNATMAKE, GNATBIND\n    --  Set to True if compilation/binding of a program without main\n@@ -2088,6 +2089,70 @@ package Opt is\n    --  appropriately licensed unit to declare this as a Table failed with\n    --  various elaboration circularities. Memory is getting cheap these days!\n \n+   ---------------\n+   -- GNAT_Mode --\n+   ---------------\n+\n+   GNAT_Mode : Boolean := False;\n+   --  GNAT\n+   --  True if compiling in GNAT system mode (-gnatg switch)\n+\n+   --  Setting this switch has the following effects\n+\n+   --    The identifier character set is set to 'n' (7-bit ASCII)\n+\n+   --    Pragma Extend_System is ignored\n+\n+   --    Warning_Mode is set to Treat_As_Error (-gnatwe)\n+\n+   --    Standard style checks are set (See Set_GNAT_Style_Check_Options)\n+\n+   --    Standard warnings are turned on (see Set_GNAT_Mode_Warnings)\n+\n+   --    The Ada version is set to Ada 2012\n+\n+   --    Task priorities are always allowed to be in the range Any_Priority\n+\n+   --    Overflow checks are suppressed, overflow checking set to strict mode\n+\n+   --    ALI files are always generated for predefined generic packages\n+\n+   --    Obsolescent feature warnings are suppressed\n+\n+   --    Recompilation of children of GNAT, System, Ada, Interfaces is allowed\n+\n+   --    The Scalar_Storage_Order attribute applies to generic types\n+\n+   --    Categorization errors are treated as warnings rather than errors\n+\n+   --    Statements in preelaborated units give warnings rather than errors\n+\n+   --    Private objects are allowed in preelaborated units\n+\n+   --    Non-static constants in preelaborated units give warnings not errors\n+\n+   --    The warning about component size being ignored is suppressed\n+\n+   --    The warning about size clauses being ignored is suppressed\n+\n+   --    Initializing limited types gives a warning rather than an error\n+\n+   --    Copying of limited objects is allowed\n+\n+   --    Returning objects of limited types is allowed\n+\n+   --    All entities are considered known to Known_But_Invisible\n+\n+   --    Non-static call in preelaborated unit give a warning, not an error\n+\n+   --    Warnings on possible elaboration errors are suppressed\n+\n+   --    Warning about packing being ignored is suppressed\n+\n+   --    Warnings in internal units are not suppressed (they normally are)\n+\n+   --    The only special comment sequence allowed is --!\n+\n    --------------------------\n    -- Private Declarations --\n    --------------------------\n@@ -2146,4 +2211,7 @@ private\n    --  Indicates which version of gcc is in use (3 = 3.x, 4 = 4.x). Note that\n    --  gcc 2.8.1 (which used to be a value of 2) is no longer supported.\n \n+   -------------------------\n+   -- Effect of GNAT_Mode --\n+   -------------------------\n end Opt;"}, {"sha": "4bfd25bbb55d958cc0147fad282082655c308029", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bef7ba92c0fc93e591042d962518b7d93ef507d/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bef7ba92c0fc93e591042d962518b7d93ef507d/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=8bef7ba92c0fc93e591042d962518b7d93ef507d", "patch": "@@ -87,6 +87,10 @@ package body Sem_Ch10 is\n    --  Check whether the source for the body of a compilation unit must be\n    --  included in a standalone library.\n \n+   procedure Check_No_Elab_Code_All (N : Node_Id);\n+   --  Carries out possible tests for violation of No_Elab_Code all for withed\n+   --  units in the Context_Items of unit N.\n+\n    procedure Check_Private_Child_Unit (N : Node_Id);\n    --  If a with_clause mentions a private child unit, the compilation unit\n    --  must be a member of the same family, as described in 10.1.2.\n@@ -1279,6 +1283,13 @@ package body Sem_Ch10 is\n \n          Pop_Scope;\n       end if;\n+\n+      --  If No_Elaboration_Code_All was encountered, this is where we do the\n+      --  transitive test of with'ed units to make sure they have the aspect.\n+      --  This is delayed till the end of analyzing the compilation unit to\n+      --  ensure that the pragma/aspect, if present, has been analyzed.\n+\n+      Check_No_Elab_Code_All (N);\n    end Analyze_Compilation_Unit;\n \n    ---------------------\n@@ -2061,6 +2072,7 @@ package body Sem_Ch10 is\n \n       begin\n          Analyze_Context (N);\n+         Check_No_Elab_Code_All (N);\n \n          --  Make withed units immediately visible. If child unit, make the\n          --  ultimate parent immediately visible.\n@@ -6055,6 +6067,41 @@ package body Sem_Ch10 is\n       Set_Limited_View_Installed (Spec);\n    end Build_Limited_Views;\n \n+   ----------------------------\n+   -- Check_No_Elab_Code_All --\n+   ----------------------------\n+\n+   procedure Check_No_Elab_Code_All (N : Node_Id) is\n+   begin\n+      if Present (No_Elab_Code_All_Pragma)\n+        and then In_Extended_Main_Source_Unit (N)\n+        and then Present (Context_Items (N))\n+      then\n+         declare\n+            CL : constant List_Id := Context_Items (N);\n+            CI : Node_Id;\n+\n+         begin\n+            CI := First (CL);\n+            while Present (CI) loop\n+               if Nkind (CI) = N_With_Clause\n+                 and then not\n+                   No_Elab_Code_All (Get_Source_Unit (Library_Unit (CI)))\n+               then\n+                  Error_Msg_Sloc := Sloc (No_Elab_Code_All_Pragma);\n+                  Error_Msg_N\n+                    (\"violation of No_Elaboration_Code_All#\", CI);\n+                  Error_Msg_NE\n+                    (\"\\unit& does not have No_Elaboration_Code_All\",\n+                     CI, Entity (Name (CI)));\n+               end if;\n+\n+               Next (CI);\n+            end loop;\n+         end;\n+      end if;\n+   end Check_No_Elab_Code_All;\n+\n    -------------------------------\n    -- Check_Body_Needed_For_SAL --\n    -------------------------------"}, {"sha": "871f543b03c9ab014c00c6668acbe86bfe172b97", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bef7ba92c0fc93e591042d962518b7d93ef507d/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bef7ba92c0fc93e591042d962518b7d93ef507d/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=8bef7ba92c0fc93e591042d962518b7d93ef507d", "patch": "@@ -6614,21 +6614,38 @@ package body Sem_Ch3 is\n             Full_Parent := Underlying_Full_View (Full_Parent);\n          end if;\n \n+         --  For record, access and most enumeration types, derivation from\n+         --  the full view requires a fully-fledged declaration. In the other\n+         --  cases, just use an itype.\n+\n          if Ekind (Full_Parent) in Record_Kind\n+           or else Ekind (Full_Parent) in Access_Kind\n            or else\n              (Ekind (Full_Parent) in Enumeration_Kind\n                and then not Is_Standard_Character_Type (Full_Parent)\n                and then not Is_Generic_Type (Root_Type (Full_Parent)))\n          then\n-            --  Copy declaration to provide a completion for what is a private\n-            --  declaration. Indicate that full view is internally generated.\n+            --  Copy and adjust declaration to provide a completion for what\n+            --  is originally a private declaration. Indicate that full view\n+            --  is internally generated.\n \n             Full_N := New_Copy_Tree (N);\n             Full_Der := New_Copy (Derived_Type);\n             Set_Comes_From_Source (Full_N, False);\n             Set_Comes_From_Source (Full_Der, False);\n-            Set_Defining_Identifier (Full_N, Full_Der);\n             Set_Parent (Full_Der, Full_N);\n+            Set_Defining_Identifier (Full_N, Full_Der);\n+\n+            --  If there are no constraints, adjust the subtype mark\n+\n+            if Nkind (Subtype_Indication (Type_Definition (Full_N))) /=\n+                                                       N_Subtype_Indication\n+            then\n+               Set_Subtype_Indication\n+                 (Type_Definition (Full_N),\n+                  New_Occurrence_Of (Full_Parent, Sloc (Full_N)));\n+            end if;\n+\n             Insert_After (N, Full_N);\n \n             --  Build full view of derived type from full view of parent which\n@@ -6649,7 +6666,8 @@ package body Sem_Ch3 is\n                end if;\n \n             else\n-               Build_Derived_Enumeration_Type (Full_N, Full_Parent, Full_Der);\n+               Build_Derived_Type\n+                 (Full_N, Full_Parent, Full_Der, True, Derive_Subps => False);\n             end if;\n \n             --  The full declaration has been introduced into the tree and"}, {"sha": "7cf4b3d37da3628cf818b322e5bad0d04f74b5f2", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bef7ba92c0fc93e591042d962518b7d93ef507d/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bef7ba92c0fc93e591042d962518b7d93ef507d/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=8bef7ba92c0fc93e591042d962518b7d93ef507d", "patch": "@@ -6079,13 +6079,19 @@ package body Sem_Eval is\n       --  to get the information in the variable case as well.\n \n    begin\n+      --  If an error was posted on expression, then return Unknown, we do not\n+      --  want cascaded errors based on some false analysis of a junk node.\n+\n+      if Error_Posted (N) then\n+         return Unknown;\n+\n       --  Expression that raises constraint error is an odd case. We certainly\n       --  do not want to consider it to be in range. It might make sense to\n       --  consider it always out of range, but this causes incorrect error\n       --  messages about static expressions out of range. So we just return\n       --  Unknown, which is always safe.\n \n-      if Raises_Constraint_Error (N) then\n+      elsif Raises_Constraint_Error (N) then\n          return Unknown;\n \n       --  Universal types have no range limits, so always in range"}, {"sha": "21a2ae8516b514743b9f8f1a5295682d8c3f0608", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bef7ba92c0fc93e591042d962518b7d93ef507d/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bef7ba92c0fc93e591042d962518b7d93ef507d/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=8bef7ba92c0fc93e591042d962518b7d93ef507d", "patch": "@@ -16284,9 +16284,6 @@ package body Sem_Prag is\n          --  pragma No_Elaboration_Code_All;\n \n          when Pragma_No_Elaboration_Code_All => NECA : declare\n-            CL : constant List_Id := Context_Items (Cunit (Current_Sem_Unit));\n-            CI : Node_Id;\n-\n          begin\n             GNAT_Pragma;\n             Check_Valid_Library_Unit_Pragma;\n@@ -16318,25 +16315,11 @@ package body Sem_Prag is\n             Set_Restriction (No_Elaboration_Code, N);\n             Add_To_Config_Boolean_Restrictions (No_Elaboration_Code);\n \n-            --  Here is where we check that the context clause for the current\n-            --  unit does not have any bad with's with respect to NECA rules.\n+            --  If in main extended unit, activate transitive with test\n \n-            CI := First (CL);\n-            while Present (CI) loop\n-               if Nkind (CI) = N_With_Clause\n-                 and then not\n-                   No_Elab_Code_All (Get_Source_Unit (Library_Unit (CI)))\n-               then\n-                  Error_Msg_Sloc := Sloc (CI);\n-                  Error_Msg_N\n-                    (\"violation of No_Elaboration_Code_All#\", N);\n-                  Error_Msg_NE\n-                    (\"\\unit& does not have No_Elaboration_Code_All\",\n-                     N, Entity (Name (CI)));\n-               end if;\n-\n-               Next (CI);\n-            end loop;\n+            if In_Extended_Main_Source_Unit (N) then\n+               Opt.No_Elab_Code_All_Pragma := N;\n+            end if;\n          end NECA;\n \n          ---------------"}]}