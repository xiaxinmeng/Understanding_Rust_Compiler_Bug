{"sha": "14c2ec26e2d1232b88906927355517d34ffdbab6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTRjMmVjMjZlMmQxMjMyYjg4OTA2OTI3MzU1NTE3ZDM0ZmZkYmFiNg==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-05-20T16:18:44Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2013-05-20T16:18:44Z"}, "message": "re PR tree-optimization/56547 ([SH] missed opportunity for fmac with -ffast-math)\n\n\tPR target/56547\n\t* config/sh/sh.md (fmasf4): Remove empty constraints strings.\n\t(*fmasf4, *fmasf4_media): New insns.\n\n\tPR target/56547\n\t* gcc.target/sh/pr56547-1.c: New.\n\t* gcc.target/sh/pr56547-2.c: New.\n\nFrom-SVN: r199110", "tree": {"sha": "976b33f3b1e4ec942dc2b9e1d7902fc55695717c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/976b33f3b1e4ec942dc2b9e1d7902fc55695717c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/14c2ec26e2d1232b88906927355517d34ffdbab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c2ec26e2d1232b88906927355517d34ffdbab6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/14c2ec26e2d1232b88906927355517d34ffdbab6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/14c2ec26e2d1232b88906927355517d34ffdbab6/comments", "author": null, "committer": null, "parents": [{"sha": "3c1247f03db5d6e9478f3fd6ea7a3950ccd68118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c1247f03db5d6e9478f3fd6ea7a3950ccd68118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c1247f03db5d6e9478f3fd6ea7a3950ccd68118"}], "stats": {"total": 94, "additions": 90, "deletions": 4}, "files": [{"sha": "a89b15c6c6bd79bbf4c135008db60dc2a6fb0375", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2ec26e2d1232b88906927355517d34ffdbab6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2ec26e2d1232b88906927355517d34ffdbab6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=14c2ec26e2d1232b88906927355517d34ffdbab6", "patch": "@@ -1,3 +1,9 @@\n+2013-05-20  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/56547\n+\t* config/sh/sh.md (fmasf4): Remove empty constraints strings.\n+\t(*fmasf4, *fmasf4_media): New insns.\n+\n 2013-05-19  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* config/mips/mips.h (BASE_INSN_LENGTH, NOP_INSN_LENGTH): New macros."}, {"sha": "8a14068765412ceb51fa859c0244db0c96e0b099", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2ec26e2d1232b88906927355517d34ffdbab6/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2ec26e2d1232b88906927355517d34ffdbab6/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=14c2ec26e2d1232b88906927355517d34ffdbab6", "patch": "@@ -12251,10 +12251,10 @@ label:\n \n ;; FMA (fused multiply-add) patterns\n (define_expand \"fmasf4\"\n-  [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"\")\n-\t(fma:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"\")\n-\t\t(match_operand:SF 2 \"fp_arith_reg_operand\" \"\")\n-\t\t(match_operand:SF 3 \"fp_arith_reg_operand\" \"\")))]\n+  [(set (match_operand:SF 0 \"fp_arith_reg_operand\")\n+\t(fma:SF (match_operand:SF 1 \"fp_arith_reg_operand\")\n+\t\t(match_operand:SF 2 \"fp_arith_reg_operand\")\n+\t\t(match_operand:SF 3 \"fp_arith_reg_operand\")))]\n   \"TARGET_SH2E || TARGET_SHMEDIA_FPU\"\n {\n   if (TARGET_SH2E)\n@@ -12285,6 +12285,43 @@ label:\n   \"fmac.s %1, %2, %0\"\n   [(set_attr \"type\" \"fparith_media\")])\n \n+;; For some cases such as 'a * b + a' the FMA pattern is not generated by\n+;; previous transformations.  If FMA is generally allowed, let the combine\n+;; pass utilize it.\n+(define_insn_and_split \"*fmasf4\"\n+  [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n+\t(plus:SF (mult:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"%w\")\n+\t\t\t  (match_operand:SF 2 \"fp_arith_reg_operand\" \"f\"))\n+\t\t (match_operand:SF 3 \"arith_reg_operand\" \"0\")))\n+   (use (match_operand:PSI 4 \"fpscr_operand\"))]\n+  \"TARGET_SH2E && flag_fp_contract_mode != FP_CONTRACT_OFF\"\n+  \"fmac\t%1,%2,%0\"\n+  \"&& can_create_pseudo_p ()\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (fma:SF (match_dup 1) (match_dup 2) (match_dup 3)))\n+\t      (use (match_dup 4))])]\n+{\n+  /* Change 'b * a + a' into 'a * b + a'.\n+     This is better for register allocation.  */\n+  if (REGNO (operands[2]) == REGNO (operands[3]))\n+    {\n+      rtx tmp = operands[1];\n+      operands[1] = operands[2];\n+      operands[2] = tmp;\n+    }\n+}\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"fp_mode\" \"single\")])\n+\n+(define_insn \"*fmasf4_media\"\n+  [(set (match_operand:SF 0 \"fp_arith_reg_operand\" \"=f\")\n+\t(plus:SF (mult:SF (match_operand:SF 1 \"fp_arith_reg_operand\" \"%f\")\n+\t\t\t  (match_operand:SF 2 \"fp_arith_reg_operand\" \"f\"))\n+\t\t (match_operand:SF 3 \"fp_arith_reg_operand\" \"0\")))]\n+  \"TARGET_SHMEDIA_FPU && flag_fp_contract_mode != FP_CONTRACT_OFF\"\n+  \"fmac.s %1, %2, %0\"\n+  [(set_attr \"type\" \"fparith_media\")])\n+\n (define_expand \"divsf3\"\n   [(set (match_operand:SF 0 \"arith_reg_operand\" \"\")\n \t(div:SF (match_operand:SF 1 \"arith_reg_operand\" \"\")"}, {"sha": "85aac1e2a103f50fb479103f4bd6e0d7dff4e9c8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2ec26e2d1232b88906927355517d34ffdbab6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2ec26e2d1232b88906927355517d34ffdbab6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=14c2ec26e2d1232b88906927355517d34ffdbab6", "patch": "@@ -1,3 +1,9 @@\n+2013-05-20  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\tPR target/56547\n+\t* gcc.target/sh/pr56547-1.c: New.\n+\t* gcc.target/sh/pr56547-2.c: New.\n+\n 2013-05-20  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/23608"}, {"sha": "0ba21a685a4c380a170a295ec63c8ad021d9db25", "filename": "gcc/testsuite/gcc.target/sh/pr56547-1.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2ec26e2d1232b88906927355517d34ffdbab6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2ec26e2d1232b88906927355517d34ffdbab6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-1.c?ref=14c2ec26e2d1232b88906927355517d34ffdbab6", "patch": "@@ -0,0 +1,19 @@\n+/* Verify that the fmac insn is used for the expression 'a * b + a' and\n+   'a * a + a'.\n+   This assumes that the default compiler setting is -ffp-contract=fast.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fmac\" 2 } } */\n+\n+float\n+test_00 (float a, float b)\n+{\n+  return a * b + a;\n+}\n+\n+float\n+test_01 (float a)\n+{\n+  return a * a + a;\n+}"}, {"sha": "02e1a0f86f40231c0f4dce8ef856eff424a29b57", "filename": "gcc/testsuite/gcc.target/sh/pr56547-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/14c2ec26e2d1232b88906927355517d34ffdbab6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/14c2ec26e2d1232b88906927355517d34ffdbab6/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fsh%2Fpr56547-2.c?ref=14c2ec26e2d1232b88906927355517d34ffdbab6", "patch": "@@ -0,0 +1,18 @@\n+/* Verify that the fmac insn is used for the expression 'a * b + a' and\n+   'a * a + a' when -ffast-math is specified.  */\n+/* { dg-do compile { target \"sh*-*-*\" } } */\n+/* { dg-options \"-O1 -ffast-math\" } */\n+/* { dg-skip-if \"\" { \"sh*-*-*\" } { \"-m1\" \"-m2\" \"-m3\" \"-m4al\" \"*nofpu\" \"-m4-340*\" \"-m4-400*\" \"-m4-500*\" \"-m5*\" } { \"\" } }  */\n+/* { dg-final { scan-assembler-times \"fmac\" 2 } } */\n+\n+float\n+test_00 (float a, float b)\n+{\n+  return a * b + a;\n+}\n+\n+float\n+test_01 (float a)\n+{\n+  return a * a + a;\n+}"}]}