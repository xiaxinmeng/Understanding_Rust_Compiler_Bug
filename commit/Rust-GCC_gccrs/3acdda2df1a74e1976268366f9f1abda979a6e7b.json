{"sha": "3acdda2df1a74e1976268366f9f1abda979a6e7b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FjZGRhMmRmMWE3NGUxOTc2MjY4MzY2ZjlmMWFiZGE5NzlhNmU3Yg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T16:08:37Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-11-30T16:08:37Z"}, "message": "[multiple changes]\n\n2009-11-30  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-coinve.adb (Insert): Move exception handler closer to point where\n\texception can occur.\n\tMinor reformatting & comment additions.\n\n2009-11-30  Arnaud Charlet  <charlet@adacore.com>\n\n\t* freeze.adb (Freeze_Entity): Disable warning on 'Foreign caller must\n\tpass bounds' for VM targets, not relevant.\n\n2009-11-30  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_util.adb (Wrong_Type): Diagnose additional case of modular\n\tmissing parens.\n\t* a-tiinio.adb, a-wtinio.adb, a-ztinio.adb: Minor reformatting\n\n\t* exp_util.adb (Kill_Dead_Code): Suppress warning for some additional\n\tcases.\n\n\t* sem_warn.adb (Set_Warning_Flag): Clean up gnatwA list and ensure\n\tcompleteness.\n\t(Set_Dot_Warning_Flag): Ditto for -gnatw.e\n\t(Set_Dot_Warning_Flag): Implement -gnbatw.v/w.V\n\t* usage.adb: Add lines for -gnatw.v/w.V\n\n2009-11-30  Emmanuel Briot  <briot@adacore.com>\n\n\t* make.adb (Check_Standard_Library): use Full_Source_Name instead of\n\tdirect call to Find_File. The former provides caching of the results, so\n\tmight be more efficient\n\t(Start_Compile_If_Necessary): Add comment on possible optimization,\n\tnot done for now.\n\nFrom-SVN: r154825", "tree": {"sha": "9fe7bb7e1792a568a310d0ca746ddff32e9cb8b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fe7bb7e1792a568a310d0ca746ddff32e9cb8b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3acdda2df1a74e1976268366f9f1abda979a6e7b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3acdda2df1a74e1976268366f9f1abda979a6e7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3acdda2df1a74e1976268366f9f1abda979a6e7b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3acdda2df1a74e1976268366f9f1abda979a6e7b/comments", "author": null, "committer": null, "parents": [{"sha": "2546734c21ccd05a2d14be5f2aebd00aa4adece2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2546734c21ccd05a2d14be5f2aebd00aa4adece2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2546734c21ccd05a2d14be5f2aebd00aa4adece2"}], "stats": {"total": 201, "additions": 163, "deletions": 38}, "files": [{"sha": "8152f3d5dc2a33291d8e6db1d4bf58f5aa0b9a81", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3acdda2df1a74e1976268366f9f1abda979a6e7b", "patch": "@@ -1,3 +1,37 @@\n+2009-11-30  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-coinve.adb (Insert): Move exception handler closer to point where\n+\texception can occur.\n+\tMinor reformatting & comment additions.\n+\n+2009-11-30  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* freeze.adb (Freeze_Entity): Disable warning on 'Foreign caller must\n+\tpass bounds' for VM targets, not relevant.\n+\n+2009-11-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_util.adb (Wrong_Type): Diagnose additional case of modular\n+\tmissing parens.\n+\t* a-tiinio.adb, a-wtinio.adb, a-ztinio.adb: Minor reformatting\n+\n+\t* exp_util.adb (Kill_Dead_Code): Suppress warning for some additional\n+\tcases.\n+\n+\t* sem_warn.adb (Set_Warning_Flag): Clean up gnatwA list and ensure\n+\tcompleteness.\n+\t(Set_Dot_Warning_Flag): Ditto for -gnatw.e\n+\t(Set_Dot_Warning_Flag): Implement -gnbatw.v/w.V\n+\t* usage.adb: Add lines for -gnatw.v/w.V\n+\n+2009-11-30  Emmanuel Briot  <briot@adacore.com>\n+\n+\t* make.adb (Check_Standard_Library): use Full_Source_Name instead of\n+\tdirect call to Find_File. The former provides caching of the results, so\n+\tmight be more efficient\n+\t(Start_Compile_If_Necessary): Add comment on possible optimization,\n+\tnot done for now.\n+\n 2009-11-30  Thomas Quinot  <quinot@adacore.com>\n \n \t* g-sechas.adb: Minor reformatting"}, {"sha": "84ad22ec1f9f131dafc6d9638cb8e94864f05932", "filename": "gcc/ada/a-coinve.adb", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-coinve.adb?ref=3acdda2df1a74e1976268366f9f1abda979a6e7b", "patch": "@@ -1121,21 +1121,45 @@ package body Ada.Containers.Indefinite_Vectors is\n \n                   Index : constant Index_Type := Index_Type (Index_As_Int);\n \n-                  J : Index_Type'Base := Before;\n+                  J : Index_Type'Base;\n \n                begin\n+                  --  The new items are being inserted in the middle of the\n+                  --  array, in the range [Before, Index). Copy the existing\n+                  --  elements to the end of the array, to make room for the\n+                  --  new items.\n+\n                   E (Index .. New_Last) := E (Before .. Container.Last);\n                   Container.Last := New_Last;\n \n-                  while J < Index loop\n-                     E (J) := new Element_Type'(New_Item);\n-                     J := J + 1;\n-                  end loop;\n+                  --  We have copied the existing items up to the end of the\n+                  --  array, to make room for the new items in the middle of\n+                  --  the array.  Now we actually allocate the new items.\n \n-               exception\n-                  when others =>\n-                     E (J .. Index - 1) := (others => null);\n-                     raise;\n+                  --  Note: initialize J outside loop to make it clear that\n+                  --  J always has a value if the exception handler triggers.\n+\n+                  J := Before;\n+                  begin\n+                     while J < Index loop\n+                        E (J) := new Element_Type'(New_Item);\n+                        J := J + 1;\n+                     end loop;\n+\n+                  exception\n+                     when others =>\n+\n+                        --  Values in the range [Before, J) were successfully\n+                        --  allocated, but values in the range [J, Index) are\n+                        --  stale (these array positions contain copies of the\n+                        --  old items, that did not get assigned a new item,\n+                        --  because the allocation failed). We must finish what\n+                        --  we started by clearing out all of the stale values,\n+                        --  leaving a \"hole\" in the middle of the array.\n+\n+                        E (J .. Index - 1) := (others => null);\n+                        raise;\n+                  end;\n                end;\n \n             else\n@@ -1149,6 +1173,9 @@ package body Ada.Containers.Indefinite_Vectors is\n          return;\n       end if;\n \n+      --  There follows LOTS of code completely devoid of comments ???\n+      --  This is not our general style ???\n+\n       declare\n          C, CC : UInt;\n "}, {"sha": "eb2aa327be2b2124ab62dd31c99240ea378369c4", "filename": "gcc/ada/a-tiinio.adb", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fa-tiinio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fa-tiinio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tiinio.adb?ref=3acdda2df1a74e1976268366f9f1abda979a6e7b", "patch": "@@ -36,11 +36,11 @@ package body Ada.Text_IO.Integer_IO is\n    package Aux renames Ada.Text_IO.Integer_Aux;\n \n    Need_LLI : constant Boolean := Num'Base'Size > Integer'Size;\n-   --  Throughout this generic body, we distinguish between the case\n-   --  where type Integer is acceptable, and where a Long_Long_Integer\n-   --  is needed. This constant Boolean is used to test for these cases\n-   --  and since it is a constant, only the code for the relevant case\n-   --  will be included in the instance.\n+   pragma Warnings (Off, Need_LLI);\n+   --  Throughout this generic body, we distinguish between the case where type\n+   --  Integer is acceptable, and where a Long_Long_Integer is needed. This\n+   --  Boolean is used to test for these cases and since it is a constant, only\n+   --  code for the relevant case will be included in the instance.\n \n    ---------\n    -- Get --"}, {"sha": "507145f98e760a2714ab7fa7451937faa025422e", "filename": "gcc/ada/a-wtinio.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fa-wtinio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fa-wtinio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-wtinio.adb?ref=3acdda2df1a74e1976268366f9f1abda979a6e7b", "patch": "@@ -36,11 +36,10 @@ with System.WCh_WtS; use System.WCh_WtS;\n package body Ada.Wide_Text_IO.Integer_IO is\n \n    Need_LLI : constant Boolean := Num'Base'Size > Integer'Size;\n-   --  Throughout this generic body, we distinguish between the case\n-   --  where type Integer is acceptable, and where a Long_Long_Integer\n-   --  is needed. This constant Boolean is used to test for these cases\n-   --  and since it is a constant, only the code for the relevant case\n-   --  will be included in the instance.\n+   --  Throughout this generic body, we distinguish between the case where type\n+   --  Integer is acceptable, and where a Long_Long_Integer is needed. This\n+   --  Boolean is used to test for these cases and since it is a constant, only\n+   --  code for the relevant case will be included in the instance.\n \n    subtype TFT is Ada.Wide_Text_IO.File_Type;\n    --  File type required for calls to routines in Aux"}, {"sha": "93e4d280960947686d0803276e4e0acbfe60c1bd", "filename": "gcc/ada/a-ztinio.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fa-ztinio.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fa-ztinio.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-ztinio.adb?ref=3acdda2df1a74e1976268366f9f1abda979a6e7b", "patch": "@@ -36,11 +36,10 @@ with System.WCh_WtS; use System.WCh_WtS;\n package body Ada.Wide_Wide_Text_IO.Integer_IO is\n \n    Need_LLI : constant Boolean := Num'Base'Size > Integer'Size;\n-   --  Throughout this generic body, we distinguish between the case\n-   --  where type Integer is acceptable, and where a Long_Long_Integer\n-   --  is needed. This constant Boolean is used to test for these cases\n-   --  and since it is a constant, only the code for the relevant case\n-   --  will be included in the instance.\n+   --  Throughout this generic body, we distinguish between the case where type\n+   --  Integer is acceptable, and where a Long_Long_Integer is needed. This\n+   --  Boolean is used to test for these cases and since it is a constant, only\n+   --  code for the relevant case will be included in the instance.\n \n    subtype TFT is Ada.Wide_Wide_Text_IO.File_Type;\n    --  File type required for calls to routines in Aux"}, {"sha": "564c11b6613287697b95fafe09f9148a3c1975e9", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=3acdda2df1a74e1976268366f9f1abda979a6e7b", "patch": "@@ -3412,17 +3412,49 @@ package body Exp_Util is\n    --------------------\n \n    procedure Kill_Dead_Code (N : Node_Id; Warn : Boolean := False) is\n+      W : Boolean := Warn;\n+      --  Set False if warnings suppressed\n+\n    begin\n       if Present (N) then\n          Remove_Warning_Messages (N);\n \n-         if Warn then\n-            Error_Msg_F\n-              (\"?this code can never be executed and has been deleted!\", N);\n+         --  Generate warning if appropriate\n+\n+         if W then\n+\n+            --  We suppress the warning if this code is under control of an\n+            --  if statement, whose condition is a simple identifier, and\n+            --  either we are in an instance, or warnings off is set for this\n+            --  identifier. The reason for killing it in the instance case is\n+            --  that it is common and reasonable for code to be deleted in\n+            --  instances for various reasons.\n+\n+            if Nkind (Parent (N)) = N_If_Statement then\n+               declare\n+                  C : constant Node_Id := Condition (Parent (N));\n+               begin\n+                  if Nkind (C) = N_Identifier\n+                    and then\n+                      (In_Instance\n+                        or else (Present (Entity (C))\n+                                   and then Has_Warnings_Off (Entity (C))))\n+                  then\n+                     W := False;\n+                  end if;\n+               end;\n+            end if;\n+\n+            --  Generate warning if not suppressed\n+\n+            if W then\n+               Error_Msg_F\n+                 (\"?this code can never be executed and has been deleted!\", N);\n+            end if;\n          end if;\n \n          --  Recurse into block statements and bodies to process declarations\n-         --  and statements\n+         --  and statements.\n \n          if Nkind (N) = N_Block_Statement\n            or else Nkind (N) = N_Subprogram_Body"}, {"sha": "7f0f7863824eedac16a6e061b763356786bdd92d", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=3acdda2df1a74e1976268366f9f1abda979a6e7b", "patch": "@@ -2602,6 +2602,11 @@ package body Freeze is\n                        and then Is_Array_Type (F_Type)\n                        and then not Is_Constrained (F_Type)\n                        and then Warn_On_Export_Import\n+\n+                       --  Exclude VM case, since both .NET and JVM can handle\n+                       --  unconstrained arrays without a problem.\n+\n+                       and then VM_Target = No_VM\n                      then\n                         Error_Msg_Qual_Level := 1;\n "}, {"sha": "0e3c85765d59e584c3e5d37a26a72ba86efd792d", "filename": "gcc/ada/make.adb", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fmake.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fmake.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmake.adb?ref=3acdda2df1a74e1976268366f9f1abda979a6e7b", "patch": "@@ -2678,8 +2678,7 @@ package body Make is\n                --  library only if we can find it.\n \n                if RTS_Switch then\n-                  Add_It :=\n-                    Find_File (Sfile, Osint.Source) /= No_File;\n+                  Add_It := Full_Source_Name (Sfile) /= No_File;\n                end if;\n \n                if Add_It then\n@@ -3247,6 +3246,13 @@ package body Make is\n                Attr      => Source_File_Attr'Access);\n \n             Lib_File := Osint.Lib_File_Name (Source_File, Source_Index);\n+\n+            --  ??? This call could be avoided when using projects, since we\n+            --  know where the ALI file is supposed to be. That would avoid\n+            --  searches in the object directories, including in the runtime\n+            --  dir. However, that would require getting access to the\n+            --  Source_Id.\n+\n             Osint.Full_Lib_File_Name\n               (Lib_File,\n                Lib_File => Full_Lib_File,"}, {"sha": "e56066b7d4d6533f8699590dcd1bb000d7ea4679", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=3acdda2df1a74e1976268366f9f1abda979a6e7b", "patch": "@@ -11380,7 +11380,15 @@ package body Sem_Util is\n                L  : constant Node_Id := Left_Opnd (Op);\n                R  : constant Node_Id := Right_Opnd (Op);\n             begin\n-               if Etype (L) = Found_Type\n+               --  The case for the message is when the left operand of the\n+               --  comparison is the same modular type, or when it is an\n+               --  integer literal (or other universal integer expression),\n+               --  which would have been typed as the modular type if the\n+               --  parens had been there.\n+\n+               if (Etype (L) = Found_Type\n+                     or else\n+                   Etype (L) = Universal_Integer)\n                  and then Is_Integer_Type (Etype (R))\n                then\n                   Error_Msg_N"}, {"sha": "580ba9aedc05ac0cd1eceabf6f546242adaf85d7", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=3acdda2df1a74e1976268366f9f1abda979a6e7b", "patch": "@@ -2992,8 +2992,10 @@ package body Sem_Warn is\n             Warn_On_Object_Renames_Function     := True;\n             Warn_On_Obsolescent_Feature         := True;\n             Warn_On_Overlap                     := True;\n+            Warn_On_Parameter_Order             := True;\n             Warn_On_Questionable_Missing_Parens := True;\n             Warn_On_Redundant_Constructs        := True;\n+            Warn_On_Reverse_Bit_Order           := True;\n             Warn_On_Unchecked_Conversion        := True;\n             Warn_On_Unrecognized_Pragma         := True;\n             Warn_On_Unrepped_Components         := True;\n@@ -3032,6 +3034,12 @@ package body Sem_Warn is\n          when 'R' =>\n             Warn_On_Object_Renames_Function     := False;\n \n+         when 'v' =>\n+            Warn_On_Reverse_Bit_Order           := True;\n+\n+         when 'V' =>\n+            Warn_On_Reverse_Bit_Order           := False;\n+\n          when 'w' =>\n             Warn_On_Warnings_Off                := True;\n \n@@ -3084,6 +3092,7 @@ package body Sem_Warn is\n       Warn_On_Obsolescent_Feature         := True;\n       Warn_On_Questionable_Missing_Parens := True;\n       Warn_On_Redundant_Constructs        := True;\n+      Warn_On_Reverse_Bit_Order           := False;\n       Warn_On_Object_Renames_Function     := True;\n       Warn_On_Unchecked_Conversion        := True;\n       Warn_On_Unrecognized_Pragma         := True;\n@@ -3120,11 +3129,13 @@ package body Sem_Warn is\n             Warn_On_Parameter_Order             := True;\n             Warn_On_Questionable_Missing_Parens := True;\n             Warn_On_Redundant_Constructs        := True;\n+            Warn_On_Reverse_Bit_Order           := True;\n             Warn_On_Unchecked_Conversion        := True;\n             Warn_On_Unrecognized_Pragma         := True;\n             Warn_On_Unrepped_Components         := True;\n \n          when 'A' =>\n+            Address_Clause_Overlay_Warnings     := False;\n             Check_Unreferenced                  := False;\n             Check_Unreferenced_Formals          := False;\n             Check_Withs                         := False;\n@@ -3133,6 +3144,7 @@ package body Sem_Warn is\n             Implementation_Unit_Warnings        := False;\n             Ineffective_Inline_Warnings         := False;\n             Warn_On_Ada_2005_Compatibility      := False;\n+            Warn_On_All_Unread_Out_Parameters   := False;\n             Warn_On_Assertion_Failure           := False;\n             Warn_On_Assumed_Low_Bound           := False;\n             Warn_On_Bad_Fixed_Value             := False;\n@@ -3145,13 +3157,13 @@ package body Sem_Warn is\n             Warn_On_Modified_Unread             := False;\n             Warn_On_No_Value_Assigned           := False;\n             Warn_On_Non_Local_Exception         := False;\n+            Warn_On_Object_Renames_Function     := False;\n             Warn_On_Obsolescent_Feature         := False;\n             Warn_On_Overlap                     := False;\n-            Warn_On_All_Unread_Out_Parameters   := False;\n             Warn_On_Parameter_Order             := False;\n             Warn_On_Questionable_Missing_Parens := False;\n             Warn_On_Redundant_Constructs        := False;\n-            Warn_On_Object_Renames_Function     := False;\n+            Warn_On_Reverse_Bit_Order           := False;\n             Warn_On_Unchecked_Conversion        := False;\n             Warn_On_Unrecognized_Pragma         := False;\n             Warn_On_Unrepped_Components         := False;"}, {"sha": "8b0d0cba4e331262af1ae766b686276cd28050be", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3acdda2df1a74e1976268366f9f1abda979a6e7b/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=3acdda2df1a74e1976268366f9f1abda979a6e7b", "patch": "@@ -397,9 +397,9 @@ begin\n \n    Write_Switch_Char (\"wxx\");\n    Write_Line (\"Enable selected warning modes, xx = list of parameters:\");\n-   Write_Line (\"        a    turn on all optional warnings \" &\n+   Write_Line (\"        a    turn on all optional info/warnings \" &\n                                                   \"(except dhl.ot.w)\");\n-   Write_Line (\"        A    turn off all optional warnings\");\n+   Write_Line (\"        A    turn off all optional info/warnings\");\n    Write_Line (\"        .a*  turn on warnings for failing assertion\");\n    Write_Line (\"        .A   turn off warnings for failing assertion\");\n    Write_Line (\"        b    turn on warnings for bad fixed value \" &\n@@ -414,8 +414,9 @@ begin\n    Write_Line (\"        .C*  turn off warnings for unrepped components\");\n    Write_Line (\"        d    turn on warnings for implicit dereference\");\n    Write_Line (\"        D*   turn off warnings for implicit dereference\");\n-   Write_Line (\"        e    treat all warnings as errors\");\n-   Write_Line (\"        .e   turn on every optional warning (no exceptions)\");\n+   Write_Line (\"        e    treat all warnings (but not info) as errors\");\n+   Write_Line (\"        .e   turn on every optional info/warning \" &\n+                                                  \"(no exceptions)\");\n    Write_Line (\"        f    turn on warnings for unreferenced formal\");\n    Write_Line (\"        F*   turn off warnings for unreferenced formal\");\n    Write_Line (\"        g*   turn on warnings for unrecognized pragma\");\n@@ -465,13 +466,15 @@ begin\n    Write_Line (\"        R*   turn off warnings for redundant construct\");\n    Write_Line (\"        .r   turn on warnings for object renaming function\");\n    Write_Line (\"        .R*  turn off warnings for object renaming function\");\n-   Write_Line (\"        s    suppress all warnings\");\n+   Write_Line (\"        s    suppress all info/warnings\");\n    Write_Line (\"        t    turn on warnings for tracking deleted code\");\n    Write_Line (\"        T*   turn off warnings for tracking deleted code\");\n    Write_Line (\"        u    turn on warnings for unused entity\");\n    Write_Line (\"        U*   turn off warnings for unused entity\");\n    Write_Line (\"        v*   turn on warnings for unassigned variable\");\n    Write_Line (\"        V    turn off warnings for unassigned variable\");\n+   Write_Line (\"        .v*  turn on info messages for reverse bit order\");\n+   Write_Line (\"        .V   turn off info messages for reverse bit order\");\n    Write_Line (\"        w*   turn on warnings for wrong low bound assumption\");\n    Write_Line (\"        W    turn off warnings for wrong low bound \" &\n                                                   \"assumption\");"}]}