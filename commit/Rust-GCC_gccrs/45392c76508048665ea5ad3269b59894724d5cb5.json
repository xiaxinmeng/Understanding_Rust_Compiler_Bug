{"sha": "45392c76508048665ea5ad3269b59894724d5cb5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDUzOTJjNzY1MDgwNDg2NjVlYTVhZDMyNjliNTk4OTQ3MjRkNWNiNQ==", "commit": {"author": {"name": "Ilya Enkovich", "email": "ilya.enkovich@intel.com", "date": "2014-12-03T08:45:45Z"}, "committer": {"name": "Ilya Enkovich", "email": "ienkovich@gcc.gnu.org", "date": "2014-12-03T08:45:45Z"}, "message": "constraints.md (Yr): New.\n\ngcc/\n\n\t* config/i386/constraints.md (Yr): New.\n\t* config/i386/i386.h (reg_class): Add NO_REX_SSE_REGS.\n\t(REG_CLASS_NAMES): Likewise.\n\t(REG_CLASS_CONTENTS): Likewise.\n\t* config/i386/sse.md (*vec_concatv2sf_sse4_1): Add alternatives\n\twhich use only NO_REX_SSE_REGS.\n\t(vec_set<mode>_0): Likewise.\n\t(*vec_setv4sf_sse4_1): Likewise.\n\t(sse4_1_insertps): Likewise.\n\t(*sse4_1_extractps): Likewise.\n\t(*sse4_1_mulv2siv2di3<mask_name>): Likewise.\n\t(*<sse4_1_avx2>_mul<mode>3<mask_name>): Likewise.\n\t(*sse4_1_<code><mode>3<mask_name>): Likewise.\n\t(*sse4_1_<code><mode>3): Likewise.\n\t(*sse4_1_eqv2di3): Likewise.\n\t(sse4_2_gtv2di3): Likewise.\n\t(*vec_extractv4si): Likewise.\n\t(*vec_concatv2si_sse4_1): Likewise.\n\t(vec_concatv2di): Likewise.\n\t(<sse4_1>_blend<ssemodesuffix><avxsizesuffix>): Likewise.\n\t(<sse4_1>_blendv<ssemodesuffix><avxsizesuffix>): Likewise.\n\t(<sse4_1>_dp<ssemodesuffix><avxsizesuffix>): Likewise.\n\t(<vi8_sse4_1_avx2_avx512>_movntdqa): Likewise.\n\t(<sse4_1_avx2>_mpsadbw): Likewise.\n\t(<sse4_1_avx2>packusdw<mask_name>): Likewise.\n\t(<sse4_1_avx2>_pblendvb): Likewise.\n\t(sse4_1_pblendw): Likewise.\n\t(sse4_1_phminposuw): Likewise.\n\t(sse4_1_<code>v8qiv8hi2<mask_name>): Likewise.\n\t(sse4_1_<code>v4qiv4si2<mask_name>): Likewise.\n\t(sse4_1_<code>v4hiv4si2<mask_name>): Likewise.\n\t(sse4_1_<code>v2qiv2di2<mask_name>): Likewise.\n\t(sse4_1_<code>v2hiv2di2<mask_name>): Likewise.\n\t(sse4_1_<code>v2siv2di2<mask_name>): Likewise.\n\t(sse4_1_ptest): Likewise.\n\t(<sse4_1>_round<ssemodesuffix><avxsizesuffix>): Likewise.\n\t(sse4_1_round<ssescalarmodesuffix>): Likewise.\n\t* config/i386/subst.md (mask_prefix4): New.\n\t* config/i386/x86-tune.def (X86_TUNE_AVOID_4BYTE_PREFIXES): New.\n\ngcc/testsuites/\n\n\t* gcc.target/i386/sse2-init-v2di-2.c: Adjust to changed\n\tvec_concatv2di template.\n\nFrom-SVN: r218303", "tree": {"sha": "ad09dd9e85bd4fb92af58f56cccbbc9c0eb7429a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad09dd9e85bd4fb92af58f56cccbbc9c0eb7429a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/45392c76508048665ea5ad3269b59894724d5cb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45392c76508048665ea5ad3269b59894724d5cb5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/45392c76508048665ea5ad3269b59894724d5cb5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/45392c76508048665ea5ad3269b59894724d5cb5/comments", "author": {"login": "ienkovich", "id": 18308708, "node_id": "MDQ6VXNlcjE4MzA4NzA4", "avatar_url": "https://avatars.githubusercontent.com/u/18308708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ienkovich", "html_url": "https://github.com/ienkovich", "followers_url": "https://api.github.com/users/ienkovich/followers", "following_url": "https://api.github.com/users/ienkovich/following{/other_user}", "gists_url": "https://api.github.com/users/ienkovich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ienkovich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ienkovich/subscriptions", "organizations_url": "https://api.github.com/users/ienkovich/orgs", "repos_url": "https://api.github.com/users/ienkovich/repos", "events_url": "https://api.github.com/users/ienkovich/events{/privacy}", "received_events_url": "https://api.github.com/users/ienkovich/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "17adbcebf01689d2f2c5386845398d9aedbe4cb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17adbcebf01689d2f2c5386845398d9aedbe4cb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17adbcebf01689d2f2c5386845398d9aedbe4cb3"}], "stats": {"total": 456, "additions": 271, "deletions": 185}, "files": [{"sha": "85a68b90d66390c7cddc896967d9c85a348395f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=45392c76508048665ea5ad3269b59894724d5cb5", "patch": "@@ -1,3 +1,45 @@\n+2014-12-03  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* config/i386/constraints.md (Yr): New.\n+\t* config/i386/i386.h (reg_class): Add NO_REX_SSE_REGS.\n+\t(REG_CLASS_NAMES): Likewise.\n+\t(REG_CLASS_CONTENTS): Likewise.\n+\t* config/i386/sse.md (*vec_concatv2sf_sse4_1): Add alternatives\n+\twhich use only NO_REX_SSE_REGS.\n+\t(vec_set<mode>_0): Likewise.\n+\t(*vec_setv4sf_sse4_1): Likewise.\n+\t(sse4_1_insertps): Likewise.\n+\t(*sse4_1_extractps): Likewise.\n+\t(*sse4_1_mulv2siv2di3<mask_name>): Likewise.\n+\t(*<sse4_1_avx2>_mul<mode>3<mask_name>): Likewise.\n+\t(*sse4_1_<code><mode>3<mask_name>): Likewise.\n+\t(*sse4_1_<code><mode>3): Likewise.\n+\t(*sse4_1_eqv2di3): Likewise.\n+\t(sse4_2_gtv2di3): Likewise.\n+\t(*vec_extractv4si): Likewise.\n+\t(*vec_concatv2si_sse4_1): Likewise.\n+\t(vec_concatv2di): Likewise.\n+\t(<sse4_1>_blend<ssemodesuffix><avxsizesuffix>): Likewise.\n+\t(<sse4_1>_blendv<ssemodesuffix><avxsizesuffix>): Likewise.\n+\t(<sse4_1>_dp<ssemodesuffix><avxsizesuffix>): Likewise.\n+\t(<vi8_sse4_1_avx2_avx512>_movntdqa): Likewise.\n+\t(<sse4_1_avx2>_mpsadbw): Likewise.\n+\t(<sse4_1_avx2>packusdw<mask_name>): Likewise.\n+\t(<sse4_1_avx2>_pblendvb): Likewise.\n+\t(sse4_1_pblendw): Likewise.\n+\t(sse4_1_phminposuw): Likewise.\n+\t(sse4_1_<code>v8qiv8hi2<mask_name>): Likewise.\n+\t(sse4_1_<code>v4qiv4si2<mask_name>): Likewise.\n+\t(sse4_1_<code>v4hiv4si2<mask_name>): Likewise.\n+\t(sse4_1_<code>v2qiv2di2<mask_name>): Likewise.\n+\t(sse4_1_<code>v2hiv2di2<mask_name>): Likewise.\n+\t(sse4_1_<code>v2siv2di2<mask_name>): Likewise.\n+\t(sse4_1_ptest): Likewise.\n+\t(<sse4_1>_round<ssemodesuffix><avxsizesuffix>): Likewise.\n+\t(sse4_1_round<ssescalarmodesuffix>): Likewise.\n+\t* config/i386/subst.md (mask_prefix4): New.\n+\t* config/i386/x86-tune.def (X86_TUNE_AVOID_4BYTE_PREFIXES): New.\n+\n 2014-12-03  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR rtl-optimization/52714"}, {"sha": "c8093f54e7ee19e1dd3bbb45ba9e6247bb8510e3", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=45392c76508048665ea5ad3269b59894724d5cb5", "patch": "@@ -106,6 +106,8 @@\n ;;  a\tInteger register when zero extensions with AND are disabled\n ;;  p\tInteger register when TARGET_PARTIAL_REG_STALL is disabled\n ;;  f\tx87 register when 80387 floating point arithmetic is enabled\n+;;  r\tSSE regs not requiring REX prefix when prefixes avoidance is enabled\n+;;\tand all SSE regs otherwise\n \n (define_register_constraint \"Yz\" \"TARGET_SSE ? SSE_FIRST_REG : NO_REGS\"\n  \"First SSE register (@code{%xmm0}).\")\n@@ -139,6 +141,10 @@\n  \"(ix86_fpmath & FPMATH_387) ? FLOAT_REGS : NO_REGS\"\n  \"@internal Any x87 register when 80387 FP arithmetic is enabled.\")\n \n+(define_register_constraint \"Yr\"\n+ \"TARGET_SSE ? (X86_TUNE_AVOID_4BYTE_PREFIXES ? NO_REX_SSE_REGS : ALL_SSE_REGS) : NO_REGS\"\n+ \"@internal Lower SSE register when avoiding REX prefix and all SSE registers otherwise.\")\n+\n ;; We use the B prefix to denote any number of internal operands:\n ;;  s  Sibcall memory operand, not valid for TARGET_X32\n ;;  w  Call memory operand, not valid for TARGET_X32"}, {"sha": "df7789d5ef25175d17db225e354869425c4d44f6", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=45392c76508048665ea5ad3269b59894724d5cb5", "patch": "@@ -1311,6 +1311,7 @@ enum reg_class\n   FP_TOP_REG, FP_SECOND_REG,\t/* %st(0) %st(1) */\n   FLOAT_REGS,\n   SSE_FIRST_REG,\n+  NO_REX_SSE_REGS,\n   SSE_REGS,\n   EVEX_SSE_REGS,\n   BND_REGS,\n@@ -1369,6 +1370,7 @@ enum reg_class\n    \"FP_TOP_REG\", \"FP_SECOND_REG\",\t\\\n    \"FLOAT_REGS\",\t\t\t\\\n    \"SSE_FIRST_REG\",\t\t\t\\\n+   \"NO_REX_SSE_REGS\",\t\t\t\\\n    \"SSE_REGS\",\t\t\t\t\\\n    \"EVEX_SSE_REGS\",\t\t\t\\\n    \"BND_REGS\",\t\t\t\t\\\n@@ -1409,6 +1411,7 @@ enum reg_class\n     { 0x0200,       0x0,    0x0 },       /* FP_SECOND_REG */             \\\n     { 0xff00,       0x0,    0x0 },       /* FLOAT_REGS */                \\\n   { 0x200000,       0x0,    0x0 },       /* SSE_FIRST_REG */             \\\n+{ 0x1fe00000,  0x000000,    0x0 },       /* NO_REX_SSE_REGS */           \\\n { 0x1fe00000,  0x1fe000,    0x0 },       /* SSE_REGS */                  \\\n        { 0x0,0xffe00000,   0x1f },       /* EVEX_SSE_REGS */             \\\n        { 0x0,       0x0,0x1e000 },       /* BND_REGS */\t\t\t \\"}, {"sha": "c3aaea370bb4e3b88ca980eadef463708bc70c51", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 209, "deletions": 184, "changes": 393, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=45392c76508048665ea5ad3269b59894724d5cb5", "patch": "@@ -6338,26 +6338,28 @@\n ;; Although insertps takes register source, we prefer\n ;; unpcklps with register source since it is shorter.\n (define_insn \"*vec_concatv2sf_sse4_1\"\n-  [(set (match_operand:V2SF 0 \"register_operand\"     \"=x,x,x,x,x,*y ,*y\")\n+  [(set (match_operand:V2SF 0 \"register_operand\"     \"=Yr,*x,x,Yr,*x,x,x,*y ,*y\")\n \t(vec_concat:V2SF\n-\t  (match_operand:SF 1 \"nonimmediate_operand\" \" 0,x,0,x,m, 0 , m\")\n-\t  (match_operand:SF 2 \"vector_move_operand\"  \" x,x,m,m,C,*ym, C\")))]\n+\t  (match_operand:SF 1 \"nonimmediate_operand\" \"  0, 0,x, 0,0, x,m, 0 , m\")\n+\t  (match_operand:SF 2 \"vector_move_operand\"  \" Yr,*x,x, m,m, m,C,*ym, C\")))]\n   \"TARGET_SSE4_1\"\n   \"@\n+   unpcklps\\t{%2, %0|%0, %2}\n    unpcklps\\t{%2, %0|%0, %2}\n    vunpcklps\\t{%2, %1, %0|%0, %1, %2}\n    insertps\\t{$0x10, %2, %0|%0, %2, 0x10}\n+   insertps\\t{$0x10, %2, %0|%0, %2, 0x10}\n    vinsertps\\t{$0x10, %2, %1, %0|%0, %1, %2, 0x10}\n    %vmovss\\t{%1, %0|%0, %1}\n    punpckldq\\t{%2, %0|%0, %2}\n    movd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"isa\" \"noavx,avx,noavx,avx,*,*,*\")\n-   (set_attr \"type\" \"sselog,sselog,sselog,sselog,ssemov,mmxcvt,mmxmov\")\n-   (set_attr \"prefix_data16\" \"*,*,1,*,*,*,*\")\n-   (set_attr \"prefix_extra\" \"*,*,1,1,*,*,*\")\n-   (set_attr \"length_immediate\" \"*,*,1,1,*,*,*\")\n-   (set_attr \"prefix\" \"orig,vex,orig,vex,maybe_vex,orig,orig\")\n-   (set_attr \"mode\" \"V4SF,V4SF,V4SF,V4SF,SF,DI,DI\")])\n+  [(set_attr \"isa\" \"noavx,noavx,avx,noavx,noavx,avx,*,*,*\")\n+   (set_attr \"type\" \"sselog,sselog,sselog,sselog,sselog,sselog,ssemov,mmxcvt,mmxmov\")\n+   (set_attr \"prefix_data16\" \"*,*,*,1,1,*,*,*,*\")\n+   (set_attr \"prefix_extra\" \"*,*,*,1,1,1,*,*,*\")\n+   (set_attr \"length_immediate\" \"*,*,*,1,1,1,*,*,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex,orig,orig,vex,maybe_vex,orig,orig\")\n+   (set_attr \"mode\" \"V4SF,V4SF,V4SF,V4SF,V4SF,V4SF,SF,DI,DI\")])\n \n ;; ??? In theory we can match memory for the MMX alternative, but allowing\n ;; nonimmediate_operand for operand 2 and *not* allowing memory for the SSE\n@@ -6405,49 +6407,51 @@\n ;; see comment above inline_secondary_memory_needed function in i386.c\n (define_insn \"vec_set<mode>_0\"\n   [(set (match_operand:VI4F_128 0 \"nonimmediate_operand\"\n-\t  \"=v,v,v ,x,x,v,x  ,x  ,m ,m   ,m\")\n+\t  \"=Yr,*v,v,v ,x,x,v,Yr ,*x ,x  ,m ,m   ,m\")\n \t(vec_merge:VI4F_128\n \t  (vec_duplicate:VI4F_128\n \t    (match_operand:<ssescalarmode> 2 \"general_operand\"\n-\t  \" v,m,*r,m,x,v,*rm,*rm,!x,!*re,!*fF\"))\n+\t  \" Yr,*v,m,*r,m,x,v,*rm,*rm,*rm,!x,!*re,!*fF\"))\n \t  (match_operand:VI4F_128 1 \"vector_move_operand\"\n-\t  \" C,C,C ,C,0,v,0  ,x  ,0 ,0   ,0\")\n+\t  \" C , C,C,C ,C,0,v,0  ,0  ,x  ,0 ,0   ,0\")\n \t  (const_int 1)))]\n   \"TARGET_SSE\"\n   \"@\n+   %vinsertps\\t{$0xe, %d2, %0|%0, %d2, 0xe}\n    %vinsertps\\t{$0xe, %d2, %0|%0, %d2, 0xe}\n    %vmov<ssescalarmodesuffix>\\t{%2, %0|%0, %2}\n    %vmovd\\t{%2, %0|%0, %2}\n    movss\\t{%2, %0|%0, %2}\n    movss\\t{%2, %0|%0, %2}\n    vmovss\\t{%2, %1, %0|%0, %1, %2}\n    pinsrd\\t{$0, %2, %0|%0, %2, 0}\n+   pinsrd\\t{$0, %2, %0|%0, %2, 0}\n    vpinsrd\\t{$0, %2, %1, %0|%0, %1, %2, 0}\n    #\n    #\n    #\"\n-  [(set_attr \"isa\" \"sse4,sse2,sse2,noavx,noavx,avx,sse4_noavx,avx,*,*,*\")\n+  [(set_attr \"isa\" \"sse4,sse4,sse2,sse2,noavx,noavx,avx,sse4_noavx,sse4_noavx,avx,*,*,*\")\n    (set (attr \"type\")\n-     (cond [(eq_attr \"alternative\" \"0,6,7\")\n+     (cond [(eq_attr \"alternative\" \"0,1,7,8,9\")\n \t      (const_string \"sselog\")\n-\t    (eq_attr \"alternative\" \"9\")\n+\t    (eq_attr \"alternative\" \"11\")\n \t      (const_string \"imov\")\n-\t    (eq_attr \"alternative\" \"10\")\n+\t    (eq_attr \"alternative\" \"12\")\n \t      (const_string \"fmov\")\n \t   ]\n \t   (const_string \"ssemov\")))\n-   (set_attr \"prefix_extra\" \"*,*,*,*,*,*,1,1,*,*,*\")\n-   (set_attr \"length_immediate\" \"*,*,*,*,*,*,1,1,*,*,*\")\n-   (set_attr \"prefix\" \"maybe_vex,maybe_vex,maybe_vex,orig,orig,vex,orig,vex,*,*,*\")\n-   (set_attr \"mode\" \"SF,<ssescalarmode>,SI,SF,SF,SF,TI,TI,*,*,*\")])\n+   (set_attr \"prefix_extra\" \"*,*,*,*,*,*,*,1,1,1,*,*,*\")\n+   (set_attr \"length_immediate\" \"*,*,*,*,*,*,*,1,1,1,*,*,*\")\n+   (set_attr \"prefix\" \"maybe_vex,maybe_vex,maybe_vex,maybe_vex,orig,orig,vex,orig,orig,vex,*,*,*\")\n+   (set_attr \"mode\" \"SF,SF,<ssescalarmode>,SI,SF,SF,SF,TI,TI,TI,*,*,*\")])\n \n ;; A subset is vec_setv4sf.\n (define_insn \"*vec_setv4sf_sse4_1\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=Yr,*x,x\")\n \t(vec_merge:V4SF\n \t  (vec_duplicate:V4SF\n-\t    (match_operand:SF 2 \"nonimmediate_operand\" \"xm,xm\"))\n-\t  (match_operand:V4SF 1 \"register_operand\" \"0,x\")\n+\t    (match_operand:SF 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\"))\n+\t  (match_operand:V4SF 1 \"register_operand\" \"0,0,x\")\n \t  (match_operand:SI 3 \"const_int_operand\")))]\n   \"TARGET_SSE4_1\n    && ((unsigned) exact_log2 (INTVAL (operands[3]))\n@@ -6457,26 +6461,27 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \"insertps\\t{%3, %2, %0|%0, %2, %3}\";\n     case 1:\n+      return \"insertps\\t{%3, %2, %0|%0, %2, %3}\";\n+    case 2:\n       return \"vinsertps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix_data16\" \"1,1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_insn \"sse4_1_insertps\"\n-  [(set (match_operand:V4SF 0 \"register_operand\" \"=x,x\")\n-\t(unspec:V4SF [(match_operand:V4SF 2 \"nonimmediate_operand\" \"xm,xm\")\n-\t\t      (match_operand:V4SF 1 \"register_operand\" \"0,x\")\n-\t\t      (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n\")]\n+  [(set (match_operand:V4SF 0 \"register_operand\" \"=Yr,*x,x\")\n+\t(unspec:V4SF [(match_operand:V4SF 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")\n+\t\t      (match_operand:V4SF 1 \"register_operand\" \"0,0,x\")\n+\t\t      (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n,n\")]\n \t\t     UNSPEC_INSERTPS))]\n   \"TARGET_SSE4_1\"\n {\n@@ -6490,19 +6495,20 @@\n   switch (which_alternative)\n     {\n     case 0:\n-      return \"insertps\\t{%3, %2, %0|%0, %2, %3}\";\n     case 1:\n+      return \"insertps\\t{%3, %2, %0|%0, %2, %3}\";\n+    case 2:\n       return \"vinsertps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix_data16\" \"1,1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"V4SF\")])\n \n (define_split\n@@ -6544,12 +6550,13 @@\n })\n \n (define_insn_and_split \"*sse4_1_extractps\"\n-  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=rm,x,x\")\n+  [(set (match_operand:SF 0 \"nonimmediate_operand\" \"=rm,rm,x,x\")\n \t(vec_select:SF\n-\t  (match_operand:V4SF 1 \"register_operand\" \"x,0,x\")\n-\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n,n\")])))]\n+\t  (match_operand:V4SF 1 \"register_operand\" \"Yr,*x,0,x\")\n+\t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\" \"n,n,n,n\")])))]\n   \"TARGET_SSE4_1\"\n   \"@\n+   %vextractps\\t{%2, %1, %0|%0, %1, %2}\n    %vextractps\\t{%2, %1, %0|%0, %1, %2}\n    #\n    #\"\n@@ -6575,13 +6582,13 @@\n     }\n   DONE;\n }\n-  [(set_attr \"isa\" \"*,noavx,avx\")\n-   (set_attr \"type\" \"sselog,*,*\")\n-   (set_attr \"prefix_data16\" \"1,*,*\")\n-   (set_attr \"prefix_extra\" \"1,*,*\")\n-   (set_attr \"length_immediate\" \"1,*,*\")\n-   (set_attr \"prefix\" \"maybe_vex,*,*\")\n-   (set_attr \"mode\" \"V4SF,*,*\")])\n+  [(set_attr \"isa\" \"*,*,noavx,avx\")\n+   (set_attr \"type\" \"sselog,sselog,*,*\")\n+   (set_attr \"prefix_data16\" \"1,1,*,*\")\n+   (set_attr \"prefix_extra\" \"1,1,*,*\")\n+   (set_attr \"length_immediate\" \"1,1,*,*\")\n+   (set_attr \"prefix\" \"maybe_vex,maybe_vex,*,*\")\n+   (set_attr \"mode\" \"V4SF,V4SF,*,*\")])\n \n (define_insn_and_split \"*vec_extractv4sf_mem\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=x,*r,f\")\n@@ -9553,26 +9560,27 @@\n   \"ix86_fixup_binary_operands_no_copy (MULT, V4SImode, operands);\")\n \n (define_insn \"*sse4_1_mulv2siv2di3<mask_name>\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,v\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,v\")\n \t(mult:V2DI\n \t  (sign_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%0,v\")\n+\t      (match_operand:V4SI 1 \"nonimmediate_operand\" \"%0,0,v\")\n \t      (parallel [(const_int 0) (const_int 2)])))\n \t  (sign_extend:V2DI\n \t    (vec_select:V2SI\n-\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"xm,vm\")\n+\t      (match_operand:V4SI 2 \"nonimmediate_operand\" \"Yrm,*xm,vm\")\n \t      (parallel [(const_int 0) (const_int 2)])))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\n    && ix86_binary_operator_ok (MULT, V4SImode, operands)\"\n   \"@\n+   pmuldq\\t{%2, %0|%0, %2}\n    pmuldq\\t{%2, %0|%0, %2}\n    vpmuldq\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"sseimul\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix_data16\" \"1,1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"avx512bw_pmaddwd512<mode><mask_name>\"\n@@ -9752,19 +9760,20 @@\n })\n \n (define_insn \"*<sse4_1_avx2>_mul<mode>3<mask_name>\"\n-  [(set (match_operand:VI4_AVX512F 0 \"register_operand\" \"=x,v\")\n+  [(set (match_operand:VI4_AVX512F 0 \"register_operand\" \"=Yr,*x,v\")\n \t(mult:VI4_AVX512F\n-\t  (match_operand:VI4_AVX512F 1 \"nonimmediate_operand\" \"%0,v\")\n-\t  (match_operand:VI4_AVX512F 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+\t  (match_operand:VI4_AVX512F 1 \"nonimmediate_operand\" \"%0,0,v\")\n+\t  (match_operand:VI4_AVX512F 2 \"nonimmediate_operand\" \"Yrm,*xm,vm\")))]\n   \"TARGET_SSE4_1 && ix86_binary_operator_ok (MULT, <MODE>mode, operands) && <mask_mode512bit_condition>\"\n   \"@\n+   pmulld\\t{%2, %0|%0, %2}\n    pmulld\\t{%2, %0|%0, %2}\n    vpmulld\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"sseimul\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"<mask_prefix3>\")\n-   (set_attr \"btver2_decode\" \"vector,vector\")\n+   (set_attr \"prefix\" \"<mask_prefix4>\")\n+   (set_attr \"btver2_decode\" \"vector,vector,vector\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_expand \"mul<mode>3\"\n@@ -10241,20 +10250,21 @@\n })\n \n (define_insn \"*sse4_1_<code><mode>3<mask_name>\"\n-  [(set (match_operand:VI14_128 0 \"register_operand\" \"=x,v\")\n+  [(set (match_operand:VI14_128 0 \"register_operand\" \"=Yr,*x,v\")\n \t(smaxmin:VI14_128\n-\t  (match_operand:VI14_128 1 \"nonimmediate_operand\" \"%0,v\")\n-\t  (match_operand:VI14_128 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+\t  (match_operand:VI14_128 1 \"nonimmediate_operand\" \"%0,0,v\")\n+\t  (match_operand:VI14_128 2 \"nonimmediate_operand\" \"Yrm,*xm,vm\")))]\n   \"TARGET_SSE4_1\n    && <mask_mode512bit_condition>\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n+   p<maxmin_int><ssemodesuffix>\\t{%2, %0|%0, %2}\n    p<maxmin_int><ssemodesuffix>\\t{%2, %0|%0, %2}\n    vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_extra\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix_extra\" \"1,1,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*<code>v8hi3\"\n@@ -10324,20 +10334,21 @@\n })\n \n (define_insn \"*sse4_1_<code><mode>3<mask_name>\"\n-  [(set (match_operand:VI24_128 0 \"register_operand\" \"=x,v\")\n+  [(set (match_operand:VI24_128 0 \"register_operand\" \"=Yr,*x,v\")\n \t(umaxmin:VI24_128\n-\t  (match_operand:VI24_128 1 \"nonimmediate_operand\" \"%0,v\")\n-\t  (match_operand:VI24_128 2 \"nonimmediate_operand\" \"xm,vm\")))]\n+\t  (match_operand:VI24_128 1 \"nonimmediate_operand\" \"%0,0,v\")\n+\t  (match_operand:VI24_128 2 \"nonimmediate_operand\" \"Yrm,*xm,vm\")))]\n   \"TARGET_SSE4_1\n    && <mask_mode512bit_condition>\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n   \"@\n+   p<maxmin_int><ssemodesuffix>\\t{%2, %0|%0, %2}\n    p<maxmin_int><ssemodesuffix>\\t{%2, %0|%0, %2}\n    vp<maxmin_int><ssemodesuffix>\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"sseiadd\")\n-   (set_attr \"prefix_extra\" \"1,*\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix_extra\" \"1,1,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*<code>v16qi3\"\n@@ -10427,18 +10438,19 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"*sse4_1_eqv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,x\")\n \t(eq:V2DI\n-\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"%0,x\")\n-\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+\t  (match_operand:V2DI 1 \"nonimmediate_operand\" \"%0,0,x\")\n+\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")))]\n   \"TARGET_SSE4_1 && ix86_binary_operator_ok (EQ, V2DImode, operands)\"\n   \"@\n+   pcmpeqq\\t{%2, %0|%0, %2}\n    pcmpeqq\\t{%2, %0|%0, %2}\n    vpcmpeqq\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*sse2_eq<mode>3\"\n@@ -10474,18 +10486,19 @@\n   \"ix86_fixup_binary_operands_no_copy (EQ, V2DImode, operands);\")\n \n (define_insn \"sse4_2_gtv2di3\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*x,x\")\n \t(gt:V2DI\n-\t  (match_operand:V2DI 1 \"register_operand\" \"0,x\")\n-\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"xm,xm\")))]\n+\t  (match_operand:V2DI 1 \"register_operand\" \"0,0,x\")\n+\t  (match_operand:V2DI 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")))]\n   \"TARGET_SSE4_2\"\n   \"@\n+   pcmpgtq\\t{%2, %0|%0, %2}\n    pcmpgtq\\t{%2, %0|%0, %2}\n    vpcmpgtq\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssecmp\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"avx2_gt<mode>3\"\n@@ -12705,9 +12718,9 @@\n   \"operands[1] = gen_rtx_REG (<MODE>mode, REGNO (operands[1]));\")\n \n (define_insn \"*vec_extractv4si\"\n-  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,x,x\")\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"=rm,Yr,*x,x\")\n \t(vec_select:SI\n-\t  (match_operand:V4SI 1 \"register_operand\" \"x,0,x\")\n+\t  (match_operand:V4SI 1 \"register_operand\" \"x,0,0,x\")\n \t  (parallel [(match_operand:SI 2 \"const_0_to_3_operand\")])))]\n   \"TARGET_SSE4_1\"\n {\n@@ -12717,22 +12730,23 @@\n       return \"%vpextrd\\t{%2, %1, %0|%0, %1, %2}\";\n \n     case 1:\n+    case 2:\n       operands [2] = GEN_INT (INTVAL (operands[2]) * 4);\n       return \"psrldq\\t{%2, %0|%0, %2}\";\n \n-    case 2:\n+    case 3:\n       operands [2] = GEN_INT (INTVAL (operands[2]) * 4);\n       return \"vpsrldq\\t{%2, %1, %0|%0, %1, %2}\";\n \n     default:\n       gcc_unreachable ();\n     }\n }\n-  [(set_attr \"isa\" \"*,noavx,avx\")\n-   (set_attr \"type\" \"sselog1,sseishft1,sseishft1\")\n-   (set_attr \"prefix_extra\" \"1,*,*\")\n+  [(set_attr \"isa\" \"*,noavx,noavx,avx\")\n+   (set_attr \"type\" \"sselog1,sseishft1,sseishft1,sseishft1\")\n+   (set_attr \"prefix_extra\" \"1,*,*,*\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"maybe_vex,orig,vex\")\n+   (set_attr \"prefix\" \"maybe_vex,orig,orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"*vec_extractv4si_zext\"\n@@ -12839,25 +12853,27 @@\n    (set_attr \"mode\" \"TI,TI,DF,V4SF\")])\n \n (define_insn \"*vec_concatv2si_sse4_1\"\n-  [(set (match_operand:V2SI 0 \"register_operand\"     \"=x, x,x,x, x, *y,*y\")\n+  [(set (match_operand:V2SI 0 \"register_operand\"     \"=Yr,*x,x, Yr,*x,x, x, *y,*y\")\n \t(vec_concat:V2SI\n-\t  (match_operand:SI 1 \"nonimmediate_operand\" \" 0, x,0,x,rm,  0,rm\")\n-\t  (match_operand:SI 2 \"vector_move_operand\"  \"rm,rm,x,x, C,*ym, C\")))]\n+\t  (match_operand:SI 1 \"nonimmediate_operand\" \"  0, 0,x,  0,0, x,rm,  0,rm\")\n+\t  (match_operand:SI 2 \"vector_move_operand\"  \" rm,rm,rm,Yr,*x,x, C,*ym, C\")))]\n   \"TARGET_SSE4_1\"\n   \"@\n+   pinsrd\\t{$1, %2, %0|%0, %2, 1}\n    pinsrd\\t{$1, %2, %0|%0, %2, 1}\n    vpinsrd\\t{$1, %2, %1, %0|%0, %1, %2, 1}\n    punpckldq\\t{%2, %0|%0, %2}\n+   punpckldq\\t{%2, %0|%0, %2}\n    vpunpckldq\\t{%2, %1, %0|%0, %1, %2}\n    %vmovd\\t{%1, %0|%0, %1}\n    punpckldq\\t{%2, %0|%0, %2}\n    movd\\t{%1, %0|%0, %1}\"\n-  [(set_attr \"isa\" \"noavx,avx,noavx,avx,*,*,*\")\n-   (set_attr \"type\" \"sselog,sselog,sselog,sselog,ssemov,mmxcvt,mmxmov\")\n-   (set_attr \"prefix_extra\" \"1,1,*,*,*,*,*\")\n-   (set_attr \"length_immediate\" \"1,1,*,*,*,*,*\")\n-   (set_attr \"prefix\" \"orig,vex,orig,vex,maybe_vex,orig,orig\")\n-   (set_attr \"mode\" \"TI,TI,TI,TI,TI,DI,DI\")])\n+  [(set_attr \"isa\" \"noavx,noavx,avx,noavx,noavx,avx,*,*,*\")\n+   (set_attr \"type\" \"sselog,sselog,sselog,sselog,sselog,sselog,ssemov,mmxcvt,mmxmov\")\n+   (set_attr \"prefix_extra\" \"1,1,1,*,*,*,*,*,*\")\n+   (set_attr \"length_immediate\" \"1,1,1,*,*,*,*,*,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex,orig,orig,vex,maybe_vex,orig,orig\")\n+   (set_attr \"mode\" \"TI,TI,TI,TI,TI,TI,TI,DI,DI\")])\n \n ;; ??? In theory we can match memory for the MMX alternative, but allowing\n ;; nonimmediate_operand for operand 2 and *not* allowing memory for the SSE\n@@ -12900,14 +12916,15 @@\n ;; movd instead of movq is required to handle broken assemblers.\n (define_insn \"vec_concatv2di\"\n   [(set (match_operand:V2DI 0 \"register_operand\"\n-\t  \"=x,x ,Yi,x ,!x,x,x,x,x,x\")\n+\t  \"=Yr,*x,x ,Yi,x ,!x,x,x,x,x,x\")\n \t(vec_concat:V2DI\n \t  (match_operand:DI 1 \"nonimmediate_operand\"\n-\t  \" 0,x ,r ,xm,*y,0,x,0,0,x\")\n+\t  \"  0, 0,x ,r ,xm,*y,0,x,0,0,x\")\n \t  (match_operand:DI 2 \"vector_move_operand\"\n-\t  \"rm,rm,C ,C ,C ,x,x,x,m,m\")))]\n+\t  \"*rm,rm,rm,C ,C ,C ,x,x,x,m,m\")))]\n   \"TARGET_SSE\"\n   \"@\n+   pinsrq\\t{$1, %2, %0|%0, %2, 1}\n    pinsrq\\t{$1, %2, %0|%0, %2, 1}\n    vpinsrq\\t{$1, %2, %1, %0|%0, %1, %2, 1}\n    * return HAVE_AS_IX86_INTERUNIT_MOVQ ? \\\"%vmovq\\t{%1, %0|%0, %1}\\\" : \\\"%vmovd\\t{%1, %0|%0, %1}\\\";\n@@ -12918,17 +12935,17 @@\n    movlhps\\t{%2, %0|%0, %2}\n    movhps\\t{%2, %0|%0, %2}\n    vmovhps\\t{%2, %1, %0|%0, %1, %2}\"\n-  [(set_attr \"isa\" \"x64_sse4_noavx,x64_avx,x64,sse2,sse2,sse2_noavx,avx,noavx,noavx,avx\")\n+  [(set_attr \"isa\" \"x64_sse4_noavx,x64_sse4_noavx,x64_avx,x64,sse2,sse2,sse2_noavx,avx,noavx,noavx,avx\")\n    (set (attr \"type\")\n      (if_then_else\n-       (eq_attr \"alternative\" \"0,1,5,6\")\n+       (eq_attr \"alternative\" \"0,1,2,6,7\")\n        (const_string \"sselog\")\n        (const_string \"ssemov\")))\n-   (set_attr \"prefix_rex\" \"1,1,1,*,*,*,*,*,*,*\")\n-   (set_attr \"prefix_extra\" \"1,1,*,*,*,*,*,*,*,*\")\n-   (set_attr \"length_immediate\" \"1,1,*,*,*,*,*,*,*,*\")\n-   (set_attr \"prefix\" \"orig,vex,maybe_vex,maybe_vex,orig,orig,vex,orig,orig,vex\")\n-   (set_attr \"mode\" \"TI,TI,TI,TI,TI,TI,TI,V4SF,V2SF,V2SF\")])\n+   (set_attr \"prefix_rex\" \"1,1,1,1,*,*,*,*,*,*,*\")\n+   (set_attr \"prefix_extra\" \"1,1,1,*,*,*,*,*,*,*,*\")\n+   (set_attr \"length_immediate\" \"1,1,1,*,*,*,*,*,*,*,*\")\n+   (set_attr \"prefix\" \"orig,orig,vex,maybe_vex,maybe_vex,orig,orig,vex,orig,orig,vex\")\n+   (set_attr \"mode\" \"TI,TI,TI,TI,TI,TI,TI,TI,V4SF,V2SF,V2SF\")])\n \n (define_expand \"vec_unpacks_lo_<mode>\"\n   [(match_operand:<sseunpackmode> 0 \"register_operand\")\n@@ -13968,148 +13985,155 @@\n   [(V8SF \"255\") (V4SF \"15\") (V4DF \"15\") (V2DF \"3\")])\n \n (define_insn \"<sse4_1>_blend<ssemodesuffix><avxsizesuffix>\"\n-  [(set (match_operand:VF_128_256 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x,x\")\n \t(vec_merge:VF_128_256\n-\t  (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"xm,xm\")\n-\t  (match_operand:VF_128_256 1 \"register_operand\" \"0,x\")\n+\t  (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")\n+\t  (match_operand:VF_128_256 1 \"register_operand\" \"0,0,x\")\n \t  (match_operand:SI 3 \"const_0_to_<blendbits>_operand\")))]\n   \"TARGET_SSE4_1\"\n   \"@\n+   blend<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n    blend<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n    vblend<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix_data16\" \"1,1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sse4_1>_blendv<ssemodesuffix><avxsizesuffix>\"\n-  [(set (match_operand:VF_128_256 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:VF_128_256\n-\t  [(match_operand:VF_128_256 1 \"register_operand\" \"0,x\")\n-\t   (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"xm,xm\")\n-\t   (match_operand:VF_128_256 3 \"register_operand\" \"Yz,x\")]\n+\t  [(match_operand:VF_128_256 1 \"register_operand\" \"0,0,x\")\n+\t   (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")\n+\t   (match_operand:VF_128_256 3 \"register_operand\" \"Yz,Yz,x\")]\n \t  UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n   \"@\n+   blendv<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n    blendv<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n    vblendv<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix_data16\" \"1,1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"btver2_decode\" \"vector,vector\") \n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"btver2_decode\" \"vector,vector,vector\") \n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn \"<sse4_1>_dp<ssemodesuffix><avxsizesuffix>\"\n-  [(set (match_operand:VF_128_256 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:VF_128_256\n-\t  [(match_operand:VF_128_256 1 \"nonimmediate_operand\" \"%0,x\")\n-\t   (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"xm,xm\")\n-\t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n\")]\n+\t  [(match_operand:VF_128_256 1 \"nonimmediate_operand\" \"%0,0,x\")\n+\t   (match_operand:VF_128_256 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")\n+\t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n,n\")]\n \t  UNSPEC_DP))]\n   \"TARGET_SSE4_1\"\n   \"@\n+   dp<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n    dp<ssemodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n    vdp<ssemodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemul\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix_data16\" \"1,1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"btver2_decode\" \"vector,vector\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"btver2_decode\" \"vector,vector,vector\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n ;; Mode attribute used by `vmovntdqa' pattern\n (define_mode_attr vi8_sse4_1_avx2_avx512\n    [(V2DI \"sse4_1\") (V4DI \"avx2\") (V8DI \"avx512f\")])\n \n (define_insn \"<vi8_sse4_1_avx2_avx512>_movntdqa\"\n-  [(set (match_operand:VI8_AVX2_AVX512F 0 \"register_operand\" \"=x, v\")\n-\t(unspec:VI8_AVX2_AVX512F [(match_operand:VI8_AVX2_AVX512F 1 \"memory_operand\" \"m, m\")]\n+  [(set (match_operand:VI8_AVX2_AVX512F 0 \"register_operand\" \"=Yr,*x, v\")\n+\t(unspec:VI8_AVX2_AVX512F [(match_operand:VI8_AVX2_AVX512F 1 \"memory_operand\" \"m, m, m\")]\n \t\t     UNSPEC_MOVNTDQA))]\n   \"TARGET_SSE4_1\"\n   \"%vmovntdqa\\t{%1, %0|%0, %1}\"\n   [(set_attr \"type\" \"ssemov\")\n-   (set_attr \"prefix_extra\" \"1, *\")\n-   (set_attr \"prefix\" \"maybe_vex, evex\")\n+   (set_attr \"prefix_extra\" \"1,1,*\")\n+   (set_attr \"prefix\" \"maybe_vex,maybe_vex,evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<sse4_1_avx2>_mpsadbw\"\n-  [(set (match_operand:VI1_AVX2 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:VI1_AVX2 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:VI1_AVX2\n-\t  [(match_operand:VI1_AVX2 1 \"register_operand\" \"0,x\")\n-\t   (match_operand:VI1_AVX2 2 \"nonimmediate_operand\" \"xm,xm\")\n-\t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n\")]\n+\t  [(match_operand:VI1_AVX2 1 \"register_operand\" \"0,0,x\")\n+\t   (match_operand:VI1_AVX2 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")\n+\t   (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n,n\")]\n \t  UNSPEC_MPSADBW))]\n   \"TARGET_SSE4_1\"\n   \"@\n+   mpsadbw\\t{%3, %2, %0|%0, %2, %3}\n    mpsadbw\\t{%3, %2, %0|%0, %2, %3}\n    vmpsadbw\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"sselog1\")\n    (set_attr \"length_immediate\" \"1\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"btver2_decode\" \"vector,vector\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"btver2_decode\" \"vector,vector,vector\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<sse4_1_avx2>_packusdw<mask_name>\"\n-  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=x,v\")\n+  [(set (match_operand:VI2_AVX2 0 \"register_operand\" \"=Yr,*x,v\")\n \t(vec_concat:VI2_AVX2\n \t  (us_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,v\"))\n+\t    (match_operand:<sseunpackmode> 1 \"register_operand\" \"0,0,v\"))\n \t  (us_truncate:<ssehalfvecmode>\n-\t    (match_operand:<sseunpackmode> 2 \"nonimmediate_operand\" \"xm,vm\"))))]\n+\t    (match_operand:<sseunpackmode> 2 \"nonimmediate_operand\" \"Yrm,*xm,vm\"))))]\n   \"TARGET_SSE4_1 && <mask_mode512bit_condition> && <mask_avx512bw_condition>\"\n   \"@\n+   packusdw\\t{%2, %0|%0, %2}\n    packusdw\\t{%2, %0|%0, %2}\n    vpackusdw\\t{%2, %1, %0<mask_operand3>|%0<mask_operand3>, %1, %2}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,maybe_evex\")\n+   (set_attr \"prefix\" \"orig,orig,maybe_evex\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"<sse4_1_avx2>_pblendvb\"\n-  [(set (match_operand:VI1_AVX2 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:VI1_AVX2 0 \"register_operand\" \"=Yr,*x,x\")\n \t(unspec:VI1_AVX2\n-\t  [(match_operand:VI1_AVX2 1 \"register_operand\"  \"0,x\")\n-\t   (match_operand:VI1_AVX2 2 \"nonimmediate_operand\" \"xm,xm\")\n-\t   (match_operand:VI1_AVX2 3 \"register_operand\" \"Yz,x\")]\n+\t  [(match_operand:VI1_AVX2 1 \"register_operand\"  \"0,0,x\")\n+\t   (match_operand:VI1_AVX2 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")\n+\t   (match_operand:VI1_AVX2 3 \"register_operand\" \"Yz,Yz,x\")]\n \t  UNSPEC_BLENDV))]\n   \"TARGET_SSE4_1\"\n   \"@\n+   pblendvb\\t{%3, %2, %0|%0, %2, %3}\n    pblendvb\\t{%3, %2, %0|%0, %2, %3}\n    vpblendvb\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"length_immediate\" \"*,1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n-   (set_attr \"btver2_decode\" \"vector,vector\")\n+   (set_attr \"length_immediate\" \"*,*,1\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n+   (set_attr \"btver2_decode\" \"vector,vector,vector\")\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"sse4_1_pblendw\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x,x\")\n \t(vec_merge:V8HI\n-\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"xm,xm\")\n-\t  (match_operand:V8HI 1 \"register_operand\" \"0,x\")\n-\t  (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n\")))]\n+\t  (match_operand:V8HI 2 \"nonimmediate_operand\" \"Yrm,*xm,xm\")\n+\t  (match_operand:V8HI 1 \"register_operand\" \"0,0,x\")\n+\t  (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n,n\")))]\n   \"TARGET_SSE4_1\"\n   \"@\n+   pblendw\\t{%3, %2, %0|%0, %2, %3}\n    pblendw\\t{%3, %2, %0|%0, %2, %3}\n    vpblendw\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"TI\")])\n \n ;; The builtin uses an 8-bit immediate.  Expand that.\n@@ -14157,8 +14181,8 @@\n    (set_attr \"mode\" \"<sseinsnmode>\")])\n \n (define_insn \"sse4_1_phminposuw\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=x\")\n-\t(unspec:V8HI [(match_operand:V8HI 1 \"nonimmediate_operand\" \"xm\")]\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*x\")\n+\t(unspec:V8HI [(match_operand:V8HI 1 \"nonimmediate_operand\" \"Yrm,*xm\")]\n \t\t     UNSPEC_PHMINPOSUW))]\n   \"TARGET_SSE4_1\"\n   \"%vphminposuw\\t{%1, %0|%0, %1}\"\n@@ -14190,10 +14214,10 @@\n    (set_attr \"mode\" \"XI\")])\n \n (define_insn \"sse4_1_<code>v8qiv8hi2<mask_name>\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n+  [(set (match_operand:V8HI 0 \"register_operand\" \"=Yr,*v\")\n \t(any_extend:V8HI\n \t  (vec_select:V8QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"Yrm,*vm\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)\n \t\t       (const_int 4) (const_int 5)\n@@ -14233,10 +14257,10 @@\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"sse4_1_<code>v4qiv4si2<mask_name>\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*v\")\n \t(any_extend:V4SI\n \t  (vec_select:V4QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"Yrm,*vm\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n@@ -14269,10 +14293,10 @@\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"sse4_1_<code>v4hiv4si2<mask_name>\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n+  [(set (match_operand:V4SI 0 \"register_operand\" \"=Yr,*v\")\n \t(any_extend:V4SI\n \t  (vec_select:V4HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"Yrm,*vm\")\n \t    (parallel [(const_int 0) (const_int 1)\n \t\t       (const_int 2) (const_int 3)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n@@ -14313,10 +14337,10 @@\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"sse4_1_<code>v2qiv2di2<mask_name>\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*v\")\n \t(any_extend:V2DI\n \t  (vec_select:V2QI\n-\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V16QI 1 \"nonimmediate_operand\" \"Yrm,*vm\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n   \"%vpmov<extsuffix>bq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %w1}\"\n@@ -14351,10 +14375,10 @@\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"sse4_1_<code>v2hiv2di2<mask_name>\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*v\")\n \t(any_extend:V2DI\n \t  (vec_select:V2HI\n-\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V8HI 1 \"nonimmediate_operand\" \"Yrm,*vm\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n   \"%vpmov<extsuffix>wq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %k1}\"\n@@ -14386,10 +14410,10 @@\n    (set_attr \"mode\" \"OI\")])\n \n (define_insn \"sse4_1_<code>v2siv2di2<mask_name>\"\n-  [(set (match_operand:V2DI 0 \"register_operand\" \"=v\")\n+  [(set (match_operand:V2DI 0 \"register_operand\" \"=Yr,*v\")\n \t(any_extend:V2DI\n \t  (vec_select:V2SI\n-\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"vm\")\n+\t    (match_operand:V4SI 1 \"nonimmediate_operand\" \"Yrm,*vm\")\n \t    (parallel [(const_int 0) (const_int 1)]))))]\n   \"TARGET_SSE4_1 && <mask_avx512vl_condition>\"\n   \"%vpmov<extsuffix>dq\\t{%1, %0<mask_operand2>|%0<mask_operand2>, %q1}\"\n@@ -14430,8 +14454,8 @@\n \n (define_insn \"sse4_1_ptest\"\n   [(set (reg:CC FLAGS_REG)\n-\t(unspec:CC [(match_operand:V2DI 0 \"register_operand\" \"x\")\n-\t\t    (match_operand:V2DI 1 \"nonimmediate_operand\" \"xm\")]\n+\t(unspec:CC [(match_operand:V2DI 0 \"register_operand\" \"Yr,*x\")\n+\t\t    (match_operand:V2DI 1 \"nonimmediate_operand\" \"Yrm,*xm\")]\n \t\t   UNSPEC_PTEST))]\n   \"TARGET_SSE4_1\"\n   \"%vptest\\t{%1, %0|%0, %1}\"\n@@ -14441,10 +14465,10 @@\n    (set_attr \"mode\" \"TI\")])\n \n (define_insn \"<sse4_1>_round<ssemodesuffix><avxsizesuffix>\"\n-  [(set (match_operand:VF_128_256 0 \"register_operand\" \"=x\")\n+  [(set (match_operand:VF_128_256 0 \"register_operand\" \"=Yr,*x\")\n \t(unspec:VF_128_256\n-\t  [(match_operand:VF_128_256 1 \"nonimmediate_operand\" \"xm\")\n-\t   (match_operand:SI 2 \"const_0_to_15_operand\" \"n\")]\n+\t  [(match_operand:VF_128_256 1 \"nonimmediate_operand\" \"Yrm,*xm\")\n+\t   (match_operand:SI 2 \"const_0_to_15_operand\" \"n,n\")]\n \t  UNSPEC_ROUND))]\n   \"TARGET_ROUND\"\n   \"%vround<ssemodesuffix>\\t{%2, %1, %0|%0, %1, %2}\"\n@@ -14524,24 +14548,25 @@\n })\n \n (define_insn \"sse4_1_round<ssescalarmodesuffix>\"\n-  [(set (match_operand:VF_128 0 \"register_operand\" \"=x,x\")\n+  [(set (match_operand:VF_128 0 \"register_operand\" \"=Yr,*x,x\")\n \t(vec_merge:VF_128\n \t  (unspec:VF_128\n-\t    [(match_operand:VF_128 2 \"register_operand\" \"x,x\")\n-\t     (match_operand:SI 3 \"const_0_to_15_operand\" \"n,n\")]\n+\t    [(match_operand:VF_128 2 \"register_operand\" \"Yr,*x,x\")\n+\t     (match_operand:SI 3 \"const_0_to_15_operand\" \"n,n,n\")]\n \t    UNSPEC_ROUND)\n-\t  (match_operand:VF_128 1 \"register_operand\" \"0,x\")\n+\t  (match_operand:VF_128 1 \"register_operand\" \"0,0,x\")\n \t  (const_int 1)))]\n   \"TARGET_ROUND\"\n   \"@\n+   round<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n    round<ssescalarmodesuffix>\\t{%3, %2, %0|%0, %2, %3}\n    vround<ssescalarmodesuffix>\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n-  [(set_attr \"isa\" \"noavx,avx\")\n+  [(set_attr \"isa\" \"noavx,noavx,avx\")\n    (set_attr \"type\" \"ssecvt\")\n    (set_attr \"length_immediate\" \"1\")\n-   (set_attr \"prefix_data16\" \"1,*\")\n+   (set_attr \"prefix_data16\" \"1,1,*\")\n    (set_attr \"prefix_extra\" \"1\")\n-   (set_attr \"prefix\" \"orig,vex\")\n+   (set_attr \"prefix\" \"orig,orig,vex\")\n    (set_attr \"mode\" \"<MODE>\")])\n \n (define_expand \"round<mode>2\""}, {"sha": "d4ce519c3d657801adcb893345b835fe8a54f9c6", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=45392c76508048665ea5ad3269b59894724d5cb5", "patch": "@@ -63,6 +63,7 @@\n (define_subst_attr \"mask_prefix\" \"mask\" \"vex\" \"evex\")\n (define_subst_attr \"mask_prefix2\" \"mask\" \"maybe_vex\" \"evex\")\n (define_subst_attr \"mask_prefix3\" \"mask\" \"orig,vex\" \"evex\")\n+(define_subst_attr \"mask_prefix4\" \"mask\" \"orig,orig,vex\" \"evex\")\n (define_subst_attr \"mask_expand_op3\" \"mask\" \"3\" \"5\")\n \n (define_subst \"mask\""}, {"sha": "b5c6e4f016891f35e6e51f7f9e987af020c861d1", "filename": "gcc/config/i386/x86-tune.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Fconfig%2Fi386%2Fx86-tune.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fx86-tune.def?ref=45392c76508048665ea5ad3269b59894724d5cb5", "patch": "@@ -395,6 +395,10 @@ DEF_TUNE (X86_TUNE_SLOW_PSHUFB, \"slow_pshufb\",\n DEF_TUNE (X86_TUNE_VECTOR_PARALLEL_EXECUTION, \"vec_parallel\",\n           m_NEHALEM | m_SANDYBRIDGE | m_HASWELL)\n \n+/* X86_TUNE_AVOID_4BYTE_PREFIXES: Avoid instructions requiring 4+ bytes of prefixes.  */\n+DEF_TUNE (X86_TUNE_AVOID_4BYTE_PREFIXES, \"avoid_4byte_prefixes\",\n+          m_SILVERMONT | m_INTEL)\n+\n /*****************************************************************************/\n /* AVX instruction selection tuning (some of SSE flags affects AVX, too)     */\n /*****************************************************************************/"}, {"sha": "b0d17867c61005cdab5a11c6cfc0c471095137d6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=45392c76508048665ea5ad3269b59894724d5cb5", "patch": "@@ -1,3 +1,8 @@\n+2014-12-03  Ilya Enkovich  <ilya.enkovich@intel.com>\n+\n+\t* gcc.target/i386/sse2-init-v2di-2.c: Adjust to changed\n+\tvec_concatv2di template.\n+\n 2014-12-03  Segher Boessenkool  <segher.kernel.crashing.org>\n \n \tPR rtl-optimization/52714"}, {"sha": "b347a4ab27b424476859d401ec95b7e7e0792c7f", "filename": "gcc/testsuite/gcc.target/i386/sse2-init-v2di-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/45392c76508048665ea5ad3269b59894724d5cb5/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse2-init-v2di-2.c?ref=45392c76508048665ea5ad3269b59894724d5cb5", "patch": "@@ -10,4 +10,4 @@ test (long long b)\n   return _mm_cvtsi64_si128 (b); \n }\n \n-/* { dg-final { scan-assembler-times \"vec_concatv2di/3\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vec_concatv2di/4\" 1 } } */"}]}