{"sha": "734508eae57528457d34df6762c38ded3843bfa5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM0NTA4ZWFlNTc1Mjg0NTdkMzRkZjY3NjJjMzhkZWQzODQzYmZhNQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-12-12T21:23:04Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-12-12T21:23:04Z"}, "message": "Fix for ia64-linux glibc miscompilation of nan tests.\n\n\t* rtlanal.c (may_trap_p): Check operand modes of LE, LT, GE, and GT.\n\nFrom-SVN: r38209", "tree": {"sha": "1c83248ee4b0f3902f9acfb00de3cf4189a1bc8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1c83248ee4b0f3902f9acfb00de3cf4189a1bc8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/734508eae57528457d34df6762c38ded3843bfa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/734508eae57528457d34df6762c38ded3843bfa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/734508eae57528457d34df6762c38ded3843bfa5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/734508eae57528457d34df6762c38ded3843bfa5/comments", "author": null, "committer": null, "parents": [{"sha": "f2beb7ef551e6d8560f95a1ff2772720716b1697", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f2beb7ef551e6d8560f95a1ff2772720716b1697", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f2beb7ef551e6d8560f95a1ff2772720716b1697"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "073f37c438c8ab683351f3571a763165c85f465e", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/734508eae57528457d34df6762c38ded3843bfa5/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/734508eae57528457d34df6762c38ded3843bfa5/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=734508eae57528457d34df6762c38ded3843bfa5", "patch": "@@ -1947,8 +1947,16 @@ may_trap_p (x)\n \t certainly may trap.  */\n       return 1;\n \n+    case GE:\n+    case GT:\n+    case LE:\n+    case LT:\n     case COMPARE:\n-      /* Any floating comparison may trap.  */\n+      /* Some floating point comparisons may trap.  */\n+      /* ??? There is no machine independent way to check for tests that trap\n+\t when COMPARE is used, though many targets do make this distinction.\n+\t For instance, sparc uses CCFPE for compares which generate exceptions\n+\t and CCFP for compares which do not generate exceptions.  */\n       if (GET_MODE_CLASS (GET_MODE (x)) == MODE_FLOAT)\n \treturn 1;\n       /* But often the compare has some CC mode, so check operand"}]}