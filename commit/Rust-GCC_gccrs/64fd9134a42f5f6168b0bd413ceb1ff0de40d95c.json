{"sha": "64fd9134a42f5f6168b0bd413ceb1ff0de40d95c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjRmZDkxMzRhNDJmNWY2MTY4YjBiZDQxM2NlYjFmZjBkZTQwZDk1Yw==", "commit": {"author": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-05-07T06:36:49Z"}, "committer": {"name": "Charles Hannum", "email": "mycroft@gnu.org", "date": "1992-05-07T06:36:49Z"}, "message": "entered into RCS\n\nFrom-SVN: r928", "tree": {"sha": "f9660e02a6dacbe9a6dd5fd566454bc02ca24019", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f9660e02a6dacbe9a6dd5fd566454bc02ca24019"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/64fd9134a42f5f6168b0bd413ceb1ff0de40d95c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64fd9134a42f5f6168b0bd413ceb1ff0de40d95c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64fd9134a42f5f6168b0bd413ceb1ff0de40d95c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64fd9134a42f5f6168b0bd413ceb1ff0de40d95c/comments", "author": null, "committer": null, "parents": [{"sha": "73e2ea18f120d683cb0fe143704ada536a8546f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73e2ea18f120d683cb0fe143704ada536a8546f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73e2ea18f120d683cb0fe143704ada536a8546f6"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "d00d88e6623a04b348e959cd0e8adcde1fa6f396", "filename": "gcc/make-gcc.com", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64fd9134a42f5f6168b0bd413ceb1ff0de40d95c/gcc%2Fmake-gcc.com", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64fd9134a42f5f6168b0bd413ceb1ff0de40d95c/gcc%2Fmake-gcc.com", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmake-gcc.com?ref=64fd9134a42f5f6168b0bd413ceb1ff0de40d95c", "patch": "@@ -7,7 +7,7 @@ $set default 'f$parse(flnm,,,\"DEVICE\")''f$parse(flnm,,,\"DIRECTORY\")'\n $!\n $set symbol/scope=(nolocal,noglobal)\n $!\n-$! First, build the preprocesor.\n+$! First, build the preprocessor.\n $!\n $ @make-cccp\n $!"}, {"sha": "a1a02cd00e9916555e59d9da45915fcc0eb47114", "filename": "gcc/mips-tdump.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/64fd9134a42f5f6168b0bd413ceb1ff0de40d95c/gcc%2Fmips-tdump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/64fd9134a42f5f6168b0bd413ceb1ff0de40d95c/gcc%2Fmips-tdump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmips-tdump.c?ref=64fd9134a42f5f6168b0bd413ceb1ff0de40d95c", "patch": "@@ -60,7 +60,7 @@ typedef char *CPTR_T;\n #define ptrdiff_t\tint\n \n \f\n-/* Redefination of of storage classes as an enumeration for better\n+/* Redefinition of of storage classes as an enumeration for better\n    debugging.  */\n \n #ifndef stStaParam\n@@ -108,7 +108,7 @@ typedef enum st {\n   st_Local\t= stLocal,\t/* local variable */\n   st_Label\t= stLabel,\t/* label */\n   st_Proc\t= stProc,\t/*     \"      \"\t Procedure */\n-  st_Block\t= stBlock,\t/* beginnning of block */\n+  st_Block\t= stBlock,\t/* beginning of block */\n   st_End\t= stEnd,\t/* end (of anything) */\n   st_Member\t= stMember,\t/* member (of anything\t- struct/union/enum */\n   st_Typedef\t= stTypedef,\t/* type definition */\n@@ -121,7 +121,7 @@ typedef enum st {\n   st_Str\t= stStr,\t/* string */\n   st_Number\t= stNumber,\t/* pure number (ie. 4 NOR 2+2) */\n   st_Expr\t= stExpr,\t/* 2+2 vs. 4 */\n-  st_Type\t= stType,\t/* post-coersion SER */\n+  st_Type\t= stType,\t/* post-coercion SER */\n   st_Max\t= stMax\t\t/* max type+1 */\n } st_t;\n \n@@ -221,7 +221,7 @@ EXTR\t*e_symbols;\t\t/* external symbols */\n LINER\t*lines;\t\t\t/* line numbers */\n DNR\t*dense_nums;\t\t/* dense numbers */\n OPTR\t*opt_symbols;\t\t/* optimization symbols */\n-AUXU\t*aux_symbols;\t\t/* Auxilary symbols */\n+AUXU\t*aux_symbols;\t\t/* Auxiliary symbols */\n char\t*aux_used;\t\t/* map of which aux syms are used */\n FDR\t*file_desc;\t\t/* file tables */\n ulong\t*rfile_desc;\t\t/* relative file tables */\n@@ -622,7 +622,7 @@ type_to_string (aux_ptr, index)\n     {\n       /*\n        * Snarf up any array bounds in the correct order.  Arrays\n-       * store 5 succesive words in the aux. table:\n+       * store 5 successive words in the aux. table:\n        *\tword 0\tRNDXR to type of the bounds (ie, int)\n        *\tword 1\tCurrent file descriptor index\n        *\tword 2\tlow bound\n@@ -808,7 +808,7 @@ print_sym_hdr (sym_ptr)\n   printf(\"    %-*s %11ld %11d %11d\\n\", width, \"Optimization Symbols\",\n \t sym_ptr->cbOptOffset, sym_ptr->ioptMax, sym_ptr->ioptMax * sizeof (OPTR));\n \n-  printf(\"    %-*s %11ld %11d %11d\\n\", width, \"Auxilary Symbols\",\n+  printf(\"    %-*s %11ld %11d %11d\\n\", width, \"Auxiliary Symbols\",\n \t sym_ptr->cbAuxOffset, sym_ptr->iauxMax, sym_ptr->iauxMax * sizeof (AUXU));\n \n   printf(\"    %-*s %11ld %11d %11d\\n\", width, \"Local Strings\",\n@@ -1344,7 +1344,7 @@ read_tfile __proto((void))\n   aux_symbols = (AUXU *) read_seek ((PTR_T)0,\n \t\t\t\t    sym_hdr.iauxMax * sizeof (AUXU),\n \t\t\t\t    sym_hdr.cbAuxOffset,\n-\t\t\t\t    \"Auxilary symbols\");\n+\t\t\t\t    \"Auxiliary symbols\");\n \n   if (sym_hdr.iauxMax > 0)\n     {"}]}