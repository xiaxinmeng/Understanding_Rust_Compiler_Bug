{"sha": "787ac95917a666b3d186e2d5afec07ee5b75c6df", "node_id": "C_kwDOANBUbNoAKDc4N2FjOTU5MTdhNjY2YjNkMTg2ZTJkNWFmZWMwN2VlNWI3NWM2ZGY", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-09-14T12:16:27Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-11-18T20:15:24Z"}, "message": "RISC-V: Optimize slli(.uw)? + addw + zext.w into sh[123]add + zext.w\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md: Handle corner-cases for combine\n\twhen chaining slli(.uw)? + addw\n\t* config/riscv/riscv-protos.h (riscv_shamt_matches_mask_p):\n\tDefine prototype.\n\t* config/riscv/riscv.cc (riscv_shamt_matches_mask_p):\n\tHelper for evaluating the relationship between two operands.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zba-shNadd-04.c: New test.", "tree": {"sha": "226dc225e6f03496f02c9783675e857eb0f0bb5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/226dc225e6f03496f02c9783675e857eb0f0bb5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/787ac95917a666b3d186e2d5afec07ee5b75c6df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/787ac95917a666b3d186e2d5afec07ee5b75c6df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/787ac95917a666b3d186e2d5afec07ee5b75c6df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/787ac95917a666b3d186e2d5afec07ee5b75c6df/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30c2d8df173a6f3ca145cda9f9e261616fca8467", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30c2d8df173a6f3ca145cda9f9e261616fca8467", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30c2d8df173a6f3ca145cda9f9e261616fca8467"}], "stats": {"total": 82, "additions": 82, "deletions": 0}, "files": [{"sha": "2f89fd6aee1b222019cafc177b3789d83e4ac77d", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/787ac95917a666b3d186e2d5afec07ee5b75c6df/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/787ac95917a666b3d186e2d5afec07ee5b75c6df/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=787ac95917a666b3d186e2d5afec07ee5b75c6df", "patch": "@@ -56,6 +56,55 @@\n    [(set (match_dup 5) (plus:DI (ashift:DI (match_dup 1) (match_dup 2)) (match_dup 3)))\n     (set (match_dup 0) (sign_extend:DI (div:SI (subreg:SI (match_dup 5) 0) (subreg:SI (match_dup 4) 0))))])\n \n+; Zba does not provide W-forms of sh[123]add(.uw)?, which leads to an\n+; interesting irregularity: we can generate a signed 32-bit result\n+; using slli(.uw)?+ addw, but a unsigned 32-bit result can be more\n+; efficiently be generated as sh[123]add+zext.w (the .uw can be\n+; dropped, if we zero-extend the output anyway).\n+;\n+; To enable this optimization, we split [ slli(.uw)?, addw, zext.w ]\n+; into [ sh[123]add, zext.w ] for use during combine.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(zero_extend:DI (plus:SI (ashift:SI (subreg:SI (match_operand:DI 1 \"register_operand\") 0)\n+\t\t\t\t\t\t       (match_operand:QI 2 \"imm123_operand\"))\n+\t\t\t\t (subreg:SI (match_operand:DI 3 \"register_operand\") 0))))]\n+  \"TARGET_64BIT && TARGET_ZBA\"\n+  [(set (match_dup 0) (plus:DI (ashift:DI (match_dup 1) (match_dup 2)) (match_dup 3)))\n+   (set (match_dup 0) (zero_extend:DI (subreg:SI (match_dup 0) 0)))])\n+\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(zero_extend:DI (plus:SI (subreg:SI (and:DI (ashift:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t\t\t\t\t       (match_operand:QI 2 \"imm123_operand\"))\n+\t\t\t\t\t\t    (match_operand:DI 3 \"consecutive_bits_operand\")) 0)\n+\t\t\t\t (subreg:SI (match_operand:DI 4 \"register_operand\") 0))))]\n+  \"TARGET_64BIT && TARGET_ZBA\n+   && riscv_shamt_matches_mask_p (INTVAL (operands[2]), INTVAL (operands[3]))\"\n+  [(set (match_dup 0) (plus:DI (ashift:DI (match_dup 1) (match_dup 2)) (match_dup 4)))\n+   (set (match_dup 0) (zero_extend:DI (subreg:SI (match_dup 0) 0)))])\n+\n+; Make sure that an andi followed by a sh[123]add remains a two instruction\n+; sequence--and is not torn apart into slli, slri, add.\n+(define_insn_and_split \"*andi_add.uw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(plus:DI (and:DI (ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t\t    (match_operand:QI 2 \"imm123_operand\" \"Ds3\"))\n+\t\t\t (match_operand:DI 3 \"consecutive_bits_operand\" \"\"))\n+\t\t (match_operand:DI 4 \"register_operand\" \"r\")))\n+   (clobber (match_scratch:DI 5 \"=&r\"))]\n+  \"TARGET_64BIT && TARGET_ZBA\n+   && riscv_shamt_matches_mask_p (INTVAL (operands[2]), INTVAL (operands[3]))\n+   && SMALL_OPERAND (INTVAL (operands[3]) >> INTVAL (operands[2]))\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 5) (and:DI (match_dup 1) (match_dup 3)))\n+   (set (match_dup 0) (plus:DI (ashift:DI (match_dup 5) (match_dup 2))\n+\t\t\t       (match_dup 4)))]\n+{\n+\toperands[3] = GEN_INT (INTVAL (operands[3]) >> INTVAL (operands[2]));\n+})\n+\n (define_insn \"*shNadduw\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI"}, {"sha": "2ec3af05aa4d78e5581b99c7bdb78b8db3b37066", "filename": "gcc/config/riscv/riscv-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/787ac95917a666b3d186e2d5afec07ee5b75c6df/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/787ac95917a666b3d186e2d5afec07ee5b75c6df/gcc%2Fconfig%2Friscv%2Friscv-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv-protos.h?ref=787ac95917a666b3d186e2d5afec07ee5b75c6df", "patch": "@@ -77,6 +77,7 @@ extern bool riscv_gpr_save_operation_p (rtx);\n extern void riscv_reinit (void);\n extern poly_uint64 riscv_regmode_natural_size (machine_mode);\n extern bool riscv_v_ext_vector_mode_p (machine_mode);\n+extern bool riscv_shamt_matches_mask_p (int, HOST_WIDE_INT);\n \n /* Routines implemented in riscv-c.cc.  */\n void riscv_cpu_cpp_builtins (cpp_reader *);"}, {"sha": "7ec4ce97e6cefb54dbaf43f14dbc59d75556d3ae", "filename": "gcc/config/riscv/riscv.cc", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/787ac95917a666b3d186e2d5afec07ee5b75c6df/gcc%2Fconfig%2Friscv%2Friscv.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/787ac95917a666b3d186e2d5afec07ee5b75c6df/gcc%2Fconfig%2Friscv%2Friscv.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.cc?ref=787ac95917a666b3d186e2d5afec07ee5b75c6df", "patch": "@@ -6772,6 +6772,15 @@ riscv_dwarf_poly_indeterminate_value (unsigned int i, unsigned int *factor,\n   return RISCV_DWARF_VLENB;\n }\n \n+/* Return true if a shift-amount matches the trailing cleared bits on\n+   a bitmask.  */\n+\n+bool\n+riscv_shamt_matches_mask_p (int shamt, HOST_WIDE_INT mask)\n+{\n+  return shamt == ctz_hwi (mask);\n+}\n+\n /* Initialize the GCC target structure.  */\n #undef TARGET_ASM_ALIGNED_HI_OP\n #define TARGET_ASM_ALIGNED_HI_OP \"\\t.half\\t\""}, {"sha": "abed1491039707da41e94cd3c1cda58dc98b6933", "filename": "gcc/testsuite/gcc.target/riscv/zba-shNadd-04.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/787ac95917a666b3d186e2d5afec07ee5b75c6df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-04.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/787ac95917a666b3d186e2d5afec07ee5b75c6df/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-04.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shNadd-04.c?ref=787ac95917a666b3d186e2d5afec07ee5b75c6df", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gc_zba -mabi=lp64\" } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-Og\" } } */\n+\n+long long sub1(unsigned long long a, unsigned long long b)\n+{\n+  b = (b << 32) >> 31;\n+  unsigned int x = a + b;\n+  return x;\n+}\n+\n+long long sub2(unsigned long long a, unsigned long long b)\n+{\n+  return (unsigned int)(a + (b << 1));\n+}\n+\n+long long sub3(unsigned long long a, unsigned long long b)\n+{\n+  return (a + (b << 1)) & ~0u;\n+}\n+\n+/* { dg-final { scan-assembler-times \"sh1add\" 3 } } */\n+/* { dg-final { scan-assembler-times \"zext.w\\t\" 3 } } */"}]}