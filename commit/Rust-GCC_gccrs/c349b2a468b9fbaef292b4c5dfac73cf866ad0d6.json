{"sha": "c349b2a468b9fbaef292b4c5dfac73cf866ad0d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzM0OWIyYTQ2OGI5ZmJhZWYyOTJiNGM1ZGZhYzczY2Y4NjZhZDBkNg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2003-05-12T12:45:25Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2003-05-12T12:45:25Z"}, "message": "com.c (ffecom_init_0): Define built-in functions for atan2, exp, floor, fmod, log and pow.\n\n\n\t* com.c (ffecom_init_0): Define built-in functions for atan2,\n\texp, floor, fmod, log and pow.\n\t(duplicate_decls): Preserve assembler name when redeclaring a\n\tbuilt-in.\n\t* com-rt.def: Implement using the built-in forms of the above\n\tfunctions rather than calling the standard C library directly.\n\tCorrect some of the run-time prototype \"codes\".\n\nFrom-SVN: r66714", "tree": {"sha": "53b86dbd19c676c34575a7621fbe81ff609d2567", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/53b86dbd19c676c34575a7621fbe81ff609d2567"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c349b2a468b9fbaef292b4c5dfac73cf866ad0d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c349b2a468b9fbaef292b4c5dfac73cf866ad0d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c349b2a468b9fbaef292b4c5dfac73cf866ad0d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c349b2a468b9fbaef292b4c5dfac73cf866ad0d6/comments", "author": null, "committer": null, "parents": [{"sha": "58e15542fc00d9d47324e657ae43d941b272f9a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e15542fc00d9d47324e657ae43d941b272f9a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58e15542fc00d9d47324e657ae43d941b272f9a1"}], "stats": {"total": 124, "additions": 92, "deletions": 32}, "files": [{"sha": "a57818ffca23e1d57efb7073c3fcdae173d47fef", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c349b2a468b9fbaef292b4c5dfac73cf866ad0d6/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c349b2a468b9fbaef292b4c5dfac73cf866ad0d6/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=c349b2a468b9fbaef292b4c5dfac73cf866ad0d6", "patch": "@@ -1,3 +1,13 @@\n+2003-05-12  Roger Sayle  <roger@eyesopen.com>\n+\n+\t* com.c (ffecom_init_0): Define built-in functions for atan2,\n+\texp, floor, fmod, log and pow.\n+\t(duplicate_decls): Preserve assembler name when redeclaring a\n+\tbuilt-in.\n+\t* com-rt.def: Implement using the built-in forms of the above\n+\tfunctions rather than calling the standard C library directly.\n+\tCorrect some of the run-time prototype \"codes\".\n+\n 2003-05-11  Toon Moene  <toon@moene.indiv.nluug.nl>\n \n \tPR fortran/10726"}, {"sha": "2ddc0fb4ff36569b8c0328094394337787afc98f", "filename": "gcc/f/com-rt.def", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c349b2a468b9fbaef292b4c5dfac73cf866ad0d6/gcc%2Ff%2Fcom-rt.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c349b2a468b9fbaef292b4c5dfac73cf866ad0d6/gcc%2Ff%2Fcom-rt.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom-rt.def?ref=c349b2a468b9fbaef292b4c5dfac73cf866ad0d6", "patch": "@@ -128,7 +128,7 @@ DEFGFRT (FFECOM_gfrtAMOD, \"r_mod\", FFECOM_rttypeREAL_F2C_, \"&f\", FALSE, FALSE, F\n DEFGFRT (FFECOM_gfrtANINT, \"r_nint\", FFECOM_rttypeREAL_F2C_, \"&f\", FALSE, FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtASIN, \"r_asin\", FFECOM_rttypeREAL_F2C_, \"&f\", FALSE, FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtATAN, \"r_atan\", FFECOM_rttypeREAL_F2C_, \"&f\", FALSE, FALSE, FALSE)\n-DEFGFRT (FFECOM_gfrtATAN2, \"r_atn2\", FFECOM_rttypeREAL_F2C_, \"&f\", FALSE, FALSE, FALSE)\n+DEFGFRT (FFECOM_gfrtATAN2, \"r_atn2\", FFECOM_rttypeREAL_F2C_, \"&f&f\", FALSE, FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtCABS, \"c_abs\", FFECOM_rttypeREAL_F2C_, \"&c\", FALSE, FALSE, FALSE)\n DEFGFRT (FFECOM_gfrtCCOS, \"c_cos\", FFECOM_rttypeCOMPLEX_F2C_, \"&c\", FALSE, TRUE, FALSE)\n DEFGFRT (FFECOM_gfrtCEXP, \"c_exp\", FFECOM_rttypeCOMPLEX_F2C_, \"&c\", FALSE, TRUE, FALSE)\n@@ -260,17 +260,17 @@ DEFGFRT (FFECOM_gfrtDIMAG, \"d_imag\", FFECOM_rttypeDOUBLE_, \"&e\", FALSE, FALSE, F\n DEFGFRT (FFECOM_gfrtL_ACOS, \"acos\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n DEFGFRT (FFECOM_gfrtL_ASIN, \"asin\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n DEFGFRT (FFECOM_gfrtL_ATAN, \"atan\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n-DEFGFRT (FFECOM_gfrtL_ATAN2, \"atan2\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n+DEFGFRT (FFECOM_gfrtL_ATAN2, \"__builtin_atan2\", FFECOM_rttypeDOUBLE_, \"dd\", FALSE, FALSE, TRUE)\n DEFGFRT (FFECOM_gfrtL_COS, \"__builtin_cos\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n DEFGFRT (FFECOM_gfrtL_COSH, \"cosh\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n DEFGFRT (FFECOM_gfrtL_ERF, \"erf\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n DEFGFRT (FFECOM_gfrtL_ERFC, \"erfc\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n-DEFGFRT (FFECOM_gfrtL_EXP, \"exp\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n-DEFGFRT (FFECOM_gfrtL_FLOOR, \"floor\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n-DEFGFRT (FFECOM_gfrtL_FMOD, \"fmod\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n-DEFGFRT (FFECOM_gfrtL_LOG, \"log\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n+DEFGFRT (FFECOM_gfrtL_EXP, \"__builtin_exp\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n+DEFGFRT (FFECOM_gfrtL_FLOOR, \"__builtin_floor\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n+DEFGFRT (FFECOM_gfrtL_FMOD, \"__builtin_fmod\", FFECOM_rttypeDOUBLE_, \"dd\", FALSE, FALSE, TRUE)\n+DEFGFRT (FFECOM_gfrtL_LOG, \"__builtin_log\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n DEFGFRT (FFECOM_gfrtL_LOG10, \"log10\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n-DEFGFRT (FFECOM_gfrtL_POW, \"pow\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n+DEFGFRT (FFECOM_gfrtL_POW, \"__builtin_pow\", FFECOM_rttypeDOUBLE_, \"dd\", FALSE, FALSE, TRUE)\n DEFGFRT (FFECOM_gfrtL_SIN, \"__builtin_sin\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n DEFGFRT (FFECOM_gfrtL_SINH, \"sinh\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)\n DEFGFRT (FFECOM_gfrtL_SQRT, \"__builtin_sqrt\", FFECOM_rttypeDOUBLE_, \"d\", FALSE, FALSE, TRUE)"}, {"sha": "bb093e3b20182d156d9c074c720ea217b5f014c4", "filename": "gcc/f/com.c", "status": "modified", "additions": 75, "deletions": 25, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c349b2a468b9fbaef292b4c5dfac73cf866ad0d6/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c349b2a468b9fbaef292b4c5dfac73cf866ad0d6/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=c349b2a468b9fbaef292b4c5dfac73cf866ad0d6", "patch": "@@ -11187,9 +11187,9 @@ ffecom_init_0 ()\n   tree field;\n   ffetype type;\n   ffetype base_type;\n-  tree double_ftype_double;\n-  tree float_ftype_float;\n-  tree ldouble_ftype_ldouble;\n+  tree double_ftype_double, double_ftype_double_double;\n+  tree float_ftype_float, float_ftype_float_float;\n+  tree ldouble_ftype_ldouble, ldouble_ftype_ldouble_ldouble;\n   tree ffecom_tree_ptr_to_fun_type_void;\n \n   /* This block of code comes from the now-obsolete cktyps.c.  It checks\n@@ -11322,18 +11322,21 @@ ffecom_init_0 ()\n \n   endlink = tree_cons (NULL_TREE, void_type_node, NULL_TREE);\n \n-  float_ftype_float\n-    = build_function_type (float_type_node,\n-\t\t\t   tree_cons (NULL_TREE, float_type_node, endlink));\n+  t = tree_cons (NULL_TREE, float_type_node, endlink);\n+  float_ftype_float = build_function_type (float_type_node, t);\n+  t = tree_cons (NULL_TREE, float_type_node, t);\n+  float_ftype_float_float = build_function_type (float_type_node, t);\n \n-  double_ftype_double\n-    = build_function_type (double_type_node,\n-\t\t\t   tree_cons (NULL_TREE, double_type_node, endlink));\n+  t = tree_cons (NULL_TREE, double_type_node, endlink);\n+  double_ftype_double = build_function_type (double_type_node, t);\n+  t = tree_cons (NULL_TREE, double_type_node, t);\n+  double_ftype_double_double = build_function_type (double_type_node, t);\n \n-  ldouble_ftype_ldouble\n-    = build_function_type (long_double_type_node,\n-\t\t\t   tree_cons (NULL_TREE, long_double_type_node,\n-\t\t\t\t      endlink));\n+  t = tree_cons (NULL_TREE, long_double_type_node, endlink);\n+  ldouble_ftype_ldouble = build_function_type (long_double_type_node, t);\n+  t = tree_cons (NULL_TREE, long_double_type_node, t);\n+  ldouble_ftype_ldouble_ldouble = build_function_type (long_double_type_node,\n+                                                       t);\n \n   for (i = 0; ((size_t) i) < ARRAY_SIZE (ffecom_tree_type); ++i)\n     for (j = 0; ((size_t) j) < ARRAY_SIZE (ffecom_tree_type[0]); ++j)\n@@ -11750,25 +11753,69 @@ ffecom_init_0 ()\n   ffecom_tree_blockdata_type\n     = build_function_type (void_type_node, NULL_TREE);\n \n-  builtin_function (\"__builtin_sqrtf\", float_ftype_float,\n-\t\t    BUILT_IN_SQRTF, BUILT_IN_NORMAL, \"sqrtf\", NULL_TREE);\n-  builtin_function (\"__builtin_sqrt\", double_ftype_double,\n-\t\t    BUILT_IN_SQRT, BUILT_IN_NORMAL, \"sqrt\", NULL_TREE);\n-  builtin_function (\"__builtin_sqrtl\", ldouble_ftype_ldouble,\n-\t\t    BUILT_IN_SQRTL, BUILT_IN_NORMAL, \"sqrtl\", NULL_TREE);\n-  builtin_function (\"__builtin_sinf\", float_ftype_float,\n-\t\t    BUILT_IN_SINF, BUILT_IN_NORMAL, \"sinf\", NULL_TREE);\n-  builtin_function (\"__builtin_sin\", double_ftype_double,\n-\t\t    BUILT_IN_SIN, BUILT_IN_NORMAL, \"sin\", NULL_TREE);\n-  builtin_function (\"__builtin_sinl\", ldouble_ftype_ldouble,\n-\t\t    BUILT_IN_SINL, BUILT_IN_NORMAL, \"sinl\", NULL_TREE);\n+  builtin_function (\"__builtin_atan2f\", float_ftype_float_float,\n+\t\t    BUILT_IN_ATAN2F, BUILT_IN_NORMAL, \"atan2f\", NULL_TREE);\n+  builtin_function (\"__builtin_atan2\", double_ftype_double_double,\n+\t\t    BUILT_IN_ATAN2, BUILT_IN_NORMAL, \"atan2\", NULL_TREE);\n+  builtin_function (\"__builtin_atan2l\", ldouble_ftype_ldouble_ldouble,\n+\t\t    BUILT_IN_ATAN2L, BUILT_IN_NORMAL, \"atan2l\", NULL_TREE);\n+\n   builtin_function (\"__builtin_cosf\", float_ftype_float,\n \t\t    BUILT_IN_COSF, BUILT_IN_NORMAL, \"cosf\", NULL_TREE);\n   builtin_function (\"__builtin_cos\", double_ftype_double,\n \t\t    BUILT_IN_COS, BUILT_IN_NORMAL, \"cos\", NULL_TREE);\n   builtin_function (\"__builtin_cosl\", ldouble_ftype_ldouble,\n \t\t    BUILT_IN_COSL, BUILT_IN_NORMAL, \"cosl\", NULL_TREE);\n \n+  builtin_function (\"__builtin_expf\", float_ftype_float,\n+\t\t    BUILT_IN_EXPF, BUILT_IN_NORMAL, \"expf\", NULL_TREE);\n+  builtin_function (\"__builtin_exp\", double_ftype_double,\n+\t\t    BUILT_IN_EXP, BUILT_IN_NORMAL, \"exp\", NULL_TREE);\n+  builtin_function (\"__builtin_expl\", ldouble_ftype_ldouble,\n+\t\t    BUILT_IN_EXPL, BUILT_IN_NORMAL, \"expl\", NULL_TREE);\n+\n+  builtin_function (\"__builtin_floorf\", float_ftype_float,\n+\t\t    BUILT_IN_FLOORF, BUILT_IN_NORMAL, \"floorf\", NULL_TREE);\n+  builtin_function (\"__builtin_floor\", double_ftype_double,\n+\t\t    BUILT_IN_FLOOR, BUILT_IN_NORMAL, \"floor\", NULL_TREE);\n+  builtin_function (\"__builtin_floorl\", ldouble_ftype_ldouble,\n+\t\t    BUILT_IN_FLOORL, BUILT_IN_NORMAL, \"floorl\", NULL_TREE);\n+\n+  builtin_function (\"__builtin_fmodf\", float_ftype_float_float,\n+\t\t    BUILT_IN_FMODF, BUILT_IN_NORMAL, \"fmodf\", NULL_TREE);\n+  builtin_function (\"__builtin_fmod\", double_ftype_double_double,\n+\t\t    BUILT_IN_FMOD, BUILT_IN_NORMAL, \"fmod\", NULL_TREE);\n+  builtin_function (\"__builtin_fmodl\", ldouble_ftype_ldouble_ldouble,\n+\t\t    BUILT_IN_FMODL, BUILT_IN_NORMAL, \"fmodl\", NULL_TREE);\n+\n+  builtin_function (\"__builtin_logf\", float_ftype_float,\n+\t\t    BUILT_IN_LOGF, BUILT_IN_NORMAL, \"logf\", NULL_TREE);\n+  builtin_function (\"__builtin_log\", double_ftype_double,\n+\t\t    BUILT_IN_LOG, BUILT_IN_NORMAL, \"log\", NULL_TREE);\n+  builtin_function (\"__builtin_logl\", ldouble_ftype_ldouble,\n+\t\t    BUILT_IN_LOGL, BUILT_IN_NORMAL, \"logl\", NULL_TREE);\n+\n+  builtin_function (\"__builtin_powf\", float_ftype_float_float,\n+\t\t    BUILT_IN_POWF, BUILT_IN_NORMAL, \"powf\", NULL_TREE);\n+  builtin_function (\"__builtin_pow\", double_ftype_double_double,\n+\t\t    BUILT_IN_POW, BUILT_IN_NORMAL, \"pow\", NULL_TREE);\n+  builtin_function (\"__builtin_powl\", ldouble_ftype_ldouble_ldouble,\n+\t\t    BUILT_IN_POWL, BUILT_IN_NORMAL, \"powl\", NULL_TREE);\n+\n+  builtin_function (\"__builtin_sinf\", float_ftype_float,\n+\t\t    BUILT_IN_SINF, BUILT_IN_NORMAL, \"sinf\", NULL_TREE);\n+  builtin_function (\"__builtin_sin\", double_ftype_double,\n+\t\t    BUILT_IN_SIN, BUILT_IN_NORMAL, \"sin\", NULL_TREE);\n+  builtin_function (\"__builtin_sinl\", ldouble_ftype_ldouble,\n+\t\t    BUILT_IN_SINL, BUILT_IN_NORMAL, \"sinl\", NULL_TREE);\n+\n+  builtin_function (\"__builtin_sqrtf\", float_ftype_float,\n+\t\t    BUILT_IN_SQRTF, BUILT_IN_NORMAL, \"sqrtf\", NULL_TREE);\n+  builtin_function (\"__builtin_sqrt\", double_ftype_double,\n+\t\t    BUILT_IN_SQRT, BUILT_IN_NORMAL, \"sqrt\", NULL_TREE);\n+  builtin_function (\"__builtin_sqrtl\", ldouble_ftype_ldouble,\n+\t\t    BUILT_IN_SQRTL, BUILT_IN_NORMAL, \"sqrtl\", NULL_TREE);\n+\n   pedantic_lvalues = FALSE;\n \n   ffecom_f2c_make_type_ (&ffecom_f2c_integer_type_node,\n@@ -13343,6 +13390,9 @@ duplicate_decls (tree newdecl, tree olddecl)\n       if (DECL_SECTION_NAME (newdecl) == NULL_TREE)\n \tDECL_SECTION_NAME (newdecl) = DECL_SECTION_NAME (olddecl);\n \n+      /* Copy the assembler name.  */\n+      COPY_DECL_ASSEMBLER_NAME (olddecl, newdecl);\n+\n       if (TREE_CODE (newdecl) == FUNCTION_DECL)\n \t{\n \t  DECL_STATIC_CONSTRUCTOR(newdecl) |= DECL_STATIC_CONSTRUCTOR(olddecl);"}]}