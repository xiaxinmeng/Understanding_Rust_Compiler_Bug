{"sha": "41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFhNTgxMTNmOGUyZDZiYzRiZDUyZTE2OGU3MDc5MDUzY2RhNWViOQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-07-30T14:32:24Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T14:32:24Z"}, "message": "exp_aggr.adb: Update comments.\n\n2014-07-30  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_aggr.adb: Update comments.\n\t* a-chtgbo.adb, a-chtgbo.ads, a-cbhase.adb, a-cbhase.ads: Minor\n\treformatting.\n\n2014-07-30  Robert Dewar  <dewar@adacore.com>\n\n\t* cstand.adb (New_Standard_Entity): New version takes name\n\tstring to call Make_Name.\n\t(Create_Standard): Use this routine to set name before setting other\n\tfields.\n\n2014-07-30  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_attr.adb (Expand_Attribute, case First): Rewrite simple\n\tentity reference.\n\t(Expand_Attribute, case Last): Ditto.\n\t* exp_ch3.adb (Constrain_Index): New calling sequence for\n\tProcess_Range_Expr_In_Decl.\n\t(Expand_N_Object_Declaration): Avoid setting Is_Known_Valid in one\n\tproblematical case.\n\t* sem_ch3.adb (Constrain_Index): New calling sequence for\n\tProcess_Range_Expr_In_Decl.\n\t(Set_Scalar_Range_For_Subtype): ditto.\n\t(Process_Range_Expr_In_Decl): Create constants to hold bounds for\n\tsubtype.\n\t* sem_ch3.ads (Process_Range_Expr_In_Decl): Add Subtyp parameter.\n\t* sem_eval.adb (Compile_Time_Compare): Make sure we use base\n\ttypes if we are not assuming no invalid values.\n\nFrom-SVN: r213286", "tree": {"sha": "b1cf07aef5bdb3dcf68a1d943d6495a81c0d1952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1cf07aef5bdb3dcf68a1d943d6495a81c0d1952"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/comments", "author": null, "committer": null, "parents": [{"sha": "2b4c962d787e092de9af83d2a3ca568ce3ca69bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b4c962d787e092de9af83d2a3ca568ce3ca69bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b4c962d787e092de9af83d2a3ca568ce3ca69bb"}], "stats": {"total": 329, "additions": 229, "deletions": 100}, "files": [{"sha": "fea05ae35f1ef424096249c0e1ac14b355a6b2d6", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "patch": "@@ -1,3 +1,34 @@\n+2014-07-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_aggr.adb: Update comments.\n+\t* a-chtgbo.adb, a-chtgbo.ads, a-cbhase.adb, a-cbhase.ads: Minor\n+\treformatting.\n+\n+2014-07-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* cstand.adb (New_Standard_Entity): New version takes name\n+\tstring to call Make_Name.\n+\t(Create_Standard): Use this routine to set name before setting other\n+\tfields.\n+\n+2014-07-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_attr.adb (Expand_Attribute, case First): Rewrite simple\n+\tentity reference.\n+\t(Expand_Attribute, case Last): Ditto.\n+\t* exp_ch3.adb (Constrain_Index): New calling sequence for\n+\tProcess_Range_Expr_In_Decl.\n+\t(Expand_N_Object_Declaration): Avoid setting Is_Known_Valid in one\n+\tproblematical case.\n+\t* sem_ch3.adb (Constrain_Index): New calling sequence for\n+\tProcess_Range_Expr_In_Decl.\n+\t(Set_Scalar_Range_For_Subtype): ditto.\n+\t(Process_Range_Expr_In_Decl): Create constants to hold bounds for\n+\tsubtype.\n+\t* sem_ch3.ads (Process_Range_Expr_In_Decl): Add Subtyp parameter.\n+\t* sem_eval.adb (Compile_Time_Compare): Make sure we use base\n+\ttypes if we are not assuming no invalid values.\n+\n 2014-07-30  Robert Dewar  <dewar@adacore.com>\n \n \t* clean.adb: Minor reformatting."}, {"sha": "dbf234bf3f2e3e1479b8066da5bb55b9c6e14df6", "filename": "gcc/ada/a-cbhase.adb", "status": "modified", "additions": 23, "deletions": 25, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fa-cbhase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fa-cbhase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhase.adb?ref=41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "patch": "@@ -1,4 +1,4 @@\n--------------------------------------------------------------------------------\n+------------------------------------------------------------------------------\n --                                                                          --\n --                         GNAT LIBRARY COMPONENTS                          --\n --                                                                          --\n@@ -762,8 +762,7 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n       Insert (Container, New_Item, Position, Inserted);\n \n       if not Inserted then\n-         raise Program_Error with\n-           \"attempt to insert element already in set\";\n+         raise Program_Error with \"attempt to insert element already in set\";\n       end if;\n    end Insert;\n \n@@ -1649,11 +1648,11 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n \n       package Key_Keys is\n          new Hash_Tables.Generic_Bounded_Keys\n-          (HT_Types  => HT_Types,\n-           Next      => Next,\n-           Set_Next  => Set_Next,\n-           Key_Type  => Key_Type,\n-           Hash      => Hash,\n+          (HT_Types        => HT_Types,\n+           Next            => Next,\n+           Set_Next        => Set_Next,\n+           Key_Type        => Key_Type,\n+           Hash            => Hash,\n            Equivalent_Keys => Equivalent_Key_Node);\n \n       ------------------------\n@@ -1786,7 +1785,7 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n             if Hash (Key (Element (Control.Old_Pos))) /= Control.Old_Hash\n             then\n                HT_Ops.Delete_Node_At_Index\n-                (Control.Container.all, Control.Index, Control.Old_Pos.Node);\n+                 (Control.Container.all, Control.Index, Control.Old_Pos.Node);\n                raise Program_Error with \"key not preserved in reference\";\n             end if;\n \n@@ -1865,15 +1864,14 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n \n          begin\n             return R : constant Reference_Type :=\n-                (Element  => N.Element'Unrestricted_Access,\n-                  Control  =>\n-                    (Controlled with\n-                       Container'Unrestricted_Access,\n-                       Index  =>\n-                         Key_Keys.Index (Container, Key (Position)),\n-                       Old_Pos => Position,\n-                       Old_Hash => Hash (Key (Position))))\n-            do\n+              (Element  => N.Element'Unrestricted_Access,\n+                Control =>\n+                  (Controlled with\n+                     Container'Unrestricted_Access,\n+                     Index    => Key_Keys.Index (Container, Key (Position)),\n+                     Old_Pos  => Position,\n+                     Old_Hash => Hash (Key (Position))))\n+         do\n                B := B + 1;\n                L := L + 1;\n             end return;\n@@ -1898,13 +1896,13 @@ package body Ada.Containers.Bounded_Hashed_Sets is\n \n          begin\n             return R : constant Reference_Type :=\n-               (Element  => Container.Nodes (Node).Element'Unrestricted_Access,\n-                  Control  =>\n-                    (Controlled with\n-                       Container'Unrestricted_Access,\n-                       Index  => Key_Keys.Index (Container, Key),\n-                       Old_Pos => P,\n-                       Old_Hash => Hash (Key)))\n+              (Element => Container.Nodes (Node).Element'Unrestricted_Access,\n+               Control =>\n+                 (Controlled with\n+                    Container'Unrestricted_Access,\n+                    Index  => Key_Keys.Index (Container, Key),\n+                    Old_Pos => P,\n+                    Old_Hash => Hash (Key)))\n             do\n                B := B + 1;\n                L := L + 1;"}, {"sha": "619aec9debca0e57b0ca8ced61bf42f3b98125e5", "filename": "gcc/ada/a-cbhase.ads", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fa-cbhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fa-cbhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-cbhase.ads?ref=41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "patch": "@@ -456,12 +456,10 @@ package Ada.Containers.Bounded_Hashed_Sets is\n          Old_Hash  : Hash_Type;\n       end record;\n \n-      overriding procedure\n-         Adjust (Control : in out Reference_Control_Type);\n+      overriding procedure Adjust (Control : in out Reference_Control_Type);\n       pragma Inline (Adjust);\n \n-      overriding procedure\n-         Finalize (Control : in out Reference_Control_Type);\n+      overriding procedure Finalize (Control : in out Reference_Control_Type);\n       pragma Inline (Finalize);\n \n       type Reference_Type (Element : not null access Element_Type) is record"}, {"sha": "d114bc8bb04201c76cec0027555d016d328e6967", "filename": "gcc/ada/a-chtgbo.adb", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fa-chtgbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fa-chtgbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgbo.adb?ref=41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "patch": "@@ -86,9 +86,9 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Operations is\n    --------------------------\n \n    procedure Delete_Node_At_Index\n-     (HT    : in out Hash_Table_Type'Class;\n-      Indx  : Hash_Type;\n-      X     : Count_Type)\n+     (HT   : in out Hash_Table_Type'Class;\n+      Indx : Hash_Type;\n+      X    : Count_Type)\n    is\n       Prev : Count_Type;\n       Curr : Count_Type;\n@@ -106,6 +106,7 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Operations is\n          HT.Length := HT.Length - 1;\n          return;\n       end if;\n+\n       if HT.Length = 1 then\n          raise Program_Error with\n            \"attempt to delete node not in its proper hash bucket\";"}, {"sha": "5019154205d790547a91eba87e135430757b3151", "filename": "gcc/ada/a-chtgbo.ads", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fa-chtgbo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fa-chtgbo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgbo.ads?ref=41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "patch": "@@ -85,10 +85,9 @@ package Ada.Containers.Hash_Tables.Generic_Bounded_Operations is\n    --  table is busy.\n \n    procedure Delete_Node_At_Index\n-     (HT    : in out Hash_Table_Type'Class;\n-      Indx  : Hash_Type;\n-      X     : Count_Type);\n-\n+     (HT   : in out Hash_Table_Type'Class;\n+      Indx : Hash_Type;\n+      X    : Count_Type);\n    --  Delete a node whose bucket position is known. extracted from following\n    --  subprogram, but also used directly to remove a node whose element has\n    --  been modified through a key_preserving reference: in that case we cannot"}, {"sha": "f24bf79f266347b86a8d5ce4c5a30878dfb00ed3", "filename": "gcc/ada/cstand.adb", "status": "modified", "additions": 31, "deletions": 40, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fcstand.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fcstand.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcstand.adb?ref=41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "patch": "@@ -151,6 +151,10 @@ package body CStand is\n      (New_Node_Kind : Node_Kind := N_Defining_Identifier) return Entity_Id;\n    --  Builds a new entity for Standard\n \n+   function New_Standard_Entity (S : String) return Entity_Id;\n+   --  Builds a new entity for Standard with Nkind = N_Defining_Identifier,\n+   --  and Chars of this defining identifier set to the given string S.\n+\n    procedure Print_Standard;\n    --  Print representation of package Standard if switch set\n \n@@ -1204,30 +1208,27 @@ package body CStand is\n       --  filled out to minimize problems with cascaded errors (for example,\n       --  Any_Integer is given reasonable and consistent type and size values)\n \n-      Any_Type := New_Standard_Entity;\n+      Any_Type := New_Standard_Entity (\"any type\");\n       Decl := New_Node (N_Full_Type_Declaration, Stloc);\n       Set_Defining_Identifier (Decl, Any_Type);\n       Set_Scope (Any_Type, Standard_Standard);\n       Build_Signed_Integer_Type (Any_Type, Standard_Integer_Size);\n-      Make_Name (Any_Type, \"any type\");\n \n-      Any_Id := New_Standard_Entity;\n+      Any_Id := New_Standard_Entity (\"any id\");\n       Set_Ekind             (Any_Id, E_Variable);\n       Set_Scope             (Any_Id, Standard_Standard);\n       Set_Etype             (Any_Id, Any_Type);\n       Init_Esize            (Any_Id);\n       Init_Alignment        (Any_Id);\n-      Make_Name             (Any_Id, \"any id\");\n \n-      Any_Access := New_Standard_Entity;\n+      Any_Access := New_Standard_Entity (\"an access type\");\n       Set_Ekind             (Any_Access, E_Access_Type);\n       Set_Scope             (Any_Access, Standard_Standard);\n       Set_Etype             (Any_Access, Any_Access);\n       Init_Size             (Any_Access, System_Address_Size);\n       Set_Elem_Alignment    (Any_Access);\n-      Make_Name             (Any_Access, \"an access type\");\n \n-      Any_Character := New_Standard_Entity;\n+      Any_Character := New_Standard_Entity (\"a character type\");\n       Set_Ekind             (Any_Character, E_Enumeration_Type);\n       Set_Scope             (Any_Character, Standard_Standard);\n       Set_Etype             (Any_Character, Any_Character);\n@@ -1237,18 +1238,16 @@ package body CStand is\n       Init_RM_Size          (Any_Character, 8);\n       Set_Elem_Alignment    (Any_Character);\n       Set_Scalar_Range      (Any_Character, Scalar_Range (Standard_Character));\n-      Make_Name             (Any_Character, \"a character type\");\n \n-      Any_Array := New_Standard_Entity;\n+      Any_Array := New_Standard_Entity (\"an array type\");\n       Set_Ekind             (Any_Array, E_Array_Type);\n       Set_Scope             (Any_Array, Standard_Standard);\n       Set_Etype             (Any_Array, Any_Array);\n       Set_Component_Type    (Any_Array, Any_Character);\n       Init_Size_Align       (Any_Array);\n-      Make_Name             (Any_Array, \"an array type\");\n       Make_Dummy_Index      (Any_Array);\n \n-      Any_Boolean := New_Standard_Entity;\n+      Any_Boolean := New_Standard_Entity (\"a boolean type\");\n       Set_Ekind             (Any_Boolean, E_Enumeration_Type);\n       Set_Scope             (Any_Boolean, Standard_Standard);\n       Set_Etype             (Any_Boolean, Standard_Boolean);\n@@ -1257,34 +1256,30 @@ package body CStand is\n       Set_Elem_Alignment    (Any_Boolean);\n       Set_Is_Unsigned_Type  (Any_Boolean);\n       Set_Scalar_Range      (Any_Boolean, Scalar_Range (Standard_Boolean));\n-      Make_Name             (Any_Boolean, \"a boolean type\");\n \n-      Any_Composite := New_Standard_Entity;\n+      Any_Composite := New_Standard_Entity (\"a composite type\");\n       Set_Ekind             (Any_Composite, E_Array_Type);\n       Set_Scope             (Any_Composite, Standard_Standard);\n       Set_Etype             (Any_Composite, Any_Composite);\n       Set_Component_Size    (Any_Composite, Uint_0);\n       Set_Component_Type    (Any_Composite, Standard_Integer);\n       Init_Size_Align       (Any_Composite);\n-      Make_Name             (Any_Composite, \"a composite type\");\n \n-      Any_Discrete := New_Standard_Entity;\n+      Any_Discrete := New_Standard_Entity (\"a discrete type\");\n       Set_Ekind             (Any_Discrete, E_Signed_Integer_Type);\n       Set_Scope             (Any_Discrete, Standard_Standard);\n       Set_Etype             (Any_Discrete, Any_Discrete);\n       Init_Size             (Any_Discrete, Standard_Integer_Size);\n       Set_Elem_Alignment    (Any_Discrete);\n-      Make_Name             (Any_Discrete, \"a discrete type\");\n \n-      Any_Fixed := New_Standard_Entity;\n+      Any_Fixed := New_Standard_Entity (\"a fixed-point type\");\n       Set_Ekind             (Any_Fixed, E_Ordinary_Fixed_Point_Type);\n       Set_Scope             (Any_Fixed, Standard_Standard);\n       Set_Etype             (Any_Fixed, Any_Fixed);\n       Init_Size             (Any_Fixed, Standard_Integer_Size);\n       Set_Elem_Alignment    (Any_Fixed);\n-      Make_Name             (Any_Fixed, \"a fixed-point type\");\n \n-      Any_Integer := New_Standard_Entity;\n+      Any_Integer := New_Standard_Entity (\"an integer type\");\n       Set_Ekind             (Any_Integer, E_Signed_Integer_Type);\n       Set_Scope             (Any_Integer, Standard_Standard);\n       Set_Etype             (Any_Integer, Standard_Long_Long_Integer);\n@@ -1296,83 +1291,72 @@ package body CStand is\n          Typ => Base_Type (Standard_Integer),\n          Lb  => Uint_0,\n          Hb  => Intval (High_Bound (Scalar_Range (Standard_Integer))));\n-      Make_Name (Any_Integer, \"an integer type\");\n \n-      Any_Modular := New_Standard_Entity;\n+      Any_Modular := New_Standard_Entity (\"a modular type\");\n       Set_Ekind             (Any_Modular, E_Modular_Integer_Type);\n       Set_Scope             (Any_Modular, Standard_Standard);\n       Set_Etype             (Any_Modular, Standard_Long_Long_Integer);\n       Init_Size             (Any_Modular, Standard_Long_Long_Integer_Size);\n       Set_Elem_Alignment    (Any_Modular);\n       Set_Is_Unsigned_Type  (Any_Modular);\n-      Make_Name             (Any_Modular, \"a modular type\");\n \n-      Any_Numeric := New_Standard_Entity;\n+      Any_Numeric := New_Standard_Entity (\"a numeric type\");\n       Set_Ekind             (Any_Numeric, E_Signed_Integer_Type);\n       Set_Scope             (Any_Numeric, Standard_Standard);\n       Set_Etype             (Any_Numeric, Standard_Long_Long_Integer);\n       Init_Size             (Any_Numeric, Standard_Long_Long_Integer_Size);\n       Set_Elem_Alignment    (Any_Numeric);\n-      Make_Name             (Any_Numeric, \"a numeric type\");\n \n-      Any_Real := New_Standard_Entity;\n+      Any_Real := New_Standard_Entity (\"a real type\");\n       Set_Ekind             (Any_Real, E_Floating_Point_Type);\n       Set_Scope             (Any_Real, Standard_Standard);\n       Set_Etype             (Any_Real, Standard_Long_Long_Float);\n       Init_Size             (Any_Real,\n         UI_To_Int (Esize (Standard_Long_Long_Float)));\n       Set_Elem_Alignment    (Any_Real);\n-      Make_Name             (Any_Real, \"a real type\");\n \n-      Any_Scalar := New_Standard_Entity;\n+      Any_Scalar := New_Standard_Entity (\"a scalar type\");\n       Set_Ekind             (Any_Scalar, E_Signed_Integer_Type);\n       Set_Scope             (Any_Scalar, Standard_Standard);\n       Set_Etype             (Any_Scalar, Any_Scalar);\n       Init_Size             (Any_Scalar, Standard_Integer_Size);\n       Set_Elem_Alignment    (Any_Scalar);\n-      Make_Name             (Any_Scalar, \"a scalar type\");\n \n-      Any_String := New_Standard_Entity;\n+      Any_String := New_Standard_Entity (\"a string type\");\n       Set_Ekind             (Any_String, E_Array_Type);\n       Set_Scope             (Any_String, Standard_Standard);\n       Set_Etype             (Any_String, Any_String);\n       Set_Component_Type    (Any_String, Any_Character);\n       Init_Size_Align       (Any_String);\n-      Make_Name             (Any_String, \"a string type\");\n       Make_Dummy_Index      (Any_String);\n \n-      Raise_Type := New_Standard_Entity;\n+      Raise_Type := New_Standard_Entity (\"raise type\");\n       Decl := New_Node (N_Full_Type_Declaration, Stloc);\n       Set_Defining_Identifier (Decl, Raise_Type);\n       Set_Scope (Raise_Type, Standard_Standard);\n       Build_Signed_Integer_Type (Raise_Type, Standard_Integer_Size);\n-      Make_Name (Raise_Type, \"any type\");\n \n-      Standard_Integer_8 := New_Standard_Entity;\n+      Standard_Integer_8 := New_Standard_Entity (\"integer_8\");\n       Decl := New_Node (N_Full_Type_Declaration, Stloc);\n       Set_Defining_Identifier (Decl, Standard_Integer_8);\n-      Make_Name (Standard_Integer_8, \"integer_8\");\n       Set_Scope (Standard_Integer_8, Standard_Standard);\n       Build_Signed_Integer_Type (Standard_Integer_8, 8);\n \n-      Standard_Integer_16 := New_Standard_Entity;\n+      Standard_Integer_16 := New_Standard_Entity (\"integer_16\");\n       Decl := New_Node (N_Full_Type_Declaration, Stloc);\n       Set_Defining_Identifier (Decl, Standard_Integer_16);\n-      Make_Name (Standard_Integer_16, \"integer_16\");\n       Set_Scope (Standard_Integer_16, Standard_Standard);\n       Build_Signed_Integer_Type (Standard_Integer_16, 16);\n \n-      Standard_Integer_32 := New_Standard_Entity;\n+      Standard_Integer_32 := New_Standard_Entity (\"integer_32\");\n       Decl := New_Node (N_Full_Type_Declaration, Stloc);\n       Set_Defining_Identifier (Decl, Standard_Integer_32);\n-      Make_Name (Standard_Integer_32, \"integer_32\");\n       Set_Scope (Standard_Integer_32, Standard_Standard);\n       Build_Signed_Integer_Type (Standard_Integer_32, 32);\n \n-      Standard_Integer_64 := New_Standard_Entity;\n+      Standard_Integer_64 := New_Standard_Entity (\"integer_64\");\n       Decl := New_Node (N_Full_Type_Declaration, Stloc);\n       Set_Defining_Identifier (Decl, Standard_Integer_64);\n-      Make_Name (Standard_Integer_64, \"integer_64\");\n       Set_Scope (Standard_Integer_64, Standard_Standard);\n       Build_Signed_Integer_Type (Standard_Integer_64, 64);\n \n@@ -1879,6 +1863,13 @@ package body CStand is\n       return E;\n    end New_Standard_Entity;\n \n+   function New_Standard_Entity (S : String) return Entity_Id is\n+      Ent : constant Entity_Id := New_Standard_Entity;\n+   begin\n+      Make_Name (Ent, S);\n+      return Ent;\n+   end New_Standard_Entity;\n+\n    --------------------\n    -- Print_Standard --\n    --------------------"}, {"sha": "5ff1421db1614d4255086a607d1974d34cc4a9bd", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "patch": "@@ -4012,11 +4012,10 @@ package body Exp_Aggr is\n \n       --    4. The component size is a multiple of Storage_Unit\n \n-      --    5. The component size is exactly Storage_Unit or the expression is\n-      --       an integer whose unsigned value is the binary concatenation of\n-      --       K times its remainder modulo 2**Storage_Unit.\n-\n-      --  What on earth does 5 mean, incomprehensible???\n+      --    5. The component size is Storage_Unit or the value is of the form\n+      --       M * (1 + A**1 + A**2 + .. A**(K-1)) where A = 2**(Storage_Unit)\n+      --       and M in 1 .. A-1. This can also be viewed as K occurrences of\n+      --       the 8-bit value M, concatenated together.\n \n       --  The ultimate goal is to generate a call to a fast memset routine\n       --  specifically optimized for the target.\n@@ -4087,7 +4086,7 @@ package body Exp_Aggr is\n             Value := Value - Expr_Value (Type_Low_Bound (Ctyp));\n          end if;\n \n-         --  0 and -1 immediately satisfy check #4\n+         --  0 and -1 immediately satisfy check #5\n \n          if Value = Uint_0 or else Value = Uint_Minus_1 then\n             return True;"}, {"sha": "43051fae1a6cd9af947a4544977d464599170ea8", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "patch": "@@ -2872,11 +2872,28 @@ package body Exp_Attr is\n             Rewrite (N,\n               Make_Attribute_Reference (Loc,\n                 Attribute_Name => Name_First,\n-                Prefix => New_Occurrence_Of (Get_Index_Subtype (N), Loc)));\n+                Prefix         =>\n+                  New_Occurrence_Of (Get_Index_Subtype (N), Loc)));\n             Analyze_And_Resolve (N, Typ);\n \n+         --  For access type, apply access check as needed\n+\n          elsif Is_Access_Type (Ptyp) then\n             Apply_Access_Check (N);\n+\n+         --  For scalar type, if low bound is a reference to an entity, just\n+         --  replace with a direct reference. Note that we can only have a\n+         --  reference to a constant entity at this stage, anything else would\n+         --  have already been rewritten.\n+\n+         elsif Is_Scalar_Type (Ptyp) then\n+            declare\n+               Lo : constant Node_Id := Type_Low_Bound (Ptyp);\n+            begin\n+               if Is_Entity_Name (Lo) then\n+                  Rewrite (N, New_Occurrence_Of (Entity (Lo), Loc));\n+               end if;\n+            end;\n          end if;\n \n       ---------------\n@@ -3535,8 +3552,24 @@ package body Exp_Attr is\n                 Prefix => New_Occurrence_Of (Get_Index_Subtype (N), Loc)));\n             Analyze_And_Resolve (N, Typ);\n \n+         --  For access type, apply access check as needed\n+\n          elsif Is_Access_Type (Ptyp) then\n             Apply_Access_Check (N);\n+\n+         --  For scalar type, if low bound is a reference to an entity, just\n+         --  replace with a direct reference. Note that we can only have a\n+         --  reference to a constant entity at this stage, anything else would\n+         --  have already been rewritten.\n+\n+         elsif Is_Scalar_Type (Ptyp) then\n+            declare\n+               Hi : constant Node_Id := Type_High_Bound (Ptyp);\n+            begin\n+               if Is_Entity_Name (Hi) then\n+                  Rewrite (N, New_Occurrence_Of (Entity (Hi), Loc));\n+               end if;\n+            end;\n          end if;\n \n       --------------"}, {"sha": "c928247e628e2e4f61a5bff5258694174d4996f9", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "patch": "@@ -3234,7 +3234,7 @@ package body Exp_Ch3 is\n \n             begin\n                if Nkind (S) = N_Range then\n-                  Process_Range_Expr_In_Decl (S, T, Check_List);\n+                  Process_Range_Expr_In_Decl (S, T, Check_List => Check_List);\n                end if;\n             end Constrain_Index;\n \n@@ -5844,9 +5844,14 @@ package body Exp_Ch3 is\n                return;\n \n             --  For discrete types, set the Is_Known_Valid flag if the\n-            --  initializing value is known to be valid.\n+            --  initializing value is known to be valid. Only do this for\n+            --  source assignments, since otherwise we can end up turning\n+            --  on the known valid flag prematurely from inserted code.\n \n-            elsif Is_Discrete_Type (Typ) and then Expr_Known_Valid (Expr) then\n+            elsif Comes_From_Source (N)\n+              and then Is_Discrete_Type (Typ)\n+              and then Expr_Known_Valid (Expr)\n+            then\n                Set_Is_Known_Valid (Def_Id);\n \n             elsif Is_Access_Type (Typ) then"}, {"sha": "473d2cf899b670a0eba0c9394465d08fb99b5448", "filename": "gcc/ada/sem_ch3.adb", "status": "modified", "additions": 71, "deletions": 7, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fsem_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fsem_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.adb?ref=41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "patch": "@@ -12390,7 +12390,7 @@ package body Sem_Ch3 is\n          Set_Etype (S, T);\n          R := S;\n \n-         Process_Range_Expr_In_Decl (R, T, Empty_List);\n+         Process_Range_Expr_In_Decl (R, T);\n \n          if not Error_Posted (S)\n            and then\n@@ -19018,9 +19018,10 @@ package body Sem_Ch3 is\n    procedure Process_Range_Expr_In_Decl\n      (R            : Node_Id;\n       T            : Entity_Id;\n-      Check_List   : List_Id := Empty_List;\n-      R_Check_Off  : Boolean := False;\n-      In_Iter_Schm : Boolean := False)\n+      Subtyp       : Entity_Id := Empty;\n+      Check_List   : List_Id   := Empty_List;\n+      R_Check_Off  : Boolean   := False;\n+      In_Iter_Schm : Boolean   := False)\n    is\n       Lo, Hi      : Node_Id;\n       R_Checks    : Check_Result;\n@@ -19142,8 +19143,71 @@ package body Sem_Ch3 is\n             --  not supposed to occur, e.g. on default parameters of a call.\n \n             if Expander_Active or GNATprove_Mode then\n-               Force_Evaluation (Lo);\n-               Force_Evaluation (Hi);\n+\n+               --  If no subtype name, then just call Force_Evaluation to\n+               --  create declarations as needed to deal with side effects.\n+               --  Also ignore calls from within a record type, where we\n+               --  have possible scoping issues.\n+\n+               if No (Subtyp) or else Is_Record_Type (Current_Scope) then\n+                  Force_Evaluation (Lo);\n+                  Force_Evaluation (Hi);\n+\n+               --  If a subtype is given, then we capture the bounds if they\n+               --  are not known at compile time, using constant identifiers\n+               --  xxxL and xxxH where xxx is the name of the subtype. No need\n+               --  to do that if they are already references to constants.\n+\n+               --  Historical note: We used to just do Force_Evaluation calls\n+               --  in all cases, but it is better to capture the bounds with\n+               --  proper non-serialized names, since these will be accesse\n+               --  from other units, and hence may be public, and also we can\n+               --  then expand 'First and 'Last references to be references to\n+               --  these special names.\n+\n+               else\n+                  if not Compile_Time_Known_Value (Lo)\n+                    and then not (Is_Entity_Name (Lo)\n+                                   and then Is_Constant_Object (Entity (Lo)))\n+                  then\n+                     declare\n+                        Loc : constant Source_Ptr := Sloc (Lo);\n+                        Lov : constant Entity_Id  :=\n+                          Make_Defining_Identifier (Loc,\n+                            Chars => New_External_Name (Chars (Subtyp), 'L'));\n+                     begin\n+                        Insert_Action (R,\n+                          Make_Object_Declaration (Loc,\n+                            Defining_Identifier => Lov,\n+                            Object_Definition   =>\n+                              New_Occurrence_Of (Base_Type (T), Loc),\n+                            Constant_Present    => True,\n+                            Expression          => Relocate_Node (Lo)));\n+                        Rewrite (Lo, New_Occurrence_Of (Lov, Loc));\n+                     end;\n+                  end if;\n+\n+                  if not Compile_Time_Known_Value (Hi)\n+                    and then not (Is_Entity_Name (Hi)\n+                                  and then Is_Constant_Object (Entity (Hi)))\n+                  then\n+                     declare\n+                        Loc : constant Source_Ptr := Sloc (Hi);\n+                        Hiv : constant Entity_Id  :=\n+                          Make_Defining_Identifier (Loc,\n+                            Chars => New_External_Name (Chars (Subtyp), 'H'));\n+                     begin\n+                        Insert_Action (R,\n+                          Make_Object_Declaration (Loc,\n+                            Defining_Identifier => Hiv,\n+                            Object_Definition   =>\n+                              New_Occurrence_Of (Base_Type (T), Loc),\n+                            Constant_Present    => True,\n+                            Expression          => Relocate_Node (Hi)));\n+                        Rewrite (Hi, New_Occurrence_Of (Hiv, Loc));\n+                     end;\n+                  end if;\n+               end if;\n             end if;\n \n             --  We use a flag here instead of suppressing checks on the\n@@ -20567,7 +20631,7 @@ package body Sem_Ch3 is\n       --  catch possible premature use in the bounds themselves.\n \n       Set_Ekind (Def_Id, E_Void);\n-      Process_Range_Expr_In_Decl (R, Subt);\n+      Process_Range_Expr_In_Decl (R, Subt, Subtyp => Def_Id);\n       Set_Ekind (Def_Id, Kind);\n    end Set_Scalar_Range_For_Subtype;\n "}, {"sha": "dedf943ed5957f133fe19ca5ac478c33166bd686", "filename": "gcc/ada/sem_ch3.ads", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fsem_ch3.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fsem_ch3.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch3.ads?ref=41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "patch": "@@ -264,9 +264,10 @@ package Sem_Ch3 is\n    procedure Process_Range_Expr_In_Decl\n      (R            : Node_Id;\n       T            : Entity_Id;\n-      Check_List   : List_Id := Empty_List;\n-      R_Check_Off  : Boolean := False;\n-      In_Iter_Schm : Boolean := False);\n+      Subtyp       : Entity_Id := Empty;\n+      Check_List   : List_Id   := Empty_List;\n+      R_Check_Off  : Boolean   := False;\n+      In_Iter_Schm : Boolean   := False);\n    --  Process a range expression that appears in a declaration context. The\n    --  range is analyzed and resolved with the base type of the given type, and\n    --  an appropriate check for expressions in non-static contexts made on the\n@@ -279,6 +280,9 @@ package Sem_Ch3 is\n    --  package. R_Check_Off is set to True when the call to Range_Check is to\n    --  be skipped. In_Iter_Schm is True if Process_Range_Expr_In_Decl is called\n    --  on the discrete subtype definition in an iteration scheme.\n+   --\n+   --  If Subtyp is given, then the range is for the named subtype Subtyp, and\n+   --  in this case the bounds are captured if necessary using this name.\n \n    function Process_Subtype\n      (S           : Node_Id;"}, {"sha": "624218965652314c97c19ebf1da57799afa529d1", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41a58113f8e2d6bc4bd52e168e7079053cda5eb9/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=41a58113f8e2d6bc4bd52e168e7079053cda5eb9", "patch": "@@ -1240,16 +1240,22 @@ package body Sem_Eval is\n             return Unknown;\n          end if;\n \n-         --  Replace types by base types for the case of entities which are not\n+         --  Replace types by base types for the case of values which are not\n          --  known to have valid representations. This takes care of properly\n          --  dealing with invalid representations.\n \n-         if not Assume_Valid and then not Assume_No_Invalid_Values then\n-            if Is_Entity_Name (L) and then not Is_Known_Valid (Entity (L)) then\n+         if not Assume_Valid then\n+            if not (Is_Entity_Name (L)\n+                     and then (Is_Known_Valid (Entity (L))\n+                                or else Assume_No_Invalid_Values))\n+            then\n                Ltyp := Underlying_Type (Base_Type (Ltyp));\n             end if;\n \n-            if Is_Entity_Name (R) and then not Is_Known_Valid (Entity (R)) then\n+            if not (Is_Entity_Name (R)\n+                     and then (Is_Known_Valid (Entity (R))\n+                                or else Assume_No_Invalid_Values))\n+            then\n                Rtyp := Underlying_Type (Base_Type (Rtyp));\n             end if;\n          end if;"}]}