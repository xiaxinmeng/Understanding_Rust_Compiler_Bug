{"sha": "e1c5c87790fb8fa4a85db24a26f20edf990c4d98", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFjNWM4Nzc5MGZiOGZhNGE4NWRiMjRhMjZmMjBlZGY5OTBjNGQ5OA==", "commit": {"author": {"name": "Iain Sandoe", "email": "iain@codesourcery.com", "date": "2013-09-29T20:14:39Z"}, "committer": {"name": "Iain Sandoe", "email": "iains@gcc.gnu.org", "date": "2013-09-29T20:14:39Z"}, "message": "re PR target/10901 (non-local goto's don't work on darwin)\n\ngcc:\n\n\tPR target/10901\n\t* config/darwin-protos.h (machopic_get_function_picbase): New.\n\t* config/darwin.c (machopic_get_function_picbase): New.\n\t* config/rs6000/darwin.md (load_macho_picbase_si): Update picbase\n\tlabel for a new func.  (load_macho_picbase_di): Likewise.\n\t(reload_macho_picbase): New expand.\n\t(reload_macho_picbase_si): New insn.\n\t(reload_macho_picbase_di): New insn.\n\t(nonlocal_goto_receiver): New define and split.\n\t* config/rs6000/rs6000.md (unspec enum): Add UNSPEC_RELD_MPIC.\n\t(unspecv enum): Add UNSPECV_NLGR.\n\nFrom-SVN: r203019", "tree": {"sha": "50bb61b2cfc0b2b8e9dc5f9e2ee4a4f4739f8ffc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/50bb61b2cfc0b2b8e9dc5f9e2ee4a4f4739f8ffc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1c5c87790fb8fa4a85db24a26f20edf990c4d98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c5c87790fb8fa4a85db24a26f20edf990c4d98", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1c5c87790fb8fa4a85db24a26f20edf990c4d98", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1c5c87790fb8fa4a85db24a26f20edf990c4d98/comments", "author": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iains", "id": 4039407, "node_id": "MDQ6VXNlcjQwMzk0MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/4039407?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iains", "html_url": "https://github.com/iains", "followers_url": "https://api.github.com/users/iains/followers", "following_url": "https://api.github.com/users/iains/following{/other_user}", "gists_url": "https://api.github.com/users/iains/gists{/gist_id}", "starred_url": "https://api.github.com/users/iains/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iains/subscriptions", "organizations_url": "https://api.github.com/users/iains/orgs", "repos_url": "https://api.github.com/users/iains/repos", "events_url": "https://api.github.com/users/iains/events{/privacy}", "received_events_url": "https://api.github.com/users/iains/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "749278c58dee4d197d9cb951eb524f9159184c4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/749278c58dee4d197d9cb951eb524f9159184c4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/749278c58dee4d197d9cb951eb524f9159184c4c"}], "stats": {"total": 123, "additions": 121, "deletions": 2}, "files": [{"sha": "9396389385736f356550140b11df23510817709a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c5c87790fb8fa4a85db24a26f20edf990c4d98/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c5c87790fb8fa4a85db24a26f20edf990c4d98/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1c5c87790fb8fa4a85db24a26f20edf990c4d98", "patch": "@@ -1,3 +1,17 @@\n+2013-09-29  Iain Sandoe  <iain@codesourcery.com>\n+\n+\tPR target/10901\n+\t* config/darwin-protos.h (machopic_get_function_picbase): New.\n+\t* config/darwin.c (machopic_get_function_picbase): New.\n+\t* config/rs6000/darwin.md (load_macho_picbase_si): Update picbase\n+\tlabel for a new func.  (load_macho_picbase_di): Likewise.\n+\t(reload_macho_picbase): New expand.\n+\t(reload_macho_picbase_si): New insn.\n+\t(reload_macho_picbase_di): New insn.\n+\t(nonlocal_goto_receiver): New define and split.\n+\t* config/rs6000/rs6000.md (unspec enum): Add UNSPEC_RELD_MPIC.\n+\t(unspecv enum): Add UNSPECV_NLGR.\n+\n 2013-09-29  Iain Sandoe  <iain@codesourcery.com>\n \n \t* config/rs6000/rs6000.c (rs6000_init_dwarf_reg_sizes_extra): Ensure"}, {"sha": "fe43ef39aebc5664ebef642da8a552afb5ac4b27", "filename": "gcc/config/darwin-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c5c87790fb8fa4a85db24a26f20edf990c4d98/gcc%2Fconfig%2Fdarwin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c5c87790fb8fa4a85db24a26f20edf990c4d98/gcc%2Fconfig%2Fdarwin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin-protos.h?ref=e1c5c87790fb8fa4a85db24a26f20edf990c4d98", "patch": "@@ -26,6 +26,7 @@ extern void machopic_output_function_base_name (FILE *);\n extern const char *machopic_indirection_name (rtx, bool);\n extern const char *machopic_mcount_stub_name (void);\n extern bool machopic_should_output_picbase_label (void);\n+extern const char *machopic_get_function_picbase (void);\n \n #ifdef RTX_CODE\n "}, {"sha": "cb1bc38a3be598db33e3c06fc59db481ff4a8504", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c5c87790fb8fa4a85db24a26f20edf990c4d98/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c5c87790fb8fa4a85db24a26f20edf990c4d98/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=e1c5c87790fb8fa4a85db24a26f20edf990c4d98", "patch": "@@ -405,6 +405,19 @@ machopic_output_function_base_name (FILE *file)\n   fprintf (file, \"L%d$pb\", current_pic_label_num);\n }\n \n+char curr_picbasename[32];\n+\n+const char *\n+machopic_get_function_picbase (void)\n+{\n+  /* If dynamic-no-pic is on, we should not get here.  */\n+  gcc_assert (!MACHO_DYNAMIC_NO_PIC_P);\n+\n+  update_pic_label_number_if_needed ();\n+  snprintf (curr_picbasename, 32, \"L%d$pb\", current_pic_label_num);\n+  return (const char *) curr_picbasename;\n+}\n+\n bool\n machopic_should_output_picbase_label (void)\n {"}, {"sha": "0fb2422eaaa48b1d921543f34d5e4f18fbd424cc", "filename": "gcc/config/rs6000/darwin.md", "status": "modified", "additions": 91, "deletions": 2, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c5c87790fb8fa4a85db24a26f20edf990c4d98/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c5c87790fb8fa4a85db24a26f20edf990c4d98/gcc%2Fconfig%2Frs6000%2Fdarwin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.md?ref=e1c5c87790fb8fa4a85db24a26f20edf990c4d98", "patch": "@@ -260,7 +260,10 @@ You should have received a copy of the GNU General Public License\n \t(unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"s\")\n \t\t    (pc)] UNSPEC_LD_MPIC))]\n   \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n-  \"bcl 20,31,%0\\\\n%0:\"\n+{\n+  machopic_should_output_picbase_label (); /* Update for new func.  */\n+  return \"bcl 20,31,%0\\\\n%0:\";\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n@@ -269,7 +272,10 @@ You should have received a copy of the GNU General Public License\n \t(unspec:DI [(match_operand:DI 0 \"immediate_operand\" \"s\")\n \t\t    (pc)] UNSPEC_LD_MPIC))]\n   \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic && TARGET_64BIT\"\n-  \"bcl 20,31,%0\\\\n%0:\"\n+{\n+  machopic_should_output_picbase_label (); /* Update for new func.  */\n+  return \"bcl 20,31,%0\\\\n%0:\";\n+}\n   [(set_attr \"type\" \"branch\")\n    (set_attr \"length\" \"4\")])\n \n@@ -370,3 +376,86 @@ You should have received a copy of the GNU General Public License\n }\n   [(set_attr \"type\" \"branch,branch\")\n    (set_attr \"length\" \"4,8\")])\n+\n+(define_expand \"reload_macho_picbase\"\n+  [(set (reg:SI 65)\n+        (unspec [(match_operand 0 \"\" \"\")]\n+                   UNSPEC_RELD_MPIC))]\n+  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n+{\n+  if (TARGET_32BIT)\n+    emit_insn (gen_reload_macho_picbase_si (operands[0]));\n+  else\n+    emit_insn (gen_reload_macho_picbase_di (operands[0]));\n+\n+  DONE;\n+})\n+\n+(define_insn \"reload_macho_picbase_si\"\n+  [(set (reg:SI 65)\n+        (unspec:SI [(match_operand:SI 0 \"immediate_operand\" \"s\")\n+\t\t    (pc)] UNSPEC_RELD_MPIC))]\n+  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic\"\n+{\n+  if (machopic_should_output_picbase_label ())\n+    {\n+      static char tmp[64];\n+      const char *cnam = machopic_get_function_picbase ();\n+      snprintf (tmp, 64, \"bcl 20,31,%s\\\\n%s:\\\\n%%0:\", cnam, cnam);\n+      return tmp;\n+    }\n+  else\n+    return \"bcl 20,31,%0\\\\n%0:\";\n+}\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n+(define_insn \"reload_macho_picbase_di\"\n+  [(set (reg:DI 65)\n+\t(unspec:DI [(match_operand:DI 0 \"immediate_operand\" \"s\")\n+\t\t    (pc)] UNSPEC_RELD_MPIC))]\n+  \"(DEFAULT_ABI == ABI_DARWIN) && flag_pic && TARGET_64BIT\"\n+{\n+  if (machopic_should_output_picbase_label ())\n+    {\n+      static char tmp[64];\n+      const char *cnam = machopic_get_function_picbase ();\n+      snprintf (tmp, 64, \"bcl 20,31,%s\\\\n%s:\\\\n%%0:\", cnam, cnam);\n+      return tmp;\n+    }\n+  else\n+    return \"bcl 20,31,%0\\\\n%0:\";\n+}\n+  [(set_attr \"type\" \"branch\")\n+   (set_attr \"length\" \"4\")])\n+\n+;; We need to restore the PIC register, at the site of nonlocal label.\n+\n+(define_insn_and_split \"nonlocal_goto_receiver\"\n+  [(unspec_volatile [(const_int 0)] UNSPECV_NLGR)]\n+  \"TARGET_MACHO && flag_pic\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(const_int 0)]\n+{\n+  if (crtl->uses_pic_offset_table)\n+    {\n+      static unsigned n = 0;\n+      rtx picrtx = gen_rtx_SYMBOL_REF (Pmode, MACHOPIC_FUNCTION_BASE_NAME);\n+      rtx picreg = gen_rtx_REG (Pmode, RS6000_PIC_OFFSET_TABLE_REGNUM);\n+      rtx tmplrtx;\n+      char tmplab[20];\n+\n+      ASM_GENERATE_INTERNAL_LABEL(tmplab, \"Lnlgr\", ++n);\n+      tmplrtx = gen_rtx_SYMBOL_REF (Pmode, ggc_strdup (tmplab));\n+\n+      emit_insn (gen_reload_macho_picbase (tmplrtx));\n+      emit_move_insn (picreg, gen_rtx_REG (Pmode, LR_REGNO));\n+      emit_insn (gen_macho_correct_pic (picreg, picreg, picrtx, tmplrtx));\n+    }\n+  else\n+    /* Not using PIC reg, no reload needed.  */\n+    emit_note (NOTE_INSN_DELETED);\n+\n+  DONE;\n+})"}, {"sha": "4bd3389fcf7a98338390e91ce228411a5682a99d", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1c5c87790fb8fa4a85db24a26f20edf990c4d98/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1c5c87790fb8fa4a85db24a26f20edf990c4d98/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=e1c5c87790fb8fa4a85db24a26f20edf990c4d98", "patch": "@@ -87,6 +87,7 @@\n    UNSPEC_FRIP\n    UNSPEC_FRIZ\n    UNSPEC_LD_MPIC\t\t; load_macho_picbase\n+   UNSPEC_RELD_MPIC\t\t; re-load_macho_picbase\n    UNSPEC_MPIC_CORRECT\t\t; macho_correct_pic\n    UNSPEC_TLSGD\n    UNSPEC_TLSLD\n@@ -150,6 +151,7 @@\n    UNSPECV_EH_RR\t\t; eh_reg_restore\n    UNSPECV_ISYNC\t\t; isync instruction\n    UNSPECV_MFTB\t\t\t; move from time base\n+   UNSPECV_NLGR\t\t\t; non-local goto receiver\n   ])\n \n \f"}]}