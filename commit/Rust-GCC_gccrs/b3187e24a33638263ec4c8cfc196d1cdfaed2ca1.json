{"sha": "b3187e24a33638263ec4c8cfc196d1cdfaed2ca1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMxODdlMjRhMzM2MzgyNjNlYzRjOGNmYzE5NmQxY2RmYWVkMmNhMQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2009-09-07T21:40:23Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2009-09-07T21:40:23Z"}, "message": "From Jie Zhang <jie.zhang@analog.com>:\n\n\t* config/bfin/predicates.md (p_register_operand): New\n\tpredicate.\n\t(dp_register_operand): New predicate.\n\t* config/bfin/bfin-protos.h (WA_05000074): Define.\n\t(ENABLE_WA_05000074): Define.\n\t* config/bfin/bfin.c (bfin_cpus[]): Add WA_05000074 for\n\tall cpus.\n\t(bfin_gen_bundles): Put dsp32shiftimm instruction in slot[0].\n\t* config/bfin/bfin.md (define_attr type): Add dsp32shiftimm.\n\t(define_attr addrtype): Allow load/store register to be\n\tP register.\n\t(define_attr storereg): New.\n\t(define_cpu_unit anomaly_05000074): New.\n\t(define_insn_reservation dsp32shiftimm): New.\n\t(define_insn_reservation dsp32shiftimm_anomaly_05000074): New.\n\t(define_insn_reservation loadp): Cannot use slot2.\n\t(define_insn_reservation loadsp): Cannot use slot2.\n\t(define_insn_reservation storep): Cannot use slot2. Does not\n\tapply when working around 05000074.\n\t(define_insn_reservation storep_anomaly_05000074): New.\n\t(define_insn_reservation storei): Does not apply when working\n\taround 05000074.\n\t(define_insn_reservation storei_anomaly_05000074): New.\n\t(define_attr length): Add dsp32shiftimm case.\n\t(define_insn movsi_insn32, movsi_insv, ashlsi3_insn, ashrsi3,\n\tror_one, rol_one, lshrsi3, lshrpdi3, ashrpdi3, movhiv2hi_low,\n\tmovhiv2hi_high, composev2hi, packv2hi, movv2hi_hi,\n\tssashiftv2hi3, ssashifthi3, ssashiftsi3, lshiftv2hi3, lshifthi3):\n\tSet type as dsp32shiftimm for dsp32shiftimm alternatives.\n\nFrom-SVN: r151490", "tree": {"sha": "196db9d1d3447052ca5b0f749414873f60a979ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/196db9d1d3447052ca5b0f749414873f60a979ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1/comments", "author": null, "committer": null, "parents": [{"sha": "5254cd509fc4999185cc629e3cc7eda54db6132b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5254cd509fc4999185cc629e3cc7eda54db6132b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5254cd509fc4999185cc629e3cc7eda54db6132b"}], "stats": {"total": 332, "additions": 223, "deletions": 109}, "files": [{"sha": "66c0c145fa6e55653ceaa2a8d94f914ec5883361", "filename": "gcc/ChangeLog", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b3187e24a33638263ec4c8cfc196d1cdfaed2ca1", "patch": "@@ -41,6 +41,37 @@\n \t* doc/invoke.texi (Blackfin Options): Document that -mcpu now accepts\n \tbf542m, bf544m, bf547m, bf548m, and bf549m.\n \n+\tFrom Jie Zhang <jie.zhang@analog.com>:\n+\t* config/bfin/predicates.md (p_register_operand): New\n+\tpredicate.\n+\t(dp_register_operand): New predicate.\n+\t* config/bfin/bfin-protos.h (WA_05000074): Define.\n+\t(ENABLE_WA_05000074): Define.\n+\t* config/bfin/bfin.c (bfin_cpus[]): Add WA_05000074 for\n+\tall cpus.\n+\t(bfin_gen_bundles): Put dsp32shiftimm instruction in slot[0].\n+\t* config/bfin/bfin.md (define_attr type): Add dsp32shiftimm.\n+\t(define_attr addrtype): Allow load/store register to be\n+\tP register.\n+\t(define_attr storereg): New.\n+\t(define_cpu_unit anomaly_05000074): New.\n+\t(define_insn_reservation dsp32shiftimm): New.\n+\t(define_insn_reservation dsp32shiftimm_anomaly_05000074): New.\n+\t(define_insn_reservation loadp): Cannot use slot2.\n+\t(define_insn_reservation loadsp): Cannot use slot2.\n+\t(define_insn_reservation storep): Cannot use slot2. Does not\n+\tapply when working around 05000074.\n+\t(define_insn_reservation storep_anomaly_05000074): New.\n+\t(define_insn_reservation storei): Does not apply when working\n+\taround 05000074.\n+\t(define_insn_reservation storei_anomaly_05000074): New.\n+\t(define_attr length): Add dsp32shiftimm case.\n+\t(define_insn movsi_insn32, movsi_insv, ashlsi3_insn, ashrsi3,\n+\tror_one, rol_one, lshrsi3, lshrpdi3, ashrpdi3, movhiv2hi_low,\n+\tmovhiv2hi_high, composev2hi, packv2hi, movv2hi_hi,\n+\tssashiftv2hi3, ssashifthi3, ssashiftsi3, lshiftv2hi3, lshifthi3):\n+\tSet type as dsp32shiftimm for dsp32shiftimm alternatives.\n+\n 2009-09-07  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/41282"}, {"sha": "b2d3d8c2dbd133a73c771d34c3537b3298e54044", "filename": "gcc/config/bfin/bfin-protos.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin-protos.h?ref=b3187e24a33638263ec4c8cfc196d1cdfaed2ca1", "patch": "@@ -59,6 +59,10 @@\n #define ENABLE_WA_LOAD_LCREGS \\\n   (bfin_workarounds & WA_LOAD_LCREGS)\n \n+#define WA_05000074 0x00000100\n+#define ENABLE_WA_05000074 \\\n+  (bfin_workarounds & WA_05000074)\n+\n #define Mmode enum machine_mode\n \n extern rtx function_arg (CUMULATIVE_ARGS *, Mmode, tree, int);"}, {"sha": "e523680156637d4e7f5d6996fc06f2e5d0337603", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 99, "deletions": 75, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=b3187e24a33638263ec4c8cfc196d1cdfaed2ca1", "patch": "@@ -117,199 +117,223 @@ struct bfin_cpu\n struct bfin_cpu bfin_cpus[] =\n {\n   {\"bf512\", BFIN_CPU_BF512, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n \n   {\"bf514\", BFIN_CPU_BF514, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n \n   {\"bf516\", BFIN_CPU_BF516, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n \n   {\"bf518\", BFIN_CPU_BF518, 0x0000,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n \n   {\"bf522\", BFIN_CPU_BF522, 0x0002,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n   {\"bf522\", BFIN_CPU_BF522, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n   {\"bf522\", BFIN_CPU_BF522, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n \n   {\"bf523\", BFIN_CPU_BF523, 0x0002,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n   {\"bf523\", BFIN_CPU_BF523, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n   {\"bf523\", BFIN_CPU_BF523, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n \n   {\"bf524\", BFIN_CPU_BF524, 0x0002,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n   {\"bf524\", BFIN_CPU_BF524, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n   {\"bf524\", BFIN_CPU_BF524, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n \n   {\"bf525\", BFIN_CPU_BF525, 0x0002,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n   {\"bf525\", BFIN_CPU_BF525, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n   {\"bf525\", BFIN_CPU_BF525, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n \n   {\"bf526\", BFIN_CPU_BF526, 0x0002,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n   {\"bf526\", BFIN_CPU_BF526, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n   {\"bf526\", BFIN_CPU_BF526, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n \n   {\"bf527\", BFIN_CPU_BF527, 0x0002,\n-   WA_SPECULATIVE_LOADS},\n+   WA_SPECULATIVE_LOADS | WA_05000074},\n   {\"bf527\", BFIN_CPU_BF527, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n   {\"bf527\", BFIN_CPU_BF527, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000074},\n \n   {\"bf531\", BFIN_CPU_BF531, 0x0006,\n-   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf531\", BFIN_CPU_BF531, 0x0005,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315\n+   | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf531\", BFIN_CPU_BF531, 0x0004,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n   {\"bf531\", BFIN_CPU_BF531, 0x0003,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {\"bf532\", BFIN_CPU_BF532, 0x0006,\n-   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf532\", BFIN_CPU_BF532, 0x0005,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315\n+   | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf532\", BFIN_CPU_BF532, 0x0004,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n   {\"bf532\", BFIN_CPU_BF532, 0x0003,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {\"bf533\", BFIN_CPU_BF533, 0x0006,\n-   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf533\", BFIN_CPU_BF533, 0x0005,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_05000283 | WA_05000315\n+   | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf533\", BFIN_CPU_BF533, 0x0004,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n   {\"bf533\", BFIN_CPU_BF533, 0x0003,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {\"bf534\", BFIN_CPU_BF534, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf534\", BFIN_CPU_BF534, 0x0002,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n   {\"bf534\", BFIN_CPU_BF534, 0x0001,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {\"bf536\", BFIN_CPU_BF536, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf536\", BFIN_CPU_BF536, 0x0002,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n   {\"bf536\", BFIN_CPU_BF536, 0x0001,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {\"bf537\", BFIN_CPU_BF537, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf537\", BFIN_CPU_BF537, 0x0002,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n   {\"bf537\", BFIN_CPU_BF537, 0x0001,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {\"bf538\", BFIN_CPU_BF538, 0x0005,\n-   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf538\", BFIN_CPU_BF538, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf538\", BFIN_CPU_BF538, 0x0003,\n    WA_SPECULATIVE_LOADS | WA_RETS\n-   | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf538\", BFIN_CPU_BF538, 0x0002,\n    WA_SPECULATIVE_LOADS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {\"bf539\", BFIN_CPU_BF539, 0x0005,\n-   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf539\", BFIN_CPU_BF539, 0x0004,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf539\", BFIN_CPU_BF539, 0x0003,\n    WA_SPECULATIVE_LOADS | WA_RETS\n-   | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf539\", BFIN_CPU_BF539, 0x0002,\n    WA_SPECULATIVE_LOADS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {\"bf542m\", BFIN_CPU_BF542M, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n \n   {\"bf542\", BFIN_CPU_BF542, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n   {\"bf542\", BFIN_CPU_BF542, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n   {\"bf542\", BFIN_CPU_BF542, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {\"bf544m\", BFIN_CPU_BF544M, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n \n   {\"bf544\", BFIN_CPU_BF544, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n   {\"bf544\", BFIN_CPU_BF544, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n   {\"bf544\", BFIN_CPU_BF544, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {\"bf547m\", BFIN_CPU_BF547M, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n \n   {\"bf547\", BFIN_CPU_BF547, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n   {\"bf547\", BFIN_CPU_BF547, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n   {\"bf547\", BFIN_CPU_BF547, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {\"bf548m\", BFIN_CPU_BF548M, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n \n   {\"bf548\", BFIN_CPU_BF548, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n   {\"bf548\", BFIN_CPU_BF548, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n   {\"bf548\", BFIN_CPU_BF548, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {\"bf549m\", BFIN_CPU_BF549M, 0x0003,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n \n   {\"bf549\", BFIN_CPU_BF549, 0x0002,\n-   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_INDIRECT_CALLS | WA_05000074},\n   {\"bf549\", BFIN_CPU_BF549, 0x0001,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_05000074},\n   {\"bf549\", BFIN_CPU_BF549, 0x0000,\n-   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS},\n+   WA_SPECULATIVE_LOADS | WA_RETS | WA_INDIRECT_CALLS | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {\"bf561\", BFIN_CPU_BF561, 0x0005, WA_RETS\n-   | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000315 | WA_LOAD_LCREGS | WA_05000074},\n   {\"bf561\", BFIN_CPU_BF561, 0x0003,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n   {\"bf561\", BFIN_CPU_BF561, 0x0002,\n    WA_SPECULATIVE_LOADS | WA_SPECULATIVE_SYNCS | WA_RETS\n-   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS},\n+   | WA_05000283 | WA_05000257 | WA_05000315 | WA_LOAD_LCREGS\n+   | WA_05000074},\n \n   {NULL, 0, 0, 0}\n };\n@@ -4812,7 +4836,7 @@ bfin_gen_bundles (void)\n \t\t}\n \t      else\n \t\t{\n-\t\t  if (type == TYPE_DSP32)\n+\t\t  if (type == TYPE_DSP32 || type == TYPE_DSP32SHIFTIMM)\n \t\t    slot[0] = insn;\n \t\t  else if (slot[1] == NULL_RTX)\n \t\t    slot[1] = insn;"}, {"sha": "74c7a0a6f6053ed92612a48665c933c909441ccf", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 81, "deletions": 34, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=b3187e24a33638263ec4c8cfc196d1cdfaed2ca1", "patch": "@@ -164,36 +164,42 @@\n    (MACFLAG_IH 11)])\n \n (define_attr \"type\"\n-  \"move,movcc,mvi,mcld,mcst,dsp32,mult,alu0,shft,brcc,br,call,misc,sync,compare,dummy,stall\"\n+  \"move,movcc,mvi,mcld,mcst,dsp32,dsp32shiftimm,mult,alu0,shft,brcc,br,call,misc,sync,compare,dummy,stall\"\n   (const_string \"misc\"))\n \n (define_attr \"addrtype\" \"32bit,preg,spreg,ireg\"\n   (cond [(and (eq_attr \"type\" \"mcld\")\n-\t      (and (match_operand 0 \"d_register_operand\" \"\")\n+\t      (and (match_operand 0 \"dp_register_operand\" \"\")\n \t\t   (match_operand 1 \"mem_p_address_operand\" \"\")))\n \t   (const_string \"preg\")\n \t (and (eq_attr \"type\" \"mcld\")\n-\t      (and (match_operand 0 \"d_register_operand\" \"\")\n+\t      (and (match_operand 0 \"dp_register_operand\" \"\")\n \t\t   (match_operand 1 \"mem_spfp_address_operand\" \"\")))\n \t   (const_string \"spreg\")\n \t (and (eq_attr \"type\" \"mcld\")\n-\t      (and (match_operand 0 \"d_register_operand\" \"\")\n+\t      (and (match_operand 0 \"dp_register_operand\" \"\")\n \t\t   (match_operand 1 \"mem_i_address_operand\" \"\")))\n \t   (const_string \"ireg\")\n \t (and (eq_attr \"type\" \"mcst\")\n-\t      (and (match_operand 1 \"d_register_operand\" \"\")\n+\t      (and (match_operand 1 \"dp_register_operand\" \"\")\n \t\t   (match_operand 0 \"mem_p_address_operand\" \"\")))\n \t   (const_string \"preg\")\n \t (and (eq_attr \"type\" \"mcst\")\n-\t      (and (match_operand 1 \"d_register_operand\" \"\")\n+\t      (and (match_operand 1 \"dp_register_operand\" \"\")\n \t\t   (match_operand 0 \"mem_spfp_address_operand\" \"\")))\n \t   (const_string \"spreg\")\n \t (and (eq_attr \"type\" \"mcst\")\n-\t      (and (match_operand 1 \"d_register_operand\" \"\")\n+\t      (and (match_operand 1 \"dp_register_operand\" \"\")\n \t\t   (match_operand 0 \"mem_i_address_operand\" \"\")))\n \t   (const_string \"ireg\")]\n \t(const_string \"32bit\")))\n \n+(define_attr \"storereg\" \"preg,other\"\n+  (cond [(and (eq_attr \"type\" \"mcst\")\n+\t      (match_operand 1 \"p_register_operand\" \"\"))\n+\t   (const_string \"preg\")]\n+\t(const_string \"other\")))\n+\n ;; Scheduling definitions\n \n (define_automaton \"bfin\")\n@@ -212,6 +218,9 @@\n ;; branch.\n (define_cpu_unit \"load\" \"bfin\")\n \n+;; A logical unit used to work around anomaly 05000074.\n+(define_cpu_unit \"anomaly_05000074\" \"bfin\")\n+\n (define_reservation \"core\" \"slot0+slot1+slot2\")\n \n (define_insn_reservation \"alu\" 1\n@@ -226,6 +235,18 @@\n   (eq_attr \"type\" \"dsp32\")\n   \"slot0\")\n \n+(define_insn_reservation \"dsp32shiftimm\" 1\n+  (and (eq_attr \"type\" \"dsp32shiftimm\")\n+       (eq (symbol_ref \"ENABLE_WA_05000074\")\n+\t   (const_int 0)))\n+  \"slot0\")\n+\n+(define_insn_reservation \"dsp32shiftimm_anomaly_05000074\" 1\n+  (and (eq_attr \"type\" \"dsp32shiftimm\")\n+       (ne (symbol_ref \"ENABLE_WA_05000074\")\n+\t   (const_int 0)))\n+  \"slot0+anomaly_05000074\")\n+\n (define_insn_reservation \"load32\" 1\n   (and (not (eq_attr \"seq_insns\" \"multi\"))\n        (and (eq_attr \"type\" \"mcld\") (eq_attr \"addrtype\" \"32bit\")))\n@@ -234,12 +255,12 @@\n (define_insn_reservation \"loadp\" 1\n   (and (not (eq_attr \"seq_insns\" \"multi\"))\n        (and (eq_attr \"type\" \"mcld\") (eq_attr \"addrtype\" \"preg\")))\n-  \"(slot1|slot2)+pregs+load\")\n+  \"slot1+pregs+load\")\n \n (define_insn_reservation \"loadsp\" 1\n   (and (not (eq_attr \"seq_insns\" \"multi\"))\n        (and (eq_attr \"type\" \"mcld\") (eq_attr \"addrtype\" \"spreg\")))\n-  \"(slot1|slot2)+pregs\")\n+  \"slot1+pregs\")\n \n (define_insn_reservation \"loadi\" 1\n   (and (not (eq_attr \"seq_insns\" \"multi\"))\n@@ -252,16 +273,41 @@\n   \"core\")\n \n (define_insn_reservation \"storep\" 1\n-  (and (not (eq_attr \"seq_insns\" \"multi\"))\n-       (and (eq_attr \"type\" \"mcst\")\n-\t    (ior (eq_attr \"addrtype\" \"preg\") (eq_attr \"addrtype\" \"spreg\"))))\n-  \"(slot1|slot2)+pregs+store\")\n+  (and (and (not (eq_attr \"seq_insns\" \"multi\"))\n+\t    (and (eq_attr \"type\" \"mcst\")\n+\t\t (ior (eq_attr \"addrtype\" \"preg\")\n+\t\t      (eq_attr \"addrtype\" \"spreg\"))))\n+       (ior (eq (symbol_ref \"ENABLE_WA_05000074\")\n+\t\t(const_int 0))\n+\t    (eq_attr \"storereg\" \"other\")))\n+  \"slot1+pregs+store\")\n+\n+(define_insn_reservation \"storep_anomaly_05000074\" 1\n+  (and (and (not (eq_attr \"seq_insns\" \"multi\"))\n+\t    (and (eq_attr \"type\" \"mcst\")\n+\t\t (ior (eq_attr \"addrtype\" \"preg\")\n+\t\t      (eq_attr \"addrtype\" \"spreg\"))))\n+       (and (ne (symbol_ref \"ENABLE_WA_05000074\")\n+\t\t(const_int 0))\n+\t    (eq_attr \"storereg\" \"preg\")))\n+  \"slot1+anomaly_05000074+pregs+store\")\n \n (define_insn_reservation \"storei\" 1\n-  (and (not (eq_attr \"seq_insns\" \"multi\"))\n-       (and (eq_attr \"type\" \"mcst\") (eq_attr \"addrtype\" \"ireg\")))\n+  (and (and (not (eq_attr \"seq_insns\" \"multi\"))\n+\t    (and (eq_attr \"type\" \"mcst\") (eq_attr \"addrtype\" \"ireg\")))\n+       (ior (eq (symbol_ref \"ENABLE_WA_05000074\")\n+\t\t(const_int 0))\n+\t    (eq_attr \"storereg\" \"other\")))\n   \"(slot1|slot2)+store\")\n \n+(define_insn_reservation \"storei_anomaly_05000074\" 1\n+  (and (and (not (eq_attr \"seq_insns\" \"multi\"))\n+\t    (and (eq_attr \"type\" \"mcst\") (eq_attr \"addrtype\" \"ireg\")))\n+       (and (ne (symbol_ref \"ENABLE_WA_05000074\")\n+\t\t(const_int 0))\n+\t    (eq_attr \"storereg\" \"preg\")))\n+  \"((slot1+anomaly_05000074)|slot2)+store\")\n+\n (define_insn_reservation \"multi\" 2\n   (eq_attr \"seq_insns\" \"multi\")\n   \"core\")\n@@ -332,6 +378,7 @@\n \t (eq_attr \"type\" \"move\") (const_int 2)\n \n \t (eq_attr \"type\" \"dsp32\") (const_int 4)\n+\t (eq_attr \"type\" \"dsp32shiftimm\") (const_int 4)\n \t (eq_attr \"type\" \"call\")  (const_int 4)\n \n          (eq_attr \"type\" \"br\")\n@@ -585,7 +632,7 @@\n  \"@\n    %0 = ROT %1 BY 0%!\n    %0 = %0 -|- %0%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32shiftimm,dsp32\")])\n \n (define_split\n   [(set (match_operand:SI 0 \"d_register_operand\" \"\")\n@@ -708,7 +755,7 @@\n   \"@\n    %d0 = %h1 << 0%!\n    %d0 = %1;\"\n-  [(set_attr \"type\" \"dsp32,mvi\")])\n+  [(set_attr \"type\" \"dsp32shiftimm,mvi\")])\n \n (define_expand \"insv\"\n   [(set (zero_extract:SI (match_operand:SI 0 \"register_operand\" \"\")\n@@ -1618,7 +1665,7 @@\n   [(set (match_dup 0) (ashift:SI (match_dup 1) (const_int 2)))\n    (set (match_dup 0) (ashift:SI (match_dup 0) (match_dup 3)))]\n   \"operands[3] = GEN_INT (INTVAL (operands[2]) - 2);\"\n-  [(set_attr \"type\" \"shft,dsp32,shft,shft,*\")])\n+  [(set_attr \"type\" \"shft,dsp32shiftimm,shft,shft,*\")])\n \n (define_insn \"ashrsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d\")\n@@ -1628,7 +1675,7 @@\n   \"@\n    %0 >>>= %2;\n    %0 = %1 >>> %2%!\"\n-  [(set_attr \"type\" \"shft,dsp32\")])\n+  [(set_attr \"type\" \"shft,dsp32shiftimm\")])\n \n (define_insn \"rotl16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n@@ -1669,7 +1716,7 @@\n \t(zero_extract:BI (match_dup 1) (const_int 1) (const_int 0)))]\n   \"\"\n   \"%0 = ROT %1 BY -1%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32shiftimm\")])\n \n (define_insn \"rol_one\"\n   [(set (match_operand:SI 0 \"register_operand\" \"+d\")\n@@ -1679,7 +1726,7 @@\n \t(zero_extract:BI (match_dup 1) (const_int 31) (const_int 0)))]\n   \"\"\n   \"%0 = ROT %1 BY 1%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32shiftimm\")])\n \n (define_expand \"lshrdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"\")\n@@ -1754,23 +1801,23 @@\n    %0 >>= %2;\n    %0 = %1 >> %2%!\n    %0 = %1 >> %2;\"\n-  [(set_attr \"type\" \"shft,dsp32,shft\")])\n+  [(set_attr \"type\" \"shft,dsp32shiftimm,shft\")])\n \n (define_insn \"lshrpdi3\"\n   [(set (match_operand:PDI 0 \"register_operand\" \"=e\")\n \t(lshiftrt:PDI (match_operand:PDI 1 \"register_operand\" \"0\")\n \t\t      (match_operand:SI 2 \"nonmemory_operand\" \"Ku5\")))]\n   \"\"\n   \"%0 = %1 >> %2%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32shiftimm\")])\n \n (define_insn \"ashrpdi3\"\n   [(set (match_operand:PDI 0 \"register_operand\" \"=e\")\n \t(ashiftrt:PDI (match_operand:PDI 1 \"register_operand\" \"0\")\n \t\t      (match_operand:SI 2 \"nonmemory_operand\" \"Ku5\")))]\n   \"\"\n   \"%0 = %1 >>> %2%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32shiftimm\")])\n \n ;; A pattern to reload the equivalent of\n ;;   (set (Dreg) (plus (FP) (large_constant)))\n@@ -2759,7 +2806,7 @@\n \t\t\t(parallel [(const_int 1)]))))]\n   \"\"\n   \"%h0 = %h2 << 0%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32shiftimm\")])\n \n (define_insn \"movhiv2hi_high\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n@@ -2769,7 +2816,7 @@\n \t (match_operand:HI 2 \"register_operand\" \"d\")))]\n   \"\"\n   \"%d0 = %h2 << 0%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32shiftimm\")])\n \n ;; No earlyclobber on alternative two since our sequence ought to be safe.\n ;; The order of operands is intentional to match the VDSP builtin (high word\n@@ -2792,7 +2839,7 @@\n \t (match_dup 2)\n \t (vec_select:HI (match_dup 0) (parallel [(const_int 1)]))))]\n   \"\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32shiftimm\")])\n \n ; Like composev2hi, but operating on elements of V2HI vectors.\n ; Useful on its own, and as a combiner bridge for the multiply and\n@@ -2815,7 +2862,7 @@\n    %0 = PACK (%h2,%d1)%!\n    %0 = PACK (%d2,%h1)%!\n    %0 = PACK (%d2,%d1)%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32shiftimm,dsp32shiftimm,dsp32shiftimm,dsp32shiftimm,dsp32,dsp32,dsp32,dsp32\")])\n \n (define_insn \"movv2hi_hi\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d,d,d\")\n@@ -2826,7 +2873,7 @@\n    /* optimized out */\n    %h0 = %h1 << 0%!\n    %h0 = %d1 << 0%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32shiftimm\")])\n \n (define_expand \"movv2hi_hi_low\"\n   [(set (match_operand:HI 0 \"register_operand\" \"\")\n@@ -4090,7 +4137,7 @@\n    %0 = ASHIFT %1 BY %h2 (V, S)%!\n    %0 = %1 << %2 (V,S)%!\n    %0 = %1 >>> %N2 (V,S)%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32,dsp32shiftimm,dsp32shiftimm\")])\n \n (define_insn \"ssashifthi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d,d,d\")\n@@ -4104,7 +4151,7 @@\n    %0 = ASHIFT %1 BY %h2 (V, S)%!\n    %0 = %1 << %2 (V,S)%!\n    %0 = %1 >>> %N2 (V,S)%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32,dsp32shiftimm,dsp32shiftimm\")])\n \n (define_insn \"ssashiftsi3\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n@@ -4118,7 +4165,7 @@\n    %0 = ASHIFT %1 BY %h2 (S)%!\n    %0 = %1 << %2 (S)%!\n    %0 = %1 >>> %N2 (S)%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32,dsp32shiftimm,dsp32shiftimm\")])\n \n (define_insn \"lshiftv2hi3\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d,d,d\")\n@@ -4132,7 +4179,7 @@\n    %0 = LSHIFT %1 BY %h2 (V)%!\n    %0 = %1 << %2 (V)%!\n    %0 = %1 >> %N2 (V)%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32,dsp32shiftimm,dsp32shiftimm\")])\n \n (define_insn \"lshifthi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d,d,d\")\n@@ -4146,7 +4193,7 @@\n    %0 = LSHIFT %1 BY %h2 (V)%!\n    %0 = %1 << %2 (V)%!\n    %0 = %1 >> %N2 (V)%!\"\n-  [(set_attr \"type\" \"dsp32\")])\n+  [(set_attr \"type\" \"dsp32,dsp32shiftimm,dsp32shiftimm\")])\n \n ;; Load without alignment exception (masking off low bits)\n "}, {"sha": "84bf59195096ad197cb6c38c3157016097497809", "filename": "gcc/config/bfin/predicates.md", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b3187e24a33638263ec4c8cfc196d1cdfaed2ca1/gcc%2Fconfig%2Fbfin%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fpredicates.md?ref=b3187e24a33638263ec4c8cfc196d1cdfaed2ca1", "patch": "@@ -88,6 +88,14 @@\n   (and (match_code \"reg\")\n        (match_test \"D_REGNO_P (REGNO (op))\")))\n \n+(define_predicate \"p_register_operand\"\n+  (and (match_code \"reg\")\n+       (match_test \"P_REGNO_P (REGNO (op))\")))\n+\n+(define_predicate \"dp_register_operand\"\n+  (and (match_code \"reg\")\n+       (match_test \"D_REGNO_P (REGNO (op)) || P_REGNO_P (REGNO (op))\")))\n+\n ;; Return nonzero if OP is a LC register.\n (define_predicate \"lc_register_operand\"\n   (and (match_code \"reg\")"}]}