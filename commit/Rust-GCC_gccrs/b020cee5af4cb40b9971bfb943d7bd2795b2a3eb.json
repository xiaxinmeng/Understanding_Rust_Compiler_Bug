{"sha": "b020cee5af4cb40b9971bfb943d7bd2795b2a3eb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjAyMGNlZTVhZjRjYjQwYjk5NzFiZmI5NDNkN2JkMjc5NWIyYTNlYg==", "commit": {"author": {"name": "Jos\u00e9 Rui Faustino de Sousa", "email": "jrfsousa@gmail.com", "date": "2021-04-28T11:20:25Z"}, "committer": {"name": "Jos\u00e9 Rui Faustino de Sousa", "email": "jrfsousa@gmail.com", "date": "2021-04-28T11:20:25Z"}, "message": "Fortran: Fix double function call with -fcheck=pointer [PR]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/82376\n\t* trans-expr.c (gfc_conv_procedure_call): Evaluate function result\n\tand then pass a pointer.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/82376\n\t* gfortran.dg/PR82376.f90: New test.", "tree": {"sha": "48d6bd53ac6db605935d1f01f665a7f3cccb1242", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48d6bd53ac6db605935d1f01f665a7f3cccb1242"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b020cee5af4cb40b9971bfb943d7bd2795b2a3eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b020cee5af4cb40b9971bfb943d7bd2795b2a3eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b020cee5af4cb40b9971bfb943d7bd2795b2a3eb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b020cee5af4cb40b9971bfb943d7bd2795b2a3eb/comments", "author": {"login": "jrfsousa", "id": 56982651, "node_id": "MDQ6VXNlcjU2OTgyNjUx", "avatar_url": "https://avatars.githubusercontent.com/u/56982651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrfsousa", "html_url": "https://github.com/jrfsousa", "followers_url": "https://api.github.com/users/jrfsousa/followers", "following_url": "https://api.github.com/users/jrfsousa/following{/other_user}", "gists_url": "https://api.github.com/users/jrfsousa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrfsousa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrfsousa/subscriptions", "organizations_url": "https://api.github.com/users/jrfsousa/orgs", "repos_url": "https://api.github.com/users/jrfsousa/repos", "events_url": "https://api.github.com/users/jrfsousa/events{/privacy}", "received_events_url": "https://api.github.com/users/jrfsousa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jrfsousa", "id": 56982651, "node_id": "MDQ6VXNlcjU2OTgyNjUx", "avatar_url": "https://avatars.githubusercontent.com/u/56982651?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jrfsousa", "html_url": "https://github.com/jrfsousa", "followers_url": "https://api.github.com/users/jrfsousa/followers", "following_url": "https://api.github.com/users/jrfsousa/following{/other_user}", "gists_url": "https://api.github.com/users/jrfsousa/gists{/gist_id}", "starred_url": "https://api.github.com/users/jrfsousa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jrfsousa/subscriptions", "organizations_url": "https://api.github.com/users/jrfsousa/orgs", "repos_url": "https://api.github.com/users/jrfsousa/repos", "events_url": "https://api.github.com/users/jrfsousa/events{/privacy}", "received_events_url": "https://api.github.com/users/jrfsousa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea3d2e3c164cb4a32f5c82aa49693de260db3501", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ea3d2e3c164cb4a32f5c82aa49693de260db3501", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ea3d2e3c164cb4a32f5c82aa49693de260db3501"}], "stats": {"total": 66, "additions": 61, "deletions": 5}, "files": [{"sha": "b83b021755d085b42f34f1b3863957416aee1976", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b020cee5af4cb40b9971bfb943d7bd2795b2a3eb/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b020cee5af4cb40b9971bfb943d7bd2795b2a3eb/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=b020cee5af4cb40b9971bfb943d7bd2795b2a3eb", "patch": "@@ -6014,11 +6014,8 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\t\t    || (!e->value.function.esym\n \t\t\t\t&& e->symtree->n.sym->attr.pointer))\n \t\t\t&& fsym && fsym->attr.target)\n-\t\t{\n-\t\t  gfc_conv_expr (&parmse, e);\n-\t\t  parmse.expr = gfc_build_addr_expr (NULL_TREE, parmse.expr);\n-\t\t}\n-\n+\t\t/* Make sure the function only gets called once.  */\n+\t\tgfc_conv_expr_reference (&parmse, e, false);\n \t      else if (e->expr_type == EXPR_FUNCTION\n \t\t       && e->symtree->n.sym->result\n \t\t       && e->symtree->n.sym->result != e->symtree->n.sym"}, {"sha": "07143ab7e82e1f2319ef1ec2fed432fc3748ad77", "filename": "gcc/testsuite/gfortran.dg/PR82376.f90", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b020cee5af4cb40b9971bfb943d7bd2795b2a3eb/gcc%2Ftestsuite%2Fgfortran.dg%2FPR82376.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b020cee5af4cb40b9971bfb943d7bd2795b2a3eb/gcc%2Ftestsuite%2Fgfortran.dg%2FPR82376.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2FPR82376.f90?ref=b020cee5af4cb40b9971bfb943d7bd2795b2a3eb", "patch": "@@ -0,0 +1,59 @@\n+! { dg-do compile }\n+! { dg-options \"-fdump-tree-original -fcheck=pointer\" }\n+!\n+! Test the fix for PR82376. The pointer check was doubling up the call\n+! to new. The fix reduces the count of 'new' from 5 to 4.\n+!\n+! Contributed by Jos\u00e9 Rui Faustino de Sousa  <jrfsousa@gmail.com>\n+!\n+program main_p\n+\n+  integer, parameter :: n = 10\n+\n+  type :: foo_t\n+    integer, pointer :: v =>null()\n+  end type foo_t\n+\n+  integer, save :: pcnt = 0\n+\n+  type(foo_t) :: int\n+  integer     :: i\n+\n+  do i = 1, n\n+    call init(int, i)\n+    if(.not.associated(int%v)) stop 1\n+    if(int%v/=i) stop 2\n+    if(pcnt/=i) stop 3\n+  end do\n+\n+contains\n+\n+  function new(data) result(this)\n+    integer, target, intent(in) :: data\n+\n+    integer, pointer :: this\n+\n+    nullify(this)\n+    this => data\n+    pcnt = pcnt + 1\n+    return\n+  end function new\n+\n+  subroutine init(this, data)\n+    type(foo_t), intent(out) :: this\n+    integer,     intent(in)  :: data\n+\n+    call set(this, new(data))\n+    return\n+  end subroutine init\n+\n+  subroutine set(this, that)\n+    type(foo_t),     intent(inout) :: this\n+    integer, target, intent(in)    :: that\n+\n+    this%v => that\n+    return\n+  end subroutine set\n+\n+end program main_p\n+! { dg-final { scan-tree-dump-times \"new\" 4 \"original\" } }"}]}