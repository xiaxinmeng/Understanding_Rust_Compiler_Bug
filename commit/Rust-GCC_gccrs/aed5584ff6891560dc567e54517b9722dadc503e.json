{"sha": "aed5584ff6891560dc567e54517b9722dadc503e", "node_id": "C_kwDOANBUbNoAKGFlZDU1ODRmZjY4OTE1NjBkYzU2N2U1NDUxN2I5NzIyZGFkYzUwM2U", "commit": {"author": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-12-20T20:17:08Z"}, "committer": {"name": "Harald Anlauf", "email": "anlauf@gmx.de", "date": "2022-12-20T21:24:01Z"}, "message": "Fortran: a C interoperable function cannot have the CLASS attribute [PR95375]\n\ngcc/fortran/ChangeLog:\n\n\tPR fortran/95375\n\t* decl.cc (verify_bind_c_sym): Extend interoperability check to\n\tCLASS variables.\n\ngcc/testsuite/ChangeLog:\n\n\tPR fortran/95375\n\t* gfortran.dg/bind_c_procs_4.f90: New test.", "tree": {"sha": "010a8bb9d5343f4744c7b3a4843f4056de9154eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/010a8bb9d5343f4744c7b3a4843f4056de9154eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aed5584ff6891560dc567e54517b9722dadc503e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed5584ff6891560dc567e54517b9722dadc503e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aed5584ff6891560dc567e54517b9722dadc503e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aed5584ff6891560dc567e54517b9722dadc503e/comments", "author": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "harald-anlauf", "id": 90786862, "node_id": "MDQ6VXNlcjkwNzg2ODYy", "avatar_url": "https://avatars.githubusercontent.com/u/90786862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/harald-anlauf", "html_url": "https://github.com/harald-anlauf", "followers_url": "https://api.github.com/users/harald-anlauf/followers", "following_url": "https://api.github.com/users/harald-anlauf/following{/other_user}", "gists_url": "https://api.github.com/users/harald-anlauf/gists{/gist_id}", "starred_url": "https://api.github.com/users/harald-anlauf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/harald-anlauf/subscriptions", "organizations_url": "https://api.github.com/users/harald-anlauf/orgs", "repos_url": "https://api.github.com/users/harald-anlauf/repos", "events_url": "https://api.github.com/users/harald-anlauf/events{/privacy}", "received_events_url": "https://api.github.com/users/harald-anlauf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6504f13a0509f3937bdcdf63bf76bed7d880b72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6504f13a0509f3937bdcdf63bf76bed7d880b72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6504f13a0509f3937bdcdf63bf76bed7d880b72"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "e593518a77ee0b10dc1122aa2d762b5f5b50402a", "filename": "gcc/fortran/decl.cc", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed5584ff6891560dc567e54517b9722dadc503e/gcc%2Ffortran%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed5584ff6891560dc567e54517b9722dadc503e/gcc%2Ffortran%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.cc?ref=aed5584ff6891560dc567e54517b9722dadc503e", "patch": "@@ -5998,10 +5998,14 @@ verify_bind_c_sym (gfc_symbol *tmp_sym, gfc_typespec *ts,\n \t    }\n \t  else\n \t    {\n-              if (tmp_sym->ts.type == BT_DERIVED || ts->type == BT_DERIVED)\n-                gfc_error (\"Type declaration %qs at %L is not C \"\n-                           \"interoperable but it is BIND(C)\",\n-                           tmp_sym->name, &(tmp_sym->declared_at));\n+\t      if (tmp_sym->ts.type == BT_DERIVED || ts->type == BT_DERIVED\n+\t\t  || tmp_sym->ts.type == BT_CLASS || ts->type == BT_CLASS)\n+\t\t{\n+\t\t  gfc_error (\"Type declaration %qs at %L is not C \"\n+\t\t\t     \"interoperable but it is BIND(C)\",\n+\t\t\t     tmp_sym->name, &(tmp_sym->declared_at));\n+\t\t  retval = false;\n+\t\t}\n               else if (warn_c_binding_type)\n                 gfc_warning (OPT_Wc_binding_type, \"Variable %qs at %L \"\n                              \"may not be a C interoperable \""}, {"sha": "407d8bb9afc82ab2166e7806cd9a76d36583477f", "filename": "gcc/testsuite/gfortran.dg/bind_c_procs_4.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aed5584ff6891560dc567e54517b9722dadc503e/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_procs_4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aed5584ff6891560dc567e54517b9722dadc503e/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_procs_4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fbind_c_procs_4.f90?ref=aed5584ff6891560dc567e54517b9722dadc503e", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! PR fortran/95375 - ICE in add_use_op\n+! Contributed by G.Steinmetz\n+\n+function f() result(n) bind(c)      ! { dg-error \"not C interoperable\" }\n+  class(*), allocatable :: n\n+end\n+program p\n+  interface\n+     function f() result(n) bind(c)\n+       integer :: n\n+     end\n+  end interface\n+  if ( f() /= 0 ) stop\n+end\n+\n+! { dg-prune-output \"Type mismatch\" }"}]}