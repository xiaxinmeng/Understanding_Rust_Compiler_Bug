{"sha": "261ce1e56f828d0b18c9c0ca5dcd14452661f062", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYxY2UxZTU2ZjgyOGQwYjE4YzljMGNhNWRjZDE0NDUyNjYxZjA2Mg==", "commit": {"author": {"name": "Prakhar Bahuguna", "email": "prakhar.bahuguna@arm.com", "date": "2017-05-04T10:26:25Z"}, "committer": {"name": "Thomas Preud'homme", "email": "thopre01@gcc.gnu.org", "date": "2017-05-04T10:26:25Z"}, "message": "[ARM] Enable Purecode for ARMv8-M Baseline\n\nThis patch adds support for purecode to ARMv8-M Baseline, in addition to\nthe existing support for ARMv7-M and ARMv8-M Mainline.\n\n2017-05-04  Prakhar Bahuguna  <prakhar.bahuguna@arm.com>\n            Andre Simoes Dias Vieira  <andre.simoesdiasvieira@arm.com>\n\n    gcc/\n    * config/arm/arm.md (movsi): Change TARGET_32BIT to TARGET_HAVE_MOVT.\n    (movt splitter): Likewise.\n    * config/arm/arm.c (arm_option_check_internal): Change arm_arch_thumb2\n    to TARGET_HAVE_MOVT, and merge with -mslow-flash-data check.\n    (const_ok_for_arm): Change else to else if (TARGET_THUMB2) and add else\n    block for Thumb-1 with MOVT.\n    (thumb2_legitimate_address_p): Move code block ...\n    (can_avoid_literal_pool_for_label_p): ... into this new function.\n    (thumb1_legitimate_address_p): Add check for TARGET_HAVE_MOVT and\n    literal pool.\n    (thumb_legitimate_constant_p): Add conditional on TARGET_HAVE_MOVT\n    * doc/invoke.texi (-mpure-code): Change \"ARMv7-M targets\" for\n    \"M-profile targets with the MOVT instruction\".\n\n    gcc/testsuite/\n    * gcc.target/arm/pure-code/pure-code.exp: Add conditional for\n    check_effective_target_arm_thumb1_movt_ok.\n\nCo-Authored-By: Andre Vieira <andre.simoesdiasvieira@arm.com>\n\nFrom-SVN: r247585", "tree": {"sha": "9495abb72c031085227a8e4025311a32dce1ec5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9495abb72c031085227a8e4025311a32dce1ec5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/261ce1e56f828d0b18c9c0ca5dcd14452661f062", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261ce1e56f828d0b18c9c0ca5dcd14452661f062", "html_url": "https://github.com/Rust-GCC/gccrs/commit/261ce1e56f828d0b18c9c0ca5dcd14452661f062", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/261ce1e56f828d0b18c9c0ca5dcd14452661f062/comments", "author": null, "committer": null, "parents": [{"sha": "556cf0887e1583d109597e6e4abff2bad058abcf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/556cf0887e1583d109597e6e4abff2bad058abcf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/556cf0887e1583d109597e6e4abff2bad058abcf"}], "stats": {"total": 115, "additions": 81, "deletions": 34}, "files": [{"sha": "67a97c84ca01bc155a76c4488883a05764672ba0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261ce1e56f828d0b18c9c0ca5dcd14452661f062/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261ce1e56f828d0b18c9c0ca5dcd14452661f062/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=261ce1e56f828d0b18c9c0ca5dcd14452661f062", "patch": "@@ -1,3 +1,20 @@\n+2017-05-04  Prakhar Bahuguna  <prakhar.bahuguna@arm.com>\n+\t    Andre Simoes Dias Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/arm/arm.md (movsi): Change TARGET_32BIT to TARGET_HAVE_MOVT.\n+\t(movt splitter): Likewise.\n+\t* config/arm/arm.c (arm_option_check_internal): Change arm_arch_thumb2\n+\tto TARGET_HAVE_MOVT, and merge with -mslow-flash-data check.\n+\t(const_ok_for_arm): Change else to else if (TARGET_THUMB2) and add else\n+\tblock for Thumb-1 with MOVT.\n+\t(thumb2_legitimate_address_p): Move code block ...\n+\t(can_avoid_literal_pool_for_label_p): ... into this new function.\n+\t(thumb1_legitimate_address_p): Add check for TARGET_HAVE_MOVT and\n+\tliteral pool.\n+\t(thumb_legitimate_constant_p): Add conditional on TARGET_HAVE_MOVT\n+\t* doc/invoke.texi (-mpure-code): Change \"ARMv7-M targets\" for\n+\t\"M-profile targets with the MOVT instruction\".\n+\n 2017-05-04  Prakhar Bahuguna  <prakhar.bahuguna@arm.com>\n \n \t* gcc/config/arm/arm-builtins.c (arm_init_builtins): Rename"}, {"sha": "e0a7cabcb2ed603aedfb5762cef5a17aa3c28b01", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 50, "deletions": 28, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261ce1e56f828d0b18c9c0ca5dcd14452661f062/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261ce1e56f828d0b18c9c0ca5dcd14452661f062/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=261ce1e56f828d0b18c9c0ca5dcd14452661f062", "patch": "@@ -2833,16 +2833,16 @@ arm_option_check_internal (struct gcc_options *opts)\n       flag_pic = 0;\n     }\n \n-  /* We only support -mslow-flash-data on armv7-m targets.  */\n-  if (target_slow_flash_data\n-      && ((!(arm_arch7 && !arm_arch_notm) && !arm_arch7em)\n-\t  || (TARGET_THUMB1_P (flags) || flag_pic || TARGET_NEON)))\n-    error (\"-mslow-flash-data only supports non-pic code on armv7-m targets\");\n-\n-  /* We only support pure-code on Thumb-2 M-profile targets.  */\n-  if (target_pure_code\n-      && (!arm_arch_thumb2 || arm_arch_notm || flag_pic || TARGET_NEON))\n-    error (\"-mpure-code only supports non-pic code on armv7-m targets\");\n+  /* We only support -mpure-code and -mslow-flash-data on M-profile targets\n+     with MOVT.  */\n+  if ((target_pure_code || target_slow_flash_data)\n+      && (!TARGET_HAVE_MOVT || arm_arch_notm || flag_pic || TARGET_NEON))\n+    {\n+      const char *flag = (target_pure_code ? \"-mpure-code\" :\n+\t\t\t\t\t     \"-mslow-flash-data\");\n+      error (\"%s only supports non-pic code on M-profile targets with the \"\n+\t     \"MOVT instruction\", flag);\n+    }\n \n }\n \n@@ -4077,7 +4077,7 @@ const_ok_for_arm (HOST_WIDE_INT i)\n \t       || (i & ~0xfc000003) == 0))\n \treturn TRUE;\n     }\n-  else\n+  else if (TARGET_THUMB2)\n     {\n       HOST_WIDE_INT v;\n \n@@ -4093,6 +4093,14 @@ const_ok_for_arm (HOST_WIDE_INT i)\n       if (i == v)\n \treturn TRUE;\n     }\n+  else if (TARGET_HAVE_MOVT)\n+    {\n+      /* Thumb-1 Targets with MOVT.  */\n+      if (i > 0xffff)\n+\treturn FALSE;\n+      else\n+\treturn TRUE;\n+    }\n \n   return FALSE;\n }\n@@ -7736,6 +7744,32 @@ arm_legitimate_address_outer_p (machine_mode mode, rtx x, RTX_CODE outer,\n   return 0;\n }\n \n+/* Return true if we can avoid creating a constant pool entry for x.  */\n+static bool\n+can_avoid_literal_pool_for_label_p (rtx x)\n+{\n+  /* Normally we can assign constant values to target registers without\n+     the help of constant pool.  But there are cases we have to use constant\n+     pool like:\n+     1) assign a label to register.\n+     2) sign-extend a 8bit value to 32bit and then assign to register.\n+\n+     Constant pool access in format:\n+     (set (reg r0) (mem (symbol_ref (\".LC0\"))))\n+     will cause the use of literal pool (later in function arm_reorg).\n+     So here we mark such format as an invalid format, then the compiler\n+     will adjust it into:\n+     (set (reg r0) (symbol_ref (\".LC0\")))\n+     (set (reg r0) (mem (reg r0))).\n+     No extra register is required, and (mem (reg r0)) won't cause the use\n+     of literal pools.  */\n+  if (arm_disable_literal_pool && GET_CODE (x) == SYMBOL_REF\n+      && CONSTANT_POOL_ADDRESS_P (x))\n+    return 1;\n+  return 0;\n+}\n+\n+\n /* Return nonzero if X is a valid Thumb-2 address operand.  */\n static int\n thumb2_legitimate_address_p (machine_mode mode, rtx x, int strict_p)\n@@ -7799,23 +7833,7 @@ thumb2_legitimate_address_p (machine_mode mode, rtx x, int strict_p)\n \t\t  && thumb2_legitimate_index_p (mode, xop0, strict_p)));\n     }\n \n-  /* Normally we can assign constant values to target registers without\n-     the help of constant pool.  But there are cases we have to use constant\n-     pool like:\n-     1) assign a label to register.\n-     2) sign-extend a 8bit value to 32bit and then assign to register.\n-\n-     Constant pool access in format:\n-     (set (reg r0) (mem (symbol_ref (\".LC0\"))))\n-     will cause the use of literal pool (later in function arm_reorg).\n-     So here we mark such format as an invalid format, then the compiler\n-     will adjust it into:\n-     (set (reg r0) (symbol_ref (\".LC0\")))\n-     (set (reg r0) (mem (reg r0))).\n-     No extra register is required, and (mem (reg r0)) won't cause the use\n-     of literal pools.  */\n-  else if (arm_disable_literal_pool && code == SYMBOL_REF\n-\t   && CONSTANT_POOL_ADDRESS_P (x))\n+  else if (can_avoid_literal_pool_for_label_p (x))\n     return 0;\n \n   else if (GET_MODE_CLASS (mode) != MODE_FLOAT\n@@ -8094,6 +8112,9 @@ thumb1_index_register_rtx_p (rtx x, int strict_p)\n int\n thumb1_legitimate_address_p (machine_mode mode, rtx x, int strict_p)\n {\n+  if (TARGET_HAVE_MOVT && can_avoid_literal_pool_for_label_p (x))\n+    return 0;\n+\n   /* ??? Not clear if this is right.  Experiment.  */\n   if (GET_MODE_SIZE (mode) < 4\n       && !(reload_in_progress || reload_completed)\n@@ -8706,6 +8727,7 @@ thumb_legitimate_constant_p (machine_mode mode ATTRIBUTE_UNUSED, rtx x)\n   return (CONST_INT_P (x)\n \t  || CONST_DOUBLE_P (x)\n \t  || CONSTANT_ADDRESS_P (x)\n+\t  || (TARGET_HAVE_MOVT && GET_CODE (x) == SYMBOL_REF)\n \t  || flag_pic);\n }\n "}, {"sha": "d50059b28ab057dc8b50fafd7dad660ec1830787", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261ce1e56f828d0b18c9c0ca5dcd14452661f062/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261ce1e56f828d0b18c9c0ca5dcd14452661f062/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=261ce1e56f828d0b18c9c0ca5dcd14452661f062", "patch": "@@ -5972,7 +5972,7 @@\n   {\n   rtx base, offset, tmp;\n \n-  if (TARGET_32BIT)\n+  if (TARGET_HAVE_MOVT)\n     {\n       /* Everything except mem = const or mem = mem can be done easily.  */\n       if (MEM_P (operands[0]))\n@@ -5996,7 +5996,7 @@\n \t     }\n         }\n     }\n-  else /* TARGET_THUMB1...  */\n+  else /* Target doesn't have MOVT...  */\n     {\n       if (can_create_pseudo_p ())\n         {\n@@ -6096,7 +6096,7 @@\n (define_split\n   [(set (match_operand:SI 0 \"arm_general_register_operand\" \"\")\n \t(match_operand:SI 1 \"const_int_operand\" \"\"))]\n-  \"TARGET_32BIT\n+  \"TARGET_HAVE_MOVT\n   && (!(const_ok_for_arm (INTVAL (operands[1]))\n         || const_ok_for_arm (~INTVAL (operands[1]))))\"\n   [(clobber (const_int 0))]"}, {"sha": "68a558e9992384dac1faae64e67ea6d2c080a53f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261ce1e56f828d0b18c9c0ca5dcd14452661f062/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261ce1e56f828d0b18c9c0ca5dcd14452661f062/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=261ce1e56f828d0b18c9c0ca5dcd14452661f062", "patch": "@@ -15421,7 +15421,8 @@ by default.\n Do not allow constant data to be placed in code sections.\n Additionally, when compiling for ELF object format give all text sections the\n ELF processor-specific section attribute @code{SHF_ARM_PURECODE}.  This option\n-is only available when generating non-pic code for ARMv7-M targets.\n+is only available when generating non-pic code for M-profile targets with the\n+MOVT instruction.\n \n @item -mcmse\n @opindex mcmse"}, {"sha": "d3fc7396653d30f1c69d3d1e43b644c4ab447d15", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261ce1e56f828d0b18c9c0ca5dcd14452661f062/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261ce1e56f828d0b18c9c0ca5dcd14452661f062/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=261ce1e56f828d0b18c9c0ca5dcd14452661f062", "patch": "@@ -1,3 +1,9 @@\n+2017-05-04  Prakhar Bahuguna  <prakhar.bahuguna@arm.com>\n+\t    Andre Simoes Dias Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/arm/pure-code/pure-code.exp: Add conditional for\n+\tcheck_effective_target_arm_thumb1_movt_ok.\n+\n 2017-05-04  Prakhar Bahuguna  <prakhar.bahuguna@arm.com>\n \n \t* gcc.target/arm/fpscr.c: New file."}, {"sha": "a51092319265e1fb1cb33c7025e5e59b2d707707", "filename": "gcc/testsuite/gcc.target/arm/pure-code/pure-code.exp", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/261ce1e56f828d0b18c9c0ca5dcd14452661f062/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpure-code.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/261ce1e56f828d0b18c9c0ca5dcd14452661f062/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpure-code.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fpure-code%2Fpure-code.exp?ref=261ce1e56f828d0b18c9c0ca5dcd14452661f062", "patch": "@@ -26,8 +26,9 @@ if ![info exists DEFAULT_CFLAGS] then {\n }\n \n # The -mpure-code option is only available for M-profile targets that support\n-# thumb2.\n-if {[check_effective_target_arm_thumb2_ok]\n+# the MOVT instruction.\n+if {([check_effective_target_arm_thumb2_ok]\n+     || [check_effective_target_arm_thumb1_movt_ok])\n     && [check_effective_target_arm_cortex_m]} then {\n # Initialize `dg'.\n dg-init"}]}