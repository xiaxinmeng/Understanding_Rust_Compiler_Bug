{"sha": "e1813255d7e51520a6e0777aa57f2eb744f6e630", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE4MTMyNTVkN2U1MTUyMGE2ZTA3NzdhYTU3ZjJlYjc0NGY2ZTYzMA==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2012-02-18T20:36:16Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2012-02-18T20:36:16Z"}, "message": "invoke.texi (-fira-* options): Copy-edit.\n\n2012-02-18  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* doc/invoke.texi (-fira-* options): Copy-edit.\n\t(ira-* parameters): Copy-edit.\n\nFrom-SVN: r184373", "tree": {"sha": "111f7a1ef52830a0c1fe8c08ced3f557f4f3ad71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/111f7a1ef52830a0c1fe8c08ced3f557f4f3ad71"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1813255d7e51520a6e0777aa57f2eb744f6e630", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1813255d7e51520a6e0777aa57f2eb744f6e630", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1813255d7e51520a6e0777aa57f2eb744f6e630", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1813255d7e51520a6e0777aa57f2eb744f6e630/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d2c5dbf264631433ae44a208e69de8e1ad74f2a8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2c5dbf264631433ae44a208e69de8e1ad74f2a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2c5dbf264631433ae44a208e69de8e1ad74f2a8"}], "stats": {"total": 114, "additions": 64, "deletions": 50}, "files": [{"sha": "4292690c0f70871e8fa8048670772da94a54dac9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1813255d7e51520a6e0777aa57f2eb744f6e630/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1813255d7e51520a6e0777aa57f2eb744f6e630/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1813255d7e51520a6e0777aa57f2eb744f6e630", "patch": "@@ -1,3 +1,8 @@\n+2012-02-18  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* doc/invoke.texi (-fira-* options): Copy-edit.\n+\t(ira-* parameters): Copy-edit.\n+\n 2012-02-17  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* doc/invoke.texi: Minor copy-edits to bring into conformance with"}, {"sha": "cef6facddfca626192fd8cdaf683a78e1163a175", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 59, "deletions": 50, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1813255d7e51520a6e0777aa57f2eb744f6e630/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1813255d7e51520a6e0777aa57f2eb744f6e630/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e1813255d7e51520a6e0777aa57f2eb744f6e630", "patch": "@@ -6759,56 +6759,65 @@ optimization.\n Enabled at levels @option{-O2}, @option{-O3}, @option{-Os}.\n \n @item -fira-algorithm=@var{algorithm}\n-Use specified coloring algorithm for the integrated register\n-allocator.  The @var{algorithm} argument should be @code{priority} or\n-@code{CB}.  The first algorithm specifies Chow's priority coloring,\n-the second one specifies Chaitin-Briggs coloring.  The second\n-algorithm can be unimplemented for some architectures.  If it is\n-implemented, it is the default because Chaitin-Briggs coloring as a\n-rule generates a better code.\n+Use the specified coloring algorithm for the integrated register\n+allocator.  The @var{algorithm} argument can be @samp{priority}, which\n+specifies Chow's priority coloring, or @samp{CB}, which specifies\n+Chaitin-Briggs coloring.  Chaitin-Briggs coloring is not implemented\n+for all architectures, but for those targets that do support it, it is\n+the default because it generates better code.\n \n @item -fira-region=@var{region}\n Use specified regions for the integrated register allocator.  The\n-@var{region} argument should be one of @code{all}, @code{mixed}, or\n-@code{one}.  The first value means using all loops as register\n-allocation regions, the second value which is enabled by default when\n-compiling with optimization for speed (@option{-O}, @option{-O2},\n-@dots{}) means using all loops except for loops with small register\n-pressure as the regions, and third one which is enabled by default for\n-@option{-Os} or @option{-O0} means using all function as a single\n-region.  The first value can give best result for machines with small\n-size and irregular register set, the third one results in faster and\n-generates decent code and the smallest size code, and the second value\n-usually give the best results in most cases and for most\n-architectures.\n+@var{region} argument should be one of the following:\n+\n+@table @samp\n+\n+@item all\n+Use all loops as register allocation regions.\n+This can give the best results for machines with a small and/or\n+irregular register set.\n+\n+@item mixed\n+Use all loops except for loops with small register pressure \n+as the regions.  This value usually gives\n+the best results in most cases and for most architectures,\n+and is enabled by default when compiling with optimization for speed\n+(@option{-O}, @option{-O2}, @dots{}).\n+\n+@item one\n+Use all functions as a single region.  \n+This typically results in the smallest code size, and is enabled by default for\n+@option{-Os} or @option{-O0}.\n+\n+@end table\n \n @item -fira-loop-pressure\n @opindex fira-loop-pressure\n-Use IRA to evaluate register pressure in loops for decision to move\n-loop invariants.  Usage of this option usually results in generation\n-of faster and smaller code on machines with big register files (>= 32\n-registers) but it can slow compiler down.\n+Use IRA to evaluate register pressure in loops for decisions to move\n+loop invariants.  This option usually results in generation\n+of faster and smaller code on machines with large register files (>= 32\n+registers), but it can slow the compiler down.\n \n This option is enabled at level @option{-O3} for some targets.\n \n @item -fno-ira-share-save-slots\n @opindex fno-ira-share-save-slots\n-Switch off sharing stack slots used for saving call used hard\n-registers living through a call.  Each hard register will get a\n-separate stack slot and as a result function stack frame will be\n-bigger.\n+Disable sharing of stack slots used for saving call-used hard\n+registers living through a call.  Each hard register gets a\n+separate stack slot, and as a result function stack frames are\n+larger.\n \n @item -fno-ira-share-spill-slots\n @opindex fno-ira-share-spill-slots\n-Switch off sharing stack slots allocated for pseudo-registers.  Each\n-pseudo-register that did not get a hard register will get a separate\n-stack slot and as a result function stack frame will be bigger.\n+Disable sharing of stack slots allocated for pseudo-registers.  Each\n+pseudo-register that does not get a hard register gets a separate\n+stack slot, and as a result function stack frames are larger.\n \n @item -fira-verbose=@var{n}\n @opindex fira-verbose\n-Set up how verbose dump file for the integrated register allocator\n-will be.  Default value is 5.  If the value is greater or equal to 10,\n-the dump file will be stderr as if the value were @var{n} minus 10.\n+Control the verbosity of the dump file for the integrated register allocator.\n+The default value is 5.  If the value @var{n} is greater or equal to 10,\n+the dump output is sent to stderr using the same format as @var{n} minus 10.\n \n @item -fdelayed-branch\n @opindex fdelayed-branch\n@@ -9103,28 +9112,28 @@ function will not be done and optimizations depending on it will\n be disabled.  The default maximum SCC size is 10000.\n \n @item ira-max-loops-num\n-IRA uses a regional register allocation by default.  If a function\n-contains loops more than number given by the parameter, only at most\n-given number of the most frequently executed loops will form regions\n-for the regional register allocation.  The default value of the\n+IRA uses regional register allocation by default.  If a function\n+contains more loops than the number given by this parameter, only at most\n+the given number of the most frequently-executed loops form regions\n+for regional register allocation.  The default value of the\n parameter is 100.\n \n-@item ira-max-conflict-table-size\n-Although IRA uses a sophisticated algorithm of compression conflict\n-table, the table can be still big for huge functions.  If the conflict\n-table for a function could be more than size in MB given by the\n-parameter, the conflict table is not built and faster, simpler, and\n-lower quality register allocation algorithm will be used.  The\n-algorithm do not use pseudo-register conflicts.  The default value of\n-the parameter is 2000.\n+@item ira-max-conflict-table-size \n+Although IRA uses a sophisticated algorithm to compress the conflict\n+table, the table can still require excessive amounts of memory for\n+huge functions.  If the conflict table for a function could be more\n+than the size in MB given by this parameter, the register allocator\n+instead uses a faster, simpler, and lower-quality\n+algorithm that does not require building a pseudo-register conflict table.  \n+The default value of the parameter is 2000.\n \n @item ira-loop-reserved-regs\n IRA can be used to evaluate more accurate register pressure in loops\n-for decision to move loop invariants (see @option{-O3}).  The number\n-of available registers reserved for some other purposes is described\n-by this parameter.  The default value of the parameter is 2 which is\n-minimal number of registers needed for execution of typical\n-instruction.  This value is the best found from numerous experiments.\n+for decisions to move loop invariants (see @option{-O3}).  The number\n+of available registers reserved for some other purposes is given\n+by this parameter.  The default value of the parameter is 2, which is\n+the minimal number of registers needed by typical instructions.\n+This value is the best found from numerous experiments.\n \n @item loop-invariant-max-bbs-in-loop\n Loop invariant motion can be very expensive, both in compilation time and"}]}