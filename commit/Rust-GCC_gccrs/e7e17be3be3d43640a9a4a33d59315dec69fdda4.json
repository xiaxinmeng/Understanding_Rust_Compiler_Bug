{"sha": "e7e17be3be3d43640a9a4a33d59315dec69fdda4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTdlMTdiZTNiZTNkNDM2NDBhOWE0YTMzZDU5MzE1ZGVjNjlmZGRhNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-17T13:50:31Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-08-17T16:54:24Z"}, "message": "Fall back to masked_gather_load/masked_scatter_store\n\nThis adds a fallback to the masked_ variants for gather_load\nand scatter_store if the latter are not available.\n\n2021-08-17  Richard Biener  <rguenther@suse.de>\n\n\t* optabs-query.c (supports_vec_gather_load_p): Also check\n\tfor masked optabs.\n\t(supports_vec_scatter_store_p): Likewise.\n\t* tree-vect-data-refs.c (vect_gather_scatter_fn_p): Fall\n\tback to masked variants if non-masked are not supported.\n\t* tree-vect-patterns.c (vect_recog_gather_scatter_pattern):\n\tWhen we need to use masked gather/scatter but do not have\n\ta mask set up a constant true one.\n\t* tree-vect-stmts.c (vect_check_scalar_mask): Also allow\n\tnon-SSA_NAME masks.", "tree": {"sha": "1200fa8df167b20f99c29bbf2a69f7dadbb63181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1200fa8df167b20f99c29bbf2a69f7dadbb63181"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7e17be3be3d43640a9a4a33d59315dec69fdda4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e17be3be3d43640a9a4a33d59315dec69fdda4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7e17be3be3d43640a9a4a33d59315dec69fdda4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7e17be3be3d43640a9a4a33d59315dec69fdda4/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "817766f4dd2f6f3fdea2c4e6e22358b0b6b06d0d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/817766f4dd2f6f3fdea2c4e6e22358b0b6b06d0d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/817766f4dd2f6f3fdea2c4e6e22358b0b6b06d0d"}], "stats": {"total": 43, "additions": 28, "deletions": 15}, "files": [{"sha": "a6dd0fed610f2734a8524afcbd14b14087fdc65b", "filename": "gcc/optabs-query.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e17be3be3d43640a9a4a33d59315dec69fdda4/gcc%2Foptabs-query.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e17be3be3d43640a9a4a33d59315dec69fdda4/gcc%2Foptabs-query.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs-query.c?ref=e7e17be3be3d43640a9a4a33d59315dec69fdda4", "patch": "@@ -740,7 +740,8 @@ supports_vec_gather_load_p ()\n   this_fn_optabs->supports_vec_gather_load_cached = true;\n \n   this_fn_optabs->supports_vec_gather_load\n-    = supports_vec_convert_optab_p (gather_load_optab);\n+    = (supports_vec_convert_optab_p (gather_load_optab)\n+       || supports_vec_convert_optab_p (mask_gather_load_optab));\n \n   return this_fn_optabs->supports_vec_gather_load;\n }\n@@ -757,7 +758,8 @@ supports_vec_scatter_store_p ()\n   this_fn_optabs->supports_vec_scatter_store_cached = true;\n \n   this_fn_optabs->supports_vec_scatter_store\n-    = supports_vec_convert_optab_p (scatter_store_optab);\n+    = (supports_vec_convert_optab_p (scatter_store_optab)\n+       || supports_vec_convert_optab_p (mask_scatter_store_optab));\n \n   return this_fn_optabs->supports_vec_scatter_store;\n }"}, {"sha": "b7dde07fc5e4b6af79d2185be2b1141b45e2ba2d", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e17be3be3d43640a9a4a33d59315dec69fdda4/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e17be3be3d43640a9a4a33d59315dec69fdda4/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=e7e17be3be3d43640a9a4a33d59315dec69fdda4", "patch": "@@ -3735,11 +3735,17 @@ vect_gather_scatter_fn_p (vec_info *vinfo, bool read_p, bool masked_p,\n     return false;\n \n   /* Work out which function we need.  */\n-  internal_fn ifn;\n+  internal_fn ifn, alt_ifn;\n   if (read_p)\n-    ifn = masked_p ? IFN_MASK_GATHER_LOAD : IFN_GATHER_LOAD;\n+    {\n+      ifn = masked_p ? IFN_MASK_GATHER_LOAD : IFN_GATHER_LOAD;\n+      alt_ifn = IFN_MASK_GATHER_LOAD;\n+    }\n   else\n-    ifn = masked_p ? IFN_MASK_SCATTER_STORE : IFN_SCATTER_STORE;\n+    {\n+      ifn = masked_p ? IFN_MASK_SCATTER_STORE : IFN_SCATTER_STORE;\n+      alt_ifn = IFN_MASK_SCATTER_STORE;\n+    }\n \n   for (;;)\n     {\n@@ -3755,6 +3761,16 @@ vect_gather_scatter_fn_p (vec_info *vinfo, bool read_p, bool masked_p,\n \t  *offset_vectype_out = offset_vectype;\n \t  return true;\n \t}\n+      else if (!masked_p\n+\t       && internal_gather_scatter_fn_supported_p (alt_ifn, vectype,\n+\t\t\t\t\t\t\t  memory_type,\n+\t\t\t\t\t\t\t  offset_vectype,\n+\t\t\t\t\t\t\t  scale))\n+\t{\n+\t  *ifn_out = alt_ifn;\n+\t  *offset_vectype_out = offset_vectype;\n+\t  return true;\n+\t}\n \n       if (TYPE_PRECISION (offset_type) >= POINTER_SIZE\n \t  && TYPE_PRECISION (offset_type) >= element_bits)"}, {"sha": "899734005ceca8e108a6a51029706a1efbd3e174", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e17be3be3d43640a9a4a33d59315dec69fdda4/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e17be3be3d43640a9a4a33d59315dec69fdda4/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=e7e17be3be3d43640a9a4a33d59315dec69fdda4", "patch": "@@ -4820,6 +4820,9 @@ vect_recog_gather_scatter_pattern (vec_info *vinfo,\n   if (mask)\n     mask = vect_convert_mask_for_vectype (mask, gs_vectype, stmt_info,\n \t\t\t\t\t  loop_vinfo);\n+  else if (gs_info.ifn == IFN_MASK_SCATTER_STORE\n+\t   || gs_info.ifn == IFN_MASK_GATHER_LOAD)\n+    mask = build_int_cst (TREE_TYPE (truth_type_for (gs_vectype)), -1);\n \n   /* Get the invariant base and non-invariant offset, converting the\n      latter to the same width as the vector elements.  */\n@@ -4847,11 +4850,11 @@ vect_recog_gather_scatter_pattern (vec_info *vinfo,\n     {\n       tree rhs = vect_get_store_rhs (stmt_info);\n       if (mask != NULL)\n-\tpattern_stmt = gimple_build_call_internal (IFN_MASK_SCATTER_STORE, 5,\n+\tpattern_stmt = gimple_build_call_internal (gs_info.ifn, 5,\n \t\t\t\t\t\t   base, offset, scale, rhs,\n \t\t\t\t\t\t   mask);\n       else\n-\tpattern_stmt = gimple_build_call_internal (IFN_SCATTER_STORE, 4,\n+\tpattern_stmt = gimple_build_call_internal (gs_info.ifn, 4,\n \t\t\t\t\t\t   base, offset, scale, rhs);\n     }\n   gimple_call_set_nothrow (pattern_stmt, true);"}, {"sha": "4e0b2adf1dc2404bc345af30cfeb9c819084894e", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7e17be3be3d43640a9a4a33d59315dec69fdda4/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7e17be3be3d43640a9a4a33d59315dec69fdda4/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=e7e17be3be3d43640a9a4a33d59315dec69fdda4", "patch": "@@ -2510,14 +2510,6 @@ vect_check_scalar_mask (vec_info *vinfo, stmt_vec_info stmt_info,\n       return false;\n     }\n \n-  if (TREE_CODE (*mask) != SSA_NAME)\n-    {\n-      if (dump_enabled_p ())\n-\tdump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n-\t\t\t \"mask argument is not an SSA name.\\n\");\n-      return false;\n-    }\n-\n   /* If the caller is not prepared for adjusting an external/constant\n      SLP mask vector type fail.  */\n   if (slp_node"}]}