{"sha": "711d7c231fc6a5a04f65568cf17a47c270527a09", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzExZDdjMjMxZmM2YTVhMDRmNjU1NjhjZjE3YTQ3YzI3MDUyN2EwOQ==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2016-02-05T21:41:15Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2016-02-05T21:41:15Z"}, "message": "Fix fortran scalar elemental dependency mishandling\n\n\tPR fortran/66089\ngcc/fortran/\n\t* trans-expr.c (expr_is_variable, gfc_expr_is_variable): Rename\n\tthe former to the latter and make it non-static.  Update callers.\n\t* gfortran.h (gfc_expr_is_variable): New declaration.\n\t(struct gfc_ss_info): Add field needs_temporary.\n\t* trans-array.c (gfc_scalar_elemental_arg_saved_as_argument):\n\tTighten the condition on aggregate expressions with a check\n\tthat the expression is a variable and doesn't need a temporary.\n\t(gfc_conv_resolve_dependency): Add intermediary reference variable.\n\tSet the needs_temporary field.\ngcc/testsuite/\n\t* gfortran.dg/elemental_dependency_6.f90: New.\n\nFrom-SVN: r233188", "tree": {"sha": "6b50b567f3e7b484d1a22fbe37c2dcf74d0ad824", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b50b567f3e7b484d1a22fbe37c2dcf74d0ad824"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/711d7c231fc6a5a04f65568cf17a47c270527a09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/711d7c231fc6a5a04f65568cf17a47c270527a09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/711d7c231fc6a5a04f65568cf17a47c270527a09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/711d7c231fc6a5a04f65568cf17a47c270527a09/comments", "author": null, "committer": null, "parents": [{"sha": "861c7bcd62bcbbf6e14311e18ba7293cc581e1ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/861c7bcd62bcbbf6e14311e18ba7293cc581e1ff"}], "stats": {"total": 78, "additions": 68, "deletions": 10}, "files": [{"sha": "f94fbe5df0514d0602f1c1069a5f14376ebf2b48", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/711d7c231fc6a5a04f65568cf17a47c270527a09/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/711d7c231fc6a5a04f65568cf17a47c270527a09/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=711d7c231fc6a5a04f65568cf17a47c270527a09", "patch": "@@ -1,3 +1,16 @@\n+2016-02-05  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/66089\n+\t* trans-expr.c (expr_is_variable, gfc_expr_is_variable): Rename\n+\tthe former to the latter and make it non-static.  Update callers.\n+\t* gfortran.h (gfc_expr_is_variable): New declaration.\n+\t(struct gfc_ss_info): Add field needs_temporary.\n+\t* trans-array.c (gfc_scalar_elemental_arg_saved_as_argument):\n+\tTighten the condition on aggregate expressions with a check\n+\tthat the expression is a variable and doesn't need a temporary.\n+\t(gfc_conv_resolve_dependency): Add intermediary reference variable.\n+\tSet the needs_temporary field.\n+\n 2016-02-03  Andre Vehreschild  <vehre@gcc.gnu.org>\n \n \tPR fortran/67451"}, {"sha": "2ff283312b6a7a880ead63baea927156a3becf9b", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/711d7c231fc6a5a04f65568cf17a47c270527a09/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/711d7c231fc6a5a04f65568cf17a47c270527a09/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=711d7c231fc6a5a04f65568cf17a47c270527a09", "patch": "@@ -2464,10 +2464,12 @@ gfc_scalar_elemental_arg_saved_as_reference (gfc_ss_info * ss_info)\n     return true;\n \n   /* If the expression is a data reference of aggregate type,\n+     and the data reference is not used on the left hand side,\n      avoid a copy by saving a reference to the content.  */\n-  if (ss_info->expr->expr_type == EXPR_VARIABLE\n+  if (!ss_info->data.scalar.needs_temporary\n       && (ss_info->expr->ts.type == BT_DERIVED\n-\t  || ss_info->expr->ts.type == BT_CLASS))\n+\t  || ss_info->expr->ts.type == BT_CLASS)\n+      && gfc_expr_is_variable (ss_info->expr))\n     return true;\n \n   /* Otherwise the expression is evaluated to a temporary variable before the\n@@ -4461,6 +4463,7 @@ gfc_conv_resolve_dependencies (gfc_loopinfo * loop, gfc_ss * dest,\n   gfc_ss *ss;\n   gfc_ref *lref;\n   gfc_ref *rref;\n+  gfc_ss_info *ss_info;\n   gfc_expr *dest_expr;\n   gfc_expr *ss_expr;\n   int nDepend = 0;\n@@ -4471,15 +4474,16 @@ gfc_conv_resolve_dependencies (gfc_loopinfo * loop, gfc_ss * dest,\n \n   for (ss = rss; ss != gfc_ss_terminator; ss = ss->next)\n     {\n-      ss_expr = ss->info->expr;\n+      ss_info = ss->info;\n+      ss_expr = ss_info->expr;\n \n-      if (ss->info->array_outer_dependency)\n+      if (ss_info->array_outer_dependency)\n \t{\n \t  nDepend = 1;\n \t  break;\n \t}\n \n-      if (ss->info->type != GFC_SS_SECTION)\n+      if (ss_info->type != GFC_SS_SECTION)\n \t{\n \t  if (flag_realloc_lhs\n \t      && dest_expr != ss_expr\n@@ -4494,6 +4498,10 @@ gfc_conv_resolve_dependencies (gfc_loopinfo * loop, gfc_ss * dest,\n \n \t    nDepend = gfc_check_dependency (dest_expr, ss_expr, false);\n \n+\t  if (ss_info->type == GFC_SS_REFERENCE\n+\t      && gfc_check_dependency (dest_expr, ss_expr, false))\n+\t    ss_info->data.scalar.needs_temporary = 1;\n+\n \t  continue;\n \t}\n "}, {"sha": "4baadc84ef0b07baa364c45e44058fcc97442aec", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/711d7c231fc6a5a04f65568cf17a47c270527a09/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/711d7c231fc6a5a04f65568cf17a47c270527a09/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=711d7c231fc6a5a04f65568cf17a47c270527a09", "patch": "@@ -8834,8 +8834,8 @@ gfc_trans_array_constructor_copy (gfc_expr * expr1, gfc_expr * expr2)\n \n /* Tells whether the expression is to be treated as a variable reference.  */\n \n-static bool\n-expr_is_variable (gfc_expr *expr)\n+bool\n+gfc_expr_is_variable (gfc_expr *expr)\n {\n   gfc_expr *arg;\n   gfc_component *comp;\n@@ -8848,7 +8848,7 @@ expr_is_variable (gfc_expr *expr)\n   if (arg)\n     {\n       gcc_assert (expr->value.function.isym->id == GFC_ISYM_TRANSPOSE);\n-      return expr_is_variable (arg);\n+      return gfc_expr_is_variable (arg);\n     }\n \n   /* A data-pointer-returning function should be considered as a variable\n@@ -9329,7 +9329,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n      must have its components deallocated afterwards.  */\n   scalar_to_array = (expr2->ts.type == BT_DERIVED\n \t\t       && expr2->ts.u.derived->attr.alloc_comp\n-\t\t       && !expr_is_variable (expr2)\n+\t\t       && !gfc_expr_is_variable (expr2)\n \t\t       && expr1->rank && !expr2->rank);\n   scalar_to_array |= (expr1->ts.type == BT_DERIVED\n \t\t\t\t    && expr1->rank\n@@ -9373,7 +9373,7 @@ gfc_trans_assignment_1 (gfc_expr * expr1, gfc_expr * expr2, bool init_flag,\n     }\n \n   tmp = gfc_trans_scalar_assign (&lse, &rse, expr1->ts,\n-\t\t\t\t expr_is_variable (expr2) || scalar_to_array\n+\t\t\t\t gfc_expr_is_variable (expr2) || scalar_to_array\n \t\t\t\t || expr2->expr_type == EXPR_ARRAY,\n \t\t\t\t !(l_is_temp || init_flag) && dealloc);\n   gfc_add_expr_to_block (&body, tmp);"}, {"sha": "316ee9b540f5cec6d1e152f417c821d889d6686c", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/711d7c231fc6a5a04f65568cf17a47c270527a09/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/711d7c231fc6a5a04f65568cf17a47c270527a09/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=711d7c231fc6a5a04f65568cf17a47c270527a09", "patch": "@@ -210,6 +210,10 @@ typedef struct gfc_ss_info\n \t this is the symbol of the corresponding dummy argument.  */\n       gfc_symbol *dummy_arg;\n       tree value;\n+      /* Tells that the scalar is a reference to a variable that might\n+\t be present on the lhs, so that we should evaluate the value\n+\t itself before the loop, not just the reference.  */\n+      unsigned needs_temporary:1;\n     }\n     scalar;\n \n@@ -464,6 +468,7 @@ bool gfc_conv_ieee_arithmetic_function (gfc_se *, gfc_expr *);\n tree gfc_save_fp_state (stmtblock_t *);\n void gfc_restore_fp_state (stmtblock_t *, tree);\n \n+bool gfc_expr_is_variable (gfc_expr *);\n \n /* Does an intrinsic map directly to an external library call\n    This is true for array-returning intrinsics, unless"}, {"sha": "61306d0fdd0887e6f7224ce3add1f5eb3afe5976", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/711d7c231fc6a5a04f65568cf17a47c270527a09/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/711d7c231fc6a5a04f65568cf17a47c270527a09/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=711d7c231fc6a5a04f65568cf17a47c270527a09", "patch": "@@ -1,3 +1,8 @@\n+2016-02-05  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/66089\n+\t* gfortran.dg/elemental_dependency_6.f90: New.\n+\n 2016-02-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/69691"}, {"sha": "fd1aa401cd12ff3b0f83703c2457835cf2fc99a8", "filename": "gcc/testsuite/gfortran.dg/elemental_dependency_6.f90", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/711d7c231fc6a5a04f65568cf17a47c270527a09/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_dependency_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/711d7c231fc6a5a04f65568cf17a47c270527a09/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_dependency_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_dependency_6.f90?ref=711d7c231fc6a5a04f65568cf17a47c270527a09", "patch": "@@ -0,0 +1,27 @@\n+! { dg-do run }\n+!\n+! PR fortran/66089\n+! Check that we do create a temporary for C(1) below in the assignment\n+! to C.\n+\n+  type :: t\n+    integer :: c\n+  end type t\n+\n+  type(t), dimension(5) :: b, c\n+\n+  b = t(7)\n+  c = t(13)\n+  c = plus(c(1), b)\n+! print *, c\n+  if (any(c%c /= 20)) call abort\n+\n+contains\n+\n+  elemental function plus(lhs, rhs)\n+    type(t), intent(in) :: lhs, rhs\n+    type(t)             :: plus\n+    plus%c = lhs%c + rhs%c\n+  end function plus\n+\n+end"}]}