{"sha": "d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDNkYmU1YTQ4YmYyZDRhMjIyNTkwMGNlZTM2ZmMzMWIwMGUwZjRmOQ==", "commit": {"author": {"name": "Revital Eres", "email": "eres@il.ibm.com", "date": "2009-09-25T05:52:46Z"}, "committer": {"name": "Revital Eres", "email": "revitale@gcc.gnu.org", "date": "2009-09-25T05:52:46Z"}, "message": "Vectorizer testsuite adjustments for P7\n\nFrom-SVN: r152157", "tree": {"sha": "1732babdc6671e15038114f2c44561cd9239d3a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1732babdc6671e15038114f2c44561cd9239d3a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/comments", "author": {"login": "revit13", "id": 16211463, "node_id": "MDQ6VXNlcjE2MjExNDYz", "avatar_url": "https://avatars.githubusercontent.com/u/16211463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/revit13", "html_url": "https://github.com/revit13", "followers_url": "https://api.github.com/users/revit13/followers", "following_url": "https://api.github.com/users/revit13/following{/other_user}", "gists_url": "https://api.github.com/users/revit13/gists{/gist_id}", "starred_url": "https://api.github.com/users/revit13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/revit13/subscriptions", "organizations_url": "https://api.github.com/users/revit13/orgs", "repos_url": "https://api.github.com/users/revit13/repos", "events_url": "https://api.github.com/users/revit13/events{/privacy}", "received_events_url": "https://api.github.com/users/revit13/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "677494982bb51e11620b30a5f17601dba987a10c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/677494982bb51e11620b30a5f17601dba987a10c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/677494982bb51e11620b30a5f17601dba987a10c"}], "stats": {"total": 516, "additions": 516, "deletions": 0}, "files": [{"sha": "0c87bf1a00f74805d35079311c0b5bccf507a92f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "patch": "@@ -1,3 +1,17 @@\n+2009-09-25  Revital Eres  <ERES@il.ibm.com>\n+\n+\t* gcc.target/powerpc/vsx-vectorize-8.c: New test.\n+\t* gcc.target/powerpc/vsx-vectorize-1.c: Likewise.\n+\t* gcc.target/powerpc/vsx-vectorize-2.c: Likewise.\n+\t* gcc.target/powerpc/vsx-vectorize-3.c: Likewise.\n+\t* gcc.target/powerpc/vsx-vectorize-4.c: Likewise.\n+\t* gcc.target/powerpc/vsx-vectorize-5.c: Likewise.\n+\t* gcc.target/powerpc/vsx-vectorize-6.c: Likewise.\n+\t* gcc.target/powerpc/vsx-vectorize-7.c: Likewise.\n+\t* gcc.dg/vect/vect.exp: Add Power7 flags.\n+\t* g++.dg/vect/vect.exp: Likewise.\n+\t* gfortran.dg/vect/vect.exp: Likewise.\n+\n 2009-09-24  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/41459"}, {"sha": "b735c223334476053cbfc2e8ab56cfabdbd54c80", "filename": "gcc/testsuite/g++.dg/vect/vect.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fvect%2Fvect.exp?ref=d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "patch": "@@ -59,6 +59,10 @@ if  [istarget \"powerpc-*paired*\"]  {\n     }\n \n     lappend DEFAULT_VECTCFLAGS \"-maltivec\"\n+    if [check_vsx_hw_available]  {\n+      lappend DEFAULT_VECTCFLAGS \"-mvsx\" \"-mno-allow-movmisalign\"\n+    }\n+\n     if [check_vmx_hw_available] {\n \tset dg-do-what-default run\n     } else {"}, {"sha": "6b544c28c6ea11cc2dbe101bba564b6bc6f900e6", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "patch": "@@ -51,6 +51,10 @@ if  [istarget \"powerpc-*paired*\"]  {\n     }\n \n     lappend DEFAULT_VECTCFLAGS \"-maltivec\"\n+    if [check_vsx_hw_available]  {\n+      lappend DEFAULT_VECTCFLAGS \"-mvsx\" \"-mno-allow-movmisalign\"\n+    }\n+\n     if [check_vmx_hw_available] {\n \tset dg-do-what-default run\n     } else {"}, {"sha": "2538ad987d24c6ca13493061501770bf78180977", "filename": "gcc/testsuite/gcc.target/vsx-vectorize-1.c", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-1.c?ref=d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "patch": "@@ -0,0 +1,54 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mcpu=power7 -O2 -ftree-vectorize -fno-vect-cost-model -fdump-tree-vect-details\" } */\n+\n+/* Taken from vect/vect-align-1.c.  */\n+#include <stdlib.h>\n+#include <stdarg.h>\n+\n+/* Compile time known misalignment. Cannot use loop peeling to align\n+   the store.  */\n+\n+#define N 16\n+\n+struct foo {\n+  char x;\n+  int y[N];\n+} __attribute__((packed));\n+\n+int x[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15};\n+\n+__attribute__ ((noinline)) int\n+main1 (struct foo * __restrict__ p)\n+{\n+  int i;\n+\n+  for (i = 0; i < N; i++)\n+    {\n+      p->y[i] = x[i];\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (p->y[i] != x[i])\n+\tabort ();\n+    }\n+  return 0;\n+}\n+\n+\n+int main (void)\n+{\n+  int i;\n+  struct foo *p = malloc (2*sizeof (struct foo));\n+  \n+  main1 (p);\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "e558f413c92a14d924f18d955c3192ae0d740965", "filename": "gcc/testsuite/gcc.target/vsx-vectorize-2.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-2.c?ref=d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mcpu=power7 -O2 -ftree-vectorize -fno-vect-cost-model -fdump-tree-vect-details\" } */\n+\n+/* Taken from vect/vect-95.c.  */\n+#include <stdlib.h>\n+#include <stdarg.h>\n+\n+#define N 256\n+\n+__attribute__ ((noinline))\n+void bar (float *pd, float *pa, float *pb, float *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+      if (pd[i] != 5.0)\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+__attribute__ ((noinline)) int\n+main1 (int n, float * __restrict__ pd, float * __restrict__ pa, float * __restrict__ pb, float * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+      pd[i] = 5.0;\n+    }\n+\n+  bar (pd,pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  float a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  float d[N+1] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  float b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  float c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  main1 (N,&d[1],a,b,c);\n+  main1 (N-2,&d[1],a,b,c);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "b99bcca49f44d60f271b72e7cecf1ca2757510e7", "filename": "gcc/testsuite/gcc.target/vsx-vectorize-3.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-3.c?ref=d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mcpu=power7 -O2 -ftree-vectorize -fno-vect-cost-model -fdump-tree-vect-details\" } */\n+\n+/* Taken from vect/vect-95.c.  */\n+#include <stdlib.h>\n+#include <stdarg.h>\n+\n+#define N 256\n+\n+__attribute__ ((noinline))\n+void bar (short *pa, short *pb, short *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+__attribute__ ((noinline)) int\n+main1 (int n, short * __restrict__ pa, short * __restrict__ pb, short * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  short a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  short b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  short c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  main1 (N,a,b,c);\n+  main1 (N-2,a,b,c);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "a3bd7e69674279c559e06e7501191c74676cb251", "filename": "gcc/testsuite/gcc.target/vsx-vectorize-4.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-4.c?ref=d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mcpu=power7 -O2 -ftree-vectorize -fno-vect-cost-model -fdump-tree-vect-details\" } */\n+\n+/* Taken from vect/vect-95.c.  */\n+#include <stdlib.h>\n+#include <stdarg.h>\n+\n+#define N 256\n+\n+__attribute__ ((noinline))\n+void bar (double *pa, double *pb, double *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+__attribute__ ((noinline)) int\n+main1 (int n, double * __restrict__ pa, double * __restrict__ pb, double * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  double a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  double b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  double c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  main1 (N,a,b,c);\n+  main1 (N-2,a,b,c);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 3 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "32d05b29829f59771e5baee74e4021c942bfc358", "filename": "gcc/testsuite/gcc.target/vsx-vectorize-5.c", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-5.c?ref=d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "patch": "@@ -0,0 +1,60 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mcpu=power7 -O2 -ftree-vectorize -fno-vect-cost-model -fdump-tree-vect-details\" } */\n+\n+/* Taken from vect/vect-95.c.  */\n+#include <stdlib.h>\n+#include <stdarg.h>\n+\n+#define N 256\n+\n+__attribute__ ((noinline))\n+void bar (char *pa, char *pb, char *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] + pc[i]))\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+__attribute__ ((noinline)) int\n+main1 (int n, char * __restrict__ pa, char * __restrict__ pb, char * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] + pc[i];\n+    }\n+\n+  bar (pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  char a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  char b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  char c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  main1 (N,a,b,c);\n+  main1 (N-2,a,b,c);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "c46c8a747115377499354b2bd6d043dd1a26c137", "filename": "gcc/testsuite/gcc.target/vsx-vectorize-6.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-6.c?ref=d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mcpu=power7 -O2 -ftree-vectorize -fno-vect-cost-model -fdump-tree-vect-details\" } */\n+\n+/* Taken from vect/vect-95.c.  */\n+#include <stdlib.h>\n+#include <stdarg.h>\n+\n+#define N 256\n+\n+__attribute__ ((noinline))\n+void bar (double *pd, double *pa, double *pb, double *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+      if (pd[i] != 5.0)\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+__attribute__ ((noinline)) int\n+main1 (int n, double * __restrict__ pd, double * __restrict__ pa, double * __restrict__ pb, double * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+      pd[i] = 5.0;\n+    }\n+\n+  bar (pd,pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  double a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  double d[N+1] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  double b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  double c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  main1 (N,&d[1],a,b,c);\n+  main1 (N-2,&d[1],a,b,c);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "3c57f937fc0dbbf01e4f62064f735101a17fc404", "filename": "gcc/testsuite/gcc.target/vsx-vectorize-7.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-7.c?ref=d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mcpu=power7 -O2 -ftree-vectorize -fno-vect-cost-model -fdump-tree-vect-details\" } */\n+\n+/* Taken from vect/vect-95.c.  */\n+#include <stdlib.h>\n+#include <stdarg.h>\n+\n+#define N 256\n+\n+__attribute__ ((noinline))\n+void bar (int *pd, int *pa, int *pb, int *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+      if (pd[i] != 5.0)\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+__attribute__ ((noinline)) int\n+main1 (int n, int * __restrict__ pd, int * __restrict__ pa, int * __restrict__ pb, int * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+      pd[i] = 5.0;\n+    }\n+\n+  bar (pd,pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  int a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  int d[N+1] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  int b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  int c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  main1 (N,&d[1],a,b,c);\n+  main1 (N-2,&d[1],a,b,c);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 4 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "af671ee79cb01c50cabbf7c8d3f948048eb33815", "filename": "gcc/testsuite/gcc.target/vsx-vectorize-8.c", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvsx-vectorize-8.c?ref=d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "patch": "@@ -0,0 +1,64 @@\n+/* { dg-do compile { target { powerpc*-*-* && lp64 } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } { \"*\" } { \"\" } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mcpu=power7 -O2 -ftree-vectorize -fno-vect-cost-model -fdump-tree-vect-details\" } */\n+\n+/* Taken from vect/vect-95.c.  */\n+#include <stdlib.h>\n+#include <stdarg.h>\n+\n+#define N 256\n+\n+__attribute__ ((noinline))\n+void bar (short *pd, short *pa, short *pb, short *pc) \n+{\n+  int i;\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      if (pa[i] != (pb[i] * pc[i]))\n+\tabort ();\n+      if (pd[i] != 5.0)\n+\tabort ();\n+    }\n+\n+  return;\n+}\n+\n+\n+__attribute__ ((noinline)) int\n+main1 (int n, short * __restrict__ pd, short * __restrict__ pa, short * __restrict__ pb, short * __restrict__ pc)\n+{\n+  int i;\n+\n+  for (i = 0; i < n; i++)\n+    {\n+      pa[i] = pb[i] * pc[i];\n+      pd[i] = 5.0;\n+    }\n+\n+  bar (pd,pa,pb,pc);\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{\n+  int i;\n+  short a[N] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  short d[N+1] __attribute__ ((__aligned__(__BIGGEST_ALIGNMENT__)));\n+  short b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n+  short c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n+\n+  main1 (N,&d[1],a,b,c);\n+  main1 (N-2,&d[1],a,b,c);\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 0 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using versioning\" 2 \"vect\" } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 2 \"vect\" } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "d818e7dcf4c401bd9fbe10280c26963396b15982", "filename": "gcc/testsuite/gfortran.dg/vect/vect.exp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fvect.exp?ref=d3dbe5a48bf2d4a2225900cee36fc31b00e0f4f9", "patch": "@@ -52,6 +52,10 @@ if  [istarget \"powerpc-*paired*\"]  {\n     }\n \n     lappend DEFAULT_VECTCFLAGS \"-maltivec\"\n+    if [check_vsx_hw_available]  {\n+      lappend DEFAULT_VECTCFLAGS \"-mvsx\" \"-mno-allow-movmisalign\"\n+    }\n+\n     if [check_vmx_hw_available] {\n \tset dg-do-what-default run\n     } else {"}]}