{"sha": "8509e17091254d25b7dfe4c83a79331bd08f7dae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODUwOWUxNzA5MTI1NGQyNWI3ZGZlNGM4M2E3OTMzMWJkMDhmN2RhZQ==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2019-05-20T00:13:41Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2019-05-20T00:13:41Z"}, "message": "rs6000: Delete the \"wy\" constraint\n\nThis replaces the \"wy\" constraint by \"wa\", with isa \"p8v\".  It also\ncreates a new attribute <Fisa>, used together with all <Fv2>.\n\n\n\t* config/rs6000/constraints.md (define_register_constraint \"wy\"):\n\tDelete.\n\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n\tRS6000_CONSTRAINT_wy.\n\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n\t(rs6000_init_hard_regno_mode_ok): Adjust.\n\t* config/rs6000/rs6000.md: Replace \"wy\" constraint by \"wa\" with \"p8v\".\n\tUse \"<Fisa>\" as \"isa\" in all alternatives that use \"<Fv2>\".\n\t(define_mode_attr Fisa): New.\n\t* config/rs6000/vsx.md: Replace \"wy\" constraint by \"wa\" with \"p8v\".\n\t* doc/md.texi (Machine Constraints): Adjust.\n\nFrom-SVN: r271389", "tree": {"sha": "3aa97861956a334b80ac26f61de7819494ae5809", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3aa97861956a334b80ac26f61de7819494ae5809"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8509e17091254d25b7dfe4c83a79331bd08f7dae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8509e17091254d25b7dfe4c83a79331bd08f7dae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8509e17091254d25b7dfe4c83a79331bd08f7dae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8509e17091254d25b7dfe4c83a79331bd08f7dae/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "49d187c66d4b2d3fd90483b7015d48dbe69ced44", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49d187c66d4b2d3fd90483b7015d48dbe69ced44", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49d187c66d4b2d3fd90483b7015d48dbe69ced44"}], "stats": {"total": 120, "additions": 71, "deletions": 49}, "files": [{"sha": "06c4f4449466c73c084b6c20697c893f300ddca4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8509e17091254d25b7dfe4c83a79331bd08f7dae", "patch": "@@ -1,3 +1,17 @@\n+2019-05-19  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md (define_register_constraint \"wy\"):\n+\tDelete.\n+\t* config/rs6000/rs6000.h (enum r6000_reg_class_enum): Delete\n+\tRS6000_CONSTRAINT_wy.\n+\t* config/rs6000/rs6000.c (rs6000_debug_reg_global): Adjust.\n+\t(rs6000_init_hard_regno_mode_ok): Adjust.\n+\t* config/rs6000/rs6000.md: Replace \"wy\" constraint by \"wa\" with \"p8v\".\n+\tUse \"<Fisa>\" as \"isa\" in all alternatives that use \"<Fv2>\".\n+\t(define_mode_attr Fisa): New.\n+\t* config/rs6000/vsx.md: Replace \"wy\" constraint by \"wa\" with \"p8v\".\n+\t* doc/md.texi (Machine Constraints): Adjust.\n+\n 2019-05-19  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* config/rs6000/constraints.md (define_register_constraint \"wu\"):"}, {"sha": "58394eaaa8a6fb68f5f8c1e8ceebc315aca79797", "filename": "gcc/config/rs6000/constraints.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2Fconfig%2Frs6000%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fconstraints.md?ref=8509e17091254d25b7dfe4c83a79331bd08f7dae", "patch": "@@ -118,9 +118,6 @@\n (define_register_constraint \"wx\" \"rs6000_constraints[RS6000_CONSTRAINT_wx]\"\n   \"Floating point register if the STFIWX instruction is enabled or NO_REGS.\")\n \n-(define_register_constraint \"wy\" \"rs6000_constraints[RS6000_CONSTRAINT_wy]\"\n-  \"FP or VSX register to perform ISA 2.07 float ops or NO_REGS.\")\n-\n (define_register_constraint \"wz\" \"rs6000_constraints[RS6000_CONSTRAINT_wz]\"\n   \"Floating point register if the LFIWZX instruction is enabled or NO_REGS.\")\n "}, {"sha": "ee5bb7f2f03551dcf63508c8fc19cb3c688bac72", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=8509e17091254d25b7dfe4c83a79331bd08f7dae", "patch": "@@ -2526,7 +2526,6 @@ rs6000_debug_reg_global (void)\n \t   \"wv reg_class = %s\\n\"\n \t   \"ww reg_class = %s\\n\"\n \t   \"wx reg_class = %s\\n\"\n-\t   \"wy reg_class = %s\\n\"\n \t   \"wz reg_class = %s\\n\"\n \t   \"wA reg_class = %s\\n\"\n \t   \"wH reg_class = %s\\n\"\n@@ -2554,7 +2553,6 @@ rs6000_debug_reg_global (void)\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wv]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_ww]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wx]],\n-\t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wy]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wz]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wA]],\n \t   reg_class_names[rs6000_constraints[RS6000_CONSTRAINT_wH]],\n@@ -3182,7 +3180,6 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n \twv - Altivec register for ISA 2.06 VSX DF/DI load/stores.\n \tww - Register class to do SF conversions in with VSX operations.\n \twx - Float register if we can do 32-bit int stores.\n-\twy - Register class to do ISA 2.07 SF operations.\n \twz - Float register if we can do 32-bit unsigned int loads.\n \twH - Altivec register if SImode is allowed in VSX registers.\n \twI - Float register if SImode is allowed in VSX registers.  */\n@@ -3232,10 +3229,7 @@ rs6000_init_hard_regno_mode_ok (bool global_init_p)\n     }\n \n   if (TARGET_P8_VECTOR)\t\t\t\t\t\t/* SFmode  */\n-    {\n-      rs6000_constraints[RS6000_CONSTRAINT_wy] = VSX_REGS;\n-      rs6000_constraints[RS6000_CONSTRAINT_ww] = VSX_REGS;\n-    }\n+    rs6000_constraints[RS6000_CONSTRAINT_ww] = VSX_REGS;\n   else if (TARGET_VSX)\n     rs6000_constraints[RS6000_CONSTRAINT_ww] = FLOAT_REGS;\n "}, {"sha": "96471d79488fad094fa11035f076eca45ad86233", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=8509e17091254d25b7dfe4c83a79331bd08f7dae", "patch": "@@ -1267,7 +1267,6 @@ enum r6000_reg_class_enum {\n   RS6000_CONSTRAINT_wv,\t\t/* Altivec register for double load/stores.  */\n   RS6000_CONSTRAINT_ww,\t\t/* FP or VSX register for vsx float ops.  */\n   RS6000_CONSTRAINT_wx,\t\t/* FPR register for STFIWX */\n-  RS6000_CONSTRAINT_wy,\t\t/* VSX register for SF */\n   RS6000_CONSTRAINT_wz,\t\t/* FPR register for LFIWZX */\n   RS6000_CONSTRAINT_wA,\t\t/* BASE_REGS if 64-bit.  */\n   RS6000_CONSTRAINT_wH,\t\t/* Altivec register for 32-bit integers.  */"}, {"sha": "984fe9ee40c1928e4c7d1b619f326894245fffe4", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 52, "deletions": 32, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=8509e17091254d25b7dfe4c83a79331bd08f7dae", "patch": "@@ -530,7 +530,10 @@\n ; SF/DF constraint for arithmetic on VSX registers.  This is intended to be\n ; used for DFmode instructions added in ISA 2.06 (power7) and SFmode\n ; instructions added in ISA 2.07 (power8)\n-(define_mode_attr Fv2\t\t[(SF \"wy\") (DF \"ws\") (DI \"wi\")])\n+(define_mode_attr Fv2\t\t[(SF \"wa\") (DF \"ws\") (DI \"wi\")])\n+\n+; Which isa is needed for those float instructions?\n+(define_mode_attr Fisa\t\t[(SF \"p8v\")  (DF \"*\") (DI \"*\")])\n \n ; s/d suffix for things like sdiv/ddiv\n (define_mode_attr Fs\t\t[(SF \"s\")  (DF \"d\")])\n@@ -4641,7 +4644,8 @@\n   \"@\n    fadd<Ftrad> %0,%1,%2\n    xsadd<Fvsx> %x0,%x1,%x2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"isa\" \"*,<Fisa>\")])\n \n (define_expand \"sub<mode>3\"\n   [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n@@ -4658,7 +4662,8 @@\n   \"@\n    fsub<Ftrad> %0,%1,%2\n    xssub<Fvsx> %x0,%x1,%x2\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"isa\" \"*,<Fisa>\")])\n \n (define_expand \"mul<mode>3\"\n   [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n@@ -4675,7 +4680,8 @@\n   \"@\n    fmul<Ftrad> %0,%1,%2\n    xsmul<Fvsx> %x0,%x1,%x2\"\n-  [(set_attr \"type\" \"dmul\")])\n+  [(set_attr \"type\" \"dmul\")\n+   (set_attr \"isa\" \"*,<Fisa>\")])\n \n (define_expand \"div<mode>3\"\n   [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n@@ -4700,7 +4706,8 @@\n   \"@\n    fdiv<Ftrad> %0,%1,%2\n    xsdiv<Fvsx> %x0,%x1,%x2\"\n-  [(set_attr \"type\" \"<Fs>div\")])\n+  [(set_attr \"type\" \"<Fs>div\")\n+   (set_attr \"isa\" \"*,<Fisa>\")])\n \n (define_insn \"*sqrt<mode>2_internal\"\n   [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>\")\n@@ -4709,7 +4716,8 @@\n   \"@\n    fsqrt<Ftrad> %0,%1\n    xssqrt<Fvsx> %x0,%x1\"\n-  [(set_attr \"type\" \"<Fs>sqrt\")])\n+  [(set_attr \"type\" \"<Fs>sqrt\")\n+   (set_attr \"isa\" \"*,<Fisa>\")])\n \n (define_expand \"sqrt<mode>2\"\n   [(set (match_operand:SFDF 0 \"gpc_reg_operand\")\n@@ -4737,7 +4745,8 @@\n   \"@\n    fre<Ftrad> %0,%1\n    xsre<Fvsx> %x0,%x1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"isa\" \"*,<Fisa>\")])\n \n (define_insn \"*rsqrt<mode>2\"\n   [(set (match_operand:SFDF 0 \"gpc_reg_operand\" \"=<Ff>,<Fv2>\")\n@@ -4747,7 +4756,8 @@\n   \"@\n    frsqrte<Ftrad> %0,%1\n    xsrsqrte<Fvsx> %x0,%x1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"isa\" \"*,<Fisa>\")])\n \n ;; Floating point comparisons\n (define_insn \"*cmp<mode>_fpr\"\n@@ -4758,7 +4768,8 @@\n   \"@\n    fcmpu %0,%1,%2\n    xscmpudp %0,%x1,%x2\"\n-  [(set_attr \"type\" \"fpcompare\")])\n+  [(set_attr \"type\" \"fpcompare\")\n+   (set_attr \"isa\" \"*,<Fisa>\")])\n \n ;; Floating point conversions\n (define_expand \"extendsfdf2\"\n@@ -4772,7 +4783,7 @@\n \n (define_insn_and_split \"*extendsfdf2_fpr\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,?d,d,ws,?ws,wa,v\")\n-\t(float_extend:DF (match_operand:SF 1 \"reg_or_mem_operand\" \"0,f,m,0,wy,Z,wY\")))]\n+\t(float_extend:DF (match_operand:SF 1 \"reg_or_mem_operand\" \"0,f,m,0,wa,Z,wY\")))]\n   \"TARGET_HARD_FLOAT && !HONOR_SNANS (SFmode)\"\n   \"@\n    #\n@@ -4789,16 +4800,17 @@\n   DONE;\n }\n   [(set_attr \"type\" \"fp,fpsimple,fpload,fp,fpsimple,fpload,fpload\")\n-   (set_attr \"isa\" \"*,*,*,*,*,p8v,p9v\")])\n+   (set_attr \"isa\" \"*,*,*,*,p8v,p8v,p9v\")])\n \n (define_insn \"*extendsfdf2_snan\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=d,ws\")\n-\t(float_extend:DF (match_operand:SF 1 \"gpc_reg_operand\" \"f,wy\")))]\n+\t(float_extend:DF (match_operand:SF 1 \"gpc_reg_operand\" \"f,wa\")))]\n   \"TARGET_HARD_FLOAT && HONOR_SNANS (SFmode)\"\n   \"@\n    frsp %0,%1\n    xsrsp %x0,%x1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"isa\" \"*,p8v\")])\n \n (define_expand \"truncdfsf2\"\n   [(set (match_operand:SF 0 \"gpc_reg_operand\")\n@@ -4807,13 +4819,14 @@\n   \"\")\n \n (define_insn \"*truncdfsf2_fpr\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wy\")\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wa\")\n \t(float_truncate:SF (match_operand:DF 1 \"gpc_reg_operand\" \"d,ws\")))]\n   \"TARGET_HARD_FLOAT\"\n   \"@\n    frsp %0,%1\n    xsrsp %x0,%x1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"isa\" \"*,p8v\")])\n \n ;; This expander is here to avoid FLOAT_WORDS_BIGENDIAN tests in\n ;; builtins.c and optabs.c that are not correct for IBM long double\n@@ -6288,16 +6301,17 @@\n })\n \n (define_insn \"floatdisf2_fcfids\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wy\")\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wa\")\n \t(float:SF (match_operand:DI 1 \"gpc_reg_operand\" \"d,wi\")))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFIDS\"\n   \"@\n    fcfids %0,%1\n    xscvsxdsp %x0,%x1\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"isa\" \"*,p8v\")])\n \n (define_insn_and_split \"*floatdisf2_mem\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wy,wy\")\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wa,wa\")\n \t(float:SF (match_operand:DI 1 \"memory_operand\" \"m,m,Z\")))\n    (clobber (match_scratch:DI 2 \"=d,d,wi\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFIDS\"\n@@ -6309,7 +6323,8 @@\n   emit_insn (gen_floatdisf2_fcfids (operands[0], operands[2]));\n   DONE;\n }\n-  [(set_attr \"length\" \"8\")])\n+  [(set_attr \"length\" \"8\")\n+   (set_attr \"isa\" \"*,p8v,p8v\")])\n \n ;; This is not IEEE compliant if rounding mode is \"round to nearest\".\n ;; If the DI->DF conversion is inexact, then it's possible to suffer\n@@ -6377,7 +6392,7 @@\n    (set_attr \"isa\" \"*,p8v\")])\n \n (define_insn_and_split \"*floatunsdisf2_mem\"\n-  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wy,wy\")\n+  [(set (match_operand:SF 0 \"gpc_reg_operand\" \"=f,wa,wa\")\n \t(unsigned_float:SF (match_operand:DI 1 \"memory_operand\" \"m,m,Z\")))\n    (clobber (match_scratch:DI 2 \"=d,d,wi\"))]\n   \"TARGET_HARD_FLOAT && TARGET_FCFIDUS\"\n@@ -6389,8 +6404,9 @@\n   emit_insn (gen_floatunsdisf2_fcfidus (operands[0], operands[2]));\n   DONE;\n }\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"type\" \"fpload\")])\n+  [(set_attr \"type\" \"fpload\")\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"isa\" \"*,p8v,p8v\")])\n \f\n ;; Define the TImode operations that can be done in a small number\n ;; of instructions.  The & constraints are to prevent the register\n@@ -7410,10 +7426,10 @@\n (define_insn_and_split \"movsf_from_si\"\n   [(set (match_operand:SF 0 \"nonimmediate_operand\"\n \t    \"=!r,       f,         v,         wa,        m,         Z,\n-\t     Z,         wy,        ?r,        !r\")\n+\t     Z,         wa,        ?r,        !r\")\n \t(unspec:SF [(match_operand:SI 1 \"input_operand\" \n \t    \"m,         m,         wY,        Z,         r,         f,\n-\t     wa,        r,         wy,        r\")]\n+\t     wa,        r,         wa,        r\")]\n \t\t   UNSPEC_SF_FROM_SI))\n    (clobber (match_scratch:DI 2\n \t    \"=X,        X,         X,         X,         X,         X,\n@@ -7457,7 +7473,7 @@\n \t     fpstore,    vecfloat,  mffgpr,    *\")\n    (set_attr \"isa\"\n \t    \"*,          *,         p9v,       p8v,       *,         *,\n-\t     p8v,        *,         *,         *\")])\n+\t     p8v,        p8v,       p8v,       *\")])\n \n \f\n ;; Move 64-bit binary/decimal floating point\n@@ -13301,7 +13317,8 @@\n    fmadd<Ftrad> %0,%1,%2,%3\n    xsmadda<Fvsx> %x0,%x1,%x2\n    xsmaddm<Fvsx> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"isa\" \"*,<Fisa>,<Fisa>\")])\n \n ; Altivec only has fma and nfms.\n (define_expand \"fms<mode>4\"\n@@ -13324,7 +13341,8 @@\n    fmsub<Ftrad> %0,%1,%2,%3\n    xsmsuba<Fvsx> %x0,%x1,%x2\n    xsmsubm<Fvsx> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"isa\" \"*,<Fisa>,<Fisa>\")])\n \n ;; If signed zeros are ignored, -(a * b - c) = -a * b + c.\n (define_expand \"fnma<mode>4\"\n@@ -13371,7 +13389,8 @@\n    fnmadd<Ftrad> %0,%1,%2,%3\n    xsnmadda<Fvsx> %x0,%x1,%x2\n    xsnmaddm<Fvsx> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"fp\")])\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"isa\" \"*,<Fisa>,<Fisa>\")])\n \n ; Not an official optab name, but used from builtins.\n (define_expand \"nfms<mode>4\"\n@@ -13397,8 +13416,8 @@\n    fnmsub<Ftrad> %0,%1,%2,%3\n    xsnmsuba<Fvsx> %x0,%x1,%x2\n    xsnmsubm<Fvsx> %x0,%x1,%x3\"\n-  [(set_attr \"type\" \"fp\")])\n-\n+  [(set_attr \"type\" \"fp\")\n+   (set_attr \"isa\" \"*,<Fisa>,<Fisa>\")])\n \f\n (define_expand \"rs6000_get_timebase\"\n   [(use (match_operand:DI 0 \"gpc_reg_operand\"))]\n@@ -14022,7 +14041,7 @@\n ;; the KFmode -> DFmode conversion using round to odd rather than the normal\n ;; conversion\n (define_insn_and_split \"trunc<mode>sf2_hw\"\n-  [(set (match_operand:SF 0 \"vsx_register_operand\" \"=wy\")\n+  [(set (match_operand:SF 0 \"vsx_register_operand\" \"=wa\")\n \t(float_truncate:SF\n \t (match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")))\n    (clobber (match_scratch:DF 2 \"=v\"))]\n@@ -14039,7 +14058,8 @@\n     operands[2] = gen_reg_rtx (DFmode);\n }\n   [(set_attr \"type\" \"vecfloat\")\n-   (set_attr \"length\" \"8\")])\n+   (set_attr \"length\" \"8\")\n+   (set_attr \"isa\" \"p8v\")])\n \n ;; Conversion between IEEE 128-bit and integer types\n "}, {"sha": "49601f8c74051f5e85a3be28a047669aa662b397", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=8509e17091254d25b7dfe4c83a79331bd08f7dae", "patch": "@@ -4168,7 +4168,7 @@\n (define_insn_and_split \"vsx_splat_v4sf\"\n   [(set (match_operand:V4SF 0 \"vsx_register_operand\" \"=wa,wa,wa\")\n \t(vec_duplicate:V4SF\n-\t (match_operand:SF 1 \"splat_input_operand\" \"Z,wy,r\")))]\n+\t (match_operand:SF 1 \"splat_input_operand\" \"Z,wa,r\")))]\n   \"TARGET_P9_VECTOR\"\n   \"@\n    lxvwsx %x0,%y1\n@@ -4182,7 +4182,8 @@\n \t\t      (const_int 0)] UNSPEC_VSX_XXSPLTW))]\n   \"\"\n   [(set_attr \"type\" \"vecload,vecperm,mftgpr\")\n-   (set_attr \"length\" \"4,8,4\")])\n+   (set_attr \"length\" \"4,8,4\")\n+   (set_attr \"isa\" \"*,p8v,*\")])\n \n ;; V4SF/V4SI splat from a vector element\n (define_insn \"vsx_xxspltw_<mode>\""}, {"sha": "f542872a2353fddb52164d6e1b12793d6272472d", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8509e17091254d25b7dfe4c83a79331bd08f7dae/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=8509e17091254d25b7dfe4c83a79331bd08f7dae", "patch": "@@ -3199,7 +3199,7 @@ Any VSX register if the @option{-mvsx} option was used or NO_REGS.\n When using any of the register constraints (@code{wa}, @code{wd},\n @code{wf}, @code{wg}, @code{wh}, @code{wi}, @code{wj}, @code{wk},\n @code{wl}, @code{wm}, @code{wp}, @code{wq}, @code{ws},\n-@code{wt}, @code{wv}, @code{ww}, or @code{wy})\n+@code{wt}, @code{wv}, or @code{ww})\n that take VSX registers, you must use @code{%x<n>} in the template so\n that the correct register is used.  Otherwise the register number\n output in the assembly file will be incorrect if an Altivec register\n@@ -3304,9 +3304,6 @@ FP or VSX register to perform float operations under @option{-mvsx} or NO_REGS.\n @item wx\n Floating point register if the STFIWX instruction is enabled or NO_REGS.\n \n-@item wy\n-FP or VSX register to perform ISA 2.07 float ops or NO_REGS.\n-\n @item wz\n Floating point register if the LFIWZX instruction is enabled or NO_REGS.\n "}]}