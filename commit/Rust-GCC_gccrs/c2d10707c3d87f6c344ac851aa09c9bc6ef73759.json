{"sha": "c2d10707c3d87f6c344ac851aa09c9bc6ef73759", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzJkMTA3MDdjM2Q4N2Y2YzM0NGFjODUxYWEwOWM5YmM2ZWY3Mzc1OQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2001-02-07T06:05:09Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2001-02-07T06:05:09Z"}, "message": "sh.md (reload_outsf): Removed.\n\n* config/sh/sh.md (reload_outsf): Removed.\n(movsf_ie): Introduce constraints for FPUL loads and stores.\n(reload_insf): Broaden the output constraint.\n\nFrom-SVN: r39511", "tree": {"sha": "f3d8b7355e002350fa14c61962b1032c2ba3bcfc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3d8b7355e002350fa14c61962b1032c2ba3bcfc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2d10707c3d87f6c344ac851aa09c9bc6ef73759", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d10707c3d87f6c344ac851aa09c9bc6ef73759", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2d10707c3d87f6c344ac851aa09c9bc6ef73759", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d10707c3d87f6c344ac851aa09c9bc6ef73759/comments", "author": null, "committer": null, "parents": [{"sha": "3dbd113495ce82dbc114a82b8018580c56592669", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3dbd113495ce82dbc114a82b8018580c56592669", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3dbd113495ce82dbc114a82b8018580c56592669"}], "stats": {"total": 54, "additions": 15, "deletions": 39}, "files": [{"sha": "09a3a714645b6e2c19089185f845b6675a53d608", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d10707c3d87f6c344ac851aa09c9bc6ef73759/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d10707c3d87f6c344ac851aa09c9bc6ef73759/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c2d10707c3d87f6c344ac851aa09c9bc6ef73759", "patch": "@@ -1,5 +1,9 @@\n 2001-02-07  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* config/sh/sh.md (reload_outsf): Removed.\n+\t(movsf_ie): Introduce constraints for FPUL loads and stores.\n+\t(reload_insf): Broaden the output constraint.\n+\n \t* config/elfos.h (INT_ASM_OP): Don't define it if it's already\n \tdefined.\n \t* config/sh/sh.h (INT_ASM_OP, ASM_OUTPUT_CONSTRUCTOR,"}, {"sha": "32d86456102dec40a95ab148da9591c4b0d91210", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 11, "deletions": 39, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2d10707c3d87f6c344ac851aa09c9bc6ef73759/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2d10707c3d87f6c344ac851aa09c9bc6ef73759/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=c2d10707c3d87f6c344ac851aa09c9bc6ef73759", "patch": "@@ -2940,41 +2940,6 @@\n   DONE;\n }\")\n \n-;; The '&' for operand 2 is not really true, but push_secondary_reload\n-;; insists on it.\n-;; Operand 1 must accept FPUL_REGS in case fpul is reloaded to memory,\n-;; to avoid a bogus tertiary reload.\n-;; We need a tertiary reload when a floating point register is reloaded\n-;; to memory, so the predicate for operand 0 must accept this, while the \n-;; constraint of operand 1 must reject the secondary reload register.\n-;; Thus, the secondary reload register for this case has to be GENERAL_REGS,\n-;; too.\n-;; By having the predicate for operand 0 reject any register, we make\n-;; sure that the ordinary moves that just need an intermediate register\n-;; won't get a bogus tertiary reload.\n-;; We use tertiary_reload_operand instead of memory_operand here because\n-;; memory_operand rejects operands that are not directly addressible, e.g.:\n-;; (mem:SF (plus:SI (reg:SI FP_REG)\n-;;         (const_int 132)))\n-\n-(define_expand \"reload_outsf\"\n-  [(parallel [(set (match_operand:SF 2 \"register_operand\" \"=&r\")\n-\t\t   (match_operand:SF 1 \"register_operand\" \"y\"))\n-\t      (clobber (scratch:SI))])\n-   (parallel [(set (match_operand:SF 0 \"tertiary_reload_operand\" \"=m\")\n-\t\t   (match_dup 2))\n-\t      (clobber (scratch:SI))])]\n-  \"\"\n-  \"\n-{\n-  if (TARGET_SH3E)\n-    {\n-      emit_insn (gen_movsf_ie (operands[2], operands[1], get_fpscr_rtx ()));\n-      emit_insn (gen_movsf_ie (operands[0], operands[2], get_fpscr_rtx ()));\n-      DONE;\n-    }\n-}\")\n-\n ;; If the output is a register and the input is memory or a register, we have\n ;; to be careful and see which word needs to be loaded first.  \n \n@@ -3119,15 +3084,22 @@\n ;; when the destination changes mode.\n (define_insn \"movsf_ie\"\n   [(set (match_operand:SF 0 \"general_movdst_operand\"\n-\t \"=f,r,f,f,fy,f,m,r,r,m,f,y,y,rf,r,y,y\")\n+\t \"=f,r,f,f,fy,f,m,r,r,m,f,y,y,rf,r<,y,y\")\n \t(match_operand:SF 1 \"general_movsrc_operand\"\n-\t  \"f,r,G,H,FQ,mf,f,FQ,mr,r,y,f,>,fr,y,r,y\"))\n+\t  \"f,r,G,H,FQ,mf,f,FQ,mr,r,y,f,>,fr,y,r>,y\"))\n    (use (match_operand:PSI 2 \"fpscr_operand\" \"c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c,c\"))\n    (clobber (match_scratch:SI 3 \"=X,X,X,X,&z,X,X,X,X,X,X,X,X,y,X,X,X\"))]\n \n   \"TARGET_SH3E\n    && (arith_reg_operand (operands[0], SFmode)\n-       || arith_reg_operand (operands[1], SFmode))\"\n+       || arith_reg_operand (operands[1], SFmode)\n+       || arith_reg_operand (operands[3], SImode)\n+       || (fpul_operand (operands[0], SFmode)\n+\t   && memory_operand (operands[1], SFmode)\n+\t   && GET_CODE (XEXP (operands[1], 0)) == POST_INC)\n+       || (fpul_operand (operands[1], SFmode)\n+\t   && memory_operand (operands[0], SFmode)\n+\t   && GET_CODE (XEXP (operands[0], 0)) == PRE_DEC))\"\n   \"@\n \tfmov\t%1,%0\n \tmov\t%1,%0\n@@ -3188,7 +3160,7 @@\n    (set_attr \"type\" \"nil\")])\n \n (define_expand \"reload_insf\"\n-  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n+  [(parallel [(set (match_operand:SF 0 \"register_operand\" \"=a\")\n \t\t   (match_operand:SF 1 \"immediate_operand\" \"FQ\"))\n \t      (use (reg:PSI FPSCR_REG))\n \t      (clobber (match_operand:SI 2 \"register_operand\" \"=&z\"))])]"}]}