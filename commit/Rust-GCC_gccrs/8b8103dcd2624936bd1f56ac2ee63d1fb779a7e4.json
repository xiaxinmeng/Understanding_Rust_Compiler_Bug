{"sha": "8b8103dcd2624936bd1f56ac2ee63d1fb779a7e4", "node_id": "C_kwDOANBUbNoAKDhiODEwM2RjZDI2MjQ5MzZiZDFmNTZhYzJlZTYzZDFmYjc3OWE3ZTQ", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-24T05:55:02Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-07-24T15:00:51Z"}, "message": "Minor fixes to vr_values to not die on non integral types.\n\nThe legacy code in vr_values mostly works on integral types (with few\nexceptions such as some conversions from float).  This patch makes\nvr_values::range_of_expr not die when asked for a range of an\nunsupported type.  It also keeps the min/max simplification code from\nbeing called on non integrals, similarly to what many of the other\nassignment code is doing.\n\nThis is all a nop on the current code, but will keep us from\nmisbehaving when VRP starts working on non-integrals.\n\nTested on x86-64 Linux.\n\ngcc/ChangeLog:\n\n\t* value-query.cc (range_query::get_value_range): Add assert.\n\t* vr-values.cc (vr_values::range_of_expr): Make sure we don't ICE\n\ton unsupported types in vr_values.\n\t(simplify_using_ranges::simplify): Same.", "tree": {"sha": "63324e877c0b2e0b4f88025af9ae2ccbc1341b1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63324e877c0b2e0b4f88025af9ae2ccbc1341b1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8b8103dcd2624936bd1f56ac2ee63d1fb779a7e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b8103dcd2624936bd1f56ac2ee63d1fb779a7e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8b8103dcd2624936bd1f56ac2ee63d1fb779a7e4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8b8103dcd2624936bd1f56ac2ee63d1fb779a7e4/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "164758b02c44cba66e00103c118c6a4b5f76a812", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/164758b02c44cba66e00103c118c6a4b5f76a812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/164758b02c44cba66e00103c118c6a4b5f76a812"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "decf5aae1feb45bcfef9e10e02457f774183f3a5", "filename": "gcc/value-query.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8103dcd2624936bd1f56ac2ee63d1fb779a7e4/gcc%2Fvalue-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8103dcd2624936bd1f56ac2ee63d1fb779a7e4/gcc%2Fvalue-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.cc?ref=8b8103dcd2624936bd1f56ac2ee63d1fb779a7e4", "patch": "@@ -167,6 +167,7 @@ range_query::free_value_range_equiv (value_range_equiv *v)\n const class value_range_equiv *\n range_query::get_value_range (const_tree expr, gimple *stmt)\n {\n+  gcc_checking_assert (value_range_equiv::supports_p (TREE_TYPE (expr)));\n   int_range_max r;\n   if (range_of_expr (r, const_cast<tree> (expr), stmt))\n     return new (equiv_alloc->allocate ()) value_range_equiv (r);"}, {"sha": "626a91894726a4beef77c282aeae5f7f0b7876db", "filename": "gcc/vr-values.cc", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8b8103dcd2624936bd1f56ac2ee63d1fb779a7e4/gcc%2Fvr-values.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8b8103dcd2624936bd1f56ac2ee63d1fb779a7e4/gcc%2Fvr-values.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.cc?ref=8b8103dcd2624936bd1f56ac2ee63d1fb779a7e4", "patch": "@@ -188,6 +188,17 @@ vr_values::range_of_expr (vrange &r, tree expr, gimple *stmt)\n \tr = *vr;\n       else\n \t{\n+\t  if (!vr->supports_type_p (TREE_TYPE (expr)))\n+\t    {\n+\t      // vr_values::extract_range_basic() use of ranger's\n+\t      // fold_range() can create a situation where we are\n+\t      // asked for the range of an unsupported legacy type.\n+\t      // Since get_value_range() above will return varying for\n+\t      // such types, avoid copying incompatible range types.\n+\t      gcc_checking_assert (vr->varying_p ());\n+\t      r.set_varying (TREE_TYPE (expr));\n+\t      return true;\n+\t    }\n \t  value_range tmp = *vr;\n \t  tmp.normalize_symbolics ();\n \t  r = tmp;\n@@ -4375,7 +4386,9 @@ simplify_using_ranges::simplify (gimple_stmt_iterator *gsi)\n \n \tcase MIN_EXPR:\n \tcase MAX_EXPR:\n-\t  return simplify_min_or_max_using_ranges (gsi, stmt);\n+\t  if (INTEGRAL_TYPE_P (TREE_TYPE (rhs1)))\n+\t    return simplify_min_or_max_using_ranges (gsi, stmt);\n+\t  break;\n \n \tcase RSHIFT_EXPR:\n \t  {"}]}