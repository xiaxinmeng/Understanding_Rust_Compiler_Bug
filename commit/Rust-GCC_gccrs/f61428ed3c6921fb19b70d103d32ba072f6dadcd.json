{"sha": "f61428ed3c6921fb19b70d103d32ba072f6dadcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYxNDI4ZWQzYzY5MjFmYjE5YjcwZDEwM2QzMmJhMDcyZjZkYWRjZA==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2009-11-16T18:31:10Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2009-11-16T18:31:10Z"}, "message": "configure.ac: Add libelf to host_libs.\n\n* configure.ac: Add libelf to host_libs.  Enable in-tree configury\nof ppl and cloog.  Fix in-tree configury of libelf, skip tests.\nFix portability of test of C++ as bootstrap language.  Add\nppl/src/ppl-config.o to the bootstrap compare exclusion list.\n* configure: Rebuild.\n* Makefile.def: Drop host and target settings from gmp, mpfr, ppl,\nand cloog.  Fix in-tree ppl configuration.  Introduce libelf\nin-tree building.\n* Makefile.tpl (POSTSTAGE1_CXX_EXPORT): New.\n(POSTSTAGE1_HOST_EXPORTS): Use it.\n(STAGE[+id+]_CXXFLAGS): New.\n(BASE_FLAGS_TO_PASS): Pass it down.\n(configure-stage[+id+]-[+prefix+][+module+]): Use it.  Add\nextra_exports.\n(all-stage[+id+]-[+prefix+][+module+]): Likewise.\n(configure-[+prefix+][+module+], all-[+prefix+][+module+]): Add\nextra_exports.\n* Makefile.in: Rebuild.\n\nFrom-SVN: r154211", "tree": {"sha": "a7923af2e7f88935be83360231ca44e69183edb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7923af2e7f88935be83360231ca44e69183edb3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f61428ed3c6921fb19b70d103d32ba072f6dadcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61428ed3c6921fb19b70d103d32ba072f6dadcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61428ed3c6921fb19b70d103d32ba072f6dadcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61428ed3c6921fb19b70d103d32ba072f6dadcd/comments", "author": null, "committer": null, "parents": [{"sha": "f6c56be6ce4fd2ab07463e5a226a935eae3e1f18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c56be6ce4fd2ab07463e5a226a935eae3e1f18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6c56be6ce4fd2ab07463e5a226a935eae3e1f18"}], "stats": {"total": 2709, "additions": 1886, "deletions": 823}, "files": [{"sha": "7faddd589b4a9bedc13fc830fc16c4d6e66d3199", "filename": "ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61428ed3c6921fb19b70d103d32ba072f6dadcd/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61428ed3c6921fb19b70d103d32ba072f6dadcd/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=f61428ed3c6921fb19b70d103d32ba072f6dadcd", "patch": "@@ -1,3 +1,24 @@\n+2009-11-16  Alexandre Oliva  <aoliva@redhat.com>\n+\n+\t* configure.ac: Add libelf to host_libs.  Enable in-tree configury\n+\tof ppl and cloog.  Fix in-tree configury of libelf, skip tests.\n+\tFix portability of test of C++ as bootstrap language.  Add\n+\tppl/src/ppl-config.o to the bootstrap compare exclusion list.\n+\t* configure: Rebuild.\n+\t* Makefile.def: Drop host and target settings from gmp, mpfr, ppl,\n+\tand cloog.  Fix in-tree ppl configuration.  Introduce libelf\n+\tin-tree building.\n+\t* Makefile.tpl (POSTSTAGE1_CXX_EXPORT): New.\n+\t(POSTSTAGE1_HOST_EXPORTS): Use it.\n+\t(STAGE[+id+]_CXXFLAGS): New.\n+\t(BASE_FLAGS_TO_PASS): Pass it down.\n+\t(configure-stage[+id+]-[+prefix+][+module+]): Use it.  Add\n+\textra_exports.\n+\t(all-stage[+id+]-[+prefix+][+module+]): Likewise.\n+\t(configure-[+prefix+][+module+], all-[+prefix+][+module+]): Add\n+\textra_exports.\n+\t* Makefile.in: Rebuild.\n+\n 2009-11-17  Ben Elliston  <bje@au.ibm.com>\n \n \t* config.sub, config.guess: Update from upstream sources."}, {"sha": "496213f2f75c52d788bd25d99e8ac64c374501c6", "filename": "Makefile.def", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61428ed3c6921fb19b70d103d32ba072f6dadcd/Makefile.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61428ed3c6921fb19b70d103d32ba072f6dadcd/Makefile.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.def?ref=f61428ed3c6921fb19b70d103d32ba072f6dadcd", "patch": "@@ -62,27 +62,24 @@ host_modules= { module= gawk; };\n host_modules= { module= gettext; };\n host_modules= { module= gmp; lib_path=.libs; bootstrap=true;\n \t\textra_configure_flags='--disable-shared';\n-\t\tno_install= true; \n-\t        host=\"none-${host_vendor}-${host_os}\";\n-\t\ttarget=\"none-${host_vendor}-${host_os}\"; };\n+\t\tno_install= true; };\n host_modules= { module= mpfr; lib_path=.libs; bootstrap=true;\n \t\textra_configure_flags='--disable-shared @extra_mpfr_configure_flags@';\n-\t\tno_install= true; \n-\t        host=\"none-${host_vendor}-${host_os}\";\n-\t\ttarget=\"none-${host_vendor}-${host_os}\"; };\n+\t\tno_install= true; };\n host_modules= { module= mpc; lib_path=.libs; bootstrap=true;\n \t\textra_configure_flags='--disable-shared @extra_mpc_gmp_configure_flags@ @extra_mpc_mpfr_configure_flags@';\n \t\tno_install= true; };\n-host_modules= { module= ppl; lib_path=.libs; bootstrap=true;\n+host_modules= { module= ppl; lib_path=src/.libs; bootstrap=true;\n \t\textra_configure_flags='--disable-shared --with-libgmp-prefix=$$r/$(HOST_SUBDIR)/gmp/ --with-libgmpxx-prefix=$$r/$(HOST_SUBDIR)/gmp/';\n-\t\tno_install= true; \n-\t        host=\"none-${host_vendor}-${host_os}\";\n-\t\ttarget=\"none-${host_vendor}-${host_os}\"; };\n+\t\tno_install= true; };\n host_modules= { module= cloog; lib_path=.libs; bootstrap=true;\n-\t\textra_configure_flags='--disable-shared --with-gmp-library=$$r/$(HOST_SUBDIR)/gmp/.libs --with-gmp-include=$$r/$(HOST_SUBDIR)/gmp --with-ppl=$$r/$(HOST_SUBDIR)/ppl/ --with-bits=gmp';\n-\t\tno_install= true; \n-\t        host=\"none-${host_vendor}-${host_os}\";\n-\t\ttarget=\"none-${host_vendor}-${host_os}\"; };\n+\t\textra_configure_flags='--disable-shared --with-gmp-library=$$r/$(HOST_SUBDIR)/gmp/.libs --with-gmp-include=$$r/$(HOST_SUBDIR)/gmp --with-bits=gmp --with-ppl';\n+\t\textra_exports='CPPFLAGS=\"${CPPFLAGS} ${HOST_PPLINC}\"; export CPPFLAGS; LDFLAGS=\"$$LDFLAGS ${HOST_PPLLIBS}\"; export LDFLAGS; ';\n+\t\textra_make_flags='CPPFLAGS=\"${CPPFLAGS} ${HOST_PPLINC}\" LDFLAGS=\"$$LDFLAGS\"';\n+\t\tno_install= true; };\n+host_modules= { module= libelf; lib_path=.libs; bootstrap=true;\n+\t\textra_configure_flags='--disable-shared';\n+\t\tno_install= true; };\n host_modules= { module= gnuserv; };\n host_modules= { module= gold; bootstrap=true; };\n host_modules= { module= gprof; };\n@@ -326,6 +323,7 @@ dependencies = { module=all-gcc; on=all-mpfr; };\n dependencies = { module=all-gcc; on=all-mpc; };\n dependencies = { module=all-gcc; on=all-ppl; };\n dependencies = { module=all-gcc; on=all-cloog; };\n+dependencies = { module=all-gcc; on=all-libelf; };\n dependencies = { module=all-gcc; on=all-build-texinfo; };\n dependencies = { module=all-gcc; on=all-build-bison; };\n dependencies = { module=all-gcc; on=all-build-byacc; };"}, {"sha": "4d1e47178ef3303fb5deebb71b56ee8ab22e8480", "filename": "Makefile.in", "status": "modified", "additions": 1782, "deletions": 768, "changes": 2550, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61428ed3c6921fb19b70d103d32ba072f6dadcd/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61428ed3c6921fb19b70d103d32ba072f6dadcd/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=f61428ed3c6921fb19b70d103d32ba072f6dadcd"}, {"sha": "15102e58f676b2a809ef5514c5688f67195e8f0c", "filename": "Makefile.tpl", "status": "modified", "additions": 33, "deletions": 17, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61428ed3c6921fb19b70d103d32ba072f6dadcd/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61428ed3c6921fb19b70d103d32ba072f6dadcd/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=f61428ed3c6921fb19b70d103d32ba072f6dadcd", "patch": "@@ -229,20 +229,29 @@ HOST_EXPORTS = \\\n @endif gcc-bootstrap\n \t$(RPATH_ENVVAR)=`echo \"$(HOST_LIB_PATH)$$$(RPATH_ENVVAR)\" | sed 's,::*,:,g;s,^:*,,;s,:*$$,,'`; export $(RPATH_ENVVAR);\n \n+POSTSTAGE1_CXX_EXPORT = \\\n+\tCXX='$(CXX)'; export CXX; \\\n+\tCXX_FOR_BUILD='$(CXX_FOR_BUILD)'; export CXX_FOR_BUILD;\n+@if target-libstdc++-v3-bootstrap\n+# Override the above if we're bootstrapping C++.\n+POSTSTAGE1_CXX_EXPORT = \\\n+\tCXX=\"$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/prev-gcc/g++$(exeext) \\\n+\t  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/ -nostdinc++ \\\n+\t  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include/$(TARGET_SUBDIR) \\\n+\t  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include \\\n+\t  -I$$s/libstdc++-v3/libsupc++ \\\n+\t  -L$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/src/.libs\"; export CXX; \\\n+\tCXX_FOR_BUILD=\"$$CXX\"; export CXX_FOR_BUILD;\n+@endif target-libstdc++-v3-bootstrap\n+\n # Similar, for later GCC stages.\n POSTSTAGE1_HOST_EXPORTS = \\\n \t$(HOST_EXPORTS) \\\n \tCC=\"$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/prev-gcc/xgcc$(exeext) \\\n \t  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/ \\\n \t  $(XGCC_FLAGS_FOR_TARGET) $$TFLAGS\"; export CC; \\\n \tCC_FOR_BUILD=\"$$CC\"; export CC_FOR_BUILD; \\\n-\tCXX=\"$(STAGE_CC_WRAPPER) $$r/$(HOST_SUBDIR)/prev-gcc/g++$(exeext) \\\n-\t  -B$$r/$(HOST_SUBDIR)/prev-gcc/ -B$(build_tooldir)/bin/ -nostdinc++ \\\n-\t  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include/$(TARGET_SUBDIR) \\\n-\t  -I$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/include \\\n-\t  -I$$s/libstdc++-v3/libsupc++ \\\n-\t  -L$$r/prev-$(TARGET_SUBDIR)/libstdc++-v3/src/.libs\"; export CXX; \\\n-\tCXX_FOR_BUILD=\"$$CXX\"; export CXX_FOR_BUILD; \\\n+\t$(POSTSTAGE1_CXX_EXPORT) \\\n \tGNATBIND=\"$$r/$(HOST_SUBDIR)/prev-gcc/gnatbind\"; export GNATBIND; \\\n \tLDFLAGS=\"$(POSTSTAGE1_LDFLAGS) $(BOOT_LDFLAGS)\"; export LDFLAGS; \\\n \tHOST_LIBS=\"$(POSTSTAGE1_LIBS)\"; export HOST_LIBS;\n@@ -401,6 +410,11 @@ STAGE_CONFIGURE_FLAGS=@stage2_werror_flag@\n [+ FOR bootstrap-stage +]\n # Defaults for stage [+id+]; some are overridden below.\n STAGE[+id+]_CFLAGS = $(STAGE_CFLAGS)\n+STAGE[+id+]_CXXFLAGS = $(CXXFLAGS)\n+@if target-libstdc++-v3-bootstrap\n+# Override the above if we're bootstrapping C++.\n+STAGE[+id+]_CXXFLAGS = $(STAGE[+id+]_CFLAGS)\n+@endif target-libstdc++-v3-bootstrap\n STAGE[+id+]_TFLAGS = $(STAGE_TFLAGS)\n STAGE[+id+]_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)\n [+ ENDFOR bootstrap-stage +]\n@@ -412,8 +426,8 @@ STAGE[+id+]_CONFIGURE_FLAGS = $(STAGE_CONFIGURE_FLAGS)\n # overrideable (for a bootstrap build stage1 also builds gcc.info).\n \n STAGE1_CFLAGS = @stage1_cflags@\n-STAGE1_CHECKING=@stage1_checking@\n-STAGE1_LANGUAGES=@stage1_languages@\n+STAGE1_CHECKING = @stage1_checking@\n+STAGE1_LANGUAGES = @stage1_languages@\n # * We force-disable intermodule optimizations, even if\n #   --enable-intermodule was passed, since the installed compiler\n #   probably can't handle them.  Luckily, autoconf always respects\n@@ -528,6 +542,7 @@ BASE_FLAGS_TO_PASS =[+ FOR flags_to_pass +][+ IF optional +] \\\n \t\"`echo '[+flag+]=$([+flag+])' | sed -e s'/[^=][^=]*=$$/XFOO=/'`\"[+ ELSE optional +] \\\n \t\"[+flag+]=$([+flag+])\"[+ ENDIF optional+][+ ENDFOR flags_to_pass +][+ FOR bootstrap-stage +] \\\n \t\"STAGE[+id+]_CFLAGS=$(STAGE[+id+]_CFLAGS)\" \\\n+\t\"STAGE[+id+]_CXXFLAGS=$(STAGE[+id+]_CXXFLAGS)\" \\\n \t\"STAGE[+id+]_TFLAGS=$(STAGE[+id+]_TFLAGS)\"[+ ENDFOR bootstrap-stage +] \\\n \t\"TFLAGS=$(TFLAGS)\" \\\n \t\"CONFIG_SHELL=$(SHELL)\" \\\n@@ -575,8 +590,8 @@ POSTSTAGE1_FLAGS_TO_PASS = \\\n \tCC=\"$${CC}\" CC_FOR_BUILD=\"$${CC_FOR_BUILD}\" \\\n \tCXX=\"$${CXX}\" CXX_FOR_BUILD=\"$${CXX_FOR_BUILD}\" \\\n \tGNATBIND=\"$${GNATBIND}\" \\\n-\tLDFLAGS=\"$(POSTSTAGE1_LDFLAGS) $(BOOT_LDFLAGS)\" \\\n-\tHOST_LIBS=\"$(POSTSTAGE1_LIBS)\" \\\n+\tLDFLAGS=\"$${LDFLAGS}\" \\\n+\tHOST_LIBS=\"$${HOST_LIBS}\" \\\n \t\"`echo 'ADAFLAGS=$(BOOT_ADAFLAGS)' | sed -e s'/[^=][^=]*=$$/XFOO=/'`\"\n \n # Flags to pass down to makes which are built with the target environment.\n@@ -918,7 +933,7 @@ configure-[+prefix+][+module+]: [+ IF bootstrap +][+ ELSE +]\n \tfi; \\\n \t[+ ENDIF check_multilibs +]test ! -f [+subdir+]/[+module+]/Makefile || exit 0; \\\n \t$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+] ; \\\n-\t[+exports+] \\\n+\t[+exports+] [+extra_exports+] \\\n \techo Configuring in [+subdir+]/[+module+]; \\\n \tcd \"[+subdir+]/[+module+]\" || exit 1; \\\n \tcase $(srcdir) in \\\n@@ -967,9 +982,10 @@ configure-stage[+id+]-[+prefix+][+module+]:\n \tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\"; export CXXFLAGS; \\\n \tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"; export LIBCFLAGS;[+ ELSE prefix +] \\\n \tCFLAGS=\"$(STAGE[+id+]_CFLAGS)\"; export CFLAGS; \\\n-\tCXXFLAGS=\"$(STAGE[+id+]_CFLAGS)\"; export CXXFLAGS;[+ IF prev +] \\\n+\tCXXFLAGS=\"$(STAGE[+id+]_CXXFLAGS)\"; export CXXFLAGS;[+ IF prev +] \\\n \tLIBCFLAGS=\"$(STAGE[+id+]_CFLAGS)\"[+ ELSE prev +] \\\n-\tLIBCFLAGS=\"$(LIBCFLAGS)\"[+ ENDIF prev +]; export LIBCFLAGS;[+ ENDIF prefix +] \\\n+\tLIBCFLAGS=\"$(LIBCFLAGS)\"[+ ENDIF prev +]; export LIBCFLAGS;[+\n+  ENDIF prefix +] [+extra_exports+] \\\n \techo Configuring stage [+id+] in [+subdir+]/[+module+] ; \\\n \t$(SHELL) $(srcdir)/mkinstalldirs [+subdir+]/[+module+] ; \\\n \tcd [+subdir+]/[+module+] || exit 1; \\\n@@ -1005,7 +1021,7 @@ all-[+prefix+][+module+]: configure-[+prefix+][+module+][+ IF bootstrap +][+ ELS\n \t@: $(MAKE); $(unstage)[+ ENDIF bootstrap +]\n \t@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n-\t[+exports+] \\\n+\t[+exports+] [+extra_exports+] \\\n \t(cd [+subdir+]/[+module+] && \\\n \t  $(MAKE) $(BASE_FLAGS_TO_PASS) [+args+] [+extra_make_flags+] \\\n \t\t$(TARGET-[+prefix+][+module+]))\n@@ -1027,14 +1043,14 @@ all-stage[+id+]-[+prefix+][+module+]: configure-stage[+id+]-[+prefix+][+module+]\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n \tTFLAGS=\"$(STAGE[+id+]_TFLAGS)\"; \\\n \t[+exports+][+ IF prev +] \\\n-\t[+poststage1_exports+][+ ENDIF prev +] \\\n+\t[+poststage1_exports+][+ ENDIF prev +] [+extra_exports+] \\\n \tcd [+subdir+]/[+module+] && \\\n \t$(MAKE) $(BASE_FLAGS_TO_PASS)[+ IF prefix +] \\\n \t\tCFLAGS=\"$(CFLAGS_FOR_TARGET)\" \\\n \t\tCXXFLAGS=\"$(CXXFLAGS_FOR_TARGET)\" \\\n \t\tLIBCFLAGS=\"$(LIBCFLAGS_FOR_TARGET)\"[+ ELSE prefix +] \\\n \t\tCFLAGS=\"$(STAGE[+id+]_CFLAGS)\" \\\n-\t\tCXXFLAGS=\"$(STAGE[+id+]_CFLAGS)\"[+ IF prev +] \\\n+\t\tCXXFLAGS=\"$(STAGE[+id+]_CXXFLAGS)\"[+ IF prev +] \\\n \t\tLIBCFLAGS=\"$(STAGE[+id+]_CFLAGS)\"[+ ELSE prev +] \\\n \t\tLIBCFLAGS=\"$(LIBCFLAGS)\"[+ ENDIF prev +][+ ENDIF prefix +] \\\n \t\tCFLAGS_FOR_TARGET=\"$(CFLAGS_FOR_TARGET)\" \\"}, {"sha": "ba4aa10dc80cab8ede10a6aaeb0321ccea1f942b", "filename": "configure", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61428ed3c6921fb19b70d103d32ba072f6dadcd/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61428ed3c6921fb19b70d103d32ba072f6dadcd/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=f61428ed3c6921fb19b70d103d32ba072f6dadcd", "patch": "@@ -2893,7 +2893,7 @@ build_tools=\"build-texinfo build-byacc build-flex build-bison build-m4 build-fix\n \n # these libraries are used by various programs built for the host environment\n #\n-host_libs=\"intl mmalloc libiberty opcodes bfd readline tcl tk itcl libgui zlib libcpp libdecnumber gmp mpfr mpc ppl cloog libiconv\"\n+host_libs=\"intl mmalloc libiberty opcodes bfd readline tcl tk itcl libgui zlib libcpp libdecnumber gmp mpfr mpc ppl cloog libelf libiconv\"\n \n # these tools are built for the host environment\n # Note, the powerpc-eabi build depends on sim occurring before gdb in order to\n@@ -5751,8 +5751,6 @@ pplinc=\n # Check whether --with-ppl was given.\n if test \"${with_ppl+set}\" = set; then :\n   withval=$with_ppl;\n-else\n-  with_ppl=yes\n fi\n \n \n@@ -5772,7 +5770,7 @@ case $with_ppl in\n   no)\n     ppllibs=\n     ;;\n-  yes)\n+  \"\" | yes)\n     ;;\n   *)\n     ppllibs=\"-L$with_ppl/lib -lppl_c -lppl -lgmpxx\"\n@@ -5786,8 +5784,9 @@ if test \"x$with_ppl_lib\" != x; then\n   ppllibs=\"-L$with_ppl_lib -lppl_c -lppl -lgmpxx\"\n fi\n if test \"x$with_ppl$with_ppl_include$with_ppl_lib\" = x && test -d ${srcdir}/ppl; then\n-  ppllibs='-L$$r/$(HOST_SUBDIR)/ppl/.libs -L$$r/$(HOST_SUBDIR)/ppl/_libs -lppl_c -lppl -lgmpxx '\n-  pplinc='-I$$r/$(HOST_SUBDIR)/ppl/include -I$$s/ppl/include '\n+  ppllibs='-L$$r/$(HOST_SUBDIR)/ppl/interfaces/C/.libs -L$$r/$(HOST_SUBDIR)/ppl/interfaces/C/_libs -L$$r/$(HOST_SUBDIR)/ppl/src/.libs -L$$r/$(HOST_SUBDIR)/ppl/src/_libs -lppl_c -lppl -lgmpxx '\n+  pplinc='-I$$r/$(HOST_SUBDIR)/ppl/src -I$$r/$(HOST_SUBDIR)/ppl/interfaces/C '\n+  enable_ppl_version_check=no\n fi\n \n # Check whether --enable-ppl-version-check was given.\n@@ -5842,8 +5841,6 @@ clooginc=\" -DCLOOG_PPL_BACKEND \"\n # Check whether --with-cloog was given.\n if test \"${with_cloog+set}\" = set; then :\n   withval=$with_cloog;\n-else\n-  with_cloog=yes\n fi\n \n \n@@ -5868,7 +5865,7 @@ case $with_cloog in\n     clooglibs=\n     clooginc=\n     ;;\n-  yes)\n+  \"\" | yes)\n     ;;\n   *)\n     clooglibs=\"-L$with_cloog/lib -lcloog\"\n@@ -5884,6 +5881,7 @@ fi\n if test \"x$with_cloog$with_cloog_include$with_cloog_lib\" = x && test -d ${srcdir}/cloog; then\n   clooglibs='-L$$r/$(HOST_SUBDIR)/cloog/.libs -L$$r/$(HOST_SUBDIR)/cloog/_libs -lcloog '\n   clooginc='-I$$r/$(HOST_SUBDIR)/cloog/include -I$$s/cloog/include -DCLOOG_PPL_BACKEND '\n+  enable_cloog_version_check=no\n fi\n \n # Check whether --enable-cloog-version-check was given.\n@@ -5988,10 +5986,11 @@ fi\n \n   if test \"x$with_libelf$with_libelf_include$with_libelf_lib\" = x \\\n      && test -d ${srcdir}/libelf; then\n-    libelflibs='-L$$r/$(HOST_SUBDIR)/libelf/.libs -L$$r/$(HOST_SUBDIR)/libelf/_libs -lelf '\n-    libelfinc='-I$$r/$(HOST_SUBDIR)/libelf/include -I$$s/libelf/include'\n+    libelflibs='-L$$r/$(HOST_SUBDIR)/libelf/lib -lelf '\n+    libelfinc='-D__LIBELF_INTERNAL__ -I$$r/$(HOST_SUBDIR)/libelf/lib -I$$s/libelf/lib'\n     LIBS=\"$libelflibs $LIBS\"\n-  fi\n+\n+ else\n \n   CFLAGS=\"$CFLAGS $libelfinc\"\n   CPPFLAGS=\"$CPPFLAGS $libelfinc\"\n@@ -6520,6 +6519,8 @@ to specify its location.\" \"$LINENO\" 5\n   CPPFLAGS=\"$saved_CPPFLAGS\"\n   LIBS=\"$saved_LIBS\"\n \n+ fi\n+\n   # Flags needed for libelf.\n \n \n@@ -6632,7 +6633,8 @@ if test -d ${srcdir}/gcc; then\n           exit 1\n         fi\n \n-\tif test \"$language\" = \"c++\" -a \"$ENABLE_BUILD_WITH_CXX\" = \"yes\"; then\n+\tif test \"$language\" = \"c++\" \\\n+\t   && test \"$ENABLE_BUILD_WITH_CXX\" = \"yes\"; then\n \t  boot_language=yes\n \tfi\n \n@@ -14273,6 +14275,9 @@ case \"$target\" in\n   hppa*64*-*-hpux*) ;;\n   hppa*-*-hpux*) compare_exclusions=\"gcc/cc*-checksum\\$(objext) | */libgcc/lib2funcs* | gcc/ada/*tools/*\" ;;\n esac\n+case \" $configdirs \" in\n+*\" ppl \"*) compare_exclusions=\"$compare_exclusions | ppl/src/ppl-config.o\" ;;\n+esac\n \n \n ac_config_files=\"$ac_config_files Makefile\""}, {"sha": "5651e3c06b621b3922aa2964c41c521b3ffe81bd", "filename": "configure.ac", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61428ed3c6921fb19b70d103d32ba072f6dadcd/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61428ed3c6921fb19b70d103d32ba072f6dadcd/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=f61428ed3c6921fb19b70d103d32ba072f6dadcd", "patch": "@@ -161,7 +161,7 @@ build_tools=\"build-texinfo build-byacc build-flex build-bison build-m4 build-fix\n \n # these libraries are used by various programs built for the host environment\n #\n-host_libs=\"intl mmalloc libiberty opcodes bfd readline tcl tk itcl libgui zlib libcpp libdecnumber gmp mpfr mpc ppl cloog libiconv\"\n+host_libs=\"intl mmalloc libiberty opcodes bfd readline tcl tk itcl libgui zlib libcpp libdecnumber gmp mpfr mpc ppl cloog libelf libiconv\"\n \n # these tools are built for the host environment\n # Note, the powerpc-eabi build depends on sim occurring before gdb in order to\n@@ -1516,15 +1516,15 @@ pplinc=\n \n AC_ARG_WITH(ppl, [  --with-ppl=PATH         Specify prefix directory for the installed PPL package\n                           Equivalent to --with-ppl-include=PATH/include\n-                          plus --with-ppl-lib=PATH/lib],, with_ppl=yes)\n+                          plus --with-ppl-lib=PATH/lib])\n AC_ARG_WITH(ppl_include, [  --with-ppl-include=PATH Specify directory for installed PPL include files])\n AC_ARG_WITH(ppl_lib, [  --with-ppl-lib=PATH     Specify the directory for the installed PPL library])\n \n case $with_ppl in \n   no)\n     ppllibs=\n     ;;\n-  yes)\n+  \"\" | yes)\n     ;;\n   *)\n     ppllibs=\"-L$with_ppl/lib -lppl_c -lppl -lgmpxx\"\n@@ -1538,8 +1538,9 @@ if test \"x$with_ppl_lib\" != x; then\n   ppllibs=\"-L$with_ppl_lib -lppl_c -lppl -lgmpxx\"\n fi\n if test \"x$with_ppl$with_ppl_include$with_ppl_lib\" = x && test -d ${srcdir}/ppl; then\n-  ppllibs='-L$$r/$(HOST_SUBDIR)/ppl/.libs -L$$r/$(HOST_SUBDIR)/ppl/_libs -lppl_c -lppl -lgmpxx '\n-  pplinc='-I$$r/$(HOST_SUBDIR)/ppl/include -I$$s/ppl/include '\n+  ppllibs='-L$$r/$(HOST_SUBDIR)/ppl/interfaces/C/.libs -L$$r/$(HOST_SUBDIR)/ppl/interfaces/C/_libs -L$$r/$(HOST_SUBDIR)/ppl/src/.libs -L$$r/$(HOST_SUBDIR)/ppl/src/_libs -lppl_c -lppl -lgmpxx '\n+  pplinc='-I$$r/$(HOST_SUBDIR)/ppl/src -I$$r/$(HOST_SUBDIR)/ppl/interfaces/C '\n+  enable_ppl_version_check=no\n fi\n \n AC_ARG_ENABLE(ppl-version-check,\n@@ -1570,7 +1571,7 @@ clooginc=\" -DCLOOG_PPL_BACKEND \"\n \n AC_ARG_WITH(cloog, [  --with-cloog=PATH       Specify prefix directory for the installed CLooG-PPL package\n                           Equivalent to --with-cloog-include=PATH/include\n-                          plus --with-cloog-lib=PATH/lib],, with_cloog=yes)\n+                          plus --with-cloog-lib=PATH/lib])\n AC_ARG_WITH(cloog_include, [  --with-cloog-include=PATH Specify directory for installed CLooG include files])\n AC_ARG_WITH(cloog_lib, [  --with-cloog-lib=PATH   Specify the directory for the installed CLooG library])\n \n@@ -1583,7 +1584,7 @@ case $with_cloog in\n     clooglibs=\n     clooginc=\n     ;;\n-  yes)\n+  \"\" | yes)\n     ;;\n   *)\n     clooglibs=\"-L$with_cloog/lib -lcloog\"\n@@ -1599,6 +1600,7 @@ fi\n if test \"x$with_cloog$with_cloog_include$with_cloog_lib\" = x && test -d ${srcdir}/cloog; then\n   clooglibs='-L$$r/$(HOST_SUBDIR)/cloog/.libs -L$$r/$(HOST_SUBDIR)/cloog/_libs -lcloog '\n   clooginc='-I$$r/$(HOST_SUBDIR)/cloog/include -I$$s/cloog/include -DCLOOG_PPL_BACKEND '\n+  enable_cloog_version_check=no\n fi\n \n AC_ARG_ENABLE(cloog-version-check,\n@@ -1665,10 +1667,11 @@ if test x\"$enable_lto\" = x\"yes\" ; then\n \n   if test \"x$with_libelf$with_libelf_include$with_libelf_lib\" = x \\\n      && test -d ${srcdir}/libelf; then\n-    libelflibs='-L$$r/$(HOST_SUBDIR)/libelf/.libs -L$$r/$(HOST_SUBDIR)/libelf/_libs -lelf '\n-    libelfinc='-I$$r/$(HOST_SUBDIR)/libelf/include -I$$s/libelf/include'\n+    libelflibs='-L$$r/$(HOST_SUBDIR)/libelf/lib -lelf '\n+    libelfinc='-D__LIBELF_INTERNAL__ -I$$r/$(HOST_SUBDIR)/libelf/lib -I$$s/libelf/lib'\n     LIBS=\"$libelflibs $LIBS\"\n-  fi\n+\n+ else\n \n   CFLAGS=\"$CFLAGS $libelfinc\"\n   CPPFLAGS=\"$CPPFLAGS $libelfinc\"\n@@ -1738,6 +1741,8 @@ to specify its location.])\n   CPPFLAGS=\"$saved_CPPFLAGS\"\n   LIBS=\"$saved_LIBS\"\n \n+ fi\n+\n   # Flags needed for libelf.\n   AC_SUBST(libelflibs)\n   AC_SUBST(libelfinc)\n@@ -1850,7 +1855,8 @@ if test -d ${srcdir}/gcc; then\n           exit 1\n         fi\n \n-\tif test \"$language\" = \"c++\" -a \"$ENABLE_BUILD_WITH_CXX\" = \"yes\"; then\n+\tif test \"$language\" = \"c++\" \\\n+\t   && test \"$ENABLE_BUILD_WITH_CXX\" = \"yes\"; then\n \t  boot_language=yes\n \tfi\n \n@@ -3368,6 +3374,9 @@ case \"$target\" in\n   hppa*64*-*-hpux*) ;;\n   hppa*-*-hpux*) compare_exclusions=\"gcc/cc*-checksum\\$(objext) | */libgcc/lib2funcs* | gcc/ada/*tools/*\" ;;\n esac\n+case \" $configdirs \" in\n+*\" ppl \"*) compare_exclusions=\"$compare_exclusions | ppl/src/ppl-config.o\" ;;\n+esac\n AC_SUBST(compare_exclusions)\n \n AC_CONFIG_FILES([Makefile],"}]}