{"sha": "922a4beb4de01de52df7c20bd778c0a85bb04aa1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTIyYTRiZWI0ZGUwMWRlNTJkZjdjMjBiZDc3OGMwYTg1YmIwNGFhMQ==", "commit": {"author": {"name": "Andrew Cagney", "email": "cagney@b1.cygnus.com", "date": "2000-07-28T01:46:11Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2000-07-28T01:46:11Z"}, "message": "gcc.c (struct prefix_list): Add member priority.\n\n* gcc.c (struct prefix_list): Add member priority.\n(enum path_prefix_priority): Declare.\n(add_prefix): Replace ``first'' with ``priority''.  Append new\nentry but keep list in priority order.\n(process_command): Update.  Pass PREFIX_PRIORITY_B_OPT or\nPREFIX_PRIORITY_LAST to add_prefix.\n(process_command): Move include kludge - foo/stageN - to before\nfoo/include.\n\nFrom-SVN: r35304", "tree": {"sha": "46ff43e49172f3575941f2f021722c1add197441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/46ff43e49172f3575941f2f021722c1add197441"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/922a4beb4de01de52df7c20bd778c0a85bb04aa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/922a4beb4de01de52df7c20bd778c0a85bb04aa1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/922a4beb4de01de52df7c20bd778c0a85bb04aa1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/922a4beb4de01de52df7c20bd778c0a85bb04aa1/comments", "author": null, "committer": null, "parents": [{"sha": "da632f2c93e635060680aa463c3fee880e84fe09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da632f2c93e635060680aa463c3fee880e84fe09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da632f2c93e635060680aa463c3fee880e84fe09"}], "stats": {"total": 132, "additions": 78, "deletions": 54}, "files": [{"sha": "0eeeb1c2aa6d68aa7c4ff09a076bb6d70a2e48b9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922a4beb4de01de52df7c20bd778c0a85bb04aa1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922a4beb4de01de52df7c20bd778c0a85bb04aa1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=922a4beb4de01de52df7c20bd778c0a85bb04aa1", "patch": "@@ -1,3 +1,14 @@\n+2000-07-27  Andrew Cagney  <cagney@b1.cygnus.com>\n+\n+\t* gcc.c (struct prefix_list): Add member priority.\n+\t(enum path_prefix_priority): Declare.\n+\t(add_prefix): Replace ``first'' with ``priority''.  Append new\n+\tentry but keep list in priority order.\n+\t(process_command): Update.  Pass PREFIX_PRIORITY_B_OPT or\n+\tPREFIX_PRIORITY_LAST to add_prefix.\n+\t(process_command): Move include kludge - foo/stageN - to before\n+\tfoo/include.\n+\n 2000-07-27  Jason Merrill  <jason@redhat.com>\n \n \t* dwarf2out.c (gen_typedef_die): Abort if we get identical"}, {"sha": "eba5af6c17729228dac8cda14355f519785ddec8", "filename": "gcc/gcc.c", "status": "modified", "additions": 67, "deletions": 54, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/922a4beb4de01de52df7c20bd778c0a85bb04aa1/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/922a4beb4de01de52df7c20bd778c0a85bb04aa1/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=922a4beb4de01de52df7c20bd778c0a85bb04aa1", "patch": "@@ -1266,6 +1266,7 @@ struct prefix_list\n   int require_machine_suffix; /* Don't use without machine_suffix.  */\n   /* 2 means try both machine_suffix and just_machine_suffix.  */\n   int *used_flag_ptr;\t      /* 1 if a file was found with this prefix.  */\n+  int priority;\t\t      /* Sort key - priority within list */\n };\n \n struct path_prefix\n@@ -2335,8 +2336,18 @@ find_a_file (pprefix, name, mode)\n   return 0;\n }\n \n-/* Add an entry for PREFIX in PLIST.  If FIRST is set, it goes\n-   at the start of the list, otherwise it goes at the end.\n+/* Ranking of prefixes in the sort list. -B prefixes are put before\n+   all others. */\n+\n+enum path_prefix_priority\n+{\n+  PREFIX_PRIORITY_B_OPT,\n+  PREFIX_PRIORITY_LAST\n+};\n+\n+/* Add an entry for PREFIX in PLIST.  The PLIST is kept in assending\n+   order according to PRIORITY.  Within each PRIORITY, new entries are\n+   appended.\n \n    If WARN is nonzero, we will warn if no file is found\n    through this prefix.  WARN should point to an int\n@@ -2349,25 +2360,21 @@ find_a_file (pprefix, name, mode)\n    2 means try both machine_suffix and just_machine_suffix.  */\n \n static void\n-add_prefix (pprefix, prefix, component, first, require_machine_suffix, warn)\n+add_prefix (pprefix, prefix, component, priority, require_machine_suffix, warn)\n      struct path_prefix *pprefix;\n      const char *prefix;\n      const char *component;\n-     int first;\n+     /* enum prefix_priority */ int priority;\n      int require_machine_suffix;\n      int *warn;\n {\n   struct prefix_list *pl, **prev;\n   int len;\n \n-  if (! first && pprefix->plist)\n-    {\n-      for (pl = pprefix->plist; pl->next; pl = pl->next)\n-\t;\n-      prev = &pl->next;\n-    }\n-  else\n-    prev = &pprefix->plist;\n+  for (prev = &pprefix->plist;\n+       (*prev) != NULL && (*prev)->priority <= priority;\n+       prev = &(*prev)->next)\n+    ;\n \n   /* Keep track of the longest prefix */\n \n@@ -2380,14 +2387,13 @@ add_prefix (pprefix, prefix, component, first, require_machine_suffix, warn)\n   pl->prefix = save_string (prefix, len);\n   pl->require_machine_suffix = require_machine_suffix;\n   pl->used_flag_ptr = warn;\n+  pl->priority = priority;\n   if (warn)\n     *warn = 0;\n \n-  if (*prev)\n-    pl->next = *prev;\n-  else\n-    pl->next = (struct prefix_list *) 0;\n-  *prev = pl;\n+  /* Insert after PREV */\n+  pl->next = (*prev);\n+  (*prev) = pl;\n }\n \n /* Print warnings for any prefixes in the list PPREFIX that were not used.  */\n@@ -2913,8 +2919,10 @@ process_command (argc, argv)\n \t}\n \n       set_std_prefix (gcc_exec_prefix, len);\n-      add_prefix (&exec_prefixes, gcc_exec_prefix, \"GCC\", 0, 0, NULL_PTR);\n-      add_prefix (&startfile_prefixes, gcc_exec_prefix, \"GCC\", 0, 0, NULL_PTR);\n+      add_prefix (&exec_prefixes, gcc_exec_prefix, \"GCC\",\n+\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+      add_prefix (&startfile_prefixes, gcc_exec_prefix, \"GCC\",\n+\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n     }\n \n   /* COMPILER_PATH and LIBRARY_PATH have values\n@@ -2941,10 +2949,11 @@ process_command (argc, argv)\n \t\t}\n \t      else\n \t\tnstore[endp-startp] = 0;\n-\t      add_prefix (&exec_prefixes, nstore, 0, 0, 0, NULL_PTR);\n+\t      add_prefix (&exec_prefixes, nstore, 0,\n+\t\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n \t      add_prefix (&include_prefixes,\n \t\t\t  concat (nstore, \"include\", NULL_PTR),\n-\t\t\t  0, 0, 0, NULL_PTR);\n+\t\t\t  0, PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -2976,7 +2985,7 @@ process_command (argc, argv)\n \t      else\n \t\tnstore[endp-startp] = 0;\n \t      add_prefix (&startfile_prefixes, nstore, NULL_PTR,\n-\t\t\t  0, 0, NULL_PTR);\n+\t\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -3009,7 +3018,7 @@ process_command (argc, argv)\n \t      else\n \t\tnstore[endp-startp] = 0;\n \t      add_prefix (&startfile_prefixes, nstore, NULL_PTR,\n-\t\t\t  0, 0, NULL_PTR);\n+\t\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n \t      if (*endp == 0)\n \t\tbreak;\n \t      endp = startp = endp + 1;\n@@ -3200,16 +3209,9 @@ process_command (argc, argv)\n \t\t  value = argv[++i];\n \t\telse\n \t\t  value = p + 1;\n-\t\tadd_prefix (&exec_prefixes, value, NULL_PTR, 1, 0, &warn_B);\n-\t\tadd_prefix (&startfile_prefixes, value, NULL_PTR,\n-\t\t\t    1, 0, &warn_B);\n-\t\tadd_prefix (&include_prefixes, concat (value, \"include\",\n-\t\t\t\t\t\t       NULL_PTR),\n-\t\t\t    NULL_PTR, 1, 0, NULL_PTR);\n-\n-\t\t/* As a kludge, if the arg is \"[foo/]stageN/\", just add\n-\t\t   \"[foo/]include\" to the include prefix.  */\n \t\t{\n+\t\t  /* As a kludge, if the arg is \"[foo/]stageN/\", just\n+\t\t     add \"[foo/]include\" to the include prefix.  */\n \t\t  int len = strlen (value);\n \t\t  if ((len == 7\n \t\t       || (len > 7\n@@ -3220,17 +3222,25 @@ process_command (argc, argv)\n \t\t    {\n \t\t      if (len == 7)\n \t\t\tadd_prefix (&include_prefixes, \"include\", NULL_PTR,\n-\t\t\t\t    1, 0, NULL_PTR);\n+\t\t\t\t    PREFIX_PRIORITY_B_OPT, 0, NULL_PTR);\n \t\t      else\n \t\t\t{\n \t\t\t  char *string = xmalloc (len + 1);\n \t\t\t  strncpy (string, value, len-7);\n \t\t\t  strcpy (string+len-7, \"include\");\n \t\t\t  add_prefix (&include_prefixes, string, NULL_PTR,\n-\t\t\t\t      1, 0, NULL_PTR);\n+\t\t\t\t      PREFIX_PRIORITY_B_OPT, 0, NULL_PTR);\n \t\t\t}\n \t\t    }\n \t\t}\n+\t\tadd_prefix (&exec_prefixes, value, NULL_PTR,\n+\t\t\t    PREFIX_PRIORITY_B_OPT, 0, &warn_B);\n+\t\tadd_prefix (&startfile_prefixes, value, NULL_PTR,\n+\t\t\t    PREFIX_PRIORITY_B_OPT, 0, &warn_B);\n+\t\tadd_prefix (&include_prefixes, concat (value, \"include\",\n+\t\t\t\t\t\t       NULL_PTR),\n+\t\t\t    NULL_PTR,\n+\t\t\t    PREFIX_PRIORITY_B_OPT, 0, NULL_PTR);\n                 n_switches++;\n \t      }\n \t      break;\n@@ -3363,17 +3373,17 @@ process_command (argc, argv)\n      as well as trying the machine and the version.  */\n #ifndef OS2\n   add_prefix (&exec_prefixes, standard_exec_prefix, \"GCC\",\n-\t      0, 1, warn_std_ptr);\n+\t      PREFIX_PRIORITY_LAST, 1, warn_std_ptr);\n   add_prefix (&exec_prefixes, standard_exec_prefix, \"BINUTILS\",\n-\t      0, 2, warn_std_ptr);\n+\t      PREFIX_PRIORITY_LAST, 2, warn_std_ptr);\n   add_prefix (&exec_prefixes, standard_exec_prefix_1, \"BINUTILS\",\n-\t      0, 2, warn_std_ptr);\n+\t      PREFIX_PRIORITY_LAST, 2, warn_std_ptr);\n #endif\n \n   add_prefix (&startfile_prefixes, standard_exec_prefix, \"BINUTILS\",\n-\t      0, 1, warn_std_ptr);\n+\t      PREFIX_PRIORITY_LAST, 1, warn_std_ptr);\n   add_prefix (&startfile_prefixes, standard_exec_prefix_1, \"BINUTILS\",\n-\t      0, 1, warn_std_ptr);\n+\t      PREFIX_PRIORITY_LAST, 1, warn_std_ptr);\n \n   tooldir_prefix = concat (tooldir_base_prefix, spec_machine, \n \t\t\t   dir_separator_str, NULL_PTR);\n@@ -3396,11 +3406,11 @@ process_command (argc, argv)\n \t  add_prefix (&exec_prefixes,\n \t\t      concat (gcc_exec_tooldir_prefix, \"bin\", \n \t\t\t      dir_separator_str, NULL_PTR),\n-\t\t      NULL_PTR, 0, 0, NULL_PTR);\n+\t\t      NULL_PTR, PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n \t  add_prefix (&startfile_prefixes,\n \t\t      concat (gcc_exec_tooldir_prefix, \"lib\", \n \t\t\t      dir_separator_str, NULL_PTR),\n-\t\t      NULL_PTR, 0, 0, NULL_PTR);\n+\t\t      NULL_PTR, PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n \t}\n \n       tooldir_prefix = concat (standard_exec_prefix, spec_machine,\n@@ -3410,10 +3420,10 @@ process_command (argc, argv)\n \n   add_prefix (&exec_prefixes, \n               concat (tooldir_prefix, \"bin\", dir_separator_str, NULL_PTR),\n-\t      \"BINUTILS\", 0, 0, NULL_PTR);\n+\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n   add_prefix (&startfile_prefixes,\n \t      concat (tooldir_prefix, \"lib\", dir_separator_str, NULL_PTR),\n-\t      \"BINUTILS\", 0, 0, NULL_PTR);\n+\t      \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n \n   /* More prefixes are enabled in main, after we read the specs file\n      and determine whether this is cross-compilation or not.  */\n@@ -5275,18 +5285,20 @@ main (argc, argv)\n   if (*cross_compile == '0')\n     {\n #ifdef MD_EXEC_PREFIX\n-      add_prefix (&exec_prefixes, md_exec_prefix, \"GCC\", 0, 0, NULL_PTR);\n-      add_prefix (&startfile_prefixes, md_exec_prefix, \"GCC\", 0, 0, NULL_PTR);\n+      add_prefix (&exec_prefixes, md_exec_prefix, \"GCC\",\n+\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n+      add_prefix (&startfile_prefixes, md_exec_prefix, \"GCC\",\n+\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n #endif\n \n #ifdef MD_STARTFILE_PREFIX\n       add_prefix (&startfile_prefixes, md_startfile_prefix, \"GCC\",\n-\t\t  0, 0, NULL_PTR);\n+\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n #endif\n \n #ifdef MD_STARTFILE_PREFIX_1\n       add_prefix (&startfile_prefixes, md_startfile_prefix_1, \"GCC\",\n-\t\t  0, 0, NULL_PTR);\n+\t\t  PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n #endif\n \n       /* If standard_startfile_prefix is relative, base it on\n@@ -5302,27 +5314,28 @@ main (argc, argv)\n #endif\n \t  )\n \tadd_prefix (&startfile_prefixes, standard_startfile_prefix, \"BINUTILS\",\n-\t\t    0, 0, NULL_PTR);\n+\t\t    PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n       else\n \t{\n \t  if (gcc_exec_prefix)\n \t    add_prefix (&startfile_prefixes,\n \t\t\tconcat (gcc_exec_prefix, machine_suffix,\n \t\t\t\tstandard_startfile_prefix, NULL_PTR),\n-\t\t\tNULL_PTR, 0, 0, NULL_PTR);\n+\t\t\tNULL_PTR, PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n \t  add_prefix (&startfile_prefixes,\n \t\t      concat (standard_exec_prefix,\n \t\t\t      machine_suffix,\n \t\t\t      standard_startfile_prefix, NULL_PTR),\n-\t\t      NULL_PTR, 0, 0, NULL_PTR);\n+\t\t      NULL_PTR, PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n \t}\t\t       \n \n       add_prefix (&startfile_prefixes, standard_startfile_prefix_1,\n-\t\t  \"BINUTILS\", 0, 0, NULL_PTR);\n+\t\t  \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n       add_prefix (&startfile_prefixes, standard_startfile_prefix_2,\n-\t\t  \"BINUTILS\", 0, 0, NULL_PTR);\n+\t\t  \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n #if 0 /* Can cause surprises, and one can use -B./ instead.  */\n-      add_prefix (&startfile_prefixes, \"./\", NULL_PTR, 0, 1, NULL_PTR);\n+      add_prefix (&startfile_prefixes, \"./\", NULL_PTR,\n+\t\t  PREFIX_PRIORITY_LAST, 1, NULL_PTR);\n #endif\n     }\n   else\n@@ -5331,7 +5344,7 @@ main (argc, argv)\n \tadd_prefix (&startfile_prefixes,\n \t\t    concat (gcc_exec_prefix, machine_suffix,\n \t\t\t    standard_startfile_prefix, NULL_PTR),\n-\t\t    \"BINUTILS\", 0, 0, NULL_PTR);\n+\t\t    \"BINUTILS\", PREFIX_PRIORITY_LAST, 0, NULL_PTR);\n     }\n \n   /* Process any user specified specs in the order given on the command"}]}