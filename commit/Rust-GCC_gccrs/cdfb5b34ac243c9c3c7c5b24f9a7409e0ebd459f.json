{"sha": "cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f", "node_id": "C_kwDOANBUbNoAKGNkZmI1YjM0YWMyNDNjOWMzYzdjNWIyNGY5YTc0MDllMGViZDQ1OWY", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-12T14:33:29Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-13T11:15:10Z"}, "message": "privacy: reachability: Cleanup Struct definition visitor", "tree": {"sha": "bd2f711bf110d3f55af3237d42eae49d983978c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd2f711bf110d3f55af3237d42eae49d983978c0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a196568774872fb1312b500068dc122c26536b34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a196568774872fb1312b500068dc122c26536b34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a196568774872fb1312b500068dc122c26536b34"}], "stats": {"total": 75, "additions": 42, "deletions": 33}, "files": [{"sha": "ea7ca247e2fbc713b3fe6c62942d1fa7b1a5e357", "filename": "gcc/rust/privacy/rust-reachability.cc", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f/gcc%2Frust%2Fprivacy%2Frust-reachability.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.cc?ref=cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f", "patch": "@@ -31,6 +31,38 @@ maybe_get_vis_item (std::unique_ptr<HIR::Item> &item)\n   return static_cast<HIR::VisItem *> (item.get ());\n }\n \n+void\n+ReachabilityVisitor::visit_generic_predicates (\n+  const std::vector<std::unique_ptr<HIR::GenericParam>> &generics,\n+  ReachLevel item_reach)\n+{\n+  if (item_reach == ReachLevel::Unreachable)\n+    return;\n+\n+  for (auto &generic : generics)\n+    {\n+      if (generic->get_kind () == HIR::GenericParam::TYPE)\n+\t{\n+\t  TyTy::BaseType *generic_ty = nullptr;\n+\t  rust_assert (\n+\t    ty_ctx.lookup_type (generic->get_mappings ().get_hirid (),\n+\t\t\t\t&generic_ty));\n+\n+\t  // FIXME: Can we really get anything else than a TyTy::PARAM here?\n+\t  // Should we change this to an assertion instead?\n+\t  if (generic_ty->get_kind () == TyTy::PARAM)\n+\t    {\n+\t      auto generic_param = static_cast<TyTy::ParamType *> (generic_ty);\n+\t      for (const auto &bound : generic_param->get_specified_bounds ())\n+\t\t{\n+\t\t  const auto trait = bound.get ()->get_hir_trait_ref ();\n+\t\t  ctx.update_reachability (trait->get_mappings (), item_reach);\n+\t\t}\n+\t    }\n+\t}\n+    }\n+}\n+\n void\n ReachabilityVisitor::visit (HIR::Module &mod)\n {\n@@ -75,41 +107,10 @@ ReachabilityVisitor::visit (HIR::StructStruct &struct_item)\n   auto old_level = current_level;\n   current_level = struct_reach;\n \n+  visit_generic_predicates (struct_item.get_generic_params (), struct_reach);\n+\n   if (struct_reach != ReachLevel::Unreachable)\n     {\n-      for (auto &field : struct_item.get_fields ())\n-\tif (field.get_visibility ().is_public ())\n-\t  ctx.update_reachability (field.get_mappings (), struct_reach);\n-\n-      for (auto &generic : struct_item.get_generic_params ())\n-\t{\n-\t  switch (generic->get_kind ())\n-\t    {\n-\t    case HIR::GenericParam::LIFETIME:\n-\t      break;\n-\t    case HIR::GenericParam::TYPE:\n-\t      TyTy::BaseType *generic_ty = nullptr;\n-\t      rust_assert (\n-\t\tty_ctx.lookup_type (generic->get_mappings ().get_hirid (),\n-\t\t\t\t    &generic_ty));\n-\n-\t      if (generic_ty->get_kind () == TyTy::PARAM)\n-\t\t{\n-\t\t  auto generic_param\n-\t\t    = static_cast<TyTy::ParamType *> (generic_ty);\n-\t\t  for (const auto &bound :\n-\t\t       generic_param->get_specified_bounds ())\n-\t\t    {\n-\t\t      const auto trait = bound.get ()->get_hir_trait_ref ();\n-\t\t      ctx.update_reachability (trait->get_mappings (),\n-\t\t\t\t\t       struct_reach);\n-\t\t    }\n-\t\t}\n-\n-\t      break;\n-\t    }\n-\t}\n-\n       for (auto &field : struct_item.get_fields ())\n \tif (field.get_visibility ().is_public ())\n \t  ctx.update_reachability (field.get_field_type ()->get_mappings (),"}, {"sha": "8d740c8f062e1aadd66486cc5137be570981ab1a", "filename": "gcc/rust/privacy/rust-reachability.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f/gcc%2Frust%2Fprivacy%2Frust-reachability.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fprivacy%2Frust-reachability.h?ref=cdfb5b34ac243c9c3c7c5b24f9a7409e0ebd459f", "patch": "@@ -46,6 +46,14 @@ class ReachabilityVisitor : public HIR::HIRVisItemVisitor\n     : current_level (ReachLevel::Reachable), ctx (ctx), ty_ctx (ty_ctx)\n   {}\n \n+  /**\n+   * Visit all the predicates of all the generic types of a given item, marking\n+   * them as reachable or not.\n+   */\n+  void visit_generic_predicates (\n+    const std::vector<std::unique_ptr<HIR::GenericParam>> &generics,\n+    ReachLevel item_reach);\n+\n   virtual void visit (HIR::Module &mod);\n   virtual void visit (HIR::ExternCrate &crate);\n   virtual void visit (HIR::UseDeclaration &use_decl);"}]}