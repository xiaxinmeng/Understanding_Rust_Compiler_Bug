{"sha": "ac02e5b75451cc3c6ae9028338183bcdcb056ea2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMwMmU1Yjc1NDUxY2MzYzZhZTkwMjgzMzgxODNiY2RjYjA1NmVhMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-09-27T14:10:45Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-09-27T14:10:45Z"}, "message": "re PR debug/37801 (DWARF output for inlined functions doesn't always use DW_TAG_inlined_subroutine)\n\n2018-09-27  Richard Biener  <rguenther@suse.de>\n\n\tPR debug/37801\n\tPR debug/87440\n\t* dwarf2out.c (set_block_origin_self): Do not mark outermost\n\tblock as we do not output that.\n\t(gen_inlined_subroutine_die): Elide the originally outermost\n\tblock, matching what we do for concrete instances.\n\t(decls_for_scope): Add parameter specifying whether to recurse\n\tto subblocks.\n\n\t* gcc.dg/debug/dwarf2/inline2.c: Adjust.\n\t* gcc.dg/debug/dwarf2/inline4.c: New testcase.\n\nFrom-SVN: r264667", "tree": {"sha": "c7fd269bf115c497c78df6904016cfb257f1da20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7fd269bf115c497c78df6904016cfb257f1da20"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac02e5b75451cc3c6ae9028338183bcdcb056ea2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac02e5b75451cc3c6ae9028338183bcdcb056ea2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac02e5b75451cc3c6ae9028338183bcdcb056ea2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac02e5b75451cc3c6ae9028338183bcdcb056ea2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19ef5a8fd5710a197ddeaafc2c69ff77217fece5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19ef5a8fd5710a197ddeaafc2c69ff77217fece5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19ef5a8fd5710a197ddeaafc2c69ff77217fece5"}], "stats": {"total": 76, "additions": 63, "deletions": 13}, "files": [{"sha": "4255d268398933a964c428b0d7195d71195d9c2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac02e5b75451cc3c6ae9028338183bcdcb056ea2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac02e5b75451cc3c6ae9028338183bcdcb056ea2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ac02e5b75451cc3c6ae9028338183bcdcb056ea2", "patch": "@@ -1,3 +1,14 @@\n+2018-09-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/37801\n+\tPR debug/87440\n+\t* dwarf2out.c (set_block_origin_self): Do not mark outermost\n+\tblock as we do not output that.\n+\t(gen_inlined_subroutine_die): Elide the originally outermost\n+\tblock, matching what we do for concrete instances.\n+\t(decls_for_scope): Add parameter specifying whether to recurse\n+\tto subblocks.\n+\n 2018-09-27  Andrew Stubbs  <ams@codesourcery.com>\n             Tom de Vries  <tom@codesourcery.com>\n "}, {"sha": "a63a645e84ad50c9ea69656af8bdece1f475ec42", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac02e5b75451cc3c6ae9028338183bcdcb056ea2/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac02e5b75451cc3c6ae9028338183bcdcb056ea2/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=ac02e5b75451cc3c6ae9028338183bcdcb056ea2", "patch": "@@ -3867,7 +3867,7 @@ static void gen_subroutine_type_die (tree, dw_die_ref);\n static void gen_typedef_die (tree, dw_die_ref);\n static void gen_type_die (tree, dw_die_ref);\n static void gen_block_die (tree, dw_die_ref);\n-static void decls_for_scope (tree, dw_die_ref);\n+static void decls_for_scope (tree, dw_die_ref, bool = true);\n static bool is_naming_typedef_decl (const_tree);\n static inline dw_die_ref get_context_die (tree);\n static void gen_namespace_die (tree, dw_die_ref);\n@@ -24147,7 +24147,23 @@ gen_inlined_subroutine_die (tree stmt, dw_die_ref context_die)\n         add_high_low_attributes (stmt, subr_die);\n       add_call_src_coords_attributes (stmt, subr_die);\n \n-      decls_for_scope (stmt, subr_die);\n+      /* The inliner creates an extra BLOCK for the parameter setup,\n+         we want to merge that with the actual outermost BLOCK of the\n+\t inlined function to avoid duplicate locals in consumers.\n+\t Do that by doing the recursion to subblocks on the single subblock\n+\t of STMT.  */\n+      bool unwrap_one = false;\n+      if (BLOCK_SUBBLOCKS (stmt) && !BLOCK_CHAIN (BLOCK_SUBBLOCKS (stmt)))\n+\t{\n+\t  tree origin = block_ultimate_origin (BLOCK_SUBBLOCKS (stmt));\n+\t  if (origin\n+\t      && TREE_CODE (origin) == BLOCK\n+\t      && BLOCK_SUPERCONTEXT (origin) == decl)\n+\t    unwrap_one = true;\n+\t}\n+      decls_for_scope (stmt, subr_die, !unwrap_one);\n+      if (unwrap_one)\n+\tdecls_for_scope (BLOCK_SUBBLOCKS (stmt), subr_die);\n     }\n }\n \n@@ -25775,7 +25791,7 @@ process_scope_var (tree stmt, tree decl, tree origin, dw_die_ref context_die)\n    all of its sub-blocks.  */\n \n static void\n-decls_for_scope (tree stmt, dw_die_ref context_die)\n+decls_for_scope (tree stmt, dw_die_ref context_die, bool recurse)\n {\n   tree decl;\n   unsigned int i;\n@@ -25818,10 +25834,11 @@ decls_for_scope (tree stmt, dw_die_ref context_die)\n \n   /* Output the DIEs to represent all sub-blocks (and the items declared\n      therein) of this block.  */\n-  for (subblocks = BLOCK_SUBBLOCKS (stmt);\n-       subblocks != NULL;\n-       subblocks = BLOCK_CHAIN (subblocks))\n-    gen_block_die (subblocks, context_die);\n+  if (recurse)\n+    for (subblocks = BLOCK_SUBBLOCKS (stmt);\n+\t subblocks != NULL;\n+\t subblocks = BLOCK_CHAIN (subblocks))\n+      gen_block_die (subblocks, context_die);\n }\n \n /* Is this a typedef we can avoid emitting?  */"}, {"sha": "712e2be38d56a1e510dda665105f3cd867e540c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac02e5b75451cc3c6ae9028338183bcdcb056ea2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac02e5b75451cc3c6ae9028338183bcdcb056ea2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ac02e5b75451cc3c6ae9028338183bcdcb056ea2", "patch": "@@ -1,3 +1,10 @@\n+2018-09-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR debug/37801\n+\tPR debug/87440\n+\t* gcc.dg/debug/dwarf2/inline2.c: Adjust.\n+\t* gcc.dg/debug/dwarf2/inline4.c: New testcase.\n+\n 2018-09-27  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/67544"}, {"sha": "7e019a6c06a0e5c73fe40288fa6e5dbf62257e4d", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/inline2.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac02e5b75451cc3c6ae9028338183bcdcb056ea2/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac02e5b75451cc3c6ae9028338183bcdcb056ea2/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline2.c?ref=ac02e5b75451cc3c6ae9028338183bcdcb056ea2", "patch": "@@ -23,12 +23,10 @@\n      of third, second and first.  */\n /* { dg-final { scan-assembler-times \"\\\\(DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_inlined_subroutine\" 6 } } */\n \n-/* Likewise we should have 6 DW_TAG_lexical_block DIEs:\n-   - One for each subroutine inlined into main, so that's 3.\n-   - One for each subroutine inlined in the out of line instances\n-     of third, second and first, that's 3.\n-*/\n-/* { dg-final { scan-assembler-times \"\\\\(DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_lexical_block\" 6 } } */\n+/* We should have no DW_TAG_lexical_block DIEs, all inline instances\n+   should have the first subblock elided to match the abstract instance\n+   layout.  */\n+/* { dg-final { scan-assembler-times \"\\\\(DIE \\\\(\\[^\\n\\]*\\\\) DW_TAG_lexical_block\" 0 } } */\n \n \n /* There are 3 DW_AT_inline attributes: one per abstract inline instance."}, {"sha": "2faef6e2a4f0e25990786183037862271f00dfb6", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/inline4.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac02e5b75451cc3c6ae9028338183bcdcb056ea2/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac02e5b75451cc3c6ae9028338183bcdcb056ea2/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Finline4.c?ref=ac02e5b75451cc3c6ae9028338183bcdcb056ea2", "patch": "@@ -0,0 +1,17 @@\n+/* Verify that the inline instance has no extra DW_TAG_lexical_block between\n+   the DW_TAG_inlined_subroutine and the DW_TAG_variable for the local.  */\n+/* { dg-options \"-O -gdwarf -dA\" } */\n+/* { dg-do compile } */\n+/* { dg-final { scan-assembler \"DW_TAG_inlined_subroutine\\[^\\\\(\\]*\\\\(\\[^\\\\)\\]*\\\\)\\[^\\\\(\\]*\\\\(DIE \\\\(0x\\[0-9a-f\\]*\\\\) DW_TAG_formal_parameter\\[^\\\\(\\]*\\\\(DIE \\\\(0x\\[0-9a-f\\]*\\\\) DW_TAG_variable\" } } */\n+/* { dg-final { scan-assembler-times \"DW_TAG_inlined_subroutine\" 2 } } */\n+\n+static int foo (int i)\n+{\n+  volatile int j = i + 3;\n+  return j - 2;\n+}\n+int main()\n+{\n+  volatile int z = foo (-1);\n+  return z;\n+}"}]}