{"sha": "ab2210870b28990071af15a53ce817a3fc6d5af8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWIyMjEwODcwYjI4OTkwMDcxYWYxNWE1M2NlODE3YTNmYzZkNWFmOA==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2010-12-15T05:04:30Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2010-12-15T05:04:30Z"}, "message": "Fix PR45948: add ssa defs from builtin partitions to the last partition.\n\n2010-12-14  Sebastian Pop  <sebastian.pop@amd.com>\n\n\tPR tree-optimization/45948\n\t* tree-loop-distribution.c (ssa_name_has_uses_outside_loop_p): New.\n\t(stmt_has_scalar_dependences_outside_loop): New.\n\t(stmt_generated_in_another_partition): New.\n\t(add_scalar_computations_to_partition): New.\n\t(rdg_build_partitions): Call add_scalar_computations_to_partition.\n\n\t* gcc.dg/tree-ssa/ldist-pr45948.c: New.\n\nFrom-SVN: r167842", "tree": {"sha": "b6244af510098066a33efd97408230f217050a23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b6244af510098066a33efd97408230f217050a23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab2210870b28990071af15a53ce817a3fc6d5af8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab2210870b28990071af15a53ce817a3fc6d5af8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab2210870b28990071af15a53ce817a3fc6d5af8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab2210870b28990071af15a53ce817a3fc6d5af8/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56fb2b3625d4e32d019024e9c5f8a5d07e185f38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56fb2b3625d4e32d019024e9c5f8a5d07e185f38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56fb2b3625d4e32d019024e9c5f8a5d07e185f38"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "9818c03dc53b1c609113a6c2760238d81c9c052a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2210870b28990071af15a53ce817a3fc6d5af8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2210870b28990071af15a53ce817a3fc6d5af8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ab2210870b28990071af15a53ce817a3fc6d5af8", "patch": "@@ -1,3 +1,12 @@\n+2010-12-14  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/45948\n+\t* tree-loop-distribution.c (ssa_name_has_uses_outside_loop_p): New.\n+\t(stmt_has_scalar_dependences_outside_loop): New.\n+\t(stmt_generated_in_another_partition): New.\n+\t(add_scalar_computations_to_partition): New.\n+\t(rdg_build_partitions): Call add_scalar_computations_to_partition.\n+\n 2010-12-14  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/arc/arc.h (LIB_SPEC): Define."}, {"sha": "a8c6941c7634a972bc295d3559df0b6fbccda725", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2210870b28990071af15a53ce817a3fc6d5af8/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2210870b28990071af15a53ce817a3fc6d5af8/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab2210870b28990071af15a53ce817a3fc6d5af8", "patch": "@@ -1,3 +1,8 @@\n+2010-12-14  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\tPR tree-optimization/45948\n+\t* gcc.dg/tree-ssa/ldist-pr45948.c: New.\n+\n 2010-12-14  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/46930"}, {"sha": "3e467bdb05d22f9fed18100c4e0c8fa1e8b720d4", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ldist-pr45948.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2210870b28990071af15a53ce817a3fc6d5af8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-pr45948.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2210870b28990071af15a53ce817a3fc6d5af8/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-pr45948.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fldist-pr45948.c?ref=ab2210870b28990071af15a53ce817a3fc6d5af8", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-distribution -fdump-tree-ldist-details\" } */\n+\n+extern void bar(int);\n+\n+void\n+foo (int i, int n)\n+{\n+  int a[30];\n+  int b[30];\n+  for (; i < n; i++)\n+    a[i] = b[i] = 0;\n+\n+  while (1)\n+    if (b[0])\n+      bar (a[i - 1]);\n+}\n+\n+/* We should apply loop distribution and generate 2 memset (0).  */\n+\n+/* { dg-final { scan-tree-dump \"distributed: split to 3\" \"ldist\" } } */\n+/* { dg-final { scan-tree-dump-times \"__builtin_memset\" 4 \"ldist\" } } */\n+/* { dg-final { cleanup-tree-dump \"ldist\" } } */"}, {"sha": "a9ee67ff9cd930d12060eda3b7f5d2e1013d48f1", "filename": "gcc/tree-loop-distribution.c", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab2210870b28990071af15a53ce817a3fc6d5af8/gcc%2Ftree-loop-distribution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab2210870b28990071af15a53ce817a3fc6d5af8/gcc%2Ftree-loop-distribution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-loop-distribution.c?ref=ab2210870b28990071af15a53ce817a3fc6d5af8", "patch": "@@ -808,6 +808,102 @@ fuse_partitions_with_similar_memory_accesses (struct graph *rdg,\n \t  }\n }\n \n+/* Returns true when DEF is an SSA_NAME defined in LOOP and used after\n+   the LOOP.  */\n+\n+static bool\n+ssa_name_has_uses_outside_loop_p (tree def, loop_p loop)\n+{\n+  imm_use_iterator imm_iter;\n+  use_operand_p use_p;\n+\n+  FOR_EACH_IMM_USE_FAST (use_p, imm_iter, def)\n+    if (loop != loop_containing_stmt (USE_STMT (use_p)))\n+      return true;\n+\n+  return false;\n+}\n+\n+/* Returns true when STMT defines a scalar variable used after the\n+   loop.  */\n+\n+static bool\n+stmt_has_scalar_dependences_outside_loop (gimple stmt)\n+{\n+  tree name;\n+\n+  switch (gimple_code (stmt))\n+    {\n+    case GIMPLE_ASSIGN:\n+      name = gimple_assign_lhs (stmt);\n+      break;\n+\n+    case GIMPLE_PHI:\n+      name = gimple_phi_result (stmt);\n+      break;\n+\n+    default:\n+      return false;\n+    }\n+\n+  return TREE_CODE (name) == SSA_NAME\n+    && ssa_name_has_uses_outside_loop_p (name, loop_containing_stmt (stmt));\n+}\n+\n+/* Returns true when STMT will be code generated in a partition of RDG\n+   different than PART and that will not be code generated as a\n+   builtin.  */\n+\n+static bool\n+stmt_generated_in_another_partition (struct graph *rdg, gimple stmt, int part,\n+\t\t\t\t     VEC (bitmap, heap) *partitions)\n+{\n+  int p;\n+  bitmap pp;\n+  unsigned i;\n+  bitmap_iterator bi;\n+\n+  FOR_EACH_VEC_ELT (bitmap, partitions, p, pp)\n+    if (p != part\n+\t&& !can_generate_builtin (rdg, pp))\n+      EXECUTE_IF_SET_IN_BITMAP (pp, 0, i, bi)\n+\tif (stmt == RDG_STMT (rdg, i))\n+\t  return true;\n+\n+  return false;\n+}\n+\n+/* For each partition in PARTITIONS that will be code generated using\n+   a builtin, add its scalar computations used after the loop to\n+   PARTITION.  */\n+\n+static void\n+add_scalar_computations_to_partition (struct graph *rdg,\n+\t\t\t\t      VEC (bitmap, heap) *partitions,\n+\t\t\t\t      bitmap partition)\n+{\n+  int p;\n+  bitmap pp;\n+  unsigned i;\n+  bitmap_iterator bi;\n+  bitmap l = BITMAP_ALLOC (NULL);\n+  bitmap pr = BITMAP_ALLOC (NULL);\n+  bool f = false;\n+\n+  FOR_EACH_VEC_ELT (bitmap, partitions, p, pp)\n+    if (can_generate_builtin (rdg, pp))\n+      EXECUTE_IF_SET_IN_BITMAP (pp, 0, i, bi)\n+\tif (stmt_has_scalar_dependences_outside_loop (RDG_STMT (rdg, i))\n+\t    && !stmt_generated_in_another_partition (rdg, RDG_STMT (rdg, i), p,\n+\t\t\t\t\t\t     partitions))\n+\t  rdg_flag_vertex_and_dependent (rdg, i, partition, l, pr, &f);\n+\n+  rdg_flag_loop_exits (rdg, l, partition, pr, &f);\n+\n+  BITMAP_FREE (pr);\n+  BITMAP_FREE (l);\n+}\n+\n /* Aggregate several components into a useful partition that is\n    registered in the PARTITIONS vector.  Partitions will be\n    distributed in different loops.  */\n@@ -871,6 +967,8 @@ rdg_build_partitions (struct graph *rdg, VEC (rdgc, heap) *components,\n       free_rdg_components (comps);\n     }\n \n+  add_scalar_computations_to_partition (rdg, *partitions, partition);\n+\n   /* If there is something left in the last partition, save it.  */\n   if (bitmap_count_bits (partition) > 0)\n     VEC_safe_push (bitmap, heap, *partitions, partition);"}]}