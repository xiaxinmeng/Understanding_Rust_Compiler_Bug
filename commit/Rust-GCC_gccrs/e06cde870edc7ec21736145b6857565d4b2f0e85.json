{"sha": "e06cde870edc7ec21736145b6857565d4b2f0e85", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTA2Y2RlODcwZWRjN2VjMjE3MzYxNDViNjg1NzU2NWQ0YjJmMGU4NQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2020-02-22T20:40:26Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2020-03-31T14:07:52Z"}, "message": "Library-side tests for parenthesized aggregate init\n\nPR c++/92878\nPR c++/92947\n\n* testsuite/20_util/allocator_traits/members/92878_92947.cc: New.\n* testsuite/20_util/any/assign/92878_92947.cc: Likewise.\n* testsuite/20_util/any/cons/92878_92947.cc: Likewise.\n* testsuite/20_util/is_constructible/92878_92947.cc: Likewise.\n* testsuite/20_util/optional/assignment/92878_92947.cc: Likewise.\n* testsuite/20_util/optional/cons/92878_92947.cc: Likewise.\n* testsuite/20_util/pair/cons/92878_92947.cc: Likewise.\n* testsuite/20_util/shared_ptr/creation/92878_92947.cc: Likewise.\n* testsuite/20_util/specialized_algorithms/construct_at/92878_92947.cc:\nLikewise.\n* testsuite/20_util/unique_ptr/creation/92878_92947.cc: Likewise.\n* testsuite/20_util/uses_allocator/92878_92947.cc: Likewise.\n* testsuite/20_util/variant/92878_92947.cc: Likewise.\n* testsuite/23_containers/deque/modifiers/emplace/92878_92947.cc:\nLikewise.\n* testsuite/23_containers/forward_list/modifiers/92878_92947.cc:\nLikewise.\n* testsuite/23_containers/list/modifiers/emplace/92878_92947.cc:\nLikewise.\n* testsuite/23_containers/map/modifiers/emplace/92878_92947.cc:\nLikewise.\n* testsuite/23_containers/multimap/modifiers/emplace/92878_92947.cc:\nLikewise.\n* testsuite/23_containers/multiset/modifiers/emplace/92878_92947.cc:\nLikewise.\n* testsuite/23_containers/priority_queue/92878_92947.cc: Likewise.\n* testsuite/23_containers/queue/92878_92947.cc: Likewise.\n* testsuite/23_containers/set/modifiers/emplace/92878_92947.cc:\nLikewise.\n* testsuite/23_containers/stack/92878_92947.cc: Likewise.\n* testsuite/23_containers/unordered_map/modifiers/92878_92947.cc:\nLikewise.\n* testsuite/23_containers/unordered_multimap/modifiers/92878_92947.cc:\nLikewise.\n* testsuite/23_containers/unordered_multiset/modifiers/92878_92947.cc:\nLikewise.\n* testsuite/23_containers/unordered_set/modifiers/92878_92947.cc:\nLikewise.\n* testsuite/23_containers/vector/modifiers/emplace/92878_92947.cc:\nLikewise.", "tree": {"sha": "8dfa500eadea00d24aefa075a9e10a506c19becc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8dfa500eadea00d24aefa075a9e10a506c19becc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e06cde870edc7ec21736145b6857565d4b2f0e85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06cde870edc7ec21736145b6857565d4b2f0e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e06cde870edc7ec21736145b6857565d4b2f0e85", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e06cde870edc7ec21736145b6857565d4b2f0e85/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48742e02d7136e60e8e91631d76403d56e4eee09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48742e02d7136e60e8e91631d76403d56e4eee09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48742e02d7136e60e8e91631d76403d56e4eee09"}], "stats": {"total": 1803, "additions": 1803, "deletions": 0}, "files": [{"sha": "beaf61b9d2bcc0ca970c3eeb625d1740797f24a3", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -1,3 +1,51 @@\n+2020-03-31  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tLibrary-side tests for parenthesized aggregate init\n+\n+\tPR c++/92878\n+\tPR c++/92947\n+\n+\t* testsuite/20_util/allocator_traits/members/92878_92947.cc: New.\n+\t* testsuite/20_util/any/assign/92878_92947.cc: Likewise.\n+\t* testsuite/20_util/any/cons/92878_92947.cc: Likewise.\n+\t* testsuite/20_util/is_constructible/92878_92947.cc: Likewise.\n+\t* testsuite/20_util/optional/assignment/92878_92947.cc: Likewise.\n+\t* testsuite/20_util/optional/cons/92878_92947.cc: Likewise.\n+\t* testsuite/20_util/pair/cons/92878_92947.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/creation/92878_92947.cc: Likewise.\n+\t* testsuite/20_util/specialized_algorithms/construct_at/92878_92947.cc:\n+\tLikewise.\n+\t* testsuite/20_util/unique_ptr/creation/92878_92947.cc: Likewise.\n+\t* testsuite/20_util/uses_allocator/92878_92947.cc: Likewise.\n+\t* testsuite/20_util/variant/92878_92947.cc: Likewise.\n+\t* testsuite/23_containers/deque/modifiers/emplace/92878_92947.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/forward_list/modifiers/92878_92947.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/list/modifiers/emplace/92878_92947.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/map/modifiers/emplace/92878_92947.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/multimap/modifiers/emplace/92878_92947.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/multiset/modifiers/emplace/92878_92947.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/priority_queue/92878_92947.cc: Likewise.\n+\t* testsuite/23_containers/queue/92878_92947.cc: Likewise.\n+\t* testsuite/23_containers/set/modifiers/emplace/92878_92947.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/stack/92878_92947.cc: Likewise.\n+\t* testsuite/23_containers/unordered_map/modifiers/92878_92947.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multimap/modifiers/92878_92947.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_multiset/modifiers/92878_92947.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/unordered_set/modifiers/92878_92947.cc:\n+\tLikewise.\n+\t* testsuite/23_containers/vector/modifiers/emplace/92878_92947.cc:\n+\tLikewise.\n+\n 2020-03-28  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* testsuite/20_util/is_constructible/value-2.cc: Fix test to account"}, {"sha": "f84d0f7467eafe4df7404347498025fde2c9a954", "filename": "libstdc++-v3/testsuite/20_util/allocator_traits/members/92878_92947.cc", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fallocator_traits%2Fmembers%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,51 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test01()\n+{\n+  aggressive_aggregate x;\n+  std::allocator<aggressive_aggregate> a;\n+  using traits = std::allocator_traits<std::allocator<aggressive_aggregate>>;\n+  traits::destroy(a, &x);\n+  traits::construct(a, &x, 1, 2);   \n+  VERIFY(x.a == 1);\n+  VERIFY(x.b == 2);\n+  traits::destroy(a, &x);\n+  traits::construct(a, &x, 1);   \n+  VERIFY(x.a == 1);\n+  VERIFY(x.b == 0);\n+  traits::destroy(a, &x);\n+  traits::construct(a, &x);   \n+  VERIFY(x.a == 0);\n+  VERIFY(x.b == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "49f05ee28ecb03858c54bb3d14eda9b2ef71c031", "filename": "libstdc++-v3/testsuite/20_util/any/assign/92878_92947.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fassign%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test01()\n+{\n+  std::any x;\n+  x.emplace<aggressive_aggregate>(1, 2);\n+  VERIFY(std::any_cast<aggressive_aggregate>(x).a == 1);\n+  VERIFY(std::any_cast<aggressive_aggregate>(x).b == 2);\n+  x.emplace<aggressive_aggregate>(1);\n+  VERIFY(std::any_cast<aggressive_aggregate>(x).a == 1);\n+  VERIFY(std::any_cast<aggressive_aggregate>(x).b == 0);\n+  x.emplace<aggressive_aggregate>();\n+  VERIFY(std::any_cast<aggressive_aggregate>(x).a == 0);\n+  VERIFY(std::any_cast<aggressive_aggregate>(x).b == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "fa8aa2ff1cd9d66d0b200473ebabd99af14a3ce8", "filename": "libstdc++-v3/testsuite/20_util/any/cons/92878_92947.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fany%2Fcons%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <any>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test01()\n+{\n+  std::any x{std::in_place_type<aggressive_aggregate>, 1, 2};\n+  VERIFY(std::any_cast<aggressive_aggregate>(x).a == 1);\n+  VERIFY(std::any_cast<aggressive_aggregate>(x).b == 2);\n+  std::any y{std::in_place_type<aggressive_aggregate>, 1};\n+  VERIFY(std::any_cast<aggressive_aggregate>(y).a == 1);\n+  VERIFY(std::any_cast<aggressive_aggregate>(y).b == 0);\n+  std::any z{std::in_place_type<aggressive_aggregate>};\n+  VERIFY(std::any_cast<aggressive_aggregate>(z).a == 0);\n+  VERIFY(std::any_cast<aggressive_aggregate>(z).b == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "567f9be6b9b28a9ddd33d0d39412e55019cfe8dd", "filename": "libstdc++-v3/testsuite/20_util/is_constructible/92878_92947.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fis_constructible%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <type_traits>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+struct vicious_variation\n+{\n+    int a;\n+    int b = 42;\n+};\n+\n+void test01()\n+{\n+  static_assert(std::is_constructible_v<aggressive_aggregate, int, int>);\n+  static_assert(std::is_constructible_v<aggressive_aggregate, int>);\n+  static_assert(std::is_constructible_v<aggressive_aggregate>);\n+  static_assert(std::is_default_constructible_v<aggressive_aggregate>);\n+  static_assert(std::is_trivially_default_constructible_v<\n+\t\taggressive_aggregate>);\n+  static_assert(std::is_constructible_v<vicious_variation, int, int>);\n+  static_assert(std::is_constructible_v<vicious_variation, int>);\n+  static_assert(std::is_constructible_v<vicious_variation>);\n+  static_assert(std::is_default_constructible_v<vicious_variation>);\n+  static_assert(!std::is_trivially_default_constructible_v<\n+\t\tvicious_variation>);\n+}"}, {"sha": "a5b74a2ce1790e6d9a4519250e3a6a8552547ad3", "filename": "libstdc++-v3/testsuite/20_util/optional/assignment/92878_92947.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fassignment%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <optional>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test01()\n+{\n+  std::optional<aggressive_aggregate> x;\n+  x.emplace(1, 2);\n+  VERIFY(x->a == 1);\n+  VERIFY(x->b == 2);\n+  x.emplace(1);\n+  VERIFY(x->a == 1);\n+  VERIFY(x->b == 0);\n+  x.emplace();\n+  VERIFY(x->a == 0);\n+  VERIFY(x->b == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "52941e7e1f0bbfacfd07229ff423ad6f5537e14b", "filename": "libstdc++-v3/testsuite/20_util/optional/cons/92878_92947.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Foptional%2Fcons%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <optional>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test01()\n+{\n+  std::optional<aggressive_aggregate> x{std::in_place, 1, 2};\n+  VERIFY(x->a == 1);\n+  VERIFY(x->b == 2);\n+  std::optional<aggressive_aggregate> y{std::in_place, 1};\n+  VERIFY(y->a == 1);\n+  VERIFY(y->b == 0);\n+  std::optional<aggressive_aggregate> z{std::in_place};\n+  VERIFY(z->a == 0);\n+  VERIFY(z->b == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "ebc4e430f45a1e8aebfd1458e4d985698916a360", "filename": "libstdc++-v3/testsuite/20_util/pair/cons/92878_92947.cc", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fpair%2Fcons%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,49 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test01()\n+{\n+  std::pair<aggressive_aggregate, int> x{std::piecewise_construct,\n+\t\t\t\t\t std::tuple{1, 2}, std::tuple{42}};\n+  VERIFY(x.first.a == 1);\n+  VERIFY(x.first.b == 2);\n+  std::pair<aggressive_aggregate, int> y{std::piecewise_construct,\n+\t\t\t\t\t std::tuple{1}, std::tuple{42}};\n+  VERIFY(y.first.a == 1);\n+  VERIFY(y.first.b == 0);\n+  std::pair<aggressive_aggregate, int> z{std::piecewise_construct,\n+\t\t\t\t\t std::tuple{}, std::tuple{42}};\n+  VERIFY(z.first.a == 0);\n+  VERIFY(z.first.b == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "81a938212d6b724f109eb0bc0006135ccc095a7f", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/creation/92878_92947.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcreation%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test01()\n+{\n+  auto x = std::make_shared<aggressive_aggregate>(1, 2);\n+  VERIFY(x->a == 1);\n+  VERIFY(x->b == 2);\n+  auto y = std::make_shared<aggressive_aggregate>(1);\n+  VERIFY(y->a == 1);\n+  VERIFY(y->b == 0);\n+  auto z = std::make_shared<aggressive_aggregate>();\n+  VERIFY(z->a == 0);\n+  VERIFY(z->b == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "ac22cefdd04bca311c331eda2f11fe30e01cc24e", "filename": "libstdc++-v3/testsuite/20_util/specialized_algorithms/construct_at/92878_92947.cc", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fconstruct_at%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fconstruct_at%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fspecialized_algorithms%2Fconstruct_at%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,50 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test01()\n+{\n+  aggressive_aggregate x;\n+  std::destroy_at(&x);\n+  std::construct_at(&x, 1, 2);   \n+  VERIFY(x.a == 1);\n+  VERIFY(x.b == 2);\n+  std::destroy_at(&x);\n+  std::construct_at(&x, 1);   \n+  VERIFY(x.a == 1);\n+  VERIFY(x.b == 0);\n+  std::destroy_at(&x);\n+  std::construct_at(&x);   \n+  VERIFY(x.a == 0);\n+  VERIFY(x.b == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "f84e7353d15dd7f0a8921efd72061e07bb844bd8", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/creation/92878_92947.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcreation%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test01()\n+{\n+  auto x = std::make_unique<aggressive_aggregate>(1, 2);\n+  VERIFY(x->a == 1);\n+  VERIFY(x->b == 2);\n+  auto y = std::make_unique<aggressive_aggregate>(1);\n+  VERIFY(y->a == 1);\n+  VERIFY(y->b == 0);\n+  auto z = std::make_unique<aggressive_aggregate>();\n+  VERIFY(z->a == 0);\n+  VERIFY(z->b == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "196d0a041a668ca597cbd0183954ad202bbd198b", "filename": "libstdc++-v3/testsuite/20_util/uses_allocator/92878_92947.cc", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fuses_allocator%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,67 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <memory>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test_make_obj_using_allocator()\n+{\n+  std::allocator<aggressive_aggregate> a;\n+  auto x =\n+    std::make_obj_using_allocator<aggressive_aggregate>(a, 1, 2);\n+  VERIFY(x.a == 1);\n+  VERIFY(x.b == 2);\n+  x = std::make_obj_using_allocator<aggressive_aggregate>(a, 1);\n+  VERIFY(x.a == 1);\n+  VERIFY(x.b == 0);\n+  x = std::make_obj_using_allocator<aggressive_aggregate>(a);\n+  VERIFY(x.a == 0);\n+  VERIFY(x.b == 0);\n+}\n+\n+void test_uninitialized_construct_using_allocator()\n+{\n+  std::allocator<aggressive_aggregate> a;\n+  aggressive_aggregate x;\n+  std::destroy_at(&x);\n+  std::uninitialized_construct_using_allocator(&x, a, 1, 2);\n+  VERIFY(x.a == 1);\n+  VERIFY(x.b == 2);\n+  std::destroy_at(&x);\n+  std::uninitialized_construct_using_allocator(&x, a, 1);\n+  VERIFY(x.a == 1);\n+  VERIFY(x.b == 0);\n+  std::destroy_at(&x);\n+  std::uninitialized_construct_using_allocator(&x, a);\n+  VERIFY(x.a == 0);\n+  VERIFY(x.b == 0);\n+}\n+\n+int main()\n+{\n+  test_make_obj_using_allocator();\n+  test_uninitialized_construct_using_allocator();\n+}"}, {"sha": "48bad9feff67cfe464ab17ec58596f5e2826a1da", "filename": "libstdc++-v3/testsuite/20_util/variant/92878_92947.cc", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fvariant%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,91 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <variant>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+struct dumbo\n+{\n+  dumbo() = delete;\n+};\n+\n+void test_emplace()\n+{\n+  std::variant<aggressive_aggregate, dumbo> x;\n+  x.emplace<aggressive_aggregate>(1, 2);\n+  VERIFY(x.index() == 0);\n+  VERIFY(std::get<0>(x).a == 1);\n+  VERIFY(std::get<0>(x).b == 2);\n+  x.emplace<aggressive_aggregate>(1);\n+  VERIFY(x.index() == 0);\n+  VERIFY(std::get<0>(x).a == 1);\n+  VERIFY(std::get<0>(x).b == 0);\n+  x.emplace<aggressive_aggregate>();\n+  VERIFY(x.index() == 0);\n+  VERIFY(std::get<0>(x).a == 0);\n+  VERIFY(std::get<0>(x).b == 0);\n+}\n+\n+void test_in_place_type_construct()\n+{\n+  using Var = std::variant<aggressive_aggregate, dumbo>;\n+  Var x{std::in_place_type<aggressive_aggregate>, 1,2};\n+  VERIFY(x.index() == 0);\n+  VERIFY(std::get<0>(x).a == 1);\n+  VERIFY(std::get<0>(x).b == 2);\n+  Var y{std::in_place_type<aggressive_aggregate>, 1};\n+  VERIFY(y.index() == 0);\n+  VERIFY(std::get<0>(y).a == 1);\n+  VERIFY(std::get<0>(y).b == 0);\n+  Var z{std::in_place_type<aggressive_aggregate>};\n+  VERIFY(z.index() == 0);\n+  VERIFY(std::get<0>(z).a == 0);\n+  VERIFY(std::get<0>(z).b == 0);\n+}\n+\n+void test_in_place_index_construct()\n+{\n+  using Var = std::variant<aggressive_aggregate, dumbo>;\n+  Var x{std::in_place_index<0>, 1,2};\n+  VERIFY(x.index() == 0);\n+  VERIFY(std::get<0>(x).a == 1);\n+  VERIFY(std::get<0>(x).b == 2);\n+  Var y{std::in_place_index<0>, 1};\n+  VERIFY(y.index() == 0);\n+  VERIFY(std::get<0>(y).a == 1);\n+  VERIFY(std::get<0>(y).b == 0);\n+  Var z{std::in_place_index<0>};\n+  VERIFY(z.index() == 0);\n+  VERIFY(std::get<0>(z).a == 0);\n+  VERIFY(std::get<0>(z).b == 0);\n+}\n+\n+int main()\n+{\n+  test_emplace();\n+  test_in_place_type_construct();\n+  test_in_place_index_construct();\n+}"}, {"sha": "3dc75db602e2fd516d8d107bde0324841ce1c585", "filename": "libstdc++-v3/testsuite/23_containers/deque/modifiers/emplace/92878_92947.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Femplace%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Femplace%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fdeque%2Fmodifiers%2Femplace%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <deque>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test_emplace_front()\n+{\n+  std::deque<aggressive_aggregate> x;\n+  x.emplace_front(1, 2);\n+  VERIFY(x.front().a == 1);\n+  VERIFY(x.front().b == 2);\n+  x.emplace_front(1);\n+  VERIFY(x.front().a == 1);\n+  VERIFY(x.front().b == 0);\n+  x.emplace_front();\n+  VERIFY(x.front().a == 0);\n+  VERIFY(x.front().b == 0);\n+}\n+\n+void test_emplace_back()\n+{\n+  std::deque<aggressive_aggregate> x;\n+  x.emplace_back(1, 2);\n+  VERIFY(x.back().a == 1);\n+  VERIFY(x.back().b == 2);\n+  x.emplace_back(1);\n+  VERIFY(x.back().a == 1);\n+  VERIFY(x.back().b == 0);\n+  x.emplace_back();\n+  VERIFY(x.back().a == 0);\n+  VERIFY(x.back().b == 0);\n+}\n+\n+int main()\n+{\n+  test_emplace_front();\n+  test_emplace_back();\n+}"}, {"sha": "874b9f5298249e229c662d097e7bd02dc05b5845", "filename": "libstdc++-v3/testsuite/23_containers/forward_list/modifiers/92878_92947.cc", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fforward_list%2Fmodifiers%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,62 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <forward_list>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test_emplace_front()\n+{\n+  std::forward_list<aggressive_aggregate> x;\n+  x.emplace_front(1, 2);\n+  VERIFY(x.front().a == 1);\n+  VERIFY(x.front().b == 2);\n+  x.emplace_front(1);\n+  VERIFY(x.front().a == 1);\n+  VERIFY(x.front().b == 0);\n+  x.emplace_front();\n+  VERIFY(x.front().a == 0);\n+  VERIFY(x.front().b == 0);\n+}\n+\n+void test_emplace_after()\n+{\n+  std::forward_list<aggressive_aggregate> x{{42, 666}};\n+  auto y = x.emplace_after(x.begin(), 1, 2);\n+  VERIFY(y->a == 1);\n+  VERIFY(y->b == 2);\n+  y = x.emplace_after(x.begin(), 1);\n+  VERIFY(y->a == 1);\n+  VERIFY(y->b == 0);\n+  y = x.emplace_after(x.begin());\n+  VERIFY(y->a == 0);\n+  VERIFY(y->b == 0);\n+}\n+\n+int main()\n+{\n+  test_emplace_front();\n+  test_emplace_after();\n+}"}, {"sha": "eb1e9f3525e8067c1487c56e9ab3b1cc8a54ea48", "filename": "libstdc++-v3/testsuite/23_containers/list/modifiers/emplace/92878_92947.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Femplace%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Femplace%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Flist%2Fmodifiers%2Femplace%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,78 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <list>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test_emplace_front()\n+{\n+  std::list<aggressive_aggregate> x;\n+  x.emplace_front(1, 2);\n+  VERIFY(x.front().a == 1);\n+  VERIFY(x.front().b == 2);\n+  x.emplace_front(1);\n+  VERIFY(x.front().a == 1);\n+  VERIFY(x.front().b == 0);\n+  x.emplace_front();\n+  VERIFY(x.front().a == 0);\n+  VERIFY(x.front().b == 0);\n+}\n+\n+void test_emplace_back()\n+{\n+  std::list<aggressive_aggregate> x;\n+  x.emplace_back(1, 2);\n+  VERIFY(x.back().a == 1);\n+  VERIFY(x.back().b == 2);\n+  x.emplace_back(1);\n+  VERIFY(x.back().a == 1);\n+  VERIFY(x.back().b == 0);\n+  x.emplace_back();\n+  VERIFY(x.back().a == 0);\n+  VERIFY(x.back().b == 0);\n+}\n+\n+void test_emplace()\n+{\n+  std::list<aggressive_aggregate> x{{42, 666}};\n+  auto y = x.emplace(x.begin(), 1, 2);\n+  VERIFY(y->a == 1);\n+  VERIFY(y->b == 2);\n+  y = x.emplace(x.begin(), 1);\n+  VERIFY(y->a == 1);\n+  VERIFY(y->b == 0);\n+  y = x.emplace(x.begin());\n+  VERIFY(y->a == 0);\n+  VERIFY(y->b == 0);\n+}\n+\n+\n+int main()\n+{\n+  test_emplace_front();\n+  test_emplace_back();\n+  test_emplace();\n+}"}, {"sha": "648a5255c5a5e2559268cd42ce8f5f844609c1f3", "filename": "libstdc++-v3/testsuite/23_containers/map/modifiers/emplace/92878_92947.cc", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Femplace%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Femplace%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2Fmodifiers%2Femplace%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,137 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test_emplace()\n+{\n+  std::map<int, aggressive_aggregate> x;\n+  auto emplaced = x.emplace(std::piecewise_construct,\n+\t\t\t    std::tuple(0), std::tuple(1, 2));\n+  VERIFY(emplaced.first->second.a == 1);\n+  VERIFY(emplaced.first->second.b == 2);\n+  emplaced = x.emplace(std::piecewise_construct,\n+\t\t       std::tuple(1), std::tuple(1));\n+  VERIFY(emplaced.first->second.a == 1);\n+  VERIFY(emplaced.first->second.b == 0);\n+  emplaced = x.emplace(std::piecewise_construct,\n+\t\t       std::tuple(2), std::tuple());\n+  VERIFY(emplaced.first->second.a == 0);\n+  VERIFY(emplaced.first->second.b == 0);\n+}\n+\n+void test_emplace_hint()\n+{\n+  std::map<int, aggressive_aggregate> x;\n+  auto it = x.emplace_hint(x.begin(),\n+\t\t\t   std::piecewise_construct,\n+\t\t\t   std::tuple(3), std::tuple(1, 2));\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 2);\n+  it = x.emplace_hint(x.begin(),\n+\t\t      std::piecewise_construct,\n+\t\t      std::tuple(4), std::tuple(1));\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 0);\n+  it = x.emplace_hint(x.begin(),\n+\t\t      std::piecewise_construct,\n+\t\t      std::tuple(5), std::tuple());\n+  VERIFY(it->second.a == 0);\n+  VERIFY(it->second.b == 0);\n+}\n+\n+void test_try_emplace_rvalue()\n+{\n+  std::map<int, aggressive_aggregate> x;\n+  auto emplaced = x.try_emplace(6, 1, 2);\n+  VERIFY(emplaced.first->second.a == 1);\n+  VERIFY(emplaced.first->second.b == 2);\n+  emplaced = x.try_emplace(7, 1);\n+  VERIFY(emplaced.first->second.a == 1);\n+  VERIFY(emplaced.first->second.b == 0);\n+  emplaced = x.try_emplace(8);\n+  VERIFY(emplaced.first->second.a == 0);\n+  VERIFY(emplaced.first->second.b == 0);\n+}\n+\n+void test_try_emplace_lvalue()\n+{\n+  std::map<int, aggressive_aggregate> x;\n+  int key = 9;\n+  auto emplaced = x.try_emplace(key, 1, 2);\n+  VERIFY(emplaced.first->second.a == 1);\n+  VERIFY(emplaced.first->second.b == 2);\n+  key = 10;\n+  emplaced = x.try_emplace(key, 1);\n+  VERIFY(emplaced.first->second.a == 1);\n+  VERIFY(emplaced.first->second.b == 0);\n+  key = 11;\n+  emplaced = x.try_emplace(key);\n+  VERIFY(emplaced.first->second.a == 0);\n+  VERIFY(emplaced.first->second.b == 0);\n+}\n+\n+void test_try_emplace_hint_rvalue()\n+{\n+  std::map<int, aggressive_aggregate> x;\n+  auto it = x.try_emplace(x.begin(), 12, 1, 2);\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 2);\n+  it = x.try_emplace(x.begin(), 13, 1);\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 0);\n+  it = x.try_emplace(x.begin(), 14);\n+  VERIFY(it->second.a == 0);\n+  VERIFY(it->second.b == 0);\n+}\n+\n+void test_try_emplace_hint_lvalue()\n+{\n+  std::map<int, aggressive_aggregate> x;\n+  int key = 15;\n+  auto it = x.try_emplace(x.begin(), key, 1, 2);\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 2);\n+  key = 16;\n+  it = x.try_emplace(x.begin(), key, 1);\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 0);\n+  key = 17;\n+  it = x.try_emplace(x.begin(), key);\n+  VERIFY(it->second.a == 0);\n+  VERIFY(it->second.b == 0);\n+}\n+\n+int main()\n+{\n+  test_emplace();\n+  test_emplace_hint();\n+  test_try_emplace_rvalue();\n+  test_try_emplace_lvalue();\n+  test_try_emplace_hint_rvalue();\n+  test_try_emplace_hint_lvalue();\n+}"}, {"sha": "9ded6631a23b942df7bda2a02a5849e4cbbc427c", "filename": "libstdc++-v3/testsuite/23_containers/multimap/modifiers/emplace/92878_92947.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Femplace%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Femplace%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultimap%2Fmodifiers%2Femplace%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <map>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test_emplace()\n+{\n+  std::multimap<int, aggressive_aggregate> x;\n+  auto it = x.emplace(std::piecewise_construct,\n+\t\t\t    std::tuple(0), std::tuple(1, 2));\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 2);\n+  it = x.emplace(std::piecewise_construct,\n+\t\t       std::tuple(1), std::tuple(1));\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 0);\n+  it = x.emplace(std::piecewise_construct,\n+\t\t       std::tuple(2), std::tuple());\n+  VERIFY(it->second.a == 0);\n+  VERIFY(it->second.b == 0);\n+}\n+\n+void test_emplace_hint()\n+{\n+  std::multimap<int, aggressive_aggregate> x;\n+  auto it = x.emplace_hint(x.begin(),\n+\t\t\t   std::piecewise_construct,\n+\t\t\t   std::tuple(3), std::tuple(1, 2));\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 2);\n+  it = x.emplace_hint(x.begin(),\n+\t\t      std::piecewise_construct,\n+\t\t      std::tuple(4), std::tuple(1));\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 0);\n+  it = x.emplace_hint(x.begin(),\n+\t\t      std::piecewise_construct,\n+\t\t      std::tuple(5), std::tuple());\n+  VERIFY(it->second.a == 0);\n+  VERIFY(it->second.b == 0);\n+}\n+\n+int main()\n+{\n+  test_emplace();\n+  test_emplace_hint();\n+}"}, {"sha": "85df09908d5ced2e62b4bef2f237bd6896d6dac4", "filename": "libstdc++-v3/testsuite/23_containers/multiset/modifiers/emplace/92878_92947.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Femplace%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Femplace%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmultiset%2Fmodifiers%2Femplace%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,70 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+bool operator<(const aggressive_aggregate& a,\n+\t       const aggressive_aggregate& b)\n+{\n+  return a.a < b.a;\n+};\n+\n+void test_emplace()\n+{\n+  std::multiset<aggressive_aggregate> x;\n+  auto it = x.emplace(1, 2);\n+  VERIFY(it->a == 1);\n+  VERIFY(it->b == 2);\n+  it = x.emplace(2);\n+  VERIFY(it->a == 2);\n+  VERIFY(it->b == 0);\n+  it = x.emplace();\n+  VERIFY(it->a == 0);\n+  VERIFY(it->b == 0);\n+}\n+\n+void test_emplace_hint()\n+{\n+  std::multiset<aggressive_aggregate> x;\n+  auto it = x.emplace_hint(x.begin(),\n+\t\t      3, 2);\n+  VERIFY(it->a == 3);\n+  VERIFY(it->b == 2);\n+  it = x.emplace_hint(x.begin(),\n+\t\t      4);\n+  VERIFY(it->a == 4);\n+  VERIFY(it->b == 0);\n+  it = x.emplace_hint(x.begin());\n+  VERIFY(it->a == 0);\n+  VERIFY(it->b == 0);\n+}\n+\n+int main()\n+{\n+  test_emplace();\n+  test_emplace_hint();\n+}"}, {"sha": "1111f8ce35a6e44dddec2691be05bc91c7b4b371", "filename": "libstdc++-v3/testsuite/23_containers/priority_queue/92878_92947.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fpriority_queue%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,52 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <queue>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+bool operator<(const aggressive_aggregate& a, const aggressive_aggregate& b)\n+{\n+  return a.a < b.a;\n+}\n+\n+void test01()\n+{\n+  std::priority_queue<aggressive_aggregate> x;\n+  x.emplace();\n+  VERIFY(x.top().a == 0);\n+  VERIFY(x.top().b == 0);\n+  x.emplace(1, 2);\n+  VERIFY(x.top().a == 1);\n+  VERIFY(x.top().b == 2);\n+  x.emplace(2);\n+  VERIFY(x.top().a == 2);\n+  VERIFY(x.top().b == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "e328b36440a4d072bbf551c038f0688f233cfd0b", "filename": "libstdc++-v3/testsuite/23_containers/queue/92878_92947.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fqueue%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <queue>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test01()\n+{\n+  std::queue<aggressive_aggregate> x;\n+  x.emplace(1, 2);\n+  VERIFY(x.back().a == 1);\n+  VERIFY(x.back().b == 2);\n+  x.emplace(1);\n+  VERIFY(x.back().a == 1);\n+  VERIFY(x.back().b == 0);\n+  x.emplace();\n+  VERIFY(x.back().a == 0);\n+  VERIFY(x.back().b == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "8183b50ec361d682bb9ad900184cfa4af5658131", "filename": "libstdc++-v3/testsuite/23_containers/set/modifiers/emplace/92878_92947.cc", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Femplace%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Femplace%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2Fmodifiers%2Femplace%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,70 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <set>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+bool operator<(const aggressive_aggregate& a,\n+\t       const aggressive_aggregate& b)\n+{\n+  return a.a < b.a;\n+};\n+\n+void test_emplace()\n+{\n+  std::set<aggressive_aggregate> x;\n+  auto emplaced = x.emplace(1, 2);\n+  VERIFY(emplaced.first->a == 1);\n+  VERIFY(emplaced.first->b == 2);\n+  emplaced = x.emplace(2);\n+  VERIFY(emplaced.first->a == 2);\n+  VERIFY(emplaced.first->b == 0);\n+  emplaced = x.emplace();\n+  VERIFY(emplaced.first->a == 0);\n+  VERIFY(emplaced.first->b == 0);\n+}\n+\n+void test_emplace_hint()\n+{\n+  std::set<aggressive_aggregate> x;\n+  auto it = x.emplace_hint(x.begin(),\n+\t\t      3, 2);\n+  VERIFY(it->a == 3);\n+  VERIFY(it->b == 2);\n+  it = x.emplace_hint(x.begin(),\n+\t\t      4);\n+  VERIFY(it->a == 4);\n+  VERIFY(it->b == 0);\n+  it = x.emplace_hint(x.begin());\n+  VERIFY(it->a == 0);\n+  VERIFY(it->b == 0);\n+}\n+\n+int main()\n+{\n+  test_emplace();\n+  test_emplace_hint();\n+}"}, {"sha": "c4522404ecff9815d0f76c91b5f82e72f355409f", "filename": "libstdc++-v3/testsuite/23_containers/stack/92878_92947.cc", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fstack%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,47 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <stack>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test01()\n+{\n+  std::stack<aggressive_aggregate> x;\n+  x.emplace();\n+  VERIFY(x.top().a == 0);\n+  VERIFY(x.top().b == 0);\n+  x.emplace(1, 2);\n+  VERIFY(x.top().a == 1);\n+  VERIFY(x.top().b == 2);\n+  x.emplace(2);\n+  VERIFY(x.top().a == 2);\n+  VERIFY(x.top().b == 0);\n+}\n+\n+int main()\n+{\n+  test01();\n+}"}, {"sha": "2c8e6ca08313934fd4fb58f7f0aecc5eba22d9b7", "filename": "libstdc++-v3/testsuite/23_containers/unordered_map/modifiers/92878_92947.cc", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fmodifiers%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fmodifiers%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_map%2Fmodifiers%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,137 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test_emplace()\n+{\n+  std::unordered_map<int, aggressive_aggregate> x;\n+  auto emplaced = x.emplace(std::piecewise_construct,\n+\t\t\t    std::tuple(0), std::tuple(1, 2));\n+  VERIFY(emplaced.first->second.a == 1);\n+  VERIFY(emplaced.first->second.b == 2);\n+  emplaced = x.emplace(std::piecewise_construct,\n+\t\t       std::tuple(1), std::tuple(1));\n+  VERIFY(emplaced.first->second.a == 1);\n+  VERIFY(emplaced.first->second.b == 0);\n+  emplaced = x.emplace(std::piecewise_construct,\n+\t\t       std::tuple(2), std::tuple());\n+  VERIFY(emplaced.first->second.a == 0);\n+  VERIFY(emplaced.first->second.b == 0);\n+}\n+\n+void test_emplace_hint()\n+{\n+  std::unordered_map<int, aggressive_aggregate> x;\n+  auto it = x.emplace_hint(x.begin(),\n+\t\t\t   std::piecewise_construct,\n+\t\t\t   std::tuple(3), std::tuple(1, 2));\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 2);\n+  it = x.emplace_hint(x.begin(),\n+\t\t      std::piecewise_construct,\n+\t\t      std::tuple(4), std::tuple(1));\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 0);\n+  it = x.emplace_hint(x.begin(),\n+\t\t      std::piecewise_construct,\n+\t\t      std::tuple(5), std::tuple());\n+  VERIFY(it->second.a == 0);\n+  VERIFY(it->second.b == 0);\n+}\n+\n+void test_try_emplace_rvalue()\n+{\n+  std::unordered_map<int, aggressive_aggregate> x;\n+  auto emplaced = x.try_emplace(6, 1, 2);\n+  VERIFY(emplaced.first->second.a == 1);\n+  VERIFY(emplaced.first->second.b == 2);\n+  emplaced = x.try_emplace(7, 1);\n+  VERIFY(emplaced.first->second.a == 1);\n+  VERIFY(emplaced.first->second.b == 0);\n+  emplaced = x.try_emplace(8);\n+  VERIFY(emplaced.first->second.a == 0);\n+  VERIFY(emplaced.first->second.b == 0);\n+}\n+\n+void test_try_emplace_lvalue()\n+{\n+  std::unordered_map<int, aggressive_aggregate> x;\n+  int key = 9;\n+  auto emplaced = x.try_emplace(key, 1, 2);\n+  VERIFY(emplaced.first->second.a == 1);\n+  VERIFY(emplaced.first->second.b == 2);\n+  key = 10;\n+  emplaced = x.try_emplace(key, 1);\n+  VERIFY(emplaced.first->second.a == 1);\n+  VERIFY(emplaced.first->second.b == 0);\n+  key = 11;\n+  emplaced = x.try_emplace(key);\n+  VERIFY(emplaced.first->second.a == 0);\n+  VERIFY(emplaced.first->second.b == 0);\n+}\n+\n+void test_try_emplace_hint_rvalue()\n+{\n+  std::unordered_map<int, aggressive_aggregate> x;\n+  auto it = x.try_emplace(x.begin(), 12, 1, 2);\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 2);\n+  it = x.try_emplace(x.begin(), 13, 1);\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 0);\n+  it = x.try_emplace(x.begin(), 14);\n+  VERIFY(it->second.a == 0);\n+  VERIFY(it->second.b == 0);\n+}\n+\n+void test_try_emplace_hint_lvalue()\n+{\n+  std::unordered_map<int, aggressive_aggregate> x;\n+  int key = 15;\n+  auto it = x.try_emplace(x.begin(), key, 1, 2);\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 2);\n+  key = 16;\n+  it = x.try_emplace(x.begin(), key, 1);\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 0);\n+  key = 17;\n+  it = x.try_emplace(x.begin(), key);\n+  VERIFY(it->second.a == 0);\n+  VERIFY(it->second.b == 0);\n+}\n+\n+int main()\n+{\n+  test_emplace();\n+  test_emplace_hint();\n+  test_try_emplace_rvalue();\n+  test_try_emplace_lvalue();\n+  test_try_emplace_hint_rvalue();\n+  test_try_emplace_hint_lvalue();\n+}"}, {"sha": "4da3c517036af131a1d19b408ee67a6bdd42c2fc", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multimap/modifiers/92878_92947.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fmodifiers%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fmodifiers%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multimap%2Fmodifiers%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,71 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_map>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test_emplace()\n+{\n+  std::unordered_multimap<int, aggressive_aggregate> x;\n+  auto it = x.emplace(std::piecewise_construct,\n+\t\t\t    std::tuple(0), std::tuple(1, 2));\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 2);\n+  it = x.emplace(std::piecewise_construct,\n+\t\t       std::tuple(1), std::tuple(1));\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 0);\n+  it = x.emplace(std::piecewise_construct,\n+\t\t       std::tuple(2), std::tuple());\n+  VERIFY(it->second.a == 0);\n+  VERIFY(it->second.b == 0);\n+}\n+\n+void test_emplace_hint()\n+{\n+  std::unordered_multimap<int, aggressive_aggregate> x;\n+  auto it = x.emplace_hint(x.begin(),\n+\t\t\t   std::piecewise_construct,\n+\t\t\t   std::tuple(3), std::tuple(1, 2));\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 2);\n+  it = x.emplace_hint(x.begin(),\n+\t\t      std::piecewise_construct,\n+\t\t      std::tuple(4), std::tuple(1));\n+  VERIFY(it->second.a == 1);\n+  VERIFY(it->second.b == 0);\n+  it = x.emplace_hint(x.begin(),\n+\t\t      std::piecewise_construct,\n+\t\t      std::tuple(5), std::tuple());\n+  VERIFY(it->second.a == 0);\n+  VERIFY(it->second.b == 0);\n+}\n+\n+int main()\n+{\n+  test_emplace();\n+  test_emplace_hint();\n+}"}, {"sha": "ec0c86e7222b039d4411f42cac92031f7819ba14", "filename": "libstdc++-v3/testsuite/23_containers/unordered_multiset/modifiers/92878_92947.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fmodifiers%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fmodifiers%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_multiset%2Fmodifiers%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,78 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+bool operator==(const aggressive_aggregate& a,\n+\t       const aggressive_aggregate& b)\n+{\n+  return a.a == b.a;\n+};\n+\n+namespace std {\n+  template<> struct hash<aggressive_aggregate> {\n+    size_t operator()(const aggressive_aggregate& x) const {\n+      return std::hash<int>()(x.a);\n+    }\n+  };\n+}\n+\n+void test_emplace()\n+{\n+  std::unordered_multiset<aggressive_aggregate> x;\n+  auto it = x.emplace(1, 2);\n+  VERIFY(it->a == 1);\n+  VERIFY(it->b == 2);\n+  it = x.emplace(2);\n+  VERIFY(it->a == 2);\n+  VERIFY(it->b == 0);\n+  it = x.emplace();\n+  VERIFY(it->a == 0);\n+  VERIFY(it->b == 0);\n+}\n+\n+void test_emplace_hint()\n+{\n+  std::unordered_multiset<aggressive_aggregate> x;\n+  auto it = x.emplace_hint(x.begin(),\n+\t\t      3, 2);\n+  VERIFY(it->a == 3);\n+  VERIFY(it->b == 2);\n+  it = x.emplace_hint(x.begin(),\n+\t\t      4);\n+  VERIFY(it->a == 4);\n+  VERIFY(it->b == 0);\n+  it = x.emplace_hint(x.begin());\n+  VERIFY(it->a == 0);\n+  VERIFY(it->b == 0);\n+}\n+\n+int main()\n+{\n+  test_emplace();\n+  test_emplace_hint();\n+}"}, {"sha": "447e1a8934d26dde7276bc566a90132411d70d19", "filename": "libstdc++-v3/testsuite/23_containers/unordered_set/modifiers/92878_92947.cc", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fmodifiers%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fmodifiers%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Funordered_set%2Fmodifiers%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,78 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <unordered_set>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+bool operator==(const aggressive_aggregate& a,\n+\t       const aggressive_aggregate& b)\n+{\n+  return a.a == b.a;\n+};\n+\n+namespace std {\n+  template<> struct hash<aggressive_aggregate> {\n+    size_t operator()(const aggressive_aggregate& x) const {\n+      return std::hash<int>()(x.a);\n+    }\n+  };\n+}\n+\n+void test_emplace()\n+{\n+  std::unordered_set<aggressive_aggregate> x;\n+  auto emplaced = x.emplace(1, 2);\n+  VERIFY(emplaced.first->a == 1);\n+  VERIFY(emplaced.first->b == 2);\n+  emplaced = x.emplace(2);\n+  VERIFY(emplaced.first->a == 2);\n+  VERIFY(emplaced.first->b == 0);\n+  emplaced = x.emplace();\n+  VERIFY(emplaced.first->a == 0);\n+  VERIFY(emplaced.first->b == 0);\n+}\n+\n+void test_emplace_hint()\n+{\n+  std::unordered_set<aggressive_aggregate> x;\n+  auto it = x.emplace_hint(x.begin(),\n+\t\t      3, 2);\n+  VERIFY(it->a == 3);\n+  VERIFY(it->b == 2);\n+  it = x.emplace_hint(x.begin(),\n+\t\t      4);\n+  VERIFY(it->a == 4);\n+  VERIFY(it->b == 0);\n+  it = x.emplace_hint(x.begin());\n+  VERIFY(it->a == 0);\n+  VERIFY(it->b == 0);\n+}\n+\n+int main()\n+{\n+  test_emplace();\n+  test_emplace_hint();\n+}"}, {"sha": "a33bf39998b0e982b38abd3c5cbf1adf8cbb3119", "filename": "libstdc++-v3/testsuite/23_containers/vector/modifiers/emplace/92878_92947.cc", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Femplace%2F92878_92947.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e06cde870edc7ec21736145b6857565d4b2f0e85/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Femplace%2F92878_92947.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fvector%2Fmodifiers%2Femplace%2F92878_92947.cc?ref=e06cde870edc7ec21736145b6857565d4b2f0e85", "patch": "@@ -0,0 +1,61 @@\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do run { target c++2a } }\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <testsuite_hooks.h>\n+\n+struct aggressive_aggregate\n+{\n+    int a;\n+    int b;\n+};\n+\n+void test_emplace()\n+{\n+  std::vector<aggressive_aggregate> x{{42, 666}};\n+  auto y = x.emplace(x.begin(), 1, 2);\n+  VERIFY(y->a == 1);\n+  VERIFY(y->b == 2);\n+  y = x.emplace(x.begin(), 1);\n+  VERIFY(y->a == 1);\n+  VERIFY(y->b == 0);\n+  y = x.emplace(x.begin());\n+  VERIFY(y->a == 0);\n+  VERIFY(y->b == 0);\n+}\n+\n+void test_emplace_back()\n+{\n+  std::vector<aggressive_aggregate> x;\n+  x.emplace_back(1, 2);\n+  VERIFY(x.back().a == 1);\n+  VERIFY(x.back().b == 2);\n+  x.emplace_back(1);\n+  VERIFY(x.back().a == 1);\n+  VERIFY(x.back().b == 0);\n+  x.emplace_back();\n+  VERIFY(x.back().a == 0);\n+  VERIFY(x.back().b == 0);\n+}\n+\n+int main()\n+{\n+  test_emplace();\n+  test_emplace_back();\n+}"}]}