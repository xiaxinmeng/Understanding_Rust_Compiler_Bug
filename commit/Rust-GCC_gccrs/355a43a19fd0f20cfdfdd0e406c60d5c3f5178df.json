{"sha": "355a43a19fd0f20cfdfdd0e406c60d5c3f5178df", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU1YTQzYTE5ZmQwZjIwY2ZkZmRkMGU0MDZjNjBkNWMzZjUxNzhkZg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2016-03-01T20:04:01Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2016-03-01T20:04:01Z"}, "message": "re PR ada/70017 (c52103x and c52104x test failure on s390x)\n\n\tPR ada/70017\n\t* ira.c (do_reload): Issue warning for generic stack checking here...\n\t* reload1.c (reload): ...instead of here and streamline it.\n\nFrom-SVN: r233862", "tree": {"sha": "9d8eef7ecfbe716d17be98b438245521b56c2b1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d8eef7ecfbe716d17be98b438245521b56c2b1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df", "html_url": "https://github.com/Rust-GCC/gccrs/commit/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df/comments", "author": null, "committer": null, "parents": [{"sha": "686e2237f31bd26851e3c8f9a528ab30aef16c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/686e2237f31bd26851e3c8f9a528ab30aef16c54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/686e2237f31bd26851e3c8f9a528ab30aef16c54"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "ef319be33b647426f934cf0cf215f4f25cb9c0ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=355a43a19fd0f20cfdfdd0e406c60d5c3f5178df", "patch": "@@ -1,3 +1,9 @@\n+2016-03-01  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/70017\n+\t* ira.c (do_reload): Issue warning for generic stack checking here...\n+\t* reload1.c (reload): ...instead of here and streamline it.\n+\n 2016-03-01  Nick Clifton  <nickc@redhat.com>\n \n \t* config.gcc (cr16-*-elf): Add newlib-stdint.h to tm_file."}, {"sha": "0973258d9e7b5f05d1bab859d72dfca32a521a42", "filename": "gcc/ira.c", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=355a43a19fd0f20cfdfdd0e406c60d5c3f5178df", "patch": "@@ -5404,9 +5404,8 @@ do_reload (void)\n     {\n       df_set_flags (DF_NO_INSN_RESCAN);\n       build_insn_chain ();\n-      \n-      need_dce = reload (get_insns (), ira_conflicts_p);\n \n+      need_dce = reload (get_insns (), ira_conflicts_p);\n     }\n \n   timevar_pop (TV_RELOAD);\n@@ -5484,6 +5483,20 @@ do_reload (void)\n       inform (DECL_SOURCE_LOCATION (decl), \"for %qD\", decl);\n     }\n \n+  /* If we are doing generic stack checking, give a warning if this\n+     function's frame size is larger than we expect.  */\n+  if (flag_stack_check == GENERIC_STACK_CHECK)\n+    {\n+      HOST_WIDE_INT size = get_frame_size () + STACK_CHECK_FIXED_FRAME_SIZE;\n+\n+      for (int i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n+\tif (df_regs_ever_live_p (i) && !fixed_regs[i] && call_used_regs[i])\n+\t  size += UNITS_PER_WORD;\n+\n+      if (size > STACK_CHECK_MAX_FRAME_SIZE)\n+\twarning (0, \"frame size too large for reliable stack checking\");\n+    }\n+\n   if (pic_offset_table_regno != INVALID_REGNUM)\n     pic_offset_table_rtx = gen_rtx_REG (Pmode, pic_offset_table_regno);\n "}, {"sha": "252394e07770700aa0d567ca4670403561cf6c35", "filename": "gcc/reload1.c", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=355a43a19fd0f20cfdfdd0e406c60d5c3f5178df", "patch": "@@ -1258,28 +1258,6 @@ reload (rtx_insn *first, int global)\n \t  }\n       }\n \n-  /* If we are doing generic stack checking, give a warning if this\n-     function's frame size is larger than we expect.  */\n-  if (flag_stack_check == GENERIC_STACK_CHECK)\n-    {\n-      HOST_WIDE_INT size = get_frame_size () + STACK_CHECK_FIXED_FRAME_SIZE;\n-      static int verbose_warned = 0;\n-\n-      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n-\tif (df_regs_ever_live_p (i) && ! fixed_regs[i] && call_used_regs[i])\n-\t  size += UNITS_PER_WORD;\n-\n-      if (size > STACK_CHECK_MAX_FRAME_SIZE)\n-\t{\n-\t  warning (0, \"frame size too large for reliable stack checking\");\n-\t  if (! verbose_warned)\n-\t    {\n-\t      warning (0, \"try reducing the number of local variables\");\n-\t      verbose_warned = 1;\n-\t    }\n-\t}\n-    }\n-\n   free (temp_pseudo_reg_arr);\n \n   /* Indicate that we no longer have known memory locations or constants.  */"}, {"sha": "75148f35053b5cb1a9b9ee1a13311d7ba1b1d8eb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=355a43a19fd0f20cfdfdd0e406c60d5c3f5178df", "patch": "@@ -1,3 +1,7 @@\n+2016-02-29  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/pr70017.c: New test.\n+\n 2016-03-01  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/69796"}, {"sha": "44f0ab949158f7f2424f37bd04774174297da367", "filename": "gcc/testsuite/gcc.dg/pr70017.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70017.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355a43a19fd0f20cfdfdd0e406c60d5c3f5178df/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70017.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr70017.c?ref=355a43a19fd0f20cfdfdd0e406c60d5c3f5178df", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fstack-check=generic\" } */\n+\n+/* Check that the expected warning is issued for large frames.  */\n+\n+#define ONE(s) char a##s[32];\n+#define TEN(s) ONE(s##0) ONE(s##1) ONE(s##2) ONE(s##3) ONE(s##4) \\\n+               ONE(s##5) ONE(s##6) ONE(s##7) ONE(s##8) ONE(s##9)\n+#define HUNDRED(s) TEN(s##0) TEN(s##1) TEN(s##2) TEN(s##3) TEN(s##4) \\\n+                   TEN(s##5) TEN(s##6) TEN(s##7) TEN(s##8) TEN(s##9)\n+\n+void foo(void)\n+{\n+  HUNDRED(a)\n+  HUNDRED(b)\n+} /* { dg-warning \"frame size too large for reliable stack checking\" } */"}]}