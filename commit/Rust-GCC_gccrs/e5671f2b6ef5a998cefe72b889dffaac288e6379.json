{"sha": "e5671f2b6ef5a998cefe72b889dffaac288e6379", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU2NzFmMmI2ZWY1YTk5OGNlZmU3MmI4ODlkZmZhYWMyODhlNjM3OQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-25T10:13:31Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-06-25T10:13:31Z"}, "message": "*** empty log message ***\n\nFrom-SVN: r1281", "tree": {"sha": "1cde4a100759eeab9da1b710ece6235698594123", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1cde4a100759eeab9da1b710ece6235698594123"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5671f2b6ef5a998cefe72b889dffaac288e6379", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5671f2b6ef5a998cefe72b889dffaac288e6379", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5671f2b6ef5a998cefe72b889dffaac288e6379", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5671f2b6ef5a998cefe72b889dffaac288e6379/comments", "author": null, "committer": null, "parents": [{"sha": "cd10f7b60831de7ea1077ad3249526809010d27a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd10f7b60831de7ea1077ad3249526809010d27a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd10f7b60831de7ea1077ad3249526809010d27a"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "587bde64821b21a13176ac8d469fd9c30d82f4e3", "filename": "gcc/explow.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5671f2b6ef5a998cefe72b889dffaac288e6379/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5671f2b6ef5a998cefe72b889dffaac288e6379/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=e5671f2b6ef5a998cefe72b889dffaac288e6379", "patch": "@@ -99,17 +99,13 @@ plus_constant (x, c)\n \t Look for constant term in the sum and combine\n \t with C.  For an integer constant term, we make a combined\n \t integer.  For a constant term that is not an explicit integer,\n-\t we cannot really combine, but group them together anyway.  */\n-      if (GET_CODE (XEXP (x, 0)) == CONST_INT)\n-\t{\n-\t  c += INTVAL (XEXP (x, 0));\n-\t  x = XEXP (x, 1);\n-\t}\n-      else if (GET_CODE (XEXP (x, 1)) == CONST_INT)\n-\t{\n-\t  c += INTVAL (XEXP (x, 1));\n-\t  x = XEXP (x, 0);\n-\t}\n+\t we cannot really combine, but group them together anyway.  \n+\n+\t Use a recursive call in case the remaining operand is something\n+\t that we handle specially, such as a SYMBOL_REF.  */\n+\n+      if (GET_CODE (XEXP (x, 1)) == CONST_INT)\n+\treturn plus_constant (XEXP (x, 0), c + INTVAL (XEXP (x, 1)));\n       else if (CONSTANT_P (XEXP (x, 0)))\n \treturn gen_rtx (PLUS, mode,\n \t\t\tplus_constant (XEXP (x, 0), c),\n@@ -131,7 +127,7 @@ plus_constant (x, c)\n     return x;\n }\n \n-/* This is the same a `plus_constant', except that it handles LO_SUM.  */\n+/* This is the same as `plus_constant', except that it handles LO_SUM.  */\n \n rtx\n plus_constant_for_output (x, c)"}]}