{"sha": "6642bdb4b14d655cedea29d01fbb0d854a6c14fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjY0MmJkYjRiMTRkNjU1Y2VkZWEyOWQwMWZiYjBkODU0YTZjMTRmYQ==", "commit": {"author": {"name": "Jiong Wang", "email": "jiong.wang@arm.com", "date": "2015-06-26T13:41:24Z"}, "committer": {"name": "Jiong Wang", "email": "jiwang@gcc.gnu.org", "date": "2015-06-26T13:41:24Z"}, "message": "[AArch64][1/2] Rename SYMBOL_SMALL_GOT to SYMBOL_SMALL_GOT_4G\n\n2015-06-26  Jiong Wang  <jiong.wang@arm.com>\n\n\t* config/aarch64/aarch64-protos.h (aarch64_symbol_type): Rename\n\tSYMBOL_SMALL_GOT to SYMBOL_SMALL_GOT_4G.\n\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Ditto.\n\t(aarch64_expand_mov_immediate): Ditto.\n\t(aarch64_print_operand): Ditto.\n\t(aarch64_classify_symbol): Ditto.\n\nFrom-SVN: r225013", "tree": {"sha": "956019505d1198ed8c6bd37ced57348178665586", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/956019505d1198ed8c6bd37ced57348178665586"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6642bdb4b14d655cedea29d01fbb0d854a6c14fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6642bdb4b14d655cedea29d01fbb0d854a6c14fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6642bdb4b14d655cedea29d01fbb0d854a6c14fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6642bdb4b14d655cedea29d01fbb0d854a6c14fa/comments", "author": null, "committer": null, "parents": [{"sha": "569aafaaf7a02c5cd6d7b69fafac581c61464091", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/569aafaaf7a02c5cd6d7b69fafac581c61464091", "html_url": "https://github.com/Rust-GCC/gccrs/commit/569aafaaf7a02c5cd6d7b69fafac581c61464091"}], "stats": {"total": 26, "additions": 18, "deletions": 8}, "files": [{"sha": "c508303ac9ba6ed0708475d9613a38bead3565e4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6642bdb4b14d655cedea29d01fbb0d854a6c14fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6642bdb4b14d655cedea29d01fbb0d854a6c14fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6642bdb4b14d655cedea29d01fbb0d854a6c14fa", "patch": "@@ -1,3 +1,12 @@\n+2015-06-26  Jiong Wang  <jiong.wang@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (aarch64_symbol_type): Rename\n+\tSYMBOL_SMALL_GOT to SYMBOL_SMALL_GOT_4G.\n+\t* config/aarch64/aarch64.c (aarch64_load_symref_appropriately): Ditto.\n+\t(aarch64_expand_mov_immediate): Ditto.\n+\t(aarch64_print_operand): Ditto.\n+\t(aarch64_classify_symbol): Ditto.\n+\n 2015-06-26  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* config/nvptx/nvptx.md (call_operation): Remove unused variables."}, {"sha": "249a701a29159f35aef097542a51b31cde79224a", "filename": "gcc/config/aarch64/aarch64-protos.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6642bdb4b14d655cedea29d01fbb0d854a6c14fa/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6642bdb4b14d655cedea29d01fbb0d854a6c14fa/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-protos.h?ref=6642bdb4b14d655cedea29d01fbb0d854a6c14fa", "patch": "@@ -49,12 +49,13 @@ enum aarch64_symbol_context\n \n    This corresponds to the small code model of the compiler.\n \n-   SYMBOL_SMALL_GOT: Similar to the one above but this\n+   SYMBOL_SMALL_GOT_4G: Similar to the one above but this\n    gives us the GOT entry of the symbol being referred to :\n    Thus calculating the GOT entry for foo is done using the\n    following sequence of instructions.  The ADRP instruction\n    gets us to the page containing the GOT entry of the symbol\n-   and the got_lo12 gets us the actual offset in it.\n+   and the got_lo12 gets us the actual offset in it, together\n+   the base and offset, we can address 4G size GOT table.\n \n    adrp  x0, :got:foo\n    ldr   x0, [x0, :gotoff_lo12:foo]\n@@ -94,7 +95,7 @@ enum aarch64_symbol_context\n enum aarch64_symbol_type\n {\n   SYMBOL_SMALL_ABSOLUTE,\n-  SYMBOL_SMALL_GOT,\n+  SYMBOL_SMALL_GOT_4G,\n   SYMBOL_SMALL_TLSGD,\n   SYMBOL_SMALL_TLSDESC,\n   SYMBOL_SMALL_GOTTPREL,"}, {"sha": "67e21c821d0efeca03a8a9c12ff707c1c942444a", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6642bdb4b14d655cedea29d01fbb0d854a6c14fa/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6642bdb4b14d655cedea29d01fbb0d854a6c14fa/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=6642bdb4b14d655cedea29d01fbb0d854a6c14fa", "patch": "@@ -826,7 +826,7 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n       emit_insn (gen_rtx_SET (dest, imm));\n       return;\n \n-    case SYMBOL_SMALL_GOT:\n+    case SYMBOL_SMALL_GOT_4G:\n       {\n \t/* In ILP32, the mode of dest can be either SImode or DImode,\n \t   while the got entry is always of SImode size.  The mode of\n@@ -1478,7 +1478,7 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n         case SYMBOL_SMALL_TLSGD:\n         case SYMBOL_SMALL_TLSDESC:\n         case SYMBOL_SMALL_GOTTPREL:\n-\tcase SYMBOL_SMALL_GOT:\n+\tcase SYMBOL_SMALL_GOT_4G:\n \tcase SYMBOL_TINY_GOT:\n \t  if (offset != const0_rtx)\n \t    {\n@@ -4359,7 +4359,7 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n \n       switch (aarch64_classify_symbolic_expression (x, SYMBOL_CONTEXT_ADR))\n \t{\n-\tcase SYMBOL_SMALL_GOT:\n+\tcase SYMBOL_SMALL_GOT_4G:\n \t  asm_fprintf (asm_out_file, \":got:\");\n \t  break;\n \n@@ -4392,7 +4392,7 @@ aarch64_print_operand (FILE *f, rtx x, char code)\n     case 'L':\n       switch (aarch64_classify_symbolic_expression (x, SYMBOL_CONTEXT_ADR))\n \t{\n-\tcase SYMBOL_SMALL_GOT:\n+\tcase SYMBOL_SMALL_GOT_4G:\n \t  asm_fprintf (asm_out_file, \":lo12:\");\n \t  break;\n \n@@ -7403,7 +7403,7 @@ aarch64_classify_symbol (rtx x, rtx offset,\n \n \tcase AARCH64_CMODEL_SMALL_PIC:\n \t  if (!aarch64_symbol_binds_local_p (x))\n-\t    return SYMBOL_SMALL_GOT;\n+\t    return SYMBOL_SMALL_GOT_4G;\n \t  return SYMBOL_SMALL_ABSOLUTE;\n \n \tdefault:"}]}