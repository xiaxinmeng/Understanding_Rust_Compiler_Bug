{"sha": "5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRiMGViOTVjMzQxZDAzZDI3YjY4OTNiMjIyMzBlYzhkNGNiOTJlMA==", "commit": {"author": {"name": "Srinath Parvathaneni", "email": "srinath.parvathaneni@arm.com", "date": "2020-03-17T12:03:30Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2020-03-17T12:03:30Z"}, "message": "[ARM][GCC][2/1x]: MVE intrinsics with unary operand.\n\nThis patch supports following MVE ACLE intrinsics with unary operand.\n\nvmvnq_n_s16, vmvnq_n_s32, vrev64q_s8, vrev64q_s16, vrev64q_s32, vcvtq_s16_f16, vcvtq_s32_f32, vrev64q_u8, vrev64q_u16, vrev64q_u32, vmvnq_n_u16, vmvnq_n_u32, vcvtq_u16_f16, vcvtq_u32_f32, vrev64q.\n\nPlease refer to M-profile Vector Extension (MVE) intrinsics [1]  for more details.\n[1] https://developer.arm.com/architectures/instruction-sets/simd-isas/helium/mve-intrinsics\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* config/arm/arm-builtins.c (UNOP_SNONE_SNONE_QUALIFIERS): Define.\n\t(UNOP_SNONE_NONE_QUALIFIERS): Likewise.\n\t(UNOP_SNONE_IMM_QUALIFIERS): Likewise.\n\t(UNOP_UNONE_NONE_QUALIFIERS): Likewise.\n\t(UNOP_UNONE_UNONE_QUALIFIERS): Likewise.\n\t(UNOP_UNONE_IMM_QUALIFIERS): Likewise.\n\t* config/arm/arm_mve.h (vmvnq_n_s16): Define macro.\n\t(vmvnq_n_s32): Likewise.\n\t(vrev64q_s8): Likewise.\n\t(vrev64q_s16): Likewise.\n\t(vrev64q_s32): Likewise.\n\t(vcvtq_s16_f16): Likewise.\n\t(vcvtq_s32_f32): Likewise.\n\t(vrev64q_u8): Likewise.\n\t(vrev64q_u16): Likewise.\n\t(vrev64q_u32): Likewise.\n\t(vmvnq_n_u16): Likewise.\n\t(vmvnq_n_u32): Likewise.\n\t(vcvtq_u16_f16): Likewise.\n\t(vcvtq_u32_f32): Likewise.\n\t(__arm_vmvnq_n_s16): Define intrinsic.\n\t(__arm_vmvnq_n_s32): Likewise.\n\t(__arm_vrev64q_s8): Likewise.\n\t(__arm_vrev64q_s16): Likewise.\n\t(__arm_vrev64q_s32): Likewise.\n\t(__arm_vrev64q_u8): Likewise.\n\t(__arm_vrev64q_u16): Likewise.\n\t(__arm_vrev64q_u32): Likewise.\n\t(__arm_vmvnq_n_u16): Likewise.\n\t(__arm_vmvnq_n_u32): Likewise.\n\t(__arm_vcvtq_s16_f16): Likewise.\n\t(__arm_vcvtq_s32_f32): Likewise.\n\t(__arm_vcvtq_u16_f16): Likewise.\n\t(__arm_vcvtq_u32_f32): Likewise.\n\t(vrev64q): Define polymorphic variant.\n\t* config/arm/arm_mve_builtins.def (UNOP_SNONE_SNONE): Use it.\n\t(UNOP_SNONE_NONE): Likewise.\n\t(UNOP_SNONE_IMM): Likewise.\n\t(UNOP_UNONE_UNONE): Likewise.\n\t(UNOP_UNONE_NONE): Likewise.\n\t(UNOP_UNONE_IMM): Likewise.\n\t* config/arm/mve.md (mve_vrev64q_<supf><mode>): Define RTL pattern.\n\t(mve_vcvtq_from_f_<supf><mode>): Likewise.\n\t(mve_vmvnq_n_<supf><mode>): Likewise.\n\n2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n            Mihail Ionescu  <mihail.ionescu@arm.com>\n            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n\n\t* gcc.target/arm/mve/intrinsics/vcvtq_s16_f16.c: New test.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_s32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_u16_f16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vcvtq_u32_f32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_n_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_n_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_n_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vmvnq_n_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_s16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_s32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_s8.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_u16.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_u32.c: Likewise.\n\t* gcc.target/arm/mve/intrinsics/vrev64q_u8.c: Likewise.", "tree": {"sha": "88d111fca11151e0a5eed8310decc364c9ff3bbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/88d111fca11151e0a5eed8310decc364c9ff3bbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/comments", "author": {"login": "sripar01", "id": 115715849, "node_id": "U_kgDOBuWvCQ", "avatar_url": "https://avatars.githubusercontent.com/u/115715849?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sripar01", "html_url": "https://github.com/sripar01", "followers_url": "https://api.github.com/users/sripar01/followers", "following_url": "https://api.github.com/users/sripar01/following{/other_user}", "gists_url": "https://api.github.com/users/sripar01/gists{/gist_id}", "starred_url": "https://api.github.com/users/sripar01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sripar01/subscriptions", "organizations_url": "https://api.github.com/users/sripar01/orgs", "repos_url": "https://api.github.com/users/sripar01/repos", "events_url": "https://api.github.com/users/sripar01/events{/privacy}", "received_events_url": "https://api.github.com/users/sripar01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a50f6abffc3353fa4f246cb18d6d04978d60abad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a50f6abffc3353fa4f246cb18d6d04978d60abad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a50f6abffc3353fa4f246cb18d6d04978d60abad"}], "stats": {"total": 531, "additions": 529, "deletions": 2}, "files": [{"sha": "ec3d190bf1137d06ba4eb3e5d3ea402ff765410a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -1,3 +1,52 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* config/arm/arm-builtins.c (UNOP_SNONE_SNONE_QUALIFIERS): Define.\n+\t(UNOP_SNONE_NONE_QUALIFIERS): Likewise.\n+\t(UNOP_SNONE_IMM_QUALIFIERS): Likewise.\n+\t(UNOP_UNONE_NONE_QUALIFIERS): Likewise.\n+\t(UNOP_UNONE_UNONE_QUALIFIERS): Likewise.\n+\t(UNOP_UNONE_IMM_QUALIFIERS): Likewise.\n+\t* config/arm/arm_mve.h (vmvnq_n_s16): Define macro.\n+\t(vmvnq_n_s32): Likewise.\n+\t(vrev64q_s8): Likewise.\n+\t(vrev64q_s16): Likewise.\n+\t(vrev64q_s32): Likewise.\n+\t(vcvtq_s16_f16): Likewise.\n+\t(vcvtq_s32_f32): Likewise.\n+\t(vrev64q_u8): Likewise.\n+\t(vrev64q_u16): Likewise.\n+\t(vrev64q_u32): Likewise.\n+\t(vmvnq_n_u16): Likewise.\n+\t(vmvnq_n_u32): Likewise.\n+\t(vcvtq_u16_f16): Likewise.\n+\t(vcvtq_u32_f32): Likewise.\n+\t(__arm_vmvnq_n_s16): Define intrinsic.\n+\t(__arm_vmvnq_n_s32): Likewise.\n+\t(__arm_vrev64q_s8): Likewise.\n+\t(__arm_vrev64q_s16): Likewise.\n+\t(__arm_vrev64q_s32): Likewise.\n+\t(__arm_vrev64q_u8): Likewise.\n+\t(__arm_vrev64q_u16): Likewise.\n+\t(__arm_vrev64q_u32): Likewise.\n+\t(__arm_vmvnq_n_u16): Likewise.\n+\t(__arm_vmvnq_n_u32): Likewise.\n+\t(__arm_vcvtq_s16_f16): Likewise.\n+\t(__arm_vcvtq_s32_f32): Likewise.\n+\t(__arm_vcvtq_u16_f16): Likewise.\n+\t(__arm_vcvtq_u32_f32): Likewise.\n+\t(vrev64q): Define polymorphic variant.\n+\t* config/arm/arm_mve_builtins.def (UNOP_SNONE_SNONE): Use it.\n+\t(UNOP_SNONE_NONE): Likewise.\n+\t(UNOP_SNONE_IMM): Likewise.\n+\t(UNOP_UNONE_UNONE): Likewise.\n+\t(UNOP_UNONE_NONE): Likewise.\n+\t(UNOP_UNONE_IMM): Likewise.\n+\t* config/arm/mve.md (mve_vrev64q_<supf><mode>): Define RTL pattern.\n+\t(mve_vcvtq_from_f_<supf><mode>): Likewise.\n+\t(mve_vmvnq_n_<supf><mode>): Likewise.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "b8656b82651db901b356886b700acd606fad3592", "filename": "gcc/config/arm/arm-builtins.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Fconfig%2Farm%2Farm-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Fconfig%2Farm%2Farm-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-builtins.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -337,6 +337,42 @@ arm_unop_none_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n #define UNOP_NONE_UNONE_QUALIFIERS \\\n   (arm_unop_none_unone_qualifiers)\n \n+static enum arm_type_qualifiers\n+arm_unop_snone_snone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none };\n+#define UNOP_SNONE_SNONE_QUALIFIERS \\\n+  (arm_unop_snone_snone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_unop_snone_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_none };\n+#define UNOP_SNONE_NONE_QUALIFIERS \\\n+  (arm_unop_snone_none_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_unop_snone_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_none, qualifier_immediate };\n+#define UNOP_SNONE_IMM_QUALIFIERS \\\n+  (arm_unop_snone_imm_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_unop_unone_none_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_none };\n+#define UNOP_UNONE_NONE_QUALIFIERS \\\n+  (arm_unop_unone_none_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_unop_unone_unone_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_unsigned };\n+#define UNOP_UNONE_UNONE_QUALIFIERS \\\n+  (arm_unop_unone_unone_qualifiers)\n+\n+static enum arm_type_qualifiers\n+arm_unop_unone_imm_qualifiers[SIMD_MAX_BUILTIN_ARGS]\n+  = { qualifier_unsigned, qualifier_immediate };\n+#define UNOP_UNONE_IMM_QUALIFIERS \\\n+  (arm_unop_unone_imm_qualifiers)\n+\n /* End of Qualifier for MVE builtins.  */\n \n    /* void ([T element type] *, T, immediate).  */"}, {"sha": "14dd417201130035c8d8b06cadc1f300af64acc4", "filename": "gcc/config/arm/arm_mve.h", "status": "modified", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Fconfig%2Farm%2Farm_mve.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Fconfig%2Farm%2Farm_mve.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve.h?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -108,6 +108,20 @@ typedef struct { uint8x16_t val[4]; } uint8x16x4_t;\n #define vcvtq_f32_s32(__a) __arm_vcvtq_f32_s32(__a)\n #define vcvtq_f16_u16(__a) __arm_vcvtq_f16_u16(__a)\n #define vcvtq_f32_u32(__a) __arm_vcvtq_f32_u32(__a)\n+#define vmvnq_n_s16( __imm) __arm_vmvnq_n_s16( __imm)\n+#define vmvnq_n_s32( __imm) __arm_vmvnq_n_s32( __imm)\n+#define vrev64q_s8(__a) __arm_vrev64q_s8(__a)\n+#define vrev64q_s16(__a) __arm_vrev64q_s16(__a)\n+#define vrev64q_s32(__a) __arm_vrev64q_s32(__a)\n+#define vcvtq_s16_f16(__a) __arm_vcvtq_s16_f16(__a)\n+#define vcvtq_s32_f32(__a) __arm_vcvtq_s32_f32(__a)\n+#define vrev64q_u8(__a) __arm_vrev64q_u8(__a)\n+#define vrev64q_u16(__a) __arm_vrev64q_u16(__a)\n+#define vrev64q_u32(__a) __arm_vrev64q_u32(__a)\n+#define vmvnq_n_u16( __imm) __arm_vmvnq_n_u16( __imm)\n+#define vmvnq_n_u32( __imm) __arm_vmvnq_n_u32( __imm)\n+#define vcvtq_u16_f16(__a) __arm_vcvtq_u16_f16(__a)\n+#define vcvtq_u32_f32(__a) __arm_vcvtq_u32_f32(__a)\n #endif\n \n __extension__ extern __inline void\n@@ -164,6 +178,76 @@ __arm_vst4q_u32 (uint32_t * __addr, uint32x4x4_t __value)\n   __builtin_mve_vst4qv4si ((__builtin_neon_si *) __addr, __rv.__o);\n }\n \n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmvnq_n_s16 (const int16_t __imm)\n+{\n+  return __builtin_mve_vmvnq_n_sv8hi (__imm);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmvnq_n_s32 (const int32_t __imm)\n+{\n+  return __builtin_mve_vmvnq_n_sv4si (__imm);\n+}\n+\n+__extension__ extern __inline int8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev64q_s8 (int8x16_t __a)\n+{\n+  return __builtin_mve_vrev64q_sv16qi (__a);\n+}\n+\n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev64q_s16 (int16x8_t __a)\n+{\n+  return __builtin_mve_vrev64q_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev64q_s32 (int32x4_t __a)\n+{\n+  return __builtin_mve_vrev64q_sv4si (__a);\n+}\n+\n+__extension__ extern __inline uint8x16_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev64q_u8 (uint8x16_t __a)\n+{\n+  return __builtin_mve_vrev64q_uv16qi (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev64q_u16 (uint16x8_t __a)\n+{\n+  return __builtin_mve_vrev64q_uv8hi (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vrev64q_u32 (uint32x4_t __a)\n+{\n+  return __builtin_mve_vrev64q_uv4si (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmvnq_n_u16 (const int __imm)\n+{\n+  return __builtin_mve_vmvnq_n_uv8hi (__imm);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vmvnq_n_u32 (const int __imm)\n+{\n+  return __builtin_mve_vmvnq_n_uv4si (__imm);\n+}\n+\n #if (__ARM_FEATURE_MVE & 2) /* MVE Floating point.  */\n \n __extension__ extern __inline void\n@@ -373,6 +457,34 @@ __arm_vcvtq_f32_u32 (uint32x4_t __a)\n   return __builtin_mve_vcvtq_to_f_uv4sf (__a);\n }\n \n+__extension__ extern __inline int16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_s16_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vcvtq_from_f_sv8hi (__a);\n+}\n+\n+__extension__ extern __inline int32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_s32_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vcvtq_from_f_sv4si (__a);\n+}\n+\n+__extension__ extern __inline uint16x8_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_u16_f16 (float16x8_t __a)\n+{\n+  return __builtin_mve_vcvtq_from_f_uv8hi (__a);\n+}\n+\n+__extension__ extern __inline uint32x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__arm_vcvtq_u32_f32 (float32x4_t __a)\n+{\n+  return __builtin_mve_vcvtq_from_f_uv4si (__a);\n+}\n+\n #endif\n \n enum {\n@@ -674,6 +786,16 @@ extern void *__ARM_undef;\n   int (*)[__ARM_mve_type_uint16_t_ptr][__ARM_mve_type_uint16x8x4_t]: __arm_vst4q_u16 (__ARM_mve_coerce(__p0, uint16_t *), __ARM_mve_coerce(__p1, uint16x8x4_t)), \\\n   int (*)[__ARM_mve_type_uint32_t_ptr][__ARM_mve_type_uint32x4x4_t]: __arm_vst4q_u32 (__ARM_mve_coerce(__p0, uint32_t *), __ARM_mve_coerce(__p1, uint32x4x4_t)));})\n \n+#define vrev64q(p0) __arm_vrev64q(p0)\n+#define __arm_vrev64q(p0) ({ __typeof(p0) __p0 = (p0); \\\n+  _Generic( (int (*)[__ARM_mve_typeid(__p0)])0, \\\n+  int (*)[__ARM_mve_type_int8x16_t]: __arm_vrev64q_s8 (__ARM_mve_coerce(__p0, int8x16_t)), \\\n+  int (*)[__ARM_mve_type_int16x8_t]: __arm_vrev64q_s16 (__ARM_mve_coerce(__p0, int16x8_t)), \\\n+  int (*)[__ARM_mve_type_int32x4_t]: __arm_vrev64q_s32 (__ARM_mve_coerce(__p0, int32x4_t)), \\\n+  int (*)[__ARM_mve_type_uint8x16_t]: __arm_vrev64q_u8 (__ARM_mve_coerce(__p0, uint8x16_t)), \\\n+  int (*)[__ARM_mve_type_uint16x8_t]: __arm_vrev64q_u16 (__ARM_mve_coerce(__p0, uint16x8_t)), \\\n+  int (*)[__ARM_mve_type_uint32x4_t]: __arm_vrev64q_u32 (__ARM_mve_coerce(__p0, uint32x4_t)));})\n+\n #endif /* MVE Floating point.  */\n \n #ifdef __cplusplus"}, {"sha": "d325f36aff41699abbf60081388cc845e13cd430", "filename": "gcc/config/arm/arm_mve_builtins.def", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_mve_builtins.def?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -34,3 +34,9 @@ VAR1 (UNOP_NONE_NONE, vcvttq_f32_f16, v4sf)\n VAR1 (UNOP_NONE_NONE, vcvtbq_f32_f16, v4sf)\n VAR2 (UNOP_NONE_SNONE, vcvtq_to_f_s, v8hf, v4sf)\n VAR2 (UNOP_NONE_UNONE, vcvtq_to_f_u, v8hf, v4sf)\n+VAR3 (UNOP_SNONE_SNONE, vrev64q_s, v16qi, v8hi, v4si)\n+VAR2 (UNOP_SNONE_NONE, vcvtq_from_f_s, v8hi, v4si)\n+VAR2 (UNOP_SNONE_IMM, vmvnq_n_s, v8hi, v4si)\n+VAR3 (UNOP_UNONE_UNONE, vrev64q_u, v16qi, v8hi, v4si)\n+VAR2 (UNOP_UNONE_NONE, vcvtq_from_f_u, v8hi, v4si)\n+VAR2 (UNOP_UNONE_IMM, vmvnq_n_u, v8hi, v4si)"}, {"sha": "a58cfb287950a8df66742087b473f81d38b60853", "filename": "gcc/config/arm/mve.md", "status": "modified", "additions": 53, "deletions": 2, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Fconfig%2Farm%2Fmve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Fconfig%2Farm%2Fmve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fmve.md?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -22,17 +22,26 @@\n (define_mode_iterator MVE_types [V16QI V8HI V4SI V2DI TI V8HF V4SF V2DF])\n (define_mode_iterator MVE_VLD_ST [V16QI V8HI V4SI V8HF V4SF])\n (define_mode_iterator MVE_0 [V8HF V4SF])\n+(define_mode_iterator MVE_2 [V16QI V8HI V4SI])\n+(define_mode_iterator MVE_5 [V8HI V4SI])\n \n (define_c_enum \"unspec\" [VST4Q VRNDXQ_F VRNDQ_F VRNDPQ_F VRNDNQ_F VRNDMQ_F\n \t\t\t VRNDAQ_F VREV64Q_F VNEGQ_F VDUPQ_N_F VABSQ_F VREV32Q_F\n \t\t\t VCVTTQ_F32_F16 VCVTBQ_F32_F16 VCVTQ_TO_F_S\n-\t\t\t VCVTQ_TO_F_U])\n+\t\t\t VCVTQ_TO_F_U VMVNQ_N_S VMVNQ_N_U VREV64Q_S VREV64Q_U\n+\t\t\t VCVTQ_FROM_F_S VCVTQ_FROM_F_U])\n \n (define_mode_attr MVE_CNVT [(V8HI \"V8HF\") (V4SI \"V4SF\")\n \t\t\t    (V8HF \"V8HI\") (V4SF \"V4SI\")])\n \n-(define_int_attr supf [(VCVTQ_TO_F_S \"s\") (VCVTQ_TO_F_U \"u\")])\n+(define_int_attr supf [(VCVTQ_TO_F_S \"s\") (VCVTQ_TO_F_U \"u\") (VMVNQ_N_S \"s\")\n+\t\t       (VMVNQ_N_U \"u\") (VREV64Q_U \"u\") (VREV64Q_S \"s\")\n+\t\t       (VCVTQ_FROM_F_S \"s\") (VCVTQ_FROM_F_U \"u\")])\n+\n (define_int_iterator VCVTQ_TO_F [VCVTQ_TO_F_S VCVTQ_TO_F_U])\n+(define_int_iterator VMVNQ_N [VMVNQ_N_U VMVNQ_N_S])\n+(define_int_iterator VREV64Q [VREV64Q_S VREV64Q_U])\n+(define_int_iterator VCVTQ_FROM_F [VCVTQ_FROM_F_S VCVTQ_FROM_F_U])\n \n (define_insn \"*mve_mov<mode>\"\n   [(set (match_operand:MVE_types 0 \"nonimmediate_operand\" \"=w,w,r,w,w,r,w,Us\")\n@@ -325,3 +334,45 @@\n   \"vcvt.f%#<V_sz_elem>.<supf>%#<V_sz_elem>       %q0, %q1\"\n   [(set_attr \"type\" \"mve_move\")\n ])\n+\n+;;\n+;; [vrev64q_u, vrev64q_s])\n+;;\n+(define_insn \"mve_vrev64q_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_2 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_2 [(match_operand:MVE_2 1 \"s_register_operand\" \"w\")]\n+\t VREV64Q))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vrev64.%#<V_sz_elem> %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vcvtq_from_f_s, vcvtq_from_f_u])\n+;;\n+(define_insn \"mve_vcvtq_from_f_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:<MVE_CNVT> 1 \"s_register_operand\" \"w\")]\n+\t VCVTQ_FROM_F))\n+  ]\n+  \"TARGET_HAVE_MVE && TARGET_HAVE_MVE_FLOAT\"\n+  \"vcvt.<supf>%#<V_sz_elem>.f%#<V_sz_elem>       %q0, %q1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])\n+\n+;;\n+;; [vmvnq_n_u, vmvnq_n_s])\n+;;\n+(define_insn \"mve_vmvnq_n_<supf><mode>\"\n+  [\n+   (set (match_operand:MVE_5 0 \"s_register_operand\" \"=w\")\n+\t(unspec:MVE_5 [(match_operand:HI 1 \"immediate_operand\" \"i\")]\n+\t VMVNQ_N))\n+  ]\n+  \"TARGET_HAVE_MVE\"\n+  \"vmvn.i%#<V_sz_elem>  %q0, %1\"\n+  [(set_attr \"type\" \"mve_move\")\n+])"}, {"sha": "d0d93e7744eeab7b56b1fc2b0b4810ca55e8a4ad", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -1,3 +1,22 @@\n+2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+            Mihail Ionescu  <mihail.ionescu@arm.com>\n+            Srinath Parvathaneni  <srinath.parvathaneni@arm.com>\n+\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_s16_f16.c: New test.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_s32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_u16_f16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vcvtq_u32_f32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_n_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_n_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_n_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vmvnq_n_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_s16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_s32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_s8.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_u16.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_u32.c: Likewise.\n+\t* gcc.target/arm/mve/intrinsics/vrev64q_u8.c: Likewise.\n+\n 2020-03-17  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n             Mihail Ionescu  <mihail.ionescu@arm.com>\n             Srinath Parvathaneni  <srinath.parvathaneni@arm.com>"}, {"sha": "c5cdd9d71f1d9f54dbe642edc6bfcc348a53c780", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_s16_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_s16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_s16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_s16_f16.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (float16x8_t a)\n+{\n+  return vcvtq_s16_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.s16.f16\"  }  } */"}, {"sha": "a0f8db261e4863e84811cea744fe2f99900e5901", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_s32_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_s32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_s32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_s32_f32.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (float32x4_t a)\n+{\n+  return vcvtq_s32_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.s32.f32\"  }  } */"}, {"sha": "ab934aba3377b56123b72008767f1cfd5c6d5c0d", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_u16_f16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_u16_f16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_u16_f16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_u16_f16.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (float16x8_t a)\n+{\n+    return vcvtq_u16_f16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.u16.f16\"  }  } */"}, {"sha": "e802cac6c5df80849c4c18687a888d59023c2b83", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vcvtq_u32_f32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_u32_f32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_u32_f32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvcvtq_u32_f32.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_fp_ok } */\n+/* { dg-add-options arm_v8_1m_mve_fp } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (float32x4_t a)\n+{\n+    return vcvtq_u32_f32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vcvt.u32.f32\"  }  } */"}, {"sha": "61a89bb10b68ac67526583c55404c61e989bd267", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_n_s16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_n_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_n_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_n_s16.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo ()\n+{\n+  return vmvnq_n_s16 (1);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn.i16\"  }  } */"}, {"sha": "3700722494b94be2bfc70987996a76b6f39a0ad9", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_n_s32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_n_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_n_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_n_s32.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo ()\n+{\n+  return vmvnq_n_s32 (2);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn.i32\"  }  } */"}, {"sha": "b7e8734607be8a1dc2c817d34d25c18b25659200", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_n_u16.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_n_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_n_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_n_u16.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo ()\n+{\n+    return vmvnq_n_u16 (1);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn.i16\"  }  } */"}, {"sha": "235d672fdf1a500228d94f222eedde14a34d55e6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vmvnq_n_u32.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_n_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_n_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvmvnq_n_u32.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,14 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo ()\n+{\n+    return vmvnq_n_u32 (2);\n+}\n+\n+/* { dg-final { scan-assembler \"vmvn.i32\"  }  } */"}, {"sha": "35245ad36932cc83cb080695c444c34a3ecf84c7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_s16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s16.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int16x8_t\n+foo (int16x8_t a)\n+{\n+  return vrev64q_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.16\"  }  } */\n+\n+int16x8_t\n+foo1 (int16x8_t a)\n+{\n+  return vrev64q_s16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.16\"  }  } */"}, {"sha": "2344423cc502432e93e9e156d02c275a21f9ec79", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_s32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s32.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int32x4_t\n+foo (int32x4_t a)\n+{\n+  return vrev64q_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.32\"  }  } */\n+\n+int32x4_t\n+foo1 (int32x4_t a)\n+{\n+  return vrev64q_s32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.32\"  }  } */"}, {"sha": "61a97252eb1132969906c3c4ae04c275d4234b9c", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_s8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_s8.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+int8x16_t\n+foo (int8x16_t a)\n+{\n+  return vrev64q_s8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.8\"  }  } */\n+\n+int8x16_t\n+foo1 (int8x16_t a)\n+{\n+  return vrev64q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.8\"  }  } */"}, {"sha": "e42bd31de4a8e99312277afee4ced3679019b5d6", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_u16.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_u16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_u16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_u16.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint16x8_t\n+foo (uint16x8_t a)\n+{\n+    return vrev64q_u16 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.16\"  }  } */\n+\n+uint16x8_t\n+foo1 (uint16x8_t a)\n+{\n+    return vrev64q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.16\"  }  } */"}, {"sha": "af25b84faea19a0b888e64ac0702334ab5910ebd", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_u32.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_u32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_u32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_u32.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint32x4_t\n+foo (uint32x4_t a)\n+{\n+    return vrev64q_u32 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.32\"  }  } */\n+\n+uint32x4_t\n+foo1 (uint32x4_t a)\n+{\n+    return vrev64q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.32\"  }  } */"}, {"sha": "d9a194afb475af6ce8ef8e9b3e3eb03edcf791d7", "filename": "gcc/testsuite/gcc.target/arm/mve/intrinsics/vrev64q_u8.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_u8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5db0eb95c341d03d27b6893b22230ec8d4cb92e0/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_u8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fmve%2Fintrinsics%2Fvrev64q_u8.c?ref=5db0eb95c341d03d27b6893b22230ec8d4cb92e0", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile  } */\n+/* { dg-require-effective-target arm_v8_1m_mve_ok } */\n+/* { dg-add-options arm_v8_1m_mve } */\n+/* { dg-additional-options \"-O2\" } */\n+\n+#include \"arm_mve.h\"\n+\n+uint8x16_t\n+foo (uint8x16_t a)\n+{\n+    return vrev64q_u8 (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.8\"  }  } */\n+\n+uint8x16_t\n+foo1 (uint8x16_t a)\n+{\n+    return vrev64q (a);\n+}\n+\n+/* { dg-final { scan-assembler \"vrev64.8\"  }  } */"}]}