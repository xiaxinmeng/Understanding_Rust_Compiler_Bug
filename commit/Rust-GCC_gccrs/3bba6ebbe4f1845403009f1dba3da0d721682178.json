{"sha": "3bba6ebbe4f1845403009f1dba3da0d721682178", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2JiYTZlYmJlNGYxODQ1NDAzMDA5ZjFkYmEzZGEwZDcyMTY4MjE3OA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-07-31T21:24:18Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-07-31T21:24:18Z"}, "message": "re PR libstdc++/7442 (cxxabi.h does not match the C++ ABI)\n\n\n2002-07-31  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/7442\n\t* libsupc++/cxxabi.h\n\t(__base_class_info): Change to __base_class_type_info. 2.9.5p6c\n\t(__base_class_info::__base): Change to __base_type. 2.9.5p6c\n\t(__base_class_info::offset_shift): Change to __offset_shift. 2.9.5p6c\n\t(__vmi_class_type_info::__base_info): Don't make const, of type\n\t__base_class_type_info, as per 2.9.5p6c\n\t(__pbase_type_info::__qualifier_flags): Change to __flags, as per\n\t2.9.5p7.\n\t(__pbase_type_info::__qualifier_masks): Change to __masks, as per\n\t2.9.5p7.\n\t(__pointer_to_member_type_info::__context_class): Change member to\n\t__context, as per 2.9.5p9.\n\t* libsupc++/tinfo2.cc (__pointer_catch): Change __context_class to\n\t__context.\n\t* libsupc++/tinfo2.cc (__do_catch): Change __qualifier_flags to\n\t__flags.\n\t* libsupc++/tinfo.cc (__do_find_public_src): Change __base to\n\t__base_type.\n\t* libsupc++/tinfo.cc (__do_dyncast): Same.\n\t* libsupc++/tinfo.cc (__do_upcast): Same.\n\nFrom-SVN: r55910", "tree": {"sha": "8717a4d23aac956f1e288f1610567e1645b64469", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8717a4d23aac956f1e288f1610567e1645b64469"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3bba6ebbe4f1845403009f1dba3da0d721682178", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bba6ebbe4f1845403009f1dba3da0d721682178", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3bba6ebbe4f1845403009f1dba3da0d721682178", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3bba6ebbe4f1845403009f1dba3da0d721682178/comments", "author": null, "committer": null, "parents": [{"sha": "5a53872d083c32d0d428a39f5961cd1f1cc33f83", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a53872d083c32d0d428a39f5961cd1f1cc33f83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a53872d083c32d0d428a39f5961cd1f1cc33f83"}], "stats": {"total": 68, "additions": 46, "deletions": 22}, "files": [{"sha": "f23c8801df87c4f755eb9478871fa29ef5fe2692", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bba6ebbe4f1845403009f1dba3da0d721682178/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bba6ebbe4f1845403009f1dba3da0d721682178/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=3bba6ebbe4f1845403009f1dba3da0d721682178", "patch": "@@ -1,3 +1,27 @@\n+2002-07-31  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/7442\n+\t* libsupc++/cxxabi.h \n+\t(__base_class_info): Change to __base_class_type_info. 2.9.5p6c\n+\t(__base_class_info::__base): Change to __base_type. 2.9.5p6c\n+\t(__base_class_info::offset_shift): Change to __offset_shift. 2.9.5p6c\n+\t(__vmi_class_type_info::__base_info): Don't make const, of type\n+\t__base_class_type_info, as per 2.9.5p6c\n+\t(__pbase_type_info::__qualifier_flags): Change to __flags, as per\n+\t2.9.5p7.\n+\t(__pbase_type_info::__qualifier_masks): Change to __masks, as per\n+\t2.9.5p7.\n+\t(__pointer_to_member_type_info::__context_class): Change member to\n+\t__context, as per 2.9.5p9.\n+\t* libsupc++/tinfo2.cc (__pointer_catch): Change __context_class to\n+\t__context.\n+\t* libsupc++/tinfo2.cc (__do_catch): Change __qualifier_flags to\n+\t__flags.\n+\t* libsupc++/tinfo.cc (__do_find_public_src): Change __base to\n+\t__base_type.\n+\t* libsupc++/tinfo.cc (__do_dyncast): Same.\n+\t* libsupc++/tinfo.cc (__do_upcast): Same.\n+\n 2002-07-31  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* src/fstream.cc: Add _GLIBCPP_USE_WCHAR_T guards."}, {"sha": "2210dbd339308fd583ffc55eac7a423108583514", "filename": "libstdc++-v3/libsupc++/cxxabi.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bba6ebbe4f1845403009f1dba3da0d721682178/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bba6ebbe4f1845403009f1dba3da0d721682178/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Fcxxabi.h?ref=3bba6ebbe4f1845403009f1dba3da0d721682178", "patch": "@@ -1,6 +1,6 @@\n // new abi support -*- C++ -*-\n   \n-// Copyright (C) 2000 Free Software Foundation, Inc.\n+// Copyright (C) 2000, 2002 Free Software Foundation, Inc.\n //\n // This file is part of GNU CC.\n //\n@@ -117,7 +117,7 @@ class __pbase_type_info\n {\n /* abi defined member variables */\n public:\n-  unsigned int __qualifier_flags; /* qualification of the target object */\n+  unsigned int __flags; /* qualification of the target object */\n   const std::type_info *__pointee;   /* type of pointed to object */\n \n /* abi defined member functions */\n@@ -127,12 +127,12 @@ class __pbase_type_info\n   explicit __pbase_type_info (const char *__n,\n                                 int __quals,\n                                 const std::type_info *__type)\n-    : std::type_info (__n), __qualifier_flags (__quals), __pointee (__type)\n+    : std::type_info (__n), __flags (__quals), __pointee (__type)\n     { }\n \n /* implementation defined types */\n public:\n-  enum __qualifier_masks {\n+  enum __masks {\n     __const_mask = 0x1,\n     __volatile_mask = 0x2,\n     __restrict_mask = 0x4,\n@@ -181,7 +181,7 @@ class __pointer_to_member_type_info\n {\n /* abi defined member variables */\n public:\n-  __class_type_info *__context_class;   /* class of the member */\n+  __class_type_info *__context;   /* class of the member */\n \n /* abi defined member functions */\n public:\n@@ -191,7 +191,7 @@ class __pointer_to_member_type_info\n                                           int __quals,\n                                           const std::type_info *__type,\n                                           __class_type_info *__klass)\n-    : __pbase_type_info (__n, __quals, __type), __context_class (__klass)\n+    : __pbase_type_info (__n, __quals, __type), __context (__klass)\n     { }\n \n /* implementation defined member functions */\n@@ -204,11 +204,11 @@ class __pointer_to_member_type_info\n class __class_type_info;\n \n /* helper class for __vmi_class_type */\n-class __base_class_info\n+class __base_class_type_info\n {\n /* abi defined member variables */\n public:\n-  const __class_type_info *__base;    /* base class type */\n+  const __class_type_info* __base_type;    /* base class type */\n   long __offset_flags;            /* offset and info */\n \n /* implementation defined types */\n@@ -217,7 +217,7 @@ class __base_class_info\n     __virtual_mask = 0x1,\n     __public_mask = 0x2,\n     hwm_bit = 2,\n-    offset_shift = 8          /* bits to shift offset by */\n+    __offset_shift = 8          /* bits to shift offset by */\n   };\n   \n /* implementation defined member functions */\n@@ -230,7 +230,7 @@ class __base_class_info\n     { \n       // This shift, being of a signed type, is implementation defined. GCC\n       // implements such shifts as arithmetic, which is what we want.\n-      return static_cast<__PTRDIFF_TYPE__> (__offset_flags) >> offset_shift;\n+      return static_cast<__PTRDIFF_TYPE__> (__offset_flags) >> __offset_shift;\n     }\n };\n \n@@ -259,9 +259,9 @@ class __class_type_info\n                                 /* publicly) */\n     __contained_ambig,          /* contained ambiguously */\n     \n-    __contained_virtual_mask = __base_class_info::__virtual_mask, /* via a virtual path */\n-    __contained_public_mask = __base_class_info::__public_mask,   /* via a public path */\n-    __contained_mask = 1 << __base_class_info::hwm_bit,         /* contained within us */\n+    __contained_virtual_mask = __base_class_type_info::__virtual_mask, /* via a virtual path */\n+    __contained_public_mask = __base_class_type_info::__public_mask,   /* via a public path */\n+    __contained_mask = 1 << __base_class_type_info::hwm_bit,         /* contained within us */\n     \n     __contained_private = __contained_mask,\n     __contained_public = __contained_mask | __contained_public_mask\n@@ -365,7 +365,7 @@ class __vmi_class_type_info : public __class_type_info {\n public:\n   unsigned int __flags;         /* details about the class hierarchy */\n   unsigned int __base_count;    /* number of direct bases */\n-  __base_class_info const __base_info[1]; /* array of bases */\n+  __base_class_type_info __base_info[1]; /* array of bases */\n   /* The array of bases uses the trailing array struct hack\n      so this class is not constructable with a normal constructor. It is\n      internally generated by the compiler. */"}, {"sha": "adafc25e3775ed5c415900c03f5b09dd88460ef9", "filename": "libstdc++-v3/libsupc++/tinfo.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bba6ebbe4f1845403009f1dba3da0d721682178/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bba6ebbe4f1845403009f1dba3da0d721682178/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo.cc?ref=3bba6ebbe4f1845403009f1dba3da0d721682178", "patch": "@@ -312,7 +312,7 @@ __do_find_public_src (ptrdiff_t src2dst,\n         }\n       base = convert_to_base (base, is_virtual, offset);\n       \n-      __sub_kind base_kind = __base_info[i].__base->__do_find_public_src\n+      __sub_kind base_kind = __base_info[i].__base_type->__do_find_public_src\n                               (src2dst, base, src_type, src_ptr);\n       if (contained_p (base_kind))\n         {\n@@ -449,7 +449,7 @@ __do_dyncast (ptrdiff_t src2dst,\n         }\n       \n       bool result2_ambig\n-          = __base_info[i].__base->__do_dyncast (src2dst, base_access,\n+          = __base_info[i].__base_type->__do_dyncast (src2dst, base_access,\n                                              dst_type, base,\n                                              src_type, src_ptr, result2);\n       result.whole2src = __sub_kind (result.whole2src | result2.whole2src);\n@@ -633,10 +633,10 @@ __do_upcast (const __class_type_info *dst, const void *obj_ptr,\n       if (base)\n         base = convert_to_base (base, is_virtual, offset);\n       \n-      if (__base_info[i].__base->__do_upcast (dst, base, result2))\n+      if (__base_info[i].__base_type->__do_upcast (dst, base, result2))\n         {\n           if (result2.base_type == nonvirtual_base_type && is_virtual)\n-            result2.base_type = __base_info[i].__base;\n+            result2.base_type = __base_info[i].__base_type;\n           if (contained_p (result2.part2dst) && !is_public)\n             result2.part2dst = __sub_kind (result2.part2dst & ~__contained_public_mask);\n           "}, {"sha": "600cdf6ae4400322adee7b18c4f586df3053b83d", "filename": "libstdc++-v3/libsupc++/tinfo2.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3bba6ebbe4f1845403009f1dba3da0d721682178/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3bba6ebbe4f1845403009f1dba3da0d721682178/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2Ftinfo2.cc?ref=3bba6ebbe4f1845403009f1dba3da0d721682178", "patch": "@@ -1,6 +1,6 @@\n // Methods for type_info for -*- C++ -*- Run Time Type Identification.\n \n-// Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000, 2001 \n+// Copyright (C) 1994, 1996, 1997, 1998, 1999, 2000, 2001, 2002\n // Free Software Foundation\n //\n // This file is part of GNU CC.\n@@ -116,11 +116,11 @@ __do_catch (const type_info *thr_type,\n   const __pbase_type_info *thrown_type =\n     static_cast <const __pbase_type_info *> (thr_type);\n   \n-  if (thrown_type->__qualifier_flags & ~__qualifier_flags)\n+  if (thrown_type->__flags & ~__flags)\n     // We're less qualified.\n     return false;\n   \n-  if (!(__qualifier_flags & __const_mask))\n+  if (!(__flags & __const_mask))\n     outer &= ~1;\n   \n   return __pointer_catch (thrown_type, thr_obj, outer);\n@@ -158,7 +158,7 @@ __pointer_catch (const __pbase_type_info *thr_type,\n   const __pointer_to_member_type_info *thrown_type =\n     static_cast <const __pointer_to_member_type_info *> (thr_type);\n   \n-  if (*__context_class != *thrown_type->__context_class)\n+  if (*__context != *thrown_type->__context)\n     return false;     // not pointers to member of same class\n   \n   return __pbase_type_info::__pointer_catch (thrown_type, thr_obj, outer);"}]}