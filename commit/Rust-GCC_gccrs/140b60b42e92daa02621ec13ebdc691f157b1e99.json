{"sha": "140b60b42e92daa02621ec13ebdc691f157b1e99", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQwYjYwYjQyZTkyZGFhMDI2MjFlYzEzZWJkYzY5MWYxNTdiMWU5OQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-11-08T15:27:56Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-11-08T15:27:56Z"}, "message": "tree.h (get_containing_scope): Declare it.\n\n\t* tree.h (get_containing_scope): Declare it.\n\t* tree.c (get_containing_scope): New fucntion.\n\t(decl_function_context): Use it.\n\t* toplev.c (rest_of_compilation): Use get_containing_scope.\n\nFrom-SVN: r30449", "tree": {"sha": "aea8894e0a6c088bacdf1a5b13e154d7b0d15e06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/aea8894e0a6c088bacdf1a5b13e154d7b0d15e06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/140b60b42e92daa02621ec13ebdc691f157b1e99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/140b60b42e92daa02621ec13ebdc691f157b1e99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/140b60b42e92daa02621ec13ebdc691f157b1e99", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/140b60b42e92daa02621ec13ebdc691f157b1e99/comments", "author": null, "committer": null, "parents": [{"sha": "8f4f2f295ad85cf42ac03c94549b5341e4d331c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f4f2f295ad85cf42ac03c94549b5341e4d331c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f4f2f295ad85cf42ac03c94549b5341e4d331c8"}], "stats": {"total": 38, "additions": 28, "deletions": 10}, "files": [{"sha": "4b8ccbfbbaec4b23dfa8bf8192a1db105b3c84a8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140b60b42e92daa02621ec13ebdc691f157b1e99/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140b60b42e92daa02621ec13ebdc691f157b1e99/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=140b60b42e92daa02621ec13ebdc691f157b1e99", "patch": "@@ -1,4 +1,11 @@\n-Mon Nov  8 03:03:07 1999  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n+Mon Nov  8 07:25:37 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* tree.h (get_containing_scope): Declare it.\n+\t* tree.c (get_containing_scope): New fucntion.\n+\t(decl_function_context): Use it.\n+\t* toplev.c (rest_of_compilation): Use get_containing_scope.\n+\n+aMon Nov  8 03:03:07 1999  Alexandre Oliva  <oliva@lsd.ic.unicamp.br>\n \n \t* Makefile.in (rtl.o): Depend on toplev.h.\n "}, {"sha": "615ee9e08bfd7b2ed28ef7eb27886056c95dc1dc", "filename": "gcc/toplev.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140b60b42e92daa02621ec13ebdc691f157b1e99/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140b60b42e92daa02621ec13ebdc691f157b1e99/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=140b60b42e92daa02621ec13ebdc691f157b1e99", "patch": "@@ -3594,7 +3594,8 @@ rest_of_compilation (decl)\n \t generating code for this one is not only not necessary but will\n \t confuse some debugging output writers.  */\n       for (parent = DECL_CONTEXT (current_function_decl);\n-\t   parent != 0; parent = DECL_CONTEXT (parent))\n+\t   parent != NULL_TREE; \n+\t   parent = get_containing_scope (parent))\n \tif (TREE_CODE (parent) == FUNCTION_DECL\n \t    && DECL_INLINE (parent) && DECL_EXTERNAL (parent))\n \t  {"}, {"sha": "c3a95a6f85a1649909a584f04e729e3dffa65ad7", "filename": "gcc/tree.c", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140b60b42e92daa02621ec13ebdc691f157b1e99/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140b60b42e92daa02621ec13ebdc691f157b1e99/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=140b60b42e92daa02621ec13ebdc691f157b1e99", "patch": "@@ -4772,6 +4772,16 @@ int_fits_type_p (c, type)\n \t\t  && TREE_UNSIGNED (TREE_TYPE (c))));\n }\n \n+/* Given a DECL or TYPE, return the scope in which it was declared, or\n+   NUL_TREE if there is no containing scope.  */\n+\n+tree\n+get_containing_scope (t)\n+     tree t;\n+{\n+  return (TYPE_P (t) ? TYPE_CONTEXT (t) : DECL_CONTEXT (t));\n+}\n+\n /* Return the innermost context enclosing DECL that is\n    a FUNCTION_DECL, or zero if none.  */\n \n@@ -4791,15 +4801,10 @@ decl_function_context (decl)\n \n   while (context && TREE_CODE (context) != FUNCTION_DECL)\n     {\n-      if (TREE_CODE_CLASS (TREE_CODE (context)) == 't')\n-\tcontext = TYPE_CONTEXT (context);\n-      else if (TREE_CODE_CLASS (TREE_CODE (context)) == 'd')\n-\tcontext = DECL_CONTEXT (context);\n-      else if (TREE_CODE (context) == BLOCK)\n+      if (TREE_CODE (context) == BLOCK)\n \tcontext = BLOCK_SUPERCONTEXT (context);\n-      else\n-\t/* Unhandled CONTEXT !?  */\n-\tabort ();\n+      else \n+\tcontext = get_containing_scope (context);\n     }\n \n   return context;"}, {"sha": "4af3a1ddb675d767c89dd9ad4de52d6aa656cd4c", "filename": "gcc/tree.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/140b60b42e92daa02621ec13ebdc691f157b1e99/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/140b60b42e92daa02621ec13ebdc691f157b1e99/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=140b60b42e92daa02621ec13ebdc691f157b1e99", "patch": "@@ -1950,6 +1950,11 @@ extern tree get_inner_reference\t\tPROTO((tree, int *, int *, tree *,\n \t\t\t\t\t       enum machine_mode *, int *,\n \t\t\t\t\t       int *, int *));\n \n+/* Given a DECL or TYPE, return the scope in which it was declared, or\n+   NUL_TREE if there is no containing scope.  */\n+\n+extern tree get_containing_scope        PROTO((tree));\n+\n /* Return the FUNCTION_DECL which provides this _DECL with its context,\n    or zero if none.  */\n extern tree decl_function_context \tPROTO((tree));"}]}