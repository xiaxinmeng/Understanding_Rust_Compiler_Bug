{"sha": "5a6ccafd7d4899ee7942a5f3be359a249c1273ae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE2Y2NhZmQ3ZDQ4OTllZTc5NDJhNWYzYmUzNTlhMjQ5YzEyNzNhZQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-06-20T16:19:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-06-20T16:19:29Z"}, "message": "alloc-pool.h (free_alloc_pool_if_empty): Prototype new function.\n\n2006-06-20  Richard Guenther  <rguenther@suse.de>\n\tMichael Matz  <matz@suse.de>\n\n\t* alloc-pool.h (free_alloc_pool_if_empty): Prototype new\n\tfunction.\n\t* alloc-pool.c (free_alloc_pool_if_empty): New function.\n\t* et-forest.h (et_free_pools): Prototype new function.\n\t* et-forest.c (et_free_tree_force): Free parent occurrence. \n\t(et_free_pools): New function.\n\t* dominance.c (free_dominance_info): Free et-forest alloc\n\tpools.\n\nCo-Authored-By: Michael Matz <matz@suse.de>\n\nFrom-SVN: r114817", "tree": {"sha": "9147dcee09484286cbe9b33011aa8f2b85f12e02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9147dcee09484286cbe9b33011aa8f2b85f12e02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a6ccafd7d4899ee7942a5f3be359a249c1273ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6ccafd7d4899ee7942a5f3be359a249c1273ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a6ccafd7d4899ee7942a5f3be359a249c1273ae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a6ccafd7d4899ee7942a5f3be359a249c1273ae/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1000b34d95a6319206389feb136879d42d4675f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1000b34d95a6319206389feb136879d42d4675f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1000b34d95a6319206389feb136879d42d4675f2"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "f0e8292fe75737be791ce4808767d46e8b6f510e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6ccafd7d4899ee7942a5f3be359a249c1273ae/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6ccafd7d4899ee7942a5f3be359a249c1273ae/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5a6ccafd7d4899ee7942a5f3be359a249c1273ae", "patch": "@@ -1,3 +1,15 @@\n+2006-06-20  Richard Guenther  <rguenther@suse.de>\n+\tMichael Matz  <matz@suse.de>\n+\n+\t* alloc-pool.h (free_alloc_pool_if_empty): Prototype new\n+\tfunction.\n+\t* alloc-pool.c (free_alloc_pool_if_empty): New function.\n+\t* et-forest.h (et_free_pools): Prototype new function.\n+\t* et-forest.c (et_free_tree_force): Free parent occurrence. \n+\t(et_free_pools): New function.\n+\t* dominance.c (free_dominance_info): Free et-forest alloc\n+\tpools.\n+\n 2006-06-20  Roger Sayle  <roger@eyesopen.com>\n \n \t* expr.c (expand_expr_real_1) <VECTOR_CST>: For vector constants with"}, {"sha": "d85cd9ef57cc117abdc4e15d8cd27632c0d6183f", "filename": "gcc/alloc-pool.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6ccafd7d4899ee7942a5f3be359a249c1273ae/gcc%2Falloc-pool.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6ccafd7d4899ee7942a5f3be359a249c1273ae/gcc%2Falloc-pool.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.c?ref=5a6ccafd7d4899ee7942a5f3be359a249c1273ae", "patch": "@@ -207,6 +207,17 @@ free_alloc_pool (alloc_pool pool)\n   free (pool);\n }\n \n+/* Frees the alloc_pool, if it is empty and zero *POOL in this case.  */\n+void\n+free_alloc_pool_if_empty (alloc_pool *pool)\n+{\n+  if ((*pool)->elts_free == (*pool)->elts_allocated)\n+    {\n+      free_alloc_pool (*pool);\n+      *pool = NULL;\n+    }\n+}\n+\n /* Allocates one element from the pool specified.  */\n void *\n pool_alloc (alloc_pool pool)"}, {"sha": "82188f4c064fe12f51ad9ae45db2cdf9d233acbe", "filename": "gcc/alloc-pool.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6ccafd7d4899ee7942a5f3be359a249c1273ae/gcc%2Falloc-pool.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6ccafd7d4899ee7942a5f3be359a249c1273ae/gcc%2Falloc-pool.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falloc-pool.h?ref=5a6ccafd7d4899ee7942a5f3be359a249c1273ae", "patch": "@@ -49,6 +49,7 @@ typedef struct alloc_pool_def\n \n extern alloc_pool create_alloc_pool (const char *, size_t, size_t);\n extern void free_alloc_pool (alloc_pool);\n+extern void free_alloc_pool_if_empty (alloc_pool *);\n extern void *pool_alloc (alloc_pool);\n extern void pool_free (alloc_pool, void *);\n extern void dump_alloc_pool_statistics (void);"}, {"sha": "ca6d1543f77918aef525eb517015573ade49cae6", "filename": "gcc/dominance.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6ccafd7d4899ee7942a5f3be359a249c1273ae/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6ccafd7d4899ee7942a5f3be359a249c1273ae/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=5a6ccafd7d4899ee7942a5f3be359a249c1273ae", "patch": "@@ -663,6 +663,7 @@ free_dominance_info (enum cdi_direction dir)\n       et_free_tree_force (bb->dom[dir]);\n       bb->dom[dir] = NULL;\n     }\n+  et_free_pools ();\n \n   n_bbs_in_dom_tree[dir] = 0;\n "}, {"sha": "b8e552741096df82c5a21d2fd1c743b1a9aee67e", "filename": "gcc/et-forest.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6ccafd7d4899ee7942a5f3be359a249c1273ae/gcc%2Fet-forest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6ccafd7d4899ee7942a5f3be359a249c1273ae/gcc%2Fet-forest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fet-forest.c?ref=5a6ccafd7d4899ee7942a5f3be359a249c1273ae", "patch": "@@ -505,9 +505,20 @@ void\n et_free_tree_force (struct et_node *t)\n {\n   pool_free (et_occurrences, t->rightmost_occ);\n+  if (t->parent_occ)\n+    pool_free (et_occurrences, t->parent_occ);\n   pool_free (et_nodes, t);\n }\n \n+/* Release the alloc pools, if they are empty.  */\n+\n+void\n+et_free_pools (void)\n+{\n+  free_alloc_pool_if_empty (&et_occurrences);\n+  free_alloc_pool_if_empty (&et_nodes);\n+}\n+\n /* Sets father of et tree T to FATHER.  */\n \n void"}, {"sha": "1de715f40b53fe8922ea4c6a63b6ca7c02f95b4a", "filename": "gcc/et-forest.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a6ccafd7d4899ee7942a5f3be359a249c1273ae/gcc%2Fet-forest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a6ccafd7d4899ee7942a5f3be359a249c1273ae/gcc%2Fet-forest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fet-forest.h?ref=5a6ccafd7d4899ee7942a5f3be359a249c1273ae", "patch": "@@ -74,6 +74,7 @@ struct et_node\n struct et_node *et_new_tree (void *data);\n void et_free_tree (struct et_node *);\n void et_free_tree_force (struct et_node *);\n+void et_free_pools (void);\n void et_set_father (struct et_node *, struct et_node *);\n void et_split (struct et_node *);\n struct et_node *et_nca (struct et_node *, struct et_node *);"}]}