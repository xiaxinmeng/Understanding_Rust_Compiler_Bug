{"sha": "430d7d88c1a123d787f529dbc29e6632c6e556fb", "node_id": "C_kwDOANBUbNoAKDQzMGQ3ZDg4YzFhMTIzZDc4N2Y1MjlkYmMyOWU2NjMyYzZlNTU2ZmI", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-18T16:48:01Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2023-03-18T16:48:01Z"}, "message": "analyzer: fix ICE on certain longjmp calls [PR109094]\n\nPR analyzer/109094 reports an ICE in the analyzer seen on qemu's\ntarget/i386/tcg/translate.c\n\nThe issue turned out to be that when handling a longjmp, the code\nto pop the frames was generating an svalue for the result_decl of any\npopped frame that had a non-void return type (and discarding it) leading\nto \"uninit\" poisoned_svalue_diagnostic instances being saved since the\nresult_decl is only set by the greturn stmt.  Later, when checking the\nfeasibility of the path to these diagnostics, m_check_expr was evaluated\nin the context of the frame of the longjmp, leading to an attempt to\nevaluate the result_decl of each intervening frames whilst in the\ncontext of the topmost frame, leading to an assertion failure in\nframe_region::get_region_for_local here:\n\n919\t\tcase RESULT_DECL:\n920\t\t  gcc_assert (DECL_CONTEXT (expr) == m_fun->decl);\n921\t\t  break;\n\nThis patch updates the analyzer's longjmp implementation so that it\ndoesn't attempt to generate svalues for the result_decls when popping\nframes, fixing the assertion failure (and presumably fixing \"uninit\"\nfalse positives in a release build).\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/109094\n\t* region-model.cc (region_model::on_longjmp): Pass false for\n\tnew \"eval_return_svalue\" param of pop_frame.\n\t(region_model::pop_frame): Add new \"eval_return_svalue\" param and\n\tuse it to suppress the call to get_rvalue on the result when\n\tneeded by on_longjmp.\n\t* region-model.h (region_model::pop_frame): Add new\n\t\"eval_return_svalue\" param.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/109094\n\t* gcc.dg/analyzer/setjmp-pr109094.c: New test.\n\nSigned-off-by: David Malcolm <dmalcolm@redhat.com>", "tree": {"sha": "7b8d0b9b47dc524f49fad5b008e9a5fed18f0d51", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7b8d0b9b47dc524f49fad5b008e9a5fed18f0d51"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/430d7d88c1a123d787f529dbc29e6632c6e556fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/430d7d88c1a123d787f529dbc29e6632c6e556fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/430d7d88c1a123d787f529dbc29e6632c6e556fb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/430d7d88c1a123d787f529dbc29e6632c6e556fb/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b83d4755a7da02f25788fce14bec949e7045f8f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b83d4755a7da02f25788fce14bec949e7045f8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b83d4755a7da02f25788fce14bec949e7045f8f"}], "stats": {"total": 56, "additions": 52, "deletions": 4}, "files": [{"sha": "fb81d43f91b2c0bd5d704eade8bdca0db7c617d0", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430d7d88c1a123d787f529dbc29e6632c6e556fb/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430d7d88c1a123d787f529dbc29e6632c6e556fb/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=430d7d88c1a123d787f529dbc29e6632c6e556fb", "patch": "@@ -1952,7 +1952,7 @@ region_model::on_longjmp (const gcall *longjmp_call, const gcall *setjmp_call,\n      setjmp was called.  */\n   gcc_assert (get_stack_depth () >= setjmp_stack_depth);\n   while (get_stack_depth () > setjmp_stack_depth)\n-    pop_frame (NULL, NULL, ctxt);\n+    pop_frame (NULL, NULL, ctxt, false);\n \n   gcc_assert (get_stack_depth () == setjmp_stack_depth);\n \n@@ -4679,14 +4679,19 @@ region_model::get_current_function () const\n    If OUT_RESULT is non-null, copy any return value from the frame\n    into *OUT_RESULT.\n \n+   If EVAL_RETURN_SVALUE is false, then don't evaluate the return value.\n+   This is for use when unwinding frames e.g. due to longjmp, to suppress\n+   erroneously reporting uninitialized return values.\n+\n    Purge the frame region and all its descendent regions.\n    Convert any pointers that point into such regions into\n    POISON_KIND_POPPED_STACK svalues.  */\n \n void\n region_model::pop_frame (tree result_lvalue,\n \t\t\t const svalue **out_result,\n-\t\t\t region_model_context *ctxt)\n+\t\t\t region_model_context *ctxt,\n+\t\t\t bool eval_return_svalue)\n {\n   gcc_assert (m_current_frame);\n \n@@ -4700,7 +4705,9 @@ region_model::pop_frame (tree result_lvalue,\n   tree fndecl = m_current_frame->get_function ()->decl;\n   tree result = DECL_RESULT (fndecl);\n   const svalue *retval = NULL;\n-  if (result && TREE_TYPE (result) != void_type_node)\n+  if (result\n+      && TREE_TYPE (result) != void_type_node\n+      && eval_return_svalue)\n     {\n       retval = get_rvalue (result, ctxt);\n       if (out_result)\n@@ -4712,6 +4719,8 @@ region_model::pop_frame (tree result_lvalue,\n \n   if (result_lvalue && retval)\n     {\n+      gcc_assert (eval_return_svalue);\n+\n       /* Compute result_dst_reg using RESULT_LVALUE *after* popping\n \t the frame, but before poisoning pointers into the old frame.  */\n       const region *result_dst_reg = get_lvalue (result_lvalue, ctxt);"}, {"sha": "fe3db0b0c985c3d78fa9618cbfb6bd8ca4076fc7", "filename": "gcc/analyzer/region-model.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430d7d88c1a123d787f529dbc29e6632c6e556fb/gcc%2Fanalyzer%2Fregion-model.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430d7d88c1a123d787f529dbc29e6632c6e556fb/gcc%2Fanalyzer%2Fregion-model.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.h?ref=430d7d88c1a123d787f529dbc29e6632c6e556fb", "patch": "@@ -341,7 +341,8 @@ class region_model\n   function * get_current_function () const;\n   void pop_frame (tree result_lvalue,\n \t\t  const svalue **out_result,\n-\t\t  region_model_context *ctxt);\n+\t\t  region_model_context *ctxt,\n+\t\t  bool eval_return_svalue = true);\n   int get_stack_depth () const;\n   const frame_region *get_frame_at_index (int index) const;\n "}, {"sha": "10591ce60a7318d9d17cbede796d22d4266456b4", "filename": "gcc/testsuite/gcc.dg/analyzer/setjmp-pr109094.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430d7d88c1a123d787f529dbc29e6632c6e556fb/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsetjmp-pr109094.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430d7d88c1a123d787f529dbc29e6632c6e556fb/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsetjmp-pr109094.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fsetjmp-pr109094.c?ref=430d7d88c1a123d787f529dbc29e6632c6e556fb", "patch": "@@ -0,0 +1,38 @@\n+/* Reduced from an ICE seen in qemu's target/i386/tcg/translate.c  */\n+\n+typedef long int __jmp_buf[8];\n+struct __jmp_buf_tag {\n+  __jmp_buf __jmpbuf;\n+};\n+typedef struct __jmp_buf_tag sigjmp_buf[1];\n+\n+extern int __sigsetjmp(sigjmp_buf env, int savesigs);\n+extern void siglongjmp(sigjmp_buf env, int val);\n+\n+typedef struct DisasContextBase {\n+  int num_insns;\n+} DisasContextBase;\n+\n+typedef struct DisasContext {\n+  DisasContextBase base;\n+  sigjmp_buf jmpbuf;\n+} DisasContext;\n+\n+extern int translator_ldub(DisasContextBase *base, int);\n+\n+int advance_pc(DisasContext *s, int num_bytes) {\n+  if (s->base.num_insns > 1) {\n+    siglongjmp(s->jmpbuf, 2);\n+  }\n+  return 0;\n+}\n+\n+static inline int x86_ldub_code(DisasContext *s) {\n+  return translator_ldub(&s->base, advance_pc(s, 1));\n+}\n+\n+static void disas_insn(DisasContext *s) {\n+  int b;\n+  __sigsetjmp(s->jmpbuf, 0);\n+  b = x86_ldub_code(s);\n+}"}]}