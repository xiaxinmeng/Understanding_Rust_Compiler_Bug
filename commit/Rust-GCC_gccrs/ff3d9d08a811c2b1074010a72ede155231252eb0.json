{"sha": "ff3d9d08a811c2b1074010a72ede155231252eb0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmYzZDlkMDhhODExYzJiMTA3NDAxMGE3MmVkZTE1NTIzMTI1MmViMA==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@codesourcery.com", "date": "2011-01-23T21:11:24Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2011-01-23T21:11:24Z"}, "message": "re PR rtl-optimization/47166 (SpecCpu2000 Ammp segfaults for ARM with -O3 -mthumb)\n\n\tPR rtl-optimization/47166\n\t* reload1.c (emit_reload_insns): Disable the spill_reg_store\n\tmechanism for PRE_MODIFY and POST_MODIFY.\n\t(inc_for_reload): For PRE_MODIFY, return the insn that sets the\n\treloadreg.\n\nCo-Authored-By: Richard Sandiford <rdsandiford@googlemail.com>\n\nFrom-SVN: r169144", "tree": {"sha": "7c9c2e79ba79a0d4faca129d3249c4ec5931e662", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c9c2e79ba79a0d4faca129d3249c4ec5931e662"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff3d9d08a811c2b1074010a72ede155231252eb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3d9d08a811c2b1074010a72ede155231252eb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff3d9d08a811c2b1074010a72ede155231252eb0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff3d9d08a811c2b1074010a72ede155231252eb0/comments", "author": null, "committer": null, "parents": [{"sha": "7fcaf152b608e3afc138f83fc06d230c4d83fa90", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fcaf152b608e3afc138f83fc06d230c4d83fa90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fcaf152b608e3afc138f83fc06d230c4d83fa90"}], "stats": {"total": 35, "additions": 28, "deletions": 7}, "files": [{"sha": "e6d8bcbca0c8e1cecf01d49195c9477fcb01d4fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3d9d08a811c2b1074010a72ede155231252eb0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3d9d08a811c2b1074010a72ede155231252eb0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff3d9d08a811c2b1074010a72ede155231252eb0", "patch": "@@ -1,3 +1,12 @@\n+2011-01-23  Bernd Schmidt  <bernds@codesourcery.com>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\tPR rtl-optimization/47166\n+\t* reload1.c (emit_reload_insns): Disable the spill_reg_store\n+\tmechanism for PRE_MODIFY and POST_MODIFY.\n+\t(inc_for_reload): For PRE_MODIFY, return the insn that sets the\n+\treloadreg.\n+\n 2011-01-23  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* compare-elim.c (maybe_select_cc_mode): Add ATTRIBUTE_UNUSED"}, {"sha": "3d58e5877cf35faa4538886f3f0a11232d6b8ed8", "filename": "gcc/reload1.c", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff3d9d08a811c2b1074010a72ede155231252eb0/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff3d9d08a811c2b1074010a72ede155231252eb0/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=ff3d9d08a811c2b1074010a72ede155231252eb0", "patch": "@@ -1,7 +1,7 @@\n /* Reload pseudo regs into hard regs for insns that require hard regs.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010\n-   Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,\n+   2011 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -8086,10 +8086,22 @@ emit_reload_insns (struct insn_chain *chain)\n \t  /* Maybe the spill reg contains a copy of reload_out.  */\n \t  if (rld[r].out != 0\n \t      && (REG_P (rld[r].out)\n-#ifdef AUTO_INC_DEC\n-\t\t  || ! rld[r].out_reg\n-#endif\n-\t\t  || REG_P (rld[r].out_reg)))\n+\t\t  || (rld[r].out_reg\n+\t\t      ? REG_P (rld[r].out_reg)\n+\t\t      /* The reload value is an auto-modification of\n+\t\t\t some kind.  For PRE_INC, POST_INC, PRE_DEC\n+\t\t\t and POST_DEC, we record an equivalence\n+\t\t\t between the reload register and the operand\n+\t\t\t on the optimistic assumption that we can make\n+\t\t\t the equivalence hold.  reload_as_needed must\n+\t\t\t then either make it hold or invalidate the\n+\t\t\t equivalence.\n+\n+\t\t\t PRE_MODIFY and POST_MODIFY addresses are reloaded\n+\t\t\t somewhat differently, and allowing them here leads\n+\t\t\t to problems.  */\n+\t\t      : (GET_CODE (rld[r].out) != POST_MODIFY\n+\t\t\t && GET_CODE (rld[r].out) != PRE_MODIFY))))\n \t    {\n \t      rtx reg;\n \t      enum machine_mode mode;\n@@ -9033,7 +9045,7 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)\n \t\t be used as an address.  */\n \n \t      if (! post)\n-\t\temit_insn (gen_move_insn (reloadreg, incloc));\n+\t\tadd_insn = emit_insn (gen_move_insn (reloadreg, incloc));\n \n \t      return add_insn;\n \t    }"}]}