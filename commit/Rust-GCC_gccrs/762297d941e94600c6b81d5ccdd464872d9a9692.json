{"sha": "762297d941e94600c6b81d5ccdd464872d9a9692", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzYyMjk3ZDk0MWU5NDYwMGM2YjgxZDVjY2RkNDY0ODcyZDlhOTY5Mg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@eyesopen.com", "date": "2005-02-03T06:44:35Z"}, "committer": {"name": "Roger Sayle", "email": "sayle@gcc.gnu.org", "date": "2005-02-03T06:44:35Z"}, "message": "re PR middle-end/19405 (18_support/numeric_limits.cc fails on ppc-darwin (long doubles))\n\n\n\tPR middle-end/19405\n\t* real.h (REAL_MODE_FORMAT_COMPOSITE_P): New macro.\n\t* fold-const.c (const_binop): Avoid constant folding floating\n\tpoint operations in modes that use composite representations.\n\t* simplify-rtx.c (simplify_binary_operation): Likewise.\n\nFrom-SVN: r94653", "tree": {"sha": "fb250b8935df7ba966a9aeae4f38b4eca4fc2969", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fb250b8935df7ba966a9aeae4f38b4eca4fc2969"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/762297d941e94600c6b81d5ccdd464872d9a9692", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762297d941e94600c6b81d5ccdd464872d9a9692", "html_url": "https://github.com/Rust-GCC/gccrs/commit/762297d941e94600c6b81d5ccdd464872d9a9692", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/762297d941e94600c6b81d5ccdd464872d9a9692/comments", "author": null, "committer": null, "parents": [{"sha": "666158b9cecdc55cc2f2cf0c77f571220b5a10c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/666158b9cecdc55cc2f2cf0c77f571220b5a10c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/666158b9cecdc55cc2f2cf0c77f571220b5a10c3"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "b9a63952f471d3b883391e8e7b387e5101a12951", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762297d941e94600c6b81d5ccdd464872d9a9692/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762297d941e94600c6b81d5ccdd464872d9a9692/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=762297d941e94600c6b81d5ccdd464872d9a9692", "patch": "@@ -1,3 +1,11 @@\n+2005-02-02  Roger Sayle  <roger@eyesopen.com>\n+\n+\tPR middle-end/19405\n+\t* real.h (REAL_MODE_FORMAT_COMPOSITE_P): New macro.\n+\t* fold-const.c (const_binop): Avoid constant folding floating\n+\tpoint operations in modes that use composite representations.\n+\t* simplify-rtx.c (simplify_binary_operation): Likewise.\n+\n 2005-02-02  Geoffrey Keating  <geoffk@apple.com>\n \n \t* config/rs6000/altivec.md (altivec_dst): Make the first operand"}, {"sha": "1d2efbd2c237a1cfcdc2d1b5b8f88bf38cf24ebe", "filename": "gcc/fold-const.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762297d941e94600c6b81d5ccdd464872d9a9692/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762297d941e94600c6b81d5ccdd464872d9a9692/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=762297d941e94600c6b81d5ccdd464872d9a9692", "patch": "@@ -1517,9 +1517,12 @@ const_binop (enum tree_code code, tree arg1, tree arg2, int notrunc)\n \n       /* Don't constant fold this floating point operation if the\n \t result may dependent upon the run-time rounding mode and\n-\t flag_rounding_math is set.  */\n+\t flag_rounding_math is set, or if GCC's software emulation\n+\t is unable to accurately represent the result.  */\n       \n-      if (flag_rounding_math\n+      if ((flag_rounding_math\n+\t   || (REAL_MODE_FORMAT_COMPOSITE_P (mode)\n+\t       && !flag_unsafe_math_optimizations))\n \t  && (inexact || !real_identical (&result, &value)))\n \treturn NULL_TREE;\n "}, {"sha": "5c4e9c605d81eeb78576e2731171da1cfebe37d2", "filename": "gcc/real.h", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762297d941e94600c6b81d5ccdd464872d9a9692/gcc%2Freal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762297d941e94600c6b81d5ccdd464872d9a9692/gcc%2Freal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.h?ref=762297d941e94600c6b81d5ccdd464872d9a9692", "patch": "@@ -157,6 +157,12 @@ extern const struct real_format *\n \n #define REAL_MODE_FORMAT(MODE) (real_format_for_mode[(MODE) - MIN_MODE_FLOAT])\n \n+/* The following macro determines whether the floating point format is\n+   composite, i.e. may contain non-consecutive mantissa bits, in which\n+   case compile-time FP overflow may not model run-time overflow.  */\n+#define REAL_MODE_FORMAT_COMPOSITE_P(MODE) \\\n+\t((REAL_MODE_FORMAT(MODE))->pnan < (REAL_MODE_FORMAT (MODE))->p)\n+\n /* Declare functions in real.c.  */\n \n /* Binary or unary arithmetic on tree_code.  */"}, {"sha": "a1a774752cf38209f7d134171ff338dcd85d72dc", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/762297d941e94600c6b81d5ccdd464872d9a9692/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/762297d941e94600c6b81d5ccdd464872d9a9692/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=762297d941e94600c6b81d5ccdd464872d9a9692", "patch": "@@ -1346,8 +1346,12 @@ simplify_binary_operation (enum rtx_code code, enum machine_mode mode,\n \n \t  /* Don't constant fold this floating point operation if the\n \t     result may dependent upon the run-time rounding mode and\n-\t     flag_rounding_math is set.  */\n-\t  if (flag_rounding_math\n+\t     flag_rounding_math is set, or if GCC's software emulation\n+\t     is unable to accurately represent the result.  */\n+\n+\t  if ((flag_rounding_math\n+\t       || (REAL_MODE_FORMAT_COMPOSITE_P (mode)\n+\t\t   && !flag_unsafe_math_optimizations))\n \t      && (inexact || !real_identical (&result, &value)))\n \t    return NULL_RTX;\n "}]}