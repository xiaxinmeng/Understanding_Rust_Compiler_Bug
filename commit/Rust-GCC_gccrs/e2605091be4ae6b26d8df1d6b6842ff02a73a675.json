{"sha": "e2605091be4ae6b26d8df1d6b6842ff02a73a675", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI2MDUwOTFiZTRhZTZiMjZkOGRmMWQ2YjY4NDJmZjAyYTczYTY3NQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-09-06T18:09:01Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-09-06T18:09:01Z"}, "message": "re PR c++/50296 (New C++ test failures)\n\n\tPR c++/50296\n\t* semantics.c (register_constexpr_fundef): Call is_valid_constexpr_fn.\n\t(cx_check_missing_mem_inits): Handle bases and empty trivial members.\n\t(validate_constexpr_fundecl): Remove.\n\t* decl.c (start_preparsed_function): Don't call it.\n\t* cp-tree.h: Don't declare it.\n\nFrom-SVN: r178604", "tree": {"sha": "e20937f632c58c1a01487434d4d86c8b697ce0c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e20937f632c58c1a01487434d4d86c8b697ce0c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e2605091be4ae6b26d8df1d6b6842ff02a73a675", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2605091be4ae6b26d8df1d6b6842ff02a73a675", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2605091be4ae6b26d8df1d6b6842ff02a73a675", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2605091be4ae6b26d8df1d6b6842ff02a73a675/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df7b0cc4aae0620d830b8e9f8ed8a586e68f470b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7b0cc4aae0620d830b8e9f8ed8a586e68f470b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df7b0cc4aae0620d830b8e9f8ed8a586e68f470b"}], "stats": {"total": 61, "additions": 27, "deletions": 34}, "files": [{"sha": "2fe60fe03c7fe57274771362df352549db449508", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2605091be4ae6b26d8df1d6b6842ff02a73a675/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2605091be4ae6b26d8df1d6b6842ff02a73a675/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e2605091be4ae6b26d8df1d6b6842ff02a73a675", "patch": "@@ -1,3 +1,12 @@\n+2011-09-06  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/50296\n+\t* semantics.c (register_constexpr_fundef): Call is_valid_constexpr_fn.\n+\t(cx_check_missing_mem_inits): Handle bases and empty trivial members.\n+\t(validate_constexpr_fundecl): Remove.\n+\t* decl.c (start_preparsed_function): Don't call it.\n+\t* cp-tree.h: Don't declare it.\n+\n 2011-09-04  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/49267"}, {"sha": "ae4cd075f9104d69efc78bbb302ba76da5f3ddc2", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2605091be4ae6b26d8df1d6b6842ff02a73a675/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2605091be4ae6b26d8df1d6b6842ff02a73a675/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=e2605091be4ae6b26d8df1d6b6842ff02a73a675", "patch": "@@ -5367,7 +5367,6 @@ extern void finish_handler_parms\t\t(tree, tree);\n extern void finish_handler\t\t\t(tree);\n extern void finish_cleanup\t\t\t(tree, tree);\n extern bool literal_type_p (tree);\n-extern tree validate_constexpr_fundecl (tree);\n extern tree register_constexpr_fundef (tree, tree);\n extern bool check_constexpr_ctor_body (tree, tree);\n extern tree ensure_literal_type_for_constexpr_object (tree);"}, {"sha": "eed45352871a99b02902dc96559c9207a51633dc", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2605091be4ae6b26d8df1d6b6842ff02a73a675/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2605091be4ae6b26d8df1d6b6842ff02a73a675/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=e2605091be4ae6b26d8df1d6b6842ff02a73a675", "patch": "@@ -12659,10 +12659,6 @@ start_preparsed_function (tree decl1, tree attrs, int flags)\n \tmaybe_apply_pragma_weak (decl1);\n     }\n \n-  /* constexpr functions must have literal argument types and\n-     literal return type.  */\n-  validate_constexpr_fundecl (decl1);\n-\n   /* Reset this in case the call to pushdecl changed it.  */\n   current_function_decl = decl1;\n "}, {"sha": "f782df9ec36c7bdd022fdbe1a2c96796063bbd2f", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2605091be4ae6b26d8df1d6b6842ff02a73a675/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2605091be4ae6b26d8df1d6b6842ff02a73a675/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=e2605091be4ae6b26d8df1d6b6842ff02a73a675", "patch": "@@ -5485,7 +5485,6 @@ is_valid_constexpr_fn (tree fun, bool complain)\n \t    }\n \t}\n \n-      /* Check this again here for cxx_eval_call_expression.  */\n       if (DECL_NONSTATIC_MEMBER_FUNCTION_P (fun)\n \t  && !CLASSTYPE_LITERAL_P (DECL_CONTEXT (fun)))\n \t{\n@@ -5502,29 +5501,6 @@ is_valid_constexpr_fn (tree fun, bool complain)\n   return ret;\n }\n \n-/* Return non-null if FUN certainly designates a valid constexpr function\n-   declaration.  Otherwise return NULL.  Issue appropriate diagnostics\n-   if necessary.  Note that we only check the declaration, not the body\n-   of the function.  */\n-\n-tree\n-validate_constexpr_fundecl (tree fun)\n-{\n-  if (processing_template_decl || !DECL_DECLARED_CONSTEXPR_P (fun))\n-    return NULL;\n-  else if (DECL_CLONED_FUNCTION_P (fun))\n-    /* We already checked the original function.  */\n-    return fun;\n-\n-  if (!is_valid_constexpr_fn (fun, !DECL_TEMPLATE_INFO (fun)))\n-    {\n-      DECL_DECLARED_CONSTEXPR_P (fun) = false;\n-      return NULL;\n-    }\n-\n-  return fun;\n-}\n-\n /* Subroutine of  build_constexpr_constructor_member_initializers.\n    The expression tree T represents a data member initialization\n    in a (constexpr) constructor definition.  Build a pairing of\n@@ -5799,17 +5775,27 @@ cx_check_missing_mem_inits (tree fun, tree body, bool complain)\n       else\n \t{\n \t  index = CONSTRUCTOR_ELT (body, i)->index;\n-\t  /* Skip base vtable inits.  */\n-\t  if (TREE_CODE (index) == COMPONENT_REF)\n+\t  /* Skip base and vtable inits.  */\n+\t  if (TREE_CODE (index) != FIELD_DECL)\n \t    continue;\n \t}\n       for (; field != index; field = DECL_CHAIN (field))\n \t{\n+\t  tree ftype;\n \t  if (TREE_CODE (field) != FIELD_DECL\n \t      || (DECL_C_BIT_FIELD (field) && !DECL_NAME (field)))\n \t    continue;\n \t  if (!complain)\n \t    return true;\n+\t  ftype = strip_array_types (TREE_TYPE (field));\n+\t  if (type_has_constexpr_default_constructor (ftype))\n+\t    {\n+\t      /* It's OK to skip a member with a trivial constexpr ctor.\n+\t         A constexpr ctor that isn't trivial should have been\n+\t         added in by now.  */\n+\t      gcc_checking_assert (!TYPE_HAS_COMPLEX_DFLT (ftype));\n+\t      continue;\n+\t    }\n \t  error (\"uninitialized member %qD in %<constexpr%> constructor\",\n \t\t field);\n \t  bad = true;\n@@ -5834,6 +5820,9 @@ register_constexpr_fundef (tree fun, tree body)\n   constexpr_fundef entry;\n   constexpr_fundef **slot;\n \n+  if (!is_valid_constexpr_fn (fun, !DECL_TEMPLATE_INFO (fun)))\n+    return NULL;\n+\n   body = massage_constexpr_body (fun, body);\n   if (body == NULL_TREE || body == error_mark_node)\n     {"}, {"sha": "cbd4983e84b065733baaa22b5f32aa2c0ca69cbe", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-diag1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2605091be4ae6b26d8df1d6b6842ff02a73a675/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2605091be4ae6b26d8df1d6b6842ff02a73a675/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-diag1.C?ref=e2605091be4ae6b26d8df1d6b6842ff02a73a675", "patch": "@@ -17,4 +17,4 @@ constexpr int b = A<B>().f();\t// { dg-error \"non-constexpr function\" }\n \n template <class T>\n constexpr int f (T t) { return 42; } // { dg-error \"parameter\" }\n-constexpr int x = f(B());\t     // { dg-error \"constexpr function\" }\n+constexpr int x = f(B());\t     // { dg-error \"constexpr\" }"}, {"sha": "57782cf349a668b96909c63466e18ed41df175bb", "filename": "gcc/testsuite/g++.dg/cpp0x/constexpr-friend.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e2605091be4ae6b26d8df1d6b6842ff02a73a675/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-friend.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e2605091be4ae6b26d8df1d6b6842ff02a73a675/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-friend.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fconstexpr-friend.C?ref=e2605091be4ae6b26d8df1d6b6842ff02a73a675", "patch": "@@ -19,5 +19,5 @@ struct C\n \n constexpr int i = f(C<int>());\n constexpr int j = C<int>().m(C<int>());\n-constexpr int k = C<double>().m(A()); // { dg-error \"non-constexpr function\" }\n-constexpr int l = g(C<double>(),A()); // { dg-error \"non-constexpr function\" }\n+constexpr int k = C<double>().m(A()); // { dg-error \"constexpr\" }\n+constexpr int l = g(C<double>(),A()); // { dg-error \"constexpr\" }"}]}