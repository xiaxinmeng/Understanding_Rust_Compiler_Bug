{"sha": "2563c2248f41b473e18c33125f40ef2196773fc0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjU2M2MyMjQ4ZjQxYjQ3M2UxOGMzMzEyNWY0MGVmMjE5Njc3M2ZjMA==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenth@gcc.gnu.org", "date": "2005-03-02T11:09:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2005-03-02T11:09:48Z"}, "message": "cgraph.h (struct cgraph_edge): Add prev_caller and prev_callee fields.\n\n2005-03-02  Richard Guenther  <rguenth@gcc.gnu.org>\n\n\t* cgraph.h (struct cgraph_edge): Add prev_caller and\n\tprev_callee fields.\n\t(cgraph_node_remove_callees): Export.\n\t* cgraph.c (cgraph_create_edge): Initialize prev_caller\n\tand prev_callee.\n\t(cgraph_edge_remove_callee): New function.\n\t(cgraph_edge_remove_caller): Likewise.\n\t(cgraph_remove_edge): Use.\n\t(cgraph_redirect_edge_callee): Likewise.\n\t(cgraph_node_remove_callees): New function.\n\t(cgraph_node_remove_callers): Likewise.\n\t(cgraph_remove_node): Use.\n\t* tree-optimize.c (tree_rest_of_compilation): Use\n\tcgraph_node_remove_callees instead of manual loop.\n\t* cgraphunit.c (cgraph_finalize_function): Likewise.\n\t(cgraph_expand_function): Likewise.\n\t(cgraph_remove_unreachable_nodes): Likewise.\n\nFrom-SVN: r95777", "tree": {"sha": "bdb529abaec3ec0dbd00b6e655a0f76068edb9e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bdb529abaec3ec0dbd00b6e655a0f76068edb9e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2563c2248f41b473e18c33125f40ef2196773fc0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2563c2248f41b473e18c33125f40ef2196773fc0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2563c2248f41b473e18c33125f40ef2196773fc0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2563c2248f41b473e18c33125f40ef2196773fc0/comments", "author": null, "committer": null, "parents": [{"sha": "ceccf46b1067576cd6c9de7e4ab3af67aa35009e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ceccf46b1067576cd6c9de7e4ab3af67aa35009e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ceccf46b1067576cd6c9de7e4ab3af67aa35009e"}], "stats": {"total": 143, "additions": 109, "deletions": 34}, "files": [{"sha": "12e90862de424f712e57d58f37cd298123c6eaed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2563c2248f41b473e18c33125f40ef2196773fc0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2563c2248f41b473e18c33125f40ef2196773fc0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2563c2248f41b473e18c33125f40ef2196773fc0", "patch": "@@ -1,3 +1,23 @@\n+2005-03-02  Richard Guenther  <rguenth@gcc.gnu.org>\n+\n+\t* cgraph.h (struct cgraph_edge): Add prev_caller and\n+\tprev_callee fields.\n+\t(cgraph_node_remove_callees): Export.\n+\t* cgraph.c (cgraph_create_edge): Initialize prev_caller\n+\tand prev_callee.\n+\t(cgraph_edge_remove_callee): New function.\n+\t(cgraph_edge_remove_caller): Likewise.\n+\t(cgraph_remove_edge): Use.\n+\t(cgraph_redirect_edge_callee): Likewise.\n+\t(cgraph_node_remove_callees): New function.\n+\t(cgraph_node_remove_callers): Likewise.\n+\t(cgraph_remove_node): Use.\n+\t* tree-optimize.c (tree_rest_of_compilation): Use\n+\tcgraph_node_remove_callees instead of manual loop.\n+\t* cgraphunit.c (cgraph_finalize_function): Likewise.\n+\t(cgraph_expand_function): Likewise.\n+\t(cgraph_remove_unreachable_nodes): Likewise.\n+\n 2005-03-02  Joseph S. Myers  <joseph@codesourcery.com>\n \n \tPR c/8927"}, {"sha": "11953b46f85a898304c57a6363051e1bf5c9e181", "filename": "gcc/cgraph.c", "status": "modified", "additions": 80, "deletions": 23, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2563c2248f41b473e18c33125f40ef2196773fc0/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2563c2248f41b473e18c33125f40ef2196773fc0/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=2563c2248f41b473e18c33125f40ef2196773fc0", "patch": "@@ -96,6 +96,10 @@ The varpool data structure:\n #include \"output.h\"\n #include \"intl.h\"\n \n+static void cgraph_node_remove_callers (struct cgraph_node *node);\n+static inline void cgraph_edge_remove_caller (struct cgraph_edge *e);\n+static inline void cgraph_edge_remove_callee (struct cgraph_edge *e);\n+\n /* Hash table used to convert declarations into nodes.  */\n static GTY((param_is (struct cgraph_node))) htab_t cgraph_hash;\n \n@@ -289,30 +293,55 @@ cgraph_create_edge (struct cgraph_node *caller, struct cgraph_node *callee,\n   edge->caller = caller;\n   edge->callee = callee;\n   edge->call_expr = call_expr;\n+  edge->prev_caller = NULL;\n   edge->next_caller = callee->callers;\n+  if (callee->callers)\n+    callee->callers->prev_caller = edge;\n+  edge->prev_callee = NULL;\n   edge->next_callee = caller->callees;\n+  if (caller->callees)\n+    caller->callees->prev_callee = edge;\n   caller->callees = edge;\n   callee->callers = edge;\n   return edge;\n }\n \n-/* Remove the edge E the cgraph.  */\n+/* Remove the edge E from the list of the callers of the callee.  */\n+\n+static inline void\n+cgraph_edge_remove_callee (struct cgraph_edge *e)\n+{\n+  if (e->prev_caller)\n+    e->prev_caller->next_caller = e->next_caller;\n+  if (e->next_caller)\n+    e->next_caller->prev_caller = e->prev_caller;\n+  if (!e->prev_caller)\n+    e->callee->callers = e->next_caller;\n+}\n+\n+/* Remove the edge E from the list of the callees of the caller.  */\n+\n+static inline void\n+cgraph_edge_remove_caller (struct cgraph_edge *e)\n+{\n+  if (e->prev_callee)\n+    e->prev_callee->next_callee = e->next_callee;\n+  if (e->next_callee)\n+    e->next_callee->prev_callee = e->prev_callee;\n+  if (!e->prev_callee)\n+    e->caller->callees = e->next_callee;\n+}\n+\n+/* Remove the edge E in the cgraph.  */\n \n void\n cgraph_remove_edge (struct cgraph_edge *e)\n {\n-  struct cgraph_edge **edge, **edge2;\n+  /* Remove from callers list of the callee.  */\n+  cgraph_edge_remove_callee (e);\n \n-  for (edge = &e->callee->callers; *edge && *edge != e;\n-       edge = &((*edge)->next_caller))\n-    continue;\n-  gcc_assert (*edge);\n-  *edge = (*edge)->next_caller;\n-  for (edge2 = &e->caller->callees; *edge2 && *edge2 != e;\n-       edge2 = &(*edge2)->next_callee)\n-    continue;\n-  gcc_assert (*edge2);\n-  *edge2 = (*edge2)->next_callee;\n+  /* Remove from callees list of the callers.  */\n+  cgraph_edge_remove_caller (e);\n }\n \n /* Redirect callee of E to N.  The function does not update underlying\n@@ -321,16 +350,46 @@ cgraph_remove_edge (struct cgraph_edge *e)\n void\n cgraph_redirect_edge_callee (struct cgraph_edge *e, struct cgraph_node *n)\n {\n-  struct cgraph_edge **edge;\n+  /* Remove from callers list of the current callee.  */\n+  cgraph_edge_remove_callee (e);\n \n-  for (edge = &e->callee->callers; *edge && *edge != e;\n-       edge = &((*edge)->next_caller))\n-    continue;\n-  gcc_assert (*edge);\n-  *edge = (*edge)->next_caller;\n-  e->callee = n;\n+  /* Insert to callers list of the new callee.  */\n+  e->prev_caller = NULL;\n+  if (n->callers)\n+    n->callers->prev_caller = e;\n   e->next_caller = n->callers;\n   n->callers = e;\n+  e->callee = n;\n+}\n+\n+/* Remove all callees from the node.  */\n+\n+void\n+cgraph_node_remove_callees (struct cgraph_node *node)\n+{\n+  struct cgraph_edge *e;\n+\n+  /* It is sufficient to remove the edges from the lists of callers of\n+     the callees.  The callee list of the node can be zapped with one\n+     assignment.  */\n+  for (e = node->callees; e; e = e->next_callee)\n+    cgraph_edge_remove_callee (e);\n+  node->callees = NULL;\n+}\n+\n+/* Remove all callers from the node.  */\n+\n+static void\n+cgraph_node_remove_callers (struct cgraph_node *node)\n+{\n+  struct cgraph_edge *e;\n+\n+  /* It is sufficient to remove the edges from the lists of callees of\n+     the callers.  The caller list of the node can be zapped with one\n+     assignment.  */\n+  for (e = node->callers; e; e = e->next_caller)\n+    cgraph_edge_remove_caller (e);\n+  node->callers = NULL;\n }\n \n /* Remove the node from cgraph.  */\n@@ -341,10 +400,8 @@ cgraph_remove_node (struct cgraph_node *node)\n   void **slot;\n   bool check_dead = 1;\n \n-  while (node->callers)\n-    cgraph_remove_edge (node->callers);\n-  while (node->callees)\n-    cgraph_remove_edge (node->callees);\n+  cgraph_node_remove_callers (node);\n+  cgraph_node_remove_callees (node);\n   while (node->nested)\n     cgraph_remove_node (node->nested);\n   if (node->origin)"}, {"sha": "b596a36a223635647eccb6d7943b28cfe1dfe1c3", "filename": "gcc/cgraph.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2563c2248f41b473e18c33125f40ef2196773fc0/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2563c2248f41b473e18c33125f40ef2196773fc0/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=2563c2248f41b473e18c33125f40ef2196773fc0", "patch": "@@ -119,11 +119,13 @@ struct cgraph_node GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\")))\n   bool output;\n };\n \n-struct cgraph_edge GTY((chain_next (\"%h.next_caller\")))\n+struct cgraph_edge GTY((chain_next (\"%h.next_caller\"), chain_prev (\"%h.prev_caller\")))\n {\n   struct cgraph_node *caller;\n   struct cgraph_node *callee;\n+  struct cgraph_edge *prev_caller;\n   struct cgraph_edge *next_caller;\n+  struct cgraph_edge *prev_callee;\n   struct cgraph_edge *next_callee;\n   tree call_expr;\n   PTR GTY ((skip (\"\"))) aux;\n@@ -165,6 +167,7 @@ void dump_cgraph (FILE *);\n void dump_cgraph_node (FILE *, struct cgraph_node *);\n void cgraph_remove_edge (struct cgraph_edge *);\n void cgraph_remove_node (struct cgraph_node *);\n+void cgraph_node_remove_callees (struct cgraph_node *node);\n struct cgraph_edge *cgraph_create_edge (struct cgraph_node *,\n \t\t\t\t\tstruct cgraph_node *,\n \t\t\t\t        tree);"}, {"sha": "1effef6710a947f4c4da0a86bae070707fadaec8", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2563c2248f41b473e18c33125f40ef2196773fc0/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2563c2248f41b473e18c33125f40ef2196773fc0/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=2563c2248f41b473e18c33125f40ef2196773fc0", "patch": "@@ -356,8 +356,7 @@ cgraph_finalize_function (tree decl, bool nested)\n \t      cgraph_remove_node (n);\n \t}\n \n-      while (node->callees)\n-\tcgraph_remove_edge (node->callees);\n+      cgraph_node_remove_callees (node);\n \n       /* We may need to re-queue the node for assembling in case\n          we already proceeded it and ignored as not needed.  */\n@@ -843,8 +842,7 @@ cgraph_expand_function (struct cgraph_node *node)\n       DECL_INITIAL (node->decl) = error_mark_node;\n       /* Eliminate all call edges.  This is important so the call_expr no longer\n \t points to the dead function body.  */\n-      while (node->callees)\n-\tcgraph_remove_edge (node->callees);\n+      cgraph_node_remove_callees (node);\n     }\n }\n \n@@ -1006,8 +1004,7 @@ cgraph_remove_unreachable_nodes (void)\n \t\t      DECL_STRUCT_FUNCTION (node->decl) = NULL;\n \t\t      DECL_INITIAL (node->decl) = error_mark_node;\n \t\t    }\n-\t\t  while (node->callees)\n-\t\t    cgraph_remove_edge (node->callees);\n+\t\t  cgraph_node_remove_callees (node);\n \t\t  node->analyzed = false;\n \t\t}\n \t      else"}, {"sha": "78d4ce559343848f074e31e771d2f209f3968202", "filename": "gcc/tree-optimize.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2563c2248f41b473e18c33125f40ef2196773fc0/gcc%2Ftree-optimize.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2563c2248f41b473e18c33125f40ef2196773fc0/gcc%2Ftree-optimize.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-optimize.c?ref=2563c2248f41b473e18c33125f40ef2196773fc0", "patch": "@@ -656,8 +656,7 @@ tree_rest_of_compilation (tree fndecl)\n \n   /* We are not going to maintain the cgraph edges up to date.\n      Kill it so it won't confuse us.  */\n-  while (node->callees)\n-    cgraph_remove_edge (node->callees);\n+  cgraph_node_remove_callees (node);\n \n \n   /* Initialize the default bitmap obstack.  */\n@@ -688,8 +687,7 @@ tree_rest_of_compilation (tree fndecl)\n \t{\n \t  struct cgraph_edge *e;\n \n-\t  while (node->callees)\n-\t    cgraph_remove_edge (node->callees);\n+\t  cgraph_node_remove_callees (node);\n \t  node->callees = saved_node->callees;\n \t  saved_node->callees = NULL;\n \t  update_inlined_to_pointers (node, node);"}]}