{"sha": "ae6b830f31a47aca7ca24c4fea245c29214eef3a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU2YjgzMGYzMWE0N2FjYTdjYTI0YzRmZWEyNDVjMjkyMTRlZWYzYQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-17T17:38:03Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2021-06-22T12:11:45Z"}, "message": "Add relation effects between operands to MINUS_EXPR.\n\n\t* range-op.cc (operator_minus::op1_op2_relation_effect): New.", "tree": {"sha": "f5958cda9dbf7697122944b989d74a2a82ba7d70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5958cda9dbf7697122944b989d74a2a82ba7d70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae6b830f31a47aca7ca24c4fea245c29214eef3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae6b830f31a47aca7ca24c4fea245c29214eef3a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae6b830f31a47aca7ca24c4fea245c29214eef3a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae6b830f31a47aca7ca24c4fea245c29214eef3a/comments", "author": null, "committer": null, "parents": [{"sha": "c526de3f432a037bdbdd44eb6fa43af4f3b22694", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c526de3f432a037bdbdd44eb6fa43af4f3b22694", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c526de3f432a037bdbdd44eb6fa43af4f3b22694"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "ec4816d69fa18d4e6683310f88e45459578ffe96", "filename": "gcc/range-op.cc", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae6b830f31a47aca7ca24c4fea245c29214eef3a/gcc%2Frange-op.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae6b830f31a47aca7ca24c4fea245c29214eef3a/gcc%2Frange-op.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op.cc?ref=ae6b830f31a47aca7ca24c4fea245c29214eef3a", "patch": "@@ -1279,6 +1279,11 @@ class operator_minus : public range_operator\n \t\t        const wide_int &lh_ub,\n \t\t        const wide_int &rh_lb,\n \t\t        const wide_int &rh_ub) const;\n+  virtual bool op1_op2_relation_effect (irange &lhs_range,\n+\t\t\t\t\ttree type,\n+\t\t\t\t\tconst irange &op1_range,\n+\t\t\t\t\tconst irange &op2_range,\n+\t\t\t\t\trelation_kind rel) const;\n } op_minus;\n \n void \n@@ -1293,6 +1298,45 @@ operator_minus::wi_fold (irange &r, tree type,\n   value_range_with_overflow (r, type, new_lb, new_ub, ov_lb, ov_ub);\n }\n \n+// Check to see if the relation REL between OP1 and OP2 has any effect on the\n+// LHS of the epxression.  If so, apply it to LHS_RANGE.\n+\n+bool\n+operator_minus::op1_op2_relation_effect (irange &lhs_range, tree type,\n+\t\t\t\t      const irange &op1_range ATTRIBUTE_UNUSED,\n+\t\t\t\t      const irange &op2_range ATTRIBUTE_UNUSED,\n+\t\t\t\t      relation_kind rel) const\n+{\n+  if (rel == VREL_NONE)\n+    return false;\n+\n+  int_range<2> rel_range;\n+  unsigned prec = TYPE_PRECISION (type);\n+  signop sgn = TYPE_SIGN (type);\n+\n+  switch (rel)\n+    {\n+      // op1 > op2,  op1 - op2 can be restricted to  [1, max]\n+      case GT_EXPR:\n+\trel_range = int_range<2> (type, wi::one (prec),\n+\t\t\t\t  wi::max_value (prec, sgn));\n+\tbreak;\n+      // op1 >= op2,  op1 - op2 can be restricted to  [0, max]\n+      case GE_EXPR:\n+\trel_range = int_range<2> (type, wi::zero (prec),\n+\t\t\t\t  wi::max_value (prec, sgn));\n+\tbreak;\n+      // op1 == op2,  op1 - op2 can be restricted to  [0, 0]\n+      case EQ_EXPR:\n+\trel_range = int_range<2> (type, wi::zero (prec), wi::zero (prec));\n+\tbreak;\n+      default:\n+\treturn false;\n+    }\n+  lhs_range.intersect (rel_range);\n+  return true;\n+}\n+\n bool\n operator_minus::op1_range (irange &r, tree type,\n \t\t\t   const irange &lhs,"}]}