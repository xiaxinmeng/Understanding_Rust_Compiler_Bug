{"sha": "5522dec054cb940fe83661b96249aa12c54c1d77", "node_id": "C_kwDOANBUbNoAKDU1MjJkZWMwNTRjYjk0MGZlODM2NjFiOTYyNDlhYTEyYzU0YzFkNzc", "commit": {"author": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-04-08T14:12:23Z"}, "committer": {"name": "Andre Vieira", "email": "andre.simoesdiasvieira@arm.com", "date": "2022-04-08T14:12:23Z"}, "message": "aarch64: PR target/105157 Increase number of cores TARGET_CPU_DEFAULT can encode\n\nThis addresses the compile-time increase seen in the PR target/105157. This was\nbeing caused by selecting the wrong core tuning, as when we added the latest\nAArch64 the TARGET_CPU_generic tuning was pushed beyond the 0x3f mask we used\nto encode both target cpu and attributes into TARGET_CPU_DEFAULT.\n\ngcc/ChangeLog:\n\n\tPR target/105157\n\t* config.gcc: Shift ext_mask by TARGET_CPU_NBITS.\n\t* config/aarch64/aarch64.h (TARGET_CPU_NBITS): New macro.\n\t(TARGET_CPU_MASK): Likewise.\n\t(TARGET_CPU_DEFAULT): Use TARGET_CPU_NBITS.\n\t* config/aarch64/aarch64.cc (aarch64_get_tune_cpu): Use TARGET_CPU_MASK.\n\t(aarch64_get_arch): Likewise.\n\t(aarch64_override_options): Use TARGET_CPU_NBITS.", "tree": {"sha": "add9feef9b4bfed32a8262a0bcb6c9694f5fc67a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/add9feef9b4bfed32a8262a0bcb6c9694f5fc67a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5522dec054cb940fe83661b96249aa12c54c1d77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5522dec054cb940fe83661b96249aa12c54c1d77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5522dec054cb940fe83661b96249aa12c54c1d77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5522dec054cb940fe83661b96249aa12c54c1d77/comments", "author": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "avieira-arm", "id": 68072104, "node_id": "MDQ6VXNlcjY4MDcyMTA0", "avatar_url": "https://avatars.githubusercontent.com/u/68072104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/avieira-arm", "html_url": "https://github.com/avieira-arm", "followers_url": "https://api.github.com/users/avieira-arm/followers", "following_url": "https://api.github.com/users/avieira-arm/following{/other_user}", "gists_url": "https://api.github.com/users/avieira-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/avieira-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/avieira-arm/subscriptions", "organizations_url": "https://api.github.com/users/avieira-arm/orgs", "repos_url": "https://api.github.com/users/avieira-arm/repos", "events_url": "https://api.github.com/users/avieira-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/avieira-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5453bcc217ea4ac53a4ac277661d6ef0ccd425b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5453bcc217ea4ac53a4ac277661d6ef0ccd425b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5453bcc217ea4ac53a4ac277661d6ef0ccd425b"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "5382788e267214ccc1015d0bed85b718ebf00011", "filename": "gcc/config.gcc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5522dec054cb940fe83661b96249aa12c54c1d77/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5522dec054cb940fe83661b96249aa12c54c1d77/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=5522dec054cb940fe83661b96249aa12c54c1d77", "patch": "@@ -4261,7 +4261,7 @@ case \"${target}\" in\n \t\t\t\text_val=`echo $ext_val | sed -e 's/[a-z0-9]\\+//'`\n \t\t\t  done\n \n-\t\t\t  ext_mask=\"((\"$ext_mask\") << 6)\"\n+\t\t\t  ext_mask=\"((\"$ext_mask\") << TARGET_CPU_NBITS)\"\n \t\t\t  if [ x\"$base_id\" != x ]; then\n \t\t\t\ttarget_cpu_cname=\"TARGET_CPU_$base_id | $ext_mask\"\n \t\t\t  fi"}, {"sha": "cf62bdd023b5799284fdcc337a50c01ccd21493f", "filename": "gcc/config/aarch64/aarch64.cc", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5522dec054cb940fe83661b96249aa12c54c1d77/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5522dec054cb940fe83661b96249aa12c54c1d77/gcc%2Fconfig%2Faarch64%2Faarch64.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.cc?ref=5522dec054cb940fe83661b96249aa12c54c1d77", "patch": "@@ -18053,6 +18053,9 @@ aarch64_validate_mtune (const char *str, const struct processor **res)\n   return false;\n }\n \n+static_assert (TARGET_CPU_generic < TARGET_CPU_MASK,\n+\t       \"TARGET_CPU_NBITS is big enough\");\n+\n /* Return the CPU corresponding to the enum CPU.\n    If it doesn't specify a cpu, return the default.  */\n \n@@ -18062,12 +18065,12 @@ aarch64_get_tune_cpu (enum aarch64_processor cpu)\n   if (cpu != aarch64_none)\n     return &all_cores[cpu];\n \n-  /* The & 0x3f is to extract the bottom 6 bits that encode the\n-     default cpu as selected by the --with-cpu GCC configure option\n+  /* The & TARGET_CPU_MASK is to extract the bottom TARGET_CPU_NBITS bits that\n+     encode the default cpu as selected by the --with-cpu GCC configure option\n      in config.gcc.\n      ???: The whole TARGET_CPU_DEFAULT and AARCH64_CPU_DEFAULT_FLAGS\n      flags mechanism should be reworked to make it more sane.  */\n-  return &all_cores[TARGET_CPU_DEFAULT & 0x3f];\n+  return &all_cores[TARGET_CPU_DEFAULT & TARGET_CPU_MASK];\n }\n \n /* Return the architecture corresponding to the enum ARCH.\n@@ -18079,7 +18082,8 @@ aarch64_get_arch (enum aarch64_arch arch)\n   if (arch != aarch64_no_arch)\n     return &all_architectures[arch];\n \n-  const struct processor *cpu = &all_cores[TARGET_CPU_DEFAULT & 0x3f];\n+  const struct processor *cpu\n+    = &all_cores[TARGET_CPU_DEFAULT & TARGET_CPU_MASK];\n \n   return &all_architectures[cpu->arch];\n }\n@@ -18166,7 +18170,7 @@ aarch64_override_options (void)\n \t{\n \t  /* Get default configure-time CPU.  */\n \t  selected_cpu = aarch64_get_tune_cpu (aarch64_none);\n-\t  aarch64_isa_flags = TARGET_CPU_DEFAULT >> 6;\n+\t  aarch64_isa_flags = TARGET_CPU_DEFAULT >> TARGET_CPU_NBITS;\n \t}\n \n       if (selected_tune)"}, {"sha": "359b6e8561faa38f53a806b8c114c83ae37e7e17", "filename": "gcc/config/aarch64/aarch64.h", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5522dec054cb940fe83661b96249aa12c54c1d77/gcc%2Fconfig%2Faarch64%2Faarch64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5522dec054cb940fe83661b96249aa12c54c1d77/gcc%2Fconfig%2Faarch64%2Faarch64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.h?ref=5522dec054cb940fe83661b96249aa12c54c1d77", "patch": "@@ -813,10 +813,16 @@ enum target_cpus\n   TARGET_CPU_generic\n };\n \n+/* Define how many bits are used to represent the CPU in TARGET_CPU_DEFAULT.\n+   This needs to be big enough to fit the value of TARGET_CPU_generic.\n+   All bits after this are used to represent the AARCH64_CPU_DEFAULT_FLAGS.  */\n+#define TARGET_CPU_NBITS 8\n+#define TARGET_CPU_MASK ((1 << TARGET_CPU_NBITS) - 1)\n+\n /* If there is no CPU defined at configure, use generic as default.  */\n #ifndef TARGET_CPU_DEFAULT\n #define TARGET_CPU_DEFAULT \\\n-  (TARGET_CPU_generic | (AARCH64_CPU_DEFAULT_FLAGS << 6))\n+  (TARGET_CPU_generic | (AARCH64_CPU_DEFAULT_FLAGS << TARGET_CPU_NBITS))\n #endif\n \n /* If inserting NOP before a mult-accumulate insn remember to adjust the"}]}