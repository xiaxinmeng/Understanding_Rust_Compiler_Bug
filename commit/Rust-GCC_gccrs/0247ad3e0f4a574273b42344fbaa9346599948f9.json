{"sha": "0247ad3e0f4a574273b42344fbaa9346599948f9", "node_id": "C_kwDOANBUbNoAKDAyNDdhZDNlMGY0YTU3NDI3M2I0MjM0NGZiYWE5MzQ2NTk5OTQ4Zjk", "commit": {"author": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-05-11T10:12:57Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2022-06-14T11:37:51Z"}, "message": "RISC-V: Split slli+sh[123]add.uw opportunities to avoid zext.w\n\nWhen encountering a prescaled (biased) value as a candidate for\nsh[123]add.uw, the combine pass will present this as shifted by the\naggregate amount (prescale + shift-amount) with an appropriately\nadjusted mask constant that has fewer than 32 bits set.\n\nE.g., here's the failing expression seen in combine for a prescale of\n1 and a shift of 2 (note how 0x3fffffff8 >> 3 is 0x7fffffff).\n  Trying 7, 8 -> 10:\n      7: r78:SI=r81:DI#0<<0x1\n        REG_DEAD r81:DI\n      8: r79:DI=zero_extend(r78:SI)\n        REG_DEAD r78:SI\n     10: r80:DI=r79:DI<<0x2+r82:DI\n        REG_DEAD r79:DI\n        REG_DEAD r82:DI\n  Failed to match this instruction:\n  (set (reg:DI 80 [ cD.1491 ])\n      (plus:DI (and:DI (ashift:DI (reg:DI 81)\n                       (const_int 3 [0x3]))\n               (const_int 17179869176 [0x3fffffff8]))\n          (reg:DI 82)))\n\nTo address this, we introduce a splitter handling these cases.\n\nSigned-off-by: Philipp Tomsich <philipp.tomsich@vrull.eu>\nCo-developed-by: Manolis Tsamis <manolis.tsamis@vrull.eu>\n\ngcc/ChangeLog:\n\n\t* config/riscv/bitmanip.md: Add split to handle opportunities\n\tfor slli + sh[123]add.uw\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/zba-shadd.c: New test.", "tree": {"sha": "bb8248fe9dfa6c982c32b9a1f321f42157cf63a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bb8248fe9dfa6c982c32b9a1f321f42157cf63a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0247ad3e0f4a574273b42344fbaa9346599948f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0247ad3e0f4a574273b42344fbaa9346599948f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0247ad3e0f4a574273b42344fbaa9346599948f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0247ad3e0f4a574273b42344fbaa9346599948f9/comments", "author": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bf0dcb0492c40be7e0603b13a8b5949609388dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4bf0dcb0492c40be7e0603b13a8b5949609388dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4bf0dcb0492c40be7e0603b13a8b5949609388dd"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "6c1ccc6f8c5c7da36a51f264951f097bef40ee08", "filename": "gcc/config/riscv/bitmanip.md", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247ad3e0f4a574273b42344fbaa9346599948f9/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247ad3e0f4a574273b42344fbaa9346599948f9/gcc%2Fconfig%2Friscv%2Fbitmanip.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fbitmanip.md?ref=0247ad3e0f4a574273b42344fbaa9346599948f9", "patch": "@@ -79,6 +79,50 @@\n   [(set_attr \"type\" \"bitmanip\")\n    (set_attr \"mode\" \"DI\")])\n \n+;; During combine, we may encounter an attempt to combine\n+;;   slli rtmp, rs, #imm\n+;;   zext.w rtmp, rtmp\n+;;   sh[123]add rd, rtmp, rs2\n+;; which will lead to the immediate not satisfying the above constraints.\n+;; By splitting the compound expression, we can simplify to a slli and a\n+;; sh[123]add.uw.\n+(define_split\n+  [(set (match_operand:DI 0 \"register_operand\")\n+\t(plus:DI (and:DI (ashift:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t\t    (match_operand:QI 2 \"immediate_operand\"))\n+\t\t\t (match_operand:DI 3 \"consecutive_bits_operand\"))\n+\t\t (match_operand:DI 4 \"register_operand\")))\n+   (clobber (match_operand:DI 5 \"register_operand\"))]\n+  \"TARGET_64BIT && TARGET_ZBA\"\n+  [(set (match_dup 5) (ashift:DI (match_dup 1) (match_dup 6)))\n+   (set (match_dup 0) (plus:DI (and:DI (ashift:DI (match_dup 5)\n+\t\t\t\t\t\t  (match_dup 7))\n+\t\t\t\t       (match_dup 8))\n+\t\t\t       (match_dup 4)))]\n+{\n+\tunsigned HOST_WIDE_INT mask = UINTVAL (operands[3]);\n+\t/* scale: shift within the sh[123]add.uw */\n+\tint scale = 32 - clz_hwi (mask);\n+\t/* bias:  pre-scale amount (i.e. the prior shift amount) */\n+\tint bias = ctz_hwi (mask) - scale;\n+\n+\t/* If the bias + scale don't add up to operand[2], reject. */\n+\tif ((scale + bias) != UINTVAL (operands[2]))\n+\t   FAIL;\n+\n+\t/* If the shift-amount is out-of-range for sh[123]add.uw, reject. */\n+\tif ((scale < 1) || (scale > 3))\n+\t   FAIL;\n+\n+\t/* If there's no bias, the '*shNadduw' pattern should have matched. */\n+\tif (bias == 0)\n+\t   FAIL;\n+\n+\toperands[6] = GEN_INT (bias);\n+\toperands[7] = GEN_INT (scale);\n+\toperands[8] = GEN_INT (0xffffffffULL << scale);\n+})\n+\n (define_insn \"*add.uw\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(plus:DI (zero_extend:DI"}, {"sha": "33da2530f3f5fd178aeda87708e9464c19d5932a", "filename": "gcc/testsuite/gcc.target/riscv/zba-shadd.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0247ad3e0f4a574273b42344fbaa9346599948f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shadd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0247ad3e0f4a574273b42344fbaa9346599948f9/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shadd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fzba-shadd.c?ref=0247ad3e0f4a574273b42344fbaa9346599948f9", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -march=rv64gc_zba -mabi=lp64\" } */\n+\n+unsigned long foo(unsigned int a, unsigned long b)\n+{\n+        a = a << 1;\n+        unsigned long c = (unsigned long) a;\n+        unsigned long d = b + (c<<2);\n+        return d;\n+}\n+\n+/* { dg-final { scan-assembler \"sh2add.uw\" } } */\n+/* { dg-final { scan-assembler-not \"zext\" } } */\n\\ No newline at end of file"}]}