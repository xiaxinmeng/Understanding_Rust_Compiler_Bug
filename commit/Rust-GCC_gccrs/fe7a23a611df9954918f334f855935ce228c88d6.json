{"sha": "fe7a23a611df9954918f334f855935ce228c88d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3YTIzYTYxMWRmOTk1NDkxOGYzMzRmODU1OTM1Y2UyMjhjODhkNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2018-06-15T20:23:00Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-06-15T20:23:00Z"}, "message": "pt.c (tsubst_default_argument): Use push_to/pop_from_top_level.\n\n\t* pt.c (tsubst_default_argument): Use push_to/pop_from_top_level.\n\n\t* name-lookup.c (do_pushtag): Don't look through complete types, but\n\tdon't add to them either.  Get context from current_binding_level.\n\nFrom-SVN: r261656", "tree": {"sha": "687801a448df6ff82ba9113374bdf6b8eece3207", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/687801a448df6ff82ba9113374bdf6b8eece3207"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe7a23a611df9954918f334f855935ce228c88d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7a23a611df9954918f334f855935ce228c88d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe7a23a611df9954918f334f855935ce228c88d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe7a23a611df9954918f334f855935ce228c88d6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4cf2e42b5d30bd38b05c16365ab8e5c98f7e12a"}], "stats": {"total": 70, "additions": 27, "deletions": 43}, "files": [{"sha": "56fe205fdbc2863676c3d1ab6ca010ed43ee2902", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7a23a611df9954918f334f855935ce228c88d6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7a23a611df9954918f334f855935ce228c88d6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fe7a23a611df9954918f334f855935ce228c88d6", "patch": "@@ -1,5 +1,9 @@\n 2018-06-15  Jason Merrill  <jason@redhat.com>\n \n+\t* name-lookup.c (do_pushtag): Don't look through complete types, but\n+\tdon't add to them either.  Get context from current_binding_level.\n+\t* pt.c (tsubst_default_argument): Use push_to/pop_from_top_level.\n+\n \t* decl.c (start_enum): Do compare dependent underlying type.\n \n \tPR c++/82882 - ICE with lambda in template default argument."}, {"sha": "ec001016d3ed40a0ef4c57fa1035f5ba7c659ea2", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7a23a611df9954918f334f855935ce228c88d6/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7a23a611df9954918f334f855935ce228c88d6/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=fe7a23a611df9954918f334f855935ce228c88d6", "patch": "@@ -6521,12 +6521,7 @@ do_pushtag (tree name, tree type, tag_scope scope)\n \t || (b->kind == sk_template_parms\n \t     && (b->explicit_spec_p || scope == ts_global))\n \t || (b->kind == sk_class\n-\t     && (scope != ts_current\n-\t\t /* We may be defining a new type in the initializer\n-\t\t    of a static member variable. We allow this when\n-\t\t    not pedantic, and it is particularly useful for\n-\t\t    type punning via an anonymous union.  */\n-\t\t || COMPLETE_TYPE_P (b->this_entity))))\n+\t     && scope != ts_current))\n     b = b->level_chain;\n \n   gcc_assert (identifier_p (name));\n@@ -6540,15 +6535,18 @@ do_pushtag (tree name, tree type, tag_scope scope)\n \n       if (! context)\n \t{\n-\t  tree cs = current_scope ();\n-\n-\t  /* Avoid setting the lambda context to a current_function_decl that\n-\t     we aren't actually inside, e.g. one set by push_access_scope\n-\t     during tsubst_default_argument.  */\n-\t  if (cs && TREE_CODE (cs) == FUNCTION_DECL\n-\t      && LAMBDA_TYPE_P (type)\n-\t      && !at_function_scope_p ())\n-\t    cs = DECL_CONTEXT (cs);\n+\t  cp_binding_level *cb = b;\n+\t  while (cb->kind != sk_namespace\n+\t\t && cb->kind != sk_class\n+\t\t && (cb->kind != sk_function_parms\n+\t\t     || !cb->this_entity))\n+\t    cb = cb->level_chain;\n+\t  tree cs = cb->this_entity;\n+\n+\t  gcc_checking_assert (TREE_CODE (cs) == FUNCTION_DECL\n+\t\t\t       ? cs == current_function_decl\n+\t\t\t       : TYPE_P (cs) ? cs == current_class_type\n+\t\t\t       : cs == current_namespace);\n \n \t  if (scope == ts_current\n \t      || (cs && TREE_CODE (cs) == FUNCTION_DECL))\n@@ -6587,11 +6585,11 @@ do_pushtag (tree name, tree type, tag_scope scope)\n \n       if (b->kind == sk_class)\n \t{\n-\t  if (!TYPE_BEING_DEFINED (current_class_type)\n-\t      && !LAMBDA_TYPE_P (type))\n-\t    return error_mark_node;\n-\n-\t  if (!PROCESSING_REAL_TEMPLATE_DECL_P ())\n+\t  if (!TYPE_BEING_DEFINED (current_class_type))\n+\t    /* Don't push anywhere if the class is complete; a lambda in an\n+\t       NSDMI is not a member of the class.  */\n+\t    ;\n+\t  else if (!PROCESSING_REAL_TEMPLATE_DECL_P ())\n \t    /* Put this TYPE_DECL on the TYPE_FIELDS list for the\n \t       class.  But if it's a member template class, we want\n \t       the TEMPLATE_DECL, not the TYPE_DECL, so this is done"}, {"sha": "4ee84b201e9e9f5d27e37f4d8ca2b90d052a8c87", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 20, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7a23a611df9954918f334f855935ce228c88d6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7a23a611df9954918f334f855935ce228c88d6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fe7a23a611df9954918f334f855935ce228c88d6", "patch": "@@ -12675,8 +12675,6 @@ tree\n tsubst_default_argument (tree fn, int parmnum, tree type, tree arg,\n \t\t\t tsubst_flags_t complain)\n {\n-  tree saved_class_ptr = NULL_TREE;\n-  tree saved_class_ref = NULL_TREE;\n   int errs = errorcount + sorrycount;\n \n   /* This can happen in invalid code.  */\n@@ -12709,19 +12707,10 @@ tsubst_default_argument (tree fn, int parmnum, tree type, tree arg,\n \n      we must be careful to do name lookup in the scope of S<T>,\n      rather than in the current class.  */\n+  push_to_top_level ();\n   push_access_scope (fn);\n-  /* The \"this\" pointer is not valid in a default argument.  */\n-  if (cfun)\n-    {\n-      saved_class_ptr = current_class_ptr;\n-      cp_function_chain->x_current_class_ptr = NULL_TREE;\n-      saved_class_ref = current_class_ref;\n-      cp_function_chain->x_current_class_ref = NULL_TREE;\n-    }\n-\n   start_lambda_scope (parm);\n \n-  push_deferring_access_checks(dk_no_deferred);\n   /* The default argument expression may cause implicitly defined\n      member functions to be synthesized, which will result in garbage\n      collection.  We must treat this situation as if we were within\n@@ -12732,17 +12721,9 @@ tsubst_default_argument (tree fn, int parmnum, tree type, tree arg,\n \t\t     complain, NULL_TREE,\n \t\t     /*integral_constant_expression_p=*/false);\n   --function_depth;\n-  pop_deferring_access_checks();\n \n   finish_lambda_scope ();\n \n-  /* Restore the \"this\" pointer.  */\n-  if (cfun)\n-    {\n-      cp_function_chain->x_current_class_ptr = saved_class_ptr;\n-      cp_function_chain->x_current_class_ref = saved_class_ref;\n-    }\n-\n   if (errorcount+sorrycount > errs\n       && (complain & tf_warning_or_error))\n     inform (input_location,\n@@ -12752,6 +12733,7 @@ tsubst_default_argument (tree fn, int parmnum, tree type, tree arg,\n   arg = check_default_argument (type, arg, complain);\n \n   pop_access_scope (fn);\n+  pop_from_top_level ();\n \n   if (arg != error_mark_node && !cp_unevaluated_operand)\n     {"}, {"sha": "3ffadc14c256cac39733a9a59c607e026bd69d23", "filename": "gcc/testsuite/g++.dg/template/crash108.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe7a23a611df9954918f334f855935ce228c88d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash108.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe7a23a611df9954918f334f855935ce228c88d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash108.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash108.C?ref=fe7a23a611df9954918f334f855935ce228c88d6", "patch": "@@ -1,5 +1,5 @@\n // PR c++/50861\n \n-template<class T> struct A {A(int b=k(0));}; // { dg-error \"parameter|argument\" }\n-void f(int k){A<int> a;} // // { dg-message \"declared\" }\n-// { dg-message \"note\" \"note\" { target *-*-* } 3 }\n+template<class T> struct A {A(int b=k(0));}; // { dg-error \"not declared\" }\n+ // { dg-error \"that depend on a template parameter\" \"\" { target *-*-* } .-1 }\n+void f(int k){A<int> a;}"}]}