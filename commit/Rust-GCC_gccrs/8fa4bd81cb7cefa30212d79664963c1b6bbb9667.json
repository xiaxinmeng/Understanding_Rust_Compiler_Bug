{"sha": "8fa4bd81cb7cefa30212d79664963c1b6bbb9667", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGZhNGJkODFjYjdjZWZhMzAyMTJkNzk2NjQ5NjNjMWI2YmJiOTY2Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-02-15T05:58:35Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2018-02-15T05:58:35Z"}, "message": "* libcpp/macro.c: Fix typos.\n\nFrom-SVN: r257682", "tree": {"sha": "8bda11e62011f24e401b17b67626c12329ae7f58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8bda11e62011f24e401b17b67626c12329ae7f58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8fa4bd81cb7cefa30212d79664963c1b6bbb9667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa4bd81cb7cefa30212d79664963c1b6bbb9667", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fa4bd81cb7cefa30212d79664963c1b6bbb9667", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fa4bd81cb7cefa30212d79664963c1b6bbb9667/comments", "author": null, "committer": null, "parents": [{"sha": "10789329789fbb5b87883fca029e745a06ded6a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/10789329789fbb5b87883fca029e745a06ded6a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/10789329789fbb5b87883fca029e745a06ded6a0"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "f994ac584ccad6caff3bf21603fcda5947b315a9", "filename": "libcpp/macro.c", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8fa4bd81cb7cefa30212d79664963c1b6bbb9667/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8fa4bd81cb7cefa30212d79664963c1b6bbb9667/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=8fa4bd81cb7cefa30212d79664963c1b6bbb9667", "patch": "@@ -51,7 +51,7 @@ struct macro_arg\n enum macro_arg_token_kind {\n   MACRO_ARG_TOKEN_NORMAL,\n   /* This is a macro argument token that got transformed into a string\n-     litteral, e.g. #foo.  */\n+     literal, e.g. #foo.  */\n   MACRO_ARG_TOKEN_STRINGIFIED,\n   /* This is a token resulting from the expansion of a macro\n      argument that was itself a macro.  */\n@@ -1819,9 +1819,9 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t   multiple tokens. This is to save memory at the expense of\n \t   accuracy.\n \n-\t   Suppose we have #define SQARE(A) A * A\n+\t   Suppose we have #define SQUARE(A) A * A\n \n-\t   And then we do SQARE(2+3)\n+\t   And then we do SQUARE(2+3)\n \n \t   Then the tokens 2, +, 3, will have the same location,\n \t   saying they come from the expansion of the argument A.  */\n@@ -1962,19 +1962,19 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t\t save extra memory while tracking macro expansion\n \t\t locations.  So in that case here is what we do:\n \n-\t\t Suppose we have #define SQARE(A) A * A\n+\t\t Suppose we have #define SQUARE(A) A * A\n \n-\t\t And then we do SQARE(2+3)\n+\t\t And then we do SQUARE(2+3)\n \n \t\t Then the tokens 2, +, 3, will have the same location,\n \t\t saying they come from the expansion of the argument\n \t\t A.\n \n \t      So that means we are going to ignore the COUNT tokens\n \t      resulting from the expansion of the current macro\n-\t      arugment. In other words all the ARG_TOKENS_COUNT tokens\n+\t      argument. In other words all the ARG_TOKENS_COUNT tokens\n \t      resulting from the expansion of the macro argument will\n-\t      have the index I. Normally, each of those token should\n+\t      have the index I.  Normally, each of those tokens should\n \t      have index I+J.  */\n \t      unsigned token_index = i;\n \t      unsigned index;\n@@ -1992,8 +1992,8 @@ replace_args (cpp_reader *pfile, cpp_hashnode *node, cpp_macro *macro,\n \t  /* With a non-empty argument on the LHS of ##, the last\n \t     token should be flagged PASTE_LEFT.  */\n \t  if (src->flags & PASTE_LEFT)\n-\t    paste_flag =\n-\t      (const cpp_token **) tokens_buff_last_token_ptr (buff);\n+\t    paste_flag\n+\t      = (const cpp_token **) tokens_buff_last_token_ptr (buff);\n \t}\n       else if (CPP_PEDANTIC (pfile) && ! CPP_OPTION (pfile, c99)\n \t       && ! macro->syshdr && ! cpp_in_system_header (pfile))"}]}