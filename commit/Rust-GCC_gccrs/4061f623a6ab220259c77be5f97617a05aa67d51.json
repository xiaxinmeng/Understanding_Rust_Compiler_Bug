{"sha": "4061f623a6ab220259c77be5f97617a05aa67d51", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDA2MWY2MjNhNmFiMjIwMjU5Yzc3YmU1Zjk3NjE3YTA1YWE2N2Q1MQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernds@cygnus.co.uk", "date": "2000-06-25T17:27:28Z"}, "committer": {"name": "Bernd Schmidt", "email": "crux@gcc.gnu.org", "date": "2000-06-25T17:27:28Z"}, "message": "Vector support: type node creation & debugging support\n\nFrom-SVN: r34696", "tree": {"sha": "522edcaf344f0a935b66520b90ff7de25127be81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/522edcaf344f0a935b66520b90ff7de25127be81"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4061f623a6ab220259c77be5f97617a05aa67d51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4061f623a6ab220259c77be5f97617a05aa67d51", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4061f623a6ab220259c77be5f97617a05aa67d51", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4061f623a6ab220259c77be5f97617a05aa67d51/comments", "author": null, "committer": null, "parents": [{"sha": "f1ff439a50500c09c7f8016ca00dfe0bfd1109a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1ff439a50500c09c7f8016ca00dfe0bfd1109a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1ff439a50500c09c7f8016ca00dfe0bfd1109a2"}], "stats": {"total": 129, "additions": 129, "deletions": 0}, "files": [{"sha": "b7695987aa57d3fb61802bc2968f142c61b2a30c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4061f623a6ab220259c77be5f97617a05aa67d51", "patch": "@@ -1,3 +1,22 @@\n+2000-06-24  Bernd Schmidt  <bernds@cygnus.co.uk>\n+\n+\t* tree.h (enum tree_index): Add vector type nodes.\n+\tAdd accessor macros for them.\n+\t(TYPE_REPRESENATION_TYPE): New macro.\n+\t* tree.c (build_common_tree_nodes_2): Build these nodes.\n+\t(finish_vector_type): New function.\n+\t* c-common.c (type_for_mode): Handle vector modes.\n+\t* tm.texi (VECTOR_MODE_SUPPORTED_P): Document.\n+\n+\t* dbxout.c (dbxout_type): Handle VECTOR_TYPEs.\n+\t* dwarf.h (enum dwarf_fundamental_type): Add 128 bit integers.\n+\t* dwarf2out.c (lookup_type_die): Handle VECTOR_TYPEs.\n+\t(gen_type_die): Likewise.\n+\t* dwarfout.c (dwarf_fund_type_name): Handle 128 bit integers.\n+\t(fundamental_type_code): Likewise.\n+\t(type_is_fundamental): VECTOR_TYPEs aren't.\n+\t(output_type): Handle VECTOR_TYPEs.\n+\n 2000-06-25  Kazu Hirata  <kazu@hxi.com>\n \n \t* config/arm.c: Fix a comment typo."}, {"sha": "b28284c011e862f75fb41a18ee06b94d31b2f0f9", "filename": "gcc/c-common.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=4061f623a6ab220259c77be5f97617a05aa67d51", "patch": "@@ -2296,6 +2296,19 @@ type_for_mode (mode, unsignedp)\n   if (mode == TYPE_MODE (build_pointer_type (integer_type_node)))\n     return build_pointer_type (integer_type_node);\n \n+#ifdef VECTOR_MODE_SUPPORTED_P\n+  if (mode == TYPE_MODE (V4SF_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n+    return V4SF_type_node;\n+  if (mode == TYPE_MODE (V4SI_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n+    return V4SI_type_node;\n+  if (mode == TYPE_MODE (V2SI_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n+    return V2SI_type_node;\n+  if (mode == TYPE_MODE (V4HI_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n+    return V4HI_type_node;\n+  if (mode == TYPE_MODE (V8QI_type_node) && VECTOR_MODE_SUPPORTED_P (mode))\n+    return V8QI_type_node;\n+#endif\n+\n   return 0;\n }\n "}, {"sha": "b2ce424e6e2b53c9257047b3ccfdba0b49d23aa5", "filename": "gcc/dbxout.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=4061f623a6ab220259c77be5f97617a05aa67d51", "patch": "@@ -1003,6 +1003,9 @@ dbxout_type (type, full, show_arg_types)\n   register tree tem;\n   static int anonymous_type_number = 0;\n \n+  if (TREE_CODE (type) == VECTOR_TYPE)\n+    type = TYPE_DEBUG_REPRESENTATION_TYPE (type);\n+\n   /* If there was an input error and we don't really have a type,\n      avoid crashing and write something that is at least valid\n      by assuming `int'.  */"}, {"sha": "3928574a3f16c5ed000f1c46c9c64c1c5b1e913f", "filename": "gcc/dwarf.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Fdwarf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Fdwarf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf.h?ref=4061f623a6ab220259c77be5f97617a05aa67d51", "patch": "@@ -237,6 +237,9 @@ enum dwarf_fundamental_type {\n     FT_int64\t\t= 0x9908,\n     FT_signed_int64\t= 0x9a08,\n     FT_unsigned_int64\t= 0x9b08,\n+    FT_int128\t\t= 0x9c10,\n+    FT_signed_int128\t= 0x9d10,\n+    FT_unsigned_int128\t= 0x9e10,\n \n     FT_real32\t\t= 0xa004,\n     FT_real64\t\t= 0xa108,"}, {"sha": "9757a631d5927675e825d36de7d0ab8337abddbc", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4061f623a6ab220259c77be5f97617a05aa67d51", "patch": "@@ -4118,6 +4118,8 @@ static inline dw_die_ref\n lookup_type_die (type)\n      register tree type;\n {\n+  if (TREE_CODE (type) == VECTOR_TYPE)\n+    type = TYPE_DEBUG_REPRESENTATION_TYPE (type);\n   return (dw_die_ref) TYPE_SYMTAB_POINTER (type);\n }\n \n@@ -9065,6 +9067,10 @@ gen_type_die (type, context_die)\n \tgen_array_type_die (type, context_die);\n       break;\n \n+    case VECTOR_TYPE:\n+      gen_type_die (TYPE_DEBUG_REPRESENTATION_TYPE (type), context_die);\n+      break;\n+\n     case ENUMERAL_TYPE:\n     case RECORD_TYPE:\n     case UNION_TYPE:"}, {"sha": "af1337f4ce83f364ed8ef44aaef3a68ad198030d", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=4061f623a6ab220259c77be5f97617a05aa67d51", "patch": "@@ -1135,6 +1135,9 @@ dwarf_fund_type_name (ft)\n     case FT_int64:\t\treturn \"FT_int64\";\n     case FT_signed_int64:\treturn \"FT_signed_int64\";\n     case FT_unsigned_int64:\treturn \"FT_unsigned_int64\";\n+    case FT_int128:\t\treturn \"FT_int128\";\n+    case FT_signed_int128:\treturn \"FT_signed_int128\";\n+    case FT_unsigned_int128:\treturn \"FT_unsigned_int128\";\n \n     case FT_real32:\t\treturn \"FT_real32\";\n     case FT_real64:\t\treturn \"FT_real64\";\n@@ -1366,6 +1369,9 @@ fundamental_type_code (type)\n \tif (TYPE_PRECISION (type) == CHAR_TYPE_SIZE)\n \t  return (TREE_UNSIGNED (type) ? FT_unsigned_char : FT_char);\n \n+\tif (TYPE_MODE (type) == TImode)\n+\t  return (TREE_UNSIGNED (type) ? FT_unsigned_int128 : FT_int128);\n+\n \t/* In C++, __java_boolean is an INTEGER_TYPE with precision == 1 */\n \tif (TYPE_PRECISION (type) == 1)\n \t  return FT_boolean;\n@@ -1554,6 +1560,7 @@ type_is_fundamental (type)\n       case FILE_TYPE:\n       case OFFSET_TYPE:\n       case LANG_TYPE:\n+      case VECTOR_TYPE:\n \treturn 0;\n \n       default:\n@@ -4302,6 +4309,10 @@ output_type (type, containing_scope)\n       case ERROR_MARK:\n \tbreak;\n \n+      case VECTOR_TYPE:\n+\toutput_type (TYPE_DEBUG_REPRESENTATION_TYPE (type), containing_scope);\n+\tbreak;\n+\n       case POINTER_TYPE:\n       case REFERENCE_TYPE:\n \t/* Prevent infinite recursion in cases where this is a recursive"}, {"sha": "008ee50e0d16f863c0de4b24a2276ee0efffdedf", "filename": "gcc/tm.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftm.texi?ref=4061f623a6ab220259c77be5f97617a05aa67d51", "patch": "@@ -1043,6 +1043,12 @@ this size or smaller can be used for structures and unions with the\n appropriate sizes.  If this macro is undefined, @code{GET_MODE_BITSIZE\n (DImode)} is assumed.\n \n+@findex VECTOR_MODE_SUPPORTED_P\n+@item VECTOR_MODE_SUPPORTED_P(@var{mode})\n+Define this macro to be nonzero if the port is prepared to handle insns\n+involving vector mode @var{mode}.  At the very least, it must have move\n+patterns for this mode.\n+\n @findex STACK_SAVEAREA_MODE\n @item STACK_SAVEAREA_MODE (@var{save_level})\n If defined, an expression of type @code{enum machine_mode} that"}, {"sha": "e1551c56338ed3eb994ad931d0f1c1c61e345b35", "filename": "gcc/tree.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=4061f623a6ab220259c77be5f97617a05aa67d51", "patch": "@@ -5613,6 +5613,32 @@ tree_class_check_failed (node, cl, file, line, function)\n #endif /* ENABLE_TREE_CHECKING */\n \n \f\n+/* For a new vector type node T, build the information necessary for\n+   debuggint output.  */\n+static void\n+finish_vector_type (t)\n+     tree t;\n+{\n+  layout_type (t);\n+\n+  {\n+    tree index = build_int_2 (TYPE_VECTOR_SUBPARTS (t) - 1, 0);\n+    tree array = build_array_type (TREE_TYPE (t),\n+\t\t\t\t   build_index_type (index));\n+    tree rt = make_node (RECORD_TYPE);\n+\n+    TYPE_FIELDS (rt) = build_decl (FIELD_DECL, get_identifier (\"f\"), array);\n+    DECL_CONTEXT (TYPE_FIELDS (rt)) = rt;\n+    layout_type (rt);\n+    TYPE_DEBUG_REPRESENTATION_TYPE (t) = rt;\n+    /* In dwarfout.c, type lookup uses TYPE_UID numbers.  We want to output\n+       the representation type, and we want to find that die when looking up\n+       the vector type.  This is most easily achieved by making the TYPE_UID\n+       numbers equal.  */\n+    TYPE_UID (rt) = TYPE_UID (t);\n+  }\n+}\n+\n #ifndef CHAR_TYPE_SIZE\n #define CHAR_TYPE_SIZE BITS_PER_UNIT\n #endif\n@@ -5764,4 +5790,29 @@ build_common_tree_nodes_2 (short_double)\n #else\n   va_list_type_node = ptr_type_node;\n #endif\n+\n+  V4SF_type_node = make_node (VECTOR_TYPE);\n+  TREE_TYPE (V4SF_type_node) = float_type_node;\n+  TYPE_MODE (V4SF_type_node) = V4SFmode;\n+  finish_vector_type (V4SF_type_node);\n+\n+  V4SI_type_node = make_node (VECTOR_TYPE);\n+  TREE_TYPE (V4SI_type_node) = intSI_type_node;\n+  TYPE_MODE (V4SI_type_node) = V4SImode;\n+  finish_vector_type (V4SI_type_node);\n+\n+  V2SI_type_node = make_node (VECTOR_TYPE);\n+  TREE_TYPE (V2SI_type_node) = intSI_type_node;\n+  TYPE_MODE (V2SI_type_node) = V2SImode;\n+  finish_vector_type (V2SI_type_node);\n+\n+  V4HI_type_node = make_node (VECTOR_TYPE);\n+  TREE_TYPE (V4HI_type_node) = intHI_type_node;\n+  TYPE_MODE (V4HI_type_node) = V4HImode;\n+  finish_vector_type (V4HI_type_node);\n+\n+  V8QI_type_node = make_node (VECTOR_TYPE);\n+  TREE_TYPE (V8QI_type_node) = intQI_type_node;\n+  TYPE_MODE (V8QI_type_node) = V8QImode;\n+  finish_vector_type (V8QI_type_node);\n }"}, {"sha": "bb6602c0f53757ccd35adad8e0dde741cb39b817", "filename": "gcc/tree.h", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4061f623a6ab220259c77be5f97617a05aa67d51/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=4061f623a6ab220259c77be5f97617a05aa67d51", "patch": "@@ -887,6 +887,11 @@ struct tree_block\n #define TYPE_OBSTACK(NODE) (TYPE_CHECK (NODE)->type.obstack)\n #define TYPE_LANG_SPECIFIC(NODE) (TYPE_CHECK (NODE)->type.lang_specific)\n \n+/* For a VECTOR_TYPE node, this describes a different type which is emitted\n+   in the debugging output.  We use this to describe a vector as a\n+   structure containing an array.  */\n+#define TYPE_DEBUG_REPRESENTATION_TYPE(NODE) (TYPE_CHECK (NODE)->type.values)\n+\n /* Indirect types present difficulties because they may be represented\n    as either POINTER_TYPE/REFERENCE_TYPE nodes (unbounded) or as\n    RECORD_TYPE nodes (bounded).  Bounded and unbounded pointers might\n@@ -1722,6 +1727,12 @@ enum tree_index\n   TI_PTRDIFF_TYPE,\n   TI_VA_LIST_TYPE,\n \n+  TI_V4SF_TYPE,\n+  TI_V4SI_TYPE,\n+  TI_V8QI_TYPE,\n+  TI_V4HI_TYPE,\n+  TI_V2SI_TYPE,\n+\n   TI_MAX\n };\n \n@@ -1768,6 +1779,12 @@ extern tree global_trees[TI_MAX];\n #define ptrdiff_type_node\t\tglobal_trees[TI_PTRDIFF_TYPE]\n #define va_list_type_node\t\tglobal_trees[TI_VA_LIST_TYPE]\n \n+#define V4SF_type_node\t\t\tglobal_trees[TI_V4SF_TYPE]\n+#define V4SI_type_node\t\t\tglobal_trees[TI_V4SI_TYPE]\n+#define V8QI_type_node\t\t\tglobal_trees[TI_V8QI_TYPE]\n+#define V4HI_type_node\t\t\tglobal_trees[TI_V4HI_TYPE]\n+#define V2SI_type_node\t\t\tglobal_trees[TI_V2SI_TYPE]\n+\n /* An enumeration of the standard C integer types.  These must be\n    ordered so that shorter types appear before longer ones.  */\n enum integer_type_kind "}]}