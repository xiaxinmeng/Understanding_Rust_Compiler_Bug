{"sha": "9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWExYmM2ZDU3ZjFkZjE4YTU1YWRhMWJkMzEyNjk5Mzk2Y2E4ZGViNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T14:57:08Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-09-10T14:57:08Z"}, "message": "[multiple changes]\n\n2010-09-10  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_ch13.adb (Check_Record_Representation_Clause): Implement record\n\tgap warnings.\n\t* sem_warn.ads, sem_warn.adb (Warn_On_Record_Holes): New warning flag.\n\t* usage.adb: Add lines for -gnatw.h/H\n\t* gnat_ugn.texi: Add documentation for J519-010\n\tWarn on record holes/gaps\n\t* ug_words: Add entries for -gnatw.h/-gnatw.H\n\t* vms_data.ads: Add entries for [NO]AVOIDGAPS\n\n2010-09-10  Gary Dismukes  <dismukes@adacore.com>\n\n\t* sem_ch6.adb: Update comment.\n\nFrom-SVN: r164186", "tree": {"sha": "ed14d7de3ef1a53dbe0e83502aded4097105d1c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed14d7de3ef1a53dbe0e83502aded4097105d1c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/comments", "author": null, "committer": null, "parents": [{"sha": "f4b049db7028a01ad082f923115e12ade77f917c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4b049db7028a01ad082f923115e12ade77f917c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4b049db7028a01ad082f923115e12ade77f917c"}], "stats": {"total": 279, "additions": 264, "deletions": 15}, "files": [{"sha": "454478fd0864f6e0ca3c8f455b6e773f4345ab53", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "patch": "@@ -1,3 +1,18 @@\n+2010-09-10  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_ch13.adb (Check_Record_Representation_Clause): Implement record\n+\tgap warnings.\n+\t* sem_warn.ads, sem_warn.adb (Warn_On_Record_Holes): New warning flag.\n+\t* usage.adb: Add lines for -gnatw.h/H\n+\t* gnat_ugn.texi: Add documentation for J519-010\n+\tWarn on record holes/gaps\n+\t* ug_words: Add entries for -gnatw.h/-gnatw.H\n+\t* vms_data.ads: Add entries for [NO]AVOIDGAPS\n+\n+2010-09-10  Gary Dismukes  <dismukes@adacore.com>\n+\n+\t* sem_ch6.adb: Update comment.\n+\n 2010-09-10  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch3.adb (Build_Derived_Private_Type): Mark generated declaration"}, {"sha": "694c5981601b40965d6127176e28944d868cd4d0", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "patch": "@@ -5056,6 +5056,7 @@ individually controlled.  The warnings that are not turned on by this\n switch are\n @option{-gnatwd} (implicit dereferencing),\n @option{-gnatwh} (hiding),\n+@option{-gnatw.h} (holes (gaps) in record layouts)\n @option{-gnatwl} (elaboration warnings),\n @option{-gnatw.o} (warn on values set by out parameters ignored)\n and @option{-gnatwt} (tracking of deleted conditional code).\n@@ -5258,6 +5259,22 @@ Note that @option{-gnatwa} does not affect the setting of this warning option.\n @cindex @option{-gnatwH} (@command{gcc})\n This switch suppresses warnings on hiding declarations.\n \n+@item -gnatw.h\n+@emph{Activate warnings on holes/gaps in records.}\n+@cindex @option{-gnatw.h} (@command{gcc})\n+@cindex Record Representation (gaps)\n+This switch activates warnings on component clauses in record\n+representation clauses that leave holes (gaps) in the record layout.\n+If this warning option is active, then record representation clauses\n+should specify a contiguous layout, adding unused fill fields if needed.\n+Note that @option{-gnatwa} does not affect the setting of this warning option.\n+\n+@item -gnatw.H\n+@emph{Suppress warnings on holes/gaps in records.}\n+@cindex @option{-gnatw.H} (@command{gcc})\n+This switch suppresses warnings on component clauses in record\n+representation clauses that leave holes (haps) in the record layout.\n+\n @item -gnatwi\n @emph{Activate warnings on implementation units.}\n @cindex @option{-gnatwi} (@command{gcc})"}, {"sha": "c24a344862e8f109d7d6587a28ffd42e59ecf03f", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 191, "deletions": 5, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "patch": "@@ -1535,9 +1535,11 @@ package body Sem_Ch13 is\n             elsif Size /= No_Uint then\n \n                if VM_Target /= No_VM and then not GNAT_Mode then\n+\n                   --  Size clause is not handled properly on VM targets.\n                   --  Display a warning unless we are in GNAT mode, in which\n                   --  case this is useless.\n+\n                   Error_Msg_N\n                     (\"?size clauses are ignored in this configuration\", N);\n                end if;\n@@ -3255,6 +3257,9 @@ package body Sem_Ch13 is\n       Overlap_Check_Required : Boolean;\n       --  Used to keep track of whether or not an overlap check is required\n \n+      Overlap_Detected : Boolean := False;\n+      --  Set True if an overlap is detected\n+\n       Ccount : Natural := 0;\n       --  Number of component clauses in record rep clause\n \n@@ -3278,6 +3283,7 @@ package body Sem_Ch13 is\n       procedure Check_Component_Overlap (C1_Ent, C2_Ent : Entity_Id) is\n          CC1 : constant Node_Id := Component_Clause (C1_Ent);\n          CC2 : constant Node_Id := Component_Clause (C2_Ent);\n+\n       begin\n          if Present (CC1) and then Present (CC2) then\n \n@@ -3309,6 +3315,7 @@ package body Sem_Ch13 is\n                   Error_Msg_Node_1 := Component_Name (CC1);\n                   Error_Msg_N\n                     (\"component& overlaps & #\", Component_Name (CC1));\n+                  Overlap_Detected := True;\n                end if;\n             end;\n          end if;\n@@ -3481,12 +3488,14 @@ package body Sem_Ch13 is\n          if Present (Comp) then\n             Ccount := Ccount + 1;\n \n+            --  We need a full overlap check if record positions non-monotonic\n+\n             if Fbit <= Max_Bit_So_Far then\n                Overlap_Check_Required := True;\n-            else\n-               Max_Bit_So_Far := Lbit;\n             end if;\n \n+            Max_Bit_So_Far := Lbit;\n+\n             --  Check bit position out of range of specified size\n \n             if Has_Size_Clause (Rectype)\n@@ -3505,6 +3514,7 @@ package body Sem_Ch13 is\n                   Error_Msg_NE\n                     (\"component overlaps tag field of&\",\n                      Component_Name (CC), Rectype);\n+                  Overlap_Detected := True;\n                end if;\n \n                if Hbit < Lbit then\n@@ -3654,8 +3664,8 @@ package body Sem_Ch13 is\n \n                --  Skip overlap check if entity has no declaration node. This\n                --  happens with discriminants in constrained derived types.\n-               --  Probably we are missing some checks as a result, but that\n-               --  does not seem terribly serious ???\n+               --  Possibly we are missing some checks as a result, but that\n+               --  does not seem terribly serious.\n \n                if No (Declaration_Node (C1_Ent)) then\n                   goto Continue_Main_Component_Loop;\n@@ -3699,7 +3709,6 @@ package body Sem_Ch13 is\n \n                   else\n                      Citem := First (Component_Items (Clist));\n-\n                      while Present (Citem) loop\n                         if Nkind (Citem) = N_Component_Declaration then\n                            C2_Ent := Defining_Identifier (Citem);\n@@ -3745,6 +3754,183 @@ package body Sem_Ch13 is\n          end Overlap_Check2;\n       end if;\n \n+      --  The following circuit deals with warning on record holes (gaps). We\n+      --  skip this check if overlap was detected, since it makes sense for the\n+      --  programmer to fix this illegality before worrying about warnings.\n+\n+      if not Overlap_Detected and Warn_On_Record_Holes then\n+         Record_Hole_Check : declare\n+            Decl : constant Node_Id := Declaration_Node (Base_Type (Rectype));\n+            --  Full declaration of record type\n+\n+            procedure Check_Component_List\n+              (CL   : Node_Id;\n+               Sbit : Uint;\n+               DS   : List_Id);\n+            --  Check component list CL for holes. The starting bit should be\n+            --  Sbit. which is zero for the main record component list and set\n+            --  appropriately for recursive calls for variants. DS is set to\n+            --  a list of discriminant specifications to be included in the\n+            --  consideration of components. It is No_List if none to consider.\n+\n+            --------------------------\n+            -- Check_Component_List --\n+            --------------------------\n+\n+            procedure Check_Component_List\n+              (CL   : Node_Id;\n+               Sbit : Uint;\n+               DS   : List_Id)\n+            is\n+               Compl : Integer;\n+\n+            begin\n+               Compl := Integer (List_Length (Component_Items (CL)));\n+\n+               if DS /= No_List then\n+                  Compl := Compl + Integer (List_Length (DS));\n+               end if;\n+\n+               declare\n+                  Comps : array (Natural range 0 .. Compl) of Entity_Id;\n+                  --  Gather components (zero entry is for sort routine)\n+\n+                  Ncomps : Natural := 0;\n+                  --  Number of entries stored in Comps (starting at Comps (1))\n+\n+                  Citem : Node_Id;\n+                  --  One component item or discriminant specification\n+\n+                  Nbit  : Uint;\n+                  --  Starting bit for next component\n+\n+                  CEnt  : Entity_Id;\n+                  --  Component entity\n+\n+                  Variant : Node_Id;\n+                  --  One variant\n+\n+                  function Lt (Op1, Op2 : Natural) return Boolean;\n+                  --  Compare routine for Sort\n+\n+                  procedure Move (From : Natural; To : Natural);\n+                  --  Move routine for Sort\n+\n+                  package Sorting is new GNAT.Heap_Sort_G (Move, Lt);\n+\n+                  --------\n+                  -- Lt --\n+                  --------\n+\n+                  function Lt (Op1, Op2 : Natural) return Boolean is\n+                  begin\n+                     return Component_Bit_Offset (Comps (Op1))\n+                       <\n+                       Component_Bit_Offset (Comps (Op2));\n+                  end Lt;\n+\n+                  ----------\n+                  -- Move --\n+                  ----------\n+\n+                  procedure Move (From : Natural; To : Natural) is\n+                  begin\n+                     Comps (To) := Comps (From);\n+                  end Move;\n+\n+               begin\n+                  --  Gather discriminants into Comp\n+\n+                  if DS /= No_List then\n+                     Citem := First (DS);\n+                     while Present (Citem) loop\n+                        if Nkind (Citem) = N_Discriminant_Specification then\n+                           declare\n+                              Ent : constant Entity_Id :=\n+                                      Defining_Identifier (Citem);\n+                           begin\n+                              if Ekind (Ent) = E_Discriminant then\n+                                 Ncomps := Ncomps + 1;\n+                                 Comps (Ncomps) := Ent;\n+                              end if;\n+                           end;\n+                        end if;\n+\n+                        Next (Citem);\n+                     end loop;\n+                  end if;\n+\n+                  --  Gather component entities into Comp\n+\n+                  Citem := First (Component_Items (CL));\n+                  while Present (Citem) loop\n+                     if Nkind (Citem) = N_Component_Declaration then\n+                        Ncomps := Ncomps + 1;\n+                        Comps (Ncomps) := Defining_Identifier (Citem);\n+                     end if;\n+\n+                     Next (Citem);\n+                  end loop;\n+\n+                  --  Now sort the component entities based on the first bit.\n+                  --  Note we already know there are no overlapping components.\n+\n+                  Sorting.Sort (Ncomps);\n+\n+                  --  Loop through entries checking for holes\n+\n+                  Nbit := Sbit;\n+                  for J in 1 .. Ncomps loop\n+                     CEnt := Comps (J);\n+                     Error_Msg_Uint_1 := Component_Bit_Offset (CEnt) - Nbit;\n+\n+                     if Error_Msg_Uint_1 > 0 then\n+                        Error_Msg_NE\n+                          (\"?^-bit gap before component&\",\n+                           Component_Name (Component_Clause (CEnt)), CEnt);\n+                     end if;\n+\n+                     Nbit := Component_Bit_Offset (CEnt) + Esize (CEnt);\n+                  end loop;\n+\n+                  --  Process variant parts recursively if present\n+\n+                  if Present (Variant_Part (CL)) then\n+                     Variant := First (Variants (Variant_Part (CL)));\n+                     while Present (Variant) loop\n+                        Check_Component_List\n+                          (Component_List (Variant), Nbit, No_List);\n+                        Next (Variant);\n+                     end loop;\n+                  end if;\n+               end;\n+            end Check_Component_List;\n+\n+         --  Start of processing for Record_Hole_Check\n+\n+         begin\n+            declare\n+               Sbit : Uint;\n+\n+            begin\n+               if Is_Tagged_Type (Rectype) then\n+                  Sbit := UI_From_Int (System_Address_Size);\n+               else\n+                  Sbit := Uint_0;\n+               end if;\n+\n+               if Nkind (Decl) = N_Full_Type_Declaration\n+                 and then Nkind (Type_Definition (Decl)) = N_Record_Definition\n+               then\n+                  Check_Component_List\n+                    (Component_List (Type_Definition (Decl)),\n+                     Sbit,\n+                     Discriminant_Specifications (Decl));\n+               end if;\n+            end;\n+         end Record_Hole_Check;\n+      end if;\n+\n       --  For records that have component clauses for all components, and whose\n       --  size is less than or equal to 32, we need to know the size in the\n       --  front end to activate possible packed array processing where the"}, {"sha": "6ffb7d88967efb1ad287f38e0bf2e73604a72865", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "patch": "@@ -5632,15 +5632,16 @@ package body Sem_Ch6 is\n \n          begin\n             --  In the case of functions with unconstrained result subtypes,\n-            --  add a 3-state formal indicating whether the return object is\n-            --  allocated by the caller (0), or should be allocated by the\n-            --  callee on the secondary stack (1) or in the global heap (2).\n-            --  For the moment we just use Natural for the type of this formal.\n-            --  Note that this formal isn't usually needed in the case where\n-            --  the result subtype is constrained, but it is needed when the\n-            --  function has a tagged result, because generally such functions\n-            --  can be called in a dispatching context and such calls must be\n-            --  handled like calls to a class-wide function.\n+            --  add a 4-state formal indicating whether the return object is\n+            --  allocated by the caller (1), or should be allocated by the\n+            --  callee on the secondary stack (2), in the global heap (3), or\n+            --  in a user-defined storage pool (4). For the moment we just use\n+            --  Natural for the type of this formal. Note that this formal\n+            --  isn't usually needed in the case where the result subtype is\n+            --  constrained, but it is needed when the function has a tagged\n+            --  result, because generally such functions can be called in a\n+            --  dispatching context and such calls must be handled like calls\n+            --  to a class-wide function.\n \n             if not Is_Constrained (Underlying_Type (Result_Subt))\n               or else Is_Tagged_Type (Underlying_Type (Result_Subt))"}, {"sha": "2a42dec384b5b87e1e5a0c5701788e3e4d40059f", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "patch": "@@ -3087,6 +3087,7 @@ package body Sem_Warn is\n             Warn_On_Overlap                     := True;\n             Warn_On_Parameter_Order             := True;\n             Warn_On_Questionable_Missing_Parens := True;\n+            Warn_On_Record_Holes                := True;\n             Warn_On_Redundant_Constructs        := True;\n             Warn_On_Reverse_Bit_Order           := True;\n             Warn_On_Unchecked_Conversion        := True;\n@@ -3098,6 +3099,12 @@ package body Sem_Warn is\n          when 'g' =>\n             Set_GNAT_Mode_Warnings;\n \n+         when 'h' =>\n+            Warn_On_Record_Holes                := True;\n+\n+         when 'H' =>\n+            Warn_On_Record_Holes                := False;\n+\n          when 'i' =>\n             Warn_On_Overlap                     := True;\n \n@@ -3262,6 +3269,7 @@ package body Sem_Warn is\n             Warn_On_Obsolescent_Feature         := False;\n             Warn_On_Overlap                     := False;\n             Warn_On_Parameter_Order             := False;\n+            Warn_On_Record_Holes                := False;\n             Warn_On_Questionable_Missing_Parens := False;\n             Warn_On_Redundant_Constructs        := False;\n             Warn_On_Reverse_Bit_Order           := False;"}, {"sha": "259a470f507b76d874103c91d62ffe6059332b8a", "filename": "gcc/ada/sem_warn.ads", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fsem_warn.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fsem_warn.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.ads?ref=9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1999-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2010, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -33,6 +33,20 @@ with Types; use Types;\n \n package Sem_Warn is\n \n+   -------------------\n+   -- Warning Flags --\n+   -------------------\n+\n+   --  These flags are activated or deactivated by -gnatw switches and control\n+   --  whether warnings of a given class will be generated or not.\n+\n+   --  Note: most of these flags are still in opt, but the plan is to move them\n+   --  here as time goes by.\n+\n+   Warn_On_Record_Holes : Boolean := False;\n+   --  Warn when explicit record component clauses leave uncovered holes (gaps)\n+   --  in a record layout. Off by default, set by -gnatw.h (but not -gnatwa).\n+\n    ------------------------\n    -- Warnings Off Table --\n    ------------------------"}, {"sha": "6090e8f68f480a0ddd7e4f4da82c1a1b60b729bd", "filename": "gcc/ada/ug_words", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fug_words", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fug_words", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fug_words?ref=9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "patch": "@@ -138,6 +138,8 @@ gcc -c          ^ GNAT COMPILE\n -gnatwG         ^ /WARNINGS=NOUNRECOGNIZED_PRAGMAS\n -gnatwh         ^ /WARNINGS=HIDING\n -gnatwH         ^ /WARNINGS=NOHIDING\n+-gnatw.h        ^ /WARNINGS=AVOIDGAPS\n+-gnatw.H        ^ /WARNINGS=NOAVOIDGAPS\n -gnatwi         ^ /WARNINGS=IMPLEMENTATION\n -gnatwI         ^ /WARNINGS=NOIMPLEMENTATION\n -gnatwj         ^ /WARNINGS=OBSOLESCENT"}, {"sha": "7df5eb06201ba65a3e091c95bd4a2b7f4281da37", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "patch": "@@ -422,6 +422,8 @@ begin\n    Write_Line (\"        G    turn off warnings for unrecognized pragma\");\n    Write_Line (\"        h    turn on warnings for hiding variable\");\n    Write_Line (\"        H*   turn off warnings for hiding variable\");\n+   Write_Line (\"        .h   turn on warnings for holes in records\");\n+   Write_Line (\"        .H*  turn off warnings for holes in records\");\n    Write_Line (\"        i*+  turn on warnings for implementation unit\");\n    Write_Line (\"        I    turn off warnings for implementation unit\");\n    Write_Line (\"        .i   turn on warnings for overlapping actuals\");"}, {"sha": "06ae3dbe8c340c6dc3b04295844e7831fb844771", "filename": "gcc/ada/vms_data.ads", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fvms_data.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a1bc6d57f1df18a55ada1bd312699396ca8deb4/gcc%2Fada%2Fvms_data.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fvms_data.ads?ref=9a1bc6d57f1df18a55ada1bd312699396ca8deb4", "patch": "@@ -2951,6 +2951,10 @@ package VMS_Data is\n                                                \"-gnatwh \"                  &\n                                             \"NOHIDING \"                    &\n                                                \"-gnatwH \"                  &\n+                                            \"AVOIDGAPS \"                   &\n+                                               \"-gnatw.h \"                 &\n+                                            \"NOAVOIDGAPS \"                 &\n+                                               \"-gnatw.H \"                 &\n                                             \"IMPLEMENTATION \"              &\n                                                \"-gnatwi \"                  &\n                                             \"NOIMPLEMENTATION \"            &"}]}