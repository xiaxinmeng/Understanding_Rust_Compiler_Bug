{"sha": "959cef7434c0383f32ff28ab012fe17d9d94a7c2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTU5Y2VmNzQzNGMwMzgzZjMyZmYyOGFiMDEyZmUxN2Q5ZDk0YTdjMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2016-07-21T13:00:32Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2016-07-21T13:00:32Z"}, "message": "re PR tree-optimization/71947 (x ^ y not folded to 0 if x == y by DOM)\n\n2016-07-21  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/71947\n\t* tree-vrp.c (extract_range_from_assert): Singleton symbolic\n\tranges have useful limit_vr information.\n\n\t* gcc.dg/tree-ssa/vrp102.c: New testcase.\n\nFrom-SVN: r238591", "tree": {"sha": "bd331a8d98f64c523d13a05c0eb435ce17dea62a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd331a8d98f64c523d13a05c0eb435ce17dea62a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/959cef7434c0383f32ff28ab012fe17d9d94a7c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/959cef7434c0383f32ff28ab012fe17d9d94a7c2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/959cef7434c0383f32ff28ab012fe17d9d94a7c2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/959cef7434c0383f32ff28ab012fe17d9d94a7c2/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88617fe425b0f01305ede58de484592c11422f22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88617fe425b0f01305ede58de484592c11422f22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88617fe425b0f01305ede58de484592c11422f22"}], "stats": {"total": 40, "additions": 36, "deletions": 4}, "files": [{"sha": "39b3690852a2667c62de3b3940358cbd516366d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959cef7434c0383f32ff28ab012fe17d9d94a7c2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959cef7434c0383f32ff28ab012fe17d9d94a7c2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=959cef7434c0383f32ff28ab012fe17d9d94a7c2", "patch": "@@ -1,3 +1,9 @@\n+2016-07-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71947\n+\t* tree-vrp.c (extract_range_from_assert): Singleton symbolic\n+\tranges have useful limit_vr information.\n+\n 2016-07-21  Richard Biener  <rguenther@suse.de>\n \n \t* function-tests.c (build_trivial_generic_function): Set"}, {"sha": "cb2f9e04103959162bcf3be866fecdf24afe24a9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959cef7434c0383f32ff28ab012fe17d9d94a7c2/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959cef7434c0383f32ff28ab012fe17d9d94a7c2/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=959cef7434c0383f32ff28ab012fe17d9d94a7c2", "patch": "@@ -1,3 +1,8 @@\n+2016-07-21  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/71947\n+\t* gcc.dg/tree-ssa/vrp102.c: New testcase.\n+\n 2016-07-21  Bin Cheng  <bin.cheng@arm.com>\n \n \t* gcc.dg/tree-ssa/scev-15.c: New."}, {"sha": "fb62e570bede628f4422e6e1819c13b459859991", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vrp102.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959cef7434c0383f32ff28ab012fe17d9d94a7c2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp102.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959cef7434c0383f32ff28ab012fe17d9d94a7c2/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp102.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvrp102.c?ref=959cef7434c0383f32ff28ab012fe17d9d94a7c2", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fno-tree-dominator-opts -fdump-tree-vrp1\" } */\n+\n+int f(int x, int y)\n+{ \n+  int ret; \n+  if (x == y)\n+    ret = x ^ y;\n+  else\n+    ret = 1;\n+\n+  return ret;\n+} \n+\n+/* We should have computed x ^ y as zero and propagated the result into the\n+   PHI feeding the result.  */\n+\n+/* { dg-final { scan-tree-dump \"ret_\\[0-9\\]+ = PHI <\\[01\\]\\\\\\(\\[0-9\\]+\\\\\\), \\[01\\]\\\\\\(\\[0-9\\]+\\\\\\)>\" \"vrp1\" } } */"}, {"sha": "06364b70f3317acc4cc9c0510b003ea36ba4946c", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/959cef7434c0383f32ff28ab012fe17d9d94a7c2/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/959cef7434c0383f32ff28ab012fe17d9d94a7c2/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=959cef7434c0383f32ff28ab012fe17d9d94a7c2", "patch": "@@ -1513,10 +1513,13 @@ extract_range_from_assert (value_range *vr_p, tree expr)\n   limit_vr = (TREE_CODE (limit) == SSA_NAME) ? get_value_range (limit) : NULL;\n \n   /* LIMIT's range is only interesting if it has any useful information.  */\n-  if (limit_vr\n-      && (limit_vr->type == VR_UNDEFINED\n-\t  || limit_vr->type == VR_VARYING\n-\t  || symbolic_range_p (limit_vr)))\n+  if (! limit_vr\n+      || limit_vr->type == VR_UNDEFINED\n+      || limit_vr->type == VR_VARYING\n+      || (symbolic_range_p (limit_vr)\n+\t  && ! (limit_vr->type == VR_RANGE\n+\t\t&& (limit_vr->min == limit_vr->max\n+\t\t    || operand_equal_p (limit_vr->min, limit_vr->max, 0)))))\n     limit_vr = NULL;\n \n   /* Initially, the new range has the same set of equivalences of"}]}