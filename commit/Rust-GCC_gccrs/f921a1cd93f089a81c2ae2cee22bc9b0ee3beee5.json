{"sha": "f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjkyMWExY2Q5M2YwODlhODFjMmFlMmNlZTIyYmM5YjBlZTNiZWVlNQ==", "commit": {"author": {"name": "Jose Ruiz", "email": "ruiz@adacore.com", "date": "2008-07-30T13:03:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2008-07-30T13:03:32Z"}, "message": "2008-07-30  Jose Ruiz  <ruiz@adacore.com>\n\n\t* adaint.c\n\t(__gnat_file_exists): Do not use __gnat_stat for RTX.\n\t(__main for RTX in RTSS mode): Create this dummy procedure symbol to\n\tavoid the use of this symbol from libgcc.a in RTX kernel mode.\n\n\t* cio.c\n\t(put_int, put_int_stderr, put_char, put_char_stderr): For RTX we call\n\tthe function RtPrintf for console output.\n\t\n\t* argv.c Do not use the environ variable for RTX.\n\t\n\t* gnatlink.adb (gnatlink): The part that handles the --RTS option has\n\tbeen moved before the call to Osint.Add_Default_Search_Dirs in order\n\tto take into account the flags in system.ads (RTX_RTSS_Kernel_Module)\n\tfrom the appropriate run time.\n\t\n\t* targparm.ads\n\t(RTX_RTSS_Kernel_Module_On_Target): Add this flag that is set to True if\n\ttarget is a RTSS module for RTX.\n\t\n\t* targparm.adb (Targparm_Tags, RTX_Str, Targparm_Str): Add tag RTX for\n\tRTX_RTSS_Kernel_Module\n\t(Get_Target_Parameters): Add processing of RTX_RTSS_Kernel_Module flag.\n\n\t* gcc-interface/Makefile.in (LIBGNAT_TARGET_PAIRS for RTX): Use gcc\n\texception handling mechanism for Windows and RTX in Win32 mode, but\n\tnot for RTX in kernel mode (RTSS).\n\t(LIBGNAT_SRCS): Remove ada.h\n\nFrom-SVN: r138305", "tree": {"sha": "c8d430dcadbd4486ea1435759e643eff045f98f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8d430dcadbd4486ea1435759e643eff045f98f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/comments", "author": {"login": "JoseRuizAdaCore", "id": 22770339, "node_id": "MDQ6VXNlcjIyNzcwMzM5", "avatar_url": "https://avatars.githubusercontent.com/u/22770339?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JoseRuizAdaCore", "html_url": "https://github.com/JoseRuizAdaCore", "followers_url": "https://api.github.com/users/JoseRuizAdaCore/followers", "following_url": "https://api.github.com/users/JoseRuizAdaCore/following{/other_user}", "gists_url": "https://api.github.com/users/JoseRuizAdaCore/gists{/gist_id}", "starred_url": "https://api.github.com/users/JoseRuizAdaCore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JoseRuizAdaCore/subscriptions", "organizations_url": "https://api.github.com/users/JoseRuizAdaCore/orgs", "repos_url": "https://api.github.com/users/JoseRuizAdaCore/repos", "events_url": "https://api.github.com/users/JoseRuizAdaCore/events{/privacy}", "received_events_url": "https://api.github.com/users/JoseRuizAdaCore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88462e8132982857e69c9e7f0d8481f8443e8bbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88462e8132982857e69c9e7f0d8481f8443e8bbc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88462e8132982857e69c9e7f0d8481f8443e8bbc"}], "stats": {"total": 350, "additions": 275, "deletions": 75}, "files": [{"sha": "29f649aa09630736329c4cdaa34a74d0f32770b9", "filename": "gcc/ada/adaint.c", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Fadaint.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Fadaint.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fadaint.c?ref=f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5", "patch": "@@ -1061,6 +1061,7 @@ __gnat_readdir (DIR *dirp, char *buffer, int *len)\n   /* Not supported in RTX */\n \n   return NULL;\n+\n #elif defined (__MINGW32__)\n   struct _tdirent *dirent = _treaddir ((_TDIR*)dirp);\n \n@@ -1606,7 +1607,7 @@ __gnat_stat (char *name, struct stat *statbuf)\n int\n __gnat_file_exists (char *name)\n {\n-#if defined (__MINGW32__) && !defined (RTX)\n+#ifdef __MINGW32__\n   /*  On Windows do not use __gnat_stat() because a bug in Microsoft\n   _stat() routine. When the system time-zone is set with a negative\n   offset the _stat() routine fails on specific files like CON:  */\n@@ -3048,11 +3049,14 @@ __gnat_sals_init_using_constructors ()\n #endif\n }\n \n+#ifdef RTX\n+\n /* In RTX mode, the procedure to get the time (as file time) is different\n    in RTSS mode and Win32 mode. In order to avoid duplicating an Ada file,\n    we introduce an intermediate procedure to link against the corresponding\n    one in each situation. */\n-#ifdef RTX\n+\n+extern void GetTimeAsFileTime(LPFILETIME pTime);\n \n void GetTimeAsFileTime(LPFILETIME pTime)\n {\n@@ -3062,6 +3066,16 @@ void GetTimeAsFileTime(LPFILETIME pTime)\n   GetSystemTimeAsFileTime (pTime); /* w32 interface */\n #endif\n }\n+\n+#ifdef RTSS\n+/* Add symbol that is required to link. It would otherwise be taken from\n+   libgcc.a and it would try to use the gcc constructors that are not\n+   supported by Microsoft linker. */\n+\n+extern void __main (void);\n+\n+void __main (void) {}\n+#endif\n #endif\n \n #if defined (linux) || defined(__GLIBC__)"}, {"sha": "0adfa4ea94894f2b36042181816d49e38d2c4f7f", "filename": "gcc/ada/argv.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Fargv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Fargv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fargv.c?ref=f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *         Copyright (C) 1992-2007, Free Software Foundation, Inc.           *\n+ *         Copyright (C) 1992-2008, Free Software Foundation, Inc.           *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -61,7 +61,7 @@ int gnat_argc = 0;\n const char **gnat_argv = (const char **) 0;\n const char **gnat_envp = (const char **) 0;\n \n-#ifdef _WIN32\n+#if defined (_WIN32) && !defined (RTX)\n /* Note that on Windows environment the environ point to a buffer that could\n    be reallocated if needed. It means that gnat_envp needs to be updated\n    before using gnat_envp to point to the right environment space */"}, {"sha": "67dcfc3dd36bce7e58a358148e8b9fe86116d0aa", "filename": "gcc/ada/cio.c", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Fcio.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Fcio.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcio.c?ref=f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *          Copyright (C) 1992-2005, Free Software Foundation, Inc.         *\n+ *          Copyright (C) 1992-2008, Free Software Foundation, Inc.         *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -56,6 +56,11 @@\n #undef getchar\n #endif\n \n+#ifdef RTX\n+#include <windows.h>\n+#include <Rtapi.h>\n+#endif\n+\n int\n get_char (void)\n {\n@@ -78,27 +83,43 @@ get_int (void)\n void\n put_int (int x)\n {\n+#ifdef RTX\n+   RtPrintf (\"%d\", x);\n+#else\n    /* Use fprintf rather than printf, since the latter is unbuffered\n       on vxworks */\n    fprintf (stdout, \"%d\", x);\n+#endif\n }\n \n void\n put_int_stderr (int x)\n {\n+#ifdef RTX\n+  RtPrintf (\"%d\", x);\n+#else\n   fprintf (stderr, \"%d\", x);\n+#endif\n }\n \n void\n put_char (int c)\n {\n+#ifdef RTX\n+  RtPrintf (\"%c\", c);\n+#else\n   putchar (c);\n+#endif\n }\n \n void\n put_char_stderr (int c)\n {\n+#ifdef RTX\n+  RtPrintf (\"%c\", c);\n+#else\n   fputc (c, stderr);\n+#endif\n }\n \n #ifdef __vxworks"}, {"sha": "a8c0c1bbb2512691e85ad6ca67811840093ad539", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5", "patch": "@@ -1326,13 +1326,20 @@ ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)\n     s-intman.adb<s-intman-dummy.adb \\\n     s-osinte.ads<s-osinte-rtx.ads \\\n     s-osprim.adb<s-osprim-rtx.adb \\\n-    s-taprop.adb<s-taprop-rtx.adb \\\n-    system.ads<system-rtx.ads\n+    s-taprop.adb<s-taprop-rtx.adb\n \n     EXTRA_GNATRTL_NONTASKING_OBJS = s-win32.o\n \n-    MISCLIB = -lwsock32 -lrtapi_w32\n-    THREADSLIB=-lrtapi_w32\n+    ifeq ($(strip $(filter-out rtx_w32,$(THREAD_KIND))),)\n+       LIBGNAT_TARGET_PAIRS += system.ads<system-rtx.ads\n+\n+       EH_MECHANISM=-gcc\n+    else\n+       LIBGNAT_TARGET_PAIRS += system.ads<system-rtx-rtss.ads\n+\n+       EH_MECHANISM=\n+    endif\n+\n   else\n     LIBGNAT_TARGET_PAIRS += \\\n     a-exetim.adb<a-exetim-mingw.adb \\\n@@ -1354,13 +1361,14 @@ ifeq ($(strip $(filter-out cygwin32% mingw32% pe,$(osys))),)\n     # ??? This will be replaced by gnatlib-shared-dual-win32 when GNAT\n     # auto-import support for array/record will be done.\n     GNATLIB_SHARED = gnatlib-shared-win32\n+\n+    EH_MECHANISM=-gcc\n   endif\n \n   TOOLS_TARGET_PAIRS= \\\n   mlib-tgt-specific.adb<mlib-tgt-specific-mingw.adb \\\n   indepsw.adb<indepsw-mingw.adb\n \n-  EH_MECHANISM=-gcc\n   GMEM_LIB = gmemlib\n   PREFIX_OBJS = $(PREFIX_REAL_OBJS)\n   EXTRA_GNATTOOLS = ../../gnatdll$(exeext)\n@@ -1706,7 +1714,7 @@ endif\n # while GNATRTL_OBJS lists the object files compiled from Ada sources that\n # go into the directory.  The pthreads emulation is built in the threads\n # subdirectory and copied.\n-LIBGNAT_SRCS = ada.h adaint.c adaint.h argv.c cio.c cstreams.c \\\n+LIBGNAT_SRCS = adaint.c adaint.h argv.c cio.c cstreams.c \\\n   errno.c exit.c cal.c ctrl_c.c env.c env.h \\\n   raise.h raise.c sysdep.c aux-io.c init.c initialize.c seh_init.c \\\n   final.c tracebak.c tb-alvms.c tb-alvxw.c tb-gcc.c expect.c mkdir.c \\"}, {"sha": "c9b496c0ee8ad15ca56d3426c989a040444d85c0", "filename": "gcc/ada/gnatlink.adb", "status": "modified", "additions": 213, "deletions": 63, "changes": 276, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Fgnatlink.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Fgnatlink.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatlink.adb?ref=f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5", "patch": "@@ -1484,76 +1484,18 @@ begin\n       Exit_Program (E_Fatal);\n    end if;\n \n-   --  Get target parameters\n+   --  Initialize packages to be used\n \n    Namet.Initialize;\n    Csets.Initialize;\n    Snames.Initialize;\n-   Osint.Add_Default_Search_Dirs;\n-   Targparm.Get_Target_Parameters;\n-\n-   if VM_Target /= No_VM then\n-      case VM_Target is\n-         when JVM_Target => Gcc := new String'(\"jgnat\");\n-         when CLI_Target => Gcc := new String'(\"dotnet-gnatcompile\");\n-         when No_VM      => raise Program_Error;\n-      end case;\n-\n-      Ada_Bind_File := True;\n-      Begin_Info := \"--  BEGIN Object file/option list\";\n-      End_Info   := \"--  END Object file/option list   \";\n-   end if;\n \n    --  We always compile with -c\n \n    Binder_Options_From_ALI.Increment_Last;\n    Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n      new String'(\"-c\");\n \n-   --  If the main program is in Ada it is compiled with the following\n-   --  switches:\n-\n-   --    -gnatA   stops reading gnat.adc, since we don't know what\n-   --             pragmas would work, and we do not need it anyway.\n-\n-   --    -gnatWb  allows brackets coding for wide characters\n-\n-   --    -gnatiw  allows wide characters in identifiers. This is needed\n-   --             because bindgen uses brackets encoding for all upper\n-   --             half and wide characters in identifier names.\n-\n-   if Ada_Bind_File then\n-      Binder_Options_From_ALI.Increment_Last;\n-      Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n-        new String'(\"-gnatA\");\n-      Binder_Options_From_ALI.Increment_Last;\n-      Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n-        new String'(\"-gnatWb\");\n-      Binder_Options_From_ALI.Increment_Last;\n-      Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n-        new String'(\"-gnatiw\");\n-   end if;\n-\n-   --  Locate all the necessary programs and verify required files are present\n-\n-   Gcc_Path := System.OS_Lib.Locate_Exec_On_Path (Gcc.all);\n-\n-   if Gcc_Path = null then\n-      Exit_With_Error (\"Couldn't locate \" & Gcc.all);\n-   end if;\n-\n-   if Linker_Path = null then\n-      if VM_Target = CLI_Target then\n-         Linker_Path := System.OS_Lib.Locate_Exec_On_Path (\"ilasm\");\n-\n-         if Linker_Path = null then\n-            Exit_With_Error (\"Couldn't locate ilasm\");\n-         end if;\n-      else\n-         Linker_Path := Gcc_Path;\n-      end if;\n-   end if;\n-\n    if Ali_File_Name = null then\n       Exit_With_Error (\"no ali file given for link\");\n    end if;\n@@ -1624,6 +1566,18 @@ begin\n                             := String_Access (Arg);\n                      end if;\n \n+                     --  Set the RTS_*_Path_Name variables, so that the\n+                     --  correct directories will be set when\n+                     --  Osint.Add_Default_Search_Dirs will be called later.\n+\n+                     Opt.RTS_Src_Path_Name :=\n+                       Get_RTS_Search_Dir\n+                         (Arg (Arg'First + 6 .. Arg'Last), Include);\n+\n+                     Opt.RTS_Lib_Path_Name :=\n+                       Get_RTS_Search_Dir\n+                         (Arg (Arg'First + 6 .. Arg'Last), Objects);\n+\n                      --  GNAT doesn't support the GCC multilib mechanism.\n                      --  This means that, when a multilib switch is used\n                      --  to request a particular compilation mode, the\n@@ -1635,8 +1589,7 @@ begin\n \n                      --  Pass -mrtp to the linker if --RTS=rtp was passed\n \n-                     if Linker_Path = Gcc_Path\n-                       and then Arg'Length > 8\n+                     if Arg'Length > 8\n                        and then Arg (Arg'First + 6 .. Arg'First + 8) = \"rtp\"\n                      then\n                         Linker_Options.Increment_Last;\n@@ -1645,8 +1598,7 @@ begin\n \n                      --  Pass -fsjlj to the linker if --RTS=sjlj was passed\n \n-                     elsif Linker_Path = Gcc_Path\n-                       and then Arg'Length > 9\n+                     elsif Arg'Length > 9\n                        and then Arg (Arg'First + 6 .. Arg'First + 9) = \"sjlj\"\n                      then\n                         Linker_Options.Increment_Last;\n@@ -1660,6 +1612,77 @@ begin\n       end;\n    end if;\n \n+   --  Get target parameters\n+\n+   Osint.Add_Default_Search_Dirs;\n+   Targparm.Get_Target_Parameters;\n+\n+   if VM_Target /= No_VM then\n+      case VM_Target is\n+         when JVM_Target => Gcc := new String'(\"jgnat\");\n+         when CLI_Target => Gcc := new String'(\"dotnet-gnatcompile\");\n+         when No_VM      => raise Program_Error;\n+      end case;\n+\n+      Ada_Bind_File := True;\n+      Begin_Info := \"--  BEGIN Object file/option list\";\n+      End_Info   := \"--  END Object file/option list   \";\n+   end if;\n+\n+   --  If the main program is in Ada it is compiled with the following\n+   --  switches:\n+\n+   --    -gnatA   stops reading gnat.adc, since we don't know what\n+   --             pragmas would work, and we do not need it anyway.\n+\n+   --    -gnatWb  allows brackets coding for wide characters\n+\n+   --    -gnatiw  allows wide characters in identifiers. This is needed\n+   --             because bindgen uses brackets encoding for all upper\n+   --             half and wide characters in identifier names.\n+\n+   if Ada_Bind_File then\n+      Binder_Options_From_ALI.Increment_Last;\n+      Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n+        new String'(\"-gnatA\");\n+      Binder_Options_From_ALI.Increment_Last;\n+      Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n+        new String'(\"-gnatWb\");\n+      Binder_Options_From_ALI.Increment_Last;\n+      Binder_Options_From_ALI.Table (Binder_Options_From_ALI.Last) :=\n+        new String'(\"-gnatiw\");\n+   end if;\n+\n+   --  Locate all the necessary programs and verify required files are present\n+\n+   Gcc_Path := System.OS_Lib.Locate_Exec_On_Path (Gcc.all);\n+\n+   if Gcc_Path = null then\n+      Exit_With_Error (\"Couldn't locate \" & Gcc.all);\n+   end if;\n+\n+   if Linker_Path = null then\n+      if VM_Target = CLI_Target then\n+         Linker_Path := System.OS_Lib.Locate_Exec_On_Path (\"ilasm\");\n+\n+         if Linker_Path = null then\n+            Exit_With_Error (\"Couldn't locate ilasm\");\n+         end if;\n+\n+      elsif RTX_RTSS_Kernel_Module_On_Target then\n+         --  Use Microsoft linker for RTSS modules\n+\n+         Linker_Path := System.OS_Lib.Locate_Exec_On_Path (\"link\");\n+\n+         if Linker_Path = null then\n+            Exit_With_Error (\"Couldn't locate link\");\n+         end if;\n+\n+      else\n+         Linker_Path := Gcc_Path;\n+      end if;\n+   end if;\n+\n    Write_Header;\n \n    --  If no output name specified, then use the base name of .ali file name\n@@ -1680,6 +1703,11 @@ begin\n          Linker_Options.Table (Linker_Options.Last) :=\n            new String'(\"/OUTPUT=\" & Output_File_Name.all);\n \n+      elsif RTX_RTSS_Kernel_Module_On_Target then\n+         Linker_Options.Increment_Last;\n+         Linker_Options.Table (Linker_Options.Last) :=\n+           new String'(\"/OUT:\" & Output_File_Name.all);\n+\n       else\n          Linker_Options.Increment_Last;\n          Linker_Options.Table (Linker_Options.Last) := new String'(\"-o\");\n@@ -1869,6 +1897,119 @@ begin\n                   Num_Args := Num_Args - 1;\n                end if;\n             end loop;\n+\n+         elsif RTX_RTSS_Kernel_Module_On_Target then\n+            --  Remove flags not relevant for Microsoft linker and adapt some\n+            --  others.\n+\n+            for J in reverse Linker_Options.First .. Linker_Options.Last loop\n+\n+               --  Remove flags that are not accepted\n+               if Linker_Options.Table (J)'Length = 0\n+                 or else Linker_Options.Table (J) (1 .. 2) = \"-l\"\n+                 or else Linker_Options.Table (J) (1 .. 3) = \"-Wl\"\n+                 or else Linker_Options.Table (J) (1 .. 3) = \"-sh\"\n+                 or else Linker_Options.Table (J) (1 .. 8) = \"-Xlinker\"\n+                 or else Linker_Options.Table (J) (1 .. 9) = \"-mthreads\"\n+               then\n+                  Linker_Options.Table (J .. Linker_Options.Last - 1) :=\n+                    Linker_Options.Table (J + 1 .. Linker_Options.Last);\n+                  Linker_Options.Decrement_Last;\n+                  Num_Args := Num_Args - 1;\n+\n+               --  Replace \"-L\" by its counterpart \"/LIBPATH:\" and UNIX \"/\" by\n+               --  Windows \"\\\".\n+               elsif Linker_Options.Table (J) (1 .. 2) = \"-L\" then\n+                  declare\n+                     Libpath_Option : constant String_Access := new String'\n+                       (\"/LIBPATH:\" &\n+                        Linker_Options.Table (J)\n+                          (3 .. Linker_Options.Table (J).all'Last));\n+                  begin\n+                     for Index in 10 .. Libpath_Option'Last loop\n+                        if Libpath_Option (Index) = '/' then\n+                           Libpath_Option (Index) := '\\';\n+                        end if;\n+                     end loop;\n+\n+                     Linker_Options.Table (J) := Libpath_Option;\n+                  end;\n+\n+               --  Replace \"-g\" by \"/DEBUG\"\n+               elsif Linker_Options.Table (J) (1 .. 2) = \"-g\" then\n+                  Linker_Options.Table (J) := new String'(\"/DEBUG\");\n+\n+               --  Replace \"-o\" by \"/OUT:\"\n+               elsif Linker_Options.Table (J) (1 .. 2) = \"-o\" then\n+                  Linker_Options.Table (J + 1) := new String'\n+                    (\"/OUT:\" & Linker_Options.Table (J + 1).all);\n+\n+                  Linker_Options.Table (J .. Linker_Options.Last - 1) :=\n+                    Linker_Options.Table (J + 1 .. Linker_Options.Last);\n+                  Linker_Options.Decrement_Last;\n+                  Num_Args := Num_Args - 1;\n+\n+               --  Replace \"--stack=\" by \"/STACK:\"\n+               elsif Linker_Options.Table (J) (1 .. 8) = \"--stack=\" then\n+                  Linker_Options.Table (J) := new String'\n+                    (\"/STACK:\" &\n+                     Linker_Options.Table (J)\n+                       (9 .. Linker_Options.Table (J).all'Last));\n+\n+               --  Replace \"-v\" by its counterpart \"/VERBOSE\"\n+               elsif Linker_Options.Table (J) (1 .. 2) = \"-v\" then\n+                  Linker_Options.Table (J) := new String'(\"/VERBOSE\");\n+               end if;\n+            end loop;\n+\n+            --  Add some required flags to create RTSS modules\n+\n+            declare\n+               Flags_For_Linker : constant array (1 .. 17) of String_Access :=\n+                 (new String'(\"/NODEFAULTLIB\"),\n+                  new String'(\"/INCREMENTAL:NO\"),\n+                  new String'(\"/NOLOGO\"),\n+                  new String'(\"/DRIVER\"),\n+                  new String'(\"/ALIGN:0x20\"),\n+                  new String'(\"/SUBSYSTEM:NATIVE\"),\n+                  new String'(\"/ENTRY:_RtapiProcessEntryCRT@8\"),\n+                  new String'(\"/RELEASE\"),\n+                  new String'(\"startupCRT.obj\"),\n+                  new String'(\"rtxlibcmt.lib\"),\n+                  new String'(\"oldnames.lib\"),\n+                  new String'(\"rtapi_rtss.lib\"),\n+                  new String'(\"Rtx_Rtss.lib\"),\n+                  new String'(\"libkernel32.a\"),\n+                  new String'(\"libws2_32.a\"),\n+                  new String'(\"libmswsock.a\"),\n+                  new String'(\"libadvapi32.a\"));\n+               --  These flags need to be passed to Microsoft linker. They\n+               --  come from the RTX documentation.\n+\n+               Gcc_Lib_Path : constant String_Access := new String'\n+                 (\"/LIBPATH:\" & Include_Dir_Default_Prefix & \"\\..\\\");\n+               --  Place to look for gcc related libraries, such as libgcc\n+\n+            begin\n+               --  Replace UNIX \"/\" by Windows \"\\\" in the path\n+\n+               for Index in 10 .. Gcc_Lib_Path.all'Last loop\n+                  if Gcc_Lib_Path (Index) = '/' then\n+                     Gcc_Lib_Path (Index) := '\\';\n+                  end if;\n+               end loop;\n+\n+               Linker_Options.Increment_Last;\n+               Linker_Options.Table (Linker_Options.Last) := Gcc_Lib_Path;\n+               Num_Args := Num_Args + 1;\n+\n+               for Index in Flags_For_Linker'Range loop\n+                  Linker_Options.Increment_Last;\n+                  Linker_Options.Table (Linker_Options.Last) :=\n+                    Flags_For_Linker (Index);\n+                  Num_Args := Num_Args + 1;\n+               end loop;\n+            end;\n          end if;\n \n          --  Remove duplicate stack size setting from the Linker_Options\n@@ -1978,6 +2119,15 @@ begin\n                   Linker_Options.Table (Linker_Options.Last) := Static_Libgcc;\n                   Num_Args := Num_Args + 1;\n                end if;\n+\n+            elsif RTX_RTSS_Kernel_Module_On_Target then\n+\n+               --  Force the use of the static libgcc for RTSS modules\n+\n+               Linker_Options.Increment_Last;\n+               Linker_Options.Table (Linker_Options.Last) :=\n+                 new String'(\"libgcc.a\");\n+               Num_Args := Num_Args + 1;\n             end if;\n \n          end Clean_Link_Option_Set;"}, {"sha": "52bbbcb953cfe7144189693eb90e3f442180aae2", "filename": "gcc/ada/targparm.adb", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Ftargparm.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Ftargparm.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.adb?ref=f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1999-2007, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1999-2008, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -54,6 +54,7 @@ package body Targparm is\n       MOV,  --   Machine_Overflows\n       MRN,  --   Machine_Rounds\n       PAS,  --   Preallocated_Stacks\n+      RTX,  --   RTX_RTSS_Kernel_Module\n       S64,  --   Support_64_Bit_Divides\n       SAG,  --   Support_Aggregates\n       SCA,  --   Support_Composite_Assign\n@@ -90,6 +91,7 @@ package body Targparm is\n    MOV_Str : aliased constant Source_Buffer := \"Machine_Overflows\";\n    MRN_Str : aliased constant Source_Buffer := \"Machine_Rounds\";\n    PAS_Str : aliased constant Source_Buffer := \"Preallocated_Stacks\";\n+   RTX_Str : aliased constant Source_Buffer := \"RTX_RTSS_Kernel_Module\";\n    S64_Str : aliased constant Source_Buffer := \"Support_64_Bit_Divides\";\n    SAG_Str : aliased constant Source_Buffer := \"Support_Aggregates\";\n    SCA_Str : aliased constant Source_Buffer := \"Support_Composite_Assign\";\n@@ -126,6 +128,7 @@ package body Targparm is\n       MOV_Str'Access,\n       MRN_Str'Access,\n       PAS_Str'Access,\n+      RTX_Str'Access,\n       S64_Str'Access,\n       SAG_Str'Access,\n       SCA_Str'Access,\n@@ -573,6 +576,7 @@ package body Targparm is\n                      when MOV => Machine_Overflows_On_Target         := Result;\n                      when MRN => Machine_Rounds_On_Target            := Result;\n                      when PAS => Preallocated_Stacks_On_Target       := Result;\n+                     when RTX => RTX_RTSS_Kernel_Module_On_Target    := Result;\n                      when S64 => Support_64_Bit_Divides_On_Target    := Result;\n                      when SAG => Support_Aggregates_On_Target        := Result;\n                      when SCA => Support_Composite_Assign_On_Target  := Result;"}, {"sha": "97192a56143a3bbe8fa878b5aedbc2c2ab078a2c", "filename": "gcc/ada/targparm.ads", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Ftargparm.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5/gcc%2Fada%2Ftargparm.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ftargparm.ads?ref=f921a1cd93f089a81c2ae2cee22bc9b0ee3beee5", "patch": "@@ -216,6 +216,9 @@ package Targparm is\n    OpenVMS_On_Target : Boolean := False;\n    --  Set to True if target is OpenVMS\n \n+   RTX_RTSS_Kernel_Module_On_Target : Boolean := False;\n+   --  Set to True if target is RTSS module for RTX\n+\n    type Virtual_Machine_Kind is (No_VM, JVM_Target, CLI_Target);\n    VM_Target : Virtual_Machine_Kind := No_VM;\n    --  Kind of virtual machine targetted"}]}