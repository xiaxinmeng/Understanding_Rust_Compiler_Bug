{"sha": "357b7604e55516bd3e1f44d1670d2248478a9b57", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU3Yjc2MDRlNTU1MTZiZDNlMWY0NGQxNjcwZDIyNDg0NzhhOWI1Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:53:37Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-08-30T11:53:37Z"}, "message": "Add some changelog entries that went astray during the machmode commits\n\nFrom-SVN: r251529", "tree": {"sha": "075c49cdaef91b765157464b60bf8a7342a14198", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/075c49cdaef91b765157464b60bf8a7342a14198"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/357b7604e55516bd3e1f44d1670d2248478a9b57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357b7604e55516bd3e1f44d1670d2248478a9b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/357b7604e55516bd3e1f44d1670d2248478a9b57", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/357b7604e55516bd3e1f44d1670d2248478a9b57/comments", "author": null, "committer": null, "parents": [{"sha": "a97390bf6e92f6f9b0f4e20aff4390ca5c609e37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a97390bf6e92f6f9b0f4e20aff4390ca5c609e37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a97390bf6e92f6f9b0f4e20aff4390ca5c609e37"}], "stats": {"total": 138, "additions": 138, "deletions": 0}, "files": [{"sha": "de0203bce302e0aeef3fbd7cc827ef2c6146cc25", "filename": "gcc/ChangeLog", "status": "modified", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357b7604e55516bd3e1f44d1670d2248478a9b57/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357b7604e55516bd3e1f44d1670d2248478a9b57/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=357b7604e55516bd3e1f44d1670d2248478a9b57", "patch": "@@ -589,6 +589,18 @@\n \tclasses.  Handle CONST_INT_P first and then check whether X\n \talso has a scalar integer mode.\n \n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* expr.c (widest_int_mode_for_size): Make the comment match the code.\n+\tReturn a scalar_int_mode and assert that the size is greater than\n+\tone byte.\n+\t(by_pieces_ninsns): Update accordingly and remove VOIDmode handling.\n+\t(op_by_pieces_d::op_by_pieces_d): Likewise.\n+\t(op_by_pieces_d::run): Likewise.\n+\t(can_store_by_pieces): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>\n@@ -694,6 +706,89 @@\n \t* expmed.c (emit_cstore): Expect the target of the cstore to be\n \ta scalar_int_mode.\n \n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* cfgloop.h (rtx_iv): Change type of extend_mode and mode to\n+\tscalar_int_mode.\n+\t(niter_desc): Likewise mode.\n+\t(iv_analyze): Add a mode parameter.\n+\t(biv_p): Likewise.\n+\t(iv_analyze_expr): Pass the mode paraeter before the rtx it describes\n+\tand change its type to scalar_int_mode.\n+\t* loop-iv.c: Update commentary at head of file.\n+\t(iv_constant): Pass the mode paraeter before the rtx it describes\n+\tand change its type to scalar_int_mode.  Remove VOIDmode handling.\n+\t(iv_subreg): Change the type of the mode parameter to scalar_int_mode.\n+\t(iv_extend): Likewise.\n+\t(shorten_into_mode): Likewise.\n+\t(iv_add): Use scalar_int_mode.\n+\t(iv_mult): Likewise.\n+\t(iv_shift): Likewise.\n+\t(canonicalize_iv_subregs): Likewise.\n+\t(get_biv_step_1): Pass the outer_mode parameter before the rtx\n+\tit describes and change its mode to scalar_int_mode.   Also change\n+\tthe type of the returned inner_mode to scalar_int_mode.\n+\t(get_biv_step): Likewise, turning outer_mode from a pointer\n+\tinto a direct parameter.  Update call to get_biv_step_1.\n+\t(iv_analyze_biv): Add an outer_mode parameter.  Update calls to\n+\tiv_constant and get_biv_step.\n+\t(iv_analyze_expr): Pass the mode parameter before the rtx it describes\n+\tand change its type to scalar_int_mode.  Don't initialise iv->mode\n+\tto VOIDmode and remove later checks for its still being VOIDmode.\n+\tUpdate calls to iv_analyze_op and iv_analyze_expr.  Check\n+\tis_a <scalar_int_mode> when changing the mode under consideration.\n+\t(iv_analyze_def): Ignore registers that don't have a scalar_int_mode.\n+\tUpdate call to iv_analyze_expr.\n+\t(iv_analyze_op): Add a mode parameter.  Reject subregs whose\n+\tinner register is not also a scalar_int_mode.  Update call to\n+\tiv_analyze_biv.\n+\t(iv_analyze): Add a mode parameter.  Update call to iv_analyze_op.\n+\t(biv_p): Add a mode parameter.  Update call to iv_analyze_biv.\n+\t(iv_number_of_iterations): Use is_a <scalar_int_mode> instead of\n+\tseparate mode class checks.  Update calls to iv_analyze.  Remove\n+\tfix-up of VOIDmodes after iv_analyze_biv.\n+\t* loop-unroll.c (analyze_iv_to_split_insn): Reject registers that\n+\tdon't have a scalar_int_mode.  Update call to biv_p.\n+\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* cfgexpand.c (convert_debug_memory_address): Use\n+\tas_a <scalar_int_mode>.\n+\t* combine.c (expand_compound_operation): Likewise.\n+\t(make_extraction): Likewise.\n+\t(change_zero_ext): Likewise.\n+\t(simplify_comparison): Likewise.\n+\t* cse.c (cse_insn): Likewise.\n+\t* dwarf2out.c (minmax_loc_descriptor): Likewise.\n+\t(mem_loc_descriptor): Likewise.\n+\t(loc_descriptor): Likewise.\n+\t* expmed.c (init_expmed_one_mode): Likewise.\n+\t(synth_mult): Likewise.\n+\t(emit_store_flag_1): Likewise.\n+\t(expand_divmod): Likewise.  Use HWI_COMPUTABLE_MODE_P instead\n+\tof a comparison with size.\n+\t* expr.c (expand_assignment): Use as_a <scalar_int_mode>.\n+\t(reduce_to_bit_field_precision): Likewise.\n+\t* function.c (expand_function_end): Likewise.\n+\t* internal-fn.c (expand_arith_overflow_result_store): Likewise.\n+\t* loop-doloop.c (doloop_modify): Likewise.\n+\t* optabs.c (expand_binop): Likewise.\n+\t(expand_unop): Likewise.\n+\t(expand_copysign_absneg): Likewise.\n+\t(prepare_cmp_insn): Likewise.\n+\t(maybe_legitimize_operand): Likewise.\n+\t* recog.c (const_scalar_int_operand): Likewise.\n+\t* rtlanal.c (get_address_mode): Likewise.\n+\t* simplify-rtx.c (simplify_unary_operation_1): Likewise.\n+\t(simplify_cond_clz_ctz): Likewise.\n+\t* tree-nested.c (get_nl_goto_field): Likewise.\n+\t* tree.c (build_vector_type_for_mode): Likewise.\n+\t* var-tracking.c (use_narrower_mode): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>\n@@ -749,6 +844,17 @@\n \tLikewise.\n \t* tree-vrp.c (simplify_float_conversion_using_ranges): Likewise.\n \n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* postreload.c (move2add_valid_value_p): Change the type of the\n+\tmode parameter to scalar_int_mode.\n+\t(move2add_use_add2_insn): Add a mode parameter and use it instead\n+\tof GET_MODE (reg).\n+\t(move2add_use_add3_insn): Likewise.\n+\t(reload_cse_move2add): Update accordingly.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>\n@@ -826,6 +932,26 @@\n \t* loop-invariant.c (canonicalize_address_mult): Likewise.\n \t* simplify-rtx.c (simplify_unary_operation_1): Likewise.\n \n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* gimple-fold.c (gimple_fold_builtin_memory_op): Use\n+\tis_a <scalar_int_mode> instead of != BLKmode.\n+\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* cfgexpand.c (expand_debug_expr): Use is_a <scalar_int_mode>\n+\tinstead of != VOIDmode.\n+\t* combine.c (if_then_else_cond): Likewise.\n+\t(change_zero_ext): Likewise.\n+\t* dwarf2out.c (mem_loc_descriptor): Likewise.\n+\t(loc_descriptor): Likewise.\n+\t* rtlanal.c (canonicalize_condition): Likewise.\n+\t* simplify-rtx.c (simplify_relational_operation_1): Likewise.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "d95a9773170115b1c9bb7c9adc63c3803a943b1e", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357b7604e55516bd3e1f44d1670d2248478a9b57/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357b7604e55516bd3e1f44d1670d2248478a9b57/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=357b7604e55516bd3e1f44d1670d2248478a9b57", "patch": "@@ -20,6 +20,12 @@\n \t* c-lex.c (interpret_fixed): Use SCALAR_TYPE_MODE.\n \t* c-common.c (c_build_vec_perm_expr): Likewise.\n \n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* c-common.c (c_common_type_for_mode): Use as_a <scalar_int_mode>.\n+\n 2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "1911e84d1ca9152abee49d58f67e42ed9e664b16", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/357b7604e55516bd3e1f44d1670d2248478a9b57/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/357b7604e55516bd3e1f44d1670d2248478a9b57/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=357b7604e55516bd3e1f44d1670d2248478a9b57", "patch": "@@ -1,3 +1,9 @@\n+2017-08-30  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* lto-lang.c (lto_type_for_mode): Use as_a <scalar_int_mode>.\n+\n 2017-08-21  Richard Biener  <rguenther@suse.de>\n \n         * lto.c (unify_scc): Truncate DIE reference queue for dropped SCCs."}]}