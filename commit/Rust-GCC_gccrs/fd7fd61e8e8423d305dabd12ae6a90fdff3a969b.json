{"sha": "fd7fd61e8e8423d305dabd12ae6a90fdff3a969b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQ3ZmQ2MWU4ZTg0MjNkMzA1ZGFiZDEyYWU2YTkwZmRmZjNhOTY5Yg==", "commit": {"author": {"name": "Andreas Jaeger", "email": "aj@suse.de", "date": "2003-01-26T09:24:35Z"}, "committer": {"name": "Andreas Jaeger", "email": "aj@gcc.gnu.org", "date": "2003-01-26T09:24:35Z"}, "message": "* df.c: Remove prototype of unused function df_regno_rtl_debug.\n\nFrom-SVN: r61833", "tree": {"sha": "454edab29b6aa52b3aa8814553673a7051bc686e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/454edab29b6aa52b3aa8814553673a7051bc686e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd7fd61e8e8423d305dabd12ae6a90fdff3a969b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7fd61e8e8423d305dabd12ae6a90fdff3a969b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd7fd61e8e8423d305dabd12ae6a90fdff3a969b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd7fd61e8e8423d305dabd12ae6a90fdff3a969b/comments", "author": {"login": "ajaeger", "id": 16867, "node_id": "MDQ6VXNlcjE2ODY3", "avatar_url": "https://avatars.githubusercontent.com/u/16867?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ajaeger", "html_url": "https://github.com/ajaeger", "followers_url": "https://api.github.com/users/ajaeger/followers", "following_url": "https://api.github.com/users/ajaeger/following{/other_user}", "gists_url": "https://api.github.com/users/ajaeger/gists{/gist_id}", "starred_url": "https://api.github.com/users/ajaeger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ajaeger/subscriptions", "organizations_url": "https://api.github.com/users/ajaeger/orgs", "repos_url": "https://api.github.com/users/ajaeger/repos", "events_url": "https://api.github.com/users/ajaeger/events{/privacy}", "received_events_url": "https://api.github.com/users/ajaeger/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88e83acbf986240724c6236caf17a8ca2c4b9af2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88e83acbf986240724c6236caf17a8ca2c4b9af2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88e83acbf986240724c6236caf17a8ca2c4b9af2"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "a4cf9c56b5f78ef288f803307c4036eff9bfc76c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd7fd61e8e8423d305dabd12ae6a90fdff3a969b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd7fd61e8e8423d305dabd12ae6a90fdff3a969b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fd7fd61e8e8423d305dabd12ae6a90fdff3a969b", "patch": "@@ -1,3 +1,7 @@\n+2003-01-26  Andreas Jaeger  <aj@suse.de>\n+\n+\t* df.c: Remove prototype of unused function df_regno_rtl_debug.\n+\n 2003-01-26  Alexandre Oliva  <aoliva@redhat.com>\n \n \t* Makefile.in (FPBIT_FUNCS): Added _sf_to_tf."}, {"sha": "cce6a3c03ecfa0b91cf32a62bbdb1e8b71497e14", "filename": "gcc/df.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd7fd61e8e8423d305dabd12ae6a90fdff3a969b/gcc%2Fdf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd7fd61e8e8423d305dabd12ae6a90fdff3a969b/gcc%2Fdf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdf.c?ref=fd7fd61e8e8423d305dabd12ae6a90fdff3a969b", "patch": "@@ -151,16 +151,16 @@ Similarly, should the first entry in the use list be the last use\n Often the whole CFG does not need to be analyzed, for example,\n when optimising a loop, only certain registers are of interest.\n Perhaps there should be a bitmap argument to df_analyse to specify\n-which registers should be analyzed?   \n+which registers should be analyzed?\n \n \n NOTES:\n \n Embedded addressing side-effects, such as POST_INC or PRE_INC, generate\n-both a use and a def.  These are both marked read/write to show that they \n+both a use and a def.  These are both marked read/write to show that they\n are dependent. For example, (set (reg 40) (mem (post_inc (reg 42))))\n-will generate a use of reg 42 followed by a def of reg 42 (both marked \n-read/write).  Similarly, (set (reg 40) (mem (pre_dec (reg 41)))) \n+will generate a use of reg 42 followed by a def of reg 42 (both marked\n+read/write).  Similarly, (set (reg 40) (mem (pre_dec (reg 41))))\n generates a use of reg 41 then a def of reg 41 (both marked read/write),\n even though reg 41 is decremented before it is used for the memory\n address in this second example.\n@@ -290,7 +290,6 @@ static struct ref *df_bb_insn_regno_first_def_find PARAMS((struct df *,\n static void df_chain_dump PARAMS((struct df_link *, FILE *file));\n static void df_chain_dump_regno PARAMS((struct df_link *, FILE *file));\n static void df_regno_debug PARAMS ((struct df *, unsigned int, FILE *));\n-static void df_regno_rtl_debug PARAMS ((struct df *, unsigned int, FILE *));\n static void df_ref_debug PARAMS ((struct df *, struct ref *, FILE *));\n static void df_rd_transfer_function PARAMS ((int, int *, bitmap, bitmap,\n \t\t\t\t\t     bitmap, bitmap, void *));"}]}