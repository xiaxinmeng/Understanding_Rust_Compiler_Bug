{"sha": "ae5543e66213b694f07474cc98fba9d4c5b0defc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWU1NTQzZTY2MjEzYjY5NGYwNzQ3NGNjOThmYmE5ZDRjNWIwZGVmYw==", "commit": {"author": {"name": "Ed Smith-Rowland", "email": "3dw4rd@verizon.net", "date": "2013-10-23T00:09:19Z"}, "committer": {"name": "Edward Smith-Rowland", "email": "emsr@gcc.gnu.org", "date": "2013-10-23T00:09:19Z"}, "message": "Implement N3779 - User-defined Literals for std::complex, part 2 of UDL for Standard Library Types\n\n2013-09-27  Ed Smith-Rowland  <3dw4rd@verizon.net>\n\n\tImplement N3779 - User-defined Literals for std::complex,\n\tpart 2 of UDL for Standard Library Types\n\t* include/std/complex: Add complex literal operators.\n\t* testsuite/26_numerics/complex/literals/types.cc: New.\n\t* testsuite/26_numerics/complex/literals/values.cc: New.\n\nFrom-SVN: r203940", "tree": {"sha": "0b96fbfd96ca1a11dbecbcfedf40258a66d603eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b96fbfd96ca1a11dbecbcfedf40258a66d603eb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ae5543e66213b694f07474cc98fba9d4c5b0defc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5543e66213b694f07474cc98fba9d4c5b0defc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae5543e66213b694f07474cc98fba9d4c5b0defc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae5543e66213b694f07474cc98fba9d4c5b0defc/comments", "author": {"login": "emsr", "id": 1936479, "node_id": "MDQ6VXNlcjE5MzY0Nzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1936479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emsr", "html_url": "https://github.com/emsr", "followers_url": "https://api.github.com/users/emsr/followers", "following_url": "https://api.github.com/users/emsr/following{/other_user}", "gists_url": "https://api.github.com/users/emsr/gists{/gist_id}", "starred_url": "https://api.github.com/users/emsr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emsr/subscriptions", "organizations_url": "https://api.github.com/users/emsr/orgs", "repos_url": "https://api.github.com/users/emsr/repos", "events_url": "https://api.github.com/users/emsr/events{/privacy}", "received_events_url": "https://api.github.com/users/emsr/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "df2ba612878f96751235dae5f926f829d4245c92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df2ba612878f96751235dae5f926f829d4245c92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df2ba612878f96751235dae5f926f829d4245c92"}], "stats": {"total": 136, "additions": 136, "deletions": 0}, "files": [{"sha": "f3f7c4b271acbad85fad2a98ae9fe94e6e05be95", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5543e66213b694f07474cc98fba9d4c5b0defc/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5543e66213b694f07474cc98fba9d4c5b0defc/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=ae5543e66213b694f07474cc98fba9d4c5b0defc", "patch": "@@ -1,3 +1,11 @@\n+2013-10-22  Ed Smith-Rowland  <3dw4rd@verizon.net>\n+\n+\tImplement N3779 - User-defined Literals for std::complex,\n+\tpart 2 of UDL for Standard Library Types\n+\t* include/std/complex: Add complex literal operators.\n+\t* testsuite/26_numerics/complex/literals/types.cc: New.\n+\t* testsuite/26_numerics/complex/literals/values.cc: New.\n+\n 2013-10-21  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tPR libstdc++/58804"}, {"sha": "ff04ae6425ec77981994b30f9a3136e02e5c0fa4", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5543e66213b694f07474cc98fba9d4c5b0defc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5543e66213b694f07474cc98fba9d4c5b0defc/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=ae5543e66213b694f07474cc98fba9d4c5b0defc", "patch": "@@ -1924,6 +1924,40 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     conj(_Tp __x)\n     { return __x; }\n \n+#if __cplusplus > 201103L\n+\n+inline namespace literals {\n+inline namespace complex_literals {\n+\n+  constexpr std::complex<float>\n+  operator\"\"if(long double __num)\n+  { return std::complex<float>{0.0F, static_cast<float>(__num)}; }\n+\n+  constexpr std::complex<float>\n+  operator\"\"if(unsigned long long __num)\n+  { return std::complex<float>{0.0F, static_cast<float>(__num)}; }\n+\n+  constexpr std::complex<double>\n+  operator\"\"i(long double __num)\n+  { return std::complex<double>{0.0, static_cast<double>(__num)}; }\n+\n+  constexpr std::complex<double>\n+  operator\"\"i(unsigned long long __num)\n+  { return std::complex<double>{0.0, static_cast<double>(__num)}; }\n+\n+  constexpr std::complex<long double>\n+  operator\"\"il(long double __num)\n+  { return std::complex<long double>{0.0L, __num}; }\n+\n+  constexpr std::complex<long double>\n+  operator\"\"il(unsigned long long __num)\n+  { return std::complex<long double>{0.0L, static_cast<long double>(__num)}; }\n+\n+} // inline namespace complex_literals\n+} // inline namespace literals\n+\n+#endif // C++14\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace\n "}, {"sha": "e5f9b8c49e4c0a28c2e2aa05371576ed0b52c6e9", "filename": "libstdc++-v3/testsuite/26_numerics/complex/literals/types.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5543e66213b694f07474cc98fba9d4c5b0defc/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fliterals%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5543e66213b694f07474cc98fba9d4c5b0defc/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fliterals%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fliterals%2Ftypes.cc?ref=ae5543e66213b694f07474cc98fba9d4c5b0defc", "patch": "@@ -0,0 +1,46 @@\n+// { dg-options \"-std=c++1y\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <complex>\n+#include <type_traits>\n+\n+void\n+test02()\n+{\n+  using namespace std::literals::complex_literals;\n+\n+  static_assert(std::is_same<decltype(1.0if), std::complex<float>>::value,\n+\t\t\"1.0if is std::complex<float>\");\n+\n+  static_assert(std::is_same<decltype(1if), std::complex<float>>::value,\n+\t\t\"1if is std::complex<float>\");\n+\n+  static_assert(std::is_same<decltype(1.0i), std::complex<double>>::value,\n+\t\t\"1.0i is std::complex<double>\");\n+\n+  static_assert(std::is_same<decltype(1i), std::complex<double>>::value,\n+\t\t\"1i is std::complex<double>\");\n+\n+  static_assert(std::is_same<decltype(1.0il), std::complex<long double>>::value,\n+\t\t\"1.0il is std::complex<long double>\");\n+\n+  static_assert(std::is_same<decltype(1il), std::complex<long double>>::value,\n+\t\t\"1il is std::complex<long double>\");\n+}"}, {"sha": "e56727e49c8b0372ba580c60a653d4e63dd2f11f", "filename": "libstdc++-v3/testsuite/26_numerics/complex/literals/values.cc", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ae5543e66213b694f07474cc98fba9d4c5b0defc/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ae5543e66213b694f07474cc98fba9d4c5b0defc/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Fcomplex%2Fliterals%2Fvalues.cc?ref=ae5543e66213b694f07474cc98fba9d4c5b0defc", "patch": "@@ -0,0 +1,48 @@\n+// { dg-options \"-std=gnu++1y\" }\n+// { dg-do run }\n+\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <complex>\n+#include <testsuite_hooks.h>\n+\n+void\n+test02()\n+{\n+  using namespace std::literals::complex_literals;\n+\n+  std::complex<float> j1 = 1.0if;\n+  std::complex<float> k1 = 1if;\n+  std::complex<double> j2 = 2.0i;\n+  std::complex<double> k2 = 2i;\n+  std::complex<long double> j4 = 4.0il;\n+  std::complex<long double> k4 = 4il;\n+\n+  VERIFY( j1 == std::complex<float>(0.0F, 1.0F) );\n+  VERIFY( k1 == std::complex<float>(0.0F, 1.0F) );\n+  VERIFY( j2 == std::complex<double>(0.0, 2.0) );\n+  VERIFY( k2 == std::complex<double>(0.0, 2.0) );\n+  VERIFY( j4 == std::complex<long double>(0.0L, 4.0L) );\n+  VERIFY( k4 == std::complex<long double>(0.0L, 4.0L) );\n+}\n+\n+int\n+main()\n+{\n+  test02();\n+}"}]}