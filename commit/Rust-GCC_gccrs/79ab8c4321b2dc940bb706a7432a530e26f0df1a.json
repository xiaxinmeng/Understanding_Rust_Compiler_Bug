{"sha": "79ab8c4321b2dc940bb706a7432a530e26f0df1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzlhYjhjNDMyMWIyZGM5NDBiYjcwNmE3NDMyYTUzMGUyNmYwZGYxYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-08T09:59:40Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-02-08T09:59:40Z"}, "message": "i386: Make xmm16-xmm31 call used even in ms ABI [PR65782]\n\nOn Tue, Feb 04, 2020 at 11:16:06AM +0100, Uros Bizjak wrote:\n> I guess that Comment #9 patch form the PR should be trivially correct,\n> but althouhg it looks obvious, I don't want to propose the patch since\n> I have no means of testing it.\n\nI don't have means of testing it either.\nhttps://docs.microsoft.com/en-us/cpp/build/x64-calling-convention?view=vs-2019\nis quite explicit that [xyz]mm16-31 are call clobbered and only xmm6-15 (low\n128-bits only) are call preserved.\n\nWe are talking e.g. about\n/* { dg-options \"-O2 -mabi=ms -mavx512vl\" } */\n\ntypedef double V __attribute__((vector_size (16)));\nvoid foo (void);\nV bar (void);\nvoid baz (V);\nvoid\nqux (void)\n{\n  V c;\n  {\n    register V a __asm (\"xmm18\");\n    V b = bar ();\n    asm (\"\" : \"=x\" (a) : \"0\" (b));\n    c = a;\n  }\n  foo ();\n  {\n    register V d __asm (\"xmm18\");\n    V e;\n    d = c;\n    asm (\"\" : \"=x\" (e) : \"0\" (d));\n    baz (e);\n  }\n}\nwhere according to the MSDN doc gcc incorrectly holds the c value\nin xmm18 register across the foo call; if foo is compiled by some Microsoft\ncompiler (or LLVM), then it could clobber %xmm18.\nIf all xmm18 occurrences are changed to say xmm15, then it is valid to hold\nthe 128-bit value across the foo call (though, surprisingly, LLVM saves it\ninto stack anyway).\n\nThe other parts are I guess mainly about SEH.  Consider e.g.\nvoid\nfoo (void)\n{\n  register double x __asm (\"xmm14\");\n  register double y __asm (\"xmm18\");\n  asm (\"\" : \"=x\" (x));\n  asm (\"\" : \"=v\" (y));\n  x += y;\n  y += x;\n  asm (\"\" : : \"x\" (x));\n  asm (\"\" : : \"v\" (y));\n}\nlooking at cross-compiler output, with -O2 -mavx512f this emits\n\t.file\t\"abcdeq.c\"\n\t.text\n\t.align 16\n\t.globl\tfoo\n\t.def\tfoo;\t.scl\t2;\t.type\t32;\t.endef\n\t.seh_proc\tfoo\nfoo:\n\tsubq\t$40, %rsp\n\t.seh_stackalloc\t40\n\tvmovaps %xmm14,\t(%rsp)\n\t.seh_savexmm\t%xmm14, 0\n\tvmovaps %xmm18,\t16(%rsp)\n\t.seh_savexmm\t%xmm18, 16\n\t.seh_endprologue\n\tvaddsd\t%xmm18, %xmm14, %xmm14\n\tvaddsd\t%xmm18, %xmm14, %xmm18\n\tvmovaps\t(%rsp), %xmm14\n\tvmovaps\t16(%rsp), %xmm18\n\taddq\t$40, %rsp\n\tret\n\t.seh_endproc\n\t.ident\t\"GCC: (GNU) 10.0.1 20200207 (experimental)\"\nDoes whatever assembler mingw64 uses even assemble this (I mean the\n.seh_savexmm %xmm16, 16 could be problematic)?\nI can find e.g.\nhttps://stackoverflow.com/questions/43152633/invalid-register-for-seh-savexmm-in-cygwin/43210527\nwhich then links to\nhttps://gcc.gnu.org/PR65782\n\n2020-02-08  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\t    Jakub Jelinek  <jakub@redhat.com>\n\n\tPR target/65782\n\t* config/i386/i386.h (CALL_USED_REGISTERS): Make\n\txmm16-xmm31 call-used even in 64-bit ms-abi.\n\n\t* gcc.target/i386/pr65782.c: New test.\n\nCo-authored-by: Uro\u0161 Bizjak <ubizjak@gmail.com>", "tree": {"sha": "7db5304a946d5dccfac43d4c223ff01284387b31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7db5304a946d5dccfac43d4c223ff01284387b31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/79ab8c4321b2dc940bb706a7432a530e26f0df1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ab8c4321b2dc940bb706a7432a530e26f0df1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79ab8c4321b2dc940bb706a7432a530e26f0df1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79ab8c4321b2dc940bb706a7432a530e26f0df1a/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "561d91dcc9115357463331543a8e86da5945b44f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561d91dcc9115357463331543a8e86da5945b44f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561d91dcc9115357463331543a8e86da5945b44f"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "ed3aac49f1bec63196a223d87b0ce6beffe9ecc0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ab8c4321b2dc940bb706a7432a530e26f0df1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ab8c4321b2dc940bb706a7432a530e26f0df1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=79ab8c4321b2dc940bb706a7432a530e26f0df1a", "patch": "@@ -1,3 +1,10 @@\n+2020-02-08  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/65782\n+\t* config/i386/i386.h (CALL_USED_REGISTERS): Make\n+\txmm16-xmm31 call-used even in 64-bit ms-abi.\n+\n 2020-02-07  Dennis Zhang  <dennis.zhang@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def (simd_smmla): New entry."}, {"sha": "98235f75a9e6843d973f25183c98503dcba2b983", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ab8c4321b2dc940bb706a7432a530e26f0df1a/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ab8c4321b2dc940bb706a7432a530e26f0df1a/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=79ab8c4321b2dc940bb706a7432a530e26f0df1a", "patch": "@@ -1128,9 +1128,9 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n /*xmm8,xmm9,xmm10,xmm11,xmm12,xmm13,xmm14,xmm15*/\t\t\\\n      6,   6,    6,    6,    6,    6,    6,    6,\t\t\\\n /*xmm16,xmm17,xmm18,xmm19,xmm20,xmm21,xmm22,xmm23*/\t\t\\\n-     6,    6,     6,    6,    6,    6,    6,    6,\t\t\\\n+     1,    1,     1,    1,    1,    1,    1,    1,\t\t\\\n /*xmm24,xmm25,xmm26,xmm27,xmm28,xmm29,xmm30,xmm31*/\t\t\\\n-     6,    6,     6,    6,    6,    6,    6,    6,\t\t\\\n+     1,    1,     1,    1,    1,    1,    1,    1,\t\t\\\n  /* k0,  k1,  k2,  k3,  k4,  k5,  k6,  k7*/\t\t\t\\\n      1,   1,   1,   1,   1,   1,   1,   1 }\n "}, {"sha": "149996686b5057d6327f59bdd23c9cec4dffc864", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ab8c4321b2dc940bb706a7432a530e26f0df1a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ab8c4321b2dc940bb706a7432a530e26f0df1a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=79ab8c4321b2dc940bb706a7432a530e26f0df1a", "patch": "@@ -1,3 +1,9 @@\n+2020-02-08  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/65782\n+\t* gcc.target/i386/pr65782.c: New test.\n+\n 2020-02-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/92947 - Paren init of aggregates in unevaluated context."}, {"sha": "298dca1be97cef82d8d1350be8e25fff8ab7b0fd", "filename": "gcc/testsuite/gcc.target/i386/pr65782.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79ab8c4321b2dc940bb706a7432a530e26f0df1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65782.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79ab8c4321b2dc940bb706a7432a530e26f0df1a/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65782.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr65782.c?ref=79ab8c4321b2dc940bb706a7432a530e26f0df1a", "patch": "@@ -0,0 +1,16 @@\n+/* PR target/65782 */\n+/* { dg-do assemble { target { avx512vl && { ! ia32 } } } } */\n+/* { dg-options \"-O2 -mavx512vl\" } */\n+\n+void\n+foo (void)\n+{\n+  register double x __asm (\"xmm14\");\n+  register double y __asm (\"xmm18\");\n+  asm (\"\" : \"=x\" (x));\n+  asm (\"\" : \"=v\" (y));\n+  x += y;\n+  y += x;\n+  asm (\"\" : : \"x\" (x));\n+  asm (\"\" : : \"v\" (y));\n+}"}]}