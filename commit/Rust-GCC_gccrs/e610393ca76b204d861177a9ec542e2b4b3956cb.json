{"sha": "e610393ca76b204d861177a9ec542e2b4b3956cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTYxMDM5M2NhNzZiMjA0ZDg2MTE3N2E5ZWM1NDJlMmI0YjM5NTZjYg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2014-10-30T17:28:30Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2014-10-30T17:28:30Z"}, "message": "Make soft-fp symbols into compat symbols for powerpc*-*-linux*.\n\nContinuing preparations for implementing\nTARGET_ATOMIC_ASSIGN_EXPAND_FENV for powerpc*-*-linux* soft-float and\ne500, this patch makes soft-fp symbols used for those targets into\ncompat symbols when building with glibc >= 2.19, so that they are only\nin shared libgcc for existing binaries requiring them, not in static\nlibgcc and not available for new links using shared libgcc.  Instead,\nnew links will get the symbols from libc, which has exported all of\nthem since 2.19.  (Actually all the symbols were exported from glibc\nsince 2.4, but some of them were exported by glibc as compat symbols\nonly - because of a confusion between deliberately present soft-fp\nsymbols and old accidental reexports of libgcc functions from glibc\n2.0 - until 2.19.)\n\nThis allows user floating-point arithmetic to interoperate properly\nwith the state handled by <fenv.h> functions, whether software state\n(for soft-float; TLS variables that don't form a public part of\nglibc's ABI, so can only be accessed directly by functions within\nglibc) or hardware state (for e500 - the copies of the soft-fp\nfunctions in glibc being built to interoperate with the hardware state\nwhereas those in libgcc aren't).  Previously only glibc's own\nfunctions, and those operations done in hardware on e500, properly\nworked with that state, not direct floating-point arithmetic\noperations that were implemented in software.\n\nThe intended next step is the actual TARGET_ATOMIC_ASSIGN_EXPAND_FENV\nimplementation.\n\nThe test of glibc >= 2.19 uses the same --with-glibc-version configure\noption as in the gcc/ directory (but differently implemented; in gcc/\nthe fallback is to examine headers to find the version, while in\nlibgcc/ we can use compile for the target and so use AC_COMPUTE_INT).\nThe TARGET_ATOMIC_ASSIGN_EXPAND_FENV implementation will also only do\nanything for glibc >= 2.19, as it will depend on generating calls to\nfunctions __atomic_feholdexcept __atomic_feclearexcept\n__atomic_feupdateenv that were added in 2.19 for that purpose (even\nfor e500, inline code is not readily possible because of the need to\nmake prctl syscalls from the implementation of these functions).\n\nIn order to make symbols compat symbols, the soft-fp files need\nwrapping with generated wrappers including asm .symver directives,\nwhich need to name the symbol version in question.  This is extracted\nby an awk script from an intermediate stage of generating the .map\nfile for linking libgcc (that .map itself depends on the objects that\ngo into the library, so can't be used for this purpose as that would\nmean a circular dependency); the extraction is not fully general\nregarding the features available in .map generation, but suffices for\nthe present purpose.\n\nIt would make sense for hardfp.c symbols to be compat symbols as well\n(in the cases where hardfp.c gets used, the functions in question\nshould not be used for new links), but this isn't required for the\npresent purpose, which is only concerned with ensuring that where\nfunctions that should be affected by rounding modes or exceptions get\nused, those functions are actually affected by those rounding modes or\nexceptions.\n\nTested with no regressions with cross to powerpc-linux-gnu\n(soft-float); c11-atomic-exec-5.c moves from UNSUPPORTED to FAIL, as\nexpected, now that floating-point arithmetic in user programs uses the\nsame state as <fenv.h> functions, so the fenv_exceptions test passes,\nbut TARGET_ATOMIC_ASSIGN_EXPAND_FENV isn't yet implemented.  (For\ne500, c11-atomic-exec-5.c was already FAILing, as enough operations\nworked with the hardware state for the fenv_exceptions effective\ntarget test to pass.)  Also verified that the exported symbols and\nversions are unchanged, with the expected symbols becoming compat\nsymbols at the same versions, and that with --with-glibc-version=2.18\nthe symbols remain normal rather than compat symbols.\n\n\t* Makefile.in (libgcc.map.in): New target.\n\t(libgcc.map): Use libgcc.map.in.\n\t* config/t-softfp (softfp_compat): New variable to be set by\n\tusers.\n\t[$(softfp_compat) = y] (softfp_map_dep, softfp_set_symver): New\n\tvariables.\n\t[$(softfp_compat) = y] (softfp_file_list): Use files in the build\n\tdirectory.\n\t[$(softfp_compat) = y] ($(softfp_file_list)): Generate wrappers\n\tthat use compat symbols and disable all code unless [SHARED].\n\t* config/t-softfp-compat: New file.\n\t* find-symver.awk: New file.\n\t* configure.ac (--with-glibc-version): New configure option.\n\t(ppc_fp_compat): New variable set for powerpc*-*-linux*.\n\t* configure: Regenerate.\n\t* config.host (powerpc*-*-linux*): Use ${ppc_fp_compat} for\n\tsoft-float and e500.\n\nFrom-SVN: r216942", "tree": {"sha": "5cab873a18ab41830f86af14fc74a62d449e0851", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5cab873a18ab41830f86af14fc74a62d449e0851"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e610393ca76b204d861177a9ec542e2b4b3956cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e610393ca76b204d861177a9ec542e2b4b3956cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e610393ca76b204d861177a9ec542e2b4b3956cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e610393ca76b204d861177a9ec542e2b4b3956cb/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d51fcef56807789d5a6d929174a4581bd9e2ce3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d51fcef56807789d5a6d929174a4581bd9e2ce3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d51fcef56807789d5a6d929174a4581bd9e2ce3"}], "stats": {"total": 181, "additions": 171, "deletions": 10}, "files": [{"sha": "073ed11d3216c87eb568d230a3719482b7b53302", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=e610393ca76b204d861177a9ec542e2b4b3956cb", "patch": "@@ -1,3 +1,23 @@\n+2014-10-30  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* Makefile.in (libgcc.map.in): New target.\n+\t(libgcc.map): Use libgcc.map.in.\n+\t* config/t-softfp (softfp_compat): New variable to be set by\n+\tusers.\n+\t[$(softfp_compat) = y] (softfp_map_dep, softfp_set_symver): New\n+\tvariables.\n+\t[$(softfp_compat) = y] (softfp_file_list): Use files in the build\n+\tdirectory.\n+\t[$(softfp_compat) = y] ($(softfp_file_list)): Generate wrappers\n+\tthat use compat symbols and disable all code unless [SHARED].\n+\t* config/t-softfp-compat: New file.\n+\t* find-symver.awk: New file.\n+\t* configure.ac (--with-glibc-version): New configure option.\n+\t(ppc_fp_compat): New variable set for powerpc*-*-linux*.\n+\t* configure: Regenerate.\n+\t* config.host (powerpc*-*-linux*): Use ${ppc_fp_compat} for\n+\tsoft-float and e500.\n+\n 2014-10-29  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/t-hardfp (hardfp_exclusions): Document new variable for"}, {"sha": "357e15c37614ce7a5dad44aaaeba9fc652314320", "filename": "libgcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FMakefile.in?ref=e610393ca76b204d861177a9ec542e2b4b3956cb", "patch": "@@ -922,12 +922,16 @@ ifeq ($(enable_shared),yes)\n \n # Map-file generation.\n ifneq ($(SHLIB_MKMAP),)\n-libgcc.map: $(SHLIB_MKMAP) $(SHLIB_MAPFILES) $(libgcc-s-objects)\n-\t{ $(NM) $(SHLIB_NM_FLAGS) $(libgcc-s-objects); echo %%; \\\n-\t  cat $(SHLIB_MAPFILES) \\\n+libgcc.map.in: $(SHLIB_MAPFILES)\n+\t{ cat $(SHLIB_MAPFILES) \\\n \t    | sed -e '/^[ \t]*#/d' \\\n \t\t  -e 's/^%\\(if\\|else\\|elif\\|endif\\|define\\)/#\\1/' \\\n \t    | $(gcc_compile_bare) -E -xassembler-with-cpp -; \\\n+\t} > tmp-$@\n+\tmv tmp-$@ $@\n+libgcc.map: $(SHLIB_MKMAP) libgcc.map.in $(libgcc-s-objects)\n+\t{ $(NM) $(SHLIB_NM_FLAGS) $(libgcc-s-objects); echo %%; \\\n+\t  cat libgcc.map.in; \\\n \t} | $(AWK) -f $(SHLIB_MKMAP) $(SHLIB_MKMAP_OPTS) > tmp-$@\n \tmv tmp-$@ $@\n libgcc_s$(SHLIB_EXT): libgcc.map"}, {"sha": "f3cc276558302a9ea9d15ca61f702cfd9b87b388", "filename": "libgcc/config.host", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig.host?ref=e610393ca76b204d861177a9ec542e2b4b3956cb", "patch": "@@ -998,13 +998,13 @@ powerpc*-*-linux*)\n \t\ttmake_file=\"${tmake_file} t-hardfp-sfdf t-hardfp\"\n \t\t;;\n \tsoft)\n-\t\ttmake_file=\"${tmake_file} t-softfp-sfdf t-softfp\"\n+\t\ttmake_file=\"${tmake_file} t-softfp-sfdf ${ppc_fp_compat} t-softfp\"\n \t\t;;\n \te500v1)\n-\t\ttmake_file=\"${tmake_file} rs6000/t-e500v1-fp t-softfp t-hardfp\"\n+\t\ttmake_file=\"${tmake_file} rs6000/t-e500v1-fp ${ppc_fp_compat} t-softfp t-hardfp\"\n \t\t;;\n \te500v2)\n-\t\ttmake_file=\"${tmake_file} t-hardfp-sfdf rs6000/t-e500v2-fp t-softfp t-hardfp\"\n+\t\ttmake_file=\"${tmake_file} t-hardfp-sfdf rs6000/t-e500v2-fp ${ppc_fp_compat} t-softfp t-hardfp\"\n \t\t;;\n \t*)\n \t\techo \"Unknown ppc_fp_type $ppc_fp_type\" 1>&2"}, {"sha": "e9fece7583d22f54b83aee3b5adc8d9a374126c2", "filename": "libgcc/config/t-softfp", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2Fconfig%2Ft-softfp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2Fconfig%2Ft-softfp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-softfp?ref=e610393ca76b204d861177a9ec542e2b4b3956cb", "patch": "@@ -35,6 +35,11 @@\n # the above settings, also define softfp_extras as a list of those\n # functions, e.g. unorddf2.\n #\n+# If the functions should only be built as compat symbols for shared\n+# libgcc, not available for new links, also define:\n+#\n+# softfp_compat := y\n+#\n # If the libgcc2.c functions should not be replaced, also define:\n #\n # softfp_exclude_libgcc2 := y\n@@ -52,7 +57,8 @@\n # softfp_wrap_end: text to put at the end of wrapper source files,\n #                  e.g. '#endif'\n #\n-# This is another temporary measure.\n+# This is another temporary measure, and cannot be used together with\n+# softfp_compat.\n \n softfp_float_funcs = add$(m)3 div$(m)3 eq$(m)2 ge$(m)2 le$(m)2 mul$(m)3 \\\n   neg$(m)2 sub$(m)3 unord$(m)2\n@@ -77,16 +83,36 @@ softfp_func_list := $(filter-out floatdidf floatdisf fixunsdfsi fixunssfsi \\\n   floatundidf floatundisf floatundixf floatunditf,$(softfp_func_list))\n endif\n \n-ifeq ($(softfp_wrap_start),)\n-softfp_file_list := \\\n-  $(addsuffix .c,$(addprefix $(srcdir)/soft-fp/,$(softfp_func_list)))\n+ifeq ($(softfp_compat),y)\n+softfp_file_list := $(addsuffix .c,$(softfp_func_list))\n+\n+ifeq ($(enable_shared),yes)\n+softfp_map_dep := libgcc.map.in\n else\n+softfp_map_dep :=\n+endif\n+softfp_set_symver = echo \"asm (\\\".symver $(1),$(1)@`$(AWK) -f $(srcdir)/find-symver.awk -v symbol=$(1) libgcc.map.in`\\\");\" >> $@\n+$(softfp_file_list): $(softfp_map_dep)\n+\techo '#ifdef SHARED' > $@\n+\techo '#include \"soft-fp/$@\"' >> $@\n+ifeq ($(enable_shared),yes)\n+\t$(call softfp_set_symver,__$(*F))\n+\tif grep strong_alias $(srcdir)/soft-fp/$@ > /dev/null; then \\\n+\t  alias=`grep strong_alias $(srcdir)/soft-fp/$@ | sed -e 's/.*, *//' -e 's/).*//'`; \\\n+\t  $(call softfp_set_symver,$$alias); \\\n+\tfi\n+endif\n+\techo '#endif' >> $@\n+else ifneq ($(softfp_wrap_start),)\n softfp_file_list := $(addsuffix .c,$(softfp_func_list))\n \n $(softfp_file_list):\n \techo $(softfp_wrap_start) > $@\n \techo '#include \"soft-fp/$@\"' >> $@\n \techo $(softfp_wrap_end) >> $@\n+else\n+softfp_file_list := \\\n+  $(addsuffix .c,$(addprefix $(srcdir)/soft-fp/,$(softfp_func_list)))\n endif\n \n # Disable missing prototype and type limit warnings.  The prototypes"}, {"sha": "2afc9488a06dace1284d3a16f425002aa8de651c", "filename": "libgcc/config/t-softfp-compat", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2Fconfig%2Ft-softfp-compat", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2Fconfig%2Ft-softfp-compat", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Ft-softfp-compat?ref=e610393ca76b204d861177a9ec542e2b4b3956cb", "patch": "@@ -0,0 +1 @@\n+softfp_compat := y"}, {"sha": "3f53aafacaa574dfe0eb43a19b9ed58101c7edea", "filename": "libgcc/configure", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure?ref=e610393ca76b204d861177a9ec542e2b4b3956cb", "patch": "@@ -666,6 +666,7 @@ enable_decimal_float\n with_system_libunwind\n enable_sjlj_exceptions\n enable_explicit_exception_frame_registration\n+with_glibc_version\n enable_tls\n '\n       ac_precious_vars='build_alias\n@@ -1318,6 +1319,8 @@ Optional Packages:\n   --with-slibdir=DIR      shared libraries in DIR LIBDIR\n   --with-build-libsubdir=DIR  Directory where to find libraries for build system\n   --with-system-libunwind use installed libunwind\n+  --with-glibc-version=M.N\n+                          assume GCC used with glibc version M.N or later\n \n Some influential environment variables:\n   CC          C compiler command\n@@ -4376,6 +4379,38 @@ fi\n $as_echo \"$libgcc_cv_mips_hard_float\" >&6; }\n esac\n \n+# Determine the version of glibc, if any, used on the target.\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for target glibc version\" >&5\n+$as_echo_n \"checking for target glibc version... \" >&6; }\n+\n+# Check whether --with-glibc-version was given.\n+if test \"${with_glibc_version+set}\" = set; then :\n+  withval=$with_glibc_version;\n+if echo \"$with_glibc_version\" | grep '^[0-9][0-9]*\\.[0-9][0-9]*$'; then\n+  glibc_version_major=`echo \"$with_glibc_version\" | sed -e 's/\\..*//'`\n+  glibc_version_minor=`echo \"$with_glibc_version\" | sed -e 's/.*\\.//'`\n+else\n+  as_fn_error \"option --with-glibc-version requires a version number M.N\" \"$LINENO\" 5\n+fi\n+else\n+\n+if ac_fn_c_compute_int \"$LINENO\" \"__GLIBC__\" \"glibc_version_major\"        \"#include <features.h>\"; then :\n+\n+else\n+  glibc_version_major=0\n+fi\n+\n+if ac_fn_c_compute_int \"$LINENO\" \"__GLIBC_MINOR__\" \"glibc_version_minor\"        \"#include <features.h>\"; then :\n+\n+else\n+  glibc_version_minor=0\n+fi\n+\n+fi\n+\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $glibc_version_major.$glibc_version_minor\" >&5\n+$as_echo \"$glibc_version_major.$glibc_version_minor\" >&6; }\n+\n # Determine floating-point type for powerpc*-*-linux*.\n # Single-precision-only FPRs are not a supported configuration for\n # this target, so are not allowed for in this test.\n@@ -4396,6 +4431,20 @@ ppc_fp_type=hard\n EOF\n eval `${CC-cc} -E conftest.c | grep ppc_fp_type=`\n rm -f conftest.c\n+# glibc 2.19 and later provide all the soft-fp functions, with proper\n+# interactions with <fenv.h> exception and rounding mode handling, so\n+# make libgcc's versions into compat symbols if a recent enough glibc\n+# version is being used.\n+ppc_fp_compat=\n+case ${ppc_fp_type} in\n+soft|e500v1|e500v2)\n+  if test $glibc_version_major -gt 2 \\\n+    || ( test $glibc_version_major -eq 2 \\\n+        && test $glibc_version_minor -ge 19 ); then\n+    ppc_fp_compat=\"t-softfp-compat\"\n+  fi\n+  ;;\n+esac\n ;;\n esac\n "}, {"sha": "79d0ea43493edc612bfb3eaebab2da52e2623cf4", "filename": "libgcc/configure.ac", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfigure.ac?ref=e610393ca76b204d861177a9ec542e2b4b3956cb", "patch": "@@ -320,6 +320,25 @@ mips*-*-*)\n     [libgcc_cv_mips_hard_float=no])])\n esac\n \n+# Determine the version of glibc, if any, used on the target.\n+AC_MSG_CHECKING([for target glibc version])\n+AC_ARG_WITH([glibc-version],\n+  [AS_HELP_STRING([--with-glibc-version=M.N],\n+    [assume GCC used with glibc version M.N or later])], [\n+if [echo \"$with_glibc_version\" | grep '^[0-9][0-9]*\\.[0-9][0-9]*$']; then\n+  glibc_version_major=`echo \"$with_glibc_version\" | sed -e 's/\\..*//'`\n+  glibc_version_minor=`echo \"$with_glibc_version\" | sed -e 's/.*\\.//'`\n+else\n+  AC_MSG_ERROR([option --with-glibc-version requires a version number M.N])\n+fi], [\n+AC_COMPUTE_INT([glibc_version_major], [__GLIBC__],\n+\t\t\t\t      [#include <features.h>],\n+\t\t\t\t      [glibc_version_major=0])\n+AC_COMPUTE_INT([glibc_version_minor], [__GLIBC_MINOR__],\n+\t\t\t\t      [#include <features.h>],\n+\t\t\t\t      [glibc_version_minor=0])])\n+AC_MSG_RESULT([$glibc_version_major.$glibc_version_minor])\n+\n # Determine floating-point type for powerpc*-*-linux*.\n # Single-precision-only FPRs are not a supported configuration for\n # this target, so are not allowed for in this test.\n@@ -340,6 +359,20 @@ ppc_fp_type=hard\n EOF\n eval `${CC-cc} -E conftest.c | grep ppc_fp_type=`\n rm -f conftest.c\n+# glibc 2.19 and later provide all the soft-fp functions, with proper\n+# interactions with <fenv.h> exception and rounding mode handling, so\n+# make libgcc's versions into compat symbols if a recent enough glibc\n+# version is being used.\n+ppc_fp_compat=\n+case ${ppc_fp_type} in\n+soft|e500v1|e500v2)\n+  if test $glibc_version_major -gt 2 \\\n+    || ( test $glibc_version_major -eq 2 \\\n+        && test $glibc_version_minor -ge 19 ); then\n+    ppc_fp_compat=\"t-softfp-compat\"\n+  fi\n+  ;;\n+esac\n ;;\n esac\n "}, {"sha": "adf5ba78455b2b9f310a9a71d97990c9ea5d6969", "filename": "libgcc/find-symver.awk", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2Ffind-symver.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e610393ca76b204d861177a9ec542e2b4b3956cb/libgcc%2Ffind-symver.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Ffind-symver.awk?ref=e610393ca76b204d861177a9ec542e2b4b3956cb", "patch": "@@ -0,0 +1,28 @@\n+# Extract the version of a single symbol from the version map.\n+# Copyright (C) 2014 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify it under\n+# the terms of the GNU General Public License as published by the Free\n+# Software Foundation; either version 3, or (at your option) any later\n+# version.\n+#\n+# GCC is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+# License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+/^[A-Z]/ {\n+  version = $1;\n+  next;\n+}\n+\n+$1 == symbol {\n+  print version\n+  exit\n+}"}]}