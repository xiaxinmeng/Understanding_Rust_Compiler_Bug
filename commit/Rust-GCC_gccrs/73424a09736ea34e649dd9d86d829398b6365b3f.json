{"sha": "73424a09736ea34e649dd9d86d829398b6365b3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzM0MjRhMDk3MzZlYTM0ZTY0OWRkOWQ4NmQ4MjkzOThiNjM2NWIzZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-02-14T08:26:26Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-02-14T08:26:26Z"}, "message": "re PR tree-optimization/79408 (Missed VRP optimization of integer modulo)\n\n\tPR tree-optimization/79408\n\t* tree-vrp.c (simplify_div_or_mod_using_ranges): Handle also the\n\tcase when on TRUNC_MOD_EXPR op0 is INTEGER_CST.\n\t(simplify_stmt_using_ranges): Call simplify_div_or_mod_using_ranges\n\talso if rhs1 is INTEGER_CST.\n\n\t* gcc.dg/tree-ssa/pr79408-2.c: New test.\n\nFrom-SVN: r245420", "tree": {"sha": "3ac2c9299dd9e1473a3a32c74eb60349fc07150a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ac2c9299dd9e1473a3a32c74eb60349fc07150a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/73424a09736ea34e649dd9d86d829398b6365b3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73424a09736ea34e649dd9d86d829398b6365b3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73424a09736ea34e649dd9d86d829398b6365b3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73424a09736ea34e649dd9d86d829398b6365b3f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "977472e8c683d25d5a7480c1316c9148bfe4932d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/977472e8c683d25d5a7480c1316c9148bfe4932d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/977472e8c683d25d5a7480c1316c9148bfe4932d"}], "stats": {"total": 79, "additions": 73, "deletions": 6}, "files": [{"sha": "c6adafff2a614c5dd1289e73c9776a9263855c23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73424a09736ea34e649dd9d86d829398b6365b3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73424a09736ea34e649dd9d86d829398b6365b3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=73424a09736ea34e649dd9d86d829398b6365b3f", "patch": "@@ -1,3 +1,11 @@\n+2017-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/79408\n+\t* tree-vrp.c (simplify_div_or_mod_using_ranges): Handle also the\n+\tcase when on TRUNC_MOD_EXPR op0 is INTEGER_CST.\n+\t(simplify_stmt_using_ranges): Call simplify_div_or_mod_using_ranges\n+\talso if rhs1 is INTEGER_CST.\n+\n 2017-02-14  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/79432"}, {"sha": "105444ed5a1979f4e26b8b8294d36ea3c502cfe6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73424a09736ea34e649dd9d86d829398b6365b3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73424a09736ea34e649dd9d86d829398b6365b3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=73424a09736ea34e649dd9d86d829398b6365b3f", "patch": "@@ -1,3 +1,8 @@\n+2017-02-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/79408\n+\t* gcc.dg/tree-ssa/pr79408-2.c: New test.\n+\n 2017-02-14  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/79432"}, {"sha": "696fb58231aa7ac89cce415dfc3049a7e48ea886", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr79408-2.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73424a09736ea34e649dd9d86d829398b6365b3f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79408-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73424a09736ea34e649dd9d86d829398b6365b3f/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79408-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr79408-2.c?ref=73424a09736ea34e649dd9d86d829398b6365b3f", "patch": "@@ -0,0 +1,34 @@\n+/* PR tree-optimization/79408 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+void link_error (void);\n+\n+void\n+foo (unsigned int y)\n+{\n+  if (y <= 7312)\n+    return;\n+  if (7312 % y != 7312)\n+    link_error ();\n+}\n+\n+void\n+bar (int x, int y)\n+{\n+  if (y <= 7312)\n+    return;\n+  if (7312 % y != 7312)\n+    link_error ();\n+}\n+\n+void\n+baz (int x, int y)\n+{\n+  if (y <= 7312)\n+    return;\n+  if (-7312 % y != -7312)\n+    link_error ();\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\"} } */"}, {"sha": "9ffecc9b97bbe41757d2ad2f2925765b83ba31aa", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/73424a09736ea34e649dd9d86d829398b6365b3f/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/73424a09736ea34e649dd9d86d829398b6365b3f/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=73424a09736ea34e649dd9d86d829398b6365b3f", "patch": "@@ -9241,8 +9241,24 @@ simplify_div_or_mod_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n   tree val = NULL;\n   tree op0 = gimple_assign_rhs1 (stmt);\n   tree op1 = gimple_assign_rhs2 (stmt);\n+  tree op0min = NULL_TREE, op0max = NULL_TREE;\n   tree op1min = op1;\n-  value_range *vr = get_value_range (op0);\n+  value_range *vr = NULL;\n+\n+  if (TREE_CODE (op0) == INTEGER_CST)\n+    {\n+      op0min = op0;\n+      op0max = op0;\n+    }\n+  else\n+    {\n+      vr = get_value_range (op0);\n+      if (range_int_cst_p (vr))\n+\t{\n+\t  op0min = vr->min;\n+\t  op0max = vr->max;\n+\t}\n+    }\n \n   if (rhs_code == TRUNC_MOD_EXPR\n       && TREE_CODE (op1) == SSA_NAME)\n@@ -9254,13 +9270,13 @@ simplify_div_or_mod_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n   if (rhs_code == TRUNC_MOD_EXPR\n       && TREE_CODE (op1min) == INTEGER_CST\n       && tree_int_cst_sgn (op1min) == 1\n-      && range_int_cst_p (vr)\n-      && tree_int_cst_lt (vr->max, op1min))\n+      && op0max\n+      && tree_int_cst_lt (op0max, op1min))\n     {\n       if (TYPE_UNSIGNED (TREE_TYPE (op0))\n-\t  || tree_int_cst_sgn (vr->min) >= 0\n+\t  || tree_int_cst_sgn (op0min) >= 0\n \t  || tree_int_cst_lt (fold_unary (NEGATE_EXPR, TREE_TYPE (op1min), op1min),\n-\t\t\t      vr->min))\n+\t\t\t      op0min))\n \t{\n \t  /* If op0 already has the range op0 % op1 has,\n \t     then TRUNC_MOD_EXPR won't change anything.  */\n@@ -9269,6 +9285,9 @@ simplify_div_or_mod_using_ranges (gimple_stmt_iterator *gsi, gimple *stmt)\n \t}\n     }\n \n+  if (TREE_CODE (op0) != SSA_NAME)\n+    return false;\n+\n   if (!integer_pow2p (op1))\n     {\n       /* X % -Y can be only optimized into X % Y either if\n@@ -10377,7 +10396,8 @@ simplify_stmt_using_ranges (gimple_stmt_iterator *gsi)\n \t range.  */\n \tcase TRUNC_DIV_EXPR:\n \tcase TRUNC_MOD_EXPR:\n-\t  if (TREE_CODE (rhs1) == SSA_NAME\n+\t  if ((TREE_CODE (rhs1) == SSA_NAME\n+\t       || TREE_CODE (rhs1) == INTEGER_CST)\n \t      && INTEGRAL_TYPE_P (TREE_TYPE (rhs1)))\n \t    return simplify_div_or_mod_using_ranges (gsi, stmt);\n \t  break;"}]}