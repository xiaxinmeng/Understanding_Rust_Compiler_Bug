{"sha": "1423318fa778649365f5a73c2c4657733e191820", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQyMzMxOGZhNzc4NjQ5MzY1ZjVhNzNjMmM0NjU3NzMzZTE5MTgyMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-11T11:47:52Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-12-11T11:47:52Z"}, "message": "expand: Fix up expand_doubleword_mod on 32-bit targets [PR98229]\n\nAs the testcase shows, for 32-bit word size we can end up with op1\nup to 0xffffffff (0x100000000 % 0xffffffff == 1 and so we use bit == 32\nfor that), but the CONST_INT we got from caller is for DImode in that case\nand not valid for SImode operations.\n\nThe following patch canonicalizes the two spots where the constant needs\ncanonicalization.\n\n2020-12-10  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR rtl-optimization/98229\n\t* optabs.c (expand_doubleword_mod): Canonicalize op1 and\n\t1 - INTVAL (op1) as word_mode constants when used in\n\tword_mode arithmetics.\n\n\t* gcc.c-torture/compile/pr98229.c: New test.", "tree": {"sha": "422bd640d8a22ebf25c619195dd8573a52ee4ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/422bd640d8a22ebf25c619195dd8573a52ee4ff0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1423318fa778649365f5a73c2c4657733e191820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1423318fa778649365f5a73c2c4657733e191820", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1423318fa778649365f5a73c2c4657733e191820", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1423318fa778649365f5a73c2c4657733e191820/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc7b4248172561a9ee310e2d43d8a485a5c9e108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc7b4248172561a9ee310e2d43d8a485a5c9e108", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc7b4248172561a9ee310e2d43d8a485a5c9e108"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "0427063e27766882b275d74f2defb59fdb8242c7", "filename": "gcc/optabs.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1423318fa778649365f5a73c2c4657733e191820/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1423318fa778649365f5a73c2c4657733e191820/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=1423318fa778649365f5a73c2c4657733e191820", "patch": "@@ -1081,7 +1081,8 @@ expand_doubleword_mod (machine_mode mode, rtx op0, rtx op1, bool unsignedp)\n \t\treturn NULL_RTX;\n \t    }\n \t}\n-      rtx remainder = expand_divmod (1, TRUNC_MOD_EXPR, word_mode, sum, op1,\n+      rtx remainder = expand_divmod (1, TRUNC_MOD_EXPR, word_mode, sum,\n+\t\t\t\t     gen_int_mode (INTVAL (op1), word_mode),\n \t\t\t\t     NULL_RTX, 1, OPTAB_DIRECT);\n       if (remainder == NULL_RTX)\n \treturn NULL_RTX;\n@@ -1099,7 +1100,8 @@ expand_doubleword_mod (machine_mode mode, rtx op0, rtx op1, bool unsignedp)\n \t\treturn NULL_RTX;\n \t    }\n \t  mask = expand_simple_binop (word_mode, AND, mask,\n-\t\t\t\t      GEN_INT (1 - INTVAL (op1)),\n+\t\t\t\t      gen_int_mode (1 - INTVAL (op1),\n+\t\t\t\t\t\t    word_mode),\n \t\t\t\t      NULL_RTX, 1, OPTAB_DIRECT);\n \t  if (mask == NULL_RTX)\n \t    return NULL_RTX;"}, {"sha": "509719d0d34c986fb9b13df6385d0b95fa3ea12d", "filename": "gcc/testsuite/gcc.c-torture/compile/pr98229.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1423318fa778649365f5a73c2c4657733e191820/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98229.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1423318fa778649365f5a73c2c4657733e191820/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98229.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr98229.c?ref=1423318fa778649365f5a73c2c4657733e191820", "patch": "@@ -0,0 +1,7 @@\n+/* PR rtl-optimization/98229 */\n+\n+unsigned long long\n+foo (unsigned long long x)\n+{\n+  return x % ~0U;\n+}"}]}