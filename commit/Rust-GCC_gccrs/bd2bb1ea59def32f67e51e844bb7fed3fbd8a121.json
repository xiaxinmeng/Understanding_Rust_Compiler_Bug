{"sha": "bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQyYmIxZWE1OWRlZjMyZjY3ZTUxZTg0NGJiN2ZlZDNmYmQ4YTEyMQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-01-25T19:29:40Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-01-25T19:29:40Z"}, "message": "cctype: New.\n\n2006-01-25  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/tr1/cctype: New.\n\t* include/Makefile.am: Add.\n\t* testsuite/tr1/8_c_compatibility/cctype/functions.cc: New.\n\t* include/Makefile.in: Regenerate.\n\n\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): New, check for C99\n\tsupport to TR1, Chapter 8.\n\t* configure.ac: Use it.\n\t* include/tr1/complex: Adjust.\n\t* config.h.in: Regenerate.\n\t* configure: Likewise.\n\nFrom-SVN: r110221", "tree": {"sha": "134fb590f211ecbb84e73d45be5eff5512a35ed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/134fb590f211ecbb84e73d45be5eff5512a35ed3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/comments", "author": null, "committer": null, "parents": [{"sha": "03b8fe495d716c004f5491eb2347537f115ab2d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03b8fe495d716c004f5491eb2347537f115ab2d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03b8fe495d716c004f5491eb2347537f115ab2d8"}], "stats": {"total": 520, "additions": 514, "deletions": 6}, "files": [{"sha": "a8cd4c1f7d1d098fba5cf2b33838c4b2f5b9f98d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "patch": "@@ -1,3 +1,17 @@\n+2006-01-25  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/tr1/cctype: New.\n+\t* include/Makefile.am: Add.\n+\t* testsuite/tr1/8_c_compatibility/cctype/functions.cc: New.\n+\t* include/Makefile.in: Regenerate.\n+\n+\t* acinclude.m4 ([GLIBCXX_CHECK_C99_TR1]): New, check for C99\n+\tsupport to TR1, Chapter 8.\n+\t* configure.ac: Use it.\n+\t* include/tr1/complex: Adjust.\n+\t* config.h.in: Regenerate.\n+\t* configure: Likewise.\n+\n 2006-01-25  Benjamin Kosnik  <bkoz@redhat.com>\n \n \t* docs/html/configopts.html: Tweak docs."}, {"sha": "4e2b169352536143fe5019677d98ebcdbd541008", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "patch": "@@ -1047,6 +1047,71 @@ AC_DEFUN([GLIBCXX_ENABLE_C99], [\n ])\n \n \n+dnl\n+dnl Check for ISO/IEC 9899:1999 \"C99\" support to ISO/IEC DTR 19768 \"TR1\"\n+dnl facilities in Chapter 8, \"C compatibility\".\n+dnl\n+AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n+\n+  AC_LANG_SAVE\n+  AC_LANG_CPLUSPLUS\n+\n+  # Check for the existence of <complex.h> complex math functions used\n+  # by tr1/complex.\n+  AC_CHECK_HEADERS(complex.h, ac_has_complex_h=yes, ac_has_complex_h=no)\n+  ac_c99_complex_tr1=no;\n+  if test x\"$ac_has_complex_h\" = x\"yes\"; then\n+    AC_MSG_CHECKING([for ISO C99 support to TR1 in <complex.h>])\n+    AC_TRY_COMPILE([#include <complex.h>],\n+\t           [typedef __complex__ float float_type; float_type tmpf;\n+\t            cacosf(tmpf);\n+\t            casinf(tmpf);\n+\t            catanf(tmpf);\n+\t            cacoshf(tmpf);\n+\t            casinhf(tmpf);\n+\t            catanhf(tmpf);\n+\t\t    typedef __complex__ double double_type; double_type tmpd;\n+\t            cacos(tmpd);\n+\t            casin(tmpd);\n+\t            catan(tmpd);\n+\t            cacosh(tmpd);\n+\t            casinh(tmpd);\n+\t            catanh(tmpd);\n+\t\t    typedef __complex__ long double ld_type; ld_type tmpld;\n+\t            cacosl(tmpld);\n+\t            casinl(tmpld);\n+\t            catanl(tmpld);\n+\t            cacoshl(tmpld);\n+\t            casinhl(tmpld);\n+\t            catanhl(tmpld);\n+\t\t   ],[ac_c99_complex_tr1=yes], [ac_c99_complex_tr1=no])\n+  fi\n+  AC_MSG_RESULT($ac_c99_complex_tr1)\n+  if test x\"$ac_c99_complex_tr1\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_C99_COMPLEX_TR1, 1,\n+              [Define if C99 functions in <complex.h> should be used in\n+              <tr1/complex>. Using compiler builtins for these functions\n+\t      requires corresponding C99 library functions to be present.])\n+  fi\n+\n+  # Check for the existence of <ctype.h> functions.\n+  AC_MSG_CHECKING([for ISO C99 support to TR1 in <ctype.h>])\n+  AC_CACHE_VAL(ac_c99_ctype_tr1, [\n+  AC_TRY_COMPILE([#include <ctype.h>],\n+\t         [isblank(0);\n+\t\t ],[ac_c99_ctype_tr1=yes], [ac_c99_ctype_tr1=no])\n+  ])\n+  AC_MSG_RESULT($ac_c99_ctype_tr1)\n+  if test x\"$ac_c99_ctype_tr1\" = x\"yes\"; then\n+    AC_DEFINE(_GLIBCXX_USE_C99_CTYPE_TR1, 1,\n+              [Define if C99 functions in <ctype.h> should be imported in\n+\t      <tr1/cctype> in namespace std::tr1.])\n+  fi\n+\n+  AC_LANG_RESTORE\n+])\n+\n+\n dnl\n dnl Check for what type of C headers to use.\n dnl"}, {"sha": "f8877acbd8ecb09f473d3b747831ad450911717b", "filename": "libstdc++-v3/config.h.in", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Fconfig.h.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Fconfig.h.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig.h.in?ref=bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "patch": "@@ -691,6 +691,15 @@\n    functions to be present. */\n #undef _GLIBCXX_USE_C99_COMPLEX\n \n+/* Define if C99 functions in <complex.h> should be used in <tr1/complex>.\n+   Using compiler builtins for these functions requires corresponding C99\n+   library functions to be present. */\n+#undef _GLIBCXX_USE_C99_COMPLEX_TR1\n+\n+/* Define if C99 functions in <ctype.h> should be imported in <tr1/cctype> in\n+   namespace std::tr1. */\n+#undef _GLIBCXX_USE_C99_CTYPE_TR1\n+\n /* Define if C99 functions or macros in <math.h> should be imported in <cmath>\n    in namespace std. */\n #undef _GLIBCXX_USE_C99_MATH"}, {"sha": "9c3599cef827ca6403ef672ccddac5ae9434e308", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 321, "deletions": 0, "changes": 321, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "patch": "@@ -29974,6 +29974,327 @@ ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n+  # For C99 support to TR1.\n+\n+\n+\n+\n+  ac_ext=cc\n+ac_cpp='$CXXCPP $CPPFLAGS'\n+ac_compile='$CXX -c $CXXFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CXX -o conftest$ac_exeext $CXXFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_cxx_compiler_gnu\n+\n+\n+  # Check for the existence of <complex.h> complex math functions used\n+  # by tr1/complex.\n+\n+for ac_header in complex.h\n+do\n+as_ac_Header=`echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+else\n+  # Is the header compilable?\n+echo \"$as_me:$LINENO: checking $ac_header usability\" >&5\n+echo $ECHO_N \"checking $ac_header usability... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+$ac_includes_default\n+#include <$ac_header>\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_header_compiler=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_header_compiler=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_compiler\" >&5\n+echo \"${ECHO_T}$ac_header_compiler\" >&6\n+\n+# Is the header present?\n+echo \"$as_me:$LINENO: checking $ac_header presence\" >&5\n+echo $ECHO_N \"checking $ac_header presence... $ECHO_C\" >&6\n+cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <$ac_header>\n+_ACEOF\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_cpp conftest.$ac_ext\\\"\") >&5\n+  (eval $ac_cpp conftest.$ac_ext) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } >/dev/null; then\n+  if test -s conftest.err; then\n+    ac_cpp_err=$ac_cxx_preproc_warn_flag\n+    ac_cpp_err=$ac_cpp_err$ac_cxx_werror_flag\n+  else\n+    ac_cpp_err=\n+  fi\n+else\n+  ac_cpp_err=yes\n+fi\n+if test -z \"$ac_cpp_err\"; then\n+  ac_header_preproc=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+  ac_header_preproc=no\n+fi\n+rm -f conftest.err conftest.$ac_ext\n+echo \"$as_me:$LINENO: result: $ac_header_preproc\" >&5\n+echo \"${ECHO_T}$ac_header_preproc\" >&6\n+\n+# So?  What about this header?\n+case $ac_header_compiler:$ac_header_preproc:$ac_cxx_preproc_warn_flag in\n+  yes:no: )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&5\n+echo \"$as_me: WARNING: $ac_header: accepted by the compiler, rejected by the preprocessor!\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the compiler's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the compiler's result\" >&2;}\n+    ac_header_preproc=yes\n+    ;;\n+  no:yes:* )\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: present but cannot be compiled\" >&5\n+echo \"$as_me: WARNING: $ac_header: present but cannot be compiled\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     check for missing prerequisite headers?\" >&5\n+echo \"$as_me: WARNING: $ac_header:     check for missing prerequisite headers?\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: see the Autoconf documentation\" >&5\n+echo \"$as_me: WARNING: $ac_header: see the Autoconf documentation\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&5\n+echo \"$as_me: WARNING: $ac_header:     section \\\"Present But Cannot Be Compiled\\\"\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: proceeding with the preprocessor's result\" >&5\n+echo \"$as_me: WARNING: $ac_header: proceeding with the preprocessor's result\" >&2;}\n+    { echo \"$as_me:$LINENO: WARNING: $ac_header: in the future, the compiler will take precedence\" >&5\n+echo \"$as_me: WARNING: $ac_header: in the future, the compiler will take precedence\" >&2;}\n+    (\n+      cat <<\\_ASBOX\n+## ----------------------------------------- ##\n+## Report this to the package-unused lists.  ##\n+## ----------------------------------------- ##\n+_ASBOX\n+    ) |\n+      sed \"s/^/$as_me: WARNING:     /\" >&2\n+    ;;\n+esac\n+echo \"$as_me:$LINENO: checking for $ac_header\" >&5\n+echo $ECHO_N \"checking for $ac_header... $ECHO_C\" >&6\n+if eval \"test \\\"\\${$as_ac_Header+set}\\\" = set\"; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+  eval \"$as_ac_Header=\\$ac_header_preproc\"\n+fi\n+echo \"$as_me:$LINENO: result: `eval echo '${'$as_ac_Header'}'`\" >&5\n+echo \"${ECHO_T}`eval echo '${'$as_ac_Header'}'`\" >&6\n+\n+fi\n+if test `eval echo '${'$as_ac_Header'}'` = yes; then\n+  cat >>confdefs.h <<_ACEOF\n+#define `echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n+_ACEOF\n+ ac_has_complex_h=yes\n+else\n+  ac_has_complex_h=no\n+fi\n+\n+done\n+\n+  ac_c99_complex_tr1=no;\n+  if test x\"$ac_has_complex_h\" = x\"yes\"; then\n+    echo \"$as_me:$LINENO: checking for ISO C99 support to TR1 in <complex.h>\" >&5\n+echo $ECHO_N \"checking for ISO C99 support to TR1 in <complex.h>... $ECHO_C\" >&6\n+    cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <complex.h>\n+int\n+main ()\n+{\n+typedef __complex__ float float_type; float_type tmpf;\n+\t            cacosf(tmpf);\n+\t            casinf(tmpf);\n+\t            catanf(tmpf);\n+\t            cacoshf(tmpf);\n+\t            casinhf(tmpf);\n+\t            catanhf(tmpf);\n+\t\t    typedef __complex__ double double_type; double_type tmpd;\n+\t            cacos(tmpd);\n+\t            casin(tmpd);\n+\t            catan(tmpd);\n+\t            cacosh(tmpd);\n+\t            casinh(tmpd);\n+\t            catanh(tmpd);\n+\t\t    typedef __complex__ long double ld_type; ld_type tmpld;\n+\t            cacosl(tmpld);\n+\t            casinl(tmpld);\n+\t            catanl(tmpld);\n+\t            cacoshl(tmpld);\n+\t            casinhl(tmpld);\n+\t            catanhl(tmpld);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_c99_complex_tr1=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_c99_complex_tr1=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+  fi\n+  echo \"$as_me:$LINENO: result: $ac_c99_complex_tr1\" >&5\n+echo \"${ECHO_T}$ac_c99_complex_tr1\" >&6\n+  if test x\"$ac_c99_complex_tr1\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_C99_COMPLEX_TR1 1\n+_ACEOF\n+\n+  fi\n+\n+  # Check for the existence of <ctype.h> functions.\n+  echo \"$as_me:$LINENO: checking for ISO C99 support to TR1 in <ctype.h>\" >&5\n+echo $ECHO_N \"checking for ISO C99 support to TR1 in <ctype.h>... $ECHO_C\" >&6\n+  if test \"${ac_c99_ctype_tr1+set}\" = set; then\n+  echo $ECHO_N \"(cached) $ECHO_C\" >&6\n+else\n+\n+  cat >conftest.$ac_ext <<_ACEOF\n+/* confdefs.h.  */\n+_ACEOF\n+cat confdefs.h >>conftest.$ac_ext\n+cat >>conftest.$ac_ext <<_ACEOF\n+/* end confdefs.h.  */\n+#include <ctype.h>\n+int\n+main ()\n+{\n+isblank(0);\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+rm -f conftest.$ac_objext\n+if { (eval echo \"$as_me:$LINENO: \\\"$ac_compile\\\"\") >&5\n+  (eval $ac_compile) 2>conftest.er1\n+  ac_status=$?\n+  grep -v '^ *+' conftest.er1 >conftest.err\n+  rm -f conftest.er1\n+  cat conftest.err >&5\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); } &&\n+\t { ac_try='test -z \"$ac_cxx_werror_flag\"\n+\t\t\t || test ! -s conftest.err'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; } &&\n+\t { ac_try='test -s conftest.$ac_objext'\n+  { (eval echo \"$as_me:$LINENO: \\\"$ac_try\\\"\") >&5\n+  (eval $ac_try) 2>&5\n+  ac_status=$?\n+  echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n+  (exit $ac_status); }; }; then\n+  ac_c99_ctype_tr1=yes\n+else\n+  echo \"$as_me: failed program was:\" >&5\n+sed 's/^/| /' conftest.$ac_ext >&5\n+\n+ac_c99_ctype_tr1=no\n+fi\n+rm -f conftest.err conftest.$ac_objext conftest.$ac_ext\n+\n+fi\n+\n+  echo \"$as_me:$LINENO: result: $ac_c99_ctype_tr1\" >&5\n+echo \"${ECHO_T}$ac_c99_ctype_tr1\" >&6\n+  if test x\"$ac_c99_ctype_tr1\" = x\"yes\"; then\n+\n+cat >>confdefs.h <<\\_ACEOF\n+#define _GLIBCXX_USE_C99_CTYPE_TR1 1\n+_ACEOF\n+\n+  fi\n+\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+\n+\n   # For TLS support.\n \n    # Check whether --enable-tls or --disable-tls was given."}, {"sha": "f14e2396683693dd3e2501bf236ceefaa7982bef", "filename": "libstdc++-v3/configure.ac", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.ac?ref=bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "patch": "@@ -157,6 +157,9 @@ if $GLIBCXX_IS_NATIVE; then\n   # For LFS support.\n   GLIBCXX_CHECK_LFS\n \n+  # For C99 support to TR1.\n+  GLIBCXX_CHECK_C99_TR1\n+\n   # For TLS support.\n   GCC_CHECK_TLS\n "}, {"sha": "dc66cbbfc6f1001893e5aeb0ba4bb163bd014f0b", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "patch": "@@ -484,6 +484,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/bind_repeat.h \\\n \t${tr1_srcdir}/bind_iterate.h \\\n \t${tr1_srcdir}/boost_shared_ptr.h \\\n+\t${tr1_srcdir}/cctype \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/functional \\"}, {"sha": "426635129608076876aa367a87fe1d65bbf921a8", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "patch": "@@ -701,6 +701,7 @@ tr1_headers = \\\n \t${tr1_srcdir}/bind_repeat.h \\\n \t${tr1_srcdir}/bind_iterate.h \\\n \t${tr1_srcdir}/boost_shared_ptr.h \\\n+\t${tr1_srcdir}/cctype \\\n \t${tr1_srcdir}/common.h \\\n \t${tr1_srcdir}/complex \\\n \t${tr1_srcdir}/functional \\"}, {"sha": "09db6fba36a4c3ba450e916436602a1e12ea7f99", "filename": "libstdc++-v3/include/tr1/cctype", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcctype", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcctype", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcctype?ref=bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "patch": "@@ -0,0 +1,56 @@\n+// TR1 cctype -*- C++ -*-\n+\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+/** @file \n+ *  This is a TR1 C++ Library header. \n+ */\n+\n+#ifndef _TR1_CCTYPE\n+#define _TR1_CCTYPE 1\n+\n+#include <bits/c++config.h>\n+#include <ctype.h>\n+\n+#if _GLIBCXX_USE_C99_CTYPE_TR1\n+\n+#undef isblank\n+\n+// namespace std::tr1\n+namespace std\n+{\n+_GLIBCXX_BEGIN_NAMESPACE(tr1)\n+\n+  using ::isblank;\n+\n+_GLIBCXX_END_NAMESPACE\n+}\n+\n+#endif\n+\n+#endif"}, {"sha": "1ba6157d0ccf8a238d6b5705288b49abeeaae74e", "filename": "libstdc++-v3/include/tr1/complex", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Fcomplex?ref=bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "patch": "@@ -64,7 +64,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return std::complex<_Tp>(__pi_2 - __t.real(), -__t.imag());\n     }\n \n-#if _GLIBCXX_USE_C99_COMPLEX\n+#if _GLIBCXX_USE_C99_COMPLEX_TR1\n   inline __complex__ float\n   __complex_acos(__complex__ float __z)\n   { return __builtin_cacosf(__z); }\n@@ -100,7 +100,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return std::complex<_Tp>(__t.imag(), -__t.real());\n     }\n \n-#if _GLIBCXX_USE_C99_COMPLEX\n+#if _GLIBCXX_USE_C99_COMPLEX_TR1\n   inline __complex__ float\n   __complex_asin(__complex__ float __z)\n   { return __builtin_casinf(__z); }\n@@ -144,7 +144,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t\t       _Tp(0.25) * log(__num / __den));\n     }\n \n-#if _GLIBCXX_USE_C99_COMPLEX\n+#if _GLIBCXX_USE_C99_COMPLEX_TR1\n   inline __complex__ float\n   __complex_atan(__complex__ float __z)\n   { return __builtin_catanf(__z); }\n@@ -183,7 +183,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return std::log(__t + __z);\n     }\n \n-#if _GLIBCXX_USE_C99_COMPLEX\n+#if _GLIBCXX_USE_C99_COMPLEX_TR1\n   inline __complex__ float\n   __complex_acosh(__complex__ float __z)\n   { return __builtin_cacoshf(__z); }\n@@ -222,7 +222,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       return std::log(__t + __z);\n     }\n \n-#if _GLIBCXX_USE_C99_COMPLEX\n+#if _GLIBCXX_USE_C99_COMPLEX_TR1\n   inline __complex__ float\n   __complex_asinh(__complex__ float __z)\n   { return __builtin_casinhf(__z); }\n@@ -266,7 +266,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \t\t\t       _Tp(0.5) * atan2(_Tp(2.0) * __z.imag(), __x));\n     }\n \n-#if _GLIBCXX_USE_C99_COMPLEX\n+#if _GLIBCXX_USE_C99_COMPLEX_TR1\n   inline __complex__ float\n   __complex_atanh(__complex__ float __z)\n   { return __builtin_catanhf(__z); }"}, {"sha": "9665a60e0f22419aff1bd2a9f6a1d0ff2ac754b9", "filename": "libstdc++-v3/testsuite/tr1/8_c_compatibility/cctype/functions.cc", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcctype%2Ffunctions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd2bb1ea59def32f67e51e844bb7fed3fbd8a121/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcctype%2Ffunctions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F8_c_compatibility%2Fcctype%2Ffunctions.cc?ref=bd2bb1ea59def32f67e51e844bb7fed3fbd8a121", "patch": "@@ -0,0 +1,38 @@\n+// 2006-01-25  Paolo Carlini  <pcarlini@suse.de>\n+//\n+// Copyright (C) 2006 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+//\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+//\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 8.4 Additions to header <cctype>\n+\n+#include <tr1/cctype>\n+\n+void test01(int r = 0)\n+{\n+#if _GLIBCXX_USE_C99_CTYPE_TR1\n+  r = std::tr1::isblank(0);\n+#else\n+  r = 0;\n+#endif\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}