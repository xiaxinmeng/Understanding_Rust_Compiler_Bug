{"sha": "1701800580852987a23d00c45c3e0d1c30b095da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTcwMTgwMDU4MDg1Mjk4N2EyM2QwMGM0NWMzZTBkMWMzMGIwOTVkYQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2016-11-13T20:54:27Z"}, "committer": {"name": "Ville Voutilainen", "email": "ville@gcc.gnu.org", "date": "2016-11-13T20:54:27Z"}, "message": "Implement P0403R1, Literal suffixes for basic_string_view.\n\n* include/std/string_view\n(operator\"\"sv(const char*, size_t)): New.\n(operator\"\"sv(const wchar_t*, size_t)): Likewise.\n(operator\"\"sv(const char16_t*, size_t)): Likewise.\n(operator\"\"sv(const char32_t*, size_t)): Likewise.\n* testsuite/21_strings/basic_string_view/literals/types.cc: New.\n* testsuite/21_strings/basic_string_view/literals/values.cc: Likewise.\n* testsuite/experimental/string_view/literals/values.cc: Add\ntests for literals with embedded NULs.\n\nFrom-SVN: r242367", "tree": {"sha": "0c44d2f36ad4d9d5a494dbcdf9557fc3c380fee5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c44d2f36ad4d9d5a494dbcdf9557fc3c380fee5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1701800580852987a23d00c45c3e0d1c30b095da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1701800580852987a23d00c45c3e0d1c30b095da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1701800580852987a23d00c45c3e0d1c30b095da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1701800580852987a23d00c45c3e0d1c30b095da/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "975672f3573329b6ef9f687b706c566944a5887f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/975672f3573329b6ef9f687b706c566944a5887f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/975672f3573329b6ef9f687b706c566944a5887f"}], "stats": {"total": 188, "additions": 188, "deletions": 0}, "files": [{"sha": "3df60de099734a7750853ba74391b7c5e435a0c8", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1701800580852987a23d00c45c3e0d1c30b095da/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1701800580852987a23d00c45c3e0d1c30b095da/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1701800580852987a23d00c45c3e0d1c30b095da", "patch": "@@ -1,3 +1,16 @@\n+2016-11-13  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tImplement P0403R1, Literal suffixes for basic_string_view.\n+\t* include/std/string_view\n+\t(operator\"\"sv(const char*, size_t)): New.\n+\t(operator\"\"sv(const wchar_t*, size_t)): Likewise.\n+\t(operator\"\"sv(const char16_t*, size_t)): Likewise.\n+\t(operator\"\"sv(const char32_t*, size_t)): Likewise.\n+\t* testsuite/21_strings/basic_string_view/literals/types.cc: New.\n+\t* testsuite/21_strings/basic_string_view/literals/values.cc: Likewise.\n+\t* testsuite/experimental/string_view/literals/values.cc: Add\n+\ttests for literals with embedded NULs.\n+\n 2016-11-12  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* src/filesystem/ops.cc (is_empty): Fix typo in exception message."}, {"sha": "cf728dd83e97fc4b08678474e65222aaf11bb2f9", "filename": "libstdc++-v3/include/std/string_view", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1701800580852987a23d00c45c3e0d1c30b095da/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1701800580852987a23d00c45c3e0d1c30b095da/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstring_view?ref=1701800580852987a23d00c45c3e0d1c30b095da", "patch": "@@ -640,6 +640,36 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     { };\n #endif\n \n+  inline namespace literals\n+  {\n+  inline namespace string_view_literals\n+  {\n+  _GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+    inline constexpr basic_string_view<char>\n+    operator\"\"sv(const char* __str, size_t __len)\n+    { return basic_string_view<char>{__str, __len}; }\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+    inline constexpr basic_string_view<wchar_t>\n+    operator\"\"sv(const wchar_t* __str, size_t __len)\n+    { return basic_string_view<wchar_t>{__str, __len}; }\n+#endif\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+    inline constexpr basic_string_view<char16_t>\n+    operator\"\"sv(const char16_t* __str, size_t __len)\n+    { return basic_string_view<char16_t>{__str, __len}; }\n+\n+    inline constexpr basic_string_view<char32_t>\n+    operator\"\"sv(const char32_t* __str, size_t __len)\n+    { return basic_string_view<char32_t>{__str, __len}; }\n+#endif\n+\n+  _GLIBCXX_END_NAMESPACE_VERSION\n+  } // namespace string_literals\n+  } // namespace literals\n+\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace std\n "}, {"sha": "42e8b16070ef1aaed0e29157a89566c5a5504401", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/literals/types.cc", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1701800580852987a23d00c45c3e0d1c30b095da/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1701800580852987a23d00c45c3e0d1c30b095da/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Ftypes.cc?ref=1701800580852987a23d00c45c3e0d1c30b095da", "patch": "@@ -0,0 +1,45 @@\n+// { dg-options \"-std=gnu++17\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <type_traits>\n+\n+void\n+test01()\n+{\n+  using namespace std::literals::string_view_literals;\n+\n+  static_assert(std::is_same<decltype(\"Hello\"sv), std::string_view>::value,\n+\t\t\"\\\"Hello\\\"s is std::string_view\");\n+\n+  static_assert(std::is_same<decltype(u8\"Hello\"sv), std::string_view>::value,\n+\t\t\"u8\\\"Hello\\\"s is std::string_view\");\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  static_assert(std::is_same<decltype(L\"Hello\"sv), std::wstring_view>::value,\n+\t\t\"L\\\"Hello\\\"s is std::wstring_view\");\n+#endif\n+\n+  static_assert(std::is_same<decltype(u\"Hello\"sv), std::u16string_view>::value,\n+\t\t\"u\\\"Hello\\\"s is std::u16string_view\");\n+\n+  static_assert(std::is_same<decltype(U\"Hello\"sv), std::u32string_view>::value,\n+\t\t\"U\\\"Hello\\\"s is std::u32string_view\");\n+}"}, {"sha": "bbaa70e854ae6f367c5d99eede5f91ddd461e127", "filename": "libstdc++-v3/testsuite/21_strings/basic_string_view/literals/values.cc", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1701800580852987a23d00c45c3e0d1c30b095da/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1701800580852987a23d00c45c3e0d1c30b095da/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F21_strings%2Fbasic_string_view%2Fliterals%2Fvalues.cc?ref=1701800580852987a23d00c45c3e0d1c30b095da", "patch": "@@ -0,0 +1,72 @@\n+// { dg-options \"-std=gnu++17\" }\n+\n+// Copyright (C) 2013-2016 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <string_view>\n+#include <testsuite_hooks.h>\n+\n+void\n+test01()\n+{\n+  using namespace std::literals::string_view_literals;\n+\n+  std::string_view planet = \"Mercury\"sv;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wstring_view wplanet = L\"Venus\"sv;\n+#endif\n+  std::string_view u8planet = u8\"Mars\"sv;\n+  std::u16string_view u16planet = u\"Jupiter\"sv;\n+  std::u32string_view u32planet = U\"Saturn\"sv;\n+\n+  VERIFY( planet == std::string_view(\"Mercury\") );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( wplanet == std::wstring_view(L\"Venus\") );\n+#endif\n+  VERIFY( u8planet == std::string_view(u8\"Mars\") );\n+  VERIFY( u16planet == std::u16string_view(u\"Jupiter\") );\n+  VERIFY( u32planet == std::u32string_view(U\"Saturn\") );\n+}\n+\n+void\n+test02()\n+{\n+  using namespace std::literals::string_view_literals;\n+\n+  std::string_view planet_cratered = \"Mercury\\0cratered\"sv;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::wstring_view wplanet_cratered = L\"Venus\\0cratered\"sv;\n+#endif\n+  std::string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n+  std::u16string_view u16planet_cratered = u\"Jupiter\\0cratered\"sv;\n+  std::u32string_view u32planet_cratered = U\"Saturn\\0cratered\"sv;\n+\n+  VERIFY( planet_cratered == std::string_view(\"Mercury\\0cratered\", 16) );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( wplanet_cratered == std::wstring_view(L\"Venus\\0cratered\", 14) );\n+#endif\n+  VERIFY( u8planet_cratered == std::string_view(u8\"Mars\\0cratered\", 13) );\n+  VERIFY( u16planet_cratered == std::u16string_view(u\"Jupiter\\0cratered\", 16) );\n+  VERIFY( u32planet_cratered == std::u32string_view(U\"Saturn\\0cratered\", 15) );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "b51fd4555ff196c4a8f299b3561866915c33f54f", "filename": "libstdc++-v3/testsuite/experimental/string_view/literals/values.cc", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1701800580852987a23d00c45c3e0d1c30b095da/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1701800580852987a23d00c45c3e0d1c30b095da/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fexperimental%2Fstring_view%2Fliterals%2Fvalues.cc?ref=1701800580852987a23d00c45c3e0d1c30b095da", "patch": "@@ -42,8 +42,36 @@ test01()\n   VERIFY( u32planet == std::experimental::u32string_view(U\"Saturn\") );\n }\n \n+void\n+test02()\n+{\n+  using namespace std::experimental::literals::string_view_literals;\n+\n+  std::experimental::string_view planet_cratered = \"Mercury\\0cratered\"sv;\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  std::experimental::wstring_view wplanet_cratered = L\"Venus\\0cratered\"sv;\n+#endif\n+  std::experimental::string_view u8planet_cratered = u8\"Mars\\0cratered\"sv;\n+  std::experimental::u16string_view u16planet_cratered = u\"Jupiter\\0cratered\"sv;\n+  std::experimental::u32string_view u32planet_cratered = U\"Saturn\\0cratered\"sv;\n+\n+  VERIFY( planet_cratered ==\n+\t  std::experimental::string_view(\"Mercury\\0cratered\", 16) );\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  VERIFY( wplanet_cratered ==\n+\t  std::experimental::wstring_view(L\"Venus\\0cratered\", 14) );\n+#endif\n+  VERIFY( u8planet_cratered ==\n+\t  std::experimental::string_view(u8\"Mars\\0cratered\", 13) );\n+  VERIFY( u16planet_cratered ==\n+\t  std::experimental::u16string_view(u\"Jupiter\\0cratered\", 16) );\n+  VERIFY( u32planet_cratered ==\n+\t  std::experimental::u32string_view(U\"Saturn\\0cratered\", 15) );\n+}\n+\n int\n main()\n {\n   test01();\n+  test02();\n }"}]}