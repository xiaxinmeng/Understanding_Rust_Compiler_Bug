{"sha": "260359e35de7fcc0d7746cdc3983857fba1b9f7a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYwMzU5ZTM1ZGU3ZmNjMGQ3NzQ2Y2RjMzk4Mzg1N2ZiYTFiOWY3YQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-17T13:56:55Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-02-17T13:56:55Z"}, "message": "[multiple changes]\n\n2012-02-17  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_dim.adb, sem_dim.ads, s-tasren.adb, prj.adb, prj.ads, freeze.adb,\n\tsem_res.adb, exp_ch4.adb, sinput.adb, sinput.ads, exp_aggr.adb,\n\texp_intr.adb, s-os_lib.adb: Minor reformatting.\n\n2012-02-17  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch6.adb (Is_Non_Overriding_Operation): Add warning if the\n\told operation is abstract, the relevant type is not abstract,\n\tand the new subprogram fails to override.\n\nFrom-SVN: r184336", "tree": {"sha": "e139ece8778dadcfdec61d440ca2acd7abacbab4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e139ece8778dadcfdec61d440ca2acd7abacbab4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/260359e35de7fcc0d7746cdc3983857fba1b9f7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260359e35de7fcc0d7746cdc3983857fba1b9f7a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/260359e35de7fcc0d7746cdc3983857fba1b9f7a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/260359e35de7fcc0d7746cdc3983857fba1b9f7a/comments", "author": null, "committer": null, "parents": [{"sha": "bae868fba9ff95c0f9d6f8bd2d578592f8714d54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bae868fba9ff95c0f9d6f8bd2d578592f8714d54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bae868fba9ff95c0f9d6f8bd2d578592f8714d54"}], "stats": {"total": 141, "additions": 84, "deletions": 57}, "files": [{"sha": "f500453fbd896e9f2c99d74f3d63926635ca278b", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -1,3 +1,15 @@\n+2012-02-17  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_dim.adb, sem_dim.ads, s-tasren.adb, prj.adb, prj.ads, freeze.adb,\n+\tsem_res.adb, exp_ch4.adb, sinput.adb, sinput.ads, exp_aggr.adb,\n+\texp_intr.adb, s-os_lib.adb: Minor reformatting.\n+\n+2012-02-17  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch6.adb (Is_Non_Overriding_Operation): Add warning if the\n+\told operation is abstract, the relevant type is not abstract,\n+\tand the new subprogram fails to override.\n+\n 2012-02-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/trans.c (Identifier_to_gnu): Move block retrieving the"}, {"sha": "8cfbe3bac594e1d46007c209ca576337554a4fed", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -5157,9 +5157,9 @@ package body Exp_Aggr is\n       -- Compile_Time_Known_Composite_Value --\n       ----------------------------------------\n \n-      function Compile_Time_Known_Composite_Value (N : Node_Id) return Boolean\n+      function Compile_Time_Known_Composite_Value\n+        (N : Node_Id) return Boolean\n       is\n-\n       begin\n          --  If we have an entity name, then see if it is the name of a\n          --  constant and if so, test the corresponding constant value.\n@@ -5168,15 +5168,14 @@ package body Exp_Aggr is\n             declare\n                E : constant Entity_Id := Entity (N);\n                V : Node_Id;\n-\n             begin\n                if Ekind (E) /= E_Constant then\n                   return False;\n+               else\n+                  V := Constant_Value (E);\n+                  return Present (V)\n+                    and then Compile_Time_Known_Composite_Value (V);\n                end if;\n-\n-               V := Constant_Value (E);\n-               return Present (V)\n-                 and then Compile_Time_Known_Composite_Value (V);\n             end;\n \n          --  We have a value, see if it is compile time known"}, {"sha": "d90b54c1e3ec1a0bc247d1ad339157323384bdaa", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -3572,21 +3572,20 @@ package body Exp_Ch4 is\n                              (Etype (Pool), Name_Simple_Storage_Pool_Type))\n             then\n                declare\n-                  Alloc_Op  : Entity_Id := Get_Name_Entity_Id (Name_Allocate);\n                   Pool_Type : constant Entity_Id := Base_Type (Etype (Pool));\n-\n+                  Alloc_Op  : Entity_Id;\n                begin\n+                  Alloc_Op := Get_Name_Entity_Id (Name_Allocate);\n                   while Present (Alloc_Op) loop\n                      if Scope (Alloc_Op) = Scope (Pool_Type)\n                        and then Present (First_Formal (Alloc_Op))\n                        and then Etype (First_Formal (Alloc_Op)) = Pool_Type\n                      then\n                         Set_Procedure_To_Call (N, Alloc_Op);\n-\n                         exit;\n+                     else\n+                        Alloc_Op := Homonym (Alloc_Op);\n                      end if;\n-\n-                     Alloc_Op := Homonym (Alloc_Op);\n                   end loop;\n                end;\n "}, {"sha": "5df8b3718637bbf47b850ff4f4d64d3bcc7585b5", "filename": "gcc/ada/exp_intr.adb", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fexp_intr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fexp_intr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_intr.adb?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -1094,21 +1094,20 @@ package body Exp_Intr is\n                           (Etype (Pool), Name_Simple_Storage_Pool_Type))\n          then\n             declare\n-               Dealloc_Op  : Entity_Id := Get_Name_Entity_Id (Name_Deallocate);\n-               Pool_Type : constant Entity_Id := Base_Type (Etype (Pool));\n-\n+               Pool_Type  : constant Entity_Id := Base_Type (Etype (Pool));\n+               Dealloc_Op : Entity_Id;\n             begin\n+               Dealloc_Op := Get_Name_Entity_Id (Name_Deallocate);\n                while Present (Dealloc_Op) loop\n                   if Scope (Dealloc_Op) = Scope (Pool_Type)\n                     and then Present (First_Formal (Dealloc_Op))\n                     and then Etype (First_Formal (Dealloc_Op)) = Pool_Type\n                   then\n                      Set_Procedure_To_Call (Free_Node, Dealloc_Op);\n-\n                      exit;\n+                  else\n+                     Dealloc_Op := Homonym (Dealloc_Op);\n                   end if;\n-\n-                  Dealloc_Op := Homonym (Dealloc_Op);\n                end loop;\n             end;\n \n@@ -1140,8 +1139,8 @@ package body Exp_Intr is\n          if Is_Class_Wide_Type (Desig_T)\n            or else\n             (Is_Array_Type (Desig_T)\n-               and then not Is_Constrained (Desig_T)\n-               and then Is_Packed (Desig_T))\n+              and then not Is_Constrained (Desig_T)\n+              and then Is_Packed (Desig_T))\n          then\n             declare\n                Deref    : constant Node_Id :="}, {"sha": "6325b4521c308bc9903468ad163f88e85f80870c", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -4114,7 +4114,6 @@ package body Freeze is\n             if Present (Get_Rep_Pragma (E, Name_Simple_Storage_Pool_Type))\n               and then (Is_Base_Type (E) or else Has_Private_Declaration (E))\n             then\n-\n                --  If the type is marked Has_Private_Declaration, then this is\n                --  a full type for a private type that was specified with the\n                --  pragma Simple_Storage_Pool_Type, and here we ensure that the\n@@ -4127,7 +4126,6 @@ package body Freeze is\n                     and then not Is_Private_Type (E)\n                   then\n                      Error_Msg_Name_1 := Name_Simple_Storage_Pool_Type;\n-\n                      Error_Msg_N\n                        (\"pragma% can only apply to full type that is an \" &\n                         \"explicitly limited type\", E);\n@@ -4197,6 +4195,7 @@ package body Freeze is\n                      end if;\n \n                      if Etype (Pool_Op_Formal) /= Expected_Type then\n+\n                         --  If the pool type was expected for this formal, then\n                         --  this will not be considered a candidate operation\n                         --  for the simple pool, so we unset OK_Formal so that\n@@ -4243,8 +4242,8 @@ package body Freeze is\n                   begin\n                      pragma Assert\n                        (Op_Name = Name_Allocate\n-                          or else Op_Name = Name_Deallocate\n-                          or else Op_Name = Name_Storage_Size);\n+                         or else Op_Name = Name_Deallocate\n+                         or else Op_Name = Name_Storage_Size);\n \n                      Error_Msg_Name_1 := Op_Name;\n \n@@ -4270,7 +4269,6 @@ package body Freeze is\n                               Validate_Simple_Pool_Op_Formal\n                                 (Op, Formal, E_In_Parameter, Pool_Type,\n                                  \"Pool\", Is_OK);\n-\n                            else\n                               Validate_Simple_Pool_Op_Formal\n                                 (Op, Formal, E_In_Out_Parameter, Pool_Type,\n@@ -4295,7 +4293,6 @@ package body Freeze is\n                               Validate_Simple_Pool_Op_Formal\n                                 (Op, Formal, E_Out_Parameter,\n                                  Address_Type, \"Storage_Address\", Is_OK);\n-\n                            elsif Op_Name = Name_Deallocate then\n                               Validate_Simple_Pool_Op_Formal\n                                 (Op, Formal, E_In_Parameter,\n@@ -4310,7 +4307,6 @@ package body Freeze is\n                               Validate_Simple_Pool_Op_Formal\n                                 (Op, Formal, E_In_Parameter,\n                                  Stg_Cnt_Type, \"Size_In_Storage_Units\", Is_OK);\n-\n                               Validate_Simple_Pool_Op_Formal\n                                 (Op, Formal, E_In_Parameter,\n                                  Stg_Cnt_Type, \"Alignment\", Is_OK);\n@@ -4338,6 +4334,7 @@ package body Freeze is\n                                      \"storage pool type\", Pool_Type);\n \n                      elsif Present (Found_Op) then\n+\n                         --  Simple pool operations can't be abstract\n \n                         if Is_Abstract_Subprogram (Found_Op) then\n@@ -4373,9 +4370,7 @@ package body Freeze is\n \n                begin\n                   Validate_Simple_Pool_Operation (Name_Allocate);\n-\n                   Validate_Simple_Pool_Operation (Name_Deallocate);\n-\n                   Validate_Simple_Pool_Operation (Name_Storage_Size);\n                end Validate_Simple_Pool_Ops;\n             end if;"}, {"sha": "c8c5958aad5e4fbfe21177164ae050a2e8187e82", "filename": "gcc/ada/prj.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fprj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fprj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.adb?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -1893,6 +1893,7 @@ package body Prj is\n       is\n          Agg : Aggregated_Project_List;\n          Ctx : Project_Context;\n+\n       begin\n          Action (Project, Tree, Context);\n \n@@ -1901,8 +1902,7 @@ package body Prj is\n               (In_Aggregate_Lib      => True,\n                From_Encapsulated_Lib =>\n                  Context.From_Encapsulated_Lib\n-                   or else\n-                 Project.Standalone_Library = Encapsulated);\n+                   or else Project.Standalone_Library = Encapsulated);\n \n             Agg := Project.Aggregated_Projects;\n             while Agg /= null loop\n@@ -1912,6 +1912,8 @@ package body Prj is\n          end if;\n       end Recursive_Process;\n \n+   --  Start of processing for For_Project_And_Aggregated_Context\n+\n    begin\n       Recursive_Process\n         (Root_Project, Root_Tree, Project_Context'(False, False));"}, {"sha": "877d1b59b390237eb024fb80ee501597895e623d", "filename": "gcc/ada/prj.ads", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fprj.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fprj.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fprj.ads?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -1621,7 +1621,7 @@ package Prj is\n       With_State         : in out State;\n       Include_Aggregated : Boolean := True;\n       Imported_First     : Boolean := False);\n-   --  As above but with an associated context\n+   --  As for For_Every_Project_Imported but with an associated context\n \n    generic\n       with procedure Action\n@@ -1631,7 +1631,7 @@ package Prj is\n    procedure For_Project_And_Aggregated_Context\n      (Root_Project : Project_Id;\n       Root_Tree    : Project_Tree_Ref);\n-   --  As above but with an associated context\n+   --  As for For_Project_And_Aggregated but with an associated context\n \n    function Extend_Name\n      (File        : File_Name_Type;"}, {"sha": "100b174bf2c32c46cff11b3558437c6d85ae8d20", "filename": "gcc/ada/s-os_lib.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fs-os_lib.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fs-os_lib.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-os_lib.adb?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -1695,12 +1695,11 @@ package body System.OS_Lib is\n                else\n                   Res (J) := Arg (K);\n                end if;\n-\n             end loop;\n \n             if Quote_Needed then\n \n-               --  If null terminated string, put the quote before\n+               --  Case of null terminated string\n \n                if Res (J) = ASCII.NUL then\n \n@@ -1711,7 +1710,7 @@ package body System.OS_Lib is\n                      J := J + 1;\n                   end if;\n \n-                  --  Then adds the quote and the NUL character\n+                  --  Put a quote just before the null at the end\n \n                   Res (J) := '\"';\n                   J := J + 1;"}, {"sha": "16873e85e01bf7496e8f3b3c5e92fab95f327b21", "filename": "gcc/ada/s-tasren.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fs-tasren.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fs-tasren.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasren.adb?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -110,8 +110,8 @@ package body System.Tasking.Rendezvous is\n    procedure Local_Complete_Rendezvous (Ex : Ada.Exceptions.Exception_Id);\n    --  Internal version of Complete_Rendezvous, used to implement\n    --  Complete_Rendezvous and Exceptional_Complete_Rendezvous.\n-   --  Should be called holding no locks, generally with abort not yet\n-   --  deferred.\n+   --  Should be called holding no locks, generally with abort\n+   --  not yet deferred.\n \n    procedure Boost_Priority (Call : Entry_Call_Link; Acceptor : Task_Id);\n    pragma Inline (Boost_Priority);\n@@ -538,7 +538,7 @@ package body System.Tasking.Rendezvous is\n       Called_PO              : STPE.Protection_Entries_Access;\n       Acceptor_Prev_Priority : Integer;\n \n-      Ceiling_Violation  : Boolean;\n+      Ceiling_Violation : Boolean;\n \n       use type Ada.Exceptions.Exception_Id;\n       procedure Transfer_Occurrence"}, {"sha": "8df63dc958a1367aa0e3628d953c4c193cc7d2f0", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -188,9 +188,9 @@ package body Sem_Ch6 is\n       New_E  : Entity_Id) return Boolean;\n    --  Enforce the rule given in 12.3(18): a private operation in an instance\n    --  overrides an inherited operation only if the corresponding operation\n-   --  was overriding in the generic. This can happen for primitive operations\n-   --  of types derived (in the generic unit) from formal private or formal\n-   --  derived types.\n+   --  was overriding in the generic. This needs to be checked for primitive\n+   --  operations of types derived (in the generic unit) from formal private\n+   --  or formal derived types.\n \n    procedure Make_Inequality_Operator (S : Entity_Id);\n    --  Create the declaration for an inequality operator that is implicitly\n@@ -7844,6 +7844,22 @@ package body Sem_Ch6 is\n                --  If no match found, then the new subprogram does not\n                --  override in the generic (nor in the instance).\n \n+               --  If the type in question is not abstract, and the subprogram\n+               --  is, this will be an error if the new operation is in the\n+               --  private part of the instance. Emit a warning now, which will\n+               --  make the subsequent error message easier to understand.\n+\n+               if not Is_Abstract_Type (F_Typ)\n+                 and then Is_Abstract_Subprogram (Prev_E)\n+                 and then In_Private_Part (Current_Scope)\n+               then\n+                  Error_Msg_Node_2 := F_Typ;\n+                  Error_Msg_NE\n+                    (\"private operation& in generic unit does not override \" &\n+                     \"any primitive operation of& (RM 12.3 (18))?\",\n+                     New_E, New_E);\n+               end if;\n+\n                return True;\n             end;\n          end if;"}, {"sha": "d28e23f57c6dc341777f851668469c5792be7962", "filename": "gcc/ada/sem_dim.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fsem_dim.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fsem_dim.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.adb?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -2247,7 +2247,8 @@ package body Sem_Dim is\n                   Package_Name := Chars (Ent);\n \n                   if Package_Name = Name_Float_IO\n-                    or else Package_Name = Name_Integer_IO\n+                       or else\n+                     Package_Name = Name_Integer_IO\n                   then\n                      return Chars (Scope (Ent)) = Name_Dim;\n                   end if;\n@@ -2512,10 +2513,13 @@ package body Sem_Dim is\n       if Is_Entity_Name (Gen_Id) then\n          Ent := Entity (Gen_Id);\n \n+         --  Is it really OK just to test names ??? why???\n+\n          if Is_Library_Level_Entity (Ent)\n            and then\n             (Chars (Ent) = Name_Float_IO\n-               or else Chars (Ent) = Name_Integer_IO)\n+               or else\n+             Chars (Ent) = Name_Integer_IO)\n          then\n             return Chars (Scope (Ent)) = Name_Dim;\n          end if;"}, {"sha": "b339ff6090e12c577d0c0378c00509ecbd415e77", "filename": "gcc/ada/sem_dim.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fsem_dim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fsem_dim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_dim.ads?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---           Copyright (C) 2011-2012, Free Software Foundation, Inc.        --\n+--          Copyright (C) 2011-2012, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --"}, {"sha": "1b2eef0a90db2eeb9a6febcd46f77abec1477173", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -4239,8 +4239,8 @@ package body Sem_Res is\n            and then Nkind (Expression (E)) = N_Function_Call\n          then\n             declare\n-               Pool : constant Entity_Id\n-                        := Associated_Storage_Pool (Root_Type (Typ));\n+               Pool : constant Entity_Id :=\n+                        Associated_Storage_Pool (Root_Type (Typ));\n             begin\n                if Present (Pool)\n                  and then"}, {"sha": "5e1ac44b617340cfe3c5c8c8a8575e2707691379", "filename": "gcc/ada/sinput.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fsinput.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fsinput.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.adb?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -250,6 +250,10 @@ package body Sinput is\n       return Name_Buffer (1 .. Name_Len);\n    end Build_Location_String;\n \n+   -------------------\n+   -- Check_For_BOM --\n+   -------------------\n+\n    procedure Check_For_BOM is\n       BOM : BOM_Kind;\n       Len : Natural;"}, {"sha": "32aab9d3966e69eb47df597940c530774d7432c2", "filename": "gcc/ada/sinput.ads", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fsinput.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/260359e35de7fcc0d7746cdc3983857fba1b9f7a/gcc%2Fada%2Fsinput.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinput.ads?ref=260359e35de7fcc0d7746cdc3983857fba1b9f7a", "patch": "@@ -544,6 +544,14 @@ package Sinput is\n    --  Functional form returning a string, which does not include a terminating\n    --  null character. The contents of Name_Buffer is destroyed.\n \n+   procedure Check_For_BOM;\n+   --  Check if the current source starts with a BOM. Scan_Ptr needs to be at\n+   --  the start of the current source. If the current source starts with a\n+   --  recognized BOM, then some flags such as Wide_Character_Encoding_Method\n+   --  are set accordingly, and the Scan_Ptr on return points past this BOM.\n+   --  An error message is output and Unrecoverable_Error raised if a non-\n+   --  recognized BOM is detected. The call has no effect if no BOM is found.\n+\n    function Get_Column_Number (P : Source_Ptr) return Column_Number;\n    --  The ones-origin column number of the specified Source_Ptr value is\n    --  determined and returned. Tab characters if present are assumed to\n@@ -712,16 +720,6 @@ package Sinput is\n    --  Writes out internal tables to current tree file using the relevant\n    --  Table.Tree_Write routines.\n \n-   procedure Check_For_BOM;\n-   --  Check if the current source starts with a BOM. Scan_Ptr needs to be at\n-   --  the start of the current source.\n-   --  If the current source starts with a recognized BOM, then some flags\n-   --  such as Wide_Character_Encoding_Method are set accordingly.\n-   --  An exception is raised if a BOM is found that indicates an unrecognized\n-   --  format.\n-   --  This procedure has no effect if there is no BOM at the beginning of the\n-   --  current source.\n-\n private\n    pragma Inline (File_Name);\n    pragma Inline (First_Mapped_Line);"}]}