{"sha": "9dbe0d83c865375f99e776e82087e653b2214380", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRiZTBkODNjODY1Mzc1Zjk5ZTc3NmU4MjA4N2U2NTNiMjIxNDM4MA==", "commit": {"author": {"name": "Aditya Kumar", "email": "hiraditya@msn.com", "date": "2015-05-22T09:10:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-05-22T09:10:29Z"}, "message": "gimple.h (gimple_expr_type): Refactor to make it concise.\n\n2015-05-22  hiraditya  <hiraditya@msn.com>\n\n        * gimple.h (gimple_expr_type): Refactor to make it concise.\n        Remove redundant if.\n\nFrom-SVN: r223529", "tree": {"sha": "49f4c33b182379b36c9044973b04b61fd288519f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/49f4c33b182379b36c9044973b04b61fd288519f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9dbe0d83c865375f99e776e82087e653b2214380", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dbe0d83c865375f99e776e82087e653b2214380", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9dbe0d83c865375f99e776e82087e653b2214380", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9dbe0d83c865375f99e776e82087e653b2214380/comments", "author": null, "committer": null, "parents": [{"sha": "476c12802dc41b7f425075e00181a9dc5968ac69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476c12802dc41b7f425075e00181a9dc5968ac69", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476c12802dc41b7f425075e00181a9dc5968ac69"}], "stats": {"total": 51, "additions": 23, "deletions": 28}, "files": [{"sha": "108fdda8a5f5341ee2cc139e3f6c6eac66726569", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbe0d83c865375f99e776e82087e653b2214380/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbe0d83c865375f99e776e82087e653b2214380/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9dbe0d83c865375f99e776e82087e653b2214380", "patch": "@@ -1,3 +1,8 @@\n+2015-05-22  hiraditya  <hiraditya@msn.com>\n+\n+\t* gimple.h (gimple_expr_type): Refactor to make it concise. Remove\n+\tredundant if.\n+\n 2015-05-22  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/65701"}, {"sha": "3a83e8f9b9a43f498681df5af612ab70f04c179e", "filename": "gcc/gimple.h", "status": "modified", "additions": 18, "deletions": 28, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9dbe0d83c865375f99e776e82087e653b2214380/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9dbe0d83c865375f99e776e82087e653b2214380/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=9dbe0d83c865375f99e776e82087e653b2214380", "patch": "@@ -5717,36 +5717,26 @@ static inline tree\n gimple_expr_type (const_gimple stmt)\n {\n   enum gimple_code code = gimple_code (stmt);\n-\n-  if (code == GIMPLE_ASSIGN || code == GIMPLE_CALL)\n+  /* In general we want to pass out a type that can be substituted\n+     for both the RHS and the LHS types if there is a possibly\n+     useless conversion involved.  That means returning the\n+     original RHS type as far as we can reconstruct it.  */\n+  if (code == GIMPLE_CALL)\n     {\n-      tree type;\n-      /* In general we want to pass out a type that can be substituted\n-         for both the RHS and the LHS types if there is a possibly\n-\t useless conversion involved.  That means returning the\n-\t original RHS type as far as we can reconstruct it.  */\n-      if (code == GIMPLE_CALL)\n-\t{\n-\t  const gcall *call_stmt = as_a <const gcall *> (stmt);\n-\t  if (gimple_call_internal_p (call_stmt)\n-\t      && gimple_call_internal_fn (call_stmt) == IFN_MASK_STORE)\n-\t    type = TREE_TYPE (gimple_call_arg (call_stmt, 3));\n-\t  else\n-\t    type = gimple_call_return_type (call_stmt);\n-\t}\n+      const gcall *call_stmt = as_a <const gcall *> (stmt);\n+      if (gimple_call_internal_p (call_stmt)\n+          && gimple_call_internal_fn (call_stmt) == IFN_MASK_STORE)\n+        return TREE_TYPE (gimple_call_arg (call_stmt, 3));\n+      else\n+        return gimple_call_return_type (call_stmt);\n+    }\n+  else if (code == GIMPLE_ASSIGN)\n+    {\n+      if (gimple_assign_rhs_code (stmt) == POINTER_PLUS_EXPR)\n+        return TREE_TYPE (gimple_assign_rhs1 (stmt));\n       else\n-\tswitch (gimple_assign_rhs_code (stmt))\n-\t  {\n-\t  case POINTER_PLUS_EXPR:\n-\t    type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n-\t    break;\n-\n-\t  default:\n-\t    /* As fallback use the type of the LHS.  */\n-\t    type = TREE_TYPE (gimple_get_lhs (stmt));\n-\t    break;\n-\t  }\n-      return type;\n+        /* As fallback use the type of the LHS.  */\n+        return TREE_TYPE (gimple_get_lhs (stmt));\n     }\n   else if (code == GIMPLE_COND)\n     return boolean_type_node;"}]}