{"sha": "ff81832f59cff40ccee928693238c92c0347a50e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4MTgzMmY1OWNmZjQwY2NlZTkyODY5MzIzOGM5MmMwMzQ3YTUwZQ==", "commit": {"author": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-01-03T09:18:22Z"}, "committer": {"name": "Eric Christopher", "email": "echristo@gcc.gnu.org", "date": "2002-01-03T09:18:22Z"}, "message": "final.c (final_scan_insn): Change 0 -> NULL_RTX in FIND_REG_INC_NOTE call.\n\n2002-01-02  Eric Christopher  <echristo@redhat.com>\n\n\t* final.c (final_scan_insn): Change 0 -> NULL_RTX in\n\tFIND_REG_INC_NOTE call. Update copyright.\n\t* loop.c (canonicalize_condition): Ditto.\n\t* reorg.c (delete_scheduled_jump): Ditto.\n\nFrom-SVN: r48506", "tree": {"sha": "68b53daa1d85b745a1161f3739cf696cc0a89478", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/68b53daa1d85b745a1161f3739cf696cc0a89478"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff81832f59cff40ccee928693238c92c0347a50e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff81832f59cff40ccee928693238c92c0347a50e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff81832f59cff40ccee928693238c92c0347a50e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff81832f59cff40ccee928693238c92c0347a50e/comments", "author": null, "committer": null, "parents": [{"sha": "6518547fe4352350baae060be843f36b227f63a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6518547fe4352350baae060be843f36b227f63a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6518547fe4352350baae060be843f36b227f63a5"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "ce9576fa4673dfd5ceb2e5f360c56125015bc139", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff81832f59cff40ccee928693238c92c0347a50e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff81832f59cff40ccee928693238c92c0347a50e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff81832f59cff40ccee928693238c92c0347a50e", "patch": "@@ -1,3 +1,10 @@\n+2002-01-02  Eric Christopher  <echristo@redhat.com>\n+\n+\t* final.c (final_scan_insn): Change 0 -> NULL_RTX in\n+\tFIND_REG_INC_NOTE call. Update copyright.\n+\t* loop.c (canonicalize_condition): Ditto.\n+\t* reorg.c (delete_scheduled_jump): Ditto.\n+\n 2002-01-03  Kazu Hirata  <kazu@hxi.com>\n \n \t* gcse.c: Fix formatting.\n@@ -152,7 +159,7 @@\n         (LOOP_MOVABLES): Fix typo.\n         (LOOP_REGS): Likewise.\n         (LOOP_IVS): Likewise.\n-\t\n+\n 2002-01-03  Graham Stott  <grahams@redhat.com>\n \n \t* cppinit.c: Update copyright date.\n@@ -344,7 +351,7 @@ Tue Jan  1 17:12:56 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n 2001-12-31  Richard Henderson  <rth@redhat.com>\n \n \t* regrename.c (build_def_use): Don't rename asm operands that\n-\twere originally hard registers. \n+\twere originally hard registers.\n \t(copyprop_hardreg_forward_1): Likewise.\n \t(find_oldest_value_reg): Copy ORIGINAL_REGNO from source.\n \t* varasm.c (make_decl_rtl): Use gen_rtx_raw_REG.  Set ORIGINAL_REGNO.\n@@ -462,7 +469,7 @@ Tue Jan  1 17:12:56 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n         * config/i386/i386.c (ix86_asm_dialect): Fix enum type.\n \n-        (override_options): Delete abs macro unused. \n+        (override_options): Delete abs macro unused.\n \n         (output_pic_addr_const): Use ASM_ATT/ASM_INTEL enumerations\n         when testing ASSEMBLER_DIALECT.\n@@ -906,16 +913,16 @@ Fri Dec 21 17:30:15 2001  Jeffrey A Law  (law@redhat.com)\n \t* builtin-attrs.def (__builtin_printf_unlocked,\n \t__builtin_fprintf_unlocked, printf_unlocked, fprintf_unlocked):\n \tMark with the __printf__ attribute.\n-\t\n+\n \t* builtins.c (expand_builtin_fputs): Add an `unlocked' parameter\n \tand set the replacement function depending on it.\n \t(expand_builtin): Skip BUILT_IN_*_UNLOCKED when not optimizing.\n \tHandle BUILT_IN_*_UNLOCKED when optimizing.\n-\t\n+\n \t* builtins.def (DEF_EXT_FALLBACK_BUILTIN,\n \tDEF_EXT_FRONT_END_LIB_BUILTIN): New macros.\n \tDeclare the \"unlocked\" stdio functions.\n-\t\n+\n \t* c-common.c (c_expand_builtin_printf, c_expand_builtin_fprintf):\n \tAdd an `unlocked' parameter and set the replacement function\n \tdepending on it."}, {"sha": "60ed60960a79d913f03439b6449833b479dcd98f", "filename": "gcc/final.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff81832f59cff40ccee928693238c92c0347a50e/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff81832f59cff40ccee928693238c92c0347a50e/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=ff81832f59cff40ccee928693238c92c0347a50e", "patch": "@@ -1,6 +1,6 @@\n /* Convert RTL to assembler code and output it, for GNU compiler.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997,\n-   1998, 1999, 2000, 2001 Free Software Foundation, Inc.\n+   1998, 1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -960,7 +960,7 @@ shorten_branches (first)\n       else if (GET_CODE (insn) == CODE_LABEL)\n \t{\n \t  rtx next;\n-\t  \n+\n \t  /* Merge in alignments computed by compute_alignments.  */\n \t  log = LABEL_TO_ALIGNMENT (insn);\n \t  if (max_log < log)\n@@ -2372,7 +2372,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t\t\t&& rtx_equal_p (SET_SRC (set), cc_status.value2)))\n \t\t  {\n \t\t    /* Don't delete insn if it has an addressing side-effect.  */\n-\t\t    if (! FIND_REG_INC_NOTE (insn, 0)\n+\t\t    if (! FIND_REG_INC_NOTE (insn, NULL_RTX)\n \t\t\t/* or if anything in it is volatile.  */\n \t\t\t&& ! volatile_refs_p (PATTERN (insn)))\n \t\t      {\n@@ -3041,7 +3041,7 @@ get_mem_expr_from_op (op, paddressp)\n   expr = get_mem_expr_from_op (op, &inner_addressp);\n   return inner_addressp ? 0 : expr;\n }\n-  \n+\n /* Output operand names for assembler instructions.  OPERANDS is the\n    operand vector, OPORDER is the order to write the operands, and NOPS\n    is the number of operands to write.  */\n@@ -3175,7 +3175,7 @@ output_asm_insn (template, operands)\n \t\t    output_operand_lossage (\"unterminated assembly dialect alternative\");\n \t\t    break;\n \t\t  }\n-\t      }\t  \n+\t      }\n \t    while (*p++ != '}');\n \t    dialect = 0;\n \t  }"}, {"sha": "4200470e02d6e416562da0696d1c8a7f98f6818d", "filename": "gcc/loop.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff81832f59cff40ccee928693238c92c0347a50e/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff81832f59cff40ccee928693238c92c0347a50e/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=ff81832f59cff40ccee928693238c92c0347a50e", "patch": "@@ -3830,7 +3830,7 @@ emit_prefetch_instructions (loop)\n \t      || GET_CODE (iv->mult_val) != CONST_INT\n \t      /* Don't handle reversed order prefetches, since they are usually\n \t\t ineffective.  Later we may be able to reverse such BIVs.  */\n-\t      || (PREFETCH_NO_REVERSE_ORDER \n+\t      || (PREFETCH_NO_REVERSE_ORDER\n \t\t  && (stride = INTVAL (iv->mult_val) * basestride) < 0)\n \t      /* Prefetching of accesses with such an extreme stride is probably\n \t\t not worthwhile, either.  */\n@@ -9087,7 +9087,7 @@ canonicalize_condition (insn, cond, reverse, earliest, want_reg)\n \n       if ((prev = prev_nonnote_insn (prev)) == 0\n \t  || GET_CODE (prev) != INSN\n-\t  || FIND_REG_INC_NOTE (prev, 0))\n+\t  || FIND_REG_INC_NOTE (prev, NULL_RTX))\n \tbreak;\n \n       set = set_of (op0, prev);"}, {"sha": "409ed7d66eabbfa3c0923d6e13f4837c887d225b", "filename": "gcc/reorg.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff81832f59cff40ccee928693238c92c0347a50e/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff81832f59cff40ccee928693238c92c0347a50e/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=ff81832f59cff40ccee928693238c92c0347a50e", "patch": "@@ -1,6 +1,6 @@\n /* Perform instruction reorganizations for delay slot filling.\n    Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000 Free Software Foundation, Inc.\n+   1999, 2000, 2001, 2002 Free Software Foundation, Inc.\n    Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu).\n    Hacked by Michael Tiemann (tiemann@cygnus.com).\n \n@@ -648,7 +648,7 @@ delete_scheduled_jump (insn)\n \t  if (GET_CODE (trial) == NOTE)\n \t    trial = prev_nonnote_insn (trial);\n \t  if (sets_cc0_p (PATTERN (trial)) != 1\n-\t      || FIND_REG_INC_NOTE (trial, 0))\n+\t      || FIND_REG_INC_NOTE (trial, NULL_RTX))\n \t    return;\n \t  if (PREV_INSN (NEXT_INSN (trial)) == trial)\n \t    delete_related_insns (trial);\n@@ -2239,11 +2239,11 @@ fill_simple_delay_slots (non_jumps_p)\n \n                int i = 2;\n \n-\t       try { \n+\t       try {\n                  f();\n \t         i = 3;\n                } catch (...) {}\n-\t       \n+\n                return i;\n \n \t     Even though `i' is a local variable, we must be sure not"}]}