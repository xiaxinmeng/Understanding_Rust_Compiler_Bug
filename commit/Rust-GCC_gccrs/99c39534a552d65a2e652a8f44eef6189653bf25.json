{"sha": "99c39534a552d65a2e652a8f44eef6189653bf25", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTljMzk1MzRhNTUyZDY1YTJlNjUyYThmNDRlZWY2MTg5NjUzYmYyNQ==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2014-06-25T20:33:38Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2014-06-25T20:33:38Z"}, "message": "interface.c (check_intents): Fix diagnostic with coindexed coarrays.\n\ngcc/fortran/\n2014-06-25  Tobias Burnus  <burnus@net-b.de>\n\n        * interface.c (check_intents): Fix diagnostic with\n        coindexed coarrays.\n\ngcc/testsuite/\n2014-06-25  Tobias Burnus  <burnus@net-b.de>\n\n        * gfortran.dg/coarray_33.f90: New.\n\nFrom-SVN: r211994", "tree": {"sha": "4c569547d37e5f8e1a4f15d6cd5c839c77544afd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c569547d37e5f8e1a4f15d6cd5c839c77544afd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/99c39534a552d65a2e652a8f44eef6189653bf25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c39534a552d65a2e652a8f44eef6189653bf25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/99c39534a552d65a2e652a8f44eef6189653bf25", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/99c39534a552d65a2e652a8f44eef6189653bf25/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c75088c80c2f661d435731dec5c3bc95376b9da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c75088c80c2f661d435731dec5c3bc95376b9da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c75088c80c2f661d435731dec5c3bc95376b9da"}], "stats": {"total": 53, "additions": 44, "deletions": 9}, "files": [{"sha": "f1ac53257680b7de8ce6f545b79d4282183dd004", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c39534a552d65a2e652a8f44eef6189653bf25/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c39534a552d65a2e652a8f44eef6189653bf25/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=99c39534a552d65a2e652a8f44eef6189653bf25", "patch": "@@ -1,3 +1,8 @@\n+2014-06-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* interface.c (check_intents): Fix diagnostic with\n+\tcoindexed coarrays.\n+\n 2014-06-25  Tobias Burnus  <burnus@net-b.de>\n \n \t* resolve.c (resolve_ordinary_assign): Don't invoke caf_send"}, {"sha": "b210d18256d59b69cb5e45c7d5b9cac3c167c28f", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c39534a552d65a2e652a8f44eef6189653bf25/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c39534a552d65a2e652a8f44eef6189653bf25/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=99c39534a552d65a2e652a8f44eef6189653bf25", "patch": "@@ -3170,37 +3170,46 @@ check_intents (gfc_formal_arglist *f, gfc_actual_arglist *a)\n \n   for (;; f = f->next, a = a->next)\n     {\n+      gfc_expr *expr;\n+\n       if (f == NULL && a == NULL)\n \tbreak;\n       if (f == NULL || a == NULL)\n \tgfc_internal_error (\"check_intents(): List mismatch\");\n \n-      if (a->expr == NULL || a->expr->expr_type != EXPR_VARIABLE)\n+      if (a->expr && a->expr->expr_type == EXPR_FUNCTION\n+\t  && a->expr->value.function.isym\n+\t  && a->expr->value.function.isym->id == GFC_ISYM_CAF_GET)\n+\texpr = a->expr->value.function.actual->expr;\n+      else\n+\texpr = a->expr;\n+\n+      if (expr == NULL || expr->expr_type != EXPR_VARIABLE)\n \tcontinue;\n \n       f_intent = f->sym->attr.intent;\n \n-      if (gfc_pure (NULL) && gfc_impure_variable (a->expr->symtree->n.sym))\n+      if (gfc_pure (NULL) && gfc_impure_variable (expr->symtree->n.sym))\n \t{\n \t  if ((f->sym->ts.type == BT_CLASS && f->sym->attr.class_ok\n \t       && CLASS_DATA (f->sym)->attr.class_pointer)\n \t      || (f->sym->ts.type != BT_CLASS && f->sym->attr.pointer))\n \t    {\n \t      gfc_error (\"Procedure argument at %L is local to a PURE \"\n \t\t\t \"procedure and has the POINTER attribute\",\n-\t\t\t &a->expr->where);\n+\t\t\t &expr->where);\n \t      return false;\n \t    }\n \t}\n \n        /* Fortran 2008, C1283.  */\n-       if (gfc_pure (NULL) && gfc_is_coindexed (a->expr))\n+       if (gfc_pure (NULL) && gfc_is_coindexed (expr))\n \t{\n \t  if (f_intent == INTENT_INOUT || f_intent == INTENT_OUT)\n \t    {\n \t      gfc_error (\"Coindexed actual argument at %L in PURE procedure \"\n \t\t\t \"is passed to an INTENT(%s) argument\",\n-\t\t\t &a->expr->where, gfc_intent_string (f_intent));\n+\t\t\t &expr->where, gfc_intent_string (f_intent));\n \t      return false;\n \t    }\n \n@@ -3210,18 +3219,18 @@ check_intents (gfc_formal_arglist *f, gfc_actual_arglist *a)\n \t    {\n \t      gfc_error (\"Coindexed actual argument at %L in PURE procedure \"\n \t\t\t \"is passed to a POINTER dummy argument\",\n-\t\t\t &a->expr->where);\n+\t\t\t &expr->where);\n \t      return false;\n \t    }\n \t}\n \n        /* F2008, Section 12.5.2.4.  */\n-       if (a->expr->ts.type == BT_CLASS && f->sym->ts.type == BT_CLASS\n-\t   && gfc_is_coindexed (a->expr))\n+       if (expr->ts.type == BT_CLASS && f->sym->ts.type == BT_CLASS\n+\t   && gfc_is_coindexed (expr))\n \t {\n \t   gfc_error (\"Coindexed polymorphic actual argument at %L is passed \"\n \t\t      \"polymorphic dummy argument '%s'\",\n-\t\t\t &a->expr->where, f->sym->name);\n+\t\t\t &expr->where, f->sym->name);\n \t   return false;\n \t }\n     }"}, {"sha": "301077bc1b440d346592f7a936814fac11889af2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c39534a552d65a2e652a8f44eef6189653bf25/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c39534a552d65a2e652a8f44eef6189653bf25/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=99c39534a552d65a2e652a8f44eef6189653bf25", "patch": "@@ -1,3 +1,7 @@\n+2014-06-25  Tobias Burnus  <burnus@net-b.de>\n+\n+\t* gfortran.dg/coarray_33.f90: New.\n+\n 2014-06-25  Tobias Burnus  <burnus@net-b.de>\n \n \t* gfortran.dg/coarray/coindexed_1.f90: New."}, {"sha": "9bd87f9673405dd0cb66d360b61c5a5d894eec9b", "filename": "gcc/testsuite/gfortran.dg/coarray_33.f90", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/99c39534a552d65a2e652a8f44eef6189653bf25/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_33.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/99c39534a552d65a2e652a8f44eef6189653bf25/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_33.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcoarray_33.f90?ref=99c39534a552d65a2e652a8f44eef6189653bf25", "patch": "@@ -0,0 +1,17 @@\n+! { dg-do compile }\n+! { dg-options \"-fcoarray=lib\" }\n+type t\n+  integer :: x\n+end type t\n+\n+class(t), allocatable :: a[:]\n+allocate(t :: a[*])\n+a%x = this_image()\n+\n+call foo(a[i]) ! { dg-error \"Coindexed polymorphic actual argument at .1. is passed polymorphic dummy argument\" }\n+contains\n+subroutine foo(y)\n+  class(t) :: y\n+  print *, y%x\n+end subroutine foo\n+end"}]}