{"sha": "8bb9a5e66a150b73c97aeffee52b57147022a817", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJiOWE1ZTY2YTE1MGI3M2M5N2FlZmZlZTUyYjU3MTQ3MDIyYTgxNw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2019-07-02T08:24:54Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-07-02T08:24:54Z"}, "message": "[arm/AArch64] Assume unhandled NEON types are neon_arith_basic types when scheduling for Cortex-A57\n\nSome scheduling descriptions, like the Cortex-A57 one, are reused for multiple -mcpu options.\nSometimes those other -mcpu cores support more architecture features than the Armv8-A Cortex-A57.\nFor example, the Cortex-A75 and Cortex-A76 support Armv8.2-A as well as the Dot Product instructions.\nThese Dot Product instructions have the neon_dot and neon_dot_q scheduling type, but that type is not\nhandled in cortex-a57.md, since the Cortex-A57 itself doesn't need to care about these instructions.\n\nBut if we just ignore the neon_dot(_q) type at scheduling we get really terrible codegen when compiling\nfor -mcpu=cortex-a76, for example, because the scheduler just pools all the UDOT instructions at the end\nof the basic block, since it doesn't assume anything about their behaviour.\n\nThis patch ameliorates the situation somewhat by telling the Cortex-A57 scheduling model to treat any\ninsn that doesn't get assigned a cortex_a57_neon_type but is actually a is_neon_type instruction as\na simple neon_arith_basic instruction. This allows us to treat post-Armv8-A SIMD instructions more sanely\nwithout having to model each of them explicitly in cortex-a57.md.\n\n\t* config/arm/cortex-a57.md (cortex_a57_neon_type): Use neon_arith_basic\n\tfor is_neon_type instructions that have not already been categorized.\n\nFrom-SVN: r272924", "tree": {"sha": "ad25eff77ffcceb371d0439a550fcb2b7298963e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad25eff77ffcceb371d0439a550fcb2b7298963e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bb9a5e66a150b73c97aeffee52b57147022a817", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb9a5e66a150b73c97aeffee52b57147022a817", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bb9a5e66a150b73c97aeffee52b57147022a817", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bb9a5e66a150b73c97aeffee52b57147022a817/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "606a9a8c728f2dae6b9d58397fcefb3cb0fa0db8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/606a9a8c728f2dae6b9d58397fcefb3cb0fa0db8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/606a9a8c728f2dae6b9d58397fcefb3cb0fa0db8"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "9d1b64866158104212e1ab1b83d0fa081749afa9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb9a5e66a150b73c97aeffee52b57147022a817/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb9a5e66a150b73c97aeffee52b57147022a817/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8bb9a5e66a150b73c97aeffee52b57147022a817", "patch": "@@ -1,3 +1,9 @@\n+2019-07-02  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/cortex-a57.md (cortex_a57_neon_type): Use neon_arith_basic\n+\tfor is_neon_type instructions that have not already been categorized.\n+\n+\n 2019-07-02  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/58483"}, {"sha": "a5f0b10d142160b68570c4cf00a641b07dc742f1", "filename": "gcc/config/arm/cortex-a57.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bb9a5e66a150b73c97aeffee52b57147022a817/gcc%2Fconfig%2Farm%2Fcortex-a57.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bb9a5e66a150b73c97aeffee52b57147022a817/gcc%2Fconfig%2Farm%2Fcortex-a57.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a57.md?ref=8bb9a5e66a150b73c97aeffee52b57147022a817", "patch": "@@ -236,7 +236,12 @@\n \t\t\t   neon_store1_4reg, neon_store1_4reg_q,\\\n \t\t\t   neon_store1_one_lane, neon_store1_one_lane_q,\\\n \t\t\t   neon_store2_one_lane, neon_store2_one_lane_q\")\n-\t    (const_string \"neon_store_complex\")]\n+\t    (const_string \"neon_store_complex\")\n+;; If it doesn't match any of the above that we want to treat specially but is\n+;; still a NEON type, treat it as a basic NEON type.  This is better than\n+;; dropping it on the floor and making no assumptions about it whatsoever.\n+\t  (eq_attr \"is_neon_type\" \"yes\")\n+\t    (const_string \"neon_arith_basic\")]\n \t  (const_string \"unknown\")))\n \n ;; The Cortex-A57 core is modelled as a triple issue pipeline that has"}]}