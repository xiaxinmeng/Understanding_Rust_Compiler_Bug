{"sha": "8afbe9226d71b84b3e93bdbf485e5fde2707c6ea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFmYmU5MjI2ZDcxYjg0YjNlOTNiZGJmNDg1ZTVmZGUyNzA3YzZlYQ==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "1999-06-17T23:54:56Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "1999-06-17T23:54:56Z"}, "message": "* stl_queue.h: Rename _M_c to c, and _M_comp to comp.\n\nFrom-SVN: r27581", "tree": {"sha": "25a5aaad37f60240bd7c7b917fb6cb58c79263df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25a5aaad37f60240bd7c7b917fb6cb58c79263df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8afbe9226d71b84b3e93bdbf485e5fde2707c6ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afbe9226d71b84b3e93bdbf485e5fde2707c6ea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8afbe9226d71b84b3e93bdbf485e5fde2707c6ea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8afbe9226d71b84b3e93bdbf485e5fde2707c6ea/comments", "author": null, "committer": null, "parents": [{"sha": "37b454bd0ba567f9987565c1ea44934f59961325", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37b454bd0ba567f9987565c1ea44934f59961325", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37b454bd0ba567f9987565c1ea44934f59961325"}], "stats": {"total": 86, "additions": 45, "deletions": 41}, "files": [{"sha": "e1651a9225b1499bbc8f4d6f6b2a3ede773268b5", "filename": "libstdc++/stl/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afbe9226d71b84b3e93bdbf485e5fde2707c6ea/libstdc%2B%2B%2Fstl%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afbe9226d71b84b3e93bdbf485e5fde2707c6ea/libstdc%2B%2B%2Fstl%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2FChangeLog?ref=8afbe9226d71b84b3e93bdbf485e5fde2707c6ea", "patch": "@@ -1,3 +1,7 @@\n+1999-06-18  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* stl_queue.h: Rename _M_c to c, and _M_comp to comp.\n+\n 1999-05-17  Mark Kettenis  <kettenis@gnu.org>\n \n \t* stl_config.h: Only define __STL_PTHREADS with GLIBC >= 2 for"}, {"sha": "c1e2b6984403619f3d757801d55e8b18ea336bb8", "filename": "libstdc++/stl/stl_queue.h", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8afbe9226d71b84b3e93bdbf485e5fde2707c6ea/libstdc%2B%2B%2Fstl%2Fstl_queue.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8afbe9226d71b84b3e93bdbf485e5fde2707c6ea/libstdc%2B%2B%2Fstl%2Fstl_queue.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstl%2Fstl_queue.h?ref=8afbe9226d71b84b3e93bdbf485e5fde2707c6ea", "patch": "@@ -49,33 +49,33 @@ class queue {\n   typedef typename _Sequence::reference       reference;\n   typedef typename _Sequence::const_reference const_reference;\n protected:\n-  _Sequence _M_c;\n+  _Sequence c;\n public:\n-  queue() : _M_c() {}\n-  explicit queue(const _Sequence& __c) : _M_c(__c) {}\n-\n-  bool empty() const { return _M_c.empty(); }\n-  size_type size() const { return _M_c.size(); }\n-  reference front() { return _M_c.front(); }\n-  const_reference front() const { return _M_c.front(); }\n-  reference back() { return _M_c.back(); }\n-  const_reference back() const { return _M_c.back(); }\n-  void push(const value_type& __x) { _M_c.push_back(__x); }\n-  void pop() { _M_c.pop_front(); }\n+  queue() : c() {}\n+  explicit queue(const _Sequence& __c) : c(__c) {}\n+\n+  bool empty() const { return c.empty(); }\n+  size_type size() const { return c.size(); }\n+  reference front() { return c.front(); }\n+  const_reference front() const { return c.front(); }\n+  reference back() { return c.back(); }\n+  const_reference back() const { return c.back(); }\n+  void push(const value_type& __x) { c.push_back(__x); }\n+  void pop() { c.pop_front(); }\n };\n \n template <class _Tp, class _Sequence>\n bool \n operator==(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)\n {\n-  return __x._M_c == __y._M_c;\n+  return __x.c == __y.c;\n }\n \n template <class _Tp, class _Sequence>\n bool\n operator<(const queue<_Tp, _Sequence>& __x, const queue<_Tp, _Sequence>& __y)\n {\n-  return __x._M_c < __y._M_c;\n+  return __x.c < __y.c;\n }\n \n #ifdef __STL_FUNCTION_TMPL_PARTIAL_ORDER\n@@ -125,69 +125,69 @@ class  priority_queue {\n   typedef typename _Sequence::reference       reference;\n   typedef typename _Sequence::const_reference const_reference;\n protected:\n-  _Sequence _M_c;\n-  _Compare _M_comp;\n+  _Sequence c;\n+  _Compare comp;\n public:\n-  priority_queue() : _M_c() {}\n-  explicit priority_queue(const _Compare& __x) :  _M_c(), _M_comp(__x) {}\n+  priority_queue() : c() {}\n+  explicit priority_queue(const _Compare& __x) :  c(), comp(__x) {}\n   priority_queue(const _Compare& __x, const _Sequence& __s) \n-    : _M_c(__s), _M_comp(__x) \n-    { make_heap(_M_c.begin(), _M_c.end(), _M_comp); }\n+    : c(__s), comp(__x) \n+    { make_heap(c.begin(), c.end(), comp); }\n \n #ifdef __STL_MEMBER_TEMPLATES\n   template <class _InputIterator>\n   priority_queue(_InputIterator __first, _InputIterator __last) \n-    : _M_c(__first, __last) { make_heap(_M_c.begin(), _M_c.end(), _M_comp); }\n+    : c(__first, __last) { make_heap(c.begin(), c.end(), comp); }\n \n   template <class _InputIterator>\n   priority_queue(_InputIterator __first, \n                  _InputIterator __last, const _Compare& __x)\n-    : _M_c(__first, __last), _M_comp(__x) \n-    { make_heap(_M_c.begin(), _M_c.end(), _M_comp); }\n+    : c(__first, __last), comp(__x) \n+    { make_heap(c.begin(), c.end(), comp); }\n \n   template <class _InputIterator>\n   priority_queue(_InputIterator __first, _InputIterator __last,\n                  const _Compare& __x, const _Sequence& __s)\n-  : _M_c(__s), _M_comp(__x)\n+  : c(__s), comp(__x)\n   { \n-    _M_c.insert(_M_c.end(), __first, __last);\n-    make_heap(_M_c.begin(), _M_c.end(), _M_comp);\n+    c.insert(c.end(), __first, __last);\n+    make_heap(c.begin(), c.end(), comp);\n   }\n \n #else /* __STL_MEMBER_TEMPLATES */\n   priority_queue(const value_type* __first, const value_type* __last) \n-    : _M_c(__first, __last) { make_heap(_M_c.begin(), _M_c.end(), _M_comp); }\n+    : c(__first, __last) { make_heap(c.begin(), c.end(), comp); }\n \n   priority_queue(const value_type* __first, const value_type* __last, \n                  const _Compare& __x) \n-    : _M_c(__first, __last), _M_comp(__x)\n-    { make_heap(_M_c.begin(), _M_c.end(), _M_comp); }\n+    : c(__first, __last), comp(__x)\n+    { make_heap(c.begin(), c.end(), comp); }\n \n   priority_queue(const value_type* __first, const value_type* __last, \n                  const _Compare& __x, const _Sequence& __c)\n-    : _M_c(__c), _M_comp(__x) \n+    : c(__c), comp(__x) \n   { \n-    _M_c.insert(_M_c.end(), __first, __last);\n-    make_heap(_M_c.begin(), _M_c.end(), _M_comp);\n+    c.insert(c.end(), __first, __last);\n+    make_heap(c.begin(), c.end(), comp);\n   }\n #endif /* __STL_MEMBER_TEMPLATES */\n \n-  bool empty() const { return _M_c.empty(); }\n-  size_type size() const { return _M_c.size(); }\n-  const_reference top() const { return _M_c.front(); }\n+  bool empty() const { return c.empty(); }\n+  size_type size() const { return c.size(); }\n+  const_reference top() const { return c.front(); }\n   void push(const value_type& __x) {\n     __STL_TRY {\n-      _M_c.push_back(__x); \n-      push_heap(_M_c.begin(), _M_c.end(), _M_comp);\n+      c.push_back(__x); \n+      push_heap(c.begin(), c.end(), comp);\n     }\n-    __STL_UNWIND(_M_c.clear());\n+    __STL_UNWIND(c.clear());\n   }\n   void pop() {\n     __STL_TRY {\n-      pop_heap(_M_c.begin(), _M_c.end(), _M_comp);\n-      _M_c.pop_back();\n+      pop_heap(c.begin(), c.end(), comp);\n+      c.pop_back();\n     }\n-    __STL_UNWIND(_M_c.clear());\n+    __STL_UNWIND(c.clear());\n   }\n };\n "}]}