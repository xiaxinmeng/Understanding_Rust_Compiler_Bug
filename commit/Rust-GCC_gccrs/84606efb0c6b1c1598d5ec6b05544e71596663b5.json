{"sha": "84606efb0c6b1c1598d5ec6b05544e71596663b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODQ2MDZlZmIwYzZiMWMxNTk4ZDVlYzZiMDU1NDRlNzE1OTY2NjNiNQ==", "commit": {"author": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-07-28T05:03:46Z"}, "committer": {"name": "Siddhesh Poyarekar", "email": "siddhesh@gotplt.org", "date": "2021-07-28T12:13:15Z"}, "message": "analyzer: Recognize __builtin_free as a matching deallocator\n\nRecognize __builtin_free as being equivalent to free when passed into\n__attribute__((malloc ())), similar to how it is treated when it is\nencountered as a call.  This fixes spurious warnings in glibc where\nxmalloc family of allocators as well as reallocarray, memalign,\netc. are declared to have __builtin_free as the free function.\n\ngcc/analyzer/ChangeLog:\n\n\t* sm-malloc.cc\n\t(malloc_state_machine::get_or_create_deallocator): Recognize\n\t__builtin_free.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/analyzer/attr-malloc-1.c (compatible_alloc,\n\tcompatible_alloc2): New extern allocator declarations.\n\t(test_9, test_10): New tests.", "tree": {"sha": "cf703ac4b2312c424d3590d5cc935b5b74d0f797", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf703ac4b2312c424d3590d5cc935b5b74d0f797"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84606efb0c6b1c1598d5ec6b05544e71596663b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84606efb0c6b1c1598d5ec6b05544e71596663b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84606efb0c6b1c1598d5ec6b05544e71596663b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84606efb0c6b1c1598d5ec6b05544e71596663b5/comments", "author": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "siddhesh", "id": 158582, "node_id": "MDQ6VXNlcjE1ODU4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/158582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/siddhesh", "html_url": "https://github.com/siddhesh", "followers_url": "https://api.github.com/users/siddhesh/followers", "following_url": "https://api.github.com/users/siddhesh/following{/other_user}", "gists_url": "https://api.github.com/users/siddhesh/gists{/gist_id}", "starred_url": "https://api.github.com/users/siddhesh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/siddhesh/subscriptions", "organizations_url": "https://api.github.com/users/siddhesh/orgs", "repos_url": "https://api.github.com/users/siddhesh/repos", "events_url": "https://api.github.com/users/siddhesh/events{/privacy}", "received_events_url": "https://api.github.com/users/siddhesh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54ec50bada94a8ff92edb04ee5216c27fa4bf942", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54ec50bada94a8ff92edb04ee5216c27fa4bf942", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54ec50bada94a8ff92edb04ee5216c27fa4bf942"}], "stats": {"total": 22, "additions": 21, "deletions": 1}, "files": [{"sha": "1d69d57df0ed7d9fd829a4718db4e49337c87075", "filename": "gcc/analyzer/sm-malloc.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84606efb0c6b1c1598d5ec6b05544e71596663b5/gcc%2Fanalyzer%2Fsm-malloc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84606efb0c6b1c1598d5ec6b05544e71596663b5/gcc%2Fanalyzer%2Fsm-malloc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fsm-malloc.cc?ref=84606efb0c6b1c1598d5ec6b05544e71596663b5", "patch": "@@ -1511,7 +1511,8 @@ malloc_state_machine::get_or_create_deallocator (tree deallocator_fndecl)\n   /* Reuse \"free\".  */\n   deallocator *d;\n   if (is_named_call_p (deallocator_fndecl, \"free\")\n-      || is_std_named_call_p (deallocator_fndecl, \"free\"))\n+      || is_std_named_call_p (deallocator_fndecl, \"free\")\n+      || is_named_call_p (deallocator_fndecl, \"__builtin_free\"))\n     d = &m_free.m_deallocator;\n   else\n     {"}, {"sha": "a9a2a3dee853182d8ca3ebabbf6355bbeefc1852", "filename": "gcc/testsuite/gcc.dg/analyzer/attr-malloc-1.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84606efb0c6b1c1598d5ec6b05544e71596663b5/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattr-malloc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84606efb0c6b1c1598d5ec6b05544e71596663b5/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattr-malloc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Fattr-malloc-1.c?ref=84606efb0c6b1c1598d5ec6b05544e71596663b5", "patch": "@@ -11,6 +11,12 @@ extern struct foo *foo_acquire (void)\n extern void use_foo (const struct foo *)\n   __attribute__((nonnull));\n \n+extern struct foo *compatible_alloc (void)\n+  __attribute__ ((malloc (__builtin_free)));\n+\n+extern struct foo *compatible_alloc2 (void)\n+  __attribute__ ((malloc (free)));\n+\n void test_1 (void)\n {\n   struct foo *p = foo_acquire ();\n@@ -73,3 +79,16 @@ int test_8 (struct foo *p)\n   foo_release (p);\n   return p->m_int; /* { dg-warning \"use after 'foo_release' of 'p'\" } */\n }\n+\n+/* Recognize that __builtin_free and free are the same thing.  */\n+void test_9 (void)\n+{\n+  struct foo *p = compatible_alloc ();\n+  free (p);\n+}\n+\n+void test_10 (void)\n+{\n+  struct foo *p = compatible_alloc2 ();\n+  __builtin_free (p);\n+}"}]}