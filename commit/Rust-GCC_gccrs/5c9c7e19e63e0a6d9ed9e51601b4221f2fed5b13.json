{"sha": "5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM5YzdlMTllNjNlMGE2ZDllZDllNTE2MDFiNDIyMWYyZmVkNWIxMw==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2019-06-18T22:14:04Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2019-06-18T22:14:04Z"}, "message": "[PR90868] Document status quo for duplicate OpenACC 'declare' directives for 'extern' variables\n\n\tgcc/testsuite/\n\tPR testsuite/90868\n\t* c-c++-common/goacc/declare-1.c: Update.\n\t* c-c++-common/goacc/declare-2.c: Likewise.\n\nFrom-SVN: r272445", "tree": {"sha": "1d4035fbdc8570412b80a66d09ea1a2ebf7ef4a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1d4035fbdc8570412b80a66d09ea1a2ebf7ef4a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3a37d6f68c50d38303cf04039f79fc65e72d5a27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3a37d6f68c50d38303cf04039f79fc65e72d5a27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3a37d6f68c50d38303cf04039f79fc65e72d5a27"}], "stats": {"total": 188, "additions": 187, "deletions": 1}, "files": [{"sha": "981055838ab656f282f487b51a7fa076aafaf81a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13", "patch": "@@ -1,5 +1,9 @@\n 2019-06-18  Thomas Schwinge  <thomas@codesourcery.com>\n \n+\tPR testsuite/90868\n+\t* c-c++-common/goacc/declare-1.c: Update.\n+\t* c-c++-common/goacc/declare-2.c: Likewise.\n+\n \tPR middle-end/90862\n \t* c-c++-common/goacc/declare-1.c: Update.\n \t* c-c++-common/goacc/declare-2.c: Likewise."}, {"sha": "46ee01b675950727a52e1c2e5bd585c38e06c050", "filename": "gcc/testsuite/c-c++-common/goacc/declare-1.c", "status": "modified", "additions": 84, "deletions": 1, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-1.c?ref=5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13", "patch": "@@ -96,6 +96,84 @@ f (void)\n }\n \n \n+/* The same as 'f'.  */\n+\n+void\n+f_2 (void)\n+{\n+  int va0;\n+#pragma acc declare create(va0)\n+\n+  int va1;\n+#pragma acc declare copyin(va1)\n+\n+  int *va2;\n+#pragma acc declare deviceptr(va2)\n+\n+  int va3;\n+#pragma acc declare device_resident(va3)\n+\n+#ifndef __cplusplus\n+  /* TODO PR90868\n+\n+     C: \"error: variable '[...]' used more than once with '#pragma acc declare'\".  */\n+#else\n+  extern int ve0;\n+#pragma acc declare create(ve0)\n+\n+  extern int ve1;\n+#pragma acc declare copyin(ve1)\n+\n+  extern int *ve2;\n+#pragma acc declare deviceptr(ve2)\n+\n+  extern int ve3;\n+#pragma acc declare device_resident(ve3)\n+\n+  extern int ve4;\n+#pragma acc declare link(ve4)\n+\n+  extern int ve5;\n+#pragma acc declare present_or_copyin(ve5)\n+ \n+  extern int ve6;\n+#pragma acc declare present_or_create(ve6)\n+#endif\n+\n+  int va5;\n+#pragma acc declare copy(va5)\n+\n+  int va6;\n+#pragma acc declare copyout(va6)\n+\n+  int va7;\n+#pragma acc declare present(va7)\n+\n+  int va8;\n+#pragma acc declare present_or_copy(va8)\n+\n+  int va9;\n+#pragma acc declare present_or_copyin(va9)\n+\n+  int va10;\n+#pragma acc declare present_or_copyout(va10)\n+\n+  int va11;\n+#pragma acc declare present_or_create(va11)\n+\n+ a:\n+  {\n+    int va0;\n+#pragma acc declare create(va0)\n+    if (v1)\n+      goto a;\n+    else\n+      goto b;\n+  }\n+ b:;\n+}\n+\n+\n /* The same as 'f' but everything contained in an OpenACC 'data' construct.  */\n \n void\n@@ -115,7 +193,12 @@ f_data (void)\n     int va3;\n # pragma acc declare device_resident(va3)\n \n-#if 0 /* TODO */\n+#if 0\n+    /* TODO PR90868\n+\n+       C: \"error: variable '[...]' used more than once with '#pragma acc declare'\".\n+       C++: ICE during gimplification.  */\n+\n     extern int ve0;\n # pragma acc declare create(ve0)\n "}, {"sha": "e2e22be57e9e4c592f8fac5546ef18053196eb80", "filename": "gcc/testsuite/c-c++-common/goacc/declare-2.c", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdeclare-2.c?ref=5c9c7e19e63e0a6d9ed9e51601b4221f2fed5b13", "patch": "@@ -96,3 +96,102 @@ f_data (void)\n # pragma acc declare present (v2) /* { dg-error \"invalid use of\" } */\n   }\n }\n+\n+\n+/* Testing for PR90868 \"Duplicate OpenACC 'declare' directives for 'extern'\n+   variables\".  */\n+\n+\n+void\n+f_pr90868 (void)\n+{\n+  extern int we0;\n+#pragma acc declare create(we0)\n+\n+  extern int we1;\n+#pragma acc declare copyin(we1)\n+\n+  extern int *we2;\n+#pragma acc declare deviceptr(we2)\n+\n+  extern int we3;\n+#pragma acc declare device_resident(we3)\n+\n+  extern int we4;\n+#pragma acc declare link(we4)\n+\n+  extern int we5;\n+#pragma acc declare present_or_copyin(we5)\n+ \n+  extern int we6;\n+#pragma acc declare present_or_create(we6)\n+}\n+\n+\n+/* The same as 'f_pr90868'.  */\n+\n+/* The errors are emitted for C only; for C++, the duplicate OpenACC 'declare'\n+   directives for 'extern' variables are accepted.  */\n+\n+void\n+f_pr90868_2 (void)\n+{\n+  extern int we0;\n+#pragma acc declare create(we0) /* { dg-error \"variable 'we0' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+\n+  extern int we1;\n+#pragma acc declare copyin(we1) /* { dg-error \"variable 'we1' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+\n+  extern int *we2;\n+#pragma acc declare deviceptr(we2) /* { dg-error \"variable 'we2' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+\n+  extern int we3;\n+#pragma acc declare device_resident(we3) /* { dg-error \"variable 'we3' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+\n+  extern int we4;\n+#pragma acc declare link(we4) /* { dg-error \"variable 'we4' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+\n+  extern int we5;\n+#pragma acc declare present_or_copyin(we5) /* { dg-error \"variable 'we5' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+ \n+  extern int we6;\n+#pragma acc declare present_or_create(we6) /* { dg-error \"variable 'we6' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+}\n+\n+\n+/* The same as 'f_pr90868' but everything contained in an OpenACC 'data'\n+   construct.  */\n+\n+#ifdef __cplusplus\n+/* TODO PR90868\n+\n+   C++: ICE during gimplification.  */\n+#else\n+void\n+f_pr90868_data (void)\n+{\n+#pragma acc data\n+  {\n+    extern int we0;\n+# pragma acc declare create(we0) /* { dg-error \"variable 'we0' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+\n+    extern int we1;\n+# pragma acc declare copyin(we1) /* { dg-error \"variable 'we1' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+\n+    extern int *we2;\n+# pragma acc declare deviceptr(we2) /* { dg-error \"variable 'we2' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+\n+    extern int we3;\n+# pragma acc declare device_resident(we3) /* { dg-error \"variable 'we3' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+\n+    extern int we4;\n+# pragma acc declare link(we4) /* { dg-error \"variable 'we4' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+\n+    extern int we5;\n+# pragma acc declare present_or_copyin(we5) /* { dg-error \"variable 'we5' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+ \n+    extern int we6;\n+# pragma acc declare present_or_create(we6) /* { dg-error \"variable 'we6' used more than once with '#pragma acc declare'\" \"\" { target c } } */\n+  }\n+}\n+#endif"}]}