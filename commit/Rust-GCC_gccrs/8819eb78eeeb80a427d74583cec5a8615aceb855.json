{"sha": "8819eb78eeeb80a427d74583cec5a8615aceb855", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODgxOWViNzhlZWViODBhNDI3ZDc0NTgzY2VjNWE4NjE1YWNlYjg1NQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2007-10-04T21:18:12Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2007-10-04T21:18:12Z"}, "message": "* config/avr/avr.c (expand_epilogue): Don't set RTX_FRAME_RELATED_P.\n\nFrom-SVN: r129023", "tree": {"sha": "724151c92095f61fb7f27c9dbf00d6ece852e35e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/724151c92095f61fb7f27c9dbf00d6ece852e35e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8819eb78eeeb80a427d74583cec5a8615aceb855", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8819eb78eeeb80a427d74583cec5a8615aceb855", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8819eb78eeeb80a427d74583cec5a8615aceb855", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8819eb78eeeb80a427d74583cec5a8615aceb855/comments", "author": null, "committer": null, "parents": [{"sha": "815cd40643f4007299927c480145ba81528edc26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/815cd40643f4007299927c480145ba81528edc26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/815cd40643f4007299927c480145ba81528edc26"}], "stats": {"total": 72, "additions": 28, "deletions": 44}, "files": [{"sha": "94ac51b7ae82762868405f89a90d5973da5e0477", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8819eb78eeeb80a427d74583cec5a8615aceb855/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8819eb78eeeb80a427d74583cec5a8615aceb855/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8819eb78eeeb80a427d74583cec5a8615aceb855", "patch": "@@ -1,3 +1,7 @@\n+2007-10-04  Anatoly Sokolov <aesok@post.ru>\n+\n+\t* config/avr/avr.c (expand_epilogue): Don't set RTX_FRAME_RELATED_P.\n+\n 2007-10-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/33641"}, {"sha": "8e3de6a3597cce6a67f6f25a40f271ced1d39973", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 24, "deletions": 44, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8819eb78eeeb80a427d74583cec5a8615aceb855/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8819eb78eeeb80a427d74583cec5a8615aceb855/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=8819eb78eeeb80a427d74583cec5a8615aceb855", "patch": "@@ -787,13 +787,11 @@ expand_epilogue (void)\n   int live_seq;\n   int minimize;\n   HOST_WIDE_INT size = get_frame_size();\n-  rtx insn;\n   \n   /* epilogue: naked  */\n   if (cfun->machine->is_naked)\n     {\n-      insn = emit_jump_insn (gen_return ());\n-      RTX_FRAME_RELATED_P (insn) = 1;\n+      emit_jump_insn (gen_return ());\n       return;\n     }\n \n@@ -806,29 +804,23 @@ expand_epilogue (void)\n     {\n       /* Return value from main() is already in the correct registers\n          (r25:r24) as the exit() argument.  */\n-      insn = emit_jump_insn (gen_return ());\n-      RTX_FRAME_RELATED_P (insn) = 1;\n+      emit_jump_insn (gen_return ());\n     }\n   else if (minimize && (frame_pointer_needed || live_seq > 4))\n     {\n       if (frame_pointer_needed)\n \t{\n           /*  Get rid of frame.  */\n-          insn = \n-\t    emit_move_insn(frame_pointer_rtx,\n-                           gen_rtx_PLUS (HImode, frame_pointer_rtx, \n-                                         gen_int_mode (size, HImode)));\n-          RTX_FRAME_RELATED_P (insn) = 1;\n+\t  emit_move_insn(frame_pointer_rtx,\n+                         gen_rtx_PLUS (HImode, frame_pointer_rtx,\n+                                       gen_int_mode (size, HImode)));\n \t}\n       else\n \t{\n-          insn = emit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n-          RTX_FRAME_RELATED_P (insn) = 1;\n+          emit_move_insn (frame_pointer_rtx, stack_pointer_rtx);\n \t}\n \t\n-      insn = \n-        emit_insn (gen_epilogue_restores (gen_int_mode (live_seq, HImode)));\n-      RTX_FRAME_RELATED_P (insn) = 1;\n+      emit_insn (gen_epilogue_restores (gen_int_mode (live_seq, HImode)));\n     }\n   else\n     {\n@@ -842,7 +834,7 @@ expand_epilogue (void)\n               fp_plus_length = \n \t        get_attr_length (gen_move_insn (frame_pointer_rtx,\n                                                 gen_rtx_PLUS (HImode, frame_pointer_rtx,\n-                                                              gen_int_mode (size, \n+                                                              gen_int_mode (size,\n \t\t\t\t\t\t\t\t\t    HImode))));\n               /* Copy to stack pointer.  */\n               fp_plus_length += \n@@ -855,66 +847,54 @@ expand_epilogue (void)\n                   sp_plus_length = \n \t\t    get_attr_length (gen_move_insn (stack_pointer_rtx,\n                                                     gen_rtx_PLUS (HImode, stack_pointer_rtx,\n-                                                                  gen_int_mode (size, \n+                                                                  gen_int_mode (size,\n \t\t\t\t\t\t\t\t\t\tHImode))));\n                 }\n               /* Use shortest method.  */\n               if (size <= 5 && (sp_plus_length < fp_plus_length))\n                 {\n-                  insn = emit_move_insn (stack_pointer_rtx,\n-                                         gen_rtx_PLUS (HImode, stack_pointer_rtx,\n-                                                       gen_int_mode (size, HImode)));\n-                  RTX_FRAME_RELATED_P (insn) = 1;\n+                  emit_move_insn (stack_pointer_rtx,\n+                                  gen_rtx_PLUS (HImode, stack_pointer_rtx,\n+                                                gen_int_mode (size, HImode)));\n                 }\n               else\n                 {\n-                  insn = emit_move_insn (frame_pointer_rtx,\n-                                         gen_rtx_PLUS (HImode, frame_pointer_rtx,\n-                                                       gen_int_mode (size, HImode)));\n-\t          RTX_FRAME_RELATED_P (insn) = 1;\t   \n+                  emit_move_insn (frame_pointer_rtx,\n+                                  gen_rtx_PLUS (HImode, frame_pointer_rtx,\n+                                                gen_int_mode (size, HImode)));\n                   /* Copy to stack pointer.  */\n-                  insn = emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);\n-\t          RTX_FRAME_RELATED_P (insn) = 1;\n+                  emit_move_insn (stack_pointer_rtx, frame_pointer_rtx);\n                 }\n             }\n         \n           /* Restore previous frame_pointer.  */\n-\t  insn = emit_insn (gen_pophi (frame_pointer_rtx));\n-          RTX_FRAME_RELATED_P (insn) = 1;\n+\t  emit_insn (gen_pophi (frame_pointer_rtx));\n \t}\n       /* Restore used registers.  */\n       HARD_REG_SET set;      \n       avr_regs_to_save (&set);\n       for (reg = 31; reg >= 0; --reg)\n         {\n           if (TEST_HARD_REG_BIT (set, reg))\n-            {\n-              insn = emit_insn (gen_popqi (gen_rtx_REG (QImode, reg)));\n-              RTX_FRAME_RELATED_P (insn) = 1;\n-            }\n+              emit_insn (gen_popqi (gen_rtx_REG (QImode, reg)));\n         }\n       if (cfun->machine->is_interrupt || cfun->machine->is_signal)\n         {\n \n           /* Restore SREG using tmp reg as scratch.  */\n-          insn = emit_insn (gen_popqi (tmp_reg_rtx));\n-          RTX_FRAME_RELATED_P (insn) = 1;\n+          emit_insn (gen_popqi (tmp_reg_rtx));\n       \n-          insn = emit_move_insn (gen_rtx_MEM(QImode, GEN_INT(SREG_ADDR)), \n-\t\t\t\t tmp_reg_rtx);\n-          RTX_FRAME_RELATED_P (insn) = 1;\n+          emit_move_insn (gen_rtx_MEM(QImode, GEN_INT(SREG_ADDR)), \n+\t\t\t  tmp_reg_rtx);\n \n           /* Restore tmp REG.  */\n-          insn = emit_insn (gen_popqi (tmp_reg_rtx));\n-          RTX_FRAME_RELATED_P (insn) = 1;\n+          emit_insn (gen_popqi (tmp_reg_rtx));\n \n           /* Restore zero REG.  */\n-          insn = emit_insn (gen_popqi (zero_reg_rtx));\n-\t  RTX_FRAME_RELATED_P (insn) = 1;\n+          emit_insn (gen_popqi (zero_reg_rtx));\n         }\n \n-      insn = emit_jump_insn (gen_return ());\n-      RTX_FRAME_RELATED_P (insn) = 1;\n+      emit_jump_insn (gen_return ());\n     }\n }\n "}]}