{"sha": "86fd2b512a1e282072ca7e72905ebded5b5cd30d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODZmZDJiNTEyYTFlMjgyMDcyY2E3ZTcyOTA1ZWJkZWQ1YjVjZDMwZA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-02-09T09:02:52Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-02-09T09:02:52Z"}, "message": "re PR libstdc++/14072 (basic_ios::imbue leaves dangling pointers)\n\n2004-02-09  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/14072\n\t* include/bits/basic_ios.tcc (basic_ios<>::_M_cache_locale):\n\tDon't leave dangling pointers.\n\t* testsuite/27_io/basic_ios/imbue/14072.cc: New.\n\t* testsuite/22_locale/numpunct/members/pod/2.cc: Tweak, the num_put\n\tfacet is needed in the final test.\n\nFrom-SVN: r77526", "tree": {"sha": "d18b83860ee1d2f3ac2d668a4a349f27432b68da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d18b83860ee1d2f3ac2d668a4a349f27432b68da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86fd2b512a1e282072ca7e72905ebded5b5cd30d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86fd2b512a1e282072ca7e72905ebded5b5cd30d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86fd2b512a1e282072ca7e72905ebded5b5cd30d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86fd2b512a1e282072ca7e72905ebded5b5cd30d/comments", "author": null, "committer": null, "parents": [{"sha": "e333a61815b7ced28c4bc1337040b123c54c488f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e333a61815b7ced28c4bc1337040b123c54c488f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e333a61815b7ced28c4bc1337040b123c54c488f"}], "stats": {"total": 239, "additions": 238, "deletions": 1}, "files": [{"sha": "35cfcc353ea64d1c77e44194d9f48594d90f07e1", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fd2b512a1e282072ca7e72905ebded5b5cd30d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fd2b512a1e282072ca7e72905ebded5b5cd30d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=86fd2b512a1e282072ca7e72905ebded5b5cd30d", "patch": "@@ -1,3 +1,12 @@\n+2004-02-09  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/14072\n+\t* include/bits/basic_ios.tcc (basic_ios<>::_M_cache_locale):\n+\tDon't leave dangling pointers.\n+\t* testsuite/27_io/basic_ios/imbue/14072.cc: New.\n+\t* testsuite/22_locale/numpunct/members/pod/2.cc: Tweak, the num_put\n+\tfacet is needed in the final test.\n+\n 2004-02-09  Bernardo Innocenti  <bernie@develer.com>\n \n \t* crossconfig.m4: Don't enable _GLIBCXX_USE_LFS on *-uclinux*."}, {"sha": "fcb4b02493f6a47acb3c20a65c05f4dc0c47825f", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fd2b512a1e282072ca7e72905ebded5b5cd30d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fd2b512a1e282072ca7e72905ebded5b5cd30d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=86fd2b512a1e282072ca7e72905ebded5b5cd30d", "patch": "@@ -171,10 +171,18 @@ namespace std\n     {\n       if (__builtin_expect(has_facet<__ctype_type>(__loc), true))\n \t_M_ctype = &use_facet<__ctype_type>(__loc);\n+      else\n+\t_M_ctype = 0;\n+\n       if (__builtin_expect(has_facet<__num_put_type>(__loc), true))\n \t_M_num_put = &use_facet<__num_put_type>(__loc);\n+      else\n+\t_M_num_put = 0;\n+\n       if (__builtin_expect(has_facet<__num_get_type>(__loc), true))\n \t_M_num_get = &use_facet<__num_get_type>(__loc);\n+      else\n+\t_M_num_get = 0;\n     }\n \n   // Inhibit implicit instantiations for required instantiations,"}, {"sha": "be020ca46687edbd82c4d243d63a8f0151751d5b", "filename": "libstdc++-v3/testsuite/22_locale/numpunct/members/pod/2.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fd2b512a1e282072ca7e72905ebded5b5cd30d/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fd2b512a1e282072ca7e72905ebded5b5cd30d/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnumpunct%2Fmembers%2Fpod%2F2.cc?ref=86fd2b512a1e282072ca7e72905ebded5b5cd30d", "patch": "@@ -74,7 +74,7 @@ void test01()\n   VERIFY( test );\n \n   // 3: fail, no numpunct\n-  const locale \tloc3(loc, new ctype<pod_type>);\n+  const locale \tloc3(loc2, new ctype<pod_type>);\n   os.clear();\n   os.imbue(loc3);\n   try"}, {"sha": "77fafc7a233a375a1e7adf24f27ae23dd2a8ce77", "filename": "libstdc++-v3/testsuite/27_io/basic_ios/imbue/14072.cc", "status": "added", "additions": 220, "deletions": 0, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86fd2b512a1e282072ca7e72905ebded5b5cd30d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fimbue%2F14072.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86fd2b512a1e282072ca7e72905ebded5b5cd30d/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fimbue%2F14072.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fbasic_ios%2Fimbue%2F14072.cc?ref=86fd2b512a1e282072ca7e72905ebded5b5cd30d", "patch": "@@ -0,0 +1,220 @@\n+// 2004-02-09  Petur Runolfsson  <peturr02@ru.is>\n+\n+// Copyright (C) 2004 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+// 27.4.4.2 basic_ios member functions\n+\n+#include <sstream>\n+#include <locale>\n+\n+#include <testsuite_hooks.h>\n+#include <testsuite_character.h>\n+\n+namespace std\n+{\n+  template<>\n+    class ctype<__gnu_test::character>\n+    : public locale::facet, public ctype_base\n+    {\n+    public:\n+      typedef __gnu_test::character char_type;\n+      explicit ctype(size_t refs  = 0)\n+      : locale::facet(refs) { }\n+\n+      bool\n+      is(mask m, char_type c) const\n+      { return this->do_is(m, c); }\n+\n+      const char_type*\n+      is(const char_type* low, const char_type* high, mask* vec) const\n+      { return this->do_is(low, high, vec); }\n+\n+      const char_type*\n+      scan_is(mask m, const char_type* low, const char_type* high) const\n+      { return this->do_scan_is(m, low, high); }\n+\n+      const char_type*\n+      scan_not(mask m, const char_type* low, const char_type* high) const\n+      { return this->do_scan_not(m, low, high); }\n+\n+      char_type\n+      toupper(char_type c) const\n+      { return this->do_toupper(c); }\n+\n+      const char_type*\n+      toupper(char_type* low, const char_type* high) const\n+      { return this->do_toupper(low, high); }\n+\n+      char_type\n+      tolower(char_type c) const\n+      { return this->do_tolower(c); }\n+\n+      const char_type*\n+      tolower(char_type* low, const char_type* high) const\n+      { return this->do_tolower(low, high); }\n+\n+      char_type\n+      widen(char c) const\n+      { return this->do_widen(c); }\n+\n+      const char*\n+      widen(const char* low, const char* high, char_type* to) const\n+      { return this->do_widen(low, high, to); }\n+\n+      char\n+      narrow(char_type c, char dfault) const\n+      { return this->do_narrow(c, dfault); }\n+\n+      const char_type*\n+      narrow(const char_type* low, const char_type* high,\n+\t     char dfault, char* to) const\n+      { return this->do_narrow(low, high, dfault, to); }\n+\n+      static locale::id id;\n+\n+    protected:\n+      ~ctype()\n+      { }\n+\n+      virtual bool\n+      do_is(mask m, char_type c) const\n+      { return false; }\n+\n+      virtual const char_type*\n+      do_is(const char_type* low, const char_type* high, mask* vec) const\n+      {\n+\tfill_n(vec, high - low, mask());\n+\treturn high;\n+      }\n+\n+      virtual const char_type*\n+      do_scan_is(mask m, const char_type* low, const char_type* high) const\n+      { return high; }\n+\n+      virtual const char_type*\n+      do_scan_not(mask m, const char_type* low, const char_type* high) const\n+      { return low; }\n+\n+      virtual char_type\n+      do_toupper(char_type c) const\n+      { return c; }\n+\n+      virtual const char_type*\n+      do_toupper(char_type*  low, const char_type*  high) const\n+      { return high; }\n+\n+      virtual char_type\n+      do_tolower(char_type c) const\n+      { return c; }\n+\n+      virtual const char_type*\n+      do_tolower(char_type*  low, const char_type*  high) const\n+      { return high; }\n+\n+      virtual char_type\n+      do_widen(char c) const\n+      { return __gnu_test::character::from_char(c); }\n+\n+      virtual const char* \n+      do_widen(const char* low, const char* high, char_type* dest) const\n+      {\n+\ttransform(low, high, dest, &__gnu_test::character::from_char);\n+\treturn high;\n+      }\n+\n+      virtual char\n+      do_narrow(char_type, char dfault) const\n+      { return dfault; }\n+\n+      virtual const char_type*\n+      do_narrow(const char_type* low, const char_type* high,\n+\t\tchar dfault, char*  dest) const\n+      {\n+\tfill_n(dest, high - low, dfault);\n+\treturn high;\n+      }\n+    };\n+\n+  locale::id ctype<__gnu_test::character>::id;\n+} // namespace std\n+\n+// libstdc++/14072\n+void test01()\n+{\n+  bool test __attribute__((unused)) = true;\n+  using namespace std;\n+\n+  locale loc;\n+  loc = locale(loc, new ctype<__gnu_test::character>());\n+  loc = locale(loc, new num_get<__gnu_test::character>());\n+  loc = locale(loc, new num_put<__gnu_test::character>());\n+\t\n+  locale::global(loc);\n+  basic_stringstream<__gnu_test::character> s;\n+  s << \"10\\n\";\n+  s.seekg(0, ios_base::beg);\n+  s.imbue(locale::classic());\n+  locale::global(locale::classic());\n+  loc = locale::classic();\n+\t\n+  try\n+    {\n+      s.widen('\\0');\n+    }\n+  catch (bad_cast&)\n+    {\n+    }\n+  \n+  s.clear();\n+  \n+  try\n+    {\n+      int i = 0;\n+      s << i;\n+    }\n+  catch (bad_cast&)\n+    {\n+    }\n+\n+  s.clear();\n+\n+  try\n+    {\n+      int i = 0;\n+      s >> i;\n+    }\n+  catch (bad_cast&)\n+    {\n+    }\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}