{"sha": "d2cd871faaa370e18d71e26bc92e25034bcbc05c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDJjZDg3MWZhYWEzNzBlMThkNzFlMjZiYzkyZTI1MDM0YmNiYzA1Yw==", "commit": {"author": {"name": "Steve Ellcey", "email": "sje@cup.hp.com", "date": "2011-01-18T21:56:46Z"}, "committer": {"name": "Steve Ellcey", "email": "sje@gcc.gnu.org", "date": "2011-01-18T21:56:46Z"}, "message": "re PR target/46997 (new ia64 vector instructions are broken on HP-UX (big-endian))\n\n\tPR target/46997\n\t* ia64.c (ia64_expand_unpack): Fix code for TARGET_BIG_ENDIAN.\n\t(a64_expand_widen_sum): Ditto.\n\t* vect.md (mulv2si3): Disable for TARGET_BIG_ENDIAN.\n\t(vec_extract_evenodd_help): Ditto.\n\t(vec_extract_evenv4hi): Ditto.\n\t(vec_extract_oddv4hi): Ditto.\n\t(vec_extract_evenv2si): Ditto.\n\t(vec_extract_oddv2si): Ditto.\n\t(vec_extract_evenv2sf): Ditto.\n\t(vec_extract_oddv2sf): Ditto.\n\t(vec_pack_trunc_v4hi: Ditto.\n\t(vec_pack_trunc_v2si): Ditto.\n\t(vec_interleave_lowv8qi): Fix for TARGET_BIG_ENDIAN.\n\t(vec_interleave_highv8qi): Ditto.\n\t(mix1_r): Ditto.\n\t(vec_extract_oddv8qi): Ditto.\n\t(vec_interleave_lowv4hi): Ditto.\n\t(vec_interleave_highv4hi): Ditto.\n\t(vec_interleave_lowv2si): Ditto.\n\t(vec_interleave_highv2si): Ditto.\n\nFrom-SVN: r168970", "tree": {"sha": "413f03a11bdb16c6c643546c77a6bd8cf3ce1f2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/413f03a11bdb16c6c643546c77a6bd8cf3ce1f2e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2cd871faaa370e18d71e26bc92e25034bcbc05c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2cd871faaa370e18d71e26bc92e25034bcbc05c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2cd871faaa370e18d71e26bc92e25034bcbc05c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2cd871faaa370e18d71e26bc92e25034bcbc05c/comments", "author": null, "committer": null, "parents": [{"sha": "41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41a1208a11b9c7bcd0a90bba93f00b1ec047ee7e"}], "stats": {"total": 154, "additions": 124, "deletions": 30}, "files": [{"sha": "6c72e692bbf9b20bde326a7ec680aa3bec919114", "filename": "gcc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2cd871faaa370e18d71e26bc92e25034bcbc05c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2cd871faaa370e18d71e26bc92e25034bcbc05c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d2cd871faaa370e18d71e26bc92e25034bcbc05c", "patch": "@@ -1,3 +1,27 @@\n+2011-01-18  Steve Ellcey  <sje@cup.hp.com>\n+\n+\tPR target/46997\n+\t* ia64.c (ia64_expand_unpack): Fix code for TARGET_BIG_ENDIAN.\n+\t(a64_expand_widen_sum): Ditto.\n+\t* vect.md (mulv2si3): Disable for TARGET_BIG_ENDIAN.\n+\t(vec_extract_evenodd_help): Ditto.\n+\t(vec_extract_evenv4hi): Ditto.\n+\t(vec_extract_oddv4hi): Ditto.\n+\t(vec_extract_evenv2si): Ditto.\n+\t(vec_extract_oddv2si): Ditto.\n+\t(vec_extract_evenv2sf): Ditto.\n+\t(vec_extract_oddv2sf): Ditto.\n+\t(vec_pack_trunc_v4hi: Ditto.\n+\t(vec_pack_trunc_v2si): Ditto.\n+\t(vec_interleave_lowv8qi): Fix for TARGET_BIG_ENDIAN.\n+\t(vec_interleave_highv8qi): Ditto.\n+\t(mix1_r): Ditto.\n+\t(vec_extract_oddv8qi): Ditto.\n+\t(vec_interleave_lowv4hi): Ditto.\n+\t(vec_interleave_highv4hi): Ditto.\n+\t(vec_interleave_lowv2si): Ditto.\n+\t(vec_interleave_highv2si): Ditto.\n+\n 2011-01-18  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* doc/extend.texi: Mention __float128 support on hppa HP-UX."}, {"sha": "1842555502b100c4c366e730391feac62f7be209", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 40, "deletions": 12, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2cd871faaa370e18d71e26bc92e25034bcbc05c/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2cd871faaa370e18d71e26bc92e25034bcbc05c/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=d2cd871faaa370e18d71e26bc92e25034bcbc05c", "patch": "@@ -2007,7 +2007,10 @@ ia64_expand_unpack (rtx operands[3], bool unsignedp, bool highp)\n       gcc_assert (!neg);\n     }\n \n-  emit_insn (gen (gen_lowpart (mode, operands[0]), operands[1], x));\n+  if (TARGET_BIG_ENDIAN)\n+    emit_insn (gen (gen_lowpart (mode, operands[0]), x, operands[1]));\n+  else\n+    emit_insn (gen (gen_lowpart (mode, operands[0]), operands[1], x));\n }\n \n /* Emit an integral vector widening sum operations.  */\n@@ -2058,8 +2061,16 @@ ia64_expand_widen_sum (rtx operands[3], bool unsignedp)\n   h = gen_reg_rtx (wmode);\n   s = gen_reg_rtx (wmode);\n \n-  emit_insn (unpack_l (gen_lowpart (mode, l), operands[1], x));\n-  emit_insn (unpack_h (gen_lowpart (mode, h), operands[1], x));\n+  if (TARGET_BIG_ENDIAN)\n+    {\n+      emit_insn (unpack_l (gen_lowpart (mode, l), x, operands[1]));\n+      emit_insn (unpack_h (gen_lowpart (mode, h), x, operands[1]));\n+    }\n+  else\n+    {\n+      emit_insn (unpack_l (gen_lowpart (mode, l), operands[1], x));\n+      emit_insn (unpack_h (gen_lowpart (mode, h), operands[1], x));\n+    }\n   emit_insn (plus (s, l, operands[2]));\n   emit_insn (plus (operands[0], h, s));\n }\n@@ -2082,7 +2093,10 @@ ia64_expand_widen_mul_v4hi (rtx operands[3], bool unsignedp, bool highp)\n   emit_insn (mulhigh (h, operands[1], operands[2], GEN_INT (16)));\n \n   interl = highp ? gen_vec_interleave_highv4hi : gen_vec_interleave_lowv4hi;\n-  emit_insn (interl (gen_lowpart (V4HImode, operands[0]), l, h));\n+  if (TARGET_BIG_ENDIAN)\n+    emit_insn (interl (gen_lowpart (V4HImode, operands[0]), h, l));\n+  else\n+    emit_insn (interl (gen_lowpart (V4HImode, operands[0]), l, h));\n }\n \n /* Emit a signed or unsigned V8QI dot product operation.  */\n@@ -2115,14 +2129,28 @@ ia64_expand_dot_prod_v8qi (rtx operands[4], bool unsignedp)\n   h1 = gen_reg_rtx (V4HImode);\n   h2 = gen_reg_rtx (V4HImode);\n \n-  emit_insn (gen_vec_interleave_lowv8qi\n-\t     (gen_lowpart (V8QImode, l1), operands[1], x1));\n-  emit_insn (gen_vec_interleave_lowv8qi\n-\t     (gen_lowpart (V8QImode, l2), operands[2], x2));\n-  emit_insn (gen_vec_interleave_highv8qi\n-\t     (gen_lowpart (V8QImode, h1), operands[1], x1));\n-  emit_insn (gen_vec_interleave_highv8qi\n-\t     (gen_lowpart (V8QImode, h2), operands[2], x2));\n+  if (TARGET_BIG_ENDIAN)\n+    {\n+      emit_insn (gen_vec_interleave_lowv8qi\n+\t\t (gen_lowpart (V8QImode, l1), x1, operands[1]));\n+      emit_insn (gen_vec_interleave_lowv8qi\n+\t\t (gen_lowpart (V8QImode, l2), x2, operands[2]));\n+      emit_insn (gen_vec_interleave_highv8qi\n+\t\t (gen_lowpart (V8QImode, h1), x1, operands[1]));\n+      emit_insn (gen_vec_interleave_highv8qi\n+\t\t (gen_lowpart (V8QImode, h2), x2, operands[2]));\n+    }\n+  else\n+    {\n+      emit_insn (gen_vec_interleave_lowv8qi\n+\t\t (gen_lowpart (V8QImode, l1), operands[1], x1));\n+      emit_insn (gen_vec_interleave_lowv8qi\n+\t\t (gen_lowpart (V8QImode, l2), operands[2], x2));\n+      emit_insn (gen_vec_interleave_highv8qi\n+\t\t (gen_lowpart (V8QImode, h1), operands[1], x1));\n+      emit_insn (gen_vec_interleave_highv8qi\n+\t\t (gen_lowpart (V8QImode, h2), operands[2], x2));\n+    }\n \n   p1 = gen_reg_rtx (V2SImode);\n   p2 = gen_reg_rtx (V2SImode);"}, {"sha": "36db5753e1ce977d36a0a2efacab0fe82b6aa15f", "filename": "gcc/config/ia64/vect.md", "status": "modified", "additions": 60, "deletions": 18, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2cd871faaa370e18d71e26bc92e25034bcbc05c/gcc%2Fconfig%2Fia64%2Fvect.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2cd871faaa370e18d71e26bc92e25034bcbc05c/gcc%2Fconfig%2Fia64%2Fvect.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvect.md?ref=d2cd871faaa370e18d71e26bc92e25034bcbc05c", "patch": "@@ -370,7 +370,7 @@\n   [(set (match_operand:V2SI 0 \"gr_register_operand\" \"\")\n \t(mult:V2SI (match_operand:V2SI 1 \"gr_register_operand\" \"r\")\n \t\t   (match_operand:V2SI 2 \"gr_register_operand\" \"r\")))]\n-  \"\"\n+  \"!TARGET_BIG_ENDIAN\"\n {\n   rtx t0, t1, t2, t3, t4, t5, t6, t7, x;\n   rtx op1h = gen_lowpart (V4HImode, operands[1]);\n@@ -709,7 +709,13 @@\n \t\t     (const_int 2) (const_int 10)\n \t\t     (const_int 3) (const_int 11)])))]\n   \"\"\n-  \"unpack1.l %0 = %r2, %r1\"\n+{\n+  /* Recall that vector elements are numbered in memory order.  */\n+  if (TARGET_BIG_ENDIAN)\n+    return \"%,unpack1.l %0 = %r1, %r2\";\n+  else\n+    return \"%,unpack1.l %0 = %r2, %r1\";\n+}\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n (define_insn \"vec_interleave_highv8qi\"\n@@ -723,7 +729,13 @@\n \t\t     (const_int 6) (const_int 14)\n \t\t     (const_int 7) (const_int 15)])))]\n   \"\"\n-  \"unpack1.h %0 = %r2, %r1\"\n+{\n+  /* Recall that vector elements are numbered in memory order.  */\n+  if (TARGET_BIG_ENDIAN)\n+    return \"%,unpack1.h %0 = %r1, %r2\";\n+  else\n+    return \"%,unpack1.h %0 = %r2, %r1\";\n+}\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n (define_insn \"mix1_r\"\n@@ -857,7 +869,10 @@\n   \"\"\n {\n   rtx temp = gen_reg_rtx (V8QImode);\n-  emit_insn (gen_mix1_r (temp, operands[1], operands[2]));\n+  if (TARGET_BIG_ENDIAN)\n+    emit_insn (gen_mix1_l (temp, operands[2], operands[1]));\n+  else\n+    emit_insn (gen_mix1_r (temp, operands[1], operands[2]));\n   emit_insn (gen_mux1_alt (operands[0], temp));\n   DONE;\n })\n@@ -869,7 +884,10 @@\n   \"\"\n {\n   rtx temp = gen_reg_rtx (V8QImode);\n-  emit_insn (gen_mix1_l (temp, operands[1], operands[2]));\n+  if (TARGET_BIG_ENDIAN)\n+    emit_insn (gen_mix1_r (temp, operands[2], operands[1]));\n+  else\n+    emit_insn (gen_mix1_l (temp, operands[1], operands[2]));\n   emit_insn (gen_mux1_alt (operands[0], temp));\n   DONE;\n })\n@@ -885,7 +903,13 @@\n \t\t     (const_int 1)\n \t\t     (const_int 5)])))]\n   \"\"\n-  \"unpack2.l %0 = %r2, %r1\"\n+{\n+  /* Recall that vector elements are numbered in memory order.  */\n+  if (TARGET_BIG_ENDIAN)\n+    return \"%,unpack2.l %0 = %r1, %r2\";\n+  else\n+    return \"%,unpack2.l %0 = %r2, %r1\";\n+}\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n (define_insn \"vec_interleave_highv4hi\"\n@@ -899,7 +923,13 @@\n \t\t     (const_int 3)\n \t\t     (const_int 7)])))]\n   \"\"\n-  \"unpack2.h %0 = %r2, %r1\"\n+{\n+  /* Recall that vector elements are numbered in memory order.  */\n+  if (TARGET_BIG_ENDIAN)\n+    return \"%,unpack2.h %0 = %r1, %r2\";\n+  else\n+    return \"%,unpack2.h %0 = %r2, %r1\";\n+}\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n (define_insn \"mix2_r\"\n@@ -958,13 +988,13 @@\n \t\t     (const_int 2)\n \t\t     (const_int 1)\n \t\t     (const_int 3)])))]\n-  \"\")\n+  \"!TARGET_BIG_ENDIAN\")\n \n (define_expand \"vec_extract_evenv4hi\"\n   [(match_operand:V4HI 0 \"gr_register_operand\")\n    (match_operand:V4HI 1 \"gr_reg_or_0_operand\")\n    (match_operand:V4HI 2 \"gr_reg_or_0_operand\")]\n-  \"\"\n+  \"!TARGET_BIG_ENDIAN\"\n {\n   rtx temp = gen_reg_rtx (V4HImode);\n   emit_insn (gen_mix2_r (temp, operands[1], operands[2]));\n@@ -976,7 +1006,7 @@\n   [(match_operand:V4HI 0 \"gr_register_operand\")\n    (match_operand:V4HI 1 \"gr_reg_or_0_operand\")\n    (match_operand:V4HI 2 \"gr_reg_or_0_operand\")]\n-  \"\"\n+  \"!TARGET_BIG_ENDIAN\"\n {\n   rtx temp = gen_reg_rtx (V4HImode);\n   emit_insn (gen_mix2_l (temp, operands[1], operands[2]));\n@@ -1002,7 +1032,13 @@\n \t  (parallel [(const_int 0)\n \t\t     (const_int 2)])))]\n   \"\"\n-  \"unpack4.l %0 = %r2, %r1\"\n+{\n+  /* Recall that vector elements are numbered in memory order.  */\n+  if (TARGET_BIG_ENDIAN)\n+    return \"%,unpack4.h %0 = %r1, %r2\";\n+  else\n+    return \"%,unpack4.l %0 = %r2, %r1\";\n+}\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n ;; Note that mix4.l performs the exact same operation.\n@@ -1015,14 +1051,20 @@\n \t  (parallel [(const_int 1)\n \t\t     (const_int 3)])))]\n   \"\"\n-  \"unpack4.h %0 = %r2, %r1\"\n+{\n+  /* Recall that vector elements are numbered in memory order.  */\n+  if (TARGET_BIG_ENDIAN)\n+    return \"%,unpack4.l %0 = %r1, %r2\";\n+  else\n+    return \"%,unpack4.h %0 = %r2, %r1\";\n+}\n   [(set_attr \"itanium_class\" \"mmshf\")])\n \n (define_expand \"vec_extract_evenv2si\"\n   [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n    (match_operand:V2SI 1 \"gr_register_operand\" \"\")\n    (match_operand:V2SI 2 \"gr_register_operand\" \"\")]\n-  \"\"\n+  \"!TARGET_BIG_ENDIAN\"\n {\n   emit_insn (gen_vec_interleave_lowv2si (operands[0], operands[1],\n \t\t\t\t\t operands[2]));\n@@ -1033,7 +1075,7 @@\n   [(match_operand:V2SI 0 \"gr_register_operand\" \"\")\n    (match_operand:V2SI 1 \"gr_register_operand\" \"\")\n    (match_operand:V2SI 2 \"gr_register_operand\" \"\")]\n-  \"\"\n+  \"!TARGET_BIG_ENDIAN\"\n {\n   emit_insn (gen_vec_interleave_highv2si (operands[0], operands[1],\n \t\t\t\t\t  operands[2]));\n@@ -1397,7 +1439,7 @@\n   [(match_operand:V2SF 0 \"gr_register_operand\" \"\")\n    (match_operand:V2SF 1 \"gr_register_operand\" \"\")\n    (match_operand:V2SF 2 \"gr_register_operand\" \"\")]\n-  \"\"\n+  \"!TARGET_BIG_ENDIAN\"\n {\n   emit_insn (gen_vec_interleave_lowv2sf (operands[0], operands[1],\n \t\t\t\t\t operands[2]));\n@@ -1408,7 +1450,7 @@\n   [(match_operand:V2SF 0 \"gr_register_operand\" \"\")\n    (match_operand:V2SF 1 \"gr_register_operand\" \"\")\n    (match_operand:V2SF 2 \"gr_register_operand\" \"\")]\n-  \"\"\n+  \"!TARGET_BIG_ENDIAN\"\n {\n   emit_insn (gen_vec_interleave_highv2sf (operands[0], operands[1],\n \t\t\t\t\t  operands[2]));\n@@ -1540,7 +1582,7 @@\n   [(match_operand:V8QI 0 \"gr_register_operand\" \"\")\n    (match_operand:V4HI 1 \"gr_register_operand\" \"\")\n    (match_operand:V4HI 2 \"gr_register_operand\" \"\")]\n-  \"\"\n+  \"!TARGET_BIG_ENDIAN\"\n {\n   rtx op1 = gen_lowpart(V8QImode, operands[1]);\n   rtx op2 = gen_lowpart(V8QImode, operands[2]);\n@@ -1552,7 +1594,7 @@\n   [(match_operand:V4HI 0 \"gr_register_operand\" \"\")\n    (match_operand:V2SI 1 \"gr_register_operand\" \"\")\n    (match_operand:V2SI 2 \"gr_register_operand\" \"\")]\n-  \"\"\n+  \"!TARGET_BIG_ENDIAN\"\n {\n   rtx op1 = gen_lowpart(V4HImode, operands[1]);\n   rtx op2 = gen_lowpart(V4HImode, operands[2]);"}]}