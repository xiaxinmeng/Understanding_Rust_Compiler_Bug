{"sha": "8c08c983015e675f555d57a30e15d918abef2b93", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMwOGM5ODMwMTVlNjc1ZjU1NWQ1N2EzMGUxNWQ5MThhYmVmMmI5Mw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-27T21:23:43Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2020-01-28T01:56:33Z"}, "message": "analyzer: fix ICE when canonicalizing NaN (PR 93451)\n\nPR analyzer/93451 reports an ICE when canonicalizing the constants\nin a region_model, with a failed qsort_chk when attempting to sort\nthe constants within the region_model.\n\nThe svalues in the model were:\n  sv0: {poisoned: uninit}\n  sv1: {type: \u2018double\u2019, \u20180.0\u2019}\n  sv2: {type: \u2018double\u2019, \u20181.0e+0\u2019}\n  sv3: {type: \u2018double\u2019, \u2018 Nan\u2019}\n\nThe qsort_chk of the 3 constants fails due to tree_cmp using the\nLT_EXPR ordering of the REAL_CSTs, which doesn't work for NaN.\n\nThis patch adjusts tree_cmp to impose an arbitrary ordering during\ncanonicalization for UNORDERED_EXPR cases w/o relying on the LT_EXPR\nordering, fixing the ICE.\n\ngcc/analyzer/ChangeLog:\n\tPR analyzer/93451\n\t* region-model.cc (tree_cmp): For the REAL_CST case, impose an\n\tarbitrary order on NaNs relative to other NaNs and to non-NaNs;\n\tconst-correctness tweak.\n\t(ana::selftests::build_real_cst_from_string): New function.\n\t(ana::selftests::append_interesting_constants): New function.\n\t(ana::selftests::test_tree_cmp_on_constants): New test.\n\t(ana::selftests::test_canonicalization_4): New test.\n\t(ana::selftests::analyzer_region_model_cc_tests): Call the new\n\ttests.\n\ngcc/testsuite/ChangeLog:\n\tPR analyzer/93451\n\t* gcc.dg/analyzer/torture/pr93451.c: New test.", "tree": {"sha": "876b73727917c9a5d860abcb01bedf8b6b83d8dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/876b73727917c9a5d860abcb01bedf8b6b83d8dc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c08c983015e675f555d57a30e15d918abef2b93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c08c983015e675f555d57a30e15d918abef2b93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c08c983015e675f555d57a30e15d918abef2b93", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c08c983015e675f555d57a30e15d918abef2b93/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85d6090eb864e00aba0ce2a1610282f0f976f433", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d6090eb864e00aba0ce2a1610282f0f976f433", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d6090eb864e00aba0ce2a1610282f0f976f433"}], "stats": {"total": 122, "additions": 119, "deletions": 3}, "files": [{"sha": "9ba6adc6b0192830f0086984deb5d8455e5d2d38", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c08c983015e675f555d57a30e15d918abef2b93/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c08c983015e675f555d57a30e15d918abef2b93/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=8c08c983015e675f555d57a30e15d918abef2b93", "patch": "@@ -1,3 +1,16 @@\n+2020-01-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93451\n+\t* region-model.cc (tree_cmp): For the REAL_CST case, impose an\n+\tarbitrary order on NaNs relative to other NaNs and to non-NaNs;\n+\tconst-correctness tweak.\n+\t(ana::selftests::build_real_cst_from_string): New function.\n+\t(ana::selftests::append_interesting_constants): New function.\n+\t(ana::selftests::test_tree_cmp_on_constants): New test.\n+\t(ana::selftests::test_canonicalization_4): New test.\n+\t(ana::selftests::analyzer_region_model_cc_tests): Call the new\n+\ttests.\n+\n 2020-01-27  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/93349"}, {"sha": "62c96a6ceeae214750e9829d492a0407fe8156fe", "filename": "gcc/analyzer/region-model.cc", "status": "modified", "additions": 87, "deletions": 3, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c08c983015e675f555d57a30e15d918abef2b93/gcc%2Fanalyzer%2Fregion-model.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c08c983015e675f555d57a30e15d918abef2b93/gcc%2Fanalyzer%2Fregion-model.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2Fregion-model.cc?ref=8c08c983015e675f555d57a30e15d918abef2b93", "patch": "@@ -1811,11 +1811,22 @@ tree_cmp (const_tree t1, const_tree t2)\n \n     case REAL_CST:\n       {\n-\treal_value *rv1 = TREE_REAL_CST_PTR (t1);\n-\treal_value *rv2 = TREE_REAL_CST_PTR (t2);\n+\tconst real_value *rv1 = TREE_REAL_CST_PTR (t1);\n+\tconst real_value *rv2 = TREE_REAL_CST_PTR (t2);\n+\tif (real_compare (UNORDERED_EXPR, rv1, rv2))\n+\t  {\n+\t    /* Impose an arbitrary order on NaNs relative to other NaNs\n+\t       and to non-NaNs.  */\n+\t    if (int cmp_isnan = real_isnan (rv1) - real_isnan (rv2))\n+\t      return cmp_isnan;\n+\t    if (int cmp_issignaling_nan\n+\t\t  = real_issignaling_nan (rv1) - real_issignaling_nan (rv2))\n+\t      return cmp_issignaling_nan;\n+\t    return real_isneg (rv1) - real_isneg (rv2);\n+\t  }\n \tif (real_compare (LT_EXPR, rv1, rv2))\n \t  return -1;\n-\tif (real_compare (LT_EXPR, rv2, rv1))\n+\tif (real_compare (GT_EXPR, rv1, rv2))\n \t  return 1;\n \treturn 0;\n       }\n@@ -6927,6 +6938,58 @@ namespace ana {\n \n namespace selftest {\n \n+/* Build a constant tree of the given type from STR.  */\n+\n+static tree\n+build_real_cst_from_string (tree type, const char *str)\n+{\n+  REAL_VALUE_TYPE real;\n+  real_from_string (&real, str);\n+  return build_real (type, real);\n+}\n+\n+/* Append various \"interesting\" constants to OUT (e.g. NaN).  */\n+\n+static void\n+append_interesting_constants (auto_vec<tree> *out)\n+{\n+  out->safe_push (build_int_cst (integer_type_node, 0));\n+  out->safe_push (build_int_cst (integer_type_node, 42));\n+  out->safe_push (build_int_cst (unsigned_type_node, 0));\n+  out->safe_push (build_int_cst (unsigned_type_node, 42));\n+  out->safe_push (build_real_cst_from_string (float_type_node, \"QNaN\"));\n+  out->safe_push (build_real_cst_from_string (float_type_node, \"-QNaN\"));\n+  out->safe_push (build_real_cst_from_string (float_type_node, \"SNaN\"));\n+  out->safe_push (build_real_cst_from_string (float_type_node, \"-SNaN\"));\n+  out->safe_push (build_real_cst_from_string (float_type_node, \"0.0\"));\n+  out->safe_push (build_real_cst_from_string (float_type_node, \"-0.0\"));\n+  out->safe_push (build_real_cst_from_string (float_type_node, \"Inf\"));\n+  out->safe_push (build_real_cst_from_string (float_type_node, \"-Inf\"));\n+}\n+\n+/* Verify that tree_cmp is a well-behaved comparator for qsort, even\n+   if the underlying constants aren't comparable.  */\n+\n+static void\n+test_tree_cmp_on_constants ()\n+{\n+  auto_vec<tree> csts;\n+  append_interesting_constants (&csts);\n+\n+  /* Try sorting every triple. */\n+  const unsigned num = csts.length ();\n+  for (unsigned i = 0; i < num; i++)\n+    for (unsigned j = 0; j < num; j++)\n+      for (unsigned k = 0; k < num; k++)\n+\t{\n+\t  auto_vec<tree> v (3);\n+\t  v.quick_push (csts[i]);\n+\t  v.quick_push (csts[j]);\n+\t  v.quick_push (csts[k]);\n+\t  v.qsort (tree_cmp);\n+\t}\n+}\n+\n /* Implementation detail of the ASSERT_CONDITION_* macros.  */\n \n void\n@@ -7577,6 +7640,25 @@ test_canonicalization_3 ()\n   ASSERT_EQ (model0, model1);\n }\n \n+/* Verify that we can canonicalize a model containing NaN and other real\n+   constants.  */\n+\n+static void\n+test_canonicalization_4 ()\n+{\n+  auto_vec<tree> csts;\n+  append_interesting_constants (&csts);\n+\n+  region_model model;\n+\n+  unsigned i;\n+  tree cst;\n+  FOR_EACH_VEC_ELT (csts, i, cst)\n+    model.get_rvalue (cst, NULL);\n+\n+  model.canonicalize (NULL);\n+}\n+\n /* Assert that if we have two region_model instances\n    with values VAL_A and VAL_B for EXPR that they are\n    mergable.  Write the merged model to *OUT_MERGED_MODEL,\n@@ -7957,6 +8039,7 @@ test_constraint_merging ()\n void\n analyzer_region_model_cc_tests ()\n {\n+  test_tree_cmp_on_constants ();\n   test_dump ();\n   test_unique_constants ();\n   test_svalue_equality ();\n@@ -7969,6 +8052,7 @@ analyzer_region_model_cc_tests ()\n   test_canonicalization_1 ();\n   test_canonicalization_2 ();\n   test_canonicalization_3 ();\n+  test_canonicalization_4 ();\n   test_state_merging ();\n   test_constraint_merging ();\n }"}, {"sha": "f83f18b77169d25d08f997474c6c39dd6a816231", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c08c983015e675f555d57a30e15d918abef2b93/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c08c983015e675f555d57a30e15d918abef2b93/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c08c983015e675f555d57a30e15d918abef2b93", "patch": "@@ -1,3 +1,8 @@\n+2020-01-27  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/93451\n+\t* gcc.dg/analyzer/torture/pr93451.c: New test.\n+\n 2020-01-27  Stam Markianos-Wright  <stam.markianos-wright@arm.com>\n \n \t* gcc.target/arm/armv8_2-fp16-move-1.c: Update following load/store"}, {"sha": "5908bc4b69fc67dc689324cd287d621c0873c561", "filename": "gcc/testsuite/gcc.dg/analyzer/torture/pr93451.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c08c983015e675f555d57a30e15d918abef2b93/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93451.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c08c983015e675f555d57a30e15d918abef2b93/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93451.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fanalyzer%2Ftorture%2Fpr93451.c?ref=8c08c983015e675f555d57a30e15d918abef2b93", "patch": "@@ -0,0 +1,14 @@\n+void\n+mt (double);\n+\n+void\n+nm (void)\n+{\n+  double ao = 0.0;\n+  long int es = -1;\n+\n+  mt (ao);\n+  ++ao;\n+  mt (ao);\n+  mt (*(double *) &es);\n+}"}]}