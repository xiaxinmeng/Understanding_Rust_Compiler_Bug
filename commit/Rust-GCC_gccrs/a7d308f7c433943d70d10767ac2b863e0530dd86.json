{"sha": "a7d308f7c433943d70d10767ac2b863e0530dd86", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTdkMzA4ZjdjNDMzOTQzZDcwZDEwNzY3YWMyYjg2M2UwNTMwZGQ4Ng==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1999-02-25T10:46:06Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-02-25T10:46:06Z"}, "message": "stmt.c (expand_end_loop): Grok code emitted by expand_exit_loop_if_false.\n\n\t* stmt.c (expand_end_loop): Grok code emitted by\n\texpand_exit_loop_if_false.\n\nFrom-SVN: r25433", "tree": {"sha": "824bc402265b1335afaa046944563df39dc870c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/824bc402265b1335afaa046944563df39dc870c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a7d308f7c433943d70d10767ac2b863e0530dd86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d308f7c433943d70d10767ac2b863e0530dd86", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7d308f7c433943d70d10767ac2b863e0530dd86", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7d308f7c433943d70d10767ac2b863e0530dd86/comments", "author": null, "committer": null, "parents": [{"sha": "9f6ce99046aa5cd8a34bf935c91859f0de40f92a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f6ce99046aa5cd8a34bf935c91859f0de40f92a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f6ce99046aa5cd8a34bf935c91859f0de40f92a"}], "stats": {"total": 88, "additions": 83, "deletions": 5}, "files": [{"sha": "e164e1f3fadf7efe427d0836e9de4e832840dd36", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d308f7c433943d70d10767ac2b863e0530dd86/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d308f7c433943d70d10767ac2b863e0530dd86/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a7d308f7c433943d70d10767ac2b863e0530dd86", "patch": "@@ -1,3 +1,8 @@\n+Thu Feb 25 18:40:06 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* stmt.c (expand_end_loop): Grok code emitted by\n+\texpand_exit_loop_if_false.\n+\n Thu Feb 25 10:17:32 1999  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/arm/arm.c (return_in_memory): Float fields in unions"}, {"sha": "26ac0247332aa16056970a49cef6d532609ca634", "filename": "gcc/stmt.c", "status": "modified", "additions": 78, "deletions": 5, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a7d308f7c433943d70d10767ac2b863e0530dd86/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a7d308f7c433943d70d10767ac2b863e0530dd86/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=a7d308f7c433943d70d10767ac2b863e0530dd86", "patch": "@@ -2069,16 +2069,85 @@ expand_end_loop ()\n {\n   rtx start_label = loop_stack->data.loop.start_label;\n   rtx insn = get_last_insn ();\n+  int needs_end_jump = 1;\n \n   /* Mark the continue-point at the top of the loop if none elsewhere.  */\n   if (start_label == loop_stack->data.loop.continue_label)\n     emit_note_before (NOTE_INSN_LOOP_CONT, start_label);\n \n   do_pending_stack_adjust ();\n \n-  /* If optimizing, perhaps reorder the loop.  If the loop starts with\n-     a loop exit, roll that to the end where it will optimize together\n-     with the jump back.\n+  /* If optimizing, perhaps reorder the loop.\n+     First, try to use a condjump near the end.\n+     expand_exit_loop_if_false ends loops with unconditional jumps,\n+     like this:\n+\n+     if (test) goto label;\n+     optional: cleanup\n+     goto loop_stack->data.loop.end_label\n+     barrier\n+     label:\n+\n+     If we find such a pattern, we can end the loop earlier.  */\n+\n+  if (optimize\n+      && GET_CODE (insn) == CODE_LABEL\n+      && LABEL_NAME (insn) == NULL\n+      && GET_CODE (PREV_INSN (insn)) == BARRIER)\n+    {\n+      rtx label = insn;\n+      rtx jump = PREV_INSN (PREV_INSN (label));\n+\n+      if (GET_CODE (jump) == JUMP_INSN\n+\t  && GET_CODE (PATTERN (jump)) == SET\n+\t  && SET_DEST (PATTERN (jump)) == pc_rtx\n+\t  && GET_CODE (SET_SRC (PATTERN (jump))) == LABEL_REF\n+\t  && (XEXP (SET_SRC (PATTERN (jump)), 0)\n+\t      == loop_stack->data.loop.end_label))\n+\t{\n+\t  rtx prev;\n+\n+\t  /* The test might be complex and reference LABEL multiple times,\n+\t     like the loop in loop_iterations to set vtop.  To handle this,\n+\t     we move LABEL.  */\n+\t  insn = PREV_INSN (label);\n+\t  reorder_insns (label, label, start_label);\n+\n+\t  for (prev = PREV_INSN (jump); ; prev = PREV_INSN (prev))\n+\t   {\n+\t      /* We ignore line number notes, but if we see any other note,\n+\t\t in particular NOTE_INSN_BLOCK_*, NOTE_INSN_EH_REGION_*,\n+\t\t NOTE_INSN_LOOP_*, we disable this optimization.  */\n+\t      if (GET_CODE (prev) == NOTE)\n+\t\t{\n+\t\t  if (NOTE_LINE_NUMBER (prev) < 0)\n+\t\t    break;\n+\t\t  continue;\n+\t\t}\n+\t      if (GET_CODE (prev) == CODE_LABEL)\n+\t\tbreak;\n+\t      if (GET_CODE (prev) == JUMP_INSN)\n+\t\t{\n+\t\t  if (GET_CODE (PATTERN (prev)) == SET\n+\t\t      && SET_DEST (PATTERN (prev)) == pc_rtx\n+\t\t      && GET_CODE (SET_SRC (PATTERN (prev))) == IF_THEN_ELSE\n+\t\t      && (GET_CODE (XEXP (SET_SRC (PATTERN (prev)), 1))\n+\t\t\t  == LABEL_REF)\n+\t\t      && XEXP (XEXP (SET_SRC (PATTERN (prev)), 1), 0) == label)\n+\t\t    {\n+\t\t      XEXP (XEXP (SET_SRC (PATTERN (prev)), 1), 0)\n+\t\t\t= start_label;\n+\t\t      emit_note_after (NOTE_INSN_LOOP_END, prev);\n+\t\t      needs_end_jump = 0;\n+\t\t    }\n+\t\t  break;\n+\t\t}\n+\t   }\n+\t}\n+    }\n+\n+     /* If the loop starts with a loop exit, roll that to the end where\n+     it will optimize together with the jump back.\n \n      We look for the conditional branch to the exit, except that once\n      we find such a branch, we don't look past 30 instructions.\n@@ -2105,6 +2174,7 @@ expand_end_loop ()\n      code, terminating in a test.  */\n \n   if (optimize\n+      && needs_end_jump\n       &&\n       ! (GET_CODE (insn) == JUMP_INSN\n \t && GET_CODE (PATTERN (insn)) == SET\n@@ -2288,8 +2358,11 @@ expand_end_loop ()\n \t}\n     }\n \n-  emit_jump (start_label);\n-  emit_note (NULL_PTR, NOTE_INSN_LOOP_END);\n+  if (needs_end_jump)\n+    {\n+      emit_jump (start_label);\n+      emit_note (NULL_PTR, NOTE_INSN_LOOP_END);\n+    }\n   emit_label (loop_stack->data.loop.end_label);\n \n   POPSTACK (loop_stack);"}]}