{"sha": "2b2340e236c0bba8aaca358ea25a5accd8249fbd", "node_id": "C_kwDOANBUbNoAKDJiMjM0MGUyMzZjMGJiYThhYWNhMzU4ZWEyNWE1YWNjZDgyNDlmYmQ", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2023-02-27T15:41:17Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2023-03-10T15:19:53Z"}, "message": "Allow libgomp 'cbuf' buffering with OpenACC 'async' for 'ephemeral' data\n\nThis does *allow*, but under no circumstances is this currently going to be\nused: all potentially applicable data is non-'ephemeral', and thus not\nconsidered for 'gomp_coalesce_buf_add' for OpenACC 'async'.  (But a use will\nemerge later.)\n\nFollow-up to commit r12-2530-gd88a6951586c7229b25708f4486eaaf4bf4b5bbe\n\"Don't use libgomp 'cbuf' buffering with OpenACC 'async'\", addressing this\nTODO comment:\n\n    TODO ... but we could allow CBUF usage for EPHEMERAL data?  (Open question:\n    is it more performant to use libgomp CBUF buffering or individual device\n    asyncronous copying?)\n\nEphemeral data is small, and therefore individual device asyncronous copying\ndoes seem dubious -- in particular given that for all those, we'd individually\nhave to allocate and queue for deallocation a temporary buffer to capture the\nephemeral data.  Instead, just let the 'cbuf' *be* the temporary buffer.\n\n\tlibgomp/\n\t* target.c (gomp_copy_host2dev, gomp_map_vars_internal): Allow\n\tlibgomp 'cbuf' buffering with OpenACC 'async' for 'ephemeral'\n\tdata.", "tree": {"sha": "a884e74a54c0cac5564c271ce4b937c4a4e614d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a884e74a54c0cac5564c271ce4b937c4a4e614d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b2340e236c0bba8aaca358ea25a5accd8249fbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2340e236c0bba8aaca358ea25a5accd8249fbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b2340e236c0bba8aaca358ea25a5accd8249fbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b2340e236c0bba8aaca358ea25a5accd8249fbd/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "199867d07be65cb0227a318ebf42b8376ca09313", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199867d07be65cb0227a318ebf42b8376ca09313", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199867d07be65cb0227a318ebf42b8376ca09313"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "074caa6a4dc0941f75f41d49695fe9f62fd68651", "filename": "libgomp/target.c", "status": "modified", "additions": 36, "deletions": 34, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b2340e236c0bba8aaca358ea25a5accd8249fbd/libgomp%2Ftarget.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b2340e236c0bba8aaca358ea25a5accd8249fbd/libgomp%2Ftarget.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftarget.c?ref=2b2340e236c0bba8aaca358ea25a5accd8249fbd", "patch": "@@ -310,10 +310,8 @@ struct gomp_coalesce_buf\n \n    This must not be used for asynchronous copies, because the host data might\n    not be computed yet (by an earlier asynchronous compute region, for\n-   example).\n-   TODO ... but we could allow CBUF usage for EPHEMERAL data?  (Open question:\n-   is it more performant to use libgomp CBUF buffering or individual device\n-   asyncronous copying?)  */\n+   example).  The exception is for EPHEMERAL data, that we know is available\n+   already \"by construction\".  */\n \n static inline void\n gomp_coalesce_buf_add (struct gomp_coalesce_buf *cbuf, size_t start, size_t len)\n@@ -377,30 +375,6 @@ gomp_copy_host2dev (struct gomp_device_descr *devicep,\n \t\t    void *d, const void *h, size_t sz,\n \t\t    bool ephemeral, struct gomp_coalesce_buf *cbuf)\n {\n-  if (__builtin_expect (aq != NULL, 0))\n-    {\n-      /* See 'gomp_coalesce_buf_add'.  */\n-      assert (!cbuf);\n-\n-      void *h_buf = (void *) h;\n-      if (ephemeral)\n-\t{\n-\t  /* We're queueing up an asynchronous copy from data that may\n-\t     disappear before the transfer takes place (i.e. because it is a\n-\t     stack local in a function that is no longer executing).  Make a\n-\t     copy of the data into a temporary buffer in those cases.  */\n-\t  h_buf = gomp_malloc (sz);\n-\t  memcpy (h_buf, h, sz);\n-\t}\n-      goacc_device_copy_async (devicep, devicep->openacc.async.host2dev_func,\n-\t\t\t       \"dev\", d, \"host\", h_buf, h, sz, aq);\n-      if (ephemeral)\n-\t/* Free temporary buffer once the transfer has completed.  */\n-\tdevicep->openacc.async.queue_callback_func (aq, free, h_buf);\n-\n-      return;\n-    }\n-\n   if (cbuf)\n     {\n       uintptr_t doff = (uintptr_t) d - cbuf->tgt->tgt_start;\n@@ -420,6 +394,12 @@ gomp_copy_host2dev (struct gomp_device_descr *devicep,\n \t\t      gomp_mutex_unlock (&devicep->lock);\n \t\t      gomp_fatal (\"internal libgomp cbuf error\");\n \t\t    }\n+\n+\t\t  /* In an asynchronous context, verify that CBUF isn't used\n+\t\t     with non-EPHEMERAL data; see 'gomp_coalesce_buf_add'.  */\n+\t\t  if (__builtin_expect (aq != NULL, 0))\n+\t\t    assert (ephemeral);\n+\n \t\t  memcpy ((char *) cbuf->buf + (doff - cbuf->chunks[0].start),\n \t\t\t  h, sz);\n \t\t  return;\n@@ -430,7 +410,28 @@ gomp_copy_host2dev (struct gomp_device_descr *devicep,\n \t}\n     }\n \n-  gomp_device_copy (devicep, devicep->host2dev_func, \"dev\", d, \"host\", h, sz);\n+  if (__builtin_expect (aq != NULL, 0))\n+    {\n+      void *h_buf = (void *) h;\n+      if (ephemeral)\n+\t{\n+\t  /* We're queueing up an asynchronous copy from data that may\n+\t     disappear before the transfer takes place (i.e. because it is a\n+\t     stack local in a function that is no longer executing).  As we've\n+\t     not been able to use CBUF, make a copy of the data into a\n+\t     temporary buffer.  */\n+\t  h_buf = gomp_malloc (sz);\n+\t  memcpy (h_buf, h, sz);\n+\t}\n+      goacc_device_copy_async (devicep, devicep->openacc.async.host2dev_func,\n+\t\t\t       \"dev\", d, \"host\", h_buf, h, sz, aq);\n+      if (ephemeral)\n+\t/* Free once the transfer has completed.  */\n+\tdevicep->openacc.async.queue_callback_func (aq, free, h_buf);\n+    }\n+  else\n+    gomp_device_copy (devicep, devicep->host2dev_func,\n+\t\t      \"dev\", d, \"host\", h, sz);\n }\n \n attribute_hidden void\n@@ -1751,18 +1752,19 @@ gomp_map_vars_internal (struct gomp_device_descr *devicep,\n \n   if (cbufp)\n     {\n-      /* See 'gomp_coalesce_buf_add'.  */\n-      assert (!aq);\n-\n       long c = 0;\n       for (c = 0; c < cbuf.chunk_cnt; ++c)\n \tgomp_copy_host2dev (devicep, aq,\n \t\t\t    (void *) (tgt->tgt_start + cbuf.chunks[c].start),\n \t\t\t    (char *) cbuf.buf + (cbuf.chunks[c].start\n \t\t\t\t\t\t - cbuf.chunks[0].start),\n \t\t\t    cbuf.chunks[c].end - cbuf.chunks[c].start,\n-\t\t\t    true, NULL);\n-      free (cbuf.buf);\n+\t\t\t    false, NULL);\n+      if (aq)\n+\t/* Free once the transfer has completed.  */\n+\tdevicep->openacc.async.queue_callback_func (aq, free, cbuf.buf);\n+      else\n+\tfree (cbuf.buf);\n       cbuf.buf = NULL;\n       cbufp = NULL;\n     }"}]}