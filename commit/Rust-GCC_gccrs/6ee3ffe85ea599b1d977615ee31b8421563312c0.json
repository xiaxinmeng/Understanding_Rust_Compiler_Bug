{"sha": "6ee3ffe85ea599b1d977615ee31b8421563312c0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVlM2ZmZTg1ZWE1OTliMWQ5Nzc2MTVlZTMxYjg0MjE1NjMzMTJjMA==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "2006-09-07T01:04:07Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2006-09-07T01:04:07Z"}, "message": "re PR c++/28903 (Rejects VLA in template class's member with using)\n\n\tPR c++/28903\n\t* pt.c (tsubst): Use fold_non_dependent_expr to fold array\n\tdimensions.\n\tPR c++/28886\n\t* pt.c (unify): Avoid unnecessary calls to fold_build2 for array\n\tdimensions.\n\nFrom-SVN: r116736", "tree": {"sha": "ad868713c74b728318412e4f976f6e9e9eced7ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ad868713c74b728318412e4f976f6e9e9eced7ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ee3ffe85ea599b1d977615ee31b8421563312c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee3ffe85ea599b1d977615ee31b8421563312c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ee3ffe85ea599b1d977615ee31b8421563312c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ee3ffe85ea599b1d977615ee31b8421563312c0/comments", "author": null, "committer": null, "parents": [{"sha": "d0304854de398cc3979df4976047c2dcd5de0723", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0304854de398cc3979df4976047c2dcd5de0723", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0304854de398cc3979df4976047c2dcd5de0723"}], "stats": {"total": 110, "additions": 98, "deletions": 12}, "files": [{"sha": "60d2fb29868acf3b54a8cf4bc5b8292f27b91093", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee3ffe85ea599b1d977615ee31b8421563312c0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee3ffe85ea599b1d977615ee31b8421563312c0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6ee3ffe85ea599b1d977615ee31b8421563312c0", "patch": "@@ -1,3 +1,13 @@\n+2006-09-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28903\n+\t* pt.c (tsubst): Use fold_non_dependent_expr to fold array\n+\tdimensions.\n+\n+\tPR c++/28886\n+\t* pt.c (unify): Avoid unnecessary calls to fold_build2 for array\n+\tdimensions.\n+\n 2006-09-06  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/26696"}, {"sha": "715b9461aba4bf8d4e79e032522cfe833639938d", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 47, "deletions": 12, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee3ffe85ea599b1d977615ee31b8421563312c0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee3ffe85ea599b1d977615ee31b8421563312c0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=6ee3ffe85ea599b1d977615ee31b8421563312c0", "patch": "@@ -7216,9 +7216,9 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n       {\n \ttree max, omax = TREE_OPERAND (TYPE_MAX_VALUE (t), 0);\n \n-\t/* The array dimension behaves like a non-type template arg,\n-\t   in that we want to fold it as much as possible.  */\n-\tmax = tsubst_template_arg (omax, args, complain, in_decl);\n+\tmax = tsubst_expr (omax, args, complain, in_decl,\n+\t\t\t   /*integral_constant_expression_p=*/false);\n+\tmax = fold_non_dependent_expr (max);\n \tmax = fold_decl_constant_value (max);\n \n \tif (TREE_CODE (max) != INTEGER_CST \n@@ -10618,21 +10618,56 @@ unify (tree tparms, tree targs, tree parm, tree arg, int strict)\n \t{\n \t  tree parm_max;\n \t  tree arg_max;\n-\n-\t  parm_max = TYPE_MAX_VALUE (TYPE_DOMAIN (parm));\n-\t  arg_max = TYPE_MAX_VALUE (TYPE_DOMAIN (arg));\n+\t  bool parm_cst;\n+\t  bool arg_cst;\n \n \t  /* Our representation of array types uses \"N - 1\" as the\n \t     TYPE_MAX_VALUE for an array with \"N\" elements, if \"N\" is\n-\t     not an integer constant.  */\n-\t  if (TREE_CODE (parm_max) == MINUS_EXPR)\n+\t     not an integer constant.  We cannot unify arbitrarily\n+\t     complex expressions, so we eliminate the MINUS_EXPRs\n+\t     here.  */\n+\t  parm_max = TYPE_MAX_VALUE (TYPE_DOMAIN (parm));\n+\t  parm_cst = TREE_CODE (parm_max) == INTEGER_CST;\n+\t  if (!parm_cst)\n \t    {\n-\t      arg_max = fold_build2 (PLUS_EXPR,\n-\t\t\t\t     integer_type_node,\n-\t\t\t\t     arg_max,\n-\t\t\t\t     TREE_OPERAND (parm_max, 1));\n+\t      gcc_assert (TREE_CODE (parm_max) == MINUS_EXPR);\n \t      parm_max = TREE_OPERAND (parm_max, 0);\n \t    }\n+\t  arg_max = TYPE_MAX_VALUE (TYPE_DOMAIN (arg));\n+\t  arg_cst = TREE_CODE (arg_max) == INTEGER_CST;\n+\t  if (!arg_cst)\n+\t    {\n+\t      /* The ARG_MAX may not be a simple MINUS_EXPR, if we are\n+\t\t trying to unify the type of a variable with the type\n+\t\t of a template parameter.  For example:\n+\n+                   template <unsigned int N>\n+\t\t   void f (char (&) [N]);\n+\t\t   int g(); \n+\t\t   void h(int i) {\n+                     char a[g(i)];\n+\t\t     f(a); \n+                   }\n+\n+                Here, the type of the ARG will be \"int [g(i)]\", and\n+                may be a SAVE_EXPR, etc.  */\n+\t      if (TREE_CODE (arg_max) != MINUS_EXPR)\n+\t\treturn 1;\n+\t      arg_max = TREE_OPERAND (arg_max, 0);\n+\t    }\n+\n+\t  /* If only one of the bounds used a MINUS_EXPR, compensate\n+\t     by adding one to the other bound.  */\n+\t  if (parm_cst && !arg_cst)\n+\t    parm_max = fold_build2 (PLUS_EXPR,\n+\t\t\t\t    integer_type_node,\n+\t\t\t\t    parm_max,\n+\t\t\t\t    integer_one_node);\n+\t  else if (arg_cst && !parm_cst)\n+\t    arg_max = fold_build2 (PLUS_EXPR,\n+\t\t\t\t   integer_type_node,\n+\t\t\t\t   arg_max,\n+\t\t\t\t   integer_one_node);\n \n \t  if (unify (tparms, targs, parm_max, arg_max, UNIFY_ALLOW_INTEGER))\n \t    return 1;"}, {"sha": "6e7bd99eee7740b554cce97862c6b49c322674d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee3ffe85ea599b1d977615ee31b8421563312c0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee3ffe85ea599b1d977615ee31b8421563312c0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ee3ffe85ea599b1d977615ee31b8421563312c0", "patch": "@@ -1,3 +1,11 @@\n+2006-09-06  Mark Mitchell  <mark@codesourcery.com>\n+\n+\tPR c++/28903\n+\t* g++.dg/ext/vla3.C: New test.\n+\n+\tPR c++/28886\n+\t* g++.dg/template/array16.C: New test.\n+\n 2006-09-06  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/pr27226.c: Remove testcase again."}, {"sha": "329cc7dde00c745a0aecdd0d8eb926076315dfb8", "filename": "gcc/testsuite/g++.dg/ext/vla3.C", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee3ffe85ea599b1d977615ee31b8421563312c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee3ffe85ea599b1d977615ee31b8421563312c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla3.C?ref=6ee3ffe85ea599b1d977615ee31b8421563312c0", "patch": "@@ -0,0 +1,24 @@\n+// PR c++/28903\n+// { dg-options \"\" }\n+\n+template <class>\n+struct View \n+{\n+  int n;\n+};\n+template <class ViewA>\n+struct ViewDom : View<ViewA>\n+{\n+  using View<ViewA>::n;\n+  ViewDom();\n+};\n+template <class ViewA>\n+ViewDom<ViewA>::ViewDom()\n+{\n+  char a[n];\n+}\n+void element( )\n+{\n+  ViewDom<int> a;\n+}\n+"}, {"sha": "c51441041b45e81c4b23cf9d4f86b7ad0f2d7603", "filename": "gcc/testsuite/g++.dg/template/array16.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ee3ffe85ea599b1d977615ee31b8421563312c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ee3ffe85ea599b1d977615ee31b8421563312c0/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Farray16.C?ref=6ee3ffe85ea599b1d977615ee31b8421563312c0", "patch": "@@ -0,0 +1,9 @@\n+// PR c++/28886\n+\n+template<typename> struct A;\n+\n+template<typename T, int N> struct A<T[N]> {};\n+\n+template<typename T, int N> struct A<const T[N]> {};\n+\n+A<const int[1]> a;"}]}