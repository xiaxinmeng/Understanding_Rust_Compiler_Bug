{"sha": "3f5d8b4b19550772026ce8ace298ba65992831f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2Y1ZDhiNGIxOTU1MDc3MjAyNmNlOGFjZTI5OGJhNjU5OTI4MzFmOA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2004-11-09T17:46:06Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2004-11-09T17:46:06Z"}, "message": "emit-rtl.c (copy_most_rtx): Remove.\n\n\t* emit-rtl.c (copy_most_rtx): Remove.\n\t* rtl.h: Remove the corresponding prototype.\n\nFrom-SVN: r90356", "tree": {"sha": "13879adff1465931f0d9a533c8aa1fdb4749749b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13879adff1465931f0d9a533c8aa1fdb4749749b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3f5d8b4b19550772026ce8ace298ba65992831f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5d8b4b19550772026ce8ace298ba65992831f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3f5d8b4b19550772026ce8ace298ba65992831f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3f5d8b4b19550772026ce8ace298ba65992831f8/comments", "author": null, "committer": null, "parents": [{"sha": "9d3fe3556abd00cc6ef0c51d0b91ecfcddafeefd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d3fe3556abd00cc6ef0c51d0b91ecfcddafeefd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d3fe3556abd00cc6ef0c51d0b91ecfcddafeefd"}], "stats": {"total": 105, "additions": 5, "deletions": 100}, "files": [{"sha": "3333159014bd3e03b165cefc5d6ae7a5b9b0d2b1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5d8b4b19550772026ce8ace298ba65992831f8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5d8b4b19550772026ce8ace298ba65992831f8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3f5d8b4b19550772026ce8ace298ba65992831f8", "patch": "@@ -1,3 +1,8 @@\n+2004-11-09  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* emit-rtl.c (copy_most_rtx): Remove.\n+\t* rtl.h: Remove the corresponding prototype.\n+\n 2004-11-09  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* cfgloop.c (flow_loops_update): Remove."}, {"sha": "4bab5b3aa5beaea0af2241f1a45ae46535ada0bf", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 0, "deletions": 99, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5d8b4b19550772026ce8ace298ba65992831f8/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5d8b4b19550772026ce8ace298ba65992831f8/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=3f5d8b4b19550772026ce8ace298ba65992831f8", "patch": "@@ -2371,105 +2371,6 @@ reset_used_decls (tree blk)\n     reset_used_decls (t);\n }\n \n-/* Similar to `copy_rtx' except that if MAY_SHARE is present, it is\n-   placed in the result directly, rather than being copied.  MAY_SHARE is\n-   either a MEM of an EXPR_LIST of MEMs.  */\n-\n-rtx\n-copy_most_rtx (rtx orig, rtx may_share)\n-{\n-  rtx copy;\n-  int i, j;\n-  RTX_CODE code;\n-  const char *format_ptr;\n-\n-  if (orig == may_share\n-      || (GET_CODE (may_share) == EXPR_LIST\n-\t  && in_expr_list_p (may_share, orig)))\n-    return orig;\n-\n-  code = GET_CODE (orig);\n-\n-  switch (code)\n-    {\n-    case REG:\n-    case CONST_INT:\n-    case CONST_DOUBLE:\n-    case CONST_VECTOR:\n-    case SYMBOL_REF:\n-    case CODE_LABEL:\n-    case PC:\n-    case CC0:\n-      return orig;\n-    default:\n-      break;\n-    }\n-\n-  copy = rtx_alloc (code);\n-  PUT_MODE (copy, GET_MODE (orig));\n-  RTX_FLAG (copy, in_struct) = RTX_FLAG (orig, in_struct);\n-  RTX_FLAG (copy, volatil) = RTX_FLAG (orig, volatil);\n-  RTX_FLAG (copy, unchanging) = RTX_FLAG (orig, unchanging);\n-  RTX_FLAG (copy, frame_related) = RTX_FLAG (orig, frame_related);\n-  RTX_FLAG (copy, return_val) = RTX_FLAG (orig, return_val);\n-\n-  format_ptr = GET_RTX_FORMAT (GET_CODE (copy));\n-\n-  for (i = 0; i < GET_RTX_LENGTH (GET_CODE (copy)); i++)\n-    {\n-      switch (*format_ptr++)\n-\t{\n-\tcase 'e':\n-\t  XEXP (copy, i) = XEXP (orig, i);\n-\t  if (XEXP (orig, i) != NULL && XEXP (orig, i) != may_share)\n-\t    XEXP (copy, i) = copy_most_rtx (XEXP (orig, i), may_share);\n-\t  break;\n-\n-\tcase 'u':\n-\t  XEXP (copy, i) = XEXP (orig, i);\n-\t  break;\n-\n-\tcase 'E':\n-\tcase 'V':\n-\t  XVEC (copy, i) = XVEC (orig, i);\n-\t  if (XVEC (orig, i) != NULL)\n-\t    {\n-\t      XVEC (copy, i) = rtvec_alloc (XVECLEN (orig, i));\n-\t      for (j = 0; j < XVECLEN (copy, i); j++)\n-\t\tXVECEXP (copy, i, j)\n-\t\t  = copy_most_rtx (XVECEXP (orig, i, j), may_share);\n-\t    }\n-\t  break;\n-\n-\tcase 'w':\n-\t  XWINT (copy, i) = XWINT (orig, i);\n-\t  break;\n-\n-\tcase 'n':\n-\tcase 'i':\n-\t  XINT (copy, i) = XINT (orig, i);\n-\t  break;\n-\n-\tcase 't':\n-\t  XTREE (copy, i) = XTREE (orig, i);\n-\t  break;\n-\n-\tcase 's':\n-\tcase 'S':\n-\t  XSTR (copy, i) = XSTR (orig, i);\n-\t  break;\n-\n-\tcase '0':\n-\t  X0ANY (copy, i) = X0ANY (orig, i);\n-\t  break;\n-\n-\tdefault:\n-\t  gcc_unreachable ();\n-\t}\n-    }\n-  return copy;\n-}\n-\n /* Mark ORIG as in use, and return a copy of it if it was already in use.\n    Recursively does the same for subexpressions.  Uses\n    copy_rtx_if_shared_1 to reduce stack space.  */"}, {"sha": "d85c4bd86391ec08108aac08d52eb434b678a3ec", "filename": "gcc/rtl.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3f5d8b4b19550772026ce8ace298ba65992831f8/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3f5d8b4b19550772026ce8ace298ba65992831f8/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=3f5d8b4b19550772026ce8ace298ba65992831f8", "patch": "@@ -1387,7 +1387,6 @@ extern void dump_rtx_statistics (void);\n extern rtx copy_rtx_if_shared (rtx);\n \n /* In rtl.c */\n-extern rtx copy_most_rtx (rtx, rtx);\n extern rtx shallow_copy_rtx_stat (rtx MEM_STAT_DECL);\n #define shallow_copy_rtx(a) shallow_copy_rtx_stat (a MEM_STAT_INFO)\n extern int rtx_equal_p (rtx, rtx);"}]}