{"sha": "4166b03640d672a350817c10cd0e9691276d4956", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE2NmIwMzY0MGQ2NzJhMzUwODE3YzEwY2QwZTk2OTEyNzZkNDk1Ng==", "commit": {"author": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2004-09-09T19:44:07Z"}, "committer": {"name": "Andreas Tobler", "email": "andreast@gcc.gnu.org", "date": "2004-09-09T19:44:07Z"}, "message": "[multiple changes]\n\n2004-09-09  Michael Koch  <konqueror@gmx.de>\n\n\t* java/security/ProtectionDomain.java,\n\t* java/util/PropertyPermissionCollection.java:\n\tFixed javadocs all over.\n\n2004-09-09  Sven de Marothy  <sven@physto.se>\n\n\tPatch from David Gilbert <david.gilbert@object-refinery.com>\n\t* java/lang/Comparable.java: Fixed documentation errors.\n\t* java/util/Arrays.java: Likewise.\n\n2004-09-09  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n\n\t* java/net/Inet4Address.java\n\t(Inet4Address): Added comment to serialization UID.\n\t* java/text/Format.java\n\t(Format): Added comment to serialization UID.\n\nFrom-SVN: r87248", "tree": {"sha": "e24316135c48495e85ea2b2f1eba4438315a4853", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e24316135c48495e85ea2b2f1eba4438315a4853"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4166b03640d672a350817c10cd0e9691276d4956", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4166b03640d672a350817c10cd0e9691276d4956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4166b03640d672a350817c10cd0e9691276d4956", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4166b03640d672a350817c10cd0e9691276d4956/comments", "author": null, "committer": null, "parents": [{"sha": "21b11495d75df8fd0e5b23f0176f6aa676875055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21b11495d75df8fd0e5b23f0176f6aa676875055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21b11495d75df8fd0e5b23f0176f6aa676875055"}], "stats": {"total": 75, "additions": 52, "deletions": 23}, "files": [{"sha": "38c1ac28dad75d70821badb0d5b437b5187041d0", "filename": "libjava/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166b03640d672a350817c10cd0e9691276d4956/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166b03640d672a350817c10cd0e9691276d4956/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=4166b03640d672a350817c10cd0e9691276d4956", "patch": "@@ -1,3 +1,22 @@\n+2004-09-09  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/security/ProtectionDomain.java,\n+\t* java/util/PropertyPermissionCollection.java:\n+\tFixed javadocs all over.\n+\n+2004-09-09  Sven de Marothy  <sven@physto.se>\n+\n+\tPatch from David Gilbert <david.gilbert@object-refinery.com>\n+\t* java/lang/Comparable.java: Fixed documentation errors.\n+\t* java/util/Arrays.java: Likewise.\n+\n+2004-09-09  Andrew John Hughes  <gnu_andrew@member.fsf.org>\n+\n+\t* java/net/Inet4Address.java\n+\t(Inet4Address): Added comment to serialization UID.\n+\t* java/text/Format.java\n+\t(Format): Added comment to serialization UID.\n+\n 2004-09-09  Michael Koch  <konqueror@gmx.de>\n \n \t* java/lang/System.java"}, {"sha": "bfe72dbcb11f28b9e4d00fd2585d25f47cc995da", "filename": "libjava/java/lang/Comparable.java", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166b03640d672a350817c10cd0e9691276d4956/libjava%2Fjava%2Flang%2FComparable.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166b03640d672a350817c10cd0e9691276d4956/libjava%2Fjava%2Flang%2FComparable.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FComparable.java?ref=4166b03640d672a350817c10cd0e9691276d4956", "patch": "@@ -52,18 +52,19 @@\n  *\n  * <p>Lists, arrays, and sets of objects that implement this interface can\n  * be sorted automatically, without the need for an explicit\n- * {@link Comparator}. Note that <code>e1.compareTo(null)</code> should\n- * throw an Exception; as should comparison between incompatible classes.\n+ * {@link java.util.Comparator}. Note that <code>e1.compareTo(null)</code> \n+ * should throw an Exception; as should comparison between incompatible \n+ * classes.\n  *\n  * @author Geoff Berry\n  * @author Warren Levy <warrenl@cygnus.com>\n- * @see Comparator\n- * @see Collections#sort(List)\n- * @see Arrays#sort(Object[])\n- * @see SortedSet\n- * @see SortedMap\n- * @see TreeSet\n- * @see TreeMap\n+ * @see java.util.Comparator\n+ * @see java.util.Collections#sort(java.util.List)\n+ * @see java.util.Arrays#sort(Object[])\n+ * @see java.util.SortedSet\n+ * @see java.util.SortedMap\n+ * @see java.util.TreeSet\n+ * @see java.util.TreeMap\n  * @since 1.2\n  * @status updated to 1.4\n  */"}, {"sha": "25629c85555169312c2ff74f18b8ff1011609305", "filename": "libjava/java/net/Inet4Address.java", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166b03640d672a350817c10cd0e9691276d4956/libjava%2Fjava%2Fnet%2FInet4Address.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166b03640d672a350817c10cd0e9691276d4956/libjava%2Fjava%2Fnet%2FInet4Address.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fnet%2FInet4Address.java?ref=4166b03640d672a350817c10cd0e9691276d4956", "patch": "@@ -55,6 +55,9 @@\n  */\n public final class Inet4Address extends InetAddress\n {\n+  /**\n+   * For compatability with Sun's JDK 1.4.2 rev. 5\n+   */\n   static final long serialVersionUID = 3286316764910316507L;\n \n   /**"}, {"sha": "a6db9cd8eac4531e506e6c6ad69e93d60681458d", "filename": "libjava/java/security/ProtectionDomain.java", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166b03640d672a350817c10cd0e9691276d4956/libjava%2Fjava%2Fsecurity%2FProtectionDomain.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166b03640d672a350817c10cd0e9691276d4956/libjava%2Fjava%2Fsecurity%2FProtectionDomain.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fsecurity%2FProtectionDomain.java?ref=4166b03640d672a350817c10cd0e9691276d4956", "patch": "@@ -1,5 +1,5 @@\n /* ProtectionDomain.java -- A security domain\n-   Copyright (C) 1998, 2003, Free Software Foundation, Inc.\n+   Copyright (C) 1998, 2003, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n "}, {"sha": "6f15dc04441fe86607594e4e5d97a8d531f70ef3", "filename": "libjava/java/text/Format.java", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166b03640d672a350817c10cd0e9691276d4956/libjava%2Fjava%2Ftext%2FFormat.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166b03640d672a350817c10cd0e9691276d4956/libjava%2Fjava%2Ftext%2FFormat.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Ftext%2FFormat.java?ref=4166b03640d672a350817c10cd0e9691276d4956", "patch": "@@ -60,6 +60,9 @@\n  */\n public abstract class Format implements Serializable, Cloneable\n {\n+  /**\n+   * For compatability with Sun's JDK 1.4.2 rev. 5\n+   */\n   static final long serialVersionUID = -299282585814624189L;\n \n   public static class Field extends AttributedCharacterIterator.Attribute"}, {"sha": "f2337aee6dcf4c720cda551d5458f385e21f2cfa", "filename": "libjava/java/util/Arrays.java", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166b03640d672a350817c10cd0e9691276d4956/libjava%2Fjava%2Futil%2FArrays.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166b03640d672a350817c10cd0e9691276d4956/libjava%2Fjava%2Futil%2FArrays.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FArrays.java?ref=4166b03640d672a350817c10cd0e9691276d4956", "patch": "@@ -1021,7 +1021,7 @@ private static void vecswap(int i, int j, int n, byte[] a)\n   /**\n    * Performs a recursive modified quicksort.\n    *\n-   * @param a the array to sort\n+   * @param array the array to sort\n    * @param from the start index (inclusive)\n    * @param count the number of elements to sort\n    */\n@@ -1185,7 +1185,7 @@ private static void vecswap(int i, int j, int n, char[] a)\n   /**\n    * Performs a recursive modified quicksort.\n    *\n-   * @param a the array to sort\n+   * @param array the array to sort\n    * @param from the start index (inclusive)\n    * @param count the number of elements to sort\n    */\n@@ -1349,7 +1349,7 @@ private static void vecswap(int i, int j, int n, short[] a)\n   /**\n    * Performs a recursive modified quicksort.\n    *\n-   * @param a the array to sort\n+   * @param array the array to sort\n    * @param from the start index (inclusive)\n    * @param count the number of elements to sort\n    */\n@@ -1525,7 +1525,7 @@ private static int compare(int a, int b)\n   /**\n    * Performs a recursive modified quicksort.\n    *\n-   * @param a the array to sort\n+   * @param array the array to sort\n    * @param from the start index (inclusive)\n    * @param count the number of elements to sort\n    */\n@@ -1701,7 +1701,7 @@ private static int compare(long a, long b)\n   /**\n    * Performs a recursive modified quicksort.\n    *\n-   * @param a the array to sort\n+   * @param array the array to sort\n    * @param from the start index (inclusive)\n    * @param count the number of elements to sort\n    */\n@@ -1867,7 +1867,7 @@ private static void vecswap(int i, int j, int n, float[] a)\n   /**\n    * Performs a recursive modified quicksort.\n    *\n-   * @param a the array to sort\n+   * @param array the array to sort\n    * @param from the start index (inclusive)\n    * @param count the number of elements to sort\n    */\n@@ -2037,7 +2037,7 @@ private static void vecswap(int i, int j, int n, double[] a)\n   /**\n    * Performs a recursive modified quicksort.\n    *\n-   * @param a the array to sort\n+   * @param array the array to sort\n    * @param from the start index (inclusive)\n    * @param count the number of elements to sort\n    */\n@@ -2418,6 +2418,7 @@ public int size()\n      * with the supplied element.\n      *\n      * @param index The index at which to place the new object.\n+     * @param element The new object.\n      * @return The object replaced by this operation.\n      */\n     public Object set(int index, Object element)\n@@ -2489,7 +2490,7 @@ public Object[] toArray()\n      * is shrunk or enlarged to the size of the\n      * internal array, and filled with its objects.\n      *\n-     * @param The array to fill with the objects in this list.\n+     * @param array The array to fill with the objects in this list.\n      * @return The array containing the objects in this list,\n      *         which may or may not be == to array.\n      */"}, {"sha": "761103495838fc18c0ca9257a0103e18e9fe2ef7", "filename": "libjava/java/util/PropertyPermissionCollection.java", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4166b03640d672a350817c10cd0e9691276d4956/libjava%2Fjava%2Futil%2FPropertyPermissionCollection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4166b03640d672a350817c10cd0e9691276d4956/libjava%2Fjava%2Futil%2FPropertyPermissionCollection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2FPropertyPermissionCollection.java?ref=4166b03640d672a350817c10cd0e9691276d4956", "patch": "@@ -1,5 +1,5 @@\n /* PropertyPermissionCollection.java -- a collection of PropertyPermissions\n-   Copyright (C) 2002 Free Software Foundation, Inc.\n+   Copyright (C) 2002, 2004  Free Software Foundation, Inc.\n \n This file is part of GNU Classpath.\n \n@@ -103,10 +103,12 @@ else if ((pp.actions | old.actions) != pp.actions)\n   /**\n    * Returns true if this collection implies the given permission. This even\n    * returns true for this case:\n-   * <p>\n-<pre>collection.add(new PropertyPermission(\"a.*\", \"read\"));\n-collection.add(new PropertyPermission(\"a.b.*\", \"write\"));\n-collection.implies(new PropertyPermission(\"a.b.c\", \"read,write\"));</pre>\n+   *\n+   * <pre>\n+   * collection.add(new PropertyPermission(\"a.*\", \"read\"));\n+   * collection.add(new PropertyPermission(\"a.b.*\", \"write\"));\n+   * collection.implies(new PropertyPermission(\"a.b.c\", \"read,write\"));\n+   * </pre>\n    *\n    * @param permission the permission to check\n    * @return true if it is implied by this"}]}