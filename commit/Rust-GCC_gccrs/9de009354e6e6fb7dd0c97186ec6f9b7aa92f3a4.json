{"sha": "9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWRlMDA5MzU0ZTZlNmZiN2RkMGM5NzE4NmVjNmY5YjdhYTkyZjNhNA==", "commit": {"author": {"name": "Tamar Christina", "email": "tamar.christina@arm.com", "date": "2017-07-28T16:47:08Z"}, "committer": {"name": "Tamar Christina", "email": "tnfchris@gcc.gnu.org", "date": "2017-07-28T16:47:08Z"}, "message": "2017-07-28  Tamar Christina  <tamar.christina@arm.com>\n\n\t* config/aarch64/aarch64.c\n\t(aarch64_internal_mov_immediate): Add new special pattern.\n\t* config/aarch64/aarch64.md (*movdi_aarch64):\n\tAdd reg/32bit const mov case.\n\ngcc/testsuite/\n2017-07-28  Tamar Christina  <tamar.christina@arm.com>\n\n\t* gcc.target/aarch64/int_mov_immediate_1.c: New.\n\nFrom-SVN: r250680", "tree": {"sha": "085865c92d2b909fcd888fcdd690699c8b510854", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/085865c92d2b909fcd888fcdd690699c8b510854"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4/comments", "author": {"login": "TamarChristinaArm", "id": 48126768, "node_id": "MDQ6VXNlcjQ4MTI2NzY4", "avatar_url": "https://avatars.githubusercontent.com/u/48126768?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TamarChristinaArm", "html_url": "https://github.com/TamarChristinaArm", "followers_url": "https://api.github.com/users/TamarChristinaArm/followers", "following_url": "https://api.github.com/users/TamarChristinaArm/following{/other_user}", "gists_url": "https://api.github.com/users/TamarChristinaArm/gists{/gist_id}", "starred_url": "https://api.github.com/users/TamarChristinaArm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TamarChristinaArm/subscriptions", "organizations_url": "https://api.github.com/users/TamarChristinaArm/orgs", "repos_url": "https://api.github.com/users/TamarChristinaArm/repos", "events_url": "https://api.github.com/users/TamarChristinaArm/events{/privacy}", "received_events_url": "https://api.github.com/users/TamarChristinaArm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8de33df2783088696d8c426a8467a8e1d70180a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8de33df2783088696d8c426a8467a8e1d70180a0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8de33df2783088696d8c426a8467a8e1d70180a0"}], "stats": {"total": 108, "additions": 102, "deletions": 6}, "files": [{"sha": "327e470d2856e452d84a5e6da88247e5820edbd6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4", "patch": "@@ -1,3 +1,10 @@\n+2017-07-28  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* config/aarch64/aarch64.c\n+\t(aarch64_internal_mov_immediate): Add new special pattern.\n+\t* config/aarch64/aarch64.md (*movdi_aarch64):\n+\tAdd reg/32bit const mov case.\n+\n 2017-07-28  Tamar Christina  <tamar.christina@arm.com>\n \t    Richard Sandiford <richard.sandiford@linaro.org>\n "}, {"sha": "055ebafb8305412e192c77e4177d08c914d5ccee", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4", "patch": "@@ -1832,6 +1832,31 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n       return 1;\n     }\n \n+  /* Check to see if the low 32 bits are either 0xffffXXXX or 0xXXXXffff\n+     (with XXXX non-zero). In that case check to see if the move can be done in\n+     a smaller mode.  */\n+  val2 = val & 0xffffffff;\n+  if (mode == DImode\n+      && aarch64_move_imm (val2, SImode)\n+      && (((val >> 32) & 0xffff) == 0 || (val >> 48) == 0))\n+    {\n+      if (generate)\n+\temit_insn (gen_rtx_SET (dest, GEN_INT (val2)));\n+\n+      /* Check if we have to emit a second instruction by checking to see\n+         if any of the upper 32 bits of the original DI mode value is set.  */\n+      if (val == val2)\n+\treturn 1;\n+\n+      i = (val >> 48) ? 48 : 32;\n+\n+      if (generate)\n+\t emit_insn (gen_insv_immdi (dest, GEN_INT (i),\n+\t\t\t\t    GEN_INT ((val >> i) & 0xffff)));\n+\n+      return 2;\n+    }\n+\n   if ((val >> 32) == 0 || mode == SImode)\n     {\n       if (generate)"}, {"sha": "fc799479c819aeb752afc6eb4ecc696f505a5b73", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4", "patch": "@@ -962,15 +962,16 @@\n )\n \n (define_insn_and_split \"*movdi_aarch64\"\n-  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,*w,m,  m,r,r,  *w,r,*w,w\")\n-\t(match_operand:DI 1 \"aarch64_mov_operand\"  \" r,r,k,N,n,m, m,rZ,*w,Usa,Ush,rZ,w,*w,Dd\"))]\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"=r,k,r,r,r,r,r,*w,m,  m,r,r,  *w,r,*w,w\")\n+\t(match_operand:DI 1 \"aarch64_mov_operand\"  \" r,r,k,N,M,n,m, m,rZ,*w,Usa,Ush,rZ,w,*w,Dd\"))]\n   \"(register_operand (operands[0], DImode)\n     || aarch64_reg_or_zero (operands[1], DImode))\"\n   \"@\n    mov\\\\t%x0, %x1\n    mov\\\\t%0, %x1\n    mov\\\\t%x0, %1\n    mov\\\\t%x0, %1\n+   mov\\\\t%w0, %1\n    #\n    ldr\\\\t%x0, %1\n    ldr\\\\t%d0, %1\n@@ -989,10 +990,10 @@\n        aarch64_expand_mov_immediate (operands[0], operands[1]);\n        DONE;\n     }\"\n-  [(set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mov_imm,mov_imm,load1,load1,store1,store1,\\\n-                     adr,adr,f_mcr,f_mrc,fmov,neon_move\")\n-   (set_attr \"fp\" \"*,*,*,*,*,*,yes,*,yes,*,*,yes,yes,yes,*\")\n-   (set_attr \"simd\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,yes\")]\n+  [(set_attr \"type\" \"mov_reg,mov_reg,mov_reg,mov_imm,mov_imm,mov_imm,load1,\\\n+                     load1,store1,store1,adr,adr,f_mcr,f_mrc,fmov,neon_move\")\n+   (set_attr \"fp\" \"*,*,*,*,*,*,*,yes,*,yes,*,*,yes,yes,yes,*\")\n+   (set_attr \"simd\" \"*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,yes\")]\n )\n \n (define_insn \"insv_imm<mode>\""}, {"sha": "d8d60abd53658ecac18ff8f594ca768abe3abdef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4", "patch": "@@ -1,3 +1,7 @@\n+2017-07-28  Tamar Christina  <tamar.christina@arm.com>\n+\n+\t* gcc.target/aarch64/int_mov_immediate_1.c: New.\n+\n 2017-07-28  Bin Cheng  <bin.cheng@arm.com>\n \n \t* gcc.dg/vect/pr80815-3.c: Require vect_perm."}, {"sha": "6ac9065037f881c96ca81661a7d717133c6cc83d", "filename": "gcc/testsuite/gcc.target/aarch64/int_mov_immediate_1.c", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fint_mov_immediate_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fint_mov_immediate_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fint_mov_immediate_1.c?ref=9de009354e6e6fb7dd0c97186ec6f9b7aa92f3a4", "patch": "@@ -0,0 +1,59 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target lp64 } */\n+/* { dg-options \"-O3\" } */\n+\n+long long f1(void)\n+{\n+  return 0xffff6666;\n+}\n+\n+int f3(void)\n+{\n+  return 0xffff6666;\n+}\n+\n+\n+long f2(void)\n+{\n+  return 0x11110000ffff6666;\n+}\n+\n+long f4(void)\n+{\n+  return 0x11110001ffff6666;\n+}\n+\n+long f5(void)\n+{\n+  return 0x111100001ff6666;\n+}\n+\n+long f6(void)\n+{\n+  return 0x00001111ffff6666;\n+}\n+\n+long f7(void)\n+{\n+  return 0x000011116666ffff;\n+}\n+\n+long f8(void)\n+{\n+  return 0x0f0011116666ffff;\n+}\n+\n+/* { dg-final { scan-assembler-times \"mov\\tw\\[0-9\\]+, -39322\"      1 } } */\n+/* { dg-final { scan-assembler-times \"mov\\tw\\[0-9\\]+, 4294927974\"  3 } } */\n+/* { dg-final { scan-assembler-times \"mov\\tw\\[0-9\\]+, 1718026239\"  1 } } */\n+/* { dg-final { scan-assembler-times \"mov\\tx\\[0-9\\]+, -2576941057\" 1 } } */\n+/* { dg-final { scan-assembler-times \"mov\\tx\\[0-9\\]+, -39322\"      1 } } */\n+/* { dg-final { scan-assembler-times \"mov\\tx\\[0-9\\]+, 26214\"       1 } } */\n+/* { dg-final { scan-assembler-times \"movk\\tx\\[0-9\\]+, 0xf00, lsl 48\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movk\\tx\\[0-9\\]+, 0x1111, lsl 48\" 2 } } */\n+/* { dg-final { scan-assembler-times \"movk\\tx\\[0-9\\]+, 0x1000, lsl 32\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movk\\tx\\[0-9\\]+, 0x1111, lsl 32\" 3 } } */\n+/* { dg-final { scan-assembler-times \"movk\\tx\\[0-9\\]+, 0x111, lsl 48\"  1 } } */\n+/* { dg-final { scan-assembler-times \"movk\\tx\\[0-9\\]+, 0x1ff, lsl 16\"  1 } } */\n+/* { dg-final { scan-assembler-times \"movk\\tx\\[0-9\\]+, 0x1, lsl 32\"    1 } } */\n+"}]}