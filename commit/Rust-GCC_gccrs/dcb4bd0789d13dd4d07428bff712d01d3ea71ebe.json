{"sha": "dcb4bd0789d13dd4d07428bff712d01d3ea71ebe", "node_id": "C_kwDOANBUbNoAKGRjYjRiZDA3ODlkMTNkZDRkMDc0MjhiZmY3MTJkMDFkM2VhNzFlYmU", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-03-31T20:18:58Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2022-05-02T19:52:23Z"}, "message": "c++: also note name used in enclosing class\n\nWhile looking at PR96645 I noticed that while we were diagnosing names\nchanging meaning in the full class context, we weren't doing this for\nlookups in nested class bodies.\n\nNote that this breaks current range-v3; I've submitted a pull request to fix\nits violation of the rule.\n\ngcc/cp/ChangeLog:\n\n\t* class.cc (maybe_note_name_used_in_class): Note in all enclosing\n\tclasses.  Remember location of use.\n\t(note_name_declared_in_class): Adjust.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/lookup/name-clash13.C: New test.\n\t* g++.dg/lookup/name-clash14.C: New test.\n\t* g++.dg/lookup/name-clash15.C: New test.\n\t* g++.dg/lookup/name-clash16.C: New test.", "tree": {"sha": "4a9e2c4fe3ce95215ddca92f77ec9122c97e46a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4a9e2c4fe3ce95215ddca92f77ec9122c97e46a6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e1f30d7edd433ca0fc28ae9ac1ce9b522790baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7e1f30d7edd433ca0fc28ae9ac1ce9b522790baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7e1f30d7edd433ca0fc28ae9ac1ce9b522790baf"}], "stats": {"total": 104, "additions": 86, "deletions": 18}, "files": [{"sha": "bc94ed45e17e26be1e24c7d511642129cc70fe87", "filename": "gcc/cp/class.cc", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe/gcc%2Fcp%2Fclass.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe/gcc%2Fcp%2Fclass.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.cc?ref=dcb4bd0789d13dd4d07428bff712d01d3ea71ebe", "patch": "@@ -8931,32 +8931,53 @@ is_really_empty_class (tree type, bool ignore_vptr)\n void\n maybe_note_name_used_in_class (tree name, tree decl)\n {\n-  splay_tree names_used;\n-\n   /* If we're not defining a class, there's nothing to do.  */\n   if (!(innermost_scope_kind() == sk_class\n \t&& TYPE_BEING_DEFINED (current_class_type)\n \t&& !LAMBDA_TYPE_P (current_class_type)))\n     return;\n \n-  /* If there's already a binding for this NAME, then we don't have\n-     anything to worry about.  */\n-  if (lookup_member (current_class_type, name,\n-\t\t     /*protect=*/0, /*want_type=*/false, tf_warning_or_error))\n-    return;\n+  const cp_binding_level *blev = nullptr;\n+  if (const cxx_binding *binding = IDENTIFIER_BINDING (name))\n+    blev = binding->scope;\n+  const cp_binding_level *lev = current_binding_level;\n \n-  if (!current_class_stack[current_class_depth - 1].names_used)\n-    current_class_stack[current_class_depth - 1].names_used\n-      = splay_tree_new (splay_tree_compare_pointers, 0, 0);\n-  names_used = current_class_stack[current_class_depth - 1].names_used;\n+  /* Record the binding in the names_used tables for classes inside blev.  */\n+  for (int i = current_class_depth; i > 0; --i)\n+    {\n+      tree type = (i == current_class_depth\n+\t\t   ? current_class_type\n+\t\t   : current_class_stack[i].type);\n \n-  splay_tree_insert (names_used,\n-\t\t     (splay_tree_key) name,\n-\t\t     (splay_tree_value) decl);\n+      for (; lev; lev = lev->level_chain)\n+\t{\n+\t  if (lev == blev)\n+\t    /* We found the declaration.  */\n+\t    return;\n+\t  if (lev->kind == sk_class && lev->this_entity == type)\n+\t    /* This class is inside the declaration scope.  */\n+\t    break;\n+\t}\n+\n+      auto &names_used = current_class_stack[i-1].names_used;\n+      if (!names_used)\n+\tnames_used = splay_tree_new (splay_tree_compare_pointers, 0, 0);\n+\n+      tree use = build1_loc (input_location, VIEW_CONVERT_EXPR,\n+\t\t\t     TREE_TYPE (decl), decl);\n+      EXPR_LOCATION_WRAPPER_P (use) = 1;\n+      splay_tree_insert (names_used,\n+\t\t\t (splay_tree_key) name,\n+\t\t\t (splay_tree_value) use);\n+    }\n }\n \n /* Note that NAME was declared (as DECL) in the current class.  Check\n-   to see that the declaration is valid.  */\n+   to see that the declaration is valid under [class.member.lookup]:\n+\n+   If [the result of a search in T for N at point P] differs from the result of\n+   a search in T for N from immediately after the class-specifier of T, the\n+   program is ill-formed, no diagnostic required.  */\n \n void\n note_name_declared_in_class (tree name, tree decl)\n@@ -8979,6 +9000,9 @@ note_name_declared_in_class (tree name, tree decl)\n   n = splay_tree_lookup (names_used, (splay_tree_key) name);\n   if (n)\n     {\n+      tree use = (tree) n->value;\n+      location_t loc = EXPR_LOCATION (use);\n+      tree olddecl = OVL_FIRST (TREE_OPERAND (use, 0));\n       /* [basic.scope.class]\n \n \t A name N used in a class S shall refer to the same declaration\n@@ -8987,9 +9011,10 @@ note_name_declared_in_class (tree name, tree decl)\n       if (permerror (location_of (decl),\n \t\t     \"declaration of %q#D changes meaning of %qD\",\n \t\t     decl, OVL_NAME (decl)))\n-\tinform (location_of ((tree) n->value),\n-\t\t\"%qD declared here as %q#D\",\n-\t\tOVL_NAME (decl), (tree) n->value);\n+\t{\n+\t  inform (loc, \"used here to mean %q#D\", olddecl);\n+\t  inform (location_of (olddecl), \"declared here\" );\n+\t}\n     }\n }\n "}, {"sha": "ce43435f0114f7dfb47942c6b8781986deec0d2c", "filename": "gcc/testsuite/g++.dg/lookup/name-clash13.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash13.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash13.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash13.C?ref=dcb4bd0789d13dd4d07428bff712d01d3ea71ebe", "patch": "@@ -0,0 +1,7 @@\n+typedef int T;\n+struct A {\n+  struct B {\n+    static T t;\n+  };\n+  typedef float T;\t\t// { dg-error \"changes meaning\" }\n+};"}, {"sha": "71305ba082c7c2a3b70f056a515345664d569bbd", "filename": "gcc/testsuite/g++.dg/lookup/name-clash14.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash14.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash14.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash14.C?ref=dcb4bd0789d13dd4d07428bff712d01d3ea71ebe", "patch": "@@ -0,0 +1,9 @@\n+const int x = 24;\n+struct A\n+{\n+  struct B\n+  {\n+    enum { E = x };\n+  };\n+  static const int x = 42;\t// { dg-error \"changes meaning\" }\n+};"}, {"sha": "5c123bf7005ecbfac9003c16941194014759ce37", "filename": "gcc/testsuite/g++.dg/lookup/name-clash15.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash15.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash15.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash15.C?ref=dcb4bd0789d13dd4d07428bff712d01d3ea71ebe", "patch": "@@ -0,0 +1,14 @@\n+struct C {\n+  static const int x = 24;\n+};\n+\n+struct A\n+{\n+  struct B: C\n+  {\n+    enum { E = x };\n+  };\n+\n+  // OK, earlier x was found in a base, lookup didn't pass through A.\n+  static const int x = 42;\n+};"}, {"sha": "250d6147c73c8698fbfd62a7634e2339f1bd3fe5", "filename": "gcc/testsuite/g++.dg/lookup/name-clash16.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash16.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcb4bd0789d13dd4d07428bff712d01d3ea71ebe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash16.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fname-clash16.C?ref=dcb4bd0789d13dd4d07428bff712d01d3ea71ebe", "patch": "@@ -0,0 +1,13 @@\n+typedef int T;\n+\n+struct A\n+{\n+  template <class T>\n+  struct B\n+  {\n+    T t;\n+  };\n+\n+  // OK, earlier T was found in template header, didn't look in A.\n+  typedef float T;\n+};"}]}