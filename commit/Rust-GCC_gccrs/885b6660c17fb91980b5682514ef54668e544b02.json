{"sha": "885b6660c17fb91980b5682514ef54668e544b02", "node_id": "C_kwDOANBUbNoAKDg4NWI2NjYwYzE3ZmI5MTk4MGI1NjgyNTE0ZWY1NDY2OGU1NDRiMDI", "commit": {"author": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2022-10-18T14:58:48Z"}, "committer": {"name": "Florian Weimer", "email": "fweimer@redhat.com", "date": "2022-10-18T14:58:48Z"}, "message": "libiberty: Fix C89-isms in configure tests\n\nlibiberty/\n\n\t* acinclude.m4 (ac_cv_func_strncmp_works): Add missing\n\tint return type and parameter list to the definition of main.\n\tInclude <stdlib.h> and <string.h> for prototypes.\n\t(ac_cv_c_stack_direction): Add missing\n\tint return type and parameter list to the definitions of\n\tmain, find_stack_direction.  Include <stdlib.h> for exit\n\tprototype.\n\t* configure: Regenerate.", "tree": {"sha": "086df9c132f59edc69de275163858969becac32b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/086df9c132f59edc69de275163858969becac32b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/885b6660c17fb91980b5682514ef54668e544b02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/885b6660c17fb91980b5682514ef54668e544b02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/885b6660c17fb91980b5682514ef54668e544b02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/885b6660c17fb91980b5682514ef54668e544b02/comments", "author": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fweimer-rh", "id": 75532728, "node_id": "MDQ6VXNlcjc1NTMyNzI4", "avatar_url": "https://avatars.githubusercontent.com/u/75532728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fweimer-rh", "html_url": "https://github.com/fweimer-rh", "followers_url": "https://api.github.com/users/fweimer-rh/followers", "following_url": "https://api.github.com/users/fweimer-rh/following{/other_user}", "gists_url": "https://api.github.com/users/fweimer-rh/gists{/gist_id}", "starred_url": "https://api.github.com/users/fweimer-rh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fweimer-rh/subscriptions", "organizations_url": "https://api.github.com/users/fweimer-rh/orgs", "repos_url": "https://api.github.com/users/fweimer-rh/repos", "events_url": "https://api.github.com/users/fweimer-rh/events{/privacy}", "received_events_url": "https://api.github.com/users/fweimer-rh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6be2672e4ee41c566a9e072088cccca263bab5f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6be2672e4ee41c566a9e072088cccca263bab5f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6be2672e4ee41c566a9e072088cccca263bab5f7"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "6bb690597bfb77c98a227350c7e7d2638e08e88b", "filename": "libiberty/acinclude.m4", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885b6660c17fb91980b5682514ef54668e544b02/libiberty%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885b6660c17fb91980b5682514ef54668e544b02/libiberty%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Facinclude.m4?ref=885b6660c17fb91980b5682514ef54668e544b02", "patch": "@@ -24,6 +24,8 @@ AC_CACHE_CHECK([for working strncmp], ac_cv_func_strncmp_works,\n [AC_TRY_RUN([\n /* Test by Jim Wilson and Kaveh Ghazi.\n    Check whether strncmp reads past the end of its string parameters. */\n+#include <stdlib.h>\n+#include <string.h>\n #include <sys/types.h>\n \n #ifdef HAVE_FCNTL_H\n@@ -51,7 +53,8 @@ AC_CACHE_CHECK([for working strncmp], ac_cv_func_strncmp_works,\n \n #define MAP_LEN 0x10000\n \n-main ()\n+int\n+main (void)\n {\n #if defined(HAVE_MMAP) || defined(HAVE_MMAP_ANYWHERE)\n   char *p;\n@@ -157,7 +160,10 @@ if test $ac_cv_os_cray = yes; then\n fi\n \n AC_CACHE_CHECK(stack direction for C alloca, ac_cv_c_stack_direction,\n-[AC_TRY_RUN([find_stack_direction ()\n+[AC_TRY_RUN([#include <stdlib.h>\n+\n+int\n+find_stack_direction (void)\n {\n   static char *addr = 0;\n   auto char dummy;\n@@ -169,7 +175,9 @@ AC_CACHE_CHECK(stack direction for C alloca, ac_cv_c_stack_direction,\n   else\n     return (&dummy > addr) ? 1 : -1;\n }\n-main ()\n+\n+int\n+main (void)\n {\n   exit (find_stack_direction() < 0);\n }],"}, {"sha": "860f981fa18354dfec7d23461079e9ebb8d388a4", "filename": "libiberty/configure", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/885b6660c17fb91980b5682514ef54668e544b02/libiberty%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/885b6660c17fb91980b5682514ef54668e544b02/libiberty%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fconfigure?ref=885b6660c17fb91980b5682514ef54668e544b02", "patch": "@@ -6784,7 +6784,10 @@ else\n else\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n-find_stack_direction ()\n+#include <stdlib.h>\n+\n+int\n+find_stack_direction (void)\n {\n   static char *addr = 0;\n   auto char dummy;\n@@ -6796,7 +6799,9 @@ find_stack_direction ()\n   else\n     return (&dummy > addr) ? 1 : -1;\n }\n-main ()\n+\n+int\n+main (void)\n {\n   exit (find_stack_direction() < 0);\n }\n@@ -7621,6 +7626,8 @@ else\n \n /* Test by Jim Wilson and Kaveh Ghazi.\n    Check whether strncmp reads past the end of its string parameters. */\n+#include <stdlib.h>\n+#include <string.h>\n #include <sys/types.h>\n \n #ifdef HAVE_FCNTL_H\n@@ -7648,7 +7655,8 @@ else\n \n #define MAP_LEN 0x10000\n \n-main ()\n+int\n+main (void)\n {\n #if defined(HAVE_MMAP) || defined(HAVE_MMAP_ANYWHERE)\n   char *p;"}]}