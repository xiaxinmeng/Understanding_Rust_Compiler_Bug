{"sha": "295c5559cc46c63913ceb6e1e091b5b85f63e3c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Mjk1YzU1NTljYzQ2YzYzOTEzY2ViNmUxZTA5MWI1Yjg1ZjYzZTNjMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jj@sunsite.ms.mff.cuni.cz", "date": "1998-10-04T04:05:38Z"}, "committer": {"name": "David S. Miller", "email": "davem@gcc.gnu.org", "date": "1998-10-04T04:05:38Z"}, "message": "sparc.md (ashldi3+1): Name it ashldi3_sp64.\n\n        * config/sparc/sparc.md (ashldi3+1): Name it ashldi3_sp64.\n\t(ashlsi3_const1, ashldi3_const1): New combiner patterns.\n\t(ashrsi3_extend, ashrsi3_extend2): New combiner patterns.\n\t(lshrsi3_extend, lshrsi3_extend2): Ditto.\n\nFrom-SVN: r22805", "tree": {"sha": "3fd4026a963e1ee3b10eb70a416727b3a07310ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fd4026a963e1ee3b10eb70a416727b3a07310ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/295c5559cc46c63913ceb6e1e091b5b85f63e3c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/295c5559cc46c63913ceb6e1e091b5b85f63e3c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/295c5559cc46c63913ceb6e1e091b5b85f63e3c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/295c5559cc46c63913ceb6e1e091b5b85f63e3c3/comments", "author": null, "committer": null, "parents": [{"sha": "ca2636edcddfab884d97f37bf0b09c3be362e689", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca2636edcddfab884d97f37bf0b09c3be362e689", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca2636edcddfab884d97f37bf0b09c3be362e689"}], "stats": {"total": 107, "additions": 106, "deletions": 1}, "files": [{"sha": "0d2aef8a3af4a72fdd7f73b3bfada4883f756a82", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/295c5559cc46c63913ceb6e1e091b5b85f63e3c3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/295c5559cc46c63913ceb6e1e091b5b85f63e3c3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=295c5559cc46c63913ceb6e1e091b5b85f63e3c3", "patch": "@@ -1,3 +1,10 @@\n+Sun Oct  4 02:58:20 1998  Jakub Jelinek  <jj@sunsite.ms.mff.cuni.cz>\n+\n+        * config/sparc/sparc.md (ashldi3+1): Name it ashldi3_sp64.\n+\t(ashlsi3_const1, ashldi3_const1): New combiner patterns.\n+\t(ashrsi3_extend, ashrsi3_extend2): New combiner patterns.\n+\t(lshrsi3_extend, lshrsi3_extend2): Ditto.\n+\n Sun Oct  4 00:23:00 1998  David S. Miller  <davem@pierdol.cobaltmicro.com>\n \n \t* function.c (purge_addressof_1): If trying to take a sub-word"}, {"sha": "e7538a1ae6546675d0e2b148379cce1c04864876", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 99, "deletions": 1, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/295c5559cc46c63913ceb6e1e091b5b85f63e3c3/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/295c5559cc46c63913ceb6e1e091b5b85f63e3c3/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=295c5559cc46c63913ceb6e1e091b5b85f63e3c3", "patch": "@@ -6904,6 +6904,17 @@\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"1\")])\n \n+;; We special case multiplication by two, as add can be done\n+;; in both ALUs, while shift only in IEU0 on UltraSPARC.\n+(define_insn \"*ashlsi3_const1\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+        (ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+                   (const_int 1)))]\n+  \"\"\n+  \"add\\\\t%1, %1, %0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"1\")])\n+\n (define_expand \"ashldi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n@@ -6920,7 +6931,18 @@\n     }\n }\")\n \n-(define_insn \"\"\n+;; We special case multiplication by two, as add can be done\n+;; in both ALUs, while shift only in IEU0 on UltraSPARC.\n+(define_insn \"*ashldi3_const1\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t   (const_int 1)))]\n+  \"TARGET_ARCH64\"\n+  \"add\\\\t%1, %1, %0\"\n+  [(set_attr \"type\" \"binary\")\n+   (set_attr \"length\" \"1\")])\n+\n+(define_insn \"*ashldi3_sp64\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n \t\t   (match_operand:SI 2 \"arith_operand\" \"rI\")))]\n@@ -7001,6 +7023,38 @@\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"1\")])\n \n+(define_insn \"*ashrsi3_extend\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(sign_extend:DI (ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t     (match_operand:SI 2 \"arith_operand\" \"r\"))))]\n+  \"TARGET_ARCH64\"\n+  \"sra\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"1\")])\n+\n+;; This handles the case as above, but with constant shift instead of\n+;; register. Combiner \"simplifies\" it for us a little bit though.\n+(define_insn \"*ashrsi3_extend2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(ashiftrt:DI (ashift:DI (subreg:DI (match_operand:SI 1 \"register_operand\" \"r\") 0)\n+\t\t\t\t(const_int 32))\n+\t\t     (match_operand:SI 2 \"small_int_or_double\" \"n\")))]\n+  \"TARGET_ARCH64\n+   && ((GET_CODE (operands[2]) == CONST_INT\n+        && INTVAL (operands[2]) >= 32 && INTVAL (operands[2]) < 64)\n+       || (GET_CODE (operands[2]) == CONST_DOUBLE\n+\t   && !CONST_DOUBLE_HIGH (operands[2])\n+           && CONST_DOUBLE_LOW (operands[2]) >= 32\n+           && CONST_DOUBLE_LOW (operands[2]) < 64))\"\n+  \"*\n+{\n+  operands[2] = GEN_INT (INTVAL (operands[2]) - 32);\n+\n+  return \\\"sra\\\\t%1, %2, %0\\\";\n+}\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"1\")])\n+\n (define_expand \"ashrdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(ashiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n@@ -7059,6 +7113,50 @@\n   [(set_attr \"type\" \"shift\")\n    (set_attr \"length\" \"1\")])\n \n+;; This handles the case where\n+;; (zero_extend:DI (lshiftrt:SI (match_operand:SI) (match_operand:SI))),\n+;; but combiner \"simplifies\" it for us.\n+(define_insn \"*lshrsi3_extend\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(and:DI (subreg:DI (lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t   (match_operand:SI 2 \"arith_operand\" \"r\")) 0)\n+\t\t(match_operand 3 \"\" \"\")))]\n+  \"TARGET_ARCH64\n+   && ((GET_CODE (operands[3]) == CONST_DOUBLE\n+           && CONST_DOUBLE_HIGH (operands[3]) == 0\n+           && CONST_DOUBLE_LOW (operands[3]) == 0xffffffff)\n+#if HOST_BITS_PER_WIDE_INT >= 64\n+          || (GET_CODE (operands[3]) == CONST_INT\n+              && (unsigned HOST_WIDE_INT) INTVAL (operands[3]) == 0xffffffff)\n+#endif\n+         )\"\n+  \"srl\\\\t%1, %2, %0\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"1\")])\n+\n+;; This handles the case where\n+;; (lshiftrt:DI (zero_extend:DI (match_operand:SI)) (const_int >=0 < 32))\n+;; but combiner \"simplifies\" it for us.\n+(define_insn \"*lshrsi3_extend2\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"\")\n+\t(zero_extract:DI (subreg:DI (match_operand:SI 1 \"register_operand\" \"r\") 0)\n+\t\t\t (match_operand 2 \"small_int_or_double\" \"n\")\n+\t\t\t (const_int 32)))]\n+  \"TARGET_ARCH64\n+   && ((GET_CODE (operands[2]) == CONST_INT\n+        && (unsigned HOST_WIDE_INT) INTVAL (operands[2]) < 32)\n+       || (GET_CODE (operands[2]) == CONST_DOUBLE\n+\t   && CONST_DOUBLE_HIGH (operands[2]) == 0\n+           && (unsigned HOST_WIDE_INT) CONST_DOUBLE_LOW (operands[2]) < 32))\"\n+  \"*\n+{\n+  operands[2] = GEN_INT (32 - INTVAL (operands[2]));\n+\n+  return \\\"srl\\\\t%1, %2, %0\\\";\n+}\"\n+  [(set_attr \"type\" \"shift\")\n+   (set_attr \"length\" \"1\")])\n+\n (define_expand \"lshrdi3\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")"}]}