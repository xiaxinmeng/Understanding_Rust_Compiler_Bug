{"sha": "b6b02c5528b662733f3555dec2a397b3269c22d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjZiMDJjNTUyOGI2NjI3MzNmMzU1NWRlYzJhMzk3YjMyNjljMjJkNg==", "commit": {"author": {"name": "Kai Tietz", "email": "kai.tietz@onevision.com", "date": "2008-07-06T14:49:32Z"}, "committer": {"name": "Kai Tietz", "email": "ktietz@gcc.gnu.org", "date": "2008-07-06T14:49:32Z"}, "message": "callabi.h: New.\n\n2008-07-06  Kai Tietz  <kai.tietz@onevision.com>\n\n\t* gcc.dg/callabi/callabi.h: New.\n\t* gcc.dg/callabi/vaarg-1.c: New.\n\t* gcc.dg/callabi/vaarg-2.c: New.\n\t* gcc.dg/callabi/vaarg-3.c: New.\n\t* gcc.dg/callabi/func-1.c: New.\n\nFrom-SVN: r137524", "tree": {"sha": "5dac5ee0ea03c30192820f3daa8f85da24272f8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5dac5ee0ea03c30192820f3daa8f85da24272f8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b6b02c5528b662733f3555dec2a397b3269c22d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b02c5528b662733f3555dec2a397b3269c22d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b6b02c5528b662733f3555dec2a397b3269c22d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b6b02c5528b662733f3555dec2a397b3269c22d6/comments", "author": null, "committer": null, "parents": [{"sha": "dcef3dac7f7d7d6fdcd21451f3c9a570aaa8a50d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcef3dac7f7d7d6fdcd21451f3c9a570aaa8a50d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcef3dac7f7d7d6fdcd21451f3c9a570aaa8a50d"}], "stats": {"total": 239, "additions": 239, "deletions": 0}, "files": [{"sha": "cf6ba6ba1cebb262ecef63174de290753cf7c7fa", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b02c5528b662733f3555dec2a397b3269c22d6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b02c5528b662733f3555dec2a397b3269c22d6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b6b02c5528b662733f3555dec2a397b3269c22d6", "patch": "@@ -1,3 +1,11 @@\n+2008-07-06  Kai Tietz  <kai.tietz@onevision.com>\n+\n+\t* gcc.dg/callabi/callabi.h: New.\n+\t* gcc.dg/callabi/vaarg-1.c: New.\n+\t* gcc.dg/callabi/vaarg-2.c: New.\n+\t* gcc.dg/callabi/vaarg-3.c: New.\n+\t* gcc.dg/callabi/func-1.c: New.\n+\n 2008-07-05  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n \n \t* g++.dg/tree-ssa/ptrmemfield.C: New testcase."}, {"sha": "d008ad659cbb50f0dca3be1fa6d92ce75a0ccd67", "filename": "gcc/testsuite/gcc.dg/callabi/callabi.h", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b02c5528b662733f3555dec2a397b3269c22d6/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fcallabi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b02c5528b662733f3555dec2a397b3269c22d6/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fcallabi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fcallabi.h?ref=b6b02c5528b662733f3555dec2a397b3269c22d6", "patch": "@@ -0,0 +1,50 @@\n+/* First the default target definition.  */\n+#ifndef __GNUC_VA_LIST\n+#define __GNUC_VA_LIST\n+  typedef __builtin_va_list __gnuc_va_list;\n+#endif\n+\n+#ifndef _VA_LIST_DEFINED\n+#define _VA_LIST_DEFINED\n+  typedef __gnuc_va_list va_list;\n+#endif\n+\n+#define __va_copy(d,s)\t__builtin_va_copy(d,s)\n+#define __va_start(v,l)\t__builtin_va_start(v,l)\n+#define __va_arg(v,l)\t__builtin_va_arg(v,l)\n+#define __va_end(v)\t__builtin_va_end(v)\n+\n+#define __ms_va_copy(d,s) __builtin_ms_va_copy(d,s)\n+#define __ms_va_start(v,l) __builtin_ms_va_start(v,l)\n+#define __ms_va_arg(v,l)\t__builtin_va_arg(v,l)\n+#define __ms_va_end(v) __builtin_ms_va_end(v)\n+\n+#define __sysv_va_copy(d,s) __builtin_sysv_va_copy(d,s)\n+#define __sysv_va_start(v,l) __builtin_sysv_va_start(v,l)\n+#define __sysv_va_arg(v,l)\t__builtin_va_arg(v,l)\n+#define __sysv_va_end(v) __builtin_sysv_va_end(v)\n+\n+#define CALLABI_NATIVE\n+\n+#ifdef _WIN64\n+#define CALLABI_CROSS __attribute__ ((sysv_abi))\n+\n+#define CROSS_VA_LIST\t__builtin_sysv_va_list\n+\n+#define CROSS_VA_COPY(d,s) __sysv_va_copy(d,s)\n+#define CROSS_VA_START(v,l) __sysv_va_start(v,l)\n+#define CROSS_VA_ARG(v,l) __sysv_va_arg(v,l)\n+#define CROSS_VA_END(v)  __sysv_va_end(v)\n+\n+#else\n+\n+#define CALLABI_CROSS __attribute__ ((ms_abi))\n+\n+#define CROSS_VA_LIST\t__builtin_ms_va_list\n+\n+#define CROSS_VA_COPY(d,s) __ms_va_copy(d,s)\n+#define CROSS_VA_START(v,l) __ms_va_start(v,l)\n+#define CROSS_VA_ARG(v,l) __ms_va_arg(v,l)\n+#define CROSS_VA_END(v)  __ms_va_end(v)\n+\n+#endif\n\\ No newline at end of file"}, {"sha": "c727dbe6e53a576fd82c8d4616c04abf83ac1a84", "filename": "gcc/testsuite/gcc.dg/callabi/func-1.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b02c5528b662733f3555dec2a397b3269c22d6/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Ffunc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b02c5528b662733f3555dec2a397b3269c22d6/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Ffunc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Ffunc-1.c?ref=b6b02c5528b662733f3555dec2a397b3269c22d6", "patch": "@@ -0,0 +1,40 @@\n+/* Test for cross x86_64<->w64 abi standard calls.\n+*/\n+/* Origin: Kai Tietz <kai.tietz@onevision.com> */\n+/* { dg-do run { target { x86_64-*-* } } } */\n+/* { dg-options \"-std=gnu99 -ffast-math\" } */\n+#include \"callabi.h\"\n+\n+extern void abort (void);\n+\n+long double\n+CALLABI_CROSS func_cross (long double a, double b, float c, long d, int e,\n+\t\t\t  char f)\n+{\n+  long double ret;\n+  ret = a + (long double) b + (long double) c;\n+  ret *= (long double) (d + (long) e);\n+  if (f>0)\n+    ret += func_cross (a,b,c,d,e,-f);\n+  return ret;\n+}\n+\n+long double\n+CALLABI_NATIVE func_native (long double a, double b, float c, long d, int e,\n+\t\t\t    char f)\n+{\n+  long double ret;\n+  ret = a + (long double) b + (long double) c;\n+  ret *= (long double) (d + (long) e);\n+  if (f>0)\n+    ret += func_native (a,b,c,d,e,-f);\n+  return ret;\n+}\n+\n+int main ()\n+{\n+  if (func_cross (1.0,2.0,3.0,1,2,3)\n+      != func_native (1.0,2.0,3.0,1,2,3))\n+    abort ();\n+  return 0;\n+}\n\\ No newline at end of file"}, {"sha": "1e745e560856408dbf9c19ddcbe451a72b0afc9b", "filename": "gcc/testsuite/gcc.dg/callabi/vaarg-1.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b02c5528b662733f3555dec2a397b3269c22d6/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b02c5528b662733f3555dec2a397b3269c22d6/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-1.c?ref=b6b02c5528b662733f3555dec2a397b3269c22d6", "patch": "@@ -0,0 +1,47 @@\n+/* Test for cross x86_64<->w64 abi va_list calls.\n+*/\n+/* Origin: Kai Tietz <kai.tietz@onevision.com> */\n+/* { dg-do run { target { x86_64-*-* } } } */\n+/* { dg-options \"-std=gnu99\" } */\n+#include \"callabi.h\"\n+\n+extern __SIZE_TYPE__ strlen (const char *);\n+extern int sprintf (char *,const char *, ...);\n+extern void abort (void);\n+\n+static\n+void CALLABI_CROSS vdo_cpy (char *s, CROSS_VA_LIST argp)\n+{\n+  __SIZE_TYPE__ len;\n+  char *r = s;\n+  char *e;\n+  *r = 0;\n+  for (;;) {\n+    e = CROSS_VA_ARG (argp,char *);\n+    if (*e == 0) break;\n+    sprintf (r,\"%s\", e);\n+    r += strlen (r);\n+  }\n+}\n+\n+static\n+void CALLABI_CROSS do_cpy (char *s, ...)\n+{\n+  CROSS_VA_LIST argp;\n+  CROSS_VA_START (argp, s);\n+  vdo_cpy (s, argp);\n+  CROSS_VA_END (argp);\n+}\n+\n+int main ()\n+{\n+  char s[256];\n+\n+  do_cpy (s, \"1\",\"2\",\"3\",\"4\", \"5\", \"6\", \"7\", \"\");\n+\n+  if (s[0] != '1' || s[1] !='2' || s[2] != '3' || s[3] != '4'\n+      || s[4] != '5' || s[5] != '6' || s[6] != '7' || s[7] != 0)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "c9b716194a6c7ed5ba8f8f21ec1256fa4bad8d26", "filename": "gcc/testsuite/gcc.dg/callabi/vaarg-2.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b02c5528b662733f3555dec2a397b3269c22d6/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b02c5528b662733f3555dec2a397b3269c22d6/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-2.c?ref=b6b02c5528b662733f3555dec2a397b3269c22d6", "patch": "@@ -0,0 +1,47 @@\n+/* Test for cross x86_64<->w64 abi va_list calls.\n+*/\n+/* Origin: Kai Tietz <kai.tietz@onevision.com> */\n+/* { dg-do run { target { x86_64-*-* } } } */\n+/* { dg-options \"-std=gnu99\" } */\n+#include \"callabi.h\"\n+\n+extern void abort (void);\n+\n+#define SZ_ARGS\t1ll,2ll,3ll,4ll,5ll,6ll,7ll,0ll\n+\n+static\n+int CALLABI_CROSS fct1 (va_list argp, ...)\n+{\n+  long long p1,p2;\n+  int ret = 1;\n+  CROSS_VA_LIST argp_2;\n+  CROSS_VA_START (argp_2,argp);\n+\n+  do {\n+    p1 = CROSS_VA_ARG (argp_2, long long);\n+    p2 = __va_arg (argp, long long);\n+    if (p1 != p2)\n+      ret = 0;\n+  } while (ret && p1 != 0);\n+  CROSS_VA_END (argp_2);\n+  return ret;\n+}\n+\n+static\n+int fct2 (int dummy, ...)\n+{\n+  va_list argp;\n+  int ret = dummy;\n+\n+  __va_start (argp, dummy);\n+  ret += fct1 (argp, SZ_ARGS);\n+  __va_end (argp);\n+  return ret;\n+}\n+\n+int main()\n+{\n+  if (fct2 (-1, SZ_ARGS) != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "d0d068754e1e0b5b3a9a941ac467004ee2ca2aa8", "filename": "gcc/testsuite/gcc.dg/callabi/vaarg-3.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b6b02c5528b662733f3555dec2a397b3269c22d6/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b6b02c5528b662733f3555dec2a397b3269c22d6/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcallabi%2Fvaarg-3.c?ref=b6b02c5528b662733f3555dec2a397b3269c22d6", "patch": "@@ -0,0 +1,47 @@\n+/* Test for cross x86_64<->w64 abi va_list calls.\n+*/\n+/* Origin: Kai Tietz <kai.tietz@onevision.com> */\n+/* { dg-do run { target { x86_64-*-* } } } */\n+/* { dg-options \"-std=gnu99\" } */\n+#include \"callabi.h\"\n+\n+extern void abort (void);\n+\n+#define SZ_ARGS\t1ll,2ll,3ll,4ll,5ll,6ll,7ll,0ll\n+\n+static\n+int fct1 (CROSS_VA_LIST argp, ...)\n+{\n+  long long p1,p2;\n+  int ret = 1;\n+  va_list argp_2;\n+\n+    __va_start (argp_2,argp);\n+  do {\n+    p1 = __va_arg (argp_2, long long);\n+    p2 = CROSS_VA_ARG (argp, long long);\n+    if (p1 != p2)\n+      ret = 0;\n+  } while (ret && p1 != 0);\n+  __va_end (argp_2);\n+  return ret;\n+}\n+\n+static\n+int CALLABI_CROSS fct2 (int dummy, ...)\n+{\n+  CROSS_VA_LIST argp;\n+  int ret = dummy;\n+\n+  CROSS_VA_START (argp, dummy);\n+  ret += fct1 (argp, SZ_ARGS);\n+  CROSS_VA_END (argp);\n+  return ret;\n+}\n+\n+int main()\n+{\n+  if (fct2 (-1, SZ_ARGS) != 0)\n+    abort ();\n+  return 0;\n+}"}]}