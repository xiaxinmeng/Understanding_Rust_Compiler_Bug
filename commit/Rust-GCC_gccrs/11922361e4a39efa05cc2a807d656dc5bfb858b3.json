{"sha": "11922361e4a39efa05cc2a807d656dc5bfb858b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE5MjIzNjFlNGEzOWVmYTA1Y2MyYTgwN2Q2NTZkYzViZmI4NThiMw==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2005-11-17T20:25:57Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2005-11-17T20:25:57Z"}, "message": "Implement -Xss.\n\n        * include/jvm.h (gcj::stack_size): Declare.\n        (_Jv_StackSize): Declare.\n        * posix-threads.cc (_Jv_InitThreads): Validate gcj::stack_size.\n        (_Jv_ThreadStart): Set stack size if specified.\n        * prims.cc (gcj::stack_size): Define.\n        (parse_memory_size): Renamed from parse_heap_size.\n        (_Jv_SetStackSize): Parse stack size argument and set\n        gcj::stack_size.\n\nFrom-SVN: r107132", "tree": {"sha": "5e88137f0a78a8faff6c52f9de564f61a19bcecd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e88137f0a78a8faff6c52f9de564f61a19bcecd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/11922361e4a39efa05cc2a807d656dc5bfb858b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11922361e4a39efa05cc2a807d656dc5bfb858b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11922361e4a39efa05cc2a807d656dc5bfb858b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11922361e4a39efa05cc2a807d656dc5bfb858b3/comments", "author": null, "committer": null, "parents": [{"sha": "f9314d012c1b213b95ee71a99b9edbe9be0e9118", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f9314d012c1b213b95ee71a99b9edbe9be0e9118", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f9314d012c1b213b95ee71a99b9edbe9be0e9118"}], "stats": {"total": 58, "additions": 53, "deletions": 5}, "files": [{"sha": "31962c62a2bf3ed59905c5d3165437b1a4be64ec", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11922361e4a39efa05cc2a807d656dc5bfb858b3/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11922361e4a39efa05cc2a807d656dc5bfb858b3/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=11922361e4a39efa05cc2a807d656dc5bfb858b3", "patch": "@@ -1,3 +1,15 @@\n+2005-11-17  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\tImplement -Xss.\n+\t* include/jvm.h (gcj::stack_size): Declare.\n+\t(_Jv_StackSize): Declare.\n+\t* posix-threads.cc (_Jv_InitThreads): Validate gcj::stack_size.\n+\t(_Jv_ThreadStart): Set stack size if specified.\n+\t* prims.cc (gcj::stack_size): Define.\n+\t(parse_memory_size): Renamed from parse_heap_size.\n+\t(_Jv_SetStackSize): Parse stack size argument and set \n+\tgcj::stack_size.\n+\n 2005-11-17  Mark Wielaard  <mark@klomp.org>\n \n \t* java/text/SimpleDateFormat.java: Removed, fully merged now."}, {"sha": "fc104d695f81b2043a03498f75b0010b8f011c06", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11922361e4a39efa05cc2a807d656dc5bfb858b3/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11922361e4a39efa05cc2a807d656dc5bfb858b3/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=11922361e4a39efa05cc2a807d656dc5bfb858b3", "patch": "@@ -233,6 +233,9 @@ namespace gcj\n   \n   /* When true, enable the bytecode verifier and BC-ABI verification. */\n   extern bool verifyClasses;\n+\n+  /* Thread stack size specified by the -Xss runtime argument. */\n+  extern size_t stack_size;\n }\n \n // This class handles all aspects of class preparation and linking.\n@@ -363,6 +366,10 @@ void _Jv_SetMaximumHeapSize (const char *arg);\n    during thread deregistration.  */\n void _Jv_FreeMethodCache ();\n \n+/* Set the stack size for threads.  Parses ARG, a number which can \n+   optionally have \"k\" or \"m\" appended.  */\n+void _Jv_SetStackSize (const char *arg);\n+\n extern \"C\" void JvRunMain (jclass klass, int argc, const char **argv);\n void _Jv_RunMain (jclass klass, const char *name, int argc, const char **argv, \n \t\t  bool is_jar);"}, {"sha": "a596c77e131c1778bb578c94891a7051803d99b7", "filename": "libjava/posix-threads.cc", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11922361e4a39efa05cc2a807d656dc5bfb858b3/libjava%2Fposix-threads.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11922361e4a39efa05cc2a807d656dc5bfb858b3/libjava%2Fposix-threads.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fposix-threads.cc?ref=11922361e4a39efa05cc2a807d656dc5bfb858b3", "patch": "@@ -311,6 +311,19 @@ _Jv_InitThreads (void)\n   // Block SIGCHLD here to ensure that any non-Java threads inherit the new \n   // signal mask.\n   block_sigchld();\n+\n+  // Check/set the thread stack size.\n+  size_t min_ss = 32 * 1024;\n+  \n+  if (sizeof (void *) == 8)\n+    // Bigger default on 64-bit systems.\n+    min_ss *= 2;\n+\n+  if (min_ss < PTHREAD_STACK_MIN)\n+    min_ss = PTHREAD_STACK_MIN;\n+  \n+  if (gcj::stack_size > 0 && gcj::stack_size < min_ss)\n+    gcj::stack_size = min_ss;\n }\n \n _Jv_Thread_t *\n@@ -430,6 +443,14 @@ _Jv_ThreadStart (java::lang::Thread *thread, _Jv_Thread_t *data,\n   pthread_attr_init (&attr);\n   pthread_attr_setschedparam (&attr, &param);\n   pthread_attr_setdetachstate (&attr, PTHREAD_CREATE_DETACHED);\n+  \n+  // Set stack size if -Xss option was given.\n+  if (gcj::stack_size > 0)\n+    {\n+      int e = pthread_attr_setstacksize (&attr, gcj::stack_size);\n+      if (e != 0)\n+\tJvFail (strerror (e));\n+    }\n \n   info = (struct starter *) _Jv_AllocBytes (sizeof (struct starter));\n   info->method = meth;"}, {"sha": "490d2b1c127b7a39ebe4faf0607f06cd2396f838", "filename": "libjava/prims.cc", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/11922361e4a39efa05cc2a807d656dc5bfb858b3/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/11922361e4a39efa05cc2a807d656dc5bfb858b3/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=11922361e4a39efa05cc2a807d656dc5bfb858b3", "patch": "@@ -959,6 +959,9 @@ namespace gcj\n   \n   // When true, enable the bytecode verifier and BC-ABI type verification. \n   bool verifyClasses = true;\n+\n+  // Thread stack size specified by the -Xss runtime argument.\n+  size_t stack_size = 0;\n }\n \n // We accept all non-standard options accepted by Sun's java command,\n@@ -1045,7 +1048,7 @@ parse_x_arg (char* option_string)\n     }\n   else if (! strncmp (option_string, \"ss\", 2))\n     {\n-      // FIXME: set thread stack size\n+      _Jv_SetStackSize (option_string + 2);\n     }\n   else if (! strcmp (option_string, \"X:+UseAltSigs\"))\n     {\n@@ -1407,7 +1410,7 @@ JvRunMain (jclass klass, int argc, const char **argv)\n \n // Parse a string and return a heap size.\n static size_t\n-parse_heap_size (const char *spec)\n+parse_memory_size (const char *spec)\n {\n   char *end;\n   unsigned long val = strtoul (spec, &end, 10);\n@@ -1423,7 +1426,7 @@ parse_heap_size (const char *spec)\n void\n _Jv_SetInitialHeapSize (const char *arg)\n {\n-  size_t size = parse_heap_size (arg);\n+  size_t size = parse_memory_size (arg);\n   _Jv_GCSetInitialHeapSize (size);\n }\n \n@@ -1432,11 +1435,16 @@ _Jv_SetInitialHeapSize (const char *arg)\n void\n _Jv_SetMaximumHeapSize (const char *arg)\n {\n-  size_t size = parse_heap_size (arg);\n+  size_t size = parse_memory_size (arg);\n   _Jv_GCSetMaximumHeapSize (size);\n }\n \n-\f\n+void\n+_Jv_SetStackSize (const char *arg)\n+{\n+  size_t size = parse_memory_size (arg);\n+  gcj::stack_size = size;\n+}\n \n void *\n _Jv_Malloc (jsize size)"}]}