{"sha": "efd65a8b463eb9d7ef294cb005d603cac6f12f6d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZkNjVhOGI0NjNlYjlkN2VmMjk0Y2IwMDVkNjAzY2FjNmYxMmY2ZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-20T05:06:12Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-05-20T05:06:12Z"}, "message": "(expand_call): Declare and set current_call_is_indirect.\n\n(emit_library_call, emit_library_call_value): Likewise.\n\nFrom-SVN: r4515", "tree": {"sha": "eba855a75d58faae5e3831d0b5b480125dc0c655", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eba855a75d58faae5e3831d0b5b480125dc0c655"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efd65a8b463eb9d7ef294cb005d603cac6f12f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd65a8b463eb9d7ef294cb005d603cac6f12f6d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efd65a8b463eb9d7ef294cb005d603cac6f12f6d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efd65a8b463eb9d7ef294cb005d603cac6f12f6d/comments", "author": null, "committer": null, "parents": [{"sha": "6ad216adda81c7bab0d9f4cd4887178f892ef8a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad216adda81c7bab0d9f4cd4887178f892ef8a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad216adda81c7bab0d9f4cd4887178f892ef8a1"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "4e0e4e2b9dc78cca53365f8846827d94d931e33f", "filename": "gcc/calls.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efd65a8b463eb9d7ef294cb005d603cac6f12f6d/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efd65a8b463eb9d7ef294cb005d603cac6f12f6d/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=efd65a8b463eb9d7ef294cb005d603cac6f12f6d", "patch": "@@ -473,6 +473,8 @@ expand_call (exp, target, ignore)\n   CUMULATIVE_ARGS args_so_far;\n   /* Nonzero if a reg parm has been scanned.  */\n   int reg_parm_seen;\n+  /* Nonzero if this is an indirect function call.  */\n+  int current_call_is_indirect = 0;\n \n   /* Nonzero if we must avoid push-insns in the args for this call. \n      If stack space is allocated for register parameters, but not by the\n@@ -732,6 +734,15 @@ expand_call (exp, target, ignore)\n   if (fndecl && DECL_NAME (fndecl))\n     name = IDENTIFIER_POINTER (DECL_NAME (fndecl));\n \n+  /* On some machines (such as the PA) indirect calls have a different\n+     calling convention than normal calls.  FUNCTION_ARG in the target\n+     description can look at current_call_is_indirect to determine which\n+     calling convention to use.  */\n+  current_call_is_indirect = (fndecl == 0);\n+#if 0\n+    = TREE_CODE (TREE_OPERAND (exp, 0)) == NON_LVALUE_EXPR ? 1 : 0;\n+#endif\n+\n #if 0\n   /* Unless it's a call to a specific function that isn't alloca,\n      if it has one argument, we must assume it might be alloca.  */\n@@ -2007,6 +2018,8 @@ emit_library_call (va_alist)\n   int old_inhibit_defer_pop = inhibit_defer_pop;\n   int no_queue = 0;\n   rtx use_insns;\n+  /* library calls are never indirect calls.  */\n+  int current_call_is_indirect = 0;\n \n   va_start (p);\n   orgfun = fun = va_arg (p, rtx);\n@@ -2261,6 +2274,8 @@ emit_library_call_value (va_alist)\n   rtx use_insns;\n   rtx value;\n   rtx mem_value = 0;\n+  /* library calls are never indirect calls.  */\n+  int current_call_is_indirect = 0;\n \n   va_start (p);\n   orgfun = fun = va_arg (p, rtx);"}]}