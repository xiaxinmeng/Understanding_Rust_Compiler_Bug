{"sha": "7f7379f6f4f28376ac4fa9a807217f1fec2488fc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y3Mzc5ZjZmNGYyODM3NmFjNGZhOWE4MDcyMTdmMWZlYzI0ODhmYw==", "commit": {"author": {"name": "Kugan Vivekanandarajah", "email": "kuganv@linaro.org", "date": "2015-07-12T11:16:30Z"}, "committer": {"name": "Kugan Vivekanandarajah", "email": "kugan@gcc.gnu.org", "date": "2015-07-12T11:16:30Z"}, "message": "cse.c (cse_insn): Calculate src_eqv for ZERO_EXTRACT.\n\ngcc/ChangeLog:\n\n2015-07-12  Kugan Vivekanandarajah  <kuganv@linaro.org>\n\n\t* cse.c (cse_insn): Calculate src_eqv for ZERO_EXTRACT.\n\t* emit-rtl.c (set_for_reg_notes): Allow ZERO_EXTRACT to set\n\tREG_EQUAL note.\n\nFrom-SVN: r225721", "tree": {"sha": "6635ab0b12302db27b1fd7effdbb88af0fd00813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6635ab0b12302db27b1fd7effdbb88af0fd00813"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f7379f6f4f28376ac4fa9a807217f1fec2488fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7379f6f4f28376ac4fa9a807217f1fec2488fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f7379f6f4f28376ac4fa9a807217f1fec2488fc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f7379f6f4f28376ac4fa9a807217f1fec2488fc/comments", "author": null, "committer": null, "parents": [{"sha": "01169386a0f51405866e190bc836d6a1883a684f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/01169386a0f51405866e190bc836d6a1883a684f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/01169386a0f51405866e190bc836d6a1883a684f"}], "stats": {"total": 58, "additions": 50, "deletions": 8}, "files": [{"sha": "c435e30997d74715d1fc7cdb67582c2608bceb42", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7379f6f4f28376ac4fa9a807217f1fec2488fc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7379f6f4f28376ac4fa9a807217f1fec2488fc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f7379f6f4f28376ac4fa9a807217f1fec2488fc", "patch": "@@ -1,3 +1,9 @@\n+2015-07-12  Kugan Vivekanandarajah  <kuganv@linaro.org>\n+\n+\t* cse.c (cse_insn): Calculate src_eqv for ZERO_EXTRACT.\n+\t* emit-rtl.c (set_for_reg_notes): Allow ZERO_EXTRACT to set\n+\tREG_EQUAL note.\n+\n 2015-07-11  Marek Polacek  <polacek@redhat.com>\n \n \tPR middle-end/66353"}, {"sha": "b06c6693d02d98cce8ef27f35630d982eb09a9d8", "filename": "gcc/cse.c", "status": "modified", "additions": 42, "deletions": 7, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7379f6f4f28376ac4fa9a807217f1fec2488fc/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7379f6f4f28376ac4fa9a807217f1fec2488fc/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=7f7379f6f4f28376ac4fa9a807217f1fec2488fc", "patch": "@@ -4524,14 +4524,49 @@ cse_insn (rtx_insn *insn)\n   canonicalize_insn (insn, &sets, n_sets);\n \n   /* If this insn has a REG_EQUAL note, store the equivalent value in SRC_EQV,\n-     if different, or if the DEST is a STRICT_LOW_PART.  The latter condition\n-     is necessary because SRC_EQV is handled specially for this case, and if\n-     it isn't set, then there will be no equivalence for the destination.  */\n+     if different, or if the DEST is a STRICT_LOW_PART/ZERO_EXTRACT.  The\n+     latter condition is necessary because SRC_EQV is handled specially for\n+     this case, and if it isn't set, then there will be no equivalence\n+     for the destination.  */\n   if (n_sets == 1 && REG_NOTES (insn) != 0\n-      && (tem = find_reg_note (insn, REG_EQUAL, NULL_RTX)) != 0\n-      && (! rtx_equal_p (XEXP (tem, 0), SET_SRC (sets[0].rtl))\n-\t  || GET_CODE (SET_DEST (sets[0].rtl)) == STRICT_LOW_PART))\n-    src_eqv = copy_rtx (XEXP (tem, 0));\n+      && (tem = find_reg_note (insn, REG_EQUAL, NULL_RTX)) != 0)\n+    {\n+      if ((! rtx_equal_p (XEXP (tem, 0), SET_SRC (sets[0].rtl)))\n+\t  || GET_CODE (SET_DEST (sets[0].rtl)) == STRICT_LOW_PART)\n+\tsrc_eqv = copy_rtx (XEXP (tem, 0));\n+\n+      /* If DEST is of the form ZERO_EXTACT, as in:\n+\t (set (zero_extract:SI (reg:SI 119)\n+\t\t  (const_int 16 [0x10])\n+\t\t  (const_int 16 [0x10]))\n+\t      (const_int 51154 [0xc7d2]))\n+\t REG_EQUAL note will specify the value of register (reg:SI 119) at this\n+\t point.  Note that this is different from SRC_EQV. We can however\n+\t calculate SRC_EQV with the position and width of ZERO_EXTRACT.  */\n+      else if (GET_CODE (SET_DEST (sets[0].rtl)) == ZERO_EXTRACT\n+\t       && CONST_INT_P (src_eqv)\n+\t       && CONST_INT_P (XEXP (SET_DEST (sets[0].rtl), 1))\n+\t       && CONST_INT_P (XEXP (SET_DEST (sets[0].rtl), 2)))\n+\t{\n+\t  rtx dest_reg = XEXP (SET_DEST (sets[0].rtl), 0);\n+\t  rtx width = XEXP (SET_DEST (sets[0].rtl), 1);\n+\t  rtx pos = XEXP (SET_DEST (sets[0].rtl), 2);\n+\t  HOST_WIDE_INT val = INTVAL (src_eqv);\n+\t  HOST_WIDE_INT mask;\n+\t  unsigned int shift;\n+\t  if (BITS_BIG_ENDIAN)\n+\t    shift = GET_MODE_PRECISION (GET_MODE (dest_reg))\n+\t      - INTVAL (pos) - INTVAL (width);\n+\t  else\n+\t    shift = INTVAL (pos);\n+\t  if (INTVAL (width) == HOST_BITS_PER_WIDE_INT)\n+\t    mask = ~(HOST_WIDE_INT) 0;\n+\t  else\n+\t    mask = ((HOST_WIDE_INT) 1 << INTVAL (width)) - 1;\n+\t  val = (val >> shift) & mask;\n+\t  src_eqv = GEN_INT (val);\n+\t}\n+    }\n \n   /* Set sets[i].src_elt to the class each source belongs to.\n      Detect assignments from or to volatile things"}, {"sha": "ed2b30b17ee1f279c9de30034ef46dd13cd88262", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f7379f6f4f28376ac4fa9a807217f1fec2488fc/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f7379f6f4f28376ac4fa9a807217f1fec2488fc/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=7f7379f6f4f28376ac4fa9a807217f1fec2488fc", "patch": "@@ -5221,7 +5221,8 @@ set_for_reg_notes (rtx insn)\n   reg = SET_DEST (pat);\n \n   /* Notes apply to the contents of a STRICT_LOW_PART.  */\n-  if (GET_CODE (reg) == STRICT_LOW_PART)\n+  if (GET_CODE (reg) == STRICT_LOW_PART\n+      || GET_CODE (reg) == ZERO_EXTRACT)\n     reg = XEXP (reg, 0);\n \n   /* Check that we have a register.  */"}]}