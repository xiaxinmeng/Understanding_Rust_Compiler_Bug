{"sha": "0f237df286ecaf366e19601917bedaf6224929d0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYyMzdkZjI4NmVjYWYzNjZlMTk2MDE5MTdiZWRhZjYyMjQ5MjlkMA==", "commit": {"author": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-04T21:26:58Z"}, "committer": {"name": "Tom Tromey", "email": "tom@tromey.com", "date": "2021-05-05T06:06:17Z"}, "message": "libcc1: add more uses of 'deleter'\n\nThis changes libcc1 to use the 'deleter' template in a few more\nplaces.  The template and basic specializations are moved to a new\nheader, then some unmarshall functions are changed to use this code.\nThis change avoids the need to repeat cleanup code in the\nunmarshallers.\n\nlibcc1\n\n\t* rpc.hh (deleter): Move template and some specializations to\n\tdeleter.hh.\n\t(argument_wrapper<const T *>): Use cc1_plugin::unique_ptr.\n\t* marshall.cc (cc1_plugin::unmarshall): Use\n\tcc1_plugin::unique_ptr.\n\t* marshall-cp.hh (deleter): New specializations.\n\t(unmarshall): Use cc1_plugin::unique_ptr.\n\t* deleter.hh: New file.", "tree": {"sha": "181d82fe9796bb364de8241a78e5a82c3782c260", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/181d82fe9796bb364de8241a78e5a82c3782c260"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f237df286ecaf366e19601917bedaf6224929d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f237df286ecaf366e19601917bedaf6224929d0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f237df286ecaf366e19601917bedaf6224929d0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f237df286ecaf366e19601917bedaf6224929d0/comments", "author": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tromey", "id": 1557670, "node_id": "MDQ6VXNlcjE1NTc2NzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1557670?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tromey", "html_url": "https://github.com/tromey", "followers_url": "https://api.github.com/users/tromey/followers", "following_url": "https://api.github.com/users/tromey/following{/other_user}", "gists_url": "https://api.github.com/users/tromey/gists{/gist_id}", "starred_url": "https://api.github.com/users/tromey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tromey/subscriptions", "organizations_url": "https://api.github.com/users/tromey/orgs", "repos_url": "https://api.github.com/users/tromey/repos", "events_url": "https://api.github.com/users/tromey/events{/privacy}", "received_events_url": "https://api.github.com/users/tromey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d5a0b9af5b9c0f07eabcdb1a7a6454c06cdf8ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d5a0b9af5b9c0f07eabcdb1a7a6454c06cdf8ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d5a0b9af5b9c0f07eabcdb1a7a6454c06cdf8ae"}], "stats": {"total": 205, "additions": 105, "deletions": 100}, "files": [{"sha": "70553eef8f8cc989513b32a22fab6141e6bccff5", "filename": "libcc1/deleter.hh", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f237df286ecaf366e19601917bedaf6224929d0/libcc1%2Fdeleter.hh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f237df286ecaf366e19601917bedaf6224929d0/libcc1%2Fdeleter.hh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fdeleter.hh?ref=0f237df286ecaf366e19601917bedaf6224929d0", "patch": "@@ -0,0 +1,53 @@\n+/* Deleter objects\n+   Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#ifndef CC1_PLUGIN_DELETER_HH\n+#define CC1_PLUGIN_DELETER_HH\n+\n+#include <memory>\n+\n+namespace cc1_plugin\n+{\n+  // Any pointer type requires a deleter object that knows how to\n+  // clean up.  These are used in multiple places.\n+  template<typename T> struct deleter;\n+\n+  template<>\n+  struct deleter<char>\n+  {\n+    void operator() (char *s)\n+    {\n+      delete[] s;\n+    }\n+  };\n+\n+  template<>\n+  struct deleter<gcc_type_array>\n+  {\n+    void operator() (gcc_type_array *p)\n+    {\n+      delete[] p->elements;\n+      delete p;\n+    }\n+  };\n+\n+  template<typename T> using unique_ptr = std::unique_ptr<T, deleter<T>>;\n+}\n+\n+#endif // CC1_PLUGIN_DELETER_HH"}, {"sha": "ec616e09d9525ecec70ed09d4e1c7da0a83e3d85", "filename": "libcc1/marshall-cp.hh", "status": "modified", "additions": 46, "deletions": 33, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f237df286ecaf366e19601917bedaf6224929d0/libcc1%2Fmarshall-cp.hh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f237df286ecaf366e19601917bedaf6224929d0/libcc1%2Fmarshall-cp.hh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fmarshall-cp.hh?ref=0f237df286ecaf366e19601917bedaf6224929d0", "patch": "@@ -22,9 +22,42 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"marshall.hh\"\n #include \"gcc-cp-interface.h\"\n+#include \"deleter.hh\"\n \n namespace cc1_plugin\n {\n+  template<>\n+  struct deleter<gcc_vbase_array>\n+  {\n+    void operator() (gcc_vbase_array *p)\n+    {\n+      delete[] p->flags;\n+      delete[] p->elements;\n+      delete p;\n+    }\n+  };\n+\n+  template<>\n+  struct deleter<gcc_cp_template_args>\n+  {\n+    void operator() (gcc_cp_template_args *p)\n+    {\n+      delete[] p->elements;\n+      delete[] p->kinds;\n+      delete p;\n+    }\n+  };\n+\n+  template<>\n+  struct deleter<gcc_cp_function_args>\n+  {\n+    void operator() (gcc_cp_function_args *p)\n+    {\n+      delete[] p->elements;\n+      delete p;\n+    }\n+  };\n+\n   // Send a gcc_vbase_array marker followed by the array.\n   status\n   marshall (connection *conn, const gcc_vbase_array *a)\n@@ -67,33 +100,24 @@ namespace cc1_plugin\n \treturn OK;\n       }\n \n-    struct gcc_vbase_array *gva = new gcc_vbase_array;\n+    cc1_plugin::unique_ptr<gcc_vbase_array> gva (new gcc_vbase_array {});\n \n     gva->n_elements = len;\n     gva->elements = new gcc_type[len];\n \n     if (!unmarshall_array_elmts (conn,\n \t\t\t\t len * sizeof (gva->elements[0]),\n \t\t\t\t gva->elements))\n-      {\n-\tdelete[] gva->elements;\n-\tdelete gva;\n-\treturn FAIL;\n-      }\n+      return FAIL;\n \n     gva->flags = new enum gcc_cp_symbol_kind[len];\n \n     if (!unmarshall_array_elmts (conn,\n \t\t\t\t len * sizeof (gva->flags[0]),\n \t\t\t\t gva->flags))\n-      {\n-\tdelete[] gva->flags;\n-\tdelete[] gva->elements;\n-\tdelete gva;\n-\treturn FAIL;\n-      }\n+      return FAIL;\n \n-    *result = gva;\n+    *result = gva.release ();\n     return OK;\n   }\n \n@@ -139,33 +163,25 @@ namespace cc1_plugin\n \treturn OK;\n       }\n \n-    struct gcc_cp_template_args *gva = new gcc_cp_template_args;\n+    cc1_plugin::unique_ptr<gcc_cp_template_args> gva\n+      (new gcc_cp_template_args {});\n \n     gva->n_elements = len;\n     gva->kinds = new char[len];\n \n     if (!unmarshall_array_elmts (conn,\n \t\t\t\t len * sizeof (gva->kinds[0]),\n \t\t\t\t gva->kinds))\n-      {\n-\tdelete[] gva->kinds;\n-\tdelete gva;\n-\treturn FAIL;\n-      }\n+      return FAIL;\n \n     gva->elements = new gcc_cp_template_arg[len];\n \n     if (!unmarshall_array_elmts (conn,\n \t\t\t\t len * sizeof (gva->elements[0]),\n \t\t\t\t gva->elements))\n-      {\n-\tdelete[] gva->elements;\n-\tdelete[] gva->kinds;\n-\tdelete gva;\n-\treturn FAIL;\n-      }\n+      return FAIL;\n \n-    *result = gva;\n+    *result = gva.release ();\n     return OK;\n   }\n \n@@ -208,21 +224,18 @@ namespace cc1_plugin\n \treturn OK;\n       }\n \n-    struct gcc_cp_function_args *gva = new gcc_cp_function_args;\n+    cc1_plugin::unique_ptr<gcc_cp_function_args> gva\n+      (new gcc_cp_function_args {});\n \n     gva->n_elements = len;\n     gva->elements = new gcc_expr[len];\n \n     if (!unmarshall_array_elmts (conn,\n \t\t\t\t len * sizeof (gva->elements[0]),\n \t\t\t\t gva->elements))\n-      {\n-\tdelete[] gva->elements;\n-\tdelete gva;\n-\treturn FAIL;\n-      }\n+      return FAIL;\n \n-    *result = gva;\n+    *result = gva.release ();\n \n     return OK;\n   }"}, {"sha": "4a7a21f5cd1b669e038658067cb525756aa5325e", "filename": "libcc1/marshall.cc", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f237df286ecaf366e19601917bedaf6224929d0/libcc1%2Fmarshall.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f237df286ecaf366e19601917bedaf6224929d0/libcc1%2Fmarshall.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Fmarshall.cc?ref=0f237df286ecaf366e19601917bedaf6224929d0", "patch": "@@ -22,6 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n #include <string.h>\n #include \"marshall.hh\"\n #include \"connection.hh\"\n+#include \"rpc.hh\"\n \n cc1_plugin::status\n cc1_plugin::unmarshall_check (connection *conn, unsigned long long check)\n@@ -175,21 +176,17 @@ cc1_plugin::unmarshall (connection *conn, gcc_type_array **result)\n       return OK;\n     }\n \n-  gcc_type_array *gta = new gcc_type_array;\n+  cc1_plugin::unique_ptr<gcc_type_array> gta (new gcc_type_array {});\n \n   gta->n_elements = len;\n   gta->elements = new gcc_type[len];\n \n   if (!unmarshall_array_elmts (conn,\n \t\t\t       len * sizeof (gta->elements[0]),\n \t\t\t       gta->elements))\n-    {\n-      delete[] gta->elements;\n-      delete *result;\n-      return FAIL;\n-    }\n+    return FAIL;\n \n-  *result = gta;\n+  *result = gta.release ();\n \n   return OK;\n }"}, {"sha": "09cd7bdda616013ea1cbc44560bb245c4ab68034", "filename": "libcc1/rpc.hh", "status": "modified", "additions": 2, "deletions": 60, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f237df286ecaf366e19601917bedaf6224929d0/libcc1%2Frpc.hh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f237df286ecaf366e19601917bedaf6224929d0/libcc1%2Frpc.hh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcc1%2Frpc.hh?ref=0f237df286ecaf366e19601917bedaf6224929d0", "patch": "@@ -22,7 +22,7 @@ along with GCC; see the file COPYING3.  If not see\n \n #include \"status.hh\"\n #include \"connection.hh\"\n-#include <memory>\n+#include \"deleter.hh\"\n \n namespace cc1_plugin\n {\n@@ -55,64 +55,6 @@ namespace cc1_plugin\n     T m_object;\n   };\n \n-  // Any pointer type requires a deleter object that knows how to\n-  // clean up.  These are used in multiple places.\n-  template<typename T> struct deleter;\n-\n-  template<>\n-  struct deleter<char>\n-  {\n-    void operator() (char *s)\n-    {\n-      delete[] s;\n-    }\n-  };\n-\n-  template<>\n-  struct deleter<gcc_type_array>\n-  {\n-    void operator() (gcc_type_array *p)\n-    {\n-      delete[] p->elements;\n-      delete p;\n-    }\n-  };\n-\n-#ifdef GCC_CP_INTERFACE_H\n-  template<>\n-  struct deleter<gcc_vbase_array>\n-  {\n-    void operator() (gcc_vbase_array *p)\n-    {\n-      delete[] p->flags;\n-      delete[] p->elements;\n-      delete p;\n-    }\n-  };\n-\n-  template<>\n-  struct deleter<gcc_cp_template_args>\n-  {\n-    void operator() (gcc_cp_template_args *p)\n-    {\n-      delete[] p->elements;\n-      delete[] p->kinds;\n-      delete p;\n-    }\n-  };\n-\n-  template<>\n-  struct deleter<gcc_cp_function_args>\n-  {\n-    void operator() (gcc_cp_function_args *p)\n-    {\n-      delete[] p->elements;\n-      delete p;\n-    }\n-  };\n-\n-#endif // GCC_CP_INTERFACE_H\n-\n   // Specialization for any kind of pointer.\n   template<typename T>\n   class argument_wrapper<T *>\n@@ -142,7 +84,7 @@ namespace cc1_plugin\n \n   private:\n \n-    std::unique_ptr<type, deleter<type>> m_object;\n+    unique_ptr<type> m_object;\n   };\n \n   // There are two kinds of template functions here: \"call\" and"}]}