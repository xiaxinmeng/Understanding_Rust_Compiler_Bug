{"sha": "d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRkYWEwYjQyM2YzMDE1ZWYyZGYxNjAxNmRiN2NiYjhlMGNmM2ZlMg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@cygnus.com", "date": "2000-03-23T19:38:24Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2000-03-23T19:38:24Z"}, "message": "Fix misscheduling of epilogue predicate register restore.\n\n\t* config/ia64/ia64.c (rtx_needs_barrier, case UNSPEC): Move case 6...\n\t(rtx_needs_barrier, case UNSPEC_VOLATILE): to here.\n\t* config/ia64/ia64.md (pr_restore): Change UNSPEC to UNSPEC_VOLATILE.\n\nFrom-SVN: r32714", "tree": {"sha": "4ee13bce06cfcdb91283ad4f1fa3567130a795ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ee13bce06cfcdb91283ad4f1fa3567130a795ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2/comments", "author": null, "committer": null, "parents": [{"sha": "fc5b7cda3ccfe918e588241738bba9b37c027925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc5b7cda3ccfe918e588241738bba9b37c027925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc5b7cda3ccfe918e588241738bba9b37c027925"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "f6fcab1faa57c3486e292efa4ae0caa87ed9bfb1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2", "patch": "@@ -1,3 +1,9 @@\n+Thu Mar 23 11:34:39 2000  Jim Wilson  <wilson@cygnus.com>\n+\n+\t* config/ia64/ia64.c (rtx_needs_barrier, case UNSPEC): Move case 6...\n+\t(rtx_needs_barrier, case UNSPEC_VOLATILE): to here.\n+\t* config/ia64/ia64.md (pr_restore): Change UNSPEC to UNSPEC_VOLATILE.\n+\n Thu Mar 23 16:04:40 2000  Andrew Haley  <aph@cygnus.com>\n \n         * config/mips/mips.md (movdf_internal1a): Delete (set 'f', 'F')"}, {"sha": "9c3b1f8db18a1f8ce070ef1642b41ee86c80fd5d", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2", "patch": "@@ -2421,16 +2421,7 @@ rtx_needs_barrier (x, flags, pred)\n \t    need_barrier |= rws_access_reg (i, flags, pred);\n \t  break;\n \n-\tcase 6: /* mov pr= */\n-\t  /* This writes all predicate registers.  */\n-\t  new_flags.is_write = 1;\n-\t  /* We need to skip by two, because rws_access_reg always writes\n-\t     to two predicate registers at a time.  */\n-\t  /* ??? Strictly speaking, we shouldn't be counting writes to pr0.  */\n-\t  for (i = PR_REG (0); i < PR_REG (64); i += 2)\n-\t    need_barrier |= rws_access_reg (i, new_flags, pred);\n-\t  break;\n-\n+\tcase 6:\n \tcase 7:\n \t  abort ();\n \n@@ -2486,6 +2477,16 @@ rtx_needs_barrier (x, flags, pred)\n \t  need_barrier = rws_access_reg (REG_AR_PFS, new_flags, pred);\n \t  break;\n \n+\tcase 6: /* mov pr= */\n+\t  /* This writes all predicate registers.  */\n+\t  new_flags.is_write = 1;\n+\t  /* We need to skip by two, because rws_access_reg always writes\n+\t     to two predicate registers at a time.  */\n+\t  /* ??? Strictly speaking, we shouldn't be counting writes to pr0.  */\n+\t  for (i = PR_REG (0); i < PR_REG (64); i += 2)\n+\t    need_barrier |= rws_access_reg (i, new_flags, pred);\n+\t  break;\n+\n \tdefault:\n \t  abort ();\n \t}"}, {"sha": "d3df3cb7cb1f22f2577ef5ee1f9453becae069d8", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=d4daa0b423f3015ef2df16016db7cbb8e0cf3fe2", "patch": "@@ -3049,8 +3049,11 @@\n   \"mov %0 = pr\"\n   [(set_attr \"type\" \"I\")])\n \n+;; ??? This is volatile to prevent it from being moved before a conditional\n+;; expression that calculates the return value.\n+\n (define_insn \"pr_restore\"\n-  [(unspec [(const_int 0)] 6)\n+  [(unspec_volatile [(const_int 0)] 6)\n    (use (match_operand:DI 0 \"register_operand\" \"r\"))]\n   \"\"\n   \"mov pr = %0, -1\""}]}