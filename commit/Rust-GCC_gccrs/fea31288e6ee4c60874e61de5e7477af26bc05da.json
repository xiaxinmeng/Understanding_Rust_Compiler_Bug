{"sha": "fea31288e6ee4c60874e61de5e7477af26bc05da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmVhMzEyODhlNmVlNGM2MDg3NGU2MWRlNWU3NDc3YWYyNmJjMDVkYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-07-27T17:52:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-07-27T17:52:35Z"}, "message": "re PR testsuite/44701 (PR44492 fix broke gcc.target/powerpc/asm-es-2.c)\n\n\tPR testsuite/44701\n\t* doc/md.texi: Clarify m and es constraints on PowerPC and m and S\n\tconstraints on IA-64.\n\n\t* gcc.target/powerpc/asm-es-2.c (f2): Add <> constraints.\n\nFrom-SVN: r162581", "tree": {"sha": "c0267b6b1e058f1da6195b770915c1e45f9aa9ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c0267b6b1e058f1da6195b770915c1e45f9aa9ba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fea31288e6ee4c60874e61de5e7477af26bc05da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea31288e6ee4c60874e61de5e7477af26bc05da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fea31288e6ee4c60874e61de5e7477af26bc05da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fea31288e6ee4c60874e61de5e7477af26bc05da/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b04fa9118b7d033876b407d5bb936fed9d2e23c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b04fa9118b7d033876b407d5bb936fed9d2e23c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b04fa9118b7d033876b407d5bb936fed9d2e23c"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "cd97a4a03a06aefa84a8b4380bc8adff13f742ad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea31288e6ee4c60874e61de5e7477af26bc05da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea31288e6ee4c60874e61de5e7477af26bc05da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fea31288e6ee4c60874e61de5e7477af26bc05da", "patch": "@@ -1,3 +1,9 @@\n+2010-07-27  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR testsuite/44701\n+\t* doc/md.texi: Clarify m and es constraints on PowerPC and m and S\n+\tconstraints on IA-64.\n+\n 2010-07-27  Jie Zhang  <jie@codesourcery.com>\n \n \tPR target/44290"}, {"sha": "fd8423a2866fa1c7ab9112afd81902e897c6b0e5", "filename": "gcc/doc/md.texi", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea31288e6ee4c60874e61de5e7477af26bc05da/gcc%2Fdoc%2Fmd.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea31288e6ee4c60874e61de5e7477af26bc05da/gcc%2Fdoc%2Fmd.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fmd.texi?ref=fea31288e6ee4c60874e61de5e7477af26bc05da", "patch": "@@ -1998,31 +1998,33 @@ Integer/Floating point constant that can be loaded into a register using\n three instructions\n \n @item m\n-Memory operand.  Note that on PowerPC targets, @code{m} can include\n-addresses that update the base register.  It is therefore only safe\n-to use @samp{m} in an @code{asm} statement if that @code{asm} statement\n+Memory operand.  \n+Normally, @code{m} does not allow addresses that update the base register.\n+If @samp{<} or @samp{>} constraint is also used, they are allowed and\n+therefore on PowerPC targets in that case it is only safe\n+to use @samp{m<>} in an @code{asm} statement if that @code{asm} statement\n accesses the operand exactly once.  The @code{asm} statement must also\n use @samp{%U@var{<opno>}} as a placeholder for the ``update'' flag in the\n corresponding load or store instruction.  For example:\n \n @smallexample\n-asm (\"st%U0 %1,%0\" : \"=m\" (mem) : \"r\" (val));\n+asm (\"st%U0 %1,%0\" : \"=m<>\" (mem) : \"r\" (val));\n @end smallexample\n \n is correct but:\n \n @smallexample\n-asm (\"st %1,%0\" : \"=m\" (mem) : \"r\" (val));\n+asm (\"st %1,%0\" : \"=m<>\" (mem) : \"r\" (val));\n @end smallexample\n \n-is not.  Use @code{es} rather than @code{m} if you don't want the\n-base register to be updated.\n+is not.\n \n @item es\n A ``stable'' memory operand; that is, one which does not include any\n-automodification of the base register.  Unlike @samp{m}, this constraint\n-can be used in @code{asm} statements that might access the operand\n-several times, or that might not access it at all.\n+automodification of the base register.  This used to be useful when\n+@samp{m} allowed automodification of the base register, but as those are now only\n+allowed when @samp{<} or @samp{>} is used, @samp{es} is basically the same\n+as @samp{m} without @samp{<} and @samp{>}.\n \n @item Q\n Memory operand that is an offset from a register (it is usually better\n@@ -2194,10 +2196,9 @@ Application register residing in I-unit\n Floating-point register\n \n @item m\n-Memory operand.\n-Remember that @samp{m} allows postincrement and postdecrement which\n+Memory operand.  If used together with @samp{<} or @samp{>},\n+the operand can have postincrement and postdecrement which\n require printing with @samp{%Pn} on IA-64.\n-Use @samp{S} to disallow postincrement and postdecrement.\n \n @item G\n Floating-point constant 0.0 or 1.0\n@@ -2233,7 +2234,9 @@ Non-volatile memory for floating-point loads and stores\n Integer constant in the range 1 to 4 for @code{shladd} instruction\n \n @item S\n-Memory operand except postincrement and postdecrement\n+Memory operand except postincrement and postdecrement.  This is\n+now roughly the same as @samp{m} when not used together with @samp{<}\n+or @samp{>}.\n @end table\n \n @item FRV---@file{config/frv/frv.h}"}, {"sha": "7bfba79f0f4d64a41b347590dfb120ca88f8bdb6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea31288e6ee4c60874e61de5e7477af26bc05da/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea31288e6ee4c60874e61de5e7477af26bc05da/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fea31288e6ee4c60874e61de5e7477af26bc05da", "patch": "@@ -1,5 +1,8 @@\n 2010-07-27  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR testsuite/44701\n+\t* gcc.target/powerpc/asm-es-2.c (f2): Add <> constraints.\n+\n \tPR c/45079\n \t* gcc.dg/pr45079.c: New test.\n "}, {"sha": "94c2883d18af3ccfbfce4994c90798ff9e547b3c", "filename": "gcc/testsuite/gcc.target/powerpc/asm-es-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fea31288e6ee4c60874e61de5e7477af26bc05da/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fasm-es-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fea31288e6ee4c60874e61de5e7477af26bc05da/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fasm-es-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fasm-es-2.c?ref=fea31288e6ee4c60874e61de5e7477af26bc05da", "patch": "@@ -11,7 +11,7 @@ f2 (int *p)\n   while (1)\n     {\n       p += 4;\n-      asm (\"asm2%U0 %0\" : \"=m\" (*p));\n+      asm (\"asm2%U0 %0\" : \"=m<>\" (*p));\n     }\n }\n "}]}