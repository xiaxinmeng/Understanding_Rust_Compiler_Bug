{"sha": "54e1d3a6a9dd0caab503807de6fb85ae1a1db0de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTRlMWQzYTZhOWRkMGNhYWI1MDM4MDdkZTZmYjg1YWUxYTFkYjBkZQ==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-08-04T20:24:47Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "2000-08-04T20:24:47Z"}, "message": "Minor tweaks\n\nFrom-SVN: r35493", "tree": {"sha": "2567f0aeb248a1dfe2ec2ed66cb3e6dea2170457", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2567f0aeb248a1dfe2ec2ed66cb3e6dea2170457"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/54e1d3a6a9dd0caab503807de6fb85ae1a1db0de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e1d3a6a9dd0caab503807de6fb85ae1a1db0de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e1d3a6a9dd0caab503807de6fb85ae1a1db0de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e1d3a6a9dd0caab503807de6fb85ae1a1db0de/comments", "author": null, "committer": null, "parents": [{"sha": "c1194d740388113a485bd42652d40d4e901152ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1194d740388113a485bd42652d40d4e901152ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1194d740388113a485bd42652d40d4e901152ee"}], "stats": {"total": 18, "additions": 4, "deletions": 14}, "files": [{"sha": "4a8c87c2d73a3ad3c75a1a2cee6243a2016e9a81", "filename": "gcc/extend.texi", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/54e1d3a6a9dd0caab503807de6fb85ae1a1db0de/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/54e1d3a6a9dd0caab503807de6fb85ae1a1db0de/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=54e1d3a6a9dd0caab503807de6fb85ae1a1db0de", "patch": "@@ -203,7 +203,7 @@ handled.  For example:\n does not work the same way as:\n \n @example\n-inline int foo(a) @{ int b = a; return b + 3; @}\n+inline int foo(int a) @{ int b = a; return b + 3; @}\n @end example\n \n @noindent\n@@ -213,19 +213,9 @@ run earlier in the case of the macro than in the case of the function.\n \n These considerations mean that it is probably a bad idea to use\n statement-expressions of this form in header files that are designed to\n-work with C++.  Note that the GNU C Library does contain header files\n-using statement-expressions, and that these definitions make the library\n-technically non-conforming.  For example, when optimization is turned\n-on,\n-\n-@example\n-string a, b;\n-printf(\"%c\", toupper((a+b).c_str()[0]));\n-@end example\n-\n-@noindent\n-will result in the destructor for the temporary created for @code{a+b}\n-being run earlier than it should be.\n+work with C++.  (Note that some versions of the GNU C Library contained\n+header files using statement-expression that lead to precisely this\n+bug.)\n \n @node Local Labels\n @section Locally Declared Labels"}]}