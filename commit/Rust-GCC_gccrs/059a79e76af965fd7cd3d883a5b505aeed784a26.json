{"sha": "059a79e76af965fd7cd3d883a5b505aeed784a26", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDU5YTc5ZTc2YWY5NjVmZDdjZDNkODgzYTViNTA1YWVlZDc4NGEyNg==", "commit": {"author": {"name": "Christophe Lyon", "email": "christophe.lyon@linaro.org", "date": "2015-05-19T15:48:15Z"}, "committer": {"name": "Christophe Lyon", "email": "clyon@gcc.gnu.org", "date": "2015-05-19T15:48:15Z"}, "message": "vqrshrn_n.c: New file.\n\n2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n\n\t* gcc.target/aarch64/advsimd-intrinsics/vqrshrn_n.c: New file.\n\nFrom-SVN: r223379", "tree": {"sha": "74e99e7ddef45d7662e59a1874b598805558d717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74e99e7ddef45d7662e59a1874b598805558d717"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/059a79e76af965fd7cd3d883a5b505aeed784a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059a79e76af965fd7cd3d883a5b505aeed784a26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/059a79e76af965fd7cd3d883a5b505aeed784a26", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/059a79e76af965fd7cd3d883a5b505aeed784a26/comments", "author": null, "committer": null, "parents": [{"sha": "cace06d145df2f0172347f0fc2a8e187fc935d5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cace06d145df2f0172347f0fc2a8e187fc935d5c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cace06d145df2f0172347f0fc2a8e187fc935d5c"}], "stats": {"total": 178, "additions": 178, "deletions": 0}, "files": [{"sha": "4a7e12d75d1e17ce43dc894d706da189a066ee8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059a79e76af965fd7cd3d883a5b505aeed784a26/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059a79e76af965fd7cd3d883a5b505aeed784a26/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=059a79e76af965fd7cd3d883a5b505aeed784a26", "patch": "@@ -1,3 +1,7 @@\n+2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n+\n+\t* gcc.target/aarch64/advsimd-intrinsics/vqrshrn_n.c: New file.\n+\n 2015-05-19  Christophe Lyon  <christophe.lyon@linaro.org>\n \n \t* gcc.target/aarch64/advsimd-intrinsics/vqrshl.c: New file."}, {"sha": "7bbcb856f674f2312830708e2b7471f6cb7c14fb", "filename": "gcc/testsuite/gcc.target/aarch64/advsimd-intrinsics/vqrshrn_n.c", "status": "added", "additions": 174, "deletions": 0, "changes": 174, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/059a79e76af965fd7cd3d883a5b505aeed784a26/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrn_n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/059a79e76af965fd7cd3d883a5b505aeed784a26/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrn_n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fadvsimd-intrinsics%2Fvqrshrn_n.c?ref=059a79e76af965fd7cd3d883a5b505aeed784a26", "patch": "@@ -0,0 +1,174 @@\n+#include <arm_neon.h>\n+#include \"arm-neon-ref.h\"\n+#include \"compute-ref-data.h\"\n+\n+/* Expected values of cumulative_saturation flag.  */\n+int VECT_VAR(expected_cumulative_sat,int,16,8) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,32,4) = 0;\n+int VECT_VAR(expected_cumulative_sat,int,64,2) = 0;\n+int VECT_VAR(expected_cumulative_sat,uint,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat,uint,64,2) = 1;\n+\n+/* Expected results.  */\n+VECT_VAR_DECL(expected,int,8,8) [] = { 0xf8, 0xf9, 0xf9, 0xfa,\n+\t\t\t\t       0xfa, 0xfb, 0xfb, 0xfc };\n+VECT_VAR_DECL(expected,int,16,4) [] = { 0xfff8, 0xfff9, 0xfff9, 0xfffa };\n+VECT_VAR_DECL(expected,int,32,2) [] = { 0xfffffffc, 0xfffffffc };\n+VECT_VAR_DECL(expected,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+\n+/* Expected values of cumulative_saturation flag with shift by 3.  */\n+int VECT_VAR(expected_cumulative_sat_sh3,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_sh3,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_sh3,int,64,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_sh3,uint,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_sh3,uint,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_sh3,uint,64,2) = 1;\n+\n+/* Expected results with shift by 3.  */\n+VECT_VAR_DECL(expected_sh3,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t   0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_sh3,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_sh3,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_sh3,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t    0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_sh3,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_sh3,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+\n+/* Expected values of cumulative_saturation flag with shift by max\n+   amount.  */\n+int VECT_VAR(expected_cumulative_sat_shmax,int,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_shmax,int,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_shmax,int,64,2) = 1;\n+int VECT_VAR(expected_cumulative_sat_shmax,uint,16,8) = 1;\n+int VECT_VAR(expected_cumulative_sat_shmax,uint,32,4) = 1;\n+int VECT_VAR(expected_cumulative_sat_shmax,uint,64,2) = 1;\n+\n+/* Expected results with shift by max amount.  */\n+VECT_VAR_DECL(expected_shmax,int,8,8) [] = { 0x7f, 0x7f, 0x7f, 0x7f,\n+\t\t\t\t\t     0x7f, 0x7f, 0x7f, 0x7f };\n+VECT_VAR_DECL(expected_shmax,int,16,4) [] = { 0x7fff, 0x7fff, 0x7fff, 0x7fff };\n+VECT_VAR_DECL(expected_shmax,int,32,2) [] = { 0x7fffffff, 0x7fffffff };\n+VECT_VAR_DECL(expected_shmax,uint,8,8) [] = { 0xff, 0xff, 0xff, 0xff,\n+\t\t\t\t\t      0xff, 0xff, 0xff, 0xff };\n+VECT_VAR_DECL(expected_shmax,uint,16,4) [] = { 0xffff, 0xffff, 0xffff, 0xffff };\n+VECT_VAR_DECL(expected_shmax,uint,32,2) [] = { 0xffffffff, 0xffffffff };\n+\n+#define INSN vqrshrn_n\n+#define TEST_MSG \"VQRSHRN_N\"\n+\n+#define FNNAME1(NAME) void exec_ ## NAME (void)\n+#define FNNAME(NAME) FNNAME1(NAME)\n+\n+FNNAME (INSN)\n+{\n+  /* Basic test: y=vqrshrn_n(x,v), then store the result.  */\n+#define TEST_VQRSHRN_N2(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  Set_Neon_Cumulative_Sat(0, VECT_VAR(vector_res, T1, W2, N));\t\t\\\n+  VECT_VAR(vector_res, T1, W2, N) =\t\t\t\t\t\\\n+    INSN##_##T2##W(VECT_VAR(vector, T1, W, N),\t\t\t\t\\\n+\t\t   V);\t\t\t\t\t\t\t\\\n+  vst1_##T2##W2(VECT_VAR(result, T1, W2, N),\t\t\t\t\\\n+\t\tVECT_VAR(vector_res, T1, W2, N));\t\t\t\\\n+  CHECK_CUMULATIVE_SAT(TEST_MSG, T1, W, N, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+  /* Two auxliary macros are necessary to expand INSN */\n+#define TEST_VQRSHRN_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQRSHRN_N2(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+#define TEST_VQRSHRN_N(T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT) \\\n+  TEST_VQRSHRN_N1(INSN, T1, T2, W, W2, N, V, EXPECTED_CUMULATIVE_SAT, CMT)\n+\n+\n+  /* vector is twice as large as vector_res.  */\n+  DECL_VARIABLE(vector, int, 16, 8);\n+  DECL_VARIABLE(vector, int, 32, 4);\n+  DECL_VARIABLE(vector, int, 64, 2);\n+  DECL_VARIABLE(vector, uint, 16, 8);\n+  DECL_VARIABLE(vector, uint, 32, 4);\n+  DECL_VARIABLE(vector, uint, 64, 2);\n+\n+  DECL_VARIABLE(vector_res, int, 8, 8);\n+  DECL_VARIABLE(vector_res, int, 16, 4);\n+  DECL_VARIABLE(vector_res, int, 32, 2);\n+  DECL_VARIABLE(vector_res, uint, 8, 8);\n+  DECL_VARIABLE(vector_res, uint, 16, 4);\n+  DECL_VARIABLE(vector_res, uint, 32, 2);\n+\n+  clean_results ();\n+\n+  VLOAD(vector, buffer, q, int, s, 16, 8);\n+  VLOAD(vector, buffer, q, int, s, 32, 4);\n+  VLOAD(vector, buffer, q, int, s, 64, 2);\n+  VLOAD(vector, buffer, q, uint, u, 16, 8);\n+  VLOAD(vector, buffer, q, uint, u, 32, 4);\n+  VLOAD(vector, buffer, q, uint, u, 64, 2);\n+\n+  /* Choose shift amount arbitrarily.  */\n+#define CMT \"\"\n+  TEST_VQRSHRN_N(int, s, 16, 8, 8, 1, expected_cumulative_sat, CMT);\n+  TEST_VQRSHRN_N(int, s, 32, 16, 4, 1, expected_cumulative_sat, CMT);\n+  TEST_VQRSHRN_N(int, s, 64, 32, 2, 2, expected_cumulative_sat, CMT);\n+  TEST_VQRSHRN_N(uint, u, 16, 8, 8, 2, expected_cumulative_sat, CMT);\n+  TEST_VQRSHRN_N(uint, u, 32, 16, 4, 3, expected_cumulative_sat, CMT);\n+  TEST_VQRSHRN_N(uint, u, 64, 32, 2, 3, expected_cumulative_sat, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected, CMT);\n+\n+\n+  /* Another set of tests, shifting max value by 3.  */\n+  VDUP(vector, q, int, s, 16, 8, 0x7FFF);\n+  VDUP(vector, q, int, s, 32, 4, 0x7FFFFFFF);\n+  VDUP(vector, q, int, s, 64, 2, 0x7FFFFFFFFFFFFFFFLL);\n+  VDUP(vector, q, uint, u, 16, 8, 0xFFFF);\n+  VDUP(vector, q, uint, u, 32, 4, 0xFFFFFFFF);\n+  VDUP(vector, q, uint, u, 64, 2, 0xFFFFFFFFFFFFFFFFULL);\n+\n+#undef CMT\n+#define CMT \" (check saturation: shift by 3)\"\n+  TEST_VQRSHRN_N(int, s, 16, 8, 8, 3, expected_cumulative_sat_sh3, CMT);\n+  TEST_VQRSHRN_N(int, s, 32, 16, 4, 3, expected_cumulative_sat_sh3, CMT);\n+  TEST_VQRSHRN_N(int, s, 64, 32, 2, 3, expected_cumulative_sat_sh3, CMT);\n+  TEST_VQRSHRN_N(uint, u, 16, 8, 8, 3, expected_cumulative_sat_sh3, CMT);\n+  TEST_VQRSHRN_N(uint, u, 32, 16, 4, 3, expected_cumulative_sat_sh3, CMT);\n+  TEST_VQRSHRN_N(uint, u, 64, 32, 2, 3, expected_cumulative_sat_sh3, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_sh3, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_sh3, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_sh3, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_sh3, CMT);\n+\n+\n+  /* Shift by max amount.  */\n+#undef CMT\n+#define CMT \" (check saturation: shift by max)\"\n+  TEST_VQRSHRN_N(int, s, 16, 8, 8, 8, expected_cumulative_sat_shmax, CMT);\n+  TEST_VQRSHRN_N(int, s, 32, 16, 4, 16, expected_cumulative_sat_shmax, CMT);\n+  TEST_VQRSHRN_N(int, s, 64, 32, 2, 32, expected_cumulative_sat_shmax, CMT);\n+  TEST_VQRSHRN_N(uint, u, 16, 8, 8, 8, expected_cumulative_sat_shmax, CMT);\n+  TEST_VQRSHRN_N(uint, u, 32, 16, 4, 16, expected_cumulative_sat_shmax, CMT);\n+  TEST_VQRSHRN_N(uint, u, 64, 32, 2, 32, expected_cumulative_sat_shmax, CMT);\n+\n+  CHECK(TEST_MSG, int, 8, 8, PRIx8, expected_shmax, CMT);\n+  CHECK(TEST_MSG, int, 16, 4, PRIx16, expected_shmax, CMT);\n+  CHECK(TEST_MSG, int, 32, 2, PRIx32, expected_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 8, 8, PRIx8, expected_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 16, 4, PRIx16, expected_shmax, CMT);\n+  CHECK(TEST_MSG, uint, 32, 2, PRIx32, expected_shmax, CMT);\n+}\n+\n+int main (void)\n+{\n+  exec_vqrshrn_n ();\n+  return 0;\n+}"}]}