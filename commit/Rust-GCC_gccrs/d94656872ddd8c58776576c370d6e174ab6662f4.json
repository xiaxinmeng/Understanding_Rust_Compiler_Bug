{"sha": "d94656872ddd8c58776576c370d6e174ab6662f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDk0NjU2ODcyZGRkOGM1ODc3NjU3NmMzNzBkNmUxNzRhYjY2NjJmNA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1999-11-30T23:56:52Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1999-11-30T23:56:52Z"}, "message": "ansidecl.h (ATTRIBUTE_MALLOC): New macro.\n\n        * ansidecl.h (ATTRIBUTE_MALLOC): New macro.\n\n        * libiberty.h (buildargv, dupargv, concat, choose_temp_base,\n        make_temp_file, xmalloc, xcalloc, xstrdup, xmemdup): Add\n        ATTRIBUTE_MALLOC.\n        (xatexit): Remove __GNUC__ check, add ATTRIBUTE_NORETURN.\n\nFrom-SVN: r30732", "tree": {"sha": "23e9f73303003aee49a00d65cffac4129fa21658", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23e9f73303003aee49a00d65cffac4129fa21658"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d94656872ddd8c58776576c370d6e174ab6662f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d94656872ddd8c58776576c370d6e174ab6662f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d94656872ddd8c58776576c370d6e174ab6662f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d94656872ddd8c58776576c370d6e174ab6662f4/comments", "author": null, "committer": null, "parents": [{"sha": "8251469698a59e0e3ea61ff9ced016544135048a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8251469698a59e0e3ea61ff9ced016544135048a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8251469698a59e0e3ea61ff9ced016544135048a"}], "stats": {"total": 46, "additions": 31, "deletions": 15}, "files": [{"sha": "f47d87f1c9da79bc5dbbcd04498c5609ccbba8f2", "filename": "include/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94656872ddd8c58776576c370d6e174ab6662f4/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94656872ddd8c58776576c370d6e174ab6662f4/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=d94656872ddd8c58776576c370d6e174ab6662f4", "patch": "@@ -1,3 +1,12 @@\n+1999-11-30  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* ansidecl.h (ATTRIBUTE_MALLOC): New macro.\n+\n+\t* libiberty.h (buildargv, dupargv, concat, choose_temp_base,\n+\tmake_temp_file, xmalloc, xcalloc, xstrdup, xmemdup): Add\n+\tATTRIBUTE_MALLOC.\n+\t(xatexit): Remove __GNUC__ check, add ATTRIBUTE_NORETURN.\n+\n 1999-11-28  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* libiberty.h: Include stdarg.h when ANSI_PROTOTYPES is defined."}, {"sha": "9e8a457c2e0cd7f90ebe3c381a90b437dbb468c0", "filename": "include/ansidecl.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94656872ddd8c58776576c370d6e174ab6662f4/include%2Fansidecl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94656872ddd8c58776576c370d6e174ab6662f4/include%2Fansidecl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fansidecl.h?ref=d94656872ddd8c58776576c370d6e174ab6662f4", "patch": "@@ -187,6 +187,15 @@ So instead we use the macro below and test it against specific values.  */\n # define __attribute__(x)\n #endif\n \n+/* Attribute __malloc__ on functions was valid as of gcc 2.96. */\n+#ifndef ATTRIBUTE_MALLOC\n+# if (GCC_VERSION >= 2096)\n+#  define ATTRIBUTE_MALLOC __attribute__ ((__malloc__))\n+# else\n+#  define ATTRIBUTE_MALLOC\n+# endif /* GNUC >= 2.96 */\n+#endif /* ATTRIBUTE_MALLOC */\n+\n /* Attributes on labels were valid as of gcc 2.93. */\n #ifndef ATTRIBUTE_UNUSED_LABEL\n # if (GCC_VERSION >= 2093)"}, {"sha": "9a536a4a19410ef5544b707d278e2fdda3ca320b", "filename": "include/libiberty.h", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d94656872ddd8c58776576c370d6e174ab6662f4/include%2Flibiberty.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d94656872ddd8c58776576c370d6e174ab6662f4/include%2Flibiberty.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Flibiberty.h?ref=d94656872ddd8c58776576c370d6e174ab6662f4", "patch": "@@ -19,7 +19,7 @@ extern \"C\" {\n /* Build an argument vector from a string.  Allocates memory using\n    malloc.  Use freeargv to free the vector.  */\n \n-extern char **buildargv PARAMS ((char *));\n+extern char **buildargv PARAMS ((char *)) ATTRIBUTE_MALLOC;\n \n /* Free a vector returned by buildargv.  */\n \n@@ -28,7 +28,7 @@ extern void freeargv PARAMS ((char **));\n /* Duplicate an argument vector. Allocates memory using malloc.  Use\n    freeargv to free the vector.  */\n \n-extern char **dupargv PARAMS ((char **));\n+extern char **dupargv PARAMS ((char **)) ATTRIBUTE_MALLOC;\n \n \n /* Return the last component of a path name.  Note that we can't use a\n@@ -45,7 +45,7 @@ extern char *basename ();\n /* Concatenate an arbitrary number of strings, up to (char *) NULL.\n    Allocates memory using xmalloc.  */\n \n-extern char *concat PARAMS ((const char *, ...));\n+extern char *concat PARAMS ((const char *, ...)) ATTRIBUTE_MALLOC;\n \n /* Check whether two file descriptors refer to the same file.  */\n \n@@ -62,11 +62,11 @@ extern long get_run_time PARAMS ((void));\n \n /* Choose a temporary directory to use for scratch files.  */\n \n-extern char *choose_temp_base PARAMS ((void));\n+extern char *choose_temp_base PARAMS ((void)) ATTRIBUTE_MALLOC;\n \n /* Return a temporary file name or NULL if unable to create one.  */\n \n-extern char *make_temp_file PARAMS ((const char *));\n+extern char *make_temp_file PARAMS ((const char *)) ATTRIBUTE_MALLOC;\n \n /* Allocate memory filled with spaces.  Allocates using malloc.  */\n \n@@ -117,11 +117,7 @@ extern int xatexit PARAMS ((void (*fn) (void)));\n \n /* Exit, calling all the functions registered with xatexit.  */\n \n-#ifndef __GNUC__\n-extern void xexit PARAMS ((int status));\n-#else\n-void xexit PARAMS ((int status)) __attribute__ ((noreturn));\n-#endif\n+extern void xexit PARAMS ((int status)) ATTRIBUTE_NORETURN;\n \n /* Set the program name used by xmalloc.  */\n \n@@ -137,24 +133,26 @@ extern void xmalloc_set_program_name PARAMS ((const char *));\n /* Get a definition for va_list.  */\n #include <stdarg.h>\n #endif\n-extern PTR xmalloc PARAMS ((size_t));\n+extern PTR xmalloc PARAMS ((size_t)) ATTRIBUTE_MALLOC;\n \n-/* Reallocate memory without fail.  This works like xmalloc.  */\n+/* Reallocate memory without fail.  This works like xmalloc.  Note,\n+   realloc type functions are not suitable for attribute malloc since\n+   they may return the same address across multiple calls. */\n \n extern PTR xrealloc PARAMS ((PTR, size_t));\n \n /* Allocate memory without fail and set it to zero.  This works like\n    xmalloc.  */\n \n-extern PTR xcalloc PARAMS ((size_t, size_t));\n+extern PTR xcalloc PARAMS ((size_t, size_t)) ATTRIBUTE_MALLOC;\n \n /* Copy a string into a memory buffer without fail.  */\n \n-extern char *xstrdup PARAMS ((const char *));\n+extern char *xstrdup PARAMS ((const char *)) ATTRIBUTE_MALLOC;\n \n /* Copy an existing memory buffer to a new memory buffer without fail.  */\n \n-extern PTR xmemdup PARAMS ((const PTR, size_t, size_t));\n+extern PTR xmemdup PARAMS ((const PTR, size_t, size_t)) ATTRIBUTE_MALLOC;\n \n /* hex character manipulation routines */\n "}]}