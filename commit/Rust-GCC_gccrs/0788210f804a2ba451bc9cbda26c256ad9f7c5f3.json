{"sha": "0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDc4ODIxMGY4MDRhMmJhNDUxYmM5Y2JkYTI2YzI1NmFkOWY3YzVmMw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2019-09-23T19:29:55Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2019-09-23T19:29:55Z"}, "message": "pt.c (check_explicit_specialization): Use cp_expr_loc_or_input_loc.\n\n/cp\n2019-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* pt.c (check_explicit_specialization): Use cp_expr_loc_or_input_loc.\n\t(process_partial_specialization): Likewise.\n\t(convert_nontype_argument_function): Likewise.\n\t(invalid_tparm_referent_p): Likewise.\n\t(convert_template_argument): Likewise.\n\t(check_valid_ptrmem_cst_expr): Tidy.\n\n/testsuite\n2019-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* g++.dg/cpp0x/pr68724.C: Check location(s) too.\n\t* g++.dg/cpp0x/variadic38.C: Likewise.\n\t* g++.dg/cpp1z/nontype2.C: Likewise.\n\t* g++.dg/parse/explicit1.C: Likewise.\n\t* g++.dg/template/crash11.C: Likewise.\n\t* g++.dg/template/non-dependent8.C: Likewise.\n\t* g++.dg/template/nontype-array1.C: Likewise.\n\t* g++.dg/template/nontype3.C: Likewise.\n\t* g++.dg/template/nontype8.C: Likewise.\n\t* g++.dg/template/partial5.C: Likewise.\n\t* g++.dg/template/spec33.C: Likewise.\n\t* g++.old-deja/g++.pt/memtemp64.C: Likewise.\n\t* g++.old-deja/g++.pt/spec20.C: Likewise.\n\t* g++.old-deja/g++.pt/spec21.C: Likewise.\n\t* g++.old-deja/g++.robertl/eb103.C: Likewise.\n\nFrom-SVN: r276064", "tree": {"sha": "1332056024df43e40d4606a485f2d6f9d3111fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1332056024df43e40d4606a485f2d6f9d3111fec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/comments", "author": null, "committer": null, "parents": [{"sha": "7926a220d853e7c28576e69f90eab1aff684c5ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7926a220d853e7c28576e69f90eab1aff684c5ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7926a220d853e7c28576e69f90eab1aff684c5ad"}], "stats": {"total": 141, "additions": 93, "deletions": 48}, "files": [{"sha": "5b561e6bdbb74dbb55ea2f3e6732954002b61a0f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -1,3 +1,12 @@\n+2019-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* pt.c (check_explicit_specialization): Use cp_expr_loc_or_input_loc.\n+\t(process_partial_specialization): Likewise.\n+\t(convert_nontype_argument_function): Likewise.\n+\t(invalid_tparm_referent_p): Likewise.\n+\t(convert_template_argument): Likewise.\n+\t(check_valid_ptrmem_cst_expr): Tidy.\n+\n 2019-09-23  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/91809 - bit-field and ellipsis."}, {"sha": "e5d64989b328c350000115ebdba7cac9af8d6100", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 41, "deletions": 30, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -2808,8 +2808,9 @@ check_explicit_specialization (tree declarator,\n \t      /* This case handles bogus declarations like template <>\n \t\t template <class T> void f<int>(); */\n \n-\t      error (\"template-id %qD in declaration of primary template\",\n-\t\t     declarator);\n+\t      error_at (cp_expr_loc_or_input_loc (declarator),\n+\t\t\t\"template-id %qE in declaration of primary template\",\n+\t\t\tdeclarator);\n \t      return decl;\n \t    }\n \t}\n@@ -2867,8 +2868,9 @@ check_explicit_specialization (tree declarator,\n \t     template <class T> void f<int>(); */\n \n \t  if (!uses_template_parms (TREE_OPERAND (declarator, 1)))\n-\t    error (\"template-id %qD in declaration of primary template\",\n-\t\t   declarator);\n+\t    error_at (cp_expr_loc_or_input_loc (declarator),\n+\t\t      \"template-id %qE in declaration of primary template\",\n+\t\t      declarator);\n \t  else if (variable_template_p (TREE_OPERAND (declarator, 0)))\n \t    {\n \t      /* Partial specialization of variable template.  */\n@@ -2877,11 +2879,13 @@ check_explicit_specialization (tree declarator,\n \t      goto ok;\n \t    }\n \t  else if (cxx_dialect < cxx14)\n-\t    error (\"non-type partial specialization %qD \"\n-\t\t   \"is not allowed\", declarator);\n+\t    error_at (cp_expr_loc_or_input_loc (declarator),\n+\t\t      \"non-type partial specialization %qE \"\n+\t\t      \"is not allowed\", declarator);\n \t  else\n-\t    error (\"non-class, non-variable partial specialization %qD \"\n-\t\t   \"is not allowed\", declarator);\n+\t    error_at (cp_expr_loc_or_input_loc (declarator),\n+\t\t      \"non-class, non-variable partial specialization %qE \"\n+\t\t      \"is not allowed\", declarator);\n \t  return decl;\n \tok:;\n \t}\n@@ -4958,8 +4962,9 @@ process_partial_specialization (tree decl)\n             {\n               if ((!packed_args && tpd.arg_uses_template_parms[i])\n                   || (packed_args && uses_template_parms (arg)))\n-                error (\"template argument %qE involves template parameter(s)\",\n-                       arg);\n+\t\terror_at (cp_expr_loc_or_input_loc (arg),\n+\t\t\t  \"template argument %qE involves template \"\n+\t\t\t  \"parameter(s)\", arg);\n               else \n                 {\n                   /* Look at the corresponding template parameter,\n@@ -6258,13 +6263,14 @@ convert_nontype_argument_function (tree type, tree expr,\n     {\n       if (complain & tf_error)\n \t{\n-\t  error (\"%qE is not a valid template argument for type %qT\",\n-\t\t expr, type);\n+\t  location_t loc = cp_expr_loc_or_input_loc (expr);\n+\t  error_at (loc, \"%qE is not a valid template argument for type %qT\",\n+\t\t    expr, type);\n \t  if (TYPE_PTR_P (type))\n-\t    inform (input_location, \"it must be the address of a function \"\n+\t    inform (loc, \"it must be the address of a function \"\n \t\t    \"with external linkage\");\n \t  else\n-\t    inform (input_location, \"it must be the name of a function with \"\n+\t    inform (loc, \"it must be the name of a function with \"\n \t\t    \"external linkage\");\n \t}\n       return NULL_TREE;\n@@ -6275,14 +6281,15 @@ convert_nontype_argument_function (tree type, tree expr,\n     {\n       if (complain & tf_error)\n \t{\n+\t  location_t loc = cp_expr_loc_or_input_loc (expr);\n \t  if (cxx_dialect >= cxx11)\n-\t    error (\"%qE is not a valid template argument for type %qT \"\n-\t\t   \"because %qD has no linkage\",\n-\t\t   expr, type, fn_no_ptr);\n+\t    error_at (loc, \"%qE is not a valid template argument for type \"\n+\t\t      \"%qT because %qD has no linkage\",\n+\t\t      expr, type, fn_no_ptr);\n \t  else\n-\t    error (\"%qE is not a valid template argument for type %qT \"\n-\t\t   \"because %qD does not have external linkage\",\n-\t\t   expr, type, fn_no_ptr);\n+\t    error_at (loc, \"%qE is not a valid template argument for type \"\n+\t\t      \"%qT because %qD does not have external linkage\",\n+\t\t      expr, type, fn_no_ptr);\n \t}\n       return NULL_TREE;\n     }\n@@ -6309,7 +6316,6 @@ static bool\n check_valid_ptrmem_cst_expr (tree type, tree expr,\n \t\t\t     tsubst_flags_t complain)\n {\n-  location_t loc = cp_expr_loc_or_input_loc (expr);\n   tree orig_expr = expr;\n   STRIP_NOPS (expr);\n   if (null_ptr_cst_p (expr))\n@@ -6326,6 +6332,7 @@ check_valid_ptrmem_cst_expr (tree type, tree expr,\n     return true;\n   if (complain & tf_error)\n     {\n+      location_t loc = cp_expr_loc_or_input_loc (orig_expr);\n       error_at (loc, \"%qE is not a valid template argument for type %qT\",\n \t\torig_expr, type);\n       if (TREE_CODE (expr) != PTRMEM_CST)\n@@ -6623,24 +6630,27 @@ invalid_tparm_referent_p (tree type, tree expr, tsubst_flags_t complain)\n \tif (!VAR_P (decl))\n \t  {\n \t    if (complain & tf_error)\n-\t      error (\"%qE is not a valid template argument of type %qT \"\n-\t\t     \"because %qE is not a variable\", expr, type, decl);\n+\t      error_at (cp_expr_loc_or_input_loc (expr),\n+\t\t\t\"%qE is not a valid template argument of type %qT \"\n+\t\t\t\"because %qE is not a variable\", expr, type, decl);\n \t    return true;\n \t  }\n \telse if (cxx_dialect < cxx11 && !DECL_EXTERNAL_LINKAGE_P (decl))\n \t  {\n \t    if (complain & tf_error)\n-\t      error (\"%qE is not a valid template argument of type %qT \"\n-\t\t     \"in C++98 because %qD does not have external linkage\",\n-\t\t     expr, type, decl);\n+\t      error_at (cp_expr_loc_or_input_loc (expr),\n+\t\t\t\"%qE is not a valid template argument of type %qT \"\n+\t\t\t\"in C++98 because %qD does not have external linkage\",\n+\t\t\texpr, type, decl);\n \t    return true;\n \t  }\n \telse if ((cxx_dialect >= cxx11 && cxx_dialect < cxx17)\n \t\t && decl_linkage (decl) == lk_none)\n \t  {\n \t    if (complain & tf_error)\n-\t      error (\"%qE is not a valid template argument of type %qT \"\n-\t\t     \"because %qD has no linkage\", expr, type, decl);\n+\t      error_at (cp_expr_loc_or_input_loc (expr),\n+\t\t\t\"%qE is not a valid template argument of type %qT \"\n+\t\t\t\"because %qD has no linkage\", expr, type, decl);\n \t    return true;\n \t  }\n \t/* C++17: For a non-type template-parameter of reference or pointer\n@@ -8129,8 +8139,9 @@ convert_template_argument (tree parm,\n       if (val == NULL_TREE)\n \tval = error_mark_node;\n       else if (val == error_mark_node && (complain & tf_error))\n-\terror (\"could not convert template argument %qE from %qT to %qT\",\n-\t       orig_arg, TREE_TYPE (orig_arg), t);\n+\terror_at (cp_expr_loc_or_input_loc (orig_arg),\n+\t\t  \"could not convert template argument %qE from %qT to %qT\",\n+\t\t  orig_arg, TREE_TYPE (orig_arg), t);\n \n       if (INDIRECT_REF_P (val))\n         {"}, {"sha": "6d84a01e541aab3bad081df1aeb3016ac7d11ce5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -1,3 +1,21 @@\n+2019-09-23  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* g++.dg/cpp0x/pr68724.C: Check location(s) too.\n+\t* g++.dg/cpp0x/variadic38.C: Likewise.\n+\t* g++.dg/cpp1z/nontype2.C: Likewise.\n+\t* g++.dg/parse/explicit1.C: Likewise.\n+\t* g++.dg/template/crash11.C: Likewise.\n+\t* g++.dg/template/non-dependent8.C: Likewise.\n+\t* g++.dg/template/nontype-array1.C: Likewise.\n+\t* g++.dg/template/nontype3.C: Likewise.\n+\t* g++.dg/template/nontype8.C: Likewise.\n+\t* g++.dg/template/partial5.C: Likewise.\n+\t* g++.dg/template/spec33.C: Likewise.\n+\t* g++.old-deja/g++.pt/memtemp64.C: Likewise.\n+\t* g++.old-deja/g++.pt/spec20.C: Likewise.\n+\t* g++.old-deja/g++.pt/spec21.C: Likewise.\n+\t* g++.old-deja/g++.robertl/eb103.C: Likewise.\n+\n 2019-09-23  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* lib/target-supports.exp"}, {"sha": "4e99d53d5a944da514b9f72f0d052ccd1516d202", "filename": "gcc/testsuite/g++.dg/cpp0x/pr68724.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr68724.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr68724.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr68724.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -9,7 +9,7 @@ struct integral_constant\n integral_constant<bool, true> inst;\n \n template <typename _Tp>\n-struct integral_constant<bool, __is_enum(_Tp)> // { dg-error \"\" }\n+struct integral_constant<bool, __is_enum(_Tp)> // { dg-error \"32:template argument\" }\n {\n };\n "}, {"sha": "b569404cdf2a191fae063d0f438f0c1f72836d6f", "filename": "gcc/testsuite/g++.dg/cpp0x/variadic38.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic38.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic38.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fvariadic38.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -3,4 +3,4 @@ template<int... Values>\n struct int_vec {};\n \n template<int... Values>\n-struct int_vec<0, (Values+1)...> {}; // { dg-error \"involves template parameter\" }\n+struct int_vec<0, (Values+1)...> {}; // { dg-error \"26:template argument\" }"}, {"sha": "75dc7600379f9209036f3b2fc8b0af26f9338d10", "filename": "gcc/testsuite/g++.dg/cpp1z/nontype2.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype2.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -8,7 +8,7 @@ template<int* p> class X { };\n template<const char *s> class Y {};\n template<const std::type_info &> class Z {};\n \n-X<&s.m> x7;\t\t\t// { dg-error \"\" }\n+X<&s.m> x7;\t\t\t// { dg-error \"3:.& s.S::m. is not a valid template argument\" }\n Y<\"foo\"> y1;\t\t\t// { dg-error \"string literal\" }\n Z<typeid(p)> z1;\t\t// { dg-error \"\" }\n "}, {"sha": "23c82649dedceec5d7f5e1c4ae58418df29df49c", "filename": "gcc/testsuite/g++.dg/parse/explicit1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fexplicit1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fexplicit1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fparse%2Fexplicit1.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -7,5 +7,5 @@\n \n struct foo { \n         template<typename T> void bar (T &t) {}\n-        template<> void bar<double>(double &t) {} // { dg-error \"non-namespace|template|function\" }\n+        template<> void bar<double>(double &t) {} // { dg-error \"25:template-id .bar<double>. in declaration|explicit specialization\" }\n };"}, {"sha": "229aec9ffe2ec6128cf22e97d260295d0fab2470", "filename": "gcc/testsuite/g++.dg/template/crash11.C", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fcrash11.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -6,4 +6,6 @@\n // substitution.\n \n template <class T, class U> void foo(T, U) {}\n-template <class T> void foo<T,void>(T, void) {} // { dg-error \"incomplete|invalid|partial\" }\n+template <class T> void foo<T,void>(T, void) {} // { dg-error \"40:invalid use of type .void.\" }\n+// { dg-error \"25:non-class, non-variable partial specialization\" \"\" { target c++14 } .-1 }\n+// { dg-error \"25:non-type partial specialization\" \"\" { target c++11_down } .-2 }"}, {"sha": "f99691bdc3a1b85121940911c29fc22b9c2137c4", "filename": "gcc/testsuite/g++.dg/template/non-dependent8.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnon-dependent8.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -17,5 +17,6 @@ struct X\n template <class T>\n struct Foo\n {\n-  X<&S::i> x;\t// { dg-error \"convert|no type\" }\n+  X<&S::i> x;\t// { dg-error \"5:could not convert\" \"\" { target c++17 } }\n+  // { dg-error \"could not convert\" \"\" { target c++14_down } .-1 }\n };"}, {"sha": "2a227b948b3faa8dde7e01c3484c493f52b85d4b", "filename": "gcc/testsuite/g++.dg/template/nontype-array1.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype-array1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype-array1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype-array1.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -26,14 +26,14 @@ int main()\n   Message<s2> m2;  // OK for clang since C++14, for gcc since C++17\n   Message<s3> m3;  // OK for clang/gcc since C++11\n \n-  A<f2()> a1; // { dg-error \"\" \"\" { target c++14_down } }\n+  A<f2()> a1; // { dg-error \"7:.f2\\\\(\\\\). is not a valid template argument\" \"\" { target c++14_down } }\n \n   static char const s4[] = \"hi\";\n   static constexpr char const s5[] = \"hi\";  // OK since C++11\n   Message<s4> m4;  // { dg-error \"no linkage\" \"\" { target c++14_down } }\n   Message<s5> m5;  // { dg-error \"no linkage\" \"\" { target c++14_down } }\n   Message<f()> m6; // { dg-error \"\" \"\" { target c++14_down } }\n-  Message<B{}> m7; // { dg-error \"\" \"\" { target c++14_down } }\n+  Message<B{}> m7; // { dg-error \"11:could not convert template argument\" \"\" { target c++14_down } }\n \n \n   char const s8[] = \"hi\";"}, {"sha": "0f5accf5b191c25d2aa745a7ccf969cf4a7dea4e", "filename": "gcc/testsuite/g++.dg/template/nontype3.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype3.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -16,7 +16,7 @@ template <int *PI>\n void dep6(bar<PI+1> *); // { dg-error \"\" \"integral or enumeration\" }\n \n template <int I>\n-void dep7(bar<I+1> *);\t\t// { dg-error \"\" }\n+void dep7(bar<I+1> *);\t\t// { dg-error \"16:could not convert template argument\" }\n \n template <int *PI>\n void dep8(foo< *PI > *); // { dg-error \"\" \"integral or enumeration\" }"}, {"sha": "b4fbeaed2d8228c79db593d61505260b88b2cd15", "filename": "gcc/testsuite/g++.dg/template/nontype8.C", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fnontype8.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -6,8 +6,10 @@ template<int* p> class X { };\n int a[10];\n struct S { int m; static int s; } s;\n \n-X<&a[2]> x3;                    // { dg-error \"\" } address of array element\n-X<&s.m> x4;                     // { dg-error \"\" } address of non-static member\n+X<&a[2]> x3;                    // { dg-error \"3:.& a\\\\\\[2\\\\\\]. is not a valid template argument\" \"\" { target c++17 } }\n+// { dg-error \"\" \"\" { target c++14_down } .-1 }\n+X<&s.m> x4;                     // { dg-error \"3:.& s.S::m. is not a valid template argument\" \"\" { target c++17 } }\n+// { dg-error \"\" \"\" { target c++14_down } .-1 }\n X<&s.s> x5;                     // { dg-error \"\" \"\" { target { ! c++17 } } } &S::s must be used\n X<&S::s> x6;                    // OK: address of static member\n "}, {"sha": "a56229770f441486b649430bcdbce633859d0dfd", "filename": "gcc/testsuite/g++.dg/template/partial5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpartial5.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -21,4 +21,4 @@ template<typename T, T V>\n struct Z { };\n \n template<typename T>\n-struct Z<T, (T)0> { }; // { dg-error \"involves template parameter\" }\n+struct Z<T, (T)0> { }; // { dg-error \"13:template argument\" }"}, {"sha": "2cdf85bbbb531ee1f19d30375ff1a9f390dcf24a", "filename": "gcc/testsuite/g++.dg/template/spec33.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec33.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec33.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec33.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -3,5 +3,5 @@\n struct A\n {\n     template<int> static void foo   () {}\n-    template<>    static void foo<0>() {}  // { dg-error \"explicit|template\" }\n+    template<>    static void foo<0>() {}  // { dg-error \"31:template-id .foo<0>. in declaration|explicit specialization\" }\n }; "}, {"sha": "47b4ded2c246c01468af74e492fd1d034425dbdc", "filename": "gcc/testsuite/g++.old-deja/g++.pt/memtemp64.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp64.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp64.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fmemtemp64.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -10,7 +10,8 @@ template <class C>\n struct S2\n {\n   template <class T>\n-  void f<S1<T> >(T) {}  // { dg-error \"\" } bad specialization.\n+  void f<S1<T> >(T) {}  // { dg-error \"8:non-class, non-variable partial specialization\" \"\" { target c++14 } }\n+  // { dg-error \"8:non-type partial specialization\" \"\" { target c++11_down } .-1 }\n };\n \n "}, {"sha": "610e6c73371d55840a3e621ddedd76f94db5e6de", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec20.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec20.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -8,7 +8,7 @@\n template <class T> \n struct S {\n   template <class U> void f(U);\n-  template <> void f<int>(int); // { dg-error \"\" } invalid specialization\n+  template <> void f<int>(int); // { dg-error \"20:template-id .f<int>. in declaration|explicit specialization\" }\n \n   template <class V> struct I {};      // { dg-error \"template\" }\n   template <class V> struct I<V*> {};  // { dg-error \"template\" }"}, {"sha": "cf89d6b325a913aab01a2573f0b23761c8f7095e", "filename": "gcc/testsuite/g++.old-deja/g++.pt/spec21.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec21.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec21.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.pt%2Fspec21.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -4,8 +4,8 @@ template <class T> struct S {};\n template <class T = int> struct S<T*> {}; // { dg-error \"\" } default argument\n \n template <int I, int J> struct A {};\n-template <int I> struct A<I+5, I*2> {}; // { dg-error \"\" } argument involves parameter\n-\n+template <int I> struct A<I+5, I*2> {}; // { dg-error \"28:template argument\" }\n+// { dg-error \"33:template argument\" \"\" { target *-*-* } .-1 }\n template <class T, T t> struct C {};\n template <class T> struct C<T, 1>;  // { dg-error \"\" } type depends on parameter\n int i;"}, {"sha": "de181ab1ac26a8ec46e609a3d19febd594dec02c", "filename": "gcc/testsuite/g++.old-deja/g++.robertl/eb103.C", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb103.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0788210f804a2ba451bc9cbda26c256ad9f7c5f3/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb103.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.robertl%2Feb103.C?ref=0788210f804a2ba451bc9cbda26c256ad9f7c5f3", "patch": "@@ -4,7 +4,8 @@\n template <int nlimb, int i>\n inline unsigned f (unsigned* ptr);\n template <int nlimb>\n-inline unsigned f<nlimb,nlimb> (unsigned* ptr) // { dg-error \"partial specialization\" }\n+inline unsigned f<nlimb,nlimb> (unsigned* ptr)  // { dg-error \"17:non-class, non-variable partial specialization\" \"\" { target c++14 } }\n+// { dg-error \"17:non-type partial specialization\" \"\" { target c++11_down } .-1 }\n {\n   return 1;\n }"}]}