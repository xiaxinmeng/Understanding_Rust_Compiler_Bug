{"sha": "a36b270612ffd38426df89d886be6d5ebcbd0502", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM2YjI3MDYxMmZmZDM4NDI2ZGY4OWQ4ODZiZTZkNWViY2JkMDUwMg==", "commit": {"author": {"name": "Richard Sandiford", "email": "r.sandiford@uk.ibm.com", "date": "2012-05-16T09:01:54Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2012-05-16T09:01:54Z"}, "message": "ira.c (pseudo_move_insn): Delete.\n\ngcc/\n\t* ira.c (pseudo_move_insn): Delete.\n\t(find_moveable_pseudos): Don't set it.\n\t(move_unallocated_pseudos): Use DF_REG_DEF_CHAIN to find\n\tthe definitions of the original pseudo.  Delete all of them.\n\nFrom-SVN: r187582", "tree": {"sha": "3f86694221ce315b6d76ca6d9067ac87d5c3b7f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f86694221ce315b6d76ca6d9067ac87d5c3b7f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a36b270612ffd38426df89d886be6d5ebcbd0502", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36b270612ffd38426df89d886be6d5ebcbd0502", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a36b270612ffd38426df89d886be6d5ebcbd0502", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a36b270612ffd38426df89d886be6d5ebcbd0502/comments", "author": null, "committer": null, "parents": [{"sha": "a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a7c6c6d64df7e8a427ecb7b492daf0e7aed66e72"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "24e5a7a251994ae08dafdc5645f15a864125693f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36b270612ffd38426df89d886be6d5ebcbd0502/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36b270612ffd38426df89d886be6d5ebcbd0502/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a36b270612ffd38426df89d886be6d5ebcbd0502", "patch": "@@ -1,3 +1,10 @@\n+2012-05-16  Richard Sandiford  <r.sandiford@uk.ibm.com>\n+\n+\t* ira.c (pseudo_move_insn): Delete.\n+\t(find_moveable_pseudos): Don't set it.\n+\t(move_unallocated_pseudos): Use DF_REG_DEF_CHAIN to find\n+\tthe definitions of the original pseudo.  Delete all of them.\n+\n 2012-05-16  Olivier Hainque  <hainque@adacore.com>\n \n \t* config/rs6000/rs6000-opts.h (enum processor_type): Add"}, {"sha": "1809e0da83ac77cdb35966dd85b79b41b5863e71", "filename": "gcc/ira.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a36b270612ffd38426df89d886be6d5ebcbd0502/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a36b270612ffd38426df89d886be6d5ebcbd0502/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=a36b270612ffd38426df89d886be6d5ebcbd0502", "patch": "@@ -3621,9 +3621,6 @@ int first_moveable_pseudo, last_moveable_pseudo;\n    first_moveable_pseudo.  */\n /* The original home register.  */\n static VEC (rtx, heap) *pseudo_replaced_reg;\n-/* The move instruction we added to move the value to its original home\n-   register.  */\n-static VEC (rtx, heap) *pseudo_move_insn;\n \n /* Look for instances where we have an instruction that is known to increase\n    register pressure, and whose result is not used immediately.  If it is\n@@ -3667,9 +3664,7 @@ find_moveable_pseudos (void)\n   bitmap_initialize (&interesting, 0);\n \n   first_moveable_pseudo = max_regs;\n-  VEC_free (rtx, heap, pseudo_move_insn);\n   VEC_free (rtx, heap, pseudo_replaced_reg);\n-  VEC_safe_grow (rtx, heap, pseudo_move_insn, max_regs);\n   VEC_safe_grow (rtx, heap, pseudo_replaced_reg, max_regs);\n \n   df_analyze ();\n@@ -3965,10 +3960,8 @@ find_moveable_pseudos (void)\n \t  if (validate_change (def_insn, DF_REF_LOC (def), newreg, 0))\n \t    {\n \t      unsigned nregno = REGNO (newreg);\n-\t      rtx move = emit_insn_before (gen_move_insn (def_reg, newreg),\n-\t\t\t\t\t   use_insn);\n+\t      emit_insn_before (gen_move_insn (def_reg, newreg), use_insn);\n \t      nregno -= max_regs;\n-\t      VEC_replace (rtx, pseudo_move_insn, nregno, move);\n \t      VEC_replace (rtx, pseudo_replaced_reg, nregno, def_reg);\n \t    }\n \t}\n@@ -4011,27 +4004,32 @@ move_unallocated_pseudos (void)\n   for (i = first_moveable_pseudo; i < last_moveable_pseudo; i++)\n     if (reg_renumber[i] < 0)\n       {\n-\tdf_ref def = DF_REG_DEF_CHAIN (i);\n \tint idx = i - first_moveable_pseudo;\n \trtx other_reg = VEC_index (rtx, pseudo_replaced_reg, idx);\n-\trtx def_insn = DF_REF_INSN (def);\n-\trtx move_insn = VEC_index (rtx, pseudo_move_insn, idx);\n-\trtx set;\n+\trtx def_insn = DF_REF_INSN (DF_REG_DEF_CHAIN (i));\n+\t/* The use must follow all definitions of OTHER_REG, so we can\n+\t   insert the new definition immediately after any of them.  */\n+\tdf_ref other_def = DF_REG_DEF_CHAIN (REGNO (other_reg));\n+\trtx move_insn = DF_REF_INSN (other_def);\n \trtx newinsn = emit_insn_after (PATTERN (def_insn), move_insn);\n+\trtx set;\n \tint success;\n \n \tif (dump_file)\n \t  fprintf (dump_file, \"moving def of %d (insn %d now) \",\n \t\t   REGNO (other_reg), INSN_UID (def_insn));\n \n+\tdelete_insn (move_insn);\n+\twhile ((other_def = DF_REG_DEF_CHAIN (REGNO (other_reg))))\n+\t  delete_insn (DF_REF_INSN (other_def));\n+\tdelete_insn (def_insn);\n+\n \tset = single_set (newinsn);\n \tsuccess = validate_change (newinsn, &SET_DEST (set), other_reg, 0);\n \tgcc_assert (success);\n \tif (dump_file)\n \t  fprintf (dump_file, \" %d) rather than keep unallocated replacement %d\\n\",\n \t\t   INSN_UID (newinsn), i);\n-\tdelete_insn (move_insn);\n-\tdelete_insn (def_insn);\n \tSET_REG_N_REFS (i, 0);\n       }\n }"}]}