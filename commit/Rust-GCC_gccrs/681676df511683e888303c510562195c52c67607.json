{"sha": "681676df511683e888303c510562195c52c67607", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgxNjc2ZGY1MTE2ODNlODg4MzAzYzUxMDU2MjE5NWM1MmM2NzYwNw==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2012-03-20T14:11:05Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2012-03-20T14:11:05Z"}, "message": "predicates.md (zero_operand, [...]): New predicates.\n\n* arm/predicates.md (zero_operand, reg_or_zero_operand): New predicates.\n* arm/neon.md (neon_vceq<mode>, neon_vcge<mode>): Use\nreg_or_zero_operand predicate.\n(neon_vcle<mode>, neon_vclt<mode>): Use zero_operand predicate.\n\nFrom-SVN: r185573", "tree": {"sha": "4c93d29c94307b6e4e3429115aef44303c37b4ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c93d29c94307b6e4e3429115aef44303c37b4ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/681676df511683e888303c510562195c52c67607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681676df511683e888303c510562195c52c67607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/681676df511683e888303c510562195c52c67607", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/681676df511683e888303c510562195c52c67607/comments", "author": null, "committer": null, "parents": [{"sha": "7dc3263c6918509d45d7b51be7a55e18b67f2734", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7dc3263c6918509d45d7b51be7a55e18b67f2734", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7dc3263c6918509d45d7b51be7a55e18b67f2734"}], "stats": {"total": 26, "additions": 21, "deletions": 5}, "files": [{"sha": "0269a511aa00ec26b60542dc5934aa75375173f8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681676df511683e888303c510562195c52c67607/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681676df511683e888303c510562195c52c67607/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=681676df511683e888303c510562195c52c67607", "patch": "@@ -1,3 +1,10 @@\n+2012-03-20  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* arm/predicates.md (zero_operand, reg_or_zero_operand): New predicates.\n+\t* arm/neon.md (neon_vceq<mode>, neon_vcge<mode>): Use\n+\treg_or_zero_operand predicate.\n+\t(neon_vcle<mode>, neon_vclt<mode>): Use zero_operand predicate.\n+\n 2012-03-20  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/i386/i386.c (ix86_decompose_address) <case ZERO_EXTEND>:"}, {"sha": "44dee53b08e6371d77946f69a37275f46a578234", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681676df511683e888303c510562195c52c67607/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681676df511683e888303c510562195c52c67607/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=681676df511683e888303c510562195c52c67607", "patch": "@@ -2114,7 +2114,7 @@\n   [(set (match_operand:<V_cmp_result> 0 \"s_register_operand\" \"=w,w\")\n         (unspec:<V_cmp_result>\n \t  [(match_operand:VDQW 1 \"s_register_operand\" \"w,w\")\n-\t   (match_operand:VDQW 2 \"nonmemory_operand\" \"w,Dz\")\n+\t   (match_operand:VDQW 2 \"reg_or_zero_operand\" \"w,Dz\")\n \t   (match_operand:SI 3 \"immediate_operand\" \"i,i\")]\n           UNSPEC_VCEQ))]\n   \"TARGET_NEON\"\n@@ -2133,7 +2133,7 @@\n   [(set (match_operand:<V_cmp_result> 0 \"s_register_operand\" \"=w,w\")\n         (unspec:<V_cmp_result>\n \t  [(match_operand:VDQW 1 \"s_register_operand\" \"w,w\")\n-\t   (match_operand:VDQW 2 \"nonmemory_operand\" \"w,Dz\")\n+\t   (match_operand:VDQW 2 \"reg_or_zero_operand\" \"w,Dz\")\n \t   (match_operand:SI 3 \"immediate_operand\" \"i,i\")]\n           UNSPEC_VCGE))]\n   \"TARGET_NEON\"\n@@ -2164,7 +2164,7 @@\n   [(set (match_operand:<V_cmp_result> 0 \"s_register_operand\" \"=w,w\")\n         (unspec:<V_cmp_result>\n \t  [(match_operand:VDQW 1 \"s_register_operand\" \"w,w\")\n-\t   (match_operand:VDQW 2 \"nonmemory_operand\" \"w,Dz\")\n+\t   (match_operand:VDQW 2 \"reg_or_zero_operand\" \"w,Dz\")\n            (match_operand:SI 3 \"immediate_operand\" \"i,i\")]\n           UNSPEC_VCGT))]\n   \"TARGET_NEON\"\n@@ -2198,7 +2198,7 @@\n   [(set (match_operand:<V_cmp_result> 0 \"s_register_operand\" \"=w\")\n         (unspec:<V_cmp_result>\n \t  [(match_operand:VDQW 1 \"s_register_operand\" \"w\")\n-\t   (match_operand:VDQW 2 \"nonmemory_operand\" \"Dz\")\n+\t   (match_operand:VDQW 2 \"zero_operand\" \"Dz\")\n \t   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n           UNSPEC_VCLE))]\n   \"TARGET_NEON\"\n@@ -2215,7 +2215,7 @@\n   [(set (match_operand:<V_cmp_result> 0 \"s_register_operand\" \"=w\")\n         (unspec:<V_cmp_result>\n \t  [(match_operand:VDQW 1 \"s_register_operand\" \"w\")\n-\t   (match_operand:VDQW 2 \"nonmemory_operand\" \"Dz\")\n+\t   (match_operand:VDQW 2 \"zero_operand\" \"Dz\")\n \t   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n           UNSPEC_VCLT))]\n   \"TARGET_NEON\""}, {"sha": "9171d7377fe1db35df58ca9b8b2b77970484a8b2", "filename": "gcc/config/arm/predicates.md", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/681676df511683e888303c510562195c52c67607/gcc%2Fconfig%2Farm%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/681676df511683e888303c510562195c52c67607/gcc%2Fconfig%2Farm%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpredicates.md?ref=681676df511683e888303c510562195c52c67607", "patch": "@@ -89,6 +89,15 @@\n \t\t  && REGNO_REG_CLASS (REGNO (op)) == VFP_REGS)));\n })\n \n+(define_predicate \"zero_operand\"\n+  (and (match_code \"const_int,const_double,const_vector\")\n+       (match_test \"op == CONST0_RTX (mode)\")))\n+\n+;; Match a register, or zero in the appropriate mode.\n+(define_predicate \"reg_or_zero_operand\"\n+  (ior (match_operand 0 \"s_register_operand\")\n+       (match_operand 0 \"zero_operand\")))\n+\n (define_special_predicate \"subreg_lowpart_operator\"\n   (and (match_code \"subreg\")\n        (match_test \"subreg_lowpart_p (op)\")))"}]}