{"sha": "f3582e541c61d1ae2f859d1c83ba6559fd5eccfb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM1ODJlNTQxYzYxZDFhZTJmODU5ZDFjODNiYTY1NTlmZDVlY2NmYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2014-11-03T12:59:47Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2014-11-03T12:59:47Z"}, "message": "match.pd: Add two abs patterns.\n\n2014-11-03  Richard Biener  <rguenther@suse.de>\n\n\t* match.pd: Add two abs patterns.  Announce tree_expr_nonnegative_p.\n\tAlso drop bogus FLOAT_EXPR and FIX_TRUNC_EXPR.\n\t* fold-const.c (fold_unary_loc): Remove them here.\n\t(tree_unary_nonnegative_warnv_p): Use CASE_CONVERT.\n\t* gimple-fold.c (fold_gimple_assign): Remove now obsolete\n\tGIMPLE_UNARY_RHS case.\n\t(gimple_fold_stmt_to_constant_1): Likewise.\n\t(replace_stmt_with_simplification): Fix inverted comparison.\n\nFrom-SVN: r217039", "tree": {"sha": "887020564176f5e6ba895804546b1120a2686c82", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/887020564176f5e6ba895804546b1120a2686c82"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9929321af792cefeb26ff1e59287f94fc0112b2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9929321af792cefeb26ff1e59287f94fc0112b2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9929321af792cefeb26ff1e59287f94fc0112b2c"}], "stats": {"total": 61, "additions": 23, "deletions": 38}, "files": [{"sha": "9025278f1cfff45c430a81029bf6044b41295b2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3582e541c61d1ae2f859d1c83ba6559fd5eccfb", "patch": "@@ -1,3 +1,14 @@\n+2014-11-03  Richard Biener  <rguenther@suse.de>\n+\n+\t* match.pd: Add two abs patterns.  Announce tree_expr_nonnegative_p.\n+\tAlso drop bogus FLOAT_EXPR and FIX_TRUNC_EXPR.\n+\t* fold-const.c (fold_unary_loc): Remove them here.\n+\t(tree_unary_nonnegative_warnv_p): Use CASE_CONVERT.\n+\t* gimple-fold.c (fold_gimple_assign): Remove now obsolete\n+\tGIMPLE_UNARY_RHS case.\n+\t(gimple_fold_stmt_to_constant_1): Likewise.\n+\t(replace_stmt_with_simplification): Fix inverted comparison.\n+\n 2014-11-03  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/60770"}, {"sha": "efcefa70c1fd86592ce8a1ebf7b85d76e9aa487d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f3582e541c61d1ae2f859d1c83ba6559fd5eccfb", "patch": "@@ -7958,8 +7958,6 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n     case ABS_EXPR:\n       if (TREE_CODE (arg0) == INTEGER_CST || TREE_CODE (arg0) == REAL_CST)\n \treturn fold_abs_const (arg0, type);\n-      else if (TREE_CODE (arg0) == NEGATE_EXPR)\n-\treturn fold_build1_loc (loc, ABS_EXPR, type, TREE_OPERAND (arg0, 0));\n       /* Convert fabs((double)float) into (double)fabsf(float).  */\n       else if (TREE_CODE (arg0) == NOP_EXPR\n \t       && TREE_CODE (type) == REAL_TYPE)\n@@ -7974,8 +7972,6 @@ fold_unary_loc (location_t loc, enum tree_code code, tree type, tree op0)\n       /* ABS_EXPR<ABS_EXPR<x>> = ABS_EXPR<x> even if flag_wrapv is on.  */\n       else if (TREE_CODE (arg0) == ABS_EXPR)\n \treturn arg0;\n-      else if (tree_expr_nonnegative_p (arg0))\n-\treturn arg0;\n \n       /* Strip sign ops from argument.  */\n       if (TREE_CODE (type) == REAL_TYPE)"}, {"sha": "547f9a75c36b982568dee6e42ed73d85b0049746", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 2, "deletions": 32, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=f3582e541c61d1ae2f859d1c83ba6559fd5eccfb", "patch": "@@ -417,27 +417,6 @@ fold_gimple_assign (gimple_stmt_iterator *si)\n       break;\n \n     case GIMPLE_UNARY_RHS:\n-      {\n-\ttree rhs = gimple_assign_rhs1 (stmt);\n-\n-\tresult = fold_unary_loc (loc, subcode, gimple_expr_type (stmt), rhs);\n-\tif (result)\n-\t  {\n-\t    /* If the operation was a conversion do _not_ mark a\n-\t       resulting constant with TREE_OVERFLOW if the original\n-\t       constant was not.  These conversions have implementation\n-\t       defined behavior and retaining the TREE_OVERFLOW flag\n-\t       here would confuse later passes such as VRP.  */\n-\t    if (CONVERT_EXPR_CODE_P (subcode)\n-\t\t&& TREE_CODE (result) == INTEGER_CST\n-\t\t&& TREE_CODE (rhs) == INTEGER_CST)\n-\t      TREE_OVERFLOW (result) = TREE_OVERFLOW (rhs);\n-\n-\t    STRIP_USELESS_TYPE_CONVERSION (result);\n-\t    if (valid_gimple_rhs_p (result))\n-\t      return result;\n-\t  }\n-      }\n       break;\n \n     case GIMPLE_BINARY_RHS:\n@@ -2876,7 +2855,7 @@ replace_stmt_with_simplification (gimple_stmt_iterator *gsi,\n \t   && rcode.is_tree_code ())\n     {\n       if (!inplace\n-\t  || gimple_num_ops (stmt) <= get_gimple_rhs_num_ops (rcode))\n+\t  || gimple_num_ops (stmt) > get_gimple_rhs_num_ops (rcode))\n \t{\n \t  maybe_build_generic_op (rcode,\n \t\t\t\t  TREE_TYPE (gimple_assign_lhs (stmt)),\n@@ -4523,16 +4502,7 @@ gimple_fold_stmt_to_constant_1 (gimple stmt, tree (*valueize) (tree))\n             }\n \n           case GIMPLE_UNARY_RHS:\n-            {\n-              /* Handle unary operators that can appear in GIMPLE form.\n-                 Note that we know the single operand must be a constant,\n-                 so this should almost always return a simplified RHS.  */\n-              tree op0 = (*valueize) (gimple_assign_rhs1 (stmt));\n-\n-              return\n-\t\tfold_unary_ignore_overflow_loc (loc, subcode,\n-\t\t\t\t\t\tgimple_expr_type (stmt), op0);\n-            }\n+\t    return NULL_TREE;\n \n           case GIMPLE_BINARY_RHS:\n             {"}, {"sha": "826ceb477f031caa514088327bafa3c5c3a9ccc1", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3582e541c61d1ae2f859d1c83ba6559fd5eccfb/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=f3582e541c61d1ae2f859d1c83ba6559fd5eccfb", "patch": "@@ -27,7 +27,8 @@ along with GCC; see the file COPYING3.  If not see\n (define_predicates\n    integer_onep integer_zerop integer_all_onesp\n    real_zerop real_onep\n-   CONSTANT_CLASS_P)\n+   CONSTANT_CLASS_P\n+   tree_expr_nonnegative_p)\n \n \n /* Simplifications of operations with one constant operand and\n@@ -104,11 +105,18 @@ along with GCC; see the file COPYING3.  If not see\n   (bitop @0 @0)\n   (non_lvalue @0)))\n \n+(simplify\n+ (abs (negate @0))\n+ (abs @0))\n+(simplify\n+ (abs tree_expr_nonnegative_p@0)\n+ @0)\n+\n \n /* Simplifications of conversions.  */\n \n /* Basic strip-useless-type-conversions / strip_nops.  */\n-(for cvt (convert view_convert)\n+(for cvt (convert view_convert float fix_trunc)\n  (simplify\n   (cvt @0)\n   (if ((GIMPLE && useless_type_conversion_p (type, TREE_TYPE (@0)))"}]}