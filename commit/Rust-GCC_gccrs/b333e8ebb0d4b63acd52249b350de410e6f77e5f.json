{"sha": "b333e8ebb0d4b63acd52249b350de410e6f77e5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjMzM2U4ZWJiMGQ0YjYzYWNkNTIyNDliMzUwZGU0MTBlNmY3N2U1Zg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-02-03T18:59:05Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-02-03T18:59:05Z"}, "message": "PR libstdc++/60936 reduce coupling between objects in libstdc++.a\n\nMove explicit instantiation definitions for string I/O functions into\ntheir own files so that iostream and locale definitions are not needed\nfor uses of strings without I/O. Move functions for throwing C++11\nexceptions into the individual files defining the exception types, so\nthat using any of the functions from functexcept.cc doesn't pull in\nlarge pieces of the C++11 library. Finally, avoid using __int_to_char in\nsnprintf_lite.cc to avoid pulling in locale-inst.cc for one function.\n\n\tPR libstdc++/60936\n\t* src/c++11/Makefile.am: Add new files.\n\t* src/c++11/Makefile.in: Regenerate.\n\t* src/c++11/cow-string-inst.cc [!_GLIBCXX_USE_CXX11_ABI]\n\t(operator<<, operator>>, getline): Move explicit instantiations to ...\n\t* src/c++11/cow-string-io-inst.cc: ... new file.\n\t* src/c++11/cow-wstring-inst.cc [!_GLIBCXX_USE_CXX11_ABI]\n\t(operator<<, operator>>, getline): Move explicit instantiations to ...\n\t* src/c++11/cow-wstring-io-inst.cc: ... new file.\n\t* src/c++11/functexcept.cc (__throw_ios_failure, __throw_system_error)\n\t(__throw_future_error, __throw_bad_function_call):\n\t(__throw_regex_error): Move functions for C++11 exceptions to the\n\tfiles that define the exception types.\n\t* src/c++11/functional.cc (__throw_bad_function_call): Move here.\n\t* src/c++11/future.cc (__throw_future_error): Likewise.\n\t* src/c++11/ios.cc (__throw_ios_failure): Likewise.\n\t* src/c++11/regex.cc (__throw_regex_error): Likewise.\n\t* src/c++11/snprintf_lite.cc (__concat_size_t): Print decimal\n\trepresentation directly instead of calling __int_to_char.\n\t* src/c++11/sso_string.cc (__sso_string): New file for definition\n\tof __sso_string type.\n\t* src/c++11/string-io-inst.cc [_GLIBCXX_USE_CXX11_ABI]: New file for\n\texplicit instantiations of narrow string I/O functions.\n\t* src/c++11/system_error.cc (__throw_system_error): Move here.\n\t(__sso_string): Move to new file.\n\t* src/c++11/wstring-io-inst.cc [_GLIBCXX_USE_CXX11_ABI]: New file for\n\texplicit instantiations of wide string I/O functions.\n\t* src/c++98/misc-inst.cc [_GLIBCXX_USE_CXX11_ABI] (operator<<)\n\t(operator>>, getline): Remove explicit instantiations from here.\n\nFrom-SVN: r245162", "tree": {"sha": "a04fd957ad83f6c28b7889bbfda9bd14486ac2be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a04fd957ad83f6c28b7889bbfda9bd14486ac2be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b333e8ebb0d4b63acd52249b350de410e6f77e5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b333e8ebb0d4b63acd52249b350de410e6f77e5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b333e8ebb0d4b63acd52249b350de410e6f77e5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b333e8ebb0d4b63acd52249b350de410e6f77e5f/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5d9703a2caeb411411e02a102756493587073a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5d9703a2caeb411411e02a102756493587073a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5d9703a2caeb411411e02a102756493587073a6"}], "stats": {"total": 632, "additions": 438, "deletions": 194}, "files": [{"sha": "045fff24e6d97fbc3ace427880daabc6019d0028", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -1,3 +1,35 @@\n+2017-02-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/60936\n+\t* src/c++11/Makefile.am: Add new files.\n+\t* src/c++11/Makefile.in: Regenerate.\n+\t* src/c++11/cow-string-inst.cc [!_GLIBCXX_USE_CXX11_ABI]\n+\t(operator<<, operator>>, getline): Move explicit instantiations to ...\n+\t* src/c++11/cow-string-io-inst.cc: ... new file.\n+\t* src/c++11/cow-wstring-inst.cc [!_GLIBCXX_USE_CXX11_ABI]\n+\t(operator<<, operator>>, getline): Move explicit instantiations to ...\n+\t* src/c++11/cow-wstring-io-inst.cc: ... new file.\n+\t* src/c++11/functexcept.cc (__throw_ios_failure, __throw_system_error)\n+\t(__throw_future_error, __throw_bad_function_call):\n+\t(__throw_regex_error): Move functions for C++11 exceptions to the\n+\tfiles that define the exception types.\n+\t* src/c++11/functional.cc (__throw_bad_function_call): Move here.\n+\t* src/c++11/future.cc (__throw_future_error): Likewise.\n+\t* src/c++11/ios.cc (__throw_ios_failure): Likewise.\n+\t* src/c++11/regex.cc (__throw_regex_error): Likewise.\n+\t* src/c++11/snprintf_lite.cc (__concat_size_t): Print decimal\n+\trepresentation directly instead of calling __int_to_char.\n+\t* src/c++11/sso_string.cc (__sso_string): New file for definition\n+\tof __sso_string type.\n+\t* src/c++11/string-io-inst.cc [_GLIBCXX_USE_CXX11_ABI]: New file for\n+\texplicit instantiations of narrow string I/O functions.\n+\t* src/c++11/system_error.cc (__throw_system_error): Move here.\n+\t(__sso_string): Move to new file.\n+\t* src/c++11/wstring-io-inst.cc [_GLIBCXX_USE_CXX11_ABI]: New file for\n+\texplicit instantiations of wide string I/O functions.\n+\t* src/c++98/misc-inst.cc [_GLIBCXX_USE_CXX11_ABI] (operator<<)\n+\t(operator>>, getline): Remove explicit instantiations from here.\n+\n 2017-02-02  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* config/abi/post/x86_64-linux-gnu/x32/baseline_symbols.txt: Updated."}, {"sha": "cf73d4d5c4cfdf6ebe0b8baf5faade066ec940f4", "filename": "libstdc++-v3/src/c++11/Makefile.am", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -82,9 +82,12 @@ extra_string_inst_sources = \\\n \tcow-fstream-inst.cc \\\n \tcow-sstream-inst.cc \\\n \tcow-string-inst.cc \\\n+\tcow-string-io-inst.cc \\\n \tcow-wstring-inst.cc \\\n+\tcow-wstring-io-inst.cc \\\n \tcxx11-locale-inst.cc \\\n-\tcxx11-wlocale-inst.cc\n+\tcxx11-wlocale-inst.cc \\\n+\tsso_string.cc\n else\n extra_string_inst_sources =\n endif\n@@ -103,8 +106,10 @@ inst_sources = \\\n \tsstream-inst.cc \\\n \tstreambuf-inst.cc \\\n \tstring-inst.cc \\\n+\tstring-io-inst.cc \\\n \twlocale-inst.cc \\\n-\twstring-inst.cc\n+\twstring-inst.cc \\\n+\twstring-io-inst.cc\n else\n # XTEMPLATE_FLAGS =\n inst_sources ="}, {"sha": "295d915b4367264b047297c3a1b20d05a72ba87c", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -98,15 +98,20 @@ am__objects_3 = chrono.lo codecvt.lo condition_variable.lo \\\n \tsystem_error.lo thread.lo $(am__objects_1) $(am__objects_2)\n @ENABLE_DUAL_ABI_TRUE@am__objects_4 = cow-fstream-inst.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-sstream-inst.lo cow-string-inst.lo \\\n-@ENABLE_DUAL_ABI_TRUE@\tcow-wstring-inst.lo cxx11-locale-inst.lo \\\n-@ENABLE_DUAL_ABI_TRUE@\tcxx11-wlocale-inst.lo\n+@ENABLE_DUAL_ABI_TRUE@\tcow-string-io-inst.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-wstring-inst.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-wstring-io-inst.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tcxx11-locale-inst.lo \\\n+@ENABLE_DUAL_ABI_TRUE@\tcxx11-wlocale-inst.lo sso_string.lo\n @ENABLE_EXTERN_TEMPLATE_TRUE@am__objects_5 = $(am__objects_4) \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\text11-inst.lo fstream-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tios-inst.lo iostream-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tistream-inst.lo locale-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tostream-inst.lo sstream-inst.lo \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tstreambuf-inst.lo string-inst.lo \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\twlocale-inst.lo wstring-inst.lo\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tstring-io-inst.lo wlocale-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-inst.lo \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-io-inst.lo\n am_libc__11convenience_la_OBJECTS = $(am__objects_3) $(am__objects_5)\n libc__11convenience_la_OBJECTS = $(am_libc__11convenience_la_OBJECTS)\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n@@ -398,9 +403,12 @@ sources = \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-fstream-inst.cc \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-sstream-inst.cc \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-string-inst.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-string-io-inst.cc \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-wstring-inst.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tcow-wstring-io-inst.cc \\\n @ENABLE_DUAL_ABI_TRUE@\tcxx11-locale-inst.cc \\\n-@ENABLE_DUAL_ABI_TRUE@\tcxx11-wlocale-inst.cc\n+@ENABLE_DUAL_ABI_TRUE@\tcxx11-wlocale-inst.cc \\\n+@ENABLE_DUAL_ABI_TRUE@\tsso_string.cc\n \n # XTEMPLATE_FLAGS =\n @ENABLE_EXTERN_TEMPLATE_FALSE@inst_sources = \n@@ -418,8 +426,10 @@ sources = \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tsstream-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tstreambuf-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\tstring-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\tstring-io-inst.cc \\\n @ENABLE_EXTERN_TEMPLATE_TRUE@\twlocale-inst.cc \\\n-@ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-inst.cc\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-inst.cc \\\n+@ENABLE_EXTERN_TEMPLATE_TRUE@\twstring-io-inst.cc\n \n libc__11convenience_la_SOURCES = $(sources)  $(inst_sources)\n "}, {"sha": "6d1362f1349dd5194f89a1ad699d44df3322129a", "filename": "libstdc++-v3/src/c++11/cow-string-inst.cc", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-inst.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -29,35 +29,10 @@\n #define _GLIBCXX_USE_CXX11_ABI 0\n #include \"string-inst.cc\"\n \n-#include <istream>\n-#include <ostream>\n-\n #if ! _GLIBCXX_USE_DUAL_ABI\n # error This file should not be compiled for this configuration.\n #endif\n \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  // These came from c++98/misc-inst.cc, repeat them for COW string\n-  // string related to iostreams.\n-  template\n-    basic_istream<char>&\n-    operator>>(basic_istream<char>&, string&);\n-  template\n-    basic_ostream<char>&\n-    operator<<(basic_ostream<char>&, const string&);\n-  template\n-    basic_istream<char>&\n-    getline(basic_istream<char>&, string&, char);\n-  template\n-    basic_istream<char>&\n-    getline(basic_istream<char>&, string&);\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n-\n #ifdef  _GLIBCXX_USE_C99_STDINT_TR1\n #include <random>\n #if defined __i386__ || defined __x86_64__"}, {"sha": "caafd2eec836225526565cd968934f44325fb936", "filename": "libstdc++-v3/src/c++11/cow-string-io-inst.cc", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-io-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-io-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-string-io-inst.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -0,0 +1,59 @@\n+// Reference-counted COW string instantiations for I/O -*- C++ -*-\n+\n+// Copyright (C) 2014-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 21  Strings library\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+#include <istream>\n+#include <ostream>\n+\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // The equivalent SSO string instantiations are in c++98/misc-inst.cc,\n+  // repeat them for COW string\n+\n+  // string related to iostreams.\n+  template\n+    basic_istream<char>&\n+    operator>>(basic_istream<char>&, string&);\n+  template\n+    basic_ostream<char>&\n+    operator<<(basic_ostream<char>&, const string&);\n+  template\n+    basic_istream<char>&\n+    getline(basic_istream<char>&, string&, char);\n+  template\n+    basic_istream<char>&\n+    getline(basic_istream<char>&, string&);\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "36864787e8a28b46e7aae80b466b57168ad3c141", "filename": "libstdc++-v3/src/c++11/cow-wstring-inst.cc", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-wstring-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-wstring-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-wstring-inst.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -33,32 +33,8 @@\n #define C wchar_t\n #include \"string-inst.cc\"\n \n-#include <ostream>\n-#include <istream>\n-\n #if ! _GLIBCXX_USE_DUAL_ABI\n # error This file should not be compiled for this configuration.\n #endif\n \n-namespace std _GLIBCXX_VISIBILITY(default)\n-{\n-_GLIBCXX_BEGIN_NAMESPACE_VERSION\n-\n-  // XXX these came from c++98/misc-inst.cc, repeat them for COW string\n-  // string related to iostreams\n-  template\n-    basic_istream<wchar_t>&\n-    operator>>(basic_istream<wchar_t>&, wstring&);\n-  template\n-    basic_ostream<wchar_t>&\n-    operator<<(basic_ostream<wchar_t>&, const wstring&);\n-  template\n-    basic_istream<wchar_t>&\n-    getline(basic_istream<wchar_t>&, wstring&, wchar_t);\n-  template\n-    basic_istream<wchar_t>&\n-    getline(basic_istream<wchar_t>&, wstring&);\n-\n-_GLIBCXX_END_NAMESPACE_VERSION\n-} // namespace\n #endif"}, {"sha": "b174d20ad8624829e27c6b2838cca2f27b5e91a7", "filename": "libstdc++-v3/src/c++11/cow-wstring-io-inst.cc", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-wstring-io-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-wstring-io-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcow-wstring-io-inst.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -0,0 +1,63 @@\n+// Reference-counted COW wide string instantiations for I/O -*- C++ -*-\n+\n+// Copyright (C) 2014-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882: 21  Strings library\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 0\n+#include <bits/c++config.h>\n+\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+#include <ostream>\n+#include <istream>\n+\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // The equivalent SSO wstring instantiations are in c++98/misc-inst.cc,\n+  // repeat them for COW wstring\n+\n+  // string related to iostreams\n+  template\n+    basic_istream<wchar_t>&\n+    operator>>(basic_istream<wchar_t>&, wstring&);\n+  template\n+    basic_ostream<wchar_t>&\n+    operator<<(basic_ostream<wchar_t>&, const wstring&);\n+  template\n+    basic_istream<wchar_t>&\n+    getline(basic_istream<wchar_t>&, wstring&, wchar_t);\n+  template\n+    basic_istream<wchar_t>&\n+    getline(basic_istream<wchar_t>&, wstring&);\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace\n+#endif"}, {"sha": "d2c154c8cb965b42a60dc22f5d1428cfd83d5f79", "filename": "libstdc++-v3/src/c++11/functexcept.cc", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctexcept.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -20,21 +20,12 @@\n // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n // <http://www.gnu.org/licenses/>.\n \n-// Determines the version of ios_base::failure thrown by __throw_ios_failure.\n-// If !_GLIBCXX_USE_DUAL_ABI this will get undefined automatically.\n-#define _GLIBCXX_USE_CXX11_ABI 1\n-\n #include <bits/functexcept.h>\n #include <cstdlib>\n #include <exception>\n #include <stdexcept>\n #include <new>\n #include <typeinfo>\n-#include <ios>\n-#include <system_error>\n-#include <future>\n-#include <functional>\n-#include <bits/regex_error.h>\n #include <stdarg.h>\n \n #ifdef _GLIBCXX_USE_NLS\n@@ -122,27 +113,5 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   __throw_underflow_error(const char* __s __attribute__((unused)))\n   { _GLIBCXX_THROW_OR_ABORT(underflow_error(_(__s))); }\n \n-  void\n-  __throw_ios_failure(const char* __s __attribute__((unused)))\n-  { _GLIBCXX_THROW_OR_ABORT(ios_base::failure(_(__s))); }\n-\n-  void\n-  __throw_system_error(int __i __attribute__((unused)))\n-  { _GLIBCXX_THROW_OR_ABORT(system_error(error_code(__i,\n-\t\t\t\t\t\t    generic_category()))); }\n-\n-  void\n-  __throw_future_error(int __i __attribute__((unused)))\n-  { _GLIBCXX_THROW_OR_ABORT(future_error(make_error_code(future_errc(__i)))); }\n-\n-  void\n-  __throw_bad_function_call()\n-  { _GLIBCXX_THROW_OR_ABORT(bad_function_call()); }\n-\n-  void\n-  __throw_regex_error(regex_constants::error_type __ecode\n-\t\t      __attribute__((unused)))\n-  { _GLIBCXX_THROW_OR_ABORT(regex_error(__ecode)); }\n-\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "8ac87b9fb20e677a743bad4218a9c551c47c0cbb", "filename": "libstdc++-v3/src/c++11/functional.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctional.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctional.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffunctional.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -23,11 +23,16 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <functional>\n+#include <bits/functexcept.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  void\n+  __throw_bad_function_call()\n+  { _GLIBCXX_THROW_OR_ABORT(bad_function_call()); }\n+\n   bad_function_call::~bad_function_call() noexcept = default;\n \n   const char*"}, {"sha": "d25ea4a59dfeacb46009f1328a0c3a100695a2fe", "filename": "libstdc++-v3/src/c++11/future.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Ffuture.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -23,6 +23,7 @@\n // <http://www.gnu.org/licenses/>.\n \n #include <future>\n+#include <bits/functexcept.h>\n \n namespace\n {\n@@ -70,6 +71,10 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  void\n+  __throw_future_error(int __i __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(future_error(make_error_code(future_errc(__i)))); }\n+\n   const error_category& future_category() noexcept\n   { return __future_category_instance(); }\n "}, {"sha": "9061989f806b517cb347cd31300ce67d73353ad0", "filename": "libstdc++-v3/src/c++11/ios.cc", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -26,13 +26,29 @@\n // ISO C++ 14882: 27.4  Iostreams base classes\n //\n \n+// Determines the version of ios_base::failure thrown by __throw_ios_failure.\n+// If !_GLIBCXX_USE_DUAL_ABI this will get undefined automatically.\n+#define _GLIBCXX_USE_CXX11_ABI 1\n+\n #include <ios>\n #include <limits>\n+#include <bits/functexcept.h>\n+\n+#ifdef _GLIBCXX_USE_NLS\n+# include <libintl.h>\n+# define _(msgid)   gettext (msgid)\n+#else\n+# define _(msgid)   (msgid)\n+#endif\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  void\n+  __throw_ios_failure(const char* __s __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(ios_base::failure(_(__s))); }\n+\n   // Definitions for static const members of ios_base.\n   const ios_base::fmtflags ios_base::boolalpha;\n   const ios_base::fmtflags ios_base::dec;"}, {"sha": "cd2e4893121dd27947e2114d16293ffa53eb2613", "filename": "libstdc++-v3/src/c++11/regex.cc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fregex.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fregex.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fregex.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -24,11 +24,17 @@\n \n #include <stdexcept>\n #include <bits/regex_error.h>\n+#include <bits/functexcept.h>\n \n namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  void\n+  __throw_regex_error(regex_constants::error_type __ecode\n+\t\t      __attribute__((unused)))\n+  { _GLIBCXX_THROW_OR_ABORT(regex_error(__ecode)); }\n+\n   regex_error::regex_error(regex_constants::error_type __ecode)\n   : std::runtime_error(\"regex_error\"), _M_code(__ecode)\n   { }"}, {"sha": "6144ecf34147ab58c5ab413eea10e87f0ecd995e", "filename": "libstdc++-v3/src/c++11/snprintf_lite.cc", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsnprintf_lite.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsnprintf_lite.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsnprintf_lite.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -71,19 +71,17 @@ namespace __gnu_cxx {\n   // Returns number of characters appended, or -1 if BUFSIZE is too small.\n   int __concat_size_t(char *__buf, size_t __bufsize, size_t __val)\n   {\n-    // __int_to_char is explicitly instantiated and available only for\n-    // some, but not all, types. See locale-inst.cc.\n-#ifdef _GLIBCXX_USE_LONG_LONG\n-    unsigned long long __val2 = __val;\n-#else\n-    unsigned long __val2 = __val;\n-#endif\n     // Long enough for decimal representation.\n-    int __ilen = 3 * sizeof(__val2);\n+    int __ilen = 3 * sizeof(__val);\n     char *__cs = static_cast<char*>(__builtin_alloca(__ilen));\n-    size_t __len = std::__int_to_char(__cs + __ilen, __val2,\n-\t\t\t\t      std::__num_base::_S_atoms_out,\n-\t\t\t\t      std::ios_base::dec, true);\n+    char* __out = __cs + __ilen;\n+    do\n+      {\n+\t*--__out = \"0123456789\"[__val % 10];\n+\t__val /= 10;\n+      }\n+    while (__val != 0);\n+    size_t __len = __out - __cs;\n     if (__bufsize < __len)\n       return -1;\n "}, {"sha": "a59db1aac3f55dad5b61c9dfe6ab50fc5fa06a9d", "filename": "libstdc++-v3/src/c++11/sso_string.cc", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsso_string.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsso_string.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsso_string.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -0,0 +1,107 @@\n+// Helper for accessing __cxx11::string from the ABI -*- C++ -*-\n+\n+// Copyright (C) 2014-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#define _GLIBCXX_USE_CXX11_ABI 1\n+#define __sso_string __sso_stringxxx\n+#include <string>\n+#include <stdexcept>\n+#undef __sso_string\n+\n+#if ! _GLIBCXX_USE_DUAL_ABI\n+# error This file should not be compiled for this configuration.\n+#endif\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wabi-tag\"\n+  // Redefine __sso_string so that we can define and export its members\n+  // in terms of the SSO std::string.\n+  struct __sso_string\n+  {\n+    struct __str\n+    {\n+      const char* _M_p;\n+      size_t _M_string_length;\n+      char _M_local_buf[16];\n+    };\n+\n+    union {\n+      __str _M_s;\n+      char _M_bytes[sizeof(_M_s)];\n+      std::string _M_str;\n+    };\n+\n+    __sso_string();\n+    __sso_string(const std::string& s);\n+    __sso_string(const char*, size_t n);\n+    __sso_string(const __sso_string&) noexcept;\n+    __sso_string& operator=(const __sso_string&) noexcept;\n+    ~__sso_string();\n+    __sso_string(__sso_string&&) noexcept;\n+    __sso_string& operator=(__sso_string&&) noexcept;\n+  };\n+#pragma GCC diagnostic pop\n+\n+  __sso_string::__sso_string() : _M_str() { }\n+\n+#if _GLIBCXX_USE_CXX11_ABI\n+  static_assert(sizeof(__sso_string) == sizeof(std::string),\n+                \"sizeof(std::string) has changed\");\n+  static_assert(alignof(__sso_string) == alignof(std::string),\n+                \"alignof(std::string) has changed\");\n+\n+  // This constructor is defined in src/c++11/cow-stdexcept.cc for COW strings\n+  __sso_string::__sso_string(const std::string& s) : _M_str(s) { }\n+#endif\n+\n+  __sso_string::__sso_string(const char* s, size_t n) : _M_str(s, n) { }\n+\n+  __sso_string::__sso_string(const __sso_string& s) noexcept\n+  : _M_str(s._M_str) { }\n+\n+  __sso_string&\n+  __sso_string::operator=(const __sso_string& s) noexcept\n+  {\n+    _M_str = s._M_str;\n+    return *this;\n+  }\n+\n+  __sso_string::~__sso_string() { _M_str.~basic_string(); }\n+\n+  __sso_string::__sso_string(__sso_string&& s) noexcept\n+  : _M_str(std::move(s._M_str)) { }\n+\n+  __sso_string&\n+  __sso_string::operator=(__sso_string&& s) noexcept\n+  {\n+    _M_str = std::move(s._M_str);\n+    return *this;\n+  }\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "7c063d46a6dc702c7ecba28719366bd3df11b0f5", "filename": "libstdc++-v3/src/c++11/string-io-inst.cc", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-io-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-io-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fstring-io-inst.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -0,0 +1,53 @@\n+// SSO string instantiations for I/O -*- C++ -*-\n+\n+// Copyright (C) 1997-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882:\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 1\n+#include <string>\n+#include <istream>\n+#include <ostream>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // string related to iostreams\n+  template\n+    basic_istream<char>&\n+    operator>>(basic_istream<char>&, string&);\n+  template\n+    basic_ostream<char>&\n+    operator<<(basic_ostream<char>&, const string&);\n+  template\n+    basic_istream<char>&\n+    getline(basic_istream<char>&, string&, char);\n+  template\n+    basic_istream<char>&\n+    getline(basic_istream<char>&, string&);\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "61dbc3fb5bb907108bff10151daafb8fed1159a2", "filename": "libstdc++-v3/src/c++11/system_error.cc", "status": "modified", "additions": 6, "deletions": 68, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fsystem_error.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -75,6 +75,12 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n+  void\n+  __throw_system_error(int __i __attribute__((unused)))\n+  {\n+    _GLIBCXX_THROW_OR_ABORT(system_error(error_code(__i, generic_category())));\n+  }\n+\n   error_category::~error_category() noexcept = default;\n \n   const error_category&\n@@ -112,73 +118,5 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   }\n #endif\n \n-#if _GLIBCXX_USE_DUAL_ABI\n-#pragma GCC diagnostic push\n-#pragma GCC diagnostic ignored \"-Wabi-tag\"\n-  // Redefine __sso_string so that we can define and export its members\n-  // in terms of the SSO std::string.\n-  struct __sso_string\n-  {\n-    struct __str\n-    {\n-      const char* _M_p;\n-      size_t _M_string_length;\n-      char _M_local_buf[16];\n-    };\n-\n-    union {\n-      __str _M_s;\n-      char _M_bytes[sizeof(_M_s)];\n-      std::string _M_str;\n-    };\n-\n-    __sso_string();\n-    __sso_string(const std::string& s);\n-    __sso_string(const char*, size_t n);\n-    __sso_string(const __sso_string&) noexcept;\n-    __sso_string& operator=(const __sso_string&) noexcept;\n-    ~__sso_string();\n-    __sso_string(__sso_string&&) noexcept;\n-    __sso_string& operator=(__sso_string&&) noexcept;\n-  };\n-#pragma GCC diagnostic pop\n-\n-  __sso_string::__sso_string() : _M_str() { }\n-\n-#if _GLIBCXX_USE_CXX11_ABI\n-  static_assert(sizeof(__sso_string) == sizeof(std::string),\n-                \"sizeof(std::string) has changed\");\n-  static_assert(alignof(__sso_string) == alignof(std::string),\n-                \"alignof(std::string) has changed\");\n-\n-  // This constructor is defined in src/c++11/cow-stdexcept.cc for COW strings\n-  __sso_string::__sso_string(const std::string& s) : _M_str(s) { }\n-#endif\n-\n-  __sso_string::__sso_string(const char* s, size_t n) : _M_str(s, n) { }\n-\n-  __sso_string::__sso_string(const __sso_string& s) noexcept\n-  : _M_str(s._M_str) { }\n-\n-  __sso_string&\n-  __sso_string::operator=(const __sso_string& s) noexcept\n-  {\n-    _M_str = s._M_str;\n-    return *this;\n-  }\n-\n-  __sso_string::~__sso_string() { _M_str.~basic_string(); }\n-\n-  __sso_string::__sso_string(__sso_string&& s) noexcept\n-  : _M_str(std::move(s._M_str)) { }\n-\n-  __sso_string&\n-  __sso_string::operator=(__sso_string&& s) noexcept\n-  {\n-    _M_str = std::move(s._M_str);\n-    return *this;\n-  }\n-#endif // _GLIBCXX_USE_DUAL_ABI\n-\n _GLIBCXX_END_NAMESPACE_VERSION\n } // namespace"}, {"sha": "0fae8210d9a611c3620084e54e65ae9294b63c19", "filename": "libstdc++-v3/src/c++11/wstring-io-inst.cc", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fwstring-io-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fwstring-io-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fwstring-io-inst.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -0,0 +1,55 @@\n+// SSO string instantiations for I/O -*- C++ -*-\n+\n+// Copyright (C) 1997-2017 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+//\n+// ISO C++ 14882:\n+//\n+\n+#define _GLIBCXX_USE_CXX11_ABI 1\n+#include <string>\n+#include <istream>\n+#include <ostream>\n+\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+  // string related to iostreams\n+#ifdef _GLIBCXX_USE_WCHAR_T\n+  template\n+    basic_istream<wchar_t>&\n+    operator>>(basic_istream<wchar_t>&, wstring&);\n+  template\n+    basic_ostream<wchar_t>&\n+    operator<<(basic_ostream<wchar_t>&, const wstring&);\n+  template\n+    basic_istream<wchar_t>&\n+    getline(basic_istream<wchar_t>&, wstring&, wchar_t);\n+  template\n+    basic_istream<wchar_t>&\n+    getline(basic_istream<wchar_t>&, wstring&);\n+#endif\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+} // namespace"}, {"sha": "a0c5912c9357c5424d6e81eb98528a47cb58678c", "filename": "libstdc++-v3/src/c++98/misc-inst.cc", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b333e8ebb0d4b63acd52249b350de410e6f77e5f/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Fmisc-inst.cc?ref=b333e8ebb0d4b63acd52249b350de410e6f77e5f", "patch": "@@ -36,34 +36,6 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  // string related to iostreams\n-  template\n-    basic_istream<char>&\n-    operator>>(basic_istream<char>&, string&);\n-  template\n-    basic_ostream<char>&\n-    operator<<(basic_ostream<char>&, const string&);\n-  template\n-    basic_istream<char>&\n-    getline(basic_istream<char>&, string&, char);\n-  template\n-    basic_istream<char>&\n-    getline(basic_istream<char>&, string&);\n-#ifdef _GLIBCXX_USE_WCHAR_T\n-  template\n-    basic_istream<wchar_t>&\n-    operator>>(basic_istream<wchar_t>&, wstring&);\n-  template\n-    basic_ostream<wchar_t>&\n-    operator<<(basic_ostream<wchar_t>&, const wstring&);\n-  template\n-    basic_istream<wchar_t>&\n-    getline(basic_istream<wchar_t>&, wstring&, wchar_t);\n-  template\n-    basic_istream<wchar_t>&\n-    getline(basic_istream<wchar_t>&, wstring&);\n-#endif\n-\n #if _GLIBCXX_USE_CXX11_ABI\n   // C++98 members that are not instantiated by src/c++11/string-inst.cc\n   // because they changed in C++11 to take const_iterator parameters."}]}