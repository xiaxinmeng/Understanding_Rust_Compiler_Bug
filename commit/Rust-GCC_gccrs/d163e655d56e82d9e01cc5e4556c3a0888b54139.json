{"sha": "d163e655d56e82d9e01cc5e4556c3a0888b54139", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDE2M2U2NTVkNTZlODJkOWUwMWNjNWU0NTU2YzNhMDg4OGI1NDEzOQ==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-09-20T19:30:31Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-09-20T19:30:31Z"}, "message": "arm.h (CLASS_LIKELY_SPILLED_P): Remove.\n\n\t* config/arm/arm.h (CLASS_LIKELY_SPILLED_P): Remove.\n\t* config/arm/arm.c (TARGET_CLASS_LIKELY_SPILLED_P): Define.\n\t(arm_class_likely_spilled_p): New function.\n\nFrom-SVN: r164450", "tree": {"sha": "2c741df96f9251e763e0fe1521001f1f895e2ebe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2c741df96f9251e763e0fe1521001f1f895e2ebe"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d163e655d56e82d9e01cc5e4556c3a0888b54139", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d163e655d56e82d9e01cc5e4556c3a0888b54139", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d163e655d56e82d9e01cc5e4556c3a0888b54139", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d163e655d56e82d9e01cc5e4556c3a0888b54139/comments", "author": null, "committer": null, "parents": [{"sha": "382eb33c14e9680c8907968f937ed89bc501bfe8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/382eb33c14e9680c8907968f937ed89bc501bfe8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/382eb33c14e9680c8907968f937ed89bc501bfe8"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "4e6b97cf33dcc683dea4bba613958baf13caa96d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d163e655d56e82d9e01cc5e4556c3a0888b54139/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d163e655d56e82d9e01cc5e4556c3a0888b54139/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d163e655d56e82d9e01cc5e4556c3a0888b54139", "patch": "@@ -1,3 +1,9 @@\n+2010-09-20  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/arm/arm.h (CLASS_LIKELY_SPILLED_P): Remove.\n+\t* config/arm/arm.c (TARGET_CLASS_LIKELY_SPILLED_P): Define.\n+\t(arm_class_likely_spilled_p): New function.\n+\n 2010-09-20  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_expand_ashl_const): Rewrite using"}, {"sha": "0701b487cac1dd7698166635eda6b4736ffee415", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d163e655d56e82d9e01cc5e4556c3a0888b54139/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d163e655d56e82d9e01cc5e4556c3a0888b54139/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=d163e655d56e82d9e01cc5e4556c3a0888b54139", "patch": "@@ -239,6 +239,7 @@ static rtx arm_pic_static_addr (rtx orig, rtx reg);\n static bool cortex_a9_sched_adjust_cost (rtx, rtx, rtx, int *);\n static bool xscale_sched_adjust_cost (rtx, rtx, rtx, int *);\n static unsigned int arm_units_per_simd_word (enum machine_mode);\n+static bool arm_class_likely_spilled_p (reg_class_t);\n \n \f\n /* Table of machine attributes.  */\n@@ -545,6 +546,9 @@ static const struct attribute_spec arm_attribute_table[] =\n #undef TARGET_CAN_ELIMINATE\n #define TARGET_CAN_ELIMINATE arm_can_eliminate\n \n+#undef TARGET_CLASS_LIKELY_SPILLED_P\n+#define TARGET_CLASS_LIKELY_SPILLED_P arm_class_likely_spilled_p\n+\n struct gcc_target targetm = TARGET_INITIALIZER;\n \f\n /* Obstack for minipool constant handling.  */\n@@ -21952,6 +21956,22 @@ arm_units_per_simd_word (enum machine_mode mode ATTRIBUTE_UNUSED)\n \t  ? (TARGET_NEON_VECTORIZE_QUAD ? 16 : 8) : UNITS_PER_WORD);\n }\n \n+/* Implement TARGET_CLASS_LIKELY_SPILLED_P.\n+ \n+   We need to define this for LO_REGS on thumb.  Otherwise we can end up\n+   using r0-r4 for function arguments, r7 for the stack frame and don't\n+   have enough left over to do doubleword arithmetic.  */\n+\n+static bool\n+arm_class_likely_spilled_p (reg_class_t rclass)\n+{\n+  if ((TARGET_THUMB && rclass == LO_REGS)\n+      || rclass  == CC_REG)\n+    return true;\n+\n+  return false;\n+}\n+\n /* Implements target hook small_register_classes_for_mode_p.  */\n bool\n arm_small_register_classes_for_mode_p (enum machine_mode mode ATTRIBUTE_UNUSED)"}, {"sha": "2252a2512b1afdcdbaa77ee28ef8e9b8904cdf81", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d163e655d56e82d9e01cc5e4556c3a0888b54139/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d163e655d56e82d9e01cc5e4556c3a0888b54139/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=d163e655d56e82d9e01cc5e4556c3a0888b54139", "patch": "@@ -1284,13 +1284,6 @@ enum reg_class\n      || reg_classes_intersect_p (VFP_REGS, (CLASS))\t\\\n    : 0)\n \n-/* We need to define this for LO_REGS on thumb.  Otherwise we can end up\n-   using r0-r4 for function arguments, r7 for the stack frame and don't\n-   have enough left over to do doubleword arithmetic.  */\n-#define CLASS_LIKELY_SPILLED_P(CLASS)\t\\\n-    ((TARGET_THUMB && (CLASS) == LO_REGS)\t\\\n-     || (CLASS) == CC_REG)\n-\n /* The class value for index registers, and the one for base regs.  */\n #define INDEX_REG_CLASS  (TARGET_THUMB1 ? LO_REGS : GENERAL_REGS)\n #define BASE_REG_CLASS   (TARGET_THUMB1 ? LO_REGS : CORE_REGS)"}]}