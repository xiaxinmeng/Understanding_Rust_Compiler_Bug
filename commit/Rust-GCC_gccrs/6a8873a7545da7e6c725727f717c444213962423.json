{"sha": "6a8873a7545da7e6c725727f717c444213962423", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmE4ODczYTc1NDVkYTdlNmM3MjU3MjdmNzE3YzQ0NDIxMzk2MjQyMw==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2003-03-30T21:14:32Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2003-03-30T21:14:32Z"}, "message": "String.java: Miscellaneous minor formatting changes to match Classpath more closely.\n\n\t* java/lang/String.java: Miscellaneous minor formatting changes\n\tto match Classpath more closely.\n\nFrom-SVN: r65055", "tree": {"sha": "e3966c8728c6dd2d018f0c3bcd018541dd2ca266", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e3966c8728c6dd2d018f0c3bcd018541dd2ca266"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6a8873a7545da7e6c725727f717c444213962423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8873a7545da7e6c725727f717c444213962423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6a8873a7545da7e6c725727f717c444213962423", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6a8873a7545da7e6c725727f717c444213962423/comments", "author": null, "committer": null, "parents": [{"sha": "e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1233a7dc0b2ab2e7d9cb5f0138a9de8f65125e5"}], "stats": {"total": 149, "additions": 77, "deletions": 72}, "files": [{"sha": "e74022bbbde4f5d8642485843d4b420f634b0138", "filename": "libjava/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8873a7545da7e6c725727f717c444213962423/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8873a7545da7e6c725727f717c444213962423/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=6a8873a7545da7e6c725727f717c444213962423", "patch": "@@ -1,3 +1,8 @@\n+2003-03-30  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/String.java: Miscellaneous minor formatting changes\n+\tto match Classpath more closely.\n+\n 2003-03-29  Eric Blake  <ebb9@email.byu.edu>\n \t    Tom Tromey  <tromey@redhat.com>\n "}, {"sha": "5011c357a71a61ed225519b029571551659b4ebb", "filename": "libjava/java/lang/String.java", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6a8873a7545da7e6c725727f717c444213962423/libjava%2Fjava%2Flang%2FString.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6a8873a7545da7e6c725727f717c444213962423/libjava%2Fjava%2Flang%2FString.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FString.java?ref=6a8873a7545da7e6c725727f717c444213962423", "patch": "@@ -159,7 +159,7 @@ public String()\n    * @param str String to copy\n    * @throws NullPointerException if value is null\n    */\n-  public String (String str)\n+  public String(String str)\n   {\n     data = str.data;\n     boffset = str.boffset;\n@@ -174,7 +174,7 @@ public String (String str)\n    * @param data char array to copy\n    * @throws NullPointerException if data is null\n    */\n-  public String (char[] data)\n+  public String(char[] data)\n   {\n     init(data, 0, data.length, false);\n   }\n@@ -192,7 +192,7 @@ public String (char[] data)\n    *         || offset + count > data.length)\n    *         (while unspecified, this is a StringIndexOutOfBoundsException)\n    */\n-  public String (char[] data, int offset, int count)\n+  public String(char[] data, int offset, int count)\n   {\n     init(data, offset, count, false);\n   }\n@@ -221,7 +221,7 @@ public String (char[] data, int offset, int count)\n    * @deprecated use {@link #String(byte[], int, int, String)} to perform\n    *             correct encoding\n    */\n-  public String (byte[] ascii, int hibyte, int offset, int count)\n+  public String(byte[] ascii, int hibyte, int offset, int count)\n   {\n     init(ascii, hibyte, offset, count);\n   }\n@@ -246,7 +246,7 @@ public String (byte[] ascii, int hibyte, int offset, int count)\n    * @deprecated use {@link #String(byte[], String)} to perform\n    *             correct encoding\n    */\n-  public String (byte[] ascii, int hibyte)\n+  public String(byte[] ascii, int hibyte)\n   {\n     init(ascii, hibyte, 0, ascii.length);\n   }\n@@ -272,10 +272,10 @@ public String (byte[] ascii, int hibyte)\n    * @throws Error if the decoding fails\n    * @since 1.1\n    */\n-  public String (byte[] byteArray, int offset, int count, String enc)\n+  public String(byte[] data, int offset, int count, String encoding)\n     throws UnsupportedEncodingException\n   {\n-    init (byteArray, offset, count, enc);\n+    init (data, offset, count, encoding);\n   }\n \n   /**\n@@ -295,10 +295,10 @@ public String (byte[] byteArray, int offset, int count, String enc)\n    * @see #String(byte[], int, int, String)\n    * @since 1.1\n    */\n-  public String (byte[] byteArray, String enc)\n+  public String(byte[] data, String encoding)\n     throws UnsupportedEncodingException\n   {\n-    this (byteArray, 0, byteArray.length, enc);\n+    this (data, 0, data.length, encoding);\n   }\n \n   /**\n@@ -319,19 +319,19 @@ public String (byte[] byteArray, String enc)\n    * @see #String(byte[], int, int, String)\n    * @since 1.1\n    */\n-  public String (byte[] byteArray, int offset, int count)\n+  public String(byte[] data, int offset, int count)\n   {\n     try\n       {\n-\tinit (byteArray, offset, count,\n+\tinit (data, offset, count,\n \t      System.getProperty(\"file.encoding\", \"8859_1\"));\n       }\n     catch (UnsupportedEncodingException x1)\n       {\n \t// Maybe the default encoding is bad.\n \ttry\n \t  {\n-\t    init (byteArray, offset, count, \"8859_1\");\n+\t    init (data, offset, count, \"8859_1\");\n \t  }\n \tcatch (UnsupportedEncodingException x2)\n \t  {\n@@ -355,9 +355,9 @@ public String (byte[] byteArray, int offset, int count)\n    * @see #String(byte[], int, int, String)\n    * @since 1.1\n    */\n-  public String (byte[] byteArray)\n+  public String(byte[] data)\n   {\n-    this (byteArray, 0, byteArray.length);\n+    this (data, 0, data.length);\n   }\n \n   /**\n@@ -367,7 +367,7 @@ public String (byte[] byteArray)\n    * @param buffer StringBuffer to copy\n    * @throws NullPointerException if buffer is null\n    */\n-  public String (StringBuffer buffer)\n+  public String(StringBuffer buffer)\n   {\n     synchronized (buffer)\n       {\n@@ -386,15 +386,15 @@ public String (StringBuffer buffer)\n    * @throws NullPointerException if chars is null\n    * @throws StringIndexOutOfBoundsException if bounds check fails\n    */\n-  String (char[] data, int offset, int count, boolean dont_copy)\n+  String(char[] data, int offset, int count, boolean dont_copy)\n   {\n     init(data, offset, count, dont_copy);\n   }\n \n   // This is used by gnu.gcj.runtime.StringBuffer, so it must have\n   // package-private protection.  It is accessed via CNI and so avoids\n   // ordinary protection mechanisms.\n-  String (gnu.gcj.runtime.StringBuffer buffer)\n+  String(gnu.gcj.runtime.StringBuffer buffer)\n   {\n     // No need to synchronize or mark the buffer, since we know it is\n     // only used once.\n@@ -419,7 +419,7 @@ public int length()\n    * @throws IndexOutOfBoundsException if index &lt; 0 || index &gt;= length()\n    *         (while unspecified, this is a StringIndexOutOfBoundsException)\n    */\n-  public native char charAt (int index);\n+  public native char charAt(int index);\n \n   /**\n    * Copies characters from this String starting at a specified start index,\n@@ -436,8 +436,8 @@ public int length()\n    *         StringIndexOutOfBoundsException, and dst problems cause an\n    *         ArrayIndexOutOfBoundsException)\n    */\n-  public native void getChars (int srcBegin, int srcEnd,\n-\t\t\t       char[] dst, int dstBegin);\n+  public native void getChars(int srcBegin, int srcEnd,\n+\t\t\t      char[] dst, int dstBegin);\n \n   /**\n    * Copies the low byte of each character from this String starting at a\n@@ -457,8 +457,8 @@ public native void getChars (int srcBegin, int srcEnd,\n    * @see #getBytes(String)\n    * @deprecated use {@link #getBytes()}, which uses a char to byte encoder\n    */\n-  public native void getBytes (int srcBegin, int srcEnd,\n-\t\t\t       byte[] dst, int dstBegin);\n+  public native void getBytes(int srcBegin, int srcEnd,\n+\t\t\t      byte[] dst, int dstBegin);\n \n   /**\n    * Converts the Unicode characters in this String to a byte array. Uses the\n@@ -474,7 +474,7 @@ public native void getBytes (int srcBegin, int srcEnd,\n    * @throws UnsupportedEncodingException if encoding is not supported\n    * @since 1.1\n    */\n-  public native byte[] getBytes (String enc)\n+  public native byte[] getBytes(String enc)\n     throws UnsupportedEncodingException;\n \n   /**\n@@ -487,7 +487,7 @@ public native byte[] getBytes (String enc)\n    * @return the resulting byte array, or null on a problem\n    * @since 1.1\n    */\n-  public byte[] getBytes ()\n+  public byte[] getBytes()\n   {\n     try\n       {\n@@ -519,7 +519,7 @@ public byte[] getBytes ()\n    * @see #compareTo(String)\n    * @see #equalsIgnoreCase(String)\n    */\n-  public native boolean equals (Object anObject);\n+  public native boolean equals(Object anObject);\n \n   /**\n    * Compares the given StringBuffer to this String. This is true if the\n@@ -549,7 +549,7 @@ public byte[] getBytes ()\n    * @see Character#toUpperCase(char)\n    * @see Character#toLowerCase(char)\n    */\n-  public native boolean equalsIgnoreCase (String anotherString);\n+  public native boolean equalsIgnoreCase(String anotherString);\n \n   /**\n    * Compares this String and another String (case sensitive,\n@@ -565,7 +565,7 @@ public byte[] getBytes ()\n    * @return the comparison\n    * @throws NullPointerException if anotherString is null\n    */\n-  public native int compareTo (String anotherString);\n+  public native int compareTo(String anotherString);\n \n   /**\n    * Behaves like <code>compareTo(java.lang.String)</code> unless the Object\n@@ -597,7 +597,7 @@ public int compareTo(Object o)\n    * @see Collator#compare(String, String)\n    * @since 1.2\n    */\n-  public int compareToIgnoreCase (String str)\n+  public int compareToIgnoreCase(String str)\n   {\n     return this.toUpperCase().toLowerCase().compareTo(\n      str.toUpperCase().toLowerCase());\n@@ -616,8 +616,8 @@ public int compareToIgnoreCase (String str)\n    * @return true if regions match (case sensitive)\n    * @throws NullPointerException if other is null\n    */\n-  public native boolean regionMatches (int toffset,\n-\t\t\t\t       String other, int ooffset, int len);\n+  public native boolean regionMatches(int toffset,\n+\t\t\t\t      String other, int ooffset, int len);\n \n   /**\n    * Predicate which determines if this String matches another String\n@@ -636,8 +636,8 @@ public native boolean regionMatches (int toffset,\n    * @return true if regions match, false otherwise\n    * @throws NullPointerException if other is null\n    */\n-  public native boolean regionMatches (boolean ignoreCase, int toffset,\n-\t\t\t\t       String other, int ooffset, int len);\n+  public native boolean regionMatches(boolean ignoreCase, int toffset,\n+\t\t\t\t      String other, int ooffset, int len);\n \n   /**\n    * Predicate which determines if this String contains the given prefix,\n@@ -651,7 +651,7 @@ public native boolean regionMatches (boolean ignoreCase, int toffset,\n    * @throws NullPointerException if prefix is null\n    * @see #regionMatches(boolean, int, String, int, int)\n    */\n-  public native boolean startsWith (String prefix, int toffset);\n+  public native boolean startsWith(String prefix, int toffset);\n \n   /**\n    * Predicate which determines if this String starts with a given prefix.\n@@ -662,7 +662,7 @@ public native boolean regionMatches (boolean ignoreCase, int toffset,\n    * @throws NullPointerException if prefix is null\n    * @see #startsWith(String, int)\n    */\n-  public boolean startsWith (String prefix)\n+  public boolean startsWith(String prefix)\n   {\n     return startsWith (prefix, 0);\n   }\n@@ -676,7 +676,7 @@ public boolean startsWith (String prefix)\n    * @throws NullPointerException if suffix is null\n    * @see #regionMatches(boolean, int, String, int, int)\n    */\n-  public boolean endsWith (String suffix)\n+  public boolean endsWith(String suffix)\n   {\n     return regionMatches (this.count - suffix.count, suffix, 0, suffix.count);\n   }\n@@ -688,17 +688,17 @@ public boolean endsWith (String suffix)\n    *\n    * @return hashcode value of this String\n    */\n-  public native int hashCode ();\n+  public native int hashCode();\n \n   /**\n    * Finds the first instance of a character in this String.\n    *\n    * @param ch character to find\n    * @return location (base 0) of the character, or -1 if not found\n    */\n-  public int indexOf (int ch)\n+  public int indexOf(int ch)\n   {\n-    return indexOf (ch, 0);\n+    return indexOf(ch, 0);\n   }\n \n   /**\n@@ -711,15 +711,15 @@ public int indexOf (int ch)\n    * @param fromIndex index to start the search\n    * @return location (base 0) of the character, or -1 if not found\n    */\n-  public native int indexOf (int ch, int fromIndex);\n+  public native int indexOf(int ch, int fromIndex);\n \n   /**\n    * Finds the last instance of a character in this String.\n    *\n    * @param ch character to find\n    * @return location (base 0) of the character, or -1 if not found\n    */\n-  public int lastIndexOf (int ch)\n+  public int lastIndexOf(int ch)\n   {\n     return lastIndexOf (ch, count - 1);\n   }\n@@ -734,7 +734,7 @@ public int lastIndexOf (int ch)\n    * @param fromIndex index to start the search\n    * @return location (base 0) of the character, or -1 if not found\n    */\n-  public native int lastIndexOf (int ch, int fromIndex);\n+  public native int lastIndexOf(int ch, int fromIndex);\n \n   /**\n    * Finds the first instance of a String in this String.\n@@ -743,9 +743,9 @@ public int lastIndexOf (int ch)\n    * @return location (base 0) of the String, or -1 if not found\n    * @throws NullPointerException if str is null\n    */\n-  public int indexOf (String str)\n+  public int indexOf(String str)\n   {\n-    return indexOf (str, 0);\n+    return indexOf(str, 0);\n   }\n \n   /**\n@@ -759,7 +759,7 @@ public int indexOf (String str)\n    * @return location (base 0) of the String, or -1 if not found\n    * @throws NullPointerException if str is null\n    */\n-  public native int indexOf (String str, int fromIndex);\n+  public native int indexOf(String str, int fromIndex);\n \n   /**\n    * Finds the last instance of a String in this String.\n@@ -768,7 +768,7 @@ public int indexOf (String str)\n    * @return location (base 0) of the String, or -1 if not found\n    * @throws NullPointerException if str is null\n    */\n-  public int lastIndexOf (String str)\n+  public int lastIndexOf(String str)\n   {\n     return lastIndexOf (str, count - str.count);\n   }\n@@ -784,7 +784,7 @@ public int lastIndexOf (String str)\n    * @return location (base 0) of the String, or -1 if not found\n    * @throws NullPointerException if str is null\n    */\n-  public int lastIndexOf (String str, int fromIndex)\n+  public int lastIndexOf(String str, int fromIndex)\n   {\n     if (fromIndex >= count)\n       fromIndex = count - str.count;\n@@ -806,7 +806,7 @@ public int lastIndexOf (String str, int fromIndex)\n    * @throws IndexOutOfBoundsException if begin &lt; 0 || begin &gt; length()\n    *         (while unspecified, this is a StringIndexOutOfBoundsException)\n    */\n-  public String substring (int beginIndex)\n+  public String substring(int beginIndex)\n   {\n     return substring (beginIndex, count);\n   }\n@@ -822,7 +822,7 @@ public String substring (int beginIndex)\n    *         || begin > end (while unspecified, this is a\n    *         StringIndexOutOfBoundsException)\n    */\n-  public native String substring (int beginIndex, int endIndex);\n+  public native String substring(int beginIndex, int endIndex);\n \n   /**\n    * Creates a substring of this String, starting at a specified index\n@@ -849,7 +849,7 @@ public CharSequence subSequence(int beginIndex, int endIndex)\n    * @return newly concatenated String\n    * @throws NullPointerException if str is null\n    */\n-  public native String concat (String str);\n+  public native String concat(String str);\n \n   /**\n    * Replaces every instance of a character in this String with a new\n@@ -859,7 +859,7 @@ public CharSequence subSequence(int beginIndex, int endIndex)\n    * @param newChar the new character\n    * @return new String with all instances of oldChar replaced with newChar\n    */\n-  public native String replace (char oldChar, char newChar);\n+  public native String replace(char oldChar, char newChar);\n \n   /**\n    * Test if this String matches a regular expression. This is shorthand for\n@@ -990,7 +990,7 @@ public String[] split(String regex)\n    * @see #toUpperCase(Locale)\n    * @since 1.1\n    */\n-  public native String toLowerCase (Locale locale);\n+  public native String toLowerCase(Locale locale);\n \n   /**\n    * Lowercases this String. This uses Unicode's special case mappings, as\n@@ -1001,7 +1001,7 @@ public String[] split(String regex)\n    * @see #toLowerCase(Locale)\n    * @see #toUpperCase()\n    */\n-  public String toLowerCase ()\n+  public String toLowerCase()\n   {\n     // The JDK is a bit confused about what to do here.  If we pass in\n     // the default Locale then special Locale handling might be\n@@ -1021,7 +1021,7 @@ public String toLowerCase ()\n    * @see #toLowerCase(Locale)\n    * @since 1.1\n    */\n-  public native String toUpperCase (Locale locale);\n+  public native String toUpperCase(Locale locale);\n \n   /**\n    * Uppercases this String. This uses Unicode's special case mappings, as\n@@ -1032,7 +1032,7 @@ public String toLowerCase ()\n    * @see #toUpperCase(Locale)\n    * @see #toLowerCase()\n    */\n-  public String toUpperCase ()\n+  public String toUpperCase()\n   {\n     // The JDK is a bit confused about what to do here.  If we pass in\n     // the default Locale then special Locale handling might be\n@@ -1049,14 +1049,14 @@ public String toUpperCase ()\n    *\n    * @return new trimmed String, or this if nothing trimmed\n    */\n-  public native String trim ();\n+  public native String trim();\n \n   /**\n    * Returns this, as it is already a String!\n    *\n    * @return this\n    */\n-  public String toString ()\n+  public String toString()\n   {\n     return this;\n   }\n@@ -1067,7 +1067,7 @@ public String toString ()\n    *\n    * @return character array copying the String\n    */\n-  public native char[] toCharArray ();\n+  public native char[] toCharArray();\n \n   /**\n    * Returns a String representation of an Object. This is \"null\" if the\n@@ -1077,7 +1077,7 @@ public String toString ()\n    * @param obj the Object\n    * @return the string conversion of obj\n    */\n-  public static String valueOf (Object obj)\n+  public static String valueOf(Object obj)\n   {\n     return obj == null ? \"null\" : obj.toString();\n   }\n@@ -1092,7 +1092,7 @@ public static String valueOf (Object obj)\n    * @see #valueOf(char[], int, int)\n    * @see #String(char[])\n    */\n-  public static String valueOf (char[] data)\n+  public static String valueOf(char[] data)\n   {\n     return valueOf (data, 0, data.length);\n   }\n@@ -1112,7 +1112,7 @@ public static String valueOf (char[] data)\n    *         (while unspecified, this is a StringIndexOutOfBoundsException)\n    * @see #String(char[], int, int)\n    */\n-  public static native String valueOf (char[] data, int offset, int count);\n+  public static native String valueOf(char[] data, int offset, int count);\n \n   /**\n    * Returns a String representing the character sequence of the char array,\n@@ -1157,7 +1157,7 @@ public static String copyValueOf(char[] data)\n    * @param b the boolean\n    * @return \"true\" if b is true, else \"false\"\n    */\n-  public static String valueOf (boolean b)\n+  public static String valueOf(boolean b)\n   {\n     return b ? \"true\" : \"false\";\n   }\n@@ -1168,7 +1168,7 @@ public static String valueOf (boolean b)\n    * @param c the character\n    * @return String containing the single character c\n    */\n-  public static native String valueOf (char c);\n+  public static native String valueOf(char c);\n \n   /**\n    * Returns a String representing an integer.\n@@ -1177,7 +1177,7 @@ public static String valueOf (boolean b)\n    * @return String containing the integer in base 10\n    * @see Integer#toString(int)\n    */\n-  public static native String valueOf (int i);\n+  public static native String valueOf(int i);\n \n   /**\n    * Returns a String representing a long.\n@@ -1186,7 +1186,7 @@ public static String valueOf (boolean b)\n    * @return String containing the long in base 10\n    * @see Long#toString(long)\n    */\n-  public static String valueOf (long l)\n+  public static String valueOf(long l)\n   {\n     return Long.toString(l);\n   }\n@@ -1198,7 +1198,7 @@ public static String valueOf (long l)\n    * @return String containing the float\n    * @see Float#toString(float)\n    */\n-  public static String valueOf (float f)\n+  public static String valueOf(float f)\n   {\n     return Float.toString(f);\n   }\n@@ -1210,7 +1210,7 @@ public static String valueOf (float f)\n    * @return String containing the double\n    * @see Double#toString(double)\n    */\n-  public static String valueOf (double d)\n+  public static String valueOf(double d)\n   {\n     return Double.toString(d);\n   }\n@@ -1224,13 +1224,13 @@ public static String valueOf (double d)\n    *\n    * @return the interned String\n    */\n-  public native String intern ();\n+  public native String intern();\n \n \n-  private native void init (char[] chars, int offset, int count,\n-\t\t\t    boolean dont_copy);\n-  private native void init (byte[] chars, int hibyte, int offset, int count);\n-  private native void init (byte[] chars, int offset, int count, String enc)\n+  private native void init(char[] chars, int offset, int count,\n+\t\t\t   boolean dont_copy);\n+  private native void init(byte[] chars, int hibyte, int offset, int count);\n+  private native void init(byte[] chars, int offset, int count, String enc)\n     throws UnsupportedEncodingException;\n-  private static native void rehash ();\n+  private static native void rehash();\n }"}]}