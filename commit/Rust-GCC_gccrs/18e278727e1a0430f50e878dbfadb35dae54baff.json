{"sha": "18e278727e1a0430f50e878dbfadb35dae54baff", "node_id": "C_kwDOANBUbNoAKDE4ZTI3ODcyN2UxYTA0MzBmNTBlODc4ZGJmYWRiMzVkYWU1NGJhZmY", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2022-02-15T18:39:42Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-13T08:04:33Z"}, "message": "[Ada] Wrong address for class-wide interface access conversion\n\nThe compiler generates wrong code on instantiations of package\nAddress_To_Access_Conversions when the generic formal is a class-wide\ninterface type; this causes wrong dispatching calls when the\naccess-to-class-wide-interface object returned by To_Pointer is used to\ndispatch a call.\n\ngcc/ada/\n\n\t* exp_attr.adb (Expand_N_Attribute_Reference): The expansion of\n\t'Address in a call to an instantiation of the implicit\n\tsubprogram To_Pointer with a class-wide interface type target\n\trequires adding an implicit type conversion to force\n\tdisplacement of the \"this\" pointer.", "tree": {"sha": "8c820be7b8f3304863de8038754601f6263b1c35", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c820be7b8f3304863de8038754601f6263b1c35"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/18e278727e1a0430f50e878dbfadb35dae54baff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e278727e1a0430f50e878dbfadb35dae54baff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18e278727e1a0430f50e878dbfadb35dae54baff", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18e278727e1a0430f50e878dbfadb35dae54baff/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fafccfbf77ac245c7fa77c06e4ae001009c3425e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fafccfbf77ac245c7fa77c06e4ae001009c3425e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fafccfbf77ac245c7fa77c06e4ae001009c3425e"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "e6d3e74971f2afba9917262a7098c228e6480e0b", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/18e278727e1a0430f50e878dbfadb35dae54baff/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/18e278727e1a0430f50e878dbfadb35dae54baff/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=18e278727e1a0430f50e878dbfadb35dae54baff", "patch": "@@ -2543,6 +2543,28 @@ package body Exp_Attr is\n                Analyze_And_Resolve (N, Addr);\n             end;\n \n+         --  'Address is an actual parameter of the call to the implicit\n+         --  subprogram To_Pointer instantiated with a class-wide interface\n+         --  type; its expansion requires adding an implicit type conversion\n+         --  to force displacement of the \"this\" pointer.\n+\n+         elsif Tagged_Type_Expansion\n+           and then Nkind (Parent (N)) = N_Function_Call\n+           and then Nkind (Name (Parent (N))) in N_Has_Entity\n+           and then Is_Intrinsic_Subprogram (Entity (Name (Parent (N))))\n+           and then Chars (Entity (Name (Parent (N)))) = Name_To_Pointer\n+           and then Is_Interface (Designated_Type (Etype (Parent (N))))\n+           and then Is_Class_Wide_Type (Designated_Type (Etype (Parent (N))))\n+         then\n+            declare\n+               Iface_Typ : constant Entity_Id :=\n+                             Designated_Type (Etype (Parent (N)));\n+            begin\n+               Rewrite (Pref, Convert_To (Iface_Typ, Relocate_Node (Pref)));\n+               Analyze_And_Resolve (Pref, Iface_Typ);\n+               return;\n+            end;\n+\n          --  Ada 2005 (AI-251): Class-wide interface objects are always\n          --  \"displaced\" to reference the tag associated with the interface\n          --  type. In order to obtain the real address of such objects we\n@@ -2554,18 +2576,17 @@ package body Exp_Attr is\n          --  of nested subprograms), since the address needs to be assigned\n          --  as-is to such components.\n \n-         elsif Is_Class_Wide_Type (Ptyp)\n+         elsif Tagged_Type_Expansion\n+           and then Is_Class_Wide_Type (Ptyp)\n            and then Is_Interface (Underlying_Type (Ptyp))\n-           and then Tagged_Type_Expansion\n            and then not (Nkind (Pref) in N_Has_Entity\n                           and then Is_Subprogram (Entity (Pref)))\n            and then not Is_Unnested_Component_Init (N)\n          then\n             Rewrite (N,\n               Make_Function_Call (Loc,\n                 Name => New_Occurrence_Of (RTE (RE_Base_Address), Loc),\n-                Parameter_Associations => New_List (\n-                  Relocate_Node (N))));\n+                Parameter_Associations => New_List (Relocate_Node (N))));\n             Analyze (N);\n             return;\n          end if;"}]}