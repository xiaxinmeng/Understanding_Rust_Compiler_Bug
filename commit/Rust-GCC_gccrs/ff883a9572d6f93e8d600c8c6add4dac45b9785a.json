{"sha": "ff883a9572d6f93e8d600c8c6add4dac45b9785a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4ODNhOTU3MmQ2ZjkzZThkNjAwYzhjNmFkZDRkYWM0NWI5Nzg1YQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-11-09T20:22:19Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-11-09T20:22:19Z"}, "message": "re PR fortran/29744 (Type renaming crashes gfortran with excessive memory usage)\n\n2006-11-09 Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/29744\n\t* trans-types.c (gfc_get_derived_type): Ensure that the\n\tproc_name namespace is not the same as the owner namespace and\n\tthat identical derived types in the same namespace share the\n\tsame backend_decl.\n\n2006-11-09 Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/29744\n\t* gfortran.dg/used_types_12.f90: New test.\n\nFrom-SVN: r118627", "tree": {"sha": "233bf1930517c7b91322bb359d2396487e9f1fe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/233bf1930517c7b91322bb359d2396487e9f1fe7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff883a9572d6f93e8d600c8c6add4dac45b9785a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff883a9572d6f93e8d600c8c6add4dac45b9785a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff883a9572d6f93e8d600c8c6add4dac45b9785a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff883a9572d6f93e8d600c8c6add4dac45b9785a/comments", "author": null, "committer": null, "parents": [{"sha": "6acf0b3843737f9f95298465fdcf0d532c1995a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6acf0b3843737f9f95298465fdcf0d532c1995a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6acf0b3843737f9f95298465fdcf0d532c1995a4"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "7b5afcf36ee73befc24e02f47744e4a229417842", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff883a9572d6f93e8d600c8c6add4dac45b9785a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff883a9572d6f93e8d600c8c6add4dac45b9785a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ff883a9572d6f93e8d600c8c6add4dac45b9785a", "patch": "@@ -1,3 +1,11 @@\n+2006-11-09 Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/29744\n+\t* trans-types.c (gfc_get_derived_type): Ensure that the\n+\tproc_name namespace is not the same as the owner namespace and\n+\tthat identical derived types in the same namespace share the\n+\tsame backend_decl.\n+\n 2006-11-09 Paul Thomas <pault@gcc.gnu.org>\n \n \tPR fortran/29699"}, {"sha": "56575b009a3747887528580f805019fe57816377", "filename": "gcc/fortran/trans-types.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff883a9572d6f93e8d600c8c6add4dac45b9785a/gcc%2Ffortran%2Ftrans-types.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff883a9572d6f93e8d600c8c6add4dac45b9785a/gcc%2Ffortran%2Ftrans-types.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-types.c?ref=ff883a9572d6f93e8d600c8c6add4dac45b9785a", "patch": "@@ -1484,7 +1484,8 @@ gfc_get_derived_type (gfc_symbol * derived)\n \t build the parent version and use it in the current namespace.  */\n       if (derived->ns->parent)\n \tns = derived->ns->parent;\n-      else if (derived->ns->proc_name)\n+      else if (derived->ns->proc_name\n+\t\t && derived->ns->proc_name->ns != derived->ns)\n \t/* Derived types in an interface body obtain their parent reference\n \t   through the proc_name symbol.  */\n \tns = derived->ns->proc_name->ns;\n@@ -1592,6 +1593,9 @@ gfc_get_derived_type (gfc_symbol * derived)\n   /* Add this backend_decl to all the other, equal derived types and\n      their components in this and sibling namespaces.  */\n \n+  for (dt = derived->ns->derived_types; dt; dt = dt->next)\n+    copy_dt_decls_ifequal (derived, dt->derived);\n+\n   for (ns = derived->ns->sibling; ns; ns = ns->sibling)\n     for (dt = ns->derived_types; dt; dt = dt->next)\n       copy_dt_decls_ifequal (derived, dt->derived);"}, {"sha": "d56bd0420817d0d7c5ab167fc3e94bfce8e8d641", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff883a9572d6f93e8d600c8c6add4dac45b9785a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff883a9572d6f93e8d600c8c6add4dac45b9785a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff883a9572d6f93e8d600c8c6add4dac45b9785a", "patch": "@@ -1,3 +1,8 @@\n+2006-11-09 Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/29744\n+\t* gfortran.dg/used_types_12.f90: New test.\n+\n 2006-11-09  Serge Belyshev  <belyshev@depni.sinp.msu.ru>\n \n \tPR middle-end/29726"}, {"sha": "adfa1f7c8e359cc159a215431181f9527ec1c68d", "filename": "gcc/testsuite/gfortran.dg/used_types_12.f90", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff883a9572d6f93e8d600c8c6add4dac45b9785a/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_12.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff883a9572d6f93e8d600c8c6add4dac45b9785a/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_12.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fused_types_12.f90?ref=ff883a9572d6f93e8d600c8c6add4dac45b9785a", "patch": "@@ -0,0 +1,30 @@\n+! { dg-do compile }\n+! Tests the fix PR29744, which is really a repeat of PR19362.\n+! The problem came about because the test for PR19362 shifted\n+! the fix to a subroutine, rather than the main program that\n+! it originally occurred in.  Fixes for subsequent PRs introduced\n+! a difference between the main program and a contained procedure\n+! that resulted in the compiler going into an infinite loop.\n+!\n+! Contributed by Harald Anlauf  <anlauf@gmx.de>\n+! and originally by Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org> \n+!\n+MODULE M\n+  TYPE T0\n+    SEQUENCE\n+    INTEGER I\n+  END TYPE\n+END\n+\n+PROGRAM MAIN\n+  USE M, T1 => T0\n+  TYPE T0\n+    SEQUENCE\n+    INTEGER I\n+  END TYPE\n+  TYPE(T0) :: BAR\n+  TYPE(T1) :: BAZ\n+  BAZ = BAR\n+END\n+! { dg-final { cleanup-modules \"M\" } }\n+"}]}