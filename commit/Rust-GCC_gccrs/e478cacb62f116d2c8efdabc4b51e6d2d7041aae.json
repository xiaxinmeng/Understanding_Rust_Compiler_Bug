{"sha": "e478cacb62f116d2c8efdabc4b51e6d2d7041aae", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ3OGNhY2I2MmYxMTZkMmM4ZWZkYWJjNGI1MWU2ZDJkNzA0MWFhZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-05-15T17:50:57Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2020-05-15T22:33:20Z"}, "message": "libgo: only build syscall test with -static if it works\n\nTest whether -static works, and use it if possible.\n\nThis time for sure.\n\nFor PR go/95061\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/234024", "tree": {"sha": "842f0f76d7668a745c1842e07f39b3cd56356a37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/842f0f76d7668a745c1842e07f39b3cd56356a37"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e478cacb62f116d2c8efdabc4b51e6d2d7041aae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e478cacb62f116d2c8efdabc4b51e6d2d7041aae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e478cacb62f116d2c8efdabc4b51e6d2d7041aae", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e478cacb62f116d2c8efdabc4b51e6d2d7041aae/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29f0e90d9904d8e0965443d4da4c95ddde5edb1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f0e90d9904d8e0965443d4da4c95ddde5edb1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f0e90d9904d8e0965443d4da4c95ddde5edb1e"}], "stats": {"total": 69, "additions": 62, "deletions": 7}, "files": [{"sha": "bc9c1f07eda6eefc08d10aa9cd74f42a91d69776", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e478cacb62f116d2c8efdabc4b51e6d2d7041aae/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e478cacb62f116d2c8efdabc4b51e6d2d7041aae/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=e478cacb62f116d2c8efdabc4b51e6d2d7041aae", "patch": "@@ -1,4 +1,4 @@\n-cae8d4c388d4cc701c7f8fc221c9f6431760d93a\n+bc27341f245a5cc54ac7530d037a609db72b677c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "5b1807228ade1bea2abddb8b8b56738d227a0b4e", "filename": "libgo/Makefile.am", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e478cacb62f116d2c8efdabc4b51e6d2d7041aae/libgo%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e478cacb62f116d2c8efdabc4b51e6d2d7041aae/libgo%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.am?ref=e478cacb62f116d2c8efdabc4b51e6d2d7041aae", "patch": "@@ -967,8 +967,8 @@ endif\n # Also use -fno-inline to get better results from the memory profiler.\n runtime_pprof_check_GOCFLAGS = -static-libgo -fno-inline\n \n-if LIBGO_IS_LINUX\n-# Use -static for the syscall tests, because otherwise when\n+if HAVE_STATIC_LINK\n+# Use -static for the syscall tests if possible, because otherwise when\n # running as root the re-execs ignore LD_LIBRARY_PATH.\n syscall_check_GOCFLAGS = -static\n endif"}, {"sha": "b2712eba971a8a1f53cbd4dd02fc2c70cc4edbb6", "filename": "libgo/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e478cacb62f116d2c8efdabc4b51e6d2d7041aae/libgo%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e478cacb62f116d2c8efdabc4b51e6d2d7041aae/libgo%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2FMakefile.in?ref=e478cacb62f116d2c8efdabc4b51e6d2d7041aae", "patch": "@@ -1105,9 +1105,9 @@ runtime_internal_sys_lo_check_GOCFLAGS = -fgo-compiling-runtime\n # Also use -fno-inline to get better results from the memory profiler.\n runtime_pprof_check_GOCFLAGS = -static-libgo -fno-inline\n \n-# Use -static for the syscall tests, because otherwise when\n+# Use -static for the syscall tests if possible, because otherwise when\n # running as root the re-execs ignore LD_LIBRARY_PATH.\n-@LIBGO_IS_LINUX_TRUE@syscall_check_GOCFLAGS = -static\n+@HAVE_STATIC_LINK_TRUE@syscall_check_GOCFLAGS = -static\n extra_go_files_runtime_internal_sys = version.go\n extra_go_files_internal_cpu = cpugen.go\n extra_go_files_golang_org_x_sys_cpu = gcpugen.go"}, {"sha": "2a9c7e61f6376b15e43855cfa9045b2dbc73944f", "filename": "libgo/configure", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e478cacb62f116d2c8efdabc4b51e6d2d7041aae/libgo%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e478cacb62f116d2c8efdabc4b51e6d2d7041aae/libgo%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure?ref=e478cacb62f116d2c8efdabc4b51e6d2d7041aae", "patch": "@@ -633,6 +633,8 @@ ac_subst_vars='am__EXEEXT_FALSE\n am__EXEEXT_TRUE\n LTLIBOBJS\n LIBOBJS\n+HAVE_STATIC_LINK_FALSE\n+HAVE_STATIC_LINK_TRUE\n HAVE_STAT_TIMESPEC_FALSE\n HAVE_STAT_TIMESPEC_TRUE\n STRUCT_EPOLL_EVENT_FD_OFFSET\n@@ -11490,7 +11492,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11493 \"configure\"\n+#line 11495 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11596,7 +11598,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11599 \"configure\"\n+#line 11601 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -15788,6 +15790,44 @@ $as_echo \"#define HAVE_AS_X86_AES 1\" >>confdefs.h\n \n fi\n \n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether -static is supported\" >&5\n+$as_echo_n \"checking whether -static is supported... \" >&6; }\n+if ${libgo_cv_ld_static+:} false; then :\n+  $as_echo_n \"(cached) \" >&6\n+else\n+  LDFLAGS_hold=$LDFLAGS\n+LDFLAGS=\"$LDFLAGS -static\"\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+\n+int\n+main ()\n+{\n+\n+  ;\n+  return 0;\n+}\n+_ACEOF\n+if ac_fn_c_try_link \"$LINENO\"; then :\n+  libgo_cv_ld_static=yes\n+else\n+  libgo_cv_ld_static=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+LDFLAGS=$LDFLAGS_hold\n+fi\n+{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $libgo_cv_ld_static\" >&5\n+$as_echo \"$libgo_cv_ld_static\" >&6; }\n+ if test \"$libgo_cv_ld_static\" = yes; then\n+  HAVE_STATIC_LINK_TRUE=\n+  HAVE_STATIC_LINK_FALSE='#'\n+else\n+  HAVE_STATIC_LINK_TRUE='#'\n+  HAVE_STATIC_LINK_FALSE=\n+fi\n+\n+\n cat >confcache <<\\_ACEOF\n # This file is a shell script that caches the results of configure\n # tests run on this system so they can be shared between configure\n@@ -16108,6 +16148,10 @@ if test -z \"${HAVE_STAT_TIMESPEC_TRUE}\" && test -z \"${HAVE_STAT_TIMESPEC_FALSE}\"\n   as_fn_error $? \"conditional \\\"HAVE_STAT_TIMESPEC\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${HAVE_STATIC_LINK_TRUE}\" && test -z \"${HAVE_STATIC_LINK_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"HAVE_STATIC_LINK\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n \n : \"${CONFIG_STATUS=./config.status}\"\n ac_write_fail=0"}, {"sha": "235d867ccda4b9866947b75df23beabfaa1b036b", "filename": "libgo/configure.ac", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e478cacb62f116d2c8efdabc4b51e6d2d7041aae/libgo%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e478cacb62f116d2c8efdabc4b51e6d2d7041aae/libgo%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fconfigure.ac?ref=e478cacb62f116d2c8efdabc4b51e6d2d7041aae", "patch": "@@ -881,6 +881,17 @@ if test \"x$libgo_cv_as_x86_aes\" = xyes; then\n \t    [Define if your assembler supports AES instructions.])\n fi\n \n+dnl Test whether the linker supports the -static option.\n+AC_CACHE_CHECK([whether -static is supported],\n+[libgo_cv_ld_static],\n+[LDFLAGS_hold=$LDFLAGS\n+LDFLAGS=\"$LDFLAGS -static\"\n+AC_LINK_IFELSE([AC_LANG_PROGRAM(,)],\n+[libgo_cv_ld_static=yes],\n+[libgo_cv_ld_static=no])\n+LDFLAGS=$LDFLAGS_hold])\n+AM_CONDITIONAL(HAVE_STATIC_LINK, test \"$libgo_cv_ld_static\" = yes)\n+\n AC_CACHE_SAVE\n \n if test ${multilib} = yes; then"}]}