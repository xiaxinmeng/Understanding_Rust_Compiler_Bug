{"sha": "9052a1e3319eb868d107f78be20086883b4d05b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA1MmExZTMzMTllYjg2OGQxMDdmNzhiZTIwMDg2ODgzYjRkMDViNQ==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2014-07-31T16:45:38Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2014-07-31T16:45:38Z"}, "message": "[AArch64] arm_neon.h - add vpaddd_f64, vpaddd_s64, vpaddd_u64 intrinsics\n\ngcc/\n\n\t* config/aarch64/arm_neon.h (vpadd_<suf><8,16,32,64>): Move to\n\tcorrect alphabetical position.\n\t(vpaddd_f64): Rewrite using builtins.\n\t(vpaddd_s64): Move to correct alphabetical position.\n\t(vpaddd_u64): New.\n\ngcc/testsuite/\n\n\t* gcc.target/aarch64/scalar_intrinsics.c (test_vpaddd_f64): New.\n\t(test_vpaddd_s64): Likewise.\n\t(test_vpaddd_s64): Likewise.\n\t* gcc.target/aarch64/simd/vpaddd_f64: New.\n\t* gcc.target/aarch64/simd/vpaddd_s64: New.\n\t* gcc.target/aarch64/simd/vpaddd_u64: New.\n\nFrom-SVN: r213382", "tree": {"sha": "643637c0fdd135013c1aa319857c20bf27d8d1f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/643637c0fdd135013c1aa319857c20bf27d8d1f4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9052a1e3319eb868d107f78be20086883b4d05b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9052a1e3319eb868d107f78be20086883b4d05b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9052a1e3319eb868d107f78be20086883b4d05b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9052a1e3319eb868d107f78be20086883b4d05b5/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79a1fe43fb4ed62b9e66c16efe173180423730ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79a1fe43fb4ed62b9e66c16efe173180423730ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79a1fe43fb4ed62b9e66c16efe173180423730ee"}], "stats": {"total": 230, "additions": 173, "deletions": 57}, "files": [{"sha": "706fedc3b9549ec13b6ca7f33f276b7cab88f9f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9052a1e3319eb868d107f78be20086883b4d05b5", "patch": "@@ -1,3 +1,11 @@\n+2014-07-31  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vpadd_<suf><8,16,32,64>): Move to\n+\tcorrect alphabetical position.\n+\t(vpaddd_f64): Rewrite using builtins.\n+\t(vpaddd_s64): Move to correct alphabetical position.\n+\t(vpaddd_u64): New.\n+\n 2014-07-31  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/61844"}, {"sha": "7e6aba77267eedb51ff7dd72b257898909fdc815", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 59, "deletions": 56, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=9052a1e3319eb868d107f78be20086883b4d05b5", "patch": "@@ -9233,56 +9233,6 @@ vpadd_f32 (float32x2_t a, float32x2_t b)\n   return result;\n }\n \n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-vpadd_s8 (int8x8_t __a, int8x8_t __b)\n-{\n-  return __builtin_aarch64_addpv8qi (__a, __b);\n-}\n-\n-__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n-vpadd_s16 (int16x4_t __a, int16x4_t __b)\n-{\n-  return __builtin_aarch64_addpv4hi (__a, __b);\n-}\n-\n-__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n-vpadd_s32 (int32x2_t __a, int32x2_t __b)\n-{\n-  return __builtin_aarch64_addpv2si (__a, __b);\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-vpadd_u8 (uint8x8_t __a, uint8x8_t __b)\n-{\n-  return (uint8x8_t) __builtin_aarch64_addpv8qi ((int8x8_t) __a,\n-\t\t\t\t\t\t (int8x8_t) __b);\n-}\n-\n-__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n-vpadd_u16 (uint16x4_t __a, uint16x4_t __b)\n-{\n-  return (uint16x4_t) __builtin_aarch64_addpv4hi ((int16x4_t) __a,\n-\t\t\t\t\t\t  (int16x4_t) __b);\n-}\n-\n-__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n-vpadd_u32 (uint32x2_t __a, uint32x2_t __b)\n-{\n-  return (uint32x2_t) __builtin_aarch64_addpv2si ((int32x2_t) __a,\n-\t\t\t\t\t\t  (int32x2_t) __b);\n-}\n-\n-__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n-vpaddd_f64 (float64x2_t a)\n-{\n-  float64_t result;\n-  __asm__ (\"faddp %d0,%1.2d\"\n-           : \"=w\"(result)\n-           : \"w\"(a)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vpaddl_s8 (int8x8_t a)\n {\n@@ -12563,12 +12513,6 @@ vaddlv_u32 (uint32x2_t a)\n   return result;\n }\n \n-__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n-vpaddd_s64 (int64x2_t __a)\n-{\n-  return __builtin_aarch64_addpdi (__a);\n-}\n-\n __extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n vqdmulh_laneq_s16 (int16x4_t __a, int16x8_t __b, const int __c)\n {\n@@ -19230,6 +19174,65 @@ vnegq_s64 (int64x2_t __a)\n   return -__a;\n }\n \n+/* vpadd  */\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vpadd_s8 (int8x8_t __a, int8x8_t __b)\n+{\n+  return __builtin_aarch64_addpv8qi (__a, __b);\n+}\n+\n+__extension__ static __inline int16x4_t __attribute__ ((__always_inline__))\n+vpadd_s16 (int16x4_t __a, int16x4_t __b)\n+{\n+  return __builtin_aarch64_addpv4hi (__a, __b);\n+}\n+\n+__extension__ static __inline int32x2_t __attribute__ ((__always_inline__))\n+vpadd_s32 (int32x2_t __a, int32x2_t __b)\n+{\n+  return __builtin_aarch64_addpv2si (__a, __b);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+vpadd_u8 (uint8x8_t __a, uint8x8_t __b)\n+{\n+  return (uint8x8_t) __builtin_aarch64_addpv8qi ((int8x8_t) __a,\n+\t\t\t\t\t\t (int8x8_t) __b);\n+}\n+\n+__extension__ static __inline uint16x4_t __attribute__ ((__always_inline__))\n+vpadd_u16 (uint16x4_t __a, uint16x4_t __b)\n+{\n+  return (uint16x4_t) __builtin_aarch64_addpv4hi ((int16x4_t) __a,\n+\t\t\t\t\t\t  (int16x4_t) __b);\n+}\n+\n+__extension__ static __inline uint32x2_t __attribute__ ((__always_inline__))\n+vpadd_u32 (uint32x2_t __a, uint32x2_t __b)\n+{\n+  return (uint32x2_t) __builtin_aarch64_addpv2si ((int32x2_t) __a,\n+\t\t\t\t\t\t  (int32x2_t) __b);\n+}\n+\n+__extension__ static __inline float64_t __attribute__ ((__always_inline__))\n+vpaddd_f64 (float64x2_t __a)\n+{\n+  return vgetq_lane_f64 (__builtin_aarch64_reduc_splus_v2df (__a), 0);\n+}\n+\n+__extension__ static __inline int64_t __attribute__ ((__always_inline__))\n+vpaddd_s64 (int64x2_t __a)\n+{\n+  return __builtin_aarch64_addpdi (__a);\n+}\n+\n+__extension__ static __inline uint64_t __attribute__ ((__always_inline__))\n+vpaddd_u64 (uint64x2_t __a)\n+{\n+  return __builtin_aarch64_addpdi ((int64x2_t) __a);\n+}\n+\n /* vqabs */\n \n __extension__ static __inline int64x2_t __attribute__ ((__always_inline__))"}, {"sha": "a0c768f16e51c9bff42a912d3f5a64578c0fd388", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9052a1e3319eb868d107f78be20086883b4d05b5", "patch": "@@ -1,3 +1,12 @@\n+2014-07-31  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* gcc.target/aarch64/scalar_intrinsics.c (test_vpaddd_f64): New.\n+\t(test_vpaddd_s64): Likewise.\n+\t(test_vpaddd_s64): Likewise.\n+\t* gcc.target/aarch64/simd/vpaddd_f64: New.\n+\t* gcc.target/aarch64/simd/vpaddd_s64: New.\n+\t* gcc.target/aarch64/simd/vpaddd_u64: New.\n+\n 2014-07-31  Charles Baylis  <charles.baylis@linaro.org>\n \n \tPR target/61948"}, {"sha": "0e288f292e443b06b9654f24186eee3265b00994", "filename": "gcc/testsuite/gcc.target/aarch64/scalar_intrinsics.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fscalar_intrinsics.c?ref=9052a1e3319eb868d107f78be20086883b4d05b5", "patch": "@@ -293,13 +293,28 @@ test_vtstd_u64 (uint64_t a, uint64_t b)\n   return res;\n }\n \n-/* { dg-final { scan-assembler-times \"\\\\taddp\\\\td\\[0-9\\]+, v\\[0-9\\]+\\.2d\" 1 } } */\n+/* { dg-final { scan-assembler-times \"\\\\tfaddp\\\\td\\[0-9\\]+, v\\[0-9\\]+\\.2d\" 1 } } */\n \n+float64_t\n+test_vpaddd_f64 (float64x2_t a)\n+{\n+  return vpaddd_f64 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\\\taddp\\\\td\\[0-9\\]+, v\\[0-9\\]+\\.2d\" 2 } } */\n+\n+int64_t\n test_vpaddd_s64 (int64x2_t a)\n {\n   return vpaddd_s64 (a);\n }\n \n+uint64_t\n+test_vpaddd_u64 (uint64x2_t a)\n+{\n+  return vpaddd_u64 (a);\n+}\n+\n /* { dg-final { scan-assembler-times \"\\\\tuqadd\\\\td\\[0-9\\]+\" 1 } } */\n \n uint64_t"}, {"sha": "041da8eb92c4c0998001879c9e8c1d6770af43e9", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vpaddd_f64.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvpaddd_f64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvpaddd_f64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvpaddd_f64.c?ref=9052a1e3319eb868d107f78be20086883b4d05b5", "patch": "@@ -0,0 +1,27 @@\n+/* Test the vpaddd_f64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define SIZE 6\n+\n+extern void abort (void);\n+\n+float64_t in[SIZE] = { -4.0, 4.0, -2.0, 2.0, -1.0, 1.0 };\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE / 2; ++i)\n+    if (vpaddd_f64 (vld1q_f64 (in + 2 * i)) != 0.0)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"faddp\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, v\\[0-9\\].2d+\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "44714d2b85ee63964081a3c20192b0f026ab83d9", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vpaddd_s64.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvpaddd_s64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvpaddd_s64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvpaddd_s64.c?ref=9052a1e3319eb868d107f78be20086883b4d05b5", "patch": "@@ -0,0 +1,27 @@\n+/* Test the vpaddd_s64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define SIZE 6\n+\n+extern void abort (void);\n+\n+int64_t in[SIZE] = { -4l, 4l, -2l, 2l, -1l, 1l };\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE / 2; ++i)\n+    if (vpaddd_s64 (vld1q_s64 (in + 2 * i)) != 0)\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"addp\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, v\\[0-9\\].2d+\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}, {"sha": "013ca00b9da33a23ee07262a0be055f8aa63ee68", "filename": "gcc/testsuite/gcc.target/aarch64/simd/vpaddd_u64.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvpaddd_u64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9052a1e3319eb868d107f78be20086883b4d05b5/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvpaddd_u64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsimd%2Fvpaddd_u64.c?ref=9052a1e3319eb868d107f78be20086883b4d05b5", "patch": "@@ -0,0 +1,27 @@\n+/* Test the vpaddd_u64 AArch64 SIMD intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-save-temps -O3\" } */\n+\n+#include \"arm_neon.h\"\n+\n+#define SIZE 6\n+\n+extern void abort (void);\n+\n+uint64_t in[SIZE] = { 4ul, 4ul, 2ul, 2ul, 1ul, 1ul };\n+\n+int\n+main (void)\n+{\n+  int i;\n+\n+  for (i = 0; i < SIZE / 2; ++i)\n+    if (vpaddd_u64 (vld1q_u64 (in + 2 * i)) != 2 * in[2 * i])\n+      abort ();\n+\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler \"addp\\[ \\t\\]+\\[dD\\]\\[0-9\\]+, v\\[0-9\\].2d+\\n\" } } */\n+/* { dg-final { cleanup-saved-temps } } */"}]}