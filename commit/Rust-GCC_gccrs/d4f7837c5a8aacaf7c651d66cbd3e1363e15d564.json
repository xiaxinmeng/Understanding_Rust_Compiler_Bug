{"sha": "d4f7837c5a8aacaf7c651d66cbd3e1363e15d564", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDRmNzgzN2M1YThhYWNhZjdjNjUxZDY2Y2JkM2UxMzYzZTE1ZDU2NA==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2016-08-04T21:12:52Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2016-08-04T21:12:52Z"}, "message": "selftest.h: Add ASSERT_TRUE_AT and ASSERT_FALSE_AT\n\ngcc/ChangeLog:\n\t* selftest.h (ASSERT_TRUE): Reimplement in terms of...\n\t(ASSERT_TRUE_AT): New macro.\n\t(ASSERT_FALSE): Reimplement in terms of...\n\t(ASSERT_FALSE_AT): New macro.\n\t(ASSERT_STREQ_AT): Fix typo in comment.\n\nFrom-SVN: r239151", "tree": {"sha": "20a88d76950fa0f0ec04a2ba5eb1aa14673dc4f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20a88d76950fa0f0ec04a2ba5eb1aa14673dc4f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4f7837c5a8aacaf7c651d66cbd3e1363e15d564", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f7837c5a8aacaf7c651d66cbd3e1363e15d564", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4f7837c5a8aacaf7c651d66cbd3e1363e15d564", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4f7837c5a8aacaf7c651d66cbd3e1363e15d564/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f6cdf42f64471783d1a94cfca4e3ba4d3bf0ab15", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6cdf42f64471783d1a94cfca4e3ba4d3bf0ab15", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6cdf42f64471783d1a94cfca4e3ba4d3bf0ab15"}], "stats": {"total": 38, "additions": 29, "deletions": 9}, "files": [{"sha": "025476c075900cba23901c1fe68493b660bd4f22", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f7837c5a8aacaf7c651d66cbd3e1363e15d564/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f7837c5a8aacaf7c651d66cbd3e1363e15d564/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d4f7837c5a8aacaf7c651d66cbd3e1363e15d564", "patch": "@@ -1,3 +1,11 @@\n+2016-08-04  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* selftest.h (ASSERT_TRUE): Reimplement in terms of...\n+\t(ASSERT_TRUE_AT): New macro.\n+\t(ASSERT_FALSE): Reimplement in terms of...\n+\t(ASSERT_FALSE_AT): New macro.\n+\t(ASSERT_STREQ_AT): Fix typo in comment.\n+\n 2016-08-04  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \t* gimple.c (preprocess_case_label_vec_for_gimple): When the case"}, {"sha": "397e998048b9ac007701c1da13505211d9f16181", "filename": "gcc/selftest.h", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4f7837c5a8aacaf7c651d66cbd3e1363e15d564/gcc%2Fselftest.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4f7837c5a8aacaf7c651d66cbd3e1363e15d564/gcc%2Fselftest.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fselftest.h?ref=d4f7837c5a8aacaf7c651d66cbd3e1363e15d564", "patch": "@@ -104,27 +104,39 @@ extern int num_passes;\n    ::selftest::fail if it false.  */\n \n #define ASSERT_TRUE(EXPR)\t\t\t\t\\\n+  ASSERT_TRUE_AT (SELFTEST_LOCATION, (EXPR))\n+\n+/* Like ASSERT_TRUE, but treat LOC as the effective location of the\n+   selftest.  */\n+\n+#define ASSERT_TRUE_AT(LOC, EXPR)\t\t\t\\\n   SELFTEST_BEGIN_STMT\t\t\t\t\t\\\n   const char *desc = \"ASSERT_TRUE (\" #EXPR \")\";\t\t\\\n   bool actual = (EXPR);\t\t\t\t\t\\\n   if (actual)\t\t\t\t\t\t\\\n-    ::selftest::pass (SELFTEST_LOCATION, desc);\t\\\n+    ::selftest::pass ((LOC), desc);\t\t\t\\\n   else\t\t\t\t\t\t\t\\\n-    ::selftest::fail (SELFTEST_LOCATION, desc);\t\t\\\n+    ::selftest::fail ((LOC), desc);\t\t\t\\\n   SELFTEST_END_STMT\n \n /* Evaluate EXPR and coerce to bool, calling\n    ::selftest::pass if it is false,\n    ::selftest::fail if it true.  */\n \n #define ASSERT_FALSE(EXPR)\t\t\t\t\t\\\n+  ASSERT_FALSE_AT (SELFTEST_LOCATION, (EXPR))\n+\n+/* Like ASSERT_FALSE, but treat LOC as the effective location of the\n+   selftest.  */\n+\n+#define ASSERT_FALSE_AT(LOC, EXPR)\t\t\t\t\\\n   SELFTEST_BEGIN_STMT\t\t\t\t\t\t\\\n-  const char *desc = \"ASSERT_FALSE (\" #EXPR \")\";\t\t\\\n-  bool actual = (EXPR);\t\t\t\t\t\\\n-  if (actual)\t\t\t\t\t\t\t\\\n-    ::selftest::fail (SELFTEST_LOCATION, desc);\t\t\t\t\\\n-  else\t\t\t\t\t\t\t\t\\\n-    ::selftest::pass (SELFTEST_LOCATION, desc);\t\t\t\t\\\n+  const char *desc = \"ASSERT_FALSE (\" #EXPR \")\";\t\t\t\\\n+  bool actual = (EXPR);\t\t\t\t\t\t\t\\\n+  if (actual)\t\t\t\t\t\t\t\t\\\n+    ::selftest::fail ((LOC), desc);\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\t\\\n+    ::selftest::pass ((LOC), desc);\t\t\t\t\t\\\n   SELFTEST_END_STMT\n \n /* Evaluate EXPECTED and ACTUAL and compare them with ==, calling\n@@ -169,7 +181,7 @@ extern int num_passes;\n \t\t\t    (EXPECTED), (ACTUAL));\t\t    \\\n   SELFTEST_END_STMT\n \n-/* Like ASSERT_STREQ_AT, but treat LOC as the effective location of the\n+/* Like ASSERT_STREQ, but treat LOC as the effective location of the\n    selftest.  */\n \n #define ASSERT_STREQ_AT(LOC, EXPECTED, ACTUAL)\t\t\t    \\"}]}