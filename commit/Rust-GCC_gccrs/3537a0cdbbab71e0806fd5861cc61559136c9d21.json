{"sha": "3537a0cdbbab71e0806fd5861cc61559136c9d21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzUzN2EwY2RiYmFiNzFlMDgwNmZkNTg2MWNjNjE1NTkxMzZjOWQyMQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-09-14T08:50:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-09-14T08:50:01Z"}, "message": "builtin-types.def (BT_FN_CONST_STRING): Add.\n\n2012-09-14  Richard Guenther  <rguenther@suse.de>\n\n\t* builtin-types.def (BT_FN_CONST_STRING): Add.\n\t* builtins.def (BUILT_IN_FILE, BUILT_IN_FUNCTION,\n\tBUILT_IN_LINE): New builtins.\n\t* gimplify.c (gimplify_call_expr): Expand them.\n\t* doc/extend.texi (__builtin_LINE, __builtin_FUNCTION,\n\t__builtin_FILE): Document.\n\n\t* g++.dg/torture/builtin-location.C: New testcase.\n\nFrom-SVN: r191290", "tree": {"sha": "6931625451a04ffd6e6f89ff91104156c0dfa780", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6931625451a04ffd6e6f89ff91104156c0dfa780"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3537a0cdbbab71e0806fd5861cc61559136c9d21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3537a0cdbbab71e0806fd5861cc61559136c9d21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3537a0cdbbab71e0806fd5861cc61559136c9d21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3537a0cdbbab71e0806fd5861cc61559136c9d21/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "88cd48992cc739bf69876301661a118705784bef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88cd48992cc739bf69876301661a118705784bef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88cd48992cc739bf69876301661a118705784bef"}], "stats": {"total": 119, "additions": 104, "deletions": 15}, "files": [{"sha": "91a9033ba1749691119e2b17aacfdc20a040b604", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3537a0cdbbab71e0806fd5861cc61559136c9d21", "patch": "@@ -1,3 +1,12 @@\n+2012-09-14  Richard Guenther  <rguenther@suse.de>\n+\n+\t* builtin-types.def (BT_FN_CONST_STRING): Add.\n+\t* builtins.def (BUILT_IN_FILE, BUILT_IN_FUNCTION,\n+\tBUILT_IN_LINE): New builtins.\n+\t* gimplify.c (gimplify_call_expr): Expand them.\n+\t* doc/extend.texi (__builtin_LINE, __builtin_FUNCTION,\n+\t__builtin_FILE): Document.\n+\n 2012-09-13  Anthony Green  <green@moxielogic.com>\n \n \t* config/moxie/moxie.h (LINK_SPEC): Add bi-endian support."}, {"sha": "660300dea785dad8a6bb40916d7d610ef6252e03", "filename": "gcc/builtin-types.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2Fbuiltin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2Fbuiltin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltin-types.def?ref=3537a0cdbbab71e0806fd5861cc61559136c9d21", "patch": "@@ -140,6 +140,7 @@ DEF_POINTER_TYPE (BT_PTR_PTR, BT_PTR)\n DEF_FUNCTION_TYPE_0 (BT_FN_VOID, BT_VOID)\n DEF_FUNCTION_TYPE_0 (BT_FN_BOOL, BT_BOOL)\n DEF_FUNCTION_TYPE_0 (BT_FN_PTR, BT_PTR)\n+DEF_FUNCTION_TYPE_0 (BT_FN_CONST_STRING, BT_CONST_STRING)\n DEF_FUNCTION_TYPE_0 (BT_FN_PID, BT_PID)\n DEF_FUNCTION_TYPE_0 (BT_FN_INT, BT_INT)\n DEF_FUNCTION_TYPE_0 (BT_FN_UINT, BT_UINT)"}, {"sha": "8493ca41b345ae626a7f85b188acff8ab9455ef9", "filename": "gcc/builtins.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=3537a0cdbbab71e0806fd5861cc61559136c9d21", "patch": "@@ -801,6 +801,11 @@ DEF_BUILTIN_STUB (BUILT_IN_EH_POINTER, \"__builtin_eh_pointer\")\n DEF_BUILTIN_STUB (BUILT_IN_EH_FILTER, \"__builtin_eh_filter\")\n DEF_BUILTIN_STUB (BUILT_IN_EH_COPY_VALUES, \"__builtin_eh_copy_values\")\n \n+/* __FILE__, __LINE__, __FUNCTION__ as builtins.  */\n+DEF_GCC_BUILTIN (BUILT_IN_FILE, \"FILE\", BT_FN_CONST_STRING, ATTR_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN (BUILT_IN_FUNCTION, \"FUNCTION\", BT_FN_CONST_STRING, ATTR_NOTHROW_LEAF_LIST)\n+DEF_GCC_BUILTIN (BUILT_IN_LINE, \"LINE\", BT_FN_INT, ATTR_NOTHROW_LEAF_LIST)\n+\n /* Synchronization Primitives.  */\n #include \"sync-builtins.def\"\n "}, {"sha": "e850266de878bad76497182469df7bc8d17772c3", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=3537a0cdbbab71e0806fd5861cc61559136c9d21", "patch": "@@ -8324,6 +8324,21 @@ means that the compiler can assume for x, set to arg, that\n (char *) x - 8 is 32 byte aligned.\n @end deftypefn\n \n+@deftypefn {Built-in Function} int __builtin_LINE ()\n+This function is the equivalent to the preprocessor @code{__LINE__}\n+macro and returns the line number of the invocation of the built-in.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_FUNCTION ()\n+This function is the equivalent to the preprocessor @code{__FUNCTION__}\n+macro and returns the function name the invocation of the built-in is in.\n+@end deftypefn\n+\n+@deftypefn {Built-in Function} int __builtin_FILE ()\n+This function is the equivalent to the preprocessor @code{__FILE__}\n+macro and returns the file name the invocation of the built-in is in.\n+@end deftypefn\n+\n @deftypefn {Built-in Function} void __builtin___clear_cache (char *@var{begin}, char *@var{end})\n This function is used to flush the processor's instruction cache for\n the region of memory between @var{begin} inclusive and @var{end}"}, {"sha": "f73ac1e83ea1d0aa4fbaab035ff8f259fb27b216", "filename": "gcc/gimplify.c", "status": "modified", "additions": 39, "deletions": 15, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=3537a0cdbbab71e0806fd5861cc61559136c9d21", "patch": "@@ -2498,21 +2498,11 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n      transform all calls in the same manner as the expanders do, but\n      we do transform most of them.  */\n   fndecl = get_callee_fndecl (*expr_p);\n-  if (fndecl && DECL_BUILT_IN (fndecl))\n-    {\n-      tree new_tree = fold_call_expr (input_location, *expr_p, !want_value);\n-\n-      if (new_tree && new_tree != *expr_p)\n-\t{\n-\t  /* There was a transformation of this call which computes the\n-\t     same value, but in a more efficient way.  Return and try\n-\t     again.  */\n-\t  *expr_p = new_tree;\n-\t  return GS_OK;\n-\t}\n-\n-      if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL\n-\t  && DECL_FUNCTION_CODE (fndecl) == BUILT_IN_VA_START)\n+  if (fndecl\n+      && DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_NORMAL)\n+    switch (DECL_FUNCTION_CODE (fndecl))\n+      {\n+      case BUILT_IN_VA_START:\n         {\n \t  builtin_va_start_p = TRUE;\n \t  if (call_expr_nargs (*expr_p) < 2)\n@@ -2527,6 +2517,40 @@ gimplify_call_expr (tree *expr_p, gimple_seq *pre_p, bool want_value)\n \t      *expr_p = build_empty_stmt (EXPR_LOCATION (*expr_p));\n \t      return GS_OK;\n \t    }\n+\t  break;\n+\t}\n+      case BUILT_IN_LINE:\n+\t{\n+\t  expanded_location loc = expand_location (EXPR_LOCATION (*expr_p));\n+\t  *expr_p = build_int_cst (TREE_TYPE (*expr_p), loc.line);\n+\t  return GS_OK;\n+\t}\n+      case BUILT_IN_FILE:\n+\t{\n+\t  expanded_location loc = expand_location (EXPR_LOCATION (*expr_p));\n+\t  *expr_p = build_string_literal (strlen (loc.file) + 1, loc.file);\n+\t  return GS_OK;\n+\t}\n+      case BUILT_IN_FUNCTION:\n+\t{\n+\t  const char *function;\n+\t  function = IDENTIFIER_POINTER (DECL_NAME (current_function_decl));\n+\t  *expr_p = build_string_literal (strlen (function) + 1, function);\n+\t  return GS_OK;\n+\t}\n+      default:\n+        ;\n+      }\n+  if (fndecl && DECL_BUILT_IN (fndecl))\n+    {\n+      tree new_tree = fold_call_expr (input_location, *expr_p, !want_value);\n+      if (new_tree && new_tree != *expr_p)\n+\t{\n+\t  /* There was a transformation of this call which computes the\n+\t     same value, but in a more efficient way.  Return and try\n+\t     again.  */\n+\t  *expr_p = new_tree;\n+\t  return GS_OK;\n \t}\n     }\n "}, {"sha": "4bd658eb03b88077910786f7e1d0d9863c18a116", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3537a0cdbbab71e0806fd5861cc61559136c9d21", "patch": "@@ -1,3 +1,7 @@\n+2012-09-14  Richard Guenther  <rguenther@suse.de>\n+\n+\t* g++.dg/torture/builtin-location.C: New testcase.\n+\n 2012-09-13  Paolo Carlini  <paolo.carlini@oracle.com>\n \t    Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n "}, {"sha": "cad53de4b485c2a2ac09a746f96155dd0be92eb6", "filename": "gcc/testsuite/g++.dg/torture/builtin-location.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fbuiltin-location.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3537a0cdbbab71e0806fd5861cc61559136c9d21/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fbuiltin-location.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fbuiltin-location.C?ref=3537a0cdbbab71e0806fd5861cc61559136c9d21", "patch": "@@ -0,0 +1,31 @@\n+// { dg-do run }\n+\n+#include <cstring>\n+\n+const char *gfile;\n+const char *gfn;\n+int gline;\n+\n+void bar (const char *file = __builtin_FILE (),\n+\t  const char *function = __builtin_FUNCTION (),\n+\t  int line = __builtin_LINE ())\n+{\n+  gfile = file;\n+  gfn = function;\n+  gline = line;\n+}\n+\n+extern \"C\" void abort (void);\n+\n+int main()\n+{\n+  int here;\n+  bar (); here = __LINE__;\n+  if (std::strcmp (gfn, __FUNCTION__) != 0)\n+    abort ();\n+  if (std::strcmp (gfile, __FILE__) != 0)\n+    abort ();\n+  if (gline != here)\n+    abort ();\n+  return 0;\n+}"}]}