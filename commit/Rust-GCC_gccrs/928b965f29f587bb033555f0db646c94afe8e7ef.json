{"sha": "928b965f29f587bb033555f0db646c94afe8e7ef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTI4Yjk2NWYyOWY1ODdiYjAzMzU1NWYwZGI2NDZjOTRhZmU4ZTdlZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2018-03-18T10:25:29Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2018-03-18T10:25:29Z"}, "message": "Don't try to vectorise COND_EXPR reduction chains (PR 84913)\n\nThe testcase ICEd for both SVE and AVX512 because we were trying\nto vectorise a chain of COND_EXPRs as a reduction and getting\nconfused by reduc_index == -1.\n\n2018-03-18  Richard Sandiford  <richard.sandiford@linaro.org>\n\ngcc/\n\tPR tree-optimization/84913\n\t* tree-vect-loop.c (vectorizable_reduction): Don't try to\n\tvectorize chains of COND_EXPRs.\n\ngcc/testsuite/\n\tPR tree-optimization/84913\n\t* gfortran.dg/vect/pr84913.f90: New test.\n\nFrom-SVN: r258631", "tree": {"sha": "0e183b4538fea404815ada3c300fd059d50a5e8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e183b4538fea404815ada3c300fd059d50a5e8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/928b965f29f587bb033555f0db646c94afe8e7ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928b965f29f587bb033555f0db646c94afe8e7ef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/928b965f29f587bb033555f0db646c94afe8e7ef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/928b965f29f587bb033555f0db646c94afe8e7ef/comments", "author": null, "committer": null, "parents": [{"sha": "4a8298b46d966bcc979bb170b32a163db235f1b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a8298b46d966bcc979bb170b32a163db235f1b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a8298b46d966bcc979bb170b32a163db235f1b5"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "2a77e3b9245fdd471dbdae508c90ea0f4f00da8f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928b965f29f587bb033555f0db646c94afe8e7ef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928b965f29f587bb033555f0db646c94afe8e7ef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=928b965f29f587bb033555f0db646c94afe8e7ef", "patch": "@@ -1,3 +1,9 @@\n+2018-03-18  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/84913\n+\t* tree-vect-loop.c (vectorizable_reduction): Don't try to\n+\tvectorize chains of COND_EXPRs.\n+\n 2018-03-18  Chung-Ju Wu  <jasonwucj@gmail.com>\n \n \t* config/nds32/nds32.h (MAX_REGS_PER_ADDRESS): Fix the value."}, {"sha": "7d9a3fd4c2c93c86c7909778a95603379c89f979", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928b965f29f587bb033555f0db646c94afe8e7ef/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928b965f29f587bb033555f0db646c94afe8e7ef/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=928b965f29f587bb033555f0db646c94afe8e7ef", "patch": "@@ -1,3 +1,8 @@\n+2018-03-18  Richard Sandiford  <richard.sandiford@linaro.org>\n+\n+\tPR tree-optimization/84913\n+\t* gfortran.dg/vect/pr84913.f90: New test.\n+\n 2018-03-18  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/79929"}, {"sha": "f2ec4d233bff175ea2af8e1730b5a7e97fa39e97", "filename": "gcc/testsuite/gfortran.dg/vect/pr84913.f90", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928b965f29f587bb033555f0db646c94afe8e7ef/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr84913.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928b965f29f587bb033555f0db646c94afe8e7ef/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr84913.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fvect%2Fpr84913.f90?ref=928b965f29f587bb033555f0db646c94afe8e7ef", "patch": "@@ -0,0 +1,13 @@\n+! { dg-do compile }\n+\n+function foo(a, b, c, n)\n+  integer :: a(n), b(n), c(n), n, i, foo\n+  foo = 0\n+  do i = 1, n\n+    if (a(i) .eq. b(i)) then\n+      foo = 1\n+    else if (a(i) .eq. c(i)) then\n+      foo = 2\n+    end if\n+  end do\n+end function foo"}, {"sha": "7b3009aed2dcddcfd9153d06f1bf31fc2e08f131", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/928b965f29f587bb033555f0db646c94afe8e7ef/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/928b965f29f587bb033555f0db646c94afe8e7ef/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=928b965f29f587bb033555f0db646c94afe8e7ef", "patch": "@@ -6788,6 +6788,30 @@ vectorizable_reduction (gimple *stmt, gimple_stmt_iterator *gsi,\n   /* If we have a condition reduction, see if we can simplify it further.  */\n   if (v_reduc_type == COND_REDUCTION)\n     {\n+      /* TODO: We can't yet handle reduction chains, since we need to treat\n+\t each COND_EXPR in the chain specially, not just the last one.\n+\t E.g. for:\n+\n+\t    x_1 = PHI <x_3, ...>\n+\t    x_2 = a_2 ? ... : x_1;\n+\t    x_3 = a_3 ? ... : x_2;\n+\n+\t we're interested in the last element in x_3 for which a_2 || a_3\n+\t is true, whereas the current reduction chain handling would\n+\t vectorize x_2 as a normal VEC_COND_EXPR and only treat x_3\n+\t as a reduction operation.  */\n+      if (reduc_index == -1)\n+\t{\n+\t  if (dump_enabled_p ())\n+\t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,\n+\t\t\t     \"conditional reduction chains not supported\\n\");\n+\t  return false;\n+\t}\n+\n+      /* vect_is_simple_reduction ensured that operand 2 is the\n+\t loop-carried operand.  */\n+      gcc_assert (reduc_index == 2);\n+\n       /* Loop peeling modifies initial value of reduction PHI, which\n \t makes the reduction stmt to be transformed different to the\n \t original stmt analyzed.  We need to record reduction code for"}]}