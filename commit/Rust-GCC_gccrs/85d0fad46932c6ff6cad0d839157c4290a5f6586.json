{"sha": "85d0fad46932c6ff6cad0d839157c4290a5f6586", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVkMGZhZDQ2OTMyYzZmZjZjYWQwZDgzOTE1N2M0MjkwYTVmNjU4Ng==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-02T19:04:55Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-02T19:04:55Z"}, "message": "PR libstdc++/68197 fail on negative iword/pword indices\n\nThe suggested resolution of LWG 3083 is to make invalid indices\nundefined, but we can fairly easily check for them and treat them as\nerrors in the same way as allocation failure. This avoids a segfault or\nworse, setting an error flag on the stream instead.\n\n\tPR libstdc++/68197\n\t* include/bits/ios_base.h (ios_base::iword, ios_base::pword): Cast\n\tindices to unsigned.\n\t* src/c++11/ios.cc (ios_base::_M_grow_words): Treat negative indices\n\tas failure. Refactor error handling.\n\t* testsuite/27_io/ios_base/storage/68197.cc: New.\n\nFrom-SVN: r259854", "tree": {"sha": "db7f0ac922b90a89aa4e0b2f32f85e5891399070", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db7f0ac922b90a89aa4e0b2f32f85e5891399070"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85d0fad46932c6ff6cad0d839157c4290a5f6586", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d0fad46932c6ff6cad0d839157c4290a5f6586", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85d0fad46932c6ff6cad0d839157c4290a5f6586", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85d0fad46932c6ff6cad0d839157c4290a5f6586/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "006fbbe9526698a7828023b6710acc478b845e18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/006fbbe9526698a7828023b6710acc478b845e18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/006fbbe9526698a7828023b6710acc478b845e18"}], "stats": {"total": 165, "additions": 130, "deletions": 35}, "files": [{"sha": "b251187813fe1b80a93d86cafb0c21a0c6b1f3dc", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d0fad46932c6ff6cad0d839157c4290a5f6586/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d0fad46932c6ff6cad0d839157c4290a5f6586/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=85d0fad46932c6ff6cad0d839157c4290a5f6586", "patch": "@@ -1,5 +1,12 @@\n 2018-05-02  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/68197\n+\t* include/bits/ios_base.h (ios_base::iword, ios_base::pword): Cast\n+\tindices to unsigned.\n+\t* src/c++11/ios.cc (ios_base::_M_grow_words): Treat negative indices\n+\tas failure. Refactor error handling.\n+\t* testsuite/27_io/ios_base/storage/68197.cc: New.\n+\n \tPR libstdc++/57997\n \tPR libstdc++/83860\n \t* include/bits/gslice_array.h (gslice_array): Define default"}, {"sha": "c0c4e3b2abe3c9d6ca86f70670705f7abd38b24b", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d0fad46932c6ff6cad0d839157c4290a5f6586/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d0fad46932c6ff6cad0d839157c4290a5f6586/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=85d0fad46932c6ff6cad0d839157c4290a5f6586", "patch": "@@ -810,7 +810,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     long&\n     iword(int __ix)\n     {\n-      _Words& __word = (__ix < _M_word_size)\n+      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size)\n \t\t\t? _M_word[__ix] : _M_grow_words(__ix, true);\n       return __word._M_iword;\n     }\n@@ -831,7 +831,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     void*&\n     pword(int __ix)\n     {\n-      _Words& __word = (__ix < _M_word_size)\n+      _Words& __word = ((unsigned)__ix < (unsigned)_M_word_size)\n \t\t\t? _M_word[__ix] : _M_grow_words(__ix, false);\n       return __word._M_pword;\n     }"}, {"sha": "f5351777f90de3949284353d8196cddb96d853dc", "filename": "libstdc++-v3/src/c++11/ios.cc", "status": "modified", "additions": 26, "deletions": 33, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d0fad46932c6ff6cad0d839157c4290a5f6586/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d0fad46932c6ff6cad0d839157c4290a5f6586/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fios.cc?ref=85d0fad46932c6ff6cad0d839157c4290a5f6586", "patch": "@@ -109,37 +109,30 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   ios_base::register_callback(event_callback __fn, int __index)\n   { _M_callbacks = new _Callback_list(__fn, __index, _M_callbacks); }\n \n-  // 27.4.2.5  iword/pword storage\n+  // 27.4.2.5 [ios.base.storage] iword/pword storage\n   ios_base::_Words&\n   ios_base::_M_grow_words(int __ix, bool __iword)\n   {\n     // Precondition: _M_word_size <= __ix\n     int __newsize = _S_local_word_size;\n     _Words* __words = _M_local_word;\n-    if (__ix > _S_local_word_size - 1)\n+    const char* __error = nullptr;\n+    if ((unsigned)__ix >= (unsigned)numeric_limits<int>::max())\n+      __error = __N(\"ios_base::_M_grow_words is not valid\");\n+    else if (__ix > _S_local_word_size - 1)\n       {\n-\tif (__ix < numeric_limits<int>::max())\n+\t__newsize = __ix + 1;\n+\t/* We still need to catch bad_alloc even though we use\n+\t   a nothrow new, because the new-expression can throw\n+\t   a bad_array_new_length.  */\n+\t__try\n+\t  { __words = new (std::nothrow) _Words[__newsize]; }\n+\t__catch(const std::bad_alloc&)\n+\t  { __words = nullptr; }\n+\tif (!__words)\n+\t  __error = __N(\"ios_base::_M_grow_words allocation failed\");\n+\telse\n \t  {\n-\t    __newsize = __ix + 1;\n-\t    /* We still need to catch bad_alloc even though we use\n-\t       a nothrow new, because the new-expression can throw\n-\t       a bad_array_new_length.  */\n-\t    __try\n-\t      { __words = new (std::nothrow) _Words[__newsize]; }\n-\t    __catch(const std::bad_alloc&)\n-\t      { __words = nullptr; }\n-\t    if (!__words)\n-\t      {\n-\t\t_M_streambuf_state |= badbit;\n-\t\tif (_M_streambuf_state & _M_exception)\n-\t\t  __throw_ios_failure(__N(\"ios_base::_M_grow_words \"\n-\t\t\t\t\t  \"allocation failed\"));\n-\t\tif (__iword)\n-\t\t  _M_word_zero._M_iword = 0;\n-\t\telse\n-\t\t  _M_word_zero._M_pword = 0;\n-\t\treturn _M_word_zero;\n-\t      }\n \t    for (int __i = 0; __i < _M_word_size; __i++)\n \t      __words[__i] = _M_word[__i];\n \t    if (_M_word && _M_word != _M_local_word)\n@@ -148,17 +141,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t_M_word = 0;\n \t      }\n \t  }\n+      }\n+    if (__error)\n+      {\n+\t_M_streambuf_state |= badbit;\n+\tif (_M_streambuf_state & _M_exception)\n+\t  __throw_ios_failure(__error);\n+\tif (__iword)\n+\t  _M_word_zero._M_iword = 0;\n \telse\n-\t  {\n-\t    _M_streambuf_state |= badbit;\n-\t    if (_M_streambuf_state & _M_exception)\n-\t      __throw_ios_failure(__N(\"ios_base::_M_grow_words is not valid\"));\n-\t    if (__iword)\n-\t      _M_word_zero._M_iword = 0;\n-\t    else\n-\t      _M_word_zero._M_pword = 0;\n-\t    return _M_word_zero;\n-\t  }\n+\t  _M_word_zero._M_pword = 0;\n+\treturn _M_word_zero;\n       }\n     _M_word = __words;\n     _M_word_size = __newsize;"}, {"sha": "1004e8127c275f910ec07dd1c318ecf8a88ecf0f", "filename": "libstdc++-v3/testsuite/27_io/ios_base/storage/68197.cc", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85d0fad46932c6ff6cad0d839157c4290a5f6586/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F68197.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85d0fad46932c6ff6cad0d839157c4290a5f6586/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F68197.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_base%2Fstorage%2F68197.cc?ref=85d0fad46932c6ff6cad0d839157c4290a5f6586", "patch": "@@ -0,0 +1,95 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <ios>\n+#include <climits>\n+#include <testsuite_hooks.h>\n+\n+// PR libstdc++/68197\n+\n+struct sbuf : std::streambuf { } sb;\n+\n+void\n+test01()\n+{\n+  std::ios ios(&sb);\n+  long& i1 = ios.iword(-1);\n+  VERIFY( i1 == 0 );\n+  VERIFY( ios.bad() );\n+  ios.clear();\n+  i1 = 1;\n+  VERIFY( ios.iword(-1) == 0 );\n+  VERIFY( ios.bad() );\n+  ios.clear();\n+  long& i2 = ios.iword(INT_MIN);\n+  VERIFY( i2 == 0 );\n+  VERIFY( ios.bad() );\n+  ios.clear();\n+  i2 = 2;\n+  VERIFY( ios.iword(INT_MIN) == 0 );\n+  VERIFY( ios.bad() );\n+  ios.clear();\n+\n+  bool caught = false;\n+  ios.exceptions(std::ios::badbit);\n+  try {\n+    ios.iword(-1);\n+  } catch (const std::exception&) {\n+    caught = true;\n+  }\n+  VERIFY( caught );\n+}\n+\n+void\n+test02()\n+{\n+  std::ios ios(&sb);\n+  void*& p1 = ios.pword(-1);\n+  VERIFY( p1 == nullptr );\n+  VERIFY( ios.bad() );\n+  ios.clear();\n+  p1 = &p1;\n+  VERIFY( ios.pword(-1) == nullptr );\n+  VERIFY( ios.bad() );\n+  ios.clear();\n+  void*& p2 = ios.pword(INT_MIN);\n+  VERIFY( p2 == nullptr );\n+  VERIFY( ios.bad() );\n+  ios.clear();\n+  p2 = &p2;\n+  VERIFY( ios.pword(INT_MIN) == nullptr );\n+  VERIFY( ios.bad() );\n+  ios.clear();\n+\n+  bool caught = false;\n+  ios.exceptions(std::ios::badbit);\n+  try {\n+    ios.pword(-1);\n+  } catch (const std::exception&) {\n+    caught = true;\n+  }\n+  VERIFY( caught );\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}]}