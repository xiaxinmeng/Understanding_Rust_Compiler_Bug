{"sha": "a46e3824b7b28ed80225d3d05bde6386fc97949a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTQ2ZTM4MjRiN2IyOGVkODAyMjVkM2QwNWJkZTYzODZmYzk3OTQ5YQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-10-03T17:08:43Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-10-03T17:08:43Z"}, "message": "Fix broken commit wrt vect-shuffle-N.c tests.\n\nFrom-SVN: r179468", "tree": {"sha": "6b751f891764d1c3f7f0fe499ad3b11dd0d19181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b751f891764d1c3f7f0fe499ad3b11dd0d19181"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a46e3824b7b28ed80225d3d05bde6386fc97949a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46e3824b7b28ed80225d3d05bde6386fc97949a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a46e3824b7b28ed80225d3d05bde6386fc97949a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a46e3824b7b28ed80225d3d05bde6386fc97949a/comments", "author": null, "committer": null, "parents": [{"sha": "2b25763bcea8253f124fca96197ce8688f9403ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b25763bcea8253f124fca96197ce8688f9403ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b25763bcea8253f124fca96197ce8688f9403ff"}], "stats": {"total": 255, "additions": 8, "deletions": 247}, "files": [{"sha": "20f026121a4c8d907d360d9201ebc9a3ee14e8ee", "filename": "gcc/testsuite/gcc.c-torture/execute/vect-shuffle-1.c", "status": "modified", "additions": 3, "deletions": 49, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46e3824b7b28ed80225d3d05bde6386fc97949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46e3824b7b28ed80225d3d05bde6386fc97949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-1.c?ref=a46e3824b7b28ed80225d3d05bde6386fc97949a", "patch": "@@ -17,55 +17,9 @@ int main (int argc, char *argv[]) {\n     /*vector (8, short) v0 = {argc, 1,2,3,4,5,6,7};\n     vector (8, short) v1 = {argc, 1,argc,3,4,5,argc,7};\n     vector (8, short) v2;\n-   \n-    vector (8, short) smask = {0,0,1,2,3,4,5,6};\n-    \n-    v2 = __builtin_shuffle (v0,  smask);\n-    shufcompare (short, 8, v2, v0, smask);\n-    v2 = __builtin_shuffle (v0, v1);\n-    shufcompare (short, 8, v2, v0, v1);\n-    v2 = __builtin_shuffle (smask, v0);\n-    shufcompare (short, 8, v2, smask, v0);*/\n-\n-    vector (4, int) i0 = {argc, 1,2,3};\n-    vector (4, int) i1 = {argc, 1, argc, 3};\n-    vector (4, int) i2;\n-\n-    vector (4, int) imask = {0,3,2,1};\n-\n-    /*i2 = __builtin_shuffle (i0, imask);\n-    shufcompare (int, 4, i2, i0, imask);*/\n-    i2 = __builtin_shuffle (i0, i1);\n-    shufcompare (int, 4, i2, i0, i1);\n-    \n-    i2 = __builtin_shuffle (imask, i0);\n-    shufcompare (int, 4, i2, imask, i0);\n-    \n-    return 0;\n-}\n \n-#define vector(elcount, type)  \\\n-__attribute__((vector_size((elcount)*sizeof(type)))) type\n-\n-#define vidx(type, vec, idx) (*(((type *) &(vec)) + idx))\n-\n-#define shufcompare(type, count, vres, v0, mask) \\\n-do { \\\n-    int __i; \\\n-    for (__i = 0; __i < count; __i++) { \\\n-        if (vidx(type, vres, __i) != vidx(type, v0, vidx(type, mask, __i))) \\\n-            __builtin_abort (); \\\n-    } \\\n-} while (0)\n-\n-\n-int main (int argc, char *argv[]) {\n-    /*vector (8, short) v0 = {argc, 1,2,3,4,5,6,7};\n-    vector (8, short) v1 = {argc, 1,argc,3,4,5,argc,7};\n-    vector (8, short) v2;\n-   \n     vector (8, short) smask = {0,0,1,2,3,4,5,6};\n-    \n+\n     v2 = __builtin_shuffle (v0,  smask);\n     shufcompare (short, 8, v2, v0, smask);\n     v2 = __builtin_shuffle (v0, v1);\n@@ -83,10 +37,10 @@ int main (int argc, char *argv[]) {\n     shufcompare (int, 4, i2, i0, imask);*/\n     i2 = __builtin_shuffle (i0, i1);\n     shufcompare (int, 4, i2, i0, i1);\n-    \n+\n     i2 = __builtin_shuffle (imask, i0);\n     shufcompare (int, 4, i2, imask, i0);\n-    \n+\n     return 0;\n }\n "}, {"sha": "d886ad464bb11c875e4350f094c40cffef89f38d", "filename": "gcc/testsuite/gcc.c-torture/execute/vect-shuffle-2.c", "status": "modified", "additions": 0, "deletions": 44, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46e3824b7b28ed80225d3d05bde6386fc97949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46e3824b7b28ed80225d3d05bde6386fc97949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-2.c?ref=a46e3824b7b28ed80225d3d05bde6386fc97949a", "patch": "@@ -42,47 +42,3 @@ int main (int argc, char *argv[]) {\n     return 0;\n }\n \n-#define vector(elcount, type)  \\\n-__attribute__((vector_size((elcount)*sizeof(type)))) type\n-\n-#define vidx(type, vec, idx) (*(((type *) &(vec)) + idx))\n-\n-#define shuf2compare(type, count, vres, v0, v1, mask) \\\n-do { \\\n-    int __i; \\\n-    for (__i = 0; __i < count; __i++) { \\\n-        if (vidx(type, vres, __i) != ((vidx(type, mask, __i) < count) ? \\\n-                          vidx(type, v0, vidx(type, mask, __i)) :  \\\n-                          vidx(type, v1, (vidx(type, mask, __i) - count)))) \\\n-            __builtin_abort (); \\\n-        } \\\n-} while (0)\n-\n-\n-int main (int argc, char *argv[]) {\n-    vector (8, short) v0 = {5, 5,5,5,5,5,argc,7};\n-    vector (8, short) v1 = {argc, 1,8,8,4,9,argc,4};\n-    vector (8, short) v2;\n-\n-    //vector (8, short) mask = {1,2,5,4,3,6,7};\n-\n-    vector (8, short) mask0 = {0,2,3,1,4,5,6,7};\n-    vector (8, short) mask1 = {0,12,3,4,3,0,10,9};\n-\n-    vector (8, short) mask2 = {0,8,1,9,2,10,3,11};\n-\n-    v2 = __builtin_shuffle (v0, v1,  mask0);\n-    shuf2compare (short, 8, v2, v0, v1, mask0);\n-\n-    v2 = __builtin_shuffle (v0, v1,  mask1);\n-    shuf2compare (short, 8, v2, v0, v1, mask1);\n-\n-    v2 = __builtin_shuffle (v0, v1,  mask2);\n-    shuf2compare (short, 8, v2, v0, v1, mask2);\n-\n-    v2 = __builtin_shuffle (mask0, mask0,  v0);\n-    shuf2compare (short, 8, v2, mask0, mask0, v0);\n-\n-    return 0;\n-}\n-"}, {"sha": "91e26fb745e21600480e322f596359d78a077297", "filename": "gcc/testsuite/gcc.c-torture/execute/vect-shuffle-3.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46e3824b7b28ed80225d3d05bde6386fc97949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46e3824b7b28ed80225d3d05bde6386fc97949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-3.c?ref=a46e3824b7b28ed80225d3d05bde6386fc97949a", "patch": "@@ -24,43 +24,7 @@ int main (int argc, char *argv[]) {\n     vector (8, short) v2;\n \n     vector (8, short) mask = {0,0,1,2,3,4,5,6};\n-    \n-    v2 = f (v0,  mask);\n-    shufcompare (short, 8, v2, v0, mask);\n-\n-    v2 = f (v0, v1);\n-    shufcompare (short, 8, v2, v0, v1);\n-\n-    return 0;\n-}\n-\n-#define vector(elcount, type)  \\\n-__attribute__((vector_size((elcount)*sizeof(type)))) type\n-\n-#define vidx(type, vec, idx) (*(((type *) &(vec)) + idx))\n-\n-#define shufcompare(type, count, vres, v0, mask) \\\n-do { \\\n-    int __i; \\\n-    for (__i = 0; __i < count; __i++) { \\\n-        if (vidx(type, vres, __i) != vidx(type, v0, vidx(type, mask, __i))) \\\n-            __builtin_abort (); \\\n-    } \\\n-} while (0)\n \n-vector (8, short) __attribute__ ((noinline))\n-f (vector (8, short) x, vector (8, short) mask) {\n-    return __builtin_shuffle (x, mask);\n-}\n-\n-\n-int main (int argc, char *argv[]) {\n-    vector (8, short) v0 = {argc, 1,2,3,4,5,6,7};\n-    vector (8, short) v1 = {argc, 1,argc,3,4,5,argc,7};\n-    vector (8, short) v2;\n-\n-    vector (8, short) mask = {0,0,1,2,3,4,5,6};\n-    \n     v2 = f (v0,  mask);\n     shufcompare (short, 8, v2, v0, mask);\n "}, {"sha": "04b8712b87625deef19ee25a156cc0a0cd55b14d", "filename": "gcc/testsuite/gcc.c-torture/execute/vect-shuffle-4.c", "status": "modified", "additions": 2, "deletions": 52, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46e3824b7b28ed80225d3d05bde6386fc97949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46e3824b7b28ed80225d3d05bde6386fc97949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-4.c?ref=a46e3824b7b28ed80225d3d05bde6386fc97949a", "patch": "@@ -28,64 +28,14 @@ int main (int argc, char *argv[]) {\n     vector (8, short) v2;\n \n     //vector (8, short) mask = {1,2,5,4,3,6,7};\n-    \n-    vector (8, short) mask0 = {0,2,3,1,4,5,6,7};\n-    vector (8, short) mask1 = {0,12,3,4,3,0,10,9};\n-    vector (8, short) mask2 = {0,8,1,9,2,10,3,11};\n-\n-    v2 = f (v0, v1,  mask0);\n-    shuf2compare (short, 8, v2, v0, v1, mask0);\n- \n-    v2 = f (v0, v1,  mask1);\n-    shuf2compare (short, 8, v2, v0, v1, mask1);\n-\n-    v2 = f (v0, v1,  mask2);\n-    shuf2compare (short, 8, v2, v0, v1, mask2);\n-\n-    v2 = f (mask0, mask0,  v0);\n-    shuf2compare (short, 8, v2, mask0, mask0, v0);\n-\n-    return 0; \n-}\n-\n-#define vector(elcount, type)  \\\n-__attribute__((vector_size((elcount)*sizeof(type)))) type\n-\n-#define vidx(type, vec, idx) (*(((type *) &(vec)) + idx))\n \n-#define shuf2compare(type, count, vres, v0, v1, mask) \\\n-do { \\\n-    int __i; \\\n-    for (__i = 0; __i < count; __i++) { \\\n-        if (vidx(type, vres, __i) != ((vidx(type, mask, __i) < count) ? \\\n-                          vidx(type, v0, vidx(type, mask, __i)) :  \\\n-                          vidx(type, v1, (vidx(type, mask, __i) - count)))) \\\n-            __builtin_abort (); \\\n-        } \\\n-} while (0)\n-\n-\n-vector (8, short) __attribute__ ((noinline))\n-f (vector (8, short) x, vector (8, short) y, vector (8, short) mask) {\n-    return __builtin_shuffle (x, y, mask);\n-}\n-\n-\n-\n-int main (int argc, char *argv[]) {\n-    vector (8, short) v0 = {argc, 1,2,3,4,5,6,7};\n-    vector (8, short) v1 = {argc, 1,argc,3,4,5,argc,7};\n-    vector (8, short) v2;\n-\n-    //vector (8, short) mask = {1,2,5,4,3,6,7};\n-    \n     vector (8, short) mask0 = {0,2,3,1,4,5,6,7};\n     vector (8, short) mask1 = {0,12,3,4,3,0,10,9};\n     vector (8, short) mask2 = {0,8,1,9,2,10,3,11};\n \n     v2 = f (v0, v1,  mask0);\n     shuf2compare (short, 8, v2, v0, v1, mask0);\n- \n+\n     v2 = f (v0, v1,  mask1);\n     shuf2compare (short, 8, v2, v0, v1, mask1);\n \n@@ -95,6 +45,6 @@ int main (int argc, char *argv[]) {\n     v2 = f (mask0, mask0,  v0);\n     shuf2compare (short, 8, v2, mask0, mask0, v0);\n \n-    return 0; \n+    return 0;\n }\n "}, {"sha": "b5f566a63cd4d53ef5410e04868af053eba4de5a", "filename": "gcc/testsuite/gcc.c-torture/execute/vect-shuffle-5.c", "status": "modified", "additions": 3, "deletions": 66, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a46e3824b7b28ed80225d3d05bde6386fc97949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a46e3824b7b28ed80225d3d05bde6386fc97949a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvect-shuffle-5.c?ref=a46e3824b7b28ed80225d3d05bde6386fc97949a", "patch": "@@ -30,7 +30,7 @@ do { \\\n   test_compat_mask (res, c ## vec, mask); \\\n   test_compat_mask (res, r ## vec, mask); \\\n   test_compat_mask (res, d ## vec, mask); \\\n-  test_compat_mask (res, dc ## vec, mask); \n+  test_compat_mask (res, dc ## vec, mask);\n \n #define test_compat(res, vec, mask) \\\n   test_compat_vec (res, vec, mask); \\\n@@ -46,72 +46,8 @@ int main (int argc, char *argv[]) {\n     register vector (4, int) rvec = {argc, 1,2,3};\n     v4si dvec = {argc, 1,2,3};\n     v4sicst dcvec = {argc, 1,2,3};\n-    \n-    vector (4, int) res; \n-    v4si dres;\n-    register vector (4, int) rres;\n-\n-    vector (4, int) mask = {0,3,2,1};\n-    const vector (4, int) cmask = {0,3,2,1};\n-    register vector (4, int) rmask = {0,3,2,1};\n-    v4si dmask = {0,3,2,1};\n-    v4sicst dcmask = {0,3,2,1};\n-\n-    test_compat (res, vec, mask);\n-\n-    return 0;\n-}\n-\n-/* Test that different type variants are compatible within\n-   vector shuffling.  */\n \n-#define vector(elcount, type)  \\\n-__attribute__((vector_size((elcount)*sizeof(type)))) type\n-\n-#define shufcompare(count, vres, v0, mask) \\\n-do { \\\n-    int __i; \\\n-    for (__i = 0; __i < count; __i++) { \\\n-        if (vres[__i] != v0[mask[__i]]) \\\n-            __builtin_abort (); \\\n-    } \\\n-} while (0)\n-\n-#define test_compat_mask(res, vec, mask) \\\n-  res = __builtin_shuffle (vec, mask); \\\n-  shufcompare(4, res, vec, mask); \\\n-  res = __builtin_shuffle (vec, c ## mask); \\\n-  shufcompare(4, res, vec, c ##  mask); \\\n-  res = __builtin_shuffle (vec, r ## mask); \\\n-  shufcompare(4, res, vec, r ##  mask); \\\n-  res = __builtin_shuffle (vec, d ## mask); \\\n-  shufcompare(4, res, vec, d ##  mask); \\\n-  res = __builtin_shuffle (vec, dc ## mask); \\\n-  shufcompare(4, res, vec, dc ##  mask); \\\n-\n-#define test_compat_vec(res, vec, mask) \\\n-  test_compat_mask (res, vec, mask); \\\n-  test_compat_mask (res, c ## vec, mask); \\\n-  test_compat_mask (res, r ## vec, mask); \\\n-  test_compat_mask (res, d ## vec, mask); \\\n-  test_compat_mask (res, dc ## vec, mask); \n-\n-#define test_compat(res, vec, mask) \\\n-  test_compat_vec (res, vec, mask); \\\n-  test_compat_vec (d ## res, vec, mask); \\\n-  test_compat_vec (r ## res, vec, mask);\n-\n-typedef vector (4, int) v4si;\n-typedef const vector (4, int) v4sicst;\n-\n-int main (int argc, char *argv[]) {\n-    vector (4, int) vec = {argc, 1,2,3};\n-    const vector (4, int) cvec = {argc, 1,2,3};\n-    register vector (4, int) rvec = {argc, 1,2,3};\n-    v4si dvec = {argc, 1,2,3};\n-    v4sicst dcvec = {argc, 1,2,3};\n-    \n-    vector (4, int) res; \n+    vector (4, int) res;\n     v4si dres;\n     register vector (4, int) rres;\n \n@@ -126,3 +62,4 @@ int main (int argc, char *argv[]) {\n     return 0;\n }\n \n+"}]}