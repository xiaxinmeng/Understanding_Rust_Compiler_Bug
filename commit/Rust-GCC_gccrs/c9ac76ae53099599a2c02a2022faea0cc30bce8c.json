{"sha": "c9ac76ae53099599a2c02a2022faea0cc30bce8c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzlhYzc2YWU1MzA5OTU5OWEyYzAyYTIwMjJmYWVhMGNjMzBiY2U4Yw==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@linux-m68k.org", "date": "2012-08-17T21:56:48Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2012-08-17T21:56:48Z"}, "message": "floatformat.c (floatformat_to_double): Correctly handle numbers between 1 and 2.\n\n* floatformat.c (floatformat_to_double): Correctly handle numbers\nbetween 1 and 2.  Simplify handling of denormal number.\n(main): Test with 1.1.\n\nFrom-SVN: r190493", "tree": {"sha": "8971b1eb12312fdf532c61911edd479f8bcf47e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8971b1eb12312fdf532c61911edd479f8bcf47e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9ac76ae53099599a2c02a2022faea0cc30bce8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ac76ae53099599a2c02a2022faea0cc30bce8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9ac76ae53099599a2c02a2022faea0cc30bce8c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ac76ae53099599a2c02a2022faea0cc30bce8c/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e327d1a362b29d605f15678072700ffb39fc4917", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e327d1a362b29d605f15678072700ffb39fc4917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e327d1a362b29d605f15678072700ffb39fc4917"}], "stats": {"total": 44, "additions": 20, "deletions": 24}, "files": [{"sha": "0b720e762d7c66e00e0ed44009cd1ad7eaa996ff", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac76ae53099599a2c02a2022faea0cc30bce8c/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac76ae53099599a2c02a2022faea0cc30bce8c/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=c9ac76ae53099599a2c02a2022faea0cc30bce8c", "patch": "@@ -1,3 +1,9 @@\n+2012-08-17  Andreas Schwab  <schwab@linux-m68k.org>\n+\n+\t* floatformat.c (floatformat_to_double): Correctly handle numbers\n+\tbetween 1 and 2.  Simplify handling of denormal number.\n+\t(main): Test with 1.1.\n+\n 2012-07-31  Mike Frysinger  <vapier@gentoo.org>\n \n \t* md5.c (md5_finish_ctx): Declare swap_bytes.  Assign SWAP() output"}, {"sha": "c58ab01bce2d79811778064201c27a54eeb887c9", "filename": "libiberty/floatformat.c", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ac76ae53099599a2c02a2022faea0cc30bce8c/libiberty%2Ffloatformat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ac76ae53099599a2c02a2022faea0cc30bce8c/libiberty%2Ffloatformat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ffloatformat.c?ref=c9ac76ae53099599a2c02a2022faea0cc30bce8c", "patch": "@@ -1,5 +1,5 @@\n /* IEEE floating point support routines, for GDB, the GNU Debugger.\n-   Copyright 1991, 1994, 1999, 2000, 2003, 2005, 2006, 2010\n+   Copyright 1991, 1994, 1999, 2000, 2003, 2005, 2006, 2010, 2012\n    Free Software Foundation, Inc.\n \n This file is part of GDB.\n@@ -463,7 +463,6 @@ floatformat_to_double (const struct floatformat *fmt,\n   unsigned long mant;\n   unsigned int mant_bits, mant_off;\n   int mant_bits_left;\n-  int special_exponent;\t\t/* It's a NaN, denorm or zero */\n \n   /* Split values are not handled specially, since the top half has\n      the correctly rounded double value (in the only supported case of\n@@ -503,20 +502,20 @@ floatformat_to_double (const struct floatformat *fmt,\n   mant_off = fmt->man_start;\n   dto = 0.0;\n \n-  special_exponent = exponent == 0 || (unsigned long) exponent == fmt->exp_nan;\n-\n-  /* Don't bias zero's, denorms or NaNs.  */\n-  if (!special_exponent)\n-    exponent -= fmt->exp_bias;\n-\n   /* Build the result algebraically.  Might go infinite, underflow, etc;\n      who cares. */\n \n-  /* If this format uses a hidden bit, explicitly add it in now.  Otherwise,\n-     increment the exponent by one to account for the integer bit.  */\n-\n-  if (!special_exponent)\n+  /* For denorms use minimum exponent.  */\n+  if (exponent == 0)\n+    exponent = 1 - fmt->exp_bias;\n+  else\n     {\n+      exponent -= fmt->exp_bias;\n+\n+      /* If this format uses a hidden bit, explicitly add it in now.\n+\t Otherwise, increment the exponent by one to account for the\n+\t integer bit.  */\n+\n       if (fmt->intbit == floatformat_intbit_no)\n \tdto = ldexp (1.0, exponent);\n       else\n@@ -530,18 +529,8 @@ floatformat_to_double (const struct floatformat *fmt,\n       mant = get_field (ufrom, fmt->byteorder, fmt->totalsize,\n \t\t\t mant_off, mant_bits);\n \n-      /* Handle denormalized numbers.  FIXME: What should we do for\n-\t non-IEEE formats?  */\n-      if (special_exponent && exponent == 0 && mant != 0)\n-\tdto += ldexp ((double)mant,\n-\t\t      (- fmt->exp_bias\n-\t\t       - mant_bits\n-\t\t       - (mant_off - fmt->man_start)\n-\t\t       + 1));\n-      else\n-\tdto += ldexp ((double)mant, exponent - mant_bits);\n-      if (exponent != 0)\n-\texponent -= mant_bits;\n+      dto += ldexp ((double) mant, exponent - mant_bits);\n+      exponent -= mant_bits;\n       mant_off += mant_bits;\n       mant_bits_left -= mant_bits;\n     }\n@@ -756,6 +745,7 @@ main (void)\n {\n   ieee_test (0.0);\n   ieee_test (0.5);\n+  ieee_test (1.1);\n   ieee_test (256.0);\n   ieee_test (0.12345);\n   ieee_test (234235.78907234);"}]}