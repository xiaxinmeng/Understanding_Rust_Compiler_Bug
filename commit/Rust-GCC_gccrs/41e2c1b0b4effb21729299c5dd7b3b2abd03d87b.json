{"sha": "41e2c1b0b4effb21729299c5dd7b3b2abd03d87b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFlMmMxYjBiNGVmZmIyMTcyOTI5OWM1ZGQ3YjNiMmFiZDAzZDg3Yg==", "commit": {"author": {"name": "Prathamesh Kulkarni", "email": "prathamesh.kulkarni@linaro.org", "date": "2018-05-01T18:20:39Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-05-01T18:20:39Z"}, "message": "re PR tree-optimization/82665 (missing value range optimization for memchr)\n\n\tPR tree-optimization/82665\n\t* vr-values.c (vr_values::extract_range_from_binary_expr): Handle\n\tpointer subtraction where arguments come from a memchr call.\n\n        PR tree-optimization/82665\n\t* gcc.dg/tree-ssa/pr82665.c: New test.\n\nFrom-SVN: r259806", "tree": {"sha": "dbf282b7ccf2c09ed3ae8e666850c2bbf601db30", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbf282b7ccf2c09ed3ae8e666850c2bbf601db30"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41e2c1b0b4effb21729299c5dd7b3b2abd03d87b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e2c1b0b4effb21729299c5dd7b3b2abd03d87b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41e2c1b0b4effb21729299c5dd7b3b2abd03d87b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41e2c1b0b4effb21729299c5dd7b3b2abd03d87b/comments", "author": null, "committer": null, "parents": [{"sha": "1a142d6e6858e6fb58bab8592ee1223621867f1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a142d6e6858e6fb58bab8592ee1223621867f1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a142d6e6858e6fb58bab8592ee1223621867f1e"}], "stats": {"total": 76, "additions": 76, "deletions": 0}, "files": [{"sha": "2afdd79b158429555c21946c7b02f18607a457d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e2c1b0b4effb21729299c5dd7b3b2abd03d87b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e2c1b0b4effb21729299c5dd7b3b2abd03d87b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=41e2c1b0b4effb21729299c5dd7b3b2abd03d87b", "patch": "@@ -1,3 +1,9 @@\n+2018-05-01  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+\tPR tree-optimization/82665\n+\t* vr-values.c (vr_values::extract_range_from_binary_expr): Handle\n+\tpointer subtraction where arguments come from a memchr call.\n+\n 2018-05-01  Jakub Jelinek  <jakub@redhat.com>\n \n \t* configure.ac (LD_AS_NEEDED_OPTION, LD_NO_AS_NEEDED_OPTION): Use"}, {"sha": "cefe1ca326d9d207c21ad0a6815511dbfee84369", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e2c1b0b4effb21729299c5dd7b3b2abd03d87b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e2c1b0b4effb21729299c5dd7b3b2abd03d87b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41e2c1b0b4effb21729299c5dd7b3b2abd03d87b", "patch": "@@ -1,3 +1,8 @@\n+2018-05-01  Prathamesh Kulkarni  <prathamesh.kulkarni@linaro.org>\n+\n+        PR tree-optimization/82665\n+\t* gcc.dg/tree-ssa/pr82665.c: New test.\n+\n 2018-04-30  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c++/85523"}, {"sha": "66db32f46dbc1b863cce67a4cd399f2aacd06bf5", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr82665.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e2c1b0b4effb21729299c5dd7b3b2abd03d87b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr82665.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e2c1b0b4effb21729299c5dd7b3b2abd03d87b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr82665.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr82665.c?ref=41e2c1b0b4effb21729299c5dd7b3b2abd03d87b", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+void f1 (char *p, __SIZE_TYPE__ sz)\n+{\n+  char *q = __builtin_memchr (p, 0, sz);\n+  __PTRDIFF_TYPE__ n = q - p;\n+\n+  if (n >= __PTRDIFF_MAX__)\n+    __builtin_abort ();\n+}\n+\n+void f2 (unsigned char *p, __SIZE_TYPE__ sz)\n+{\n+  unsigned char *q = __builtin_memchr (p, 0, sz);\n+  __PTRDIFF_TYPE__ n = q - p;\n+\n+  if (n >= __PTRDIFF_MAX__)\n+    __builtin_abort ();\n+}\n+\n+void f3 (signed char *p, __SIZE_TYPE__ sz)\n+{\n+  signed char *q = __builtin_memchr (p, 0, sz);\n+  __PTRDIFF_TYPE__ n = q - p;\n+\n+  if (n >= __PTRDIFF_MAX__)\n+    __builtin_abort ();\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-not \"memchr\" \"optimized\" } } */"}, {"sha": "74f813e7334f78c864c9bb358a7000192060c6cc", "filename": "gcc/vr-values.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41e2c1b0b4effb21729299c5dd7b3b2abd03d87b/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41e2c1b0b4effb21729299c5dd7b3b2abd03d87b/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=41e2c1b0b4effb21729299c5dd7b3b2abd03d87b", "patch": "@@ -793,6 +793,39 @@ vr_values::extract_range_from_binary_expr (value_range *vr,\n \n   extract_range_from_binary_expr_1 (vr, code, expr_type, &vr0, &vr1);\n \n+  /* Set value_range for n in following sequence:\n+     def = __builtin_memchr (arg, 0, sz)\n+     n = def - arg\n+     Here the range for n can be set to [0, PTRDIFF_MAX - 1]. */\n+\n+  if (vr->type == VR_VARYING\n+      && code == POINTER_DIFF_EXPR\n+      && TREE_CODE (op0) == SSA_NAME\n+      && TREE_CODE (op1) == SSA_NAME)\n+    {\n+      tree op0_ptype = TREE_TYPE (TREE_TYPE (op0));\n+      tree op1_ptype = TREE_TYPE (TREE_TYPE (op1));\n+      gcall *call_stmt = NULL;\n+\n+      if (TYPE_MODE (op0_ptype) == TYPE_MODE (char_type_node)\n+\t  && TYPE_PRECISION (op0_ptype) == TYPE_PRECISION (char_type_node)\n+\t  && TYPE_MODE (op1_ptype) == TYPE_MODE (char_type_node)\n+\t  && TYPE_PRECISION (op1_ptype) == TYPE_PRECISION (char_type_node)\n+\t  && (call_stmt = dyn_cast<gcall *>(SSA_NAME_DEF_STMT (op0)))\n+\t  && gimple_call_builtin_p (call_stmt, BUILT_IN_MEMCHR)\n+\t  && operand_equal_p (op0, gimple_call_lhs (call_stmt), 0)\n+\t  && operand_equal_p (op1, gimple_call_arg (call_stmt, 0), 0)\n+\t  && integer_zerop (gimple_call_arg (call_stmt, 1)))\n+\t    {\n+\t      tree max = vrp_val_max (ptrdiff_type_node);\n+\t      wide_int wmax = wi::to_wide (max, TYPE_PRECISION (TREE_TYPE (max)));\n+\t      tree range_min = build_zero_cst (expr_type);\n+\t      tree range_max = wide_int_to_tree (expr_type, wmax - 1);\n+\t      set_value_range (vr, VR_RANGE, range_min, range_max, NULL);\n+\t      return;\n+\t    }\n+     }\n+\n   /* Try harder for PLUS and MINUS if the range of one operand is symbolic\n      and based on the other operand, for example if it was deduced from a\n      symbolic comparison.  When a bound of the range of the first operand"}]}