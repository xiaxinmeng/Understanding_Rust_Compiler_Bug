{"sha": "b37695c9bf101a3a30a231cfeb6da7a6c17657d6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjM3Njk1YzliZjEwMWEzYTMwYTIzMWNmZWI2ZGE3YTZjMTc2NTdkNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-16T20:23:12Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2021-02-16T20:26:51Z"}, "message": "c++: directives-only preprocessing and include translation [PR 99050]\n\nWe make sure files end in \\n by placing one at the limit of the buffer\n(just past the end of what is read).  We need to do the same for\nbuffers generated via include-translation.  Fortunately they have\nspace.\n\n\tlibcpp/\n\t* files.c (_cpp_stack_file): Make buffers end in unread \\n.\n\tgcc/testsuite/\n\t* g++.dg/modules/pr99050_a.H: New.\n\t* g++.dg/modules/pr99050_b.C: New.", "tree": {"sha": "20733ade4d65e611ce39800abc5ac2403c440bfd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20733ade4d65e611ce39800abc5ac2403c440bfd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b37695c9bf101a3a30a231cfeb6da7a6c17657d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37695c9bf101a3a30a231cfeb6da7a6c17657d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b37695c9bf101a3a30a231cfeb6da7a6c17657d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b37695c9bf101a3a30a231cfeb6da7a6c17657d6/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30a4d95bf76b0a0fdb66ac0211589a4434c83af3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a4d95bf76b0a0fdb66ac0211589a4434c83af3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a4d95bf76b0a0fdb66ac0211589a4434c83af3"}], "stats": {"total": 21, "additions": 18, "deletions": 3}, "files": [{"sha": "137e37f567fde4efe2fa17857a51697ff4e42519", "filename": "gcc/testsuite/g++.dg/modules/pr99050_a.H", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37695c9bf101a3a30a231cfeb6da7a6c17657d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99050_a.H", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37695c9bf101a3a30a231cfeb6da7a6c17657d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99050_a.H", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99050_a.H?ref=b37695c9bf101a3a30a231cfeb6da7a6c17657d6", "patch": "@@ -0,0 +1,4 @@\n+// PR c++/99050 ICE with directives only\n+// { dg-additional-options -fmodule-header }\n+// { dg-module-cmi {} }\n+void f ();"}, {"sha": "439e216eb166cb28f16ee49e5f272a144d674989", "filename": "gcc/testsuite/g++.dg/modules/pr99050_b.C", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37695c9bf101a3a30a231cfeb6da7a6c17657d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99050_b.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37695c9bf101a3a30a231cfeb6da7a6c17657d6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99050_b.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fmodules%2Fpr99050_b.C?ref=b37695c9bf101a3a30a231cfeb6da7a6c17657d6", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do preprocess }\n+// { dg-additional-options {-fdirectives-only -fmodules-ts} }\n+#include \"pr99050_a.H\"\n+\n+int main () {}\n+\n+// { dg-final { scan-file pr99050_b.i {import  \"[^\\n]*99050_a.H\" \\[\\[__translated\\]\\];\\n} }  }"}, {"sha": "3a35f7c9743aa2fd0284a2444e40bf1a077da2f1", "filename": "libcpp/files.c", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b37695c9bf101a3a30a231cfeb6da7a6c17657d6/libcpp%2Ffiles.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b37695c9bf101a3a30a231cfeb6da7a6c17657d6/libcpp%2Ffiles.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ffiles.c?ref=b37695c9bf101a3a30a231cfeb6da7a6c17657d6", "patch": "@@ -918,13 +918,17 @@ _cpp_stack_file (cpp_reader *pfile, _cpp_file *file, include_type type,\n \t because we don't usually need that location (we're popping an\n \t include file).  However in this case we do want to do the\n \t increment.  So push a writable buffer of two newlines to acheive\n-\t that.  */\n-      static uchar newlines[] = \"\\n\\n\";\n+\t that.  (We also need an extra newline, so this looks like a regular\n+\t file, which we do that to to make sure we don't fall off the end in the\n+\t middle of a line.  */\n+      static uchar newlines[] = \"\\n\\n\\n\";\n       cpp_push_buffer (pfile, newlines, 2, true);\n \n+      size_t len = strlen (buf);\n+      buf[len] = '\\n'; /* See above  */\n       cpp_buffer *buffer\n \t= cpp_push_buffer (pfile, reinterpret_cast<unsigned char *> (buf),\n-\t\t\t   strlen (buf), true);\n+\t\t\t   len, true);\n       buffer->to_free = buffer->buf;\n \n       file->header_unit = +1;"}]}