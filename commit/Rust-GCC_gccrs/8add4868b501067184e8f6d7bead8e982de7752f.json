{"sha": "8add4868b501067184e8f6d7bead8e982de7752f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGFkZDQ4NjhiNTAxMDY3MTg0ZThmNmQ3YmVhZDhlOTgyZGU3NzUyZg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2014-08-15T16:23:47Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2014-08-15T16:23:47Z"}, "message": "re PR c++/62072 (No SFINAE performed for function type)\n\n/cp\n2014-08-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/62072\n\tRevert:\n\t2014-07-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tDR 1584\n\tPR c++/57466\n\t* pt.c (check_cv_quals_for_unify): Implement resolution, disregard\n\tcv-qualifiers of function types.\n\n/testsuite\n2014-08-15  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/62072\n\tRevert:\n\t2014-07-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tDR 1584\n\tPR c++/57466\n\t* g++.dg/template/pr57466.C: New.\n\t* g++.dg/cpp0x/pr57466.C: Likewise.\n\t* g++.dg/template/unify6.C: Update.\n\n\t* g++.dg/cpp0x/sfinae52.C: New.\n\nFrom-SVN: r214027", "tree": {"sha": "9aa95ba9eee7886da6acd98b84eb144f2fa6e218", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9aa95ba9eee7886da6acd98b84eb144f2fa6e218"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8add4868b501067184e8f6d7bead8e982de7752f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8add4868b501067184e8f6d7bead8e982de7752f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8add4868b501067184e8f6d7bead8e982de7752f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8add4868b501067184e8f6d7bead8e982de7752f/comments", "author": null, "committer": null, "parents": [{"sha": "598fc08518078da824ddfb97ae9caf4ed6c93dd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/598fc08518078da824ddfb97ae9caf4ed6c93dd4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/598fc08518078da824ddfb97ae9caf4ed6c93dd4"}], "stats": {"total": 88, "additions": 52, "deletions": 36}, "files": [{"sha": "6623e96df350ab3344321983ebff59871e239456", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8add4868b501067184e8f6d7bead8e982de7752f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8add4868b501067184e8f6d7bead8e982de7752f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=8add4868b501067184e8f6d7bead8e982de7752f", "patch": "@@ -1,3 +1,14 @@\n+2014-08-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/62072\n+\tRevert:\n+\t2014-07-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tDR 1584\n+\tPR c++/57466\n+\t* pt.c (check_cv_quals_for_unify): Implement resolution, disregard\n+\tcv-qualifiers of function types.\n+\n 2014-08-15  Manuel Lopez-Ibanez  <manu@gcc.gnu.org>\n \n \t* call.c (build_conditional_expr_1): Use OPT_Wextra in warning."}, {"sha": "6a7bcb819c2b73be90a1866a157fc0d6e0d2b86c", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8add4868b501067184e8f6d7bead8e982de7752f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8add4868b501067184e8f6d7bead8e982de7752f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=8add4868b501067184e8f6d7bead8e982de7752f", "patch": "@@ -17284,11 +17284,6 @@ check_cv_quals_for_unify (int strict, tree arg, tree parm)\n   int arg_quals = cp_type_quals (arg);\n   int parm_quals = cp_type_quals (parm);\n \n-  /* DR 1584: cv-qualification of a deduced function type is\n-     ignored; see 8.3.5 [dcl.fct].  */\n-  if (TREE_CODE (arg) == FUNCTION_TYPE)\n-    return 1;\n-\n   if (TREE_CODE (parm) == TEMPLATE_TYPE_PARM\n       && !(strict & UNIFY_ALLOW_OUTER_MORE_CV_QUAL))\n     {"}, {"sha": "3f19ce745a07b97d081a66d707ca05c89b70ea8a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8add4868b501067184e8f6d7bead8e982de7752f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8add4868b501067184e8f6d7bead8e982de7752f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8add4868b501067184e8f6d7bead8e982de7752f", "patch": "@@ -1,3 +1,17 @@\n+2014-08-15  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/62072\n+\tRevert:\n+\t2014-07-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tDR 1584\n+\tPR c++/57466\n+\t* g++.dg/template/pr57466.C: New.\n+\t* g++.dg/cpp0x/pr57466.C: Likewise.\n+\t* g++.dg/template/unify6.C: Update.\n+\n+\t* g++.dg/cpp0x/sfinae52.C: New.\n+\n 2014-08-15  Ilya Tocar  <tocarip@gmail.com>\n \n \tPR target/61878"}, {"sha": "792a3cb9afb499a6c28d5eb7c27806332029294d", "filename": "gcc/testsuite/g++.dg/cpp0x/pr57466.C", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598fc08518078da824ddfb97ae9caf4ed6c93dd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57466.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598fc08518078da824ddfb97ae9caf4ed6c93dd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57466.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fpr57466.C?ref=598fc08518078da824ddfb97ae9caf4ed6c93dd4", "patch": "@@ -1,18 +0,0 @@\n-// PR c++/57466\n-// { dg-do compile { target c++11 } }\n-\n-template<typename T>\n-  constexpr bool\n-  is_pointer(const T*)\n-  { return true; }\n-\n-template<typename T>\n-  constexpr bool\n-  is_pointer(const T&)\n-  { return false; }\n-\n-using F = void();\n-\n-constexpr F* f = nullptr;\n-\n-static_assert( is_pointer(f), \"function pointer is a pointer\" );"}, {"sha": "f255ee120c427fdb62bd10512d719e14acfa3c18", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae52.C", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8add4868b501067184e8f6d7bead8e982de7752f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae52.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8add4868b501067184e8f6d7bead8e982de7752f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae52.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae52.C?ref=8add4868b501067184e8f6d7bead8e982de7752f", "patch": "@@ -0,0 +1,21 @@\n+// PR c++/62072\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T> struct tuple_size {};\n+template<typename T> struct tuple_size<T const> : tuple_size<T> {};\n+\n+template<typename T, typename = void>\n+struct query {\n+    static constexpr bool value = false;\n+};\n+template<typename T>\n+struct query<T, typename tuple_size<T>::type> {\n+    static constexpr bool value = true;\n+};\n+\n+// fine\n+static_assert( !query<int>::value, \"\" );\n+static_assert( !query<int const>::value, \"\" );\n+\n+// error: invalid use of incomplete type 'struct tuple_size<void()>'\n+static_assert( !query<void()>::value, \"\" );"}, {"sha": "6dd37102ef63e0d4aaa1a83cc2122f21dca474cd", "filename": "gcc/testsuite/g++.dg/template/pr57466.C", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/598fc08518078da824ddfb97ae9caf4ed6c93dd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr57466.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/598fc08518078da824ddfb97ae9caf4ed6c93dd4/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr57466.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fpr57466.C?ref=598fc08518078da824ddfb97ae9caf4ed6c93dd4", "patch": "@@ -1,8 +0,0 @@\n-// DR 1584, PR c++/57466\n-\n-template<class T> void f2(const T*);\n-void g2();\n-\n-void m() {\n-  f2(g2);    // OK: cv-qualification of deduced function type ignored\n-}"}, {"sha": "551c96ebb9fedc8915164f6fa7c70db8c64d2b67", "filename": "gcc/testsuite/g++.dg/template/unify6.C", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8add4868b501067184e8f6d7bead8e982de7752f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8add4868b501067184e8f6d7bead8e982de7752f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Funify6.C?ref=8add4868b501067184e8f6d7bead8e982de7752f", "patch": "@@ -3,20 +3,21 @@\n \n void Baz ();\n \n-template <typename T> void Foo1 (T *);\n-template <typename T> void Foo1 (T const *a) {a (1);} // { dg-error \"too many arguments\" }\n+template <typename T> void Foo1 (T *); // #1\n+template <typename T> void Foo1 (T const *a) {a (1);} // #2\n \n template <typename T> T const *Foo2 (T *);\n \n-template <typename T> void Foo3 (T *, T const * = 0);\n+template <typename T> void Foo3 (T *, T const * = 0); // { dg-message \"note\" }\n \n void Bar ()\n {\n-  Foo1 (&Baz); // { dg-message \"required from here\" }\n+  Foo1 (&Baz); // #1\n \n   Foo2 (&Baz);\n \n   Foo3 (&Baz);\n \n-  Foo3 (&Baz, &Baz);\n+  Foo3 (&Baz, &Baz); // { dg-error \"no matching function\" \"\" }\n+  // { dg-message \"(candidate|incompatible cv-qualifiers)\" \"candidate note\" { target *-*-* } 21 }\n }"}]}