{"sha": "e466dc8a4ab0761107e2d7513471985256c2605e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTQ2NmRjOGE0YWIwNzYxMTA3ZTJkNzUxMzQ3MTk4NTI1NmMyNjA1ZQ==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-12T11:45:23Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2000-10-12T11:45:23Z"}, "message": "Makefile.am: Use it.\n\n\n2000-10-11  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n\n\t* libsupc++/Makefile.am: Use it.\n\t* libio/Makefile.am: Use it.\n\t* libmath/Makefile.am: Use it.\n\t* src/Makefile.am: Use it.\n\t* Makefile.am (AM_MAKEFLAGS): Remove includes.\n\n\t* acinclude.m4 (GLIBCPP_EXPORT_INCLUES): Move include macros here.\n\t(GLIBCPP_EXPORT_FLAGS): Move CXX flag setting here.\n\t* configure.in: Use it.\n\n\t* mkcheck.in (SRC_DIR): Use C_INCLUDE_DIR.\n\nFrom-SVN: r36847", "tree": {"sha": "7f6039bd616b820b96f24b611150b025625af2b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f6039bd616b820b96f24b611150b025625af2b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e466dc8a4ab0761107e2d7513471985256c2605e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e466dc8a4ab0761107e2d7513471985256c2605e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e466dc8a4ab0761107e2d7513471985256c2605e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e466dc8a4ab0761107e2d7513471985256c2605e/comments", "author": null, "committer": null, "parents": [{"sha": "bc87c1c88de266c0cbfdff0ac13e1d88d54151f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bc87c1c88de266c0cbfdff0ac13e1d88d54151f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bc87c1c88de266c0cbfdff0ac13e1d88d54151f4"}], "stats": {"total": 2530, "additions": 1386, "deletions": 1144}, "files": [{"sha": "460b5da0ac2656a9b07c9f0df2fc2b1bde89e4c9", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -1,3 +1,17 @@\n+2000-10-11  Benjamin Kosnik  <bkoz@purist.soma.redhat.com>\n+\n+\t* libsupc++/Makefile.am: Use it.\n+\t* libio/Makefile.am: Use it.\n+\t* libmath/Makefile.am: Use it.\n+\t* src/Makefile.am: Use it.\n+\t* Makefile.am (AM_MAKEFLAGS): Remove includes.\n+\n+\t* acinclude.m4 (GLIBCPP_EXPORT_INCLUES): Move include macros here.\n+\t(GLIBCPP_EXPORT_FLAGS): Move CXX flag setting here.\n+\t* configure.in: Use it.\n+\n+\t* mkcheck.in (SRC_DIR): Use C_INCLUDE_DIR.\n+\t\n 2000-10-11  Phil Edwards  <pme@sources.redhat.com>\n \n \t* acinclude.m4 (GLIBCPP_CHECK_LINKER_FEATURES):  Comment out"}, {"sha": "ced6ed6bc9a8a99333701ab71e826d27c1fe6920", "filename": "libstdc++-v3/Makefile.am", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.am?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -32,54 +32,6 @@ gxx_include_dir=$(includedir)/g++\n SUBDIRS = libio libmath libsupc++ src\n \n \n-# Compile flags that should be constant throughout the build, both for\n-# SUBDIRS and for libstdc++-v3 in general.\n-# Optimization flags that are probably a good idea for thrill-seekers. Just\n-# uncomment the lines below and make, everything else is ready to go... \n-# OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc \n-OPTIMIZE_CXXFLAGS = \n-\n-# Warning flags to use.\n-WARN_CXXFLAGS = \\\n-\t-Wall -Wno-format -W -Wwrite-strings -Winline \\\n-\t$(WERROR) @WFMT_FLAGS@\n-\n-# These bits are all figured out from configure. Look in acinclude.m4\n-# or configure.in to see how they are set.\n-# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS = \\\n-\t@EXTRA_CXX_FLAGS@ \\\n-\t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n-\n-\n-# Root level of the include sources.\n-GLIBCPP_INCLUDE_DIR = $(top_srcdir)/include\n-\n-# Can either use include/c or include/c_std to grab \"C\" headers. This\n-# variable is set to the include directory currently in use.\n-C_INCLUDE_DIR = $(GLIBCPP_INCLUDE_DIR)/@c_include_dir@\n-\n-\n-# Passed down for cross compilers, canadian crosses.\n-TOPLEVEL_INCLUDES = -I$(includedir)\n-\n-LIBMATH_INCLUDES = -I$(top_srcdir)/libmath\n-\n-if GLIBCPP_NEED_LIBIO\n-LIBIO_INCLUDES = \\\n-\t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n-else\n-LIBIO_INCLUDES = -I$(top_srcdir)/libio\n-endif\n-\n-LIBSUPCXX_INCLUDES = -I$(top_srcdir)/libsupc++\n-\n-# XXX May need to add this in later to enabled shadow header includes\n-#\t-I$(top_builddir)/cshadow\n-CSHADOW_INCLUDES = \\\n-\t-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)\n-\n-\n # Use $(blddir) instead of $(top_builddir) for arguments to \"mkcheck\"\n # because then the paths will be full pathnames, not relative\n # pathnames. (-Wl,--rpath seems to like this better.)\n@@ -174,14 +126,4 @@ AM_MAKEFLAGS = \\\n \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \\\n \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \\\n \t\"DESTDIR=$(DESTDIR)\" \\\n-\t\"WERROR=$(WERROR)\" \\\n-\t\"OPTIMIZE_CXXFLAGS=$(OPTIMIZE_CXXFLAGS)\" \\\n-\t\"WARN_CXXFLAGS=$(WARN_CXXFLAGS)\" \\\n-\t\"CONFIG_CXXFLAGS=$(CONFIG_CXXFLAGS)\" \\\n-\t\"GLIBCPP_INCLUDE_DIR=$(GLIBCPP_INCLUDE_DIR)\" \\\n-\t\"C_INCLUDE_DIR=$(C_INCLUDE_DIR)\" \\\n-\t\"TOPLEVEL_INCLUDES=$(TOPLEVEL_INCLUDES)\" \\\n-\t\"LIBMATH_INCLUDES=$(LIBMATH_INCLUDES)\" \\\n-\t\"LIBIO_INCLUDES=$(LIBIO_INCLUDES)\" \\\n-\t\"CSHADOW_INCLUDES=$(CSHADOW_INCLUDES)\" \\\n-\t\"LIBSUPCXX_INCLUDES=$(LIBSUPCXX_INCLUDES)\"\n+\t\"WERROR=$(WERROR)\" \n\\ No newline at end of file"}, {"sha": "c34a2a40743be7e11399a6f2c89f5be8e1a02bb4", "filename": "libstdc++-v3/Makefile.in", "status": "modified", "additions": 11, "deletions": 41, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FMakefile.in?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -67,9 +67,11 @@ AR = @AR@\n AS = @AS@\n CC = @CC@\n CPP = @CPP@\n-CSHADOWFLAGS = @CSHADOWFLAGS@\n+CSHADOW_FLAGS = @CSHADOW_FLAGS@\n+CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n DLLTOOL = @DLLTOOL@\n EXEEXT = @EXEEXT@\n@@ -79,25 +81,31 @@ GCJ = @GCJ@\n GCJFLAGS = @GCJFLAGS@\n GLIBCPP_CFLAGS = @GLIBCPP_CFLAGS@\n GLIBCPP_CXXFLAGS = @GLIBCPP_CXXFLAGS@\n+GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n LIBMATHOBJS = @LIBMATHOBJS@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n LIBSTRINGOBJS = @LIBSTRINGOBJS@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n LIBTOOL = @LIBTOOL@\n LN_S = @LN_S@\n MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n+OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n SECTION_FLAGS = @SECTION_FLAGS@\n SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n+WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n-c_include_dir = @c_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n@@ -112,44 +120,6 @@ gxx_include_dir = $(includedir)/g++\n \n SUBDIRS = libio libmath libsupc++ src\n \n-# Compile flags that should be constant throughout the build, both for\n-# SUBDIRS and for libstdc++-v3 in general.\n-# Optimization flags that are probably a good idea for thrill-seekers. Just\n-# uncomment the lines below and make, everything else is ready to go... \n-# OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc \n-OPTIMIZE_CXXFLAGS = \n-\n-# Warning flags to use.\n-WARN_CXXFLAGS =  \t-Wall -Wno-format -W -Wwrite-strings -Winline \t$(WERROR) @WFMT_FLAGS@\n-\n-\n-# These bits are all figured out from configure. Look in acinclude.m4\n-# or configure.in to see how they are set.\n-# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n-CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ \t@SECTION_FLAGS@ @CSHADOWFLAGS@ @DEBUG_FLAGS@ \n-\n-\n-# Root level of the include sources.\n-GLIBCPP_INCLUDE_DIR = $(top_srcdir)/include\n-\n-# Can either use include/c or include/c_std to grab \"C\" headers. This\n-# variable is set to the include directory currently in use.\n-C_INCLUDE_DIR = $(GLIBCPP_INCLUDE_DIR)/@c_include_dir@\n-\n-# Passed down for cross compilers, canadian crosses.\n-TOPLEVEL_INCLUDES = -I$(includedir)\n-\n-LIBMATH_INCLUDES = -I$(top_srcdir)/libmath\n-@GLIBCPP_NEED_LIBIO_TRUE@LIBIO_INCLUDES = \t-I$(top_builddir)/libio -I$(top_srcdir)/libio \n-@GLIBCPP_NEED_LIBIO_FALSE@LIBIO_INCLUDES = -I$(top_srcdir)/libio\n-\n-LIBSUPCXX_INCLUDES = -I$(top_srcdir)/libsupc++\n-\n-# XXX May need to add this in later to enabled shadow header includes\n-#\t-I$(top_builddir)/cshadow\n-CSHADOW_INCLUDES =  \t-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)\n-\n-\n # Multilib support.\n MAKEOVERRIDES = \n \n@@ -164,7 +134,7 @@ MULTICLEAN = true\n # Work around what appears to be a GNU make bug handling MAKEFLAGS\n # values defined in terms of make variables, as is the case for CC and\n # friends when we are called from the top level Makefile.\n-AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \t\"OPTIMIZE_CXXFLAGS=$(OPTIMIZE_CXXFLAGS)\" \t\"WARN_CXXFLAGS=$(WARN_CXXFLAGS)\" \t\"CONFIG_CXXFLAGS=$(CONFIG_CXXFLAGS)\" \t\"GLIBCPP_INCLUDE_DIR=$(GLIBCPP_INCLUDE_DIR)\" \t\"C_INCLUDE_DIR=$(C_INCLUDE_DIR)\" \t\"TOPLEVEL_INCLUDES=$(TOPLEVEL_INCLUDES)\" \t\"LIBMATH_INCLUDES=$(LIBMATH_INCLUDES)\" \t\"LIBIO_INCLUDES=$(LIBIO_INCLUDES)\" \t\"CSHADOW_INCLUDES=$(CSHADOW_INCLUDES)\" \t\"LIBSUPCXX_INCLUDES=$(LIBSUPCXX_INCLUDES)\"\n+AM_MAKEFLAGS =  \t\"AR_FLAGS=$(AR_FLAGS)\" \t\"CC_FOR_BUILD=$(CC_FOR_BUILD)\" \t\"CC_FOR_TARGET=$(CC_FOR_TARGET)\" \t\"CFLAGS=$(CFLAGS)\" \t\"CXXFLAGS=$(CXXFLAGS)\" \t\"CFLAGS_FOR_BUILD=$(CFLAGS_FOR_BUILD)\" \t\"CFLAGS_FOR_TARGET=$(CFLAGS_FOR_TARGET)\" \t\"INSTALL=$(INSTALL)\" \t\"INSTALL_DATA=$(INSTALL_DATA)\" \t\"INSTALL_PROGRAM=$(INSTALL_PROGRAM)\" \t\"INSTALL_SCRIPT=$(INSTALL_SCRIPT)\" \t\"LDFLAGS=$(LDFLAGS)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"LIBCFLAGS_FOR_TARGET=$(LIBCFLAGS_FOR_TARGET)\" \t\"MAKE=$(MAKE)\" \t\"MAKEINFO=$(MAKEINFO) $(MAKEINFOFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"PICFLAG_FOR_TARGET=$(PICFLAG_FOR_TARGET)\" \t\"SHELL=$(SHELL)\" \t\"EXPECT=$(EXPECT)\" \t\"RUNTEST=$(RUNTEST)\" \t\"RUNTESTFLAGS=$(RUNTESTFLAGS)\" \t\"exec_prefix=$(exec_prefix)\" \t\"infodir=$(infodir)\" \t\"libdir=$(libdir)\" \t\"includedir=$(includedir)\" \t\"prefix=$(prefix)\" \t\"tooldir=$(tooldir)\" \t\"AR=$(AR)\" \t\"AS=$(AS)\" \t\"CC=$(CC)\" \t\"CXX=$(CXX)\" \t\"LD=$(LD)\" \t\"LIBCFLAGS=$(LIBCFLAGS)\" \t\"PICFLAG=$(PICFLAG)\" \t\"RANLIB=$(RANLIB)\" \t\"NM=$(NM)\" \t\"NM_FOR_BUILD=$(NM_FOR_BUILD)\" \t\"NM_FOR_TARGET=$(NM_FOR_TARGET)\" \t\"DESTDIR=$(DESTDIR)\" \t\"WERROR=$(WERROR)\" \n \n ACLOCAL_M4 = $(top_srcdir)/aclocal.m4\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs"}, {"sha": "a5603a7dd3055089802410c920e0b4a9200042e0", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 74, "deletions": 7, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -269,6 +269,9 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n     CFLAGS='-x c++  -Wl,--gc-sections'\n \n     # Check for -Wl,--gc-sections\n+    # XXX This test is broken at the moment, as symbols required for\n+    # linking are now in libsupc++ (not built yet.....). In addition, \n+    # this test has cored on solaris in the past.\n     AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n     AC_TRY_RUN([\n      int main(void) \n@@ -277,7 +280,7 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n        //catch (...) { };\n        return 0;\n      }\n-    ], [ac_sectionLDflags=yes], [ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n+    ], [ac_sectionLDflags=yes],[ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n     if test \"$ac_test_CFLAGS\" = set; then\n       CFLAGS=\"$ac_save_CFLAGS\"\n     else\n@@ -1476,21 +1479,85 @@ changequote([, ])\n   dnl NB: these things may be duplicated in c++config.h as well.\n   case \"$enable_cshadow_headers\" in\n     yes) \n-\tCSHADOWFLAGS=\"-fno-builtin\"\n+\tCSHADOW_FLAGS=\"-fno-builtin\"\n+\tC_INCLUDE_DIR='$(top_srcdir)/include/c_std'\n         AC_DEFINE(_GLIBCPP_USE_SHADOW_HEADERS)\n-\tc_include_dir=c_std\n \t;;\n     no)   \n-\tCSHADOWFLAGS=\"\"\n-\tc_include_dir=c\n+\tCSHADOW_FLAGS=\"\"\n+\tC_INCLUDE_DIR='$(top_srcdir)/include/c'\n         ;;\n   esac\n \n-  AC_SUBST(CSHADOWFLAGS)\n-  AC_SUBST(c_include_dir)\n+  AC_SUBST(CSHADOW_FLAGS)\n+  AC_SUBST(C_INCLUDE_DIR)\n   AM_CONDITIONAL(GLIBCPP_USE_CSHADOW, test \"$enable_cshadow_headers\" = yes)\n ])\n \n+dnl\n+dnl Set up *_INCLUDES and *_INCLUDE_DIR variables for all sundry Makefile.am's.\n+dnl\n+dnl GLIBCPP_INCLUDE_DIR\n+dnl C_INCLUDE_DIR\n+dnl TOPLEVEL_INCLUDES\n+dnl LIBMATH_INCLUDES\n+dnl LIBSUPCXX_INCLUDES\n+dnl LIBIO_INCLUDES\n+dnl CSHADOW_INCLUDES\n+dnl\n+dnl GLIBCPP_EXPORT_INCLUDE\n+AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n+  # Root level of the include sources.\n+  GLIBCPP_INCLUDE_DIR='$(top_srcdir)/include'\n+\n+  # Can either use include/c or include/c_std to grab \"C\" headers. This\n+  # variable is set to the include directory currently in use.\n+  # set with C_INCLUDE_DIR in GLIBCPP_ENABLE_SHADOW\n+   \n+  # Passed down for cross compilers, canadian crosses.\n+  TOPLEVEL_INCLUDES='-I$(includedir)'\n+\n+  LIBMATH_INCLUDES='-I$(top_srcdir)/libmath'\n+\n+  LIBSUPCXX_INCLUDES='-I$(top_srcdir)/libsupc++'\n+\n+  #if GLIBCPP_NEED_LIBIO\n+  LIBIO_INCLUDES='-I$(top_builddir)/libio -I$(top_srcdir)/libio'\n+  #else\n+  #LIBIO_INCLUDES='-I$(top_srcdir)/libio'\n+  #endif\n+\n+  #if GLIBCPP_USE_CSHADOW\n+  #  CSHADOW_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR) \\\n+  #                   -I$(top_blddir)/cshadow'\n+  #else\n+  CSHADOW_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)'\n+  #endif\n+\n+  # Now, export this to all the little Makefiles....\n+  AC_SUBST(GLIBCPP_INCLUDE_DIR)\n+  AC_SUBST(TOPLEVEL_INCLUDES)\n+  AC_SUBST(LIBMATH_INCLUDES)\n+  AC_SUBST(LIBSUPCXX_INCLUDES)\n+  AC_SUBST(LIBIO_INCLUDES)\n+  AC_SUBST(CSHADOW_INCLUDES)\n+])\n+\n+\n+dnl\n+dnl Set up *_FLAGS and *FLAGS variables for all sundry Makefile.am's.\n+dnl\n+AC_DEFUN(GLIBCPP_EXPORT_FLAGS, [\n+  # Optimization flags that are probably a good idea for thrill-seekers. Just\n+  # uncomment the lines below and make, everything else is ready to go... \n+  # OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc \n+  OPTIMIZE_CXXFLAGS=\n+  AC_SUBST(OPTIMIZE_CXXFLAGS)\n+\n+  WARN_FLAGS='-Wall -Wno-format -W -Wwrite-strings -Winline'\n+  AC_SUBST(WARN_FLAGS)\n+])\n+\n \n # Check whether LC_MESSAGES is available in <locale.h>.\n # Ulrich Drepper <drepper@cygnus.com>, 1995."}, {"sha": "f515dae00e48eef22d9aaa61c1622e9c4384310a", "filename": "libstdc++-v3/aclocal.m4", "status": "modified", "additions": 74, "deletions": 7, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Faclocal.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Faclocal.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Faclocal.m4?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -281,6 +281,9 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n     CFLAGS='-x c++  -Wl,--gc-sections'\n \n     # Check for -Wl,--gc-sections\n+    # XXX This test is broken at the moment, as symbols required for\n+    # linking are now in libsupc++ (not built yet.....). In addition, \n+    # this test has cored on solaris in the past.\n     AC_MSG_CHECKING([for ld that supports -Wl,--gc-sections])\n     AC_TRY_RUN([\n      int main(void) \n@@ -289,7 +292,7 @@ AC_DEFUN(GLIBCPP_CHECK_LINKER_FEATURES, [\n        //catch (...) { };\n        return 0;\n      }\n-    ], [ac_sectionLDflags=yes], [ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n+    ], [ac_sectionLDflags=yes],[ac_sectionLFflags=no], [ac_sectionLDflags=yes])\n     if test \"$ac_test_CFLAGS\" = set; then\n       CFLAGS=\"$ac_save_CFLAGS\"\n     else\n@@ -1488,21 +1491,85 @@ changequote([, ])\n   dnl NB: these things may be duplicated in c++config.h as well.\n   case \"$enable_cshadow_headers\" in\n     yes) \n-\tCSHADOWFLAGS=\"-fno-builtin\"\n+\tCSHADOW_FLAGS=\"-fno-builtin\"\n+\tC_INCLUDE_DIR='$(top_srcdir)/include/c_std'\n         AC_DEFINE(_GLIBCPP_USE_SHADOW_HEADERS)\n-\tc_include_dir=c_std\n \t;;\n     no)   \n-\tCSHADOWFLAGS=\"\"\n-\tc_include_dir=c\n+\tCSHADOW_FLAGS=\"\"\n+\tC_INCLUDE_DIR='$(top_srcdir)/include/c'\n         ;;\n   esac\n \n-  AC_SUBST(CSHADOWFLAGS)\n-  AC_SUBST(c_include_dir)\n+  AC_SUBST(CSHADOW_FLAGS)\n+  AC_SUBST(C_INCLUDE_DIR)\n   AM_CONDITIONAL(GLIBCPP_USE_CSHADOW, test \"$enable_cshadow_headers\" = yes)\n ])\n \n+dnl\n+dnl Set up *_INCLUDES and *_INCLUDE_DIR variables for all sundry Makefile.am's.\n+dnl\n+dnl GLIBCPP_INCLUDE_DIR\n+dnl C_INCLUDE_DIR\n+dnl TOPLEVEL_INCLUDES\n+dnl LIBMATH_INCLUDES\n+dnl LIBSUPCXX_INCLUDES\n+dnl LIBIO_INCLUDES\n+dnl CSHADOW_INCLUDES\n+dnl\n+dnl GLIBCPP_EXPORT_INCLUDE\n+AC_DEFUN(GLIBCPP_EXPORT_INCLUDES, [\n+  # Root level of the include sources.\n+  GLIBCPP_INCLUDE_DIR='$(top_srcdir)/include'\n+\n+  # Can either use include/c or include/c_std to grab \"C\" headers. This\n+  # variable is set to the include directory currently in use.\n+  # set with C_INCLUDE_DIR in GLIBCPP_ENABLE_SHADOW\n+   \n+  # Passed down for cross compilers, canadian crosses.\n+  TOPLEVEL_INCLUDES='-I$(includedir)'\n+\n+  LIBMATH_INCLUDES='-I$(top_srcdir)/libmath'\n+\n+  LIBSUPCXX_INCLUDES='-I$(top_srcdir)/libsupc++'\n+\n+  #if GLIBCPP_NEED_LIBIO\n+  LIBIO_INCLUDES='-I$(top_builddir)/libio -I$(top_srcdir)/libio'\n+  #else\n+  #LIBIO_INCLUDES='-I$(top_srcdir)/libio'\n+  #endif\n+\n+  #if GLIBCPP_USE_CSHADOW\n+  #  CSHADOW_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR) \\\n+  #                   -I$(top_blddir)/cshadow'\n+  #else\n+  CSHADOW_INCLUDES='-I$(GLIBCPP_INCLUDE_DIR)/std -I$(C_INCLUDE_DIR)'\n+  #endif\n+\n+  # Now, export this to all the little Makefiles....\n+  AC_SUBST(GLIBCPP_INCLUDE_DIR)\n+  AC_SUBST(TOPLEVEL_INCLUDES)\n+  AC_SUBST(LIBMATH_INCLUDES)\n+  AC_SUBST(LIBSUPCXX_INCLUDES)\n+  AC_SUBST(LIBIO_INCLUDES)\n+  AC_SUBST(CSHADOW_INCLUDES)\n+])\n+\n+\n+dnl\n+dnl Set up *_FLAGS and *FLAGS variables for all sundry Makefile.am's.\n+dnl\n+AC_DEFUN(GLIBCPP_EXPORT_FLAGS, [\n+  # Optimization flags that are probably a good idea for thrill-seekers. Just\n+  # uncomment the lines below and make, everything else is ready to go... \n+  # OPTIMIZE_CXXFLAGS = -O3 -fstrict-aliasing -fvtable-gc \n+  OPTIMIZE_CXXFLAGS=\n+  AC_SUBST(OPTIMIZE_CXXFLAGS)\n+\n+  WARN_FLAGS='-Wall -Wno-format -W -Wwrite-strings -Winline'\n+  AC_SUBST(WARN_FLAGS)\n+])\n+\n \n # Check whether LC_MESSAGES is available in <locale.h>.\n # Ulrich Drepper <drepper@cygnus.com>, 1995."}, {"sha": "1967730a30d318b9bd9b477643f0c1a75f9ae8ab", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1063, "deletions": 1017, "changes": 2080, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=e466dc8a4ab0761107e2d7513471985256c2605e"}, {"sha": "e0c321d619820ff931ffa691a48eb50444ff1260", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -143,7 +143,6 @@ AM_CONDITIONAL(USE_LIBDIR, test -z \"$with_cross_host\")\n \n AC_LC_MESSAGES\n \n-\n if test \"${multilib}\" = \"yes\"; then\n   multilib_arg=\"--enable-multilib\"\n else\n@@ -153,12 +152,15 @@ fi\n \n # Generate the various Makefiles, include files, and scripts.\n \n+# Export all the include and flag information to makefiles.\n+GLIBCPP_EXPORT_INCLUDES\n+GLIBCPP_EXPORT_FLAGS\n+\n # NB: Multilibs need MULTISUBDIR defined correctly in src/Makefile.am\n # so that multilib installs will end up installed in the correct\n # place. To work around this not being passed down from config-ml.in\n # -> top_srcdir/Makefile.am -> top_srcdir/src/Makefile.am, manually\n # append it here.\n-\n AC_OUTPUT(mkcheck Makefile src/Makefile libmath/Makefile libio/Makefile libsupc++/Makefile,\n [if test -n \"$CONFIG_FILES\"; then\n   ac_file=Makefile . ${glibcpp_basedir}/../config-ml.in"}, {"sha": "67d758553eb3df01ed858f185ca781630413a9b6", "filename": "libstdc++-v3/libio/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FChangeLog?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -1,3 +1,7 @@\n+2000-10-11  Benjamin Kosnik  <bkoz@gnu.org>\n+\n+\t* Makefile.am: Add includes from GLIBCPP_EXPORT_INCLUDES.\n+\n 2000-10-10  Benjamin Kosnik  <bkoz@gnu.org>\n \n \t* _G_config.h (__need_ptrdiff_t): Add."}, {"sha": "b5d381f1598d81717371d3acac312083ee330da6", "filename": "libstdc++-v3/libio/Makefile.am", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibio%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.am?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -25,6 +25,14 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n noinst_LTLIBRARIES = libio.la\n \n+# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n+GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n+CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n \n INCLUDES = \\\n \t-nostdinc++ \\"}, {"sha": "8a70b2c783b6f3583f225d345c89b12d6b43e539", "filename": "libstdc++-v3/libio/Makefile.in", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibio%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibio%2FMakefile.in?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -67,7 +67,7 @@ AR = @AR@\n AS = @AS@\n CC = @CC@\n CPP = @CPP@\n-CSHADOWFLAGS = @CSHADOWFLAGS@\n+CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -87,6 +87,7 @@ MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n+OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n@@ -95,9 +96,9 @@ SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n+WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n-c_include_dir = @c_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n@@ -106,6 +107,15 @@ AUTOMAKE_OPTIONS = 1.3 cygnus\n \n noinst_LTLIBRARIES = libio.la\n \n+# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n+GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n+CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n+\n INCLUDES =  \t-nostdinc++ \t-I$(top_builddir) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(TOPLEVEL_INCLUDES)\t\n \n "}, {"sha": "31cbab703a7038cdce91064014a059b554ef5b2a", "filename": "libstdc++-v3/libmath/Makefile.am", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.am?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -50,6 +50,15 @@ libmath_la_SOURCES = \\\n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n \n+# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n+GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n+CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n+\n INCLUDES = -I$(GLIBCPP_INCLUDE_DIR) $(TOPLEVEL_INCLUDES)\n \n "}, {"sha": "57eaa5b9de02803bf9588f44f366e9a0a7479214", "filename": "libstdc++-v3/libmath/Makefile.in", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibmath%2FMakefile.in?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -67,7 +67,7 @@ AR = @AR@\n AS = @AS@\n CC = @CC@\n CPP = @CPP@\n-CSHADOWFLAGS = @CSHADOWFLAGS@\n+CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -87,6 +87,7 @@ MAINT = @MAINT@\n MAKEINFO = @MAKEINFO@\n OBJDUMP = @OBJDUMP@\n OBJEXT = @OBJEXT@\n+OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n OPT_LDFLAGS = @OPT_LDFLAGS@\n PACKAGE = @PACKAGE@\n RANLIB = @RANLIB@\n@@ -95,9 +96,9 @@ SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n+WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n-c_include_dir = @c_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n@@ -122,6 +123,15 @@ libmath_la_SOURCES =  \tsignbit.c signbitf.c cabs.c cabsf.c\n \n LINK = $(LIBTOOL) --mode=link \"$(CCLD)\" $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@\n \n+# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n+GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n+CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n+\n INCLUDES = -I$(GLIBCPP_INCLUDE_DIR) $(TOPLEVEL_INCLUDES)\n mkinstalldirs = $(SHELL) $(top_srcdir)/../mkinstalldirs\n CONFIG_HEADER = ../config.h"}, {"sha": "d9dc106dccc28809c912a60c4a80c1d5545a25c4", "filename": "libstdc++-v3/libsupc++/Makefile.am", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.am?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -42,6 +42,29 @@ toolexeclib_LTLIBRARIES = libsupc++.la\n noinst_LTLIBRARIES = libsupc++convenience.la\n \n \n+# Compile flags that should be constant throughout the build, both for\n+# SUBDIRS and for libstdc++-v3 in general.\n+OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n+\n+# These bits are all figured out from configure. Look in acinclude.m4\n+# or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n+# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+\n+# Warning flags to use.\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+\n+# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n+GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n+CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n+\n INCLUDES = \\\n \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \\\n \t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\"}, {"sha": "f44c544feb7782f7ba48724ad384c8a36c78e931", "filename": "libstdc++-v3/libsupc++/Makefile.in", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Flibsupc%2B%2B%2FMakefile.in?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -67,7 +67,7 @@ AR = @AR@\n AS = @AS@\n CC = @CC@\n CPP = @CPP@\n-CSHADOWFLAGS = @CSHADOWFLAGS@\n+CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -94,9 +94,9 @@ SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n+WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n-c_include_dir = @c_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n@@ -114,6 +114,29 @@ toolexeclib_LTLIBRARIES = libsupc++.la\n # 2) integrated libsupc++convenience.la that is to be a part of libstdc++.a\n noinst_LTLIBRARIES = libsupc++convenience.la\n \n+# Compile flags that should be constant throughout the build, both for\n+# SUBDIRS and for libstdc++-v3 in general.\n+OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n+\n+# These bits are all figured out from configure. Look in acinclude.m4\n+# or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n+# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+\n+\n+# Warning flags to use.\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+\n+\n+# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n+GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n+CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n+\n INCLUDES =  \t-I$(top_srcdir)/../gcc -I$(top_srcdir)/../include \t$(CSHADOW_INCLUDES)  $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(CONFIG_INCLUDES) -I$(top_builddir)\n \n "}, {"sha": "1050de268069427ccd459beb9f13882d6ae1a553", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -54,9 +54,10 @@ if [ $WHICH -eq 1 ]; then\n fi\n \n # INC_PATH == include path to new headers for use on gcc command-line\n+C_DIR=\"`basename @C_INCLUDE_DIR@`\"\n if [ $WHICH != \"1\" ]; then\n-  INC_PATH=\"@CSHADOWFLAGS@ -I$BUILD_DIR -I$BUILD_DIR/libio \\\n-    -I$SRC_DIR/include/std  -I$SRC_DIR/include/@c_include_dir@ \\\n+  INC_PATH=\"@CSHADOW_FLAGS@ -I$BUILD_DIR -I$BUILD_DIR/libio \\\n+    -I$SRC_DIR/include/std  -I$SRC_DIR/include/$C_DIR \\\n     -I$SRC_DIR/include -I$SRC_DIR/libsupc++/include -I$SRC_DIR/libio \\\n     -I$SRC_DIR/testsuite\"\n elif [ $WHICH -eq 1 ]; then"}, {"sha": "ff2089749605105f28e79606b7ff18bed5aed1cd", "filename": "libstdc++-v3/src/Makefile.am", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.am?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -21,7 +21,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-## $Id: Makefile.am,v 1.37 2000/10/09 08:55:06 bkoz Exp $\n+## $Id: Makefile.am,v 1.38 2000/10/10 23:50:39 bkoz Exp $\n \n AUTOMAKE_OPTIONS = 1.3 gnits\n MAINT_CHARSET = latin1\n@@ -40,6 +40,29 @@ toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n \n \n+# Compile flags that should be constant throughout the build, both for\n+# SUBDIRS and for libstdc++-v3 in general.\n+OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n+\n+# These bits are all figured out from configure. Look in acinclude.m4\n+# or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n+# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n+CONFIG_CXXFLAGS = \\\n+\t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+\n+# Warning flags to use.\n+WARN_CXXFLAGS = \\\n+\t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+\n+# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n+GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n+CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n+\n INCLUDES = \\\n \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ \\\n \t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \\"}, {"sha": "74954767f8f1ce1df70fe1cc5d2d9764d5b8af79", "filename": "libstdc++-v3/src/Makefile.in", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e466dc8a4ab0761107e2d7513471985256c2605e/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2FMakefile.in?ref=e466dc8a4ab0761107e2d7513471985256c2605e", "patch": "@@ -66,7 +66,7 @@ AR = @AR@\n AS = @AS@\n CC = @CC@\n CPP = @CPP@\n-CSHADOWFLAGS = @CSHADOWFLAGS@\n+CSHADOW_FLAGS = @CSHADOW_FLAGS@\n CXX = @CXX@\n CXXCPP = @CXXCPP@\n DEBUG_FLAGS = @DEBUG_FLAGS@\n@@ -94,9 +94,9 @@ SECTION_LDFLAGS = @SECTION_LDFLAGS@\n STRIP = @STRIP@\n USE_COMPLEX_LONG_DOUBLE = @USE_COMPLEX_LONG_DOUBLE@\n VERSION = @VERSION@\n+WARN_FLAGS = @WARN_FLAGS@\n WERROR = @WERROR@\n WFMT_FLAGS = @WFMT_FLAGS@\n-c_include_dir = @c_include_dir@\n glibcpp_basedir = @glibcpp_basedir@\n ifGNUmake = @ifGNUmake@\n libinst_wstring_la = @libinst_wstring_la@\n@@ -110,6 +110,29 @@ MAINT_CHARSET = latin1\n toolexeclib_LTLIBRARIES = libstdc++.la\n EXTRA_LTLIBRARIES = libinst-string.la libinst-wstring.la\n \n+# Compile flags that should be constant throughout the build, both for\n+# SUBDIRS and for libstdc++-v3 in general.\n+OPTIMIZE_CXXFLAGS = @OPTIMIZE_CXXFLAGS@\n+\n+# These bits are all figured out from configure. Look in acinclude.m4\n+# or configure.in to see how they are set. See GLIBCPP_EXPORT_FLAGS\n+# NB: DEBUGFLAGS have to be at the end so that -O2 can be overridden.\n+CONFIG_CXXFLAGS =  \t@EXTRA_CXX_FLAGS@ @SECTION_FLAGS@ @CSHADOW_FLAGS@ @DEBUG_FLAGS@ \n+\n+\n+# Warning flags to use.\n+WARN_CXXFLAGS =  \t@WARN_FLAGS@ $(WERROR) @WFMT_FLAGS@\n+\n+\n+# Use common includes from acinclude.m4/GLIBCPP_EXPORT_INCLUDES\n+GLIBCPP_INCLUDE_DIR = @GLIBCPP_INCLUDE_DIR@\n+C_INCLUDE_DIR = @C_INCLUDE_DIR@\n+TOPLEVEL_INCLUDES = @TOPLEVEL_INCLUDES@\n+LIBMATH_INCLUDES = @LIBMATH_INCLUDES@\n+LIBSUPCXX_INCLUDES = @LIBSUPCXX_INCLUDES@\n+LIBIO_INCLUDES = @LIBIO_INCLUDES@\n+CSHADOW_INCLUDES = @CSHADOW_INCLUDES@\n+\n INCLUDES =  \t-D_GNU_SOURCE -D_ISOC99_SOURCE -nostdinc++ \t$(CSHADOW_INCLUDES) $(LIBSUPCXX_INCLUDES) -I$(GLIBCPP_INCLUDE_DIR) \t$(LIBIO_INCLUDES) $(LIBMATH_INCLUDES) -I$(top_builddir) \t$(TOPLEVEL_INCLUDES)\t\n \n "}]}