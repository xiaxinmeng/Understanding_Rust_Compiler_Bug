{"sha": "3cee0c6562e5d8df69a9d6ad613a6f3edcfcc797", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2NlZTBjNjU2MmU1ZDhkZjY5YTlkNmFkNjEzYTZmM2VkY2ZjYzc5Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-16T11:51:42Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-16T13:36:02Z"}, "message": "libstdc++: Add performance test for atomic_flag [PR 46447]\n\nThis adds a test to compare the performance of std::atomic_flag with\nsimilar operations on std::atomic_uchar and std::atomic_int.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/46447\n\t* testsuite/performance/29_atomics/atomic_flag.cc: New test.", "tree": {"sha": "91740d88b6e8b3c550c856b930c229439aa51dbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91740d88b6e8b3c550c856b930c229439aa51dbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3cee0c6562e5d8df69a9d6ad613a6f3edcfcc797", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cee0c6562e5d8df69a9d6ad613a6f3edcfcc797", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3cee0c6562e5d8df69a9d6ad613a6f3edcfcc797", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3cee0c6562e5d8df69a9d6ad613a6f3edcfcc797/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2c2eec183acf25c9b214fa0827718e4d2fdfc93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2c2eec183acf25c9b214fa0827718e4d2fdfc93", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2c2eec183acf25c9b214fa0827718e4d2fdfc93"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "af1a269a0e00ad6993180dca7861827bf64b4970", "filename": "libstdc++-v3/testsuite/performance/29_atomics/atomic_flag.cc", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3cee0c6562e5d8df69a9d6ad613a6f3edcfcc797/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F29_atomics%2Fatomic_flag.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3cee0c6562e5d8df69a9d6ad613a6f3edcfcc797/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F29_atomics%2Fatomic_flag.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F29_atomics%2Fatomic_flag.cc?ref=3cee0c6562e5d8df69a9d6ad613a6f3edcfcc797", "patch": "@@ -0,0 +1,71 @@\n+// Copyright (C) 2009-2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+\n+#include <atomic>\n+#include <testsuite_performance.h>\n+\n+volatile std::atomic_flag af;\n+volatile std::atomic_uchar ac;\n+volatile std::atomic_int ai;\n+\n+int main()\n+{\n+  using namespace __gnu_test;\n+  time_counter time;\n+  resource_counter resource;\n+\n+  const int n = 100000000;\n+\n+  start_counters(time, resource);\n+  for (int i = 0; i < n; ++i)\n+    af.test_and_set();\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"atomic_flag::test_and_set()\", time, resource);\n+\n+  start_counters(time, resource);\n+  for (int i = 0; i < n; ++i)\n+    af.clear();\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"atomic_flag::clear()\", time, resource);\n+\n+  start_counters(time, resource);\n+  for (int i = 0; i < n; ++i)\n+    ac |= 1;\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"atomic_uchar::operator|=(1)\", time, resource);\n+\n+  start_counters(time, resource);\n+  for (int i = 0; i < n; ++i)\n+    ac = 0;\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"atomic_flag::operator=(0)\", time, resource);\n+\n+  start_counters(time, resource);\n+  for (int i = 0; i < n; ++i)\n+    ai |= 1;\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"atomic_int::operator|=(1)\", time, resource);\n+\n+  start_counters(time, resource);\n+  for (int i = 0; i < n; ++i)\n+    ai = 0;\n+  stop_counters(time, resource);\n+  report_performance(__FILE__, \"atomic_int::operator=(0)\", time, resource);\n+\n+  return 0;\n+}"}]}