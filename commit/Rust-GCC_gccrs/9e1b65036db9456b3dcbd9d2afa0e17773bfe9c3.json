{"sha": "9e1b65036db9456b3dcbd9d2afa0e17773bfe9c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWUxYjY1MDM2ZGI5NDU2YjNkY2JkOWQyYWZhMGUxNzc3M2JmZTljMw==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-10T13:08:17Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-02-10T13:08:17Z"}, "message": "If __STDC__, include gstdarg and use ANSI form of varargs.\n\n(attr_printf): Only declare when defined.\n\nFrom-SVN: r6515", "tree": {"sha": "20baaa50bc7c93136efe725cb008305bb4aefc98", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/20baaa50bc7c93136efe725cb008305bb4aefc98"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9e1b65036db9456b3dcbd9d2afa0e17773bfe9c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1b65036db9456b3dcbd9d2afa0e17773bfe9c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9e1b65036db9456b3dcbd9d2afa0e17773bfe9c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9e1b65036db9456b3dcbd9d2afa0e17773bfe9c3/comments", "author": null, "committer": null, "parents": [{"sha": "4f90e4a0f7084a911114061d22a7098a295f9bec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f90e4a0f7084a911114061d22a7098a295f9bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f90e4a0f7084a911114061d22a7098a295f9bec"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "55ec2255dd37e1f2a72e3671dcd499ed108f99fc", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9e1b65036db9456b3dcbd9d2afa0e17773bfe9c3/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9e1b65036db9456b3dcbd9d2afa0e17773bfe9c3/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=9e1b65036db9456b3dcbd9d2afa0e17773bfe9c3", "patch": "@@ -1,6 +1,6 @@\n /* Generate code from machine description to compute values of attributes.\n-   Copyright (C) 1991, 1993 Free Software Foundation, Inc.\n-   Contributed by Richard Kenner (kenner@nyu.edu)\n+   Copyright (C) 1991, 1993, 1994 Free Software Foundation, Inc.\n+   Contributed by Richard Kenner (kenner@vlsi1.ultra.nyu.edu)\n \n This file is part of GNU CC.\n \n@@ -96,7 +96,11 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n \n #include \"hconfig.h\"\n /* gvarargs must always be included after *config.h.  */\n+#ifdef __STDC__\n+#include \"gstdarg.h\"\n+#else\n #include \"gvarargs.h\"\n+#endif\n #include \"rtl.h\"\n #include \"insn-config.h\"\t/* For REGISTER_CONSTRAINTS */\n #include <stdio.h>\n@@ -355,11 +359,10 @@ static char *alternative_name;\n rtx frame_pointer_rtx, hard_frame_pointer_rtx, stack_pointer_rtx;\n rtx arg_pointer_rtx;\n \n-#if 0\n static rtx attr_rtx\t\tPROTO((enum rtx_code, ...));\n+#ifdef HAVE_VPRINTF\n static char *attr_printf\tPROTO((int, char *, ...));\n #else\n-static rtx attr_rtx ();\n static char *attr_printf ();\n #endif\n \n@@ -524,20 +527,24 @@ attr_hash_add_string (hashcode, str)\n \n /*VARARGS1*/\n static rtx\n-attr_rtx (va_alist)\n-     va_dcl\n+attr_rtx VPROTO((enum rtx_code code, ...))\n {\n-  va_list p;\n+#ifndef __STDC__\n   enum rtx_code code;\n+#endif\n+  va_list p;\n   register int i;\t\t/* Array indices...\t\t\t*/\n   register char *fmt;\t\t/* Current rtx's format...\t\t*/\n   register rtx rt_val;\t\t/* RTX to return to caller...\t\t*/\n   int hashcode;\n   register struct attr_hash *h;\n   struct obstack *old_obstack = rtl_obstack;\n \n-  va_start (p);\n+  VA_START (p, code);\n+\n+#ifndef __STDC__\n   code = va_arg (p, enum rtx_code);\n+#endif\n \n   /* For each of several cases, search the hash table for an existing entry.\n      Use that entry if one is found; otherwise create a new RTL and add it\n@@ -719,19 +726,24 @@ attr_rtx (va_alist)\n \n /*VARARGS2*/\n static char *\n-attr_printf (va_alist)\n-     va_dcl\n+attr_printf VPROTO((register int len, register char *fmt, ...))\n {\n-  va_list p;\n+#ifndef __STDC__\n   register int len;\n   register char *fmt;\n+#endif\n+  va_list p;\n   register char *str;\n \n-  /* Print the string into a temporary location.  */\n-  va_start (p);\n+  VA_START (p, fmt);\n+\n+#ifndef __STDC__\n   len = va_arg (p, int);\n+  fmt = va_arg (p, char*);\n+#endif\n+\n+  /* Print the string into a temporary location.  */\n   str = (char *) alloca (len);\n-  fmt = va_arg (p, char *);\n   vsprintf (str, fmt, p);\n   va_end (p);\n "}]}