{"sha": "69e18c0985d5e4488b30ccae1e242e004bf274ed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjllMThjMDk4NWQ1ZTQ0ODhiMzBjY2FlMWUyNDJlMDA0YmYyNzRlZA==", "commit": {"author": {"name": "Anatoly Sokolov", "email": "aesok@post.ru", "date": "2010-07-05T17:49:56Z"}, "committer": {"name": "Anatoly Sokolov", "email": "aesok@gcc.gnu.org", "date": "2010-07-05T17:49:56Z"}, "message": "ia64.h (MEMORY_MOVE_COST): Remove macro.\n\n\t* config/ia64/ia64.h (MEMORY_MOVE_COST): Remove macro.\n\t* config/ia64/t-ia64 (ia64.o): Depend on reload.h.\n\t* config/ia64/ia64.c Include reload.h.\n\t(ia64_memory_move_cost): New function.\n\t(TARGET_MEMORY_MOVE_COST): Define.\n\t(ia64_register_move_cost): Replace MEMORY_MOVE_COST with\n\tmemory_move_cost.\n\nFrom-SVN: r161845", "tree": {"sha": "f53afaed3393eba71bc7031aadfa4eaf0368dc0c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f53afaed3393eba71bc7031aadfa4eaf0368dc0c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/69e18c0985d5e4488b30ccae1e242e004bf274ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69e18c0985d5e4488b30ccae1e242e004bf274ed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69e18c0985d5e4488b30ccae1e242e004bf274ed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69e18c0985d5e4488b30ccae1e242e004bf274ed/comments", "author": null, "committer": null, "parents": [{"sha": "16ad8025237c565af9292d382b46772a24ba955e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ad8025237c565af9292d382b46772a24ba955e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16ad8025237c565af9292d382b46772a24ba955e"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "d96152e8eedb1184a7138b62d272ea65961753ed", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69e18c0985d5e4488b30ccae1e242e004bf274ed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69e18c0985d5e4488b30ccae1e242e004bf274ed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=69e18c0985d5e4488b30ccae1e242e004bf274ed", "patch": "@@ -1,3 +1,13 @@\n+2010-07-05  Anatoly Sokolov  <aesok@post.ru>\n+\n+\t* config/ia64/ia64.h (MEMORY_MOVE_COST): Remove macro.\n+\t* config/ia64/t-ia64 (ia64.o): Depend on reload.h.\n+\t* config/ia64/ia64.c Include reload.h.\n+\t(ia64_memory_move_cost): New function.\n+\t(TARGET_MEMORY_MOVE_COST): Define.\n+\t(ia64_register_move_cost): Replace MEMORY_MOVE_COST with\n+\tmemory_move_cost.\n+\n 2010-07-05  Sandra Loosemore  <sandra@codesourcery.com>\n \n \tPR middle-end/42505"}, {"sha": "c00aa7f3104784b20bab083598a9b0b671864cf7", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69e18c0985d5e4488b30ccae1e242e004bf274ed/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69e18c0985d5e4488b30ccae1e242e004bf274ed/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=69e18c0985d5e4488b30ccae1e242e004bf274ed", "patch": "@@ -59,6 +59,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"dbgcnt.h\"\n #include \"tm-constrs.h\"\n #include \"sel-sched.h\"\n+#include \"reload.h\"\n \n /* This is used for communication between ASM_OUTPUT_LABEL and\n    ASM_OUTPUT_LABELREF.  */\n@@ -212,6 +213,8 @@ static rtx ia64_libcall_value (enum machine_mode, const_rtx);\n static bool ia64_function_value_regno_p (const unsigned int);\n static int ia64_register_move_cost (enum machine_mode, reg_class_t,\n                                     reg_class_t);\n+static int ia64_memory_move_cost (enum machine_mode mode, reg_class_t,\n+\t\t\t\t  bool);\n static bool ia64_rtx_costs (rtx, int, int, int *, bool);\n static int ia64_unspec_may_trap_p (const_rtx, unsigned);\n static void fix_range (const char *);\n@@ -458,6 +461,8 @@ static const struct attribute_spec ia64_attribute_table[] =\n \n #undef TARGET_REGISTER_MOVE_COST\n #define TARGET_REGISTER_MOVE_COST ia64_register_move_cost\n+#undef TARGET_MEMORY_MOVE_COST\n+#define TARGET_MEMORY_MOVE_COST ia64_memory_move_cost\n #undef TARGET_RTX_COSTS\n #define TARGET_RTX_COSTS ia64_rtx_costs\n #undef TARGET_ADDRESS_COST\n@@ -5229,12 +5234,12 @@ ia64_register_move_cost (enum machine_mode mode, reg_class_t from_i,\n \n   /* Moving from FR<->GR in XFmode must be more expensive than 2,\n      so that we get secondary memory reloads.  Between FR_REGS,\n-     we have to make this at least as expensive as MEMORY_MOVE_COST\n+     we have to make this at least as expensive as memory_move_cost\n      to avoid spectacularly poor register class preferencing.  */\n   if (mode == XFmode || mode == RFmode)\n     {\n       if (to != GR_REGS || from != GR_REGS)\n-        return MEMORY_MOVE_COST (mode, to, 0);\n+        return memory_move_cost (mode, to, false);\n       else\n \treturn 3;\n     }\n@@ -5247,20 +5252,20 @@ ia64_register_move_cost (enum machine_mode mode, reg_class_t from_i,\n \treturn 3;\n       /* Moving between PR and anything but GR is impossible.  */\n       if (from != GR_REGS)\n-\treturn MEMORY_MOVE_COST (mode, to, 0);\n+\treturn memory_move_cost (mode, to, false);\n       break;\n \n     case BR_REGS:\n       /* Moving between BR and anything but GR is impossible.  */\n       if (from != GR_REGS && from != GR_AND_BR_REGS)\n-\treturn MEMORY_MOVE_COST (mode, to, 0);\n+\treturn memory_move_cost (mode, to, false);\n       break;\n \n     case AR_I_REGS:\n     case AR_M_REGS:\n       /* Moving between AR and anything but GR is impossible.  */\n       if (from != GR_REGS)\n-\treturn MEMORY_MOVE_COST (mode, to, 0);\n+\treturn memory_move_cost (mode, to, false);\n       break;\n \n     case GR_REGS:\n@@ -5278,6 +5283,23 @@ ia64_register_move_cost (enum machine_mode mode, reg_class_t from_i,\n   return 2;\n }\n \n+/* Calculate the cost of moving data of MODE from a register to or from\n+   memory.  */\n+\n+static int\n+ia64_memory_move_cost (enum machine_mode mode ATTRIBUTE_UNUSED,\n+\t\t       reg_class_t rclass,\n+\t\t       bool in ATTRIBUTE_UNUSED)\n+{\n+  if (rclass == GENERAL_REGS\n+      || rclass == FR_REGS\n+      || rclass == FP_REGS\n+      || rclass == GR_AND_FR_REGS)\n+    return 4;\n+  else\n+    return 10;\n+}\n+\n /* Implement PREFERRED_RELOAD_CLASS.  Place additional restrictions on RCLASS\n    to use when copying X into that class.  */\n "}, {"sha": "f631cee23c00c98e85229906c7e3eec463dbf35c", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69e18c0985d5e4488b30ccae1e242e004bf274ed/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69e18c0985d5e4488b30ccae1e242e004bf274ed/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=69e18c0985d5e4488b30ccae1e242e004bf274ed", "patch": "@@ -1,6 +1,6 @@\n /* Definitions of target machine GNU compiler.  IA-64 version.\n    Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,\n-   2009 Free Software Foundation, Inc.\n+   2009, 2010 Free Software Foundation, Inc.\n    Contributed by James E. Wilson <wilson@cygnus.com> and\n    \t\t  David Mosberger <davidm@hpl.hp.com>.\n \n@@ -1304,12 +1304,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \f\n /* Describing Relative Costs of Operations */\n \n-/* A C expression for the cost of moving data of mode M between a\n-   register and memory.  */\n-#define MEMORY_MOVE_COST(MODE,CLASS,IN) \\\n-  ((CLASS) == GENERAL_REGS || (CLASS) == FR_REGS || (CLASS) == FP_REGS \\\n-   || (CLASS) == GR_AND_FR_REGS ? 4 : 10)\n-\n /* A C expression for the cost of a branch instruction.  A value of 1 is the\n    default; other values are interpreted relative to that.  Used by the\n    if-conversion code as max instruction count.  */"}, {"sha": "d11a0047fb8ee9f69ba47d0e9be5c33af01dfea2", "filename": "gcc/config/ia64/t-ia64", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/69e18c0985d5e4488b30ccae1e242e004bf274ed/gcc%2Fconfig%2Fia64%2Ft-ia64", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/69e18c0985d5e4488b30ccae1e242e004bf274ed/gcc%2Fconfig%2Fia64%2Ft-ia64", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Ft-ia64?ref=69e18c0985d5e4488b30ccae1e242e004bf274ed", "patch": "@@ -1,4 +1,5 @@\n-# Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009\n+# Copyright (C) 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009,\n+# 2010\n # Free Software Foundation, Inc.\n #\n # This file is part of GCC.\n@@ -53,4 +54,4 @@ ia64-c.o: $(srcdir)/config/ia64/ia64-c.c $(CONFIG_H) $(SYSTEM_H) \\\n # genattrtab generates very long string literals.\n insn-attrtab.o-warn = -Wno-error\n \n-ia64.o: debug.h $(PARAMS_H) sel-sched.h\n+ia64.o: debug.h $(PARAMS_H) sel-sched.h reload.h"}]}