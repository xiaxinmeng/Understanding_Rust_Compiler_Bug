{"sha": "6af8819be1e09fa2035248eba7fb320350ec14ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFmODgxOWJlMWUwOWZhMjAzNTI0OGViYTdmYjMyMDM1MGVjMTRhYg==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-01-07T21:01:37Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2020-01-07T21:01:37Z"}, "message": "PR libstdc++/92124 fix incorrect container move assignment\n\n\t* include/bits/stl_tree.h\n\t(_Rb_tree<>::_M_move_assign(_Rb_tree&, false_type)): Replace\n\tstd::move_if_noexcept by std::move.\n\t* testsuite/23_containers/map/92124.cc: New.\n\t* testsuite/23_containers/set/92124.cc: New.\n\nFrom-SVN: r279967", "tree": {"sha": "7faa959c71a9709981d28d0f4a489693da621246", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7faa959c71a9709981d28d0f4a489693da621246"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6af8819be1e09fa2035248eba7fb320350ec14ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af8819be1e09fa2035248eba7fb320350ec14ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6af8819be1e09fa2035248eba7fb320350ec14ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6af8819be1e09fa2035248eba7fb320350ec14ab/comments", "author": null, "committer": null, "parents": [{"sha": "87d3f828de27930f88ce5b76c9ae222c89064cca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87d3f828de27930f88ce5b76c9ae222c89064cca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87d3f828de27930f88ce5b76c9ae222c89064cca"}], "stats": {"total": 142, "additions": 141, "deletions": 1}, "files": [{"sha": "4aae9facabd908b4a00fec17f6951371b634ee10", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af8819be1e09fa2035248eba7fb320350ec14ab/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af8819be1e09fa2035248eba7fb320350ec14ab/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=6af8819be1e09fa2035248eba7fb320350ec14ab", "patch": "@@ -1,3 +1,12 @@\n+2020-01-07  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n+\n+\tPR libstdc++/92124\n+\t* include/bits/stl_tree.h\n+\t(_Rb_tree<>::_M_move_assign(_Rb_tree&, false_type)): Replace\n+\tstd::move_if_noexcept by std::move.\n+\t* testsuite/23_containers/map/92124.cc: New.\n+\t* testsuite/23_containers/set/92124.cc: New.\n+\n 2020-01-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/std/stop_token (stop_token): Remove operator!= (LWG 3254)."}, {"sha": "9339011e872321227ad1a90294ba0cc555b3fc21", "filename": "libstdc++-v3/include/bits/stl_tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af8819be1e09fa2035248eba7fb320350ec14ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af8819be1e09fa2035248eba7fb320350ec14ab/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_tree.h?ref=6af8819be1e09fa2035248eba7fb320350ec14ab", "patch": "@@ -1695,7 +1695,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t    [&__roan](const value_type& __cval)\n \t    {\n \t      auto& __val = const_cast<value_type&>(__cval);\n-\t      return __roan(std::move_if_noexcept(__val));\n+\t      return __roan(std::move(__val));\n \t    };\n \t  _M_root() = _M_copy(__x, __lbd);\n \t  __x.clear();"}, {"sha": "177c9d7abe9a746bdbe73ae8fcc91360b4444d33", "filename": "libstdc++-v3/testsuite/23_containers/map/92124.cc", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af8819be1e09fa2035248eba7fb320350ec14ab/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F92124.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af8819be1e09fa2035248eba7fb320350ec14ab/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F92124.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fmap%2F92124.cc?ref=6af8819be1e09fa2035248eba7fb320350ec14ab", "patch": "@@ -0,0 +1,58 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <map>\n+#include <testsuite_allocator.h>\n+\n+struct X\n+{\n+  X() = default;\n+  X(const X&)\n+  { if (Throw) throw 1; }\n+\n+  // Move constructor might throw\n+  X(X&&) noexcept(false) {}\n+\n+  // Tracking calls to assignment functions\n+  X& operator=(const X&) { throw 1; }\n+\n+  X& operator=(X&&) noexcept(false) { return *this; }\n+\n+  static bool Throw;\n+};\n+\n+bool X::Throw = false;\n+\n+void\n+test01()\n+{\n+  using A = __gnu_test::propagating_allocator<std::pair<const int, X>, false>;\n+  A a1(1), a2(2);\n+  std::map<int, X, std::less<int>, A>\n+    m1({ { 1, X() } }, a1),\n+    m2({ { 2, X() } }, a2);\n+  X::Throw = true;\n+  m1 = std::move(m2);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}, {"sha": "95a2e9ce5180a79f480b4e08ec40c08e2edc57c6", "filename": "libstdc++-v3/testsuite/23_containers/set/92124.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6af8819be1e09fa2035248eba7fb320350ec14ab/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F92124.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6af8819be1e09fa2035248eba7fb320350ec14ab/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F92124.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F23_containers%2Fset%2F92124.cc?ref=6af8819be1e09fa2035248eba7fb320350ec14ab", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+\n+#include <set>\n+#include <testsuite_allocator.h>\n+\n+struct X\n+{\n+  X(int i) noexcept(true) : _i(i) { }\n+  X(const X& x) noexcept(false)\n+  {\n+    if (Throw) throw 0;\n+    _i = x._i;\n+  }\n+\n+  // Move constructor might throw\n+  X(X&& x) noexcept(false)\n+  {\n+    _i = x._i;\n+    x._i = -x._i;\n+  }\n+\n+  // Tracking calls to assignment functions\n+  X& operator=(const X&) { throw 1; }\n+\n+  X& operator=(X&& x) noexcept(false)\n+  {\n+    _i = x._i;\n+    x._i = -x._i;\n+    return *this;\n+  }\n+\n+  bool\n+  operator < (const X& x) const\n+  { return _i < x._i; }\n+\n+  int _i;\n+  static bool Throw;\n+};\n+\n+bool X::Throw = false;\n+\n+void\n+test01()\n+{\n+  using A = __gnu_test::propagating_allocator<X, false>;\n+  A a1(1), a2(2);\n+  std::set<X, std::less<X>, A> s1({ X(1) }, a1), s2({ X(2) }, a2);\n+  X::Throw = true;\n+  s1 = std::move(s2);\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+}"}]}