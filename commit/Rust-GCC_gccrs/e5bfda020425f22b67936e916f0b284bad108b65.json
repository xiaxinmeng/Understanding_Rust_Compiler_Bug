{"sha": "e5bfda020425f22b67936e916f0b284bad108b65", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTViZmRhMDIwNDI1ZjIyYjY3OTM2ZTkxNmYwYjI4NGJhZDEwOGI2NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-21T08:19:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-05-21T08:21:09Z"}, "message": "Use EXACT_DIV_EXPR as much as possible\n\n...when the division is exact, typically dividing TYPE_SIZE by BITS_PER_UNIT.\n\ngcc/ada/\n\t* gcc-interface/decl.c (gnat_to_gnu_entity) <E_Variable>: Replace\n\tCEIL_DIV_EXPR with EXACT_DIV_EXPR.\n\t* gcc-interface/misc.c (gnat_type_max_size): Likewise.\n\t* gcc-interface/utils.c (maybe_pad_type): Likewise.\n\t(finish_record_type): Likewise.  And always compute the unit size.", "tree": {"sha": "94903a334e1554905aaffabf984923a4671e4d02", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94903a334e1554905aaffabf984923a4671e4d02"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e5bfda020425f22b67936e916f0b284bad108b65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5bfda020425f22b67936e916f0b284bad108b65", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e5bfda020425f22b67936e916f0b284bad108b65", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e5bfda020425f22b67936e916f0b284bad108b65/comments", "author": null, "committer": null, "parents": [{"sha": "dcde81134cb24da8e261a4346c806c676297922b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcde81134cb24da8e261a4346c806c676297922b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcde81134cb24da8e261a4346c806c676297922b"}], "stats": {"total": 29, "additions": 14, "deletions": 15}, "files": [{"sha": "a7595cbf514d58f980362e59de4c0303e469af56", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5bfda020425f22b67936e916f0b284bad108b65/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5bfda020425f22b67936e916f0b284bad108b65/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=e5bfda020425f22b67936e916f0b284bad108b65", "patch": "@@ -1343,7 +1343,7 @@ gnat_to_gnu_entity (Entity_Id gnat_entity, tree gnu_expr, bool definition)\n \t    || (gnu_size\n \t\t&& !allocatable_size_p (convert (sizetype,\n \t\t\t\t\t\t size_binop\n-\t\t\t\t\t\t (CEIL_DIV_EXPR, gnu_size,\n+\t\t\t\t\t\t (EXACT_DIV_EXPR, gnu_size,\n \t\t\t\t\t\t  bitsize_unit_node)),\n \t\t\t\t\tglobal_bindings_p ()\n \t\t\t\t\t|| !definition"}, {"sha": "72a2624b9dafa98e4e32a4007a1ad2ce1e7edcbe", "filename": "gcc/ada/gcc-interface/misc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5bfda020425f22b67936e916f0b284bad108b65/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5bfda020425f22b67936e916f0b284bad108b65/gcc%2Fada%2Fgcc-interface%2Fmisc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fmisc.c?ref=e5bfda020425f22b67936e916f0b284bad108b65", "patch": "@@ -752,7 +752,7 @@ gnat_type_max_size (const_tree gnu_type)\n \t type's alignment and return the result in units.  */\n       if (tree_fits_uhwi_p (max_ada_size))\n \tmax_size_unit\n-\t  = size_binop (CEIL_DIV_EXPR,\n+\t  = size_binop (EXACT_DIV_EXPR,\n \t\t\tround_up (max_ada_size, TYPE_ALIGN (gnu_type)),\n \t\t\tbitsize_unit_node);\n     }"}, {"sha": "8539fe497e1510ef4fc9cb996545234fd73b08e5", "filename": "gcc/ada/gcc-interface/utils.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e5bfda020425f22b67936e916f0b284bad108b65/gcc%2Fada%2Fgcc-interface%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e5bfda020425f22b67936e916f0b284bad108b65/gcc%2Fada%2Fgcc-interface%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils.c?ref=e5bfda020425f22b67936e916f0b284bad108b65", "patch": "@@ -1547,7 +1547,7 @@ maybe_pad_type (tree type, tree size, unsigned int align,\n   TYPE_SIZE (record) = size ? size : orig_size;\n   TYPE_SIZE_UNIT (record)\n     = convert (sizetype,\n-\t       size_binop (CEIL_DIV_EXPR, TYPE_SIZE (record),\n+\t       size_binop (EXACT_DIV_EXPR, TYPE_SIZE (record),\n \t\t\t   bitsize_unit_node));\n \n   /* If we are changing the alignment and the input type is a record with\n@@ -1970,7 +1970,6 @@ finish_record_type (tree record_type, tree field_list, int rep_level,\n {\n   const enum tree_code orig_code = TREE_CODE (record_type);\n   const bool had_size = TYPE_SIZE (record_type) != NULL_TREE;\n-  const bool had_size_unit = TYPE_SIZE_UNIT (record_type) != NULL_TREE;\n   const bool had_align = TYPE_ALIGN (record_type) > 0;\n   /* For all-repped records with a size specified, lay the QUAL_UNION_TYPE\n      out just like a UNION_TYPE, since the size will be fixed.  */\n@@ -1997,9 +1996,6 @@ finish_record_type (tree record_type, tree field_list, int rep_level,\n \n       if (!had_size)\n \tTYPE_SIZE (record_type) = bitsize_zero_node;\n-\n-      if (!had_size_unit)\n-\tTYPE_SIZE_UNIT (record_type) = size_zero_node;\n     }\n   else\n     {\n@@ -2155,19 +2151,22 @@ finish_record_type (tree record_type, tree field_list, int rep_level,\n   /* We need to set the regular sizes if REP_LEVEL is one.  */\n   if (rep_level == 1)\n     {\n+      /* We round TYPE_SIZE and TYPE_SIZE_UNIT up to TYPE_ALIGN separately\n+\t to avoid having very large masking constants in TYPE_SIZE_UNIT.  */\n+      const unsigned int align = TYPE_ALIGN (record_type);\n+\n       /* If this is a padding record, we never want to make the size smaller\n \t than what was specified in it, if any.  */\n-      if (TYPE_IS_PADDING_P (record_type) && TYPE_SIZE (record_type))\n+      if (TYPE_IS_PADDING_P (record_type) && had_size)\n \tsize = TYPE_SIZE (record_type);\n-\n-      tree size_unit = had_size_unit\n-\t\t       ? TYPE_SIZE_UNIT (record_type)\n-\t\t       : convert (sizetype,\n-\t\t\t\t  size_binop (CEIL_DIV_EXPR, size,\n-\t\t\t\t\t      bitsize_unit_node));\n-      const unsigned int align = TYPE_ALIGN (record_type);\n+      else\n+\tsize = round_up (size, BITS_PER_UNIT);\n \n       TYPE_SIZE (record_type) = variable_size (round_up (size, align));\n+\n+      tree size_unit\n+\t= convert (sizetype,\n+\t\t   size_binop (EXACT_DIV_EXPR, size, bitsize_unit_node));\n       TYPE_SIZE_UNIT (record_type)\n \t= variable_size (round_up (size_unit, align / BITS_PER_UNIT));\n     }"}]}