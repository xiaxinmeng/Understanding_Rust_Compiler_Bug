{"sha": "2b6c54d61d46d369cb0f889967ce7d17b9c5cca6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI2YzU0ZDYxZDQ2ZDM2OWNiMGY4ODk5NjdjZTdkMTdiOWM1Y2NhNg==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-07-01T19:12:03Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1994-07-01T19:12:03Z"}, "message": "(compile_file): Pass through static consts and inlines\n        multiple times in case they reference each other.\n\nFrom-SVN: r7633", "tree": {"sha": "9afce84c8326f9c4e02f87e28cbada31bddce6aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9afce84c8326f9c4e02f87e28cbada31bddce6aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b6c54d61d46d369cb0f889967ce7d17b9c5cca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b6c54d61d46d369cb0f889967ce7d17b9c5cca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b6c54d61d46d369cb0f889967ce7d17b9c5cca6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b6c54d61d46d369cb0f889967ce7d17b9c5cca6/comments", "author": null, "committer": null, "parents": [{"sha": "febd204ef6c2e8722ee1857560338609434e61ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/febd204ef6c2e8722ee1857560338609434e61ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/febd204ef6c2e8722ee1857560338609434e61ec"}], "stats": {"total": 70, "additions": 46, "deletions": 24}, "files": [{"sha": "ad440ae6023a4d3ce7c345dab85f24c2e30d6a8d", "filename": "gcc/toplev.c", "status": "modified", "additions": 46, "deletions": 24, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b6c54d61d46d369cb0f889967ce7d17b9c5cca6/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b6c54d61d46d369cb0f889967ce7d17b9c5cca6/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2b6c54d61d46d369cb0f889967ce7d17b9c5cca6", "patch": "@@ -2276,6 +2276,7 @@ compile_file (name)\n     tree *vec = (tree *) alloca (sizeof (tree) * len);\n     int i;\n     tree decl;\n+    int reconsider = 1;\n \n     /* Process the decls in reverse order--earliest first.\n        Put them into VEC from back to front, then take out from front.  */\n@@ -2293,10 +2294,21 @@ compile_file (name)\n \tif (TREE_CODE (decl) == VAR_DECL && DECL_SIZE (decl) == 0\n \t    && incomplete_decl_finalize_hook != 0)\n \t  (*incomplete_decl_finalize_hook) (decl);\n+      }\n \n-\tif (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl)\n-\t    && ! TREE_ASM_WRITTEN (decl))\n+    /* Now emit any global variables or functions that we have been putting\n+       off.  We need to loop in case one of the things emitted here\n+       references another one which comes earlier in the list.  */\n+    while (reconsider)\n+      {\n+\treconsider = 0;\n+\tfor (i = 0; i < len; i++)\n \t  {\n+\t    decl = vec[i];\n+\n+\t    if (TREE_ASM_WRITTEN (decl) || DECL_EXTERNAL (decl))\n+\t      continue;\n+\n \t    /* Don't write out static consts, unless we still need them.\n \n \t       We also keep static consts if not optimizing (for debugging).\n@@ -2321,30 +2333,40 @@ compile_file (name)\n \t       to force a constant to be written if and only if it is\n \t       defined in a main file, as opposed to an include file. */\n \n-\t    if (! TREE_READONLY (decl)\n-\t\t|| TREE_PUBLIC (decl)\n-\t\t|| !optimize\n-\t\t|| TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n-\t      rest_of_decl_compilation (decl, NULL_PTR, 1, 1);\n-\t    else\n-\t      /* Cancel the RTL for this decl so that, if debugging info\n-\t\t output for global variables is still to come,\n-\t\t this one will be omitted.  */\n-\t      DECL_RTL (decl) = NULL;\n+\t    if (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl)\n+\t\t&& (! TREE_READONLY (decl)\n+\t\t    || TREE_PUBLIC (decl)\n+\t\t    || !optimize\n+\t\t    || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))))\n+\t      {\n+\t\treconsider = 1;\n+\t\trest_of_decl_compilation (decl, NULL_PTR, 1, 1);\n+\t      }\n+\n+\t    if (TREE_CODE (decl) == FUNCTION_DECL\n+\t\t&& DECL_INITIAL (decl) != 0\n+\t\t&& DECL_SAVED_INSNS (decl) != 0\n+\t\t&& (flag_keep_inline_functions\n+\t\t    || TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl))))\n+\t      {\n+\t\treconsider = 1;\n+\t\ttemporary_allocation ();\n+\t\toutput_inline_function (decl);\n+\t\tpermanent_allocation (1);\n+\t      }\n \t  }\n+      }\n \n-\tif (TREE_CODE (decl) == FUNCTION_DECL\n-\t    && ! TREE_ASM_WRITTEN (decl)\n-\t    && DECL_INITIAL (decl) != 0\n-\t    && DECL_SAVED_INSNS (decl) != 0\n-\t    && (flag_keep_inline_functions\n-\t\t|| TREE_SYMBOL_REFERENCED (DECL_ASSEMBLER_NAME (decl)))\n-\t    && ! DECL_EXTERNAL (decl))\n-\t  {\n-\t    temporary_allocation ();\n-\t    output_inline_function (decl);\n-\t    permanent_allocation (1);\n-\t  }\n+    for (i = 0; i < len; i++)\n+      {\n+\tdecl = vec[i];\n+\n+\tif (TREE_CODE (decl) == VAR_DECL && TREE_STATIC (decl)\n+\t    && ! TREE_ASM_WRITTEN (decl))\n+\t  /* Cancel the RTL for this decl so that, if debugging info\n+\t     output for global variables is still to come,\n+\t     this one will be omitted.  */\n+\t  DECL_RTL (decl) = NULL;\n \n \t/* Warn about any function\n \t   declared static but not defined."}]}