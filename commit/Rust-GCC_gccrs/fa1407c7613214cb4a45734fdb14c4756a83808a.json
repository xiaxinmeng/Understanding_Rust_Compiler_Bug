{"sha": "fa1407c7613214cb4a45734fdb14c4756a83808a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmExNDA3Yzc2MTMyMTRjYjRhNDU3MzRmZGIxNGM0NzU2YTgzODA4YQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-04T00:16:51Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-08-04T00:16:51Z"}, "message": "Daily bump.", "tree": {"sha": "25733b2c7516ee1de96abf618070c7c21b3feda7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25733b2c7516ee1de96abf618070c7c21b3feda7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fa1407c7613214cb4a45734fdb14c4756a83808a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa1407c7613214cb4a45734fdb14c4756a83808a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa1407c7613214cb4a45734fdb14c4756a83808a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa1407c7613214cb4a45734fdb14c4756a83808a/comments", "author": null, "committer": null, "parents": [{"sha": "e435e72ad713cadd661072427588ec1c777c04e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e435e72ad713cadd661072427588ec1c777c04e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e435e72ad713cadd661072427588ec1c777c04e3"}], "stats": {"total": 293, "additions": 292, "deletions": 1}, "files": [{"sha": "04757bae27dd4483990f4324bfce088419019767", "filename": "gcc/ChangeLog", "status": "modified", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1407c7613214cb4a45734fdb14c4756a83808a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1407c7613214cb4a45734fdb14c4756a83808a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fa1407c7613214cb4a45734fdb14c4756a83808a", "patch": "@@ -1,3 +1,104 @@\n+2021-08-03  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/vsx.md (*vsx_le_perm_store_<mode>): Use && instead of &.\n+\n+2021-08-03  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/constraints.md: Remove \"e\" from the list of available\n+\tconstraint characters.\n+\n+2021-08-03  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\tPR gcov-profile/71672\n+\t* auto-profile.c (afdo_indirect_call): Fix setup of the historgram value for indirect calls.\n+\n+2021-08-03  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* config/rs6000/smmintrin.h (_mm_minpos_epu16): New.\n+\n+2021-08-03  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* config/i386/i386.c (ix86_gen_scratch_sse_rtx): In 64-bit mode,\n+\ttry XMM31 to avoid vzeroupper.\n+\n+2021-08-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* doc/invoke.texi: Document -mtune=neoverse-512tvb and\n+\t-mcpu=neoverse-512tvb.\n+\t* config/aarch64/aarch64-cores.def (neoverse-512tvb): New entry.\n+\t* config/aarch64/aarch64-tune.md: Regenerate.\n+\t* config/aarch64/aarch64.c (neoverse512tvb_sve_vector_cost)\n+\t(neoverse512tvb_sve_issue_info, neoverse512tvb_vec_issue_info)\n+\t(neoverse512tvb_vector_cost, neoverse512tvb_tunings): New structures.\n+\t(aarch64_adjust_body_cost_sve): Handle -mtune=neoverse-512tvb.\n+\t(aarch64_adjust_body_cost): Likewise.\n+\n+2021-08-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_add_stmt_cost): Only\n+\trecord issue information for operations that occur in the\n+\tinnermost loop.\n+\n+2021-08-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_multiply_add_p): Add a vec_flags\n+\tparameter.  Detect cases in which an Advanced SIMD MLA would almost\n+\tcertainly require a MOV.\n+\t(aarch64_count_ops): Update accordingly.\n+\n+2021-08-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_is_store_elt_extraction): New\n+\tfunction, split out from...\n+\t(aarch64_detect_vector_stmt_subtype): ...here.\n+\t(aarch64_add_stmt_cost): Treat extracting element 0 as free.\n+\n+2021-08-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (sve_vec_cost):\n+\tAdd gather_load_x32_cost and gather_load_x64_cost.\n+\t* config/aarch64/aarch64.c (generic_sve_vector_cost)\n+\t(a64fx_sve_vector_cost, neoversev1_sve_vector_cost): Update\n+\taccordingly, using the values given by the scalar_load * number\n+\tof elements calculation that we used previously.\n+\t(aarch64_detect_vector_stmt_subtype): Use the new fields.\n+\n+2021-08-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64.c (aarch64_adjust_body_cost_sve): New\n+\tfunction, split out from...\n+\t(aarch64_adjust_body_cost): ...here.\n+\n+2021-08-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/fractional-cost.h: New file.\n+\t* config/aarch64/aarch64.c: Include <algorithm> (indirectly)\n+\tand cost_fraction.h.\n+\t(vec_cost_fraction): New typedef.\n+\t(aarch64_detect_scalar_stmt_subtype): Use it for statement costs.\n+\t(aarch64_detect_vector_stmt_subtype): Likewise.\n+\t(aarch64_sve_adjust_stmt_cost, aarch64_adjust_stmt_cost): Likewise.\n+\t(aarch64_estimate_min_cycles_per_iter): Use vec_cost_fraction\n+\tfor cycle counts.\n+\t(aarch64_adjust_body_cost): Likewise.\n+\t(aarch64_test_cost_fraction): New function.\n+\t(aarch64_run_selftests): Call it.\n+\n+2021-08-03  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/aarch64-protos.h (tune_params::sve_width): Turn\n+\tinto a bitmask.\n+\t* config/aarch64/aarch64.c (aarch64_cmp_autovec_modes): Update\n+\taccordingly.\n+\t(aarch64_estimated_poly_value): Likewise.  Use the least significant\n+\tset bit for the minimum and likely values.  Use the most significant\n+\tset bit for the maximum value.\n+\n+2021-08-03  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* config/i386/sse.md (cond_<insn><mode>): New expander.\n+\t(cond_mul<mode>): Ditto.\n+\n 2021-08-03  Kewen Lin  <linkw@linux.ibm.com>\n \n \t* tree-cfg.c (move_sese_region_to_fn): Fix typos on dloop."}, {"sha": "856144c7aa24148fa48ab82ad5ebbd0751212fd1", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1407c7613214cb4a45734fdb14c4756a83808a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1407c7613214cb4a45734fdb14c4756a83808a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=fa1407c7613214cb4a45734fdb14c4756a83808a", "patch": "@@ -1 +1 @@\n-20210803\n+20210804"}, {"sha": "4579796ed002458a9252db74d8197a2a96435bac", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1407c7613214cb4a45734fdb14c4756a83808a/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1407c7613214cb4a45734fdb14c4756a83808a/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=fa1407c7613214cb4a45734fdb14c4756a83808a", "patch": "@@ -1,3 +1,9 @@\n+2021-08-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR analyzer/101721\n+\t* sm-malloc.cc (known_allocator_p): Only check DECL_FUNCTION_CODE on\n+\tBUILT_IN_NORMAL builtins.\n+\n 2021-07-29  Ankur Saini  <arsenic@sourceware.org>\n \n \t* call-string.cc (call_string::element_t::operator==): New operator."}, {"sha": "097a5b52365590dca8e4d93bda6f79a15d89ad13", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1407c7613214cb4a45734fdb14c4756a83808a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1407c7613214cb4a45734fdb14c4756a83808a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fa1407c7613214cb4a45734fdb14c4756a83808a", "patch": "@@ -1,3 +1,65 @@\n+2021-08-03  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* lib/profopt.exp: Pass gdwarf-4 when compiling test to profile; pass -gcov_version=2.\n+\t* lib/target-supports.exp: Remove unnecessary -o perf.data passed to gcc-auto-profile.\n+\n+2021-08-03  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* gcc.dg/tree-prof/indir-call-prof-2.c: Fix dg-final-use-autofdo.\n+\t* lib/profopt.exp: Pass -fearly-inlining when compiling with AutoFDO.\n+\n+2021-08-03  Eugene Rozenfeld  <erozen@microsoft.com>\n+\n+\t* g++.dg/tree-prof/indir-call-prof.C: Fix options, increase the number of iterations.\n+\t* g++.dg/tree-prof/morefunc.C: Fix options, increase the number of iterations.\n+\t* g++.dg/tree-prof/reorder.C: Fix options, increase the number of iterations.\n+\t* gcc.dg/tree-prof/indir-call-prof-2.c: Fix options, increase the number of iterations.\n+\t* gcc.dg/tree-prof/indir-call-prof.c: Fix options.\n+\n+2021-08-03  Martin Sebor  <msebor@redhat.com>\n+\n+\tPR testsuite/101688\n+\t* g++.dg/warn/Wstringop-overflow-4.C: Disable a test case in ILP32.\n+\n+2021-08-03  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* gcc.target/powerpc/sse4_1-phminposuw.c: Copy from\n+\tgcc/testsuite/gcc.target/i386, adjust dg directives to suit,\n+\tmake more robust.\n+\n+2021-08-03  H.J. Lu  <hjl.tools@gmail.com>\n+\n+\t* gcc.target/i386/avx-vzeroupper-14.c: Pass -mno-avx512f to\n+\tdisable XMM31.\n+\t* gcc.target/i386/avx-vzeroupper-15.c: Likewise.\n+\t* gcc.target/i386/pr82941-1.c: Updated.  Check for vzeroupper.\n+\t* gcc.target/i386/pr82942-1.c: Likewise.\n+\t* gcc.target/i386/pr82990-1.c: Likewise.\n+\t* gcc.target/i386/pr82990-3.c: Likewise.\n+\t* gcc.target/i386/pr82990-5.c: Likewise.\n+\t* gcc.target/i386/pr100865-4b.c: Likewise.\n+\t* gcc.target/i386/pr100865-6b.c: Likewise.\n+\t* gcc.target/i386/pr100865-7b.c: Likewise.\n+\t* gcc.target/i386/pr100865-10b.c: Likewise.\n+\t* gcc.target/i386/pr100865-8b.c: Updated.\n+\t* gcc.target/i386/pr100865-9b.c: Likewise.\n+\t* gcc.target/i386/pr100865-11b.c: Likewise.\n+\t* gcc.target/i386/pr100865-12b.c: Likewise.\n+\n+2021-08-03  liuhongt  <hongtao.liu@intel.com>\n+\n+\t* gcc.target/i386/cond_op_addsubmul_d-1.c: New test.\n+\t* gcc.target/i386/cond_op_addsubmul_d-2.c: New test.\n+\t* gcc.target/i386/cond_op_addsubmul_q-1.c: New test.\n+\t* gcc.target/i386/cond_op_addsubmul_q-2.c: New test.\n+\t* gcc.target/i386/cond_op_addsubmul_w-1.c: New test.\n+\t* gcc.target/i386/cond_op_addsubmul_w-2.c: New test.\n+\n+2021-08-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR analyzer/101721\n+\t* gcc.dg/analyzer/pr101721.c: New test.\n+\n 2021-08-03  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/80566"}, {"sha": "ddf466bd924290f7f655c7d0329236a869ff27bc", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1407c7613214cb4a45734fdb14c4756a83808a/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1407c7613214cb4a45734fdb14c4756a83808a/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=fa1407c7613214cb4a45734fdb14c4756a83808a", "patch": "@@ -1,3 +1,8 @@\n+2021-08-03  Mos\u00e8 Giordano  <mose@gnu.org>\n+\n+\tPR sanitizer/101111\n+\t* configure.tgt: Fix bashism in setting of `EXTRA_CXXFLAGS'.\n+\n 2021-07-28  Ilya Leoshkevich  <iii@linux.ibm.com>\n \n \t* configure.tgt (s390*-*-linux*): Enable LSan and TSan for"}, {"sha": "b21bb6c5e591475283e4fe24dfa976e3546b4625", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fa1407c7613214cb4a45734fdb14c4756a83808a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fa1407c7613214cb4a45734fdb14c4756a83808a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=fa1407c7613214cb4a45734fdb14c4756a83808a", "patch": "@@ -1,3 +1,120 @@\n+2021-08-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/random.tcc (linear_congruential_engine): Do not\n+\tdefine static constexpr members when they are implicitly inline.\n+\t* include/std/ratio (ratio, __ratio_multiply, __ratio_divide)\n+\t(__ratio_add, __ratio_subtract): Likewise.\n+\t* include/std/type_traits (integral_constant): Likewise.\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error\n+\tline number.\n+\n+2021-08-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/util/testsuite_common_types.h: Replace uses of\n+\ttr1::unordered_map and tr1::unordered_set with their C++11\n+\tequivalents.\n+\t* testsuite/29_atomics/atomic/cons/assign_neg.cc: Adjust\n+\tdg-error line number.\n+\t* testsuite/29_atomics/atomic/cons/copy_neg.cc: Likewise.\n+\t* testsuite/29_atomics/atomic_integral/cons/assign_neg.cc:\n+\tLikewise.\n+\t* testsuite/29_atomics/atomic_integral/cons/copy_neg.cc:\n+\tLikewise.\n+\t* testsuite/29_atomics/atomic_integral/operators/bitwise_neg.cc:\n+\tLikewise.\n+\t* testsuite/29_atomics/atomic_integral/operators/decrement_neg.cc:\n+\tLikewise.\n+\t* testsuite/29_atomics/atomic_integral/operators/increment_neg.cc:\n+\tLikewise.\n+\n+2021-08-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/memory_resource (polymorphic_allocator::delete_object):\n+\tCall destructor directly instead of using destroy.\n+\t(allocator_traits<polymorphic_allocator<T>>): Define partial\n+\tspecialization.\n+\n+2021-08-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/20_util/function_objects/binders/3113.cc: Remove\n+\ttrailing whitespace.\n+\t* testsuite/20_util/shared_ptr/assign/auto_ptr.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/assign/auto_ptr_neg.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/assign/auto_ptr_rvalue.cc:\n+\tLikewise.\n+\t* testsuite/20_util/shared_ptr/creation/dr925.cc: Likewise.\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/random_shuffle/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/random_shuffle/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\n+2021-08-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/evolution.xml: Document deprecation.\n+\t* doc/html/*: Regenerate.\n+\t* include/bits/c++config (_GLIBCXX14_DEPRECATED): Define.\n+\t(_GLIBCXX14_DEPRECATED_SUGGEST): Define.\n+\t* include/bits/stl_algo.h (random_shuffle): Deprecate for C++14\n+\tand later.\n+\t* testsuite/25_algorithms/headers/algorithm/synopsis.cc: Adjust\n+\tfor C++11 and C++14 changes to std::random_shuffle and\n+\tstd::shuffle.\n+\t* testsuite/25_algorithms/random_shuffle/1.cc: Add options to\n+\tuse deprecated algorithms.\n+\t* testsuite/25_algorithms/random_shuffle/59603.cc: Likewise.\n+\t* testsuite/25_algorithms/random_shuffle/moveable.cc: Likewise.\n+\t* testsuite/25_algorithms/random_shuffle/requirements/explicit_instantiation/2.cc:\n+\tLikewise.\n+\t* testsuite/25_algorithms/random_shuffle/requirements/explicit_instantiation/pod.cc:\n+\tLikewise.\n+\n+2021-08-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/23_containers/forward_list/operations/3.cc:\n+\tUse lambda instead of std::bind2nd.\n+\t* testsuite/20_util/function_objects/binders/3113.cc: Add\n+\toptions for testing deprecated features.\n+\t* testsuite/20_util/pair/cons/99957.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/assign/auto_ptr.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/assign/auto_ptr_neg.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/assign/auto_ptr_rvalue.cc:\n+\tLikewise.\n+\t* testsuite/20_util/shared_ptr/cons/43820_neg.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/cons/auto_ptr.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/cons/auto_ptr_neg.cc: Likewise.\n+\t* testsuite/20_util/shared_ptr/creation/dr925.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/cons/auto_ptr.cc: Likewise.\n+\t* testsuite/20_util/unique_ptr/cons/auto_ptr_neg.cc: Likewise.\n+\t* testsuite/ext/pb_ds/example/priority_queue_erase_if.cc:\n+\tLikewise.\n+\t* testsuite/ext/pb_ds/example/priority_queue_split_join.cc:\n+\tLikewise.\n+\t* testsuite/lib/dg-options.exp (dg_add_options_using-deprecated):\n+\tNew proc.\n+\n+2021-08-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/regex_executor.h (_State_info): Replace\n+\tunique_ptr<bool[]> with array of bool.\n+\t* include/bits/regex_executor.tcc: Likewise.\n+\t* include/bits/regex_scanner.tcc: Replace std::strchr with\n+\t__builtin_strchr.\n+\t* include/std/regex: Replace standard headers with smaller\n+\tinternal ones.\n+\t* testsuite/28_regex/traits/char/lookup_classname.cc: Include\n+\t<string.h> for strlen.\n+\t* testsuite/28_regex/traits/char/lookup_collatename.cc:\n+\tLikewise.\n+\n+2021-08-03  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/locale_conv.h (__detail::_Scoped_ptr): Define new\n+\tRAII class template.\n+\t(wstring_convert, wbuffer_convert): Use __detail::_Scoped_ptr\n+\tinstead of unique_ptr.\n+\n 2021-08-02  Patrick Palka  <ppalka@redhat.com>\n \n \tPR libstdc++/101599"}]}