{"sha": "5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWQzOTBmZDNhZTRlMmRlNjZiNGY1M2VmYmI2NTdlYTAxZmVlNTYyMA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2018-12-14T20:41:58Z"}, "committer": {"name": "Thomas Schwinge", "email": "tschwinge@gcc.gnu.org", "date": "2018-12-14T20:41:58Z"}, "message": "Add user-friendly diagnostics for OpenACC loop parallelism assigned\n\n\tgcc/\n\t* omp-offload.c (inform_oacc_loop): New function.\n\t(execute_oacc_device_lower): Use it to display loop parallelism.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/note-parallelism.c: New test.\n\t* gfortran.dg/goacc/note-parallelism.f90: New test.\n\t* c-c++-common/goacc/classify-kernels-unparallelized.c: Update.\n\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n\t* c-c++-common/goacc/classify-parallel.c: Likewise.\n\t* c-c++-common/goacc/classify-routine.c: Likewise.\n\t* c-c++-common/goacc/kernels-1.c: Likewise.\n\t* c-c++-common/goacc/kernels-double-reduction-n.c: Likewise.\n\t* c-c++-common/goacc/kernels-double-reduction.c: Likewise.\n\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Likewise.\n\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n\t* gfortran.dg/goacc/classify-parallel.f95: Likewise.\n\t* gfortran.dg/goacc/classify-routine.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-loop-inner.f95: Likewise.\n\nCo-Authored-By: Cesar Philippidis <cesar@codesourcery.com>\n\nFrom-SVN: r267146", "tree": {"sha": "79273ca3c675e032a4b134069769b88030d859f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/79273ca3c675e032a4b134069769b88030d859f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "890b87d1743154cc57f54e6085e292b537dba428", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/890b87d1743154cc57f54e6085e292b537dba428", "html_url": "https://github.com/Rust-GCC/gccrs/commit/890b87d1743154cc57f54e6085e292b537dba428"}], "stats": {"total": 362, "additions": 346, "deletions": 16}, "files": [{"sha": "7fb4958da485133fc1143122e7285980f3653e7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -1,3 +1,9 @@\n+2018-12-14  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* omp-offload.c (inform_oacc_loop): New function.\n+\t(execute_oacc_device_lower): Use it to display loop parallelism.\n+\n 2018-12-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/82294"}, {"sha": "4457e1a3079b08ef57b8717a6f83e76ae9b8efc1", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -823,7 +823,7 @@ dump_oacc_loop_part (FILE *file, gcall *from, int depth,\n     }\n }\n \n-/* Dump OpenACC loops LOOP, its siblings and its children.  */\n+/* Dump OpenACC loop LOOP, its children, and its siblings.  */\n \n static void\n dump_oacc_loop (FILE *file, oacc_loop *loop, int depth)\n@@ -866,6 +866,31 @@ debug_oacc_loop (oacc_loop *loop)\n   dump_oacc_loop (stderr, loop, 0);\n }\n \n+/* Provide diagnostics on OpenACC loop LOOP, its children, and its\n+   siblings.  */\n+\n+static void\n+inform_oacc_loop (const oacc_loop *loop)\n+{\n+  const char *gang\n+    = loop->mask & GOMP_DIM_MASK (GOMP_DIM_GANG) ? \" gang\" : \"\";\n+  const char *worker\n+    = loop->mask & GOMP_DIM_MASK (GOMP_DIM_WORKER) ? \" worker\" : \"\";\n+  const char *vector\n+    = loop->mask & GOMP_DIM_MASK (GOMP_DIM_VECTOR) ? \" vector\" : \"\";\n+  const char *seq = loop->mask == 0 ? \" seq\" : \"\";\n+  const dump_user_location_t loc\n+    = dump_user_location_t::from_location_t (loop->loc);\n+  dump_printf_loc (MSG_OPTIMIZED_LOCATIONS, loc,\n+\t\t   \"assigned OpenACC%s%s%s%s loop parallelism\\n\", gang, worker,\n+\t\t   vector, seq);\n+\n+  if (loop->child)\n+    inform_oacc_loop (loop->child);\n+  if (loop->sibling)\n+    inform_oacc_loop (loop->sibling);\n+}\n+\n /* DFS walk of basic blocks BB onwards, creating OpenACC loop\n    structures as we go.  By construction these loops are properly\n    nested.  */\n@@ -1533,6 +1558,28 @@ execute_oacc_device_lower ()\n       dump_oacc_loop (dump_file, loops, 0);\n       fprintf (dump_file, \"\\n\");\n     }\n+  if (dump_enabled_p ())\n+    {\n+      oacc_loop *l = loops;\n+      /* OpenACC kernels constructs are special: they currently don't use the\n+\t generic oacc_loop infrastructure.  */\n+      if (is_oacc_kernels)\n+\t{\n+\t  /* Create a fake oacc_loop for diagnostic purposes.  */\n+\t  l = new_oacc_loop_raw (NULL,\n+\t\t\t\t DECL_SOURCE_LOCATION (current_function_decl));\n+\t  l->mask = used_mask;\n+\t}\n+      else\n+\t{\n+\t  /* Skip the outermost, dummy OpenACC loop  */\n+\t  l = l->child;\n+\t}\n+      if (l)\n+\tinform_oacc_loop (l);\n+      if (is_oacc_kernels)\n+\tfree_oacc_loop (l);\n+    }\n \n   /* Offloaded targets may introduce new basic blocks, which require\n      dominance information to update SSA.  */"}, {"sha": "6b035b34ecfd982fc1aa8b7a9119087a43d04035", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -1,3 +1,21 @@\n+2018-12-14  Thomas Schwinge  <thomas@codesourcery.com>\n+\t    Cesar Philippidis  <cesar@codesourcery.com>\n+\n+\t* c-c++-common/goacc/note-parallelism.c: New test.\n+\t* gfortran.dg/goacc/note-parallelism.f90: New test.\n+\t* c-c++-common/goacc/classify-kernels-unparallelized.c: Update.\n+\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n+\t* c-c++-common/goacc/classify-parallel.c: Likewise.\n+\t* c-c++-common/goacc/classify-routine.c: Likewise.\n+\t* c-c++-common/goacc/kernels-1.c: Likewise.\n+\t* c-c++-common/goacc/kernels-double-reduction-n.c: Likewise.\n+\t* c-c++-common/goacc/kernels-double-reduction.c: Likewise.\n+\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-parallel.f95: Likewise.\n+\t* gfortran.dg/goacc/classify-routine.f95: Likewise.\n+\t* gfortran.dg/goacc/kernels-loop-inner.f95: Likewise.\n+\n 2018-12-14  Alexandre Oliva <aoliva@redhat.com>\n \n \tPR c++/86823"}, {"sha": "d4c4b2ca237a66ca4b133a9360ae507af92cab1e", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels-unparallelized.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -2,6 +2,7 @@\n    OpenACC kernels.  */\n \n /* { dg-additional-options \"-O2\" }\n+   { dg-additional-options \"-fopt-info-optimized-omp\" }\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n    { dg-additional-options \"-fdump-tree-parloops1-all\" }\n    { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n@@ -18,7 +19,7 @@ extern unsigned int f (unsigned int);\n \n void KERNELS ()\n {\n-#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[f (i)] + b[f (i)];\n }"}, {"sha": "16e9b9e31d162bf66214ab0a488941c1398cb53e", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -2,6 +2,7 @@\n    kernels.  */\n \n /* { dg-additional-options \"-O2\" }\n+   { dg-additional-options \"-fopt-info-optimized-omp\" }\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n    { dg-additional-options \"-fdump-tree-parloops1-all\" }\n    { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n@@ -14,7 +15,7 @@ extern unsigned int *__restrict c;\n \n void KERNELS ()\n {\n-#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+#pragma acc kernels copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC gang loop parallelism\" } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[i] + b[i];\n }"}, {"sha": "66a6d13366389ad1118f4245be18ffb2e1d7d9a7", "filename": "gcc/testsuite/c-c++-common/goacc/classify-parallel.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -2,6 +2,7 @@\n    parallel.  */\n \n /* { dg-additional-options \"-O2\" }\n+   { dg-additional-options \"-fopt-info-optimized-omp\" }\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n    { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n \n@@ -13,7 +14,7 @@ extern unsigned int *__restrict c;\n \n void PARALLEL ()\n {\n-#pragma acc parallel loop copyin (a[0:N], b[0:N]) copyout (c[0:N])\n+#pragma acc parallel loop copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[i] + b[i];\n }"}, {"sha": "a723d2cdf513b6a3c3e808cc7d1caf467ba1cd5b", "filename": "gcc/testsuite/c-c++-common/goacc/classify-routine.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -2,6 +2,7 @@\n    routine.  */\n \n /* { dg-additional-options \"-O2\" }\n+   { dg-additional-options \"-fopt-info-optimized-omp\" }\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n    { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n \n@@ -15,7 +16,7 @@ extern unsigned int *__restrict c;\n #pragma acc routine worker\n void ROUTINE ()\n {\n-#pragma acc loop\n+#pragma acc loop /* { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" } */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[i] + b[i];\n }"}, {"sha": "016abbdfe8d8d7a1535804756738c4761a4cd00e", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-1.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-1.c?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -1,7 +1,9 @@\n+/* { dg-additional-options \"-fopt-info-optimized-omp\" } */\n+\n int\n kernels_empty (void)\n {\n-#pragma acc kernels\n+#pragma acc kernels /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n   ;\n \n   return 0;\n@@ -10,7 +12,7 @@ kernels_empty (void)\n int\n kernels_eternal (void)\n {\n-#pragma acc kernels\n+#pragma acc kernels /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n   {\n     while (1)\n       ;\n@@ -22,7 +24,7 @@ kernels_eternal (void)\n int\n kernels_noreturn (void)\n {\n-#pragma acc kernels\n+#pragma acc kernels /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n   __builtin_abort ();\n \n   return 0;\n@@ -36,7 +38,7 @@ kernels_loop_ptr_it (void)\n {\n   float *i;\n \n-#pragma acc kernels\n+#pragma acc kernels /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n   {\n #pragma acc loop\n     for (i = &b[0][0][0]; i < &b[0][0][10]; i++)"}, {"sha": "8f7f415b58d848cf51427c102972e248c1bcb191", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-double-reduction-n.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction-n.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction-n.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction-n.c?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -1,4 +1,5 @@\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fopt-info-optimized-omp\" } */\n /* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n /* { dg-additional-options \"-fdump-tree-optimized\" } */\n \n@@ -14,7 +15,7 @@ foo (unsigned int n)\n   int i, j;\n   unsigned int sum = 1;\n \n-#pragma acc kernels copyin (a[0:n]) copy (sum)\n+#pragma acc kernels copyin (a[0:n]) copy (sum) /* { dg-message \"optimized: assigned OpenACC gang loop parallelism\" } */\n   {\n     for (i = 0; i < n; ++i)\n       for (j = 0; j < n; ++j)"}, {"sha": "c11d36fb4373a01981d2e5804ad9b45131d55dd8", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-double-reduction.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-double-reduction.c?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -1,4 +1,5 @@\n /* { dg-additional-options \"-O2\" } */\n+/* { dg-additional-options \"-fopt-info-optimized-omp\" } */\n /* { dg-additional-options \"-fdump-tree-parloops1-all\" } */\n /* { dg-additional-options \"-fdump-tree-optimized\" } */\n \n@@ -14,7 +15,7 @@ foo (void)\n   int i, j;\n   unsigned int sum = 1;\n \n-#pragma acc kernels copyin (a[0:N]) copy (sum)\n+#pragma acc kernels copyin (a[0:N]) copy (sum) /* { dg-message \"optimized: assigned OpenACC gang loop parallelism\" } */\n   {\n     for (i = 0; i < N; ++i)\n       for (j = 0; j < N; ++j)"}, {"sha": "735df7dfad7ae1f225bdf7d77ca0b919109b72b5", "filename": "gcc/testsuite/c-c++-common/goacc/note-parallelism.c", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnote-parallelism.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnote-parallelism.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fnote-parallelism.c?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -0,0 +1,115 @@\n+/* Test the output of \"-fopt-info-optimized-omp\".  */\n+\n+/* { dg-additional-options \"-fopt-info-optimized-omp\" } */\n+\n+/* See also \"../../gfortran.dg/goacc/note-parallelism.f90\".  */\n+\n+int\n+main ()\n+{\n+  int x, y, z;\n+\n+#pragma acc parallel\n+  for (x = 0; x < 10; x++)\n+    ;\n+\n+#pragma acc parallel loop seq /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+    ;\n+\n+#pragma acc parallel loop gang /* { dg-message \"optimized: assigned OpenACC gang loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+    ;\n+\n+#pragma acc parallel loop worker /* { dg-message \"optimized: assigned OpenACC worker loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+    ;\n+\n+#pragma acc parallel loop vector /* { dg-message \"optimized: assigned OpenACC vector loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+    ;\n+\n+#pragma acc parallel loop gang vector /* { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+    ;\n+\n+#pragma acc parallel loop gang worker /* { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+    ;\n+\n+#pragma acc parallel loop worker vector /* { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+    ;\n+\n+#pragma acc parallel loop gang worker vector /* { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+    ;\n+\n+#pragma acc parallel loop gang /* { dg-message \"optimized: assigned OpenACC gang loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+#pragma acc loop worker /* { dg-message \"optimized: assigned OpenACC worker loop parallelism\" } */\n+    for (y = 0; y < 10; y++)\n+#pragma acc loop vector /* { dg-message \"optimized: assigned OpenACC vector loop parallelism\" } */\n+      for (z = 0; z < 10; z++)\n+\t;\n+\n+#pragma acc parallel loop /* { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+    ;\n+\n+#pragma acc parallel loop /* { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+#pragma acc loop /* { dg-message \"optimized: assigned OpenACC vector loop parallelism\" } */\n+    for (y = 0; y < 10; y++)\n+      ;\n+\n+#pragma acc parallel loop /* { dg-message \"optimized: assigned OpenACC gang loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+#pragma acc loop /* { dg-message \"optimized: assigned OpenACC worker loop parallelism\" } */\n+    for (y = 0; y < 10; y++)\n+#pragma acc loop /* { dg-message \"optimized: assigned OpenACC vector loop parallelism\" } */\n+      for (z = 0; z < 10; z++)\n+\t;\n+\n+#pragma acc parallel\n+  for (x = 0; x < 10; x++)\n+#pragma acc loop /* { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" } */\n+    for (y = 0; y < 10; y++)\n+#pragma acc loop /* { dg-message \"optimized: assigned OpenACC vector loop parallelism\" } */\n+      for (z = 0; z < 10; z++)\n+\t;\n+\n+#pragma acc parallel loop seq /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+#pragma acc loop /* { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" } */\n+    for (y = 0; y < 10; y++)\n+#pragma acc loop /* { dg-message \"optimized: assigned OpenACC vector loop parallelism\" } */\n+      for (z = 0; z < 10; z++)\n+\t;\n+\n+#pragma acc parallel loop /* { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+#pragma acc loop seq /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n+    for (y = 0; y < 10; y++)\n+#pragma acc loop /* { dg-message \"optimized: assigned OpenACC vector loop parallelism\" } */\n+      for (z = 0; z < 10; z++)\n+\t;\n+\n+#pragma acc parallel loop /* { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+#pragma acc loop /* { dg-message \"optimized: assigned OpenACC vector loop parallelism\" } */\n+    for (y = 0; y < 10; y++)\n+#pragma acc loop seq /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n+      for (z = 0; z < 10; z++)\n+\t;\n+\n+#pragma acc parallel loop seq /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n+  for (x = 0; x < 10; x++)\n+#pragma acc loop /* { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" } */\n+    for (y = 0; y < 10; y++)\n+#pragma acc loop seq /* { dg-message \"optimized: assigned OpenACC seq loop parallelism\" } */\n+      for (z = 0; z < 10; z++)\n+\t;\n+\n+  return 0;\n+}"}, {"sha": "08772428c4c533c9279f3bae6357706f5947474e", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels-unparallelized.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -2,6 +2,7 @@\n ! OpenACC kernels.\n \n ! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fopt-info-optimized-omp\" }\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n ! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n ! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n@@ -19,7 +20,7 @@ program main\n   call setup(a, b)\n \n   !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1))\n-  do i = 0, n - 1\n+  do i = 0, n - 1 ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n      c(i) = a(f (i)) + b(f (i))\n   end do\n   !$acc end kernels"}, {"sha": "f2c4736e111cddd22b4ff1c64daceaa5b85e1b14", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -2,6 +2,7 @@\n ! kernels.\n \n ! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fopt-info-optimized-omp\" }\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n ! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n ! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n@@ -15,7 +16,7 @@ program main\n   call setup(a, b)\n \n   !$acc kernels copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1))\n-  do i = 0, n - 1\n+  do i = 0, n - 1 ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n      c(i) = a(i) + b(i)\n   end do\n   !$acc end kernels"}, {"sha": "a23ea81609b4252518dca9099b2d9b1d64d04413", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-parallel.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -2,6 +2,7 @@\n ! parallel.\n \n ! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fopt-info-optimized-omp\" }\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n ! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n \n@@ -13,7 +14,7 @@ program main\n \n   call setup(a, b)\n \n-  !$acc parallel loop copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1))\n+  !$acc parallel loop copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n   do i = 0, n - 1\n      c(i) = a(i) + b(i)\n   end do"}, {"sha": "5cf4c13acb815ea65b989a840347a4e32215e1c2", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-routine.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -2,6 +2,7 @@\n ! routine.\n \n ! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fopt-info-optimized-omp\" }\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n ! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n \n@@ -13,7 +14,7 @@ subroutine ROUTINE\n \n   call setup(a, b)\n \n-  !$acc loop\n+  !$acc loop ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n   do i = 0, n - 1\n      c(i) = a(i) + b(i)\n   end do"}, {"sha": "a3ad591f926c2e993256fc047cac79c83acd60c9", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-loop-inner.f95", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-inner.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-inner.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-loop-inner.f95?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -1,12 +1,13 @@\n ! { dg-additional-options \"-O2\" }\n+! { dg-additional-options \"-fopt-info-optimized-omp\" }\n \n program main\n    implicit none\n \n    integer :: a(100,100), b(100,100)\n    integer :: i, j, d\n \n-   !$acc kernels\n+   !$acc kernels ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n    do i=1,100\n      do j=1,100\n        a(i,j) = 1"}, {"sha": "6c8a1bdc6a4c400773043d285c43201d3f3e22e3", "filename": "gcc/testsuite/gfortran.dg/goacc/note-parallelism.f90", "status": "added", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnote-parallelism.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5d390fd3ae4e2de66b4f53efbb657ea01fee5620/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnote-parallelism.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fnote-parallelism.f90?ref=5d390fd3ae4e2de66b4f53efbb657ea01fee5620", "patch": "@@ -0,0 +1,131 @@\n+! Test the output of \"-fopt-info-optimized-omp\".\n+\n+! { dg-additional-options \"-fopt-info-optimized-omp\" }\n+\n+! See also \"../../c-c++-common/goacc/note-parallelism.c\".\n+\n+program test\n+  implicit none\n+\n+  integer x, y, z\n+\n+  !$acc parallel\n+  do x = 1, 10\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+  do x = 1, 10\n+  end do\n+\n+  !$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelis\" }\n+  do x = 1, 10\n+  end do\n+\n+  !$acc parallel loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+  do x = 1, 10\n+  end do\n+\n+  !$acc parallel loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+  do x = 1, 10\n+  end do\n+\n+  !$acc parallel loop gang vector ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n+  do x = 1, 10\n+  end do\n+\n+  !$acc parallel loop gang worker ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n+  do x = 1, 10\n+  end do\n+\n+  !$acc parallel loop worker vector ! { dg-message \"optimized: assigned OpenACC worker vector loop parallelism\" }\n+  do x = 1, 10\n+  end do\n+\n+  !$acc parallel loop gang worker vector ! { dg-message \"optimized: assigned OpenACC gang worker vector loop parallelism\" }\n+  do x = 1, 10\n+  end do\n+\n+  !$acc parallel loop gang ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+  do x = 1, 10\n+     !$acc loop worker ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+     do y = 1, 10\n+        !$acc loop vector ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+        do z = 1, 10\n+        end do\n+     end do\n+  end do\n+\n+  !$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n+  do x = 1, 10\n+  end do\n+\n+  !$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n+  do x = 1, 10\n+     !$acc loop ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+     do y = 1, 10\n+     end do\n+  end do\n+\n+  !$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang loop parallelism\" }\n+  do x = 1, 10\n+     !$acc loop ! { dg-message \"optimized: assigned OpenACC worker loop parallelism\" }\n+     do y = 1, 10\n+        !$acc loop ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+        do z = 1, 10\n+        end do\n+     end do\n+  end do\n+\n+  !$acc parallel\n+  do x = 1, 10\n+     !$acc loop ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n+     do y = 1, 10\n+        !$acc loop ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+        do z = 1, 10\n+        end do\n+     end do\n+  end do\n+  !$acc end parallel\n+\n+  !$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+  do x = 1, 10\n+     !$acc loop ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n+     do y = 1, 10\n+        !$acc loop ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+        do z = 1, 10\n+        end do\n+     end do\n+  end do\n+\n+  !$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n+  do x = 1, 10\n+     !$acc loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+     do y = 1, 10\n+        !$acc loop ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+        do z = 1, 10\n+        end do\n+     end do\n+  end do\n+\n+  !$acc parallel loop ! { dg-message \"optimized: assigned OpenACC gang worker loop parallelism\" }\n+  do x = 1, 10\n+     !$acc loop ! { dg-message \"optimized: assigned OpenACC vector loop parallelism\" }\n+     do y = 1, 10\n+        !$acc loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+        do z = 1, 10\n+        end do\n+     end do\n+  end do\n+\n+  !$acc parallel loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+  do x = 1, 10\n+     !$acc loop ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n+     do y = 1, 10\n+        !$acc loop seq ! { dg-message \"optimized: assigned OpenACC seq loop parallelism\" }\n+        do z = 1, 10\n+        end do\n+     end do\n+  end do\n+\n+end program test"}]}