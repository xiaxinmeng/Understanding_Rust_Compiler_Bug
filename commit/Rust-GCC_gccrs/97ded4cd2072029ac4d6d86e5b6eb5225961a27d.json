{"sha": "97ded4cd2072029ac4d6d86e5b6eb5225961a27d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdkZWQ0Y2QyMDcyMDI5YWM0ZDZkODZlNWI2ZWI1MjI1OTYxYTI3ZA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2015-06-08T16:59:31Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2015-06-08T16:59:31Z"}, "message": "Handle -fipa-ra in reload_combine\n\n2015-06-08  Tom de Vries  <tom@codesourcery.com>\n\n\tPR rtl-optimization/66444\n\t* postreload.c (reload_combine): Use get_call_reg_set_usage instead of\n\tcall_used_regs.\n\n\t* gcc.dg/pr66444.c: New test.\n\nFrom-SVN: r224240", "tree": {"sha": "f4a4bc4c6b5a9206d6f9a46c50a5600118bca093", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4a4bc4c6b5a9206d6f9a46c50a5600118bca093"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97ded4cd2072029ac4d6d86e5b6eb5225961a27d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ded4cd2072029ac4d6d86e5b6eb5225961a27d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97ded4cd2072029ac4d6d86e5b6eb5225961a27d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97ded4cd2072029ac4d6d86e5b6eb5225961a27d/comments", "author": null, "committer": null, "parents": [{"sha": "ef701bbe50402a6b44f73bc3913ac8c85b1d5b9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef701bbe50402a6b44f73bc3913ac8c85b1d5b9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef701bbe50402a6b44f73bc3913ac8c85b1d5b9e"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "e3b98f30249cec5dfa65eec5ad59c3feed18851a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ded4cd2072029ac4d6d86e5b6eb5225961a27d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ded4cd2072029ac4d6d86e5b6eb5225961a27d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97ded4cd2072029ac4d6d86e5b6eb5225961a27d", "patch": "@@ -1,3 +1,9 @@\n+2015-06-08  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR rtl-optimization/66444\n+\t* postreload.c (reload_combine): Use get_call_reg_set_usage instead of\n+\tcall_used_regs.\n+\n 2015-06-08  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/66422"}, {"sha": "1cc7b143b3157197a2e1695864d81657d4e13131", "filename": "gcc/postreload.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ded4cd2072029ac4d6d86e5b6eb5225961a27d/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ded4cd2072029ac4d6d86e5b6eb5225961a27d/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=97ded4cd2072029ac4d6d86e5b6eb5225961a27d", "patch": "@@ -1352,9 +1352,12 @@ reload_combine (void)\n       if (CALL_P (insn))\n \t{\n \t  rtx link;\n+\t  HARD_REG_SET used_regs;\n+\n+\t  get_call_reg_set_usage (insn, &used_regs, call_used_reg_set);\n \n \t  for (r = 0; r < FIRST_PSEUDO_REGISTER; r++)\n-\t    if (call_used_regs[r])\n+\t    if (TEST_HARD_REG_BIT (used_regs, r))\n \t      {\n \t\treg_state[r].use_index = RELOAD_COMBINE_MAX_USES;\n \t\treg_state[r].store_ruid = reload_combine_ruid;"}, {"sha": "1209664293c1162c866b108c20c6669d8cba82e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ded4cd2072029ac4d6d86e5b6eb5225961a27d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ded4cd2072029ac4d6d86e5b6eb5225961a27d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=97ded4cd2072029ac4d6d86e5b6eb5225961a27d", "patch": "@@ -1,3 +1,8 @@\n+2015-06-08  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR rtl-optimization/66444\n+\t* gcc.dg/pr66444.c: New test.\n+\n 2015-06-08  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/66245"}, {"sha": "3f92a5c779b84666ec673b56dd078dd10b78c2b9", "filename": "gcc/testsuite/gcc.dg/pr66444.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97ded4cd2072029ac4d6d86e5b6eb5225961a27d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66444.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97ded4cd2072029ac4d6d86e5b6eb5225961a27d/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66444.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr66444.c?ref=97ded4cd2072029ac4d6d86e5b6eb5225961a27d", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fipa-ra\" } */\n+\n+extern void abort (void);\n+\n+#if (__SIZEOF_LONG_LONG__ == __SIZEOF_POINTER__)\n+#define ADD_SUFFIX(a) a ## ULL\n+#elif (__SIZEOF_LONG__ == __SIZEOF_POINTER__)\n+#define ADD_SUFFIX(a) a ## UL\n+#elif (__SIZEOF_INT__ == __SIZEOF_POINTER__)\n+#define ADD_SUFFIX(a) a ## U\n+#else\n+#error Add target support here\n+#endif\n+\n+#if __SIZEOF_POINTER__ <= 4\n+/* Use a 16 bit pointer to have a valid pointer for 16-bit to 31-bit pointer\n+   architectures.  Using sizeof, we cannot distinguish between 31-bit and 32-bit\n+   pointer types, so we also handle the 32-bit pointer type case here.  */\n+#define CONST_PTR ADD_SUFFIX (0x800)\n+#else\n+/* For x86_64 -m64, the problem reproduces with this 32-bit CONST_PTR, but not\n+   with a 2-power below it.  */\n+#define CONST_PTR ADD_SUFFIX (0x80000000)\n+#endif\n+\n+int __attribute__((noinline, noclone))\n+bar (void)\n+{\n+  return 1;\n+}\n+\n+struct S\n+{\n+  unsigned long p, q, r;\n+  void *v;\n+};\n+\n+struct S *s1;\n+struct S *s2;\n+\n+void __attribute__((noinline, noclone))\n+fn2 (struct S *x)\n+{\n+  s2 = x;\n+}\n+\n+__attribute__((noinline, noclone)) void *\n+fn1 (struct S *x)\n+{\n+  /* Just a statement to make it a non-const function.  */\n+  s1 = x;\n+\n+  return (void *)0;\n+}\n+\n+int __attribute__((noinline, noclone))\n+baz (void)\n+{\n+  struct S *x = (struct S *) CONST_PTR;\n+\n+  x += bar ();\n+\n+  fn1 (x);\n+  fn2 (x);\n+\n+  return 0;\n+}\n+\n+int\n+main (void)\n+{\n+  baz ();\n+\n+  if (s2 != (((struct S *) CONST_PTR) + 1))\n+    abort ();\n+\n+  return 0;\n+}"}]}