{"sha": "419af57c134f3b068530ea51179c220e52623067", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDE5YWY1N2MxMzRmM2IwNjg1MzBlYTUxMTc5YzIyMGU1MjYyMzA2Nw==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-01-07T19:30:28Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2019-01-07T19:30:28Z"}, "message": "re PR fortran/45424 ([F08] Add IS_CONTIGUOUS intrinsic)\n\n2019-01-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\tHarald Anlauf <anlauf@gmx.de>\n\tTobias Burnus <burnus@gcc.gnu.org>\n\n\tPR fortran/45424\n\t* check.c (gfc_check_is_contiguous): New function.\n\t* expr.c (gfc_is_not_contiguous): New function.\n\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_IS_CONTIGUOUS.\n\tAdd prototype for gfc_is_not_contiguous.\n\t* intrinsic.c (do_ts29113_check): Add GFC_ISYM_IS_CONTIGUOUS.\n\t(add_function): Add is_contiguous.\n\t* intrinsic.h: Add prototypes for gfc_check_is_contiguous,\n\tgfc_simplify_is_contiguous and gfc_resolve_is_contiguous.\n\t* intrinsic.texi: Add IS_CONTIGUOUS.\n\t* iresolve.c (gfc_resolve_is_contiguous): New function.\n\t* simplify.c (gfc_simplify_is_contiguous): New function.\n\t* trans-decl.c (gfor_fncecl_is_contiguous0): New variable.\n\t(gfc_build_intrinsic_function_decl): Add it.\n\t* trans-intrinsic.c (gfc_conv_intrinsic_is_contiguous): New\n\tfunction.\n\t(gfc_conv_intrinsic_function): Handle GFC_ISYM_IS_CONTIGUOUS.\n\n2019-01-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\tHarald Anlauf <anlauf@gmx.de>\n\tTobias Burnus <burnus@gcc.gnu.org>\n\n\tPR fortran/45424\n\t* Makefile.am: Add intrinsics/is_contiguous.c.\n\t* Makefile.in: Regenerated.\n\t* gfortran.map: Add _gfortran_is_contiguous0.\n\t* intrinsics/is_contiguous.c: New file.\n\t* libgfortran.h: Add prototype for is_contiguous0.\n\n2019-01-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\tHarald Anlauf <anlauf@gmx.de>\n\tTobias Burnus <burnus@gcc.gnu.org>\n\n\t* gfortran.dg/is_contiguous_1.f90: New test.\n\t* gfortran.dg/is_contiguous_2.f90: New test.\n\t* gfortran.dg/is_contiguous_3.f90: New test.\n\n\nCo-Authored-By: Harald Anlauf <anlauf@gmx.de>\nCo-Authored-By: Tobias Burnus <burnus@gcc.gnu.org>\n\nFrom-SVN: r267657", "tree": {"sha": "13b595e197309edb81f16d4d5476a620191f51b9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13b595e197309edb81f16d4d5476a620191f51b9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/419af57c134f3b068530ea51179c220e52623067", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419af57c134f3b068530ea51179c220e52623067", "html_url": "https://github.com/Rust-GCC/gccrs/commit/419af57c134f3b068530ea51179c220e52623067", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/419af57c134f3b068530ea51179c220e52623067/comments", "author": null, "committer": null, "parents": [{"sha": "25a34b0236ffcf23e9bc29826475729ccfef7c38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25a34b0236ffcf23e9bc29826475729ccfef7c38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25a34b0236ffcf23e9bc29826475729ccfef7c38"}], "stats": {"total": 463, "additions": 461, "deletions": 2}, "files": [{"sha": "ba95a26e6aef18c9f7420cf0c6bbf9e713c11e5f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -1,3 +1,25 @@\n+2019-01-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\tHarald Anlauf <anlauf@gmx.de>\n+\tTobias Burnus <burnus@gcc.gnu.org>\n+\n+\tPR fortran/45424\n+\t* check.c (gfc_check_is_contiguous): New function.\n+\t* expr.c (gfc_is_not_contiguous): New function.\n+\t* gfortran.h (gfc_isym_id): Add GFC_ISYM_IS_CONTIGUOUS.\n+\tAdd prototype for gfc_is_not_contiguous.\n+\t* intrinsic.c (do_ts29113_check): Add GFC_ISYM_IS_CONTIGUOUS.\n+\t(add_function): Add is_contiguous.\n+\t* intrinsic.h: Add prototypes for gfc_check_is_contiguous,\n+\tgfc_simplify_is_contiguous and gfc_resolve_is_contiguous.\n+\t* intrinsic.texi: Add IS_CONTIGUOUS.\n+\t* iresolve.c (gfc_resolve_is_contiguous): New function.\n+\t* simplify.c (gfc_simplify_is_contiguous): New function.\n+\t* trans-decl.c (gfor_fncecl_is_contiguous0): New variable.\n+\t(gfc_build_intrinsic_function_decl): Add it.\n+\t* trans-intrinsic.c (gfc_conv_intrinsic_is_contiguous): New\n+\tfunction.\n+\t(gfc_conv_intrinsic_function): Handle GFC_ISYM_IS_CONTIGUOUS.\n+\n 2019-01-06  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/88658"}, {"sha": "c60de6b5e4da7422290180c222a63200fa5b94ec", "filename": "gcc/fortran/check.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fcheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fcheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcheck.c?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -6499,6 +6499,17 @@ gfc_check_ttynam_sub (gfc_expr *unit, gfc_expr *name)\n }\n \n \n+bool\n+gfc_check_is_contiguous (gfc_expr *array)\n+{\n+  if (!array_check (array, 0))\n+    return false;\n+\n+  return true;\n+}\n+\n+\n+\n bool\n gfc_check_isatty (gfc_expr *unit)\n {"}, {"sha": "cd8d4dd26eb85a63734428f74ab9faf7bb5da935", "filename": "gcc/fortran/expr.c", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fexpr.c?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -5695,6 +5695,75 @@ gfc_is_simply_contiguous (gfc_expr *expr, bool strict, bool permit_element)\n   return true;\n }\n \n+/* Return true if the expression is guaranteed to be non-contiguous,\n+   false if we cannot prove anything.  It is probably best to call\n+   this after gfc_is_simply_contiguous.  If neither of them returns\n+   true, we cannot say (at compile-time).  */\n+\n+bool\n+gfc_is_not_contiguous (gfc_expr *array)\n+{\n+  int i;\n+  gfc_array_ref *ar = NULL;\n+  gfc_ref *ref;\n+  bool previous_incomplete;\n+\n+  for (ref = array->ref; ref; ref = ref->next)\n+    {\n+      /* Array-ref shall be last ref.  */\n+\n+      if (ar)\n+\treturn true;\n+\n+      if (ref->type == REF_ARRAY)\n+\tar = &ref->u.ar;\n+    }\n+\n+  if (ar == NULL || ar->type != AR_SECTION)\n+    return false;\n+\n+  previous_incomplete = false;\n+\n+  /* Check if we can prove that the array is not contiguous.  */\n+\n+  for (i = 0; i < ar->dimen; i++)\n+    {\n+      mpz_t arr_size, ref_size;\n+\n+      if (gfc_ref_dimen_size (ar, i, &ref_size, NULL))\n+\t{\n+\t  if (gfc_dep_difference (ar->as->lower[i], ar->as->upper[i], &arr_size))\n+\t    {\n+\t      /* a(2:4,2:) is known to be non-contiguous, but\n+\t\t a(2:4,i:i) can be contiguous.  */\n+\t      if (previous_incomplete && mpz_cmp_si (ref_size, 1) != 0)\n+\t\t{\n+\t\t  mpz_clear (arr_size);\n+\t\t  mpz_clear (ref_size);\n+\t\t  return true;\n+\t\t}\n+\t      else if (mpz_cmp (arr_size, ref_size) != 0)\n+\t\tprevious_incomplete = true;\n+\n+\t      mpz_clear (arr_size);\n+\t    }\n+\n+\t  /* Check for a(::2), i.e. where the stride is not unity.\n+\t     This is only done if there is more than one element in\n+\t     the reference along this dimension.  */\n+\n+\t  if (mpz_cmp_ui (ref_size, 1) > 0 && ar->type == AR_SECTION\n+\t      && ar->dimen_type[i] == DIMEN_RANGE\n+\t      && ar->stride[i] && ar->stride[i]->expr_type == EXPR_CONSTANT\n+\t      && mpz_cmp_si (ar->stride[i]->value.integer, 1) != 0)\n+\t    return true;\n+\n+\t  mpz_clear (ref_size);\n+\t}\n+    }\n+  /* We didn't find anything definitive.  */\n+  return false;\n+}\n \n /* Build call to an intrinsic procedure.  The number of arguments has to be\n    passed (rather than ending the list with a NULL value) because we may"}, {"sha": "e7a9b6f567442a90761322cf3715aac77f0ef187", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -487,6 +487,7 @@ enum gfc_isym_id\n   GFC_ISYM_IPARITY,\n   GFC_ISYM_IRAND,\n   GFC_ISYM_ISATTY,\n+  GFC_ISYM_IS_CONTIGUOUS,\n   GFC_ISYM_IS_IOSTAT_END,\n   GFC_ISYM_IS_IOSTAT_EOR,\n   GFC_ISYM_ISNAN,\n@@ -3205,6 +3206,7 @@ bool gfc_extract_hwi (gfc_expr *, HOST_WIDE_INT *, int = 0);\n \n bool is_subref_array (gfc_expr *);\n bool gfc_is_simply_contiguous (gfc_expr *, bool, bool);\n+bool gfc_is_not_contiguous (gfc_expr *);\n bool gfc_check_init_expr (gfc_expr *);\n \n gfc_expr *gfc_build_conversion (gfc_expr *);"}, {"sha": "8d80869b9bca860251b05723b457a92b8fcd3309", "filename": "gcc/fortran/intrinsic.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fintrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fintrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.c?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -211,6 +211,7 @@ do_ts29113_check (gfc_intrinsic_sym *specific, gfc_actual_arglist *arg)\n \t       && specific->id != GFC_ISYM_SIZE\n \t       && specific->id != GFC_ISYM_SIZEOF\n \t       && specific->id != GFC_ISYM_UBOUND\n+\t       && specific->id != GFC_ISYM_IS_CONTIGUOUS\n \t       && specific->id != GFC_ISYM_C_LOC)\n \t{\n \t  gfc_error (\"Assumed-type argument at %L is not permitted as actual\"\n@@ -2235,6 +2236,14 @@ add_functions (void)\n \n   make_generic (\"isatty\", GFC_ISYM_ISATTY, GFC_STD_GNU);\n \n+  add_sym_1 (\"is_contiguous\", GFC_ISYM_IS_CONTIGUOUS, CLASS_INQUIRY, ACTUAL_NO,\n+\t     BT_LOGICAL, dl, GFC_STD_F2008,\n+\t     gfc_check_is_contiguous, gfc_simplify_is_contiguous,\n+\t     gfc_resolve_is_contiguous,\n+\t     ar, BT_REAL, dr, REQUIRED);\n+\n+  make_generic (\"is_contiguous\", GFC_ISYM_IS_CONTIGUOUS, GFC_STD_F2008);\n+\n   add_sym_1 (\"is_iostat_end\", GFC_ISYM_IS_IOSTAT_END,\n \t     CLASS_ELEMENTAL, ACTUAL_NO, BT_LOGICAL, dl, GFC_STD_F2003,\n \t     gfc_check_i, gfc_simplify_is_iostat_end, NULL,"}, {"sha": "0c60dab839082bc0a1cbe4d46e8d1e5b5b8f0e22", "filename": "gcc/fortran/intrinsic.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fintrinsic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fintrinsic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.h?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -99,6 +99,7 @@ bool gfc_check_index (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n bool gfc_check_int (gfc_expr *, gfc_expr *);\n bool gfc_check_intconv (gfc_expr *);\n bool gfc_check_irand (gfc_expr *);\n+bool gfc_check_is_contiguous (gfc_expr *);\n bool gfc_check_isatty (gfc_expr *);\n bool gfc_check_isnan (gfc_expr *);\n bool gfc_check_ishft (gfc_expr *, gfc_expr *);\n@@ -327,6 +328,7 @@ gfc_expr *gfc_simplify_ifix (gfc_expr *);\n gfc_expr *gfc_simplify_idint (gfc_expr *);\n gfc_expr *gfc_simplify_ior (gfc_expr *, gfc_expr *);\n gfc_expr *gfc_simplify_iparity (gfc_expr *, gfc_expr *, gfc_expr *);\n+gfc_expr *gfc_simplify_is_contiguous (gfc_expr *);\n gfc_expr *gfc_simplify_is_iostat_end (gfc_expr *);\n gfc_expr *gfc_simplify_is_iostat_eor (gfc_expr *);\n gfc_expr *gfc_simplify_isnan (gfc_expr *);\n@@ -531,6 +533,7 @@ void gfc_resolve_long (gfc_expr *, gfc_expr *);\n void gfc_resolve_ior (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_iparity (gfc_expr *, gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_isatty (gfc_expr *, gfc_expr *);\n+void gfc_resolve_is_contiguous (gfc_expr *, gfc_expr *);\n void gfc_resolve_rank (gfc_expr *, gfc_expr *);\n void gfc_resolve_rshift (gfc_expr *, gfc_expr *, gfc_expr *);\n void gfc_resolve_lshift (gfc_expr *, gfc_expr *, gfc_expr *);"}, {"sha": "e47ee1ecc4fcc50214e0614b18765a7e5e39c58f", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -195,6 +195,7 @@ Some basic guidelines for editing this document:\n * @code{IOR}:           IOR,       Bitwise logical or\n * @code{IPARITY}:       IPARITY,   Bitwise XOR of array elements\n * @code{IRAND}:         IRAND,     Integer pseudo-random number\n+* @code{IS_CONTIGUOUS}:  IS_CONTIGUOUS, Test whether an array is contiguous\n * @code{IS_IOSTAT_END}:  IS_IOSTAT_END, Test for end-of-file value\n * @code{IS_IOSTAT_EOR}:  IS_IOSTAT_EOR, Test for end-of-record value\n * @code{ISATTY}:        ISATTY,    Whether a unit is a terminal device\n@@ -8438,6 +8439,55 @@ end program test_irand\n \n \n \n+@node IS_CONTIGUOUS\n+@section @code{IS_CONTIGUOUS} --- Test whether an array is contiguous\n+@fnindex IS_IOSTAT_EOR\n+@cindex array, contiguity\n+\n+@table @asis\n+@item @emph{Description}:\n+@code{IS_CONTIGUOUS} tests whether an array is contiguous.\n+\n+@item @emph{Standard}:\n+Fortran 2008 and later\n+\n+@item @emph{Class}:\n+Inquiry function\n+\n+@item @emph{Syntax}:\n+@code{RESULT = IS_CONTIGUOUS(ARRAY)}\n+\n+@item @emph{Arguments}:\n+@multitable @columnfractions .15 .70\n+@item @var{ARRAY} @tab Shall be an array of any type.\n+@end multitable\n+\n+@item @emph{Return value}:\n+Returns a @code{LOGICAL} of the default kind, which @code{.TRUE.} if\n+@var{ARRAY} is contiguous and false otherwise.\n+\n+@item @emph{Example}:\n+@smallexample\n+program test\n+  integer :: a(10)\n+  a = [1,2,3,4,5,6,7,8,9,10]\n+  call sub (a)      ! every element, is contiguous\n+  call sub (a(::2)) ! every other element, is noncontiguous\n+contains\n+  subroutine sub (x)\n+    integer :: x(:)\n+    if (is_contiguous (x)) then\n+      write (*,*) 'X is contiguous'\n+    else\n+      write (*,*) 'X is not contiguous'\n+    end if\n+  end subroutine sub\n+end program test\n+@end smallexample\n+@end table\n+\n+\n+\n @node IS_IOSTAT_END\n @section @code{IS_IOSTAT_END} --- Test for end-of-file value\n @fnindex IS_IOSTAT_END\n@@ -8527,7 +8577,6 @@ END PROGRAM\n @end table\n \n \n-\n @node ISATTY\n @section @code{ISATTY} --- Whether a unit is a terminal device.\n @fnindex ISATTY"}, {"sha": "135e6bc6920b7652bb6de399f9c0400bef52d4ee", "filename": "gcc/fortran/iresolve.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Firesolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Firesolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Firesolve.c?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -1451,6 +1451,15 @@ gfc_resolve_isatty (gfc_expr *f, gfc_expr *u)\n }\n \n \n+void\n+gfc_resolve_is_contiguous (gfc_expr *f, gfc_expr *array ATTRIBUTE_UNUSED)\n+{\n+  f->ts.type = BT_LOGICAL;\n+  f->ts.kind = gfc_default_logical_kind;\n+  f->value.function.name = gfc_get_string (\"__is_contiguous\");\n+}\n+\n+\n void\n gfc_resolve_ishft (gfc_expr *f, gfc_expr *i, gfc_expr *shift)\n {"}, {"sha": "90477e5dadc7b87ef745653c14f977005327e9f0", "filename": "gcc/fortran/simplify.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fsimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Fsimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fsimplify.c?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -6289,6 +6289,18 @@ do_xor (gfc_expr *result, gfc_expr *e)\n }\n \n \n+gfc_expr *\n+gfc_simplify_is_contiguous (gfc_expr *array)\n+{\n+  if (gfc_is_simply_contiguous (array, false, true))\n+    return gfc_get_logical_expr (gfc_default_logical_kind, &array->where, 1);\n+\n+  if (gfc_is_not_contiguous (array))\n+    return gfc_get_logical_expr (gfc_default_logical_kind, &array->where, 0);\n+    \n+  return NULL;\n+}\n+\n \n gfc_expr *\n gfc_simplify_parity (gfc_expr *e, gfc_expr *dim)"}, {"sha": "c92d8913334a5d8ac1b88b027b37fe790af2081f", "filename": "gcc/fortran/trans-decl.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Ftrans-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Ftrans-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-decl.c?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -213,6 +213,7 @@ tree gfor_fndecl_size1;\n tree gfor_fndecl_iargc;\n tree gfor_fndecl_kill;\n tree gfor_fndecl_kill_sub;\n+tree gfor_fndecl_is_contiguous0;\n \n \n /* Intrinsic functions implemented in Fortran.  */\n@@ -3498,6 +3499,12 @@ gfc_build_intrinsic_function_decls (void)\n   gfor_fndecl_kill = gfc_build_library_function_decl (\n \tget_identifier (PREFIX (\"kill\")), gfc_int4_type_node,\n \t2, gfc_int4_type_node, gfc_int4_type_node);\n+\n+  gfor_fndecl_is_contiguous0 = gfc_build_library_function_decl_with_spec (\n+\tget_identifier (PREFIX(\"is_contiguous0\")), \".R\",\n+\tgfc_int4_type_node, 1, pvoid_type_node);\n+  DECL_PURE_P (gfor_fndecl_is_contiguous0) = 1;\n+  TREE_NOTHROW (gfor_fndecl_is_contiguous0) = 1;\n }\n \n "}, {"sha": "b997ae53fc2b3a9b4f1e438be6749dc5d91b06a8", "filename": "gcc/fortran/trans-intrinsic.c", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Ftrans-intrinsic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Ftrans-intrinsic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-intrinsic.c?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -2828,6 +2828,79 @@ gfc_conv_intrinsic_rank (gfc_se *se, gfc_expr *expr)\n }\n \n \n+static void\n+gfc_conv_intrinsic_is_contiguous (gfc_se * se, gfc_expr * expr)\n+{\n+  gfc_expr *arg;\n+  gfc_ss *ss;\n+  gfc_se argse;\n+  tree desc, tmp, stride, extent, cond;\n+  int i;\n+  tree fncall0;\n+  gfc_array_spec *as;\n+\n+  arg = expr->value.function.actual->expr;\n+\n+  if (arg->ts.type == BT_CLASS)\n+    gfc_add_class_array_ref (arg);\n+\n+  ss = gfc_walk_expr (arg);\n+  gcc_assert (ss != gfc_ss_terminator);\n+  gfc_init_se (&argse, NULL);\n+  argse.data_not_needed = 1;\n+  gfc_conv_expr_descriptor (&argse, arg);\n+\n+  as = gfc_get_full_arrayspec_from_expr (arg);\n+\n+  /* Create:  stride[0] == 1 && stride[1] == extend[0]*stride[0] && ...\n+     Note in addition that zero-sized arrays don't count as contiguous.  */\n+\n+  if (as && as->type == AS_ASSUMED_RANK)\n+    {\n+      /* Build the call to is_contiguous0.  */\n+      argse.want_pointer = 1;\n+      gfc_conv_expr_descriptor (&argse, arg);\n+      gfc_add_block_to_block (&se->pre, &argse.pre);\n+      gfc_add_block_to_block (&se->post, &argse.post);\n+      desc = gfc_evaluate_now (argse.expr, &se->pre);\n+      fncall0 = build_call_expr_loc (input_location,\n+\t\t\t\t     gfor_fndecl_is_contiguous0, 1, desc);\n+      se->expr = fncall0;\n+      se->expr = convert (logical_type_node, se->expr);\n+    }\n+  else\n+    {\n+      gfc_add_block_to_block (&se->pre, &argse.pre);\n+      gfc_add_block_to_block (&se->post, &argse.post);\n+      desc = gfc_evaluate_now (argse.expr, &se->pre);\n+  \n+      stride = gfc_conv_descriptor_stride_get (desc, gfc_rank_cst[0]);\n+      cond = fold_build2_loc (input_location, EQ_EXPR, boolean_type_node,\n+\t\t\t      stride, build_int_cst (TREE_TYPE (stride), 1));\n+\n+      for (i = 0; i < expr->value.function.actual->expr->rank - 1; i++)\n+\t{\n+\t  tmp = gfc_conv_descriptor_lbound_get (desc, gfc_rank_cst[i]);\n+\t  extent = gfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[i]);\n+\t  extent = fold_build2_loc (input_location, MINUS_EXPR,\n+\t\t\t\t    gfc_array_index_type, extent, tmp);\n+\t  extent = fold_build2_loc (input_location, PLUS_EXPR,\n+\t\t\t\t    gfc_array_index_type, extent,\n+\t\t\t\t    gfc_index_one_node);\n+\t  tmp = gfc_conv_descriptor_stride_get (desc, gfc_rank_cst[i]);\n+\t  tmp = fold_build2_loc (input_location, MULT_EXPR, TREE_TYPE (tmp),\n+\t\t\t\t tmp, extent);\n+\t  stride = gfc_conv_descriptor_stride_get (desc, gfc_rank_cst[i+1]);\n+\t  tmp = fold_build2_loc (input_location, EQ_EXPR, boolean_type_node,\n+\t\t\t\t stride, tmp);\n+\t  cond = fold_build2_loc (input_location, TRUTH_AND_EXPR,\n+\t\t\t\t  boolean_type_node, cond, tmp);\n+\t}\n+      se->expr = convert (gfc_typenode_for_spec (&expr->ts), cond);\n+    }\n+}\n+\n+\n /* Evaluate a single upper or lower bound.  */\n /* TODO: bound intrinsic generates way too much unnecessary code.  */\n \n@@ -9731,6 +9804,10 @@ gfc_conv_intrinsic_function (gfc_se * se, gfc_expr * expr)\n       gfc_conv_has_intvalue (se, expr, LIBERROR_EOR);\n       break;\n \n+    case GFC_ISYM_IS_CONTIGUOUS:\n+      gfc_conv_intrinsic_is_contiguous (se, expr);\n+      break;\n+\n     case GFC_ISYM_ISNAN:\n       gfc_conv_intrinsic_isnan (se, expr);\n       break;"}, {"sha": "e42160b596285a767e6f91d8c4339c7c0a97e4fc", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -907,6 +907,7 @@ extern GTY(()) tree gfor_fndecl_size1;\n extern GTY(()) tree gfor_fndecl_iargc;\n extern GTY(()) tree gfor_fndecl_kill;\n extern GTY(()) tree gfor_fndecl_kill_sub;\n+extern GTY(()) tree gfor_fndecl_is_contiguous0;\n \n /* Implemented in Fortran.  */\n extern GTY(()) tree gfor_fndecl_sc_kind;"}, {"sha": "f512ed1ac1195750dcf3b297a559620501dad363", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -1,3 +1,11 @@\n+2019-01-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\tHarald Anlauf <anlauf@gmx.de>\n+\tTobias Burnus <burnus@gcc.gnu.org>\n+\n+\t* gfortran.dg/is_contiguous_1.f90: New test.\n+\t* gfortran.dg/is_contiguous_2.f90: New test.\n+\t* gfortran.dg/is_contiguous_3.f90: New test.\n+\n 2019-01-07  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/88741 - wrong error with initializer-string."}, {"sha": "ee592f27f6d1e07696a45582647a675240f5405a", "filename": "gcc/testsuite/gfortran.dg/is_contiguous_1.f90", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ftestsuite%2Fgfortran.dg%2Fis_contiguous_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ftestsuite%2Fgfortran.dg%2Fis_contiguous_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fis_contiguous_1.f90?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -0,0 +1,33 @@\n+! { dg-do run }\n+!\n+! PR fortran/45424\n+! PR fortran/48820\n+!\n+! Run-time checks for IS_CONTIGUOUS\n+\n+implicit none\n+integer, pointer :: a(:), b(:,:)\n+integer :: i, j, k, s\n+\n+allocate(a(5), b(10,10))\n+\n+s = 1\n+if (.true. .neqv. is_contiguous (a(::s))) stop 1\n+s = 2\n+if (.false. .neqv. is_contiguous (a(::s))) stop 2\n+i=5; j=7\n+if (.true. .neqv. is_contiguous (b(1:i*2,1:j))) stop 3\n+if (.false. .neqv. is_contiguous (b(1:i,1:j))) stop 4\n+i=5; j=5; s=1\n+if (.false. .neqv. is_contiguous (b(i:5:s,i:j*2))) stop 5\n+\n+! The following test zero-sized arrays. For the standard, they\n+! are regarded as noncontiguous. However, gfortran in line with\n+! other compilers only checks for the strides and thus prints\n+! .true. or .false. depending on this setting.\n+\n+s = 4\n+if (.false. .neqv. is_contiguous (a(2:1:s))) stop 6\n+s = 1\n+if (.true. .neqv. is_contiguous (a(2:1:s))) stop 7\n+end"}, {"sha": "210c191956b76e03edecbec6ab0a9afb4f8c69c1", "filename": "gcc/testsuite/gfortran.dg/is_contiguous_2.f90", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ftestsuite%2Fgfortran.dg%2Fis_contiguous_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ftestsuite%2Fgfortran.dg%2Fis_contiguous_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fis_contiguous_2.f90?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -0,0 +1,47 @@\n+! { dg-do  run }\n+!\n+! PR fortran/45424\n+! PR fortran/48820\n+!\n+! Additional run-time checks for IS_CONTIGUOUS with assumed type/rank\n+program is_contiguous_2\n+  implicit none\n+  real, allocatable :: b(:,:)\n+  real, pointer     :: c(:,:)\n+  integer, volatile :: k\n+  target :: b\n+  allocate(b(10,10))\n+  k = 2\n+  if (fail_ar (b,          .true.) ) stop 1\n+  if (fail_ar (b(::1,::1), .true.) ) stop 2\n+  if (fail_ar (b(::2,::1), .false.)) stop 3\n+  if (fail_ar (b(::1,::2), .false.)) stop 4\n+  if (fail_ar (b(:10,:10), .true. )) stop 5\n+  if (fail_ar (b(: 9,:10), .false.)) stop 6\n+  if (fail_ar (b(2: ,:  ), .false.)) stop 7\n+  if (fail_ar (b(:  ,2: ), .true. )) stop 8\n+  if (fail_ar (b(k: ,:  ), .false.)) stop 9\n+  if (fail_ar (b(:  ,k: ), .true. )) stop 10\n+  if (fail_at (b(::1,k: ), .true. )) stop 11\n+  if (fail_at (b(::k,k: ), .false.)) stop 12\n+  if (fail_at (b(10,k)   , .true. )) stop 13\n+  c => b(::1,:)\n+  if (fail_ar (c,          .true.) ) stop 14\n+  c => b(::2,:)\n+  if (fail_ar (c,          .false.)) stop 15\n+  associate (d => b(:,2:), e => b(::k,:))\n+    if (fail_ar (d,        .true.) ) stop 16\n+    if (fail_ar (e,        .false.)) stop 17\n+  end associate\n+contains\n+  pure logical function fail_ar (x, expect) result (fail)\n+    real,    dimension(..), intent(in) :: x  ! Assumed rank\n+    logical,                intent(in) :: expect\n+    fail = is_contiguous (x) .neqv. expect\n+  end function fail_ar\n+  pure logical function fail_at (x, expect) result (fail)\n+    type(*), dimension(..), intent(in) :: x  ! Assumed type/assumed rank\n+    logical,                intent(in) :: expect\n+    fail = is_contiguous (x) .neqv. expect\n+  end function fail_at\n+end program"}, {"sha": "e4d20605f24c08749c5e8cd1229447f592bd9065", "filename": "gcc/testsuite/gfortran.dg/is_contiguous_3.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/gcc%2Ftestsuite%2Fgfortran.dg%2Fis_contiguous_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/gcc%2Ftestsuite%2Fgfortran.dg%2Fis_contiguous_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fis_contiguous_3.f90?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -0,0 +1,24 @@\n+! { dg-do  run }\n+! { dg-additional-options \"-fdump-tree-original\" }\n+! PR 45424 - compile-time simplification of is_contiguous\n+program main\n+  real, dimension(10,5) :: a\n+  character (len=1) :: line\n+\n+  write (unit=line,fmt='(L1)') is_contiguous(a(4:2,:))\n+  if (line /= 'F') stop 1\n+\n+  write (unit=line,fmt='(L1)') is_contiguous(a(:,2:4))\n+  if (line /= 'T') stop 1\n+\n+  write (unit=line,fmt='(L1)') is_contiguous(a(2:4,3:4))\n+  if (line /= 'F') stop 3\n+\n+  write (unit=line,fmt='(L1)') is_contiguous(a(::2,:))\n+  if (line /= 'F') stop 4\n+\n+  write (unit=line,fmt='(L1)') is_contiguous(a(:,::2))\n+  if (line /= 'F') stop 5\n+\n+end program main\n+! { dg-final { scan-tree-dump-not \" _gfortran_is_contiguous\" \"original\" } }"}, {"sha": "eee978f654bb33c2a0dbeb3d8d7ec8f64f2f164e", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -1,3 +1,14 @@\n+2019-01-07  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\tHarald Anlauf <anlauf@gmx.de>\n+\tTobias Burnus <burnus@gcc.gnu.org>\n+\n+\tPR fortran/45424\n+\t* Makefile.am: Add intrinsics/is_contiguous.c.\n+\t* Makefile.in: Regenerated.\n+\t* gfortran.map: Add _gfortran_is_contiguous0.\n+\t* intrinsics/is_contiguous.c: New file.\n+\t* libgfortran.h: Add prototype for is_contiguous0.\n+\n 2019-01-07  Janne Blomqvist  <jb@gcc.gnu.org>\n \n \t* gfortran.map (GFORTRAN_9): Make GFORTRAN_9 node depend on"}, {"sha": "e1d757d9b9156416f05d5c8f67ea2ee21430d55e", "filename": "libgfortran/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/libgfortran%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/libgfortran%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.am?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -124,6 +124,7 @@ intrinsics/extends_type_of.c \\\n intrinsics/fnum.c \\\n intrinsics/ierrno.c \\\n intrinsics/ishftc.c \\\n+intrinsics/is_contiguous.c \\\n intrinsics/mvbits.c \\\n intrinsics/move_alloc.c \\\n intrinsics/pack_generic.c \\"}, {"sha": "ed8cf4cf9c908fed93261fcacf5ecffac4ebba9b", "filename": "libgfortran/Makefile.in", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/libgfortran%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/libgfortran%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FMakefile.in?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -414,7 +414,7 @@ am__objects_54 = size_from_kind.lo $(am__objects_53)\n am__objects_57 = associated.lo abort.lo args.lo cshift0.lo eoshift0.lo \\\n \teoshift2.lo erfc_scaled.lo extends_type_of.lo fnum.lo \\\n \tierrno.lo ishftc.lo mvbits.lo move_alloc.lo pack_generic.lo \\\n-\tselected_char_kind.lo size.lo spread_generic.lo \\\n+\tselected_char_kind.lo size.lo is_contiguous.lo spread_generic.lo \\\n \tstring_intrinsics.lo rand.lo random.lo reshape_generic.lo \\\n \treshape_packed.lo selected_int_kind.lo selected_real_kind.lo \\\n \tunpack_generic.lo in_pack_generic.lo in_unpack_generic.lo \\\n@@ -760,6 +760,7 @@ gfor_helper_src = intrinsics/associated.c intrinsics/abort.c \\\n \tintrinsics/ierrno.c intrinsics/ishftc.c intrinsics/mvbits.c \\\n \tintrinsics/move_alloc.c intrinsics/pack_generic.c \\\n \tintrinsics/selected_char_kind.c intrinsics/size.c \\\n+\tintrinsics/is_contiguous.c \\\n \tintrinsics/spread_generic.c intrinsics/string_intrinsics.c \\\n \tintrinsics/rand.c intrinsics/random.c \\\n \tintrinsics/reshape_generic.c intrinsics/reshape_packed.c \\\n@@ -2198,6 +2199,7 @@ distclean-compile:\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/single.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/size.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/size_from_kind.Plo@am__quote@\n+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/is_contiguous.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/sleep.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/spread_c10.Plo@am__quote@\n @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/spread_c16.Plo@am__quote@\n@@ -6318,6 +6320,13 @@ size.lo: intrinsics/size.c\n @AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n @am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o size.lo `test -f 'intrinsics/size.c' || echo '$(srcdir)/'`intrinsics/size.c\n \n+is_contiguous.lo: intrinsics/is_contiguous.c\n+@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT is_contiguous.lo -MD -MP -MF $(DEPDIR)/is_contiguous.Tpo -c -o is_contiguous.lo `test -f 'intrinsics/is_contiguous.c' || echo '$(srcdir)/'`intrinsics/is_contiguous.c\n+@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/is_contiguous.Tpo $(DEPDIR)/is_contiguous.Plo\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='intrinsics/is_contiguous.c' object='is_contiguous.lo' libtool=yes @AMDEPBACKSLASH@\n+@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n+@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o is_contiguous.lo `test -f 'intrinsics/is_contiguous.c' || echo '$(srcdir)/'`intrinsics/is_contiguous.c\n+\n spread_generic.lo: intrinsics/spread_generic.c\n @am__fastdepCC_TRUE@\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT spread_generic.lo -MD -MP -MF $(DEPDIR)/spread_generic.Tpo -c -o spread_generic.lo `test -f 'intrinsics/spread_generic.c' || echo '$(srcdir)/'`intrinsics/spread_generic.c\n @am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/spread_generic.Tpo $(DEPDIR)/spread_generic.Plo"}, {"sha": "43b32de5bf7e025fcc28b13bbed46ebafbec18c9", "filename": "libgfortran/gfortran.map", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/libgfortran%2Fgfortran.map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/libgfortran%2Fgfortran.map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgfortran.map?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -1518,6 +1518,7 @@ GFORTRAN_9 {\n   _gfortran_findloc1_s4;\n   _gfortran_findloc2_s1;\n   _gfortran_findloc2_s4;\n+  _gfortran_is_contiguous0;\n   _gfortran_mfindloc0_c16;\n   _gfortran_mfindloc0_c4;\n   _gfortran_mfindloc0_c8;"}, {"sha": "eea63a04462d6a3324f52556199972901d35e3a2", "filename": "libgfortran/intrinsics/is_contiguous.c", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/libgfortran%2Fintrinsics%2Fis_contiguous.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/libgfortran%2Fintrinsics%2Fis_contiguous.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fintrinsics%2Fis_contiguous.c?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -0,0 +1,49 @@\n+/* Implementation of the is_contiguous intrinsic.\n+   Copyright (C) 2019 Free Software Foundation, Inc.\n+   Contributed by Thomas K\u00f6nig <tkoenig@gcc.gnu.org>\n+\n+This file is part of the GNU Fortran runtime library (libgfortran).\n+\n+Libgfortran is free software; you can redistribute it and/or\n+modify it under the terms of the GNU General Public\n+License as published by the Free Software Foundation; either\n+version 3 of the License, or (at your option) any later version.\n+\n+Libgfortran is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+Under Section 7 of GPL version 3, you are granted additional\n+permissions described in the GCC Runtime Library Exception, version\n+3.1, as published by the Free Software Foundation.\n+\n+You should have received a copy of the GNU General Public License and\n+a copy of the GCC Runtime Library Exception along with this program;\n+see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+<https://www.gnu.org/licenses/>.  */\n+\n+#include \"libgfortran.h\"\n+\n+GFC_LOGICAL_4\n+is_contiguous0 (const array_t * const restrict array)\n+{\n+  index_type dim;\n+  index_type n;\n+  index_type extent, stride;\n+\n+  dim = GFC_DESCRIPTOR_RANK (array);\n+\n+  extent = 1;\n+  for (n = 0; n < dim; n++)\n+    {\n+      stride = GFC_DESCRIPTOR_STRIDE (array, n);\n+      if (stride != extent)\n+\treturn 0;\n+\n+      extent *= GFC_DESCRIPTOR_EXTENT (array, n);\n+    }\n+\n+  return 1;\n+}\n+iexport(is_contiguous0);"}, {"sha": "433b204abdac70987d083a7578aede181912d36a", "filename": "libgfortran/libgfortran.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/419af57c134f3b068530ea51179c220e52623067/libgfortran%2Flibgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/419af57c134f3b068530ea51179c220e52623067/libgfortran%2Flibgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Flibgfortran.h?ref=419af57c134f3b068530ea51179c220e52623067", "patch": "@@ -1375,6 +1375,11 @@ typedef GFC_ARRAY_DESCRIPTOR (void) array_t;\n extern index_type size0 (const array_t * array); \n iexport_proto(size0);\n \n+/* is_contiguous.c */\n+\n+extern GFC_LOGICAL_4 is_contiguous0 (const array_t * const restrict array); \n+iexport_proto(is_contiguous0);\n+\n /* bounds.c */\n \n extern void bounds_equal_extents (array_t *, array_t *, const char *,"}]}