{"sha": "7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "node_id": "C_kwDOANBUbNoAKDdhMDhiOTM5M2M3YjM2YzRkY2E4ZmNhOWE1Y2RhMjYxNTk0ZjYxZDY", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2022-10-21T15:09:49Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-11-08T08:35:00Z"}, "message": "ada: Move warnings switches -- initial work\n\nThis patch prepares to move warning switches from Opt into Warnsw.\n\ngcc/ada/\n\n\t* warnsw.ads, warnsw.adb, fe.h, err_vars.ads, errout.ads: Move\n\tWarning_Doc_Switch from Err_Vars to Warnsw. Access\n\tWarn_On_Questionable_Layout on the C side via a function rather\n\tthan a variable, because we plan to turn the variables into\n\trenamings, and you can't Export renamings.\n\t* erroutc.adb, switch-c.adb, errout.adb: Likewise.\n\t* gcc-interface/decl.cc: Use Get_Warn_On_Questionable_Layout\n\tinstead of Warn_On_Questionable_Layout.\n\t* gcc-interface/Makefile.in (GNATMAKE_OBJS): Add warnsw.o, because\n\tit is indirectly imported via Errout.\n\t* gcc-interface/Make-lang.in (GNATBIND_OBJS): Likewise and remove\n\trestrict.o (not needed).", "tree": {"sha": "89507df0a6c9f66706c12165c3f645d13c12f581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/89507df0a6c9f66706c12165c3f645d13c12f581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c523e3f1ea9b451fddc4c535009b3eecffc4ac4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c523e3f1ea9b451fddc4c535009b3eecffc4ac4a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c523e3f1ea9b451fddc4c535009b3eecffc4ac4a"}], "stats": {"total": 43, "additions": 20, "deletions": 23}, "files": [{"sha": "79d5f319f593cbd25b34248bb6616ab4b4a65280", "filename": "gcc/ada/err_vars.ads", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Ferr_vars.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Ferr_vars.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferr_vars.ads?ref=7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "patch": "@@ -81,12 +81,6 @@ package Err_Vars is\n    --  Source_Reference line, then this is initialized to No_Source_File,\n    --  to force an initial reference to the real source file name.\n \n-   Warning_Doc_Switch : Boolean := True;\n-   --  If this is set True, then the ??/?x?/?x? sequences in error messages\n-   --  are active (see errout.ads for details). If this switch is False, then\n-   --  these sequences are ignored (i.e. simply equivalent to a single ?). The\n-   --  -gnatw.d switch sets this flag True, -gnatw.D sets this flag False.\n-\n    ----------------------------------------\n    -- Error Message Insertion Parameters --\n    ----------------------------------------"}, {"sha": "19ea155326084d11ddda2eb2d9e53b1c599671a6", "filename": "gcc/ada/errout.adb", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Ferrout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Ferrout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.adb?ref=7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "patch": "@@ -53,6 +53,8 @@ with Stand;          use Stand;\n with Stylesw;        use Stylesw;\n with System.OS_Lib;\n with Uname;          use Uname;\n+with Warnsw; pragma Unreferenced (Warnsw);\n+--  Will be referenced when various flags are moved to Warnsw.\n \n package body Errout is\n "}, {"sha": "aeb9a2fb912c072735104b73a122434353425355", "filename": "gcc/ada/errout.ads", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Ferrout.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Ferrout.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferrout.ads?ref=7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "patch": "@@ -59,15 +59,6 @@ package Errout is\n    Error_Msg_Exception : exception renames Err_Vars.Error_Msg_Exception;\n    --  Exception raised if Raise_Exception_On_Error is true\n \n-   Warning_Doc_Switch : Boolean renames Err_Vars.Warning_Doc_Switch;\n-   --  If this is set True, then the ??/?*?/?$?/?x?/?.x?/?_x? insertion\n-   --  sequences in error messages generate appropriate tags for the output\n-   --  error messages. If this switch is False, then these sequences are still\n-   --  recognized (for the purposes of implementing the pattern matching in\n-   --  pragmas Warnings (Off,..) and Warning_As_Error(...) but do not result\n-   --  in adding the error message tag. The -gnatw.d switch sets this flag\n-   --  True, -gnatw.D sets this flag False.\n-\n    Current_Node : Node_Id := Empty;\n    --  Used by Error_Msg as a default Node_Id.\n    --  Relevant only when Opt.Include_Subprogram_In_Messages is set."}, {"sha": "9ecc97fb46ddd5c6fdfcf2eb24c0152bfb0694c4", "filename": "gcc/ada/erroutc.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Ferroutc.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Ferroutc.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ferroutc.adb?ref=7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "patch": "@@ -44,6 +44,7 @@ with Stringt;  use Stringt;\n with Targparm;\n with Uintp;    use Uintp;\n with Widechar; use Widechar;\n+with Warnsw;   use Warnsw;\n \n package body Erroutc is\n "}, {"sha": "8102c6d5ec4ea3fd1f1142038862b6003ad73b98", "filename": "gcc/ada/fe.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Ffe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Ffe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffe.h?ref=7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "patch": "@@ -366,9 +366,9 @@ extern Boolean Stack_Check_Probes_On_Target;\n \n /* warnsw: */\n \n-#define Warn_On_Questionable_Layout\twarnsw__warn_on_questionable_layout\n+#define Get_Warn_On_Questionable_Layout\twarnsw__get_warn_on_questionable_layout\n \n-extern Boolean Warn_On_Questionable_Layout;\n+extern Boolean Get_Warn_On_Questionable_Layout ();\n \n // The following corresponds to Ada code in Einfo.Utils.\n "}, {"sha": "45a4168e890800e8ef1459e647be7dc04631a0dd", "filename": "gcc/ada/gcc-interface/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Fgcc-interface%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMake-lang.in?ref=7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "patch": "@@ -601,7 +601,6 @@ GNATBIND_OBJS = \\\n  ada/osint-b.o    \\\n  ada/osint.o      \\\n  ada/output.o     \\\n- ada/restrict.o   \\\n  ada/rident.o     \\\n  ada/scans.o      \\\n  ada/scil_ll.o    \\\n@@ -629,6 +628,7 @@ GNATBIND_OBJS = \\\n  ada/uintp.o      \\\n  ada/uname.o      \\\n  ada/urealp.o     \\\n+ ada/warnsw.o     \\\n  ada/widechar.o   \\\n  ada/gnat.o       \\\n  ada/g-dynhta.o   \\"}, {"sha": "5137ebaa0c6c814250f20a61ac443f972e1bfd7b", "filename": "gcc/ada/gcc-interface/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Fgcc-interface%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2FMakefile.in?ref=7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "patch": "@@ -333,7 +333,7 @@ GNATMAKE_OBJS = a-except.o ali.o ali-util.o aspects.o s-casuti.o alloc.o \\\n  s-purexc.o s-htable.o scil_ll.o sem_aux.o sinfo.o sinput.o sinput-c.o \\\n  snames.o stand.o stringt.o styleg.o stylesw.o system.o validsw.o \\\n  switch.o switch-m.o table.o targparm.o tempdir.o types.o uintp.o \\\n- uname.o urealp.o usage.o widechar.o \\\n+ uname.o urealp.o usage.o widechar.o warnsw.o \\\n  seinfo.o einfo-entities.o einfo-utils.o sinfo-nodes.o sinfo-utils.o \\\n  $(EXTRA_GNATMAKE_OBJS)\n "}, {"sha": "e25ce498f2c596dd7babb35aed4164d845805d34", "filename": "gcc/ada/gcc-interface/decl.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Fgcc-interface%2Fdecl.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.cc?ref=7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "patch": "@@ -8363,7 +8363,7 @@ components_to_record (Node_Id gnat_component_list, Entity_Id gnat_record_type,\n        && !Debug_Flag_Dot_R);\n   const bool w_reorder\n     = (Convention (gnat_record_type) == Convention_Ada\n-       && Warn_On_Questionable_Layout\n+       && Get_Warn_On_Questionable_Layout ()\n        && !(No_Reordering (gnat_record_type) && GNAT_Mode));\n   tree gnu_zero_list = NULL_TREE;\n   tree gnu_self_list = NULL_TREE;"}, {"sha": "364ff55a4a655fddf855d4d7b587b269d6ba04ea", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "patch": "@@ -28,7 +28,6 @@\n --  circularities, especially for back ends using Adabkend.\n \n with Debug;    use Debug;\n-with Errout;   use Errout;\n with Lib;      use Lib;\n with Osint;    use Osint;\n with Opt;      use Opt;"}, {"sha": "dd40c8844c37a03f804269380504a8742da2531d", "filename": "gcc/ada/warnsw.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Fwarnsw.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Fwarnsw.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.adb?ref=7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "patch": "@@ -23,7 +23,6 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-with Err_Vars; use Err_Vars;\n with Opt;      use Opt;\n with Output;   use Output;\n "}, {"sha": "645094509f4a9d74ff0996b7de776cedace3d627", "filename": "gcc/ada/warnsw.ads", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Fwarnsw.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a08b9393c7b36c4dca8fca9a5cda261594f61d6/gcc%2Fada%2Fwarnsw.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fwarnsw.ads?ref=7a08b9393c7b36c4dca8fca9a5cda261594f61d6", "patch": "@@ -38,6 +38,15 @@ package Warnsw is\n    --  here as time goes by. And in fact a really nice idea would be to put\n    --  them all in a Warn_Record so that they would be easy to save/restore.\n \n+   Warning_Doc_Switch : Boolean := True;\n+   --  If this is set True, then the ??/?*?/?$?/?x?/?.x?/?_x? insertion\n+   --  sequences in error messages generate appropriate tags for the output\n+   --  error messages. If this switch is False, then these sequences are still\n+   --  recognized (for the purposes of implementing the pattern matching in\n+   --  pragmas Warnings (Off,..) and Warning_As_Error(...) but do not result\n+   --  in adding the error message tag. The -gnatw.d switch sets this flag\n+   --  True, -gnatw.D sets this flag False.\n+\n    Warn_On_Anonymous_Allocators : Boolean := False;\n    --  Warn when allocators for anonymous access types are present, which,\n    --  although not illegal in Ada, may be confusing to users due to how\n@@ -71,7 +80,9 @@ package Warnsw is\n    --  efficiency reasons and would be improved by reordering the components.\n    --  Off by default, modified by use of -gnatw.q/.Q (but not -gnatwa).\n \n-   --  WARNING: There is a matching C declaration of this variable in fe.h\n+   function Get_Warn_On_Questionable_Layout return Boolean is\n+     (Warn_On_Questionable_Layout);\n+   --  WARNING: There is a matching C declaration of this function in fe.h\n \n    Warn_On_Record_Holes : Boolean := False;\n    --  Warn when explicit record component clauses leave uncovered holes (gaps)"}]}