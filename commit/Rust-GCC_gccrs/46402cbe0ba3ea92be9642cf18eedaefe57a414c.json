{"sha": "46402cbe0ba3ea92be9642cf18eedaefe57a414c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY0MDJjYmUwYmEzZWE5MmJlOTY0MmNmMThlZWRhZWZlNTdhNDE0Yw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.vnet.ibm.com", "date": "2012-03-06T17:15:43Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "2012-03-06T17:15:43Z"}, "message": "re PR target/50310 (ICE: in gen_vcondv2div2df, at config/i386/sse.md:1435 with -O -ftree-vectorize and __builtin_isunordered())\n\n2012-03-05  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/50310\n\t* config/rs6000/vector.md (vector_uneq<mode>): Add support for\n\tUNEQ, LTGT, ORDERED, and UNORDERED IEEE vector comparisons.\n\t(vector_ltgt<mode>): Likewise.\n\t(vector_ordered<mode>): Likewise.\n\t(vector_unordered<mode>): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_emit_vector_compare_inner):\n\tLikewise.\n\nFrom-SVN: r185007", "tree": {"sha": "43d2b3184d63b503b4660e3485cab105d99a005d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43d2b3184d63b503b4660e3485cab105d99a005d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/46402cbe0ba3ea92be9642cf18eedaefe57a414c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46402cbe0ba3ea92be9642cf18eedaefe57a414c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46402cbe0ba3ea92be9642cf18eedaefe57a414c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46402cbe0ba3ea92be9642cf18eedaefe57a414c/comments", "author": null, "committer": null, "parents": [{"sha": "6342e53f0746dc031111aa7c3a463df9238bf030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6342e53f0746dc031111aa7c3a463df9238bf030", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6342e53f0746dc031111aa7c3a463df9238bf030"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "6f5d9cbfd5d8af402292dd81b7b91a8aefe5f851", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46402cbe0ba3ea92be9642cf18eedaefe57a414c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46402cbe0ba3ea92be9642cf18eedaefe57a414c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=46402cbe0ba3ea92be9642cf18eedaefe57a414c", "patch": "@@ -1,3 +1,14 @@\n+2012-03-06  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/50310\n+\t* config/rs6000/vector.md (vector_uneq<mode>): Add support for\n+\tUNEQ, LTGT, ORDERED, and UNORDERED IEEE vector comparisons.\n+\t(vector_ltgt<mode>): Likewise.\n+\t(vector_ordered<mode>): Likewise.\n+\t(vector_unordered<mode>): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_emit_vector_compare_inner):\n+\tLikewise.\n+\n 2012-03-06  Aldy Hernandez  <aldyh@redhat.com>\n \n \t* trans-mem.c: New typedef for tm_region_p."}, {"sha": "5558f7769f5731de3a08a3b9f933787cc12a31e1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46402cbe0ba3ea92be9642cf18eedaefe57a414c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46402cbe0ba3ea92be9642cf18eedaefe57a414c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=46402cbe0ba3ea92be9642cf18eedaefe57a414c", "patch": "@@ -16077,6 +16077,10 @@ rs6000_emit_vector_compare_inner (enum rtx_code code, rtx op0, rtx op1)\n     case EQ:\n     case GT:\n     case GTU:\n+    case ORDERED:\n+    case UNORDERED:\n+    case UNEQ:\n+    case LTGT:\n       mask = gen_reg_rtx (mode);\n       emit_insn (gen_rtx_SET (VOIDmode,\n \t\t\t      mask,"}, {"sha": "6674054223b4d343f27b1923eca6c1bf1799c521", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/46402cbe0ba3ea92be9642cf18eedaefe57a414c/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/46402cbe0ba3ea92be9642cf18eedaefe57a414c/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=46402cbe0ba3ea92be9642cf18eedaefe57a414c", "patch": "@@ -516,6 +516,94 @@\n   \"VECTOR_UNIT_ALTIVEC_P (<MODE>mode)\"\n   \"\")\n \n+(define_insn_and_split \"*vector_uneq<mode>\"\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n+\t(uneq:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n+\t\t    (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n+  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 3)\n+\t(gt:VEC_F (match_dup 1)\n+\t\t  (match_dup 2)))\n+   (set (match_dup 4)\n+\t(gt:VEC_F (match_dup 2)\n+\t\t  (match_dup 1)))\n+   (set (match_dup 0)\n+\t(not:VEC_F (ior:VEC_F (match_dup 3)\n+\t\t\t      (match_dup 4))))]\n+  \"\n+{\n+  operands[3] = gen_reg_rtx (<MODE>mode);\n+  operands[4] = gen_reg_rtx (<MODE>mode);\n+}\")\n+\n+(define_insn_and_split \"*vector_ltgt<mode>\"\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n+\t(ltgt:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n+\t\t    (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n+  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 3)\n+\t(gt:VEC_F (match_dup 1)\n+\t\t  (match_dup 2)))\n+   (set (match_dup 4)\n+\t(gt:VEC_F (match_dup 2)\n+\t\t  (match_dup 1)))\n+   (set (match_dup 0)\n+\t(ior:VEC_F (match_dup 3)\n+\t\t   (match_dup 4)))]\n+  \"\n+{\n+  operands[3] = gen_reg_rtx (<MODE>mode);\n+  operands[4] = gen_reg_rtx (<MODE>mode);\n+}\")\n+\n+(define_insn_and_split \"*vector_ordered<mode>\"\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n+\t(ordered:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n+\t\t       (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n+  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 3)\n+\t(ge:VEC_F (match_dup 1)\n+\t\t  (match_dup 2)))\n+   (set (match_dup 4)\n+\t(ge:VEC_F (match_dup 2)\n+\t\t  (match_dup 1)))\n+   (set (match_dup 0)\n+\t(ior:VEC_F (match_dup 3)\n+\t\t   (match_dup 4)))]\n+  \"\n+{\n+  operands[3] = gen_reg_rtx (<MODE>mode);\n+  operands[4] = gen_reg_rtx (<MODE>mode);\n+}\")\n+\n+(define_insn_and_split \"*vector_unordered<mode>\"\n+  [(set (match_operand:VEC_F 0 \"vfloat_operand\" \"\")\n+\t(unordered:VEC_F (match_operand:VEC_F 1 \"vfloat_operand\" \"\")\n+\t\t\t (match_operand:VEC_F 2 \"vfloat_operand\" \"\")))]\n+  \"VECTOR_UNIT_ALTIVEC_OR_VSX_P (<MODE>mode)\"\n+  \"#\"\n+  \"\"\n+  [(set (match_dup 3)\n+\t(ge:VEC_F (match_dup 1)\n+\t\t  (match_dup 2)))\n+   (set (match_dup 4)\n+\t(ge:VEC_F (match_dup 2)\n+\t\t  (match_dup 1)))\n+   (set (match_dup 0)\n+\t(not:VEC_F (ior:VEC_F (match_dup 3)\n+\t\t\t      (match_dup 4))))]\n+  \"\n+{\n+  operands[3] = gen_reg_rtx (<MODE>mode);\n+  operands[4] = gen_reg_rtx (<MODE>mode);\n+}\")\n+\n ;; Note the arguments for __builtin_altivec_vsel are op2, op1, mask\n ;; which is in the reverse order that we want\n (define_expand \"vector_select_<mode>\""}]}