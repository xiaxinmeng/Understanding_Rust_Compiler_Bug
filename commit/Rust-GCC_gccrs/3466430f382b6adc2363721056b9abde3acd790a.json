{"sha": "3466430f382b6adc2363721056b9abde3acd790a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ2NjQzMGYzODJiNmFkYzIzNjM3MjEwNTZiOWFiZGUzYWNkNzkwYQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@imgtec.com", "date": "2017-06-14T23:26:40Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@gcc.gnu.org", "date": "2017-06-14T23:26:40Z"}, "message": "MIPS16/GCC: Emit bounds checking as RTL in `casesi'\n\n\tgcc/\n\t* config/mips/mips.md (MIPS16_T_REGNUM): Remove constant.\n\t(casesi): Emit bounds checking as RTL.\n\t(casesi_internal_mips16_<mode>): Remove bounds checking.\n\n\tgcc/testsuite/\n\t* gcc.target/mips/data-sym-jump.c: Adjust for whitespace changes.\n\t* gcc.target/mips/pr51513-1.c: New test.\n\t* gcc.target/mips/pr51513-2.c: New test.\n\nFrom-SVN: r249207", "tree": {"sha": "e6cdacfffb0e4b8b67ce1c67ba25a40f0e722b26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e6cdacfffb0e4b8b67ce1c67ba25a40f0e722b26"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3466430f382b6adc2363721056b9abde3acd790a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3466430f382b6adc2363721056b9abde3acd790a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3466430f382b6adc2363721056b9abde3acd790a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3466430f382b6adc2363721056b9abde3acd790a/comments", "author": null, "committer": null, "parents": [{"sha": "cdd17d6e9956853892e4c097cc33afc2156df69e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdd17d6e9956853892e4c097cc33afc2156df69e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdd17d6e9956853892e4c097cc33afc2156df69e"}], "stats": {"total": 178, "additions": 141, "deletions": 37}, "files": [{"sha": "2d5110c8d86b636fb6993e8cd3dd2ee5047d6f55", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3466430f382b6adc2363721056b9abde3acd790a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3466430f382b6adc2363721056b9abde3acd790a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3466430f382b6adc2363721056b9abde3acd790a", "patch": "@@ -1,3 +1,9 @@\n+2017-06-14  Maciej W. Rozycki  <macro@imgtec.com>\n+\n+\t* config/mips/mips.md (MIPS16_T_REGNUM): Remove constant.\n+\t(casesi): Emit bounds checking as RTL.\n+\t(casesi_internal_mips16_<mode>): Remove bounds checking.\n+\n 2017-06-14  Max Filippov  <jcmvbkbc@gmail.com>\n \n \t* config/xtensa/xtensa.c (xtensa_option_override): Append"}, {"sha": "971af6f8e097d811e8a1279a93921a1b6feadb70", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 23, "deletions": 35, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3466430f382b6adc2363721056b9abde3acd790a/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3466430f382b6adc2363721056b9abde3acd790a/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=3466430f382b6adc2363721056b9abde3acd790a", "patch": "@@ -162,7 +162,6 @@\n   [(TLS_GET_TP_REGNUM\t\t3)\n    (GET_FCSR_REGNUM\t\t2)\n    (SET_FCSR_REGNUM\t\t4)\n-   (MIPS16_T_REGNUM\t\t24)\n    (PIC_FUNCTION_ADDR_REGNUM\t25)\n    (RETURN_ADDR_REGNUM\t\t31)\n    (CPRESTORE_SLOT_REGNUM\t76)\n@@ -6389,68 +6388,57 @@\n   if (!arith_operand (operands[0], SImode))\n     operands[0] = force_reg (SImode, operands[0]);\n \n-  operands[2] = GEN_INT (INTVAL (operands[2]) + 1);\n-\n+  emit_cmp_and_jump_insns (operands[0], operands[2], GTU,\n+\t\t\t   NULL_RTX, SImode, 1, operands[4]);\n   emit_jump_insn (PMODE_INSN (gen_casesi_internal_mips16,\n-\t\t\t      (operands[0], operands[2],\n-\t\t\t       operands[3], operands[4])));\n-\n+\t\t\t      (operands[0], operands[3])));\n   DONE;\n })\n \n (define_insn \"casesi_internal_mips16_<mode>\"\n   [(set (pc)\n-     (if_then_else\n-       (ltu (match_operand:SI 0 \"register_operand\" \"d\")\n-\t    (match_operand:SI 1 \"arith_operand\" \"dI\"))\n-       (unspec:P\n-        [(match_dup 0)\n-\t (label_ref (match_operand 2 \"\" \"\"))]\n-\tUNSPEC_CASESI_DISPATCH)\n-       (label_ref (match_operand 3 \"\" \"\"))))\n-   (clobber (match_scratch:P 4 \"=d\"))\n-   (clobber (match_scratch:P 5 \"=d\"))\n-   (clobber (reg:SI MIPS16_T_REGNUM))]\n+\t(unspec:P [(match_operand:SI 0 \"register_operand\" \"d\")\n+\t\t   (label_ref (match_operand 1 \"\" \"\"))]\n+\t UNSPEC_CASESI_DISPATCH))\n+   (clobber (match_scratch:P 2 \"=d\"))\n+   (clobber (match_scratch:P 3 \"=d\"))]\n   \"TARGET_MIPS16_SHORT_JUMP_TABLES\"\n {\n-  rtx diff_vec = PATTERN (NEXT_INSN (as_a <rtx_insn *> (operands[2])));\n+  rtx diff_vec = PATTERN (NEXT_INSN (as_a <rtx_insn *> (operands[1])));\n \n   gcc_assert (GET_CODE (diff_vec) == ADDR_DIFF_VEC);\n-  \n-  output_asm_insn (\"sltu\\t%0, %1\", operands);\n-  output_asm_insn (\"bteqz\\t%3\", operands);\n-  \n+\n   switch (GET_MODE (diff_vec))\n     {\n     case HImode:\n-      output_asm_insn (\"sll\\t%5, %0, 1\", operands);\n-      output_asm_insn (\"<d>la\\t%4, %2\", operands);\n-      output_asm_insn (\"<d>addu\\t%5, %4, %5\", operands);\n-      output_asm_insn (\"lh\\t%5, 0(%5)\", operands);\n+      output_asm_insn (\"sll\\t%3,%0,1\", operands);\n+      output_asm_insn (\"<d>la\\t%2,%1\", operands);\n+      output_asm_insn (\"<d>addu\\t%3,%2,%3\", operands);\n+      output_asm_insn (\"lh\\t%3,0(%3)\", operands);\n       break;\n \n     case SImode:\n-      output_asm_insn (\"sll\\t%5, %0, 2\", operands);\n-      output_asm_insn (\"<d>la\\t%4, %2\", operands);\n-      output_asm_insn (\"<d>addu\\t%5, %4, %5\", operands);\n-      output_asm_insn (\"lw\\t%5, 0(%5)\", operands);\n+      output_asm_insn (\"sll\\t%3,%0,2\", operands);\n+      output_asm_insn (\"<d>la\\t%2,%1\", operands);\n+      output_asm_insn (\"<d>addu\\t%3,%2,%3\", operands);\n+      output_asm_insn (\"lw\\t%3,0(%3)\", operands);\n       break;\n \n     default:\n       gcc_unreachable ();\n     }\n \n-  output_asm_insn (\"<d>addu\\t%4, %4, %5\", operands);\n+  output_asm_insn (\"<d>addu\\t%2,%2,%3\", operands);\n \n   if (GENERATE_MIPS16E)\n-    return \"jrc\\t%4\";\n+    return \"jrc\\t%2\";\n   else\n-    return \"jr\\t%4\";\n+    return \"jr\\t%2\";\n }\n   [(set (attr \"insn_count\")\n \t(if_then_else (match_test \"GENERATE_MIPS16E\")\n-\t\t      (const_string \"10\")\n-\t\t      (const_string \"11\")))])\n+\t\t      (const_string \"6\")\n+\t\t      (const_string \"7\")))])\n \n ;; For TARGET_USE_GOT, we save the gp in the jmp_buf as well.\n ;; While it is possible to either pull it off the stack (in the"}, {"sha": "dc82af015570afc6a6faab1dbed7315e121ccf30", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3466430f382b6adc2363721056b9abde3acd790a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3466430f382b6adc2363721056b9abde3acd790a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3466430f382b6adc2363721056b9abde3acd790a", "patch": "@@ -1,3 +1,9 @@\n+2017-06-14  Maciej W. Rozycki  <macro@imgtec.com>\n+\n+\t* gcc.target/mips/data-sym-jump.c: Adjust for whitespace changes.\n+\t* gcc.target/mips/pr51513-1.c: New test.\n+\t* gcc.target/mips/pr51513-2.c: New test.\n+\n 2017-06-14  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/81083"}, {"sha": "ae48c0b4b5c8ee5a96ab05d8151373ff469be31b", "filename": "gcc/testsuite/gcc.target/mips/data-sym-jump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3466430f382b6adc2363721056b9abde3acd790a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-jump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3466430f382b6adc2363721056b9abde3acd790a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-jump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fdata-sym-jump.c?ref=3466430f382b6adc2363721056b9abde3acd790a", "patch": "@@ -25,7 +25,7 @@ frob (int i)\n \n /* Expect assembly like:\n \n-\tla\t$2, $L4\n+\tla\t$2,$L4\n \t\t\t\t\t\t# Anything goes here.\n \t.type\t__jump_frob_4, @object\t\t# Symbol # must match label.\n __jump_frob_4:\t\t\t\t\t# The symbol must match.\n@@ -47,4 +47,4 @@ __jend_frob_4:\t\t\t\t\t# The symbol must match.\n \n    that is `__jump_*'/`__jend_*' symbols inserted around a jump table.  */\n \n-/* { dg-final { scan-assembler \"\\tla\\t\\\\\\$\\[0-9\\]+, (.L(\\[0-9\\]+))\\n.*\\t\\\\.type\\t(__jump_frob_\\\\2), @object\\n\\\\3:\\n\\\\1:\\n(?:\\t\\\\.(?:half|word)\\t.L\\[0-9\\]+-\\\\1\\n)\\{11\\}\\t\\\\.type\\t(__jend_frob_\\\\2), @function\\n\\\\4:\\n\\t\\\\.insn\\n\" } } */\n+/* { dg-final { scan-assembler \"\\tla\\t\\\\\\$\\[0-9\\]+,(.L(\\[0-9\\]+))\\n.*\\t\\\\.type\\t(__jump_frob_\\\\2), @object\\n\\\\3:\\n\\\\1:\\n(?:\\t\\\\.(?:half|word)\\t.L\\[0-9\\]+-\\\\1\\n)\\{11\\}\\t\\\\.type\\t(__jend_frob_\\\\2), @function\\n\\\\4:\\n\\t\\\\.insn\\n\" } } */"}, {"sha": "b5e0d69fa2902e58cc48959cef9d37e440913a10", "filename": "gcc/testsuite/gcc.target/mips/pr51513-1.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3466430f382b6adc2363721056b9abde3acd790a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr51513-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3466430f382b6adc2363721056b9abde3acd790a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr51513-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr51513-1.c?ref=3466430f382b6adc2363721056b9abde3acd790a", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-mips16 -mcode-readable=yes\" } */\n+\n+/* PR tree-optimization/51513 verification variant for MIPS16, #1.  */\n+\n+int __attribute__ ((weak))\n+frob (int i)\n+{\n+  switch (i)\n+    {\n+    case -5:\n+      return -2;\n+    case -3:\n+      return -1;\n+    case 0:\n+      return 0;\n+    case 3:\n+      return 1;\n+    case 5:\n+      break;\n+    default:\n+      __builtin_unreachable ();\n+    }\n+  return i;\n+}\n+\n+/* Without the fix for PR tree-optimization/51513 truncated code\n+   would be emitted for `frob', like:\n+\n+\t.text\n+\t.align\t2\n+\t.weak\tfrob\n+\t.set\tmips16\n+\t.set\tnomicromips\n+\t.ent\tfrob\n+\t.type\tfrob, @function\n+frob:\n+\t.frame\t$sp,0,$31\t\t# vars= 0, regs= 0/0, args= 0, gp= 0\n+\t.mask\t0x00000000,0\n+\t.fmask\t0x00000000,0\n+\taddiu\t$2,$4,5\n+\t.end\tfrob\n+\t.size\tfrob, .-frob\n+\n+  meaning `frob' will have no chance to return, let alone produce\n+  the result expected.  */\n+\n+/* { dg-final { scan-assembler \"\\tjrc?\\t\\\\\\$31\\n\" } } */"}, {"sha": "b921904fdff116c5ea18d554f251f8072c05b3ee", "filename": "gcc/testsuite/gcc.target/mips/pr51513-2.c", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3466430f382b6adc2363721056b9abde3acd790a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr51513-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3466430f382b6adc2363721056b9abde3acd790a/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr51513-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmips%2Fpr51513-2.c?ref=3466430f382b6adc2363721056b9abde3acd790a", "patch": "@@ -0,0 +1,56 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mips16 -mcode-readable=yes\" } */\n+\n+/* PR tree-optimization/51513 verification variant for MIPS16, #2.  */\n+\n+int __attribute__ ((weak))\n+frob (int i)\n+{\n+  switch (i)\n+    {\n+    case -5:\n+      return -2;\n+    case -3:\n+      return -1;\n+    case 0:\n+      return 0;\n+    case 3:\n+      return 1;\n+    case 5:\n+      break;\n+    default:\n+      __builtin_unreachable ();\n+    }\n+  return i;\n+}\n+\n+int\n+main (void)\n+{\n+  return !(frob (-5) == -2\n+\t   & frob (-3) == -1\n+\t   & frob (0) == 0\n+\t   & frob (3) == 1\n+\t   & frob (5) == 5);\n+}\n+\n+/* Without the fix for PR tree-optimization/51513 truncated code\n+   would be emitted for `frob', like:\n+\n+\t.text\n+\t.align\t2\n+\t.weak\tfrob\n+\t.set\tmips16\n+\t.set\tnomicromips\n+\t.ent\tfrob\n+\t.type\tfrob, @function\n+frob:\n+\t.frame\t$sp,0,$31\t\t# vars= 0, regs= 0/0, args= 0, gp= 0\n+\t.mask\t0x00000000,0\n+\t.fmask\t0x00000000,0\n+\taddiu\t$2,$4,5\n+\t.end\tfrob\n+\t.size\tfrob, .-frob\n+\n+  meaning `frob' will have no chance to return, let alone produce\n+  the result expected.  */"}]}