{"sha": "a4e44caa6d2a951af67aefb76ee22f7735bf293b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTRlNDRjYWE2ZDJhOTUxYWY2N2FlZmI3NmVlMjJmNzczNWJmMjkzYg==", "commit": {"author": {"name": "Andrew Haley", "email": "aph@cygnus.com", "date": "1999-04-13T09:18:09Z"}, "committer": {"name": "Andrew Haley", "email": "aph@gcc.gnu.org", "date": "1999-04-13T09:18:09Z"}, "message": "i386-signal.h, [...]: New files.\n\n1999-04-13  Andrew Haley  <aph@cygnus.com>\n        * include/i386-signal.h, include/default-signal.h: New files.\n        * prims.cc (catch_segv): Call MAKE_THROW_FRAME in exception\n        handler.\n        (catch_fpe): New function.\n        * configure.in: Make link to appropriate include/java-signal.h.\n        * configure: Rebuilt.\n        * Makefile.am: include/java-signal.h added to dependency list.\n        * Makefile.in: Rebuilt.\n\nFrom-SVN: r26400", "tree": {"sha": "cf855e7be72eac99926b727b8a0fd3ad8e4cccde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cf855e7be72eac99926b727b8a0fd3ad8e4cccde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a4e44caa6d2a951af67aefb76ee22f7735bf293b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e44caa6d2a951af67aefb76ee22f7735bf293b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a4e44caa6d2a951af67aefb76ee22f7735bf293b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a4e44caa6d2a951af67aefb76ee22f7735bf293b/comments", "author": null, "committer": null, "parents": [{"sha": "0e8285f1200b2feb78876c3edfe53637cf2577da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e8285f1200b2feb78876c3edfe53637cf2577da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e8285f1200b2feb78876c3edfe53637cf2577da"}], "stats": {"total": 153, "additions": 133, "deletions": 20}, "files": [{"sha": "3314bc4373fc7058700bbf35f1abedec3ec15ab6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=a4e44caa6d2a951af67aefb76ee22f7735bf293b", "patch": "@@ -1,3 +1,14 @@\n+1999-04-13  Andrew Haley  <aph@cygnus.com>\n+\n+        * include/i386-signal.h, include/default-signal.h: New files.   \n+        * prims.cc (catch_segv): Call MAKE_THROW_FRAME in exception\n+        handler.\n+        (catch_fpe): New function.      \n+        * configure.in: Make link to appropriate include/java-signal.h.\n+        * configure: Rebuilt.\n+        * Makefile.am: include/java-signal.h added to dependency list.\n+        * Makefile.in: Rebuilt.\n+\n 1999-04-12  Urban Widmark <urban@svenskatest.se>\n \n \t* java/io/DataInputStream.java (readLine): Corrected handling of"}, {"sha": "3fc60512caad03efc2223031049876697980588f", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=a4e44caa6d2a951af67aefb76ee22f7735bf293b", "patch": "@@ -135,7 +135,7 @@ $(nat_files): %.o: %.cc\n \t$(CXXCOMPILE) -c -o $@ $<\n \n $(nat_files) $(GCOBJS) $(THREADOBJS) $(libgcj_a_OBJECTS): \\\n-\t\tinclude/config.h $(nat_headers)\n+\t\tinclude/config.h include/java-signal.h $(nat_headers)\n \n ## FIXME: GNU make.\n $(c_files): %.o: %.c"}, {"sha": "25dd1877a8503dbf93a4625584c3b28f49ce695d", "filename": "libjava/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=a4e44caa6d2a951af67aefb76ee22f7735bf293b", "patch": "@@ -1191,7 +1191,7 @@ $(nat_files): %.o: %.cc\n \t$(CXXCOMPILE) -c -o $@ $<\n \n $(nat_files) $(GCOBJS) $(THREADOBJS) $(libgcj_a_OBJECTS): \\\n-\t\tinclude/config.h $(nat_headers)\n+\t\tinclude/config.h include/java-signal.h $(nat_headers)\n \n $(c_files): %.o: %.c\n \t$(COMPILE) -c -o $@ $<"}, {"sha": "2ee202177c016dc31b035255cd6a24e85d236dea", "filename": "libjava/configure", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure?ref=a4e44caa6d2a951af67aefb76ee22f7735bf293b", "patch": "@@ -3298,6 +3298,17 @@ done\n test -n \"$PERL\" || PERL=\"false\"\n \n \n+case \"${host}\" in\n+  i?86-*-linux*)\n+    SIGNAL_HANDLER=include/i386-signal.h\n+\t;;\n+  *)\n+    SIGNAL_HANDLER=include/default-signal.h\n+\t;;\n+esac\n+\n+\n+\n if test \"${multilib}\" = \"yes\"; then\n   multilib_arg=\"--enable-multilib\"\n else\n@@ -3714,8 +3725,8 @@ fi; done\n EOF\n \n cat >> $CONFIG_STATUS <<EOF\n-ac_sources=\"java/io/$FILE_DESCRIPTOR include/$GCHDR include/$THREADH\"\n-ac_dests=\"java/io/natFileDescriptor.cc include/java-gc.h include/java-threads.h\"\n+ac_sources=\"java/io/$FILE_DESCRIPTOR include/$GCHDR include/$THREADH $SIGNAL_HANDLER\"\n+ac_dests=\"java/io/natFileDescriptor.cc include/java-gc.h include/java-threads.h include/java-signal.h\"\n EOF\n \n cat >> $CONFIG_STATUS <<\\EOF"}, {"sha": "e2fa12fa2f454889348354a061c05f7f68ba3471", "filename": "libjava/configure.in", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fconfigure.in?ref=a4e44caa6d2a951af67aefb76ee22f7735bf293b", "patch": "@@ -362,6 +362,17 @@ AC_FUNC_ALLOCA\n \n AC_CHECK_PROGS(PERL, perl, false)\n \n+case \"${host}\" in\n+  i?86-*-linux*)\n+    SIGNAL_HANDLER=include/i386-signal.h\n+\t;;\n+  *)\n+    SIGNAL_HANDLER=include/default-signal.h\n+\t;;\n+esac\n+\n+AC_LINK_FILES($SIGNAL_HANDLER, include/java-signal.h)\n+\n if test \"${multilib}\" = \"yes\"; then\n   multilib_arg=\"--enable-multilib\"\n else"}, {"sha": "63ba129320c9f14bc4f4811f71eee05beeee0020", "filename": "libjava/include/default-signal.h", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2Finclude%2Fdefault-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2Finclude%2Fdefault-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fdefault-signal.h?ref=a4e44caa6d2a951af67aefb76ee22f7735bf293b", "patch": "@@ -0,0 +1,18 @@\n+// default-signal.h - Catch runtime signals and turn them into exceptions.\n+\n+/* Copyright (C) 1998, 1999  Cygnus Solutions\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#ifndef JAVA_SIGNAL_H\n+#define JAVA_SIGNAL_H 1\n+\n+#undef HANDLE_SEGV\n+#undef HANDLE_FPE\n+\n+#endif /* JAVA_SIGNAL_H */\n+  "}, {"sha": "de893afbbf37f5d4de1f6b7096d10cd68ae10a6d", "filename": "libjava/include/i386-signal.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2Finclude%2Fi386-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2Finclude%2Fi386-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fi386-signal.h?ref=a4e44caa6d2a951af67aefb76ee22f7735bf293b", "patch": "@@ -0,0 +1,38 @@\n+// i386-signal.h - Catch runtime signals and turn them into exceptions.\n+\n+/* Copyright (C) 1998, 1999  Cygnus Solutions\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+/* This technique should work for all i386 based Unices which conform\n+   to iBCS2.  This includes all versions of Linux more recent than\n+   version 1.3 */\n+\n+\n+#ifndef JAVA_SIGNAL_H\n+#define JAVA_SIGNAL_H 1\n+\n+#include <signal.h>\n+\n+#define HANDLE_SEGV 1\n+#define HANDLE_FPE 1\n+\n+\n+#define MAKE_THROW_FRAME(_dummy)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\t\\\n+  void **_p = (void **)&_dummy;\t\t\t\t\t\t\\\n+  struct sigcontext_struct *_regs = (struct sigcontext_struct *)++_p;\t\\\n+\t\t\t\t\t\t\t\t\t\\\n+  register unsigned long _ebp = _regs->ebp;\t\t\t\t\\\n+  register unsigned long _eip = _regs->eip;\t\t\t\t\\\n+  \t\t\t\t\t\t\t\t\t\\\n+  asm volatile (\"mov %0, (%%ebp); mov %1, 4(%%ebp)\"\t\t\t\\\n+\t\t: : \"r\"(_ebp), \"r\"(_eip));\t\t\t\t\\\n+}\n+\n+#endif /* JAVA_SIGNAL_H */\n+  "}, {"sha": "70dc89c1e9b893c1904ed033b40d68b2d560e78b", "filename": "libjava/prims.cc", "status": "modified", "additions": 40, "deletions": 16, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2Fprims.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a4e44caa6d2a951af67aefb76ee22f7735bf293b/libjava%2Fprims.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fprims.cc?ref=a4e44caa6d2a951af67aefb76ee22f7735bf293b", "patch": "@@ -14,14 +14,12 @@ details.  */\n #include <stdarg.h>\n #include <stdio.h>\n #include <string.h>\n-#ifdef HANDLE_SEGV\n-#include <signal.h>\n-#endif\n \n #pragma implementation \"java-array.h\"\n \n #include <cni.h>\n #include <jvm.h>\n+#include <java-signal.h>\n \n #include <java/lang/Class.h>\n #include <java/lang/Runtime.h>\n@@ -30,6 +28,7 @@ details.  */\n #include <java/lang/ThreadGroup.h>\n #include <java/lang/FirstThread.h>\n #include <java/lang/ArrayIndexOutOfBoundsException.h>\n+#include <java/lang/ArithmeticException.h>\n #include <java/lang/ClassFormatError.h>\n #include <java/lang/ClassCastException.h>\n #include <java/lang/NegativeArraySizeException.h>\n@@ -40,6 +39,7 @@ details.  */\n #include <java/lang/reflect/Modifier.h>\n #include <java/io/PrintStream.h>\n \n+\n #define ObjectClass _CL_Q34java4lang6Object\n extern java::lang::Class ObjectClass;\n \n@@ -426,19 +426,31 @@ _Jv_NewMultiArray (jclass array_type, jint dimensions, ...)\n \n \f\n \n-#ifdef HANDLE_SEGV\n-\n+#ifdef HANDLE_SEGV \n static java::lang::NullPointerException *nullp;\n \n static void\n-catch_segv (int)\n+catch_segv (int dummy)\n {\n+  MAKE_THROW_FRAME(dummy);\n   // Don't run `new' in a signal handler, so we always throw the same\n-  // null pointer exception.\n+  // exception.\n   _Jv_Throw (nullp);\n }\n+#endif\n \n-#endif /* HANDLE_SEGV */\n+#ifdef HANDLE_FPE\n+static java::lang::ArithmeticException *arithexception;\n+\n+static void\n+catch_fpe (int dummy)\n+{\n+  MAKE_THROW_FRAME(dummy);\n+  // Don't run `new' in a signal handler, so we always throw the same\n+  // exception.\n+  _Jv_Throw (arithexception);\n+}\n+#endif\n \n class _Jv_PrimClass : public java::lang::Class\n {\n@@ -560,14 +572,26 @@ static java::lang::Thread *main_thread;\n void\n JvRunMain (jclass klass, int argc, const char **argv)\n {\n-#ifdef HANDLE_SEGV\n-  nullp = new java::lang::NullPointerException ();\n-\n-  struct sigaction act;\n-  act.sa_handler = catch_segv;\n-  sigemptyset (&act.sa_mask);\n-  act.sa_flags = 0;\n-  sigaction (SIGSEGV, &act, NULL);\n+#ifdef HANDLE_SEGV \n+  {\n+    nullp = new java::lang::NullPointerException ();    \n+    struct sigaction act;\n+    act.sa_handler = catch_segv;\n+    sigemptyset (&act.sa_mask);\n+    act.sa_flags = 0;\n+    sigaction (SIGSEGV, &act, NULL);\n+  }\n+#endif\n+  \n+#ifdef HANDLE_FPE\n+  { \n+    arithexception = new java::lang::ArithmeticException ();\n+    struct sigaction act;\n+    act.sa_handler = catch_fpe;\n+    sigemptyset (&act.sa_mask);\n+    act.sa_flags = 0;\n+    sigaction (SIGFPE, &act, NULL);\n+  }\n #endif\n \n   no_memory = new java::lang::OutOfMemoryError;"}]}