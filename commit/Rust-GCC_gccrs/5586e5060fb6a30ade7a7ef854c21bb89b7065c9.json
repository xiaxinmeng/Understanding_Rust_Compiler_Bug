{"sha": "5586e5060fb6a30ade7a7ef854c21bb89b7065c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTU4NmU1MDYwZmI2YTMwYWRlN2E3ZWY4NTRjMjFiYjg5YjcwNjVjOQ==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-20T04:14:02Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-02-20T18:54:43Z"}, "message": "libstdc++: Forward second argument of views::iota using the correct type\n\nWe are forwarding the second argument of views::iota using the wrong type,\ncausing compile errors when calling views::iota with a value and bound of\ndifferent types, like in the test case below.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/ranges (iota_view): Forward declare _Sentinel.\n\t(iota_view::_Iterator): Befriend _Sentinel.\n\t(iota_view::_Sentinel::_M_equal): New member function.\n\t(iota_view::_Sentinel::operator==): Use it.\n\t(views::_Iota::operator()): Forward __f using the correct type.\n\t* testsuite/std/ranges/access/ssize.cc (test06): Don't call views::iota\n\twith integers of different signedness, to appease iota_view's deduction\n\tguide.\n\t* testsuite/std/ranges/iota/iota_view.cc: Augment test.", "tree": {"sha": "29cf4865c99a47cf73071272d234b9dbd52c2264", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29cf4865c99a47cf73071272d234b9dbd52c2264"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5586e5060fb6a30ade7a7ef854c21bb89b7065c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5586e5060fb6a30ade7a7ef854c21bb89b7065c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5586e5060fb6a30ade7a7ef854c21bb89b7065c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5586e5060fb6a30ade7a7ef854c21bb89b7065c9/comments", "author": null, "committer": null, "parents": [{"sha": "e6f24f824beb8ba6805702e287bbd6153b472488", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e6f24f824beb8ba6805702e287bbd6153b472488", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e6f24f824beb8ba6805702e287bbd6153b472488"}], "stats": {"total": 43, "additions": 40, "deletions": 3}, "files": [{"sha": "deade1c29c0ed69cea07c6d6a081b4dbee7881a2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5586e5060fb6a30ade7a7ef854c21bb89b7065c9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5586e5060fb6a30ade7a7ef854c21bb89b7065c9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5586e5060fb6a30ade7a7ef854c21bb89b7065c9", "patch": "@@ -1,3 +1,15 @@\n+2020-02-20  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* include/std/ranges (iota_view): Forward declare _Sentinel.\n+\t(iota_view::_Iterator): Befriend _Sentinel.\n+\t(iota_view::_Sentinel::_M_equal): New member function.\n+\t(iota_view::_Sentinel::operator==): Use it.\n+\t(views::_Iota::operator()): Forward __f using the correct type.\n+\t* testsuite/std/ranges/access/ssize.cc (test06): Don't call views::iota\n+\twith integers of different signedness, to appease iota_view's deduction\n+\tguide.\n+\t* testsuite/std/ranges/iota/iota_view.cc: Augment test.\n+\n 2020-02-20  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/range_access.h (ranges::begin): Reject array of"}, {"sha": "6358ce86f796d561a9ee773c695006e00a1f6124", "filename": "libstdc++-v3/include/std/ranges", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5586e5060fb6a30ade7a7ef854c21bb89b7065c9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5586e5060fb6a30ade7a7ef854c21bb89b7065c9/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Franges?ref=5586e5060fb6a30ade7a7ef854c21bb89b7065c9", "patch": "@@ -635,6 +635,8 @@ namespace ranges\n     class iota_view : public view_interface<iota_view<_Winc, _Bound>>\n     {\n     private:\n+      struct _Sentinel;\n+\n       struct _Iterator\n       {\n       private:\n@@ -811,11 +813,17 @@ namespace ranges\n \n       private:\n \t_Winc _M_value = _Winc();\n+\n+        friend _Sentinel;\n       };\n \n       struct _Sentinel\n       {\n       private:\n+\tconstexpr bool\n+\t_M_equal(const _Iterator& __x) const\n+\t{ return __x._M_value == _M_bound; }\n+\n \t_Bound _M_bound = _Bound();\n \n       public:\n@@ -827,7 +835,7 @@ namespace ranges\n \n \tfriend constexpr bool\n \toperator==(const _Iterator& __x, const _Sentinel& __y)\n-\t{ return __x._M_value == __y._M_bound; }\n+\t{ return __y._M_equal(__x); }\n \n \tfriend constexpr iter_difference_t<_Winc>\n \toperator-(const _Iterator& __x, const _Sentinel& __y)\n@@ -933,7 +941,7 @@ namespace views\n     template<typename _Tp, typename _Up>\n       constexpr auto\n       operator()(_Tp&& __e, _Up&& __f) const\n-      { return iota_view{std::forward<_Tp>(__e), std::forward<_Tp>(__f)}; }\n+      { return iota_view{std::forward<_Tp>(__e), std::forward<_Up>(__f)}; }\n   };\n \n   inline constexpr _Iota iota{};"}, {"sha": "8423654c5f79426db77ea866a0386297d351b05e", "filename": "libstdc++-v3/testsuite/std/ranges/access/ssize.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5586e5060fb6a30ade7a7ef854c21bb89b7065c9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5586e5060fb6a30ade7a7ef854c21bb89b7065c9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Faccess%2Fssize.cc?ref=5586e5060fb6a30ade7a7ef854c21bb89b7065c9", "patch": "@@ -75,7 +75,7 @@ test05()\n void\n test06()\n {\n-  auto i = std::views::iota(1ull, 5);\n+  auto i = std::views::iota(1ull, 5u);\n   auto s = std::ranges::ssize(i);\n   using R = std::ranges::range_difference_t<decltype(i)>;\n   static_assert( std::same_as<decltype(s), R> );"}, {"sha": "65d166fbd3b188bbbc0ef87a5f7940822df045e2", "filename": "libstdc++-v3/testsuite/std/ranges/iota/iota_view.cc", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5586e5060fb6a30ade7a7ef854c21bb89b7065c9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fiota_view.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5586e5060fb6a30ade7a7ef854c21bb89b7065c9/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fiota_view.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fstd%2Franges%2Fiota%2Fiota_view.cc?ref=5586e5060fb6a30ade7a7ef854c21bb89b7065c9", "patch": "@@ -61,10 +61,27 @@ test03()\n   VERIFY( it == v.end() );\n }\n \n+void\n+test04()\n+{\n+  int x[] = {1,2,3};\n+  auto v = std::ranges::views::iota(std::counted_iterator(x, 3),\n+\t\t\t\t    std::default_sentinel);\n+  auto it = v.begin();\n+  VERIFY( (*it).base() == x );\n+  ++it;\n+  VERIFY( (*it).base() == x+1 );\n+  ++it;\n+  VERIFY( (*it).base() == x+2 );\n+  ++it;\n+  VERIFY( it == v.end() );\n+}\n+\n int\n main()\n {\n   test01();\n   test02();\n   test03();\n+  test04();\n }"}]}