{"sha": "a9d3ac1e891f37fe405d8aaa4653d27ed818871c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlkM2FjMWU4OTFmMzdmZTQwNWQ4YWFhNDY1M2QyN2VkODE4ODcxYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-01-24T09:17:01Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-01-24T09:17:01Z"}, "message": "[multiple changes]\n\n2012-01-24  Richard Guenther  <rguenther@suse.de>\n\n\tForward-port to trunk\n\t2010-09-21  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/45678\n\t* expr.c (expand_expr_real_1) <case VIEW_CONVERT_EXPR>: If\n\top0 isn't sufficiently aligned and there is movmisalignM\n\tinsn for mode, use it to load op0 into a temporary register.\n\nFrom-SVN: r183470", "tree": {"sha": "438895843443c1acc2e945d7b7c332cad7bdd785", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/438895843443c1acc2e945d7b7c332cad7bdd785"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9d3ac1e891f37fe405d8aaa4653d27ed818871c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d3ac1e891f37fe405d8aaa4653d27ed818871c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9d3ac1e891f37fe405d8aaa4653d27ed818871c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9d3ac1e891f37fe405d8aaa4653d27ed818871c/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/93bcc8c9ff361dbf3f42c9dcced458acfb5e994d"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "554ad1eeff546997c387802be1c7f605c024619c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9d3ac1e891f37fe405d8aaa4653d27ed818871c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9d3ac1e891f37fe405d8aaa4653d27ed818871c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a9d3ac1e891f37fe405d8aaa4653d27ed818871c", "patch": "@@ -1,3 +1,13 @@\n+2012-01-24  Richard Guenther  <rguenther@suse.de>\n+\n+\tForward-port to trunk\n+\t2010-09-21  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR middle-end/45678\n+\t* expr.c (expand_expr_real_1) <case VIEW_CONVERT_EXPR>: If\n+\top0 isn't sufficiently aligned and there is movmisalignM\n+\tinsn for mode, use it to load op0 into a temporary register.\n+\n 2012-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/51957"}, {"sha": "e181ee3ef0d2ab3d17a868a5df8f74a33ef19c62", "filename": "gcc/expr.c", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9d3ac1e891f37fe405d8aaa4653d27ed818871c/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9d3ac1e891f37fe405d8aaa4653d27ed818871c/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=a9d3ac1e891f37fe405d8aaa4653d27ed818871c", "patch": "@@ -10044,10 +10044,32 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \t results.  */\n       if (MEM_P (op0))\n \t{\n+\t  enum insn_code icode;\n+\n \t  op0 = copy_rtx (op0);\n \n \t  if (TYPE_ALIGN_OK (type))\n \t    set_mem_align (op0, MAX (MEM_ALIGN (op0), TYPE_ALIGN (type)));\n+\t  else if (mode != BLKmode\n+\t\t   && MEM_ALIGN (op0) < GET_MODE_ALIGNMENT (mode)\n+\t\t   /* If the target does have special handling for unaligned\n+\t\t      loads of mode then use them.  */\n+\t\t   && ((icode = optab_handler (movmisalign_optab, mode))\n+\t\t       != CODE_FOR_nothing))\n+\t    {\n+\t      rtx reg, insn;\n+\n+\t      op0 = adjust_address (op0, mode, 0);\n+\t      /* We've already validated the memory, and we're creating a\n+\t\t new pseudo destination.  The predicates really can't\n+\t\t fail.  */\n+\t      reg = gen_reg_rtx (mode);\n+\n+\t      /* Nor can the insn generator.  */\n+\t      insn = GEN_FCN (icode) (reg, op0);\n+\t      emit_insn (insn);\n+\t      return reg;\n+\t    }\n \t  else if (STRICT_ALIGNMENT\n \t\t   && mode != BLKmode\n \t\t   && MEM_ALIGN (op0) < GET_MODE_ALIGNMENT (mode))"}]}