{"sha": "82af72916360c4f7b4e38b005e866bde80e7cd2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODJhZjcyOTE2MzYwYzRmN2I0ZTM4YjAwNWU4NjZiZGU4MGU3Y2QyZA==", "commit": {"author": {"name": "Javier Miranda", "email": "miranda@adacore.com", "date": "2020-04-08T13:43:58Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-16T13:07:16Z"}, "message": "[Ada] Crash in tagged type constructor with task components\n\n2020-06-16  Javier Miranda  <miranda@adacore.com>\n\ngcc/ada/\n\n\t* exp_ch6.adb (BIP_Suffix_Kind, Check_BIP_Actuals,\n\tIs_Build_In_Place_Entity): New subprograms.\n\t(Make_Build_In_Place_Call_In_Allocator,\n\tMake_Build_In_Place_Call_In_Anonymous_Context,\n\tMake_Build_In_Place_Call_In_Assignment,\n\tMake_Build_In_Place_Call_In_Object_Declaration): Add assertions.\n\t(Needs_BIP_Task_Actuals): Add missing support for thunks.\n\t(Expand_Actuals): Ensure that the BIP call has available an\n\tactivation chain and the _master variable.\n\t* exp_ch9.adb (Find_Enclosing_Context): Initialize the list of\n\tdeclarations of empty blocks when the _master variable must be\n\tdeclared and the list was not available.", "tree": {"sha": "55481ea15cdd4b1e33b9eaacf8078298ae085bd9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/55481ea15cdd4b1e33b9eaacf8078298ae085bd9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82af72916360c4f7b4e38b005e866bde80e7cd2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82af72916360c4f7b4e38b005e866bde80e7cd2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82af72916360c4f7b4e38b005e866bde80e7cd2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82af72916360c4f7b4e38b005e866bde80e7cd2d/comments", "author": {"login": "miranda-adacore", "id": 54413934, "node_id": "MDQ6VXNlcjU0NDEzOTM0", "avatar_url": "https://avatars.githubusercontent.com/u/54413934?v=4", "gravatar_id": "", "url": "https://api.github.com/users/miranda-adacore", "html_url": "https://github.com/miranda-adacore", "followers_url": "https://api.github.com/users/miranda-adacore/followers", "following_url": "https://api.github.com/users/miranda-adacore/following{/other_user}", "gists_url": "https://api.github.com/users/miranda-adacore/gists{/gist_id}", "starred_url": "https://api.github.com/users/miranda-adacore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/miranda-adacore/subscriptions", "organizations_url": "https://api.github.com/users/miranda-adacore/orgs", "repos_url": "https://api.github.com/users/miranda-adacore/repos", "events_url": "https://api.github.com/users/miranda-adacore/events{/privacy}", "received_events_url": "https://api.github.com/users/miranda-adacore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcc0f556a7ed261d8270a925fd4823c7136783f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcc0f556a7ed261d8270a925fd4823c7136783f0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcc0f556a7ed261d8270a925fd4823c7136783f0"}], "stats": {"total": 180, "additions": 172, "deletions": 8}, "files": [{"sha": "6ca5fd612b9976f13c7d405886216b714c6f339c", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 168, "deletions": 8, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af72916360c4f7b4e38b005e866bde80e7cd2d/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af72916360c4f7b4e38b005e866bde80e7cd2d/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=82af72916360c4f7b4e38b005e866bde80e7cd2d", "patch": "@@ -78,6 +78,15 @@ with Validsw;   use Validsw;\n \n package body Exp_Ch6 is\n \n+   --  Suffix for BIP formals\n+\n+   BIP_Alloc_Suffix               : constant String := \"BIPalloc\";\n+   BIP_Storage_Pool_Suffix        : constant String := \"BIPstoragepool\";\n+   BIP_Finalization_Master_Suffix : constant String := \"BIPfinalizationmaster\";\n+   BIP_Task_Master_Suffix         : constant String := \"BIPtaskmaster\";\n+   BIP_Activation_Chain_Suffix    : constant String := \"BIPactivationchain\";\n+   BIP_Object_Access_Suffix       : constant String := \"BIPaccess\";\n+\n    -----------------------\n    -- Local Subprograms --\n    -----------------------\n@@ -147,6 +156,9 @@ package body Exp_Ch6 is\n    --  level is known not to be statically deeper than the result type of the\n    --  function.\n \n+   function BIP_Suffix_Kind (E : Entity_Id) return BIP_Formal_Kind;\n+   --  Ada 2005 (AI-318-02): Returns the kind of the given extra formal.\n+\n    function Caller_Known_Size\n      (Func_Call   : Node_Id;\n       Result_Subt : Entity_Id) return Boolean;\n@@ -156,6 +168,12 @@ package body Exp_Ch6 is\n    --  access discriminants do not require secondary stack use. Note we must\n    --  always use the secondary stack for dispatching-on-result calls.\n \n+   function Check_BIP_Actuals\n+     (Subp_Call : Node_Id;\n+      Subp_Id   : Entity_Id) return Boolean;\n+   --  Given a subprogram call to the given subprogram return True if the\n+   --  names of BIP extra actual and formal parameters match.\n+\n    function Check_Number_Of_Actuals\n      (Subp_Call : Node_Id;\n       Subp_Id   : Entity_Id) return Boolean;\n@@ -258,6 +276,9 @@ package body Exp_Ch6 is\n    --  Insert the Post_Call list previously produced by routine Expand_Actuals\n    --  or Expand_Call_Helper into the tree.\n \n+   function Is_Build_In_Place_Entity (E : Entity_Id) return Boolean;\n+   --  Ada 2005 (AI-318-02): Returns True if E is a BIP entity.\n+\n    procedure Replace_Renaming_Declaration_Id\n       (New_Decl  : Node_Id;\n        Orig_Decl : Node_Id);\n@@ -737,25 +758,68 @@ package body Exp_Ch6 is\n    begin\n       case Kind is\n          when BIP_Alloc_Form =>\n-            return \"BIPalloc\";\n+            return BIP_Alloc_Suffix;\n \n          when BIP_Storage_Pool =>\n-            return \"BIPstoragepool\";\n+            return BIP_Storage_Pool_Suffix;\n \n          when BIP_Finalization_Master =>\n-            return \"BIPfinalizationmaster\";\n+            return BIP_Finalization_Master_Suffix;\n \n          when BIP_Task_Master =>\n-            return \"BIPtaskmaster\";\n+            return BIP_Task_Master_Suffix;\n \n          when BIP_Activation_Chain =>\n-            return \"BIPactivationchain\";\n+            return BIP_Activation_Chain_Suffix;\n \n          when BIP_Object_Access =>\n-            return \"BIPaccess\";\n+            return BIP_Object_Access_Suffix;\n       end case;\n    end BIP_Formal_Suffix;\n \n+   ---------------------\n+   -- BIP_Suffix_Kind --\n+   ---------------------\n+\n+   function BIP_Suffix_Kind (E : Entity_Id) return BIP_Formal_Kind is\n+      Nam : constant String := Get_Name_String (Chars (E));\n+\n+      function Has_Suffix (Suffix : String) return Boolean;\n+      --  Return True if Nam has suffix Suffix\n+\n+      function Has_Suffix (Suffix : String) return Boolean is\n+         Len : constant Natural := Suffix'Length;\n+      begin\n+         return Nam'Length > Len\n+           and then Nam (Nam'Last - Len + 1 .. Nam'Last) = Suffix;\n+      end Has_Suffix;\n+\n+   --  Start of processing for BIP_Suffix_Kind\n+\n+   begin\n+      if Has_Suffix (BIP_Alloc_Suffix) then\n+         return BIP_Alloc_Form;\n+\n+      elsif Has_Suffix (BIP_Storage_Pool_Suffix) then\n+         return BIP_Storage_Pool;\n+\n+      elsif Has_Suffix (BIP_Finalization_Master_Suffix) then\n+         return BIP_Finalization_Master;\n+\n+      elsif Has_Suffix (BIP_Task_Master_Suffix) then\n+         return BIP_Task_Master;\n+\n+      elsif Has_Suffix (BIP_Activation_Chain_Suffix) then\n+         return BIP_Activation_Chain;\n+\n+      elsif Has_Suffix (BIP_Object_Access_Suffix) then\n+         return BIP_Object_Access;\n+\n+      else\n+         raise Program_Error;\n+      end if;\n+   end BIP_Suffix_Kind;\n+\n    ---------------------------\n    -- Build_In_Place_Formal --\n    ---------------------------\n@@ -987,6 +1051,42 @@ package body Exp_Ch6 is\n         or else not Requires_Transient_Scope (Underlying_Type (Result_Subt));\n    end Caller_Known_Size;\n \n+   -----------------------\n+   -- Check_BIP_Actuals --\n+   -----------------------\n+\n+   function Check_BIP_Actuals\n+     (Subp_Call : Node_Id;\n+      Subp_Id   : Entity_Id) return Boolean\n+   is\n+      Formal : Entity_Id;\n+      Actual : Node_Id;\n+\n+   begin\n+      pragma Assert (Nkind_In (Subp_Call, N_Entry_Call_Statement,\n+                                          N_Function_Call,\n+                                          N_Procedure_Call_Statement));\n+\n+      Formal := First_Formal_With_Extras (Subp_Id);\n+      Actual := First_Actual (Subp_Call);\n+\n+      while Present (Formal) and then Present (Actual) loop\n+         if Is_Build_In_Place_Entity (Formal)\n+           and then Nkind (Actual) = N_Identifier\n+           and then Is_Build_In_Place_Entity (Entity (Actual))\n+           and then BIP_Suffix_Kind (Formal)\n+                      /= BIP_Suffix_Kind (Entity (Actual))\n+         then\n+            return False;\n+         end if;\n+\n+         Next_Formal_With_Extras (Formal);\n+         Next_Actual (Actual);\n+      end loop;\n+\n+      return No (Formal) and then No (Actual);\n+   end Check_BIP_Actuals;\n+\n    -----------------------------\n    -- Check_Number_Of_Actuals --\n    -----------------------------\n@@ -2160,20 +2260,27 @@ package body Exp_Ch6 is\n \n             --  Ada 2005 (AI-318-02): If the actual parameter is a call to a\n             --  build-in-place function, then a temporary return object needs\n-            --  to be created and access to it must be passed to the function.\n+            --  to be created and access to it must be passed to the function\n+            --  (and ensure that we have an activation chain defined for tasks\n+            --  and a Master variable).\n+\n             --  Currently we limit such functions to those with inherently\n             --  limited result subtypes, but eventually we plan to expand the\n             --  functions that are treated as build-in-place to include other\n             --  composite result types.\n \n             if Is_Build_In_Place_Function_Call (Actual) then\n+               Build_Activation_Chain_Entity (N);\n+               Build_Master_Entity (Etype (Actual));\n                Make_Build_In_Place_Call_In_Anonymous_Context (Actual);\n \n             --  Ada 2005 (AI-318-02): Specialization of the previous case for\n             --  actuals containing build-in-place function calls whose returned\n             --  object covers interface types.\n \n             elsif Present (Unqual_BIP_Iface_Function_Call (Actual)) then\n+               Build_Activation_Chain_Entity (N);\n+               Build_Master_Entity (Etype (Actual));\n                Make_Build_In_Place_Iface_Call_In_Anonymous_Context (Actual);\n             end if;\n \n@@ -3359,6 +3466,8 @@ package body Exp_Ch6 is\n \n             Expand_Actuals (Call_Node, Subp, Post_Call);\n             pragma Assert (Is_Empty_List (Post_Call));\n+            pragma Assert (Check_Number_Of_Actuals (Call_Node, Subp));\n+            pragma Assert (Check_BIP_Actuals (Call_Node, Subp));\n             return;\n          end;\n       end if;\n@@ -8291,6 +8400,34 @@ package body Exp_Ch6 is\n       end if;\n    end Is_Build_In_Place_Result_Type;\n \n+   ------------------------------\n+   -- Is_Build_In_Place_Entity --\n+   ------------------------------\n+\n+   function Is_Build_In_Place_Entity (E : Entity_Id) return Boolean is\n+      Nam : constant String := Get_Name_String (Chars (E));\n+\n+      function Has_Suffix (Suffix : String) return Boolean;\n+      --  Return True if Nam has suffix Suffix\n+\n+      function Has_Suffix (Suffix : String) return Boolean is\n+         Len : constant Natural := Suffix'Length;\n+      begin\n+         return Nam'Length > Len\n+           and then Nam (Nam'Last - Len + 1 .. Nam'Last) = Suffix;\n+      end Has_Suffix;\n+\n+   --  Start of processing for Is_Build_In_Place_Entity\n+\n+   begin\n+      return Has_Suffix (BIP_Alloc_Suffix)\n+        or else Has_Suffix (BIP_Storage_Pool_Suffix)\n+        or else Has_Suffix (BIP_Finalization_Master_Suffix)\n+        or else Has_Suffix (BIP_Task_Master_Suffix)\n+        or else Has_Suffix (BIP_Activation_Chain_Suffix)\n+        or else Has_Suffix (BIP_Object_Access_Suffix);\n+   end Is_Build_In_Place_Entity;\n+\n    --------------------------------\n    -- Is_Build_In_Place_Function --\n    --------------------------------\n@@ -8699,6 +8836,7 @@ package body Exp_Ch6 is\n \n       Analyze_And_Resolve (Allocator, Acc_Type);\n       pragma Assert (Check_Number_Of_Actuals (Func_Call, Function_Id));\n+      pragma Assert (Check_BIP_Actuals (Func_Call, Function_Id));\n    end Make_Build_In_Place_Call_In_Allocator;\n \n    ---------------------------------------------------\n@@ -8821,6 +8959,7 @@ package body Exp_Ch6 is\n            (Func_Call, Function_Id, New_Occurrence_Of (Return_Obj_Id, Loc));\n \n          pragma Assert (Check_Number_Of_Actuals (Func_Call, Function_Id));\n+         pragma Assert (Check_BIP_Actuals (Func_Call, Function_Id));\n \n       --  When the result subtype is unconstrained, the function must allocate\n       --  the return object in the secondary stack, so appropriate implicit\n@@ -8847,6 +8986,7 @@ package body Exp_Ch6 is\n            (Func_Call, Function_Id, Empty);\n \n          pragma Assert (Check_Number_Of_Actuals (Func_Call, Function_Id));\n+         pragma Assert (Check_BIP_Actuals (Func_Call, Function_Id));\n       end if;\n    end Make_Build_In_Place_Call_In_Anonymous_Context;\n \n@@ -8953,6 +9093,7 @@ package body Exp_Ch6 is\n \n       Rewrite (Assign, Make_Null_Statement (Loc));\n       pragma Assert (Check_Number_Of_Actuals (Func_Call, Func_Id));\n+      pragma Assert (Check_BIP_Actuals (Func_Call, Func_Id));\n    end Make_Build_In_Place_Call_In_Assignment;\n \n    ----------------------------------------------------\n@@ -9396,6 +9537,7 @@ package body Exp_Ch6 is\n       end if;\n \n       pragma Assert (Check_Number_Of_Actuals (Func_Call, Function_Id));\n+      pragma Assert (Check_BIP_Actuals (Func_Call, Function_Id));\n    end Make_Build_In_Place_Call_In_Object_Declaration;\n \n    -------------------------------------------------\n@@ -9686,8 +9828,26 @@ package body Exp_Ch6 is\n \n    function Needs_BIP_Task_Actuals (Func_Id : Entity_Id) return Boolean is\n       pragma Assert (Is_Build_In_Place_Function (Func_Id));\n-      Func_Typ : constant Entity_Id := Underlying_Type (Etype (Func_Id));\n+      Subp_Id  : Entity_Id;\n+      Func_Typ : Entity_Id;\n+\n    begin\n+      --  For thunks we must rely on their target entity; otherwise, given that\n+      --  the profile of thunks for functions returning a limited interface\n+      --  type returns a class-wide type, we would erroneously add these extra\n+      --  formals.\n+\n+      if Is_Thunk (Func_Id) then\n+         Subp_Id := Thunk_Entity (Func_Id);\n+\n+      --  Common case\n+\n+      else\n+         Subp_Id := Func_Id;\n+      end if;\n+\n+      Func_Typ := Underlying_Type (Etype (Subp_Id));\n+\n       return not Global_No_Tasking\n         and then (Has_Task (Func_Typ) or else Might_Have_Tasks (Func_Typ));\n    end Needs_BIP_Task_Actuals;"}, {"sha": "f4dc5d39046c96944ffe545ef70ac6aaa1acc4cd", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82af72916360c4f7b4e38b005e866bde80e7cd2d/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82af72916360c4f7b4e38b005e866bde80e7cd2d/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=82af72916360c4f7b4e38b005e866bde80e7cd2d", "patch": "@@ -13327,6 +13327,10 @@ package body Exp_Ch9 is\n          if Nkind (Context) = N_Block_Statement then\n             Context_Id := Entity (Identifier (Context));\n \n+            if No (Declarations (Context)) then\n+               Set_Declarations (Context, New_List);\n+            end if;\n+\n          elsif Nkind (Context) = N_Entry_Body then\n             Context_Id := Defining_Identifier (Context);\n "}]}