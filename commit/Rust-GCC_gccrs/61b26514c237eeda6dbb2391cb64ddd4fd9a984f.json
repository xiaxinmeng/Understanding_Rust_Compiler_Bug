{"sha": "61b26514c237eeda6dbb2391cb64ddd4fd9a984f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjFiMjY1MTRjMjM3ZWVkYTZkYmIyMzkxY2I2NGRkZDRmZDlhOTg0Zg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2004-10-11T20:26:53Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2004-10-11T20:26:53Z"}, "message": "PR libstdc++/16614 continued.\n\n\n2004-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n\n\tPR libstdc++/16614 continued.\n\t* include/ext/mt_allocator.h\n\t(__per_type_pool_policy::_S_get_pool): Use saner defaults based on\n\tspecific type characteristics.\n\t(__pool_base): Add constructor that takes a _Tune argument.\n\t(__pool): Same.\n\t* testsuite/ext/mt_allocator/tune-2.cc: Adjust default.\n\t* testsuite/ext/mt_allocator/tune-4.cc: Same.\n\t* testsuite/ext/mt_allocator/tune-3.cc: Same.\n\nFrom-SVN: r88902", "tree": {"sha": "71f864a23b058eb24cb64101b8909939c0446b07", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/71f864a23b058eb24cb64101b8909939c0446b07"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61b26514c237eeda6dbb2391cb64ddd4fd9a984f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61b26514c237eeda6dbb2391cb64ddd4fd9a984f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61b26514c237eeda6dbb2391cb64ddd4fd9a984f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61b26514c237eeda6dbb2391cb64ddd4fd9a984f/comments", "author": null, "committer": null, "parents": [{"sha": "17210dff5d26c1e820e0cd678a46cf2795c41e4c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/17210dff5d26c1e820e0cd678a46cf2795c41e4c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/17210dff5d26c1e820e0cd678a46cf2795c41e4c"}], "stats": {"total": 75, "additions": 53, "deletions": 22}, "files": [{"sha": "c90171e3d21b5ae931325bb816abddf682b5c32d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b26514c237eeda6dbb2391cb64ddd4fd9a984f/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b26514c237eeda6dbb2391cb64ddd4fd9a984f/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=61b26514c237eeda6dbb2391cb64ddd4fd9a984f", "patch": "@@ -1,3 +1,15 @@\n+2004-10-11  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\tPR libstdc++/16614 continued.\n+\t* include/ext/mt_allocator.h\n+\t(__per_type_pool_policy::_S_get_pool): Use saner defaults based on\n+\tspecific type characteristics.\n+\t(__pool_base): Add constructor that takes a _Tune argument.\n+\t(__pool): Same.\n+\t* testsuite/ext/mt_allocator/tune-2.cc: Adjust default.\n+\t* testsuite/ext/mt_allocator/tune-4.cc: Same.\n+\t* testsuite/ext/mt_allocator/tune-3.cc: Same.\n+\n 2004-10-11  Joachim Kuebart  <kuebart@mathematik.uni-ulm.de>\n \t    Paolo Carlini  <pcarlini@suse.de>\n "}, {"sha": "5803f5a835b307d841d348db34c70c05050be29a", "filename": "libstdc++-v3/include/ext/mt_allocator.h", "status": "modified", "additions": 34, "deletions": 13, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b26514c237eeda6dbb2391cb64ddd4fd9a984f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b26514c237eeda6dbb2391cb64ddd4fd9a984f/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fmt_allocator.h?ref=61b26514c237eeda6dbb2391cb64ddd4fd9a984f", "patch": "@@ -172,6 +172,9 @@ namespace __gnu_cxx\n     explicit __pool_base() \n     : _M_options(_Tune()), _M_binmap(NULL), _M_init(false) { }\n \n+    explicit __pool_base(const _Tune& __tune) \n+    : _M_options(__tune), _M_binmap(NULL), _M_init(false) { }\n+\n   protected:\n     // Configuration options.\n     _Tune \t       \t\t_M_options;\n@@ -307,6 +310,15 @@ namespace __gnu_cxx\n \t_M_once = __tmp;\n       }\n \n+      explicit __pool(const __pool_base::_Tune& __tune) \n+      : __pool_base(__tune), _M_bin(NULL), _M_bin_size(1), \n+      _M_thread_freelist(NULL) \n+      {\n+\t// On some platforms, __gthread_once_t is an aggregate.\n+\t__gthread_once_t __tmp = __GTHREAD_ONCE_INIT;\n+\t_M_once = __tmp;\n+      }\n+\n       ~__pool();\n \n     private:\n@@ -372,6 +384,9 @@ namespace __gnu_cxx\n       explicit __pool() \n       : _M_bin(NULL), _M_bin_size(1) { }\n \n+      explicit __pool(const __pool_base::_Tune& __tune) \n+      : __pool_base(__tune), _M_bin(NULL), _M_bin_size(1) { }\n+\n       ~__pool();\n \n     private:\n@@ -491,7 +506,10 @@ namespace __gnu_cxx\n       static __pool_type&\n       _S_get_pool() \n       { \n-\tstatic __pool_type _S_pool;\n+\t// Sane defaults for the __pool_type.\n+\tconst static size_t __align = __alignof__(_Tp) >= sizeof(typename __pool_type::_Block_record) ? __alignof__(_Tp) : sizeof(typename __pool_type::_Block_record);\n+\tstatic __pool_base::_Tune _S_tune(__align, sizeof(_Tp) * 128, (sizeof(_Tp) * 2) >= __align ? sizeof(_Tp) * 2 : __align, __pool_type::_Tune::_S_chunk_size, __pool_type::_Tune::_S_max_threads, __pool_type::_Tune::_S_freelist_headroom, getenv(\"GLIBCXX_FORCE_NEW\") ? true : false);\n+\tstatic __pool_type _S_pool(_S_tune);\n \treturn _S_pool;\n       }\n \n@@ -531,7 +549,10 @@ namespace __gnu_cxx\n       static __pool_type&\n       _S_get_pool( ) \n       { \n-\tstatic __pool_type _S_pool;\n+\t// Sane defaults for the __pool_type.\n+\tconst static size_t __align = __alignof__(_Tp) >= sizeof(typename __pool_type::_Block_record) ? __alignof__(_Tp) : sizeof(typename __pool_type::_Block_record);\n+\tstatic __pool_base::_Tune _S_tune(__align, sizeof(_Tp) * 128, (sizeof(_Tp) * 2) >= __align ? sizeof(_Tp) * 2 : __align, __pool_type::_Tune::_S_chunk_size, __pool_type::_Tune::_S_max_threads, __pool_type::_Tune::_S_freelist_headroom, getenv(\"GLIBCXX_FORCE_NEW\") ? true : false);\n+\tstatic __pool_type _S_pool(_S_tune);\n \treturn _S_pool;\n       }\n \n@@ -600,15 +621,15 @@ namespace __gnu_cxx\n     class __mt_alloc : public __mt_alloc_base<_Tp>, _Poolp\n     {\n     public:\n-      typedef size_t                    size_type;\n-      typedef ptrdiff_t                 difference_type;\n-      typedef _Tp*                      pointer;\n-      typedef const _Tp*                const_pointer;\n-      typedef _Tp&                      reference;\n-      typedef const _Tp&                const_reference;\n-      typedef _Tp                       value_type;\n-      typedef _Poolp                  \t__policy_type;\n-      typedef typename _Poolp::__pool_type       __pool_type;\n+      typedef size_t                    \tsize_type;\n+      typedef ptrdiff_t                 \tdifference_type;\n+      typedef _Tp*                      \tpointer;\n+      typedef const _Tp*                \tconst_pointer;\n+      typedef _Tp&                      \treference;\n+      typedef const _Tp&                \tconst_reference;\n+      typedef _Tp                       \tvalue_type;\n+      typedef _Poolp                  \t\t__policy_type;\n+      typedef typename _Poolp::__pool_type  \t__pool_type;\n \n       template<typename _Tp1, typename _Poolp1 = _Poolp>\n         struct rebind\n@@ -657,8 +678,8 @@ namespace __gnu_cxx\n     {\n       this->_S_initialize_once();\n \n-      // Requests larger than _M_max_bytes are handled by new/delete\n-      // directly.\n+      // Requests larger than _M_max_bytes are handled by operator\n+      // new/delete directly.\n       __pool_type& __pool = this->_S_get_pool();\n       const size_t __bytes = __n * sizeof(_Tp);\n       if (__pool._M_check_threshold(__bytes))"}, {"sha": "1dcf084502b45d0daaa52c1776068015f161fc60", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-2.cc", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b26514c237eeda6dbb2391cb64ddd4fd9a984f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b26514c237eeda6dbb2391cb64ddd4fd9a984f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-2.cc?ref=61b26514c237eeda6dbb2391cb64ddd4fd9a984f", "patch": "@@ -37,13 +37,12 @@ void test02()\n   typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n   typedef __gnu_cxx::__pool_base::_Tune tune_type;\n \n-  tune_type t_default;\n   tune_type t_opt(16, 5120, 32, 5120, 20, 10, false);\n   tune_type t_single(16, 5120, 32, 5120, 1, 10, false);\n \n   allocator_type a;\n-  tune_type t1 = a._M_get_options();  \n-  VERIFY( t1._M_align == t_default._M_align );\n+  tune_type t_default = a._M_get_options();\n+  tune_type t1 = t_default; \n   a._M_set_options(t_opt);\n   tune_type t2 = a._M_get_options();\n   VERIFY( t1._M_align != t2._M_align );"}, {"sha": "c7049fc8e23a2ede2d18b6b553fb4e85ae2eae41", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-3.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b26514c237eeda6dbb2391cb64ddd4fd9a984f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b26514c237eeda6dbb2391cb64ddd4fd9a984f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-3.cc?ref=61b26514c237eeda6dbb2391cb64ddd4fd9a984f", "patch": "@@ -45,13 +45,13 @@ void test03()\n   typedef _Cp policy_type;\n   typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n \n-  tune_type t_default;\n   tune_type t_opt(16, 5120, 32, 5120, 20, 10, false);\n   tune_type t_single(16, 5120, 32, 5120, 1, 10, false);\n \n   // First instances assured.\n   allocator_type a;\n-  tune_type t1 = a._M_get_options();\n+  tune_type t_default = a._M_get_options();\n+  tune_type t1 = t_default;\n   tune_type t2;\n   if (test_policy<policy_type>::per_type())\n     {"}, {"sha": "90c0c4a709c828deb484ea0957d82e03ac8519bf", "filename": "libstdc++-v3/testsuite/ext/mt_allocator/tune-4.cc", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61b26514c237eeda6dbb2391cb64ddd4fd9a984f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61b26514c237eeda6dbb2391cb64ddd4fd9a984f/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fmt_allocator%2Ftune-4.cc?ref=61b26514c237eeda6dbb2391cb64ddd4fd9a984f", "patch": "@@ -38,6 +38,7 @@ struct pod2\n {\n   int i;\n   int j;\n+  int k;\n };\n \n // Tune characteristics, two of different instantiations\n@@ -51,16 +52,15 @@ void test04()\n   typedef _Cp policy_type;\n \n   typedef __gnu_cxx::__mt_alloc<value_type, policy_type> allocator_type;\n-  tune_type t_default;\n   tune_type t_opt(16, 5120, 32, 5120, 20, 10, false);\n   tune_type t_single(16, 5120, 32, 5120, 1, 10, false);\n \n   allocator_type a;\n-  tune_type t1 = a._M_get_options();\n+  tune_type t_default = a._M_get_options();\n+  tune_type t1 = t_default;\n   tune_type t2;\n   if (test_policy<policy_type>::per_type())\n     {\n-      VERIFY( t1._M_align == t_default._M_align );\n       a._M_set_options(t_opt);\n       t2 = a._M_get_options();  \n       VERIFY( t1._M_align != t2._M_align );\n@@ -82,7 +82,6 @@ void test04()\n   // Both policy_type and rebind_type::policy_type have same characteristics.\n   if (test_policy<policy_type>::per_type())\n     {\n-      VERIFY( t3._M_align == t_default._M_align );\n       a2._M_set_options(t_opt);\n       t4 = a2._M_get_options();\n       VERIFY( t3._M_align != t4._M_align );"}]}