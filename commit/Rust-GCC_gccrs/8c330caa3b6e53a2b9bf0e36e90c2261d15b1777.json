{"sha": "8c330caa3b6e53a2b9bf0e36e90c2261d15b1777", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGMzMzBjYWEzYjZlNTNhMmI5YmYwZTM2ZTkwYzIyNjFkMTViMTc3Nw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-08-24T10:07:20Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-08-24T10:07:20Z"}, "message": "re PR tree-optimization/50067 (Wrong code with -fpredictive-commoning)\n\n2011-08-24  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/50067\n\t* tree-data-ref.c (dr_analyze_indices): Do not add an access\n\tfunction for a MEM_REF base that has no evolution in the loop\n\tnest or that is not analyzable.\n\n\t* gcc.dg/torture/pr50067-3.c: New testcase.\n\t* gcc.dg/torture/pr50067-4.c: Likewise.\n\t* gcc.dg/torture/pr50067-5.c: Likewise.\n\nFrom-SVN: r178028", "tree": {"sha": "fc7988f1e91f1893a1dc187b191cac060c088615", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fc7988f1e91f1893a1dc187b191cac060c088615"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "68fde241770b71c23d6b4d790a5b4ae1134e09dc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68fde241770b71c23d6b4d790a5b4ae1134e09dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68fde241770b71c23d6b4d790a5b4ae1134e09dc"}], "stats": {"total": 118, "additions": 106, "deletions": 12}, "files": [{"sha": "70f7b7d9e63f40c6900d1d4687fc84f9fbe17717", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8c330caa3b6e53a2b9bf0e36e90c2261d15b1777", "patch": "@@ -1,3 +1,10 @@\n+2011-08-24  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/50067\n+\t* tree-data-ref.c (dr_analyze_indices): Do not add an access\n+\tfunction for a MEM_REF base that has no evolution in the loop\n+\tnest or that is not analyzable.\n+\n 2011-08-23  Vladimir Makarov  <vmakarov@redhat.com>\n \n \t* ira.c (ira_init_register_move_cost): Check small subclasses"}, {"sha": "96641172a4bbfd75f70524d8ce83f11818615f74", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=8c330caa3b6e53a2b9bf0e36e90c2261d15b1777", "patch": "@@ -1,3 +1,10 @@\n+2011-08-24  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/50067\n+\t* gcc.dg/torture/pr50067-3.c: New testcase.\n+\t* gcc.dg/torture/pr50067-4.c: Likewise.\n+\t* gcc.dg/torture/pr50067-5.c: Likewise.\n+\n 2011-08-23  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n \t* g++.dg/other/i386-2.C: Add -mavx2 check."}, {"sha": "b774ea3f87d9c6b2deb1ddb34368cb295ddb12f5", "filename": "gcc/testsuite/gcc.dg/torture/pr50067-3.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50067-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50067-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50067-3.c?ref=8c330caa3b6e53a2b9bf0e36e90c2261d15b1777", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fpredictive-commoning\" } */\n+\n+extern void abort (void);\n+int a[6] = { 0, 0, 0, 0, 7, 0 };\n+static int *p = &a[4];\n+\n+int\n+main ()\n+{\n+  int i;\n+  for (i = 0; i < 4; ++i)\n+    {\n+      a[i + 1] = a[i + 2] > i;\n+      *p &= ~1;\n+    }\n+  if (a[4] != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "1571d72f11e804097a20745a740159ca36df4c1c", "filename": "gcc/testsuite/gcc.dg/torture/pr50067-4.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50067-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50067-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50067-4.c?ref=8c330caa3b6e53a2b9bf0e36e90c2261d15b1777", "patch": "@@ -0,0 +1,25 @@\n+/* { dg-do run } */\n+\n+/* Verify we do not get a bogus access function with 0B vs. 1B which\n+   disambiguates both accesses and leads to vectorization.  */\n+\n+extern int memcmp(const void *, const void *, __SIZE_TYPE__);\n+extern void abort (void);\n+short a[33] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n+short b[33] = { 0, };\n+int main()\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  int i;\n+  if (sizeof (short) == 2)\n+    {\n+      for (i = 0; i < 64; ++i)\n+\t{\n+\t  (*((char(*)[])&a[1]))[i] = (*((char(*)[])&a[0]))[i+1];\n+\t}\n+      if (memcmp (&a, &b, sizeof (a)) != 0)\n+\tabort ();\n+    }\n+#endif\n+  return 0;\n+}"}, {"sha": "13ed73fe494e29d943d5c338e236666586b3b014", "filename": "gcc/testsuite/gcc.dg/torture/pr50067-5.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50067-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50067-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr50067-5.c?ref=8c330caa3b6e53a2b9bf0e36e90c2261d15b1777", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do run } */\n+\n+/* Verify we do not get a bogus access function pairs with\n+   exchanged dimensions, 0, {1, +, 1}_1 vs. {2B, +, 1}_1, 0 which\n+   disambiguates both accesses and leads to vectorization.  */\n+\n+extern int memcmp(const void *, const void *, __SIZE_TYPE__);\n+extern void abort (void);\n+short a[33] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31 };\n+short b[33] = { 0, };\n+char * volatile ap_ = (char *)&a[0];\n+int main()\n+{\n+#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__\n+  int i;\n+  char *ap = ap_;\n+  if (sizeof (short) == 2)\n+    {\n+      for (i = 0; i < 64; ++i)\n+\t{\n+\t  (*((char(*)[])&ap[i+2]))[0] = (*((char(*)[])&ap[0]))[i+1];\n+\t}\n+      if (memcmp (&a, &b, sizeof (a)) != 0)\n+\tabort ();\n+    }\n+#endif\n+  return 0;\n+}"}, {"sha": "fe2be57d1c574bee8ff40a8febd5a39e17fd4460", "filename": "gcc/tree-data-ref.c", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777/gcc%2Ftree-data-ref.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8c330caa3b6e53a2b9bf0e36e90c2261d15b1777/gcc%2Ftree-data-ref.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-data-ref.c?ref=8c330caa3b6e53a2b9bf0e36e90c2261d15b1777", "patch": "@@ -881,25 +881,32 @@ dr_analyze_indices (struct data_reference *dr, loop_p nest, loop_p loop)\n       aref = TREE_OPERAND (aref, 0);\n     }\n \n+  /* If the address operand of a MEM_REF base has an evolution in the\n+     analyzed nest, add it as an additional independent access-function.  */\n   if (TREE_CODE (aref) == MEM_REF)\n     {\n       op = TREE_OPERAND (aref, 0);\n       access_fn = analyze_scalar_evolution (loop, op);\n       access_fn = instantiate_scev (before_loop, loop, access_fn);\n-      base = initial_condition (access_fn);\n-      split_constant_offset (base, &base, &off);\n-      if (!integer_zerop (TREE_OPERAND (aref, 1)))\n+      if (TREE_CODE (access_fn) == POLYNOMIAL_CHREC)\n \t{\n-\t  off = size_binop (PLUS_EXPR, off,\n-\t\t\t    fold_convert (ssizetype, TREE_OPERAND (aref, 1)));\n-\t  TREE_OPERAND (aref, 1)\n-\t    = build_int_cst (TREE_TYPE (TREE_OPERAND (aref, 1)), 0);\n+\t  base = initial_condition (access_fn);\n+\t  split_constant_offset (base, &base, &off);\n+\t  /* Fold the MEM_REF offset into the evolutions initial\n+\t     value to make more bases comparable.  */\n+\t  if (!integer_zerop (TREE_OPERAND (aref, 1)))\n+\t    {\n+\t      off = size_binop (PLUS_EXPR, off,\n+\t\t\t\tfold_convert (ssizetype,\n+\t\t\t\t\t      TREE_OPERAND (aref, 1)));\n+\t      TREE_OPERAND (aref, 1)\n+\t\t= build_int_cst (TREE_TYPE (TREE_OPERAND (aref, 1)), 0);\n+\t    }\n+\t  access_fn = chrec_replace_initial_condition\n+\t      (access_fn, fold_convert (TREE_TYPE (base), off));\n+\t  TREE_OPERAND (aref, 0) = base;\n+\t  VEC_safe_push (tree, heap, access_fns, access_fn);\n \t}\n-      access_fn = chrec_replace_initial_condition (access_fn,\n-\t\t\tfold_convert (TREE_TYPE (base), off));\n-\n-      TREE_OPERAND (aref, 0) = base;\n-      VEC_safe_push (tree, heap, access_fns, access_fn);\n     }\n \n   if (TREE_CODE (ref) == MEM_REF"}]}