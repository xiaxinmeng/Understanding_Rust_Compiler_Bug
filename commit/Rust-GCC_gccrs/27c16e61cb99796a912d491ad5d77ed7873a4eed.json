{"sha": "27c16e61cb99796a912d491ad5d77ed7873a4eed", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdjMTZlNjFjYjk5Nzk2YTkxMmQ0OTFhZDVkNzdlZDc4NzNhNGVlZA==", "commit": {"author": {"name": "Jozef Lawrynowicz", "email": "jozef.l@mittosystems.com", "date": "2018-11-27T00:17:42Z"}, "committer": {"name": "Jozef Lawrynowicz", "email": "jozefl@gcc.gnu.org", "date": "2018-11-27T00:17:42Z"}, "message": "Tweak directives in GCC tests for msp430-elf\n\n2018-11-27  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n\n\tTweak directives in GCC tests for msp430-elf\n\n\tgcc/ChangeLog:\n\n\t* doc/sourcebuild.texi: Document check_effective_target_int_eq_float\n\tand check_effective_target_ptr_eq_long.\n\n\tgcc/testsuite/ChangeLog:\n\n\t* lib/target-supports.exp\n\t(check_effective_target_logical_op_short_circuit): Add msp430.\n\t(check_effective_target_int_eq_float): New. \n\t(check_effective_target_ptr_eq_long): New. \n\t* c-c++-common/pr41779.c: Require int_eq_float for dg-warning tests.\n\t* c-c++-common/pr57371-2.c: XFAIL optimized dump scan when\n\tsizeof (float) != sizeof (int).\n\t* gcc.dg/pr84670-4.c: Require ptr_eq_long.\n\t* gcc.dg/pr85859.c: Likewise.\n\t* gcc.dg/Wno-frame-address.c: Skip for msp430-elf.\n\t* gcc.dg/torture/stackalign/builtin-apply-2.c: Likewise.\n\t* gcc.dg/ifcvt-4.c: Likewise.\n\t* gcc.dg/pr34856.c: Likewise.\n\t* gcc.dg/builtin-apply2.c: Likewise.\n\t* gcc.dg/tree-ssa/ssa-dse-26.c: Likewise.\n\t* gcc.dg/attr-alloc_size-11.c: Remove dg-warning XFAIL for msp430.\n\t* gcc.dg/tree-ssa/20040204-1.c: Likewise.\n\t* gcc.dg/compat/struct-by-value-16a_x.c: Build at -O1 for msp430\n\tso it fits.\n\t* gcc.dg/lto/20091013-1_0.c: Require ptr_eq_long.\n\t* gcc.dg/lto/20091013-1_1.c: Remove xfail-if for when\n\tsizeof(void *) != sizeof(long).\n\t* gcc.dg/lto/20091013-1_2.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-1.c: Fix expected dg-final behaviour for msp430.\n\t* gcc.dg/tree-ssa/gen-vect-25.c: Likewise.\n\t* gcc.dg/tree-ssa/gen-vect-11.c: Likewise.\n\t* gcc.dg/tree-ssa/loop-35.c: Likewise.\n\t* gcc.dg/tree-ssa/pr23455.c: Likewise.\n\t* gcc.dg/weak/typeof-2.c: Likewise.\n\t* gcc.target/msp430/interrupt_fn_placement.c: Skip for 430 ISA.\n\t* gcc.target/msp430/pr78818-data-region.c: Fix scan-assembler text.\n\t* gcc.target/msp430/pr79242.c: Don't skip for -msmall.\n\t* gcc.target/msp430/special-regs.c: Use \"__asm__\" instead of \"asm\".\n\nFrom-SVN: r266500", "tree": {"sha": "a798022fdaef35f498c578d8fc9263a5b341199e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a798022fdaef35f498c578d8fc9263a5b341199e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27c16e61cb99796a912d491ad5d77ed7873a4eed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c16e61cb99796a912d491ad5d77ed7873a4eed", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27c16e61cb99796a912d491ad5d77ed7873a4eed", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27c16e61cb99796a912d491ad5d77ed7873a4eed/comments", "author": {"login": "jozefl-mitto", "id": 36524004, "node_id": "MDQ6VXNlcjM2NTI0MDA0", "avatar_url": "https://avatars.githubusercontent.com/u/36524004?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jozefl-mitto", "html_url": "https://github.com/jozefl-mitto", "followers_url": "https://api.github.com/users/jozefl-mitto/followers", "following_url": "https://api.github.com/users/jozefl-mitto/following{/other_user}", "gists_url": "https://api.github.com/users/jozefl-mitto/gists{/gist_id}", "starred_url": "https://api.github.com/users/jozefl-mitto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jozefl-mitto/subscriptions", "organizations_url": "https://api.github.com/users/jozefl-mitto/orgs", "repos_url": "https://api.github.com/users/jozefl-mitto/repos", "events_url": "https://api.github.com/users/jozefl-mitto/events{/privacy}", "received_events_url": "https://api.github.com/users/jozefl-mitto/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "660254d3e8f3c65ed570f84ae58dfa73beda4caa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/660254d3e8f3c65ed570f84ae58dfa73beda4caa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/660254d3e8f3c65ed570f84ae58dfa73beda4caa"}], "stats": {"total": 136, "additions": 108, "deletions": 28}, "files": [{"sha": "78207cc1f0a81bacd9da15158a47181b69d9c332", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,3 +1,8 @@\n+2018-11-27  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* doc/sourcebuild.texi: Document check_effective_target_int_eq_float\n+\tand check_effective_target_ptr_eq_long.\n+\n 2018-11-27  Alan Modra  <amodra@gmail.com>\n \n \t* config.gcc (powerpc*-*-freebsd*, powerpc-*-netbsd*),"}, {"sha": "1204a546c29db57b8205cb71904fcb25fc592673", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1360,6 +1360,12 @@ Target has @code{int} that is 16 bits or shorter.\n @item long_neq_int\n Target has @code{int} and @code{long} with different sizes.\n \n+@item int_eq_float\n+Target has @code{int} and @code{float} with the same size.\n+\n+@item ptr_eq_long\n+Target has pointers (@code{void *}) and @code{long} with the same size.\n+\n @item large_double\n Target supports @code{double} that is longer than @code{float}.\n "}, {"sha": "9e1f6d05a45dcab6a848a952906901e6de5c7380", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,3 +1,39 @@\n+2018-11-27  Jozef Lawrynowicz  <jozef.l@mittosystems.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_logical_op_short_circuit): Add msp430.\n+\t(check_effective_target_int_eq_float): New. \n+\t(check_effective_target_ptr_eq_long): New. \n+\t* c-c++-common/pr41779.c: Require int_eq_float for dg-warning tests.\n+\t* c-c++-common/pr57371-2.c: XFAIL optimized dump scan when\n+\tsizeof (float) != sizeof (int).\n+\t* gcc.dg/pr84670-4.c: Require ptr_eq_long.\n+\t* gcc.dg/pr85859.c: Likewise.\n+\t* gcc.dg/Wno-frame-address.c: Skip for msp430-elf.\n+\t* gcc.dg/torture/stackalign/builtin-apply-2.c: Likewise.\n+\t* gcc.dg/ifcvt-4.c: Likewise.\n+\t* gcc.dg/pr34856.c: Likewise.\n+\t* gcc.dg/builtin-apply2.c: Likewise.\n+\t* gcc.dg/tree-ssa/ssa-dse-26.c: Likewise.\n+\t* gcc.dg/attr-alloc_size-11.c: Remove dg-warning XFAIL for msp430.\n+\t* gcc.dg/tree-ssa/20040204-1.c: Likewise.\n+\t* gcc.dg/compat/struct-by-value-16a_x.c: Build at -O1 for msp430\n+\tso it fits.\n+\t* gcc.dg/lto/20091013-1_0.c: Require ptr_eq_long.\n+\t* gcc.dg/lto/20091013-1_1.c: Remove xfail-if for when\n+\tsizeof(void *) != sizeof(long).\n+\t* gcc.dg/lto/20091013-1_2.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-1.c: Fix expected dg-final behaviour for msp430.\n+\t* gcc.dg/tree-ssa/gen-vect-25.c: Likewise.\n+\t* gcc.dg/tree-ssa/gen-vect-11.c: Likewise.\n+\t* gcc.dg/tree-ssa/loop-35.c: Likewise.\n+\t* gcc.dg/tree-ssa/pr23455.c: Likewise.\n+\t* gcc.dg/weak/typeof-2.c: Likewise.\n+\t* gcc.target/msp430/interrupt_fn_placement.c: Skip for 430 ISA.\n+\t* gcc.target/msp430/pr78818-data-region.c: Fix scan-assembler text.\n+\t* gcc.target/msp430/pr79242.c: Don't skip for -msmall.\n+\t* gcc.target/msp430/special-regs.c: Use \"__asm__\" instead of \"asm\".\n+\n 2018-11-26  Martin Sebor  <msebor@redhat.com>\n \n \tPR 87756"}, {"sha": "a80bf78cc7f2e03acf65f6614c11255489530e16", "filename": "gcc/testsuite/c-c++-common/pr41779.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr41779.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr41779.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr41779.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,6 +1,6 @@\n /* PR41779: Wconversion cannot see through real*integer promotions. */\n /* { dg-do compile } */\n-/* { dg-skip-if \"doubles are floats\" { \"avr-*-*\" } } */\n+/* { dg-skip-if \"doubles are floats\" { avr-*-* } } */\n /* { dg-options \"-std=c99 -Wconversion\" { target c } } */\n /* { dg-options \"-Wconversion\" { target c++ } } */\n /* { dg-require-effective-target large_double } */\n@@ -27,7 +27,7 @@ float f4(float x, unsigned char y)\n \n float f5(float x, int y)\n {\n-  return x * y; /* { dg-warning \"conversion\" } */\n+  return x * y; /* { dg-warning \"conversion\" \"\" { target int_eq_float } } */\n }\n \n double c1(float x, unsigned short y, int z)\n@@ -52,5 +52,5 @@ double c4(float x, unsigned char y, int z)\n \n double c5(float x, int y, int z)\n {\n-  return z ? x + x : y; /* { dg-warning \"conversion\" } */\n+  return z ? x + x : y; /* { dg-warning \"conversion\" \"\" { target int_eq_float } } */\n }"}, {"sha": "8d11880a6f5e749af64e95c11a75cb40e2e3da7d", "filename": "gcc/testsuite/c-c++-common/pr57371-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr57371-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr57371-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr57371-2.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -8,7 +8,7 @@\n \n int foo1(int x) {\n   return (float) x != 0;\n-  /* { dg-final { scan-tree-dump \"\\\\(float\\\\)\" \"optimized\" } } */\n+  /* { dg-final { scan-tree-dump \"\\\\(float\\\\)\" \"optimized\" { xfail { ! int_eq_float } } } } */\n }\n \n int foo2(long long x) {"}, {"sha": "11ae0cd64386fb94b59fbba2ee4c3ac6040baa0a", "filename": "gcc/testsuite/gcc.dg/Wno-frame-address.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2FWno-frame-address.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2FWno-frame-address.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWno-frame-address.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-skip-if \"Cannot access arbitrary stack frames\" { arm*-*-* avr-*-* hppa*-*-* ia64-*-* visium-*-* csky-*-* } } */\n+/* { dg-skip-if \"Cannot access arbitrary stack frames\" { arm*-*-* avr-*-* hppa*-*-* ia64-*-* visium-*-* csky-*-* msp430-*-* } } */\n /* { dg-options \"-Werror\" } */\n /* { dg-additional-options \"-mbackchain\" { target { s390*-*-* } } } */\n "}, {"sha": "a3d95c4e587d9a8786afb7aec5ee691ab82277ca", "filename": "gcc/testsuite/gcc.dg/attr-alloc_size-11.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fattr-alloc_size-11.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -47,8 +47,8 @@ typedef __SIZE_TYPE__    size_t;\n \n /* The following tests fail because of missing range information.  The xfail\n    exclusions are PR79356.  */\n-TEST (signed char, SCHAR_MIN + 2, ALLOC_MAX);   /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" \"missing range info for signed char\" { xfail { ! { aarch64*-*-* arm*-*-* avr-*-* alpha*-*-* ia64-*-* mips*-*-* or1k*-*-* pdp11*-*-* powerpc*-*-* sparc*-*-* s390*-*-* visium-*-* } } } } */\n-TEST (short, SHRT_MIN + 2, ALLOC_MAX); /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" \"missing range info for short\" { xfail { ! { aarch64*-*-* arm*-*-* alpha*-*-* avr-*-* ia64-*-* mips*-*-* or1k*-*-* pdp11*-*-* powerpc*-*-* sparc*-*-* s390x-*-* visium-*-* } } } } */\n+TEST (signed char, SCHAR_MIN + 2, ALLOC_MAX);   /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" \"missing range info for signed char\" { xfail { ! { aarch64*-*-* arm*-*-* avr-*-* alpha*-*-* ia64-*-* mips*-*-* or1k*-*-* pdp11*-*-* powerpc*-*-* sparc*-*-* s390*-*-* visium-*-* msp430-*-* } } } } */\n+TEST (short, SHRT_MIN + 2, ALLOC_MAX); /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" \"missing range info for short\" { xfail { ! { aarch64*-*-* arm*-*-* alpha*-*-* avr-*-* ia64-*-* mips*-*-* or1k*-*-* pdp11*-*-* powerpc*-*-* sparc*-*-* s390x-*-* visium-*-* msp430-*-* } } } } */\n TEST (int, INT_MIN + 2, ALLOC_MAX);    /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" } */\n TEST (int, -3, ALLOC_MAX);             /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" } */\n TEST (int, -2, ALLOC_MAX);             /* { dg-warning \"argument 1 range \\\\\\[13, \\[0-9\\]+\\\\\\] exceeds maximum object size 12\" } */"}, {"sha": "b39f7a06ff877b8bd33dfe2f91ddd8d55124ab5e", "filename": "gcc/testsuite/gcc.dg/builtin-apply2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-apply2.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,7 +1,7 @@\n /* { dg-do run } */\n /* { dg-require-effective-target untyped_assembly } */\n /* { dg-skip-if \"Variadic funcs have all args on stack. Normal funcs have args in registers.\" { \"avr-*-* nds32*-*-*\" } } */\n-/* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs.\" { \"riscv*-*-* or1k*-*-*\" } } */\n+/* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs.\" { \"riscv*-*-* or1k*-*-* msp430-*-*\" } } */\n /* { dg-skip-if \"Variadic funcs use Base AAPCS.  Normal funcs use VFP variant.\" { arm*-*-* && arm_hf_eabi } } */\n \n /* PR target/12503 */"}, {"sha": "ac8397b9f802e2a06373c6981471cd5adf226410", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-16a_x.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16a_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16a_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-16a_x.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,3 +1,5 @@\n+/* { dg-options \"-O1\" { target msp430-*-* } } */\r\n+\r\n #include \"compat-common.h\"\r\n \r\n #include \"fp-struct-defs.h\"\r"}, {"sha": "ec142cfd94396c8347d239fffc6b67229051dc81", "filename": "gcc/testsuite/gcc.dg/ifcvt-4.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fifcvt-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fifcvt-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fifcvt-4.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -2,7 +2,7 @@\n /* { dg-additional-options \"-misel\" { target { powerpc*-*-* } } } */\n /* { dg-additional-options \"-march=z196\" { target { s390x-*-* } } } */\n /* { dg-additional-options \"-mtune-ctrl=^one_if_conv_insn\" { target { i?86-*-* x86_64-*-* } } } */\n-/* { dg-skip-if \"Multiple set if-conversion not guaranteed on all subtargets\" { \"arm*-*-* avr-*-* hppa*64*-*-* s390-*-* visium-*-*\" riscv*-*-* } }  */\n+/* { dg-skip-if \"Multiple set if-conversion not guaranteed on all subtargets\" { \"arm*-*-* avr-*-* hppa*64*-*-* s390-*-* visium-*-*\" riscv*-*-* msp430-*-* } }  */\n /* { dg-skip-if \"\" { \"s390x-*-*\" } { \"-m31\" } }  */\n \n typedef int word __attribute__((mode(word)));"}, {"sha": "afceb2436cd202945ef0f74947eaa3512d209e6d", "filename": "gcc/testsuite/gcc.dg/lto/20091013-1_0.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_0.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_0.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_0.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,5 +1,6 @@\n /* { dg-lto-do link } */\n /* { dg-require-effective-target fpic } */\n+/* { dg-require-effective-target ptr_eq_long } */\n /* { dg-lto-options {{-fPIC -r -nostdlib -flto} {-fPIC -r -nostdlib -O2 -flto}} } */\n /* { dg-extra-ld-options \"-flinker-output=nolto-rel\" } */\n "}, {"sha": "fc74ff715e84ce26ba66e6c55b2c6b180ab4ba67", "filename": "gcc/testsuite/gcc.dg/lto/20091013-1_1.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_1.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,4 +1,3 @@\n-/* { dg-xfail-if \"cast to pointer of different size\" { \"avr-*-*\" x86_64-*-mingw* } } */\n typedef struct HDC__ { int unused; } *HDC;\n typedef struct HFONT__ { int unused; } *HFONT;\n "}, {"sha": "1af49aa97b6e663dce9ad43d010192e481dc7858", "filename": "gcc/testsuite/gcc.dg/lto/20091013-1_2.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Flto%2F20091013-1_2.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,4 +1,3 @@\n-/* { dg-xfail-if \"cast to pointer of different size\" { \"avr-*-*\" x86_64-*-mingw* } } */\n typedef struct HDC__ { int unused; } *HDC;\n typedef struct HFONT__ { int unused; } *HFONT;\n "}, {"sha": "9ae890270d75c42a48670ff8a5fba1aba9f57d04", "filename": "gcc/testsuite/gcc.dg/pr34856.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34856.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34856.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr34856.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -2,6 +2,7 @@\n /* { dg-options \"-O2\" } */\n /* { dg-options \"-O2 -msse2\" { target { i?86-*-* x86_64-*-* } } } */\n /* { dg-options \"-O2 -maltivec\" { target { powerpc*-*-linux* && powerpc_altivec_ok } } } */\n+/* { dg-skip-if \"no vector type for PSImode\" { msp430-*-* } { \"-mlarge\" } { \"\" } } */\n \n typedef __UINTPTR_TYPE__ uintptr_t;\n "}, {"sha": "036055081827443a74cdbc587229bbe4b39e5b67", "filename": "gcc/testsuite/gcc.dg/pr84670-4.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr84670-4.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fwrapv\" } */\n+/* { dg-require-effective-target ptr_eq_long } */\n \n char *a;\n int b(void)"}, {"sha": "b1476ba3806a76960e0b216d265df22c6a9a5ffe", "filename": "gcc/testsuite/gcc.dg/pr85859.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85859.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85859.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr85859.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do run } */\n /* { dg-options \"-ftree-tail-merge -Wno-div-by-zero -O2 -fno-dce -fno-isolate-erroneous-paths-dereference -fno-tree-dce -fno-tree-vrp\" } */\n+/* { dg-require-effective-target ptr_eq_long } */\n \n int b, c, d, e;\n "}, {"sha": "ecb779ad49f76116c9cda631e6e2eb1768db88b2", "filename": "gcc/testsuite/gcc.dg/torture/stackalign/builtin-apply-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fstackalign%2Fbuiltin-apply-2.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -9,7 +9,7 @@\n /* arm_hf_eabi: Variadic funcs use Base AAPCS.  Normal funcs use VFP variant.\n    avr: Variadic funcs don't pass arguments in registers, while normal funcs\n         do.  */\n-/* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs\" { arm_hf_eabi || { avr-*-* riscv*-*-* or1k*-*-* } } } */\n+/* { dg-skip-if \"Variadic funcs use different argument passing from normal funcs\" { arm_hf_eabi || { avr-*-* riscv*-*-* or1k*-*-* msp430-*-* } } } */\n /* { dg-skip-if \"Variadic funcs have all args on stack. Normal funcs have args in registers.\" { nds32*-*-* } { v850*-*-* } } */\n /* { dg-require-effective-target untyped_assembly } */\n    "}, {"sha": "255b627334157f629a30892fab40f6b37bafe969", "filename": "gcc/testsuite/gcc.dg/tree-ssa/20040204-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2F20040204-1.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -33,4 +33,4 @@ void test55 (int x, int y)\n    that the && should be emitted (based on BRANCH_COST).  Fix this\n    by teaching dom to look through && and register all components\n    as true.  */\n-/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" { xfail { ! \"alpha*-*-* arm*-*-* aarch64*-*-* powerpc*-*-* cris-*-* crisv32-*-* hppa*-*-* i?86-*-* mmix-*-* mips*-*-* m68k*-*-* moxie-*-* nds32*-*-* s390*-*-* sh*-*-* sparc*-*-* spu-*-* visium-*-* x86_64-*-* riscv*-*-* or1k*-*-*\" } } } } */\n+/* { dg-final { scan-tree-dump-times \"link_error\" 0 \"optimized\" { xfail { ! \"alpha*-*-* arm*-*-* aarch64*-*-* powerpc*-*-* cris-*-* crisv32-*-* hppa*-*-* i?86-*-* mmix-*-* mips*-*-* m68k*-*-* moxie-*-* nds32*-*-* s390*-*-* sh*-*-* sparc*-*-* spu-*-* visium-*-* x86_64-*-* riscv*-*-* or1k*-*-* msp430-*-*\" } } } } */"}, {"sha": "650e73a5ee8931e0c3fd797ce26a7fa3f9c74054", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-11.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -30,4 +30,4 @@ int main ()\n }\n \n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { ! { avr-*-* msp430-*-* } } } } } */"}, {"sha": "60ec27054b63548809cbca7fd2b9d89754461d11", "filename": "gcc/testsuite/gcc.dg/tree-ssa/gen-vect-25.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-25.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-25.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fgen-vect-25.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -54,5 +54,5 @@ int main (void)\n   return main_1 (n + 2, (int *) &n);\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target { ! avr-*-* } } } } */\n-/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { ! avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 2 loops\" 1 \"vect\" { target { ! { avr-*-* msp430-*-* } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" { target { ! { avr-*-* msp430-*-* } } } } } */"}, {"sha": "274f594928eb2854aa0496df9c7eef56937fbd4d", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-1.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -43,10 +43,10 @@ int xxx(void)\n /* The SH targets always use separate instructions to load the address\n    and to do the actual call - bsr is only generated by link time\n    relaxation.  */\n-/* CRIS keeps the address in a register.  */\n+/* CRIS and MSP430 keep the address in a register.  */\n /* m68k sometimes puts the address in a register, depending on CPU and PIC.  */\n \n-/* { dg-final { scan-assembler-times \"foo\" 5 { xfail hppa*-*-* ia64*-*-* sh*-*-* cris-*-* crisv32-*-* fido-*-* m68k-*-* i?86-*-mingw* i?86-*-cygwin* x86_64-*-mingw* visium-*-* nvptx*-*-* pdp11*-*-* } } } */\n+/* { dg-final { scan-assembler-times \"foo\" 5 { xfail hppa*-*-* ia64*-*-* sh*-*-* cris-*-* crisv32-*-* fido-*-* m68k-*-* i?86-*-mingw* i?86-*-cygwin* x86_64-*-mingw* visium-*-* nvptx*-*-* pdp11*-*-* msp430-*-* } } } */\n /* { dg-final { scan-assembler-times \"foo,%r\" 5 { target hppa*-*-* } } } */\n /* { dg-final { scan-assembler-times \"= foo\"  5 { target ia64*-*-* } } } */\n /* { dg-final { scan-assembler-times \"call\\[ \\t\\]*_foo\" 5 { target i?86-*-mingw* i?86-*-cygwin* } } } */"}, {"sha": "ce63f97f65785b219ebdc5553d4d07ecec8ee3f9", "filename": "gcc/testsuite/gcc.dg/tree-ssa/loop-35.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-35.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-35.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Floop-35.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -67,5 +67,5 @@ void test4(struct a *A, unsigned LONG b)\n     }\n }\n /* long index not hoisted for avr target PR 36561 */\n-/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 8 \"lim2\" { xfail { \"avr-*-*\" } } } } */\n-/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 6 \"lim2\" { target { \"avr-*-*\" } } } } */\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 8 \"lim2\" { xfail { avr-*-* msp430-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"Executing store motion of\" 6 \"lim2\" { target { avr-*-* msp430-*-* } } } } */"}, {"sha": "f336c98463026381068707cbde84ad56a7b276c6", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr23455.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23455.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23455.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr23455.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -25,5 +25,5 @@ bi_windup(unsigned int *outbuf, unsigned int bi_buf)\n /* We should eliminate one load of outcnt, which will in turn let us eliminate\n    one multiply of outcnt which will in turn let us eliminate\n    one add involving outcnt and outbuf.  */\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 3\" 1 \"pre\" {target { ! avr-*-* } } } } */\n-/* { dg-final { scan-tree-dump-times \"Eliminated: 4\" 1 \"pre\" {target {   avr-*-* } } } } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 3\" 1 \"pre\" { target { ! { avr-*-* msp430-*-* } } } } } */\n+/* { dg-final { scan-tree-dump-times \"Eliminated: 4\" 1 \"pre\" { target avr-*-* msp430-*-* } } } */"}, {"sha": "32d63899b6324b55c81fb1986fea860924827952", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-dse-26.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-26.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-26.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-dse-26.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,5 +1,6 @@\n /* { dg-do compile } */\n /* { dg-options \"-O2 -fdump-tree-dse1-details -fno-short-enums\" } */\n+/* { dg-skip-if \"temporary variable for constraint_expr is never used\" { msp430-*-* } } */\n \n enum constraint_expr_type\n {"}, {"sha": "51995ca52faeea416fd6288f74234ba19e171b17", "filename": "gcc/testsuite/gcc.dg/weak/typeof-2.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Ftypeof-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Ftypeof-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fweak%2Ftypeof-2.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -48,6 +48,8 @@ int bar3 (int x)\n // { dg-final { if [string match m68k-*-* $target_triplet ] {return} } }\n // Likewise for moxie targets.\n // { dg-final { if [string match moxie-*-* $target_triplet ] {return} } }\n+// Likewise for msp430 targets.\n+// { dg-final { if [string match msp430-*-* $target_triplet ] {return} } }\n // Likewise for Visium targets.\n // { dg-final { if [string match visium-*-* $target_triplet ] {return} } }\n // { dg-final { scan-assembler \"baz3.*baz3.*baz3.*baz3.*baz3.*baz3\" } }"}, {"sha": "b8fd5e649808778a7baf18ee839748ec47d788f4", "filename": "gcc/testsuite/gcc.target/msp430/interrupt_fn_placement.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Finterrupt_fn_placement.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Finterrupt_fn_placement.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Finterrupt_fn_placement.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,4 +1,5 @@\n /* { dg-do compile } */\n+/* { dg-skip-if \"\" { \"*-*-*\" } { \"-mcpu=msp430\" } { \"\" } } */\n /* { dg-options \"-mlarge -mcode-region=either -ffunction-sections\" } */\n /* { dg-final { scan-assembler-not \"\\\\.either\\\\.lowtext\" } } */\n "}, {"sha": "3244c0ad85d8605f97b90e5cf2926bdb02b7c8f5", "filename": "gcc/testsuite/gcc.target/msp430/pr78818-data-region.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-data-region.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-data-region.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr78818-data-region.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,6 +1,7 @@\n /* { dg-do compile } */\n /* { dg-options \"-mdata-region=either\" } */\n \n-/* { dg-final { scan-assembler-not \"\\\\.either\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\.either\\\\.data\" } } */\n+/* { dg-final { scan-assembler-not \"\\\\.either\\\\.bss\" } } */\n \n #include \"pr78818-real.c\""}, {"sha": "9de8fe052bcaf8290f7618773cc11bca03950c28", "filename": "gcc/testsuite/gcc.target/msp430/pr79242.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr79242.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr79242.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fpr79242.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-skip-if \"\" { \"*-*-*\" } { \"-mcpu=msp430\" \"-msmall\" } { \"\" } } */\n+/* { dg-skip-if \"\" { \"*-*-*\" } { \"-mcpu=msp430\" } { \"\" } } */\n /* { dg-options \"-mcpu=msp430x\" } */\n \n typedef _Complex __int20 C;"}, {"sha": "a7ae9d00611c9bfc9af6b6c9c50bd23d51e968f9", "filename": "gcc/testsuite/gcc.target/msp430/special-regs.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fspecial-regs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fspecial-regs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fmsp430%2Fspecial-regs.c?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -7,10 +7,10 @@ int foo (void)\n   register int cg1 __asm__(\"R2\"); /* { dg-error \"the register specified for 'cg1' is not general enough\" } */\n   register int cg2 __asm__(\"R3\"); /* { dg-error \"the register specified for 'cg2' is not general enough\" } */\n \n-  asm(\"\" : \"=r\"(pc));\n-  asm(\"\" : \"=r\"(sp));\n-  asm(\"\" : \"=r\"(cg1));\n-  asm(\"\" : \"=r\"(cg2));\n+  __asm__(\"\" : \"=r\"(pc));\n+  __asm__(\"\" : \"=r\"(sp));\n+  __asm__(\"\" : \"=r\"(cg1));\n+  __asm__(\"\" : \"=r\"(cg2));\n \n   return pc + sp + cg1 + cg2;\n }"}, {"sha": "f18cf2a172cdcb16917c340f4d898d2709b960a0", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27c16e61cb99796a912d491ad5d77ed7873a4eed/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=27c16e61cb99796a912d491ad5d77ed7873a4eed", "patch": "@@ -2671,6 +2671,29 @@ proc check_effective_target_long_neq_int { } {\n     }]\n }\n \n+# Return 1 if int size is equal to float size,\n+# 0 otherwise.\n+\n+proc check_effective_target_int_eq_float { } {\n+    return [check_no_compiler_messages int_eq_float object {\n+\tint dummy[sizeof (int) >= sizeof (float) ? 1 : -1];\n+    }]\n+}\n+\n+# Return 1 if pointer size is equal to long size,\n+# 0 otherwise.\n+\n+proc check_effective_target_ptr_eq_long { } {\n+    # sizeof (void *) == 4 for msp430-elf -mlarge which is equal to\n+    # sizeof (long). Avoid false positive.\n+    if { [istarget msp430-*-*] } {\n+\treturn 0\n+    }\n+    return [check_no_compiler_messages ptr_eq_long object {\n+\tint dummy[sizeof (void *) == sizeof (long) ? 1 : -1];\n+    }]\n+}\n+\n # Return 1 if the target supports long double larger than double,\n # 0 otherwise.\n \n@@ -8472,6 +8495,7 @@ proc check_effective_target_logical_op_short_circuit {} {\n \t || [istarget crisv32-*-*] || [istarget cris-*-*]\n \t || [istarget csky*-*-*]\n \t || [istarget mmix-*-*]\n+\t || [istarget msp430-*-*]\n \t || [istarget s390*-*-*]\n \t || [istarget powerpc*-*-*]\n \t || [istarget nios2*-*-*]"}]}