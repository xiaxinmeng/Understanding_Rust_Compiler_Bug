{"sha": "5cca4131e4aabf70a18e362620ad65a3cebf227a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNjYTQxMzFlNGFhYmY3MGExOGUzNjI2MjBhZDY1YTNjZWJmMjI3YQ==", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2020-07-05T23:07:30Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2021-07-18T14:09:39Z"}, "message": "libgccjit: Handle truncation and extension for casts [PR95498]\n\n2021-07-18  Antoni Boucher  <bouanto@zoho.com>\n\ngcc/jit/\n\tPR target/95498\n\t* jit-playback.c (convert): Add support to handle truncation and\n\textension in the convert function.\n\ngcc/testsuite/\n\tPR target/95498\n\t* jit.dg/all-non-failing-tests.h: New test.\n\t* jit.dg/test-cast.c: New test.\n\nSigned-off-by: Antoni Boucher <bouanto@zoho.com>", "tree": {"sha": "abaecae41c0b144a5ebca1e451994e82e375caf3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abaecae41c0b144a5ebca1e451994e82e375caf3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cca4131e4aabf70a18e362620ad65a3cebf227a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cca4131e4aabf70a18e362620ad65a3cebf227a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cca4131e4aabf70a18e362620ad65a3cebf227a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cca4131e4aabf70a18e362620ad65a3cebf227a/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "853921378bfa149353b4e1c7dde5c02f80072ad7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/853921378bfa149353b4e1c7dde5c02f80072ad7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/853921378bfa149353b4e1c7dde5c02f80072ad7"}], "stats": {"total": 108, "additions": 97, "deletions": 11}, "files": [{"sha": "79ac525e5df734b6b11a8634d5e47d15c86fa9df", "filename": "gcc/jit/jit-playback.c", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca4131e4aabf70a18e362620ad65a3cebf227a/gcc%2Fjit%2Fjit-playback.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca4131e4aabf70a18e362620ad65a3cebf227a/gcc%2Fjit%2Fjit-playback.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2Fjit-playback.c?ref=5cca4131e4aabf70a18e362620ad65a3cebf227a", "patch": "@@ -62,22 +62,32 @@ along with GCC; see the file COPYING3.  If not see\n \n /* gcc::jit::playback::context::build_cast uses the convert.h API,\n    which in turn requires the frontend to provide a \"convert\"\n-   function, apparently as a fallback.\n-\n-   Hence we provide this dummy one, with the requirement that any casts\n-   are handled before reaching this.  */\n+   function, apparently as a fallback for casts that can be simplified\n+   (truncation, extension). */\n extern tree convert (tree type, tree expr);\n \n tree\n convert (tree dst_type, tree expr)\n {\n-  gcc_assert (gcc::jit::active_playback_ctxt);\n-  gcc::jit::active_playback_ctxt->add_error (NULL, \"unhandled conversion\");\n-  fprintf (stderr, \"input expression:\\n\");\n-  debug_tree (expr);\n-  fprintf (stderr, \"requested type:\\n\");\n-  debug_tree (dst_type);\n-  return error_mark_node;\n+  tree t_ret = NULL;\n+  t_ret = targetm.convert_to_type (dst_type, expr);\n+  if (t_ret)\n+      return t_ret;\n+  switch (TREE_CODE (dst_type))\n+    {\n+    case INTEGER_TYPE:\n+    case ENUMERAL_TYPE:\n+      return fold (convert_to_integer (dst_type, expr));\n+\n+    default:\n+      gcc_assert (gcc::jit::active_playback_ctxt);\n+      gcc::jit::active_playback_ctxt->add_error (NULL, \"unhandled conversion\");\n+      fprintf (stderr, \"input expression:\\n\");\n+      debug_tree (expr);\n+      fprintf (stderr, \"requested type:\\n\");\n+      debug_tree (dst_type);\n+      return error_mark_node;\n+    }\n }\n \n namespace gcc {"}, {"sha": "84ef54a03861ac1cea86a6573aa3202017c25d22", "filename": "gcc/testsuite/jit.dg/all-non-failing-tests.h", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca4131e4aabf70a18e362620ad65a3cebf227a/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca4131e4aabf70a18e362620ad65a3cebf227a/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Fall-non-failing-tests.h?ref=5cca4131e4aabf70a18e362620ad65a3cebf227a", "patch": "@@ -98,6 +98,13 @@\n #undef create_code\n #undef verify_code\n \n+/* test-cast.c */\n+#define create_code create_code_cast\n+#define verify_code verify_code_cast\n+#include \"test-cast.c\"\n+#undef create_code\n+#undef verify_code\n+\n /* test-compound-assignment.c */\n #define create_code create_code_compound_assignment\n #define verify_code verify_code_compound_assignment\n@@ -361,6 +368,9 @@ const struct testcase testcases[] = {\n   {\"calling_internal_function\",\n    create_code_calling_internal_function,\n    verify_code_calling_internal_function},\n+  {\"cast\",\n+   create_code_cast,\n+   verify_code_cast},\n   {\"compound_assignment\",\n    create_code_compound_assignment,\n    verify_code_compound_assignment},"}, {"sha": "2b1e385ae405244455b0be9951d319ace8039c28", "filename": "gcc/testsuite/jit.dg/test-cast.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cca4131e4aabf70a18e362620ad65a3cebf227a/gcc%2Ftestsuite%2Fjit.dg%2Ftest-cast.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cca4131e4aabf70a18e362620ad65a3cebf227a/gcc%2Ftestsuite%2Fjit.dg%2Ftest-cast.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fjit.dg%2Ftest-cast.c?ref=5cca4131e4aabf70a18e362620ad65a3cebf227a", "patch": "@@ -0,0 +1,66 @@\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+\n+#include \"libgccjit.h\"\n+\n+#include \"harness.h\"\n+\n+void\n+create_code (gcc_jit_context *ctxt, void *user_data)\n+{\n+  /* Let's try to inject the equivalent of:\n+char\n+my_casts (int x)\n+{\n+   return (char)(long) x;\n+}\n+   */\n+  gcc_jit_type *int_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_INT);\n+  gcc_jit_type *long_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_LONG);\n+  gcc_jit_type *return_type =\n+    gcc_jit_context_get_type (ctxt, GCC_JIT_TYPE_CHAR);\n+\n+  gcc_jit_param *x =\n+    gcc_jit_context_new_param (\n+      ctxt,\n+      NULL,\n+      int_type, \"x\");\n+  gcc_jit_param *params[1] = {x};\n+  gcc_jit_function *func =\n+    gcc_jit_context_new_function (ctxt,\n+\t\t\t\t  NULL,\n+\t\t\t\t  GCC_JIT_FUNCTION_EXPORTED,\n+\t\t\t\t  return_type,\n+\t\t\t\t  \"my_casts\",\n+\t\t\t\t  1, params, 0);\n+\n+  gcc_jit_block *initial =\n+    gcc_jit_function_new_block (func, \"initial\");\n+\n+  gcc_jit_block_end_with_return(initial, NULL,\n+    gcc_jit_context_new_cast(ctxt,\n+        NULL,\n+        gcc_jit_context_new_cast(ctxt,\n+            NULL,\n+            gcc_jit_param_as_rvalue(x),\n+            long_type\n+        ),\n+        return_type\n+    ));\n+}\n+\n+void\n+verify_code (gcc_jit_context *ctxt, gcc_jit_result *result)\n+{\n+  typedef int (*my_casts_fn_type) (int);\n+  CHECK_NON_NULL (result);\n+  my_casts_fn_type my_casts =\n+    (my_casts_fn_type)gcc_jit_result_get_code (result, \"my_casts\");\n+  CHECK_NON_NULL (my_casts);\n+  char val = my_casts (10);\n+  note (\"my_casts returned: %d\", val);\n+  CHECK_VALUE (val, 10);\n+}"}]}