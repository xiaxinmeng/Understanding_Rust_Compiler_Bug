{"sha": "1aea083d4bfb7538499eae0271dae740e7efa240", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWFlYTA4M2Q0YmZiNzUzODQ5OWVhZTAyNzFkYWU3NDBlN2VmYTI0MA==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-10-12T19:40:42Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2019-10-12T19:40:42Z"}, "message": "lib2funcs.S (__gcc_plt_call): Load branch target to %r21.\n\n\t* config/pa/lib2funcs.S (__gcc_plt_call): Load branch target to %r21.\n\tLoad PIC register after branch target.  Fix white space.\n\t* config/pa/milli64.S ($$dyncall): Separate LINUX and non LINUX\n\timplementations.  Load PIC register after branch target.  Don't\n\tclobber function pointer when it points to function descriptor.\n\tUse nullification instead of branch in LINUX implementation.\n\nFrom-SVN: r276925", "tree": {"sha": "39ff8dc8ba1508da8f1405a29fec27ecbc7a579d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/39ff8dc8ba1508da8f1405a29fec27ecbc7a579d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1aea083d4bfb7538499eae0271dae740e7efa240", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aea083d4bfb7538499eae0271dae740e7efa240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1aea083d4bfb7538499eae0271dae740e7efa240", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1aea083d4bfb7538499eae0271dae740e7efa240/comments", "author": null, "committer": null, "parents": [{"sha": "a0f08eceae9af418c25c7cca7cb5fa67f0ff5037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0f08eceae9af418c25c7cca7cb5fa67f0ff5037", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0f08eceae9af418c25c7cca7cb5fa67f0ff5037"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "4d2a32ccb9731a4719ea7d33a4c151b1bfdf19fc", "filename": "libgcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aea083d4bfb7538499eae0271dae740e7efa240/libgcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aea083d4bfb7538499eae0271dae740e7efa240/libgcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2FChangeLog?ref=1aea083d4bfb7538499eae0271dae740e7efa240", "patch": "@@ -1,3 +1,12 @@\n+2019-10-12  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\t* config/pa/lib2funcs.S (__gcc_plt_call): Load branch target to %r21.\n+\tLoad PIC register after branch target.  Fix white space.\n+\t* config/pa/milli64.S ($$dyncall): Separate LINUX and non LINUX\n+\timplementations.  Load PIC register after branch target.  Don't\n+\tclobber function pointer when it points to function descriptor.\n+\tUse nullification instead of branch in LINUX implementation.\n+\n 2019-10-03  John David Anglin  <danglin@gcc.gnu.org>\n \n \t* config/pa/fptr.c: Disable -Warray-bounds warning."}, {"sha": "a2db5b3d3ac7b4bd63a2af2263132a2557f40f70", "filename": "libgcc/config/pa/lib2funcs.S", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aea083d4bfb7538499eae0271dae740e7efa240/libgcc%2Fconfig%2Fpa%2Flib2funcs.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aea083d4bfb7538499eae0271dae740e7efa240/libgcc%2Fconfig%2Fpa%2Flib2funcs.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Flib2funcs.S?ref=1aea083d4bfb7538499eae0271dae740e7efa240", "patch": "@@ -55,13 +55,13 @@ __gcc_plt_call\n \t; An inline version of dyncall so we don't have to worry\n \t; about long calls to millicode, PIC and other complexities.\n \tbb,>=,n %r22,30,L$foo\n-        depi 0,31,2,%r22\n-        ldw 4(%r22),%r19\n-        ldw 0(%r22),%r22\n+\tdepi 0,31,2,%r22\n+\tldw 0(%r22),%r21\n+\tldw 4(%r22),%r19\n L$foo\n-        ldsid (%r22),%r1\n-        mtsp %r1,%sr0\n-        ble 0(%sr0,%r22)\n+\tldsid (%r21),%r1\n+\tmtsp %r1,%sr0\n+\tble 0(%sr0,%r21)\n \tcopy %r31,%r2\n \tldw -8(%r30),%r2\n "}, {"sha": "36040e9e78de12a735fa0c7a5abd412b14543687", "filename": "libgcc/config/pa/milli64.S", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1aea083d4bfb7538499eae0271dae740e7efa240/libgcc%2Fconfig%2Fpa%2Fmilli64.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1aea083d4bfb7538499eae0271dae740e7efa240/libgcc%2Fconfig%2Fpa%2Fmilli64.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Fpa%2Fmilli64.S?ref=1aea083d4bfb7538499eae0271dae740e7efa240", "patch": "@@ -222,19 +222,26 @@ GSYM($$dyncall)\n \t.proc\n \t.callinfo\tmillicode\n \t.entry\n-\tbb,>=,n %r22,30,LREF(1)\t\t; branch if not plabel address\n-\tdepi\t0,31,2,%r22\t\t; clear the two least significant bits\n-\tldw\t4(%r22),%r19\t\t; load new LTP value\n-\tldw\t0(%r22),%r22\t\t; load address of target\n-LSYM(1)\n #ifdef LINUX\n-\tbv\t%r0(%r22)\t\t; branch to the real target\n+\textru,<>\t%r22,30,1,%r0\t; nullify if plabel bit set\n+\tbv,n\t%r0(%r22)\t\t; branch to target\n+\tldw\t-2(%r22),%r21\t\t; load address of target\n+\tbv\t%r0(%r21)\t\t; branch to the real target\n+\tldw\t2(%r22),%r19\t\t; load new LTP value\n #else\n+\tbb,>=,n %r22,30,LREF(1)\t\t; branch if not plabel address\n+\tldw\t-2(%r22),%r21\t\t; load address of target to r21\n+\tldsid\t(%sr0,%r21),%r1\t\t; get the \"space ident\" selected by r21\n+\tldw\t2(%r22),%r19\t\t; load new LTP value\n+\tmtsp\t%r1,%sr0\t\t; move that space identifier into sr0\n+\tbe\t0(%sr0,%r21)\t\t; branch to the real target\n+\tstw\t%r2,-24(%r30)\t\t; save return address into frame marker\n+LSYM(1)\n \tldsid\t(%sr0,%r22),%r1\t\t; get the \"space ident\" selected by r22\n \tmtsp\t%r1,%sr0\t\t; move that space identifier into sr0\n-\tbe\t0(%sr0,%r22)\t\t; branch to the real target\n-#endif\n+\tbe\t0(%sr0,%r22)\t\t; branch to the target\n \tstw\t%r2,-24(%r30)\t\t; save return address into frame marker\n+#endif\n \t.exit\n \t.procend\n #endif"}]}