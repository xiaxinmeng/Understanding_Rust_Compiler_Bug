{"sha": "cf0b7e9787c3686c47219a725f2cbcaa19faaaca", "node_id": "C_kwDOANBUbNoAKGNmMGI3ZTk3ODdjMzY4NmM0NzIxOWE3MjVmMmNiY2FhMTlmYWFhY2E", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-12T10:59:33Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-10-14T14:35:41Z"}, "message": "libstdc++: Simplify print_raw function for debug assertions\n\nReplace two uses of print_raw where it's clearer to just use fprintf\ndirectly. Then the only remaining use of print_raw is as the print_func\nargument of pretty_print. When called by pretty_print the count is\neither a positive integer or -1, so we can simplify print_raw itself.\n\nRemove the default argument, because it's never used. Remove the check\nfor nbc == 0, which never happens (but would be harmless if it did).\nReplace the conditional expression with a single call to fprintf, using\nINT_MAX as the maximum length.\n\nlibstdc++-v3/ChangeLog:\n\n\t* src/c++11/debug.cc (print_raw): Simplify.\n\t(print_word): Print indentation by calling fprintf directly.\n\t(_Error_formatter::_M_error): Print unindented string by calling\n\tfprintf directly.", "tree": {"sha": "5b19a06450361b90b0a5099364e8a3900f08350b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b19a06450361b90b0a5099364e8a3900f08350b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cf0b7e9787c3686c47219a725f2cbcaa19faaaca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0b7e9787c3686c47219a725f2cbcaa19faaaca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf0b7e9787c3686c47219a725f2cbcaa19faaaca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf0b7e9787c3686c47219a725f2cbcaa19faaaca/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "823e9097f70eb95ef09fde357aebd071aec311d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/823e9097f70eb95ef09fde357aebd071aec311d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/823e9097f70eb95ef09fde357aebd071aec311d9"}], "stats": {"total": 21, "additions": 8, "deletions": 13}, "files": [{"sha": "f2b25fbefce0b4d3bff16a07e7b0e8698e479641", "filename": "libstdc++-v3/src/c++11/debug.cc", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cf0b7e9787c3686c47219a725f2cbcaa19faaaca/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cf0b7e9787c3686c47219a725f2cbcaa19faaaca/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fdebug.cc?ref=cf0b7e9787c3686c47219a725f2cbcaa19faaaca", "patch": "@@ -37,6 +37,7 @@\n #include <cstdlib>\t// for std::abort\n #include <cctype>\t// for std::isspace.\n #include <cstring>\t// for std::strstr.\n+#include <climits>\t// for INT_MAX\n \n #include <algorithm>\t// for std::min.\n \n@@ -609,14 +610,11 @@ namespace\n     { print_word(ctx, word, Length - 1); }\n \n   void\n-  print_raw(PrintContext& ctx, const char* str, ptrdiff_t nbc = -1)\n+  print_raw(PrintContext& ctx, const char* str, ptrdiff_t nbc)\n   {\n-    if (nbc != 0)\n-      {\n-\tctx._M_column += (nbc > 0)\n-\t  ? fprintf(stderr, \"%.*s\", (int)nbc, str)\n-\t  : fprintf(stderr, \"%s\", str);\n-      }\n+    if (nbc == -1)\n+      nbc = INT_MAX;\n+    ctx._M_column += fprintf(stderr, \"%.*s\", (int)nbc, str);\n   }\n \n   void\n@@ -645,12 +643,9 @@ namespace\n \t|| (ctx._M_column + visual_length < ctx._M_max_length)\n \t|| (visual_length >= ctx._M_max_length && ctx._M_column == 1))\n       {\n-\t// If this isn't the first line, indent\n+\t// If this isn't the first line, indent.\n \tif (ctx._M_column == 1 && !ctx._M_first_line)\n-\t  {\n-\t    const char spacing[PrintContext::_S_indent + 1] = \"    \";\n-\t    print_raw(ctx, spacing, PrintContext::_S_indent);\n-\t  }\n+\t  ctx._M_column += fprintf(stderr, \"%*c\", PrintContext::_S_indent, ' ');\n \n \tint written = fprintf(stderr, \"%.*s\", (int)length, word);\n \n@@ -1166,7 +1161,7 @@ namespace __gnu_debug\n     PrintContext ctx;\n     if (_M_file)\n       {\n-\tprint_raw(ctx, _M_file);\n+\tctx._M_column += fprintf(stderr, \"%s\", _M_file);\n \tprint_literal(ctx, \":\");\n \tgo_to_next_line = true;\n       }"}]}