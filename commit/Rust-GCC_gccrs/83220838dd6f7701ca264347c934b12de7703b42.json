{"sha": "83220838dd6f7701ca264347c934b12de7703b42", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODMyMjA4MzhkZDZmNzcwMWNhMjY0MzQ3YzkzNGIxMmRlNzcwM2I0Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-26T15:47:17Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-10-27T07:43:06Z"}, "message": "Move SLP nodes to an alloc-pool\n\nThis introduces a global alloc-pool for SLP nodes to reduce overhead\non SLP allocation churn which will get worse and to eventually release\nSLP cycles which will retain a refcount of one and thus are never\nfreed at the moment.\n\n2020-10-26  Richard Biener  <rguenther@suse.de>\n\n\t* tree-vectorizer.h (slp_tree_pool): Declare.\n\t(_slp_tree::operator new): Likewise.\n\t(_slp_tree::operator delete): Likewise.\n\t* tree-vectorizer.c (vectorize_loops): Allocate and free the\n\tslp_tree_pool.\n\t(pass_slp_vectorize::execute): Likewise.\n\t* tree-vect-slp.c (slp_tree_pool): Define.\n\t(_slp_tree::operator new): Likewise.\n\t(_slp_tree::operator delete): Likewise.", "tree": {"sha": "f04fbf29e18c88965d9ea2d3f49d98b72486e371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f04fbf29e18c88965d9ea2d3f49d98b72486e371"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/83220838dd6f7701ca264347c934b12de7703b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83220838dd6f7701ca264347c934b12de7703b42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83220838dd6f7701ca264347c934b12de7703b42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83220838dd6f7701ca264347c934b12de7703b42/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "119295372f3717e78edd43a8ae1a2003d0fcc0e6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/119295372f3717e78edd43a8ae1a2003d0fcc0e6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/119295372f3717e78edd43a8ae1a2003d0fcc0e6"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "894f045c0fe6a97d620119140cfd29dd62605426", "filename": "gcc/tree-vect-slp.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83220838dd6f7701ca264347c934b12de7703b42/gcc%2Ftree-vect-slp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83220838dd6f7701ca264347c934b12de7703b42/gcc%2Ftree-vect-slp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.c?ref=83220838dd6f7701ca264347c934b12de7703b42", "patch": "@@ -52,6 +52,23 @@ along with GCC; see the file COPYING3.  If not see\n static bool vectorizable_slp_permutation (vec_info *, gimple_stmt_iterator *,\n \t\t\t\t\t  slp_tree, stmt_vector_for_cost *);\n \n+object_allocator<_slp_tree> *slp_tree_pool;\n+\n+void *\n+_slp_tree::operator new (size_t n)\n+{\n+  gcc_assert (n == sizeof (_slp_tree));\n+  return slp_tree_pool->allocate_raw ();\n+}\n+\n+void\n+_slp_tree::operator delete (void *node, size_t n)\n+{\n+  gcc_assert (n == sizeof (_slp_tree));\n+  slp_tree_pool->remove_raw (node);\n+}\n+\n+\n /* Initialize a SLP node.  */\n \n _slp_tree::_slp_tree ()"}, {"sha": "0e08652ed101d29276fc5d7ae1f3eb47c604d0fa", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83220838dd6f7701ca264347c934b12de7703b42/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83220838dd6f7701ca264347c934b12de7703b42/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=83220838dd6f7701ca264347c934b12de7703b42", "patch": "@@ -1170,6 +1170,8 @@ vectorize_loops (void)\n   if (vect_loops_num <= 1)\n     return 0;\n \n+  slp_tree_pool = new object_allocator<_slp_tree> (\"SLP nodes for vect\");\n+\n   if (cfun->has_simduid_loops)\n     note_simd_array_uses (&simd_array_to_simduid_htab);\n \n@@ -1292,6 +1294,8 @@ vectorize_loops (void)\n     shrink_simd_arrays (simd_array_to_simduid_htab, simduid_to_vf_htab);\n   delete simduid_to_vf_htab;\n   cfun->has_simduid_loops = false;\n+  delete slp_tree_pool;\n+  slp_tree_pool = NULL;\n \n   if (num_vectorized_loops > 0)\n     {\n@@ -1427,8 +1431,13 @@ pass_slp_vectorize::execute (function *fun)\n \t}\n     }\n \n+  slp_tree_pool = new object_allocator<_slp_tree> (\"SLP nodes for slp\");\n+\n   vect_slp_function (fun);\n \n+  delete slp_tree_pool;\n+  slp_tree_pool = NULL;\n+\n   if (!in_loop_pipeline)\n     {\n       scev_finalize ();"}, {"sha": "9c55383a3ee44cb7f7bf3dcceaff5f323268619e", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/83220838dd6f7701ca264347c934b12de7703b42/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/83220838dd6f7701ca264347c934b12de7703b42/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=83220838dd6f7701ca264347c934b12de7703b42", "patch": "@@ -26,6 +26,7 @@ typedef class _stmt_vec_info *stmt_vec_info;\n #include \"tree-data-ref.h\"\n #include \"tree-hash-traits.h\"\n #include \"target.h\"\n+#include \"alloc-pool.h\"\n \n \n /* Used for naming of new temporaries.  */\n@@ -115,6 +116,8 @@ typedef hash_map<tree_operand_hash,\n  ************************************************************************/\n typedef struct _slp_tree *slp_tree;\n \n+extern object_allocator<_slp_tree> *slp_tree_pool;\n+\n /* A computation tree of an SLP instance.  Each node corresponds to a group of\n    stmts to be packed in a SIMD stmt.  */\n struct _slp_tree {\n@@ -163,6 +166,12 @@ struct _slp_tree {\n   enum tree_code code;\n \n   int vertex;\n+\n+  /* Allocate from slp_tree_pool.  */\n+  static void *operator new (size_t);\n+\n+  /* Return memory to slp_tree_pool.  */\n+  static void operator delete (void *, size_t);\n };\n \n "}]}