{"sha": "8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGNlNmZiNWZlYzYwZjBjZTYzNjNkMmE0MWYzMGU1ZmM2MjBhNGJlYg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-06-06T07:32:44Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-06-06T07:32:44Z"}, "message": "vr-values.c (vr_values::extract_range_from_ssa_name): Do not put equivalences on UNDEFINED ranges.\n\n2019-06-06  Richard Biener  <rguenther@suse.de>\n\n\t* vr-values.c (vr_values::extract_range_from_ssa_name): Do not\n\tput equivalences on UNDEFINED ranges.\n\t* gimple-ssa-evrp.c (evrp_dom_walker::before_dom_children):\n\tMake sure to drop defs of stmts added during simplification\n\tto VARYING.\n\nFrom-SVN: r271990", "tree": {"sha": "7394a568931edeb98af3a8d7ae2e512a1ee71833", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7394a568931edeb98af3a8d7ae2e512a1ee71833"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ed315c041f48f491d6310fe83810bb93cc3e5d17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed315c041f48f491d6310fe83810bb93cc3e5d17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed315c041f48f491d6310fe83810bb93cc3e5d17"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "84c01ce3836bd5ac3b07c18cbef067f1681dda16", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb", "patch": "@@ -1,3 +1,11 @@\n+2019-06-06  Richard Biener  <rguenther@suse.de>\n+\n+\t* vr-values.c (vr_values::extract_range_from_ssa_name): Do not\n+\tput equivalences on UNDEFINED ranges.\n+\t* gimple-ssa-evrp.c (evrp_dom_walker::before_dom_children):\n+\tMake sure to drop defs of stmts added during simplification\n+\tto VARYING.\n+\n 2019-06-06  Richard Biener  <rguenther@suse.de>\n \n \t* tree-ssa-structalias.c: Include tree-cfg.h."}, {"sha": "16a8f7ffc23c0c703f6b9263cc0ac5735a50db86", "filename": "gcc/gimple-ssa-evrp.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb/gcc%2Fgimple-ssa-evrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb/gcc%2Fgimple-ssa-evrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-evrp.c?ref=8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb", "patch": "@@ -175,6 +175,8 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \n       /* Try folding stmts with the VR discovered.  */\n       bool did_replace = evrp_folder.replace_uses_in (stmt);\n+      gimple_stmt_iterator prev_gsi = gsi;\n+      gsi_prev (&prev_gsi);\n       if (fold_stmt (&gsi, follow_single_use_edges)\n \t  || did_replace)\n \t{\n@@ -191,6 +193,21 @@ evrp_dom_walker::before_dom_children (basic_block bb)\n \n       if (did_replace)\n \t{\n+\t  /* If we wound up generating new stmts during folding\n+\t     drop all their defs to VARYING.  We can't easily\n+\t     process them because we've already instantiated\n+\t     ranges on uses on STMT that only hold after it.  */\n+\t  if (gsi_end_p (prev_gsi))\n+\t    prev_gsi = gsi_start_bb (bb);\n+\t  else\n+\t    gsi_next (&prev_gsi);\n+\t  while (gsi_stmt (prev_gsi) != gsi_stmt (gsi))\n+\t    {\n+\t      evrp_range_analyzer.get_vr_values ()\n+\t\t->set_defs_to_varying (gsi_stmt (prev_gsi));\n+\t      gsi_next (&prev_gsi);\n+\t    }\n+\n \t  /* If we cleaned up EH information from the statement,\n \t     remove EH edges.  */\n \t  if (maybe_clean_or_replace_eh_stmt (old_stmt, stmt))"}, {"sha": "9e58cbf7b2a08346ac50bc15d30d53c776779e1c", "filename": "gcc/vr-values.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb/gcc%2Fvr-values.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb/gcc%2Fvr-values.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvr-values.c?ref=8ce6fb5fec60f0ce6363d2a41f30e5fc620a4beb", "patch": "@@ -719,7 +719,8 @@ vr_values::extract_range_from_ssa_name (value_range *vr, tree var)\n   else\n     vr->set (var);\n \n-  vr->equiv_add (var, get_value_range (var), &vrp_equiv_obstack);\n+  if (!vr->undefined_p ())\n+    vr->equiv_add (var, get_value_range (var), &vrp_equiv_obstack);\n }\n \n /* Extract range information from a binary expression OP0 CODE OP1 based on"}]}