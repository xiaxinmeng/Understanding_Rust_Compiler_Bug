{"sha": "530e90952574febf1fa51639b08bd6b3f188b0b0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMwZTkwOTUyNTc0ZmViZjFmYTUxNjM5YjA4YmQ2YjNmMTg4YjBiMA==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2020-05-26T19:13:29Z"}, "committer": {"name": "Carl Love", "email": "carll@us.ibm.com", "date": "2020-08-05T04:09:58Z"}, "message": "rs6000 Add vector insert builtin support\n\nGCC maintainers:\n\nThis patch adds support for vec_insertl and vec_inserth builtins.\n\nThe patch has been compiled and tested on\n\n  powerpc64le-unknown-linux-gnu (Power 8 LE)\n  powerpc64le-unknown-linux-gnu (Power 9 LE)\n\nand mambo with no regression errors.\n\nPlease let me know if this patch is acceptable for the mainline branch.\n\nThanks.\n\n                         Carl Love\n\n--------------------------------------------------------------\ngcc/ChangeLog\n\n\t    2020-08-04  Carl Love  <cel@us.ibm.com>\n\n\t* config/rs6000/altivec.h (vec_insertl, vec_inserth): New defines.\n\t* config/rs6000/rs6000-builtin.def (VINSERTGPRBL, VINSERTGPRHL,\n\tVINSERTGPRWL, VINSERTGPRDL, VINSERTVPRBL, VINSERTVPRHL, VINSERTVPRWL,\n\tVINSERTGPRBR, VINSERTGPRHR, VINSERTGPRWR, VINSERTGPRDR, VINSERTVPRBR,\n\tVINSERTVPRHR, VINSERTVPRWR): New builtins.\n\t(INSERTL, INSERTH): New builtins.\n\t* config/rs6000/rs6000-call.c (P10_BUILTIN_VEC_INSERTL,\n\tP10_BUILTIN_VEC_INSERTH): New overloaded definitions.\n\t(P10_BUILTIN_VINSERTGPRBL, P10_BUILTIN_VINSERTGPRHL,\n\tP10_BUILTIN_VINSERTGPRWL, P10_BUILTIN_VINSERTGPRDL,\n\tP10_BUILTIN_VINSERTVPRBL, P10_BUILTIN_VINSERTVPRHL,\n\tP10_BUILTIN_VINSERTVPRWL): Add case entries.\n\t* config/rs6000/vsx.md (define_c_enum): Add UNSPEC_INSERTL,\n\tUNSPEC_INSERTR.\n\t(define_expand): Add vinsertvl_<mode>, vinsertvr_<mode>,\n\tvinsertgl_<mode>, vinsertgr_<mode>, mode is VI2.\n\t(define_ins): vinsertvl_internal_<mode>, vinsertvr_internal_<mode>,\n\tvinsertgl_internal_<mode>, vinsertgr_internal_<mode>, mode VEC_I.\n\t* doc/extend.texi: Add documentation for vec_insertl, vec_inserth.\n\ngcc/testsuite/ChangeLog\n\n\t    2020-08-04  Carl Love  <cel@us.ibm.com>\n\n\t* gcc.target/powerpc/vec-insert-word-runnable.c: New test case.", "tree": {"sha": "3d728a2340192aa982c62ad02e440dde65c743ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3d728a2340192aa982c62ad02e440dde65c743ce"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/530e90952574febf1fa51639b08bd6b3f188b0b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530e90952574febf1fa51639b08bd6b3f188b0b0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/530e90952574febf1fa51639b08bd6b3f188b0b0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530e90952574febf1fa51639b08bd6b3f188b0b0/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "30d02149ea4baeea9045e07354a152a68e120fec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30d02149ea4baeea9045e07354a152a68e120fec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30d02149ea4baeea9045e07354a152a68e120fec"}], "stats": {"total": 595, "additions": 595, "deletions": 0}, "files": [{"sha": "7ba28780923f0d426160c2b1c80dfe0c7cb23b50", "filename": "gcc/config/rs6000/altivec.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530e90952574febf1fa51639b08bd6b3f188b0b0/gcc%2Fconfig%2Frs6000%2Faltivec.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530e90952574febf1fa51639b08bd6b3f188b0b0/gcc%2Fconfig%2Frs6000%2Faltivec.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.h?ref=530e90952574febf1fa51639b08bd6b3f188b0b0", "patch": "@@ -703,6 +703,8 @@ __altivec_scalar_pred(vec_any_nle,\n /* Overloaded built-in functions for ISA 3.1.  */\n #define vec_extractl(a, b, c)\t__builtin_vec_extractl (a, b, c)\n #define vec_extracth(a, b, c)\t__builtin_vec_extracth (a, b, c)\n+#define vec_insertl(a, b, c)   __builtin_vec_insertl (a, b, c)\n+#define vec_inserth(a, b, c)   __builtin_vec_inserth (a, b, c)\n \n #define vec_gnb(a, b)\t__builtin_vec_gnb (a, b)\n #define vec_clrl(a, b)\t__builtin_vec_clrl (a, b)"}, {"sha": "50a885cff104683005953124c4992c4a187d3da5", "filename": "gcc/config/rs6000/rs6000-builtin.def", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530e90952574febf1fa51639b08bd6b3f188b0b0/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530e90952574febf1fa51639b08bd6b3f188b0b0/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-builtin.def?ref=530e90952574febf1fa51639b08bd6b3f188b0b0", "patch": "@@ -2734,6 +2734,22 @@ BU_P10V_3 (VEXTRACTHR, \"vextduhvhx\", CONST, vextractrv8hi)\n BU_P10V_3 (VEXTRACTWR, \"vextduwvhx\", CONST, vextractrv4si)\n BU_P10V_3 (VEXTRACTDR, \"vextddvhx\", CONST, vextractrv2di)\n \n+BU_P10V_3 (VINSERTGPRBL, \"vinsgubvlx\", CONST, vinsertgl_v16qi)\n+BU_P10V_3 (VINSERTGPRHL, \"vinsguhvlx\", CONST, vinsertgl_v8hi)\n+BU_P10V_3 (VINSERTGPRWL, \"vinsguwvlx\", CONST, vinsertgl_v4si)\n+BU_P10V_3 (VINSERTGPRDL, \"vinsgudvlx\", CONST, vinsertgl_v2di)\n+BU_P10V_3 (VINSERTVPRBL, \"vinsvubvlx\", CONST, vinsertvl_v16qi)\n+BU_P10V_3 (VINSERTVPRHL, \"vinsvuhvlx\", CONST, vinsertvl_v8hi)\n+BU_P10V_3 (VINSERTVPRWL, \"vinsvuwvlx\", CONST, vinsertvl_v4si)\n+\n+BU_P10V_3 (VINSERTGPRBR, \"vinsgubvrx\", CONST, vinsertgr_v16qi)\n+BU_P10V_3 (VINSERTGPRHR, \"vinsguhvrx\", CONST, vinsertgr_v8hi)\n+BU_P10V_3 (VINSERTGPRWR, \"vinsguwvrx\", CONST, vinsertgr_v4si)\n+BU_P10V_3 (VINSERTGPRDR, \"vinsgudvrx\", CONST, vinsertgr_v2di)\n+BU_P10V_3 (VINSERTVPRBR, \"vinsvubvrx\", CONST, vinsertvr_v16qi)\n+BU_P10V_3 (VINSERTVPRHR, \"vinsvuhvrx\", CONST, vinsertvr_v8hi)\n+BU_P10V_3 (VINSERTVPRWR, \"vinsvuwvrx\", CONST, vinsertvr_v4si)\n+\n BU_P10V_1 (VSTRIBR, \"vstribr\", CONST, vstrir_v16qi)\n BU_P10V_1 (VSTRIHR, \"vstrihr\", CONST, vstrir_v8hi)\n BU_P10V_1 (VSTRIBL, \"vstribl\", CONST, vstril_v16qi)\n@@ -2776,6 +2792,8 @@ BU_P10_OVERLOAD_2 (XXGENPCVM, \"xxgenpcvm\")\n \n BU_P10_OVERLOAD_3 (EXTRACTL, \"extractl\")\n BU_P10_OVERLOAD_3 (EXTRACTH, \"extracth\")\n+BU_P10_OVERLOAD_3 (INSERTL, \"insertl\")\n+BU_P10_OVERLOAD_3 (INSERTH, \"inserth\")\n \n BU_P10_OVERLOAD_1 (VSTRIR, \"strir\")\n BU_P10_OVERLOAD_1 (VSTRIL, \"stril\")"}, {"sha": "574f7182936d04d57ae215500b0a360ec69fd389", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530e90952574febf1fa51639b08bd6b3f188b0b0/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530e90952574febf1fa51639b08bd6b3f188b0b0/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=530e90952574febf1fa51639b08bd6b3f188b0b0", "patch": "@@ -5582,6 +5582,28 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTQI },\n \n+  { P10_BUILTIN_VEC_INSERTL, P10_BUILTIN_VINSERTGPRBL,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTSI },\n+  { P10_BUILTIN_VEC_INSERTL, P10_BUILTIN_VINSERTGPRHL,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTHI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTSI },\n+  { P10_BUILTIN_VEC_INSERTL, P10_BUILTIN_VINSERTGPRWL,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTSI },\n+  { P10_BUILTIN_VEC_INSERTL, P10_BUILTIN_VINSERTGPRDL,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTDI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTSI },\n+ { P10_BUILTIN_VEC_INSERTL, P10_BUILTIN_VINSERTVPRBL,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_INSERTL, P10_BUILTIN_VINSERTVPRHL,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_INSERTL, P10_BUILTIN_VINSERTVPRWL,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTQI },\n+\n   { P10_BUILTIN_VEC_EXTRACTH, P10_BUILTIN_VEXTRACTBR,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI },\n@@ -5595,6 +5617,28 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTQI },\n \n+  { P10_BUILTIN_VEC_INSERTH, P10_BUILTIN_VINSERTGPRBR,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTSI },\n+  { P10_BUILTIN_VEC_INSERTH, P10_BUILTIN_VINSERTGPRHR,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTHI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTSI },\n+  { P10_BUILTIN_VEC_INSERTH, P10_BUILTIN_VINSERTGPRWR,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTSI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTSI },\n+  { P10_BUILTIN_VEC_INSERTH, P10_BUILTIN_VINSERTGPRDR,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTDI,\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_UINTSI },\n+  { P10_BUILTIN_VEC_INSERTH, P10_BUILTIN_VINSERTVPRBR,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_INSERTH, P10_BUILTIN_VINSERTVPRHR,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_UINTQI },\n+  { P10_BUILTIN_VEC_INSERTH, P10_BUILTIN_VINSERTVPRWR,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_UINTQI },\n+\n   { P10_BUILTIN_VEC_VSTRIL, P10_BUILTIN_VSTRIBL,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0, 0 },\n   { P10_BUILTIN_VEC_VSTRIL, P10_BUILTIN_VSTRIBL,\n@@ -13861,6 +13905,13 @@ builtin_function_type (machine_mode mode_ret, machine_mode mode_arg0,\n     case P10_BUILTIN_VEXTRACTHR:\n     case P10_BUILTIN_VEXTRACTWR:\n     case P10_BUILTIN_VEXTRACTDR:\n+    case P10_BUILTIN_VINSERTGPRBL:\n+    case P10_BUILTIN_VINSERTGPRHL:\n+    case P10_BUILTIN_VINSERTGPRWL:\n+    case P10_BUILTIN_VINSERTGPRDL:\n+    case P10_BUILTIN_VINSERTVPRBL:\n+    case P10_BUILTIN_VINSERTVPRHL:\n+    case P10_BUILTIN_VINSERTVPRWL:\n       h.uns_p[0] = 1;\n       h.uns_p[1] = 1;\n       h.uns_p[2] = 1;"}, {"sha": "626ba7825d407d0ae4ae00305de8fefbd0a7e189", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530e90952574febf1fa51639b08bd6b3f188b0b0/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530e90952574febf1fa51639b08bd6b3f188b0b0/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=530e90952574febf1fa51639b08bd6b3f188b0b0", "patch": "@@ -357,6 +357,8 @@\n    UNSPEC_VEXTRACT\n    UNSPEC_EXTRACTL\n    UNSPEC_EXTRACTR\n+   UNSPEC_INSERTL\n+   UNSPEC_INSERTR\n   ])\n \n (define_int_iterator XVCVBF16\t[UNSPEC_VSX_XVCVSPBF16\n@@ -3912,6 +3914,114 @@\n   \"vext<du_or_d><wd>vrx %0,%1,%2,%3\"\n   [(set_attr \"type\" \"vecsimple\")])\n \n+(define_expand \"vinsertvl_<mode>\"\n+  [(set (match_operand:VI2 0 \"altivec_register_operand\")\n+\t(unspec:VI2 [(match_operand:VI2 1 \"altivec_register_operand\")\n+\t\t     (match_operand:VI2 2 \"altivec_register_operand\")\n+\t\t     (match_operand:SI 3 \"register_operand\" \"r\")]\n+\t\t    UNSPEC_INSERTL))]\n+  \"TARGET_POWER10\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+     emit_insn (gen_vinsertvl_internal_<mode> (operands[0], operands[3],\n+                                               operands[1], operands[2]));\n+   else\n+     emit_insn (gen_vinsertvr_internal_<mode> (operands[0], operands[3],\n+                                               operands[1], operands[2]));\n+   DONE;\n+})\n+\n+(define_insn \"vinsertvl_internal_<mode>\"\n+  [(set (match_operand:VEC_I 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:VEC_I [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t       (match_operand:VEC_I 2 \"altivec_register_operand\" \"v\")\n+\t\t       (match_operand:VEC_I 3 \"altivec_register_operand\" \"0\")]\n+\t\t      UNSPEC_INSERTL))]\n+  \"TARGET_POWER10\"\n+  \"vins<wd>vlx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"vinsertvr_<mode>\"\n+  [(set (match_operand:VI2 0 \"altivec_register_operand\")\n+\t(unspec:VI2 [(match_operand:VI2 1 \"altivec_register_operand\")\n+\t\t     (match_operand:VI2 2 \"altivec_register_operand\")\n+\t\t     (match_operand:SI 3 \"register_operand\" \"r\")]\n+\t\t    UNSPEC_INSERTR))]\n+  \"TARGET_POWER10\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+     emit_insn (gen_vinsertvr_internal_<mode> (operands[0], operands[3],\n+                                               operands[1], operands[2]));\n+   else\n+     emit_insn (gen_vinsertvl_internal_<mode> (operands[0], operands[3],\n+                                               operands[1], operands[2]));\n+   DONE;\n+})\n+\n+(define_insn \"vinsertvr_internal_<mode>\"\n+  [(set (match_operand:VEC_I 0 \"altivec_register_operand\" \"=v\")\n+\t(unspec:VEC_I [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t       (match_operand:VEC_I 2 \"altivec_register_operand\" \"v\")\n+\t\t       (match_operand:VEC_I 3 \"altivec_register_operand\" \"0\")]\n+\t\t      UNSPEC_INSERTR))]\n+  \"TARGET_POWER10\"\n+  \"vins<wd>vrx %0,%1,%2\"\n+  [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"vinsertgl_<mode>\"\n+  [(set (match_operand:VI2 0 \"altivec_register_operand\")\n+\t(unspec:VI2 [(match_operand:SI 1 \"register_operand\")\n+\t\t     (match_operand:VI2 2 \"altivec_register_operand\")\n+\t\t     (match_operand:SI 3 \"register_operand\")]\n+\t\t    UNSPEC_INSERTL))]\n+  \"TARGET_POWER10\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vinsertgl_internal_<mode> (operands[0], operands[3],\n+                                            operands[1], operands[2]));\n+  else\n+    emit_insn (gen_vinsertgr_internal_<mode> (operands[0], operands[3],\n+                                            operands[1], operands[2]));\n+  DONE;\n+ })\n+\n+(define_insn \"vinsertgl_internal_<mode>\"\n+ [(set (match_operand:VEC_I 0 \"altivec_register_operand\" \"=v\")\n+       (unspec:VEC_I [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t      (match_operand:VEC_I 3 \"altivec_register_operand\" \"0\")]\n+\t\t     UNSPEC_INSERTL))]\n+ \"TARGET_POWER10\"\n+ \"vins<wd>lx %0,%1,%2\"\n+ [(set_attr \"type\" \"vecsimple\")])\n+\n+(define_expand \"vinsertgr_<mode>\"\n+  [(set (match_operand:VI2 0 \"altivec_register_operand\")\n+\t(unspec:VI2 [(match_operand:SI 1 \"register_operand\")\n+\t\t     (match_operand:VI2 2 \"altivec_register_operand\")\n+\t\t     (match_operand:SI 3 \"register_operand\")]\n+\t\t    UNSPEC_INSERTR))]\n+  \"TARGET_POWER10\"\n+{\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_vinsertgr_internal_<mode> (operands[0], operands[3],\n+                                            operands[1], operands[2]));\n+  else\n+    emit_insn (gen_vinsertgl_internal_<mode> (operands[0], operands[3],\n+                                            operands[1], operands[2]));\n+  DONE;\n+ })\n+\n+(define_insn \"vinsertgr_internal_<mode>\"\n+ [(set (match_operand:VEC_I 0 \"altivec_register_operand\" \"=v\")\n+   (unspec:VEC_I [(match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t  (match_operand:SI 2 \"register_operand\" \"r\")\n+\t\t  (match_operand:VEC_I 3 \"altivec_register_operand\" \"0\")]\n+\t\t UNSPEC_INSERTR))]\n+ \"TARGET_POWER10\"\n+ \"vins<wd>rx %0,%1,%2\"\n+ [(set_attr \"type\" \"vecsimple\")])\n+\n ;; VSX_EXTRACT optimizations\n ;; Optimize double d = (double) vec_extract (vi, <n>)\n ;; Get the element into the top position and use XVCVSWDP/XVCVUWDP"}, {"sha": "035c38c1d7770ca66e058fad1224d2b981e23732", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530e90952574febf1fa51639b08bd6b3f188b0b0/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530e90952574febf1fa51639b08bd6b3f188b0b0/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=530e90952574febf1fa51639b08bd6b3f188b0b0", "patch": "@@ -21021,6 +21021,75 @@ Perform a vector parallel bits deposit operation, as if implemented by\n the @code{vpdepd} instruction.\n @findex vec_pdep\n \n+Vector Insert\n+\n+@smallexample\n+@exdent vector unsigned char\n+@exdent vec_insertl (unsigned char, vector unsigned char, unsigned int);\n+@exdent vector unsigned short\n+@exdent vec_insertl (unsigned short, vector unsigned short, unsigned int);\n+@exdent vector unsigned int\n+@exdent vec_insertl (unsigned int, vector unsigned int, unsigned int);\n+@exdent vector unsigned long long\n+@exdent vec_insertl (unsigned long long, vector unsigned long long,\n+unsigned int);\n+@exdent vector unsigned char\n+@exdent vec_insertl (vector unsigned char, vector unsigned char, unsigned int;\n+@exdent vector unsigned short\n+@exdent vec_insertl (vector unsigned short, vector unsigned short,\n+unsigned int);\n+@exdent vector unsigned int\n+@exdent vec_insertl (vector unsigned int, vector unsigned int, unsigned int);\n+@end smallexample\n+\n+Let src be the first argument, when the first argument is a scalar, or the\n+rightmost element of the left doubleword of the first argument, when the first\n+argument is a vector.  Insert the source into the destination at the position\n+given by the third argument, using natural element order in the second\n+argument.  The rest of the second argument is unchanged.  If the byte\n+index is greater than 14 for halfwords, greater than 12 for words, or\n+greater than 8 for doublewords the result is undefined.   For little-endian,\n+the generated code will be semantically equivalent to @code{vins[bhw]rx}\n+instructions.  Similarly for big-endian it will be semantically equivalent\n+to @code{vins[bhw]lx}.  Note that some fairly anomalous results can be\n+generated if the byte index is not aligned on an element boundary for the\n+type of element being inserted.\n+@findex vec_insertl\n+\n+@smallexample\n+@exdent vector unsigned char\n+@exdent vec_inserth (unsigned char, vector unsigned char, unsigned int);\n+@exdent vector unsigned short\n+@exdent vec_inserth (unsigned short, vector unsigned short, unsigned int);\n+@exdent vector unsigned int\n+@exdent vec_inserth (unsigned int, vector unsigned int, unsigned int);\n+@exdent vector unsigned long long\n+@exdent vec_inserth (unsigned long long, vector unsigned long long,\n+unsigned int);\n+@exdent vector unsigned char\n+@exdent vec_inserth (vector unsigned char, vector unsigned char, unsigned int);\n+@exdent vector unsigned short\n+@exdent vec_inserth (vector unsigned short, vector unsigned short,\n+unsigned int);\n+@exdent vector unsigned int\n+@exdent vec_inserth (vector unsigned int, vector unsigned int, unsigned int);\n+@end smallexample\n+\n+Let src be the first argument, when the first argument is a scalar, or the\n+rightmost element of the first argument, when the first argument is a vector.\n+Insert src into the second argument at the position identified by the third\n+argument, using opposite element order in the second argument, and leaving the\n+rest of the second argument unchanged.  If the byte index is greater than 14\n+for halfwords, 12 for words, or 8 for doublewords, the intrinsic will be\n+rejected. Note that the underlying hardware instruction uses the same register\n+for the second argument and the result.\n+For little-endian, the code generation will be semantically equivalent to\n+@code{vins[bhw]lx}, while for big-endian it will be semantically equivalent to\n+@code{vins[bhw]rx}.\n+Note that some fairly anomalous results can be generated if the byte index is\n+not aligned on an element boundary for the sort of element being inserted.\n+@findex vec_inserth\n+\n @smallexample\n @exdent vector unsigned long long int\n @exdent vec_pext (vector unsigned long long int, vector unsigned long long int)"}, {"sha": "8c2721aedfc6d72320b49cc1ff617481493fe113", "filename": "gcc/testsuite/gcc.target/powerpc/vec-insert-word-runnable.c", "status": "added", "additions": 345, "deletions": 0, "changes": 345, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530e90952574febf1fa51639b08bd6b3f188b0b0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-insert-word-runnable.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530e90952574febf1fa51639b08bd6b3f188b0b0/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-insert-word-runnable.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvec-insert-word-runnable.c?ref=530e90952574febf1fa51639b08bd6b3f188b0b0", "patch": "@@ -0,0 +1,345 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target power10_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power10\" } */\n+#include <altivec.h>\n+\n+#define DEBUG 0\n+\n+#ifdef DEBUG\n+#include <stdio.h>\n+#endif\n+\n+extern void abort (void);\n+\n+int\n+main (int argc, char *argv [])\n+{\n+  int i;\n+  unsigned int index;\n+  vector unsigned char vresult_ch;\n+  vector unsigned char expected_vresult_ch;\n+  vector unsigned char src_va_ch;\n+  vector unsigned char src_vb_ch;\n+  unsigned char src_a_ch;\n+\n+  vector unsigned short vresult_sh;\n+  vector unsigned short expected_vresult_sh;\n+  vector unsigned short src_va_sh;\n+  vector unsigned short src_vb_sh;\n+  unsigned short int src_a_sh;\n+\n+  vector unsigned int vresult_int;\n+  vector unsigned int expected_vresult_int;\n+  vector unsigned int src_va_int;\n+  vector unsigned int src_vb_int;\n+  unsigned int src_a_int;\n+  \n+  vector unsigned long long vresult_ll;\n+  vector unsigned long long expected_vresult_ll;\n+  vector unsigned long long src_va_ll;\n+  unsigned long long int src_a_ll;\n+\n+  /* Vector insert, low index, from GPR */\n+  src_a_ch = 79;\n+  index = 2;\n+  src_va_ch = (vector unsigned char) { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t       8, 9, 10, 11, 12, 13, 14, 15 };\n+  vresult_ch = (vector unsigned char) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_ch = (vector unsigned char) { 0, 1, 79, 3, 4, 5, 6, 7,\n+\t\t\t\t       8, 9, 10, 11, 12, 13, 14, 15 };\n+\t\t\t\t\t\t \n+    vresult_ch = vec_insertl (src_a_ch, src_va_ch, index);\n+\n+  if (!vec_all_eq (vresult_ch,  expected_vresult_ch)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_insertl (src_a_ch, src_va_ch, index)\\n\");\n+    for(i = 0; i < 16; i++)\n+      printf(\" vresult_ch[%d] = %d, expected_vresult_ch[%d] = %d\\n\",\n+\t     i, vresult_ch[i], i, expected_vresult_ch[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_a_sh = 79;\n+  index = 10;\n+  src_va_sh = (vector unsigned short int) { 0, 1, 2, 3, 4, 5, 6, 7 };\n+  vresult_sh = (vector unsigned short int) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_sh = (vector unsigned short int) { 0, 1, 2, 3,\n+\t\t\t\t\t\t      4, 79, 6, 7 };\n+\n+  vresult_sh = vec_insertl (src_a_sh, src_va_sh, index);\n+\n+  if (!vec_all_eq (vresult_sh,  expected_vresult_sh)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_insertl (src_a_sh, src_va_sh, index)\\n\");\n+    for(i = 0; i < 8; i++)\n+      printf(\" vresult_sh[%d] = %d, expected_vresult_sh[%d] = %d\\n\",\n+\t     i, vresult_sh[i], i, expected_vresult_sh[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_a_int = 79;\n+  index = 8;\n+  src_va_int = (vector unsigned int) { 0, 1, 2, 3 };\n+  vresult_int = (vector unsigned int) { 0, 0, 0, 0 };\n+  expected_vresult_int = (vector unsigned int) { 0, 1, 79, 3 };\n+\n+  vresult_int = vec_insertl (src_a_int, src_va_int, index);\n+\n+  if (!vec_all_eq (vresult_int,  expected_vresult_int)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_insertl (src_a_int, src_va_int, index)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_int[%d] = %d, expected_vresult_int[%d] = %d\\n\",\n+\t     i, vresult_int[i], i, expected_vresult_int[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_a_ll = 79;\n+  index = 8;\n+  src_va_ll = (vector unsigned long long) { 0, 1 };\n+  vresult_ll = (vector unsigned long long) { 0, 0 };\n+  expected_vresult_ll = (vector unsigned long long) { 0, 79 };\n+\n+  vresult_ll = vec_insertl (src_a_ll, src_va_ll, index);\n+\n+  if (!vec_all_eq (vresult_ll,  expected_vresult_ll)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_insertl (src_a_ll, src_va_ll, index)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_ll[%d] = %d, expected_vresult_ll[%d] = %d\\n\",\n+\t     i, vresult_ll[i], i, expected_vresult_ll[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  /* Vector insert, low index, from vector */\n+  index = 2;\n+  src_va_ch = (vector unsigned char) { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t       8, 9, 10, 11, 12, 13, 14, 15 };\n+  src_vb_ch = (vector unsigned char) { 10, 11, 12, 13, 14, 15, 16, 17,\n+\t\t\t\t       18, 19, 20, 21, 22, 23, 24, 25 };\n+  vresult_ch = (vector unsigned char) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_ch = (vector unsigned char) { 0, 1, 18, 3, 4, 5, 6, 7,\n+\t\t\t\t       8, 9, 10, 11, 12, 13, 14, 15 };\n+\t\t\t\t\t\t \n+  vresult_ch = vec_insertl (src_vb_ch, src_va_ch, index);\n+\n+  if (!vec_all_eq (vresult_ch,  expected_vresult_ch)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_insertl (src_vb_ch, src_va_ch, index)\\n\");\n+    for(i = 0; i < 16; i++)\n+      printf(\" vresult_ch[%d] = %d, expected_vresult_ch[%d] = %d\\n\",\n+\t     i, vresult_ch[i], i, expected_vresult_ch[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  index = 4;\n+  src_va_sh = (vector unsigned short) { 0, 1, 2, 3, 4, 5, 6, 7 };\n+  src_vb_sh = (vector unsigned short) { 10, 11, 12, 13, 14, 15, 16, 17 };\n+  vresult_sh = (vector unsigned short) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_sh = (vector unsigned short) { 0, 1, 14, 3, 4, 5, 6, 7 };\n+\t\t\t\t\t\t \n+  vresult_sh = vec_insertl (src_vb_sh, src_va_sh, index);\n+\n+  if (!vec_all_eq (vresult_sh,  expected_vresult_sh)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_insertl (src_vb_sh, src_va_sh, index)\\n\");\n+    for(i = 0; i < 8; i++)\n+      printf(\" vresult_sh[%d] = %d, expected_vresult_sh[%d] = %d\\n\",\n+\t     i, vresult_sh[i], i, expected_vresult_sh[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  index = 8;\n+  src_va_int = (vector unsigned int) { 0, 1, 2, 3 };\n+  src_vb_int = (vector unsigned int) { 10, 11, 12, 13 };\n+  vresult_int = (vector unsigned int) { 0, 0, 0, 0 };\n+  expected_vresult_int = (vector unsigned int) { 0, 1, 12, 3 };\n+\t\t\t\t\t\t \n+  vresult_int = vec_insertl (src_vb_int, src_va_int, index);\n+\n+  if (!vec_all_eq (vresult_int,  expected_vresult_int)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_insertl (src_vb_int, src_va_int, index)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_int[%d] = %d, expected_vresult_int[%d] = %d\\n\",\n+\t     i, vresult_int[i], i, expected_vresult_int[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  /* Vector insert, high index, from GPR */\n+  src_a_ch = 79;\n+  index = 2;\n+  src_va_ch = (vector unsigned char) { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t       8, 9, 10, 11, 12, 13, 14, 15 };\n+  vresult_ch = (vector unsigned char) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_ch = (vector unsigned char) { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t       8, 9, 10, 11, 12, 79, 14, 15 };\n+\t\t\t\t\t\t \n+    vresult_ch = vec_inserth (src_a_ch, src_va_ch, index);\n+\n+  if (!vec_all_eq (vresult_ch,  expected_vresult_ch)) {\n+#if DEBUG\n+   printf(\"ERROR, vec_inserth (src_a_ch, src_va_ch, index)\\n\");\n+    for(i = 0; i < 16; i++)\n+      printf(\" vresult_ch[%d] = %d, expected_vresult_ch[%d] = %d\\n\",\n+\t     i, vresult_ch[i], i, expected_vresult_ch[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_a_sh = 79;\n+  index = 10;\n+  src_va_sh = (vector unsigned short int) { 0, 1, 2, 3, 4, 5, 6, 7 };\n+  vresult_sh = (vector unsigned short int) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_sh = (vector unsigned short int) { 0, 1, 79, 3,\n+\t\t\t\t\t\t      4, 5, 6, 7 };\n+\n+  vresult_sh = vec_inserth (src_a_sh, src_va_sh, index);\n+\n+  if (!vec_all_eq (vresult_sh,  expected_vresult_sh)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_inserth (src_a_sh, src_va_sh, index)\\n\");\n+    for(i = 0; i < 8; i++)\n+      printf(\" vresult_sh[%d] = %d, expected_vresult_sh[%d] = %d\\n\",\n+\t     i, vresult_sh[i], i, expected_vresult_sh[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_a_int = 79;\n+  index = 8;\n+  src_va_int = (vector unsigned int) { 0, 1, 2, 3 };\n+  vresult_int = (vector unsigned int) { 0, 0, 0, 0 };\n+  expected_vresult_int = (vector unsigned int) { 0, 79, 2, 3 };\n+\n+  vresult_int = vec_inserth (src_a_int, src_va_int, index);\n+\n+  if (!vec_all_eq (vresult_int,  expected_vresult_int)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_inserth (src_a_int, src_va_int, index)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_int[%d] = %d, expected_vresult_int[%d] = %d\\n\",\n+\t     i, vresult_int[i], i, expected_vresult_int[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  src_a_ll = 79;\n+  index = 8;\n+  src_va_ll = (vector unsigned long long) { 0, 1 };\n+  vresult_ll = (vector unsigned long long) { 0, 0 };\n+  expected_vresult_ll = (vector unsigned long long) { 79, 1 };\n+\n+  vresult_ll = vec_inserth (src_a_ll, src_va_ll, index);\n+\n+  if (!vec_all_eq (vresult_ll,  expected_vresult_ll)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_inserth (src_a_ll, src_va_ll, index)\\n\");\n+    for(i = 0; i < 2; i++)\n+      printf(\" vresult_ll[%d] = %d, expected_vresult_ll[%d] = %d\\n\",\n+\t     i, vresult_ll[i], i, expected_vresult_ll[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  /* Vector insert, left index, from vector */\n+  index = 2;\n+  src_va_ch = (vector unsigned char) { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t       8, 9, 10, 11, 12, 13, 14, 15 };\n+  src_vb_ch = (vector unsigned char) { 10, 11, 12, 13, 14, 15, 16, 17,\n+\t\t\t\t       18, 19, 20, 21, 22, 23, 24, 25 };\n+  vresult_ch = (vector unsigned char) { 0, 0, 0, 0, 0, 0, 0, 0,\n+\t\t\t\t\t0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_ch = (vector unsigned char) { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t\t       8, 9, 10, 11, 12, 18, 14, 15 };\n+\t\t\t\t\t\t \n+  vresult_ch = vec_inserth (src_vb_ch, src_va_ch, index);\n+\n+  if (!vec_all_eq (vresult_ch,  expected_vresult_ch)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_inserth (src_vb_ch, src_va_ch, index)\\n\");\n+    for(i = 0; i < 16; i++)\n+      printf(\" vresult_ch[%d] = %d, expected_vresult_ch[%d] = %d\\n\",\n+\t     i, vresult_ch[i], i, expected_vresult_ch[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  index = 4;\n+  src_va_sh = (vector unsigned short) { 0, 1, 2, 3, 4, 5, 6, 7 };\n+  src_vb_sh = (vector unsigned short) { 10, 11, 12, 13, 14, 15, 16, 17 };\n+  vresult_sh = (vector unsigned short) { 0, 0, 0, 0, 0, 0, 0, 0 };\n+  expected_vresult_sh = (vector unsigned short) { 0, 1, 2, 3, 4, 14, 6, 7 };\n+\t\t\t\t\t\t \n+  vresult_sh = vec_inserth (src_vb_sh, src_va_sh, index);\n+\n+  if (!vec_all_eq (vresult_sh,  expected_vresult_sh)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_inserth (src_vb_sh, src_va_sh, index)\\n\");\n+    for(i = 0; i < 8; i++)\n+      printf(\" vresult_sh[%d] = %d, expected_vresult_sh[%d] = %d\\n\",\n+\t     i, vresult_sh[i], i, expected_vresult_sh[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+\n+  index = 8;\n+  src_va_int = (vector unsigned int) { 0, 1, 2, 3 };\n+  src_vb_int = (vector unsigned int) { 10, 11, 12, 13 };\n+  vresult_int = (vector unsigned int) { 0, 0, 0, 0 };\n+  expected_vresult_int = (vector unsigned int) { 0, 12, 2, 3 };\n+\t\t\t\t\t\t \n+  vresult_int = vec_inserth (src_vb_int, src_va_int, index);\n+\n+  if (!vec_all_eq (vresult_int,  expected_vresult_int)) {\n+#if DEBUG\n+    printf(\"ERROR, vec_inserth (src_vb_int, src_va_int, index)\\n\");\n+    for(i = 0; i < 4; i++)\n+      printf(\" vresult_int[%d] = %d, expected_vresult_int[%d] = %d\\n\",\n+\t     i, vresult_int[i], i, expected_vresult_int[i]);\n+#else\n+    abort();\n+#endif\n+  }\n+  return 0;\n+}\n+\n+/* { dg-final { scan-assembler {\\mvinsblx\\M} } } */\n+/* { dg-final { scan-assembler {\\mvinshlx\\M} } } */\n+/* { dg-final { scan-assembler {\\mvinswlx\\M} } } */\n+/* { dg-final { scan-assembler {\\mvinsdlx\\M} } } */\n+/* { dg-final { scan-assembler {\\mvinsbvlx\\M} } } */\n+/* { dg-final { scan-assembler {\\mvinshvlx\\M} } } */\n+/* { dg-final { scan-assembler {\\mvinswvlx\\M} } } */\n+\n+/* { dg-final { scan-assembler {\\mvinsbrx\\M} } } */\n+/* { dg-final { scan-assembler {\\mvinshrx\\M} } } */\n+/* { dg-final { scan-assembler {\\mvinswrx\\M} } } */\n+/* { dg-final { scan-assembler {\\mvinsdrx\\M} } } */\n+/* { dg-final { scan-assembler {\\mvinsbvrx\\M} } } */\n+/* { dg-final { scan-assembler {\\mvinshvrx\\M} } } */\n+/* { dg-final { scan-assembler {\\mvinswvrx\\M} } } */\n+"}]}