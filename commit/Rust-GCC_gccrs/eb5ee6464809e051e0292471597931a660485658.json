{"sha": "eb5ee6464809e051e0292471597931a660485658", "node_id": "C_kwDOANBUbNoAKGViNWVlNjQ2NDgwOWUwNTFlMDI5MjQ3MTU5NzkzMWE2NjA0ODU2NTg", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-01-20T09:28:26Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-01-21T10:19:07Z"}, "message": "Reset relations when crossing backedges.\n\nAs discussed in PR103721, the problem here is that we are crossing a\nbackedge and causing us to use relations from a previous iteration of a\nloop.\n\nThis handles the testcases in both PR103721 and PR104067 which are variants\nof the same thing.\n\nTested on x86-64 Linux with the usual regstrap as well as verifying the\nthread count before and after the patch.  The number of threads is\nreduced by a miniscule amount.\n\ngcc/ChangeLog:\n\n\tPR tree-optimization/103721\n\t* gimple-range-path.cc\n\t(path_range_query::relations_may_be_invalidated): New.\n\t(path_range_query::compute_ranges_in_block): Reset relations if\n\tthey may be invalidated.\n\t(path_range_query::maybe_register_phi_relation): Exit if relations\n\tmay be invalidated on incoming edge.\n\t(path_range_query::compute_phi_relations): Pass incoming PHI edge\n\tto maybe_register_phi_relation.\n\t* gimple-range-path.h (relations_may_be_invalidated): New.\n\t(maybe_register_phi_relation): Pass edge instead of tree.\n\t* tree-ssa-threadbackward.cc (back_threader::back_threader):\n\tMark DFS edges.\n\t* value-relation.cc (path_oracle::path_oracle): Call\n\tmark_dfs_back_edges.\n\t(path_oracle::register_relation): Add SSA names to m_registered\n\tbitmap.\n\t(path_oracle::reset_path): Clear m_registered bitmap.\n\t* value-relation.h (path_oracle::set_root_oracle): New.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.dg/pr103721-2.c: New test.\n\t* gcc.dg/pr103721.c: New test.", "tree": {"sha": "6c6e3f240670f06d426fed1c8da1266618a4415d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c6e3f240670f06d426fed1c8da1266618a4415d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/eb5ee6464809e051e0292471597931a660485658", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb5ee6464809e051e0292471597931a660485658", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb5ee6464809e051e0292471597931a660485658", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb5ee6464809e051e0292471597931a660485658/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d9159717b474f9c06dde4d32b48b87164deb50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2d9159717b474f9c06dde4d32b48b87164deb50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2d9159717b474f9c06dde4d32b48b87164deb50"}], "stats": {"total": 113, "additions": 104, "deletions": 9}, "files": [{"sha": "3ee4989f4b00623a41eaf746f7c5670bc1bdf0b7", "filename": "gcc/gimple-range-path.cc", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5ee6464809e051e0292471597931a660485658/gcc%2Fgimple-range-path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5ee6464809e051e0292471597931a660485658/gcc%2Fgimple-range-path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.cc?ref=eb5ee6464809e051e0292471597931a660485658", "patch": "@@ -400,6 +400,19 @@ path_range_query::compute_ranges_in_phis (basic_block bb)\n   bitmap_ior_into (m_has_cache_entry, phi_set);\n }\n \n+// Return TRUE if relations may be invalidated after crossing edge E.\n+\n+bool\n+path_range_query::relations_may_be_invalidated (edge e)\n+{\n+  // As soon as the path crosses a back edge, we can encounter\n+  // definitions of SSA_NAMEs that may have had a use in the path\n+  // already, so this will then be a new definition.  The relation\n+  // code is all designed around seeing things in dominator order, and\n+  // crossing a back edge in the path violates this assumption.\n+  return (e->flags & EDGE_DFS_BACK);\n+}\n+\n // Compute ranges defined in the current block, or exported to the\n // next block.\n \n@@ -440,6 +453,22 @@ path_range_query::compute_ranges_in_block (basic_block bb)\n   // Solve imports that are exported to the next block.\n   basic_block next = next_bb ();\n   edge e = find_edge (bb, next);\n+\n+  if (m_resolve && relations_may_be_invalidated (e))\n+    {\n+      if (DEBUG_SOLVER)\n+\tfprintf (dump_file,\n+\t\t \"Resetting relations as they may be invalidated in %d->%d.\\n\",\n+\t\t e->src->index, e->dest->index);\n+\n+      path_oracle *p = get_path_oracle ();\n+      p->reset_path ();\n+      // ?? Instead of nuking the root oracle altogether, we could\n+      // reset the path oracle to search for relations from the top of\n+      // the loop with the root oracle.  Something for future development.\n+      p->set_root_oracle (nullptr);\n+    }\n+\n   EXECUTE_IF_SET_IN_BITMAP (m_imports, 0, i, bi)\n     {\n       tree name = ssa_name (i);\n@@ -742,9 +771,19 @@ path_range_query::range_of_stmt (irange &r, gimple *stmt, tree)\n   return true;\n }\n \n+// If possible, register the relation on the incoming edge E into PHI.\n+\n void\n-path_range_query::maybe_register_phi_relation (gphi *phi, tree arg)\n+path_range_query::maybe_register_phi_relation (gphi *phi, edge e)\n {\n+  tree arg = gimple_phi_arg_def (phi, e->dest_idx);\n+\n+  if (!gimple_range_ssa_p (arg))\n+    return;\n+\n+  if (relations_may_be_invalidated (e))\n+    return;\n+\n   basic_block bb = gimple_bb (phi);\n   tree result = gimple_phi_result (phi);\n \n@@ -754,7 +793,7 @@ path_range_query::maybe_register_phi_relation (gphi *phi, tree arg)\n     return;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n-    fprintf (dump_file, \"  from bb%d:\", bb->index);\n+    fprintf (dump_file, \"maybe_register_phi_relation in bb%d:\", bb->index);\n \n   get_path_oracle ()->killing_def (result);\n   m_oracle->register_relation (entry_bb (), EQ_EXPR, arg, result);\n@@ -787,10 +826,7 @@ path_range_query::compute_phi_relations (basic_block bb, basic_block prev)\n       for (size_t i = 0; i < nargs; ++i)\n \tif (e_in == gimple_phi_arg_edge (phi, i))\n \t  {\n-\t    tree arg = gimple_phi_arg_def (phi, i);\n-\n-\t    if (gimple_range_ssa_p (arg))\n-\t      maybe_register_phi_relation (phi, arg);\n+\t    maybe_register_phi_relation (phi, e_in);\n \t    break;\n \t  }\n     }"}, {"sha": "1820626161f58f0ba99663a2abb14cb8aa24b065", "filename": "gcc/gimple-range-path.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5ee6464809e051e0292471597931a660485658/gcc%2Fgimple-range-path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5ee6464809e051e0292471597931a660485658/gcc%2Fgimple-range-path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range-path.h?ref=eb5ee6464809e051e0292471597931a660485658", "patch": "@@ -63,10 +63,11 @@ class path_range_query : public range_query\n   void ssa_range_in_phi (irange &r, gphi *phi);\n   void compute_outgoing_relations (basic_block bb, basic_block next);\n   void compute_phi_relations (basic_block bb, basic_block prev);\n-  void maybe_register_phi_relation (gphi *, tree arg);\n+  void maybe_register_phi_relation (gphi *, edge e);\n   bool add_to_imports (tree name, bitmap imports);\n   bool import_p (tree name);\n   bool ssa_defined_in_bb (tree name, basic_block bb);\n+  bool relations_may_be_invalidated (edge);\n \n   // Path navigation.\n   void set_path (const vec<basic_block> &);"}, {"sha": "aefa1f0f147389512574d242116912d77b96f4ae", "filename": "gcc/testsuite/gcc.dg/pr103721-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5ee6464809e051e0292471597931a660485658/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103721-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5ee6464809e051e0292471597931a660485658/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103721-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103721-2.c?ref=eb5ee6464809e051e0292471597931a660485658", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+extern void abort ();\n+struct S { int x; } a[10];\n+struct S *b;\n+\n+int\n+main ()\n+{\n+  int i, j = 0;\n+  struct S *q = a;\n+\n+  for (i = 100; --i > 0; )\n+    {\n+      struct S *p;\n+      j++;\n+      if (j >= 10)\n+        j = 0;\n+      p = &a[j];\n+\n+      if (p == q)\n+        abort ();\n+      __atomic_thread_fence (__ATOMIC_SEQ_CST);\n+      q = p;\n+    }\n+  return 0;\n+}"}, {"sha": "6ec2e44b30f1cc2155373415c6576e35cac1c7f9", "filename": "gcc/testsuite/gcc.dg/pr103721.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5ee6464809e051e0292471597931a660485658/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103721.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5ee6464809e051e0292471597931a660485658/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103721.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103721.c?ref=eb5ee6464809e051e0292471597931a660485658", "patch": "@@ -0,0 +1,25 @@\n+// { dg-do run }\n+// { dg-options \"-O2\" }\n+\n+int ipos = 0;\n+int f (int world)\n+{\n+  int searchVolume = world;\n+  int currentVolume = 0;\n+  while (currentVolume != searchVolume && searchVolume) {\n+    currentVolume = searchVolume;\n+    if (ipos != 0)\n+      searchVolume = 0;\n+    else\n+      searchVolume = 1;\n+  }\n+  return (currentVolume);\n+}\n+int main()\n+{\n+  const int i = f (1111);\n+  __builtin_printf (\"%d\\n\", (int)(i));\n+  if (i != 1)\n+   __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "3ca65b32216e770fe4b451ad5ab732223ab09408", "filename": "gcc/tree-ssa-threadbackward.cc", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5ee6464809e051e0292471597931a660485658/gcc%2Ftree-ssa-threadbackward.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5ee6464809e051e0292471597931a660485658/gcc%2Ftree-ssa-threadbackward.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadbackward.cc?ref=eb5ee6464809e051e0292471597931a660485658", "patch": "@@ -144,6 +144,10 @@ back_threader::back_threader (function *fun, unsigned flags, bool first)\n   m_flags = flags;\n   m_solver = new path_range_query (flags & BT_RESOLVE);\n   m_last_stmt = NULL;\n+\n+  // The path solver needs EDGE_DFS_BACK in resolving mode.\n+  if (flags & BT_RESOLVE)\n+    mark_dfs_back_edges ();\n }\n \n back_threader::~back_threader ()"}, {"sha": "077ab4230a76c3a95fb12b192984e4f1cb61f67a", "filename": "gcc/value-relation.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5ee6464809e051e0292471597931a660485658/gcc%2Fvalue-relation.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5ee6464809e051e0292471597931a660485658/gcc%2Fvalue-relation.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.cc?ref=eb5ee6464809e051e0292471597931a660485658", "patch": "@@ -1251,7 +1251,7 @@ relation_oracle::debug () const\n \n path_oracle::path_oracle (relation_oracle *oracle)\n {\n-  m_root = oracle;\n+  set_root_oracle (oracle);\n   bitmap_obstack_initialize (&m_bitmaps);\n   obstack_init (&m_chain_obstack);\n \n@@ -1385,7 +1385,7 @@ path_oracle::register_relation (basic_block bb, relation_kind k, tree ssa1,\n       value_relation vr (k, ssa1, ssa2);\n       fprintf (dump_file, \" Registering value_relation (path_oracle) \");\n       vr.dump (dump_file);\n-      fprintf (dump_file, \" (bb%d)\\n\", bb->index);\n+      fprintf (dump_file, \" (root: bb%d)\\n\", bb->index);\n     }\n \n   if (k == EQ_EXPR)"}, {"sha": "6f471338fdf8775b69d12dc9e52813f74836dd2a", "filename": "gcc/value-relation.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/eb5ee6464809e051e0292471597931a660485658/gcc%2Fvalue-relation.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/eb5ee6464809e051e0292471597931a660485658/gcc%2Fvalue-relation.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-relation.h?ref=eb5ee6464809e051e0292471597931a660485658", "patch": "@@ -229,6 +229,7 @@ class path_oracle : public relation_oracle\n   relation_kind query_relation (basic_block, tree, tree);\n   relation_kind query_relation (basic_block, const_bitmap, const_bitmap);\n   void reset_path ();\n+  void set_root_oracle (relation_oracle *oracle) { m_root = oracle; }\n   void dump (FILE *, basic_block) const;\n   void dump (FILE *) const;\n private:"}]}