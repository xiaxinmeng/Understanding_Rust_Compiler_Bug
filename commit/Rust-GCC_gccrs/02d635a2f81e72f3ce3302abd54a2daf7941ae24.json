{"sha": "02d635a2f81e72f3ce3302abd54a2daf7941ae24", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJkNjM1YTJmODFlNzJmM2NlMzMwMmFiZDU0YTJkYWY3OTQxYWUyNA==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2010-06-12T12:43:02Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2010-06-12T12:43:02Z"}, "message": "re PR tree-optimization/44485 (ICE in get_expr_operands, at tree-ssa-operands.c:1020)\n\n\tPR tree-optimize/44485\n\t* tree-cfgcleanup.c (fixup_noreturn_call): Remove basic blocks containing\n\tuse of return value of noreturn function.\n\t* gcc.c-torture/compile/pc44485.c: New testcase.\n\nFrom-SVN: r160659", "tree": {"sha": "65fd83e0010f199a3093c2816ea1ffcd8347839c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/65fd83e0010f199a3093c2816ea1ffcd8347839c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02d635a2f81e72f3ce3302abd54a2daf7941ae24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02d635a2f81e72f3ce3302abd54a2daf7941ae24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02d635a2f81e72f3ce3302abd54a2daf7941ae24", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02d635a2f81e72f3ce3302abd54a2daf7941ae24/comments", "author": null, "committer": null, "parents": [{"sha": "153a30276e1c07f7e7d6d926fa45c056cdca9e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/153a30276e1c07f7e7d6d926fa45c056cdca9e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/153a30276e1c07f7e7d6d926fa45c056cdca9e85"}], "stats": {"total": 78, "additions": 75, "deletions": 3}, "files": [{"sha": "532842e600eb1bbe115eeb165905f3f482e38343", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02d635a2f81e72f3ce3302abd54a2daf7941ae24/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02d635a2f81e72f3ce3302abd54a2daf7941ae24/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=02d635a2f81e72f3ce3302abd54a2daf7941ae24", "patch": "@@ -1,3 +1,9 @@\n+2010-06-12  Jan Hubicka  <jh@suse.cz>\n+\n+\tPR tree-optimize/44485\n+\t* tree-cfgcleanup.c (fixup_noreturn_call): Remove basic blocks containing\n+\tuse of return value of noreturn function.\n+\n 2010-06-12  Anatoly Sokolov  <aesok@post.ru>\n \n \t* targhooks.c (default_function_value): Don't use"}, {"sha": "5041fc56919354041438ccd2713bb3775e2db495", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02d635a2f81e72f3ce3302abd54a2daf7941ae24/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02d635a2f81e72f3ce3302abd54a2daf7941ae24/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=02d635a2f81e72f3ce3302abd54a2daf7941ae24", "patch": "@@ -1,3 +1,7 @@\n+2010-06-12  Jan Hubicka  <jh@suse.cz>\n+\n+\t* gcc.c-torture/compile/pc44485.c: New testcase.\n+\n 2010-06-12  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/40117"}, {"sha": "fc959257dd3cb87b88dff629b617ea9726fdc821", "filename": "gcc/testsuite/gcc.c-torture/compile/pc44485.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02d635a2f81e72f3ce3302abd54a2daf7941ae24/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpc44485.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02d635a2f81e72f3ce3302abd54a2daf7941ae24/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpc44485.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpc44485.c?ref=02d635a2f81e72f3ce3302abd54a2daf7941ae24", "patch": "@@ -0,0 +1,46 @@\n+static int\n+foo (int si1, int si2)\n+{\n+  return si1 > 0 && si2 > 0 && si1 > -si2 || si1 < 0 && si2 < 0\n+    && si1 < -si2 ? : si1 + si2;\n+}\n+\n+struct S0\n+{\n+  unsigned short f1;\n+};\n+int g_4;\n+struct S0 g_54 = {\n+  3428\n+};\n+\n+int\n+func_21 (int * p_22, int * const int32p_24, unsigned p_25,\n+         const int * p_26);\n+\n+void int324 (unsigned p_15, int * p_16, int * p_17, int * p_18)\n+{\n+  if (foo (g_4, func_21 (p_18, &g_4, 0, 0)))\n+    {\n+      for (g_54.f1; g_54.f1; g_54.f1 += 1)\n+        {\n+        }\n+    }\n+}\n+\n+int\n+func_21 (int * p_22, int * const int32p_24, unsigned p_25,\n+         const int * p_26)\n+{\n+  for (0; 1; p_25 += 1)\n+  lbl_29:if (p_25)\n+      goto lbl_28;\n+lbl_28:for (p_25 = 0; p_25 < 9; p_25 += 1)\n+    if (p_25)\n+      goto lbl_29;\n+  unsigned short l_53;\n+  for (0; l_53; l_53 = foo)\n+    {\n+    }\n+  return 0;\n+}"}, {"sha": "62db2581239023b66ed1ba923444b1801d44bc55", "filename": "gcc/tree-cfgcleanup.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02d635a2f81e72f3ce3302abd54a2daf7941ae24/gcc%2Ftree-cfgcleanup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02d635a2f81e72f3ce3302abd54a2daf7941ae24/gcc%2Ftree-cfgcleanup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfgcleanup.c?ref=02d635a2f81e72f3ce3302abd54a2daf7941ae24", "patch": "@@ -559,18 +559,34 @@ fixup_noreturn_call (gimple stmt)\n     {\n       tree op = gimple_call_lhs (stmt);\n       gimple_call_set_lhs (stmt, NULL_TREE);\n+\n       /* We need to remove SSA name to avoid checking.\n \t All uses are dominated by the noreturn and thus will\n-\t be removed afterwards.  */\n+\t be removed afterwards.\n+\t We proactively remove affected non-PHI statements to avoid\n+\t fixup_cfg from trying to update them and crashing.  */\n       if (TREE_CODE (op) == SSA_NAME)\n \t{\n \t  use_operand_p use_p;\n           imm_use_iterator iter;\n \t  gimple use_stmt;\n+\t  bitmap_iterator bi;\n+\t  unsigned int bb_index;\n+\n+\t  bitmap blocks = BITMAP_ALLOC (NULL);\n \n           FOR_EACH_IMM_USE_STMT (use_stmt, iter, op)\n-\t    FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n-\t      SET_USE (use_p, error_mark_node);\n+\t    {\n+\t      if (gimple_code (use_stmt) != GIMPLE_PHI)\n+\t        bitmap_set_bit (blocks, gimple_bb (use_stmt)->index);\n+\t      else\n+\t\tFOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+\t\t  SET_USE (use_p, error_mark_node);\n+\t    }\n+\t  EXECUTE_IF_SET_IN_BITMAP (blocks, 0, bb_index, bi)\n+\t    delete_basic_block (BASIC_BLOCK (bb_index));\n+\t  BITMAP_FREE (blocks);\n+\t  release_ssa_name (op);\n \t}\n       update_stmt (stmt);\n       changed = true;"}]}