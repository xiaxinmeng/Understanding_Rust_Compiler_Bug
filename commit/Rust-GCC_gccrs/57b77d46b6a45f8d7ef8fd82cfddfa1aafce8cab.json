{"sha": "57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdiNzdkNDZiNmE0NWY4ZDdlZjhmZDgyY2ZkZGZhMWFhZmNlOGNhYg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2014-04-23T17:00:40Z"}, "committer": {"name": "Marcus Shawcroft", "email": "mshawcroft@gcc.gnu.org", "date": "2014-04-23T17:00:40Z"}, "message": "[AArch64] Fully support rotate on logical operations.\n\nFrom-SVN: r209711", "tree": {"sha": "4135fabda762dcc1f0c3060539f7b0029ec810c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4135fabda762dcc1f0c3060539f7b0029ec810c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab/comments", "author": null, "committer": null, "parents": [{"sha": "984c2f30636fcc1decc552001660b216a54c80d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/984c2f30636fcc1decc552001660b216a54c80d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/984c2f30636fcc1decc552001660b216a54c80d2"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "724fa3b85891920c48be6c6a4f0331e39926d759", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab", "patch": "@@ -1,3 +1,9 @@\n+2014-04-23  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* aarch64.md (<optab>_rol<mode>3): New pattern.\n+\t(<optab>_rolsi3_uxtw): Likewise.\n+\t* aarch64.c (aarch64_strip_shift): Handle ROTATE and ROTATERT.\n+\n 2014-04-23  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/arm/arm.c (arm_cortex_a57_tune): Initialize all fields."}, {"sha": "496d1b8f041c6a85cc075b6a5ff22c04c1e8c6e0", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab", "patch": "@@ -4471,9 +4471,13 @@ aarch64_strip_shift (rtx x)\n {\n   rtx op = x;\n \n+  /* We accept both ROTATERT and ROTATE: since the RHS must be a constant\n+     we can convert both to ROR during final output.  */\n   if ((GET_CODE (op) == ASHIFT\n        || GET_CODE (op) == ASHIFTRT\n-       || GET_CODE (op) == LSHIFTRT)\n+       || GET_CODE (op) == LSHIFTRT\n+       || GET_CODE (op) == ROTATERT\n+       || GET_CODE (op) == ROTATE)\n       && CONST_INT_P (XEXP (op, 1)))\n     return XEXP (op, 0);\n "}, {"sha": "1c017e7d6b6236b922e4a89f9a6d601ab6c6104e", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=57b77d46b6a45f8d7ef8fd82cfddfa1aafce8cab", "patch": "@@ -2565,7 +2565,18 @@\n   [(set_attr \"type\" \"logic_shift_imm\")]\n )\n \n-;; zero_extend version of above\n+(define_insn \"*<optab>_rol<mode>3\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t(LOGICAL:GPI (rotate:GPI\n+\t\t      (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:QI 2 \"aarch64_shift_imm_<mode>\" \"n\"))\n+\t\t     (match_operand:GPI 3 \"register_operand\" \"r\")))]\n+  \"\"\n+  \"<logical>\\\\t%<w>0, %<w>3, %<w>1, ror (<sizen> - %2)\"\n+  [(set_attr \"type\" \"logic_shift_imm\")]\n+)\n+\n+;; zero_extend versions of above\n (define_insn \"*<LOGICAL:optab>_<SHIFT:optab>si3_uxtw\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n \t(zero_extend:DI\n@@ -2578,6 +2589,18 @@\n   [(set_attr \"type\" \"logic_shift_imm\")]\n )\n \n+(define_insn \"*<optab>_rolsi3_uxtw\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(zero_extend:DI\n+\t (LOGICAL:SI (rotate:SI\n+\t\t      (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t      (match_operand:QI 2 \"aarch64_shift_imm_si\" \"n\"))\n+\t\t     (match_operand:SI 3 \"register_operand\" \"r\"))))]\n+  \"\"\n+  \"<logical>\\\\t%w0, %w3, %w1, ror (32 - %2)\"\n+  [(set_attr \"type\" \"logic_shift_imm\")]\n+)\n+\n (define_insn \"one_cmpl<mode>2\"\n   [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n \t(not:GPI (match_operand:GPI 1 \"register_operand\" \"r\")))]"}]}