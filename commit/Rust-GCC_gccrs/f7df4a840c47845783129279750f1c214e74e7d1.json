{"sha": "f7df4a840c47845783129279750f1c214e74e7d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdkZjRhODQwYzQ3ODQ1NzgzMTI5Mjc5NzUwZjFjMjE0ZTc0ZTdkMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-05-07T16:58:46Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-05-07T16:58:46Z"}, "message": "rtl.h (always_void_p): New function.\n\ngcc/\n\t* rtl.h (always_void_p): New function.\n\t* gengenrtl.c (always_void_p): Likewise.\n\t(genmacro): Don't add a mode parameter to gen_rtx_foo if rtxes\n\twith code foo are always VOIDmode.\n\t* genemit.c (gen_exp): Update gen_rtx_foo calls accordingly.\n\t* builtins.c, caller-save.c, calls.c, cfgexpand.c, combine.c,\n\tcompare-elim.c, config/aarch64/aarch64.c,\n\tconfig/aarch64/aarch64.md, config/alpha/alpha.c,\n\tconfig/alpha/alpha.md, config/arc/arc.c, config/arc/arc.md,\n\tconfig/arm/arm-fixed.md, config/arm/arm.c, config/arm/arm.md,\n\tconfig/arm/ldrdstrd.md, config/arm/thumb2.md, config/arm/vfp.md,\n\tconfig/avr/avr.c, config/bfin/bfin.c, config/c6x/c6x.c,\n\tconfig/c6x/c6x.md, config/cr16/cr16.c, config/cris/cris.c,\n\tconfig/cris/cris.md, config/darwin.c, config/epiphany/epiphany.c,\n\tconfig/epiphany/epiphany.md, config/fr30/fr30.c, config/frv/frv.c,\n\tconfig/frv/frv.md, config/h8300/h8300.c, config/i386/i386.c,\n\tconfig/i386/i386.md, config/i386/sse.md, config/ia64/ia64.c,\n\tconfig/ia64/vect.md, config/iq2000/iq2000.c,\n\tconfig/iq2000/iq2000.md, config/lm32/lm32.c, config/lm32/lm32.md,\n\tconfig/m32c/m32c.c, config/m32r/m32r.c, config/m68k/m68k.c,\n\tconfig/m68k/m68k.md, config/mcore/mcore.c, config/mcore/mcore.md,\n\tconfig/mep/mep.c, config/microblaze/microblaze.c,\n\tconfig/mips/mips.c, config/mips/mips.md, config/mmix/mmix.c,\n\tconfig/mn10300/mn10300.c, config/msp430/msp430.c,\n\tconfig/nds32/nds32-memory-manipulation.c, config/nds32/nds32.c,\n\tconfig/nds32/nds32.md, config/nios2/nios2.c, config/nvptx/nvptx.c,\n\tconfig/pa/pa.c, config/pa/pa.md, config/rl78/rl78.c,\n\tconfig/rs6000/altivec.md, config/rs6000/rs6000.c,\n\tconfig/rs6000/rs6000.md, config/rs6000/vector.md,\n\tconfig/rs6000/vsx.md, config/rx/rx.c, config/rx/rx.md,\n\tconfig/s390/s390.c, config/s390/s390.md, config/sh/sh.c,\n\tconfig/sh/sh.md, config/sh/sh_treg_combine.cc,\n\tconfig/sparc/sparc.c, config/sparc/sparc.md, config/spu/spu.c,\n\tconfig/spu/spu.md, config/stormy16/stormy16.c,\n\tconfig/tilegx/tilegx.c, config/tilegx/tilegx.md,\n\tconfig/tilepro/tilepro.c, config/tilepro/tilepro.md,\n\tconfig/v850/v850.c, config/v850/v850.md, config/vax/vax.c,\n\tconfig/visium/visium.c, config/xtensa/xtensa.c, cprop.c, dse.c,\n\texpr.c, gcse.c, ifcvt.c, ira.c, jump.c, lower-subreg.c,\n\tlra-constraints.c, lra-eliminations.c, lra.c, postreload.c, ree.c,\n\treg-stack.c, reload.c, reload1.c, reorg.c, sel-sched.c,\n\tvar-tracking.c: Update calls accordingly.\n\nFrom-SVN: r222883", "tree": {"sha": "d586b7005253121ffef57e4f1d75d48de1056334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d586b7005253121ffef57e4f1d75d48de1056334"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7df4a840c47845783129279750f1c214e74e7d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7df4a840c47845783129279750f1c214e74e7d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7df4a840c47845783129279750f1c214e74e7d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7df4a840c47845783129279750f1c214e74e7d1/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d5449acf6b952794ecfacfbdbb8291f37dfd57d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d5449acf6b952794ecfacfbdbb8291f37dfd57d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d5449acf6b952794ecfacfbdbb8291f37dfd57d1"}], "stats": {"total": 3370, "additions": 1525, "deletions": 1845}, "files": [{"sha": "a14a4a5bd15fa8c2cf0011123e1fabdf081df819", "filename": "gcc/ChangeLog", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1,3 +1,48 @@\n+2015-05-07  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* rtl.h (always_void_p): New function.\n+\t* gengenrtl.c (always_void_p): Likewise.\n+\t(genmacro): Don't add a mode parameter to gen_rtx_foo if rtxes\n+\twith code foo are always VOIDmode.\n+\t* genemit.c (gen_exp): Update gen_rtx_foo calls accordingly.\n+\t* builtins.c, caller-save.c, calls.c, cfgexpand.c, combine.c,\n+\tcompare-elim.c, config/aarch64/aarch64.c,\n+\tconfig/aarch64/aarch64.md, config/alpha/alpha.c,\n+\tconfig/alpha/alpha.md, config/arc/arc.c, config/arc/arc.md,\n+\tconfig/arm/arm-fixed.md, config/arm/arm.c, config/arm/arm.md,\n+\tconfig/arm/ldrdstrd.md, config/arm/thumb2.md, config/arm/vfp.md,\n+\tconfig/avr/avr.c, config/bfin/bfin.c, config/c6x/c6x.c,\n+\tconfig/c6x/c6x.md, config/cr16/cr16.c, config/cris/cris.c,\n+\tconfig/cris/cris.md, config/darwin.c, config/epiphany/epiphany.c,\n+\tconfig/epiphany/epiphany.md, config/fr30/fr30.c, config/frv/frv.c,\n+\tconfig/frv/frv.md, config/h8300/h8300.c, config/i386/i386.c,\n+\tconfig/i386/i386.md, config/i386/sse.md, config/ia64/ia64.c,\n+\tconfig/ia64/vect.md, config/iq2000/iq2000.c,\n+\tconfig/iq2000/iq2000.md, config/lm32/lm32.c, config/lm32/lm32.md,\n+\tconfig/m32c/m32c.c, config/m32r/m32r.c, config/m68k/m68k.c,\n+\tconfig/m68k/m68k.md, config/mcore/mcore.c, config/mcore/mcore.md,\n+\tconfig/mep/mep.c, config/microblaze/microblaze.c,\n+\tconfig/mips/mips.c, config/mips/mips.md, config/mmix/mmix.c,\n+\tconfig/mn10300/mn10300.c, config/msp430/msp430.c,\n+\tconfig/nds32/nds32-memory-manipulation.c, config/nds32/nds32.c,\n+\tconfig/nds32/nds32.md, config/nios2/nios2.c, config/nvptx/nvptx.c,\n+\tconfig/pa/pa.c, config/pa/pa.md, config/rl78/rl78.c,\n+\tconfig/rs6000/altivec.md, config/rs6000/rs6000.c,\n+\tconfig/rs6000/rs6000.md, config/rs6000/vector.md,\n+\tconfig/rs6000/vsx.md, config/rx/rx.c, config/rx/rx.md,\n+\tconfig/s390/s390.c, config/s390/s390.md, config/sh/sh.c,\n+\tconfig/sh/sh.md, config/sh/sh_treg_combine.cc,\n+\tconfig/sparc/sparc.c, config/sparc/sparc.md, config/spu/spu.c,\n+\tconfig/spu/spu.md, config/stormy16/stormy16.c,\n+\tconfig/tilegx/tilegx.c, config/tilegx/tilegx.md,\n+\tconfig/tilepro/tilepro.c, config/tilepro/tilepro.md,\n+\tconfig/v850/v850.c, config/v850/v850.md, config/vax/vax.c,\n+\tconfig/visium/visium.c, config/xtensa/xtensa.c, cprop.c, dse.c,\n+\texpr.c, gcse.c, ifcvt.c, ira.c, jump.c, lower-subreg.c,\n+\tlra-constraints.c, lra-eliminations.c, lra.c, postreload.c, ree.c,\n+\treg-stack.c, reload.c, reload1.c, reorg.c, sel-sched.c,\n+\tvar-tracking.c: Update calls accordingly.\n+\n 2015-05-07  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \tPR middle-end/192"}, {"sha": "90e66d629099fab6476c2ea7a4e3bb7721b2788d", "filename": "gcc/builtins.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1478,8 +1478,8 @@ result_vector (int savep, rtx result)\n \treg = gen_rtx_REG (mode, savep ? regno : INCOMING_REGNO (regno));\n \tmem = adjust_address (result, mode, size);\n \tsavevec[nelts++] = (savep\n-\t\t\t    ? gen_rtx_SET (VOIDmode, mem, reg)\n-\t\t\t    : gen_rtx_SET (VOIDmode, reg, mem));\n+\t\t\t    ? gen_rtx_SET (mem, reg)\n+\t\t\t    : gen_rtx_SET (reg, mem));\n \tsize += GET_MODE_SIZE (mode);\n       }\n   return gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (nelts, savevec));"}, {"sha": "923cfa1d277b7a8c455567d4bc41671da3363205", "filename": "gcc/caller-save.c", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fcaller-save.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fcaller-save.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcaller-save.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -289,8 +289,8 @@ init_caller_save (void)\n \n   test_reg = gen_rtx_REG (VOIDmode, 0);\n   test_mem = gen_rtx_MEM (VOIDmode, address);\n-  savepat = gen_rtx_SET (VOIDmode, test_mem, test_reg);\n-  restpat = gen_rtx_SET (VOIDmode, test_reg, test_mem);\n+  savepat = gen_rtx_SET (test_mem, test_reg);\n+  restpat = gen_rtx_SET (test_reg, test_mem);\n \n   saveinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, savepat, 0, -1, 0);\n   restinsn = gen_rtx_INSN (VOIDmode, 0, 0, 0, restpat, 0, -1, 0);\n@@ -909,7 +909,7 @@ save_call_clobbered_regs (void)\n \t\t     Currently we handle only single return value case.  */\n \t\t  if (REG_P (dest))\n \t\t    {\n-\t\t      newpat = gen_rtx_SET (VOIDmode, cheap, copy_rtx (dest));\n+\t\t      newpat = gen_rtx_SET (cheap, copy_rtx (dest));\n \t\t      chain = insert_one_insn (chain, 0, -1, newpat);\n \t\t    }\n \t\t}\n@@ -1272,9 +1272,7 @@ insert_restore (struct insn_chain *chain, int before_p, int regno,\n   gcc_assert (MIN (MAX_SUPPORTED_STACK_ALIGNMENT,\n \t\t   GET_MODE_ALIGNMENT (GET_MODE (mem))) <= MEM_ALIGN (mem));\n \n-  pat = gen_rtx_SET (VOIDmode,\n-\t\t     gen_rtx_REG (GET_MODE (mem),\n-\t\t\t\t  regno), mem);\n+  pat = gen_rtx_SET (gen_rtx_REG (GET_MODE (mem), regno), mem);\n   code = reg_restore_code (regno, GET_MODE (mem));\n   new_chain = insert_one_insn (chain, before_p, code, pat);\n \n@@ -1353,9 +1351,7 @@ insert_save (struct insn_chain *chain, int before_p, int regno,\n   gcc_assert (MIN (MAX_SUPPORTED_STACK_ALIGNMENT,\n \t\t   GET_MODE_ALIGNMENT (GET_MODE (mem))) <= MEM_ALIGN (mem));\n \n-  pat = gen_rtx_SET (VOIDmode, mem,\n-\t\t     gen_rtx_REG (GET_MODE (mem),\n-\t\t\t\t  regno));\n+  pat = gen_rtx_SET (mem, gen_rtx_REG (GET_MODE (mem), regno));\n   code = reg_save_code (regno, GET_MODE (mem));\n   new_chain = insert_one_insn (chain, before_p, code, pat);\n "}, {"sha": "aaac1ad701e25c8493c81100cc01ca317c7cc41b", "filename": "gcc/calls.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -3353,7 +3353,7 @@ expand_call (tree exp, rtx target, int ignore)\n \t      && GET_MODE (args[arg_nr].reg) == GET_MODE (valreg))\n \t  call_fusage\n \t    = gen_rtx_EXPR_LIST (TYPE_MODE (TREE_TYPE (args[arg_nr].tree_value)),\n-\t\t\t\t gen_rtx_SET (VOIDmode, valreg, args[arg_nr].reg),\n+\t\t\t\t gen_rtx_SET (valreg, args[arg_nr].reg),\n \t\t\t\t call_fusage);\n \t}\n       /* All arguments and registers used for the call must be set up by"}, {"sha": "b76a219c4f4f232a20c65157471ed1d1928022ce", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2886,7 +2886,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n   else if (noutputs == 1 && nclobbers == 0)\n     {\n       ASM_OPERANDS_OUTPUT_CONSTRAINT (body) = ggc_strdup (constraints[0]);\n-      emit_insn (gen_rtx_SET (VOIDmode, output_rtx[0], body));\n+      emit_insn (gen_rtx_SET (output_rtx[0], body));\n     }\n   else\n     {\n@@ -2902,8 +2902,7 @@ expand_asm_operands (tree string, tree outputs, tree inputs,\n       for (i = 0, tail = outputs; tail; tail = TREE_CHAIN (tail), i++)\n \t{\n \t  XVECEXP (body, 0, i)\n-\t    = gen_rtx_SET (VOIDmode,\n-\t\t\t   output_rtx[i],\n+\t    = gen_rtx_SET (output_rtx[i],\n \t\t\t   gen_rtx_ASM_OPERANDS\n \t\t\t   (GET_MODE (output_rtx[i]),\n \t\t\t    ggc_strdup (TREE_STRING_POINTER (string)),"}, {"sha": "b806959265874ed85539d3117760a0e15bfb4270", "filename": "gcc/combine.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -3104,23 +3104,23 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n   if (added_sets_2)\n     {\n       if (GET_CODE (PATTERN (i2)) == PARALLEL)\n-\ti2pat = gen_rtx_SET (VOIDmode, i2dest, copy_rtx (i2src));\n+\ti2pat = gen_rtx_SET (i2dest, copy_rtx (i2src));\n       else\n \ti2pat = copy_rtx (PATTERN (i2));\n     }\n \n   if (added_sets_1)\n     {\n       if (GET_CODE (PATTERN (i1)) == PARALLEL)\n-\ti1pat = gen_rtx_SET (VOIDmode, i1dest, copy_rtx (i1src));\n+\ti1pat = gen_rtx_SET (i1dest, copy_rtx (i1src));\n       else\n \ti1pat = copy_rtx (PATTERN (i1));\n     }\n \n   if (added_sets_0)\n     {\n       if (GET_CODE (PATTERN (i0)) == PARALLEL)\n-\ti0pat = gen_rtx_SET (VOIDmode, i0dest, copy_rtx (i0src));\n+\ti0pat = gen_rtx_SET (i0dest, copy_rtx (i0src));\n       else\n \ti0pat = copy_rtx (PATTERN (i0));\n     }\n@@ -3230,7 +3230,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t  /* Create new version of i2pat if needed; the below PARALLEL\n \t     creation needs this to work correctly.  */\n \t  if (! rtx_equal_p (i2src, op0))\n-\t    i2pat = gen_rtx_SET (VOIDmode, i2dest, op0);\n+\t    i2pat = gen_rtx_SET (i2dest, op0);\n \t  i2_is_used = 1;\n \t}\n     }\n@@ -3753,7 +3753,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t      /* Split \"X = Y op Y\" as \"Z = Y; X = Z op Z\".  */\n \t      if (rtx_equal_p (src_op0, src_op1))\n \t\t{\n-\t\t  newi2pat = gen_rtx_SET (VOIDmode, newdest, src_op0);\n+\t\t  newi2pat = gen_rtx_SET (newdest, src_op0);\n \t\t  SUBST (XEXP (setsrc, 0), newdest);\n \t\t  SUBST (XEXP (setsrc, 1), newdest);\n \t\t  subst_done = true;\n@@ -3777,8 +3777,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t\t  if ((rtx_equal_p (p,r) && rtx_equal_p (q,s))\n \t\t       || (rtx_equal_p (p,s) && rtx_equal_p (q,r)))\n \t\t    {\n-\t\t      newi2pat = gen_rtx_SET (VOIDmode, newdest,\n-\t\t\t\t\t      XEXP (src_op0, 0));\n+\t\t      newi2pat = gen_rtx_SET (newdest, XEXP (src_op0, 0));\n \t\t      SUBST (XEXP (setsrc, 0), newdest);\n \t\t      SUBST (XEXP (setsrc, 1), newdest);\n \t\t      subst_done = true;\n@@ -3788,7 +3787,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t\t  else if (rtx_equal_p (p,q) && rtx_equal_p (r,s))\n \t\t    {\n \t\t      rtx tmp = simplify_gen_binary (code, mode, p, r);\n-\t\t      newi2pat = gen_rtx_SET (VOIDmode, newdest, tmp);\n+\t\t      newi2pat = gen_rtx_SET (newdest, tmp);\n \t\t      SUBST (XEXP (setsrc, 0), newdest);\n \t\t      SUBST (XEXP (setsrc, 1), newdest);\n \t\t      subst_done = true;\n@@ -3798,7 +3797,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \n \t  if (!subst_done)\n \t    {\n-\t      newi2pat = gen_rtx_SET (VOIDmode, newdest, *split);\n+\t      newi2pat = gen_rtx_SET (newdest, *split);\n \t      SUBST (*split, newdest);\n \t    }\n \n@@ -4754,8 +4753,7 @@ find_split_point (rtx *loc, rtx_insn *insn, bool set_src)\n \t\t\t\t\t    MEM_ADDR_SPACE (x)))\n \t{\n \t  rtx reg = regno_reg_rtx[FIRST_PSEUDO_REGISTER];\n-\t  rtx_insn *seq = combine_split_insns (gen_rtx_SET (VOIDmode, reg,\n-\t\t\t\t\t\t\t    XEXP (x, 0)),\n+\t  rtx_insn *seq = combine_split_insns (gen_rtx_SET (reg, XEXP (x, 0)),\n \t\t\t\t\t       subst_insn);\n \n \t  /* This should have produced two insns, each of which sets our\n@@ -7191,7 +7189,7 @@ expand_field_assignment (const_rtx x)\n \t\t   == ((GET_MODE_SIZE (GET_MODE (SUBREG_REG (SET_DEST (x))))\n \t\t\t+ (UNITS_PER_WORD - 1)) / UNITS_PER_WORD)))\n \t{\n-\t  x = gen_rtx_SET (VOIDmode, SUBREG_REG (SET_DEST (x)),\n+\t  x = gen_rtx_SET (SUBREG_REG (SET_DEST (x)),\n \t\t\t   gen_lowpart\n \t\t\t   (GET_MODE (SUBREG_REG (SET_DEST (x))),\n \t\t\t    SET_SRC (x)));\n@@ -7246,7 +7244,7 @@ expand_field_assignment (const_rtx x)\n \t\t\t\t      mask),\n \t\t\t\t    pos);\n \n-      x = gen_rtx_SET (VOIDmode, copy_rtx (inner),\n+      x = gen_rtx_SET (copy_rtx (inner),\n \t\t       simplify_gen_binary (IOR, compute_mode,\n \t\t\t\t\t    cleared, masked));\n     }\n@@ -9255,7 +9253,7 @@ make_field_assignment (rtx x)\n       assign = make_extraction (VOIDmode, dest, 0, XEXP (XEXP (src, 0), 1),\n \t\t\t\t1, 1, 1, 0);\n       if (assign != 0)\n-\treturn gen_rtx_SET (VOIDmode, assign, const0_rtx);\n+\treturn gen_rtx_SET (assign, const0_rtx);\n       return x;\n     }\n \n@@ -9272,7 +9270,7 @@ make_field_assignment (rtx x)\n \t\t\t\tXEXP (SUBREG_REG (XEXP (src, 0)), 1),\n \t\t\t\t1, 1, 1, 0);\n       if (assign != 0)\n-\treturn gen_rtx_SET (VOIDmode, assign, const0_rtx);\n+\treturn gen_rtx_SET (assign, const0_rtx);\n       return x;\n     }\n \n@@ -9285,7 +9283,7 @@ make_field_assignment (rtx x)\n       assign = make_extraction (VOIDmode, dest, 0, XEXP (XEXP (src, 0), 1),\n \t\t\t\t1, 1, 1, 0);\n       if (assign != 0)\n-\treturn gen_rtx_SET (VOIDmode, assign, const1_rtx);\n+\treturn gen_rtx_SET (assign, const1_rtx);\n       return x;\n     }\n \n@@ -9308,15 +9306,15 @@ make_field_assignment (rtx x)\n \n       /* Complete overlap.  We can remove the source AND.  */\n       if ((and_mask & ze_mask) == ze_mask)\n-\treturn gen_rtx_SET (VOIDmode, dest, XEXP (src, 0));\n+\treturn gen_rtx_SET (dest, XEXP (src, 0));\n \n       /* Partial overlap.  We can reduce the source AND.  */\n       if ((and_mask & ze_mask) != and_mask)\n \t{\n \t  mode = GET_MODE (src);\n \t  src = gen_rtx_AND (mode, XEXP (src, 0),\n \t\t\t     gen_int_mode (and_mask & ze_mask, mode));\n-\t  return gen_rtx_SET (VOIDmode, dest, src);\n+\t  return gen_rtx_SET (dest, src);\n \t}\n     }\n \n@@ -9417,7 +9415,7 @@ make_field_assignment (rtx x)\n \t == ((unsigned HOST_WIDE_INT) 1 << INTVAL (XEXP (assign, 1))) - 1)\n     src = XEXP (src, 0);\n \n-  return gen_rtx_SET (VOIDmode, assign, src);\n+  return gen_rtx_SET (assign, src);\n }\n \f\n /* See if X is of the form (+ (* a c) (* b c)) and convert to (* (+ a b) c)"}, {"sha": "25b4cc858b0648dce465aa1c0b4cdc3fcc20d6a5", "filename": "gcc/compare-elim.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fcompare-elim.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fcompare-elim.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcompare-elim.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -293,7 +293,7 @@ can_eliminate_compare (rtx compare, rtx eh_note, struct comparison *cmp)\n       /* Generate new comparison for substitution.  */\n       rtx flags = gen_rtx_REG (new_mode, targetm.flags_regnum);\n       rtx x = gen_rtx_COMPARE (new_mode, cmp->in_a, cmp->in_b);\n-      x = gen_rtx_SET (VOIDmode, flags, x);\n+      x = gen_rtx_SET (flags, x);\n \n       if (!validate_change (cmp->insn, &PATTERN (cmp->insn), x, false))\n \treturn false;\n@@ -625,7 +625,7 @@ try_eliminate_compare (struct comparison *cmp)\n   /* Generate a new comparison for installation in the setter.  */\n   x = copy_rtx (cmp_src);\n   x = gen_rtx_COMPARE (GET_MODE (flags), x, cmp->in_b);\n-  x = gen_rtx_SET (VOIDmode, flags, x);\n+  x = gen_rtx_SET (flags, x);\n \n   /* Succeed if the new instruction is valid.  Note that we may have started\n      a change group within maybe_select_cc_mode, therefore we must continue. */"}, {"sha": "f866c7e4ec6af81b127c2c1ee2129d8727731550", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 38, "deletions": 43, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -713,7 +713,7 @@ aarch64_is_extend_from_extract (machine_mode mode, rtx mult_imm,\n inline static rtx\n emit_set_insn (rtx x, rtx y)\n {\n-  return emit_insn (gen_rtx_SET (VOIDmode, x, y));\n+  return emit_insn (gen_rtx_SET (x, y));\n }\n \n /* X and Y are two things to compare using CODE.  Emit the compare insn and\n@@ -825,7 +825,7 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n       }\n \n     case SYMBOL_TINY_ABSOLUTE:\n-      emit_insn (gen_rtx_SET (Pmode, dest, imm));\n+      emit_insn (gen_rtx_SET (dest, imm));\n       return;\n \n     case SYMBOL_SMALL_GOT:\n@@ -894,7 +894,7 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n \tif (mode != Pmode)\n \t  tp = gen_lowpart (mode, tp);\n \n-\temit_insn (gen_rtx_SET (mode, dest, gen_rtx_PLUS (mode, tp, x0)));\n+\temit_insn (gen_rtx_SET (dest, gen_rtx_PLUS (mode, tp, x0)));\n \tset_unique_reg_note (get_last_insn (), REG_EQUIV, imm);\n \treturn;\n       }\n@@ -928,7 +928,7 @@ aarch64_load_symref_appropriately (rtx dest, rtx imm,\n \t    emit_insn (gen_tlsie_small_sidi (tmp_reg, imm));\n \t  }\n \n-\temit_insn (gen_rtx_SET (mode, dest, gen_rtx_PLUS (mode, tp, tmp_reg)));\n+\temit_insn (gen_rtx_SET (dest, gen_rtx_PLUS (mode, tp, tmp_reg)));\n \tset_unique_reg_note (get_last_insn (), REG_EQUIV, imm);\n \treturn;\n       }\n@@ -1186,7 +1186,7 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n   if (CONST_INT_P (imm) && aarch64_move_imm (INTVAL (imm), mode))\n     {\n       if (generate)\n-\temit_insn (gen_rtx_SET (VOIDmode, dest, imm));\n+\temit_insn (gen_rtx_SET (dest, imm));\n       num_insns++;\n       return num_insns;\n     }\n@@ -1198,8 +1198,7 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n \t us anything.  */\n       if (generate)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, dest,\n-\t\t\t\t  GEN_INT (INTVAL (imm) & 0xffff)));\n+\t  emit_insn (gen_rtx_SET (dest, GEN_INT (INTVAL (imm) & 0xffff)));\n \t  emit_insn (gen_insv_immsi (dest, GEN_INT (16),\n \t\t\t\t     GEN_INT ((INTVAL (imm) >> 16) & 0xffff)));\n \t}\n@@ -1236,7 +1235,7 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n       mask = 0xffffll << first_not_ffff_match;\n       if (generate)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, dest, GEN_INT (val | mask)));\n+\t  emit_insn (gen_rtx_SET (dest, GEN_INT (val | mask)));\n \t  emit_insn (gen_insv_immdi (dest, GEN_INT (first_not_ffff_match),\n \t\t\t\t     GEN_INT ((val >> first_not_ffff_match)\n \t\t\t\t\t      & 0xffff)));\n@@ -1258,8 +1257,7 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n \t  if (generate)\n \t    {\n \t      subtarget = subtargets ? gen_reg_rtx (DImode) : dest;\n-\t      emit_insn (gen_rtx_SET (VOIDmode, subtarget,\n-\t\t\t\t      GEN_INT (val & mask)));\n+\t      emit_insn (gen_rtx_SET (subtarget, GEN_INT (val & mask)));\n \t      emit_insn (gen_adddi3 (dest, subtarget,\n \t\t\t\t     GEN_INT (val - (val & mask))));\n \t    }\n@@ -1271,7 +1269,7 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n \t  if (generate)\n \t    {\n \t      subtarget = subtargets ? gen_reg_rtx (DImode) : dest;\n-\t      emit_insn (gen_rtx_SET (VOIDmode, subtarget,\n+\t      emit_insn (gen_rtx_SET (subtarget,\n \t\t\t\t      GEN_INT ((val + comp) & mask)));\n \t      emit_insn (gen_adddi3 (dest, subtarget,\n \t\t\t\t     GEN_INT (val - ((val + comp) & mask))));\n@@ -1284,7 +1282,7 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n \t  if (generate)\n \t    {\n \t      subtarget = subtargets ? gen_reg_rtx (DImode) : dest;\n-\t      emit_insn (gen_rtx_SET (VOIDmode, subtarget,\n+\t      emit_insn (gen_rtx_SET (subtarget,\n \t\t\t\t      GEN_INT ((val - comp) | ~mask)));\n \t      emit_insn (gen_adddi3 (dest, subtarget,\n \t\t\t\t     GEN_INT (val - ((val - comp) | ~mask))));\n@@ -1297,8 +1295,7 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n \t  if (generate)\n \t    {\n \t      subtarget = subtargets ? gen_reg_rtx (DImode) : dest;\n-\t      emit_insn (gen_rtx_SET (VOIDmode, subtarget,\n-\t\t\t\t      GEN_INT (val | ~mask)));\n+\t      emit_insn (gen_rtx_SET (subtarget, GEN_INT (val | ~mask)));\n \t      emit_insn (gen_adddi3 (dest, subtarget,\n \t\t\t\t     GEN_INT (val - (val | ~mask))));\n \t    }\n@@ -1320,7 +1317,7 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n \t  if (generate)\n \t    {\n \t      subtarget = subtargets ? gen_reg_rtx (DImode) : dest;\n-\t      emit_insn (gen_rtx_SET (VOIDmode, subtarget,\n+\t      emit_insn (gen_rtx_SET (subtarget,\n \t\t\t\t      GEN_INT (aarch64_bitmasks[i])));\n \t      emit_insn (gen_adddi3 (dest, subtarget,\n \t\t\t\t     GEN_INT (val - aarch64_bitmasks[i])));\n@@ -1335,7 +1332,7 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n \t    {\n \t      if (generate)\n \t\t{\n-\t\t  emit_insn (gen_rtx_SET (VOIDmode, dest,\n+\t\t  emit_insn (gen_rtx_SET (dest,\n \t\t\t\t\t  GEN_INT (aarch64_bitmasks[i])));\n \t\t  emit_insn (gen_insv_immdi (dest, GEN_INT (j),\n \t\t\t\t\t     GEN_INT ((val >> j) & 0xffff)));\n@@ -1359,7 +1356,7 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n \t\tif (generate)\n \t\t  {\n \t\t    subtarget = subtargets ? gen_reg_rtx (mode) : dest;\n-\t\t    emit_insn (gen_rtx_SET (VOIDmode, subtarget,\n+\t\t    emit_insn (gen_rtx_SET (subtarget,\n \t\t\t\t\t    GEN_INT (aarch64_bitmasks[i])));\n \t\t    emit_insn (gen_iordi3 (dest, subtarget,\n \t\t\t\t\t   GEN_INT (aarch64_bitmasks[j])));\n@@ -1378,7 +1375,7 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n \t\tif (generate)\n \t\t  {\n \t\t    subtarget = subtargets ? gen_reg_rtx (mode) : dest;\n-\t\t    emit_insn (gen_rtx_SET (VOIDmode, subtarget,\n+\t\t    emit_insn (gen_rtx_SET (subtarget,\n \t\t\t\t\t    GEN_INT (aarch64_bitmasks[j])));\n \t\t    emit_insn (gen_anddi3 (dest, subtarget,\n \t\t\t\t\t   GEN_INT (aarch64_bitmasks[i])));\n@@ -1394,7 +1391,7 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n       /* Set either first three quarters or all but the third.\t */\n       mask = 0xffffll << (16 - first_not_ffff_match);\n       if (generate)\n-\temit_insn (gen_rtx_SET (VOIDmode, dest,\n+\temit_insn (gen_rtx_SET (dest,\n \t\t\t\tGEN_INT (val | mask | 0xffffffff00000000ull)));\n       num_insns ++;\n \n@@ -1423,8 +1420,7 @@ aarch64_internal_mov_immediate (rtx dest, rtx imm, bool generate,\n \t  if (first)\n \t    {\n \t      if (generate)\n-\t\temit_insn (gen_rtx_SET (VOIDmode, dest,\n-\t\t\t\t\tGEN_INT (val & mask)));\n+\t\temit_insn (gen_rtx_SET (dest, GEN_INT (val & mask)));\n \t      num_insns ++;\n \t      first = false;\n \t    }\n@@ -1478,7 +1474,7 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n \t  gcc_assert (mem);\n \t  if (mode != ptr_mode)\n \t    mem = gen_rtx_ZERO_EXTEND (mode, mem);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, dest, mem));\n+\t  emit_insn (gen_rtx_SET (dest, mem));\n \t  return;\n \n         case SYMBOL_SMALL_TLSGD:\n@@ -1510,12 +1506,12 @@ aarch64_expand_mov_immediate (rtx dest, rtx imm)\n   if (!CONST_INT_P (imm))\n     {\n       if (GET_CODE (imm) == HIGH)\n-\temit_insn (gen_rtx_SET (VOIDmode, dest, imm));\n+\temit_insn (gen_rtx_SET (dest, imm));\n       else\n         {\n \t  rtx mem = force_const_mem (mode, imm);\n \t  gcc_assert (mem);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, dest, mem));\n+\t  emit_insn (gen_rtx_SET (dest, mem));\n \t}\n \n       return;\n@@ -2463,7 +2459,7 @@ aarch64_expand_prologue (void)\n \t  insn = emit_insn (gen_add2_insn (stack_pointer_rtx, op0));\n \n \t  add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-\t\t\tgen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\tgen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t     plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t    -frame_size)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n@@ -2894,19 +2890,19 @@ aarch64_add_constant (int regnum, int scratchreg, HOST_WIDE_INT delta)\n     {\n       if (mdelta >= 4096)\n \t{\n-\t  emit_insn (gen_rtx_SET (Pmode, scratch_rtx, GEN_INT (mdelta / 4096)));\n+\t  emit_insn (gen_rtx_SET (scratch_rtx, GEN_INT (mdelta / 4096)));\n \t  rtx shift = gen_rtx_ASHIFT (Pmode, scratch_rtx, GEN_INT (12));\n \t  if (delta < 0)\n-\t    emit_insn (gen_rtx_SET (Pmode, this_rtx,\n+\t    emit_insn (gen_rtx_SET (this_rtx,\n \t\t\t\t    gen_rtx_MINUS (Pmode, this_rtx, shift)));\n \t  else\n-\t    emit_insn (gen_rtx_SET (Pmode, this_rtx,\n+\t    emit_insn (gen_rtx_SET (this_rtx,\n \t\t\t\t    gen_rtx_PLUS (Pmode, this_rtx, shift)));\n \t}\n       if (mdelta % 4096 != 0)\n \t{\n \t  scratch_rtx = GEN_INT ((delta < 0 ? -1 : 1) * (mdelta % 4096));\n-\t  emit_insn (gen_rtx_SET (Pmode, this_rtx,\n+\t  emit_insn (gen_rtx_SET (this_rtx,\n \t\t\t\t  gen_rtx_PLUS (Pmode, this_rtx, scratch_rtx)));\n \t}\n     }\n@@ -9250,7 +9246,7 @@ aarch64_expand_compare_and_swap (rtx operands[])\n \n   x = gen_rtx_REG (CCmode, CC_REGNUM);\n   x = gen_rtx_EQ (SImode, x, const0_rtx);\n-  emit_insn (gen_rtx_SET (VOIDmode, bval, x));\n+  emit_insn (gen_rtx_SET (bval, x));\n }\n \n /* Split a compare and swap pattern.  */\n@@ -9286,7 +9282,7 @@ aarch64_split_compare_and_swap (rtx operands[])\n   x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n   x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n \t\t\t    gen_rtx_LABEL_REF (Pmode, label2), pc_rtx);\n-  aarch64_emit_unlikely_jump (gen_rtx_SET (VOIDmode, pc_rtx, x));\n+  aarch64_emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));\n \n   aarch64_emit_store_exclusive (mode, scratch, mem, newval, operands[5]);\n \n@@ -9295,13 +9291,13 @@ aarch64_split_compare_and_swap (rtx operands[])\n       x = gen_rtx_NE (VOIDmode, scratch, const0_rtx);\n       x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n \t\t\t\tgen_rtx_LABEL_REF (Pmode, label1), pc_rtx);\n-      aarch64_emit_unlikely_jump (gen_rtx_SET (VOIDmode, pc_rtx, x));\n+      aarch64_emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));\n     }\n   else\n     {\n       cond = gen_rtx_REG (CCmode, CC_REGNUM);\n       x = gen_rtx_COMPARE (CCmode, scratch, const0_rtx);\n-      emit_insn (gen_rtx_SET (VOIDmode, cond, x));\n+      emit_insn (gen_rtx_SET (cond, x));\n     }\n \n   emit_label (label2);\n@@ -9339,9 +9335,9 @@ aarch64_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n \n     case NOT:\n       x = gen_rtx_AND (wmode, old_out, value);\n-      emit_insn (gen_rtx_SET (VOIDmode, new_out, x));\n+      emit_insn (gen_rtx_SET (new_out, x));\n       x = gen_rtx_NOT (wmode, new_out);\n-      emit_insn (gen_rtx_SET (VOIDmode, new_out, x));\n+      emit_insn (gen_rtx_SET (new_out, x));\n       break;\n \n     case MINUS:\n@@ -9354,7 +9350,7 @@ aarch64_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n \n     default:\n       x = gen_rtx_fmt_ee (code, wmode, old_out, value);\n-      emit_insn (gen_rtx_SET (VOIDmode, new_out, x));\n+      emit_insn (gen_rtx_SET (new_out, x));\n       break;\n     }\n \n@@ -9364,7 +9360,7 @@ aarch64_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n   x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n   x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n \t\t\t    gen_rtx_LABEL_REF (Pmode, label), pc_rtx);\n-  aarch64_emit_unlikely_jump (gen_rtx_SET (VOIDmode, pc_rtx, x));\n+  aarch64_emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));\n }\n \n static void\n@@ -11359,14 +11355,13 @@ aarch64_gen_adjusted_ldpstp (rtx *operands, bool load,\n     }\n \n   /* Emit adjusting instruction.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[8],\n-\t\t\t  plus_constant (DImode, base, adj_off)));\n+  emit_insn (gen_rtx_SET (operands[8], plus_constant (DImode, base, adj_off)));\n   /* Emit ldp/stp instructions.  */\n-  t1 = gen_rtx_SET (VOIDmode, operands[0], operands[1]);\n-  t2 = gen_rtx_SET (VOIDmode, operands[2], operands[3]);\n+  t1 = gen_rtx_SET (operands[0], operands[1]);\n+  t2 = gen_rtx_SET (operands[2], operands[3]);\n   emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, t1, t2)));\n-  t1 = gen_rtx_SET (VOIDmode, operands[4], operands[5]);\n-  t2 = gen_rtx_SET (VOIDmode, operands[6], operands[7]);\n+  t1 = gen_rtx_SET (operands[4], operands[5]);\n+  t2 = gen_rtx_SET (operands[6], operands[7]);\n   emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, t1, t2)));\n   return true;\n }"}, {"sha": "b715f175de361d8cec3d0b93e18e42fa965b3298", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2194,14 +2194,13 @@\n    && GP_REGNUM_P (REGNO (operands[1]))\"\n   [(const_int 0)]\n   {\n-    emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+    emit_insn (gen_rtx_SET (operands[0],\n \t\t\t    gen_rtx_XOR (DImode,\n \t\t\t\t\t gen_rtx_ASHIFTRT (DImode,\n \t\t\t\t\t\t\t   operands[1],\n \t\t\t\t\t\t\t   GEN_INT (63)),\n \t\t\t\t\t operands[1])));\n-    emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t    operands[0],\n+    emit_insn (gen_rtx_SET (operands[0],\n \t\t\t    gen_rtx_MINUS (DImode,\n \t\t\t\t\t   operands[0],\n \t\t\t\t\t   gen_rtx_ASHIFTRT (DImode,\n@@ -2633,7 +2632,7 @@\n          (match_operand 3 \"const0_operand\")]))]\n   \"\"\n \"{\n-  emit_insn (gen_rtx_SET (SImode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -4487,7 +4486,7 @@\n   cc_reg = SET_DEST (cmp);\n   bcomp = gen_rtx_NE (VOIDmode, cc_reg, const0_rtx);\n   loc_ref = gen_rtx_LABEL_REF (VOIDmode, operands [1]);\n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+  emit_jump_insn (gen_rtx_SET (pc_rtx,\n \t\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n \t\t\t\t\t\t     loc_ref, pc_rtx)));\n   DONE;"}, {"sha": "3ce2b7942b6303ad04667b3b93a558bfea315835", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 33, "deletions": 35, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1127,7 +1127,7 @@ alpha_legitimize_address_1 (rtx x, rtx scratch, machine_mode mode)\n \t  if (alpha_tls_size == 64)\n \t    {\n \t      dest = gen_reg_rtx (Pmode);\n-\t      emit_insn (gen_rtx_SET (VOIDmode, dest, eqv));\n+\t      emit_insn (gen_rtx_SET (dest, eqv));\n \t      emit_insn (gen_adddi3 (dest, dest, scratch));\n \t      return dest;\n \t    }\n@@ -1136,7 +1136,7 @@ alpha_legitimize_address_1 (rtx x, rtx scratch, machine_mode mode)\n \t      insn = gen_rtx_HIGH (Pmode, eqv);\n \t      insn = gen_rtx_PLUS (Pmode, scratch, insn);\n \t      scratch = gen_reg_rtx (Pmode);\n-\t      emit_insn (gen_rtx_SET (VOIDmode, scratch, insn));\n+\t      emit_insn (gen_rtx_SET (scratch, insn));\n \t    }\n \t  return gen_rtx_LO_SUM (Pmode, scratch, eqv);\n \n@@ -1148,7 +1148,7 @@ alpha_legitimize_address_1 (rtx x, rtx scratch, machine_mode mode)\n \t  dest = gen_reg_rtx (Pmode);\n \n \t  emit_insn (gen_get_thread_pointerdi (tp));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, scratch, eqv));\n+\t  emit_insn (gen_rtx_SET (scratch, eqv));\n \t  emit_insn (gen_adddi3 (dest, tp, scratch));\n \t  return dest;\n \n@@ -1163,7 +1163,7 @@ alpha_legitimize_address_1 (rtx x, rtx scratch, machine_mode mode)\n \t      insn = gen_rtx_HIGH (Pmode, eqv);\n \t      insn = gen_rtx_PLUS (Pmode, tp, insn);\n \t      tp = gen_reg_rtx (Pmode);\n-\t      emit_insn (gen_rtx_SET (VOIDmode, tp, insn));\n+\t      emit_insn (gen_rtx_SET (tp, insn));\n \t    }\n \t  return gen_rtx_LO_SUM (Pmode, tp, eqv);\n \n@@ -1179,8 +1179,7 @@ alpha_legitimize_address_1 (rtx x, rtx scratch, machine_mode mode)\n \t    {\n \t      if (can_create_pseudo_p ())\n \t        scratch = gen_reg_rtx (Pmode);\n-\t      emit_insn (gen_rtx_SET (VOIDmode, scratch,\n-\t\t\t\t      gen_rtx_HIGH (Pmode, x)));\n+\t      emit_insn (gen_rtx_SET (scratch, gen_rtx_HIGH (Pmode, x)));\n \t      return gen_rtx_LO_SUM (Pmode, scratch, x);\n \t    }\n \t}\n@@ -1805,7 +1804,7 @@ alpha_emit_set_const_1 (rtx target, machine_mode mode,\n \t    return pc_rtx;\n \t  if (target == NULL)\n \t    target = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, target, GEN_INT (c)));\n+\t  emit_insn (gen_rtx_SET (target, GEN_INT (c)));\n \t  return target;\n \t}\n       else if (n >= 2 + (extra != 0))\n@@ -1814,7 +1813,7 @@ alpha_emit_set_const_1 (rtx target, machine_mode mode,\n \t    return pc_rtx;\n \t  if (!can_create_pseudo_p ())\n \t    {\n-\t      emit_insn (gen_rtx_SET (VOIDmode, target, GEN_INT (high << 16)));\n+\t      emit_insn (gen_rtx_SET (target, GEN_INT (high << 16)));\n \t      temp = target;\n \t    }\n \t  else\n@@ -1832,15 +1831,15 @@ alpha_emit_set_const_1 (rtx target, machine_mode mode,\n \t      if (! subtarget)\n \t\tsubtarget = gen_reg_rtx (mode);\n \t      insn = gen_rtx_PLUS (mode, temp, GEN_INT (extra << 16));\n-\t      insn = gen_rtx_SET (VOIDmode, subtarget, insn);\n+\t      insn = gen_rtx_SET (subtarget, insn);\n \t      emit_insn (insn);\n \t      temp = subtarget;\n \t    }\n \n \t  if (target == NULL)\n \t    target = gen_reg_rtx (mode);\n \t  insn = gen_rtx_PLUS (mode, temp, GEN_INT (low));\n-\t  insn = gen_rtx_SET (VOIDmode, target, insn);\n+\t  insn = gen_rtx_SET (target, insn);\n \t  emit_insn (insn);\n \t  return target;\n \t}\n@@ -2517,7 +2516,7 @@ alpha_emit_floatuns (rtx operands[2])\n \n   emit_cmp_and_jump_insns (in, const0_rtx, LT, const0_rtx, DImode, 0, neglab);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, out, gen_rtx_FLOAT (mode, in)));\n+  emit_insn (gen_rtx_SET (out, gen_rtx_FLOAT (mode, in)));\n   emit_jump_insn (gen_jump (donelab));\n   emit_barrier ();\n \n@@ -2526,8 +2525,8 @@ alpha_emit_floatuns (rtx operands[2])\n   emit_insn (gen_lshrdi3 (i0, in, const1_rtx));\n   emit_insn (gen_anddi3 (i1, in, const1_rtx));\n   emit_insn (gen_iordi3 (i0, i0, i1));\n-  emit_insn (gen_rtx_SET (VOIDmode, f0, gen_rtx_FLOAT (mode, i0)));\n-  emit_insn (gen_rtx_SET (VOIDmode, out, gen_rtx_PLUS (mode, f0, f0)));\n+  emit_insn (gen_rtx_SET (f0, gen_rtx_FLOAT (mode, i0)));\n+  emit_insn (gen_rtx_SET (out, gen_rtx_PLUS (mode, f0, f0)));\n \n   emit_label (donelab);\n }\n@@ -2653,7 +2652,7 @@ alpha_emit_conditional_branch (rtx operands[], machine_mode cmp_mode)\n     }\n \n   /* Emit the branch instruction.  */\n-  tem = gen_rtx_SET (VOIDmode, pc_rtx,\n+  tem = gen_rtx_SET (pc_rtx,\n \t\t     gen_rtx_IF_THEN_ELSE (VOIDmode,\n \t\t\t\t\t   gen_rtx_fmt_ee (branch_code,\n \t\t\t\t\t\t\t   branch_mode, tem,\n@@ -2735,16 +2734,16 @@ alpha_emit_setcc (rtx operands[], machine_mode cmp_mode)\n   if (cmp_code != UNKNOWN)\n     {\n       tmp = gen_reg_rtx (cmp_mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, tmp,\n-\t\t\t      gen_rtx_fmt_ee (cmp_code, cmp_mode, op0, op1)));\n+      emit_insn (gen_rtx_SET (tmp, gen_rtx_fmt_ee (cmp_code, cmp_mode,\n+\t\t\t\t\t\t   op0, op1)));\n \n       op0 = cmp_mode != DImode ? gen_lowpart (DImode, tmp) : tmp;\n       op1 = const0_rtx;\n     }\n \n   /* Emit the setcc instruction.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n-\t\t\t  gen_rtx_fmt_ee (code, DImode, op0, op1)));\n+  emit_insn (gen_rtx_SET (operands[0], gen_rtx_fmt_ee (code, DImode,\n+\t\t\t\t\t\t       op0, op1)));\n   return true;\n }\n \n@@ -2830,9 +2829,8 @@ alpha_emit_conditional_move (rtx cmp, machine_mode mode)\n \t}\n \n       tem = gen_reg_rtx (cmp_mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, tem,\n-\t\t\t      gen_rtx_fmt_ee (cmp_code, cmp_mode,\n-\t\t\t\t\t      op0, op1)));\n+      emit_insn (gen_rtx_SET (tem, gen_rtx_fmt_ee (cmp_code, cmp_mode,\n+\t\t\t\t\t\t   op0, op1)));\n \n       cmp_mode = cmp_mode == DImode ? DFmode : DImode;\n       op0 = gen_lowpart (cmp_mode, tem);\n@@ -2956,16 +2954,16 @@ alpha_split_conditional_move (enum rtx_code code, rtx dest, rtx cond,\n       && (diff <= 8 || alpha_tune == PROCESSOR_EV6))\n     {\n       tmp = gen_rtx_fmt_ee (code, DImode, cond, const0_rtx);\n-      emit_insn (gen_rtx_SET (VOIDmode, copy_rtx (subtarget), tmp));\n+      emit_insn (gen_rtx_SET (copy_rtx (subtarget), tmp));\n \n       tmp = gen_rtx_ASHIFT (DImode, copy_rtx (subtarget),\n \t\t\t    GEN_INT (exact_log2 (t)));\n-      emit_insn (gen_rtx_SET (VOIDmode, target, tmp));\n+      emit_insn (gen_rtx_SET (target, tmp));\n     }\n   else if (f == 0 && t == -1)\n     {\n       tmp = gen_rtx_fmt_ee (code, DImode, cond, const0_rtx);\n-      emit_insn (gen_rtx_SET (VOIDmode, copy_rtx (subtarget), tmp));\n+      emit_insn (gen_rtx_SET (copy_rtx (subtarget), tmp));\n \n       emit_insn (gen_negdi2 (target, copy_rtx (subtarget)));\n     }\n@@ -2974,7 +2972,7 @@ alpha_split_conditional_move (enum rtx_code code, rtx dest, rtx cond,\n       rtx add_op;\n \n       tmp = gen_rtx_fmt_ee (code, DImode, cond, const0_rtx);\n-      emit_insn (gen_rtx_SET (VOIDmode, copy_rtx (subtarget), tmp));\n+      emit_insn (gen_rtx_SET (copy_rtx (subtarget), tmp));\n \n       if (diff == 1)\n \temit_insn (gen_adddi3 (target, copy_rtx (subtarget), GEN_INT (f)));\n@@ -2986,7 +2984,7 @@ alpha_split_conditional_move (enum rtx_code code, rtx dest, rtx cond,\n \t      tmp = gen_rtx_MULT (DImode, copy_rtx (subtarget),\n \t\t\t\t  GEN_INT (diff));\n \t      tmp = gen_rtx_PLUS (DImode, tmp, add_op);\n-\t      emit_insn (gen_rtx_SET (VOIDmode, target, tmp));\n+\t      emit_insn (gen_rtx_SET (target, tmp));\n \t    }\n \t  else\n \t    return 0;\n@@ -3701,7 +3699,7 @@ alpha_expand_unaligned_load_words (rtx *out_regs, rtx smem,\n     {\n       emit_insn (gen_extql (data_regs[i], data_regs[i], sreg));\n       emit_insn (gen_extqh (ext_tmps[i], data_regs[i+1], sreg));\n-      emit_insn (gen_rtx_SET (VOIDmode, ext_tmps[i],\n+      emit_insn (gen_rtx_SET (ext_tmps[i],\n \t\t\t      gen_rtx_IF_THEN_ELSE (DImode,\n \t\t\t\t\t\t    gen_rtx_EQ (DImode, areg,\n \t\t\t\t\t\t\t\tconst0_rtx),\n@@ -4408,7 +4406,7 @@ emit_unlikely_jump (rtx cond, rtx label)\n   rtx x;\n \n   x = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, label, pc_rtx);\n-  x = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, x));\n+  x = emit_jump_insn (gen_rtx_SET (pc_rtx, x));\n   add_int_reg_note (x, REG_BR_PROB, very_unlikely);\n }\n \n@@ -4516,15 +4514,15 @@ alpha_split_atomic_op (enum rtx_code code, rtx mem, rtx val, rtx before,\n   if (code == NOT)\n     {\n       x = gen_rtx_AND (mode, before, val);\n-      emit_insn (gen_rtx_SET (VOIDmode, val, x));\n+      emit_insn (gen_rtx_SET (val, x));\n \n       x = gen_rtx_NOT (mode, val);\n     }\n   else\n     x = gen_rtx_fmt_ee (code, mode, before, val);\n   if (after)\n-    emit_insn (gen_rtx_SET (VOIDmode, after, copy_rtx (x)));\n-  emit_insn (gen_rtx_SET (VOIDmode, scratch, x));\n+    emit_insn (gen_rtx_SET (after, copy_rtx (x)));\n+  emit_insn (gen_rtx_SET (scratch, x));\n \n   emit_store_conditional (mode, cond, mem, scratch);\n \n@@ -4576,7 +4574,7 @@ alpha_split_compare_and_swap (rtx operands[])\n   else\n     {\n       x = gen_rtx_EQ (DImode, x, oldval);\n-      emit_insn (gen_rtx_SET (VOIDmode, cond, x));\n+      emit_insn (gen_rtx_SET (cond, x));\n       x = gen_rtx_EQ (DImode, cond, const0_rtx);\n     }\n   emit_unlikely_jump (x, label2);\n@@ -4691,7 +4689,7 @@ alpha_split_compare_and_swap_12 (rtx operands[])\n   else\n     {\n       x = gen_rtx_EQ (DImode, dest, oldval);\n-      emit_insn (gen_rtx_SET (VOIDmode, cond, x));\n+      emit_insn (gen_rtx_SET (cond, x));\n       x = gen_rtx_EQ (DImode, cond, const0_rtx);\n     }\n   emit_unlikely_jump (x, label2);\n@@ -7712,7 +7710,7 @@ emit_frame_store_1 (rtx value, rtx base_reg, HOST_WIDE_INT frame_bias,\n \t}\n \n       add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t    gen_rtx_SET (VOIDmode, mem, frame_reg));\n+\t\t    gen_rtx_SET (mem, frame_reg));\n     }\n }\n \n@@ -7893,7 +7891,7 @@ alpha_expand_prologue (void)\n          note it looks at instead.  */\n       RTX_FRAME_RELATED_P (seq) = 1;\n       add_reg_note (seq, REG_FRAME_RELATED_EXPR,\n-\t\t    gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t    gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t-frame_size)));\n     }"}, {"sha": "2f6a8a221e73e4bd403d747798038f726078522c", "filename": "gcc/config/alpha/alpha.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Falpha%2Falpha.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Falpha%2Falpha.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2336,8 +2336,7 @@\n      bit at bit 48 of the fraction, which is representable in DFmode,\n      which prevents rounding error in the final conversion to SFmode.  */\n \n-  emit_insn (gen_rtx_SET (VOIDmode, sticky,\n-\t\t\t  gen_rtx_NE (DImode, lo, const0_rtx)));\n+  emit_insn (gen_rtx_SET (sticky, gen_rtx_NE (DImode, lo, const0_rtx)));\n   emit_insn (gen_iordi3 (hi, hi, sticky));\n   emit_insn (gen_trunctfdf2 (tmpf, arg));\n   emit_insn (gen_truncdfsf2 (operands[0], tmpf));\n@@ -4203,7 +4202,7 @@\n       emit_insn (gen_movdi (operand_subword (target, 1, 0, TImode), out[1]));\n \n       if (target != operands[0])\n-\temit_insn (gen_rtx_SET (VOIDmode, operands[0], target));\n+\temit_insn (gen_rtx_SET (operands[0], target));\n \n       DONE;\n     }"}, {"sha": "afcbc29832ca48a1354ce1f1b03a42971261804a", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 19, "deletions": 23, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1583,7 +1583,7 @@ gen_compare_reg (rtx comparison, machine_mode omode)\n       }\n \n       if (mode != CC_FPXmode)\n-\temit_insn (gen_rtx_SET (VOIDmode, cc_reg,\n+\temit_insn (gen_rtx_SET (cc_reg,\n \t\t\t\tgen_rtx_COMPARE (mode,\n \t\t\t\t\t\t gen_rtx_REG (CC_FPXmode, 61),\n \t\t\t\t\t\t const0_rtx)));\n@@ -1620,8 +1620,7 @@ gen_compare_reg (rtx comparison, machine_mode omode)\n       emit_insn (gen_cmp_float (cc_reg, gen_rtx_COMPARE (mode, op0, op1)));\n     }\n   else\n-    emit_insn (gen_rtx_SET (omode, cc_reg,\n-\t\t\t    gen_rtx_COMPARE (mode, x, y)));\n+    emit_insn (gen_rtx_SET (cc_reg, gen_rtx_COMPARE (mode, x, y)));\n   return gen_rtx_fmt_ee (code, omode, cc_reg, const0_rtx);\n }\n \n@@ -1777,7 +1776,7 @@ frame_insn (rtx x)\n static rtx\n frame_move (rtx dst, rtx src)\n {\n-  return frame_insn (gen_rtx_SET (VOIDmode, dst, src));\n+  return frame_insn (gen_rtx_SET (dst, src));\n }\n \n /* Like frame_move, but add a REG_INC note for REG if ADDR contains an\n@@ -2191,9 +2190,9 @@ arc_save_restore (rtx base_reg,\n \t\t= gen_frame_mem (SImode, plus_constant (Pmode, base_reg, off));\n \n \t      if (epilogue_p)\n-\t\tXVECEXP (insn, 0, i) = gen_rtx_SET (VOIDmode, reg, mem);\n+\t\tXVECEXP (insn, 0, i) = gen_rtx_SET (reg, mem);\n \t      else\n-\t\tXVECEXP (insn, 0, i) = gen_rtx_SET (VOIDmode, mem, reg);\n+\t\tXVECEXP (insn, 0, i) = gen_rtx_SET (mem, reg);\n \t      gmask = gmask & ~(1L << r);\n \t    }\n \t  if (epilogue_p == 2)\n@@ -2235,10 +2234,10 @@ arc_save_restore (rtx base_reg,\n     {\n       rtx r12 = gen_rtx_REG (Pmode, 12);\n \n-      frame_insn (gen_rtx_SET (VOIDmode, r12, GEN_INT (offset)));\n+      frame_insn (gen_rtx_SET (r12, GEN_INT (offset)));\n       XVECEXP (sibthunk_insn, 0, 0) = ret_rtx;\n       XVECEXP (sibthunk_insn, 0, 1)\n-\t= gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t= gen_rtx_SET (stack_pointer_rtx,\n \t\t       gen_rtx_PLUS (Pmode, stack_pointer_rtx, r12));\n       sibthunk_insn = emit_jump_insn (sibthunk_insn);\n       RTX_FRAME_RELATED_P (sibthunk_insn) = 1;\n@@ -2550,7 +2549,7 @@ arc_finalize_pic (void)\n   pat = gen_rtx_UNSPEC (Pmode, gen_rtvec (1, pat), ARC_UNSPEC_GOT);\n   pat = gen_rtx_CONST (Pmode, pat);\n \n-  pat = gen_rtx_SET (VOIDmode, baseptr_rtx, pat);\n+  pat = gen_rtx_SET (baseptr_rtx, pat);\n \n   emit_insn (pat);\n }\n@@ -5939,8 +5938,7 @@ arc_reorg (void)\n \t      if (next_active_insn (top_label) == insn)\n \t\t{\n \t\t  rtx lc_set\n-\t\t    = gen_rtx_SET (VOIDmode,\n-\t\t\t\t   XEXP (XVECEXP (PATTERN (lp), 0, 3), 0),\n+\t\t    = gen_rtx_SET (XEXP (XVECEXP (PATTERN (lp), 0, 3), 0),\n \t\t\t\t   const0_rtx);\n \n \t\t  rtx_insn *lc_set_insn = emit_insn_before (lc_set, insn);\n@@ -6204,7 +6202,7 @@ arc_reorg (void)\n \n \t\t  brcc_insn\n \t\t    = gen_rtx_IF_THEN_ELSE (VOIDmode, op, label, pc_rtx);\n-\t\t  brcc_insn = gen_rtx_SET (VOIDmode, pc_rtx, brcc_insn);\n+\t\t  brcc_insn = gen_rtx_SET (pc_rtx, brcc_insn);\n \t\t  cc_clob_rtx = gen_rtx_CLOBBER (VOIDmode, cc_clob_rtx);\n \t\t  brcc_insn\n \t\t    = gen_rtx_PARALLEL\n@@ -7614,7 +7612,7 @@ prepare_move_operands (rtx *operands, machine_mode mode)\n \t     variables.  */\n \t  operands[1] = arc_rewrite_small_data (operands[1]);\n \n-\t  emit_insn (gen_rtx_SET (mode, operands[0],operands[1]));\n+\t  emit_insn (gen_rtx_SET (operands[0],operands[1]));\n \t  /* ??? This note is useless, since it only restates the set itself.\n \t     We should rather use the original SYMBOL_REF.  However, there is\n \t     the problem that we are lying to the compiler about these\n@@ -7686,7 +7684,7 @@ prepare_extend_operands (rtx *operands, enum rtx_code code,\n \t variables.  */\n       operands[1]\n \t= gen_rtx_fmt_e (code, omode, arc_rewrite_small_data (operands[1]));\n-      emit_insn (gen_rtx_SET (omode, operands[0], operands[1]));\n+      emit_insn (gen_rtx_SET (operands[0], operands[1]));\n       set_unique_reg_note (get_last_insn (), REG_EQUAL, operands[1]);\n \n       /* Take care of the REG_EQUAL note that will be attached to mark the\n@@ -8223,7 +8221,7 @@ conditionalize_nonjump (rtx pat, rtx cond, rtx insn, bool annulled)\n \t      /* Leave add_n alone - the canonical form is to\n \t\t have the complex summand first.  */\n \t      && REG_P (src0))\n-\t    pat = gen_rtx_SET (VOIDmode, dst,\n+\t    pat = gen_rtx_SET (dst,\n \t\t\t       gen_rtx_fmt_ee (GET_CODE (src), GET_MODE (src),\n \t\t\t\t\t       src1, src0));\n \t}\n@@ -8365,7 +8363,7 @@ arc_ifcvt (void)\n \t  else if (JUMP_P (insn) && ANY_RETURN_P (PATTERN (insn)))\n \t    {\n \t      pat = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, pat, pc_rtx);\n-\t      pat = gen_rtx_SET (VOIDmode, pc_rtx, pat);\n+\t      pat = gen_rtx_SET (pc_rtx, pat);\n \t    }\n \t  else\n \t    gcc_unreachable ();\n@@ -8928,7 +8926,7 @@ arc_process_double_reg_moves (rtx *operands)\n       if (TARGET_DPFP_DISABLE_LRSR)\n \t{\n \t  /* gen *movdf_insn_nolrsr */\n-\t  rtx set = gen_rtx_SET (VOIDmode, dest, src);\n+\t  rtx set = gen_rtx_SET (dest, src);\n \t  rtx use1 = gen_rtx_USE (VOIDmode, const1_rtx);\n \t  emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, set, use1)));\n \t}\n@@ -8940,12 +8938,10 @@ arc_process_double_reg_moves (rtx *operands)\n \t  rtx destLow  = simplify_gen_subreg(SImode, dest, DFmode, 0);\n \n \t  /* Produce the two LR insns to get the high and low parts.  */\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  destHigh,\n+\t  emit_insn (gen_rtx_SET (destHigh,\n \t\t\t\t  gen_rtx_UNSPEC_VOLATILE (Pmode, gen_rtvec (1, src),\n \t\t\t\t  VUNSPEC_LR_HIGH)));\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  destLow,\n+\t  emit_insn (gen_rtx_SET (destLow,\n \t\t\t\t  gen_rtx_UNSPEC_VOLATILE (Pmode, gen_rtvec (1, src),\n \t\t\t\t  VUNSPEC_LR)));\n \t}\n@@ -9042,8 +9038,8 @@ arc_split_move (rtx *operands)\n   operands[5-swap] = xop[3];\n \n   start_sequence ();\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[2], operands[3]));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[4], operands[5]));\n+  emit_insn (gen_rtx_SET (operands[2], operands[3]));\n+  emit_insn (gen_rtx_SET (operands[4], operands[5]));\n   val = get_insns ();\n   end_sequence ();\n "}, {"sha": "931f9a1870382689c7eb07e93734ae645fa4f941", "filename": "gcc/config/arc/arc.md", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farc%2Farc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farc%2Farc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2287,7 +2287,7 @@\n \t(gen_rtx_COND_EXEC\n \t  (VOIDmode,\n \t   gen_rtx_LTU (VOIDmode, gen_rtx_REG (CC_Cmode, CC_REG), GEN_INT (0)),\n-\t   gen_rtx_SET (VOIDmode, h0, plus_constant (SImode, h0, 1))));\n+\t   gen_rtx_SET (h0, plus_constant (SImode, h0, 1))));\n       DONE;\n     }\n   emit_insn (gen_add_f (l0, l1, l2));\n@@ -2512,13 +2512,13 @@\n     {\n       h1 = simplify_gen_binary (MINUS, SImode, h1, h2);\n       if (!rtx_equal_p (h0, h1))\n-\temit_insn (gen_rtx_SET (VOIDmode, h0, h1));\n+\temit_insn (gen_rtx_SET (h0, h1));\n       emit_insn (gen_sub_f (l0, l1, l2));\n       emit_insn\n \t(gen_rtx_COND_EXEC\n \t  (VOIDmode,\n \t   gen_rtx_LTU (VOIDmode, gen_rtx_REG (CC_Cmode, CC_REG), GEN_INT (0)),\n-\t   gen_rtx_SET (VOIDmode, h0, plus_constant (SImode, h0, -1))));\n+\t   gen_rtx_SET (h0, plus_constant (SImode, h0, -1))));\n       DONE;\n     }\n   emit_insn (gen_sub_f (l0, l1, l2));\n@@ -3544,7 +3544,7 @@\n   x = gen_rtx_GTU (VOIDmode, gen_rtx_REG (CCmode, CC_REG), const0_rtx);\n   x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n \t\t\t    gen_rtx_LABEL_REF (VOIDmode, operands[4]), pc_rtx);\n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, x));\n+  emit_jump_insn (gen_rtx_SET (pc_rtx, x));\n   if (TARGET_COMPACT_CASESI)\n     {\n       emit_jump_insn (gen_casesi_compact_jump (operands[5], operands[7]));\n@@ -4079,13 +4079,12 @@\n     (gen_rtx_COND_EXEC\n       (VOIDmode,\n        gen_rtx_LT (VOIDmode, gen_rtx_REG (CC_ZNmode, CC_REG), const0_rtx),\n-       gen_rtx_SET (VOIDmode, operands[0], const0_rtx)));\n+       gen_rtx_SET (operands[0], const0_rtx)));\n   emit_insn\n     (gen_rtx_COND_EXEC\n       (VOIDmode,\n        gen_rtx_GE (VOIDmode, gen_rtx_REG (CC_ZNmode, CC_REG), const0_rtx),\n-       gen_rtx_SET (VOIDmode, operands[0],\n-\t\t    plus_constant (SImode, operands[0], 1))));\n+       gen_rtx_SET (operands[0], plus_constant (SImode, operands[0], 1))));\n   DONE;\n })\n \n@@ -4108,13 +4107,12 @@\n     (gen_rtx_COND_EXEC\n       (VOIDmode,\n        gen_rtx_LT (VOIDmode, gen_rtx_REG (CC_ZNmode, CC_REG), const0_rtx),\n-       gen_rtx_SET (VOIDmode, operands[0], GEN_INT (32))));\n+       gen_rtx_SET (operands[0], GEN_INT (32))));\n   emit_insn\n     (gen_rtx_COND_EXEC\n       (VOIDmode,\n        gen_rtx_GE (VOIDmode, gen_rtx_REG (CC_ZNmode, CC_REG), const0_rtx),\n-       gen_rtx_SET (VOIDmode, operands[0],\n-\t\t    gen_rtx_MINUS (SImode, GEN_INT (31), temp))));\n+       gen_rtx_SET (operands[0], gen_rtx_MINUS (SImode, GEN_INT (31), temp))));\n   DONE;\n })\n "}, {"sha": "f4c2f03ce2e0e04c18cd0ad70e0688e6f3591348", "filename": "gcc/config/arm/arm-fixed.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farm%2Farm-fixed.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farm%2Farm-fixed.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-fixed.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -372,7 +372,7 @@\n \n   rshift = gen_rtx_ASHIFTRT (SImode, tmp, GEN_INT (7));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, gen_lowpart (HImode, operands[0]),\n+  emit_insn (gen_rtx_SET (gen_lowpart (HImode, operands[0]),\n \t\t\t  gen_rtx_SS_TRUNCATE (HImode, rshift)));\n \n   DONE;"}, {"sha": "1b3a6fc5006fc722e3d70e8aca58129bf77542ef", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 92, "deletions": 128, "changes": 220, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2234,7 +2234,7 @@ arm_constant_limit (bool size_p)\n inline static rtx_insn *\n emit_set_insn (rtx x, rtx y)\n {\n-  return emit_insn (gen_rtx_SET (VOIDmode, x, y));\n+  return emit_insn (gen_rtx_SET (x, y));\n }\n \n /* Return the number of bits set in VALUE.  */\n@@ -4136,7 +4136,7 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \t{\n \t  if (generate)\n \t    emit_constant_insn (cond,\n-\t\t\t\tgen_rtx_SET (VOIDmode, target,\n+\t\t\t\tgen_rtx_SET (target,\n \t\t\t\t\t     GEN_INT (ARM_SIGN_EXTEND (val))));\n \t  return 1;\n \t}\n@@ -4147,8 +4147,7 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \t    return 0;\n \n \t  if (generate)\n-\t    emit_constant_insn (cond,\n-\t\t\t\tgen_rtx_SET (VOIDmode, target, source));\n+\t    emit_constant_insn (cond, gen_rtx_SET (target, source));\n \t  return 1;\n \t}\n       break;\n@@ -4157,17 +4156,15 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n       if (remainder == 0)\n \t{\n \t  if (generate)\n-\t    emit_constant_insn (cond,\n-\t\t\t\tgen_rtx_SET (VOIDmode, target, const0_rtx));\n+\t    emit_constant_insn (cond, gen_rtx_SET (target, const0_rtx));\n \t  return 1;\n \t}\n       if (remainder == 0xffffffff)\n \t{\n \t  if (reload_completed && rtx_equal_p (target, source))\n \t    return 0;\n \t  if (generate)\n-\t    emit_constant_insn (cond,\n-\t\t\t\tgen_rtx_SET (VOIDmode, target, source));\n+\t    emit_constant_insn (cond, gen_rtx_SET (target, source));\n \t  return 1;\n \t}\n       can_invert = 1;\n@@ -4179,16 +4176,15 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \t  if (reload_completed && rtx_equal_p (target, source))\n \t    return 0;\n \t  if (generate)\n-\t    emit_constant_insn (cond,\n-\t\t\t\tgen_rtx_SET (VOIDmode, target, source));\n+\t    emit_constant_insn (cond, gen_rtx_SET (target, source));\n \t  return 1;\n \t}\n \n       if (remainder == 0xffffffff)\n \t{\n \t  if (generate)\n \t    emit_constant_insn (cond,\n-\t\t\t\tgen_rtx_SET (VOIDmode, target,\n+\t\t\t\tgen_rtx_SET (target,\n \t\t\t\t\t     gen_rtx_NOT (mode, source)));\n \t  return 1;\n \t}\n@@ -4202,15 +4198,15 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \t{\n \t  if (generate)\n \t    emit_constant_insn (cond,\n-\t\t\t\tgen_rtx_SET (VOIDmode, target,\n+\t\t\t\tgen_rtx_SET (target,\n \t\t\t\t\t     gen_rtx_NEG (mode, source)));\n \t  return 1;\n \t}\n       if (const_ok_for_arm (val))\n \t{\n \t  if (generate)\n \t    emit_constant_insn (cond,\n-\t\t\t\tgen_rtx_SET (VOIDmode, target,\n+\t\t\t\tgen_rtx_SET (target,\n \t\t\t\t\t     gen_rtx_MINUS (mode, GEN_INT (val),\n \t\t\t\t\t\t\t    source)));\n \t  return 1;\n@@ -4227,7 +4223,7 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n     {\n       if (generate)\n \temit_constant_insn (cond,\n-\t\t\t    gen_rtx_SET (VOIDmode, target,\n+\t\t\t    gen_rtx_SET (target,\n \t\t\t\t\t (source\n \t\t\t\t\t  ? gen_rtx_fmt_ee (code, mode, source,\n \t\t\t\t\t\t\t    GEN_INT (val))\n@@ -4314,8 +4310,7 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \t\t{\n \t\t  rtx new_src = subtargets ? gen_reg_rtx (mode) : target;\n \t\t  emit_constant_insn (cond,\n-\t\t\t\t      gen_rtx_SET (VOIDmode, new_src,\n-\t\t\t\t\t\t   GEN_INT (temp1)));\n+\t\t\t\t      gen_rtx_SET (new_src, GEN_INT (temp1)));\n \t\t  emit_constant_insn (cond,\n \t\t\t\t      gen_ashrsi3 (target, new_src,\n \t\t\t\t\t\t   GEN_INT (set_sign_bit_copies - 1)));\n@@ -4331,8 +4326,7 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \t\t{\n \t\t  rtx new_src = subtargets ? gen_reg_rtx (mode) : target;\n \t\t  emit_constant_insn (cond,\n-\t\t\t\t      gen_rtx_SET (VOIDmode, new_src,\n-\t\t\t\t\t\t   GEN_INT (temp1)));\n+\t\t\t\t      gen_rtx_SET (new_src, GEN_INT (temp1)));\n \t\t  emit_constant_insn (cond,\n \t\t\t\t      gen_ashrsi3 (target, new_src,\n \t\t\t\t\t\t   GEN_INT (set_sign_bit_copies - 1)));\n@@ -4365,8 +4359,7 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \t\t{\n \t\t  rtx new_src = subtargets ? gen_reg_rtx (mode) : target;\n \t\t  emit_constant_insn (cond,\n-\t\t\t\t      gen_rtx_SET (VOIDmode, new_src,\n-\t\t\t\t\t\t   GEN_INT (temp1)));\n+\t\t\t\t      gen_rtx_SET (new_src, GEN_INT (temp1)));\n \t\t  emit_constant_insn (cond,\n \t\t\t\t      gen_addsi3 (target, new_src,\n \t\t\t\t\t\t  GEN_INT (-temp2)));\n@@ -4402,7 +4395,7 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \t\t    emit_constant_insn\n \t\t      (cond,\n \t\t       gen_rtx_SET\n-\t\t       (VOIDmode, target,\n+\t\t       (target,\n \t\t\tgen_rtx_IOR (mode,\n \t\t\t\t     gen_rtx_ASHIFT (mode, source,\n \t\t\t\t\t\t     GEN_INT (i)),\n@@ -4426,7 +4419,7 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \t\t  if (generate)\n \t\t    emit_constant_insn\n \t\t      (cond,\n-\t\t       gen_rtx_SET (VOIDmode, target,\n+\t\t       gen_rtx_SET (target,\n \t\t\t\t    gen_rtx_IOR\n \t\t\t\t    (mode,\n \t\t\t\t     gen_rtx_LSHIFTRT (mode, source,\n@@ -4454,10 +4447,9 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \t\t  rtx sub = subtargets ? gen_reg_rtx (mode) : target;\n \n \t\t  emit_constant_insn (cond,\n-\t\t\t\t      gen_rtx_SET (VOIDmode, sub,\n-\t\t\t\t\t\t   GEN_INT (val)));\n+\t\t\t\t      gen_rtx_SET (sub, GEN_INT (val)));\n \t\t  emit_constant_insn (cond,\n-\t\t\t\t      gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t      gen_rtx_SET (target,\n \t\t\t\t\t\t   gen_rtx_fmt_ee (code, mode,\n \t\t\t\t\t\t\t\t   source, sub)));\n \t\t}\n@@ -4489,14 +4481,14 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \n \t      emit_constant_insn\n \t\t(cond,\n-\t\t gen_rtx_SET (VOIDmode, sub,\n+\t\t gen_rtx_SET (sub,\n \t\t\t      gen_rtx_NOT (mode,\n \t\t\t\t\t   gen_rtx_ASHIFT (mode,\n \t\t\t\t\t\t\t   source,\n \t\t\t\t\t\t\t   shift))));\n \t      emit_constant_insn\n \t\t(cond,\n-\t\t gen_rtx_SET (VOIDmode, target,\n+\t\t gen_rtx_SET (target,\n \t\t\t      gen_rtx_NOT (mode,\n \t\t\t\t\t   gen_rtx_LSHIFTRT (mode, sub,\n \t\t\t\t\t\t\t     shift))));\n@@ -4524,14 +4516,14 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \n \t      emit_constant_insn\n \t\t(cond,\n-\t\t gen_rtx_SET (VOIDmode, sub,\n+\t\t gen_rtx_SET (sub,\n \t\t\t      gen_rtx_NOT (mode,\n \t\t\t\t\t   gen_rtx_LSHIFTRT (mode,\n \t\t\t\t\t\t\t     source,\n \t\t\t\t\t\t\t     shift))));\n \t      emit_constant_insn\n \t\t(cond,\n-\t\t gen_rtx_SET (VOIDmode, target,\n+\t\t gen_rtx_SET (target,\n \t\t\t      gen_rtx_NOT (mode,\n \t\t\t\t\t   gen_rtx_ASHIFT (mode, sub,\n \t\t\t\t\t\t\t   shift))));\n@@ -4552,17 +4544,17 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \t    {\n \t      rtx sub = subtargets ? gen_reg_rtx (mode) : target;\n \t      emit_constant_insn (cond,\n-\t\t\t\t  gen_rtx_SET (VOIDmode, sub,\n+\t\t\t\t  gen_rtx_SET (sub,\n \t\t\t\t\t       gen_rtx_NOT (mode, source)));\n \t      source = sub;\n \t      if (subtargets)\n \t\tsub = gen_reg_rtx (mode);\n \t      emit_constant_insn (cond,\n-\t\t\t\t  gen_rtx_SET (VOIDmode, sub,\n+\t\t\t\t  gen_rtx_SET (sub,\n \t\t\t\t\t       gen_rtx_AND (mode, source,\n \t\t\t\t\t\t\t    GEN_INT (temp1))));\n \t      emit_constant_insn (cond,\n-\t\t\t\t  gen_rtx_SET (VOIDmode, target,\n+\t\t\t\t  gen_rtx_SET (target,\n \t\t\t\t\t       gen_rtx_NOT (mode, sub)));\n \t    }\n \t  return 3;\n@@ -4728,9 +4720,7 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n \t  else\n \t    temp1_rtx = gen_rtx_fmt_ee (code, mode, source, temp1_rtx);\n \n-\t  emit_constant_insn (cond,\n-\t\t\t      gen_rtx_SET (VOIDmode, new_src,\n-\t\t\t\t\t   temp1_rtx));\n+\t  emit_constant_insn (cond, gen_rtx_SET (new_src, temp1_rtx));\n \t  source = new_src;\n \n \t  if (code == SET)\n@@ -4747,7 +4737,7 @@ arm_gen_constant (enum rtx_code code, machine_mode mode, rtx cond,\n   if (final_invert)\n     {\n       if (generate)\n-\temit_constant_insn (cond, gen_rtx_SET (VOIDmode, target,\n+\temit_constant_insn (cond, gen_rtx_SET (target,\n \t\t\t\t\t       gen_rtx_NOT (mode, source)));\n       insns++;\n     }\n@@ -6840,7 +6830,7 @@ arm_load_pic_register (unsigned long saved_regs ATTRIBUTE_UNUSED)\n       pic_rtx = gen_rtx_CONST (Pmode, pic_rtx);\n       emit_insn (gen_pic_load_addr_32bit (pic_reg, pic_rtx));\n \n-      emit_insn (gen_rtx_SET (Pmode, pic_reg, gen_rtx_MEM (Pmode, pic_reg)));\n+      emit_insn (gen_rtx_SET (pic_reg, gen_rtx_MEM (Pmode, pic_reg)));\n \n       pic_tmp = gen_rtx_SYMBOL_REF (Pmode, VXWORKS_GOTT_INDEX);\n       emit_insn (gen_pic_offset_arm (pic_reg, pic_reg, pic_tmp));\n@@ -12634,8 +12624,7 @@ neon_expand_vector_init (rtx target, rtx vals)\n   if (all_same && GET_MODE_SIZE (inner_mode) <= 4)\n     {\n       x = copy_to_mode_reg (inner_mode, XVECEXP (vals, 0, 0));\n-      emit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t      gen_rtx_VEC_DUPLICATE (mode, x)));\n+      emit_insn (gen_rtx_SET (target, gen_rtx_VEC_DUPLICATE (mode, x)));\n       return;\n     }\n \n@@ -13837,15 +13826,14 @@ arm_gen_load_multiple_1 (int count, int *regs, rtx *mems, rtx basereg,\n   if (wback_offset != 0)\n     {\n       XVECEXP (result, 0, 0)\n-\t= gen_rtx_SET (VOIDmode, basereg,\n-\t\t       plus_constant (Pmode, basereg, wback_offset));\n+\t= gen_rtx_SET (basereg, plus_constant (Pmode, basereg, wback_offset));\n       i = 1;\n       count++;\n     }\n \n   for (j = 0; i < count; i++, j++)\n     XVECEXP (result, 0, i)\n-      = gen_rtx_SET (VOIDmode, gen_rtx_REG (SImode, regs[j]), mems[j]);\n+      = gen_rtx_SET (gen_rtx_REG (SImode, regs[j]), mems[j]);\n \n   return result;\n }\n@@ -13889,15 +13877,14 @@ arm_gen_store_multiple_1 (int count, int *regs, rtx *mems, rtx basereg,\n   if (wback_offset != 0)\n     {\n       XVECEXP (result, 0, 0)\n-\t= gen_rtx_SET (VOIDmode, basereg,\n-\t\t       plus_constant (Pmode, basereg, wback_offset));\n+\t= gen_rtx_SET (basereg, plus_constant (Pmode, basereg, wback_offset));\n       i = 1;\n       count++;\n     }\n \n   for (j = 0; i < count; i++, j++)\n     XVECEXP (result, 0, i)\n-      = gen_rtx_SET (VOIDmode, mems[j], gen_rtx_REG (SImode, regs[j]));\n+      = gen_rtx_SET (mems[j], gen_rtx_REG (SImode, regs[j]));\n \n   return result;\n }\n@@ -15179,7 +15166,7 @@ arm_gen_compare_reg (enum rtx_code code, rtx x, rtx y, rtx scratch)\n \tscratch = gen_rtx_SCRATCH (SImode);\n \n       clobber = gen_rtx_CLOBBER (VOIDmode, scratch);\n-      set = gen_rtx_SET (VOIDmode, cc_reg, gen_rtx_COMPARE (mode, x, y));\n+      set = gen_rtx_SET (cc_reg, gen_rtx_COMPARE (mode, x, y));\n       emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, set, clobber)));\n     }\n   else\n@@ -17049,7 +17036,7 @@ thumb1_reorg (void)\n \t  dest = copy_rtx (dest);\n \t  src = copy_rtx (src);\n \t  src = gen_rtx_MINUS (SImode, src, const0_rtx);\n-\t  PATTERN (prev) = gen_rtx_SET (VOIDmode, dest, src);\n+\t  PATTERN (prev) = gen_rtx_SET (dest, src);\n \t  INSN_CODE (prev) = -1;\n \t  /* Set test register in INSN to dest.  */\n \t  XEXP (XEXP (SET_SRC (pat), 0), 0) = copy_rtx (dest);\n@@ -17250,7 +17237,7 @@ thumb2_reorg (void)\n \t\t      src = copy_rtx (src);\n \t\t      XEXP (src, 0) = op1;\n \t\t      XEXP (src, 1) = op0;\n-\t\t      pat = gen_rtx_SET (VOIDmode, dst, src);\n+\t\t      pat = gen_rtx_SET (dst, src);\n \t\t      vec = gen_rtvec (2, pat, clobber);\n \t\t    }\n \t\t  else /* action == CONV */\n@@ -17611,8 +17598,7 @@ vfp_emit_fstmd (int base_reg, int count)\n   base_reg += 2;\n \n   XVECEXP (par, 0, 0)\n-    = gen_rtx_SET (VOIDmode,\n-\t\t   gen_frame_mem\n+    = gen_rtx_SET (gen_frame_mem\n \t\t   (BLKmode,\n \t\t    gen_rtx_PRE_MODIFY (Pmode,\n \t\t\t\t\tstack_pointer_rtx,\n@@ -17624,14 +17610,12 @@ vfp_emit_fstmd (int base_reg, int count)\n \t\t\t\t   gen_rtvec (1, reg),\n \t\t\t\t   UNSPEC_PUSH_MULT));\n \n-  tmp = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+  tmp = gen_rtx_SET (stack_pointer_rtx,\n \t\t     plus_constant (Pmode, stack_pointer_rtx, -(count * 8)));\n   RTX_FRAME_RELATED_P (tmp) = 1;\n   XVECEXP (dwarf, 0, 0) = tmp;\n \n-  tmp = gen_rtx_SET (VOIDmode,\n-\t\t     gen_frame_mem (DFmode, stack_pointer_rtx),\n-\t\t     reg);\n+  tmp = gen_rtx_SET (gen_frame_mem (DFmode, stack_pointer_rtx), reg);\n   RTX_FRAME_RELATED_P (tmp) = 1;\n   XVECEXP (dwarf, 0, 1) = tmp;\n \n@@ -17641,8 +17625,7 @@ vfp_emit_fstmd (int base_reg, int count)\n       base_reg += 2;\n       XVECEXP (par, 0, i) = gen_rtx_USE (VOIDmode, reg);\n \n-      tmp = gen_rtx_SET (VOIDmode,\n-\t\t\t gen_frame_mem (DFmode,\n+      tmp = gen_rtx_SET (gen_frame_mem (DFmode,\n \t\t\t\t\tplus_constant (Pmode,\n \t\t\t\t\t\t       stack_pointer_rtx,\n \t\t\t\t\t\t       i * 8)),\n@@ -19636,9 +19619,8 @@ thumb2_emit_strd_push (unsigned long saved_regs_mask)\n   dwarf = gen_rtx_SEQUENCE (VOIDmode, rtvec_alloc (num_regs + 1));\n \n   /* Describe the stack adjustment.  */\n-  tmp = gen_rtx_SET (VOIDmode,\n-\t\t      stack_pointer_rtx,\n-\t\t      plus_constant (Pmode, stack_pointer_rtx, -4 * num_regs));\n+  tmp = gen_rtx_SET (stack_pointer_rtx,\n+\t\t     plus_constant (Pmode, stack_pointer_rtx, -4 * num_regs));\n   RTX_FRAME_RELATED_P (tmp) = 1;\n   XVECEXP (dwarf, 0, 0) = tmp;\n \n@@ -19667,13 +19649,12 @@ thumb2_emit_strd_push (unsigned long saved_regs_mask)\n \t\t\t      plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t     -4 * num_regs)));\n \n-      tmp = gen_rtx_SET (VOIDmode, mem, reg);\n+      tmp = gen_rtx_SET (mem, reg);\n       RTX_FRAME_RELATED_P (tmp) = 1;\n       insn = emit_insn (tmp);\n       RTX_FRAME_RELATED_P (insn) = 1;\n       add_reg_note (insn, REG_FRAME_RELATED_EXPR, dwarf);\n-      tmp = gen_rtx_SET (VOIDmode, gen_frame_mem (Pmode, stack_pointer_rtx),\n-\t\t\t reg);\n+      tmp = gen_rtx_SET (gen_frame_mem (Pmode, stack_pointer_rtx), reg);\n       RTX_FRAME_RELATED_P (tmp) = 1;\n       i++;\n       regno++;\n@@ -19707,11 +19688,11 @@ thumb2_emit_strd_push (unsigned long saved_regs_mask)\n \t    mem2 = gen_frame_mem (Pmode, plus_constant (Pmode,\n \t\t\t\t\t\t\tstack_pointer_rtx,\n \t\t\t\t\t\t\t-4 * (num_regs - 1)));\n-\t    tmp0 = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t    tmp0 = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\tplus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t       -4 * (num_regs)));\n-\t    tmp1 = gen_rtx_SET (VOIDmode, mem1, reg1);\n-\t    tmp2 = gen_rtx_SET (VOIDmode, mem2, reg2);\n+\t    tmp1 = gen_rtx_SET (mem1, reg1);\n+\t    tmp2 = gen_rtx_SET (mem2, reg2);\n \t    RTX_FRAME_RELATED_P (tmp0) = 1;\n \t    RTX_FRAME_RELATED_P (tmp1) = 1;\n \t    RTX_FRAME_RELATED_P (tmp2) = 1;\n@@ -19731,8 +19712,8 @@ thumb2_emit_strd_push (unsigned long saved_regs_mask)\n \t    mem2 = gen_frame_mem (Pmode, plus_constant (Pmode,\n \t\t\t\t\t\t\tstack_pointer_rtx,\n \t\t\t\t\t\t\t4 * (i + 1)));\n-\t    tmp1 = gen_rtx_SET (VOIDmode, mem1, reg1);\n-\t    tmp2 = gen_rtx_SET (VOIDmode, mem2, reg2);\n+\t    tmp1 = gen_rtx_SET (mem1, reg1);\n+\t    tmp2 = gen_rtx_SET (mem2, reg2);\n \t    RTX_FRAME_RELATED_P (tmp1) = 1;\n \t    RTX_FRAME_RELATED_P (tmp2) = 1;\n \t    par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n@@ -19742,14 +19723,12 @@ thumb2_emit_strd_push (unsigned long saved_regs_mask)\n \t  }\n \n \t/* Create unwind information.  This is an approximation.  */\n-\ttmp1 = gen_rtx_SET (VOIDmode,\n-\t\t\t    gen_frame_mem (Pmode,\n+\ttmp1 = gen_rtx_SET (gen_frame_mem (Pmode,\n \t\t\t\t\t   plus_constant (Pmode,\n \t\t\t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t\t\t  4 * i)),\n \t\t\t    reg1);\n-\ttmp2 = gen_rtx_SET (VOIDmode,\n-\t\t\t    gen_frame_mem (Pmode,\n+\ttmp2 = gen_rtx_SET (gen_frame_mem (Pmode,\n \t\t\t\t\t   plus_constant (Pmode,\n \t\t\t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t\t\t  4 * (i + 1))),\n@@ -19800,8 +19779,7 @@ arm_emit_strd_push (unsigned long saved_regs_mask)\n   dwarf = gen_rtx_SEQUENCE (VOIDmode, rtvec_alloc (num_regs + 1));\n \n   /* For dwarf info, we generate explicit stack update.  */\n-  tmp = gen_rtx_SET (VOIDmode,\n-                     stack_pointer_rtx,\n+  tmp = gen_rtx_SET (stack_pointer_rtx,\n                      plus_constant (Pmode, stack_pointer_rtx, -4 * num_regs));\n   RTX_FRAME_RELATED_P (tmp) = 1;\n   XVECEXP (dwarf, 0, dwarf_index++) = tmp;\n@@ -19833,7 +19811,7 @@ arm_emit_strd_push (unsigned long saved_regs_mask)\n             else\n               mem = gen_frame_mem (DImode, stack_pointer_rtx);\n \n-            tmp = gen_rtx_SET (DImode, mem, gen_rtx_REG (DImode, j));\n+            tmp = gen_rtx_SET (mem, gen_rtx_REG (DImode, j));\n             RTX_FRAME_RELATED_P (tmp) = 1;\n             tmp = emit_insn (tmp);\n \n@@ -19846,15 +19824,15 @@ arm_emit_strd_push (unsigned long saved_regs_mask)\n                                  plus_constant (Pmode,\n                                                 stack_pointer_rtx,\n                                                 offset));\n-            tmp = gen_rtx_SET (SImode, mem, gen_rtx_REG (SImode, j));\n+            tmp = gen_rtx_SET (mem, gen_rtx_REG (SImode, j));\n             RTX_FRAME_RELATED_P (tmp) = 1;\n             XVECEXP (dwarf, 0, dwarf_index++) = tmp;\n \n             mem = gen_frame_mem (SImode,\n                                  plus_constant (Pmode,\n                                                 stack_pointer_rtx,\n                                                 offset + 4));\n-            tmp = gen_rtx_SET (SImode, mem, gen_rtx_REG (SImode, j + 1));\n+            tmp = gen_rtx_SET (mem, gen_rtx_REG (SImode, j + 1));\n             RTX_FRAME_RELATED_P (tmp) = 1;\n             XVECEXP (dwarf, 0, dwarf_index++) = tmp;\n \n@@ -19880,7 +19858,7 @@ arm_emit_strd_push (unsigned long saved_regs_mask)\n             else\n               mem = gen_frame_mem (SImode, stack_pointer_rtx);\n \n-            tmp = gen_rtx_SET (SImode, mem, gen_rtx_REG (SImode, j));\n+            tmp = gen_rtx_SET (mem, gen_rtx_REG (SImode, j));\n             RTX_FRAME_RELATED_P (tmp) = 1;\n             tmp = emit_insn (tmp);\n \n@@ -19893,7 +19871,7 @@ arm_emit_strd_push (unsigned long saved_regs_mask)\n                                  plus_constant(Pmode,\n                                                stack_pointer_rtx,\n                                                offset));\n-            tmp = gen_rtx_SET (SImode, mem, gen_rtx_REG (SImode, j));\n+            tmp = gen_rtx_SET (mem, gen_rtx_REG (SImode, j));\n             RTX_FRAME_RELATED_P (tmp) = 1;\n             XVECEXP (dwarf, 0, dwarf_index++) = tmp;\n \n@@ -19992,8 +19970,7 @@ emit_multi_reg_push (unsigned long mask, unsigned long dwarf_regs_mask)\n \t  reg = gen_rtx_REG (SImode, i);\n \n \t  XVECEXP (par, 0, 0)\n-\t    = gen_rtx_SET (VOIDmode,\n-\t\t\t   gen_frame_mem\n+\t    = gen_rtx_SET (gen_frame_mem\n \t\t\t   (BLKmode,\n \t\t\t    gen_rtx_PRE_MODIFY (Pmode,\n \t\t\t\t\t\tstack_pointer_rtx,\n@@ -20007,8 +19984,7 @@ emit_multi_reg_push (unsigned long mask, unsigned long dwarf_regs_mask)\n \n \t  if (dwarf_regs_mask & (1 << i))\n \t    {\n-\t      tmp = gen_rtx_SET (VOIDmode,\n-\t\t\t\t gen_frame_mem (SImode, stack_pointer_rtx),\n+\t      tmp = gen_rtx_SET (gen_frame_mem (SImode, stack_pointer_rtx),\n \t\t\t\t reg);\n \t      RTX_FRAME_RELATED_P (tmp) = 1;\n \t      XVECEXP (dwarf, 0, dwarf_par_index++) = tmp;\n@@ -20029,8 +20005,7 @@ emit_multi_reg_push (unsigned long mask, unsigned long dwarf_regs_mask)\n \t  if (dwarf_regs_mask & (1 << i))\n \t    {\n \t      tmp\n-\t\t= gen_rtx_SET (VOIDmode,\n-\t\t\t       gen_frame_mem\n+\t\t= gen_rtx_SET (gen_frame_mem\n \t\t\t       (SImode,\n \t\t\t\tplus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t       4 * j)),\n@@ -20045,8 +20020,7 @@ emit_multi_reg_push (unsigned long mask, unsigned long dwarf_regs_mask)\n \n   par = emit_insn (par);\n \n-  tmp = gen_rtx_SET (VOIDmode,\n-\t\t     stack_pointer_rtx,\n+  tmp = gen_rtx_SET (stack_pointer_rtx,\n \t\t     plus_constant (Pmode, stack_pointer_rtx, -4 * num_regs));\n   RTX_FRAME_RELATED_P (tmp) = 1;\n   XVECEXP (dwarf, 0, 0) = tmp;\n@@ -20065,7 +20039,7 @@ arm_add_cfa_adjust_cfa_note (rtx insn, int size, rtx dest, rtx src)\n   rtx dwarf;\n \n   RTX_FRAME_RELATED_P (insn) = 1;\n-  dwarf = gen_rtx_SET (VOIDmode, dest, plus_constant (Pmode, src, size));\n+  dwarf = gen_rtx_SET (dest, plus_constant (Pmode, src, size));\n   add_reg_note (insn, REG_CFA_ADJUST_CFA, dwarf);\n }\n \n@@ -20108,8 +20082,7 @@ arm_emit_multi_reg_pop (unsigned long saved_regs_mask)\n     {\n       /* Increment the stack pointer, based on there being\n          num_regs 4-byte registers to restore.  */\n-      tmp = gen_rtx_SET (VOIDmode,\n-                         stack_pointer_rtx,\n+      tmp = gen_rtx_SET (stack_pointer_rtx,\n                          plus_constant (Pmode,\n                                         stack_pointer_rtx,\n                                         4 * num_regs));\n@@ -20128,13 +20101,12 @@ arm_emit_multi_reg_pop (unsigned long saved_regs_mask)\n             tmp = gen_frame_mem (SImode,\n                                  gen_rtx_POST_INC (Pmode,\n                                                    stack_pointer_rtx));\n-            tmp = emit_insn (gen_rtx_SET (VOIDmode, reg, tmp));\n+            tmp = emit_insn (gen_rtx_SET (reg, tmp));\n             REG_NOTES (tmp) = alloc_reg_note (REG_CFA_RESTORE, reg, dwarf);\n             return;\n           }\n \n-        tmp = gen_rtx_SET (VOIDmode,\n-                           reg,\n+        tmp = gen_rtx_SET (reg,\n                            gen_frame_mem\n                            (SImode,\n                             plus_constant (Pmode, stack_pointer_rtx, 4 * j)));\n@@ -20202,9 +20174,7 @@ arm_emit_vfp_multi_reg_pop (int first_reg, int num_regs, rtx base_reg)\n \n   /* Increment the stack pointer, based on there being\n      num_regs 8-byte registers to restore.  */\n-  tmp = gen_rtx_SET (VOIDmode,\n-                     base_reg,\n-                     plus_constant (Pmode, base_reg, 8 * num_regs));\n+  tmp = gen_rtx_SET (base_reg, plus_constant (Pmode, base_reg, 8 * num_regs));\n   RTX_FRAME_RELATED_P (tmp) = 1;\n   XVECEXP (par, 0, 0) = tmp;\n \n@@ -20213,8 +20183,7 @@ arm_emit_vfp_multi_reg_pop (int first_reg, int num_regs, rtx base_reg)\n     {\n       reg = gen_rtx_REG (DFmode, i);\n \n-      tmp = gen_rtx_SET (VOIDmode,\n-                         reg,\n+      tmp = gen_rtx_SET (reg,\n                          gen_frame_mem\n                          (DFmode,\n                           plus_constant (Pmode, base_reg, 8 * j)));\n@@ -20280,8 +20249,7 @@ thumb2_emit_ldrd_pop (unsigned long saved_regs_mask)\n       {\n         /* Create RTX for memory load.  */\n         reg = gen_rtx_REG (SImode, j);\n-        tmp = gen_rtx_SET (SImode,\n-                           reg,\n+        tmp = gen_rtx_SET (reg,\n                            gen_frame_mem (SImode,\n                                plus_constant (Pmode,\n                                               stack_pointer_rtx, 4 * i)));\n@@ -20325,8 +20293,7 @@ thumb2_emit_ldrd_pop (unsigned long saved_regs_mask)\n \n   /* Increment the stack pointer, based on there being\n      num_regs 4-byte registers to restore.  */\n-  tmp = gen_rtx_SET (VOIDmode,\n-                     stack_pointer_rtx,\n+  tmp = gen_rtx_SET (stack_pointer_rtx,\n                      plus_constant (Pmode, stack_pointer_rtx, 4 * i));\n   RTX_FRAME_RELATED_P (tmp) = 1;\n   tmp = emit_insn (tmp);\n@@ -20352,7 +20319,7 @@ thumb2_emit_ldrd_pop (unsigned long saved_regs_mask)\n       set_mem_alias_set (tmp1, get_frame_alias_set ());\n \n       reg = gen_rtx_REG (SImode, j);\n-      tmp = gen_rtx_SET (SImode, reg, tmp1);\n+      tmp = gen_rtx_SET (reg, tmp1);\n       RTX_FRAME_RELATED_P (tmp) = 1;\n       dwarf = alloc_reg_note (REG_CFA_RESTORE, reg, dwarf);\n \n@@ -20425,7 +20392,7 @@ arm_emit_ldrd_pop (unsigned long saved_regs_mask)\n             else\n               mem = gen_frame_mem (DImode, stack_pointer_rtx);\n \n-            tmp = gen_rtx_SET (DImode, gen_rtx_REG (DImode, j), mem);\n+            tmp = gen_rtx_SET (gen_rtx_REG (DImode, j), mem);\n             tmp = emit_insn (tmp);\n \t    RTX_FRAME_RELATED_P (tmp) = 1;\n \n@@ -20454,7 +20421,7 @@ arm_emit_ldrd_pop (unsigned long saved_regs_mask)\n             else\n               mem = gen_frame_mem (SImode, stack_pointer_rtx);\n \n-            tmp = gen_rtx_SET (SImode, gen_rtx_REG (SImode, j), mem);\n+            tmp = gen_rtx_SET (gen_rtx_REG (SImode, j), mem);\n             tmp = emit_insn (tmp);\n \t    RTX_FRAME_RELATED_P (tmp) = 1;\n \n@@ -20475,8 +20442,7 @@ arm_emit_ldrd_pop (unsigned long saved_regs_mask)\n   /* Update the stack.  */\n   if (offset > 0)\n     {\n-      tmp = gen_rtx_SET (Pmode,\n-                         stack_pointer_rtx,\n+      tmp = gen_rtx_SET (stack_pointer_rtx,\n                          plus_constant (Pmode,\n                                         stack_pointer_rtx,\n                                         offset));\n@@ -20491,8 +20457,7 @@ arm_emit_ldrd_pop (unsigned long saved_regs_mask)\n       /* Only PC is to be popped.  */\n       par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n       XVECEXP (par, 0, 0) = ret_rtx;\n-      tmp = gen_rtx_SET (SImode,\n-                         gen_rtx_REG (SImode, PC_REGNUM),\n+      tmp = gen_rtx_SET (gen_rtx_REG (SImode, PC_REGNUM),\n                          gen_frame_mem (SImode,\n                                         gen_rtx_POST_INC (SImode,\n                                                           stack_pointer_rtx)));\n@@ -20968,7 +20933,7 @@ thumb_set_frame_pointer (arm_stack_offsets *offsets)\n \t\t\t\t\thard_frame_pointer_rtx,\n \t\t\t\t\tstack_pointer_rtx));\n \t}\n-      dwarf = gen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n+      dwarf = gen_rtx_SET (hard_frame_pointer_rtx,\n \t\t\t   plus_constant (Pmode, stack_pointer_rtx, amount));\n       RTX_FRAME_RELATED_P (dwarf) = 1;\n       add_reg_note (insn, REG_FRAME_RELATED_EXPR, dwarf);\n@@ -21101,7 +21066,7 @@ arm_expand_prologue (void)\n \t      fp_offset = 4;\n \n \t      /* Just tell the dwarf backend that we adjusted SP.  */\n-\t      dwarf = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t      dwarf = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t   plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t  -fp_offset));\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n@@ -21135,7 +21100,7 @@ arm_expand_prologue (void)\n \n \t\t  /* Just tell the dwarf backend that we adjusted SP.  */\n \t\t  dwarf\n-\t\t    = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t    = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t   plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t  -args_to_push));\n \t\t  add_reg_note (insn, REG_FRAME_RELATED_EXPR, dwarf);\n@@ -23271,8 +23236,8 @@ neon_split_vcombine (rtx operands[3])\n   /* Special case of reversed high/low parts.  Use VSWP.  */\n   if (src2 == dest && src1 == dest + halfregs)\n     {\n-      rtx x = gen_rtx_SET (VOIDmode, destlo, operands[1]);\n-      rtx y = gen_rtx_SET (VOIDmode, desthi, operands[2]);\n+      rtx x = gen_rtx_SET (destlo, operands[1]);\n+      rtx y = gen_rtx_SET (desthi, operands[2]);\n       emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, x, y)));\n       return;\n     }\n@@ -23334,15 +23299,15 @@ thumb1_emit_multi_reg_push (unsigned long mask, unsigned long real_regs)\n   tmp = plus_constant (Pmode, stack_pointer_rtx, -4 * i);\n   tmp = gen_rtx_PRE_MODIFY (Pmode, stack_pointer_rtx, tmp);\n   tmp = gen_frame_mem (BLKmode, tmp);\n-  tmp = gen_rtx_SET (VOIDmode, tmp, par[0]);\n+  tmp = gen_rtx_SET (tmp, par[0]);\n   par[0] = tmp;\n \n   tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (i, par));\n   insn = emit_insn (tmp);\n \n   /* Always build the stack adjustment note for unwind info.  */\n   tmp = plus_constant (Pmode, stack_pointer_rtx, -4 * i);\n-  tmp = gen_rtx_SET (VOIDmode, stack_pointer_rtx, tmp);\n+  tmp = gen_rtx_SET (stack_pointer_rtx, tmp);\n   par[0] = tmp;\n \n   /* Build the parallel of the registers recorded as saved for unwind.  */\n@@ -23353,7 +23318,7 @@ thumb1_emit_multi_reg_push (unsigned long mask, unsigned long real_regs)\n \n       tmp = plus_constant (Pmode, stack_pointer_rtx, j * 4);\n       tmp = gen_frame_mem (SImode, tmp);\n-      tmp = gen_rtx_SET (VOIDmode, tmp, reg);\n+      tmp = gen_rtx_SET (tmp, reg);\n       RTX_FRAME_RELATED_P (tmp) = 1;\n       par[j + 1] = tmp;\n     }\n@@ -24510,7 +24475,7 @@ thumb1_expand_prologue (void)\n \t  insn = emit_insn (gen_addsi3 (stack_pointer_rtx,\n \t\t\t\t\tstack_pointer_rtx, reg));\n \n-\t  dwarf = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t  dwarf = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t       plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t      -amount));\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR, dwarf);\n@@ -24566,7 +24531,7 @@ thumb2_expand_return (bool simple_return)\n                                                     stack_pointer_rtx));\n           set_mem_alias_set (addr, get_frame_alias_set ());\n           XVECEXP (par, 0, 0) = ret_rtx;\n-          XVECEXP (par, 0, 1) = gen_rtx_SET (SImode, reg, addr);\n+          XVECEXP (par, 0, 1) = gen_rtx_SET (reg, addr);\n           RTX_FRAME_RELATED_P (XVECEXP (par, 0, 1)) = 1;\n           emit_jump_insn (par);\n         }\n@@ -24999,8 +24964,7 @@ arm_expand_epilogue (bool really_return)\n                   {\n                     insn = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n                     XVECEXP (insn, 0, 0) = ret_rtx;\n-                    XVECEXP (insn, 0, 1) = gen_rtx_SET (SImode,\n-                                                        gen_rtx_REG (SImode, i),\n+                    XVECEXP (insn, 0, 1) = gen_rtx_SET (gen_rtx_REG (SImode, i),\n                                                         addr);\n                     RTX_FRAME_RELATED_P (XVECEXP (insn, 0, 1)) = 1;\n                     insn = emit_jump_insn (insn);\n@@ -27497,7 +27461,7 @@ arm_expand_compare_and_swap (rtx operands[])\n      in a subsequent branch, post optimization.  */\n   x = gen_rtx_REG (CCmode, CC_REGNUM);\n   x = gen_rtx_EQ (SImode, x, const0_rtx);\n-  emit_insn (gen_rtx_SET (VOIDmode, bval, x));\n+  emit_insn (gen_rtx_SET (bval, x));\n }\n \n /* Split a compare and swap pattern.  It is IMPLEMENTATION DEFINED whether\n@@ -27554,22 +27518,22 @@ arm_split_compare_and_swap (rtx operands[])\n   x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n   x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n \t\t\t    gen_rtx_LABEL_REF (Pmode, label2), pc_rtx);\n-  emit_unlikely_jump (gen_rtx_SET (VOIDmode, pc_rtx, x));\n+  emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));\n \n   arm_emit_store_exclusive (mode, scratch, mem, newval, use_release);\n \n   /* Weak or strong, we want EQ to be true for success, so that we\n      match the flags that we got from the compare above.  */\n   cond = gen_rtx_REG (CCmode, CC_REGNUM);\n   x = gen_rtx_COMPARE (CCmode, scratch, const0_rtx);\n-  emit_insn (gen_rtx_SET (VOIDmode, cond, x));\n+  emit_insn (gen_rtx_SET (cond, x));\n \n   if (!is_weak)\n     {\n       x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n       x = gen_rtx_IF_THEN_ELSE (VOIDmode, x,\n \t\t\t\tgen_rtx_LABEL_REF (Pmode, label1), pc_rtx);\n-      emit_unlikely_jump (gen_rtx_SET (VOIDmode, pc_rtx, x));\n+      emit_unlikely_jump (gen_rtx_SET (pc_rtx, x));\n     }\n \n   if (mod_f != MEMMODEL_RELAXED)\n@@ -27628,9 +27592,9 @@ arm_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n \n     case NOT:\n       x = gen_rtx_AND (wmode, old_out, value);\n-      emit_insn (gen_rtx_SET (VOIDmode, new_out, x));\n+      emit_insn (gen_rtx_SET (new_out, x));\n       x = gen_rtx_NOT (wmode, new_out);\n-      emit_insn (gen_rtx_SET (VOIDmode, new_out, x));\n+      emit_insn (gen_rtx_SET (new_out, x));\n       break;\n \n     case MINUS:\n@@ -27662,7 +27626,7 @@ arm_split_atomic_op (enum rtx_code code, rtx old_out, rtx new_out, rtx mem,\n \n     default:\n       x = gen_rtx_fmt_ee (code, wmode, old_out, value);\n-      emit_insn (gen_rtx_SET (VOIDmode, new_out, x));\n+      emit_insn (gen_rtx_SET (new_out, x));\n       break;\n     }\n \n@@ -28382,7 +28346,7 @@ arm_emit_coreregs_64bit_shift (enum rtx_code code, rtx out, rtx in,\n \t    gen_addsi3_compare0 ((DEST), (SRC), \\\n \t\t\t\t GEN_INT (-32))\n   #define SET(DEST,SRC) \\\n-\t    gen_rtx_SET (SImode, (DEST), (SRC))\n+\t    gen_rtx_SET ((DEST), (SRC))\n   #define SHIFT(CODE,SRC,AMOUNT) \\\n \t    gen_rtx_fmt_ee ((CODE), SImode, (SRC), (AMOUNT))\n   #define LSHIFT(CODE,SRC,AMOUNT) \\"}, {"sha": "7c87bcdeca1e450a81f8aacb195c5c6e3a6a92a5", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 29, "deletions": 48, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -3277,7 +3277,7 @@\n   if (operands[2] == const0_rtx || operands[2] == constm1_rtx)\n     {\n       /* No need for a clobber of the condition code register here.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+      emit_insn (gen_rtx_SET (operands[0],\n \t\t\t      gen_rtx_SMAX (SImode, operands[1],\n \t\t\t\t\t    operands[2])));\n       DONE;\n@@ -3339,7 +3339,7 @@\n   if (operands[2] == const0_rtx)\n     {\n       /* No need for a clobber of the condition code register here.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+      emit_insn (gen_rtx_SET (operands[0],\n \t\t\t      gen_rtx_SMIN (SImode, operands[1],\n \t\t\t\t\t    operands[2])));\n       DONE;\n@@ -4420,13 +4420,13 @@\n \t\trsc\tRhi, Rhi, #0 (thumb2: sbc Rhi, Rhi, Rhi, lsl #1).  */\n \trtx cc_reg = gen_rtx_REG (CC_Cmode, CC_REGNUM);\n \n-\temit_insn (gen_rtx_SET (VOIDmode, high,\n+\temit_insn (gen_rtx_SET (high,\n \t\t\t\tgen_rtx_ASHIFTRT (SImode, operands[1],\n \t\t\t\t\t\t  GEN_INT (31))));\n \n \temit_insn (gen_subsi3_compare (low, const0_rtx, operands[1]));\n \tif (TARGET_ARM)\n-\t  emit_insn (gen_rtx_SET (VOIDmode, high,\n+\t  emit_insn (gen_rtx_SET (high,\n \t\t\t\t  gen_rtx_MINUS (SImode,\n \t\t\t\t\t\t gen_rtx_MINUS (SImode,\n \t\t\t\t\t\t\t\tconst0_rtx,\n@@ -4437,7 +4437,7 @@\n \telse\n \t  {\n \t    rtx two_x = gen_rtx_ASHIFT (SImode, high, GEN_INT (1));\n-\t    emit_insn (gen_rtx_SET (VOIDmode, high,\n+\t    emit_insn (gen_rtx_SET (high,\n \t\t\t\t    gen_rtx_MINUS (SImode,\n \t\t\t\t\t\t   gen_rtx_MINUS (SImode,\n \t\t\t\t\t\t\t\t  high,\n@@ -4454,13 +4454,12 @@\n \t\tbic\tRhi, Rlo, Rin\n \t\tasr\tRhi, Rhi, #31\n \t   Flags not needed for this sequence.  */\n-\temit_insn (gen_rtx_SET (VOIDmode, low,\n-\t\t\t\tgen_rtx_NEG (SImode, operands[1])));\n-\temit_insn (gen_rtx_SET (VOIDmode, high,\n+\temit_insn (gen_rtx_SET (low, gen_rtx_NEG (SImode, operands[1])));\n+\temit_insn (gen_rtx_SET (high,\n \t\t\t\tgen_rtx_AND (SImode,\n \t\t\t\t\t     gen_rtx_NOT (SImode, operands[1]),\n \t\t\t\t\t     low)));\n-\temit_insn (gen_rtx_SET (VOIDmode, high,\n+\temit_insn (gen_rtx_SET (high,\n \t\t\t\tgen_rtx_ASHIFTRT (SImode, high,\n \t\t\t\t\t\t  GEN_INT (31))));\n       }\n@@ -4531,15 +4530,13 @@\n           (cond_exec (lt:CC (reg:CC CC_REGNUM) (const_int 0))\n                      (set (match_dup 0) (minus:SI (const_int 0) (match_dup 1))))]\n       */\n-      emit_insn (gen_rtx_SET (VOIDmode,\n-                              gen_rtx_REG (CCmode, CC_REGNUM),\n+      emit_insn (gen_rtx_SET (gen_rtx_REG (CCmode, CC_REGNUM),\n                               gen_rtx_COMPARE (CCmode, operands[0], const0_rtx)));\n       emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n                                     (gen_rtx_LT (SImode,\n                                                  gen_rtx_REG (CCmode, CC_REGNUM),\n                                                  const0_rtx)),\n-                                    (gen_rtx_SET (VOIDmode,\n-                                                  operands[0],\n+                                    (gen_rtx_SET (operands[0],\n                                                   (gen_rtx_MINUS (SImode,\n                                                                   const0_rtx,\n                                                                   operands[1]))))));\n@@ -4556,15 +4553,13 @@\n                (minus:SI (match_dup 0)\n                       (ashiftrt:SI (match_dup 1) (const_int 31))))]\n       */\n-      emit_insn (gen_rtx_SET (VOIDmode,\n-                              operands[0],\n+      emit_insn (gen_rtx_SET (operands[0],\n                               gen_rtx_XOR (SImode,\n                                            gen_rtx_ASHIFTRT (SImode,\n                                                              operands[1],\n                                                              GEN_INT (31)),\n                                            operands[1])));\n-      emit_insn (gen_rtx_SET (VOIDmode,\n-                              operands[0],\n+      emit_insn (gen_rtx_SET (operands[0],\n                               gen_rtx_MINUS (SImode,\n                                              operands[0],\n                                              gen_rtx_ASHIFTRT (SImode,\n@@ -4595,15 +4590,13 @@\n       /* Emit the pattern:\n          cmp\\\\t%0, #0\\;rsbgt\\\\t%0, %0, #0\n       */\n-      emit_insn (gen_rtx_SET (VOIDmode,\n-                              gen_rtx_REG (CCmode, CC_REGNUM),\n+      emit_insn (gen_rtx_SET (gen_rtx_REG (CCmode, CC_REGNUM),\n                               gen_rtx_COMPARE (CCmode, operands[0], const0_rtx)));\n       emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n                                     gen_rtx_GT (SImode,\n                                                 gen_rtx_REG (CCmode, CC_REGNUM),\n                                                 const0_rtx),\n-                                    gen_rtx_SET (VOIDmode,\n-                                                 operands[0],\n+                                    gen_rtx_SET (operands[0],\n                                                  (gen_rtx_MINUS (SImode,\n                                                                  const0_rtx,\n                                                                  operands[1])))));\n@@ -4613,15 +4606,13 @@\n       /* Emit the pattern:\n          eor%?\\\\t%0, %1, %1, asr #31\\;rsb%?\\\\t%0, %0, %1, asr #31\n       */\n-      emit_insn (gen_rtx_SET (VOIDmode,\n-                              operands[0],\n+      emit_insn (gen_rtx_SET (operands[0],\n                               gen_rtx_XOR (SImode,\n                                            gen_rtx_ASHIFTRT (SImode,\n                                                              operands[1],\n                                                              GEN_INT (31)),\n                                            operands[1])));\n-      emit_insn (gen_rtx_SET (VOIDmode,\n-                              operands[0],\n+      emit_insn (gen_rtx_SET (operands[0],\n                               gen_rtx_MINUS (SImode,\n                                              gen_rtx_ASHIFTRT (SImode,\n                                                                operands[1],\n@@ -4885,7 +4876,7 @@\n       if (src_mode == SImode)\n         emit_move_insn (lo_part, operands[1]);\n       else\n-        emit_insn (gen_rtx_SET (VOIDmode, lo_part,\n+        emit_insn (gen_rtx_SET (lo_part,\n \t\t\t\tgen_rtx_ZERO_EXTEND (SImode, operands[1])));\n       operands[1] = lo_part;\n     }\n@@ -4912,7 +4903,7 @@\n       if (src_mode == SImode)\n         emit_move_insn (lo_part, operands[1]);\n       else\n-        emit_insn (gen_rtx_SET (VOIDmode, lo_part,\n+        emit_insn (gen_rtx_SET (lo_part,\n \t\t\t\tgen_rtx_SIGN_EXTEND (SImode, operands[1])));\n       operands[1] = lo_part;\n     }\n@@ -5237,8 +5228,7 @@\n   {\n     if (arm_arch4 && MEM_P (operands[1]))\n       {\n-\temit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\toperands[0],\n+\temit_insn (gen_rtx_SET (operands[0],\n \t\t\t\tgen_rtx_SIGN_EXTEND (HImode, operands[1])));\n \tDONE;\n       }\n@@ -5697,7 +5687,7 @@\n     if (offset < -0x8000 || offset > 0x7fff)\n       {\n \tarm_emit_movpair (operands[0], operands[1]);\n-\temit_insn (gen_rtx_SET (SImode, operands[0],\n+\temit_insn (gen_rtx_SET (operands[0],\n \t\t\t\tgen_rtx_PLUS (SImode, operands[0], operands[2])));\n       }\n     else\n@@ -6625,8 +6615,7 @@\n       emit_insn (gen_addsi3 (operands[2], XEXP (XEXP (operands[0], 0), 0),\n \t\t\t     XEXP (XEXP (operands[0], 0), 1)));\n \n-    emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t    replace_equiv_address (operands[0], operands[2]),\n+    emit_insn (gen_rtx_SET (replace_equiv_address (operands[0], operands[2]),\n \t\t\t    operands[1]));\n \n     if (code == POST_DEC)\n@@ -7459,9 +7448,7 @@\n \n     emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n                                   operands[3],\n-                                  gen_rtx_SET (VOIDmode,\n-                                               operands[0],\n-                                               operands[1])));\n+                                  gen_rtx_SET (operands[0], operands[1])));\n \n     rev_code = GET_CODE (operands[3]);\n     mode = GET_MODE (operands[4]);\n@@ -7476,9 +7463,7 @@\n                                const0_rtx);\n     emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n                                   rev_cond,\n-                                  gen_rtx_SET (VOIDmode,\n-                                               operands[0],\n-                                               operands[2])));\n+                                  gen_rtx_SET (operands[0], operands[2])));\n     DONE;\n   }\n   [(set_attr \"length\" \"4,4,4,4,8,8,8,8\")\n@@ -9252,8 +9237,7 @@\n     if (GET_CODE (operands[3]) == LT && operands[2] == const0_rtx)\n        {\n          /* Emit mov\\\\t%0, %1, asr #31 */\n-         emit_insn (gen_rtx_SET (VOIDmode,\n-                                 operands[0],\n+         emit_insn (gen_rtx_SET (operands[0],\n                                  gen_rtx_ASHIFTRT (SImode,\n                                                    operands[1],\n                                                    GEN_INT (31))));\n@@ -9272,16 +9256,14 @@\n                                       gen_rtx_NE (SImode,\n                                                   cc_reg,\n                                                   const0_rtx),\n-                                      gen_rtx_SET (SImode,\n-                                                   operands[0],\n+                                      gen_rtx_SET (operands[0],\n                                                    GEN_INT (~0))));\n         DONE;\n       }\n     else\n       {\n         /* Emit: cmp\\\\t%1, %2\\;mov%D3\\\\t%0, #0\\;mvn%d3\\\\t%0, #0 */\n-        emit_insn (gen_rtx_SET (VOIDmode,\n-                                cc_reg,\n+        emit_insn (gen_rtx_SET (cc_reg,\n                                 gen_rtx_COMPARE (CCmode, operands[1], operands[2])));\n         enum rtx_code rc = GET_CODE (operands[3]);\n \n@@ -9291,15 +9273,14 @@\n                                                       VOIDmode,\n                                                       cc_reg,\n                                                       const0_rtx),\n-                                      gen_rtx_SET (VOIDmode, operands[0], const0_rtx)));\n+                                      gen_rtx_SET (operands[0], const0_rtx)));\n         rc = GET_CODE (operands[3]);\n         emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n                                       gen_rtx_fmt_ee (rc,\n                                                       VOIDmode,\n                                                       cc_reg,\n                                                       const0_rtx),\n-                                      gen_rtx_SET (VOIDmode,\n-                                                   operands[0],\n+                                      gen_rtx_SET (operands[0],\n                                                    GEN_INT (~0))));\n         DONE;\n       }\n@@ -11244,7 +11225,7 @@\n      emit_move_insn (scratch1, op2_high);\n      emit_move_insn (scratch2, op1_high);\n \n-     emit_insn(gen_rtx_SET(SImode, scratch1,\n+     emit_insn(gen_rtx_SET(scratch1,\n \t\t\t   gen_rtx_LSHIFTRT (SImode, op2_high, GEN_INT(31))));\n      emit_insn(gen_insv_t2(scratch2, GEN_INT(1), GEN_INT(31), scratch1));\n      emit_move_insn (op0_low, op1_low);"}, {"sha": "ce0ab114ffdb3fc16822483c75e6e0a0fb5a3798", "filename": "gcc/config/arm/ldrdstrd.md", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farm%2Fldrdstrd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farm%2Fldrdstrd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fldrdstrd.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -43,16 +43,16 @@\n     operands[0] = gen_rtx_REG (DImode, REGNO (operands[0]));\n     operands[2] = adjust_address (operands[2], DImode, 0);\n     /* Emit [(set (match_dup 0) (match_dup 2))] */\n-    emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[2]));\n+    emit_insn (gen_rtx_SET (operands[0], operands[2]));\n     DONE;\n   }\n   else if (TARGET_THUMB2)\n   {\n     /* Emit the pattern:\n        [(parallel [(set (match_dup 0) (match_dup 2))\n                    (set (match_dup 1) (match_dup 3))])] */\n-    rtx t1 = gen_rtx_SET (VOIDmode, operands[0], operands[2]);\n-    rtx t2 = gen_rtx_SET (VOIDmode, operands[1], operands[3]);\n+    rtx t1 = gen_rtx_SET (operands[0], operands[2]);\n+    rtx t2 = gen_rtx_SET (operands[1], operands[3]);\n     emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, t1, t2)));\n     DONE;\n   }\n@@ -77,16 +77,16 @@\n     operands[0] = gen_rtx_REG (DImode, REGNO (operands[0]));\n     operands[2] = adjust_address (operands[2], DImode, 0);\n     /* Emit [(set (match_dup 2) (match_dup 0))]  */\n-    emit_insn (gen_rtx_SET (VOIDmode, operands[2], operands[0]));\n+    emit_insn (gen_rtx_SET (operands[2], operands[0]));\n     DONE;\n   }\n   else if (TARGET_THUMB2)\n   {\n     /* Emit the pattern:\n        [(parallel [(set (match_dup 2) (match_dup 0))\n                    (set (match_dup 3) (match_dup 1))])]  */\n-    rtx t1 = gen_rtx_SET (VOIDmode, operands[2], operands[0]);\n-    rtx t2 = gen_rtx_SET (VOIDmode, operands[3], operands[1]);\n+    rtx t1 = gen_rtx_SET (operands[2], operands[0]);\n+    rtx t2 = gen_rtx_SET (operands[3], operands[1]);\n     emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, t1, t2)));\n     DONE;\n   }\n@@ -117,9 +117,9 @@\n       [(set (match_dup 0) (match_dup 4))\n       (set (match_dup 1) (match_dup 5))\n       (set (match_dup 2) tmp)]  */\n-   emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[4]));\n-   emit_insn (gen_rtx_SET (VOIDmode, operands[1], operands[5]));\n-   emit_insn (gen_rtx_SET (VOIDmode, operands[2], tmp));\n+   emit_insn (gen_rtx_SET (operands[0], operands[4]));\n+   emit_insn (gen_rtx_SET (operands[1], operands[5]));\n+   emit_insn (gen_rtx_SET (operands[2], tmp));\n    DONE;\n   }\n   else if (TARGET_THUMB2)\n@@ -129,10 +129,10 @@\n         (set (match_dup 1) (match_dup 5))\n         (parallel [(set (match_dup 2) (match_dup 0))\n                    (set (match_dup 3) (match_dup 1))])]  */\n-    emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[4]));\n-    emit_insn (gen_rtx_SET (VOIDmode, operands[1], operands[5]));\n-    rtx t1 = gen_rtx_SET (VOIDmode, operands[2], operands[0]);\n-    rtx t2 = gen_rtx_SET (VOIDmode, operands[3], operands[1]);\n+    emit_insn (gen_rtx_SET (operands[0], operands[4]));\n+    emit_insn (gen_rtx_SET (operands[1], operands[5]));\n+    rtx t1 = gen_rtx_SET (operands[2], operands[0]);\n+    rtx t2 = gen_rtx_SET (operands[3], operands[1]);\n     emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, t1, t2)));\n     DONE;\n   }\n@@ -162,9 +162,9 @@\n       [(set (match_dup 0) (match_dup 4))\n        (set (match_dup 1) (match_dup 5))\n        (set (match_dup 2) tmp)]  */\n-   emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[4]));\n-   emit_insn (gen_rtx_SET (VOIDmode, operands[1], operands[5]));\n-   emit_insn (gen_rtx_SET (VOIDmode, operands[2], tmp));\n+   emit_insn (gen_rtx_SET (operands[0], operands[4]));\n+   emit_insn (gen_rtx_SET (operands[1], operands[5]));\n+   emit_insn (gen_rtx_SET (operands[2], tmp));\n    DONE;\n   }\n   else if (TARGET_THUMB2)\n@@ -174,10 +174,10 @@\n          (set (match_dup 1) (match_dup 5))\n          (parallel [(set (match_dup 2) (match_dup 0))\n                     (set (match_dup 3) (match_dup 1))])]  */\n-    emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[4]));\n-    emit_insn (gen_rtx_SET (VOIDmode, operands[1], operands[5]));\n-    rtx t1 = gen_rtx_SET (VOIDmode, operands[2], operands[0]);\n-    rtx t2 = gen_rtx_SET (VOIDmode, operands[3], operands[1]);\n+    emit_insn (gen_rtx_SET (operands[0], operands[4]));\n+    emit_insn (gen_rtx_SET (operands[1], operands[5]));\n+    rtx t1 = gen_rtx_SET (operands[2], operands[0]);\n+    rtx t2 = gen_rtx_SET (operands[3], operands[1]);\n     emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, t1, t2)));\n     DONE;\n   }"}, {"sha": "8c754d90d589e98f80ca63bdc9a2f099a444f3a8", "filename": "gcc/config/arm/thumb2.md", "status": "modified", "additions": 27, "deletions": 41, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farm%2Fthumb2.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farm%2Fthumb2.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fthumb2.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -167,30 +167,26 @@\n       {\n        rtx cc_reg = gen_rtx_REG (CCmode, CC_REGNUM);\n \n-       emit_insn (gen_rtx_SET (VOIDmode,\n-                               cc_reg,\n-                               gen_rtx_COMPARE (CCmode, operands[0], const0_rtx)));\n+       emit_insn (gen_rtx_SET (cc_reg, gen_rtx_COMPARE (CCmode, operands[0],\n+       \t\t\t\t\t\t\tconst0_rtx)));\n        emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n                                     (gen_rtx_LT (SImode,\n                                                  cc_reg,\n                                                  const0_rtx)),\n-                                    (gen_rtx_SET (VOIDmode,\n-                                                  operands[0],\n+                                    (gen_rtx_SET (operands[0],\n                                                   (gen_rtx_MINUS (SImode,\n                                                                   const0_rtx,\n                                                                   operands[1]))))));\n       }\n     else\n       {\n-        emit_insn (gen_rtx_SET (VOIDmode,\n-                                operands[0],\n+        emit_insn (gen_rtx_SET (operands[0],\n                                 gen_rtx_XOR (SImode,\n                                              gen_rtx_ASHIFTRT (SImode,\n                                                                operands[1],\n                                                                GEN_INT (31)),\n                                              operands[1])));\n-        emit_insn (gen_rtx_SET (VOIDmode,\n-                                operands[0],\n+        emit_insn (gen_rtx_SET (operands[0],\n                                 gen_rtx_MINUS (SImode,\n                                                operands[0],\n                                                gen_rtx_ASHIFTRT (SImode,\n@@ -225,30 +221,26 @@\n       {\n        rtx cc_reg = gen_rtx_REG (CCmode, CC_REGNUM);\n \n-       emit_insn (gen_rtx_SET (VOIDmode,\n-                               cc_reg,\n-                               gen_rtx_COMPARE (CCmode, operands[0], const0_rtx)));\n+       emit_insn (gen_rtx_SET (cc_reg, gen_rtx_COMPARE (CCmode, operands[0],\n+\t\t\t\t\t\t\tconst0_rtx)));\n        emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n                                     (gen_rtx_GT (SImode,\n                                                  cc_reg,\n                                                  const0_rtx)),\n-                                    (gen_rtx_SET (VOIDmode,\n-                                                  operands[0],\n+                                    (gen_rtx_SET (operands[0],\n                                                   (gen_rtx_MINUS (SImode,\n                                                                   const0_rtx,\n                                                                   operands[1]))))));\n       }\n     else\n       {\n-        emit_insn (gen_rtx_SET (VOIDmode,\n-                                operands[0],\n+        emit_insn (gen_rtx_SET (operands[0],\n                                 gen_rtx_XOR (SImode,\n                                              gen_rtx_ASHIFTRT (SImode,\n                                                                operands[1],\n                                                                GEN_INT (31)),\n                                              operands[1])));\n-        emit_insn (gen_rtx_SET (VOIDmode,\n-                                operands[0],\n+        emit_insn (gen_rtx_SET (operands[0],\n                                 gen_rtx_MINUS (SImode,\n                                                gen_rtx_ASHIFTRT (SImode,\n                                                                  operands[1],\n@@ -521,9 +513,7 @@\n \n     emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n                                   operands[3],\n-                                  gen_rtx_SET (VOIDmode,\n-                                               operands[0],\n-                                               operands[1])));\n+                                  gen_rtx_SET (operands[0], operands[1])));\n     rev_code = GET_CODE (operands[3]);\n     mode = GET_MODE (operands[4]);\n     if (mode == CCFPmode || mode == CCFPEmode)\n@@ -537,9 +527,7 @@\n                                const0_rtx);\n     emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n                                   rev_cond,\n-                                  gen_rtx_SET (VOIDmode,\n-                                               operands[0],\n-                                               operands[2])));\n+                                  gen_rtx_SET (operands[0], operands[2])));\n     DONE;\n   }\n   [(set_attr \"length\" \"4,4,6,6,6,6,10,8,10,10,10,6\")\n@@ -806,25 +794,26 @@\n             break;\n           default: gcc_unreachable ();\n           }\n-        emit_insn (gen_rtx_SET (VOIDmode, operands[0], op));\n+        emit_insn (gen_rtx_SET (operands[0], op));\n         DONE;\n       }\n \n     /*  \"cmp  %2, %3\"  */\n-    emit_insn (gen_rtx_SET (VOIDmode,\n-                               gen_rtx_REG (CCmode, CC_REGNUM),\n-                               gen_rtx_COMPARE (CCmode, operands[2], operands[3])));\n+    emit_insn (gen_rtx_SET (gen_rtx_REG (CCmode, CC_REGNUM),\n+                            gen_rtx_COMPARE (CCmode, operands[2],\n+\t\t\t\t\t     operands[3])));\n \n     if (GET_CODE (operands[5]) == AND)\n       {\n         /*  %i5  %0, %1, #1\n             it%D4\n             mov%D4  %0, #0  */\n         enum rtx_code rc = reverse_condition (GET_CODE (operands[4]));\n-        emit_insn (gen_rtx_SET (VOIDmode, operands[0], gen_rtx_AND (SImode, operands[1], GEN_INT (1))));\n+        emit_insn (gen_rtx_SET (operands[0], gen_rtx_AND (SImode, operands[1],\n+\t\t\t\t\t\t\t  GEN_INT (1))));\n         emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n                                       gen_rtx_fmt_ee (rc, VOIDmode, gen_rtx_REG (CCmode, CC_REGNUM), const0_rtx),\n-                                      gen_rtx_SET (VOIDmode, operands[0], const0_rtx)));\n+                                      gen_rtx_SET (operands[0], const0_rtx)));\n         DONE;\n       }\n     else\n@@ -834,7 +823,7 @@\n         emit_insn (gen_rtx_COND_EXEC (VOIDmode, gen_rtx_fmt_ee (GET_CODE (operands[4]),\n                                                                 VOIDmode,\n                                                                 gen_rtx_REG (CCmode, CC_REGNUM), const0_rtx),\n-                                                gen_rtx_SET(VOIDmode, operands[0],\n+                                                gen_rtx_SET (operands[0],\n                                                             gen_rtx_PLUS (SImode,\n                                                                           operands[1],\n                                                                           GEN_INT (1)))));\n@@ -895,8 +884,7 @@\n     if (GET_CODE (operands[3]) == LT && operands[2] == const0_rtx)\n       {\n         /* Emit asr\\\\t%0, %1, #31 */\n-        emit_insn (gen_rtx_SET (VOIDmode,\n-                                operands[0],\n+        emit_insn (gen_rtx_SET (operands[0],\n                                 gen_rtx_ASHIFTRT (SImode,\n                                                   operands[1],\n                                                   GEN_INT (31))));\n@@ -915,8 +903,7 @@\n                                       gen_rtx_NE (SImode,\n                                                   cc_reg,\n                                                   const0_rtx),\n-                                      gen_rtx_SET (SImode,\n-                                                   operands[0],\n+                                      gen_rtx_SET (operands[0],\n                                                    GEN_INT (~0))));\n         DONE;\n       }\n@@ -927,18 +914,17 @@\n        machine_mode mode = SELECT_CC_MODE (rc, operands[1], operands[2]);\n        rtx tmp1 = gen_rtx_REG (mode, CC_REGNUM);\n \n-       emit_insn (gen_rtx_SET (VOIDmode,\n-                               cc_reg,\n-                               gen_rtx_COMPARE (CCmode, operands[1], operands[2])));\n+       emit_insn (gen_rtx_SET (cc_reg, gen_rtx_COMPARE (CCmode, operands[1],\n+\t\t\t\t\t\t\toperands[2])));\n \n-       emit_insn (gen_rtx_SET (VOIDmode, operands[0], GEN_INT (~0)));\n+       emit_insn (gen_rtx_SET (operands[0], GEN_INT (~0)));\n \n        emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n                                      gen_rtx_fmt_ee (rc,\n                                                      VOIDmode,\n                                                      tmp1,\n                                                      const0_rtx),\n-                                     gen_rtx_SET (VOIDmode, operands[0], const0_rtx)));\n+                                     gen_rtx_SET (operands[0], const0_rtx)));\n        DONE;\n       }\n     FAIL;\n@@ -1628,7 +1614,7 @@\n      cc_reg = SET_DEST (cmp);\n      bcomp = gen_rtx_NE (VOIDmode, cc_reg, const0_rtx);\n      loc_ref = gen_rtx_LABEL_REF (VOIDmode, operands [1]);\n-     emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+     emit_jump_insn (gen_rtx_SET (pc_rtx,\n                                   gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n                                                         loc_ref, pc_rtx)));\n      DONE;"}, {"sha": "f62ff793462408c8948e0ce42cd2efa3a155324d", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -645,13 +645,13 @@\n \n       if (REGNO (in_lo) == REGNO (out_hi))\n         {\n-          emit_insn (gen_rtx_SET (SImode, out_lo, in_lo));\n+          emit_insn (gen_rtx_SET (out_lo, in_lo));\n \t  operands[0] = out_hi;\n           operands[1] = in_hi;\n         }\n       else\n         {\n-          emit_insn (gen_rtx_SET (SImode, out_hi, in_hi));\n+          emit_insn (gen_rtx_SET (out_hi, in_hi));\n \t  operands[0] = out_lo;\n           operands[1] = in_lo;\n         }"}, {"sha": "7436b59a970720af63bbf64046823e04ad25eab1", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 13, "deletions": 14, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1129,7 +1129,7 @@ emit_push_byte (unsigned regno, bool frame_related_p)\n   mem = gen_frame_mem (QImode, mem);\n   reg = gen_rtx_REG (QImode, regno);\n \n-  insn = emit_insn (gen_rtx_SET (VOIDmode, mem, reg));\n+  insn = emit_insn (gen_rtx_SET (mem, reg));\n   if (frame_related_p)\n     RTX_FRAME_RELATED_P (insn) = 1;\n \n@@ -1209,9 +1209,9 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n          is going to be permanent in the function is frame_pointer_needed.  */\n \n       add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-                    gen_rtx_SET (VOIDmode, (frame_pointer_needed\n-                                            ? frame_pointer_rtx\n-                                            : stack_pointer_rtx),\n+                    gen_rtx_SET ((frame_pointer_needed\n+\t\t\t\t  ? frame_pointer_rtx\n+\t\t\t\t  : stack_pointer_rtx),\n                                  plus_constant (Pmode, stack_pointer_rtx,\n                                                 -(size + live_seq))));\n \n@@ -1229,7 +1229,7 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n           m = gen_rtx_MEM (QImode, plus_constant (Pmode, stack_pointer_rtx,\n                                                   offset));\n           r = gen_rtx_REG (QImode, reg);\n-          add_reg_note (insn, REG_CFA_OFFSET, gen_rtx_SET (VOIDmode, m, r));\n+          add_reg_note (insn, REG_CFA_OFFSET, gen_rtx_SET (m, r));\n         }\n \n       cfun->machine->stack_usage += size + live_seq;\n@@ -1341,7 +1341,7 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n             {\n               RTX_FRAME_RELATED_P (insn) = 1;\n               add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-                            gen_rtx_SET (VOIDmode, fp, stack_pointer_rtx));\n+                            gen_rtx_SET (fp, stack_pointer_rtx));\n             }\n \n           insn = emit_move_insn (my_fp, plus_constant (GET_MODE (my_fp),\n@@ -1351,9 +1351,8 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n             {\n               RTX_FRAME_RELATED_P (insn) = 1;\n               add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-                            gen_rtx_SET (VOIDmode, fp,\n-                                         plus_constant (Pmode, fp,\n-                                                        -size_cfa)));\n+                            gen_rtx_SET (fp, plus_constant (Pmode, fp,\n+\t\t\t\t\t\t\t    -size_cfa)));\n             }\n \n           /* Copy to stack pointer.  Note that since we've already\n@@ -1379,7 +1378,7 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n             {\n               RTX_FRAME_RELATED_P (insn) = 1;\n               add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-                            gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+                            gen_rtx_SET (stack_pointer_rtx,\n                                          plus_constant (Pmode,\n                                                         stack_pointer_rtx,\n                                                         -size_cfa)));\n@@ -1404,7 +1403,7 @@ avr_prologue_setup_frame (HOST_WIDE_INT size, HARD_REG_SET set)\n                                                     -size));\n               RTX_FRAME_RELATED_P (insn) = 1;\n               add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-                            gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+                            gen_rtx_SET (stack_pointer_rtx,\n                                          plus_constant (Pmode,\n                                                         stack_pointer_rtx,\n                                                         -size_cfa)));\n@@ -1574,7 +1573,7 @@ emit_pop_byte (unsigned regno)\n   mem = gen_frame_mem (QImode, mem);\n   reg = gen_rtx_REG (QImode, regno);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, reg, mem));\n+  emit_insn (gen_rtx_SET (reg, mem));\n }\n \n /*  Output RTL epilogue.  */\n@@ -8473,7 +8472,7 @@ avr_out_round (rtx_insn *insn ATTRIBUTE_UNUSED, rtx *xop, int *plen)\n   xsrc = SIGNED_FIXED_POINT_MODE_P (mode)\n     ? gen_rtx_SS_PLUS (mode, xop[1], xadd)\n     : gen_rtx_US_PLUS (mode, xop[1], xadd);\n-  xpattern = gen_rtx_SET (VOIDmode, xop[0], xsrc);\n+  xpattern = gen_rtx_SET (xop[0], xsrc);\n \n   op[0] = xop[0];\n   op[1] = xop[1];\n@@ -8490,7 +8489,7 @@ avr_out_round (rtx_insn *insn ATTRIBUTE_UNUSED, rtx *xop, int *plen)\n   rtx xreg = simplify_gen_subreg (imode, xop[0], mode, 0);\n   rtx xmask = immed_wide_int_const (-wi_add - wi_add, imode);\n \n-  xpattern = gen_rtx_SET (VOIDmode, xreg, gen_rtx_AND (imode, xreg, xmask));\n+  xpattern = gen_rtx_SET (xreg, gen_rtx_AND (imode, xreg, xmask));\n \n   op[0] = xreg;\n   op[1] = xreg;"}, {"sha": "2768266e0ec3ab5f900103fbea4d276482ccc6df", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -399,7 +399,7 @@ expand_prologue_reg_save (rtx spreg, int saveall, bool is_inthandler)\n \n       XVECEXP (pat, 0, 0) = gen_rtx_UNSPEC (VOIDmode, gen_rtvec (1, val),\n \t\t\t\t\t    UNSPEC_PUSH_MULTIPLE);\n-      XVECEXP (pat, 0, total_consec + 1) = gen_rtx_SET (VOIDmode, spreg,\n+      XVECEXP (pat, 0, total_consec + 1) = gen_rtx_SET (spreg,\n \t\t\t\t\t\t\tgen_rtx_PLUS (Pmode,\n \t\t\t\t\t\t\t\t      spreg,\n \t\t\t\t\t\t\t\t      val));\n@@ -415,14 +415,12 @@ expand_prologue_reg_save (rtx spreg, int saveall, bool is_inthandler)\n \t  rtx subpat;\n \t  if (d_to_save > 0)\n \t    {\n-\t      subpat = gen_rtx_SET (VOIDmode, memref, gen_rtx_REG (word_mode,\n-\t\t\t\t\t\t\t\t   dregno++));\n+\t      subpat = gen_rtx_SET (memref, gen_rtx_REG (word_mode, dregno++));\n \t      d_to_save--;\n \t    }\n \t  else\n \t    {\n-\t      subpat = gen_rtx_SET (VOIDmode, memref, gen_rtx_REG (word_mode,\n-\t\t\t\t\t\t\t\t   pregno++));\n+\t      subpat = gen_rtx_SET (memref, gen_rtx_REG (word_mode, pregno++));\n \t    }\n \t  XVECEXP (pat, 0, i + 1) = subpat;\n \t  RTX_FRAME_RELATED_P (subpat) = 1;\n@@ -529,9 +527,8 @@ expand_epilogue_reg_restore (rtx spreg, bool saveall, bool is_inthandler)\n     {\n       rtx pat = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (total_consec + 1));\n       XVECEXP (pat, 0, 0)\n-\t= gen_rtx_SET (VOIDmode, spreg,\n-\t\t       gen_rtx_PLUS (Pmode, spreg,\n-\t\t\t\t     GEN_INT (total_consec * 4)));\n+\t= gen_rtx_SET (spreg, gen_rtx_PLUS (Pmode, spreg,\n+\t\t\t\t\t    GEN_INT (total_consec * 4)));\n \n       if (npregs_consec > 0)\n \tregno = REG_P5 + 1;\n@@ -547,7 +544,7 @@ expand_epilogue_reg_restore (rtx spreg, bool saveall, bool is_inthandler)\n \n \t  regno--;\n \t  XVECEXP (pat, 0, i + 1)\n-\t    = gen_rtx_SET (VOIDmode, gen_rtx_REG (word_mode, regno), memref);\n+\t    = gen_rtx_SET (gen_rtx_REG (word_mode, regno), memref);\n \n \t  if (npregs_consec > 0)\n \t    {\n@@ -2133,7 +2130,7 @@ bfin_expand_call (rtx retval, rtx fnaddr, rtx callarg1, rtx cookie, int sibcall)\n   call = gen_rtx_CALL (VOIDmode, fnaddr, callarg1);\n \n   if (retval)\n-    call = gen_rtx_SET (VOIDmode, retval, call);\n+    call = gen_rtx_SET (retval, call);\n \n   pat = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (nelts));\n   n = 0;\n@@ -2556,8 +2553,7 @@ bfin_gen_compare (rtx cmp, machine_mode mode ATTRIBUTE_UNUSED)\n \tcode2 = EQ;\n \tbreak;\n       }\n-      emit_insn (gen_rtx_SET (VOIDmode, tem,\n-\t\t\t      gen_rtx_fmt_ee (code1, BImode, op0, op1)));\n+      emit_insn (gen_rtx_SET (tem, gen_rtx_fmt_ee (code1, BImode, op0, op1)));\n     }\n \n   return gen_rtx_fmt_ee (code2, BImode, tem, CONST0_RTX (BImode));"}, {"sha": "db85b5333d89e5b5642512fc4cc41f271fec4d8f", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1293,8 +1293,7 @@ c6x_expand_call (rtx retval, rtx address, bool sibcall)\n       if (retval == NULL_RTX)\n \tcall_insn = emit_call_insn (call_insn);\n       else\n-\tcall_insn = emit_call_insn (gen_rtx_SET (GET_MODE (retval), retval,\n-\t\t\t\t\t\t call_insn));\n+\tcall_insn = emit_call_insn (gen_rtx_SET (retval, call_insn));\n     }\n   if (flag_pic)\n     use_reg (&CALL_INSN_FUNCTION_USAGE (call_insn), pic_offset_table_rtx);\n@@ -1493,20 +1492,20 @@ c6x_expand_compare (rtx comparison, machine_mode mode)\n \n       cmp1 = gen_reg_rtx (SImode);\n       cmp2 = gen_reg_rtx (SImode);\n-      emit_insn (gen_rtx_SET (VOIDmode, cmp1,\n-\t\t\t      gen_rtx_fmt_ee (code, SImode, high[0], high[1])));\n+      emit_insn (gen_rtx_SET (cmp1, gen_rtx_fmt_ee (code, SImode,\n+\t\t\t\t\t\t    high[0], high[1])));\n       if (code == EQ)\n \t{\n \t  if (c6x_force_op_for_comparison_p (code, lo[1]))\n \t    lo[1] = force_reg (SImode, lo[1]);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, cmp2,\n-\t\t\t\t  gen_rtx_fmt_ee (code, SImode, lo[0], lo[1])));\n+\t  emit_insn (gen_rtx_SET (cmp2, gen_rtx_fmt_ee (code, SImode,\n+\t\t\t\t\t\t\tlo[0], lo[1])));\n \t  emit_insn (gen_andsi3 (cmp1, cmp1, cmp2));\n \t}\n       else\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, cmp2,\n-\t\t\t\t  gen_rtx_EQ (SImode, high[0], high[1])));\n+\t  emit_insn (gen_rtx_SET (cmp2, gen_rtx_EQ (SImode, high[0],\n+\t\t\t\t\t\t    high[1])));\n \t  if (code == GT)\n \t    code = GTU;\n \t  else if (code == LT)\n@@ -1564,8 +1563,7 @@ c6x_expand_compare (rtx comparison, machine_mode mode)\n \t}\n \n       cmp = gen_reg_rtx (SImode);\n-      emit_insn (gen_rtx_SET (VOIDmode, cmp,\n-\t\t\t      gen_rtx_fmt_ee (code1, SImode, op0, op1)));\n+      emit_insn (gen_rtx_SET (cmp, gen_rtx_fmt_ee (code1, SImode, op0, op1)));\n       fn = op_mode == DFmode ? gen_cmpdf_ior : gen_cmpsf_ior;\n       emit_insn (fn (cmp, gen_rtx_fmt_ee (code2, SImode, op0, op1),\n \t\t     op0, op1, cmp));\n@@ -1641,8 +1639,8 @@ c6x_expand_compare (rtx comparison, machine_mode mode)\n \t  cmp = gen_reg_rtx (SImode);\n \t  if (c6x_force_op_for_comparison_p (code, op1))\n \t    op1 = force_reg (SImode, op1);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, cmp,\n-\t\t\t\t  gen_rtx_fmt_ee (code, SImode, op0, op1)));\n+\t  emit_insn (gen_rtx_SET (cmp, gen_rtx_fmt_ee (code, SImode,\n+\t\t\t\t\t\t       op0, op1)));\n \t}\n     }\n \n@@ -2775,7 +2773,7 @@ emit_add_sp_const (HOST_WIDE_INT offset, bool frame_related_p)\n     {\n       if (REG_P (to_add))\n \tadd_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t      gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t      gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t   gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t orig_to_add)));\n \n@@ -5398,7 +5396,7 @@ undo_split_delayed_nonbranch (rtx_insn *insn)\n \t\t   && type == TYPE_LOAD_SHADOW)\n \t\t  || (XINT (prev_pat, 1) == UNSPEC_REAL_MULT\n \t\t      && type == TYPE_MULT_SHADOW)));\n-  insn_pat = gen_rtx_SET (VOIDmode, SET_DEST (insn_pat),\n+  insn_pat = gen_rtx_SET (SET_DEST (insn_pat),\n \t\t\t  XVECEXP (prev_pat, 0, 1));\n   insn_pat = duplicate_cond (insn_pat, prev);\n   PATTERN (insn) = insn_pat;"}, {"sha": "075968d9892cabce1a4dc8d91921bc97068ab5f3", "filename": "gcc/config/c6x/c6x.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fc6x%2Fc6x.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fc6x%2Fc6x.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1224,7 +1224,7 @@\n       rtx tmpreg = gen_reg_rtx (SImode);\n       rtx t = gen_rtx_fmt_ee (reverse_condition (GET_CODE (operands[1])),\n \t\t\t      SImode, operands[2], operands[3]);\n-      emit_insn (gen_rtx_SET (VOIDmode, tmpreg, t));\n+      emit_insn (gen_rtx_SET (tmpreg, t));\n       emit_insn (gen_scmpsi_insn (operands[0],\n \t\t\t\t  gen_rtx_fmt_ee (EQ, SImode, tmpreg, const0_rtx),\n \t\t\t\t  tmpreg, const0_rtx));"}, {"sha": "f6c5a0bf5184d1a59388f007fbc7fd15eed1ca96", "filename": "gcc/config/cr16/cr16.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fcr16%2Fcr16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fcr16%2Fcr16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcr16%2Fcr16.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1881,8 +1881,7 @@ cr16_create_dwarf_for_multi_push (rtx insn)\n \t\t}\n \t      reg = gen_rtx_REG (mode, j);\n \t      offset += 2 * inc;\n-\t      tmp = gen_rtx_SET (VOIDmode,\n-\t\t\t\t gen_frame_mem (mode,\n+\t      tmp = gen_rtx_SET (gen_frame_mem (mode,\n \t\t\t\t\t\tplus_constant\n \t\t\t\t\t\t(Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t total_push_bytes - offset)),\n@@ -1912,7 +1911,7 @@ cr16_create_dwarf_for_multi_push (rtx insn)\n       from = i--;\n     }\n \n-  tmp = gen_rtx_SET (SImode, stack_pointer_rtx,\n+  tmp = gen_rtx_SET (stack_pointer_rtx,\n \t\t     gen_rtx_PLUS (SImode, stack_pointer_rtx,\n \t\t\t\t   GEN_INT (-offset)));\n   RTX_FRAME_RELATED_P (tmp) = 1;"}, {"sha": "a9451b5717453a6fcfd6ef59f3f88fbd90108a18", "filename": "gcc/config/cris/cris.c", "status": "modified", "additions": 35, "deletions": 65, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fcris%2Fcris.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fcris%2Fcris.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2922,25 +2922,21 @@ cris_split_movdx (rtx *operands)\n \t  /* We normally copy the low-numbered register first.  However, if\n \t     the first register operand 0 is the same as the second register of\n \t     operand 1, we must copy in the opposite order.  */\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  operand_subword (dest, reverse, TRUE, mode),\n+\t  emit_insn (gen_rtx_SET (operand_subword (dest, reverse, TRUE, mode),\n \t\t\t\t  operand_subword (src, reverse, TRUE, mode)));\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  operand_subword (dest, !reverse, TRUE, mode),\n+\t  emit_insn (gen_rtx_SET (operand_subword (dest, !reverse, TRUE, mode),\n \t\t\t\t  operand_subword (src, !reverse, TRUE, mode)));\n \t}\n       /* Constant-to-reg copy.  */\n       else if (CONST_INT_P (src) || GET_CODE (src) == CONST_DOUBLE)\n \t{\n \t  rtx words[2];\n \t  split_double (src, &words[0], &words[1]);\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  operand_subword (dest, 0, TRUE, mode),\n+\t  emit_insn (gen_rtx_SET (operand_subword (dest, 0, TRUE, mode),\n \t\t\t\t  words[0]));\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  operand_subword (dest, 1, TRUE, mode),\n+\t  emit_insn (gen_rtx_SET (operand_subword (dest, 1, TRUE, mode),\n \t\t\t\t  words[1]));\n \t}\n       /* Mem-to-reg copy.  */\n@@ -2969,8 +2965,7 @@ cris_split_movdx (rtx *operands)\n \t\t manually.  */\n \t      mem = change_address (src, SImode, addr);\n \t      insn\n-\t\t= gen_rtx_SET (VOIDmode,\n-\t\t\t       operand_subword (dest, 0, TRUE, mode), mem);\n+\t\t= gen_rtx_SET (operand_subword (dest, 0, TRUE, mode), mem);\n \t      insn = emit_insn (insn);\n \t      if (GET_CODE (XEXP (mem, 0)) == POST_INC)\n \t\tREG_NOTES (insn)\n@@ -2979,8 +2974,7 @@ cris_split_movdx (rtx *operands)\n \n \t      mem = copy_rtx (mem);\n \t      insn\n-\t\t= gen_rtx_SET (VOIDmode,\n-\t\t\t       operand_subword (dest, 1, TRUE, mode), mem);\n+\t\t= gen_rtx_SET (operand_subword (dest, 1, TRUE, mode), mem);\n \t      insn = emit_insn (insn);\n \t      if (GET_CODE (XEXP (mem, 0)) == POST_INC)\n \t\tREG_NOTES (insn)\n@@ -2997,15 +2991,13 @@ cris_split_movdx (rtx *operands)\n \t\tfatal_insn (\"unexpected side-effects in address\", addr);\n \n \t      emit_insn (gen_rtx_SET\n-\t\t\t (VOIDmode,\n-\t\t\t  operand_subword (dest, reverse, TRUE, mode),\n+\t\t\t (operand_subword (dest, reverse, TRUE, mode),\n \t\t\t  change_address\n \t\t\t  (src, SImode,\n \t\t\t   plus_constant (Pmode, addr,\n \t\t\t\t\t  reverse * UNITS_PER_WORD))));\n \t      emit_insn (gen_rtx_SET\n-\t\t\t (VOIDmode,\n-\t\t\t  operand_subword (dest, ! reverse, TRUE, mode),\n+\t\t\t (operand_subword (dest, ! reverse, TRUE, mode),\n \t\t\t  change_address\n \t\t\t  (src, SImode,\n \t\t\t   plus_constant (Pmode, addr,\n@@ -3033,19 +3025,15 @@ cris_split_movdx (rtx *operands)\n \t     ourselves, we must add a post-inc note manually.  */\n \t  mem = change_address (dest, SImode, addr);\n \t  insn\n-\t    = gen_rtx_SET (VOIDmode,\n-\t\t\t   mem, operand_subword (src, 0, TRUE, mode));\n+\t    = gen_rtx_SET (mem, operand_subword (src, 0, TRUE, mode));\n \t  insn = emit_insn (insn);\n \t  if (GET_CODE (XEXP (mem, 0)) == POST_INC)\n \t    REG_NOTES (insn)\n \t      = alloc_EXPR_LIST (REG_INC, XEXP (XEXP (mem, 0), 0),\n \t\t\t\t REG_NOTES (insn));\n \n \t  mem = copy_rtx (mem);\n-\t  insn\n-\t    = gen_rtx_SET (VOIDmode,\n-\t\t\t   mem,\n-\t\t\t   operand_subword (src, 1, TRUE, mode));\n+\t  insn = gen_rtx_SET (mem, operand_subword (src, 1, TRUE, mode));\n \t  insn = emit_insn (insn);\n \t  if (GET_CODE (XEXP (mem, 0)) == POST_INC)\n \t    REG_NOTES (insn)\n@@ -3061,13 +3049,11 @@ cris_split_movdx (rtx *operands)\n \t    fatal_insn (\"unexpected side-effects in address\", addr);\n \n \t  emit_insn (gen_rtx_SET\n-\t\t     (VOIDmode,\n-\t\t      change_address (dest, SImode, addr),\n+\t\t     (change_address (dest, SImode, addr),\n \t\t      operand_subword (src, 0, TRUE, mode)));\n \n \t  emit_insn (gen_rtx_SET\n-\t\t     (VOIDmode,\n-\t\t      change_address (dest, SImode,\n+\t\t     (change_address (dest, SImode,\n \t\t\t\t      plus_constant (Pmode, addr,\n \t\t\t\t\t\t     UNITS_PER_WORD)),\n \t\t      operand_subword (src, 1, TRUE, mode)));\n@@ -3138,8 +3124,7 @@ cris_expand_prologue (void)\n \t   stdarg_regs > 0;\n \t   regno--, pretend -= 4, stdarg_regs--)\n \t{\n-\t  insn = emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t stack_pointer_rtx,\n+\t  insn = emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t\t plus_constant (Pmode,\n \t\t\t\t\t\t\tstack_pointer_rtx,\n \t\t\t\t\t\t\t-4)));\n@@ -3167,8 +3152,7 @@ cris_expand_prologue (void)\n   /* Save SRP if not a leaf function.  */\n   if (return_address_on_stack)\n     {\n-      insn = emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t     stack_pointer_rtx,\n+      insn = emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t     plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t    -4 - pretend)));\n       pretend = 0;\n@@ -3184,8 +3168,7 @@ cris_expand_prologue (void)\n   /* Set up the frame pointer, if needed.  */\n   if (frame_pointer_needed)\n     {\n-      insn = emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t     stack_pointer_rtx,\n+      insn = emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t     plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t    -4 - pretend)));\n       pretend = 0;\n@@ -3250,8 +3233,7 @@ cris_expand_prologue (void)\n \t\t  else\n \t\t    {\n \t\t      insn\n-\t\t\t= gen_rtx_SET (VOIDmode,\n-\t\t\t\t       stack_pointer_rtx,\n+\t\t\t= gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t       plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t      -(n_saved * 4 + size)));\n \t\t      insn = emit_insn (insn);\n@@ -3268,8 +3250,7 @@ cris_expand_prologue (void)\n \t\t  size = 0;\n \t\t}\n \n-\t      insn = emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t     stack_pointer_rtx,\n+\t      insn = emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t\t     plus_constant (Pmode,\n \t\t\t\t\t\t\t    stack_pointer_rtx,\n \t\t\t\t\t\t\t    -4 - size)));\n@@ -3310,8 +3291,7 @@ cris_expand_prologue (void)\n       else\n \t{\n \t  insn\n-\t    = gen_rtx_SET (VOIDmode,\n-\t\t\t   stack_pointer_rtx,\n+\t    = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t   plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t  -(n_saved * 4 + size)));\n \t  insn = emit_insn (insn);\n@@ -3326,8 +3306,7 @@ cris_expand_prologue (void)\n       /* We have to put outgoing argument space after regs.  */\n       if (cfoa_size)\n \t{\n-\t  insn = emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t stack_pointer_rtx,\n+\t  insn = emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t\t plus_constant (Pmode,\n \t\t\t\t\t\t\tstack_pointer_rtx,\n \t\t\t\t\t\t\t-cfoa_size)));\n@@ -3337,8 +3316,7 @@ cris_expand_prologue (void)\n     }\n   else if ((size + cfoa_size) > 0)\n     {\n-      insn = emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t     stack_pointer_rtx,\n+      insn = emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t     plus_constant (Pmode,\n \t\t\t\t\t\t    stack_pointer_rtx,\n \t\t\t\t\t\t    -(cfoa_size + size))));\n@@ -3436,8 +3414,7 @@ cris_expand_epilogue (void)\n \t  {\n \t    /* There is an area for outgoing parameters located before\n \t       the saved registers.  We have to adjust for that.  */\n-\t    emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t    stack_pointer_rtx,\n+\t    emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t    plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t   argspace_offset)));\n \t    /* Make sure we only do this once.  */\n@@ -3462,8 +3439,7 @@ cris_expand_epilogue (void)\n \n       if (argspace_offset)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  stack_pointer_rtx,\n+\t  emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t  plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t argspace_offset)));\n \t  argspace_offset = 0;\n@@ -3521,8 +3497,7 @@ cris_expand_epilogue (void)\n \t yet.  */\n       size += argspace_offset;\n \n-      emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t      stack_pointer_rtx,\n+      emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t      plus_constant (Pmode, stack_pointer_rtx, size)));\n     }\n \n@@ -3583,8 +3558,7 @@ cris_expand_epilogue (void)\n \t    = alloc_EXPR_LIST (REG_INC, stack_pointer_rtx, REG_NOTES (insn));\n \t}\n \n-      emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t      stack_pointer_rtx,\n+      emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t      plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t     pretend)));\n     }\n@@ -3634,20 +3608,19 @@ cris_gen_movem_load (rtx src, rtx nregs_rtx, int nprefix)\n   if (GET_CODE (XEXP (src, 0)) == POST_INC)\n     {\n       RTVEC_ELT (vec, nprefix + 1)\n-\t= gen_rtx_SET (VOIDmode, srcreg,\n-\t\t       plus_constant (Pmode, srcreg, nregs * 4));\n+\t= gen_rtx_SET (srcreg, plus_constant (Pmode, srcreg, nregs * 4));\n       eltno++;\n     }\n \n   src = replace_equiv_address (src, srcreg);\n   RTVEC_ELT (vec, nprefix)\n-    = gen_rtx_SET (VOIDmode, gen_rtx_REG (SImode, regno), src);\n+    = gen_rtx_SET (gen_rtx_REG (SImode, regno), src);\n   regno += regno_inc;\n \n   for (i = 1; i < nregs; i++, eltno++)\n     {\n       RTVEC_ELT (vec, nprefix + eltno)\n-\t= gen_rtx_SET (VOIDmode, gen_rtx_REG (SImode, regno),\n+\t= gen_rtx_SET (gen_rtx_REG (SImode, regno),\n \t\t       adjust_address_nv (src, SImode, i * 4));\n       regno += regno_inc;\n     }\n@@ -3690,7 +3663,7 @@ cris_emit_movem_store (rtx dest, rtx nregs_rtx, int increment,\n      registers so there's a three cycles penalty for use.  */\n   if (nregs == 1)\n     {\n-      rtx mov = gen_rtx_SET (VOIDmode, dest, gen_rtx_REG (SImode, 0));\n+      rtx mov = gen_rtx_SET (dest, gen_rtx_REG (SImode, 0));\n \n       if (increment == 0)\n \t{\n@@ -3705,9 +3678,8 @@ cris_emit_movem_store (rtx dest, rtx nregs_rtx, int increment,\n       vec = rtvec_alloc (2);\n \n       RTVEC_ELT (vec, 0) = mov;\n-      RTVEC_ELT (vec, 1) = gen_rtx_SET (VOIDmode, destreg,\n-\t\t\t\t\tplus_constant (Pmode, destreg,\n-\t\t\t\t\t\t       increment));\n+      RTVEC_ELT (vec, 1) = gen_rtx_SET (destreg, plus_constant (Pmode, destreg,\n+\t\t\t\t\t\t\t\tincrement));\n       if (frame_related)\n \t{\n \t  RTX_FRAME_RELATED_P (mov) = 1;\n@@ -3718,8 +3690,7 @@ cris_emit_movem_store (rtx dest, rtx nregs_rtx, int increment,\n     {\n       vec = rtvec_alloc (nregs + (increment != 0 ? 1 : 0));\n       RTVEC_ELT (vec, 0)\n-\t= gen_rtx_SET (VOIDmode,\n-\t\t       replace_equiv_address (dest,\n+\t= gen_rtx_SET (replace_equiv_address (dest,\n \t\t\t\t\t      plus_constant (Pmode, destreg,\n \t\t\t\t\t\t\t     increment)),\n \t\t       gen_rtx_REG (SImode, regno));\n@@ -3734,10 +3705,9 @@ cris_emit_movem_store (rtx dest, rtx nregs_rtx, int increment,\n       if (increment != 0)\n \t{\n \t  RTVEC_ELT (vec, 1)\n-\t    = gen_rtx_SET (VOIDmode, destreg,\n-\t\t\t   plus_constant (Pmode, destreg,\n-\t\t\t\t\t  increment != 0\n-\t\t\t\t\t  ? increment : nregs * 4));\n+\t    = gen_rtx_SET (destreg, plus_constant (Pmode, destreg,\n+\t\t\t\t\t\t   increment != 0\n+\t\t\t\t\t\t   ? increment : nregs * 4));\n \t  eltno++;\n \n \t  if (frame_related)\n@@ -3752,7 +3722,7 @@ cris_emit_movem_store (rtx dest, rtx nregs_rtx, int increment,\n       for (i = 1; i < nregs; i++, eltno++)\n \t{\n \t  RTVEC_ELT (vec, eltno)\n-\t    = gen_rtx_SET (VOIDmode, adjust_address_nv (dest, SImode, i * 4),\n+\t    = gen_rtx_SET (adjust_address_nv (dest, SImode, i * 4),\n \t\t\t   gen_rtx_REG (SImode, regno));\n \t  if (frame_related)\n \t    RTX_FRAME_RELATED_P (RTVEC_ELT (vec, eltno)) = 1;"}, {"sha": "04104d9ea81f1f28dfeac2006b4e84b8f78b5cee", "filename": "gcc/config/cris/cris.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fcris%2Fcris.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fcris%2Fcris.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2754,8 +2754,7 @@\n \t  reg1 = reg0;\n \t}\n \n-      emit_insn (gen_rtx_SET (SImode, reg0,\n-\t\t\t  gen_rtx_AND (SImode, reg1, operands[2])));\n+      emit_insn (gen_rtx_SET (reg0, gen_rtx_AND (SImode, reg1, operands[2])));\n \n       /* Make sure we get the right *final* destination.  */\n       if (! REG_P (operands[0]))\n@@ -2856,8 +2855,7 @@\n \t  reg1 = reg0;\n \t}\n \n-      emit_insn (gen_rtx_SET (HImode, reg0,\n-\t\t\t  gen_rtx_AND (HImode, reg1, operands[2])));\n+      emit_insn (gen_rtx_SET (reg0, gen_rtx_AND (HImode, reg1, operands[2])));\n \n       /* Make sure we get the right destination.  */\n       if (! REG_P (operands[0]))"}, {"sha": "ef4d163269b5764be5727377cebdecfbad32a7ba", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -687,10 +687,10 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n \n \t  gcc_assert (reg);\n \n-\t  emit_insn (gen_rtx_SET (Pmode, hi_sum_reg,\n+\t  emit_insn (gen_rtx_SET (hi_sum_reg,\n \t\t\t      gen_rtx_PLUS (Pmode, pic_offset_table_rtx,\n \t\t\t\t       gen_rtx_HIGH (Pmode, offset))));\n-\t  emit_insn (gen_rtx_SET (Pmode, reg,\n+\t  emit_insn (gen_rtx_SET (reg,\n \t\t\t\t  gen_rtx_LO_SUM (Pmode, hi_sum_reg,\n \t\t\t\t\t\t  copy_rtx (offset))));\n \n@@ -700,11 +700,9 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n \t    {\n \t  gcc_assert (reg);\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode, reg,\n-\t\t\t\t  gen_rtx_HIGH (Pmode, offset)));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, reg,\n-\t\t\t\t  gen_rtx_LO_SUM (Pmode, reg,\n-\t\t\t\t\t\t  copy_rtx (offset))));\n+\t  emit_insn (gen_rtx_SET (reg, gen_rtx_HIGH (Pmode, offset)));\n+\t  emit_insn (gen_rtx_SET (reg, gen_rtx_LO_SUM (Pmode, reg,\n+\t\t\t\t\t\t       copy_rtx (offset))));\n \t  emit_use (pic_offset_table_rtx);\n \n \t  orig = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, reg);\n@@ -725,7 +723,7 @@ machopic_indirect_data_reference (rtx orig, rtx reg)\n           && reg \n           && MACHO_DYNAMIC_NO_PIC_P)\n \t{\n-\t    emit_insn (gen_rtx_SET (Pmode, reg, ptr_ref));\n+\t    emit_insn (gen_rtx_SET (reg, ptr_ref));\n \t    ptr_ref = reg;\n \t}\n \n@@ -874,7 +872,7 @@ machopic_legitimize_pic_address (rtx orig, machine_mode mode, rtx reg)\n \t      mem = gen_const_mem (GET_MODE (orig),\n \t\t\t\t   gen_rtx_LO_SUM (Pmode, temp_reg,\n \t\t\t\t\t\t   copy_rtx (asym)));\n-\t      emit_insn (gen_rtx_SET (VOIDmode, reg, mem));\n+\t      emit_insn (gen_rtx_SET (reg, mem));\n #else\n \t      /* Some other CPU -- WriteMe! but right now there are no other\n \t\t platforms that can use dynamic-no-pic  */\n@@ -901,24 +899,24 @@ machopic_legitimize_pic_address (rtx orig, machine_mode mode, rtx reg)\n \t      if (! MACHO_DYNAMIC_NO_PIC_P)\n \t\tsum = gen_rtx_PLUS (Pmode, pic_offset_table_rtx, sum);\n \n-\t      emit_insn (gen_rtx_SET (Pmode, hi_sum_reg, sum));\n+\t      emit_insn (gen_rtx_SET (hi_sum_reg, sum));\n \n \t      mem = gen_const_mem (GET_MODE (orig),\n \t\t\t\t  gen_rtx_LO_SUM (Pmode,\n \t\t\t\t\t\t  hi_sum_reg,\n \t\t\t\t\t\t  copy_rtx (offset)));\n-\t      insn = emit_insn (gen_rtx_SET (VOIDmode, reg, mem));\n+\t      insn = emit_insn (gen_rtx_SET (reg, mem));\n \t      set_unique_reg_note (insn, REG_EQUAL, pic_ref);\n \n \t      pic_ref = reg;\n #else\n \t      emit_use (gen_rtx_REG (Pmode, PIC_OFFSET_TABLE_REGNUM));\n \n-\t      emit_insn (gen_rtx_SET (VOIDmode, reg,\n+\t      emit_insn (gen_rtx_SET (reg,\n \t\t\t\t      gen_rtx_HIGH (Pmode,\n \t\t\t\t\t\t    gen_rtx_CONST (Pmode,\n \t\t\t\t\t\t\t\t   offset))));\n-\t      emit_insn (gen_rtx_SET (VOIDmode, reg,\n+\t      emit_insn (gen_rtx_SET (reg,\n \t\t\t\t  gen_rtx_LO_SUM (Pmode, reg,\n \t\t\t\t\t   gen_rtx_CONST (Pmode,\n \t\t\t\t\t\t   \t  copy_rtx (offset)))));\n@@ -969,22 +967,21 @@ machopic_legitimize_pic_address (rtx orig, machine_mode mode, rtx reg)\n \n \t      hi_sum_reg = reg;\n \n-\t      emit_insn (gen_rtx_SET (Pmode, hi_sum_reg,\n+\t      emit_insn (gen_rtx_SET (hi_sum_reg,\n \t\t\t\t      (MACHO_DYNAMIC_NO_PIC_P)\n \t\t\t\t      ? gen_rtx_HIGH (Pmode, offset)\n \t\t\t\t      : gen_rtx_PLUS (Pmode,\n \t\t\t\t\t\t      pic_offset_table_rtx,\n \t\t\t\t\t\t      gen_rtx_HIGH (Pmode,\n \t\t\t\t\t\t\t\t    offset))));\n-\t      emit_insn (gen_rtx_SET (VOIDmode, reg,\n+\t      emit_insn (gen_rtx_SET (reg,\n \t\t\t\t      gen_rtx_LO_SUM (Pmode,\n \t\t\t\t\t\t      hi_sum_reg,\n \t\t\t\t\t\t      copy_rtx (offset))));\n \t      pic_ref = reg;\n #else\n-\t      emit_insn (gen_rtx_SET (VOIDmode, reg,\n-\t\t\t\t      gen_rtx_HIGH (Pmode, offset)));\n-\t      emit_insn (gen_rtx_SET (VOIDmode, reg,\n+\t      emit_insn (gen_rtx_SET (reg, gen_rtx_HIGH (Pmode, offset)));\n+\t      emit_insn (gen_rtx_SET (reg,\n \t\t\t\t      gen_rtx_LO_SUM (Pmode, reg,\n \t\t\t\t\t\t      copy_rtx (offset))));\n \t      pic_ref = gen_rtx_PLUS (Pmode,"}, {"sha": "e1f77c2a5a18b71c2394e5eadda5c153bde7d472", "filename": "gcc/config/epiphany/epiphany.c", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fepiphany%2Fepiphany.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -669,7 +669,7 @@ gen_compare_reg (machine_mode cmode, enum rtx_code code,\n   else\n     x = force_reg (in_mode, x);\n \n-  pat = gen_rtx_SET (VOIDmode, cc_reg, gen_rtx_COMPARE (mode, x, y));\n+  pat = gen_rtx_SET (cc_reg, gen_rtx_COMPARE (mode, x, y));\n   if (mode == CC_FP_EQmode || mode == CC_FP_GTEmode)\n     {\n       const char *name = mode == CC_FP_EQmode ? \"__eqsf2\" : \"__gtesf2\";\n@@ -1570,7 +1570,7 @@ frame_subreg_note (rtx set, int offset)\n   rtx src = simplify_gen_subreg (SImode, SET_SRC (set), DImode, offset);\n   rtx dst = simplify_gen_subreg (SImode, SET_DEST (set), DImode, offset);\n \n-  set = gen_rtx_SET (VOIDmode, dst ,src);\n+  set = gen_rtx_SET (dst ,src);\n   RTX_FRAME_RELATED_P (set) = 1;\n   return set;\n }\n@@ -1625,7 +1625,7 @@ frame_insn (rtx x)\n static rtx_insn *\n frame_move_insn (rtx to, rtx from)\n {\n-  return frame_insn (gen_rtx_SET (VOIDmode, to, from));\n+  return frame_insn (gen_rtx_SET (to, from));\n }\n \n /* Generate a MEM referring to a varargs argument slot.  */\n@@ -1867,11 +1867,10 @@ epiphany_expand_prologue (void)\n       /* Instruction scheduling can separate the instruction setting IP from\n \t INSN so that dwarf2out_frame_debug_expr becomes confused what the\n \t temporary register is.  Example: _gcov.o  */\n-      note = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+      note = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t  gen_rtx_PLUS (Pmode, stack_pointer_rtx, off));\n       note = gen_rtx_PARALLEL (VOIDmode,\n-\t\t\t       gen_rtvec (2, gen_rtx_SET (VOIDmode, mem2, reg),\n-\t\t\t\t\t  note));\n+\t\t\t       gen_rtvec (2, gen_rtx_SET (mem2, reg), note));\n       add_reg_note (insn, REG_FRAME_RELATED_EXPR, note);\n     }\n   /* If there is only one or no register to save, yet we have a large frame,"}, {"sha": "428092601c0a3a49bf96c4016a1720ccdb6fd62f", "filename": "gcc/config/epiphany/epiphany.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fepiphany%2Fepiphany.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fepiphany%2Fepiphany.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1870,7 +1870,7 @@\n     {\n       if (operands[3] != const0_rtx)\n \toperands[2] = gen_rtx_MINUS (SImode, operands[2], operands[3]);\n-      operands[2] = gen_rtx_SET (VOIDmode, operands[0], operands[2]);\n+      operands[2] = gen_rtx_SET (operands[0], operands[2]);\n       operands[3] = operands[0];\n     }\n   operands[4] = gen_rtx_fmt_ee (cmp_code, SImode,\n@@ -2269,7 +2269,7 @@\n \t(gen_rtx_PARALLEL\n \t  (VOIDmode,\n \t   gen_rtvec (2, gen_rtx_SET\n-\t\t\t   (VOIDmode, operands[0],\n+\t\t\t   (operands[0],\n \t\t\t    gen_rtx_CALL (VOIDmode, operands[1], operands[2])),\n \t\t\t gen_rtx_CLOBBER (VOIDmode,\n \t\t\t\t\t  gen_rtx_REG (SImode, GPR_LR)))));\n@@ -2312,7 +2312,7 @@\n \t(gen_rtx_PARALLEL\n \t  (VOIDmode,\n \t   gen_rtvec (2, gen_rtx_SET\n-\t\t\t   (VOIDmode, operands[0],\n+\t\t\t   (operands[0],\n \t\t\t    gen_rtx_CALL (VOIDmode, operands[1], operands[2])),\n \t\t\t ret_rtx)));\n       emit_insn (target_uninterruptible ? gen_gie (): gen_gid ());\n@@ -2628,7 +2628,7 @@\n \t(VOIDmode,\n \t gen_rtvec\n \t  (4,\n-\t   gen_rtx_SET (VOIDmode, operands[5],\n+\t   gen_rtx_SET (operands[5],\n \t\t\tgen_rtx_MULT (SImode, operands[6], operands[4])),\n \t   gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CC_FPmode, CCFP_REGNUM)),\n \t   operands[9], operands[10])));\n@@ -2640,7 +2640,7 @@\n \t(VOIDmode,\n \t gen_rtvec\n \t  (4,\n-\t   gen_rtx_SET (VOIDmode, operands[7],\n+\t   gen_rtx_SET (operands[7],\n \t\t\tgen_rtx_MULT (SImode, operands[8], operands[4])),\n \t   gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CC_FPmode, CCFP_REGNUM)),\n \t   operands[9], operands[10])));"}, {"sha": "4fbe5490bc1d5666567c480b576c2c2cefaac448", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 12, "deletions": 18, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -945,13 +945,12 @@ fr30_move_double (rtx * operands)\n \t  /* We normally copy the low-numbered register first.  However, if\n \t     the first register of operand 0 is the same as the second register\n \t     of operand 1, we must copy in the opposite order.  */\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  operand_subword (dest, reverse, TRUE, mode),\n+\t  emit_insn (gen_rtx_SET (operand_subword (dest, reverse, TRUE, mode),\n \t\t\t\t  operand_subword (src,  reverse, TRUE, mode)));\n \t  \n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t      operand_subword (dest, !reverse, TRUE, mode),\n-\t\t\t      operand_subword (src,  !reverse, TRUE, mode)));\n+\t  emit_insn\n+\t    (gen_rtx_SET (operand_subword (dest, !reverse, TRUE, mode),\n+\t\t\t  operand_subword (src,  !reverse, TRUE, mode)));\n \t}\n       else if (src_code == MEM)\n \t{\n@@ -963,28 +962,24 @@ fr30_move_double (rtx * operands)\n \t  gcc_assert (GET_CODE (addr) == REG);\n \t  \n \t  /* Copy the address before clobbering it.  See PR 34174.  */\n-\t  emit_insn (gen_rtx_SET (SImode, dest1, addr));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, dest0,\n-\t\t\t\t  adjust_address (src, SImode, 0)));\n-\t  emit_insn (gen_rtx_SET (SImode, dest1,\n-\t\t\t\t  plus_constant (SImode, dest1,\n-\t\t\t\t\t\t UNITS_PER_WORD)));\n+\t  emit_insn (gen_rtx_SET (dest1, addr));\n+\t  emit_insn (gen_rtx_SET (dest0, adjust_address (src, SImode, 0)));\n+\t  emit_insn (gen_rtx_SET (dest1, plus_constant (SImode, dest1,\n+\t\t\t\t\t\t\tUNITS_PER_WORD)));\n \n \t  new_mem = gen_rtx_MEM (SImode, dest1);\n \t  MEM_COPY_ATTRIBUTES (new_mem, src);\n \t      \n-\t  emit_insn (gen_rtx_SET (VOIDmode, dest1, new_mem));\n+\t  emit_insn (gen_rtx_SET (dest1, new_mem));\n \t}\n       else if (src_code == CONST_INT || src_code == CONST_DOUBLE)\n \t{\n \t  rtx words[2];\n \t  split_double (src, &words[0], &words[1]);\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  operand_subword (dest, 0, TRUE, mode),\n+\t  emit_insn (gen_rtx_SET (operand_subword (dest, 0, TRUE, mode),\n \t\t\t\t  words[0]));\n       \n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  operand_subword (dest, 1, TRUE, mode),\n+\t  emit_insn (gen_rtx_SET (operand_subword (dest, 1, TRUE, mode),\n \t\t\t\t  words[1]));\n \t}\n     }\n@@ -1003,8 +998,7 @@ fr30_move_double (rtx * operands)\n \n       if (REGNO (addr) == STACK_POINTER_REGNUM\n \t  || REGNO (addr) == FRAME_POINTER_REGNUM)\n-\temit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\tadjust_address (dest, SImode, UNITS_PER_WORD),\n+\temit_insn (gen_rtx_SET (adjust_address (dest, SImode, UNITS_PER_WORD),\n \t\t\t\tsrc1));\n       else\n \t{"}, {"sha": "e01fd1af2a73d1545647d699ec8dca2a4ee3234d", "filename": "gcc/config/frv/frv.c", "status": "modified", "additions": 56, "deletions": 73, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ffrv%2Ffrv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1593,8 +1593,7 @@ frv_frame_mem (machine_mode mode, rtx base, int offset)\n static rtx\n frv_dwarf_store (rtx reg, int offset)\n {\n-  rtx set = gen_rtx_SET (VOIDmode,\n-\t\t\t gen_rtx_MEM (GET_MODE (reg),\n+  rtx set = gen_rtx_SET (gen_rtx_MEM (GET_MODE (reg),\n \t\t\t\t      plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t     offset)),\n \t\t\t reg);\n@@ -1647,8 +1646,8 @@ frv_frame_access (frv_frame_accessor_t *accessor, rtx reg, int stack_offset)\n       if (SPR_P (REGNO (reg)))\n \t{\n \t  rtx temp = gen_rtx_REG (mode, TEMP_REGNO);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, temp, mem));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, reg, temp));\n+\t  emit_insn (gen_rtx_SET (temp, mem));\n+\t  emit_insn (gen_rtx_SET (reg, temp));\n \t}\n       else\n \t{\n@@ -1665,7 +1664,7 @@ frv_frame_access (frv_frame_accessor_t *accessor, rtx reg, int stack_offset)\n \t\t\t\t\t    XEXP (XEXP (mem, 0), 1)));\n \t      mem = gen_rtx_MEM (DImode, temp);\n \t    }\n-\t  emit_insn (gen_rtx_SET (VOIDmode, reg, mem));\n+\t  emit_insn (gen_rtx_SET (reg, mem));\n \t}\n       emit_use (reg);\n     }\n@@ -1674,8 +1673,8 @@ frv_frame_access (frv_frame_accessor_t *accessor, rtx reg, int stack_offset)\n       if (SPR_P (REGNO (reg)))\n \t{\n \t  rtx temp = gen_rtx_REG (mode, TEMP_REGNO);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, temp, reg));\n-\t  frv_frame_insn (gen_rtx_SET (Pmode, mem, temp),\n+\t  emit_insn (gen_rtx_SET (temp, reg));\n+\t  frv_frame_insn (gen_rtx_SET (mem, temp),\n \t\t\t  frv_dwarf_store (reg, stack_offset));\n \t}\n       else if (mode == DImode)\n@@ -1699,12 +1698,12 @@ frv_frame_access (frv_frame_accessor_t *accessor, rtx reg, int stack_offset)\n \t      mem = gen_rtx_MEM (DImode, temp);\n \t    }\n \n-\t  frv_frame_insn (gen_rtx_SET (Pmode, mem, reg),\n+\t  frv_frame_insn (gen_rtx_SET (mem, reg),\n \t\t\t  gen_rtx_PARALLEL (VOIDmode,\n \t\t\t\t\t    gen_rtvec (2, set1, set2)));\n \t}\n       else\n-\tfrv_frame_insn (gen_rtx_SET (Pmode, mem, reg),\n+\tfrv_frame_insn (gen_rtx_SET (mem, reg),\n \t\t\tfrv_dwarf_store (reg, stack_offset));\n     }\n }\n@@ -1819,9 +1818,7 @@ frv_expand_prologue (void)\n     rtx dwarf_offset = GEN_INT (-info->total_size);\n \n     frv_frame_insn (gen_stack_adjust (sp, sp, asm_offset),\n-\t\t    gen_rtx_SET (Pmode,\n-\t\t\t\t sp,\n-\t\t\t\t gen_rtx_PLUS (Pmode, sp, dwarf_offset)));\n+\t\t    gen_rtx_SET (sp, gen_rtx_PLUS (Pmode, sp, dwarf_offset)));\n   }\n \n   /* If the frame pointer is needed, store the old one at (sp + FP_OFFSET)\n@@ -1841,8 +1838,8 @@ frv_expand_prologue (void)\n       frv_frame_access (&accessor, fp, fp_offset);\n \n       /* Set up the new frame pointer.  */\n-      frv_frame_insn (gen_rtx_SET (VOIDmode, fp, asm_src),\n-\t\t      gen_rtx_SET (VOIDmode, fp, dwarf_src));\n+      frv_frame_insn (gen_rtx_SET (fp, asm_src),\n+\t\t      gen_rtx_SET (fp, dwarf_src));\n \n       /* Access region C from the frame pointer.  */\n       accessor.base = fp;\n@@ -1935,7 +1932,7 @@ frv_expand_epilogue (bool emit_return)\n \n       /* Load the old link register into a GPR.  */\n       return_addr = gen_rtx_REG (Pmode, TEMP_REGNO);\n-      emit_insn (gen_rtx_SET (VOIDmode, return_addr, mem));\n+      emit_insn (gen_rtx_SET (return_addr, mem));\n     }\n   else\n     return_addr = gen_rtx_REG (Pmode, LR_REGNO);\n@@ -1944,7 +1941,7 @@ frv_expand_epilogue (bool emit_return)\n      the load is preserved.  */\n   if (frame_pointer_needed)\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, fp, gen_rtx_MEM (Pmode, fp)));\n+      emit_insn (gen_rtx_SET (fp, gen_rtx_MEM (Pmode, fp)));\n       emit_use (fp);\n     }\n \n@@ -2301,8 +2298,8 @@ frv_expand_block_move (rtx operands[])\n       tmp_reg = gen_reg_rtx (mode);\n       src_mem = change_address (orig_src, mode, src_addr);\n       dest_mem = change_address (orig_dest, mode, dest_addr);\n-      emit_insn (gen_rtx_SET (VOIDmode, tmp_reg, src_mem));\n-      stores[num_reg++] = gen_rtx_SET (VOIDmode, dest_mem, tmp_reg);\n+      emit_insn (gen_rtx_SET (tmp_reg, src_mem));\n+      stores[num_reg++] = gen_rtx_SET (dest_mem, tmp_reg);\n \n       if (num_reg >= MAX_MOVE_REG)\n \t{\n@@ -2381,7 +2378,7 @@ frv_expand_block_clear (rtx operands[])\n \n       clear_bytes = GET_MODE_SIZE (mode);\n       dest_mem = change_address (orig_dest, mode, dest_addr);\n-      emit_insn (gen_rtx_SET (VOIDmode, dest_mem, const0_rtx));\n+      emit_insn (gen_rtx_SET (dest_mem, const0_rtx));\n     }\n \n   return TRUE;\n@@ -3608,9 +3605,7 @@ frv_legitimize_tls_address (rtx addr, enum tls_model model)\n \t  }\n \n \treg = gen_reg_rtx (Pmode);\n-\temit_insn (gen_rtx_SET (VOIDmode, reg,\n-\t\t\t\tgen_rtx_PLUS (Pmode,\n-\t\t\t\t\t      retval, tp)));\n+\temit_insn (gen_rtx_SET (reg, gen_rtx_PLUS (Pmode, retval, tp)));\n \n \tdest = gen_tlsmoff (addr, reg);\n \n@@ -3996,7 +3991,7 @@ frv_emit_move (machine_mode mode, rtx dest, rtx src)\n       gcc_unreachable ();\n     }\n \n-  emit_insn (gen_rtx_SET (VOIDmode, dest, src));\n+  emit_insn (gen_rtx_SET (dest, src));\n }\n \n /* Emit code to handle a MOVSI, adding in the small data register or pic\n@@ -4023,7 +4018,7 @@ frv_emit_movsi (rtx dest, rtx src)\n \t\t\t   FIRST_VIRTUAL_REGISTER,\n \t\t\t   LAST_VIRTUAL_POINTER_REGISTER))))\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, copy_to_mode_reg (SImode, src)));\n+      emit_insn (gen_rtx_SET (dest, copy_to_mode_reg (SImode, src)));\n       return TRUE;\n     }\n \n@@ -4756,8 +4751,7 @@ frv_emit_comparison (enum rtx_code test, rtx op0, rtx op1)\n \t    : gen_rtx_REG (cc_mode,\n \t\t\t   (cc_mode == CC_FPmode) ? FCC_FIRST : ICC_FIRST));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, cc_reg,\n-\t\t\t  gen_rtx_COMPARE (cc_mode, op0, op1)));\n+  emit_insn (gen_rtx_SET (cc_reg, gen_rtx_COMPARE (cc_mode, op0, op1)));\n \n   return cc_reg;\n }\n@@ -4785,7 +4779,7 @@ frv_emit_cond_branch (rtx operands[])\n   label_ref = gen_rtx_LABEL_REF (VOIDmode, operands[3]);\n   test_rtx = gen_rtx_fmt_ee (test, cc_mode, cc_reg, const0_rtx);\n   if_else = gen_rtx_IF_THEN_ELSE (cc_mode, test_rtx, label_ref, pc_rtx);\n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, if_else));\n+  emit_jump_insn (gen_rtx_SET (pc_rtx, if_else));\n   return TRUE;\n }\n \n@@ -4806,7 +4800,7 @@ frv_emit_scc (rtx operands[])\n \t(parallel [(set <target> (<test>, <cc_reg>, (const_int 0))\n \t\t   (clobber (<ccr_reg>))])  */\n   test_rtx = gen_rtx_fmt_ee (test, SImode, cc_reg, const0_rtx);\n-  set = gen_rtx_SET (VOIDmode, operands[0], test_rtx);\n+  set = gen_rtx_SET (operands[0], test_rtx);\n \n   cr_reg = ((TARGET_ALLOC_CC)\n \t    ? gen_reg_rtx (CC_CCRmode)\n@@ -4832,8 +4826,7 @@ frv_split_scc (rtx dest, rtx test, rtx cc_reg, rtx cr_reg, HOST_WIDE_INT value)\n   start_sequence ();\n \n   /* Set the appropriate CCR bit.  */\n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  cr_reg,\n+  emit_insn (gen_rtx_SET (cr_reg,\n \t\t\t  gen_rtx_fmt_ee (GET_CODE (test),\n \t\t\t\t\t  GET_MODE (cr_reg),\n \t\t\t\t\t  cc_reg,\n@@ -4847,7 +4840,7 @@ frv_split_scc (rtx dest, rtx test, rtx cc_reg, rtx cr_reg, HOST_WIDE_INT value)\n \t\t\t\tgen_rtx_EQ (GET_MODE (cr_reg),\n \t\t\t\t\t    cr_reg,\n \t\t\t\t\t    const0_rtx),\n-\t\t\t\tgen_rtx_SET (VOIDmode, dest, const0_rtx)));\n+\t\t\t\tgen_rtx_SET (dest, const0_rtx)));\n \n   /* Finish up, return sequence.  */\n   ret = get_insns ();\n@@ -4921,7 +4914,7 @@ frv_emit_cond_move (rtx dest, rtx test_rtx, rtx src1, rtx src2)\n   test2 = gen_rtx_fmt_ee (test, cc_mode, cc_reg, const0_rtx);\n   if_rtx = gen_rtx_IF_THEN_ELSE (GET_MODE (dest), test2, src1, src2);\n \n-  set = gen_rtx_SET (VOIDmode, dest, if_rtx);\n+  set = gen_rtx_SET (dest, if_rtx);\n \n   cr_reg = ((TARGET_ALLOC_CC)\n \t    ? gen_reg_rtx (CC_CCRmode)\n@@ -4952,8 +4945,7 @@ frv_split_cond_move (rtx operands[])\n   start_sequence ();\n \n   /* Set the appropriate CCR bit.  */\n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  cr_reg,\n+  emit_insn (gen_rtx_SET (cr_reg,\n \t\t\t  gen_rtx_fmt_ee (GET_CODE (test),\n \t\t\t\t\t  GET_MODE (cr_reg),\n \t\t\t\t\t  cc_reg,\n@@ -4973,7 +4965,7 @@ frv_split_cond_move (rtx operands[])\n \t  emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\t\tgen_rtx_NE (cr_mode, cr_reg,\n \t\t\t\t\t\t    const0_rtx),\n-\t\t\t\t\tgen_rtx_SET (VOIDmode, dest, src1)));\n+\t\t\t\t\tgen_rtx_SET (dest, src1)));\n \t}\n \n       else if (value2 == 0)\n@@ -4982,7 +4974,7 @@ frv_split_cond_move (rtx operands[])\n \t  emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\t\tgen_rtx_EQ (cr_mode, cr_reg,\n \t\t\t\t\t\t    const0_rtx),\n-\t\t\t\t\tgen_rtx_SET (VOIDmode, dest, src2)));\n+\t\t\t\t\tgen_rtx_SET (dest, src2)));\n \t}\n \n       /* If the first value is within an addi range and also the difference\n@@ -5000,8 +4992,7 @@ frv_split_cond_move (rtx operands[])\n \t  emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\t\tgen_rtx_NE (cr_mode, cr_reg,\n \t\t\t\t\t\t    const0_rtx),\n-\t\t\t\t\tgen_rtx_SET (VOIDmode, dest_si,\n-\t\t\t\t\t\t     const0_rtx)));\n+\t\t\t\t\tgen_rtx_SET (dest_si, const0_rtx)));\n \t  emit_insn (gen_addsi3 (dest_si, dest_si, src1));\n \t}\n \n@@ -5014,13 +5005,13 @@ frv_split_cond_move (rtx operands[])\n       if (! rtx_equal_p (dest, src1))\n \temit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\t      gen_rtx_NE (cr_mode, cr_reg, const0_rtx),\n-\t\t\t\t      gen_rtx_SET (VOIDmode, dest, src1)));\n+\t\t\t\t      gen_rtx_SET (dest, src1)));\n \n       /* Emit the conditional move for the test being false if needed.  */\n       if (! rtx_equal_p (dest, src2))\n \temit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\t      gen_rtx_EQ (cr_mode, cr_reg, const0_rtx),\n-\t\t\t\t      gen_rtx_SET (VOIDmode, dest, src2)));\n+\t\t\t\t      gen_rtx_SET (dest, src2)));\n     }\n \n   /* Finish up, return sequence.  */\n@@ -5117,18 +5108,14 @@ frv_split_minmax (rtx operands[])\n     }\n \n   /* Issue the compare instruction.  */\n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  cc_reg,\n-\t\t\t  gen_rtx_COMPARE (GET_MODE (cc_reg),\n-\t\t\t\t\t   src1, src2)));\n+  emit_insn (gen_rtx_SET (cc_reg, gen_rtx_COMPARE (GET_MODE (cc_reg),\n+\t\t\t\t\t\t   src1, src2)));\n \n   /* Set the appropriate CCR bit.  */\n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  cr_reg,\n-\t\t\t  gen_rtx_fmt_ee (test_code,\n-\t\t\t\t\t  GET_MODE (cr_reg),\n-\t\t\t\t\t  cc_reg,\n-\t\t\t\t\t  const0_rtx)));\n+  emit_insn (gen_rtx_SET (cr_reg, gen_rtx_fmt_ee (test_code,\n+\t\t\t\t\t\t  GET_MODE (cr_reg),\n+\t\t\t\t\t\t  cc_reg,\n+\t\t\t\t\t\t  const0_rtx)));\n \n   /* If are taking the min/max of a nonzero constant, load that first, and\n      then do a conditional move of the other value.  */\n@@ -5139,7 +5126,7 @@ frv_split_minmax (rtx operands[])\n       emit_move_insn (dest, src2);\n       emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\t    gen_rtx_NE (cr_mode, cr_reg, const0_rtx),\n-\t\t\t\t    gen_rtx_SET (VOIDmode, dest, src1)));\n+\t\t\t\t    gen_rtx_SET (dest, src1)));\n     }\n \n   /* Otherwise, do each half of the move.  */\n@@ -5149,13 +5136,13 @@ frv_split_minmax (rtx operands[])\n       if (! rtx_equal_p (dest, src1))\n \temit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\t      gen_rtx_NE (cr_mode, cr_reg, const0_rtx),\n-\t\t\t\t      gen_rtx_SET (VOIDmode, dest, src1)));\n+\t\t\t\t      gen_rtx_SET (dest, src1)));\n \n       /* Emit the conditional move for the test being false if needed.  */\n       if (! rtx_equal_p (dest, src2))\n \temit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\t      gen_rtx_EQ (cr_mode, cr_reg, const0_rtx),\n-\t\t\t\t      gen_rtx_SET (VOIDmode, dest, src2)));\n+\t\t\t\t      gen_rtx_SET (dest, src2)));\n     }\n \n   /* Finish up, return sequence.  */\n@@ -5180,14 +5167,11 @@ frv_split_abs (rtx operands[])\n   start_sequence ();\n \n   /* Issue the compare < 0 instruction.  */\n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  cc_reg,\n-\t\t\t  gen_rtx_COMPARE (CCmode, src, const0_rtx)));\n+  emit_insn (gen_rtx_SET (cc_reg, gen_rtx_COMPARE (CCmode, src, const0_rtx)));\n \n   /* Set the appropriate CCR bit.  */\n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  cr_reg,\n-\t\t\t  gen_rtx_fmt_ee (LT, CC_CCRmode, cc_reg, const0_rtx)));\n+  emit_insn (gen_rtx_SET (cr_reg, gen_rtx_fmt_ee (LT, CC_CCRmode,\n+\t\t\t\t\t\t  cc_reg, const0_rtx)));\n \n   /* Emit the conditional negate if the value is negative.  */\n   emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n@@ -5198,7 +5182,7 @@ frv_split_abs (rtx operands[])\n   if (! rtx_equal_p (dest, src))\n     emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\t  gen_rtx_EQ (CC_CCRmode, cr_reg, const0_rtx),\n-\t\t\t\t  gen_rtx_SET (VOIDmode, dest, src)));\n+\t\t\t\t  gen_rtx_SET (dest, src)));\n \n   /* Finish up, return sequence.  */\n   ret = get_insns ();\n@@ -5576,8 +5560,8 @@ frv_ifcvt_modify_tests (ce_if_block *ce_info, rtx *p_true, rtx *p_false)\n       code_false = EQ;\n     }\n \n-  check_insn = gen_rtx_SET (VOIDmode, cr,\n-\t\t\t    gen_rtx_fmt_ee (code, CC_CCRmode, cc, const0_rtx));\n+  check_insn = gen_rtx_SET (cr, gen_rtx_fmt_ee (code, CC_CCRmode,\n+\t\t\t\t\t\tcc, const0_rtx));\n \n   /* Record the check insn to be inserted later.  */\n   frv_ifcvt_add_insn (check_insn, BB_END (test_bb), TRUE);\n@@ -5705,7 +5689,7 @@ frv_ifcvt_modify_multiple_tests (ce_if_block *ce_info,\n   compare = gen_rtx_fmt_ee (GET_CODE (test_expr), CC_CCRmode, cc, const0_rtx);\n   if_else = gen_rtx_IF_THEN_ELSE (CC_CCRmode, old_test, compare, const0_rtx);\n \n-  check_insn = gen_rtx_SET (VOIDmode, new_cr, if_else);\n+  check_insn = gen_rtx_SET (new_cr, if_else);\n \n   /* Add the new check insn to the list of check insns that need to be\n      inserted.  */\n@@ -5788,7 +5772,7 @@ frv_ifcvt_load_value (rtx value, rtx insn ATTRIBUTE_UNUSED)\n     }\n \n   frv_ifcvt.cur_scratch_regs++;\n-  frv_ifcvt.scratch_regs[num_alloc] = gen_rtx_SET (VOIDmode, reg, value);\n+  frv_ifcvt.scratch_regs[num_alloc] = gen_rtx_SET (reg, value);\n \n   if (dump_file)\n     {\n@@ -5982,9 +5966,9 @@ frv_ifcvt_modify_insn (ce_if_block *ce_info,\n \t      op1 = frv_ifcvt_load_value (op1, insn);\n \t      if (op1)\n \t\tCOND_EXEC_CODE (pattern)\n-\t\t  = gen_rtx_SET (VOIDmode, dest, gen_rtx_fmt_ee (GET_CODE (src),\n-\t\t\t\t\t\t\t\t GET_MODE (src),\n-\t\t\t\t\t\t\t\t op0, op1));\n+\t\t  = gen_rtx_SET (dest, gen_rtx_fmt_ee (GET_CODE (src),\n+\t\t\t\t\t\t       GET_MODE (src),\n+\t\t\t\t\t\t       op0, op1));\n \t      else\n \t\tgoto fail;\n \t    }\n@@ -6004,8 +5988,7 @@ frv_ifcvt_modify_insn (ce_if_block *ce_info,\n \t\t{\n \t\t  op1 = gen_rtx_SIGN_EXTEND (DImode, op1);\n \t\t  COND_EXEC_CODE (pattern)\n-\t\t    = gen_rtx_SET (VOIDmode, dest,\n-\t\t\t\t   gen_rtx_MULT (DImode, op0, op1));\n+\t\t    = gen_rtx_SET (dest, gen_rtx_MULT (DImode, op0, op1));\n \t\t}\n \t      else\n \t\tgoto fail;\n@@ -6095,7 +6078,7 @@ frv_ifcvt_modify_insn (ce_if_block *ce_info,\n \n \t  /* If either src or destination changed, redo SET.  */\n \t  if (changed_p)\n-\t    COND_EXEC_CODE (pattern) = gen_rtx_SET (VOIDmode, dest, src);\n+\t    COND_EXEC_CODE (pattern) = gen_rtx_SET (dest, src);\n \t}\n \n       /* Rewrite a nested set cccr in terms of IF_THEN_ELSE.  Also deal with\n@@ -6117,7 +6100,7 @@ frv_ifcvt_modify_insn (ce_if_block *ce_info,\n \t    }\n \n \t  if_else = gen_rtx_IF_THEN_ELSE (CC_CCRmode, test, src, const0_rtx);\n-\t  pattern = gen_rtx_SET (VOIDmode, dest, if_else);\n+\t  pattern = gen_rtx_SET (dest, if_else);\n \t}\n \n       /* Remap a nested compare instruction to use the paired CC/CR reg.  */\n@@ -6131,7 +6114,7 @@ frv_ifcvt_modify_insn (ce_if_block *ce_info,\n \t{\n \t  PUT_MODE (frv_ifcvt.nested_cc_reg, GET_MODE (dest));\n \t  COND_EXEC_CODE (pattern)\n-\t    = gen_rtx_SET (VOIDmode, frv_ifcvt.nested_cc_reg, copy_rtx (src));\n+\t    = gen_rtx_SET (frv_ifcvt.nested_cc_reg, copy_rtx (src));\n \t}\n     }\n \n@@ -8945,7 +8928,7 @@ frv_expand_voidbinop_builtin (enum insn_code icode, tree call)\n       if (! offsettable_address_p (0, mode0, op0))\n \t{\n \t  reg = gen_reg_rtx (Pmode);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, reg, op0));\n+\t  emit_insn (gen_rtx_SET (reg, op0));\n \t}\n \n       op0 = gen_rtx_MEM (SImode, reg);"}, {"sha": "96f78b1dfbf911cc6eaabc9d1911faf3ad4ab7ac", "filename": "gcc/config/frv/frv.md", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ffrv%2Ffrv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ffrv%2Ffrv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1995,22 +1995,20 @@\n \n   start_sequence ();\n \n-  emit_insn (gen_rtx_SET (VOIDmode, icr,\n-\t\t\t  gen_rtx_LT (CC_CCRmode, icc, const0_rtx)));\n+  emit_insn (gen_rtx_SET (icr, gen_rtx_LT (CC_CCRmode, icc, const0_rtx)));\n \n   emit_insn (gen_movsi (dest, const1_rtx));\n \n   emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\tgen_rtx_NE (CC_CCRmode, icr, const0_rtx),\n-\t\t\t\tgen_rtx_SET (VOIDmode, dest,\n+\t\t\t\tgen_rtx_SET (dest,\n \t\t\t\t\t     gen_rtx_NEG (SImode, dest))));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, icr,\n-\t\t\t  gen_rtx_EQ (CC_CCRmode, icc, const0_rtx)));\n+  emit_insn (gen_rtx_SET (icr, gen_rtx_EQ (CC_CCRmode, icc, const0_rtx)));\n \n   emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\tgen_rtx_NE (CC_CCRmode, icr, const0_rtx),\n-\t\t\t\tgen_rtx_SET (VOIDmode, dest, const0_rtx)));\n+\t\t\t\tgen_rtx_SET (dest, const0_rtx)));\n \n   operands[3] = get_insns ();\n   end_sequence ();\n@@ -2063,21 +2061,19 @@\n \n   start_sequence ();\n \n-  emit_insn (gen_rtx_SET (VOIDmode, icr,\n-\t\t\t  gen_rtx_GTU (CC_CCRmode, icc, const0_rtx)));\n+  emit_insn (gen_rtx_SET (icr, gen_rtx_GTU (CC_CCRmode, icc, const0_rtx)));\n \n   emit_insn (gen_movsi (dest, const1_rtx));\n \n   emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\tgen_rtx_NE (CC_CCRmode, icr, const0_rtx),\n \t\t\t\tgen_addsi3 (dest, dest, dest)));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, icr,\n-\t\t\t  gen_rtx_LTU (CC_CCRmode, icc, const0_rtx)));\n+  emit_insn (gen_rtx_SET (icr, gen_rtx_LTU (CC_CCRmode, icc, const0_rtx)));\n \n   emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\tgen_rtx_NE (CC_CCRmode, icr, const0_rtx),\n-\t\t\t\tgen_rtx_SET (VOIDmode, dest, const0_rtx)));\n+\t\t\t\tgen_rtx_SET (dest, const0_rtx)));\n \n   operands[3] = get_insns ();\n   end_sequence ();\n@@ -2332,8 +2328,7 @@\n \t\t\t\tgen_rtx_EQ (CC_CCRmode,\n \t\t\t\t\t    operands[1],\n \t\t\t\t\t    const0_rtx),\n-\t\t\t\tgen_rtx_SET (VOIDmode, int_op0,\n-\t\t\t\t\t     const0_rtx)));\n+\t\t\t\tgen_rtx_SET (int_op0, const0_rtx)));\n \n   operands[2] = get_insns ();\n   end_sequence ();"}, {"sha": "e6141d48fd940b988076480ddbf5ff9baf7f0b18", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -727,13 +727,12 @@ h8300_push_pop (int regno, int nregs, bool pop_p, bool return_p)\n \t  lhs = gen_rtx_MEM (SImode, plus_constant (Pmode, sp, (j + 1) * -4));\n \t  rhs = gen_rtx_REG (SImode, regno + j);\n \t}\n-      RTVEC_ELT (vec, i + j) = gen_rtx_SET (VOIDmode, lhs, rhs);\n+      RTVEC_ELT (vec, i + j) = gen_rtx_SET (lhs, rhs);\n     }\n \n   /* Add the stack adjustment.  */\n   offset = GEN_INT ((pop_p ? nregs : -nregs) * 4);\n-  RTVEC_ELT (vec, i + j) = gen_rtx_SET (VOIDmode, sp,\n-\t\t\t\t\tgen_rtx_PLUS (Pmode, sp, offset));\n+  RTVEC_ELT (vec, i + j) = gen_rtx_SET (sp, gen_rtx_PLUS (Pmode, sp, offset));\n \n   x = gen_rtx_PARALLEL (VOIDmode, vec);\n   if (!pop_p)\n@@ -2772,7 +2771,7 @@ h8300_swap_into_er6 (rtx addr)\n \t\t\t\t 2 * UNITS_PER_WORD));\n   else\n     add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-\t\t  gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t  gen_rtx_SET (stack_pointer_rtx,\n \t\t\t       plus_constant (Pmode, stack_pointer_rtx, 4)));\n \n   emit_move_insn (hard_frame_pointer_rtx, addr);\n@@ -2800,7 +2799,7 @@ h8300_swap_out_of_er6 (rtx addr)\n \t\t\t\t 2 * UNITS_PER_WORD));\n   else\n     add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-\t\t  gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t  gen_rtx_SET (stack_pointer_rtx,\n \t\t\t       plus_constant (Pmode, stack_pointer_rtx, -4)));\n }\n \f\n@@ -3699,13 +3698,13 @@ h8300_expand_branch (rtx operands[])\n   rtx tmp;\n \n   tmp = gen_rtx_COMPARE (VOIDmode, op0, op1);\n-  emit_insn (gen_rtx_SET (VOIDmode, cc0_rtx, tmp));\n+  emit_insn (gen_rtx_SET (cc0_rtx, tmp));\n \n   tmp = gen_rtx_fmt_ee (code, VOIDmode, cc0_rtx, const0_rtx);\n   tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n \t\t\t      gen_rtx_LABEL_REF (VOIDmode, label),\n \t\t\t      pc_rtx);\n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+  emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n }\n \n \n@@ -3721,10 +3720,10 @@ h8300_expand_store (rtx operands[])\n   rtx tmp;\n \n   tmp = gen_rtx_COMPARE (VOIDmode, op0, op1);\n-  emit_insn (gen_rtx_SET (VOIDmode, cc0_rtx, tmp));\n+  emit_insn (gen_rtx_SET (cc0_rtx, tmp));\n \n   tmp = gen_rtx_fmt_ee (code, GET_MODE (dest), cc0_rtx, const0_rtx);\n-  emit_insn (gen_rtx_SET (VOIDmode, dest, tmp));\n+  emit_insn (gen_rtx_SET (dest, tmp));\n }\n \f\n /* Shifts.\n@@ -3881,7 +3880,7 @@ expand_a_shift (machine_mode mode, enum rtx_code code, rtx operands[])\n   emit_insn (gen_rtx_PARALLEL\n \t     (VOIDmode,\n \t      gen_rtvec (2,\n-\t\t\t gen_rtx_SET (VOIDmode, copy_rtx (operands[0]),\n+\t\t\t gen_rtx_SET (copy_rtx (operands[0]),\n \t\t\t\t      gen_rtx_fmt_ee (code, mode,\n \t\t\t\t\t\t      copy_rtx (operands[0]), operands[2])),\n \t\t\t gen_rtx_CLOBBER (VOIDmode,"}, {"sha": "7bd9ff307b6470a68791c98ff14efcb1b0d12114", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 173, "deletions": 225, "changes": 398, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -9877,8 +9877,7 @@ gen_push (rtx arg)\n   if (REG_P (arg) && GET_MODE (arg) != word_mode)\n     arg = gen_rtx_REG (word_mode, REGNO (arg));\n \n-  return gen_rtx_SET (VOIDmode,\n-\t\t      gen_rtx_MEM (word_mode,\n+  return gen_rtx_SET (gen_rtx_MEM (word_mode,\n \t\t\t\t   gen_rtx_PRE_DEC (Pmode,\n \t\t\t\t\t\t    stack_pointer_rtx)),\n \t\t      arg);\n@@ -9892,8 +9891,7 @@ gen_pop (rtx arg)\n   if (REG_P (arg) && GET_MODE (arg) != word_mode)\n     arg = gen_rtx_REG (word_mode, REGNO (arg));\n \n-  return gen_rtx_SET (VOIDmode,\n-\t\t      arg,\n+  return gen_rtx_SET (arg,\n \t\t      gen_rtx_MEM (word_mode,\n \t\t\t\t   gen_rtx_POST_INC (Pmode,\n \t\t\t\t\t\t     stack_pointer_rtx)));\n@@ -10448,8 +10446,7 @@ ix86_emit_save_reg_using_mov (machine_mode mode, unsigned int regno,\n \t  addr = plus_constant (Pmode, hard_frame_pointer_rtx,\n \t\t\t\tcfun->machine->fs.fp_offset - cfa_offset);\n \t  mem = gen_rtx_MEM (mode, addr);\n-\t  add_reg_note (insn, REG_CFA_EXPRESSION,\n-\t\t\tgen_rtx_SET (VOIDmode, mem, reg));\n+\t  add_reg_note (insn, REG_CFA_EXPRESSION, gen_rtx_SET (mem, reg));\n \t}\n     }\n \n@@ -10461,7 +10458,7 @@ ix86_emit_save_reg_using_mov (machine_mode mode, unsigned int regno,\n       addr = plus_constant (Pmode, m->fs.cfa_reg,\n \t\t\t    m->fs.cfa_offset - cfa_offset);\n       mem = gen_rtx_MEM (mode, addr);\n-      add_reg_note (insn, REG_CFA_OFFSET, gen_rtx_SET (VOIDmode, mem, reg));\n+      add_reg_note (insn, REG_CFA_OFFSET, gen_rtx_SET (mem, reg));\n     }\n }\n \n@@ -10567,7 +10564,7 @@ pro_epilogue_adjust_stack (rtx dest, rtx src, rtx offset,\n \t\t      && dest != hard_frame_pointer_rtx);\n \t  tmp = hard_frame_pointer_rtx;\n \t}\n-      insn = emit_insn (gen_rtx_SET (DImode, tmp, offset));\n+      insn = emit_insn (gen_rtx_SET (tmp, offset));\n       if (style < 0)\n \tadd_frame_related_expr = true;\n \n@@ -10587,7 +10584,7 @@ pro_epilogue_adjust_stack (rtx dest, rtx src, rtx offset,\n       m->fs.cfa_reg = dest;\n \n       r = gen_rtx_PLUS (Pmode, src, offset);\n-      r = gen_rtx_SET (VOIDmode, dest, r);\n+      r = gen_rtx_SET (dest, r);\n       add_reg_note (insn, REG_CFA_ADJUST_CFA, r);\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n@@ -10597,7 +10594,7 @@ pro_epilogue_adjust_stack (rtx dest, rtx src, rtx offset,\n       if (add_frame_related_expr)\n \t{\n \t  rtx r = gen_rtx_PLUS (Pmode, src, offset);\n-\t  r = gen_rtx_SET (VOIDmode, dest, r);\n+\t  r = gen_rtx_SET (dest, r);\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR, r);\n \t}\n     }\n@@ -10871,7 +10868,7 @@ release_scratch_register_on_entry (struct scratch_reg *sr)\n       /* The RTX_FRAME_RELATED_P mechanism doesn't know about pop.  */\n       RTX_FRAME_RELATED_P (insn) = 1;\n       x = gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (UNITS_PER_WORD));\n-      x = gen_rtx_SET (VOIDmode, stack_pointer_rtx, x);\n+      x = gen_rtx_SET (stack_pointer_rtx, x);\n       add_reg_note (insn, REG_FRAME_RELATED_EXPR, x);\n       m->fs.sp_offset -= UNITS_PER_WORD;\n     }\n@@ -10913,7 +10910,7 @@ ix86_adjust_stack_and_probe (const HOST_WIDE_INT size)\n \t  else\n \t    adjust = PROBE_INTERVAL;\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t  emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t  plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t -adjust)));\n \t  emit_stack_probe (stack_pointer_rtx);\n@@ -10924,13 +10921,13 @@ ix86_adjust_stack_and_probe (const HOST_WIDE_INT size)\n       else\n         adjust = size + PROBE_INTERVAL - i;\n \n-      emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+      emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t      plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t     -adjust)));\n       emit_stack_probe (stack_pointer_rtx);\n \n       /* Adjust back to account for the additional first interval.  */\n-      last = emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+      last = emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t     plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t    PROBE_INTERVAL + dope)));\n     }\n@@ -10956,13 +10953,13 @@ ix86_adjust_stack_and_probe (const HOST_WIDE_INT size)\n       /* Step 2: compute initial and final value of the loop counter.  */\n \n       /* SP = SP_0 + PROBE_INTERVAL.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+      emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t      plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t     - (PROBE_INTERVAL + dope))));\n \n       /* LAST_ADDR = SP_0 + PROBE_INTERVAL + ROUNDED_SIZE.  */\n       emit_move_insn (sr.reg, GEN_INT (-rounded_size));\n-      emit_insn (gen_rtx_SET (VOIDmode, sr.reg,\n+      emit_insn (gen_rtx_SET (sr.reg,\n \t\t\t      gen_rtx_PLUS (Pmode, sr.reg,\n \t\t\t\t\t    stack_pointer_rtx)));\n \n@@ -10986,14 +10983,14 @@ ix86_adjust_stack_and_probe (const HOST_WIDE_INT size)\n \n       if (size != rounded_size)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t  emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t          plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t rounded_size - size)));\n \t  emit_stack_probe (stack_pointer_rtx);\n \t}\n \n       /* Adjust back to account for the additional first interval.  */\n-      last = emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+      last = emit_insn (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t     plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t    PROBE_INTERVAL + dope)));\n \n@@ -11009,10 +11006,10 @@ ix86_adjust_stack_and_probe (const HOST_WIDE_INT size)\n     {\n       rtx expr = gen_rtx_SEQUENCE (VOIDmode, rtvec_alloc (2));\n       XVECEXP (expr, 0, 0)\n-\t= gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t= gen_rtx_SET (stack_pointer_rtx,\n \t\t       plus_constant (Pmode, stack_pointer_rtx, -size));\n       XVECEXP (expr, 0, 1)\n-\t= gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t= gen_rtx_SET (stack_pointer_rtx,\n \t\t       plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t      PROBE_INTERVAL + dope + size));\n       add_reg_note (last, REG_FRAME_RELATED_EXPR, expr);\n@@ -11390,7 +11387,7 @@ ix86_expand_prologue (void)\n \t  insn = emit_insn (gen_blockage ());\n \n \t  push = gen_push (hard_frame_pointer_rtx);\n-\t  mov = gen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n+\t  mov = gen_rtx_SET (hard_frame_pointer_rtx,\n \t\t\t     stack_pointer_rtx);\n \t  RTX_FRAME_RELATED_P (push) = 1;\n \t  RTX_FRAME_RELATED_P (mov) = 1;\n@@ -11425,7 +11422,7 @@ ix86_expand_prologue (void)\n \t only as a stack adjustment.  The real copy of the register as\n \t a save will be done later, if needed.  */\n       t = plus_constant (Pmode, stack_pointer_rtx, -UNITS_PER_WORD);\n-      t = gen_rtx_SET (VOIDmode, stack_pointer_rtx, t);\n+      t = gen_rtx_SET (stack_pointer_rtx, t);\n       add_reg_note (insn, REG_CFA_ADJUST_CFA, t);\n       RTX_FRAME_RELATED_P (insn) = 1;\n     }\n@@ -11446,7 +11443,7 @@ ix86_expand_prologue (void)\n \n       /* Grab the argument pointer.  */\n       t = plus_constant (Pmode, stack_pointer_rtx, m->fs.sp_offset);\n-      insn = emit_insn (gen_rtx_SET (VOIDmode, crtl->drap_reg, t));\n+      insn = emit_insn (gen_rtx_SET (crtl->drap_reg, t));\n       RTX_FRAME_RELATED_P (insn) = 1;\n       m->fs.cfa_reg = crtl->drap_reg;\n       m->fs.cfa_offset = 0;\n@@ -11682,7 +11679,7 @@ ix86_expand_prologue (void)\n \t\tm->fs.cfa_offset += UNITS_PER_WORD;\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n \t      add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\t    gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t    gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t\t plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t\t-UNITS_PER_WORD)));\n \t    }\n@@ -11699,7 +11696,7 @@ ix86_expand_prologue (void)\n \t\tm->fs.cfa_offset += UNITS_PER_WORD;\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n \t      add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\t    gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\t    gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t\t plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t\t-UNITS_PER_WORD)));\n \t    }\n@@ -11722,7 +11719,7 @@ ix86_expand_prologue (void)\n \t    m->fs.cfa_offset += allocate;\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\tgen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\tgen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t     plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t    -allocate)));\n \t}\n@@ -11790,7 +11787,7 @@ ix86_expand_prologue (void)\n          isn't necessary, here we will emit prologue to setup DRAP\n          without stack realign adjustment */\n       t = choose_baseaddr (0);\n-      emit_insn (gen_rtx_SET (VOIDmode, crtl->drap_reg, t));\n+      emit_insn (gen_rtx_SET (crtl->drap_reg, t));\n     }\n \n   /* Prevent instructions from being scheduled into register save push\n@@ -11844,7 +11841,7 @@ ix86_emit_restore_reg_using_pop (rtx reg)\n   if (m->fs.cfa_reg == stack_pointer_rtx)\n     {\n       rtx x = plus_constant (Pmode, stack_pointer_rtx, UNITS_PER_WORD);\n-      x = gen_rtx_SET (VOIDmode, stack_pointer_rtx, x);\n+      x = gen_rtx_SET (stack_pointer_rtx, x);\n       add_reg_note (insn, REG_CFA_ADJUST_CFA, x);\n       RTX_FRAME_RELATED_P (insn) = 1;\n \n@@ -12111,7 +12108,7 @@ ix86_expand_epilogue (int style)\n \t    {\n \t      t = gen_rtx_PLUS (Pmode, hard_frame_pointer_rtx, sa);\n \t      t = plus_constant (Pmode, t, m->fs.fp_offset - UNITS_PER_WORD);\n-\t      emit_insn (gen_rtx_SET (VOIDmode, sa, t));\n+\t      emit_insn (gen_rtx_SET (sa, t));\n \n \t      t = gen_frame_mem (Pmode, hard_frame_pointer_rtx);\n \t      insn = emit_move_insn (hard_frame_pointer_rtx, t);\n@@ -12141,7 +12138,7 @@ ix86_expand_epilogue (int style)\n \t    {\n \t      t = gen_rtx_PLUS (Pmode, stack_pointer_rtx, sa);\n \t      t = plus_constant (Pmode, t, m->fs.sp_offset - UNITS_PER_WORD);\n-\t      insn = emit_insn (gen_rtx_SET (VOIDmode, stack_pointer_rtx, t));\n+\t      insn = emit_insn (gen_rtx_SET (stack_pointer_rtx, t));\n \t      ix86_add_queued_cfa_restore_notes (insn);\n \n \t      gcc_assert (m->fs.cfa_reg == stack_pointer_rtx);\n@@ -12238,7 +12235,7 @@ ix86_expand_epilogue (int style)\n \tparam_ptr_offset += UNITS_PER_WORD;\n \n       insn = emit_insn (gen_rtx_SET\n-\t\t\t(VOIDmode, stack_pointer_rtx,\n+\t\t\t(stack_pointer_rtx,\n \t\t\t gen_rtx_PLUS (Pmode,\n \t\t\t\t       crtl->drap_reg,\n \t\t\t\t       GEN_INT (-param_ptr_offset))));\n@@ -12300,10 +12297,9 @@ ix86_expand_epilogue (int style)\n \t  m->fs.sp_offset -= UNITS_PER_WORD;\n \n \t  rtx x = plus_constant (Pmode, stack_pointer_rtx, UNITS_PER_WORD);\n-\t  x = gen_rtx_SET (VOIDmode, stack_pointer_rtx, x);\n+\t  x = gen_rtx_SET (stack_pointer_rtx, x);\n \t  add_reg_note (insn, REG_CFA_ADJUST_CFA, x);\n-\t  add_reg_note (insn, REG_CFA_REGISTER,\n-\t\t\tgen_rtx_SET (VOIDmode, ecx, pc_rtx));\n+\t  add_reg_note (insn, REG_CFA_REGISTER, gen_rtx_SET (ecx, pc_rtx));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \n \t  pro_epilogue_adjust_stack (stack_pointer_rtx, stack_pointer_rtx,\n@@ -12492,7 +12488,7 @@ ix86_expand_split_stack_prologue (void)\n \t  /* We don't use ix86_gen_add3 in this case because it will\n \t     want to split to lea, but when not optimizing the insn\n \t     will not be split after this point.  */\n-\t  emit_insn (gen_rtx_SET (VOIDmode, scratch_reg,\n+\t  emit_insn (gen_rtx_SET (scratch_reg,\n \t\t\t\t  gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\toffset)));\n \t}\n@@ -12664,7 +12660,7 @@ ix86_expand_split_stack_prologue (void)\n          So we add five words to get to the stack arguments.\n       */\n       words = TARGET_64BIT ? 3 : 5;\n-      emit_insn (gen_rtx_SET (VOIDmode, scratch_reg,\n+      emit_insn (gen_rtx_SET (scratch_reg,\n \t\t\t      gen_rtx_PLUS (Pmode, frame_reg,\n \t\t\t\t\t    GEN_INT (words * UNITS_PER_WORD))));\n \n@@ -12683,7 +12679,7 @@ ix86_expand_split_stack_prologue (void)\n      case we need to set it based on the stack pointer.  */\n   if (cfun->machine->split_stack_varargs_pointer != NULL_RTX)\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, scratch_reg,\n+      emit_insn (gen_rtx_SET (scratch_reg,\n \t\t\t      gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\t\t    GEN_INT (UNITS_PER_WORD))));\n \n@@ -17229,7 +17225,7 @@ ix86_expand_clear (rtx dest)\n   /* Avoid HImode and its attendant prefix byte.  */\n   if (GET_MODE_SIZE (GET_MODE (dest)) < 4)\n     dest = gen_rtx_REG (SImode, REGNO (dest));\n-  tmp = gen_rtx_SET (VOIDmode, dest, const0_rtx);\n+  tmp = gen_rtx_SET (dest, const0_rtx);\n \n   if (!TARGET_USE_MOV0 || optimize_insn_for_size_p ())\n     {\n@@ -17322,7 +17318,7 @@ ix86_expand_move (machine_mode mode, rtx operands[])\n \t    }\n \t  if (op0 != op1 && GET_CODE (op0) != MEM)\n \t    {\n-\t      rtx insn = gen_rtx_SET (VOIDmode, op0, op1);\n+\t      rtx insn = gen_rtx_SET (op0, op1);\n \t      emit_insn (insn);\n \t      return;\n \t    }\n@@ -17388,14 +17384,14 @@ ix86_expand_move (machine_mode mode, rtx operands[])\n \t  if (!register_operand (op0, mode))\n \t    {\n \t      rtx temp = gen_reg_rtx (mode);\n-\t      emit_insn (gen_rtx_SET (VOIDmode, temp, op1));\n+\t      emit_insn (gen_rtx_SET (temp, op1));\n \t      emit_move_insn (op0, temp);\n \t      return;\n \t    }\n \t}\n     }\n \n-  emit_insn (gen_rtx_SET (VOIDmode, op0, op1));\n+  emit_insn (gen_rtx_SET (op0, op1));\n }\n \n void\n@@ -17453,7 +17449,7 @@ ix86_expand_vector_move (machine_mode mode, rtx operands[])\n       return;\n     }\n \n-  emit_insn (gen_rtx_SET (VOIDmode, op0, op1));\n+  emit_insn (gen_rtx_SET (op0, op1));\n }\n \n /* Split 32-byte AVX unaligned load and store if needed.  */\n@@ -17508,7 +17504,7 @@ ix86_avx256_split_vector_move_misalign (rtx op0, rtx op1)\n \t is true, and without the UNSPEC it can be combined\n \t with arithmetic instructions.  */\n       else if (misaligned_operand (op1, GET_MODE (op1)))\n-\temit_insn (gen_rtx_SET (VOIDmode, op0, op1));\n+\temit_insn (gen_rtx_SET (op0, op1));\n       else\n \temit_insn (load_unaligned (op0, op1));\n     }\n@@ -17689,7 +17685,7 @@ ix86_expand_vector_move_misalign (machine_mode mode, rtx operands[])\n \t  && (GET_MODE_CLASS (mode) == MODE_VECTOR_INT\n \t      || GET_MODE_CLASS (mode) == MODE_VECTOR_FLOAT)\n \t  && misaligned_operand (op1, GET_MODE (op1)))\n-\temit_insn (gen_rtx_SET (VOIDmode, op0, op1));\n+\temit_insn (gen_rtx_SET (op0, op1));\n       /* ??? If we have typed data, then it would appear that using\n \t movdqu is the only way to get unaligned data loaded with\n \t integer type.  */\n@@ -17960,7 +17956,7 @@ ix86_expand_binary_operator (enum rtx_code code, machine_mode mode,\n \n  /* Emit the instruction.  */\n \n-  op = gen_rtx_SET (VOIDmode, dst, gen_rtx_fmt_ee (code, mode, src1, src2));\n+  op = gen_rtx_SET (dst, gen_rtx_fmt_ee (code, mode, src1, src2));\n \n   if (reload_completed\n       && code == PLUS\n@@ -18039,7 +18035,7 @@ ix86_expand_vector_logical_operator (enum rtx_code code, machine_mode mode,\n \t  op1 = SUBREG_REG (op1);\n \t  if (!nonimmediate_operand (op1, GET_MODE (dst)))\n \t    op1 = force_reg (GET_MODE (dst), op1);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, dst,\n+\t  emit_insn (gen_rtx_SET (dst,\n \t\t\t\t  gen_rtx_fmt_ee (code, GET_MODE (dst),\n \t\t\t\t\t\t  op1, op2)));\n \t  emit_move_insn (operands[0], gen_lowpart (mode, dst));\n@@ -18053,7 +18049,7 @@ ix86_expand_vector_logical_operator (enum rtx_code code, machine_mode mode,\n   if (!nonimmediate_operand (operands[2], mode))\n     operands[2] = force_reg (mode, operands[2]);\n   ix86_fixup_binary_operands_no_copy (code, mode, operands);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+  emit_insn (gen_rtx_SET (operands[0],\n \t\t\t  gen_rtx_fmt_ee (code, mode, operands[1],\n \t\t\t\t\t  operands[2])));\n }\n@@ -18127,7 +18123,7 @@ ix86_expand_unary_operator (enum rtx_code code, machine_mode mode,\n \n   /* Emit the instruction.  */\n \n-  op = gen_rtx_SET (VOIDmode, dst, gen_rtx_fmt_e (code, mode, src));\n+  op = gen_rtx_SET (dst, gen_rtx_fmt_e (code, mode, src));\n \n   if (code == NOT)\n     emit_insn (op);\n@@ -18188,7 +18184,7 @@ ix86_split_idivmod (machine_mode mode, rtx operands[],\n   tmp0 = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp0,\n \t\t\t       gen_rtx_LABEL_REF (VOIDmode, qimode_label),\n \t\t\t       pc_rtx);\n-  insn = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp0));\n+  insn = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp0));\n   predict_jump (REG_BR_PROB_BASE * 50 / 100);\n   JUMP_LABEL (insn) = qimode_label;\n \n@@ -18805,7 +18801,7 @@ ix86_emit_binop (enum rtx_code code, machine_mode mode,\n {\n   rtx op, clob;\n \n-  op = gen_rtx_SET (VOIDmode, dst, gen_rtx_fmt_ee (code, mode, dst, src));\n+  op = gen_rtx_SET (dst, gen_rtx_fmt_ee (code, mode, dst, src));\n   clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, FLAGS_REG));\n   \n   emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, op, clob)));\n@@ -18894,7 +18890,7 @@ ix86_split_lea_for_addr (rtx_insn *insn, rtx operands[], machine_mode mode)\n \t{\n \t  /* r1 = r2 + r3 * C case.  Need to move r3 into r1.  */\n \t  if (regno0 != regno2)\n-\t    emit_insn (gen_rtx_SET (VOIDmode, target, parts.index));\n+\t    emit_insn (gen_rtx_SET (target, parts.index));\n \n \t  /* Use shift for scaling.  */\n \t  ix86_emit_binop (ASHIFT, mode, target,\n@@ -18910,19 +18906,19 @@ ix86_split_lea_for_addr (rtx_insn *insn, rtx operands[], machine_mode mode)\n   else if (!parts.base && !parts.index)\n     {\n       gcc_assert(parts.disp);\n-      emit_insn (gen_rtx_SET (VOIDmode, target, parts.disp));\n+      emit_insn (gen_rtx_SET (target, parts.disp));\n     }\n   else\n     {\n       if (!parts.base)\n \t{\n \t  if (regno0 != regno2)\n-\t    emit_insn (gen_rtx_SET (VOIDmode, target, parts.index));\n+\t    emit_insn (gen_rtx_SET (target, parts.index));\n \t}\n       else if (!parts.index)\n \t{\n \t  if (regno0 != regno1)\n-\t    emit_insn (gen_rtx_SET (VOIDmode, target, parts.base));\n+\t    emit_insn (gen_rtx_SET (target, parts.base));\n \t}\n       else\n \t{\n@@ -18941,7 +18937,7 @@ ix86_split_lea_for_addr (rtx_insn *insn, rtx operands[], machine_mode mode)\n \t      else\n \t\ttmp = parts.base, tmp1 = parts.index;\n \n-\t      emit_insn (gen_rtx_SET (VOIDmode, target, tmp));\n+\t      emit_insn (gen_rtx_SET (target, tmp));\n \n \t      if (parts.disp && parts.disp != const0_rtx)\n \t\tix86_emit_binop (PLUS, mode, target, parts.disp);\n@@ -19128,13 +19124,13 @@ ix86_split_convert_uns_si_sse (rtx operands[])\n   emit_move_insn (zero_or_two31, MEM_P (two31) ? large : two31);\n \n   x = gen_rtx_fmt_ee (LE, vecmode, large, value);\n-  emit_insn (gen_rtx_SET (VOIDmode, large, x));\n+  emit_insn (gen_rtx_SET (large, x));\n \n   x = gen_rtx_AND (vecmode, zero_or_two31, large);\n-  emit_insn (gen_rtx_SET (VOIDmode, zero_or_two31, x));\n+  emit_insn (gen_rtx_SET (zero_or_two31, x));\n \n   x = gen_rtx_MINUS (vecmode, value, zero_or_two31);\n-  emit_insn (gen_rtx_SET (VOIDmode, value, x));\n+  emit_insn (gen_rtx_SET (value, x));\n \n   large = gen_rtx_REG (V4SImode, REGNO (large));\n   emit_insn (gen_ashlv4si3 (large, large, GEN_INT (31)));\n@@ -19534,7 +19530,7 @@ ix86_expand_fp_absneg_operator (enum rtx_code code, machine_mode mode,\n   src = operands[1];\n \n   set = gen_rtx_fmt_e (code, mode, src);\n-  set = gen_rtx_SET (VOIDmode, dst, set);\n+  set = gen_rtx_SET (dst, set);\n \n   if (mask)\n     {\n@@ -19644,12 +19640,12 @@ ix86_split_copysign_const (rtx operands[])\n \n   dest = simplify_gen_subreg (vmode, dest, mode, 0);\n   x = gen_rtx_AND (vmode, dest, mask);\n-  emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+  emit_insn (gen_rtx_SET (dest, x));\n \n   if (op0 != CONST0_RTX (vmode))\n     {\n       x = gen_rtx_IOR (vmode, dest, op0);\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+      emit_insn (gen_rtx_SET (dest, x));\n     }\n }\n \n@@ -19685,13 +19681,13 @@ ix86_split_copysign_var (rtx operands[])\n       gcc_assert (REGNO (op1) == REGNO (scratch));\n \n       x = gen_rtx_AND (vmode, scratch, mask);\n-      emit_insn (gen_rtx_SET (VOIDmode, scratch, x));\n+      emit_insn (gen_rtx_SET (scratch, x));\n \n       dest = mask;\n       op0 = simplify_gen_subreg (vmode, op0, mode, 0);\n       x = gen_rtx_NOT (vmode, dest);\n       x = gen_rtx_AND (vmode, x, op0);\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+      emit_insn (gen_rtx_SET (dest, x));\n     }\n   else\n     {\n@@ -19705,7 +19701,7 @@ ix86_split_copysign_var (rtx operands[])\n           op1 = simplify_gen_subreg (vmode, op1, mode, 0);\n \t  x = gen_rtx_AND (vmode, scratch, op1);\n \t}\n-      emit_insn (gen_rtx_SET (VOIDmode, scratch, x));\n+      emit_insn (gen_rtx_SET (scratch, x));\n \n       if (REGNO (op0) == REGNO (dest))\t\t\t/* alternative 1,2 */\n \t{\n@@ -19719,11 +19715,11 @@ ix86_split_copysign_var (rtx operands[])\n \t  op0 = simplify_gen_subreg (vmode, op0, mode, 0);\n \t  x = gen_rtx_AND (vmode, dest, op0);\n \t}\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+      emit_insn (gen_rtx_SET (dest, x));\n     }\n \n   x = gen_rtx_IOR (vmode, dest, scratch);\n-  emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+  emit_insn (gen_rtx_SET (dest, x));\n }\n \n /* Return TRUE or FALSE depending on whether the first SET in INSN\n@@ -19795,7 +19791,7 @@ ix86_expand_int_compare (enum rtx_code code, rtx op0, rtx op1)\n   /* This is very simple, but making the interface the same as in the\n      FP case makes the rest of the code easier.  */\n   tmp = gen_rtx_COMPARE (cmpmode, op0, op1);\n-  emit_insn (gen_rtx_SET (VOIDmode, flags, tmp));\n+  emit_insn (gen_rtx_SET (flags, tmp));\n \n   /* Return the test that should be put into the flags user, i.e.\n      the bcc, scc, or cmov instruction.  */\n@@ -20167,16 +20163,14 @@ ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1, rtx scratch)\n     case IX86_FPCMP_COMI:\n       intcmp_mode = fpcmp_mode;\n       tmp = gen_rtx_COMPARE (fpcmp_mode, op0, op1);\n-      tmp = gen_rtx_SET (VOIDmode, gen_rtx_REG (fpcmp_mode, FLAGS_REG),\n-\t\t\t tmp);\n+      tmp = gen_rtx_SET (gen_rtx_REG (fpcmp_mode, FLAGS_REG), tmp);\n       emit_insn (tmp);\n       break;\n \n     case IX86_FPCMP_SAHF:\n       intcmp_mode = fpcmp_mode;\n       tmp = gen_rtx_COMPARE (fpcmp_mode, op0, op1);\n-      tmp = gen_rtx_SET (VOIDmode, gen_rtx_REG (fpcmp_mode, FLAGS_REG),\n-\t\t\t tmp);\n+      tmp = gen_rtx_SET (gen_rtx_REG (fpcmp_mode, FLAGS_REG), tmp);\n \n       if (!scratch)\n \tscratch = gen_reg_rtx (HImode);\n@@ -20190,7 +20184,7 @@ ix86_expand_fp_compare (enum rtx_code code, rtx op0, rtx op1, rtx scratch)\n       tmp2 = gen_rtx_UNSPEC (HImode, gen_rtvec (1, tmp), UNSPEC_FNSTSW);\n       if (!scratch)\n \tscratch = gen_reg_rtx (HImode);\n-      emit_insn (gen_rtx_SET (VOIDmode, scratch, tmp2));\n+      emit_insn (gen_rtx_SET (scratch, tmp2));\n \n       /* In the unordered case, we have to check C2 for NaN's, which\n \t doesn't happen to work out to anything nice combination-wise.\n@@ -20355,7 +20349,7 @@ ix86_expand_branch (enum rtx_code code, rtx op0, rtx op1, rtx label)\n       tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n \t\t\t\t  gen_rtx_LABEL_REF (VOIDmode, label),\n \t\t\t\t  pc_rtx);\n-      emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+      emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n       return;\n \n     case DImode:\n@@ -20502,7 +20496,7 @@ ix86_split_fp_branch (enum rtx_code code, rtx op1, rtx op2,\n \t\t\t\t      tmp);\n \n   i = emit_jump_insn (gen_rtx_SET\n-\t\t      (VOIDmode, pc_rtx,\n+\t\t      (pc_rtx,\n \t\t       gen_rtx_IF_THEN_ELSE (VOIDmode,\n \t\t\t\t\t     condition, target1, target2)));\n   if (split_branch_probability >= 0)\n@@ -20518,7 +20512,7 @@ ix86_expand_setcc (rtx dest, enum rtx_code code, rtx op0, rtx op1)\n \n   ret = ix86_expand_compare (code, op0, op1);\n   PUT_MODE (ret, QImode);\n-  emit_insn (gen_rtx_SET (VOIDmode, dest, ret));\n+  emit_insn (gen_rtx_SET (dest, ret));\n }\n \n /* Expand comparison setting or clearing carry flag.  Return true when\n@@ -20959,7 +20953,7 @@ ix86_expand_int_movcc (rtx operands[])\n \t      if (nops == 1)\n \t\tout = force_operand (tmp, copy_rtx (out));\n \t      else\n-\t\temit_insn (gen_rtx_SET (VOIDmode, copy_rtx (out), copy_rtx (tmp)));\n+\t\temit_insn (gen_rtx_SET (copy_rtx (out), copy_rtx (tmp)));\n \t    }\n \t  if (!rtx_equal_p (out, operands[0]))\n \t    emit_move_insn (operands[0], copy_rtx (out));\n@@ -21142,7 +21136,7 @@ ix86_expand_int_movcc (rtx operands[])\n     operands[3] = force_reg (mode, operands[3]);\n \n   emit_insn (compare_seq);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+  emit_insn (gen_rtx_SET (operands[0],\n \t\t\t  gen_rtx_IF_THEN_ELSE (mode,\n \t\t\t\t\t\tcompare_op, operands[2],\n \t\t\t\t\t\toperands[3])));\n@@ -21261,7 +21255,7 @@ ix86_expand_sse_fp_minmax (rtx dest, enum rtx_code code, rtx cmp_op0,\n       tmp = gen_rtx_fmt_ee (code, mode, if_true, if_false);\n     }\n \n-  emit_insn (gen_rtx_SET (VOIDmode, dest, tmp));\n+  emit_insn (gen_rtx_SET (dest, tmp));\n   return true;\n }\n \n@@ -21340,7 +21334,7 @@ ix86_expand_sse_cmp (rtx dest, enum rtx_code code, rtx cmp_op0, rtx cmp_op1,\n       convert_move (dest, x, false);\n     }\n   else\n-    emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+    emit_insn (gen_rtx_SET (dest, x));\n \n   return dest;\n }\n@@ -21363,29 +21357,29 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       && rtx_equal_p (op_false, CONST0_RTX (mode))\n       && !maskcmp)\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, cmp));\n+      emit_insn (gen_rtx_SET (dest, cmp));\n     }\n   else if (op_false == CONST0_RTX (mode)\n       && !maskcmp)\n     {\n       op_true = force_reg (mode, op_true);\n       x = gen_rtx_AND (mode, cmp, op_true);\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+      emit_insn (gen_rtx_SET (dest, x));\n     }\n   else if (op_true == CONST0_RTX (mode)\n       && !maskcmp)\n     {\n       op_false = force_reg (mode, op_false);\n       x = gen_rtx_NOT (mode, cmp);\n       x = gen_rtx_AND (mode, x, op_false);\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+      emit_insn (gen_rtx_SET (dest, x));\n     }\n   else if (INTEGRAL_MODE_P (mode) && op_true == CONSTM1_RTX (mode)\n       && !maskcmp)\n     {\n       op_false = force_reg (mode, op_false);\n       x = gen_rtx_IOR (mode, cmp, op_false);\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+      emit_insn (gen_rtx_SET (dest, x));\n     }\n   else if (TARGET_XOP\n       && !maskcmp)\n@@ -21395,10 +21389,9 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n       if (!nonimmediate_operand (op_false, mode))\n \top_false = force_reg (mode, op_false);\n \n-      emit_insn (gen_rtx_SET (mode, dest,\n-\t\t\t      gen_rtx_IF_THEN_ELSE (mode, cmp,\n-\t\t\t\t\t\t    op_true,\n-\t\t\t\t\t\t    op_false)));\n+      emit_insn (gen_rtx_SET (dest, gen_rtx_IF_THEN_ELSE (mode, cmp,\n+\t\t\t\t\t\t\t  op_true,\n+\t\t\t\t\t\t\t  op_false)));\n     }\n   else\n     {\n@@ -21497,14 +21490,14 @@ ix86_expand_sse_movcc (rtx dest, rtx cmp, rtx op_true, rtx op_false)\n \t    t3 = dest;\n \n \t  x = gen_rtx_AND (mode, op_true, cmp);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, t2, x));\n+\t  emit_insn (gen_rtx_SET (t2, x));\n \n \t  x = gen_rtx_NOT (mode, cmp);\n \t  x = gen_rtx_AND (mode, x, op_false);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, t3, x));\n+\t  emit_insn (gen_rtx_SET (t3, x));\n \n \t  x = gen_rtx_IOR (mode, t3, t2);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+\t  emit_insn (gen_rtx_SET (dest, x));\n \t}\n     }\n }\n@@ -21564,7 +21557,7 @@ ix86_expand_fp_movcc (rtx operands[])\n       compare_op = ix86_expand_compare (NE, tmp, const0_rtx);\n     }\n \n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+  emit_insn (gen_rtx_SET (operands[0],\n \t\t\t  gen_rtx_IF_THEN_ELSE (mode, compare_op,\n \t\t\t\t\t\toperands[2], operands[3])));\n \n@@ -21787,8 +21780,7 @@ ix86_expand_int_vcond (rtx operands[])\n \t    case V8HImode:\n \t      /* Perform a parallel unsigned saturating subtraction.  */\n \t      x = gen_reg_rtx (mode);\n-\t      emit_insn (gen_rtx_SET (VOIDmode, x,\n-\t\t\t\t      gen_rtx_US_MINUS (mode, cop0, cop1)));\n+\t      emit_insn (gen_rtx_SET (x, gen_rtx_US_MINUS (mode, cop0, cop1)));\n \n \t      cop0 = x;\n \t      cop1 = CONST0_RTX (mode);\n@@ -22846,7 +22838,7 @@ ix86_split_long_move (rtx operands[])\n \t  if (GET_MODE (base) != Pmode)\n \t    base = gen_rtx_REG (Pmode, REGNO (base));\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode, base, XEXP (part[1][0], 0)));\n+\t  emit_insn (gen_rtx_SET (base, XEXP (part[1][0], 0)));\n \t  part[1][0] = replace_equiv_address (part[1][0], base);\n \t  for (i = 1; i < nparts; i++)\n \t    {\n@@ -23028,12 +23020,12 @@ ix86_split_ashl (rtx *operands, rtx scratch, machine_mode mode)\n \t  d = gen_lowpart (QImode, low[0]);\n \t  d = gen_rtx_STRICT_LOW_PART (VOIDmode, d);\n \t  s = gen_rtx_EQ (QImode, flags, const0_rtx);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, d, s));\n+\t  emit_insn (gen_rtx_SET (d, s));\n \n \t  d = gen_lowpart (QImode, high[0]);\n \t  d = gen_rtx_STRICT_LOW_PART (VOIDmode, d);\n \t  s = gen_rtx_NE (QImode, flags, const0_rtx);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, d, s));\n+\t  emit_insn (gen_rtx_SET (d, s));\n \t}\n \n       /* Otherwise, we can get the same results by manually performing\n@@ -23071,7 +23063,7 @@ ix86_split_ashl (rtx *operands, rtx scratch, machine_mode mode)\n \t    x = gen_rtx_ZERO_EXTEND (half_mode, operands[2]);\n \t  else\n \t    x = gen_lowpart (half_mode, operands[2]);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, high[0], x));\n+\t  emit_insn (gen_rtx_SET (high[0], x));\n \n \t  emit_insn (gen_lshr3 (high[0], high[0], GEN_INT (bits)));\n \t  emit_insn (gen_and3 (high[0], high[0], const1_rtx));\n@@ -25311,17 +25303,16 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n        emit_insn (gen_testsi_ccno_1 (tmpreg, GEN_INT (0x8080)));\n        tmp = gen_rtx_REG (CCNOmode, FLAGS_REG);\n        tmp = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n-       emit_insn (gen_rtx_SET (VOIDmode, tmpreg,\n+       emit_insn (gen_rtx_SET (tmpreg,\n \t\t\t       gen_rtx_IF_THEN_ELSE (SImode, tmp,\n \t\t\t\t\t\t     reg,\n \t\t\t\t\t\t     tmpreg)));\n        /* Emit lea manually to avoid clobbering of flags.  */\n-       emit_insn (gen_rtx_SET (SImode, reg2,\n-\t\t\t       gen_rtx_PLUS (Pmode, out, const2_rtx)));\n+       emit_insn (gen_rtx_SET (reg2, gen_rtx_PLUS (Pmode, out, const2_rtx)));\n \n        tmp = gen_rtx_REG (CCNOmode, FLAGS_REG);\n        tmp = gen_rtx_EQ (VOIDmode, tmp, const0_rtx);\n-       emit_insn (gen_rtx_SET (VOIDmode, out,\n+       emit_insn (gen_rtx_SET (out,\n \t\t\t       gen_rtx_IF_THEN_ELSE (Pmode, tmp,\n \t\t\t\t\t\t     reg2,\n \t\t\t\t\t\t     out)));\n@@ -25337,7 +25328,7 @@ ix86_expand_strlensi_unroll_1 (rtx out, rtx src, rtx align_rtx)\n        tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n                             gen_rtx_LABEL_REF (VOIDmode, end_2_label),\n                             pc_rtx);\n-       tmp = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+       tmp = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n        JUMP_LABEL (tmp) = end_2_label;\n \n        /* Not in the first two.  Move two bytes forward.  */\n@@ -25531,14 +25522,14 @@ ix86_expand_call (rtx retval, rtx fnaddr, rtx callarg1,\n \t    }\n \t}\n \n-      call = gen_rtx_SET (VOIDmode, retval, call);\n+      call = gen_rtx_SET (retval, call);\n     }\n   vec[vec_len++] = call;\n \n   if (pop)\n     {\n       pop = gen_rtx_PLUS (Pmode, stack_pointer_rtx, pop);\n-      pop = gen_rtx_SET (VOIDmode, stack_pointer_rtx, pop);\n+      pop = gen_rtx_SET (stack_pointer_rtx, pop);\n       vec[vec_len++] = pop;\n     }\n \n@@ -36166,8 +36157,7 @@ ix86_expand_sse_comi (const struct builtin_description *d, tree exp,\n   if (! pat)\n     return 0;\n   emit_insn (pat);\n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n+  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n \t\t\t  gen_rtx_fmt_ee (comparison, QImode,\n \t\t\t\t\t  SET_DEST (pat),\n \t\t\t\t\t  const0_rtx)));\n@@ -36281,8 +36271,7 @@ ix86_expand_sse_ptest (const struct builtin_description *d, tree exp,\n   if (! pat)\n     return 0;\n   emit_insn (pat);\n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n+  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n \t\t\t  gen_rtx_fmt_ee (comparison, QImode,\n \t\t\t\t\t  SET_DEST (pat),\n \t\t\t\t\t  const0_rtx)));\n@@ -36383,7 +36372,7 @@ ix86_expand_sse_pcmpestr (const struct builtin_description *d,\n       target = gen_rtx_SUBREG (QImode, target, 0);\n \n       emit_insn\n-\t(gen_rtx_SET (VOIDmode, gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n+\t(gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n \t\t      gen_rtx_fmt_ee (EQ, QImode,\n \t\t\t\t      gen_rtx_REG ((machine_mode) d->flag,\n \t\t\t\t\t\t   FLAGS_REG),\n@@ -36478,7 +36467,7 @@ ix86_expand_sse_pcmpistr (const struct builtin_description *d,\n       target = gen_rtx_SUBREG (QImode, target, 0);\n \n       emit_insn\n-\t(gen_rtx_SET (VOIDmode, gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n+\t(gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n \t\t      gen_rtx_fmt_ee (EQ, QImode,\n \t\t\t\t      gen_rtx_REG ((machine_mode) d->flag,\n \t\t\t\t\t\t   FLAGS_REG),\n@@ -37618,8 +37607,7 @@ ix86_expand_sse_comi_round (const struct builtin_description *d,\n     }\n \n   emit_insn (pat);\n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n+  emit_insn (gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode, target),\n \t\t\t  gen_rtx_fmt_ee (comparison, QImode,\n \t\t\t\t\t  set_dst,\n \t\t\t\t\t  const0_rtx)));\n@@ -38366,9 +38354,8 @@ ix86_emit_cmove (rtx dst, rtx src, enum rtx_code code, rtx op1, rtx op2)\n   if (TARGET_CMOVE)\n     {\n       t = ix86_expand_compare (code, op1, op2);\n-      emit_insn (gen_rtx_SET (VOIDmode, dst,\n-\t\t\t      gen_rtx_IF_THEN_ELSE (GET_MODE (dst), t,\n-\t\t\t\t\t\t    src, dst)));\n+      emit_insn (gen_rtx_SET (dst, gen_rtx_IF_THEN_ELSE (GET_MODE (dst), t,\n+\t\t\t\t\t\t\t src, dst)));\n     }\n   else\n     {\n@@ -39240,7 +39227,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \n       pat = gen_rtx_GEU (VOIDmode, gen_rtx_REG (CCCmode, FLAGS_REG),\n \t\t\t const0_rtx);\n-      emit_insn (gen_rtx_SET (VOIDmode, target,\n+      emit_insn (gen_rtx_SET (target,\n \t\t\t      gen_rtx_IF_THEN_ELSE (SImode, pat, op2, op1)));\n       return target;\n \n@@ -39275,7 +39262,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \n       pat = gen_rtx_LTU (QImode, gen_rtx_REG (CCCmode, FLAGS_REG),\n                          const0_rtx);\n-      emit_insn (gen_rtx_SET (VOIDmode, op2, pat));\n+      emit_insn (gen_rtx_SET (op2, pat));\n \n       if (target == 0\n \t  || !register_operand (target, SImode))\n@@ -39345,7 +39332,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n         target = gen_reg_rtx (QImode);\n \n       PUT_MODE (pat, QImode);\n-      emit_insn (gen_rtx_SET (VOIDmode, target, pat));\n+      emit_insn (gen_rtx_SET (target, pat));\n       return target;\n \n     case IX86_BUILTIN_READ_FLAGS:\n@@ -39394,7 +39381,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       op1 = simplify_gen_subreg (mode0, op1, GET_MODE (op1), 0);\n \n       target = gen_reg_rtx (QImode);\n-      emit_insn (gen_rtx_SET (mode0, target, const0_rtx));\n+      emit_insn (gen_rtx_SET (target, const0_rtx));\n \n       /* Emit kortest.  */\n       emit_insn (GEN_FCN (icode) (op0, op1));\n@@ -43611,7 +43598,7 @@ x86_emit_floatuns (rtx operands[2])\n \n   expand_float (f0, i0, 0);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, out, gen_rtx_PLUS (mode, f0, f0)));\n+  emit_insn (gen_rtx_SET (out, gen_rtx_PLUS (mode, f0, f0)));\n \n   emit_label (donelab);\n }\n@@ -43646,7 +43633,7 @@ ix86_vector_duplicate_value (machine_mode mode, rtx target, rtx val)\n \n   /* First attempt to recognize VAL as-is.  */\n   dup = gen_rtx_VEC_DUPLICATE (mode, val);\n-  insn = emit_insn (gen_rtx_SET (VOIDmode, target, dup));\n+  insn = emit_insn (gen_rtx_SET (target, dup));\n   if (recog_memoized (insn) < 0)\n     {\n       rtx_insn *seq;\n@@ -43706,7 +43693,7 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, machine_mode mode,\n \t  val = gen_lowpart (SImode, val);\n \t  x = gen_rtx_TRUNCATE (HImode, val);\n \t  x = gen_rtx_VEC_DUPLICATE (mode, x);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, target, x));\n+\t  emit_insn (gen_rtx_SET (target, x));\n \t  return true;\n \t}\n       goto widen;\n@@ -43793,7 +43780,7 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, machine_mode mode,\n \t  gcc_assert (ok);\n \n \t  x = gen_rtx_VEC_CONCAT (mode, x, x);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, target, x));\n+\t  emit_insn (gen_rtx_SET (target, x));\n \t}\n       return true;\n \n@@ -43810,7 +43797,7 @@ ix86_expand_vector_init_duplicate (bool mmx_ok, machine_mode mode,\n \t  gcc_assert (ok);\n \n \t  x = gen_rtx_VEC_CONCAT (mode, x, x);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, target, x));\n+\t  emit_insn (gen_rtx_SET (target, x));\n \t}\n       return true;\n \n@@ -43870,7 +43857,7 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, machine_mode mode,\n \n   if (use_vector_set)\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, target, CONST0_RTX (mode)));\n+      emit_insn (gen_rtx_SET (target, CONST0_RTX (mode)));\n       var = force_reg (GET_MODE_INNER (mode), var);\n       ix86_expand_vector_set (mmx_ok, target, var, one_var);\n       return true;\n@@ -43890,7 +43877,7 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, machine_mode mode,\n \treturn false;\n       var = force_reg (GET_MODE_INNER (mode), var);\n       x = gen_rtx_VEC_CONCAT (mode, var, CONST0_RTX (GET_MODE_INNER (mode)));\n-      emit_insn (gen_rtx_SET (VOIDmode, target, x));\n+      emit_insn (gen_rtx_SET (target, x));\n       return true;\n \n     case V4SFmode:\n@@ -43902,7 +43889,7 @@ ix86_expand_vector_init_one_nonzero (bool mmx_ok, machine_mode mode,\n       var = force_reg (GET_MODE_INNER (mode), var);\n       x = gen_rtx_VEC_DUPLICATE (mode, var);\n       x = gen_rtx_VEC_MERGE (mode, x, CONST0_RTX (mode), const1_rtx);\n-      emit_insn (gen_rtx_SET (VOIDmode, new_target, x));\n+      emit_insn (gen_rtx_SET (new_target, x));\n       if (one_var != 0)\n \t{\n \t  /* We need to shuffle the value to the correct position, so\n@@ -44130,9 +44117,8 @@ ix86_expand_vector_init_concat (machine_mode mode,\n \tops[1] = force_reg (cmode, ops[1]);\n       if (!register_operand (ops[0], cmode))\n \tops[0] = force_reg (cmode, ops[0]);\n-      emit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t      gen_rtx_VEC_CONCAT (mode, ops[0],\n-\t\t\t\t\t\t  ops[1])));\n+      emit_insn (gen_rtx_SET (target, gen_rtx_VEC_CONCAT (mode, ops[0],\n+\t\t\t\t\t\t\t  ops[1])));\n       break;\n \n     case 4:\n@@ -44303,7 +44289,7 @@ ix86_expand_vector_init_interleave (machine_mode mode,\n \t\t\t\t\t\t      op0),\n \t\t\t       CONST0_RTX (V4SImode),\n \t\t\t       const1_rtx);\n-      emit_insn (gen_rtx_SET (VOIDmode, op1, op0));\n+      emit_insn (gen_rtx_SET (op1, op0));\n \n       /* Cast the V4SImode vector back to a vector in orignal mode.  */\n       op0 = gen_reg_rtx (mode);\n@@ -44357,8 +44343,7 @@ ix86_expand_vector_init_interleave (machine_mode mode,\n \n       /* Cast the SECOND_IMODE vector back to a vector on original\n \t mode.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t      gen_lowpart (mode, op0)));\n+      emit_insn (gen_rtx_SET (target, gen_lowpart (mode, op0)));\n       break;\n \n     default:\n@@ -44422,8 +44407,7 @@ ix86_expand_vector_init_general (bool mmx_ok, machine_mode mode,\n \t\t\t\t\t  n >> 2);\n       ix86_expand_vector_init_interleave (half_mode, op1,\n \t\t\t\t\t  &ops [n >> 1], n >> 2);\n-      emit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t      gen_rtx_VEC_CONCAT (mode, op0, op1)));\n+      emit_insn (gen_rtx_SET (target, gen_rtx_VEC_CONCAT (mode, op0, op1)));\n       return;\n \n     case V64QImode:\n@@ -44454,12 +44438,9 @@ ix86_expand_vector_init_general (bool mmx_ok, machine_mode mode,\n \t\t\t\t\t  &ops [n >> 1], n >> 3);\n       ix86_expand_vector_init_interleave (quarter_mode, op3,\n \t\t\t\t\t  &ops [(n >> 1) | (n >> 2)], n >> 3);\n-      emit_insn (gen_rtx_SET (VOIDmode, op4,\n-\t\t\t      gen_rtx_VEC_CONCAT (half_mode, op0, op1)));\n-      emit_insn (gen_rtx_SET (VOIDmode, op5,\n-\t\t\t      gen_rtx_VEC_CONCAT (half_mode, op2, op3)));\n-      emit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t      gen_rtx_VEC_CONCAT (mode, op4, op5)));\n+      emit_insn (gen_rtx_SET (op4, gen_rtx_VEC_CONCAT (half_mode, op0, op1)));\n+      emit_insn (gen_rtx_SET (op5, gen_rtx_VEC_CONCAT (half_mode, op2, op3)));\n+      emit_insn (gen_rtx_SET (target, gen_rtx_VEC_CONCAT (mode, op4, op5)));\n       return;\n \n     case V16QImode:\n@@ -44644,7 +44625,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t    tmp = gen_rtx_VEC_CONCAT (mode, val, tmp);\n \t  else\n \t    tmp = gen_rtx_VEC_CONCAT (mode, tmp, val);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, target, tmp));\n+\t  emit_insn (gen_rtx_SET (target, tmp));\n \t  return;\n \t}\n       break;\n@@ -44660,7 +44641,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \ttmp = gen_rtx_VEC_CONCAT (mode, val, tmp);\n       else\n \ttmp = gen_rtx_VEC_CONCAT (mode, tmp, val);\n-      emit_insn (gen_rtx_SET (VOIDmode, target, tmp));\n+      emit_insn (gen_rtx_SET (target, tmp));\n       return;\n \n     case V2DFmode:\n@@ -44679,7 +44660,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n \t  op0 = tmp, op1 = val;\n \n \ttmp = gen_rtx_VEC_CONCAT (mode, op0, op1);\n-\temit_insn (gen_rtx_SET (VOIDmode, target, tmp));\n+\temit_insn (gen_rtx_SET (target, tmp));\n       }\n       return;\n \n@@ -44848,8 +44829,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n       if (TARGET_AVX512F)\n \t{\n \t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n-\t\t\t\t  gen_rtx_VEC_DUPLICATE (mode, val)));\n+\t  emit_insn (gen_rtx_SET (tmp, gen_rtx_VEC_DUPLICATE (mode, val)));\n \t  emit_insn (gen_avx512f_blendmv8df (target, tmp, target,\n \t\t\t\t\t     force_reg (QImode, GEN_INT (1 << elt))));\n \t  return;\n@@ -44860,8 +44840,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n       if (TARGET_AVX512F)\n \t{\n \t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n-\t\t\t\t  gen_rtx_VEC_DUPLICATE (mode, val)));\n+\t  emit_insn (gen_rtx_SET (tmp, gen_rtx_VEC_DUPLICATE (mode, val)));\n \t  emit_insn (gen_avx512f_blendmv8di (target, tmp, target,\n \t\t\t\t\t     force_reg (QImode, GEN_INT (1 << elt))));\n \t  return;\n@@ -44872,8 +44851,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n       if (TARGET_AVX512F)\n \t{\n \t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n-\t\t\t\t  gen_rtx_VEC_DUPLICATE (mode, val)));\n+\t  emit_insn (gen_rtx_SET (tmp, gen_rtx_VEC_DUPLICATE (mode, val)));\n \t  emit_insn (gen_avx512f_blendmv16sf (target, tmp, target,\n \t\t\t\t\t      force_reg (HImode, GEN_INT (1 << elt))));\n \t  return;\n@@ -44884,8 +44862,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n       if (TARGET_AVX512F)\n \t{\n \t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n-\t\t\t\t  gen_rtx_VEC_DUPLICATE (mode, val)));\n+\t  emit_insn (gen_rtx_SET (tmp, gen_rtx_VEC_DUPLICATE (mode, val)));\n \t  emit_insn (gen_avx512f_blendmv16si (target, tmp, target,\n \t\t\t\t\t      force_reg (HImode, GEN_INT (1 << elt))));\n \t  return;\n@@ -44896,8 +44873,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n       if (TARGET_AVX512F && TARGET_AVX512BW)\n \t{\n \t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n-\t\t\t\t  gen_rtx_VEC_DUPLICATE (mode, val)));\n+\t  emit_insn (gen_rtx_SET (tmp, gen_rtx_VEC_DUPLICATE (mode, val)));\n \t  emit_insn (gen_avx512bw_blendmv32hi (target, tmp, target,\n \t\t\t\t\t       force_reg (SImode, GEN_INT (1 << elt))));\n \t  return;\n@@ -44908,8 +44884,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n       if (TARGET_AVX512F && TARGET_AVX512BW)\n \t{\n \t  tmp = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n-\t\t\t\t  gen_rtx_VEC_DUPLICATE (mode, val)));\n+\t  emit_insn (gen_rtx_SET (tmp, gen_rtx_VEC_DUPLICATE (mode, val)));\n \t  emit_insn (gen_avx512bw_blendmv64qi (target, tmp, target,\n \t\t\t\t\t       force_reg (DImode, GEN_INT (1 << elt))));\n \t  return;\n@@ -44925,7 +44900,7 @@ ix86_expand_vector_set (bool mmx_ok, rtx target, rtx val, int elt)\n     {\n       tmp = gen_rtx_VEC_DUPLICATE (mode, val);\n       tmp = gen_rtx_VEC_MERGE (mode, tmp, target, GEN_INT (1 << elt));\n-      emit_insn (gen_rtx_SET (VOIDmode, target, tmp));\n+      emit_insn (gen_rtx_SET (target, tmp));\n     }\n   else\n     {\n@@ -45204,7 +45179,7 @@ ix86_expand_vector_extract (bool mmx_ok, rtx target, rtx vec, int elt)\n \t  target = gen_lowpart (SImode, target);\n \t}\n \n-      emit_insn (gen_rtx_SET (VOIDmode, target, tmp));\n+      emit_insn (gen_rtx_SET (target, tmp));\n     }\n   else\n     {\n@@ -45531,7 +45506,7 @@ ix86_emit_fp_unordered_jump (rtx label)\n   temp = gen_rtx_IF_THEN_ELSE (VOIDmode, temp,\n \t\t\t      gen_rtx_LABEL_REF (VOIDmode, label),\n \t\t\t      pc_rtx);\n-  temp = gen_rtx_SET (VOIDmode, pc_rtx, temp);\n+  temp = gen_rtx_SET (pc_rtx, temp);\n \n   emit_jump_insn (temp);\n   predict_jump (REG_BR_PROB_BASE * 10 / 100);\n@@ -45629,24 +45604,22 @@ void ix86_emit_i387_round (rtx op0, rtx op1)\n   /* round(a) = sgn(a) * floor(fabs(a) + 0.5) */\n \n   /* scratch = fxam(op1) */\n-  emit_insn (gen_rtx_SET (VOIDmode, scratch,\n+  emit_insn (gen_rtx_SET (scratch,\n \t\t\t  gen_rtx_UNSPEC (HImode, gen_rtvec (1, op1),\n \t\t\t\t\t  UNSPEC_FXAM)));\n   /* e1 = fabs(op1) */\n   emit_insn (gen_abs (e1, op1));\n \n   /* e2 = e1 + 0.5 */\n   half = force_reg (inmode, half);\n-  emit_insn (gen_rtx_SET (VOIDmode, e2,\n-\t\t\t  gen_rtx_PLUS (inmode, e1, half)));\n+  emit_insn (gen_rtx_SET (e2, gen_rtx_PLUS (inmode, e1, half)));\n \n   /* res = floor(e2) */\n   if (inmode != XFmode)\n     {\n       tmp1 = gen_reg_rtx (XFmode);\n \n-      emit_insn (gen_rtx_SET (VOIDmode, tmp1,\n-\t\t\t      gen_rtx_FLOAT_EXTEND (XFmode, e2)));\n+      emit_insn (gen_rtx_SET (tmp1, gen_rtx_FLOAT_EXTEND (XFmode, e2)));\n     }\n   else\n     tmp1 = e2;\n@@ -45660,7 +45633,7 @@ void ix86_emit_i387_round (rtx op0, rtx op1)\n \n \temit_insn (gen_frndintxf2_floor (tmp0, tmp1));\n \n-\temit_insn (gen_rtx_SET (VOIDmode, res,\n+\temit_insn (gen_rtx_SET (res,\n \t\t\t\tgen_rtx_UNSPEC (outmode, gen_rtvec (1, tmp0),\n \t\t\t\t\t\tUNSPEC_TRUNC_NOOP)));\n       }\n@@ -45689,7 +45662,7 @@ void ix86_emit_i387_round (rtx op0, rtx op1)\n \t\t\t      gen_rtx_EQ (VOIDmode, flags, const0_rtx),\n \t\t\t      gen_rtx_LABEL_REF (VOIDmode, jump_label),\n \t\t\t      pc_rtx);\n-  insn = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+  insn = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n   predict_jump (REG_BR_PROB_BASE * 50 / 100);\n   JUMP_LABEL (insn) = jump_label;\n \n@@ -45719,33 +45692,26 @@ void ix86_emit_swdivsf (rtx res, rtx a, rtx b, machine_mode mode)\n \n   /* x0 = rcp(b) estimate */\n   if (mode == V16SFmode || mode == V8DFmode)\n-    emit_insn (gen_rtx_SET (VOIDmode, x0,\n-\t\t\t    gen_rtx_UNSPEC (mode, gen_rtvec (1, b),\n-\t\t\t\t\t    UNSPEC_RCP14)));\n+    emit_insn (gen_rtx_SET (x0, gen_rtx_UNSPEC (mode, gen_rtvec (1, b),\n+\t\t\t\t\t\tUNSPEC_RCP14)));\n   else\n-    emit_insn (gen_rtx_SET (VOIDmode, x0,\n-\t\t\t    gen_rtx_UNSPEC (mode, gen_rtvec (1, b),\n-\t\t\t\t\t    UNSPEC_RCP)));\n+    emit_insn (gen_rtx_SET (x0, gen_rtx_UNSPEC (mode, gen_rtvec (1, b),\n+\t\t\t\t\t\tUNSPEC_RCP)));\n \n   /* e0 = x0 * b */\n-  emit_insn (gen_rtx_SET (VOIDmode, e0,\n-\t\t\t  gen_rtx_MULT (mode, x0, b)));\n+  emit_insn (gen_rtx_SET (e0, gen_rtx_MULT (mode, x0, b)));\n \n   /* e0 = x0 * e0 */\n-  emit_insn (gen_rtx_SET (VOIDmode, e0,\n-\t\t\t  gen_rtx_MULT (mode, x0, e0)));\n+  emit_insn (gen_rtx_SET (e0, gen_rtx_MULT (mode, x0, e0)));\n \n   /* e1 = x0 + x0 */\n-  emit_insn (gen_rtx_SET (VOIDmode, e1,\n-\t\t\t  gen_rtx_PLUS (mode, x0, x0)));\n+  emit_insn (gen_rtx_SET (e1, gen_rtx_PLUS (mode, x0, x0)));\n \n   /* x1 = e1 - e0 */\n-  emit_insn (gen_rtx_SET (VOIDmode, x1,\n-\t\t\t  gen_rtx_MINUS (mode, e1, e0)));\n+  emit_insn (gen_rtx_SET (x1, gen_rtx_MINUS (mode, e1, e0)));\n \n   /* res = a * x1 */\n-  emit_insn (gen_rtx_SET (VOIDmode, res,\n-\t\t\t  gen_rtx_MULT (mode, a, x1)));\n+  emit_insn (gen_rtx_SET (res, gen_rtx_MULT (mode, a, x1)));\n }\n \n /* Output code to perform a Newton-Rhapson approximation of a\n@@ -45786,9 +45752,8 @@ void ix86_emit_swsqrtsf (rtx res, rtx a, machine_mode mode,\n   a = force_reg (mode, a);\n \n   /* x0 = rsqrt(a) estimate */\n-  emit_insn (gen_rtx_SET (VOIDmode, x0,\n-\t\t\t  gen_rtx_UNSPEC (mode, gen_rtvec (1, a),\n-\t\t\t\t\t  unspec)));\n+  emit_insn (gen_rtx_SET (x0, gen_rtx_UNSPEC (mode, gen_rtvec (1, a),\n+\t\t\t\t\t      unspec)));\n \n   /* If (a == 0.0) Filter out infinity to prevent NaN for sqrt(0.0).  */\n   if (!recip)\n@@ -45810,38 +45775,30 @@ void ix86_emit_swsqrtsf (rtx res, rtx a, machine_mode mode,\n \t}\n       else\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, mask,\n-\t\t\t\t  gen_rtx_NE (mode, zero, a)));\n+\t  emit_insn (gen_rtx_SET (mask, gen_rtx_NE (mode, zero, a)));\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode, x0,\n-\t\t\t\t  gen_rtx_AND (mode, x0, mask)));\n+\t  emit_insn (gen_rtx_SET (x0, gen_rtx_AND (mode, x0, mask)));\n \t}\n     }\n \n   /* e0 = x0 * a */\n-  emit_insn (gen_rtx_SET (VOIDmode, e0,\n-\t\t\t  gen_rtx_MULT (mode, x0, a)));\n+  emit_insn (gen_rtx_SET (e0, gen_rtx_MULT (mode, x0, a)));\n   /* e1 = e0 * x0 */\n-  emit_insn (gen_rtx_SET (VOIDmode, e1,\n-\t\t\t  gen_rtx_MULT (mode, e0, x0)));\n+  emit_insn (gen_rtx_SET (e1, gen_rtx_MULT (mode, e0, x0)));\n \n   /* e2 = e1 - 3. */\n   mthree = force_reg (mode, mthree);\n-  emit_insn (gen_rtx_SET (VOIDmode, e2,\n-\t\t\t  gen_rtx_PLUS (mode, e1, mthree)));\n+  emit_insn (gen_rtx_SET (e2, gen_rtx_PLUS (mode, e1, mthree)));\n \n   mhalf = force_reg (mode, mhalf);\n   if (recip)\n     /* e3 = -.5 * x0 */\n-    emit_insn (gen_rtx_SET (VOIDmode, e3,\n-\t\t\t    gen_rtx_MULT (mode, x0, mhalf)));\n+    emit_insn (gen_rtx_SET (e3, gen_rtx_MULT (mode, x0, mhalf)));\n   else\n     /* e3 = -.5 * e0 */\n-    emit_insn (gen_rtx_SET (VOIDmode, e3,\n-\t\t\t    gen_rtx_MULT (mode, e0, mhalf)));\n+    emit_insn (gen_rtx_SET (e3, gen_rtx_MULT (mode, e0, mhalf)));\n   /* ret = e2 * e3 */\n-  emit_insn (gen_rtx_SET (VOIDmode, res,\n-\t\t\t  gen_rtx_MULT (mode, e2, e3)));\n+  emit_insn (gen_rtx_SET (res, gen_rtx_MULT (mode, e2, e3)));\n }\n \n #ifdef TARGET_SOLARIS\n@@ -45963,15 +45920,13 @@ ix86_sse_copysign_to_positive (rtx result, rtx abs_value, rtx sign, rtx mask)\n \t  rtx tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (1, const0_rtx));\n \t  tmp = gen_rtx_VEC_SELECT (mode, mask, tmp);\n \t  mask = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, mask, tmp));\n+\t  emit_insn (gen_rtx_SET (mask, tmp));\n \t}\n     }\n   else\n     mask = gen_rtx_NOT (mode, mask);\n-  emit_insn (gen_rtx_SET (VOIDmode, sgn,\n-\t\t\t  gen_rtx_AND (mode, mask, sign)));\n-  emit_insn (gen_rtx_SET (VOIDmode, result,\n-\t\t\t  gen_rtx_IOR (mode, abs_value, sgn)));\n+  emit_insn (gen_rtx_SET (sgn, gen_rtx_AND (mode, mask, sign)));\n+  emit_insn (gen_rtx_SET (result, gen_rtx_IOR (mode, abs_value, sgn)));\n }\n \n /* Expand fabs (OP0) and return a new rtx that holds the result.  The\n@@ -45997,10 +45952,9 @@ ix86_expand_sse_fabs (rtx op0, rtx *smask)\n       rtx tmp = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (1, const0_rtx));\n       tmp = gen_rtx_VEC_SELECT (mode, mask, tmp);\n       mask = gen_reg_rtx (mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, mask, tmp));\n+      emit_insn (gen_rtx_SET (mask, tmp));\n     }\n-  emit_insn (gen_rtx_SET (VOIDmode, xa,\n-\t\t\t  gen_rtx_AND (mode, op0, mask)));\n+  emit_insn (gen_rtx_SET (xa, gen_rtx_AND (mode, op0, mask)));\n \n   if (smask)\n     *smask = mask;\n@@ -46025,12 +45979,11 @@ ix86_expand_sse_compare_and_jump (enum rtx_code code, rtx op0, rtx op1,\n \n   label = gen_label_rtx ();\n   tmp = gen_rtx_REG (fpcmp_mode, FLAGS_REG);\n-  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n-\t\t\t  gen_rtx_COMPARE (fpcmp_mode, op0, op1)));\n+  emit_insn (gen_rtx_SET (tmp, gen_rtx_COMPARE (fpcmp_mode, op0, op1)));\n   tmp = gen_rtx_fmt_ee (code, VOIDmode, tmp, const0_rtx);\n   tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n \t\t\t      gen_rtx_LABEL_REF (VOIDmode, label), pc_rtx);\n-  tmp = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+  tmp = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n   JUMP_LABEL (tmp) = label;\n \n   return label;\n@@ -46225,8 +46178,7 @@ ix86_expand_floorceildf_32 (rtx operand0, rtx operand1, bool do_floor)\n \n   /* Compensate: xa = xa - (xa > operand1 ? 1 : 0) */\n   tmp = ix86_expand_sse_compare_mask (UNGT, xa, res, !do_floor);\n-  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n-                          gen_rtx_AND (mode, one, tmp)));\n+  emit_insn (gen_rtx_SET (tmp, gen_rtx_AND (mode, one, tmp)));\n   /* We always need to subtract here to preserve signed zero.  */\n   tmp = expand_simple_binop (mode, MINUS,\n \t\t\t     xa, tmp, NULL_RTX, 0, OPTAB_DIRECT);\n@@ -46285,8 +46237,7 @@ ix86_expand_floorceil (rtx operand0, rtx operand1, bool do_floor)\n \n   /* Compensate: xa = xa - (xa > operand1 ? 1 : 0) */\n   tmp = ix86_expand_sse_compare_mask (UNGT, xa, res, !do_floor);\n-  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n-                          gen_rtx_AND (mode, one, tmp)));\n+  emit_insn (gen_rtx_SET (tmp, gen_rtx_AND (mode, one, tmp)));\n   tmp = expand_simple_binop (mode, do_floor ? MINUS : PLUS,\n \t\t\t     xa, tmp, NULL_RTX, 0, OPTAB_DIRECT);\n   emit_move_insn (res, tmp);\n@@ -46356,13 +46307,11 @@ ix86_expand_rounddf_32 (rtx operand0, rtx operand1)\n   tmp = gen_reg_rtx (mode);\n   /* xa2 = xa2 - (dxa > 0.5 ? 1 : 0) */\n   tmp = ix86_expand_sse_compare_mask (UNGT, dxa, half, false);\n-  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n-                          gen_rtx_AND (mode, one, tmp)));\n+  emit_insn (gen_rtx_SET (tmp, gen_rtx_AND (mode, one, tmp)));\n   xa2 = expand_simple_binop (mode, MINUS, xa2, tmp, NULL_RTX, 0, OPTAB_DIRECT);\n   /* xa2 = xa2 + (dxa <= -0.5 ? 1 : 0) */\n   tmp = ix86_expand_sse_compare_mask (UNGE, mhalf, dxa, false);\n-  emit_insn (gen_rtx_SET (VOIDmode, tmp,\n-                          gen_rtx_AND (mode, one, tmp)));\n+  emit_insn (gen_rtx_SET (tmp, gen_rtx_AND (mode, one, tmp)));\n   xa2 = expand_simple_binop (mode, PLUS, xa2, tmp, NULL_RTX, 0, OPTAB_DIRECT);\n \n   /* res = copysign (xa2, operand1) */\n@@ -46463,8 +46412,7 @@ ix86_expand_truncdf_32 (rtx operand0, rtx operand1)\n \n   /* Compensate: res = xa2 - (res > xa ? 1 : 0)  */\n   mask = ix86_expand_sse_compare_mask (UNGT, res, xa, false);\n-  emit_insn (gen_rtx_SET (VOIDmode, mask,\n-                          gen_rtx_AND (mode, mask, one)));\n+  emit_insn (gen_rtx_SET (mask, gen_rtx_AND (mode, mask, one)));\n   tmp = expand_simple_binop (mode, MINUS,\n \t\t\t     res, mask, NULL_RTX, 0, OPTAB_DIRECT);\n   emit_move_insn (res, tmp);\n@@ -46712,7 +46660,7 @@ init_vselect_insn (void)\n     XVECEXP (x, 0, i) = const0_rtx;\n   x = gen_rtx_VEC_SELECT (V2DFmode, gen_rtx_VEC_CONCAT (V4DFmode, const0_rtx,\n \t\t\t\t\t\t\tconst0_rtx), x);\n-  x = gen_rtx_SET (VOIDmode, const0_rtx, x);\n+  x = gen_rtx_SET (const0_rtx, x);\n   start_sequence ();\n   vselect_insn = emit_insn (x);\n   end_sequence ();\n@@ -46967,7 +46915,7 @@ expand_vec_perm_blend (struct expand_vec_perm_d *d)\n \n   /* This matches five different patterns with the different modes.  */\n   x = gen_rtx_VEC_MERGE (vmode, op1, op0, GEN_INT (mask));\n-  x = gen_rtx_SET (VOIDmode, target, x);\n+  x = gen_rtx_SET (target, x);\n   emit_insn (x);\n   if (target != d->target)\n     emit_move_insn (d->target, gen_lowpart (d->vmode, target));\n@@ -49861,7 +49809,7 @@ ix86_expand_mul_widen_hilo (rtx dest, rtx op1, rtx op2,\n       ix86_expand_sse_unpack (t1, op1, uns_p, high_p);\n       ix86_expand_sse_unpack (t2, op2, uns_p, high_p);\n \n-      emit_insn (gen_rtx_SET (VOIDmode, dest, gen_rtx_MULT (wmode, t1, t2)));\n+      emit_insn (gen_rtx_SET (dest, gen_rtx_MULT (wmode, t1, t2)));\n       break;\n \n     default:"}, {"sha": "938f3985493bc87b1a0b79b9d75f947e40a238ba", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1862,7 +1862,7 @@\n   emit_move_insn (operands[2], addr);\n   mem = replace_equiv_address_nv (mem, operands[2]);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, mem, operands[1]));\n+  emit_insn (gen_rtx_SET (mem, operands[1]));\n   DONE;\n })\n \n@@ -1878,7 +1878,7 @@\n   emit_move_insn (operands[2], addr);\n   mem = replace_equiv_address_nv (mem, operands[2]);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], mem));\n+  emit_insn (gen_rtx_SET (operands[0], mem));\n   DONE;\n })\n \n@@ -4937,7 +4937,7 @@\n   t = gen_rtx_FLOAT (mode, operands[1]);\n   t = gen_rtx_VEC_DUPLICATE (vmode, t);\n   t = gen_rtx_VEC_MERGE (vmode, t, op0, const1_rtx);\n-  emit_insn (gen_rtx_SET (VOIDmode, op0, t));\n+  emit_insn (gen_rtx_SET (op0, t));\n   DONE;\n })\n \n@@ -5518,7 +5518,7 @@\n \n   pat = gen_rtx_PLUS (mode, operands[1], operands[2]);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n+  emit_insn (gen_rtx_SET (operands[0], pat));\n   DONE;\n })\n \n@@ -6007,7 +6007,7 @@\n   pat = gen_rtx_PLUS (mode, gen_rtx_PLUS (mode, operands[1], operands[2]),\n   \t\t      operands[3]);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n+  emit_insn (gen_rtx_SET (operands[0], pat));\n   DONE;\n }\n   [(set_attr \"type\" \"lea\")\n@@ -6037,7 +6037,7 @@\n   pat = gen_rtx_PLUS (mode, gen_rtx_MULT (mode, operands[1], operands[2]),\n \t\t      operands[3]);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n+  emit_insn (gen_rtx_SET (operands[0], pat));\n   DONE;\n }\n   [(set_attr \"type\" \"lea\")\n@@ -6072,7 +6072,7 @@\n \t\t\t\t    operands[3]),\n   \t\t      operands[4]);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n+  emit_insn (gen_rtx_SET (operands[0], pat));\n   DONE;\n }\n   [(set_attr \"type\" \"lea\")\n@@ -6111,7 +6111,7 @@\n   pat = plus_constant (mode, gen_rtx_MULT (mode, operands[1], operands[2]),\n \t\t       INTVAL (operands[3]));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n+  emit_insn (gen_rtx_SET (operands[0], pat));\n   DONE;\n }\n   [(set_attr \"type\" \"lea\")\n@@ -9325,7 +9325,7 @@\n   tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n \t\t\t      gen_rtx_LABEL_REF (VOIDmode, label),\n \t\t\t      pc_rtx);\n-  tmp = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+  tmp = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n   JUMP_LABEL (tmp) = label;\n \n   emit_move_insn (operands[0], operands[1]);\n@@ -9665,7 +9665,7 @@\n \n   pat = gen_rtx_MULT (mode, operands[1], operands[2]);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], pat));\n+  emit_insn (gen_rtx_SET (operands[0], pat));\n   DONE;\n })\n \n@@ -9988,7 +9988,7 @@\n   tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n \t\t\t      gen_rtx_LABEL_REF (VOIDmode, label),\n \t\t\t      pc_rtx);\n-  tmp = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+  tmp = emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n   JUMP_LABEL (tmp) = label;\n \n   emit_move_insn (operands[0], operands[1]);\n@@ -13058,7 +13058,7 @@\n   cond = gen_rtx_fmt_ee (ORDERED, QImode,\n \t\t\t gen_rtx_REG (CCmode, FLAGS_REG),\n \t\t\t const0_rtx);\n-  emit_insn (gen_rtx_SET (VOIDmode, scratch, cond));\n+  emit_insn (gen_rtx_SET (scratch, cond));\n \n   if (TARGET_64BIT)\n     emit_insn (gen_zero_extendqidi2 (operands[0], scratch));\n@@ -13085,7 +13085,7 @@\n   cond = gen_rtx_fmt_ee (ORDERED, QImode,\n \t\t\t gen_rtx_REG (CCmode, FLAGS_REG),\n \t\t\t const0_rtx);\n-  emit_insn (gen_rtx_SET (VOIDmode, scratch, cond));\n+  emit_insn (gen_rtx_SET (scratch, cond));\n \n   emit_insn (gen_zero_extendqisi2 (operands[0], scratch));\n   DONE;\n@@ -15844,7 +15844,7 @@\n   cond = gen_rtx_fmt_ee (EQ, QImode,\n \t\t\t gen_rtx_REG (CCmode, FLAGS_REG),\n \t\t\t const0_rtx);\n-  emit_insn (gen_rtx_SET (VOIDmode, res, cond));\n+  emit_insn (gen_rtx_SET (res, cond));\n   emit_insn (gen_zero_extendqisi2 (operands[0], res));\n   DONE;\n })\n@@ -15880,7 +15880,7 @@\n   cond = gen_rtx_fmt_ee (EQ, QImode,\n \t\t\t gen_rtx_REG (CCmode, FLAGS_REG),\n \t\t\t const0_rtx);\n-  emit_insn (gen_rtx_SET (VOIDmode, res, cond));\n+  emit_insn (gen_rtx_SET (res, cond));\n   emit_insn (gen_zero_extendqisi2 (operands[0], res));\n   DONE;\n })"}, {"sha": "21c6c6cd5be6c6f8fd5daee4af919146bf660e4f", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1146,7 +1146,7 @@\n \tsrc = gen_rtx_VEC_MERGE (<MODE>mode, operands[1],\n \t\t\t\t operands[2 * <mask_applied>],\n \t\t\t\t operands[3 * <mask_applied>]);\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], src));\n+      emit_insn (gen_rtx_SET (operands[0], src));\n       DONE;\n     }\n })\n@@ -1291,7 +1291,7 @@\n \tsrc = gen_rtx_VEC_MERGE (<MODE>mode, operands[1],\n \t\t\t\t operands[2 * <mask_applied>],\n \t\t\t\t operands[3 * <mask_applied>]);\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], src));\n+      emit_insn (gen_rtx_SET (operands[0], src));\n       DONE;\n     }\n })\n@@ -1310,7 +1310,7 @@\n \tsrc = gen_rtx_VEC_MERGE (<MODE>mode, operands[1],\n \t\t\t\t operands[2 * <mask_applied>],\n \t\t\t\t operands[3 * <mask_applied>]);\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], src));\n+      emit_insn (gen_rtx_SET (operands[0], src));\n       DONE;\n     }\n })\n@@ -1329,7 +1329,7 @@\n \tsrc = gen_rtx_VEC_MERGE (<MODE>mode, operands[1],\n \t\t\t\t operands[2 * <mask_applied>],\n \t\t\t\t operands[3 * <mask_applied>]);\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], src));\n+      emit_insn (gen_rtx_SET (operands[0], src));\n       DONE;\n     }\n })\n@@ -1621,7 +1621,7 @@\n \n   absneg_op = GET_CODE (operands[3]) == NEG ? XOR : AND;\n   t = gen_rtx_fmt_ee (absneg_op, <MODE>mode, op1, op2);\n-  t = gen_rtx_SET (VOIDmode, operands[0], t);\n+  t = gen_rtx_SET (operands[0], t);\n   emit_insn (t);\n   DONE;\n }\n@@ -5159,7 +5159,7 @@\n   rtx tmp = gen_reg_rtx (<sseunpackmode>mode);\n \n   emit_insn (gen_vec_unpacks_hi_<mode> (tmp, operands[1]));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+  emit_insn (gen_rtx_SET (operands[0],\n \t\t\t  gen_rtx_FLOAT (<sseunpackfltmode>mode, tmp)));\n   DONE;\n })\n@@ -5172,7 +5172,7 @@\n   rtx tmp = gen_reg_rtx (<sseunpackmode>mode);\n \n   emit_insn (gen_vec_unpacks_lo_<mode> (tmp, operands[1]));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+  emit_insn (gen_rtx_SET (operands[0],\n \t\t\t  gen_rtx_FLOAT (<sseunpackfltmode>mode, tmp)));\n   DONE;\n })\n@@ -5185,7 +5185,7 @@\n   rtx tmp = gen_reg_rtx (<sseunpackmode>mode);\n \n   emit_insn (gen_vec_unpacku_hi_<mode> (tmp, operands[1]));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+  emit_insn (gen_rtx_SET (operands[0],\n \t\t\t  gen_rtx_FLOAT (<sseunpackfltmode>mode, tmp)));\n   DONE;\n })\n@@ -5198,7 +5198,7 @@\n   rtx tmp = gen_reg_rtx (<sseunpackmode>mode);\n \n   emit_insn (gen_vec_unpacku_lo_<mode> (tmp, operands[1]));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+  emit_insn (gen_rtx_SET (operands[0],\n \t\t\t  gen_rtx_FLOAT (<sseunpackfltmode>mode, tmp)));\n   DONE;\n })\n@@ -5356,8 +5356,7 @@\n     tmp[i] = gen_reg_rtx (V4DFmode);\n   emit_insn (gen_vec_extract_hi_v8si (tmp[5], operands[1]));\n   emit_insn (gen_floatv4siv4df2 (tmp[2], tmp[5]));\n-  emit_insn (gen_rtx_SET (VOIDmode, tmp[3],\n-\t\t\t  gen_rtx_LT (V4DFmode, tmp[2], tmp[0])));\n+  emit_insn (gen_rtx_SET (tmp[3], gen_rtx_LT (V4DFmode, tmp[2], tmp[0])));\n   emit_insn (gen_andv4df3 (tmp[4], tmp[3], tmp[1]));\n   emit_insn (gen_addv4df3 (operands[0], tmp[2], tmp[4]));\n   DONE;\n@@ -5382,8 +5381,7 @@\n \n   emit_insn (gen_vec_extract_hi_v16si (tmp[3], operands[1]));\n   emit_insn (gen_floatv8siv8df2 (tmp[2], tmp[3]));\n-  emit_insn (gen_rtx_SET (VOIDmode, k,\n-\t\t\t  gen_rtx_LT (QImode, tmp[2], tmp[0])));\n+  emit_insn (gen_rtx_SET (k, gen_rtx_LT (QImode, tmp[2], tmp[0])));\n   emit_insn (gen_addv8df3_mask (tmp[2], tmp[2], tmp[1], tmp[2], k));\n   emit_move_insn (operands[0], tmp[2]);\n   DONE;\n@@ -5407,8 +5405,7 @@\n   for (i = 2; i < 5; i++)\n     tmp[i] = gen_reg_rtx (V4DFmode);\n   emit_insn (gen_avx_cvtdq2pd256_2 (tmp[2], operands[1]));\n-  emit_insn (gen_rtx_SET (VOIDmode, tmp[3],\n-\t\t\t  gen_rtx_LT (V4DFmode, tmp[2], tmp[0])));\n+  emit_insn (gen_rtx_SET (tmp[3], gen_rtx_LT (V4DFmode, tmp[2], tmp[0])));\n   emit_insn (gen_andv4df3 (tmp[4], tmp[3], tmp[1]));\n   emit_insn (gen_addv4df3 (operands[0], tmp[2], tmp[4]));\n   DONE;\n@@ -5431,8 +5428,7 @@\n   k = gen_reg_rtx (QImode);\n \n   emit_insn (gen_avx512f_cvtdq2pd512_2 (tmp[2], operands[1]));\n-  emit_insn (gen_rtx_SET (VOIDmode, k,\n-\t\t\t  gen_rtx_LT (QImode, tmp[2], tmp[0])));\n+  emit_insn (gen_rtx_SET (k, gen_rtx_LT (QImode, tmp[2], tmp[0])));\n   emit_insn (gen_addv8df3_mask (tmp[2], tmp[2], tmp[1], tmp[2], k));\n   emit_move_insn (operands[0], tmp[2]);\n   DONE;\n@@ -9876,7 +9872,7 @@\n {\n   rtx t = gen_reg_rtx (<sseunpackmode>mode);\n   emit_insn (gen_<sse2_avx2>_pmaddwd<SDOT_PMADD_SUF> (t, operands[1], operands[2]));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+  emit_insn (gen_rtx_SET (operands[0],\n \t\t\t  gen_rtx_PLUS (<sseunpackmode>mode,\n \t\t\t\t\toperands[3], t)));\n   DONE;\n@@ -16488,8 +16484,7 @@\n \n   for (regno = 0; regno < nregs; regno++)\n     XVECEXP (operands[0], 0, regno + 1)\n-      = gen_rtx_SET (VOIDmode,\n-\t\t     gen_rtx_REG (V8SImode, SSE_REGNO (regno)),\n+      = gen_rtx_SET (gen_rtx_REG (V8SImode, SSE_REGNO (regno)),\n \t\t     CONST0_RTX (V8SImode));\n })\n \n@@ -17422,7 +17417,7 @@\n \t\t\t       operands[1], operands[2]);\n       t1 = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (nelt, perm));\n       t2 = gen_rtx_VEC_SELECT (<MODE>mode, t2, t1);\n-      t2 = gen_rtx_SET (VOIDmode, operands[0], t2);\n+      t2 = gen_rtx_SET (operands[0], t2);\n       emit_insn (t2);\n       DONE;\n     }"}, {"sha": "c3ed9bb5e700831306ca66404e1bc1b1c11efa16", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 42, "deletions": 56, "changes": 98, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1173,15 +1173,15 @@ ia64_expand_load_address (rtx dest, rtx src)\n \n       tmp = gen_rtx_HIGH (Pmode, src);\n       tmp = gen_rtx_PLUS (Pmode, tmp, pic_offset_table_rtx);\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, tmp));\n+      emit_insn (gen_rtx_SET (dest, tmp));\n \n       tmp = gen_rtx_LO_SUM (Pmode, gen_const_mem (Pmode, dest), src);\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, tmp));\n+      emit_insn (gen_rtx_SET (dest, tmp));\n \n       if (addend)\n \t{\n \t  tmp = gen_rtx_PLUS (Pmode, dest, GEN_INT (addend));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, dest, tmp));\n+\t  emit_insn (gen_rtx_SET (dest, tmp));\n \t}\n     }\n \n@@ -1375,7 +1375,7 @@ ia64_expand_move (rtx op0, rtx op1)\n \t{\n \t  rtx subtarget = !can_create_pseudo_p () ? op0 : gen_reg_rtx (mode);\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode, subtarget, op1));\n+\t  emit_insn (gen_rtx_SET (subtarget, op1));\n \n \t  op1 = expand_simple_binop (mode, PLUS, subtarget,\n \t\t\t\t     GEN_INT (addend), op0, 1, OPTAB_DIRECT);\n@@ -1620,11 +1620,11 @@ ia64_split_tmode_move (rtx operands[])\n \t  || GET_CODE (XEXP (EXP, 0)) == POST_DEC))\t\t\t\\\n     add_reg_note (insn, REG_INC, XEXP (XEXP (EXP, 0), 0))\n \n-  insn = emit_insn (gen_rtx_SET (VOIDmode, out[0], in[0]));\n+  insn = emit_insn (gen_rtx_SET (out[0], in[0]));\n   MAYBE_ADD_REG_INC_NOTE (insn, in[0]);\n   MAYBE_ADD_REG_INC_NOTE (insn, out[0]);\n \n-  insn = emit_insn (gen_rtx_SET (VOIDmode, out[1], in[1]));\n+  insn = emit_insn (gen_rtx_SET (out[1], in[1]));\n   MAYBE_ADD_REG_INC_NOTE (insn, in[1]);\n   MAYBE_ADD_REG_INC_NOTE (insn, out[1]);\n \n@@ -1867,9 +1867,8 @@ ia64_expand_compare (rtx *expr, rtx *op0, rtx *op1)\n \t\t\t\t     *op0, TFmode, *op1, TFmode,\n \t\t\t\t     GEN_INT (magic), DImode);\n       cmp = gen_reg_rtx (BImode);\n-      emit_insn (gen_rtx_SET (VOIDmode, cmp,\n-\t\t\t      gen_rtx_fmt_ee (ncode, BImode,\n-\t\t\t\t\t      ret, const0_rtx)));\n+      emit_insn (gen_rtx_SET (cmp, gen_rtx_fmt_ee (ncode, BImode,\n+\t\t\t\t\t\t   ret, const0_rtx)));\n \n       insns = get_insns ();\n       end_sequence ();\n@@ -1881,8 +1880,7 @@ ia64_expand_compare (rtx *expr, rtx *op0, rtx *op1)\n   else\n     {\n       cmp = gen_reg_rtx (BImode);\n-      emit_insn (gen_rtx_SET (VOIDmode, cmp,\n-\t\t\t      gen_rtx_fmt_ee (code, BImode, *op0, *op1)));\n+      emit_insn (gen_rtx_SET (cmp, gen_rtx_fmt_ee (code, BImode, *op0, *op1)));\n       code = NE;\n     }\n \n@@ -1961,8 +1959,7 @@ ia64_expand_vecint_compare (enum rtx_code code, machine_mode mode,\n \tcase V4HImode:\n \t  /* Perform a parallel unsigned saturating subtraction.  */\n \t  x = gen_reg_rtx (mode);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, x,\n-\t\t\t\t  gen_rtx_US_MINUS (mode, op0, op1)));\n+\t  emit_insn (gen_rtx_SET (x, gen_rtx_US_MINUS (mode, op0, op1)));\n \n \t  code = EQ;\n \t  op0 = x;\n@@ -1976,7 +1973,7 @@ ia64_expand_vecint_compare (enum rtx_code code, machine_mode mode,\n     }\n \n   x = gen_rtx_fmt_ee (code, mode, op0, op1);\n-  emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+  emit_insn (gen_rtx_SET (dest, x));\n \n   return negate;\n }\n@@ -2008,28 +2005,28 @@ ia64_expand_vecint_cmov (rtx operands[])\n \n       x = gen_rtx_NOT (mode, cmp);\n       x = gen_rtx_AND (mode, x, of);\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+      emit_insn (gen_rtx_SET (operands[0], x));\n     }\n   else if (of == CONST0_RTX (mode))\n     {\n       x = gen_rtx_AND (mode, cmp, ot);\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+      emit_insn (gen_rtx_SET (operands[0], x));\n     }\n   else\n     {\n       rtx t, f;\n \n       t = gen_reg_rtx (mode);\n       x = gen_rtx_AND (mode, cmp, operands[1+negate]);\n-      emit_insn (gen_rtx_SET (VOIDmode, t, x));\n+      emit_insn (gen_rtx_SET (t, x));\n \n       f = gen_reg_rtx (mode);\n       x = gen_rtx_NOT (mode, cmp);\n       x = gen_rtx_AND (mode, x, operands[2-negate]);\n-      emit_insn (gen_rtx_SET (VOIDmode, f, x));\n+      emit_insn (gen_rtx_SET (f, x));\n \n       x = gen_rtx_IOR (mode, t, f);\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+      emit_insn (gen_rtx_SET (operands[0], x));\n     }\n }\n \n@@ -2053,7 +2050,7 @@ ia64_expand_vecint_minmax (enum rtx_code code, machine_mode mode,\n       rtx x, tmp = gen_reg_rtx (mode);\n \n       x = gen_rtx_US_MINUS (mode, operands[1], operands[2]);\n-      emit_insn (gen_rtx_SET (VOIDmode, tmp, x));\n+      emit_insn (gen_rtx_SET (tmp, x));\n \n       emit_insn (gen_addv4hi3 (operands[0], tmp, operands[2]));\n       return true;\n@@ -3230,8 +3227,7 @@ do_spill (rtx (*move_fn) (rtx, rtx, rtx), rtx reg, HOST_WIDE_INT cfa_off,\n \t}\n \n       add_reg_note (insn, REG_CFA_OFFSET,\n-\t\t    gen_rtx_SET (VOIDmode,\n-\t\t\t\t gen_rtx_MEM (GET_MODE (reg),\n+\t\t    gen_rtx_SET (gen_rtx_MEM (GET_MODE (reg),\n \t\t\t\t\t      plus_constant (Pmode,\n \t\t\t\t\t\t\t     base, off)),\n \t\t\t\t frame_reg));\n@@ -3295,9 +3291,8 @@ ia64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size,\n   emit_move_insn (r2, GEN_INT (-(first + size)));\n \n   /* Compare current value of BSP and SP registers.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, p6,\n-\t\t\t  gen_rtx_fmt_ee (LTU, BImode,\n-\t\t\t\t\t  r3, stack_pointer_rtx)));\n+  emit_insn (gen_rtx_SET (p6, gen_rtx_fmt_ee (LTU, BImode,\n+\t\t\t\t\t      r3, stack_pointer_rtx)));\n \n   /* Compute the address of the probe for the Backing Store (which grows\n      towards higher addresses).  We probe only at the first offset of\n@@ -3307,18 +3302,15 @@ ia64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size,\n      size is at least 4096 - (96 + 2) * 8 = 3312 bytes, which is enough.\n      Also compute the address of the last probe for the memory stack\n      (which grows towards lower addresses).  */\n-  emit_insn (gen_rtx_SET (VOIDmode, r3, plus_constant (Pmode, r3, 4095)));\n-  emit_insn (gen_rtx_SET (VOIDmode, r2,\n-\t\t\t  gen_rtx_PLUS (Pmode, stack_pointer_rtx, r2)));\n+  emit_insn (gen_rtx_SET (r3, plus_constant (Pmode, r3, 4095)));\n+  emit_insn (gen_rtx_SET (r2, gen_rtx_PLUS (Pmode, stack_pointer_rtx, r2)));\n \n   /* Compare them and raise SEGV if the former has topped the latter.  */\n   emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n \t\t\t\tgen_rtx_fmt_ee (NE, VOIDmode, p6, const0_rtx),\n-\t\t\t\tgen_rtx_SET (VOIDmode, p6,\n-\t\t\t\t\t     gen_rtx_fmt_ee (GEU, BImode,\n-\t\t\t\t\t\t\t     r3, r2))));\n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  gen_rtx_ZERO_EXTRACT (DImode, r3, GEN_INT (12),\n+\t\t\t\tgen_rtx_SET (p6, gen_rtx_fmt_ee (GEU, BImode,\n+\t\t\t\t\t\t\t\t r3, r2))));\n+  emit_insn (gen_rtx_SET (gen_rtx_ZERO_EXTRACT (DImode, r3, GEN_INT (12),\n \t\t\t\t\t\tconst0_rtx),\n \t\t\t  const0_rtx));\n   emit_insn (gen_rtx_COND_EXEC (VOIDmode,\n@@ -3346,7 +3338,7 @@ ia64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size,\n       HOST_WIDE_INT i;\n \n       emit_move_insn (r2, GEN_INT (-(first + PROBE_INTERVAL)));\n-      emit_insn (gen_rtx_SET (VOIDmode, r2,\n+      emit_insn (gen_rtx_SET (r2,\n \t\t\t      gen_rtx_PLUS (Pmode, stack_pointer_rtx, r2)));\n       emit_stack_probe (r2);\n \n@@ -3355,12 +3347,12 @@ ia64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size,\n \t generate any code.  Then probe at FIRST + SIZE.  */\n       for (i = 2 * PROBE_INTERVAL; i < size; i += PROBE_INTERVAL)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, r2,\n+\t  emit_insn (gen_rtx_SET (r2,\n \t\t\t\t  plus_constant (Pmode, r2, -PROBE_INTERVAL)));\n \t  emit_stack_probe (r2);\n \t}\n \n-      emit_insn (gen_rtx_SET (VOIDmode, r2,\n+      emit_insn (gen_rtx_SET (r2,\n \t\t\t      plus_constant (Pmode, r2,\n \t\t\t\t\t     (i - PROBE_INTERVAL) - size)));\n       emit_stack_probe (r2);\n@@ -3386,19 +3378,18 @@ ia64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size,\n       /* Step 2: compute initial and final value of the loop counter.  */\n \n       /* TEST_ADDR = SP + FIRST.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, r2,\n+      emit_insn (gen_rtx_SET (r2,\n \t\t\t      gen_rtx_PLUS (Pmode, stack_pointer_rtx, r2)));\n \n       /* LAST_ADDR = SP + FIRST + ROUNDED_SIZE.  */\n       if (rounded_size > (1 << 21))\n \t{\n \t  emit_move_insn (r3, GEN_INT (-rounded_size));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, r3, gen_rtx_PLUS (Pmode, r2, r3)));\n+\t  emit_insn (gen_rtx_SET (r3, gen_rtx_PLUS (Pmode, r2, r3)));\n \t}\n       else\n-        emit_insn (gen_rtx_SET (VOIDmode, r3,\n-\t\t\t\tgen_rtx_PLUS (Pmode, r2,\n-\t\t\t\t\t      GEN_INT (-rounded_size))));\n+        emit_insn (gen_rtx_SET (r3, gen_rtx_PLUS (Pmode, r2,\n+\t\t\t\t\t\t  GEN_INT (-rounded_size))));\n \n \n       /* Step 3: the loop\n@@ -3421,9 +3412,8 @@ ia64_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size,\n       /* TEMP = SIZE - ROUNDED_SIZE.  */\n       if (size != rounded_size)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, r2,\n-\t\t\t\t  plus_constant (Pmode, r2,\n-\t\t\t\t\t\t rounded_size - size)));\n+\t  emit_insn (gen_rtx_SET (r2, plus_constant (Pmode, r2,\n+\t\t\t\t\t\t     rounded_size - size)));\n \t  emit_stack_probe (r2);\n \t}\n     }\n@@ -3626,8 +3616,7 @@ ia64_expand_prologue (void)\n \t{\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t  add_reg_note (insn, REG_CFA_REGISTER,\n-\t\t\tgen_rtx_SET (VOIDmode,\n-\t\t\t\t     ar_pfs_save_reg,\n+\t\t\tgen_rtx_SET (ar_pfs_save_reg,\n \t\t\t\t     gen_rtx_REG (DImode, AR_PFS_REGNUM)));\n \t}\n     }\n@@ -3669,8 +3658,7 @@ ia64_expand_prologue (void)\n \t{\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t  add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-\t\t\tgen_rtx_SET (VOIDmode,\n-\t\t\t\t     stack_pointer_rtx,\n+\t\t\tgen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t     gen_rtx_PLUS (DImode,\n \t\t\t\t\t\t   stack_pointer_rtx,\n \t\t\t\t\t\t   frame_size_rtx)));\n@@ -3817,8 +3805,7 @@ ia64_expand_prologue (void)\n           reg_emitted (reg_save_b0);\n \t  insn = emit_move_insn (alt_reg, reg);\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t  add_reg_note (insn, REG_CFA_REGISTER,\n-\t\t\tgen_rtx_SET (VOIDmode, alt_reg, pc_rtx));\n+\t  add_reg_note (insn, REG_CFA_REGISTER, gen_rtx_SET (alt_reg, pc_rtx));\n \n \t  /* Even if we're not going to generate an epilogue, we still\n \t     need to save the register so that EH works.  */\n@@ -4124,8 +4111,7 @@ ia64_expand_epilogue (int sibcall_p)\n \n       RTX_FRAME_RELATED_P (insn) = 1;\n       add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-\t\t    gen_rtx_SET (VOIDmode,\n-\t\t\t\t stack_pointer_rtx,\n+\t\t    gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t gen_rtx_PLUS (DImode,\n \t\t\t\t\t       stack_pointer_rtx,\n \t\t\t\t\t       frame_size_rtx)));\n@@ -11290,7 +11276,7 @@ expand_vselect (rtx target, rtx op0, const unsigned char *perm, unsigned nelt)\n \n   x = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (nelt, rperm));\n   x = gen_rtx_VEC_SELECT (GET_MODE (target), op0, x);\n-  x = gen_rtx_SET (VOIDmode, target, x);\n+  x = gen_rtx_SET (target, x);\n \n   rtx_insn *insn = emit_insn (x);\n   if (recog_memoized (insn) < 0)\n@@ -11630,14 +11616,14 @@ expand_vec_perm_v4hi_5 (struct expand_vec_perm_d *d)\n   gcc_assert (ok);\n \n   x = gen_rtx_AND (V4HImode, mask, t0);\n-  emit_insn (gen_rtx_SET (VOIDmode, t0, x));\n+  emit_insn (gen_rtx_SET (t0, x));\n \n   x = gen_rtx_NOT (V4HImode, mask);\n   x = gen_rtx_AND (V4HImode, x, t1);\n-  emit_insn (gen_rtx_SET (VOIDmode, t1, x));\n+  emit_insn (gen_rtx_SET (t1, x));\n \n   x = gen_rtx_IOR (V4HImode, t0, t1);\n-  emit_insn (gen_rtx_SET (VOIDmode, d->target, x));\n+  emit_insn (gen_rtx_SET (d->target, x));\n \n   return true;\n }"}, {"sha": "9e75e9a8a29bb6d471949775f489d567eb66aaee", "filename": "gcc/config/ia64/vect.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fia64%2Fvect.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fia64%2Fvect.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fvect.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -425,7 +425,7 @@\n   x = gen_rtx_PARALLEL (VOIDmode, gen_rtvec (4, const1_rtx, const0_rtx,\n \t\t\t\t\t     GEN_INT (3), const2_rtx));\n   x = gen_rtx_VEC_SELECT (V4HImode, op1h, x);\n-  emit_insn (gen_rtx_SET (VOIDmode, t0, x));\n+  emit_insn (gen_rtx_SET (t0, x));\n \n   /* T1 = DZ.l, CY.l, BX.l, AW.l.  */\n   emit_insn (gen_mulv4hi3 (t1, op1h, op2h));\n@@ -1037,7 +1037,7 @@\n     op2 = force_reg (SImode, op2);\n \n   x = gen_rtx_VEC_CONCAT (V2SImode, op1, op2);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n \n@@ -1273,10 +1273,10 @@\n \n   cmp = gen_reg_rtx (V2SFmode);\n   PUT_MODE (operands[3], V2SFmode);\n-  emit_insn (gen_rtx_SET (VOIDmode, cmp, operands[3]));\n+  emit_insn (gen_rtx_SET (cmp, operands[3]));\n \n   x = gen_rtx_IF_THEN_ELSE (V2SFmode, cmp, operands[1], operands[2]);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n "}, {"sha": "28f9fc919892507f608ec8d4fa90170a2ba7d1e6", "filename": "gcc/config/iq2000/iq2000.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fiq2000%2Fiq2000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1106,7 +1106,7 @@ gen_conditional_branch (rtx operands[], machine_mode mode)\n       label1 = pc_rtx;\n     }\n \n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+  emit_jump_insn (gen_rtx_SET (pc_rtx,\n \t\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode,\n \t\t\t\t\t\t     gen_rtx_fmt_ee (test_code,\n \t\t\t\t\t\t\t\t     VOIDmode,\n@@ -1820,7 +1820,7 @@ iq2000_emit_frame_related_store (rtx mem, rtx reg, HOST_WIDE_INT offset)\n   rtx dwarf_mem = gen_rtx_MEM (GET_MODE (reg), dwarf_address);\n \n   iq2000_annotate_frame_insn (emit_move_insn (mem, reg),\n-\t\t\t    gen_rtx_SET (GET_MODE (reg), dwarf_mem, reg));\n+\t\t\t      gen_rtx_SET (dwarf_mem, reg));\n }\n \n /* Emit instructions to save/restore registers, as determined by STORE_P.  */\n@@ -2064,7 +2064,7 @@ iq2000_expand_prologue (void)\n       insn = emit_insn (gen_subsi3 (stack_pointer_rtx, stack_pointer_rtx,\n \t\t\t\t    adjustment_rtx));\n \n-      dwarf_pattern = gen_rtx_SET (Pmode, stack_pointer_rtx,\n+      dwarf_pattern = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t   plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t  -tsize));\n \n@@ -3305,8 +3305,7 @@ iq2000_legitimize_address (rtx xinsn, rtx old_x ATTRIBUTE_UNUSED,\n           emit_move_insn (int_reg,\n                           GEN_INT (INTVAL (xplus1) & ~ 0x7fff));\n \n-          emit_insn (gen_rtx_SET (VOIDmode,\n-                                  ptr_reg,\n+          emit_insn (gen_rtx_SET (ptr_reg,\n                                   gen_rtx_PLUS (Pmode, xplus0, int_reg)));\n \n           return plus_constant (Pmode, ptr_reg, INTVAL (xplus1) & 0x7fff);"}, {"sha": "d0eee18aa0e38c18336706dd4c9f11f7d96650ee", "filename": "gcc/config/iq2000/iq2000.md", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fiq2000%2Fiq2000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fiq2000%2Fiq2000.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -695,8 +695,7 @@\n       rtx tem = ((reload_in_progress | reload_completed)\n \t\t ? operands[0] : gen_reg_rtx (mode));\n \n-      emit_insn (gen_rtx_SET (VOIDmode, tem,\n-\t\t\t      gen_rtx_HIGH (mode, operands[1])));\n+      emit_insn (gen_rtx_SET (tem, gen_rtx_HIGH (mode, operands[1])));\n \n       operands[1] = gen_rtx_LO_SUM (mode, tem, operands[1]);\n     }\n@@ -722,8 +721,7 @@\n       rtx tem = ((reload_in_progress | reload_completed)\n \t\t ? operands[0] : gen_reg_rtx (SImode));\n \n-      emit_insn (gen_rtx_SET (VOIDmode, tem,\n-\t\t\t      gen_rtx_HIGH (SImode, operands[1])));\n+      emit_insn (gen_rtx_SET (tem, gen_rtx_HIGH (SImode, operands[1])));\n       operands[1] = gen_rtx_LO_SUM (SImode, tem, operands[1]);\n     }\n }\")"}, {"sha": "df58eebb090be629e0e021cf4c159429d52dbb7c", "filename": "gcc/config/lm32/lm32.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Flm32%2Flm32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Flm32%2Flm32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -237,9 +237,8 @@ gen_int_relational (enum rtx_code code,\n       /* Generate conditional branch instruction.  */\n       cond = gen_rtx_fmt_ee (code, mode, cmp0, cmp1);\n       label = gen_rtx_LABEL_REF (VOIDmode, destination);\n-      insn = gen_rtx_SET (VOIDmode, pc_rtx,\n-\t\t\t  gen_rtx_IF_THEN_ELSE (VOIDmode,\n-\t\t\t\t\t\tcond, label, pc_rtx));\n+      insn = gen_rtx_SET (pc_rtx, gen_rtx_IF_THEN_ELSE (VOIDmode,\n+\t\t\t\t\t\t\tcond, label, pc_rtx));\n       emit_jump_insn (insn);\n     }\n   else"}, {"sha": "5c87072cb67efcc0b959ac4bcfef522f33c1c1a5", "filename": "gcc/config/lm32/lm32.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Flm32%2Flm32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Flm32%2Flm32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -195,8 +195,9 @@\n     }\n   else if (!flag_pic && reloc_operand (operands[1], GET_MODE (operands[1]))) \n     {\n-      emit_insn (gen_rtx_SET (SImode, operands[0], gen_rtx_HIGH (SImode, operands[1])));\n-      emit_insn (gen_rtx_SET (SImode, operands[0], gen_rtx_LO_SUM (SImode, operands[0], operands[1])));\n+      emit_insn (gen_rtx_SET (operands[0], gen_rtx_HIGH (SImode, operands[1])));\n+      emit_insn (gen_rtx_SET (operands[0], gen_rtx_LO_SUM (SImode, operands[0],\n+\t\t\t\t\t\t\t   operands[1])));\n       DONE;\n     }  \n   else if (GET_CODE (operands[1]) == CONST_INT)"}, {"sha": "ad627750100429f116301495e1c0c8f4a49a9f17", "filename": "gcc/config/m32c/m32c.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fm32c%2Fm32c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fm32c%2Fm32c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32c%2Fm32c.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1215,8 +1215,7 @@ m32c_pushm_popm (Push_Pop_Type ppt)\n \t    addr = gen_rtx_PLUS (GET_MODE (addr), addr, GEN_INT (byte_count));\n \n \t  dwarf_set[n_dwarfs++] =\n-\t    gen_rtx_SET (VOIDmode,\n-\t\t\t gen_rtx_MEM (mode, addr),\n+\t    gen_rtx_SET (gen_rtx_MEM (mode, addr),\n \t\t\t gen_rtx_REG (mode, pushm_info[i].reg1));\n \t  F (dwarf_set[n_dwarfs - 1]);\n \n@@ -1247,8 +1246,7 @@ m32c_pushm_popm (Push_Pop_Type ppt)\n       if (reg_mask)\n \t{\n \t  XVECEXP (note, 0, 0)\n-\t    = gen_rtx_SET (VOIDmode,\n-\t\t\t   stack_pointer_rtx,\n+\t    = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t   gen_rtx_PLUS (GET_MODE (stack_pointer_rtx),\n \t\t\t\t\t stack_pointer_rtx,\n \t\t\t\t\t GEN_INT (-byte_count)));\n@@ -1885,7 +1883,7 @@ m32c_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n       /* reload FB to A_REGS */\n       rtx temp = gen_reg_rtx (Pmode);\n       x = copy_rtx (x);\n-      emit_insn (gen_rtx_SET (VOIDmode, temp, XEXP (x, 0)));\n+      emit_insn (gen_rtx_SET (temp, XEXP (x, 0)));\n       XEXP (x, 0) = temp;\n     }\n \n@@ -3380,7 +3378,7 @@ m32c_prepare_move (rtx * operands, machine_mode mode)\n       rtx dest_reg = XEXP (pmv, 0);\n       rtx dest_mod = XEXP (pmv, 1);\n \n-      emit_insn (gen_rtx_SET (Pmode, dest_reg, dest_mod));\n+      emit_insn (gen_rtx_SET (dest_reg, dest_mod));\n       operands[0] = gen_rtx_MEM (mode, dest_reg);\n     }\n   if (can_create_pseudo_p () && MEM_P (operands[0]) && MEM_P (operands[1]))"}, {"sha": "4c33b93eb1897aae00771481508838c3e015a22b", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1081,12 +1081,10 @@ gen_split_move_double (rtx operands[])\n \t  /* We normally copy the low-numbered register first.  However, if\n \t     the first register operand 0 is the same as the second register of\n \t     operand 1, we must copy in the opposite order.  */\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  operand_subword (dest, reverse, TRUE, mode),\n+\t  emit_insn (gen_rtx_SET (operand_subword (dest, reverse, TRUE, mode),\n \t\t\t\t  operand_subword (src,  reverse, TRUE, mode)));\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  operand_subword (dest, !reverse, TRUE, mode),\n+\t  emit_insn (gen_rtx_SET (operand_subword (dest, !reverse, TRUE, mode),\n \t\t\t\t  operand_subword (src,  !reverse, TRUE, mode)));\n \t}\n \n@@ -1095,12 +1093,10 @@ gen_split_move_double (rtx operands[])\n \t{\n \t  rtx words[2];\n \t  split_double (src, &words[0], &words[1]);\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  operand_subword (dest, 0, TRUE, mode),\n+\t  emit_insn (gen_rtx_SET (operand_subword (dest, 0, TRUE, mode),\n \t\t\t\t  words[0]));\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  operand_subword (dest, 1, TRUE, mode),\n+\t  emit_insn (gen_rtx_SET (operand_subword (dest, 1, TRUE, mode),\n \t\t\t\t  words[1]));\n \t}\n \n@@ -1122,13 +1118,11 @@ gen_split_move_double (rtx operands[])\n \t\tld r1,r3+; ld r2,r3; addi r3,-4\n \n \t     which saves 2 bytes and doesn't force longword alignment.  */\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  operand_subword (dest, reverse, TRUE, mode),\n+\t  emit_insn (gen_rtx_SET (operand_subword (dest, reverse, TRUE, mode),\n \t\t\t\t  adjust_address (src, SImode,\n \t\t\t\t\t\t  reverse * UNITS_PER_WORD)));\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  operand_subword (dest, !reverse, TRUE, mode),\n+\t  emit_insn (gen_rtx_SET (operand_subword (dest, !reverse, TRUE, mode),\n \t\t\t\t  adjust_address (src, SImode,\n \t\t\t\t\t\t  !reverse * UNITS_PER_WORD)));\n \t}\n@@ -1150,12 +1144,10 @@ gen_split_move_double (rtx operands[])\n      which saves 2 bytes and doesn't force longword alignment.  */\n   else if (MEM_P (dest) && REG_P (src))\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t      adjust_address (dest, SImode, 0),\n+      emit_insn (gen_rtx_SET (adjust_address (dest, SImode, 0),\n \t\t\t      operand_subword (src, 0, TRUE, mode)));\n \n-      emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t      adjust_address (dest, SImode, UNITS_PER_WORD),\n+      emit_insn (gen_rtx_SET (adjust_address (dest, SImode, UNITS_PER_WORD),\n \t\t\t      operand_subword (src, 1, TRUE, mode)));\n     }\n "}, {"sha": "87d9ef9307d027629b99f82966e7342ac5d1c9be", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -959,7 +959,7 @@ m68k_emit_movem (rtx base, HOST_WIDE_INT offset,\n \t\t\t   (count\n \t\t\t    * GET_MODE_SIZE (mode)\n \t\t\t    * (HOST_WIDE_INT) (store_p ? -1 : 1)));\n-      XVECEXP (body, 0, i++) = gen_rtx_SET (VOIDmode, base, src);\n+      XVECEXP (body, 0, i++) = gen_rtx_SET (base, src);\n     }\n \n   for (; mask != 0; mask >>= 1, regno++)\n@@ -969,7 +969,7 @@ m68k_emit_movem (rtx base, HOST_WIDE_INT offset,\n \toperands[!store_p] = gen_frame_mem (mode, addr);\n \toperands[store_p] = gen_rtx_REG (mode, regno);\n \tXVECEXP (body, 0, i++)\n-\t  = gen_rtx_SET (VOIDmode, operands[0], operands[1]);\n+\t  = gen_rtx_SET (operands[0], operands[1]);\n \toffset += GET_MODE_SIZE (mode);\n       }\n   gcc_assert (i == XVECLEN (body, 0));\n@@ -3740,8 +3740,7 @@ emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t}\n       else\n \temit_move_insn (scratch_reg, XEXP (operand1, 0));\n-      emit_insn (gen_rtx_SET (VOIDmode, operand0,\n-\t\t\t      gen_rtx_MEM (mode, scratch_reg)));\n+      emit_insn (gen_rtx_SET (operand0, gen_rtx_MEM (mode, scratch_reg)));\n       return 1;\n     }\n   else if (fp_reg_operand (operand1, mode)\n@@ -3774,8 +3773,7 @@ emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t}\n       else\n \temit_move_insn (scratch_reg, XEXP (operand0, 0));\n-      emit_insn (gen_rtx_SET (VOIDmode, gen_rtx_MEM (mode, scratch_reg),\n-\t\t\t      operand1));\n+      emit_insn (gen_rtx_SET (gen_rtx_MEM (mode, scratch_reg), operand1));\n       return 1;\n     }\n   /* Handle secondary reloads for loads of FP registers from constant\n@@ -3802,11 +3800,10 @@ emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t memory location into scratch_reg.  */\n       xoperands[0] = scratch_reg;\n       xoperands[1] = XEXP (force_const_mem (mode, operand1), 0);\n-      emit_insn (gen_rtx_SET (mode, scratch_reg, xoperands[1]));\n+      emit_insn (gen_rtx_SET (scratch_reg, xoperands[1]));\n \n       /* Now load the destination register.  */\n-      emit_insn (gen_rtx_SET (mode, operand0,\n-\t\t\t      gen_rtx_MEM (mode, scratch_reg)));\n+      emit_insn (gen_rtx_SET (operand0, gen_rtx_MEM (mode, scratch_reg)));\n       return 1;\n     }\n \n@@ -5101,7 +5098,7 @@ m68k_output_mi_thunk (FILE *file, tree thunk ATTRIBUTE_UNUSED,\n       addr = plus_constant (Pmode, tmp, vcall_offset);\n       if (!m68k_legitimate_address_p (Pmode, addr, true))\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, tmp, addr));\n+\t  emit_insn (gen_rtx_SET (tmp, addr));\n \t  addr = tmp;\n \t}\n "}, {"sha": "7f4195a9f2fa9462bf0b6297fa31c43d9890bfbd", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1134,7 +1134,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves. */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n })\n \n@@ -1148,7 +1148,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves. */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n })\n \n@@ -1277,7 +1277,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves. */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n })\n \n@@ -1291,7 +1291,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves. */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n })\n "}, {"sha": "e229609ce636a467f487f7bdb25a427dbed4f90f", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -689,9 +689,7 @@ mcore_gen_compare (enum rtx_code code, rtx op0, rtx op1)\n       break;\n     }\n \n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  cc_reg,\n-\t\t\t  gen_rtx_fmt_ee (code, CCmode, op0, op1)));\n+  emit_insn (gen_rtx_SET (cc_reg, gen_rtx_fmt_ee (code, CCmode, op0, op1)));\n   return invert;\n }\n \n@@ -1481,14 +1479,16 @@ mcore_expand_insv (rtx operands[])\n       if ((INTVAL (operands[3]) & 1) == 0)\n \t{\n \t  mask = ~(1 << posn);\n-\t  emit_insn (gen_rtx_SET (SImode, operands[0],\n-\t\t\t      gen_rtx_AND (SImode, operands[0], GEN_INT (mask))));\n+\t  emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t\t  gen_rtx_AND (SImode, operands[0],\n+\t\t\t\t\t       GEN_INT (mask))));\n \t}\n       else\n \t{\n \t  mask = 1 << posn;\n-\t  emit_insn (gen_rtx_SET (SImode, operands[0],\n-\t\t\t    gen_rtx_IOR (SImode, operands[0], GEN_INT (mask))));\n+\t  emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t\t  gen_rtx_IOR (SImode, operands[0],\n+\t\t\t\t\t       GEN_INT (mask))));\n \t}\n       \n       return 1;\n@@ -1517,17 +1517,17 @@ mcore_expand_insv (rtx operands[])\n       && INTVAL (operands[3]) == ((1 << width) - 1))\n     {\n       mreg = force_reg (SImode, GEN_INT (INTVAL (operands[3]) << posn));\n-      emit_insn (gen_rtx_SET (SImode, operands[0],\n-                         gen_rtx_IOR (SImode, operands[0], mreg)));\n+      emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t      gen_rtx_IOR (SImode, operands[0], mreg)));\n       return 1;\n     }\n \n   /* Generate the clear mask.  */\n   mreg = force_reg (SImode, GEN_INT (~(((1 << width) - 1) << posn)));\n \n   /* Clear the field, to overlay it later with the source.  */\n-  emit_insn (gen_rtx_SET (SImode, operands[0], \n-\t\t      gen_rtx_AND (SImode, operands[0], mreg)));\n+  emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t  gen_rtx_AND (SImode, operands[0], mreg)));\n \n   /* If the source is constant 0, we've nothing to add back.  */\n   if (GET_CODE (operands[3]) == CONST_INT && INTVAL (operands[3]) == 0)\n@@ -1546,17 +1546,16 @@ mcore_expand_insv (rtx operands[])\n   if (width + posn != (int) GET_MODE_SIZE (SImode))\n     {\n       ereg = force_reg (SImode, GEN_INT ((1 << width) - 1));      \n-      emit_insn (gen_rtx_SET (SImode, sreg,\n-                          gen_rtx_AND (SImode, sreg, ereg)));\n+      emit_insn (gen_rtx_SET (sreg, gen_rtx_AND (SImode, sreg, ereg)));\n     }\n \n   /* Insert source value in dest.  */\n   if (posn != 0)\n-    emit_insn (gen_rtx_SET (SImode, sreg,\n-\t\t        gen_rtx_ASHIFT (SImode, sreg, GEN_INT (posn))));\n+    emit_insn (gen_rtx_SET (sreg, gen_rtx_ASHIFT (SImode, sreg,\n+\t\t\t\t\t\t  GEN_INT (posn))));\n   \n-  emit_insn (gen_rtx_SET (SImode, operands[0],\n-\t\t      gen_rtx_IOR (SImode, operands[0], sreg)));\n+  emit_insn (gen_rtx_SET (operands[0],\n+\t\t\t  gen_rtx_IOR (SImode, operands[0], sreg)));\n \n   return 1;\n }\n@@ -1627,7 +1626,7 @@ block_move_sequence (rtx dst_mem, rtx src_mem, int size, int align)\n \t  temp[next] = gen_reg_rtx (mode[next]);\n \n \t  x = adjust_address (src_mem, mode[next], offset_ld);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, temp[next], x));\n+\t  emit_insn (gen_rtx_SET (temp[next], x));\n \n \t  offset_ld += next_amount;\n \t  size -= next_amount;\n@@ -1639,7 +1638,7 @@ block_move_sequence (rtx dst_mem, rtx src_mem, int size, int align)\n \t  active[phase] = false;\n \t  \n \t  x = adjust_address (dst_mem, mode[phase], offset_st);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, x, temp[phase]));\n+\t  emit_insn (gen_rtx_SET (x, temp[phase]));\n \n \t  offset_st += amount[phase];\n \t}"}, {"sha": "6e7b02590d5051b8007e5286324deebc5ae35f32", "filename": "gcc/config/mcore/mcore.md", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmcore%2Fmcore.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmcore%2Fmcore.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1145,9 +1145,9 @@\n     else\n       low = 4, high = 0;\n     \n-    emit_insn (gen_rtx_SET (VOIDmode, gen_rtx_SUBREG (SImode, operands[0], low),\n+    emit_insn (gen_rtx_SET (gen_rtx_SUBREG (SImode, operands[0], low),\n \t      operands[1]));\n-    emit_insn (gen_rtx_SET (VOIDmode, gen_rtx_SUBREG (SImode, operands[0], high),\n+    emit_insn (gen_rtx_SET (gen_rtx_SUBREG (SImode, operands[0], high),\n \t      gen_rtx_ASHIFTRT (SImode,\n \t\t\t       gen_rtx_SUBREG (SImode, operands[0], low),\n \t\t\t       GEN_INT (31))));\n@@ -1378,8 +1378,7 @@\n \n   for (i = 0; i < count; i++)\n     XVECEXP (operands[3], 0, i)\n-      = gen_rtx_SET (VOIDmode,\n-\t\t gen_rtx_REG (SImode, regno + i),\n+      = gen_rtx_SET (gen_rtx_REG (SImode, regno + i),\n \t\t gen_rtx_MEM (SImode, plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t     i * 4)));\n }\")\n@@ -1417,7 +1416,7 @@\n \n   for (i = 0; i < count; i++)\n     XVECEXP (operands[3], 0, i)\n-      = gen_rtx_SET (VOIDmode,\n+      = gen_rtx_SET (\n \t\t gen_rtx_MEM (SImode, plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t     i * 4)),\n \t\t gen_rtx_REG (SImode, regno + i));\n@@ -2336,10 +2335,10 @@\n ;        rtx lshft = GEN_INT (32 - (INTVAL (operands[2]) + INTVAL (operands[3])));\n ;        rtx rshft = GEN_INT (32 - INTVAL (operands[2]));\n ;\n-;        emit_insn (gen_rtx_SET (SImode, operands[0], operands[1]));\n-;        emit_insn (gen_rtx_SET (SImode, operands[0],\n+;        emit_insn (gen_rtx_SET (operands[0], operands[1]));\n+;        emit_insn (gen_rtx_SET (operands[0],\n ;                            gen_rtx_ASHIFT (SImode, operands[0], lshft)));\n-;        emit_insn (gen_rtx_SET (SImode, operands[0],\n+;        emit_insn (gen_rtx_SET (operands[0],\n ;                            gen_rtx_ASHIFTRT (SImode, operands[0], rshft)));\n ;        DONE;\n ;     }\n@@ -2371,10 +2370,10 @@\n       rtx tmp1 = gen_reg_rtx (SImode);\n       rtx tmp2 = gen_reg_rtx (SImode);\n \n-      emit_insn (gen_rtx_SET (SImode, tmp1, operands[1]));\n-      emit_insn (gen_rtx_SET (SImode, tmp2,\n+      emit_insn (gen_rtx_SET (tmp1, operands[1]));\n+      emit_insn (gen_rtx_SET (tmp2,\n                          gen_rtx_ASHIFT (SImode, tmp1, lshft)));\n-      emit_insn (gen_rtx_SET (SImode, operands[0],\n+      emit_insn (gen_rtx_SET (operands[0],\n                          gen_rtx_ASHIFTRT (SImode, tmp2, rshft)));\n       DONE;\n     }\n@@ -2416,10 +2415,10 @@\n         {\n           rtx rshft = GEN_INT (INTVAL (operands[3]));\n           shifted = gen_reg_rtx (SImode);\n-          emit_insn (gen_rtx_SET (SImode, shifted,\n+          emit_insn (gen_rtx_SET (shifted,\n                          gen_rtx_LSHIFTRT (SImode, operands[1], rshft)));\n         }\n-     emit_insn (gen_rtx_SET (SImode, operands[0],\n+     emit_insn (gen_rtx_SET (operands[0],\n                        gen_rtx_AND (SImode, shifted, mask)));\n      DONE;\n    }\n@@ -2432,10 +2431,10 @@\n      rtx tmp1 = gen_reg_rtx (SImode);\n      rtx tmp2 = gen_reg_rtx (SImode);\n \n-     emit_insn (gen_rtx_SET (SImode, tmp1, operands[1]));\n-     emit_insn (gen_rtx_SET (SImode, tmp2,\n+     emit_insn (gen_rtx_SET (tmp1, operands[1]));\n+     emit_insn (gen_rtx_SET (tmp2,\n                          gen_rtx_ASHIFT (SImode, tmp1, lshft)));\n-     emit_insn (gen_rtx_SET (SImode, operands[0],\n+     emit_insn (gen_rtx_SET (operands[0],\n                        gen_rtx_LSHIFTRT (SImode, tmp2, rshft)));\n      DONE;\n    }"}, {"sha": "fb54f307a8c798da4905a0254d4f8c66d8a603f3", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1420,7 +1420,7 @@ mep_expand_mov (rtx *operands, machine_mode mode)\n \n \t      n = gen_rtx_PLUS (mode, (t == 'b' ? mep_tp_rtx ()\n \t\t\t\t       : mep_gp_rtx ()), n);\n-\t      n = emit_insn (gen_rtx_SET (mode, operands[0], n));\n+\t      n = emit_insn (gen_rtx_SET (operands[0], n));\n #if DEBUG_EXPAND_MOV\n \t      fprintf(stderr, \"mep_expand_mov emitting \");\n \t      debug_rtx(n);\n@@ -1686,8 +1686,7 @@ mep_expand_setcc_1 (enum rtx_code code, rtx dest, rtx op1, rtx op2)\n     case LT:\n     case LTU:\n       op1 = force_reg (SImode, op1);\n-      emit_insn (gen_rtx_SET (VOIDmode, dest,\n-\t\t\t      gen_rtx_fmt_ee (code, SImode, op1, op2)));\n+      emit_insn (gen_rtx_SET (dest, gen_rtx_fmt_ee (code, SImode, op1, op2)));\n       return true;\n \n     case EQ:\n@@ -1716,8 +1715,7 @@ mep_expand_setcc_1 (enum rtx_code code, rtx dest, rtx op1, rtx op2)\n       op2 = gen_reg_rtx (SImode);\n       mep_expand_setcc_1 (LTU, op2, op1, const1_rtx);\n \n-      emit_insn (gen_rtx_SET (VOIDmode, dest,\n-\t\t\t      gen_rtx_XOR (SImode, op2, const1_rtx)));\n+      emit_insn (gen_rtx_SET (dest, gen_rtx_XOR (SImode, op2, const1_rtx)));\n       return true;\n \n     case LE:\n@@ -2629,8 +2627,7 @@ add_constant (int dest, int src, int value, int mark_frame)\n     {\n       RTX_FRAME_RELATED_P(insn) = 1;\n       add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t    gen_rtx_SET (SImode,\n-\t\t\t\t gen_rtx_REG (SImode, dest),\n+\t\t    gen_rtx_SET (gen_rtx_REG (SImode, dest),\n \t\t\t\t gen_rtx_PLUS (SImode,\n \t\t\t\t\t       gen_rtx_REG (SImode, dest),\n \t\t\t\t\t       GEN_INT (value))));\n@@ -2790,8 +2787,7 @@ mep_expand_prologue (void)\n \t    RTX_FRAME_RELATED_P (insn) = 1;\n \t    \n \t    add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\t  gen_rtx_SET (VOIDmode,\n-\t\t\t\t       copy_rtx (mem),\n+\t\t\t  gen_rtx_SET (copy_rtx (mem),\n \t\t\t\t       gen_rtx_REG (rmode, i)));\n \t    mem = gen_rtx_MEM (SImode,\n \t\t\t       plus_constant (Pmode, stack_pointer_rtx,\n@@ -2812,8 +2808,7 @@ mep_expand_prologue (void)\n \t    RTX_FRAME_RELATED_P (insn) = 1;\n \t    \n \t    add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\t  gen_rtx_SET (VOIDmode,\n-\t\t\t\t       copy_rtx (mem),\n+\t\t\t  gen_rtx_SET (copy_rtx (mem),\n \t\t\t\t       gen_rtx_REG (rmode, i)));\n \t  }\n       }"}, {"sha": "55be2d11674986a28f875b757d9058fdb214ee33", "filename": "gcc/config/microblaze/microblaze.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -592,7 +592,7 @@ load_tls_operand (rtx x, rtx reg)\n \n   tmp = gen_rtx_CONST (Pmode, x);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, reg,\n+  emit_insn (gen_rtx_SET (reg,\n                           gen_rtx_PLUS (Pmode, pic_offset_table_rtx, tmp)));\n \n   return reg;\n@@ -1023,8 +1023,7 @@ microblaze_legitimize_address (rtx x, rtx oldx ATTRIBUTE_UNUSED,\n \n \t  emit_move_insn (int_reg, GEN_INT (INTVAL (xplus1) & ~0x7fff));\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  ptr_reg,\n+\t  emit_insn (gen_rtx_SET (ptr_reg,\n \t\t\t\t  gen_rtx_PLUS (Pmode, xplus0, int_reg)));\n \n \t  result = gen_rtx_PLUS (Pmode, ptr_reg,"}, {"sha": "16ed5f0f31a058b600fba54ddc95369420e24a0e", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 37, "deletions": 43, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2825,8 +2825,7 @@ mips_emit_move_or_split (rtx dest, rtx src, enum mips_split_type split_type)\n static void\n mips_emit_unary (enum rtx_code code, rtx target, rtx op0)\n {\n-  emit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t  gen_rtx_fmt_e (code, GET_MODE (op0), op0)));\n+  emit_insn (gen_rtx_SET (target, gen_rtx_fmt_e (code, GET_MODE (op0), op0)));\n }\n \n /* Compute (CODE OP0) and store the result in a new register of mode MODE.\n@@ -2847,8 +2846,8 @@ mips_force_unary (machine_mode mode, enum rtx_code code, rtx op0)\n void\n mips_emit_binary (enum rtx_code code, rtx target, rtx op0, rtx op1)\n {\n-  emit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t  gen_rtx_fmt_ee (code, GET_MODE (target), op0, op1)));\n+  emit_insn (gen_rtx_SET (target, gen_rtx_fmt_ee (code, GET_MODE (target),\n+\t\t\t\t\t\t  op0, op1)));\n }\n \n /* Compute (CODE OP0 OP1) and store the result in a new register\n@@ -3228,8 +3227,8 @@ mips_call_tls_get_addr (rtx sym, enum mips_symbol_type type, rtx v0)\n \n   start_sequence ();\n \n-  emit_insn (gen_rtx_SET (Pmode, a0,\n-\t\t\t  gen_rtx_LO_SUM (Pmode, pic_offset_table_rtx, loc)));\n+  emit_insn (gen_rtx_SET (a0, gen_rtx_LO_SUM (Pmode, pic_offset_table_rtx,\n+\t\t\t\t\t      loc)));\n   insn = mips_expand_call (MIPS_CALL_NORMAL, v0, mips_tls_symbol,\n \t\t\t   const0_rtx, NULL_RTX, false);\n   RTL_CONST_CALL_P (insn) = 1;\n@@ -3432,15 +3431,15 @@ mips_move_integer (rtx temp, rtx dest, unsigned HOST_WIDE_INT value)\n     {\n       if (!can_create_pseudo_p ())\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, temp, x));\n+\t  emit_insn (gen_rtx_SET (temp, x));\n \t  x = temp;\n \t}\n       else\n \tx = force_reg (mode, x);\n       x = gen_rtx_fmt_ee (codes[i].code, mode, x, GEN_INT (codes[i].value));\n     }\n \n-  emit_insn (gen_rtx_SET (VOIDmode, dest, x));\n+  emit_insn (gen_rtx_SET (dest, x));\n }\n \n /* Subroutine of mips_legitimize_move.  Move constant SRC into register\n@@ -3462,7 +3461,7 @@ mips_legitimize_const_move (machine_mode mode, rtx dest, rtx src)\n   /* Split moves of symbolic constants into high/low pairs.  */\n   if (mips_split_symbol (dest, src, MAX_MACHINE_MODE, &src))\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, src));\n+      emit_insn (gen_rtx_SET (dest, src));\n       return;\n     }\n \n@@ -5220,20 +5219,19 @@ mips_expand_conditional_move (rtx *operands)\n       rtx temp = gen_reg_rtx (mode);\n       rtx temp2 = gen_reg_rtx (mode);\n \n-      emit_insn (gen_rtx_SET (VOIDmode, temp,\n+      emit_insn (gen_rtx_SET (temp,\n \t\t\t      gen_rtx_IF_THEN_ELSE (mode, cond,\n \t\t\t\t\t\t    operands[2], const0_rtx)));\n \n       /* Flip the test for the second operand.  */\n       cond = gen_rtx_fmt_ee ((code == EQ) ? NE : EQ, GET_MODE (op0), op0, op1);\n \n-      emit_insn (gen_rtx_SET (VOIDmode, temp2,\n+      emit_insn (gen_rtx_SET (temp2,\n \t\t\t      gen_rtx_IF_THEN_ELSE (mode, cond,\n \t\t\t\t\t\t    operands[3], const0_rtx)));\n \n       /* Merge the two results, at least one is guaranteed to be zero.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n-\t\t\t      gen_rtx_IOR (mode, temp, temp2)));\n+      emit_insn (gen_rtx_SET (operands[0], gen_rtx_IOR (mode, temp, temp2)));\n     }\n   else\n     {\n@@ -5243,7 +5241,7 @@ mips_expand_conditional_move (rtx *operands)\n \t  operands[3] = force_reg (GET_MODE (operands[0]), operands[3]);\n \t}\n \n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+      emit_insn (gen_rtx_SET (operands[0],\n \t\t\t      gen_rtx_IF_THEN_ELSE (GET_MODE (operands[0]), cond,\n \t\t\t\t\t\t    operands[2], operands[3])));\n     }\n@@ -6603,7 +6601,7 @@ mips_load_call_address (enum mips_call_type type, rtx dest, rtx addr)\n       && mips_ok_for_lazy_binding_p (addr))\n     {\n       addr = mips_got_load (dest, addr, SYMBOL_GOTOFF_CALL);\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, addr));\n+      emit_insn (gen_rtx_SET (dest, addr));\n       return true;\n     }\n   else\n@@ -7773,8 +7771,7 @@ mips_expand_atomic_qihi (union mips_gen_fn_ptrs generator,\n \n   /* Compute the equivalent exclusive mask.  */\n   inverted_mask = gen_reg_rtx (SImode);\n-  emit_insn (gen_rtx_SET (VOIDmode, inverted_mask,\n-\t\t\t  gen_rtx_NOT (SImode, mask)));\n+  emit_insn (gen_rtx_SET (inverted_mask, gen_rtx_NOT (SImode, mask)));\n \n   /* Shift the old value into place.  */\n   if (oldval != const0_rtx)\n@@ -9364,7 +9361,7 @@ mips_frame_set (rtx mem, rtx reg)\n {\n   rtx set;\n \n-  set = gen_rtx_SET (VOIDmode, mem, reg);\n+  set = gen_rtx_SET (mem, reg);\n   RTX_FRAME_RELATED_P (set) = 1;\n \n   return set;\n@@ -9572,10 +9569,10 @@ mips16e_save_restore_reg (bool restore_p, bool reg_parm_p,\n   if (restore_p)\n     {\n       mips_add_cfa_restore (reg);\n-      return gen_rtx_SET (VOIDmode, reg, mem);\n+      return gen_rtx_SET (reg, mem);\n     }\n   if (reg_parm_p)\n-    return gen_rtx_SET (VOIDmode, mem, reg);\n+    return gen_rtx_SET (mem, reg);\n   return mips_frame_set (mem, reg);\n }\n \n@@ -9625,7 +9622,7 @@ mips16e_build_save_restore (bool restore_p, unsigned int *mask_ptr,\n   n = 0;\n \n   /* Add the stack pointer adjustment.  */\n-  set = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+  set = gen_rtx_SET (stack_pointer_rtx,\n \t\t     plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t    restore_p ? size : -size));\n   RTX_FRAME_RELATED_P (set) = 1;\n@@ -10890,7 +10887,7 @@ umips_build_save_restore (mips_save_restore_fn fn,\n \tset = mips_frame_set (mem, reg);\n       else\n \t{\n-\t  set = gen_rtx_SET (VOIDmode, reg, mem);\n+\t  set = gen_rtx_SET (reg, mem);\n \t  mips_add_cfa_restore (reg);\n \t}\n       XVECEXP (pattern, 0, j) = set;\n@@ -10907,7 +10904,7 @@ umips_build_save_restore (mips_save_restore_fn fn,\n \tset = mips_frame_set (mem, reg);\n       else\n \t{\n-\t  set = gen_rtx_SET (VOIDmode, reg, mem);\n+\t  set = gen_rtx_SET (reg, mem);\n \t  mips_add_cfa_restore (reg);\n \t}\n       XVECEXP (pattern, 0, j) = set;\n@@ -11318,20 +11315,18 @@ mips_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n       /* Step 2: compute initial and final value of the loop counter.  */\n \n       /* TEST_ADDR = SP + FIRST.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, r3,\n-\t\t\t      plus_constant (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t     -first)));\n+      emit_insn (gen_rtx_SET (r3, plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t\t -first)));\n \n       /* LAST_ADDR = SP + FIRST + ROUNDED_SIZE.  */\n       if (rounded_size > 32768)\n \t{\n           emit_move_insn (r12, GEN_INT (rounded_size));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, r12,\n-\t\t\t          gen_rtx_MINUS (Pmode, r3, r12)));\n+\t  emit_insn (gen_rtx_SET (r12, gen_rtx_MINUS (Pmode, r3, r12)));\n \t}\n       else\n-\temit_insn (gen_rtx_SET (VOIDmode, r12,\n-\t\t\t        plus_constant (Pmode, r3, -rounded_size)));\n+\temit_insn (gen_rtx_SET (r12, plus_constant (Pmode, r3,\n+\t\t\t\t\t\t    -rounded_size)));\n \n \n       /* Step 3: the loop\n@@ -11618,7 +11613,7 @@ mips_expand_prologue (void)\n \n \t  /* Describe the combined effect of the previous instructions.  */\n \t  mips_set_frame_expr\n-\t    (gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t    (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t  plus_constant (Pmode, stack_pointer_rtx, -size)));\n \t}\n       mips_frame_barrier ();\n@@ -11649,7 +11644,7 @@ mips_expand_prologue (void)\n \t\t\t\t    hard_frame_pointer_rtx,\n \t\t\t\t    MIPS_PROLOGUE_TEMP (Pmode)));\n \t  mips_set_frame_expr\n-\t    (gen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n+\t    (gen_rtx_SET (hard_frame_pointer_rtx,\n \t\t\t  plus_constant (Pmode, stack_pointer_rtx, offset)));\n \t}\n     }\n@@ -16777,10 +16772,9 @@ mips16_load_branch_target (rtx dest, rtx src)\n \tmips_emit_move (dest, pic_offset_table_rtx);\n       page = mips_unspec_address (src, SYMBOL_GOTOFF_PAGE);\n       low = mips_unspec_address (src, SYMBOL_GOT_PAGE_OFST);\n-      emit_insn (gen_rtx_SET (VOIDmode, dest,\n+      emit_insn (gen_rtx_SET (dest,\n \t\t\t      PMODE_INSN (gen_unspec_got, (dest, page))));\n-      emit_insn (gen_rtx_SET (VOIDmode, dest,\n-\t\t\t      gen_rtx_LO_SUM (Pmode, dest, low)));\n+      emit_insn (gen_rtx_SET (dest, gen_rtx_LO_SUM (Pmode, dest, low)));\n     }\n   else\n     {\n@@ -18644,7 +18638,7 @@ mips_expand_vselect (rtx target, rtx op0,\n \n   x = gen_rtx_PARALLEL (VOIDmode, gen_rtvec_v (nelt, rperm));\n   x = gen_rtx_VEC_SELECT (GET_MODE (target), op0, x);\n-  x = gen_rtx_SET (VOIDmode, target, x);\n+  x = gen_rtx_SET (target, x);\n \n   insn = emit_insn (x);\n   if (recog_memoized (insn) < 0)\n@@ -18765,14 +18759,14 @@ mips_expand_vpc_loongson_pshufh (struct expand_vec_perm_d *d)\n       merge = force_reg (V4HImode, merge);\n \n       x = gen_rtx_AND (V4HImode, merge, t1);\n-      emit_insn (gen_rtx_SET (VOIDmode, t1, x));\n+      emit_insn (gen_rtx_SET (t1, x));\n \n       x = gen_rtx_NOT (V4HImode, merge);\n       x = gen_rtx_AND (V4HImode, x, t0);\n-      emit_insn (gen_rtx_SET (VOIDmode, t0, x));\n+      emit_insn (gen_rtx_SET (t0, x));\n \n       x = gen_rtx_IOR (V4HImode, t0, t1);\n-      emit_insn (gen_rtx_SET (VOIDmode, d->target, x));\n+      emit_insn (gen_rtx_SET (d->target, x));\n     }\n \n   return true;\n@@ -19154,7 +19148,7 @@ mips_expand_vector_init (rtx target, rtx vals)\n       rtx op0 = force_reg (imode, XVECEXP (vals, 0, 0));\n       rtx op1 = force_reg (imode, XVECEXP (vals, 0, 1));\n       x = gen_rtx_VEC_CONCAT (vmode, op0, op1);\n-      emit_insn (gen_rtx_SET (VOIDmode, target, x));\n+      emit_insn (gen_rtx_SET (target, x));\n       return;\n     }\n \n@@ -19266,14 +19260,14 @@ mips_expand_vec_minmax (rtx target, rtx op0, rtx op1,\n   emit_insn (cmp (tc, op0, op1));\n \n   x = gen_rtx_AND (vmode, tc, (min_p ? op1 : op0));\n-  emit_insn (gen_rtx_SET (VOIDmode, t0, x));\n+  emit_insn (gen_rtx_SET (t0, x));\n \n   x = gen_rtx_NOT (vmode, tc);\n   x = gen_rtx_AND (vmode, x, (min_p ? op0 : op1));\n-  emit_insn (gen_rtx_SET (VOIDmode, t1, x));\n+  emit_insn (gen_rtx_SET (t1, x));\n \n   x = gen_rtx_IOR (vmode, t0, t1);\n-  emit_insn (gen_rtx_SET (VOIDmode, target, x));\n+  emit_insn (gen_rtx_SET (target, x));\n }\n \n /* Implement HARD_REGNO_CALLER_SAVE_MODE.  */"}, {"sha": "76f210877cc6be5275c5934c5b2ff35de7ef20b7", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -3877,8 +3877,8 @@\n       emit_jump_insn (gen_cbranchdf4 (test, operands[1], reg1, label1));\n \n       emit_insn (gen_fix_truncdfsi2 (operands[0], operands[1]));\n-      emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n-\t\t\t\t   gen_rtx_LABEL_REF (VOIDmode, label2)));\n+      emit_jump_insn (gen_rtx_SET (pc_rtx,\n+                                   gen_rtx_LABEL_REF (VOIDmode, label2)));\n       emit_barrier ();\n \n       emit_label (label1);\n@@ -3921,8 +3921,7 @@\n   emit_jump_insn (gen_cbranchdf4 (test, operands[1], reg1, label1));\n \n   emit_insn (gen_fix_truncdfdi2 (operands[0], operands[1]));\n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n-\t\t\t       gen_rtx_LABEL_REF (VOIDmode, label2)));\n+  emit_jump_insn (gen_rtx_SET (pc_rtx, gen_rtx_LABEL_REF (VOIDmode, label2)));\n   emit_barrier ();\n \n   emit_label (label1);\n@@ -3964,8 +3963,7 @@\n   emit_jump_insn (gen_cbranchsf4 (test, operands[1], reg1, label1));\n \n   emit_insn (gen_fix_truncsfsi2 (operands[0], operands[1]));\n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n-\t\t\t       gen_rtx_LABEL_REF (VOIDmode, label2)));\n+  emit_jump_insn (gen_rtx_SET (pc_rtx, gen_rtx_LABEL_REF (VOIDmode, label2)));\n   emit_barrier ();\n \n   emit_label (label1);\n@@ -4007,8 +4005,7 @@\n   emit_jump_insn (gen_cbranchsf4 (test, operands[1], reg1, label1));\n \n   emit_insn (gen_fix_truncsfdi2 (operands[0], operands[1]));\n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n-\t\t\t       gen_rtx_LABEL_REF (VOIDmode, label2)));\n+  emit_jump_insn (gen_rtx_SET (pc_rtx, gen_rtx_LABEL_REF (VOIDmode, label2)));\n   emit_barrier ();\n \n   emit_label (label1);"}, {"sha": "faedd4331d7fb9273a074f18d3891205186cde46", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2102,8 +2102,7 @@ mmix_expand_prologue (void)\n \t\t\t     tmpreg);\n       RTX_FRAME_RELATED_P (insn) = 1;\n       add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t    gen_rtx_SET (VOIDmode,\n-\t\t\t\t gen_rtx_MEM (DImode,\n+\t\t    gen_rtx_SET (gen_rtx_MEM (DImode,\n \t\t\t\t\t      plus_constant (Pmode,\n \t\t\t\t\t\t\t     stack_pointer_rtx,\n \t\t\t\t\t\t\t     offset)),"}, {"sha": "0c51269eba5907ce1dea950f393dc71aef83ee8b", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -748,7 +748,7 @@ mn10300_gen_multiple_store (unsigned int mask)\n       ++count;\n       x = plus_constant (Pmode, stack_pointer_rtx, count * -4);\n       x = gen_frame_mem (SImode, x);\n-      x = gen_rtx_SET (VOIDmode, x, gen_rtx_REG (SImode, regno));\n+      x = gen_rtx_SET (x, gen_rtx_REG (SImode, regno));\n       elts[count] = F(x);\n \n       /* Remove the register from the mask so that... */\n@@ -761,7 +761,7 @@ mn10300_gen_multiple_store (unsigned int mask)\n \n   /* Create the instruction that updates the stack pointer.  */\n   x = plus_constant (Pmode, stack_pointer_rtx, count * -4);\n-  x = gen_rtx_SET (VOIDmode, stack_pointer_rtx, x);\n+  x = gen_rtx_SET (stack_pointer_rtx, x);\n   elts[0] = F(x);\n \n   /* We need one PARALLEL element to update the stack pointer and\n@@ -2904,12 +2904,12 @@ mn10300_split_cbranch (machine_mode cmp_mode, rtx cmp_op, rtx label_ref)\n \n   flags = gen_rtx_REG (cmp_mode, CC_REG);\n   x = gen_rtx_COMPARE (cmp_mode, XEXP (cmp_op, 0), XEXP (cmp_op, 1));\n-  x = gen_rtx_SET (VOIDmode, flags, x);\n+  x = gen_rtx_SET (flags, x);\n   emit_insn (x);\n \n   x = gen_rtx_fmt_ee (GET_CODE (cmp_op), VOIDmode, flags, const0_rtx);\n   x = gen_rtx_IF_THEN_ELSE (VOIDmode, x, label_ref, pc_rtx);\n-  x = gen_rtx_SET (VOIDmode, pc_rtx, x);\n+  x = gen_rtx_SET (pc_rtx, x);\n   emit_jump_insn (x);\n }\n "}, {"sha": "195642746442a95fcb0b49fbba6486792276aa56", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1984,13 +1984,15 @@ msp430_expand_prologue (void)\n       p = emit_insn (gen_grow_and_swap ());\n \n       /* Document the stack decrement...  */\n-      note = F (gen_rtx_SET (Pmode, stack_pointer_rtx,\n+      note = F (gen_rtx_SET (stack_pointer_rtx,\n \t\t\t     gen_rtx_MINUS (Pmode, stack_pointer_rtx, GEN_INT (2))));\n       add_reg_note (p, REG_FRAME_RELATED_EXPR, note);\n \n       /* ...and the establishment of a new location for the return address.  */\n-      note = F (gen_rtx_SET (Pmode, gen_rtx_MEM (Pmode,\n-\t\t\t\t\t\t gen_rtx_PLUS (Pmode, stack_pointer_rtx, GEN_INT (-2))),\n+      note = F (gen_rtx_SET (gen_rtx_MEM (Pmode,\n+\t\t\t\t\t  gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t\t\tstack_pointer_rtx,\n+\t\t\t\t\t\t\tGEN_INT (-2))),\n \t\t\t     pc_rtx));\n       add_reg_note (p, REG_CFA_OFFSET, note);\n       F (p);\n@@ -2015,11 +2017,10 @@ msp430_expand_prologue (void)\n \t    note = gen_rtx_SEQUENCE (VOIDmode, rtvec_alloc (count + 1));\n \n \t    XVECEXP (note, 0, 0)\n-\t      = F (gen_rtx_SET (VOIDmode,\n-\t\t\t     stack_pointer_rtx,\n-\t\t\t     gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t   stack_pointer_rtx,\n-\t\t\t\t\t   GEN_INT (count * (TARGET_LARGE ? -4 : -2)))));\n+\t      = F (gen_rtx_SET (stack_pointer_rtx,\n+\t\t\t\tgen_rtx_PLUS (Pmode,\n+\t\t\t\t\t      stack_pointer_rtx,\n+\t\t\t\t\t      GEN_INT (count * (TARGET_LARGE ? -4 : -2)))));\n \n \t    /* *sp-- = R[i-j] */\n \t    /* sp+N\tR10\n@@ -2036,8 +2037,7 @@ msp430_expand_prologue (void)\n \t\t  addr = stack_pointer_rtx;\n \n \t\tXVECEXP (note, 0, j + 1) =\n-\t\t  F (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  gen_rtx_MEM (Pmode, addr),\n+\t\t  F (gen_rtx_SET (gen_rtx_MEM (Pmode, addr),\n \t\t\t\t  gen_rtx_REG (Pmode, i - j)) );\n \t      }\n "}, {"sha": "9dc52f20de0f6e1cc857ccf446fae9762ce08649", "filename": "gcc/config/nds32/nds32-memory-manipulation.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fnds32%2Fnds32-memory-manipulation.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fnds32%2Fnds32-memory-manipulation.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32-memory-manipulation.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -108,7 +108,7 @@ nds32_expand_load_multiple (int base_regno, int count,\n \t\t\t\t\t       new_addr, offset);\n       reg      = gen_rtx_REG (SImode, base_regno + par_index);\n \n-      XVECEXP (result, 0, par_index) = gen_rtx_SET (VOIDmode, reg, mem);\n+      XVECEXP (result, 0, par_index) = gen_rtx_SET (reg, mem);\n     }\n \n   return result;\n@@ -136,7 +136,7 @@ nds32_expand_store_multiple (int base_regno, int count,\n \t\t\t\t\t       new_addr, offset);\n       reg      = gen_rtx_REG (SImode, base_regno + par_index);\n \n-      XVECEXP (result, 0, par_index) = gen_rtx_SET (VOIDmode, mem, reg);\n+      XVECEXP (result, 0, par_index) = gen_rtx_SET (mem, reg);\n     }\n \n   return result;"}, {"sha": "e617bbf26b57e13b95b287babf29c99847d76bf5", "filename": "gcc/config/nds32/nds32.c", "status": "modified", "additions": 21, "deletions": 25, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fnds32%2Fnds32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fnds32%2Fnds32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -470,7 +470,7 @@ nds32_emit_stack_push_multiple (rtx Rb, rtx Re, rtx En4, bool vaarg_p)\n       mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t\t  offset));\n-      push_rtx = gen_rtx_SET (VOIDmode, mem, reg);\n+      push_rtx = gen_rtx_SET (mem, reg);\n       XVECEXP (parallel_insn, 0, par_index) = push_rtx;\n       RTX_FRAME_RELATED_P (push_rtx) = 1;\n       offset = offset + 4;\n@@ -484,7 +484,7 @@ nds32_emit_stack_push_multiple (rtx Rb, rtx Re, rtx En4, bool vaarg_p)\n       mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t\t  offset));\n-      push_rtx = gen_rtx_SET (VOIDmode, mem, reg);\n+      push_rtx = gen_rtx_SET (mem, reg);\n       XVECEXP (parallel_insn, 0, par_index) = push_rtx;\n       RTX_FRAME_RELATED_P (push_rtx) = 1;\n       offset = offset + 4;\n@@ -496,7 +496,7 @@ nds32_emit_stack_push_multiple (rtx Rb, rtx Re, rtx En4, bool vaarg_p)\n       mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t\t  offset));\n-      push_rtx = gen_rtx_SET (VOIDmode, mem, reg);\n+      push_rtx = gen_rtx_SET (mem, reg);\n       XVECEXP (parallel_insn, 0, par_index) = push_rtx;\n       RTX_FRAME_RELATED_P (push_rtx) = 1;\n       offset = offset + 4;\n@@ -508,7 +508,7 @@ nds32_emit_stack_push_multiple (rtx Rb, rtx Re, rtx En4, bool vaarg_p)\n       mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t\t  offset));\n-      push_rtx = gen_rtx_SET (VOIDmode, mem, reg);\n+      push_rtx = gen_rtx_SET (mem, reg);\n       XVECEXP (parallel_insn, 0, par_index) = push_rtx;\n       RTX_FRAME_RELATED_P (push_rtx) = 1;\n       offset = offset + 4;\n@@ -520,8 +520,7 @@ nds32_emit_stack_push_multiple (rtx Rb, rtx Re, rtx En4, bool vaarg_p)\n   /* We need to re-calculate the offset value again for adjustment.  */\n   offset = -(num_use_regs * 4);\n   adjust_sp_rtx\n-    = gen_rtx_SET (VOIDmode,\n-\t\t   stack_pointer_rtx,\n+    = gen_rtx_SET (stack_pointer_rtx,\n \t\t   plus_constant (Pmode, stack_pointer_rtx, offset));\n   XVECEXP (parallel_insn, 0, par_index) = adjust_sp_rtx;\n   RTX_FRAME_RELATED_P (adjust_sp_rtx) = 1;\n@@ -624,7 +623,7 @@ nds32_emit_stack_pop_multiple (rtx Rb, rtx Re, rtx En4)\n       mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t\t  offset));\n-      pop_rtx = gen_rtx_SET (VOIDmode, reg, mem);\n+      pop_rtx = gen_rtx_SET (reg, mem);\n       XVECEXP (parallel_insn, 0, par_index) = pop_rtx;\n       RTX_FRAME_RELATED_P (pop_rtx) = 1;\n       offset = offset + 4;\n@@ -640,7 +639,7 @@ nds32_emit_stack_pop_multiple (rtx Rb, rtx Re, rtx En4)\n       mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t\t  offset));\n-      pop_rtx = gen_rtx_SET (VOIDmode, reg, mem);\n+      pop_rtx = gen_rtx_SET (reg, mem);\n       XVECEXP (parallel_insn, 0, par_index) = pop_rtx;\n       RTX_FRAME_RELATED_P (pop_rtx) = 1;\n       offset = offset + 4;\n@@ -654,7 +653,7 @@ nds32_emit_stack_pop_multiple (rtx Rb, rtx Re, rtx En4)\n       mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t\t  offset));\n-      pop_rtx = gen_rtx_SET (VOIDmode, reg, mem);\n+      pop_rtx = gen_rtx_SET (reg, mem);\n       XVECEXP (parallel_insn, 0, par_index) = pop_rtx;\n       RTX_FRAME_RELATED_P (pop_rtx) = 1;\n       offset = offset + 4;\n@@ -668,7 +667,7 @@ nds32_emit_stack_pop_multiple (rtx Rb, rtx Re, rtx En4)\n       mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t\t  offset));\n-      pop_rtx = gen_rtx_SET (VOIDmode, reg, mem);\n+      pop_rtx = gen_rtx_SET (reg, mem);\n       XVECEXP (parallel_insn, 0, par_index) = pop_rtx;\n       RTX_FRAME_RELATED_P (pop_rtx) = 1;\n       offset = offset + 4;\n@@ -681,8 +680,7 @@ nds32_emit_stack_pop_multiple (rtx Rb, rtx Re, rtx En4)\n \n   /* The offset value is already in place.  No need to re-calculate it.  */\n   adjust_sp_rtx\n-    = gen_rtx_SET (VOIDmode,\n-\t\t   stack_pointer_rtx,\n+    = gen_rtx_SET (stack_pointer_rtx,\n \t\t   plus_constant (Pmode, stack_pointer_rtx, offset));\n   XVECEXP (parallel_insn, 0, par_index) = adjust_sp_rtx;\n \n@@ -766,7 +764,7 @@ nds32_emit_stack_v3push (rtx Rb,\n       mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t\t  offset));\n-      push_rtx = gen_rtx_SET (VOIDmode, mem, reg);\n+      push_rtx = gen_rtx_SET (mem, reg);\n       XVECEXP (parallel_insn, 0, par_index) = push_rtx;\n       RTX_FRAME_RELATED_P (push_rtx) = 1;\n       offset = offset + 4;\n@@ -778,7 +776,7 @@ nds32_emit_stack_v3push (rtx Rb,\n   mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t      stack_pointer_rtx,\n \t\t\t\t\t      offset));\n-  push_rtx = gen_rtx_SET (VOIDmode, mem, reg);\n+  push_rtx = gen_rtx_SET (mem, reg);\n   XVECEXP (parallel_insn, 0, par_index) = push_rtx;\n   RTX_FRAME_RELATED_P (push_rtx) = 1;\n   offset = offset + 4;\n@@ -788,7 +786,7 @@ nds32_emit_stack_v3push (rtx Rb,\n   mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t      stack_pointer_rtx,\n \t\t\t\t\t      offset));\n-  push_rtx = gen_rtx_SET (VOIDmode, mem, reg);\n+  push_rtx = gen_rtx_SET (mem, reg);\n   XVECEXP (parallel_insn, 0, par_index) = push_rtx;\n   RTX_FRAME_RELATED_P (push_rtx) = 1;\n   offset = offset + 4;\n@@ -798,7 +796,7 @@ nds32_emit_stack_v3push (rtx Rb,\n   mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t      stack_pointer_rtx,\n \t\t\t\t\t      offset));\n-  push_rtx = gen_rtx_SET (VOIDmode, mem, reg);\n+  push_rtx = gen_rtx_SET (mem, reg);\n   XVECEXP (parallel_insn, 0, par_index) = push_rtx;\n   RTX_FRAME_RELATED_P (push_rtx) = 1;\n   offset = offset + 4;\n@@ -809,8 +807,7 @@ nds32_emit_stack_v3push (rtx Rb,\n   /* We need to re-calculate the offset value again for adjustment.  */\n   offset = -(num_use_regs * 4);\n   adjust_sp_rtx\n-    = gen_rtx_SET (VOIDmode,\n-\t\t   stack_pointer_rtx,\n+    = gen_rtx_SET (stack_pointer_rtx,\n \t\t   plus_constant (Pmode,\n \t\t\t\t  stack_pointer_rtx,\n \t\t\t\t  offset - INTVAL (imm8u)));\n@@ -892,7 +889,7 @@ nds32_emit_stack_v3pop (rtx Rb,\n       mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t\t  offset));\n-      pop_rtx = gen_rtx_SET (VOIDmode, reg, mem);\n+      pop_rtx = gen_rtx_SET (reg, mem);\n       XVECEXP (parallel_insn, 0, par_index) = pop_rtx;\n       RTX_FRAME_RELATED_P (pop_rtx) = 1;\n       offset = offset + 4;\n@@ -906,7 +903,7 @@ nds32_emit_stack_v3pop (rtx Rb,\n   mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t      stack_pointer_rtx,\n \t\t\t\t\t      offset));\n-  pop_rtx = gen_rtx_SET (VOIDmode, reg, mem);\n+  pop_rtx = gen_rtx_SET (reg, mem);\n   XVECEXP (parallel_insn, 0, par_index) = pop_rtx;\n   RTX_FRAME_RELATED_P (pop_rtx) = 1;\n   offset = offset + 4;\n@@ -918,7 +915,7 @@ nds32_emit_stack_v3pop (rtx Rb,\n   mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t      stack_pointer_rtx,\n \t\t\t\t\t      offset));\n-  pop_rtx = gen_rtx_SET (VOIDmode, reg, mem);\n+  pop_rtx = gen_rtx_SET (reg, mem);\n   XVECEXP (parallel_insn, 0, par_index) = pop_rtx;\n   RTX_FRAME_RELATED_P (pop_rtx) = 1;\n   offset = offset + 4;\n@@ -930,7 +927,7 @@ nds32_emit_stack_v3pop (rtx Rb,\n   mem = gen_frame_mem (SImode, plus_constant (Pmode,\n \t\t\t\t\t      stack_pointer_rtx,\n \t\t\t\t\t      offset));\n-  pop_rtx = gen_rtx_SET (VOIDmode, reg, mem);\n+  pop_rtx = gen_rtx_SET (reg, mem);\n   XVECEXP (parallel_insn, 0, par_index) = pop_rtx;\n   RTX_FRAME_RELATED_P (pop_rtx) = 1;\n   offset = offset + 4;\n@@ -941,8 +938,7 @@ nds32_emit_stack_v3pop (rtx Rb,\n \n   /* The offset value is already in place.  No need to re-calculate it.  */\n   adjust_sp_rtx\n-    = gen_rtx_SET (VOIDmode,\n-\t\t   stack_pointer_rtx,\n+    = gen_rtx_SET (stack_pointer_rtx,\n \t\t   plus_constant (Pmode,\n \t\t\t\t  stack_pointer_rtx,\n \t\t\t\t  offset + INTVAL (imm8u)));\n@@ -1019,7 +1015,7 @@ nds32_force_addi_stack_int (int full_value)\n \t  rtx set_rtx;\n \n \t  plus_rtx = plus_constant (Pmode, stack_pointer_rtx, full_value);\n-\t  set_rtx = gen_rtx_SET (VOIDmode, stack_pointer_rtx, plus_rtx);\n+\t  set_rtx = gen_rtx_SET (stack_pointer_rtx, plus_rtx);\n \t  add_reg_note (sp_adjust_insn, REG_FRAME_RELATED_EXPR, set_rtx);\n \n \t  RTX_FRAME_RELATED_P (sp_adjust_insn) = 1;"}, {"sha": "487127b9a8af698ab70b2b7c06754422efa24530", "filename": "gcc/config/nds32/nds32.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fnds32%2Fnds32.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fnds32%2Fnds32.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnds32%2Fnds32.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -889,9 +889,8 @@\n         }\n       else\n \t/* This emit_insn will create corresponding 'slt/slts' insturction.  */\n-\temit_insn (gen_rtx_SET (VOIDmode, tmp,\n-\t\t\t\tgen_rtx_fmt_ee (new_code, SImode,\n-\t\t\t\t\t\tcmp_op0, cmp_op1)));\n+\temit_insn (gen_rtx_SET (tmp, gen_rtx_fmt_ee (new_code, SImode,\n+\t\t\t\t\t\t     cmp_op0, cmp_op1)));\n \n       /* Change comparison semantic into (eq X 0) or (ne X 0) behavior\n          so that cmovz or cmovn will be matched later."}, {"sha": "d83c393ed604e8be1b291de1fafbdee001d55a4d", "filename": "gcc/config/nios2/nios2.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fnios2%2Fnios2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fnios2%2Fnios2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -566,7 +566,7 @@ nios2_expand_prologue (void)\n   if (sp_offset)\n     {\n       rtx sp_adjust\n-\t= gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t= gen_rtx_SET (stack_pointer_rtx,\n \t\t       plus_constant (Pmode, stack_pointer_rtx, sp_offset));\n       if (SMALL_INT (sp_offset))\n \tinsn = emit_insn (sp_adjust);\n@@ -632,7 +632,7 @@ nios2_expand_epilogue (bool sibcall_p)\n       emit_move_insn (tmp, gen_int_mode (cfun->machine->save_regs_offset,\n \t\t\t\t\t Pmode));\n       insn = emit_insn (gen_add2_insn (stack_pointer_rtx, tmp));\n-      cfa_adj = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+      cfa_adj = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t     plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t    cfun->machine->save_regs_offset));\n       add_reg_note (insn, REG_CFA_ADJUST_CFA, cfa_adj);\n@@ -659,7 +659,7 @@ nios2_expand_epilogue (bool sibcall_p)\n     {\n       insn = emit_insn (gen_add2_insn (stack_pointer_rtx,\n \t\t\t\t       gen_int_mode (sp_adjust, Pmode)));\n-      cfa_adj = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+      cfa_adj = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t     plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t    sp_adjust));\n       add_reg_note (insn, REG_CFA_ADJUST_CFA, cfa_adj);\n@@ -1978,7 +1978,7 @@ nios2_adjust_call_address (rtx *call_op, rtx reg)\n       if (!reg)\n \treg = gen_reg_rtx (Pmode);\n       addr = nios2_load_pic_address (addr, UNSPEC_PIC_CALL_SYM, tmp);\n-      emit_insn (gen_rtx_SET (VOIDmode, reg, addr));\n+      emit_insn (gen_rtx_SET (reg, addr));\n       *call_op = reg;\n     }\n }\n@@ -2711,7 +2711,7 @@ nios2_expand_custom_builtin (tree exp, unsigned int index, rtx target)\n     unspec_args[argno] = const0_rtx;\n \n   insn = (has_target_p\n-\t  ? gen_rtx_SET (VOIDmode, target,\n+\t  ? gen_rtx_SET (target,\n \t\t\t gen_rtx_UNSPEC_VOLATILE (tmode,\n \t\t\t\t\t\t  gen_rtvec_v (3, unspec_args),\n \t\t\t\t\t\t  UNSPECV_CUSTOM_XNXX))"}, {"sha": "a434bde73a32e69f80b1dfaad31edd770c7eb44e", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -842,7 +842,7 @@ nvptx_expand_call (rtx retval, rtx address)\n     {\n       if (!nvptx_register_operand (retval, GET_MODE (retval)))\n \ttmp_retval = gen_reg_rtx (GET_MODE (retval));\n-      t = gen_rtx_SET (VOIDmode, tmp_retval, t);\n+      t = gen_rtx_SET (tmp_retval, t);\n     }\n   XVECEXP (pat, 0, 0) = t;\n   if (!REG_P (callee)\n@@ -1061,7 +1061,7 @@ nvptx_expand_compare (rtx compare)\n   rtx pred = gen_reg_rtx (BImode);\n   rtx cmp = gen_rtx_fmt_ee (GET_CODE (compare), BImode,\n \t\t\t    XEXP (compare, 0), XEXP (compare, 1));\n-  emit_insn (gen_rtx_SET (VOIDmode, pred, cmp));\n+  emit_insn (gen_rtx_SET (pred, cmp));\n   return gen_rtx_NE (BImode, pred, const0_rtx);\n }\n \n@@ -1101,9 +1101,8 @@ nvptx_maybe_convert_symbolic_operand (rtx orig_op)\n \t  : as == ADDR_SPACE_CONST ? UNSPEC_FROM_CONST\n \t  : UNSPEC_FROM_PARAM);\n   rtx dest = gen_reg_rtx (Pmode);\n-  emit_insn (gen_rtx_SET (VOIDmode, dest,\n-\t\t\t  gen_rtx_UNSPEC (Pmode, gen_rtvec (1, orig_op),\n-\t\t\t\t\t  code)));\n+  emit_insn (gen_rtx_SET (dest, gen_rtx_UNSPEC (Pmode, gen_rtvec (1, orig_op),\n+\t\t\t\t\t\tcode)));\n   return dest;\n }\n \f\n@@ -1956,7 +1955,7 @@ nvptx_reorg (void)\n \t      else\n \t\tcode = TRUNCATE;\n \n-\t      rtx pat = gen_rtx_SET (VOIDmode, new_reg,\n+\t      rtx pat = gen_rtx_SET (new_reg,\n \t\t\t\t     gen_rtx_fmt_e (code, outer_mode, inner));\n \t      emit_insn_before (pat, insn);\n \t    }\n@@ -1970,7 +1969,7 @@ nvptx_reorg (void)\n \t      else\n \t\tcode = ZERO_EXTEND;\n \n-\t      rtx pat = gen_rtx_SET (VOIDmode, inner,\n+\t      rtx pat = gen_rtx_SET (inner,\n \t\t\t\t     gen_rtx_fmt_e (code, inner_mode, new_reg));\n \t      emit_insn_after (pat, insn);\n \t    }"}, {"sha": "42ead8fed9520a4eeaf3a21cbc0c738c067df9fd", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 24, "deletions": 30, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -806,7 +806,7 @@ legitimize_pic_address (rtx orig, machine_mode mode, rtx reg)\n \t So instead we just emit the raw set, which avoids the movXX\n \t expanders completely.  */\n       mark_reg_pointer (reg, BITS_PER_UNIT);\n-      insn = emit_insn (gen_rtx_SET (VOIDmode, reg, orig));\n+      insn = emit_insn (gen_rtx_SET (reg, orig));\n \n       /* Put a REG_EQUAL note on this insn, so that it can be optimized.  */\n       add_reg_note (insn, REG_EQUAL, orig);\n@@ -1699,7 +1699,7 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t}\n       else\n \temit_move_insn (scratch_reg, XEXP (operand1, 0));\n-      emit_insn (gen_rtx_SET (VOIDmode, operand0,\n+      emit_insn (gen_rtx_SET (operand0,\n \t\t\t      replace_equiv_address (operand1, scratch_reg)));\n       return 1;\n     }\n@@ -1735,8 +1735,7 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t}\n       else\n \temit_move_insn (scratch_reg, XEXP (operand0, 0));\n-      emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t      replace_equiv_address (operand0, scratch_reg),\n+      emit_insn (gen_rtx_SET (replace_equiv_address (operand0, scratch_reg),\n \t\t\t      operand1));\n       return 1;\n     }\n@@ -1753,7 +1752,7 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \n       if (operand1 == CONST0_RTX (mode))\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, operand0, operand1));\n+\t  emit_insn (gen_rtx_SET (operand0, operand1));\n \t  return 1;\n \t}\n \n@@ -1770,7 +1769,7 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n       pa_emit_move_sequence (xoperands, Pmode, 0);\n \n       /* Now load the destination register.  */\n-      emit_insn (gen_rtx_SET (mode, operand0,\n+      emit_insn (gen_rtx_SET (operand0,\n \t\t\t      replace_equiv_address (const_mem, scratch_reg)));\n       return 1;\n     }\n@@ -1892,7 +1891,7 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t\t}\n \t    }\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode, operand0, operand1));\n+\t  emit_insn (gen_rtx_SET (operand0, operand1));\n \t  return 1;\n \t}\n     }\n@@ -1903,14 +1902,14 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t{\n \t  rtx temp = gen_reg_rtx (DFmode);\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode, temp, operand1));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, operand0, temp));\n+\t  emit_insn (gen_rtx_SET (temp, operand1));\n+\t  emit_insn (gen_rtx_SET (operand0, temp));\n \t  return 1;\n \t}\n       if (register_operand (operand1, mode) || operand1 == CONST0_RTX (mode))\n \t{\n \t  /* Run this case quickly.  */\n-\t  emit_insn (gen_rtx_SET (VOIDmode, operand0, operand1));\n+\t  emit_insn (gen_rtx_SET (operand0, operand1));\n \t  return 1;\n \t}\n       if (! (reload_in_progress || reload_completed))\n@@ -2077,15 +2076,12 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t\tmark_reg_pointer (temp, BITS_PER_UNIT);\n \n \t      if (ishighonly)\n-\t\tset = gen_rtx_SET (mode, operand0, temp);\n+\t\tset = gen_rtx_SET (operand0, temp);\n \t      else\n-\t\tset = gen_rtx_SET (VOIDmode,\n-\t\t\t\t   operand0,\n+\t\tset = gen_rtx_SET (operand0,\n \t\t\t\t   gen_rtx_LO_SUM (mode, temp, operand1));\n \n-\t      emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t      temp,\n-\t\t\t\t      gen_rtx_HIGH (mode, operand1)));\n+\t      emit_insn (gen_rtx_SET (temp, gen_rtx_HIGH (mode, operand1)));\n \t      emit_insn (set);\n \n \t    }\n@@ -2181,13 +2177,12 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \n \t      low = value - high;\n \n-\t      emit_insn (gen_rtx_SET (VOIDmode, temp, GEN_INT (high)));\n+\t      emit_insn (gen_rtx_SET (temp, GEN_INT (high)));\n \t      operands[1] = gen_rtx_PLUS (mode, temp, GEN_INT (low));\n \t    }\n \t  else\n \t    {\n-\t      emit_insn (gen_rtx_SET (VOIDmode, temp,\n-\t\t\t\t      gen_rtx_HIGH (mode, operand1)));\n+\t      emit_insn (gen_rtx_SET (temp, gen_rtx_HIGH (mode, operand1)));\n \t      operands[1] = gen_rtx_LO_SUM (mode, temp, operand1);\n \t    }\n \n@@ -2209,7 +2204,7 @@ pa_emit_move_sequence (rtx *operands, machine_mode mode, rtx scratch_reg)\n \t\t{\n \t\t  operand1 = GEN_INT (insv);\n \n-\t\t  emit_insn (gen_rtx_SET (VOIDmode, temp,\n+\t\t  emit_insn (gen_rtx_SET (temp,\n \t\t\t\t\t  gen_rtx_HIGH (mode, operand1)));\n \t\t  emit_move_insn (temp, gen_rtx_LO_SUM (mode, temp, operand1));\n \t\t  if (mode == DImode)\n@@ -3560,7 +3555,7 @@ store_reg (int reg, HOST_WIDE_INT disp, int base)\n       if (DO_FRAME_NOTES)\n \t{\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\tgen_rtx_SET (VOIDmode, tmpreg,\n+\t\t\tgen_rtx_SET (tmpreg,\n \t\t\t\t     gen_rtx_PLUS (Pmode, basereg, delta)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \t}\n@@ -3578,8 +3573,7 @@ store_reg (int reg, HOST_WIDE_INT disp, int base)\n       insn = emit_move_insn (dest, src);\n       if (DO_FRAME_NOTES)\n \tadd_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t      gen_rtx_SET (VOIDmode,\n-\t\t\t\t   gen_rtx_MEM (word_mode,\n+\t\t      gen_rtx_SET (gen_rtx_MEM (word_mode,\n \t\t\t\t\t\tgen_rtx_PLUS (word_mode,\n \t\t\t\t\t\t\t      basereg,\n \t\t\t\t\t\t\t      delta)),\n@@ -3646,7 +3640,7 @@ set_reg_plus_d (int reg, int base, HOST_WIDE_INT disp, int note)\n \t\t\t     gen_rtx_PLUS (Pmode, tmpreg, basereg));\n       if (DO_FRAME_NOTES)\n \tadd_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t      gen_rtx_SET (VOIDmode, tmpreg,\n+\t\t      gen_rtx_SET (tmpreg,\n \t\t\t\t   gen_rtx_PLUS (Pmode, basereg, delta)));\n     }\n   else\n@@ -4078,7 +4072,7 @@ pa_expand_prologue (void)\n \t\t\t\t\t     plus_constant (Pmode, base,\n \t\t\t\t\t\t\t    offset));\n \t\t      add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\t\t    gen_rtx_SET (VOIDmode, mem, reg));\n+\t\t\t\t    gen_rtx_SET (mem, reg));\n \t\t    }\n \t\t  else\n \t\t    {\n@@ -4090,8 +4084,8 @@ pa_expand_prologue (void)\n \t\t\t\t\t\t\t     offset + 4));\n \t\t      rtx regl = gen_rtx_REG (SFmode, i);\n \t\t      rtx regr = gen_rtx_REG (SFmode, i + 1);\n-\t\t      rtx setl = gen_rtx_SET (VOIDmode, meml, regl);\n-\t\t      rtx setr = gen_rtx_SET (VOIDmode, memr, regr);\n+\t\t      rtx setl = gen_rtx_SET (meml, regl);\n+\t\t      rtx setr = gen_rtx_SET (memr, regr);\n \t\t      rtvec vec;\n \n \t\t      RTX_FRAME_RELATED_P (setl) = 1;\n@@ -4673,10 +4667,10 @@ pa_emit_bcond_fp (rtx operands[])\n   rtx operand1 = operands[2];\n   rtx label = operands[3];\n \n-  emit_insn (gen_rtx_SET (VOIDmode, gen_rtx_REG (CCFPmode, 0),\n+  emit_insn (gen_rtx_SET (gen_rtx_REG (CCFPmode, 0),\n \t\t          gen_rtx_fmt_ee (code, CCFPmode, operand0, operand1)));\n \n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+  emit_jump_insn (gen_rtx_SET (pc_rtx,\n \t\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode,\n \t\t\t\t\t\t     gen_rtx_fmt_ee (NE,\n \t\t\t\t\t\t\t      VOIDmode,\n@@ -5768,7 +5762,7 @@ pa_emit_hpdiv_const (rtx *operands, int unsignedp)\n       emit\n \t(gen_rtx_PARALLEL\n \t (VOIDmode,\n-\t  gen_rtvec (6, gen_rtx_SET (VOIDmode, gen_rtx_REG (SImode, 29),\n+\t  gen_rtvec (6, gen_rtx_SET (gen_rtx_REG (SImode, 29),\n \t\t\t\t     gen_rtx_fmt_ee (unsignedp ? UDIV : DIV,\n \t\t\t\t\t\t     SImode,\n \t\t\t\t\t\t     gen_rtx_REG (SImode, 26),"}, {"sha": "0e9b2f6feee928f288c9901791fa85dfb23e3977", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2163,7 +2163,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -2180,7 +2180,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -2197,7 +2197,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -2879,7 +2879,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -2896,7 +2896,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -3039,7 +3039,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -3056,7 +3056,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -3341,7 +3341,7 @@\n     operands[7] = addr;\n   else\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[7], addr));\n+      emit_insn (gen_rtx_SET (operands[7], addr));\n       operands[0] = replace_equiv_address (operands[0], operands[7]);\n     }\n \n@@ -3350,7 +3350,7 @@\n     operands[8] = addr;\n   else\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[8], addr));\n+      emit_insn (gen_rtx_SET (operands[8], addr));\n       operands[1] = replace_equiv_address (operands[1], operands[8]);\n     }\n }\")\n@@ -3529,7 +3529,7 @@\n     operands[7] = addr;\n   else\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[7], addr));\n+      emit_insn (gen_rtx_SET (operands[7], addr));\n       operands[0] = replace_equiv_address (operands[0], operands[7]);\n     }\n \n@@ -3538,7 +3538,7 @@\n     operands[8] = addr;\n   else\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[8], addr));\n+      emit_insn (gen_rtx_SET (operands[8], addr));\n       operands[1] = replace_equiv_address (operands[1], operands[8]);\n     }\n }\")\n@@ -3655,7 +3655,7 @@\n     operands[4] = addr;\n   else\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[4], addr));\n+      emit_insn (gen_rtx_SET (operands[4], addr));\n       operands[0] = replace_equiv_address (operands[0], operands[4]);\n     }\n }\")\n@@ -3769,7 +3769,7 @@\n     operands[4] = addr;\n   else\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[4], addr));\n+      emit_insn (gen_rtx_SET (operands[4], addr));\n       operands[0] = replace_equiv_address (operands[0], operands[4]);\n     }\n }\")\n@@ -3810,7 +3810,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -3827,7 +3827,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -3844,7 +3844,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -4083,7 +4083,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -4100,7 +4100,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -4117,7 +4117,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -4361,7 +4361,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -4378,7 +4378,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -4395,7 +4395,7 @@\n     DONE;\n \n   /* We don't want the clobber emitted, so handle this ourselves.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n   DONE;\n }\")\n \n@@ -5161,7 +5161,7 @@\n     }\n   else if (pa_cint_ok_for_move (-intval))\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[4], GEN_INT (-intval)));\n+      emit_insn (gen_rtx_SET (operands[4], GEN_INT (-intval)));\n       emit_insn (gen_subsi3 (operands[0], operands[1], operands[4]));\n       DONE;\n     }"}, {"sha": "0e4c22789743b04db9b5859563a444a0faae250f", "filename": "gcc/config/rl78/rl78.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frl78%2Frl78.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frl78%2Frl78.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frl78%2Frl78.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1367,8 +1367,8 @@ rl78_expand_prologue (void)\n \t  emit_insn (gen_subhi3 (ax, ax, GEN_INT (fs)));\n \t  insn = F (emit_move_insn (sp, ax));\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\tgen_rtx_SET (SImode, sp,\n-\t\t\t\t     gen_rtx_PLUS (HImode, sp, GEN_INT (-fs))));\n+\t\t\tgen_rtx_SET (sp, gen_rtx_PLUS (HImode, sp,\n+\t\t\t\t\t\t       GEN_INT (-fs))));\n \t}\n       else\n \t{"}, {"sha": "deca396bcec35f9601dedf9156c94072007a0404", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -262,7 +262,7 @@\n     RTVEC_ELT (v, i) = constm1_rtx;\n \n   emit_insn (gen_vec_initv4si (dest, gen_rtx_PARALLEL (mode, v)));\n-  emit_insn (gen_rtx_SET (VOIDmode, dest, gen_rtx_ASHIFT (mode, dest, dest)));\n+  emit_insn (gen_rtx_SET (dest, gen_rtx_ASHIFT (mode, dest, dest)));\n   DONE;\n })\n \n@@ -887,7 +887,7 @@\n     }\n \n   x = gen_rtx_VEC_SELECT (V16QImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n \n@@ -947,7 +947,7 @@\n     }\n \n   x = gen_rtx_VEC_SELECT (V8HImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n \n@@ -1001,7 +1001,7 @@\n     }\n \n   x = gen_rtx_VEC_SELECT (V4SImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n \n@@ -1076,7 +1076,7 @@\n     }\n \n   x = gen_rtx_VEC_SELECT (V16QImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n \n@@ -1136,7 +1136,7 @@\n     }\n \n   x = gen_rtx_VEC_SELECT (V8HImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n \n@@ -1190,7 +1190,7 @@\n     }\n \n   x = gen_rtx_VEC_SELECT (V4SImode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n \n@@ -1700,7 +1700,7 @@\n   v = gen_rtvec (1, operands[2]);\n   x = gen_rtx_VEC_SELECT (QImode, operands[1], gen_rtx_PARALLEL (VOIDmode, v));\n   x = gen_rtx_VEC_DUPLICATE (V16QImode, x);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n \n@@ -1748,7 +1748,7 @@\n   v = gen_rtvec (1, operands[2]);\n   x = gen_rtx_VEC_SELECT (HImode, operands[1], gen_rtx_PARALLEL (VOIDmode, v));\n   x = gen_rtx_VEC_DUPLICATE (V8HImode, x);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n \n@@ -1796,7 +1796,7 @@\n   v = gen_rtvec (1, operands[2]);\n   x = gen_rtx_VEC_SELECT (SImode, operands[1], gen_rtx_PARALLEL (VOIDmode, v));\n   x = gen_rtx_VEC_DUPLICATE (V4SImode, x);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n \n@@ -1844,7 +1844,7 @@\n   v = gen_rtvec (1, operands[2]);\n   x = gen_rtx_VEC_SELECT (SFmode, operands[1], gen_rtx_PARALLEL (VOIDmode, v));\n   x = gen_rtx_VEC_DUPLICATE (V4SFmode, x);\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n \n@@ -2318,7 +2318,7 @@\n       constv = force_reg (V16QImode, constv);\n       vperm = gen_rtx_UNSPEC (V16QImode, gen_rtvec (3, mask, mask, constv),\n                               UNSPEC_VPERM);\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], vperm));\n+      emit_insn (gen_rtx_SET (operands[0], vperm));\n     }\n   DONE;\n })\n@@ -2350,7 +2350,7 @@\n       constv = force_reg (V16QImode, constv);\n       vperm = gen_rtx_UNSPEC (V16QImode, gen_rtvec (3, mask, mask, constv),\n                               UNSPEC_VPERM);\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], vperm));\n+      emit_insn (gen_rtx_SET (operands[0], vperm));\n     }\n   DONE;\n })\n@@ -2376,8 +2376,7 @@\n \n   addr = XEXP (operands[1], 0);\n   temp = gen_reg_rtx (GET_MODE (addr));\n-  emit_insn (gen_rtx_SET (VOIDmode, temp, \n-\t\t\t  gen_rtx_NEG (GET_MODE (addr), addr)));\n+  emit_insn (gen_rtx_SET (temp, gen_rtx_NEG (GET_MODE (addr), addr)));\n   emit_insn (gen_altivec_lvsr (operands[0], \n \t\t\t       replace_equiv_address (operands[1], temp)));\n   DONE;"}, {"sha": "7c59ac85bf85a8c4c69292a58c188b68c58ea474", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 128, "deletions": 153, "changes": 281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -5780,14 +5780,13 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n       if ((int_vector_p || TARGET_VSX) && all_const_zero)\n \t{\n \t  /* Zero register.  */\n-\t  emit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t\t  gen_rtx_XOR (mode, target, target)));\n+\t  emit_insn (gen_rtx_SET (target, gen_rtx_XOR (mode, target, target)));\n \t  return;\n \t}\n       else if (int_vector_p && easy_vector_constant (const_vec, mode))\n \t{\n \t  /* Splat immediate.  */\n-\t  emit_insn (gen_rtx_SET (VOIDmode, target, const_vec));\n+\t  emit_insn (gen_rtx_SET (target, const_vec));\n \t  return;\n \t}\n       else\n@@ -5872,14 +5871,12 @@ rs6000_expand_vector_init (rtx target, rtx vals)\n \t\t\t  gen_rtvec (1, const0_rtx), UNSPEC_LVE);\n       emit_insn (gen_rtx_PARALLEL (VOIDmode,\n \t\t\t\t   gen_rtvec (2,\n-\t\t\t\t\t      gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t\t\t   target, mem),\n+\t\t\t\t\t      gen_rtx_SET (target, mem),\n \t\t\t\t\t      x)));\n       x = gen_rtx_VEC_SELECT (inner_mode, target,\n \t\t\t      gen_rtx_PARALLEL (VOIDmode,\n \t\t\t\t\t\tgen_rtvec (1, const0_rtx)));\n-      emit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t      gen_rtx_VEC_DUPLICATE (mode, x)));\n+      emit_insn (gen_rtx_SET (target, gen_rtx_VEC_DUPLICATE (mode, x)));\n       return;\n     }\n \n@@ -5943,8 +5940,7 @@ rs6000_expand_vector_set (rtx target, rtx val, int elt)\n \t\t      gen_rtvec (1, const0_rtx), UNSPEC_LVE);\n   emit_insn (gen_rtx_PARALLEL (VOIDmode,\n \t\t\t       gen_rtvec (2,\n-\t\t\t\t\t  gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t\t       reg, mem),\n+\t\t\t\t\t  gen_rtx_SET (reg, mem),\n \t\t\t\t\t  x)));\n \n   /* Linear sequence.  */\n@@ -5973,14 +5969,14 @@ rs6000_expand_vector_set (rtx target, rtx val, int elt)\n \t\t  ? gen_rtx_IOR (V16QImode, notx, notx)\n \t\t  : gen_rtx_AND (V16QImode, notx, notx));\n       rtx tmp = gen_reg_rtx (V16QImode);\n-      emit_insn (gen_rtx_SET (VOIDmode, tmp, iorx));\n+      emit_insn (gen_rtx_SET (tmp, iorx));\n \n       /* Permute with operands reversed and adjusted selector.  */\n       x = gen_rtx_UNSPEC (mode, gen_rtvec (3, reg, target, tmp),\n \t\t\t  UNSPEC_VPERM);\n     }\n \n-  emit_insn (gen_rtx_SET (VOIDmode, target, x));\n+  emit_insn (gen_rtx_SET (target, x));\n }\n \n /* Extract field ELT from VEC into TARGET.  */\n@@ -6380,7 +6376,7 @@ quad_load_store_p (rtx op0, rtx op1)\n     {\n       fprintf (stderr, \"\\n========== quad_load_store, return %s\\n\",\n \t       ret ? \"true\" : \"false\");\n-      debug_rtx (gen_rtx_SET (VOIDmode, op0, op1));\n+      debug_rtx (gen_rtx_SET (op0, op1));\n     }\n \n   return ret;\n@@ -7293,10 +7289,10 @@ rs6000_legitimize_tls_address_aix (rtx addr, enum tls_model model)\n       set_mem_alias_set (modmem, get_TOC_alias_set ());\n       \n       rtx modreg = gen_reg_rtx (Pmode);\n-      emit_insn (gen_rtx_SET (VOIDmode, modreg, modmem));\n+      emit_insn (gen_rtx_SET (modreg, modmem));\n \n       tmpreg = gen_reg_rtx (Pmode);\n-      emit_insn (gen_rtx_SET (VOIDmode, tmpreg, mem));\n+      emit_insn (gen_rtx_SET (tmpreg, mem));\n \n       dest = gen_reg_rtx (Pmode);\n       if (TARGET_32BIT)\n@@ -7316,7 +7312,7 @@ rs6000_legitimize_tls_address_aix (rtx addr, enum tls_model model)\n \n   /* Load the TOC value into temporary register.  */\n   tmpreg = gen_reg_rtx (Pmode);\n-  emit_insn (gen_rtx_SET (VOIDmode, tmpreg, mem));\n+  emit_insn (gen_rtx_SET (tmpreg, mem));\n   set_unique_reg_note (get_last_insn (), REG_EQUAL,\n \t\t       gen_rtx_MINUS (Pmode, addr, tlsreg));\n \n@@ -7493,8 +7489,7 @@ rs6000_legitimize_tls_address (rtx addr, enum tls_model model)\n \t      else\n \t\tinsn = gen_tls_got_dtprel_32 (tmp2, got, addr);\n \t      emit_insn (insn);\n-\t      insn = gen_rtx_SET (Pmode, dest,\n-\t\t\t\t  gen_rtx_PLUS (Pmode, tmp2, tmp1));\n+\t      insn = gen_rtx_SET (dest, gen_rtx_PLUS (Pmode, tmp2, tmp1));\n \t    }\n \t  emit_insn (insn);\n \t}\n@@ -8145,15 +8140,15 @@ rs6000_emit_set_const (rtx dest, rtx source)\n     {\n     case QImode:\n     case HImode:\n-      emit_insn (gen_rtx_SET (VOIDmode, dest, source));\n+      emit_insn (gen_rtx_SET (dest, source));\n       return true;\n \n     case SImode:\n       temp = !can_create_pseudo_p () ? dest : gen_reg_rtx (SImode);\n \n-      emit_insn (gen_rtx_SET (VOIDmode, copy_rtx (temp),\n+      emit_insn (gen_rtx_SET (copy_rtx (temp),\n \t\t\t      GEN_INT (c & ~(HOST_WIDE_INT) 0xffff)));\n-      emit_insn (gen_rtx_SET (VOIDmode, dest,\n+      emit_insn (gen_rtx_SET (dest,\n \t\t\t      gen_rtx_IOR (SImode, copy_rtx (temp),\n \t\t\t\t\t   GEN_INT (c & 0xffff))));\n       break;\n@@ -8377,8 +8372,8 @@ rs6000_emit_le_vsx_load (rtx dest, rtx source, machine_mode mode)\n   tmp = can_create_pseudo_p () ? gen_reg_rtx_and_attrs (dest) : dest;\n   permute_mem = rs6000_gen_le_vsx_permute (source, mode);\n   permute_reg = rs6000_gen_le_vsx_permute (tmp, mode);\n-  emit_insn (gen_rtx_SET (VOIDmode, tmp, permute_mem));\n-  emit_insn (gen_rtx_SET (VOIDmode, dest, permute_reg));\n+  emit_insn (gen_rtx_SET (tmp, permute_mem));\n+  emit_insn (gen_rtx_SET (dest, permute_reg));\n }\n \n /* Emit a little-endian store to vector memory location DEST from VSX\n@@ -8406,8 +8401,8 @@ rs6000_emit_le_vsx_store (rtx dest, rtx source, machine_mode mode)\n   tmp = can_create_pseudo_p () ? gen_reg_rtx_and_attrs (source) : source;\n   permute_src = rs6000_gen_le_vsx_permute (source, mode);\n   permute_tmp = rs6000_gen_le_vsx_permute (tmp, mode);\n-  emit_insn (gen_rtx_SET (VOIDmode, tmp, permute_src));\n-  emit_insn (gen_rtx_SET (VOIDmode, dest, permute_tmp));\n+  emit_insn (gen_rtx_SET (tmp, permute_src));\n+  emit_insn (gen_rtx_SET (dest, permute_tmp));\n }\n \n /* Emit a sequence representing a little-endian VSX load or store,\n@@ -8761,7 +8756,7 @@ rs6000_emit_move (rtx dest, rtx source, machine_mode mode)\n \t      || GET_CODE (operands[1]) == CONST)\n \t  && small_data_operand (operands[1], mode))\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+\t  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n \t  return;\n \t}\n \n@@ -8813,8 +8808,7 @@ rs6000_emit_move (rtx dest, rtx source, machine_mode mode)\n \t\t  operands[1] = rs6000_machopic_legitimize_pic_address (\n \t\t\t\t  operands[1], mode, operands[0]);\n \t\t  if (operands[0] != operands[1])\n-\t\t    emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t    operands[0], operands[1]));\n+\t\t    emit_insn (gen_rtx_SET (operands[0], operands[1]));\n \t\t  return;\n \t\t}\n #endif\n@@ -8860,7 +8854,7 @@ rs6000_emit_move (rtx dest, rtx source, machine_mode mode)\n \t\trs6000_machopic_legitimize_pic_address (operands[1], mode,\n \t\t\t\t\t\t\toperands[0]);\n \t      if (operands[0] != operands[1])\n-\t\temit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+\t\temit_insn (gen_rtx_SET (operands[0], operands[1]));\n \t      return;\n \t    }\n #endif\n@@ -8913,7 +8907,7 @@ rs6000_emit_move (rtx dest, rtx source, machine_mode mode)\n       break;\n \n     default:\n-      fatal_insn (\"bad move\", gen_rtx_SET (VOIDmode, dest, source));\n+      fatal_insn (\"bad move\", gen_rtx_SET (dest, source));\n     }\n \n   /* Above, we may have called force_const_mem which may have returned\n@@ -8923,7 +8917,7 @@ rs6000_emit_move (rtx dest, rtx source, machine_mode mode)\n     operands[1] = validize_mem (operands[1]);\n \n  emit_set:\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[1]));\n+  emit_insn (gen_rtx_SET (operands[0], operands[1]));\n }\n \n /* Return true if a structure, union or array containing FIELD should be\n@@ -11201,8 +11195,7 @@ setup_incoming_varargs (cumulative_args_t cum, machine_mode mode,\n \t\t\t\t\t       * UNITS_PER_FP_WORD);\n \n       emit_jump_insn\n-\t(gen_rtx_SET (VOIDmode,\n-\t\t      pc_rtx,\n+\t(gen_rtx_SET (pc_rtx,\n \t\t      gen_rtx_IF_THEN_ELSE (VOIDmode,\n \t\t\t\t\t    gen_rtx_NE (VOIDmode, cr1,\n \t\t\t\t\t\t\tconst0_rtx),\n@@ -12428,15 +12421,15 @@ void\n altivec_expand_lvx_be (rtx op0, rtx op1, machine_mode mode, unsigned unspec)\n {\n   rtx tmp = gen_reg_rtx (mode);\n-  rtx load = gen_rtx_SET (VOIDmode, tmp, op1);\n+  rtx load = gen_rtx_SET (tmp, op1);\n   rtx lvx = gen_rtx_UNSPEC (mode, gen_rtvec (1, const0_rtx), unspec);\n   rtx par = gen_rtx_PARALLEL (mode, gen_rtvec (2, load, lvx));\n   rtx sel = swap_selector_for_mode (mode);\n   rtx vperm = gen_rtx_UNSPEC (mode, gen_rtvec (3, tmp, tmp, sel), UNSPEC_VPERM);\n \n   gcc_assert (REG_P (op0));\n   emit_insn (par);\n-  emit_insn (gen_rtx_SET (VOIDmode, op0, vperm));\n+  emit_insn (gen_rtx_SET (op0, vperm));\n }\n \n /* Generate code for a \"stvx\" or \"stvxl\" built-in for a little endian target\n@@ -12446,15 +12439,15 @@ void\n altivec_expand_stvx_be (rtx op0, rtx op1, machine_mode mode, unsigned unspec)\n {\n   rtx tmp = gen_reg_rtx (mode);\n-  rtx store = gen_rtx_SET (VOIDmode, op0, tmp);\n+  rtx store = gen_rtx_SET (op0, tmp);\n   rtx stvx = gen_rtx_UNSPEC (mode, gen_rtvec (1, const0_rtx), unspec);\n   rtx par = gen_rtx_PARALLEL (mode, gen_rtvec (2, store, stvx));\n   rtx sel = swap_selector_for_mode (mode);\n   rtx vperm;\n \n   gcc_assert (REG_P (op1));\n   vperm = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op1, sel), UNSPEC_VPERM);\n-  emit_insn (gen_rtx_SET (VOIDmode, tmp, vperm));\n+  emit_insn (gen_rtx_SET (tmp, vperm));\n   emit_insn (par);\n }\n \n@@ -12471,8 +12464,8 @@ altivec_expand_stvex_be (rtx op0, rtx op1, machine_mode mode, unsigned unspec)\n \n   gcc_assert (REG_P (op1));\n   vperm = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op1, sel), UNSPEC_VPERM);\n-  emit_insn (gen_rtx_SET (VOIDmode, tmp, vperm));\n-  emit_insn (gen_rtx_SET (VOIDmode, op0, stvx));\n+  emit_insn (gen_rtx_SET (tmp, vperm));\n+  emit_insn (gen_rtx_SET (op0, stvx));\n }\n \n static rtx\n@@ -12845,10 +12838,10 @@ htm_expand_builtin (tree exp, rtx target, bool * expandedp)\n \t\t   to start a transaction.  We do this by placing the 1's\n \t\t   complement of CR's EQ bit into TARGET.  */\n \t\trtx scratch = gen_reg_rtx (SImode);\n-\t\temit_insn (gen_rtx_SET (VOIDmode, scratch,\n+\t\temit_insn (gen_rtx_SET (scratch,\n \t\t\t\t\tgen_rtx_EQ (SImode, cr,\n \t\t\t\t\t\t     const0_rtx)));\n-\t\temit_insn (gen_rtx_SET (VOIDmode, target,\n+\t\temit_insn (gen_rtx_SET (target,\n \t\t\t\t\tgen_rtx_XOR (SImode, scratch,\n \t\t\t\t\t\t     GEN_INT (1))));\n \t      }\n@@ -14222,8 +14215,7 @@ rs6000_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n \t  {\n \t    /* For the load case need to negate the address.  */\n \t    op = gen_reg_rtx (GET_MODE (addr));\n-\t    emit_insn (gen_rtx_SET (VOIDmode, op,\n-\t\t\t\t    gen_rtx_NEG (GET_MODE (addr), addr)));\n+\t    emit_insn (gen_rtx_SET (op, gen_rtx_NEG (GET_MODE (addr), addr)));\n \t  }\n \top = gen_rtx_MEM (mode, op);\n \n@@ -17411,9 +17403,9 @@ rs6000_secondary_reload_trace (int line, rtx reg, rtx mem, rtx scratch,\n \t   store_p ? \"store\" : \"load\");\n \n   if (store_p)\n-    set = gen_rtx_SET (VOIDmode, mem, reg);\n+    set = gen_rtx_SET (mem, reg);\n   else\n-    set = gen_rtx_SET (VOIDmode, reg, mem);\n+    set = gen_rtx_SET (reg, mem);\n \n   clobber = gen_rtx_CLOBBER (VOIDmode, scratch);\n   debug_rtx (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, set, clobber)));\n@@ -17505,7 +17497,7 @@ rs6000_secondary_reload_inner (rtx reg, rtx mem, rtx scratch, bool store_p)\n \n       if ((addr_mask & RELOAD_REG_PRE_MODIFY) == 0)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, op0, op1));\n+\t  emit_insn (gen_rtx_SET (op0, op1));\n \t  new_addr = reg;\n \t}\n       break;\n@@ -17522,7 +17514,7 @@ rs6000_secondary_reload_inner (rtx reg, rtx mem, rtx scratch, bool store_p)\n \n \t  else if (GET_CODE (op1) == PLUS)\n \t    {\n-\t      emit_insn (gen_rtx_SET (VOIDmode, scratch, op1));\n+\t      emit_insn (gen_rtx_SET (scratch, op1));\n \t      op_reg = scratch;\n \t    }\n \n@@ -17531,7 +17523,7 @@ rs6000_secondary_reload_inner (rtx reg, rtx mem, rtx scratch, bool store_p)\n \n \t  and_op = gen_rtx_AND (GET_MODE (scratch), op_reg, op1);\n \t  cc_clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_SCRATCH (CCmode));\n-\t  rv = gen_rtvec (2, gen_rtx_SET (VOIDmode, scratch, and_op), cc_clobber);\n+\t  rv = gen_rtvec (2, gen_rtx_SET (scratch, and_op), cc_clobber);\n \t  emit_insn (gen_rtx_PARALLEL (VOIDmode, rv));\n \t  new_addr = scratch;\n \t}\n@@ -17542,7 +17534,7 @@ rs6000_secondary_reload_inner (rtx reg, rtx mem, rtx scratch, bool store_p)\n     case SUBREG:\n       if (!base_reg_operand (addr, GET_MODE (addr)))\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, scratch, addr));\n+\t  emit_insn (gen_rtx_SET (scratch, addr));\n \t  new_addr = scratch;\n \t}\n       break;\n@@ -17559,7 +17551,7 @@ rs6000_secondary_reload_inner (rtx reg, rtx mem, rtx scratch, bool store_p)\n \t{\n \t  if ((addr_mask & RELOAD_REG_INDEXED) == 0)\n \t    {\n-\t      emit_insn (gen_rtx_SET (VOIDmode, scratch, addr));\n+\t      emit_insn (gen_rtx_SET (scratch, addr));\n \t      new_addr = scratch;\n \t    }\n \t}\n@@ -17569,7 +17561,7 @@ rs6000_secondary_reload_inner (rtx reg, rtx mem, rtx scratch, bool store_p)\n \t{\n \t  if ((addr_mask & RELOAD_REG_OFFSET) == 0)\n \t    {\n-\t      emit_insn (gen_rtx_SET (VOIDmode, scratch, addr));\n+\t      emit_insn (gen_rtx_SET (scratch, addr));\n \t      new_addr = scratch;\n \t    }\n \t}\n@@ -17589,7 +17581,7 @@ rs6000_secondary_reload_inner (rtx reg, rtx mem, rtx scratch, bool store_p)\n \t{\n \t  if ((addr_mask & RELOAD_REG_INDEXED) == 0)\n \t    {\n-\t      emit_insn (gen_rtx_SET (VOIDmode, scratch, addr));\n+\t      emit_insn (gen_rtx_SET (scratch, addr));\n \t      new_addr = scratch;\n \t    }\n \t}\n@@ -17599,7 +17591,7 @@ rs6000_secondary_reload_inner (rtx reg, rtx mem, rtx scratch, bool store_p)\n \t{\n \t  if ((addr_mask & RELOAD_REG_OFFSET) == 0)\n \t    {\n-\t      emit_insn (gen_rtx_SET (VOIDmode, scratch, addr));\n+\t      emit_insn (gen_rtx_SET (scratch, addr));\n \t      new_addr = scratch;\n \t    }\n \t}\n@@ -17630,9 +17622,9 @@ rs6000_secondary_reload_inner (rtx reg, rtx mem, rtx scratch, bool store_p)\n \n   /* Now create the move.  */\n   if (store_p)\n-    emit_insn (gen_rtx_SET (VOIDmode, mem, reg));\n+    emit_insn (gen_rtx_SET (mem, reg));\n   else\n-    emit_insn (gen_rtx_SET (VOIDmode, reg, mem));\n+    emit_insn (gen_rtx_SET (reg, mem));\n \n   return;\n }\n@@ -17681,9 +17673,9 @@ rs6000_secondary_reload_gpr (rtx reg, rtx mem, rtx scratch, bool store_p)\n \n   /* Now create the move.  */\n   if (store_p)\n-    emit_insn (gen_rtx_SET (VOIDmode, mem, reg));\n+    emit_insn (gen_rtx_SET (mem, reg));\n   else\n-    emit_insn (gen_rtx_SET (VOIDmode, reg, mem));\n+    emit_insn (gen_rtx_SET (reg, mem));\n \n   return;\n }\n@@ -18248,7 +18240,7 @@ rs6000_output_move_128bit (rtx operands[])\n   if (TARGET_DEBUG_ADDR)\n     {\n       fprintf (stderr, \"\\n===== Bad 128 bit move:\\n\");\n-      debug_rtx (gen_rtx_SET (VOIDmode, dest, src));\n+      debug_rtx (gen_rtx_SET (dest, src));\n     }\n \n   gcc_unreachable ();\n@@ -19561,8 +19553,7 @@ rs6000_generate_compare (rtx cmp, machine_mode mode)\n \t  && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128)\n \temit_insn (gen_rtx_PARALLEL (VOIDmode,\n \t  gen_rtvec (10,\n-\t\t     gen_rtx_SET (VOIDmode,\n-\t\t\t\t  compare_result,\n+\t\t     gen_rtx_SET (compare_result,\n \t\t\t\t  gen_rtx_COMPARE (comp_mode, op0, op1)),\n \t\t     gen_rtx_CLOBBER (VOIDmode, gen_rtx_SCRATCH (DFmode)),\n \t\t     gen_rtx_CLOBBER (VOIDmode, gen_rtx_SCRATCH (DFmode)),\n@@ -19585,7 +19576,7 @@ rs6000_generate_compare (rtx cmp, machine_mode mode)\n \t    emit_insn (gen_stack_protect_testsi (compare_result, op0, op1b));\n \t}\n       else\n-\temit_insn (gen_rtx_SET (VOIDmode, compare_result,\n+\temit_insn (gen_rtx_SET (compare_result,\n \t\t\t\tgen_rtx_COMPARE (comp_mode, op0, op1)));\n     }\n \n@@ -19619,7 +19610,7 @@ rs6000_generate_compare (rtx cmp, machine_mode mode)\n       compare2_rtx = gen_rtx_COMPARE (CCEQmode,\n \t\t\t\t      gen_rtx_IOR (SImode, or1_rtx, or2_rtx),\n \t\t\t\t      const_true_rtx);\n-      emit_insn (gen_rtx_SET (VOIDmode, or_result, compare2_rtx));\n+      emit_insn (gen_rtx_SET (or_result, compare2_rtx));\n \n       compare_result = or_result;\n       code = EQ;\n@@ -19652,9 +19643,9 @@ rs6000_emit_eqne (machine_mode mode, rtx op1, rtx op2, rtx scratch)\n     scratch = gen_reg_rtx (mode);\n \n   if (logical_operand (op2, mode))\n-    emit_insn (gen_rtx_SET (VOIDmode, scratch, gen_rtx_XOR (mode, op1, op2)));\n+    emit_insn (gen_rtx_SET (scratch, gen_rtx_XOR (mode, op1, op2)));\n   else\n-    emit_insn (gen_rtx_SET (VOIDmode, scratch,\n+    emit_insn (gen_rtx_SET (scratch,\n \t\t\t    gen_rtx_PLUS (mode, op1, negate_rtx (mode, op2))));\n \n   return scratch;\n@@ -19702,7 +19693,7 @@ rs6000_emit_sCOND (machine_mode mode, rtx operands[])\n       rev_cond_rtx = gen_rtx_fmt_ee (rs6000_reverse_condition (cc_mode, cond_code),\n \t\t\t\t     SImode, XEXP (condition_rtx, 0), const0_rtx);\n       not_op = gen_rtx_COMPARE (CCEQmode, rev_cond_rtx, const0_rtx);\n-      emit_insn (gen_rtx_SET (VOIDmode, not_result, not_op));\n+      emit_insn (gen_rtx_SET (not_result, not_op));\n       condition_rtx = gen_rtx_EQ (VOIDmode, not_result, const0_rtx);\n     }\n \n@@ -19718,7 +19709,7 @@ rs6000_emit_sCOND (machine_mode mode, rtx operands[])\n   else\n     {\n       PUT_MODE (condition_rtx, SImode);\n-      emit_insn (gen_rtx_SET (VOIDmode, result, condition_rtx));\n+      emit_insn (gen_rtx_SET (result, condition_rtx));\n     }\n }\n \n@@ -19731,7 +19722,7 @@ rs6000_emit_cbranch (machine_mode mode, rtx operands[])\n \n   condition_rtx = rs6000_generate_compare (operands[0], mode);\n   loc_ref = gen_rtx_LABEL_REF (VOIDmode, operands[3]);\n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+  emit_jump_insn (gen_rtx_SET (pc_rtx,\n \t\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode, condition_rtx,\n \t\t\t\t\t\t     loc_ref, pc_rtx)));\n }\n@@ -19915,9 +19906,7 @@ rs6000_emit_vector_compare_inner (enum rtx_code code, rtx op0, rtx op1)\n     case UNEQ:\n     case LTGT:\n       mask = gen_reg_rtx (mode);\n-      emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t      mask,\n-\t\t\t      gen_rtx_fmt_ee (code, mode, op0, op1)));\n+      emit_insn (gen_rtx_SET (mask, gen_rtx_fmt_ee (code, mode, op0, op1)));\n       return mask;\n     }\n \n@@ -20119,8 +20108,7 @@ rs6000_emit_vector_cond_expr (rtx dest, rtx op_true, rtx op_false,\n \n   cond2 = gen_rtx_fmt_ee (NE, cc_mode, gen_lowpart (dest_mode, mask),\n \t\t\t  CONST0_RTX (dest_mode));\n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  dest,\n+  emit_insn (gen_rtx_SET (dest,\n \t\t\t  gen_rtx_IF_THEN_ELSE (dest_mode,\n \t\t\t\t\t\tcond2,\n \t\t\t\t\t\top_true,\n@@ -20222,8 +20210,7 @@ rs6000_emit_cmove (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n   if (! is_against_zero)\n     {\n       temp = gen_reg_rtx (compare_mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, temp,\n-\t\t\t      gen_rtx_MINUS (compare_mode, op0, op1)));\n+      emit_insn (gen_rtx_SET (temp, gen_rtx_MINUS (compare_mode, op0, op1)));\n       op0 = temp;\n       op1 = CONST0_RTX (compare_mode);\n     }\n@@ -20257,19 +20244,19 @@ rs6000_emit_cmove (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n \n     case LE:\n       temp = gen_reg_rtx (compare_mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, temp, gen_rtx_NEG (compare_mode, op0)));\n+      emit_insn (gen_rtx_SET (temp, gen_rtx_NEG (compare_mode, op0)));\n       op0 = temp;\n       break;\n \n     case ORDERED:\n       temp = gen_reg_rtx (compare_mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, temp, gen_rtx_ABS (compare_mode, op0)));\n+      emit_insn (gen_rtx_SET (temp, gen_rtx_ABS (compare_mode, op0)));\n       op0 = temp;\n       break;\n \n     case EQ:\n       temp = gen_reg_rtx (compare_mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, temp,\n+      emit_insn (gen_rtx_SET (temp,\n \t\t\t      gen_rtx_NEG (compare_mode,\n \t\t\t\t\t   gen_rtx_ABS (compare_mode, op0))));\n       op0 = temp;\n@@ -20278,7 +20265,7 @@ rs6000_emit_cmove (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n     case UNGE:\n       /* a UNGE 0 <-> (a GE 0 || -a UNLT 0) */\n       temp = gen_reg_rtx (result_mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, temp,\n+      emit_insn (gen_rtx_SET (temp,\n \t\t\t      gen_rtx_IF_THEN_ELSE (result_mode,\n \t\t\t\t\t\t    gen_rtx_GE (VOIDmode,\n \t\t\t\t\t\t\t\top0, op1),\n@@ -20287,14 +20274,14 @@ rs6000_emit_cmove (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n       true_cond = temp;\n \n       temp = gen_reg_rtx (compare_mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, temp, gen_rtx_NEG (compare_mode, op0)));\n+      emit_insn (gen_rtx_SET (temp, gen_rtx_NEG (compare_mode, op0)));\n       op0 = temp;\n       break;\n \n     case GT:\n       /* a GT 0 <-> (a GE 0 && -a UNLT 0) */\n       temp = gen_reg_rtx (result_mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, temp,\n+      emit_insn (gen_rtx_SET (temp,\n \t\t\t      gen_rtx_IF_THEN_ELSE (result_mode,\n \t\t\t\t\t\t    gen_rtx_GE (VOIDmode,\n \t\t\t\t\t\t\t\top0, op1),\n@@ -20303,15 +20290,15 @@ rs6000_emit_cmove (rtx dest, rtx op, rtx true_cond, rtx false_cond)\n       false_cond = temp;\n \n       temp = gen_reg_rtx (compare_mode);\n-      emit_insn (gen_rtx_SET (VOIDmode, temp, gen_rtx_NEG (compare_mode, op0)));\n+      emit_insn (gen_rtx_SET (temp, gen_rtx_NEG (compare_mode, op0)));\n       op0 = temp;\n       break;\n \n     default:\n       gcc_unreachable ();\n     }\n \n-  emit_insn (gen_rtx_SET (VOIDmode, dest,\n+  emit_insn (gen_rtx_SET (dest,\n \t\t\t  gen_rtx_IF_THEN_ELSE (result_mode,\n \t\t\t\t\t\tgen_rtx_GE (VOIDmode,\n \t\t\t\t\t\t\t    op0, op1),\n@@ -20399,9 +20386,7 @@ rs6000_emit_minmax (rtx dest, enum rtx_code code, rtx op0, rtx op1)\n       && (VECTOR_UNIT_ALTIVEC_OR_VSX_P (mode)\n \t  || (mode == SFmode && VECTOR_UNIT_VSX_P (DFmode))))\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t      dest,\n-\t\t\t      gen_rtx_fmt_ee (code, mode, op0, op1)));\n+      emit_insn (gen_rtx_SET (dest, gen_rtx_fmt_ee (code, mode, op0, op1)));\n       return;\n     }\n \n@@ -20431,7 +20416,7 @@ emit_unlikely_jump (rtx cond, rtx label)\n   rtx x;\n \n   x = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, label, pc_rtx);\n-  x = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, x));\n+  x = emit_jump_insn (gen_rtx_SET (pc_rtx, x));\n   add_int_reg_note (x, REG_BR_PROB, very_unlikely);\n }\n \n@@ -20615,10 +20600,9 @@ rs6000_mask_atomic_subword (rtx oldval, rtx newval, rtx mask)\n   rtx x;\n \n   x = gen_reg_rtx (SImode);\n-  emit_insn (gen_rtx_SET (VOIDmode, x,\n-\t\t\t  gen_rtx_AND (SImode,\n-\t\t\t\t       gen_rtx_NOT (SImode, mask),\n-\t\t\t\t       oldval)));\n+  emit_insn (gen_rtx_SET (x, gen_rtx_AND (SImode,\n+\t\t\t\t\t  gen_rtx_NOT (SImode, mask),\n+\t\t\t\t\t  oldval)));\n \n   x = expand_simple_binop (SImode, IOR, newval, x, x, 1, OPTAB_LIB_WIDEN);\n \n@@ -20725,7 +20709,7 @@ rs6000_expand_atomic_compare_and_swap (rtx operands[])\n       x = gen_rtx_COMPARE (CCmode, or_result, const0_rtx);\n     }\n \n-  emit_insn (gen_rtx_SET (VOIDmode, cond, x));\n+  emit_insn (gen_rtx_SET (cond, x));\n \n   x = gen_rtx_NE (VOIDmode, cond, const0_rtx);\n   emit_unlikely_jump (x, label2);\n@@ -20757,7 +20741,7 @@ rs6000_expand_atomic_compare_and_swap (rtx operands[])\n \n   /* In all cases, CR0 contains EQ on success, and NE on failure.  */\n   x = gen_rtx_EQ (SImode, cond, const0_rtx);\n-  emit_insn (gen_rtx_SET (VOIDmode, boolval, x));\n+  emit_insn (gen_rtx_SET (boolval, x));\n }\n \n /* Expand an atomic exchange operation.  */\n@@ -20869,7 +20853,7 @@ rs6000_expand_atomic_op (enum rtx_code code, rtx mem, rtx val,\n \t\t set, that will be sufficient to not affect other bits.  */\n \t      x = gen_rtx_NOT (SImode, mask);\n \t      x = gen_rtx_IOR (SImode, x, val);\n-\t      emit_insn (gen_rtx_SET (VOIDmode, val, x));\n+\t      emit_insn (gen_rtx_SET (val, x));\n \t      mask = NULL;\n \t      break;\n \n@@ -21017,7 +21001,7 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n \t    p_dst = simplify_gen_subreg (reg_mode, dst, mode,\n \t\t\t\t\t i * reg_mode_size);\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode, p_dst, p_src));\n+\t  emit_insn (gen_rtx_SET (p_dst, p_src));\n \t}\n \n       return;\n@@ -21029,8 +21013,7 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n \t overlap.  */\n       int i;\n       for (i = nregs - 1; i >= 0; i--)\n-\temit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\tsimplify_gen_subreg (reg_mode, dst, mode,\n+\temit_insn (gen_rtx_SET (simplify_gen_subreg (reg_mode, dst, mode,\n \t\t\t\t\t\t     i * reg_mode_size),\n \t\t\t\tsimplify_gen_subreg (reg_mode, src, mode,\n \t\t\t\t\t\t     i * reg_mode_size)));\n@@ -21065,19 +21048,20 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n \t\t  if (TARGET_UPDATE)\n \t\t    {\n \t\t      rtx ndst = simplify_gen_subreg (reg_mode, dst, mode, 0);\n-\t\t      emit_insn (gen_rtx_SET (VOIDmode, ndst,\n-\t\t\t\t gen_rtx_MEM (reg_mode, XEXP (src, 0))));\n+\t\t      emit_insn (gen_rtx_SET (ndst,\n+\t\t\t\t\t      gen_rtx_MEM (reg_mode,\n+\t\t\t\t\t\t\t   XEXP (src, 0))));\n \t\t      used_update = true;\n \t\t    }\n \t\t  else\n-\t\t    emit_insn (gen_rtx_SET (VOIDmode, basereg,\n-\t\t\t       XEXP (XEXP (src, 0), 1)));\n+\t\t    emit_insn (gen_rtx_SET (basereg,\n+\t\t\t\t\t    XEXP (XEXP (src, 0), 1)));\n \t\t  src = replace_equiv_address (src, basereg);\n \t\t}\n \t      else\n \t\t{\n \t\t  rtx basereg = gen_rtx_REG (Pmode, reg);\n-\t\t  emit_insn (gen_rtx_SET (VOIDmode, basereg, XEXP (src, 0)));\n+\t\t  emit_insn (gen_rtx_SET (basereg, XEXP (src, 0)));\n \t\t  src = replace_equiv_address (src, basereg);\n \t\t}\n \t    }\n@@ -21132,13 +21116,14 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n \t\t  if (TARGET_UPDATE)\n \t\t    {\n \t\t      rtx nsrc = simplify_gen_subreg (reg_mode, src, mode, 0);\n-\t\t      emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t gen_rtx_MEM (reg_mode, XEXP (dst, 0)), nsrc));\n+\t\t      emit_insn (gen_rtx_SET (gen_rtx_MEM (reg_mode,\n+\t\t\t\t\t\t\t   XEXP (dst, 0)),\n+\t\t\t\t\t      nsrc));\n \t\t      used_update = true;\n \t\t    }\n \t\t  else\n-\t\t    emit_insn (gen_rtx_SET (VOIDmode, basereg,\n-\t\t\t       XEXP (XEXP (dst, 0), 1)));\n+\t\t    emit_insn (gen_rtx_SET (basereg,\n+\t\t\t\t\t    XEXP (XEXP (dst, 0), 1)));\n \t\t  dst = replace_equiv_address (dst, basereg);\n \t\t}\n \t      else\n@@ -21176,8 +21161,7 @@ rs6000_split_multireg_move (rtx dst, rtx src)\n \t  if (j == 0 && used_update)\n \t    continue;\n \n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  simplify_gen_subreg (reg_mode, dst, mode,\n+\t  emit_insn (gen_rtx_SET (simplify_gen_subreg (reg_mode, dst, mode,\n \t\t\t\t\t\t       j * reg_mode_size),\n \t\t\t\t  simplify_gen_subreg (reg_mode, src, mode,\n \t\t\t\t\t\t       j * reg_mode_size)));\n@@ -22620,7 +22604,7 @@ rs6000_emit_stack_tie (rtx fp, bool hard_frame_needed)\n   while (--i >= 0)\n     {\n       rtx mem = gen_frame_mem (BLKmode, regs[i]);\n-      RTVEC_ELT (p, i) = gen_rtx_SET (VOIDmode, mem, const0_rtx);\n+      RTVEC_ELT (p, i) = gen_rtx_SET (mem, const0_rtx);\n     }\n \n   emit_insn (gen_stack_tie (gen_rtx_PARALLEL (VOIDmode, p)));\n@@ -22712,9 +22696,8 @@ rs6000_emit_allocate_stack (HOST_WIDE_INT size, rtx copy_reg, int copy_off)\n \n   RTX_FRAME_RELATED_P (insn) = 1;\n   add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\tgen_rtx_SET (VOIDmode, stack_reg,\n-\t\t\t     gen_rtx_PLUS (Pmode, stack_reg,\n-\t\t\t\t\t   GEN_INT (-size))));\n+\t\tgen_rtx_SET (stack_reg, gen_rtx_PLUS (Pmode, stack_reg,\n+\t\t\t\t\t\t      GEN_INT (-size))));\n }\n \n #define PROBE_INTERVAL (1 << STACK_CHECK_PROBE_INTERVAL_EXP)\n@@ -22768,20 +22751,18 @@ rs6000_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n       /* Step 2: compute initial and final value of the loop counter.  */\n \n       /* TEST_ADDR = SP + FIRST.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, r12,\n-\t\t\t      plus_constant (Pmode, stack_pointer_rtx,\n-\t\t\t\t\t     -first)));\n+      emit_insn (gen_rtx_SET (r12, plus_constant (Pmode, stack_pointer_rtx,\n+\t\t\t\t\t\t  -first)));\n \n       /* LAST_ADDR = SP + FIRST + ROUNDED_SIZE.  */\n       if (rounded_size > 32768)\n \t{\n \t  emit_move_insn (r0, GEN_INT (-rounded_size));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, r0,\n-\t\t\t\t  gen_rtx_PLUS (Pmode, r12, r0)));\n+\t  emit_insn (gen_rtx_SET (r0, gen_rtx_PLUS (Pmode, r12, r0)));\n \t}\n       else\n-\temit_insn (gen_rtx_SET (VOIDmode, r0,\n-\t\t\t        plus_constant (Pmode, r12, -rounded_size)));\n+\temit_insn (gen_rtx_SET (r0, plus_constant (Pmode, r12,\n+\t\t\t\t\t\t   -rounded_size)));\n \n \n       /* Step 3: the loop\n@@ -22971,8 +22952,7 @@ generate_set_vrsave (rtx reg, rs6000_stack_t *info, int epiloguep)\n   rtx vrsave = gen_rtx_REG (SImode, VRSAVE_REGNO);\n \n   clobs[0]\n-    = gen_rtx_SET (VOIDmode,\n-\t\t   vrsave,\n+    = gen_rtx_SET (vrsave,\n \t\t   gen_rtx_UNSPEC_VOLATILE (SImode,\n \t\t\t\t\t    gen_rtvec (2, reg, vrsave),\n \t\t\t\t\t    UNSPECV_SET_VRSAVE));\n@@ -23004,8 +22984,7 @@ generate_set_vrsave (rtx reg, rs6000_stack_t *info, int epiloguep)\n \t    rtx reg = gen_rtx_REG (V4SImode, i);\n \n \t    clobs[nclobs++]\n-\t      = gen_rtx_SET (VOIDmode,\n-\t\t\t     reg,\n+\t      = gen_rtx_SET (reg,\n \t\t\t     gen_rtx_UNSPEC (V4SImode,\n \t\t\t\t\t     gen_rtvec (1, reg), 27));\n \t  }\n@@ -23026,7 +23005,7 @@ gen_frame_set (rtx reg, rtx frame_reg, int offset, bool store)\n \n   addr = gen_rtx_PLUS (Pmode, frame_reg, GEN_INT (offset));\n   mem = gen_frame_mem (GET_MODE (reg), addr);\n-  return gen_rtx_SET (VOIDmode, store ? mem : reg, store ? reg : mem);\n+  return gen_rtx_SET (store ? mem : reg, store ? reg : mem);\n }\n \n static rtx\n@@ -23426,7 +23405,7 @@ rs6000_emit_move_from_cr (rtx reg)\n \t  RTVEC_ELT (r, 0) = gen_rtx_REG (CCmode, CR0_REGNO + cr_reg[0]);\n \t  RTVEC_ELT (r, 1) = GEN_INT (1 << (7 - cr_reg[0]));\n \t  RTVEC_ELT (p, 0)\n-\t    = gen_rtx_SET (VOIDmode, reg,\n+\t    = gen_rtx_SET (reg,\n \t\t\t   gen_rtx_UNSPEC (SImode, r, UNSPEC_MOVESI_FROM_CR));\n \n \t  emit_insn (gen_rtx_PARALLEL (VOIDmode, p));\n@@ -23636,7 +23615,7 @@ rs6000_emit_prologue (void)\n       /* Explain what happens to the stack pointer.  */\n       {\n \trtx newval = gen_rtx_PLUS (Pmode, sp_reg_rtx, treg);\n-\tRTVEC_ELT (p, j++) = gen_rtx_SET (VOIDmode, sp_reg_rtx, newval);\n+\tRTVEC_ELT (p, j++) = gen_rtx_SET (sp_reg_rtx, newval);\n       }\n \n       insn = emit_insn (gen_rtx_PARALLEL (VOIDmode, p));\n@@ -24003,15 +23982,15 @@ rs6000_emit_prologue (void)\n       compare_result = gen_rtx_REG (CCUNSmode, CR0_REGNO);\n       validate_condition_mode (EQ, CCUNSmode);\n       lo = gen_int_mode (toc_restore_insn & 0xffff, SImode);\n-      emit_insn (gen_rtx_SET (VOIDmode, compare_result,\n+      emit_insn (gen_rtx_SET (compare_result,\n \t\t\t      gen_rtx_COMPARE (CCUNSmode, tmp_reg_si, lo)));\n       toc_save_done = gen_label_rtx ();\n       jump = gen_rtx_IF_THEN_ELSE (VOIDmode,\n \t\t\t\t   gen_rtx_EQ (VOIDmode, compare_result,\n \t\t\t\t\t       const0_rtx),\n \t\t\t\t   gen_rtx_LABEL_REF (VOIDmode, toc_save_done),\n \t\t\t\t   pc_rtx);\n-      jump = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, jump));\n+      jump = emit_jump_insn (gen_rtx_SET (pc_rtx, jump));\n       JUMP_LABEL (jump) = toc_save_done;\n       LABEL_NUSES (toc_save_done) += 1;\n \n@@ -24085,7 +24064,7 @@ rs6000_emit_prologue (void)\n       int n_crsave = 0;\n       int i;\n \n-      crsave_v[n_crsave++] = gen_rtx_SET (VOIDmode, mem, cr_save_rtx);\n+      crsave_v[n_crsave++] = gen_rtx_SET (mem, cr_save_rtx);\n       for (i = 0; i < 8; i++)\n \tif (save_reg_p (CR0_REGNO + i))\n \t  crsave_v[n_crsave++]\n@@ -24118,8 +24097,7 @@ rs6000_emit_prologue (void)\n \t    if (save_reg_p (CR0_REGNO + i))\n \t      {\n \t\tcrframe[n_crframe]\n-\t\t  = gen_rtx_SET (VOIDmode, mem,\n-\t\t\t\t gen_rtx_REG (SImode, CR0_REGNO + i));\n+\t\t  = gen_rtx_SET (mem, gen_rtx_REG (SImode, CR0_REGNO + i));\n \n \t\tRTX_FRAME_RELATED_P (crframe[n_crframe]) = 1;\n \t\tn_crframe++;\n@@ -24134,8 +24112,7 @@ rs6000_emit_prologue (void)\n \t  /* In other ABIs, by convention, we use a single CR regnum to\n \t     represent the fact that all call-saved CR fields are saved.\n \t     We use CR2_REGNO to be compatible with gcc-2.95 on Linux.  */\n-\t  rtx set = gen_rtx_SET (VOIDmode, mem,\n-\t\t\t\t gen_rtx_REG (SImode, CR2_REGNO));\n+\t  rtx set = gen_rtx_SET (mem, gen_rtx_REG (SImode, CR2_REGNO));\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR, set);\n \t}\n     }\n@@ -24328,7 +24305,7 @@ rs6000_emit_prologue (void)\n       if (TARGET_MACHO)\n \temit_insn (gen_get_vrsave_internal (reg));\n       else\n-\temit_insn (gen_rtx_SET (VOIDmode, reg, vrsave));\n+\temit_insn (gen_rtx_SET (reg, vrsave));\n \n       /* Save VRSAVE.  */\n       offset = info->vrsave_save_offset + frame_off;\n@@ -24532,7 +24509,7 @@ load_cr_save (int regno, rtx frame_reg_rtx, int offset, bool exit_func)\n   if (!exit_func && DEFAULT_ABI == ABI_V4)\n     {\n       rtx cr = gen_rtx_REG (SImode, CR2_REGNO);\n-      rtx set = gen_rtx_SET (VOIDmode, reg, cr);\n+      rtx set = gen_rtx_SET (reg, cr);\n \n       add_reg_note (insn, REG_CFA_REGISTER, set);\n       RTX_FRAME_RELATED_P (insn) = 1;\n@@ -24572,7 +24549,7 @@ restore_saved_cr (rtx reg, int using_mfcr_multiple, bool exit_func)\n \t    RTVEC_ELT (r, 0) = reg;\n \t    RTVEC_ELT (r, 1) = GEN_INT (1 << (7-i));\n \t    RTVEC_ELT (p, ndx) =\n-\t      gen_rtx_SET (VOIDmode, gen_rtx_REG (CCmode, CR0_REGNO + i),\n+\t      gen_rtx_SET (gen_rtx_REG (CCmode, CR0_REGNO + i),\n \t\t\t   gen_rtx_UNSPEC (CCmode, r, UNSPEC_MOVESI_TO_CR));\n \t    ndx++;\n \t  }\n@@ -30970,7 +30947,7 @@ rs6000_emit_nmsub (rtx dst, rtx m1, rtx m2, rtx a)\n   r = gen_rtx_NEG (mode, a);\n   r = gen_rtx_FMA (mode, m1, m2, r);\n   r = gen_rtx_NEG (mode, r);\n-  emit_insn (gen_rtx_SET (VOIDmode, dst, r));\n+  emit_insn (gen_rtx_SET (dst, r));\n }\n \n /* Newton-Raphson approximation of floating point divide DST = N/D.  If NOTE_P,\n@@ -31002,9 +30979,8 @@ rs6000_emit_swdiv (rtx dst, rtx n, rtx d, bool note_p)\n \n   /* x0 = 1./d estimate */\n   x0 = gen_reg_rtx (mode);\n-  emit_insn (gen_rtx_SET (VOIDmode, x0,\n-\t\t\t  gen_rtx_UNSPEC (mode, gen_rtvec (1, d),\n-\t\t\t\t\t  UNSPEC_FRES)));\n+  emit_insn (gen_rtx_SET (x0, gen_rtx_UNSPEC (mode, gen_rtvec (1, d),\n+\t\t\t\t\t      UNSPEC_FRES)));\n \n   /* Each iteration but the last calculates x_(i+1) = x_i * (2 - d * x_i).  */\n   if (passes > 1) {\n@@ -31083,9 +31059,8 @@ rs6000_emit_swrsqrt (rtx dst, rtx src)\n   halfthree = rs6000_load_constant_and_splat (mode, dconst3_2);\n \n   /* x0 = rsqrt estimate */\n-  emit_insn (gen_rtx_SET (VOIDmode, x0,\n-\t\t\t  gen_rtx_UNSPEC (mode, gen_rtvec (1, src),\n-\t\t\t\t\t  UNSPEC_RSQRT)));\n+  emit_insn (gen_rtx_SET (x0, gen_rtx_UNSPEC (mode, gen_rtvec (1, src),\n+\t\t\t\t\t      UNSPEC_RSQRT)));\n \n   /* y = 0.5 * src = 1.5 * src - src -> fewer constants */\n   rs6000_emit_msub (y, src, halfthree, src);\n@@ -31343,7 +31318,7 @@ altivec_expand_vec_perm_le (rtx operands[4])\n   iorx = (TARGET_P8_VECTOR\n \t  ? gen_rtx_IOR (V16QImode, notx, notx)\n \t  : gen_rtx_AND (V16QImode, notx, notx));\n-  emit_insn (gen_rtx_SET (VOIDmode, norreg, iorx));\n+  emit_insn (gen_rtx_SET (norreg, iorx));\n \n   /* Permute with operands reversed and adjusted selector.  */\n   unspec = gen_rtx_UNSPEC (mode, gen_rtvec (3, op1, op0, norreg),\n@@ -31630,7 +31605,7 @@ rs6000_expand_vec_perm_const_1 (rtx target, rtx op0, rtx op1,\n       x = gen_rtx_VEC_CONCAT (dmode, op0, op1);\n       v = gen_rtvec (2, GEN_INT (perm0), GEN_INT (perm1));\n       x = gen_rtx_VEC_SELECT (vmode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-      emit_insn (gen_rtx_SET (VOIDmode, target, x));\n+      emit_insn (gen_rtx_SET (target, x));\n     }\n   return true;\n }\n@@ -33178,7 +33153,7 @@ rs6000_call_aix (rtx value, rtx func_desc, rtx flag, rtx cookie)\n       rtx stack_toc_unspec = gen_rtx_UNSPEC (Pmode,\n \t\t\t\t\t     gen_rtvec (1, stack_toc_offset),\n \t\t\t\t\t     UNSPEC_TOCSLOT);\n-      toc_restore = gen_rtx_SET (VOIDmode, toc_reg, stack_toc_unspec);\n+      toc_restore = gen_rtx_SET (toc_reg, stack_toc_unspec);\n \n       /* Can we optimize saving the TOC in the prologue or\n \t do we need to do it at every call?  */\n@@ -33252,7 +33227,7 @@ rs6000_call_aix (rtx value, rtx func_desc, rtx flag, rtx cookie)\n   /* Create the call.  */\n   call[0] = gen_rtx_CALL (VOIDmode, gen_rtx_MEM (SImode, func_addr), flag);\n   if (value != NULL_RTX)\n-    call[0] = gen_rtx_SET (VOIDmode, value, call[0]);\n+    call[0] = gen_rtx_SET (value, call[0]);\n   n_call = 1;\n \n   if (toc_load)\n@@ -33284,7 +33259,7 @@ rs6000_sibcall_aix (rtx value, rtx func_desc, rtx flag, rtx cookie)\n   /* Create the call.  */\n   call[0] = gen_rtx_CALL (VOIDmode, gen_rtx_MEM (SImode, func_desc), flag);\n   if (value != NULL_RTX)\n-    call[0] = gen_rtx_SET (VOIDmode, value, call[0]);\n+    call[0] = gen_rtx_SET (value, call[0]);\n \n   call[1] = simple_return_rtx;\n \n@@ -33433,14 +33408,14 @@ rs6000_split_logical_inner (rtx dest,\n \t{\n \t  if (value == 0)\n \t    {\n-\t      emit_insn (gen_rtx_SET (VOIDmode, dest, const0_rtx));\n+\t      emit_insn (gen_rtx_SET (dest, const0_rtx));\n \t      return;\n \t    }\n \n \t  else if (value == mask)\n \t    {\n \t      if (!rtx_equal_p (dest, op1))\n-\t\temit_insn (gen_rtx_SET (VOIDmode, dest, op1));\n+\t\temit_insn (gen_rtx_SET (dest, op1));\n \t      return;\n \t    }\n \t}\n@@ -33452,7 +33427,7 @@ rs6000_split_logical_inner (rtx dest,\n \t  if (value == 0)\n \t    {\n \t      if (!rtx_equal_p (dest, op1))\n-\t\temit_insn (gen_rtx_SET (VOIDmode, dest, op1));\n+\t\temit_insn (gen_rtx_SET (dest, op1));\n \t      return;\n \t    }\n \t}\n@@ -33482,7 +33457,7 @@ rs6000_split_logical_inner (rtx dest,\n   if (complement_final_p)\n     bool_rtx = gen_rtx_NOT (mode, bool_rtx);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, dest, bool_rtx));\n+  emit_insn (gen_rtx_SET (dest, bool_rtx));\n }\n \n /* Split a DImode AND/IOR/XOR with a constant on a 32-bit system.  These\n@@ -33768,7 +33743,7 @@ expand_fusion_gpr_load (rtx *operands)\n \n   new_mem = gen_rtx_UNSPEC (extend_mode, gen_rtvec (1, new_mem),\n \t\t\t    UNSPEC_FUSION_GPR);\n-  emit_insn (gen_rtx_SET (VOIDmode, target, new_mem));\n+  emit_insn (gen_rtx_SET (target, new_mem));\n \n   if (extend == SIGN_EXTEND)\n     {\n@@ -33778,7 +33753,7 @@ expand_fusion_gpr_load (rtx *operands)\n       rtx sign_reg\n \t= simplify_subreg (target_mode, target, extend_mode, sub_off);\n \n-      emit_insn (gen_rtx_SET (VOIDmode, target,\n+      emit_insn (gen_rtx_SET (target,\n \t\t\t      gen_rtx_SIGN_EXTEND (extend_mode, sign_reg)));\n     }\n \n@@ -34856,7 +34831,7 @@ replace_swap_with_copy (swap_web_entry *insn_entry, unsigned i)\n   rtx_insn *insn = insn_entry[i].insn;\n   rtx body = PATTERN (insn);\n   rtx src_reg = XEXP (SET_SRC (body), 0);\n-  rtx copy = gen_rtx_SET (VOIDmode, SET_DEST (body), src_reg);\n+  rtx copy = gen_rtx_SET (SET_DEST (body), src_reg);\n   rtx_insn *new_insn = emit_insn_before (copy, insn);\n   set_block_for_insn (new_insn, BLOCK_FOR_INSN (insn));\n   df_insn_rescan (new_insn);"}, {"sha": "09099861266096b384329d9d30650bd8fc2c4245", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1435,17 +1435,15 @@\n   cr0 = gen_rtx_REG (CCmode, CR0_REGNO);\n   emit_insn (gen_dlmzb (scratch_dlmzb, word1, word2, cr0));\n   cond = gen_rtx_NE (VOIDmode, cr0, const0_rtx);\n-  emit_jump_insn (gen_rtx_SET (VOIDmode,\n-                               pc_rtx,\n+  emit_jump_insn (gen_rtx_SET (pc_rtx,\n                                gen_rtx_IF_THEN_ELSE (VOIDmode,\n                                                      cond,\n                                                      gen_rtx_LABEL_REF\n                                                        (VOIDmode,\n                                                         end_label),\n                                                      pc_rtx)));\n   emit_insn (gen_addsi3 (scratch_string, scratch_string, GEN_INT (8)));\n-  emit_jump_insn (gen_rtx_SET (VOIDmode,\n-                               pc_rtx,\n+  emit_jump_insn (gen_rtx_SET (pc_rtx,\n                                gen_rtx_LABEL_REF (VOIDmode, loop_label)));\n   emit_barrier ();\n   emit_label (end_label);\n@@ -9161,7 +9159,7 @@\n \n   for (i = 0; i < count; i++)\n     XVECEXP (operands[3], 0, i)\n-      = gen_rtx_SET (VOIDmode, gen_rtx_REG (SImode, regno + i),\n+      = gen_rtx_SET (gen_rtx_REG (SImode, regno + i),\n \t\t     adjust_address_nv (op1, SImode, i * 4));\n }\")\n \n@@ -9324,14 +9322,13 @@\n   op0 = replace_equiv_address (operands[0], to);\n \n   XVECEXP (operands[3], 0, 0)\n-    = gen_rtx_SET (VOIDmode, adjust_address_nv (op0, SImode, 0), operands[1]);\n+    = gen_rtx_SET (adjust_address_nv (op0, SImode, 0), operands[1]);\n   XVECEXP (operands[3], 0, 1) = gen_rtx_CLOBBER (VOIDmode,\n \t\t\t\t\t\t gen_rtx_SCRATCH (SImode));\n \n   for (i = 1; i < count; i++)\n     XVECEXP (operands[3], 0, i + 1)\n-      = gen_rtx_SET (VOIDmode,\n-\t\t     adjust_address_nv (op0, SImode, i * 4),\n+      = gen_rtx_SET (adjust_address_nv (op0, SImode, i * 4),\n \t\t     gen_rtx_REG (SImode, regno + i));\n }\")\n \n@@ -10623,8 +10620,7 @@\n   operands[3] = gen_frame_mem (Pmode, operands[0]);\n   operands[4] = gen_frame_mem (Pmode, operands[1]);\n   p = rtvec_alloc (1);\n-  RTVEC_ELT (p, 0) = gen_rtx_SET (VOIDmode,\n-\t\t\t\t  gen_frame_mem (BLKmode, operands[0]),\n+  RTVEC_ELT (p, 0) = gen_rtx_SET (gen_frame_mem (BLKmode, operands[0]),\n \t\t\t\t  const0_rtx);\n   operands[5] = gen_rtx_PARALLEL (VOIDmode, p);\n }\")\n@@ -10664,8 +10660,7 @@\n   operands[4] = adjust_address_nv (operands[1], Pmode, units_per_word);\n   operands[5] = gen_frame_mem (Pmode, operands[3]);\n   p = rtvec_alloc (1);\n-  RTVEC_ELT (p, 0) = gen_rtx_SET (VOIDmode,\n-\t\t\t\t  gen_frame_mem (BLKmode, operands[0]),\n+  RTVEC_ELT (p, 0) = gen_rtx_SET (gen_frame_mem (BLKmode, operands[0]),\n \t\t\t\t  const0_rtx);\n   operands[6] = gen_rtx_PARALLEL (VOIDmode, p);\n }\")"}, {"sha": "27be1609acf9fdf85417b1349211c37117493063", "filename": "gcc/config/rs6000/vector.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frs6000%2Fvector.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frs6000%2Fvector.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvector.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1049,7 +1049,7 @@\n       /* We need to make a note that we clobber SPEFSCR.  */\n       rtx par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n \n-      XVECEXP (par, 0, 0) = gen_rtx_SET (VOIDmode, operands[0],\n+      XVECEXP (par, 0, 0) = gen_rtx_SET (operands[0],\n                                          gen_rtx_PLUS (V2SFmode, operands[1], operands[2]));\n       XVECEXP (par, 0, 1) = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, SPEFSCR_REGNO));\n       emit_insn (par);\n@@ -1069,7 +1069,7 @@\n       /* We need to make a note that we clobber SPEFSCR.  */\n       rtx par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n \n-      XVECEXP (par, 0, 0) = gen_rtx_SET (VOIDmode, operands[0],\n+      XVECEXP (par, 0, 0) = gen_rtx_SET (operands[0],\n                                          gen_rtx_MINUS (V2SFmode, operands[1], operands[2]));\n       XVECEXP (par, 0, 1) = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, SPEFSCR_REGNO));\n       emit_insn (par);\n@@ -1089,7 +1089,7 @@\n       /* We need to make a note that we clobber SPEFSCR.  */\n       rtx par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n \n-      XVECEXP (par, 0, 0) = gen_rtx_SET (VOIDmode, operands[0],\n+      XVECEXP (par, 0, 0) = gen_rtx_SET (operands[0],\n                                          gen_rtx_MULT (V2SFmode, operands[1], operands[2]));\n       XVECEXP (par, 0, 1) = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, SPEFSCR_REGNO));\n       emit_insn (par);\n@@ -1109,7 +1109,7 @@\n       /* We need to make a note that we clobber SPEFSCR.  */\n       rtx par = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n \n-      XVECEXP (par, 0, 0) = gen_rtx_SET (VOIDmode, operands[0],\n+      XVECEXP (par, 0, 0) = gen_rtx_SET (operands[0],\n                                          gen_rtx_DIV (V2SFmode, operands[1], operands[2]));\n       XVECEXP (par, 0, 1) = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (SImode, SPEFSCR_REGNO));\n       emit_insn (par);"}, {"sha": "314b272bc4228c461bab5e3610a4cd8c12e0bbf5", "filename": "gcc/config/rs6000/vsx.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frs6000%2Fvsx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frs6000%2Fvsx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fvsx.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2017,7 +2017,7 @@\n     }\n \n   x = gen_rtx_VEC_SELECT (<MODE>mode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n \n@@ -2043,7 +2043,7 @@\n     }\n \n   x = gen_rtx_VEC_SELECT (<MODE>mode, x, gen_rtx_PARALLEL (VOIDmode, v));\n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], x));\n+  emit_insn (gen_rtx_SET (operands[0], x));\n   DONE;\n })\n "}, {"sha": "fd985f5fc944cbdf98058a863f81e42bae121b06", "filename": "gcc/config/rx/rx.c", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frx%2Frx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frx%2Frx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1633,14 +1633,13 @@ gen_rx_store_vector (unsigned int low, unsigned int high)\n   vector = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (count));\n \n   XVECEXP (vector, 0, 0) =\n-    gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+    gen_rtx_SET (stack_pointer_rtx,\n \t\t gen_rtx_MINUS (SImode, stack_pointer_rtx,\n \t\t\t\tGEN_INT ((count - 1) * UNITS_PER_WORD)));\n \n   for (i = 0; i < count - 1; i++)\n     XVECEXP (vector, 0, i + 1) =\n-      gen_rtx_SET (VOIDmode,\n-\t\t   gen_rtx_MEM (SImode,\n+      gen_rtx_SET (gen_rtx_MEM (SImode,\n \t\t\t\tgen_rtx_MINUS (SImode, stack_pointer_rtx,\n \t\t\t\t\t       GEN_INT ((i + 1) * UNITS_PER_WORD))),\n \t\t   gen_rtx_REG (SImode, high - i));\n@@ -1708,8 +1707,7 @@ gen_safe_add (rtx dest, rtx src, rtx val, bool is_frame_related)\n \t   as the dwarf2out code cannot be expected to grok\n \t   our unspec.  */\n \tadd_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t      gen_rtx_SET (SImode, dest,\n-\t\t\t\t   gen_rtx_PLUS (SImode, src, val)));\n+\t\t      gen_rtx_SET (dest, gen_rtx_PLUS (SImode, src, val)));\n       return;\n     }\n \n@@ -1966,13 +1964,12 @@ gen_rx_rtsd_vector (unsigned int adjust, unsigned int low, unsigned int high)\n   vector = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (count));\n \n   XVECEXP (vector, 0, 0) =\n-    gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+    gen_rtx_SET (stack_pointer_rtx,\n \t\t plus_constant (Pmode, stack_pointer_rtx, adjust));\n \n   for (i = 0; i < count - 2; i++)\n     XVECEXP (vector, 0, i + 1) =\n-      gen_rtx_SET (VOIDmode,\n-\t\t   gen_rtx_REG (SImode, low + i),\n+      gen_rtx_SET (gen_rtx_REG (SImode, low + i),\n \t\t   gen_rtx_MEM (SImode,\n \t\t\t\ti == 0 ? stack_pointer_rtx\n \t\t\t\t: plus_constant (Pmode, stack_pointer_rtx,\n@@ -1995,14 +1992,13 @@ gen_rx_popm_vector (unsigned int low, unsigned int high)\n   vector = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (count));\n \n   XVECEXP (vector, 0, 0) =\n-    gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+    gen_rtx_SET (stack_pointer_rtx,\n \t\t plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t(count - 1) * UNITS_PER_WORD));\n \n   for (i = 0; i < count - 1; i++)\n     XVECEXP (vector, 0, i + 1) =\n-      gen_rtx_SET (VOIDmode,\n-\t\t   gen_rtx_REG (SImode, low + i),\n+      gen_rtx_SET (gen_rtx_REG (SImode, low + i),\n \t\t   gen_rtx_MEM (SImode,\n \t\t\t\ti == 0 ? stack_pointer_rtx\n \t\t\t\t: plus_constant (Pmode, stack_pointer_rtx,\n@@ -3188,12 +3184,12 @@ rx_split_cbranch (machine_mode cc_mode, enum rtx_code cmp1,\n \n   flags = gen_rtx_REG (cc_mode, CC_REG);\n   x = gen_rtx_COMPARE (cc_mode, c1, c2);\n-  x = gen_rtx_SET (VOIDmode, flags, x);\n+  x = gen_rtx_SET (flags, x);\n   emit_insn (x);\n \n   x = gen_rtx_fmt_ee (cmp1, VOIDmode, flags, const0_rtx);\n   x = gen_rtx_IF_THEN_ELSE (VOIDmode, x, label, pc_rtx);\n-  x = gen_rtx_SET (VOIDmode, pc_rtx, x);\n+  x = gen_rtx_SET (pc_rtx, x);\n   emit_jump_insn (x);\n }\n "}, {"sha": "9cb0451bda9540d71460e5bb7a633905db394b18", "filename": "gcc/config/rx/rx.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frx%2Frx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Frx%2Frx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -679,11 +679,11 @@\n \n   flags = gen_rtx_REG (CCmode, CC_REG);\n   x = gen_rtx_COMPARE (CCmode, operands[2], operands[3]);\n-  x = gen_rtx_SET (VOIDmode, flags, x);\n+  x = gen_rtx_SET (flags, x);\n   emit_insn (x);\n \n   x = gen_rtx_fmt_ee (GET_CODE (operands[1]), SImode, flags, const0_rtx);\n-  x = gen_rtx_SET (VOIDmode, operands[0], x);\n+  x = gen_rtx_SET (operands[0], x);\n   emit_insn (x);\n   DONE;\n })\n@@ -711,11 +711,11 @@\n \n   flags = gen_rtx_REG (CC_Fmode, CC_REG);\n   x = gen_rtx_COMPARE (CC_Fmode, operands[2], operands[3]);\n-  x = gen_rtx_SET (VOIDmode, flags, x);\n+  x = gen_rtx_SET (flags, x);\n   emit_insn (x);\n \n   x = gen_rtx_fmt_ee (GET_CODE (operands[1]), SImode, flags, const0_rtx);\n-  x = gen_rtx_SET (VOIDmode, operands[0], x);\n+  x = gen_rtx_SET (operands[0], x);\n   emit_insn (x);\n   DONE;\n })\n@@ -756,7 +756,7 @@\n \n   flags = gen_rtx_REG (CCmode, CC_REG);\n   x = gen_rtx_COMPARE (CCmode, operands[3], operands[4]);\n-  emit_insn (gen_rtx_SET (VOIDmode, flags, x));\n+  emit_insn (gen_rtx_SET (flags, x));\n \n   cmp_code = GET_CODE (operands[5]);\n   op0 = operands[0];\n@@ -781,7 +781,7 @@\n \n   x = gen_rtx_fmt_ee (cmp_code, VOIDmode, flags, const0_rtx);\n   x = gen_rtx_IF_THEN_ELSE (SImode, x, op1, op0);\n-  emit_insn (gen_rtx_SET (VOIDmode, op0, x));\n+  emit_insn (gen_rtx_SET (op0, x));\n   DONE;\n })\n \n@@ -2057,7 +2057,7 @@\n   flags = gen_rtx_REG (CC_ZSmode, CC_REG);\n   x = gen_rtx_AND (SImode, operands[2], const1_rtx);\n   x = gen_rtx_COMPARE (CC_ZSmode, x, const0_rtx);\n-  x = gen_rtx_SET (VOIDmode, flags, x);\n+  x = gen_rtx_SET (flags, x);\n   emit_insn (x);\n \n   /* Emit bmne.  */\n@@ -2083,7 +2083,7 @@\n \n   flags = gen_rtx_REG (CCmode, CC_REG);\n   x = gen_rtx_COMPARE (CCmode, operands[2], operands[3]);\n-  x = gen_rtx_SET (VOIDmode, flags, x);\n+  x = gen_rtx_SET (flags, x);\n   emit_insn (x);\n \n   operands[4] = gen_rtx_fmt_ee (GET_CODE (operands[4]), SImode,"}, {"sha": "e6e43fa02bf30af347a914aa38f34a38400a8974", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1047,7 +1047,7 @@ s390_emit_compare (enum rtx_code code, rtx op0, rtx op1)\n   else\n     {\n       cc = gen_rtx_REG (mode, CC_REGNUM);\n-      emit_insn (gen_rtx_SET (VOIDmode, cc, gen_rtx_COMPARE (mode, op0, op1)));\n+      emit_insn (gen_rtx_SET (cc, gen_rtx_COMPARE (mode, op0, op1)));\n     }\n \n   return gen_rtx_fmt_ee (code, VOIDmode, cc, const0_rtx);\n@@ -1080,7 +1080,7 @@ s390_emit_jump (rtx target, rtx cond)\n   if (cond)\n     target = gen_rtx_IF_THEN_ELSE (VOIDmode, cond, target, pc_rtx);\n \n-  insn = gen_rtx_SET (VOIDmode, pc_rtx, target);\n+  insn = gen_rtx_SET (pc_rtx, target);\n   return emit_jump_insn (insn);\n }\n \n@@ -1648,7 +1648,7 @@ s390_expand_logical_operator (enum rtx_code code, machine_mode mode,\n     }\n \n   /* Emit the instruction.  */\n-  op = gen_rtx_SET (VOIDmode, dst, gen_rtx_fmt_ee (code, wmode, src1, src2));\n+  op = gen_rtx_SET (dst, gen_rtx_fmt_ee (code, wmode, src1, src2));\n   clob = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, CC_REGNUM));\n   emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, op, clob)));\n \n@@ -3847,7 +3847,7 @@ legitimize_tls_address (rtx addr, rtx reg)\n \n \t    new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, new_rtx, addr), UNSPEC_TLS_LOAD);\n \t    temp = gen_reg_rtx (Pmode);\n-\t    emit_insn (gen_rtx_SET (Pmode, temp, new_rtx));\n+\t    emit_insn (gen_rtx_SET (temp, new_rtx));\n \t  }\n \telse\n \t  {\n@@ -3864,7 +3864,7 @@ legitimize_tls_address (rtx addr, rtx reg)\n \t    new_rtx = gen_const_mem (Pmode, new_rtx);\n \t    new_rtx = gen_rtx_UNSPEC (Pmode, gen_rtvec (2, new_rtx, addr), UNSPEC_TLS_LOAD);\n \t    temp = gen_reg_rtx (Pmode);\n-\t    emit_insn (gen_rtx_SET (Pmode, temp, new_rtx));\n+\t    emit_insn (gen_rtx_SET (temp, new_rtx));\n \t  }\n \n \tnew_rtx = gen_rtx_PLUS (Pmode, s390_get_thread_pointer (), temp);\n@@ -4426,7 +4426,7 @@ s390_expand_cmpmem (rtx target, rtx op0, rtx op1, rtx len)\n       temp = gen_rtx_NE (VOIDmode, ccreg, const0_rtx);\n       temp = gen_rtx_IF_THEN_ELSE (VOIDmode, temp,\n \t\t\tgen_rtx_LABEL_REF (VOIDmode, end_label), pc_rtx);\n-      temp = gen_rtx_SET (VOIDmode, pc_rtx, temp);\n+      temp = gen_rtx_SET (pc_rtx, temp);\n       emit_jump_insn (temp);\n \n       s390_load_address (addr0,\n@@ -4536,7 +4536,7 @@ s390_expand_addcc (enum rtx_code cmp_code, rtx cmp_op0, rtx cmp_op1,\n       if (!register_operand (cmp_op0, cmp_mode))\n \tcmp_op0 = force_reg (cmp_mode, cmp_op0);\n \n-      insn = gen_rtx_SET (VOIDmode, gen_rtx_REG (cc_mode, CC_REGNUM),\n+      insn = gen_rtx_SET (gen_rtx_REG (cc_mode, CC_REGNUM),\n \t\t\t  gen_rtx_COMPARE (cc_mode, cmp_op0, cmp_op1));\n       /* We use insn_invalid_p here to add clobbers if required.  */\n       ret = insn_invalid_p (emit_insn (insn), false);\n@@ -4558,7 +4558,7 @@ s390_expand_addcc (enum rtx_code cmp_code, rtx cmp_op0, rtx cmp_op1,\n \n       p = rtvec_alloc (2);\n       RTVEC_ELT (p, 0) =\n-        gen_rtx_SET (VOIDmode, dst, op_res);\n+        gen_rtx_SET (dst, op_res);\n       RTVEC_ELT (p, 1) =\n \tgen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, CC_REGNUM));\n       emit_insn (gen_rtx_PARALLEL (VOIDmode, p));\n@@ -4608,7 +4608,7 @@ s390_expand_addcc (enum rtx_code cmp_code, rtx cmp_op0, rtx cmp_op1,\n       if (!register_operand (cmp_op0, cmp_mode))\n \tcmp_op0 = force_reg (cmp_mode, cmp_op0);\n \n-      insn = gen_rtx_SET (VOIDmode, gen_rtx_REG (cc_mode, CC_REGNUM),\n+      insn = gen_rtx_SET (gen_rtx_REG (cc_mode, CC_REGNUM),\n \t\t\t  gen_rtx_COMPARE (cc_mode, cmp_op0, cmp_op1));\n       /* We use insn_invalid_p here to add clobbers if required.  */\n       ret = insn_invalid_p (emit_insn (insn), false);\n@@ -4625,7 +4625,7 @@ s390_expand_addcc (enum rtx_code cmp_code, rtx cmp_op0, rtx cmp_op1,\n \t\t\t\t\t      const0_rtx));\n       p = rtvec_alloc (2);\n       RTVEC_ELT (p, 0) =\n-        gen_rtx_SET (VOIDmode, dst, op_res);\n+        gen_rtx_SET (dst, op_res);\n       RTVEC_ELT (p, 1) =\n \tgen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, CC_REGNUM));\n       emit_insn (gen_rtx_PARALLEL (VOIDmode, p));\n@@ -4753,7 +4753,7 @@ s390_expand_insv (rtx dest, rtx op1, rtx op2, rtx src)\n       if (smode_bsize == bitsize && bitpos == mode_bsize - smode_bsize)\n \t{\n \t  op = gen_rtx_STRICT_LOW_PART (VOIDmode, gen_lowpart (smode, dest));\n-\t  op = gen_rtx_SET (VOIDmode, op, gen_lowpart (smode, src));\n+\t  op = gen_rtx_SET (op, gen_lowpart (smode, src));\n \t  clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (CCmode, CC_REGNUM));\n \t  emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, op, clobber)));\n \t  return true;\n@@ -4781,7 +4781,7 @@ s390_expand_insv (rtx dest, rtx op1, rtx op2, rtx src)\n \t}\n \n       op = gen_rtx_ZERO_EXTRACT (mode, dest, op1, op2),\n-      op = gen_rtx_SET (VOIDmode, op, src);\n+      op = gen_rtx_SET (op, src);\n \n       if (!TARGET_ZEC12)\n \t{\n@@ -6057,7 +6057,8 @@ s390_split_branches (void)\n \t{\n \t  new_literal = 1;\n \t  rtx mem = force_const_mem (Pmode, *label);\n-\t  rtx_insn *set_insn = emit_insn_before (gen_rtx_SET (Pmode, temp_reg, mem), insn);\n+\t  rtx_insn *set_insn = emit_insn_before (gen_rtx_SET (temp_reg, mem),\n+\t\t\t\t\t\t insn);\n \t  INSN_ADDRESSES_NEW (set_insn, -1);\n \t  annotate_constant_pool_refs (&PATTERN (set_insn));\n \n@@ -6070,7 +6071,8 @@ s390_split_branches (void)\n \t\t\t\t   UNSPEC_LTREL_OFFSET);\n \t  target = gen_rtx_CONST (Pmode, target);\n \t  target = force_const_mem (Pmode, target);\n-\t  rtx_insn *set_insn = emit_insn_before (gen_rtx_SET (Pmode, temp_reg, target), insn);\n+\t  rtx_insn *set_insn = emit_insn_before (gen_rtx_SET (temp_reg, target),\n+\t\t\t\t\t\t insn);\n \t  INSN_ADDRESSES_NEW (set_insn, -1);\n \t  annotate_constant_pool_refs (&PATTERN (set_insn));\n \n@@ -8844,7 +8846,7 @@ s390_emit_prologue (void)\n \n       if (DISP_IN_RANGE (INTVAL (frame_off)))\n \t{\n-\t  insn = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t  insn = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t      gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\t\t    frame_off));\n \t  insn = emit_insn (insn);\n@@ -8861,7 +8863,7 @@ s390_emit_prologue (void)\n       RTX_FRAME_RELATED_P (insn) = 1;\n       real_frame_off = GEN_INT (-cfun_frame_layout.frame_size);\n       add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t    gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t    gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\t\t       real_frame_off)));\n \n@@ -8915,8 +8917,7 @@ s390_emit_prologue (void)\n \t    offset += 8;\n \t    RTX_FRAME_RELATED_P (insn) = 1;\n \t    add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\t  gen_rtx_SET (VOIDmode,\n-\t\t\t\t       gen_rtx_MEM (DFmode, addr),\n+\t\t\t  gen_rtx_SET (gen_rtx_MEM (DFmode, addr),\n \t\t\t\t       gen_rtx_REG (DFmode, i)));\n \t  }\n     }\n@@ -9006,11 +9007,11 @@ s390_emit_epilogue (bool sibcall)\n       offset = area_bottom < 0 ? -area_bottom : 0;\n       frame_off = GEN_INT (cfun_frame_layout.frame_size - offset);\n \n-      cfa = gen_rtx_SET (VOIDmode, frame_pointer,\n+      cfa = gen_rtx_SET (frame_pointer,\n \t\t\t gen_rtx_PLUS (Pmode, frame_pointer, frame_off));\n       if (DISP_IN_RANGE (INTVAL (frame_off)))\n \t{\n-\t  insn = gen_rtx_SET (VOIDmode, frame_pointer,\n+\t  insn = gen_rtx_SET (frame_pointer,\n \t\t\t      gen_rtx_PLUS (Pmode, frame_pointer, frame_off));\n \t  insn = emit_insn (insn);\n \t}\n@@ -10813,7 +10814,7 @@ s390_emit_call (rtx addr_location, rtx tls_call, rtx result_reg,\n   call = gen_rtx_CALL (VOIDmode, addr_location, const0_rtx);\n \n   if (result_reg != NULL_RTX)\n-    call = gen_rtx_SET (VOIDmode, result_reg, call);\n+    call = gen_rtx_SET (result_reg, call);\n \n   if (retaddr_reg != NULL_RTX)\n     {\n@@ -11155,7 +11156,7 @@ s390_fix_long_loop_prediction (rtx_insn *insn)\n \n   new_label = gen_label_rtx ();\n   uncond_jump = emit_jump_insn_after (\n-\t\t  gen_rtx_SET (VOIDmode, pc_rtx,\n+\t\t  gen_rtx_SET (pc_rtx,\n \t\t\t       gen_rtx_LABEL_REF (VOIDmode, code_label)),\n \t\t  insn);\n   emit_label_after (new_label, uncond_jump);"}, {"sha": "a377a1f08763667fecaab3e4e8a8212d7d29b6f6", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1900,7 +1900,7 @@\n     {\n       rtx tmp = gen_reg_rtx (SImode);\n       rtx ext = gen_rtx_SIGN_EXTEND (SImode, operands[1]);\n-      emit_insn (gen_rtx_SET (VOIDmode, tmp, ext));\n+      emit_insn (gen_rtx_SET (tmp, ext));\n       operands[1] = gen_lowpart (HImode, tmp);\n     }\n })\n@@ -1959,7 +1959,7 @@\n     {\n       rtx tmp = gen_reg_rtx (DImode);\n       rtx ext = gen_rtx_ZERO_EXTEND (DImode, operands[1]);\n-      emit_insn (gen_rtx_SET (VOIDmode, tmp, ext));\n+      emit_insn (gen_rtx_SET (tmp, ext));\n       operands[1] = gen_lowpart (QImode, tmp);\n     }\n })\n@@ -2446,7 +2446,7 @@\n \n   for (i = 0; i < count; i++)\n     XVECEXP (operands[3], 0, i)\n-      = gen_rtx_SET (VOIDmode, gen_rtx_REG (mode, regno + i),\n+      = gen_rtx_SET (gen_rtx_REG (mode, regno + i),\n \t\t     change_address (operands[1], mode,\n \t\t       plus_constant (Pmode, from,\n \t\t\t\t      off + i * GET_MODE_SIZE (mode))));\n@@ -2537,8 +2537,7 @@\n \n   for (i = 0; i < count; i++)\n     XVECEXP (operands[3], 0, i)\n-      = gen_rtx_SET (VOIDmode,\n-\t\t     change_address (operands[0], mode,\n+      = gen_rtx_SET (change_address (operands[0], mode,\n \t\t       plus_constant (Pmode, to,\n \t\t\t\t      off + i * GET_MODE_SIZE (mode))),\n \t\t     gen_rtx_REG (mode, regno + i));"}, {"sha": "9bcb423c11dc4a8543374c51ad0e16397a876262", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2118,7 +2118,7 @@ expand_cbranchsi4 (rtx *operands, enum rtx_code comparison, int probability)\n       branch_expander = gen_branch_false;\n     default: ;\n     }\n-  emit_insn (gen_rtx_SET (VOIDmode, get_t_reg_rtx (),\n+  emit_insn (gen_rtx_SET (get_t_reg_rtx (),\n \t\t\t  gen_rtx_fmt_ee (comparison, SImode,\n \t\t\t\t\t  operands[1], operands[2])));\n   rtx_insn *jump = emit_jump_insn (branch_expander (operands[3]));\n@@ -2432,7 +2432,7 @@ sh_emit_scc_to_t (enum rtx_code code, rtx op0, rtx op1)\n       || (TARGET_SH2E && GET_MODE_CLASS (mode) == MODE_FLOAT))\n     op1 = force_reg (mode, op1);\n \n-  sh_emit_set_t_insn (gen_rtx_SET (VOIDmode, t_reg,\n+  sh_emit_set_t_insn (gen_rtx_SET (t_reg,\n \t\t\t           gen_rtx_fmt_ee (code, SImode, op0, op1)),\n \t\t      mode);\n }\n@@ -2561,8 +2561,7 @@ sh_emit_compare_and_branch (rtx *operands, machine_mode mode)\n       gcc_unreachable ();\n     }\n \n-  insn = gen_rtx_SET (VOIDmode,\n-\t\t      get_t_reg_rtx (),\n+  insn = gen_rtx_SET (get_t_reg_rtx (),\n \t\t      gen_rtx_fmt_ee (branch_code, SImode, op0, op1));\n \n   sh_emit_set_t_insn (insn, mode);\n@@ -3974,7 +3973,7 @@ gen_shifty_op (int code, rtx *operands)\n       /* This can happen even when optimizing, if there were subregs before\n \t reload.  Don't output a nop here, as this is never optimized away;\n \t use a no-op move instead.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0], operands[0]));\n+      emit_insn (gen_rtx_SET (operands[0], operands[0]));\n       return;\n     }\n \n@@ -6546,7 +6545,7 @@ sh_reorg (void)\n \t\t      newsrc = gen_rtx_LABEL_REF (VOIDmode, lab);\n \t\t      newsrc = gen_const_mem (mode, newsrc);\n \t\t    }\n-\t\t  *patp = gen_rtx_SET (VOIDmode, dst, newsrc);\n+\t\t  *patp = gen_rtx_SET (dst, newsrc);\n \t\t  INSN_CODE (scan) = -1;\n \t\t}\n \t    }\n@@ -7087,9 +7086,8 @@ output_stack_adjust (int size, rtx reg, int epilogue_p,\n \t      insn = emit_fn (GEN_ADD3 (reg, reg, const_reg));\n \t    }\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\tgen_rtx_SET (VOIDmode, reg,\n-\t\t\t\t     gen_rtx_PLUS (SImode, reg,\n-\t\t\t\t\t\t   GEN_INT (size))));\n+\t\t\tgen_rtx_SET (reg, gen_rtx_PLUS (SImode, reg,\n+\t\t\t\t\t\t\tGEN_INT (size))));\n \t}\n     }\n }\n@@ -7159,7 +7157,7 @@ pop (int rn)\n \t\t  : SET_DEST (PATTERN (x)));\n   add_reg_note (x, REG_CFA_RESTORE, reg);\n   add_reg_note (x, REG_CFA_ADJUST_CFA,\n-\t\tgen_rtx_SET (SImode, sp_reg,\n+\t\tgen_rtx_SET (sp_reg,\n \t\t\t     plus_constant (SImode, sp_reg,\n \t\t\t\t\t    GET_MODE_SIZE (GET_MODE (reg)))));\n   add_reg_note (x, REG_INC, gen_rtx_REG (SImode, STACK_POINTER_REGNUM));\n@@ -7242,11 +7240,10 @@ push_regs (HARD_REG_SET *mask, int interrupt_handler)\n \t    {\n \t      mem = gen_rtx_MEM (SImode, plus_constant (Pmode, sp_reg, i * 4));\n \t      reg = gen_rtx_REG (SImode, i);\n-\t      add_reg_note (x, REG_CFA_OFFSET, gen_rtx_SET (SImode, mem, reg));\n+\t      add_reg_note (x, REG_CFA_OFFSET, gen_rtx_SET (mem, reg));\n \t    }\n \n-\t  set = gen_rtx_SET (SImode, sp_reg,\n-\t\t\t     plus_constant (Pmode, sp_reg, - 32));\n+\t  set = gen_rtx_SET (sp_reg, plus_constant (Pmode, sp_reg, - 32));\n \t  add_reg_note (x, REG_CFA_ADJUST_CFA, set);\n \t  emit_insn (gen_blockage ());\n \t}\n@@ -7917,7 +7914,7 @@ sh_expand_prologue (void)\n \t      {\n \t\trtx set;\n \n-\t\tset = gen_rtx_SET (VOIDmode, mem_rtx, orig_reg_rtx);\n+\t\tset = gen_rtx_SET (mem_rtx, orig_reg_rtx);\n \t\tadd_reg_note (insn, REG_FRAME_RELATED_EXPR, set);\n \t      }\n \n@@ -7930,7 +7927,7 @@ sh_expand_prologue (void)\n \t\t\t\t\t\t\t   stack_pointer_rtx,\n \t\t\t\t\t\t\t   GEN_INT (offset)));\n \n-\t\tset = gen_rtx_SET (VOIDmode, mem_rtx, reg_rtx);\n+\t\tset = gen_rtx_SET (mem_rtx, reg_rtx);\n \t\tadd_reg_note (insn, REG_FRAME_RELATED_EXPR, set);\n \t      }\n \t  }\n@@ -14173,7 +14170,7 @@ sh_recog_treg_set_expr (rtx op, machine_mode mode)\n      have to capture its current state and restore it afterwards.  */\n   recog_data_d prev_recog_data = recog_data;\n \n-  rtx_insn* i = make_insn_raw (gen_rtx_SET (VOIDmode, get_t_reg_rtx (), op));\n+  rtx_insn* i = make_insn_raw (gen_rtx_SET (get_t_reg_rtx (), op));\n   SET_PREV_INSN (i) = NULL;\n   SET_NEXT_INSN (i) = NULL;\n \n@@ -14286,7 +14283,7 @@ sh_split_treg_set_expr (rtx x, rtx_insn* curr_insn)\n \n   scope_counter in_treg_set_expr (sh_recog_treg_set_expr_reent_count);\n \n-  rtx_insn* i = make_insn_raw (gen_rtx_SET (VOIDmode, get_t_reg_rtx (), x));\n+  rtx_insn* i = make_insn_raw (gen_rtx_SET (get_t_reg_rtx (), x));\n   SET_PREV_INSN (i) = NULL;\n   SET_NEXT_INSN (i) = NULL;\n "}, {"sha": "d3d7dee286337cc3b6dd172cc954a92be184ac4c", "filename": "gcc/config/sh/sh.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fsh%2Fsh.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fsh%2Fsh.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -10417,7 +10417,7 @@ label:\n \t       mach as operand 2, so let the instructions that\n \t       preserve r0 be optimized away if r0 turns out to be\n \t       dead.  */\n-\t    emit_insn_before (gen_rtx_SET (SImode, tmp, r0), insn);\n+\t    emit_insn_before (gen_rtx_SET (tmp, r0), insn);\n \t    emit_move_insn (r0, tmp);\n \t    break;\n \t  }"}, {"sha": "e5ed77cbbec2dc1076a23ea4fec520ad67a59a0e", "filename": "gcc/config/sh/sh_treg_combine.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh_treg_combine.cc?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -960,8 +960,8 @@ sh_treg_combine::make_not_reg_insn (rtx dst_reg, rtx src_reg) const\n \n   start_sequence ();\n \n-  emit_insn (gen_rtx_SET (VOIDmode, m_ccreg,\n-\t\t\t  gen_rtx_fmt_ee (EQ, SImode, src_reg, const0_rtx)));\n+  emit_insn (gen_rtx_SET (m_ccreg, gen_rtx_fmt_ee (EQ, SImode,\n+\t\t\t\t\t\t   src_reg, const0_rtx)));\n \n   if (GET_MODE (dst_reg) == SImode)\n     emit_move_insn (dst_reg, m_ccreg);\n@@ -983,7 +983,7 @@ rtx_insn *\n sh_treg_combine::make_inv_ccreg_insn (void) const\n {\n   start_sequence ();\n-  rtx_insn *i = emit_insn (gen_rtx_SET (VOIDmode, m_ccreg,\n+  rtx_insn *i = emit_insn (gen_rtx_SET (m_ccreg,\n                                         gen_rtx_fmt_ee (XOR, GET_MODE (m_ccreg),\n                                                         m_ccreg, const1_rtx)));\n   end_sequence ();"}, {"sha": "aab6f3d35dd80e72a066bf558ecb4d9ca584c1db", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 99, "deletions": 154, "changes": 253, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1917,22 +1917,18 @@ sparc_emit_set_const32 (rtx op0, rtx op1)\n       /* Emit them as real moves instead of a HIGH/LO_SUM,\n \t this way CSE can see everything and reuse intermediate\n \t values if it wants.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, temp,\n-\t\t\t      GEN_INT (INTVAL (op1)\n-\t\t\t        & ~(HOST_WIDE_INT)0x3ff)));\n+      emit_insn (gen_rtx_SET (temp, GEN_INT (INTVAL (op1)\n+\t\t\t\t\t     & ~(HOST_WIDE_INT) 0x3ff)));\n \n-      emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t      op0,\n+      emit_insn (gen_rtx_SET (op0,\n \t\t\t      gen_rtx_IOR (mode, temp,\n \t\t\t\t\t   GEN_INT (INTVAL (op1) & 0x3ff))));\n     }\n   else\n     {\n       /* A symbol, emit in the traditional way.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, temp,\n-\t\t\t      gen_rtx_HIGH (mode, op1)));\n-      emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t      op0, gen_rtx_LO_SUM (mode, temp, op1)));\n+      emit_insn (gen_rtx_SET (temp, gen_rtx_HIGH (mode, op1)));\n+      emit_insn (gen_rtx_SET (op0, gen_rtx_LO_SUM (mode, temp, op1)));\n     }\n }\n \n@@ -1974,8 +1970,8 @@ sparc_emit_set_symbolic_const64 (rtx op0, rtx op1, rtx temp)\n       else\n \ttemp1 = gen_reg_rtx (DImode);\n \n-      emit_insn (gen_rtx_SET (VOIDmode, temp1, gen_rtx_HIGH (DImode, op1)));\n-      emit_insn (gen_rtx_SET (VOIDmode, op0, gen_rtx_LO_SUM (DImode, temp1, op1)));\n+      emit_insn (gen_rtx_SET (temp1, gen_rtx_HIGH (DImode, op1)));\n+      emit_insn (gen_rtx_SET (op0, gen_rtx_LO_SUM (DImode, temp1, op1)));\n       break;\n \n     case CM_MEDMID:\n@@ -2006,7 +2002,7 @@ sparc_emit_set_symbolic_const64 (rtx op0, rtx op1, rtx temp)\n \n       emit_insn (gen_seth44 (temp1, op1));\n       emit_insn (gen_setm44 (temp2, temp1, op1));\n-      emit_insn (gen_rtx_SET (VOIDmode, temp3,\n+      emit_insn (gen_rtx_SET (temp3,\n \t\t\t      gen_rtx_ASHIFT (DImode, temp2, GEN_INT (12))));\n       emit_insn (gen_setl44 (op0, temp3, op1));\n       break;\n@@ -2054,10 +2050,9 @@ sparc_emit_set_symbolic_const64 (rtx op0, rtx op1, rtx temp)\n       emit_insn (gen_sethh (temp1, op1));\n       emit_insn (gen_setlm (temp2, op1));\n       emit_insn (gen_sethm (temp3, temp1, op1));\n-      emit_insn (gen_rtx_SET (VOIDmode, temp4,\n+      emit_insn (gen_rtx_SET (temp4,\n \t\t\t      gen_rtx_ASHIFT (DImode, temp3, GEN_INT (32))));\n-      emit_insn (gen_rtx_SET (VOIDmode, temp5,\n-\t\t\t      gen_rtx_PLUS (DImode, temp4, temp2)));\n+      emit_insn (gen_rtx_SET (temp5, gen_rtx_PLUS (DImode, temp4, temp2)));\n       emit_insn (gen_setlo (op0, temp5, op1));\n       break;\n \n@@ -2126,10 +2121,9 @@ sparc_emit_set_symbolic_const64 (rtx op0, rtx op1, rtx temp)\n \t  emit_insn (gen_embmedany_textuhi (temp1, op1));\n \t  emit_insn (gen_embmedany_texthi  (temp2, op1));\n \t  emit_insn (gen_embmedany_textulo (temp3, temp1, op1));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, temp4,\n+\t  emit_insn (gen_rtx_SET (temp4,\n \t\t\t\t  gen_rtx_ASHIFT (DImode, temp3, GEN_INT (32))));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, temp5,\n-\t\t\t\t  gen_rtx_PLUS (DImode, temp4, temp2)));\n+\t  emit_insn (gen_rtx_SET (temp5, gen_rtx_PLUS (DImode, temp4, temp2)));\n \t  emit_insn (gen_embmedany_textlo  (op0, temp5, op1));\n \t}\n       break;\n@@ -2162,13 +2156,13 @@ static rtx gen_safe_XOR64 (rtx, HOST_WIDE_INT);\n static rtx\n gen_safe_HIGH64 (rtx dest, HOST_WIDE_INT val)\n {\n-  return gen_rtx_SET (VOIDmode, dest, GEN_INT (val & ~(HOST_WIDE_INT)0x3ff));\n+  return gen_rtx_SET (dest, GEN_INT (val & ~(HOST_WIDE_INT)0x3ff));\n }\n \n static rtx\n gen_safe_SET64 (rtx dest, HOST_WIDE_INT val)\n {\n-  return gen_rtx_SET (VOIDmode, dest, GEN_INT (val));\n+  return gen_rtx_SET (dest, GEN_INT (val));\n }\n \n static rtx\n@@ -2208,8 +2202,7 @@ sparc_emit_set_const64_quick1 (rtx op0, rtx temp,\n   emit_insn (gen_safe_HIGH64 (temp, high_bits));\n   if (!is_neg)\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, op0,\n-\t\t\t      gen_safe_OR64 (temp, (high_bits & 0x3ff))));\n+      emit_insn (gen_rtx_SET (op0, gen_safe_OR64 (temp, (high_bits & 0x3ff))));\n     }\n   else\n     {\n@@ -2218,12 +2211,11 @@ sparc_emit_set_const64_quick1 (rtx op0, rtx temp,\n \t such as ANDN later on and substitute.  */\n       if ((low_bits & 0x3ff) == 0x3ff)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, op0,\n-\t\t\t\t  gen_rtx_NOT (DImode, temp)));\n+\t  emit_insn (gen_rtx_SET (op0, gen_rtx_NOT (DImode, temp)));\n \t}\n       else\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, op0,\n+\t  emit_insn (gen_rtx_SET (op0,\n \t\t\t\t  gen_safe_XOR64 (temp,\n \t\t\t\t\t\t  (-(HOST_WIDE_INT)0x400\n \t\t\t\t\t\t   | (low_bits & 0x3ff)))));\n@@ -2246,7 +2238,7 @@ sparc_emit_set_const64_quick2 (rtx op0, rtx temp,\n     {\n       emit_insn (gen_safe_HIGH64 (temp, high_bits));\n       if ((high_bits & ~0xfffffc00) != 0)\n-\temit_insn (gen_rtx_SET (VOIDmode, op0,\n+\temit_insn (gen_rtx_SET (op0,\n \t\t\t\tgen_safe_OR64 (temp, (high_bits & 0x3ff))));\n       else\n \ttemp2 = temp;\n@@ -2258,15 +2250,13 @@ sparc_emit_set_const64_quick2 (rtx op0, rtx temp,\n     }\n \n   /* Now shift it up into place.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, op0,\n-\t\t\t  gen_rtx_ASHIFT (DImode, temp2,\n-\t\t\t\t\t  GEN_INT (shift_count))));\n+  emit_insn (gen_rtx_SET (op0, gen_rtx_ASHIFT (DImode, temp2,\n+\t\t\t\t\t       GEN_INT (shift_count))));\n \n   /* If there is a low immediate part piece, finish up by\n      putting that in as well.  */\n   if (low_immediate != 0)\n-    emit_insn (gen_rtx_SET (VOIDmode, op0,\n-\t\t\t    gen_safe_OR64 (op0, low_immediate)));\n+    emit_insn (gen_rtx_SET (op0, gen_safe_OR64 (op0, low_immediate)));\n }\n \n static void sparc_emit_set_const64_longway (rtx, rtx, unsigned HOST_WIDE_INT,\n@@ -2288,8 +2278,7 @@ sparc_emit_set_const64_longway (rtx op0, rtx temp,\n     {\n       emit_insn (gen_safe_HIGH64 (temp, high_bits));\n       if ((high_bits & ~0xfffffc00) != 0)\n-\temit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\tsub_temp,\n+\temit_insn (gen_rtx_SET (sub_temp,\n \t\t\t\tgen_safe_OR64 (temp, (high_bits & 0x3ff))));\n       else\n \tsub_temp = temp;\n@@ -2306,22 +2295,19 @@ sparc_emit_set_const64_longway (rtx op0, rtx temp,\n       rtx temp3 = gen_reg_rtx (DImode);\n       rtx temp4 = gen_reg_rtx (DImode);\n \n-      emit_insn (gen_rtx_SET (VOIDmode, temp4,\n-\t\t\t      gen_rtx_ASHIFT (DImode, sub_temp,\n-\t\t\t\t\t      GEN_INT (32))));\n+      emit_insn (gen_rtx_SET (temp4, gen_rtx_ASHIFT (DImode, sub_temp,\n+\t\t\t\t\t\t     GEN_INT (32))));\n \n       emit_insn (gen_safe_HIGH64 (temp2, low_bits));\n       if ((low_bits & ~0xfffffc00) != 0)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, temp3,\n+\t  emit_insn (gen_rtx_SET (temp3,\n \t\t\t\t  gen_safe_OR64 (temp2, (low_bits & 0x3ff))));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, op0,\n-\t\t\t\t  gen_rtx_PLUS (DImode, temp4, temp3)));\n+\t  emit_insn (gen_rtx_SET (op0, gen_rtx_PLUS (DImode, temp4, temp3)));\n \t}\n       else\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, op0,\n-\t\t\t\t  gen_rtx_PLUS (DImode, temp4, temp2)));\n+\t  emit_insn (gen_rtx_SET (op0, gen_rtx_PLUS (DImode, temp4, temp2)));\n \t}\n     }\n   else\n@@ -2336,11 +2322,9 @@ sparc_emit_set_const64_longway (rtx op0, rtx temp,\n \t avoid emitting truly stupid code.  */\n       if (low1 != const0_rtx)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, op0,\n-\t\t\t\t  gen_rtx_ASHIFT (DImode, sub_temp,\n-\t\t\t\t\t\t  GEN_INT (to_shift))));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, op0,\n-\t\t\t\t  gen_rtx_IOR (DImode, op0, low1)));\n+\t  emit_insn (gen_rtx_SET (op0, gen_rtx_ASHIFT (DImode, sub_temp,\n+\t\t\t\t\t\t       GEN_INT (to_shift))));\n+\t  emit_insn (gen_rtx_SET (op0, gen_rtx_IOR (DImode, op0, low1)));\n \t  sub_temp = op0;\n \t  to_shift = 12;\n \t}\n@@ -2350,24 +2334,20 @@ sparc_emit_set_const64_longway (rtx op0, rtx temp,\n \t}\n       if (low2 != const0_rtx)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, op0,\n-\t\t\t\t  gen_rtx_ASHIFT (DImode, sub_temp,\n-\t\t\t\t\t\t  GEN_INT (to_shift))));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, op0,\n-\t\t\t\t  gen_rtx_IOR (DImode, op0, low2)));\n+\t  emit_insn (gen_rtx_SET (op0, gen_rtx_ASHIFT (DImode, sub_temp,\n+\t\t\t\t\t\t       GEN_INT (to_shift))));\n+\t  emit_insn (gen_rtx_SET (op0, gen_rtx_IOR (DImode, op0, low2)));\n \t  sub_temp = op0;\n \t  to_shift = 8;\n \t}\n       else\n \t{\n \t  to_shift += 8;\n \t}\n-      emit_insn (gen_rtx_SET (VOIDmode, op0,\n-\t\t\t      gen_rtx_ASHIFT (DImode, sub_temp,\n-\t\t\t\t\t      GEN_INT (to_shift))));\n+      emit_insn (gen_rtx_SET (op0, gen_rtx_ASHIFT (DImode, sub_temp,\n+\t\t\t\t\t\t   GEN_INT (to_shift))));\n       if (low3 != const0_rtx)\n-\temit_insn (gen_rtx_SET (VOIDmode, op0,\n-\t\t\t\tgen_rtx_IOR (DImode, op0, low3)));\n+\temit_insn (gen_rtx_SET (op0, gen_rtx_IOR (DImode, op0, low3)));\n       /* phew...  */\n     }\n }\n@@ -2565,17 +2545,11 @@ sparc_emit_set_const64 (rtx op0, rtx op1)\n \n       emit_insn (gen_safe_SET64 (temp, the_const));\n       if (shift > 0)\n-\temit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\top0,\n-\t\t\t\tgen_rtx_ASHIFT (DImode,\n-\t\t\t\t\t\ttemp,\n-\t\t\t\t\t\tGEN_INT (shift))));\n+\temit_insn (gen_rtx_SET (op0, gen_rtx_ASHIFT (DImode, temp,\n+\t\t\t\t\t\t     GEN_INT (shift))));\n       else if (shift < 0)\n-\temit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\top0,\n-\t\t\t\tgen_rtx_LSHIFTRT (DImode,\n-\t\t\t\t\t\t  temp,\n-\t\t\t\t\t\t  GEN_INT (-shift))));\n+\temit_insn (gen_rtx_SET (op0, gen_rtx_LSHIFTRT (DImode, temp,\n+\t\t\t\t\t\t       GEN_INT (-shift))));\n       return;\n     }\n \n@@ -2598,13 +2572,11 @@ sparc_emit_set_const64 (rtx op0, rtx op1)\n \n       /* If lowest_bit_set == 10 then a sethi alone could have done it.  */\n       if (lowest_bit_set < 10)\n-\temit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\top0,\n+\temit_insn (gen_rtx_SET (op0,\n \t\t\t\tgen_rtx_LSHIFTRT (DImode, temp,\n \t\t\t\t\t\t  GEN_INT (10 - lowest_bit_set))));\n       else if (lowest_bit_set > 10)\n-\temit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\top0,\n+\temit_insn (gen_rtx_SET (op0,\n \t\t\t\tgen_rtx_ASHIFT (DImode, temp,\n \t\t\t\t\t\tGEN_INT (lowest_bit_set - 10))));\n       return;\n@@ -2671,13 +2643,11 @@ sparc_emit_set_const64 (rtx op0, rtx op1)\n \t such as ANDN later on and substitute.  */\n       if (trailing_bits == 0x3ff)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, op0,\n-\t\t\t\t  gen_rtx_NOT (DImode, temp)));\n+\t  emit_insn (gen_rtx_SET (op0, gen_rtx_NOT (DImode, temp)));\n \t}\n       else\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  op0,\n+\t  emit_insn (gen_rtx_SET (op0,\n \t\t\t\t  gen_safe_XOR64 (temp,\n \t\t\t\t\t\t  (-0x400 | trailing_bits))));\n \t}\n@@ -2839,7 +2809,7 @@ gen_compare_reg_1 (enum rtx_code code, rtx x, rtx y)\n \n   /* We shouldn't get there for TFmode if !TARGET_HARD_QUAD.  If we do, this\n      will only result in an unrecognizable insn so no point in asserting.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, cc_reg, gen_rtx_COMPARE (mode, x, y)));\n+  emit_insn (gen_rtx_SET (cc_reg, gen_rtx_COMPARE (mode, x, y)));\n \n   return cc_reg;\n }\n@@ -2896,7 +2866,7 @@ gen_v9_scc (rtx dest, enum rtx_code compare_code, rtx x, rtx y)\n \t  && GET_MODE (dest) == DImode\n \t  && rtx_equal_p (op0, dest))\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, dest,\n+\t  emit_insn (gen_rtx_SET (dest,\n \t\t\t      gen_rtx_IF_THEN_ELSE (DImode,\n \t\t\t\t       gen_rtx_fmt_ee (compare_code, DImode,\n \t\t\t\t\t\t       op0, const0_rtx),\n@@ -2913,15 +2883,15 @@ gen_v9_scc (rtx dest, enum rtx_code compare_code, rtx x, rtx y)\n \t  emit_move_insn (op0, x);\n \t}\n \n-      emit_insn (gen_rtx_SET (VOIDmode, dest, const0_rtx));\n+      emit_insn (gen_rtx_SET (dest, const0_rtx));\n       if (GET_MODE (op0) != DImode)\n \t{\n \t  temp = gen_reg_rtx (DImode);\n \t  convert_move (temp, op0, 0);\n \t}\n       else\n \ttemp = op0;\n-      emit_insn (gen_rtx_SET (VOIDmode, dest,\n+      emit_insn (gen_rtx_SET (dest,\n \t\t\t  gen_rtx_IF_THEN_ELSE (GET_MODE (dest),\n \t\t\t\t   gen_rtx_fmt_ee (compare_code, DImode,\n \t\t\t\t\t\t   temp, const0_rtx),\n@@ -2937,8 +2907,8 @@ gen_v9_scc (rtx dest, enum rtx_code compare_code, rtx x, rtx y)\n       gcc_assert (GET_MODE (x) != CC_NOOVmode\n \t\t  && GET_MODE (x) != CCX_NOOVmode);\n \n-      emit_insn (gen_rtx_SET (VOIDmode, dest, const0_rtx));\n-      emit_insn (gen_rtx_SET (VOIDmode, dest,\n+      emit_insn (gen_rtx_SET (dest, const0_rtx));\n+      emit_insn (gen_rtx_SET (dest,\n \t\t\t  gen_rtx_IF_THEN_ELSE (GET_MODE (dest),\n \t\t\t\t   gen_rtx_fmt_ee (compare_code,\n \t\t\t\t\t\t   GET_MODE (x), x, y),\n@@ -3047,7 +3017,7 @@ emit_scc_insn (rtx operands[])\n   if (code == LTU\n       || (!TARGET_VIS3 && code == GEU))\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+      emit_insn (gen_rtx_SET (operands[0],\n \t\t\t      gen_rtx_fmt_ee (code, GET_MODE (operands[0]),\n \t\t\t\t\t      gen_compare_reg_1 (code, x, y),\n \t\t\t\t\t      const0_rtx)));\n@@ -3071,8 +3041,7 @@ emit_scc_insn (rtx operands[])\n static void\n emit_v9_brxx_insn (enum rtx_code code, rtx op0, rtx label)\n {\n-  emit_jump_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t   pc_rtx,\n+  emit_jump_insn (gen_rtx_SET (pc_rtx,\n \t\t\t   gen_rtx_IF_THEN_ELSE (VOIDmode,\n \t\t\t\t    gen_rtx_fmt_ee (code, GET_MODE (op0),\n \t\t\t\t\t\t    op0, const0_rtx),\n@@ -3095,7 +3064,7 @@ emit_cbcond_insn (enum rtx_code code, rtx op0, rtx op1, rtx label)\n \t\t\t\t       gen_rtx_LABEL_REF (VOIDmode, label),\n \t\t\t\t       pc_rtx);\n \n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, if_then_else));\n+  emit_jump_insn (gen_rtx_SET (pc_rtx, if_then_else));\n }\n \n void\n@@ -3414,7 +3383,7 @@ emit_hard_tfmode_operation (enum rtx_code code, rtx *operands)\n   else\n     dest = gen_reg_rtx (GET_MODE (operands[0]));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, dest, op));\n+  emit_insn (gen_rtx_SET (dest, op));\n \n   if (dest != operands[0])\n     emit_move_insn (operands[0], dest);\n@@ -5127,7 +5096,7 @@ sparc_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n   if (size <= PROBE_INTERVAL)\n     {\n       emit_move_insn (g1, GEN_INT (first));\n-      emit_insn (gen_rtx_SET (VOIDmode, g1,\n+      emit_insn (gen_rtx_SET (g1,\n \t\t\t      gen_rtx_MINUS (Pmode, stack_pointer_rtx, g1)));\n       emit_stack_probe (plus_constant (Pmode, g1, -size));\n     }\n@@ -5139,7 +5108,7 @@ sparc_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n       HOST_WIDE_INT i;\n \n       emit_move_insn (g1, GEN_INT (first + PROBE_INTERVAL));\n-      emit_insn (gen_rtx_SET (VOIDmode, g1,\n+      emit_insn (gen_rtx_SET (g1,\n \t\t\t      gen_rtx_MINUS (Pmode, stack_pointer_rtx, g1)));\n       emit_stack_probe (g1);\n \n@@ -5148,7 +5117,7 @@ sparc_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n \t generate any code.  Then probe at FIRST + SIZE.  */\n       for (i = 2 * PROBE_INTERVAL; i < size; i += PROBE_INTERVAL)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode, g1,\n+\t  emit_insn (gen_rtx_SET (g1,\n \t\t\t\t  plus_constant (Pmode, g1, -PROBE_INTERVAL)));\n \t  emit_stack_probe (g1);\n \t}\n@@ -5179,11 +5148,11 @@ sparc_emit_probe_stack_range (HOST_WIDE_INT first, HOST_WIDE_INT size)\n       /* Step 2: compute initial and final value of the loop counter.  */\n \n       /* TEST_ADDR = SP + FIRST.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, g1,\n+      emit_insn (gen_rtx_SET (g1,\n \t\t\t      gen_rtx_MINUS (Pmode, stack_pointer_rtx, g1)));\n \n       /* LAST_ADDR = SP + FIRST + ROUNDED_SIZE.  */\n-      emit_insn (gen_rtx_SET (VOIDmode, g4, gen_rtx_MINUS (Pmode, g1, g4)));\n+      emit_insn (gen_rtx_SET (g4, gen_rtx_MINUS (Pmode, g1, g4)));\n \n \n       /* Step 3: the loop\n@@ -5357,14 +5326,12 @@ emit_save_or_restore_regs (unsigned int low, unsigned int high, rtx base,\n \t\t  rtx set1, set2;\n \t\t  mem = gen_frame_mem (SImode, plus_constant (Pmode, base,\n \t\t\t\t\t\t\t      offset));\n-\t\t  set1 = gen_rtx_SET (VOIDmode, mem,\n-\t\t\t\t      gen_rtx_REG (SImode, regno));\n+\t\t  set1 = gen_rtx_SET (mem, gen_rtx_REG (SImode, regno));\n \t\t  RTX_FRAME_RELATED_P (set1) = 1;\n \t\t  mem\n \t\t    = gen_frame_mem (SImode, plus_constant (Pmode, base,\n \t\t\t\t\t\t\t    offset + 4));\n-\t\t  set2 = gen_rtx_SET (VOIDmode, mem,\n-\t\t\t\t      gen_rtx_REG (SImode, regno + 1));\n+\t\t  set2 = gen_rtx_SET (mem, gen_rtx_REG (SImode, regno + 1));\n \t\t  RTX_FRAME_RELATED_P (set2) = 1;\n \t\t  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n \t\t\t\tgen_rtx_PARALLEL (VOIDmode,\n@@ -5394,8 +5361,7 @@ emit_adjust_base_to_offset (rtx base, int offset)\n      lose (the result will be clobbered).  */\n   rtx new_base = gen_rtx_REG (Pmode, 1);\n   emit_move_insn (new_base, GEN_INT (offset));\n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  new_base, gen_rtx_PLUS (Pmode, base, new_base)));\n+  emit_insn (gen_rtx_SET (new_base, gen_rtx_PLUS (Pmode, base, new_base)));\n   return new_base;\n }\n \n@@ -5442,8 +5408,7 @@ emit_window_save (rtx increment)\n \n   /* The incoming return address (%o7) is saved in %i7.  */\n   add_reg_note (insn, REG_CFA_REGISTER,\n-\t\tgen_rtx_SET (VOIDmode,\n-\t\t\t     gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM),\n+\t\tgen_rtx_SET (gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM),\n \t\t\t     gen_rtx_REG (Pmode,\n \t\t\t\t\t  INCOMING_RETURN_ADDR_REGNUM)));\n \n@@ -5463,8 +5428,7 @@ emit_window_save (rtx increment)\n static rtx\n gen_stack_pointer_inc (rtx increment)\n {\n-  return gen_rtx_SET (VOIDmode,\n-\t\t      stack_pointer_rtx,\n+  return gen_rtx_SET (stack_pointer_rtx,\n \t\t      gen_rtx_PLUS (Pmode,\n \t\t\t\t    stack_pointer_rtx,\n \t\t\t\t    increment));\n@@ -5672,14 +5636,14 @@ sparc_flat_expand_prologue (void)\n \n       if (frame_pointer_needed)\n \t{\n-\t  insn = emit_insn (gen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n+\t  insn = emit_insn (gen_rtx_SET (hard_frame_pointer_rtx,\n \t\t\t\t\t gen_rtx_MINUS (Pmode,\n \t\t\t\t\t\t\tstack_pointer_rtx,\n \t\t\t\t\t\t\tsize_rtx)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \n \t  add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-\t\t\tgen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n+\t\t\tgen_rtx_SET (hard_frame_pointer_rtx,\n \t\t\t\t     plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t    size)));\n \t}\n@@ -5692,8 +5656,7 @@ sparc_flat_expand_prologue (void)\n \t  insn = emit_move_insn (i7, o7);\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n \n-\t  add_reg_note (insn, REG_CFA_REGISTER,\n-\t\t\tgen_rtx_SET (VOIDmode, i7, o7));\n+\t  add_reg_note (insn, REG_CFA_REGISTER, gen_rtx_SET (i7, o7));\n \n \t  /* Prevent this instruction from ever being considered dead,\n \t     even if this function has no epilogue.  */\n@@ -8090,7 +8053,7 @@ sparc_emit_floatunsdi (rtx *operands, machine_mode mode)\n \n   emit_cmp_and_jump_insns (in, const0_rtx, LT, const0_rtx, DImode, 0, neglab);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, out, gen_rtx_FLOAT (mode, in)));\n+  emit_insn (gen_rtx_SET (out, gen_rtx_FLOAT (mode, in)));\n   emit_jump_insn (gen_jump (donelab));\n   emit_barrier ();\n \n@@ -8099,8 +8062,8 @@ sparc_emit_floatunsdi (rtx *operands, machine_mode mode)\n   emit_insn (gen_lshrdi3 (i0, in, const1_rtx));\n   emit_insn (gen_anddi3 (i1, in, const1_rtx));\n   emit_insn (gen_iordi3 (i0, i0, i1));\n-  emit_insn (gen_rtx_SET (VOIDmode, f0, gen_rtx_FLOAT (mode, i0)));\n-  emit_insn (gen_rtx_SET (VOIDmode, out, gen_rtx_PLUS (mode, f0, f0)));\n+  emit_insn (gen_rtx_SET (f0, gen_rtx_FLOAT (mode, i0)));\n+  emit_insn (gen_rtx_SET (out, gen_rtx_PLUS (mode, f0, f0)));\n \n   emit_label (donelab);\n }\n@@ -8127,17 +8090,15 @@ sparc_emit_fixunsdi (rtx *operands, machine_mode mode)\n \t\t    REAL_VALUE_ATOF (\"9223372036854775808.0\", mode), mode));\n   emit_cmp_and_jump_insns (in, limit, GE, NULL_RTX, mode, 0, neglab);\n \n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  out,\n+  emit_insn (gen_rtx_SET (out,\n \t\t\t  gen_rtx_FIX (DImode, gen_rtx_FIX (mode, in))));\n   emit_jump_insn (gen_jump (donelab));\n   emit_barrier ();\n \n   emit_label (neglab);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, f0, gen_rtx_MINUS (mode, in, limit)));\n-  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t  i0,\n+  emit_insn (gen_rtx_SET (f0, gen_rtx_MINUS (mode, in, limit)));\n+  emit_insn (gen_rtx_SET (i0,\n \t\t\t  gen_rtx_FIX (DImode, gen_rtx_FIX (mode, f0))));\n   emit_insn (gen_movdi (i1, const1_rtx));\n   emit_insn (gen_ashldi3 (i1, i1, GEN_INT (63)));\n@@ -11271,17 +11232,15 @@ emit_and_preserve (rtx seq, rtx reg, rtx reg2)\n \t\t\t\t\t     SPARC_STACK_BIAS + offset));\n \n   emit_insn (gen_stack_pointer_inc (GEN_INT (-size)));\n-  emit_insn (gen_rtx_SET (VOIDmode, slot, reg));\n+  emit_insn (gen_rtx_SET (slot, reg));\n   if (reg2)\n-    emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t    adjust_address (slot, word_mode, UNITS_PER_WORD),\n+    emit_insn (gen_rtx_SET (adjust_address (slot, word_mode, UNITS_PER_WORD),\n \t\t\t    reg2));\n   emit_insn (seq);\n   if (reg2)\n-    emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t    reg2,\n+    emit_insn (gen_rtx_SET (reg2,\n \t\t\t    adjust_address (slot, word_mode, UNITS_PER_WORD)));\n-  emit_insn (gen_rtx_SET (VOIDmode, reg, slot));\n+  emit_insn (gen_rtx_SET (reg, slot));\n   emit_insn (gen_stack_pointer_inc (GEN_INT (size)));\n }\n \n@@ -11440,11 +11399,9 @@ sparc_output_mi_thunk (FILE *file, tree thunk_fndecl ATTRIBUTE_UNUSED,\n \t}\n       else if (TARGET_ARCH32)\n \t{\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  scratch,\n+\t  emit_insn (gen_rtx_SET (scratch,\n \t\t\t\t  gen_rtx_HIGH (SImode, funexp)));\n-\t  emit_insn (gen_rtx_SET (VOIDmode,\n-\t\t\t\t  scratch,\n+\t  emit_insn (gen_rtx_SET (scratch,\n \t\t\t\t  gen_rtx_LO_SUM (SImode, scratch, funexp)));\n \t}\n       else  /* TARGET_ARCH64 */\n@@ -11724,90 +11681,78 @@ sparc_expand_compare_and_swap_12 (rtx bool_result, rtx result, rtx mem,\n   rtx resv = gen_reg_rtx (SImode);\n   rtx memsi, val, mask, cc;\n \n-  emit_insn (gen_rtx_SET (VOIDmode, addr,\n-\t\t\t  gen_rtx_AND (Pmode, addr1, GEN_INT (-4))));\n+  emit_insn (gen_rtx_SET (addr, gen_rtx_AND (Pmode, addr1, GEN_INT (-4))));\n \n   if (Pmode != SImode)\n     addr1 = gen_lowpart (SImode, addr1);\n-  emit_insn (gen_rtx_SET (VOIDmode, off,\n-\t\t\t  gen_rtx_AND (SImode, addr1, GEN_INT (3))));\n+  emit_insn (gen_rtx_SET (off, gen_rtx_AND (SImode, addr1, GEN_INT (3))));\n \n   memsi = gen_rtx_MEM (SImode, addr);\n   set_mem_alias_set (memsi, ALIAS_SET_MEMORY_BARRIER);\n   MEM_VOLATILE_P (memsi) = MEM_VOLATILE_P (mem);\n \n   val = copy_to_reg (memsi);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, off,\n+  emit_insn (gen_rtx_SET (off,\n \t\t\t  gen_rtx_XOR (SImode, off,\n \t\t\t\t       GEN_INT (GET_MODE (mem) == QImode\n \t\t\t\t\t\t? 3 : 2))));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, off,\n-\t\t\t  gen_rtx_ASHIFT (SImode, off, GEN_INT (3))));\n+  emit_insn (gen_rtx_SET (off, gen_rtx_ASHIFT (SImode, off, GEN_INT (3))));\n \n   if (GET_MODE (mem) == QImode)\n     mask = force_reg (SImode, GEN_INT (0xff));\n   else\n     mask = force_reg (SImode, GEN_INT (0xffff));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, mask,\n-\t\t\t  gen_rtx_ASHIFT (SImode, mask, off)));\n+  emit_insn (gen_rtx_SET (mask, gen_rtx_ASHIFT (SImode, mask, off)));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, val,\n+  emit_insn (gen_rtx_SET (val,\n \t\t\t  gen_rtx_AND (SImode, gen_rtx_NOT (SImode, mask),\n \t\t\t\t       val)));\n \n   oldval = gen_lowpart (SImode, oldval);\n-  emit_insn (gen_rtx_SET (VOIDmode, oldv,\n-\t\t\t  gen_rtx_ASHIFT (SImode, oldval, off)));\n+  emit_insn (gen_rtx_SET (oldv, gen_rtx_ASHIFT (SImode, oldval, off)));\n \n   newval = gen_lowpart_common (SImode, newval);\n-  emit_insn (gen_rtx_SET (VOIDmode, newv,\n-\t\t\t  gen_rtx_ASHIFT (SImode, newval, off)));\n+  emit_insn (gen_rtx_SET (newv, gen_rtx_ASHIFT (SImode, newval, off)));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, oldv,\n-\t\t\t  gen_rtx_AND (SImode, oldv, mask)));\n+  emit_insn (gen_rtx_SET (oldv, gen_rtx_AND (SImode, oldv, mask)));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, newv,\n-\t\t\t  gen_rtx_AND (SImode, newv, mask)));\n+  emit_insn (gen_rtx_SET (newv, gen_rtx_AND (SImode, newv, mask)));\n \n   rtx_code_label *end_label = gen_label_rtx ();\n   rtx_code_label *loop_label = gen_label_rtx ();\n   emit_label (loop_label);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, oldvalue,\n-\t\t\t  gen_rtx_IOR (SImode, oldv, val)));\n+  emit_insn (gen_rtx_SET (oldvalue, gen_rtx_IOR (SImode, oldv, val)));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, newvalue,\n-\t\t\t  gen_rtx_IOR (SImode, newv, val)));\n+  emit_insn (gen_rtx_SET (newvalue, gen_rtx_IOR (SImode, newv, val)));\n \n   emit_move_insn (bool_result, const1_rtx);\n \n   emit_insn (gen_atomic_compare_and_swapsi_1 (res, memsi, oldvalue, newvalue));\n \n   emit_cmp_and_jump_insns (res, oldvalue, EQ, NULL, SImode, 0, end_label);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, resv,\n+  emit_insn (gen_rtx_SET (resv,\n \t\t\t  gen_rtx_AND (SImode, gen_rtx_NOT (SImode, mask),\n \t\t\t\t       res)));\n \n   emit_move_insn (bool_result, const0_rtx);\n \n   cc = gen_compare_reg_1 (NE, resv, val);\n-  emit_insn (gen_rtx_SET (VOIDmode, val, resv));\n+  emit_insn (gen_rtx_SET (val, resv));\n \n   /* Use cbranchcc4 to separate the compare and branch!  */\n   emit_jump_insn (gen_cbranchcc4 (gen_rtx_NE (VOIDmode, cc, const0_rtx),\n \t\t\t\t  cc, const0_rtx, loop_label));\n \n   emit_label (end_label);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, res,\n-\t\t\t  gen_rtx_AND (SImode, res, mask)));\n+  emit_insn (gen_rtx_SET (res, gen_rtx_AND (SImode, res, mask)));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, res,\n-\t\t\t  gen_rtx_LSHIFTRT (SImode, res, off)));\n+  emit_insn (gen_rtx_SET (res, gen_rtx_LSHIFTRT (SImode, res, off)));\n \n   emit_move_insn (result, gen_lowpart (GET_MODE (result), res));\n }\n@@ -12467,7 +12412,7 @@ sparc_expand_conditional_move (machine_mode mode, rtx *operands)\n \n   cmp = gen_rtx_fmt_ee (rc, GET_MODE (cc_reg), cc_reg, const0_rtx);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, dst,\n+  emit_insn (gen_rtx_SET (dst,\n \t\t\t  gen_rtx_IF_THEN_ELSE (mode, cmp, operands[2], dst)));\n \n   if (dst != operands[0])\n@@ -12513,10 +12458,10 @@ sparc_expand_vcond (machine_mode mode, rtx *operands, int ccode, int fcode)\n \t\t\t  gen_rtvec (3, operands[1], operands[2], gsr),\n \t\t\t  UNSPEC_BSHUFFLE);\n \n-  emit_insn (gen_rtx_SET (VOIDmode, mask, fcmp));\n-  emit_insn (gen_rtx_SET (VOIDmode, gsr, cmask));\n+  emit_insn (gen_rtx_SET (mask, fcmp));\n+  emit_insn (gen_rtx_SET (gsr, cmask));\n \n-  emit_insn (gen_rtx_SET (VOIDmode, operands[0], bshuf));\n+  emit_insn (gen_rtx_SET (operands[0], bshuf));\n }\n \n /* On sparc, any mode which naturally allocates into the float"}, {"sha": "d059cc189d0dce531df013e3e16bce88f0d622d8", "filename": "gcc/config/sparc/sparc.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fsparc%2Fsparc.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -3681,7 +3681,7 @@\n   if (! TARGET_ARCH64)\n     {\n       emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2,\n-\t\t\t  gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t  gen_rtx_SET (operands[0],\n \t\t\t\t   gen_rtx_PLUS (DImode, operands[1],\n \t\t\t\t\t\t operands[2])),\n \t\t\t  gen_rtx_CLOBBER (VOIDmode,\n@@ -3871,7 +3871,7 @@\n   if (! TARGET_ARCH64)\n     {\n       emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2,\n-\t\t\t  gen_rtx_SET (VOIDmode, operands[0],\n+\t\t\t  gen_rtx_SET (operands[0],\n \t\t\t\t   gen_rtx_MINUS (DImode, operands[1],\n \t\t\t\t\t\t  operands[2])),\n \t\t\t  gen_rtx_CLOBBER (VOIDmode,\n@@ -5152,7 +5152,7 @@\n       emit_insn (gen_rtx_PARALLEL\n \t\t (VOIDmode,\n \t\t  gen_rtvec (2,\n-\t\t\t     gen_rtx_SET (VOIDmode, operand0,\n+\t\t\t     gen_rtx_SET (operand0,\n \t\t\t\t\t  gen_rtx_NEG (DImode, operand1)),\n \t\t\t     gen_rtx_CLOBBER (VOIDmode,\n \t\t\t\t\t      gen_rtx_REG (CCmode,\n@@ -6209,15 +6209,15 @@\n \t  (gen_rtx_PARALLEL\n \t   (VOIDmode,\n \t    gen_rtvec (3,\n-\t\t       gen_rtx_SET (VOIDmode, pc_rtx, XEXP (operands[0], 0)),\n+\t\t       gen_rtx_SET (pc_rtx, XEXP (operands[0], 0)),\n \t\t       operands[3],\n \t\t       gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, 15)))));\n       else\n \temit_jump_insn\n \t  (gen_rtx_PARALLEL\n \t   (VOIDmode,\n \t    gen_rtvec (2,\n-\t\t       gen_rtx_SET (VOIDmode, pc_rtx, XEXP (operands[0], 0)),\n+\t\t       gen_rtx_SET (pc_rtx, XEXP (operands[0], 0)),\n \t\t       gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, 15)))));\n       goto finish_call;\n     }\n@@ -6361,7 +6361,7 @@\n   fn_rtx = operands[1];\n \n   vec = gen_rtvec (2,\n-\t\t   gen_rtx_SET (VOIDmode, operands[0],\n+\t\t   gen_rtx_SET (operands[0],\n \t\t\t\tgen_rtx_CALL (VOIDmode, fn_rtx, const0_rtx)),\n \t\t   gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (Pmode, 15)));\n "}, {"sha": "a03b87e635c480835ac39c2cdddcb01a0e7cb673", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -467,7 +467,7 @@ spu_expand_extv (rtx ops[], int unsignedp)\n       gcc_assert (REG_P (r) && SCALAR_INT_MODE_P (GET_MODE (r)));\n       s0 = gen_reg_rtx (TImode);\n       if (GET_MODE_SIZE (GET_MODE (r)) < GET_MODE_SIZE (TImode))\n-\temit_insn (gen_rtx_SET (VOIDmode, s0, gen_rtx_ZERO_EXTEND (TImode, r)));\n+\temit_insn (gen_rtx_SET (s0, gen_rtx_ZERO_EXTEND (TImode, r)));\n       else\n \temit_move_insn (s0, src);\n     }\n@@ -960,7 +960,7 @@ spu_emit_branch_or_set (int is_set, rtx cmp, rtx operands[])\n \tbcomp = gen_rtx_NE (comp_mode, compare_result, const0_rtx);\n \n       loc_ref = gen_rtx_LABEL_REF (VOIDmode, operands[3]);\n-      emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+      emit_jump_insn (gen_rtx_SET (pc_rtx,\n \t\t\t\t   gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n \t\t\t\t\t\t\t loc_ref, pc_rtx)));\n     }\n@@ -1003,7 +1003,7 @@ spu_emit_branch_or_set (int is_set, rtx cmp, rtx operands[])\n     {\n       rtx target = operands[0];\n       if (reverse_test)\n-\temit_insn (gen_rtx_SET (VOIDmode, compare_result,\n+\temit_insn (gen_rtx_SET (compare_result,\n \t\t\t\tgen_rtx_NOT (comp_mode, compare_result)));\n       if (GET_MODE (target) == SImode && GET_MODE (compare_result) == HImode)\n \temit_insn (gen_extendhisi2 (target, compare_result));\n@@ -1552,8 +1552,7 @@ spu_split_immediate (rtx * ops)\n \thi = array_to_constant (imode, arrhi);\n \tlo = array_to_constant (imode, arrlo);\n \temit_move_insn (temp, hi);\n-\temit_insn (gen_rtx_SET\n-\t\t   (VOIDmode, to, gen_rtx_IOR (imode, temp, lo)));\n+\temit_insn (gen_rtx_SET (to, gen_rtx_IOR (imode, temp, lo)));\n \treturn 1;\n       }\n     case IC_FSMBI2:\n@@ -1582,8 +1581,7 @@ spu_split_immediate (rtx * ops)\n \treg_fsmbi = array_to_constant (imode, arr_fsmbi);\n \treg_and = array_to_constant (imode, arr_andbi);\n \temit_move_insn (to, reg_fsmbi);\n-\temit_insn (gen_rtx_SET\n-\t\t   (VOIDmode, to, gen_rtx_AND (imode, to, reg_and)));\n+\temit_insn (gen_rtx_SET (to, gen_rtx_AND (imode, to, reg_and)));\n \treturn 1;\n       }\n     case IC_POOL:\n@@ -4381,7 +4379,7 @@ ea_load_store_inline (rtx mem, bool is_store, rtx ea_addr, rtx data_addr)\n   hit_label = gen_label_rtx ();\n   hit_ref = gen_rtx_LABEL_REF (VOIDmode, hit_label);\n   bcomp = gen_rtx_NE (SImode, tag_eq_pack_si, const0_rtx);\n-  insn = emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+  insn = emit_jump_insn (gen_rtx_SET (pc_rtx,\n \t\t\t\t      gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n \t\t\t\t\t\t\t    hit_ref, pc_rtx)));\n   /* Say that this branch is very likely to happen.  */\n@@ -4551,7 +4549,7 @@ spu_convert_move (rtx dst, rtx src)\n   rtx reg;\n   gcc_assert (GET_MODE (src) == TImode);\n   reg = int_mode != mode ? gen_reg_rtx (int_mode) : dst;\n-  emit_insn (gen_rtx_SET (VOIDmode, reg,\n+  emit_insn (gen_rtx_SET (reg,\n \t       gen_rtx_TRUNCATE (int_mode,\n \t\t gen_rtx_LSHIFTRT (TImode, src,\n \t\t   GEN_INT (int_mode == DImode ? 64 : 96)))));\n@@ -6500,8 +6498,7 @@ spu_expand_builtin_1 (struct spu_builtin_description *d,\n \n       /* negate addr */\n       op = gen_reg_rtx (GET_MODE (addr));\n-      emit_insn (gen_rtx_SET (VOIDmode, op,\n-                 gen_rtx_NEG (GET_MODE (addr), addr)));\n+      emit_insn (gen_rtx_SET (op, gen_rtx_NEG (GET_MODE (addr), addr)));\n       op = gen_rtx_MEM (mode, op);\n \n       pat = GEN_FCN (icode) (target, op);"}, {"sha": "1dc07adb1aba1bd4227b543ea6a939c32c5e8ca9", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -4014,7 +4014,7 @@ selb\\t%0,%4,%0,%3\"\n \t(unspec [(match_operand 1 \"spu_reg_operand\" \"r\")] UNSPEC_EXTEND_CMP))]\n   \"\"\n   {\n-    emit_insn (gen_rtx_SET (VOIDmode, operands[0],\n+    emit_insn (gen_rtx_SET (operands[0],\n \t\t\t    gen_rtx_UNSPEC (GET_MODE (operands[0]),\n \t\t\t                    gen_rtvec (1, operands[1]),\n \t\t\t\t\t    UNSPEC_EXTEND_CMP)));\n@@ -4516,7 +4516,7 @@ selb\\t%0,%4,%0,%3\"\n      emit_move_insn (s0, gen_rtx_PLUS (SImode, s0, GEN_INT (-1)));\n      bcomp = gen_rtx_NE(SImode, s0, const0_rtx);\n      loc_ref = gen_rtx_LABEL_REF (VOIDmode, operands [1]);\n-     emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+     emit_jump_insn (gen_rtx_SET (pc_rtx,\n                                   gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n                                                         loc_ref, pc_rtx)));\n \n@@ -5078,9 +5078,9 @@ DONE;\n \n   loc_ref = gen_rtx_LABEL_REF (VOIDmode, operands[2]);\n \n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n-                                   gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n-                                                         loc_ref, pc_rtx)));\n+  emit_jump_insn (gen_rtx_SET (pc_rtx,\n+                               gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n+                                                     loc_ref, pc_rtx)));\n \n   DONE;\n })"}, {"sha": "b97b230edfd4c55edf4c3ead91e3b3f89321311d", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 17, "deletions": 19, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -256,7 +256,7 @@ xstormy16_emit_cbranch (enum rtx_code code, rtx op0, rtx op1, rtx loc)\n \n   condition_rtx = gen_rtx_fmt_ee (code, mode, op0, op1);\n   loc_ref = gen_rtx_LABEL_REF (VOIDmode, loc);\n-  branch = gen_rtx_SET (VOIDmode, pc_rtx,\n+  branch = gen_rtx_SET (pc_rtx,\n \t\t\tgen_rtx_IF_THEN_ELSE (VOIDmode, condition_rtx,\n \t\t\t\t\t      loc_ref, pc_rtx));\n \n@@ -270,7 +270,7 @@ xstormy16_emit_cbranch (enum rtx_code code, rtx op0, rtx op1, rtx loc)\n     {\n       rtx sub;\n #if 0\n-      sub = gen_rtx_SET (VOIDmode, op0, gen_rtx_MINUS (SImode, op0, op1));\n+      sub = gen_rtx_SET (op0, gen_rtx_MINUS (SImode, op0, op1));\n #else\n       sub = gen_rtx_CLOBBER (SImode, op0);\n #endif\n@@ -865,7 +865,7 @@ xstormy16_split_move (machine_mode mode, rtx dest, rtx src)\n       gcc_assert (GET_CODE (w_src) != SUBREG\n \t\t  && GET_CODE (w_dest) != SUBREG);\n \n-      insn = emit_insn (gen_rtx_SET (VOIDmode, w_dest, w_src));\n+      insn = emit_insn (gen_rtx_SET (w_dest, w_src));\n       if (auto_inc_reg_rtx)\n         REG_NOTES (insn) = alloc_EXPR_LIST (REG_INC,\n                                             auto_inc_reg_rtx,\n@@ -884,7 +884,7 @@ xstormy16_expand_move (machine_mode mode, rtx dest, rtx src)\n       rtx pmv      = XEXP (dest, 0);\n       rtx dest_reg = XEXP (pmv, 0);\n       rtx dest_mod = XEXP (pmv, 1);\n-      rtx set      = gen_rtx_SET (Pmode, dest_reg, dest_mod);\n+      rtx set      = gen_rtx_SET (dest_reg, dest_mod);\n       rtx clobber  = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, CARRY_REGNUM));\n \n       dest = gen_rtx_MEM (mode, dest_reg);\n@@ -895,7 +895,7 @@ xstormy16_expand_move (machine_mode mode, rtx dest, rtx src)\n       rtx pmv     = XEXP (src, 0);\n       rtx src_reg = XEXP (pmv, 0);\n       rtx src_mod = XEXP (pmv, 1);\n-      rtx set     = gen_rtx_SET (Pmode, src_reg, src_mod);\n+      rtx set     = gen_rtx_SET (src_reg, src_mod);\n       rtx clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, CARRY_REGNUM));\n \n       src = gen_rtx_MEM (mode, src_reg);\n@@ -921,7 +921,7 @@ xstormy16_expand_move (machine_mode mode, rtx dest, rtx src)\n       return;\n     }\n \n-  emit_insn (gen_rtx_SET (VOIDmode, dest, src));\n+  emit_insn (gen_rtx_SET (dest, src));\n }\n \f\n /* Stack Layout:\n@@ -1047,7 +1047,7 @@ emit_addhi3_postreload (rtx dest, rtx src0, rtx src1)\n {\n   rtx set, clobber, insn;\n \n-  set = gen_rtx_SET (VOIDmode, dest, gen_rtx_PLUS (HImode, src0, src1));\n+  set = gen_rtx_SET (dest, gen_rtx_PLUS (HImode, src0, src1));\n   clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, CARRY_REGNUM));\n   insn = emit_insn (gen_rtx_PARALLEL (VOIDmode, gen_rtvec (2, set, clobber)));\n   return insn;\n@@ -1098,10 +1098,9 @@ xstormy16_expand_prologue (void)\n \n \tdwarf = gen_rtx_SEQUENCE (VOIDmode, rtvec_alloc (2));\n \n-\tXVECEXP (dwarf, 0, 0) = gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t     gen_rtx_MEM (Pmode, stack_pointer_rtx),\n+\tXVECEXP (dwarf, 0, 0) = gen_rtx_SET (gen_rtx_MEM (Pmode, stack_pointer_rtx),\n \t\t\t\t\t     reg);\n-\tXVECEXP (dwarf, 0, 1) = gen_rtx_SET (Pmode, stack_pointer_rtx,\n+\tXVECEXP (dwarf, 0, 1) = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t\t     plus_constant (Pmode,\n \t\t\t\t\t\t\t    stack_pointer_rtx,\n \t\t\t\t\t\t\t    GET_MODE_SIZE (Pmode)));\n@@ -1122,10 +1121,9 @@ xstormy16_expand_prologue (void)\n \n \tdwarf = gen_rtx_SEQUENCE (VOIDmode, rtvec_alloc (2));\n \n-\tXVECEXP (dwarf, 0, 0) = gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t     gen_rtx_MEM (Pmode, stack_pointer_rtx),\n+\tXVECEXP (dwarf, 0, 0) = gen_rtx_SET (gen_rtx_MEM (Pmode, stack_pointer_rtx),\n \t\t\t\t\t     reg);\n-\tXVECEXP (dwarf, 0, 1) = gen_rtx_SET (Pmode, stack_pointer_rtx,\n+\tXVECEXP (dwarf, 0, 1) = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t\t     plus_constant (Pmode,\n \t\t\t\t\t\t\t    stack_pointer_rtx,\n \t\t\t\t\t\t\t    GET_MODE_SIZE (Pmode)));\n@@ -1960,7 +1958,7 @@ xstormy16_expand_call (rtx retval, rtx dest, rtx counter)\n   call = gen_rtx_CALL (mode, gen_rtx_MEM (FUNCTION_MODE, dest),\n \t\t       counter);\n   if (retval)\n-    call = gen_rtx_SET (VOIDmode, retval, call);\n+    call = gen_rtx_SET (retval, call);\n \n   if (! CONSTANT_P (dest))\n     {\n@@ -2028,10 +2026,10 @@ xstormy16_expand_arith (machine_mode mode, enum rtx_code code,\n \n \t      sub_1 = gen_rtx_MINUS (HImode, w_src0,\n \t\t\t\t     gen_rtx_ZERO_EXTEND (HImode, gen_rtx_REG (BImode, CARRY_REGNUM)));\n-\t      sub = gen_rtx_SET (VOIDmode, w_dest,\n+\t      sub = gen_rtx_SET (w_dest,\n \t\t\t\t gen_rtx_MINUS (HImode, sub_1, w_src1));\n \t      clobber = gen_rtx_CLOBBER (VOIDmode, gen_rtx_REG (BImode, CARRY_REGNUM));\n-\t      branch = gen_rtx_SET (VOIDmode, pc_rtx,\n+\t      branch = gen_rtx_SET (pc_rtx,\n \t\t\t\t    gen_rtx_IF_THEN_ELSE (VOIDmode,\n \t\t\t\t\t\t\t  gen_rtx_EQ (HImode,\n \t\t\t\t\t\t\t\t      sub_1,\n@@ -2059,12 +2057,12 @@ xstormy16_expand_arith (machine_mode mode, enum rtx_code code,\n \t      && INTVAL (w_src1) == -(code == AND))\n \t    continue;\n \n-\t  insn = gen_rtx_SET (VOIDmode, w_dest, gen_rtx_fmt_ee (code, mode,\n-\t\t\t\t\t\t\t\tw_src0, w_src1));\n+\t  insn = gen_rtx_SET (w_dest, gen_rtx_fmt_ee (code, mode,\n+\t\t\t\t\t\t      w_src0, w_src1));\n \t  break;\n \n \tcase NOT:\n-\t  insn = gen_rtx_SET (VOIDmode, w_dest, gen_rtx_NOT (mode, w_src0));\n+\t  insn = gen_rtx_SET (w_dest, gen_rtx_NOT (mode, w_src0));\n \t  break;\n \n \tdefault:"}, {"sha": "129ac8a6aee0f9789120dc0e23f1ca7229373422", "filename": "gcc/config/tilegx/tilegx.c", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ftilegx%2Ftilegx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2456,8 +2456,7 @@ tilegx_emit_setcc_internal (rtx res, enum rtx_code code, rtx op0, rtx op1,\n     op1 = force_reg (cmp_mode, op1);\n \n   /* Return the setcc comparison.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, res,\n-\t\t\t  gen_rtx_fmt_ee (code, DImode, op0, op1)));\n+  emit_insn (gen_rtx_SET (res, gen_rtx_fmt_ee (code, DImode, op0, op1)));\n \n   return true;\n }\n@@ -2627,7 +2626,7 @@ tilegx_emit_conditional_branch (rtx operands[], machine_mode cmp_mode)\n   rtx cmp_rtx =\n     tilegx_emit_cc_test (GET_CODE (operands[0]), operands[1], operands[2],\n \t\t\t cmp_mode, false);\n-  rtx branch_rtx = gen_rtx_SET (VOIDmode, pc_rtx,\n+  rtx branch_rtx = gen_rtx_SET (pc_rtx,\n \t\t\t\tgen_rtx_IF_THEN_ELSE (VOIDmode, cmp_rtx,\n \t\t\t\t\t\t      gen_rtx_LABEL_REF\n \t\t\t\t\t\t      (VOIDmode,\n@@ -3778,7 +3777,7 @@ frame_emit_store (int regno, int regno_note, rtx addr, rtx cfa,\n   rtx reg_note = gen_rtx_REG (DImode, regno_note);\n   rtx cfa_relative_addr = gen_rtx_PLUS (Pmode, cfa, GEN_INT (cfa_offset));\n   rtx cfa_relative_mem = gen_frame_mem (DImode, cfa_relative_addr);\n-  rtx real = gen_rtx_SET (VOIDmode, cfa_relative_mem, reg_note);\n+  rtx real = gen_rtx_SET (cfa_relative_mem, reg_note);\n   add_reg_note (mov, REG_CFA_OFFSET, real);\n \n   return emit_insn (mov);\n@@ -3874,7 +3873,7 @@ emit_sp_adjust (int offset, int *next_scratch_regno, bool frame_related,\n   /* Describe what just happened in a way that dwarf understands.  */\n   if (frame_related)\n     {\n-      rtx real = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+      rtx real = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t      gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\t\t    imm_rtx));\n       RTX_FRAME_RELATED_P (insn) = 1;\n@@ -3960,7 +3959,7 @@ compute_frame_addr (int offset_from_fp, int *next_scratch_regno)\n       offset_rtx = tmp_reg_rtx;\n     }\n \n-  emit_insn (gen_rtx_SET (VOIDmode, tmp_reg_rtx,\n+  emit_insn (gen_rtx_SET (tmp_reg_rtx,\n \t\t\t  gen_rtx_PLUS (Pmode, base_reg_rtx, offset_rtx)));\n \n   return tmp_reg_rtx;\n@@ -4097,7 +4096,7 @@ tilegx_expand_prologue (void)\n \t     original stack pointer, not the one after we have pushed\n \t     the frame.  */\n \t  rtx p = gen_rtx_PLUS (Pmode, stack_pointer_rtx, size_rtx);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, chain_addr, p));\n+\t  emit_insn (gen_rtx_SET (chain_addr, p));\n \t  emit_sp_adjust (-total_size, &next_scratch_regno,\n \t\t\t  !frame_pointer_needed, NULL_RTX);\n \t}\n@@ -4110,7 +4109,7 @@ tilegx_expand_prologue (void)\n \t\t\t  !frame_pointer_needed, NULL_RTX);\n \t  p = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t    GEN_INT (UNITS_PER_WORD));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, chain_addr, p));\n+\t  emit_insn (gen_rtx_SET (chain_addr, p));\n \t}\n \n       /* Save our frame pointer for backtrace chaining.  */\n@@ -4144,7 +4143,7 @@ tilegx_expand_prologue (void)\n \t       register.  */\n \t    int stride = ROUND_ROBIN_SIZE * -UNITS_PER_WORD;\n \t    rtx p = gen_rtx_PLUS (Pmode, r, GEN_INT (stride));\n-\t    emit_insn (gen_rtx_SET (VOIDmode, r, p));\n+\t    emit_insn (gen_rtx_SET (r, p));\n \t  }\n \n \t/* Save this register to the stack (but use the old fp value\n@@ -4237,7 +4236,7 @@ tilegx_expand_epilogue (bool sibcall_p)\n \t    /* Advance to the next stack slot to store this register.  */\n \t    int stride = ROUND_ROBIN_SIZE * -UNITS_PER_WORD;\n \t    rtx p = gen_rtx_PLUS (Pmode, r, GEN_INT (stride));\n-\t    emit_insn (gen_rtx_SET (VOIDmode, r, p));\n+\t    emit_insn (gen_rtx_SET (r, p));\n \t  }\n \n \tif (fp_copy_regno >= 0 && regno == HARD_FRAME_POINTER_REGNUM)"}, {"sha": "731828bd16f261a1cd72d929a29ad02124b85476", "filename": "gcc/config/tilegx/tilegx.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ftilegx%2Ftilegx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ftilegx%2Ftilegx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilegx%2Ftilegx.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2444,7 +2444,7 @@\n      emit_move_insn (s0, gen_rtx_PLUS (mode, s0, GEN_INT (-1)));\n      bcomp = gen_rtx_NE(mode, s0, const0_rtx);\n      loc_ref = gen_rtx_LABEL_REF (VOIDmode, operands [1]);\n-     emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+     emit_jump_insn (gen_rtx_SET (pc_rtx,\n                                   gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n                                                         loc_ref, pc_rtx)));\n      DONE;\n@@ -5533,7 +5533,7 @@\n   rtx ssp_addr = gen_rtx_PLUS (Pmode, tp, GEN_INT (TARGET_THREAD_SSP_OFFSET));\n   rtx ssp = gen_reg_rtx (Pmode);\n   \n-  emit_insn (gen_rtx_SET (VOIDmode, ssp, ssp_addr));\n+  emit_insn (gen_rtx_SET (ssp, ssp_addr));\n \n   operands[1] = gen_rtx_MEM (Pmode, ssp);\n #endif\n@@ -5580,7 +5580,7 @@\n   rtx ssp_addr = gen_rtx_PLUS (Pmode, tp, GEN_INT (TARGET_THREAD_SSP_OFFSET));\n   rtx ssp = gen_reg_rtx (Pmode);\n   \n-  emit_insn (gen_rtx_SET (VOIDmode, ssp, ssp_addr));\n+  emit_insn (gen_rtx_SET (ssp, ssp_addr));\n \n   operands[1] = gen_rtx_MEM (Pmode, ssp);\n #endif\n@@ -5598,7 +5598,7 @@\n \n   loc_ref = gen_rtx_LABEL_REF (VOIDmode, operands[2]);\n \n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+  emit_jump_insn (gen_rtx_SET (pc_rtx,\n \t\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n \t\t\t\t\t\t     loc_ref, pc_rtx)));\n "}, {"sha": "6ed4a04df9ff0a48e73462072bb01e205cebfa9a", "filename": "gcc/config/tilepro/tilepro.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ftilepro%2Ftilepro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2279,8 +2279,7 @@ tilepro_emit_setcc_internal (rtx res, enum rtx_code code, rtx op0, rtx op1,\n     op1 = force_reg (SImode, op1);\n \n   /* Return the setcc comparison.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, res,\n-\t\t\t  gen_rtx_fmt_ee (code, SImode, op0, op1)));\n+  emit_insn (gen_rtx_SET (res, gen_rtx_fmt_ee (code, SImode, op0, op1)));\n \n   return true;\n }\n@@ -2431,7 +2430,7 @@ tilepro_emit_conditional_branch (rtx operands[], machine_mode cmp_mode)\n   rtx cmp_rtx =\n     tilepro_emit_cc_test (GET_CODE (operands[0]), operands[1], operands[2],\n \t\t\t  cmp_mode, false);\n-  rtx branch_rtx = gen_rtx_SET (VOIDmode, pc_rtx,\n+  rtx branch_rtx = gen_rtx_SET (pc_rtx,\n \t\t\t\tgen_rtx_IF_THEN_ELSE (VOIDmode, cmp_rtx,\n \t\t\t\t\t\t      gen_rtx_LABEL_REF\n \t\t\t\t\t\t      (VOIDmode,\n@@ -3324,7 +3323,7 @@ frame_emit_store (int regno, int regno_note, rtx addr, rtx cfa,\n   rtx reg_note = gen_rtx_REG (Pmode, regno_note);\n   rtx cfa_relative_addr = gen_rtx_PLUS (Pmode, cfa, gen_int_si (cfa_offset));\n   rtx cfa_relative_mem = gen_frame_mem (Pmode, cfa_relative_addr);\n-  rtx real = gen_rtx_SET (VOIDmode, cfa_relative_mem, reg_note);\n+  rtx real = gen_rtx_SET (cfa_relative_mem, reg_note);\n   add_reg_note (mov, REG_CFA_OFFSET, real);\n \n   return emit_insn (mov);\n@@ -3415,7 +3414,7 @@ emit_sp_adjust (int offset, int *next_scratch_regno, bool frame_related,\n   /* Describe what just happened in a way that dwarf understands.  */\n   if (frame_related)\n     {\n-      rtx real = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+      rtx real = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t      gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\t\t    imm_rtx));\n       RTX_FRAME_RELATED_P (insn) = 1;\n@@ -3497,7 +3496,7 @@ compute_frame_addr (int offset_from_fp, int *next_scratch_regno)\n \n   if (!tilepro_expand_addsi (tmp_reg_rtx, base_reg_rtx, offset_rtx))\n     {\n-      emit_insn (gen_rtx_SET (VOIDmode, tmp_reg_rtx,\n+      emit_insn (gen_rtx_SET (tmp_reg_rtx,\n \t\t\t      gen_rtx_PLUS (Pmode, base_reg_rtx,\n \t\t\t\t\t    offset_rtx)));\n     }\n@@ -3635,7 +3634,7 @@ tilepro_expand_prologue (void)\n \t     original stack pointer, not the one after we have pushed\n \t     the frame.  */\n \t  rtx p = gen_rtx_PLUS (Pmode, stack_pointer_rtx, size_rtx);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, chain_addr, p));\n+\t  emit_insn (gen_rtx_SET (chain_addr, p));\n \t  emit_sp_adjust (-total_size, &next_scratch_regno,\n \t\t\t  !frame_pointer_needed, NULL_RTX);\n \t}\n@@ -3648,7 +3647,7 @@ tilepro_expand_prologue (void)\n \t\t\t  !frame_pointer_needed, NULL_RTX);\n \t  p = gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t    GEN_INT (UNITS_PER_WORD));\n-\t  emit_insn (gen_rtx_SET (VOIDmode, chain_addr, p));\n+\t  emit_insn (gen_rtx_SET (chain_addr, p));\n \t}\n \n       /* Save our frame pointer for backtrace chaining.  */\n@@ -3675,14 +3674,14 @@ tilepro_expand_prologue (void)\n \t    r = gen_rtx_REG (word_mode, next_scratch_regno--);\n \t    reg_save_addr[which_scratch] = r;\n \n-\t    emit_insn (gen_rtx_SET (VOIDmode, r, p));\n+\t    emit_insn (gen_rtx_SET (r, p));\n \t  }\n \telse\n \t  {\n \t    /* Advance to the next stack slot to store this register.  */\n \t    int stride = ROUND_ROBIN_SIZE * -UNITS_PER_WORD;\n \t    rtx p = gen_rtx_PLUS (Pmode, r, GEN_INT (stride));\n-\t    emit_insn (gen_rtx_SET (VOIDmode, r, p));\n+\t    emit_insn (gen_rtx_SET (r, p));\n \t  }\n \n \t/* Save this register to the stack (but use the old fp value\n@@ -3776,7 +3775,7 @@ tilepro_expand_epilogue (bool sibcall_p)\n \t       register.  */\n \t    int stride = ROUND_ROBIN_SIZE * -UNITS_PER_WORD;\n \t    rtx p = gen_rtx_PLUS (Pmode, r, GEN_INT (stride));\n-\t    emit_insn (gen_rtx_SET (VOIDmode, r, p));\n+\t    emit_insn (gen_rtx_SET (r, p));\n \t  }\n \n \tif (fp_copy_regno >= 0 && regno == HARD_FRAME_POINTER_REGNUM)"}, {"sha": "a97ebf9eb22be69074534c13631e156c75ee3687", "filename": "gcc/config/tilepro/tilepro.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ftilepro%2Ftilepro.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Ftilepro%2Ftilepro.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftilepro%2Ftilepro.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1336,7 +1336,7 @@\n      emit_move_insn (s0, gen_rtx_PLUS (SImode, s0, GEN_INT (-1)));\n      bcomp = gen_rtx_NE(SImode, s0, const0_rtx);\n      loc_ref = gen_rtx_LABEL_REF (VOIDmode, operands [1]);\n-     emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+     emit_jump_insn (gen_rtx_SET (pc_rtx,\n                                   gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n                                                         loc_ref, pc_rtx)));\n      DONE;\n@@ -3741,7 +3741,7 @@\n   rtx ssp_addr = gen_rtx_PLUS (Pmode, tp, GEN_INT (TARGET_THREAD_SSP_OFFSET));\n   rtx ssp = gen_reg_rtx (Pmode);\n   \n-  emit_insn (gen_rtx_SET (VOIDmode, ssp, ssp_addr));\n+  emit_insn (gen_rtx_SET (ssp, ssp_addr));\n \n   operands[1] = gen_rtx_MEM (Pmode, ssp);\n #endif\n@@ -3776,7 +3776,7 @@\n   rtx ssp_addr = gen_rtx_PLUS (Pmode, tp, GEN_INT (TARGET_THREAD_SSP_OFFSET));\n   rtx ssp = gen_reg_rtx (Pmode);\n   \n-  emit_insn (gen_rtx_SET (VOIDmode, ssp, ssp_addr));\n+  emit_insn (gen_rtx_SET (ssp, ssp_addr));\n \n   operands[1] = gen_rtx_MEM (Pmode, ssp);\n #endif\n@@ -3790,7 +3790,7 @@\n \n   loc_ref = gen_rtx_LABEL_REF (VOIDmode, operands[2]);\n \n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+  emit_jump_insn (gen_rtx_SET (pc_rtx,\n \t\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode, bcomp,\n \t\t\t\t\t\t     loc_ref, pc_rtx)));\n "}, {"sha": "58f6601a6329d8426dac5b8251b1654d41ef77b5", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -928,7 +928,7 @@ output_move_single (rtx * operands)\n \treturn \"%S0st%W0 %.,%0\";\n     }\n \n-  fatal_insn (\"output_move_single:\", gen_rtx_SET (VOIDmode, dst, src));\n+  fatal_insn (\"output_move_single:\", gen_rtx_SET (dst, src));\n   return \"\";\n }\n \n@@ -1034,7 +1034,7 @@ v850_gen_compare (enum rtx_code cond, machine_mode mode, rtx op0, rtx op1)\n       rtx cc_reg;\n       mode = v850_gen_float_compare (cond, mode, op0, op1);\n       cc_reg = gen_rtx_REG (mode, CC_REGNUM);\n-      emit_insn (gen_rtx_SET(mode, cc_reg, gen_rtx_REG (mode, FCC_REGNUM)));  \n+      emit_insn (gen_rtx_SET (cc_reg, gen_rtx_REG (mode, FCC_REGNUM)));\n \n       return gen_rtx_fmt_ee (cond, mode, cc_reg, const0_rtx);\n     }\n@@ -1240,10 +1240,10 @@ Saved %d bytes (%d uses of register %s) in function %s, starting as insn %d, end\n       && SET_SRC (PATTERN (insn)) == *p_r1)\n     delete_insn (insn);\n   else\n-    emit_insn_before (gen_rtx_SET (Pmode, *p_r1, *p_ep), first_insn);\n+    emit_insn_before (gen_rtx_SET (*p_r1, *p_ep), first_insn);\n \n-  emit_insn_before (gen_rtx_SET (Pmode, *p_ep, reg), first_insn);\n-  emit_insn_before (gen_rtx_SET (Pmode, *p_ep, *p_r1), last_insn);\n+  emit_insn_before (gen_rtx_SET (*p_ep, reg), first_insn);\n+  emit_insn_before (gen_rtx_SET (*p_ep, *p_r1), last_insn);\n }\n \n \f\n@@ -1745,17 +1745,15 @@ expand_prologue (void)\n \t\t\t  + (TARGET_DISABLE_CALLT ? (TARGET_LONG_CALLS ? 2 : 1) : 0)));\n \n \t  XVECEXP (save_all, 0, 0)\n-\t    = gen_rtx_SET (VOIDmode,\n-\t\t\t   stack_pointer_rtx,\n+\t    = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t   gen_rtx_PLUS (Pmode,\n \t\t\t\t\t stack_pointer_rtx,\n \t\t\t\t\t GEN_INT(-alloc_stack)));\n \t  for (i = 0; i < num_save; i++)\n \t    {\n \t      offset -= 4;\n \t      XVECEXP (save_all, 0, i+1)\n-\t\t= gen_rtx_SET (VOIDmode,\n-\t\t\t       gen_rtx_MEM (Pmode,\n+\t\t= gen_rtx_SET (gen_rtx_MEM (Pmode,\n \t\t\t\t\t    gen_rtx_PLUS (Pmode,\n \t\t\t\t\t\t\t  stack_pointer_rtx,\n \t\t\t\t\t\t\t  GEN_INT(offset))),\n@@ -1903,17 +1901,16 @@ expand_epilogue (void)\n \t\t\t\t\t  rtvec_alloc (num_restore + 2));\n \t  XVECEXP (restore_all, 0, 0) = ret_rtx;\n \t  XVECEXP (restore_all, 0, 1)\n-\t    = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n-\t\t\t    gen_rtx_PLUS (Pmode,\n-\t\t\t\t\t  stack_pointer_rtx,\n-\t\t\t\t\t  GEN_INT (alloc_stack)));\n+\t    = gen_rtx_SET (stack_pointer_rtx,\n+\t\t\t   gen_rtx_PLUS (Pmode,\n+\t\t\t\t\t stack_pointer_rtx,\n+\t\t\t\t\t GEN_INT (alloc_stack)));\n \n \t  offset = alloc_stack - 4;\n \t  for (i = 0; i < num_restore; i++)\n \t    {\n \t      XVECEXP (restore_all, 0, i+2)\n-\t\t= gen_rtx_SET (VOIDmode,\n-\t\t\t       restore_regs[i],\n+\t\t= gen_rtx_SET (restore_regs[i],\n \t\t\t       gen_rtx_MEM (Pmode,\n                                             gen_rtx_PLUS (Pmode,\n                                                           stack_pointer_rtx,"}, {"sha": "7f2c5bb1bfbc641701bbc3ccdcd79a20333420be", "filename": "gcc/config/v850/v850.md", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fv850%2Fv850.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fv850%2Fv850.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.md?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -318,9 +318,8 @@\n \telse\n \t  temp = gen_reg_rtx (SImode);\n \n-\temit_insn (gen_rtx_SET (SImode, temp,\n-\t\t\t\tgen_rtx_HIGH (SImode, operand1)));\n-\temit_insn (gen_rtx_SET (SImode, operand0,\n+\temit_insn (gen_rtx_SET (temp, gen_rtx_HIGH (SImode, operand1)));\n+\temit_insn (gen_rtx_SET (operand0,\n \t\t\t\tgen_rtx_LO_SUM (SImode, temp, operand1)));\n \tDONE;\n       }\n@@ -468,11 +467,11 @@\n   mode = v850_gen_float_compare (cond, VOIDmode, v850_compare_op0, v850_compare_op1);\n   fcc_reg = gen_rtx_REG (mode, FCC_REGNUM);\n   cc_reg = gen_rtx_REG (mode, CC_REGNUM);\n-  emit_insn(gen_rtx_SET (mode, cc_reg, fcc_reg));\n+  emit_insn (gen_rtx_SET (cc_reg, fcc_reg));\n   tmp = gen_rtx_fmt_ee (cond, mode, cc_reg, const0_rtx);\n   tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n                               gen_rtx_LABEL_REF (VOIDmode, operands[3]), pc_rtx);\n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+  emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n   DONE;\n })\n \n@@ -522,11 +521,11 @@\n   mode = v850_gen_float_compare (cond, VOIDmode, v850_compare_op0, v850_compare_op1);\n   fcc_reg = gen_rtx_REG (mode, FCC_REGNUM);\n   cc_reg = gen_rtx_REG (mode, CC_REGNUM);\n-  emit_insn(gen_rtx_SET (mode, cc_reg, fcc_reg));\n+  emit_insn (gen_rtx_SET (cc_reg, fcc_reg));\n   tmp = gen_rtx_fmt_ee (cond, mode, cc_reg, const0_rtx);\n   tmp = gen_rtx_IF_THEN_ELSE (VOIDmode, tmp,\n                               gen_rtx_LABEL_REF (VOIDmode, operands[3]), pc_rtx);\n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx, tmp));\n+  emit_jump_insn (gen_rtx_SET (pc_rtx, tmp));\n   DONE;\n })\n "}, {"sha": "0b0d21be50b7088fcdb5851c4795c91f442c2671", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -172,7 +172,7 @@ vax_add_reg_cfa_offset (rtx insn, int offset, rtx src)\n \n   x = plus_constant (Pmode, frame_pointer_rtx, offset);\n   x = gen_rtx_MEM (SImode, x);\n-  x = gen_rtx_SET (VOIDmode, x, src);\n+  x = gen_rtx_SET (x, src);\n   add_reg_note (insn, REG_CFA_OFFSET, x);\n }\n "}, {"sha": "bac91acc145e75871147363b018b4ff3cd438bc9", "filename": "gcc/config/visium/visium.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fvisium%2Fvisium.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fvisium%2Fvisium.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2076,7 +2076,7 @@ visium_expand_copysign (rtx *operands, enum machine_mode mode)\n     x = force_reg (SImode, gen_rtx_IOR (SImode, op0, op1));\n \n   /* And move the result to the destination.  */\n-  emit_insn (gen_rtx_SET (VOIDmode, dest, gen_lowpart (SFmode, x)));\n+  emit_insn (gen_rtx_SET (dest, gen_lowpart (SFmode, x)));\n }\n \n /* Expand a cstore of OPERANDS in MODE for EQ/NE/LTU/GTU/GEU/LEU.  We generate\n@@ -2138,7 +2138,7 @@ visium_expand_int_cstore (rtx *operands, enum machine_mode mode)\n       emit_insn (gen_add3_insn (op0, tmp, const1_rtx));\n     }\n   else\n-    emit_insn (gen_rtx_SET (VOIDmode, op0, sltu));\n+    emit_insn (gen_rtx_SET (op0, sltu));\n }\n \n /* Expand a cstore of OPERANDS in MODE for LT/GT/UNGE/UNLE.  We generate the\n@@ -2186,7 +2186,7 @@ visium_expand_fp_cstore (rtx *operands,\n       emit_insn (gen_add3_insn (op0, tmp, const1_rtx));\n     }\n   else\n-    emit_insn (gen_rtx_SET (VOIDmode, op0, slt));\n+    emit_insn (gen_rtx_SET (op0, slt));\n }\n \n /* Split a compare-and-store with CODE, operands OP2 and OP3, combined with\n@@ -2204,7 +2204,7 @@ visium_split_cstore (enum rtx_code op_code, rtx op0, rtx op1,\n \n   rtx flags = gen_rtx_REG (cc_mode, FLAGS_REGNUM);\n   rtx x = gen_rtx_COMPARE (cc_mode, op2, op3);\n-  x = gen_rtx_SET (VOIDmode, flags, x);\n+  x = gen_rtx_SET (flags, x);\n   emit_insn (x);\n \n   x = gen_rtx_fmt_ee (code, SImode, flags, const0_rtx);\n@@ -2224,7 +2224,7 @@ visium_split_cstore (enum rtx_code op_code, rtx op0, rtx op1,\n     }\n \n   rtx pat = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (2));\n-  XVECEXP (pat, 0, 0) = gen_rtx_SET (VOIDmode, op0, x);\n+  XVECEXP (pat, 0, 0) = gen_rtx_SET (op0, x);\n   flags = gen_rtx_REG (CCmode, FLAGS_REGNUM);\n   XVECEXP (pat, 0, 1) = gen_rtx_CLOBBER (VOIDmode, flags);\n   emit_insn (pat);\n@@ -2253,8 +2253,7 @@ expand_block_move_4 (rtx dst, rtx dst_reg, rtx src, rtx src_reg, rtx bytes_rtx)\n \n       insn = gen_rtx_PARALLEL (VOIDmode, rtvec_alloc (8));\n       XVECEXP (insn, 0, 0)\n-\t= gen_rtx_SET (VOIDmode,\n-\t\t       replace_equiv_address_nv (dst, regno_reg_rtx[1]),\n+\t= gen_rtx_SET (replace_equiv_address_nv (dst, regno_reg_rtx[1]),\n \t\t       replace_equiv_address_nv (src, regno_reg_rtx[2]));\n       XVECEXP (insn, 0, 1) = gen_rtx_USE (VOIDmode, regno_reg_rtx[3]);\n       for (i = 1; i <= 6; i++)\n@@ -2764,13 +2763,13 @@ visium_split_cbranch (enum rtx_code code, rtx op0, rtx op1, rtx label)\n   rtx flags = gen_rtx_REG (cc_mode, FLAGS_REGNUM);\n \n   rtx x = gen_rtx_COMPARE (cc_mode, op0, op1);\n-  x = gen_rtx_SET (VOIDmode, flags, x);\n+  x = gen_rtx_SET (flags, x);\n   emit_insn (x);\n \n   x = gen_rtx_fmt_ee (code, VOIDmode, flags, const0_rtx);\n   x = gen_rtx_IF_THEN_ELSE (VOIDmode, x, gen_rtx_LABEL_REF (Pmode, label),\n \t\t\t    pc_rtx);\n-  x = gen_rtx_SET (VOIDmode, pc_rtx, x);\n+  x = gen_rtx_SET (pc_rtx, x);\n   emit_jump_insn (x);\n \n   visium_flags_exposed = true;\n@@ -3600,7 +3599,7 @@ visium_save_regs (int alloc, int offset, int low_regno, int high_regno)\n \t\t  {\n \t\t    insn = emit_frame_insn (gen_movdi (mem, tmp));\n \t\t    add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\t\t  gen_rtx_SET (VOIDmode, mem, reg));\n+\t\t\t\t  gen_rtx_SET (mem, reg));\n \t\t  }\n \t      }\n \t      break;\n@@ -3617,7 +3616,7 @@ visium_save_regs (int alloc, int offset, int low_regno, int high_regno)\n \t\temit_insn (gen_movsi (tmp, reg));\n \t\tinsn = emit_frame_insn (gen_movsi (mem, tmp));\n \t\tadd_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\t      gen_rtx_SET (VOIDmode, mem, reg));\n+\t\t\t      gen_rtx_SET (mem, reg));\n \t      }\n \t      break;\n \n@@ -3633,7 +3632,7 @@ visium_save_regs (int alloc, int offset, int low_regno, int high_regno)\n \t\temit_insn (gen_movsf (tmp, reg));\n \t\tinsn = emit_frame_insn (gen_movsf (mem, tmp));\n \t\tadd_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\t      gen_rtx_SET (VOIDmode, mem, reg));\n+\t\t\t      gen_rtx_SET (mem, reg));\n \t      }\n \t      break;\n \n@@ -3711,7 +3710,7 @@ visium_expand_prologue (void)\n \t\t\t\t\t\t    stack_pointer_rtx,\n \t\t\t\t\t\t    tmp));\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\tgen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t\tgen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t     gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t   GEN_INT (-alloc_size))));\n \t}\n@@ -3899,7 +3898,7 @@ visium_restore_regs (int dealloc, int offset, int high_regno, int low_regno)\n   /* Deallocate the stack space.  */\n   rtx insn = emit_frame_insn (gen_stack_pop (GEN_INT (dealloc)));\n   add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\tgen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\tgen_rtx_SET (stack_pointer_rtx,\n \t\t\t     gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\t\t   GEN_INT (dealloc))));\n   visium_add_queued_cfa_restore_notes (insn);\n@@ -3952,7 +3951,7 @@ visium_expand_epilogue (void)\n \n       rtx insn = emit_frame_insn (gen_movsi (hard_frame_pointer_rtx, src));\n       add_reg_note (insn, REG_CFA_ADJUST_CFA,\n-\t\t    gen_rtx_SET (VOIDmode, stack_pointer_rtx, \n+\t\t    gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t hard_frame_pointer_rtx));\n       visium_add_cfa_restore_note (hard_frame_pointer_rtx);\n     }\n@@ -4004,7 +4003,7 @@ visium_expand_epilogue (void)\n       else\n \tinsn = emit_frame_insn (gen_stack_pop (GEN_INT (pop_size)));\n       add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t    gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t\t    gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t gen_rtx_PLUS (Pmode, stack_pointer_rtx,\n \t\t\t\t\t       GEN_INT (pop_size))));\n       visium_add_queued_cfa_restore_notes (insn);"}, {"sha": "1e8ecebc3539c4e7b49180290d7198239471e99d", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -859,7 +859,7 @@ xtensa_expand_conditional_branch (rtx *operands, machine_mode mode)\n       label1 = pc_rtx;\n     }\n \n-  emit_jump_insn (gen_rtx_SET (VOIDmode, pc_rtx,\n+  emit_jump_insn (gen_rtx_SET (pc_rtx,\n \t\t\t       gen_rtx_IF_THEN_ELSE (VOIDmode, cmp,\n \t\t\t\t\t\t     label1,\n \t\t\t\t\t\t     label2)));\n@@ -1335,7 +1335,7 @@ xtensa_expand_block_move (rtx *operands)\n \t  temp[next] = gen_reg_rtx (mode[next]);\n \n \t  x = adjust_address (src_mem, mode[next], offset_ld);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, temp[next], x));\n+\t  emit_insn (gen_rtx_SET (temp[next], x));\n \n \t  offset_ld += next_amount;\n \t  bytes -= next_amount;\n@@ -1347,7 +1347,7 @@ xtensa_expand_block_move (rtx *operands)\n \t  active[phase] = false;\n \t  \n \t  x = adjust_address (dst_mem, mode[phase], offset_st);\n-\t  emit_insn (gen_rtx_SET (VOIDmode, x, temp[phase]));\n+\t  emit_insn (gen_rtx_SET (x, temp[phase]));\n \n \t  offset_st += amount[phase];\n \t}\n@@ -1981,8 +1981,8 @@ xtensa_legitimize_address (rtx x,\n \t{\n \t  rtx temp = gen_reg_rtx (Pmode);\n \t  rtx addmi_offset = GEN_INT (INTVAL (plus1) & ~0xff);\n-\t  emit_insn (gen_rtx_SET (Pmode, temp,\n-\t\t\t\t  gen_rtx_PLUS (Pmode, plus0, addmi_offset)));\n+\t  emit_insn (gen_rtx_SET (temp, gen_rtx_PLUS (Pmode, plus0,\n+\t\t\t\t\t\t      addmi_offset)));\n \t  return gen_rtx_PLUS (Pmode, temp, GEN_INT (INTVAL (plus1) & 0xff));\n \t}\n     }\n@@ -2727,7 +2727,7 @@ xtensa_expand_prologue (void)\n \t  insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n \t\t\t\t\tGEN_INT (-total_size)));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t  note_rtx = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t  note_rtx = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t  plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t -total_size));\n \t  add_reg_note (insn, REG_FRAME_RELATED_EXPR, note_rtx);\n@@ -2743,7 +2743,7 @@ xtensa_expand_prologue (void)\n \t      insn = emit_insn (gen_addsi3 (stack_pointer_rtx, stack_pointer_rtx,\n \t\t\t\t\t    GEN_INT (-xtensa_callee_save_size)));\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n-\t      note_rtx = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t      note_rtx = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t      plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t     -xtensa_callee_save_size));\n \t      add_reg_note (insn, REG_FRAME_RELATED_EXPR, note_rtx);\n@@ -2756,7 +2756,7 @@ xtensa_expand_prologue (void)\n \t      insn = emit_insn (gen_subsi3 (stack_pointer_rtx,\n \t\t\t\t\t    stack_pointer_rtx, tmp_reg));\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n-\t      note_rtx = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t      note_rtx = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t      plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t     -total_size));\n \t      add_reg_note (insn, REG_FRAME_RELATED_EXPR, note_rtx);\n@@ -2776,7 +2776,7 @@ xtensa_expand_prologue (void)\n \t      insn = emit_move_insn (mem, reg);\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n \t      add_reg_note (insn, REG_FRAME_RELATED_EXPR,\n-\t\t\t    gen_rtx_SET (VOIDmode, mem, reg));\n+\t\t\t    gen_rtx_SET (mem, reg));\n \t    }\n \t}\n       if (total_size > 1024)\n@@ -2787,7 +2787,7 @@ xtensa_expand_prologue (void)\n \t  insn = emit_insn (gen_subsi3 (stack_pointer_rtx,\n \t\t\t\t\tstack_pointer_rtx, tmp_reg));\n \t  RTX_FRAME_RELATED_P (insn) = 1;\n-\t  note_rtx = gen_rtx_SET (VOIDmode, stack_pointer_rtx,\n+\t  note_rtx = gen_rtx_SET (stack_pointer_rtx,\n \t\t\t\t  plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t\t xtensa_callee_save_size -\n \t\t\t\t\t\t total_size));\n@@ -2826,7 +2826,7 @@ xtensa_expand_prologue (void)\n \t\t\t\t       stack_pointer_rtx));\n \t  if (!TARGET_WINDOWED_ABI)\n \t    {\n-\t      note_rtx = gen_rtx_SET (VOIDmode, hard_frame_pointer_rtx,\n+\t      note_rtx = gen_rtx_SET (hard_frame_pointer_rtx,\n \t\t\t\t      stack_pointer_rtx);\n \t      RTX_FRAME_RELATED_P (insn) = 1;\n \t      add_reg_note (insn, REG_FRAME_RELATED_EXPR, note_rtx);\n@@ -2839,9 +2839,9 @@ xtensa_expand_prologue (void)\n       /* Create a note to describe the CFA.  Because this is only used to set\n \t DW_AT_frame_base for debug info, don't bother tracking changes through\n \t each instruction in the prologue.  It just takes up space.  */\n-      note_rtx = gen_rtx_SET (VOIDmode, (frame_pointer_needed\n-\t\t\t\t\t ? hard_frame_pointer_rtx\n-\t\t\t\t\t : stack_pointer_rtx),\n+      note_rtx = gen_rtx_SET ((frame_pointer_needed\n+\t\t\t       ? hard_frame_pointer_rtx\n+\t\t\t       : stack_pointer_rtx),\n \t\t\t      plus_constant (Pmode, stack_pointer_rtx,\n \t\t\t\t\t     -total_size));\n       RTX_FRAME_RELATED_P (insn) = 1;\n@@ -2933,8 +2933,7 @@ xtensa_set_return_address (rtx address, rtx scratch)\n     hard_frame_pointer_rtx : stack_pointer_rtx;\n   rtx a0_addr = plus_constant (Pmode, frame,\n \t\t\t       total_size - UNITS_PER_WORD);\n-  rtx note = gen_rtx_SET (VOIDmode,\n-\t\t\t  gen_frame_mem (SImode, a0_addr),\n+  rtx note = gen_rtx_SET (gen_frame_mem (SImode, a0_addr),\n \t\t\t  gen_rtx_REG (SImode, A0_REG));\n   rtx insn;\n "}, {"sha": "57c44ef58b19f18f3ad60cea63d931a09f57bc9c", "filename": "gcc/cprop.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fcprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fcprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcprop.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -326,7 +326,7 @@ hash_scan_set (rtx set, rtx_insn *insn, struct hash_table_d *table,\n \t  && REG_NOTE_KIND (note) == REG_EQUAL\n \t  && !REG_P (src)\n \t  && cprop_constant_p (XEXP (note, 0)))\n-\tsrc = XEXP (note, 0), set = gen_rtx_SET (VOIDmode, dest, src);\n+\tsrc = XEXP (note, 0), set = gen_rtx_SET (dest, src);\n \n       /* Record sets for constant/copy propagation.  */\n       if ((cprop_reg_p (src)\n@@ -1420,8 +1420,7 @@ find_implicit_sets (void)\n \t\t(implicit_sets_size - old_implicit_sets_size) * sizeof (rtx));\n       }\n \n-      new_rtx = gen_rtx_SET (VOIDmode, XEXP (cond, 0),\n-\t\t\t     XEXP (cond, 1));\n+      new_rtx = gen_rtx_SET (XEXP (cond, 0), XEXP (cond, 1));\n       implicit_sets[dest->index] = new_rtx;\n       if (dump_file)\n \t{"}, {"sha": "4c9b6ed7ee9c9edb79656e739fd17ba0ce3a7046", "filename": "gcc/dse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fdse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fdse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdse.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2608,7 +2608,7 @@ scan_insn (bb_info_t bb_info, rtx_insn *insn)\n \t\t{\n \t\t  rtx mem = gen_rtx_MEM (BLKmode, args[0]);\n \t\t  set_mem_size (mem, INTVAL (args[2]));\n-\t\t  body = gen_rtx_SET (VOIDmode, mem, args[1]);\n+\t\t  body = gen_rtx_SET (mem, args[1]);\n \t\t  mems_found += record_store (body, bb_info);\n \t\t  if (dump_file && (dump_flags & TDF_DETAILS))\n \t\t    fprintf (dump_file, \"handling memset as BLKmode store\\n\");"}, {"sha": "a02676832d07ec129e260b5d04d9b824cc24d316", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -210,7 +210,7 @@ init_expr_target (void)\n   reg = gen_rtx_REG (VOIDmode, -1);\n \n   insn = rtx_alloc (INSN);\n-  pat = gen_rtx_SET (VOIDmode, NULL_RTX, NULL_RTX);\n+  pat = gen_rtx_SET (NULL_RTX, NULL_RTX);\n   PATTERN (insn) = pat;\n \n   for (mode = VOIDmode; (int) mode < NUM_MACHINE_MODES;"}, {"sha": "d9c5106fb606dff9afcf042843b5f1de89c66bb9", "filename": "gcc/gcse.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -586,7 +586,7 @@ compute_can_copy (void)\n \tcan_copy[i] = 0;\n #else\n \treg = gen_rtx_REG ((machine_mode) i, LAST_VIRTUAL_REGISTER + 1);\n-\tinsn = emit_insn (gen_rtx_SET (VOIDmode, reg, reg));\n+\tinsn = emit_insn (gen_rtx_SET (reg, reg));\n \tif (recog (PATTERN (insn), insn, NULL) >= 0)\n \t  can_copy[i] = 1;\n #endif\n@@ -884,8 +884,7 @@ can_assign_to_reg_without_clobbers_p (rtx x)\n   if (test_insn == 0)\n     {\n       test_insn\n-\t= make_insn_raw (gen_rtx_SET (VOIDmode,\n-\t\t\t\t      gen_rtx_REG (word_mode,\n+\t= make_insn_raw (gen_rtx_SET (gen_rtx_REG (word_mode,\n \t\t\t\t\t\t   FIRST_PSEUDO_REGISTER * 2),\n \t\t\t\t      const0_rtx));\n       SET_NEXT_INSN (test_insn) = SET_PREV_INSN (test_insn) = 0;\n@@ -1288,7 +1287,7 @@ hash_scan_set (rtx set, rtx_insn *insn, struct gcse_hash_table_d *table)\n \t  && REG_NOTE_KIND (note) == REG_EQUAL\n \t  && !REG_P (src)\n \t  && want_to_gcse_p (XEXP (note, 0), NULL))\n-\tsrc = XEXP (note, 0), set = gen_rtx_SET (VOIDmode, dest, src);\n+\tsrc = XEXP (note, 0), set = gen_rtx_SET (dest, src);\n \n       /* Only record sets of pseudo-regs in the hash table.  */\n       if (regno >= FIRST_PSEUDO_REGISTER\n@@ -2008,7 +2007,7 @@ process_insert_insn (struct gcse_expr *expr)\n      insn will be recognized (this also adds any needed CLOBBERs).  */\n   else\n     {\n-      rtx_insn *insn = emit_insn (gen_rtx_SET (VOIDmode, reg, exp));\n+      rtx_insn *insn = emit_insn (gen_rtx_SET (reg, exp));\n \n       if (insn_invalid_p (insn, false))\n \tgcc_unreachable ();"}, {"sha": "ec8c86cc9ec95bc71d70b6051b4fcce8db56001c", "filename": "gcc/genemit.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fgenemit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fgenemit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenemit.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -94,6 +94,7 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n   int i;\n   int len;\n   const char *fmt;\n+  const char *sep = \"\";\n \n   if (x == 0)\n     {\n@@ -215,15 +216,20 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n \n   printf (\"gen_rtx_\");\n   print_code (code);\n-  printf (\" (%smode\", GET_MODE_NAME (GET_MODE (x)));\n+  printf (\" (\");\n+  if (!always_void_p (code))\n+    {\n+      printf (\"%smode\", GET_MODE_NAME (GET_MODE (x)));\n+      sep = \",\\n\\t\";\n+    }\n \n   fmt = GET_RTX_FORMAT (code);\n   len = GET_RTX_LENGTH (code);\n   for (i = 0; i < len; i++)\n     {\n       if (fmt[i] == '0')\n \tbreak;\n-      printf (\",\\n\\t\");\n+      fputs (sep, stdout);\n       switch (fmt[i])\n \t{\n \tcase 'e': case 'u':\n@@ -254,6 +260,7 @@ gen_exp (rtx x, enum rtx_code subroutine_type, char *used)\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n+      sep = \",\\n\\t\";\n     }\n   printf (\")\");\n }"}, {"sha": "1662f2714da0ec6af515c025772d25c0149a5045", "filename": "gcc/gengenrtl.c", "status": "modified", "additions": 24, "deletions": 5, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fgengenrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fgengenrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgengenrtl.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -116,6 +116,14 @@ special_format (const char *fmt)\n \t  || strchr (fmt, 'n') != 0);\n }\n \n+/* Return true if CODE always has VOIDmode.  */\n+\n+static inline bool\n+always_void_p (int idx)\n+{\n+  return strcmp (defs[idx].enumname, \"SET\") == 0;\n+}\n+\n /* Return nonzero if the RTL code given by index IDX is one that we should\n    generate a gen_rtx_raw_FOO macro for, not gen_rtx_FOO (because gen_rtx_FOO\n    is a wrapper in emit-rtl.c).  */\n@@ -181,6 +189,7 @@ static void\n genmacro (int idx)\n {\n   const char *p;\n+  const char *sep = \"\";\n   int i;\n \n   /* We write a macro that defines gen_rtx_RTLCODE to be an equivalent to\n@@ -190,15 +199,25 @@ genmacro (int idx)\n     /* Don't define a macro for this code.  */\n     return;\n \n-  printf (\"#define gen_rtx_%s%s(MODE\",\n+  bool has_mode_p = !always_void_p (idx);\n+  printf (\"#define gen_rtx_%s%s(\",\n \t   special_rtx (idx) ? \"raw_\" : \"\", defs[idx].enumname);\n+  if (has_mode_p)\n+    {\n+      printf (\"MODE\");\n+      sep = \", \";\n+    }\n \n   for (p = defs[idx].format, i = 0; *p != 0; p++)\n     if (*p != '0')\n-      printf (\", ARG%d\", i++);\n-\n-  printf (\") \\\\\\n  gen_rtx_fmt_%s (%s, (MODE)\",\n-\t  defs[idx].format, defs[idx].enumname);\n+      {\n+\tprintf (\"%sARG%d\", sep, i++);\n+\tsep = \", \";\n+      }\n+\n+  printf (\") \\\\\\n  gen_rtx_fmt_%s (%s, %s\",\n+\t  defs[idx].format, defs[idx].enumname,\n+\t  has_mode_p ? \"(MODE)\" : \"VOIDmode\");\n \n   for (p = defs[idx].format, i = 0; *p != 0; p++)\n     if (*p != '0')"}, {"sha": "fc7c4f1f5183545648bfc79a568b7e46bd4dc4c5", "filename": "gcc/ifcvt.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fifcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fifcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fifcvt.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -895,7 +895,7 @@ noce_emit_store_flag (struct noce_if_info *if_info, rtx x, int reversep,\n     {\n       rtx src = gen_rtx_fmt_ee (code, GET_MODE (x), XEXP (cond, 0),\n \t\t\t    XEXP (cond, 1));\n-      rtx set = gen_rtx_SET (VOIDmode, x, src);\n+      rtx set = gen_rtx_SET (x, src);\n \n       start_sequence ();\n       rtx_insn *insn = emit_insn (set);\n@@ -945,7 +945,7 @@ noce_emit_move_insn (rtx x, rtx y)\n \t otherwise construct a suitable SET pattern ourselves.  */\n       insn = (OBJECT_P (y) || CONSTANT_P (y) || GET_CODE (y) == SUBREG)\n \t     ? emit_move_insn (x, y)\n-\t     : emit_insn (gen_rtx_SET (VOIDmode, x, y));\n+\t     : emit_insn (gen_rtx_SET (x, y));\n       seq = get_insns ();\n       end_sequence ();\n \n@@ -1477,7 +1477,7 @@ noce_emit_cmove (struct noce_if_info *if_info, rtx x, enum rtx_code code,\n       rtx cond = gen_rtx_fmt_ee (code, GET_MODE (if_info->cond), cmp_a, cmp_b);\n       rtx if_then_else = gen_rtx_IF_THEN_ELSE (GET_MODE (x),\n \t\t\t\t\t       cond, vtrue, vfalse);\n-      rtx set = gen_rtx_SET (VOIDmode, x, if_then_else);\n+      rtx set = gen_rtx_SET (x, if_then_else);\n \n       start_sequence ();\n       rtx_insn *insn = emit_insn (set);\n@@ -1724,7 +1724,7 @@ noce_try_cmove_arith (struct noce_if_info *if_info)\n       if (is_mem)\n \t{\n \t  rtx reg = gen_reg_rtx (GET_MODE (a));\n-\t  insn = emit_insn (gen_rtx_SET (VOIDmode, reg, a));\n+\t  insn = emit_insn (gen_rtx_SET (reg, a));\n \t}\n       else if (! insn_a)\n \tgoto end_seq_and_fail;\n@@ -1748,7 +1748,7 @@ noce_try_cmove_arith (struct noce_if_info *if_info)\n       if (is_mem)\n \t{\n           rtx reg = gen_reg_rtx (GET_MODE (b));\n-\t  pat = gen_rtx_SET (VOIDmode, reg, b);\n+\t  pat = gen_rtx_SET (reg, b);\n \t}\n       else if (! insn_b)\n \tgoto end_seq_and_fail;"}, {"sha": "bba26e501dc74ca0bb6c276ae5f284629822ef0a", "filename": "gcc/ira.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1769,7 +1769,7 @@ setup_prohibited_mode_move_regs (void)\n   ira_prohibited_mode_move_regs_initialized_p = true;\n   test_reg1 = gen_rtx_REG (VOIDmode, 0);\n   test_reg2 = gen_rtx_REG (VOIDmode, 0);\n-  move_pat = gen_rtx_SET (VOIDmode, test_reg1, test_reg2);\n+  move_pat = gen_rtx_SET (test_reg1, test_reg2);\n   move_insn = gen_rtx_INSN (VOIDmode, 0, 0, 0, move_pat, 0, -1, 0);\n   for (i = 0; i < NUM_MACHINE_MODES; i++)\n     {"}, {"sha": "513eb6e7741c72dcf1352f56d090176d14ea2017", "filename": "gcc/jump.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1503,7 +1503,7 @@ redirect_exp_1 (rtx *loc, rtx olabel, rtx nlabel, rtx insn)\n     {\n       x = redirect_target (nlabel);\n       if (GET_CODE (x) == LABEL_REF && loc == &PATTERN (insn))\n- \tx = gen_rtx_SET (VOIDmode, pc_rtx, x);\n+ \tx = gen_rtx_SET (pc_rtx, x);\n       validate_change (insn, loc, x, 1);\n       return;\n     }"}, {"sha": "3535a07a5af6d8a30ac39cfad7e69ba3a0a76042", "filename": "gcc/lower-subreg.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Flower-subreg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Flower-subreg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flower-subreg.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -304,7 +304,7 @@ init_lower_subreg (void)\n \n   rtxes.target = gen_rtx_REG (word_mode, FIRST_PSEUDO_REGISTER);\n   rtxes.source = gen_rtx_REG (word_mode, FIRST_PSEUDO_REGISTER + 1);\n-  rtxes.set = gen_rtx_SET (VOIDmode, rtxes.target, rtxes.source);\n+  rtxes.set = gen_rtx_SET (rtxes.target, rtxes.source);\n   rtxes.zext = gen_rtx_ZERO_EXTEND (twice_word_mode, rtxes.source);\n   rtxes.shift = gen_rtx_ASHIFT (twice_word_mode, rtxes.source, const0_rtx);\n "}, {"sha": "1088b25f70ecec59badbe7f46740701745c08dd6", "filename": "gcc/lra-constraints.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Flra-constraints.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Flra-constraints.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-constraints.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2688,7 +2688,7 @@ base_to_reg (struct address_info *ad)\n                                    : *ad->disp_term);\n   if (!valid_address_p (ad->mode, new_inner, ad->as))\n     return NULL_RTX;\n-  insn = emit_insn (gen_rtx_SET (ad->mode, new_reg, *ad->base_term));\n+  insn = emit_insn (gen_rtx_SET (new_reg, *ad->base_term));\n   code = recog_memoized (insn);\n   if (code < 0)\n     {\n@@ -2967,7 +2967,7 @@ process_address_1 (int nop, bool check_only_p,\n \n \t    /* addr => lo_sum (new_base, addr), case (2) above.  */\n \t    insn = emit_insn (gen_rtx_SET\n-\t\t\t      (VOIDmode, new_reg,\n+\t\t\t      (new_reg,\n \t\t\t       gen_rtx_HIGH (Pmode, copy_rtx (addr))));\n \t    code = recog_memoized (insn);\n \t    if (code >= 0)\n@@ -2977,7 +2977,7 @@ process_address_1 (int nop, bool check_only_p,\n \t\t  {\n \t\t    /* Try to put lo_sum into register.  */\n \t\t    insn = emit_insn (gen_rtx_SET\n-\t\t\t\t      (VOIDmode, new_reg,\n+\t\t\t\t      (new_reg,\n \t\t\t\t       gen_rtx_LO_SUM (Pmode, new_reg, addr)));\n \t\t    code = recog_memoized (insn);\n \t\t    if (code >= 0)"}, {"sha": "acf8c8adc11c1cafd71cc28bee45adae9b628cab", "filename": "gcc/lra-eliminations.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Flra-eliminations.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Flra-eliminations.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra-eliminations.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1076,8 +1076,7 @@ eliminate_regs_in_insn (rtx_insn *insn, bool replace_p, bool first_p,\n \t\t constraint pass fix it up.  */\n \t      if (! validate_change (insn, &SET_SRC (old_set), new_src, 0))\n \t\t{\n-\t\t  rtx new_pat = gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t     SET_DEST (old_set), new_src);\n+\t\t  rtx new_pat = gen_rtx_SET (SET_DEST (old_set), new_src);\n \n \t\t  if (! validate_change (insn, &PATTERN (insn), new_pat, 0))\n \t\t    SET_SRC (old_set) = new_src;"}, {"sha": "edef13d08dd7b25178f8a0874746779f7ebe4058", "filename": "gcc/lra.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Flra.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Flra.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flra.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -329,8 +329,8 @@ emit_add3_insn (rtx x, rtx y, rtx z)\n       return insn;\n     }\n \n-  rtx_insn *insn = emit_insn (gen_rtx_SET (VOIDmode, x,\n-\t\t\t\t\t   gen_rtx_PLUS (GET_MODE (y), y, z)));\n+  rtx_insn *insn = emit_insn (gen_rtx_SET (x, gen_rtx_PLUS (GET_MODE (y),\n+\t\t\t\t\t\t\t    y, z)));\n   if (recog_memoized (insn) < 0)\n     {\n       delete_insns_since (last);"}, {"sha": "99b1fc26900056791a532872172227ea1932bbbe", "filename": "gcc/postreload.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1822,8 +1822,7 @@ move2add_use_add2_insn (rtx reg, rtx sym, rtx off, rtx_insn *insn)\n \t\t  rtx narrow_src = gen_int_mode (INTVAL (off),\n \t\t\t\t\t\t narrow_mode);\n \t\t  rtx new_set\n-\t\t    = gen_rtx_SET (VOIDmode,\n-\t\t\t\t   gen_rtx_STRICT_LOW_PART (VOIDmode,\n+\t\t    = gen_rtx_SET (gen_rtx_STRICT_LOW_PART (VOIDmode,\n \t\t\t\t\t\t\t    narrow_reg),\n \t\t\t\t   narrow_src);\n \t\t  get_full_set_rtx_cost (new_set, &newcst);\n@@ -2051,7 +2050,7 @@ reload_cse_move2add (rtx_insn *first)\n \t\t\t  if (costs_lt_p (&newcst, &oldcst, speed)\n \t\t\t      && have_add2_insn (reg, new_src))\n \t\t\t    {\n-\t\t\t      rtx newpat = gen_rtx_SET (VOIDmode, reg, tem);\n+\t\t\t      rtx newpat = gen_rtx_SET (reg, tem);\n \t\t\t      success\n \t\t\t\t= validate_change (next, &PATTERN (next),\n \t\t\t\t\t\t   newpat, 0);\n@@ -2150,7 +2149,7 @@ reload_cse_move2add (rtx_insn *first)\n \t      && CONST_INT_P (XEXP (cnd, 1)))\n \t    {\n \t      rtx implicit_set =\n-\t\tgen_rtx_SET (VOIDmode, XEXP (cnd, 0), XEXP (cnd, 1));\n+\t\tgen_rtx_SET (XEXP (cnd, 0), XEXP (cnd, 1));\n \t      move2add_note_store (SET_DEST (implicit_set), implicit_set, insn);\n \t    }\n \t}"}, {"sha": "031577abc625195887de1fdeee3432366f411acb", "filename": "gcc/ree.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Free.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Free.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Free.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -386,15 +386,15 @@ combine_set_extension (ext_cand *cand, rtx_insn *curr_insn, rtx *orig_set)\n       && HOST_BITS_PER_WIDE_INT >= GET_MODE_BITSIZE (cand->mode))\n     {\n       if (INTVAL (orig_src) >= 0 || cand->code == SIGN_EXTEND)\n-\tnew_set = gen_rtx_SET (VOIDmode, new_reg, orig_src);\n+\tnew_set = gen_rtx_SET (new_reg, orig_src);\n       else\n \t{\n \t  /* Zero-extend the negative constant by masking out the bits outside\n \t     the source mode.  */\n \t  rtx new_const_int\n \t    = gen_int_mode (INTVAL (orig_src) & GET_MODE_MASK (orig_mode),\n \t\t\t    GET_MODE (new_reg));\n-\t  new_set = gen_rtx_SET (VOIDmode, new_reg, new_const_int);\n+\t  new_set = gen_rtx_SET (new_reg, new_const_int);\n \t}\n     }\n   else if (GET_MODE (orig_src) == VOIDmode)\n@@ -410,7 +410,7 @@ combine_set_extension (ext_cand *cand, rtx_insn *curr_insn, rtx *orig_set)\n       rtx simplified_temp_extension = simplify_rtx (temp_extension);\n       if (simplified_temp_extension)\n         temp_extension = simplified_temp_extension;\n-      new_set = gen_rtx_SET (VOIDmode, new_reg, temp_extension);\n+      new_set = gen_rtx_SET (new_reg, temp_extension);\n     }\n   else if (GET_CODE (orig_src) == IF_THEN_ELSE)\n     {\n@@ -426,7 +426,7 @@ combine_set_extension (ext_cand *cand, rtx_insn *curr_insn, rtx *orig_set)\n       rtx simplified_temp_extension = simplify_rtx (temp_extension);\n       if (simplified_temp_extension)\n         temp_extension = simplified_temp_extension;\n-      new_set = gen_rtx_SET (VOIDmode, new_reg, temp_extension);\n+      new_set = gen_rtx_SET (new_reg, temp_extension);\n     }\n \n   /* This change is a part of a group of changes.  Hence,\n@@ -481,7 +481,7 @@ transform_ifelse (ext_cand *cand, rtx_insn *def_insn)\n   map_srcreg2 = gen_rtx_REG (cand->mode, REGNO (srcreg2));\n   map_dstreg = gen_rtx_REG (cand->mode, REGNO (dstreg));\n   ifexpr = gen_rtx_IF_THEN_ELSE (cand->mode, cond, map_srcreg, map_srcreg2);\n-  new_set = gen_rtx_SET (VOIDmode, map_dstreg, ifexpr);\n+  new_set = gen_rtx_SET (map_dstreg, ifexpr);\n \n   if (validate_change (def_insn, &PATTERN (def_insn), new_set, true)\n       && update_reg_equal_equiv_notes (def_insn, cand->mode, GET_MODE (dstreg),\n@@ -1232,7 +1232,7 @@ find_and_remove_re (void)\n \t\t\t\t REGNO (XEXP (SET_SRC (pat), 0)));\n       rtx new_src = gen_rtx_REG (GET_MODE (SET_DEST (sub_rtx)),\n \t\t\t\t REGNO (SET_DEST (pat)));\n-      rtx set = gen_rtx_SET (VOIDmode, new_dst, new_src);\n+      rtx set = gen_rtx_SET (new_dst, new_src);\n       emit_insn_after (set, def_insn);\n     }\n "}, {"sha": "c5d52c1d686fa7701f63ad598eadb7632c30778a", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -782,7 +782,7 @@ emit_pop_insn (rtx_insn *insn, stack_ptr regstack, rtx reg, enum emit_where wher\n \n   gcc_assert (hard_regno >= FIRST_STACK_REG);\n \n-  pop_rtx = gen_rtx_SET (VOIDmode, FP_MODE_REG (hard_regno, DFmode),\n+  pop_rtx = gen_rtx_SET (FP_MODE_REG (hard_regno, DFmode),\n \t\t\t FP_MODE_REG (FIRST_STACK_REG, DFmode));\n \n   if (where == EMIT_AFTER)\n@@ -1112,7 +1112,7 @@ move_nan_for_stack_reg (rtx_insn *insn, stack_ptr regstack, rtx dest)\n   rtx pat;\n \n   dest = FP_MODE_REG (REGNO (dest), SFmode);\n-  pat = gen_rtx_SET (VOIDmode, dest, not_a_num);\n+  pat = gen_rtx_SET (dest, not_a_num);\n   PATTERN (insn) = pat;\n   INSN_CODE (insn) = -1;\n \n@@ -2437,8 +2437,8 @@ change_stack (rtx_insn *insn, stack_ptr old, stack_ptr new_stack,\n       {\n \told->reg[++old->top] = i;\n         SET_HARD_REG_BIT (old->reg_set, i);\n-\temit_insn_before (gen_rtx_SET (VOIDmode,\n-\t\t\t\t       FP_MODE_REG (i, SFmode), not_a_num), insn);\n+\temit_insn_before (gen_rtx_SET (FP_MODE_REG (i, SFmode), not_a_num),\n+\t\t\t  insn);\n       }\n \n   /* Pop any registers that are not needed in the new block.  */\n@@ -2663,8 +2663,7 @@ convert_regs_entry (void)\n \n \t    bi->stack_in.reg[++top] = reg;\n \n-\t    init = gen_rtx_SET (VOIDmode,\n-\t\t\t\tFP_MODE_REG (FIRST_STACK_REG, SFmode),\n+\t    init = gen_rtx_SET (FP_MODE_REG (FIRST_STACK_REG, SFmode),\n \t\t\t\tnot_a_num);\n \t    insert_insn_on_edge (init, e);\n \t    inserted = 1;\n@@ -3032,7 +3031,7 @@ convert_regs_1 (basic_block block)\n \t  if (dump_file)\n \t    fprintf (dump_file, \"Emitting insn initializing reg %d\\n\", reg);\n \n-\t  set = gen_rtx_SET (VOIDmode, FP_MODE_REG (reg, SFmode), not_a_num);\n+\t  set = gen_rtx_SET (FP_MODE_REG (reg, SFmode), not_a_num);\n \t  insn = emit_insn_after (set, insn);\n \t  control_flow_insn_deleted |= subst_stack_regs (insn, &regstack);\n \t}"}, {"sha": "dde70b2bcd8478c8b117a46fd570ba1d00c2fadb", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -935,7 +935,7 @@ can_reload_into (rtx in, int regno, machine_mode mode)\n   /* If we can make a simple SET insn that does the job, everything should\n      be fine.  */\n   dst =  gen_rtx_REG (mode, regno);\n-  test_insn = make_insn_raw (gen_rtx_SET (VOIDmode, dst, in));\n+  test_insn = make_insn_raw (gen_rtx_SET (dst, in));\n   save_recog_data = recog_data;\n   if (recog_memoized (test_insn) >= 0)\n     {"}, {"sha": "d2c5524ddcfa3585a5079b3119617683c8e8d407", "filename": "gcc/reload1.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -3452,8 +3452,7 @@ eliminate_regs_in_insn (rtx_insn *insn, int replace)\n \t\t   the INSN_CODE the same and let reload fix it up.  */\n \t\tif (!validate_change (insn, &SET_SRC (old_set), new_src, 0))\n \t\t  {\n-\t\t    rtx new_pat = gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t       SET_DEST (old_set), new_src);\n+\t\t    rtx new_pat = gen_rtx_SET (SET_DEST (old_set), new_src);\n \n \t\t    if (!validate_change (insn, &PATTERN (insn), new_pat, 0))\n \t\t      SET_SRC (old_set) = new_src;\n@@ -5740,7 +5739,7 @@ gen_reload_chain_without_interm_reg_p (int r1, int r2)\n \t  || CONSTANT_P (XEXP (in, 1))\n \t  || MEM_P (XEXP (in, 1))))\n     {\n-      insn = emit_insn (gen_rtx_SET (VOIDmode, out, in));\n+      insn = emit_insn (gen_rtx_SET (out, in));\n       code = recog_memoized (insn);\n       result = false;\n \n@@ -8710,7 +8709,7 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n       if (op0 != XEXP (in, 0) || op1 != XEXP (in, 1))\n \tin = gen_rtx_PLUS (GET_MODE (in), op0, op1);\n \n-      insn = emit_insn_if_valid_for_reload (gen_rtx_SET (VOIDmode, out, in));\n+      insn = emit_insn_if_valid_for_reload (gen_rtx_SET (out, in));\n       if (insn)\n \treturn insn;\n \n@@ -8799,7 +8798,7 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n \tin = gen_rtx_fmt_e (GET_CODE (in), GET_MODE (in), op1);\n \n       /* First, try a plain SET.  */\n-      set = emit_insn_if_valid_for_reload (gen_rtx_SET (VOIDmode, out, in));\n+      set = emit_insn_if_valid_for_reload (gen_rtx_SET (out, in));\n       if (set)\n \treturn set;\n \n@@ -8814,10 +8813,8 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n \n       gen_reload (out_moded, op1, opnum, type);\n \n-      insn\n-\t= gen_rtx_SET (VOIDmode, out,\n-\t\t       gen_rtx_fmt_e (GET_CODE (in), GET_MODE (in),\n-\t\t\t\t      out_moded));\n+      insn = gen_rtx_SET (out, gen_rtx_fmt_e (GET_CODE (in), GET_MODE (in),\n+\t\t\t\t\t      out_moded));\n       insn = emit_insn_if_valid_for_reload (insn);\n       if (insn)\n \t{\n@@ -8842,7 +8839,7 @@ gen_reload (rtx out, rtx in, int opnum, enum reload_type type)\n \n   /* Otherwise, just write (set OUT IN) and hope for the best.  */\n   else\n-    emit_insn (gen_rtx_SET (VOIDmode, out, in));\n+    emit_insn (gen_rtx_SET (out, in));\n \n   /* Return the first insn emitted.\n      We can not just return get_last_insn, because there may have\n@@ -9236,7 +9233,7 @@ inc_for_reload (rtx reloadreg, rtx in, rtx value, int inc_amount)\n \t that in gen_reload.  */\n \n       last = get_last_insn ();\n-      add_insn = emit_insn (gen_rtx_SET (VOIDmode, incloc,\n+      add_insn = emit_insn (gen_rtx_SET (incloc,\n \t\t\t\t\t gen_rtx_PLUS (GET_MODE (incloc),\n \t\t\t\t\t\t       incloc, inc)));\n "}, {"sha": "cb251eebb9a381ccc6e746068f977c0cc4d462bb", "filename": "gcc/reorg.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -2788,8 +2788,7 @@ fill_slots_from_thread (rtx_insn *insn, rtx condition, rtx thread_or_return,\n \t    new_arith = gen_rtx_fmt_ee (GET_CODE (src) == PLUS ? MINUS : PLUS,\n \t\t\t\t\tGET_MODE (src), dest, other);\n \n-\t  ninsn = emit_insn_after (gen_rtx_SET (VOIDmode, dest, new_arith),\n-\t\t\t\t   insn);\n+\t  ninsn = emit_insn_after (gen_rtx_SET (dest, new_arith), insn);\n \n \t  if (recog_memoized (ninsn) < 0\n \t      || (extract_insn (ninsn),"}, {"sha": "273e2d56274e6a9e977be98509fc4efe53effc3d", "filename": "gcc/rtl.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1787,6 +1787,14 @@ rhs_regno (const_rtx x)\n    not to use an rtx with this cost under any circumstances.  */\n #define MAX_COST INT_MAX\n \n+/* Return true if CODE always has VOIDmode.  */\n+\n+static inline bool\n+always_void_p (enum rtx_code code)\n+{\n+  return code == SET;\n+}\n+\n /* A structure to hold all available cost information about an rtl\n    expression.  */\n struct full_rtx_costs\n@@ -3597,5 +3605,4 @@ extern void _fatal_insn (const char *, const_rtx, const char *, int, const char\n /* reginfo.c */\n extern tree GTY(()) global_regs_decl[FIRST_PSEUDO_REGISTER];\n \n-\n #endif /* ! GCC_RTL_H */"}, {"sha": "b8ed356a2a2a3d170e1206972190cc3a8325a0bf", "filename": "gcc/sel-sched.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fsel-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fsel-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsel-sched.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -863,7 +863,7 @@ create_insn_rtx_with_rhs (vinsn_t vi, rtx rhs_rtx)\n \n   lhs_rtx = copy_rtx (VINSN_LHS (vi));\n \n-  pattern = gen_rtx_SET (VOIDmode, lhs_rtx, rhs_rtx);\n+  pattern = gen_rtx_SET (lhs_rtx, rhs_rtx);\n   insn_rtx = create_insn_rtx_from_pattern (pattern, NULL_RTX);\n \n   return insn_rtx;\n@@ -944,7 +944,7 @@ create_insn_rtx_with_lhs (vinsn_t vi, rtx lhs_rtx)\n \n   rhs_rtx = copy_rtx (VINSN_RHS (vi));\n \n-  pattern = gen_rtx_SET (VOIDmode, lhs_rtx, rhs_rtx);\n+  pattern = gen_rtx_SET (lhs_rtx, rhs_rtx);\n   insn_rtx = create_insn_rtx_from_pattern (pattern, NULL_RTX);\n \n   return insn_rtx;\n@@ -2110,7 +2110,7 @@ implicit_clobber_conflict_p (insn_t through_insn, expr_t expr)\n \n   /* Make a new insn with it.  */\n   rhs = copy_rtx (VINSN_RHS (EXPR_VINSN (expr)));\n-  pat = gen_rtx_SET (VOIDmode, reg, rhs);\n+  pat = gen_rtx_SET (reg, rhs);\n   start_sequence ();\n   insn = emit_insn (pat);\n   end_sequence ();"}, {"sha": "460f6e752789b5c92eabb822d23777946be31ff8", "filename": "gcc/var-tracking.c", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fvar-tracking.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7df4a840c47845783129279750f1c214e74e7d1/gcc%2Fvar-tracking.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvar-tracking.c?ref=f7df4a840c47845783129279750f1c214e74e7d1", "patch": "@@ -1098,8 +1098,7 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n       tem = simplify_replace_fn_rtx (tem, old_rtx, adjust_mems, data);\n       amd->store = store_save;\n       amd->side_effects = alloc_EXPR_LIST (0,\n-\t\t\t\t\t   gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t\t\tXEXP (loc, 0), tem),\n+\t\t\t\t\t   gen_rtx_SET (XEXP (loc, 0), tem),\n \t\t\t\t\t   amd->side_effects);\n       return addr;\n     case PRE_MODIFY:\n@@ -1115,8 +1114,7 @@ adjust_mems (rtx loc, const_rtx old_rtx, void *data)\n \t\t\t\t     adjust_mems, data);\n       amd->store = store_save;\n       amd->side_effects = alloc_EXPR_LIST (0,\n-\t\t\t\t\t   gen_rtx_SET (VOIDmode,\n-\t\t\t\t\t\t\tXEXP (loc, 0), tem),\n+\t\t\t\t\t   gen_rtx_SET (XEXP (loc, 0), tem),\n \t\t\t\t\t   amd->side_effects);\n       return addr;\n     case SUBREG:\n@@ -1227,7 +1225,7 @@ adjust_insn (basic_block bb, rtx_insn *insn)\n       FOR_EACH_VEC_SAFE_ELT (windowed_parm_regs, i, p)\n \t{\n \t  XVECEXP (rtl, 0, i * 2)\n-\t    = gen_rtx_SET (VOIDmode, p->incoming, p->outgoing);\n+\t    = gen_rtx_SET (p->incoming, p->outgoing);\n \t  /* Do not clobber the attached DECL, but only the REG.  */\n \t  XVECEXP (rtl, 0, i * 2 + 1)\n \t    = gen_rtx_CLOBBER (GET_MODE (p->outgoing),\n@@ -5883,7 +5881,7 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n \t      && find_use_val (loc, mode, cui))\n \t    {\n \t      gcc_checking_assert (type == MO_VAL_SET);\n-\t      mo.u.loc = gen_rtx_SET (VOIDmode, loc, SET_SRC (expr));\n+\t      mo.u.loc = gen_rtx_SET (loc, SET_SRC (expr));\n \t    }\n \t}\n       else\n@@ -5901,7 +5899,7 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n \t    }\n \t  else\n \t    {\n-\t      rtx xexpr = gen_rtx_SET (VOIDmode, loc, src);\n+\t      rtx xexpr = gen_rtx_SET (loc, src);\n \t      if (same_variable_part_p (src, REG_EXPR (loc), REG_OFFSET (loc)))\n \t\t{\n \t\t  /* If this is an instruction copying (part of) a parameter\n@@ -5966,7 +5964,7 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n \t    }\n \t  else\n \t    {\n-\t      rtx xexpr = gen_rtx_SET (VOIDmode, loc, src);\n+\t      rtx xexpr = gen_rtx_SET (loc, src);\n \t      if (same_variable_part_p (SET_SRC (xexpr),\n \t\t\t\t\tMEM_EXPR (loc),\n \t\t\t\t\tINT_MEM_OFFSET (loc)))\n@@ -6065,7 +6063,7 @@ add_stores (rtx loc, const_rtx expr, void *cuip)\n \t}\n \n       if (nloc && nloc != SET_SRC (mo.u.loc))\n-\toloc = gen_rtx_SET (GET_MODE (mo.u.loc), oloc, nloc);\n+\toloc = gen_rtx_SET (oloc, nloc);\n       else\n \t{\n \t  if (oloc == SET_DEST (mo.u.loc))"}]}