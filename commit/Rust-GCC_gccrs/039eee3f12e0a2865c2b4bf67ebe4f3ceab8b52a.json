{"sha": "039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDM5ZWVlM2YxMmUwYTI4NjVjMmI0YmY2N2ViZTRmM2NlYWI4YjUyYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-03T10:51:42Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2014-01-03T10:51:42Z"}, "message": "i386.md (MODE_SIZE): New mode attribute.\n\n\t* config/i386/i386.md (MODE_SIZE): New mode attribute.\n\t(push splitter): Use <P:MODE_SIZE> instead of\n\tGET_MODE_SIZE (<P:MODE>mode).\n\t(lea splitter): Use <MODE_SIZE> instead of GET_MODE_SIZE (<MODE>mode).\n\t(mov -1, reg peephole2): Likewise.\n\t* config/i386/sse.md (*mov<mode>_internal,\n\t<sse>_storeu<ssemodesuffix><avxsizesuffix>,\n\t<sse2_avx_avx512f>_storedqu<mode>, <sse>_andnot<mode>3,\n\t*<code><mode>3, *andnot<mode>3<mask_name>,\n\t<mask_codefor><code><mode>3<mask_name>): Likewise.\n\t* config/i386/subst.md (mask_mode512bit_condition,\n\tsd_mask_mode512bit_condition): Likewise.\n\nFrom-SVN: r206312", "tree": {"sha": "f4055b39f1e7e662fd22d6c8e817d735af85bab8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f4055b39f1e7e662fd22d6c8e817d735af85bab8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a/comments", "author": null, "committer": null, "parents": [{"sha": "517c399e850bc728b8905034695ae50c51a3cf55", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/517c399e850bc728b8905034695ae50c51a3cf55", "html_url": "https://github.com/Rust-GCC/gccrs/commit/517c399e850bc728b8905034695ae50c51a3cf55"}], "stats": {"total": 66, "additions": 47, "deletions": 19}, "files": [{"sha": "e4d71d700e9096c63ceebd37e40e5f5dbbb836e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a", "patch": "@@ -1,8 +1,22 @@\n+2014-01-03  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* config/i386/i386.md (MODE_SIZE): New mode attribute.\n+\t(push splitter): Use <P:MODE_SIZE> instead of\n+\tGET_MODE_SIZE (<P:MODE>mode).\n+\t(lea splitter): Use <MODE_SIZE> instead of GET_MODE_SIZE (<MODE>mode).\n+\t(mov -1, reg peephole2): Likewise.\n+\t* config/i386/sse.md (*mov<mode>_internal,\n+\t<sse>_storeu<ssemodesuffix><avxsizesuffix>,\n+\t<sse2_avx_avx512f>_storedqu<mode>, <sse>_andnot<mode>3,\n+\t*<code><mode>3, *andnot<mode>3<mask_name>,\n+\t<mask_codefor><code><mode>3<mask_name>): Likewise.\n+\t* config/i386/subst.md (mask_mode512bit_condition,\n+\tsd_mask_mode512bit_condition): Likewise.\n+\n 2014-01-02  Xinliang David Li  <davidxl@google.com>\n \n \tPR tree-optimization/59303\n-\t* tree-ssa-uninit.c (is_use_properly_guarded):\n-\tMain cleanup.\n+\t* tree-ssa-uninit.c (is_use_properly_guarded): Main cleanup.\n \t(dump_predicates): Better output format.\n \t(pred_equal_p): New function.\n \t(is_neq_relop_p): Ditto."}, {"sha": "de0b2dd771b9d4f0846275cf9273182d753697bf", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a", "patch": "@@ -914,6 +914,20 @@\n (define_mode_iterator DWI [(DI \"!TARGET_64BIT\")\n \t\t\t   (TI \"TARGET_64BIT\")])\n \n+;; GET_MODE_SIZE for selected modes.  As GET_MODE_SIZE is not\n+;; compile time constant, it is faster to use <MODE_SIZE> than\n+;; GET_MODE_SIZE (<MODE>mode).  For XFmode which depends on\n+;; command line options just use GET_MODE_SIZE macro.\n+(define_mode_attr MODE_SIZE [(QI \"1\") (HI \"2\") (SI \"4\") (DI \"8\") (TI \"16\")\n+\t\t\t     (SF \"4\") (DF \"8\") (XF \"GET_MODE_SIZE (XFmode)\")\n+\t\t\t     (V16QI \"16\") (V32QI \"32\") (V64QI \"64\")\n+\t\t\t     (V8HI \"16\") (V16HI \"32\") (V32HI \"64\")\n+\t\t\t     (V4SI \"16\") (V8SI \"32\") (V16SI \"64\")\n+\t\t\t     (V2DI \"16\") (V4DI \"32\") (V8DI \"64\")\n+\t\t\t     (V1TI \"16\") (V2TI \"32\") (V4TI \"64\")\n+\t\t\t     (V2DF \"16\") (V4DF \"32\") (V8DF \"64\")\n+\t\t\t     (V4SF \"16\") (V8SF \"32\") (V16SF \"64\")])\n+\n ;; Double word integer modes as mode attribute.\n (define_mode_attr DWI [(QI \"HI\") (HI \"SI\") (SI \"DI\") (DI \"TI\")])\n (define_mode_attr dwi [(QI \"hi\") (HI \"si\") (SI \"di\") (DI \"ti\")])\n@@ -2734,7 +2748,7 @@\n   \"reload_completed\"\n   [(set (reg:P SP_REG) (plus:P (reg:P SP_REG) (match_dup 2)))\n    (set (mem:SF (reg:P SP_REG)) (match_dup 1))]\n-  \"operands[2] = GEN_INT (-GET_MODE_SIZE (<P:MODE>mode));\")\n+  \"operands[2] = GEN_INT (-<P:MODE_SIZE>);\")\n \n (define_split\n   [(set (match_operand:SF 0 \"push_operand\")\n@@ -5770,7 +5784,7 @@\n   enum machine_mode mode = <MODE>mode;\n   rtx pat;\n \n-  if (GET_MODE_SIZE (mode) < GET_MODE_SIZE (SImode))\n+  if (<MODE_SIZE> < GET_MODE_SIZE (SImode))\n     { \n       mode = SImode; \n       operands[0] = gen_lowpart (mode, operands[0]);\n@@ -17403,7 +17417,7 @@\n   [(parallel [(set (match_dup 0) (const_int -1))\n \t      (clobber (reg:CC FLAGS_REG))])]\n {\n-  if (GET_MODE_SIZE (<MODE>mode) < GET_MODE_SIZE (SImode))\n+  if (<MODE_SIZE> < GET_MODE_SIZE (SImode))\n     operands[0] = gen_lowpart (SImode, operands[0]);\n })\n "}, {"sha": "405f9988d9bf410688a9a797a1bd8725abe5fc93", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a", "patch": "@@ -669,26 +669,26 @@\n       /* There is no evex-encoded vmov* for sizes smaller than 64-bytes\n \t in avx512f, so we need to use workarounds, to access sse registers\n \t 16-31, which are evex-only.  */\n-      if (TARGET_AVX512F && GET_MODE_SIZE (<MODE>mode) < 64\n+      if (TARGET_AVX512F && <MODE_SIZE> < 64\n \t  && ((REG_P (operands[0])\n \t       && EXT_REX_SSE_REGNO_P (REGNO (operands[0])))\n \t      || (REG_P (operands[1])\n \t\t  && EXT_REX_SSE_REGNO_P (REGNO (operands[1])))))\n \t{\n \t  if (memory_operand (operands[0], <MODE>mode))\n \t    {\n-\t      if (GET_MODE_SIZE (<MODE>mode) == 32)\n+\t      if (<MODE_SIZE> == 32)\n \t\treturn \"vextract<shuffletype>64x4\\t{$0x0, %g1, %0|%0, %g1, 0x0}\";\n-\t      else if (GET_MODE_SIZE (<MODE>mode) == 16)\n+\t      else if (<MODE_SIZE> == 16)\n \t\treturn \"vextract<shuffletype>32x4\\t{$0x0, %g1, %0|%0, %g1, 0x0}\";\n \t      else\n \t\tgcc_unreachable ();\n \t    }\n \t  else if (memory_operand (operands[1], <MODE>mode))\n \t    {\n-\t      if (GET_MODE_SIZE (<MODE>mode) == 32)\n+\t      if (<MODE_SIZE> == 32)\n \t\treturn \"vbroadcast<shuffletype>64x4\\t{%1, %g0|%g0, %1}\";\n-\t      else if (GET_MODE_SIZE (<MODE>mode) == 16)\n+\t      else if (<MODE_SIZE> == 16)\n \t\treturn \"vbroadcast<shuffletype>32x4\\t{%1, %g0|%g0, %1}\";\n \t      else\n \t\tgcc_unreachable ();\n@@ -759,7 +759,7 @@\n    (set (attr \"mode\")\n \t(cond [(match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t (const_string \"<ssePSmode>\")\n-\t       (and (match_test \"GET_MODE_SIZE (<MODE>mode) == 16\")\n+\t       (and (match_test \"<MODE_SIZE> == 16\")\n \t\t    (and (eq_attr \"alternative\" \"2\")\n \t\t\t (match_test \"TARGET_SSE_TYPELESS_STORES\")))\n \t\t (const_string \"<ssePSmode>\")\n@@ -998,7 +998,7 @@\n    (set_attr \"ssememalign\" \"8\")\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n-        (cond [(and (match_test \"GET_MODE_SIZE (<MODE>mode) == 16\")\n+\t(cond [(and (match_test \"<MODE_SIZE> == 16\")\n                     (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n                          (match_test \"TARGET_SSE_TYPELESS_STORES\")))\n \t\t (const_string \"<ssePSmode>\")\n@@ -1127,7 +1127,7 @@\n      (const_string \"1\")))\n    (set_attr \"prefix\" \"maybe_vex\")\n    (set (attr \"mode\")\n-\t(cond [(and (match_test \"GET_MODE_SIZE (<MODE>mode) == 16\")\n+\t(cond [(and (match_test \"<MODE_SIZE> == 16\")\n \t\t    (ior (match_test \"TARGET_SSE_PACKED_SINGLE_INSN_OPTIMAL\")\n \t\t\t (match_test \"TARGET_SSE_TYPELESS_STORES\")))\n \t\t (const_string \"<ssePSmode>\")\n@@ -2363,7 +2363,7 @@\n     }\n \n   /* There is no vandnp[sd].  Use vpandnq.  */\n-  if (GET_MODE_SIZE (<MODE>mode) == 64)\n+  if (<MODE_SIZE> == 64)\n     {\n       suffix = \"q\";\n       ops = \"vpandn%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n@@ -2435,7 +2435,7 @@\n     }\n \n   /* There is no v<logic>p[sd].  Use vp<logic>q.  */\n-  if (GET_MODE_SIZE (<MODE>mode) == 64)\n+  if (<MODE_SIZE> == 64)\n     {\n       suffix = \"q\";\n       ops = \"vp<logic>%s\\t{%%2, %%1, %%0|%%0, %%1, %%2}\";\n@@ -8940,7 +8940,7 @@\n \t\t (const_string \"<sseinsnmode>\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (if_then_else\n-\t\t   (match_test \"GET_MODE_SIZE (<MODE>mode) > 16\")\n+\t\t   (match_test \"<MODE_SIZE> > 16\")\n \t\t   (const_string \"V8SF\")\n \t\t   (const_string \"<sseinsnmode>\"))\n \t       (ior (not (match_test \"TARGET_SSE2\"))\n@@ -9032,7 +9032,7 @@\n \t\t (const_string \"<sseinsnmode>\")\n \t       (match_test \"TARGET_AVX\")\n \t\t (if_then_else\n-\t\t   (match_test \"GET_MODE_SIZE (<MODE>mode) > 16\")\n+\t\t   (match_test \"<MODE_SIZE> > 16\")\n \t\t   (const_string \"V8SF\")\n \t\t   (const_string \"<sseinsnmode>\"))\n \t       (ior (not (match_test \"TARGET_SSE2\"))"}, {"sha": "7fd39487f9694e9423c0d91a99340f2f42702a6e", "filename": "gcc/config/i386/subst.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a/gcc%2Fconfig%2Fi386%2Fsubst.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a/gcc%2Fconfig%2Fi386%2Fsubst.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsubst.md?ref=039eee3f12e0a2865c2b4bf67ebe4f3ceab8b52a", "patch": "@@ -51,7 +51,7 @@\n (define_subst_attr \"mask_operand18\" \"mask\" \"\" \"%{%19%}%N18\")\n (define_subst_attr \"mask_operand19\" \"mask\" \"\" \"%{%20%}%N19\")\n (define_subst_attr \"mask_codefor\" \"mask\" \"*\" \"\")\n-(define_subst_attr \"mask_mode512bit_condition\" \"mask\" \"1\" \"(GET_MODE_SIZE (<MODE>mode) == 64)\")\n+(define_subst_attr \"mask_mode512bit_condition\" \"mask\" \"1\" \"(<MODE_SIZE> == 64)\")\n (define_subst_attr \"store_mask_constraint\" \"mask\" \"vm\" \"v\")\n (define_subst_attr \"store_mask_predicate\" \"mask\" \"nonimmediate_operand\" \"register_operand\")\n (define_subst_attr \"mask_prefix\" \"mask\" \"vex\" \"evex\")\n@@ -85,7 +85,7 @@\n (define_subst_attr \"sd_mask_op4\" \"sd\" \"\" \"%{%5%}%N4\")\n (define_subst_attr \"sd_mask_op5\" \"sd\" \"\" \"%{%6%}%N5\")\n (define_subst_attr \"sd_mask_codefor\" \"sd\" \"*\" \"\")\n-(define_subst_attr \"sd_mask_mode512bit_condition\" \"sd\" \"1\" \"(GET_MODE_SIZE (<MODE>mode) == 64)\")\n+(define_subst_attr \"sd_mask_mode512bit_condition\" \"sd\" \"1\" \"(<MODE_SIZE> == 64)\")\n \n (define_subst \"sd\"\n  [(set (match_operand:SUBST_V 0)"}]}