{"sha": "6ad073329cea8de835c2939dfb40c305f5568b72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmFkMDczMzI5Y2VhOGRlODM1YzI5MzlkZmI0MGMzMDVmNTU2OGI3Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@yorick.cygnus.com", "date": "1999-08-07T01:01:54Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "1999-08-07T01:01:54Z"}, "message": "decl.c (lookup_name_real): Set the complain flag if we're looking for a namespace member.\n\n\t* decl.c (lookup_name_real): Set the complain flag if we're\n\tlooking for a namespace member.\n\n\t* lex.c (real_yylex): We can have a number with no digits.\n\n\t* cvt.c (cp_convert_to_pointer): Don't force pmf conversions.\n\n\t* search.c (binfo_from_vbase): New fn.\n\t* cp-tree.h: Declare it.\n\t* cvt.c (cp_convert_to_pointer): Use it to diagnose conversion\n\tfrom pointer to member of virtual base.\n\t* typeck.c (get_delta_difference): Likewise.\n\nFrom-SVN: r28560", "tree": {"sha": "0207ce2b34a5962b32c2886da0b90ccf59340bee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0207ce2b34a5962b32c2886da0b90ccf59340bee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ad073329cea8de835c2939dfb40c305f5568b72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad073329cea8de835c2939dfb40c305f5568b72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ad073329cea8de835c2939dfb40c305f5568b72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ad073329cea8de835c2939dfb40c305f5568b72/comments", "author": null, "committer": null, "parents": [{"sha": "446588abcb3251b1ef52cdab8f7b761354c1f8d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/446588abcb3251b1ef52cdab8f7b761354c1f8d6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/446588abcb3251b1ef52cdab8f7b761354c1f8d6"}], "stats": {"total": 53, "additions": 46, "deletions": 7}, "files": [{"sha": "a9e045bc6ea4426f5411b3230984f8deb0b8a882", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6ad073329cea8de835c2939dfb40c305f5568b72", "patch": "@@ -1,3 +1,18 @@\n+1999-08-06  Jason Merrill  <jason@yorick.cygnus.com>\n+\n+\t* decl.c (lookup_name_real): Set the complain flag if we're\n+\tlooking for a namespace member.\n+\n+\t* lex.c (real_yylex): We can have a number with no digits.\n+\n+\t* cvt.c (cp_convert_to_pointer): Don't force pmf conversions.\n+\n+\t* search.c (binfo_from_vbase): New fn.\n+\t* cp-tree.h: Declare it.\n+\t* cvt.c (cp_convert_to_pointer): Use it to diagnose conversion\n+\tfrom pointer to member of virtual base.  \n+\t* typeck.c (get_delta_difference): Likewise.\n+\n 1999-08-06  Alexandre Oliva  <oliva@dcc.unicamp.br>\n \n \t* pt.c (tsubst): Use build_index_type to build in-template array"}, {"sha": "cc076a0f17b33539dd1b96815db9dae95118ea69", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=6ad073329cea8de835c2939dfb40c305f5568b72", "patch": "@@ -3343,6 +3343,7 @@ extern void reinit_search_statistics\t\tPROTO((void));\n extern tree current_scope\t\t\tPROTO((void));\n extern tree lookup_conversions\t\t\tPROTO((tree));\n extern tree binfo_for_vtable\t\t\tPROTO((tree));\n+extern int  binfo_from_vbase\t\t\tPROTO((tree));\n extern tree dfs_walk                            PROTO((tree, \n \t\t\t\t\t\t       tree (*)(tree, void *),\n \t\t\t\t\t\t       tree (*) (tree, void *),"}, {"sha": "72cbcaf87533e3aae7b81e3a2b7ea27866100411", "filename": "gcc/cp/cvt.c", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Fcvt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Fcvt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcvt.c?ref=6ad073329cea8de835c2939dfb40c305f5568b72", "patch": "@@ -1,5 +1,5 @@\n /* Language-level data type conversion for GNU C++.\n-   Copyright (C) 1987, 88, 92-97, 1998 Free Software Foundation, Inc.\n+   Copyright (C) 1987-1988, 1992-1999 Free Software Foundation, Inc.\n    Hacked by Michael Tiemann (tiemann@cygnus.com)\n \n This file is part of GNU CC.\n@@ -199,6 +199,13 @@ cp_convert_to_pointer (type, expr)\n \t  if (binfo == error_mark_node)\n \t    return error_mark_node;\n \n+\t  if (binfo_from_vbase (binfo))\n+\t    {\n+\t      cp_error (\"conversion to `%T' from pointer to member of virtual base `%T'\",\n+\t\t\ttype, intype);\n+\t      return error_mark_node;\n+\t    }\n+\t      \n \t  if (TREE_CODE (expr) == PTRMEM_CST)\n \t    expr = cplus_expand_constant (expr);\n \n@@ -217,7 +224,7 @@ cp_convert_to_pointer (type, expr)\n       return rval;\n     }\n   else if (TYPE_PTRMEMFUNC_P (type) && TYPE_PTRMEMFUNC_P (intype))\n-    return build_ptrmemfunc (TYPE_PTRMEMFUNC_FN_TYPE (type), expr, 1);\n+    return build_ptrmemfunc (TYPE_PTRMEMFUNC_FN_TYPE (type), expr, 0);\n   else if (TYPE_PTRMEMFUNC_P (intype))\n     {\n       cp_error (\"cannot convert `%E' from type `%T' to type `%T'\","}, {"sha": "038b09946159aabb3f2b2442d7b54a9768df325a", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6ad073329cea8de835c2939dfb40c305f5568b72", "patch": "@@ -5707,6 +5707,7 @@ lookup_name_real (name, prefer_type, nonclass, namespaces_only)\n \t    {\n \t      struct tree_binding b;\n \t      val = binding_init (&b);\n+\t      flags |= LOOKUP_COMPLAIN;\n \t      if (!qualified_lookup_using_namespace (name, type, val, flags))\n \t\treturn NULL_TREE;\n \t      val = select_decl (val, flags);"}, {"sha": "c16f1fdd0595d5e19300a0a18b9e9349b37fd400", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=6ad073329cea8de835c2939dfb40c305f5568b72", "patch": "@@ -4421,8 +4421,8 @@ lookup_using_namespace (name, val, usings, scope, flags)\n }\n \n /* [namespace.qual]\n-   Excepts the name to lookup and its qualifying scope.\n-   Returns the name/type pair found into the CPLUS_BINDING result,\n+   Accepts the NAME to lookup and its qualifying SCOPE.\n+   Returns the name/type pair found into the CPLUS_BINDING RESULT,\n    or 0 on error. */\n \n int"}, {"sha": "e4236522096759fdd0d206e4c85b688aa82f4639", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=6ad073329cea8de835c2939dfb40c305f5568b72", "patch": "@@ -3973,8 +3973,9 @@ real_yylex ()\n \t      }\n \t  }\n \n+\t/* This can happen on input like `int i = 0x;' */\n \tif (numdigits == 0)\n-\t  my_friendly_abort (990710);\n+\t  error (\"numeric constant with no digits\");\n \n \tif (largest_digit >= base)\n \t  error (\"numeric constant contains digits beyond the radix\");"}, {"sha": "dc898cd3429b97929315d47b58ecfc8f21a3de90", "filename": "gcc/cp/search.c", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=6ad073329cea8de835c2939dfb40c305f5568b72", "patch": "@@ -3315,3 +3315,17 @@ binfo_for_vtable (var)\n   return dfs_walk_real (TYPE_BINFO (type),\n \t\t\t0, dfs_bfv_helper, dfs_bfv_queue_p, &bfvi);\n }\n+\n+/* Returns 1 iff BINFO is from a direct or indirect virtual base.  */\n+\n+int\n+binfo_from_vbase (binfo)\n+     tree binfo;\n+{\n+  for (; binfo; binfo = BINFO_INHERITANCE_CHAIN (binfo))\n+    {\n+      if (TREE_VIA_VIRTUAL (binfo))\n+\treturn 1;\n+    }\n+  return 0;\n+}"}, {"sha": "a4d6573491cabec06f7f3702ed99f6e528df27ec", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ad073329cea8de835c2939dfb40c305f5568b72/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=6ad073329cea8de835c2939dfb40c305f5568b72", "patch": "@@ -6213,7 +6213,7 @@ get_delta_difference (from, to, force)\n       binfo = get_binfo (to, from, 1);\n       if (binfo == 0 || binfo == error_mark_node)\n \treturn delta;\n-      if (TREE_VIA_VIRTUAL (binfo))\n+      if (binfo_from_vbase (binfo))\n \t{\n \t  binfo = binfo_member (BINFO_TYPE (binfo),\n \t\t\t\tCLASSTYPE_VBASECLASSES (from));\n@@ -6229,7 +6229,7 @@ get_delta_difference (from, to, force)\n \t\t\t      delta);\n     }\n \n-  if (TREE_VIA_VIRTUAL (binfo))\n+  if (binfo_from_vbase (binfo))\n     {\n       if (force)\n \t{"}]}