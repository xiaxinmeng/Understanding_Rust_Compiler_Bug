{"sha": "e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM1N2E1ZTAzYzJlNmYzYjFkNTFiZWJlM2M1NzMyMmIyODk1MGIwZg==", "commit": {"author": {"name": "Sebastian Pop", "email": "s.pop@samsung.com", "date": "2015-12-17T18:50:05Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2015-12-17T18:50:05Z"}, "message": "replace ISL with isl\n\nFrom-SVN: r231784", "tree": {"sha": "7f5e57b4637b32e153d20b7805595417c9f2990f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f5e57b4637b32e153d20b7805595417c9f2990f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "616e2b4a9a5ca9f362f80c4a95a84353e342abe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/616e2b4a9a5ca9f362f80c4a95a84353e342abe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/616e2b4a9a5ca9f362f80c4a95a84353e342abe7"}], "stats": {"total": 172, "additions": 98, "deletions": 74}, "files": [{"sha": "9204d0b73731873557cb3bffc93d3f9f80582a7a", "filename": "ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -1,3 +1,12 @@\n+2015-12-17  Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* Makefile.in: Replace ISL with isl.\n+\t* Makefile.tpl: Same.\n+\t* config/isl.m4: Same.\n+\t* configure.ac: Same.\n+\t* contrib/download_prerequisites: Same.\n+\t* configure: Regenerate.\n+\n 2015-12-17  Andris Pavenis  <andris.pavenis@iki.fi>\n \n \t* MAINTAINERS (Write After Approval): Add Myself."}, {"sha": "e9b59502a2c0aeccbace06be1e7a1b105cac6dd6", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -312,7 +312,7 @@ NORMAL_TARGET_EXPORTS = \\\n HOST_GMPLIBS = @gmplibs@\n HOST_GMPINC = @gmpinc@\n \n-# Where to find ISL\n+# Where to find isl\n HOST_ISLLIBS = @isllibs@\n HOST_ISLINC = @islinc@\n "}, {"sha": "f7bb77e6d673b780b13970858076c69447e4eca6", "filename": "Makefile.tpl", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -315,7 +315,7 @@ NORMAL_TARGET_EXPORTS = \\\n HOST_GMPLIBS = @gmplibs@\n HOST_GMPINC = @gmpinc@\n \n-# Where to find ISL\n+# Where to find isl\n HOST_ISLLIBS = @isllibs@\n HOST_ISLINC = @islinc@\n "}, {"sha": "86ccb94abaff1bb16007317bcefeefdc3125a098", "filename": "config/isl.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/config%2Fisl.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/config%2Fisl.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/config%2Fisl.m4?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -94,7 +94,7 @@ AC_DEFUN([ISL_REQUESTED],\n \n # ISL_CHECK_VERSION ISL_CHECK_VERSION ()\n # ----------------------------------------------------------------\n-# Test that ISL contains functionality added to the minimum expected version.\n+# Test whether isl contains functionality added to the minimum expected version.\n AC_DEFUN([ISL_CHECK_VERSION],\n [\n   if test \"${ENABLE_ISL_CHECK}\" = yes ; then"}, {"sha": "f5786ed568b8d7139e9aa0f152c02236d2d8d811", "filename": "configure", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -1549,7 +1549,7 @@ Optional Packages:\n   --with-boot-libs=LIBS   libraries for stage2 and later\n   --with-boot-ldflags=FLAGS\n                           linker flags for stage2 and later\n-  --with-isl=PATH         Specify prefix directory for the installed ISL\n+  --with-isl=PATH         Specify prefix directory for the installed isl\n                           package. Equivalent to\n                           --with-isl-include=PATH/include plus\n                           --with-isl-lib=PATH/lib\n@@ -5943,7 +5943,7 @@ fi\n \n \n \n-# GCC GRAPHITE dependency ISL.\n+# GCC GRAPHITE dependency isl.\n # Basic setup is inlined here, actual checks are in config/isl.m4\n \n \n@@ -5956,7 +5956,7 @@ fi\n # Treat --without-isl as a request to disable\n # GRAPHITE support and skip all following checks.\n if test \"x$with_isl\" != \"xno\"; then\n-  # Check for ISL\n+  # Check for isl\n \n \n # Check whether --with-isl-include was given.\n@@ -6079,13 +6079,13 @@ $as_echo \"recommended isl version is 0.15, minimum required isl version 0.14 is\n     && test \"x${isllibs}\" = x \\\n     && test \"x${islinc}\" = x ; then\n \n-    as_fn_error \"Unable to find a usable ISL.  See config.log for details.\" \"$LINENO\" 5\n+    as_fn_error \"Unable to find a usable isl.  See config.log for details.\" \"$LINENO\" 5\n   fi\n \n \n fi\n \n-# If the ISL check failed, disable builds of in-tree variant of ISL\n+# If the isl check failed, disable builds of in-tree variant of isl\n if test \"x$with_isl\" = xno ||\n    test \"x$gcc_cv_isl\" = xno; then\n   noconfigdirs=\"$noconfigdirs isl\""}, {"sha": "a719e037a0d39984a7138f5a32ac7a14694be365", "filename": "configure.ac", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -1773,31 +1773,31 @@ AC_ARG_WITH(boot-ldflags,\n  fi])\n AC_SUBST(poststage1_ldflags)\n \n-# GCC GRAPHITE dependency ISL.\n+# GCC GRAPHITE dependency isl.\n # Basic setup is inlined here, actual checks are in config/isl.m4\n \n AC_ARG_WITH(isl,\n   [AS_HELP_STRING(\n    [--with-isl=PATH],\n-   [Specify prefix directory for the installed ISL package.\n+   [Specify prefix directory for the installed isl package.\n     Equivalent to --with-isl-include=PATH/include\n     plus --with-isl-lib=PATH/lib])])\n \n # Treat --without-isl as a request to disable\n # GRAPHITE support and skip all following checks.\n if test \"x$with_isl\" != \"xno\"; then\n-  # Check for ISL\n+  # Check for isl\n   dnl Provide configure switches and initialize islinc & isllibs\n   dnl with user input.\n   ISL_INIT_FLAGS\n-  dnl The versions of ISL that work for Graphite\n+  dnl The versions of isl that work for Graphite\n   ISL_CHECK_VERSION()\n-  dnl Only execute fail-action, if ISL has been requested.\n+  dnl Only execute fail-action, if isl has been requested.\n   ISL_IF_FAILED([\n-    AC_MSG_ERROR([Unable to find a usable ISL.  See config.log for details.])])\n+    AC_MSG_ERROR([Unable to find a usable isl.  See config.log for details.])])\n fi\n \n-# If the ISL check failed, disable builds of in-tree variant of ISL\n+# If the isl check failed, disable builds of in-tree variant of isl\n if test \"x$with_isl\" = xno ||\n    test \"x$gcc_cv_isl\" = xno; then\n   noconfigdirs=\"$noconfigdirs isl\""}, {"sha": "cf97ec9daa89dceb4c168b1303c6890ee7e582de", "filename": "contrib/download_prerequisites", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/contrib%2Fdownload_prerequisites", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/contrib%2Fdownload_prerequisites", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fdownload_prerequisites?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -20,7 +20,7 @@\n # along with this program. If not, see http://www.gnu.org/licenses/.\n \n # If you want to disable Graphite loop optimizations while building GCC,\n-# DO NOT set GRAPHITE_LOOP_OPT as yes so that the ISL package will not\n+# DO NOT set GRAPHITE_LOOP_OPT as yes so that the isl package will not\n # be downloaded.\n GRAPHITE_LOOP_OPT=yes\n "}, {"sha": "82a836d177c6610b8d5e67f92c94ba91a3fb9e01", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -1,3 +1,23 @@\n+2015-12-17  Sebastian Pop  <s.pop@samsung.com>\n+\n+\t* Makefile.in: Replace ISL with isl.\n+\t* common.opt: Same.\n+\t* configure: Regenerate.\n+\t* configure.ac: Same.\n+\t* doc/install.texi: Same.\n+\t* doc/invoke.texi: Same.\n+\t* graphite-isl-ast-to-gimple.c: Same.\n+\t* graphite-scop-detection.c: Same.\n+\t* graphite-sese-to-poly.c: Same.\n+\t* graphite.c: Same.\n+\t* graphite.h: Same.\n+\t* params.def: Same.\n+\t* testsuite/gcc.dg/graphite/fuse-1.c: Same.\n+\t* testsuite/gcc.dg/graphite/fuse-2.c: Same.\n+\t* testsuite/gcc.dg/graphite/interchange-1.c: Same.\n+\t* testsuite/gcc.dg/graphite/pr35356-1.c: Same.\n+\t* toplev.c: Same.\n+\n 2015-12-17  Sebastian Pop  <s.pop@samsung.com>\n \n \t* graphite-dependences.c: Move all isl include files to..."}, {"sha": "726fcbb2148637d3cccd08291430bada20d7a4e0", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -365,7 +365,7 @@ ZLIBINC = @zlibinc@\n GMPLIBS = @GMPLIBS@\n GMPINC = @GMPINC@\n \n-# How to find ISL\n+# How to find isl.\n ISLLIBS = @ISLLIBS@\n ISLINC = @ISLINC@\n "}, {"sha": "23f394d8af66307a2d8fe7193fcd4b34652b5174", "filename": "gcc/common.opt", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -1406,7 +1406,7 @@ Does nothing. Preserved for backward compatibility.\n \n floop-nest-optimize\n Common Report Var(flag_loop_nest_optimize) Optimization\n-Enable the ISL based loop nest optimizer.\n+Enable the loop nest optimizer.\n \n fstrict-volatile-bitfields\n Common Report Var(flag_strict_volatile_bitfields) Init(-1) Optimization"}, {"sha": "e6eb99995596e9331ba4c7c574f88c7ca5d8459f", "filename": "gcc/configure", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -1750,8 +1750,8 @@ Some influential environment variables:\n   CPP         C preprocessor\n   GMPLIBS     How to link GMP\n   GMPINC      How to find GMP include files\n-  ISLLIBS     How to link ISL\n-  ISLINC      How to find ISL include files\n+  ISLLIBS     How to link isl\n+  ISLINC      How to find isl include files\n \n Use these variables to override the choices made by `configure' or to help\n it to find libraries and programs with nonstandard names/locations.\n@@ -28932,10 +28932,8 @@ $as_echo \"#define HAVE_isl 1\" >>confdefs.h\n \n fi\n \n-# Check whether isl_schedule_constraints_compute_schedule is available;\n-# it's new in ISL-0.13.\n # Check whether isl_options_set_schedule_serialize_sccs is available;\n-# it's new in ISL-0.15.\n+# it's new in isl 0.15.\n if test \"x${ISLLIBS}\" != \"x\" ; then\n   saved_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS=\"$CXXFLAGS $ISLINC\""}, {"sha": "3aa2737296cd89e1a3760229cfa8b835446a6496", "filename": "gcc/configure.ac", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -5908,16 +5908,14 @@ fi\n AC_ARG_VAR(GMPLIBS,[How to link GMP])\n AC_ARG_VAR(GMPINC,[How to find GMP include files])\n \n-AC_ARG_VAR(ISLLIBS,[How to link ISL])\n-AC_ARG_VAR(ISLINC,[How to find ISL include files])\n+AC_ARG_VAR(ISLLIBS,[How to link isl])\n+AC_ARG_VAR(ISLINC,[How to find isl include files])\n if test \"x${ISLLIBS}\" != \"x\" ; then \n    AC_DEFINE(HAVE_isl, 1, [Define if isl is in use.])\n fi\n \n-# Check whether isl_schedule_constraints_compute_schedule is available;\n-# it's new in ISL-0.13.\n # Check whether isl_options_set_schedule_serialize_sccs is available;\n-# it's new in ISL-0.15.\n+# it's new in isl 0.15.\n if test \"x${ISLLIBS}\" != \"x\" ; then\n   saved_CXXFLAGS=\"$CXXFLAGS\"\n   CXXFLAGS=\"$CXXFLAGS $ISLINC\""}, {"sha": "7f4c414712a2b9666678e96b269746f43b6bf4ba", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -383,14 +383,14 @@ installed but it is not in your default library search path, the\n @option{--with-mpc} configure option should be used.  See also\n @option{--with-mpc-lib} and @option{--with-mpc-include}.\n \n-@item ISL Library version 0.15 or 0.14.\n+@item isl Library version 0.15 or 0.14.\n \n Necessary to build GCC with the Graphite loop optimizations.\n It can be downloaded from @uref{ftp://gcc.gnu.org/pub/gcc/infrastructure/}.\n-If an ISL source distribution is found\n+If an isl source distribution is found\n in a subdirectory of your GCC sources named @file{isl}, it will be\n built together with GCC.  Alternatively, the @option{--with-isl} configure\n-option should be used if ISL is not installed in your default library\n+option should be used if isl is not installed in your default library\n search path.\n \n @end table\n@@ -1850,7 +1850,7 @@ a cross compiler, they will not be used to configure target libraries.\n @item --with-isl=@var{pathname}\n @itemx --with-isl-include=@var{pathname}\n @itemx --with-isl-lib=@var{pathname}\n-If you do not have the ISL library installed in a standard location and you\n+If you do not have the isl library installed in a standard location and you\n want to build GCC, you can explicitly specify the directory where it is\n installed (@samp{--with-isl=@/@var{islinstalldir}}). The\n @option{--with-isl=@/@var{islinstalldir}} option is shorthand for"}, {"sha": "cdc5d2c4e19d475a772cdee324815b3a3b28a198", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -8953,12 +8953,12 @@ Enable the identity transformation for graphite.  For every SCoP we generate\n the polyhedral representation and transform it back to gimple.  Using\n @option{-fgraphite-identity} we can check the costs or benefits of the\n GIMPLE -> GRAPHITE -> GIMPLE transformation.  Some minimal optimizations\n-are also performed by the code generator ISL, like index splitting and\n+are also performed by the code generator isl, like index splitting and\n dead code elimination in loops.\n \n @item -floop-nest-optimize\n @opindex floop-nest-optimize\n-Enable the ISL based loop nest optimizer.  This is a generic loop nest\n+Enable the isl based loop nest optimizer.  This is a generic loop nest\n optimizer based on the Pluto optimization algorithms.  It calculates a loop\n structure optimized for data-locality and parallelism.  This option\n is experimental."}, {"sha": "795232aa0963459faffd485a741756fba79e8dad", "filename": "gcc/graphite-isl-ast-to-gimple.c", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fgraphite-isl-ast-to-gimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fgraphite-isl-ast-to-gimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-isl-ast-to-gimple.c?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -1,4 +1,4 @@\n-/* Translation of ISL AST to Gimple.\n+/* Translation of isl AST to Gimple.\n    Copyright (C) 2014-2015 Free Software Foundation, Inc.\n    Contributed by Roman Gareev <gareevroman@gmail.com>.\n \n@@ -54,7 +54,6 @@ along with GCC; see the file COPYING3.  If not see\n #include \"cfganal.h\"\n #include \"value-prof.h\"\n #include \"graphite.h\"\n-\n #include <map>\n \n /* We always try to use signed 128 bit types, but fall back to smaller types\n@@ -99,12 +98,12 @@ graphite_verify (void)\n   checking_verify_loop_closed_ssa (true);\n }\n \n-/* IVS_PARAMS maps ISL's scattering and parameter identifiers\n+/* IVS_PARAMS maps isl's scattering and parameter identifiers\n    to corresponding trees.  */\n \n typedef std::map<isl_id *, tree> ivs_params;\n \n-/* Free all memory allocated for ISL's identifiers.  */\n+/* Free all memory allocated for isl's identifiers.  */\n \n void ivs_params_clear (ivs_params &ip)\n {\n@@ -146,7 +145,7 @@ class translate_isl_ast_to_gimple\n     : region (r), codegen_error (false)\n     { }\n \n-  /* Translates an ISL AST node NODE to GCC representation in the\n+  /* Translates an isl AST node NODE to GCC representation in the\n      context of a SESE.  */\n   edge translate_isl_ast (loop_p context_loop, __isl_keep isl_ast_node *node,\n \t\t\t  edge next_e, ivs_params &ip);\n@@ -202,7 +201,7 @@ class translate_isl_ast_to_gimple\n   tree nary_op_to_tree (tree type, __isl_take isl_ast_expr *expr,\n \t\t\tivs_params &ip);\n \n-  /* Converts an ISL AST expression E back to a GCC expression tree of\n+  /* Converts an isl AST expression E back to a GCC expression tree of\n      type TYPE.  */\n   tree gcc_expression_from_isl_expression (tree type,\n \t\t\t\t\t   __isl_take isl_ast_expr *,\n@@ -234,7 +233,7 @@ class translate_isl_ast_to_gimple\n      induction variable for the new LOOP.  New LOOP is attached to CFG\n      starting at ENTRY_EDGE.  LOOP is inserted into the loop tree and\n      becomes the child loop of the OUTER_LOOP.  NEWIVS_INDEX binds\n-     ISL's scattering name to the induction variable created for the\n+     isl's scattering name to the induction variable created for the\n      loop of STMT.  The new induction variable is inserted in the NEWIVS\n      vector and is of type TYPE.  */\n   struct loop *graphite_create_new_loop (edge entry_edge,\n@@ -258,7 +257,7 @@ class translate_isl_ast_to_gimple\n \t\t\t\t       tree *type,\n \t\t\t\t       tree *lb, tree *ub, ivs_params &ip);\n \n-  /* Creates a new if region corresponding to ISL's cond.  */\n+  /* Creates a new if region corresponding to isl's cond.  */\n   edge graphite_create_new_guard (edge entry_edge,\n \t\t\t\t  __isl_take isl_ast_expr *if_cond,\n \t\t\t\t  ivs_params &ip);\n@@ -277,7 +276,7 @@ class translate_isl_ast_to_gimple\n \n   void translate_pending_phi_nodes (void);\n \n-  /* Add ISL's parameter identifiers and corresponding trees to ivs_params.  */\n+  /* Add isl's parameter identifiers and corresponding trees to ivs_params.  */\n \n   void add_parameters_to_ivs_params (scop_p scop, ivs_params &ip);\n \n@@ -497,7 +496,7 @@ class translate_isl_ast_to_gimple\n   /* The region to be translated.  */\n   sese_info_p region;\n \n-  /* This flag is set when an error occurred during the translation of ISL AST\n+  /* This flag is set when an error occurred during the translation of isl AST\n      to Gimple.  */\n   bool codegen_error;\n \n@@ -583,7 +582,7 @@ binary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n       return fold_build2 (MULT_EXPR, type, tree_lhs_expr, tree_rhs_expr);\n \n     case isl_ast_op_div:\n-      /* As ISL operates on arbitrary precision numbers, we may end up with\n+      /* As isl operates on arbitrary precision numbers, we may end up with\n \t division by 2^64 that is folded to 0.  */\n       if (integer_zerop (tree_rhs_expr))\n \t{\n@@ -593,7 +592,7 @@ binary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n       return fold_build2 (EXACT_DIV_EXPR, type, tree_lhs_expr, tree_rhs_expr);\n \n     case isl_ast_op_pdiv_q:\n-      /* As ISL operates on arbitrary precision numbers, we may end up with\n+      /* As isl operates on arbitrary precision numbers, we may end up with\n \t division by 2^64 that is folded to 0.  */\n       if (integer_zerop (tree_rhs_expr))\n \t{\n@@ -603,11 +602,11 @@ binary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n       return fold_build2 (TRUNC_DIV_EXPR, type, tree_lhs_expr, tree_rhs_expr);\n \n #if HAVE_ISL_OPTIONS_SET_SCHEDULE_SERIALIZE_SCCS\n-    /* ISL-0.15 or later.  */\n+    /* isl 0.15 or later.  */\n     case isl_ast_op_zdiv_r:\n #endif\n     case isl_ast_op_pdiv_r:\n-      /* As ISL operates on arbitrary precision numbers, we may end up with\n+      /* As isl operates on arbitrary precision numbers, we may end up with\n \t division by 2^64 that is folded to 0.  */\n       if (integer_zerop (tree_rhs_expr))\n \t{\n@@ -617,7 +616,7 @@ binary_op_to_tree (tree type, __isl_take isl_ast_expr *expr, ivs_params &ip)\n       return fold_build2 (TRUNC_MOD_EXPR, type, tree_lhs_expr, tree_rhs_expr);\n \n     case isl_ast_op_fdiv_q:\n-      /* As ISL operates on arbitrary precision numbers, we may end up with\n+      /* As isl operates on arbitrary precision numbers, we may end up with\n \t division by 2^64 that is folded to 0.  */\n       if (integer_zerop (tree_rhs_expr))\n \t{\n@@ -777,7 +776,7 @@ gcc_expression_from_isl_expr_op (tree type, __isl_take isl_ast_expr *expr,\n     case isl_ast_op_pdiv_r:\n     case isl_ast_op_fdiv_q:\n #if HAVE_ISL_OPTIONS_SET_SCHEDULE_SERIALIZE_SCCS\n-    /* ISL-0.15 or later.  */\n+    /* isl 0.15 or later.  */\n     case isl_ast_op_zdiv_r:\n #endif\n     case isl_ast_op_and:\n@@ -802,7 +801,7 @@ gcc_expression_from_isl_expr_op (tree type, __isl_take isl_ast_expr *expr,\n   return NULL_TREE;\n }\n \n-/* Converts an ISL AST expression E back to a GCC expression tree of\n+/* Converts an isl AST expression E back to a GCC expression tree of\n    type TYPE.  */\n \n tree\n@@ -838,7 +837,7 @@ gcc_expression_from_isl_expression (tree type, __isl_take isl_ast_expr *expr,\n    induction variable for the new LOOP.  New LOOP is attached to CFG\n    starting at ENTRY_EDGE.  LOOP is inserted into the loop tree and\n    becomes the child loop of the OUTER_LOOP.  NEWIVS_INDEX binds\n-   ISL's scattering name to the induction variable created for the\n+   isl's scattering name to the induction variable created for the\n    loop of STMT.  The new induction variable is inserted in the NEWIVS\n    vector and is of type TYPE.  */\n \n@@ -1179,7 +1178,7 @@ translate_isl_ast_node_block (loop_p context_loop,\n   return next_e;\n }\n  \n-/* Creates a new if region corresponding to ISL's cond.  */\n+/* Creates a new if region corresponding to isl's cond.  */\n \n edge\n translate_isl_ast_to_gimple::\n@@ -1224,7 +1223,7 @@ translate_isl_ast_node_if (loop_p context_loop,\n   return last_e;\n }\n \n-/* Translates an ISL AST node NODE to GCC representation in the\n+/* Translates an isl AST node NODE to GCC representation in the\n    context of a SESE.  */\n \n edge\n@@ -2931,7 +2930,7 @@ translate_isl_ast_to_gimple::copy_bb_and_scalar_dependences (basic_block bb,\n \t      return NULL;\n \t    }\n \n-\t  /* In case ISL did some loop peeling, like this:\n+\t  /* In case isl did some loop peeling, like this:\n \n \t       S_8(0);\n \t       for (int c1 = 1; c1 <= 5; c1 += 1) {\n@@ -3065,7 +3064,7 @@ translate_isl_ast_to_gimple::print_isl_ast_node (FILE *file,\n   isl_printer_free (prn);\n }\n \n-/* Add ISL's parameter identifiers and corresponding trees to ivs_params.  */\n+/* Add isl's parameter identifiers and corresponding trees to ivs_params.  */\n \n void\n translate_isl_ast_to_gimple::add_parameters_to_ivs_params (scop_p scop,\n@@ -3263,7 +3262,7 @@ translate_isl_ast_to_gimple::scop_to_isl_ast (scop_p scop, ivs_params &ip)\n    the given SCOP.  Return true if code generation succeeded.\n \n    FIXME: This is not yet a full implementation of the code generator\n-   with ISL ASTs.  Generation of GIMPLE code has to be completed.  */\n+   with isl ASTs.  Generation of GIMPLE code has to be completed.  */\n \n bool\n graphite_regenerate_ast_isl (scop_p scop)\n@@ -3280,7 +3279,7 @@ graphite_regenerate_ast_isl (scop_p scop)\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     {\n-      fprintf (dump_file, \"ISL AST generated by ISL: \\n\");\n+      fprintf (dump_file, \"AST generated by isl: \\n\");\n       t.print_isl_ast_node (dump_file, root_node, scop->isl_context);\n     }\n "}, {"sha": "dd506b59190885bf8366043b71a0866c66e52861", "filename": "gcc/graphite-scop-detection.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fgraphite-scop-detection.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fgraphite-scop-detection.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-scop-detection.c?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -436,7 +436,7 @@ canonicalize_loop_closed_ssa_form (void)\n }\n \n /* Can all ivs be represented by a signed integer?\n-   As ISL might generate negative values in its expressions, signed loop ivs\n+   As isl might generate negative values in its expressions, signed loop ivs\n    are required in the backend.  */\n \n static bool\n@@ -1198,7 +1198,7 @@ scop_detection::graphite_can_represent_scev (tree scev)\n     return false;\n \n   /* We disable the handling of pointer types, because it\u2019s currently not\n-     supported by Graphite with the ISL AST generator. SSA_NAME nodes are\n+     supported by Graphite with the isl AST generator. SSA_NAME nodes are\n      the only nodes, which are disabled in case they are pointers to object\n      types, but this can be changed.  */\n "}, {"sha": "7992c284862b98a99a1e5420e518620e50f25502", "filename": "gcc/graphite-sese-to-poly.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fgraphite-sese-to-poly.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fgraphite-sese-to-poly.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite-sese-to-poly.c?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -67,7 +67,7 @@ tree_int_to_gmp (tree t, mpz_t res)\n   wi::to_mpz (t, res, TYPE_SIGN (TREE_TYPE (t)));\n }\n \n-/* Return an ISL identifier for the polyhedral basic block PBB.  */\n+/* Return an isl identifier for the polyhedral basic block PBB.  */\n \n static isl_id *\n isl_id_for_pbb (scop_p s, poly_bb_p pbb)\n@@ -260,7 +260,7 @@ extract_affine_mul (scop_p s, tree e, __isl_take isl_space *space)\n   return isl_pw_aff_mul (lhs, rhs);\n }\n \n-/* Return an ISL identifier from the name of the ssa_name E.  */\n+/* Return an isl identifier from the name of the ssa_name E.  */\n \n static isl_id *\n isl_id_for_ssa_name (scop_p s, tree e)\n@@ -270,7 +270,7 @@ isl_id_for_ssa_name (scop_p s, tree e)\n   return isl_id_alloc (s->isl_context, name1, e);\n }\n \n-/* Return an ISL identifier for the data reference DR.  Data references and\n+/* Return an isl identifier for the data reference DR.  Data references and\n    scalar references get the same isl_id.  They need to be comparable and are\n    distinguished through the first dimension, which contains the alias set or\n    SSA_NAME_VERSION number.  */"}, {"sha": "8d0d24ccf3348a0c294a1da582e67ff5ebc8984e", "filename": "gcc/graphite.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fgraphite.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fgraphite.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.c?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -336,12 +336,12 @@ graphite_transform_loops (void)\n   isl_ctx_free (ctx);\n }\n \n-#else /* If ISL is not available: #ifndef HAVE_isl.  */\n+#else /* If isl is not available: #ifndef HAVE_isl.  */\n \n static void\n graphite_transform_loops (void)\n {\n-  sorry (\"Graphite loop optimizations cannot be used (ISL is not available).\");\n+  sorry (\"Graphite loop optimizations cannot be used (isl is not available).\");\n }\n \n #endif"}, {"sha": "83f8191fa9662f68634a4986f1c5ec0b245e4a18", "filename": "gcc/graphite.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fgraphite.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fgraphite.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraphite.h?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -425,7 +425,7 @@ struct scop\n      c = 2a + b  */\n   isl_set *param_context;\n \n-  /* The context used internally by ISL.  */\n+  /* The context used internally by isl.  */\n   isl_ctx *isl_context;\n \n   /* SCoP final schedule.  */"}, {"sha": "9b8216453f31c28261a6e988d8192de091ef295a", "filename": "gcc/params.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fparams.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Fparams.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fparams.def?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -865,7 +865,7 @@ DEFPARAM (PARAM_GRAPHITE_MIN_LOOPS_PER_FUNCTION,\n \n DEFPARAM (PARAM_MAX_ISL_OPERATIONS,\n \t  \"max-isl-operations\",\n-\t  \"maximum number of ISL operations, 0 means unlimited\",\n+\t  \"maximum number of isl operations, 0 means unlimited\",\n \t  350000, 0, 0)\n \n /* Avoid data dependence analysis on very large loops.  */"}, {"sha": "204d3b20703e18098e023e537f539bb63db3fd16", "filename": "gcc/testsuite/gcc.dg/graphite/fuse-1.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Ffuse-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Ffuse-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Ffuse-1.c?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -3,13 +3,13 @@\n /* { dg-options \"-O2 -floop-nest-optimize -fdump-tree-forwprop-all -fdump-tree-graphite-all\" } */\n \n /* Make sure we fuse the loops like this:\n-ISL AST generated by ISL:\n+AST generated by isl:\n for (int c0 = 0; c0 <= 99; c0 += 1) {\n   S_3(c0);\n   S_6(c0);\n   S_9(c0);\n } */\n-/* { dg-final { scan-tree-dump-times \"ISL AST generated by ISL:.*for \\\\(int c0 = 0; c0 <= 99; c0 \\\\+= 1\\\\) \\\\{.*S_.*\\\\(c0\\\\);.*S_.*\\\\(c0\\\\);.*S_.*\\\\(c0\\\\);.*\\\\}\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"AST generated by isl:.*for \\\\(int c0 = 0; c0 <= 99; c0 \\\\+= 1\\\\) \\\\{.*S_.*\\\\(c0\\\\);.*S_.*\\\\(c0\\\\);.*S_.*\\\\(c0\\\\);.*\\\\}\" 1 \"graphite\" } } */\n \n /* Check that after fusing the loops, the scalar computation is also fused.  */\n /* { dg-final { scan-tree-dump-times \"gimple_simplified to\\[^\\\\n\\]*\\\\^ 12\" 1 \"forwprop4\" } } */"}, {"sha": "a76f3a660f7624ca93dbe361fe31e9e92d0bf816", "filename": "gcc/testsuite/gcc.dg/graphite/fuse-2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Ffuse-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Ffuse-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Ffuse-2.c?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -1,15 +1,15 @@\n /* Check that the three loops are fused.  */\n \n /* Make sure we fuse the loops like this:\n-ISL AST generated by ISL:\n+AST generated by isl:\n for (int c0 = 0; c0 <= 99; c0 += 1) {\n   S_3(c0);\n   S_6(c0);\n   S_9(c0);\n }\n */\n \n-/* { dg-final { scan-tree-dump-times \"ISL AST generated by ISL:.*for \\\\(int c0 = 0; c0 <= 99; c0 \\\\+= 1\\\\) \\\\{.*S_.*\\\\(c0\\\\);.*S_.*\\\\(c0\\\\);.*S_.*\\\\(c0\\\\);.*\\\\}\" 1 \"graphite\" } } */\n+/* { dg-final { scan-tree-dump-times \"AST generated by isl:.*for \\\\(int c0 = 0; c0 <= 99; c0 \\\\+= 1\\\\) \\\\{.*S_.*\\\\(c0\\\\);.*S_.*\\\\(c0\\\\);.*S_.*\\\\(c0\\\\);.*\\\\}\" 1 \"graphite\" } } */\n \n #define MAX 100\n int A[MAX], B[MAX], C[MAX];"}, {"sha": "b65d4861e680e08db4c1ab52bb2fd84e1ffefbc2", "filename": "gcc/testsuite/gcc.dg/graphite/interchange-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Finterchange-1.c?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -49,7 +49,7 @@ main (void)\n   return 0;\n }\n \n-/*FIXME: Between ISL-0.12 and ISL-0.15 the schedule optimizer needs to print\n+/*FIXME: Between isl 0.12 and isl 0.15 the schedule optimizer needs to print\n something canonical so that it can be checked in the test.  The final code\n generated by both are same in this case but the messaged printed are\n not consistent.  */"}, {"sha": "89e69941f81225ddea0c3733883a19154ae037f0", "filename": "gcc/testsuite/gcc.dg/graphite/pr35356-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fgraphite%2Fpr35356-1.c?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -26,7 +26,7 @@ foo (int bar, int n, int k)\n \n    Check that this text is produced:\n \n-ISL AST generated by ISL:\n+AST generated by isl:\n if (n >= k + 1 && k >= 0) {\n   S_6(k);\n   S_11(k);"}, {"sha": "e61e06c7aab1ad5d425a6b8373bc7141d01440c3", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e357a5e03c2e6f3b1d51bebe3c57322b28950b0f/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e357a5e03c2e6f3b1d51bebe3c57322b28950b0f", "patch": "@@ -1251,7 +1251,7 @@ process_options (void)\n       || flag_loop_nest_optimize\n       || flag_graphite_identity\n       || flag_loop_parallelize_all)\n-    sorry (\"Graphite loop optimizations cannot be used (ISL is not available)\" \n+    sorry (\"Graphite loop optimizations cannot be used (isl is not available)\"\n \t   \"(-fgraphite, -fgraphite-identity, -floop-block, \"\n \t   \"-floop-interchange, -floop-strip-mine, -floop-parallelize-all, \"\n \t   \"-floop-unroll-and-jam, and -ftree-loop-linear)\");"}]}