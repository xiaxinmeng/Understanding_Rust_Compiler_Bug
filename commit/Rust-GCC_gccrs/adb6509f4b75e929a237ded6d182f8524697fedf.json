{"sha": "adb6509f4b75e929a237ded6d182f8524697fedf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRiNjUwOWY0Yjc1ZTkyOWEyMzdkZWQ2ZDE4MmY4NTI0Njk3ZmVkZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2006-12-20T22:40:48Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2006-12-20T22:40:48Z"}, "message": "tree-flow-inline.h (gimple_var_anns): New function.\n\n\t* tree-flow-inline.h (gimple_var_anns): New function.\n\t(var_ann): Use hashtable for static functions.\n\t* tree-dfa.c (create_var_ann): Likewise.\n\t* tree-ssa.c (var_ann_eq, var_ann_hash): New functions.\n\t(init_tree_ssa): Initialize var anns.\n\t(delete_tree_ssa): Delete var anns; also clear out gimple_df.\n\t* tree-flow.h (struct static_var_ann_d): New structure.\n\t(gimple_df): Add var_anns.\n\nFrom-SVN: r120089", "tree": {"sha": "43db620bf4a68210816d01661abe142a49165b70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/43db620bf4a68210816d01661abe142a49165b70"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adb6509f4b75e929a237ded6d182f8524697fedf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb6509f4b75e929a237ded6d182f8524697fedf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb6509f4b75e929a237ded6d182f8524697fedf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb6509f4b75e929a237ded6d182f8524697fedf/comments", "author": null, "committer": null, "parents": [{"sha": "0fd212e1bd1d3039be765ac7344c23b7b14e3585", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fd212e1bd1d3039be765ac7344c23b7b14e3585", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fd212e1bd1d3039be765ac7344c23b7b14e3585"}], "stats": {"total": 91, "additions": 88, "deletions": 3}, "files": [{"sha": "c4bcad1fa2c52350535105b4771a205aa65de4d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb6509f4b75e929a237ded6d182f8524697fedf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb6509f4b75e929a237ded6d182f8524697fedf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=adb6509f4b75e929a237ded6d182f8524697fedf", "patch": "@@ -1,3 +1,14 @@\n+2006-12-20  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree-flow-inline.h (gimple_var_anns): New function.\n+\t(var_ann): Use hashtable for static functions.\n+\t* tree-dfa.c (create_var_ann): Likewise.\n+\t* tree-ssa.c (var_ann_eq, var_ann_hash): New functions.\n+\t(init_tree_ssa): Initialize var anns.\n+\t(delete_tree_ssa): Delete var anns; also clear out gimple_df.\n+\t* tree-flow.h (struct static_var_ann_d): New structure.\n+\t(gimple_df): Add var_anns.\n+\n 2006-12-20  Carlos O'Donell  <carlos@codesourcery.com>\n \n \tPR bootstrap/30242"}, {"sha": "5b9c72418b559400de8502c6355690f9ce73a4bc", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb6509f4b75e929a237ded6d182f8524697fedf/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb6509f4b75e929a237ded6d182f8524697fedf/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=adb6509f4b75e929a237ded6d182f8524697fedf", "patch": "@@ -124,16 +124,33 @@ var_ann_t\n create_var_ann (tree t)\n {\n   var_ann_t ann;\n+  struct static_var_ann_d *sann = NULL;\n \n   gcc_assert (t);\n   gcc_assert (DECL_P (t));\n   gcc_assert (!t->base.ann || t->base.ann->common.type == VAR_ANN);\n \n-  ann = GGC_CNEW (struct var_ann_d);\n+  if (TREE_STATIC (t))\n+    {\n+      sann = GGC_CNEW (struct static_var_ann_d);\n+      ann = &sann->ann;\n+    }\n+  else\n+    ann = GGC_CNEW (struct var_ann_d);\n \n   ann->common.type = VAR_ANN;\n \n-  t->base.ann = (tree_ann_t) ann;\n+  if (TREE_STATIC (t))\n+    {\n+       void **slot;\n+       sann->uid = DECL_UID (t);\n+       slot = htab_find_slot_with_hash (gimple_var_anns (cfun),\n+\t\t\t\t        t, DECL_UID (t), INSERT);\n+       gcc_assert (!*slot);\n+       *slot = sann;\n+    }\n+  else\n+    t->base.ann = (tree_ann_t) ann;\n \n   return ann;\n }"}, {"sha": "d87adc3911248975f5011ec54f90c590fba2ea60", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb6509f4b75e929a237ded6d182f8524697fedf/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb6509f4b75e929a237ded6d182f8524697fedf/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=adb6509f4b75e929a237ded6d182f8524697fedf", "patch": "@@ -91,6 +91,15 @@ gimple_nonlocal_all (struct function *fun)\n   gcc_assert (fun && fun->gimple_df);\n   return fun->gimple_df->nonlocal_all;\n }\n+\n+/* Hashtable of variables annotations.  Used for static variables only;\n+   local variables have direct pointer in the tree node.  */\n+static inline htab_t\n+gimple_var_anns (struct function *fun)\n+{\n+  return fun->gimple_df->var_anns;\n+}\n+\n /* Initialize the hashtable iterator HTI to point to hashtable TABLE */\n \n static inline void *\n@@ -194,6 +203,16 @@ var_ann (tree t)\n   gcc_assert (t);\n   gcc_assert (DECL_P (t));\n   gcc_assert (TREE_CODE (t) != FUNCTION_DECL);\n+  if (TREE_STATIC (t))\n+    {\n+      struct static_var_ann_d *sann\n+        = ((struct static_var_ann_d *)\n+\t   htab_find_with_hash (gimple_var_anns (cfun), t, DECL_UID (t)));\n+      if (!sann)\n+\treturn NULL;\n+      gcc_assert (sann->ann.common.type = VAR_ANN);\n+      return &sann->ann;\n+    }\n   gcc_assert (!t->base.ann\n \t      || t->base.ann->common.type == VAR_ANN);\n "}, {"sha": "8989c2f0a243b0678f588e629754b58e50298f8f", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb6509f4b75e929a237ded6d182f8524697fedf/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb6509f4b75e929a237ded6d182f8524697fedf/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=adb6509f4b75e929a237ded6d182f8524697fedf", "patch": "@@ -38,6 +38,7 @@ typedef struct edge_def *edge;\n struct basic_block_def;\n typedef struct basic_block_def *basic_block;\n #endif\n+struct static_var_ann_d;\n \n /* Gimple dataflow datastructure. All publicly available fields shall have\n    gimple_ accessor defined in tree-flow-inline.h, all publicly modifiable\n@@ -92,6 +93,10 @@ struct gimple_df GTY(()) {\n   unsigned int in_ssa_p : 1;\n \n   struct ssa_operands ssa_operands;\n+\n+  /* Hashtable of variables annotations.  Used for static variables only;\n+     local variables have direct pointer in the tree node.  */\n+  htab_t GTY((param_is (struct static_var_ann_d))) var_anns;\n };\n \n /* Accessors for internal use only.  Generic code should use abstraction\n@@ -283,6 +288,14 @@ struct var_ann_d GTY(())\n   unsigned int escape_mask;\n };\n \n+/* Contianer for variable annotation used by hashtable for annotations for\n+   static variables.  */\n+struct static_var_ann_d GTY(())\n+{\n+  struct var_ann_d ann;\n+  unsigned int uid;\n+};\n+\n struct function_ann_d GTY(())\n {\n   struct tree_ann_common_d common;"}, {"sha": "2e4bcdbfe4402e6b95d5fc5b648e83cda341d587", "filename": "gcc/tree-ssa.c", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb6509f4b75e929a237ded6d182f8524697fedf/gcc%2Ftree-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb6509f4b75e929a237ded6d182f8524697fedf/gcc%2Ftree-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa.c?ref=adb6509f4b75e929a237ded6d182f8524697fedf", "patch": "@@ -745,6 +745,24 @@ int_tree_map_hash (const void *item)\n   return ((const struct int_tree_map *)item)->uid;\n }\n \n+/* Return true if the uid in both int tree maps are equal.  */\n+\n+static int\n+var_ann_eq (const void *va, const void *vb)\n+{\n+  const struct static_var_ann_d *a = (const struct static_var_ann_d *) va;\n+  tree b = (tree) vb;\n+  return (a->uid == DECL_UID (b));\n+}\n+\n+/* Hash a UID in a int_tree_map.  */\n+\n+static unsigned int\n+var_ann_hash (const void *item)\n+{\n+  return ((const struct static_var_ann_d *)item)->uid;\n+}\n+\n \n /* Initialize global DFA and SSA structures.  */\n \n@@ -756,6 +774,8 @@ init_tree_ssa (void)\n \t\t\t\t     \t\t      int_tree_map_eq, NULL);\n   cfun->gimple_df->default_defs = htab_create_ggc (20, int_tree_map_hash, \n \t\t\t\t                   int_tree_map_eq, NULL);\n+  cfun->gimple_df->var_anns = htab_create_ggc (20, var_ann_hash, \n+\t\t\t\t\t       var_ann_eq, NULL);\n   cfun->gimple_df->call_clobbered_vars = BITMAP_GGC_ALLOC ();\n   cfun->gimple_df->addressable_vars = BITMAP_GGC_ALLOC ();\n   init_alias_heapvars ();\n@@ -805,7 +825,8 @@ delete_tree_ssa (void)\n   /* Remove annotations from every referenced variable.  */\n   FOR_EACH_REFERENCED_VAR (var, rvi)\n     {\n-      ggc_free (var->base.ann);\n+      if (var->base.ann)\n+        ggc_free (var->base.ann);\n       var->base.ann = NULL;\n     }\n   htab_delete (gimple_referenced_vars (cfun));\n@@ -817,13 +838,17 @@ delete_tree_ssa (void)\n   cfun->gimple_df->global_var = NULL_TREE;\n   \n   htab_delete (cfun->gimple_df->default_defs);\n+  cfun->gimple_df->default_defs = NULL;\n+  htab_delete (cfun->gimple_df->var_anns);\n+  cfun->gimple_df->var_anns = NULL;\n   cfun->gimple_df->call_clobbered_vars = NULL;\n   cfun->gimple_df->addressable_vars = NULL;\n   cfun->gimple_df->modified_noreturn_calls = NULL;\n   cfun->gimple_df->aliases_computed_p = false;\n \n   delete_alias_heapvars ();\n   gcc_assert (!need_ssa_update_p ());\n+  cfun->gimple_df = NULL;\n }\n \n "}]}