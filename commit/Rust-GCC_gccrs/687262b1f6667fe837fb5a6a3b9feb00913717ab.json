{"sha": "687262b1f6667fe837fb5a6a3b9feb00913717ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg3MjYyYjFmNjY2N2ZlODM3ZmI1YTZhM2I5ZmViMDA5MTM3MTdhYg==", "commit": {"author": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-07-13T14:47:55Z"}, "committer": {"name": "Bruce Korb", "email": "korbb@gcc.gnu.org", "date": "2000-07-13T14:47:55Z"}, "message": "implement various pre-processor guards around standard types\n\nFrom-SVN: r35012", "tree": {"sha": "dccbbf5cbe6fb081ac4898550bd146ce3d872a7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dccbbf5cbe6fb081ac4898550bd146ce3d872a7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/687262b1f6667fe837fb5a6a3b9feb00913717ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/687262b1f6667fe837fb5a6a3b9feb00913717ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/687262b1f6667fe837fb5a6a3b9feb00913717ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/687262b1f6667fe837fb5a6a3b9feb00913717ab/comments", "author": null, "committer": null, "parents": [{"sha": "c91ad6994fbc08a540079e53e4949718df0acf3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c91ad6994fbc08a540079e53e4949718df0acf3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c91ad6994fbc08a540079e53e4949718df0acf3d"}], "stats": {"total": 371, "additions": 252, "deletions": 119}, "files": [{"sha": "4df5e652a7852e9f07a03521ed7651ff4f9c0173", "filename": "gcc/fixinc/fixfixes.c", "status": "modified", "additions": 140, "deletions": 3, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/687262b1f6667fe837fb5a6a3b9feb00913717ab/gcc%2Ffixinc%2Ffixfixes.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/687262b1f6667fe837fb5a6a3b9feb00913717ab/gcc%2Ffixinc%2Ffixfixes.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixfixes.c?ref=687262b1f6667fe837fb5a6a3b9feb00913717ab", "patch": "@@ -58,11 +58,10 @@ the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n #include \"fixlib.h\"\n+#define    GTYPE_SE_CT 1\n \n tSCC zNeedsArg[] = \"fixincl error:  `%s' needs %s argument (c_fix_arg[%d])\\n\";\n \n-#define EXIT_BROKEN  3\n-\n typedef struct {\n     const char*  fix_name;\n     void (*fix_proc)();\n@@ -73,7 +72,8 @@ typedef struct {\n   _FT_( \"char_macro_use\",   char_macro_use_fix ) \\\n   _FT_( \"format\",           format_fix )         \\\n   _FT_( \"machine_name\",     machine_name_fix )   \\\n-  _FT_( \"wrap\",             wrap_fix )\n+  _FT_( \"wrap\",             wrap_fix )           \\\n+  _FT_( \"gnu_type\",         gnu_type_fix )\n \n \n #define FIX_PROC_HEAD( fix ) \\\n@@ -126,6 +126,60 @@ print_quote( q, text )\n }\n \n \n+/*\n+ *  Emit the GNU standard type wrapped up in such a way that\n+ *  this thing can be encountered countless times during a compile\n+ *  and not cause even a warning.\n+ */\n+static const char*\n+emit_gnu_type ( text, rm )\n+  const char* text;\n+  regmatch_t* rm;\n+{\n+  extern t_gnu_type_map gnu_type_map[];\n+  extern int gnu_type_map_ct;\n+\n+  const char*     pzt  = text + rm[GTYPE_SE_CT].rm_so;\n+  t_gnu_type_map* p_tm = gnu_type_map;\n+  int   ct = gnu_type_map_ct;\n+\n+  fwrite (text, rm[0].rm_so, 1, stdout);\n+  text += rm[0].rm_eo;\n+\n+  for (;;)\n+    {\n+      if (strncmp (pzt, p_tm->pz_type, p_tm->type_name_len) == 0)\n+        break;\n+\n+#ifdef DEBUG\n+      if (--ct <= 0)\n+        return (const char*)NULL;\n+#else\n+      if (--ct <= 0)\n+        return text;\n+#endif\n+      p_tm++;\n+    }\n+\n+  /*\n+   *  Now print out the reformed typedef\n+   */\n+  printf (\"#ifndef __%s_TYPE__\\n\"\n+          \"#define __%s_TYPE__ %s\\n\"\n+          \"#endif\\n\",\n+          p_tm->pz_TYPE, p_tm->pz_TYPE, p_tm->pz_gtype );\n+\n+  printf (\"#if !defined(_GCC_%s_T)%s\\n\"\n+          \"#define _GCC_%s_T\\n\"\n+          \"typedef __%s_TYPE__ %s_t;\\n\"\n+          \"#endif\\n\",\n+          p_tm->pz_TYPE, p_tm->pz_cxx_guard,\n+          p_tm->pz_TYPE, p_tm->pz_TYPE, p_tm->pz_type);\n+\n+  return text;\n+}\n+\n+\n /*\n  *  Copy the `format' string to std out, replacing `%n' expressions\n  *  with the matched text from a regular expression evaluation.\n@@ -593,6 +647,89 @@ FIX_PROC_HEAD( wrap_fix )\n }\n \n \n+/*\n+ *  Search for multiple copies of a regular expression.  Each block\n+ *  of matched text is replaced with the format string, as described\n+ *  above in `format_write'.\n+ */\n+FIX_PROC_HEAD( gnu_type_fix )\n+{\n+  const char* pz_pat;\n+  regex_t    re;\n+  regmatch_t rm[GTYPE_SE_CT+1];\n+\n+  {\n+    tTestDesc* pTD = p_fixd->p_test_desc;\n+    int        ct  = p_fixd->test_ct;\n+    for (;;)\n+      {\n+        if (ct-- <= 0)\n+          {\n+            fprintf (stderr, zNeedsArg, p_fixd->fix_name, \"search text\", 1);\n+            exit (EXIT_BROKEN);\n+          }\n+\n+        if (pTD->type == TT_EGREP)\n+          {\n+            pz_pat = pTD->pz_test_text;\n+            break;\n+          }\n+\n+        pTD++;\n+      }\n+  }\n+\n+  compile_re (pz_pat, &re, 1, \"gnu type typedef\", \"gnu_type_fix\");\n+\n+  while (regexec (&re, text, GTYPE_SE_CT+1, rm, 0) == 0)\n+    {\n+#ifndef DEBUG\n+      text = emit_gnu_type (text, rm);\n+#else\n+      tSCC z_mismatch[] = \"``%s'' mismatched:\\n\";\n+\n+      /*\n+       *  Make sure we matched *all* subexpressions\n+       */\n+      if (rm[GTYPE_SE_CT].rm_so == -1)\n+        {\n+          int i;\n+\n+          fprintf (stderr, z_mismatch, pz_pat);\n+\n+          for (i=0; i <= GTYPE_SE_CT; i++)\n+            {\n+              if (rm[i].rm_so != -1)\n+                {\n+                  fprintf( stderr, \"%4d:  ``\", i );\n+                  fwrite( text + rm[i].rm_so, rm[i].rm_eo - rm[i].rm_so,\n+                          1, stderr );\n+                  fputs( \"''\\n\", stderr );\n+                }\n+              else\n+                {\n+                  fprintf( stderr, \"%4d:  BROKEN\\n\", i );\n+                }\n+            }\n+          exit (EXIT_BROKEN);\n+        }\n+\n+      text = emit_gnu_type (text, rm);\n+      if (text == NULL)\n+        {\n+          fprintf (stderr, z_mismatch, pz_pat);\n+          exit (EXIT_BROKEN);\n+        }\n+#endif\n+    }\n+\n+  /*\n+   *  Dump out the rest of the file\n+   */\n+  fputs (text, stdout);\n+}\n+\n+\n /* = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n \n      test for fix selector"}, {"sha": "ec7c812171518f28212b77d255a78dfc655e048b", "filename": "gcc/fixinc/fixincl.tpl", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/687262b1f6667fe837fb5a6a3b9feb00913717ab/gcc%2Ffixinc%2Ffixincl.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/687262b1f6667fe837fb5a6a3b9feb00913717ab/gcc%2Ffixinc%2Ffixincl.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixincl.tpl?ref=687262b1f6667fe837fb5a6a3b9feb00913717ab", "patch": "@@ -203,3 +203,23 @@ _FOR fix \",\\n\" =]\n \n /fix=]\n };\n+\n+#define GNU_TYPE_CT [=_eval type_map _count =]\n+int gnu_type_map_ct = GNU_TYPE_CT;\n+\n+tSCC z_cxx_guard[] = \" && !defined(__cplusplus)\";\n+tSCC z_nil[]       = \"\";\n+\n+t_gnu_type_map gnu_type_map[ GNU_TYPE_CT ] = {[=\n+\n+_FOR type_map ,\n+\n+=]\n+  { [=_EVAL type_name _len=], \"[=type_name=]\", \"[=type_name _up=]\", \"[=\n+  gnu_type=]\", [=\n+  _IF cxx_type _exist =]z_cxx_guard[=\n+  _ELSE               =]z_nil[=\n+  _ENDIF=] }[=\n+\n+/type_map=]\n+};"}, {"sha": "813415803784e0df0303e21100d7ca7268804d73", "filename": "gcc/fixinc/fixlib.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/687262b1f6667fe837fb5a6a3b9feb00913717ab/gcc%2Ffixinc%2Ffixlib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/687262b1f6667fe837fb5a6a3b9feb00913717ab/gcc%2Ffixinc%2Ffixlib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Ffixlib.h?ref=687262b1f6667fe837fb5a6a3b9feb00913717ab", "patch": "@@ -70,6 +70,8 @@ typedef int t_success;\n # define EXIT_FAILURE 1\n #endif\n \n+#define EXIT_BROKEN  3\n+\n #define NUL             '\\0'\n \n #ifndef NOPROCESS\n@@ -149,6 +151,16 @@ struct fix_desc\n   long        unused;\n };\n \n+typedef struct {\n+  int         type_name_len;\n+  tCC*        pz_type;\n+  tCC*        pz_TYPE;\n+  tCC*        pz_gtype;\n+  tCC*        pz_cxx_guard;\n+} t_gnu_type_map;\n+\n+extern int gnu_type_map_ct;\n+\n /*\n  *  Exported procedures\n  */"}, {"sha": "0dd80f5b3d6361f3cea35eb997fb8638265dc120", "filename": "gcc/fixinc/inclhack.def", "status": "modified", "additions": 80, "deletions": 116, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/687262b1f6667fe837fb5a6a3b9feb00913717ab/gcc%2Ffixinc%2Finclhack.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/687262b1f6667fe837fb5a6a3b9feb00913717ab/gcc%2Ffixinc%2Finclhack.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffixinc%2Finclhack.def?ref=687262b1f6667fe837fb5a6a3b9feb00913717ab", "patch": "@@ -987,8 +987,8 @@ fix = {\n \n \n /*\n- *  Fix HP's use of ../machine/inline.h to refer to\n- *    /usr/include/machine/inline.h\n+ *  Fix HP & Sony's use of \"../machine/xxx.h\"\n+ *  to refer to:  <machine/xxx.h>\n  */\n fix = {\n     hackname  = hp_inline;\n@@ -1281,8 +1281,8 @@ fix = {\n \n /*\n  *  GNU libc1 string.h does not prototype memcpy and memcmp for gcc\n- *  versions > 1.  That's a problem.  This fix will expose the prototype\n- *  for C++.\n+ *  versions > 1.  This fix will open up the declaration for all\n+ *  versions of GCC and for g++.\n  */\n fix = {\n     hackname  = libc1_ifdefd_memx;\n@@ -1493,12 +1493,13 @@ fix = {\n fix = {\n     hackname = math_huge_val_from_dbl_max;\n     files    = math.h;\n+\n     /*\n      * IF HUGE_VAL is defined to be DBL_MAX *and* DBL_MAX is _not_ defined\n      * in math.h, this fix applies.\n      */\n-    select   = \"define[ \\t]*HUGE_VAL[ \\t]*DBL_MAX\";\n-    bypass   = \"define[ \\t]*DBL_MAX\";\n+    select   = \"define[ \\t]+HUGE_VAL[ \\t]+DBL_MAX\";\n+    bypass   = \"define[ \\t]+DBL_MAX\";\n \n     shell    =\n     /*\n@@ -1507,13 +1508,17 @@ fix = {\n      */\n \n     \"\\tdbl_max_def=`egrep 'define[ \\t]+DBL_MAX[ \\t]+.*' float.h \"\n-                \"2>/dev/null`\\n\\n\"\n+                   \"| sed 's/.*DBL_MAX[ \\t]*//' 2>/dev/null`\\n\\n\"\n \n     \"\\tif ( test -n \\\"${dbl_max_def}\\\" ) > /dev/null 2>&1\\n\"\n     \"\\tthen sed -e '/define[ \\t]*HUGE_VAL[ \\t]*DBL_MAX/\"\n-\t\t\t\"s/DBL_MAX/'\\\"$dbl_max_def/\\\"\\n\"\n+\t\t\t\"s@DBL_MAX@'\\\"$dbl_max_def@\\\"\\n\"\n     \"\\telse cat\\n\"\n     \"\\tfi\";\n+\n+    test_text =\n+    \"`echo '#define DBL_MAX\\t3.1415e+9 /* really big */' >> float.h`\\n\"\n+    \"#define HUGE_VAL DBL_MAX\";\n };\n \n \n@@ -1542,10 +1547,17 @@ fix = {\n     mach     = \"m68k-motorola-sysv*\";\n     files    = sys/limits.h;\n     files    = limits.h;\n+    select   = \"max # bytes atomic in write|error value returned by Math lib\";\n+\n     sed = \"s@^\\\\(#undef[ \\t][ \\t]*PIPE_BUF[ \\t]*\"\n                    \"/\\\\* max # bytes atomic in write to a\\\\)$@\\\\1 */@\";\n     sed = \"s@\\\\(/\\\\*#define\\tHUGE_VAL\\t3.[0-9e+]* \\\\)\"\n           \"\\\\(/\\\\*error value returned by Math lib\\\\*/\\\\)$@\\\\1*/ \\\\2@\";\n+\n+    test_text =\n+    \"#undef PIPE_BUF /* max # bytes atomic in write to a\\n\"\n+    \"\\t\\t/* PIPE */\\n\"\n+    \"/*#define\\tHUGE_VAL\\t3.9e+9 /*error value returned by Math lib*/\";\n };\n \n \n@@ -1875,17 +1887,6 @@ fix = {\n #endif\n \n \n-/*\n- *  Incorrect #include in Sony News-OS 3.2.\n- */\n-fix = {\n-    hackname = sony_include;\n-    files    = machine/machparam.h;\n-    select   = '\"\\.\\./machine/endian.h\"';\n-    sed      = 's@\"../machine/endian.h\"@<machine/endian.h>@';\n-};\n-\n-\n /*\n  *  Sony NEWSOS 5.0 does not support the complete ANSI C standard.\n  */\n@@ -1982,6 +1983,7 @@ fix = {\n           \"s@_NEED___VA_LIST@_NEED___Va_LIST@\\n\"\n           \"s@VA_LIST@DUMMY_VA_LIST@\\n\"\n           \"s@_Va_LIST@_VA_LIST@\";\n+    test_text = \"extern void mumble( va_list);\";\n };\n \n \n@@ -2213,8 +2215,6 @@ fix = {\n  *  Conditionalize some of <sys/endian.h> on __GNUC__ and __GNUG__.\n  *  On some systems (UnixWare 2, UnixWare 7), the file is byteorder.h\n  *  but we still \"hijack\" it and redirect it to the GNU byteorder.h..\n- *\n- *\n  */\n #ifdef SVR5\n fix = {\n@@ -2519,75 +2519,40 @@ fix = {\n \n /*\n  * Fix these files to use the same types that we think they should.\n- * XXX - extremely dubious changes here.\n+ * Each type must be present in two places:  the select clause\n+ * and a \"type_map\" entry below.\n  */\n fix = {\n-    hackname = systypes;\n+    hackname  = gnu_types;\n     files  = \"sys/types.h\";\n     files  = \"stdlib.h\";\n     files  = \"sys/stdtypes.h\";\n     files  = \"stddef.h\";\n     files  = \"memory.h\";\n     files  = \"unistd.h\";\n-    select = \"typedef[ \\t]+[a-z_][ \\ta-z_]*[ \\t]\"\n-             \"(size|ptrdiff|wchar)_t\";\n-\n-      sed  = \"/^[ \\t]*\\\\*[ \\t]*typedef unsigned int size_t;/N\";\n-\n-      sed  = \"s/^\\\\([ \\t]*\\\\*[ \\t]*typedef unsigned int size_t;\\\\n\"\n-               \"[ \\t]*\\\\*\\\\/\\\\)/\\\\1\\\\\\n\"\n-             \"#ifndef __SIZE_TYPE__\\\\\\n\"\n-             \"#define __SIZE_TYPE__ long unsigned int\\\\\\n\"\n-             \"#endif\\\\\\n\"\n-             \"typedef __SIZE_TYPE__ size_t;\\\\\\n/\";\n+    bypass    = '_GCC_(PTRDIFF|SIZE|WCHAR)_T';\n+    select    = \"^[ \\t]*typedef[ \\t]+.*[ \\t](ptrdiff|size|wchar)_t;\";\n+    c_fix     = gnu_type;\n \n-      sed  = \"/typedef[ \\t][ \\t]*[a-z_][ \\ta-z_]*[ \\t]size_t/i\\\\\\n\"\n-                   \"#ifndef __SIZE_TYPE__\\\\\\n\"\n-                   \"#define __SIZE_TYPE__ long unsigned int\\\\\\n\"\n-                   \"#endif\\n\";\n-\n-      sed  = \"s/typedef[ \\t][ \\t]*[a-z_][ \\ta-z_]*[ \\t]size_t/\"\n-               \"typedef __SIZE_TYPE__ size_t/\";\n-\n-      sed  = \"/typedef[ \\t][ \\t]*[a-z_][ \\ta-z_]*[ \\t]ptrdiff_t/i\\\\\\n\"\n-                   \"#ifndef __PTRDIFF_TYPE__\\\\\\n\"\n-                   \"#define __PTRDIFF_TYPE__ long int\\\\\\n\"\n-                   \"#endif\\n\";\n-\n-      sed  = \"s/typedef[ \\t][ \\t]*[a-z_][ \\ta-z_]*[ \\t]ptrdiff_t/\"\n-               \"typedef __PTRDIFF_TYPE__ ptrdiff_t/\";\n-\n-      sed  = \"/typedef[ \\t][ \\t]*[a-z_][ \\ta-z_]*[ \\t]wchar_t/i\\\\\\n\"\n-                   \"#ifndef __WCHAR_TYPE__\\\\\\n\"\n-                   \"#define __WCHAR_TYPE__ int\\\\\\n\"\n-                   \"#endif\\\\\\n\"\n-                   \"#ifndef __cplusplus\\n\";\n-\n-      sed  = \"/typedef[ \\t][ \\t]*[a-z_][ \\ta-z_]*[ \\t]wchar_t/a\\\\\\n\"\n-                   \"#endif\\n\";\n-\n-      sed  = \"s/typedef[ \\t][ \\t]*[a-z_][ \\ta-z_]*[ \\t]wchar_t/\"\n-               \"typedef __WCHAR_TYPE__ wchar_t/\";\n+    test_text = \"typedef long int ptrdiff_t; /* long int */\\n\"\n+                \"typedef uint_t size_t; /* uint_t */\\n\"\n+                \"typedef ushort_t wchar_t; /* ushort_t */\";\n };\n \n+type_map = {\n+  type_name = ptrdiff;\n+  gnu_type  = \"long int\";\n+};\n \n-/*\n- * Fix files that may contain a stray definition of size_t.  Take care\n- * not to match ssize_t or mere uses of size_t.\n- */\n-fix = {\n-    hackname = systypes_stdlib_size_t;\n-    files    = sys/types.h;\n-    files    = stdlib.h;\n-    select   = \"typedef[ \\t]+[A-Za-z_][ \\tA-Za-z_]*[ \\t]size_t.*\";\n-    bypass   = \"_(GCC|BSD)_SIZE_T\";\n-\n-    c_fix     = format;\n-    c_fix_arg =\n-    \"#ifndef _GCC_SIZE_T\\n\"\n-    \"#define _GCC_SIZE_T\\n%0\\n#endif\";\n+type_map = {\n+  type_name = size;\n+  gnu_type  = \"long unsigned int\";\n+};\n \n-    test_text = \"typedef unsigned int size_t; /* size of something */\";\n+type_map = {\n+  type_name = wchar;\n+  gnu_type  = int;\n+  cxx_type;\n };\n \n \n@@ -2601,18 +2566,43 @@ fix = {\n  */\n fix = {\n     hackname = sysv68_string;\n+    files    = testing.h;\n     files    = string.h;\n \n     sed = \"s/extern[ \\t]*int[ \\t]*strlen();/extern unsigned int strlen();/\";\n     sed = \"s/extern[ \\t]*int[ \\t]*ffs[ \\t]*(long);/extern int ffs(int);/\";\n     sed = \"s/strdup(char \\\\*s1);/strdup(const char *s1);/\";\n+\n     sed = \"/^extern char$/N\";\n     sed = \"s/^extern char\\\\(\\\\n\\t\\\\*memccpy(),\\\\)$/extern void\\\\1/\";\n+\n+    /*\n+     *  This sed expression is broken inside fixincl.\n+     *  The same expression seems to work outside, however :-(\n+     */\n     sed = \"/^\\tstrncmp(),$/N\";\n-    sed = \"s/^\\\\(\\tstrncmp()\\\\),\\\\n\\\\(\\tstrlen(),\\\\)$/\\\\1;\\\\\\n\"\n-          \"extern unsigned int\\\\\\n\\\\2/\";\n+    sed = 's/^\\(' \"\\t\" 'strncmp()\\),\\n\\(' \"\\t\" 'strlen(),\\)$/'\n+            '\\1;' \"\\\\\\nextern unsigned int\\\\\\n\\\\2/\";\n+\n     sed = \"/^extern int$/N\";\n     sed = \"s/^extern int\\\\(\\\\n\\tstrlen(),\\\\)/extern size_t\\\\1/\";\n+\n+    test_text =\n+    \"extern int strlen();\\n\"\n+\n+    \"extern int ffs(long);\\n\"\n+\n+    \"extern char\\n\"\n+    \"\\t*memccpy(),\\n\"\n+    \"\\tmemcpy();\\n\"\n+\n+    \"extern int\\n\"\n+    \"\\tstrncmp(),\\n\"\n+    \"\\tstrlen(),\\n\"\n+    \"\\tstrspn();\\n\"\n+\n+    \"extern int\\n\"\n+    \"\\tstrlen(), strspn();\";\n };\n \n \n@@ -2635,40 +2625,6 @@ fix = {\n };\n \n \n-/*\n- *  Fix this Sun file to avoid interfering with stddef.h.\n- *  We use a funny name to ensure it follows 'systypes' fix.\n- */\n-fix = {\n-    hackname = sysz_stdtypes_for_sun;\n-    files = sys/stdtypes.h;\n-    sed   = \"/[\\t ]size_t.*;/i\\\\\\n\"\n-              \"#ifndef _GCC_SIZE_T\\\\\\n\"\n-              \"#define _GCC_SIZE_T\\n\";\n-\n-    sed   = \"/[\\t ]size_t.*;/a\\\\\\n\"\n-              \"#endif\\n\";\n-\n-    sed   = \"/[\\t ]ptrdiff_t.*;/i\\\\\\n\"\n-              \"#ifndef _GCC_PTRDIFF_T\\\\\\n\"\n-              \"#define _GCC_PTRDIFF_T\\n\";\n-\n-    sed   = \"/[\\t ]ptrdiff_t.*;/a\\\\\\n\"\n-              \"#endif\\n\";\n-\n-    sed   = \"/[\\t ]wchar_t.*;/i\\\\\\n\"\n-              \"#ifndef _GCC_WCHAR_T\\\\\\n\"\n-              \"#define _GCC_WCHAR_T\\n\";\n-\n-    sed   = \"/[\\t ]wchar_t.*;/a\\\\\\n\"\n-              \"#endif\\n\";\n-\n-    test_text = \"typedef int size_t; /* ??? */\\n\"\n-     \"typedef int ptrdiff_t; /* result of subtracting two pointers */\\n\"\n-     \"typedef unsigned short wchar_t; /* big enough for biggest char set */\\n\";\n-};\n-\n-\n /*\n  *  if the #if says _cplusplus, not the double underscore __cplusplus\n  *  that it should be\n@@ -2893,9 +2849,10 @@ fix = {\n  * on those systems where the replacement byteorder header is installed.\n  */\n fix = {\n-    hackname = unixware7_byteorder_fix;\n+    hackname = uw7_byteorder_fix;\n     files    = arpa/inet.h;\n     select   = \"in_port_t\";\n+    test     = \"-f $DESTDIR/sys/byteorder.h\";\n #ifndef SVR5\n \tmach = \"*-*-sysv4*\";\n \tmach = \"i?86-*-sysv5*\";\n@@ -2904,8 +2861,15 @@ fix = {\n \tmach = \"powerpcle-*-solaris2.[0-4]\";\n \tmach = \"sparc-*-solaris2.[0-4]\";\n #endif /* SVR5 */\n-    sed      =  '/^extern.*htons.*(in_port_t)/d';\n-    sed      =  '/^extern.*ntohs.*(in_port_t)/d';\n+\n+    c_fix     = format;\n+    c_fix_arg = \"\";\n+    c_fix_arg = \"^extern.*(htons|ntohs).*\\\\(in_port_t\\\\).*\\n\";\n+\n+    test_text = \"extern htons(in_port_t);\"\n+                \"`[ ! -d $DESTDIR/sys ] && mkdir $DESTDIR/sys\\n\"\n+                \"echo '/* DUMMY */' >> sys/byteorder.h\\n\"\n+                \"touch $DESTDIR/sys/byteorder.h`\";\n };\n \n "}]}