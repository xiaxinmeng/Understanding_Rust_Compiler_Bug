{"sha": "f38fb2c44b2a6333581e8a4cc314efb00ce7d18a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM4ZmIyYzQ0YjJhNjMzMzU4MWU4YTRjYzMxNGVmYjAwY2U3ZDE4YQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2010-09-05T10:47:05Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2010-09-05T10:47:05Z"}, "message": "re PR tree-optimization/45535 (ICE during tree_ssa_dse)\n\n2010-09-05  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/45535\n\t* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Properly\n\thandle TMR_INDEX2.  Make sure TMR_INDEX is not NULL before\n\tdereferencing it.\n\t(indirect_refs_may_alias_p): Likewise.\n\n\t* gcc.c-torture/compile/pr45535.c: New testcase.\n\nFrom-SVN: r163877", "tree": {"sha": "67feb12fc771c5fabd29cc9489e084e60304dbdd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67feb12fc771c5fabd29cc9489e084e60304dbdd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f38fb2c44b2a6333581e8a4cc314efb00ce7d18a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38fb2c44b2a6333581e8a4cc314efb00ce7d18a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f38fb2c44b2a6333581e8a4cc314efb00ce7d18a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f38fb2c44b2a6333581e8a4cc314efb00ce7d18a/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e7a8f681c069f09f53be3f94e220669247379a48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7a8f681c069f09f53be3f94e220669247379a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7a8f681c069f09f53be3f94e220669247379a48"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "daef269e1dc6db198bc37ea0d02f983deb48a11c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38fb2c44b2a6333581e8a4cc314efb00ce7d18a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38fb2c44b2a6333581e8a4cc314efb00ce7d18a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f38fb2c44b2a6333581e8a4cc314efb00ce7d18a", "patch": "@@ -1,3 +1,11 @@\n+2010-09-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45535\n+\t* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Properly\n+\thandle TMR_INDEX2.  Make sure TMR_INDEX is not NULL before\n+\tdereferencing it.\n+\t(indirect_refs_may_alias_p): Likewise.\n+\n 2010-09-05  Naveen H.S  <naveen.S@kpitcummins.com>\n \n \t* config/sh/sh.c (sh_option_override): Make static."}, {"sha": "ff909faa9ef73f6ce05be34b40f681231fc1a368", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38fb2c44b2a6333581e8a4cc314efb00ce7d18a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38fb2c44b2a6333581e8a4cc314efb00ce7d18a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f38fb2c44b2a6333581e8a4cc314efb00ce7d18a", "patch": "@@ -1,3 +1,8 @@\n+2010-09-05  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/45535\n+\t* gcc.c-torture/compile/pr45535.c: New testcase.\n+\n 2010-09-04  Andreas Schwab  <schwab@linux-m68k.org>\n \n \t* g++.dg/debug/dwarf2/global-used-types-1.C: Replace \".*\" by"}, {"sha": "03d15a12d053fcd23e32deddba855ed444aaae0f", "filename": "gcc/testsuite/gcc.c-torture/compile/pr45535.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38fb2c44b2a6333581e8a4cc314efb00ce7d18a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr45535.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38fb2c44b2a6333581e8a4cc314efb00ce7d18a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr45535.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr45535.c?ref=f38fb2c44b2a6333581e8a4cc314efb00ce7d18a", "patch": "@@ -0,0 +1,38 @@\n+typedef struct {\n+    unsigned long pmd0;\n+    unsigned long pmd1;\n+} pmd_t;\n+typedef unsigned int pgd_t;\n+struct mm_struct {\n+    pgd_t * pgd;\n+};\n+extern inline int pmd_bad(pmd_t pmd)\n+{\n+}\n+extern inline void pmd_clear(pmd_t * pmdp)\n+{\n+  ((*pmdp).pmd0) = 0x20 | 0x00;\n+  ((*pmdp).pmd1) = 0x20 | 0x00;\n+}\n+static inline void free_one_pmd(pmd_t * dir)\n+{\n+  if (pmd_bad(*dir)) {\n+      pmd_clear(dir);\n+  }\n+}\n+static inline void free_one_pgd(pgd_t * dir)\n+{\n+  int j;\n+  pmd_t * pmd;\n+  pmd = ((pmd_t *) ((unsigned long) (void *)(__pgd_val(dir) & (~((1UL << 12)-1)))) + (((0) >> 21) & (512 - 1)));\n+  for (j = 0; j < 512 ; j++) {\n+      free_one_pmd(pmd+j);\n+  }\n+}\n+void clear_page_tables(struct mm_struct *mm, unsigned long first, int nr)\n+{\n+  pgd_t * page_dir = mm->pgd;\n+  do {\n+      free_one_pgd(page_dir);\n+  } while (--nr);\n+}"}, {"sha": "e00c50a2ef965f1364ac91493977cd8792321959", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f38fb2c44b2a6333581e8a4cc314efb00ce7d18a/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f38fb2c44b2a6333581e8a4cc314efb00ce7d18a/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=f38fb2c44b2a6333581e8a4cc314efb00ce7d18a", "patch": "@@ -693,7 +693,8 @@ indirect_ref_may_alias_decl_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n      (the pointer base cannot validly point to an offset less than zero\n      of the variable).\n      They also cannot alias if the pointer may not point to the decl.  */\n-  if ((TREE_CODE (base1) != TARGET_MEM_REF || !TMR_INDEX (base1))\n+  if ((TREE_CODE (base1) != TARGET_MEM_REF\n+       || (!TMR_INDEX (base1) && !TMR_INDEX2 (base1)))\n       && !ranges_overlap_p (MAX (0, offset1p), -1, offset2p, max_size2))\n     return false;\n   if (!ptr_deref_may_alias_decl_p (ptr1, base2))\n@@ -725,7 +726,8 @@ indirect_ref_may_alias_decl_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n      is relative to the start of the type which we ensure by\n      comparing rvalue and access type and disregarding the constant\n      pointer offset.  */\n-  if ((TREE_CODE (base1) != TARGET_MEM_REF || !TMR_INDEX (base1))\n+  if ((TREE_CODE (base1) != TARGET_MEM_REF\n+       || (!TMR_INDEX (base1) && !TMR_INDEX2 (base1)))\n       && (TREE_CODE (base1) != MEM_REF\n \t  || same_type_for_tbaa (TREE_TYPE (base1), TREE_TYPE (ptrtype1)) == 1)\n       && same_type_for_tbaa (TREE_TYPE (ptrtype1), TREE_TYPE (base2)) == 1)\n@@ -807,16 +809,23 @@ indirect_refs_may_alias_p (tree ref1 ATTRIBUTE_UNUSED, tree base1,\n   if ((!cfun || gimple_in_ssa_p (cfun))\n       && operand_equal_p (ptr1, ptr2, 0)\n       && (((TREE_CODE (base1) != TARGET_MEM_REF\n-\t    || !TMR_INDEX (base1))\n+\t    || (!TMR_INDEX (base1) && !TMR_INDEX2 (base1)))\n \t   && (TREE_CODE (base2) != TARGET_MEM_REF\n-\t       || !TMR_INDEX (base2)))\n+\t       || (!TMR_INDEX (base2) && !TMR_INDEX2 (base2))))\n \t  || (TREE_CODE (base1) == TARGET_MEM_REF\n \t      && TREE_CODE (base2) == TARGET_MEM_REF\n \t      && (TMR_STEP (base1) == TMR_STEP (base2)\n \t\t  || (TMR_STEP (base1) && TMR_STEP (base2)\n \t\t      && operand_equal_p (TMR_STEP (base1),\n \t\t\t\t\t  TMR_STEP (base2), 0)))\n-\t      && operand_equal_p (TMR_INDEX (base1), TMR_INDEX (base2), 0))))\n+\t      && (TMR_INDEX (base1) == TMR_INDEX (base2)\n+\t\t  || (TMR_INDEX (base1) && TMR_INDEX (base2)\n+\t\t      && operand_equal_p (TMR_INDEX (base1),\n+\t\t\t\t\t  TMR_INDEX (base2), 0)))\n+\t      && (TMR_INDEX2 (base1) == TMR_INDEX2 (base2)\n+\t\t  || (TMR_INDEX2 (base1) && TMR_INDEX2 (base2)\n+\t\t      && operand_equal_p (TMR_INDEX2 (base1),\n+\t\t\t\t\t  TMR_INDEX2 (base2), 0))))))\n     {\n       /* The offset embedded in MEM_REFs can be negative.  Bias them\n \t so that the resulting offset adjustment is positive.  */"}]}