{"sha": "97c5509198bbe713ead8472559219ca3ba41920c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTdjNTUwOTE5OGJiZTcxM2VhZDg0NzI1NTkyMTljYTNiYTQxOTIwYw==", "commit": {"author": {"name": "Gunther Nikl", "email": "gni@gecko.de", "date": "2003-10-26T16:03:21Z"}, "committer": {"name": "Bernardo Innocenti", "email": "bernie@gcc.gnu.org", "date": "2003-10-26T16:03:21Z"}, "message": "m68k.c (m68k_output_function_prologue): Move front comment from here to...\n\n\t* config/m68k/m68k.c (m68k_output_function_prologue): Move front\n\tcomment from here to...\n\t(m68k_save_reg): ...here. Fix comment formatting.\n\t(m68k_output_function_prologue): Fix comment formatting.\n\t(m68k_output_function_epilogue): Likewise.\n\t(const_method): Likewise.\n\nFrom-SVN: r72954", "tree": {"sha": "b2556d4f21bd0a0e1dc961b1fbad5ed004bb11c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2556d4f21bd0a0e1dc961b1fbad5ed004bb11c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/97c5509198bbe713ead8472559219ca3ba41920c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c5509198bbe713ead8472559219ca3ba41920c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97c5509198bbe713ead8472559219ca3ba41920c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97c5509198bbe713ead8472559219ca3ba41920c/comments", "author": null, "committer": null, "parents": [{"sha": "b36c208a36f0cf14ecdbe05cae7a4c414f60c04a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b36c208a36f0cf14ecdbe05cae7a4c414f60c04a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b36c208a36f0cf14ecdbe05cae7a4c414f60c04a"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "2dfe805621f1bac9b9acf6228d29519106c38413", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c5509198bbe713ead8472559219ca3ba41920c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c5509198bbe713ead8472559219ca3ba41920c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=97c5509198bbe713ead8472559219ca3ba41920c", "patch": "@@ -1,3 +1,12 @@\n+2003-10-21  Gunther Nikl  <gni@gecko.de>\n+\n+\t* config/m68k/m68k.c (m68k_output_function_prologue): Move front\n+\tcomment from here to...\n+\t(m68k_save_reg): ...here. Fix comment formatting.\n+\t(m68k_output_function_prologue): Fix comment formatting.\n+\t(m68k_output_function_epilogue): Likewise.\n+\t(const_method): Likewise.\n+\n 2003-10-26  Kazu Hirata  <kazu@cs.umass.edu>\n \n \t* toplev.c (default_get_pch_validity): Guard the use of"}, {"sha": "78d21a3624f722004313a4bc2bc582d4d8e89991", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/97c5509198bbe713ead8472559219ca3ba41920c/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/97c5509198bbe713ead8472559219ca3ba41920c/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=97c5509198bbe713ead8472559219ca3ba41920c", "patch": "@@ -392,7 +392,12 @@ m68k_initial_elimination_offset (int from, int to)\n   abort();\n }\n \n-/* Return true if we need to save REGNO. */\n+/* Refer to the array `regs_ever_live' to determine which registers\n+   to save; `regs_ever_live[I]' is nonzero if register number I\n+   is ever used in the function.  This function is responsible for\n+   knowing which registers should not be saved even if used.\n+   Return true if we need to save REGNO.  */\n+\n static bool\n m68k_save_reg (unsigned int regno, bool interrupt_handler)\n {\n@@ -442,15 +447,7 @@ m68k_save_reg (unsigned int regno, bool interrupt_handler)\n \n /* This function generates the assembly code for function entry.\n    STREAM is a stdio stream to output the code to.\n-   SIZE is an int: how many units of temporary storage to allocate.\n-   Refer to the array `regs_ever_live' to determine which registers\n-   to save; `regs_ever_live[I]' is nonzero if register number I\n-   is ever used in the function.  This function is responsible for\n-   knowing which registers should not be saved even if used.  */\n-\n-\n-/* Note that the order of the bit mask for fmovem is the opposite\n-   of the order for movem!  */\n+   SIZE is an int: how many units of temporary storage to allocate.  */\n \n static void\n m68k_output_function_prologue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED)\n@@ -475,7 +472,7 @@ m68k_output_function_prologue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n #endif\n     }\n \n-  /* on ColdFire add register save into initial stack frame setup, if possible */\n+  /* On ColdFire add register save into initial stack frame setup, if possible.  */\n   num_saved_regs = 0;\n   if (TARGET_COLDFIRE && current_frame.reg_no > 2)\n     num_saved_regs = current_frame.reg_no;\n@@ -657,7 +654,7 @@ m68k_output_function_prologue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n       /* Store each separately in the same order moveml uses.\n          Using two movel instructions instead of a single moveml\n          is about 15% faster for the 68020 and 68030 at no expense\n-         in code size */\n+         in code size.  */\n \n       int i;\n \n@@ -803,14 +800,14 @@ m68k_output_function_epilogue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n \t     || (! current_function_calls_alloca && leaf_function_p ());\n \n   /* fsize_with_regs is the size we need to adjust the sp when\n-     popping the frame */\n+     popping the frame.  */\n   fsize_with_regs = fsize;\n \n   /* Because the ColdFire doesn't support moveml with\n      complex address modes, we must adjust the stack manually\n      after restoring registers. When the frame pointer isn't used,\n      we can merge movem adjustment into frame unlinking\n-     made immediately after it. */\n+     made immediately after it.  */\n   if (TARGET_COLDFIRE && restore_from_sp && (current_frame.reg_no > 2))\n     fsize_with_regs += current_frame.reg_no * 4;\n \n@@ -819,7 +816,7 @@ m68k_output_function_epilogue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n       && (current_frame.reg_mask || current_frame.fpu_mask))\n     {\n       /* Because the ColdFire doesn't support moveml with\n-         complex address modes we make an extra correction here */\n+         complex address modes we make an extra correction here.  */\n       if (TARGET_COLDFIRE)\n         {\n #ifdef MOTOROLA\n@@ -897,7 +894,7 @@ m68k_output_function_epilogue (FILE *stream, HOST_WIDE_INT size ATTRIBUTE_UNUSED\n     }\n   else if (current_frame.reg_mask)\n     {\n-      /* The ColdFire requires special handling due to its limited moveml insn */\n+      /* The ColdFire requires special handling due to its limited moveml insn.  */\n       if (TARGET_COLDFIRE)\n         {\n           if (big)\n@@ -1662,7 +1659,7 @@ const_method (rtx constant)\n     return MOVQ;\n \n   /* The ColdFire doesn't have byte or word operations.  */\n-  /* FIXME: This may not be useful for the m68060 either */\n+  /* FIXME: This may not be useful for the m68060 either.  */\n   if (!TARGET_COLDFIRE) \n     {\n       /* if -256 < N < 256 but N is not in range for a moveq"}]}