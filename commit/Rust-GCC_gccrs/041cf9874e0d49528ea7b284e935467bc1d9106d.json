{"sha": "041cf9874e0d49528ea7b284e935467bc1d9106d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDQxY2Y5ODc0ZTBkNDk1MjhlYTdiMjg0ZTkzNTQ2N2JjMWQ5MTA2ZA==", "commit": {"author": {"name": "Tobias Burnus", "email": "burnus@net-b.de", "date": "2007-08-26T18:29:45Z"}, "committer": {"name": "Tobias Burnus", "email": "burnus@gcc.gnu.org", "date": "2007-08-26T18:29:45Z"}, "message": "re PR fortran/32985 (COMMON checking: TYPE with(out) SEQUENCE/bind(C), ALLOCATABLE)\n\n2007-08-26  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/32985\n\t* match.c (gfc_match_common): Remove SEQUENCE diagnostics.\n\t* resolve.c (resolve_common_blocks): Add SEQUENCE diagnostics;\n\tfix walking through the tree.\n\n2007-08-26  Tobias Burnus  <burnus@net-b.de>\n\n\tPR fortran/32985\n\t* gfortran.dg/namelist_14.f90: Make test case valid.\n\t* gfortran.dg/common_10.f90: New.\n\nFrom-SVN: r127811", "tree": {"sha": "18b3c3ce8dadc47d91cc478ea7c4b4ad5e41abba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18b3c3ce8dadc47d91cc478ea7c4b4ad5e41abba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/041cf9874e0d49528ea7b284e935467bc1d9106d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/041cf9874e0d49528ea7b284e935467bc1d9106d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/041cf9874e0d49528ea7b284e935467bc1d9106d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/041cf9874e0d49528ea7b284e935467bc1d9106d/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6d46783956d60c60f81191373194a2949faaf0af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d46783956d60c60f81191373194a2949faaf0af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d46783956d60c60f81191373194a2949faaf0af"}], "stats": {"total": 162, "additions": 116, "deletions": 46}, "files": [{"sha": "fe7ae49d8427e4d254ecd3a3dcc4b2e7e8a25f4e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/041cf9874e0d49528ea7b284e935467bc1d9106d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/041cf9874e0d49528ea7b284e935467bc1d9106d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=041cf9874e0d49528ea7b284e935467bc1d9106d", "patch": "@@ -1,3 +1,10 @@\n+2007-08-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32985\n+\t* match.c (gfc_match_common): Remove SEQUENCE diagnostics.\n+\t* resolve.c (resolve_common_blocks): Add SEQUENCE diagnostics;\n+\tfix walking through the tree.\n+\n 2007-08-26  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/32980"}, {"sha": "dcf6ad1084be4653012abcc6926f3554ce20a157", "filename": "gcc/fortran/match.c", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/041cf9874e0d49528ea7b284e935467bc1d9106d/gcc%2Ffortran%2Fmatch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/041cf9874e0d49528ea7b284e935467bc1d9106d/gcc%2Ffortran%2Fmatch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.c?ref=041cf9874e0d49528ea7b284e935467bc1d9106d", "patch": "@@ -2885,14 +2885,6 @@ gfc_match_common (void)\n \t  if (gfc_add_in_common (&sym->attr, sym->name, NULL) == FAILURE)\n \t    goto cleanup;\n \n-\t  /* Derived type names must have the SEQUENCE attribute.  */\n-\t  if (sym->ts.type == BT_DERIVED && !sym->ts.derived->attr.sequence)\n-\t    {\n-\t      gfc_error (\"Derived type variable in COMMON at %C does not \"\n-\t\t\t \"have the SEQUENCE attribute\");\n-\t      goto cleanup;\n-\t    }\n-\n \t  if (tail != NULL)\n \t    tail->common_next = sym;\n \t  else"}, {"sha": "4610c08d1995820d16a4fea4673a82f3ea625a95", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 47, "deletions": 38, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/041cf9874e0d49528ea7b284e935467bc1d9106d/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/041cf9874e0d49528ea7b284e935467bc1d9106d/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=041cf9874e0d49528ea7b284e935467bc1d9106d", "patch": "@@ -606,49 +606,58 @@ resolve_entries (gfc_namespace *ns)\n static void\n resolve_common_blocks (gfc_symtree *common_root)\n {\n-   gfc_symtree *symtree;\n-   gfc_symbol *sym;\n+  gfc_symbol *sym, *csym;\n \n-   if (common_root == NULL)\n-     return;\n+  if (common_root == NULL)\n+    return;\n \n-   for (symtree = common_root; symtree->left; symtree = symtree->left);\n+  if (common_root->left)\n+    resolve_common_blocks (common_root->left);\n+  if (common_root->right)\n+    resolve_common_blocks (common_root->right);\n \n-   for (; symtree; symtree = symtree->right)\n-     {\n-\tgfc_find_symbol (symtree->name, gfc_current_ns, 0, &sym);\n-\tif (sym == NULL)\n-\t  continue;\n+  for (csym = common_root->n.common->head; csym; csym = csym->common_next)\n+    {\n+      if (csym->ts.type == BT_DERIVED\n+\t  && !(csym->ts.derived->attr.sequence\n+\t       || csym->ts.derived->attr.is_bind_c))\n+\t{\n+\t    gfc_error_now (\"Derived type variable '%s' in COMMON at %L \"\n+\t\t\t   \"has neither the SEQUENCE nor the BIND(C) \"\n+\t\t\t   \"attribute\", csym->name,\n+\t\t\t   &csym->declared_at);\n+\t}\n+      else if (csym->ts.type == BT_DERIVED\n+\t       && csym->ts.derived->attr.alloc_comp)\n+\t{\n+\t    gfc_error_now (\"Derived type variable '%s' in COMMON at %L \"\n+\t\t\t   \"has an ultimate component that is \"\n+\t\t\t   \"allocatable\", csym->name,\n+\t\t\t   &csym->declared_at);\n+\t}\n+    }\n \n-\tif (sym->attr.flavor == FL_PARAMETER)\n-\t  {\n-\t    gfc_error (\"COMMON block '%s' at %L is used as PARAMETER at %L\",\n-\t\t       sym->name, &symtree->n.common->where,\n-\t\t       &sym->declared_at);\n-\t  }\n+  gfc_find_symbol (common_root->name, gfc_current_ns, 0, &sym);\n+  if (sym == NULL)\n+    return;\n \n-\tif (sym->attr.intrinsic)\n-\t  {\n-\t    gfc_error (\"COMMON block '%s' at %L is also an intrinsic \"\n-\t\t       \"procedure\", sym->name,\n-\t\t       &symtree->n.common->where);\n-\t  }\n-\telse if (sym->attr.result\n-\t\t ||(sym->attr.function && gfc_current_ns->proc_name == sym))\n-\t  {\n-\t    gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: COMMON block '%s' \"\n-\t\t\t    \"at %L that is also a function result\", sym->name,\n-\t\t\t    &symtree->n.common->where);\n-\t  }\n-\telse if (sym->attr.flavor == FL_PROCEDURE\n-\t\t&& sym->attr.proc != PROC_INTERNAL\n-\t\t&& sym->attr.proc != PROC_ST_FUNCTION)\n-\t  {\n-\t    gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: COMMON block '%s' \"\n-\t\t\t    \"at %L that is also a global procedure\", sym->name,\n-\t\t\t    &symtree->n.common->where);\n-\t  }\n-     }\n+  if (sym->attr.flavor == FL_PARAMETER)\n+    gfc_error (\"COMMON block '%s' at %L is used as PARAMETER at %L\",\n+\t       sym->name, &common_root->n.common->where, &sym->declared_at);\n+\n+  if (sym->attr.intrinsic)\n+    gfc_error (\"COMMON block '%s' at %L is also an intrinsic procedure\",\n+\t       sym->name, &common_root->n.common->where);\n+  else if (sym->attr.result\n+\t   ||(sym->attr.function && gfc_current_ns->proc_name == sym))\n+    gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: COMMON block '%s' at %L \"\n+\t\t    \"that is also a function result\", sym->name,\n+\t\t    &common_root->n.common->where);\n+  else if (sym->attr.flavor == FL_PROCEDURE && sym->attr.proc != PROC_INTERNAL\n+\t   && sym->attr.proc != PROC_ST_FUNCTION)\n+    gfc_notify_std (GFC_STD_F2003, \"Fortran 2003: COMMON block '%s' at %L \"\n+\t\t    \"that is also a global procedure\", sym->name,\n+\t\t    &common_root->n.common->where);\n }\n \n "}, {"sha": "5d2f2575fff5d2d209b53b38f9538d4c37be15a3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/041cf9874e0d49528ea7b284e935467bc1d9106d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/041cf9874e0d49528ea7b284e935467bc1d9106d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=041cf9874e0d49528ea7b284e935467bc1d9106d", "patch": "@@ -1,3 +1,9 @@\n+2007-08-26  Tobias Burnus  <burnus@net-b.de>\n+\n+\tPR fortran/32985\n+\t* gfortran.dg/namelist_14.f90: Make test case valid.\n+\t* gfortran.dg/common_10.f90: New.\n+\n 2007-08-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR middle-end/33181"}, {"sha": "cec443a5ca4047af3f4327a4e633a16fcfd6ce22", "filename": "gcc/testsuite/gfortran.dg/common_10.f90", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/041cf9874e0d49528ea7b284e935467bc1d9106d/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/041cf9874e0d49528ea7b284e935467bc1d9106d/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_10.f90?ref=041cf9874e0d49528ea7b284e935467bc1d9106d", "patch": "@@ -0,0 +1,55 @@\n+use iso_c_binding\n+implicit none\n+\n+type, bind(C) :: mytype1\n+  integer(c_int) :: x\n+  real(c_float)    :: y\n+end type mytype1\n+\n+type mytype2\n+  sequence\n+  integer :: x\n+  real    :: y\n+end type mytype2\n+\n+type mytype3\n+  integer :: x\n+  real    :: y\n+end type mytype3\n+\n+type mytype4\n+  sequence\n+  integer, allocatable, dimension(:) :: x\n+end type mytype4\n+\n+type mytype5\n+  sequence\n+  integer, pointer :: x\n+  integer :: y\n+end type mytype5\n+\n+type mytype6\n+  sequence\n+  type(mytype5) :: t\n+end type mytype6\n+\n+type mytype7\n+  sequence\n+  type(mytype4) :: t\n+end type mytype7\n+\n+common /a/ t1\n+common /b/ t2\n+common /c/ t3  ! { dg-error \"has neither the SEQUENCE nor the BIND.C. attribute\" }\n+common /d/ t4  ! { dg-error \"has an ultimate component that is allocatable\" }\n+common /e/ t5\n+common /f/ t6\n+common /f/ t7  ! { dg-error \"has an ultimate component that is allocatable\" }\n+type(mytype1) :: t1\n+type(mytype2) :: t2\n+type(mytype3) :: t3\n+type(mytype4) :: t4\n+type(mytype5) :: t5\n+type(mytype6) :: t6\n+type(mytype7) :: t7\n+end"}, {"sha": "729f1b2d5c4f030efbb0cf0907775f3b3b464f57", "filename": "gcc/testsuite/gfortran.dg/namelist_14.f90", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/041cf9874e0d49528ea7b284e935467bc1d9106d/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_14.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/041cf9874e0d49528ea7b284e935467bc1d9106d/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_14.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_14.f90?ref=041cf9874e0d49528ea7b284e935467bc1d9106d", "patch": "@@ -6,6 +6,7 @@\n \n module global\n   type             ::  mt\n+    sequence\n     integer        ::  ii(4)\n   end type mt\n end module global"}]}