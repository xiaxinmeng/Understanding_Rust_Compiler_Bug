{"sha": "b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjY1YTFlYjNmYWU1M2YyZTFlYTFlZjhjMTE2NGY0OTBkNTU4NTVhMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-03T21:12:35Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-02-06T17:26:59Z"}, "message": "aarch64: Add an extra sbfiz pattern [PR87763]\n\nThis patch matches another form of sbfiz, in which the input\nhas DImode and the output has SImode.  It fixes a regression\nin gcc.target/aarch64/lsl_asr_sbfiz.c from GCC 8.\n\n2020-02-06  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\tPR rtl-optimization/87763\n\t* config/aarch64/aarch64.md (*ashiftsi_extvdi_bfiz): New pattern.", "tree": {"sha": "ae82e4a261990680af6789d0c4369270e977a0e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae82e4a261990680af6789d0c4369270e977a0e2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88ec0e8dbe6be8ac466c15ee057a8b1d4926fa8e"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "efbbbf082251ec8139e6a8a8c644416062067de4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1", "patch": "@@ -1,3 +1,8 @@\n+2020-02-06  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\tPR rtl-optimization/87763\n+\t* config/aarch64/aarch64.md (*ashiftsi_extvdi_bfiz): New pattern.\n+\n 2020-02-06  Delia Burduv  <delia.burduv@arm.com>\n \n \t* config/aarch64/aarch64-simd-builtins.def"}, {"sha": "90eebce85c046c6c11e2679e42f155adae45c9d5", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=b65a1eb3fae53f2e1ea1ef8c1164f490d55855a1", "patch": "@@ -5771,6 +5771,21 @@\n   [(set_attr \"type\" \"bfx\")]\n )\n \n+(define_insn \"*ashiftsi_extvdi_bfiz\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(ashift:SI\n+\t  (match_operator:SI 4 \"subreg_lowpart_operator\"\n+\t    [(sign_extract:DI\n+\t       (match_operand:DI 1 \"register_operand\" \"r\")\n+\t       (match_operand 2 \"aarch64_simd_shift_imm_offset_si\")\n+\t       (const_int 0))])\n+\t  (match_operand 3 \"aarch64_simd_shift_imm_si\")))]\n+  \"IN_RANGE (INTVAL (operands[2]) + INTVAL (operands[3]),\n+\t     1, GET_MODE_BITSIZE (SImode) - 1)\"\n+  \"sbfiz\\\\t%w0, %w1, %3, %2\"\n+  [(set_attr \"type\" \"bfx\")]\n+)\n+\n ;; When the bit position and width of the equivalent extraction add up to 32\n ;; we can use a W-reg LSL instruction taking advantage of the implicit\n ;; zero-extension of the X-reg."}]}