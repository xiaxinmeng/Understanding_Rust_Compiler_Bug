{"sha": "ee336ecb2a7161bc28f6c5343d97870a8d15e177", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUzMzZlY2IyYTcxNjFiYzI4ZjZjNTM0M2Q5Nzg3MGE4ZDE1ZTE3Nw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-19T20:35:58Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2021-05-20T19:47:49Z"}, "message": "c++: Add new warning options for C++ language mismatches\n\nThis adds new warning flags, enabled by default: -Wc++11-extensions,\n-Wc++14-extensions, -Wc++17-extensions, -Wc++20-extensions, and\n-Wc++23-extensions. The names of the flags are copied from Clang, which\nalready has similar options.\n\nNo new diagnostics are added, but the new OPT_Wxxx variables are used to\ncontrol existing pedwarns about occurences of new C++ constructs in code\nusing an old C++ standard dialect. This allows several existing warnings\nthat cannot currently be disabled to be controlled by the appropriate\n-Wno-xxx flag. For example, it will now be possible to disable warnings\nabout using variadic templates in C++98 code, by using the new\n-Wno-c++11-extensions option. This will allow libstdc++ headers to\ndisable those warnings unconditionally by using diagnostic pragmas, so\nthat they are not emitted even if -Wsystem-headers is used.\n\nSome of the affected diagnostics are currently only given when\n-Wpedantic is used. Now that we have a more specific warning flag, we\ncould consider making them not depend on -Wpedantic, and only on the new\nflag. This patch does not do that, as it intends to make no changes to\nwhat is accepted/rejected by default. The only effect should be that\nthe new option is shown when -fdiagnostics-show-option is active, and\nthat some warnings can be disabled by using the new flags (and for the\nwarnings that previously only dependend on -Wpedantic, it will now be\npossible to disable just those warnings while still using -Wpedantic for\nits other benefits).\n\ngcc/c-family/ChangeLog:\n\n\t* c.opt (Wc++11-extensions, Wc++14-extensions)\n\t(Wc++17-extensions, Wc++20-extensions, Wc++23-extensions): New\n\toptions.\n\ngcc/cp/ChangeLog:\n\n\t* call.c (maybe_warn_array_conv): Use new warning option.\n\t* decl.c (mark_inline_variable, grokdeclarator): Likewise.\n\t* error.c (maybe_warn_cpp0x): Likewise.\n\t* parser.c (cp_parser_primary_expression)\n\t(cp_parser_unqualified_id)\n\t(cp_parser_pseudo_destructor_name)\n\t(cp_parser_lambda_introducer)\n\t(cp_parser_lambda_declarator_opt)\n\t(cp_parser_selection_statement)\n\t(cp_parser_init_statement)\n\t(cp_parser_decomposition_declaration)\n\t(cp_parser_function_specifier_opt)\n\t(cp_parser_static_assert)\n\t(cp_parser_namespace_definition)\n\t(cp_parser_using_declaration)\n\t(cp_parser_asm_definition)\n\t(cp_parser_ctor_initializer_opt_and_function_body)\n\t(cp_parser_initializer_list)\n\t(cp_parser_type_parameter_key)\n\t(cp_parser_member_declaration)\n\t(cp_parser_try_block)\n\t(cp_parser_std_attribute_spec): Likewise.\n\t* pt.c (check_template_variable): Likewise.\n\ngcc/ChangeLog:\n\n\t* doc/invoke.texi (-Wno-c++11-extensions)\n\t(-Wno-c++14-extensions, -Wno-c++17-extensions)\n\t(-Wno-c++20-extensions, -Wno-c++23-extensions): Document\n\tnew options.", "tree": {"sha": "3fdaf3e119220700ece9fd114e603f6b124f68b6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3fdaf3e119220700ece9fd114e603f6b124f68b6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee336ecb2a7161bc28f6c5343d97870a8d15e177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee336ecb2a7161bc28f6c5343d97870a8d15e177", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee336ecb2a7161bc28f6c5343d97870a8d15e177", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee336ecb2a7161bc28f6c5343d97870a8d15e177/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66168f96f07b12bbe0beb6e0e988818f624d56bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66168f96f07b12bbe0beb6e0e988818f624d56bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66168f96f07b12bbe0beb6e0e988818f624d56bd"}], "stats": {"total": 221, "additions": 146, "deletions": 75}, "files": [{"sha": "91929706aff15f22b7c91e72ffe1cb0dae85878b", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=ee336ecb2a7161bc28f6c5343d97870a8d15e177", "patch": "@@ -431,6 +431,26 @@ Wc++20-compat\n C++ ObjC++ Var(warn_cxx20_compat) Warning LangEnabledBy(C++ ObjC++,Wall)\n Warn about C++ constructs whose meaning differs between ISO C++ 2017 and ISO C++ 2020.\n \n+Wc++11-extensions\n+C++ ObjC++ Var(warn_cxx11_extensions) Warning LangEnabledBy(C++ ObjC++) Init(1)\n+Warn about C++11 constructs in code compiled with an older standard.\n+\n+Wc++14-extensions\n+C++ ObjC++ Var(warn_cxx14_extensions) Warning LangEnabledBy(C++ ObjC++) Init(1)\n+Warn about C++14 constructs in code compiled with an older standard.\n+\n+Wc++17-extensions\n+C++ ObjC++ Var(warn_cxx17_extensions) Warning LangEnabledBy(C++ ObjC++) Init(1)\n+Warn about C++17 constructs in code compiled with an older standard.\n+\n+Wc++20-extensions\n+C++ ObjC++ Var(warn_cxx20_extensions) Warning LangEnabledBy(C++ ObjC++) Init(1)\n+Warn about C++20 constructs in code compiled with an older standard.\n+\n+Wc++23-extensions\n+C++ ObjC++ Var(warn_cxx23_extensions) Warning LangEnabledBy(C++ ObjC++) Init(1)\n+Warn about C++23 constructs in code compiled with an older standard.\n+\n Wcast-function-type\n C ObjC C++ ObjC++ Var(warn_cast_function_type) Warning EnabledBy(Wextra)\n Warn about casts between incompatible function types."}, {"sha": "fa770f244cb5ef17377460055e88360b253f674c", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=ee336ecb2a7161bc28f6c5343d97870a8d15e177", "patch": "@@ -7469,8 +7469,9 @@ maybe_warn_array_conv (location_t loc, conversion *c, tree expr)\n       || TYPE_DOMAIN (type) == NULL_TREE)\n     return;\n \n-  if (conv_binds_to_array_of_unknown_bound (c))\n-    pedwarn (loc, OPT_Wpedantic, \"conversions to arrays of unknown bound \"\n+  if (pedantic && conv_binds_to_array_of_unknown_bound (c))\n+    pedwarn (loc, OPT_Wc__20_extensions,\n+\t     \"conversions to arrays of unknown bound \"\n \t     \"are only available with %<-std=c++20%> or %<-std=gnu++20%>\");\n }\n "}, {"sha": "7c32f09cf0e3e9b0a12e19a66bda7f0a2d866808", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ee336ecb2a7161bc28f6c5343d97870a8d15e177", "patch": "@@ -11166,7 +11166,7 @@ mark_inline_variable (tree decl, location_t loc)\n       inlinep = false;\n     }\n   else if (cxx_dialect < cxx17)\n-    pedwarn (loc, 0, \"inline variables are only available \"\n+    pedwarn (loc, OPT_Wc__17_extensions, \"inline variables are only available \"\n \t     \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n   if (inlinep)\n     {\n@@ -12002,13 +12002,13 @@ grokdeclarator (const cp_declarator *declarator,\n \t  storage_class = sc_none;\n \t  staticp = 0;\n \t}\n-      if (constexpr_p && cxx_dialect < cxx20)\n+      if (constexpr_p && pedantic && cxx_dialect < cxx20)\n \t{\n \t  gcc_rich_location richloc (declspecs->locations[ds_virtual]);\n \t  richloc.add_range (declspecs->locations[ds_constexpr]);\n-\t  pedwarn (&richloc, OPT_Wpedantic, \"member %qD can be declared both \"\n-\t\t   \"%<virtual%> and %<constexpr%> only in %<-std=c++20%> or \"\n-\t\t   \"%<-std=gnu++20%>\", dname);\n+\t  pedwarn (&richloc, OPT_Wc__20_extensions, \"member %qD can be \"\n+\t\t   \"declared both %<virtual%> and %<constexpr%> only in \"\n+\t\t   \"%<-std=c++20%> or %<-std=gnu++20%>\", dname);\n \t}\n     }\n   friendp = decl_spec_seq_has_spec_p (declspecs, ds_friend);\n@@ -12096,7 +12096,7 @@ grokdeclarator (const cp_declarator *declarator,\n \terror_at (declspecs->locations[ds_consteval], \"structured \"\n \t\t  \"binding declaration cannot be %qs\", \"consteval\");\n       if (thread_p && cxx_dialect < cxx20)\n-\tpedwarn (declspecs->locations[ds_thread], 0,\n+\tpedwarn (declspecs->locations[ds_thread], OPT_Wc__20_extensions,\n \t\t \"structured binding declaration can be %qs only in \"\n \t\t \"%<-std=c++20%> or %<-std=gnu++20%>\",\n \t\t declspecs->gnu_thread_keyword_p\n@@ -12118,7 +12118,7 @@ grokdeclarator (const cp_declarator *declarator,\n \t  break;\n \tcase sc_static:\n \t  if (cxx_dialect < cxx20)\n-\t    pedwarn (loc, 0,\n+\t    pedwarn (loc, OPT_Wc__20_extensions,\n \t\t     \"structured binding declaration can be %qs only in \"\n \t\t     \"%<-std=c++20%> or %<-std=gnu++20%>\", \"static\");\n \t  break;"}, {"sha": "3d5eebd4bcd196e8a871cc4e1ad5a5af5f3b2c57", "filename": "gcc/cp/error.c", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=ee336ecb2a7161bc28f6c5343d97870a8d15e177", "patch": "@@ -4407,77 +4407,78 @@ maybe_warn_cpp0x (cpp0x_warn_str str)\n     switch (str)\n       {\n       case CPP0X_INITIALIZER_LISTS:\n-\tpedwarn (input_location, 0, \n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n \t\t \"extended initializer lists \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_EXPLICIT_CONVERSION:\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n \t\t \"explicit conversion operators \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_VARIADIC_TEMPLATES:\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n \t\t \"variadic templates \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_LAMBDA_EXPR:\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n \t\t \"lambda expressions \"\n \t\t  \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_AUTO:\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n \t\t \"C++11 auto only available with %<-std=c++11%> or \"\n \t\t \"%<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_SCOPED_ENUMS:\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n \t\t \"scoped enums only available with %<-std=c++11%> or \"\n \t\t \"%<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_DEFAULTED_DELETED:\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n \t\t \"defaulted and deleted functions \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_INLINE_NAMESPACES:\n-\tpedwarn (input_location, OPT_Wpedantic,\n-\t\t \"inline namespaces \"\n-\t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n+\tif (pedantic)\n+\t  pedwarn (input_location, OPT_Wc__11_extensions,\n+\t\t   \"inline namespaces \"\n+\t\t   \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_OVERRIDE_CONTROLS:\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n \t\t \"override controls (override/final) \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n         break;\n       case CPP0X_NSDMI:\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n \t\t \"non-static data member initializers \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n         break;\n       case CPP0X_USER_DEFINED_LITERALS:\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n \t\t \"user-defined literals \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_DELEGATING_CTORS:\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n \t\t \"delegating constructors \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n         break;\n       case CPP0X_INHERITING_CTORS:\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n \t\t \"inheriting constructors \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n         break;\n       case CPP0X_ATTRIBUTES:\n-\tpedwarn (input_location, 0,\n-\t\t \"c++11 attributes \"\n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n+\t\t \"C++11 attributes \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;\n       case CPP0X_REF_QUALIFIER:\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__11_extensions,\n \t\t \"ref-qualifiers \"\n \t\t \"only available with %<-std=c++11%> or %<-std=gnu++11%>\");\n \tbreak;"}, {"sha": "48b83d67b346b888440475e28274d635ba85446d", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 58, "deletions": 46, "changes": 104, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=ee336ecb2a7161bc28f6c5343d97870a8d15e177", "patch": "@@ -5577,8 +5577,9 @@ cp_parser_primary_expression (cp_parser *parser,\n \t    expr = cp_parser_fold_expression (parser, expr);\n \t    if (expr != error_mark_node\n \t\t&& cxx_dialect < cxx17)\n-\t      pedwarn (input_location, 0, \"fold-expressions only available \"\n-\t\t       \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n+\t      pedwarn (input_location, OPT_Wc__17_extensions,\n+\t\t       \"fold-expressions only available with %<-std=c++17%> \"\n+\t\t       \"or %<-std=gnu++17%>\");\n \t  }\n \telse\n \t  /* Let the front end know that this expression was\n@@ -6325,7 +6326,7 @@ cp_parser_unqualified_id (cp_parser* parser,\n \tif (cp_parser_is_keyword (token, RID_AUTO))\n \t  {\n \t    if (cxx_dialect < cxx14)\n-\t      pedwarn (loc, 0,\n+\t      pedwarn (loc, OPT_Wc__14_extensions,\n \t\t       \"%<~auto%> only available with \"\n \t\t       \"%<-std=c++14%> or %<-std=gnu++14%>\");\n \t    cp_lexer_consume_token (parser->lexer);\n@@ -8353,7 +8354,7 @@ cp_parser_pseudo_destructor_name (cp_parser* parser,\n       && !type_dependent_expression_p (object))\n     {\n       if (cxx_dialect < cxx14)\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__14_extensions,\n \t\t \"%<~auto%> only available with \"\n \t\t \"%<-std=c++14%> or %<-std=gnu++14%>\");\n       cp_lexer_consume_token (parser->lexer);\n@@ -11042,8 +11043,9 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t{\n \t  location_t loc = cp_lexer_peek_token (parser->lexer)->location;\n \t  if (cxx_dialect < cxx17)\n-\t    pedwarn (loc, 0, \"%<*this%> capture only available with \"\n-\t\t\t     \"%<-std=c++17%> or %<-std=gnu++17%>\");\n+\t    pedwarn (loc, OPT_Wc__17_extensions,\n+\t\t     \"%<*this%> capture only available with \"\n+\t\t     \"%<-std=c++17%> or %<-std=gnu++17%>\");\n \t  cp_lexer_consume_token (parser->lexer);\n \t  cp_lexer_consume_token (parser->lexer);\n \t  if (LAMBDA_EXPR_THIS_CAPTURE (lambda_expr))\n@@ -11081,7 +11083,8 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t{\n \t  ellipsis_loc = cp_lexer_peek_token (parser->lexer)->location;\n \t  if (cxx_dialect < cxx20)\n-\t    pedwarn (ellipsis_loc, 0, \"pack init-capture only available with \"\n+\t    pedwarn (ellipsis_loc, OPT_Wc__20_extensions,\n+\t\t     \"pack init-capture only available with \"\n \t\t     \"%<-std=c++20%> or %<-std=gnu++20%>\");\n \t  cp_lexer_consume_token (parser->lexer);\n \t  init_pack_expansion = true;\n@@ -11122,7 +11125,7 @@ cp_parser_lambda_introducer (cp_parser* parser, tree lambda_expr)\n \t  bool direct, non_constant;\n \t  /* An explicit initializer exists.  */\n \t  if (cxx_dialect < cxx14)\n-\t    pedwarn (input_location, 0,\n+\t    pedwarn (input_location, OPT_Wc__14_extensions,\n \t\t     \"lambda capture initializers \"\n \t\t     \"only available with %<-std=c++14%> or %<-std=gnu++14%>\");\n \t  capture_init_expr = cp_parser_initializer (parser, &direct,\n@@ -11296,11 +11299,11 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n   if (cp_lexer_next_token_is (parser->lexer, CPP_LESS))\n     {\n       if (cxx_dialect < cxx14)\n-\tpedwarn (parser->lexer->next_token->location, 0,\n+\tpedwarn (parser->lexer->next_token->location, OPT_Wc__14_extensions,\n \t\t \"lambda templates are only available with \"\n \t\t \"%<-std=c++14%> or %<-std=gnu++14%>\");\n-      else if (cxx_dialect < cxx20)\n-\tpedwarn (parser->lexer->next_token->location, OPT_Wpedantic,\n+      else if (pedantic && cxx_dialect < cxx20)\n+\tpedwarn (parser->lexer->next_token->location, OPT_Wc__20_extensions,\n \t\t \"lambda templates are only available with \"\n \t\t \"%<-std=c++20%> or %<-std=gnu++20%>\");\n \n@@ -11365,10 +11368,11 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \n       /* Default arguments shall not be specified in the\n \t parameter-declaration-clause of a lambda-declarator.  */\n-      if (cxx_dialect < cxx14)\n+      if (pedantic && cxx_dialect < cxx14)\n \tfor (tree t = param_list; t; t = TREE_CHAIN (t))\n \t  if (TREE_PURPOSE (t) && DECL_P (TREE_VALUE (t)))\n-\t    pedwarn (DECL_SOURCE_LOCATION (TREE_VALUE (t)), OPT_Wpedantic,\n+\t    pedwarn (DECL_SOURCE_LOCATION (TREE_VALUE (t)),\n+\t\t     OPT_Wc__14_extensions,\n \t\t     \"default argument specified for lambda parameter\");\n \n       parens.require_close (parser);\n@@ -11388,7 +11392,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \n   if (omitted_parms_loc && lambda_specs.any_specifiers_p)\n     {\n-      pedwarn (omitted_parms_loc, 0,\n+      pedwarn (omitted_parms_loc, OPT_Wc__23_extensions,\n \t       \"parameter declaration before lambda declaration \"\n \t       \"specifiers only optional with %<-std=c++2b%> or \"\n \t       \"%<-std=gnu++2b%>\");\n@@ -11407,7 +11411,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n   tx_qual = cp_parser_tx_qualifier_opt (parser);\n   if (omitted_parms_loc && tx_qual)\n     {\n-      pedwarn (omitted_parms_loc, 0,\n+      pedwarn (omitted_parms_loc, OPT_Wc__23_extensions,\n \t       \"parameter declaration before lambda transaction \"\n \t       \"qualifier only optional with %<-std=c++2b%> or \"\n \t       \"%<-std=gnu++2b%>\");\n@@ -11420,7 +11424,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n \n   if (omitted_parms_loc && exception_spec)\n     {\n-      pedwarn (omitted_parms_loc, 0,\n+      pedwarn (omitted_parms_loc, OPT_Wc__23_extensions,\n \t       \"parameter declaration before lambda exception \"\n \t       \"specification only optional with %<-std=c++2b%> or \"\n \t       \"%<-std=gnu++2b%>\");\n@@ -11438,7 +11442,7 @@ cp_parser_lambda_declarator_opt (cp_parser* parser, tree lambda_expr)\n   if (cp_lexer_next_token_is (parser->lexer, CPP_DEREF))\n     {\n       if (omitted_parms_loc)\n-\tpedwarn (omitted_parms_loc, 0,\n+\tpedwarn (omitted_parms_loc, OPT_Wc__23_extensions,\n \t\t \"parameter declaration before lambda trailing \"\n \t\t \"return type only optional with %<-std=c++2b%> or \"\n \t\t \"%<-std=gnu++2b%>\");\n@@ -12301,8 +12305,9 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t    cx = true;\n \t    cp_token *tok = cp_lexer_consume_token (parser->lexer);\n \t    if (cxx_dialect < cxx17)\n-\t      pedwarn (tok->location, 0, \"%<if constexpr%> only available \"\n-\t\t       \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n+\t      pedwarn (tok->location, OPT_Wc__17_extensions,\n+\t\t       \"%<if constexpr%> only available with \"\n+\t\t       \"%<-std=c++17%> or %<-std=gnu++17%>\");\n \t  }\n \n \t/* Look for the `('.  */\n@@ -12327,7 +12332,8 @@ cp_parser_selection_statement (cp_parser* parser, bool *if_p,\n \t  {\n \t    tree decl;\n \t    if (cxx_dialect < cxx17)\n-\t      pedwarn (cp_lexer_peek_token (parser->lexer)->location, 0,\n+\t      pedwarn (cp_lexer_peek_token (parser->lexer)->location,\n+\t\t       OPT_Wc__17_extensions,\n \t\t       \"init-statement in selection statements only available \"\n \t\t       \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n \t    if (cp_lexer_next_token_is_not (parser->lexer, CPP_SEMICOLON))\n@@ -13398,7 +13404,8 @@ cp_parser_init_statement (cp_parser *parser, tree *decl)\n \n \t  if (cxx_dialect < cxx20)\n \t    {\n-\t      pedwarn (cp_lexer_peek_token (parser->lexer)->location, 0,\n+\t      pedwarn (cp_lexer_peek_token (parser->lexer)->location,\n+\t\t       OPT_Wc__20_extensions,\n \t\t       \"range-based %<for%> loops with initializer only \"\n \t\t       \"available with %<-std=c++20%> or %<-std=gnu++20%>\");\n \t      *decl = error_mark_node;\n@@ -13422,7 +13429,8 @@ cp_parser_init_statement (cp_parser *parser, tree *decl)\n \t  cp_lexer_consume_token (parser->lexer);\n \t  is_range_for = true;\n \t  if (cxx_dialect < cxx11)\n-\t    pedwarn (cp_lexer_peek_token (parser->lexer)->location, 0,\n+\t    pedwarn (cp_lexer_peek_token (parser->lexer)->location,\n+\t\t     OPT_Wc__11_extensions,\n \t\t     \"range-based %<for%> loops only available with \"\n \t\t     \"%<-std=c++11%> or %<-std=gnu++11%>\");\n \t}\n@@ -14665,8 +14673,9 @@ cp_parser_decomposition_declaration (cp_parser *parser,\n     }\n \n   if (cxx_dialect < cxx17)\n-    pedwarn (loc, 0, \"structured bindings only available with \"\n-\t\t     \"%<-std=c++17%> or %<-std=gnu++17%>\");\n+    pedwarn (loc, OPT_Wc__17_extensions,\n+\t     \"structured bindings only available with \"\n+\t     \"%<-std=c++17%> or %<-std=gnu++17%>\");\n \n   tree pushed_scope;\n   cp_declarator *declarator = make_declarator (cdk_decomp);\n@@ -15261,7 +15270,7 @@ cp_parser_function_specifier_opt (cp_parser* parser,\n \t      = G_(\"types may not be defined in explicit-specifier\");\n \n \t    if (cxx_dialect < cxx20)\n-\t      pedwarn (token->location, 0,\n+\t      pedwarn (token->location, OPT_Wc__20_extensions,\n \t\t       \"%<explicit(bool)%> only available with %<-std=c++20%> \"\n \t\t       \"or %<-std=gnu++20%>\");\n \n@@ -15428,8 +15437,8 @@ cp_parser_static_assert(cp_parser *parser, bool member_p)\n \n   if (cp_lexer_peek_token (parser->lexer)->type == CPP_CLOSE_PAREN)\n     {\n-      if (cxx_dialect < cxx17)\n-\tpedwarn (input_location, OPT_Wpedantic,\n+      if (pedantic && cxx_dialect < cxx17)\n+\tpedwarn (input_location, OPT_Wc__17_extensions,\n \t\t \"%<static_assert%> without a message \"\n \t\t \"only available with %<-std=c++17%> or %<-std=gnu++17%>\");\n       /* Eat the ')'  */\n@@ -20418,10 +20427,11 @@ cp_parser_namespace_definition (cp_parser* parser)\n \t\t\t\t\t\t\t     RID_INLINE);\n       if (nested_inline_p && nested_definition_count != 0)\n \t{\n-\t  if (cxx_dialect < cxx20)\n+\t  if (pedantic && cxx_dialect < cxx20)\n \t    pedwarn (cp_lexer_peek_token (parser->lexer)->location,\n-\t\t     OPT_Wpedantic, \"nested inline namespace definitions only \"\n-\t\t     \"available with %<-std=c++20%> or %<-std=gnu++20%>\");\n+\t\t     OPT_Wc__20_extensions, \"nested inline namespace \"\n+\t\t     \"definitions only available with %<-std=c++20%> or \"\n+\t\t     \"%<-std=gnu++20%>\");\n \t  cp_lexer_consume_token (parser->lexer);\n \t}\n \n@@ -20448,8 +20458,8 @@ cp_parser_namespace_definition (cp_parser* parser)\n \t  break;\n \t}\n \n-      if (!nested_definition_count && cxx_dialect < cxx17)\n-        pedwarn (input_location, OPT_Wpedantic,\n+      if (!nested_definition_count && pedantic && cxx_dialect < cxx17)\n+        pedwarn (input_location, OPT_Wc__17_extensions,\n \t\t \"nested namespace definitions only available with \"\n \t\t \"%<-std=c++17%> or %<-std=gnu++17%>\");\n \n@@ -20708,7 +20718,7 @@ cp_parser_using_declaration (cp_parser* parser,\n     {\n       cp_token *ell = cp_lexer_consume_token (parser->lexer);\n       if (cxx_dialect < cxx17)\n-\tpedwarn (ell->location, 0,\n+\tpedwarn (ell->location, OPT_Wc__17_extensions,\n \t\t \"pack expansion in using-declaration only available \"\n \t\t \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n       qscope = make_pack_expansion (qscope);\n@@ -20741,7 +20751,7 @@ cp_parser_using_declaration (cp_parser* parser,\n     {\n       cp_token *comma = cp_lexer_consume_token (parser->lexer);\n       if (cxx_dialect < cxx17)\n-\tpedwarn (comma->location, 0,\n+\tpedwarn (comma->location, OPT_Wc__17_extensions,\n \t\t \"comma-separated list in using-declaration only available \"\n \t\t \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n       goto again;\n@@ -21057,9 +21067,10 @@ cp_parser_asm_definition (cp_parser* parser)\n      functions.  */\n   if (parser->in_function_body\n       && DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n-      && (cxx_dialect < cxx20))\n-    pedwarn (asm_loc, 0, \"%<asm%> in %<constexpr%> function only available \"\n-\t     \"with %<-std=c++20%> or %<-std=gnu++20%>\");\n+      && cxx_dialect < cxx20)\n+    pedwarn (asm_loc, OPT_Wc__20_extensions, \"%<asm%> in %<constexpr%> \"\n+\t     \"function only available with %<-std=c++20%> or \"\n+\t     \"%<-std=gnu++20%>\");\n \n   /* Handle the asm-qualifier-list.  */\n   location_t volatile_loc = UNKNOWN_LOCATION;\n@@ -24131,11 +24142,11 @@ cp_parser_ctor_initializer_opt_and_function_body (cp_parser *parser,\n       && cxx_dialect < cxx20)\n     {\n       if (DECL_CONSTRUCTOR_P (current_function_decl))\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__20_extensions,\n \t\t \"function-try-block body of %<constexpr%> constructor only \"\n \t\t \"available with %<-std=c++20%> or %<-std=gnu++20%>\");\n       else\n-\tpedwarn (input_location, 0,\n+\tpedwarn (input_location, OPT_Wc__20_extensions,\n \t\t \"function-try-block body of %<constexpr%> function only \"\n \t\t \"available with %<-std=c++20%> or %<-std=gnu++20%>\");\n     }\n@@ -24458,8 +24469,8 @@ cp_parser_initializer_list (cp_parser* parser, bool* non_constant_p,\n \t      || (cp_lexer_peek_nth_token (parser->lexer, 3)->type\n \t\t  == CPP_OPEN_BRACE)))\n \t{\n-\t  if (cxx_dialect < cxx20)\n-\t    pedwarn (loc, OPT_Wpedantic,\n+\t  if (pedantic && cxx_dialect < cxx20)\n+\t    pedwarn (loc, OPT_Wc__20_extensions,\n \t\t     \"C++ designated initializers only available with \"\n \t\t     \"%<-std=c++20%> or %<-std=gnu++20%>\");\n \t  /* Consume the `.'.  */\n@@ -25800,10 +25811,11 @@ cp_parser_type_parameter_key (cp_parser* parser)\n   if ((tag_type = cp_parser_token_is_type_parameter_key (token)) != none_type)\n     {\n       cp_lexer_consume_token (parser->lexer);\n-      if (pedantic && tag_type == typename_type && cxx_dialect < cxx17)\n+      if (pedantic && tag_type == typename_type\n+\t  && cxx_dialect < cxx17)\n \t/* typename is not allowed in a template template parameter\n \t   by the standard until C++17.  */\n-\tpedwarn (token->location, OPT_Wpedantic,\n+\tpedwarn (token->location, OPT_Wc__17_extensions,\n \t\t \"ISO C++ forbids typename key in template template parameter;\"\n \t\t \" use %<-std=c++17%> or %<-std=gnu++17%>\");\n     }\n@@ -26197,7 +26209,7 @@ cp_parser_member_declaration (cp_parser* parser)\n \t\t    = cp_lexer_peek_token (parser->lexer)->location;\n \t\t  if (cxx_dialect < cxx20\n \t\t      && identifier != NULL_TREE)\n-\t\t    pedwarn (loc, 0,\n+\t\t    pedwarn (loc, OPT_Wc__20_extensions,\n \t\t\t     \"default member initializers for bit-fields \"\n \t\t\t     \"only available with %<-std=c++20%> or \"\n \t\t\t     \"%<-std=gnu++20%>\");\n@@ -27158,7 +27170,7 @@ cp_parser_try_block (cp_parser* parser)\n   if (parser->in_function_body\n       && DECL_DECLARED_CONSTEXPR_P (current_function_decl)\n       && cxx_dialect < cxx20)\n-    pedwarn (input_location, 0,\n+    pedwarn (input_location, OPT_Wc__20_extensions,\n \t     \"%<try%> in %<constexpr%> function only \"\n \t     \"available with %<-std=c++20%> or %<-std=gnu++20%>\");\n \n@@ -28117,7 +28129,7 @@ cp_parser_std_attribute_spec (cp_parser *parser)\n \t      && cp_lexer_nth_token_is (parser->lexer, 3, CPP_COLON))\n \t    {\n \t      if (cxx_dialect < cxx17)\n-\t\tpedwarn (input_location, 0,\n+\t\tpedwarn (input_location, OPT_Wc__17_extensions,\n \t\t\t \"attribute using prefix only available \"\n \t\t\t \"with %<-std=c++17%> or %<-std=gnu++17%>\");\n "}, {"sha": "3d1787b6fc332136d04cf8873c7ff88a8e44a20a", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ee336ecb2a7161bc28f6c5343d97870a8d15e177", "patch": "@@ -2703,7 +2703,7 @@ check_template_variable (tree decl)\n       && PRIMARY_TEMPLATE_P (DECL_TI_TEMPLATE (decl)))\n     {\n       if (cxx_dialect < cxx14)\n-        pedwarn (DECL_SOURCE_LOCATION (decl), 0,\n+        pedwarn (DECL_SOURCE_LOCATION (decl), OPT_Wc__14_extensions,\n \t\t \"variable templates only available with \"\n \t\t \"%<-std=c++14%> or %<-std=gnu++14%>\");\n "}, {"sha": "9bcbcdc777cade6c3bc3cee1cef265e1d40a846c", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee336ecb2a7161bc28f6c5343d97870a8d15e177/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ee336ecb2a7161bc28f6c5343d97870a8d15e177", "patch": "@@ -330,7 +330,9 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-builtin-macro-redefined  -Wc90-c99-compat  -Wc99-c11-compat @gol\n -Wc11-c2x-compat @gol\n -Wc++-compat  -Wc++11-compat  -Wc++14-compat  -Wc++17-compat  @gol\n--Wc++20-compat  @gol\n+-Wc++20-compat   @gol\n+-Wno-c++11-extensions  -Wno-c++14-extensions -Wno-c++17-extensions  @gol\n+-Wno-c++20-extensions  -Wno-c++23-extensions  @gol\n -Wcast-align  -Wcast-align=strict  -Wcast-function-type  -Wcast-qual  @gol\n -Wchar-subscripts @gol\n -Wclobbered  -Wcomment @gol\n@@ -8154,6 +8156,41 @@ and ISO C++ 2017.  This warning is enabled by @option{-Wall}.\n Warn about C++ constructs whose meaning differs between ISO C++ 2017\n and ISO C++ 2020.  This warning is enabled by @option{-Wall}.\n \n+@item -Wno-c++11-extensions @r{(C++ and Objective-C++ only)}\n+@opindex Wc++11-extensions\n+@opindex Wno-c++11-extensions\n+Do not warn about C++11 constructs in code being compiled using\n+an older C++ standard.  Even without this option, some C++11 constructs\n+will only be diagnosed if @option{-Wpedantic} is used.\n+\n+@item -Wno-c++14-extensions @r{(C++ and Objective-C++ only)}\n+@opindex Wc++14-extensions\n+@opindex Wno-c++14-extensions\n+Do not warn about C++14 constructs in code being compiled using\n+an older C++ standard.  Even without this option, some C++14 constructs\n+will only be diagnosed if @option{-Wpedantic} is used.\n+\n+@item -Wno-c++17-extensions @r{(C++ and Objective-C++ only)}\n+@opindex Wc++17-extensions\n+@opindex Wno-c++17-extensions\n+Do not warn about C++17 constructs in code being compiled using\n+an older C++ standard.  Even without this option, some C++17 constructs\n+will only be diagnosed if @option{-Wpedantic} is used.\n+\n+@item -Wno-c++20-extensions @r{(C++ and Objective-C++ only)}\n+@opindex Wc++20-extensions\n+@opindex Wno-c++20-extensions\n+Do not warn about C++20 constructs in code being compiled using\n+an older C++ standard.  Even without this option, some C++20 constructs\n+will only be diagnosed if @option{-Wpedantic} is used.\n+\n+@item -Wno-c++23-extensions @r{(C++ and Objective-C++ only)}\n+@opindex Wc++23-extensions\n+@opindex Wno-c++23-extensions\n+Do not warn about C++23 constructs in code being compiled using\n+an older C++ standard.  Even without this option, some C++23 constructs\n+will only be diagnosed if @option{-Wpedantic} is used.\n+\n @item -Wcast-qual\n @opindex Wcast-qual\n @opindex Wno-cast-qual"}]}