{"sha": "2b536797f7e43c55072a3215735f5833f1d6d218", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI1MzY3OTdmN2U0M2M1NTA3MmEzMjE1NzM1ZjU4MzNmMWQ2ZDIxOA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-20T07:10:38Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-05-20T07:10:38Z"}, "message": "phiopt: Simplify (X & Y) == X -> (X & ~Y) == 0 even in presence of integral conversions [PR94589]\n\nOn Wed, May 19, 2021 at 10:15:53AM +0200, Christophe Lyon via Gcc-patches wrote:\n> After this update, the test fails on arm and aarch64: according to the\n> logs, the optimization is still performed 14 times.\n\nSeems this is because\n              if (change\n                  && !flag_syntax_only\n                  && (load_extend_op (TYPE_MODE (TREE_TYPE (and0)))\n                      == ZERO_EXTEND))\n                {\n                  tree uns = unsigned_type_for (TREE_TYPE (and0));\n                  and0 = fold_convert_loc (loc, uns, and0);\n                  and1 = fold_convert_loc (loc, uns, and1);\n                }\nin fold-const.c adds on these targets extra casts that prevent the\noptimizations.\n\n2021-05-20  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/94589\n\t* match.pd ((X & Y) == X -> (X & ~Y) == 0): Simplify even in presence\n\tof integral conversions.", "tree": {"sha": "ed90c10a928ec8e34b4937a84827804a7cf7c38a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed90c10a928ec8e34b4937a84827804a7cf7c38a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b536797f7e43c55072a3215735f5833f1d6d218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b536797f7e43c55072a3215735f5833f1d6d218", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b536797f7e43c55072a3215735f5833f1d6d218", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b536797f7e43c55072a3215735f5833f1d6d218/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d15a2d261b24adcbfe5e663b15dde3df5d2b3486", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15a2d261b24adcbfe5e663b15dde3df5d2b3486", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d15a2d261b24adcbfe5e663b15dde3df5d2b3486"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "e01bb7a4080c7791c30f618ac384585548b78f9b", "filename": "gcc/match.pd", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b536797f7e43c55072a3215735f5833f1d6d218/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b536797f7e43c55072a3215735f5833f1d6d218/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=2b536797f7e43c55072a3215735f5833f1d6d218", "patch": "@@ -4769,6 +4769,16 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (simplify\n   (cmp:c (bit_and:c @0 @1) @0)\n   (cmp (bit_and @0 (bit_not! @1)) { build_zero_cst (TREE_TYPE (@0)); }))\n+ (simplify\n+  (cmp:c (convert@3 (bit_and (convert@2 @0) INTEGER_CST@1)) (convert @0))\n+  (if (INTEGRAL_TYPE_P (TREE_TYPE (@0))\n+       && INTEGRAL_TYPE_P (TREE_TYPE (@2))\n+       && INTEGRAL_TYPE_P (TREE_TYPE (@3))\n+       && TYPE_PRECISION (TREE_TYPE (@2)) == TYPE_PRECISION (TREE_TYPE (@0))\n+       && TYPE_PRECISION (TREE_TYPE (@3)) > TYPE_PRECISION (TREE_TYPE (@2))\n+       && !wi::neg_p (wi::to_wide (@1)))\n+   (cmp (bit_and @0 (convert (bit_not @1)))\n+\t{ build_zero_cst (TREE_TYPE (@0)); })))\n \n  /* (X | Y) == Y becomes (X & ~Y) == 0.  */\n  (simplify"}]}