{"sha": "1a19d334ce493ec2ce2daeac74beef63fd67e2bc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWExOWQzMzRjZTQ5M2VjMmNlMmRhZWFjNzRiZWVmNjNmZDY3ZTJiYw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-09T22:02:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2021-04-10T04:06:55Z"}, "message": "c++: deduction guide using alias [PR99180]\n\nalias_ctad_tweaks was expecting that all deduction guides for the class\nwould be suitable for deduction from the alias definition; in this case, the\ndeduction guide uses 'true' and the alias B uses 'false', so deduction\nfails.  But that's OK, we just don't use that deduction guide.  I also\nnoticed that we were giving up on deduction entirely if substitution failed\nfor some guide; we should only give up on that particular deduction guide.\n\nWe ought to give a better diagnostic about this case when deduction fails,\nbut that can wait.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99180\n\tPR c++/93295\n\tPR c++/93867\n\tPR c++/99118\n\tPR c++/96873\n\t* pt.c (alias_ctad_tweaks): Handle failure better.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99180\n\tPR c++/93295\n\tPR c++/93867\n\tPR c++/95486\n\t* g++.dg/cpp2a/class-deduction-alias5.C: New test.\n\t* g++.dg/cpp2a/class-deduction-alias6.C: New test.\n\t* g++.dg/cpp2a/class-deduction-alias7.C: New test.\n\t* g++.dg/cpp2a/class-deduction-alias8.C: New test.", "tree": {"sha": "86eb0cba26a951cf3f65afb782d031b1b1a6e150", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86eb0cba26a951cf3f65afb782d031b1b1a6e150"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a19d334ce493ec2ce2daeac74beef63fd67e2bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a19d334ce493ec2ce2daeac74beef63fd67e2bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a19d334ce493ec2ce2daeac74beef63fd67e2bc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a19d334ce493ec2ce2daeac74beef63fd67e2bc/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e89055f90cff9fb6f565b9374e1ab74f805682fb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e89055f90cff9fb6f565b9374e1ab74f805682fb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e89055f90cff9fb6f565b9374e1ab74f805682fb"}], "stats": {"total": 82, "additions": 79, "deletions": 3}, "files": [{"sha": "abd1ad4d1a64e7e6808b90897327348aa27470a2", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a19d334ce493ec2ce2daeac74beef63fd67e2bc/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a19d334ce493ec2ce2daeac74beef63fd67e2bc/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=1a19d334ce493ec2ce2daeac74beef63fd67e2bc", "patch": "@@ -29042,7 +29042,8 @@ alias_ctad_tweaks (tree tmpl, tree uguides)\n \t  unsigned len = TREE_VEC_LENGTH (ftparms);\n \t  tree targs = make_tree_vec (len);\n \t  int err = unify (ftparms, targs, ret, utype, UNIFY_ALLOW_NONE, false);\n-\t  gcc_assert (!err);\n+\t  if (err)\n+\t    continue;\n \n \t  /* The number of parms for f' is the number of parms for A plus\n \t     non-deduced parms of f.  */\n@@ -29075,7 +29076,7 @@ alias_ctad_tweaks (tree tmpl, tree uguides)\n \t     guideness, and explicit-specifier.  */\n \t  tree g = tsubst_decl (DECL_TEMPLATE_RESULT (f), targs, complain);\n \t  if (g == error_mark_node)\n-\t    return error_mark_node;\n+\t    continue;\n \t  DECL_USE_TEMPLATE (g) = 0;\n \t  fprime = build_template_decl (g, gtparms, false);\n \t  DECL_TEMPLATE_RESULT (fprime) = g;\n@@ -29089,7 +29090,7 @@ alias_ctad_tweaks (tree tmpl, tree uguides)\n \t  if (ci)\n \t    ci = tsubst_constraint_info (ci, targs, complain, in_decl);\n \t  if (ci == error_mark_node)\n-\t    return error_mark_node;\n+\t    continue;\n \n \t  /* Add a constraint that the return type matches the instantiation of\n \t     A with the same template arguments.  */"}, {"sha": "69143a3277b9b4be86d090b71fa6eb38db2ecf51", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-alias5.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a19d334ce493ec2ce2daeac74beef63fd67e2bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a19d334ce493ec2ce2daeac74beef63fd67e2bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias5.C?ref=1a19d334ce493ec2ce2daeac74beef63fd67e2bc", "patch": "@@ -0,0 +1,18 @@\n+// PR c++/99180\n+// { dg-do compile { target c++17 } }\n+\n+template <bool, typename... Ts>\n+struct A {\n+  A(Ts...) {}\n+};\n+\n+template <typename... Ts>\n+using B = A<false, Ts...>;\n+\n+template <typename... Ts>\n+A(Ts...) -> A<true, Ts...>;\n+\n+int main() {\n+  B{};\t\t\t\t// { dg-error \"alias\" \"\" { target c++17_down } }\n+  return 0;\n+}"}, {"sha": "26a38641ab31a426891d8893b0d22745fbd5a2ae", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-alias6.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a19d334ce493ec2ce2daeac74beef63fd67e2bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias6.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a19d334ce493ec2ce2daeac74beef63fd67e2bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias6.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias6.C?ref=1a19d334ce493ec2ce2daeac74beef63fd67e2bc", "patch": "@@ -0,0 +1,11 @@\n+// PR c++/93295\n+// { dg-do compile { target c++20 } }\n+\n+template<typename T, bool B = false>\n+struct Foo {\n+    Foo(T) {}\n+};\n+\n+template<typename T> Foo(T) -> Foo<T>;\n+template<typename T> using Bar = Foo<T, true>;\n+Bar b{0};"}, {"sha": "0d8bff7610dcc1b19f840bed01e8b4dfa4475053", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-alias7.C", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a19d334ce493ec2ce2daeac74beef63fd67e2bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias7.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a19d334ce493ec2ce2daeac74beef63fd67e2bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias7.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias7.C?ref=1a19d334ce493ec2ce2daeac74beef63fd67e2bc", "patch": "@@ -0,0 +1,32 @@\n+// PR c++/93867\n+// { dg-do compile { target c++20 } }\n+\n+template <typename CharT, unsigned N>\n+struct basic_fixed_string\n+{\n+  constexpr basic_fixed_string(const CharT *p) {\n+    for (int i = 0; i < N; ++i) {\n+      m_data[i] = p[i];\n+    }\n+  }\n+\n+  CharT m_data[N] {};\n+};\n+\n+template <typename CharT, unsigned N>\n+basic_fixed_string(const CharT (&)[N]) -> basic_fixed_string<CharT,N>;\n+\n+template <unsigned N>\n+using fixed_string = basic_fixed_string<char, N>;\n+\n+template <fixed_string path>\n+constexpr int foo()\n+{\n+  return 42;\n+}\n+\n+int main(int argc, char const *argv[])\n+{\n+  foo<\"hello\">();\n+  return 0;\n+}"}, {"sha": "ec005956fa6cac585190277c4f53a5fd014d4d5e", "filename": "gcc/testsuite/g++.dg/cpp2a/class-deduction-alias8.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a19d334ce493ec2ce2daeac74beef63fd67e2bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a19d334ce493ec2ce2daeac74beef63fd67e2bc/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fclass-deduction-alias8.C?ref=1a19d334ce493ec2ce2daeac74beef63fd67e2bc", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/95486\n+// { dg-do compile { target c++20 } }\n+\n+template<class T, class U>\n+struct X { X(U) requires __is_same(U, int) {} };\n+\n+template<class U>\n+X(U) -> X<char, U>;\n+\n+template<class U>\n+using Y = X<void, U>;\n+\n+Y y{1};\n+Y z{'a'}; // { dg-error \"failed|no match\" }"}]}