{"sha": "a1e53f3f45341740225db7b5770c7dca77528fca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFlNTNmM2Y0NTM0MTc0MDIyNWRiN2I1NzcwYzdkY2E3NzUyOGZjYQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-10-03T23:57:01Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-10-03T23:57:01Z"}, "message": "Revert revision 164914.\n\ngcc/\n\n2010-10-03  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* tree-vect-data-refs.c (vect_analyze_data_ref_access): Revert\n\trevision 164914.\n\t(vect_create_data_ref_ptr): Likewise.\n\t* tree-vect-stmts.c (vectorizable_store): Likewise.\n\t(perm_mask_for_reverse): Likewise.\n\t(reverse_vec_elements): Likewise.\n\t(vectorizable_load): Likewise.\n\ngcc/testsuite/\n\n2010-10-03  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* g++.dg/torture/pr45764.C: Revert revision 164914.\n\t* gcc.dg/vect/pr43432.c: Likewise.\n\t* gcc.dg/vect/vect-114.c: Likewise.\n\t* gcc.dg/vect/vect-15.c: Likewise.\n\nFrom-SVN: r164919", "tree": {"sha": "dbbfff3737bea92b24f23f3f5e2577fc6e0e09df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dbbfff3737bea92b24f23f3f5e2577fc6e0e09df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1e53f3f45341740225db7b5770c7dca77528fca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e53f3f45341740225db7b5770c7dca77528fca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e53f3f45341740225db7b5770c7dca77528fca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e53f3f45341740225db7b5770c7dca77528fca/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "79fe346e8aac0fecd659ba7433107ea3e86a4cd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79fe346e8aac0fecd659ba7433107ea3e86a4cd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79fe346e8aac0fecd659ba7433107ea3e86a4cd6"}], "stats": {"total": 162, "additions": 133, "deletions": 29}, "files": [{"sha": "b2cfc874966f704c23f9c49ae03f458acddd27d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a1e53f3f45341740225db7b5770c7dca77528fca", "patch": "@@ -1,3 +1,13 @@\n+2010-10-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* tree-vect-data-refs.c (vect_analyze_data_ref_access): Revert\n+\trevision 164914.\n+\t(vect_create_data_ref_ptr): Likewise.\n+\t* tree-vect-stmts.c (vectorizable_store): Likewise.\n+\t(perm_mask_for_reverse): Likewise.\n+\t(reverse_vec_elements): Likewise.\n+\t(vectorizable_load): Likewise.\n+\n 2010-10-03  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n \n \t* cppbuiltin.c: New file."}, {"sha": "2ffaa9d396060d2d7f462f29cd7a7af7a8581c16", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a1e53f3f45341740225db7b5770c7dca77528fca", "patch": "@@ -1,3 +1,10 @@\n+2010-10-03  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* g++.dg/torture/pr45764.C: Revert revision 164914.\n+\t* gcc.dg/vect/pr43432.c: Likewise.\n+\t* gcc.dg/vect/vect-114.c: Likewise.\n+\t* gcc.dg/vect/vect-15.c: Likewise.\n+\n 2010-10-03  Jason Merrill  <jason@redhat.com>\n \n \t* g++.dg/cpp0x/sfinae5.C: New."}, {"sha": "56f32be3695ab9d6d5c33b7de7faa37aa0487014", "filename": "gcc/testsuite/g++.dg/torture/pr45764.C", "status": "removed", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr45764.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/79fe346e8aac0fecd659ba7433107ea3e86a4cd6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr45764.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr45764.C?ref=79fe346e8aac0fecd659ba7433107ea3e86a4cd6", "patch": "@@ -1,25 +0,0 @@\n-// { dg-do run }\n-\n-int result[64][16];\n-\n-int main()\n-{\n-        double dbuf[1000] = {0.0};\n-        int ibuf[900];\n-\n-        double d1 = 0.0;\n-        double d2 = 0.0;\n-        for (int i = 0; i < 900; ++i) {\n-                ibuf[i] = int(d2 - d1);\n-                d1 += dbuf[i];\n-                d2 += dbuf[i + 64];\n-        }\n-\n-        for (int i = 0; i < 64; ++i) {\n-                for (int j = 0; j < 8; ++j) {\n-                        result[i][     j] = ibuf[64 - i + 64 * j];\n-                        result[i][15 - j] = ibuf[     i + 64 * j];\n-                }\n-        }\n-\treturn 0;\n-}"}, {"sha": "18c0dba56f69f9fff2bb0fa1c6d1e07bc3ba7028", "filename": "gcc/testsuite/gcc.dg/vect/pr43432.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43432.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43432.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fpr43432.c?ref=a1e53f3f45341740225db7b5770c7dca77528fca", "patch": "@@ -10,5 +10,5 @@ int len){\n         dst[i] = src0[i] * src1[-i];\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail { vect_perm } } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target { vect_perm } } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "f9132acd06d1c6cb2eb6ca6ab88851030849df27", "filename": "gcc/testsuite/gcc.dg/vect/vect-114.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-114.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-114.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-114.c?ref=a1e53f3f45341740225db7b5770c7dca77528fca", "patch": "@@ -35,6 +35,6 @@ int main (void)\n }\n \n /* { dg-final { scan-tree-dump-times \"vectorized 0 loops\" 1 \"vect\" { target { ! vect_perm } } } } */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_perm } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_perm } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */\n "}, {"sha": "87853c1248e5c8202d35c96445b8ca1b45fa9e0d", "filename": "gcc/testsuite/gcc.dg/vect/vect-15.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-15.c?ref=a1e53f3f45341740225db7b5770c7dca77528fca", "patch": "@@ -35,5 +35,5 @@ int main (void)\n   return main1 ();\n }\n \n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail vect_perm } } } */\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { target vect_perm } } } */\n /* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "71825137cd7797e2010601e91362ffa97db3ffdc", "filename": "gcc/tree-vect-data-refs.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2Ftree-vect-data-refs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2Ftree-vect-data-refs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-data-refs.c?ref=a1e53f3f45341740225db7b5770c7dca77528fca", "patch": "@@ -2287,7 +2287,9 @@ vect_analyze_data_ref_access (struct data_reference *dr)\n     }\n \n   /* Consecutive?  */\n-  if (!tree_int_cst_compare (step, TYPE_SIZE_UNIT (scalar_type)))\n+  if (!tree_int_cst_compare (step, TYPE_SIZE_UNIT (scalar_type))\n+      || (dr_step < 0\n+\t  && !compare_tree_int (TYPE_SIZE_UNIT (scalar_type), -dr_step)))\n     {\n       /* Mark that it is not interleaving.  */\n       DR_GROUP_FIRST_DR (vinfo_for_stmt (stmt)) = NULL;\n@@ -2970,6 +2972,7 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n   tree vptr;\n   gimple_stmt_iterator incr_gsi;\n   bool insert_after;\n+  bool negative;\n   tree indx_before_incr, indx_after_incr;\n   gimple incr;\n   tree step;\n@@ -3002,6 +3005,7 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n     *inv_p = true;\n   else\n     *inv_p = false;\n+  negative = tree_int_cst_compare (step, size_zero_node) < 0;\n \n   /* Create an expression for the first address accessed by this load\n      in LOOP.  */\n@@ -3160,6 +3164,8 @@ vect_create_data_ref_ptr (gimple stmt, struct loop *at_loop,\n \t LOOP is zero. In this case the step here is also zero.  */\n       if (*inv_p)\n \tstep = size_zero_node;\n+      else if (negative)\n+\tstep = fold_build1 (NEGATE_EXPR, TREE_TYPE (step), step);\n \n       standard_iv_increment_position (loop, &incr_gsi, &insert_after);\n "}, {"sha": "b120dc60961144b6a4edf06520f874629a1028cd", "filename": "gcc/tree-vect-stmts.c", "status": "modified", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2Ftree-vect-stmts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e53f3f45341740225db7b5770c7dca77528fca/gcc%2Ftree-vect-stmts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.c?ref=a1e53f3f45341740225db7b5770c7dca77528fca", "patch": "@@ -3145,6 +3145,13 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   if (!STMT_VINFO_DATA_REF (stmt_info))\n     return false;\n \n+  if (tree_int_cst_compare (DR_STEP (dr), size_zero_node) < 0)\n+    {\n+      if (vect_print_dump_info (REPORT_DETAILS))\n+        fprintf (vect_dump, \"negative step for store.\");\n+      return false;\n+    }\n+\n   if (STMT_VINFO_STRIDED_ACCESS (stmt_info))\n     {\n       strided_store = true;\n@@ -3425,6 +3432,68 @@ vectorizable_store (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   return true;\n }\n \n+/* Given a vector type VECTYPE returns a builtin DECL to be used\n+   for vector permutation and stores a mask into *MASK that implements\n+   reversal of the vector elements.  If that is impossible to do\n+   returns NULL (and *MASK is unchanged).  */\n+\n+static tree\n+perm_mask_for_reverse (tree vectype, tree *mask)\n+{\n+  tree builtin_decl;\n+  tree mask_element_type, mask_type;\n+  tree mask_vec = NULL;\n+  int i;\n+  int nunits;\n+  if (!targetm.vectorize.builtin_vec_perm)\n+    return NULL;\n+\n+  builtin_decl = targetm.vectorize.builtin_vec_perm (vectype,\n+                                                     &mask_element_type);\n+  if (!builtin_decl || !mask_element_type)\n+    return NULL;\n+\n+  mask_type = get_vectype_for_scalar_type (mask_element_type);\n+  nunits = TYPE_VECTOR_SUBPARTS (vectype);\n+  if (TYPE_VECTOR_SUBPARTS (vectype) != TYPE_VECTOR_SUBPARTS (mask_type))\n+    return NULL;\n+\n+  for (i = 0; i < nunits; i++)\n+    mask_vec = tree_cons (NULL, build_int_cst (mask_element_type, i), mask_vec);\n+  mask_vec = build_vector (mask_type, mask_vec);\n+\n+  if (!targetm.vectorize.builtin_vec_perm_ok (vectype, mask_vec))\n+    return NULL;\n+  if (mask)\n+    *mask = mask_vec;\n+  return builtin_decl;\n+}\n+\n+/* Given a vector variable X, that was generated for the scalar LHS of\n+   STMT, generate instructions to reverse the vector elements of X,\n+   insert them a *GSI and return the permuted vector variable.  */\n+\n+static tree\n+reverse_vec_elements (tree x, gimple stmt, gimple_stmt_iterator *gsi)\n+{\n+  tree vectype = TREE_TYPE (x);\n+  tree mask_vec, builtin_decl;\n+  tree perm_dest, data_ref;\n+  gimple perm_stmt;\n+\n+  builtin_decl = perm_mask_for_reverse (vectype, &mask_vec);\n+\n+  perm_dest = vect_create_destination_var (gimple_assign_lhs (stmt), vectype);\n+\n+  /* Generate the permute statement.  */\n+  perm_stmt = gimple_build_call (builtin_decl, 3, x, x, mask_vec);\n+  data_ref = make_ssa_name (perm_dest, perm_stmt);\n+  gimple_call_set_lhs (perm_stmt, data_ref);\n+  vect_finish_stmt_generation (stmt, perm_stmt, gsi);\n+\n+  return data_ref;\n+}\n+\n /* vectorizable_load.\n \n    Check if STMT reads a non scalar data-ref (array/pointer/structure) that\n@@ -3467,6 +3536,7 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   gimple first_stmt;\n   tree scalar_type;\n   bool inv_p;\n+  bool negative;\n   bool compute_in_loop = false;\n   struct loop *at_loop;\n   int vec_num;\n@@ -3529,6 +3599,14 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   if (!STMT_VINFO_DATA_REF (stmt_info))\n     return false;\n \n+  negative = tree_int_cst_compare (DR_STEP (dr), size_zero_node) < 0;\n+  if (negative && ncopies > 1)\n+    {\n+      if (vect_print_dump_info (REPORT_DETAILS))\n+        fprintf (vect_dump, \"multiple types with negative step.\");\n+      return false;\n+    }\n+\n   scalar_type = TREE_TYPE (DR_REF (dr));\n   mode = TYPE_MODE (vectype);\n \n@@ -3563,6 +3641,25 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \treturn false;\n     }\n \n+  if (negative)\n+    {\n+      gcc_assert (!strided_load);\n+      alignment_support_scheme = vect_supportable_dr_alignment (dr, false);\n+      if (alignment_support_scheme != dr_aligned\n+\t  && alignment_support_scheme != dr_unaligned_supported)\n+\t{\n+\t  if (vect_print_dump_info (REPORT_DETAILS))\n+\t    fprintf (vect_dump, \"negative step but alignment required.\");\n+\t  return false;\n+\t}\n+      if (!perm_mask_for_reverse (vectype, NULL))\n+\t{\n+\t  if (vect_print_dump_info (REPORT_DETAILS))\n+\t    fprintf (vect_dump, \"negative step and reversing not supported.\");\n+\t  return false;\n+\t}\n+    }\n+\n   if (!vec_stmt) /* transformation not required.  */\n     {\n       STMT_VINFO_TYPE (stmt_info) = load_vec_info_type;\n@@ -3737,6 +3834,9 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n   else\n     at_loop = loop;\n \n+  if (negative)\n+    offset = size_int (-TYPE_VECTOR_SUBPARTS (vectype) + 1);\n+\n   prev_stmt_info = NULL;\n   for (j = 0; j < ncopies; j++)\n     {\n@@ -3925,6 +4025,12 @@ vectorizable_load (gimple stmt, gimple_stmt_iterator *gsi, gimple *vec_stmt,\n \t\tgcc_unreachable (); /* FORNOW. */\n \t    }\n \n+\t  if (negative)\n+\t    {\n+\t      new_temp = reverse_vec_elements (new_temp, stmt, gsi);\n+\t      new_stmt = SSA_NAME_DEF_STMT (new_temp);\n+\t    }\n+\n \t  /* Collect vector loads and later create their permutation in\n \t     vect_transform_strided_load ().  */\n           if (strided_load || slp_perm)"}]}