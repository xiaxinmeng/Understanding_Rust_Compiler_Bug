{"sha": "68557e1473db9def1ca1f0d9026202213bf587e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njg1NTdlMTQ3M2RiOWRlZjFjYTFmMGQ5MDI2MjAyMjEzYmY1ODdlOQ==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "1999-03-19T14:26:50Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "1999-03-19T14:26:50Z"}, "message": "* expr.c (expand_expr): Handle ERROR_MARK much earlier.\n\nFrom-SVN: r25864", "tree": {"sha": "d65ac6d27ea995bac0a0293390dfc5590b8509aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d65ac6d27ea995bac0a0293390dfc5590b8509aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68557e1473db9def1ca1f0d9026202213bf587e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68557e1473db9def1ca1f0d9026202213bf587e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68557e1473db9def1ca1f0d9026202213bf587e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68557e1473db9def1ca1f0d9026202213bf587e9/comments", "author": null, "committer": null, "parents": [{"sha": "89004479b3d0833d67f575c95adf9553ed48fa6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89004479b3d0833d67f575c95adf9553ed48fa6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89004479b3d0833d67f575c95adf9553ed48fa6f"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "2771d790b2a5ff5ef42f1acdd1dc2ec08ea40e23", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68557e1473db9def1ca1f0d9026202213bf587e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68557e1473db9def1ca1f0d9026202213bf587e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=68557e1473db9def1ca1f0d9026202213bf587e9", "patch": "@@ -1,3 +1,7 @@\n+Fre Mar 19 23:26:29 1999  Martin von L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* expr.c (expand_expr): Handle ERROR_MARK much earlier.\n+\n Fri Mar 19 15:28:38 1999  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* cccp.c (create_definition): Cast to U_CHAR* when assigning to one."}, {"sha": "a09f269f061af14e3692758f93bde1ae7fcd8f7a", "filename": "gcc/expr.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68557e1473db9def1ca1f0d9026202213bf587e9/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68557e1473db9def1ca1f0d9026202213bf587e9/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=68557e1473db9def1ca1f0d9026202213bf587e9", "patch": "@@ -5471,21 +5471,34 @@ expand_expr (exp, target, tmode, modifier)\n   register rtx op0, op1, temp;\n   tree type = TREE_TYPE (exp);\n   int unsignedp = TREE_UNSIGNED (type);\n-  register enum machine_mode mode = TYPE_MODE (type);\n+  register enum machine_mode mode;\n   register enum tree_code code = TREE_CODE (exp);\n   optab this_optab;\n-  /* Use subtarget as the target for operand 0 of a binary operation.  */\n-  rtx subtarget = (target != 0 && GET_CODE (target) == REG ? target : 0);\n-  rtx original_target = target;\n-  int ignore = (target == const0_rtx\n-\t\t|| ((code == NON_LVALUE_EXPR || code == NOP_EXPR\n-\t\t     || code == CONVERT_EXPR || code == REFERENCE_EXPR\n-\t\t     || code == COND_EXPR)\n-\t\t    && TREE_CODE (type) == VOID_TYPE));\n+  rtx subtarget, original_target;\n+  int ignore;\n   tree context;\n   /* Used by check-memory-usage to make modifier read only.  */\n   enum expand_modifier ro_modifier;\n \n+  /* Handle ERROR_MARK before anybody tries to access its type. */\n+  if (TREE_CODE (exp) == ERROR_MARK)\n+    {\n+      op0 = CONST0_RTX (tmode);\n+      if (op0 != 0)\n+\treturn op0;\n+      return const0_rtx;\n+    }\n+\n+  mode = TYPE_MODE (type);\n+  /* Use subtarget as the target for operand 0 of a binary operation.  */\n+  subtarget = (target != 0 && GET_CODE (target) == REG ? target : 0);\n+  original_target = target;\n+  ignore = (target == const0_rtx\n+\t    || ((code == NON_LVALUE_EXPR || code == NOP_EXPR\n+\t\t || code == CONVERT_EXPR || code == REFERENCE_EXPR\n+\t\t || code == COND_EXPR)\n+\t\t&& TREE_CODE (type) == VOID_TYPE));\n+\n   /* Make a read-only version of the modifier.  */\n   if (modifier == EXPAND_NORMAL || modifier == EXPAND_SUM\n       || modifier == EXPAND_CONST_ADDRESS || modifier == EXPAND_INITIALIZER)\n@@ -8144,12 +8157,6 @@ expand_expr (exp, target, tmode, modifier)\n \treturn const0_rtx;\n       }\n \n-    case ERROR_MARK:\n-      op0 = CONST0_RTX (tmode);\n-      if (op0 != 0)\n-\treturn op0;\n-      return const0_rtx;\n-\n     default:\n       return (*lang_expand_expr) (exp, original_target, tmode, modifier);\n     }"}]}