{"sha": "646f94144c017251b6a4eff7bbf74da43201cea1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQ2Zjk0MTQ0YzAxNzI1MWI2YTRlZmY3YmJmNzRkYTQzMjAxY2VhMQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-21T12:11:06Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-03-21T12:11:06Z"}, "message": "decl.c (elaborate_expression_1): When optimization is disabled, use the variable for bounds of loop iteration scheme.\n\n\t* gcc-interface/decl.c (elaborate_expression_1): When optimization is\n\tdisabled, use the variable for bounds of loop iteration scheme.\n\nFrom-SVN: r171220", "tree": {"sha": "f1ec6d9682d666e81c7acf43d8f1b277617396f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1ec6d9682d666e81c7acf43d8f1b277617396f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/646f94144c017251b6a4eff7bbf74da43201cea1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646f94144c017251b6a4eff7bbf74da43201cea1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/646f94144c017251b6a4eff7bbf74da43201cea1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/646f94144c017251b6a4eff7bbf74da43201cea1/comments", "author": null, "committer": null, "parents": [{"sha": "eb97510932f53389907b8f0a20fdc37acdf62f1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb97510932f53389907b8f0a20fdc37acdf62f1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb97510932f53389907b8f0a20fdc37acdf62f1b"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "a61c1e69e703d602207fa8f5b8952b1415007fda", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646f94144c017251b6a4eff7bbf74da43201cea1/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646f94144c017251b6a4eff7bbf74da43201cea1/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=646f94144c017251b6a4eff7bbf74da43201cea1", "patch": "@@ -1,8 +1,12 @@\n+2011-03-21  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/decl.c (elaborate_expression_1): When optimization is\n+\tdisabled, use the variable for bounds of loop iteration scheme.\n+\n 2011-03-21  Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/12171\n-\t* gcc-interface/utils.c (gnat_internal_attribute_table):\n-\tAdd new element.\n+\t* gcc-interface/utils.c (gnat_internal_attribute_table): Add new column\n \n 2011-03-17  Eric Botcazou  <ebotcazou@adacore.com>\n "}, {"sha": "f254ac4d0fc934c16f5fac542af5ee45d93ce781", "filename": "gcc/ada/gcc-interface/decl.c", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/646f94144c017251b6a4eff7bbf74da43201cea1/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/646f94144c017251b6a4eff7bbf74da43201cea1/gcc%2Fada%2Fgcc-interface%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Fdecl.c?ref=646f94144c017251b6a4eff7bbf74da43201cea1", "patch": "@@ -6004,7 +6004,7 @@ elaborate_expression_1 (tree gnu_expr, Entity_Id gnat_entity, tree gnu_name,\n \t\t\tbool definition, bool need_debug)\n {\n   const bool expr_global_p = Is_Public (gnat_entity) || global_bindings_p ();\n-  bool expr_variable_p;\n+  bool expr_variable_p, use_variable;\n   tree gnu_decl;\n \n   /* In most cases, we won't see a naked FIELD_DECL because a discriminant\n@@ -6058,18 +6058,26 @@ elaborate_expression_1 (tree gnu_expr, Entity_Id gnat_entity, tree gnu_name,\n \t    && (TREE_READONLY (inner) || DECL_READONLY_ONCE_ELAB (inner)));\n     }\n \n-  /* Now create the variable if we need it.  */\n-  if (need_debug || (expr_variable_p && expr_global_p))\n+  /* We only need to use the variable if we are in a global context since GCC\n+     can do the right thing in the local case.  However, when not optimizing,\n+     use it for bounds of loop iteration scheme to avoid code duplication.  */\n+  use_variable = expr_variable_p\n+\t\t && (expr_global_p\n+\t\t     || (!optimize\n+\t\t\t && Is_Itype (gnat_entity)\n+\t\t\t && Nkind (Associated_Node_For_Itype (gnat_entity))\n+\t\t\t    == N_Loop_Parameter_Specification));\n+\n+  /* Now create it, possibly only for debugging purposes.  */\n+  if (use_variable || need_debug)\n     gnu_decl\n       = create_var_decl (create_concat_name (gnat_entity,\n \t\t\t\t\t     IDENTIFIER_POINTER (gnu_name)),\n \t\t\t NULL_TREE, TREE_TYPE (gnu_expr), gnu_expr,\n \t\t\t !need_debug, Is_Public (gnat_entity),\n \t\t\t !definition, expr_global_p, NULL, gnat_entity);\n \n-  /* We only need to use this variable if we are in global context since GCC\n-     can do the right thing in the local case.  */\n-  if (expr_global_p && expr_variable_p)\n+  if (use_variable)\n     return gnu_decl;\n \n   return expr_variable_p ? gnat_save_expr (gnu_expr) : gnu_expr;"}]}