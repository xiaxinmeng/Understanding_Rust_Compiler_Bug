{"sha": "d62dab419ae48694fd0395486af7db60c9b2ac87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYyZGFiNDE5YWU0ODY5NGZkMDM5NTQ4NmFmN2RiNjBjOWIyYWM4Nw==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "1999-03-05T13:43:54Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "1999-03-05T13:43:54Z"}, "message": "reload1.c (emit_reload_insns): If pseudo that can't be replaced with its equivalent constant...\n\n\t* reload1.c (emit_reload_insns): If pseudo that can't be replaced\n\twith its equivalent constant, fall back to reload_in.\n\nFrom-SVN: r25604", "tree": {"sha": "e1ec2eccce555391e000bc6b5bab2a5df95f255d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1ec2eccce555391e000bc6b5bab2a5df95f255d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d62dab419ae48694fd0395486af7db60c9b2ac87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62dab419ae48694fd0395486af7db60c9b2ac87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d62dab419ae48694fd0395486af7db60c9b2ac87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d62dab419ae48694fd0395486af7db60c9b2ac87/comments", "author": null, "committer": null, "parents": [{"sha": "b85f4db33be40039bdd4c879740de37e956623d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b85f4db33be40039bdd4c879740de37e956623d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b85f4db33be40039bdd4c879740de37e956623d8"}], "stats": {"total": 28, "additions": 20, "deletions": 8}, "files": [{"sha": "968ea5ec57aab3cb0b412a500191f51ea5d2956f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62dab419ae48694fd0395486af7db60c9b2ac87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62dab419ae48694fd0395486af7db60c9b2ac87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d62dab419ae48694fd0395486af7db60c9b2ac87", "patch": "@@ -1,3 +1,8 @@\n+Fri Mar  5 21:41:07 1999  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* reload1.c (emit_reload_insns): If pseudo that can't be replaced\n+\twith its equivalent constant, fall back to reload_in.\n+\n Fri Mar  5 13:20:39 1999  Richard Henderson  <rth@cygnus.com>\n \n \t* Makefile.in: Delete .flow2 debugging files."}, {"sha": "97bc9988fa30b39febcbca2e8b2a45b7d83714ac", "filename": "gcc/reload1.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d62dab419ae48694fd0395486af7db60c9b2ac87/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d62dab419ae48694fd0395486af7db60c9b2ac87/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=d62dab419ae48694fd0395486af7db60c9b2ac87", "patch": "@@ -6815,13 +6815,16 @@ emit_reload_insns (chain)\n \t\t     See comments in get_secondary_reload in reload.c.  */\n \t\t  /* If it is a pseudo that cannot be replaced with its\n \t\t     equivalent MEM, we must fall back to reload_in, which\n-\t\t     will have all the necessary substitutions registered.  */\n+\t\t     will have all the necessary substitutions registered.\n+\t\t     Likewise for a pseudo that can't be replaced with its\n+\t\t     equivalent constant.  */\n \t\t\t\t\n \t\t  if (GET_CODE (oldequiv) == REG\n \t\t      && REGNO (oldequiv) >= FIRST_PSEUDO_REGISTER\n-\t\t      && reg_equiv_memory_loc[REGNO (oldequiv)] != 0)\n+\t\t      && (reg_equiv_memory_loc[REGNO (oldequiv)] != 0\n+\t\t\t  || reg_equiv_constant[REGNO (oldequiv)] != 0))\n \t\t    {\n-\t\t      if (reg_equiv_address[REGNO (oldequiv)]\n+\t\t      if (! reg_equiv_mem[REGNO (oldequiv)]\n \t\t\t  || num_not_at_initial_offset)\n \t\t\treal_oldequiv = reload_in[j];\n \t\t      else\n@@ -6830,9 +6833,10 @@ emit_reload_insns (chain)\n \n \t\t  if (GET_CODE (old) == REG\n \t\t      && REGNO (old) >= FIRST_PSEUDO_REGISTER\n-\t\t      && reg_equiv_memory_loc[REGNO (old)] != 0)\n+\t\t      && (reg_equiv_memory_loc[REGNO (old)] != 0\n+\t\t\t  || reg_equiv_constant[REGNO (old)] != 0))\n \t\t    {\n-\t\t      if (reg_equiv_address[REGNO (old)]\n+\t\t      if (! reg_equiv_mem[REGNO (old)]\n \t\t\t  || num_not_at_initial_offset)\n \t\t\treal_old = reload_in[j];\n \t\t      else\n@@ -6938,13 +6942,16 @@ emit_reload_insns (chain)\n \n \t\t  if ((GET_CODE (oldequiv) == REG\n \t\t       && REGNO (oldequiv) >= FIRST_PSEUDO_REGISTER\n-\t\t       && reg_equiv_memory_loc[REGNO (oldequiv)] != 0)\n+\t\t       && (reg_equiv_memory_loc[REGNO (oldequiv)] != 0\n+\t\t\t   || reg_equiv_constant[REGNO (oldequiv)] != 0))\n \t\t      || (GET_CODE (oldequiv) == SUBREG\n \t\t\t  && GET_CODE (SUBREG_REG (oldequiv)) == REG\n \t\t\t  && (REGNO (SUBREG_REG (oldequiv))\n \t\t\t      >= FIRST_PSEUDO_REGISTER)\n-\t\t\t  && (reg_equiv_memory_loc\n-\t\t\t      [REGNO (SUBREG_REG (oldequiv))] != 0)))\n+\t\t\t  && ((reg_equiv_memory_loc\n+\t\t\t       [REGNO (SUBREG_REG (oldequiv))] != 0)\n+\t\t\t      || (reg_equiv_constant\n+\t\t\t\t  [REGNO (SUBREG_REG (oldequiv))] != 0))))\n \t\t    real_oldequiv = reload_in[j];\n \t\t  gen_reload (reloadreg, real_oldequiv, reload_opnum[j],\n \t\t\t      reload_when_needed[j]);"}]}