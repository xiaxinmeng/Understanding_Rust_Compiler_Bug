{"sha": "f8f8fee8a29c116bf8fe29a93cc555b37835c8bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjhmOGZlZThhMjljMTE2YmY4ZmUyOWE5M2NjNTU1YjM3ODM1YzhiZA==", "commit": {"author": {"name": "Ira Rosen", "email": "irar@il.ibm.com", "date": "2007-09-12T05:09:17Z"}, "committer": {"name": "Ira Rosen", "email": "irar@gcc.gnu.org", "date": "2007-09-12T05:09:17Z"}, "message": "tree-vect-transform.c (vect_get_slp_defs): Don't build a vector for oprnd1 if not required.\n\n\t* tree-vect-transform.c (vect_get_slp_defs): Don't build a vector\n\tfor oprnd1 if not required.\n\t(vectorizable_operation): Use scalar operand in SLP in case of \n\tshift with scalar argument.\n\nFrom-SVN: r128412", "tree": {"sha": "cceeec2db32edf030f4b94d2c08cf835f0377a36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cceeec2db32edf030f4b94d2c08cf835f0377a36"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f8f8fee8a29c116bf8fe29a93cc555b37835c8bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f8fee8a29c116bf8fe29a93cc555b37835c8bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8f8fee8a29c116bf8fe29a93cc555b37835c8bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8f8fee8a29c116bf8fe29a93cc555b37835c8bd/comments", "author": {"login": "irar2", "id": 16818592, "node_id": "MDQ6VXNlcjE2ODE4NTky", "avatar_url": "https://avatars.githubusercontent.com/u/16818592?v=4", "gravatar_id": "", "url": "https://api.github.com/users/irar2", "html_url": "https://github.com/irar2", "followers_url": "https://api.github.com/users/irar2/followers", "following_url": "https://api.github.com/users/irar2/following{/other_user}", "gists_url": "https://api.github.com/users/irar2/gists{/gist_id}", "starred_url": "https://api.github.com/users/irar2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/irar2/subscriptions", "organizations_url": "https://api.github.com/users/irar2/orgs", "repos_url": "https://api.github.com/users/irar2/repos", "events_url": "https://api.github.com/users/irar2/events{/privacy}", "received_events_url": "https://api.github.com/users/irar2/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d888559bbdd85403d3b8d2a2885d75aacc8b8af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d888559bbdd85403d3b8d2a2885d75aacc8b8af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d888559bbdd85403d3b8d2a2885d75aacc8b8af"}], "stats": {"total": 29, "additions": 19, "deletions": 10}, "files": [{"sha": "6d8433d234a484c97977cf2280a0a355e13cd480", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f8fee8a29c116bf8fe29a93cc555b37835c8bd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f8fee8a29c116bf8fe29a93cc555b37835c8bd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f8f8fee8a29c116bf8fe29a93cc555b37835c8bd", "patch": "@@ -1,3 +1,10 @@\n+2007-09-12  Ira Rosen  <irar@il.ibm.com>\n+\n+\t* tree-vect-transform.c (vect_get_slp_defs): Don't build a vector\n+\tfor oprnd1 if not required.\n+\t(vectorizable_operation): Use scalar operand in SLP in case of \n+\tshift with scalar argument.\n+\n 2007-09-12  Ira Rosen  <irar@il.ibm.com>\n \n \t* params.def (PARAM_MIN_VECT_LOOP_BOUND): Change default and minimum "}, {"sha": "5331fcd763aa09bd62eeaa426d5cb533ddd1d839", "filename": "gcc/tree-vect-transform.c", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f8f8fee8a29c116bf8fe29a93cc555b37835c8bd/gcc%2Ftree-vect-transform.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f8f8fee8a29c116bf8fe29a93cc555b37835c8bd/gcc%2Ftree-vect-transform.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-transform.c?ref=f8f8fee8a29c116bf8fe29a93cc555b37835c8bd", "patch": "@@ -1392,7 +1392,9 @@ vect_get_slp_vect_defs (slp_tree slp_node, VEC (tree,heap) **vec_oprnds)\n    call vect_get_constant_vectors() to create vector stmts.\n    Otherwise, the def-stmts must be already vectorized and the vectorized stmts\n    must be stored in the LEFT/RIGHT node of SLP_NODE, and we call\n-   vect_get_slp_vect_defs() to retrieve them.  */\n+   vect_get_slp_vect_defs() to retrieve them.  \n+   If VEC_OPRNDS1 is NULL, don't get vector defs for the second operand (from\n+   the right node. This is used when the second operand must remain scalar.  */\n  \n static void\n vect_get_slp_defs (slp_tree slp_node, VEC (tree,heap) **vec_oprnds0,\n@@ -1420,7 +1422,7 @@ vect_get_slp_defs (slp_tree slp_node, VEC (tree,heap) **vec_oprnds0,\n     return;\n \n   operation = GIMPLE_STMT_OPERAND (first_stmt, 1);\n-  if (TREE_OPERAND_LENGTH (operation) == unary_op)\n+  if (TREE_OPERAND_LENGTH (operation) == unary_op || !vec_oprnds1)\n     return;\n \n   *vec_oprnds1 = VEC_alloc (tree, heap, \n@@ -3891,11 +3893,9 @@ vectorizable_operation (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n   vec_dest = vect_create_destination_var (scalar_dest, vectype);\n \n   if (!slp_node)\n-    {\n-      vec_oprnds0 = VEC_alloc (tree, heap, 1);\n-      if (op_type == binary_op)\n-\tvec_oprnds1 = VEC_alloc (tree, heap, 1);\n-    }\n+    vec_oprnds0 = VEC_alloc (tree, heap, 1);\n+  if (op_type == binary_op)\n+    vec_oprnds1 = VEC_alloc (tree, heap, 1);\n \n   /* In case the vectorization factor (VF) is bigger than the number\n      of elements that we can fit in a vectype (nunits), we have to generate\n@@ -3957,8 +3957,7 @@ vectorizable_operation (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n       if (j == 0)\n \t{\n \t  if (op_type == binary_op\n-\t      && (code == LSHIFT_EXPR || code == RSHIFT_EXPR)\n-              && !slp_node)\n+\t      && (code == LSHIFT_EXPR || code == RSHIFT_EXPR))\n \t    {\n \t      /* Vector shl and shr insn patterns can be defined with scalar \n \t\t operand 2 (shift operand). In this case, use constant or loop \n@@ -3974,11 +3973,14 @@ vectorizable_operation (tree stmt, block_stmt_iterator *bsi, tree *vec_stmt,\n \t\t}\n \t    }\n \t \n+          /* vec_oprnd is available if operand 1 should be of a scalar-type \n+             (a special case for certain kind of vector shifts); otherwise, \n+             operand 1 should be of a vector type (the usual case).  */\n \t  if (op_type == binary_op && !vec_oprnd1)\n \t    vect_get_vec_defs (op0, op1, stmt, &vec_oprnds0, &vec_oprnds1, \n \t\t\t       slp_node);\n \t  else\n-\t    vect_get_vec_defs (op0, NULL_TREE, stmt, &vec_oprnds0, &vec_oprnds1, \n+\t    vect_get_vec_defs (op0, NULL_TREE, stmt, &vec_oprnds0, NULL, \n \t\t\t       slp_node);\n \t}\n       else"}]}