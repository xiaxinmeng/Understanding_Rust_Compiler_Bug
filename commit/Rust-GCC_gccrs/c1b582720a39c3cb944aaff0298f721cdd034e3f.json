{"sha": "c1b582720a39c3cb944aaff0298f721cdd034e3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFiNTgyNzIwYTM5YzNjYjk0NGFhZmYwMjk4ZjcyMWNkZDAzNGUzZg==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-09-30T16:20:41Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-09-30T16:20:41Z"}, "message": "Remove global call sets: function.c\n\nWhatever the rights and wrongs of the way aggregate_value_p\nhandles call-preserved registers, it's a de facto part of the ABI,\nso we shouldn't change it.  The patch simply extends the current\napproach to whatever call-preserved set the function happens to\nbe using.\n\n2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* function.c (aggregate_value_p): Work out which ABI the\n\tfunction is using before testing which registers are at least\n\tpartly preserved by a call.\n\nFrom-SVN: r276322", "tree": {"sha": "29a3346655262eb6b17660d9c0a6ef6e1d3103a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/29a3346655262eb6b17660d9c0a6ef6e1d3103a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1b582720a39c3cb944aaff0298f721cdd034e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b582720a39c3cb944aaff0298f721cdd034e3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1b582720a39c3cb944aaff0298f721cdd034e3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1b582720a39c3cb944aaff0298f721cdd034e3f/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1849569621d13c9c070c555f9463ad289afb8416", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1849569621d13c9c070c555f9463ad289afb8416", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1849569621d13c9c070c555f9463ad289afb8416"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "9d8b083d539c3d247952e191bed64a4fc192ab7e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b582720a39c3cb944aaff0298f721cdd034e3f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b582720a39c3cb944aaff0298f721cdd034e3f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1b582720a39c3cb944aaff0298f721cdd034e3f", "patch": "@@ -1,3 +1,9 @@\n+2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* function.c (aggregate_value_p): Work out which ABI the\n+\tfunction is using before testing which registers are at least\n+\tpartly preserved by a call.\n+\n 2019-09-30  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* early-remat.c: Include regs.h and function-abi.h."}, {"sha": "a1c76a4dd7a84554f746c6ab99717cfe54ed0390", "filename": "gcc/function.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1b582720a39c3cb944aaff0298f721cdd034e3f/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1b582720a39c3cb944aaff0298f721cdd034e3f/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=c1b582720a39c3cb944aaff0298f721cdd034e3f", "patch": "@@ -2120,10 +2120,17 @@ aggregate_value_p (const_tree exp, const_tree fntype)\n   if (!REG_P (reg))\n     return 0;\n \n+  /* Use the default ABI if the type of the function isn't known.\n+     The scheme for handling interoperability between different ABIs\n+     requires us to be able to tell when we're calling a function with\n+     a nondefault ABI.  */\n+  const predefined_function_abi &abi = (fntype\n+\t\t\t\t\t? fntype_abi (fntype)\n+\t\t\t\t\t: default_function_abi);\n   regno = REGNO (reg);\n   nregs = hard_regno_nregs (regno, TYPE_MODE (type));\n   for (i = 0; i < nregs; i++)\n-    if (! call_used_or_fixed_reg_p (regno + i))\n+    if (!fixed_regs[regno + i] && !abi.clobbers_full_reg_p (regno + i))\n       return 1;\n \n   return 0;"}]}