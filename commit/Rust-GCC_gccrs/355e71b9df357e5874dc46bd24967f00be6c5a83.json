{"sha": "355e71b9df357e5874dc46bd24967f00be6c5a83", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzU1ZTcxYjlkZjM1N2U1ODc0ZGM0NmJkMjQ5NjdmMDBiZTZjNWE4Mw==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-03-22T15:15:03Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-03-22T15:15:03Z"}, "message": "shared_ptr.h (operator>, [...]): Add, per DR 1401.\n\n2011-03-22  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* include/bits/shared_ptr.h (operator>, operator<=, operator>=): Add,\n\tper DR 1401.\n\t(operator==, operator!=, operator<): Fix per the letter of DR 1401.\n\t* include/bits/shared_ptr_base.h: Likewise for __shared_ptr.\n\t* include/bits/unique_ptr.h (operator==, operator!=, operator<,\n\toperator<=, operator>, operator>=): Fix per the letter of DR 1401.\n\t* testsuite/20_util/shared_ptr/comparison/dr1401.cc: New.\n\t* testsuite/20_util/unique_ptr/comparison/dr1401.cc: Likewise.\n\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust.\n\nFrom-SVN: r171293", "tree": {"sha": "9a783b37dac9ef3a9b4901e9f0bd00e0e725048e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9a783b37dac9ef3a9b4901e9f0bd00e0e725048e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/355e71b9df357e5874dc46bd24967f00be6c5a83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355e71b9df357e5874dc46bd24967f00be6c5a83", "html_url": "https://github.com/Rust-GCC/gccrs/commit/355e71b9df357e5874dc46bd24967f00be6c5a83", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/355e71b9df357e5874dc46bd24967f00be6c5a83/comments", "author": null, "committer": null, "parents": [{"sha": "043747b3b23af3762947f51ead3875c5a0635538", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/043747b3b23af3762947f51ead3875c5a0635538", "html_url": "https://github.com/Rust-GCC/gccrs/commit/043747b3b23af3762947f51ead3875c5a0635538"}], "stats": {"total": 400, "additions": 361, "deletions": 39}, "files": [{"sha": "3adde1d8eb0e9cf8b668b4508eb98a850a0fc0e2", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=355e71b9df357e5874dc46bd24967f00be6c5a83", "patch": "@@ -1,3 +1,15 @@\n+2011-03-22  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* include/bits/shared_ptr.h (operator>, operator<=, operator>=): Add,\n+\tper DR 1401.\n+\t(operator==, operator!=, operator<): Fix per the letter of DR 1401.\n+\t* include/bits/shared_ptr_base.h: Likewise for __shared_ptr.\n+\t* include/bits/unique_ptr.h (operator==, operator!=, operator<,\n+\toperator<=, operator>, operator>=): Fix per the letter of DR 1401.\n+\t* testsuite/20_util/shared_ptr/comparison/dr1401.cc: New.\n+\t* testsuite/20_util/unique_ptr/comparison/dr1401.cc: Likewise.\n+\t* testsuite/20_util/weak_ptr/comparison/cmp_neg.cc: Adjust.\n+\n 2011-03-22  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/abi/pre/gnu.ver (GLIBCXX_3.4.15): Export _ZNSsC2EOSs"}, {"sha": "490810cabf6f190ee88668f477bd3b4c813b6d85", "filename": "libstdc++-v3/include/bits/shared_ptr.h", "status": "modified", "additions": 76, "deletions": 12, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr.h?ref=355e71b9df357e5874dc46bd24967f00be6c5a83", "patch": "@@ -321,38 +321,102 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // 20.8.13.2.7 shared_ptr comparisons\n   template<typename _Tp1, typename _Tp2>\n     inline bool\n-    operator==(const shared_ptr<_Tp1>& __a, const shared_ptr<_Tp2>& __b)\n+    operator==(const shared_ptr<_Tp1>& __a,\n+\t       const shared_ptr<_Tp2>& __b) noexcept\n     { return __a.get() == __b.get(); }\n \n   template<typename _Tp>\n     inline bool\n-    operator==(const shared_ptr<_Tp>& __a, nullptr_t)\n-    { return __a.get() == nullptr; }\n+    operator==(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n+    { return !__a; }\n \n   template<typename _Tp>\n     inline bool\n-    operator==(nullptr_t, const shared_ptr<_Tp>& __b)\n-    { return nullptr == __b.get(); }\n+    operator==(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n+    { return !__a; }\n \n   template<typename _Tp1, typename _Tp2>\n     inline bool\n-    operator!=(const shared_ptr<_Tp1>& __a, const shared_ptr<_Tp2>& __b)\n+    operator!=(const shared_ptr<_Tp1>& __a,\n+\t       const shared_ptr<_Tp2>& __b) noexcept\n     { return __a.get() != __b.get(); }\n \n   template<typename _Tp>\n     inline bool\n-    operator!=(const shared_ptr<_Tp>& __a, nullptr_t)\n-    { return __a.get() != nullptr; }\n+    operator!=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n+    { return (bool)__a; }\n \n   template<typename _Tp>\n     inline bool\n-    operator!=(nullptr_t, const shared_ptr<_Tp>& __b)\n-    { return nullptr != __b.get(); }\n+    operator!=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n+    { return (bool)__a; }\n \n   template<typename _Tp1, typename _Tp2>\n     inline bool\n-    operator<(const shared_ptr<_Tp1>& __a, const shared_ptr<_Tp2>& __b)\n-    { return __a.get() < __b.get(); }\n+    operator<(const shared_ptr<_Tp1>& __a,\n+\t      const shared_ptr<_Tp2>& __b) noexcept\n+    {\n+      typedef typename std::common_type<_Tp1*, _Tp2*>::type _CT;\n+      return std::less<_CT>()(__a.get(), __b.get());\n+    }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator<(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n+    { return std::less<_Tp*>()(__a.get(), nullptr); }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator<(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n+    { return std::less<_Tp*>()(nullptr, __a.get()); }\n+\n+  template<typename _Tp1, typename _Tp2>\n+    inline bool\n+    operator<=(const shared_ptr<_Tp1>& __a,\n+\t       const shared_ptr<_Tp2>& __b) noexcept\n+    { return !(__b < __a); }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator<=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n+    { return !(nullptr < __a); }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator<=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n+    { return !(__a < nullptr); }\n+\n+  template<typename _Tp1, typename _Tp2>\n+    inline bool\n+    operator>(const shared_ptr<_Tp1>& __a,\n+\t      const shared_ptr<_Tp2>& __b) noexcept\n+    { return (__b < __a); }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator>(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n+    { return std::less<_Tp*>()(nullptr, __a.get()); }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator>(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n+    { return std::less<_Tp*>()(__a.get(), nullptr); }\n+\n+  template<typename _Tp1, typename _Tp2>\n+    inline bool\n+    operator>=(const shared_ptr<_Tp1>& __a,\n+\t       const shared_ptr<_Tp2>& __b) noexcept\n+    { return !(__a < __b); }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator>=(const shared_ptr<_Tp>& __a, nullptr_t) noexcept\n+    { return !(__a < nullptr); }\n+\n+  template<typename _Tp>\n+    inline bool\n+    operator>=(nullptr_t, const shared_ptr<_Tp>& __a) noexcept\n+    { return !(nullptr < __a); }\n \n   template<typename _Tp>\n     struct less<shared_ptr<_Tp>> : public _Sp_less<shared_ptr<_Tp>>"}, {"sha": "937e4f42784acb22b193e61b27e8676e9d80849e", "filename": "libstdc++-v3/include/bits/shared_ptr_base.h", "status": "modified", "additions": 73, "deletions": 12, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fshared_ptr_base.h?ref=355e71b9df357e5874dc46bd24967f00be6c5a83", "patch": "@@ -1051,40 +1051,101 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>\n     inline bool\n     operator==(const __shared_ptr<_Tp1, _Lp>& __a,\n-\t       const __shared_ptr<_Tp2, _Lp>& __b)\n+\t       const __shared_ptr<_Tp2, _Lp>& __b) noexcept\n     { return __a.get() == __b.get(); }\n \n   template<typename _Tp, _Lock_policy _Lp>\n     inline bool\n-    operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t)\n-    { return __a.get() == nullptr; }\n+    operator==(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n+    { return !__a; }\n \n   template<typename _Tp, _Lock_policy _Lp>\n     inline bool\n-    operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __b)\n-    { return nullptr == __b.get(); }\n+    operator==(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n+    { return !__a; }\n \n   template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>\n     inline bool\n     operator!=(const __shared_ptr<_Tp1, _Lp>& __a,\n-\t       const __shared_ptr<_Tp2, _Lp>& __b)\n+\t       const __shared_ptr<_Tp2, _Lp>& __b) noexcept\n     { return __a.get() != __b.get(); }\n \n   template<typename _Tp, _Lock_policy _Lp>\n     inline bool\n-    operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t)\n-    { return __a.get() != nullptr; }\n+    operator!=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n+    { return (bool)__a; }\n \n   template<typename _Tp, _Lock_policy _Lp>\n     inline bool\n-    operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __b)\n-    { return nullptr != __b.get(); }\n+    operator!=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n+    { return (bool)__a; }\n \n   template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>\n     inline bool\n     operator<(const __shared_ptr<_Tp1, _Lp>& __a,\n-\t      const __shared_ptr<_Tp2, _Lp>& __b)\n-    { return __a.get() < __b.get(); }\n+\t      const __shared_ptr<_Tp2, _Lp>& __b) noexcept\n+    {\n+      typedef typename std::common_type<_Tp1*, _Tp2*>::type _CT;\n+      return std::less<_CT>()(__a.get(), __b.get());\n+    }\n+\n+  template<typename _Tp, _Lock_policy _Lp>\n+    inline bool\n+    operator<(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n+    { return std::less<_Tp*>()(__a.get(), nullptr); }\n+\n+  template<typename _Tp, _Lock_policy _Lp>\n+    inline bool\n+    operator<(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n+    { return std::less<_Tp*>()(nullptr, __a.get()); }\n+\n+  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>\n+    inline bool\n+    operator<=(const __shared_ptr<_Tp1, _Lp>& __a,\n+\t       const __shared_ptr<_Tp2, _Lp>& __b) noexcept\n+    { return !(__b < __a); }\n+\n+  template<typename _Tp, _Lock_policy _Lp>\n+    inline bool\n+    operator<=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n+    { return !(nullptr < __a); }\n+\n+  template<typename _Tp, _Lock_policy _Lp>\n+    inline bool\n+    operator<=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n+    { return !(__a < nullptr); }\n+\n+  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>\n+    inline bool\n+    operator>(const __shared_ptr<_Tp1, _Lp>& __a,\n+\t      const __shared_ptr<_Tp2, _Lp>& __b) noexcept\n+    { return (__b < __a); }\n+\n+  template<typename _Tp, _Lock_policy _Lp>\n+    inline bool\n+    operator>(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n+    { return std::less<_Tp*>()(nullptr, __a.get()); }\n+\n+  template<typename _Tp, _Lock_policy _Lp>\n+    inline bool\n+    operator>(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n+    { return std::less<_Tp*>()(__a.get(), nullptr); }\n+\n+  template<typename _Tp1, typename _Tp2, _Lock_policy _Lp>\n+    inline bool\n+    operator>=(const __shared_ptr<_Tp1, _Lp>& __a,\n+\t       const __shared_ptr<_Tp2, _Lp>& __b) noexcept\n+    { return !(__a < __b); }\n+\n+  template<typename _Tp, _Lock_policy _Lp>\n+    inline bool\n+    operator>=(const __shared_ptr<_Tp, _Lp>& __a, nullptr_t) noexcept\n+    { return !(__a < nullptr); }\n+\n+  template<typename _Tp, _Lock_policy _Lp>\n+    inline bool\n+    operator>=(nullptr_t, const __shared_ptr<_Tp, _Lp>& __a) noexcept\n+    { return !(nullptr < __a); }\n \n   template<typename _Sp>\n     struct _Sp_less : public binary_function<_Sp, _Sp, bool>"}, {"sha": "1afc75bcb3f14dbfedc6a5e2b7a3b1ceea01334c", "filename": "libstdc++-v3/include/bits/unique_ptr.h", "status": "modified", "additions": 62, "deletions": 13, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Funique_ptr.h?ref=355e71b9df357e5874dc46bd24967f00be6c5a83", "patch": "@@ -435,58 +435,107 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _Tp, typename _Dp>\n     inline bool\n-    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n-    { return __x.get() == nullptr; }\n+    operator==(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n+    { return !__x; }\n \n   template<typename _Tp, typename _Dp>\n     inline bool\n-    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __y)\n-    { return nullptr == __y.get(); }\n+    operator==(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept\n+    { return !__x; }\n \n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     inline bool\n     operator!=(const unique_ptr<_Tp, _Dp>& __x,\n \t       const unique_ptr<_Up, _Ep>& __y)\n-    { return !(__x.get() == __y.get()); }\n+    { return __x.get() != __y.get(); }\n \n   template<typename _Tp, typename _Dp>\n     inline bool\n-    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n-    { return __x.get() != nullptr; }\n+    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept\n+    { return (bool)__x; }\n \n   template<typename _Tp, typename _Dp>\n     inline bool\n-    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __y)\n-    { return nullptr != __y.get(); }\n+    operator!=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x) noexcept\n+    { return (bool)__x; }\n \n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     inline bool\n     operator<(const unique_ptr<_Tp, _Dp>& __x,\n \t      const unique_ptr<_Up, _Ep>& __y)\n-    { return __x.get() < __y.get(); }\n+    {\n+      typedef typename\n+\tstd::common_type<typename unique_ptr<_Tp, _Dp>::pointer,\n+\t                 typename unique_ptr<_Up, _Ep>::pointer>::type _CT;\n+      return std::less<_CT>()(__x.get(), __y.get());\n+    }\n+\n+  template<typename _Tp, typename _Dp>\n+    inline bool\n+    operator<(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n+    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),\n+\t\t\t\t\t\t\t\t nullptr); }\n+\n+  template<typename _Tp, typename _Dp>\n+    inline bool\n+    operator<(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n+    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,\n+\t\t\t\t\t\t\t\t __x.get()); }\n \n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     inline bool\n     operator<=(const unique_ptr<_Tp, _Dp>& __x,\n \t       const unique_ptr<_Up, _Ep>& __y)\n-    { return !(__y.get() < __x.get()); }\n+    { return !(__y < __x); }\n+\n+  template<typename _Tp, typename _Dp>\n+    inline bool\n+    operator<=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n+    { return !(nullptr < __x); }\n+\n+  template<typename _Tp, typename _Dp>\n+    inline bool\n+    operator<=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n+    { return !(__x < nullptr); }\n \n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     inline bool\n     operator>(const unique_ptr<_Tp, _Dp>& __x,\n \t      const unique_ptr<_Up, _Ep>& __y)\n-    { return __y.get() < __x.get(); }\n+    { return (__y < __x); }\n+\n+  template<typename _Tp, typename _Dp>\n+    inline bool\n+    operator>(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n+    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(nullptr,\n+\t\t\t\t\t\t\t\t __x.get()); }\n+\n+  template<typename _Tp, typename _Dp>\n+    inline bool\n+    operator>(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n+    { return std::less<typename unique_ptr<_Tp, _Dp>::pointer>()(__x.get(),\n+\t\t\t\t\t\t\t\t nullptr); }\n \n   template<typename _Tp, typename _Dp,\n \t   typename _Up, typename _Ep>\n     inline bool\n     operator>=(const unique_ptr<_Tp, _Dp>& __x,\n \t       const unique_ptr<_Up, _Ep>& __y)\n-    { return !(__x.get() < __y.get()); }\n+    { return !(__x < __y); }\n+\n+  template<typename _Tp, typename _Dp>\n+    inline bool\n+    operator>=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t)\n+    { return !(__x < nullptr); }\n+\n+  template<typename _Tp, typename _Dp>\n+    inline bool\n+    operator>=(nullptr_t, const unique_ptr<_Tp, _Dp>& __x)\n+    { return !(nullptr < __x); }\n \n   /// std::hash specialization for unique_ptr.\n   template<typename _Tp, typename _Dp>"}, {"sha": "45f9b33e38e4d9dcabaa819e19d1500107ebbbd2", "filename": "libstdc++-v3/testsuite/20_util/shared_ptr/comparison/dr1401.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2Fdr1401.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2Fdr1401.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fshared_ptr%2Fcomparison%2Fdr1401.cc?ref=355e71b9df357e5874dc46bd24967f00be6c5a83", "patch": "@@ -0,0 +1,65 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.7.2.2 Class template shared_ptr [util.smartptr.shared]\n+\n+#include <memory>\n+\n+// DR 1401\n+void test01()\n+{\n+  std::shared_ptr<int> ptr1, ptr2;\n+  if (ptr1 == ptr2)\n+    { }\n+  if (ptr1 == nullptr)\n+    { }\n+  if (nullptr == ptr1)\n+    { }\n+  if (ptr1 != ptr2)\n+    { }\n+  if (ptr1 != nullptr)\n+    { }\n+  if (nullptr != ptr1)\n+    { }\n+  if (ptr1 < ptr2)\n+    { }\n+  if (ptr1 < nullptr)\n+    { }\n+  if (nullptr < ptr1)\n+    { }\n+  if (ptr1 <= ptr2)\n+    { }\n+  if (ptr1 <= nullptr)\n+    { }\n+  if (nullptr <= ptr1)\n+    { }\n+  if (ptr1 > ptr2)\n+    { }\n+  if (ptr1 > nullptr)\n+    { }\n+  if (nullptr > ptr1)\n+    { }\n+  if (ptr1 >= ptr2)\n+    { }\n+  if (ptr1 >= nullptr)\n+    { }\n+  if (nullptr >= ptr1)\n+    { }\n+}"}, {"sha": "fb3b352a9ca8f74408a521783225960154c35018", "filename": "libstdc++-v3/testsuite/20_util/unique_ptr/comparison/dr1401.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcomparison%2Fdr1401.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcomparison%2Fdr1401.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Funique_ptr%2Fcomparison%2Fdr1401.cc?ref=355e71b9df357e5874dc46bd24967f00be6c5a83", "patch": "@@ -0,0 +1,65 @@\n+// { dg-options \"-std=gnu++0x\" }\n+// { dg-do compile }\n+\n+// Copyright (C) 2011 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// 20.7.1 Class template unique_ptr [unique.ptr]\n+\n+#include <memory>\n+\n+// DR 1401\n+void test01()\n+{\n+  std::unique_ptr<int> ptr1, ptr2;\n+  if (ptr1 == ptr2)\n+    { }\n+  if (ptr1 == nullptr)\n+    { }\n+  if (nullptr == ptr1)\n+    { }\n+  if (ptr1 != ptr2)\n+    { }\n+  if (ptr1 != nullptr)\n+    { }\n+  if (nullptr != ptr1)\n+    { }\n+  if (ptr1 < ptr2)\n+    { }\n+  if (ptr1 < nullptr)\n+    { }\n+  if (nullptr < ptr1)\n+    { }\n+  if (ptr1 <= ptr2)\n+    { }\n+  if (ptr1 <= nullptr)\n+    { }\n+  if (nullptr <= ptr1)\n+    { }\n+  if (ptr1 > ptr2)\n+    { }\n+  if (ptr1 > nullptr)\n+    { }\n+  if (nullptr > ptr1)\n+    { }\n+  if (ptr1 >= ptr2)\n+    { }\n+  if (ptr1 >= nullptr)\n+    { }\n+  if (nullptr >= ptr1)\n+    { }\n+}"}, {"sha": "5990cfd4e1d3185b3ffa740c57e3d17a4d02b80c", "filename": "libstdc++-v3/testsuite/20_util/weak_ptr/comparison/cmp_neg.cc", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/355e71b9df357e5874dc46bd24967f00be6c5a83/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F20_util%2Fweak_ptr%2Fcomparison%2Fcmp_neg.cc?ref=355e71b9df357e5874dc46bd24967f00be6c5a83", "patch": "@@ -42,12 +42,18 @@ main()\n   return 0;\n }\n \n-// { dg-warning \"note\" \"\" { target *-*-* } 354 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 370 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 365 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 357 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 1099 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 1094 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1086 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 483 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 477 }\n // { dg-warning \"note\" \"\" { target *-*-* } 467 }\n // { dg-warning \"note\" \"\" { target *-*-* } 587 }\n-// { dg-warning \"note\" \"\" { target *-*-* } 1050 }\n // { dg-warning \"note\" \"\" { target *-*-* } 1056 }\n+// { dg-warning \"note\" \"\" { target *-*-* } 1050 }\n // { dg-warning \"note\" \"\" { target *-*-* } 342 }\n // { dg-warning \"note\" \"\" { target *-*-* } 292 }\n // { dg-warning \"note\" \"\" { target *-*-* } 207 }"}]}