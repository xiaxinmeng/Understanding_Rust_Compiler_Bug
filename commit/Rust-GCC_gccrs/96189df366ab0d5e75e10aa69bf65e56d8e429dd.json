{"sha": "96189df366ab0d5e75e10aa69bf65e56d8e429dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTYxODlkZjM2NmFiMGQ1ZTc1ZTEwYWE2OWJmNjVlNTZkOGU0MjlkZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2017-02-08T12:02:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2017-02-08T12:02:36Z"}, "message": "Update links and references in libstdc++ manual\n\n\t* doc/xml/manual/policy_data_structures.xml: Fix spelling of author's\n\tname.\n\t* doc/xml/manual/policy_data_structures_biblio.xml: Likewise. Remove\n\tbroken links to texts that are no longer online.\n\t* doc/xml/manual/profile_mode.xml: Update links to CGO 2009 paper and\n\tLCPC 2006 paper.\n\t* doc/xml/manual/using.xml: Update links to memory model information.\n\t* doc/xml/manual/using_exceptions.xml: Update link to \"Appendix E:\n\tStandard-Library Exception Safety\".\n\t* doc/html/*: Regenerate.\n\nFrom-SVN: r245277", "tree": {"sha": "d29cfc038cdcc6425991bb26a1ce129edb22f2fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d29cfc038cdcc6425991bb26a1ce129edb22f2fc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/96189df366ab0d5e75e10aa69bf65e56d8e429dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96189df366ab0d5e75e10aa69bf65e56d8e429dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96189df366ab0d5e75e10aa69bf65e56d8e429dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96189df366ab0d5e75e10aa69bf65e56d8e429dd/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9b99792d09a3b630a3422dcb903f7419acdc409", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9b99792d09a3b630a3422dcb903f7419acdc409", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9b99792d09a3b630a3422dcb903f7419acdc409"}], "stats": {"total": 374, "additions": 182, "deletions": 192}, "files": [{"sha": "df73c564201ed2a7f36c2bacab7d10cc675fd0fa", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -1,3 +1,16 @@\n+2017-02-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/policy_data_structures.xml: Fix spelling of author's\n+\tname.\n+\t* doc/xml/manual/policy_data_structures_biblio.xml: Likewise. Remove\n+\tbroken links to texts that are no longer online.\n+\t* doc/xml/manual/profile_mode.xml: Update links to CGO 2009 paper and\n+\tLCPC 2006 paper.\n+\t* doc/xml/manual/using.xml: Update links to memory model information.\n+\t* doc/xml/manual/using_exceptions.xml: Update link to \"Appendix E:\n+\tStandard-Library Exception Safety\".\n+\t* doc/html/*: Regenerate.\n+\n 2017-02-08  Gerald Pfeifer  <gerald@pfeifer.com>\n \n \t* doc/xml/manual/profile_mode.xml: Unbreak link to"}, {"sha": "3e619e8ec79873ae12819f4d4e7be633ae904891", "filename": "libstdc++-v3/doc/html/manual/abi.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fabi.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fabi.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fabi.html?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -544,7 +544,7 @@\n \tLinker and Libraries Guide (document 819-0690)\n \t</a>\n       </em>. </span></p></div><div class=\"biblioentry\"><a id=\"id-1.3.6.3.6.10.6\"></a><p><span class=\"title\"><em>\n-\t<a class=\"link\" href=\"http://download.oracle.com/docs/cd/E19422-01/819-3689/index.html\" target=\"_top\">\n+\t<a class=\"link\" href=\"http://docs.oracle.com/cd/E19422-01/819-3689/\" target=\"_top\">\n       Sun Studio 11: C++ Migration Guide (document 819-3689)\n \t</a>\n       </em>. </span></p></div><div class=\"biblioentry\"><a id=\"id-1.3.6.3.6.10.7\"></a><p><span class=\"title\"><em>"}, {"sha": "ac9b5dcdb47816f23f0a9362c5527bb918de157d", "filename": "libstdc++-v3/doc/html/manual/bugs.html", "status": "modified", "additions": 133, "deletions": 144, "changes": 277, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fbugs.html?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -15,267 +15,256 @@\n \tThe links are to the specific defect reports from a <span class=\"emphasis\"><em>partial\n \tcopy</em></span> of the Issues List.  You can read the full version online\n \tat the <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/\" target=\"_top\">ISO C++\n-\tCommittee homepage</a>, linked to on the\n-\t<a class=\"link\" href=\"http://gcc.gnu.org/readings.html\" target=\"_top\">GCC \"Readings\"\n-\tpage</a>.  If\n-\tyou spend a lot of time reading the issues, we recommend downloading\n-\tthe ZIP file and reading them locally.\n-      </p><p>\n-\t(NB: <span class=\"emphasis\"><em>partial copy</em></span> means that not all\n-\tlinks within the lwg-*.html pages will work.  Specifically,\n-\tlinks to defect reports that have not been accorded full DR\n-\tstatus will probably break.  Rather than trying to mirror the\n-\tentire issues list on our overworked web server, we recommend\n-\tyou go to the LWG homepage instead.)\n+\tCommittee homepage</a>.\n       </p><p>\n \tIf a DR is not listed here, we may simply not have gotten to\n \tit yet; feel free to submit a patch.  Search the include/bits\n \tand src directories for appearances of\n \t<code class=\"constant\">_GLIBCXX_RESOLVE_LIB_DEFECTS</code> for examples\n \tof style.  Note that we usually do not make changes to the\n-\tcode until an issue has reached <a class=\"link\" href=\"../ext/lwg-active.html#DR\" target=\"_top\">DR</a> status.\n-      </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#5\" target=\"_top\">5</a>:\n+\tcode until an issue has reached <a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#DR\" target=\"_top\">DR</a> status.\n+      </p><div class=\"variablelist\"><dl class=\"variablelist\"><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#5\" target=\"_top\">5</a>:\n \t<span class=\"emphasis\"><em>string::compare specification questionable</em></span>\n     </span></dt><dd><p>This should be two overloaded functions rather than a single function.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#17\" target=\"_top\">17</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#17\" target=\"_top\">17</a>:\n \t<span class=\"emphasis\"><em>Bad bool parsing</em></span>\n     </span></dt><dd><p>Apparently extracting Boolean values was messed up...\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#19\" target=\"_top\">19</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#19\" target=\"_top\">19</a>:\n \t<span class=\"emphasis\"><em>\"Noconv\" definition too vague</em></span>\n     </span></dt><dd><p>If <code class=\"code\">codecvt::do_in</code> returns <code class=\"code\">noconv</code> there are\n \tno changes to the values in <code class=\"code\">[to, to_limit)</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#22\" target=\"_top\">22</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#22\" target=\"_top\">22</a>:\n \t<span class=\"emphasis\"><em>Member open vs flags</em></span>\n     </span></dt><dd><p>Re-opening a file stream does <span class=\"emphasis\"><em>not</em></span> clear the state flags.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#23\" target=\"_top\">23</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#23\" target=\"_top\">23</a>:\n \t<span class=\"emphasis\"><em>Num_get overflow result</em></span>\n     </span></dt><dd><p>Implement the proposed resolution.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#25\" target=\"_top\">25</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#25\" target=\"_top\">25</a>:\n \t<span class=\"emphasis\"><em>String operator&lt;&lt; uses width() value wrong</em></span>\n     </span></dt><dd><p>Padding issues.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#48\" target=\"_top\">48</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#48\" target=\"_top\">48</a>:\n \t<span class=\"emphasis\"><em>Use of non-existent exception constructor</em></span>\n     </span></dt><dd><p>An instance of <code class=\"code\">ios_base::failure</code> is constructed instead.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#49\" target=\"_top\">49</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#49\" target=\"_top\">49</a>:\n \t<span class=\"emphasis\"><em>Underspecification of ios_base::sync_with_stdio</em></span>\n     </span></dt><dd><p>The return type is the <span class=\"emphasis\"><em>previous</em></span> state of synchronization.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#50\" target=\"_top\">50</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#50\" target=\"_top\">50</a>:\n \t<span class=\"emphasis\"><em>Copy constructor and assignment operator of ios_base</em></span>\n     </span></dt><dd><p>These members functions are declared <code class=\"code\">private</code> and are\n \tthus inaccessible.  Specifying the correct semantics of\n \t\"copying stream state\" was deemed too complicated.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#60\" target=\"_top\">60</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#60\" target=\"_top\">60</a>:\n \t<span class=\"emphasis\"><em>What is a formatted input function?</em></span>\n     </span></dt><dd><p>This DR made many widespread changes to <code class=\"code\">basic_istream</code>\n \tand <code class=\"code\">basic_ostream</code> all of which have been implemented.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#63\" target=\"_top\">63</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#63\" target=\"_top\">63</a>:\n \t<span class=\"emphasis\"><em>Exception-handling policy for unformatted output</em></span>\n     </span></dt><dd><p>Make the policy consistent with that of formatted input, unformatted\n \tinput, and formatted output.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#68\" target=\"_top\">68</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#68\" target=\"_top\">68</a>:\n \t<span class=\"emphasis\"><em>Extractors for char* should store null at end</em></span>\n     </span></dt><dd><p>And they do now.  An editing glitch in the last item in the list of\n \t[27.6.1.2.3]/7.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#74\" target=\"_top\">74</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#74\" target=\"_top\">74</a>:\n \t<span class=\"emphasis\"><em>Garbled text for codecvt::do_max_length</em></span>\n     </span></dt><dd><p>The text of the standard was gibberish.  Typos gone rampant.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#75\" target=\"_top\">75</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#75\" target=\"_top\">75</a>:\n \t<span class=\"emphasis\"><em>Contradiction in codecvt::length's argument types</em></span>\n     </span></dt><dd><p>Change the first parameter to <code class=\"code\">stateT&amp;</code> and implement\n \tthe new effects paragraph.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#83\" target=\"_top\">83</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#83\" target=\"_top\">83</a>:\n \t<span class=\"emphasis\"><em>string::npos vs. string::max_size()</em></span>\n     </span></dt><dd><p>Safety checks on the size of the string should test against\n \t<code class=\"code\">max_size()</code> rather than <code class=\"code\">npos</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#90\" target=\"_top\">90</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#90\" target=\"_top\">90</a>:\n \t<span class=\"emphasis\"><em>Incorrect description of operator&gt;&gt; for strings</em></span>\n     </span></dt><dd><p>The effect contain <code class=\"code\">isspace(c,getloc())</code> which must be\n \treplaced by <code class=\"code\">isspace(c,is.getloc())</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#91\" target=\"_top\">91</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#91\" target=\"_top\">91</a>:\n \t<span class=\"emphasis\"><em>Description of operator&gt;&gt; and getline() for string&lt;&gt;\n \t    might cause endless loop</em></span>\n     </span></dt><dd><p>They behave as a formatted input function and as an unformatted\n \tinput function, respectively (except that <code class=\"code\">getline</code> is\n \tnot required to set <code class=\"code\">gcount</code>).\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#103\" target=\"_top\">103</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#103\" target=\"_top\">103</a>:\n \t<span class=\"emphasis\"><em>set::iterator is required to be modifiable, but this allows\n \t    modification of keys.</em></span>\n     </span></dt><dd><p>For associative containers where the value type is the same as\n \tthe key type, both <code class=\"code\">iterator</code> and <code class=\"code\">const_iterator\n \t</code> are constant iterators.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#109\" target=\"_top\">109</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#109\" target=\"_top\">109</a>:\n \t<span class=\"emphasis\"><em>Missing binders for non-const sequence elements</em></span>\n     </span></dt><dd><p>The <code class=\"code\">binder1st</code> and <code class=\"code\">binder2nd</code> didn't have an\n \t<code class=\"code\">operator()</code> taking a non-const parameter.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#110\" target=\"_top\">110</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#110\" target=\"_top\">110</a>:\n \t<span class=\"emphasis\"><em>istreambuf_iterator::equal not const</em></span>\n     </span></dt><dd><p>This was not a const member function.  Note that the DR says to\n \treplace the function with a const one; we have instead provided an\n \toverloaded version with identical contents.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#117\" target=\"_top\">117</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#117\" target=\"_top\">117</a>:\n \t<span class=\"emphasis\"><em>basic_ostream uses nonexistent num_put member functions</em></span>\n     </span></dt><dd><p><code class=\"code\">num_put::put()</code> was overloaded on the wrong types.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#118\" target=\"_top\">118</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#118\" target=\"_top\">118</a>:\n \t<span class=\"emphasis\"><em>basic_istream uses nonexistent num_get member functions</em></span>\n     </span></dt><dd><p>Same as 117, but for <code class=\"code\">num_get::get()</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#129\" target=\"_top\">129</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#129\" target=\"_top\">129</a>:\n \t<span class=\"emphasis\"><em>Need error indication from seekp() and seekg()</em></span>\n     </span></dt><dd><p>These functions set <code class=\"code\">failbit</code> on error now.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#130\" target=\"_top\">130</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#130\" target=\"_top\">130</a>:\n \t<span class=\"emphasis\"><em>Return type of container::erase(iterator) differs for associative containers</em></span>\n     </span></dt><dd><p>Make member <code class=\"code\">erase</code> return iterator for <code class=\"code\">set</code>, <code class=\"code\">multiset</code>, <code class=\"code\">map</code>, <code class=\"code\">multimap</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#136\" target=\"_top\">136</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#136\" target=\"_top\">136</a>:\n \t<span class=\"emphasis\"><em>seekp, seekg setting wrong streams?</em></span>\n     </span></dt><dd><p><code class=\"code\">seekp</code> should only set the output stream, and\n \t<code class=\"code\">seekg</code> should only set the input stream.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#167\" target=\"_top\">167</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#167\" target=\"_top\">167</a>:\n \t<span class=\"emphasis\"><em>Improper use of traits_type::length()</em></span>\n     </span></dt><dd><p><code class=\"code\">op&lt;&lt;</code> with a <code class=\"code\">const char*</code> was\n \tcalculating an incorrect number of characters to write.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#169\" target=\"_top\">169</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#169\" target=\"_top\">169</a>:\n \t<span class=\"emphasis\"><em>Bad efficiency of overflow() mandated</em></span>\n     </span></dt><dd><p>Grow efficiently the internal array object.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#171\" target=\"_top\">171</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#171\" target=\"_top\">171</a>:\n \t<span class=\"emphasis\"><em>Strange seekpos() semantics due to joint position</em></span>\n     </span></dt><dd><p>Quite complex to summarize...\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#181\" target=\"_top\">181</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#181\" target=\"_top\">181</a>:\n \t<span class=\"emphasis\"><em>make_pair() unintended behavior</em></span>\n     </span></dt><dd><p>This function used to take its arguments as reference-to-const, now\n \tit copies them (pass by value).\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#195\" target=\"_top\">195</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#195\" target=\"_top\">195</a>:\n \t<span class=\"emphasis\"><em>Should basic_istream::sentry's constructor ever set eofbit?</em></span>\n     </span></dt><dd><p>Yes, it can, specifically if EOF is reached while skipping whitespace.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#211\" target=\"_top\">211</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#211\" target=\"_top\">211</a>:\n \t<span class=\"emphasis\"><em>operator&gt;&gt;(istream&amp;, string&amp;) doesn't set failbit</em></span>\n     </span></dt><dd><p>If nothing is extracted into the string, <code class=\"code\">op&gt;&gt;</code> now\n \tsets <code class=\"code\">failbit</code> (which can cause an exception, etc., etc.).\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#214\" target=\"_top\">214</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#214\" target=\"_top\">214</a>:\n \t<span class=\"emphasis\"><em>set::find() missing const overload</em></span>\n     </span></dt><dd><p>Both <code class=\"code\">set</code> and <code class=\"code\">multiset</code> were missing\n \toverloaded find, lower_bound, upper_bound, and equal_range functions\n \tfor const instances.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#231\" target=\"_top\">231</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#231\" target=\"_top\">231</a>:\n \t<span class=\"emphasis\"><em>Precision in iostream?</em></span>\n     </span></dt><dd><p>For conversion from a floating-point type, <code class=\"code\">str.precision()</code>\n \tis specified in the conversion specification.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#233\" target=\"_top\">233</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#233\" target=\"_top\">233</a>:\n \t<span class=\"emphasis\"><em>Insertion hints in associative containers</em></span>\n     </span></dt><dd><p>Implement N1780, first check before then check after, insert as close\n \tto hint as possible.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#235\" target=\"_top\">235</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#235\" target=\"_top\">235</a>:\n \t<span class=\"emphasis\"><em>No specification of default ctor for reverse_iterator</em></span>\n     </span></dt><dd><p>The declaration of <code class=\"code\">reverse_iterator</code> lists a default constructor.\n \tHowever, no specification is given what this constructor should do.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#241\" target=\"_top\">241</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#241\" target=\"_top\">241</a>:\n \t<span class=\"emphasis\"><em>Does unique_copy() require CopyConstructible and Assignable?</em></span>\n     </span></dt><dd><p>Add a helper for forward_iterator/output_iterator, fix the existing\n \tone for input_iterator/output_iterator to not rely on Assignability.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#243\" target=\"_top\">243</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#243\" target=\"_top\">243</a>:\n \t<span class=\"emphasis\"><em>get and getline when sentry reports failure</em></span>\n     </span></dt><dd><p>Store a null character only if the character array has a non-zero size.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#251\" target=\"_top\">251</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#251\" target=\"_top\">251</a>:\n \t<span class=\"emphasis\"><em>basic_stringbuf missing allocator_type</em></span>\n     </span></dt><dd><p>This nested typedef was originally not specified.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#253\" target=\"_top\">253</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#253\" target=\"_top\">253</a>:\n \t<span class=\"emphasis\"><em>valarray helper functions are almost entirely useless</em></span>\n     </span></dt><dd><p>Make the copy constructor and copy-assignment operator declarations\n \tpublic in gslice_array, indirect_array, mask_array, slice_array; provide\n \tdefinitions.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#265\" target=\"_top\">265</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#265\" target=\"_top\">265</a>:\n \t<span class=\"emphasis\"><em>std::pair::pair() effects overly restrictive</em></span>\n     </span></dt><dd><p>The default ctor would build its members from copies of temporaries;\n \tnow it simply uses their respective default ctors.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#266\" target=\"_top\">266</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#266\" target=\"_top\">266</a>:\n \t<span class=\"emphasis\"><em>bad_exception::~bad_exception() missing Effects clause</em></span>\n     </span></dt><dd><p>The <code class=\"code\">bad_</code>* classes no longer have destructors (they\n \tare trivial), since no description of them was ever given.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#271\" target=\"_top\">271</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#271\" target=\"_top\">271</a>:\n \t<span class=\"emphasis\"><em>basic_iostream missing typedefs</em></span>\n     </span></dt><dd><p>The typedefs it inherits from its base classes can't be used, since\n \t(for example) <code class=\"code\">basic_iostream&lt;T&gt;::traits_type</code> is ambiguous.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#275\" target=\"_top\">275</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#275\" target=\"_top\">275</a>:\n \t<span class=\"emphasis\"><em>Wrong type in num_get::get() overloads</em></span>\n     </span></dt><dd><p>Similar to 118.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#280\" target=\"_top\">280</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#280\" target=\"_top\">280</a>:\n \t<span class=\"emphasis\"><em>Comparison of reverse_iterator to const reverse_iterator</em></span>\n     </span></dt><dd><p>Add global functions with two template parameters.\n \t(NB: not added for now a templated assignment operator)\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#292\" target=\"_top\">292</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#292\" target=\"_top\">292</a>:\n \t<span class=\"emphasis\"><em>Effects of a.copyfmt (a)</em></span>\n     </span></dt><dd><p>If <code class=\"code\">(this == &amp;rhs)</code> do nothing.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#300\" target=\"_top\">300</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#300\" target=\"_top\">300</a>:\n \t<span class=\"emphasis\"><em>List::merge() specification incomplete</em></span>\n     </span></dt><dd><p>If <code class=\"code\">(this == &amp;x)</code> do nothing.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#303\" target=\"_top\">303</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#303\" target=\"_top\">303</a>:\n \t<span class=\"emphasis\"><em>Bitset input operator underspecified</em></span>\n     </span></dt><dd><p>Basically, compare the input character to\n \t\t    <code class=\"code\">is.widen(0)</code> and <code class=\"code\">is.widen(1)</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#305\" target=\"_top\">305</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#305\" target=\"_top\">305</a>:\n \t<span class=\"emphasis\"><em>Default behavior of codecvt&lt;wchar_t, char,\n \t\t  mbstate_t&gt;::length()</em></span>\n     </span></dt><dd><p>Do not specify what <code class=\"code\">codecvt&lt;wchar_t, char,\n \t\t    mbstate_t&gt;::do_length</code> must return.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#328\" target=\"_top\">328</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#328\" target=\"_top\">328</a>:\n \t<span class=\"emphasis\"><em>Bad sprintf format modifier in\n \t\t  money_put&lt;&gt;::do_put()</em></span>\n     </span></dt><dd><p>Change the format string to \"%.0Lf\".\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#365\" target=\"_top\">365</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#365\" target=\"_top\">365</a>:\n \t<span class=\"emphasis\"><em>Lack of const-qualification in clause 27</em></span>\n     </span></dt><dd><p>Add const overloads of <code class=\"code\">is_open</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#387\" target=\"_top\">387</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#387\" target=\"_top\">387</a>:\n \t<span class=\"emphasis\"><em>std::complex over-encapsulated</em></span>\n     </span></dt><dd><p>Add the <code class=\"code\">real(T)</code> and <code class=\"code\">imag(T)</code>\n \t\t    members;  in C++11 mode, also adjust the existing\n \t\t    <code class=\"code\">real()</code> and <code class=\"code\">imag()</code> members and\n \t\t    free functions.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#389\" target=\"_top\">389</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#389\" target=\"_top\">389</a>:\n \t<span class=\"emphasis\"><em>Const overload of valarray::operator[] returns\n \t\t  by value</em></span>\n     </span></dt><dd><p>Change it to return a <code class=\"code\">const T&amp;</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#396\" target=\"_top\">396</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#396\" target=\"_top\">396</a>:\n \t<span class=\"emphasis\"><em>what are characters zero and one</em></span>\n     </span></dt><dd><p>Implement the proposed resolution.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#402\" target=\"_top\">402</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#402\" target=\"_top\">402</a>:\n \t<span class=\"emphasis\"><em>Wrong new expression in [some_]allocator::construct</em></span>\n     </span></dt><dd><p>Replace \"new\" with \"::new\".\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#408\" target=\"_top\">408</a>:\n \t<span class=\"emphasis\"><em>\n \tIs vector&lt;reverse_iterator&lt;char*&gt; &gt; forbidden?\n \t</em></span>\n     </span></dt><dd><p>Tweak the debug-mode checks in _Safe_iterator.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#409\" target=\"_top\">409</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#409\" target=\"_top\">409</a>:\n \t<span class=\"emphasis\"><em>Closing an fstream should clear the error state</em></span>\n     </span></dt><dd><p>Have <code class=\"code\">open</code> clear the error flags.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#431\" target=\"_top\">431</a>:\n \t<span class=\"emphasis\"><em>Swapping containers with unequal allocators</em></span>\n     </span></dt><dd><p>Implement Option 3, as per N1599.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#432\" target=\"_top\">432</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#432\" target=\"_top\">432</a>:\n \t<span class=\"emphasis\"><em>stringbuf::overflow() makes only one write position\n \t    available</em></span>\n     </span></dt><dd><p>Implement the resolution, beyond DR 169.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#434\" target=\"_top\">434</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#434\" target=\"_top\">434</a>:\n \t<span class=\"emphasis\"><em>bitset::to_string() hard to use</em></span>\n     </span></dt><dd><p>Add three overloads, taking fewer template arguments.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#438\" target=\"_top\">438</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#438\" target=\"_top\">438</a>:\n \t<span class=\"emphasis\"><em>Ambiguity in the \"do the right thing\" clause</em></span>\n     </span></dt><dd><p>Implement the resolution, basically cast less.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#445\" target=\"_top\">445</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#445\" target=\"_top\">445</a>:\n \t<span class=\"emphasis\"><em>iterator_traits::reference unspecified for some iterator categories</em></span>\n     </span></dt><dd><p>Change <code class=\"code\">istreambuf_iterator::reference</code> in C++11 mode.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#453\" target=\"_top\">453</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#453\" target=\"_top\">453</a>:\n \t<span class=\"emphasis\"><em>basic_stringbuf::seekoff need not always fail for an empty stream</em></span>\n     </span></dt><dd><p>Don't fail if the next pointer is null and newoff is zero.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#455\" target=\"_top\">455</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#455\" target=\"_top\">455</a>:\n \t<span class=\"emphasis\"><em>cerr::tie() and wcerr::tie() are overspecified</em></span>\n     </span></dt><dd><p>Initialize cerr tied to cout and wcerr tied to wcout.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#464\" target=\"_top\">464</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#464\" target=\"_top\">464</a>:\n \t<span class=\"emphasis\"><em>Suggestion for new member functions in standard containers</em></span>\n     </span></dt><dd><p>Add <code class=\"code\">data()</code> to <code class=\"code\">std::vector</code> and\n \t<code class=\"code\">at(const key_type&amp;)</code> to <code class=\"code\">std::map</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#467\" target=\"_top\">467</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#467\" target=\"_top\">467</a>:\n \t<span class=\"emphasis\"><em>char_traits::lt(), compare(), and memcmp()</em></span>\n     </span></dt><dd><p>Change <code class=\"code\">lt</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#508\" target=\"_top\">508</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#508\" target=\"_top\">508</a>:\n \t<span class=\"emphasis\"><em>Bad parameters for ranlux64_base_01</em></span>\n     </span></dt><dd><p>Fix the parameters.\n     </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-closed.html#512\" target=\"_top\">512</a>:\n@@ -285,231 +274,231 @@\n \t<span class=\"emphasis\"><em>Is it undefined if a function in the standard changes in\n \t    parameters?</em></span>\n     </span></dt><dd><p>Use &amp;value.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#538\" target=\"_top\">538</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#538\" target=\"_top\">538</a>:\n \t<span class=\"emphasis\"><em>241 again: Does unique_copy() require CopyConstructible\n \t    and Assignable?</em></span>\n     </span></dt><dd><p>In case of input_iterator/output_iterator rely on Assignability of\n \tinput_iterator' value_type.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#539\" target=\"_top\">539</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#539\" target=\"_top\">539</a>:\n \t<span class=\"emphasis\"><em>partial_sum and adjacent_difference should mention\n \t    requirements</em></span>\n     </span></dt><dd><p>We were almost doing the right thing, just use std::move\n \tin adjacent_difference.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#541\" target=\"_top\">541</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#541\" target=\"_top\">541</a>:\n \t<span class=\"emphasis\"><em>shared_ptr template assignment and void</em></span>\n     </span></dt><dd><p>Add an auto_ptr&lt;void&gt; specialization.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#543\" target=\"_top\">543</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#543\" target=\"_top\">543</a>:\n \t<span class=\"emphasis\"><em>valarray slice default constructor</em></span>\n     </span></dt><dd><p>Follow the straightforward proposed resolution.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#550\" target=\"_top\">550</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#550\" target=\"_top\">550</a>:\n \t<span class=\"emphasis\"><em>What should the return type of pow(float,int) be?</em></span>\n     </span></dt><dd><p>In C++11 mode, remove the pow(float,int), etc., signatures.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#586\" target=\"_top\">586</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#586\" target=\"_top\">586</a>:\n \t<span class=\"emphasis\"><em>string inserter not a formatted function</em></span>\n     </span></dt><dd><p>Change it to be a formatted output function (i.e. catch exceptions).\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#596\" target=\"_top\">596</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#596\" target=\"_top\">596</a>:\n \t<span class=\"emphasis\"><em>27.8.1.3 Table 112 omits \"a+\" and \"a+b\" modes</em></span>\n     </span></dt><dd><p>Add the missing modes to fopen_mode.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#630\" target=\"_top\">630</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#630\" target=\"_top\">630</a>:\n \t<span class=\"emphasis\"><em>arrays of valarray</em></span>\n     </span></dt><dd><p>Implement the simple resolution.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#660\" target=\"_top\">660</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#660\" target=\"_top\">660</a>:\n \t<span class=\"emphasis\"><em>Missing bitwise operations</em></span>\n     </span></dt><dd><p>Add the missing operations.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#691\" target=\"_top\">691</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#691\" target=\"_top\">691</a>:\n \t<span class=\"emphasis\"><em>const_local_iterator cbegin, cend missing from TR1</em></span>\n     </span></dt><dd><p>In C++11 mode add cbegin(size_type) and cend(size_type)\n \t\t    to the unordered containers.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#693\" target=\"_top\">693</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#693\" target=\"_top\">693</a>:\n \t<span class=\"emphasis\"><em>std::bitset::all() missing</em></span>\n     </span></dt><dd><p>Add it, consistently with the discussion.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#695\" target=\"_top\">695</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#695\" target=\"_top\">695</a>:\n \t<span class=\"emphasis\"><em>ctype&lt;char&gt;::classic_table() not accessible</em></span>\n     </span></dt><dd><p>Make the member functions table and classic_table public.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#696\" target=\"_top\">696</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#696\" target=\"_top\">696</a>:\n \t<span class=\"emphasis\"><em>istream::operator&gt;&gt;(int&amp;) broken</em></span>\n     </span></dt><dd><p>Implement the straightforward resolution.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#761\" target=\"_top\">761</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#761\" target=\"_top\">761</a>:\n \t<span class=\"emphasis\"><em>unordered_map needs an at() member function</em></span>\n     </span></dt><dd><p>In C++11 mode, add at() and at() const.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#775\" target=\"_top\">775</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#775\" target=\"_top\">775</a>:\n \t<span class=\"emphasis\"><em>Tuple indexing should be unsigned?</em></span>\n     </span></dt><dd><p>Implement the int -&gt; size_t replacements.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#776\" target=\"_top\">776</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#776\" target=\"_top\">776</a>:\n \t<span class=\"emphasis\"><em>Undescribed assign function of std::array</em></span>\n     </span></dt><dd><p>In C++11 mode, remove assign, add fill.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#781\" target=\"_top\">781</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#781\" target=\"_top\">781</a>:\n \t<span class=\"emphasis\"><em>std::complex should add missing C99 functions</em></span>\n     </span></dt><dd><p>In C++11 mode, add std::proj.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#809\" target=\"_top\">809</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#809\" target=\"_top\">809</a>:\n \t<span class=\"emphasis\"><em>std::swap should be overloaded for array types</em></span>\n     </span></dt><dd><p>Add the overload.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#853\" target=\"_top\">853</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#853\" target=\"_top\">853</a>:\n \t<span class=\"emphasis\"><em>to_string needs updating with zero and one</em></span>\n     </span></dt><dd><p>Update / add the signatures.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#865\" target=\"_top\">865</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#865\" target=\"_top\">865</a>:\n \t<span class=\"emphasis\"><em>More algorithms that throw away information</em></span>\n     </span></dt><dd><p>The traditional HP / SGI return type and value is blessed\n \t\t    by the resolution of the DR.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#1339\" target=\"_top\">1339</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#1339\" target=\"_top\">1339</a>:\n        <span class=\"emphasis\"><em>uninitialized_fill_n should return the end of its range</em></span>\n     </span></dt><dd><p>Return the end of the filled range.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2021\" target=\"_top\">2021</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2021\" target=\"_top\">2021</a>:\n        <span class=\"emphasis\"><em>Further incorrect uses of <code class=\"code\">result_of</code></em></span>\n     </span></dt><dd><p>Correctly decay types in signature of <code class=\"code\">std::async</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2049\" target=\"_top\">2049</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2049\" target=\"_top\">2049</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">is_destructible</code> underspecified</em></span>\n     </span></dt><dd><p>Handle non-object types.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2056\" target=\"_top\">2056</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2056\" target=\"_top\">2056</a>:\n \t<span class=\"emphasis\"><em>future_errc enums start with value 0 (invalid value for broken_promise)</em></span>\n     </span></dt><dd><p>Reorder enumerators.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2059\" target=\"_top\">2059</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2059\" target=\"_top\">2059</a>:\n \t<span class=\"emphasis\"><em>C++0x ambiguity problem with map::erase</em></span>\n     </span></dt><dd><p>Add additional overloads.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2062\" target=\"_top\">2062</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2062\" target=\"_top\">2062</a>:\n \t<span class=\"emphasis\"><em>2062. Effect contradictions w/o no-throw guarantee of <code class=\"code\">std::function</code> swaps</em></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code> to swap functions.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2063\" target=\"_top\">2063</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2063\" target=\"_top\">2063</a>:\n \t<span class=\"emphasis\"><em>Contradictory requirements for string move assignment</em></span>\n     </span></dt><dd><p>Respect propagation trait for move assignment.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2064\" target=\"_top\">2064</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2064\" target=\"_top\">2064</a>:\n \t<span class=\"emphasis\"><em>More noexcept issues in basic_string</em></span>\n     </span></dt><dd><p>Add noexcept to the comparison operators.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2067\" target=\"_top\">2067</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2067\" target=\"_top\">2067</a>:\n \t<span class=\"emphasis\"><em>packaged_task should have deleted copy c'tor with const parameter</em></span>\n     </span></dt><dd><p>Fix signatures.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2101\" target=\"_top\">2101</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2101\" target=\"_top\">2101</a>:\n \t<span class=\"emphasis\"><em>Some transformation types can produce impossible types</em></span>\n     </span></dt><dd><p>Use the referenceable type concept.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2106\" target=\"_top\">2106</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2106\" target=\"_top\">2106</a>:\n \t<span class=\"emphasis\"><em>move_iterator wrapping iterators returning prvalues</em></span>\n     </span></dt><dd><p>Change the <code class=\"code\">reference</code> type.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2108\" target=\"_top\">2108</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2108\" target=\"_top\">2108</a>:\n \t<span class=\"emphasis\"><em>No way to identify allocator types that always compare equal</em></span>\n     </span></dt><dd><p>Define and use <code class=\"code\">is_always_equal</code> even for C++11.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2118\" target=\"_top\">2118</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2118\" target=\"_top\">2118</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">unique_ptr</code> for array does not support cv qualification conversion of actual argument</em></span>\n     </span></dt><dd><p>Adjust constraints to allow safe conversions.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2127\" target=\"_top\">2127</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2127\" target=\"_top\">2127</a>:\n \t<span class=\"emphasis\"><em>Move-construction with <code class=\"code\">raw_storage_iterator</code></em></span>\n     </span></dt><dd><p>Add assignment operator taking an rvalue.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2132\" target=\"_top\">2132</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2132\" target=\"_top\">2132</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">std::function</code> ambiguity</em></span>\n     </span></dt><dd><p>Constrain the constructor to only accept callable types.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2141\" target=\"_top\">2141</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2141\" target=\"_top\">2141</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">common_type</code> trait produces reference types</em></span>\n     </span></dt><dd><p>Use <code class=\"code\">decay</code> for the result type.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2144\" target=\"_top\">2144</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2144\" target=\"_top\">2144</a>:\n \t<span class=\"emphasis\"><em>Missing <code class=\"code\">noexcept</code> specification in <code class=\"code\">type_index</code></em></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code>\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2145\" target=\"_top\">2145</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2145\" target=\"_top\">2145</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">error_category</code> default constructor</em></span>\n     </span></dt><dd><p>Declare a public constexpr constructor.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2162\" target=\"_top\">2162</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2162\" target=\"_top\">2162</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">allocator_traits::max_size</code> missing <code class=\"code\">noexcept</code></em></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2187\" target=\"_top\">2187</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2187\" target=\"_top\">2187</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">vector&lt;bool&gt;</code> is missing <code class=\"code\">emplace</code> and <code class=\"code\">emplace_back</code> member functions</em></span>\n     </span></dt><dd><p>Add <code class=\"code\">emplace</code> and <code class=\"code\">emplace_back</code> member functions.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2192\" target=\"_top\">2192</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2192\" target=\"_top\">2192</a>:\n \t<span class=\"emphasis\"><em>Validity and return type of <code class=\"code\">std::abs(0u)</code> is unclear</em></span>\n     </span></dt><dd><p>Move all declarations to a common header and remove the\n     generic <code class=\"code\">abs</code> which accepted unsigned arguments.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2196\" target=\"_top\">2196</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2196\" target=\"_top\">2196</a>:\n \t<span class=\"emphasis\"><em>Specification of <code class=\"code\">is_*[copy/move]_[constructible/assignable]</code> unclear for non-referencable types</em></span>\n     </span></dt><dd><p>Use the referenceable type concept.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2212\" target=\"_top\">2212</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2212\" target=\"_top\">2212</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">tuple_size</code> for <code class=\"code\">const pair</code> request <code class=\"code\">&lt;tuple&gt;</code> header</em></span>\n     </span></dt><dd><p>The <code class=\"code\">tuple_size</code> and <code class=\"code\">tuple_element</code>\n     partial specializations are defined in <code class=\"code\">&lt;utility&gt;</code> which\n     is included by <code class=\"code\">&lt;array&gt;</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2296\" target=\"_top\">2296</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2296\" target=\"_top\">2296</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">std::addressof</code> should be constexpr</em></span>\n     </span></dt><dd><p>Use <code class=\"code\">__builtin_addressof</code> and add\n     <code class=\"code\">constexpr</code> to <code class=\"code\">addressof</code> for C++17 and later.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2313\" target=\"_top\">2313</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2313\" target=\"_top\">2313</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">tuple_size</code> should always derive from <code class=\"code\">integral_constant&lt;size_t, N&gt;</code></em></span>\n     </span></dt><dd><p>Update definitions of the partial specializations for const and volatile types.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2328\" target=\"_top\">2328</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2328\" target=\"_top\">2328</a>:\n        <span class=\"emphasis\"><em>Rvalue stream extraction should use perfect forwarding</em></span>\n     </span></dt><dd><p>Use perfect forwarding for right operand.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2329\" target=\"_top\">2329</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2329\" target=\"_top\">2329</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">regex_match()/regex_search()</code> with <code class=\"code\">match_results</code> should forbid temporary strings</em></span>\n     </span></dt><dd><p>Add deleted overloads for rvalue strings.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2332\" target=\"_top\">2332</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2332\" target=\"_top\">2332</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">regex_iterator/regex_token_iterator</code> should forbid temporary regexes</em></span>\n     </span></dt><dd><p>Add deleted constructors.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2399\" target=\"_top\">2399</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2399\" target=\"_top\">2399</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">shared_ptr</code>'s constructor from <code class=\"code\">unique_ptr</code> should be constrained</em></span>\n     </span></dt><dd><p>Constrain the constructor to require convertibility.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2400\" target=\"_top\">2400</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2400\" target=\"_top\">2400</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">shared_ptr</code>'s <code class=\"code\">get_deleter()</code> should use <code class=\"code\">addressof()</code></em></span>\n     </span></dt><dd><p>Use <code class=\"code\">addressof</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2401\" target=\"_top\">2401</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2401\" target=\"_top\">2401</a>:\n \t<span class=\"emphasis\"><em><code class=\"code\">std::function</code> needs more <code class=\"code\">noexcept</code></em></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code> to the assignment and comparisons.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2407\" target=\"_top\">2407</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2407\" target=\"_top\">2407</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">packaged_task(allocator_arg_t, const Allocator&amp;, F&amp;&amp;)</code>\n                  should neither be constrained nor <code class=\"code\">explicit</code>\n        </em></span>\n     </span></dt><dd><p>Remove <code class=\"code\">explicit</code> from the constructor.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2415\" target=\"_top\">2415</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2415\" target=\"_top\">2415</a>:\n        <span class=\"emphasis\"><em>Inconsistency between <code class=\"code\">unique_ptr</code> and <code class=\"code\">shared_ptr</code></em></span>\n     </span></dt><dd><p>Create empty an <code class=\"code\">shared_ptr</code> from an empty\n                     <code class=\"code\">unique_ptr</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2418\" target=\"_top\">2418</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2418\" target=\"_top\">2418</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">apply</code> does not work with member pointers</em></span>\n     </span></dt><dd><p>Use <code class=\"code\">mem_fn</code> for member pointers.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2440\" target=\"_top\">2440</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2440\" target=\"_top\">2440</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">seed_seq::size()</code> should be <code class=\"code\">noexcept</code></em></span>\n     </span></dt><dd><p>Add <code class=\"code\">noexcept</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2441\" target=\"_top\">2441</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2441\" target=\"_top\">2441</a>:\n        <span class=\"emphasis\"><em>Exact-width atomic typedefs should be provided</em></span>\n     </span></dt><dd><p>Define the typedefs.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2442\" target=\"_top\">2442</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2442\" target=\"_top\">2442</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">call_once()</code> shouldn't <code class=\"code\">DECAY_COPY()</code></em></span>\n     </span></dt><dd><p>Remove indirection through call wrapper that made copies\n     of arguments and forward arguments straight to <code class=\"code\">std::invoke</code>.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2454\" target=\"_top\">2454</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2454\" target=\"_top\">2454</a>:\n        <span class=\"emphasis\"><em>Add <code class=\"code\">raw_storage_iterator::base()</code> member\n        </em></span>\n     </span></dt><dd><p>Add the <code class=\"code\">base()</code> member function.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2455\" target=\"_top\">2455</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2455\" target=\"_top\">2455</a>:\n        <span class=\"emphasis\"><em>Allocator default construction should be allowed to throw\n        </em></span>\n     </span></dt><dd><p>Make <code class=\"code\">noexcept</code> specifications conditional.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2458\" target=\"_top\">2458</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2458\" target=\"_top\">2458</a>:\n        <span class=\"emphasis\"><em>N3778 and new library deallocation signatures\n        </em></span>\n     </span></dt><dd><p>Remove unused overloads.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2459\" target=\"_top\">2459</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2459\" target=\"_top\">2459</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">std::polar</code> should require a non-negative rho\n        </em></span>\n     </span></dt><dd><p>Add debug mode assertion.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2466\" target=\"_top\">2466</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2466\" target=\"_top\">2466</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">allocator_traits::max_size()</code> default behavior is incorrect\n        </em></span>\n     </span></dt><dd><p>Divide by the object type.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2484\" target=\"_top\">2484</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2484\" target=\"_top\">2484</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">rethrow_if_nested()</code>  is doubly unimplementable\n        </em></span>\n     </span></dt><dd><p>Avoid using <code class=\"code\">dynamic_cast</code> when it would be\n     ill-formed.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2583\" target=\"_top\">2583</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2583\" target=\"_top\">2583</a>:\n        <span class=\"emphasis\"><em>There is no way to supply an allocator for <code class=\"code\">basic_string(str, pos)</code>\n        </em></span>\n     </span></dt><dd><p>Add new constructor\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2684\" target=\"_top\">2684</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2684\" target=\"_top\">2684</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">priority_queue</code> lacking comparator typedef\n        </em></span>\n     </span></dt><dd><p>Define the <code class=\"code\">value_compare</code> typedef.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2770\" target=\"_top\">2770</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2770\" target=\"_top\">2770</a>:\n        <span class=\"emphasis\"><em><code class=\"code\">tuple_size&lt;const T&gt;</code> specialization is not\n \t SFINAE compatible and breaks decomposition declarations\n        </em></span>\n     </span></dt><dd><p>Safely detect <code class=\"code\">tuple_size&lt;T&gt;::value</code> and\n       only use it if valid.\n-    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"../ext/lwg-defects.html#2781\" target=\"_top\">2781</a>:\n+    </p></dd><dt><span class=\"term\"><a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2781\" target=\"_top\">2781</a>:\n        <span class=\"emphasis\"><em>Contradictory requirements for <code class=\"code\">std::function</code>\n          and <code class=\"code\">std::reference_wrapper</code>\n        </em></span>"}, {"sha": "4f88c0764f88a515af878607f7d06a1191166de5", "filename": "libstdc++-v3/doc/html/manual/debug.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdebug.html?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -161,7 +161,7 @@\n   DRD</a>,\n   <a class=\"link\" href=\"http://valgrind.org/docs/manual/hg-manual.html\" target=\"_top\"> \n   Helgrind</a>, and\n-  <a class=\"link\" href=\"http://code.google.com/p/data-race-test/\" target=\"_top\"> \n+  <a class=\"link\" href=\"https://code.google.com/p/data-race-test/\" target=\"_top\"> \n   ThreadSanitizer</a> (this refers to ThreadSanitizer v1, not the\n   new \"tsan\" feature built-in to GCC itself).\n </p><p>"}, {"sha": "5cada1a0df4847a0f7b1ab22f6ba3177f85a792b", "filename": "libstdc++-v3/doc/html/manual/documentation_hacking.html", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdocumentation_hacking.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdocumentation_hacking.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fdocumentation_hacking.html?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -359,16 +359,15 @@\n \tFor PDF output, something that transforms valid Docbook XML to PDF is\n \trequired. Possible solutions include <a class=\"link\" href=\"http://dblatex.sourceforge.net\" target=\"_top\">dblatex</a>,\n \t<span class=\"command\"><strong>xmlto</strong></span>, or <span class=\"command\"><strong>prince</strong></span>. Of\n-\tthese, <span class=\"command\"><strong>dblatex</strong></span> is the default. Other\n-\toptions are listed on the DocBook web <a class=\"link\" href=\"http://wiki.docbook.org/topic/DocBookPublishingTools\" target=\"_top\">pages</a>. Please\n-\tconsult the <code class=\"email\">&lt;<a class=\"email\" href=\"mailto:libstdc++@gcc.gnu.org\">libstdc++@gcc.gnu.org</a>&gt;</code> list when\n+\tthese, <span class=\"command\"><strong>dblatex</strong></span> is the default.\n+\tPlease consult the <code class=\"email\">&lt;<a class=\"email\" href=\"mailto:libstdc++@gcc.gnu.org\">libstdc++@gcc.gnu.org</a>&gt;</code> list when\n \tpreparing printed manuals for current best practice and\n \tsuggestions.\n       </p><p>\n \tFor Texinfo output, something that transforms valid Docbook\n \tXML to Texinfo is required. The default choice is <a class=\"link\" href=\"http://docbook2x.sourceforge.net/\" target=\"_top\">docbook2X</a>.\n       </p><p>\n-\tFor epub output, the <a class=\"link\" href=\"https://sourceforge.net/projects/docbook/files/epub3/\" target=\"_top\">stylesheets</a> for EPUB3 are required. These stylesheets are still in development. To validate the created file, <a class=\"link\" href=\"https://code.google.com/p/epubcheck/\" target=\"_top\">epubcheck</a> is necessary.\n+\tFor epub output, the <a class=\"link\" href=\"https://sourceforge.net/projects/docbook/files/epub3/\" target=\"_top\">stylesheets</a> for EPUB3 are required. These stylesheets are still in development. To validate the created file, <a class=\"link\" href=\"https://github.com/IDPF/epubcheck\" target=\"_top\">epubcheck</a> is necessary.\n       </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"docbook.rules\"></a>Generating the DocBook Files</h4></div></div></div><p>\n \tThe following Makefile rules generate (in order): an HTML\n \tversion of all the DocBook documentation, a PDF version of the\n@@ -527,9 +526,8 @@\n <br />\n \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0&lt;/set&gt;<br />\n \u00a0\u00a0\u00a0\u00a0</p></div></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"docbook.markup\"></a>Markup By Example</h4></div></div></div><p>\n-\tComplete details on Docbook markup can be found in the DocBook\n-\tElement Reference,\n-\t<a class=\"link\" href=\"http://www.docbook.org/tdg/en/html/part2.html\" target=\"_top\">online</a>.\n+\tComplete details on Docbook markup can be found in the\n+\t<a class=\"link\" href=\"http://tdg.docbook.org/tdg/5.0/ref-elements.html\" target=\"_top\">DocBook Element Reference</a>.\n \tAn incomplete reference for HTML to Docbook conversion is\n \tdetailed in the table below.\n       </p><div class=\"table\"><a id=\"table.docbook_cmp\"></a><p class=\"title\"><strong>Table\u00a0B.4.\u00a0HTML to Docbook XML Markup Comparison</strong></p><div class=\"table-contents\"><table summary=\"HTML to Docbook XML Markup Comparison\" border=\"1\"><colgroup><col align=\"left\" class=\"c1\" /><col align=\"left\" class=\"c2\" /></colgroup><thead><tr><th align=\"left\">HTML</th><th align=\"left\">Docbook</th></tr></thead><tbody><tr><td align=\"left\">&lt;p&gt;</td><td align=\"left\">&lt;para&gt;</td></tr><tr><td align=\"left\">&lt;pre&gt;</td><td align=\"left\">&lt;computeroutput&gt;, &lt;programlisting&gt;,"}, {"sha": "0345490f82b916e8d2d3ef94d96b2315a0669f3f", "filename": "libstdc++-v3/doc/html/manual/policy_data_structures.html", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fpolicy_data_structures.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fpolicy_data_structures.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fpolicy_data_structures.html?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -1097,14 +1097,12 @@\n \t    Litwin\n \t  </span>. </span><span class=\"publisher\"><span class=\"publishername\">\n \t  Proceedings of International Conference on Very Large Data Bases\n-\t. </span></span></p></div><div class=\"biblioentry\"><a id=\"biblio.maverik_lowerbounds\"></a><p>[biblio.maverik_lowerbounds] <span class=\"title\"><em>\n-\t<a class=\"link\" href=\"http://magic.aladdin.cs.cmu.edu/2005/08/01/deamortization-part-2-binomial-heaps/\" target=\"_top\">\n-\t  Deamortization - Part 2: Binomial Heaps\n-\t</a>\n+\t. </span></span></p></div><div class=\"biblioentry\"><a id=\"biblio.maverick_lowerbounds\"></a><p>[biblio.maverick_lowerbounds] <span class=\"title\"><em>\n+\tDeamortization - Part 2: Binomial Heaps\n       </em>. </span><span class=\"date\">\n \t2005\n       . </span><span class=\"author\"><span class=\"firstname\">\n-\t    Maverik\n+\t    Maverick\n \t  </span> <span class=\"surname\">\n \t    Woo\n \t  </span>. </span></p></div><div class=\"biblioentry\"><a id=\"biblio.meyers96more\"></a><p>[biblio.meyers96more] <span class=\"title\"><em>\n@@ -1293,9 +1291,7 @@\n \t    </span>. </span><span class=\"publisher\"><span class=\"publishername\">\n \t  Addison-Wesley Publishing Company\n \t. </span></span></p></div><div class=\"biblioentry\"><a id=\"biblio.wickland96thirty\"></a><p>[biblio.wickland96thirty] <span class=\"title\"><em>\n-\t<a class=\"link\" href=\"http://myweb.wvnet.edu/~gsa00121/books/amongdead30.zip\" target=\"_top\">\n-\t  Thirty Years Among the Dead\n-\t</a>\n+\tThirty Years Among the Dead\n       </em>. </span><span class=\"date\">\n \t1996\n       . </span><span class=\"author\"><span class=\"firstname\">"}, {"sha": "b0b983899e474ead3cbf35df86ccc58e3ae9bc9b", "filename": "libstdc++-v3/doc/html/manual/policy_data_structures_design.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fpolicy_data_structures_design.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fpolicy_data_structures_design.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fpolicy_data_structures_design.html?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -1221,7 +1221,7 @@\n \tan underlying pairing heap (<a class=\"xref\" href=\"policy_data_structures.html#biblio.fredman86pairing\" title=\"The pairing heap: a new form of self-adjusting heap\">[biblio.fredman86pairing]</a>),\n \tbinary heap (<a class=\"xref\" href=\"policy_data_structures.html#biblio.clrs2001\" title=\"Introduction to Algorithms, 2nd edition\">[biblio.clrs2001]</a>),\n \tbinomial heap (<a class=\"xref\" href=\"policy_data_structures.html#biblio.clrs2001\" title=\"Introduction to Algorithms, 2nd edition\">[biblio.clrs2001]</a>),\n-\ta binomial heap with a redundant binary counter (<a class=\"xref\" href=\"policy_data_structures.html#biblio.maverik_lowerbounds\" title=\"Deamortization - Part 2: Binomial Heaps\">[biblio.maverik_lowerbounds]</a>),\n+\ta binomial heap with a redundant binary counter (<a class=\"xref\" href=\"policy_data_structures.html#biblio.maverick_lowerbounds\" title=\"Deamortization - Part 2: Binomial Heaps\">[biblio.maverick_lowerbounds]</a>),\n \tor a thin heap (<a class=\"xref\" href=\"policy_data_structures.html#biblio.kt99fat_heaps\" title=\"New Heap Data Structures\">[biblio.kt99fat_heaps]</a>).\n \t</p><p>\n \t  As mentioned in the tutorial,"}, {"sha": "0c4464711852e45f72d4842ba446bd22ee2f47f4", "filename": "libstdc++-v3/doc/html/manual/profile_mode.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fprofile_mode.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fprofile_mode.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fprofile_mode.html?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -10,9 +10,9 @@\n   calls to an instrumentation library to record the internal state of\n   various components at interesting entry/exit points to/from the standard\n   library.  Process trace, recognize suboptimal patterns, give advice.\n-  For details, see\n-  <a class=\"link\" href=\"http://dx.doi.org/10.1109/CGO.2009.36\" target=\"_top\">paper presented at\n-   CGO 2009</a>.\n+  For details, see the\n+  <a class=\"link\" href=\"http://http://ieeexplore.ieee.org/document/4907670/\" target=\"_top\">Perflint\n+  paper presented at CGO 2009</a>.\n   </p><p>\n   <span class=\"emphasis\"><em>Strengths: </em></span>\n </p><div class=\"itemizedlist\"><ul class=\"itemizedlist\" style=\"list-style-type: disc; \"><li class=\"listitem\"><p>"}, {"sha": "f32edfbe461a6e7cfa911e1c0c5497cced489cc9", "filename": "libstdc++-v3/doc/html/manual/profile_mode_diagnostics.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fprofile_mode_diagnostics.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fprofile_mode_diagnostics.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fprofile_mode_diagnostics.html?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -376,7 +376,7 @@\n   See papers:\n   <a class=\"link\" href=\"https://dl.acm.org/citation.cfm?doid=1065944.1065981\" target=\"_top\">\n   A framework for adaptive algorithm selection in STAPL</a> and\n-  <a class=\"link\" href=\"http://ieeexplore.ieee.org/search/wrapper.jsp?arnumber=4228227\" target=\"_top\">\n+  <a class=\"link\" href=\"http://ieeexplore.ieee.org/document/4228227/\" target=\"_top\">\n   Optimizing Sorting with Machine Learning Algorithms</a>.\n   </p></li><li class=\"listitem\"><p><span class=\"emphasis\"><em>Sample runtime reduction:</em></span>60%.\n   </p></li><li class=\"listitem\"><p><span class=\"emphasis\"><em>Recommendation:</em></span> Change sort algorithm\n@@ -441,8 +441,8 @@\n   </p></li><li class=\"listitem\"><p><span class=\"emphasis\"><em>Fundamentals:</em></span>Allocation can be tuned\n   to a specific traversal pattern, to result in better data locality.\n   See paper:\n-  <a class=\"link\" href=\"http://www.springerlink.com/content/8085744l00x72662/\" target=\"_top\">\n-  Custom Memory Allocation for Free</a>.\n+  <a class=\"link\" href=\"https://parasol.tamu.edu/publications/download.php?file_id=570\" target=\"_top\">\n+  Custom Memory Allocation for Free</a> by Jula and Rauchwerger.\n   </p></li><li class=\"listitem\"><p><span class=\"emphasis\"><em>Sample runtime reduction:</em></span>30%.\n   </p></li><li class=\"listitem\"><p><span class=\"emphasis\"><em>Recommendation:</em></span>\n   High scatter score N for container built at site S."}, {"sha": "842e8d4e61aa62ed46aade78405ba9ef810dcaea", "filename": "libstdc++-v3/doc/html/manual/status.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fstatus.html?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -697,7 +697,7 @@\n \t  N4258\n \t</a>\n       </td><td align=\"center\">6.1</td><td align=\"left\"><code class=\"code\"> __cpp_lib_allocator_traits_is_always_equal &gt;= 201411 </code></td></tr><tr><td align=\"left\">Contiguous Iterators </td><td align=\"left\">\n-\t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4284.htm\" target=\"_top\">\n+\t<a class=\"link\" href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n4284.html\" target=\"_top\">\n \t  N4284\n \t</a>\n       </td><td align=\"center\">N/A</td><td align=\"left\">\u00a0</td></tr><tr><td align=\"left\"> Minimal incomplete type support for standard containers </td><td align=\"left\">"}, {"sha": "61950d3c629490bba773a4e56f6327a0ee863d10", "filename": "libstdc++-v3/doc/html/manual/test.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ftest.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ftest.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Ftest.html?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -510,7 +510,7 @@\n     More examples can be found in the\n     <code class=\"filename\">libstdc++-v3/testsuite/*/*.cc</code> files.\n    </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"tests.dg.directives\"></a>Directives Specific to Libstdc++ Tests</h4></div></div></div><p>\n-    In addition to the usual <a class=\"link\" href=\"https://gcc.gnu.org/onlinedocs/gccint/Require-support.html\" target=\"_top\">Variants\n+    In addition to the usual <a class=\"link\" href=\"https://gcc.gnu.org/onlinedocs/gccint/Require-Support.html\" target=\"_top\">Variants\n     of <code class=\"literal\">dg-require-<em class=\"replaceable\"><code>support</code></em></code></a>\n     several more directives are available for use in libstdc++ tests,\n     including the following:"}, {"sha": "c30cd661fccdb744fb7231245d45b101b5771015", "filename": "libstdc++-v3/doc/html/manual/using_concurrency.html", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_concurrency.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_concurrency.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_concurrency.html?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -157,9 +157,9 @@\n       t2.join();\n     }\n       </pre><p>For further details of the C++11 memory model see Hans-J. Boehm's\n-      <a class=\"link\" href=\"http://www.hpl.hp.com/personal/Hans_Boehm/c++mm/user-faq.html\" target=\"_top\">Threads\n+      <a class=\"link\" href=\"https://www.hboehm.info/c++mm/\" target=\"_top\">Threads\n       and memory model for C++</a> pages, particularly the <a class=\"link\" href=\"http://www.hpl.hp.com/personal/Hans_Boehm/c++mm/threadsintro.html\" target=\"_top\">introduction</a> \n-      and <a class=\"link\" href=\"http://www.hpl.hp.com/personal/Hans_Boehm/c++mm/user-faq.html\" target=\"_top\">FAQ</a>.\n+      and <a class=\"link\" href=\"https://www.hboehm.info/c++mm/user-faq.html\" target=\"_top\">FAQ</a>.\n       </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.concurrency.atomics\"></a>Atomics</h3></div></div></div><p>\n     </p></div><div class=\"section\"><div class=\"titlepage\"><div><div><h3 class=\"title\"><a id=\"manual.intro.using.concurrency.io\"></a>IO</h3></div></div></div><p>This gets a bit tricky.  Please read carefully, and bear with me.\n    </p><div class=\"section\"><div class=\"titlepage\"><div><div><h4 class=\"title\"><a id=\"concurrency.io.structure\"></a>Structure</h4></div></div></div><p>A wrapper"}, {"sha": "2d9c6af36d8fef23598dfd96d2b3029fea546062", "filename": "libstdc++-v3/doc/html/manual/using_exceptions.html", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_exceptions.html", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_exceptions.html", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fhtml%2Fmanual%2Fusing_exceptions.html?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -299,7 +299,7 @@\n       </em>. </span><span class=\"author\"><span class=\"firstname\">Richard</span> <span class=\"surname\">Henderson</span>. </span><span class=\"publisher\"><span class=\"publishername\">\n \tGNU\n       . </span></span></p></div><div class=\"biblioentry\"><a id=\"id-1.3.3.4.9.9.7\"></a><p><span class=\"title\"><em>\n-\t<a class=\"link\" href=\"http://www.research.att.com/~bs/3rd_safe.pdf\" target=\"_top\">\n+\t<a class=\"link\" href=\"http://www.stroustrup.com/3rd_safe.pdf\" target=\"_top\">\n \tAppendix E: Standard-Library Exception Safety\n \t</a>\n       </em>. </span><span class=\"author\"><span class=\"firstname\">Bjarne</span> <span class=\"surname\">Stroustrup</span>. </span></p></div><div class=\"biblioentry\"><a id=\"id-1.3.3.4.9.9.8\"></a><p><span class=\"citetitle\"><em class=\"citetitle\">"}, {"sha": "dca958c9cc1fe6a3ca94ea44a640a70d1f317da1", "filename": "libstdc++-v3/doc/xml/manual/policy_data_structures.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fpolicy_data_structures.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fpolicy_data_structures.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fpolicy_data_structures.xml?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -4719,7 +4719,7 @@\n \tan underlying pairing heap (<xref linkend=\"biblio.fredman86pairing\"/>),\n \tbinary heap (<xref linkend=\"biblio.clrs2001\"/>),\n \tbinomial heap (<xref linkend=\"biblio.clrs2001\"/>),\n-\ta binomial heap with a redundant binary counter (<xref linkend=\"biblio.maverik_lowerbounds\"/>),\n+\ta binomial heap with a redundant binary counter (<xref linkend=\"biblio.maverick_lowerbounds\"/>),\n \tor a thin heap (<xref linkend=\"biblio.kt99fat_heaps\"/>).\n \t</para>\n "}, {"sha": "16b73d66621498983e2e56afd8eda3b9f133fbbc", "filename": "libstdc++-v3/doc/xml/manual/policy_data_structures_biblio.xml", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fpolicy_data_structures_biblio.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fpolicy_data_structures_biblio.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fpolicy_data_structures_biblio.xml?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -892,12 +892,9 @@\n     </biblioentry>\n \n     <!-- 26 -->\n-    <biblioentry xml:id=\"biblio.maverik_lowerbounds\">\n+    <biblioentry xml:id=\"biblio.maverick_lowerbounds\">\n       <title>\n-\t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n-\t      xlink:href=\"http://magic.aladdin.cs.cmu.edu/2005/08/01/deamortization-part-2-binomial-heaps/\">\n-\t  Deamortization - Part 2: Binomial Heaps\n-\t</link>\n+\tDeamortization - Part 2: Binomial Heaps\n       </title>\n       <date>\n \t2005\n@@ -906,7 +903,7 @@\n       <author>\n \t<personname>\n \t  <firstname>\n-\t    Maverik\n+\t    Maverick\n \t  </firstname>\n \t  <surname>\n \t    Woo\n@@ -1422,10 +1419,7 @@\n     <!-- 45 -->\n     <biblioentry xml:id=\"biblio.wickland96thirty\">\n       <title>\n-\t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n-\t      xlink:href=\"http://myweb.wvnet.edu/~gsa00121/books/amongdead30.zip\">\n-\t  Thirty Years Among the Dead\n-\t</link>\n+\tThirty Years Among the Dead\n       </title>\n       <date>\n \t1996"}, {"sha": "39c176be9239a13ee7d8d35a6b1c50e9cfca88d4", "filename": "libstdc++-v3/doc/xml/manual/profile_mode.xml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fprofile_mode.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fprofile_mode.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fprofile_mode.xml?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -25,9 +25,9 @@\n   calls to an instrumentation library to record the internal state of\n   various components at interesting entry/exit points to/from the standard\n   library.  Process trace, recognize suboptimal patterns, give advice.\n-  For details, see\n-  <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://dx.doi.org/10.1109/CGO.2009.36\">paper presented at\n-   CGO 2009</link>.\n+  For details, see the\n+  <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://http://ieeexplore.ieee.org/document/4907670/\">Perflint\n+  paper presented at CGO 2009</link>.\n   </para>\n   <para>\n   <emphasis>Strengths: </emphasis>\n@@ -1509,8 +1509,8 @@ foo.cc:7: advice: Insert prefetch instruction.\n   <listitem><para><emphasis>Fundamentals:</emphasis>Allocation can be tuned\n   to a specific traversal pattern, to result in better data locality.\n   See paper:\n-  <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.springerlink.com/content/8085744l00x72662/\">\n-  Custom Memory Allocation for Free</link>.\n+  <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://parasol.tamu.edu/publications/download.php?file_id=570\">\n+  Custom Memory Allocation for Free</link> by Jula and Rauchwerger.\n   </para></listitem>\n   <listitem><para><emphasis>Sample runtime reduction:</emphasis>30%.\n   </para></listitem>"}, {"sha": "1970845f127f489c84d849f0b9fec65912716b84", "filename": "libstdc++-v3/doc/xml/manual/using.xml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing.xml?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -1624,9 +1624,9 @@ gcc version 4.1.2 20070925 (Red Hat 4.1.2-33)\n       </programlisting>\n \n       <para>For further details of the C++11 memory model see Hans-J. Boehm's\n-      <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.hpl.hp.com/personal/Hans_Boehm/c++mm/user-faq.html\">Threads\n+      <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://www.hboehm.info/c++mm/\">Threads\n       and memory model for C++</link> pages, particularly the <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.hpl.hp.com/personal/Hans_Boehm/c++mm/threadsintro.html\">introduction</link> \n-      and <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"http://www.hpl.hp.com/personal/Hans_Boehm/c++mm/user-faq.html\">FAQ</link>.\n+      and <link xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"https://www.hboehm.info/c++mm/user-faq.html\">FAQ</link>.\n       </para>\n \n   </section>"}, {"sha": "b855cf42cc109905a3b29663a772cfc8cd66bea2", "filename": "libstdc++-v3/doc/xml/manual/using_exceptions.xml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing_exceptions.xml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/96189df366ab0d5e75e10aa69bf65e56d8e429dd/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing_exceptions.xml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fdoc%2Fxml%2Fmanual%2Fusing_exceptions.xml?ref=96189df366ab0d5e75e10aa69bf65e56d8e429dd", "patch": "@@ -512,7 +512,7 @@ is called.\n   <biblioentry>\n       <title>\n \t<link xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n-\t      xlink:href=\"http://www.research.att.com/~bs/3rd_safe.pdf\">\n+\t      xlink:href=\"http://www.stroustrup.com/3rd_safe.pdf\">\n \tAppendix E: Standard-Library Exception Safety\n \t</link>\n       </title>"}]}