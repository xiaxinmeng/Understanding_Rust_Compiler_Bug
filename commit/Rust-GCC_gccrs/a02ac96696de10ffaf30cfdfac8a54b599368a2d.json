{"sha": "a02ac96696de10ffaf30cfdfac8a54b599368a2d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyYWM5NjY5NmRlMTBmZmFmMzBjZmRmYWM4YTU0YjU5OTM2OGEyZA==", "commit": {"author": {"name": "Hans-Peter Nilsson", "email": "hp@bitrange.com", "date": "2002-02-11T22:38:30Z"}, "committer": {"name": "Hans-Peter Nilsson", "email": "hp@gcc.gnu.org", "date": "2002-02-11T22:38:30Z"}, "message": "mmix.c (mmix_assemble_integer): Handle non-CONST_INT through default_assemble_integer.\n\n\t* config/mmix/mmix.c (mmix_assemble_integer) <case 1, 2>: Handle\n\tnon-CONST_INT through default_assemble_integer.\n\t<case 4>: Likewise, for non-CONST_INT, non-SYMBOL_REF.\n\t<case 8>: Abort for CONST_DOUBLE.\n\nFrom-SVN: r49687", "tree": {"sha": "f94edb95a1f8874e8be896257065c8c400278608", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f94edb95a1f8874e8be896257065c8c400278608"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a02ac96696de10ffaf30cfdfac8a54b599368a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02ac96696de10ffaf30cfdfac8a54b599368a2d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a02ac96696de10ffaf30cfdfac8a54b599368a2d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a02ac96696de10ffaf30cfdfac8a54b599368a2d/comments", "author": null, "committer": null, "parents": [{"sha": "97cf8285dc3ef2ea675b234f52216d897b91b373", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97cf8285dc3ef2ea675b234f52216d897b91b373", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97cf8285dc3ef2ea675b234f52216d897b91b373"}], "stats": {"total": 39, "additions": 36, "deletions": 3}, "files": [{"sha": "524c6d094959ae4c4befb750b6de8aca5e6d84dc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02ac96696de10ffaf30cfdfac8a54b599368a2d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02ac96696de10ffaf30cfdfac8a54b599368a2d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a02ac96696de10ffaf30cfdfac8a54b599368a2d", "patch": "@@ -1,3 +1,10 @@\n+2002-02-11  Hans-Peter Nilsson  <hp@bitrange.com>\n+\n+\t* config/mmix/mmix.c (mmix_assemble_integer) <case 1, 2>: Handle\n+\tnon-CONST_INT through default_assemble_integer.\n+\t<case 4>: Likewise, for non-CONST_INT, non-SYMBOL_REF.\n+\t<case 8>: Abort for CONST_DOUBLE.\n+\n 2002-02-11  John David Anglin  <dave@hiauly1.hia.nrc.ca>\n \n \t* gcc.c (init_gcc_specs): Add static libgcc to link when \"-shared\""}, {"sha": "50ab71b2b2f4819594da27e8d2ca3dedffab526c", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a02ac96696de10ffaf30cfdfac8a54b599368a2d/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a02ac96696de10ffaf30cfdfac8a54b599368a2d/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=a02ac96696de10ffaf30cfdfac8a54b599368a2d", "patch": "@@ -1909,29 +1909,55 @@ mmix_assemble_integer (x, size, aligned_p)\n   if (aligned_p)\n     switch (size)\n       {\n+\t/* We handle a limited number of types of operands in here.  But\n+\t   that's ok, because we can punt to generic functions.  We then\n+\t   pretend that we don't emit aligned data is needed, so the usual\n+\t   .pseudo syntax is used (which work for aligned data too).  We\n+\t   actually *must* do that, since we say we don't have simple\n+\t   aligned pseudos, causing this function to be called.  We just\n+\t   try and keep as much compatibility as possible with mmixal\n+\t   syntax for normal cases (i.e. without GNU extensions and C\n+\t   only).  */\n       case 1:\n+\tif (GET_CODE (x) != CONST_INT)\n+\t  {\n+\t    aligned_p = 0;\n+\t    break;\n+\t  }\n \tfputs (\"\\tBYTE\\t\", asm_out_file);\n \tmmix_print_operand (asm_out_file, x, 'B');\n \tfputc ('\\n', asm_out_file);\n \treturn true;\n \n       case 2:\n+\tif (GET_CODE (x) != CONST_INT)\n+\t  {\n+\t    aligned_p = 0;\n+\t    break;\n+\t  }\n \tfputs (\"\\tWYDE\\t\", asm_out_file);\n \tmmix_print_operand (asm_out_file, x, 'W');\n \tfputc ('\\n', asm_out_file);\n \treturn true;\n \n       case 4:\n+\tif (GET_CODE (x) != CONST_INT && GET_CODE (x) != SYMBOL_REF)\n+\t  {\n+\t    aligned_p = 0;\n+\t    break;\n+\t  }\n \tfputs (\"\\tTETRA\\t\", asm_out_file);\n \tmmix_print_operand (asm_out_file, x, 'L');\n \tfputc ('\\n', asm_out_file);\n \treturn true;\n \n       case 8:\n \tif (GET_CODE (x) == CONST_DOUBLE)\n-\t  mmix_output_octa (asm_out_file, mmix_intval (x), 0);\n-\telse\n-\t  assemble_integer_with_op (\"\\tOCTA\\t\", x);\n+\t  /* We don't get here anymore for CONST_DOUBLE, because DImode\n+\t     isn't expressed as CONST_DOUBLE, and DFmode is handled\n+\t     elsewhere.  */\n+\t  abort ();\n+\tassemble_integer_with_op (\"\\tOCTA\\t\", x);\n \treturn true;\n       }\n   return default_assemble_integer (x, size, aligned_p);"}]}