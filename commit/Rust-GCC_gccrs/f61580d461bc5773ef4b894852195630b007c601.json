{"sha": "f61580d461bc5773ef4b894852195630b007c601", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjYxNTgwZDQ2MWJjNTc3M2VmNGI4OTQ4NTIxOTU2MzBiMDA3YzYwMQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-22T13:28:59Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2009-06-22T13:28:59Z"}, "message": "[multiple changes]\n\n2009-06-22  Jose Ruiz  <ruiz@adacore.com>\n\n\t* sysdep.c (__gnat_localtime_tzoff for RTX):\n\tSystemTimeToTzSpecificLocalTime is not supported by RTX. Use\n\tGetTimeZoneInformation instead.\n\n2009-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_res.adb (Check_No_Direct_Boolean_Operators): New procedure\n\n2009-06-22  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch12.adb (Collect_Previous_Instances): Do not collect\n\tinstantiations declared in a previous generic package body.\n\n2009-06-22  Robert Dewar  <dewar@adacore.com>\n\n\t* gnat_rm.texi: Add doc that X=True and X=False is allowed for the\n\trestriction No_Direct_Boolean_Operators.\n\n2009-06-22  Thomas Quinot  <quinot@adacore.com>\n\n\t* bindusg.adb: Minor fixes to gnatbind usage message\n\n\t* sem_eval.adb: Minor reformatting\n\nFrom-SVN: r148794", "tree": {"sha": "4b42ff27b8bbc52a2a7f6a8d4867f75dbaf294aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b42ff27b8bbc52a2a7f6a8d4867f75dbaf294aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f61580d461bc5773ef4b894852195630b007c601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61580d461bc5773ef4b894852195630b007c601", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f61580d461bc5773ef4b894852195630b007c601", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f61580d461bc5773ef4b894852195630b007c601/comments", "author": null, "committer": null, "parents": [{"sha": "6823270cb98959be5157725c7e0efd87c0b61e23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6823270cb98959be5157725c7e0efd87c0b61e23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6823270cb98959be5157725c7e0efd87c0b61e23"}], "stats": {"total": 233, "additions": 149, "deletions": 84}, "files": [{"sha": "8499c84822501da2facef8ec26a0089ec305a246", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=f61580d461bc5773ef4b894852195630b007c601", "patch": "@@ -1,3 +1,29 @@\n+2009-06-22  Jose Ruiz  <ruiz@adacore.com>\n+\n+\t* sysdep.c (__gnat_localtime_tzoff for RTX):\n+\tSystemTimeToTzSpecificLocalTime is not supported by RTX. Use\n+\tGetTimeZoneInformation instead.\n+\n+2009-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_res.adb (Check_No_Direct_Boolean_Operators): New procedure\n+\n+2009-06-22  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch12.adb (Collect_Previous_Instances): Do not collect\n+\tinstantiations declared in a previous generic package body.\n+\n+2009-06-22  Robert Dewar  <dewar@adacore.com>\n+\n+\t* gnat_rm.texi: Add doc that X=True and X=False is allowed for the\n+\trestriction No_Direct_Boolean_Operators.\n+\n+2009-06-22  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* bindusg.adb: Minor fixes to gnatbind usage message\n+\n+\t* sem_eval.adb: Minor reformatting\n+\n 2009-06-22  Javier Miranda  <miranda@adacore.com>\n \n \t* sem_ch3.adb (Analyze_Object_Declaration, Freeze_Entity): Move to the"}, {"sha": "2529c351cf171290177c393e5f527e906b9a8dd3", "filename": "gcc/ada/bindusg.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2Fbindusg.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2Fbindusg.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fbindusg.adb?ref=f61580d461bc5773ef4b894852195630b007c601", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                B o d y                                   --\n --                                                                          --\n---          Copyright (C) 1992-2008, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -99,7 +99,7 @@ package body Bindusg is\n       --  Line for D switch\n \n       Write_Line (\"  -Dnn[k|m] Default secondary stack \" &\n-                  \"size = nnn [kilo|mega] bytes\");\n+                  \"size = nn [kilo|mega] bytes\");\n \n       --  Line for -e switch\n \n@@ -108,7 +108,7 @@ package body Bindusg is\n \n       --  Line for -E switch\n \n-      Write_Line (\"  -E        Store tracebacks in Exception occurrences\");\n+      Write_Line (\"  -E        Store tracebacks in exception occurrences\");\n \n       --  The -f switch is voluntarily omitted, because it is obsolete\n "}, {"sha": "97c4d2b583da521f60d32e1b372e0f0dae699edf", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=f61580d461bc5773ef4b894852195630b007c601", "patch": "@@ -8431,7 +8431,9 @@ This restriction ensures that no logical (and/or/xor) or comparison\n operators are used on operands of type Boolean (or any type derived\n from Boolean). This is intended for use in safety critical programs\n where the certification protocol requires the use of short-circuit\n-(and then, or else) forms for all composite boolean operations.\n+(and then, or else) forms for all composite boolean operations. An\n+exception is that an explicit equality test with True or False as the\n+right operand is not considered to violate this restriction.\n \n @item No_Dispatching_Calls\n @findex No_Dispatching_Calls"}, {"sha": "f7d5a1a61567d64008439e44ddd3d6b4e140d8c9", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 53, "deletions": 65, "changes": 118, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=f61580d461bc5773ef4b894852195630b007c601", "patch": "@@ -10465,15 +10465,16 @@ package body Sem_Ch12 is\n             --  declared without a box (see Instantiate_Formal_Package). Such\n             --  an instantiation does not generate any code (the actual code\n             --  comes from actual) and thus does not need to be analyzed here.\n+            --  If the instantiation appears with a generic package body it is\n+            --  not analyzed here either.\n \n             elsif Nkind (Decl) = N_Package_Instantiation\n               and then not Is_Internal (Defining_Entity (Decl))\n             then\n                Append_Elmt (Decl, Previous_Instances);\n \n-            --  For a subprogram instantiation, omit instantiations of\n-            --  intrinsic operations (Unchecked_Conversions, etc.) that\n-            --  have no bodies.\n+            --  For a subprogram instantiation, omit instantiations intrinsic\n+            --  operations (Unchecked_Conversions, etc.) that have no bodies.\n \n             elsif Nkind_In (Decl, N_Function_Instantiation,\n                                   N_Procedure_Instantiation)\n@@ -10487,7 +10488,9 @@ package body Sem_Ch12 is\n                Collect_Previous_Instances\n                  (Private_Declarations (Specification (Decl)));\n \n-            elsif Nkind (Decl) = N_Package_Body then\n+            elsif Nkind (Decl) = N_Package_Body\n+              and then Ekind (Corresponding_Spec (Decl)) /= E_Generic_Package\n+            then\n                Collect_Previous_Instances (Declarations (Decl));\n             end if;\n \n@@ -10520,8 +10523,8 @@ package body Sem_Ch12 is\n            and then Nkind (True_Parent) /= N_Compilation_Unit\n          loop\n             if Nkind (True_Parent) = N_Package_Declaration\n-              and then\n-                Nkind (Original_Node (True_Parent)) = N_Package_Instantiation\n+                 and then\n+               Nkind (Original_Node (True_Parent)) = N_Package_Instantiation\n             then\n                --  Parent is a compilation unit that is an instantiation.\n                --  Instantiation node has been replaced with package decl.\n@@ -10572,9 +10575,9 @@ package body Sem_Ch12 is\n                Set_Unit (Parent (True_Parent), Inst_Node);\n             end if;\n \n-            --  Now complete instantiation of enclosing body, if it appears\n-            --  in some other unit. If it appears in the current unit, the\n-            --  body will have been instantiated already.\n+            --  Now complete instantiation of enclosing body, if it appears in\n+            --  some other unit. If it appears in the current unit, the body\n+            --  will have been instantiated already.\n \n             if No (Corresponding_Body (Instance_Spec (Inst_Node))) then\n \n@@ -10605,8 +10608,8 @@ package body Sem_Ch12 is\n                      Scop := Scope (Scop);\n                   end loop;\n \n-                  --  Collect previous instantiations in the unit that\n-                  --  contains the desired generic.\n+                  --  Collect previous instantiations in the unit that contains\n+                  --  the desired generic.\n \n                   if Nkind (Parent (True_Parent)) /= N_Compilation_Unit\n                     and then not Body_Optional\n@@ -10635,7 +10638,7 @@ package body Sem_Ch12 is\n                              (Private_Declarations (Specification (Par)));\n \n                         else\n-                           --  Enclosing unit is a subprogram body, In this\n+                           --  Enclosing unit is a subprogram body. In this\n                            --  case all instance bodies are processed in order\n                            --  and there is no need to collect them separately.\n \n@@ -10753,9 +10756,7 @@ package body Sem_Ch12 is\n \n       E1 := First_Entity (Form);\n       E2 := First_Entity (Act);\n-      while Present (E1)\n-        and then E1 /= First_Private_Entity (Form)\n-      loop\n+      while Present (E1) and then E1 /= First_Private_Entity (Form) loop\n          --  Could this test be a single condition???\n          --  Seems like it could, and isn't FPE (Form) a constant anyway???\n \n@@ -10764,9 +10765,7 @@ package body Sem_Ch12 is\n            and then not Is_Class_Wide_Type (E1)\n            and then not Is_Internal_Name (Chars (E1))\n          then\n-            while Present (E2)\n-              and then Chars (E2) /= Chars (E1)\n-            loop\n+            while Present (E2) and then Chars (E2) /= Chars (E1) loop\n                Next_Entity (E2);\n             end loop;\n \n@@ -10775,21 +10774,15 @@ package body Sem_Ch12 is\n             else\n                Set_Instance_Of (E1, E2);\n \n-               if Is_Type (E1)\n-                 and then Is_Tagged_Type (E2)\n-               then\n-                  Set_Instance_Of\n-                    (Class_Wide_Type (E1), Class_Wide_Type (E2));\n+               if Is_Type (E1) and then Is_Tagged_Type (E2) then\n+                  Set_Instance_Of (Class_Wide_Type (E1), Class_Wide_Type (E2));\n                end if;\n \n                if Is_Constrained (E1) then\n-                  Set_Instance_Of\n-                    (Base_Type (E1), Base_Type (E2));\n+                  Set_Instance_Of (Base_Type (E1), Base_Type (E2));\n                end if;\n \n-               if Ekind (E1) = E_Package\n-                 and then No (Renamed_Object (E1))\n-               then\n+               if Ekind (E1) = E_Package and then No (Renamed_Object (E1)) then\n                   Map_Formal_Package_Entities (E1, E2);\n                end if;\n             end if;\n@@ -10881,24 +10874,23 @@ package body Sem_Ch12 is\n          --  recurse. Nested generic packages will have been processed from the\n          --  inside out.\n \n-         if Nkind (Decl) = N_Package_Declaration then\n-            Spec := Specification (Decl);\n+         case Nkind (Decl) is\n+            when N_Package_Declaration =>\n+               Spec := Specification (Decl);\n \n-         elsif Nkind (Decl) = N_Task_Type_Declaration then\n-            Spec := Task_Definition (Decl);\n+            when N_Task_Type_Declaration =>\n+               Spec := Task_Definition (Decl);\n \n-         elsif Nkind (Decl) = N_Protected_Type_Declaration then\n-            Spec := Protected_Definition (Decl);\n+            when N_Protected_Type_Declaration =>\n+               Spec := Protected_Definition (Decl);\n \n-         else\n-            Spec := Empty;\n-         end if;\n+            when others =>\n+               Spec := Empty;\n+         end case;\n \n          if Present (Spec) then\n-            Move_Freeze_Nodes (Out_Of, Next_Node,\n-              Visible_Declarations (Spec));\n-            Move_Freeze_Nodes (Out_Of, Next_Node,\n-              Private_Declarations (Spec));\n+            Move_Freeze_Nodes (Out_Of, Next_Node, Visible_Declarations (Spec));\n+            Move_Freeze_Nodes (Out_Of, Next_Node, Private_Declarations (Spec));\n          end if;\n \n          Next (Decl);\n@@ -11054,9 +11046,9 @@ package body Sem_Ch12 is\n \n    procedure Remove_Parent (In_Body : Boolean := False) is\n       S : Entity_Id := Current_Scope;\n-      --  S is the scope containing the instantiation just completed. The\n-      --  scope stack contains the parent instances of the instantiation,\n-      --  followed by the original S.\n+      --  S is the scope containing the instantiation just completed. The scope\n+      --  stack contains the parent instances of the instantiation, followed by\n+      --  the original S.\n \n       E      : Entity_Id;\n       P      : Entity_Id;\n@@ -11084,19 +11076,18 @@ package body Sem_Ch12 is\n                  and then P /= Current_Scope\n                then\n                   --  We are within an instance of some sibling. Retain\n-                  --  visibility of parent, for proper subsequent cleanup,\n-                  --  and reinstall private declarations as well.\n+                  --  visibility of parent, for proper subsequent cleanup, and\n+                  --  reinstall private declarations as well.\n \n                   Set_In_Private_Part (P);\n                   Install_Private_Declarations (P);\n                end if;\n \n             --  If the ultimate parent is a top-level unit recorded in\n-            --  Instance_Parent_Unit, then reset its visibility to what\n-            --  it was before instantiation. (It's not clear what the\n-            --  purpose is of testing whether Scope (P) is In_Open_Scopes,\n-            --  but that test was present before the ultimate parent test\n-            --  was added.???)\n+            --  Instance_Parent_Unit, then reset its visibility to what is was\n+            --  before instantiation. (It's not clear what the purpose is of\n+            --  testing whether Scope (P) is In_Open_Scopes, but that test was\n+            --  present before the ultimate parent test was added.???)\n \n             elsif not In_Open_Scopes (Scope (P))\n               or else (P = Instance_Parent_Unit\n@@ -11111,9 +11102,7 @@ package body Sem_Ch12 is\n             --  subunit of a generic contains an instance of a child unit of\n             --  its generic parent unit.\n \n-            elsif S = Current_Scope\n-              and then Is_Generic_Instance (S)\n-            then\n+            elsif S = Current_Scope and then Is_Generic_Instance (S) then\n                declare\n                   Par : constant Entity_Id :=\n                           Generic_Parent\n@@ -11141,9 +11130,9 @@ package body Sem_Ch12 is\n          end loop;\n \n       else\n-         --  Each body is analyzed separately, and there is no context\n-         --  that needs preserving from one body instance to the next,\n-         --  so remove all parent scopes that have been installed.\n+         --  Each body is analyzed separately, and there is no context that\n+         --  needs preserving from one body instance to the next, so remove all\n+         --  parent scopes that have been installed.\n \n          while Present (S) loop\n             End_Package_Scope (S);\n@@ -11163,7 +11152,6 @@ package body Sem_Ch12 is\n \n    begin\n       if No (Current_Instantiated_Parent.Act_Id) then\n-\n          --  Restore environment after subprogram inlining\n \n          Restore_Private_Views (Empty);\n@@ -11196,8 +11184,8 @@ package body Sem_Ch12 is\n       Dep_Typ  : Node_Id;\n \n       procedure Restore_Nested_Formal (Formal : Entity_Id);\n-      --  Hide the generic formals of formal packages declared with box\n-      --  which were reachable in the current instantiation.\n+      --  Hide the generic formals of formal packages declared with box which\n+      --  were reachable in the current instantiation.\n \n       ---------------------------\n       -- Restore_Nested_Formal --\n@@ -11241,9 +11229,9 @@ package body Sem_Ch12 is\n \n          --  Subtypes of types whose views have been exchanged, and that\n          --  are defined within the instance, were not on the list of\n-         --  Private_Dependents on entry to the instance, so they have to\n-         --  be exchanged explicitly now, in order to remain consistent with\n-         --  the view of the parent type.\n+         --  Private_Dependents on entry to the instance, so they have to be\n+         --  exchanged explicitly now, in order to remain consistent with the\n+         --  view of the parent type.\n \n          if Ekind (Typ) = E_Private_Type\n            or else Ekind (Typ) = E_Limited_Private_Type\n@@ -11272,8 +11260,8 @@ package body Sem_Ch12 is\n          return;\n       end if;\n \n-      --  Make the generic formal parameters private, and make the formal\n-      --  types into subtypes of the actuals again.\n+      --  Make the generic formal parameters private, and make the formal types\n+      --  into subtypes of the actuals again.\n \n       E := First_Entity (Pack_Id);\n       while Present (E) loop"}, {"sha": "fb18cf34acf28482a95aa1feef176bcf4cde53ff", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=f61580d461bc5773ef4b894852195630b007c601", "patch": "@@ -706,7 +706,7 @@ package body Sem_Eval is\n          return Unknown;\n \n       --  For access types, the only time we know the result at compile time\n-      --  (apart from identical operands, which we handled already, is if we\n+      --  (apart from identical operands, which we handled already) is if we\n       --  know one operand is null and the other is not, or both operands are\n       --  known null.\n \n@@ -720,9 +720,7 @@ package body Sem_Eval is\n                return Unknown;\n             end if;\n \n-         elsif Known_Non_Null (L)\n-           and then Known_Null (R)\n-         then\n+         elsif Known_Non_Null (L) and then Known_Null (R) then\n             return NE;\n \n          else\n@@ -792,7 +790,7 @@ package body Sem_Eval is\n \n          --  For remaining scalar cases we know exactly (note that this does\n          --  include the fixed-point case, where we know the run time integer\n-         --  values now)\n+         --  values now).\n \n          else\n             declare"}, {"sha": "e1a934bf4d01bd544b5358b4202ee48eb3c2d256", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 43, "deletions": 10, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=f61580d461bc5773ef4b894852195630b007c601", "patch": "@@ -119,6 +119,11 @@ package body Sem_Res is\n    --  initialization of individual components within the init proc itself.\n    --  Could be optimized away perhaps?\n \n+   procedure Check_No_Direct_Boolean_Operators (N : Node_Id);\n+   --  N is the node for a comparison or logical operator. If the operator\n+   --  is predefined, and the root type of the operands is Standard.Boolean,\n+   --  then a check is made for restriction No_Direct_Boolean_Operators.\n+\n    function Is_Definite_Access_Type (E : Entity_Id) return Boolean;\n    --  Determine whether E is an access type declared by an access\n    --  declaration, and not an (anonymous) allocator type.\n@@ -926,6 +931,38 @@ package body Sem_Res is\n       end if;\n    end Check_Initialization_Call;\n \n+   ---------------------------------------\n+   -- Check_No_Direct_Boolean_Operators --\n+   ---------------------------------------\n+\n+   procedure Check_No_Direct_Boolean_Operators (N : Node_Id) is\n+   begin\n+      if Scope (Entity (N)) = Standard_Standard\n+        and then Root_Type (Etype (Left_Opnd (N))) = Standard_Boolean\n+      then\n+         --  Restriction does not apply to generated code\n+\n+         if not Comes_From_Source (N) then\n+            null;\n+\n+         --  Restriction does not apply for A=False, A=True\n+\n+         elsif Nkind (N) = N_Op_Eq\n+           and then (Is_Entity_Name (Right_Opnd (N))\n+                      and then (Entity (Right_Opnd (N)) = Standard_True\n+                                 or else\n+                                Entity (Right_Opnd (N)) = Standard_False))\n+         then\n+            null;\n+\n+         --  Otherwise restriction applies\n+\n+         else\n+            Check_Restriction (No_Direct_Boolean_Operators, N);\n+         end if;\n+      end if;\n+   end Check_No_Direct_Boolean_Operators;\n+\n    ------------------------------\n    -- Check_Parameterless_Call --\n    ------------------------------\n@@ -5431,6 +5468,8 @@ package body Sem_Res is\n       T : Entity_Id;\n \n    begin\n+      Check_No_Direct_Boolean_Operators (N);\n+\n       --  If this is an intrinsic operation which is not predefined, use the\n       --  types of its declared arguments to resolve the possibly overloaded\n       --  operands. Otherwise the operands are unambiguous and specify the\n@@ -6154,6 +6193,8 @@ package body Sem_Res is\n    --  Start of processing for Resolve_Equality_Op\n \n    begin\n+      Check_No_Direct_Boolean_Operators (N);\n+\n       Set_Etype (N, Base_Type (Typ));\n       Generate_Reference (T, N, ' ');\n \n@@ -6609,9 +6650,10 @@ package body Sem_Res is\n \n    procedure Resolve_Logical_Op (N : Node_Id; Typ : Entity_Id) is\n       B_Typ : Entity_Id;\n-      N_Opr : constant Node_Kind := Nkind (N);\n \n    begin\n+      Check_No_Direct_Boolean_Operators (N);\n+\n       --  Predefined operations on scalar types yield the base type. On the\n       --  other hand, logical operations on arrays yield the type of the\n       --  arguments (and the context).\n@@ -6654,15 +6696,6 @@ package body Sem_Res is\n       Set_Etype (N, B_Typ);\n       Generate_Operator_Reference (N, B_Typ);\n       Eval_Logical_Op (N);\n-\n-      --  Check for violation of restriction No_Direct_Boolean_Operators\n-      --  if the operator was not eliminated by the Eval_Logical_Op call.\n-\n-      if Nkind (N) = N_Opr\n-        and then Root_Type (Etype (Left_Opnd (N))) = Standard_Boolean\n-      then\n-         Check_Restriction (No_Direct_Boolean_Operators, N);\n-      end if;\n    end Resolve_Logical_Op;\n \n    ---------------------------"}, {"sha": "c0489504f4338f13728bbe07bfc045d0ac685d6b", "filename": "gcc/ada/sysdep.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2Fsysdep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f61580d461bc5773ef4b894852195630b007c601/gcc%2Fada%2Fsysdep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsysdep.c?ref=f61580d461bc5773ef4b894852195630b007c601", "patch": "@@ -764,6 +764,22 @@ __gnat_localtime_tzoff (const time_t *timer, long *off)\n \n   (*Lock_Task) ();\n \n+#ifdef RTX\n+\n+  tzi_status = GetTimeZoneInformation (&tzi);\n+  *off = tzi.Bias;\n+  if (tzi_status == TIME_ZONE_ID_STANDARD)\n+     /* The system is operating in the range covered by the StandardDate\n+        member. */\n+     *off = *off + tzi.StandardBias;\n+  else if (tzi_status == TIME_ZONE_ID_DAYLIGHT)\n+     /* The system is operating in the range covered by the DaylightDate\n+        member. */\n+     *off = *off + tzi.DaylightBias;\n+  *off = *off * -60;\n+\n+#else\n+\n   /* First convert unix time_t structure to windows FILETIME format.  */\n   utc_time.ull_time = ((unsigned long long) *timer + w32_epoch_offset)\n                       * 10000000ULL;\n@@ -792,6 +808,8 @@ __gnat_localtime_tzoff (const time_t *timer, long *off)\n      else\n         *off = - (long) ((utc_time.ull_time - local_time.ull_time) / 10000000ULL);\n \n+#endif\n+\n   (*Unlock_Task) ();\n }\n "}]}