{"sha": "ec6636ebd828017e1af5b0515cf48149b13003b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM2NjM2ZWJkODI4MDE3ZTFhZjViMDUxNWNmNDgxNDliMTMwMDNiNw==", "commit": {"author": {"name": "Sebastian Pop", "email": "sebastian.pop@amd.com", "date": "2009-11-25T04:30:10Z"}, "committer": {"name": "Sebastian Pop", "email": "spop@gcc.gnu.org", "date": "2009-11-25T04:30:10Z"}, "message": "tree-scalar-evolution.c (instantiate_scev_poly): New.\n\n2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n\n\t* tree-scalar-evolution.c (instantiate_scev_poly): New.\n\t(instantiate_scev_1): Move code in instantiate_scev_poly.\n\nFrom-SVN: r154536", "tree": {"sha": "dc513c2f1f07f28f7c6e05c53f44d112fd748e24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc513c2f1f07f28f7c6e05c53f44d112fd748e24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec6636ebd828017e1af5b0515cf48149b13003b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6636ebd828017e1af5b0515cf48149b13003b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec6636ebd828017e1af5b0515cf48149b13003b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec6636ebd828017e1af5b0515cf48149b13003b7/comments", "author": null, "committer": {"login": "sebpop", "id": 568397, "node_id": "MDQ6VXNlcjU2ODM5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/568397?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sebpop", "html_url": "https://github.com/sebpop", "followers_url": "https://api.github.com/users/sebpop/followers", "following_url": "https://api.github.com/users/sebpop/following{/other_user}", "gists_url": "https://api.github.com/users/sebpop/gists{/gist_id}", "starred_url": "https://api.github.com/users/sebpop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sebpop/subscriptions", "organizations_url": "https://api.github.com/users/sebpop/orgs", "repos_url": "https://api.github.com/users/sebpop/repos", "events_url": "https://api.github.com/users/sebpop/events{/privacy}", "received_events_url": "https://api.github.com/users/sebpop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ec0665dc4e07633752015c67e051b5d6d059c1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ec0665dc4e07633752015c67e051b5d6d059c1b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ec0665dc4e07633752015c67e051b5d6d059c1b"}], "stats": {"total": 67, "additions": 48, "deletions": 19}, "files": [{"sha": "d4227df59a5bf7d83034e6496eb7ab3083e95a24", "filename": "gcc/ChangeLog.graphite", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6636ebd828017e1af5b0515cf48149b13003b7/gcc%2FChangeLog.graphite", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6636ebd828017e1af5b0515cf48149b13003b7/gcc%2FChangeLog.graphite", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.graphite?ref=ec6636ebd828017e1af5b0515cf48149b13003b7", "patch": "@@ -1,3 +1,8 @@\n+2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n+\n+\t* tree-scalar-evolution.c (instantiate_scev_poly): New.\n+\t(instantiate_scev_1): Move code in instantiate_scev_poly.\n+\n 2009-09-01  Sebastian Pop  <sebastian.pop@amd.com>\n \n \t* tree-scalar-evolution.c (instantiate_scev_bitnot): New."}, {"sha": "6c9e09193c780d61a1057549d395fac28cbaf30b", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 43, "deletions": 19, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec6636ebd828017e1af5b0515cf48149b13003b7/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec6636ebd828017e1af5b0515cf48149b13003b7/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=ec6636ebd828017e1af5b0515cf48149b13003b7", "patch": "@@ -2191,6 +2191,47 @@ instantiate_scev_name (basic_block instantiate_below,\n \n }\n \n+/* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n+   and EVOLUTION_LOOP, that were left under a symbolic form.\n+\n+   CHREC is a polynomial chain of recurrence to be instantiated.\n+\n+   CACHE is the cache of already instantiated values.\n+\n+   FOLD_CONVERSIONS should be set to true when the conversions that\n+   may wrap in signed/pointer type are folded, as long as the value of\n+   the chrec is preserved.\n+\n+   SIZE_EXPR is used for computing the size of the expression to be\n+   instantiated, and to stop if it exceeds some limit.  */\n+\n+static tree\n+instantiate_scev_poly (basic_block instantiate_below,\n+\t\t       struct loop *evolution_loop, tree chrec,\n+\t\t       bool fold_conversions, htab_t cache, int size_expr)\n+{\n+  tree op1;\n+  tree op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+\t\t\t\t CHREC_LEFT (chrec), fold_conversions, cache,\n+\t\t\t\t size_expr);\n+  if (op0 == chrec_dont_know)\n+    return chrec_dont_know;\n+\n+  op1 = instantiate_scev_1 (instantiate_below, evolution_loop,\n+\t\t\t    CHREC_RIGHT (chrec), fold_conversions, cache,\n+\t\t\t    size_expr);\n+  if (op1 == chrec_dont_know)\n+    return chrec_dont_know;\n+\n+  if (CHREC_LEFT (chrec) != op0\n+      || CHREC_RIGHT (chrec) != op1)\n+    {\n+      op1 = chrec_convert_rhs (chrec_type (op0), op1, NULL);\n+      chrec = build_polynomial_chrec (CHREC_VARIABLE (chrec), op0, op1);\n+    }\n+  return chrec;\n+}\n+\n /* Analyze all the parameters of the chrec, between INSTANTIATE_BELOW\n    and EVOLUTION_LOOP, that were left under a symbolic form.\n \n@@ -2371,25 +2412,8 @@ instantiate_scev_1 (basic_block instantiate_below,\n \t\t\t\t    fold_conversions, cache, size_expr);\n \n     case POLYNOMIAL_CHREC:\n-      op0 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tCHREC_LEFT (chrec), fold_conversions, cache,\n-\t\t\t\tsize_expr);\n-      if (op0 == chrec_dont_know)\n-\treturn chrec_dont_know;\n-\n-      op1 = instantiate_scev_1 (instantiate_below, evolution_loop,\n-\t\t\t\tCHREC_RIGHT (chrec), fold_conversions, cache,\n-\t\t\t\tsize_expr);\n-      if (op1 == chrec_dont_know)\n-\treturn chrec_dont_know;\n-\n-      if (CHREC_LEFT (chrec) != op0\n-\t  || CHREC_RIGHT (chrec) != op1)\n-\t{\n-\t  op1 = chrec_convert_rhs (chrec_type (op0), op1, NULL);\n-\t  chrec = build_polynomial_chrec (CHREC_VARIABLE (chrec), op0, op1);\n-\t}\n-      return chrec;\n+      return instantiate_scev_poly (instantiate_below, evolution_loop, chrec,\n+\t\t\t\t    fold_conversions, cache, size_expr);\n \n     case POINTER_PLUS_EXPR:\n     case PLUS_EXPR:"}]}