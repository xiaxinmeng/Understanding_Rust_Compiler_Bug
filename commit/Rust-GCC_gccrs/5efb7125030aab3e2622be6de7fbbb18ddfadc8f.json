{"sha": "5efb7125030aab3e2622be6de7fbbb18ddfadc8f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWVmYjcxMjUwMzBhYWIzZTI2MjJiZTZkZTdmYmJiMThkZGZhZGM4Zg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2019-08-13T08:08:22Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-08-13T08:08:22Z"}, "message": "[Ada] Do not remove side-effects in an others_clause with function calls\n\nAn aggregate can be handled by the backend if it consists of static\nconstants of an elementary type, or null. If a component is a type\nconversion we must preanalyze and resolve it to determine whether the\nultimate value is in one of these categories.  Previously we did a full\nanalysis and resolution of the expression for the component, which could\nlead to a removal of side-effects, which is semantically incorrect if\nthe expression includes functions with side-effects (e.g. a call to a\nrandom generator).\n\n2019-08-13  Ed Schonberg  <schonberg@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend):  Preanalyze\n\texpression, rather do a full analysis, to prevent unwanted\n\tremoval of side effects which mask the intent of the expression.\n\ngcc/testsuite/\n\n\t* gnat.dg/aggr27.adb: New testcase.\n\nFrom-SVN: r274355", "tree": {"sha": "c2d08692c744bd2726cb6c50d40e0988ce4c5e50", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2d08692c744bd2726cb6c50d40e0988ce4c5e50"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5efb7125030aab3e2622be6de7fbbb18ddfadc8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efb7125030aab3e2622be6de7fbbb18ddfadc8f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5efb7125030aab3e2622be6de7fbbb18ddfadc8f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5efb7125030aab3e2622be6de7fbbb18ddfadc8f/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5b3b4d60896349500c8e338445570a1a6a7fcf61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b3b4d60896349500c8e338445570a1a6a7fcf61", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b3b4d60896349500c8e338445570a1a6a7fcf61"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "dfc30f2094ce18a6f728a3c5493c932f5f7e4f03", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb7125030aab3e2622be6de7fbbb18ddfadc8f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb7125030aab3e2622be6de7fbbb18ddfadc8f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5efb7125030aab3e2622be6de7fbbb18ddfadc8f", "patch": "@@ -1,3 +1,9 @@\n+2019-08-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend):  Preanalyze\n+\texpression, rather do a full analysis, to prevent unwanted\n+\tremoval of side effects which mask the intent of the expression.\n+\n 2019-08-13  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* impunit.adb (Non_Imp_File_Names_95): Add"}, {"sha": "8668188f8d8861a4158745ad73b2d9860010de8e", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb7125030aab3e2622be6de7fbbb18ddfadc8f/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb7125030aab3e2622be6de7fbbb18ddfadc8f/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=5efb7125030aab3e2622be6de7fbbb18ddfadc8f", "patch": "@@ -5321,6 +5321,16 @@ package body Exp_Aggr is\n             return False;\n          end if;\n \n+         --  If the expression has side effects (e.g. contains calls with\n+         --  potential side effects) reject as well. We only preanalyze the\n+         --  expression to prevent the removal of intended side effects.\n+\n+         Preanalyze_And_Resolve (Expr, Ctyp);\n+\n+         if not Side_Effect_Free (Expr) then\n+            return False;\n+         end if;\n+\n          --  The expression needs to be analyzed if True is returned\n \n          Analyze_And_Resolve (Expr, Ctyp);"}, {"sha": "c1e28aa10a41c3e0992a5da6dc366c24a02eb155", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb7125030aab3e2622be6de7fbbb18ddfadc8f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb7125030aab3e2622be6de7fbbb18ddfadc8f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5efb7125030aab3e2622be6de7fbbb18ddfadc8f", "patch": "@@ -1,3 +1,7 @@\n+2019-08-13  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* gnat.dg/aggr27.adb: New testcase.\n+\n 2019-08-13  Gary Dismukes  <dismukes@adacore.com>\n \n \t* gnat.dg/aggr26.adb: New testcase."}, {"sha": "43b620680626959f95b722b56a020e6681cb522b", "filename": "gcc/testsuite/gnat.dg/aggr27.adb", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5efb7125030aab3e2622be6de7fbbb18ddfadc8f/gcc%2Ftestsuite%2Fgnat.dg%2Faggr27.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5efb7125030aab3e2622be6de7fbbb18ddfadc8f/gcc%2Ftestsuite%2Fgnat.dg%2Faggr27.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Faggr27.adb?ref=5efb7125030aab3e2622be6de7fbbb18ddfadc8f", "patch": "@@ -0,0 +1,26 @@\n+--  { dg-do run }\n+--  { dg-options \"-gnatws -gnata\" }\n+\n+with GNAT.Random_Numbers;\n+\n+procedure Aggr27 is\n+\n+   Gen: GNAT.Random_Numbers.Generator;\n+\n+   function Random return Long_Long_Integer is\n+      Rand : Integer := GNAT.Random_Numbers.Random(Gen);\n+   begin\n+      return Long_Long_Integer(Rand);\n+   end Random;\n+\n+   type Values is range 1 .. 4;\n+\n+   Seq_LLI : array (Values) of Long_Long_Integer := (others => Random);\n+   Seq_I   : array (Values) of Integer           := (others => Integer(Random));\n+\n+begin\n+   --  Verify that there is at least two  different entries in each.\n+\n+   pragma Assert (For some E of Seq_LLI => E /= Seq_LLI (Values'First));\n+   pragma Assert (For some E of Seq_I => E /= Seq_I (Values'First));\n+end Aggr27;"}]}