{"sha": "26f2269fc4d1e4f97044db07b159f6d4eb4ab963", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZmMjI2OWZjNGQxZTRmOTcwNDRkYjA3YjE1OWY2ZDRlYjRhYjk2Mw==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-11-16T15:20:03Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-11-16T15:20:03Z"}, "message": "PR c++/54875 -  Error with alias template that resolves to an enum\n\nConsider this short example:\n\n     1\ttemplate<typename T>\n     2\tusing AddConst = T const;\n     3\n     4\tenum FwdEnum : int;\n     5\n     6\tint main() {\n     7\t  AddConst<FwdEnum> *ptr = nullptr;\n     8\t}\n\nAt line 7, when we build the type for AddConst<FwdEnum> in\nlookup_template_class_1, the resulting type is the enum FwdEnum.  This\nconfuses lookup_template_class_1 near the if below, wrongly making it\ntaking the branch and thus calling tsubst_enum while it shouldn't:\n\n      if (TREE_CODE (t) == ENUMERAL_TYPE && !is_dependent_type)\n\t/* Now that the type has been registered on the instantiations\n\t   list, we set up the enumerators.  Because the enumeration\n\t   constants may involve the enumeration type itself, we make\n\t   sure to register the type first, and then create the\n\t   constants.  That way, doing tsubst_expr for the enumeration\n\t   constants won't result in recursive calls here; we'll find\n\t   the instantiation and exit above.  */\n\ttsubst_enum (template_type, t, arglist);\n\nBefore the alias template feature, the only reason why TREE_CODE (t)\n== ENUMERAL_TYPE would be true is when lookup_template_class_1 is\ncalled for an enum that is a member of a class template.  But that\ncondition can be also true for an alias template instantiation.\n\nSo I guess that condition should be changed to TREE_CODE\n(template_type) == ENUMERAL_TYPE, to specifically detect the member\nenum of a class template case.  Note that for the alias template\ninstantiation case above, template_type points to a TEMPLATE_TYPE_PARM\nwhich name is AddConst.\n\nThis is what the patchlet below does.\n\nBootstrapped and tested on x86_64-unknown-linux-gnu against trunk.\n\ngcc/cp/\n\n\t* pt.c (lookup_template_class_1): Look at the type of the\n\tpotential member enum of class template to determine if we are\n\tactually substituting into a member enum of class template.\n\ngcc/testsuite/\n\n\t* g++.dg/cpp0x/alias-decl-27.C: New test.\n\nFrom-SVN: r193562", "tree": {"sha": "e46d3166215d61ab370acfda67c709b799187321", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e46d3166215d61ab370acfda67c709b799187321"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26f2269fc4d1e4f97044db07b159f6d4eb4ab963", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f2269fc4d1e4f97044db07b159f6d4eb4ab963", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26f2269fc4d1e4f97044db07b159f6d4eb4ab963", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26f2269fc4d1e4f97044db07b159f6d4eb4ab963/comments", "author": null, "committer": null, "parents": [{"sha": "2b723e217a034af37849bf2dae8fc0dba1c7f2ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b723e217a034af37849bf2dae8fc0dba1c7f2ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b723e217a034af37849bf2dae8fc0dba1c7f2ee"}], "stats": {"total": 25, "additions": 24, "deletions": 1}, "files": [{"sha": "3b0918af5d8fe67539d6744572ae602bd70c80b7", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f2269fc4d1e4f97044db07b159f6d4eb4ab963/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f2269fc4d1e4f97044db07b159f6d4eb4ab963/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=26f2269fc4d1e4f97044db07b159f6d4eb4ab963", "patch": "@@ -1,3 +1,10 @@\n+2012-11-16  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/54875\n+\t* pt.c (lookup_template_class_1): Look at the type of the\n+\tpotential member enum of class template to determine if we are\n+\tactually substituting into a member enum of class template.\n+\n 2012-11-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/55337"}, {"sha": "101b22d9bcfffde6e6483c40de388ab1326801e8", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f2269fc4d1e4f97044db07b159f6d4eb4ab963/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f2269fc4d1e4f97044db07b159f6d4eb4ab963/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=26f2269fc4d1e4f97044db07b159f6d4eb4ab963", "patch": "@@ -7487,7 +7487,7 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n \t= tree_cons (arglist, t,\n \t\t     DECL_TEMPLATE_INSTANTIATIONS (templ));\n \n-      if (TREE_CODE (t) == ENUMERAL_TYPE && !is_dependent_type)\n+      if (TREE_CODE (template_type) == ENUMERAL_TYPE && !is_dependent_type)\n \t/* Now that the type has been registered on the instantiations\n \t   list, we set up the enumerators.  Because the enumeration\n \t   constants may involve the enumeration type itself, we make"}, {"sha": "314c2e4565af28b6267d65be31449627060ce29c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f2269fc4d1e4f97044db07b159f6d4eb4ab963/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f2269fc4d1e4f97044db07b159f6d4eb4ab963/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=26f2269fc4d1e4f97044db07b159f6d4eb4ab963", "patch": "@@ -1,3 +1,8 @@\n+2012-11-16  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/54875\n+\t* g++.dg/cpp0x/alias-decl-27.C: New test.\n+\n 2012-11-16  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/55337"}, {"sha": "91208abf90eb9671f93b0fee4c33af85204bdca9", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-27.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26f2269fc4d1e4f97044db07b159f6d4eb4ab963/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-27.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26f2269fc4d1e4f97044db07b159f6d4eb4ab963/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-27.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-27.C?ref=26f2269fc4d1e4f97044db07b159f6d4eb4ab963", "patch": "@@ -0,0 +1,11 @@\n+// Origin: PR c++/54875\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T>\n+using AddConst = T const;\n+\n+enum FwdEnum : int;\n+\n+int main() {\n+  AddConst<FwdEnum> *ptr = nullptr;\n+}"}]}