{"sha": "f31c0018872d05b9fbdf6134a5d76838da4db4dc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjMxYzAwMTg4NzJkMDViOWZiZGY2MTM0YTVkNzY4MzhkYTRkYjRkYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-10-26T09:30:29Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-10-26T09:30:29Z"}, "message": "re PR driver/41844 (lto1: warning: unknown register name: line-length-none)\n\n2011-10-26  Richard Guenther  <rguenther@suse.de>\n\n\tPR lto/41844\n\t* Makefile.in (lto-wrapper): Depend on and link against\n\topts-common.o.\n\t(lto-wrapper.o): Depend on $(OPTS_H) and $(OPTIONS_H).\n\t* lto-wrapper.c (get_options_from_collect_gcc_options): New function.\n\t(run_gcc): Use it.  Filter out language specific options.\n\nFrom-SVN: r180517", "tree": {"sha": "cb359c0379cd06029ee75ba612f48fea9252bcc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cb359c0379cd06029ee75ba612f48fea9252bcc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f31c0018872d05b9fbdf6134a5d76838da4db4dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f31c0018872d05b9fbdf6134a5d76838da4db4dc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f31c0018872d05b9fbdf6134a5d76838da4db4dc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f31c0018872d05b9fbdf6134a5d76838da4db4dc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fd44464875797e55975bb3b5f62900d60bbbec2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd44464875797e55975bb3b5f62900d60bbbec2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd44464875797e55975bb3b5f62900d60bbbec2a"}], "stats": {"total": 194, "additions": 121, "deletions": 73}, "files": [{"sha": "a54e9490afee74513719c078b09739b2902bdcd1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31c0018872d05b9fbdf6134a5d76838da4db4dc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31c0018872d05b9fbdf6134a5d76838da4db4dc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f31c0018872d05b9fbdf6134a5d76838da4db4dc", "patch": "@@ -1,3 +1,12 @@\n+2011-10-26  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR lto/41844\n+\t* Makefile.in (lto-wrapper): Depend on and link against\n+\topts-common.o.\n+\t(lto-wrapper.o): Depend on $(OPTS_H) and $(OPTIONS_H).\n+\t* lto-wrapper.c (get_options_from_collect_gcc_options): New function.\n+\t(run_gcc): Use it.  Filter out language specific options.\n+\n 2011-10-26  Andreas Tobler  <andreast@fgznet.ch>\n \n \t* config/i386/freebsd64.h (LINK_SPEC): Emit the same warning as the"}, {"sha": "ed6e31bb25e10c6308fa70c0f0c857c0169cdded", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31c0018872d05b9fbdf6134a5d76838da4db4dc/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31c0018872d05b9fbdf6134a5d76838da4db4dc/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=f31c0018872d05b9fbdf6134a5d76838da4db4dc", "patch": "@@ -2069,12 +2069,13 @@ collect2-aix.o : collect2-aix.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n tlink.o: tlink.c $(DEMANGLE_H) $(HASHTAB_H) $(CONFIG_H) $(SYSTEM_H) coretypes.h $(TM_H) \\\n     $(OBSTACK_H) collect2.h intl.h $(DIAGNOSTIC_CORE_H)\n \n-lto-wrapper$(exeext): lto-wrapper.o $(LIBDEPS)\n-\t+$(LINKER) $(ALL_COMPILERFLAGS) $(LDFLAGS) -o T$@ lto-wrapper.o $(LIBS)\n+lto-wrapper$(exeext): lto-wrapper.o ggc-none.o libcommon-target.a $(LIBDEPS)\n+\t+$(LINKER) $(ALL_COMPILERFLAGS) $(LDFLAGS) -o T$@ \\\n+\t    lto-wrapper.o ggc-none.o libcommon-target.a $(LIBS)\n \tmv -f T$@ $@\n \n lto-wrapper.o: lto-wrapper.c $(CONFIG_H) $(SYSTEM_H) coretypes.h intl.h \\\n-\t$(OBSTACK_H) $(DIAGNOSTIC_H)\n+\t$(OBSTACK_H) $(DIAGNOSTIC_H) $(OPTS_H) $(OPTIONS_H)\n \n # Files used by all variants of C.\n c-family/c-common.o : c-family/c-common.c $(CONFIG_H) $(SYSTEM_H) coretypes.h \\"}, {"sha": "f5f3dd24b455e022eb5ecaa1710d97665b5b99ba", "filename": "gcc/lto-wrapper.c", "status": "modified", "additions": 108, "deletions": 70, "changes": 178, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f31c0018872d05b9fbdf6134a5d76838da4db4dc/gcc%2Flto-wrapper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f31c0018872d05b9fbdf6134a5d76838da4db4dc/gcc%2Flto-wrapper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto-wrapper.c?ref=f31c0018872d05b9fbdf6134a5d76838da4db4dc", "patch": "@@ -43,6 +43,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"intl.h\"\n #include \"diagnostic.h\"\n #include \"obstack.h\"\n+#include \"opts.h\"\n+#include \"options.h\"\n \n int debug;\t\t\t\t/* true if -save-temps.  */\n int verbose;\t\t\t\t/* true if -v.  */\n@@ -280,6 +282,52 @@ fork_execute (char **argv)\n /* Template of LTRANS dumpbase suffix.  */\n #define DUMPBASE_SUFFIX \".ltrans18446744073709551615\"\n \n+/* Create decoded options from the COLLECT_GCC and COLLECT_GCC_OPTIONS\n+   environment according to LANG_MASK.  */\n+\n+static void\n+get_options_from_collect_gcc_options (const char *collect_gcc,\n+\t\t\t\t      const char *collect_gcc_options,\n+\t\t\t\t      unsigned int lang_mask,\n+\t\t\t\t      struct cl_decoded_option **decoded_options,\n+\t\t\t\t      unsigned int *decoded_options_count)\n+{\n+  char *argv_storage;\n+  const char **argv;\n+  int i, j, argc;\n+\n+  /* Count arguments.  */\n+  argc = 0;\n+  for (j = 0; collect_gcc_options[j] != '\\0'; ++j)\n+    if (collect_gcc_options[j] == '\\'')\n+      ++argc;\n+  if (argc % 2 != 0)\n+    fatal (\"malformed COLLECT_GCC_OPTIONS\");\n+\n+  /* Copy the options to a argv-like array.  */\n+  argc /= 2;\n+  argv = (const char **) xmalloc ((argc + 2) * sizeof (char *));\n+  argv[0] = collect_gcc;\n+  argv_storage = xstrdup (collect_gcc_options);\n+  for (i = 1, j = 0; argv_storage[j] != '\\0'; ++j)\n+    {\n+      if (argv_storage[j] == '\\'')\n+\t{\n+\t  argv[i++] = &argv_storage[++j];\n+\t  while (argv_storage[j] != '\\'')\n+\t    ++j;\n+\t  argv_storage[j] = '\\0';\n+\t}\n+    }\n+  argv[i] = NULL;\n+\n+  decode_cmdline_options_to_array (argc, (const char **)argv,\n+\t\t\t\t   lang_mask,\n+\t\t\t\t   decoded_options, decoded_options_count);\n+  free (argv);\n+}\n+\n+\n /* Execute gcc. ARGC is the number of arguments. ARGV contains the arguments. */\n \n static void\n@@ -290,99 +338,88 @@ run_gcc (unsigned argc, char *argv[])\n   const char **argv_ptr;\n   char *list_option_full = NULL;\n   const char *linker_output = NULL;\n-  const char *collect_gcc_options, *collect_gcc;\n+  const char *collect_gcc, *collect_gcc_options;\n   struct obstack env_obstack;\n-  bool seen_o = false;\n   int parallel = 0;\n   int jobserver = 0;\n   bool no_partition = false;\n+  struct cl_decoded_option *decoded_options;\n+  unsigned int decoded_options_count;\n \n   /* Get the driver and options.  */\n   collect_gcc = getenv (\"COLLECT_GCC\");\n   if (!collect_gcc)\n     fatal (\"environment variable COLLECT_GCC must be set\");\n-\n-  /* Set the CFLAGS environment variable.  */\n   collect_gcc_options = getenv (\"COLLECT_GCC_OPTIONS\");\n   if (!collect_gcc_options)\n     fatal (\"environment variable COLLECT_GCC_OPTIONS must be set\");\n-\n-  /* Count arguments.  */\n-  i = 0;\n-  for (j = 0; collect_gcc_options[j] != '\\0'; ++j)\n-    if (collect_gcc_options[j] == '\\'')\n-      ++i;\n-\n-  if (i % 2 != 0)\n-    fatal (\"malformed COLLECT_GCC_OPTIONS\");\n+  get_options_from_collect_gcc_options (collect_gcc, collect_gcc_options,\n+\t\t\t\t\tCL_LANG_ALL,\n+\t\t\t\t\t&decoded_options,\n+\t\t\t\t\t&decoded_options_count);\n \n   /* Initalize the common arguments for the driver.  */\n-  new_argv = (const char **) xmalloc ((15 + i / 2 + argc) * sizeof (char *));\n+  new_argv = (const char **) xmalloc ((15 + decoded_options_count + argc)\n+\t\t\t\t      * sizeof (char *));\n   argv_ptr = new_argv;\n   *argv_ptr++ = collect_gcc;\n   *argv_ptr++ = \"-xlto\";\n   *argv_ptr++ = \"-c\";\n-  for (j = 0; collect_gcc_options[j] != '\\0'; ++j)\n-    if (collect_gcc_options[j] == '\\'')\n-      {\n-\tchar *option;\n-\n-\t++j;\n-\ti = j;\n-\twhile (collect_gcc_options[j] != '\\'')\n-\t  ++j;\n-\n-\tobstack_init (&env_obstack);\n-\tobstack_grow (&env_obstack, &collect_gcc_options[i], j - i);\n-\tobstack_1grow (&env_obstack, 0);\n-\toption = XOBFINISH (&env_obstack, char *);\n-\tif (seen_o)\n-\t  {\n-\t    linker_output = option;\n-\t    seen_o = false;\n-\t    continue;\n-\t  }\n-\n-\t/* If we see -o, skip it and skip and record its argument.  */\n-\tif (option[0] == '-' && option[1] == 'o')\n-\t  {\n-\t    if (option[2] == '\\0')\n-\t      seen_o = true;\n-\t    else\n-\t      linker_output = &option[2];\n-\t    continue;\n-\t  }\n+  for (j = 1; j < decoded_options_count; ++j)\n+    {\n+      struct cl_decoded_option *option = &decoded_options[j];\n \n-\tif (strcmp (option, \"-save-temps\") == 0)\n+      /* Do not pass on frontend specific flags.  */\n+      if (!(cl_options[option->opt_index].flags\n+\t    & (CL_COMMON|CL_TARGET|CL_DRIVER)))\n+\tcontinue;\n+\n+      switch (option->opt_index)\n+\t{\n+\tcase OPT_o:\n+\t  linker_output = option->arg;\n+\t  /* We generate new intermediate output, drop this arg.  */\n+\t  continue;\n+\n+\tcase OPT_save_temps:\n \t  debug = 1;\n-\tif (strcmp (option, \"-v\") == 0)\n+\t  break;\n+\n+\tcase OPT_v:\n \t  verbose = 1;\n+\t  break;\n \n-\tif (strcmp (option, \"-flto-partition=none\") == 0)\n+\tcase OPT_flto_partition_none:\n \t  no_partition = true;\n-\t/* We've handled these LTO options, do not pass them on.  */\n-\tif (strncmp (option, \"-flto=\", 6) == 0\n-\t    || !strcmp (option, \"-flto\"))\n-\t  {\n-\t    lto_mode = LTO_MODE_WHOPR;\n-\t    if (option[5] == '=')\n-\t      {\n-\t\tif (!strcmp (option + 6, \"jobserver\"))\n-\t\t  {\n-\t\t    jobserver = 1;\n-\t\t    parallel = 1;\n-\t\t  }\n-\t\telse\n-\t\t  {\n-\t\t    parallel = atoi (option + 6);\n-\t\t    if (parallel <= 1)\n-\t\t      parallel = 0;\n-\t\t  }\n-\t      }\n-\t  }\n-\telse\n-\t  *argv_ptr++ = option;\n-      }\n+\t  break;\n+\n+\tcase OPT_flto_:\n+\t  if (strcmp (option->arg, \"jobserver\") == 0)\n+\t    {\n+\t      jobserver = 1;\n+\t      parallel = 1;\n+\t    }\n+\t  else\n+\t    {\n+\t      parallel = atoi (option->arg);\n+\t      if (parallel <= 1)\n+\t\tparallel = 0;\n+\t    }\n+\t  /* Fallthru.  */\n+\n+\tcase OPT_flto:\n+\t  lto_mode = LTO_MODE_WHOPR;\n+\t  /* We've handled these LTO options, do not pass them on.  */\n+\t  continue;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+\n+      /* Pass the option on.  */\n+      *argv_ptr++ = option->orig_option_with_args_text;\n+    }\n+\n   if (no_partition)\n     {\n       lto_mode = LTO_MODE_LTO;\n@@ -662,6 +699,7 @@ main (int argc, char *argv[])\n   /* We may be called with all the arguments stored in some file and\n      passed with @file.  Expand them into argv before processing.  */\n   expandargv (&argc, &argv);\n+\n   run_gcc (argc, argv);\n \n   return 0;"}]}