{"sha": "784e5ae13ae4f05fbd5aaebdc98e176b513b3c62", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Nzg0ZTVhZTEzYWU0ZjA1ZmJkNWFhZWJkYzk4ZTE3NmI1MTNiM2M2Mg==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2009-11-30T16:56:37Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2009-11-30T16:56:37Z"}, "message": "i386-builtin-types.def (V4DF_FTYPE_V4DF_V4DF_V4DI): New.\n\n\t* config/i386/i386-builtin-types.def (V4DF_FTYPE_V4DF_V4DF_V4DI): New.\n\t(V8SF_FTYPE_V8SF_V8SF_V8SI): New.\n\t* config/i386/i386.c (ix86_vectorize_builtin_vec_perm): Support\n\tV4DF and V8SF for AVX; relax constraint on V4SF to SSE1 from SSE2.\n\t(IX86_BUILTIN_VEC_PERM_V4DF, IX86_BUILTIN_VEC_PERM_V8SF): New.\n\t(bdesc_args): Add them.\n\t(ix86_expand_builtin): Expand them.\n\t(expand_vec_perm_pshufb2): Only operate on 16-byte vectors.\n\nFrom-SVN: r154831", "tree": {"sha": "3204678d58c7a4ef511bdb984c0d1b77f92d014a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3204678d58c7a4ef511bdb984c0d1b77f92d014a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/784e5ae13ae4f05fbd5aaebdc98e176b513b3c62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784e5ae13ae4f05fbd5aaebdc98e176b513b3c62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/784e5ae13ae4f05fbd5aaebdc98e176b513b3c62", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/784e5ae13ae4f05fbd5aaebdc98e176b513b3c62/comments", "author": null, "committer": null, "parents": [{"sha": "1feb57517d546f3c026833ea9cc5880c8c01b050", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1feb57517d546f3c026833ea9cc5880c8c01b050", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1feb57517d546f3c026833ea9cc5880c8c01b050"}], "stats": {"total": 54, "additions": 45, "deletions": 9}, "files": [{"sha": "8260bb6f2f85503fe7a11ca43ef7e8b9011a8bef", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784e5ae13ae4f05fbd5aaebdc98e176b513b3c62/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784e5ae13ae4f05fbd5aaebdc98e176b513b3c62/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=784e5ae13ae4f05fbd5aaebdc98e176b513b3c62", "patch": "@@ -1,3 +1,14 @@\n+2009-11-30  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386-builtin-types.def (V4DF_FTYPE_V4DF_V4DF_V4DI): New.\n+\t(V8SF_FTYPE_V8SF_V8SF_V8SI): New.\n+\t* config/i386/i386.c (ix86_vectorize_builtin_vec_perm): Support\n+\tV4DF and V8SF for AVX; relax constraint on V4SF to SSE1 from SSE2.\n+\t(IX86_BUILTIN_VEC_PERM_V4DF, IX86_BUILTIN_VEC_PERM_V8SF): New.\n+\t(bdesc_args): Add them.\n+\t(ix86_expand_builtin): Expand them.\n+\t(expand_vec_perm_pshufb2): Only operate on 16-byte vectors.\n+\n 2009-11-30  Martin Jambor  <mjambor@suse.cz>\n \n \tPR middle-end/42206"}, {"sha": "0843d4c9e36fcd4db371e900bff4d9911595c099", "filename": "gcc/config/i386/i386-builtin-types.def", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784e5ae13ae4f05fbd5aaebdc98e176b513b3c62/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784e5ae13ae4f05fbd5aaebdc98e176b513b3c62/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin-types.def?ref=784e5ae13ae4f05fbd5aaebdc98e176b513b3c62", "patch": "@@ -351,6 +351,8 @@ DEF_FUNCTION_TYPE (V2UDI, V2UDI, V2UDI, V2UDI)\n DEF_FUNCTION_TYPE (V4USI, V4USI, V4USI, V4USI)\n DEF_FUNCTION_TYPE (V8UHI, V8UHI, V8UHI, V8UHI)\n DEF_FUNCTION_TYPE (V16UQI, V16UQI, V16UQI, V16UQI)\n+DEF_FUNCTION_TYPE (V4DF, V4DF, V4DF, V4DI)\n+DEF_FUNCTION_TYPE (V8SF, V8SF, V8SF, V8SI)\n \n DEF_FUNCTION_TYPE (V2DI, V2DI, V2DI, UINT, UINT)\n DEF_FUNCTION_TYPE (V4HI, HI, HI, HI, HI)"}, {"sha": "be8f38ba1841044352b0c1d78e5048b4d0dba87b", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/784e5ae13ae4f05fbd5aaebdc98e176b513b3c62/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/784e5ae13ae4f05fbd5aaebdc98e176b513b3c62/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=784e5ae13ae4f05fbd5aaebdc98e176b513b3c62", "patch": "@@ -21047,6 +21047,8 @@ enum ix86_builtins\n   IX86_BUILTIN_VEC_PERM_V4SI_U,\n   IX86_BUILTIN_VEC_PERM_V8HI_U,\n   IX86_BUILTIN_VEC_PERM_V16QI_U,\n+  IX86_BUILTIN_VEC_PERM_V4DF,\n+  IX86_BUILTIN_VEC_PERM_V8SF,\n \n   /* FMA4 and XOP instructions.  */\n   IX86_BUILTIN_VFMADDSS,\n@@ -21722,7 +21724,7 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_shufpd, \"__builtin_ia32_shufpd\", IX86_BUILTIN_SHUFPD, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_INT },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_nothing, \"__builtin_ia32_vec_perm_v2df\", IX86_BUILTIN_VEC_PERM_V2DF, UNKNOWN, (int) V2DF_FTYPE_V2DF_V2DF_V2DI },\n-  { OPTION_MASK_ISA_SSE2, CODE_FOR_nothing, \"__builtin_ia32_vec_perm_v4sf\", IX86_BUILTIN_VEC_PERM_V4SF, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SI },\n+  { OPTION_MASK_ISA_SSE, CODE_FOR_nothing, \"__builtin_ia32_vec_perm_v4sf\", IX86_BUILTIN_VEC_PERM_V4SF, UNKNOWN, (int) V4SF_FTYPE_V4SF_V4SF_V4SI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_nothing, \"__builtin_ia32_vec_perm_v2di\", IX86_BUILTIN_VEC_PERM_V2DI, UNKNOWN, (int) V2DI_FTYPE_V2DI_V2DI_V2DI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_nothing, \"__builtin_ia32_vec_perm_v4si\", IX86_BUILTIN_VEC_PERM_V4SI, UNKNOWN, (int) V4SI_FTYPE_V4SI_V4SI_V4SI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_nothing, \"__builtin_ia32_vec_perm_v8hi\", IX86_BUILTIN_VEC_PERM_V8HI, UNKNOWN, (int) V8HI_FTYPE_V8HI_V8HI_V8HI },\n@@ -21731,6 +21733,8 @@ static const struct builtin_description bdesc_args[] =\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_nothing, \"__builtin_ia32_vec_perm_v4si_u\", IX86_BUILTIN_VEC_PERM_V4SI_U, UNKNOWN, (int) V4USI_FTYPE_V4USI_V4USI_V4USI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_nothing, \"__builtin_ia32_vec_perm_v8hi_u\", IX86_BUILTIN_VEC_PERM_V8HI_U, UNKNOWN, (int) V8UHI_FTYPE_V8UHI_V8UHI_V8UHI },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_nothing, \"__builtin_ia32_vec_perm_v16qi_u\", IX86_BUILTIN_VEC_PERM_V16QI_U, UNKNOWN, (int) V16UQI_FTYPE_V16UQI_V16UQI_V16UQI },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_nothing, \"__builtin_ia32_vec_perm_v4df\", IX86_BUILTIN_VEC_PERM_V4DF, UNKNOWN, (int) V4DF_FTYPE_V4DF_V4DF_V4DI },\n+  { OPTION_MASK_ISA_AVX, CODE_FOR_nothing, \"__builtin_ia32_vec_perm_v8sf\", IX86_BUILTIN_VEC_PERM_V8SF, UNKNOWN, (int) V8SF_FTYPE_V8SF_V8SF_V8SI },\n \n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_movmskpd, \"__builtin_ia32_movmskpd\", IX86_BUILTIN_MOVMSKPD, UNKNOWN, (int) INT_FTYPE_V2DF  },\n   { OPTION_MASK_ISA_SSE2, CODE_FOR_sse2_pmovmskb, \"__builtin_ia32_pmovmskb128\", IX86_BUILTIN_PMOVMSKB128, UNKNOWN, (int) INT_FTYPE_V16QI },\n@@ -24151,6 +24155,8 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget ATTRIBUTE_UNUSED,\n     case IX86_BUILTIN_VEC_PERM_V4SI_U:\n     case IX86_BUILTIN_VEC_PERM_V8HI_U:\n     case IX86_BUILTIN_VEC_PERM_V16QI_U:\n+    case IX86_BUILTIN_VEC_PERM_V4DF:\n+    case IX86_BUILTIN_VEC_PERM_V8SF:\n       return ix86_expand_vec_perm_builtin (exp);\n \n     case IX86_BUILTIN_INFQ:\n@@ -28976,21 +28982,33 @@ ix86_vectorize_builtin_vec_perm (tree vec_type, tree *mask_type)\n {\n   tree itype = TREE_TYPE (vec_type);\n   bool u = TYPE_UNSIGNED (itype);\n+  enum machine_mode vmode = TYPE_MODE (vec_type);\n   enum ix86_builtins fcode;\n+  bool ok = TARGET_SSE2;\n \n-  if (!TARGET_SSE2)\n-    return NULL_TREE;\n-\n-  switch (TYPE_MODE (vec_type))\n+  switch (vmode)\n     {\n+    case V4DFmode:\n+      ok = TARGET_AVX;\n+      fcode = IX86_BUILTIN_VEC_PERM_V4DF;\n+      goto get_di;\n     case V2DFmode:\n-      itype = ix86_get_builtin_type (IX86_BT_DI);\n       fcode = IX86_BUILTIN_VEC_PERM_V2DF;\n+    get_di:\n+      itype = ix86_get_builtin_type (IX86_BT_DI);\n       break;\n+\n+    case V8SFmode:\n+      ok = TARGET_AVX;\n+      fcode = IX86_BUILTIN_VEC_PERM_V8SF;\n+      goto get_si;\n     case V4SFmode:\n-      itype = ix86_get_builtin_type (IX86_BT_SI);\n+      ok = TARGET_SSE;\n       fcode = IX86_BUILTIN_VEC_PERM_V4SF;\n+    get_si:\n+      itype = ix86_get_builtin_type (IX86_BT_SI);\n       break;\n+\n     case V2DImode:\n       fcode = u ? IX86_BUILTIN_VEC_PERM_V2DI_U : IX86_BUILTIN_VEC_PERM_V2DI;\n       break;\n@@ -29004,9 +29022,13 @@ ix86_vectorize_builtin_vec_perm (tree vec_type, tree *mask_type)\n       fcode = u ? IX86_BUILTIN_VEC_PERM_V16QI_U : IX86_BUILTIN_VEC_PERM_V16QI;\n       break;\n     default:\n-      return NULL_TREE;\n+      ok = false;\n+      break;\n     }\n \n+  if (!ok)\n+    return NULL_TREE;\n+\n   *mask_type = itype;\n   return ix86_builtins[(int) fcode];\n }\n@@ -29619,8 +29641,9 @@ expand_vec_perm_pshufb2 (struct expand_vec_perm_d *d)\n   rtx rperm[2][16], vperm, l, h, op, m128;\n   unsigned int i, nelt, eltsz;\n \n-  if (!TARGET_SSSE3)\n+  if (!TARGET_SSSE3 || GET_MODE_SIZE (d->vmode) != 16)\n     return false;\n+  gcc_assert (d->op0 != d->op1);\n \n   nelt = d->nelt;\n   eltsz = GET_MODE_SIZE (GET_MODE_INNER (d->vmode));"}]}