{"sha": "1c44c45dbf3b62c14bcd2916365ce090d3af531a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWM0NGM0NWRiZjNiNjJjMTRiY2QyOTE2MzY1Y2UwOTBkM2FmNTMxYQ==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm28@cam.ac.uk", "date": "2000-09-24T09:50:30Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2000-09-24T09:50:30Z"}, "message": "builtins.def (BUILT_IN_LLABS): Add.\n\n\t* builtins.def (BUILT_IN_LLABS): Add.\n\t* builtins.c (expand_builtin): Also abort on BUILT_IN_LLABS.\n\t* c-common.c (c_common_nodes_builtins): Create builtin functions\n\t__builtin_llabs, and plain llabs unless no_nonansi_builtins\n\toutside of C99 mode.\n\t(expand_tree_builtin): Handle BUILT_IN_LLABS.\n\nFrom-SVN: r36585", "tree": {"sha": "1f44369fb76196e077c51bead7e4a6ec08084525", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1f44369fb76196e077c51bead7e4a6ec08084525"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c44c45dbf3b62c14bcd2916365ce090d3af531a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c44c45dbf3b62c14bcd2916365ce090d3af531a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c44c45dbf3b62c14bcd2916365ce090d3af531a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c44c45dbf3b62c14bcd2916365ce090d3af531a/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b15c8032f0a71929c8714cc45c4b9d389f2fb9ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b15c8032f0a71929c8714cc45c4b9d389f2fb9ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b15c8032f0a71929c8714cc45c4b9d389f2fb9ca"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "9fb5b7acc1810dd93011dd69a72cadb85a532456", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c44c45dbf3b62c14bcd2916365ce090d3af531a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c44c45dbf3b62c14bcd2916365ce090d3af531a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c44c45dbf3b62c14bcd2916365ce090d3af531a", "patch": "@@ -1,3 +1,12 @@\n+2000-09-24  Joseph S. Myers  <jsm28@cam.ac.uk>\n+\n+\t* builtins.def (BUILT_IN_LLABS): Add.\n+\t* builtins.c (expand_builtin): Also abort on BUILT_IN_LLABS.\n+\t* c-common.c (c_common_nodes_builtins): Create builtin functions\n+\t__builtin_llabs, and plain llabs unless no_nonansi_builtins\n+\toutside of C99 mode.\n+\t(expand_tree_builtin): Handle BUILT_IN_LLABS.\n+\n Sat 23-Sep-2000 22:39:18 BST  Neil Booth  <NeilB@earthling.net>\n \n \t* cpphash.h (CPP_RESERVE, CPP_PUTS_Q, CPP_PUTS, CPP_PUTC_Q,"}, {"sha": "187164a4eb792b9ddaf0c513b694b35b8b56bee1", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c44c45dbf3b62c14bcd2916365ce090d3af531a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c44c45dbf3b62c14bcd2916365ce090d3af531a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=1c44c45dbf3b62c14bcd2916365ce090d3af531a", "patch": "@@ -2595,6 +2595,7 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n     {\n     case BUILT_IN_ABS:\n     case BUILT_IN_LABS:\n+    case BUILT_IN_LLABS:\n     case BUILT_IN_FABS:\n       /* build_function_call changes these into ABS_EXPR.  */\n       abort ();"}, {"sha": "eda40d8762f44a1baad584a371cd5792959fa375", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c44c45dbf3b62c14bcd2916365ce090d3af531a/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c44c45dbf3b62c14bcd2916365ce090d3af531a/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=1c44c45dbf3b62c14bcd2916365ce090d3af531a", "patch": "@@ -23,6 +23,7 @@ DEF_BUILTIN(BUILT_IN_ALLOCA)\n DEF_BUILTIN(BUILT_IN_ABS)\n DEF_BUILTIN(BUILT_IN_FABS)\n DEF_BUILTIN(BUILT_IN_LABS)\n+DEF_BUILTIN(BUILT_IN_LLABS)\n DEF_BUILTIN(BUILT_IN_FFS)\n DEF_BUILTIN(BUILT_IN_DIV)\n DEF_BUILTIN(BUILT_IN_LDIV)"}, {"sha": "d72c45b8152514cd86082589b16c577eb4112802", "filename": "gcc/c-common.c", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c44c45dbf3b62c14bcd2916365ce090d3af531a/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c44c45dbf3b62c14bcd2916365ce090d3af531a/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=1c44c45dbf3b62c14bcd2916365ce090d3af531a", "patch": "@@ -4020,6 +4020,7 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n   tree int_ftype_cptr_cptr_sizet;\n   tree int_ftype_string_string, string_ftype_ptr_ptr;\n   tree long_ftype_long;\n+  tree longlong_ftype_longlong;\n   /* Either char* or void*.  */\n   tree traditional_ptr_type_node;\n   /* Either const char* or const void*.  */\n@@ -4094,6 +4095,11 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t\t   tree_cons (NULL_TREE, long_integer_type_node,\n \t\t\t\t      endlink));\n \n+  longlong_ftype_longlong\n+    = build_function_type (long_long_integer_type_node,\n+\t\t\t   tree_cons (NULL_TREE, long_long_integer_type_node,\n+\t\t\t\t      endlink));\n+\n   int_ftype_cptr_cptr_sizet\n     = build_function_type (integer_type_node,\n \t\t\t   tree_cons (NULL_TREE, const_ptr_type_node,\n@@ -4234,6 +4240,8 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t    BUILT_IN_NORMAL, NULL_PTR);\n   builtin_function (\"__builtin_labs\", long_ftype_long, BUILT_IN_LABS,\n \t\t    BUILT_IN_NORMAL, NULL_PTR);\n+  builtin_function (\"__builtin_llabs\", longlong_ftype_longlong, BUILT_IN_LLABS,\n+\t\t    BUILT_IN_NORMAL, NULL_PTR);\n   builtin_function (\"__builtin_saveregs\", ptr_ftype, BUILT_IN_SAVEREGS,\n \t\t    BUILT_IN_NORMAL, NULL_PTR);\n   builtin_function (\"__builtin_classify_type\", default_function_type,\n@@ -4400,6 +4408,9 @@ c_common_nodes_and_builtins (cplus_mode, no_builtins, no_nonansi_builtins)\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"labs\", long_ftype_long, BUILT_IN_LABS,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n+      if (flag_isoc99 || ! no_nonansi_builtins)\n+\tbuiltin_function (\"llabs\", longlong_ftype_longlong, BUILT_IN_LLABS,\n+\t\t\t  BUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"memcpy\", memcpy_ftype, BUILT_IN_MEMCPY,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"memcmp\", int_ftype_cptr_cptr_sizet, BUILT_IN_MEMCMP,\n@@ -4578,6 +4589,7 @@ expand_tree_builtin (function, params, coerced_params)\n     {\n     case BUILT_IN_ABS:\n     case BUILT_IN_LABS:\n+    case BUILT_IN_LLABS:\n     case BUILT_IN_FABS:\n       if (coerced_params == 0)\n \treturn integer_zero_node;"}]}