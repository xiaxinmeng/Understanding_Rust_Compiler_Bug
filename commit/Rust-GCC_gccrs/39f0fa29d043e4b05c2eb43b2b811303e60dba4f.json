{"sha": "39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzlmMGZhMjlkMDQzZTRiMDVjMmViNDNiMmI4MTEzMDNlNjBkYmE0Zg==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T11:24:51Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-11-20T11:24:51Z"}, "message": "[multiple changes]\n\n2014-11-20  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_util.adb: Minor reformatting.\n\n2014-11-20  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_prag.adb (Analyze_Pragma, case Linker_Section): Detect\n\tduplicate Linker_Section.\n\n2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n\n\t* exp_ch4.adb: Add guard for build-in-place boolean op.\n\n2014-11-20  Yannick Moy  <moy@adacore.com>\n\n\t* checks.adb (Apply_Scalar_Range_Check): In GNATprove mode,\n\tput a range check when an empty range is used, instead of an\n\terror message.\n\t* sinfo.ads Update comment on GNATprove mode.\n\n2014-11-20  Arnaud Charlet  <charlet@adacore.com>\n\n\t* a-stream.ads, s-osinte-linux.ads, a-reatim.ads, a-calend.ads,\n\ts-crtl.ads, interfac.ads, s-taskin.ads: Replace uses of 2 ** 63 and\n\t2 ** 64 by references to Long_Long_Integer instead, to allow these\n\tunits to be analyzed by codepeer or spark when using a target\n\tconfiguration file with long_long_size set to 32.\n\nFrom-SVN: r217840", "tree": {"sha": "58e42d5d3971c42a195113a9dd5a3ae89f91cbf9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58e42d5d3971c42a195113a9dd5a3ae89f91cbf9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/comments", "author": null, "committer": null, "parents": [{"sha": "a18d0b158091b85fbab45b9fbd6617d919a5a766", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a18d0b158091b85fbab45b9fbd6617d919a5a766", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a18d0b158091b85fbab45b9fbd6617d919a5a766"}], "stats": {"total": 105, "additions": 88, "deletions": 17}, "files": [{"sha": "b88ce84ee58dfeab0da49ca344a815f2b62ed351", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "patch": "@@ -1,3 +1,31 @@\n+2014-11-20  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_util.adb: Minor reformatting.\n+\n+2014-11-20  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_prag.adb (Analyze_Pragma, case Linker_Section): Detect\n+\tduplicate Linker_Section.\n+\n+2014-11-20  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* exp_ch4.adb: Add guard for build-in-place boolean op.\n+\n+2014-11-20  Yannick Moy  <moy@adacore.com>\n+\n+\t* checks.adb (Apply_Scalar_Range_Check): In GNATprove mode,\n+\tput a range check when an empty range is used, instead of an\n+\terror message.\n+\t* sinfo.ads Update comment on GNATprove mode.\n+\n+2014-11-20  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* a-stream.ads, s-osinte-linux.ads, a-reatim.ads, a-calend.ads,\n+\ts-crtl.ads, interfac.ads, s-taskin.ads: Replace uses of 2 ** 63 and\n+\t2 ** 64 by references to Long_Long_Integer instead, to allow these\n+\tunits to be analyzed by codepeer or spark when using a target\n+\tconfiguration file with long_long_size set to 32.\n+\n 2014-11-20  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_util.adb (Extensions_Visible_Status): Modify the logic to account"}, {"sha": "8e268b9c2b5d834199cd67784ab9233d6bea580b", "filename": "gcc/ada/a-calend.ads", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fa-calend.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fa-calend.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-calend.ads?ref=39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2012, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -197,11 +197,14 @@ private\n    -- Local Declarations --\n    ------------------------\n \n-   type Time_Rep is range -2 ** 63 .. +2 ** 63 - 1;\n+   type Time_Rep is new Long_Long_Integer;\n    type Time is new Time_Rep;\n    --  The underlying type of Time has been chosen to be a 64 bit signed\n    --  integer number since it allows for easier processing of sub seconds\n-   --  and arithmetic.\n+   --  and arithmetic. We use Long_Long_Integer to allow this unit to compile\n+   --  when using custom target configuration files where the max integer is\n+   --  32bits. This is useful for static analysis tools such as SPARK or\n+   --  CodePeer.\n \n    Days_In_Month : constant array (Month_Number) of Day_Number :=\n                      (31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31);"}, {"sha": "b020adcd07779bc9045132ea41b3f82d92764c61", "filename": "gcc/ada/a-reatim.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fa-reatim.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fa-reatim.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-reatim.ads?ref=39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "patch": "@@ -94,7 +94,8 @@ package Ada.Real_Time is\n    --  The delta of Duration is 10 ** (-9), so the maximum number of seconds is\n    --  2**63/10**9 = 8*10**9 which does not quite fit in 32 bits.\n \n-   type Seconds_Count is range -2 ** 63 .. 2 ** 63 - 1;\n+   type Seconds_Count is range\n+     Long_Long_Integer'First .. Long_Long_Integer'Last;\n \n    procedure Split (T : Time; SC : out Seconds_Count; TS : out Time_Span);\n    function Time_Of (SC : Seconds_Count; TS : Time_Span) return Time;"}, {"sha": "0977f285f6ff4f3822ebaa5d8aefdcf5313cb72d", "filename": "gcc/ada/a-stream.ads", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fa-stream.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fa-stream.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-stream.ads?ref=39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "patch": "@@ -41,7 +41,8 @@ package Ada.Streams is\n \n    type Stream_Element is mod 2 ** Standard'Storage_Unit;\n \n-   type Stream_Element_Offset is range -(2 ** 63) .. +(2 ** 63) - 1;\n+   type Stream_Element_Offset is range\n+      Long_Long_Integer'First .. Long_Long_Integer'Last;\n \n    subtype Stream_Element_Count is\n       Stream_Element_Offset range 0 .. Stream_Element_Offset'Last;"}, {"sha": "e822db30b3eeed39850edf653b9d6460998c941a", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "patch": "@@ -2926,7 +2926,21 @@ package body Checks is\n                   --  since all possible values will raise CE).\n \n                   if Lov > Hiv then\n-                     Bad_Value;\n+\n+                     --  In GNATprove mode, do not issue a message in that case\n+                     --  (which would be an error stopping analysis), as this\n+                     --  likely corresponds to deactivated code based on a\n+                     --  given configuration (say, dead code inside a loop over\n+                     --  the empty range). Instead, we enable the range check\n+                     --  so that GNATprove will issue a message if it cannot be\n+                     --  proved.\n+\n+                     if GNATprove_Mode then\n+                        Enable_Range_Check (Expr);\n+                     else\n+                        Bad_Value;\n+                     end if;\n+\n                      return;\n                   end if;\n "}, {"sha": "aff9becb8dc50155f78aac3ea660c92594272aa3", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "patch": "@@ -2269,6 +2269,7 @@ package body Exp_Ch4 is\n \n          elsif Nkind (Parent (N)) = N_Op_Not\n            and then Nkind (N) = N_Op_And\n+           and then Nkind (Parent (Parent (N))) = N_Assignment_Statement\n            and then Safe_In_Place_Array_Op (Name (Parent (Parent (N))), L, R)\n          then\n             return;"}, {"sha": "85ed9e956b742cd99f43c16613ff1cad56c0acb1", "filename": "gcc/ada/interfac.ads", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Finterfac.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Finterfac.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finterfac.ads?ref=39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "patch": "@@ -51,10 +51,14 @@ package Interfaces is\n    type Integer_32 is range -2 ** 31 .. 2 ** 31 - 1;\n    for Integer_32'Size use 32;\n \n-   type Integer_64 is range -2 ** 63 .. 2 ** 63 - 1;\n+   type Integer_64 is range Long_Long_Integer'First .. Long_Long_Integer'Last;\n    for Integer_64'Size use 64;\n+   --  Note: we use Long_Long_Integer'First instead of -2 ** 63 to allow this\n+   --  unit to compile when using custom target configuration files where\n+   --  the max integer is 32bits. This is useful for static analysis tools\n+   --  such as SPARK or CodePeer.\n \n-   type Unsigned_8  is mod 2 **  8;\n+   type Unsigned_8  is mod 2 ** 8;\n    for Unsigned_8'Size use  8;\n \n    type Unsigned_16 is mod 2 ** 16;\n@@ -63,8 +67,9 @@ package Interfaces is\n    type Unsigned_32 is mod 2 ** 32;\n    for Unsigned_32'Size use 32;\n \n-   type Unsigned_64 is mod 2 ** 64;\n+   type Unsigned_64 is mod 2 ** Long_Long_Integer'Size;\n    for Unsigned_64'Size use 64;\n+   --  See comment on Integer_64 above\n \n    function Shift_Left\n      (Value  : Unsigned_8;"}, {"sha": "959fa4a2eb318e1efc70534fd87e7d90be77ac82", "filename": "gcc/ada/s-crtl.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fs-crtl.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fs-crtl.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-crtl.ads?ref=39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "patch": "@@ -62,7 +62,11 @@ package System.CRTL is\n    type ssize_t is range -(2 ** (Standard'Address_Size - 1))\n                       .. +(2 ** (Standard'Address_Size - 1)) - 1;\n \n-   type int64 is range -(2 ** 63) .. (2 ** 63) - 1;\n+   type int64 is range Long_Long_Integer'First .. Long_Long_Integer'Last;\n+   --  Note: we use Long_Long_Integer'First instead of -2 ** 63 to allow this\n+   --  unit to compile when using custom target configuration files where\n+   --  the max integer is 32bits. This is useful for static analysis tools\n+   --  such as SPARK or CodePeer.\n \n    type Filename_Encoding is (UTF8, ASCII_8bits, Unspecified);\n    for Filename_Encoding use (UTF8 => 0, ASCII_8bits => 1, Unspecified => 2);"}, {"sha": "d6930de96407cb0b08fade42f15cdd7b201d578a", "filename": "gcc/ada/s-osinte-linux.ads", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fs-osinte-linux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fs-osinte-linux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-osinte-linux.ads?ref=39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "patch": "@@ -599,9 +599,6 @@ private\n \n    type pid_t is new int;\n \n-   type unsigned_long_long_t is mod 2 ** 64;\n-   --  Local type only used to get the alignment of this type below\n-\n    subtype char_array is Interfaces.C.char_array;\n \n    type pthread_attr_t is record\n@@ -644,7 +641,7 @@ private\n       Data : char_array (1 .. OS_Constants.PTHREAD_COND_SIZE);\n    end record;\n    pragma Convention (C, pthread_cond_t);\n-   for pthread_cond_t'Alignment use unsigned_long_long_t'Alignment;\n+   for pthread_cond_t'Alignment use Interfaces.Unsigned_64'Alignment;\n \n    type pthread_key_t is new unsigned;\n "}, {"sha": "bf198ca3e80f702f748f0a083741b1480b930b8e", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "patch": "@@ -946,7 +946,7 @@ package System.Tasking is\n    --  converted to a task attribute if it fits, or to a pointer to a record\n    --  by Ada.Task_Attributes.\n \n-   type Task_Serial_Number is mod 2 ** 64;\n+   type Task_Serial_Number is mod 2 ** Long_Long_Integer'Size;\n    --  Used to give each task a unique serial number\n \n    type Ada_Task_Control_Block (Entry_Num : Task_Entry_Index) is record"}, {"sha": "c26e4f2ebffbe20172c4b14d7a3331fa4fd416bd", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "patch": "@@ -16380,6 +16380,7 @@ package body Sem_Prag is\n          when Pragma_Linker_Section => Linker_Section : declare\n             Arg : Node_Id;\n             Ent : Entity_Id;\n+            LPE : Node_Id;\n \n          begin\n             GNAT_Pragma;\n@@ -16398,9 +16399,18 @@ package body Sem_Prag is\n             case Ekind (Ent) is\n \n                --  Objects (constants and variables) and types. For these cases\n-               --  all we need to do is to set the Linker_Section_pragma field.\n+               --  all we need to do is to set the Linker_Section_pragma field,\n+               --  checking that we do not have a duplicate.\n \n                when E_Constant | E_Variable | Type_Kind =>\n+                  LPE := Linker_Section_Pragma (Ent);\n+\n+                  if Present (LPE) then\n+                     Error_Msg_Sloc := Sloc (LPE);\n+                     Error_Msg_NE\n+                       (\"Linker_Section already specified for &#\", Arg1, Ent);\n+                  end if;\n+\n                   Set_Linker_Section_Pragma (Ent, N);\n \n                --  Subprograms"}, {"sha": "981d2193062438122695aab0c147202cb33acd15", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "patch": "@@ -6457,7 +6457,8 @@ package body Sem_Util is\n                --  be a static subtype, since otherwise it would have\n                --  been diagnosed as illegal.\n \n-               elsif Is_Entity_Name (Choice) and then Is_Type (Entity (Choice))\n+               elsif Is_Entity_Name (Choice)\n+                 and then Is_Type (Entity (Choice))\n                then\n                   exit Search when Is_In_Range (Expr, Etype (Choice),\n                                                 Assume_Valid => False);"}, {"sha": "f9c7052c4d34933e4a49acf31a3b5f22dbcc7a05", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/39f0fa29d043e4b05c2eb43b2b811303e60dba4f/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=39f0fa29d043e4b05c2eb43b2b811303e60dba4f", "patch": "@@ -581,6 +581,12 @@ package Sinfo is\n    --       bounds are generated from an expression: Expand_Subtype_From_Expr\n    --       should be noop.\n \n+   --    5. Errors (instead of warnings) are issued on compile-time known\n+   --       constraint errors, except in a few selected cases where it should\n+   --       be allowed to let analysis proceed (e.g. range checks on empty\n+   --       ranges, typically in deactivated code based on a given\n+   --       configuration).\n+\n    -----------------------\n    -- Check Flag Fields --\n    -----------------------"}]}