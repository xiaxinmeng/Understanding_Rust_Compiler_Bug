{"sha": "a6f71af520bba8255f4253f42714df937bf397af", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTZmNzFhZjUyMGJiYTgyNTVmNDI1M2Y0MjcxNGRmOTM3YmYzOTdhZg==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-03-29T21:58:12Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1995-03-29T21:58:12Z"}, "message": "(andcosts): Modify costs to match the hardware, and add\nexplanatory comments.\n\nFrom-SVN: r9245", "tree": {"sha": "dca1e66734257856e6df44670d8874404bb150b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dca1e66734257856e6df44670d8874404bb150b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a6f71af520bba8255f4253f42714df937bf397af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f71af520bba8255f4253f42714df937bf397af", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6f71af520bba8255f4253f42714df937bf397af", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6f71af520bba8255f4253f42714df937bf397af/comments", "author": null, "committer": null, "parents": [{"sha": "71851aaa7cfda669cb166577acaefff5a7c3d2dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71851aaa7cfda669cb166577acaefff5a7c3d2dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71851aaa7cfda669cb166577acaefff5a7c3d2dd"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "3f35b2f83fcc2230c707329c3701d0ae726ecaa3", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a6f71af520bba8255f4253f42714df937bf397af/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a6f71af520bba8255f4253f42714df937bf397af/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=a6f71af520bba8255f4253f42714df937bf397af", "patch": "@@ -1400,16 +1400,24 @@ andcosts (RTX)\n      rtx RTX;\n {\n   int i;\n+  /* Anding with a register is a single cycle and instruction.  */\n   if (GET_CODE (XEXP (RTX, 1)) != CONST_INT)\n-    return 2;\n+    return 1;\n   i = INTVAL (XEXP (RTX, 1));\n-  /* And can use the extend insns cheaply.  */\n+  /* These constants are single cycle extu.[bw] instructions.  */\n   if (i == 0xff || i == 0xffff)\n+    return 1;\n+  /* Constants that can be used in an and immediate instruction is a single\n+     cycle, but this requires r0, so make it a little more expensive.  */\n+  if (CONST_OK_FOR_L (i))\n     return 2;\n-  /* Any small constant is reasonably cheap - but requires r0.  */\n+  /* Constants that can be loaded with a mov immediate and an and.\n+     This case is probably unnecessary.  */\n   if (CONST_OK_FOR_I (i))\n-    return 3;\n-  return 5;\n+    return 2;\n+  /* Any other constants requires a 2 cycle pc-relative load plus an and.\n+     This case is probably unnecessary.  */\n+  return 3;\n }\n \n /* Return the cost of a multiply.  */"}]}