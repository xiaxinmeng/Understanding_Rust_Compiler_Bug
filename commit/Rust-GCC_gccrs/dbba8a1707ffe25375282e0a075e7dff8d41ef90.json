{"sha": "dbba8a1707ffe25375282e0a075e7dff8d41ef90", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGJiYThhMTcwN2ZmZTI1Mzc1MjgyZTBhMDc1ZTdkZmY4ZDQxZWY5MA==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2019-10-18T19:04:22Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@gcc.gnu.org", "date": "2019-10-18T19:04:22Z"}, "message": "[arm] Improve code generation for addvsi4.\n\nSimilar to the improvements for uaddvsi4, this patch improves the code\ngeneration for addvsi4 to handle immediates and to add alternatives\nthat better target thumb2.  To do this we separate out the expansion\nof uaddvsi4 from that of uaddvdi4 and then add an additional pattern\nto handle constants.  Also, while doing this I've fixed the incorrect\nusage of NE instead of COMPARE in the generated RTL.\n\n\t* config/arm/arm.md (addv<mode>4): Delete.\n\t(addvsi4): New pattern.  Handle immediate values that the architecture\n\tsupports.\n\t(addvdi4): New pattern.\n\t(addsi3_compareV): Rename to ...\n\t(addsi3_compareV_reg): ... this.  Add constraints for thumb2 variants\n\tand use COMPARE rather than NE.\n\t(addsi3_compareV_imm): New pattern.\n\t* config/arm/arm.c (arm_select_cc_mode): Return CC_Vmode for\n\ta signed-overflow check.\n\nFrom-SVN: r277184", "tree": {"sha": "6d0dd78d6210cfc25121db8d034baa59936ed1aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6d0dd78d6210cfc25121db8d034baa59936ed1aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dbba8a1707ffe25375282e0a075e7dff8d41ef90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbba8a1707ffe25375282e0a075e7dff8d41ef90", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dbba8a1707ffe25375282e0a075e7dff8d41ef90", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dbba8a1707ffe25375282e0a075e7dff8d41ef90/comments", "author": null, "committer": null, "parents": [{"sha": "deb254e029c9430a0c3d0cb044e4ca7b3f15b619", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/deb254e029c9430a0c3d0cb044e4ca7b3f15b619", "html_url": "https://github.com/Rust-GCC/gccrs/commit/deb254e029c9430a0c3d0cb044e4ca7b3f15b619"}], "stats": {"total": 84, "additions": 74, "deletions": 10}, "files": [{"sha": "4c82758a060b937779da4ddf9f4f4a8d57fc97d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbba8a1707ffe25375282e0a075e7dff8d41ef90/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbba8a1707ffe25375282e0a075e7dff8d41ef90/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dbba8a1707ffe25375282e0a075e7dff8d41ef90", "patch": "@@ -1,3 +1,16 @@\n+2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n+\n+\t* config/arm/arm.md (addv<mode>4): Delete.\n+\t(addvsi4): New pattern.  Handle immediate values that the architecture\n+\tsupports.\n+\t(addvdi4): New pattern.\n+\t(addsi3_compareV): Rename to ...\n+\t(addsi3_compareV_reg): ... this.  Add constraints for thumb2 variants\n+\tand use COMPARE rather than NE.\n+\t(addsi3_compareV_imm): New pattern.\n+\t* config/arm/arm.c (arm_select_cc_mode): Return CC_Vmode for\n+\ta signed-overflow check.\n+\n 2019-10-18  Richard Earnshaw  <rearnsha@arm.com>\n \n \t* config/arm/arm-modes.def (CC_ADC): New CC mode."}, {"sha": "ba23970d060a8e6e5e115062fea63bb1af5b4b2f", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbba8a1707ffe25375282e0a075e7dff8d41ef90/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbba8a1707ffe25375282e0a075e7dff8d41ef90/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=dbba8a1707ffe25375282e0a075e7dff8d41ef90", "patch": "@@ -15411,6 +15411,14 @@ arm_select_cc_mode (enum rtx_code op, rtx x, rtx y)\n \t  || arm_borrow_operation (y, DImode)))\n     return CC_Bmode;\n \n+  if (GET_MODE (x) == DImode\n+      && (op == EQ || op == NE)\n+      && GET_CODE (x) == PLUS\n+      && GET_CODE (XEXP (x, 0)) == SIGN_EXTEND\n+      && GET_CODE (y) == SIGN_EXTEND\n+      && GET_CODE (XEXP (y, 0)) == PLUS)\n+    return CC_Vmode;\n+\n   if (GET_MODE_CLASS (GET_MODE (x)) == MODE_CC)\n     return GET_MODE (x);\n "}, {"sha": "b5214c79c3580f1db8457962e261bc9320ef8305", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 53, "deletions": 10, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dbba8a1707ffe25375282e0a075e7dff8d41ef90/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dbba8a1707ffe25375282e0a075e7dff8d41ef90/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=dbba8a1707ffe25375282e0a075e7dff8d41ef90", "patch": "@@ -488,14 +488,30 @@\n   \"\n )\n \n-(define_expand \"addv<mode>4\"\n-  [(match_operand:SIDI 0 \"register_operand\")\n-   (match_operand:SIDI 1 \"register_operand\")\n-   (match_operand:SIDI 2 \"register_operand\")\n+(define_expand \"addvsi4\"\n+  [(match_operand:SI 0 \"s_register_operand\")\n+   (match_operand:SI 1 \"s_register_operand\")\n+   (match_operand:SI 2 \"arm_add_operand\")\n    (match_operand 3 \"\")]\n   \"TARGET_32BIT\"\n {\n-  emit_insn (gen_add<mode>3_compareV (operands[0], operands[1], operands[2]));\n+  if (CONST_INT_P (operands[2]))\n+    emit_insn (gen_addsi3_compareV_imm (operands[0], operands[1], operands[2]));\n+  else\n+    emit_insn (gen_addsi3_compareV_reg (operands[0], operands[1], operands[2]));\n+  arm_gen_unlikely_cbranch (NE, CC_Vmode, operands[3]);\n+\n+  DONE;\n+})\n+\n+(define_expand \"addvdi4\"\n+  [(match_operand:DI 0 \"register_operand\")\n+   (match_operand:DI 1 \"register_operand\")\n+   (match_operand:DI 2 \"register_operand\")\n+   (match_operand 3 \"\")]\n+  \"TARGET_32BIT\"\n+{\n+  emit_insn (gen_adddi3_compareV (operands[0], operands[1], operands[2]));\n   arm_gen_unlikely_cbranch (NE, CC_Vmode, operands[3]);\n \n   DONE;\n@@ -770,21 +786,48 @@\n    (set_attr \"type\" \"multiple\")]\n )\n \n-(define_insn \"addsi3_compareV\"\n+(define_insn \"addsi3_compareV_reg\"\n   [(set (reg:CC_V CC_REGNUM)\n-\t(ne:CC_V\n+\t(compare:CC_V\n \t  (plus:DI\n-\t    (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"r\"))\n-\t    (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"r\")))\n+\t    (sign_extend:DI (match_operand:SI 1 \"register_operand\" \"%l,0,r\"))\n+\t    (sign_extend:DI (match_operand:SI 2 \"register_operand\" \"l,r,r\")))\n \t  (sign_extend:DI (plus:SI (match_dup 1) (match_dup 2)))))\n-   (set (match_operand:SI 0 \"register_operand\" \"=r\")\n+   (set (match_operand:SI 0 \"register_operand\" \"=l,r,r\")\n \t(plus:SI (match_dup 1) (match_dup 2)))]\n   \"TARGET_32BIT\"\n   \"adds%?\\\\t%0, %1, %2\"\n   [(set_attr \"conds\" \"set\")\n+   (set_attr \"arch\" \"t2,t2,*\")\n+   (set_attr \"length\" \"2,2,4\")\n    (set_attr \"type\" \"alus_sreg\")]\n )\n \n+(define_insn \"addsi3_compareV_imm\"\n+  [(set (reg:CC_V CC_REGNUM)\n+\t(compare:CC_V\n+\t  (plus:DI\n+\t    (sign_extend:DI\n+\t     (match_operand:SI 1 \"register_operand\" \"l,0,l,0,r,r\"))\n+\t    (match_operand 2 \"arm_addimm_operand\" \"Pd,Py,Px,Pw,I,L\"))\n+\t  (sign_extend:DI (plus:SI (match_dup 1) (match_dup 2)))))\n+   (set (match_operand:SI 0 \"register_operand\" \"=l,l,l,l,r,r\")\n+\t(plus:SI (match_dup 1) (match_dup 2)))]\n+  \"TARGET_32BIT\n+   && INTVAL (operands[2]) == ARM_SIGN_EXTEND (INTVAL (operands[2]))\"\n+  \"@\n+   adds%?\\\\t%0, %1, %2\n+   adds%?\\\\t%0, %0, %2\n+   subs%?\\\\t%0, %1, #%n2\n+   subs%?\\\\t%0, %0, #%n2\n+   adds%?\\\\t%0, %1, %2\n+   subs%?\\\\t%0, %1, #%n2\"\n+  [(set_attr \"conds\" \"set\")\n+   (set_attr \"arch\" \"t2,t2,t2,t2,*,*\")\n+   (set_attr \"length\" \"2,2,2,2,4,4\")\n+   (set_attr \"type\" \"alus_imm\")]\n+)\n+\n (define_insn \"addsi3_compare0\"\n   [(set (reg:CC_NOOV CC_REGNUM)\n \t(compare:CC_NOOV"}]}