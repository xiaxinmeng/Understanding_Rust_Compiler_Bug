{"sha": "53febcba13e4e7e8aecab1e90396d674d9277602", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNmZWJjYmExM2U0ZTdlOGFlY2FiMWU5MDM5NmQ2NzRkOTI3NzYwMg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-05-26T04:41:19Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-05-26T04:41:19Z"}, "message": "godump.c (go_format_type): Output the first field with a usable Go type, if any.\n\n\t* godump.c (go_format_type): Output the first field with a usable\n\tGo type, if any.\n\nFrom-SVN: r174262", "tree": {"sha": "13f45216cc160d808538fc1862644a36a41d2c24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13f45216cc160d808538fc1862644a36a41d2c24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53febcba13e4e7e8aecab1e90396d674d9277602", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53febcba13e4e7e8aecab1e90396d674d9277602", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53febcba13e4e7e8aecab1e90396d674d9277602", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53febcba13e4e7e8aecab1e90396d674d9277602/comments", "author": null, "committer": null, "parents": [{"sha": "7d7766a0ba454aa4da0cbcae4139fc14560d3d38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d7766a0ba454aa4da0cbcae4139fc14560d3d38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d7766a0ba454aa4da0cbcae4139fc14560d3d38"}], "stats": {"total": 52, "additions": 46, "deletions": 6}, "files": [{"sha": "ce1b46448bd248753b948e9dc3fa5158137f851e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53febcba13e4e7e8aecab1e90396d674d9277602/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53febcba13e4e7e8aecab1e90396d674d9277602/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53febcba13e4e7e8aecab1e90396d674d9277602", "patch": "@@ -1,3 +1,8 @@\n+2011-05-25  Ian Lance Taylor  <iant@google.com>\n+\n+\t* godump.c (go_format_type): Output the first field with a usable\n+\tGo type, if any.\n+\n 2011-05-25  Ian Lance Taylor  <iant@google.com>\n \n \t* godump.c (go_format_type): Check for invalid type names, pointer"}, {"sha": "e0d50b5d1b0624fd1e627dc36615aa24c055b905", "filename": "gcc/godump.c", "status": "modified", "additions": 41, "deletions": 6, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53febcba13e4e7e8aecab1e90396d674d9277602/gcc%2Fgodump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53febcba13e4e7e8aecab1e90396d674d9277602/gcc%2Fgodump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgodump.c?ref=53febcba13e4e7e8aecab1e90396d674d9277602", "patch": "@@ -685,6 +685,17 @@ go_format_type (struct godump_container *container, tree type,\n \t     field != NULL_TREE;\n \t     field = TREE_CHAIN (field))\n \t  {\n+\t    struct obstack hold_type_obstack;\n+\t    bool field_ok;\n+\n+\t    if (TREE_CODE (type) == UNION_TYPE)\n+\t      {\n+\t\thold_type_obstack = container->type_obstack;\n+\t\tobstack_init (&container->type_obstack);\n+\t      }\n+\n+\t    field_ok = true;\n+\n \t    if (DECL_NAME (field) == NULL)\n \t      {\n \t\tchar buf[100];\n@@ -711,7 +722,7 @@ go_format_type (struct godump_container *container, tree type,\n \t    if (DECL_BIT_FIELD (field))\n \t      {\n \t\tobstack_grow (ob, \"INVALID-bit-field\", 17);\n-\t\tret = false;\n+\t\tfield_ok = false;\n \t      }\n \t    else\n               {\n@@ -734,7 +745,7 @@ go_format_type (struct godump_container *container, tree type,\n \t\t\t\t\t   IDENTIFIER_POINTER (name),\n \t\t\t\t\t   NO_INSERT);\n \t\t    if (slot != NULL)\n-\t\t      ret = false;\n+\t\t      field_ok = false;\n \n \t\t    obstack_1grow (ob, '_');\n \t\t    go_append_string (ob, name);\n@@ -743,15 +754,39 @@ go_format_type (struct godump_container *container, tree type,\n \t\t  {\n \t\t    if (!go_format_type (container, TREE_TYPE (field), true,\n \t\t\t\t\t false))\n-\t\t      ret = false;\n+\t\t      field_ok = false;\n \t\t  }\n               }\n \t    obstack_grow (ob, \"; \", 2);\n \n-\t    /* Only output the first field of a union, and hope for\n-\t       the best.  */\n+\t    /* Only output the first successful field of a union, and\n+\t       hope for the best.  */\n \t    if (TREE_CODE (type) == UNION_TYPE)\n-\t      break;\n+\t      {\n+\t\tif (!field_ok && TREE_CHAIN (field) == NULL_TREE)\n+\t\t  {\n+\t\t    field_ok = true;\n+\t\t    ret = false;\n+\t\t  }\n+\t\tif (field_ok)\n+\t\t  {\n+\t\t    unsigned int sz;\n+\n+\t\t    sz = obstack_object_size (&container->type_obstack);\n+\t\t    obstack_grow (&hold_type_obstack,\n+\t\t\t\t  obstack_base (&container->type_obstack),\n+\t\t\t\t  sz);\n+\t\t  }\n+\t\tobstack_free (&container->type_obstack, NULL);\n+\t\tcontainer->type_obstack = hold_type_obstack;\n+\t\tif (field_ok)\n+\t\t  break;\n+\t      }\n+\t    else\n+\t      {\n+\t\tif (!field_ok)\n+\t\t  ret = false;\n+\t      }\n \t  }\n \tobstack_1grow (ob, '}');\n       }"}]}