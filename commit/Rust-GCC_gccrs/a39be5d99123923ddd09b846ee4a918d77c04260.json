{"sha": "a39be5d99123923ddd09b846ee4a918d77c04260", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTM5YmU1ZDk5MTIzOTIzZGRkMDliODQ2ZWU0YTkxOGQ3N2MwNDI2MA==", "commit": {"author": {"name": "Chris Smith", "email": "cks@gnu.org", "date": "1993-11-06T10:00:05Z"}, "committer": {"name": "Chris Smith", "email": "cks@gnu.org", "date": "1993-11-06T10:00:05Z"}, "message": "add untyped_call\n\nFrom-SVN: r6027", "tree": {"sha": "a6648500318a68d9ca4f3a611c758628b56441a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6648500318a68d9ca4f3a611c758628b56441a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a39be5d99123923ddd09b846ee4a918d77c04260", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39be5d99123923ddd09b846ee4a918d77c04260", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a39be5d99123923ddd09b846ee4a918d77c04260", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a39be5d99123923ddd09b846ee4a918d77c04260/comments", "author": null, "committer": null, "parents": [{"sha": "7d454f03476c8b9f823c208319566d8433b3e41a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d454f03476c8b9f823c208319566d8433b3e41a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d454f03476c8b9f823c208319566d8433b3e41a"}], "stats": {"total": 38, "additions": 38, "deletions": 0}, "files": [{"sha": "1cdb78ad14a00cf7801ff8aca7dd7f95b90f2472", "filename": "gcc/config/convex/convex.md", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a39be5d99123923ddd09b846ee4a918d77c04260/gcc%2Fconfig%2Fconvex%2Fconvex.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a39be5d99123923ddd09b846ee4a918d77c04260/gcc%2Fconfig%2Fconvex%2Fconvex.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.md?ref=a39be5d99123923ddd09b846ee4a918d77c04260", "patch": "@@ -1908,6 +1908,44 @@\n   \"\"\n   \"* return output_call (insn, &operands[1]); \")\n \n+;; Call subroutine returning any type.\n+\n+(define_expand \"untyped_call\"\n+  [(parallel [(call (match_operand 0 \"\" \"\")\n+                  (const_int 0))\n+            (match_operand 1 \"\" \"\")\n+            (match_operand 2 \"\" \"\")])]\n+  \"\"\n+  \"\n+{\n+  int i;\n+\n+  emit_call_insn (gen_call_pop (operands[0], const0_rtx,\n+\t\t\t\tconst0_rtx, const0_rtx));\n+\n+  for (i = 0; i < XVECLEN (operands[2], 0); i++)\n+    {\n+      rtx set = XVECEXP (operands[2], 0, i);\n+      emit_move_insn (SET_DEST (set), SET_SRC (set));\n+    }\n+\n+  /* The optimizer does not know that the call sets the function value\n+     registers we stored in the result block.  We avoid problems by\n+     claiming that all hard registers are used and clobbered at this\n+     point.  */\n+  emit_insn (gen_blockage ());\n+\n+  DONE;\n+}\")\n+\n+;; UNSPEC_VOLATILE is considered to use and clobber all hard registers and\n+;; all of memory.  This blocks insns from being moved across this point.\n+\n+(define_insn \"blockage\"\n+  [(unspec_volatile [(const_int 0)] 0)]\n+  \"\"\n+  \"\")\n+\n (define_expand \"return\"\n   [(return)]\n   \"\""}]}