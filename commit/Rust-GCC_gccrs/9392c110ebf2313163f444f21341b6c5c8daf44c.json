{"sha": "9392c110ebf2313163f444f21341b6c5c8daf44c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTM5MmMxMTBlYmYyMzEzMTYzZjQ0NGYyMTM0MWI2YzVjOGRhZjQ0Yw==", "commit": {"author": {"name": "John Hassey", "email": "hassey@gnu.org", "date": "1993-02-12T15:52:54Z"}, "committer": {"name": "John Hassey", "email": "hassey@gnu.org", "date": "1993-02-12T15:52:54Z"}, "message": "(reposition_prologue_and_epilogue_notes): Allow\nfor zero length prologue and epilogue list.\n\nFrom-SVN: r3465", "tree": {"sha": "e831c370161ca8d7d3879c4096c33c4343edbf49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e831c370161ca8d7d3879c4096c33c4343edbf49"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9392c110ebf2313163f444f21341b6c5c8daf44c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9392c110ebf2313163f444f21341b6c5c8daf44c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9392c110ebf2313163f444f21341b6c5c8daf44c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9392c110ebf2313163f444f21341b6c5c8daf44c/comments", "author": null, "committer": null, "parents": [{"sha": "f3acae4d7c0868869eb29ab7cf885dab0ae55bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3acae4d7c0868869eb29ab7cf885dab0ae55bd7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3acae4d7c0868869eb29ab7cf885dab0ae55bd7"}], "stats": {"total": 102, "additions": 54, "deletions": 48}, "files": [{"sha": "b1ce844f13b81f5c17614d622aa57a5bcb624307", "filename": "gcc/function.c", "status": "modified", "additions": 54, "deletions": 48, "changes": 102, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9392c110ebf2313163f444f21341b6c5c8daf44c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9392c110ebf2313163f444f21341b6c5c8daf44c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=9392c110ebf2313163f444f21341b6c5c8daf44c", "patch": "@@ -4750,30 +4750,33 @@ reposition_prologue_and_epilogue_notes (f)\n \t     reorg has run.  */\n \t  for (len = 0; prologue[len]; len++)\n \t    ;\n-\t  for (insn = f; insn; insn = NEXT_INSN (insn))\n-\t    if (GET_CODE (insn) == NOTE)\n-\t      {\n-\t\tif (NOTE_LINE_NUMBER (insn) == NOTE_INSN_PROLOGUE_END)\n-\t\t  note = insn;\n-\t      }\n-\t    else if ((len -= contains (insn, prologue)) == 0)\n-\t      {\n-\t\t/* Find the prologue-end note if we haven't already, and\n-\t\t   move it to just after the last prologue insn.  */\n-\t\tif (note == 0)\n-\t\t  for (note = insn; note = NEXT_INSN (note);)\n-\t\t    if (GET_CODE (note) == NOTE\n-\t\t\t&& NOTE_LINE_NUMBER (note) == NOTE_INSN_PROLOGUE_END)\n-\t\t      break;\n-\t\tnext = NEXT_INSN (note);\n-\t\tprev = PREV_INSN (note);\n-\t\tif (prev)\n-\t\t  NEXT_INSN (prev) = next;\n-\t\tif (next)\n-\t\t  PREV_INSN (next) = prev;\n-\t\tadd_insn_after (note, insn);\n-\t\tbreak;\n-\t      }\n+\t  for (insn = f; len && insn; insn = NEXT_INSN (insn))\n+\t    {\n+\t      if (GET_CODE (insn) == NOTE)\n+\t\t{\n+\t\t  if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_PROLOGUE_END)\n+\t\t    note = insn;\n+\t\t}\n+\t      else if ((len -= contains (insn, prologue)) == 0)\n+\t\t{\n+\t\t  /* Find the prologue-end note if we haven't already, and\n+\t\t     move it to just after the last prologue insn.  */\n+\t\t  if (note == 0)\n+\t\t    {\n+\t\t      for (note = insn; note = NEXT_INSN (note);)\n+\t\t\tif (GET_CODE (note) == NOTE\n+\t\t\t    && NOTE_LINE_NUMBER (note) == NOTE_INSN_PROLOGUE_END)\n+\t\t\t  break;\n+\t\t    }\n+\t\t  next = NEXT_INSN (note);\n+\t\t  prev = PREV_INSN (note);\n+\t\t  if (prev)\n+\t\t    NEXT_INSN (prev) = next;\n+\t\t  if (next)\n+\t\t    PREV_INSN (next) = prev;\n+\t\t  add_insn_after (note, insn);\n+\t\t}\n+\t    }\n \t}\n \n       if (epilogue)\n@@ -4785,30 +4788,33 @@ reposition_prologue_and_epilogue_notes (f)\n \t     reorg has run.  */\n \t  for (len = 0; epilogue[len]; len++)\n \t    ;\n-\t  for (insn = get_last_insn (); insn; insn = PREV_INSN (insn))\n-\t    if (GET_CODE (insn) == NOTE)\n-\t      {\n-\t\tif (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EPILOGUE_BEG)\n-\t\t  note = insn;\n-\t      }\n-\t    else if ((len -= contains (insn, epilogue)) == 0)\n-\t      {\n-\t\t/* Find the epilogue-begin note if we haven't already, and\n-\t\t   move it to just before the first epilogue insn.  */\n-\t\tif (note == 0)\n-\t\t  for (note = insn; note = PREV_INSN (note);)\n-\t\t    if (GET_CODE (note) == NOTE\n-\t\t\t&& NOTE_LINE_NUMBER (note) == NOTE_INSN_EPILOGUE_BEG)\n-\t\t      break;\n-\t\tnext = NEXT_INSN (note);\n-\t\tprev = PREV_INSN (note);\n-\t\tif (prev)\n-\t\t  NEXT_INSN (prev) = next;\n-\t\tif (next)\n-\t\t  PREV_INSN (next) = prev;\n-\t\tadd_insn_after (note, PREV_INSN (insn));\n-\t\tbreak;\n-\t      }\n+\t  for (insn = get_last_insn (); len && insn; insn = PREV_INSN (insn))\n+\t    {\n+\t      if (GET_CODE (insn) == NOTE)\n+\t\t{\n+\t\t  if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EPILOGUE_BEG)\n+\t\t    note = insn;\n+\t\t}\n+\t      else if ((len -= contains (insn, epilogue)) == 0)\n+\t\t{\n+\t\t  /* Find the epilogue-begin note if we haven't already, and\n+\t\t     move it to just before the first epilogue insn.  */\n+\t\t  if (note == 0)\n+\t\t    {\n+\t\t      for (note = insn; note = PREV_INSN (note);)\n+\t\t\tif (GET_CODE (note) == NOTE\n+\t\t\t    && NOTE_LINE_NUMBER (note) == NOTE_INSN_EPILOGUE_BEG)\n+\t\t\t  break;\n+\t\t    }\n+\t\t  next = NEXT_INSN (note);\n+\t\t  prev = PREV_INSN (note);\n+\t\t  if (prev)\n+\t\t    NEXT_INSN (prev) = next;\n+\t\t  if (next)\n+\t\t    PREV_INSN (next) = prev;\n+\t\t  add_insn_after (note, PREV_INSN (insn));\n+\t\t}\n+\t    }\n \t}\n     }\n #endif /* HAVE_prologue or HAVE_epilogue */"}]}