{"sha": "90833f7f2f047fec74c5db971594b525efd8a21b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTA4MzNmN2YyZjA0N2ZlYzc0YzVkYjk3MTU5NGI1MjVlZmQ4YTIxYg==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2010-11-02T00:12:14Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2010-11-02T00:12:14Z"}, "message": "sh.c (TARGET_DELEGITIMIZE_ADDRESS): Redefine.\n\n\t* config/sh/sh.c (TARGET_DELEGITIMIZE_ADDRESS): Redefine.\n\t(sh_delegitimize_address): New function.\n\nFrom-SVN: r166157", "tree": {"sha": "80b9e8d9ec2f7dff96f27e43c30c1ff39e93c664", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80b9e8d9ec2f7dff96f27e43c30c1ff39e93c664"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/90833f7f2f047fec74c5db971594b525efd8a21b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90833f7f2f047fec74c5db971594b525efd8a21b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/90833f7f2f047fec74c5db971594b525efd8a21b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/90833f7f2f047fec74c5db971594b525efd8a21b/comments", "author": null, "committer": null, "parents": [{"sha": "baf3ead600703fb6640b34bc43361b5f964628a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/baf3ead600703fb6640b34bc43361b5f964628a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/baf3ead600703fb6640b34bc43361b5f964628a2"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "e0e3e22653c300a31dc41a9d004d8e8ac4a1965f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90833f7f2f047fec74c5db971594b525efd8a21b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90833f7f2f047fec74c5db971594b525efd8a21b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=90833f7f2f047fec74c5db971594b525efd8a21b", "patch": "@@ -1,3 +1,8 @@\n+2010-11-01  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (TARGET_DELEGITIMIZE_ADDRESS): Redefine.\n+\t(sh_delegitimize_address): New function.\n+\n 2010-11-01  Joseph Myers  <joseph@codesourcery.com>\n \n \t* config/alpha/alpha.h (WORD_SWITCH_TAKES_ARG): Remove."}, {"sha": "a1eec59153e3c9cc3327f535f4d893dc96b51492", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/90833f7f2f047fec74c5db971594b525efd8a21b/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/90833f7f2f047fec74c5db971594b525efd8a21b/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=90833f7f2f047fec74c5db971594b525efd8a21b", "patch": "@@ -255,6 +255,7 @@ static int sh_pr_n_sets (void);\n static rtx sh_allocate_initial_value (rtx);\n static bool sh_legitimate_address_p (enum machine_mode, rtx, bool);\n static rtx sh_legitimize_address (rtx, rtx, enum machine_mode);\n+static rtx sh_delegitimize_address (rtx);\n static int shmedia_target_regs_stack_space (HARD_REG_SET *);\n static int shmedia_reserve_space_for_target_registers_p (int, HARD_REG_SET *);\n static int shmedia_target_regs_stack_adjust (HARD_REG_SET *);\n@@ -459,6 +460,9 @@ static const struct default_options sh_option_optimization_table[] =\n #undef TARGET_SCHED_INIT\n #define TARGET_SCHED_INIT sh_md_init\n \n+#undef TARGET_DELEGITIMIZE_ADDRESS\n+#define TARGET_DELEGITIMIZE_ADDRESS sh_delegitimize_address\n+\n #undef TARGET_LEGITIMIZE_ADDRESS\n #define TARGET_LEGITIMIZE_ADDRESS sh_legitimize_address\n \n@@ -9873,6 +9877,45 @@ sh_legitimize_reload_address (rtx *p, enum machine_mode mode, int opnum,\n   return true;\n }\n \n+/* In the name of slightly smaller debug output, and to cater to\n+   general assembler lossage, recognize various UNSPEC sequences\n+   and turn them back into a direct symbol reference.  */\n+\n+static rtx\n+sh_delegitimize_address (rtx orig_x)\n+{\n+  rtx x, y;\n+\n+  orig_x = delegitimize_mem_from_attrs (orig_x);\n+\n+  x = orig_x;\n+  if (MEM_P (x))\n+    x = XEXP (x, 0);\n+  if (GET_CODE (x) == CONST)\n+    {\n+      y = XEXP (x, 0);\n+      if (GET_CODE (y) == UNSPEC)\n+\t{\n+\t  if (XINT (y, 1) == UNSPEC_GOT\n+\t      || XINT (y, 1) == UNSPEC_GOTOFF)\n+\t    return XVECEXP (y, 0, 0);\n+\t  else if (TARGET_SHMEDIA\n+\t\t   && (XINT (y, 1) == UNSPEC_EXTRACT_S16\n+\t\t       || XINT (y, 1) == UNSPEC_EXTRACT_U16))\n+\t    {\n+\t      rtx offset = XVECEXP (y, 0, 1);\n+\n+\t      x = gen_rtx_PLUS (Pmode, XVECEXP (y, 0, 0), offset);\n+\t      if (MEM_P (orig_x))\n+\t\tx = replace_equiv_address_nv (orig_x, x);\n+\t      return x;\n+\t    }\n+\t}\n+    }\n+\n+  return orig_x;\n+}\n+\n /* Mark the use of a constant in the literal table. If the constant\n    has multiple labels, make it unique.  */\n static rtx"}]}