{"sha": "506bd02c5a2aff1bf4679532062f1a07579a581c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTA2YmQwMmM1YTJhZmYxYmY0Njc5NTMyMDYyZjFhMDc1NzlhNTgxYw==", "commit": {"author": {"name": "Dimitar Dimitrov", "email": "dimitar@dinux.eu", "date": "2019-06-12T19:33:31Z"}, "committer": {"name": "Dimitar Dimitrov", "email": "dimitar@gcc.gnu.org", "date": "2019-06-12T19:33:31Z"}, "message": "testsuite: Add PRU tests\n\ngcc/testsuite/ChangeLog:\n\n2019-06-12  Dimitar Dimitrov  <dimitar@dinux.eu>\n\n\t* gcc.target/pru/abi-arg-struct.c: New test.\n\t* gcc.target/pru/ashiftrt.c: New test.\n\t* gcc.target/pru/builtins-1.c: New test.\n\t* gcc.target/pru/builtins-error.c: New test.\n\t* gcc.target/pru/clearbit.c: New test.\n\t* gcc.target/pru/loop-asm.c: New test.\n\t* gcc.target/pru/loop-dowhile.c: New test.\n\t* gcc.target/pru/loop-hi-1.c: New test.\n\t* gcc.target/pru/loop-hi-2.c: New test.\n\t* gcc.target/pru/loop-qi-1.c: New test.\n\t* gcc.target/pru/loop-qi-2.c: New test.\n\t* gcc.target/pru/loop-short-1.c: New test.\n\t* gcc.target/pru/loop-short-2.c: New test.\n\t* gcc.target/pru/loop-si-1.c: New test.\n\t* gcc.target/pru/loop-si-2.c: New test.\n\t* gcc.target/pru/loop-u8_pcrel_overflow.c: New test.\n\t* gcc.target/pru/loop-ubyte-1.c: New test.\n\t* gcc.target/pru/loop-ubyte-2.c: New test.\n\t* gcc.target/pru/lra-framepointer-fragmentation-1.c: New test.\n\t* gcc.target/pru/lra-framepointer-fragmentation-2.c: New test.\n\t* gcc.target/pru/mabi-ti-1.c: New test.\n\t* gcc.target/pru/mabi-ti-2.c: New test.\n\t* gcc.target/pru/mabi-ti-3.c: New test.\n\t* gcc.target/pru/mabi-ti-4.c: New test.\n\t* gcc.target/pru/mabi-ti-5.c: New test.\n\t* gcc.target/pru/mabi-ti-6.c: New test.\n\t* gcc.target/pru/mabi-ti-7.c: New test.\n\t* gcc.target/pru/pr64366.c: New test.\n\t* gcc.target/pru/pragma-ctable_entry.c: New test.\n\t* gcc.target/pru/pru.exp: New file.\n\t* gcc.target/pru/qbbc-1.c: New test.\n\t* gcc.target/pru/qbbc-2.c: New test.\n\t* gcc.target/pru/qbbc-3.c: New test.\n\t* gcc.target/pru/qbbs-1.c: New test.\n\t* gcc.target/pru/qbbs-2.c: New test.\n\t* gcc.target/pru/setbit.c: New test.\n\t* gcc.target/pru/zero_extend-and-hisi.c: New test.\n\t* gcc.target/pru/zero_extend-and-qihi.c: New test.\n\t* gcc.target/pru/zero_extend-and-qisi.c: New test.\n\t* gcc.target/pru/zero_extend-hisi.c: New test.\n\t* gcc.target/pru/zero_extend-qihi.c: New test.\n\t* gcc.target/pru/zero_extend-qisi.c: New test.\n\t* lib/target-supports.exp: Add PRU to feature filters.\n\nFrom-SVN: r272205", "tree": {"sha": "3776a8d41ad419e46e41e1beef8157032512dfba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3776a8d41ad419e46e41e1beef8157032512dfba"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/506bd02c5a2aff1bf4679532062f1a07579a581c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/506bd02c5a2aff1bf4679532062f1a07579a581c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/506bd02c5a2aff1bf4679532062f1a07579a581c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/506bd02c5a2aff1bf4679532062f1a07579a581c/comments", "author": null, "committer": null, "parents": [{"sha": "ae7deb4b85aad67c64228c19e226b902669032f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ae7deb4b85aad67c64228c19e226b902669032f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ae7deb4b85aad67c64228c19e226b902669032f4"}], "stats": {"total": 1352, "additions": 1351, "deletions": 1}, "files": [{"sha": "79f4952f1419a8a4df97ac9301b6347b4a4dd7fb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -1,3 +1,49 @@\n+2019-06-12  Dimitar Dimitrov  <dimitar@dinux.eu>\n+\n+\t* gcc.target/pru/abi-arg-struct.c: New test.\n+\t* gcc.target/pru/ashiftrt.c: New test.\n+\t* gcc.target/pru/builtins-1.c: New test.\n+\t* gcc.target/pru/builtins-error.c: New test.\n+\t* gcc.target/pru/clearbit.c: New test.\n+\t* gcc.target/pru/loop-asm.c: New test.\n+\t* gcc.target/pru/loop-dowhile.c: New test.\n+\t* gcc.target/pru/loop-hi-1.c: New test.\n+\t* gcc.target/pru/loop-hi-2.c: New test.\n+\t* gcc.target/pru/loop-qi-1.c: New test.\n+\t* gcc.target/pru/loop-qi-2.c: New test.\n+\t* gcc.target/pru/loop-short-1.c: New test.\n+\t* gcc.target/pru/loop-short-2.c: New test.\n+\t* gcc.target/pru/loop-si-1.c: New test.\n+\t* gcc.target/pru/loop-si-2.c: New test.\n+\t* gcc.target/pru/loop-u8_pcrel_overflow.c: New test.\n+\t* gcc.target/pru/loop-ubyte-1.c: New test.\n+\t* gcc.target/pru/loop-ubyte-2.c: New test.\n+\t* gcc.target/pru/lra-framepointer-fragmentation-1.c: New test.\n+\t* gcc.target/pru/lra-framepointer-fragmentation-2.c: New test.\n+\t* gcc.target/pru/mabi-ti-1.c: New test.\n+\t* gcc.target/pru/mabi-ti-2.c: New test.\n+\t* gcc.target/pru/mabi-ti-3.c: New test.\n+\t* gcc.target/pru/mabi-ti-4.c: New test.\n+\t* gcc.target/pru/mabi-ti-5.c: New test.\n+\t* gcc.target/pru/mabi-ti-6.c: New test.\n+\t* gcc.target/pru/mabi-ti-7.c: New test.\n+\t* gcc.target/pru/pr64366.c: New test.\n+\t* gcc.target/pru/pragma-ctable_entry.c: New test.\n+\t* gcc.target/pru/pru.exp: New file.\n+\t* gcc.target/pru/qbbc-1.c: New test.\n+\t* gcc.target/pru/qbbc-2.c: New test.\n+\t* gcc.target/pru/qbbc-3.c: New test.\n+\t* gcc.target/pru/qbbs-1.c: New test.\n+\t* gcc.target/pru/qbbs-2.c: New test.\n+\t* gcc.target/pru/setbit.c: New test.\n+\t* gcc.target/pru/zero_extend-and-hisi.c: New test.\n+\t* gcc.target/pru/zero_extend-and-qihi.c: New test.\n+\t* gcc.target/pru/zero_extend-and-qisi.c: New test.\n+\t* gcc.target/pru/zero_extend-hisi.c: New test.\n+\t* gcc.target/pru/zero_extend-qihi.c: New test.\n+\t* gcc.target/pru/zero_extend-qisi.c: New test.\n+\t* lib/target-supports.exp: Add PRU to feature filters.\n+\n 2019-06-12  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/90002"}, {"sha": "186074b16f3890233cdc4c7ea4f09b70b9a97c7c", "filename": "gcc/testsuite/gcc.target/pru/abi-arg-struct.c", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fabi-arg-struct.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fabi-arg-struct.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fabi-arg-struct.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,164 @@\n+/* Test call argument ABI: passing structs */\n+\n+/* { dg-do run } */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+struct S3 { char a[3]; };\n+struct S7 { char a[7]; };\n+struct S8 { char a[8]; };\n+\n+struct S3 gs3 = {{11, 22, 33}};\n+struct S7 gs7 = {{1, 2, 3, 4, 5, 6, 7}};\n+struct S8 gs8 = {{1, 2, 3, 4, 5, 6, 7, 8}};\n+\n+int test3_struct(char a0, char a1, char a2, char a3,\n+\t\t char a4, char a5, char a6, char a7,\n+\t\t char a8, char a9, char a10, char a11,\n+\t\t int ai)\n+{\n+  if (a0 != 11) return 1;\n+  if (a1 != 22) return 2;\n+  if (a2 != 33) return 3;\n+  if (a4 != 101) return 4;\n+  if (a5 != 111) return 5;\n+  if (a6 != 121) return 6;\n+  if (a8 != 55) return 8;\n+  if (a9 != 66) return 9;\n+  if (a10 != 77) return 10;\n+\n+  if (ai != 55443322) return 100;\n+\n+  return 0;\n+}\n+\n+void test3(void)\n+{\n+  struct S3 s3x = { {101, 111, 121} };\n+  struct S3 s3y = { {55, 66, 77} };\n+\n+  int (* volatile f)(struct S3, struct S3, struct S3, int) =\n+    (int (* volatile)(struct S3, struct S3, struct S3, int)) test3_struct;\n+\n+  if (f(gs3, s3x, s3y, 55443322))\n+    abort();\n+}\n+\n+int test7_struct(unsigned ai, struct S7 a0, ...)\n+{\n+  va_list ap;\n+  struct S7 s[3];\n+  int i;\n+\n+  va_start (ap, a0);\n+\n+  s[0] = a0;\n+  for (i = 1; i < 3; i++) {\n+      s[i] = va_arg (ap, struct S7);\n+  }\n+\n+  va_end (ap);\n+\n+  if (ai != 0xaabbccdd)\n+    return 1;\n+\n+  if (s[0].a[0] != 1) return 1;\n+  if (s[0].a[1] != 2) return 1;\n+  if (s[0].a[2] != 3) return 1;\n+  if (s[0].a[3] != 4) return 1;\n+  if (s[0].a[4] != 5) return 1;\n+  if (s[0].a[5] != 6) return 1;\n+  if (s[0].a[6] != 7) return 1;\n+\n+  if (s[1].a[0] != 11) return 1;\n+  if (s[1].a[1] != 12) return 1;\n+  if (s[1].a[2] != 13) return 1;\n+  if (s[1].a[3] != 14) return 1;\n+  if (s[1].a[4] != 15) return 1;\n+  if (s[1].a[5] != 16) return 1;\n+  if (s[1].a[6] != 17) return 1;\n+\n+  if (s[2].a[0] != 22) return 1;\n+  if (s[2].a[1] != 23) return 1;\n+  if (s[2].a[2] != 24) return 1;\n+  if (s[2].a[3] != 25) return 1;\n+  if (s[2].a[4] != 26) return 1;\n+  if (s[2].a[5] != 27) return 1;\n+  if (s[2].a[6] != 28) return 1;\n+\n+  return 0;\n+}\n+\n+void test7(void)\n+{\n+  struct S7 s7x = { {11, 12, 13, 14, 15, 16, 17} };\n+  struct S7 s7y = { {22, 23, 24, 25, 26, 27, 28} };\n+\n+  int (* volatile f)(unsigned, struct S7, struct S7, struct S7) =\n+    (int (* volatile)(unsigned, struct S7, struct S7, struct S7)) test7_struct;\n+\n+  if (f(0xaabbccdd, gs7, s7x, s7y))\n+    abort();\n+}\n+\n+int test8_struct(char a0, char a1, char a2, char a3,\n+\t\t char a4, char a5, char a6, char a7,\n+\t\t char a8, char a9, char a10, char a11,\n+\t\t char a12, char a13, char a14, char a15,\n+\t\t char a16, char a17, char a18, char a19,\n+\t\t char a20, char a21, char a22, char a23)\n+{\n+  if (a0 != 1) return 1;\n+  if (a1 != 2) return 1;\n+  if (a2 != 3) return 1;\n+  if (a3 != 4) return 1;\n+  if (a4 != 5) return 1;\n+  if (a5 != 6) return 1;\n+  if (a6 != 7) return 1;\n+  if (a7 != 8) return 1;\n+\n+  if (a8 != 11) return 1;\n+  if (a9 != 12) return 1;\n+  if (a10 != 13) return 1;\n+  if (a11 != 14) return 1;\n+  if (a12 != 15) return 1;\n+  if (a13 != 16) return 1;\n+  if (a14 != 17) return 1;\n+  if (a15 != 18) return 1;\n+\n+  if (a16 != 22) return 1;\n+  if (a17 != 23) return 1;\n+  if (a18 != 24) return 1;\n+  if (a19 != 25) return 1;\n+  if (a20 != 26) return 1;\n+  if (a21 != 27) return 1;\n+  if (a22 != 28) return 1;\n+  if (a23 != 29) return 1;\n+\n+  return 0;\n+}\n+\n+void test8(void)\n+{\n+  struct S8 s8x = { {11, 12, 13, 14, 15, 16, 17, 18} };\n+  struct S8 s8y = { {22, 23, 24, 25, 26, 27, 28, 29} };\n+\n+  int (* volatile f)(struct S8, struct S8, struct S8) =\n+    (int (* volatile)(struct S8, struct S8, struct S8)) test8_struct;\n+\n+  if (f(gs8, s8x, s8y))\n+    abort();\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  test3();\n+  test7();\n+  test8();\n+\n+  return 0;\n+}\n+"}, {"sha": "ee8d55d60e62e212fc8938e2407ebb0ce14aab7d", "filename": "gcc/testsuite/gcc.target/pru/ashiftrt.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fashiftrt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fashiftrt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fashiftrt.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,13 @@\n+/* Test shift optimization */\n+\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  */\n+\n+extern void func2(unsigned char);\n+\n+void test(unsigned char v)\n+{\n+    /* { dg-final { scan-assembler \"lsl\\tr14.b0, r14.b0, .\\+\\n\\tlsr\\tr14.b0, r14.b0\" } } */\n+    func2((v & 2) ? 1 : 0);\n+}"}, {"sha": "7b7472bbbd5d497759e44ce6b75e2daa040c2916", "filename": "gcc/testsuite/gcc.target/pru/builtins-1.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fbuiltins-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fbuiltins-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fbuiltins-1.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+\n+void delay0 (void)  { __delay_cycles (0); }\n+void delay1 (void)  { __delay_cycles (1); }\n+void delay2 (void)  { __delay_cycles (2); }\n+void delay3 (void)  { __delay_cycles (3); }\n+\n+void delay_1 (void)  { __delay_cycles (44); }\n+void delay_2 (void)  { __delay_cycles (0x1234); }\n+void delay_3 (void)  { __delay_cycles (0x123456); }\n+\n+/* { dg-final { scan-assembler-not \"__delay_cycles\" } } */"}, {"sha": "a856872a0a106beb56d4d38cac251e5ef325eef1", "filename": "gcc/testsuite/gcc.target/pru/builtins-error.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fbuiltins-error.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fbuiltins-error.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fbuiltins-error.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do assemble } */\n+\n+void delay (long a)\n+{\n+    __delay_cycles (a); /* { dg-error \"'__delay_cycles' only takes constant arguments\" } */\n+}"}, {"sha": "cc24b3bb1b9f2612e2037161e84540eda5ec24f5", "filename": "gcc/testsuite/gcc.target/pru/clearbit.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fclearbit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fclearbit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fclearbit.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,13 @@\n+/* clearbit instruction generation */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+unsigned int\n+test_clearbit (unsigned int val)\n+{\n+  /* { dg-final { scan-assembler \"clr\\\\tr14, r14, 19\" } } */\n+  val &= ~(1u << 19);\n+  return val;\n+}\n+"}, {"sha": "7b737a09803e9dc6a4c77c89559e0a132b3f440b", "filename": "gcc/testsuite/gcc.target/pru/loop-asm.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-asm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-asm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-asm.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,19 @@\n+/* Test that LOOP will not be generated when body contains asm statement */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1 -mloop\" } */\n+\n+/* -O1 in the options is significant.  Without it do-loop will not be\n+   run.  */\n+\n+unsigned int\n+test_loop (unsigned int n)\n+{\n+\tunsigned i;\n+\t/* { dg-final { scan-assembler-not \"loop\\t.\\+\" } } */\n+\tfor (i = 0; i < 10; i++) {\n+\t\tn <<= 2;\n+\t\tasm volatile (\"nop\" : : );\n+\t}\n+\treturn n;\n+}"}, {"sha": "0926b98a95360528419aa940ef16dbe676db9f1e", "filename": "gcc/testsuite/gcc.target/pru/loop-dowhile.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-dowhile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-dowhile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-dowhile.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,45 @@\n+/* Test LOOP generation for do while.\n+   Ensure the post-condition \"do while\" is correctly translated\n+   to a pre-condition PRU LOOP instruction.  */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -mloop\" } */\n+\n+/* -O1 in the options is significant.  Without it do-loop will not be\n+   run.  */\n+\n+extern void abort (void);\n+\n+volatile unsigned int int_12345 = 12345;\n+volatile unsigned int int_0 = 0;\n+volatile unsigned int int_1 = 1;\n+\n+unsigned int\n+test_loop (unsigned int n)\n+{\n+  unsigned int i = 0;\n+  volatile unsigned int s = 0;\n+\n+  if (n >= 0x7fff) return 0;\n+\n+  do {\n+    s++;\n+    i++;\n+  } while (i < n);\n+  return s;\n+}\n+\n+\n+int\n+main (int argc, char** argv)\n+{\n+  if (test_loop (int_0) != 1)\n+    abort();\n+  if (test_loop (int_1) != 1)\n+    abort();\n+  if (test_loop (int_12345) != 12345)\n+    abort();\n+\n+  return 0;\n+}\n+"}, {"sha": "23caf20f67489675372d35931dc8f296fd73103e", "filename": "gcc/testsuite/gcc.target/pru/loop-hi-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-hi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-hi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-hi-1.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,38 @@\n+/* Test LOOP recognition - short ints*/\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -mloop\" } */\n+\n+/* -O1 in the options is significant.  Without it do-loop will not be\n+   run.  */\n+\n+extern void abort (void);\n+\n+volatile unsigned short short_12345 = 12345;\n+volatile unsigned short short_0 = 0;\n+volatile unsigned short short_1 = 1;\n+\n+unsigned int\n+test_loop_short (unsigned short n)\n+{\n+  unsigned short i;\n+  volatile unsigned int s = 0;\n+\n+  for (i = 0; i < n; i++)\n+    s++;\n+  return s;\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  if (test_loop_short (short_0) != 0)\n+    abort();\n+  if (test_loop_short (short_1) != 1)\n+    abort();\n+  if (test_loop_short (short_12345) != 12345)\n+    abort();\n+\n+  return 0;\n+}\n+"}, {"sha": "0ef4ec764819652db8aa7d11af1e87c31c47e691", "filename": "gcc/testsuite/gcc.target/pru/loop-hi-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-hi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-hi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-hi-2.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,17 @@\n+/* Test LOOP recognition - short ints*/\n+\n+/* { dg-options \"-O2 -mloop\" } */\n+\n+/* -O2 in the options is significant.  Without it do-loop will not be\n+   run.  */\n+\n+unsigned int\n+test_loop_short (int x, short n)\n+{\n+  int i;\n+\n+  /* { dg-final { scan-assembler \"loop\\\\t.L\\[0-9\\]*, r\\[0-9w.\\]*\" } } */\n+  for (i = 0; i < n; i++)\n+    x <<= 3;\n+  return x;\n+}"}, {"sha": "a4bb7d6d803ae8be9b672c883ad1947435094105", "filename": "gcc/testsuite/gcc.target/pru/loop-qi-1.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-qi-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-qi-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-qi-1.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,38 @@\n+/* Test LOOP recognition */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -mloop\" } */\n+\n+/* -O1 in the options is significant.  Without it do-loop will not be\n+   run.  */\n+\n+extern void abort (void);\n+\n+volatile unsigned char char_123 = 123;\n+volatile unsigned char char_0 = 0;\n+volatile unsigned char char_1 = 1;\n+\n+unsigned int\n+test_loop_char (unsigned char n)\n+{\n+  unsigned char i;\n+  volatile unsigned int s = 0;\n+\n+  for (i = 0; i < n; i++)\n+    s++;\n+  return s;\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  if (test_loop_char (char_0) != 0)\n+    abort();\n+  if (test_loop_char (char_1) != 1)\n+    abort();\n+  if (test_loop_char (char_123) != 123)\n+    abort();\n+\n+  return 0;\n+}\n+"}, {"sha": "24a343d579eac29a749089cd81ded8a87932e9ab", "filename": "gcc/testsuite/gcc.target/pru/loop-qi-2.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-qi-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-qi-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-qi-2.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,17 @@\n+/* Test LOOP recognition */\n+\n+/* { dg-options \"-O2 -mloop\" } */\n+\n+/* -O2 in the options is significant.  Without it do-loop will not be\n+   run.  */\n+\n+unsigned int\n+test_loop_char (unsigned int x, char n)\n+{\n+  int i;\n+\n+  /* { dg-final { scan-assembler \"loop\\\\t.L\\[0-9\\]*, r\\[0-9b.\\]*\" } } */\n+  for (i = 0; i < n; i++)\n+    x <<= 2;\n+  return x;\n+}"}, {"sha": "14d75300301e381eac64d27a714e233e28a8ea52", "filename": "gcc/testsuite/gcc.target/pru/loop-short-1.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-short-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-short-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-short-1.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,53 @@\n+/* Test LOOP generation for very short loops. */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -mloop\" } */\n+\n+/* -O1 in the options is significant.  Without it do-loop will not be\n+   run.  */\n+\n+extern void abort (void);\n+\n+volatile unsigned int int_12345 = 12345;\n+volatile unsigned int int_0 = 0;\n+volatile unsigned int int_1 = 1;\n+\n+unsigned int\n+test_loop_sum (unsigned int n)\n+{\n+\tunsigned i;\n+\tvolatile unsigned int s = 0;\n+\tfor (i = 0; i < n; i++) {\n+\t\ts++;\n+\t}\n+\treturn s;\n+}\n+\n+unsigned int\n+test_loop_shift20 (unsigned int n)\n+{\n+\tunsigned i;\n+\tfor (i = 0; i < 10; i++) {\n+\t\tn <<= 2;\n+\t}\n+\treturn n;\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  if (test_loop_sum (int_0) != 0)\n+    abort();\n+  if (test_loop_sum (int_1) != 1)\n+    abort();\n+  if (test_loop_sum (int_12345) != 12345)\n+    abort();\n+\n+  if (test_loop_shift20 (int_0) != 0)\n+    abort();\n+  if (test_loop_shift20 (int_1) != (1u << 20))\n+    abort();\n+\n+  return 0;\n+}\n+"}, {"sha": "b0e1986bad3d1764882c477e0a8b419f4d29e8f3", "filename": "gcc/testsuite/gcc.target/pru/loop-short-2.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-short-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-short-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-short-2.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,21 @@\n+/* Test LOOP generation for very short loops. */\n+\n+/* { dg-options \"-O1 -mloop\" } */\n+\n+/* -O1 in the options is significant.  Without it do-loop will not be\n+   run.  */\n+\n+unsigned int\n+test_loop (unsigned int n, unsigned int x)\n+{\n+  unsigned int i;\n+\n+  if (n >= 0x10000) return 0;\n+  if (!n) return 0;\n+\n+  /* { dg-final { scan-assembler \"loop\\\\t.L\\[0-9\\]*, r\\[0-9\\]*\" } } */\n+  /* { dg-final { scan-assembler \"nop\" } } */\n+  for (i = 0; i < n; i++)\n+    x <<= 2;\n+  return x;\n+}"}, {"sha": "84087bf716020c1efe1a9b915b05de185d98163a", "filename": "gcc/testsuite/gcc.target/pru/loop-si-1.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-si-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-si-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-si-1.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,41 @@\n+/* Test LOOP recognition */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -mloop\" } */\n+\n+/* -O1 in the options is significant.  Without it do-loop will not be\n+   run.  */\n+\n+extern void abort (void);\n+\n+volatile unsigned int int_12345 = 12345;\n+volatile unsigned int int_0 = 0;\n+volatile unsigned int int_1 = 1;\n+\n+unsigned int\n+test_loop (unsigned int n)\n+{\n+  unsigned int i;\n+  volatile unsigned int s = 0;\n+\n+  if (n >= 0x10000) return 0;\n+\n+  for (i = 0; i < n; i++)\n+    s++;\n+  return s;\n+}\n+\n+\n+int\n+main (int argc, char** argv)\n+{\n+  if (test_loop (int_0) != 0)\n+    abort();\n+  if (test_loop (int_1) != 1)\n+    abort();\n+  if (test_loop (int_12345) != 12345)\n+    abort();\n+\n+  return 0;\n+}\n+"}, {"sha": "1e8a9d1ff9b0103684a2ed3b4d72d6ed62da9248", "filename": "gcc/testsuite/gcc.target/pru/loop-si-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-si-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-si-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-si-2.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,20 @@\n+/* Test LOOP recognition */\n+\n+/* { dg-options \"-O1 -mloop\" } */\n+\n+/* -O1 in the options is significant.  Without it do-loop will not be\n+   run.  */\n+\n+unsigned int\n+test_loop (unsigned int n)\n+{\n+  unsigned int i;\n+  volatile unsigned int s = 0;\n+\n+  if (n >= 0x10000) return 0;\n+\n+  /* { dg-final { scan-assembler \"loop\\\\t.L\\[0-9\\]*, r\\[0-9\\]*\" } } */\n+  for (i = 0; i < n; i++)\n+    s++;\n+  return s;\n+}"}, {"sha": "8ae91c6edb37abdf274951b0315e102d06e27581", "filename": "gcc/testsuite/gcc.target/pru/loop-u8_pcrel_overflow.c", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-u8_pcrel_overflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-u8_pcrel_overflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-u8_pcrel_overflow.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,42 @@\n+/* Test large loop bodies where U8_PCREL would overflow */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -mloop\" } */\n+\n+/* -O1 in the options is significant.  Without it do-loop will not be\n+   run.  */\n+\n+extern void abort (void);\n+\n+#define OP\tdo { i1 <<= 2; i1 >>= 2; i2 *= 3; i2 /= 2; } while(0)\n+#define OP4\tOP; OP; OP; OP\n+#define OP16\tOP4; OP4; OP4; OP4\n+#define OP64\tOP16; OP16; OP16; OP16\n+#define OP256\tOP64; OP64; OP64; OP64\n+\n+unsigned int\n+test_loop (unsigned int i1, unsigned i2)\n+{\n+  unsigned int i;\n+  volatile unsigned int s = 0;\n+\n+  for (i = 0; i < 100; i++) {\n+    /* cannot use ASM NOP because it will prevent\n+       GCC from issuing a LOOP instruction. */\n+    OP256;\n+    s++;\n+  }\n+  return s + i1 + i2;\n+}\n+\n+volatile unsigned int I1 = 0;\n+volatile unsigned int I2 = 0;\n+\n+int\n+main (int argc, char** argv)\n+{\n+  if (test_loop (I1, I2) != 100)\n+    abort();\n+\n+  return 0;\n+}"}, {"sha": "8444f81bba700410b281f0107717fbfc153f5543", "filename": "gcc/testsuite/gcc.target/pru/loop-ubyte-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-ubyte-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-ubyte-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-ubyte-1.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,30 @@\n+/* Test LOOP recognition */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -mloop\" } */\n+\n+/* -O1 in the options is significant.  Without it do-loop will not be\n+   run.  */\n+\n+extern void abort (void);\n+\n+unsigned int\n+test_loop_ubyte_101 (void)\n+{\n+  unsigned int i;\n+  volatile unsigned int s = 0;\n+\n+  for (i = 0; i < 101; i++)\n+    s++;\n+  return s;\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  if (test_loop_ubyte_101 () != 101)\n+    abort();\n+\n+  return 0;\n+}\n+"}, {"sha": "058cbb08bdade0dd08ead28460279ababcdda78f", "filename": "gcc/testsuite/gcc.target/pru/loop-ubyte-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-ubyte-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-ubyte-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Floop-ubyte-2.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,18 @@\n+/* Test LOOP recognition */\n+\n+/* { dg-options \"-O1 -mloop\" } */\n+\n+/* -O1 in the options is significant.  Without it do-loop will not be\n+   run.  */\n+\n+unsigned int\n+test_loop_ubyte_101 (void)\n+{\n+  unsigned int i;\n+  volatile unsigned int s = 0;\n+\n+  /* { dg-final { scan-assembler \"loop\\\\t.L\\[0-9\\]*, 101\" } } */\n+  for (i = 0; i < 101; i++)\n+    s++;\n+  return s;\n+}"}, {"sha": "ee1288fc2aedf96a768e32d19879980d19c4d0cc", "filename": "gcc/testsuite/gcc.target/pru/lra-framepointer-fragmentation-1.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flra-framepointer-fragmentation-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flra-framepointer-fragmentation-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flra-framepointer-fragmentation-1.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do assemble } */\n+/* { dg-options \"-O1 -fno-omit-frame-pointer\" } */\n+#include <stdint.h>\n+\n+extern uint64_t global;\n+\n+uint64_t __attribute__((noinline)) test(uint64_t a, uint64_t b,\n+                                         uint64_t c, uint64_t d,\n+                                         uint64_t e, uint64_t f,\n+                                         uint64_t g, uint64_t h)\n+{\n+  uint64_t l1 = 0x12345678, l2 = 0x87654321, l3 = 1001, l4 = 1002;\n+  uint64_t l5 = 1004;\n+  uint32_t l6 = 2005;\n+  uint8_t c1 = 101, c2 = 102;\n+\n+  /* The numerous dummy asm input operands create just\n+   * enough register pressure to resort to using\n+   * FP.b1 (r4.b1).\n+   */\n+\n+  asm (\"nop\" /* { dg-error \"'asm' operand has impossible constraints\" } */\n+       : \"=r\" (l1)\n+       : \"0\" (l1), \"r\" (a), \"r\"(b),\n+       \"r\"(c), \"r\"(d), \"r\"(e), \"r\"(f),\n+       \"r\"(g), \"r\"(h), \"r\"(l2),\n+       \"r\"(c1), \"r\"(c2),\n+       \"r\"(l3), \"r\"(l4), \"r\"(l5), \"r\"(l6));\n+\n+  global = a+b+c+d+e+f+g+h + c1+c2 + l2;\n+\n+  return l1;\n+}"}, {"sha": "6c98e9bf13b3bf3af89bc2ec725570d6e754d81f", "filename": "gcc/testsuite/gcc.target/pru/lra-framepointer-fragmentation-2.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flra-framepointer-fragmentation-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flra-framepointer-fragmentation-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Flra-framepointer-fragmentation-2.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O1 -fomit-frame-pointer\" } */\n+#include <stdint.h>\n+\n+extern void abort (void);\n+\n+uint64_t global = 5;\n+\n+uint64_t __attribute__((noinline)) test(uint64_t a, uint64_t b,\n+                                         uint64_t c, uint64_t d,\n+                                         uint64_t e, uint64_t f,\n+                                         uint64_t g, uint64_t h)\n+{\n+  uint64_t l1 = 0x12345678, l2 = 0x87654321, l3 = 1001, l4 = 1002;\n+  uint64_t l5 = 1004;\n+  uint32_t l6 = 2005;\n+  uint8_t c1 = 101, c2 = 102;\n+\n+  /* The numerous dummy asm input operands create just\n+   * enough register pressure to resort to using FP (r4).\n+   */\n+\n+  asm (\"ldi32 %0, 0x11223344\\n\\t\"\n+       \"add %0, %0, %2\\n\\t\"\n+       \"add %0, %0, %3\\n\\t\"\n+       \"add %0, %0, %4\\n\\t\"\n+       \"add %0, %0, %5\\n\\t\"\n+       \"add %0, %0, %6\\n\\t\"\n+       \"add %0, %0, %7\\n\\t\"\n+       \"add %0, %0, %8\\n\\t\"\n+       \"add %0, %0, %9\\n\\t\"\n+       \"add %0, %0, %10\\n\\t\"\n+       \"add %0, %0, %11\\n\\t\"\n+       \"add %0, %0, %12\\n\\t\"\n+       \"add %0, %0, %13\\n\\t\"\n+       \"add %0, %0, %14\\n\\t\"\n+       \"add %0, %0, %15\\n\\t\"\n+       \"add %0, %0, %16\\n\\t\"\n+       : \"=r\" (l1)\n+       : \"0\" (l1), \"r\" (a), \"r\"(b),\n+       \"r\"(c), \"r\"(d), \"r\"(e), \"r\"(f),\n+       \"r\"(g), \"r\"(h), \"r\"(c1), \"r\"(c2),\n+       \"r\"(l2), \"r\"(l3), \"r\"(l4), \"r\"(l5), \"r\"(l6));\n+\n+  global = a+b+c+d+e+f+g+h + c1+c2 + l2+l3+l4+l5+l6;\n+\n+  return l1;\n+}\n+\n+int main()\n+{\n+  uint64_t a = test(1, 2, 3, 4, 5, 6, 7, 8);\n+\n+  if (a != 0x98878ae8) {\n+    abort();\n+  }\n+  if (global != 0x876557a4) {\n+    abort();\n+  }\n+  return 0;\n+}"}, {"sha": "117ae8fd176bb47a97be7ec3d470a52fd3e53e14", "filename": "gcc/testsuite/gcc.target/pru/mabi-ti-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-1.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,10 @@\n+/* Test TI ABI unsupported constructs */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-O1 -mabi=ti\" } */\n+\n+\n+int test(int a, int b, void (*fp)(void))\n+{ /* { dg-error \"function pointers not supported with '-mabi=ti' option\" } */\n+  return a+b;\n+}"}, {"sha": "d4a3aff546c040c5bf2a060a7e956aca832d96c6", "filename": "gcc/testsuite/gcc.target/pru/mabi-ti-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-2.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,15 @@\n+/* Test TI ABI unsupported constructs */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-O1 -mabi=ti\" } */\n+\n+\n+struct big {\n+\tchar c[9];\n+};\n+\n+struct big test(void)\n+{ /* { dg-error \"large return values not supported with '-mabi=ti' option\" } */\n+  static struct big b;\n+  return b;\n+}"}, {"sha": "c49f6653589c78e770c78bb3ac29a0f7dd6c27eb", "filename": "gcc/testsuite/gcc.target/pru/mabi-ti-3.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-3.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,12 @@\n+/* Test TI ABI unsupported constructs */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-O1 -mabi=ti\" } */\n+\n+\n+extern void extfunc(void (*fp)(void));\n+\n+void test(void)\n+{\n+  extfunc(test); /* { dg-error \"function pointers not supported with '-mabi=ti' option\" } */\n+}"}, {"sha": "0110e6ce2904a14752975325ab93bdbb65cf14ea", "filename": "gcc/testsuite/gcc.target/pru/mabi-ti-4.c", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-4.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,14 @@\n+/* Test TI ABI with supported constructs */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-O1 -mabi=ti\" } */\n+\n+\n+extern void extfunc1(long long);\n+extern long long extfunc2(long long);\n+\n+long long test(void)\n+{\n+  extfunc1(3);\n+  return extfunc2(1);\n+}"}, {"sha": "38eeaa4435dc8a13faf312d976379e89adba8efe", "filename": "gcc/testsuite/gcc.target/pru/mabi-ti-5.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-5.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,33 @@\n+/* Test TI ABI unsupported constructs */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-O1 -mabi=ti\" } */\n+\n+struct s1 {\n+    void (*f)(void);\n+    int a;\n+};\n+\n+struct s2 {\n+    union {\n+\tvoid (*f)(void);\n+\tint a;\n+\tlong b;\n+    } u;\n+};\n+\n+int test1(struct s1 *p)\n+{\n+  return p->a; /* { dg-error \"function pointers not supported with '-mabi=ti' option\" } */\n+  return 1;\n+}\n+\n+int test1_unused_arg(struct s1 p, int a)\n+{ /* { dg-error \"function pointers not supported with '-mabi=ti' option\" } */\n+  return a;\n+}\n+\n+int test2(struct s2 v)\n+{ /* { dg-error \"function pointers not supported with '-mabi=ti' option\" } */\n+  return 2;\n+}"}, {"sha": "c8aa018a21e2adac91ea078a234d7adbe4496c7a", "filename": "gcc/testsuite/gcc.target/pru/mabi-ti-6.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-6.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,12 @@\n+/* Test TI ABI unsupported constructs */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-O1 -mabi=ti\" } */\n+\n+\n+extern void (*extfuncp)(int);\n+\n+void test(void)\n+{\n+  extfuncp(1); /* { dg-error \"function pointers not supported with '-mabi=ti' option\" } */\n+}"}, {"sha": "cc095facf646f81f17a122d8d520fd2a635df020", "filename": "gcc/testsuite/gcc.target/pru/mabi-ti-7.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fmabi-ti-7.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,21 @@\n+/* Test TI ABI unsupported constructs */\n+\n+/* { dg-do assemble } */\n+/* { dg-options \"-O1 -mabi=ti\" } */\n+\n+struct s1 {\n+    int (*f)(void);\n+    int a;\n+};\n+\n+extern struct s1 s;\n+\n+int test1(void)\n+{\n+  return s.f(); /* { dg-error \"function pointers not supported with '-mabi=ti' option\" } */\n+}\n+\n+int test2(void)\n+{\n+  return s.a; /* { dg-error \"function pointers not supported with '-mabi=ti' option\" } */\n+}"}, {"sha": "1608d4694999e3ea1f04c25143c93686741ffa03", "filename": "gcc/testsuite/gcc.target/pru/pr64366.c", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fpr64366.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fpr64366.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fpr64366.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,128 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+typedef int int8_t __attribute__ ((__mode__ (__QI__)));\n+typedef int int16_t __attribute__ ((__mode__ (__HI__)));\n+typedef int int32_t __attribute__ ((__mode__ (__SI__)));\n+typedef int int64_t __attribute__ ((__mode__ (__DI__)));\n+typedef unsigned char uint8_t;\n+typedef unsigned short int uint16_t;\n+typedef unsigned int uint32_t;\n+__extension__ typedef unsigned long long int uint64_t;\n+typedef int intptr_t;\n+typedef struct BigStruct{\n+  uint8_t a;\n+  int8_t b;\n+  uint16_t c;\n+  int16_t d;\n+  uint32_t e;\n+  int32_t f;\n+  uint64_t g;\n+  int64_t h;\n+  float i;\n+  double j;\n+  long double k;\n+  char* l;\n+  uint8_t m;\n+  int8_t n;\n+  uint16_t o;\n+  int16_t p;\n+  uint32_t q;\n+  int32_t r;\n+  uint64_t s;\n+  int64_t t;\n+  float u;\n+  double v;\n+  long double w;\n+  char* x;\n+  uint8_t y;\n+  int8_t z;\n+  uint16_t aa;\n+  int16_t bb;\n+  uint32_t cc;\n+  int32_t dd;\n+  uint64_t ee;\n+  int64_t ff;\n+  float gg;\n+  double hh;\n+  long double ii;\n+  char* jj;\n+  uint8_t kk;\n+  int8_t ll;\n+  uint16_t mm;\n+  int16_t nn;\n+  uint32_t oo;\n+  int32_t pp;\n+  uint64_t qq;\n+  int64_t rr;\n+  float ss;\n+  double tt;\n+  long double uu;\n+  char* vv;\n+  uint8_t ww;\n+  int8_t xx;\n+}  BigStruct;\n+\n+extern void foobar();\n+\n+void\n+test_large_fn (uint8_t ui8_1, int8_t si8_1, uint16_t ui16_1, int16_t si16_1,\n+\t       uint32_t ui32_1, int32_t si32_1, uint64_t ui64_1, int64_t si64_1,\n+\t       float f_1, double d_1, long double ld_1, char* p_1,\n+\t       uint8_t ui8_2, int8_t si8_2, uint16_t ui16_2, int16_t si16_2,\n+\t       uint32_t ui32_2, int32_t si32_2, uint64_t ui64_2, int64_t si64_2,\n+\t       float f_2, double d_2, long double ld_2, char* p_2,\n+\t       uint8_t ui8_3, int8_t si8_3, uint16_t ui16_3, int16_t si16_3,\n+\t       uint32_t ui32_3, int32_t si32_3, uint64_t ui64_3, int64_t si64_3,\n+\t       float f_3, double d_3, long double ld_3, char* p_3,\n+\t       uint8_t ui8_4, int8_t si8_4, uint16_t ui16_4, int16_t si16_4,\n+\t       uint32_t ui32_4, int32_t si32_4, uint64_t ui64_4, int64_t si64_4,\n+\t       float f_4, double d_4, long double ld_4, char* p_4,\n+\t       uint8_t ui8_5, int8_t si8_5)\n+{\n+    BigStruct retVal =\n+      {\n+\tui8_1 + 1, si8_1 + 1, ui16_1 + 1, si16_1 + 1,\n+\tui32_1 + 1, si32_1 + 1, ui64_1 + 1, si64_1 + 1,\n+\tf_1 + 1, d_1 + 1, ld_1 + 1, (char*)((intptr_t)p_1 + 1),\n+\tui8_2 + 2, si8_2 + 2, ui16_2 + 2, si16_2 + 2,\n+\tui32_2 + 2, si32_2 + 2, ui64_2 + 2, si64_2 + 2,\n+\tf_2 + 2, d_2 + 2, ld_2 + 2, (char*)((intptr_t)p_2 + 2),\n+\tui8_3 + 3, si8_3 + 3, ui16_3 + 3, si16_3 + 3,\n+\tui32_3 + 3, si32_3 + 3, ui64_3 + 3, si64_3 + 3,\n+\tf_3 + 3, d_3 + 3, ld_3 + 3, (char*)((intptr_t)p_3 + 3),\n+\tui8_4 + 4, si8_4 + 4, ui16_4 + 4, si16_4 + 4,\n+\tui32_4 + 4, si32_4 + 4, ui64_4 + 4, si64_4 + 4,\n+\tf_4 + 4, d_4 + 4, ld_4 + 4, (char*)((intptr_t)p_4 + 4),\n+\tui8_5 + 5, si8_5 + 5\n+      };\n+\n+    foobar (\"%\" \"u\" \" %\" \"d\" \" %hu %hd %u %d %\" \"ll\" \"u\" \" %\" \"ll\" \"d\"\n+\t      \" %.0f %.0f %.0Lf %#lx \" \"%\" \"u\" \" %\" \"d\" \" %hu %hd %u %d %\"\n+\t      \"ll\" \"u\" \" %\" \"ll\" \"d\" \" %.0f %.0f %.0Lf %#lx \" \"%\" \"u\"\n+\t      \" %\" \"d\" \" %hu %hd %u %d %\" \"ll\" \"u\" \" %\" \"ll\" \"d\"\n+\t      \" %.0f %.0f %.0Lf %#lx \" \"%\" \"u\" \" %\" \"d\" \" %hu %hd %u %d %\"\n+\t      \"ll\" \"u\" \" %\" \"ll\" \"d\" \" %.0f %.0f %.0Lf %#lx %\" \"u\" \" %\"\n+\t      \"d\" \": \" \"%\" \"u\" \" %\" \"d\" \" %hu %hd %u %d %\" \"ll\" \"u\" \" %\"\n+\t      \"ll\" \"d\" \" %.0f %.0f %.0Lf %#lx \" \"%\" \"u\" \" %\" \"d\"\n+\t      \" %hu %hd %u %d %\" \"ll\" \"u\" \" %\" \"ll\" \"d\" \" %.0f %.0f %.0Lf %#lx \"\n+\t      \"%\" \"u\" \" %\" \"d\" \" %hu %hd %u %d %\" \"ll\" \"u\" \" %\" \"ll\" \"d\"\n+\t      \" %.0f %.0f %.0Lf %#lx \" \"%\" \"u\" \" %\" \"d\" \" %hu %hd %u %d %\"\n+\t    \"ll\" \"u\" \" %\" \"ll\" \"d\" \" %.0f %.0f %.0Lf %#lx %\" \"u\" \" %\" \"d\" \"\\n\",\n+\t    ui8_1, si8_1, ui16_1, si16_1, ui32_1, si32_1, ui64_1, si64_1,\n+\t    f_1, d_1, ld_1, (unsigned long)p_1, ui8_2, si8_2, ui16_2, si16_2,\n+\t    ui32_2, si32_2, ui64_2, si64_2, f_2, d_2, ld_2, (unsigned long)p_2,\n+\t    ui8_3, si8_3, ui16_3, si16_3, ui32_3, si32_3, ui64_3, si64_3, f_3,\n+\t    d_3, ld_3, (unsigned long)p_3, ui8_4, si8_4, ui16_4, si16_4, ui32_4,\n+\t    si32_4, ui64_4, si64_4, f_4, d_4, ld_4, (unsigned long)p_4, ui8_5,\n+\t    si8_5, retVal.a, retVal.b, retVal.c, retVal.d, retVal.e, retVal.f,\n+\t    retVal.g, retVal.h, retVal.i, retVal.j, retVal.k,\n+\t    (unsigned long)retVal.l, retVal.m, retVal.n, retVal.o, retVal.p,\n+\t    retVal.q, retVal.r, retVal.s, retVal.t, retVal.u, retVal.v,\n+\t    retVal.w, (unsigned long)retVal.x, retVal.y, retVal.z, retVal.aa,\n+\t    retVal.bb, retVal.cc, retVal.dd, retVal.ee, retVal.ff, retVal.gg,\n+\t    retVal.hh, retVal.ii, (unsigned long)retVal.jj, retVal.kk,\n+\t    retVal.ll, retVal.mm, retVal.nn, retVal.oo, retVal.pp, retVal.qq,\n+\t    retVal.rr, retVal.ss, retVal.tt, retVal.uu, (unsigned long)retVal.vv,\n+\t    retVal.ww, retVal.xx);\n+}"}, {"sha": "2c5ea3755058bc345ffac1a1c0dfc3b7a8370812", "filename": "gcc/testsuite/gcc.target/pru/pragma-ctable_entry.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fpragma-ctable_entry.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fpragma-ctable_entry.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fpragma-ctable_entry.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,22 @@\n+/* Test specification of custom instructions via command-line options.  */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it LBCO/SBCO operations may\n+   not be optimized to the respective instructions.  */\n+\n+\n+#pragma ctable_entry 12 0x48040000\n+\n+unsigned int\n+test_ctable (unsigned int val1, unsigned int val2)\n+{\n+  ((volatile unsigned short int *)0x48040000)[0] = val2;\n+  ((volatile unsigned int *)0x48040000)[val1] = val2;\n+  return ((volatile unsigned int *)0x48040000)[4];\n+}\n+\n+/* { dg-final { scan-assembler \"sbco\\\\tr15.b\\[012\\]?, 12, 0, 2\" } } */\n+/* { dg-final { scan-assembler \"sbco\\\\tr15.b0, 12, r14, 4\" } } */\n+/* { dg-final { scan-assembler \"lbco\\\\tr14.b0, 12, 16, 4\" } } */"}, {"sha": "bf1330306b0596acf321be4b4177572451bcf3bd", "filename": "gcc/testsuite/gcc.target/pru/pru.exp", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fpru.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fpru.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fpru.exp?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,41 @@\n+# Copyright (C) 2015-2019 Free Software Foundation, Inc.\n+\n+# This program is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3 of the License, or\n+# (at your option) any later version.\n+# \n+# This program is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+# \n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING3.  If not see\n+# <http://www.gnu.org/licenses/>.\n+\n+# GCC testsuite that uses the `dg.exp' driver.\n+\n+# Exit immediately if this isn't a PRU target.\n+if ![istarget pru*-*-*] then {\n+  return\n+}\n+\n+# Load support procs.\n+load_lib gcc-dg.exp\n+\n+# If a testcase doesn't have special options, use these.\n+global DEFAULT_CFLAGS\n+if ![info exists DEFAULT_CFLAGS] then {\n+    set DEFAULT_CFLAGS \" -ansi -pedantic-errors\"\n+}\n+\n+# Initialize `dg'.\n+dg-init\n+\n+# Main loop.\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/*.\\[cCS\\]]] \\\n+\t\"\" $DEFAULT_CFLAGS\n+\n+# All done.\n+dg-finish"}, {"sha": "1a8919075617166f84c9e4a083144964dc8d35f4", "filename": "gcc/testsuite/gcc.target/pru/qbbc-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbc-1.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,29 @@\n+/* Test QBBC recognition */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it bit-check-and-branch\n+   operation may not be optimized to QBBC.  */\n+\n+extern void abort (void);\n+\n+unsigned int\n+test_qbbc_reg (unsigned int a, unsigned int b, unsigned int val)\n+{\n+  if (!(val & (1 << 19)))\n+    return a;\n+  return b;\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  if (test_qbbc_reg (101, 505, (1u << 19)) != 505)\n+    abort();\n+  if (test_qbbc_reg (101, 505, (1u << 18)) != 101)\n+    abort();\n+\n+  return 0;\n+}\n+"}, {"sha": "208e039afa99ddc3a3995dc028bfaac66c909121", "filename": "gcc/testsuite/gcc.target/pru/qbbc-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbc-2.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,15 @@\n+/* Test QBBC recognition */\n+\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it bit-check-and-branch\n+   operation may not be optimized to QBBC.  */\n+\n+unsigned int\n+test_qbbc_reg (unsigned int a, unsigned int b, unsigned int val)\n+{\n+  /* { dg-final { scan-assembler \"qbbc\\\\t.L\\[0-9\\]*, r16, 19\" } } */\n+  if (!(val & (1 << 19)))\n+    return a;\n+  return b;\n+}"}, {"sha": "7fb7e1a9742bee1311518fbad8ec0b24c0236ad9", "filename": "gcc/testsuite/gcc.target/pru/qbbc-3.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbc-3.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,15 @@\n+/* Test QBBC recognition */\n+\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it bit-check-and-branch\n+   operation may not be optimized to QBBC.  */\n+\n+unsigned int\n+test_qbbc_reg (unsigned int a, unsigned int b, unsigned short val)\n+{\n+  /* { dg-final { scan-assembler \"qbbc\\\\t.L\\[0-9\\]*, r16.w0, 12\" } } */\n+  if (!(val & (1 << 12)))\n+    return a;\n+  return b;\n+}"}, {"sha": "01f8187d64f5a70cd9b989941d8bd9cc6730f369", "filename": "gcc/testsuite/gcc.target/pru/qbbs-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbs-1.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,29 @@\n+/* Test QBBS recognition */\n+\n+/* { dg-do run } */\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it bit-check-and-branch\n+   operation may not be optimized to QBBS.  */\n+\n+extern void abort (void);\n+\n+unsigned int\n+test_qbbs_reg (unsigned int a, unsigned int b, unsigned int val)\n+{\n+  if (val & (1 << 19))\n+    return a;\n+  return b;\n+}\n+\n+int\n+main (int argc, char** argv)\n+{\n+  if (test_qbbs_reg (101, 505, (1u << 19)) != 101)\n+    abort();\n+  if (test_qbbs_reg (101, 505, (1u << 18)) != 505)\n+    abort();\n+\n+  return 0;\n+}\n+"}, {"sha": "fea7f202659ea98a2ce163654e9cf5660fd8a71a", "filename": "gcc/testsuite/gcc.target/pru/qbbs-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fqbbs-2.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,15 @@\n+/* Test QBBS recognition */\n+\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it bit-check-and-branch\n+   operation may not be optimized to QBBS.  */\n+\n+unsigned int\n+test_qbbs_reg (unsigned int a, unsigned int b, unsigned int val)\n+{\n+  /* { dg-final { scan-assembler \"qbbs\\\\t.L\\[0-9\\]*, r16, 19\" } } */\n+  if (val & (1 << 19))\n+    return a;\n+  return b;\n+}"}, {"sha": "6e63b736206e0b0dae42292664e4a0348de45f3c", "filename": "gcc/testsuite/gcc.target/pru/setbit.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fsetbit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fsetbit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fsetbit.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,13 @@\n+/* setbit instruction generation */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+unsigned int\n+test_setbit (unsigned int val)\n+{\n+  /* { dg-final { scan-assembler \"set\\\\tr14, r14, 31\" } } */\n+  val |= (1u << 31);\n+  return val;\n+}\n+"}, {"sha": "716043cf0711c7e3f32e4d1006717854cf6e3abd", "filename": "gcc/testsuite/gcc.target/pru/zero_extend-and-hisi.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-and-hisi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-and-hisi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-and-hisi.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,16 @@\n+/* AND with zero extension of operands.\n+   It is matched slightly different than rest of ALU ops. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it the zero extension might not\n+   be coalesced into the ALU instruction. */\n+\n+unsigned int\n+test_zext_and_hi (unsigned short val1, unsigned int val2)\n+{\n+  /* { dg-final { scan-assembler \"and\\\\tr14, r14.w0, r15\" } } */\n+  return val1 & val2;\n+}\n+"}, {"sha": "06f584597202ac05d6b932ec1fe5daf4125b29b0", "filename": "gcc/testsuite/gcc.target/pru/zero_extend-and-qihi.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-and-qihi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-and-qihi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-and-qihi.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,16 @@\n+/* AND with zero extension of operands.\n+   It is matched slightly different than rest of ALU ops. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it the zero extension might not\n+   be coalesced into the ALU instruction. */\n+\n+unsigned int\n+test_zext_and_hi (unsigned char val1, unsigned int val2)\n+{\n+  /* { dg-final { scan-assembler \"and\\\\tr14, r14.b0, r15\" } } */\n+  return val1 & val2;\n+}\n+"}, {"sha": "06f584597202ac05d6b932ec1fe5daf4125b29b0", "filename": "gcc/testsuite/gcc.target/pru/zero_extend-and-qisi.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-and-qisi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-and-qisi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-and-qisi.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,16 @@\n+/* AND with zero extension of operands.\n+   It is matched slightly different than rest of ALU ops. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it the zero extension might not\n+   be coalesced into the ALU instruction. */\n+\n+unsigned int\n+test_zext_and_hi (unsigned char val1, unsigned int val2)\n+{\n+  /* { dg-final { scan-assembler \"and\\\\tr14, r14.b0, r15\" } } */\n+  return val1 & val2;\n+}\n+"}, {"sha": "eddd4298169aa053d4b869eb5fdbcb333b123366", "filename": "gcc/testsuite/gcc.target/pru/zero_extend-hisi.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-hisi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-hisi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-hisi.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,43 @@\n+/* ALU operations with zero extended operands. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it the zero extension might not\n+   be coalesced into the ALU instruction. */\n+\n+unsigned int\n+test_zext_plus_hi (unsigned short val1, unsigned int val2)\n+{\n+  /* { dg-final { scan-assembler \"add\\\\tr14, r14.w0, r15\" } } */\n+  return val1 + val2;\n+}\n+\n+unsigned int\n+test_zext_minus_hi (unsigned short val1, unsigned int val2)\n+{\n+  /* { dg-final { scan-assembler \"sub\\\\tr14, r14.w0, r15\" } } */\n+  return val1 - val2;\n+}\n+\n+unsigned int\n+test_zext_xor_hi (unsigned short val1, unsigned int val2)\n+{\n+  /* { dg-final { scan-assembler \"xor\\\\tr14, r14.w0, r15\" } } */\n+  return val1 ^ val2;\n+}\n+\n+unsigned int\n+test_zext_or_hi (unsigned short val1, unsigned int val2)\n+{\n+  /* { dg-final { scan-assembler \"or\\\\tr14, r14.w0, r15\" } } */\n+  return val1 | val2;\n+}\n+\n+unsigned int\n+test_zext_ashl_hi (unsigned short val1, unsigned int val2)\n+{\n+  /* { dg-final { scan-assembler \"lsl\\\\tr14, r14.w0, r15\" } } */\n+  return val1 << val2;\n+}\n+"}, {"sha": "62e81f8a4ccb4e5dbe333a68ea54efc5c04672ae", "filename": "gcc/testsuite/gcc.target/pru/zero_extend-qihi.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-qihi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-qihi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-qihi.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,43 @@\n+/* ALU operations with zero extended operands. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it the zero extension might not\n+   be coalesced into the ALU instruction. */\n+\n+unsigned int\n+test_zext_plus_hi (unsigned char val1, unsigned short val2)\n+{\n+  /* { dg-final { scan-assembler \"add\\\\tr14, r14.b0, r14.w1\" } } */\n+  return val1 + val2;\n+}\n+\n+unsigned int\n+test_zext_minus_hi (unsigned char val1, unsigned short val2)\n+{\n+  /* { dg-final { scan-assembler \"sub\\\\tr14, r14.b0, r14.w1\" } } */\n+  return val1 - val2;\n+}\n+\n+unsigned int\n+test_zext_xor_hi (unsigned char val1, unsigned short val2)\n+{\n+  /* { dg-final { scan-assembler \"xor\\\\tr14, r14.b0, r14.w1\" } } */\n+  return val1 ^ val2;\n+}\n+\n+unsigned int\n+test_zext_or_hi (unsigned char val1, unsigned short val2)\n+{\n+  /* { dg-final { scan-assembler \"or\\\\tr14, r14.b0, r14.w1\" } } */\n+  return val1 | val2;\n+}\n+\n+unsigned int\n+test_zext_ashl_hi (unsigned char val1, unsigned short val2)\n+{\n+  /* { dg-final { scan-assembler \"lsl\\\\tr14, r14.b0, r14.w1\" } } */\n+  return val1 << val2;\n+}\n+"}, {"sha": "0e9ae4cf01ec22cad2956585f9b177f357aab589", "filename": "gcc/testsuite/gcc.target/pru/zero_extend-qisi.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-qisi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-qisi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpru%2Fzero_extend-qisi.c?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -0,0 +1,43 @@\n+/* ALU operations with zero extended operands. */\n+\n+/* { dg-do compile } */\n+/* { dg-options \"-O1\" } */\n+\n+/* -O1 in the options is significant.  Without it the zero extension might not\n+   be coalesced into the ALU instruction. */\n+\n+unsigned int\n+test_zext_plus_hi (unsigned char val1, unsigned int val2)\n+{\n+  /* { dg-final { scan-assembler \"add\\\\tr14, r14.b0, r15\" } } */\n+  return val1 + val2;\n+}\n+\n+unsigned int\n+test_zext_minus_hi (unsigned char val1, unsigned int val2)\n+{\n+  /* { dg-final { scan-assembler \"sub\\\\tr14, r14.b0, r15\" } } */\n+  return val1 - val2;\n+}\n+\n+unsigned int\n+test_zext_xor_hi (unsigned char val1, unsigned int val2)\n+{\n+  /* { dg-final { scan-assembler \"xor\\\\tr14, r14.b0, r15\" } } */\n+  return val1 ^ val2;\n+}\n+\n+unsigned int\n+test_zext_or_hi (unsigned char val1, unsigned int val2)\n+{\n+  /* { dg-final { scan-assembler \"or\\\\tr14, r14.b0, r15\" } } */\n+  return val1 | val2;\n+}\n+\n+unsigned int\n+test_zext_ashl_hi (unsigned char val1, unsigned int val2)\n+{\n+  /* { dg-final { scan-assembler \"lsl\\\\tr14, r14.b0, r15\" } } */\n+  return val1 << val2;\n+}\n+"}, {"sha": "b60eab6d75dedd76e4b5db66b5bd8bd9a21e4106", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/506bd02c5a2aff1bf4679532062f1a07579a581c/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=506bd02c5a2aff1bf4679532062f1a07579a581c", "patch": "@@ -513,7 +513,8 @@ proc check_effective_target_trampolines { } {\n \t || [istarget msp430-*-*]\n \t || [istarget nvptx-*-*]\n \t || [istarget hppa2.0w-hp-hpux11.23]\n-\t || [istarget hppa64-hp-hpux11.23] } {\n+\t || [istarget hppa64-hp-hpux11.23]\n+\t || [istarget pru-*-*] } {\n \treturn 0;\n     }\n     return 1\n@@ -687,6 +688,7 @@ proc check_profiling_available { test_what } {\n \t     || [istarget nvptx-*-*]\n \t     || [istarget powerpc-*-eabi*]\n \t     || [istarget powerpc-*-elf]\n+\t     || [istarget pru-*-*]\n \t     || [istarget rx-*-*]\t\n \t     || [istarget tic6x-*-elf]\n \t     || [istarget visium-*-*]"}]}