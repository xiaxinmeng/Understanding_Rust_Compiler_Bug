{"sha": "1ef6855c51ead346b46e75c361cda328f25a796d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWVmNjg1NWM1MWVhZDM0NmI0NmU3NWMzNjFjZGEzMjhmMjVhNzk2ZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-11-21T04:41:38Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-11-21T04:41:38Z"}, "message": "re PR rtl-optimization/20583 (ICE in output_operand: invalid expression as operand)\n\ngcc/\n\tPR middle-end/20583\n\t* cse.c (cse_insn): Reject invalid forms of CONST earlier.\n\ngcc/testsuite/\n\tPR middle-end/20583\n\t* gcc.c-torture/compile/pr20583.c: New.\n\nFrom-SVN: r107278", "tree": {"sha": "85a7bc2ffc379e780e1eb3308a7cd52a68bfc9d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/85a7bc2ffc379e780e1eb3308a7cd52a68bfc9d1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1ef6855c51ead346b46e75c361cda328f25a796d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef6855c51ead346b46e75c361cda328f25a796d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ef6855c51ead346b46e75c361cda328f25a796d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ef6855c51ead346b46e75c361cda328f25a796d/comments", "author": null, "committer": null, "parents": [{"sha": "67dc1785a5a3fd0a439df2b45db5b7f69b3a0ffb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67dc1785a5a3fd0a439df2b45db5b7f69b3a0ffb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67dc1785a5a3fd0a439df2b45db5b7f69b3a0ffb"}], "stats": {"total": 67, "additions": 56, "deletions": 11}, "files": [{"sha": "5f1e761a4ad079bfdf9ccdcbed08749816c6204b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef6855c51ead346b46e75c361cda328f25a796d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef6855c51ead346b46e75c361cda328f25a796d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1ef6855c51ead346b46e75c361cda328f25a796d", "patch": "@@ -1,3 +1,8 @@\n+2005-11-21  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\tPR middle-end/20583\n+\t* cse.c (cse_insn): Reject invalid forms of CONST earlier.\n+\n 2005-11-20  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* combine.c (try_combine): Do not run subst on i1src and i2src in"}, {"sha": "fdcbe19ba6551a1038df84654be81e7fada4834b", "filename": "gcc/cse.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef6855c51ead346b46e75c361cda328f25a796d/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef6855c51ead346b46e75c361cda328f25a796d/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=1ef6855c51ead346b46e75c361cda328f25a796d", "patch": "@@ -5506,6 +5506,22 @@ cse_insn (rtx insn, rtx libcall_insn)\n \t      break;\n \t    }\n \n+\t  /* Reject certain invalid forms of CONST that we create.  */\n+\t  else if (CONSTANT_P (trial)\n+\t\t   && GET_CODE (trial) == CONST\n+\t\t   /* Reject cases that will cause decode_rtx_const to\n+\t\t      die.  On the alpha when simplifying a switch, we\n+\t\t      get (const (truncate (minus (label_ref)\n+\t\t      (label_ref)))).  */\n+\t\t   && (GET_CODE (XEXP (trial, 0)) == TRUNCATE\n+\t\t       /* Likewise on IA-64, except without the\n+\t\t\t  truncate.  */\n+\t\t       || (GET_CODE (XEXP (trial, 0)) == MINUS\n+\t\t\t   && GET_CODE (XEXP (XEXP (trial, 0), 0)) == LABEL_REF\n+\t\t\t   && GET_CODE (XEXP (XEXP (trial, 0), 1)) == LABEL_REF)))\n+\t    /* Do nothing for this case.  */\n+\t    ;\n+\n \t  /* Look for a substitution that makes a valid insn.  */\n \t  else if (validate_change (insn, &SET_SRC (sets[i].rtl), trial, 0))\n \t    {\n@@ -5541,17 +5557,6 @@ cse_insn (rtx insn, rtx libcall_insn)\n \n \t  else if (constant_pool_entries_cost\n \t\t   && CONSTANT_P (trial)\n-\t\t   /* Reject cases that will cause decode_rtx_const to\n-\t\t      die.  On the alpha when simplifying a switch, we\n-\t\t      get (const (truncate (minus (label_ref)\n-\t\t      (label_ref)))).  */\n-\t\t   && ! (GET_CODE (trial) == CONST\n-\t\t\t && GET_CODE (XEXP (trial, 0)) == TRUNCATE)\n-\t\t   /* Likewise on IA-64, except without the truncate.  */\n-\t\t   && ! (GET_CODE (trial) == CONST\n-\t\t\t && GET_CODE (XEXP (trial, 0)) == MINUS\n-\t\t\t && GET_CODE (XEXP (XEXP (trial, 0), 0)) == LABEL_REF\n-\t\t\t && GET_CODE (XEXP (XEXP (trial, 0), 1)) == LABEL_REF)\n \t\t   && (src_folded == 0\n \t\t       || (!MEM_P (src_folded)\n \t\t\t   && ! src_folded_force_flag))"}, {"sha": "48f03546b5f9463321aa3a8ebdd3e9b561e5456a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef6855c51ead346b46e75c361cda328f25a796d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef6855c51ead346b46e75c361cda328f25a796d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1ef6855c51ead346b46e75c361cda328f25a796d", "patch": "@@ -1,3 +1,8 @@\n+2005-11-21  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\tPR middle-end/20583\n+\t* gcc.c-torture/compile/pr20583.c: New.\n+\n 2005-11-20  Bernd Schmidt  <bernd.schmidt@analog.com>\n \n \t* gcc.c-torture/execute/usmul.c: New test."}, {"sha": "6c5f891d3d0ed8c1332ecafb4cb01560d1795c55", "filename": "gcc/testsuite/gcc.c-torture/compile/pr20583.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1ef6855c51ead346b46e75c361cda328f25a796d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr20583.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1ef6855c51ead346b46e75c361cda328f25a796d/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr20583.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr20583.c?ref=1ef6855c51ead346b46e75c361cda328f25a796d", "patch": "@@ -0,0 +1,30 @@\n+/* PR target/20583\n+   On m68k-none-elf, CSE used to generate\n+\n+     (set (reg:HI ...)\n+          (const:HI (truncate:HI (minus:SI (label_ref ...)\n+                                           (label_ref ...)))))\n+\n+   which output functions do not know how to handle.  Make sure that\n+   such a constant will be rejected.  */\n+\n+void bar (unsigned int);\n+\n+void\n+foo (void)\n+{\n+  char buf[1] = { 3 };\n+  const char *p = buf;\n+  const char **q = &p;\n+  unsigned int ch;\n+  switch (**q)\n+    {\n+    case 1:  ch = 5; break;\n+    case 2:  ch = 4; break;\n+    case 3:  ch = 3; break;\n+    case 4:  ch = 2; break;\n+    case 5:  ch = 1; break;\n+    default: ch = 0; break;\n+    }\n+  bar (ch);\n+}"}]}