{"sha": "0eab684046dc0a228233530ed9a01fcaf2220cbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGVhYjY4NDA0NmRjMGEyMjgyMzM1MzBlZDlhMDFmY2FmMjIyMGNiZQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2007-08-08T19:33:24Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2007-08-08T19:33:24Z"}, "message": "x-rs6000: New file.\n\n        * config/rs6000/x-rs6000: New file.\n        * config/rs6000/darwin.h (CC1_SPEC): Add cc1_cpu.\n        * config/rs6000/rs6000.h (EXTRA_SPECS): Add cc1_cpu.\n        (EXTRA_SPEC_FUNCTIONS): Define.\n        (HAVE_LOCAL_CPU_DETECT): Define.\n        (CC1_CPU_SPEC): Define.\n        * config/rs6000/driver-rs6000.c: New file.\n        * config/rs6000/aix.h (CC1_SPEC): Define.\n        * config/rs6000/sysv4.h (CC1_SPEC): Add cc1_cpu.\n        * config.host: Add x-rs6000 to host_xmake_file if host and target\n        are rs6000 or powerpc.\n\nFrom-SVN: r127304", "tree": {"sha": "c6cea5c1156edcc4edd8689ae0ccae77a83b7f7a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c6cea5c1156edcc4edd8689ae0ccae77a83b7f7a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0eab684046dc0a228233530ed9a01fcaf2220cbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eab684046dc0a228233530ed9a01fcaf2220cbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0eab684046dc0a228233530ed9a01fcaf2220cbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0eab684046dc0a228233530ed9a01fcaf2220cbe/comments", "author": null, "committer": null, "parents": [{"sha": "be1767b73e150980697a1d88fea543ebe2de7f17", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1767b73e150980697a1d88fea543ebe2de7f17", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be1767b73e150980697a1d88fea543ebe2de7f17"}], "stats": {"total": 443, "additions": 442, "deletions": 1}, "files": [{"sha": "7d9769a783fe06832bd94a08703d9f381488c2a0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0eab684046dc0a228233530ed9a01fcaf2220cbe", "patch": "@@ -1,3 +1,17 @@\n+2007-08-08  David Edelsohn  <edelsohn@gnu.org>\n+\n+\t* config/rs6000/x-rs6000: New file.\n+\t* config/rs6000/darwin.h (CC1_SPEC): Add cc1_cpu.\n+\t* config/rs6000/rs6000.h (EXTRA_SPECS): Add cc1_cpu.\n+\t(EXTRA_SPEC_FUNCTIONS): Define.\n+\t(HAVE_LOCAL_CPU_DETECT): Define.\n+\t(CC1_CPU_SPEC): Define.\n+\t* config/rs6000/driver-rs6000.c: New file.\n+\t* config/rs6000/aix.h (CC1_SPEC): Define.\n+\t* config/rs6000/sysv4.h (CC1_SPEC): Add cc1_cpu.\n+\t* config.host: Add x-rs6000 to host_xmake_file if host and target\n+\tare rs6000 or powerpc.\n+\n 2007-08-08  Paolo Bonzini <paolo.bonzini@lu.unisi.ch>\n \n \t* config/i386/t-crtstuff (CRTSTUFF_T_CFLAGS): Use +=."}, {"sha": "93d97f1ce0d3cb0d265d2d86652a6e654530d9c3", "filename": "gcc/config.host", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig.host", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig.host", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.host?ref=0eab684046dc0a228233530ed9a01fcaf2220cbe", "patch": "@@ -106,6 +106,19 @@ case ${host} in\n     ;;\n esac\n \n+case ${host} in\n+  rs6000-*-* \\\n+  | powerpc*-*-* )\n+    case ${target} in\n+      rs6000-*-* \\\n+      | powerpc*-*-* )\n+        host_extra_gcc_objs=\"driver-rs6000.o\"\n+        host_xmake_file=\"${host_xmake_file} rs6000/x-rs6000\"\n+        ;;\n+    esac\n+    ;;\n+esac\n+\n # Machine-specific settings.\n case ${host} in\n   alpha*-dec-*vms*)"}, {"sha": "6f91c57f76441d8772f7aaea467c200296b85449", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=0eab684046dc0a228233530ed9a01fcaf2220cbe", "patch": "@@ -109,6 +109,8 @@\n #define CPP_SPEC \"%{posix: -D_POSIX_SOURCE}\\\n    %{ansi: -D_ANSI_C_SOURCE}\"\n \n+#define CC1_SPEC \"%(cc1_cpu)\"\n+\n #undef ASM_DEFAULT_SPEC\n #define ASM_DEFAULT_SPEC \"\"\n "}, {"sha": "6c88757d24e9c4149047adabf2647457d5919a85", "filename": "gcc/config/rs6000/darwin.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig%2Frs6000%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdarwin.h?ref=0eab684046dc0a228233530ed9a01fcaf2220cbe", "patch": "@@ -90,6 +90,7 @@\n    the kernel or some such.  */\n \n #define CC1_SPEC \"\\\n+  %(cc1_cpu) \\\n   %{g: %{!fno-eliminate-unused-debug-symbols: -feliminate-unused-debug-symbols }} \\\n   %{static: %{Zdynamic: %e conflicting code gen style switches are used}}\\\n   %{!mmacosx-version-min=*:-mmacosx-version-min=%(darwin_minversion)} \\"}, {"sha": "5629d6b8937c91dc0f780400a14fd65fb1b3e872", "filename": "gcc/config/rs6000/driver-rs6000.c", "status": "added", "additions": 390, "deletions": 0, "changes": 390, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fdriver-rs6000.c?ref=0eab684046dc0a228233530ed9a01fcaf2220cbe", "patch": "@@ -0,0 +1,390 @@\n+/* Subroutines for the gcc driver.\n+   Copyright (C) 2007 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 3, or (at your option)\n+any later version.\n+\n+GCC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"tm.h\"\n+#include <stdlib.h>\n+\n+#ifdef _AIX\n+# include <sys/systemcfg.h>\n+#endif\n+\n+#ifdef __linux__\n+# include <elf.h>\n+#endif\n+\n+#ifdef __APPLE__\n+# include <sys/types.h>\n+# include <sys/sysctl.h>\n+#endif\n+\n+const char *host_detect_local_cpu (int argc, const char **argv);\n+\n+#if GCC_VERSION >= 0\n+\n+/* Returns parameters that describe L1_ASSOC associative cache of size\n+   L1_SIZEKB with lines of size L1_LINE, and L2_SIZEKB.  */\n+\n+static char *\n+describe_cache (unsigned l1_sizekb, unsigned l1_line,\n+\t\tunsigned l1_assoc ATTRIBUTE_UNUSED, unsigned l2_sizekb)\n+{\n+  char l1size[1000], line[1000], l2size[1000];\n+\n+  /* At the moment, gcc middle-end does not use the information about the\n+     associativity of the cache.  */\n+\n+  sprintf (l1size, \"--param l1-cache-size=%u\", l1_sizekb);\n+  sprintf (line, \"--param l1-cache-line-size=%u\", l1_line);\n+  sprintf (l2size, \"--param l2-cache-size=%u\", l2_sizekb);\n+\n+  return concat (l1size, \" \", line, \" \", l2size, \" \", NULL);\n+}\n+\n+#ifdef __APPLE__\n+\n+/* Returns the description of caches on Darwin.  */\n+\n+static char *\n+detect_caches_darwin (void)\n+{\n+  unsigned l1_sizekb, l1_line, l1_assoc, l2_sizekb;\n+  size_t len = 4;\n+  static int l1_size_name[2] = { CTL_HW, HW_L1DCACHESIZE };\n+  static int l1_line_name[2] = { CTL_HW, HW_CACHELINE };\n+  static int l2_size_name[2] = { CTL_HW, HW_L2CACHESIZE };\n+\n+  sysctl (l1_size_name, 2, &l1_sizekb, &len, NULL, 0);\n+  sysctl (l1_line_name, 2, &l1_line, &len, NULL, 0);\n+  sysctl (l2_size_name, 2, &l2_sizekb, &len, NULL, 0);\n+  l1_assoc = 0;\n+\n+  return describe_cache (l1_sizekb / 1024, l1_line, l1_assoc,\n+\t\t\t l2_sizekb / 1024);\n+}\n+\n+static const char *\n+detect_processor_darwin (void)\n+{\n+  unsigned int proc;\n+  size_t len = 4;\n+\n+  sysctlbyname (\"hw.cpusubtype\", &proc, &len, NULL, 0);\n+\n+  if (len > 0)\n+    switch (proc)\n+      {\n+      case 1:\n+\treturn \"601\";\n+      case 2:\n+\treturn \"602\";\n+      case 3:\n+\treturn \"603\";\n+      case 4:\n+      case 5:\n+\treturn \"603e\";\n+      case 6:\n+\treturn \"604\";\n+      case 7:\n+\treturn \"604e\";\n+      case 8:\n+\treturn \"620\";\n+      case 9:\n+\treturn \"750\";\n+      case 10:\n+\treturn \"7400\";\n+      case 11:\n+\treturn \"7450\";\n+      case 100:\n+\treturn \"970\";\n+      default:\n+\treturn \"powerpc\";\n+      }\n+\n+  return \"powerpc\";\n+}\n+\n+#endif /* __APPLE__ */\n+\n+#ifdef __linux__\n+\n+/* Returns AT_PLATFORM if present, otherwise generic PowerPC.  */\n+\n+static const char *\n+elf_platform (void)\n+{\n+  int fd;\n+\n+  fd = open (\"/proc/self/auxv\", O_RDONLY);\n+\n+  if (fd != -1)\n+    {\n+      char buf[1024];\n+      Elf32_auxv_t *av;\n+      ssize_t n;\n+\n+      n = read (fd, buf, sizeof (buf));\n+      close (fd);\n+\n+      if (n > 0)\n+\t{\n+\t  for (av = (Elf32_auxv_t *) buf; av->a_type != AT_NULL; ++av)\n+\t    switch (av->a_type)\n+\t      {\n+\t      case AT_PLATFORM:\n+\t\treturn (const char *) av->a_un.a_val;\n+\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\t}\n+    }\n+  return NULL;\n+}\n+\n+/* Returns AT_PLATFORM if present, otherwise generic 32.  */\n+\n+static int\n+elf_dcachebsize (void)\n+{\n+  int fd;\n+\n+  fd = open (\"/proc/self/auxv\", O_RDONLY);\n+\n+  if (fd != -1)\n+    {\n+      char buf[1024];\n+      Elf32_auxv_t *av;\n+      ssize_t n;\n+\n+      n = read (fd, buf, sizeof (buf));\n+      close (fd);\n+\n+      if (n > 0)\n+\t{\n+\t  for (av = (Elf32_auxv_t *) buf; av->a_type != AT_NULL; ++av)\n+\t    switch (av->a_type)\n+\t      {\n+\t      case AT_DCACHEBSIZE:\n+\t\treturn av->a_un.a_val;\n+\n+\t      default:\n+\t\tbreak;\n+\t      }\n+\t}\n+    }\n+  return 32;\n+}\n+\n+/* Returns the description of caches on Linux.  */\n+\n+static char *\n+detect_caches_linux (void)\n+{\n+  unsigned l1_sizekb, l1_line, l1_assoc, l2_sizekb;\n+  const char *platform;\n+\n+  platform = elf_platform ();\n+\n+  if (platform != NULL)\n+    {\n+      l1_line = 128;\n+\n+      if (platform[5] == '6')\n+\t/* POWER6 and POWER6x */\n+\tl1_sizekb = 64;\n+      else\n+\tl1_sizekb = 32;\n+    }\n+  else\n+    {\n+      l1_line = elf_dcachebsize ();\n+      l1_sizekb = 32;\n+    }\n+\n+  l1_assoc = 0;\n+  l2_sizekb = 512;\n+\n+  return describe_cache (l1_sizekb, l1_line, l1_assoc, l2_sizekb);\n+}\n+\n+static const char *\n+detect_processor_linux (void)\n+{\n+  const char *platform;\n+\n+  platform = elf_platform ();\n+\n+  if (platform != NULL)\n+    return platform;\n+  else\n+    return \"powerpc\";\n+}\n+\n+#endif /* __linux__ */\n+\n+#ifdef _AIX\n+/* Returns the description of caches on AIX.  */\n+\n+static char *\n+detect_caches_aix (void)\n+{\n+  unsigned l1_sizekb, l1_line, l1_assoc, l2_sizekb;\n+\n+  l1_sizekb = _system_configuration.dcache_size / 1024;\n+  l1_line = _system_configuration.dcache_line;\n+  l1_assoc = _system_configuration.dcache_asc;\n+  l2_sizekb = _system_configuration.L2_cache_size / 1024;\n+\n+  return describe_cache (l1_sizekb, l1_line, l1_assoc, l2_sizekb);\n+}\n+\n+\n+/* Returns the processor implementation on AIX.  */\n+\n+static const char *\n+detect_processor_aix (void)\n+{\n+  switch (_system_configuration.implementation)\n+    {\n+    case 0x0001:\n+      return \"rios1\";\n+\n+    case 0x0002:\n+      return \"rsc\";\n+\n+    case 0x0004:\n+      return \"rios2\";\n+\n+    case 0x0008:\n+      return \"601\";\n+\n+    case 0x0020:\n+      return \"603\";\n+\n+    case 0x0010:\n+      return \"604\";\n+\n+    case 0x0040:\n+      return \"620\";\n+\n+    case 0x0080:\n+      return \"630\";\n+\n+    case 0x0100:\n+    case 0x0200:\n+    case 0x0400:\n+      return \"rs64\";\n+\n+    case 0x0800:\n+      return \"power4\";\n+\n+    case 0x2000:\n+      if (_system_configuration.version == 0x0F0000)\n+\treturn \"power5\";\n+      else\n+\treturn \"power5+\";\n+\n+    case 0x4000:\n+      return \"power6\";\n+\n+    default:\n+      return \"powerpc\";\n+    }\n+}\n+#endif /* _AIX */\n+\n+\n+/* This will be called by the spec parser in gcc.c when it sees\n+   a %:local_cpu_detect(args) construct.  Currently it will be called\n+   with either \"arch\" or \"tune\" as argument depending on if -march=native\n+   or -mtune=native is to be substituted.\n+\n+   It returns a string containing new command line parameters to be\n+   put at the place of the above two options, depending on what CPU\n+   this is executed.\n+\n+   ARGC and ARGV are set depending on the actual arguments given\n+   in the spec.  */\n+const char\n+*host_detect_local_cpu (int argc, const char **argv)\n+{\n+  const char *cpu = NULL;\n+  const char *cache = \"\";\n+  const char *options = \"\";\n+  bool arch;\n+\n+  if (argc < 1)\n+    return NULL;\n+\n+  arch = strcmp (argv[0], \"cpu\") == 0;\n+  if (!arch && strcmp (argv[0], \"tune\"))\n+    return NULL;\n+\n+#if defined (_AIX)\n+  cache = detect_caches_aix ();\n+#elif defined (__APPLE__)\n+  cache = detect_caches_darwin ();\n+#elif defined (__linux__)\n+  cache = detect_caches_linux ();\n+  /* PPC Linux does not provide any cache information yet.  */\n+  cache = \"\";\n+#else\n+  cache = \"\";\n+#endif\n+\n+#if defined (_AIX)\n+  cpu = detect_processor_aix ();\n+#elif defined (__APPLE__)\n+  cpu = detect_processor_darwin ();\n+#elif defined (__linux__)\n+  cpu = detect_processor_linux ();\n+#else\n+  cpu = \"powerpc\";\n+#endif\n+\n+  return concat (cache, \"-m\", argv[0], \"=\", cpu, \" \", options, NULL);\n+}\n+\n+#else /* GCC_VERSION */\n+\n+/* If we aren't compiling with GCC we just provide a minimal\n+   default value.  */\n+const char *host_detect_local_cpu (int argc, const char **argv)\n+{\n+  const char *cpu;\n+  bool arch;\n+\n+  if (argc < 1)\n+    return NULL;\n+\n+  arch = strcmp (argv[0], \"cpu\") == 0;\n+  if (!arch && strcmp (argv[0], \"tune\"))\n+    return NULL;\n+  \n+  if (arch)\n+    cpu = \"powerpc\";\n+\n+  return concat (\"-m\", argv[0], \"=\", cpu, NULL);\n+}\n+\n+#endif /* GCC_VERSION */\n+"}, {"sha": "fae5ea2b578b59ab9dfccc779aa1f22cfcf13476", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=0eab684046dc0a228233530ed9a01fcaf2220cbe", "patch": "@@ -135,8 +135,26 @@\n   { \"cpp_default\",\t\tCPP_DEFAULT_SPEC },\t\t\t\\\n   { \"asm_cpu\",\t\t\tASM_CPU_SPEC },\t\t\t\t\\\n   { \"asm_default\",\t\tASM_DEFAULT_SPEC },\t\t\t\\\n+  { \"cc1_cpu\",\t\t\tCC1_CPU_SPEC },\t\t\t\t\\\n   SUBTARGET_EXTRA_SPECS\n \n+/* -mcpu=native handling only makes sense with compiler running on\n+   an PowerPC chip.  If changing this condition, also change\n+   the condition in driver-rs6000.c.  */\n+#if defined(__powerpc__) || defined(__POWERPC__) || defined(_AIX)\n+/* In driver-rs6000.c.  */\n+extern const char *host_detect_local_cpu (int argc, const char **argv);\n+#define EXTRA_SPEC_FUNCTIONS \\\n+  { \"local_cpu_detect\", host_detect_local_cpu },\n+#define HAVE_LOCAL_CPU_DETECT\n+#endif\n+\n+#if !defined (CC1_CPU_SPEC) && defined (HAVE_LOCAL_CPU_DETECT)\n+#define CC1_CPU_SPEC \\\n+\"%{mcpu=native:%<mcpu=native %:local_cpu_detect(cpu)} \\\n+ %{mtune=native:%<mtune=native %:local_cpu_detect(tune)}\"\n+#endif\n+\n /* Architecture type.  */\n \n /* Define TARGET_MFCRF if the target assembler does not support the"}, {"sha": "6e04beedac75718f7f2166f061dfeedafa90014c", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=0eab684046dc0a228233530ed9a01fcaf2220cbe", "patch": "@@ -607,7 +607,7 @@ extern int fixuplabelno;\n #endif\n \n /* Pass -G xxx to the compiler and set correct endian mode.  */\n-#define\tCC1_SPEC \"%{G*} \\\n+#define\tCC1_SPEC \"%{G*} %(cc1_cpu) \\\n %{mlittle|mlittle-endian: %(cc1_endian_little);           \\\n   mbig   |mbig-endian   : %(cc1_endian_big);              \\\n   mcall-aixdesc |\t\t\t\t\t  \\"}, {"sha": "8246c377630db89f5bcffd235d81bbee61228cb1", "filename": "gcc/config/rs6000/x-rs6000", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig%2Frs6000%2Fx-rs6000", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0eab684046dc0a228233530ed9a01fcaf2220cbe/gcc%2Fconfig%2Frs6000%2Fx-rs6000", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fx-rs6000?ref=0eab684046dc0a228233530ed9a01fcaf2220cbe", "patch": "@@ -0,0 +1,3 @@\n+driver-rs6000.o : $(srcdir)/config/rs6000/driver-rs6000.c \\\n+  $(CONFIG_H) $(SYSTEM_H) $(TM_H) coretypes.h\n+\t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) $<"}]}