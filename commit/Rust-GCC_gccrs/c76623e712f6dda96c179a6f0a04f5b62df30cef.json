{"sha": "c76623e712f6dda96c179a6f0a04f5b62df30cef", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc2NjIzZTcxMmY2ZGRhOTZjMTc5YTZmMGEwNGY1YjYyZGYzMGNlZg==", "commit": {"author": {"name": "Jim Wilson", "email": "jim.wilson@linaro.org", "date": "2016-05-07T23:11:57Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2016-05-07T23:11:57Z"}, "message": "Emit vmov.i64 to load 0.0 into FP reg when neon enabled.\n\n\t* config/arm/arm.md: (arch): Add neon.\n\t(arch_enabled): Return yes for arch neon when TARGET_NEON.\n\t* config/arm/vfp.md (movdf_vfp): Add w/G as alternative 3.  Add\n\tneon_move as type for alt 3.  Add arch attr enabling alt 3 for neon.\n\tEmit vmov.i64 for alt 3.  Renumber alternatives 3 to 8.  Adjust\n\tattributes for alt renumbering.  Mark alt 3 as non-predicable.\n\t(thumb2_movdf_vfp): Likewise.\n\nFrom-SVN: r235998", "tree": {"sha": "12ae53ddc4039b16433b36b1697401e2ad0f74aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/12ae53ddc4039b16433b36b1697401e2ad0f74aa"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c76623e712f6dda96c179a6f0a04f5b62df30cef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76623e712f6dda96c179a6f0a04f5b62df30cef", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c76623e712f6dda96c179a6f0a04f5b62df30cef", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c76623e712f6dda96c179a6f0a04f5b62df30cef/comments", "author": null, "committer": null, "parents": [{"sha": "764b257d43b7d8a7b44f1041b6a6f3ec1afe663f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764b257d43b7d8a7b44f1041b6a6f3ec1afe663f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/764b257d43b7d8a7b44f1041b6a6f3ec1afe663f"}], "stats": {"total": 68, "additions": 45, "deletions": 23}, "files": [{"sha": "0ab19f682616c95d3657408dcfdc91058a0f2f12", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76623e712f6dda96c179a6f0a04f5b62df30cef/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76623e712f6dda96c179a6f0a04f5b62df30cef/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c76623e712f6dda96c179a6f0a04f5b62df30cef", "patch": "@@ -1,3 +1,13 @@\n+2016-05-07  Jim Wilson  <jim.wilson@linaro.org>\n+\n+\t* config/arm/arm.md: (arch): Add neon.\n+\t(arch_enabled): Return yes for arch neon when TARGET_NEON.\n+\t* config/arm/vfp.md (movdf_vfp): Add w/G as alternative 3.  Add\n+\tneon_move as type for alt 3.  Add arch attr enabling alt 3 for neon.\n+\tEmit vmov.i64 for alt 3.  Renumber alternatives 3 to 8.  Adjust\n+\tattributes for alt renumbering.  Mark alt 3 as non-predicable.\n+\t(thumb2_movdf_vfp): Likewise.\n+\n 2016-05-07  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.md (*addqi_1): Add preferred_for_speed attribute"}, {"sha": "e264ae3f56c2677f98b676f62151fb94eec48a14", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76623e712f6dda96c179a6f0a04f5b62df30cef/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76623e712f6dda96c179a6f0a04f5b62df30cef/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=c76623e712f6dda96c179a6f0a04f5b62df30cef", "patch": "@@ -121,7 +121,7 @@\n ; arm_arch6.  \"v6t2\" for Thumb-2 with arm_arch6.  This attribute is\n ; used to compute attribute \"enabled\", use type \"any\" to enable an\n ; alternative in all cases.\n-(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6,v6t2,neon_for_64bits,avoid_neon_for_64bits,iwmmxt,iwmmxt2,armv6_or_vfpv3\"\n+(define_attr \"arch\" \"any,a,t,32,t1,t2,v6,nov6,v6t2,neon_for_64bits,avoid_neon_for_64bits,iwmmxt,iwmmxt2,armv6_or_vfpv3,neon\"\n   (const_string \"any\"))\n \n (define_attr \"arch_enabled\" \"no,yes\"\n@@ -177,6 +177,10 @@\n \t (and (eq_attr \"arch\" \"armv6_or_vfpv3\")\n \t      (match_test \"arm_arch6 || TARGET_VFP3\"))\n \t (const_string \"yes\")\n+\n+\t (and (eq_attr \"arch\" \"neon\")\n+\t      (match_test \"TARGET_NEON\"))\n+\t (const_string \"yes\")\n \t]\n \n \t(const_string \"no\")))"}, {"sha": "6edea802b3b67597631bf7c7113ad3f63ed35e69", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c76623e712f6dda96c179a6f0a04f5b62df30cef/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c76623e712f6dda96c179a6f0a04f5b62df30cef/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=c76623e712f6dda96c179a6f0a04f5b62df30cef", "patch": "@@ -394,8 +394,8 @@\n ;; DFmode moves\n \n (define_insn \"*movdf_vfp\"\n-  [(set (match_operand:DF 0 \"nonimmediate_soft_df_operand\" \"=w,?r,w ,w  ,Uv,r, m,w,r\")\n-\t(match_operand:DF 1 \"soft_df_operand\"\t\t   \" ?r,w,Dy,UvF,w ,mF,r,w,r\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_soft_df_operand\" \"=w,?r,w ,w,w  ,Uv,r, m,w,r\")\n+\t(match_operand:DF 1 \"soft_df_operand\"\t\t   \" ?r,w,Dy,G,UvF,w ,mF,r,w,r\"))]\n   \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_VFP\n    && (   register_operand (operands[0], DFmode)\n        || register_operand (operands[1], DFmode))\"\n@@ -410,39 +410,43 @@\n       case 2:\n \tgcc_assert (TARGET_VFP_DOUBLE);\n         return \\\"vmov%?.f64\\\\t%P0, %1\\\";\n-      case 3: case 4:\n+      case 3:\n+\tgcc_assert (TARGET_VFP_DOUBLE);\n+\treturn \\\"vmov.i64\\\\t%P0, #0\\\\t%@ float\\\";\n+      case 4: case 5:\n \treturn output_move_vfp (operands);\n-      case 5: case 6:\n+      case 6: case 7:\n \treturn output_move_double (operands, true, NULL);\n-      case 7:\n+      case 8:\n \tif (TARGET_VFP_SINGLE)\n \t  return \\\"vmov%?.f32\\\\t%0, %1\\;vmov%?.f32\\\\t%p0, %p1\\\";\n \telse\n \t  return \\\"vmov%?.f64\\\\t%P0, %P1\\\";\n-      case 8:\n+      case 9:\n         return \\\"#\\\";\n       default:\n \tgcc_unreachable ();\n       }\n     }\n   \"\n-  [(set_attr \"type\" \"f_mcrr,f_mrrc,fconstd,f_loadd,f_stored,\\\n+  [(set_attr \"type\" \"f_mcrr,f_mrrc,fconstd,neon_move,f_loadd,f_stored,\\\n                      load2,store2,ffarithd,multiple\")\n-   (set (attr \"length\") (cond [(eq_attr \"alternative\" \"5,6,8\") (const_int 8)\n-\t\t\t       (eq_attr \"alternative\" \"7\")\n+   (set (attr \"length\") (cond [(eq_attr \"alternative\" \"6,7,9\") (const_int 8)\n+\t\t\t       (eq_attr \"alternative\" \"8\")\n \t\t\t\t(if_then_else\n \t\t\t\t (match_test \"TARGET_VFP_SINGLE\")\n \t\t\t\t (const_int 8)\n \t\t\t\t (const_int 4))]\n \t\t\t      (const_int 4)))\n-   (set_attr \"predicable\" \"yes\")\n-   (set_attr \"pool_range\" \"*,*,*,1020,*,1020,*,*,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,1004,*,1004,*,*,*\")]\n+   (set_attr \"predicable\" \"yes,yes,yes,no,yes,yes,yes,yes,yes,yes\")\n+   (set_attr \"pool_range\" \"*,*,*,*,1020,*,1020,*,*,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,1004,*,1004,*,*,*\")\n+   (set_attr \"arch\" \"any,any,any,neon,any,any,any,any,any,any\")]\n )\n \n (define_insn \"*thumb2_movdf_vfp\"\n-  [(set (match_operand:DF 0 \"nonimmediate_soft_df_operand\" \"=w,?r,w ,w  ,Uv,r ,m,w,r\")\n-\t(match_operand:DF 1 \"soft_df_operand\"\t\t   \" ?r,w,Dy,UvF,w, mF,r, w,r\"))]\n+  [(set (match_operand:DF 0 \"nonimmediate_soft_df_operand\" \"=w,?r,w ,w,w  ,Uv,r ,m,w,r\")\n+\t(match_operand:DF 1 \"soft_df_operand\"\t\t   \" ?r,w,Dy,G,UvF,w, mF,r, w,r\"))]\n   \"TARGET_THUMB2 && TARGET_HARD_FLOAT && TARGET_VFP\n    && (   register_operand (operands[0], DFmode)\n        || register_operand (operands[1], DFmode))\"\n@@ -457,11 +461,14 @@\n       case 2:\n \tgcc_assert (TARGET_VFP_DOUBLE);\n \treturn \\\"vmov%?.f64\\\\t%P0, %1\\\";\n-      case 3: case 4:\n+      case 3:\n+\tgcc_assert (TARGET_VFP_DOUBLE);\n+\treturn \\\"vmov.i64\\\\t%P0, #0\\\\t%@ float\\\";\n+      case 4: case 5:\n \treturn output_move_vfp (operands);\n-      case 5: case 6: case 8:\n+      case 6: case 7: case 9:\n \treturn output_move_double (operands, true, NULL);\n-      case 7:\n+      case 8:\n \tif (TARGET_VFP_SINGLE)\n \t  return \\\"vmov%?.f32\\\\t%0, %1\\;vmov%?.f32\\\\t%p0, %p1\\\";\n \telse\n@@ -471,17 +478,18 @@\n       }\n     }\n   \"\n-  [(set_attr \"type\" \"f_mcrr,f_mrrc,fconstd,f_loadd,\\\n+  [(set_attr \"type\" \"f_mcrr,f_mrrc,fconstd,neon_move,f_loadd,\\\n                      f_stored,load2,store2,ffarithd,multiple\")\n-   (set (attr \"length\") (cond [(eq_attr \"alternative\" \"5,6,8\") (const_int 8)\n-\t\t\t       (eq_attr \"alternative\" \"7\")\n+   (set (attr \"length\") (cond [(eq_attr \"alternative\" \"6,7,9\") (const_int 8)\n+\t\t\t       (eq_attr \"alternative\" \"8\")\n \t\t\t\t(if_then_else\n \t\t\t\t (match_test \"TARGET_VFP_SINGLE\")\n \t\t\t\t (const_int 8)\n \t\t\t\t (const_int 4))]\n \t\t\t      (const_int 4)))\n-   (set_attr \"pool_range\" \"*,*,*,1018,*,4094,*,*,*\")\n-   (set_attr \"neg_pool_range\" \"*,*,*,1008,*,0,*,*,*\")]\n+   (set_attr \"pool_range\" \"*,*,*,*,1018,*,4094,*,*,*\")\n+   (set_attr \"neg_pool_range\" \"*,*,*,*,1008,*,0,*,*,*\")\n+   (set_attr \"arch\" \"any,any,any,neon,any,any,any,any,any,any\")]\n )\n \n "}]}