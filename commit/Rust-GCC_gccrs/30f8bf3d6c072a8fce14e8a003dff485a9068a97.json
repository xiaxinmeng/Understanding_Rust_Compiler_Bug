{"sha": "30f8bf3d6c072a8fce14e8a003dff485a9068a97", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBmOGJmM2Q2YzA3MmE4ZmNlMTRlOGEwMDNkZmY0ODVhOTA2OGE5Nw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2019-12-10T16:32:40Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2019-12-10T16:32:40Z"}, "message": "[AArch64] Fix INDEX patterns for partial VNx2 modes\n\nThe INDEX patterns handle partial modes by choosing the container\nsize rather than the element size, so that the number of lanes\n(and thus number of additions) matches the mode.  This means that\nall VNx4 modes use .s and all VNx2 modes use .d, etc.\n\nWhen adding this, I'd forgotten that the choice between Wn and Xn\nregisters would need to be updated to use the container size too.\nFor partial VNx2s, we were using .d containers with Wn rather than\nXn source registers.\n\n2019-12-10  Richard Sandiford  <richard.sandiford@arm.com>\n\ngcc/\n\t* config/aarch64/iterators.md (vccore): New iterator.\n\t* config/aarch64/aarch64-sve.md (vec_series<mode>): Use it instead\n\tof vwcore.\n\t(*vec_series<mode>_plus): Likewise.\n\ngcc/testsuite/\n\t* gcc.target/aarch64/sve/mixed_size_6.c: New test.\n\nFrom-SVN: r279173", "tree": {"sha": "3c677c1d911f9af6a7ecf2f90f1d00705af35e7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c677c1d911f9af6a7ecf2f90f1d00705af35e7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30f8bf3d6c072a8fce14e8a003dff485a9068a97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f8bf3d6c072a8fce14e8a003dff485a9068a97", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f8bf3d6c072a8fce14e8a003dff485a9068a97", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f8bf3d6c072a8fce14e8a003dff485a9068a97/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "393283b8efaba009ce57a78fa658f55fbf262551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/393283b8efaba009ce57a78fa658f55fbf262551", "html_url": "https://github.com/Rust-GCC/gccrs/commit/393283b8efaba009ce57a78fa658f55fbf262551"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "577acb18d78d52fe8ad654674848f7c38588190f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f8bf3d6c072a8fce14e8a003dff485a9068a97/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f8bf3d6c072a8fce14e8a003dff485a9068a97/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30f8bf3d6c072a8fce14e8a003dff485a9068a97", "patch": "@@ -1,3 +1,10 @@\n+2019-12-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* config/aarch64/iterators.md (vccore): New iterator.\n+\t* config/aarch64/aarch64-sve.md (vec_series<mode>): Use it instead\n+\tof vwcore.\n+\t(*vec_series<mode>_plus): Likewise.\n+\n 2019-12-10  Frederik Harwath  <frederik@codesourcery.com>\n \n \t* omp-low.c (scan_omp_for): Use clause location in warning."}, {"sha": "1d9cdad23bdc3f73c2a6e01baa7376c73022886b", "filename": "gcc/config/aarch64/aarch64-sve.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f8bf3d6c072a8fce14e8a003dff485a9068a97/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f8bf3d6c072a8fce14e8a003dff485a9068a97/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve.md?ref=30f8bf3d6c072a8fce14e8a003dff485a9068a97", "patch": "@@ -2541,9 +2541,9 @@\n \t  (match_operand:<VEL> 2 \"aarch64_sve_index_operand\" \"r, Usi, r\")))]\n   \"TARGET_SVE\"\n   \"@\n-   index\\t%0.<Vctype>, #%1, %<vwcore>2\n-   index\\t%0.<Vctype>, %<vwcore>1, #%2\n-   index\\t%0.<Vctype>, %<vwcore>1, %<vwcore>2\"\n+   index\\t%0.<Vctype>, #%1, %<vccore>2\n+   index\\t%0.<Vctype>, %<vccore>1, #%2\n+   index\\t%0.<Vctype>, %<vccore>1, %<vccore>2\"\n )\n \n ;; Optimize {x, x, x, x, ...} + {0, n, 2*n, 3*n, ...} if n is in range\n@@ -2557,7 +2557,7 @@\n   \"TARGET_SVE && aarch64_check_zero_based_sve_index_immediate (operands[2])\"\n   {\n     operands[2] = aarch64_check_zero_based_sve_index_immediate (operands[2]);\n-    return \"index\\t%0.<Vctype>, %<vwcore>1, #%2\";\n+    return \"index\\t%0.<Vctype>, %<vccore>1, #%2\";\n   }\n )\n "}, {"sha": "1ca5ed1ef1bc66a4ecb52ee240338f18fd560384", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f8bf3d6c072a8fce14e8a003dff485a9068a97/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f8bf3d6c072a8fce14e8a003dff485a9068a97/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=30f8bf3d6c072a8fce14e8a003dff485a9068a97", "patch": "@@ -1093,6 +1093,12 @@\n \t\t\t  (VNx2DI \"x\")\n \t\t\t  (VNx2DF \"x\")])\n \n+;; Like vwcore, but for the container mode rather than the element mode.\n+(define_mode_attr vccore [(VNx16QI \"w\") (VNx8QI \"w\") (VNx4QI \"w\") (VNx2QI \"x\")\n+\t\t\t  (VNx8HI \"w\") (VNx4HI \"w\") (VNx2HI \"x\")\n+\t\t\t  (VNx4SI \"w\") (VNx2SI \"x\")\n+\t\t\t  (VNx2DI \"x\")])\n+\n ;; Double vector types for ALLX.\n (define_mode_attr Vallxd [(QI \"8b\") (HI \"4h\") (SI \"2s\")])\n "}, {"sha": "c1f22f2c28ed79d95a3b650567ef23af58ff5233", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f8bf3d6c072a8fce14e8a003dff485a9068a97/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f8bf3d6c072a8fce14e8a003dff485a9068a97/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30f8bf3d6c072a8fce14e8a003dff485a9068a97", "patch": "@@ -1,3 +1,7 @@\n+2019-12-10  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* gcc.target/aarch64/sve/mixed_size_6.c: New test.\n+\n 2019-12-10  Frederik Harwath  <frederik@codesourcery.com>\n \n \t* c-c++-common/goacc/clause-locations.c: New test."}, {"sha": "837edecf7d07cbb3624a6c31397f98755dc0cb6c", "filename": "gcc/testsuite/gcc.target/aarch64/sve/mixed_size_6.c", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30f8bf3d6c072a8fce14e8a003dff485a9068a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmixed_size_6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30f8bf3d6c072a8fce14e8a003dff485a9068a97/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmixed_size_6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fsve%2Fmixed_size_6.c?ref=30f8bf3d6c072a8fce14e8a003dff485a9068a97", "patch": "@@ -0,0 +1,47 @@\n+/* { dg-options \"-O3 -msve-vector-bits=256\" } */\n+\n+#include <stdint.h>\n+\n+void\n+f1 (uint64_t *restrict ptr1, uint8_t *restrict ptr2, uint8_t start)\n+{\n+#pragma GCC unroll 0\n+  for (int i = 0; i < 4; ++i)\n+    {\n+      ptr1[i] = 10;\n+      ptr2[i] = start;\n+      start += 1;\n+    }\n+}\n+\n+void\n+f2 (uint64_t *restrict ptr1, uint16_t *restrict ptr2, uint16_t start)\n+{\n+#pragma GCC unroll 0\n+  for (int i = 0; i < 4; ++i)\n+    {\n+      ptr1[i] = 10;\n+      ptr2[i] = start;\n+      start += 2;\n+    }\n+}\n+\n+void\n+f3 (uint64_t *restrict ptr1, uint32_t *restrict ptr2, uint32_t start)\n+{\n+#pragma GCC unroll 0\n+  for (int i = 0; i < 4; ++i)\n+    {\n+      ptr1[i] = 10;\n+      ptr2[i] = start;\n+      start += 4;\n+    }\n+}\n+\n+/* { dg-final { scan-assembler {\\tindex\\tz[0-9]+\\.d, x[0-9]+, #1\\n} } } */\n+/* { dg-final { scan-assembler {\\tindex\\tz[0-9]+\\.d, x[0-9]+, #1\\n} } } */\n+/* { dg-final { scan-assembler {\\tindex\\tz[0-9]+\\.d, x[0-9]+, #4\\n} } } */\n+\n+/* { dg-final { scan-assembler-not {\\tindex\\tz[0-9]+\\.d, w[0-9]+, #1\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tindex\\tz[0-9]+\\.d, w[0-9]+, #1\\n} } } */\n+/* { dg-final { scan-assembler-not {\\tindex\\tz[0-9]+\\.d, w[0-9]+, #4\\n} } } */"}]}