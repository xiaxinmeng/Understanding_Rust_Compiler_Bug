{"sha": "c9263446184f453646ba8fa6eb390be4a667cf20", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkyNjM0NDYxODRmNDUzNjQ2YmE4ZmE2ZWIzOTBiZTRhNjY3Y2YyMA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-27T11:08:53Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1995-04-27T11:08:53Z"}, "message": "(collect_expansion): Assume leading white space already removed.\n\nDon't allocate unnecessary space for expansion.\n\nFrom-SVN: r9502", "tree": {"sha": "7dcde64e7f8f9975b053586143732bc2dfea7740", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7dcde64e7f8f9975b053586143732bc2dfea7740"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9263446184f453646ba8fa6eb390be4a667cf20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9263446184f453646ba8fa6eb390be4a667cf20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9263446184f453646ba8fa6eb390be4a667cf20", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9263446184f453646ba8fa6eb390be4a667cf20/comments", "author": null, "committer": null, "parents": [{"sha": "ba6aa38e3d6bece9171dfab434d0821690eade53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba6aa38e3d6bece9171dfab434d0821690eade53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba6aa38e3d6bece9171dfab434d0821690eade53"}], "stats": {"total": 28, "additions": 5, "deletions": 23}, "files": [{"sha": "0bc6a5a1baf0213878bf1d1fcdc62bb0c73bc861", "filename": "gcc/cccp.c", "status": "modified", "additions": 5, "deletions": 23, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9263446184f453646ba8fa6eb390be4a667cf20/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9263446184f453646ba8fa6eb390be4a667cf20/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=c9263446184f453646ba8fa6eb390be4a667cf20", "patch": "@@ -5905,16 +5905,10 @@ comp_def_part (first, beg1, len1, beg2, len2, last)\n    MACRONAME is the macro name itself (so we can avoid recursive expansion)\n    and NAMELEN is its length in characters.\n    \n-Note that comments and backslash-newlines have already been deleted\n-from the argument.  */\n+Note that comments, backslash-newlines, and leading white space\n+have already been deleted from the argument.  */\n \n-/* Leading and trailing Space, Tab, etc. are converted to markers\n-   Newline Space, Newline Tab, etc.\n-   Newline Space makes a space in the final output\n-   but is discarded if stringified.  (Newline Tab is similar but\n-   makes a Tab instead.)\n-\n-   If there is no trailing whitespace, a Newline Space is added at the end\n+/* If there is no trailing whitespace, a Newline Space is added at the end\n    to prevent concatenation that would be contrary to the standard.  */\n \n static DEFINITION *\n@@ -5945,34 +5939,22 @@ collect_expansion (buf, end, nargs, arglist)\n     abort ();\n \n   /* Find the beginning of the trailing whitespace.  */\n-  /* Find end of leading whitespace.  */\n   limit = end;\n   p = buf;\n   while (p < limit && is_space[limit[-1]]) limit--;\n-  while (p < limit && is_space[*p]) p++;\n \n   /* Allocate space for the text in the macro definition.\n-     Leading and trailing whitespace chars need 2 bytes each.\n-     Each other input char may or may not need 1 byte,\n+     Each input char may or may not need 1 byte,\n      so this is an upper bound.\n-     The extra 2 are for invented trailing newline-marker and final null.  */\n+     The extra 3 are for invented trailing newline-marker and final null.  */\n   maxsize = (sizeof (DEFINITION)\n-\t     + 2 * (end - limit) + 2 * (p - buf)\n \t     + (limit - p) + 3);\n   defn = (DEFINITION *) xcalloc (1, maxsize);\n \n   defn->nargs = nargs;\n   exp_p = defn->expansion = (U_CHAR *) defn + sizeof (DEFINITION);\n   lastp = exp_p;\n \n-  p = buf;\n-\n-  /* Convert leading whitespace to Newline-markers.  */\n-  while (p < limit && is_space[*p]) {\n-    *exp_p++ = '\\n';\n-    *exp_p++ = *p++;\n-  }\n-\n   if (p[0] == '#'\n       ? p[1] == '#'\n       : p[0] == '%' && p[1] == ':' && p[2] == '%' && p[3] == ':') {"}]}