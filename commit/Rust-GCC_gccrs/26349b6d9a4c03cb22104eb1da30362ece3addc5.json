{"sha": "26349b6d9a4c03cb22104eb1da30362ece3addc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjYzNDliNmQ5YTRjMDNjYjIyMTA0ZWIxZGEzMDM2MmVjZTNhZGRjNQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-07-02T17:32:40Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-10-19T09:53:36Z"}, "message": "[Ada] Ada2020: AI12-0304 Put_Image attrs of lang-def types\n\ngcc/ada/\n\n\t* exp_put_image.adb (Build_Elementary_Put_Image_Call): Use the\n\tbase type to recognize various cases of access types.\n\t* libgnat/a-cbdlli.adb, libgnat/a-cbdlli.ads, libgnat/a-cbhama.adb,\n\tlibgnat/a-cbhama.ads, libgnat/a-cbhase.adb, libgnat/a-cbhase.ads,\n\tlibgnat/a-cbmutr.adb, libgnat/a-cbmutr.ads, libgnat/a-cborma.adb,\n\tlibgnat/a-cborma.ads, libgnat/a-cborse.adb, libgnat/a-cborse.ads,\n\tlibgnat/a-cdlili.adb, libgnat/a-cdlili.ads, libgnat/a-cidlli.adb,\n\tlibgnat/a-cidlli.ads, libgnat/a-cihama.adb, libgnat/a-cihama.ads,\n\tlibgnat/a-cihase.adb, libgnat/a-cihase.ads, libgnat/a-cimutr.adb,\n\tlibgnat/a-cimutr.ads, libgnat/a-ciorma.adb, libgnat/a-ciorma.ads,\n\tlibgnat/a-ciormu.adb, libgnat/a-ciormu.ads, libgnat/a-ciorse.adb,\n\tlibgnat/a-ciorse.ads, libgnat/a-coboho.adb, libgnat/a-coboho.ads,\n\tlibgnat/a-cobove.adb, libgnat/a-cobove.ads, libgnat/a-cohama.adb,\n\tlibgnat/a-cohama.ads, libgnat/a-cohase.adb, libgnat/a-cohase.ads,\n\tlibgnat/a-coinho.adb, libgnat/a-coinho.ads,\n\tlibgnat/a-coinho__shared.adb, libgnat/a-coinho__shared.ads,\n\tlibgnat/a-coinve.adb, libgnat/a-coinve.ads, libgnat/a-comutr.adb,\n\tlibgnat/a-comutr.ads, libgnat/a-coorma.adb, libgnat/a-coorma.ads,\n\tlibgnat/a-coormu.adb, libgnat/a-coormu.ads, libgnat/a-coorse.adb,\n\tlibgnat/a-coorse.ads, libgnat/a-strunb.adb, libgnat/a-strunb.ads,\n\tlibgnat/a-strunb__shared.adb, libgnat/a-strunb__shared.ads:\n\tImplement Put_Image attibute.\n\t* libgnat/a-stteou.ads, libgnat/s-putima.ads,\n\tlibgnat/a-stouut.ads, libgnat/a-stoubu.adb: Make\n\tAda.Strings.Text_Output, Ada.Strings.Text_Output.Utils, and\n\tSystem.Put_Images Pure, so they can be with'ed by Pure units\n\tthat should have Put_Image defined.\n\t* libgnat/a-stouut.adb: Add missing column adjustments, and\n\tremove a redundant one.\n\t* libgnat/s-putima.adb (Put_Arrow): New routine to print an\n\tarrow. Avoids adding a with clause to some containers.", "tree": {"sha": "6986430005c782b4d53751434e9395990100df8b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6986430005c782b4d53751434e9395990100df8b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26349b6d9a4c03cb22104eb1da30362ece3addc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26349b6d9a4c03cb22104eb1da30362ece3addc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26349b6d9a4c03cb22104eb1da30362ece3addc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26349b6d9a4c03cb22104eb1da30362ece3addc5/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c8b92dcc8f0b45af96aecc9e83c52175d6f4ce5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c8b92dcc8f0b45af96aecc9e83c52175d6f4ce5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c8b92dcc8f0b45af96aecc9e83c52175d6f4ce5"}], "stats": {"total": 947, "additions": 904, "deletions": 43}, "files": [{"sha": "1933bd0597b41545e1021bd96e4d81dca1f939f6", "filename": "gcc/ada/exp_put_image.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Fexp_put_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Fexp_put_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -314,9 +314,9 @@ package body Exp_Put_Image is\n          end if;\n \n       elsif Is_Access_Type (U_Type) then\n-         if Is_Access_Protected_Subprogram_Type (U_Type) then\n+         if Is_Access_Protected_Subprogram_Type (Base_Type (U_Type)) then\n             Lib_RE := RE_Put_Image_Access_Prot_Subp;\n-         elsif Is_Access_Subprogram_Type (U_Type) then\n+         elsif Is_Access_Subprogram_Type (Base_Type (U_Type)) then\n             Lib_RE := RE_Put_Image_Access_Subp;\n          elsif P_Size = System_Address_Size then\n             Lib_RE := RE_Put_Image_Thin_Pointer;"}, {"sha": "fa8174b5c3ff77401c4054b857d022356c75b813", "filename": "gcc/ada/libgnat/a-cbdlli.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbdlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbdlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbdlli.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -28,6 +28,7 @@\n ------------------------------------------------------------------------------\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Bounded_Doubly_Linked_Lists with\n   SPARK_Mode => Off\n@@ -1491,6 +1492,31 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : List)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+\n+      for X of V loop\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Element_Type'Put_Image (S, X);\n+      end loop;\n+\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "7f16368a59902208168e70b57bc371e0f841cb1e", "filename": "gcc/ada/libgnat/a-cbdlli.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbdlli.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Streams;\n private with Ada.Finalization;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type is private;\n@@ -279,7 +280,10 @@ private\n       Last   : Count_Type := 0;\n       Length : Count_Type := 0;\n       TC     : aliased Tamper_Counts;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : List);\n \n    procedure Read\n      (Stream : not null access Root_Stream_Type'Class;"}, {"sha": "b2137c1619b4ed751276726900ddb21f7e73612f", "filename": "gcc/ada/libgnat/a-cbhama.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbhama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbhama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhama.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -38,6 +38,7 @@ with Ada.Containers.Helpers; use Ada.Containers.Helpers;\n with Ada.Containers.Prime_Numbers; use Ada.Containers.Prime_Numbers;\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Bounded_Hashed_Maps with\n   SPARK_Mode => Off\n@@ -885,6 +886,36 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+\n+      procedure Put_Key_Value (Position : Cursor);\n+      procedure Put_Key_Value (Position : Cursor) is\n+      begin\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Key_Type'Put_Image (S, Key (Position));\n+         Put_Arrow (S);\n+         Element_Type'Put_Image (S, Element (Position));\n+      end Put_Key_Value;\n+\n+   begin\n+      Array_Before (S);\n+      Iterate (V, Put_Key_Value'Access);\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "9a1aee97c4f6f222ad271fb0f0caf9326b6498f9", "filename": "gcc/ada/libgnat/a-cbhama.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbhama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbhama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhama.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ with Ada.Iterator_Interfaces;\n private with Ada.Containers.Hash_Tables;\n private with Ada.Streams;\n private with Ada.Finalization;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Key_Type is private;\n@@ -342,7 +343,11 @@ private\n      new Hash_Tables.Generic_Bounded_Hash_Table_Types (Node_Type);\n \n    type Map (Capacity : Count_Type; Modulus : Hash_Type) is\n-      new HT_Types.Hash_Table_Type (Capacity, Modulus) with null record;\n+      new HT_Types.Hash_Table_Type (Capacity, Modulus)\n+      with null record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map);\n \n    use HT_Types, HT_Types.Implementation;\n    use Ada.Streams;"}, {"sha": "db61f77f1cdabbef24597e25bceed3f9be82183d", "filename": "gcc/ada/libgnat/a-cbhase.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbhase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbhase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhase.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -38,6 +38,7 @@ with Ada.Containers.Helpers; use Ada.Containers.Helpers;\n with Ada.Containers.Prime_Numbers; use Ada.Containers.Prime_Numbers;\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Bounded_Hashed_Sets with\n   SPARK_Mode => Off\n@@ -1108,6 +1109,31 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+\n+      for X of V loop\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Element_Type'Put_Image (S, X);\n+      end loop;\n+\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "70a311931d5ebb96cc6c7a8517bcf588e0d8eabc", "filename": "gcc/ada/libgnat/a-cbhase.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbhase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbhase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbhase.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -37,6 +37,7 @@ private with Ada.Containers.Hash_Tables;\n with Ada.Containers.Helpers;\n private with Ada.Streams;\n private with Ada.Finalization;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type is private;\n@@ -500,7 +501,11 @@ private\n      new Hash_Tables.Generic_Bounded_Hash_Table_Types (Node_Type);\n \n    type Set (Capacity : Count_Type; Modulus : Hash_Type) is\n-     new HT_Types.Hash_Table_Type (Capacity, Modulus) with null record;\n+     new HT_Types.Hash_Table_Type (Capacity, Modulus)\n+      with null record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n \n    use HT_Types, HT_Types.Implementation;\n    use Ada.Streams;"}, {"sha": "3b25d20ebb5a5997e325673d7b4574e57c27cf9e", "filename": "gcc/ada/libgnat/a-cbmutr.adb", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbmutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbmutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbmutr.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -29,6 +29,7 @@\n \n with Ada.Finalization;\n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Bounded_Multiway_Trees with\n   SPARK_Mode => Off\n@@ -2322,6 +2323,49 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Tree)\n+   is\n+      use System.Put_Images;\n+\n+      procedure Rec (Position : Cursor);\n+      --  Recursive routine operating on cursors\n+\n+      procedure Rec (Position : Cursor) is\n+         First_Time : Boolean := True;\n+      begin\n+         Array_Before (S);\n+\n+         for X in Iterate_Children (V, Position) loop\n+            if First_Time then\n+               First_Time := False;\n+            else\n+               Array_Between (S);\n+            end if;\n+\n+            Element_Type'Put_Image (S, Element (X));\n+            if Child_Count (X) > 0 then\n+               Simple_Array_Between (S);\n+               Rec (X);\n+            end if;\n+         end loop;\n+\n+         Array_After (S);\n+      end Rec;\n+\n+   begin\n+      if First_Child (Root (V)) = No_Element then\n+         Array_Before (S);\n+         Array_After (S);\n+      else\n+         Rec (First_Child (Root (V)));\n+      end if;\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "82b3d60c9778ee522a583fed131528b1752b704c", "filename": "gcc/ada/libgnat/a-cbmutr.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cbmutr.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -35,6 +35,7 @@ with Ada.Iterator_Interfaces;\n \n with Ada.Containers.Helpers;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type is private;\n@@ -307,7 +308,10 @@ private\n       Free     : Count_Type'Base := No_Node;\n       TC       : aliased Tamper_Counts;\n       Count    : Count_Type := 0;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Tree);\n \n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;"}, {"sha": "23e21dac073c25828fe2b96a905826d7b2481360", "filename": "gcc/ada/libgnat/a-cborma.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cborma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cborma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborma.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -38,6 +38,7 @@ pragma Elaborate_All\n   (Ada.Containers.Red_Black_Trees.Generic_Bounded_Keys);\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Bounded_Ordered_Maps with\n   SPARK_Mode => Off\n@@ -1289,6 +1290,36 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+\n+      procedure Put_Key_Value (Position : Cursor);\n+      procedure Put_Key_Value (Position : Cursor) is\n+      begin\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Key_Type'Put_Image (S, Key (Position));\n+         Put_Arrow (S);\n+         Element_Type'Put_Image (S, Element (Position));\n+      end Put_Key_Value;\n+\n+   begin\n+      Array_Before (S);\n+      Iterate (V, Put_Key_Value'Access);\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "b10b0d05edb59bd7b9b192e2721851dacfb49900", "filename": "gcc/ada/libgnat/a-cborma.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cborma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cborma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborma.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ with Ada.Iterator_Interfaces;\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Streams;\n private with Ada.Finalization;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Key_Type is private;\n@@ -250,7 +251,11 @@ private\n      new Red_Black_Trees.Generic_Bounded_Tree_Types (Node_Type);\n \n    type Map (Capacity : Count_Type) is\n-     new Tree_Types.Tree_Type (Capacity) with null record;\n+     new Tree_Types.Tree_Type (Capacity)\n+      with null record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map);\n \n    use Red_Black_Trees;\n    use Tree_Types, Tree_Types.Implementation;"}, {"sha": "2daad8e17da51fb297d7c88e7ee826b48f5f6819", "filename": "gcc/ada/libgnat/a-cborse.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cborse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cborse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborse.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -41,6 +41,7 @@ pragma Elaborate_All\n   (Ada.Containers.Red_Black_Trees.Generic_Bounded_Set_Operations);\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Bounded_Ordered_Sets with\n   SPARK_Mode => Off\n@@ -1628,6 +1629,31 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+\n+      for X of V loop\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Element_Type'Put_Image (S, X);\n+      end loop;\n+\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "90e68e3c4d02c9816780d2f757481365017da81a", "filename": "gcc/ada/libgnat/a-cborse.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cborse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cborse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cborse.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -37,6 +37,7 @@ with Ada.Containers.Helpers;\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Streams;\n private with Ada.Finalization;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type is private;\n@@ -338,7 +339,11 @@ private\n      new Red_Black_Trees.Generic_Bounded_Tree_Types (Node_Type);\n \n    type Set (Capacity : Count_Type) is\n-     new Tree_Types.Tree_Type (Capacity) with null record;\n+     new Tree_Types.Tree_Type (Capacity)\n+      with null record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n \n    use Tree_Types, Tree_Types.Implementation;\n    use Ada.Finalization;"}, {"sha": "f07190ec2f43564d9e6262c82f4bf7c641e77bb7", "filename": "gcc/ada/libgnat/a-cdlili.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cdlili.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cdlili.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cdlili.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -30,6 +30,7 @@\n with Ada.Unchecked_Deallocation;\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Doubly_Linked_Lists with\n   SPARK_Mode => Off\n@@ -1267,6 +1268,31 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : List)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+\n+      for X of V loop\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Element_Type'Put_Image (S, X);\n+      end loop;\n+\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "dc52564961929e6d97d1e47ea47df7f4f113d3ff", "filename": "gcc/ada/libgnat/a-cdlili.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cdlili.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type is private;\n@@ -281,7 +282,10 @@ private\n         Last   : Node_Access := null;\n         Length : Count_Type := 0;\n         TC     : aliased Tamper_Counts;\n-     end record;\n+     end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : List);\n \n    overriding procedure Adjust (Container : in out List);\n "}, {"sha": "ea962c32cf6f8a95f960d478484088c80b85f3aa", "filename": "gcc/ada/libgnat/a-cidlli.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cidlli.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cidlli.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cidlli.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -30,6 +30,7 @@\n with Ada.Unchecked_Deallocation;\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Indefinite_Doubly_Linked_Lists with\n   SPARK_Mode => Off\n@@ -1297,6 +1298,31 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : List)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+\n+      for X of V loop\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Element_Type'Put_Image (S, X);\n+      end loop;\n+\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "fe9c7e10471ddbe94b15d6cdee8e018433272c3b", "filename": "gcc/ada/libgnat/a-cidlli.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cidlli.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type (<>) is private;\n@@ -269,7 +270,10 @@ private\n         Last   : Node_Access := null;\n         Length : Count_Type := 0;\n         TC     : aliased Tamper_Counts;\n-     end record;\n+     end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : List);\n \n    overriding procedure Adjust (Container : in out List);\n "}, {"sha": "2b4499c6eb5cd3ab5f7108bd4ad092b0776c20e8", "filename": "gcc/ada/libgnat/a-cihama.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cihama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cihama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihama.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -38,6 +38,7 @@ with Ada.Containers.Helpers; use Ada.Containers.Helpers;\n with Ada.Unchecked_Deallocation;\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Indefinite_Hashed_Maps with\n   SPARK_Mode => Off\n@@ -952,6 +953,36 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+\n+      procedure Put_Key_Value (Position : Cursor);\n+      procedure Put_Key_Value (Position : Cursor) is\n+      begin\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Key_Type'Put_Image (S, Key (Position));\n+         Put_Arrow (S);\n+         Element_Type'Put_Image (S, Element (Position));\n+      end Put_Key_Value;\n+\n+   begin\n+      Array_Before (S);\n+      Iterate (V, Put_Key_Value'Access);\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "f92331415d2de27d68380db6052a7ad0eb87fa27", "filename": "gcc/ada/libgnat/a-cihama.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cihama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cihama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihama.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ with Ada.Iterator_Interfaces;\n private with Ada.Containers.Hash_Tables;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Key_Type (<>) is private;\n@@ -330,7 +331,10 @@ private\n \n    type Map is new Ada.Finalization.Controlled with record\n       HT : HT_Types.Hash_Table_Type;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map);\n \n    overriding procedure Adjust   (Container : in out Map);\n "}, {"sha": "dc0cfed58f81cf60f6ead7039421d210d03a369c", "filename": "gcc/ada/libgnat/a-cihase.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cihase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cihase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihase.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -40,6 +40,7 @@ with Ada.Containers.Helpers; use Ada.Containers.Helpers;\n with Ada.Containers.Prime_Numbers;\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Indefinite_Hashed_Sets with\n   SPARK_Mode => Off\n@@ -1264,6 +1265,31 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+\n+      for X of V loop\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Element_Type'Put_Image (S, X);\n+      end loop;\n+\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "965071cc39d0369059ea4a52e13e79ff4931b51b", "filename": "gcc/ada/libgnat/a-cihase.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cihase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cihase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cihase.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -37,6 +37,7 @@ private with Ada.Containers.Hash_Tables;\n with Ada.Containers.Helpers;\n private with Ada.Streams;\n private with Ada.Finalization;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type (<>) is private;\n@@ -494,7 +495,10 @@ private\n \n    type Set is new Ada.Finalization.Controlled with record\n       HT : HT_Types.Hash_Table_Type;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n \n    overriding procedure Adjust (Container : in out Set);\n "}, {"sha": "b358aad3366308de236338d2a33dba1b98c7cb82", "filename": "gcc/ada/libgnat/a-cimutr.adb", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cimutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cimutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cimutr.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -30,6 +30,7 @@\n with Ada.Unchecked_Deallocation;\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Indefinite_Multiway_Trees with\n   SPARK_Mode => Off\n@@ -1875,6 +1876,49 @@ is\n       Process (Position.Node.Element.all);\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Tree)\n+   is\n+      use System.Put_Images;\n+\n+      procedure Rec (Position : Cursor);\n+      --  Recursive routine operating on cursors\n+\n+      procedure Rec (Position : Cursor) is\n+         First_Time : Boolean := True;\n+      begin\n+         Array_Before (S);\n+\n+         for X in Iterate_Children (V, Position) loop\n+            if First_Time then\n+               First_Time := False;\n+            else\n+               Array_Between (S);\n+            end if;\n+\n+            Element_Type'Put_Image (S, Element (X));\n+            if Child_Count (X) > 0 then\n+               Simple_Array_Between (S);\n+               Rec (X);\n+            end if;\n+         end loop;\n+\n+         Array_After (S);\n+      end Rec;\n+\n+   begin\n+      if First_Child (Root (V)) = No_Element then\n+         Array_Before (S);\n+         Array_After (S);\n+      else\n+         Rec (First_Child (Root (V)));\n+      end if;\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "9e03eb9f79b229a5e8badeb3d2ba456ee3ae4fb7", "filename": "gcc/ada/libgnat/a-cimutr.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cimutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cimutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cimutr.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type (<>) is private;\n@@ -348,7 +349,10 @@ private\n       Root  : aliased Tree_Node_Type;\n       TC    : aliased Tamper_Counts;\n       Count : Count_Type := 0;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Tree);\n \n    overriding procedure Adjust (Container : in out Tree);\n "}, {"sha": "7cfe07d0eb911fe7147a2aa4c8c9dc1c5239e3cb", "filename": "gcc/ada/libgnat/a-ciorma.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-ciorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-ciorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorma.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -38,6 +38,7 @@ with Ada.Containers.Red_Black_Trees.Generic_Keys;\n pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Keys);\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Indefinite_Ordered_Maps with\n   SPARK_Mode => Off\n@@ -1291,6 +1292,36 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+\n+      procedure Put_Key_Value (Position : Cursor);\n+      procedure Put_Key_Value (Position : Cursor) is\n+      begin\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Key_Type'Put_Image (S, Key (Position));\n+         Put_Arrow (S);\n+         Element_Type'Put_Image (S, Element (Position));\n+      end Put_Key_Value;\n+\n+   begin\n+      Array_Before (S);\n+      Iterate (V, Put_Key_Value'Access);\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "dbc59488d2596a9dc9946a8d5d894172d1c795fb", "filename": "gcc/ada/libgnat/a-ciorma.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-ciorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-ciorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorma.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ with Ada.Iterator_Interfaces;\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Key_Type (<>) is private;\n@@ -258,7 +259,10 @@ private\n \n    type Map is new Ada.Finalization.Controlled with record\n       Tree : Tree_Types.Tree_Type;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map);\n \n    overriding procedure Adjust (Container : in out Map);\n "}, {"sha": "c3672f4b17f406ca4077efec669a4baec9dba0d2", "filename": "gcc/ada/libgnat/a-ciormu.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-ciormu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-ciormu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciormu.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -39,6 +39,7 @@ with Ada.Containers.Red_Black_Trees.Generic_Set_Operations;\n pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Set_Operations);\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Indefinite_Ordered_Multisets with\n   SPARK_Mode => Off\n@@ -1657,6 +1658,31 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+\n+      for X of V loop\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Element_Type'Put_Image (S, X);\n+      end loop;\n+\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "5667e2c52ebd4faeb0e19651b4763dbdb647e5be", "filename": "gcc/ada/libgnat/a-ciormu.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-ciormu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-ciormu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciormu.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -35,6 +35,7 @@\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n with Ada.Iterator_Interfaces;\n \n generic\n@@ -468,7 +469,10 @@ private\n \n    type Set is new Ada.Finalization.Controlled with record\n       Tree : Tree_Types.Tree_Type;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n \n    overriding procedure Adjust (Container : in out Set);\n "}, {"sha": "df56e481dd04028fda8096ffe1446685ba7a1326", "filename": "gcc/ada/libgnat/a-ciorse.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorse.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -41,6 +41,7 @@ pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Set_Operations);\n with Ada.Unchecked_Deallocation;\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Indefinite_Ordered_Sets with\n   SPARK_Mode => Off\n@@ -1722,6 +1723,31 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+\n+      for X of V loop\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Element_Type'Put_Image (S, X);\n+      end loop;\n+\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "b75a7a34cf3314679d062ce9dc6f7ebb53b5f0e2", "filename": "gcc/ada/libgnat/a-ciorse.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-ciorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-ciorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-ciorse.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -37,6 +37,7 @@ with Ada.Containers.Helpers;\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type (<>) is private;\n@@ -359,7 +360,10 @@ private\n \n    type Set is new Ada.Finalization.Controlled with record\n       Tree : Tree_Types.Tree_Type;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n \n    overriding procedure Adjust (Container : in out Set);\n "}, {"sha": "5d441634aba618ffaf01f7cee7cf19d757139f41", "filename": "gcc/ada/libgnat/a-coboho.adb", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coboho.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coboho.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coboho.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -26,6 +26,7 @@\n ------------------------------------------------------------------------------\n \n with Unchecked_Conversion;\n+with System.Put_Images;\n \n package body Ada.Containers.Bounded_Holders is\n \n@@ -64,6 +65,20 @@ package body Ada.Containers.Bounded_Holders is\n       return Get (Left) = Get (Right);\n    end \"=\";\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Holder)\n+   is\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+      Element_Type'Put_Image (S, Get (V));\n+      Array_After (S);\n+   end Put_Image;\n+\n    ---------\n    -- Get --\n    ---------"}, {"sha": "024e6a66a8184c953b97906176e53568a8154206", "filename": "gcc/ada/libgnat/a-coboho.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coboho.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coboho.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coboho.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -30,6 +30,7 @@\n ------------------------------------------------------------------------------\n \n private with System;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type (<>) is private;\n@@ -93,11 +94,14 @@ private\n    type Holder is record\n       Data : Storage_Array (1 .. Max_Size_In_Storage_Elements);\n    end record\n-     with Alignment => Standard'Maximum_Alignment;\n+     with Alignment => Standard'Maximum_Alignment, Put_Image => Put_Image;\n    --  We would like to say \"Alignment => Element_Type'Alignment\", but that\n    --  is illegal because it's not static, so we use the maximum possible\n    --  (default) alignment instead.\n \n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Holder);\n+\n    type Element_Access is access all Element_Type;\n    pragma Assert (Element_Access'Size = Standard'Address_Size,\n                   \"cannot instantiate with an array type\");"}, {"sha": "ba105a2a59f6016b0bd95103bc989ebb81fc91a2", "filename": "gcc/ada/libgnat/a-cobove.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cobove.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cobove.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cobove.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -30,6 +30,7 @@\n with Ada.Containers.Generic_Array_Sort;\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Bounded_Vectors is\n \n@@ -2118,6 +2119,31 @@ package body Ada.Containers.Bounded_Vectors is\n       Query_Element (Position.Container.all, Position.Index, Process);\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Vector)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+\n+      for X of V loop\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Element_Type'Put_Image (S, X);\n+      end loop;\n+\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "4c8905cf51e6d2ae4bd95b5ef4da9d4402313585", "filename": "gcc/ada/libgnat/a-cobove.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cobove.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cobove.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Streams;\n private with Ada.Finalization;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Index_Type is range <>;\n@@ -392,7 +393,10 @@ private\n       Elements : Elements_Array (1 .. Capacity) := (others => <>);\n       Last     : Extended_Index := No_Index;\n       TC       : aliased Tamper_Counts;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Vector);\n \n    procedure Write\n      (Stream    : not null access Root_Stream_Type'Class;"}, {"sha": "44bf3d5b72982cc576d8afdeb3cb3c078cd54714", "filename": "gcc/ada/libgnat/a-cohama.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cohama.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cohama.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohama.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -38,6 +38,7 @@ pragma Elaborate_All (Ada.Containers.Hash_Tables.Generic_Keys);\n with Ada.Containers.Helpers; use Ada.Containers.Helpers;\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Hashed_Maps with\n   SPARK_Mode => Off\n@@ -870,6 +871,36 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+\n+      procedure Put_Key_Value (Position : Cursor);\n+      procedure Put_Key_Value (Position : Cursor) is\n+      begin\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Key_Type'Put_Image (S, Key (Position));\n+         Put_Arrow (S);\n+         Element_Type'Put_Image (S, Element (Position));\n+      end Put_Key_Value;\n+\n+   begin\n+      Array_Before (S);\n+      Iterate (V, Put_Key_Value'Access);\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "cb5d2c5bf3e2b9195788539ae6d8407c5c74d1cf", "filename": "gcc/ada/libgnat/a-cohama.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cohama.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cohama.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohama.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ with Ada.Iterator_Interfaces;\n private with Ada.Containers.Hash_Tables;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n --  The language-defined generic package Containers.Hashed_Maps provides\n --  private types Map and Cursor, and a set of operations for each type. A map\n@@ -425,7 +426,10 @@ private\n \n    type Map is new Ada.Finalization.Controlled with record\n       HT : HT_Types.Hash_Table_Type;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map);\n \n    overriding procedure Adjust (Container : in out Map);\n "}, {"sha": "4de3dacf714f882d44962fa51281a1b788e6d56e", "filename": "gcc/ada/libgnat/a-cohase.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cohase.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cohase.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohase.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -40,6 +40,7 @@ with Ada.Containers.Helpers; use Ada.Containers.Helpers;\n with Ada.Containers.Prime_Numbers;\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Hashed_Sets with\n   SPARK_Mode => Off\n@@ -1149,6 +1150,31 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+\n+      for X of V loop\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Element_Type'Put_Image (S, X);\n+      end loop;\n+\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "451f592ce47b263c327f591fcc847809dba89294", "filename": "gcc/ada/libgnat/a-cohase.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cohase.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-cohase.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-cohase.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -37,6 +37,7 @@ private with Ada.Containers.Hash_Tables;\n with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type is private;\n@@ -504,7 +505,10 @@ private\n \n    type Set is new Ada.Finalization.Controlled with record\n       HT : HT_Types.Hash_Table_Type;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n \n    overriding procedure Adjust (Container : in out Set);\n "}, {"sha": "6c99c8d2fb116dd3075f24f5098d44fd3c69ffca", "filename": "gcc/ada/libgnat/a-coinho.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coinho.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coinho.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinho.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -26,6 +26,7 @@\n ------------------------------------------------------------------------------\n \n with Ada.Unchecked_Deallocation;\n+with System.Put_Images;\n \n package body Ada.Containers.Indefinite_Holders is\n \n@@ -229,6 +230,22 @@ package body Ada.Containers.Indefinite_Holders is\n       B := B - 1;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Holder)\n+   is\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+      if not Is_Empty (V) then\n+         Element_Type'Put_Image (S, Element (V));\n+      end if;\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "372f0693506bf46e03b9990e4023ff6f842e18f9", "filename": "gcc/ada/libgnat/a-coinho.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coinho.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coinho.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinho.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -31,6 +31,7 @@\n \n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type (<>) is private;\n@@ -115,7 +116,11 @@ private\n    type Holder is new Ada.Finalization.Controlled with record\n       Element : Element_Access;\n       Busy    : Natural := 0;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Holder);\n+\n    for Holder'Read use Read;\n    for Holder'Write use Write;\n "}, {"sha": "16bb7081e33ea4ece78da15393f3736e197c141a", "filename": "gcc/ada/libgnat/a-coinho__shared.adb", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coinho__shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coinho__shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinho__shared.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -33,6 +33,7 @@\n --  internal shared object and element).\n \n with Ada.Unchecked_Deallocation;\n+with System.Put_Images;\n \n package body Ada.Containers.Indefinite_Holders is\n \n@@ -319,6 +320,22 @@ package body Ada.Containers.Indefinite_Holders is\n       B := B - 1;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Holder)\n+   is\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+      if not Is_Empty (V) then\n+         Element_Type'Put_Image (S, Element (V));\n+      end if;\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "e7bea85b4ac0dca198fb6f433fad61269fcf8dd6", "filename": "gcc/ada/libgnat/a-coinho__shared.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coinho__shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coinho__shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinho__shared.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ private with Ada.Finalization;\n private with Ada.Streams;\n \n private with System.Atomic_Counters;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type (<>) is private;\n@@ -130,7 +131,11 @@ private\n    type Holder is new Ada.Finalization.Controlled with record\n       Reference : Shared_Holder_Access;\n       Busy      : Natural := 0;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Holder);\n+\n    for Holder'Read use Read;\n    for Holder'Write use Write;\n "}, {"sha": "5999a2c2d308bec8e9afc9a9a9d8837383d4bfdd", "filename": "gcc/ada/libgnat/a-coinve.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coinve.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coinve.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinve.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -31,6 +31,7 @@ with Ada.Containers.Generic_Array_Sort;\n with Ada.Unchecked_Deallocation;\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Indefinite_Vectors with\n   SPARK_Mode => Off\n@@ -2649,6 +2650,31 @@ is\n       end if;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Vector)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+\n+      for X of V loop\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Element_Type'Put_Image (S, X);\n+      end loop;\n+\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "1f15722319a4cdf55b4d26d21a7c6b7a95b79f66", "filename": "gcc/ada/libgnat/a-coinve.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coinve.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coinve.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coinve.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Index_Type is range <>;\n@@ -393,7 +394,10 @@ private\n       Elements : Elements_Access := null;\n       Last     : Extended_Index := No_Index;\n       TC       : aliased Tamper_Counts;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Vector);\n \n    overriding procedure Adjust (Container : in out Vector);\n    overriding procedure Finalize (Container : in out Vector);"}, {"sha": "78f93f02b9d6aafa326e0a515933d7e63d8d0442", "filename": "gcc/ada/libgnat/a-comutr.adb", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-comutr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-comutr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-comutr.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -31,6 +31,7 @@ with Ada.Unchecked_Conversion;\n with Ada.Unchecked_Deallocation;\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Multiway_Trees with\n   SPARK_Mode => Off\n@@ -1858,6 +1859,49 @@ is\n       Process (Position.Node.Element);\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Tree)\n+   is\n+      use System.Put_Images;\n+\n+      procedure Rec (Position : Cursor);\n+      --  Recursive routine operating on cursors\n+\n+      procedure Rec (Position : Cursor) is\n+         First_Time : Boolean := True;\n+      begin\n+         Array_Before (S);\n+\n+         for X in Iterate_Children (V, Position) loop\n+            if First_Time then\n+               First_Time := False;\n+            else\n+               Array_Between (S);\n+            end if;\n+\n+            Element_Type'Put_Image (S, Element (X));\n+            if Child_Count (X) > 0 then\n+               Simple_Array_Between (S);\n+               Rec (X);\n+            end if;\n+         end loop;\n+\n+         Array_After (S);\n+      end Rec;\n+\n+   begin\n+      if First_Child (Root (V)) = No_Element then\n+         Array_Before (S);\n+         Array_After (S);\n+      else\n+         Rec (First_Child (Root (V)));\n+      end if;\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "a1f51affbf42376c0e505df61eb2f8808f4ba333", "filename": "gcc/ada/libgnat/a-comutr.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-comutr.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-comutr.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-comutr.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ with Ada.Iterator_Interfaces;\n with Ada.Containers.Helpers;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type is private;\n@@ -400,7 +401,10 @@ private\n       Root  : aliased Root_Node_Type;\n       TC    : aliased Tamper_Counts;\n       Count : Count_Type := 0;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Tree);\n \n    overriding procedure Adjust (Container : in out Tree);\n "}, {"sha": "15d08f57b6036cb586f9972483435e2688ee81a8", "filename": "gcc/ada/libgnat/a-coorma.adb", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coorma.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coorma.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorma.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -38,6 +38,7 @@ with Ada.Containers.Red_Black_Trees.Generic_Keys;\n pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Keys);\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Ordered_Maps with\n   SPARK_Mode => Off\n@@ -1214,6 +1215,36 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+\n+      procedure Put_Key_Value (Position : Cursor);\n+      procedure Put_Key_Value (Position : Cursor) is\n+      begin\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Key_Type'Put_Image (S, Key (Position));\n+         Put_Arrow (S);\n+         Element_Type'Put_Image (S, Element (Position));\n+      end Put_Key_Value;\n+\n+   begin\n+      Array_Before (S);\n+      Iterate (V, Put_Key_Value'Access);\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "f80836e96eac84969264633944b2006264dc4789", "filename": "gcc/ada/libgnat/a-coorma.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coorma.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coorma.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorma.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -36,6 +36,7 @@ with Ada.Iterator_Interfaces;\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Key_Type is private;\n@@ -259,7 +260,10 @@ private\n \n    type Map is new Ada.Finalization.Controlled with record\n       Tree : Tree_Types.Tree_Type;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Map);\n \n    overriding procedure Adjust (Container : in out Map);\n "}, {"sha": "c7db472e50baee8536155cc223df78a85a538130", "filename": "gcc/ada/libgnat/a-coormu.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coormu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coormu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coormu.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -39,6 +39,7 @@ with Ada.Containers.Red_Black_Trees.Generic_Set_Operations;\n pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Set_Operations);\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Ordered_Multisets with\n   SPARK_Mode => Off\n@@ -1565,6 +1566,31 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+\n+      for X of V loop\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Element_Type'Put_Image (S, X);\n+      end loop;\n+\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "95aec73ea2646003205ddc32715b7171015c85ef", "filename": "gcc/ada/libgnat/a-coormu.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coormu.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coormu.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coormu.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -34,6 +34,7 @@\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n with Ada.Iterator_Interfaces;\n \n generic\n@@ -472,7 +473,10 @@ private\n \n    type Set is new Ada.Finalization.Controlled with record\n       Tree : Tree_Types.Tree_Type;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n \n    overriding procedure Adjust (Container : in out Set);\n "}, {"sha": "8a648e889e118e14b1dce4818c622fcc4d703b22", "filename": "gcc/ada/libgnat/a-coorse.adb", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coorse.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coorse.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorse.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -41,6 +41,7 @@ with Ada.Containers.Red_Black_Trees.Generic_Set_Operations;\n pragma Elaborate_All (Ada.Containers.Red_Black_Trees.Generic_Set_Operations);\n \n with System; use type System.Address;\n+with System.Put_Images;\n \n package body Ada.Containers.Ordered_Sets with\n   SPARK_Mode => Off\n@@ -1580,6 +1581,31 @@ is\n       end;\n    end Query_Element;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set)\n+   is\n+      First_Time : Boolean := True;\n+      use System.Put_Images;\n+   begin\n+      Array_Before (S);\n+\n+      for X of V loop\n+         if First_Time then\n+            First_Time := False;\n+         else\n+            Simple_Array_Between (S);\n+         end if;\n+\n+         Element_Type'Put_Image (S, X);\n+      end loop;\n+\n+      Array_After (S);\n+   end Put_Image;\n+\n    ----------\n    -- Read --\n    ----------"}, {"sha": "a5577e9e85876897448d94728822ad4206cbea5d", "filename": "gcc/ada/libgnat/a-coorse.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coorse.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-coorse.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-coorse.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -37,6 +37,7 @@ with Ada.Containers.Helpers;\n private with Ada.Containers.Red_Black_Trees;\n private with Ada.Finalization;\n private with Ada.Streams;\n+private with Ada.Strings.Text_Output;\n \n generic\n    type Element_Type is private;\n@@ -342,7 +343,10 @@ private\n \n    type Set is new Ada.Finalization.Controlled with record\n       Tree : Tree_Types.Tree_Type;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Set);\n \n    overriding procedure Adjust (Container : in out Set);\n "}, {"sha": "663d4ba99069be5490b1f9762007dc61127f1836", "filename": "gcc/ada/libgnat/a-stoubu.adb", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-stoubu.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-stoubu.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stoubu.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -35,6 +35,8 @@ with Ada.Strings.UTF_Encoding.Wide_Strings;\n with Ada.Strings.UTF_Encoding.Wide_Wide_Strings;\n package body Ada.Strings.Text_Output.Buffers is\n \n+   type Chunk_Access is access all Chunk;\n+\n    function New_Buffer\n      (Indent_Amount : Natural := Default_Indent_Amount;\n       Chunk_Length : Positive := Default_Chunk_Length) return Buffer\n@@ -46,13 +48,20 @@ package body Ada.Strings.Text_Output.Buffers is\n       end return;\n    end New_Buffer;\n \n+   --  We need type conversions of Chunk_Access values in the following two\n+   --  procedures, because the one in Text_Output has Storage_Size => 0,\n+   --  because Text_Output is Pure. We do not run afoul of 13.11.2(16/3),\n+   --  which requires the allocation and deallocation to have the same pool,\n+   --  because the allocation in Full_Method and the deallocation in Destroy\n+   --  use the same access type, and therefore the same pool.\n+\n    procedure Destroy (S : in out Buffer) is\n       procedure Free is new Unchecked_Deallocation (Chunk, Chunk_Access);\n-      Cur : Chunk_Access := S.Initial_Chunk.Next;\n+      Cur : Chunk_Access := Chunk_Access (S.Initial_Chunk.Next);\n    begin\n       while Cur /= null loop\n          declare\n-            Temp : constant Chunk_Access := Cur.Next;\n+            Temp : constant Chunk_Access := Chunk_Access (Cur.Next);\n          begin\n             Free (Cur);\n             Cur := Temp;\n@@ -66,7 +75,8 @@ package body Ada.Strings.Text_Output.Buffers is\n    begin\n       pragma Assert (S.Cur_Chunk.Next = null);\n       pragma Assert (S.Last = S.Cur_Chunk.Chars'Length);\n-      S.Cur_Chunk.Next := new Chunk (S.Chunk_Length);\n+      S.Cur_Chunk.Next :=\n+        Text_Output.Chunk_Access (Chunk_Access'(new Chunk (S.Chunk_Length)));\n       S.Cur_Chunk := S.Cur_Chunk.Next;\n       S.Num_Extra_Chunks := @ + 1;\n       S.Last := 0;"}, {"sha": "2011408218a3314c715bab2f072c9cc0bc9d728c", "filename": "gcc/ada/libgnat/a-stouut.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-stouut.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-stouut.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stouut.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -142,6 +142,7 @@ package body Ada.Strings.Text_Output.Utils is\n \n          S.Cur_Chunk.Chars (S.Last + 1 .. S.Last + Item'Length) := Item;\n          S.Last := S.Last + Item'Length;\n+         S.Column := S.Column + Item'Length;\n          Full (S);\n          --  ???Seems like maybe we shouldn't call Full until we have MORE\n          --  characters. But then we can't pass Chunk_Length => 1 to\n@@ -175,6 +176,7 @@ package body Ada.Strings.Text_Output.Utils is\n \n          S.Cur_Chunk.Chars (S.Last + 1 .. S.Last + Item'Length) := Item;\n          S.Last := S.Last + Item'Length;\n+         S.Column := S.Column + Item'Length;\n       else\n          Put_UTF_8_Outline (S, Item);\n       end if;\n@@ -191,7 +193,6 @@ package body Ada.Strings.Text_Output.Utils is\n                Put_UTF_8 (S, Item (Line_Start .. Index - 1));\n             end if;\n             New_Line (S);\n-            S.Column := 1;\n             Line_Start := Index + 1;\n          end if;\n "}, {"sha": "5056080d4bf3f87335704d270b2992864e3b2e67", "filename": "gcc/ada/libgnat/a-stouut.ads", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-stouut.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-stouut.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stouut.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -29,7 +29,7 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n-package Ada.Strings.Text_Output.Utils with Preelaborate is\n+package Ada.Strings.Text_Output.Utils with Pure is\n \n    --  This package provides utility functions on Sink'Class. These are\n    --  intended for use by Put_Image attributes, both the default versions\n@@ -70,7 +70,8 @@ package Ada.Strings.Text_Output.Utils with Preelaborate is\n    --  Send data that is already UTF-8 encoded (including 7-bit ASCII) to\n    --  S. These are more efficient than Put_String.\n \n-   procedure New_Line (S : in out Sink'Class) with Inline;\n+   procedure New_Line (S : in out Sink'Class) with\n+     Inline, Post => Column (S) = 1;\n    --  Puts the new-line character.\n \n    function Column (S : Sink'Class) return Positive with Inline;"}, {"sha": "7d1e6ddb727a2eb4af301f2c6af3be188a3899f8", "filename": "gcc/ada/libgnat/a-strunb.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-strunb.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-strunb.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -778,6 +778,16 @@ package body Ada.Strings.Unbounded is\n       end if;\n    end Overwrite;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Unbounded_String) is\n+   begin\n+      String'Put_Image (S, To_String (V));\n+   end Put_Image;\n+\n    -----------------------\n    -- Realloc_For_Chunk --\n    -----------------------"}, {"sha": "7de9bbcbdc4ee800f63c9c322e80df410c077370", "filename": "gcc/ada/libgnat/a-strunb.ads", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-strunb.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-strunb.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -41,6 +41,7 @@ pragma Assertion_Policy (Pre => Ignore);\n \n with Ada.Strings.Maps;\n with Ada.Finalization;\n+private with Ada.Strings.Text_Output;\n \n --  The language-defined package Strings.Unbounded provides a private type\n --  Unbounded_String and a set of operations. An object of type\n@@ -744,7 +745,11 @@ private\n    type Unbounded_String is new AF.Controlled with record\n       Reference : String_Access := Null_String'Access;\n       Last      : Natural       := 0;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Unbounded_String);\n+\n    --  The Unbounded_String is using a buffered implementation to increase\n    --  speed of the Append/Delete/Insert procedures. The Reference string\n    --  pointer above contains the current string value and extra room at the"}, {"sha": "54a2932c00c45ff397531c6f9c3b036aae1c1581", "filename": "gcc/ada/libgnat/a-strunb__shared.adb", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -1296,6 +1296,16 @@ package body Ada.Strings.Unbounded is\n       end if;\n    end Overwrite;\n \n+   ---------------\n+   -- Put_Image --\n+   ---------------\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Unbounded_String) is\n+   begin\n+      String'Put_Image (S, To_String (V));\n+   end Put_Image;\n+\n    ---------------\n    -- Reference --\n    ---------------"}, {"sha": "2cd81666fdca71ecf95cfe327833ab46a4b037d1", "filename": "gcc/ada/libgnat/a-strunb__shared.ads", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-strunb__shared.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -78,6 +78,7 @@ pragma Assertion_Policy (Pre => Ignore);\n with Ada.Strings.Maps;\n private with Ada.Finalization;\n private with System.Atomic_Counters;\n+private with Ada.Strings.Text_Output;\n \n package Ada.Strings.Unbounded with\n   Initial_Condition => Length (Null_Unbounded_String) = 0\n@@ -738,7 +739,10 @@ private\n \n    type Unbounded_String is new AF.Controlled with record\n       Reference : not null Shared_String_Access := Empty_Shared_String'Access;\n-   end record;\n+   end record with Put_Image => Put_Image;\n+\n+   procedure Put_Image\n+     (S : in out Ada.Strings.Text_Output.Sink'Class; V : Unbounded_String);\n \n    pragma Stream_Convert (Unbounded_String, To_Unbounded, To_String);\n    --  Provide stream routines without dragging in Ada.Streams"}, {"sha": "9eaf98a820cc34205e1b8565a1e17ce59e24677f", "filename": "gcc/ada/libgnat/a-stteou.ads", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-stteou.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fa-stteou.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fa-stteou.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -32,7 +32,7 @@\n with Ada.Strings.UTF_Encoding;\n with Ada.Strings.UTF_Encoding.Wide_Wide_Strings;\n \n-package Ada.Strings.Text_Output with Preelaborate is\n+package Ada.Strings.Text_Output with Pure is\n \n    --  This package provides a \"Sink\" abstraction, to which characters of type\n    --  Character, Wide_Character, and Wide_Wide_Character can be sent. This\n@@ -48,7 +48,11 @@ package Ada.Strings.Text_Output with Preelaborate is\n    --  extended. It is designed with particular extensions in mind, and these\n    --  extensions are declared in child packages of this package, because they\n    --  depend on implementation details in the private part of this\n-   --  package. The primary extensions of Sink are:\n+   --  package.\n+   --\n+   --  Users are not expected to extend type Sink.\n+   --\n+   --  The primary extensions of Sink are:\n    --\n    --     Buffer. The characters sent to a Buffer are stored in memory, and can\n    --     be retrieved via Get functions. This is intended for the\n@@ -141,15 +145,13 @@ package Ada.Strings.Text_Output with Preelaborate is\n    --  slows things down, but increasing it doesn't gain much.\n \n private\n-   type String_Access is access all String;\n-\n    --  For Buffer, the \"internal buffer\" mentioned above is implemented as a\n    --  linked list of chunks. When the current chunk is full, we allocate a new\n    --  one. For File, there is only one chunk. When it is full, we send the\n    --  data to the file, and empty it.\n \n    type Chunk;\n-   type Chunk_Access is access all Chunk;\n+   type Chunk_Access is access all Chunk with Storage_Size => 0;\n    type Chunk (Length : Positive) is limited record\n       Next : Chunk_Access := null;\n       Chars : UTF_8_Lines (1 .. Length);"}, {"sha": "e4b9e670ddfa533807561659e0864e359b07a6a6", "filename": "gcc/ada/libgnat/s-putima.adb", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fs-putima.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fs-putima.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-putima.adb?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -250,6 +250,11 @@ package body System.Put_Images is\n       Put_7bit (S, ')');\n    end Record_After;\n \n+   procedure Put_Arrow (S : in out Sink'Class) is\n+   begin\n+      Put_UTF_8 (S, \" => \");\n+   end Put_Arrow;\n+\n    procedure Put_Image_Unknown (S : in out Sink'Class; Type_Name : String) is\n    begin\n       Put_UTF_8 (S, \"{\");"}, {"sha": "bf565079c96823a62532ad4f0f28852f56c67e52", "filename": "gcc/ada/libgnat/s-putima.ads", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fs-putima.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26349b6d9a4c03cb22104eb1da30362ece3addc5/gcc%2Fada%2Flibgnat%2Fs-putima.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flibgnat%2Fs-putima.ads?ref=26349b6d9a4c03cb22104eb1da30362ece3addc5", "patch": "@@ -32,7 +32,7 @@\n with Ada.Strings.Text_Output;\n with System.Unsigned_Types;\n \n-package System.Put_Images is\n+package System.Put_Images with Pure is\n \n    --  This package contains subprograms that are called by the generated code\n    --  for the 'Put_Image attribute.\n@@ -64,8 +64,8 @@ package System.Put_Images is\n \n    type Byte is new Character with Alignment => 1;\n    type Byte_String is array (Positive range <>) of Byte with Alignment => 1;\n-   type Thin_Pointer is access all Byte;\n-   type Fat_Pointer is access all Byte_String;\n+   type Thin_Pointer is access all Byte with Storage_Size => 0;\n+   type Fat_Pointer is access all Byte_String with Storage_Size => 0;\n    procedure Put_Image_Thin_Pointer (S : in out Sink'Class; X : Thin_Pointer);\n    procedure Put_Image_Fat_Pointer (S : in out Sink'Class; X : Fat_Pointer);\n    --  Print \"null\", or the address of the designated object as an unsigned\n@@ -95,6 +95,8 @@ package System.Put_Images is\n    procedure Record_Between (S : in out Sink'Class);\n    procedure Record_After (S : in out Sink'Class);\n \n+   procedure Put_Arrow (S : in out Sink'Class);\n+\n    procedure Put_Image_Unknown (S : in out Sink'Class; Type_Name : String);\n    --  For Put_Image of types that don't have the attribute, such as type\n    --  Sink."}]}