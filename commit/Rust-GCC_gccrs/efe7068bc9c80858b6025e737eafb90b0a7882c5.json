{"sha": "efe7068bc9c80858b6025e737eafb90b0a7882c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZlNzA2OGJjOWM4MDg1OGI2MDI1ZTczN2VhZmI5MGIwYTc4ODJjNQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-05-04T11:30:35Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-05-04T11:30:35Z"}, "message": "re PR tree-optimization/53168 (ICE in find_or_generate_expression, at tree-ssa-pre.c:3053)\n\n2012-05-04  Richard Guenther  <rguenther@suse.de>\n\n\tPR tree-optimization/53168\n\t* tree-ssa-pre.c (phi_translate_1): Only handle type-punned\n\tmemory reads when the result is a constant we can pun.\n\n\t* gcc.dg/torture/pr53168.c: New testcase.\n\t* gcc.dg/tree-ssa/ssa-pre-30.c: Likewise.\n\nFrom-SVN: r187153", "tree": {"sha": "7d21863fba308e651133dda59a0cb35c8c4490e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7d21863fba308e651133dda59a0cb35c8c4490e7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efe7068bc9c80858b6025e737eafb90b0a7882c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe7068bc9c80858b6025e737eafb90b0a7882c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efe7068bc9c80858b6025e737eafb90b0a7882c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efe7068bc9c80858b6025e737eafb90b0a7882c5/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1d67dde88392a5271855bf4d8420764e4e3f451a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d67dde88392a5271855bf4d8420764e4e3f451a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d67dde88392a5271855bf4d8420764e4e3f451a"}], "stats": {"total": 145, "additions": 89, "deletions": 56}, "files": [{"sha": "72e3264c345900cd35bc4d2b8e9ec9579ce0e7d6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe7068bc9c80858b6025e737eafb90b0a7882c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe7068bc9c80858b6025e737eafb90b0a7882c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=efe7068bc9c80858b6025e737eafb90b0a7882c5", "patch": "@@ -1,3 +1,9 @@\n+2012-05-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53168\n+\t* tree-ssa-pre.c (phi_translate_1): Only handle type-punned\n+\tmemory reads when the result is a constant we can pun.\n+\n 2012-05-04  Richard Guenther  <rguenther@suse.de>\n \n \t* common.opt (flto-report): Do not mark as Optimization."}, {"sha": "e26d07258bb9be3495926baf45329078694e3388", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe7068bc9c80858b6025e737eafb90b0a7882c5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe7068bc9c80858b6025e737eafb90b0a7882c5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efe7068bc9c80858b6025e737eafb90b0a7882c5", "patch": "@@ -1,3 +1,9 @@\n+2012-05-04  Richard Guenther  <rguenther@suse.de>\n+\n+\tPR tree-optimization/53168\n+\t* gcc.dg/torture/pr53168.c: New testcase.\n+\t* gcc.dg/tree-ssa/ssa-pre-30.c: Likewise.\n+\n 2012-05-04  Richard Guenther  <rguenther@suse.de>\n \n \t* gcc.dg/lto/pr53214_0.c: New testcase."}, {"sha": "0b9a8dce60937e328ae56a5678d91ab6768aa5fa", "filename": "gcc/testsuite/gcc.dg/torture/pr53168.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe7068bc9c80858b6025e737eafb90b0a7882c5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr53168.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe7068bc9c80858b6025e737eafb90b0a7882c5/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr53168.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr53168.c?ref=efe7068bc9c80858b6025e737eafb90b0a7882c5", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+\n+int a, b, c;\n+unsigned *d;\n+int e[1];\n+void fn1 ();\n+int fn2 ();\n+int\n+fn3 ()\n+{\n+  int *f = &a;\n+  if (fn2 ())\n+    {\n+      for (; c; c++)\n+\t{\n+\t  e[a] && (b = 0);\n+\t  fn1 ();\n+\t  if (e[a])\n+\t    return 0;\n+\t}\n+      for (; c <= 0; c++)\n+\tfor (;;)\n+\t  ;\n+    }\n+  else\n+    e[0] = 0 != (d = f);\n+  return *d;\n+}"}, {"sha": "68a7a7f826ece4957ffafdc2c4ff87dd674f1c3e", "filename": "gcc/testsuite/gcc.dg/tree-ssa/ssa-pre-30.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe7068bc9c80858b6025e737eafb90b0a7882c5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe7068bc9c80858b6025e737eafb90b0a7882c5/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fssa-pre-30.c?ref=efe7068bc9c80858b6025e737eafb90b0a7882c5", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-pre-details\" } */\n+\n+int f;\n+int g;\n+unsigned int\n+foo (int b, int x)\n+{\n+  if (b)\n+    x = *(int *)&f;\n+  g = x;\n+  return *(unsigned int*)&f;\n+}\n+float\n+bar (int b, int x)\n+{\n+  if (b)\n+    x = *(int *)&f;\n+  g = x;\n+  return *(float *)&f;\n+}\n+\n+/* We should see the partial redundant loads of f even though they\n+   are using different types (of the same size).  */\n+\n+/* { dg-final { scan-tree-dump-times \"Replaced MEM\" 2 \"pre\" } } */\n+/* { dg-final { cleanup-tree-dump \"pre\" } } */"}, {"sha": "fcd7feeea1e6096c03a45700d9ee83aa35a66d5a", "filename": "gcc/tree-ssa-pre.c", "status": "modified", "additions": 22, "deletions": 56, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efe7068bc9c80858b6025e737eafb90b0a7882c5/gcc%2Ftree-ssa-pre.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efe7068bc9c80858b6025e737eafb90b0a7882c5/gcc%2Ftree-ssa-pre.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-pre.c?ref=efe7068bc9c80858b6025e737eafb90b0a7882c5", "patch": "@@ -1659,7 +1659,6 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t  {\n \t    unsigned int new_val_id;\n \t    pre_expr constant;\n-\t    bool converted = false;\n \n \t    tree result = vn_reference_lookup_pieces (newvuse, ref->set,\n \t\t\t\t\t\t      ref->type,\n@@ -1668,74 +1667,41 @@ phi_translate_1 (pre_expr expr, bitmap_set_t set1, bitmap_set_t set2,\n \t    if (result)\n \t      VEC_free (vn_reference_op_s, heap, newoperands);\n \n-\t    if (result\n-\t\t&& !useless_type_conversion_p (ref->type, TREE_TYPE (result)))\n+\t    /* We can always insert constants, so if we have a partial\n+\t       redundant constant load of another type try to translate it\n+\t       to a constant of appropriate type.  */\n+\t    if (result && is_gimple_min_invariant (result))\n \t      {\n-\t\tresult = fold_build1 (VIEW_CONVERT_EXPR, ref->type, result);\n-\t\tconverted = true;\n+\t\ttree tem = result;\n+\t\tif (!useless_type_conversion_p (ref->type, TREE_TYPE (result)))\n+\t\t  {\n+\t\t    tem = fold_unary (VIEW_CONVERT_EXPR, ref->type, result);\n+\t\t    if (tem && !is_gimple_min_invariant (tem))\n+\t\t      tem = NULL_TREE;\n+\t\t  }\n+\t\tif (tem)\n+\t\t  return get_or_alloc_expr_for_constant (tem);\n \t      }\n+\n+\t    /* If we'd have to convert things we would need to validate\n+\t       if we can insert the translated expression.  So fail\n+\t       here for now - we cannot insert an alias with a different\n+\t       type in the VN tables either, as that would assert.  */\n+\t    if (result\n+\t\t&& !useless_type_conversion_p (ref->type, TREE_TYPE (result)))\n+\t      return NULL;\n \t    else if (!result && newref\n \t\t     && !useless_type_conversion_p (ref->type, newref->type))\n \t      {\n \t\tVEC_free (vn_reference_op_s, heap, newoperands);\n \t\treturn NULL;\n \t      }\n \n-\t    if (result && is_gimple_min_invariant (result))\n-\t      {\n-\t        gcc_assert (!newoperands);\n-\t        return get_or_alloc_expr_for_constant (result);\n-\t      }\n-\n \t    expr = (pre_expr) pool_alloc (pre_expr_pool);\n \t    expr->kind = REFERENCE;\n \t    expr->id = 0;\n \n-\t    if (converted)\n-\t      {\n-\t\tvn_nary_op_t nary;\n-\t\ttree nresult;\n-\n-\t\tgcc_assert (CONVERT_EXPR_P (result)\n-\t\t\t    || TREE_CODE (result) == VIEW_CONVERT_EXPR);\n-\n-\t\tnresult = vn_nary_op_lookup_pieces (1, TREE_CODE (result),\n-\t\t\t\t\t\t    TREE_TYPE (result),\n-\t\t\t\t\t\t    &TREE_OPERAND (result, 0),\n-\t\t\t\t\t\t    &nary);\n-\t\tif (nresult && is_gimple_min_invariant (nresult))\n-\t\t  return get_or_alloc_expr_for_constant (nresult);\n-\n-\t\texpr->kind = NARY;\n-\t\tif (nary)\n-\t\t  {\n-\t\t    PRE_EXPR_NARY (expr) = nary;\n-\t\t    constant = fully_constant_expression (expr);\n-\t\t    if (constant != expr)\n-\t\t      return constant;\n-\n-\t\t    new_val_id = nary->value_id;\n-\t\t    get_or_alloc_expression_id (expr);\n-\t\t  }\n-\t\telse\n-\t\t  {\n-\t\t    new_val_id = get_next_value_id ();\n-\t\t    VEC_safe_grow_cleared (bitmap_set_t, heap,\n-\t\t\t\t\t   value_expressions,\n-\t\t\t\t\t   get_max_value_id() + 1);\n-\t\t    nary = vn_nary_op_insert_pieces (1, TREE_CODE (result),\n-\t\t\t\t\t\t     TREE_TYPE (result),\n-\t\t\t\t\t\t     &TREE_OPERAND (result, 0),\n-\t\t\t\t\t\t     NULL_TREE,\n-\t\t\t\t\t\t     new_val_id);\n-\t\t    PRE_EXPR_NARY (expr) = nary;\n-\t\t    constant = fully_constant_expression (expr);\n-\t\t    if (constant != expr)\n-\t\t      return constant;\n-\t\t    get_or_alloc_expression_id (expr);\n-\t\t  }\n-\t      }\n-\t    else if (newref)\n+\t    if (newref)\n \t      {\n \t\tPRE_EXPR_REFERENCE (expr) = newref;\n \t\tconstant = fully_constant_expression (expr);"}]}