{"sha": "754a9012a41d64efa3e848e3e9464925d1d09cb4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU0YTkwMTJhNDFkNjRlZmEzZTg0OGUzZTk0NjQ5MjVkMWQwOWNiNA==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-07-13T14:39:41Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-07-13T14:39:41Z"}, "message": "EmbeddedWindow.java, [...]: New files.\n\n2003-07-13  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/awt/EmbeddedWindow.java,\n\tgnu/java/awt/EmbeddedWindowSupport.java,\n\tgnu/java/awt/natEmbeddedWindow.cc:\n\tNew files.\n\t* java/awt/Window.java\n\t(Window): New constructor to support embedded windows.\n\t* Makefile.am\n\t(awt_java_source_files): Added gnu/java/awt/EmbeddedWindow.java and\n\tgnu/java/awt/EmbeddedWindowSupport.java.\n\t(nat_source_files): Added gnu/java/awt/natEmbeddedWindow.cc.\n\t* Makefile.in: Regenerated.\n\nFrom-SVN: r69288", "tree": {"sha": "63f4b1624c05106ebba600af0a1a3cf7d1f3156b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/63f4b1624c05106ebba600af0a1a3cf7d1f3156b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/754a9012a41d64efa3e848e3e9464925d1d09cb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754a9012a41d64efa3e848e3e9464925d1d09cb4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/754a9012a41d64efa3e848e3e9464925d1d09cb4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/754a9012a41d64efa3e848e3e9464925d1d09cb4/comments", "author": null, "committer": null, "parents": [{"sha": "75e74c719018b6ba19d6130457ad75c439842101", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75e74c719018b6ba19d6130457ad75c439842101", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75e74c719018b6ba19d6130457ad75c439842101"}], "stats": {"total": 199, "additions": 191, "deletions": 8}, "files": [{"sha": "8e09cd15493f9b3ab9ad131d640c4c28481092e5", "filename": "libjava/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=754a9012a41d64efa3e848e3e9464925d1d09cb4", "patch": "@@ -1,3 +1,17 @@\n+2003-07-13  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/awt/EmbeddedWindow.java,\n+\tgnu/java/awt/EmbeddedWindowSupport.java,\n+\tgnu/java/awt/natEmbeddedWindow.cc:\n+\tNew files.\n+\t* java/awt/Window.java\n+\t(Window): New constructor to support embedded windows.\n+\t* Makefile.am\n+\t(awt_java_source_files): Added gnu/java/awt/EmbeddedWindow.java and\n+\tgnu/java/awt/EmbeddedWindowSupport.java.\n+\t(nat_source_files): Added gnu/java/awt/natEmbeddedWindow.cc.\n+\t* Makefile.in: Regenerated.\n+\n 2003-07-11  Matt Kraai  <kraii@alumni.cmu.edu>\n \n \t* gnu/gcj/runtime/SharedLibLoader.java: Fix misspelling."}, {"sha": "a7388a7e4224f3156afd133714045b8062638268", "filename": "libjava/Makefile.am", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=754a9012a41d64efa3e848e3e9464925d1d09cb4", "patch": "@@ -751,6 +751,8 @@ gnu/awt/j2d/MappedRaster.java \\\n gnu/java/awt/BitMaskExtent.java \\\n gnu/java/awt/Buffers.java \\\n gnu/java/awt/ComponentDataBlitOp.java \\\n+gnu/java/awt/EmbeddedWindow.java \\\n+gnu/java/awt/EmbeddedWindowSupport.java \\\n gnu/java/awt/EventModifier.java \\\n gnu/java/awt/GLightweightPeer.java \\\n gnu/java/awt/image/ImageDecoder.java \\\n@@ -2573,6 +2575,7 @@ gnu/gcj/runtime/natSharedLibLoader.cc \\\n gnu/gcj/runtime/natStackTrace.cc \\\n gnu/gcj/runtime/natStringBuffer.cc \\\n gnu/gcj/runtime/natVMClassLoader.cc \\\n+gnu/java/awt/natEmbeddedWindow.cc \\\n gnu/java/nio/natFileChannelImpl.cc \\\n gnu/java/nio/natFileLockImpl.cc \\\n gnu/java/nio/natSelectorImpl.cc \\"}, {"sha": "563e516c65c3c46faa355ad714c2449a0e23fc71", "filename": "libjava/Makefile.in", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=754a9012a41d64efa3e848e3e9464925d1d09cb4", "patch": "@@ -522,6 +522,8 @@ gnu/awt/j2d/MappedRaster.java \\\n gnu/java/awt/BitMaskExtent.java \\\n gnu/java/awt/Buffers.java \\\n gnu/java/awt/ComponentDataBlitOp.java \\\n+gnu/java/awt/EmbeddedWindow.java \\\n+gnu/java/awt/EmbeddedWindowSupport.java \\\n gnu/java/awt/EventModifier.java \\\n gnu/java/awt/GLightweightPeer.java \\\n gnu/java/awt/image/ImageDecoder.java \\\n@@ -2336,6 +2338,7 @@ gnu/gcj/runtime/natSharedLibLoader.cc \\\n gnu/gcj/runtime/natStackTrace.cc \\\n gnu/gcj/runtime/natStringBuffer.cc \\\n gnu/gcj/runtime/natVMClassLoader.cc \\\n+gnu/java/awt/natEmbeddedWindow.cc \\\n gnu/java/nio/natFileChannelImpl.cc \\\n gnu/java/nio/natFileLockImpl.cc \\\n gnu/java/nio/natSelectorImpl.cc \\\n@@ -2511,14 +2514,15 @@ gnu/gcj/io/shs.lo gnu/gcj/protocol/core/natCoreInputStream.lo \\\n gnu/gcj/runtime/natFinalizerThread.lo gnu/gcj/runtime/natFirstThread.lo \\\n gnu/gcj/runtime/natNameFinder.lo gnu/gcj/runtime/natSharedLibLoader.lo \\\n gnu/gcj/runtime/natStackTrace.lo gnu/gcj/runtime/natStringBuffer.lo \\\n-gnu/gcj/runtime/natVMClassLoader.lo gnu/java/nio/natFileChannelImpl.lo \\\n-gnu/java/nio/natFileLockImpl.lo gnu/java/nio/natSelectorImpl.lo \\\n-java/io/natFile.lo java/io/natFileDescriptor.lo \\\n-java/io/natObjectInputStream.lo java/io/natVMObjectStreamClass.lo \\\n-java/lang/natCharacter.lo java/lang/natClass.lo \\\n-java/lang/natClassLoader.lo java/lang/natConcreteProcess.lo \\\n-java/lang/natDouble.lo java/lang/natFloat.lo java/lang/natMath.lo \\\n-java/lang/natObject.lo java/lang/natRuntime.lo java/lang/natString.lo \\\n+gnu/gcj/runtime/natVMClassLoader.lo gnu/java/awt/natEmbeddedWindow.lo \\\n+gnu/java/nio/natFileChannelImpl.lo gnu/java/nio/natFileLockImpl.lo \\\n+gnu/java/nio/natSelectorImpl.lo java/io/natFile.lo \\\n+java/io/natFileDescriptor.lo java/io/natObjectInputStream.lo \\\n+java/io/natVMObjectStreamClass.lo java/lang/natCharacter.lo \\\n+java/lang/natClass.lo java/lang/natClassLoader.lo \\\n+java/lang/natConcreteProcess.lo java/lang/natDouble.lo \\\n+java/lang/natFloat.lo java/lang/natMath.lo java/lang/natObject.lo \\\n+java/lang/natRuntime.lo java/lang/natString.lo \\\n java/lang/natStringBuffer.lo java/lang/natSystem.lo \\\n java/lang/natThread.lo java/lang/natVMSecurityManager.lo \\\n java/lang/ref/natReference.lo java/lang/reflect/natArray.lo \\\n@@ -2772,10 +2776,13 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/gcj/xlib/natXImage.P .deps/gnu/gcj/xlib/natXUnmapEvent.P \\\n .deps/gnu/java/awt/BitMaskExtent.P .deps/gnu/java/awt/Buffers.P \\\n .deps/gnu/java/awt/ComponentDataBlitOp.P \\\n+.deps/gnu/java/awt/EmbeddedWindow.P \\\n+.deps/gnu/java/awt/EmbeddedWindowSupport.P \\\n .deps/gnu/java/awt/EventModifier.P \\\n .deps/gnu/java/awt/GLightweightPeer.P \\\n .deps/gnu/java/awt/image/ImageDecoder.P \\\n .deps/gnu/java/awt/image/XBMDecoder.P \\\n+.deps/gnu/java/awt/natEmbeddedWindow.P \\\n .deps/gnu/java/awt/peer/gtk/GdkFontMetrics.P \\\n .deps/gnu/java/awt/peer/gtk/GdkGraphics.P \\\n .deps/gnu/java/awt/peer/gtk/GtkArg.P \\"}, {"sha": "607cc38518c1511c6ddbb6c0025df70f1162e066", "filename": "libjava/gnu/java/awt/EmbeddedWindow.java", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindow.java?ref=754a9012a41d64efa3e848e3e9464925d1d09cb4", "patch": "@@ -0,0 +1,62 @@\n+/* EmbeddedWindow.java --\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt;\n+\n+import java.awt.Window;\n+\n+/**\n+ * This class represents an AWT window embedded into another graphical\n+ * toolkit or anther application.\n+ * \n+ * @author Michael Koch <konqueror@gmx.de>\n+ */\n+public class EmbeddedWindow extends Window\n+{\n+  /**\n+   * Creates an window embedded into another application of graphical toolkit.\n+   *\n+   * @param window_id The native handle to the screen area where the AWT window\n+   * should be embedded.\n+   * @param width The width of the screen area.\n+   * @param height The height of the screen area.\n+   */\n+  // This method is only made native to circumvent the package-privateness of\n+  // an internal java.awt.Window constructor.\n+  public static native Window create (int window_id, int width, int height);\n+}"}, {"sha": "b29db27819702971e6703819a1ab4b72f9f25a9b", "filename": "libjava/gnu/java/awt/EmbeddedWindowSupport.java", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindowSupport.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindowSupport.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2FEmbeddedWindowSupport.java?ref=754a9012a41d64efa3e848e3e9464925d1d09cb4", "patch": "@@ -0,0 +1,67 @@\n+/* EmbeddedWindowSupport.java --\n+   Copyright (C) 2003 Free Software Foundation, Inc.\n+\n+This file is part of GNU Classpath.\n+\n+GNU Classpath is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU Classpath is distributed in the hope that it will be useful, but\n+WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU Classpath; see the file COPYING.  If not, write to the\n+Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA\n+02111-1307 USA.\n+\n+Linking this library statically or dynamically with other modules is\n+making a combined work based on this library.  Thus, the terms and\n+conditions of the GNU General Public License cover the whole\n+combination.\n+\n+As a special exception, the copyright holders of this library give you\n+permission to link this library with independent modules to produce an\n+executable, regardless of the license terms of these independent\n+modules, and to copy and distribute the resulting executable under\n+terms of your choice, provided that you also meet, for each linked\n+independent module, the terms and conditions of the license of that\n+module.  An independent module is a module which is not derived from\n+or based on this library.  If you modify this library, you may extend\n+this exception to your version of the library, but you are not\n+obligated to do so.  If you do not wish to do so, delete this\n+exception statement from your version. */\n+\n+\n+package gnu.java.awt;\n+\n+import java.awt.peer.WindowPeer;\n+\n+/**\n+ * This interface defines a method for creating embedded windows.\n+ *\n+ * All classes inherited from java.awt.Toolkit that implement this interface\n+ * are assumed to support embedded windows. To embed the real embedded window\n+ * you need to use gnu.java.awt.EmbeddedWindow.\n+ *\n+ * @see gnu.java.awt.EmbeddedWindow\n+ * @see java.awt.Toolkit\n+ *\n+ * @author Michael Koch <konqueror@gmx.de>\n+ */\n+public interface EmbeddedWindowSupport\n+{\n+  /**\n+   * This method creates an embedded window in an application.\n+   *\n+   * @param window_id The native handle of a screen area to display an\n+   * AWT window in it.\n+   * @param width The width of the screen area.\n+   * @param height The height of the screen area.\n+   */\n+  public WindowPeer createEmbeddedWindow (int window_id,\n+\t\t\t\t\t  int width, int height);\n+}"}, {"sha": "0811d4154823af1958f587c00a6952d3da47a525", "filename": "libjava/gnu/java/awt/natEmbeddedWindow.cc", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2Fgnu%2Fjava%2Fawt%2FnatEmbeddedWindow.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2Fgnu%2Fjava%2Fawt%2FnatEmbeddedWindow.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fawt%2FnatEmbeddedWindow.cc?ref=754a9012a41d64efa3e848e3e9464925d1d09cb4", "patch": "@@ -0,0 +1,16 @@\n+/* Copyright (C) 2003  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+#include <gnu/java/awt/EmbeddedWindow.h>\n+#include <java/awt/Window.h>\n+\n+::java::awt::Window*\n+gnu::java::awt::EmbeddedWindow::create (jint window_id, jint width, jint height)\n+{\n+  return new ::java::awt::Window (window_id, width, height);\n+}"}, {"sha": "c286381c36a856a4b88fdd2e18617dd38e610727", "filename": "libjava/java/awt/Window.java", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2Fjava%2Fawt%2FWindow.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/754a9012a41d64efa3e848e3e9464925d1d09cb4/libjava%2Fjava%2Fawt%2FWindow.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Fawt%2FWindow.java?ref=754a9012a41d64efa3e848e3e9464925d1d09cb4", "patch": "@@ -38,6 +38,7 @@\n \n package java.awt;\n \n+import gnu.java.awt.EmbeddedWindowSupport;\n import java.awt.event.WindowEvent;\n import java.awt.event.WindowFocusListener;\n import java.awt.event.WindowListener;\n@@ -93,6 +94,19 @@ public class Window extends Container implements Accessible\n     graphicsConfiguration = gc;\n   }\n \n+  Window(int window_id, int width, int height)\n+  {\n+    this();\n+\n+    Toolkit tk = getToolkit();\n+    if (!(tk instanceof EmbeddedWindowSupport))\n+      throw new UnsupportedOperationException\n+\t(\"Embedded windows not supported by the current peers: \" + tk.getClass());\n+    \n+    peer = ((EmbeddedWindowSupport) getToolkit())\n+\t    .createEmbeddedWindow (window_id, width, height);\n+  }\n+    \n   /**\n    * Initializes a new instance of <code>Window</code> with the specified\n    * parent.  The window will initially be invisible."}]}