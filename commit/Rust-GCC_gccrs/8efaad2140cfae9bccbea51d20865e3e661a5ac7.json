{"sha": "8efaad2140cfae9bccbea51d20865e3e661a5ac7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGVmYWFkMjE0MGNmYWU5YmNjYmVhNTFkMjA4NjVlM2U2NjFhNWFjNw==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-04-29T07:37:14Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-04-29T07:37:14Z"}, "message": "Deflater.java, [...]: Partly merged with classpath.\n\n2003-04-29  Michael Koch  <konqueror@gmx.de>\n\n\t* java/util/zip/Deflater.java,\n\tjava/util/zip/DeflaterOutputStream.java:\n\tPartly merged with classpath.\n\nFrom-SVN: r66207", "tree": {"sha": "e7ee5b6202a3ea298aed979b4bf46e9121359c4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e7ee5b6202a3ea298aed979b4bf46e9121359c4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8efaad2140cfae9bccbea51d20865e3e661a5ac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efaad2140cfae9bccbea51d20865e3e661a5ac7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8efaad2140cfae9bccbea51d20865e3e661a5ac7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8efaad2140cfae9bccbea51d20865e3e661a5ac7/comments", "author": null, "committer": null, "parents": [{"sha": "29f4feceaa01049baed47c24a98be0192f2a54c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29f4feceaa01049baed47c24a98be0192f2a54c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29f4feceaa01049baed47c24a98be0192f2a54c5"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "21c66dba3f64ec2ca30246ef0d6fbff1f48883c6", "filename": "libjava/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efaad2140cfae9bccbea51d20865e3e661a5ac7/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efaad2140cfae9bccbea51d20865e3e661a5ac7/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8efaad2140cfae9bccbea51d20865e3e661a5ac7", "patch": "@@ -1,3 +1,9 @@\n+2003-04-29  Michael Koch  <konqueror@gmx.de>\n+\n+\t* java/util/zip/Deflater.java,\n+\tjava/util/zip/DeflaterOutputStream.java:\n+\tPartly merged with classpath.\n+\n 2003-04-27  Tom Tromey  <tromey@redhat.com>\n \n \t* java/lang/natString.cc (_Jv_AllocString): Initialize"}, {"sha": "ce3dc0ba52f040d7327d9ad350d4d8fd53861228", "filename": "libjava/java/util/zip/Deflater.java", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efaad2140cfae9bccbea51d20865e3e661a5ac7/libjava%2Fjava%2Futil%2Fzip%2FDeflater.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efaad2140cfae9bccbea51d20865e3e661a5ac7/libjava%2Fjava%2Futil%2Fzip%2FDeflater.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FDeflater.java?ref=8efaad2140cfae9bccbea51d20865e3e661a5ac7", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -51,15 +51,41 @@\n \n public class Deflater\n {\n+  /**\n+   * The best and slowest compression level.  This tries to find very\n+   * long and distant string repetitions.  \n+   */\n   public static final int BEST_COMPRESSION = 9;\n+  /**\n+   * The worst but fastest compression level.  \n+   */\n   public static final int BEST_SPEED = 1;\n+  /**\n+   * The default compression level.\n+   */\n   public static final int DEFAULT_COMPRESSION = -1;\n+  /**\n+   * This level won't compress at all but output uncompressed blocks.\n+   */\n   public static final int NO_COMPRESSION = 0;\n \n+  /**\n+   * The default strategy.\n+   */\n   public static final int DEFAULT_STRATEGY = 0;\n   public static final int FILTERED = 1;\n+\n+  /** \n+   * This strategy will not look for string repetitions at all.  It\n+   * only encodes with Huffman trees (which means, that more common\n+   * characters get a smaller encoding.  \n+   */\n   public static final int HUFFMAN_ONLY = 2;\n \n+  /**\n+   * The compression method.  This is the only method supported so far.\n+   * There is no need to use this constant at all.\n+   */\n   public static final int DEFLATED = 8;\n \n   public int deflate (byte[] buf)"}, {"sha": "755d8e71420e965d6b3d99e28842b3069c0af7d9", "filename": "libjava/java/util/zip/DeflaterOutputStream.java", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8efaad2140cfae9bccbea51d20865e3e661a5ac7/libjava%2Fjava%2Futil%2Fzip%2FDeflaterOutputStream.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8efaad2140cfae9bccbea51d20865e3e661a5ac7/libjava%2Fjava%2Futil%2Fzip%2FDeflaterOutputStream.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Futil%2Fzip%2FDeflaterOutputStream.java?ref=8efaad2140cfae9bccbea51d20865e3e661a5ac7", "patch": "@@ -7,7 +7,7 @@\n it under the terms of the GNU General Public License as published by\n the Free Software Foundation; either version 2, or (at your option)\n any later version.\n- \n+\n GNU Classpath is distributed in the hope that it will be useful, but\n WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n@@ -41,16 +41,22 @@\n import java.io.OutputStream;\n import java.io.IOException;\n \n-/**\n- * @author Tom Tromey\n- * @date May 17, 1999\n- */\n-\n /* Written using on-line Java Platform 1.2 API Specification\n  * and JCL book.\n  * Believed complete and correct.\n  */\n \n+/**\n+ * This is a special FilterOutputStream deflating the bytes that are\n+ * written through it.  It uses the Deflater for deflating.\n+ *\n+ * A special thing to be noted is that flush() doesn't flush\n+ * everything in Sun's JDK, but it does so in jazzlib. This is because\n+ * Sun's Deflater doesn't have a way to flush() everything, without\n+ * finishing the stream.\n+ *\n+ * @author Tom Tromey, Jochen Hoenicke\n+ */\n public class DeflaterOutputStream extends FilterOutputStream\n {\n   public void close () throws IOException"}]}