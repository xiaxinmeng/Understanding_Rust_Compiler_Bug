{"sha": "c0cb38c28e6e667595a42caf0bc679d6029de06a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzBjYjM4YzI4ZTZlNjY3NTk1YTQyY2FmMGJjNjc5ZDYwMjlkZTA2YQ==", "commit": {"author": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-03-08T05:53:09Z"}, "committer": {"name": "Fran\u00e7ois Dumont", "email": "fdumont@gcc.gnu.org", "date": "2019-03-08T05:53:09Z"}, "message": "re PR libstdc++/89477 (Incorrect CTAD deduction guides for set and multiset)\n\n2019-03-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n\n\tPR libstdc++/89477\n\t* include/debug/map.h (map): Use _RequireNotAllocator to constrain\n\tparameters in deduction guides.\n\t* include/debug/multimap.h (multimap): Likewise.\n\t* include/debug/set.h (multimap): Likewise.\n\t* include/debug/multiset.h (multimap): Likewise.\n\t* include/debug/unordered_map (unordered_map): Likewise.\n\t(unordered_multimap): Likewise.\n\t* include/debug/unordered_set (unordered_set): Likewise.\n\t(unordered_multiset): Likewise.\n\nFrom-SVN: r269479", "tree": {"sha": "64e7912f5b72825ba6342756ef1b5bf1d0495a8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/64e7912f5b72825ba6342756ef1b5bf1d0495a8e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c0cb38c28e6e667595a42caf0bc679d6029de06a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0cb38c28e6e667595a42caf0bc679d6029de06a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c0cb38c28e6e667595a42caf0bc679d6029de06a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c0cb38c28e6e667595a42caf0bc679d6029de06a/comments", "author": null, "committer": null, "parents": [{"sha": "20a4550ce01ab79ac7cd3412ce669cb9a032ca5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20a4550ce01ab79ac7cd3412ce669cb9a032ca5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20a4550ce01ab79ac7cd3412ce669cb9a032ca5e"}], "stats": {"total": 206, "additions": 125, "deletions": 81}, "files": [{"sha": "9b876d0307dcca443454811db50803b3add219be", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=c0cb38c28e6e667595a42caf0bc679d6029de06a", "patch": "@@ -1,5 +1,16 @@\n 2019-03-08  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n+\tPR libstdc++/89477\n+\t* include/debug/map.h (map): Use _RequireNotAllocator to constrain\n+\tparameters in deduction guides.\n+\t* include/debug/multimap.h (multimap): Likewise.\n+\t* include/debug/set.h (multimap): Likewise.\n+\t* include/debug/multiset.h (multimap): Likewise.\n+\t* include/debug/unordered_map (unordered_map): Likewise.\n+\t(unordered_multimap): Likewise.\n+\t* include/debug/unordered_set (unordered_set): Likewise.\n+\t(unordered_multiset): Likewise.\n+\n \tPR libstdc++/89608\n \t* include/debug/unordered_map (unordered_map<>::_M_check_rehashed):\n \tInvalidate all iterators in case of rehash."}, {"sha": "80ca1bebbd2e3a027ba170c82e4d38aded34379d", "filename": "libstdc++-v3/include/debug/map.h", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmap.h?ref=c0cb38c28e6e667595a42caf0bc679d6029de06a", "patch": "@@ -700,34 +700,36 @@ namespace __debug\n \n #if __cpp_deduction_guides >= 201606\n \n- template<typename _InputIterator,\n-\t  typename _Compare = less<__iter_key_t<_InputIterator>>,\n-\t  typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n-\t  typename = _RequireInputIter<_InputIterator>,\n-\t  typename = _RequireAllocator<_Allocator>>\n-  map(_InputIterator, _InputIterator,\n-      _Compare = _Compare(), _Allocator = _Allocator())\n-  -> map<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,\n-\t _Compare, _Allocator>;\n-\n- template<typename _Key, typename _Tp, typename _Compare = less<_Key>,\n-\t  typename _Allocator = allocator<pair<const _Key, _Tp>>,\n-\t  typename = _RequireAllocator<_Allocator>>\n-   map(initializer_list<pair<_Key, _Tp>>,\n-       _Compare = _Compare(), _Allocator = _Allocator())\n-   -> map<_Key, _Tp, _Compare, _Allocator>;\n-\n- template <typename _InputIterator, typename _Allocator,\n+  template<typename _InputIterator,\n+\t   typename _Compare = less<__iter_key_t<_InputIterator>>,\n+\t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n \t   typename = _RequireAllocator<_Allocator>>\n-   map(_InputIterator, _InputIterator, _Allocator)\n-   -> map<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,\n-\t  less<__iter_key_t<_InputIterator>>, _Allocator>;\n-\n- template<typename _Key, typename _Tp, typename _Allocator,\n-\t  typename = _RequireAllocator<_Allocator>>\n-   map(initializer_list<pair<_Key, _Tp>>, _Allocator)\n-   -> map<_Key, _Tp, less<_Key>, _Allocator>;\n+    map(_InputIterator, _InputIterator,\n+\t_Compare = _Compare(), _Allocator = _Allocator())\n+    -> map<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,\n+\t   _Compare, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Compare = less<_Key>,\n+\t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    map(initializer_list<pair<_Key, _Tp>>,\n+\t_Compare = _Compare(), _Allocator = _Allocator())\n+    -> map<_Key, _Tp, _Compare, _Allocator>;\n+\n+  template <typename _InputIterator, typename _Allocator,\n+\t    typename = _RequireInputIter<_InputIterator>,\n+\t    typename = _RequireAllocator<_Allocator>>\n+    map(_InputIterator, _InputIterator, _Allocator)\n+    -> map<__iter_key_t<_InputIterator>, __iter_val_t<_InputIterator>,\n+\t   less<__iter_key_t<_InputIterator>>, _Allocator>;\n+\n+  template<typename _Key, typename _Tp, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    map(initializer_list<pair<_Key, _Tp>>, _Allocator)\n+    -> map<_Key, _Tp, less<_Key>, _Allocator>;\n \n #endif\n "}, {"sha": "560aa7dda9512ae01cddb849c1a0008f3c172b60", "filename": "libstdc++-v3/include/debug/multimap.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultimap.h?ref=c0cb38c28e6e667595a42caf0bc679d6029de06a", "patch": "@@ -585,6 +585,7 @@ namespace __debug\n \t   typename _Compare = less<__iter_key_t<_InputIterator>>,\n \t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n \t   typename = _RequireAllocator<_Allocator>>\n     multimap(_InputIterator, _InputIterator,\n \t     _Compare = _Compare(), _Allocator = _Allocator())\n@@ -593,6 +594,7 @@ namespace __debug\n \n   template<typename _Key, typename _Tp, typename _Compare = less<_Key>,\n \t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n \t   typename = _RequireAllocator<_Allocator>>\n     multimap(initializer_list<pair<_Key, _Tp>>,\n \t     _Compare = _Compare(), _Allocator = _Allocator())"}, {"sha": "8fb11f871ac9d38640292340e7fe13595c7f7fc5", "filename": "libstdc++-v3/include/debug/multiset.h", "status": "modified", "additions": 27, "deletions": 25, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fmultiset.h?ref=c0cb38c28e6e667595a42caf0bc679d6029de06a", "patch": "@@ -555,32 +555,34 @@ namespace __debug\n \t   typename _Allocator =\n \t     allocator<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n \t   typename = _RequireAllocator<_Allocator>>\n-   multiset(_InputIterator, _InputIterator,\n-\t    _Compare = _Compare(), _Allocator = _Allocator())\n-   -> multiset<typename iterator_traits<_InputIterator>::value_type,\n-\t       _Compare, _Allocator>;\n-\n- template<typename _Key,\n-\t  typename _Compare = less<_Key>,\n-\t  typename _Allocator = allocator<_Key>,\n-\t  typename = _RequireAllocator<_Allocator>>\n-   multiset(initializer_list<_Key>,\n-\t    _Compare = _Compare(), _Allocator = _Allocator())\n-   -> multiset<_Key, _Compare, _Allocator>;\n-\n- template<typename _InputIterator, typename _Allocator,\n-\t  typename = _RequireInputIter<_InputIterator>,\n-\t  typename = _RequireAllocator<_Allocator>>\n-   multiset(_InputIterator, _InputIterator, _Allocator)\n-   -> multiset<typename iterator_traits<_InputIterator>::value_type,\n-\t       less<typename iterator_traits<_InputIterator>::value_type>,\n-\t       _Allocator>;\n-\n- template<typename _Key, typename _Allocator,\n-\t  typename = _RequireAllocator<_Allocator>>\n-   multiset(initializer_list<_Key>, _Allocator)\n-   -> multiset<_Key, less<_Key>, _Allocator>;\n+    multiset(_InputIterator, _InputIterator,\n+\t     _Compare = _Compare(), _Allocator = _Allocator())\n+    -> multiset<typename iterator_traits<_InputIterator>::value_type,\n+\t\t_Compare, _Allocator>;\n+\n+  template<typename _Key,\n+\t   typename _Compare = less<_Key>,\n+\t   typename _Allocator = allocator<_Key>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multiset(initializer_list<_Key>,\n+\t     _Compare = _Compare(), _Allocator = _Allocator())\n+    -> multiset<_Key, _Compare, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multiset(_InputIterator, _InputIterator, _Allocator)\n+    -> multiset<typename iterator_traits<_InputIterator>::value_type,\n+\t\tless<typename iterator_traits<_InputIterator>::value_type>,\n+\t\t_Allocator>;\n+\n+  template<typename _Key, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    multiset(initializer_list<_Key>, _Allocator)\n+    -> multiset<_Key, less<_Key>, _Allocator>;\n \n #endif\n "}, {"sha": "9f16a9190b85431ea7d7cfd5fd020eba037cb024", "filename": "libstdc++-v3/include/debug/set.h", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Fset.h?ref=c0cb38c28e6e667595a42caf0bc679d6029de06a", "patch": "@@ -567,31 +567,33 @@ namespace __debug\n \t   typename _Allocator =\n \t     allocator<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n \t   typename = _RequireAllocator<_Allocator>>\n     set(_InputIterator, _InputIterator,\n-       _Compare = _Compare(), _Allocator = _Allocator())\n-   -> set<typename iterator_traits<_InputIterator>::value_type,\n-\t  _Compare, _Allocator>;\n-\n- template<typename _Key, typename _Compare = less<_Key>,\n-\t  typename _Allocator = allocator<_Key>,\n-\t  typename = _RequireAllocator<_Allocator>>\n-   set(initializer_list<_Key>,\n-       _Compare = _Compare(), _Allocator = _Allocator())\n-   -> set<_Key, _Compare, _Allocator>;\n-\n- template<typename _InputIterator, typename _Allocator,\n-\t  typename = _RequireInputIter<_InputIterator>,\n-\t  typename = _RequireAllocator<_Allocator>>\n-   set(_InputIterator, _InputIterator, _Allocator)\n-   -> set<typename iterator_traits<_InputIterator>::value_type,\n-\t  less<typename iterator_traits<_InputIterator>::value_type>,\n-\t  _Allocator>;\n-\n- template<typename _Key, typename _Allocator,\n-\t  typename = _RequireAllocator<_Allocator>>\n-   set(initializer_list<_Key>, _Allocator)\n-   -> set<_Key, less<_Key>, _Allocator>;\n+\t_Compare = _Compare(), _Allocator = _Allocator())\n+    -> set<typename iterator_traits<_InputIterator>::value_type,\n+\t   _Compare, _Allocator>;\n+\n+  template<typename _Key, typename _Compare = less<_Key>,\n+\t   typename _Allocator = allocator<_Key>,\n+\t   typename = _RequireNotAllocator<_Compare>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    set(initializer_list<_Key>,\n+\t_Compare = _Compare(), _Allocator = _Allocator())\n+    -> set<_Key, _Compare, _Allocator>;\n+\n+  template<typename _InputIterator, typename _Allocator,\n+\t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    set(_InputIterator, _InputIterator, _Allocator)\n+    -> set<typename iterator_traits<_InputIterator>::value_type,\n+\t   less<typename iterator_traits<_InputIterator>::value_type>,\n+\t   _Allocator>;\n+\n+  template<typename _Key, typename _Allocator,\n+\t   typename = _RequireAllocator<_Allocator>>\n+    set(initializer_list<_Key>, _Allocator)\n+    -> set<_Key, less<_Key>, _Allocator>;\n \n #endif\n "}, {"sha": "d844ee9fa0e0f81133955dce56cd4d11ab937114", "filename": "libstdc++-v3/include/debug/unordered_map", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_map?ref=c0cb38c28e6e667595a42caf0bc679d6029de06a", "patch": "@@ -651,6 +651,8 @@ namespace __debug\n \t   typename _Pred = equal_to<__iter_key_t<_InputIterator>>,\n \t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_map(_InputIterator, _InputIterator,\n \t\t  typename unordered_map<int, int>::size_type = {},\n@@ -662,6 +664,8 @@ namespace __debug\n   template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n \t   typename _Pred = equal_to<_Key>,\n \t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_map(initializer_list<pair<_Key, _Tp>>,\n \t\t  typename unordered_map<int, int>::size_type = {},\n@@ -691,6 +695,7 @@ namespace __debug\n \n   template<typename _InputIterator, typename _Hash, typename _Allocator,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_map(_InputIterator, _InputIterator,\n \t\t  typename unordered_map<int, int>::size_type,\n@@ -712,6 +717,7 @@ namespace __debug\n     -> unordered_map<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;\n \n   template<typename _Key, typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_map(initializer_list<pair<_Key, _Tp>>,\n \t\t  typename unordered_map<int, int>::size_type,\n@@ -752,7 +758,8 @@ namespace __debug\n       : public __gnu_debug::_Safe_container<\n \tunordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>, _Alloc,\n \t__gnu_debug::_Safe_unordered_container>,\n-\tpublic _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash, _Pred, _Alloc>\n+\tpublic _GLIBCXX_STD_C::unordered_multimap<\n+\t_Key, _Tp, _Hash, _Pred, _Alloc>\n     {\n       typedef _GLIBCXX_STD_C::unordered_multimap<_Key, _Tp, _Hash,\n \t\t\t\t\t\t _Pred, _Alloc>\t\t_Base;\n@@ -1250,6 +1257,8 @@ namespace __debug\n \t   typename _Pred = equal_to<__iter_key_t<_InputIterator>>,\n \t   typename _Allocator = allocator<__iter_to_alloc_t<_InputIterator>>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multimap(_InputIterator, _InputIterator,\n \t\t       unordered_multimap<int, int>::size_type = {},\n@@ -1262,6 +1271,8 @@ namespace __debug\n   template<typename _Key, typename _Tp, typename _Hash = hash<_Key>,\n \t   typename _Pred = equal_to<_Key>,\n \t   typename _Allocator = allocator<pair<const _Key, _Tp>>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multimap(initializer_list<pair<_Key, _Tp>>,\n \t\t       unordered_multimap<int, int>::size_type = {},\n@@ -1290,6 +1301,7 @@ namespace __debug\n \n   template<typename _InputIterator, typename _Hash, typename _Allocator,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multimap(_InputIterator, _InputIterator,\n \t\t       unordered_multimap<int, int>::size_type, _Hash,\n@@ -1311,6 +1323,7 @@ namespace __debug\n     -> unordered_multimap<_Key, _Tp, hash<_Key>, equal_to<_Key>, _Allocator>;\n \n   template<typename _Key, typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multimap(initializer_list<pair<_Key, _Tp>>,\n \t\t       unordered_multimap<int, int>::size_type,"}, {"sha": "ecc084e3846b75f4ccb622bcf7ead4546980fddd", "filename": "libstdc++-v3/include/debug/unordered_set", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c0cb38c28e6e667595a42caf0bc679d6029de06a/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fdebug%2Funordered_set?ref=c0cb38c28e6e667595a42caf0bc679d6029de06a", "patch": "@@ -533,12 +533,14 @@ namespace __debug\n \n   template<typename _InputIterator,\n \t   typename _Hash =\n-\t   hash<typename iterator_traits<_InputIterator>::value_type>,\n+\t     hash<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename _Pred =\n-\t   equal_to<typename iterator_traits<_InputIterator>::value_type>,\n+\t     equal_to<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename _Allocator =\n-\t   allocator<typename iterator_traits<_InputIterator>::value_type>,\n+\t     allocator<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_set(_InputIterator, _InputIterator,\n \t\t  unordered_set<int>::size_type = {},\n@@ -549,6 +551,8 @@ namespace __debug\n   template<typename _Tp, typename _Hash = hash<_Tp>,\n \t   typename _Pred = equal_to<_Tp>,\n \t   typename _Allocator = allocator<_Tp>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_set(initializer_list<_Tp>,\n \t\t  unordered_set<int>::size_type = {},\n@@ -569,6 +573,7 @@ namespace __debug\n \n   template<typename _InputIterator, typename _Hash, typename _Allocator,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_set(_InputIterator, _InputIterator,\n \t\t  unordered_set<int>::size_type,\n@@ -586,6 +591,7 @@ namespace __debug\n     -> unordered_set<_Tp, hash<_Tp>, equal_to<_Tp>, _Allocator>;\n \n   template<typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_set(initializer_list<_Tp>,\n \t\t  unordered_set<int>::size_type, _Hash, _Allocator)\n@@ -1087,12 +1093,14 @@ namespace __debug\n \n   template<typename _InputIterator,\n \t   typename _Hash =\n-\t   hash<typename iterator_traits<_InputIterator>::value_type>,\n+\t     hash<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename _Pred =\n-\t   equal_to<typename iterator_traits<_InputIterator>::value_type>,\n+\t     equal_to<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename _Allocator =\n-\t   allocator<typename iterator_traits<_InputIterator>::value_type>,\n+\t     allocator<typename iterator_traits<_InputIterator>::value_type>,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multiset(_InputIterator, _InputIterator,\n \t\t       unordered_multiset<int>::size_type = {},\n@@ -1104,6 +1112,8 @@ namespace __debug\n   template<typename _Tp, typename _Hash = hash<_Tp>,\n \t   typename _Pred = equal_to<_Tp>,\n \t   typename _Allocator = allocator<_Tp>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n+\t   typename = _RequireNotAllocator<_Pred>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multiset(initializer_list<_Tp>,\n \t\t       unordered_multiset<int>::size_type = {},\n@@ -1125,6 +1135,7 @@ namespace __debug\n \n   template<typename _InputIterator, typename _Hash, typename _Allocator,\n \t   typename = _RequireInputIter<_InputIterator>,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multiset(_InputIterator, _InputIterator,\n \t\t       unordered_multiset<int>::size_type,\n@@ -1144,6 +1155,7 @@ namespace __debug\n     -> unordered_multiset<_Tp, hash<_Tp>, equal_to<_Tp>, _Allocator>;\n \n   template<typename _Tp, typename _Hash, typename _Allocator,\n+\t   typename = _RequireNotAllocatorOrIntegral<_Hash>,\n \t   typename = _RequireAllocator<_Allocator>>\n     unordered_multiset(initializer_list<_Tp>,\n \t\t       unordered_multiset<int>::size_type, _Hash, _Allocator)"}]}