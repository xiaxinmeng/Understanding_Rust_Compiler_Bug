{"sha": "f7e70894412aa334b68cceb241496c302c663dd9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdlNzA4OTQ0MTJhYTMzNGI2OGNjZWIyNDE0OTZjMzAyYzY2M2RkOQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard@codesourcery.com", "date": "2007-03-06T09:00:00Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2007-03-06T09:00:00Z"}, "message": "m68k-protos.h (output_sibcall): Declare.\n\ngcc/\n\t* config/m68k/m68k-protos.h (output_sibcall): Declare.\n\t(mips_expand_epilogue): Add a bool parameter.\n\t(m68k_legitimize_sibcall_address): Declare.\n\t* config/m68k/m68k.c (TARGET_FUNCTION_OK_FOR_SIBCALL): Define.\n\t(m68k_expand_epilogue): Add a parameter to select between sibling\n\tand normal epilogues.  Only generate a return for the latter.\n\t(m68k_ok_for_sibcall_p): New function.\n\t(m68k_legitimize_sibcall_address, output_sibcall): New functions.\n\t* config/m68k/m68k.md (sibcall, *sibcall): New patterns.\n\t(sibcall_value, *sibcall_value): Likewise.\n\t(*call, *call_value): Require !SIBLING_CALL_P.\n\t(epilogue): Update call to m68k_expand_epilogue.\n\t(sibcall_epilogue): New pattern.\n\t* config/m68k/predicates.md (const_call_operand): Say that this\n\tpredicate applies to sibling calls too.\n\t(sibcall_operand): New predicate.\n\nFrom-SVN: r122607", "tree": {"sha": "42894032f4078acc16635d591497216eb2419087", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42894032f4078acc16635d591497216eb2419087"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7e70894412aa334b68cceb241496c302c663dd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e70894412aa334b68cceb241496c302c663dd9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7e70894412aa334b68cceb241496c302c663dd9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e70894412aa334b68cceb241496c302c663dd9/comments", "author": null, "committer": null, "parents": [{"sha": "31c5b44477907faf937f859808c9aca9879a96f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/31c5b44477907faf937f859808c9aca9879a96f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/31c5b44477907faf937f859808c9aca9879a96f4"}], "stats": {"total": 126, "additions": 118, "deletions": 8}, "files": [{"sha": "ce1caab046e925a7d7bb525acb6853126b14ced8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e70894412aa334b68cceb241496c302c663dd9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e70894412aa334b68cceb241496c302c663dd9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f7e70894412aa334b68cceb241496c302c663dd9", "patch": "@@ -1,3 +1,22 @@\n+2007-03-06  Richard Sandiford  <richard@codesourcery.com>\n+\n+\t* config/m68k/m68k-protos.h (output_sibcall): Declare.\n+\t(mips_expand_epilogue): Add a bool parameter.\n+\t(m68k_legitimize_sibcall_address): Declare.\n+\t* config/m68k/m68k.c (TARGET_FUNCTION_OK_FOR_SIBCALL): Define.\n+\t(m68k_expand_epilogue): Add a parameter to select between sibling\n+\tand normal epilogues.  Only generate a return for the latter.\n+\t(m68k_ok_for_sibcall_p): New function.\n+\t(m68k_legitimize_sibcall_address, output_sibcall): New functions.\n+\t* config/m68k/m68k.md (sibcall, *sibcall): New patterns.\n+\t(sibcall_value, *sibcall_value): Likewise.\n+\t(*call, *call_value): Require !SIBLING_CALL_P.\n+\t(epilogue): Update call to m68k_expand_epilogue.\n+\t(sibcall_epilogue): New pattern.\n+\t* config/m68k/predicates.md (const_call_operand): Say that this\n+\tpredicate applies to sibling calls too.\n+\t(sibcall_operand): New predicate.\n+\n 2007-03-06  Richard Sandiford  <richard@codesourcery.com>\n \n \t* config/m68k/m68k.md (movsf_cf_soft): Provide the same non-mov3q"}, {"sha": "185e7bc8809a7659d6071f99e52b20db7a0ddca7", "filename": "gcc/config/m68k/m68k-protos.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e70894412aa334b68cceb241496c302c663dd9/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e70894412aa334b68cceb241496c302c663dd9/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k-protos.h?ref=f7e70894412aa334b68cceb241496c302c663dd9", "patch": "@@ -42,6 +42,7 @@ extern const char *output_andsi3 (rtx *);\n extern const char *output_iorsi3 (rtx *);\n extern const char *output_xorsi3 (rtx *);\n extern const char *output_call (rtx);\n+extern const char *output_sibcall (rtx);\n extern void output_dbcc_and_branch (rtx *);\n extern int floating_exact_log2 (rtx);\n extern bool strict_low_part_peephole_ok (enum machine_mode mode, rtx first_insn, rtx target);\n@@ -71,10 +72,11 @@ extern bool m68k_regno_mode_ok (int, enum machine_mode);\n extern int flags_in_68881 (void);\n extern void m68k_expand_prologue (void);\n extern bool m68k_use_return_insn (void);\n-extern void m68k_expand_epilogue (void);\n+extern void m68k_expand_epilogue (bool);\n extern void override_options (void);\n extern const char *m68k_cpp_cpu_ident (const char *);\n extern const char *m68k_cpp_cpu_family (const char *);\n extern void init_68881_table (void);\n extern rtx m68k_legitimize_call_address (rtx);\n+extern rtx m68k_legitimize_sibcall_address (rtx);\n extern int m68k_hard_regno_rename_ok(unsigned int, unsigned int);"}, {"sha": "8c99d4f30f8c76ed9e57ee501c7190c4a3e7cb47", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e70894412aa334b68cceb241496c302c663dd9/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e70894412aa334b68cceb241496c302c663dd9/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=f7e70894412aa334b68cceb241496c302c663dd9", "patch": "@@ -146,6 +146,7 @@ static tree m68k_handle_fndecl_attribute (tree *node, tree name,\n \t\t\t\t\t  bool *no_add_attrs);\n static void m68k_compute_frame_layout (void);\n static bool m68k_save_reg (unsigned int regno, bool interrupt_handler);\n+static bool m68k_ok_for_sibcall_p (tree, tree);\n static bool m68k_rtx_costs (rtx, int, int, int *);\n \f\n \n@@ -215,6 +216,9 @@ int m68k_last_compare_had_fp_operands;\n #undef TARGET_CANNOT_FORCE_CONST_MEM\n #define TARGET_CANNOT_FORCE_CONST_MEM m68k_illegitimate_symbolic_constant_p\n \n+#undef TARGET_FUNCTION_OK_FOR_SIBCALL\n+#define TARGET_FUNCTION_OK_FOR_SIBCALL m68k_ok_for_sibcall_p\n+\n static const struct attribute_spec m68k_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req, handler } */\n@@ -1015,15 +1019,16 @@ m68k_use_return_insn (void)\n   return current_frame.offset == 0;\n }\n \n-/* Emit RTL for the \"epilogue\" define_expand.\n+/* Emit RTL for the \"epilogue\" or \"sibcall_epilogue\" define_expand;\n+   SIBCALL_P says which.\n \n    The function epilogue should not depend on the current stack pointer!\n    It should use the frame pointer only, if there is a frame pointer.\n    This is mandatory because of alloca; we also take advantage of it to\n    omit stack adjustments before returning.  */\n \n void\n-m68k_expand_epilogue (void)\n+m68k_expand_epilogue (bool sibcall_p)\n {\n   HOST_WIDE_INT fsize, fsize_with_regs;\n   bool big, restore_from_sp;\n@@ -1181,7 +1186,8 @@ m68k_expand_epilogue (void)\n \t\t\t   stack_pointer_rtx,\n \t\t\t   EH_RETURN_STACKADJ_RTX));\n \n-  emit_insn (gen_rtx_RETURN (VOIDmode));\n+  if (!sibcall_p)\n+    emit_insn (gen_rtx_RETURN (VOIDmode));\n }\n \f\n /* Return true if X is a valid comparison operator for the dbcc \n@@ -1218,6 +1224,16 @@ flags_in_68881 (void)\n   return cc_status.flags & CC_IN_68881;\n }\n \n+/* Implement TARGET_FUNCTION_OK_FOR_SIBCALL_P.  We cannot use sibcalls\n+   for nested functions because we use the static chain register for\n+   indirect calls.  */\n+\n+static bool\n+m68k_ok_for_sibcall_p (tree decl ATTRIBUTE_UNUSED, tree exp)\n+{\n+  return TREE_OPERAND (exp, 2) == NULL;\n+}\n+\n /* Convert X to a legitimate function call memory reference and return the\n    result.  */\n \n@@ -1230,6 +1246,19 @@ m68k_legitimize_call_address (rtx x)\n   return replace_equiv_address (x, force_reg (Pmode, XEXP (x, 0)));\n }\n \n+/* Likewise for sibling calls.  */\n+\n+rtx\n+m68k_legitimize_sibcall_address (rtx x)\n+{\n+  gcc_assert (MEM_P (x));\n+  if (sibcall_operand (XEXP (x, 0), VOIDmode))\n+    return x;\n+\n+  emit_move_insn (gen_rtx_REG (Pmode, STATIC_CHAIN_REGNUM), XEXP (x, 0));\n+  return replace_equiv_address (x, gen_rtx_REG (Pmode, STATIC_CHAIN_REGNUM));\n+}\n+\n /* Output a dbCC; jCC sequence.  Note we do not handle the \n    floating point version of this sequence (Fdbcc).  We also\n    do not handle alternative conditions when CC_NO_OVERFLOW is\n@@ -4013,6 +4042,17 @@ output_call (rtx x)\n     return \"jsr %a0\";\n }\n \n+/* Likewise sibling calls.  */\n+\n+const char *\n+output_sibcall (rtx x)\n+{\n+  if (symbolic_operand (x, VOIDmode))\n+    return m68k_symbolic_jump;\n+  else\n+    return \"jmp %a0\";\n+}\n+\n #ifdef M68K_TARGET_COFF\n \n /* Output assembly to switch to section NAME with attribute FLAGS.  */"}, {"sha": "f983d39cd32ce97be614376ee8f2ed478b646e01", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e70894412aa334b68cceb241496c302c663dd9/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e70894412aa334b68cceb241496c302c663dd9/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=f7e70894412aa334b68cceb241496c302c663dd9", "patch": "@@ -6679,6 +6679,41 @@\n     \"subql #1,%0\\;cmpl #-1,%0\\;jne %l1\";\n })\n \n+(define_expand \"sibcall\"\n+  [(call (match_operand:QI 0 \"memory_operand\" \"\")\n+\t (match_operand:SI 1 \"general_operand\" \"\"))]\n+  \"\"\n+{\n+  operands[0] = m68k_legitimize_sibcall_address (operands[0]);\n+})\n+\n+(define_insn \"*sibcall\"\n+  [(call (mem:QI (match_operand:SI 0 \"sibcall_operand\" \"\"))\n+\t (match_operand:SI 1 \"general_operand\" \"\"))]\n+  \"SIBLING_CALL_P (insn)\"\n+{\n+  return output_sibcall (operands[0]);\n+})\n+\n+(define_expand \"sibcall_value\"\n+  [(set (match_operand 0 \"\" \"\")\n+\t(call (match_operand:QI 1 \"memory_operand\" \"\")\n+\t      (match_operand:SI 2 \"general_operand\" \"\")))]\n+  \"\"\n+{\n+  operands[1] = m68k_legitimize_sibcall_address (operands[1]);\n+})\n+\n+(define_insn \"*sibcall_value\"\n+  [(set (match_operand 0 \"\" \"=rf,rf\")\n+\t(call (mem:QI (match_operand:SI 1 \"sibcall_operand\" \"\"))\n+\t      (match_operand:SI 2 \"general_operand\" \"\")))]\n+  \"SIBLING_CALL_P (insn)\"\n+{\n+  operands[0] = operands[1];\n+  return output_sibcall (operands[0]);\n+})\n+\n ;; Call subroutine with no return value.\n (define_expand \"call\"\n   [(call (match_operand:QI 0 \"memory_operand\" \"\")\n@@ -6693,7 +6728,7 @@\n   [(call (mem:QI (match_operand:SI 0 \"call_operand\" \"a,W\"))\n \t (match_operand:SI 1 \"general_operand\" \"g,g\"))]\n   ;; Operand 1 not really used on the m68000.\n-  \"\"\n+  \"!SIBLING_CALL_P (insn)\"\n {\n   return output_call (operands[0]);\n })\n@@ -6715,7 +6750,7 @@\n \t(call (mem:QI (match_operand:SI 1 \"call_operand\" \"a,W\"))\n \t      (match_operand:SI 2 \"general_operand\" \"g,g\")))]\n   ;; Operand 2 not really used on the m68000.\n-  \"\"\n+  \"!SIBLING_CALL_P (insn)\"\n {\n   operands[0] = operands[1];\n   return output_call (operands[0]);\n@@ -6774,7 +6809,15 @@\n   [(return)]\n   \"\"\n {\n-  m68k_expand_epilogue ();\n+  m68k_expand_epilogue (false);\n+  DONE;\n+})\n+\n+(define_expand \"sibcall_epilogue\"\n+  [(return)]\n+  \"\"\n+{\n+  m68k_expand_epilogue (true);\n   DONE;\n })\n "}, {"sha": "ae091f181ed0571cf79e1c3e95c098e8f347bde0", "filename": "gcc/config/m68k/predicates.md", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e70894412aa334b68cceb241496c302c663dd9/gcc%2Fconfig%2Fm68k%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e70894412aa334b68cceb241496c302c663dd9/gcc%2Fconfig%2Fm68k%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fpredicates.md?ref=f7e70894412aa334b68cceb241496c302c663dd9", "patch": "@@ -159,7 +159,7 @@\n     }\n })\n \n-;; A constant that can be used the address in a call insn.\n+;; A constant that can be used the address in a call or sibcall insn.\n (define_predicate \"const_call_operand\"\n   (ior (match_operand 0 \"const_int_operand\")\n        (and (match_test \"m68k_symbolic_call != NULL\")\n@@ -170,6 +170,12 @@\n   (ior (match_operand 0 \"const_call_operand\")\n        (match_operand 0 \"register_operand\")))\n \n+;; An operand that can be used as the address in a sibcall insn.\n+(define_predicate \"sibcall_operand\"\n+  (ior (match_operand 0 \"const_call_operand\")\n+       (and (match_code \"reg\")\n+\t    (match_test \"REGNO (op) == STATIC_CHAIN_REGNUM\"))))\n+\n ;; TODO: Add a comment here.\n \n (define_predicate \"post_inc_operand\""}]}