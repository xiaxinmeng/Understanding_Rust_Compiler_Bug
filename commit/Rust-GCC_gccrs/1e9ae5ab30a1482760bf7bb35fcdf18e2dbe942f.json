{"sha": "1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWU5YWU1YWIzMGExNDgyNzYwYmY3YmIzNWZjZGYxOGUyZGJlOTQyZg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-06-28T18:33:54Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-06-28T18:33:54Z"}, "message": "re PR tree-optimization/40550 (Segmentation fault caused by alignment error in sse code)\n\n\tPR tree-optimization/40550\n\t* tree-vect-generic.c (expand_vector_operations_1): Compute in\n\tvector_compute_type only when the size of vector_compute_type is\n\tless than the size of type.\n\ntestsuite/ChangeLog:\n\n\tPR tree-optimization/40550\n\t* gcc.dg/pr40550.c: New test.\n\nFrom-SVN: r149038", "tree": {"sha": "4c7d57ca3c9ac8e23c6f7cc8ce6df494f71bc272", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c7d57ca3c9ac8e23c6f7cc8ce6df494f71bc272"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f/comments", "author": null, "committer": null, "parents": [{"sha": "c703e618f89b29ed9ef55d53e08212bb46548810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c703e618f89b29ed9ef55d53e08212bb46548810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c703e618f89b29ed9ef55d53e08212bb46548810"}], "stats": {"total": 63, "additions": 54, "deletions": 9}, "files": [{"sha": "e6a5ceac7a3ee7b2703fd33856778bf492df684f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f", "patch": "@@ -1,3 +1,10 @@\n+2009-06-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/40550\n+\t* tree-vect-generic.c (expand_vector_operations_1): Compute in\n+\tvector_compute_type only when the size of vector_compute_type is\n+\tless than the size of type.\n+\n 2009-06-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* fold-const.c (contains_label_1): Fix comments.\n@@ -121,7 +128,7 @@\n \tproblem_MD, df_md_add_problem): New.\n \t* df.h (DF_MD, DF_MD_BB_INFO, struct df_md_bb_info, df_md,\n \tdf_md_get_bb_info): New.\n-\tDF_LAST_PROBLEM_PLUS1): Adjust.\n+\t(DF_LAST_PROBLEM_PLUS1): Adjust.\n \n \t* Makefile.in (fwprop.o): Include domwalk.h.\n \t* fwprop.c: Include domwalk.h.\n@@ -271,8 +278,7 @@\n \n 2009-06-26  Richard Guenther  <rguenther@suse.de>\n \n-\t* tree-ssa-structalias.c (do_ds_constraint): Simplify escape\n-\thandling.\n+\t* tree-ssa-structalias.c (do_ds_constraint): Simplify escape handling.\n \n 2009-06-26  Steven Bosscher  <steven@gcc.gnu.org>\n \n@@ -406,8 +412,7 @@\n \t* config/avr/avr.md (movmemhi): Use add_reg_note.\n \t(andhi3, andsi3): Don't use AS2 with \"and\".\n \t(iorhi3, iorsi3): Don't use AS2 with \"or\".\n-\t* config/avr/avr-protos.h (class_likely_spilled_p): Update\n-\tdeclaration.\n+\t* config/avr/avr-protos.h (class_likely_spilled_p): Update declaration.\n \t* config/crx/crx.c: Include \"df.h\".\n \t(crx_attribute_table): Make static.\n \t* config/m32r/m32r.c: Include \"df.h\".\n@@ -635,8 +640,7 @@\n \tHARD_REGNO_NREGS, to calculate the number of registers each hard\n \tregister takes for each type.\n \t(rs6000_debug_reg_print): New function for -mdebug=reg support.\n-\t(rs6000_debug_vector_unit): New array, map rs6000_vector to\n-\tstring.\n+\t(rs6000_debug_vector_unit): New array, map rs6000_vector to string.\n \t(+rs6000_init_hard_regno_mode_ok): New function, move calculation\n \tof HARD_REGNO_NREGS, CLASS_MAX_NREGS, REGNO_REG_CLASS, and vector\n \tunit information here so it is calculated once at compiler startup"}, {"sha": "80fe78b7073367575ece6c4bbae8d18d5a57dac7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f", "patch": "@@ -1,3 +1,8 @@\n+2009-06-28  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR tree-optimization/40550\n+\t* gcc.dg/pr40550.c: New test.\n+\n 2009-06-28  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/overflow_sum2.adb: New test"}, {"sha": "27935ab005a9fb373e23a5f6af4b80ef20487f96", "filename": "gcc/testsuite/gcc.dg/pr40550.c", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40550.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40550.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr40550.c?ref=1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f", "patch": "@@ -0,0 +1,34 @@\n+/* { dg-do run } */\n+/* { dg-options \"-msse\" { target { { i?86-*-* x86_64-*-* } && ilp32 } } } */\n+\n+#ifdef __i386__\n+#include \"cpuid.h\"\n+#endif\n+\n+typedef float v2sf __attribute__ ((vector_size (2 * sizeof(float))));\n+\n+static void test (void)\n+{\n+  v2sf a = {1.0, 0.0};\n+  v2sf b = {0.0, 1.0};\n+  v2sf d;\n+  d = a + b;\n+}\n+\n+int main ()\n+{\n+\n+#ifdef __i386__\n+  unsigned int eax, ebx, ecx, edx;\n+\n+  if (!__get_cpuid (1, &eax, &ebx, &ecx, &edx))\n+    return 0;\n+\n+  if (!(edx & bit_SSE))\n+    return 0;\n+#endif\n+\n+  test ();\n+\n+  return 0;\n+}"}, {"sha": "9ef0239421d79ebb00d09bbacf1f81fa2413e3b2", "filename": "gcc/tree-vect-generic.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f/gcc%2Ftree-vect-generic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f/gcc%2Ftree-vect-generic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-generic.c?ref=1e9ae5ab30a1482760bf7bb35fcdf18e2dbe942f", "patch": "@@ -482,8 +482,10 @@ expand_vector_operations_1 (gimple_stmt_iterator *gsi)\n       tree vector_compute_type\n         = type_for_widest_vector_mode (TYPE_MODE (TREE_TYPE (type)), op,\n \t\t\t\t       TYPE_SATURATING (TREE_TYPE (type)));\n-      if (vector_compute_type != NULL_TREE)\n-        compute_type = vector_compute_type;\n+      if (vector_compute_type != NULL_TREE\n+\t  && (TYPE_VECTOR_SUBPARTS (vector_compute_type)\n+\t      < TYPE_VECTOR_SUBPARTS (compute_type)))\n+\tcompute_type = vector_compute_type;\n     }\n \n   /* If we are breaking a BLKmode vector into smaller pieces,"}]}