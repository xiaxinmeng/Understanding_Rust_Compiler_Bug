{"sha": "4fe5c8c730ead2286103b95a4226f9d23b95a68a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZlNWM4YzczMGVhZDIyODYxMDNiOTVhNDIyNmY5ZDIzYjk1YTY4YQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-02-09T00:25:39Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-02-09T00:25:39Z"}, "message": "Add noexcept to filesystem::path query functions\n\nIn the standard these member functions are specified in terms of the\npotentially-throwing path decompositions functions, but we implement\nthem without constructing any new paths or doing anything else that can\nthrow.\n\n\tPR libstdc++/71044\n\t* include/bits/fs_path.h (path::has_root_name)\n\t(path::has_root_directory, path::has_root_path)\n\t(path::has_relative_path, path::has_parent_path)\n\t(path::has_filename, path::has_stem, path::has_extension)\n\t(path::is_absolute, path::is_relative, path::_M_find_extension): Add\n\tnoexcept.\n\t* src/c++17/fs_path.cc (path::has_root_name)\n\t(path::has_root_directory, path::has_root_path)\n\t(path::has_relative_path, path::has_parent_path)\n\t(path::has_filename, path::_M_find_extension): Add noexcept.\n\nFrom-SVN: r268713", "tree": {"sha": "0b7f248aca7388225e5d71b337a99568ac7771e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0b7f248aca7388225e5d71b337a99568ac7771e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4fe5c8c730ead2286103b95a4226f9d23b95a68a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe5c8c730ead2286103b95a4226f9d23b95a68a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4fe5c8c730ead2286103b95a4226f9d23b95a68a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4fe5c8c730ead2286103b95a4226f9d23b95a68a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b0bf81512c506d863a48fd0aeea4812c1b35a28", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5b0bf81512c506d863a48fd0aeea4812c1b35a28", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5b0bf81512c506d863a48fd0aeea4812c1b35a28"}], "stats": {"total": 56, "additions": 35, "deletions": 21}, "files": [{"sha": "972a098950b990acc60503e7d97b5b19ba0cd3c6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe5c8c730ead2286103b95a4226f9d23b95a68a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe5c8c730ead2286103b95a4226f9d23b95a68a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=4fe5c8c730ead2286103b95a4226f9d23b95a68a", "patch": "@@ -1,3 +1,17 @@\n+2019-02-09  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/71044\n+\t* include/bits/fs_path.h (path::has_root_name)\n+\t(path::has_root_directory, path::has_root_path)\n+\t(path::has_relative_path, path::has_parent_path)\n+\t(path::has_filename, path::has_stem, path::has_extension)\n+\t(path::is_absolute, path::is_relative, path::_M_find_extension): Add\n+\tnoexcept.\n+\t* src/c++17/fs_path.cc (path::has_root_name)\n+\t(path::has_root_directory, path::has_root_path)\n+\t(path::has_relative_path, path::has_parent_path)\n+\t(path::has_filename, path::_M_find_extension): Add noexcept.\n+\n 2019-02-06  Jonathan Wakely  <jwakely@redhat.com>\n \n \tPR libstdc++/89102 (partial)"}, {"sha": "98b8dc08a6eede157e8d3f9a8db63a6bdc81cc12", "filename": "libstdc++-v3/include/bits/fs_path.h", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe5c8c730ead2286103b95a4226f9d23b95a68a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe5c8c730ead2286103b95a4226f9d23b95a68a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffs_path.h?ref=4fe5c8c730ead2286103b95a4226f9d23b95a68a", "patch": "@@ -359,16 +359,16 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     // query\n \n     [[nodiscard]] bool empty() const noexcept { return _M_pathname.empty(); }\n-    bool has_root_name() const;\n-    bool has_root_directory() const;\n-    bool has_root_path() const;\n-    bool has_relative_path() const;\n-    bool has_parent_path() const;\n-    bool has_filename() const;\n-    bool has_stem() const;\n-    bool has_extension() const;\n-    bool is_absolute() const;\n-    bool is_relative() const { return !is_absolute(); }\n+    bool has_root_name() const noexcept;\n+    bool has_root_directory() const noexcept;\n+    bool has_root_path() const noexcept;\n+    bool has_relative_path() const noexcept;\n+    bool has_parent_path() const noexcept;\n+    bool has_filename() const noexcept;\n+    bool has_stem() const noexcept;\n+    bool has_extension() const noexcept;\n+    bool is_absolute() const noexcept;\n+    bool is_relative() const noexcept { return !is_absolute(); }\n \n     // generation\n     path lexically_normal() const;\n@@ -433,7 +433,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n     void _M_append(basic_string_view<value_type>);\n     void _M_concat(basic_string_view<value_type>);\n \n-    pair<const string_type*, size_t> _M_find_extension() const;\n+    pair<const string_type*, size_t> _M_find_extension() const noexcept;\n \n     template<typename _CharT>\n       struct _Cvt;\n@@ -1102,21 +1102,21 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n   }\n \n   inline bool\n-  path::has_stem() const\n+  path::has_stem() const noexcept\n   {\n     auto ext = _M_find_extension();\n     return ext.first && ext.second != 0;\n   }\n \n   inline bool\n-  path::has_extension() const\n+  path::has_extension() const noexcept\n   {\n     auto ext = _M_find_extension();\n     return ext.first && ext.second != string_type::npos;\n   }\n \n   inline bool\n-  path::is_absolute() const\n+  path::is_absolute() const noexcept\n   {\n #ifdef _GLIBCXX_FILESYSTEM_IS_WINDOWS\n     return has_root_name() && has_root_directory();"}, {"sha": "268b5621509d9f3696ee3f1ffac3bca6d4924e7a", "filename": "libstdc++-v3/src/c++17/fs_path.cc", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4fe5c8c730ead2286103b95a4226f9d23b95a68a/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4fe5c8c730ead2286103b95a4226f9d23b95a68a/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B17%2Ffs_path.cc?ref=4fe5c8c730ead2286103b95a4226f9d23b95a68a", "patch": "@@ -1530,7 +1530,7 @@ path::parent_path() const\n }\n \n bool\n-path::has_root_name() const\n+path::has_root_name() const noexcept\n {\n   if (_M_type() == _Type::_Root_name)\n     return true;\n@@ -1540,7 +1540,7 @@ path::has_root_name() const\n }\n \n bool\n-path::has_root_directory() const\n+path::has_root_directory() const noexcept\n {\n   if (_M_type() == _Type::_Root_dir)\n     return true;\n@@ -1556,7 +1556,7 @@ path::has_root_directory() const\n }\n \n bool\n-path::has_root_path() const\n+path::has_root_path() const noexcept\n {\n   if (_M_type() == _Type::_Root_name || _M_type() == _Type::_Root_dir)\n     return true;\n@@ -1570,7 +1570,7 @@ path::has_root_path() const\n }\n \n bool\n-path::has_relative_path() const\n+path::has_relative_path() const noexcept\n {\n   if (_M_type() == _Type::_Filename && !_M_pathname.empty())\n     return true;\n@@ -1589,15 +1589,15 @@ path::has_relative_path() const\n \n \n bool\n-path::has_parent_path() const\n+path::has_parent_path() const noexcept\n {\n   if (!has_relative_path())\n     return !empty();\n   return _M_cmpts.size() >= 2;\n }\n \n bool\n-path::has_filename() const\n+path::has_filename() const noexcept\n {\n   if (empty())\n     return false;\n@@ -1783,7 +1783,7 @@ path::lexically_proximate(const path& base) const\n }\n \n std::pair<const path::string_type*, std::size_t>\n-path::_M_find_extension() const\n+path::_M_find_extension() const noexcept\n {\n   const string_type* s = nullptr;\n "}]}