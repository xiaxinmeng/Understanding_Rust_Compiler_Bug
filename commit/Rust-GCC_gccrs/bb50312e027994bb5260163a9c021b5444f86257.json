{"sha": "bb50312e027994bb5260163a9c021b5444f86257", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI1MDMxMmUwMjc5OTRiYjUyNjAxNjNhOWMwMjFiNTQ0NGY4NjI1Nw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2019-04-12T20:13:34Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gcc.gnu.org", "date": "2019-04-12T20:13:34Z"}, "message": "libphobos: Add target-zlib to top-level configure\n\nRemoves the building of zlib from within libphobos, using instead the\nlibz_convenience.a library.\n\nChangeLog:\n\n2019-04-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\t* configure.ac: Add target-zlib to target_libraries.\n\t* configure: Regenerate.\n\ngcc/ChangeLog:\n\n2019-04-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\t* doc/install.texi: Document --with-target-system-zlib.\n\nlibphobos/ChangeLog:\n\n2019-04-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n\n\t* m4/druntime/libraries.m4 (DRUNTIME_LIBRARIES_ZLIB): Use\n\tlibz_convenience.a if not using system zlib.\n\t* Makefile.in: Regenerate.\n\t* configure: Regenerate.\n\t* libdruntime/Makefile.in: Regenerate.\n\t* src/Makefile.am: Remove ZLIB_CSOURCES and AM_CFLAGS.\n\t* src/Makefile.in: Regenerate.\n\t* testsuite/Makefile.in: Regenerate.\n\nFrom-SVN: r270328", "tree": {"sha": "a54ece0354260e54a34472ff2bc81f5834fd2742", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a54ece0354260e54a34472ff2bc81f5834fd2742"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb50312e027994bb5260163a9c021b5444f86257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb50312e027994bb5260163a9c021b5444f86257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb50312e027994bb5260163a9c021b5444f86257", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb50312e027994bb5260163a9c021b5444f86257/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41fe51dd063c2d860f12311fc65c7ad8ed8e6df5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41fe51dd063c2d860f12311fc65c7ad8ed8e6df5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41fe51dd063c2d860f12311fc65c7ad8ed8e6df5"}], "stats": {"total": 353, "additions": 157, "deletions": 196}, "files": [{"sha": "4622118b252f2590196fdaf49d8eedec48074590", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50312e027994bb5260163a9c021b5444f86257/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50312e027994bb5260163a9c021b5444f86257/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=bb50312e027994bb5260163a9c021b5444f86257", "patch": "@@ -1,3 +1,8 @@\n+2019-04-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* configure.ac: Add target-zlib to target_libraries.\n+\t* configure: Regenerate.\n+\n 2019-04-09  Martin Liska  <mliska@suse.cz>\n \n \t* Makefile.in: Regenerate."}, {"sha": "1c5f9b502a8eadfcf92e6d0abb83854178c6912d", "filename": "configure", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50312e027994bb5260163a9c021b5444f86257/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50312e027994bb5260163a9c021b5444f86257/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=bb50312e027994bb5260163a9c021b5444f86257", "patch": "@@ -2813,7 +2813,8 @@ target_libraries=\"target-libgcc \\\n \t\ttarget-libobjc \\\n \t\ttarget-libada \\\n \t\ttarget-libgo \\\n-\t\ttarget-libphobos\"\n+\t\ttarget-libphobos \\\n+\t\ttarget-zlib\"\n \n # these tools are built using the target libraries, and are intended to\n # run only in the target environment"}, {"sha": "cffccd378053e8603e27b8e273a13c652df3b289", "filename": "configure.ac", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50312e027994bb5260163a9c021b5444f86257/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50312e027994bb5260163a9c021b5444f86257/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=bb50312e027994bb5260163a9c021b5444f86257", "patch": "@@ -163,7 +163,8 @@ target_libraries=\"target-libgcc \\\n \t\ttarget-libobjc \\\n \t\ttarget-libada \\\n \t\ttarget-libgo \\\n-\t\ttarget-libphobos\"\n+\t\ttarget-libphobos \\\n+\t\ttarget-zlib\"\n \n # these tools are built using the target libraries, and are intended to\n # run only in the target environment"}, {"sha": "83e595453be39bdc4bc88a8b2391fec03a46659d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50312e027994bb5260163a9c021b5444f86257/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50312e027994bb5260163a9c021b5444f86257/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bb50312e027994bb5260163a9c021b5444f86257", "patch": "@@ -1,3 +1,7 @@\n+2019-04-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* doc/install.texi: Document --with-target-system-zlib.\n+\n 2019-04-12  Martin Sebor  <msebor@redhat.com>\n \n \tPR c/88383"}, {"sha": "911875f9578fce20dc24746bad5bb3391ffd57b1", "filename": "gcc/doc/install.texi", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50312e027994bb5260163a9c021b5444f86257/gcc%2Fdoc%2Finstall.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50312e027994bb5260163a9c021b5444f86257/gcc%2Fdoc%2Finstall.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finstall.texi?ref=bb50312e027994bb5260163a9c021b5444f86257", "patch": "@@ -2344,6 +2344,18 @@ If none of these options are specified, the library is assumed in\n default locations.\n @end table\n \n+@subheading D-Specific Options\n+\n+The following options apply to the build of the D runtime library.\n+\n+@table @code\n+@item --with-target-system-zlib\n+Use installed @samp{zlib} rather than that included with GCC@.  This needs\n+to be available for each multilib variant, unless configured with\n+@option{--with-target-system-zlib=@samp{auto}} in which case the GCC@ included\n+@samp{zlib} is only used when the system installed library is not available.\n+@end table\n+\n @html\n <hr />\n <p>"}, {"sha": "e79b69726c0457484d41b408fffa94073230f360", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=bb50312e027994bb5260163a9c021b5444f86257", "patch": "@@ -1,3 +1,14 @@\n+2019-04-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* m4/druntime/libraries.m4 (DRUNTIME_LIBRARIES_ZLIB): Use\n+\tlibz_convenience.a if not using system zlib.\n+\t* Makefile.in: Regenerate.\n+\t* configure: Regenerate.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* src/Makefile.am: Remove ZLIB_CSOURCES and AM_CFLAGS.\n+\t* src/Makefile.in: Regenerate.\n+\t* testsuite/Makefile.in: Regenerate.\n+\n 2019-04-12  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* testsuite/Makefile.am:"}, {"sha": "1cd4117f2ee0124d7e3f9baf8e69d5dc8d9473f1", "filename": "libphobos/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FMakefile.in?ref=bb50312e027994bb5260163a9c021b5444f86257", "patch": "@@ -241,6 +241,7 @@ LIBBACKTRACE = @LIBBACKTRACE@\n LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n+LIBZ = @LIBZ@\n LIPO = @LIPO@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@"}, {"sha": "ead96d11bb4ef2a86efbc83d6b70621c032a69fb", "filename": "libphobos/configure", "status": "modified", "additions": 62, "deletions": 52, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure?ref=bb50312e027994bb5260163a9c021b5444f86257", "patch": "@@ -640,8 +640,7 @@ gdc_include_dir\n libphobos_toolexeclibdir\n libphobos_toolexecdir\n gcc_version\n-DRUNTIME_ZLIB_SYSTEM_FALSE\n-DRUNTIME_ZLIB_SYSTEM_TRUE\n+LIBZ\n BACKTRACE_SUPPORTS_THREADS\n BACKTRACE_USES_MALLOC\n BACKTRACE_SUPPORTED\n@@ -1480,7 +1479,7 @@ Optional Packages:\n   --without-libatomic     Do not use libatomic in core.atomic (default: auto)\n   --without-libbacktrace  Do not use libbacktrace in core.runtime (default:\n                           auto)\n-  --with-target-system-zlib\n+  --with-target-system-zlib={yes,no,auto}\n                           use installed libz (default: no)\n   --with-cross-host=HOST  configuring with a cross compiler\n \n@@ -11495,7 +11494,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11498 \"configure\"\n+#line 11497 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11601,7 +11600,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11604 \"configure\"\n+#line 11603 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14844,79 +14843,94 @@ $as_echo \"$druntime_cv_lib_sockets\" >&6; }\n   LIBS=\"$LIBS $druntime_cv_lib_sockets\"\n \n \n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n+\n+  LIBZ=\"\"\n+\n \n # Check whether --with-target-system-zlib was given.\n if test \"${with_target_system_zlib+set}\" = set; then :\n   withval=$with_target_system_zlib;\n+else\n+  with_target_system_zlib=no\n fi\n \n \n-  system_zlib=false\n-  if test \"x$with_target_system_zlib\" = \"xyes\"; then :\n+  case \"$with_target_system_zlib\" in\n+    yes|no|auto) ;;\n+    *) as_fn_error $? \"Invalid argument for --with-target-system-zlib\" \"$LINENO\" 5 ;;\n+  esac\n \n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for deflate in -lz\" >&5\n-$as_echo_n \"checking for deflate in -lz... \" >&6; }\n-if ${ac_cv_lib_z_deflate+:} false; then :\n-  $as_echo_n \"(cached) \" >&6\n-else\n-  ac_check_lib_save_LIBS=$LIBS\n-LIBS=\"-lz  $LIBS\"\n-cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for system zlib\" >&5\n+$as_echo_n \"checking for system zlib... \" >&6; }\n+  save_LIBS=$LIBS\n+  LIBS=\"$LIBS -lz\"\n+      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n-\n-/* Override any GCC internal prototype to avoid an error.\n-   Use char because int might match the return type of a GCC\n-   builtin and then its argument prototype would still apply.  */\n-#ifdef __cplusplus\n-extern \"C\"\n-#endif\n-char deflate ();\n+#include <zlib.h>\n int\n main ()\n {\n-return deflate ();\n+gzopen(\"none\", \"rb\")\n   ;\n   return 0;\n }\n _ACEOF\n if ac_fn_c_try_link \"$LINENO\"; then :\n-  ac_cv_lib_z_deflate=yes\n-else\n-  ac_cv_lib_z_deflate=no\n-fi\n-rm -f core conftest.err conftest.$ac_objext \\\n-    conftest$ac_exeext conftest.$ac_ext\n-LIBS=$ac_check_lib_save_LIBS\n-fi\n-{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_z_deflate\" >&5\n-$as_echo \"$ac_cv_lib_z_deflate\" >&6; }\n-if test \"x$ac_cv_lib_z_deflate\" = xyes; then :\n \n-      system_zlib=yes\n+      if test \"$cross_compiling\" = yes; then :\n+          system_zlib_found=no\n \n else\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n \n-      as_fn_error $? \"System zlib not found\" \"$LINENO\" 5\n+        #include <zlib.h>\n+        int main() {\n+          gzFile file = gzopen(\"none\", \"rb\");\n+          return 0;\n+        }\n \n+_ACEOF\n+if ac_fn_c_try_run \"$LINENO\"; then :\n+  system_zlib_found=yes\n+else\n+  system_zlib_found=no\n+fi\n+rm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n+  conftest.$ac_objext conftest.beam conftest.$ac_ext\n fi\n \n \n else\n-\n-    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for zlib\" >&5\n-$as_echo_n \"checking for zlib... \" >&6; }\n+  system_zlib_found=no\n+fi\n+rm -f core conftest.err conftest.$ac_objext \\\n+    conftest$ac_exeext conftest.$ac_ext\n+  LIBS=$save_LIBS\n+\n+  if test x$system_zlib_found = xyes && test x$with_target_system_zlib != xno; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: found\" >&5\n+$as_echo \"found\" >&6; }\n+    LIBS=\"$LIBS -lz\"\n+  elif test x$system_zlib_found = xno && test x$with_target_system_zlib = xyes; then\n+    as_fn_error $? \"system zlib required but not found\" \"$LINENO\" 5\n+  else\n     { $as_echo \"$as_me:${as_lineno-$LINENO}: result: just compiled\" >&5\n $as_echo \"just compiled\" >&6; }\n+    LIBZ=../../zlib/libz_convenience.la\n+  fi\n \n-fi\n \n-   if test \"$with_target_system_zlib\" = yes; then\n-  DRUNTIME_ZLIB_SYSTEM_TRUE=\n-  DRUNTIME_ZLIB_SYSTEM_FALSE='#'\n-else\n-  DRUNTIME_ZLIB_SYSTEM_TRUE='#'\n-  DRUNTIME_ZLIB_SYSTEM_FALSE=\n-fi\n+  ac_ext=c\n+ac_cpp='$CPP $CPPFLAGS'\n+ac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\n+ac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\n+ac_compiler_gnu=$ac_cv_c_compiler_gnu\n \n \n \n@@ -15226,10 +15240,6 @@ if test -z \"${DRUNTIME_OS_MINFO_BRACKETING_TRUE}\" && test -z \"${DRUNTIME_OS_MINF\n   as_fn_error $? \"conditional \\\"DRUNTIME_OS_MINFO_BRACKETING\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n-if test -z \"${DRUNTIME_ZLIB_SYSTEM_TRUE}\" && test -z \"${DRUNTIME_ZLIB_SYSTEM_FALSE}\"; then\n-  as_fn_error $? \"conditional \\\"DRUNTIME_ZLIB_SYSTEM\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n \n : \"${CONFIG_STATUS=./config.status}\"\n ac_write_fail=0"}, {"sha": "fe95436c118823061090931d7fe56c10cedbb6f9", "filename": "libphobos/libdruntime/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2Flibdruntime%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2Flibdruntime%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.in?ref=bb50312e027994bb5260163a9c021b5444f86257", "patch": "@@ -555,6 +555,7 @@ LIBBACKTRACE = @LIBBACKTRACE@\n LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n+LIBZ = @LIBZ@\n LIPO = @LIPO@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@"}, {"sha": "6e81fd99e4b0f019fb19016e47ca300f71897a03", "filename": "libphobos/m4/druntime/libraries.m4", "status": "modified", "additions": 48, "deletions": 17, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2Fm4%2Fdruntime%2Flibraries.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2Fm4%2Fdruntime%2Flibraries.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fm4%2Fdruntime%2Flibraries.m4?ref=bb50312e027994bb5260163a9c021b5444f86257", "patch": "@@ -79,28 +79,59 @@ AC_DEFUN([DRUNTIME_LIBRARIES_NET],\n # DRUNTIME_LIBRARIES_ZLIB\n # -----------------------\n # Allow specifying whether to use the system zlib or\n-# compiling the zlib included in GCC. Define\n-# DRUNTIME_ZLIB_SYSTEM conditional and add zlib to\n-# LIBS if necessary.\n+# compiling the zlib included in GCC.  Adds substitute\n+# for LIBZ or adds zlib to LIBS if necessary.\n AC_DEFUN([DRUNTIME_LIBRARIES_ZLIB],\n [\n-  AC_ARG_WITH(target-system-zlib,\n-    AS_HELP_STRING([--with-target-system-zlib],\n-                   [use installed libz (default: no)]))\n+  AC_LANG_PUSH([C])\n+  LIBZ=\"\"\n \n-  system_zlib=false\n-  AS_IF([test \"x$with_target_system_zlib\" = \"xyes\"], [\n-    AC_CHECK_LIB([z], [deflate], [\n-      system_zlib=yes\n-    ], [\n-      AC_MSG_ERROR([System zlib not found])\n-    ])\n-  ], [\n-    AC_MSG_CHECKING([for zlib])\n+  AC_ARG_WITH(target-system-zlib,\n+    AS_HELP_STRING([--with-target-system-zlib={yes,no,auto}],\n+                   [use installed libz (default: no)]),,\n+              [with_target_system_zlib=no])\n+\n+  case \"$with_target_system_zlib\" in\n+    yes|no|auto) ;;\n+    *) AC_MSG_ERROR([Invalid argument for --with-target-system-zlib]) ;;\n+  esac\n+\n+  AC_MSG_CHECKING([for system zlib])\n+  save_LIBS=$LIBS\n+  LIBS=\"$LIBS -lz\"\n+  dnl the link test is not good enough for ARM32 multilib detection,\n+  dnl first check to link, then to run\n+  AC_LINK_IFELSE(\n+    [AC_LANG_PROGRAM([#include <zlib.h>],[gzopen(\"none\", \"rb\")])],\n+    [\n+      AC_RUN_IFELSE([AC_LANG_SOURCE([[\n+        #include <zlib.h>\n+        int main() {\n+          gzFile file = gzopen(\"none\", \"rb\");\n+          return 0;\n+        }\n+        ]])],\n+        [system_zlib_found=yes],\n+        [system_zlib_found=no],\n+        dnl no system zlib for cross builds ...\n+        [system_zlib_found=no]\n+      )\n+    ],\n+    [system_zlib_found=no])\n+  LIBS=$save_LIBS\n+\n+  if test x$system_zlib_found = xyes && test x$with_target_system_zlib != xno; then\n+    AC_MSG_RESULT([found])\n+    LIBS=\"$LIBS -lz\"\n+  elif test x$system_zlib_found = xno && test x$with_target_system_zlib = xyes; then\n+    AC_MSG_ERROR([system zlib required but not found])\n+  else\n     AC_MSG_RESULT([just compiled])\n-  ])\n+    LIBZ=../../zlib/libz_convenience.la\n+  fi\n \n-  AM_CONDITIONAL([DRUNTIME_ZLIB_SYSTEM], [test \"$with_target_system_zlib\" = yes])\n+  AC_SUBST(LIBZ)\n+  AC_LANG_POP([C])\n ])\n \n # DRUNTIME_LIBRARIES_ATOMIC"}, {"sha": "04a8ad5e73b9d06a6a94006c7eeddfa975e3f46e", "filename": "libphobos/src/Makefile.am", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2Fsrc%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2Fsrc%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMakefile.am?ref=bb50312e027994bb5260163a9c021b5444f86257", "patch": "@@ -22,9 +22,6 @@ include $(top_srcdir)/d_rules.am\n D_EXTRA_DFLAGS=-nostdinc -I $(srcdir) \\\n \t-I $(top_srcdir)/libdruntime -I ../libdruntime -I .\n \n-# C flags for zlib compilation\n-AM_CFLAGS=@DEFS@ -I. -I$(srcdir)/../libdruntime/gcc -I$(top_srcdir)/../zlib\n-\n # D flags for compilation\n AM_DFLAGS=$(phobos_compiler_pic_flag)\n \n@@ -37,19 +34,13 @@ ALL_PHOBOS_COMPILE_DSOURCES = $(PHOBOS_DSOURCES)\n ALL_PHOBOS_SOURCES = $(ALL_PHOBOS_COMPILE_DSOURCES)\n \n # Main library build definitions\n-if DRUNTIME_ZLIB_SYSTEM\n-    ZLIB_SRC =\n-else\n-    ZLIB_SRC = $(ZLIB_CSOURCES)\n-endif\n-\n toolexeclib_DATA = libgphobos.spec\n toolexeclib_LTLIBRARIES = libgphobos.la\n-libgphobos_la_SOURCES = $(ALL_PHOBOS_SOURCES) $(ZLIB_SRC)\n+libgphobos_la_SOURCES = $(ALL_PHOBOS_SOURCES)\n libgphobos_la_LIBTOOLFLAGS =\n libgphobos_la_LDFLAGS = -Wc,-nophoboslib,-dstartfiles,-B../libdruntime/gcc \\\n     -version-info $(libtool_VERSION)\n-libgphobos_la_LIBADD = ../libdruntime/libgdruntime.la\n+libgphobos_la_LIBADD = ../libdruntime/libgdruntime.la $(LIBZ)\n libgphobos_la_DEPENDENCIES = libgphobos.spec\n \n # Handles generated files as well\n@@ -64,16 +55,6 @@ install-data-local:\n \t  fi ; \\\n \tdone\n \n-# Zlib sources when not using system libz\n-ZLIB_CSOURCES=$(top_srcdir)/../zlib/adler32.c $(top_srcdir)/../zlib/compress.c \\\n-\t$(top_srcdir)/../zlib/crc32.c $(top_srcdir)/../zlib/deflate.c \\\n-\t$(top_srcdir)/../zlib/gzclose.c $(top_srcdir)/../zlib/gzlib.c \\\n-\t$(top_srcdir)/../zlib/gzread.c $(top_srcdir)/../zlib/gzwrite.c \\\n-\t$(top_srcdir)/../zlib/infback.c $(top_srcdir)/../zlib/inffast.c \\\n-\t$(top_srcdir)/../zlib/inflate.c $(top_srcdir)/../zlib/inftrees.c \\\n-\t$(top_srcdir)/../zlib/trees.c $(top_srcdir)/../zlib/uncompr.c \\\n-\t$(top_srcdir)/../zlib/zutil.c\n-\n # Source file definitions. Boring stuff, auto-generated with\n # https://gist.github.com/jpf91/8744acebc9dcf1e9d1a35cdff20afbb2\n # Can't use wildcards here:"}, {"sha": "0cc16ce1cf09e2fb82dc6f12d8bf0034618de04b", "filename": "libphobos/src/Makefile.in", "status": "modified", "additions": 6, "deletions": 104, "changes": 110, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2Fsrc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2Fsrc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fsrc%2FMakefile.in?ref=bb50312e027994bb5260163a9c021b5444f86257", "patch": "@@ -142,6 +142,7 @@ am__uninstall_files_from_dir = { \\\n am__installdirs = \"$(DESTDIR)$(toolexeclibdir)\" \\\n \t\"$(DESTDIR)$(toolexeclibdir)\"\n LTLIBRARIES = $(toolexeclib_LTLIBRARIES)\n+am__DEPENDENCIES_1 =\n am__dirstamp = $(am__leading_dot)dirstamp\n am__objects_1 = etc/c/curl.lo etc/c/sqlite3.lo etc/c/zlib.lo \\\n \tstd/algorithm/comparison.lo std/algorithm/internal.lo \\\n@@ -216,16 +217,7 @@ am__objects_1 = etc/c/curl.lo etc/c/sqlite3.lo etc/c/zlib.lo \\\n \tstd/windows/syserror.lo std/xml.lo std/zip.lo std/zlib.lo\n am__objects_2 = $(am__objects_1)\n am__objects_3 = $(am__objects_2)\n-am__objects_4 = libgphobos_la-adler32.lo libgphobos_la-compress.lo \\\n-\tlibgphobos_la-crc32.lo libgphobos_la-deflate.lo \\\n-\tlibgphobos_la-gzclose.lo libgphobos_la-gzlib.lo \\\n-\tlibgphobos_la-gzread.lo libgphobos_la-gzwrite.lo \\\n-\tlibgphobos_la-infback.lo libgphobos_la-inffast.lo \\\n-\tlibgphobos_la-inflate.lo libgphobos_la-inftrees.lo \\\n-\tlibgphobos_la-trees.lo libgphobos_la-uncompr.lo \\\n-\tlibgphobos_la-zutil.lo\n-@DRUNTIME_ZLIB_SYSTEM_FALSE@am__objects_5 = $(am__objects_4)\n-am_libgphobos_la_OBJECTS = $(am__objects_3) $(am__objects_5)\n+am_libgphobos_la_OBJECTS = $(am__objects_3)\n libgphobos_la_OBJECTS = $(am_libgphobos_la_OBJECTS)\n AM_V_P = $(am__v_P_@AM_V@)\n am__v_P_ = $(am__v_P_@AM_DEFAULT_V@)\n@@ -242,27 +234,6 @@ am__v_at_1 =\n DEFAULT_INCLUDES = -I.@am__isrc@ -I$(top_builddir)\n depcomp =\n am__depfiles_maybe =\n-AM_V_lt = $(am__v_lt_@AM_V@)\n-am__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)\n-am__v_lt_0 = --silent\n-am__v_lt_1 = \n-COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n-\t$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\n-LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n-\t$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \\\n-\t$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n-\t$(AM_CFLAGS) $(CFLAGS)\n-AM_V_CC = $(am__v_CC_@AM_V@)\n-am__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)\n-am__v_CC_0 = @echo \"  CC      \" $@;\n-am__v_CC_1 = \n-LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n-\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n-\t$(AM_LDFLAGS) $(LDFLAGS) -o $@\n-AM_V_CCLD = $(am__v_CCLD_@AM_V@)\n-am__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)\n-am__v_CCLD_0 = @echo \"  CCLD    \" $@;\n-am__v_CCLD_1 = \n SOURCES = $(libgphobos_la_SOURCES)\n am__can_run_installinfo = \\\n   case $$AM_UPDATE_INFO_DIR in \\\n@@ -341,6 +312,7 @@ LIBBACKTRACE = @LIBBACKTRACE@\n LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n+LIBZ = @LIBZ@\n LIPO = @LIPO@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@\n@@ -461,9 +433,6 @@ D_EXTRA_DFLAGS = -nostdinc -I $(srcdir) \\\n \t-I $(top_srcdir)/libdruntime -I ../libdruntime -I .\n \n \n-# C flags for zlib compilation\n-AM_CFLAGS = @DEFS@ -I. -I$(srcdir)/../libdruntime/gcc -I$(top_srcdir)/../zlib\n-\n # D flags for compilation\n AM_DFLAGS = $(phobos_compiler_pic_flag)\n \n@@ -473,31 +442,18 @@ ALL_PHOBOS_INSTALL_DSOURCES = $(PHOBOS_DSOURCES)\n # Setup source files depending on configure\n ALL_PHOBOS_COMPILE_DSOURCES = $(PHOBOS_DSOURCES)\n ALL_PHOBOS_SOURCES = $(ALL_PHOBOS_COMPILE_DSOURCES)\n-@DRUNTIME_ZLIB_SYSTEM_FALSE@ZLIB_SRC = $(ZLIB_CSOURCES)\n \n # Main library build definitions\n-@DRUNTIME_ZLIB_SYSTEM_TRUE@ZLIB_SRC = \n toolexeclib_DATA = libgphobos.spec\n toolexeclib_LTLIBRARIES = libgphobos.la\n-libgphobos_la_SOURCES = $(ALL_PHOBOS_SOURCES) $(ZLIB_SRC)\n+libgphobos_la_SOURCES = $(ALL_PHOBOS_SOURCES)\n libgphobos_la_LIBTOOLFLAGS = \n libgphobos_la_LDFLAGS = -Wc,-nophoboslib,-dstartfiles,-B../libdruntime/gcc \\\n     -version-info $(libtool_VERSION)\n \n-libgphobos_la_LIBADD = ../libdruntime/libgdruntime.la\n+libgphobos_la_LIBADD = ../libdruntime/libgdruntime.la $(LIBZ)\n libgphobos_la_DEPENDENCIES = libgphobos.spec\n \n-# Zlib sources when not using system libz\n-ZLIB_CSOURCES = $(top_srcdir)/../zlib/adler32.c $(top_srcdir)/../zlib/compress.c \\\n-\t$(top_srcdir)/../zlib/crc32.c $(top_srcdir)/../zlib/deflate.c \\\n-\t$(top_srcdir)/../zlib/gzclose.c $(top_srcdir)/../zlib/gzlib.c \\\n-\t$(top_srcdir)/../zlib/gzread.c $(top_srcdir)/../zlib/gzwrite.c \\\n-\t$(top_srcdir)/../zlib/infback.c $(top_srcdir)/../zlib/inffast.c \\\n-\t$(top_srcdir)/../zlib/inflate.c $(top_srcdir)/../zlib/inftrees.c \\\n-\t$(top_srcdir)/../zlib/trees.c $(top_srcdir)/../zlib/uncompr.c \\\n-\t$(top_srcdir)/../zlib/zutil.c\n-\n-\n # Source file definitions. Boring stuff, auto-generated with\n # https://gist.github.com/jpf91/8744acebc9dcf1e9d1a35cdff20afbb2\n # Can't use wildcards here:\n@@ -568,7 +524,7 @@ PHOBOS_DSOURCES = etc/c/curl.d etc/c/sqlite3.d etc/c/zlib.d \\\n all: all-am\n \n .SUFFIXES:\n-.SUFFIXES: .c .d .lo .o .obj\n+.SUFFIXES: .d .lo .o\n $(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am $(top_srcdir)/d_rules.am $(am__configure_deps)\n \t@for dep in $?; do \\\n \t  case '$(am__configure_deps)' in \\\n@@ -907,60 +863,6 @@ mostlyclean-compile:\n distclean-compile:\n \t-rm -f *.tab.c\n \n-.c.o:\n-\t$(AM_V_CC)$(COMPILE) -c -o $@ $<\n-\n-.c.obj:\n-\t$(AM_V_CC)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`\n-\n-.c.lo:\n-\t$(AM_V_CC)$(LTCOMPILE) -c -o $@ $<\n-\n-libgphobos_la-adler32.lo: $(top_srcdir)/../zlib/adler32.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-adler32.lo `test -f '$(top_srcdir)/../zlib/adler32.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/adler32.c\n-\n-libgphobos_la-compress.lo: $(top_srcdir)/../zlib/compress.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-compress.lo `test -f '$(top_srcdir)/../zlib/compress.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/compress.c\n-\n-libgphobos_la-crc32.lo: $(top_srcdir)/../zlib/crc32.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-crc32.lo `test -f '$(top_srcdir)/../zlib/crc32.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/crc32.c\n-\n-libgphobos_la-deflate.lo: $(top_srcdir)/../zlib/deflate.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-deflate.lo `test -f '$(top_srcdir)/../zlib/deflate.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/deflate.c\n-\n-libgphobos_la-gzclose.lo: $(top_srcdir)/../zlib/gzclose.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-gzclose.lo `test -f '$(top_srcdir)/../zlib/gzclose.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/gzclose.c\n-\n-libgphobos_la-gzlib.lo: $(top_srcdir)/../zlib/gzlib.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-gzlib.lo `test -f '$(top_srcdir)/../zlib/gzlib.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/gzlib.c\n-\n-libgphobos_la-gzread.lo: $(top_srcdir)/../zlib/gzread.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-gzread.lo `test -f '$(top_srcdir)/../zlib/gzread.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/gzread.c\n-\n-libgphobos_la-gzwrite.lo: $(top_srcdir)/../zlib/gzwrite.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-gzwrite.lo `test -f '$(top_srcdir)/../zlib/gzwrite.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/gzwrite.c\n-\n-libgphobos_la-infback.lo: $(top_srcdir)/../zlib/infback.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-infback.lo `test -f '$(top_srcdir)/../zlib/infback.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/infback.c\n-\n-libgphobos_la-inffast.lo: $(top_srcdir)/../zlib/inffast.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-inffast.lo `test -f '$(top_srcdir)/../zlib/inffast.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/inffast.c\n-\n-libgphobos_la-inflate.lo: $(top_srcdir)/../zlib/inflate.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-inflate.lo `test -f '$(top_srcdir)/../zlib/inflate.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/inflate.c\n-\n-libgphobos_la-inftrees.lo: $(top_srcdir)/../zlib/inftrees.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-inftrees.lo `test -f '$(top_srcdir)/../zlib/inftrees.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/inftrees.c\n-\n-libgphobos_la-trees.lo: $(top_srcdir)/../zlib/trees.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-trees.lo `test -f '$(top_srcdir)/../zlib/trees.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/trees.c\n-\n-libgphobos_la-uncompr.lo: $(top_srcdir)/../zlib/uncompr.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-uncompr.lo `test -f '$(top_srcdir)/../zlib/uncompr.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/uncompr.c\n-\n-libgphobos_la-zutil.lo: $(top_srcdir)/../zlib/zutil.c\n-\t$(AM_V_CC)$(LIBTOOL) $(AM_V_lt) --tag=CC $(libgphobos_la_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o libgphobos_la-zutil.lo `test -f '$(top_srcdir)/../zlib/zutil.c' || echo '$(srcdir)/'`$(top_srcdir)/../zlib/zutil.c\n-\n mostlyclean-libtool:\n \t-rm -f *.lo\n "}, {"sha": "9c509f3772953d92ca6945f88b61f9fbdc766e4d", "filename": "libphobos/testsuite/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2Ftestsuite%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb50312e027994bb5260163a9c021b5444f86257/libphobos%2Ftestsuite%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2FMakefile.in?ref=bb50312e027994bb5260163a9c021b5444f86257", "patch": "@@ -185,6 +185,7 @@ LIBBACKTRACE = @LIBBACKTRACE@\n LIBOBJS = @LIBOBJS@\n LIBS = @LIBS@\n LIBTOOL = @LIBTOOL@\n+LIBZ = @LIBZ@\n LIPO = @LIPO@\n LN_S = @LN_S@\n LTLIBOBJS = @LTLIBOBJS@"}]}