{"sha": "29220523c10fec10ba3f3de817257837611b4ec0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkyMjA1MjNjMTBmZWMxMGJhM2YzZGU4MTcyNTc4Mzc2MTFiNGVjMA==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2016-11-16T10:18:25Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2016-11-16T10:18:25Z"}, "message": "Fix nb_iterations_estimate calculation in tree-vect-loop.c\n\nvect_transform_loop has to reduce three iteration counts by\nthe vectorisation factor: nb_iterations_upper_bound,\nnb_iterations_likely_upper_bound and nb_iterations_estimate.\nAll three are latch execution counts rather than loop body\nexecution counts.  The calculations were taking that into\naccount for the first two, but not for nb_iterations_estimate.\n\nThis patch updates the way the calculations are done to fix\nthis and to add a bit more commentary about what is going on.\n\ngcc/\n2016-11-15  Richard Sandiford  <richard.sandiford@arm.com>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\n\t* tree-vect-loop.c (vect_transform_loop): Protect the updates of\n\tall three iteration counts with an any_* test.  Use a single update\n\tfor each count.  Fix the calculation of nb_iterations_estimate.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r242475", "tree": {"sha": "f19822b99c7707ec68ef459f828bba2f372da93f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f19822b99c7707ec68ef459f828bba2f372da93f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/29220523c10fec10ba3f3de817257837611b4ec0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29220523c10fec10ba3f3de817257837611b4ec0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29220523c10fec10ba3f3de817257837611b4ec0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29220523c10fec10ba3f3de817257837611b4ec0/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "3623815a51c6c546a550c703d393f3335daa2c2c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3623815a51c6c546a550c703d393f3335daa2c2c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3623815a51c6c546a550c703d393f3335daa2c2c"}], "stats": {"total": 46, "additions": 26, "deletions": 20}, "files": [{"sha": "db0f8315998d866f0b33d00ce0ebb94b6bc4f2c4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29220523c10fec10ba3f3de817257837611b4ec0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29220523c10fec10ba3f3de817257837611b4ec0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=29220523c10fec10ba3f3de817257837611b4ec0", "patch": "@@ -1,3 +1,11 @@\n+2016-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* tree-vect-loop.c (vect_transform_loop): Protect the updates of\n+\tall three iteration counts with an any_* test.  Use a single update\n+\tfor each count.  Fix the calculation of nb_iterations_estimate.\n+\n 2016-11-16  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/pdp11/pdp11.c: Include dbxout.h."}, {"sha": "53570f32d45362f49cf3dca86a666690e7ea4ca1", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/29220523c10fec10ba3f3de817257837611b4ec0/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/29220523c10fec10ba3f3de817257837611b4ec0/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=29220523c10fec10ba3f3de817257837611b4ec0", "patch": "@@ -7043,27 +7043,25 @@ vect_transform_loop (loop_vec_info loop_vinfo)\n   /* Reduce loop iterations by the vectorization factor.  */\n   scale_loop_profile (loop, GCOV_COMPUTE_SCALE (1, vf),\n \t\t      expected_iterations / vf);\n-  if (LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo))\n-    {\n-      if (loop->nb_iterations_upper_bound != 0)\n-        loop->nb_iterations_upper_bound = loop->nb_iterations_upper_bound - 1;\n-      if (loop->nb_iterations_likely_upper_bound != 0)\n-        loop->nb_iterations_likely_upper_bound\n-\t   = loop->nb_iterations_likely_upper_bound - 1;\n-    }\n-  loop->nb_iterations_upper_bound\n-    = wi::udiv_floor (loop->nb_iterations_upper_bound + 1, vf) - 1;\n-  loop->nb_iterations_likely_upper_bound\n-    = wi::udiv_floor (loop->nb_iterations_likely_upper_bound + 1, vf) - 1;\n-\n+  /* The minimum number of iterations performed by the epilogue.  This\n+     is 1 when peeling for gaps because we always need a final scalar\n+     iteration.  */\n+  int min_epilogue_iters = LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo) ? 1 : 0;\n+  /* +1 to convert latch counts to loop iteration counts,\n+     -min_epilogue_iters to remove iterations that cannot be performed\n+       by the vector code.  */\n+  int bias = 1 - min_epilogue_iters;\n+  /* In these calculations the \"- 1\" converts loop iteration counts\n+     back to latch counts.  */\n+  if (loop->any_upper_bound)\n+    loop->nb_iterations_upper_bound\n+      = wi::udiv_floor (loop->nb_iterations_upper_bound + bias, vf) - 1;\n+  if (loop->any_likely_upper_bound)\n+    loop->nb_iterations_likely_upper_bound\n+      = wi::udiv_floor (loop->nb_iterations_likely_upper_bound + bias, vf) - 1;\n   if (loop->any_estimate)\n-    {\n-      loop->nb_iterations_estimate\n-\t= wi::udiv_floor (loop->nb_iterations_estimate, vf);\n-       if (LOOP_VINFO_PEELING_FOR_GAPS (loop_vinfo)\n-\t   && loop->nb_iterations_estimate != 0)\n-\t loop->nb_iterations_estimate = loop->nb_iterations_estimate - 1;\n-    }\n+    loop->nb_iterations_estimate\n+      = wi::udiv_floor (loop->nb_iterations_estimate + bias, vf) - 1;\n \n   if (dump_enabled_p ())\n     {"}]}