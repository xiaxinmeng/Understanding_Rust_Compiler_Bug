{"sha": "32facac80826f8b0b5e1906a5d698f27051050cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzJmYWNhYzgwODI2ZjhiMGI1ZTE5MDZhNWQ2OThmMjcwNTEwNTBjZg==", "commit": {"author": {"name": "Martin v. L\u00f6wis", "email": "loewis@informatik.hu-berlin.de", "date": "1999-09-21T19:49:04Z"}, "committer": {"name": "Martin v. L\u00f6wis", "email": "loewis@gcc.gnu.org", "date": "1999-09-21T19:49:04Z"}, "message": "typeck.c (get_member_function_from_ptrfunc): Allow extraction of function pointer from pmfs with no object given.\n\n\t* typeck.c (get_member_function_from_ptrfunc): Allow extraction of\n\tfunction pointer from pmfs with no object given.\n\t(convert_for_assignment): Do not return error when converting\n\tpmfs.\n\nFrom-SVN: r29559", "tree": {"sha": "1a4ce5a327b8cf64819cd5291d11644c4c2726e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1a4ce5a327b8cf64819cd5291d11644c4c2726e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/32facac80826f8b0b5e1906a5d698f27051050cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32facac80826f8b0b5e1906a5d698f27051050cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/32facac80826f8b0b5e1906a5d698f27051050cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/32facac80826f8b0b5e1906a5d698f27051050cf/comments", "author": null, "committer": null, "parents": [{"sha": "0fb6bbf56e2261d41de209375829d8c2b8456f6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0fb6bbf56e2261d41de209375829d8c2b8456f6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0fb6bbf56e2261d41de209375829d8c2b8456f6c"}], "stats": {"total": 47, "additions": 34, "deletions": 13}, "files": [{"sha": "fecaede871cfde109df33ca738827b59e8d9a8b1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32facac80826f8b0b5e1906a5d698f27051050cf/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32facac80826f8b0b5e1906a5d698f27051050cf/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=32facac80826f8b0b5e1906a5d698f27051050cf", "patch": "@@ -1,3 +1,10 @@\n+1999-09-21  Martin v. L\ufffdwis  <loewis@informatik.hu-berlin.de>\n+\n+\t* typeck.c (get_member_function_from_ptrfunc): Allow extraction of\n+\tfunction pointer from pmfs with no object given.\n+\t(convert_for_assignment): Do not return error when converting\n+\tpmfs.\n+\n 1999-09-21  Alex Samuel  <samuel@codesourcery.com>\n \n \t* lex.c (internal_filename): New variable."}, {"sha": "a4d0255312ada218a79ce5fcf6245d84da142e43", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 27, "deletions": 13, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/32facac80826f8b0b5e1906a5d698f27051050cf/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/32facac80826f8b0b5e1906a5d698f27051050cf/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=32facac80826f8b0b5e1906a5d698f27051050cf", "patch": "@@ -2808,6 +2808,17 @@ get_member_function_from_ptrfunc (instance_ptrptr, function)\n \n       tree instance_ptr = *instance_ptrptr;\n \n+      if (instance_ptr == error_mark_node\n+\t  && TREE_CODE (function) == PTRMEM_CST)\n+\t{\n+\t  /* Extracting the function address from a pmf is only\n+\t     allowed with -Wno-pmf-conversions. It only works for\n+\t     pmf constants. */\n+\t  e1 = build_addr_func (PTRMEM_CST_MEMBER (function));\n+\t  e1 = convert (TYPE_PTRMEMFUNC_FN_TYPE (TREE_TYPE (function)), e1);\n+\t  return e1;\n+\t}\n+\n       if (TREE_SIDE_EFFECTS (instance_ptr))\n \tinstance_ptr = save_expr (instance_ptr);\n \n@@ -6425,25 +6436,28 @@ convert_for_assignment (type, rhs, errtype, fndecl, parmnum)\n      cv-unqualified type of the left operand.  */\n   if (!can_convert_arg (type, rhstype, rhs))\n     {\n-      /* When -Wno-pmf-converions is use, we just silently allow\n+      /* When -Wno-pmf-conversions is use, we just silently allow\n \t conversions from pointers-to-members to plain pointers.  If\n \t the conversion doesn't work, cp_convert will complain.  */\n       if (!warn_pmf2ptr \n \t  && TYPE_PTR_P (type) \n \t  && TYPE_PTRMEMFUNC_P (rhstype))\n \trhs = cp_convert (strip_top_quals (type), rhs);\n-      /* If the right-hand side has unknown type, then it is an\n-\t overloaded function.  Call instantiate_type to get error\n-\t messages.  */\n-      else if (rhstype == unknown_type_node)\n-\tinstantiate_type (type, rhs, 1);\n-      else if (fndecl)\n-\tcp_error (\"cannot convert `%T' to `%T' for argument `%P' to `%D'\",\n-\t\t  rhstype, type, parmnum, fndecl);\n-      else\n-\tcp_error (\"cannot convert `%T' to `%T' in %s\", rhstype, type, \n-\t\t  errtype);\n-      return error_mark_node;\n+      else \n+\t{\n+\t  /* If the right-hand side has unknown type, then it is an\n+\t     overloaded function.  Call instantiate_type to get error\n+\t     messages.  */\n+\t  if (rhstype == unknown_type_node)\n+\t    instantiate_type (type, rhs, 1);\n+\t  else if (fndecl)\n+\t    cp_error (\"cannot convert `%T' to `%T' for argument `%P' to `%D'\",\n+\t\t      rhstype, type, parmnum, fndecl);\n+\t  else\n+\t    cp_error (\"cannot convert `%T' to `%T' in %s\", rhstype, type, \n+\t\t      errtype);\n+\t  return error_mark_node;\n+\t}\n     }\n   return perform_implicit_conversion (strip_top_quals (type), rhs);\n }"}]}