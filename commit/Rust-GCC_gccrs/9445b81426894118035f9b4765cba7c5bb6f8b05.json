{"sha": "9445b81426894118035f9b4765cba7c5bb6f8b05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTQ0NWI4MTQyNjg5NDExODAzNWY5YjQ3NjVjYmE3YzViYjZmOGIwNQ==", "commit": {"author": {"name": "Alexandre Oliva", "email": "aoliva@redhat.com", "date": "2002-03-09T06:05:27Z"}, "committer": {"name": "Alexandre Oliva", "email": "aoliva@gcc.gnu.org", "date": "2002-03-09T06:05:27Z"}, "message": "mips.c (function_arg_pass_by_reference): Force to 0 in o32 and o64 ABIs.\n\n* config/mips/mips.c (function_arg_pass_by_reference): Force to 0\nin o32 and o64 ABIs.\n* config/mips/abi64.h (MUST_PASS_IN_STACK): Define as in expr.h,\nbut getting fixed-size structs passed in registers regardless of\npadding in o32 and o64 ABIs.\n\nFrom-SVN: r50480", "tree": {"sha": "42cc3c0be397db6b46b2ce477e0c8328c888577c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/42cc3c0be397db6b46b2ce477e0c8328c888577c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9445b81426894118035f9b4765cba7c5bb6f8b05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9445b81426894118035f9b4765cba7c5bb6f8b05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9445b81426894118035f9b4765cba7c5bb6f8b05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9445b81426894118035f9b4765cba7c5bb6f8b05/comments", "author": null, "committer": null, "parents": [{"sha": "f1148658f16fa29a944bd843fd69352e142a4d0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1148658f16fa29a944bd843fd69352e142a4d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1148658f16fa29a944bd843fd69352e142a4d0e"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "68eeab47a7890981da83511e065f67281037a926", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9445b81426894118035f9b4765cba7c5bb6f8b05/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9445b81426894118035f9b4765cba7c5bb6f8b05/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9445b81426894118035f9b4765cba7c5bb6f8b05", "patch": "@@ -1,5 +1,11 @@\n 2002-03-09  Alexandre Oliva  <aoliva@redhat.com>\n \n+\t* config/mips/mips.c (function_arg_pass_by_reference): Force to 0\n+\tin o32 and o64 ABIs.\n+\t* config/mips/abi64.h (MUST_PASS_IN_STACK): Define as in expr.h,\n+\tbut getting fixed-size structs passed in registers regardless of\n+\tpadding in o32 and o64 ABIs.\n+\n \t* config/mips/mips.c (mips_va_arg): Apply big-endianness address\n \toffset before loading address of argument passed by transparent\n \treference."}, {"sha": "653571792ed2af1cf547f5d0298e994ca1133b18", "filename": "gcc/config/mips/abi64.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9445b81426894118035f9b4765cba7c5bb6f8b05/gcc%2Fconfig%2Fmips%2Fabi64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9445b81426894118035f9b4765cba7c5bb6f8b05/gcc%2Fconfig%2Fmips%2Fabi64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fabi64.h?ref=9445b81426894118035f9b4765cba7c5bb6f8b05", "patch": "@@ -86,6 +86,19 @@ Boston, MA 02111-1307, USA.  */\n \t      || GET_MODE_CLASS (MODE) == MODE_INT)))\t\t\t\\\n       ? downward : upward))\n \n+/* Modified version of the macro in expr.h.  */\n+#define MUST_PASS_IN_STACK(MODE,TYPE)\t\t\t\\\n+  ((TYPE) != 0\t\t\t\t\t\t\\\n+   && (TREE_CODE (TYPE_SIZE (TYPE)) != INTEGER_CST\t\\\n+       || TREE_ADDRESSABLE (TYPE)\t\t\t\\\n+       || ((MODE) == BLKmode \t\t\t\t\\\n+\t   && mips_abi != ABI_32 && mips_abi != ABI_O64 \\\n+\t   && ! ((TYPE) != 0 && TREE_CODE (TYPE_SIZE (TYPE)) == INTEGER_CST \\\n+\t\t && 0 == (int_size_in_bytes (TYPE)\t\\\n+\t\t\t  % (PARM_BOUNDARY / BITS_PER_UNIT))) \\\n+\t   && (FUNCTION_ARG_PADDING (MODE, TYPE)\t\\\n+\t       == (BYTES_BIG_ENDIAN ? upward : downward)))))\n+\n /* Under the old (i.e., 32 and O64 ABIs) all BLKmode objects are\n    returned in memory.  Under the new (N32 and 64-bit MIPS ABIs) small\n    structures are returned in a register.  Objects with varying size"}, {"sha": "72a1e9c1ac9329997bd0f5bd591a0e072a6dd2b5", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9445b81426894118035f9b4765cba7c5bb6f8b05/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9445b81426894118035f9b4765cba7c5bb6f8b05/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9445b81426894118035f9b4765cba7c5bb6f8b05", "patch": "@@ -8069,6 +8069,9 @@ function_arg_pass_by_reference (cum, mode, type, named)\n {\n   int size;\n \n+  if (mips_abi == ABI_32 || mips_abi == ABI_O64)\n+    return 0;\n+\n   /* We must pass by reference if we would be both passing in registers\n      and the stack.  This is because any subsequent partial arg would be\n      handled incorrectly in this case."}]}