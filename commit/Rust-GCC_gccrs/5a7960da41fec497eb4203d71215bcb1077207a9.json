{"sha": "5a7960da41fec497eb4203d71215bcb1077207a9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWE3OTYwZGE0MWZlYzQ5N2ViNDIwM2Q3MTIxNWJjYjEwNzcyMDdhOQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-05-15T15:36:46Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-05-15T15:36:46Z"}, "message": "PR libstdc++/85749 constrain seed sequences for random number engines\n\nConstrain constructors and member functions of random number engines so\nthat functions taking seed sequences can only be called with types that\nmeet the seed sequence requirements.\n\n\tPR libstdc++/85749\n\t* include/bits/random.h (__detail::__is_seed_seq): New SFINAE helper.\n\t(linear_congruential_engine, mersenne_twister_engine)\n\t(subtract_with_carry_engine, discard_block_engine)\n\t(independent_bits_engine, shuffle_order_engine): Use __is_seed_seq to\n\tconstrain function templates taking seed sequences.\n\t* include/bits/random.tcc (linear_congruential_engine::seed(_Sseq&))\n\t(mersenne_twister_engine::seed(_Sseq&))\n\t(subtract_with_carry_engine::seed(_Sseq&)): Change return types to\n\tmatch declarations.\n\t* include/ext/random (simd_fast_mersenne_twister_engine): Use\n\t__is_seed_seq to constrain function templates taking seed sequences.\n\t* include/ext/random.tcc (simd_fast_mersenne_twister_engine::seed):\n\tChange return type to match declaration.\n\t* testsuite/26_numerics/random/discard_block_engine/cons/seed_seq2.cc:\n\tNew.\n\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n\tseed_seq2.cc: New.\n\t* testsuite/26_numerics/random/linear_congruential_engine/cons/\n\tseed_seq2.cc: New.\n\t* testsuite/26_numerics/random/mersenne_twister_engine/cons/\n\tseed_seq2.cc: New.\n\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error lineno.\n\t* testsuite/26_numerics/random/shuffle_order_engine/cons/seed_seq2.cc:\n\tNew.\n\t* testsuite/26_numerics/random/subtract_with_carry_engine/cons/\n\tseed_seq2.cc: New.\n\t* testsuite/ext/random/simd_fast_mersenne_twister_engine/cons/\n\tseed_seq2.cc: New.\n\nFrom-SVN: r260263", "tree": {"sha": "459507cfc4f9ff9bc0b70712e1db9fd0ce037432", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/459507cfc4f9ff9bc0b70712e1db9fd0ce037432"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5a7960da41fec497eb4203d71215bcb1077207a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a7960da41fec497eb4203d71215bcb1077207a9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5a7960da41fec497eb4203d71215bcb1077207a9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5a7960da41fec497eb4203d71215bcb1077207a9/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3b61fdadd7ffc9ef5c613c2df0ff4edf83ad0fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c3b61fdadd7ffc9ef5c613c2df0ff4edf83ad0fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c3b61fdadd7ffc9ef5c613c2df0ff4edf83ad0fc"}], "stats": {"total": 741, "additions": 704, "deletions": 37}, "files": [{"sha": "8359f4f5335ffa868e45b1f7b5cb22b322e77090", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5a7960da41fec497eb4203d71215bcb1077207a9", "patch": "@@ -1,5 +1,35 @@\n 2018-05-15  Jonathan Wakely  <jwakely@redhat.com>\n \n+\tPR libstdc++/85749\n+\t* include/bits/random.h (__detail::__is_seed_seq): New SFINAE helper.\n+\t(linear_congruential_engine, mersenne_twister_engine)\n+\t(subtract_with_carry_engine, discard_block_engine)\n+\t(independent_bits_engine, shuffle_order_engine): Use __is_seed_seq to\n+\tconstrain function templates taking seed sequences.\n+\t* include/bits/random.tcc (linear_congruential_engine::seed(_Sseq&))\n+\t(mersenne_twister_engine::seed(_Sseq&))\n+\t(subtract_with_carry_engine::seed(_Sseq&)): Change return types to\n+\tmatch declarations.\n+\t* include/ext/random (simd_fast_mersenne_twister_engine): Use\n+\t__is_seed_seq to constrain function templates taking seed sequences.\n+\t* include/ext/random.tcc (simd_fast_mersenne_twister_engine::seed):\n+\tChange return type to match declaration.\n+\t* testsuite/26_numerics/random/discard_block_engine/cons/seed_seq2.cc:\n+\tNew.\n+\t* testsuite/26_numerics/random/independent_bits_engine/cons/\n+\tseed_seq2.cc: New.\n+\t* testsuite/26_numerics/random/linear_congruential_engine/cons/\n+\tseed_seq2.cc: New.\n+\t* testsuite/26_numerics/random/mersenne_twister_engine/cons/\n+\tseed_seq2.cc: New.\n+\t* testsuite/26_numerics/random/pr60037-neg.cc: Adjust dg-error lineno.\n+\t* testsuite/26_numerics/random/shuffle_order_engine/cons/seed_seq2.cc:\n+\tNew.\n+\t* testsuite/26_numerics/random/subtract_with_carry_engine/cons/\n+\tseed_seq2.cc: New.\n+\t* testsuite/ext/random/simd_fast_mersenne_twister_engine/cons/\n+\tseed_seq2.cc: New.\n+\n \tPR libstdc++/83891\n \t* include/bits/fs_path.h (path::is_absolute()): Use same definition\n \tfor all operating systems."}, {"sha": "b76cfbb558e1d3bbd520dfcf2ccc65f43064fd0b", "filename": "libstdc++-v3/include/bits/random.h", "status": "modified", "additions": 51, "deletions": 27, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.h?ref=5a7960da41fec497eb4203d71215bcb1077207a9", "patch": "@@ -185,6 +185,21 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t_Engine& _M_g;\n       };\n \n+    template<typename _Sseq>\n+      using __seed_seq_generate_t = decltype(\n+\t  std::declval<_Sseq&>().generate(std::declval<uint_least32_t*>(),\n+\t\t\t\t\t  std::declval<uint_least32_t*>()));\n+\n+    // Detect whether _Sseq is a valid seed sequence for\n+    // a random number engine _Engine with result type _Res.\n+    template<typename _Sseq, typename _Engine, typename _Res,\n+\t     typename _GenerateCheck = __seed_seq_generate_t<_Sseq>>\n+      using __is_seed_seq = __and_<\n+        __not_<is_same<__remove_cvref_t<_Sseq>, _Engine>>,\n+\tis_unsigned<typename _Sseq::result_type>,\n+\t__not_<is_convertible<_Sseq, _Res>>\n+      >;\n+\n   } // namespace __detail\n \n   /**\n@@ -233,6 +248,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(__m == 0u || (__a < __m && __c < __m),\n \t\t    \"template argument substituting __m out of bounds\");\n \n+      template<typename _Sseq>\n+\tusing _If_seed_seq = typename enable_if<__detail::__is_seed_seq<\n+\t  _Sseq, linear_congruential_engine, _UIntType>::value>::type;\n+\n     public:\n       /** The type of the generated random value. */\n       typedef _UIntType result_type;\n@@ -262,9 +281,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * @param __q the seed sequence.\n        */\n-      template<typename _Sseq, typename = typename\n-\tstd::enable_if<!std::is_same<_Sseq, linear_congruential_engine>::value>\n-\t       ::type>\n+      template<typename _Sseq, typename = _If_seed_seq<_Sseq>>\n         explicit\n         linear_congruential_engine(_Sseq& __q)\n         { seed(__q); }\n@@ -286,7 +303,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @param __q the seed sequence.\n        */\n       template<typename _Sseq>\n-        typename std::enable_if<std::is_class<_Sseq>::value>::type\n+        _If_seed_seq<_Sseq>\n         seed(_Sseq& __q);\n \n       /**\n@@ -463,6 +480,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(__f <= (__detail::_Shift<_UIntType, __w>::__value - 1),\n \t\t    \"template argument substituting __f out of bound\");\n \n+      template<typename _Sseq>\n+\tusing _If_seed_seq = typename enable_if<__detail::__is_seed_seq<\n+\t  _Sseq, mersenne_twister_engine, _UIntType>::value>::type;\n+\n     public:\n       /** The type of the generated random value. */\n       typedef _UIntType result_type;\n@@ -494,9 +515,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * @param __q the seed sequence.\n        */\n-      template<typename _Sseq, typename = typename\n-        std::enable_if<!std::is_same<_Sseq, mersenne_twister_engine>::value>\n-\t       ::type>\n+      template<typename _Sseq, typename = _If_seed_seq<_Sseq>>\n         explicit\n         mersenne_twister_engine(_Sseq& __q)\n         { seed(__q); }\n@@ -505,7 +524,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       seed(result_type __sd = default_seed);\n \n       template<typename _Sseq>\n-\ttypename std::enable_if<std::is_class<_Sseq>::value>::type\n+        _If_seed_seq<_Sseq>\n         seed(_Sseq& __q);\n \n       /**\n@@ -658,6 +677,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,\n \t\t    \"template argument substituting __w out of bounds\");\n \n+      template<typename _Sseq>\n+\tusing _If_seed_seq = typename enable_if<__detail::__is_seed_seq<\n+\t  _Sseq, subtract_with_carry_engine, _UIntType>::value>::type;\n+\n     public:\n       /** The type of the generated random value. */\n       typedef _UIntType result_type;\n@@ -682,9 +705,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * @param __q the seed sequence.\n        */\n-      template<typename _Sseq, typename = typename\n-        std::enable_if<!std::is_same<_Sseq, subtract_with_carry_engine>::value>\n-\t       ::type>\n+      template<typename _Sseq, typename = _If_seed_seq<_Sseq>>\n         explicit\n         subtract_with_carry_engine(_Sseq& __q)\n         { seed(__q); }\n@@ -709,7 +730,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * % subtract_with_carry_engine random number generator.\n        */\n       template<typename _Sseq>\n-\ttypename std::enable_if<std::is_class<_Sseq>::value>::type\n+\t_If_seed_seq<_Sseq>\n         seed(_Sseq& __q);\n \n       /**\n@@ -845,6 +866,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /** The type of the generated random value. */\n       typedef typename _RandomNumberEngine::result_type result_type;\n \n+      template<typename _Sseq>\n+\tusing _If_seed_seq = typename enable_if<__detail::__is_seed_seq<\n+\t  _Sseq, discard_block_engine, result_type>::value>::type;\n+\n       // parameter values\n       static constexpr size_t block_size = __p;\n       static constexpr size_t used_block = __r;\n@@ -892,10 +917,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * @param __q A seed sequence.\n        */\n-      template<typename _Sseq, typename = typename\n-\tstd::enable_if<!std::is_same<_Sseq, discard_block_engine>::value\n-\t\t       && !std::is_same<_Sseq, _RandomNumberEngine>::value>\n-\t       ::type>\n+      template<typename _Sseq, typename = _If_seed_seq<_Sseq>>\n         explicit\n         discard_block_engine(_Sseq& __q)\n \t: _M_b(__q), _M_n(0)\n@@ -929,7 +951,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @param __q A seed generator function.\n        */\n       template<typename _Sseq>\n-        void\n+        _If_seed_seq<_Sseq>\n         seed(_Sseq& __q)\n         {\n \t  _M_b.seed(__q);\n@@ -1063,6 +1085,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(0u < __w && __w <= std::numeric_limits<_UIntType>::digits,\n \t\t    \"template argument substituting __w out of bounds\");\n \n+      template<typename _Sseq>\n+\tusing _If_seed_seq = typename enable_if<__detail::__is_seed_seq<\n+\t  _Sseq, independent_bits_engine, _UIntType>::value>::type;\n+\n     public:\n       /** The type of the generated random value. */\n       typedef _UIntType result_type;\n@@ -1110,10 +1136,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * @param __q A seed sequence.\n        */\n-      template<typename _Sseq, typename = typename\n-\tstd::enable_if<!std::is_same<_Sseq, independent_bits_engine>::value\n-\t\t       && !std::is_same<_Sseq, _RandomNumberEngine>::value>\n-               ::type>\n+      template<typename _Sseq, typename = _If_seed_seq<_Sseq>>\n         explicit\n         independent_bits_engine(_Sseq& __q)\n         : _M_b(__q)\n@@ -1141,7 +1164,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @param __q A seed generator function.\n        */\n       template<typename _Sseq>\n-        void\n+        _If_seed_seq<_Sseq>\n         seed(_Sseq& __q)\n         { _M_b.seed(__q); }\n \n@@ -1283,6 +1306,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       /** The type of the generated random value. */\n       typedef typename _RandomNumberEngine::result_type result_type;\n \n+      template<typename _Sseq>\n+\tusing _If_seed_seq = typename enable_if<__detail::__is_seed_seq<\n+\t  _Sseq, shuffle_order_engine, result_type>::value>::type;\n+\n       static constexpr size_t table_size = __k;\n \n       /**\n@@ -1332,10 +1359,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        *\n        * @param __q A seed sequence.\n        */\n-      template<typename _Sseq, typename = typename\n-\tstd::enable_if<!std::is_same<_Sseq, shuffle_order_engine>::value\n-\t\t       && !std::is_same<_Sseq, _RandomNumberEngine>::value>\n-\t       ::type>\n+      template<typename _Sseq, typename = _If_seed_seq<_Sseq>>\n         explicit\n         shuffle_order_engine(_Sseq& __q)\n         : _M_b(__q)\n@@ -1369,7 +1393,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n        * @param __q A seed generator function.\n        */\n       template<typename _Sseq>\n-        void\n+        _If_seed_seq<_Sseq>\n         seed(_Sseq& __q)\n         {\n \t  _M_b.seed(__q);"}, {"sha": "9ec29895d27b4ed66ab058d0d8db979436b06ac9", "filename": "libstdc++-v3/include/bits/random.tcc", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Frandom.tcc?ref=5a7960da41fec497eb4203d71215bcb1077207a9", "patch": "@@ -128,9 +128,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n    */\n   template<typename _UIntType, _UIntType __a, _UIntType __c, _UIntType __m>\n     template<typename _Sseq>\n-      typename std::enable_if<std::is_class<_Sseq>::value>::type\n+      auto\n       linear_congruential_engine<_UIntType, __a, __c, __m>::\n       seed(_Sseq& __q)\n+      -> _If_seed_seq<_Sseq>\n       {\n \tconst _UIntType __k0 = __m == 0 ? std::numeric_limits<_UIntType>::digits\n \t                                : std::__lg(__m);\n@@ -346,10 +347,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   _UIntType __b, size_t __t, _UIntType __c, size_t __l,\n \t   _UIntType __f>\n     template<typename _Sseq>\n-      typename std::enable_if<std::is_class<_Sseq>::value>::type\n+      auto\n       mersenne_twister_engine<_UIntType, __w, __n, __m, __r, __a, __u, __d,\n \t\t\t      __s, __b, __t, __c, __l, __f>::\n       seed(_Sseq& __q)\n+      -> _If_seed_seq<_Sseq>\n       {\n \tconst _UIntType __upper_mask = (~_UIntType()) << __r;\n \tconst size_t __k = (__w + 31) / 32;\n@@ -564,9 +566,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _UIntType, size_t __w, size_t __s, size_t __r>\n     template<typename _Sseq>\n-      typename std::enable_if<std::is_class<_Sseq>::value>::type\n+      auto\n       subtract_with_carry_engine<_UIntType, __w, __s, __r>::\n       seed(_Sseq& __q)\n+      -> _If_seed_seq<_Sseq>\n       {\n \tconst size_t __k = (__w + 31) / 32;\n \tuint_least32_t __arr[__r * __k];"}, {"sha": "7e931865af33a43d1151b0d44eaa4ae6bec0e5b5", "filename": "libstdc++-v3/include/ext/random", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom?ref=5a7960da41fec497eb4203d71215bcb1077207a9", "patch": "@@ -85,6 +85,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       static_assert(16 % sizeof(_UIntType) == 0,\n \t\t    \"UIntType size must divide 16\");\n \n+      template<typename _Sseq>\n+\tusing _If_seed_seq\n+\t  = typename std::enable_if<std::__detail::__is_seed_seq<\n+\t    _Sseq, simd_fast_mersenne_twister_engine, result_type>::value\n+\t    >::type;\n+\n     public:\n       static constexpr size_t state_size = _M_nstate * (16\n \t\t\t\t\t\t\t/ sizeof(result_type));\n@@ -95,10 +101,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       simd_fast_mersenne_twister_engine(result_type __sd = default_seed)\n       { seed(__sd); }\n \n-      template<typename _Sseq, typename = typename\n-\tstd::enable_if<!std::is_same<_Sseq,\n-\t\t\t\t     simd_fast_mersenne_twister_engine>::value>\n-\t       ::type>\n+      template<typename _Sseq, typename = _If_seed_seq<_Sseq>>\n \texplicit\n \tsimd_fast_mersenne_twister_engine(_Sseq& __q)\n \t{ seed(__q); }\n@@ -107,7 +110,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       seed(result_type __sd = default_seed);\n \n       template<typename _Sseq>\n-\ttypename std::enable_if<std::is_class<_Sseq>::value>::type\n+\t_If_seed_seq<_Sseq>\n \tseed(_Sseq& __q);\n \n       static constexpr result_type"}, {"sha": "d845f253ab7414c61ca7fbddc6a3dacbe49fa944", "filename": "libstdc++-v3/include/ext/random.tcc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Frandom.tcc?ref=5a7960da41fec497eb4203d71215bcb1077207a9", "patch": "@@ -85,13 +85,14 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t   uint32_t __parity1, uint32_t __parity2,\n \t   uint32_t __parity3, uint32_t __parity4>\n     template<typename _Sseq>\n-      typename std::enable_if<std::is_class<_Sseq>::value>::type\n+      auto\n       simd_fast_mersenne_twister_engine<_UIntType, __m,\n \t\t\t\t\t__pos1, __sl1, __sl2, __sr1, __sr2,\n \t\t\t\t\t__msk1, __msk2, __msk3, __msk4,\n \t\t\t\t\t__parity1, __parity2, __parity3,\n \t\t\t\t\t__parity4>::\n       seed(_Sseq& __q)\n+      -> _If_seed_seq<_Sseq>\n       {\n \tsize_t __lag;\n "}, {"sha": "0e44ffff2ebf64445538f809cb26daf9780e98bb", "filename": "libstdc++-v3/testsuite/26_numerics/random/discard_block_engine/cons/seed_seq2.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed_seq2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed_seq2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fdiscard_block_engine%2Fcons%2Fseed_seq2.cc?ref=5a7960da41fec497eb4203d71215bcb1077207a9", "patch": "@@ -0,0 +1,87 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+struct seed_seq\n+{\n+  using result_type = unsigned;\n+\n+  seed_seq() { }\n+\n+  template<class U>\n+    seed_seq(std::initializer_list<U>) { }\n+\n+  template<class InputIterator>\n+    seed_seq(InputIterator, InputIterator) { }\n+\n+  template<class RandomAccessIterator>\n+    void generate(RandomAccessIterator first, RandomAccessIterator last)\n+    {\n+      called = true;\n+      if (first != last)\n+\t*first = 42;\n+    }\n+\n+  size_t size() const { called = true; return 1; }\n+\n+  template<class OutputIterator>\n+    void param(OutputIterator dest) const { called = true; dest = 42; }\n+\n+  // Prevents this type being considered as a seed sequence when\n+  // T is convertible to the engine's result_type:\n+  operator T() const noexcept { return T(); }\n+\n+  bool called = false;\n+};\n+\n+using engine_type\n+  = std::discard_block_engine\n+    <\n+      std::subtract_with_carry_engine<unsigned long, 24, 10, 24>,\n+      389, 24\n+    >;\n+\n+void\n+test01()\n+{\n+  seed_seq<unsigned> seed;\n+  engine_type x(seed);\n+  VERIFY( ! seed.called );\n+}\n+\n+void\n+test02()\n+{\n+  seed_seq<void*> seed;\n+  engine_type x(seed);\n+  VERIFY( seed.called );\n+\n+  static_assert(!std::is_constructible<engine_type, const seed_seq<void>&>(),\n+      \"Cannot construct from a const seed_seq\");\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "4fad65121d634f25d10f86f3d59afe0f9d5b1ad8", "filename": "libstdc++-v3/testsuite/26_numerics/random/independent_bits_engine/cons/seed_seq2.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fseed_seq2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fseed_seq2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Findependent_bits_engine%2Fcons%2Fseed_seq2.cc?ref=5a7960da41fec497eb4203d71215bcb1077207a9", "patch": "@@ -0,0 +1,88 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+struct seed_seq\n+{\n+  using result_type = unsigned;\n+\n+  seed_seq() { }\n+\n+  template<class U>\n+    seed_seq(std::initializer_list<U>) { }\n+\n+  template<class InputIterator>\n+    seed_seq(InputIterator, InputIterator) { }\n+\n+  template<class RandomAccessIterator>\n+    void generate(RandomAccessIterator first, RandomAccessIterator last)\n+    {\n+      called = true;\n+      if (first != last)\n+\t*first = 42;\n+    }\n+\n+  size_t size() const { called = true; return 1; }\n+\n+  template<class OutputIterator>\n+    void param(OutputIterator dest) const { called = true; dest = 42; }\n+\n+  // Prevents this type being considered as a seed sequence when\n+  // T is convertible to the engine's result_type:\n+  operator T() const noexcept { return T(); }\n+\n+  bool called = false;\n+};\n+\n+using engine_type\n+  = std::independent_bits_engine\n+    <\n+      std::subtract_with_carry_engine<uint_fast64_t, 48, 5, 12>,\n+      48,\n+      uint_fast64_t\n+    >;\n+\n+void\n+test01()\n+{\n+  seed_seq<unsigned> seed;\n+  engine_type x(seed);\n+  VERIFY( ! seed.called );\n+}\n+\n+void\n+test02()\n+{\n+  seed_seq<void*> seed;\n+  engine_type x(seed);\n+  VERIFY( seed.called );\n+\n+  static_assert(!std::is_constructible<engine_type, const seed_seq<void>&>(),\n+      \"Cannot construct from a const seed_seq\");\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "3330b47ea707230aba25d554e0d61d8930a3002f", "filename": "libstdc++-v3/testsuite/26_numerics/random/linear_congruential_engine/cons/seed_seq2.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fseed_seq2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fseed_seq2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Flinear_congruential_engine%2Fcons%2Fseed_seq2.cc?ref=5a7960da41fec497eb4203d71215bcb1077207a9", "patch": "@@ -0,0 +1,83 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+struct seed_seq\n+{\n+  using result_type = unsigned;\n+\n+  seed_seq() { }\n+\n+  template<class U>\n+    seed_seq(std::initializer_list<U>) { }\n+\n+  template<class InputIterator>\n+    seed_seq(InputIterator, InputIterator) { }\n+\n+  template<class RandomAccessIterator>\n+    void generate(RandomAccessIterator first, RandomAccessIterator last)\n+    {\n+      called = true;\n+      if (first != last)\n+\t*first = 42;\n+    }\n+\n+  size_t size() const { called = true; return 1; }\n+\n+  template<class OutputIterator>\n+    void param(OutputIterator dest) const { called = true; dest = 42; }\n+\n+  // Prevents this type being considered as a seed sequence when\n+  // T is convertible to the engine's result_type:\n+  operator T() const noexcept { return T(); }\n+\n+  bool called = false;\n+};\n+\n+using engine_type\n+  = std::linear_congruential_engine<unsigned, 48271, 0, 2147483647>;\n+\n+void\n+test01()\n+{\n+  seed_seq<unsigned> seed;\n+  engine_type x(seed);\n+  VERIFY( ! seed.called );\n+}\n+\n+void\n+test02()\n+{\n+  seed_seq<void*> seed;\n+  engine_type x(seed);\n+  VERIFY( seed.called );\n+\n+  static_assert(!std::is_constructible<engine_type, const seed_seq<void>&>(),\n+      \"Cannot construct from a const seed_seq\");\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "d900bc378d8663e814f3fff1eb2ba1b51f5c2ba5", "filename": "libstdc++-v3/testsuite/26_numerics/random/mersenne_twister_engine/cons/seed_seq2.cc", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fseed_seq2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fseed_seq2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fmersenne_twister_engine%2Fcons%2Fseed_seq2.cc?ref=5a7960da41fec497eb4203d71215bcb1077207a9", "patch": "@@ -0,0 +1,88 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+struct seed_seq\n+{\n+  using result_type = unsigned;\n+\n+  seed_seq() { }\n+\n+  template<class U>\n+    seed_seq(std::initializer_list<U>) { }\n+\n+  template<class InputIterator>\n+    seed_seq(InputIterator, InputIterator) { }\n+\n+  template<class RandomAccessIterator>\n+    void generate(RandomAccessIterator first, RandomAccessIterator last)\n+    {\n+      called = true;\n+      if (first != last)\n+\t*first = 42;\n+    }\n+\n+  size_t size() const { called = true; return 1; }\n+\n+  template<class OutputIterator>\n+    void param(OutputIterator dest) const { called = true; dest = 42; }\n+\n+  // Prevents this type being considered as a seed sequence when\n+  // T is convertible to the engine's result_type:\n+  operator T() const noexcept { return T(); }\n+\n+  bool called = false;\n+};\n+\n+using engine_type\n+  = std::mersenne_twister_engine<\n+    unsigned long, 32, 624, 397, 31,\n+    0x9908b0dful, 11,\n+    0xfffffffful, 7,\n+    0x9d2c5680ul, 15,\n+    0xefc60000ul, 18, 1812433253ul>;\n+\n+void\n+test01()\n+{\n+  seed_seq<unsigned> seed;\n+  engine_type x(seed);\n+  VERIFY( ! seed.called );\n+}\n+\n+void\n+test02()\n+{\n+  seed_seq<void*> seed;\n+  engine_type x(seed);\n+  VERIFY( seed.called );\n+\n+  static_assert(!std::is_constructible<engine_type, const seed_seq<void>&>(),\n+      \"Cannot construct from a const seed_seq\");\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "1ead99cffc47595b7adb44178c92574fae71ea14", "filename": "libstdc++-v3/testsuite/26_numerics/random/pr60037-neg.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fpr60037-neg.cc?ref=5a7960da41fec497eb4203d71215bcb1077207a9", "patch": "@@ -11,4 +11,4 @@ auto x = std::generate_canonical<std::size_t,\n \n // { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 156 }\n \n-// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3317 }\n+// { dg-error \"static assertion failed: template argument must be a floating point type\" \"\" { target *-*-* } 3320 }"}, {"sha": "13ad5e595e68030e36a6f46a4268ab2cfe1342bf", "filename": "libstdc++-v3/testsuite/26_numerics/random/shuffle_order_engine/cons/seed_seq2.cc", "status": "added", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fseed_seq2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fseed_seq2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fshuffle_order_engine%2Fcons%2Fseed_seq2.cc?ref=5a7960da41fec497eb4203d71215bcb1077207a9", "patch": "@@ -0,0 +1,87 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+struct seed_seq\n+{\n+  using result_type = unsigned;\n+\n+  seed_seq() { }\n+\n+  template<class U>\n+    seed_seq(std::initializer_list<U>) { }\n+\n+  template<class InputIterator>\n+    seed_seq(InputIterator, InputIterator) { }\n+\n+  template<class RandomAccessIterator>\n+    void generate(RandomAccessIterator first, RandomAccessIterator last)\n+    {\n+      called = true;\n+      if (first != last)\n+\t*first = 42;\n+    }\n+\n+  size_t size() const { called = true; return 1; }\n+\n+  template<class OutputIterator>\n+    void param(OutputIterator dest) const { called = true; dest = 42; }\n+\n+  // Prevents this type being considered as a seed sequence when\n+  // T is convertible to the engine's result_type:\n+  operator T() const noexcept { return T(); }\n+\n+  bool called = false;\n+};\n+\n+using engine_type\n+  = std::shuffle_order_engine\n+    <\n+      std::linear_congruential_engine<uint_fast32_t,16807UL, 0UL, 2147483647UL>,\n+      256\n+    >;\n+\n+void\n+test01()\n+{\n+  seed_seq<unsigned> seed;\n+  engine_type x(seed);\n+  VERIFY( ! seed.called );\n+}\n+\n+void\n+test02()\n+{\n+  seed_seq<void*> seed;\n+  engine_type x(seed);\n+  VERIFY( seed.called );\n+\n+  static_assert(!std::is_constructible<engine_type, const seed_seq<void>&>(),\n+      \"Cannot construct from a const seed_seq\");\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "e4a13a72b45b06078315a3dfa6c99f2df352a408", "filename": "libstdc++-v3/testsuite/26_numerics/random/subtract_with_carry_engine/cons/seed_seq2.cc", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fseed_seq2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fseed_seq2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F26_numerics%2Frandom%2Fsubtract_with_carry_engine%2Fcons%2Fseed_seq2.cc?ref=5a7960da41fec497eb4203d71215bcb1077207a9", "patch": "@@ -0,0 +1,83 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+\n+#include <random>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+struct seed_seq\n+{\n+  using result_type = unsigned;\n+\n+  seed_seq() { }\n+\n+  template<class U>\n+    seed_seq(std::initializer_list<U>) { }\n+\n+  template<class InputIterator>\n+    seed_seq(InputIterator, InputIterator) { }\n+\n+  template<class RandomAccessIterator>\n+    void generate(RandomAccessIterator first, RandomAccessIterator last)\n+    {\n+      called = true;\n+      if (first != last)\n+\t*first = 42;\n+    }\n+\n+  size_t size() const { called = true; return 1; }\n+\n+  template<class OutputIterator>\n+    void param(OutputIterator dest) const { called = true; dest = 42; }\n+\n+  // Prevents this type being considered as a seed sequence when\n+  // T is convertible to the engine's result_type:\n+  operator T() const noexcept { return T(); }\n+\n+  bool called = false;\n+};\n+\n+using engine_type\n+  = std::subtract_with_carry_engine<unsigned long, 24, 10, 24>;\n+\n+void\n+test01()\n+{\n+  seed_seq<unsigned> seed;\n+  engine_type x(seed);\n+  VERIFY( ! seed.called );\n+}\n+\n+void\n+test02()\n+{\n+  seed_seq<void*> seed;\n+  engine_type x(seed);\n+  VERIFY( seed.called );\n+\n+  static_assert(!std::is_constructible<engine_type, const seed_seq<void>&>(),\n+      \"Cannot construct from a const seed_seq\");\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "325e27517b197e7f71afd66e08ade91db27c0fbb", "filename": "libstdc++-v3/testsuite/ext/random/simd_fast_mersenne_twister_engine/cons/seed_seq2.cc", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fseed_seq2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5a7960da41fec497eb4203d71215bcb1077207a9/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fseed_seq2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Frandom%2Fsimd_fast_mersenne_twister_engine%2Fcons%2Fseed_seq2.cc?ref=5a7960da41fec497eb4203d71215bcb1077207a9", "patch": "@@ -0,0 +1,90 @@\n+// Copyright (C) 2018 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-do run { target c++11 } }\n+// { dg-require-cstdint \"\" }\n+// { dg-require-little-endian \"\" }\n+\n+#include <ext/random>\n+#include <testsuite_hooks.h>\n+\n+template<typename T>\n+struct seed_seq\n+{\n+  using result_type = unsigned;\n+\n+  seed_seq() { }\n+\n+  template<class U>\n+    seed_seq(std::initializer_list<U>) { }\n+\n+  template<class InputIterator>\n+    seed_seq(InputIterator, InputIterator) { }\n+\n+  template<class RandomAccessIterator>\n+    void generate(RandomAccessIterator first, RandomAccessIterator last)\n+    {\n+      called = true;\n+      if (first != last)\n+\t*first = 42;\n+    }\n+\n+  size_t size() const { called = true; return 1; }\n+\n+  template<class OutputIterator>\n+    void param(OutputIterator dest) const { called = true; dest = 42; }\n+\n+  // Prevents this type being considered as a seed sequence when\n+  // T is convertible to the engine's result_type:\n+  operator T() const noexcept { return T(); }\n+\n+  bool called = false;\n+};\n+\n+using engine_type\n+  = __gnu_cxx::simd_fast_mersenne_twister_engine<\n+    uint32_t, 607, 2,\n+    15, 3, 13, 3,\n+    0xfdff37ffU, 0xef7f3f7dU,\n+    0xff777b7dU, 0x7ff7fb2fU,\n+    0x00000001U, 0x00000000U,\n+    0x00000000U, 0x5986f054U>;\n+\n+void\n+test01()\n+{\n+  seed_seq<unsigned> seed;\n+  engine_type x(seed);\n+  VERIFY( ! seed.called );\n+}\n+\n+void\n+test02()\n+{\n+  seed_seq<void*> seed;\n+  engine_type x(seed);\n+  VERIFY( seed.called );\n+\n+  static_assert(!std::is_constructible<engine_type, const seed_seq<void>&>(),\n+      \"Cannot construct from a const seed_seq\");\n+}\n+\n+int main()\n+{\n+  test01();\n+  test02();\n+}"}]}