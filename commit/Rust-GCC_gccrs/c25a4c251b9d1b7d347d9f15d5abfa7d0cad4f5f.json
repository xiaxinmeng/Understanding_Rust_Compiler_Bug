{"sha": "c25a4c251b9d1b7d347d9f15d5abfa7d0cad4f5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI1YTRjMjUxYjlkMWI3ZDM0N2Q5ZjE1ZDVhYmZhN2QwY2FkNGY1Zg==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-01T23:23:33Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-01-01T23:23:33Z"}, "message": "(reg_equiv_replacement): New variable.\n\n(memref_referenced_p, case REG): Check for reg_equiv_replacement.\n(update_equiv_regs): reg_equiv_replacement now file-scope.\n\nFrom-SVN: r10930", "tree": {"sha": "d52fd3496b36804b391352e694101483470e9392", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d52fd3496b36804b391352e694101483470e9392"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c25a4c251b9d1b7d347d9f15d5abfa7d0cad4f5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25a4c251b9d1b7d347d9f15d5abfa7d0cad4f5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c25a4c251b9d1b7d347d9f15d5abfa7d0cad4f5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c25a4c251b9d1b7d347d9f15d5abfa7d0cad4f5f/comments", "author": null, "committer": null, "parents": [{"sha": "54630035ff8efa09f5af7c68ea2942ca97e1cb00", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54630035ff8efa09f5af7c68ea2942ca97e1cb00", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54630035ff8efa09f5af7c68ea2942ca97e1cb00"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "b11cf2a9ab181fe05a33aa4ee1ae4629a8663e2b", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c25a4c251b9d1b7d347d9f15d5abfa7d0cad4f5f/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c25a4c251b9d1b7d347d9f15d5abfa7d0cad4f5f/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=c25a4c251b9d1b7d347d9f15d5abfa7d0cad4f5f", "patch": "@@ -1,5 +1,5 @@\n /* Allocate registers within a basic block, for GNU compiler.\n-   Copyright (C) 1987, 88, 91, 93, 94, 1995 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 88, 91, 93, 94, 95, 1996 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -235,6 +235,10 @@ static int scratch_index;\n static int this_insn_number;\n static rtx this_insn;\n \n+/* Used to communicate changes made by update_equiv_regs to\n+   memref_referenced_p.  */\n+static rtx *reg_equiv_replacement;\n+\n static void alloc_qty\t\tPROTO((int, enum machine_mode, int, int));\n static void alloc_qty_for_scratch PROTO((rtx, int, rtx, int, int));\n static void validate_equiv_mem_from_store PROTO((rtx, rtx));\n@@ -609,7 +613,6 @@ memref_referenced_p (memref, x)\n \n   switch (code)\n     {\n-    case REG:\n     case CONST_INT:\n     case CONST:\n     case LABEL_REF:\n@@ -621,6 +624,11 @@ memref_referenced_p (memref, x)\n     case LO_SUM:\n       return 0;\n \n+    case REG:\n+      return (reg_equiv_replacement[REGNO (x)] == 0\n+\t      || memref_referenced_p (memref,\n+\t\t\t\t      reg_equiv_replacement[REGNO (x)]));\n+\n     case MEM:\n       if (true_dependence (memref, x))\n \treturn 1;\n@@ -941,9 +949,10 @@ static void\n update_equiv_regs ()\n {\n   rtx *reg_equiv_init_insn = (rtx *) alloca (max_regno * sizeof (rtx *));\n-  rtx *reg_equiv_replacement = (rtx *) alloca (max_regno * sizeof (rtx *));\n   rtx insn;\n \n+  reg_equiv_replacement = (rtx *) alloca (max_regno * sizeof (rtx *));\n+\n   bzero ((char *) reg_equiv_init_insn, max_regno * sizeof (rtx *));\n   bzero ((char *) reg_equiv_replacement, max_regno * sizeof (rtx *));\n "}]}