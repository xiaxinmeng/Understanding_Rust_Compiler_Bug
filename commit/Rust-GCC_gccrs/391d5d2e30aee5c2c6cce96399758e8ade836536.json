{"sha": "391d5d2e30aee5c2c6cce96399758e8ade836536", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzkxZDVkMmUzMGFlZTVjMmM2Y2NlOTYzOTk3NThlOGFkZTgzNjUzNg==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2019-09-10T07:35:36Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2019-09-10T07:35:36Z"}, "message": "Optimise std::remove_cv and use more helper aliases\n\nDefine partial specializations for std::remove_cv so that\nstd::remove_const and std::remove_volatile don't need to be\ninstantiated.\n\n\t* include/std/type_traits (__remove_cv_t): New alias template.\n\t(is_void, is_integral, is_floating_point, is_pointer)\n\t(is_member_object_pointer, is_member_function_pointer, is_null_pointer)\n\t(is_member_point), __is_signed_integer, __is_unsigned_integer)\n\t(__make_unsigned_selector, __make_signed_selector, remove_pointer)\n\t(__decay_selector): Use __remove_cv_t.\n\t(remove_cv): Add partial specializations for cv-qualified types.\n\t(__decay_t): New alias template.\n\t(__decay_and_strip, __common_type_impl, __result_of_impl): Use\n\t__decay_t.\n\t(__enable_if_t): Move earlier in the file.\n\t(_Require): Use __enable_if_t.\n\t(swap(T&, T&)): Use _Require.\n\t(swap(T(&)[N])): Use __enable_if_t.\n\nFrom-SVN: r275562", "tree": {"sha": "92bb2a04247d663fd9a76b0e7da3696f90eb6b24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92bb2a04247d663fd9a76b0e7da3696f90eb6b24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/391d5d2e30aee5c2c6cce96399758e8ade836536", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391d5d2e30aee5c2c6cce96399758e8ade836536", "html_url": "https://github.com/Rust-GCC/gccrs/commit/391d5d2e30aee5c2c6cce96399758e8ade836536", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/391d5d2e30aee5c2c6cce96399758e8ade836536/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4563bc4dc63664a64cb9ce6c426c689619c209e4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4563bc4dc63664a64cb9ce6c426c689619c209e4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4563bc4dc63664a64cb9ce6c426c689619c209e4"}], "stats": {"total": 103, "additions": 65, "deletions": 38}, "files": [{"sha": "6be181413ff54e6340ec49f1d051a30d392b33cf", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391d5d2e30aee5c2c6cce96399758e8ade836536/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391d5d2e30aee5c2c6cce96399758e8ade836536/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=391d5d2e30aee5c2c6cce96399758e8ade836536", "patch": "@@ -1,3 +1,20 @@\n+2019-09-10  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/type_traits (__remove_cv_t): New alias template.\n+\t(is_void, is_integral, is_floating_point, is_pointer)\n+\t(is_member_object_pointer, is_member_function_pointer, is_null_pointer)\n+\t(is_member_point), __is_signed_integer, __is_unsigned_integer)\n+\t(__make_unsigned_selector, __make_signed_selector, remove_pointer)\n+\t(__decay_selector): Use __remove_cv_t.\n+\t(remove_cv): Add partial specializations for cv-qualified types.\n+\t(__decay_t): New alias template.\n+\t(__decay_and_strip, __common_type_impl, __result_of_impl): Use\n+\t__decay_t.\n+\t(__enable_if_t): Move earlier in the file.\n+\t(_Require): Use __enable_if_t.\n+\t(swap(T&, T&)): Use _Require.\n+\t(swap(T(&)[N])): Use __enable_if_t.\n+\n 2019-09-09  Edward Smith-Rowland  <3dw4rd@verizon.net>\n \n \tImplement C++20 p1424 - 'constexpr' feature macro concerns,"}, {"sha": "d2f53591e5aa7c045605340476d783c1dd538e9c", "filename": "libstdc++-v3/include/std/type_traits", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/391d5d2e30aee5c2c6cce96399758e8ade836536/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/391d5d2e30aee5c2c6cce96399758e8ade836536/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Ftype_traits?ref=391d5d2e30aee5c2c6cce96399758e8ade836536", "patch": "@@ -226,6 +226,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename>\n     struct remove_cv;\n \n+  // __remove_cv_t (std::remove_cv_t for C++11).\n+  template<typename _Tp>\n+    using __remove_cv_t = typename remove_cv<_Tp>::type;\n+\n   template<typename>\n     struct is_const;\n \n@@ -242,7 +246,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_void\n   template<typename _Tp>\n     struct is_void\n-    : public __is_void_helper<typename remove_cv<_Tp>::type>::type\n+    : public __is_void_helper<__remove_cv_t<_Tp>>::type\n     { };\n \n   template<typename>\n@@ -359,7 +363,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_integral\n   template<typename _Tp>\n     struct is_integral\n-    : public __is_integral_helper<typename remove_cv<_Tp>::type>::type\n+    : public __is_integral_helper<__remove_cv_t<_Tp>>::type\n     { };\n \n   template<typename>\n@@ -387,7 +391,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_floating_point\n   template<typename _Tp>\n     struct is_floating_point\n-    : public __is_floating_point_helper<typename remove_cv<_Tp>::type>::type\n+    : public __is_floating_point_helper<__remove_cv_t<_Tp>>::type\n     { };\n \n   /// is_array\n@@ -414,7 +418,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_pointer\n   template<typename _Tp>\n     struct is_pointer\n-    : public __is_pointer_helper<typename remove_cv<_Tp>::type>::type\n+    : public __is_pointer_helper<__remove_cv_t<_Tp>>::type\n     { };\n \n   /// is_lvalue_reference\n@@ -446,8 +450,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_member_object_pointer\n   template<typename _Tp>\n     struct is_member_object_pointer\n-    : public __is_member_object_pointer_helper<\n-\t\t\t\ttypename remove_cv<_Tp>::type>::type\n+    : public __is_member_object_pointer_helper<__remove_cv_t<_Tp>>::type\n     { };\n \n   template<typename>\n@@ -461,8 +464,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_member_function_pointer\n   template<typename _Tp>\n     struct is_member_function_pointer\n-    : public __is_member_function_pointer_helper<\n-\t\t\t\ttypename remove_cv<_Tp>::type>::type\n+    : public __is_member_function_pointer_helper<__remove_cv_t<_Tp>>::type\n     { };\n \n   /// is_enum\n@@ -509,7 +511,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_null_pointer (LWG 2247).\n   template<typename _Tp>\n     struct is_null_pointer\n-    : public __is_null_pointer_helper<typename remove_cv<_Tp>::type>::type\n+    : public __is_null_pointer_helper<__remove_cv_t<_Tp>>::type\n     { };\n \n   /// __is_nullptr_t (deprecated extension).\n@@ -573,7 +575,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// is_member_pointer\n   template<typename _Tp>\n     struct is_member_pointer\n-    : public __is_member_pointer_helper<typename remove_cv<_Tp>::type>::type\n+    : public __is_member_pointer_helper<__remove_cv_t<_Tp>>::type\n     { };\n \n   template<typename, typename>\n@@ -584,7 +586,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Check if a type is one of the signed integer types.\n   template<typename _Tp>\n-    using __is_signed_integer = __is_one_of<typename remove_cv<_Tp>::type,\n+    using __is_signed_integer = __is_one_of<__remove_cv_t<_Tp>,\n \t  signed char, signed short, signed int, signed long,\n \t  signed long long\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n@@ -603,7 +605,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // Check if a type is one of the unsigned integer types.\n   template<typename _Tp>\n-    using __is_unsigned_integer = __is_one_of<typename remove_cv<_Tp>::type,\n+    using __is_unsigned_integer = __is_one_of<__remove_cv_t<_Tp>,\n \t  unsigned char, unsigned short, unsigned int, unsigned long,\n \t  unsigned long long\n #if defined(__GLIBCXX_TYPE_INT_N_0)\n@@ -1507,10 +1509,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// remove_cv\n   template<typename _Tp>\n     struct remove_cv\n-    {\n-      typedef typename\n-      remove_const<typename remove_volatile<_Tp>::type>::type     type;\n-    };\n+    { using type = _Tp; };\n+\n+  template<typename _Tp>\n+    struct remove_cv<const _Tp>\n+    { using type = _Tp; };\n+\n+  template<typename _Tp>\n+    struct remove_cv<volatile _Tp>\n+    { using type = _Tp; };\n+\n+  template<typename _Tp>\n+    struct remove_cv<const volatile _Tp>\n+    { using type = _Tp; };\n \n   /// add_const\n   template<typename _Tp>\n@@ -1709,7 +1720,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class __make_unsigned_selector<_Tp, true, false>\n     {\n       using __unsigned_type\n-\t= typename __make_unsigned<typename remove_cv<_Tp>::type>::__type;\n+\t= typename __make_unsigned<__remove_cv_t<_Tp>>::__type;\n \n     public:\n       using __type\n@@ -1863,7 +1874,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     class __make_signed_selector<_Tp, true, false>\n     {\n       using __signed_type\n-\t= typename __make_signed<typename remove_cv<_Tp>::type>::__type;\n+\t= typename __make_signed<__remove_cv_t<_Tp>>::__type;\n \n     public:\n       using __type\n@@ -1989,7 +2000,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   /// remove_pointer\n   template<typename _Tp>\n     struct remove_pointer\n-    : public __remove_pointer_helper<_Tp, typename remove_cv<_Tp>::type>\n+    : public __remove_pointer_helper<_Tp, __remove_cv_t<_Tp>>\n     { };\n \n   /// add_pointer\n@@ -2105,7 +2116,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   // NB: DR 705.\n   template<typename _Up>\n     struct __decay_selector<_Up, false, false>\n-    { typedef typename remove_cv<_Up>::type __type; };\n+    { typedef __remove_cv_t<_Up> __type; };\n \n   template<typename _Up>\n     struct __decay_selector<_Up, true, false>\n@@ -2125,6 +2136,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       typedef typename __decay_selector<__remove_type>::__type type;\n     };\n \n+  // __decay_t (std::decay_t for C++11).\n+  template<typename _Tp>\n+    using __decay_t = typename decay<_Tp>::type;\n+\n   template<typename _Tp>\n     class reference_wrapper;\n \n@@ -2142,11 +2157,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n \n   template<typename _Tp>\n-    struct __decay_and_strip\n-    {\n-      typedef typename __strip_reference_wrapper<\n-\ttypename decay<_Tp>::type>::__type __type;\n-    };\n+    using __decay_and_strip = __strip_reference_wrapper<__decay_t<_Tp>>;\n \n \n   // Primary template.\n@@ -2160,8 +2171,12 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     struct enable_if<true, _Tp>\n     { typedef _Tp type; };\n \n+  // __enable_if_t (std::enable_if_t for C++11)\n+  template<bool _Cond, typename _Tp = void>\n+    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;\n+\n   template<typename... _Cond>\n-    using _Require = typename enable_if<__and_<_Cond...>::value>::type;\n+    using _Require = __enable_if_t<__and_<_Cond...>::value>;\n \n   // Primary template.\n   /// Define a member typedef @c type to one of two argument types.\n@@ -2208,8 +2223,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   // If sizeof...(T) is two, ...\n   template<typename _Tp1, typename _Tp2,\n-\t   typename _Dp1 = typename decay<_Tp1>::type,\n-\t   typename _Dp2 = typename decay<_Tp2>::type>\n+\t   typename _Dp1 = __decay_t<_Tp1>, typename _Dp2 = __decay_t<_Tp2>>\n     struct __common_type_impl\n     {\n       // If is_same_v<T1, D1> is false or is_same_v<T2, D2> is false,\n@@ -2444,13 +2458,13 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n   template<typename _MemPtr, typename _Arg>\n     struct __result_of_impl<true, false, _MemPtr, _Arg>\n-    : public __result_of_memobj<typename decay<_MemPtr>::type,\n+    : public __result_of_memobj<__decay_t<_MemPtr>,\n \t\t\t\ttypename __inv_unwrap<_Arg>::type>\n     { };\n \n   template<typename _MemPtr, typename _Arg, typename... _Args>\n     struct __result_of_impl<false, true, _MemPtr, _Arg, _Args...>\n-    : public __result_of_memfun<typename decay<_MemPtr>::type,\n+    : public __result_of_memfun<__decay_t<_MemPtr>,\n \t\t\t\ttypename __inv_unwrap<_Arg>::type, _Args...>\n     { };\n \n@@ -2526,10 +2540,6 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using result_of_t = typename result_of<_Tp>::type;\n #endif // C++14\n \n-  // __enable_if_t (std::enable_if_t for C++11)\n-  template<bool _Cond, typename _Tp = void>\n-    using __enable_if_t = typename enable_if<_Cond, _Tp>::type;\n-\n #if __cplusplus >= 201703L || !defined(__STRICT_ANSI__) // c++17 or gnu++11\n #define __cpp_lib_void_t 201411\n   /// A metafunction that always yields void, used for detecting valid types.\n@@ -2607,17 +2617,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   template<typename _Tp>\n     _GLIBCXX20_CONSTEXPR\n     inline\n-    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,\n-\t\t\t      is_move_constructible<_Tp>,\n-\t\t\t      is_move_assignable<_Tp>>::value>::type\n+    _Require<__not_<__is_tuple_like<_Tp>>,\n+\t     is_move_constructible<_Tp>,\n+\t     is_move_assignable<_Tp>>\n     swap(_Tp&, _Tp&)\n     noexcept(__and_<is_nothrow_move_constructible<_Tp>,\n \t            is_nothrow_move_assignable<_Tp>>::value);\n \n   template<typename _Tp, size_t _Nm>\n     _GLIBCXX20_CONSTEXPR\n     inline\n-    typename enable_if<__is_swappable<_Tp>::value>::type\n+    __enable_if_t<__is_swappable<_Tp>::value>\n     swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])\n     noexcept(__is_nothrow_swappable<_Tp>::value);\n "}]}