{"sha": "b5e7450a1734f01b6453c2c56c3278954825a905", "node_id": "C_kwDOANBUbNoAKGI1ZTc0NTBhMTczNGYwMWI2NDUzYzJjNTZjMzI3ODk1NDgyNWE5MDU", "commit": {"author": {"name": "Ju-Zhe Zhong", "email": "juzhe.zhong@rivai.ai", "date": "2023-02-08T02:32:29Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2023-02-12T06:44:50Z"}, "message": "RISC-V: Add vadc.vvm/vadc.vxm C API tests\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/rvv/base/vadc-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc-4.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vvm-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vvm-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vvm-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vvm_tu-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vvm_tu-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vvm_tu-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vxm_rv32-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vxm_rv32-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vxm_rv32-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vxm_rv64-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vxm_rv64-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vxm_rv64-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vxm_tu_rv32-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vxm_tu_rv32-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vxm_tu_rv32-3.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vxm_tu_rv64-1.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vxm_tu_rv64-2.c: New test.\n\t* gcc.target/riscv/rvv/base/vadc_vxm_tu_rv64-3.c: New test.", "tree": {"sha": "e0307c0dbf550062d2a3f973f38da27af7a0579d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0307c0dbf550062d2a3f973f38da27af7a0579d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5e7450a1734f01b6453c2c56c3278954825a905", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e7450a1734f01b6453c2c56c3278954825a905", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5e7450a1734f01b6453c2c56c3278954825a905", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5e7450a1734f01b6453c2c56c3278954825a905/comments", "author": {"login": "zhongjuzhe", "id": 66454988, "node_id": "MDQ6VXNlcjY2NDU0OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/66454988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zhongjuzhe", "html_url": "https://github.com/zhongjuzhe", "followers_url": "https://api.github.com/users/zhongjuzhe/followers", "following_url": "https://api.github.com/users/zhongjuzhe/following{/other_user}", "gists_url": "https://api.github.com/users/zhongjuzhe/gists{/gist_id}", "starred_url": "https://api.github.com/users/zhongjuzhe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zhongjuzhe/subscriptions", "organizations_url": "https://api.github.com/users/zhongjuzhe/orgs", "repos_url": "https://api.github.com/users/zhongjuzhe/repos", "events_url": "https://api.github.com/users/zhongjuzhe/events{/privacy}", "received_events_url": "https://api.github.com/users/zhongjuzhe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb44a16d212e9d0c402340fe6627501ca2e50fb8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb44a16d212e9d0c402340fe6627501ca2e50fb8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb44a16d212e9d0c402340fe6627501ca2e50fb8"}], "stats": {"total": 5470, "additions": 5470, "deletions": 0}, "files": [{"sha": "ed3c4edc858f39c4daeddd3f698800c71ead3dd8", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc-1.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc-1.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vint32m1_t v3 = __riscv_vadc_vvm_i32m1 (v2, v2, mask, 4);\n+  vint32m1_t v4 = __riscv_vadc_vvm_i32m1_tu (v3, v2, v2, mask, 4);\n+  __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+void f2 (void * in, void *out)\n+{\n+  vbool32_t mask = *(vbool32_t*)in;\n+  asm volatile (\"\":::\"memory\");\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tumu (mask, v, in, 4);\n+  vint32m1_t v3 = __riscv_vadc_vvm_i32m1 (v2, v2, mask, 4);\n+  vint32m1_t v4 = __riscv_vadc_vvm_i32m1_tu (v3, v2, v2, mask, 4);\n+  __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 4 } } */\n+/* { dg-final { scan-assembler-not {vmv} } } */"}, {"sha": "df83902f4a576ca045a96a9a5373ff023a52e73c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc-2.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,48 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3\" } */\n+#include \"riscv_vector.h\"\n+\n+void f1 (void * in, void *out, int32_t x)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vint32m1_t v3 = __riscv_vadc_vxm_i32m1 (v2, -16, mask, 4);\n+  vint32m1_t v4 = __riscv_vadc_vxm_i32m1_tu (v3, v2, -16, mask, 4);\n+  __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+void f2 (void * in, void *out, int32_t x)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vint32m1_t v3 = __riscv_vadc_vxm_i32m1 (v2, 15, mask, 4);\n+  vint32m1_t v4 = __riscv_vadc_vxm_i32m1_tu (v3, v2, 15, mask, 4);\n+  __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+void f3 (void * in, void *out, int32_t x)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vint32m1_t v3 = __riscv_vadc_vxm_i32m1 (v2, -17, mask, 4);\n+  vint32m1_t v4 = __riscv_vadc_vxm_i32m1_tu (v3, v2, -17, mask, 4);\n+  __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+void f4 (void * in, void *out, int32_t x)\n+{\n+  vbool32_t mask = __riscv_vlm_v_b32 (in + 100, 4);\n+  vint32m1_t v = __riscv_vle32_v_i32m1 (in, 4);\n+  vint32m1_t v2 = __riscv_vle32_v_i32m1_tu (v, in, 4);\n+  vint32m1_t v3 = __riscv_vadc_vxm_i32m1 (v2, 16, mask, 4);\n+  vint32m1_t v4 = __riscv_vadc_vxm_i32m1_tu (v3, v2, 16, mask, 4);\n+  __riscv_vse32_v_i32m1 (out, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vadc\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*-16,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*15,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 4 } } */\n+"}, {"sha": "a0c2e0de8d6aa42d11a5b4db022c0d46edffe124", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc-3.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc-3.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,78 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, -16, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, -16, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, 15, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, 15, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, -17, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, -17, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, 16, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, 16, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, 0xAAAAAAAA, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, 0xAAAAAAAA, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, x, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, x, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vadc\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*-16,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*15,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 10 } } */"}, {"sha": "550834c1d306f1a23c48210a3bc95dc0dbca0711", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc-4.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc-4.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32 -O3\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+void f0 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, -16, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, -16, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f1 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, 15, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, 15, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f2 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, -17, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, -17, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f3 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, 16, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, 16, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f4 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, 0xAAAAAAA, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, 0xAAAAAAA, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f5 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, 0xAAAAAAAAAAAAAAAA, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, 0xAAAAAAAAAAAAAAAA, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+void f6 (void * in, void *out, int64_t x, int n)\n+{\n+  vbool64_t mask = __riscv_vlm_v_b64 (in + 100, 4);\n+  vint64m1_t v = __riscv_vle64_v_i64m1 (in + 1, 4);\n+  vint64m1_t v2 = __riscv_vle64_v_i64m1_tu (v, in + 2, 4);\n+  vint64m1_t v3 = __riscv_vadc_vxm_i64m1 (v2, x, mask, 4);\n+  vint64m1_t v4 = __riscv_vadc_vxm_i64m1 (v3, x, mask, 4);\n+  __riscv_vse64_v_i64m1 (out + 2, v4, 4);\n+}\n+\n+/* { dg-final { scan-assembler-times {vadc\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*-16,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vim\\s+v[0-9]+,\\s*v[0-9]+,\\s*15,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 6 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 4 } } */"}, {"sha": "dc9bf5c2c9cc585f9f1976d765e3e6c3538c74a9", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vvm-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-1.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vvm_i8mf8(vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf8(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vvm_i8mf4(vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vvm_i8mf2(vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vvm_i8m1(vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vvm_i8m2(vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vvm_i8m4(vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vvm_i8m8(vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vvm_i16mf4(vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16mf4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vvm_i16mf2(vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vvm_i16m1(vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vvm_i16m2(vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vvm_i16m4(vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vvm_i16m8(vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vvm_i32mf2(vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vvm_i32m1(vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vvm_i32m2(vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vvm_i32m4(vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vvm_i32m8(vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vvm_i64m1(vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vvm_i64m2(vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vvm_i64m4(vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vvm_i64m8(vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vvm_u8mf8(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vvm_u8mf4(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vvm_u8mf2(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vvm_u8m1(vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vvm_u8m2(vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vvm_u8m4(vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vvm_u8m8(vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vvm_u16mf4(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16mf4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vvm_u16mf2(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vvm_u16m1(vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vvm_u16m2(vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vvm_u16m4(vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vvm_u16m8(vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vvm_u32mf2(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vvm_u32m1(vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vvm_u32m2(vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vvm_u32m4(vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vvm_u32m8(vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vvm_u64m1(vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vvm_u64m2(vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vvm_u64m4(vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vvm_u64m8(vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m8(op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "90e361722805b760859ea6a9d2b99c2a71c06104", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vvm-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-2.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vvm_i8mf8(vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf8(op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vvm_i8mf4(vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf4(op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vvm_i8mf2(vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vvm_i8m1(vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m1(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vvm_i8m2(vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m2(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vvm_i8m4(vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m4(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vvm_i8m8(vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m8(op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vvm_i16mf4(vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16mf4(op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vvm_i16mf2(vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vvm_i16m1(vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m1(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vvm_i16m2(vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m2(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vvm_i16m4(vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m4(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vvm_i16m8(vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m8(op1,op2,carryin,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vvm_i32mf2(vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vvm_i32m1(vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m1(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vvm_i32m2(vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m2(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vvm_i32m4(vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m4(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vvm_i32m8(vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m8(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vvm_i64m1(vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m1(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vvm_i64m2(vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m2(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vvm_i64m4(vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m4(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vvm_i64m8(vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vvm_u8mf8(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vvm_u8mf4(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vvm_u8mf2(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vvm_u8m1(vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m1(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vvm_u8m2(vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vvm_u8m4(vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vvm_u8m8(vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vvm_u16mf4(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16mf4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vvm_u16mf2(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vvm_u16m1(vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m1(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vvm_u16m2(vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vvm_u16m4(vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vvm_u16m8(vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vvm_u32mf2(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vvm_u32m1(vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m1(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vvm_u32m2(vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vvm_u32m4(vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vvm_u32m8(vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vvm_u64m1(vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m1(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vvm_u64m2(vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vvm_u64m4(vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vvm_u64m8(vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m8(op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "c86399e42082ea73310da680cb95f0ca1be1e385", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vvm-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm-3.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vvm_i8mf8(vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf8(op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vvm_i8mf4(vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf4(op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vvm_i8mf2(vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vvm_i8m1(vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m1(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vvm_i8m2(vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m2(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vvm_i8m4(vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m4(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vvm_i8m8(vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m8(op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vvm_i16mf4(vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16mf4(op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vvm_i16mf2(vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vvm_i16m1(vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m1(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vvm_i16m2(vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m2(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vvm_i16m4(vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m4(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vvm_i16m8(vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m8(op1,op2,carryin,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vvm_i32mf2(vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vvm_i32m1(vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m1(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vvm_i32m2(vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m2(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vvm_i32m4(vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m4(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vvm_i32m8(vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m8(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vvm_i64m1(vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m1(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vvm_i64m2(vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m2(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vvm_i64m4(vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m4(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vvm_i64m8(vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vvm_u8mf8(vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vvm_u8mf4(vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vvm_u8mf2(vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vvm_u8m1(vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m1(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vvm_u8m2(vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vvm_u8m4(vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vvm_u8m8(vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vvm_u16mf4(vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16mf4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vvm_u16mf2(vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vvm_u16m1(vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m1(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vvm_u16m2(vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vvm_u16m4(vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vvm_u16m8(vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vvm_u32mf2(vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vvm_u32m1(vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m1(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vvm_u32m2(vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vvm_u32m4(vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vvm_u32m8(vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vvm_u64m1(vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m1(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vvm_u64m2(vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vvm_u64m4(vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vvm_u64m8(vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m8(op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "efca6b31c0e3667b10916794e4f9273cfcf9c5d6", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vvm_tu-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-1.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vvm_i8mf8_tu(vint8mf8_t maskedoff,vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vvm_i8mf4_tu(vint8mf4_t maskedoff,vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vvm_i8mf2_tu(vint8mf2_t maskedoff,vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vvm_i8m1_tu(vint8m1_t maskedoff,vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vvm_i8m2_tu(vint8m2_t maskedoff,vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vvm_i8m4_tu(vint8m4_t maskedoff,vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vvm_i8m8_tu(vint8m8_t maskedoff,vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vvm_i16mf4_tu(vint16mf4_t maskedoff,vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16mf4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vvm_i16mf2_tu(vint16mf2_t maskedoff,vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vvm_i16m1_tu(vint16m1_t maskedoff,vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vvm_i16m2_tu(vint16m2_t maskedoff,vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vvm_i16m4_tu(vint16m4_t maskedoff,vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vvm_i16m8_tu(vint16m8_t maskedoff,vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vvm_i32mf2_tu(vint32mf2_t maskedoff,vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vvm_i32m1_tu(vint32m1_t maskedoff,vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vvm_i32m2_tu(vint32m2_t maskedoff,vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vvm_i32m4_tu(vint32m4_t maskedoff,vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vvm_i32m8_tu(vint32m8_t maskedoff,vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vvm_i64m1_tu(vint64m1_t maskedoff,vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vvm_i64m2_tu(vint64m2_t maskedoff,vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vvm_i64m4_tu(vint64m4_t maskedoff,vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vvm_i64m8_tu(vint64m8_t maskedoff,vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vvm_u8mf8_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vvm_u8mf4_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vvm_u8mf2_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vvm_u8m1_tu(vuint8m1_t maskedoff,vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vvm_u8m2_tu(vuint8m2_t maskedoff,vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vvm_u8m4_tu(vuint8m4_t maskedoff,vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vvm_u8m8_tu(vuint8m8_t maskedoff,vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vvm_u16mf4_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16mf4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vvm_u16mf2_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vvm_u16m1_tu(vuint16m1_t maskedoff,vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vvm_u16m2_tu(vuint16m2_t maskedoff,vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vvm_u16m4_tu(vuint16m4_t maskedoff,vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vvm_u16m8_tu(vuint16m8_t maskedoff,vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vvm_u32mf2_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vvm_u32m1_tu(vuint32m1_t maskedoff,vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vvm_u32m2_tu(vuint32m2_t maskedoff,vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vvm_u32m4_tu(vuint32m4_t maskedoff,vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vvm_u32m8_tu(vuint32m8_t maskedoff,vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vvm_u64m1_tu(vuint64m1_t maskedoff,vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vvm_u64m2_tu(vuint64m2_t maskedoff,vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vvm_u64m4_tu(vuint64m4_t maskedoff,vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vvm_u64m8_tu(vuint64m8_t maskedoff,vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "94db1d88e2fc5cf015ded7eeb1256e5a49cd7629", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vvm_tu-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-2.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vvm_i8mf8_tu(vint8mf8_t maskedoff,vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vvm_i8mf4_tu(vint8mf4_t maskedoff,vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vvm_i8mf2_tu(vint8mf2_t maskedoff,vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vvm_i8m1_tu(vint8m1_t maskedoff,vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vvm_i8m2_tu(vint8m2_t maskedoff,vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vvm_i8m4_tu(vint8m4_t maskedoff,vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vvm_i8m8_tu(vint8m8_t maskedoff,vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vvm_i16mf4_tu(vint16mf4_t maskedoff,vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16mf4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vvm_i16mf2_tu(vint16mf2_t maskedoff,vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vvm_i16m1_tu(vint16m1_t maskedoff,vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vvm_i16m2_tu(vint16m2_t maskedoff,vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vvm_i16m4_tu(vint16m4_t maskedoff,vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vvm_i16m8_tu(vint16m8_t maskedoff,vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vvm_i32mf2_tu(vint32mf2_t maskedoff,vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vvm_i32m1_tu(vint32m1_t maskedoff,vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vvm_i32m2_tu(vint32m2_t maskedoff,vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vvm_i32m4_tu(vint32m4_t maskedoff,vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vvm_i32m8_tu(vint32m8_t maskedoff,vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vvm_i64m1_tu(vint64m1_t maskedoff,vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vvm_i64m2_tu(vint64m2_t maskedoff,vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vvm_i64m4_tu(vint64m4_t maskedoff,vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vvm_i64m8_tu(vint64m8_t maskedoff,vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vvm_u8mf8_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vvm_u8mf4_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vvm_u8mf2_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vvm_u8m1_tu(vuint8m1_t maskedoff,vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vvm_u8m2_tu(vuint8m2_t maskedoff,vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vvm_u8m4_tu(vuint8m4_t maskedoff,vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vvm_u8m8_tu(vuint8m8_t maskedoff,vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vvm_u16mf4_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16mf4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vvm_u16mf2_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vvm_u16m1_tu(vuint16m1_t maskedoff,vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vvm_u16m2_tu(vuint16m2_t maskedoff,vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vvm_u16m4_tu(vuint16m4_t maskedoff,vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vvm_u16m8_tu(vuint16m8_t maskedoff,vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vvm_u32mf2_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vvm_u32m1_tu(vuint32m1_t maskedoff,vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vvm_u32m2_tu(vuint32m2_t maskedoff,vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vvm_u32m4_tu(vuint32m4_t maskedoff,vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vvm_u32m8_tu(vuint32m8_t maskedoff,vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vvm_u64m1_tu(vuint64m1_t maskedoff,vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vvm_u64m2_tu(vuint64m2_t maskedoff,vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vvm_u64m4_tu(vuint64m4_t maskedoff,vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vvm_u64m8_tu(vuint64m8_t maskedoff,vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "ae88520095299bf4c6ea59aefad3ba88b29adb28", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vvm_tu-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vvm_tu-3.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vvm_i8mf8_tu(vint8mf8_t maskedoff,vint8mf8_t op1,vint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vvm_i8mf4_tu(vint8mf4_t maskedoff,vint8mf4_t op1,vint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vvm_i8mf2_tu(vint8mf2_t maskedoff,vint8mf2_t op1,vint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vvm_i8m1_tu(vint8m1_t maskedoff,vint8m1_t op1,vint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vvm_i8m2_tu(vint8m2_t maskedoff,vint8m2_t op1,vint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vvm_i8m4_tu(vint8m4_t maskedoff,vint8m4_t op1,vint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vvm_i8m8_tu(vint8m8_t maskedoff,vint8m8_t op1,vint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i8m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vvm_i16mf4_tu(vint16mf4_t maskedoff,vint16mf4_t op1,vint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16mf4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vvm_i16mf2_tu(vint16mf2_t maskedoff,vint16mf2_t op1,vint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vvm_i16m1_tu(vint16m1_t maskedoff,vint16m1_t op1,vint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vvm_i16m2_tu(vint16m2_t maskedoff,vint16m2_t op1,vint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vvm_i16m4_tu(vint16m4_t maskedoff,vint16m4_t op1,vint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vvm_i16m8_tu(vint16m8_t maskedoff,vint16m8_t op1,vint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i16m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vvm_i32mf2_tu(vint32mf2_t maskedoff,vint32mf2_t op1,vint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vvm_i32m1_tu(vint32m1_t maskedoff,vint32m1_t op1,vint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vvm_i32m2_tu(vint32m2_t maskedoff,vint32m2_t op1,vint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vvm_i32m4_tu(vint32m4_t maskedoff,vint32m4_t op1,vint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vvm_i32m8_tu(vint32m8_t maskedoff,vint32m8_t op1,vint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i32m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vvm_i64m1_tu(vint64m1_t maskedoff,vint64m1_t op1,vint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vvm_i64m2_tu(vint64m2_t maskedoff,vint64m2_t op1,vint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vvm_i64m4_tu(vint64m4_t maskedoff,vint64m4_t op1,vint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vvm_i64m8_tu(vint64m8_t maskedoff,vint64m8_t op1,vint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_i64m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vvm_u8mf8_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,vuint8mf8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vvm_u8mf4_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,vuint8mf4_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vvm_u8mf2_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,vuint8mf2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vvm_u8m1_tu(vuint8m1_t maskedoff,vuint8m1_t op1,vuint8m1_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vvm_u8m2_tu(vuint8m2_t maskedoff,vuint8m2_t op1,vuint8m2_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vvm_u8m4_tu(vuint8m4_t maskedoff,vuint8m4_t op1,vuint8m4_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vvm_u8m8_tu(vuint8m8_t maskedoff,vuint8m8_t op1,vuint8m8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u8m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vvm_u16mf4_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,vuint16mf4_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16mf4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vvm_u16mf2_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,vuint16mf2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vvm_u16m1_tu(vuint16m1_t maskedoff,vuint16m1_t op1,vuint16m1_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vvm_u16m2_tu(vuint16m2_t maskedoff,vuint16m2_t op1,vuint16m2_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vvm_u16m4_tu(vuint16m4_t maskedoff,vuint16m4_t op1,vuint16m4_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vvm_u16m8_tu(vuint16m8_t maskedoff,vuint16m8_t op1,vuint16m8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u16m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vvm_u32mf2_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,vuint32mf2_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vvm_u32m1_tu(vuint32m1_t maskedoff,vuint32m1_t op1,vuint32m1_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vvm_u32m2_tu(vuint32m2_t maskedoff,vuint32m2_t op1,vuint32m2_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vvm_u32m4_tu(vuint32m4_t maskedoff,vuint32m4_t op1,vuint32m4_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vvm_u32m8_tu(vuint32m8_t maskedoff,vuint32m8_t op1,vuint32m8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u32m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vvm_u64m1_tu(vuint64m1_t maskedoff,vuint64m1_t op1,vuint64m1_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vvm_u64m2_tu(vuint64m2_t maskedoff,vuint64m2_t op1,vuint64m2_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vvm_u64m4_tu(vuint64m4_t maskedoff,vuint64m4_t op1,vuint64m4_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vvm_u64m8_tu(vuint64m8_t maskedoff,vuint64m8_t op1,vuint64m8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vvm_u64m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "6f1a9ff8c89c9440ebcf031fcf321cc92852ae34", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vxm_rv32-1.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-1.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vxm_i8mf8(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf8(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vxm_i8mf4(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vxm_i8mf2(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vxm_i8m1(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vxm_i8m2(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vxm_i8m4(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vxm_i8m8(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vxm_i16mf4(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vxm_i16mf2(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vxm_i16m1(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vxm_i16m2(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vxm_i16m4(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vxm_i16m8(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vxm_i32mf2(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vxm_i32m1(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vxm_i32m2(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vxm_i32m4(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vxm_i32m8(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vxm_i64m1(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vxm_i64m2(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vxm_i64m4(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vxm_i64m8(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vxm_u8mf8(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vxm_u8mf4(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vxm_u8mf2(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vxm_u8m1(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vxm_u8m2(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vxm_u8m4(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vxm_u8m8(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vxm_u16mf4(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vxm_u16mf2(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vxm_u16m1(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vxm_u16m2(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vxm_u16m4(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vxm_u16m8(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vxm_u32mf2(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vxm_u32m1(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vxm_u32m2(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vxm_u32m4(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vxm_u32m8(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vxm_u64m1(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vxm_u64m2(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vxm_u64m4(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vxm_u64m8(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m8(op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "4821e55ef979b1864dde1b95bc6adc5071380b37", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vxm_rv32-2.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-2.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vxm_i8mf8(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf8(op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vxm_i8mf4(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf4(op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vxm_i8mf2(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vxm_i8m1(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m1(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vxm_i8m2(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m2(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vxm_i8m4(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m4(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vxm_i8m8(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m8(op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vxm_i16mf4(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf4(op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vxm_i16mf2(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vxm_i16m1(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m1(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vxm_i16m2(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m2(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vxm_i16m4(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m4(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vxm_i16m8(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m8(op1,op2,carryin,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vxm_i32mf2(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vxm_i32m1(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m1(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vxm_i32m2(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m2(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vxm_i32m4(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m4(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vxm_i32m8(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m8(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vxm_i64m1(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m1(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vxm_i64m2(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m2(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vxm_i64m4(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m4(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vxm_i64m8(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vxm_u8mf8(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vxm_u8mf4(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vxm_u8mf2(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vxm_u8m1(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m1(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vxm_u8m2(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vxm_u8m4(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vxm_u8m8(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vxm_u16mf4(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vxm_u16mf2(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vxm_u16m1(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m1(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vxm_u16m2(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vxm_u16m4(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vxm_u16m8(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vxm_u32mf2(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vxm_u32m1(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m1(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vxm_u32m2(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vxm_u32m4(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vxm_u32m8(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vxm_u64m1(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m1(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vxm_u64m2(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vxm_u64m4(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vxm_u64m8(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m8(op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "c7650fc8bb2b842eec4e842caec99695cb392a4d", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vxm_rv32-3.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv32-3.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vxm_i8mf8(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf8(op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vxm_i8mf4(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf4(op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vxm_i8mf2(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vxm_i8m1(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m1(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vxm_i8m2(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m2(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vxm_i8m4(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m4(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vxm_i8m8(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m8(op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vxm_i16mf4(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf4(op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vxm_i16mf2(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vxm_i16m1(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m1(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vxm_i16m2(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m2(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vxm_i16m4(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m4(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vxm_i16m8(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m8(op1,op2,carryin,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vxm_i32mf2(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vxm_i32m1(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m1(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vxm_i32m2(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m2(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vxm_i32m4(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m4(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vxm_i32m8(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m8(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vxm_i64m1(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m1(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vxm_i64m2(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m2(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vxm_i64m4(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m4(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vxm_i64m8(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vxm_u8mf8(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vxm_u8mf4(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vxm_u8mf2(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vxm_u8m1(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m1(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vxm_u8m2(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vxm_u8m4(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vxm_u8m8(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vxm_u16mf4(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vxm_u16mf2(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vxm_u16m1(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m1(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vxm_u16m2(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vxm_u16m4(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vxm_u16m8(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vxm_u32mf2(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vxm_u32m1(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m1(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vxm_u32m2(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vxm_u32m4(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vxm_u32m8(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vxm_u64m1(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m1(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vxm_u64m2(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vxm_u64m4(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vxm_u64m8(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m8(op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "15662f35f90205e22186de98bfb3edfa07deda44", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vxm_rv64-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-1.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vxm_i8mf8(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf8(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vxm_i8mf4(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vxm_i8mf2(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vxm_i8m1(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vxm_i8m2(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vxm_i8m4(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vxm_i8m8(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vxm_i16mf4(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vxm_i16mf2(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vxm_i16m1(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vxm_i16m2(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vxm_i16m4(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vxm_i16m8(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vxm_i32mf2(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vxm_i32m1(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vxm_i32m2(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vxm_i32m4(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vxm_i32m8(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vxm_i64m1(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vxm_i64m2(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vxm_i64m4(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vxm_i64m8(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vxm_u8mf8(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vxm_u8mf4(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vxm_u8mf2(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vxm_u8m1(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vxm_u8m2(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vxm_u8m4(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vxm_u8m8(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vxm_u16mf4(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vxm_u16mf2(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vxm_u16m1(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vxm_u16m2(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vxm_u16m4(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vxm_u16m8(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vxm_u32mf2(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32mf2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vxm_u32m1(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vxm_u32m2(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vxm_u32m4(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vxm_u32m8(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m8(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vxm_u64m1(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m1(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vxm_u64m2(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m2(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vxm_u64m4(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m4(op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vxm_u64m8(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m8(op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "4816316519a0663ff953058fc3636529a31529fc", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vxm_rv64-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-2.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vxm_i8mf8(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf8(op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vxm_i8mf4(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf4(op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vxm_i8mf2(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vxm_i8m1(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m1(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vxm_i8m2(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m2(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vxm_i8m4(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m4(op1,op2,carryin,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vxm_i8m8(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m8(op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vxm_i16mf4(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf4(op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vxm_i16mf2(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vxm_i16m1(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m1(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vxm_i16m2(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m2(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vxm_i16m4(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m4(op1,op2,carryin,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vxm_i16m8(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m8(op1,op2,carryin,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vxm_i32mf2(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vxm_i32m1(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m1(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vxm_i32m2(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m2(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vxm_i32m4(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m4(op1,op2,carryin,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vxm_i32m8(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m8(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vxm_i64m1(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m1(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vxm_i64m2(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m2(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vxm_i64m4(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m4(op1,op2,carryin,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vxm_i64m8(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vxm_u8mf8(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vxm_u8mf4(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vxm_u8mf2(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vxm_u8m1(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m1(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vxm_u8m2(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vxm_u8m4(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vxm_u8m8(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vxm_u16mf4(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vxm_u16mf2(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vxm_u16m1(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m1(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vxm_u16m2(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vxm_u16m4(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vxm_u16m8(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vxm_u32mf2(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32mf2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vxm_u32m1(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m1(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vxm_u32m2(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vxm_u32m4(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vxm_u32m8(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m8(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vxm_u64m1(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m1(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vxm_u64m2(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m2(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vxm_u64m4(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m4(op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vxm_u64m8(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m8(op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "3aa0d4cbcbf1d21b2c9845adf67cb21bfec94255", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vxm_rv64-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_rv64-3.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vxm_i8mf8(vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf8(op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vxm_i8mf4(vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf4(op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vxm_i8mf2(vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vxm_i8m1(vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m1(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vxm_i8m2(vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m2(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vxm_i8m4(vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m4(op1,op2,carryin,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vxm_i8m8(vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m8(op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vxm_i16mf4(vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf4(op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vxm_i16mf2(vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vxm_i16m1(vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m1(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vxm_i16m2(vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m2(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vxm_i16m4(vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m4(op1,op2,carryin,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vxm_i16m8(vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m8(op1,op2,carryin,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vxm_i32mf2(vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vxm_i32m1(vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m1(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vxm_i32m2(vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m2(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vxm_i32m4(vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m4(op1,op2,carryin,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vxm_i32m8(vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m8(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vxm_i64m1(vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m1(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vxm_i64m2(vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m2(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vxm_i64m4(vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m4(op1,op2,carryin,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vxm_i64m8(vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vxm_u8mf8(vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vxm_u8mf4(vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vxm_u8mf2(vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vxm_u8m1(vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m1(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vxm_u8m2(vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vxm_u8m4(vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vxm_u8m8(vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vxm_u16mf4(vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vxm_u16mf2(vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vxm_u16m1(vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m1(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vxm_u16m2(vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vxm_u16m4(vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vxm_u16m8(vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vxm_u32mf2(vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32mf2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vxm_u32m1(vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m1(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vxm_u32m2(vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vxm_u32m4(vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vxm_u32m8(vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m8(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vxm_u64m1(vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m1(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vxm_u64m2(vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m2(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vxm_u64m4(vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m4(op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vxm_u64m8(vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m8(op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*t[au],\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "fd4537d373a4387c1eeceff8e0e4d00ff4b1ed9c", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vxm_tu_rv32-1.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-1.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vxm_i8mf8_tu(vint8mf8_t maskedoff,vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vxm_i8mf4_tu(vint8mf4_t maskedoff,vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vxm_i8mf2_tu(vint8mf2_t maskedoff,vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vxm_i8m1_tu(vint8m1_t maskedoff,vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vxm_i8m2_tu(vint8m2_t maskedoff,vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vxm_i8m4_tu(vint8m4_t maskedoff,vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vxm_i8m8_tu(vint8m8_t maskedoff,vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vxm_i16mf4_tu(vint16mf4_t maskedoff,vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vxm_i16mf2_tu(vint16mf2_t maskedoff,vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vxm_i16m1_tu(vint16m1_t maskedoff,vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vxm_i16m2_tu(vint16m2_t maskedoff,vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vxm_i16m4_tu(vint16m4_t maskedoff,vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vxm_i16m8_tu(vint16m8_t maskedoff,vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vxm_i32mf2_tu(vint32mf2_t maskedoff,vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vxm_i32m1_tu(vint32m1_t maskedoff,vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vxm_i32m2_tu(vint32m2_t maskedoff,vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vxm_i32m4_tu(vint32m4_t maskedoff,vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vxm_i32m8_tu(vint32m8_t maskedoff,vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vxm_i64m1_tu(vint64m1_t maskedoff,vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vxm_i64m2_tu(vint64m2_t maskedoff,vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vxm_i64m4_tu(vint64m4_t maskedoff,vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vxm_i64m8_tu(vint64m8_t maskedoff,vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vxm_u8mf8_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vxm_u8mf4_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vxm_u8mf2_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vxm_u8m1_tu(vuint8m1_t maskedoff,vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vxm_u8m2_tu(vuint8m2_t maskedoff,vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vxm_u8m4_tu(vuint8m4_t maskedoff,vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vxm_u8m8_tu(vuint8m8_t maskedoff,vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vxm_u16mf4_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vxm_u16mf2_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vxm_u16m1_tu(vuint16m1_t maskedoff,vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vxm_u16m2_tu(vuint16m2_t maskedoff,vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vxm_u16m4_tu(vuint16m4_t maskedoff,vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vxm_u16m8_tu(vuint16m8_t maskedoff,vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vxm_u32mf2_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vxm_u32m1_tu(vuint32m1_t maskedoff,vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vxm_u32m2_tu(vuint32m2_t maskedoff,vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vxm_u32m4_tu(vuint32m4_t maskedoff,vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vxm_u32m8_tu(vuint32m8_t maskedoff,vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vxm_u64m1_tu(vuint64m1_t maskedoff,vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vxm_u64m2_tu(vuint64m2_t maskedoff,vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vxm_u64m4_tu(vuint64m4_t maskedoff,vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vxm_u64m8_tu(vuint64m8_t maskedoff,vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "e4a0a03aa105eee2949954718d37ed3191769b92", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vxm_tu_rv32-2.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-2.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vxm_i8mf8_tu(vint8mf8_t maskedoff,vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vxm_i8mf4_tu(vint8mf4_t maskedoff,vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vxm_i8mf2_tu(vint8mf2_t maskedoff,vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vxm_i8m1_tu(vint8m1_t maskedoff,vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vxm_i8m2_tu(vint8m2_t maskedoff,vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vxm_i8m4_tu(vint8m4_t maskedoff,vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vxm_i8m8_tu(vint8m8_t maskedoff,vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vxm_i16mf4_tu(vint16mf4_t maskedoff,vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vxm_i16mf2_tu(vint16mf2_t maskedoff,vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vxm_i16m1_tu(vint16m1_t maskedoff,vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vxm_i16m2_tu(vint16m2_t maskedoff,vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vxm_i16m4_tu(vint16m4_t maskedoff,vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vxm_i16m8_tu(vint16m8_t maskedoff,vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vxm_i32mf2_tu(vint32mf2_t maskedoff,vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vxm_i32m1_tu(vint32m1_t maskedoff,vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vxm_i32m2_tu(vint32m2_t maskedoff,vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vxm_i32m4_tu(vint32m4_t maskedoff,vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vxm_i32m8_tu(vint32m8_t maskedoff,vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vxm_i64m1_tu(vint64m1_t maskedoff,vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vxm_i64m2_tu(vint64m2_t maskedoff,vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vxm_i64m4_tu(vint64m4_t maskedoff,vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vxm_i64m8_tu(vint64m8_t maskedoff,vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vxm_u8mf8_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vxm_u8mf4_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vxm_u8mf2_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vxm_u8m1_tu(vuint8m1_t maskedoff,vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vxm_u8m2_tu(vuint8m2_t maskedoff,vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vxm_u8m4_tu(vuint8m4_t maskedoff,vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vxm_u8m8_tu(vuint8m8_t maskedoff,vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vxm_u16mf4_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vxm_u16mf2_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vxm_u16m1_tu(vuint16m1_t maskedoff,vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vxm_u16m2_tu(vuint16m2_t maskedoff,vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vxm_u16m4_tu(vuint16m4_t maskedoff,vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vxm_u16m8_tu(vuint16m8_t maskedoff,vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vxm_u32mf2_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vxm_u32m1_tu(vuint32m1_t maskedoff,vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vxm_u32m2_tu(vuint32m2_t maskedoff,vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vxm_u32m4_tu(vuint32m4_t maskedoff,vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vxm_u32m8_tu(vuint32m8_t maskedoff,vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vxm_u64m1_tu(vuint64m1_t maskedoff,vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vxm_u64m2_tu(vuint64m2_t maskedoff,vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vxm_u64m4_tu(vuint64m4_t maskedoff,vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vxm_u64m8_tu(vuint64m8_t maskedoff,vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "208abf6d892eb998084d6365f924b5c5205ad452", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vxm_tu_rv32-3.c", "status": "added", "additions": 289, "deletions": 0, "changes": 289, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv32-3.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,289 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gcv -mabi=ilp32d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vxm_i8mf8_tu(vint8mf8_t maskedoff,vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vxm_i8mf4_tu(vint8mf4_t maskedoff,vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vxm_i8mf2_tu(vint8mf2_t maskedoff,vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vxm_i8m1_tu(vint8m1_t maskedoff,vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vxm_i8m2_tu(vint8m2_t maskedoff,vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vxm_i8m4_tu(vint8m4_t maskedoff,vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vxm_i8m8_tu(vint8m8_t maskedoff,vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vxm_i16mf4_tu(vint16mf4_t maskedoff,vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vxm_i16mf2_tu(vint16mf2_t maskedoff,vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vxm_i16m1_tu(vint16m1_t maskedoff,vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vxm_i16m2_tu(vint16m2_t maskedoff,vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vxm_i16m4_tu(vint16m4_t maskedoff,vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vxm_i16m8_tu(vint16m8_t maskedoff,vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vxm_i32mf2_tu(vint32mf2_t maskedoff,vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vxm_i32m1_tu(vint32m1_t maskedoff,vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vxm_i32m2_tu(vint32m2_t maskedoff,vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vxm_i32m4_tu(vint32m4_t maskedoff,vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vxm_i32m8_tu(vint32m8_t maskedoff,vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vxm_i64m1_tu(vint64m1_t maskedoff,vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vxm_i64m2_tu(vint64m2_t maskedoff,vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vxm_i64m4_tu(vint64m4_t maskedoff,vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vxm_i64m8_tu(vint64m8_t maskedoff,vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vxm_u8mf8_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vxm_u8mf4_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vxm_u8mf2_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vxm_u8m1_tu(vuint8m1_t maskedoff,vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vxm_u8m2_tu(vuint8m2_t maskedoff,vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vxm_u8m4_tu(vuint8m4_t maskedoff,vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vxm_u8m8_tu(vuint8m8_t maskedoff,vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vxm_u16mf4_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vxm_u16mf2_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vxm_u16m1_tu(vuint16m1_t maskedoff,vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vxm_u16m2_tu(vuint16m2_t maskedoff,vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vxm_u16m4_tu(vuint16m4_t maskedoff,vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vxm_u16m8_tu(vuint16m8_t maskedoff,vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vxm_u32mf2_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vxm_u32m1_tu(vuint32m1_t maskedoff,vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vxm_u32m2_tu(vuint32m2_t maskedoff,vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vxm_u32m4_tu(vuint32m4_t maskedoff,vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vxm_u32m8_tu(vuint32m8_t maskedoff,vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vxm_u64m1_tu(vuint64m1_t maskedoff,vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vxm_u64m2_tu(vuint64m2_t maskedoff,vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vxm_u64m4_tu(vuint64m4_t maskedoff,vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vxm_u64m8_tu(vuint64m8_t maskedoff,vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vadc\\.vvm\\s+v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+,\\s*v[0-9]+} 8 } } */"}, {"sha": "b28647f2b4e27146fdbdae1da5b8b759f2d89944", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vxm_tu_rv64-1.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-1.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vxm_i8mf8_tu(vint8mf8_t maskedoff,vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vxm_i8mf4_tu(vint8mf4_t maskedoff,vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vxm_i8mf2_tu(vint8mf2_t maskedoff,vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vxm_i8m1_tu(vint8m1_t maskedoff,vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vxm_i8m2_tu(vint8m2_t maskedoff,vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vxm_i8m4_tu(vint8m4_t maskedoff,vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vxm_i8m8_tu(vint8m8_t maskedoff,vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vxm_i16mf4_tu(vint16mf4_t maskedoff,vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vxm_i16mf2_tu(vint16mf2_t maskedoff,vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vxm_i16m1_tu(vint16m1_t maskedoff,vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vxm_i16m2_tu(vint16m2_t maskedoff,vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vxm_i16m4_tu(vint16m4_t maskedoff,vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vxm_i16m8_tu(vint16m8_t maskedoff,vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vxm_i32mf2_tu(vint32mf2_t maskedoff,vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vxm_i32m1_tu(vint32m1_t maskedoff,vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vxm_i32m2_tu(vint32m2_t maskedoff,vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vxm_i32m4_tu(vint32m4_t maskedoff,vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vxm_i32m8_tu(vint32m8_t maskedoff,vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vxm_i64m1_tu(vint64m1_t maskedoff,vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vxm_i64m2_tu(vint64m2_t maskedoff,vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vxm_i64m4_tu(vint64m4_t maskedoff,vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vxm_i64m8_tu(vint64m8_t maskedoff,vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vxm_u8mf8_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vxm_u8mf4_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vxm_u8mf2_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vxm_u8m1_tu(vuint8m1_t maskedoff,vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vxm_u8m2_tu(vuint8m2_t maskedoff,vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vxm_u8m4_tu(vuint8m4_t maskedoff,vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vxm_u8m8_tu(vuint8m8_t maskedoff,vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vxm_u16mf4_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vxm_u16mf2_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vxm_u16m1_tu(vuint16m1_t maskedoff,vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vxm_u16m2_tu(vuint16m2_t maskedoff,vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vxm_u16m4_tu(vuint16m4_t maskedoff,vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vxm_u16m8_tu(vuint16m8_t maskedoff,vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vxm_u32mf2_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32mf2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vxm_u32m1_tu(vuint32m1_t maskedoff,vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vxm_u32m2_tu(vuint32m2_t maskedoff,vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vxm_u32m4_tu(vuint32m4_t maskedoff,vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vxm_u32m8_tu(vuint32m8_t maskedoff,vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vxm_u64m1_tu(vuint64m1_t maskedoff,vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m1_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vxm_u64m2_tu(vuint64m2_t maskedoff,vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m2_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vxm_u64m4_tu(vuint64m4_t maskedoff,vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m4_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vxm_u64m8_tu(vuint64m8_t maskedoff,vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m8_tu(maskedoff,op1,op2,carryin,vl);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "088061a7b6002539755edbc5338c2d9e82c5f81b", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vxm_tu_rv64-2.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-2.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vxm_i8mf8_tu(vint8mf8_t maskedoff,vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vxm_i8mf4_tu(vint8mf4_t maskedoff,vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vxm_i8mf2_tu(vint8mf2_t maskedoff,vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vxm_i8m1_tu(vint8m1_t maskedoff,vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vxm_i8m2_tu(vint8m2_t maskedoff,vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vxm_i8m4_tu(vint8m4_t maskedoff,vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vxm_i8m8_tu(vint8m8_t maskedoff,vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vxm_i16mf4_tu(vint16mf4_t maskedoff,vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vxm_i16mf2_tu(vint16mf2_t maskedoff,vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vxm_i16m1_tu(vint16m1_t maskedoff,vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vxm_i16m2_tu(vint16m2_t maskedoff,vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vxm_i16m4_tu(vint16m4_t maskedoff,vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vxm_i16m8_tu(vint16m8_t maskedoff,vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vxm_i32mf2_tu(vint32mf2_t maskedoff,vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vxm_i32m1_tu(vint32m1_t maskedoff,vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vxm_i32m2_tu(vint32m2_t maskedoff,vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vxm_i32m4_tu(vint32m4_t maskedoff,vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vxm_i32m8_tu(vint32m8_t maskedoff,vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vxm_i64m1_tu(vint64m1_t maskedoff,vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vxm_i64m2_tu(vint64m2_t maskedoff,vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vxm_i64m4_tu(vint64m4_t maskedoff,vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vxm_i64m8_tu(vint64m8_t maskedoff,vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vxm_u8mf8_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vxm_u8mf4_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vxm_u8mf2_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vxm_u8m1_tu(vuint8m1_t maskedoff,vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vxm_u8m2_tu(vuint8m2_t maskedoff,vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vxm_u8m4_tu(vuint8m4_t maskedoff,vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vxm_u8m8_tu(vuint8m8_t maskedoff,vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vxm_u16mf4_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vxm_u16mf2_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vxm_u16m1_tu(vuint16m1_t maskedoff,vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vxm_u16m2_tu(vuint16m2_t maskedoff,vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vxm_u16m4_tu(vuint16m4_t maskedoff,vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vxm_u16m8_tu(vuint16m8_t maskedoff,vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vxm_u32mf2_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32mf2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vxm_u32m1_tu(vuint32m1_t maskedoff,vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vxm_u32m2_tu(vuint32m2_t maskedoff,vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vxm_u32m4_tu(vuint32m4_t maskedoff,vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vxm_u32m8_tu(vuint32m8_t maskedoff,vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vxm_u64m1_tu(vuint64m1_t maskedoff,vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m1_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vxm_u64m2_tu(vuint64m2_t maskedoff,vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m2_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vxm_u64m4_tu(vuint64m4_t maskedoff,vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m4_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vxm_u64m8_tu(vuint64m8_t maskedoff,vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m8_tu(maskedoff,op1,op2,carryin,31);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetivli\\s+zero,\\s*31,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}, {"sha": "911707c261a172f36097168d3764b3b346523e11", "filename": "gcc/testsuite/gcc.target/riscv/rvv/base/vadc_vxm_tu_rv64-3.c", "status": "added", "additions": 292, "deletions": 0, "changes": 292, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5e7450a1734f01b6453c2c56c3278954825a905/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Frvv%2Fbase%2Fvadc_vxm_tu_rv64-3.c?ref=b5e7450a1734f01b6453c2c56c3278954825a905", "patch": "@@ -0,0 +1,292 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv64gcv -mabi=lp64d -O3 -fno-schedule-insns -fno-schedule-insns2\" } */\n+\n+#include \"riscv_vector.h\"\n+\n+vint8mf8_t test___riscv_vadc_vxm_i8mf8_tu(vint8mf8_t maskedoff,vint8mf8_t op1,int8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf4_t test___riscv_vadc_vxm_i8mf4_tu(vint8mf4_t maskedoff,vint8mf4_t op1,int8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8mf2_t test___riscv_vadc_vxm_i8mf2_tu(vint8mf2_t maskedoff,vint8mf2_t op1,int8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m1_t test___riscv_vadc_vxm_i8m1_tu(vint8m1_t maskedoff,vint8m1_t op1,int8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m2_t test___riscv_vadc_vxm_i8m2_tu(vint8m2_t maskedoff,vint8m2_t op1,int8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m4_t test___riscv_vadc_vxm_i8m4_tu(vint8m4_t maskedoff,vint8m4_t op1,int8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint8m8_t test___riscv_vadc_vxm_i8m8_tu(vint8m8_t maskedoff,vint8m8_t op1,int8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i8m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf4_t test___riscv_vadc_vxm_i16mf4_tu(vint16mf4_t maskedoff,vint16mf4_t op1,int16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16mf2_t test___riscv_vadc_vxm_i16mf2_tu(vint16mf2_t maskedoff,vint16mf2_t op1,int16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m1_t test___riscv_vadc_vxm_i16m1_tu(vint16m1_t maskedoff,vint16m1_t op1,int16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m2_t test___riscv_vadc_vxm_i16m2_tu(vint16m2_t maskedoff,vint16m2_t op1,int16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m4_t test___riscv_vadc_vxm_i16m4_tu(vint16m4_t maskedoff,vint16m4_t op1,int16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint16m8_t test___riscv_vadc_vxm_i16m8_tu(vint16m8_t maskedoff,vint16m8_t op1,int16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i16m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32mf2_t test___riscv_vadc_vxm_i32mf2_tu(vint32mf2_t maskedoff,vint32mf2_t op1,int32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m1_t test___riscv_vadc_vxm_i32m1_tu(vint32m1_t maskedoff,vint32m1_t op1,int32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m2_t test___riscv_vadc_vxm_i32m2_tu(vint32m2_t maskedoff,vint32m2_t op1,int32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m4_t test___riscv_vadc_vxm_i32m4_tu(vint32m4_t maskedoff,vint32m4_t op1,int32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint32m8_t test___riscv_vadc_vxm_i32m8_tu(vint32m8_t maskedoff,vint32m8_t op1,int32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i32m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m1_t test___riscv_vadc_vxm_i64m1_tu(vint64m1_t maskedoff,vint64m1_t op1,int64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m2_t test___riscv_vadc_vxm_i64m2_tu(vint64m2_t maskedoff,vint64m2_t op1,int64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m4_t test___riscv_vadc_vxm_i64m4_tu(vint64m4_t maskedoff,vint64m4_t op1,int64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vint64m8_t test___riscv_vadc_vxm_i64m8_tu(vint64m8_t maskedoff,vint64m8_t op1,int64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_i64m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf8_t test___riscv_vadc_vxm_u8mf8_tu(vuint8mf8_t maskedoff,vuint8mf8_t op1,uint8_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf4_t test___riscv_vadc_vxm_u8mf4_tu(vuint8mf4_t maskedoff,vuint8mf4_t op1,uint8_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8mf2_t test___riscv_vadc_vxm_u8mf2_tu(vuint8mf2_t maskedoff,vuint8mf2_t op1,uint8_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m1_t test___riscv_vadc_vxm_u8m1_tu(vuint8m1_t maskedoff,vuint8m1_t op1,uint8_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m2_t test___riscv_vadc_vxm_u8m2_tu(vuint8m2_t maskedoff,vuint8m2_t op1,uint8_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m4_t test___riscv_vadc_vxm_u8m4_tu(vuint8m4_t maskedoff,vuint8m4_t op1,uint8_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint8m8_t test___riscv_vadc_vxm_u8m8_tu(vuint8m8_t maskedoff,vuint8m8_t op1,uint8_t op2,vbool1_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u8m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf4_t test___riscv_vadc_vxm_u16mf4_tu(vuint16mf4_t maskedoff,vuint16mf4_t op1,uint16_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16mf2_t test___riscv_vadc_vxm_u16mf2_tu(vuint16mf2_t maskedoff,vuint16mf2_t op1,uint16_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m1_t test___riscv_vadc_vxm_u16m1_tu(vuint16m1_t maskedoff,vuint16m1_t op1,uint16_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m2_t test___riscv_vadc_vxm_u16m2_tu(vuint16m2_t maskedoff,vuint16m2_t op1,uint16_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m4_t test___riscv_vadc_vxm_u16m4_tu(vuint16m4_t maskedoff,vuint16m4_t op1,uint16_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint16m8_t test___riscv_vadc_vxm_u16m8_tu(vuint16m8_t maskedoff,vuint16m8_t op1,uint16_t op2,vbool2_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u16m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32mf2_t test___riscv_vadc_vxm_u32mf2_tu(vuint32mf2_t maskedoff,vuint32mf2_t op1,uint32_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32mf2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m1_t test___riscv_vadc_vxm_u32m1_tu(vuint32m1_t maskedoff,vuint32m1_t op1,uint32_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m2_t test___riscv_vadc_vxm_u32m2_tu(vuint32m2_t maskedoff,vuint32m2_t op1,uint32_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m4_t test___riscv_vadc_vxm_u32m4_tu(vuint32m4_t maskedoff,vuint32m4_t op1,uint32_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint32m8_t test___riscv_vadc_vxm_u32m8_tu(vuint32m8_t maskedoff,vuint32m8_t op1,uint32_t op2,vbool4_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u32m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m1_t test___riscv_vadc_vxm_u64m1_tu(vuint64m1_t maskedoff,vuint64m1_t op1,uint64_t op2,vbool64_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m1_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m2_t test___riscv_vadc_vxm_u64m2_tu(vuint64m2_t maskedoff,vuint64m2_t op1,uint64_t op2,vbool32_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m2_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m4_t test___riscv_vadc_vxm_u64m4_tu(vuint64m4_t maskedoff,vuint64m4_t op1,uint64_t op2,vbool16_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m4_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+vuint64m8_t test___riscv_vadc_vxm_u64m8_tu(vuint64m8_t maskedoff,vuint64m8_t op1,uint64_t op2,vbool8_t carryin,size_t vl)\n+{\n+    return __riscv_vadc_vxm_u64m8_tu(maskedoff,op1,op2,carryin,32);\n+}\n+\n+\n+\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e8,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e16,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*mf2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e32,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m1,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m2,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m4,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */\n+/* { dg-final { scan-assembler-times {vsetvli\\s+zero,\\s*[a-x0-9]+,\\s*e64,\\s*m8,\\s*tu,\\s*m[au]\\s+vadc\\.vxm\\s+v[0-9]+,\\s*v[0-9]+,\\s*[a-x0-9]+,\\s*v[0-9]+} 2 } } */"}]}