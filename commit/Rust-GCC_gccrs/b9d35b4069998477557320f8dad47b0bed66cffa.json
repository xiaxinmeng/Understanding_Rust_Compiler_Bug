{"sha": "b9d35b4069998477557320f8dad47b0bed66cffa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjlkMzViNDA2OTk5ODQ3NzU1NzMyMGY4ZGFkNDdiMGJlZDY2Y2ZmYQ==", "commit": {"author": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-07-01T13:15:03Z"}, "committer": {"name": "Tom Wood", "email": "wood@gnu.org", "date": "1992-07-01T13:15:03Z"}, "message": "(m88k_handle_pragma_token): Deleted.\n\nFrom-SVN: r1372", "tree": {"sha": "4f517fa9c1749a5dd81b3b543676a46719defe7c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f517fa9c1749a5dd81b3b543676a46719defe7c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b9d35b4069998477557320f8dad47b0bed66cffa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9d35b4069998477557320f8dad47b0bed66cffa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b9d35b4069998477557320f8dad47b0bed66cffa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b9d35b4069998477557320f8dad47b0bed66cffa/comments", "author": null, "committer": null, "parents": [{"sha": "f88a74911f7a002ce8fea763783a7b2f3e7b9ff0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f88a74911f7a002ce8fea763783a7b2f3e7b9ff0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f88a74911f7a002ce8fea763783a7b2f3e7b9ff0"}], "stats": {"total": 93, "additions": 0, "deletions": 93}, "files": [{"sha": "a61d6884cbc04122991652d9d2d59f553cac836b", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 0, "deletions": 93, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b9d35b4069998477557320f8dad47b0bed66cffa/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b9d35b4069998477557320f8dad47b0bed66cffa/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=b9d35b4069998477557320f8dad47b0bed66cffa", "patch": "@@ -1452,99 +1452,6 @@ output_label (label_number)\n {\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\", label_number);\n }\n-\n-/* Handle a pragma directive.  HANDLE_PRAGMA conspires to parse the input\n-   following #pragma into tokens based on yylex.  */\n-\n-void\n-m88k_handle_pragma_token (string, token)\n-     char *string;\n-     tree token;\n-{\n-  static enum pragma_state\n-    {\n-      ps_start,\n-      ps_done,\n-      ps_bad,\n-      ps_weak,\n-      ps_name,\n-      ps_equals,\n-      ps_value\n-    } state;\n-  static char *name;\n-  static char *value;\n-\n-  if (HANDLE_PRAGMA_WEAK)\n-    {\n-      if (string == 0)\n-\t{\n-\t  if (state == ps_name || state == ps_value)\n-\t    {\n-\t      fprintf (asm_out_file, \"\\t%s\\t \", WEAK_ASM_OP);\n-\t      ASM_OUTPUT_LABELREF (asm_out_file, name);\n-\t      fputc ('\\n', asm_out_file);\n-\t      if (state == ps_value)\n-\t\t{\n-\t\t  fprintf (asm_out_file, \"\\t%s\\t \", SET_ASM_OP);\n-\t\t  ASM_OUTPUT_LABELREF (asm_out_file, name);\n-\t\t  fputc (',', asm_out_file);\n-\t\t  ASM_OUTPUT_LABELREF (asm_out_file, value);\n-\t\t  fputc ('\\n', asm_out_file);\n-\t\t}\n-\t    }\n-\t  else if (! (state == ps_done || state == ps_start))\n-\t    warning (\"ignoring malformed #pragma weak symbol [=value]\");\n-\t  state = ps_start;\n-\t}\n-      else\n-\tswitch (state)\n-\t  {\n-\t  case ps_start:\n-\t    if (token\n-\t\t&& TREE_CODE (token) == IDENTIFIER_NODE\n-\t\t&& !strcmp (IDENTIFIER_POINTER (token), \"weak\"))\n-\t      state = ps_weak;\n-\t    else\n-\t      state = ps_done;\n-\t    break;\n-\n-\t  case ps_weak:\n-\t    if (token\n-\t\t&& TREE_CODE (token) == IDENTIFIER_NODE)\n-\t      {\n-\t\tname = IDENTIFIER_POINTER (token);\n-\t\tstate = ps_name;\n-\t      }\n-\t    else\n-\t      state = ps_bad;\n-\t    break;\n-\n-\t  case ps_name:\n-\t    state = (strcmp (string, \"=\") ? ps_bad : ps_equals);\n-\t    break;\n-\n-\t  case ps_equals:\n-\t    if (token\n-\t\t&& TREE_CODE (token) == IDENTIFIER_NODE)\n-\t      {\n-\t\tvalue = IDENTIFIER_POINTER (token);\n-\t\tstate = ps_value;\n-\t      }\n-\t    else\n-\t      state = ps_bad;\n-\t    break;\n-\n-\t  case ps_value:\n-\t    state = ps_bad;\n-\t  case ps_bad:\n-\t  case ps_done:\n-\t    break;\n-\n-\t  default:\n-\t    abort ();\n-\t  }\n-    }\n-}\n \f\n /* Generate the assembly code for function entry.\n "}]}