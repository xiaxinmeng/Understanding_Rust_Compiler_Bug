{"sha": "d9ec27c1c385d21ee47db8be4168dbc45ebe6e11", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDllYzI3YzFjMzg1ZDIxZWU0N2RiOGJlNDE2OGRiYzQ1ZWJlNmUxMQ==", "commit": {"author": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-13T20:46:17Z"}, "committer": {"name": "Maciej W. Rozycki", "email": "macro@linux-mips.org", "date": "2020-12-13T20:46:17Z"}, "message": "VAX: Check the correct operand for constant 0 push operation\n\nCheck the output operand for representing pushing a value onto the stack\nrather than the constant 0 input in determining whether to use the PUSHL\nor the CLRL instruction for a SImode move.  The latter actually works by\nmeans of using the predecrement addressing mode with the SP register and\nthe machine code produced even takes the same number of bytes, however\nat least with some VAX implementations it incurs a performance penalty.\nBesides, we don't want to check the wrong operand anyway and have code\nthat works by chance only.\n\nAdd a test case covering push operations; for operands different from\nconstant zero there is actually a code size advantage for using PUSHL\nrather than the equivalent MOVL instruction.\n\n\tgcc/\n\t* config/vax/vax.c (vax_output_int_move): Check the correct\n\toperand for constant 0 push operation.\n\n\tgcc/testsuite/\n\t* gcc.target/vax/push.c: New test.", "tree": {"sha": "a71839823b399d03923661adbbc42fc367de7dab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a71839823b399d03923661adbbc42fc367de7dab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d9ec27c1c385d21ee47db8be4168dbc45ebe6e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ec27c1c385d21ee47db8be4168dbc45ebe6e11", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d9ec27c1c385d21ee47db8be4168dbc45ebe6e11", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d9ec27c1c385d21ee47db8be4168dbc45ebe6e11/comments", "author": null, "committer": null, "parents": [{"sha": "294ca9eca0293146d91768f7a75335fb642b489e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/294ca9eca0293146d91768f7a75335fb642b489e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/294ca9eca0293146d91768f7a75335fb642b489e"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "7c0adac6aaff97fd859699fd200e11e6e40c529d", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ec27c1c385d21ee47db8be4168dbc45ebe6e11/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ec27c1c385d21ee47db8be4168dbc45ebe6e11/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=d9ec27c1c385d21ee47db8be4168dbc45ebe6e11", "patch": "@@ -1354,7 +1354,7 @@ vax_output_int_move (rtx insn ATTRIBUTE_UNUSED, rtx *operands,\n \n       if (operands[1] == const0_rtx)\n \t{\n-\t  if (push_operand (operands[1], SImode))\n+\t  if (push_operand (operands[0], SImode))\n \t    return \"pushl %1\";\n \t  return \"clrl %0\";\n \t}"}, {"sha": "647ea6014060244045a84e68957ef645b4689665", "filename": "gcc/testsuite/gcc.target/vax/push.c", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d9ec27c1c385d21ee47db8be4168dbc45ebe6e11/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpush.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d9ec27c1c385d21ee47db8be4168dbc45ebe6e11/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpush.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fvax%2Fpush.c?ref=d9ec27c1c385d21ee47db8be4168dbc45ebe6e11", "patch": "@@ -0,0 +1,27 @@\n+/* { dg-do compile } */\n+\n+void bar (void (*) (void), int, int);\n+\n+void\n+foo (void)\n+{\n+  bar (foo, 1, 0);\n+}\n+\n+/* Expect assembly like:\n+\n+\tpushl $0\n+\tpushl $1\n+\tpushab foo\n+\tcalls $3,bar\n+\n+rather than:\n+\n+\tclrl -(%sp)\n+\tmovl $1,-(%sp)\n+\tmovab foo,-(%sp)\n+\tcalls $3,bar\n+\n+ */\n+\n+/* { dg-final { scan-assembler \"\\[ \\t\\]+pushl\\[ \\t\\]+\\\\\\$0\\n\\[ \\t\\]+pushl\\[ \\t\\]+\\\\\\$1\\n\\[ \\t\\]+pushab\\[ \\t\\]+foo\\n\" } } */"}]}