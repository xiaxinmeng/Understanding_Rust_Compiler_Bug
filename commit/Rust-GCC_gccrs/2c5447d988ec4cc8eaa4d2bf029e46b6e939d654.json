{"sha": "2c5447d988ec4cc8eaa4d2bf029e46b6e939d654", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmM1NDQ3ZDk4OGVjNGNjOGVhYTRkMmJmMDI5ZTQ2YjZlOTM5ZDY1NA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-02T00:11:01Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1997-02-02T00:11:01Z"}, "message": "(movqi): Enable use of clr and st insns on TARGET_5200.\n\nFrom-SVN: r13576", "tree": {"sha": "16934abcc263159a1cb0c9579ad3e22413b0f0d7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/16934abcc263159a1cb0c9579ad3e22413b0f0d7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c5447d988ec4cc8eaa4d2bf029e46b6e939d654", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5447d988ec4cc8eaa4d2bf029e46b6e939d654", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c5447d988ec4cc8eaa4d2bf029e46b6e939d654", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c5447d988ec4cc8eaa4d2bf029e46b6e939d654/comments", "author": null, "committer": null, "parents": [{"sha": "0cb7cfedce465edfecb1777302e7fff431d91c95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cb7cfedce465edfecb1777302e7fff431d91c95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cb7cfedce465edfecb1777302e7fff431d91c95"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "83d38793fb6a09376d55d745f3b2f89700312686", "filename": "gcc/config/m68k/m68k.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c5447d988ec4cc8eaa4d2bf029e46b6e939d654/gcc%2Fconfig%2Fm68k%2Fm68k.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c5447d988ec4cc8eaa4d2bf029e46b6e939d654/gcc%2Fconfig%2Fm68k%2Fm68k.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.md?ref=2c5447d988ec4cc8eaa4d2bf029e46b6e939d654", "patch": "@@ -993,12 +993,13 @@\n   /* clr and st insns on 68000 read before writing.\n      This isn't so on the 68010, but we have no TARGET_68010.  */\n   if (!ADDRESS_REG_P (operands[0])\n-      && (TARGET_68020\n+      && ((TARGET_68020 || TARGET_5200)\n \t  || !(GET_CODE (operands[0]) == MEM && MEM_VOLATILE_P (operands[0]))))\n     {\n       if (operands[1] == const0_rtx)\n \treturn \\\"clr%.b %0\\\";\n-      if (GET_CODE (operands[1]) == CONST_INT\n+      if ((!TARGET_5200 || DATA_REG_P (operands[0]))\n+          && GET_CODE (operands[1]) == CONST_INT\n \t  && (INTVAL (operands[1]) & 255) == 255)\n \t{\n \t  CC_STATUS_INIT;\n@@ -4356,13 +4357,13 @@\n   \"!TARGET_5200\"\n   \"lsl%.b %1,%0\")\n \n-;; On all 68k models, this makes faster code in a special case.\n+;; On most 68k models, this makes faster code in a special case.\n \n (define_insn \"ashrsi_16\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(ashiftrt:SI (match_operand:SI 1 \"register_operand\" \"0\")\n \t\t     (const_int 16)))]\n-  \"\"\n+  \"!TARGET_68060\"\n   \"swap %0\\;ext%.l %0\")\n \n ;; On the 68000, this makes faster code in a special case."}]}