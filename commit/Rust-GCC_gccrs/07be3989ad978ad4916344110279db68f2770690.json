{"sha": "07be3989ad978ad4916344110279db68f2770690", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDdiZTM5ODlhZDk3OGFkNDkxNjM0NDExMDI3OWRiNjhmMjc3MDY5MA==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-19T19:44:05Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1992-09-19T19:44:05Z"}, "message": "(SUBREG_PROMOTED_{VAR,UNSIGNED}_P): New macros.\n\nFrom-SVN: r2171", "tree": {"sha": "3968574bbaeef2ffc62fad87177cb847264eedee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3968574bbaeef2ffc62fad87177cb847264eedee"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/07be3989ad978ad4916344110279db68f2770690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07be3989ad978ad4916344110279db68f2770690", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07be3989ad978ad4916344110279db68f2770690", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07be3989ad978ad4916344110279db68f2770690/comments", "author": null, "committer": null, "parents": [{"sha": "4d9d7d9d3599160b7ffcb496c028d0461d9c1111", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d9d7d9d3599160b7ffcb496c028d0461d9c1111", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d9d7d9d3599160b7ffcb496c028d0461d9c1111"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "0adbed90b523e978fe0058d44a9e4c7f6f29262f", "filename": "gcc/rtl.h", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/07be3989ad978ad4916344110279db68f2770690/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/07be3989ad978ad4916344110279db68f2770690/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=07be3989ad978ad4916344110279db68f2770690", "patch": "@@ -87,6 +87,7 @@ typedef struct rtx_def\n   /* 1 in a MEM or REG if value of this expression will never change\n      during the current function, even though it is not\n      manifestly constant.\n+     1 in a SUBREG if it is from a promoted variable that is unsigned.\n      1 in a SYMBOL_REF if it addresses something in the per-function\n      constants pool.\n      1 in a CALL_INSN if it is a const call.\n@@ -104,6 +105,8 @@ typedef struct rtx_def\n      0 if the MEM was a variable or the result of a * operator in C;\n      1 if it was the result of a . or -> operator (on a struct) in C.\n      1 in a REG if the register is used only in exit code a loop.\n+     1 in a SUBREG expression if was generated from a variable with a \n+     promoted mode.\n      1 in a CODE_LABEL if the label is used for nonlocal gotos\n      and must not be deleted even if its count is zero.\n      1 in a LABEL_REF if this is a reference to a label outside the\n@@ -443,6 +446,17 @@ extern char *note_insn_name[];\n #define SUBREG_REG(RTX) ((RTX)->fld[0].rtx)\n #define SUBREG_WORD(RTX) ((RTX)->fld[1].rtint)\n \n+/* 1 if the REG contained in SUBREG_REG is already known to be\n+   sign- or zero-extended from the mode of the SUBREG to the mode of\n+   the reg.  SUBREG_PROMOTED_UNSIGNED_P gives the signedness of the\n+   extension.  \n+\n+   When used as a LHS, is means that this extension must be done\n+   when assigning to SUBREG_REG.  */\n+\n+#define SUBREG_PROMOTED_VAR_P(RTX) ((RTX)->in_struct)\n+#define SUBREG_PROMOTED_UNSIGNED_P(RTX) ((RTX)->unchanging)\n+\n /* Access various components of an ASM_OPERANDS rtx.  */\n \n #define ASM_OPERANDS_TEMPLATE(RTX) XSTR ((RTX), 0)"}]}