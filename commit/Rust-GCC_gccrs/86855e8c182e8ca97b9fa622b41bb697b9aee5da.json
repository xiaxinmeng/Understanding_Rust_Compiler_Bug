{"sha": "86855e8c182e8ca97b9fa622b41bb697b9aee5da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODY4NTVlOGMxODJlOGNhOTdiOWZhNjIyYjQxYmI2OTdiOWFlZTVkYQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@hxi.com", "date": "2002-03-02T17:20:01Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2002-03-02T17:20:01Z"}, "message": "h8300-protos.h: Add a prototype for compute_a_shift_length.\n\n\t* config/h8300/h8300-protos.h: Add a prototype for\n\tcompute_a_shift_length.\n\t* config/h8300/h8300.c (h8300_asm_insn_count): New.\n\t(compute_a_shift_length): Likewise.\n\t(h8300_adjust_insn_length): Do not adjust insn length of shift\n\tinsns.\n\t* config/h8300/h8300.md (anonymous shift patterns): Use\n\tcompute_a_shift_length.\n\nFrom-SVN: r50227", "tree": {"sha": "54c6e2d0a349c41af52b457e632cb273d545b2a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/54c6e2d0a349c41af52b457e632cb273d545b2a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/86855e8c182e8ca97b9fa622b41bb697b9aee5da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86855e8c182e8ca97b9fa622b41bb697b9aee5da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/86855e8c182e8ca97b9fa622b41bb697b9aee5da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/86855e8c182e8ca97b9fa622b41bb697b9aee5da/comments", "author": null, "committer": null, "parents": [{"sha": "35aa3c1ceac0d91b0276d6f6de224b04e29ad16a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35aa3c1ceac0d91b0276d6f6de224b04e29ad16a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35aa3c1ceac0d91b0276d6f6de224b04e29ad16a"}], "stats": {"total": 220, "additions": 173, "deletions": 47}, "files": [{"sha": "3ebfedb14cb76be04ebe1261c12a815fd5821ec0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86855e8c182e8ca97b9fa622b41bb697b9aee5da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86855e8c182e8ca97b9fa622b41bb697b9aee5da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=86855e8c182e8ca97b9fa622b41bb697b9aee5da", "patch": "@@ -1,3 +1,14 @@\n+2002-03-02  Kazu Hirata  <kazu@hxi.com>\n+\n+\t* config/h8300/h8300-protos.h: Add a prototype for\n+\tcompute_a_shift_length.\n+\t* config/h8300/h8300.c (h8300_asm_insn_count): New.\n+\t(compute_a_shift_length): Likewise.\n+\t(h8300_adjust_insn_length): Do not adjust insn length of shift\n+\tinsns.\n+\t* config/h8300/h8300.md (anonymous shift patterns): Use\n+\tcompute_a_shift_length.\n+\n Sat Mar  2 06:30:14 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* config/sparc/sparc.c (sparc_initialize_trampoline): Use"}, {"sha": "c86484296cbdbb2271fb09ecbbe2354c368299b6", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86855e8c182e8ca97b9fa622b41bb697b9aee5da/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86855e8c182e8ca97b9fa622b41bb697b9aee5da/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=86855e8c182e8ca97b9fa622b41bb697b9aee5da", "patch": "@@ -27,6 +27,7 @@ Boston, MA 02111-1307, USA.  */\n /* Declarations for functions used in insn-output.c.  */\n #ifdef RTX_CODE\n extern const char *output_a_shift PARAMS ((rtx *));\n+extern unsigned int compute_a_shift_length PARAMS ((rtx, rtx *));\n extern const char *emit_a_rotate PARAMS ((enum rtx_code, rtx *));\n extern const char *output_simode_bld PARAMS ((int, rtx[]));\n extern void print_operand_address PARAMS ((FILE *, rtx));"}, {"sha": "456577a7a76c8feab3d79a3aa3acf0a12fe63f8a", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 155, "deletions": 44, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86855e8c182e8ca97b9fa622b41bb697b9aee5da/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86855e8c182e8ca97b9fa622b41bb697b9aee5da/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=86855e8c182e8ca97b9fa622b41bb697b9aee5da", "patch": "@@ -54,6 +54,7 @@ static unsigned int compute_saved_regs PARAMS ((void));\n static void push PARAMS ((FILE *, int));\n static void pop PARAMS ((FILE *, int));\n static const char *cond_string PARAMS ((enum rtx_code));\n+static unsigned int h8300_asm_insn_count PARAMS ((const char *));\n const struct attribute_spec h8300_attribute_table[];\n static tree h8300_handle_fndecl_attribute PARAMS ((tree *, tree, tree, int, bool *));\n static tree h8300_handle_eightbit_data_attribute PARAMS ((tree *, tree, tree, int, bool *));\n@@ -2863,6 +2864,160 @@ output_a_shift (operands)\n \t}\n     }\n }\n+\n+static unsigned int\n+h8300_asm_insn_count (const char *template)\n+{\n+  unsigned int count = 1;\n+\n+  for (; *template; template++)\n+    if (*template == '\\n')\n+      count++;\n+\n+  return count;\n+}\n+\n+unsigned int\n+compute_a_shift_length (insn, operands)\n+     rtx insn ATTRIBUTE_UNUSED;\n+     rtx *operands;\n+{\n+  rtx shift = operands[3];\n+  enum machine_mode mode = GET_MODE (shift);\n+  enum rtx_code code = GET_CODE (shift);\n+  enum shift_type shift_type;\n+  enum shift_mode shift_mode;\n+  struct shift_info info;\n+  unsigned int wlength = 0;\n+\n+  switch (mode)\n+    {\n+    case QImode:\n+      shift_mode = QIshift;\n+      break;\n+    case HImode:\n+      shift_mode = HIshift;\n+      break;\n+    case SImode:\n+      shift_mode = SIshift;\n+      break;\n+    default:\n+      abort ();\n+    }\n+\n+  switch (code)\n+    {\n+    case ASHIFTRT:\n+      shift_type = SHIFT_ASHIFTRT;\n+      break;\n+    case LSHIFTRT:\n+      shift_type = SHIFT_LSHIFTRT;\n+      break;\n+    case ASHIFT:\n+      shift_type = SHIFT_ASHIFT;\n+      break;\n+    default:\n+      abort ();\n+    }\n+\n+  if (GET_CODE (operands[2]) != CONST_INT)\n+    {\n+      /* Get the assembler code to do one shift.  */\n+      get_shift_alg (shift_type, shift_mode, 1, &info);\n+\n+      return (4 + h8300_asm_insn_count (info.shift1)) * 2;\n+    }\n+  else\n+    {\n+      int n = INTVAL (operands[2]);\n+\n+      /* If the count is negative, make it 0.  */\n+      if (n < 0)\n+\tn = 0;\n+      /* If the count is too big, truncate it.\n+         ANSI says shifts of GET_MODE_BITSIZE are undefined - we choose to\n+\t do the intuitive thing.  */\n+      else if ((unsigned int) n > GET_MODE_BITSIZE (mode))\n+\tn = GET_MODE_BITSIZE (mode);\n+\n+      get_shift_alg (shift_type, shift_mode, n, &info);\n+\n+      switch (info.alg)\n+\t{\n+\tcase SHIFT_SPECIAL:\n+\t  wlength += h8300_asm_insn_count (info.special);\n+\t  /* Fall through.  */\n+\n+\tcase SHIFT_INLINE:\n+\t  n = info.remainder;\n+\n+\t  if (info.shift2 != NULL)\n+\t    {\n+\t      wlength += h8300_asm_insn_count (info.shift2) * (n / 2);\n+\t      n = n % 2;\n+\t    }\n+\n+\t  wlength += h8300_asm_insn_count (info.shift1) * n;\n+\t    \n+\t  return 2 * wlength;\n+\n+\tcase SHIFT_ROT_AND:\n+\t  {\n+\t    int m = GET_MODE_BITSIZE (mode) - n;\n+\n+\t    /* Not all possibilities of rotate are supported.  They shouldn't\n+\t       be generated, but let's watch for 'em.  */\n+\t    if (info.shift1 == 0)\n+\t      abort ();\n+\n+\t    if (info.shift2 != NULL)\n+\t      {\n+\t\twlength += h8300_asm_insn_count (info.shift2) * (m / 2);\n+\t\tm = m % 2;\n+\t      }\n+\n+\t    wlength += h8300_asm_insn_count (info.shift1) * m;\n+\t    \n+\t    /* Now mask off the high bits.  */\n+\t    switch (mode)\n+\t      {\n+\t      case QImode:\n+\t\twlength += 1;\n+\t\tbreak;\n+\t      case HImode:\n+\t\twlength += 2;\n+\t\tbreak;\n+\t      case SImode:\n+\t\tif (TARGET_H8300)\n+\t\t  abort ();\n+\t\twlength += 3;\n+\t\tbreak;\n+\t      default:\n+\t\tabort ();\n+\t      }\n+\t    return 2 * wlength;\n+\t  }\n+\n+\tcase SHIFT_LOOP:\n+\t  /* A loop to shift by a \"large\" constant value.\n+\t     If we have shift-by-2 insns, use them.  */\n+\t  if (info.shift2 != NULL)\n+\t    {\n+\t      wlength += 3 + h8300_asm_insn_count (info.shift2);\n+\t      if (n % 2)\n+\t\twlength += h8300_asm_insn_count (info.shift1);\n+\t    }\n+\t  else\n+\t    {\n+\t      wlength += 3 + h8300_asm_insn_count (info.shift1);\n+\t    }\n+\t  return 2 * wlength;\n+\n+\tdefault:\n+\t  abort ();\n+\t}\n+    }\n+}\n \f\n /* A rotation by a non-constant will cause a loop to be generated, in\n    which a rotation by one bit is used.  A rotation by a constant,\n@@ -3436,50 +3591,6 @@ h8300_adjust_insn_length (insn, length)\n \t}\n     }\n \n-  /* Shifts need various adjustments.  */\n-  if (GET_CODE (pat) == PARALLEL\n-      && GET_CODE (XVECEXP (pat, 0, 0)) == SET\n-      && (GET_CODE (SET_SRC (XVECEXP (pat, 0, 0))) == ASHIFTRT\n-\t  || GET_CODE (SET_SRC (XVECEXP (pat, 0, 0))) == LSHIFTRT\n-\t  || GET_CODE (SET_SRC (XVECEXP (pat, 0, 0))) == ASHIFT))\n-    {\n-      rtx src = SET_SRC (XVECEXP (pat, 0, 0));\n-      enum machine_mode mode = GET_MODE (src);\n-      int shift;\n-\n-      if (GET_CODE (XEXP (src, 1)) != CONST_INT)\n-\treturn 0;\n-\n-      shift = INTVAL (XEXP (src, 1));\n-      /* According to ANSI, negative shift is undefined.  It is\n-         considered to be zero in this case (see function\n-         output_a_shift above).  */\n-      if (shift < 0)\n-\tshift = 0;\n-\n-      /* QImode shifts by small constants take one insn\n-\t per shift.  So the adjustment is 20 (md length) -\n-\t # shifts * 2.  */\n-      if (mode == QImode && shift <= 4)\n-\treturn -(20 - shift * 2);\n-\n-      /* Similarly for HImode and SImode shifts by small constants on\n-\t the H8/300H and H8/S.  */\n-      if ((TARGET_H8300H || TARGET_H8300S)\n-\t  && (mode == HImode || mode == SImode) && shift <= 4)\n-\treturn -(20 - shift * 2);\n-\n-      /* HImode shifts by small constants for the H8/300.  */\n-      if (mode == HImode && shift <= 4)\n-\treturn -(20 - (shift * (GET_CODE (src) == ASHIFT ? 2 : 4)));\n-\n-      /* SImode shifts by small constants for the H8/300.  */\n-      if (mode == SImode && shift <= 2)\n-\treturn -(20 - (shift * (GET_CODE (src) == ASHIFT ? 6 : 8)));\n-\n-      /* XXX ??? Could check for more shift/rotate cases here.  */\n-    }\n-\n   /* Rotations need various adjustments.  */\n   if (GET_CODE (pat) == SET\n       && (GET_CODE (SET_SRC (pat)) == ROTATE"}, {"sha": "a3c445a93964fe5de5f82a8f61987cbc0add262d", "filename": "gcc/config/h8300/h8300.md", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/86855e8c182e8ca97b9fa622b41bb697b9aee5da/gcc%2Fconfig%2Fh8300%2Fh8300.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/86855e8c182e8ca97b9fa622b41bb697b9aee5da/gcc%2Fconfig%2Fh8300%2Fh8300.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.md?ref=86855e8c182e8ca97b9fa622b41bb697b9aee5da", "patch": "@@ -1769,7 +1769,8 @@\n    (clobber (match_scratch:QI 4 \"=X,&r\"))]\n   \"\"\n   \"* return output_a_shift (operands);\"\n-  [(set_attr \"length\" \"20\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))\n    (set_attr \"cc\" \"clobber\")])\n \n ;; HI BIT SHIFTS\n@@ -1803,7 +1804,8 @@\n    (clobber (match_scratch:QI 4 \"=X,&r\"))]\n   \"\"\n   \"* return output_a_shift (operands);\"\n-  [(set_attr \"length\" \"20\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))\n    (set_attr \"cc\" \"clobber\")])\n \n ;;  SI BIT SHIFTS\n@@ -1837,7 +1839,8 @@\n    (clobber (match_scratch:QI 4 \"=X,&r\"))]\n   \"\"\n   \"* return output_a_shift (operands);\"\n-  [(set_attr \"length\" \"20\")\n+  [(set (attr \"length\")\n+\t(symbol_ref \"compute_a_shift_length (insn, operands)\"))\n    (set_attr \"cc\" \"clobber\")])\n \f\n ;; ----------------------------------------------------------------------"}]}