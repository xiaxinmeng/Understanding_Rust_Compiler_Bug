{"sha": "26c5953d277f00dbef89d7d6122e94a282a35bca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjZjNTk1M2QyNzdmMDBkYmVmODlkN2Q2MTIyZTk0YTI4MmEzNWJjYQ==", "commit": {"author": {"name": "Bernd Schmidt", "email": "bernd.schmidt@analog.com", "date": "2007-04-29T13:22:04Z"}, "committer": {"name": "Bernd Schmidt", "email": "bernds@gcc.gnu.org", "date": "2007-04-29T13:22:04Z"}, "message": "rtl.def (SS_ABS): New code.\n\n\t* rtl.def (SS_ABS): New code.\n\t* config/bfin/bfin.c (print_operand): New modifier 'v'.\n\t(enum bfin_builtins): Add BFIN_BUILTIN_SUM_2X16, BFIN_BUILTIN_ABS_1x32,\n\tBFIN_BUILTIN_ROUND_1x32, BFIN_BUILTIN_MULT_1x32x32,\n\tBFIN_BUILTIN_MULT_1x32x32NS, BFIN_BUILTIN_SSASHIFT_1x32.\n\t(bfin_init_builtins): Define them.\n\t(bdesc_1arg, bdesc_2arg): Add some of them here, ...\n\t(bfin_expand_builtin): ... and handle the others here.\n\t* config/bfin/bfin.md (ssabssi2, ssroundsi2, ssashiftsi3,\n\tflag_mul_macv2hi_parts_acconly_andcc0): New patterns.\n\t(ss_absv2hi2): Renamed from absv2hi; use ss_abs code.\n\t(ssashiftv2hi3, ssashifthi3, lshiftv2hi3, lshifthi3): Shift count\n\toperand is only HImode.\n\nFrom-SVN: r124280", "tree": {"sha": "bc34bb01d0de6e7a66c83088615917c55ba26e27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bc34bb01d0de6e7a66c83088615917c55ba26e27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26c5953d277f00dbef89d7d6122e94a282a35bca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c5953d277f00dbef89d7d6122e94a282a35bca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26c5953d277f00dbef89d7d6122e94a282a35bca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26c5953d277f00dbef89d7d6122e94a282a35bca/comments", "author": null, "committer": null, "parents": [{"sha": "88250695a74466517aa5d501fd735291cf6e4497", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88250695a74466517aa5d501fd735291cf6e4497", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88250695a74466517aa5d501fd735291cf6e4497"}], "stats": {"total": 220, "additions": 210, "deletions": 10}, "files": [{"sha": "ddd258727cbd27dc6f29a4e7b5c748ce88748f8b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c5953d277f00dbef89d7d6122e94a282a35bca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c5953d277f00dbef89d7d6122e94a282a35bca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=26c5953d277f00dbef89d7d6122e94a282a35bca", "patch": "@@ -1,3 +1,19 @@\n+2007-04-29  Bernd Schmidt  <bernd.schmidt@analog.com>\n+\n+\t* rtl.def (SS_ABS): New code.\n+\t* config/bfin/bfin.c (print_operand): New modifier 'v'.\n+\t(enum bfin_builtins): Add BFIN_BUILTIN_SUM_2X16, BFIN_BUILTIN_ABS_1x32,\n+\tBFIN_BUILTIN_ROUND_1x32, BFIN_BUILTIN_MULT_1x32x32,\n+\tBFIN_BUILTIN_MULT_1x32x32NS, BFIN_BUILTIN_SSASHIFT_1x32.\n+\t(bfin_init_builtins): Define them.\n+\t(bdesc_1arg, bdesc_2arg): Add some of them here, ...\n+\t(bfin_expand_builtin): ... and handle the others here.\n+\t* config/bfin/bfin.md (ssabssi2, ssroundsi2, ssashiftsi3,\n+\tflag_mul_macv2hi_parts_acconly_andcc0): New patterns.\n+\t(ss_absv2hi2): Renamed from absv2hi; use ss_abs code.\n+\t(ssashiftv2hi3, ssashifthi3, lshiftv2hi3, lshifthi3): Shift count\n+\toperand is only HImode.\n+\n 2007-04-29  Steven Bosscher  <steven@gcc.gnu.org>\n \n \t* regclass.c (scan_one_insn): Remove splitting of"}, {"sha": "727f2ca9b81c1e0be8eba198fa7d86fa435d564c", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 91, "deletions": 4, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c5953d277f00dbef89d7d6122e94a282a35bca/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c5953d277f00dbef89d7d6122e94a282a35bca/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=26c5953d277f00dbef89d7d6122e94a282a35bca", "patch": "@@ -1302,6 +1302,15 @@ print_operand (FILE *file, rtx x, char code)\n \t      gcc_assert (REGNO (x) == REG_A0 || REGNO (x) == REG_A1);\n \t      fprintf (file, \"%s.x\", reg_names[REGNO (x)]);\n \t    }\n+\t  else if (code == 'v')\n+\t    {\n+\t      if (REGNO (x) == REG_A0)\n+\t\tfprintf (file, \"AV0\");\n+\t      else if (REGNO (x) == REG_A1)\n+\t\tfprintf (file, \"AV1\");\n+\t      else\n+\t\toutput_operand_lossage (\"invalid operand for code '%c'\", code);\n+\t    }\n \t  else if (code == 'D')\n \t    {\n \t      fprintf (file, \"%s\", dregs_pair_names[REGNO (x)]);\n@@ -4627,16 +4636,21 @@ enum bfin_builtins\n   BFIN_BUILTIN_MIN_1X16,\n   BFIN_BUILTIN_MAX_1X16,\n \n+  BFIN_BUILTIN_SUM_2X16,\n   BFIN_BUILTIN_DIFFHL_2X16,\n   BFIN_BUILTIN_DIFFLH_2X16,\n \n   BFIN_BUILTIN_SSADD_1X32,\n   BFIN_BUILTIN_SSSUB_1X32,\n   BFIN_BUILTIN_NORM_1X32,\n+  BFIN_BUILTIN_ROUND_1X32,\n   BFIN_BUILTIN_NEG_1X32,\n+  BFIN_BUILTIN_ABS_1X32,\n   BFIN_BUILTIN_MIN_1X32,\n   BFIN_BUILTIN_MAX_1X32,\n   BFIN_BUILTIN_MULT_1X32,\n+  BFIN_BUILTIN_MULT_1X32X32,\n+  BFIN_BUILTIN_MULT_1X32X32NS,\n \n   BFIN_BUILTIN_MULHISILL,\n   BFIN_BUILTIN_MULHISILH,\n@@ -4647,6 +4661,7 @@ enum bfin_builtins\n   BFIN_BUILTIN_LSHIFT_2X16,\n   BFIN_BUILTIN_SSASHIFT_1X16,\n   BFIN_BUILTIN_SSASHIFT_2X16,\n+  BFIN_BUILTIN_SSASHIFT_1X32,\n \n   BFIN_BUILTIN_CPLX_MUL_16,\n   BFIN_BUILTIN_CPLX_MAC_16,\n@@ -4755,6 +4770,8 @@ bfin_init_builtins (void)\n   def_builtin (\"__builtin_bfin_norm_fr1x16\", short_ftype_int,\n \t       BFIN_BUILTIN_NORM_1X16);\n \n+  def_builtin (\"__builtin_bfin_sum_fr2x16\", short_ftype_v2hi,\n+\t       BFIN_BUILTIN_SUM_2X16);\n   def_builtin (\"__builtin_bfin_diff_hl_fr2x16\", short_ftype_v2hi,\n \t       BFIN_BUILTIN_DIFFHL_2X16);\n   def_builtin (\"__builtin_bfin_diff_lh_fr2x16\", short_ftype_v2hi,\n@@ -4775,10 +4792,18 @@ bfin_init_builtins (void)\n \t       BFIN_BUILTIN_SSSUB_1X32);\n   def_builtin (\"__builtin_bfin_negate_fr1x32\", int_ftype_int,\n \t       BFIN_BUILTIN_NEG_1X32);\n+  def_builtin (\"__builtin_bfin_abs_fr1x32\", int_ftype_int,\n+\t       BFIN_BUILTIN_ABS_1X32);\n   def_builtin (\"__builtin_bfin_norm_fr1x32\", short_ftype_int,\n \t       BFIN_BUILTIN_NORM_1X32);\n+  def_builtin (\"__builtin_bfin_round_fr1x32\", short_ftype_int,\n+\t       BFIN_BUILTIN_ROUND_1X32);\n   def_builtin (\"__builtin_bfin_mult_fr1x32\", int_ftype_short_short,\n \t       BFIN_BUILTIN_MULT_1X32);\n+  def_builtin (\"__builtin_bfin_mult_fr1x32x32\", int_ftype_int_int,\n+\t       BFIN_BUILTIN_MULT_1X32X32);\n+  def_builtin (\"__builtin_bfin_mult_fr1x32x32NS\", int_ftype_int_int,\n+\t       BFIN_BUILTIN_MULT_1X32X32NS);\n \n   /* Shifts.  */\n   def_builtin (\"__builtin_bfin_shl_fr1x16\", short_ftype_int_int,\n@@ -4789,6 +4814,8 @@ bfin_init_builtins (void)\n \t       BFIN_BUILTIN_LSHIFT_1X16);\n   def_builtin (\"__builtin_bfin_lshl_fr2x16\", v2hi_ftype_v2hi_int,\n \t       BFIN_BUILTIN_LSHIFT_2X16);\n+  def_builtin (\"__builtin_bfin_shl_fr1x32\", int_ftype_int_int,\n+\t       BFIN_BUILTIN_SSASHIFT_1X32);\n \n   /* Complex numbers.  */\n   def_builtin (\"__builtin_bfin_cmplx_mul\", v2hi_ftype_v2hi_v2hi,\n@@ -4816,6 +4843,7 @@ static const struct builtin_description bdesc_2arg[] =\n   { CODE_FOR_ssashifthi3, \"__builtin_bfin_shl_fr1x16\", BFIN_BUILTIN_SSASHIFT_1X16, -1 },\n   { CODE_FOR_lshiftv2hi3, \"__builtin_bfin_lshl_fr2x16\", BFIN_BUILTIN_LSHIFT_2X16, -1 },\n   { CODE_FOR_lshifthi3, \"__builtin_bfin_lshl_fr1x16\", BFIN_BUILTIN_LSHIFT_1X16, -1 },\n+  { CODE_FOR_ssashiftsi3, \"__builtin_bfin_shl_fr1x32\", BFIN_BUILTIN_SSASHIFT_1X32, -1 },\n \n   { CODE_FOR_sminhi3, \"__builtin_bfin_min_fr1x16\", BFIN_BUILTIN_MIN_1X16, -1 },\n   { CODE_FOR_smaxhi3, \"__builtin_bfin_max_fr1x16\", BFIN_BUILTIN_MAX_1X16, -1 },\n@@ -4848,12 +4876,14 @@ static const struct builtin_description bdesc_1arg[] =\n   { CODE_FOR_abshi2, \"__builtin_bfin_abs_fr1x16\", BFIN_BUILTIN_ABS_1X16, 0 },\n \n   { CODE_FOR_signbitssi2, \"__builtin_bfin_norm_fr1x32\", BFIN_BUILTIN_NORM_1X32, 0 },\n+  { CODE_FOR_ssroundsi2, \"__builtin_bfin_round_fr1x32\", BFIN_BUILTIN_ROUND_1X32, 0 },\n   { CODE_FOR_ssnegsi2, \"__builtin_bfin_negate_fr1x32\", BFIN_BUILTIN_NEG_1X32, 0 },\n+  { CODE_FOR_ssabssi2, \"__builtin_bfin_abs_fr1x32\", BFIN_BUILTIN_ABS_1X32, 0 },\n \n   { CODE_FOR_movv2hi_hi_low, \"__builtin_bfin_extract_lo\", BFIN_BUILTIN_EXTRACTLO, 0 },\n   { CODE_FOR_movv2hi_hi_high, \"__builtin_bfin_extract_hi\", BFIN_BUILTIN_EXTRACTHI, 0 },\n   { CODE_FOR_ssnegv2hi2, \"__builtin_bfin_negate_fr2x16\", BFIN_BUILTIN_NEG_2X16, 0 },\n-  { CODE_FOR_absv2hi2, \"__builtin_bfin_abs_fr2x16\", BFIN_BUILTIN_ABS_2X16, 0 }\n+  { CODE_FOR_ssabsv2hi2, \"__builtin_bfin_abs_fr2x16\", BFIN_BUILTIN_ABS_2X16, 0 }\n };\n \n /* Errors in the source file can cause expand_expr to return const0_rtx\n@@ -4985,7 +5015,7 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n   tree fndecl = TREE_OPERAND (CALL_EXPR_FN (exp), 0);\n   unsigned int fcode = DECL_FUNCTION_CODE (fndecl);\n   tree arg0, arg1, arg2;\n-  rtx op0, op1, op2, accvec, pat, tmp1, tmp2;\n+  rtx op0, op1, op2, accvec, pat, tmp1, tmp2, a0reg, a1reg;\n   enum machine_mode tmode, mode0;\n \n   switch (fcode)\n@@ -4999,10 +5029,12 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n \n     case BFIN_BUILTIN_DIFFHL_2X16:\n     case BFIN_BUILTIN_DIFFLH_2X16:\n+    case BFIN_BUILTIN_SUM_2X16:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n-      icode = (fcode == BFIN_BUILTIN_DIFFHL_2X16\n-\t       ? CODE_FOR_subhilov2hi3 : CODE_FOR_sublohiv2hi3);\n+      icode = (fcode == BFIN_BUILTIN_DIFFHL_2X16 ? CODE_FOR_subhilov2hi3\n+\t       : fcode == BFIN_BUILTIN_DIFFLH_2X16 ? CODE_FOR_sublohiv2hi3\n+\t       : CODE_FOR_ssaddhilov2hi3);\n       tmode = insn_data[icode].operand[0].mode;\n       mode0 = insn_data[icode].operand[1].mode;\n \n@@ -5023,6 +5055,61 @@ bfin_expand_builtin (tree exp, rtx target ATTRIBUTE_UNUSED,\n       emit_insn (pat);\n       return target;\n \n+    case BFIN_BUILTIN_MULT_1X32X32:\n+    case BFIN_BUILTIN_MULT_1X32X32NS:\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      arg1 = CALL_EXPR_ARG (exp, 1);\n+      op0 = expand_expr (arg0, NULL_RTX, VOIDmode, 0);\n+      op1 = expand_expr (arg1, NULL_RTX, VOIDmode, 0);\n+      if (! target\n+\t  || !register_operand (target, SImode))\n+\ttarget = gen_reg_rtx (SImode);\n+\n+      a1reg = gen_rtx_REG (PDImode, REG_A1);\n+      a0reg = gen_rtx_REG (PDImode, REG_A0);\n+      tmp1 = gen_lowpart (V2HImode, op0);\n+      tmp2 = gen_lowpart (V2HImode, op1);\n+      emit_insn (gen_flag_macinit1hi (a1reg,\n+\t\t\t\t      gen_lowpart (HImode, op0),\n+\t\t\t\t      gen_lowpart (HImode, op1),\n+\t\t\t\t      GEN_INT (MACFLAG_FU)));\n+      emit_insn (gen_lshrpdi3 (a1reg, a1reg, GEN_INT (16)));\n+\n+      if (fcode == BFIN_BUILTIN_MULT_1X32X32)\n+\temit_insn (gen_flag_mul_macv2hi_parts_acconly (a0reg, a1reg, tmp1, tmp2,\n+\t\t\t\t\t\t       const1_rtx, const1_rtx,\n+\t\t\t\t\t\t       const1_rtx, const0_rtx, a1reg,\n+\t\t\t\t\t\t       const0_rtx, GEN_INT (MACFLAG_NONE),\n+\t\t\t\t\t\t       GEN_INT (MACFLAG_M)));\n+      else\n+\t{\n+\t  /* For saturating multiplication, there's exactly one special case\n+\t     to be handled: multiplying the smallest negative value with\n+\t     itself.  Due to shift correction in fractional multiplies, this\n+\t     can overflow.  Iff this happens, OP2 will contain 1, which, when\n+\t     added in 32 bits to the smallest negative, wraps to the largest\n+\t     positive, which is the result we want.  */\n+\t  op2 = gen_reg_rtx (V2HImode);\n+\t  emit_insn (gen_packv2hi (op2, tmp1, tmp2, const0_rtx, const0_rtx));\n+\t  emit_insn (gen_movsibi (gen_rtx_REG (BImode, REG_CC),\n+\t\t\t\t  gen_lowpart (SImode, op2)));\n+\t  emit_insn (gen_flag_mul_macv2hi_parts_acconly_andcc0 (a0reg, a1reg, tmp1, tmp2,\n+\t\t\t\t\t\t\t\tconst1_rtx, const1_rtx,\n+\t\t\t\t\t\t\t\tconst1_rtx, const0_rtx, a1reg,\n+\t\t\t\t\t\t\t\tconst0_rtx, GEN_INT (MACFLAG_NONE),\n+\t\t\t\t\t\t\t\tGEN_INT (MACFLAG_M)));\n+\t  op2 = gen_reg_rtx (SImode);\n+\t  emit_insn (gen_movbisi (op2, gen_rtx_REG (BImode, REG_CC)));\n+\t}\n+      emit_insn (gen_flag_machi_parts_acconly (a1reg, tmp2, tmp1,\n+\t\t\t\t\t       const1_rtx, const0_rtx,\n+\t\t\t\t\t       a1reg, const0_rtx, GEN_INT (MACFLAG_M)));\n+      emit_insn (gen_ashrpdi3 (a1reg, a1reg, GEN_INT (15)));\n+      emit_insn (gen_sum_of_accumulators (target, a0reg, a0reg, a1reg));\n+      if (fcode == BFIN_BUILTIN_MULT_1X32X32NS)\n+\temit_insn (gen_addsi3 (target, target, op2));\n+      return target;\n+\n     case BFIN_BUILTIN_CPLX_MUL_16:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       arg1 = CALL_EXPR_ARG (exp, 1);"}, {"sha": "c7eb7d973936eb5cc758595dfe47e62c48cde866", "filename": "gcc/config/bfin/bfin.md", "status": "modified", "additions": 100, "deletions": 6, "changes": 106, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c5953d277f00dbef89d7d6122e94a282a35bca/gcc%2Fconfig%2Fbfin%2Fbfin.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c5953d277f00dbef89d7d6122e94a282a35bca/gcc%2Fconfig%2Fbfin%2Fbfin.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.md?ref=26c5953d277f00dbef89d7d6122e94a282a35bca", "patch": "@@ -1362,6 +1362,13 @@\n   \"%0 = abs %1%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n+(define_insn \"ssabssi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n+\t(ss_abs:SI (match_operand:SI 1 \"register_operand\" \"d\")))]\n+  \"\"\n+  \"%0 = abs %1%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n (define_insn \"negsi2\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=d\")\n \t(neg:SI (match_operand:SI 1 \"register_operand\" \"d\")))]\n@@ -1393,6 +1400,16 @@\n   \"%h0 = signbits %1%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n+(define_insn \"ssroundsi2\"\n+  [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n+\t(truncate:HI\n+\t (lshiftrt:SI (ss_plus:SI (match_operand:SI 1 \"register_operand\" \"d\")\n+\t\t\t\t  (const_int 32768))\n+\t\t      (const_int 16))))]\n+  \"\"\n+  \"%h0 = %1 (RND)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n (define_insn \"smaxhi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d\")\n \t(smax:HI (match_operand:HI 1 \"register_operand\" \"d\")\n@@ -2374,6 +2391,69 @@\n   operands[3] = gen_rtx_NE (BImode, operands[1], const0_rtx);\n })\n \n+;; Same as above, but and CC with the overflow bit generated by the first\n+;; multiplication.\n+(define_insn \"flag_mul_macv2hi_parts_acconly_andcc0\"\n+  [(set (match_operand:PDI 0 \"register_operand\" \"=B,e,e\")\n+\t(unspec:PDI [(vec_select:HI\n+\t\t      (match_operand:V2HI 2 \"register_operand\" \"d,d,d\")\n+\t\t      (parallel [(match_operand 4 \"const01_operand\" \"P0P1,P0P1,P0P1\")]))\n+\t\t     (vec_select:HI\n+\t\t      (match_operand:V2HI 3 \"register_operand\" \"d,d,d\")\n+\t\t      (parallel [(match_operand 6 \"const01_operand\" \"P0P1,P0P1,P0P1\")]))\n+\t\t     (match_operand 10 \"const_int_operand\" \"PB,PA,PA\")]\n+\t\t    UNSPEC_MUL_WITH_FLAG))\n+   (set (match_operand:PDI 1 \"register_operand\" \"=B,e,e\")\n+\t(unspec:PDI [(vec_select:HI\n+\t\t      (match_dup 2)\n+\t\t      (parallel [(match_operand 5 \"const01_operand\" \"P0P1,P0P1,P0P1\")]))\n+\t\t     (vec_select:HI\n+\t\t      (match_dup 3)\n+\t\t      (parallel [(match_operand 7 \"const01_operand\" \"P0P1,P0P1,P0P1\")]))\n+\t\t     (match_operand:PDI 8 \"register_operand\" \"1,1,1\")\n+\t\t     (match_operand 9 \"const01_operand\" \"P0P1,P0P1,P0P1\")\n+\t\t     (match_operand 11 \"const_int_operand\" \"PA,PB,PA\")]\n+\t\t    UNSPEC_MAC_WITH_FLAG))\n+   (set (reg:BI REG_CC)\n+\t(and:BI (reg:BI REG_CC)\n+\t\t(unspec:BI [(vec_select:HI (match_dup 2) (parallel [(match_dup 4)]))\n+\t\t\t    (vec_select:HI (match_dup 3) (parallel [(match_dup 6)]))\n+\t\t\t    (match_dup 10)]\n+\t\t\t   UNSPEC_MUL_WITH_FLAG)))]\n+  \"MACFLAGS_MATCH_P (INTVAL (operands[10]), INTVAL (operands[11]))\"\n+{\n+  rtx xops[6];\n+  const char *templates[] = {\n+    \"%0 = %h2 * %h3, %1 %b4 %h2 * %h3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %d2 * %h3, %1 %b4 %h2 * %h3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %h2 * %h3, %1 %b4 %d2 * %h3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %d2 * %h3, %1 %b4 %d2 * %h3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %h2 * %d3, %1 %b4 %h2 * %h3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %d2 * %d3, %1 %b4 %h2 * %h3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %h2 * %d3, %1 %b4 %d2 * %h3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %d2 * %d3, %1 %b4 %d2 * %h3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %h2 * %h3, %1 %b4 %h2 * %d3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %d2 * %h3, %1 %b4 %h2 * %d3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %h2 * %h3, %1 %b4 %d2 * %d3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %d2 * %h3, %1 %b4 %d2 * %d3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %h2 * %d3, %1 %b4 %h2 * %d3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %d2 * %d3, %1 %b4 %h2 * %d3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %h2 * %d3, %1 %b4 %d2 * %d3 %M5;\\n\\tCC &= %v0;\",\n+    \"%0 = %d2 * %d3, %1 %b4 %d2 * %d3 %M5;\\n\\tCC &= %v0;\" };\n+  int alt = (INTVAL (operands[4]) + (INTVAL (operands[5]) << 1)\n+\t     + (INTVAL (operands[6]) << 2)  + (INTVAL (operands[7]) << 3));\n+  xops[0] = operands[0];\n+  xops[1] = operands[1];\n+  xops[2] = operands[2];\n+  xops[3] = operands[3];\n+  xops[4] = operands[9];\n+  xops[5] = which_alternative == 0 ? operands[10] : operands[11];\n+  output_asm_insn (templates[alt], xops);\n+  return \"\";\n+}\n+  [(set_attr \"type\" \"misc\")\n+   (set_attr \"length\" \"6\")\n+   (set_attr \"seq_insns\" \"multi\")])\n \n (define_expand \"bge\"\n   [(set (match_dup 1) (match_dup 2))\n@@ -3966,9 +4046,9 @@\n   \"%0 = - %1 (V)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n-(define_insn \"absv2hi2\"\n+(define_insn \"ssabsv2hi2\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d\")\n-\t(abs:V2HI (match_operand:V2HI 1 \"register_operand\" \"d\")))]\n+\t(ss_abs:V2HI (match_operand:V2HI 1 \"register_operand\" \"d\")))]\n   \"\"\n   \"%0 = ABS %1 (V)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n@@ -3978,7 +4058,7 @@\n (define_insn \"ssashiftv2hi3\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d,d,d\")\n \t(if_then_else:V2HI\n-\t (lt (match_operand:SI 2 \"vec_shift_operand\" \"d,Ku4,Ks4\") (const_int 0))\n+\t (lt (match_operand:HI 2 \"vec_shift_operand\" \"d,Ku4,Ks4\") (const_int 0))\n \t (ashiftrt:V2HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d\")\n \t\t\t(match_dup 2))\n \t (ss_ashift:V2HI (match_dup 1) (match_dup 2))))]\n@@ -3992,7 +4072,7 @@\n (define_insn \"ssashifthi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d,d,d\")\n \t(if_then_else:HI\n-\t (lt (match_operand:SI 2 \"vec_shift_operand\" \"d,Ku4,Ks4\") (const_int 0))\n+\t (lt (match_operand:HI 2 \"vec_shift_operand\" \"d,Ku4,Ks4\") (const_int 0))\n \t (ashiftrt:HI (match_operand:HI 1 \"register_operand\" \"d,d,d\")\n \t\t      (match_dup 2))\n \t (ss_ashift:HI (match_dup 1) (match_dup 2))))]\n@@ -4003,10 +4083,24 @@\n    %0 = %1 >>> %N2 (V,S)%!\"\n   [(set_attr \"type\" \"dsp32\")])\n \n+(define_insn \"ssashiftsi3\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=d,d,d\")\n+\t(if_then_else:SI\n+\t (lt (match_operand:HI 2 \"reg_or_const_int_operand\" \"d,Ku5,Ks5\") (const_int 0))\n+\t (ashiftrt:SI (match_operand:HI 1 \"register_operand\" \"d,d,d\")\n+\t\t      (match_dup 2))\n+\t (ss_ashift:SI (match_dup 1) (match_dup 2))))]\n+  \"\"\n+  \"@\n+   %0 = ASHIFT %1 BY %h2 (S)%!\n+   %0 = %1 << %2 (S)%!\n+   %0 = %1 >>> %N2 (S)%!\"\n+  [(set_attr \"type\" \"dsp32\")])\n+\n (define_insn \"lshiftv2hi3\"\n   [(set (match_operand:V2HI 0 \"register_operand\" \"=d,d,d\")\n \t(if_then_else:V2HI\n-\t (lt (match_operand:SI 2 \"vec_shift_operand\" \"d,Ku4,Ks4\") (const_int 0))\n+\t (lt (match_operand:HI 2 \"vec_shift_operand\" \"d,Ku4,Ks4\") (const_int 0))\n \t (lshiftrt:V2HI (match_operand:V2HI 1 \"register_operand\" \"d,d,d\")\n \t\t\t(match_dup 2))\n \t (ashift:V2HI (match_dup 1) (match_dup 2))))]\n@@ -4020,7 +4114,7 @@\n (define_insn \"lshifthi3\"\n   [(set (match_operand:HI 0 \"register_operand\" \"=d,d,d\")\n \t(if_then_else:HI\n-\t (lt (match_operand:SI 2 \"vec_shift_operand\" \"d,Ku4,Ks4\") (const_int 0))\n+\t (lt (match_operand:HI 2 \"vec_shift_operand\" \"d,Ku4,Ks4\") (const_int 0))\n \t (lshiftrt:HI (match_operand:HI 1 \"register_operand\" \"d,d,d\")\n \t\t      (match_dup 2))\n \t (ashift:HI (match_dup 1) (match_dup 2))))]"}, {"sha": "741dd2926d7c4d4d28b2946c2e694c3d4d693bae", "filename": "gcc/rtl.def", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26c5953d277f00dbef89d7d6122e94a282a35bca/gcc%2Frtl.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26c5953d277f00dbef89d7d6122e94a282a35bca/gcc%2Frtl.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.def?ref=26c5953d277f00dbef89d7d6122e94a282a35bca", "patch": "@@ -657,6 +657,9 @@ DEF_RTL_EXPR(SS_MINUS, \"ss_minus\", \"ee\", RTX_BIN_ARITH)\n /* Negation with signed saturation.  */\n DEF_RTL_EXPR(SS_NEG, \"ss_neg\", \"e\", RTX_UNARY)\n \n+/* Absolute value with signed saturation.  */\n+DEF_RTL_EXPR(SS_ABS, \"ss_abs\", \"e\", RTX_UNARY)\n+\n /* Shift left with signed saturation.  */\n DEF_RTL_EXPR(SS_ASHIFT, \"ss_ashift\", \"ee\", RTX_BIN_ARITH)\n "}]}