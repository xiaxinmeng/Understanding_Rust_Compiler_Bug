{"sha": "aa67d03c30f907fd47adfadff3fb7c58c0b437d1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWE2N2QwM2MzMGY5MDdmZDQ3YWRmYWRmZjNmYjdjNThjMGI0MzdkMQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2018-02-20T18:52:07Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2018-02-20T18:52:07Z"}, "message": "re PR middle-end/82123 (spurious -Wformat-overflow warning for converted vars)\n\n\tPR middle-end/82123\n\tPR tree-optimization/81592\n\tPR middle-end/79257\n\t* gimple-ssa-sprintf.c: Include alloc-pool.h, vr-values.h and\n\tgimple-ssa-evrp-analyze.h\n\t(class sprintf_dom_walker): Add after_dom_children member function.\n\tAdd evrp_range_analyzer member.\n\t(sprintf_dom_walker::before_dom_children): Call into the EVRP\n\trange analyzer as needed.\n\t(sprintf_dom_walker::after_dom_children): New member function.\n\n\t* gcc.dg/builtin-unreachable-6.c: Turn off VRP.\n\nFrom-SVN: r257852", "tree": {"sha": "6272d72d919142c308a094654059224031a33978", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6272d72d919142c308a094654059224031a33978"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/aa67d03c30f907fd47adfadff3fb7c58c0b437d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa67d03c30f907fd47adfadff3fb7c58c0b437d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aa67d03c30f907fd47adfadff3fb7c58c0b437d1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aa67d03c30f907fd47adfadff3fb7c58c0b437d1/comments", "author": null, "committer": null, "parents": [{"sha": "2db63ab20cdbd39e2ef83e41f34bb4ef8bcfb337", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2db63ab20cdbd39e2ef83e41f34bb4ef8bcfb337", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2db63ab20cdbd39e2ef83e41f34bb4ef8bcfb337"}], "stats": {"total": 33, "additions": 31, "deletions": 2}, "files": [{"sha": "bef9eb1d3ffb35862dd3b7fd8c3c39bddec76b49", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa67d03c30f907fd47adfadff3fb7c58c0b437d1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa67d03c30f907fd47adfadff3fb7c58c0b437d1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=aa67d03c30f907fd47adfadff3fb7c58c0b437d1", "patch": "@@ -3,6 +3,13 @@\n \tPR middle-end/82123\n \tPR tree-optimization/81592\n \tPR middle-end/79257\n+\t* gimple-ssa-sprintf.c: Include alloc-pool.h, vr-values.h and \n+\tgimple-ssa-evrp-analyze.h\n+\t(class sprintf_dom_walker): Add after_dom_children member function.\n+\tAdd evrp_range_analyzer member.\n+\t(sprintf_dom_walker::before_dom_children): Call into the EVRP\n+\trange analyzer as needed.\n+\t(sprintf_dom_walker::after_dom_children): New member function.\n \t* gimple-ssa-evrp-analyze.c (evrp_range_analyzer::enter): Do nothing\n \tif not optimizing.\n \t(evrp_range_analyzer::record_ranges_from_stmt): Likewise."}, {"sha": "545f8337c13c184717de94e98a008347ea55681e", "filename": "gcc/gimple-ssa-sprintf.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa67d03c30f907fd47adfadff3fb7c58c0b437d1/gcc%2Fgimple-ssa-sprintf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa67d03c30f907fd47adfadff3fb7c58c0b437d1/gcc%2Fgimple-ssa-sprintf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-ssa-sprintf.c?ref=aa67d03c30f907fd47adfadff3fb7c58c0b437d1", "patch": "@@ -80,6 +80,9 @@ along with GCC; see the file COPYING3.  If not see\n #include \"substring-locations.h\"\n #include \"diagnostic.h\"\n #include \"domwalk.h\"\n+#include \"alloc-pool.h\"\n+#include \"vr-values.h\"\n+#include \"gimple-ssa-evrp-analyze.h\"\n \n /* The likely worst case value of MB_LEN_MAX for the target, large enough\n    for UTF-8.  Ideally, this would be obtained by a target hook if it were\n@@ -121,10 +124,12 @@ class sprintf_dom_walker : public dom_walker\n   ~sprintf_dom_walker () {}\n \n   edge before_dom_children (basic_block) FINAL OVERRIDE;\n+  void after_dom_children (basic_block) FINAL OVERRIDE;\n   bool handle_gimple_call (gimple_stmt_iterator *);\n \n   struct call_info;\n   bool compute_format_length (call_info &, format_result *);\n+  class evrp_range_analyzer evrp_range_analyzer;\n };\n \n class pass_sprintf_length : public gimple_opt_pass\n@@ -3456,7 +3461,7 @@ parse_directive (sprintf_dom_walker::call_info &info,\n \n bool\n sprintf_dom_walker::compute_format_length (call_info &info,\n-\t\t\t\t\t    format_result *res)\n+\t\t\t\t\t   format_result *res)\n {\n   if (dump_file)\n     {\n@@ -4012,11 +4017,15 @@ sprintf_dom_walker::handle_gimple_call (gimple_stmt_iterator *gsi)\n edge\n sprintf_dom_walker::before_dom_children (basic_block bb)\n {\n+  evrp_range_analyzer.enter (bb);\n   for (gimple_stmt_iterator si = gsi_start_bb (bb); !gsi_end_p (si); )\n     {\n       /* Iterate over statements, looking for function calls.  */\n       gimple *stmt = gsi_stmt (si);\n \n+      /* First record ranges generated by this statement.  */\n+      evrp_range_analyzer.record_ranges_from_stmt (stmt, false);\n+\n       if (is_gimple_call (stmt) && handle_gimple_call (&si))\n \t/* If handle_gimple_call returns true, the iterator is\n \t   already pointing to the next statement.  */\n@@ -4027,6 +4036,12 @@ sprintf_dom_walker::before_dom_children (basic_block bb)\n   return NULL;\n }\n \n+void\n+sprintf_dom_walker::after_dom_children (basic_block bb)\n+{\n+  evrp_range_analyzer.leave (bb);\n+}\n+\n /* Execute the pass for function FUN.  */\n \n unsigned int"}, {"sha": "de9cd420e9e4f04486ea87100a34e73392595017", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa67d03c30f907fd47adfadff3fb7c58c0b437d1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa67d03c30f907fd47adfadff3fb7c58c0b437d1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=aa67d03c30f907fd47adfadff3fb7c58c0b437d1", "patch": "@@ -1,3 +1,10 @@\n+2018-02-20  Jeff Law  <law@redhat.com>\n+\n+        PR middle-end/82123\n+        PR tree-optimization/81592\n+        PR middle-end/79257\n+\t* gcc.dg/builtin-unreachable-6.c: Turn off VRP.\n+\n 2018-02-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/84488"}, {"sha": "b0504be89cc75d13c9b1dc203b72c2291a981104", "filename": "gcc/testsuite/gcc.dg/builtin-unreachable-6.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/aa67d03c30f907fd47adfadff3fb7c58c0b437d1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-unreachable-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/aa67d03c30f907fd47adfadff3fb7c58c0b437d1/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-unreachable-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fbuiltin-unreachable-6.c?ref=aa67d03c30f907fd47adfadff3fb7c58c0b437d1", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -fdump-tree-fab1 -fno-tree-dominator-opts\" } */\n+/* { dg-options \"-O2 -fdump-tree-fab1 -fno-tree-dominator-opts -fno-tree-vrp\" } */\n \n void\n foo (int b, int c)"}]}