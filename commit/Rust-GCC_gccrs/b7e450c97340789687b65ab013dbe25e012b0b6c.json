{"sha": "b7e450c97340789687b65ab013dbe25e012b0b6c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjdlNDUwYzk3MzQwNzg5Njg3YjY1YWIwMTNkYmUyNWUwMTJiMGI2Yw==", "commit": {"author": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-09T09:12:19Z"}, "committer": {"name": "Jonathan Wright", "email": "jonathan.wright@arm.com", "date": "2021-07-20T09:02:41Z"}, "message": "aarch64: Refactor TBL/TBX RTL patterns\n\nRename two-source-register TBL/TBX RTL patterns so that their names\nbetter reflect what they do, rather than confusing them with tbl3 or\ntbx4 patterns. Also use the correct \"neon_tbl2\" type attribute for\nboth patterns.\n\nRename single-source-register TBL/TBX patterns for consistency.\n\ngcc/ChangeLog:\n\n2021-07-08  Jonathan Wright  <jonathan.wright@arm.com>\n\n\t* config/aarch64/aarch64-simd-builtins.def: Use two variant\n\tgenerators for all TBL/TBX intrinsics and rename to\n\tconsistent forms: qtbl[1234] or qtbx[1234].\n\t* config/aarch64/aarch64-simd.md (aarch64_tbl1<mode>):\n\tRename to...\n\t(aarch64_qtbl1<mode>): This.\n\t(aarch64_tbx1<mode>): Rename to...\n\t(aarch64_qtbx1<mode>): This.\n\t(aarch64_tbl2v16qi): Delete.\n\t(aarch64_tbl3<mode>): Rename to...\n\t(aarch64_qtbl2<mode>): This.\n\t(aarch64_tbx4<mode>): Rename to...\n\t(aarch64_qtbx2<mode>): This.\n\t* config/aarch64/aarch64.c (aarch64_expand_vec_perm_1): Use\n\trenamed qtbl1 and qtbl2 RTL patterns.\n\t* config/aarch64/arm_neon.h (vqtbl1_p8): Use renamed qtbl1\n\tRTL pattern.\n\t(vqtbl1_s8): Likewise.\n\t(vqtbl1_u8): Likewise.\n\t(vqtbl1q_p8): Likewise.\n\t(vqtbl1q_s8): Likewise.\n\t(vqtbl1q_u8): Likewise.\n\t(vqtbx1_s8): Use renamed qtbx1 RTL pattern.\n\t(vqtbx1_u8): Likewise.\n\t(vqtbx1_p8): Likewise.\n\t(vqtbx1q_s8): Likewise.\n\t(vqtbx1q_u8): Likewise.\n\t(vqtbx1q_p8): Likewise.\n\t(vtbl1_s8): Use renamed qtbl1 RTL pattern.\n\t(vtbl1_u8): Likewise.\n\t(vtbl1_p8): Likewise.\n\t(vtbl2_s8): Likewise\n\t(vtbl2_u8): Likewise.\n\t(vtbl2_p8): Likewise.\n\t(vtbl3_s8): Use renamed qtbl2 RTL pattern.\n\t(vtbl3_u8): Likewise.\n\t(vtbl3_p8): Likewise.\n\t(vtbl4_s8): Likewise.\n\t(vtbl4_u8): Likewise.\n\t(vtbl4_p8): Likewise.\n\t(vtbx2_s8): Use renamed qtbx2 RTL pattern.\n\t(vtbx2_u8): Likewise.\n\t(vtbx2_p8): Likewise.\n\t(vqtbl2_s8): Use renamed qtbl2 RTL pattern.\n\t(vqtbl2_u8): Likewise.\n\t(vqtbl2_p8): Likewise.\n\t(vqtbl2q_s8): Likewise.\n\t(vqtbl2q_u8): Likewise.\n\t(vqtbl2q_p8): Likewise.\n\t(vqtbx2_s8): Use renamed qtbx2 RTL pattern.\n\t(vqtbx2_u8): Likewise.\n\t(vqtbx2_p8): Likewise.\n\t(vqtbx2q_s8): Likewise.\n\t(vqtbx2q_u8): Likewise.\n\t(vqtbx2q_p8): Likewise.\n\t(vtbx4_s8): Likewise.\n\t(vtbx4_u8): Likewise.\n\t(vtbx4_p8): Likewise.", "tree": {"sha": "e827668893fc4d367eff15a6dfb9948eeed26217", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e827668893fc4d367eff15a6dfb9948eeed26217"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b7e450c97340789687b65ab013dbe25e012b0b6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e450c97340789687b65ab013dbe25e012b0b6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7e450c97340789687b65ab013dbe25e012b0b6c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7e450c97340789687b65ab013dbe25e012b0b6c/comments", "author": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwright-arm", "id": 31624044, "node_id": "MDQ6VXNlcjMxNjI0MDQ0", "avatar_url": "https://avatars.githubusercontent.com/u/31624044?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwright-arm", "html_url": "https://github.com/jwright-arm", "followers_url": "https://api.github.com/users/jwright-arm/followers", "following_url": "https://api.github.com/users/jwright-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jwright-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwright-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwright-arm/subscriptions", "organizations_url": "https://api.github.com/users/jwright-arm/orgs", "repos_url": "https://api.github.com/users/jwright-arm/repos", "events_url": "https://api.github.com/users/jwright-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jwright-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8168338684fc2bed576bb09202c63b3e9e678d92", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8168338684fc2bed576bb09202c63b3e9e678d92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8168338684fc2bed576bb09202c63b3e9e678d92"}], "stats": {"total": 198, "additions": 82, "deletions": 116}, "files": [{"sha": "b7f1237b1ffd0d4ca283c853be1cc94b9fc35260", "filename": "gcc/config/aarch64/aarch64-simd-builtins.def", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e450c97340789687b65ab013dbe25e012b0b6c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e450c97340789687b65ab013dbe25e012b0b6c/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd-builtins.def?ref=b7e450c97340789687b65ab013dbe25e012b0b6c", "patch": "@@ -718,37 +718,31 @@\n   VAR1 (BINOPP, crypto_pmull, 0, NONE, di)\n   VAR1 (BINOPP, crypto_pmull, 0, NONE, v2di)\n \n-  /* Implemented by aarch64_tbl3<mode>.  */\n-  VAR1 (BINOP, tbl3, 0, NONE, v8qi)\n-  VAR1 (BINOP, tbl3, 0, NONE, v16qi)\n+  /* Implemented by aarch64_qtbl1<mode>.  */\n+  VAR2 (BINOP, qtbl1, 0, NONE, v8qi, v16qi)\n+  VAR2 (BINOPU, qtbl1, 0, NONE, v8qi, v16qi)\n \n-  /* Implemented by aarch64_tbl1<mode>.  */\n-  VAR2 (BINOP, tbl1, 0, NONE, v8qi, v16qi)\n-  VAR2 (BINOPU, tbl1, 0, NONE, v8qi, v16qi)\n+  /* Implemented by aarch64_qtbl2<mode>.  */\n+  VAR2 (BINOP, qtbl2, 0, NONE, v8qi, v16qi)\n \n   /* Implemented by aarch64_qtbl3<mode>.  */\n-  VAR1 (BINOP, qtbl3, 0, NONE, v8qi)\n-  VAR1 (BINOP, qtbl3, 0, NONE, v16qi)\n+  VAR2 (BINOP, qtbl3, 0, NONE, v8qi, v16qi)\n \n   /* Implemented by aarch64_qtbl4<mode>.  */\n-  VAR1 (BINOP, qtbl4, 0, NONE, v8qi)\n-  VAR1 (BINOP, qtbl4, 0, NONE, v16qi)\n+  VAR2 (BINOP, qtbl4, 0, NONE, v8qi, v16qi)\n \n-  /* Implemented by aarch64_tbx1<mode>.  */\n-  VAR2 (TERNOP, tbx1, 0, NONE, v8qi, v16qi)\n-  VAR2 (TERNOPU, tbx1, 0, NONE, v8qi, v16qi)\n+  /* Implemented by aarch64_qtbx1<mode>.  */\n+  VAR2 (TERNOP, qtbx1, 0, NONE, v8qi, v16qi)\n+  VAR2 (TERNOPU, qtbx1, 0, NONE, v8qi, v16qi)\n \n-  /* Implemented by aarch64_tbx4<mode>.  */\n-  VAR1 (TERNOP, tbx4, 0, NONE, v8qi)\n-  VAR1 (TERNOP, tbx4, 0, NONE, v16qi)\n+  /* Implemented by aarch64_qtbx2<mode>.  */\n+  VAR2 (TERNOP, qtbx2, 0, NONE, v8qi, v16qi)\n \n   /* Implemented by aarch64_qtbx3<mode>.  */\n-  VAR1 (TERNOP, qtbx3, 0, NONE, v8qi)\n-  VAR1 (TERNOP, qtbx3, 0, NONE, v16qi)\n+  VAR2 (TERNOP, qtbx3, 0, NONE, v8qi, v16qi)\n \n   /* Implemented by aarch64_qtbx4<mode>.  */\n-  VAR1 (TERNOP, qtbx4, 0, NONE, v8qi)\n-  VAR1 (TERNOP, qtbx4, 0, NONE, v16qi)\n+  VAR2 (TERNOP, qtbx4, 0, NONE, v8qi, v16qi)\n \n   /* Builtins for ARMv8.1-A Adv.SIMD instructions.  */\n "}, {"sha": "7332a735d35846e0d9375ad2686ed7ecdb09cd29", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e450c97340789687b65ab013dbe25e012b0b6c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e450c97340789687b65ab013dbe25e012b0b6c/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=b7e450c97340789687b65ab013dbe25e012b0b6c", "patch": "@@ -6948,7 +6948,7 @@\n     {\n       rtx op0 = gen_rtx_REG (V16QImode, REGNO (operands[0]) + i);\n       rtx op1 = gen_rtx_REG (V16QImode, REGNO (operands[1]) + i);\n-      emit_insn (gen_aarch64_tbl1v16qi (op0, op1, operands[2]));\n+      emit_insn (gen_aarch64_qtbl1v16qi (op0, op1, operands[2]));\n     }\n   DONE;\n }\n@@ -7425,7 +7425,7 @@\n   DONE;\n })\n \n-(define_insn \"aarch64_tbl1<mode>\"\n+(define_insn \"aarch64_qtbl1<mode>\"\n   [(set (match_operand:VB 0 \"register_operand\" \"=w\")\n \t(unspec:VB [(match_operand:V16QI 1 \"register_operand\" \"w\")\n \t\t    (match_operand:VB 2 \"register_operand\" \"w\")]\n@@ -7435,7 +7435,7 @@\n   [(set_attr \"type\" \"neon_tbl1<q>\")]\n )\n \n-(define_insn \"aarch64_tbx1<mode>\"\n+(define_insn \"aarch64_qtbx1<mode>\"\n   [(set (match_operand:VB 0 \"register_operand\" \"=w\")\n \t(unspec:VB [(match_operand:VB 1 \"register_operand\" \"0\")\n \t\t    (match_operand:V16QI 2 \"register_operand\" \"w\")\n@@ -7448,35 +7448,25 @@\n \n ;; Two source registers.\n \n-(define_insn \"aarch64_tbl2v16qi\"\n-  [(set (match_operand:V16QI 0 \"register_operand\" \"=w\")\n-\t(unspec:V16QI [(match_operand:OI 1 \"register_operand\" \"w\")\n-\t\t       (match_operand:V16QI 2 \"register_operand\" \"w\")]\n-\t\t      UNSPEC_TBL))]\n-  \"TARGET_SIMD\"\n-  \"tbl\\\\t%0.16b, {%S1.16b - %T1.16b}, %2.16b\"\n-  [(set_attr \"type\" \"neon_tbl2_q\")]\n-)\n-\n-(define_insn \"aarch64_tbl3<mode>\"\n+(define_insn \"aarch64_qtbl2<mode>\"\n   [(set (match_operand:VB 0 \"register_operand\" \"=w\")\n \t(unspec:VB [(match_operand:OI 1 \"register_operand\" \"w\")\n \t\t      (match_operand:VB 2 \"register_operand\" \"w\")]\n \t\t      UNSPEC_TBL))]\n   \"TARGET_SIMD\"\n   \"tbl\\\\t%S0.<Vbtype>, {%S1.16b - %T1.16b}, %S2.<Vbtype>\"\n-  [(set_attr \"type\" \"neon_tbl3\")]\n+  [(set_attr \"type\" \"neon_tbl2\")]\n )\n \n-(define_insn \"aarch64_tbx4<mode>\"\n+(define_insn \"aarch64_qtbx2<mode>\"\n   [(set (match_operand:VB 0 \"register_operand\" \"=w\")\n \t(unspec:VB [(match_operand:VB 1 \"register_operand\" \"0\")\n \t\t      (match_operand:OI 2 \"register_operand\" \"w\")\n \t\t      (match_operand:VB 3 \"register_operand\" \"w\")]\n \t\t      UNSPEC_TBX))]\n   \"TARGET_SIMD\"\n   \"tbx\\\\t%S0.<Vbtype>, {%S2.16b - %T2.16b}, %S3.<Vbtype>\"\n-  [(set_attr \"type\" \"neon_tbl4\")]\n+  [(set_attr \"type\" \"neon_tbl2\")]\n )\n \n ;; Three source registers."}, {"sha": "3bdf19d71b54d0ade8e5648323f6e1f012bc4f8f", "filename": "gcc/config/aarch64/aarch64.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e450c97340789687b65ab013dbe25e012b0b6c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e450c97340789687b65ab013dbe25e012b0b6c/gcc%2Fconfig%2Faarch64%2Faarch64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.c?ref=b7e450c97340789687b65ab013dbe25e012b0b6c", "patch": "@@ -22047,11 +22047,11 @@ aarch64_expand_vec_perm_1 (rtx target, rtx op0, rtx op1, rtx sel)\n \t  /* Expand the argument to a V16QI mode by duplicating it.  */\n \t  rtx pair = gen_reg_rtx (V16QImode);\n \t  emit_insn (gen_aarch64_combinev8qi (pair, op0, op0));\n-\t  emit_insn (gen_aarch64_tbl1v8qi (target, pair, sel));\n+\t  emit_insn (gen_aarch64_qtbl1v8qi (target, pair, sel));\n \t}\n       else\n \t{\n-\t  emit_insn (gen_aarch64_tbl1v16qi (target, op0, sel));\n+\t  emit_insn (gen_aarch64_qtbl1v16qi (target, op0, sel));\n \t}\n     }\n   else\n@@ -22062,13 +22062,13 @@ aarch64_expand_vec_perm_1 (rtx target, rtx op0, rtx op1, rtx sel)\n \t{\n \t  pair = gen_reg_rtx (V16QImode);\n \t  emit_insn (gen_aarch64_combinev8qi (pair, op0, op1));\n-\t  emit_insn (gen_aarch64_tbl1v8qi (target, pair, sel));\n+\t  emit_insn (gen_aarch64_qtbl1v8qi (target, pair, sel));\n \t}\n       else\n \t{\n \t  pair = gen_reg_rtx (OImode);\n \t  emit_insn (gen_aarch64_combinev16qi (pair, op0, op1));\n-\t  emit_insn (gen_aarch64_tbl2v16qi (target, pair, sel));\n+\t  emit_insn (gen_aarch64_qtbl2v16qi (target, pair, sel));\n \t}\n     }\n }"}, {"sha": "1048d7c7eaac14554142eaa7544159a50929b7f1", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 57, "deletions": 75, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b7e450c97340789687b65ab013dbe25e012b0b6c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b7e450c97340789687b65ab013dbe25e012b0b6c/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=b7e450c97340789687b65ab013dbe25e012b0b6c", "patch": "@@ -9534,90 +9534,90 @@ __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl1_p8 (poly8x16_t __tab, uint8x8_t __idx)\n {\n-  return (poly8x8_t) __builtin_aarch64_tbl1v8qi ((int8x16_t) __tab,\n-\t\t\t\t\t\t (int8x8_t) __idx);\n+  return (poly8x8_t) __builtin_aarch64_qtbl1v8qi ((int8x16_t) __tab,\n+\t\t\t\t\t\t  (int8x8_t) __idx);\n }\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl1_s8 (int8x16_t __tab, uint8x8_t __idx)\n {\n-  return __builtin_aarch64_tbl1v8qi (__tab, (int8x8_t) __idx);\n+  return __builtin_aarch64_qtbl1v8qi (__tab, (int8x8_t) __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl1_u8 (uint8x16_t __tab, uint8x8_t __idx)\n {\n-  return __builtin_aarch64_tbl1v8qi_uuu (__tab, __idx);\n+  return __builtin_aarch64_qtbl1v8qi_uuu (__tab, __idx);\n }\n \n __extension__ extern __inline poly8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl1q_p8 (poly8x16_t __tab, uint8x16_t __idx)\n {\n-  return (poly8x16_t) __builtin_aarch64_tbl1v16qi ((int8x16_t) __tab,\n-\t\t\t\t\t\t   (int8x16_t) __idx);\n+  return (poly8x16_t) __builtin_aarch64_qtbl1v16qi ((int8x16_t) __tab,\n+\t\t\t\t\t\t    (int8x16_t) __idx);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl1q_s8 (int8x16_t __tab, uint8x16_t __idx)\n {\n-  return __builtin_aarch64_tbl1v16qi (__tab, (int8x16_t) __idx);\n+  return __builtin_aarch64_qtbl1v16qi (__tab, (int8x16_t) __idx);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbl1q_u8 (uint8x16_t __tab, uint8x16_t __idx)\n {\n-  return __builtin_aarch64_tbl1v16qi_uuu (__tab, __idx);\n+  return __builtin_aarch64_qtbl1v16qi_uuu (__tab, __idx);\n }\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1_s8 (int8x8_t __r, int8x16_t __tab, uint8x8_t __idx)\n {\n-  return __builtin_aarch64_tbx1v8qi (__r, __tab, (int8x8_t) __idx);\n+  return __builtin_aarch64_qtbx1v8qi (__r, __tab, (int8x8_t) __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1_u8 (uint8x8_t __r, uint8x16_t __tab, uint8x8_t __idx)\n {\n-  return __builtin_aarch64_tbx1v8qi_uuuu (__r, __tab, __idx);\n+  return __builtin_aarch64_qtbx1v8qi_uuuu (__r, __tab, __idx);\n }\n \n __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1_p8 (poly8x8_t __r, poly8x16_t __tab, uint8x8_t __idx)\n {\n-  return (poly8x8_t) __builtin_aarch64_tbx1v8qi ((int8x8_t) __r,\n-\t\t\t\t\t\t (int8x16_t) __tab,\n-\t\t\t\t\t\t (int8x8_t) __idx);\n+  return (poly8x8_t) __builtin_aarch64_qtbx1v8qi ((int8x8_t) __r,\n+\t\t\t\t\t\t  (int8x16_t) __tab,\n+\t\t\t\t\t\t  (int8x8_t) __idx);\n }\n \n __extension__ extern __inline int8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1q_s8 (int8x16_t __r, int8x16_t __tab, uint8x16_t __idx)\n {\n-  return __builtin_aarch64_tbx1v16qi (__r, __tab, (int8x16_t) __idx);\n+  return __builtin_aarch64_qtbx1v16qi (__r, __tab, (int8x16_t) __idx);\n }\n \n __extension__ extern __inline uint8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1q_u8 (uint8x16_t __r, uint8x16_t __tab, uint8x16_t __idx)\n {\n-  return __builtin_aarch64_tbx1v16qi_uuuu (__r, __tab, __idx);\n+  return __builtin_aarch64_qtbx1v16qi_uuuu (__r, __tab, __idx);\n }\n \n __extension__ extern __inline poly8x16_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vqtbx1q_p8 (poly8x16_t __r, poly8x16_t __tab, uint8x16_t __idx)\n {\n-  return (poly8x16_t) __builtin_aarch64_tbx1v16qi ((int8x16_t) __r,\n-\t\t\t\t\t\t   (int8x16_t) __tab,\n-\t\t\t\t\t\t   (int8x16_t) __idx);\n+  return (poly8x16_t) __builtin_aarch64_qtbx1v16qi ((int8x16_t) __r,\n+\t\t\t\t\t\t    (int8x16_t) __tab,\n+\t\t\t\t\t\t    (int8x16_t) __idx);\n }\n \n /* V7 legacy table intrinsics.  */\n@@ -9628,7 +9628,7 @@ vtbl1_s8 (int8x8_t __tab, int8x8_t __idx)\n {\n   int8x16_t __temp = vcombine_s8 (__tab,\n \t\t\t\t  vcreate_s8 (__AARCH64_UINT64_C (0x0)));\n-  return __builtin_aarch64_tbl1v8qi (__temp, __idx);\n+  return __builtin_aarch64_qtbl1v8qi (__temp, __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n@@ -9637,7 +9637,7 @@ vtbl1_u8 (uint8x8_t __tab, uint8x8_t __idx)\n {\n   uint8x16_t __temp = vcombine_u8 (__tab,\n \t\t\t\t   vcreate_u8 (__AARCH64_UINT64_C (0x0)));\n-  return __builtin_aarch64_tbl1v8qi_uuu (__temp, __idx);\n+  return __builtin_aarch64_qtbl1v8qi_uuu (__temp, __idx);\n }\n \n __extension__ extern __inline poly8x8_t\n@@ -9646,40 +9646,39 @@ vtbl1_p8 (poly8x8_t __tab, uint8x8_t __idx)\n {\n   poly8x16_t __temp = vcombine_p8 (__tab,\n \t\t\t\t   vcreate_p8 (__AARCH64_UINT64_C (0x0)));\n-  return (poly8x8_t) __builtin_aarch64_tbl1v8qi ((int8x16_t) __temp,\n-\t\t\t\t\t\t (int8x8_t) __idx);\n+  return (poly8x8_t) __builtin_aarch64_qtbl1v8qi ((int8x16_t) __temp,\n+\t\t\t\t\t\t  (int8x8_t) __idx);\n }\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl2_s8 (int8x8x2_t __tab, int8x8_t __idx)\n {\n   int8x16_t __temp = vcombine_s8 (__tab.val[0], __tab.val[1]);\n-  return __builtin_aarch64_tbl1v8qi (__temp, __idx);\n+  return __builtin_aarch64_qtbl1v8qi (__temp, __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl2_u8 (uint8x8x2_t __tab, uint8x8_t __idx)\n {\n   uint8x16_t __temp = vcombine_u8 (__tab.val[0], __tab.val[1]);\n-  return __builtin_aarch64_tbl1v8qi_uuu (__temp, __idx);\n+  return __builtin_aarch64_qtbl1v8qi_uuu (__temp, __idx);\n }\n \n __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl2_p8 (poly8x8x2_t __tab, uint8x8_t __idx)\n {\n   poly8x16_t __temp = vcombine_p8 (__tab.val[0], __tab.val[1]);\n-  return (poly8x8_t) __builtin_aarch64_tbl1v8qi ((int8x16_t) __temp,\n-\t\t\t\t\t\t (int8x8_t) __idx);\n+  return (poly8x8_t) __builtin_aarch64_qtbl1v8qi ((int8x16_t) __temp,\n+\t\t\t\t\t\t  (int8x8_t) __idx);\n }\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl3_s8 (int8x8x3_t __tab, int8x8_t __idx)\n {\n-  int8x8_t __result;\n   int8x16x2_t __temp;\n   __builtin_aarch64_simd_oi __o;\n   __temp.val[0] = vcombine_s8 (__tab.val[0], __tab.val[1]);\n@@ -9688,15 +9687,13 @@ vtbl3_s8 (int8x8x3_t __tab, int8x8_t __idx)\n \t\t\t\t\t   (int8x16_t) __temp.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o,\n \t\t\t\t\t   (int8x16_t) __temp.val[1], 1);\n-  __result = __builtin_aarch64_tbl3v8qi (__o, __idx);\n-  return __result;\n+  return __builtin_aarch64_qtbl2v8qi (__o, __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl3_u8 (uint8x8x3_t __tab, uint8x8_t __idx)\n {\n-  uint8x8_t __result;\n   uint8x16x2_t __temp;\n   __builtin_aarch64_simd_oi __o;\n   __temp.val[0] = vcombine_u8 (__tab.val[0], __tab.val[1]);\n@@ -9705,15 +9702,13 @@ vtbl3_u8 (uint8x8x3_t __tab, uint8x8_t __idx)\n \t\t\t\t\t   (int8x16_t) __temp.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o,\n \t\t\t\t\t   (int8x16_t) __temp.val[1], 1);\n-  __result = (uint8x8_t)__builtin_aarch64_tbl3v8qi (__o, (int8x8_t)__idx);\n-  return __result;\n+  return (uint8x8_t)__builtin_aarch64_qtbl2v8qi (__o, (int8x8_t)__idx);\n }\n \n __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl3_p8 (poly8x8x3_t __tab, uint8x8_t __idx)\n {\n-  poly8x8_t __result;\n   poly8x16x2_t __temp;\n   __builtin_aarch64_simd_oi __o;\n   __temp.val[0] = vcombine_p8 (__tab.val[0], __tab.val[1]);\n@@ -9722,15 +9717,13 @@ vtbl3_p8 (poly8x8x3_t __tab, uint8x8_t __idx)\n \t\t\t\t\t   (int8x16_t) __temp.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o,\n \t\t\t\t\t   (int8x16_t) __temp.val[1], 1);\n-  __result = (poly8x8_t)__builtin_aarch64_tbl3v8qi (__o, (int8x8_t)__idx);\n-  return __result;\n+  return (poly8x8_t)__builtin_aarch64_qtbl2v8qi (__o, (int8x8_t)__idx);\n }\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl4_s8 (int8x8x4_t __tab, int8x8_t __idx)\n {\n-  int8x8_t __result;\n   int8x16x2_t __temp;\n   __builtin_aarch64_simd_oi __o;\n   __temp.val[0] = vcombine_s8 (__tab.val[0], __tab.val[1]);\n@@ -9739,15 +9732,13 @@ vtbl4_s8 (int8x8x4_t __tab, int8x8_t __idx)\n \t\t\t\t\t   (int8x16_t) __temp.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o,\n \t\t\t\t\t   (int8x16_t) __temp.val[1], 1);\n-  __result = __builtin_aarch64_tbl3v8qi (__o, __idx);\n-  return __result;\n+  return __builtin_aarch64_qtbl2v8qi (__o, __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl4_u8 (uint8x8x4_t __tab, uint8x8_t __idx)\n {\n-  uint8x8_t __result;\n   uint8x16x2_t __temp;\n   __builtin_aarch64_simd_oi __o;\n   __temp.val[0] = vcombine_u8 (__tab.val[0], __tab.val[1]);\n@@ -9756,15 +9747,13 @@ vtbl4_u8 (uint8x8x4_t __tab, uint8x8_t __idx)\n \t\t\t\t\t   (int8x16_t) __temp.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o,\n \t\t\t\t\t   (int8x16_t) __temp.val[1], 1);\n-  __result = (uint8x8_t)__builtin_aarch64_tbl3v8qi (__o, (int8x8_t)__idx);\n-  return __result;\n+  return (uint8x8_t)__builtin_aarch64_qtbl2v8qi (__o, (int8x8_t)__idx);\n }\n \n __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbl4_p8 (poly8x8x4_t __tab, uint8x8_t __idx)\n {\n-  poly8x8_t __result;\n   poly8x16x2_t __temp;\n   __builtin_aarch64_simd_oi __o;\n   __temp.val[0] = vcombine_p8 (__tab.val[0], __tab.val[1]);\n@@ -9773,34 +9762,33 @@ vtbl4_p8 (poly8x8x4_t __tab, uint8x8_t __idx)\n \t\t\t\t\t   (int8x16_t) __temp.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o,\n \t\t\t\t\t   (int8x16_t) __temp.val[1], 1);\n-  __result = (poly8x8_t)__builtin_aarch64_tbl3v8qi (__o, (int8x8_t)__idx);\n-  return __result;\n+  return(poly8x8_t)__builtin_aarch64_qtbl2v8qi (__o, (int8x8_t)__idx);\n }\n \n __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbx2_s8 (int8x8_t __r, int8x8x2_t __tab, int8x8_t __idx)\n {\n   int8x16_t __temp = vcombine_s8 (__tab.val[0], __tab.val[1]);\n-  return __builtin_aarch64_tbx1v8qi (__r, __temp, __idx);\n+  return __builtin_aarch64_qtbx1v8qi (__r, __temp, __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbx2_u8 (uint8x8_t __r, uint8x8x2_t __tab, uint8x8_t __idx)\n {\n   uint8x16_t __temp = vcombine_u8 (__tab.val[0], __tab.val[1]);\n-  return __builtin_aarch64_tbx1v8qi_uuuu (__r, __temp, __idx);\n+  return __builtin_aarch64_qtbx1v8qi_uuuu (__r, __temp, __idx);\n }\n \n __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbx2_p8 (poly8x8_t __r, poly8x8x2_t __tab, uint8x8_t __idx)\n {\n   poly8x16_t __temp = vcombine_p8 (__tab.val[0], __tab.val[1]);\n-  return (poly8x8_t) __builtin_aarch64_tbx1v8qi ((int8x8_t) __r,\n-\t\t\t\t\t\t (int8x16_t) __temp,\n-\t\t\t\t\t\t (int8x8_t) __idx);\n+  return (poly8x8_t) __builtin_aarch64_qtbx1v8qi ((int8x8_t) __r,\n+\t\t\t\t\t\t  (int8x16_t) __temp,\n+\t\t\t\t\t\t  (int8x8_t) __idx);\n }\n \n /* End of temporary inline asm.  */\n@@ -23335,7 +23323,7 @@ vqtbl2_s8 (int8x16x2_t __tab, uint8x8_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, __tab.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, __tab.val[1], 1);\n-  return __builtin_aarch64_tbl3v8qi (__o, (int8x8_t)__idx);\n+  return __builtin_aarch64_qtbl2v8qi (__o, (int8x8_t)__idx);\n }\n \n __extension__ extern __inline uint8x8_t\n@@ -23345,7 +23333,7 @@ vqtbl2_u8 (uint8x16x2_t __tab, uint8x8_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  return (uint8x8_t)__builtin_aarch64_tbl3v8qi (__o, (int8x8_t)__idx);\n+  return (uint8x8_t)__builtin_aarch64_qtbl2v8qi (__o, (int8x8_t)__idx);\n }\n \n __extension__ extern __inline poly8x8_t\n@@ -23355,7 +23343,7 @@ vqtbl2_p8 (poly8x16x2_t __tab, uint8x8_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  return (poly8x8_t)__builtin_aarch64_tbl3v8qi (__o, (int8x8_t)__idx);\n+  return (poly8x8_t)__builtin_aarch64_qtbl2v8qi (__o, (int8x8_t)__idx);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -23365,7 +23353,7 @@ vqtbl2q_s8 (int8x16x2_t __tab, uint8x16_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  return __builtin_aarch64_tbl3v16qi (__o, (int8x16_t)__idx);\n+  return __builtin_aarch64_qtbl2v16qi (__o, (int8x16_t)__idx);\n }\n \n __extension__ extern __inline uint8x16_t\n@@ -23375,7 +23363,7 @@ vqtbl2q_u8 (uint8x16x2_t __tab, uint8x16_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  return (uint8x16_t)__builtin_aarch64_tbl3v16qi (__o, (int8x16_t)__idx);\n+  return (uint8x16_t)__builtin_aarch64_qtbl2v16qi (__o, (int8x16_t)__idx);\n }\n \n __extension__ extern __inline poly8x16_t\n@@ -23385,7 +23373,7 @@ vqtbl2q_p8 (poly8x16x2_t __tab, uint8x16_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  return (poly8x16_t)__builtin_aarch64_tbl3v16qi (__o, (int8x16_t)__idx);\n+  return (poly8x16_t)__builtin_aarch64_qtbl2v16qi (__o, (int8x16_t)__idx);\n }\n \n /* vqtbl3 */\n@@ -23539,7 +23527,7 @@ vqtbx2_s8 (int8x8_t __r, int8x16x2_t __tab, uint8x8_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, __tab.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, __tab.val[1], 1);\n-  return __builtin_aarch64_tbx4v8qi (__r, __o, (int8x8_t)__idx);\n+  return __builtin_aarch64_qtbx2v8qi (__r, __o, (int8x8_t)__idx);\n }\n \n __extension__ extern __inline uint8x8_t\n@@ -23549,8 +23537,8 @@ vqtbx2_u8 (uint8x8_t __r, uint8x16x2_t __tab, uint8x8_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  return (uint8x8_t)__builtin_aarch64_tbx4v8qi ((int8x8_t)__r, __o,\n-\t\t\t\t\t\t(int8x8_t)__idx);\n+  return (uint8x8_t)__builtin_aarch64_qtbx2v8qi ((int8x8_t)__r, __o,\n+\t\t\t\t\t\t (int8x8_t)__idx);\n }\n \n __extension__ extern __inline poly8x8_t\n@@ -23560,8 +23548,8 @@ vqtbx2_p8 (poly8x8_t __r, poly8x16x2_t __tab, uint8x8_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  return (poly8x8_t)__builtin_aarch64_tbx4v8qi ((int8x8_t)__r, __o,\n-\t\t\t\t\t\t(int8x8_t)__idx);\n+  return (poly8x8_t)__builtin_aarch64_qtbx2v8qi ((int8x8_t)__r, __o,\n+\t\t\t\t\t\t (int8x8_t)__idx);\n }\n \n __extension__ extern __inline int8x16_t\n@@ -23571,7 +23559,7 @@ vqtbx2q_s8 (int8x16_t __r, int8x16x2_t __tab, uint8x16_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, __tab.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, __tab.val[1], 1);\n-  return __builtin_aarch64_tbx4v16qi (__r, __o, (int8x16_t)__idx);\n+  return __builtin_aarch64_qtbx2v16qi (__r, __o, (int8x16_t)__idx);\n }\n \n __extension__ extern __inline uint8x16_t\n@@ -23581,7 +23569,7 @@ vqtbx2q_u8 (uint8x16_t __r, uint8x16x2_t __tab, uint8x16_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  return (uint8x16_t)__builtin_aarch64_tbx4v16qi ((int8x16_t)__r, __o,\n+  return (uint8x16_t)__builtin_aarch64_qtbx2v16qi ((int8x16_t)__r, __o,\n \t\t\t\t\t\t  (int8x16_t)__idx);\n }\n \n@@ -23592,8 +23580,8 @@ vqtbx2q_p8 (poly8x16_t __r, poly8x16x2_t __tab, uint8x16_t __idx)\n   __builtin_aarch64_simd_oi __o;\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o, (int8x16_t)__tab.val[1], 1);\n-  return (poly8x16_t)__builtin_aarch64_tbx4v16qi ((int8x16_t)__r, __o,\n-\t\t\t\t\t\t  (int8x16_t)__idx);\n+  return (poly8x16_t)__builtin_aarch64_qtbx2v16qi ((int8x16_t)__r, __o,\n+\t\t\t\t\t\t   (int8x16_t)__idx);\n }\n \n /* vqtbx3 */\n@@ -28511,7 +28499,6 @@ __extension__ extern __inline int8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbx4_s8 (int8x8_t __r, int8x8x4_t __tab, int8x8_t __idx)\n {\n-  int8x8_t __result;\n   int8x16x2_t __temp;\n   __builtin_aarch64_simd_oi __o;\n   __temp.val[0] = vcombine_s8 (__tab.val[0], __tab.val[1]);\n@@ -28520,15 +28507,13 @@ vtbx4_s8 (int8x8_t __r, int8x8x4_t __tab, int8x8_t __idx)\n \t\t\t\t\t   (int8x16_t) __temp.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o,\n \t\t\t\t\t   (int8x16_t) __temp.val[1], 1);\n-  __result = __builtin_aarch64_tbx4v8qi (__r, __o, __idx);\n-  return __result;\n+  return __builtin_aarch64_qtbx2v8qi (__r, __o, __idx);\n }\n \n __extension__ extern __inline uint8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbx4_u8 (uint8x8_t __r, uint8x8x4_t __tab, uint8x8_t __idx)\n {\n-  uint8x8_t __result;\n   uint8x16x2_t __temp;\n   __builtin_aarch64_simd_oi __o;\n   __temp.val[0] = vcombine_u8 (__tab.val[0], __tab.val[1]);\n@@ -28537,16 +28522,14 @@ vtbx4_u8 (uint8x8_t __r, uint8x8x4_t __tab, uint8x8_t __idx)\n \t\t\t\t\t   (int8x16_t) __temp.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o,\n \t\t\t\t\t   (int8x16_t) __temp.val[1], 1);\n-  __result = (uint8x8_t)__builtin_aarch64_tbx4v8qi ((int8x8_t)__r, __o,\n-\t\t\t\t\t\t  (int8x8_t)__idx);\n-  return __result;\n+  return (uint8x8_t)__builtin_aarch64_qtbx2v8qi ((int8x8_t)__r, __o,\n+\t\t\t\t\t\t (int8x8_t)__idx);\n }\n \n __extension__ extern __inline poly8x8_t\n __attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n vtbx4_p8 (poly8x8_t __r, poly8x8x4_t __tab, uint8x8_t __idx)\n {\n-  poly8x8_t __result;\n   poly8x16x2_t __temp;\n   __builtin_aarch64_simd_oi __o;\n   __temp.val[0] = vcombine_p8 (__tab.val[0], __tab.val[1]);\n@@ -28555,9 +28538,8 @@ vtbx4_p8 (poly8x8_t __r, poly8x8x4_t __tab, uint8x8_t __idx)\n \t\t\t\t\t   (int8x16_t) __temp.val[0], 0);\n   __o = __builtin_aarch64_set_qregoiv16qi (__o,\n \t\t\t\t\t   (int8x16_t) __temp.val[1], 1);\n-  __result = (poly8x8_t)__builtin_aarch64_tbx4v8qi ((int8x8_t)__r, __o,\n-\t\t\t\t\t\t  (int8x8_t)__idx);\n-  return __result;\n+  return (poly8x8_t)__builtin_aarch64_qtbx2v8qi ((int8x8_t)__r, __o,\n+\t\t\t\t\t\t (int8x8_t)__idx);\n }\n \n /* vtrn */"}]}