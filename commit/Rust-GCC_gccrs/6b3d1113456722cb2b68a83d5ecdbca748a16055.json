{"sha": "6b3d1113456722cb2b68a83d5ecdbca748a16055", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmIzZDExMTM0NTY3MjJjYjJiNjhhODNkNWVjZGJjYTc0OGExNjA1NQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-12-06T17:16:52Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2013-12-06T17:16:52Z"}, "message": "re PR target/59405 (Incorrect FP<->MMX transition during call/ret)\n\n\tPR target/59405\n\t* config/i386/i386.c (type_natural_mode): Properly handle\n\tsize 8 for !TARGET_64BIT.\n\ntestsuite/ChangeLog:\n\n\tPR target/59405\n\t* gcc.target/i386/pr59405.c: New test.\n\nFrom-SVN: r205753", "tree": {"sha": "c9941486eb9e86b69f4880985a27cf20afd489c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c9941486eb9e86b69f4880985a27cf20afd489c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6b3d1113456722cb2b68a83d5ecdbca748a16055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3d1113456722cb2b68a83d5ecdbca748a16055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b3d1113456722cb2b68a83d5ecdbca748a16055", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b3d1113456722cb2b68a83d5ecdbca748a16055/comments", "author": null, "committer": null, "parents": [{"sha": "3fa2ccb43019e7989e0264da177337709a9dfba5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fa2ccb43019e7989e0264da177337709a9dfba5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fa2ccb43019e7989e0264da177337709a9dfba5"}], "stats": {"total": 125, "additions": 82, "deletions": 43}, "files": [{"sha": "0027a4cf681a57c3a9b4d0fd0d282091c15343f1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3d1113456722cb2b68a83d5ecdbca748a16055/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3d1113456722cb2b68a83d5ecdbca748a16055/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6b3d1113456722cb2b68a83d5ecdbca748a16055", "patch": "@@ -1,6 +1,13 @@\n+2013-12-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/59405\n+\t* config/i386/i386.c (type_natural_mode): Properly handle\n+\tsize 8 for !TARGET_64BIT.\n+\n 2013-12-06  Trevor Saunders  <tsaunders@mozilla.com>\n \n-\t* tree-ssa-pre.c (compute_antic_aux): Remove redundant call to vec::release.\n+\t* tree-ssa-pre.c (compute_antic_aux): Remove redundant call to\n+\tvec::release.\n \n 2013-12-06  Ian Bolton  <ian.bolton@arm.com>\n \t    Mark Mitchell  <mark@codesourcery.com>\n@@ -11,8 +18,7 @@\n \n 2013-12-06  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n-\t* expr.c (expand_assignment): Update bitregion_start and\n-\tbitregion_end.\n+\t* expr.c (expand_assignment): Update bitregion_start and bitregion_end.\n \n 2013-12-06  Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -86,8 +92,7 @@\n 2013-12-06  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/59058\n-\t* tree-vectorizer.h (struct _loop_vec_info): Add num_itersm1\n-\tmember.\n+\t* tree-vectorizer.h (struct _loop_vec_info): Add num_itersm1 member.\n \t(LOOP_VINFO_NITERSM1): New macro.\n \t* tree-vect-loop-manip.c (slpeel_tree_peel_loop_to_edge): Express\n \tthe vector loop entry test in terms of scalar latch executions.\n@@ -117,8 +122,7 @@\n \t* config/i386/i386.c (cpu_names): Add \"ia\".\n \t(processor_alias_table): Likewise.\n \t(ix86_option_override_internal): Disallow -march=ia.\n-\t* config/i386/i386.h (target_cpu_default): Add\n-\tTARGET_CPU_DEFAULT_ia.\n+\t* config/i386/i386.h (target_cpu_default): Add TARGET_CPU_DEFAULT_ia.\n \n \t* doc/invoke.texi: Document -mtune=ia.\n \n@@ -145,8 +149,8 @@\n \t(ubsan_build_overflow_builtin): Adjust ubsan_encode_value call.\n \t* ubsan.h (ubsan_encode_value): Adjust declaration.\n \t* internal-fn.c (ubsan_expand_si_overflow_addsub_check): Move\n-\tubsan_build_overflow_builtin above expand_normal call.  Surround this call\n-\twith push_temp_slots and pop_temp_slots.\n+\tubsan_build_overflow_builtin above expand_normal call.  Surround\n+\tthis call with push_temp_slots and pop_temp_slots.\n \t(ubsan_expand_si_overflow_neg_check): Likewise.\n \t(ubsan_expand_si_overflow_mul_check): Likewise.\n \n@@ -158,8 +162,8 @@\n \n 2013-12-05  Tejas Belagod  <tejas.belagod@arm.com>\n \n-\t* rtlanal.c (set_noop_p): Return nonzero in case of redundant vec_select\n-\tfor overlapping register lanes.\n+\t* rtlanal.c (set_noop_p): Return nonzero in case of redundant\n+\tvec_select for overlapping register lanes.\n \n 2013-12-05  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n@@ -172,7 +176,7 @@\n \n 2013-12-05  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n-        * config/i386/i386.c (IX86_BUILTIN_READ_FLAGS): New.\n+\t* config/i386/i386.c (IX86_BUILTIN_READ_FLAGS): New.\n \t(IX86_BUILTIN_WRITE_FLAGS): Ditto.\n \t(ix86_init_mmx_sse_builtins): Define\n \t__builtin_ia32_writeeflags_u32, __builtin_ia32_writeeflags_u64,\n@@ -188,8 +192,7 @@\n \tPR tree-optimization/59374\n \t* tree-vect-data-refs.c (vect_slp_analyze_data_ref_dependence):\n \tCommonize known and unknown dependence case fixing the allowed\n-\tread-write dependence case and dropping code that should not\n-\tmatter.\n+\tread-write dependence case and dropping code that should not matter.\n \n 2013-12-05  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n@@ -214,8 +217,7 @@\n \t-fsanitize=signed-integer-overflow.\n \t* config/i386/i386.md (addv<mode>4, subv<mode>4, mulv<mode>4,\n \tnegv<mode>3, negv<mode>3_1): Define expands.\n-\t(*addv<mode>4, *subv<mode>4, *mulv<mode>4, *negv<mode>3): Define\n-\tinsns.\n+\t(*addv<mode>4, *subv<mode>4, *mulv<mode>4, *negv<mode>3): Define insns.\n \t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_ADD_OVERFLOW,\n \tBUILT_IN_UBSAN_HANDLE_SUB_OVERFLOW,\n \tBUILT_IN_UBSAN_HANDLE_MUL_OVERFLOW,\n@@ -260,18 +262,16 @@\n \t-fisolate-erroneous-paths-dereference and\n \t-fisolate-erroneous-paths-attribute.\n \t* invoke.texi: Corresponding changes.\n-\t* gimple.c (infer_nonnull_range):  Add and use new arguments\n-\tto control what kind of statements can be used to infer a\n-\tnon-null range.\n+\t* gimple.c (infer_nonnull_range):  Add and use new arguments to control\n+\twhat kind of statements can be used to infer a non-null range.\n \t* gimple.h (infer_nonnull_range): Update prototype.\n \t* tree-vrp.c (infer_value_range): Corresponding changes.\n \t* opts.c (default_options_table): Update due to option split.\n \t* gimple-ssa-isolate-paths.c: Fix trailing whitespace.\n \t(find_implicit_erroneous_behaviour): Pass additional arguments\n \tto infer_nonnull_range.\n \t(find_explicit_erroneous_behaviour): Similarly.\n-\t(gate_isolate_erroneous_paths): Check both of the new\n-\toptions.\n+\t(gate_isolate_erroneous_paths): Check both of the new options.\n \n 2013-12-04  Jeff Law  <law@redhat.com>\n \n@@ -559,7 +559,7 @@\n \t* config/arm/arm.c (arm_preferred_reload_class): Only return LO_REGS\n \twhen rclass is GENERAL_REGS.\n \n-2013-12-02 Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n+2013-12-02  Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n \n \t* loop-unroll.c (decide_unroll_constant_iterations): Check macro\n \tTARGET_LOOP_UNROLL_ADJUST while deciding unroll factor.\n@@ -1096,7 +1096,7 @@\n \t* tree-vect-loop.c (vect_estimate_min_profitable_iters): Ditto\n \tplus added openmp-simd warining.\n \n-2013-11-27   H.J. Lu  <hongjiu.lu@intel.com>\n+2013-11-27  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR rtl-optimization/59311\n \t* dwarf2cfi.c (dwf_regno): Assert reg isn't pseudo register.\n@@ -1478,7 +1478,7 @@\n \t* config/arm/arm.c (arm_new_rtx_costs): Initialise cost correctly\n \tfor zero_extend case.\n \n-2013-11-26   H.J. Lu  <hongjiu.lu@intel.com>\n+2013-11-26  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/55552\n \t* configure.ac (install_gold_as_default): New.  Set to yes for\n@@ -1893,7 +1893,7 @@\n \n \t* doc/invoke.texi: Mention AES, PCLMUL and RDRND for Silvermont.\n \n-2013-11-22 Andrew MacLeod  <amacleod@redhat.com>\n+2013-11-22  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* hooks.h (hook_uint_mode_0): Add Prototype.\n \t* hooks.c (hook_uint_mode_0): New default function.\n@@ -1903,7 +1903,7 @@\n \t* doc/tm.texi.in (TARGET_ATOMIC_ALIGN_FOR_MODE): Define.\n \t* doc/tm.texi (TARGET_ATOMIC_ALIGN_FOR_MODE): Add description.\n \n-2013-11-22 Andrew MacLeod  <amacleod@redhat.com>\n+2013-11-22  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* gimple.h: Remove all includes.\n \t(recalculate_side_effects): Move prototype to gimplify.h.\n@@ -4140,7 +4140,7 @@\n \t* profile.c (compute_branch_probabilities): Do not sanity check\n \trun_max.\n \n-2013-11-18 Kenneth Zadeck <zadeck@naturalbridge.com>\n+2013-11-18  Kenneth Zadeck  <zadeck@naturalbridge.com>\n \n \t* tree.c (int_fits_type_p): Change GET_MODE_BITSIZE to\n \tGET_MODE_PRECISION.\n@@ -4642,7 +4642,7 @@\n \t* lto-streamer-in.c (input function): Call cgraph_create_node if\n \tcgraph_get_node failed.\n \n-2013-11-14   Olivier Hainque  <hainque@adacore.com>\n+2013-11-14  Olivier Hainque  <hainque@adacore.com>\n \n \t* cfgexpand.c (defer_stack_allocation): When optimization is enabled,\n \tdefer allocation of DECL_IGNORED_P variables at toplevel unless really\n@@ -10459,7 +10459,7 @@\n \t* config/iq2000/iq2000.c (init_cumulative_args): Likewise.\n \t* config/rs6000/rs6000.c (init_cumulative_args): Likewise.\n \n-2013-10-16 Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n+2013-10-16  Ganesh Gopalasubramanian  <Ganesh.Gopalasubramanian@amd.com>\n \n \t* config/i386/i386.c (ix86_option_override_internal): Enable FMA4\n \tfor AMD bdver3.\n@@ -10469,7 +10469,7 @@\n \t* config/cris/t-elfmulti (MULTILIB_OPTIONS, MULTILIB_DIRNAMES)\n \t(MULTILIB_MATCHES): Add multilib for -march=v8.\n \n-2013-10-15 Sriraman Tallam  <tmsriram@google.com>\n+2013-10-15  Sriraman Tallam  <tmsriram@google.com>\n \n \tPR target/57756\n \t* optc-save-gen.awk: Add extra parameter to the save and restore"}, {"sha": "c742659e02bd177bac8ca17276c34f45545eb499", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3d1113456722cb2b68a83d5ecdbca748a16055/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3d1113456722cb2b68a83d5ecdbca748a16055/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=6b3d1113456722cb2b68a83d5ecdbca748a16055", "patch": "@@ -6172,7 +6172,8 @@ type_natural_mode (const_tree type, const CUMULATIVE_ARGS *cum)\n \t\t      }\n \t\t    return TYPE_MODE (type);\n \t\t  }\n-\t\telse if ((size == 8 || size == 16) && !TARGET_SSE)\n+\t\telse if (((size == 8 && TARGET_64BIT) || size == 16)\n+\t\t\t && !TARGET_SSE)\n \t\t  {\n \t\t    static bool warnedsse;\n \n@@ -6184,10 +6185,21 @@ type_natural_mode (const_tree type, const CUMULATIVE_ARGS *cum)\n \t\t\twarning (0, \"SSE vector argument without SSE \"\n \t\t\t\t \"enabled changes the ABI\");\n \t\t      }\n-\t\t    return mode;\n \t\t  }\n-\t\telse\n-\t\t  return mode;\n+\t\telse if ((size == 8 && !TARGET_64BIT) && !TARGET_MMX)\n+\t\t  {\n+\t\t    static bool warnedmmx;\n+\n+\t\t    if (cum\n+\t\t\t&& !warnedmmx\n+\t\t\t&& cum->warn_mmx)\n+\t\t      {\n+\t\t\twarnedmmx = true;\n+\t\t\twarning (0, \"MMX vector argument without MMX \"\n+\t\t\t\t \"enabled changes the ABI\");\n+\t\t      }\n+\t\t  }\n+\t\treturn mode;\n \t      }\n \n \t  gcc_unreachable ();"}, {"sha": "7d37ee1eb2addf45644b390968378a9f378bef0f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3d1113456722cb2b68a83d5ecdbca748a16055/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3d1113456722cb2b68a83d5ecdbca748a16055/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6b3d1113456722cb2b68a83d5ecdbca748a16055", "patch": "@@ -1,5 +1,10 @@\n+2013-12-06  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR target/59405\n+\t* gcc.target/i386/pr59405.c: New test.\n+\n 2013-12-06  Ian Bolton  <ian.bolton@arm.com>\n-            Mark Mitchell  <mark@codesourcery.com>\n+\t    Mark Mitchell  <mark@codesourcery.com>\n \n \tPR target/59091\n \t* gcc.target/arm/builtin-trap.c: New test.\n@@ -56,7 +61,7 @@\n \n 2013-12-05  Kirill Yukhin  <kirill.yukhin@intel.com>\n \n-        * gcc.target/i386/readeflags-1.c: New.\n+\t* gcc.target/i386/readeflags-1.c: New.\n \t* gcc.target/i386/writeeflags-1.c: Ditto.\n \n 2013-12-05  Yury Gribov  <y.gribov@samsung.com>\n@@ -91,8 +96,7 @@\n 2013-12-05  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/56787\n-\t* gcc.dg/vect/pr56787.c: Adjust to not require vector float\n-\tdivision.\n+\t* gcc.dg/vect/pr56787.c: Adjust to not require vector float division.\n \n 2013-12-05  Kostya Serebryany  <kcc@google.com>\n \n@@ -182,10 +186,9 @@\n \n 2013-12-03  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n \n-\t* gcc.dg/vect/costmodel/ppc/costmodel-slp-34.c: Skip for little\n-\tendian.\n+\t* gcc.dg/vect/costmodel/ppc/costmodel-slp-34.c: Skip for little endian.\n \n-2013-12-03   H.J. Lu  <hongjiu.lu@intel.com>\n+2013-12-03  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/59363\n \t* gcc.target/i386/pr59363.c: New file.\n@@ -230,7 +233,7 @@\n 2013-12-02  Sriraman Tallam  <tmsriram@google.com>\n \n \tPR target/58944\n-\t* testsuite/gcc.target/i386/pr58944.c: New test.\t\n+\t* testsuite/gcc.target/i386/pr58944.c: New test.\n \n 2013-12-02  Joseph Myers  <joseph@codesourcery.com>\n \n@@ -2306,7 +2309,7 @@\n \n \t* gcc.dg/tree-prof/tree-prof.exp: Fix comment.\n \n-2013-10-15 Sriraman Tallam  <tmsriram@google.com>\n+2013-10-15  Sriraman Tallam  <tmsriram@google.com>\n \n \tPR target/57756\n \t* gcc.target/i386/pr57756.c: New test."}, {"sha": "1136e2e4501773050c2005d95e347ac8a1f904c0", "filename": "gcc/testsuite/gcc.target/i386/pr59405.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6b3d1113456722cb2b68a83d5ecdbca748a16055/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59405.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6b3d1113456722cb2b68a83d5ecdbca748a16055/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59405.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59405.c?ref=6b3d1113456722cb2b68a83d5ecdbca748a16055", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-options \"-mmmx -mfpmath=387\" } */\n+\n+#include \"mmx-check.h\"\n+\n+#include <mmintrin.h>\n+\n+typedef float float32x2_t __attribute__ ((vector_size (8)));\n+\n+float\n+foo32x2_be (float32x2_t x)\n+{\n+  _mm_empty ();\n+  return x[1];\n+}\n+\n+static void\n+mmx_test (void)\n+{\n+  float32x2_t b = { 0.0f, 1.0f };\n+\n+  if (foo32x2_be (b) != 1.0f)\n+    abort ();\n+}"}]}