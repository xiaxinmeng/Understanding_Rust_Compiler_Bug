{"sha": "ec947dd39aa440205aa417f7809931b5cd6cda6b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWM5NDdkZDM5YWE0NDAyMDVhYTQxN2Y3ODA5OTMxYjVjZDZjZGE2Yg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2013-01-08T06:13:52Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2013-01-08T06:13:52Z"}, "message": "re PR fortran/55618 (Failures with ISO_Varying_String test suite)\n\n2013-01-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/55618\n\t* trans-expr.c (gfc_conv_procedure_call): Dereference scalar\n\tcharacter function arguments to elemental procedures in\n\tscalarization loops.\n\n2013-01-08  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/55618\n\t* gfortran.dg/elemental_scalar_args_2.f90: New test.\n\nFrom-SVN: r195004", "tree": {"sha": "75220b6492e48442cc1bf53c89e338cc7cddac9d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/75220b6492e48442cc1bf53c89e338cc7cddac9d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ec947dd39aa440205aa417f7809931b5cd6cda6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec947dd39aa440205aa417f7809931b5cd6cda6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec947dd39aa440205aa417f7809931b5cd6cda6b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec947dd39aa440205aa417f7809931b5cd6cda6b/comments", "author": null, "committer": null, "parents": [{"sha": "2aa617a76a35ea61377a37af7a4573e2242d511d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2aa617a76a35ea61377a37af7a4573e2242d511d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2aa617a76a35ea61377a37af7a4573e2242d511d"}], "stats": {"total": 56, "additions": 55, "deletions": 1}, "files": [{"sha": "6d1b2c68b10485545767ce90307f279c31984b46", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec947dd39aa440205aa417f7809931b5cd6cda6b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec947dd39aa440205aa417f7809931b5cd6cda6b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ec947dd39aa440205aa417f7809931b5cd6cda6b", "patch": "@@ -1,3 +1,10 @@\n+2013-01-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/55618\n+\t* trans-expr.c (gfc_conv_procedure_call): Dereference scalar\n+\tcharacter function arguments to elemental procedures in\n+\tscalarization loops.\n+\n 2013-01-07  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/55763"}, {"sha": "7b41c65a374f98f42c912ce0efcb2456858c5ec9", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec947dd39aa440205aa417f7809931b5cd6cda6b/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec947dd39aa440205aa417f7809931b5cd6cda6b/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=ec947dd39aa440205aa417f7809931b5cd6cda6b", "patch": "@@ -4115,7 +4115,13 @@ gfc_conv_procedure_call (gfc_se * se, gfc_symbol * sym,\n \t\tparmse.expr = gfc_build_addr_expr (NULL_TREE, parmse.expr);\n \t    }\n \t  else\n-\t    gfc_conv_expr_reference (&parmse, e);\n+\t    {\n+\t      gfc_conv_expr_reference (&parmse, e);\n+\t      if (e->ts.type == BT_CHARACTER && !e->rank\n+\t\t  && e->expr_type == EXPR_FUNCTION)\n+\t\tparmse.expr = build_fold_indirect_ref_loc (input_location,\n+\t\t\t\t\t\t\t   parmse.expr);\n+\t    }\n \n \t  if (fsym && fsym->ts.type == BT_DERIVED\n \t      && gfc_is_class_container_ref (e))"}, {"sha": "c713b2a098c9cbd72bf10b97cd06ad8dd5c1db8f", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec947dd39aa440205aa417f7809931b5cd6cda6b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec947dd39aa440205aa417f7809931b5cd6cda6b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ec947dd39aa440205aa417f7809931b5cd6cda6b", "patch": "@@ -1,3 +1,8 @@\n+2013-01-08  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/55618\n+\t* gfortran.dg/elemental_scalar_args_2.f90: New test.\n+\n 2013-01-07  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/55763"}, {"sha": "c2b5df8d18b0018492b34714001d2550e58a0baf", "filename": "gcc/testsuite/gfortran.dg/elemental_scalar_args_2.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ec947dd39aa440205aa417f7809931b5cd6cda6b/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_scalar_args_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ec947dd39aa440205aa417f7809931b5cd6cda6b/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_scalar_args_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Felemental_scalar_args_2.f90?ref=ec947dd39aa440205aa417f7809931b5cd6cda6b", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+! Test the fix for PR55618, in which character scalar function arguments to\n+! elemental functions would gain an extra indirect reference thus causing\n+! failures in Vst17.f95, Vst 30.f95 and Vst31.f95 in the iso_varying_string\n+! testsuite, where elemental tests are done.\n+!\n+! Reported by Tobias Burnus  <burnus@gcc.gnu.org>\n+!\n+  integer, dimension (2) :: i = [1,2]\n+  integer :: j = 64\n+  character (len = 2) :: chr1 = \"lm\"\n+  character (len = 1), dimension (2) :: chr2 = [\"r\", \"s\"]\n+  if (any (foo (i, bar()) .ne. [\"a\", \"b\"])) call abort    ! This would fail\n+  if (any (foo (i, \"xy\") .ne. [\"x\", \"y\"])) call abort     ! OK - not a function\n+  if (any (foo (i, chr1) .ne. [\"l\", \"m\"])) call abort     ! ditto\n+  if (any (foo (i, char (j)) .ne. [\"A\", \"B\"])) call abort ! This would fail\n+  if (any (foo (i, chr2) .ne. [\"s\", \"u\"])) call abort     ! OK - not a scalar\n+  if (any (foo (i, bar2()) .ne. [\"e\", \"g\"])) call abort   ! OK - not a scalar function\n+contains\n+  elemental character(len = 1) function foo (arg1, arg2)\n+    integer, intent (in) :: arg1\n+    character(len = *), intent (in) :: arg2\n+    if (len (arg2) > 1) then\n+      foo = arg2(arg1:arg1)\n+    else\n+      foo = char (ichar (arg2) + arg1)\n+    end if\n+  end function\n+  character(len = 2) function bar ()\n+    bar = \"ab\"\n+  end function\n+  function bar2 () result(res)\n+    character (len = 1), dimension(2) :: res\n+    res = [\"d\", \"e\"]\n+  end function\n+end"}]}