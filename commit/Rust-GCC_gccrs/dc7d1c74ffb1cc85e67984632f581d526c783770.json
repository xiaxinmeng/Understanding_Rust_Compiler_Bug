{"sha": "dc7d1c74ffb1cc85e67984632f581d526c783770", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM3ZDFjNzRmZmIxY2M4NWU2Nzk4NDYzMmY1ODFkNTI2Yzc4Mzc3MA==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-19T16:45:32Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2021-04-19T17:28:09Z"}, "message": "d: Fix ICE in when formating a string with '%' or '`' characters (PR98457)\n\nThe percentage character was being confused for a format specifier in\npp_format(), whilst the backtick character was confused for the\nbeginning of a quoted string in expand_d_format().\n\nBoth are now properly escaped to avoid the ICE.\n\ngcc/d/ChangeLog:\n\n\tPR d/98457\n\t* d-diagnostic.cc (expand_d_format): Handle escaped backticks.\n\t(escape_d_format): New funtion.\n\t(verror): Call escape_d_format on prefixing strings.\n\t(vdeprecation): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\tPR d/98457\n\t* gdc.dg/pr98457.d: New test.", "tree": {"sha": "467ff1aa4402682685d170e4ab2ee7e9cbe18b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/467ff1aa4402682685d170e4ab2ee7e9cbe18b2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc7d1c74ffb1cc85e67984632f581d526c783770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc7d1c74ffb1cc85e67984632f581d526c783770", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc7d1c74ffb1cc85e67984632f581d526c783770", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc7d1c74ffb1cc85e67984632f581d526c783770/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e19c6389966216af5925d2917a206cedc40540e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e19c6389966216af5925d2917a206cedc40540e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e19c6389966216af5925d2917a206cedc40540e8"}], "stats": {"total": 73, "additions": 68, "deletions": 5}, "files": [{"sha": "7043abe10bd860289cce30a28b0fe01f1cc4a60d", "filename": "gcc/d/d-diagnostic.cc", "status": "modified", "additions": 59, "deletions": 5, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7d1c74ffb1cc85e67984632f581d526c783770/gcc%2Fd%2Fd-diagnostic.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7d1c74ffb1cc85e67984632f581d526c783770/gcc%2Fd%2Fd-diagnostic.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fd%2Fd-diagnostic.cc?ref=dc7d1c74ffb1cc85e67984632f581d526c783770", "patch": "@@ -48,7 +48,7 @@ expand_d_format (const char *format)\n \n   for (const char *p = format; *p;)\n     {\n-      while (*p != '\\0' && *p != '%' && *p != '`')\n+      while (*p != '\\0' && *p != '\\\\' && *p != '%' && *p != '`')\n \t{\n \t  obstack_1grow (&buf, *p);\n \t  p++;\n@@ -57,6 +57,21 @@ expand_d_format (const char *format)\n       if (*p == '\\0')\n \tbreak;\n \n+      if (*p == '\\\\')\n+\t{\n+\t  if (p[1] == '`')\n+\t    {\n+\t      /* Escaped backtick, don't expand it as a quoted string.  */\n+\t      obstack_1grow (&buf, '`');\n+\t      p++;;\n+\t    }\n+\t  else\n+\t    obstack_1grow (&buf, *p);\n+\n+\t  p++;\n+\t  continue;\n+\t}\n+\n       if (*p == '`')\n \t{\n \t  /* Text enclosed by `...` are translated as a quoted string.  */\n@@ -114,6 +129,43 @@ expand_d_format (const char *format)\n   return (char *) obstack_finish (&buf);\n }\n \n+/* Rewrite the format string FORMAT to deal with any characters that require\n+   escaping before expand_d_format expands it.  */\n+\n+static char *\n+escape_d_format (const char *format)\n+{\n+  obstack buf;\n+\n+  gcc_obstack_init (&buf);\n+\n+  for (const char *p = format; *p; p++)\n+    {\n+      switch (*p)\n+\t{\n+\tcase '%':\n+\t  /* Escape `%' characters so that pp_format does not confuse them\n+\t     for actual format specifiers.  */\n+\t  obstack_1grow (&buf, '%');\n+\t  break;\n+\n+\tcase '`':\n+\t  /* Escape '`' characters so that expand_d_format does not confuse them\n+\t     for a quoted string.  */\n+\t  obstack_1grow (&buf, '\\\\');\n+\t  break;\n+\n+\tdefault:\n+\t  break;\n+\t}\n+\n+      obstack_1grow (&buf, *p);\n+    }\n+\n+  obstack_1grow (&buf, '\\0');\n+  return (char *) obstack_finish (&buf);\n+}\n+\n /* Helper routine for all error routines.  Reports a diagnostic specified by\n    KIND at the explicit location LOC.  The message FORMAT comes from the dmd\n    front-end, which does not get translated by the gcc diagnostic routines.  */\n@@ -177,9 +229,10 @@ verror (const Loc &loc, const char *format, va_list ap,\n \n       /* Build string and emit.  */\n       if (prefix2 != NULL)\n-\txformat = xasprintf (\"%s %s %s\", prefix1, prefix2, format);\n+\txformat = xasprintf (\"%s %s %s\", escape_d_format (prefix1),\n+\t\t\t     escape_d_format (prefix2), format);\n       else if (prefix1 != NULL)\n-\txformat = xasprintf (\"%s %s\", prefix1, format);\n+\txformat = xasprintf (\"%s %s\", escape_d_format (prefix1), format);\n       else\n \txformat = xasprintf (\"%s\", format);\n \n@@ -289,9 +342,10 @@ vdeprecation (const Loc &loc, const char *format, va_list ap,\n \n       /* Build string and emit.  */\n       if (prefix2 != NULL)\n-\txformat = xasprintf (\"%s %s %s\", prefix1, prefix2, format);\n+\txformat = xasprintf (\"%s %s %s\", escape_d_format (prefix1),\n+\t\t\t     escape_d_format (prefix2), format);\n       else if (prefix1 != NULL)\n-\txformat = xasprintf (\"%s %s\", prefix1, format);\n+\txformat = xasprintf (\"%s %s\", escape_d_format (prefix1), format);\n       else\n \txformat = xasprintf (\"%s\", format);\n "}, {"sha": "bc0d8af5d4a9b06f034b4e1d25f546e09df45d33", "filename": "gcc/testsuite/gdc.dg/pr98457.d", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc7d1c74ffb1cc85e67984632f581d526c783770/gcc%2Ftestsuite%2Fgdc.dg%2Fpr98457.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc7d1c74ffb1cc85e67984632f581d526c783770/gcc%2Ftestsuite%2Fgdc.dg%2Fpr98457.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Fpr98457.d?ref=dc7d1c74ffb1cc85e67984632f581d526c783770", "patch": "@@ -0,0 +1,9 @@\n+// https://gcc.gnu.org/bugzilla/show_bug.cgi?id=98457\n+// { dg-do compile }\n+\n+void main()\n+{\n+    writef!\"%s\";    // { dg-error \"template instance writef!\\\"%s\\\" template .writef. is not defined\" }\n+    writef!\"`%s\";   // { dg-error \"template instance writef!\\\"`%s\\\" template .writef. is not defined\" }\n+    writef!\"%%s`\";  // { dg-error \"template instance writef!\\\"%%s`\\\" template .writef. is not defined\" }\n+}"}]}