{"sha": "d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDFlM2Q2YWUxMWY2ZDQzNmQwYmJiYzI5NWU0ZDVhOTNhMDU1ODI5ZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2005-07-07T15:58:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2005-07-07T15:58:16Z"}, "message": "scanner.c (load_line): Add pbuflen argument, don't make buflen static.\n\n\t* scanner.c (load_line): Add pbuflen argument, don't make\n\tbuflen static.  If maxlen == 0 or preprocessor_flag,\n\tdon't truncate at buflen, but at maxlen.  In xrealloc add\n\t1 byte at the end for the terminating '\\0'.  Don't fill\n\twith spaces up to buflen, but gfc_option.fixed_line_length.\n\t(load_file): Adjust load_line caller.  Add line_len variable.\n\n\t* gfortran.dg/longline.f: New test.\n\nFrom-SVN: r101718", "tree": {"sha": "99bb771816d3b38f2aaf8d4ae3fbb546935bc476", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99bb771816d3b38f2aaf8d4ae3fbb546935bc476"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4c3a6ca189d0bf3a62b4f529275e0a666543650c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4c3a6ca189d0bf3a62b4f529275e0a666543650c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4c3a6ca189d0bf3a62b4f529275e0a666543650c"}], "stats": {"total": 49, "additions": 36, "deletions": 13}, "files": [{"sha": "5de8b3c6488ba3da34e147364b28224c1317a916", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d", "patch": "@@ -1,5 +1,12 @@\n 2005-07-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* scanner.c (load_line): Add pbuflen argument, don't make\n+\tbuflen static.  If maxlen == 0 or preprocessor_flag,\n+\tdon't truncate at buflen, but at maxlen.  In xrealloc add\n+\t1 byte at the end for the terminating '\\0'.  Don't fill\n+\twith spaces up to buflen, but gfc_option.fixed_line_length.\n+\t(load_file): Adjust load_line caller.  Add line_len variable.\n+\n \t* scanner.c (preprocessor_line): Only set current_file->line when errors\n \thave not been encountered.  Warn and don't crash if a file leave\n \tpreprocessor line has no corresponding entering line.  Formatting."}, {"sha": "fe28820a62a66b97ea68f3362e210813c45ef50a", "filename": "gcc/fortran/scanner.c", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d/gcc%2Ffortran%2Fscanner.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d/gcc%2Ffortran%2Fscanner.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fscanner.c?ref=d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d", "patch": "@@ -683,11 +683,10 @@ gfc_gobble_whitespace (void)\n    load_line returns wether the line was truncated.  */\n \n static int\n-load_line (FILE * input, char **pbuf)\n+load_line (FILE * input, char **pbuf, int *pbuflen)\n {\n-  int c, maxlen, i, preprocessor_flag;\n+  int c, maxlen, i, preprocessor_flag, buflen = *pbuflen;\n   int trunc_flag = 0;\n-  static int buflen = 0;\n   char *buffer;\n \n   /* Determine the maximum allowed line length.  */\n@@ -753,15 +752,18 @@ load_line (FILE * input, char **pbuf)\n       *buffer++ = c;\n       i++;\n \n-      if (i >= buflen && (maxlen == 0 || preprocessor_flag))\n+      if (maxlen == 0 || preprocessor_flag)\n \t{\n-\t  /* Reallocate line buffer to double size to hold the\n-\t     overlong line.  */\n-\t  buflen = buflen * 2;\n-\t  *pbuf = xrealloc (*pbuf, buflen);\n-\t  buffer = (*pbuf)+i;\n+\t  if (i >= buflen)\n+\t    {\n+\t      /* Reallocate line buffer to double size to hold the\n+\t         overlong line.  */\n+\t      buflen = buflen * 2;\n+\t      *pbuf = xrealloc (*pbuf, buflen + 1);\n+\t      buffer = (*pbuf)+i;\n+\t    }\n \t}\n-      else if (i >= buflen)\n+      else if (i >= maxlen)\n \t{\t\t\t\n \t  /* Truncate the rest of the line.  */\n \t  for (;;)\n@@ -782,10 +784,11 @@ load_line (FILE * input, char **pbuf)\n       && gfc_option.fixed_line_length > 0\n       && !preprocessor_flag\n       && c != EOF)\n-    while (i++ < buflen)\n+    while (i++ < gfc_option.fixed_line_length)\n       *buffer++ = ' ';\n \n   *buffer = '\\0';\n+  *pbuflen = buflen;\n \n   return trunc_flag;\n }\n@@ -1001,7 +1004,7 @@ load_file (char *filename, bool initial)\n   gfc_linebuf *b;\n   gfc_file *f;\n   FILE *input;\n-  int len;\n+  int len, line_len;\n \n   for (f = current_file; f; f = f->up)\n     if (strcmp (filename, f->filename) == 0)\n@@ -1036,10 +1039,11 @@ load_file (char *filename, bool initial)\n   current_file = f;\n   current_file->line = 1;\n   line = NULL;\n+  line_len = 0;\n \n   for (;;) \n     {\n-      int trunc = load_line (input, &line);\n+      int trunc = load_line (input, &line, &line_len);\n \n       len = strlen (line);\n       if (feof (input) && len == 0)"}, {"sha": "6ce5a0f750ec48d40a8878abc639e4c90f9aab7c", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d", "patch": "@@ -1,5 +1,7 @@\n 2005-07-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* gfortran.dg/longline.f: New test.\n+\n \t* gfortran.dg/badline.f: New test.\n \n 2005-07-07  Feng Wang  <fengwang@nudt.edu.cn>"}, {"sha": "ffd5a4bb2afbedf374c0719f0954c041cf72e79c", "filename": "gcc/testsuite/gfortran.dg/longline.f", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d/gcc%2Ftestsuite%2Fgfortran.dg%2Flongline.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d/gcc%2Ftestsuite%2Fgfortran.dg%2Flongline.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Flongline.f?ref=d1e3d6ae11f6d436d0bbbc295e4d5a93a055829d", "patch": "@@ -0,0 +1,10 @@\n+# 1 \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.f\"\n+! { dg-do compile }\n+\n+      subroutine foo\n+      character*10 cpnam\n+      character*4 csig\n+      write (34,808)  csig,ilax,cpnam\n+  808 format (/9X,4HTHE ,A4,  29HTIVE MINOS ERROR OF PARAMETER,I3,   2H\n+     +, ,A10)\n+      end"}]}