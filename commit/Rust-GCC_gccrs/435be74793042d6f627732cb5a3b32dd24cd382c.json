{"sha": "435be74793042d6f627732cb5a3b32dd24cd382c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM1YmU3NDc5MzA0MmQ2ZjYyNzczMmNiNWEzYjMyZGQyNGNkMzgyYw==", "commit": {"author": {"name": "Max Ostapenko", "email": "m.ostapenko@partner.samsung.com", "date": "2015-03-16T11:17:32Z"}, "committer": {"name": "Maxim Ostapenko", "email": "chefmax@gcc.gnu.org", "date": "2015-03-16T11:17:32Z"}, "message": "re PR sanitizer/64820 (Libsanitizer fails with ((AddrIsAlignedByGranularity(addr + size))) != (0)\" (0x0, 0x0) if ssp is enabled.)\n\n2015-03-16  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n\n\tPR sanitizer/64820\n\n\tgcc/\n\t* cfgexpand.c (align_base): New function.\n\t(alloc_stack_frame_space): Call it.\n\t(expand_stack_vars): Align prev_frame to be sure\n\tdata->asan_vec elements aligned properly.\n\n\tgcc/testsuite/\n\t* c-c++-common/asan/pr64820.c: New test.\n\nFrom-SVN: r221457", "tree": {"sha": "5befcb0a95eb0b574dcccdbbeb824653033f6f53", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5befcb0a95eb0b574dcccdbbeb824653033f6f53"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/435be74793042d6f627732cb5a3b32dd24cd382c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435be74793042d6f627732cb5a3b32dd24cd382c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/435be74793042d6f627732cb5a3b32dd24cd382c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/435be74793042d6f627732cb5a3b32dd24cd382c/comments", "author": null, "committer": null, "parents": [{"sha": "6c25f7962556e2217d5070720ac879c40063209a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c25f7962556e2217d5070720ac879c40063209a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c25f7962556e2217d5070720ac879c40063209a"}], "stats": {"total": 73, "additions": 63, "deletions": 10}, "files": [{"sha": "93281881db96197ad70428c5a79b3018a3f1b0f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435be74793042d6f627732cb5a3b32dd24cd382c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435be74793042d6f627732cb5a3b32dd24cd382c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=435be74793042d6f627732cb5a3b32dd24cd382c", "patch": "@@ -1,3 +1,11 @@\n+2015-03-16  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\tPR sanitizer/64820\n+\t* cfgexpand.c (align_base): New function.\n+\t(alloc_stack_frame_space): Call it.\n+\t(expand_stack_vars): Align prev_frame to be sure\n+\tdata->asan_vec elements aligned properly.\n+\n 2015-03-16  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR middle-end/65409"}, {"sha": "97e7a2583ea662d37d6eb8af57c5f14e87fc59d6", "filename": "gcc/cfgexpand.c", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435be74793042d6f627732cb5a3b32dd24cd382c/gcc%2Fcfgexpand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435be74793042d6f627732cb5a3b32dd24cd382c/gcc%2Fcfgexpand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgexpand.c?ref=435be74793042d6f627732cb5a3b32dd24cd382c", "patch": "@@ -282,6 +282,15 @@ align_local_variable (tree decl)\n   return align / BITS_PER_UNIT;\n }\n \n+/* Align given offset BASE with ALIGN.  Truncate up if ALIGN_UP is true,\n+   down otherwise.  Return truncated BASE value.  */\n+\n+static inline unsigned HOST_WIDE_INT\n+align_base (HOST_WIDE_INT base, unsigned HOST_WIDE_INT align, bool align_up)\n+{\n+  return align_up ? (base + align - 1) & -align : base & -align;\n+}\n+\n /* Allocate SIZE bytes at byte alignment ALIGN from the stack frame.\n    Return the frame offset.  */\n \n@@ -290,20 +299,17 @@ alloc_stack_frame_space (HOST_WIDE_INT size, unsigned HOST_WIDE_INT align)\n {\n   HOST_WIDE_INT offset, new_frame_offset;\n \n-  new_frame_offset = frame_offset;\n   if (FRAME_GROWS_DOWNWARD)\n     {\n-      new_frame_offset -= size + frame_phase;\n-      new_frame_offset &= -align;\n-      new_frame_offset += frame_phase;\n+      new_frame_offset\n+\t= align_base (frame_offset - frame_phase - size,\n+\t\t      align, false) + frame_phase;\n       offset = new_frame_offset;\n     }\n   else\n     {\n-      new_frame_offset -= frame_phase;\n-      new_frame_offset += align - 1;\n-      new_frame_offset &= -align;\n-      new_frame_offset += frame_phase;\n+      new_frame_offset\n+\t= align_base (frame_offset - frame_phase, align, true) + frame_phase;\n       offset = new_frame_offset;\n       new_frame_offset += size;\n     }\n@@ -1038,13 +1044,16 @@ expand_stack_vars (bool (*pred) (size_t), struct stack_vars_data *data)\n \t  base = virtual_stack_vars_rtx;\n \t  if ((flag_sanitize & SANITIZE_ADDRESS) && ASAN_STACK && pred)\n \t    {\n-\t      HOST_WIDE_INT prev_offset = frame_offset;\n+\t      HOST_WIDE_INT prev_offset\n+\t\t= align_base (frame_offset,\n+\t\t\t      MAX (alignb, ASAN_RED_ZONE_SIZE),\n+\t\t\t      FRAME_GROWS_DOWNWARD);\n \t      tree repr_decl = NULL_TREE;\n-\n \t      offset\n \t\t= alloc_stack_frame_space (stack_vars[i].size\n \t\t\t\t\t   + ASAN_RED_ZONE_SIZE,\n \t\t\t\t\t   MAX (alignb, ASAN_RED_ZONE_SIZE));\n+\n \t      data->asan_vec.safe_push (prev_offset);\n \t      data->asan_vec.safe_push (offset + stack_vars[i].size);\n \t      /* Find best representative of the partition."}, {"sha": "a236581d4d68a3b7b941fd73a0fa2c5c4575d047", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435be74793042d6f627732cb5a3b32dd24cd382c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435be74793042d6f627732cb5a3b32dd24cd382c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=435be74793042d6f627732cb5a3b32dd24cd382c", "patch": "@@ -1,3 +1,8 @@\n+2015-03-16  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n+\n+\tPR sanitizer/64820\n+\t* c-c++-common/asan/pr64820.c: New test.\n+\n 2015-03-16  Andre Vehreschild  <vehre@gmx.de>\n \n \t* gfortran.dg/pointer_2.f90: New test."}, {"sha": "885a662149179a0fd103073f554ea95fc24f184d", "filename": "gcc/testsuite/c-c++-common/asan/pr64820.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/435be74793042d6f627732cb5a3b32dd24cd382c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr64820.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/435be74793042d6f627732cb5a3b32dd24cd382c/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr64820.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fasan%2Fpr64820.c?ref=435be74793042d6f627732cb5a3b32dd24cd382c", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target fstack_protector } */\n+/* { dg-options \"-fstack-protector-strong\" } */\n+/* { dg-set-target-env-var ASAN_OPTIONS \"detect_stack_use_after_return=1\" } */\n+/* { dg-shouldfail \"asan\" } */\n+\n+__attribute__((noinline))\n+char *Ident(char *x) {\n+  return x;\n+}\n+\n+__attribute__((noinline))\n+char *Func1() {\n+  char local[1 << 12];\n+  return Ident(local);\n+}\n+\n+__attribute__((noinline))\n+void Func2(char *x) {\n+  *x = 1;\n+}\n+int main(int argc, char **argv) {\n+  Func2(Func1());\n+  return 0;\n+}\n+\n+/* { dg-output \"AddressSanitizer: stack-use-after-return on address 0x\\[0-9a-f\\]+\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"WRITE of size 1 at .* thread T0.*\" } */\n+/* { dg-output \"    #0.*(Func2)?.*pr64820.(c:21)?.*\" } */\n+/* { dg-output \"is located in stack of thread T0 at offset.*\" } */\n+/* { dg-output \"\\'local\\' <== Memory access at offset 32 is inside this variable\" } */"}]}