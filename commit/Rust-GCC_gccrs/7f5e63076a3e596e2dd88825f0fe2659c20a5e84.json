{"sha": "7f5e63076a3e596e2dd88825f0fe2659c20a5e84", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2Y1ZTYzMDc2YTNlNTk2ZTJkZDg4ODI1ZjBmZTI2NTljMjBhNWU4NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-08-22T21:58:48Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-08-22T21:58:48Z"}, "message": "tree.h (SAVE_EXPR_RESOLVED_P): New.\n\n        * tree.h (SAVE_EXPR_RESOLVED_P): New.\n        * gimplify.c (gimplify_save_expr): Use it.\n        * expr.c (expand_expr_real_1): Likewise.  Also set DECL_IGNORED_P\n        on the temporary variable.\n\nFrom-SVN: r86387", "tree": {"sha": "8c78d03d629c9690690dd3a65b9e2d84e426d6dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c78d03d629c9690690dd3a65b9e2d84e426d6dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7f5e63076a3e596e2dd88825f0fe2659c20a5e84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5e63076a3e596e2dd88825f0fe2659c20a5e84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7f5e63076a3e596e2dd88825f0fe2659c20a5e84", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7f5e63076a3e596e2dd88825f0fe2659c20a5e84/comments", "author": null, "committer": null, "parents": [{"sha": "f8d0aee5c105df1c5d073a9a91fb467cd603f600", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8d0aee5c105df1c5d073a9a91fb467cd603f600", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8d0aee5c105df1c5d073a9a91fb467cd603f600"}], "stats": {"total": 55, "additions": 36, "deletions": 19}, "files": [{"sha": "af7e4d471fddd005f5b05b4061b4b4845ee7fbac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5e63076a3e596e2dd88825f0fe2659c20a5e84/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5e63076a3e596e2dd88825f0fe2659c20a5e84/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7f5e63076a3e596e2dd88825f0fe2659c20a5e84", "patch": "@@ -1,3 +1,10 @@\n+2004-08-22  Richard Hendersion  <rth@redhat.com>\n+\n+\t* tree.h (SAVE_EXPR_RESOLVED_P): New.\n+\t* gimplify.c (gimplify_save_expr): Use it.\n+\t* expr.c (expand_expr_real_1): Likewise.  Also set DECL_IGNORED_P\n+\ton the temporary variable.\n+\n 2004-08-22  Andrew Pinski  <pinskia@physics.uc.edu>\n \n \t* fold-const.c (rtl_expr_nonnegative_p): Delete."}, {"sha": "81b103d06164cf6db598df5265b976b315746230", "filename": "gcc/expr.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5e63076a3e596e2dd88825f0fe2659c20a5e84/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5e63076a3e596e2dd88825f0fe2659c20a5e84/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7f5e63076a3e596e2dd88825f0fe2659c20a5e84", "patch": "@@ -6497,7 +6497,7 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \ttree val = TREE_OPERAND (exp, 0);\n \trtx ret = expand_expr_real_1 (val, target, tmode, modifier, alt_rtl);\n \n-\tif (TREE_CODE (val) != VAR_DECL || !DECL_ARTIFICIAL (val))\n+\tif (!SAVE_EXPR_RESOLVED_P (exp))\n \t  {\n \t    /* We can indeed still hit this case, typically via builtin\n \t       expanders calling save_expr immediately before expanding\n@@ -6508,7 +6508,9 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n \n \t    val = build_decl (VAR_DECL, NULL, TREE_TYPE (exp));\n \t    DECL_ARTIFICIAL (val) = 1;\n+\t    DECL_IGNORED_P (val) = 1;\n \t    TREE_OPERAND (exp, 0) = val;\n+\t    SAVE_EXPR_RESOLVED_P (exp) = 1;\n \n \t    if (!CONSTANT_P (ret))\n \t      ret = copy_to_reg (ret);"}, {"sha": "3c9ff202dc4ea27c60cc3a6ab3d1915de6dbccd1", "filename": "gcc/gimplify.c", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5e63076a3e596e2dd88825f0fe2659c20a5e84/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5e63076a3e596e2dd88825f0fe2659c20a5e84/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=7f5e63076a3e596e2dd88825f0fe2659c20a5e84", "patch": "@@ -3068,27 +3068,28 @@ gimplify_save_expr (tree *expr_p, tree *pre_p, tree *post_p)\n \n   val = TREE_OPERAND (*expr_p, 0);\n \n-  /* If the operand is already a GIMPLE temporary, just re-write the\n-     SAVE_EXPR node.  */\n-  if (TREE_CODE (val) == VAR_DECL && DECL_GIMPLE_FORMAL_TEMP_P (val))\n-    *expr_p = val;\n-  /* The operand may be a void-valued expression such as SAVE_EXPRs\n-     generated by the Java frontend for class initialization.  It is\n-     being executed only for its side-effects.  */\n-  else if (TREE_TYPE (val) == void_type_node)\n+  /* If the SAVE_EXPR has not been resolved, then evaluate it once.  */\n+  if (!SAVE_EXPR_RESOLVED_P (*expr_p))\n     {\n-      tree body = TREE_OPERAND (*expr_p, 0);\n-      ret = gimplify_expr (& body, pre_p, post_p, is_gimple_stmt, fb_none);\n-      append_to_statement_list (body, pre_p);\n-      *expr_p = NULL;\n-    }\n-  else\n-    {\n-      val = get_initialized_tmp_var (val, pre_p, post_p);\n-      DECL_GIMPLE_FORMAL_TEMP_P (val) = 1;\n-      *expr_p = TREE_OPERAND (*expr_p, 0) = val;\n+      /* The operand may be a void-valued expression such as SAVE_EXPRs\n+\t generated by the Java frontend for class initialization.  It is\n+\t being executed only for its side-effects.  */\n+      if (TREE_TYPE (val) == void_type_node)\n+\t{\n+\t  ret = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n+\t\t\t       is_gimple_stmt, fb_none);\n+\t  append_to_statement_list (TREE_OPERAND (*expr_p, 0), pre_p);\n+\t  val = NULL;\n+\t}\n+      else\n+\tval = get_initialized_tmp_var (val, pre_p, post_p);\n+\n+      TREE_OPERAND (*expr_p, 0) = val;\n+      SAVE_EXPR_RESOLVED_P (*expr_p) = 1;\n     }\n \n+  *expr_p = val;\n+\n   return ret;\n }\n "}, {"sha": "c8f3c5eb1f90ecf217da1ecc1a6d2aac9b65dc87", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7f5e63076a3e596e2dd88825f0fe2659c20a5e84/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7f5e63076a3e596e2dd88825f0fe2659c20a5e84/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=7f5e63076a3e596e2dd88825f0fe2659c20a5e84", "patch": "@@ -232,6 +232,8 @@ struct tree_common GTY(())\n            ASM_EXPR\n        TYPE_CACHED_VALUES_P in\n           ..._TYPE\n+       SAVE_EXPR_RESOLVED_P in\n+\t  SAVE_EXPR\n \n    private_flag:\n \n@@ -788,6 +790,11 @@ extern void tree_operand_check_failed (int, enum tree_code,\n    of cached values, or is something else.  */\n #define TYPE_CACHED_VALUES_P(NODE) (TYPE_CHECK(NODE)->common.public_flag)\n \n+/* In a SAVE_EXPR, indicates that the original expression has already\n+   been substituted with a VAR_DECL that contains the value.  */\n+#define SAVE_EXPR_RESOLVED_P(NODE) \\\n+  (TREE_CHECK (NODE, SAVE_EXPR)->common.public_flag)\n+\n /* In any expression, decl, or constant, nonzero means it has side effects or\n    reevaluation of the whole expression could produce a different value.\n    This is set if any subexpression is a function call, a side effect or a"}]}