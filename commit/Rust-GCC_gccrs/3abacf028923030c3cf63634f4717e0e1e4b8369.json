{"sha": "3abacf028923030c3cf63634f4717e0e1e4b8369", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FiYWNmMDI4OTIzMDMwYzNjZjYzNjM0ZjQ3MTdlMGUxZTRiODM2OQ==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-24T03:30:02Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-24T03:30:02Z"}, "message": "(is_body_block):  Rewritten for greater saftey.\n\n(output_block):  Fixed to deal correctly with non-inlined blocks.\n\nFrom-SVN: r1678", "tree": {"sha": "69b3d007fbf1753aeb9d7774a578fc32722c2ea7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/69b3d007fbf1753aeb9d7774a578fc32722c2ea7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3abacf028923030c3cf63634f4717e0e1e4b8369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3abacf028923030c3cf63634f4717e0e1e4b8369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3abacf028923030c3cf63634f4717e0e1e4b8369", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3abacf028923030c3cf63634f4717e0e1e4b8369/comments", "author": null, "committer": null, "parents": [{"sha": "85f5e2b68d38861a759736546ce55cff62538193", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85f5e2b68d38861a759736546ce55cff62538193", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85f5e2b68d38861a759736546ce55cff62538193"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "b1f48f5e92ac6f3131c74cc283e427ce03f3857e", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3abacf028923030c3cf63634f4717e0e1e4b8369/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3abacf028923030c3cf63634f4717e0e1e4b8369/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=3abacf028923030c3cf63634f4717e0e1e4b8369", "patch": "@@ -1091,23 +1091,34 @@ output_signed_leb128 (value)\n /**************** utility functions for attribute functions ******************/\n \n /* Given a pointer to a BLOCK node return non-zero if (and only if) the\n-   node in question represents the outermost block (i.e. the \"body block\")\n-   of a function or method.\n-\n-   For any BLOCK node representing a \"body block\", the BLOCK_SUPERCONTEXT\n-   of the node will point to another BLOCK node which represents the outer-\n-   most (function) scope for the function or method.  The BLOCK_SUPERCONTEXT\n-   of that node in turn will point to the relevant FUNCTION_DECL node.\n+   node in question represents the outermost pair of curly braces (i.e.\n+   the \"body block\") of a function or method.\n+\n+   For any BLOCK node representing a \"body block\" of a function or method,\n+   the BLOCK_SUPERCONTEXT of the node will point to another BLOCK node\n+   which represents the outermost (function) scope for the function or\n+   method (i.e. the one which includes the formal parameters).  The\n+   BLOCK_SUPERCONTEXT of *that* node in turn will point to the relevant\n+   FUNCTION_DECL node.\n */\n \n inline int\n is_body_block (stmt)\n      register tree stmt;\n {\n-  register enum tree_code code\n-    = TREE_CODE (BLOCK_SUPERCONTEXT (BLOCK_SUPERCONTEXT (stmt)));\n+  if (TREE_CODE (stmt) == BLOCK)\n+    {\n+      register tree parent = BLOCK_SUPERCONTEXT (stmt);\n+\n+      if (TREE_CODE (parent) == BLOCK)\n+\t{\n+\t  register tree grandparent = BLOCK_SUPERCONTEXT (parent);\n \n-  return (code == FUNCTION_DECL);\n+\t  if (TREE_CODE (grandparent) == FUNCTION_DECL)\n+\t    return 1;\n+\t}\n+    }\n+  return 0;\n }\n \n /* Given a pointer to a tree node for some type, return a Dwarf fundamental\n@@ -4047,9 +4058,7 @@ output_block (stmt)\n \t not represent a \"body block inlining\" before trying to set the\n \t `must_output_die' flag.  */\n \n-      if (origin != NULL\n-\t  && origin_code == BLOCK\n-\t  && ! is_body_block (origin))\n+      if (origin == NULL || ! is_body_block (origin))\n \t{\n \t  /* Determine if this block directly contains any \"significant\"\n \t     local declarations which we will need to output DIEs for.  */"}]}