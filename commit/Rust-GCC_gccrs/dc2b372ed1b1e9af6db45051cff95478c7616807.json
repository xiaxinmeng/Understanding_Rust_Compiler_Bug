{"sha": "dc2b372ed1b1e9af6db45051cff95478c7616807", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGMyYjM3MmVkMWIxZTlhZjZkYjQ1MDUxY2ZmOTU0NzhjNzYxNjgwNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-02T21:39:08Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-12-02T21:39:08Z"}, "message": "libstdc++: Fix std::any pretty printer [PR 68735]\n\nThis fixes errors seen on powerpc64 (big endian only) due to the\nprinters for std::any and std::experimental::any being unable to find\nthe manager function.\n\nlibstdc++-v3/ChangeLog:\n\n\tPR libstdc++/65480\n\tPR libstdc++/68735\n\t* python/libstdcxx/v6/printers.py (function_pointer_to_name):\n\tNew helper function to get the name of a function from its\n\taddress.\n\t(StdExpAnyPrinter.__init__): Use it.", "tree": {"sha": "ce0008f72deb04eb3f14f9c916dae310bebaf5d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce0008f72deb04eb3f14f9c916dae310bebaf5d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc2b372ed1b1e9af6db45051cff95478c7616807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2b372ed1b1e9af6db45051cff95478c7616807", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc2b372ed1b1e9af6db45051cff95478c7616807", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc2b372ed1b1e9af6db45051cff95478c7616807/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2847d7d28ea79e2f93049fad16f931b6705c9fff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2847d7d28ea79e2f93049fad16f931b6705c9fff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2847d7d28ea79e2f93049fad16f931b6705c9fff"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "9c6393712a0ebd28112b41d47a9c3444ee2581fe", "filename": "libstdc++-v3/python/libstdcxx/v6/printers.py", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc2b372ed1b1e9af6db45051cff95478c7616807/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc2b372ed1b1e9af6db45051cff95478c7616807/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fpython%2Flibstdcxx%2Fv6%2Fprinters.py?ref=dc2b372ed1b1e9af6db45051cff95478c7616807", "patch": "@@ -1126,6 +1126,29 @@ def display_hint (self):\n             return self.visualizer.display_hint ()\n         return self.hint\n \n+def function_pointer_to_name(f):\n+    \"Find the name of the function referred to by the gdb.Value f, \"\n+    \" which should contain a function pointer from the program.\"\n+\n+    # Turn the function pointer into an actual address.\n+    # This is needed to unpack ppc64 function descriptors.\n+    f = f.dereference().address\n+\n+    if sys.version_info[0] == 2:\n+        # Older versions of GDB need to use long for Python 2,\n+        # because int(f) on 64-bit big-endian values raises a\n+        # gdb.error saying \"Cannot convert value to int.\"\n+        f = long(f)\n+    else:\n+        f = int(f)\n+\n+    try:\n+        # If the function can't be found older versions of GDB raise a\n+        # RuntimeError saying \"Cannot locate object file for block.\"\n+        return gdb.block_for_pc(f).function.name\n+    except:\n+        return None\n+\n class StdExpAnyPrinter(SingleObjContainerPrinter):\n     \"Print a std::any or std::experimental::any\"\n \n@@ -1138,11 +1161,11 @@ def __init__ (self, typename, val):\n         visualizer = None\n         mgr = self.val['_M_manager']\n         if mgr != 0:\n-            func = gdb.block_for_pc(int(mgr.cast(gdb.lookup_type('intptr_t'))))\n+            func = function_pointer_to_name(mgr)\n             if not func:\n-                raise ValueError(\"Invalid function pointer in %s\" % self.typename)\n+                raise ValueError(\"Invalid function pointer in %s\" % (self.typename))\n             rx = r\"\"\"({0}::_Manager_\\w+<.*>)::_S_manage\\((enum )?{0}::_Op, (const {0}|{0} const) ?\\*, (union )?{0}::_Arg ?\\*\\)\"\"\".format(typename)\n-            m = re.match(rx, func.function.name)\n+            m = re.match(rx, func)\n             if not m:\n                 raise ValueError(\"Unknown manager function in %s\" % self.typename)\n "}]}