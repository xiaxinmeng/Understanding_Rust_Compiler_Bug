{"sha": "626d1efd40666cee2ff12d2ce2e34322b51c708f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjI2ZDFlZmQ0MDY2NmNlZTJmZjEyZDJjZTJlMzQzMjJiNTFjNzA4Zg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-07-14T17:40:38Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2000-07-14T17:40:38Z"}, "message": "dwarf2out.c (dwarf2out_frame_debug_expr): If we store the CFA register in the stack and later in another register...\n\n        * dwarf2out.c (dwarf2out_frame_debug_expr): If we store the CFA\n        register in the stack and later in another register, use the new\n        register.\n\nFrom-SVN: r35036", "tree": {"sha": "32da8a07edf8cc56d2ae17ccd8ec4c9d715cc4ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32da8a07edf8cc56d2ae17ccd8ec4c9d715cc4ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/626d1efd40666cee2ff12d2ce2e34322b51c708f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626d1efd40666cee2ff12d2ce2e34322b51c708f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/626d1efd40666cee2ff12d2ce2e34322b51c708f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/626d1efd40666cee2ff12d2ce2e34322b51c708f/comments", "author": null, "committer": null, "parents": [{"sha": "30f747d0772283f8ab408f7c07393d5c54db9f16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30f747d0772283f8ab408f7c07393d5c54db9f16", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30f747d0772283f8ab408f7c07393d5c54db9f16"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "e723556f9d9bfff433fca63c51de565577d1f776", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626d1efd40666cee2ff12d2ce2e34322b51c708f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626d1efd40666cee2ff12d2ce2e34322b51c708f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=626d1efd40666cee2ff12d2ce2e34322b51c708f", "patch": "@@ -1,3 +1,9 @@\n+2000-07-14  Jason Merrill  <jason@redhat.com>\n+\n+\t* dwarf2out.c (dwarf2out_frame_debug_expr): If we store the CFA \n+\tregister in the stack and later in another register, use the new\n+\tregister.\n+\n Fri Jul 14 10:25:53 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n \t* config/mips/mips.md: (absdi2): Handle sign_extend for\n@@ -391,6 +397,7 @@ Tue Jul 11 16:26:17 2000  Clinton Popetz  <cpopetz@cygnus.com>\n \n \t* cpp.texi: Update.\n \n+>>>>>>> 1.7094\n 2000-07-11  Neil Booth  <NeilB@earthling.net>\n \n \t* cppinit.c: (cpp_reader_init): Allow digraphs by default."}, {"sha": "90f6ae8f32daf78dbc87009bfe302c34db81135d", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/626d1efd40666cee2ff12d2ce2e34322b51c708f/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/626d1efd40666cee2ff12d2ce2e34322b51c708f/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=626d1efd40666cee2ff12d2ce2e34322b51c708f", "patch": "@@ -626,7 +626,8 @@ expand_builtin_init_dwarf_reg_sizes (address)\n   rtx addr = expand_expr (address, NULL_RTX, VOIDmode, 0);\n   rtx mem = gen_rtx_MEM (mode, addr);\n \n-  for (i = 0; i < DWARF_FRAME_REGISTERS; ++i)\n+  i = MAX (FIRST_PSEUDO_REGISTER, DWARF_FRAME_REGISTERS);\n+  while (i--)\n     {\n       int offset = DWARF_FRAME_REGNUM (i) * GET_MODE_SIZE (mode);\n       int size = GET_MODE_SIZE (reg_raw_mode[i]);\n@@ -1208,6 +1209,11 @@ static unsigned cfa_temp_reg;\n /* A temporary value used in adjusting SP or setting up the store_reg.  */\n static long cfa_temp_value;\n \n+/* If we see a store of the CFA register, remember it in case we later also\n+   copy it into another register.  The ARM saves the old SP in the stack,\n+   but it also has a usable FP.  */\n+static unsigned cfa_old_reg;\n+\n /* Record call frame debugging information for an expression, which either\n    sets SP or FP (adjusting how we calculate the frame address) or saves a\n    register to the stack. */\n@@ -1257,14 +1263,18 @@ dwarf2out_frame_debug_expr (expr, label)\n         {\n           /* Setting FP from SP.  */\n         case REG:\n-          if (cfa.reg != (unsigned) REGNO (src))\n+          if (cfa.reg == (unsigned) REGNO (src)\n+\t      || (cfa.indirect && cfa_old_reg == (unsigned) REGNO (src)))\n+\t    /* OK */;\n+\t  else\n             abort ();\n \n \t  /* We used to require that dest be either SP or FP, but the\n \t     ARM copies SP to a temporary register, and from there to\n \t     FP.  So we just rely on the backends to only set\n \t     RTX_FRAME_RELATED_P on appropriate insns.  */\n           cfa.reg = REGNO (dest);\n+\t  cfa.indirect = 0;\n           break;\n \n         case PLUS:\n@@ -1376,7 +1386,9 @@ dwarf2out_frame_debug_expr (expr, label)\n          going to have to use an indrect mechanism.  */\n       if (REGNO (src) != STACK_POINTER_REGNUM \n \t  && REGNO (src) != HARD_FRAME_POINTER_REGNUM \n-\t  && (unsigned) REGNO (src) == cfa.reg)\n+\t  && (unsigned) REGNO (src) == cfa.reg\n+\t  /* Temporary KLUDGE to make ARM work.  */\n+\t  && GET_CODE (XEXP (dest, 0)) != PRE_DEC)\n \t{\n \t  /* We currently allow this to be ONLY a MEM or MEM + offset.  */\n \t  rtx x = XEXP (dest, 0);\n@@ -1390,6 +1402,7 @@ dwarf2out_frame_debug_expr (expr, label)\n \t    }\n \t  if (GET_CODE (x) != REG)\n \t    abort ();\n+\t  cfa_old_reg = cfa.reg;\n \t  cfa.reg = (unsigned) REGNO (x);\n \t  cfa.base_offset = offset;\n \t  cfa.indirect = 1;"}]}