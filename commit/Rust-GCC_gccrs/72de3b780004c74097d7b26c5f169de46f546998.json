{"sha": "72de3b780004c74097d7b26c5f169de46f546998", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJkZTNiNzgwMDA0Yzc0MDk3ZDdiMjZjNWYxNjlkZTQ2ZjU0Njk5OA==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2017-12-19T20:13:04Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2017-12-19T20:13:04Z"}, "message": "re PR middle-end/83477 (Wrong code w/ -O1)\n\n\tPR tree-optimization/83477\n\t* tree-ssa-threadedge.c (record_temporary_equivalences_from_phis): For\n\ta non-virtual PHI, always push a new range.\n\n\tPR tree-optimization/83477\n\t* gcc.c-torture/execute/pr83477.c: New test.\n\nFrom-SVN: r255837", "tree": {"sha": "db897bbf37a558de4fd1fe439a95d46f628736f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/db897bbf37a558de4fd1fe439a95d46f628736f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72de3b780004c74097d7b26c5f169de46f546998", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72de3b780004c74097d7b26c5f169de46f546998", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72de3b780004c74097d7b26c5f169de46f546998", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72de3b780004c74097d7b26c5f169de46f546998/comments", "author": null, "committer": null, "parents": [{"sha": "af3fa359b4b7335008652b9f1eefbd41ac8216d9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/af3fa359b4b7335008652b9f1eefbd41ac8216d9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/af3fa359b4b7335008652b9f1eefbd41ac8216d9"}], "stats": {"total": 69, "additions": 63, "deletions": 6}, "files": [{"sha": "8a80f18045baf522a21e7b04f735f686b256680b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de3b780004c74097d7b26c5f169de46f546998/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de3b780004c74097d7b26c5f169de46f546998/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=72de3b780004c74097d7b26c5f169de46f546998", "patch": "@@ -1,3 +1,9 @@\n+2017-12-18  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/83477\n+\t* tree-ssa-threadedge.c (record_temporary_equivalences_from_phis): For\n+\ta non-virtual PHI, always push a new range.\n+\n 2017-12-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/77608\n@@ -195,7 +201,6 @@\n \t* tree-ssa-dom.c (record_equivalences_from_phis): Fix handling\n \tof degenerates resulting from ignoring an edge.\n \n->>>>>>> .r255835\n 2017-12-18  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/83373"}, {"sha": "b32cb7a09faf250bf58a6fa2a8110e92dc493db9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de3b780004c74097d7b26c5f169de46f546998/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de3b780004c74097d7b26c5f169de46f546998/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=72de3b780004c74097d7b26c5f169de46f546998", "patch": "@@ -1,3 +1,8 @@\n+2017-12-18  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/83477\n+\t* gcc.c-torture/execute/pr83477.c: New test.\n+\n 2017-12-19  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/77608\n@@ -63,7 +68,6 @@\n \tPR ipa/83346\n \t* g++.dg/ipa/pr82801.C: New test.\n \n->>>>>>> .r255835\n 2017-12-18  Martin Sebor  <msebor@redhat.com>\n \n \tPR middle-end/83373"}, {"sha": "de667fd7d68c01fcc00816c92394f6897952ec8e", "filename": "gcc/testsuite/gcc.c-torture/execute/pr83477.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de3b780004c74097d7b26c5f169de46f546998/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr83477.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de3b780004c74097d7b26c5f169de46f546998/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr83477.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr83477.c?ref=72de3b780004c74097d7b26c5f169de46f546998", "patch": "@@ -0,0 +1,22 @@\n+int yf = 0;\n+\n+void\n+pl (int q5, int nd)\n+{\n+  unsigned int hp = q5;\n+  int zx = (q5 == 0) ? hp : (hp / q5);\n+\n+  yf = ((nd < 2) * zx != 0) ? nd : 0;\n+}\n+\n+int\n+main (void)\n+{\n+  pl (1, !yf);\n+  if (yf != 1)\n+    __builtin_abort ();\n+\n+  return 0;\n+}\n+\n+"}, {"sha": "0c782f5169794ec4e0f4a38b08e3a129e509c3cf", "filename": "gcc/tree-ssa-threadedge.c", "status": "modified", "additions": 30, "deletions": 4, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72de3b780004c74097d7b26c5f169de46f546998/gcc%2Ftree-ssa-threadedge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72de3b780004c74097d7b26c5f169de46f546998/gcc%2Ftree-ssa-threadedge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadedge.c?ref=72de3b780004c74097d7b26c5f169de46f546998", "patch": "@@ -156,11 +156,37 @@ record_temporary_equivalences_from_phis (edge e,\n       const_and_copies->record_const_or_copy (dst, src);\n \n       /* Also update the value range associated with DST, using\n-\t the range from SRC.  */\n-      if (evrp_range_analyzer && TREE_CODE (src) == SSA_NAME)\n+\t the range from SRC.\n+\n+\t Note that even if SRC is a constant we need to set a suitable\n+\t output range so that VR_UNDEFINED ranges do not leak through.  */\n+      if (evrp_range_analyzer)\n \t{\n-\t  value_range *vr = evrp_range_analyzer->get_value_range (src);\n-\t  evrp_range_analyzer->push_value_range (dst, vr);\n+\t  /* Get an empty new VR we can pass to update_value_range and save\n+\t     away in the VR stack.  */\n+\t  vr_values *vr_values = evrp_range_analyzer->get_vr_values ();\n+\t  value_range *new_vr = vr_values->allocate_value_range ();\n+\t  memset (new_vr, 0, sizeof (value_range));\n+\n+\t  /* There are three cases to consider:\n+\n+\t       First if SRC is an SSA_NAME, then we can copy the value\n+\t       range from SRC into NEW_VR.\n+\n+\t       Second if SRC is an INTEGER_CST, then we can just wet\n+\t       NEW_VR to a singleton range.\n+\n+\t       Otherwise set NEW_VR to varying.  This may be overly\n+\t       conservative.  */\n+\t  if (TREE_CODE (src) == SSA_NAME)\n+\t    copy_value_range (new_vr, vr_values->get_value_range (src));\n+\t  else if (TREE_CODE (src) == INTEGER_CST)\n+\t    set_value_range_to_value (new_vr, src,  NULL);\n+\t  else\n+\t    set_value_range_to_varying (new_vr);\n+\n+\t  /* This is a temporary range for DST, so push it.  */\n+\t  evrp_range_analyzer->push_value_range (dst, new_vr);\n \t}\n     }\n   return true;"}]}