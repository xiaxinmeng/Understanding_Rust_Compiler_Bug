{"sha": "a21065cad0187cf31d5984b12ef73a9f78c229cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIxMDY1Y2FkMDE4N2NmMzFkNTk4NGIxMmVmNzNhOWY3OGMyMjljYg==", "commit": {"author": {"name": "Jan Hubicka", "email": "hubicka@ucw.cz", "date": "2015-03-27T04:01:04Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2015-03-27T04:01:04Z"}, "message": "ipa-inline-analysis.c (redirect_to_unreachable): Be prepared for edge to change by speculation resolution or redirection.\n\n\n\t* ipa-inline-analysis.c (redirect_to_unreachable): Be prepared for\n\tedge to change by speculation resolution or redirection.\n\t(edge_set_predicate): Likewise.\n\t(inline_summary_t::duplicate): Likewise.\n\t(remap_edge_summaries): Likewise.\n\t* gcc.c-torture/compile/20150327.c: New testcase.\n\nFrom-SVN: r221718", "tree": {"sha": "fa321bdefa75fde285b4c26a0ee21e739e437fc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fa321bdefa75fde285b4c26a0ee21e739e437fc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a21065cad0187cf31d5984b12ef73a9f78c229cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21065cad0187cf31d5984b12ef73a9f78c229cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a21065cad0187cf31d5984b12ef73a9f78c229cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a21065cad0187cf31d5984b12ef73a9f78c229cb/comments", "author": null, "committer": null, "parents": [{"sha": "e59887e7b63d58c14e032f5266c95e61c5e38415", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e59887e7b63d58c14e032f5266c95e61c5e38415", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e59887e7b63d58c14e032f5266c95e61c5e38415"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "992cd5360b9a5bedcdddd72a2da3b5957b94d05c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21065cad0187cf31d5984b12ef73a9f78c229cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21065cad0187cf31d5984b12ef73a9f78c229cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a21065cad0187cf31d5984b12ef73a9f78c229cb", "patch": "@@ -1,3 +1,11 @@\n+2015-03-26  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* ipa-inline-analysis.c (redirect_to_unreachable): Be prepared for\n+\tedge to change by speculation resolution or redirection.\n+\t(edge_set_predicate): Likewise.\n+\t(inline_summary_t::duplicate): Likewise.\n+\t(remap_edge_summaries): Likewise.\n+\n 2015-03-26  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* ipa-inline.c (check_maybe_up, check_maybe_down, check_match):"}, {"sha": "a9d885fe34dd383513e2fbad722a39e37cd71013", "filename": "gcc/ipa-inline-analysis.c", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21065cad0187cf31d5984b12ef73a9f78c229cb/gcc%2Fipa-inline-analysis.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21065cad0187cf31d5984b12ef73a9f78c229cb/gcc%2Fipa-inline-analysis.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline-analysis.c?ref=a21065cad0187cf31d5984b12ef73a9f78c229cb", "patch": "@@ -762,40 +762,41 @@ account_size_time (struct inline_summary *summary, int size, int time,\n \n /* We proved E to be unreachable, redirect it to __bultin_unreachable.  */\n \n-static void\n+static struct cgraph_edge *\n redirect_to_unreachable (struct cgraph_edge *e)\n {\n   struct cgraph_node *callee = !e->inline_failed ? e->callee : NULL;\n-  struct inline_edge_summary *es = inline_edge_summary (e);\n \n   if (e->speculative)\n-    e->resolve_speculation (builtin_decl_implicit (BUILT_IN_UNREACHABLE));\n-  if (!e->callee)\n+    e = e->resolve_speculation (builtin_decl_implicit (BUILT_IN_UNREACHABLE));\n+  else if (!e->callee)\n     e->make_direct (cgraph_node::get_create\n \t\t      (builtin_decl_implicit (BUILT_IN_UNREACHABLE)));\n   else\n     e->redirect_callee (cgraph_node::get_create\n \t\t\t(builtin_decl_implicit (BUILT_IN_UNREACHABLE)));\n+  struct inline_edge_summary *es = inline_edge_summary (e);\n   e->inline_failed = CIF_UNREACHABLE;\n   e->frequency = 0;\n   e->count = 0;\n   es->call_stmt_size = 0;\n   es->call_stmt_time = 0;\n   if (callee)\n     callee->remove_symbol_and_inline_clones ();\n+  return e;\n }\n \n /* Set predicate for edge E.  */\n \n static void\n edge_set_predicate (struct cgraph_edge *e, struct predicate *predicate)\n {\n-  struct inline_edge_summary *es = inline_edge_summary (e);\n-\n   /* If the edge is determined to be never executed, redirect it\n      to BUILTIN_UNREACHABLE to save inliner from inlining into it.  */\n   if (predicate && false_predicate_p (predicate))\n-    redirect_to_unreachable (e);\n+    e = redirect_to_unreachable (e);\n+\n+  struct inline_edge_summary *es = inline_edge_summary (e);\n   if (predicate && !true_predicate_p (predicate))\n     {\n       if (!es->predicate)\n@@ -1184,7 +1185,7 @@ inline_summary_t::duplicate (cgraph_node *src,\n       size_time_entry *e;\n       int optimized_out_size = 0;\n       bool inlined_to_p = false;\n-      struct cgraph_edge *edge;\n+      struct cgraph_edge *edge, *next;\n \n       info->entry = 0;\n       known_vals.safe_grow_cleared (count);\n@@ -1229,10 +1230,11 @@ inline_summary_t::duplicate (cgraph_node *src,\n \n       /* Remap edge predicates with the same simplification as above.\n          Also copy constantness arrays.   */\n-      for (edge = dst->callees; edge; edge = edge->next_callee)\n+      for (edge = dst->callees; edge; edge = next)\n \t{\n \t  struct predicate new_predicate;\n \t  struct inline_edge_summary *es = inline_edge_summary (edge);\n+\t  next = edge->next_callee;\n \n \t  if (!edge->inline_failed)\n \t    inlined_to_p = true;\n@@ -1249,10 +1251,11 @@ inline_summary_t::duplicate (cgraph_node *src,\n \n       /* Remap indirect edge predicates with the same simplificaiton as above. \n          Also copy constantness arrays.   */\n-      for (edge = dst->indirect_calls; edge; edge = edge->next_callee)\n+      for (edge = dst->indirect_calls; edge; edge = next)\n \t{\n \t  struct predicate new_predicate;\n \t  struct inline_edge_summary *es = inline_edge_summary (edge);\n+\t  next = edge->next_callee;\n \n \t  gcc_checking_assert (edge->inline_failed);\n \t  if (!es->predicate)\n@@ -3484,11 +3487,12 @@ remap_edge_summaries (struct cgraph_edge *inlined_edge,\n \t\t      clause_t possible_truths,\n \t\t      struct predicate *toplev_predicate)\n {\n-  struct cgraph_edge *e;\n-  for (e = node->callees; e; e = e->next_callee)\n+  struct cgraph_edge *e, *next;\n+  for (e = node->callees; e; e = next)\n     {\n       struct inline_edge_summary *es = inline_edge_summary (e);\n       struct predicate p;\n+      next = e->next_callee;\n \n       if (e->inline_failed)\n \t{\n@@ -3509,10 +3513,11 @@ remap_edge_summaries (struct cgraph_edge *inlined_edge,\n \t\t\t      operand_map, offset_map, possible_truths,\n \t\t\t      toplev_predicate);\n     }\n-  for (e = node->indirect_calls; e; e = e->next_callee)\n+  for (e = node->indirect_calls; e; e = next)\n     {\n       struct inline_edge_summary *es = inline_edge_summary (e);\n       struct predicate p;\n+      next = e->next_callee;\n \n       remap_edge_change_prob (inlined_edge, e);\n       if (es->predicate)"}, {"sha": "135dfc03e9e05062b9adf256a836ccd6f17abf68", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21065cad0187cf31d5984b12ef73a9f78c229cb/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21065cad0187cf31d5984b12ef73a9f78c229cb/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a21065cad0187cf31d5984b12ef73a9f78c229cb", "patch": "@@ -1,3 +1,7 @@\n+2015-03-26  Jan Hubicka  <hubicka@ucw.cz>\n+\n+\t* gcc.c-torture/compile/20150327.c: New testcase.\n+\n 2015-03-26  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/65555"}, {"sha": "373ea6183c3c5b8ec918b2e3a82c80f18eb9bae8", "filename": "gcc/testsuite/gcc.c-torture/compile/20150327.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a21065cad0187cf31d5984b12ef73a9f78c229cb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20150327.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a21065cad0187cf31d5984b12ef73a9f78c229cb/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20150327.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20150327.c?ref=a21065cad0187cf31d5984b12ef73a9f78c229cb", "patch": "@@ -0,0 +1,11 @@\n+int a;\n+int (*b)(), (*c)();\n+int fn1(int p1) {\n+  if (a)\n+    return 0;\n+  if (p1) {\n+    c();\n+    b();\n+  }\n+}\n+void fn2() { fn1(0); }"}]}