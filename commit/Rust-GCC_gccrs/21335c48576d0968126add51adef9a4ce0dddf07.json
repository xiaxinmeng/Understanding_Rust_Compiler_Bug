{"sha": "21335c48576d0968126add51adef9a4ce0dddf07", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjEzMzVjNDg1NzZkMDk2ODEyNmFkZDUxYWRlZjlhNGNlMGRkZGYwNw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-17T00:15:03Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-17T00:15:03Z"}, "message": "Split update_cfg_for_uncondjump out of combine\n\nLater patches want to reuse combine's update_cfg_for_uncondjump,\nso this patch makes it a public cfgrtl.c function.\n\ngcc/\n\t* cfgrtl.h (update_cfg_for_uncondjump): Declare.\n\t* combine.c (update_cfg_for_uncondjump): Move to...\n\t* cfgrtl.c: ...here.", "tree": {"sha": "ce59eab22b31ef573526f7e9df9696120bbef94a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ce59eab22b31ef573526f7e9df9696120bbef94a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21335c48576d0968126add51adef9a4ce0dddf07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21335c48576d0968126add51adef9a4ce0dddf07", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21335c48576d0968126add51adef9a4ce0dddf07", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21335c48576d0968126add51adef9a4ce0dddf07/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4b520d88ee5b4cd446ef001c8fdddd9af8d681c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4b520d88ee5b4cd446ef001c8fdddd9af8d681c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4b520d88ee5b4cd446ef001c8fdddd9af8d681c"}], "stats": {"total": 84, "additions": 48, "deletions": 36}, "files": [{"sha": "79f38b7aa88b086502fc4059230f48dfa13531a5", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21335c48576d0968126add51adef9a4ce0dddf07/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21335c48576d0968126add51adef9a4ce0dddf07/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=21335c48576d0968126add51adef9a4ce0dddf07", "patch": "@@ -3419,6 +3419,53 @@ fixup_abnormal_edges (void)\n   return inserted;\n }\n \f\n+/* Delete the unconditional jump INSN and adjust the CFG correspondingly.\n+   Note that the INSN should be deleted *after* removing dead edges, so\n+   that the kept edge is the fallthrough edge for a (set (pc) (pc))\n+   but not for a (set (pc) (label_ref FOO)).  */\n+\n+void\n+update_cfg_for_uncondjump (rtx_insn *insn)\n+{\n+  basic_block bb = BLOCK_FOR_INSN (insn);\n+  gcc_assert (BB_END (bb) == insn);\n+\n+  purge_dead_edges (bb);\n+\n+  if (current_ir_type () != IR_RTL_CFGLAYOUT)\n+    {\n+      if (!find_fallthru_edge (bb->succs))\n+\t{\n+\t  auto barrier = next_nonnote_nondebug_insn (insn);\n+\t  if (!barrier || !BARRIER_P (barrier))\n+\t    emit_barrier_after (insn);\n+\t}\n+      return;\n+    }\n+\n+  delete_insn (insn);\n+  if (EDGE_COUNT (bb->succs) == 1)\n+    {\n+      rtx_insn *insn;\n+\n+      single_succ_edge (bb)->flags |= EDGE_FALLTHRU;\n+\n+      /* Remove barriers from the footer if there are any.  */\n+      for (insn = BB_FOOTER (bb); insn; insn = NEXT_INSN (insn))\n+\tif (BARRIER_P (insn))\n+\t  {\n+\t    if (PREV_INSN (insn))\n+\t      SET_NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n+\t    else\n+\t      BB_FOOTER (bb) = NEXT_INSN (insn);\n+\t    if (NEXT_INSN (insn))\n+\t      SET_PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n+\t  }\n+\telse if (LABEL_P (insn))\n+\t  break;\n+    }\n+}\n+\f\n /* Cut the insns from FIRST to LAST out of the insns stream.  */\n \n rtx_insn *"}, {"sha": "1c177d3a7e3f06d8cf2c72415346e97e9698a857", "filename": "gcc/cfgrtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21335c48576d0968126add51adef9a4ce0dddf07/gcc%2Fcfgrtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21335c48576d0968126add51adef9a4ce0dddf07/gcc%2Fcfgrtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.h?ref=21335c48576d0968126add51adef9a4ce0dddf07", "patch": "@@ -47,6 +47,7 @@ extern void fixup_partitions (void);\n extern bool purge_dead_edges (basic_block);\n extern bool purge_all_dead_edges (void);\n extern bool fixup_abnormal_edges (void);\n+extern void update_cfg_for_uncondjump (rtx_insn *);\n extern rtx_insn *unlink_insn_chain (rtx_insn *, rtx_insn *);\n extern void relink_block_chain (bool);\n extern rtx_insn *duplicate_insn_chain (rtx_insn *, rtx_insn *,"}, {"sha": "5864474e720c475003021c4b84f6b4487446edfa", "filename": "gcc/combine.c", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21335c48576d0968126add51adef9a4ce0dddf07/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21335c48576d0968126add51adef9a4ce0dddf07/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=21335c48576d0968126add51adef9a4ce0dddf07", "patch": "@@ -2531,42 +2531,6 @@ reg_subword_p (rtx x, rtx reg)\n \t && GET_MODE_CLASS (GET_MODE (x)) == MODE_INT;\n }\n \n-/* Delete the unconditional jump INSN and adjust the CFG correspondingly.\n-   Note that the INSN should be deleted *after* removing dead edges, so\n-   that the kept edge is the fallthrough edge for a (set (pc) (pc))\n-   but not for a (set (pc) (label_ref FOO)).  */\n-\n-static void\n-update_cfg_for_uncondjump (rtx_insn *insn)\n-{\n-  basic_block bb = BLOCK_FOR_INSN (insn);\n-  gcc_assert (BB_END (bb) == insn);\n-\n-  purge_dead_edges (bb);\n-\n-  delete_insn (insn);\n-  if (EDGE_COUNT (bb->succs) == 1)\n-    {\n-      rtx_insn *insn;\n-\n-      single_succ_edge (bb)->flags |= EDGE_FALLTHRU;\n-\n-      /* Remove barriers from the footer if there are any.  */\n-      for (insn = BB_FOOTER (bb); insn; insn = NEXT_INSN (insn))\n-\tif (BARRIER_P (insn))\n-\t  {\n-\t    if (PREV_INSN (insn))\n-\t      SET_NEXT_INSN (PREV_INSN (insn)) = NEXT_INSN (insn);\n-\t    else\n-\t      BB_FOOTER (bb) = NEXT_INSN (insn);\n-\t    if (NEXT_INSN (insn))\n-\t      SET_PREV_INSN (NEXT_INSN (insn)) = PREV_INSN (insn);\n-\t  }\n-\telse if (LABEL_P (insn))\n-\t  break;\n-    }\n-}\n-\n /* Return whether PAT is a PARALLEL of exactly N register SETs followed\n    by an arbitrary number of CLOBBERs.  */\n static bool"}]}