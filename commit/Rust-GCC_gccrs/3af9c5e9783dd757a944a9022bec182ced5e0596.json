{"sha": "3af9c5e9783dd757a944a9022bec182ced5e0596", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FmOWM1ZTk3ODNkZDc1N2E5NDRhOTAyMmJlYzE4MmNlZDVlMDU5Ng==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-03-06T13:41:46Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-03-06T13:41:46Z"}, "message": "re PR c/60197 (ICE with _Cilk_spawn in expression)\n\n\tPR c/60197\nc-family/\n\t* cilk.c (contains_cilk_spawn_stmt): New function.\n\t(contains_cilk_spawn_stmt_walker): Likewise.\n\t(recognize_spawn): Give error on invalid use of _Cilk_spawn.\n\t* c-common.h (contains_cilk_spawn_stmt): Add declaration.\nc/\n\t* c-typeck.c (c_finish_return): Call contains_cilk_spawn_stmt instead\n\tof checking tree code.\ncp/\n\t* typeck.c (check_return_expr): Call contains_cilk_spawn_stmt instead\n\tof checking tree code.\ntestsuite/\n\t* c-c++-common/cilk-plus/CK/pr60197.c: New test.\n\t* c-c++-common/cilk-plus/CK/pr60197-2.c: New test.\n\nFrom-SVN: r208382", "tree": {"sha": "2d668c3e9bd8ebb785bab61a9adb5b1d97776036", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d668c3e9bd8ebb785bab61a9adb5b1d97776036"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3af9c5e9783dd757a944a9022bec182ced5e0596", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af9c5e9783dd757a944a9022bec182ced5e0596", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3af9c5e9783dd757a944a9022bec182ced5e0596", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3af9c5e9783dd757a944a9022bec182ced5e0596/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "227a7dc8fb3b72780e5127d85306381b8ff3e81e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/227a7dc8fb3b72780e5127d85306381b8ff3e81e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/227a7dc8fb3b72780e5127d85306381b8ff3e81e"}], "stats": {"total": 157, "additions": 155, "deletions": 2}, "files": [{"sha": "0c22f894aef6196aebb23e8a96ef286ced9ad6d7", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=3af9c5e9783dd757a944a9022bec182ced5e0596", "patch": "@@ -1,3 +1,11 @@\n+2014-03-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60197\n+\t* cilk.c (contains_cilk_spawn_stmt): New function.\n+\t(contains_cilk_spawn_stmt_walker): Likewise.\n+\t(recognize_spawn): Give error on invalid use of _Cilk_spawn.\n+\t* c-common.h (contains_cilk_spawn_stmt): Add declaration.\n+\n 2014-03-03  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-pragma.c (c_pp_lookup_pragma): Handle PRAGMA_CILK_SIMD."}, {"sha": "1099b108950822e11a50e6f3c41eebd9066323ae", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=3af9c5e9783dd757a944a9022bec182ced5e0596", "patch": "@@ -1389,4 +1389,5 @@ extern tree make_cilk_frame (tree);\n extern tree create_cilk_function_exit (tree, bool, bool);\n extern tree cilk_install_body_pedigree_operations (tree);\n extern void cilk_outline (tree, tree *, void *);\n+extern bool contains_cilk_spawn_stmt (tree);\n #endif /* ! GCC_C_COMMON_H */"}, {"sha": "6a7bf4f1efa2f626815937e1e73b81c9bd22f7a4", "filename": "gcc/c-family/cilk.c", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fc-family%2Fcilk.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fc-family%2Fcilk.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fcilk.c?ref=3af9c5e9783dd757a944a9022bec182ced5e0596", "patch": "@@ -235,6 +235,9 @@ recognize_spawn (tree exp, tree *exp0)\n       walk_tree (exp0, unwrap_cilk_spawn_stmt, NULL, NULL);\n       spawn_found = true;\n     }\n+  /* _Cilk_spawn can't be wrapped in expression such as PLUS_EXPR.  */\n+  else if (contains_cilk_spawn_stmt (exp))\n+    error (\"invalid use of %<_Cilk_spawn%>\");\n   return spawn_found;\n }\n \n@@ -1292,3 +1295,25 @@ build_cilk_sync (void)\n   TREE_SIDE_EFFECTS (sync) = 1;\n   return sync;\n }\n+\n+/* Helper for contains_cilk_spawn_stmt, callback for walk_tree.  Return\n+   non-null tree if TP contains CILK_SPAWN_STMT.  */\n+\n+static tree\n+contains_cilk_spawn_stmt_walker (tree *tp, int *, void *)\n+{\n+  if (TREE_CODE (*tp) == CILK_SPAWN_STMT)\n+    return *tp;\n+  else\n+    return NULL_TREE;\n+}\n+\n+/* Returns true if EXPR or any of its subtrees contain CILK_SPAWN_STMT\n+   node.  */\n+\n+bool\n+contains_cilk_spawn_stmt (tree expr)\n+{\n+  return walk_tree (&expr, contains_cilk_spawn_stmt_walker, NULL, NULL)\n+\t != NULL_TREE;\n+}"}, {"sha": "e9d25d5b86660e0cf2f571748525403b669674fb", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=3af9c5e9783dd757a944a9022bec182ced5e0596", "patch": "@@ -1,3 +1,9 @@\n+2014-03-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60197\n+\t* c-typeck.c (c_finish_return): Call contains_cilk_spawn_stmt instead\n+\tof checking tree code.\n+\n 2014-02-19  Prathamesh Kulkarni  <bilbotheelffriend@gmail.com>\n \n \t* c-parser.c (c_parser_declspecs): Replace call to error by error_at."}, {"sha": "7c4ba0eb2254422269ba99c92579046bb5946666", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=3af9c5e9783dd757a944a9022bec182ced5e0596", "patch": "@@ -9140,7 +9140,7 @@ c_finish_return (location_t loc, tree retval, tree origtype)\n \t  return error_mark_node;\n \t}\n     }\n-  if (flag_cilkplus && retval && TREE_CODE (retval) == CILK_SPAWN_STMT)\n+  if (flag_cilkplus && retval && contains_cilk_spawn_stmt (retval))\n     {\n       error_at (loc, \"use of %<_Cilk_spawn%> in a return statement is not \"\n \t\t\"allowed\");"}, {"sha": "4aa9c2b75118348f15549eeae4f8428aaa8935fd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=3af9c5e9783dd757a944a9022bec182ced5e0596", "patch": "@@ -1,3 +1,9 @@\n+2014-03-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60197\n+\t* typeck.c (check_return_expr): Call contains_cilk_spawn_stmt instead\n+\tof checking tree code.\n+\n 2014-03-06  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* parser.c (cp_lexer_set_source_position): New."}, {"sha": "ae2e5038e18aa95b1b75e3211768a8f2c96e12a7", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=3af9c5e9783dd757a944a9022bec182ced5e0596", "patch": "@@ -8332,7 +8332,7 @@ check_return_expr (tree retval, bool *no_warning)\n \n   *no_warning = false;\n \n-  if (flag_cilkplus && retval && TREE_CODE (retval) == CILK_SPAWN_STMT)\n+  if (flag_cilkplus && retval && contains_cilk_spawn_stmt (retval))\n     {\n       error_at (EXPR_LOCATION (retval), \"use of %<_Cilk_spawn%> in a return \"\n \t\t\"statement is not allowed\");"}, {"sha": "779fa96a737ae3796d7a60ee50e976b152de4b36", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=3af9c5e9783dd757a944a9022bec182ced5e0596", "patch": "@@ -1,3 +1,9 @@\n+2014-03-06  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/60197\n+\t* c-c++-common/cilk-plus/CK/pr60197.c: New test.\n+\t* c-c++-common/cilk-plus/CK/pr60197-2.c: New test.\n+\n 2014-03-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/58595"}, {"sha": "1e5ca00a40b374fcae1e69179287d6bb5d1e8a33", "filename": "gcc/testsuite/c-c++-common/cilk-plus/CK/pr60197-2.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fpr60197-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fpr60197-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fpr60197-2.c?ref=3af9c5e9783dd757a944a9022bec182ced5e0596", "patch": "@@ -0,0 +1,35 @@\n+/* PR c/60197 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus\" } */\n+\n+extern int foo (void);\n+\n+int\n+fn1 (void)\n+{\n+  int i;\n+  i = (_Cilk_spawn foo ()) + 1; /* { dg-error \"invalid use of\" } */\n+  return i;\n+}\n+\n+int\n+fn2 (void)\n+{\n+  int i = (_Cilk_spawn foo ()) + 1; /* { dg-error \"invalid use of\" } */\n+  return i;\n+}\n+\n+int\n+fn3 (int j, int k, int l)\n+{\n+  int i = (((((_Cilk_spawn foo ()) + 1) - l) * k) / j); /* { dg-error \"invalid use of\" } */\n+  return i;\n+}\n+\n+int\n+fn4 (int j, int k, int l)\n+{\n+  int i;\n+  i = (((((_Cilk_spawn foo ()) + 1) - l) * k) / j); /* { dg-error \"invalid use of\" } */\n+  return i;\n+}"}, {"sha": "2b47d1efb7dc4d2b0594ca120f51e97f4fdf40f2", "filename": "gcc/testsuite/c-c++-common/cilk-plus/CK/pr60197.c", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fpr60197.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3af9c5e9783dd757a944a9022bec182ced5e0596/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fpr60197.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fcilk-plus%2FCK%2Fpr60197.c?ref=3af9c5e9783dd757a944a9022bec182ced5e0596", "patch": "@@ -0,0 +1,66 @@\n+/* PR c/60197 */\n+/* { dg-do compile } */\n+/* { dg-options \"-fcilkplus\" } */\n+\n+extern int foo (void);\n+extern int bar (int);\n+\n+int\n+fn1 (void)\n+{\n+  return (_Cilk_spawn foo ()) * 2; /* { dg-error \"in a return statement is not allowed\" } */\n+}\n+\n+int\n+fn2 (void)\n+{\n+  return (_Cilk_spawn foo ()) > 2; /* { dg-error \"in a return statement is not allowed\" } */\n+}\n+\n+int\n+fn3 (int i, int j, int k)\n+{\n+  return ((((((_Cilk_spawn foo () + i) - j) * k) / j) | i) ^ k) ; /* { dg-error \"in a return statement is not allowed\" } */\n+}\n+\n+int\n+fn4 (int i, int j, int k)\n+{\n+  return (((((i - _Cilk_spawn foo ()) * k) / j) | i) ^ k); /* { dg-error \"in a return statement is not allowed\" } */\n+}\n+\n+int\n+fn5 (void)\n+{\n+  return _Cilk_spawn foo (); /* { dg-error \"in a return statement is not allowed\" } */\n+}\n+\n+int\n+fn6 (void)\n+{\n+  return _Cilk_spawn foo () + _Cilk_spawn foo (); /* { dg-error \"in a return statement is not allowed\" } */\n+}\n+\n+int\n+fn7 (void)\n+{\n+  return 5 % _Cilk_spawn foo (); /* { dg-error \"in a return statement is not allowed\" } */\n+}\n+\n+int\n+fn8 (void)\n+{\n+  return !_Cilk_spawn foo (); /* { dg-error \"in a return statement is not allowed\" } */\n+}\n+\n+int\n+fn9 (void)\n+{\n+  return foo () && _Cilk_spawn foo (); /* { dg-error \"in a return statement is not allowed\" } */\n+}\n+\n+int\n+fn10 (void)\n+{\n+  return bar (_Cilk_spawn foo ()); /* { dg-error \"in a return statement is not allowed\" } */\n+}"}]}