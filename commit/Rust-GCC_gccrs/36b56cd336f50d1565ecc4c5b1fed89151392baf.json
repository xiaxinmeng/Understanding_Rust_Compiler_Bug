{"sha": "36b56cd336f50d1565ecc4c5b1fed89151392baf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZiNTZjZDMzNmY1MGQxNTY1ZWNjNGM1YjFmZWQ4OTE1MTM5MmJhZg==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2018-11-07T10:13:15Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2018-11-07T10:13:15Z"}, "message": "tree.c (free_lang_data_in_type): Add fld parameter; simplify return and parameter types of function and method types.\n\n\n\t* tree.c (free_lang_data_in_type): Add fld parameter; simplify\n\treturn and parameter types of function and method types.\n\t(free_lang_data_in_cgraph): Update.\n\nFrom-SVN: r265870", "tree": {"sha": "b47e3ad7ac8df205c1bec6823a750a2db425989a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b47e3ad7ac8df205c1bec6823a750a2db425989a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36b56cd336f50d1565ecc4c5b1fed89151392baf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b56cd336f50d1565ecc4c5b1fed89151392baf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36b56cd336f50d1565ecc4c5b1fed89151392baf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36b56cd336f50d1565ecc4c5b1fed89151392baf/comments", "author": null, "committer": null, "parents": [{"sha": "907050e34f4d1b5471e738cf5a718a8c6f50e334", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/907050e34f4d1b5471e738cf5a718a8c6f50e334", "html_url": "https://github.com/Rust-GCC/gccrs/commit/907050e34f4d1b5471e738cf5a718a8c6f50e334"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "c0aae3a866b9c91ffd8fa0d09afd01a415c76a91", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b56cd336f50d1565ecc4c5b1fed89151392baf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b56cd336f50d1565ecc4c5b1fed89151392baf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=36b56cd336f50d1565ecc4c5b1fed89151392baf", "patch": "@@ -1,3 +1,9 @@\n+2018-11-07  Jan Hubicka  <jh@suse.cz>\n+\n+\t* tree.c (free_lang_data_in_type): Add fld parameter; simplify\n+\treturn and parameter types of function and method types.\n+\t(free_lang_data_in_cgraph): Update.\n+\n 2018-11-07  Martin Liska  <mliska@suse.cz>\n \n \tPR rtl-optimization/87868"}, {"sha": "65c1cf1efec1cfd9e23c5c7078593ab5e818b462", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b56cd336f50d1565ecc4c5b1fed89151392baf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b56cd336f50d1565ecc4c5b1fed89151392baf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=36b56cd336f50d1565ecc4c5b1fed89151392baf", "patch": "@@ -1,3 +1,7 @@\n+2018-11-07  Jan Hubicka  <jh@suse.cz>\n+\n+\t* g++.dg/lto/odr-1_1.C: Fix template.\n+\n 2018-11-07  Chenghua Xu  <paul.hua.gm@gmail.com>\n \n \t* gcc.target/mips/loongson-ctz.c: New test."}, {"sha": "5cd6f6c0ebc3cb79fd042d21d07bdd91d5928e57", "filename": "gcc/testsuite/g++.dg/lto/odr-1_1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b56cd336f50d1565ecc4c5b1fed89151392baf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-1_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b56cd336f50d1565ecc4c5b1fed89151392baf/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-1_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-1_1.C?ref=36b56cd336f50d1565ecc4c5b1fed89151392baf", "patch": "@@ -4,7 +4,7 @@ namespace {\n struct a {\n   struct b *ptr;\n };\n-void test(struct a *); // { dg-lto-warning \"6: 'test' violates the C\\\\+\\\\+ One Definition Rule\" }\n+void test(struct a *);\n int\n main(void)\n {"}, {"sha": "143608649c0904f6c035cb8d580772de51c3e9ca", "filename": "gcc/tree.c", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36b56cd336f50d1565ecc4c5b1fed89151392baf/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36b56cd336f50d1565ecc4c5b1fed89151392baf/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=36b56cd336f50d1565ecc4c5b1fed89151392baf", "patch": "@@ -5261,7 +5261,7 @@ free_lang_data_in_binfo (tree binfo)\n /* Reset all language specific information still present in TYPE.  */\n \n static void\n-free_lang_data_in_type (tree type)\n+free_lang_data_in_type (tree type, struct free_lang_data_d *fld)\n {\n   gcc_assert (TYPE_P (type));\n \n@@ -5280,13 +5280,15 @@ free_lang_data_in_type (tree type)\n \n   if (TREE_CODE (type) == FUNCTION_TYPE)\n     {\n+      TREE_TYPE (type) = fld_simplified_type (TREE_TYPE (type), fld);\n       /* Remove the const and volatile qualifiers from arguments.  The\n \t C++ front end removes them, but the C front end does not,\n \t leading to false ODR violation errors when merging two\n \t instances of the same function signature compiled by\n \t different front ends.  */\n       for (tree p = TYPE_ARG_TYPES (type); p; p = TREE_CHAIN (p))\n \t{\n+          TREE_VALUE (p) = fld_simplified_type (TREE_VALUE (p), fld);\n \t  tree arg_type = TREE_VALUE (p);\n \n \t  if (TYPE_READONLY (arg_type) || TYPE_VOLATILE (arg_type))\n@@ -5295,16 +5297,22 @@ free_lang_data_in_type (tree type)\n \t\t\t  & ~TYPE_QUAL_CONST\n \t\t\t  & ~TYPE_QUAL_VOLATILE;\n \t      TREE_VALUE (p) = build_qualified_type (arg_type, quals);\n-\t      free_lang_data_in_type (TREE_VALUE (p));\n+\t      free_lang_data_in_type (TREE_VALUE (p), fld);\n \t    }\n \t  /* C++ FE uses TREE_PURPOSE to store initial values.  */\n \t  TREE_PURPOSE (p) = NULL;\n \t}\n     }\n   else if (TREE_CODE (type) == METHOD_TYPE)\n-    for (tree p = TYPE_ARG_TYPES (type); p; p = TREE_CHAIN (p))\n-      /* C++ FE uses TREE_PURPOSE to store initial values.  */\n-      TREE_PURPOSE (p) = NULL;\n+    {\n+      TREE_TYPE (type) = fld_simplified_type (TREE_TYPE (type), fld);\n+      for (tree p = TYPE_ARG_TYPES (type); p; p = TREE_CHAIN (p))\n+\t{\n+\t  /* C++ FE uses TREE_PURPOSE to store initial values.  */\n+\t  TREE_VALUE (p) = fld_simplified_type (TREE_VALUE (p), fld);\n+\t  TREE_PURPOSE (p) = NULL;\n+\t}\n+    }\n   else if (RECORD_OR_UNION_TYPE_P (type))\n     {\n       /* Remove members that are not FIELD_DECLs from the field list\n@@ -5468,6 +5476,7 @@ free_lang_data_in_decl (tree decl, struct free_lang_data_d *fld)\n  if (TREE_CODE (decl) == FUNCTION_DECL)\n     {\n       struct cgraph_node *node;\n+      TREE_TYPE (decl) = fld_simplified_type (TREE_TYPE (decl), fld);\n       if (!(node = cgraph_node::get (decl))\n \t  || (!node->definition && !node->clones))\n \t{\n@@ -5985,7 +5994,7 @@ free_lang_data_in_cgraph (void)\n \n   /* Traverse every type found freeing its language data.  */\n   FOR_EACH_VEC_ELT (fld.types, i, t)\n-    free_lang_data_in_type (t);\n+    free_lang_data_in_type (t, &fld);\n   if (flag_checking)\n     {\n       FOR_EACH_VEC_ELT (fld.types, i, t)"}]}