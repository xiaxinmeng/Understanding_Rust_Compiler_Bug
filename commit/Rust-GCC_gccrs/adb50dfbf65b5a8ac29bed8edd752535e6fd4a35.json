{"sha": "adb50dfbf65b5a8ac29bed8edd752535e6fd4a35", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWRiNTBkZmJmNjViNWE4YWMyOWJlZDhlZGQ3NTI1MzVlNmZkNGEzNQ==", "commit": {"author": {"name": "Ville Voutilainen", "email": "ville.voutilainen@gmail.com", "date": "2014-06-02T20:47:55Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-06-02T20:47:55Z"}, "message": "re PR c++/59483 (A nested lambda fails to find a protected name with qualified name)\n\n\tPR c++/59483\n\tPR c++/61148\n\t* search.c (accessible_p): Use current_nonlambda_class_type.\n\t* semantics.c (check_accessibility_of_qualified_id): Likewise.\n\nFrom-SVN: r211147", "tree": {"sha": "5a5a4cf79999d2bd283fce025695d4e129b69b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a5a4cf79999d2bd283fce025695d4e129b69b59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35/comments", "author": {"login": "villevoutilainen", "id": 963599, "node_id": "MDQ6VXNlcjk2MzU5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/963599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/villevoutilainen", "html_url": "https://github.com/villevoutilainen", "followers_url": "https://api.github.com/users/villevoutilainen/followers", "following_url": "https://api.github.com/users/villevoutilainen/following{/other_user}", "gists_url": "https://api.github.com/users/villevoutilainen/gists{/gist_id}", "starred_url": "https://api.github.com/users/villevoutilainen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/villevoutilainen/subscriptions", "organizations_url": "https://api.github.com/users/villevoutilainen/orgs", "repos_url": "https://api.github.com/users/villevoutilainen/repos", "events_url": "https://api.github.com/users/villevoutilainen/events{/privacy}", "received_events_url": "https://api.github.com/users/villevoutilainen/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b2b72791eb7506db1e6cdd17f1201dcd9e96e64"}], "stats": {"total": 82, "additions": 78, "deletions": 4}, "files": [{"sha": "9b439a964b5d3038ebaf1850468181af029da9a3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=adb50dfbf65b5a8ac29bed8edd752535e6fd4a35", "patch": "@@ -1,3 +1,10 @@\n+2014-06-02  Ville Voutilainen  <ville.voutilainen@gmail.com>\n+\n+\tPR c++/59483\n+\tPR c++/61148\n+\t* search.c (accessible_p): Use current_nonlambda_class_type.\n+\t* semantics.c (check_accessibility_of_qualified_id): Likewise.\n+\n 2014-06-02  Andrew MacLeod  <amacleod@redhat.com>\n \n \t* decl.c: Include builtins.h."}, {"sha": "424b26cd3e1b059b34e5941776411a5d2ab6cea1", "filename": "gcc/cp/search.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35/gcc%2Fcp%2Fsearch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35/gcc%2Fcp%2Fsearch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsearch.c?ref=adb50dfbf65b5a8ac29bed8edd752535e6fd4a35", "patch": "@@ -917,9 +917,11 @@ accessible_p (tree type, tree decl, bool consider_local_p)\n       /* Figure out where the reference is occurring.  Check to see if\n \t DECL is private or protected in this scope, since that will\n \t determine whether protected access is allowed.  */\n-      if (current_class_type)\n+      tree ct = current_nonlambda_class_type ();\n+      if (ct)\n \tprotected_ok = protected_accessible_p (decl,\n-\t\t\t\t\t       current_class_type, binfo);\n+\t\t\t\t\t       ct,\n+\t\t\t\t\t       binfo);\n \n       /* Now, loop through the classes of which we are a friend.  */\n       if (!protected_ok)"}, {"sha": "21920b41ca56285e7379daae344af3a0d715c541", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=adb50dfbf65b5a8ac29bed8edd752535e6fd4a35", "patch": "@@ -1836,10 +1836,11 @@ check_accessibility_of_qualified_id (tree decl,\n       /* If the reference is to a non-static member of the\n \t current class, treat it as if it were referenced through\n \t `this'.  */\n+      tree ct;\n       if (DECL_NONSTATIC_MEMBER_P (decl)\n \t  && current_class_ptr\n-\t  && DERIVED_FROM_P (scope, current_class_type))\n-\tqualifying_type = current_class_type;\n+\t  && DERIVED_FROM_P (scope, ct = current_nonlambda_class_type ()))\n+\tqualifying_type = ct;\n       /* Otherwise, use the type indicated by the\n \t nested-name-specifier.  */\n       else"}, {"sha": "b5b06d2c8139bb2f12245653b773cd8f3343e02b", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-59483.C", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-59483.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-59483.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-59483.C?ref=adb50dfbf65b5a8ac29bed8edd752535e6fd4a35", "patch": "@@ -0,0 +1,31 @@\n+// PR c++/59483\n+// { dg-do compile { target c++11 } }\n+\n+struct X\n+{\n+protected:\n+  int i;\n+};\n+\n+struct Y : X\n+{\n+  Y()\n+  {\n+    [&]{ X::i = 3; }();\n+  }\n+};\n+\n+template <class T>\n+struct Y2 : T\n+{\n+  Y2()\n+  {\n+    [&]{ T::i = 3; }();\n+  }\n+};\n+\n+int main()\n+{\n+  Y y;\n+  Y2<X> y2;\n+}"}, {"sha": "879030caa0d3a20b38a3cf9ef01fa382364ab00f", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-61148.C", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-61148.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/adb50dfbf65b5a8ac29bed8edd752535e6fd4a35/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-61148.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-61148.C?ref=adb50dfbf65b5a8ac29bed8edd752535e6fd4a35", "patch": "@@ -0,0 +1,33 @@\n+// PR c++/61148\n+// { dg-do compile { target c++11 } }\n+\n+class DB\n+{\n+protected:\n+  void foo() {};\n+};\n+\n+class DC : public DB\n+{\n+public:\n+  DC()\n+  {\n+    [this]() {DB::foo();}();\n+  };\n+};\n+\n+template <class T>\n+class DC2 : public T\n+{\n+public:\n+  DC2()\n+  {\n+    [this]() {T::foo();}();\n+  };\n+};\n+\n+int main(void)\n+{\n+  DC x;\n+  DC2<DB> x2;\n+}"}]}