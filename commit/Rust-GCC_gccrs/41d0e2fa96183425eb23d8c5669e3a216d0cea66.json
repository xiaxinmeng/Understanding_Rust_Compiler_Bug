{"sha": "41d0e2fa96183425eb23d8c5669e3a216d0cea66", "node_id": "C_kwDOANBUbNoAKDQxZDBlMmZhOTYxODM0MjVlYjIzZDhjNTY2OWUzYTIxNmQwY2VhNjY", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-04T13:34:45Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-11-04T13:35:07Z"}, "message": "Add missing bound to impl-type Self", "tree": {"sha": "9fce8ac52d1c5f57ff771cefc13fe1282035a690", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9fce8ac52d1c5f57ff771cefc13fe1282035a690"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41d0e2fa96183425eb23d8c5669e3a216d0cea66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41d0e2fa96183425eb23d8c5669e3a216d0cea66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41d0e2fa96183425eb23d8c5669e3a216d0cea66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41d0e2fa96183425eb23d8c5669e3a216d0cea66/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3e884c3e9d02b182469abff0fa7531ec8325a5e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3e884c3e9d02b182469abff0fa7531ec8325a5e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3e884c3e9d02b182469abff0fa7531ec8325a5e"}], "stats": {"total": 24, "additions": 24, "deletions": 0}, "files": [{"sha": "706f649340fd8af32d78633e8d5ce4f1e0ae343e", "filename": "gcc/rust/typecheck/rust-hir-type-check-item.h", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41d0e2fa96183425eb23d8c5669e3a216d0cea66/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41d0e2fa96183425eb23d8c5669e3a216d0cea66/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Ftypecheck%2Frust-hir-type-check-item.h?ref=41d0e2fa96183425eb23d8c5669e3a216d0cea66", "patch": "@@ -70,12 +70,34 @@ class TypeCheckItem : public TypeCheckBase\n \t  }\n       }\n \n+    std::vector<TyTy::TypeBoundPredicate> specified_bounds;\n     TraitReference *trait_reference = &TraitReference::error_node ();\n     if (impl_block.has_trait_ref ())\n       {\n \tstd::unique_ptr<HIR::TypePath> &ref = impl_block.get_trait_ref ();\n \ttrait_reference = TraitResolver::Resolve (*ref.get ());\n \trust_assert (!trait_reference->is_error ());\n+\n+\t// setup the bound\n+\tTyTy::TypeBoundPredicate predicate (\n+\t  trait_reference->get_mappings ().get_defid (), ref->get_locus ());\n+\tauto &final_seg = ref->get_final_segment ();\n+\tif (final_seg->is_generic_segment ())\n+\t  {\n+\t    auto final_generic_seg\n+\t      = static_cast<HIR::TypePathSegmentGeneric *> (final_seg.get ());\n+\t    if (final_generic_seg->has_generic_args ())\n+\t      {\n+\t\tHIR::GenericArgs &generic_args\n+\t\t  = final_generic_seg->get_generic_args ();\n+\n+\t\t// this is applying generic arguments to a trait\n+\t\t// reference\n+\t\tpredicate.apply_generic_arguments (&generic_args);\n+\t      }\n+\t  }\n+\n+\tspecified_bounds.push_back (std::move (predicate));\n       }\n \n     TyTy::BaseType *self = nullptr;\n@@ -86,6 +108,8 @@ class TypeCheckItem : public TypeCheckBase\n \t\t       \"failed to resolve Self for ImplBlock\");\n \treturn;\n       }\n+    // inherit the bounds\n+    self->inherit_bounds (specified_bounds);\n \n     bool is_trait_impl_block = !trait_reference->is_error ();\n "}]}