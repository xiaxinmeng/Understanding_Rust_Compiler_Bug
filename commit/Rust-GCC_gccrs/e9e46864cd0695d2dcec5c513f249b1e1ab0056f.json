{"sha": "e9e46864cd0695d2dcec5c513f249b1e1ab0056f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTllNDY4NjRjZDA2OTVkMmRjZWM1YzUxM2YyNDliMWUxYWIwMDU2Zg==", "commit": {"author": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-09-19T08:07:01Z"}, "committer": {"name": "Roger Sayle", "email": "roger@nextmovesoftware.com", "date": "2021-09-19T08:07:01Z"}, "message": "PR middle-end/88173: More constant folding of NaN comparisons.\n\nThis patch tackles PR middle-end/88173 where the order of operands in\na comparison affects constant folding.  As diagnosed by Jason Merrill,\n\"match.pd handles these comparisons very differently\".  The history is\nthat the middle end, typically canonicalizes comparisons to place\nconstants on the right, but when a comparison contains two constants\nwe need to check/transform both constants, i.e. on both the left and the\nright.  Hence the added lines below duplicate for @0 the same transform\napplied a few lines above for @1.\n\nWhilst preparing the testcase, I noticed that this transformation is\nincorrectly disabled with -fsignaling-nans even when both operands are\nknown not be be signaling NaNs, so I've corrected that and added a\nsecond test case.  Unfortunately, c-c++-common/pr57371-4.c then starts\nfailing, as it doesn't distinguish QNaNs (which are quiet) from SNaNs\n(which signal), so this patch includes a minor tweak to the expected\nbehaviour for QNaNs in that existing test.\n\n2021-09-19  Roger Sayle <roger@nextmovesoftware.com>\n\ngcc/ChangeLog\n\tPR middle-end/88173\n\t* match.pd (cmp @0 REAL_CST@1): When @0 is also REAL_CST, apply\n\tthe same transformations as to @1.  For comparisons against NaN,\n\tdon't check HONOR_SNANS but confirm that neither operand is a\n\tsignaling NaN.\n\ngcc/testsuite/ChangeLog\n\tPR middle-end/88173\n\t* c-c++-common/pr57371-4.c: Tweak/correct test case for QNaNs.\n\t* g++.dg/pr88173-1.C: New test case.\n\t* g++.dg/pr88173-2.C: New test case.", "tree": {"sha": "0e6378f76d71bc4e4ca042a7f21d85f7df2f0b5d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0e6378f76d71bc4e4ca042a7f21d85f7df2f0b5d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e9e46864cd0695d2dcec5c513f249b1e1ab0056f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e46864cd0695d2dcec5c513f249b1e1ab0056f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e9e46864cd0695d2dcec5c513f249b1e1ab0056f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e9e46864cd0695d2dcec5c513f249b1e1ab0056f/comments", "author": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rogersayle", "id": 13512313, "node_id": "MDQ6VXNlcjEzNTEyMzEz", "avatar_url": "https://avatars.githubusercontent.com/u/13512313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rogersayle", "html_url": "https://github.com/rogersayle", "followers_url": "https://api.github.com/users/rogersayle/followers", "following_url": "https://api.github.com/users/rogersayle/following{/other_user}", "gists_url": "https://api.github.com/users/rogersayle/gists{/gist_id}", "starred_url": "https://api.github.com/users/rogersayle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rogersayle/subscriptions", "organizations_url": "https://api.github.com/users/rogersayle/orgs", "repos_url": "https://api.github.com/users/rogersayle/repos", "events_url": "https://api.github.com/users/rogersayle/events{/privacy}", "received_events_url": "https://api.github.com/users/rogersayle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69337e7495d09a1fc30442c9c3ade6318f1cf089", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69337e7495d09a1fc30442c9c3ade6318f1cf089", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69337e7495d09a1fc30442c9c3ade6318f1cf089"}], "stats": {"total": 39, "additions": 34, "deletions": 5}, "files": [{"sha": "a063a1577b5a2b422e660f1f7a2e51f782fdea1b", "filename": "gcc/match.pd", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e46864cd0695d2dcec5c513f249b1e1ab0056f/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e46864cd0695d2dcec5c513f249b1e1ab0056f/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=e9e46864cd0695d2dcec5c513f249b1e1ab0056f", "patch": "@@ -4482,9 +4482,20 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n    /* a CMP (-0) -> a CMP 0  */\n    (if (REAL_VALUE_MINUS_ZERO (TREE_REAL_CST (@1)))\n     (cmp @0 { build_real (TREE_TYPE (@1), dconst0); }))\n+   /* (-0) CMP b -> 0 CMP b.  */\n+   (if (TREE_CODE (@0) == REAL_CST\n+\t&& REAL_VALUE_MINUS_ZERO (TREE_REAL_CST (@0)))\n+    (cmp { build_real (TREE_TYPE (@0), dconst0); } @1))\n    /* x != NaN is always true, other ops are always false.  */\n    (if (REAL_VALUE_ISNAN (TREE_REAL_CST (@1))\n-\t&& ! HONOR_SNANS (@1))\n+\t&& !tree_expr_signaling_nan_p (@1)\n+\t&& !tree_expr_maybe_signaling_nan_p (@0))\n+    { constant_boolean_node (cmp == NE_EXPR, type); })\n+   /* NaN != y is always true, other ops are always false.  */\n+   (if (TREE_CODE (@0) == REAL_CST\n+\t&& REAL_VALUE_ISNAN (TREE_REAL_CST (@0))\n+        && !tree_expr_signaling_nan_p (@0)\n+        && !tree_expr_signaling_nan_p (@1))\n     { constant_boolean_node (cmp == NE_EXPR, type); })\n    /* Fold comparisons against infinity.  */\n    (if (REAL_VALUE_ISINF (TREE_REAL_CST (@1))"}, {"sha": "d938ecdd675c3eabea2fceb724525351e45b7f28", "filename": "gcc/testsuite/c-c++-common/pr57371-4.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e46864cd0695d2dcec5c513f249b1e1ab0056f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr57371-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e46864cd0695d2dcec5c513f249b1e1ab0056f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr57371-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fpr57371-4.c?ref=e9e46864cd0695d2dcec5c513f249b1e1ab0056f", "patch": "@@ -13,25 +13,25 @@ void nonfinite(unsigned short x) {\n   {\n     volatile int nonfinite_1;\n     nonfinite_1 = (float) x > QNAN;\n-    /* { dg-final { scan-tree-dump \"nonfinite_1 = \\\\(float\\\\)\" \"original\" } } */\n+    /* { dg-final { scan-tree-dump \"nonfinite_1 = 0\" \"original\" } } */\n   }\n \n   {\n     volatile int nonfinite_2;\n     nonfinite_2 = (float) x >= QNAN;\n-    /* { dg-final { scan-tree-dump \"nonfinite_2 = \\\\(float\\\\)\" \"original\" } } */\n+    /* { dg-final { scan-tree-dump \"nonfinite_2 = 0\" \"original\" } } */\n   }\n \n   {\n     volatile int nonfinite_3;\n     nonfinite_3 = (float) x < QNAN;\n-    /* { dg-final { scan-tree-dump \"nonfinite_3 = \\\\(float\\\\)\" \"original\" } } */\n+    /* { dg-final { scan-tree-dump \"nonfinite_3 = 0\" \"original\" } } */\n   }\n \n   {\n     volatile int nonfinite_4;\n     nonfinite_4 = (float) x <= QNAN;\n-    /* { dg-final { scan-tree-dump \"nonfinite_4 = \\\\(float\\\\)\" \"original\" } } */\n+    /* { dg-final { scan-tree-dump \"nonfinite_4 = 0\" \"original\" } } */\n   }\n \n   {"}, {"sha": "08fcf97ff16ec70924cffdd6d07a81132e93405f", "filename": "gcc/testsuite/g++.dg/pr88173-1.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e46864cd0695d2dcec5c513f249b1e1ab0056f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr88173-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e46864cd0695d2dcec5c513f249b1e1ab0056f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr88173-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr88173-1.C?ref=e9e46864cd0695d2dcec5c513f249b1e1ab0056f", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -std=c++11\" } */\n+\n+#define big __builtin_huge_val()\n+#define nan __builtin_nan(\"\")\n+\n+constexpr bool b1 = big > nan;\n+constexpr bool b2 = nan < big;\n+"}, {"sha": "aa7d7849913cdfed389c89588c078bdc8864e42d", "filename": "gcc/testsuite/g++.dg/pr88173-2.C", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e9e46864cd0695d2dcec5c513f249b1e1ab0056f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr88173-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e9e46864cd0695d2dcec5c513f249b1e1ab0056f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr88173-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fpr88173-2.C?ref=e9e46864cd0695d2dcec5c513f249b1e1ab0056f", "patch": "@@ -0,0 +1,9 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fsignaling-nans -std=c++11\" } */\n+\n+#define big __builtin_huge_val()\n+#define nan __builtin_nan(\"\")\n+\n+constexpr bool b1 = big > nan;\n+constexpr bool b2 = nan < big;\n+"}]}