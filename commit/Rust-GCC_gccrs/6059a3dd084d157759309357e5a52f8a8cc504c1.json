{"sha": "6059a3dd084d157759309357e5a52f8a8cc504c1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjA1OWEzZGQwODRkMTU3NzU5MzA5MzU3ZTVhNTJmOGE4Y2M1MDRjMQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-17T00:15:06Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2020-12-17T00:15:06Z"}, "message": "recog: Add a validate_change_xveclen function\n\nA later patch wants to be able to use the validate_change machinery\nto reduce the XVECLEN of a PARALLEL.  This should be more efficient\nthan allocating a separate PARALLEL at a possibly distant memory\nlocation, especially since the new PARALLEL would be garbage rtl if\nthe new pattern turns out not to match.  Combine already pulls this\ntrick with SUBST_INT.\n\nThis patch adds a general helper for doing that.\n\ngcc/\n\t* recog.h (validate_change_xveclen): Declare.\n\t* recog.c (change_t::old_len): New field.\n\t(validate_change_1): Add a new_len parameter.  Conditionally\n\treplace the XVECLEN of an rtx, avoiding single-element PARALLELs.\n\t(validate_change_xveclen): New function.\n\t(cancel_changes): Undo changes made by validate_change_xveclen.", "tree": {"sha": "995df859e09f7f248c362584f2e76cd62bcb11c4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/995df859e09f7f248c362584f2e76cd62bcb11c4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6059a3dd084d157759309357e5a52f8a8cc504c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6059a3dd084d157759309357e5a52f8a8cc504c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6059a3dd084d157759309357e5a52f8a8cc504c1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6059a3dd084d157759309357e5a52f8a8cc504c1/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f48b51496d08de2aabc5ed1deb45e5517333662c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f48b51496d08de2aabc5ed1deb45e5517333662c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f48b51496d08de2aabc5ed1deb45e5517333662c"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "65125b8f0d17e3738fa2af89cb77d412b489af07", "filename": "gcc/recog.c", "status": "modified", "additions": 35, "deletions": 6, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6059a3dd084d157759309357e5a52f8a8cc504c1/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6059a3dd084d157759309357e5a52f8a8cc504c1/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=6059a3dd084d157759309357e5a52f8a8cc504c1", "patch": "@@ -183,6 +183,7 @@ struct change_t\n {\n   rtx object;\n   int old_code;\n+  int old_len;\n   bool unshare;\n   rtx *loc;\n   rtx old;\n@@ -194,8 +195,10 @@ static int changes_allocated;\n static int num_changes = 0;\n \n /* Validate a proposed change to OBJECT.  LOC is the location in the rtl\n-   at which NEW_RTX will be placed.  If OBJECT is zero, no validation is done,\n-   the change is simply made.\n+   at which NEW_RTX will be placed.  If NEW_LEN is >= 0, XVECLEN (NEW_RTX, 0)\n+   will also be changed to NEW_LEN, which is no greater than the current\n+   XVECLEN.  If OBJECT is zero, no validation is done, the change is\n+   simply made.\n \n    Two types of objects are supported:  If OBJECT is a MEM, memory_address_p\n    will be called with the address and mode as parameters.  If OBJECT is\n@@ -212,14 +215,25 @@ static int num_changes = 0;\n    Otherwise, perform the change and return 1.  */\n \n static bool\n-validate_change_1 (rtx object, rtx *loc, rtx new_rtx, bool in_group, bool unshare)\n+validate_change_1 (rtx object, rtx *loc, rtx new_rtx, bool in_group,\n+\t\t   bool unshare, int new_len = -1)\n {\n   rtx old = *loc;\n \n-  if (old == new_rtx || rtx_equal_p (old, new_rtx))\n+  /* Single-element parallels aren't valid and won't match anything.\n+     Replace them with the single element.  */\n+  if (new_len == 1 && GET_CODE (new_rtx) == PARALLEL)\n+    {\n+      new_rtx = XVECEXP (new_rtx, 0, 0);\n+      new_len = -1;\n+    }\n+\n+  if ((old == new_rtx || rtx_equal_p (old, new_rtx))\n+      && (new_len < 0 || XVECLEN (new_rtx, 0) == new_len))\n     return 1;\n \n-  gcc_assert (in_group != 0 || num_changes == 0);\n+  gcc_assert ((in_group != 0 || num_changes == 0)\n+\t      && (new_len < 0 || new_rtx == *loc));\n \n   *loc = new_rtx;\n \n@@ -239,8 +253,12 @@ validate_change_1 (rtx object, rtx *loc, rtx new_rtx, bool in_group, bool unshar\n   changes[num_changes].object = object;\n   changes[num_changes].loc = loc;\n   changes[num_changes].old = old;\n+  changes[num_changes].old_len = (new_len >= 0 ? XVECLEN (new_rtx, 0) : -1);\n   changes[num_changes].unshare = unshare;\n \n+  if (new_len >= 0)\n+    XVECLEN (new_rtx, 0) = new_len;\n+\n   if (object && !MEM_P (object))\n     {\n       /* Set INSN_CODE to force rerecognition of insn.  Save old code in\n@@ -278,6 +296,14 @@ validate_unshare_change (rtx object, rtx *loc, rtx new_rtx, bool in_group)\n   return validate_change_1 (object, loc, new_rtx, in_group, true);\n }\n \n+/* Change XVECLEN (*LOC, 0) to NEW_LEN.  OBJECT, IN_GROUP and the return\n+   value are as for validate_change_1.  */\n+\n+bool\n+validate_change_xveclen (rtx object, rtx *loc, int new_len, bool in_group)\n+{\n+  return validate_change_1 (object, loc, *loc, in_group, false, new_len);\n+}\n \n /* Keep X canonicalized if some changes have made it non-canonical; only\n    modifies the operands of X, not (for example) its code.  Simplifications\n@@ -541,7 +567,10 @@ cancel_changes (int num)\n      they were made.  */\n   for (i = num_changes - 1; i >= num; i--)\n     {\n-      *changes[i].loc = changes[i].old;\n+      if (changes[i].old_len >= 0)\n+\tXVECLEN (*changes[i].loc, 0) = changes[i].old_len;\n+      else\n+\t*changes[i].loc = changes[i].old;\n       if (changes[i].object && !MEM_P (changes[i].object))\n \tINSN_CODE (changes[i].object) = changes[i].old_code;\n     }"}, {"sha": "e152e2bb59114d529b48b55926192306fc10f564", "filename": "gcc/recog.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6059a3dd084d157759309357e5a52f8a8cc504c1/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6059a3dd084d157759309357e5a52f8a8cc504c1/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=6059a3dd084d157759309357e5a52f8a8cc504c1", "patch": "@@ -88,6 +88,7 @@ extern int check_asm_operands (rtx);\n extern int asm_operand_ok (rtx, const char *, const char **);\n extern bool validate_change (rtx, rtx *, rtx, bool);\n extern bool validate_unshare_change (rtx, rtx *, rtx, bool);\n+extern bool validate_change_xveclen (rtx, rtx *, int, bool);\n extern bool canonicalize_change_group (rtx_insn *insn, rtx x);\n extern int insn_invalid_p (rtx_insn *, bool);\n extern int verify_changes (int);"}]}