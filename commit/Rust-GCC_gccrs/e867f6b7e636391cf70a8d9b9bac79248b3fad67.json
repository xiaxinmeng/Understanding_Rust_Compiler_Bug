{"sha": "e867f6b7e636391cf70a8d9b9bac79248b3fad67", "node_id": "C_kwDOANBUbNoAKGU4NjdmNmI3ZTYzNjM5MWNmNzBhOGQ5YjliYWM3OTI0OGIzZmFkNjc", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-13T01:13:36Z"}, "committer": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2022-10-13T01:13:36Z"}, "message": "c: Do not use *_IS_IEC_60559 == 2\n\nA late change for C2x (addressing comments from the second round of\neditorial review before the CD ballot, postdating the most recent\npublic working draft) removed the value 2 for *_IS_IEC_60559 (a new\n<float.h> macro added in C2x).  Adjust the implementation accordingly\nnot to use this value.\n\nBootstrapped with no regressions for x86_64-pc-linux-gnu.\n\ngcc/\n\t* ginclude/float.h (FLT_IS_IEC_60559, DBL_IS_IEC_60559)\n\t(LDBL_IS_IEC_60559): Update comment.\n\ngcc/c-family/\n\t* c-cppbuiltin.cc (builtin_define_float_constants): Do not use\n\tvalue 2 for *_IS_IEC_60559.\n\ngcc/testsuite/\n\t* gcc.dg/c2x-float-10.c: Do not expect value 2 for *_IS_IEC_60559.", "tree": {"sha": "e98b0eb46994262c531cb9735c246ffd799c95a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e98b0eb46994262c531cb9735c246ffd799c95a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e867f6b7e636391cf70a8d9b9bac79248b3fad67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e867f6b7e636391cf70a8d9b9bac79248b3fad67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e867f6b7e636391cf70a8d9b9bac79248b3fad67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e867f6b7e636391cf70a8d9b9bac79248b3fad67/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "781f477a13ae14ca661018518f4d4a9e6881b0dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/781f477a13ae14ca661018518f4d4a9e6881b0dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/781f477a13ae14ca661018518f4d4a9e6881b0dd"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "2e39acb923943df971a58c9929e414f3f8e59c6c", "filename": "gcc/c-family/c-cppbuiltin.cc", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e867f6b7e636391cf70a8d9b9bac79248b3fad67/gcc%2Fc-family%2Fc-cppbuiltin.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e867f6b7e636391cf70a8d9b9bac79248b3fad67/gcc%2Fc-family%2Fc-cppbuiltin.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-cppbuiltin.cc?ref=e867f6b7e636391cf70a8d9b9bac79248b3fad67", "patch": "@@ -319,14 +319,10 @@ builtin_define_float_constants (const char *name_prefix,\n     }\n \n   /* For C2x *_IS_IEC_60559.  0 means the type does not match an IEC\n-     60559 format, 1 that it matches a format but not operations and 2\n-     that it matches a format and operations (but may not conform to\n-     Annex F; we take this as meaning exceptions and rounding modes\n-     need not be supported).  */\n+     60559 format, 1 that it matches a format but not necessarily\n+     operations.  */\n   sprintf (name, \"__%s_IS_IEC_60559__\", name_prefix);\n-  builtin_define_with_int_value (name,\n-\t\t\t\t (fmt->ieee_bits == 0\n-\t\t\t\t  ? 0 : (fmt->round_towards_zero ? 1 : 2)));\n+  builtin_define_with_int_value (name, fmt->ieee_bits != 0);\n }\n \n /* Define __DECx__ constants for TYPE using NAME_PREFIX and SUFFIX. */"}, {"sha": "bc5439d664faa5f0f6783ebd37c65fb9243e673d", "filename": "gcc/ginclude/float.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e867f6b7e636391cf70a8d9b9bac79248b3fad67/gcc%2Fginclude%2Ffloat.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e867f6b7e636391cf70a8d9b9bac79248b3fad67/gcc%2Fginclude%2Ffloat.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fginclude%2Ffloat.h?ref=e867f6b7e636391cf70a8d9b9bac79248b3fad67", "patch": "@@ -248,8 +248,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define DBL_NORM_MAX\t__DBL_NORM_MAX__\n #define LDBL_NORM_MAX\t__LDBL_NORM_MAX__\n \n-/* Whether each type matches an IEC 60559 format (1 for format, 2 for\n-   format and operations).  */\n+/* Whether each type matches an IEC 60559 format.  */\n #undef FLT_IS_IEC_60559\n #undef DBL_IS_IEC_60559\n #undef LDBL_IS_IEC_60559"}, {"sha": "7206921db876fa4ce0c81137a0bf08fa0a589e59", "filename": "gcc/testsuite/gcc.dg/c2x-float-10.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e867f6b7e636391cf70a8d9b9bac79248b3fad67/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e867f6b7e636391cf70a8d9b9bac79248b3fad67/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fc2x-float-10.c?ref=e867f6b7e636391cf70a8d9b9bac79248b3fad67", "patch": "@@ -21,13 +21,13 @@ _Static_assert (FLT_IS_IEC_60559 == 0);\n _Static_assert (DBL_IS_IEC_60559 == 0);\n _Static_assert (LDBL_IS_IEC_60559 == 0);\n #else\n-_Static_assert (FLT_IS_IEC_60559 == 2);\n-_Static_assert (DBL_IS_IEC_60559 == 2);\n+_Static_assert (FLT_IS_IEC_60559 == 1);\n+_Static_assert (DBL_IS_IEC_60559 == 1);\n #if LDBL_MANT_DIG == 106 || LDBL_MIN_EXP == -16382\n /* IBM long double and m68k extended format do not meet the definition\n    of an IEC 60559 interchange or extended format.  */\n _Static_assert (LDBL_IS_IEC_60559 == 0);\n #else\n-_Static_assert (LDBL_IS_IEC_60559 == 2);\n+_Static_assert (LDBL_IS_IEC_60559 == 1);\n #endif\n #endif"}]}