{"sha": "e564cf98de47f843a21e98c4cb18bf644f4bb604", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU2NGNmOThkZTQ3Zjg0M2EyMWU5OGM0Y2IxOGJmNjQ0ZjRiYjYwNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2019-09-19T19:39:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2019-09-19T19:39:22Z"}, "message": "Revert \"Fix conversions for built-in operator overloading candidates.\"\n\nThis reverts commit 948d5b831affef14a49f56804b01e3f1ba00cdb3.\n\nFrom-SVN: r275976", "tree": {"sha": "4c4b4057180f74196d9a66287a5fd5ea642e9800", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4c4b4057180f74196d9a66287a5fd5ea642e9800"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e564cf98de47f843a21e98c4cb18bf644f4bb604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e564cf98de47f843a21e98c4cb18bf644f4bb604", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e564cf98de47f843a21e98c4cb18bf644f4bb604", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e564cf98de47f843a21e98c4cb18bf644f4bb604/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b3c4d0dd309b7027f6e0f0b9a84829fcd53f7d64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b3c4d0dd309b7027f6e0f0b9a84829fcd53f7d64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b3c4d0dd309b7027f6e0f0b9a84829fcd53f7d64"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "de1677f614219abea4c83efff042bcd10c8a039f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e564cf98de47f843a21e98c4cb18bf644f4bb604/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e564cf98de47f843a21e98c4cb18bf644f4bb604/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=e564cf98de47f843a21e98c4cb18bf644f4bb604", "patch": "@@ -1,3 +1,11 @@\n+2019-09-19  Jason Merrill  <jason@redhat.com>\n+\n+\tRevert:\n+\t* call.c (build_new_op_1): Don't apply any standard conversions to\n+\tthe operands of a built-in operator.  Don't suppress conversions in\n+\tcp_build_unary_op.\n+\t* typeck.c (cp_build_unary_op): Do integral promotions for enums.\n+\n 2019-09-16  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \t* decl.c (grokdeclarator): Use declspecs->locations and"}, {"sha": "e613d8a006617c10f0167446d66dd2235a87e81a", "filename": "gcc/cp/call.c", "status": "modified", "additions": 26, "deletions": 25, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e564cf98de47f843a21e98c4cb18bf644f4bb604/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e564cf98de47f843a21e98c4cb18bf644f4bb604/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=e564cf98de47f843a21e98c4cb18bf644f4bb604", "patch": "@@ -6142,40 +6142,41 @@ build_new_op_1 (const op_location_t &loc, enum tree_code code, int flags,\n \t      break;\n \t    }\n \n-\t  /* \"If a built-in candidate is selected by overload resolution, the\n-\t     operands of class type are converted to the types of the\n-\t     corresponding parameters of the selected operation function,\n-\t     except that the second standard conversion sequence of a\n-\t     user-defined conversion sequence (12.3.3.1.2) is not applied.\"  */\n+\t  /* We need to strip any leading REF_BIND so that bitfields\n+\t     don't cause errors.  This should not remove any important\n+\t     conversions, because builtins don't apply to class\n+\t     objects directly.  */\n \t  conv = cand->convs[0];\n-\t  if (conv->user_conv_p)\n-\t    {\n-\t      while (conv->kind != ck_user)\n-\t\tconv = next_conversion (conv);\n-\t      arg1 = convert_like (conv, arg1, complain);\n-\t    }\n+\t  if (conv->kind == ck_ref_bind)\n+\t    conv = next_conversion (conv);\n+\t  arg1 = convert_like (conv, arg1, complain);\n \n \t  if (arg2)\n \t    {\n \t      conv = cand->convs[1];\n-\t      if (conv->user_conv_p)\n-\t\t{\n-\t\t  while (conv->kind != ck_user)\n-\t\t    conv = next_conversion (conv);\n-\t\t  arg2 = convert_like (conv, arg2, complain);\n-\t\t}\n-\t    }\n+\t      if (conv->kind == ck_ref_bind)\n+\t\tconv = next_conversion (conv);\n+\t      else\n+\t\targ2 = decay_conversion (arg2, complain);\n \n+\t      /* We need to call warn_logical_operator before\n+\t\t converting arg2 to a boolean_type, but after\n+\t\t decaying an enumerator to its value.  */\n+\t      if (complain & tf_warning)\n+\t\twarn_logical_operator (loc, code, boolean_type_node,\n+\t\t\t\t       code_orig_arg1, arg1,\n+\t\t\t\t       code_orig_arg2, arg2);\n+\n+\t      arg2 = convert_like (conv, arg2, complain);\n+\t    }\n \t  if (arg3)\n \t    {\n \t      conv = cand->convs[2];\n-\t      if (conv->user_conv_p)\n-\t\t{\n-\t\t  while (conv->kind != ck_user)\n-\t\t    conv = next_conversion (conv);\n-\t\t  arg3 = convert_like (conv, arg3, complain);\n-\t\t}\n+\t      if (conv->kind == ck_ref_bind)\n+\t\tconv = next_conversion (conv);\n+\t      convert_like (conv, arg3, complain);\n \t    }\n+\n \t}\n     }\n \n@@ -6243,7 +6244,7 @@ build_new_op_1 (const op_location_t &loc, enum tree_code code, int flags,\n     case REALPART_EXPR:\n     case IMAGPART_EXPR:\n     case ABS_EXPR:\n-      return cp_build_unary_op (code, arg1, false, complain);\n+      return cp_build_unary_op (code, arg1, candidates != 0, complain);\n \n     case ARRAY_REF:\n       return cp_build_array_ref (input_location, arg1, arg2, complain);"}, {"sha": "d85e5474df29f509a8fa6501909ae484d19dc503", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e564cf98de47f843a21e98c4cb18bf644f4bb604/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e564cf98de47f843a21e98c4cb18bf644f4bb604/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=e564cf98de47f843a21e98c4cb18bf644f4bb604", "patch": "@@ -6249,7 +6249,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \t\t       : _(\"wrong type argument to unary plus\"));\n \telse\n \t  {\n-\t    if (!noconvert && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (arg)))\n+\t    if (!noconvert && CP_INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n \t      arg = cp_perform_integral_promotions (arg, complain);\n \n \t    /* Make sure the result is not an lvalue: a unary plus or minus\n@@ -6274,7 +6274,7 @@ cp_build_unary_op (enum tree_code code, tree xarg, bool noconvert,\n \t\t\t\t\t\t   | WANT_VECTOR_OR_COMPLEX,\n \t\t\t\t\t\t   arg, true)))\n \terrstring = _(\"wrong type argument to bit-complement\");\n-      else if (!noconvert && INTEGRAL_OR_ENUMERATION_TYPE_P (TREE_TYPE (arg)))\n+      else if (!noconvert && CP_INTEGRAL_TYPE_P (TREE_TYPE (arg)))\n \t{\n \t  /* Warn if the expression has boolean value.  */\n \t  if (TREE_CODE (TREE_TYPE (arg)) == BOOLEAN_TYPE"}]}