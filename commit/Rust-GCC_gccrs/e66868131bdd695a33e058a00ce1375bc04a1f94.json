{"sha": "e66868131bdd695a33e058a00ce1375bc04a1f94", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTY2ODY4MTMxYmRkNjk1YTMzZTA1OGEwMGNlMTM3NWJjMDRhMWY5NA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-01-22T16:51:52Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-01-22T16:51:52Z"}, "message": "locale_facets.h: Move non-facet classes requiring <string> to...\n\n\n2003-01-22  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/locale_facets.h: Move non-facet classes requiring\n\t<string> to...\n\t* include/bits/locale_classes.h: New.\n\t* include/bits/Makefile.am (bits_headers_src): Add locale_classes.h.\n\t* include/bits/Makefile.in: Regenerate.\n\n\t* include/bits/locale_facets.tcc (__convert_from_v): Move to...\n\t* config/locale/gnu/c_locale.h: ...here.\n\t* config/locale/generic/c_locale.h: Same.\n\n\t* include/bits/locale_facets.tcc: Move declarations to...\n\t* include/bits/locale_facets.h: ...here.\n\t* include/bits/basic_ios.h: Tweak includes accordingly.\n\t* include/std/std_sstream.h: Add streambuf include.\n\t* include/std/std_fstream.h: Ditto.\n\t* include/std/std_locale.h: Add locale_classes.h include.\n\t* include/std/std_iosfwd.h: Tweak.\n\t* src/concept-inst.cc: Add iterator include.\n\n\t* config/linker-map.gnu: Specify __cxa functions, mark __cxa_dyn_*\n\tbits as unexported in the future.\n\nFrom-SVN: r61593", "tree": {"sha": "eadc7235c03a1ad0ef356f8440edd2a838c7c203", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/eadc7235c03a1ad0ef356f8440edd2a838c7c203"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e66868131bdd695a33e058a00ce1375bc04a1f94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66868131bdd695a33e058a00ce1375bc04a1f94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e66868131bdd695a33e058a00ce1375bc04a1f94", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e66868131bdd695a33e058a00ce1375bc04a1f94/comments", "author": null, "committer": null, "parents": [{"sha": "6b990f6b63181e0dad5e6b9d18bf62f51a3ebc4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6b990f6b63181e0dad5e6b9d18bf62f51a3ebc4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6b990f6b63181e0dad5e6b9d18bf62f51a3ebc4d"}], "stats": {"total": 917, "additions": 525, "deletions": 392}, "files": [{"sha": "fb4d7e24d2c9f41266918efd6cb365bad5b5465a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -1,3 +1,27 @@\n+2003-01-22  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/locale_facets.h: Move non-facet classes requiring\n+\t<string> to...  \n+\t* include/bits/locale_classes.h: New.  \n+\t* include/bits/Makefile.am (bits_headers_src): Add locale_classes.h.\n+\t* include/bits/Makefile.in: Regenerate.\n+\n+\t* include/bits/locale_facets.tcc (__convert_from_v): Move to...\n+\t* config/locale/gnu/c_locale.h: ...here.\n+\t* config/locale/generic/c_locale.h: Same.\n+\t\n+\t* include/bits/locale_facets.tcc: Move declarations to...\n+\t* include/bits/locale_facets.h: ...here.\n+\t* include/bits/basic_ios.h: Tweak includes accordingly.\n+\t* include/std/std_sstream.h: Add streambuf include.\n+\t* include/std/std_fstream.h: Ditto.\n+\t* include/std/std_locale.h: Add locale_classes.h include.\n+\t* include/std/std_iosfwd.h: Tweak.\n+\t* src/concept-inst.cc: Add iterator include.\n+\n+\t* config/linker-map.gnu: Specify __cxa functions, mark __cxa_dyn_*\n+\tbits as unexported in the future.\n+\t\n 2003-01-21  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tReshuffle 22_locale testsuite."}, {"sha": "8f48c9f7122ef51a0a46e260203fc131762cf9ff", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -268,24 +268,6 @@ CXXABI_1.2 {\n     __cxa_call_unexpected;\n     __cxa_current_exception_type;\n     __cxa_demangle;\n-    __cxa_dyn_string_append_char;\n-    __cxa_dyn_string_append_cstr;\n-    __cxa_dyn_string_append;\n-    __cxa_dyn_string_clear;\n-    __cxa_dyn_string_copy_cstr;\n-    __cxa_dyn_string_copy;\n-    __cxa_dyn_string_delete;\n-    __cxa_dyn_string_eq;\n-    __cxa_dyn_string_init;\n-    __cxa_dyn_string_insert_char;\n-    __cxa_dyn_string_insert_cstr;\n-    __cxa_dyn_string_insert;\n-    __cxa_dyn_string_new;\n-    __cxa_dyn_string_prepend_cstr;\n-    __cxa_dyn_string_prepend;\n-    __cxa_dyn_string_release;\n-    __cxa_dyn_string_resize;\n-    __cxa_dyn_string_substring;\n     __cxa_end_catch;\n     __cxa_free_exception;\n     __cxa_get_globals;\n@@ -310,6 +292,26 @@ CXXABI_1.2 {\n     # __gnu_cxx::_verbose_terminate_handler()\n     _ZN9__gnu_cxx27__verbose_terminate_handlerEv;\n \n+    # XXX Should not be exported.\n+    __cxa_dyn_string_append_char;\n+    __cxa_dyn_string_append_cstr;\n+    __cxa_dyn_string_append;\n+    __cxa_dyn_string_clear;\n+    __cxa_dyn_string_copy_cstr;\n+    __cxa_dyn_string_copy;\n+    __cxa_dyn_string_delete;\n+    __cxa_dyn_string_eq;\n+    __cxa_dyn_string_init;\n+    __cxa_dyn_string_insert_char;\n+    __cxa_dyn_string_insert_cstr;\n+    __cxa_dyn_string_insert;\n+    __cxa_dyn_string_new;\n+    __cxa_dyn_string_prepend_cstr;\n+    __cxa_dyn_string_prepend;\n+    __cxa_dyn_string_release;\n+    __cxa_dyn_string_resize;\n+    __cxa_dyn_string_substring;\n+\n   local:\n     *;\n };"}, {"sha": "1947002ce2b8cacc1f0f86949ee54cf4683ed526", "filename": "libstdc++-v3/config/locale/generic/c_locale.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgeneric%2Fc_locale.h?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -41,6 +41,10 @@ namespace std\n {\n   typedef int*\t\t\t__c_locale;\n \n+  // Convert numeric value of type _Tv to string and return length of\n+  // string.  If snprintf is available use it, otherwise fall back to\n+  // the unsafe sprintf which, in general, can be dangerous and should\n+  // be avoided.\n   template<typename _Tv>\n     int\n     __convert_from_v(char* __out, const int __size, const char* __fmt,"}, {"sha": "065e10aa2e1b82e1c92c80aa7db93b91f3a0df51", "filename": "libstdc++-v3/config/locale/gnu/c_locale.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.cc?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the"}, {"sha": "c7d8e6e281b8f10b7ce23a6362f9e099030c6f5c", "filename": "libstdc++-v3/config/locale/gnu/c_locale.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flocale%2Fgnu%2Fc_locale.h?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -1,6 +1,6 @@\n // Wrapper for underlying C-language localization -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -53,6 +53,10 @@ namespace std\n {\n   typedef __locale_t\t\t__c_locale;\n \n+  // Convert numeric value of type _Tv to string and return length of\n+  // string.  If snprintf is available use it, otherwise fall back to\n+  // the unsafe sprintf which, in general, can be dangerous and should\n+  // be avoided.\n   template<typename _Tv>\n     int\n     __convert_from_v(char* __out, const int __size, const char* __fmt,"}, {"sha": "00e12a0a6f602823ce6049cde9fca92b7b8516a9", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -53,6 +53,7 @@ bits_headers = \\\n \t${bits_srcdir}/ios_base.h \\\n \t${bits_srcdir}/istream.tcc \\\n \t${bits_srcdir}/list.tcc \\\n+\t${bits_srcdir}/locale_classes.h \\\n \t${bits_srcdir}/locale_facets.h \\\n \t${bits_srcdir}/locale_facets.tcc \\\n \t${bits_srcdir}/localefwd.h \\"}, {"sha": "e39dffdef6287cc64bcf7475731831d815192f40", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -171,6 +171,7 @@ bits_headers = \\\n \t${bits_srcdir}/ios_base.h \\\n \t${bits_srcdir}/istream.tcc \\\n \t${bits_srcdir}/list.tcc \\\n+\t${bits_srcdir}/locale_classes.h \\\n \t${bits_srcdir}/locale_facets.h \\\n \t${bits_srcdir}/locale_facets.tcc \\\n \t${bits_srcdir}/localefwd.h \\"}, {"sha": "29c1436cf274fb973cc030923b6999ccda05d068", "filename": "libstdc++-v3/include/bits/basic_ios.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.h?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -38,6 +38,8 @@\n #pragma GCC system_header\n \n #include <bits/streambuf_iterator.h>\n+#include <bits/localefwd.h>\n+#include <bits/locale_classes.h>\n #include <bits/locale_facets.h>\n \n namespace std "}, {"sha": "bdcb2b6eedac5ebc0af4665822dd7f5470d37caa", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -43,6 +43,8 @@\n #pragma GCC system_header\n \n #include <bits/atomicity.h>\n+#include <bits/localefwd.h>\n+#include <bits/locale_classes.h>\n \n namespace std\n {"}, {"sha": "fd4fc2d9f3711cffde586a606a5ee67303a32700", "filename": "libstdc++-v3/include/bits/locale_classes.h", "status": "added", "additions": 375, "deletions": 0, "changes": 375, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_classes.h?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -0,0 +1,375 @@\n+// Locale support -*- C++ -*-\n+\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+//\n+// ISO C++ 14882: 22.1  Locales\n+//\n+\n+/** @file localefwd.h\n+ *  This is an internal header file, included by other library headers.\n+ *  You should not attempt to use it directly.\n+ */\n+\n+#ifndef _CPP_BITS_LOCALE_CLASSES_H\n+#define _CPP_BITS_LOCALE_CLASSES_H\t1\n+\n+#pragma GCC system_header\n+\n+#include <bits/localefwd.h>\n+#include <cctype>\t\t// For isspace, etc.\n+#include <cstring>\t\t// For strcmp.\n+#include <string>\n+#include <bits/atomicity.h>\n+\n+namespace std\n+{\n+  // 22.1.1 Class locale\n+  class locale\n+  {\n+  public:\n+    // Types:\n+    typedef unsigned int \tcategory;\n+\n+    // Forward decls and friends:\n+    class facet;\n+    class id;\n+    class _Impl;\n+\n+    friend class facet;\n+    friend class _Impl;\n+\n+    template<typename _Facet>\n+      friend const _Facet& \n+      use_facet(const locale&);\n+    \n+    template<typename _Facet>\n+      friend bool \n+      has_facet(const locale&) throw();\n+ \n+    // Category values:\n+    // NB: Order must match _S_facet_categories definition in locale.cc\n+    static const category none\t\t= 0;\n+    static const category ctype \t= 1L << 0;\n+    static const category numeric \t= 1L << 1;\n+    static const category collate  \t= 1L << 2;\n+    static const category time \t\t= 1L << 3;\n+    static const category monetary \t= 1L << 4;\n+    static const category messages \t= 1L << 5;\n+    static const category all \t\t= (ctype | numeric | collate |\n+\t\t\t\t \t   time  | monetary | messages);\n+\n+    // Construct/copy/destroy:\n+    locale() throw();\n+\n+    locale(const locale& __other) throw();\n+\n+    explicit  \n+    locale(const char* __s);\n+\n+    locale(const locale& __base, const char* __s, category __cat);\n+\n+    locale(const locale& __base, const locale& __add, category __cat);\n+\n+    template<typename _Facet>\n+      locale(const locale& __other, _Facet* __f);\n+\n+    ~locale() throw();\n+\n+    const locale&  \n+    operator=(const locale& __other) throw();\n+\n+    template<typename _Facet>\n+      locale  \n+      combine(const locale& __other) const;\n+\n+    // Locale operations:\n+    string \n+    name() const;\n+\n+    bool \n+    operator==(const locale& __other) const throw ();\n+\n+    inline bool  \n+    operator!=(const locale& __other) const throw ()\n+    { return !(this->operator==(__other));  }\n+\n+    template<typename _Char, typename _Traits, typename _Alloc>\n+      bool  \n+      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,\n+\t\t const basic_string<_Char, _Traits, _Alloc>& __s2) const;\n+\n+    // Global locale objects:\n+    static locale \n+    global(const locale&);\n+\n+    static const locale& \n+    classic();\n+\n+  private:\n+    // The (shared) implementation\n+    _Impl* \t\t_M_impl;  \n+\n+    // The \"C\" reference locale\n+    static _Impl* \t_S_classic; \n+\n+    // Current global locale\n+    static _Impl* \t_S_global;  \n+\n+    // Number of standard categories. For C++, these categories are\n+    // collate, ctype, monetary, numeric, time, and messages. These\n+    // directly correspond to ISO C99 macros LC_COLLATE, LC_CTYPE,\n+    // LC_MONETARY, LC_NUMERIC, and LC_TIME. In addition, POSIX (IEEE\n+    // 1003.1-2001) specifies LC_MESSAGES.\n+    static const size_t\t_S_categories_size = 6;\n+\n+    // In addition to the standard categories, the underlying\n+    // operating system is allowed to define extra LC_*\n+    // macros. For GNU systems, the following are also valid:\n+    // LC_PAPER, LC_NAME, LC_ADDRESS, LC_TELEPHONE, LC_MEASUREMENT,\n+    // and LC_IDENTIFICATION.\n+    static const size_t\t_S_extra_categories_size = _GLIBCPP_NUM_CATEGORIES;\n+\n+    // Names of underlying locale categories.  \n+    // NB: locale::global() has to know how to modify all the\n+    // underlying categories, not just the ones required by the C++\n+    // standard.\n+    static const char* \t_S_categories[_S_categories_size \n+\t\t\t\t      + _S_extra_categories_size];\n+\n+    explicit \n+    locale(_Impl*) throw();\n+\n+    static inline void  \n+    _S_initialize()\n+    { \n+      if (!_S_classic) \n+\tclassic();  \n+    }\n+\n+    static category  \n+    _S_normalize_category(category);\n+\n+    void\n+    _M_coalesce(const locale& __base, const locale& __add, category __cat);\n+  };\n+\n+\n+  // Implementation object for locale \n+  class locale::_Impl\n+  {\n+  public:\n+    // Friends.\n+    friend class locale;\n+    friend class locale::facet;\n+\n+    template<typename _Facet>\n+      friend const _Facet&  \n+      use_facet(const locale&);\n+\n+    template<typename _Facet>\n+      friend bool  \n+      has_facet(const locale&) throw();\n+\n+  private:\n+    // Data Members.\n+    _Atomic_word\t\t\t_M_references;\n+    facet** \t\t\t\t_M_facets;\n+    size_t \t\t\t\t_M_facets_size;\n+\n+    char* \t\t\t\t_M_names[_S_categories_size\n+\t\t\t\t\t\t + _S_extra_categories_size];\n+    static const locale::id* const \t_S_id_ctype[];\n+    static const locale::id* const \t_S_id_numeric[];\n+    static const locale::id* const \t_S_id_collate[];\n+    static const locale::id* const \t_S_id_time[];\n+    static const locale::id* const \t_S_id_monetary[];\n+    static const locale::id* const \t_S_id_messages[];\n+    static const locale::id* const* const _S_facet_categories[];\n+\n+    inline void \n+    _M_add_reference() throw()\n+    { __atomic_add(&_M_references, 1); }\n+\n+    inline void \n+    _M_remove_reference() throw()\n+    {\n+      if (__exchange_and_add(&_M_references, -1) == 1)\n+\t{\n+\t  try \n+\t    { delete this; } \n+\t  catch(...) \n+\t    { }\n+\t}\n+    }\n+\n+    _Impl(const _Impl&, size_t);\n+    _Impl(const char*, size_t);\n+    _Impl(facet**, size_t, bool);\n+\n+   ~_Impl() throw();\n+\n+    _Impl(const _Impl&);  // Not defined.\n+\n+    void \n+    operator=(const _Impl&);  // Not defined.\n+\n+    inline bool\n+    _M_check_same_name()\n+    {\n+      bool __ret = true;\n+      for (size_t __i = 0; \n+\t   __ret && __i < _S_categories_size + _S_extra_categories_size - 1; \n+\t   ++__i)\n+\t__ret &= (strcmp(_M_names[__i], _M_names[__i + 1]) == 0);\n+      return __ret;\n+    }\n+\n+    void \n+    _M_replace_categories(const _Impl*, category);\n+\n+    void \n+    _M_replace_category(const _Impl*, const locale::id* const*);\n+\n+    void \n+    _M_replace_facet(const _Impl*, const locale::id*);\n+\n+    void \n+    _M_install_facet(const locale::id*, facet*);\n+\n+    template<typename _Facet>\n+      inline void \n+      _M_init_facet(_Facet* __facet)\n+      { _M_install_facet(&_Facet::id, __facet);  }\n+  };\n+\n+  template<typename _Facet>\n+    locale::locale(const locale& __other, _Facet* __f)\n+    {\n+      _M_impl = new _Impl(*__other._M_impl, 1);\n+      _M_impl->_M_install_facet(&_Facet::id, __f);\n+      for (size_t __i = 0; \n+\t   __i < _S_categories_size + _S_extra_categories_size; ++__i)\n+\t{\n+\t  delete [] _M_impl->_M_names[__i];\n+\t  char* __new = new char[2];\n+\t  strcpy(__new, \"*\");\n+\t  _M_impl->_M_names[__i] = __new;\n+\t}\n+    }\n+\n+\n+  // 22.1.1.1.2  Class locale::facet\n+  class locale::facet\n+  {\n+  private:\n+    friend class locale;\n+    friend class locale::_Impl;\n+\n+    _Atomic_word \t\t\t_M_references;\n+\n+  protected:\n+    // Contains data from the underlying \"C\" library for the classic locale.\n+    static __c_locale\t\t     \t_S_c_locale;\n+\n+    // String literal for the name of the classic locale.\n+    static char\t\t\t\t_S_c_name[2];\n+    \n+    explicit \n+    facet(size_t __refs = 0) throw();\n+\n+    virtual \n+    ~facet();\n+\n+    static void\n+    _S_create_c_locale(__c_locale& __cloc, const char* __s, \n+\t\t       __c_locale __old = 0);\n+\n+    static __c_locale\n+    _S_clone_c_locale(__c_locale& __cloc);\n+\n+    static void\n+    _S_destroy_c_locale(__c_locale& __cloc);\n+\n+  private:\n+    void \n+    _M_add_reference() throw();\n+\n+    void \n+    _M_remove_reference() throw();\n+\n+    facet(const facet&);  // Not defined.\n+\n+    void \n+    operator=(const facet&);  // Not defined.\n+  };\n+\n+\n+  // 22.1.1.1.3 Class locale::id\n+  class locale::id\n+  {\n+  private:\n+    friend class locale;\n+    friend class locale::_Impl;\n+    template<typename _Facet>\n+      friend const _Facet&  \n+      use_facet(const locale&);\n+    template<typename _Facet>\n+      friend bool           \n+      has_facet(const locale&) throw ();\n+\n+    // NB: There is no accessor for _M_index because it may be used\n+    // before the constructor is run; the effect of calling a member\n+    // function (even an inline) would be undefined.\n+    mutable size_t \t\t_M_index;\n+\n+    // Last id number assigned.\n+    static _Atomic_word \t_S_highwater;   \n+\n+    void \n+    operator=(const id&);  // Not defined.\n+\n+    id(const id&);  // Not defined.\n+\n+  public:\n+    // NB: This class is always a static data member, and thus can be\n+    // counted on to be zero-initialized.\n+    id();\n+\n+    inline size_t\n+    _M_id() const\n+    {\n+      if (!_M_index)\n+\t_M_index = 1 + __exchange_and_add(&_S_highwater, 1);\n+      return _M_index - 1;\n+    }\n+  };\n+} // namespace std\n+\n+#endif"}, {"sha": "de9cef6d7e48e9dfaf50da6ef51cdaa283b83456", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 69, "deletions": 3, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -44,7 +44,9 @@\n \n #include <ctime>\t// For struct tm\n #include <cwctype>\t// For wctype_t\n-#include <ios>\t\t// For ios_base\n+#include <iosfwd>\n+#include <bits/ios_base.h>  // For ios_base, ios_base::iostate\n+#include <streambuf>\n \n namespace std\n {\n@@ -55,8 +57,72 @@ namespace std\n # define  _GLIBCPP_NUM_FACETS 14\n #endif\n \n+  // Convert string to numeric value of type _Tv and store results.  \n+  // NB: This is specialized for all required types, there is no\n+  // generic definition.\n+  template<typename _Tv>\n+    void\n+    __convert_to_v(const char* __in, _Tv& __out, ios_base::iostate& __err, \n+\t\t   const __c_locale& __cloc, int __base = 10);\n+\n+  // Explicit specializations for required types.\n+  template<>\n+    void\n+    __convert_to_v(const char*, long&, ios_base::iostate&, \n+\t\t   const __c_locale&, int);\n+\n+  template<>\n+    void\n+    __convert_to_v(const char*, unsigned long&, ios_base::iostate&, \n+\t\t   const __c_locale&, int);\n+\n+#ifdef _GLIBCPP_USE_LONG_LONG\n+  template<>\n+    void\n+    __convert_to_v(const char*, long long&, ios_base::iostate&, \n+\t\t   const __c_locale&, int);\n+\n+  template<>\n+    void\n+    __convert_to_v(const char*, unsigned long long&, ios_base::iostate&, \n+\t\t   const __c_locale&, int);\n+#endif\n+\n+  template<>\n+    void\n+    __convert_to_v(const char*, float&, ios_base::iostate&, \n+\t\t   const __c_locale&, int);\n+\n+  template<>\n+    void\n+    __convert_to_v(const char*, double&, ios_base::iostate&, \n+\t\t   const __c_locale&, int);\n+\n+ template<>\n+    void\n+    __convert_to_v(const char*, long double&, ios_base::iostate&, \n+\t\t   const __c_locale&, int);\n+\n+\n   template<typename _CharT, typename _Traits>\n-    struct __pad;\n+    struct __pad\n+    {\n+      static void\n+      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news, \n+\t     const _CharT* __olds, const streamsize __newlen, \n+\t     const streamsize __oldlen, const bool __num);\n+    };\n+\n+  template<typename _CharT>\n+    bool\n+    __verify_grouping(const basic_string<_CharT>& __grouping, \n+\t\t      basic_string<_CharT>& __grouping_tmp);\n+\n+  template<typename _CharT>\n+    _CharT*\n+    __add_grouping(_CharT* __s, _CharT __sep,  \n+\t\t   const char* __gbeg, const char* __gend, \n+\t\t   const _CharT* __first, const _CharT* __last);\n \n   // 22.2.1.1  Template class ctype\n   // Include host and configuration specific ctype enums for ctype_base."}, {"sha": "20c75751c6ccc1dfde7b16399069afef70f112e8", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 7, "deletions": 32, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -36,13 +36,13 @@\n #pragma GCC system_header\n \n #include <cerrno>\n-#include <clocale>   // For localeconv\n-#include <cstdlib>   // For strof, strtold\n-#include <cmath>     // For ceil\n-#include <cctype>    // For isspace\n-#include <limits>    // For numeric_limits\n+#include <clocale>   \t\t// For localeconv\n+#include <cstdlib>   \t\t// For strof, strtold\n+#include <cmath>     \t\t// For ceil\n+#include <cctype>    \t\t// For isspace\n+#include <limits>    \t\t// For numeric_limits\n+#include <typeinfo>  \t\t// For bad_cast.\n #include <bits/streambuf_iterator.h>\n-#include <typeinfo>  // For bad_cast.\n \n namespace std\n {\n@@ -1965,22 +1965,6 @@ namespace std\n       return static_cast<long>(__val);\n     }\n \n-  // Convert string to numeric value of type _Tv and store results.  \n-  // NB: This is specialized for all required types, there is no\n-  // generic definition.\n-  template<typename _Tv>\n-    void\n-    __convert_to_v(const char* __in, _Tv& __out, ios_base::iostate& __err, \n-\t\t   const __c_locale& __cloc, int __base = 10);\n-\n-  // Convert numeric value of type _Tv to string and return length of string.\n-  // If snprintf is available use it, otherwise fall back to the unsafe sprintf\n-  // which, in general, can be dangerous and should be avoided.\n-  template<typename _Tv>\n-    int\n-    __convert_from_v(char* __out, const int __size, const char* __fmt,\n-\t\t     _Tv __v, const __c_locale&, int __prec = -1);\n-\n   // Construct correctly padded string, as per 22.2.2.2.2\n   // Assumes \n   // __newlen > __oldlen\n@@ -1992,15 +1976,6 @@ namespace std\n \n   // NB: Of the two parameters, _CharT can be deduced from the\n   // function arguments. The other (_Traits) has to be explicitly specified.\n-  template<typename _CharT, typename _Traits>\n-    struct __pad\n-    {\n-      static void\n-      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news, \n-\t     const _CharT* __olds, const streamsize __newlen, \n-\t     const streamsize __oldlen, const bool __num);\n-    };\n-\n   template<typename _CharT, typename _Traits>\n     void \n     __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill, "}, {"sha": "ac9e1a95425a20b1829793542c132da01f6d6f1e", "filename": "libstdc++-v3/include/bits/localefwd.h", "status": "modified", "additions": 4, "deletions": 328, "changes": 332, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocalefwd.h?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -37,18 +37,15 @@\n  *  You should not attempt to use it directly.\n  */\n \n-#ifndef _CPP_BITS_LOCCORE_H\n-#define _CPP_BITS_LOCCORE_H\t1\n+#ifndef _CPP_BITS_LOCALE_FWD_H\n+#define _CPP_BITS_LOCALE_FWD_H\t1\n \n #pragma GCC system_header\n \n #include <bits/c++config.h>\n #include <bits/c++locale.h>     // Defines __c_locale, config-specific includes\n-#include <climits>\t\t// For CHAR_BIT\n-#include <cctype>\t\t// For isspace, etc.\n-#include <string> \t\t// For string.\n+#include <iosfwd> \t\t// For ostreambuf_iterator, istreambuf_iterator\n #include <bits/functexcept.h>\n-#include <bits/atomicity.h>\n \n namespace std\n {\n@@ -108,7 +105,6 @@ namespace std\n     inline _CharT \n     tolower(_CharT, const locale&);\n \n-\n   // 22.2.1 and 22.2.1.3 ctype\n   class ctype_base;\n   template<typename _CharT> \n@@ -175,326 +171,6 @@ namespace std\n   template<typename _CharT> \n     class messages_byname;\n \n-  // 22.1.1 Class locale\n-  class locale\n-  {\n-  public:\n-    // Types:\n-    typedef unsigned int \tcategory;\n-\n-    // Forward decls and friends:\n-    class facet;\n-    class id;\n-    class _Impl;\n-\n-    friend class facet;\n-    friend class _Impl;\n-\n-    template<typename _Facet>\n-      friend const _Facet& \n-      use_facet(const locale&);\n-    \n-    template<typename _Facet>\n-      friend bool \n-      has_facet(const locale&) throw();\n- \n-    // Category values:\n-    // NB: Order must match _S_facet_categories definition in locale.cc\n-    static const category none\t\t= 0;\n-    static const category ctype \t= 1L << 0;\n-    static const category numeric \t= 1L << 1;\n-    static const category collate  \t= 1L << 2;\n-    static const category time \t\t= 1L << 3;\n-    static const category monetary \t= 1L << 4;\n-    static const category messages \t= 1L << 5;\n-    static const category all \t\t= (ctype | numeric | collate |\n-\t\t\t\t \t   time  | monetary | messages);\n-\n-    // Construct/copy/destroy:\n-    locale() throw();\n-\n-    locale(const locale& __other) throw();\n-\n-    explicit  \n-    locale(const char* __s);\n-\n-    locale(const locale& __base, const char* __s, category __cat);\n-\n-    locale(const locale& __base, const locale& __add, category __cat);\n-\n-    template<typename _Facet>\n-      locale(const locale& __other, _Facet* __f);\n-\n-    ~locale() throw();\n-\n-    const locale&  \n-    operator=(const locale& __other) throw();\n-\n-    template<typename _Facet>\n-      locale  \n-      combine(const locale& __other) const;\n-\n-    // Locale operations:\n-    string \n-    name() const;\n-\n-    bool \n-    operator==(const locale& __other) const throw ();\n-\n-    inline bool  \n-    operator!=(const locale& __other) const throw ()\n-    { return !(this->operator==(__other));  }\n-\n-    template<typename _Char, typename _Traits, typename _Alloc>\n-      bool  \n-      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,\n-\t\t const basic_string<_Char, _Traits, _Alloc>& __s2) const;\n-\n-    // Global locale objects:\n-    static locale \n-    global(const locale&);\n-\n-    static const locale& \n-    classic();\n-\n-  private:\n-    // The (shared) implementation\n-    _Impl* \t\t_M_impl;  \n-\n-    // The \"C\" reference locale\n-    static _Impl* \t_S_classic; \n-\n-    // Current global locale\n-    static _Impl* \t_S_global;  \n-\n-    // Number of standard categories. For C++, these categories are\n-    // collate, ctype, monetary, numeric, time, and messages. These\n-    // directly correspond to ISO C99 macros LC_COLLATE, LC_CTYPE,\n-    // LC_MONETARY, LC_NUMERIC, and LC_TIME. In addition, POSIX (IEEE\n-    // 1003.1-2001) specifies LC_MESSAGES.\n-    static const size_t\t_S_categories_size = 6;\n-\n-    // In addition to the standard categories, the underlying\n-    // operating system is allowed to define extra LC_*\n-    // macros. For GNU systems, the following are also valid:\n-    // LC_PAPER, LC_NAME, LC_ADDRESS, LC_TELEPHONE, LC_MEASUREMENT,\n-    // and LC_IDENTIFICATION.\n-    static const size_t\t_S_extra_categories_size = _GLIBCPP_NUM_CATEGORIES;\n-\n-    // Names of underlying locale categories.  \n-    // NB: locale::global() has to know how to modify all the\n-    // underlying categories, not just the ones required by the C++\n-    // standard.\n-    static const char* \t_S_categories[_S_categories_size \n-\t\t\t\t      + _S_extra_categories_size];\n-\n-    explicit \n-    locale(_Impl*) throw();\n-\n-    static inline void  \n-    _S_initialize()\n-    { \n-      if (!_S_classic) \n-\tclassic();  \n-    }\n-\n-    static category  \n-    _S_normalize_category(category);\n-\n-    void\n-    _M_coalesce(const locale& __base, const locale& __add, category __cat);\n-  };\n-\n-\n-  // Implementation object for locale \n-  class locale::_Impl\n-  {\n-  public:\n-    // Friends.\n-    friend class locale;\n-    friend class locale::facet;\n-\n-    template<typename _Facet>\n-      friend const _Facet&  \n-      use_facet(const locale&);\n-\n-    template<typename _Facet>\n-      friend bool  \n-      has_facet(const locale&) throw();\n-\n-  private:\n-    // Data Members.\n-    _Atomic_word\t\t\t_M_references;\n-    facet** \t\t\t\t_M_facets;\n-    size_t \t\t\t\t_M_facets_size;\n-\n-    char* \t\t\t\t_M_names[_S_categories_size\n-\t\t\t\t\t\t + _S_extra_categories_size];\n-    static const locale::id* const \t_S_id_ctype[];\n-    static const locale::id* const \t_S_id_numeric[];\n-    static const locale::id* const \t_S_id_collate[];\n-    static const locale::id* const \t_S_id_time[];\n-    static const locale::id* const \t_S_id_monetary[];\n-    static const locale::id* const \t_S_id_messages[];\n-    static const locale::id* const* const _S_facet_categories[];\n-\n-    inline void \n-    _M_add_reference() throw()\n-    { __atomic_add(&_M_references, 1); }\n-\n-    inline void \n-    _M_remove_reference() throw()\n-    {\n-      if (__exchange_and_add(&_M_references, -1) == 1)\n-\t{\n-\t  try \n-\t    { delete this; } \n-\t  catch(...) \n-\t    { }\n-\t}\n-    }\n-\n-    _Impl(const _Impl&, size_t);\n-    _Impl(const char*, size_t);\n-    _Impl(facet**, size_t, bool);\n-\n-   ~_Impl() throw();\n-\n-    _Impl(const _Impl&);  // Not defined.\n-\n-    void \n-    operator=(const _Impl&);  // Not defined.\n-\n-    inline bool\n-    _M_check_same_name()\n-    {\n-      bool __ret = true;\n-      for (size_t __i = 0; \n-\t   __ret && __i < _S_categories_size + _S_extra_categories_size - 1; \n-\t   ++__i)\n-\t__ret &= (strcmp(_M_names[__i], _M_names[__i + 1]) == 0);\n-      return __ret;\n-    }\n-\n-    void \n-    _M_replace_categories(const _Impl*, category);\n-\n-    void \n-    _M_replace_category(const _Impl*, const locale::id* const*);\n-\n-    void \n-    _M_replace_facet(const _Impl*, const locale::id*);\n-\n-    void \n-    _M_install_facet(const locale::id*, facet*);\n-\n-    template<typename _Facet>\n-      inline void \n-      _M_init_facet(_Facet* __facet)\n-      { _M_install_facet(&_Facet::id, __facet);  }\n-  };\n-\n-  template<typename _Facet>\n-    locale::locale(const locale& __other, _Facet* __f)\n-    {\n-      _M_impl = new _Impl(*__other._M_impl, 1);\n-      _M_impl->_M_install_facet(&_Facet::id, __f);\n-      for (size_t __i = 0; \n-\t   __i < _S_categories_size + _S_extra_categories_size; ++__i)\n-\t{\n-\t  delete [] _M_impl->_M_names[__i];\n-\t  char* __new = new char[2];\n-\t  strcpy(__new, \"*\");\n-\t  _M_impl->_M_names[__i] = __new;\n-\t}\n-    }\n-\n-  // 22.1.1.1.2  Class locale::facet\n-  class locale::facet\n-  {\n-  private:\n-    friend class locale;\n-    friend class locale::_Impl;\n-\n-    _Atomic_word \t\t\t_M_references;\n-\n-  protected:\n-    // Contains data from the underlying \"C\" library for the classic locale.\n-    static __c_locale\t\t     \t_S_c_locale;\n-\n-    // String literal for the name of the classic locale.\n-    static char\t\t\t\t_S_c_name[2];\n-    \n-    explicit \n-    facet(size_t __refs = 0) throw();\n-\n-    virtual \n-    ~facet();\n-\n-    static void\n-    _S_create_c_locale(__c_locale& __cloc, const char* __s, \n-\t\t       __c_locale __old = 0);\n-\n-    static __c_locale\n-    _S_clone_c_locale(__c_locale& __cloc);\n-\n-    static void\n-    _S_destroy_c_locale(__c_locale& __cloc);\n-\n-  private:\n-    void \n-    _M_add_reference() throw();\n-\n-    void \n-    _M_remove_reference() throw();\n-\n-    facet(const facet&);  // Not defined.\n-\n-    void \n-    operator=(const facet&);  // Not defined.\n-  };\n-\n-\n-  // 22.1.1.1.3 Class locale::id\n-  class locale::id\n-  {\n-  private:\n-    friend class locale;\n-    friend class locale::_Impl;\n-    template<typename _Facet>\n-      friend const _Facet&  \n-      use_facet(const locale&);\n-    template<typename _Facet>\n-      friend bool           \n-      has_facet(const locale&) throw ();\n-\n-    // NB: There is no accessor for _M_index because it may be used\n-    // before the constructor is run; the effect of calling a member\n-    // function (even an inline) would be undefined.\n-    mutable size_t \t\t_M_index;\n-\n-    // Last id number assigned.\n-    static _Atomic_word \t_S_highwater;   \n-\n-    void \n-    operator=(const id&);  // Not defined.\n-\n-    id(const id&);  // Not defined.\n-\n-  public:\n-    // NB: This class is always a static data member, and thus can be\n-    // counted on to be zero-initialized.\n-    id();\n-\n-    inline size_t\n-    _M_id() const\n-    {\n-      if (!_M_index)\n-\t_M_index = 1 + __exchange_and_add(&_S_highwater, 1);\n-      return _M_index - 1;\n-    }\n-  };\n-\n   template<typename _Facet>\n     const _Facet&\n     use_facet(const locale& __loc);"}, {"sha": "d2ddd0479843669bbec81d745cfd93db6edb878b", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -42,6 +42,7 @@\n \n #pragma GCC system_header\n \n+#include <streambuf>\n #include <istream>\n #include <ostream>\n #include <locale>\t// For codecvt"}, {"sha": "4016047608f4cbe6f734d151d0510a0d15a48945", "filename": "libstdc++-v3/include/std/std_iosfwd.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_iosfwd.h?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -1,6 +1,7 @@\n // Forwarding declarations -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2001, 2002, 2003\n+// Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,7 +43,7 @@\n #pragma GCC system_header\n \n #include <bits/c++config.h>\n-#include <bits/stringfwd.h> // For string forward declarations.\n+#include <bits/stringfwd.h> \t// For string forward declarations.\n #include <bits/fpos.h>\n #include <bits/functexcept.h>\n "}, {"sha": "29602560766cd330ff76afb488a097d53bd74c4b", "filename": "libstdc++-v3/include/std/std_locale.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_locale.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_locale.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_locale.h?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -1,6 +1,6 @@\n // Locale support -*- C++ -*-\n \n-// Copyright (C) 1997, 1998, 1999, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1997, 1998, 1999, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -42,11 +42,8 @@\n #pragma GCC system_header\n \n #include <bits/localefwd.h>\n+#include <bits/locale_classes.h>\n #include <bits/locale_facets.h>\n #include <bits/locale_facets.tcc>\n \n #endif\n-\n-// Local Variables:\n-// mode:c++\n-// End:"}, {"sha": "a6dda0b5a225e38dd16d2f50b284a2acb88e7b6a", "filename": "libstdc++-v3/include/std/std_sstream.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_sstream.h?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -41,6 +41,7 @@\n \n #pragma GCC system_header\n \n+#include <streambuf>\n #include <istream>\n #include <ostream>\n "}, {"sha": "e173549105de04321fc56f7eb28252e373dd36db", "filename": "libstdc++-v3/src/concept-inst.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e66868131bdd695a33e058a00ce1375bc04a1f94/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fconcept-inst.cc?ref=e66868131bdd695a33e058a00ce1375bc04a1f94", "patch": "@@ -1,6 +1,6 @@\n // Concept checking instantiations -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,6 +39,7 @@\n #ifdef _GLIBCPP_CONCEPT_CHECKS\n \n #include <memory>\n+#include <iterator>\n #include <ostream>\n \n #define _Instantiate(...) template void __function_requires< __VA_ARGS__ > ()"}]}