{"sha": "6e07c515168d331a0e05673b7994a5b189ef112f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmUwN2M1MTUxNjhkMzMxYTBlMDU2NzNiNzk5NGE1YjE4OWVmMTEyZg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-06-25T12:43:05Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-06-25T12:43:05Z"}, "message": "re PR c/61162 (possibly bad error location with -Wc++-compat)\n\n\tPR c/61162\n\t* c-parser.c (c_parser_statement_after_labels): Pass the location of\n\tthe return expression to c_finish_return.\n\n\t* gcc.dg/pr61162.c: Adjust dg-warning.\n\t* gcc.dg/pr61162-2.c: New test.\n\nFrom-SVN: r211978", "tree": {"sha": "ea22f21c816c1c646178ef9c6cf317e21cc4dec6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea22f21c816c1c646178ef9c6cf317e21cc4dec6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6e07c515168d331a0e05673b7994a5b189ef112f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e07c515168d331a0e05673b7994a5b189ef112f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e07c515168d331a0e05673b7994a5b189ef112f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e07c515168d331a0e05673b7994a5b189ef112f/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20cb2258ecac9c5cb651889966ac46f6958aec95", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20cb2258ecac9c5cb651889966ac46f6958aec95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20cb2258ecac9c5cb651889966ac46f6958aec95"}], "stats": {"total": 68, "additions": 65, "deletions": 3}, "files": [{"sha": "d1837c26634332ec1900e93ad4cd770658ab1b33", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e07c515168d331a0e05673b7994a5b189ef112f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e07c515168d331a0e05673b7994a5b189ef112f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=6e07c515168d331a0e05673b7994a5b189ef112f", "patch": "@@ -1,3 +1,9 @@\n+2014-06-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61162\n+\t* c-parser.c (c_parser_statement_after_labels): Pass the location of\n+\tthe return expression to c_finish_return.\n+\n 2014-06-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-typeck.c (c_finish_omp_clauses): Make sure"}, {"sha": "5842320c540fcdb9b022f5ad7708dd709705af22", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e07c515168d331a0e05673b7994a5b189ef112f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e07c515168d331a0e05673b7994a5b189ef112f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=6e07c515168d331a0e05673b7994a5b189ef112f", "patch": "@@ -4948,9 +4948,10 @@ c_parser_statement_after_labels (c_parser *parser)\n \t    }\n \t  else\n \t    {\n+\t      location_t xloc = c_parser_peek_token (parser)->location;\n \t      struct c_expr expr = c_parser_expression_conv (parser);\n \t      mark_exp_read (expr.value);\n-\t      stmt = c_finish_return (loc, expr.value, expr.original_type);\n+\t      stmt = c_finish_return (xloc, expr.value, expr.original_type);\n \t      goto expect_semicolon;\n \t    }\n \t  break;"}, {"sha": "b62e83012ee7f6c41a0f96371acf467f54448104", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e07c515168d331a0e05673b7994a5b189ef112f/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e07c515168d331a0e05673b7994a5b189ef112f/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=6e07c515168d331a0e05673b7994a5b189ef112f", "patch": "@@ -9185,7 +9185,8 @@ c_finish_goto_ptr (location_t loc, tree expr)\n \n /* Generate a C `return' statement.  RETVAL is the expression for what\n    to return, or a null pointer for `return;' with no value.  LOC is\n-   the location of the return statement.  If ORIGTYPE is not NULL_TREE, it\n+   the location of the return statement, or the location of the expression,\n+   if the statement has any.  If ORIGTYPE is not NULL_TREE, it\n    is the original type of RETVAL.  */\n \n tree"}, {"sha": "ac32cce64d61d178bd078044920662d50f3649de", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e07c515168d331a0e05673b7994a5b189ef112f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e07c515168d331a0e05673b7994a5b189ef112f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6e07c515168d331a0e05673b7994a5b189ef112f", "patch": "@@ -1,3 +1,9 @@\n+2014-06-25  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c/61162\n+\t* gcc.dg/pr61162.c: Adjust dg-warning.\n+\t* gcc.dg/pr61162-2.c: New test.\n+\n 2014-06-25  Marc Glisse  <marc.glisse@inria.fr>\n \n \tPR tree-optimization/57742"}, {"sha": "1045408d7369433b230a32e386db67ac9ee6dfee", "filename": "gcc/testsuite/gcc.dg/pr61162-2.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e07c515168d331a0e05673b7994a5b189ef112f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61162-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e07c515168d331a0e05673b7994a5b189ef112f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61162-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61162-2.c?ref=6e07c515168d331a0e05673b7994a5b189ef112f", "patch": "@@ -0,0 +1,48 @@\n+/* PR c/61162 */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wc++-compat -Wpointer-sign -Wpedantic\" } */\n+\n+enum e { A };\n+struct s { int a; };\n+\n+enum e\n+fn1 (void)\n+{\n+  return 0; /* { dg-warning \"10:enum conversion in return\" } */\n+}\n+\n+int\n+fn2 (struct s s)\n+{\n+  return s; /* { dg-error \"10:incompatible types when returning\" } */\n+}\n+\n+void\n+fn3 (void)\n+{\n+  return 3; /* { dg-warning \"10:in function returning void\" } */\n+}\n+\n+int\n+fn4 (int *a)\n+{\n+  return a; /* { dg-warning \"10:return makes integer from pointer without a cast\" } */\n+}\n+\n+int *\n+fn5 (int a)\n+{\n+  return a; /* { dg-warning \"10:return makes pointer from integer without a cast\" } */\n+}\n+\n+unsigned int *\n+fn6 (int *i)\n+{\n+  return i; /* { dg-warning \"10:pointer targets in return differ\" } */\n+}\n+\n+void *\n+fn7 (void (*fp) (void))\n+{\n+  return fp; /* { dg-warning \"10:ISO C forbids return between function pointer\" } */\n+}"}, {"sha": "8dcb0c8ed402fec259a1f8d2c98d01aa5fc94c49", "filename": "gcc/testsuite/gcc.dg/pr61162.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6e07c515168d331a0e05673b7994a5b189ef112f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61162.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6e07c515168d331a0e05673b7994a5b189ef112f/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61162.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr61162.c?ref=6e07c515168d331a0e05673b7994a5b189ef112f", "patch": "@@ -8,5 +8,5 @@ fn1 (void)\n {\n   enum e e, q = 0; /* { dg-warning \"17:enum conversion in initialization is invalid\" } */\n   e = 0; /* { dg-warning \"5:enum conversion in assignment is invalid\" } */\n-  1; return 0; /* { dg-warning \"6:enum conversion in return is invalid\" } */\n+  1; return 0; /* { dg-warning \"13:enum conversion in return is invalid\" } */\n }"}]}