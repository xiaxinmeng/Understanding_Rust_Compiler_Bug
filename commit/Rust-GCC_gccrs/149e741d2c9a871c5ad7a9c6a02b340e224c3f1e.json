{"sha": "149e741d2c9a871c5ad7a9c6a02b340e224c3f1e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTQ5ZTc0MWQyYzlhODcxYzVhZDdhOWM2YTAyYjM0MGUyMjRjM2YxZQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-07-25T03:35:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2011-07-25T03:35:05Z"}, "message": "re PR debug/49831 (arm-linux-gnueabi bootstrap failures due to ICE in dwarf2cfi.c connect_traces)\n\nPR debug/49831\n        * dwarf2cfi.c (connect_traces): Allow unvisited traces.  Skip\n        them entirely.\n\nConstant pools are emitted in such a way as to be indistinguishable\nfrom regular instructions, and these constant pools are, naturally,\nnot reachable as code.\n\nFrom-SVN: r176730", "tree": {"sha": "edaac187ab7ab954523b81582bcb347e7ba52515", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/edaac187ab7ab954523b81582bcb347e7ba52515"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/149e741d2c9a871c5ad7a9c6a02b340e224c3f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149e741d2c9a871c5ad7a9c6a02b340e224c3f1e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/149e741d2c9a871c5ad7a9c6a02b340e224c3f1e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/149e741d2c9a871c5ad7a9c6a02b340e224c3f1e/comments", "author": null, "committer": null, "parents": [{"sha": "981dc73548710dcf4df7754d60e95f6b5fa48910", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/981dc73548710dcf4df7754d60e95f6b5fa48910", "html_url": "https://github.com/Rust-GCC/gccrs/commit/981dc73548710dcf4df7754d60e95f6b5fa48910"}], "stats": {"total": 22, "additions": 19, "deletions": 3}, "files": [{"sha": "31c140d9d3569e15c233ffcd3fe01ac0c81d539a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149e741d2c9a871c5ad7a9c6a02b340e224c3f1e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149e741d2c9a871c5ad7a9c6a02b340e224c3f1e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=149e741d2c9a871c5ad7a9c6a02b340e224c3f1e", "patch": "@@ -1,3 +1,9 @@\n+2011-07-24  Richard Henderson  <rth@redhat.com>\n+\n+\tPR debug/49831\n+\t* dwarf2cfi.c (connect_traces): Allow unvisited traces.  Skip\n+\tthem entirely.\n+\n 2011-07-24  Richard Henderson  <rth@redhat.com>\n \n \tPR debug/49825"}, {"sha": "57fe566baf9890973d9421654d745f800af98d53", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/149e741d2c9a871c5ad7a9c6a02b340e224c3f1e/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/149e741d2c9a871c5ad7a9c6a02b340e224c3f1e/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=149e741d2c9a871c5ad7a9c6a02b340e224c3f1e", "patch": "@@ -2641,14 +2641,22 @@ connect_traces (void)\n \n   prev_ti = VEC_index (dw_trace_info, trace_info, 0);\n \n-  for (i = 1; i < n; ++i, prev_ti = ti)\n+  for (i = 1; i < n; ++i)\n     {\n       dw_cfi_row *old_row;\n \n       ti = VEC_index (dw_trace_info, trace_info, i);\n \n-      /* We must have both queued and processed every trace.  */\n-      gcc_assert (ti->beg_row && ti->end_row);\n+      /* ??? Ideally, we should have both queued and processed.  However\n+\t the current representation of constant pools on various targets\n+\t is indistinguishable from unreachable code.  Assume for the \n+\t moment that we can simply skip over such traces.  */\n+      /* ??? Consider creating a DATA_INSN rtx code to indicate that\n+\t these are not \"real\" instructions, and should not be considered.\n+\t This could be generically useful for tablejump data as well.  */\n+      if (ti->beg_row == NULL)\n+\tcontinue;\n+      gcc_assert (ti->end_row != NULL);\n \n       /* In dwarf2out_switch_text_section, we'll begin a new FDE\n \t for the portion of the function in the alternate text\n@@ -2677,6 +2685,8 @@ connect_traces (void)\n \t    }\n \t  while (note != add_cfi_insn);\n \t}\n+\n+      prev_ti = ti;\n     }\n }\n "}]}