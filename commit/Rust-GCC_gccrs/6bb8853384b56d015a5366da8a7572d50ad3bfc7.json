{"sha": "6bb8853384b56d015a5366da8a7572d50ad3bfc7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJiODg1MzM4NGI1NmQwMTVhNTM2NmRhOGE3NTcyZDUwYWQzYmZjNw==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T09:25:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T09:25:46Z"}, "message": "[multiple changes]\n\n2011-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* aspects.ads (Boolean_Aspects): New subtype.\n\t* exp_ch13.adb (Expand_Freeze_Entity): Fix errors in handling aspects\n\tfor derived types in cases where the parent type and derived type have\n\taspects.\n\t* freeze.adb (Freeze_Entity): Fix problems in handling derived type\n\twith aspects when parent type also has aspects.\n\t(Freeze_Entity): Deal with delay of boolean aspects (must evaluate\n\tboolean expression at this point).\n\t* sem_ch13.adb (Analyze_Aspect_Specifications): Delay all aspects in\n\taccordance with final decision on the Ada 2012 feature.\n\t* sinfo.ads, sinfo.adb (Is_Boolean_Aspect): New flag.\n\n2011-08-01  Matthew Heaney  <heaney@adacore.com>\n\n\t* a-chtgbo.adb (Delete_Node_Sans_Free): Replace iterator with selector.\n\nFrom-SVN: r177005", "tree": {"sha": "4ad614e2c8327baf70062e1362be345789d1a42d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ad614e2c8327baf70062e1362be345789d1a42d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bb8853384b56d015a5366da8a7572d50ad3bfc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb8853384b56d015a5366da8a7572d50ad3bfc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bb8853384b56d015a5366da8a7572d50ad3bfc7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bb8853384b56d015a5366da8a7572d50ad3bfc7/comments", "author": null, "committer": null, "parents": [{"sha": "060a3f289f9c442174aea0599b5d609433f00952", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/060a3f289f9c442174aea0599b5d609433f00952", "html_url": "https://github.com/Rust-GCC/gccrs/commit/060a3f289f9c442174aea0599b5d609433f00952"}], "stats": {"total": 297, "additions": 150, "deletions": 147}, "files": [{"sha": "3d054405b6ca0189d4d75f93cbf01dfe90688473", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=6bb8853384b56d015a5366da8a7572d50ad3bfc7", "patch": "@@ -1,3 +1,21 @@\n+2011-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* aspects.ads (Boolean_Aspects): New subtype.\n+\t* exp_ch13.adb (Expand_Freeze_Entity): Fix errors in handling aspects\n+\tfor derived types in cases where the parent type and derived type have\n+\taspects.\n+\t* freeze.adb (Freeze_Entity): Fix problems in handling derived type\n+\twith aspects when parent type also has aspects.\n+\t(Freeze_Entity): Deal with delay of boolean aspects (must evaluate\n+\tboolean expression at this point).\n+\t* sem_ch13.adb (Analyze_Aspect_Specifications): Delay all aspects in\n+\taccordance with final decision on the Ada 2012 feature.\n+\t* sinfo.ads, sinfo.adb (Is_Boolean_Aspect): New flag.\n+\n+2011-08-01  Matthew Heaney  <heaney@adacore.com>\n+\n+\t* a-chtgbo.adb (Delete_Node_Sans_Free): Replace iterator with selector.\n+\n 2011-08-01  Pascal Obry  <obry@adacore.com>\n \n \t* a-stzunb-shared.adb, a-strunb-shared.adb, a-stwiun-shared.adb:"}, {"sha": "b19668e1391ccce724210456da14163b2118523d", "filename": "gcc/ada/a-chtgbo.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Fa-chtgbo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Fa-chtgbo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-chtgbo.adb?ref=6bb8853384b56d015a5366da8a7572d50ad3bfc7", "patch": "@@ -78,7 +78,7 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Operations is\n       end if;\n \n       if Prev = X then\n-         HT.Buckets (Indx) := Next (HT, Prev);\n+         HT.Buckets (Indx) := Next (HT.Nodes (Prev));\n          HT.Length := HT.Length - 1;\n          return;\n       end if;\n@@ -89,15 +89,15 @@ package body Ada.Containers.Hash_Tables.Generic_Bounded_Operations is\n       end if;\n \n       loop\n-         Curr := Next (HT, Prev);\n+         Curr := Next (HT.Nodes (Prev));\n \n          if Curr = 0 then\n             raise Program_Error with\n               \"attempt to delete node not in its proper hash bucket\";\n          end if;\n \n          if Curr = X then\n-            Set_Next (HT.Nodes (Prev), Next => Next (HT, Curr));\n+            Set_Next (HT.Nodes (Prev), Next => Next (HT.Nodes (Curr)));\n             HT.Length := HT.Length - 1;\n             return;\n          end if;"}, {"sha": "6dabef3dfcc6d2d9942b39994721ce01d7f73b5f", "filename": "gcc/ada/aspects.ads", "status": "modified", "additions": 37, "deletions": 43, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Faspects.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Faspects.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Faspects.ads?ref=6bb8853384b56d015a5366da8a7572d50ad3bfc7", "patch": "@@ -43,51 +43,56 @@ package Aspects is\n \n    type Aspect_Id is\n      (No_Aspect,                            -- Dummy entry for no aspect\n-      Aspect_Ada_2005,                      -- GNAT\n-      Aspect_Ada_2012,                      -- GNAT\n       Aspect_Address,\n       Aspect_Alignment,\n-      Aspect_Atomic,\n-      Aspect_Atomic_Components,\n       Aspect_Bit_Order,\n       Aspect_Component_Size,\n-      Aspect_Discard_Names,\n       Aspect_External_Tag,\n-      Aspect_Favor_Top_Level,               -- GNAT\n-      Aspect_Inline,\n-      Aspect_Inline_Always,                 -- GNAT\n       Aspect_Input,\n       Aspect_Invariant,\n       Aspect_Machine_Radix,\n-      Aspect_No_Return,\n       Aspect_Object_Size,                   -- GNAT\n       Aspect_Output,\n-      Aspect_Pack,\n-      Aspect_Persistent_BSS,                -- GNAT\n       Aspect_Post,\n       Aspect_Pre,\n-      Aspect_Predicate,                     -- GNAT???\n-      Aspect_Preelaborable_Initialization,\n-      Aspect_Pure_Function,                 -- GNAT\n+      Aspect_Predicate,\n       Aspect_Read,\n-      Aspect_Shared,                        -- GNAT (equivalent to Atomic)\n       Aspect_Size,\n       Aspect_Storage_Pool,\n       Aspect_Storage_Size,\n       Aspect_Stream_Size,\n       Aspect_Suppress,\n+      Aspect_Unsuppress,\n+      Aspect_Value_Size,                    -- GNAT\n+      Aspect_Warnings,\n+      Aspect_Write,\n+\n+      --  Remaining aspects have a static boolean value that turns the aspect\n+      --  on or off. They all correspond to pragmas, and the flag Aspect_Cancel\n+      --  is set on the pragma if the corresponding aspect is False.\n+\n+      Aspect_Ada_2005,                      -- GNAT\n+      Aspect_Ada_2012,                      -- GNAT\n+      Aspect_Atomic,\n+      Aspect_Atomic_Components,\n+      Aspect_Discard_Names,\n+      Aspect_Favor_Top_Level,               -- GNAT\n+      Aspect_Inline,\n+      Aspect_Inline_Always,                 -- GNAT\n+      Aspect_No_Return,\n+      Aspect_Pack,\n+      Aspect_Persistent_BSS,                -- GNAT\n+      Aspect_Preelaborable_Initialization,\n+      Aspect_Pure_Function,                 -- GNAT\n+      Aspect_Shared,                        -- GNAT (equivalent to Atomic)\n       Aspect_Suppress_Debug_Info,           -- GNAT\n       Aspect_Unchecked_Union,\n       Aspect_Universal_Aliasing,            -- GNAT\n       Aspect_Unmodified,                    -- GNAT\n       Aspect_Unreferenced,                  -- GNAT\n       Aspect_Unreferenced_Objects,          -- GNAT\n-      Aspect_Unsuppress,\n-      Aspect_Value_Size,                    -- GNAT\n       Aspect_Volatile,\n-      Aspect_Volatile_Components,\n-      Aspect_Warnings,\n-      Aspect_Write);                        -- GNAT\n+      Aspect_Volatile_Components);\n \n    --  The following array indicates aspects that accept 'Class\n \n@@ -98,6 +103,16 @@ package Aspects is\n                         Aspect_Post          => True,\n                         others               => False);\n \n+   --  The following subtype defines aspects accepting an optional static\n+   --  boolean parameter indicating if the aspect should be active or\n+   --  cancelling. If the parameter is missing the effective value is True,\n+   --  enabling the aspect. If the parameter is present it must be a static\n+   --  expression of type Standard.Boolean. If the value is True, then the\n+   --  aspect is enabled. If it is False, the aspect is disabled.\n+\n+   subtype Boolean_Aspects is\n+     Aspect_Id range Aspect_Ada_2005 .. Aspect_Id'Last;\n+\n    --  The following type is used for indicating allowed expression forms\n \n    type Aspect_Expression is\n@@ -109,51 +124,30 @@ package Aspects is\n \n    Aspect_Argument : constant array (Aspect_Id) of Aspect_Expression :=\n                        (No_Aspect                           => Optional,\n-                        Aspect_Ada_2005                     => Optional,\n-                        Aspect_Ada_2012                     => Optional,\n                         Aspect_Address                      => Expression,\n                         Aspect_Alignment                    => Expression,\n-                        Aspect_Atomic                       => Optional,\n-                        Aspect_Atomic_Components            => Optional,\n                         Aspect_Bit_Order                    => Expression,\n                         Aspect_Component_Size               => Expression,\n-                        Aspect_Discard_Names                => Optional,\n                         Aspect_External_Tag                 => Expression,\n-                        Aspect_Favor_Top_Level              => Optional,\n-                        Aspect_Inline                       => Optional,\n-                        Aspect_Inline_Always                => Optional,\n                         Aspect_Input                        => Name,\n                         Aspect_Invariant                    => Expression,\n                         Aspect_Machine_Radix                => Expression,\n-                        Aspect_No_Return                    => Optional,\n                         Aspect_Object_Size                  => Expression,\n                         Aspect_Output                       => Name,\n-                        Aspect_Persistent_BSS               => Optional,\n-                        Aspect_Pack                         => Optional,\n                         Aspect_Post                         => Expression,\n                         Aspect_Pre                          => Expression,\n                         Aspect_Predicate                    => Expression,\n-                        Aspect_Preelaborable_Initialization => Optional,\n-                        Aspect_Pure_Function                => Optional,\n                         Aspect_Read                         => Name,\n-                        Aspect_Shared                       => Optional,\n                         Aspect_Size                         => Expression,\n                         Aspect_Storage_Pool                 => Name,\n                         Aspect_Storage_Size                 => Expression,\n                         Aspect_Stream_Size                  => Expression,\n                         Aspect_Suppress                     => Name,\n-                        Aspect_Suppress_Debug_Info          => Optional,\n-                        Aspect_Unchecked_Union              => Optional,\n-                        Aspect_Universal_Aliasing           => Optional,\n-                        Aspect_Unmodified                   => Optional,\n-                        Aspect_Unreferenced                 => Optional,\n-                        Aspect_Unreferenced_Objects         => Optional,\n                         Aspect_Unsuppress                   => Name,\n                         Aspect_Value_Size                   => Expression,\n-                        Aspect_Volatile                     => Optional,\n-                        Aspect_Volatile_Components          => Optional,\n                         Aspect_Warnings                     => Name,\n-                        Aspect_Write                        => Name);\n+                        Aspect_Write                        => Name,\n+                        Boolean_Aspects                     => Optional);\n \n    function Get_Aspect_Id (Name : Name_Id) return Aspect_Id;\n    pragma Inline (Get_Aspect_Id);"}, {"sha": "47e39c4f38bf66f9b7a5c7ee47db3ddd5739a710", "filename": "gcc/ada/exp_ch13.adb", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Fexp_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Fexp_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch13.adb?ref=6bb8853384b56d015a5366da8a7572d50ad3bfc7", "patch": "@@ -232,9 +232,13 @@ package body Exp_Ch13 is\n             Ritem : Node_Id;\n \n          begin\n+            --  Look for aspect specs for this entity\n+\n             Ritem := First_Rep_Item (E);\n             while Present (Ritem) loop\n-               if Nkind (Ritem) = N_Aspect_Specification then\n+               if Nkind (Ritem) = N_Aspect_Specification\n+                 and then Entity (Ritem) = E\n+               then\n                   Aitem := Aspect_Rep_Item (Ritem);\n                   pragma Assert (Is_Delayed_Aspect (Aitem));\n                   Insert_Before (N, Aitem);\n@@ -288,7 +292,7 @@ package body Exp_Ch13 is\n \n       if Ekind (E_Scope) = E_Protected_Type\n         or else (Ekind (E_Scope) = E_Task_Type\n-                   and then not Has_Completion (E_Scope))\n+                  and then not Has_Completion (E_Scope))\n       then\n          E_Scope := Scope (E_Scope);\n "}, {"sha": "545175f8ffd57f89614748d01ce6b33c3199cec8", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 38, "deletions": 4, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=6bb8853384b56d015a5366da8a7572d50ad3bfc7", "patch": "@@ -2370,24 +2370,58 @@ package body Freeze is\n          end;\n       end if;\n \n-      --  Deal with delayed aspect specifications. At the point of occurrence\n-      --  of the aspect definition, we preanalyzed the argument, to capture\n-      --  the visibility at that point, but the actual analysis of the aspect\n+      --  Deal with delayed aspect specifications. The analysis of the aspect\n       --  is required to be delayed to the freeze point, so we evaluate the\n       --  pragma or attribute definition clause in the tree at this point.\n \n+      --  We also have to deal with the case of Boolean aspects, where the\n+      --  value of the Boolean expression is represented by the setting of\n+      --  the Aspect_Cancel flag on the pragma.\n+\n       if Has_Delayed_Aspects (E) then\n          declare\n             Ritem : Node_Id;\n             Aitem : Node_Id;\n \n          begin\n+            --  Look for aspect specification entries for this entity\n+\n             Ritem := First_Rep_Item (E);\n             while Present (Ritem) loop\n-               if Nkind (Ritem) = N_Aspect_Specification then\n+               if Nkind (Ritem) = N_Aspect_Specification\n+                 and then Entity (Ritem) = E\n+               then\n                   Aitem := Aspect_Rep_Item (Ritem);\n                   pragma Assert (Is_Delayed_Aspect (Aitem));\n                   Set_Parent (Aitem, Ritem);\n+\n+                  --  Deal with Boolean case, if no expression, True, otherwise\n+                  --  analyze the expression, check it is static, and if its\n+                  --  value is False, set Aspect_Cancel for the related pragma.\n+\n+                  if Is_Boolean_Aspect (Ritem) then\n+                     declare\n+                        Expr : constant Node_Id := Expression (Ritem);\n+\n+                     begin\n+                        if Present (Expr) then\n+                           Analyze_And_Resolve (Expr, Standard_Boolean);\n+\n+                           if not Is_OK_Static_Expression (Expr) then\n+                              Error_Msg_Name_1 := Chars (Identifier (Ritem));\n+                              Error_Msg_N\n+                                (\"expression for % aspect must be static\",\n+                                 Expr);\n+\n+                           elsif Is_False (Expr_Value (Expr)) then\n+                              Set_Aspect_Cancel (Aitem);\n+                           end if;\n+                        end if;\n+                     end;\n+                  end if;\n+\n+                  --  Analyze the pragma after possibly setting Aspect_Cancel\n+\n                   Analyze (Aitem);\n                end if;\n "}, {"sha": "dc4b03dcc982ec4309ef2ed94769f0e734bea8f5", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 19, "deletions": 95, "changes": 114, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=6bb8853384b56d015a5366da8a7572d50ad3bfc7", "patch": "@@ -740,7 +740,6 @@ package body Sem_Ch13 is\n             Nam  : constant Name_Id    := Chars (Id);\n             A_Id : constant Aspect_Id  := Get_Aspect_Id (Nam);\n             Anod : Node_Id;\n-            T    : Entity_Id;\n \n             Eloc : Source_Ptr := Sloc (Expr);\n             --  Source location of expression, modified when we split PPC's\n@@ -811,31 +810,12 @@ package body Sem_Ch13 is\n                   raise Program_Error;\n \n                --  Aspects taking an optional boolean argument. For all of\n-               --  these we just create a matching pragma and insert it,\n-               --  setting flag Cancel_Aspect if the expression is False.\n-\n-               when Aspect_Ada_2005                     |\n-                    Aspect_Ada_2012                     |\n-                    Aspect_Atomic                       |\n-                    Aspect_Atomic_Components            |\n-                    Aspect_Discard_Names                |\n-                    Aspect_Favor_Top_Level              |\n-                    Aspect_Inline                       |\n-                    Aspect_Inline_Always                |\n-                    Aspect_No_Return                    |\n-                    Aspect_Pack                         |\n-                    Aspect_Persistent_BSS               |\n-                    Aspect_Preelaborable_Initialization |\n-                    Aspect_Pure_Function                |\n-                    Aspect_Shared                       |\n-                    Aspect_Suppress_Debug_Info          |\n-                    Aspect_Unchecked_Union              |\n-                    Aspect_Universal_Aliasing           |\n-                    Aspect_Unmodified                   |\n-                    Aspect_Unreferenced                 |\n-                    Aspect_Unreferenced_Objects         |\n-                    Aspect_Volatile                     |\n-                    Aspect_Volatile_Components          =>\n+               --  these we just create a matching pragma and insert it. When\n+               --  the aspect is processed to insert the pragma, the expression\n+               --  is analyzed, setting Cancel_Aspect if the value is False.\n+\n+               when Boolean_Aspects =>\n+                  Set_Is_Boolean_Aspect (Aspect);\n \n                   --  Build corresponding pragma node\n \n@@ -845,32 +825,17 @@ package body Sem_Ch13 is\n                       Pragma_Identifier            =>\n                         Make_Identifier (Sloc (Id), Chars (Id)));\n \n-                  --  Deal with missing expression case, delay never needed\n+                  --  No delay required if no expression (nothing to delay!)\n \n                   if No (Expr) then\n                      Delay_Required := False;\n \n-                  --  Expression is present\n+                  --  Expression is present, delay is required. Note that\n+                  --  even if the expression is \"True\", some idiot might\n+                  --  define True as False before the freeze point!\n \n                   else\n-                     Preanalyze_Spec_Expression (Expr, Standard_Boolean);\n-\n-                     --  If preanalysis gives a static expression, we don't\n-                     --  need to delay (this will happen often in practice).\n-\n-                     if Is_OK_Static_Expression (Expr) then\n-                        Delay_Required := False;\n-\n-                        if Is_False (Expr_Value (Expr)) then\n-                           Set_Aspect_Cancel (Aitem);\n-                        end if;\n-\n-                     --  If we don't get a static expression, then delay, the\n-                     --  expression may turn out static by freeze time.\n-\n-                     else\n-                        Delay_Required := True;\n-                     end if;\n+                     Delay_Required := True;\n                   end if;\n \n                --  Aspects corresponding to attribute definition clauses\n@@ -880,30 +845,17 @@ package body Sem_Ch13 is\n                     Aspect_Bit_Order      |\n                     Aspect_Component_Size |\n                     Aspect_External_Tag   |\n+                    Aspect_Input          |\n                     Aspect_Machine_Radix  |\n                     Aspect_Object_Size    |\n+                    Aspect_Output         |\n+                    Aspect_Read           |\n                     Aspect_Size           |\n                     Aspect_Storage_Pool   |\n                     Aspect_Storage_Size   |\n                     Aspect_Stream_Size    |\n-                    Aspect_Value_Size     =>\n-\n-                  --  Preanalyze the expression with the appropriate type\n-\n-                  case A_Id is\n-                     when Aspect_Address      =>\n-                        T := RTE (RE_Address);\n-                     when Aspect_Bit_Order    =>\n-                        T := RTE (RE_Bit_Order);\n-                     when Aspect_External_Tag =>\n-                        T := Standard_String;\n-                     when Aspect_Storage_Pool =>\n-                        T := Class_Wide_Type (RTE (RE_Root_Storage_Pool));\n-                     when others              =>\n-                        T := Any_Integer;\n-                  end case;\n-\n-                  Preanalyze_Spec_Expression (Expr, T);\n+                    Aspect_Value_Size     |\n+                    Aspect_Write          =>\n \n                   --  Construct the attribute definition clause\n \n@@ -913,16 +865,9 @@ package body Sem_Ch13 is\n                       Chars      => Chars (Id),\n                       Expression => Relocate_Node (Expr));\n \n-                  --  We do not need a delay if we have a static expression\n-\n-                  if Is_OK_Static_Expression (Expression (Aitem)) then\n-                     Delay_Required := False;\n-\n                   --  Here a delay is required\n \n-                  else\n-                     Delay_Required := True;\n-                  end if;\n+                  Delay_Required := True;\n \n                --  Aspects corresponding to pragmas with two arguments, where\n                --  the first argument is a local name referring to the entity,\n@@ -946,27 +891,6 @@ package body Sem_Ch13 is\n \n                   Delay_Required := False;\n \n-               --  Aspects corresponding to stream routines\n-\n-               when Aspect_Input  |\n-                    Aspect_Output |\n-                    Aspect_Read   |\n-                    Aspect_Write  =>\n-\n-                  --  Construct the attribute definition clause\n-\n-                  Aitem :=\n-                    Make_Attribute_Definition_Clause (Loc,\n-                      Name       => Ent,\n-                      Chars      => Chars (Id),\n-                      Expression => Relocate_Node (Expr));\n-\n-                  --  These are always delayed (typically the subprogram that\n-                  --  is referenced cannot have been declared yet, since it has\n-                  --  a reference to the type for which this aspect is defined.\n-\n-                  Delay_Required := True;\n-\n                --  Aspects corresponding to pragmas with two arguments, where\n                --  the second argument is a local name referring to the entity,\n                --  and the first argument is the aspect definition expression.\n@@ -985,7 +909,7 @@ package body Sem_Ch13 is\n                       Class_Present                => Class_Present (Aspect));\n \n                   --  We don't have to play the delay game here, since the only\n-                  --  values are check names which don't get analyzed anyway.\n+                  --  values are ON/OFF which don't get analyzed anyway.\n \n                   Delay_Required := False;\n \n@@ -1015,7 +939,7 @@ package body Sem_Ch13 is\n                   --  these conditions together in a complex OR expression\n \n                   if Pname = Name_Postcondition\n-                       or else not Class_Present (Aspect)\n+                    or else not Class_Present (Aspect)\n                   then\n                      while Nkind (Expr) = N_And_Then loop\n                         Insert_After (Aspect,"}, {"sha": "5729924cceb022cb6cfd8f0cee8766f54d844aae", "filename": "gcc/ada/sinfo.adb", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Fsinfo.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Fsinfo.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.adb?ref=6bb8853384b56d015a5366da8a7572d50ad3bfc7", "patch": "@@ -1696,6 +1696,14 @@ package body Sinfo is\n       return Flag7 (N);\n    end Is_Asynchronous_Call_Block;\n \n+   function Is_Boolean_Aspect\n+      (N : Node_Id) return Boolean is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Aspect_Specification);\n+      return Flag16 (N);\n+   end Is_Boolean_Aspect;\n+\n    function Is_Component_Left_Opnd\n       (N : Node_Id) return Boolean is\n    begin\n@@ -4716,6 +4724,14 @@ package body Sinfo is\n       Set_Flag7 (N, Val);\n    end Set_Is_Asynchronous_Call_Block;\n \n+   procedure Set_Is_Boolean_Aspect\n+      (N : Node_Id; Val : Boolean := True) is\n+   begin\n+      pragma Assert (False\n+        or else NT (N).Nkind = N_Aspect_Specification);\n+      Set_Flag16 (N, Val);\n+   end Set_Is_Boolean_Aspect;\n+\n    procedure Set_Is_Component_Left_Opnd\n       (N : Node_Id; Val : Boolean := True) is\n    begin"}, {"sha": "e582d7bac08a9719a2b1029808b00142435ec40d", "filename": "gcc/ada/sinfo.ads", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Fsinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bb8853384b56d015a5366da8a7572d50ad3bfc7/gcc%2Fada%2Fsinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsinfo.ads?ref=6bb8853384b56d015a5366da8a7572d50ad3bfc7", "patch": "@@ -1252,6 +1252,10 @@ package Sinfo is\n    --    expansion of an asynchronous entry call. Such a block needs cleanup\n    --    handler to assure that the call is cancelled.\n \n+   --  Is_Boolean_Aspect (Flag16-Sem)\n+   --    Present in N_Aspect_Specification node. Set if the aspect is for a\n+   --    boolean aspect (i.e. Aspect_Id is in Boolean_Aspect subtype).\n+\n    --  Is_Component_Left_Opnd  (Flag13-Sem)\n    --  Is_Component_Right_Opnd (Flag14-Sem)\n    --    Present in concatenation nodes, to indicate that the corresponding\n@@ -6543,6 +6547,7 @@ package Sinfo is\n       --  Class_Present (Flag6) Set if 'Class present\n       --  Next_Rep_Item (Node5-Sem)\n       --  Split_PPC (Flag17) Set if split pre/post attribute\n+      --  Is_Boolean_Aspect (Flag16-Sem)\n \n       --  Note: Aspect_Specification is an Ada 2012 feature\n \n@@ -8487,6 +8492,9 @@ package Sinfo is\n    function Is_Asynchronous_Call_Block\n      (N : Node_Id) return Boolean;    -- Flag7\n \n+   function Is_Boolean_Aspect\n+     (N : Node_Id) return Boolean;    -- Flag16\n+\n    function Is_Component_Left_Opnd\n      (N : Node_Id) return Boolean;    -- Flag13\n \n@@ -9450,6 +9458,9 @@ package Sinfo is\n    procedure Set_Is_Asynchronous_Call_Block\n      (N : Node_Id; Val : Boolean := True);    -- Flag7\n \n+   procedure Set_Is_Boolean_Aspect\n+     (N : Node_Id; Val : Boolean := True);    -- Flag16\n+\n    procedure Set_Is_Component_Left_Opnd\n      (N : Node_Id; Val : Boolean := True);    -- Flag13\n \n@@ -11793,6 +11804,7 @@ package Sinfo is\n    pragma Inline (Iterator_Specification);\n    pragma Inline (Is_Accessibility_Actual);\n    pragma Inline (Is_Asynchronous_Call_Block);\n+   pragma Inline (Is_Boolean_Aspect);\n    pragma Inline (Is_Component_Left_Opnd);\n    pragma Inline (Is_Component_Right_Opnd);\n    pragma Inline (Is_Controlling_Actual);\n@@ -12110,6 +12122,7 @@ package Sinfo is\n    pragma Inline (Set_Iterator_Specification);\n    pragma Inline (Set_Is_Accessibility_Actual);\n    pragma Inline (Set_Is_Asynchronous_Call_Block);\n+   pragma Inline (Set_Is_Boolean_Aspect);\n    pragma Inline (Set_Is_Component_Left_Opnd);\n    pragma Inline (Set_Is_Component_Right_Opnd);\n    pragma Inline (Set_Is_Controlling_Actual);"}]}