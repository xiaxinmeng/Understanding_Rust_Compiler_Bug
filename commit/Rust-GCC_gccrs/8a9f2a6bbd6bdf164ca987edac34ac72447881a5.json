{"sha": "8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGE5ZjJhNmJiZDZiZGYxNjRjYTk4N2VkYWMzNGFjNzI0NDc4ODFhNQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-15T01:57:51Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-02-15T01:57:51Z"}, "message": "compiler, runtime: harmonize types referenced by both C and Go\n    \n    Compiling with LTO revealed a number of cases in the runtime and\n    standard library where C and Go disagreed about the type of an object or\n    function (or where Go and code generated by the compiler disagreed). In\n    all cases the underlying representation was the same (e.g., uintptr vs.\n    void*), so this wasn't causing actual problems, but it did result in a\n    number of annoying warnings when compiling with LTO.\n    \n    Reviewed-on: https://go-review.googlesource.com/c/160700\n\nFrom-SVN: r268923", "tree": {"sha": "0722c462bd08d8478a0d1861b10b9f966193505e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0722c462bd08d8478a0d1861b10b9f966193505e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/comments", "author": null, "committer": null, "parents": [{"sha": "c8530c410972f09b88bb143e5e5a4910bd72b2ee", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c8530c410972f09b88bb143e5e5a4910bd72b2ee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c8530c410972f09b88bb143e5e5a4910bd72b2ee"}], "stats": {"total": 205, "additions": 100, "deletions": 105}, "files": [{"sha": "4b603d994fd962fce114b2f2ef086259537362d1", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -1,4 +1,4 @@\n-4a6f2bb2c8d3f00966f001a5b03c57cb4a278265\n+03e28273a4fcb114f5204d52ed107591404002f4\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "d46c7543bd906918814491a9d136844a366ba5ec", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -1344,7 +1344,7 @@ Func_descriptor_expression::make_func_descriptor_type()\n   if (Func_descriptor_expression::descriptor_type != NULL)\n     return;\n   Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n-  Type* struct_type = Type::make_builtin_struct_type(1, \"code\", uintptr_type);\n+  Type* struct_type = Type::make_builtin_struct_type(1, \"fn\", uintptr_type);\n   Func_descriptor_expression::descriptor_type =\n     Type::make_builtin_named_type(\"functionDescriptor\", struct_type);\n }\n@@ -3874,7 +3874,9 @@ Unsafe_type_conversion_expression::do_get_backend(Translate_context* context)\n \t      || et->integer_type() != NULL\n               || et->is_nil_type());\n   else if (et->is_unsafe_pointer_type())\n-    go_assert(t->points_to() != NULL);\n+    go_assert(t->points_to() != NULL\n+\t      || (t->integer_type() != NULL\n+\t\t  && t->integer_type() == Type::lookup_integer_type(\"uintptr\")->real_type()));\n   else if (t->interface_type() != NULL)\n     {\n       bool empty_iface = t->interface_type()->is_empty();"}, {"sha": "9bd25facbff470b23e9bbc16ef5e054d9fde76ce", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -4513,13 +4513,13 @@ Build_recover_thunks::can_recover_arg(Location location)\n     builtin_return_address =\n       Gogo::declare_builtin_rf_address(\"__builtin_return_address\");\n \n+  Type* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n   static Named_object* can_recover;\n   if (can_recover == NULL)\n     {\n       const Location bloc = Linemap::predeclared_location();\n       Typed_identifier_list* param_types = new Typed_identifier_list();\n-      Type* voidptr_type = Type::make_pointer_type(Type::make_void_type());\n-      param_types->push_back(Typed_identifier(\"a\", voidptr_type, bloc));\n+      param_types->push_back(Typed_identifier(\"a\", uintptr_type, bloc));\n       Type* boolean_type = Type::lookup_bool_type();\n       Typed_identifier_list* results = new Typed_identifier_list();\n       results->push_back(Typed_identifier(\"\", boolean_type, bloc));\n@@ -4539,6 +4539,7 @@ Build_recover_thunks::can_recover_arg(Location location)\n   args->push_back(zexpr);\n \n   Expression* call = Expression::make_call(fn, args, false, location);\n+  call = Expression::make_unsafe_cast(uintptr_type, call, location);\n \n   args = new Expression_list();\n   args->push_back(call);"}, {"sha": "7ecbf6894090fc71edfffbccc4a666b164e6f29f", "filename": "gcc/go/gofrontend/runtime.cc", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.cc?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -60,8 +60,6 @@ enum Runtime_function_type\n   RFT_IFACE,\n   // Go type interface{}, C type struct __go_empty_interface.\n   RFT_EFACE,\n-  // Go type func(unsafe.Pointer), C type void (*) (void *).\n-  RFT_FUNC_PTR,\n   // Pointer to Go type descriptor.\n   RFT_TYPE,\n   // [2]string.\n@@ -176,15 +174,6 @@ runtime_function_type(Runtime_function_type bft)\n \t  t = Type::make_empty_interface_type(bloc);\n \t  break;\n \n-\tcase RFT_FUNC_PTR:\n-\t  {\n-\t    Typed_identifier_list* param_types = new Typed_identifier_list();\n-\t    Type* ptrtype = runtime_function_type(RFT_POINTER);\n-\t    param_types->push_back(Typed_identifier(\"\", ptrtype, bloc));\n-\t    t = Type::make_function_type(NULL, param_types, NULL, bloc);\n-\t  }\n-\t  break;\n-\n \tcase RFT_TYPE:\n \t  t = Type::make_type_descriptor_ptr_type();\n \t  break;\n@@ -265,7 +254,6 @@ convert_to_runtime_function_type(Runtime_function_type bft, Expression* e,\n     case RFT_COMPLEX128:\n     case RFT_STRING:\n     case RFT_POINTER:\n-    case RFT_FUNC_PTR:\n       {\n \tType* t = runtime_function_type(bft);\n \tif (!Type::are_identical(t, e->type(), true, NULL))"}, {"sha": "273c86040913efab8bd92cba3124912b3548e749", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -168,10 +168,10 @@ DEF_GO_RUNTIME(GORECOVER, \"runtime.gorecover\", P0(), R1(EFACE))\n DEF_GO_RUNTIME(DEFERREDRECOVER, \"runtime.deferredrecover\", P0(), R1(EFACE))\n \n // Decide whether this function can call recover.\n-DEF_GO_RUNTIME(CANRECOVER, \"runtime.canrecover\", P1(POINTER), R1(BOOL))\n+DEF_GO_RUNTIME(CANRECOVER, \"runtime.canrecover\", P1(UINTPTR), R1(BOOL))\n \n // Set the return address for defer in a defer thunk.\n-DEF_GO_RUNTIME(SETDEFERRETADDR, \"runtime.setdeferretaddr\", P1(POINTER),\n+DEF_GO_RUNTIME(SETDEFERRETADDR, \"runtime.setdeferretaddr\", P1(UINTPTR),\n \t       R1(BOOL))\n \n // Check for a deferred function in an exception handler.\n@@ -213,10 +213,10 @@ DEF_GO_RUNTIME(REGISTER_GC_ROOTS, \"runtime.registerGCRoots\", P1(POINTER), R0())\n DEF_GO_RUNTIME(NEW, \"runtime.newobject\", P1(TYPE), R1(POINTER))\n \n // Start a new goroutine.\n-DEF_GO_RUNTIME(GO, \"__go_go\", P2(FUNC_PTR, POINTER), R0())\n+DEF_GO_RUNTIME(GO, \"__go_go\", P2(UINTPTR, POINTER), R1(POINTER))\n \n // Defer a function.\n-DEF_GO_RUNTIME(DEFERPROC, \"runtime.deferproc\", P3(BOOLPTR, FUNC_PTR, POINTER),\n+DEF_GO_RUNTIME(DEFERPROC, \"runtime.deferproc\", P3(BOOLPTR, UINTPTR, POINTER),\n \t       R0())\n \n \n@@ -303,7 +303,7 @@ DEF_GO_RUNTIME(IFACEEFACEEQ, \"runtime.ifaceefaceeq\", P2(IFACE, EFACE),\n \n // Set *dst = src where dst is a pointer to a pointer and src is a pointer.\n DEF_GO_RUNTIME(GCWRITEBARRIER, \"runtime.gcWriteBarrier\",\n-\t       P2(POINTER, POINTER), R0())\n+\t       P2(POINTER, UINTPTR), R0())\n \n // Set *dst = *src for an arbitrary type.\n DEF_GO_RUNTIME(TYPEDMEMMOVE, \"runtime.typedmemmove\","}, {"sha": "04619d3f31fbf50b6a34008b1f06ff6eeabef8f9", "filename": "gcc/go/gofrontend/wb.cc", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/gcc%2Fgo%2Fgofrontend%2Fwb.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fwb.cc?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -664,11 +664,19 @@ Gogo::write_barrier_variable()\n     {\n       Location bloc = Linemap::predeclared_location();\n \n-      // We pretend that writeBarrier is a uint32, so that we do a\n-      // 32-bit load.  That is what the gc toolchain does.\n-      Type* uint32_type = Type::lookup_integer_type(\"uint32\");\n-      Variable* var = new Variable(uint32_type, NULL, true, false, false,\n-\t\t\t\t   bloc);\n+      Type* bool_type = Type::lookup_bool_type();\n+      Array_type* pad_type = Type::make_array_type(this->lookup_global(\"byte\")->type_value(),\n+\t\t\t\t\t\t   Expression::make_integer_ul(3, NULL, bloc));\n+      Type* uint64_type = Type::lookup_integer_type(\"uint64\");\n+      Type* wb_type = Type::make_builtin_struct_type(5,\n+\t\t\t\t\t\t     \"enabled\", bool_type,\n+\t\t\t\t\t\t     \"pad\", pad_type,\n+\t\t\t\t\t\t     \"needed\", bool_type,\n+\t\t\t\t\t\t     \"cgo\", bool_type,\n+\t\t\t\t\t\t     \"alignme\", uint64_type);\n+\n+      Variable* var = new Variable(wb_type, NULL,\n+\t\t\t\t    true, false, false, bloc);\n \n       bool add_to_globals;\n       Package* package = this->add_imported_package(\"runtime\", \"_\", false,\n@@ -850,8 +858,12 @@ Gogo::assign_with_write_barrier(Function* function, Block* enclosing,\n     case Type::TYPE_FUNCTION:\n     case Type::TYPE_MAP:\n     case Type::TYPE_CHANNEL:\n-      // These types are all represented by a single pointer.\n-      call = Runtime::make_call(Runtime::GCWRITEBARRIER, loc, 2, lhs, rhs);\n+      {\n+\t// These types are all represented by a single pointer.\n+\tType* uintptr_type = Type::lookup_integer_type(\"uintptr\");\n+\trhs = Expression::make_unsafe_cast(uintptr_type, rhs, loc);\n+\tcall = Runtime::make_call(Runtime::GCWRITEBARRIER, loc, 2, lhs, rhs);\n+      }\n       break;\n \n     case Type::TYPE_STRING:\n@@ -882,7 +894,17 @@ Gogo::check_write_barrier(Block* enclosing, Statement* without,\n {\n   Location loc = without->location();\n   Named_object* wb = this->write_barrier_variable();\n+  // We pretend that writeBarrier is a uint32, so that we do a\n+  // 32-bit load.  That is what the gc toolchain does.\n+  Type* void_type = Type::make_void_type();\n+  Type* unsafe_pointer_type = Type::make_pointer_type(void_type);\n+  Type* uint32_type = Type::lookup_integer_type(\"uint32\");\n+  Type* puint32_type = Type::make_pointer_type(uint32_type);\n   Expression* ref = Expression::make_var_reference(wb, loc);\n+  ref = Expression::make_unary(OPERATOR_AND, ref, loc);\n+  ref = Expression::make_cast(unsafe_pointer_type, ref, loc);\n+  ref = Expression::make_cast(puint32_type, ref, loc);\n+  ref = Expression::make_unary(OPERATOR_MULT, ref, loc);\n   Expression* zero = Expression::make_integer_ul(0, ref->type(), loc);\n   Expression* cond = Expression::make_binary(OPERATOR_EQEQ, ref, zero, loc);\n "}, {"sha": "b8c91ac29a1c240f7bebdaac5ca5e3d15913f7e9", "filename": "libgo/go/runtime/mgc.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fgo%2Fruntime%2Fmgc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fgo%2Fruntime%2Fmgc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fmgc.go?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -238,7 +238,7 @@ func setGCPercent(in int32) (out int32) {\n var gcphase uint32\n \n // The compiler knows about this variable.\n-// If you change it, you must change builtin/runtime.go, too.\n+// If you change it, you must change gofrontend/wb.cc, too.\n // If you change the first four bytes, you must also change the write\n // barrier insertion code.\n var writeBarrier struct {"}, {"sha": "35159221dc2571a5a77d1245e3a183c25c21b35d", "filename": "libgo/go/runtime/netpoll.go", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fgo%2Fruntime%2Fnetpoll.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fgo%2Fruntime%2Fnetpoll.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fnetpoll.go?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -112,7 +112,7 @@ func poll_runtime_isPollServerDescriptor(fd uintptr) bool {\n }\n \n //go:linkname poll_runtime_pollOpen internal..z2fpoll.runtime_pollOpen\n-func poll_runtime_pollOpen(fd uintptr) (*pollDesc, int) {\n+func poll_runtime_pollOpen(fd uintptr) (uintptr, int) {\n \tpd := pollcache.alloc()\n \tlock(&pd.lock)\n \tif pd.wg != 0 && pd.wg != pdReady {\n@@ -133,11 +133,12 @@ func poll_runtime_pollOpen(fd uintptr) (*pollDesc, int) {\n \n \tvar errno int32\n \terrno = netpollopen(fd, pd)\n-\treturn pd, int(errno)\n+\treturn uintptr(unsafe.Pointer(pd)), int(errno)\n }\n \n //go:linkname poll_runtime_pollClose internal..z2fpoll.runtime_pollClose\n-func poll_runtime_pollClose(pd *pollDesc) {\n+func poll_runtime_pollClose(ctx uintptr) {\n+\tpd := (*pollDesc)(unsafe.Pointer(ctx))\n \tif !pd.closing {\n \t\tthrow(\"runtime: close polldesc w/o unblock\")\n \t}\n@@ -159,7 +160,8 @@ func (c *pollCache) free(pd *pollDesc) {\n }\n \n //go:linkname poll_runtime_pollReset internal..z2fpoll.runtime_pollReset\n-func poll_runtime_pollReset(pd *pollDesc, mode int) int {\n+func poll_runtime_pollReset(ctx uintptr, mode int) int {\n+\tpd := (*pollDesc)(unsafe.Pointer(ctx))\n \terr := netpollcheckerr(pd, int32(mode))\n \tif err != 0 {\n \t\treturn err\n@@ -173,7 +175,8 @@ func poll_runtime_pollReset(pd *pollDesc, mode int) int {\n }\n \n //go:linkname poll_runtime_pollWait internal..z2fpoll.runtime_pollWait\n-func poll_runtime_pollWait(pd *pollDesc, mode int) int {\n+func poll_runtime_pollWait(ctx uintptr, mode int) int {\n+\tpd := (*pollDesc)(unsafe.Pointer(ctx))\n \terr := netpollcheckerr(pd, int32(mode))\n \tif err != 0 {\n \t\treturn err\n@@ -195,15 +198,17 @@ func poll_runtime_pollWait(pd *pollDesc, mode int) int {\n }\n \n //go:linkname poll_runtime_pollWaitCanceled internal..z2fpoll.runtime_pollWaitCanceled\n-func poll_runtime_pollWaitCanceled(pd *pollDesc, mode int) {\n+func poll_runtime_pollWaitCanceled(ctx uintptr, mode int) {\n+\tpd := (*pollDesc)(unsafe.Pointer(ctx))\n \t// This function is used only on windows after a failed attempt to cancel\n \t// a pending async IO operation. Wait for ioready, ignore closing or timeouts.\n \tfor !netpollblock(pd, int32(mode), true) {\n \t}\n }\n \n //go:linkname poll_runtime_pollSetDeadline internal..z2fpoll.runtime_pollSetDeadline\n-func poll_runtime_pollSetDeadline(pd *pollDesc, d int64, mode int) {\n+func poll_runtime_pollSetDeadline(ctx uintptr, d int64, mode int) {\n+\tpd := (*pollDesc)(unsafe.Pointer(ctx))\n \tlock(&pd.lock)\n \tif pd.closing {\n \t\tunlock(&pd.lock)\n@@ -288,7 +293,8 @@ func poll_runtime_pollSetDeadline(pd *pollDesc, d int64, mode int) {\n }\n \n //go:linkname poll_runtime_pollUnblock internal..z2fpoll.runtime_pollUnblock\n-func poll_runtime_pollUnblock(pd *pollDesc) {\n+func poll_runtime_pollUnblock(ctx uintptr) {\n+\tpd := (*pollDesc)(unsafe.Pointer(ctx))\n \tlock(&pd.lock)\n \tif pd.closing {\n \t\tthrow(\"runtime: unblock on closing polldesc\")"}, {"sha": "e9375635b3eeb23383ae3749a0abfa5a0e27e6ac", "filename": "libgo/go/runtime/proc.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fgo%2Fruntime%2Fproc.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fgo%2Fruntime%2Fproc.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fproc.go?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -153,7 +153,7 @@ var runtimeInitTime int64\n var initSigmask sigset\n \n // The main goroutine.\n-func main() {\n+func main(unsafe.Pointer) {\n \tg := getg()\n \n \t// Max stack size is 1 GB on 64-bit, 250 MB on 32-bit."}, {"sha": "9f5191bc661542d21b5621f8f32c61a6cde01260", "filename": "libgo/go/runtime/stubs.go", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fgo%2Fruntime%2Fstubs.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fgo%2Fruntime%2Fstubs.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fstubs.go?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -283,8 +283,7 @@ func eqstring(x, y string) bool {\n // For gccgo this is in the C code.\n func osyield()\n \n-// For gccgo this can be called directly.\n-//extern syscall\n+//extern __go_syscall6\n func syscall(trap uintptr, a1, a2, a3, a4, a5, a6 uintptr) uintptr\n \n // For gccgo, to communicate from the C code to the Go code."}, {"sha": "b786dc5228b5a138ca615fceebdbed7150edd7ae", "filename": "libgo/go/syscall/syscall_unix.go", "status": "modified", "additions": 6, "deletions": 41, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fgo%2Fsyscall%2Fsyscall_unix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fgo%2Fsyscall%2Fsyscall_unix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fsyscall_unix.go?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -19,11 +19,8 @@ var (\n \tStderr = 2\n )\n \n-//extern syscall\n-func c_syscall32(trap int32, a1, a2, a3, a4, a5, a6 int32) int32\n-\n-//extern syscall\n-func c_syscall64(trap int64, a1, a2, a3, a4, a5, a6 int64) int64\n+//extern __go_syscall6\n+func syscall6(trap uintptr, a1, a2, a3, a4, a5, a6 uintptr) uintptr\n \n const (\n \tdarwin64Bit    = runtime.GOOS == \"darwin\" && sizeofPtr == 8\n@@ -38,14 +35,7 @@ const (\n func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n \tEntersyscall()\n \tSetErrno(0)\n-\tvar r uintptr\n-\tif unsafe.Sizeof(r) == 4 {\n-\t\tr1 := c_syscall32(int32(trap), int32(a1), int32(a2), int32(a3), 0, 0, 0)\n-\t\tr = uintptr(r1)\n-\t} else {\n-\t\tr1 := c_syscall64(int64(trap), int64(a1), int64(a2), int64(a3), 0, 0, 0)\n-\t\tr = uintptr(r1)\n-\t}\n+\tr := syscall6(trap, a1, a2, a3, 0, 0, 0)\n \terr = GetErrno()\n \tExitsyscall()\n \treturn r, 0, err\n@@ -54,47 +44,22 @@ func Syscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n func Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) {\n \tEntersyscall()\n \tSetErrno(0)\n-\tvar r uintptr\n-\tif unsafe.Sizeof(r) == 4 {\n-\t\tr1 := c_syscall32(int32(trap), int32(a1), int32(a2), int32(a3),\n-\t\t\tint32(a4), int32(a5), int32(a6))\n-\t\tr = uintptr(r1)\n-\t} else {\n-\t\tr1 := c_syscall64(int64(trap), int64(a1), int64(a2), int64(a3),\n-\t\t\tint64(a4), int64(a5), int64(a6))\n-\t\tr = uintptr(r1)\n-\t}\n+\tr := syscall6(trap, a1, a2, a3, a4, a5, a6)\n \terr = GetErrno()\n \tExitsyscall()\n \treturn r, 0, err\n }\n \n func RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2 uintptr, err Errno) {\n-\tvar r uintptr\n \tSetErrno(0)\n-\tif unsafe.Sizeof(r) == 4 {\n-\t\tr1 := c_syscall32(int32(trap), int32(a1), int32(a2), int32(a3), 0, 0, 0)\n-\t\tr = uintptr(r1)\n-\t} else {\n-\t\tr1 := c_syscall64(int64(trap), int64(a1), int64(a2), int64(a3), 0, 0, 0)\n-\t\tr = uintptr(r1)\n-\t}\n+\tr := syscall6(trap, a1, a2, a3, 0, 0, 0)\n \terr = GetErrno()\n \treturn r, 0, err\n }\n \n func RawSyscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno) {\n-\tvar r uintptr\n \tSetErrno(0)\n-\tif unsafe.Sizeof(r) == 4 {\n-\t\tr1 := c_syscall32(int32(trap), int32(a1), int32(a2), int32(a3),\n-\t\t\tint32(a4), int32(a5), int32(a6))\n-\t\tr = uintptr(r1)\n-\t} else {\n-\t\tr1 := c_syscall64(int64(trap), int64(a1), int64(a2), int64(a3),\n-\t\t\tint64(a4), int64(a5), int64(a6))\n-\t\tr = uintptr(r1)\n-\t}\n+\tr := syscall6(trap, a1, a2, a3, a4, a5, a6)\n \terr = GetErrno()\n \treturn r, 0, err\n }"}, {"sha": "0b234d0c35b991abebeb6f5c5ab171f520504abb", "filename": "libgo/go/syscall/wait.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fgo%2Fsyscall%2Fwait.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fgo%2Fsyscall%2Fwait.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Fwait.c?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -65,43 +65,43 @@ CoreDump (uint32_t *w)\n   return WCOREDUMP (*w) != 0;\n }\n \n-extern int ExitStatus (uint32_t *w)\n+extern intgo ExitStatus (uint32_t *w)\n   __asm__ (GOSYM_PREFIX \"syscall.WaitStatus.ExitStatus\");\n \n-int\n+intgo\n ExitStatus (uint32_t *w)\n {\n   if (!WIFEXITED (*w))\n     return -1;\n   return WEXITSTATUS (*w);\n }\n \n-extern int Signal (uint32_t *w)\n+extern intgo Signal (uint32_t *w)\n   __asm__ (GOSYM_PREFIX \"syscall.WaitStatus.Signal\");\n \n-int\n+intgo\n Signal (uint32_t *w)\n {\n   if (!WIFSIGNALED (*w))\n     return -1;\n   return WTERMSIG (*w);\n }\n \n-extern int StopSignal (uint32_t *w)\n+extern intgo StopSignal (uint32_t *w)\n   __asm__ (GOSYM_PREFIX \"syscall.WaitStatus.StopSignal\");\n \n-int\n+intgo\n StopSignal (uint32_t *w)\n {\n   if (!WIFSTOPPED (*w))\n     return -1;\n   return WSTOPSIG (*w);\n }\n \n-extern int TrapCause (uint32_t *w)\n+extern intgo TrapCause (uint32_t *w)\n   __asm__ (GOSYM_PREFIX \"syscall.WaitStatus.TrapCause\");\n \n-int\n+intgo\n TrapCause (uint32_t *w __attribute__ ((unused)))\n {\n #ifndef __linux__"}, {"sha": "214344694e84c169ce09e278662678a1892701b3", "filename": "libgo/runtime/go-caller.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fgo-caller.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fgo-caller.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-caller.c?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -192,12 +192,12 @@ struct caller_ret\n   _Bool ok;\n };\n \n-struct caller_ret Caller (int n) __asm__ (GOSYM_PREFIX \"runtime.Caller\");\n+struct caller_ret Caller (intgo n) __asm__ (GOSYM_PREFIX \"runtime.Caller\");\n \n /* Implement runtime.Caller.  */\n \n struct caller_ret\n-Caller (int skip)\n+Caller (intgo skip)\n {\n   struct caller_ret ret;\n   Location loc;"}, {"sha": "a72b4e854546ba6a1ca261cb2f5cbca1ed027467", "filename": "libgo/runtime/go-callers.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fgo-callers.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fgo-callers.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-callers.c?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -236,11 +236,11 @@ runtime_callers (int32 skip, Location *locbuf, int32 m, bool keep_thunks)\n   return data.index;\n }\n \n-int Callers (int, struct __go_open_array)\n+intgo Callers (intgo, struct __go_open_array)\n   __asm__ (GOSYM_PREFIX \"runtime.Callers\");\n \n-int\n-Callers (int skip, struct __go_open_array pc)\n+intgo\n+Callers (intgo skip, struct __go_open_array pc)\n {\n   Location *locbuf;\n   int ret;"}, {"sha": "00a8e6b1bda31c035c9912c6e3688e64a0617cb6", "filename": "libgo/runtime/go-libmain.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fgo-libmain.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fgo-libmain.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-libmain.c?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -231,7 +231,7 @@ gostart (void *arg)\n   setpagesize (getpagesize ());\n   runtime_sched = runtime_getsched();\n   runtime_schedinit ();\n-  __go_go (runtime_main, NULL);\n+  __go_go ((uintptr)(runtime_main), NULL);\n   runtime_mstart (runtime_m ());\n   abort ();\n }"}, {"sha": "301ac4ed803ba929667eb1e7a5342db6bb38bba4", "filename": "libgo/runtime/go-main.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fgo-main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fgo-main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-main.c?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -55,7 +55,7 @@ main (int argc, char **argv)\n   setpagesize (getpagesize ());\n   runtime_sched = runtime_getsched();\n   runtime_schedinit ();\n-  __go_go (runtime_main, NULL);\n+  __go_go ((uintptr)(runtime_main), NULL);\n   runtime_mstart (runtime_m ());\n   abort ();\n }"}, {"sha": "abd598b46c48106fe2da745a3e4e2ad4638f5ce7", "filename": "libgo/runtime/go-reflect-call.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fgo-reflect-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fgo-reflect-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-reflect-call.c?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -229,7 +229,8 @@ reflect_call (const struct __go_func_type *func_type, FuncVal *func_val,\n \n   call_result = (unsigned char *) malloc (go_results_size (func_type));\n \n-  ffi_call_go (&cif, func_val->fn, call_result, params, func_val);\n+  ffi_call_go (&cif, (void (*)(void)) func_val->fn, call_result, params,\n+\t       func_val);\n \n   /* Some day we may need to free result values if RESULTS is\n      NULL.  */"}, {"sha": "dda99590dc7091c79b1214847fd27f58a0e2b754", "filename": "libgo/runtime/go-varargs.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fgo-varargs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fgo-varargs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-varargs.c?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -89,3 +89,14 @@ __go_openat (int fd, char *path, int flags, mode_t mode)\n }\n \n #endif\n+\n+// __go_syscall6 is called by both the runtime and syscall packages.\n+// We use uintptr_t to make sure that the types match, since the Go\n+// and C \"int\" types are not the same.\n+\n+uintptr_t\n+__go_syscall6(uintptr_t flag, uintptr_t a1, uintptr_t a2, uintptr_t a3,\n+\t      uintptr_t a4, uintptr_t a5, uintptr_t a6)\n+{\n+  return syscall (flag, a1, a2, a3, a4, a5, a6);\n+}"}, {"sha": "90255059fcc151a44dee494358e8abdd596d4506", "filename": "libgo/runtime/panic.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fpanic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fpanic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fpanic.c?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -34,7 +34,7 @@ runtime_panicstring(const char *s)\n \t\t\truntime_throw(\"panic holding locks\");\n \t\t}\n \t}\n-\truntime_newErrorCString(s, &err);\n+\truntime_newErrorCString((uintptr) s, &err);\n \truntime_panic(err);\n }\n "}, {"sha": "a6135b04820e061446f7a8fba40e606ea704464e", "filename": "libgo/runtime/runtime.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fruntime.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fruntime.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fruntime.h?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -94,7 +94,7 @@ struct String\n \n struct FuncVal\n {\n-\tvoid\t(*fn)(void);\n+\tuintptr_t fn;\n \t// variable-size, fn-specific data here\n };\n \n@@ -295,7 +295,7 @@ void\truntime_entersyscall()\n   __asm__ (GOSYM_PREFIX \"runtime.entersyscall\");\n void\truntime_entersyscallblock()\n   __asm__ (GOSYM_PREFIX \"runtime.entersyscallblock\");\n-G*\t__go_go(void (*pfn)(void*), void*);\n+G*\t__go_go(uintptr, void*);\n int32\truntime_callers(int32, Location*, int32, bool keep_callers);\n int64\truntime_nanotime(void)\t// monotonic time\n   __asm__(GOSYM_PREFIX \"runtime.nanotime\");\n@@ -389,7 +389,7 @@ void runtime_panic(Eface)\n /*\n  * runtime c-called (but written in Go)\n  */\n-void\truntime_newErrorCString(const char*, Eface*)\n+void\truntime_newErrorCString(uintptr, Eface*)\n      __asm__ (GOSYM_PREFIX \"runtime.NewErrorCString\");\n \n /*"}, {"sha": "be5e52363d28404c0bffe8c6c827dea027ba9162", "filename": "libgo/runtime/stack.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fstack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8a9f2a6bbd6bdf164ca987edac34ac72447881a5/libgo%2Fruntime%2Fstack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fstack.c?ref=8a9f2a6bbd6bdf164ca987edac34ac72447881a5", "patch": "@@ -20,7 +20,7 @@ extern void * __splitstack_find_context (void *context[10], size_t *, void **,\n // tail call to doscanstack1.\n #pragma GCC optimize (\"-fno-optimize-sibling-calls\")\n \n-extern void scanstackblock(void *addr, uintptr size, void *gcw)\n+extern void scanstackblock(uintptr addr, uintptr size, void *gcw)\n   __asm__(\"runtime.scanstackblock\");\n \n static bool doscanstack1(G*, void*)\n@@ -84,11 +84,11 @@ static bool doscanstack1(G *gp, void *gcw) {\n \t\t}\n \t}\n \tif(sp != nil) {\n-\t\tscanstackblock(sp, (uintptr)(spsize), gcw);\n+\t\tscanstackblock((uintptr)(sp), (uintptr)(spsize), gcw);\n \t\twhile((sp = __splitstack_find(next_segment, next_sp,\n \t\t\t\t\t      &spsize, &next_segment,\n \t\t\t\t\t      &next_sp, &initial_sp)) != nil)\n-\t\t\tscanstackblock(sp, (uintptr)(spsize), gcw);\n+\t\t\tscanstackblock((uintptr)(sp), (uintptr)(spsize), gcw);\n \t}\n #else\n \tbyte* bottom;"}]}