{"sha": "50df9464b86a58d5c959b10c33c1870c0c4c5e48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBkZjk0NjRiODZhNThkNWM5NTliMTBjMzNjMTg3MGMwYzRjNWU0OA==", "commit": {"author": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2016-09-23T09:15:24Z"}, "committer": {"name": "Matthew Wahab", "email": "mwahab@gcc.gnu.org", "date": "2016-09-23T09:15:24Z"}, "message": "[PATCH 5/17][ARM] Enable HI mode moves for floating point values.\n\ngcc/\n2016-09-23  Jiong Wang  <jiong.wang@arm.com>\n\t    Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* config/arm/arm.c (output_move_vfp): Weaken assert to allow\n\tHImode.\n\t(arm_hard_regno_mode_ok): Allow HImode values in VFP registers.\n\t* config/arm/arm.md (*movhi_bytes): Disable when VFP registers are\n\tavailable.  Also fix some white-space.\n\t* config/arm/vfp.md (*arm_movhi_vfp): New.\n\t(*thumb2_movhi_vfp): New.\n\ntestsuite/\n2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n\n\t* gcc.target/arm/short-vfp-1.c: New.\n\nFrom-SVN: r240403", "tree": {"sha": "582fdcac750944cd89464792e4717977ea423288", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/582fdcac750944cd89464792e4717977ea423288"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50df9464b86a58d5c959b10c33c1870c0c4c5e48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50df9464b86a58d5c959b10c33c1870c0c4c5e48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50df9464b86a58d5c959b10c33c1870c0c4c5e48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50df9464b86a58d5c959b10c33c1870c0c4c5e48/comments", "author": null, "committer": null, "parents": [{"sha": "536b9f42cef7c74e3c92e5eaeb12b8514582907c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/536b9f42cef7c74e3c92e5eaeb12b8514582907c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/536b9f42cef7c74e3c92e5eaeb12b8514582907c"}], "stats": {"total": 164, "additions": 161, "deletions": 3}, "files": [{"sha": "d5b764d4a8ae0ecdab4e1e7abf807d4bd039ea1d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50df9464b86a58d5c959b10c33c1870c0c4c5e48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50df9464b86a58d5c959b10c33c1870c0c4c5e48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=50df9464b86a58d5c959b10c33c1870c0c4c5e48", "patch": "@@ -1,3 +1,14 @@\n+2016-09-23  Jiong Wang  <jiong.wang@arm.com>\n+\t    Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* config/arm/arm.c (output_move_vfp): Weaken assert to allow\n+\tHImode.\n+\t(arm_hard_regno_mode_ok): Allow HImode values in VFP registers.\n+\t* config/arm/arm.md (*movhi_bytes): Disable when VFP registers are\n+\tavailable.  Also fix some white-space.\n+\t* config/arm/vfp.md (*arm_movhi_vfp): New.\n+\t(*thumb2_movhi_vfp): New.\n+\n 2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/arm/arm-c.c (arm_cpu_builtins): Define"}, {"sha": "04c73d98e34f8cd97aa38ad08b76b766572b1a57", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50df9464b86a58d5c959b10c33c1870c0c4c5e48/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50df9464b86a58d5c959b10c33c1870c0c4c5e48/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=50df9464b86a58d5c959b10c33c1870c0c4c5e48", "patch": "@@ -18722,6 +18722,7 @@ output_move_vfp (rtx *operands)\n   gcc_assert ((mode == HFmode && TARGET_HARD_FLOAT && TARGET_VFP)\n \t      || mode == SFmode\n \t      || mode == DFmode\n+\t      || mode == HImode\n \t      || mode == SImode\n \t      || mode == DImode\n               || (TARGET_NEON && VALID_NEON_DREG_MODE (mode)));\n@@ -23515,6 +23516,10 @@ arm_hard_regno_mode_ok (unsigned int regno, machine_mode mode)\n       if (mode == HFmode)\n \treturn VFP_REGNO_OK_FOR_SINGLE (regno);\n \n+      /* VFP registers can hold HImode values.  */\n+      if (mode == HImode)\n+\treturn VFP_REGNO_OK_FOR_SINGLE (regno);\n+\n       if (TARGET_NEON)\n         return (VALID_NEON_DREG_MODE (mode) && VFP_REGNO_OK_FOR_DOUBLE (regno))\n                || (VALID_NEON_QREG_MODE (mode)"}, {"sha": "fe4c6e79e0d215a00437bacbcb417e0c0561d167", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50df9464b86a58d5c959b10c33c1870c0c4c5e48/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50df9464b86a58d5c959b10c33c1870c0c4c5e48/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=50df9464b86a58d5c959b10c33c1870c0c4c5e48", "patch": "@@ -6700,7 +6700,7 @@\n   [(set (match_operand:HI 0 \"nonimmediate_operand\" \"=r,r,r,m,r\")\n \t(match_operand:HI 1 \"general_operand\"      \"rIk,K,n,r,mi\"))]\n   \"TARGET_ARM\n-   && arm_arch4\n+   && arm_arch4 && !(TARGET_HARD_FLOAT && TARGET_VFP)\n    && (register_operand (operands[0], HImode)\n        || register_operand (operands[1], HImode))\"\n   \"@\n@@ -6726,15 +6726,15 @@\n (define_insn \"*movhi_bytes\"\n   [(set (match_operand:HI 0 \"s_register_operand\" \"=r,r,r\")\n \t(match_operand:HI 1 \"arm_rhs_operand\"  \"I,rk,K\"))]\n-  \"TARGET_ARM\"\n+  \"TARGET_ARM && !(TARGET_HARD_FLOAT && TARGET_VFP)\"\n   \"@\n    mov%?\\\\t%0, %1\\\\t%@ movhi\n    mov%?\\\\t%0, %1\\\\t%@ movhi\n    mvn%?\\\\t%0, #%B1\\\\t%@ movhi\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"type\" \"mov_imm,mov_reg,mvn_imm\")]\n )\n-\t\n+\n ;; We use a DImode scratch because we may occasionally need an additional\n ;; temporary if the address isn't offsettable -- push_reload doesn't seem\n ;; to take any notice of the \"o\" constraints on reload_memory_operand operand."}, {"sha": "d7c874aa08ebea69a6ba8dd0e849c687497ab4eb", "filename": "gcc/config/arm/vfp.md", "status": "modified", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50df9464b86a58d5c959b10c33c1870c0c4c5e48/gcc%2Fconfig%2Farm%2Fvfp.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50df9464b86a58d5c959b10c33c1870c0c4c5e48/gcc%2Fconfig%2Farm%2Fvfp.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fvfp.md?ref=50df9464b86a58d5c959b10c33c1870c0c4c5e48", "patch": "@@ -18,6 +18,99 @@\n ;; along with GCC; see the file COPYING3.  If not see\n ;; <http://www.gnu.org/licenses/>.  */\n \n+;; Patterns for HI moves which provide more data transfer instructions when VFP\n+;; support is enabled.\n+(define_insn \"*arm_movhi_vfp\"\n+ [(set\n+   (match_operand:HI 0 \"nonimmediate_operand\"\n+    \"=rk,  r, r, m, r, *t,  r, *t\")\n+   (match_operand:HI 1 \"general_operand\"\n+    \"rIk, K, n, r, mi, r, *t, *t\"))]\n+ \"TARGET_ARM && TARGET_HARD_FLOAT && TARGET_VFP\n+  && (register_operand (operands[0], HImode)\n+       || register_operand (operands[1], HImode))\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"mov%?\\t%0, %1\\t%@ movhi\";\n+    case 1:\n+      return \"mvn%?\\t%0, #%B1\\t%@ movhi\";\n+    case 2:\n+      return \"movw%?\\t%0, %L1\\t%@ movhi\";\n+    case 3:\n+      return \"strh%?\\t%1, %0\\t%@ movhi\";\n+    case 4:\n+      return \"ldrh%?\\t%0, %1\\t%@ movhi\";\n+    case 5:\n+    case 6:\n+      return \"vmov%?\\t%0, %1\\t%@ int\";\n+    case 7:\n+      return \"vmov%?.f32\\t%0, %1\\t%@ int\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+ [(set_attr \"predicable\" \"yes\")\n+  (set_attr_alternative \"type\"\n+   [(if_then_else\n+     (match_operand 1 \"const_int_operand\" \"\")\n+     (const_string \"mov_imm\")\n+     (const_string \"mov_reg\"))\n+    (const_string \"mvn_imm\")\n+    (const_string \"mov_imm\")\n+    (const_string \"store1\")\n+    (const_string \"load1\")\n+    (const_string \"f_mcr\")\n+    (const_string \"f_mrc\")\n+    (const_string \"fmov\")])\n+  (set_attr \"pool_range\" \"*, *, *, *, 256, *, *, *\")\n+  (set_attr \"neg_pool_range\" \"*, *, *, *, 244, *, *, *\")\n+  (set_attr \"length\" \"4\")]\n+)\n+\n+(define_insn \"*thumb2_movhi_vfp\"\n+ [(set\n+   (match_operand:HI 0 \"nonimmediate_operand\"\n+    \"=rk, r, l, r, m, r, *t, r, *t\")\n+   (match_operand:HI 1 \"general_operand\"\n+    \"rk, I, Py, n, r, m, r, *t, *t\"))]\n+ \"TARGET_THUMB2 && TARGET_HARD_FLOAT && TARGET_VFP\n+  && (register_operand (operands[0], HImode)\n+       || register_operand (operands[1], HImode))\"\n+{\n+  switch (which_alternative)\n+    {\n+    case 0:\n+    case 1:\n+    case 2:\n+      return \"mov%?\\t%0, %1\\t%@ movhi\";\n+    case 3:\n+      return \"movw%?\\t%0, %L1\\t%@ movhi\";\n+    case 4:\n+      return \"strh%?\\t%1, %0\\t%@ movhi\";\n+    case 5:\n+      return \"ldrh%?\\t%0, %1\\t%@ movhi\";\n+    case 6:\n+    case 7:\n+      return \"vmov%?\\t%0, %1\\t%@ int\";\n+    case 8:\n+      return \"vmov%?.f32\\t%0, %1\\t%@ int\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n+ [(set_attr \"predicable\" \"yes\")\n+  (set_attr \"predicable_short_it\"\n+   \"yes, no, yes, no, no, no, no, no, no\")\n+  (set_attr \"type\"\n+   \"mov_reg, mov_imm, mov_imm, mov_imm, store1, load1,\\\n+    f_mcr, f_mrc, fmov\")\n+  (set_attr \"pool_range\" \"*, *, *, *, *, 4094, *, *, *\")\n+  (set_attr \"neg_pool_range\" \"*, *, *, *, *, 250, *, *, *\")\n+  (set_attr \"length\" \"2, 4, 2, 4, 4, 4, 4, 4, 4\")]\n+)\n+\n ;; SImode moves\n ;; ??? For now do not allow loading constants into vfp regs.  This causes\n ;; problems because small constants get converted into adds."}, {"sha": "f19e24b883f42a66dbf579a91ff7f4c0b7ebd890", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50df9464b86a58d5c959b10c33c1870c0c4c5e48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50df9464b86a58d5c959b10c33c1870c0c4c5e48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50df9464b86a58d5c959b10c33c1870c0c4c5e48", "patch": "@@ -1,3 +1,7 @@\n+2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n+\n+\t* gcc.target/arm/short-vfp-1.c: New.\n+\n 2016-09-23  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* gcc.target/arm/attr-fp16-arith-1.c: New."}, {"sha": "d96c7631798ba6b41636470a66ae7fd61e7a313f", "filename": "gcc/testsuite/gcc.target/arm/short-vfp-1.c", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50df9464b86a58d5c959b10c33c1870c0c4c5e48/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fshort-vfp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50df9464b86a58d5c959b10c33c1870c0c4c5e48/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fshort-vfp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fshort-vfp-1.c?ref=50df9464b86a58d5c959b10c33c1870c0c4c5e48", "patch": "@@ -0,0 +1,45 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_vfp_ok }\n+/* { dg-options \"-mfpu=vfp\" } */\n+\n+int\n+test_sisf (float x)\n+{\n+  return (int)x;\n+}\n+\n+short\n+test_hisf (float x)\n+{\n+  return (short)x;\n+}\n+\n+float\n+test_sfsi (int x)\n+{\n+  return (float)x;\n+}\n+\n+float\n+test_sfhi (short x)\n+{\n+  return (float)x;\n+}\n+\n+short\n+test_hisi (int x)\n+{\n+  return (short)x;\n+}\n+\n+int\n+test_sihi (short x)\n+{\n+  return (int)x;\n+}\n+\n+/* {dg-final { scan-assembler-times {vcvt\\.s32\\.f32\\ts[0-9]+,s[0-9]+} 2 }} */\n+/* {dg-final { scan-assembler-times {vcvt\\.f32\\.s32\\ts[0-9]+,s[0-9]+} 2 }} */\n+/* {dg-final { scan-assembler-times {vmov\\tr[0-9]+,s[0-9]+} 2 }} */\n+/* {dg-final { scan-assembler-times {vmov\\ts[0-9]+,r[0-9]+} 2 }} */\n+/* {dg-final { scan-assembler-times {sxth\\tr[0-9]+,r[0-9]+} 2 }} */"}]}