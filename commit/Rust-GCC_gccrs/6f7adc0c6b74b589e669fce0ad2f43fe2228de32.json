{"sha": "6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY3YWRjMGM2Yjc0YjU4OWU2NjlmY2UwYWQyZjQzZmUyMjI4ZGUzMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-03-16T18:30:40Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-03-16T18:30:40Z"}, "message": "mixed-struct-check.h, [...]: Add 4 mixed structure types.\n\n\t* gcc.dg/compat/mixed-struct-check.h, mixed-struct-defs.h,\n\tmixed-struct-init.h: Add 4 mixed structure types.\n\tstruct-by-value-21_main.c, struct-by-value-21_x.c,\n\tstruct-by-value-21_y.c, struct-return-21_main.c,\n\tstruct-return-21_x.c, struct-return-21_y.c: New files.\n\nFrom-SVN: r79538", "tree": {"sha": "a7bed7105bdf382f4d8e056dfd7a12fd2d298c93", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7bed7105bdf382f4d8e056dfd7a12fd2d298c93"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b862b3b33002b4f6d56c0a704a5d92a3da63feaa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b862b3b33002b4f6d56c0a704a5d92a3da63feaa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b862b3b33002b4f6d56c0a704a5d92a3da63feaa"}], "stats": {"total": 488, "additions": 488, "deletions": 0}, "files": [{"sha": "bad99fdf8476ab69f9106c0dd63323fd224c2faf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "patch": "@@ -1,3 +1,11 @@\n+2004-03-16  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/compat/mixed-struct-check.h, mixed-struct-defs.h,\n+\tmixed-struct-init.h: Add 4 mixed structure types.\n+\tstruct-by-value-21_main.c, struct-by-value-21_x.c,\n+\tstruct-by-value-21_y.c, struct-return-21_main.c,\n+\tstruct-return-21_x.c, struct-return-21_y.c: New files.\n+\n 2004-03-13  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14550"}, {"sha": "248ffb215f80b3b4bb42359b7bb3b09f30d6159e", "filename": "gcc/testsuite/gcc.dg/compat/mixed-struct-check.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-check.h?ref=6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "patch": "@@ -26,3 +26,12 @@ void checkScssdss (Scssdss x, int i)\n void checkScssdssc (Scssdssc x, int i)\n { if (x.c != (char)i || x.ssds.sd.d != (double)i+1\n     || x.b != (char)i+2) DEBUG_CHECK }\n+\n+void checkSfi (Sfi x, int i)\n+{ if (x.f != (float)i || x.i != i+1) DEBUG_CHECK }\n+void checkSfii (Sfii x, int i)\n+{ if (x.f != (float)i || x.i1 != i+1 || x.i2 != i+2) DEBUG_CHECK }\n+void checkSfifi (Sfifi x, int i)\n+{ if (x.fi.f != (float)i || x.fi.i != i+1) DEBUG_CHECK }\n+void checkSfiifii (Sfiifii x, int i)\n+{ if (x.fii.f != (float)i || x.fii.i1 != i+1 || x.fii.i2 != i+2) DEBUG_CHECK }"}, {"sha": "9a313790f68303e35a5b8cd4676b5d6d250d0548", "filename": "gcc/testsuite/gcc.dg/compat/mixed-struct-defs.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-defs.h?ref=6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "patch": "@@ -12,3 +12,8 @@ typedef struct { Sd sd; } Ssds;\n typedef struct { Sd sd; char c; } Ssdsc;\n typedef struct { char c; Ssds ssds; } Scssdss;\n typedef struct { char c; Ssds ssds; char b; } Scssdssc;\n+\n+typedef struct { float f; int i; } Sfi;\n+typedef struct { float f; int i1; int i2; } Sfii;\n+typedef struct { float f; int i; Sfi fi; } Sfifi;\n+typedef struct { float f; int i1; int i2; Sfii fii; } Sfiifii;"}, {"sha": "b11fc2404511f577ec9159c35e9004c8bde41437", "filename": "gcc/testsuite/gcc.dg/compat/mixed-struct-init.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-init.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-init.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fmixed-struct-init.h?ref=6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "patch": "@@ -24,3 +24,12 @@ void initScssdss (Scssdss *p, int i)\n { p->c = (char)i; p->ssds.sd.d = (double)i+1; }\n void initScssdssc (Scssdssc *p, int i)\n { p->c = (char)i; p->ssds.sd.d = (double)i+1; p->b = (char)i+2; }\n+\n+void initSfi (Sfi *x, int i)\n+{ x->f = (float)i; x->i = i+1; }\n+void initSfii (Sfii *x, int i)\n+{ x->f = (float)i; x->i1 = i+1; x->i2 = i+2; }\n+void initSfifi (Sfifi *x, int i)\n+{ x->fi.f = (float)i; x->fi.i = i+1; }\n+void initSfiifii (Sfiifii *x, int i)\n+{ x->fii.f = (float)i; x->fii.i1 = i+1; x->fii.i2 = i+2; }"}, {"sha": "b722bccd2ca90beb1d169f4061cb9e6a19971807", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-21_main.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-21_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-21_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-21_main.c?ref=6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "patch": "@@ -0,0 +1,13 @@\n+/* Test function argument passing.  This was written when correcting\n+   a deviation from the ABI on SPARC64 between 3.3 and 3.4.  */\n+\n+extern void struct_by_value_21_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_by_value_21_x ();\n+  exit (0);\n+}"}, {"sha": "3b01ba86eb11d9f9674be570cb67e519fb95e7bd", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-21_x.c", "status": "added", "additions": 168, "deletions": 0, "changes": 168, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-21_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-21_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-21_x.c?ref=6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "patch": "@@ -0,0 +1,168 @@\n+#include \"compat-common.h\"\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+TYPE g1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE;\t\t\\\n+TYPE g5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE;\t\t\\\n+TYPE g9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE;\t\t\\\n+TYPE g13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##TYPE (TYPE *p, int i);\t\t\t\\\n+extern void checkg##TYPE (void);\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+test##TYPE (TYPE s1, TYPE s2, TYPE s3, TYPE s4,\t\t\t\\\n+\t    TYPE s5, TYPE s6, TYPE s7, TYPE s8,\t\t\t\\\n+\t    TYPE s9, TYPE s10, TYPE s11, TYPE s12,\t\t\\\n+\t    TYPE s13, TYPE s14, TYPE s15, TYPE s16);\t\t\\\n+extern void testva##TYPE (int n, ...);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test2_##TYPE (TYPE s1, TYPE s2, TYPE s3, TYPE s4,\t\t\\\n+\t      TYPE s5, TYPE s6, TYPE s7, TYPE s8)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  test##TYPE (s1, g2s##TYPE, s2, g4s##TYPE,\t\t\t\\\n+\t      s3, g6s##TYPE, s4, g8s##TYPE,\t\t\t\\\n+\t      s5, g10s##TYPE, s6, g12s##TYPE,\t\t\t\\\n+\t      s7, g14s##TYPE, s8, g16s##TYPE);\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testit##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" init: \");\t\t\t\t\t\\\n+  init##TYPE  ( &g1s##TYPE,  1);\t\t\t\t\\\n+  init##TYPE  ( &g2s##TYPE,  2);\t\t\t\t\\\n+  init##TYPE  ( &g3s##TYPE,  3);\t\t\t\t\\\n+  init##TYPE  ( &g4s##TYPE,  4);\t\t\t\t\\\n+  init##TYPE  ( &g5s##TYPE,  5);\t\t\t\t\\\n+  init##TYPE  ( &g6s##TYPE,  6);\t\t\t\t\\\n+  init##TYPE  ( &g7s##TYPE,  7);\t\t\t\t\\\n+  init##TYPE  ( &g8s##TYPE,  8);\t\t\t\t\\\n+  init##TYPE  ( &g9s##TYPE,  9);\t\t\t\t\\\n+  init##TYPE  (&g10s##TYPE, 10);\t\t\t\t\\\n+  init##TYPE  (&g11s##TYPE, 11);\t\t\t\t\\\n+  init##TYPE  (&g12s##TYPE, 12);\t\t\t\t\\\n+  init##TYPE  (&g13s##TYPE, 13);\t\t\t\t\\\n+  init##TYPE  (&g14s##TYPE, 14);\t\t\t\t\\\n+  init##TYPE  (&g15s##TYPE, 15);\t\t\t\t\\\n+  init##TYPE  (&g16s##TYPE, 16);\t\t\t\t\\\n+  checkg##TYPE ();\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test: \");\t\t\t\t\t\\\n+  test##TYPE (g1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t      g5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t      g9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t      g13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" testva:\");\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (1,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (2,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (3,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (4,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (5,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (6,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (7,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (8,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (9,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (10,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (11,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (12,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (13,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (14,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE, g14s##TYPE);\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (15,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE, g14s##TYPE, g15s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (16,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE); \\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test2:\");\t\t\t\t\t\\\n+  test2_##TYPE (g1s##TYPE, g3s##TYPE, g5s##TYPE, g7s##TYPE,\t\\\n+\t\tg9s##TYPE, g11s##TYPE, g13s##TYPE, g15s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+#include \"mixed-struct-defs.h\"\n+#include \"mixed-struct-check.h\"\n+\n+T(Sfi)\n+T(Sfii)\n+T(Sfifi)\n+T(Sfiifii)\n+\n+#undef T\n+\n+void\n+struct_by_value_21_x ()\n+{\n+DEBUG_INIT\n+\n+#define T(TYPE) testit##TYPE ();\n+\n+T(Sfi)\n+T(Sfii)\n+T(Sfifi)\n+T(Sfiifii)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "fc06d9d4fce3cb4c925ca75731f8f344fefde1db", "filename": "gcc/testsuite/gcc.dg/compat/struct-by-value-21_y.c", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-21_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-21_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-by-value-21_y.c?ref=6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "patch": "@@ -0,0 +1,86 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+#ifdef SKIP_VA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#include \"mixed-struct-defs.h\"\n+#include \"mixed-struct-init.h\"\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+extern void check##TYPE (TYPE x, int i);\t\t\t\\\n+extern TYPE g1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE;\t\t\\\n+extern TYPE g5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE;\t\t\\\n+extern TYPE g9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE;\t\\\n+extern TYPE g13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE;\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkg##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##TYPE (  g1s##TYPE,  1);\t\t\t\t\\\n+  check##TYPE (  g2s##TYPE,  2);\t\t\t\t\\\n+  check##TYPE (  g3s##TYPE,  3);\t\t\t\t\\\n+  check##TYPE (  g4s##TYPE,  4);\t\t\t\t\\\n+  check##TYPE (  g5s##TYPE,  5);\t\t\t\t\\\n+  check##TYPE (  g6s##TYPE,  6);\t\t\t\t\\\n+  check##TYPE (  g7s##TYPE,  7);\t\t\t\t\\\n+  check##TYPE (  g8s##TYPE,  8);\t\t\t\t\\\n+  check##TYPE (  g9s##TYPE,  9);\t\t\t\t\\\n+  check##TYPE ( g10s##TYPE, 10);\t\t\t\t\\\n+  check##TYPE ( g11s##TYPE, 11);\t\t\t\t\\\n+  check##TYPE ( g12s##TYPE, 12);\t\t\t\t\\\n+  check##TYPE ( g13s##TYPE, 13);\t\t\t\t\\\n+  check##TYPE ( g14s##TYPE, 14);\t\t\t\t\\\n+  check##TYPE ( g15s##TYPE, 15);\t\t\t\t\\\n+  check##TYPE ( g16s##TYPE, 16);\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test##TYPE (TYPE s1, TYPE s2, TYPE s3, TYPE s4,\t\t\t\\\n+\t    TYPE s5, TYPE s6, TYPE s7, TYPE s8,\t\t\t\\\n+\t    TYPE s9, TYPE s10, TYPE s11, TYPE s12,\t\t\\\n+\t    TYPE s13, TYPE s14, TYPE s15, TYPE s16)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##TYPE (s1, 1);\t\t\t\t\t\t\\\n+  check##TYPE (s2, 2);\t\t\t\t\t\t\\\n+  check##TYPE (s3, 3);\t\t\t\t\t\t\\\n+  check##TYPE (s4, 4);\t\t\t\t\t\t\\\n+  check##TYPE (s5, 5);\t\t\t\t\t\t\\\n+  check##TYPE (s6, 6);\t\t\t\t\t\t\\\n+  check##TYPE (s7, 7);\t\t\t\t\t\t\\\n+  check##TYPE (s8, 8);\t\t\t\t\t\t\\\n+  check##TYPE (s9, 9);\t\t\t\t\t\t\\\n+  check##TYPE (s10, 10);\t\t\t\t\t\\\n+  check##TYPE (s11, 11);\t\t\t\t\t\\\n+  check##TYPE (s12, 12);\t\t\t\t\t\\\n+  check##TYPE (s13, 13);\t\t\t\t\t\\\n+  check##TYPE (s14, 14);\t\t\t\t\t\\\n+  check##TYPE (s15, 15);\t\t\t\t\t\\\n+  check##TYPE (s16, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testva##TYPE (int n, ...)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\\\n+  if (test_va)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      va_start (ap, n);\t\t\t\t\t\t\\\n+      for (i = 0; i < n; i++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  TYPE t = va_arg (ap, TYPE);\t\t\t\t\\\n+\t  check##TYPE (t, i+1);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      va_end (ap);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+T(Sfi)\n+T(Sfii)\n+T(Sfifi)\n+T(Sfiifii)"}, {"sha": "34e0ab429969a80662d349ac20beccad7c1736cf", "filename": "gcc/testsuite/gcc.dg/compat/struct-return-21_main.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-21_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-21_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-21_main.c?ref=6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "patch": "@@ -0,0 +1,13 @@\n+/* Test function return values.  This was written when correcting\n+   a deviation from the ABI on SPARC64 between 3.3 and 3.4.  */\n+\n+extern void struct_return_21_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  struct_return_21_x ();\n+  exit (0);\n+}"}, {"sha": "721deff036ee2c3fedac6a2863ac6bbda4b08e9a", "filename": "gcc/testsuite/gcc.dg/compat/struct-return-21_x.c", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-21_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-21_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-21_x.c?ref=6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "patch": "@@ -0,0 +1,112 @@\n+#include \"compat-common.h\"\n+\n+#ifdef SKIP_VA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+TYPE g01##TYPE, g02##TYPE, g03##TYPE, g04##TYPE;\t\t\\\n+TYPE g05##TYPE, g06##TYPE, g07##TYPE, g08##TYPE;\t\t\\\n+TYPE g09##TYPE, g10##TYPE, g11##TYPE, g12##TYPE;\t\t\\\n+TYPE g13##TYPE, g14##TYPE, g15##TYPE, g16##TYPE;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##TYPE (TYPE *p, int i);\t\t\t\\\n+extern void checkg##TYPE (void);\t\t\t\t\\\n+extern TYPE test0##TYPE (void);\t\t\t\t\t\\\n+extern TYPE test1##TYPE (TYPE);\t\t\t\t\t\\\n+extern TYPE testva##TYPE (int n, ...);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testit##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  TYPE rslt;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" init: \");\t\t\t\t\t\\\n+  init##TYPE  (&g01##TYPE,  1);\t\t\t\t\t\\\n+  init##TYPE  (&g02##TYPE,  2);\t\t\t\t\t\\\n+  init##TYPE  (&g03##TYPE,  3);\t\t\t\t\t\\\n+  init##TYPE  (&g04##TYPE,  4);\t\t\t\t\t\\\n+  init##TYPE  (&g05##TYPE,  5);\t\t\t\t\t\\\n+  init##TYPE  (&g06##TYPE,  6);\t\t\t\t\t\\\n+  init##TYPE  (&g07##TYPE,  7);\t\t\t\t\t\\\n+  init##TYPE  (&g08##TYPE,  8);\t\t\t\t\t\\\n+  init##TYPE  (&g09##TYPE,  9);\t\t\t\t\t\\\n+  init##TYPE  (&g10##TYPE, 10);\t\t\t\t\t\\\n+  init##TYPE  (&g11##TYPE, 11);\t\t\t\t\t\\\n+  init##TYPE  (&g12##TYPE, 12);\t\t\t\t\t\\\n+  init##TYPE  (&g13##TYPE, 13);\t\t\t\t\t\\\n+  init##TYPE  (&g14##TYPE, 14);\t\t\t\t\t\\\n+  init##TYPE  (&g15##TYPE, 15);\t\t\t\t\t\\\n+  init##TYPE  (&g16##TYPE, 16);\t\t\t\t\t\\\n+  checkg##TYPE ();\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test0: \");\t\t\t\t\t\\\n+  rslt = test0##TYPE ();\t\t\t\t\t\\\n+  check##TYPE (rslt, 1);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test1: \");\t\t\t\t\t\\\n+  rslt = test1##TYPE (g01##TYPE);\t\t\t\t\\\n+  check##TYPE (rslt, 1);\t\t\t\t\t\\\n+  if (test_va)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      DEBUG_NL;\t\t\t\t\t\t\t\\\n+      DEBUG_FPUTS (#TYPE);\t\t\t\t\t\\\n+      DEBUG_FPUTS (\" testva: \");\t\t\t\t\\\n+      rslt = testva##TYPE (1, g01##TYPE);\t\t\t\\\n+      check##TYPE (rslt, 1);\t\t\t\t\t\\\n+      rslt = testva##TYPE (5, g01##TYPE, g02##TYPE,\t\t\\\n+\t\t\t   g03##TYPE, g04##TYPE,\t\t\\\n+\t\t\t   g05##TYPE);\t\t\t\t\\\n+      check##TYPE (rslt, 5);\t\t\t\t\t\\\n+      rslt = testva##TYPE (9, g01##TYPE, g02##TYPE,\t\t\\\n+\t\t\t   g03##TYPE, g04##TYPE,\t\t\\\n+\t\t\t   g05##TYPE, g06##TYPE,\t\t\\\n+\t\t\t   g07##TYPE, g08##TYPE,\t\t\\\n+\t\t\t   g09##TYPE);\t\t\t\t\\\n+      check##TYPE (rslt, 9);\t\t\t\t\t\\\n+      rslt = testva##TYPE (16, g01##TYPE, g02##TYPE,\t\t\\\n+\t\t\t   g03##TYPE, g04##TYPE,\t\t\\\n+\t\t\t   g05##TYPE, g06##TYPE,\t\t\\\n+\t\t\t   g07##TYPE, g08##TYPE,\t\t\\\n+\t\t\t   g09##TYPE, g10##TYPE,\t\t\\\n+\t\t\t   g11##TYPE, g12##TYPE,\t\t\\\n+\t\t\t   g13##TYPE, g14##TYPE,\t\t\\\n+\t\t\t   g15##TYPE, g16##TYPE);\t\t\\\n+      check##TYPE (rslt, 16);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+#include \"mixed-struct-defs.h\"\n+#include \"mixed-struct-check.h\"\n+\n+T(Sfi)\n+T(Sfii)\n+T(Sfifi)\n+T(Sfiifii)\n+\n+#undef T\n+\n+void\n+struct_return_21_x ()\n+{\n+DEBUG_INIT\n+\n+#define T(TYPE) testit##TYPE ();\n+\n+T(Sfi)\n+T(Sfii)\n+T(Sfifi)\n+T(Sfiifii)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "b44d7f58e69e363302af842dd0d5d767deb0ebc6", "filename": "gcc/testsuite/gcc.dg/compat/struct-return-21_y.c", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-21_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f7adc0c6b74b589e669fce0ad2f43fe2228de32/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-21_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Fstruct-return-21_y.c?ref=6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "patch": "@@ -0,0 +1,65 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+#include \"mixed-struct-defs.h\"\n+#include \"mixed-struct-init.h\"\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+extern TYPE g01##TYPE, g02##TYPE, g03##TYPE, g04##TYPE;\t\t\\\n+extern TYPE g05##TYPE, g06##TYPE, g07##TYPE, g08##TYPE;\t\t\\\n+extern TYPE g09##TYPE, g10##TYPE, g11##TYPE, g12##TYPE;\t\t\\\n+extern TYPE g13##TYPE, g14##TYPE, g15##TYPE, g16##TYPE;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void check##TYPE (TYPE x, int i);\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkg##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##TYPE (g01##TYPE,  1);\t\t\t\t\t\\\n+  check##TYPE (g02##TYPE,  2);\t\t\t\t\t\\\n+  check##TYPE (g03##TYPE,  3);\t\t\t\t\t\\\n+  check##TYPE (g04##TYPE,  4);\t\t\t\t\t\\\n+  check##TYPE (g05##TYPE,  5);\t\t\t\t\t\\\n+  check##TYPE (g06##TYPE,  6);\t\t\t\t\t\\\n+  check##TYPE (g07##TYPE,  7);\t\t\t\t\t\\\n+  check##TYPE (g08##TYPE,  8);\t\t\t\t\t\\\n+  check##TYPE (g09##TYPE,  9);\t\t\t\t\t\\\n+  check##TYPE (g10##TYPE, 10);\t\t\t\t\t\\\n+  check##TYPE (g11##TYPE, 11);\t\t\t\t\t\\\n+  check##TYPE (g12##TYPE, 12);\t\t\t\t\t\\\n+  check##TYPE (g13##TYPE, 13);\t\t\t\t\t\\\n+  check##TYPE (g14##TYPE, 14);\t\t\t\t\t\\\n+  check##TYPE (g15##TYPE, 15);\t\t\t\t\t\\\n+  check##TYPE (g16##TYPE, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+test0##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return g01##TYPE;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+test1##TYPE (TYPE x01)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return x01;\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+testva##TYPE (int n, ...)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  TYPE rslt;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\\\n+  va_start (ap, n);\t\t\t\t\t\t\\\n+  for (i = 0; i < n; i++)\t\t\t\t\t\\\n+      rslt = va_arg (ap, TYPE);\t\t\t\t\t\\\n+  va_end (ap);\t\t\t\t\t\t\t\\\n+  return rslt;\t\t\t\t\t\t\t\\\n+}\n+\n+T(Sfi)\n+T(Sfii)\n+T(Sfifi)\n+T(Sfiifii)"}]}