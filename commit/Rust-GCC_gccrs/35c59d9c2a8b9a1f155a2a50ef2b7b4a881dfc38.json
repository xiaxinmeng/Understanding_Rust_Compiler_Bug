{"sha": "35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzVjNTlkOWMyYThiOWExZjE1NWEyYTUwZWYyYjdiNGE4ODFkZmMzOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-05-02T12:31:18Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2010-05-02T12:31:18Z"}, "message": "vmsdbgout.c (ASM_OUTPUT_DEBUG_DATA1): Change format string placeholder from 0x%x to %#x.\n\n\t* vmsdbgout.c (ASM_OUTPUT_DEBUG_DATA1): Change format string\n\tplaceholder from 0x%x to %#x.\n\t(ASM_OUTPUT_DEBUG_DATA1): Ditto.\n\t(ASM_OUTPUT_DEBUG_DATA4): Ditto.\n\t(ASM_OUTPUT_DEBUG_DATA): Ditto.\n\t(ASM_OUTPUT_DEBUG_ADDR_DATA): Ditto.\n\t(ASM_OUTPUT_DEBUG_DATA8): Ditto.\n\t* optc-gen.awk: Ditto.\n\t* hwint.h (HOST_WIDE_INT_PRINT_DOUBLE_HEX): Ditto.\n\t(HOST_WIDE_INT_PRINT_HEX): Ditto.\n\t(HOST_WIDEST_INT_PRINT_HEX): Ditto.\n\t(HOST_WIDEST_INT_PRINT_DOUBLE_HEX): Ditto.\n\t* gcov-dump.c (tag_function): Ditto.\n\t(tag_summary): Ditto.\n\nFrom-SVN: r158971", "tree": {"sha": "dc141e6dcb38141eba52489ad02e60f4a5962d78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc141e6dcb38141eba52489ad02e60f4a5962d78"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38/comments", "author": null, "committer": null, "parents": [{"sha": "82f81f18bfb02bde22c234feaf9b223a94662925", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82f81f18bfb02bde22c234feaf9b223a94662925", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82f81f18bfb02bde22c234feaf9b223a94662925"}], "stats": {"total": 96, "additions": 55, "deletions": 41}, "files": [{"sha": "ebfcbec2abc1562eea71e03284369a8f56b848ee", "filename": "gcc/ChangeLog", "status": "modified", "additions": 32, "deletions": 18, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38", "patch": "@@ -1,3 +1,20 @@\n+2010-05-02  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* vmsdbgout.c (ASM_OUTPUT_DEBUG_DATA1): Change format string\n+\tplaceholder from 0x%x to %#x.\n+\t(ASM_OUTPUT_DEBUG_DATA1): Ditto.\n+\t(ASM_OUTPUT_DEBUG_DATA4): Ditto.\n+\t(ASM_OUTPUT_DEBUG_DATA): Ditto.\n+\t(ASM_OUTPUT_DEBUG_ADDR_DATA): Ditto.\n+\t(ASM_OUTPUT_DEBUG_DATA8): Ditto.\n+\t* optc-gen.awk: Ditto.\n+\t* hwint.h (HOST_WIDE_INT_PRINT_DOUBLE_HEX): Ditto.\n+\t(HOST_WIDE_INT_PRINT_HEX): Ditto.\n+\t(HOST_WIDEST_INT_PRINT_HEX): Ditto.\n+\t(HOST_WIDEST_INT_PRINT_DOUBLE_HEX): Ditto.\n+\t* gcov-dump.c (tag_function): Ditto.\n+\t(tag_summary): Ditto.\n+\n 2010-05-01  Anatoly Sokolov  <aesok@post.ru>\n \n \t* target.h (struct calls): Add function_value_regno_p field.\n@@ -148,11 +165,9 @@\n \tsimplify cgraph tags and document.\n \t(lto_output_node): Use only LTO_cgraph_unavail_node and\n \tLTO_cgraph_analyzed_node; Do not save analzed, reachable,\n-\tfor_functions_valid, global info, process and output\n-\tflags.\n+\tfor_functions_valid, global info, process and output flags.\n \t(input_overwrite_node): Initialize estimated stack size and\n-\testimated growth.\n-\tDo not read flags we no longer store.\n+\testimated growth.  Do not read flags we no longer store.\n \t(input_node): Likewise do not read info no longer stored.\n \t* ipa-inline.c (cgraph_mark_inline_edge): Do not set global.inlined\n \tflag.\n@@ -179,7 +194,8 @@\n \t* lto-section-in.c: Include ggc.h\n \t(lto_new_in_decl_state): Alloc in GGC.\n \t(lto_delete_in_decl_state): Likewise.\n-\t* ipa.c (pass_ipa_function_visibility, pass_ipa_whole_program): Collect.\n+\t* ipa.c (pass_ipa_function_visibility, pass_ipa_whole_program):\n+\tCollect.\n \n 2010-04-29  Bernd Schmidt  <bernds@codesourcery.com>\n \n@@ -192,23 +208,21 @@\n \taccount only if HONOR_REG_ALLOC_ORDER is not defined.\n \t* config/arm/arm.h (HONOR_REG_ALLOC_ORDER): Define.\n \t* system.h (ORDER_REGS_FOR_LOCAL_ALLOC): Poison.\n-\t\n-2010-04-29  Jon Grant <04@jguk.org>\n-\t\n+\n+2010-04-29  Jon Grant  <04@jguk.org>\n+\n \t* collect2.c (vflag): Change type from int to bool.\n \t(debug): Likewise.\n \t(helpflag): New global bool.\n-\t(main): Set vflag and debug with boolean, not integer truth\n-\tvalues.  Accept new \"--help\" option and output usage text if\n-\tfound.\n+\t(main): Set vflag and debug with boolean, not integer truth values.\n+\tAccept new \"--help\" option and output usage text if found.\n \t* collect2.h (vflag): Update prototype.\n \t(debug): Likewise.\n-\t\n+\n 2010-04-29  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR bootstrap/43936\n-\t* plugin.h (flag_plugin_added): Moved out of\n-\tinvoke_plugin_callbacks.\n+\t* plugin.h (flag_plugin_added): Moved out of invoke_plugin_callbacks.\n \n 2010-04-29  Richard Guenther  <rguenther@suse.de>\n \n@@ -231,7 +245,7 @@\n \t* ifcvt.c (dead_or_predicable): Use df_simulate_find_defs to compute\n \ttest_set.\n \n-2010-04-29  Brian Hackett   <bhackett1024@gmail.com>\n+2010-04-29  Brian Hackett  <bhackett1024@gmail.com>\n \n \t* plugin.h (invoke_plugin_callbacks): New inline function.\n \t* plugin.c (flag_plugin_added): New global flag.\n@@ -279,7 +293,8 @@\n \t(output_alias_pair_p): Handle variables.\n \t(output_unreferenced_globals): Output only needed partition of varpool.\n \t* ipa-inline.c (inline_write_summary): Update.\n-\t* lto-streamer-in.c (lto_input_tree_ref, lto_input_tree): Do not build cgraph.\n+\t* lto-streamer-in.c (lto_input_tree_ref, lto_input_tree): Do not build\n+\tcgraph.\n \t* lto-section-in.c (lto_section_name): Add varpool and jump funcs.\n \t* ipa.c (hash_varpool_node_set_element, eq_varpool_node_set_element,\n \tvarpool_node_set_new, varpool_node_set_add,\n@@ -511,8 +526,7 @@\n 2010-04-28  Richard Guenther  <rguenther@suse.de>\n \n \tPR c++/43880\n-\t* tree-inline.c (copy_bind_expr): Also copy bind expr vars\n-\tvalue-exprs.\n+\t* tree-inline.c (copy_bind_expr): Also copy bind expr vars value-exprs.\n \n 2010-04-27  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \t    Jan Hubicka <hubicka@ucw.cz>"}, {"sha": "44bbb44488fe74065481362b3803114680537d7d", "filename": "gcc/config/i386/gmon-sol2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38/gcc%2Fconfig%2Fi386%2Fgmon-sol2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38/gcc%2Fconfig%2Fi386%2Fgmon-sol2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fgmon-sol2.c?ref=35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38", "patch": "@@ -236,7 +236,7 @@ _mcleanup (void)\n \tfor (toindex=froms[fromindex]; toindex!=0; toindex=tos[toindex].link) {\n #\t    ifdef DEBUG\n \t\tfprintf( stderr ,\n-\t\t\t\"[mcleanup] frompc 0x%x selfpc 0x%x count %d\\n\" ,\n+\t\t\t\"[mcleanup] frompc %#x selfpc %#x count %d\\n\" ,\n \t\t\tfrompc , tos[toindex].selfpc , tos[toindex].count );\n #\t    endif /* DEBUG */\n \t    rawarc.raw_frompc = (unsigned long) frompc;"}, {"sha": "8aa6368de3e11415e2f8739e0ba5bf709ff9aace", "filename": "gcc/gcov-dump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38/gcc%2Fgcov-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38/gcc%2Fgcov-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.c?ref=35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38", "patch": "@@ -267,7 +267,7 @@ tag_function (const char *filename ATTRIBUTE_UNUSED,\n   unsigned long pos = gcov_position ();\n \n   printf (\" ident=%u\", gcov_read_unsigned ());\n-  printf (\", checksum=0x%08x\", gcov_read_unsigned ());\n+  printf (\", checksum=%#08x\", gcov_read_unsigned ());\n \n   if (gcov_position () - pos < length)\n     {\n@@ -418,7 +418,7 @@ tag_summary (const char *filename ATTRIBUTE_UNUSED,\n   unsigned ix;\n \n   gcov_read_summary (&summary);\n-  printf (\" checksum=0x%08x\", summary.checksum);\n+  printf (\" checksum=%#08x\", summary.checksum);\n \n   for (ix = 0; ix != GCOV_COUNTERS_SUMMABLE; ix++)\n     {"}, {"sha": "327a12f03623125371370bf79c70e243878400ec", "filename": "gcc/hwint.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38/gcc%2Fhwint.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38/gcc%2Fhwint.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhwint.h?ref=35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38", "patch": "@@ -82,23 +82,23 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n      must be tweaked accordingly.  */\n # if HOST_BITS_PER_WIDE_INT == 64\n #  define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n-     \"0x%\" HOST_LONG_FORMAT \"x%016\" HOST_LONG_FORMAT \"x\"\n+     \"%#\" HOST_LONG_FORMAT \"x%016\" HOST_LONG_FORMAT \"x\"\n # else\n #  define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n-     \"0x%\" HOST_LONG_FORMAT \"x%08\" HOST_LONG_FORMAT \"x\"\n+     \"%#\" HOST_LONG_FORMAT \"x%08\" HOST_LONG_FORMAT \"x\"\n # endif\n #else\n # define HOST_WIDE_INT_PRINT HOST_LONG_LONG_FORMAT\n # define HOST_WIDE_INT_PRINT_C \"LL\"\n   /* We can assume that 'long long' is at least 64 bits.  */\n # define HOST_WIDE_INT_PRINT_DOUBLE_HEX \\\n-    \"0x%\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n+    \"%#\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n #endif /* HOST_BITS_PER_WIDE_INT == HOST_BITS_PER_LONG */\n \n #define HOST_WIDE_INT_PRINT_DEC \"%\" HOST_WIDE_INT_PRINT \"d\"\n #define HOST_WIDE_INT_PRINT_DEC_C HOST_WIDE_INT_PRINT_DEC HOST_WIDE_INT_PRINT_C\n #define HOST_WIDE_INT_PRINT_UNSIGNED \"%\" HOST_WIDE_INT_PRINT \"u\"\n-#define HOST_WIDE_INT_PRINT_HEX \"0x%\" HOST_WIDE_INT_PRINT \"x\"\n+#define HOST_WIDE_INT_PRINT_HEX \"%#\" HOST_WIDE_INT_PRINT \"x\"\n \n /* Set HOST_WIDEST_INT.  This is a 64-bit type unless the compiler\n    in use has no 64-bit type at all; in that case it's 32 bits.  */\n@@ -129,9 +129,9 @@ extern char sizeof_long_long_must_be_8[sizeof(long long) == 8 ? 1 : -1];\n # define HOST_WIDEST_INT_PRINT_DEC\t      \"%\" HOST_LONG_LONG_FORMAT \"d\"\n # define HOST_WIDEST_INT_PRINT_DEC_C\t      \"%\" HOST_LONG_LONG_FORMAT \"dLL\"\n # define HOST_WIDEST_INT_PRINT_UNSIGNED\t      \"%\" HOST_LONG_LONG_FORMAT \"u\"\n-# define HOST_WIDEST_INT_PRINT_HEX\t      \"0x%\" HOST_LONG_LONG_FORMAT \"x\"\n+# define HOST_WIDEST_INT_PRINT_HEX\t      \"%#\" HOST_LONG_LONG_FORMAT \"x\"\n # define HOST_WIDEST_INT_PRINT_DOUBLE_HEX     \\\n-    \"0x%\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n+    \"%#\" HOST_LONG_LONG_FORMAT \"x%016\" HOST_LONG_LONG_FORMAT \"x\"\n #endif\n \n /* Define HOST_WIDEST_FAST_INT to the widest integer type supported"}, {"sha": "60211df2de16920bc5dc8534f1785142fc04ba8e", "filename": "gcc/optc-gen.awk", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38/gcc%2Foptc-gen.awk", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38/gcc%2Foptc-gen.awk", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptc-gen.awk?ref=35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38", "patch": "@@ -339,7 +339,7 @@ print \"{\";\n print \"  fputs (\\\"\\\\n\\\", file);\";\n for (i = 0; i < n_opt_other; i++) {\n \tprint \"  if (ptr->\" var_opt_other[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (0x%lx)\\\\n\\\",\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#lx)\\\\n\\\",\";\n \tprint \"             indent_to, \\\"\\\",\";\n \tprint \"             \\\"\" var_opt_other[i] \"\\\",\";\n \tprint \"             (unsigned long)ptr->\" var_opt_other[i] \");\";\n@@ -348,7 +348,7 @@ for (i = 0; i < n_opt_other; i++) {\n \n for (i = 0; i < n_opt_int; i++) {\n \tprint \"  if (ptr->\" var_opt_int[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (0x%x)\\\\n\\\",\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n \tprint \"             indent_to, \\\"\\\",\";\n \tprint \"             \\\"\" var_opt_int[i] \"\\\",\";\n \tprint \"             ptr->\" var_opt_int[i] \");\";\n@@ -357,7 +357,7 @@ for (i = 0; i < n_opt_int; i++) {\n \n for (i = 0; i < n_opt_short; i++) {\n \tprint \"  if (ptr->\" var_opt_short[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (0x%x)\\\\n\\\",\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n \tprint \"             indent_to, \\\"\\\",\";\n \tprint \"             \\\"\" var_opt_short[i] \"\\\",\";\n \tprint \"             ptr->\" var_opt_short[i] \");\";\n@@ -366,7 +366,7 @@ for (i = 0; i < n_opt_short; i++) {\n \n for (i = 0; i < n_opt_char; i++) {\n \tprint \"  if (ptr->\" var_opt_char[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (0x%x)\\\\n\\\",\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n \tprint \"             indent_to, \\\"\\\",\";\n \tprint \"             \\\"\" var_opt_char[i] \"\\\",\";\n \tprint \"             ptr->\" var_opt_char[i] \");\";\n@@ -494,7 +494,7 @@ print \"{\";\n print \"  fputs (\\\"\\\\n\\\", file);\";\n for (i = 0; i < n_target_other; i++) {\n \tprint \"  if (ptr->\" var_target_other[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (0x%lx)\\\\n\\\",\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#lx)\\\\n\\\",\";\n \tprint \"             indent, \\\"\\\",\";\n \tprint \"             \\\"\" var_target_other[i] \"\\\",\";\n \tprint \"             (unsigned long)ptr->\" var_target_other[i] \");\";\n@@ -503,7 +503,7 @@ for (i = 0; i < n_target_other; i++) {\n \n for (i = 0; i < n_target_int; i++) {\n \tprint \"  if (ptr->\" var_target_int[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (0x%x)\\\\n\\\",\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n \tprint \"             indent, \\\"\\\",\";\n \tprint \"             \\\"\" var_target_int[i] \"\\\",\";\n \tprint \"             ptr->\" var_target_int[i] \");\";\n@@ -512,7 +512,7 @@ for (i = 0; i < n_target_int; i++) {\n \n for (i = 0; i < n_target_short; i++) {\n \tprint \"  if (ptr->\" var_target_short[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (0x%x)\\\\n\\\",\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n \tprint \"             indent, \\\"\\\",\";\n \tprint \"             \\\"\" var_target_short[i] \"\\\",\";\n \tprint \"             ptr->\" var_target_short[i] \");\";\n@@ -521,7 +521,7 @@ for (i = 0; i < n_target_short; i++) {\n \n for (i = 0; i < n_target_char; i++) {\n \tprint \"  if (ptr->\" var_target_char[i] \")\";\n-\tprint \"    fprintf (file, \\\"%*s%s (0x%x)\\\\n\\\",\";\n+\tprint \"    fprintf (file, \\\"%*s%s (%#x)\\\\n\\\",\";\n \tprint \"             indent, \\\"\\\",\";\n \tprint \"             \\\"\" var_target_char[i] \"\\\",\";\n \tprint \"             ptr->\" var_target_char[i] \");\";"}, {"sha": "44e4dc8cb90b3f15a0a474d0aa46408854a1f083", "filename": "gcc/vmsdbgout.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38/gcc%2Fvmsdbgout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38/gcc%2Fvmsdbgout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvmsdbgout.c?ref=35c59d9c2a8b9a1f155a2a50ef2b7b4a881dfc38", "patch": "@@ -351,34 +351,34 @@ static char text_end_label[MAX_ARTIFICIAL_LABEL_BYTES];\n \n #ifndef ASM_OUTPUT_DEBUG_DATA1\n #define ASM_OUTPUT_DEBUG_DATA1(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%x\", ASM_BYTE_OP, (unsigned char) VALUE)\n+  fprintf ((FILE), \"\\t%s\\t%#x\", ASM_BYTE_OP, (unsigned char) VALUE)\n #endif\n \n #ifndef ASM_OUTPUT_DEBUG_DATA2\n #define ASM_OUTPUT_DEBUG_DATA2(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%x\", UNALIGNED_SHORT_ASM_OP, \\\n+  fprintf ((FILE), \"\\t%s\\t%#x\", UNALIGNED_SHORT_ASM_OP, \\\n \t   (unsigned short) VALUE)\n #endif\n \n #ifndef ASM_OUTPUT_DEBUG_DATA4\n #define ASM_OUTPUT_DEBUG_DATA4(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%lx\", UNALIGNED_INT_ASM_OP, (unsigned long) VALUE)\n+  fprintf ((FILE), \"\\t%s\\t%#lx\", UNALIGNED_INT_ASM_OP, (unsigned long) VALUE)\n #endif\n \n #ifndef ASM_OUTPUT_DEBUG_DATA\n #define ASM_OUTPUT_DEBUG_DATA(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%lx\", UNALIGNED_OFFSET_ASM_OP(VALUE), VALUE)\n+  fprintf ((FILE), \"\\t%s\\t%#lx\", UNALIGNED_OFFSET_ASM_OP(VALUE), VALUE)\n #endif\n \n #ifndef ASM_OUTPUT_DEBUG_ADDR_DATA\n #define ASM_OUTPUT_DEBUG_ADDR_DATA(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%lx\", UNALIGNED_PTR_ASM_OP, \\\n+  fprintf ((FILE), \"\\t%s\\t%#lx\", UNALIGNED_PTR_ASM_OP, \\\n \t   (unsigned long) VALUE)\n #endif\n \n #ifndef ASM_OUTPUT_DEBUG_DATA8\n #define ASM_OUTPUT_DEBUG_DATA8(FILE,VALUE) \\\n-  fprintf ((FILE), \"\\t%s\\t0x%llx\", UNALIGNED_DOUBLE_INT_ASM_OP, \\\n+  fprintf ((FILE), \"\\t%s\\t%#llx\", UNALIGNED_DOUBLE_INT_ASM_OP, \\\n                                  (unsigned long long) VALUE)\n #endif\n "}]}