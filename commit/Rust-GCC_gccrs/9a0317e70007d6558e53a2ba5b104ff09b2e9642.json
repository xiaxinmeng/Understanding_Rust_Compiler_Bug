{"sha": "9a0317e70007d6558e53a2ba5b104ff09b2e9642", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWEwMzE3ZTcwMDA3ZDY1NThlNTNhMmJhNWIxMDRmZjA5YjJlOTY0Mg==", "commit": {"author": {"name": "Paul A. Clarke", "email": "pc@us.ibm.com", "date": "2018-12-19T15:06:00Z"}, "committer": {"name": "Paul Clarke", "email": "pc@gcc.gnu.org", "date": "2018-12-19T15:06:00Z"}, "message": "[rs6000] Fix x86 SSSE3 compatibility implementations and testcases\n\nThis patch is the analog to r266868-r266870, but for SSSE3.\nThe SSSE3 tests had been inadvertently made to PASS without actually running\nthe test code. Actually running the code turned up some previously undetected\nissues.\n\nThis patch fixes some issues in the implementations, fixes up the tests\nto use a union for the test data, which avoids strict aliasing issues,\nand enables the tests to actually run (by removing a dependency on\n__BUILTIN_CPU_SUPPORTS).\n\nAlso, there's a fairly insignificant change in the testcases that walk\nthrough the data as pairs of vectors from:\n  [0] and [1]\n  [2] and [3]\n  ...\n  [n-4] and [n-3]\n  [n-2] and [n-1]\n\nto:\n  [0] and [1]\n  [1] and [2]\n  ...\n  [n-3] and [n-2]\n  [n-2] and [n-1]\n\nSince the testcases compute the correct answers based on the input, no\nother changes were necessary to effect the change.\n\n2018-12-19  Paul A. Clarke  <pc@us.ibm.com>\n\n[gcc]\n\n\t* config/rs6000/tmmintrin.h (_mm_hadds_epi16): Vector lanes swapped.\n\t(_mm_hsub_epi32): Likewise.\n\t(_mm_shuffle_epi8): Fix reversed interpretation of parameters.\n\t(_mm_shuffle_pi8): Likewise.\n\t(_mm_addubs_pi16): Likewise.\n\n[gcc/testsuite]\n\n\t* gcc.target/powerpc/ssse3-check.h: Enable tests to run.\n\t* gcc.target/powerpc/ssse3-pabsb.c: Code fixes for strict aliasing\n\tissues.\n\t* gcc.target/powerpc/ssse3-pabsd.c: Likewise.\n\t* gcc.target/powerpc/ssse3-palignr.c: Likewise.\n\t* gcc.target/powerpc/ssse3-phaddd.c: Likewise.\n\t* gcc.target/powerpc/ssse3-phaddsw.c: Likewise.\n\t* gcc.target/powerpc/ssse3-phaddw.c: Likewise.\n\t* gcc.target/powerpc/ssse3-phsubd.c: Likewise.\n\t* gcc.target/powerpc/ssse3-phsubw.c: Likewise.\n\t* gcc.target/powerpc/ssse3-pmulhrsw.c: Likewise.\n\t* gcc.target/powerpc/ssse3-pshufb.c: Likewise.\n\t* gcc.target/powerpc/ssse3-psignb.c: Likewise.\n\t* gcc.target/powerpc/ssse3-psignd.c: Likewise.\n\t* gcc.target/powerpc/ssse3-psignw.c: Likewise.\n\t* gcc.target/powerpc/ssse3-vals.h: Provide input data as a union.\n\nFrom-SVN: r267271", "tree": {"sha": "f1f4edb728114846cdec925fe3fa4c24fef616bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f1f4edb728114846cdec925fe3fa4c24fef616bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a0317e70007d6558e53a2ba5b104ff09b2e9642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0317e70007d6558e53a2ba5b104ff09b2e9642", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a0317e70007d6558e53a2ba5b104ff09b2e9642", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a0317e70007d6558e53a2ba5b104ff09b2e9642/comments", "author": {"login": "ThinkOpenly", "id": 12301795, "node_id": "MDQ6VXNlcjEyMzAxNzk1", "avatar_url": "https://avatars.githubusercontent.com/u/12301795?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThinkOpenly", "html_url": "https://github.com/ThinkOpenly", "followers_url": "https://api.github.com/users/ThinkOpenly/followers", "following_url": "https://api.github.com/users/ThinkOpenly/following{/other_user}", "gists_url": "https://api.github.com/users/ThinkOpenly/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThinkOpenly/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThinkOpenly/subscriptions", "organizations_url": "https://api.github.com/users/ThinkOpenly/orgs", "repos_url": "https://api.github.com/users/ThinkOpenly/repos", "events_url": "https://api.github.com/users/ThinkOpenly/events{/privacy}", "received_events_url": "https://api.github.com/users/ThinkOpenly/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ec5e681485a3a069ccf0316dacba4ce6fa348c6b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec5e681485a3a069ccf0316dacba4ce6fa348c6b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec5e681485a3a069ccf0316dacba4ce6fa348c6b"}], "stats": {"total": 943, "additions": 443, "deletions": 500}, "files": [{"sha": "5aef7b5ee10fdf1f950b4f4056d76889d6cbabd8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -1,3 +1,11 @@\n+2018-12-19  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* config/rs6000/tmmintrin.h (_mm_hadds_epi16): Vector lanes swapped.\n+\t(_mm_hsub_epi32): Likewise.\n+\t(_mm_shuffle_epi8): Fix reversed interpretation of parameters.\n+\t(_mm_shuffle_pi8): Likewise.\n+\t(_mm_addubs_pi16): Likewise.\n+\n 2018-12-19  Thomas Preud'homme  <thomas.preudhomme@linaro.org>\n \n \t* config/arm/arm.h (TARGET_HARD_FLOAT): Restrict to TARGET_32BIT"}, {"sha": "1841872ac7a12bc931fca0c779e72d8b7bc973c9", "filename": "gcc/config/rs6000/tmmintrin.h", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Fconfig%2Frs6000%2Ftmmintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Fconfig%2Frs6000%2Ftmmintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Ftmmintrin.h?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -228,7 +228,7 @@ _mm_hadds_epi16 (__m128i __A, __m128i __B)\n   __v4si __C = { 0 }, __D = { 0 };\n   __C = vec_sum4s ((__v8hi) __A, __C);\n   __D = vec_sum4s ((__v8hi) __B, __D);\n-  __C = (__v4si) vec_packs (__D, __C);\n+  __C = (__v4si) vec_packs (__C, __D);\n   return (__m128i) __C;\n }\n \n@@ -264,8 +264,8 @@ _mm_hsub_epi32 (__m128i __A, __m128i __B)\n     {  0,  1,  2,  3,  8,  9, 10, 11, 16, 17, 18, 19, 24, 25, 26, 27 };\n   const __v16qu __Q =\n     {  4,  5,  6,  7, 12, 13, 14, 15, 20, 21, 22, 23, 28, 29, 30, 31 };\n-  __v4si __C = vec_perm ((__v4si) __B, (__v4si) __A, __P);\n-  __v4si __D = vec_perm ((__v4si) __B, (__v4si) __A, __Q);\n+  __v4si __C = vec_perm ((__v4si) __A, (__v4si) __B, __P);\n+  __v4si __D = vec_perm ((__v4si) __A, (__v4si) __B, __Q);\n   return (__m128i) vec_sub (__C, __D);\n }\n \n@@ -332,7 +332,7 @@ __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_shuffle_epi8 (__m128i __A, __m128i __B)\n {\n   const __v16qi __zero = { 0 };\n-  __vector __bool char __select = vec_cmplt ((__v16qi) __A, __zero);\n+  __vector __bool char __select = vec_cmplt ((__v16qi) __B, __zero);\n   __v16qi __C = vec_perm ((__v16qi) __A, (__v16qi) __A, (__v16qu) __B);\n   return (__m128i) vec_sel (__C, __zero, __select);\n }\n@@ -344,7 +344,7 @@ _mm_shuffle_pi8 (__m64 __A, __m64 __B)\n   const __v16qi __zero = { 0 };\n   __v16qi __C = (__v16qi) (__v2du) { __A, __A };\n   __v16qi __D = (__v16qi) (__v2du) { __B, __B };\n-  __vector __bool char __select = vec_cmplt ((__v16qi) __C, __zero);\n+  __vector __bool char __select = vec_cmplt ((__v16qi) __D, __zero);\n   __C = vec_perm ((__v16qi) __C, (__v16qi) __C, (__v16qu) __D);\n   __C = vec_sel (__C, __zero, __select);\n   return (__m64) ((__v2du) (__C))[0];\n@@ -423,11 +423,11 @@ extern __inline __m128i\n __attribute__((__gnu_inline__, __always_inline__, __artificial__))\n _mm_maddubs_epi16 (__m128i __A, __m128i __B)\n {\n-  __v8hi __C = vec_unpackh ((__v16qi) __A);\n-  __v8hi __D = vec_unpackl ((__v16qi) __A);\n   __v8hi __unsigned = vec_splats ((signed short) 0x00ff);\n-  __v8hi __E = vec_and (vec_unpackh ((__v16qi) __B), __unsigned);\n-  __v8hi __F = vec_and (vec_unpackl ((__v16qi) __B), __unsigned);\n+  __v8hi __C = vec_and (vec_unpackh ((__v16qi) __A), __unsigned);\n+  __v8hi __D = vec_and (vec_unpackl ((__v16qi) __A), __unsigned);\n+  __v8hi __E = vec_unpackh ((__v16qi) __B);\n+  __v8hi __F = vec_unpackl ((__v16qi) __B);\n   __C = vec_mul (__C, __E);\n   __D = vec_mul (__D, __F);\n   const __v16qu __odds  =\n@@ -445,10 +445,10 @@ _mm_maddubs_pi16 (__m64 __A, __m64 __B)\n {\n   __v8hi __C = (__v8hi) (__v2du) { __A, __A };\n   __C = vec_unpackl ((__v16qi) __C);\n+  const __v8hi __unsigned = vec_splats ((signed short) 0x00ff);\n+  __C = vec_and (__C, __unsigned);\n   __v8hi __D = (__v8hi) (__v2du) { __B, __B };\n   __D = vec_unpackl ((__v16qi) __D);\n-  const __v8hi __unsigned = vec_splats ((signed short) 0x00ff);\n-  __D = vec_and (__D, __unsigned);\n   __D = vec_mul (__C, __D);\n   const __v16qu __odds  =\n     {  0,  1,  4,  5,  8,  9, 12, 13, 16, 17, 20, 21, 24, 25, 28, 29 };"}, {"sha": "9265458e9740dc1793bd99de1a5652c45bdd1b86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -1,3 +1,22 @@\n+2018-12-19  Paul A. Clarke  <pc@us.ibm.com>\n+\n+\t* gcc.target/powerpc/ssse3-check.h: Enable tests to run.\n+\t* gcc.target/powerpc/ssse3-pabsb.c: Code fixes for strict aliasing\n+\tissues.\n+\t* gcc.target/powerpc/ssse3-pabsd.c: Likewise.\n+\t* gcc.target/powerpc/ssse3-palignr.c: Likewise.\n+\t* gcc.target/powerpc/ssse3-phaddd.c: Likewise.\n+\t* gcc.target/powerpc/ssse3-phaddsw.c: Likewise.\n+\t* gcc.target/powerpc/ssse3-phaddw.c: Likewise.\n+\t* gcc.target/powerpc/ssse3-phsubd.c: Likewise.\n+\t* gcc.target/powerpc/ssse3-phsubw.c: Likewise.\n+\t* gcc.target/powerpc/ssse3-pmulhrsw.c: Likewise.\n+\t* gcc.target/powerpc/ssse3-pshufb.c: Likewise.\n+\t* gcc.target/powerpc/ssse3-psignb.c: Likewise.\n+\t* gcc.target/powerpc/ssse3-psignd.c: Likewise.\n+\t* gcc.target/powerpc/ssse3-psignw.c: Likewise.\n+\t* gcc.target/powerpc/ssse3-vals.h: Provide input data as a union.\n+\n 2018-12-19  Thomas Preud'homme  <thomas.preudhomme@linaro.org>\n \n \t* gcc.target/arm/cmse/baseline/softfp.c: Force an FPU."}, {"sha": "cb1000ff3b7bab56d43a2633eece7161f752290b", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-check.h", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-check.h?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -19,24 +19,9 @@ do_test (void)\n int\n main ()\n {\n-#ifdef __BUILTIN_CPU_SUPPORTS__\n-  /* Most SSE intrinsic operations can be implemented via VMX\n-     instructions, but some operations may be faster / simpler\n-     using the POWER8 VSX instructions.  This is especially true\n-     when we are transferring / converting to / from __m64 types.\n-     The direct register transfer instructions from POWER8 are\n-     especially important.  So we test for arch_2_07.  */\n-  if (__builtin_cpu_supports (\"arch_2_07\"))\n-    {\n-      do_test ();\n+  do_test ();\n #ifdef DEBUG\n-      printf (\"PASSED\\n\");\n+  printf (\"PASSED\\n\");\n #endif\n-    }\n-#ifdef DEBUG\n-  else\n-    printf (\"SKIPPED\\n\");\n-#endif\n-#endif /* __BUILTIN_CPU_SUPPORTS__ */\n   return 0;\n }"}, {"sha": "180ae34944ce4553a031c670d589c40d526af1f4", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-pabsb.c", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsb.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -18,61 +18,57 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_pabsb (int *i1, int *r)\n+ssse3_test_pabsb (__m64 *i1, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  *(__m64 *) r = _mm_abs_pi8 (t1);\n+  *r = _mm_abs_pi8 (*i1);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_pabsb128 (int *i1, int *r)\n+ssse3_test_pabsb128 (__m128i *i1, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  *(__m128i *) r = _mm_abs_epi8 (t1);\n+  *r = _mm_abs_epi8 (*i1);\n }\n \n /* Routine to manually compute the results */\n static void\n-compute_correct_result (int *i1, int *r)\n+compute_correct_result (signed char *i1, signed char *r)\n {\n-  char *b1 = (char *) i1;\n-  char *bout = (char *) r;\n   int i;\n \n   for (i = 0; i < 16; i++)\n-    if (b1[i] < 0)\n-      bout[i] = -b1[i];\n+    if (i1[i] < 0)\n+      r[i] = -i1[i];\n     else\n-      bout[i] = b1[i];\n+      r[i] = i1[i];\n }\n \n static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 4)\n+  for (i = 0; i < ARRAY_SIZE (vals); i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result(&vals[i + 0], ck);\n+      compute_correct_result(&vals[i].b[0], &ck.b[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_pabsb (&vals[i + 0], &r[0]);\n-      ssse3_test_pabsb (&vals[i + 2], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_pabsb (&vals[i].ll[0], &r.ll[0]);\n+      ssse3_test_pabsb (&vals[i].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_pabsb128 (&vals[i + 0], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_pabsb128 (&vals[i].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "4a47030aaebd86fc00a9b6946ed5d038021e1a14", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-pabsd.c", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsd.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -19,21 +19,19 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_pabsd (int *i1, int *r)\n+ssse3_test_pabsd (__m64 *i1, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  *(__m64 *) r = _mm_abs_pi32 (t1);\n+  *r = _mm_abs_pi32 (*i1);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_pabsd128 (int *i1, int *r)\n+ssse3_test_pabsd128 (__m128i *i1, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  *(__m128i *) r = _mm_abs_epi32 (t1);\n+  *r = _mm_abs_epi32 (*i1);\n }\n \n /* Routine to manually compute the results */\n@@ -53,25 +51,25 @@ static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 4)\n+  for (i = 0; i < ARRAY_SIZE (vals); i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result(&vals[i + 0], ck);\n+      compute_correct_result(&vals[i].w[0], &ck.w[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_pabsd (&vals[i + 0], &r[0]);\n-      ssse3_test_pabsd (&vals[i + 2], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_pabsd (&vals[i].ll[0], &r.ll[0]);\n+      ssse3_test_pabsd (&vals[i].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_pabsd128 (&vals[i + 0], r);\n-      fail += chk_128(ck, r);\n+      ssse3_test_pabsd128 (&vals[i].m[0], &r.m[0]);\n+      fail += chk_128(ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "e068b0ac2e08fe6f9130dd3d043b0ecbd9f2be12", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-pabsw.c", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pabsw.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -19,61 +19,57 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_pabsw (int *i1, int *r)\n+ssse3_test_pabsw (__m64 *i1, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  *(__m64 *) r = _mm_abs_pi16 (t1);\n+  *r = _mm_abs_pi16 (*i1);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_pabsw128 (int *i1, int *r)\n+ssse3_test_pabsw128 (__m128i *i1, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  *(__m128i *) r = _mm_abs_epi16 (t1);\n+  *r = _mm_abs_epi16 (*i1);\n }\n \n /* Routine to manually compute the results */\n static void\n-compute_correct_result (int *i1, int *r)\n+compute_correct_result (short *i1, short *r)\n {\n-  short *s1 = (short *) i1;\n-  short *sout = (short *) r;\n   int i;\n \n   for (i = 0; i < 8; i++)\n-    if (s1[i] < 0)\n-      sout[i] = -s1[i];\n+    if (i1[i] < 0)\n+      r[i] = -i1[i];\n     else\n-      sout[i] = s1[i];\n+      r[i] = i1[i];\n }\n \n static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 4)\n+  for (i = 0; i < ARRAY_SIZE (vals); i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result (&vals[i + 0], ck);\n+      compute_correct_result (&vals[i].h[0], &ck.h[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_pabsw (&vals[i + 0], &r[0]);\n-      ssse3_test_pabsw (&vals[i + 2], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_pabsw (&vals[i].ll[0], &r.ll[0]);\n+      ssse3_test_pabsw (&vals[i].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_pabsw128 (&vals[i + 0], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_pabsw128 (&vals[i].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n   \n   if (fail != 0)"}, {"sha": "cdd00c48b22def08e3b803253d6e5fef17e1ebeb", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-palignr.c", "status": "modified", "additions": 83, "deletions": 83, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-palignr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-palignr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-palignr.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -20,63 +20,60 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_palignr (int *i1, int *i2, unsigned int imm, int *r)\n+ssse3_test_palignr (__m64 *i1, __m64 *i2, unsigned int imm, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  __m64 t2 = *(__m64 *) i2;\n-\n   switch (imm)\n     {\n     case 0:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 0);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 0);\n       break;\n     case 1:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 1);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 1);\n       break;\n     case 2:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 2);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 2);\n       break;\n     case 3:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 3);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 3);\n       break;\n     case 4:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 4);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 4);\n       break;\n     case 5:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 5);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 5);\n       break;\n     case 6:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 6);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 6);\n       break;\n     case 7:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 7);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 7);\n       break;\n     case 8:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 8);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 8);\n       break;\n     case 9:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 9);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 9);\n       break;\n     case 10:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 10);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 10);\n       break;\n     case 11:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 11);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 11);\n       break;\n     case 12:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 12);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 12);\n       break;\n     case 13:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 13);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 13);\n       break;\n     case 14:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 14);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 14);\n       break;\n     case 15:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 15);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 15);\n       break;\n     default:\n-      *(__m64 *) r = _mm_alignr_pi8 (t1, t2, 16);\n+      *r = _mm_alignr_pi8 (*i1, *i2, 16);\n       break;\n     }\n \n@@ -86,192 +83,195 @@ ssse3_test_palignr (int *i1, int *i2, unsigned int imm, int *r)\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_palignr128 (int *i1, int *i2, unsigned int imm, int *r)\n+ssse3_test_palignr128 (__m128i *i1, __m128i *i2, unsigned int imm, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  __m128i t2 = *(__m128i *) i2;\n \n   switch (imm)\n     {\n     case 0:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 0);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 0);\n       break;\n     case 1:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 1);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 1);\n       break;\n     case 2:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 2);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 2);\n       break;\n     case 3:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 3);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 3);\n       break;\n     case 4:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 4);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 4);\n       break;\n     case 5:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 5);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 5);\n       break;\n     case 6:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 6);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 6);\n       break;\n     case 7:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 7);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 7);\n       break;\n     case 8:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 8);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 8);\n       break;\n     case 9:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 9);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 9);\n       break;\n     case 10:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 10);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 10);\n       break;\n     case 11:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 11);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 11);\n       break;\n     case 12:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 12);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 12);\n       break;\n     case 13:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 13);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 13);\n       break;\n     case 14:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 14);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 14);\n       break;\n     case 15:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 15);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 15);\n       break;\n     case 16:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 16);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 16);\n       break;\n     case 17:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 17);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 17);\n       break;\n     case 18:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 18);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 18);\n       break;\n     case 19:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 19);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 19);\n       break;\n     case 20:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 20);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 20);\n       break;\n     case 21:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 21);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 21);\n       break;\n     case 22:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 22);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 22);\n       break;\n     case 23:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 23);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 23);\n       break;\n     case 24:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 24);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 24);\n       break;\n     case 25:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 25);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 25);\n       break;\n     case 26:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 26);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 26);\n       break;\n     case 27:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 27);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 27);\n       break;\n     case 28:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 28);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 28);\n       break;\n     case 29:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 29);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 29);\n       break;\n     case 30:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 30);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 30);\n       break;\n     case 31:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 31);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 31);\n       break;\n     default:\n-      *(__m128i *) r = _mm_alignr_epi8 (t1, t2, 32);\n+      *r = _mm_alignr_epi8 (*i1, *i2, 32);\n       break;\n     }\n }\n \n /* Routine to manually compute the results */\n static void\n-compute_correct_result_128 (int *i1, int *i2, unsigned int imm, int *r)\n+compute_correct_result_128 (signed char *i1, signed char *i2, unsigned int imm,\n+                            signed char *r)\n {\n-  char buf [32];\n-  char *bout = (char *) r;\n+  signed char buf [32];\n   int i;\n \n   memcpy (&buf[0], i2, 16);\n   memcpy (&buf[16], i1, 16);\n \n   for (i = 0; i < 16; i++)\n     if (imm >= 32 || imm + i >= 32)\n-      bout[i] = 0;\n+      r[i] = 0;\n     else\n-      bout[i] = buf[imm + i];\n+      r[i] = buf[imm + i];\n }\n \n #ifndef __AVX__\n static void\n-compute_correct_result_64 (int *i1, int *i2, unsigned int imm, int *r)\n+compute_correct_result_64 (signed char *i1, signed char *i2, unsigned int imm,\n+                           signed char *r)\n {\n-  char buf [16];\n-  char *bout = (char *)r;\n+  signed char buf [16];\n   int i;\n \n   /* Handle the first half */\n-  memcpy (&buf[0], i2, 8);\n-  memcpy (&buf[8], i1, 8);\n+  memcpy (&buf[0], &i2[0], 8);\n+  memcpy (&buf[8], &i1[0], 8);\n \n   for (i = 0; i < 8; i++)\n     if (imm >= 16 || imm + i >= 16)\n-      bout[i] = 0;\n+      r[i] = 0;\n     else\n-      bout[i] = buf[imm + i];\n+      r[i] = buf[imm + i];\n \n   /* Handle the second half */\n-  memcpy (&buf[0], &i2[2], 8);\n-  memcpy (&buf[8], &i1[2], 8);\n+  memcpy (&buf[0], &i2[8], 8);\n+  memcpy (&buf[8], &i1[8], 8);\n \n   for (i = 0; i < 8; i++)\n     if (imm >= 16 || imm + i >= 16)\n-      bout[i + 8] = 0;\n+      r[i + 8] = 0;\n     else\n-      bout[i + 8] = buf[imm + i];\n+      r[i + 8] = buf[imm + i];\n }\n #endif\n \n static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   unsigned int imm;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 8)\n+  for (i = 0; i < ARRAY_SIZE (vals) - 1; i++)\n     for (imm = 0; imm < 100; imm++)\n       {\n #ifndef __AVX__\n \t/* Manually compute the result */\n-\tcompute_correct_result_64 (&vals[i + 0], &vals[i + 4], imm, ck);\n+\tcompute_correct_result_64 (&vals[i + 0].b[0],\n+                                   &vals[i + 1].b[0], imm, &ck.b[0]);\n \n \t/* Run the 64-bit tests */\n-\tssse3_test_palignr (&vals[i + 0], &vals[i + 4], imm, &r[0]);\n-\tssse3_test_palignr (&vals[i + 2], &vals[i + 6], imm, &r[2]);\n-\tfail += chk_128 (ck, r);\n+\tssse3_test_palignr (&vals[i + 0].ll[0],\n+                            &vals[i + 1].ll[0], imm, &r.ll[0]);\n+\tssse3_test_palignr (&vals[i + 0].ll[1],\n+                            &vals[i + 1].ll[1], imm, &r.ll[1]);\n+\tfail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n \t/* Recompute the results for 128-bits */\n-\tcompute_correct_result_128 (&vals[i + 0], &vals[i + 4], imm, ck);\n+\tcompute_correct_result_128 (&vals[i + 0].b[0],\n+                                    &vals[i + 1].b[0], imm, &ck.b[0]);\n \n \t/* Run the 128-bit tests */\n-\tssse3_test_palignr128 (&vals[i + 0], &vals[i + 4], imm, r);\n-\tfail += chk_128 (ck, r);\n+\tssse3_test_palignr128 (&vals[i + 0].m[0],\n+                               &vals[i + 1].m[0], imm, &r.m[0]);\n+\tfail += chk_128 (ck.m[0], r.m[0]);\n       }\n \n   if (fail != 0)"}, {"sha": "e8108fadd1545b469220df427fb5770fc6eeb5fd", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-phaddd.c", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddd.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -19,23 +19,19 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_phaddd (int *i1, int *i2, int *r)\n+ssse3_test_phaddd (__m64 *i1, __m64 *i2, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  __m64 t2 = *(__m64 *) i2;\n-  *(__m64 *) r = _mm_hadd_pi32 (t1, t2);\n+  *r = _mm_hadd_pi32 (*i1, *i2);\n   _mm_empty();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_phaddd128 (int *i1, int *i2, int *r)\n+ssse3_test_phaddd128 (__m128i *i1, __m128i *i2, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  __m128i t2 = *(__m128i *) i2;\n-  *(__m128i *) r = _mm_hadd_epi32 (t1, t2);\n+  *r = _mm_hadd_epi32 (*i1, *i2);\n }\n \n /* Routine to manually compute the results */\n@@ -54,26 +50,25 @@ static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-\n-  for (i = 0; i < 256; i += 8)\n+  for (i = 0; i < ARRAY_SIZE (vals) - 1; i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+      compute_correct_result (&vals[i + 0].w[0], &vals[i + 1].w[0], &ck.w[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_phaddd (&vals[i + 0], &vals[i + 2], &r[0]);\n-      ssse3_test_phaddd (&vals[i + 4], &vals[i + 6], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_phaddd (&vals[i + 0].ll[0], &vals[i + 0].ll[1], &r.ll[0]);\n+      ssse3_test_phaddd (&vals[i + 1].ll[0], &vals[i + 1].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_phaddd128 (&vals[i + 0], &vals[i + 4], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_phaddd128 (&vals[i + 0].m[0], &vals[i + 1].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "efbdd5544b475684a9cfedba0f45df884c02124d", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-phaddsw.c", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddsw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddsw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddsw.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -19,23 +19,19 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_phaddsw (int *i1, int *i2, int *r)\n+ssse3_test_phaddsw (__m64 *i1, __m64 *i2, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  __m64 t2 = *(__m64 *) i2;\n-  *(__m64 *) r = _mm_hadds_pi16 (t1, t2);\n+  *r = _mm_hadds_pi16 (*i1, *i2);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_phaddsw128 (int *i1, int *i2, int *r)\n+ssse3_test_phaddsw128 (__m128i *i1, __m128i *i2, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  __m128i t2 = *(__m128i *) i2;\n- *(__m128i *) r = _mm_hadds_epi16 (t1, t2);\n+ *(__m128i *) r = _mm_hadds_epi16 (*i1, *i2);\n }\n \n static short\n@@ -52,42 +48,39 @@ signed_saturate_to_word (int x)\n \n /* Routine to manually compute the results */\n static void\n-compute_correct_result (int *i1, int *i2, int *r)\n+compute_correct_result (short *i1, short *i2, short *r)\n {\n-  short *s1 = (short *) i1;\n-  short *s2 = (short *) i2;\n-  short *sout = (short *) r;\n   int i;\n \n   for (i = 0; i < 4; i++)\n-    sout[i] = signed_saturate_to_word(s1[2 * i] + s1[2 * i + 1]);\n+    r[i + 0] = signed_saturate_to_word(i1[2 * i] + i1[2 * i + 1]);\n   for (i = 0; i < 4; i++)\n-    sout[i + 4] = signed_saturate_to_word(s2[2 * i] + s2[2 * i + 1]);\n+    r[i + 4] = signed_saturate_to_word(i2[2 * i] + i2[2 * i + 1]);\n }\n \n static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 8)\n+  for (i = 0; i < ARRAY_SIZE (vals) - 1; i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+      compute_correct_result (&vals[i + 0].h[0], &vals[i + 1].h[0], &ck.h[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_phaddsw (&vals[i + 0], &vals[i + 2], &r[0]);\n-      ssse3_test_phaddsw (&vals[i + 4], &vals[i + 6], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_phaddsw (&vals[i + 0].ll[0], &vals[i + 0].ll[1], &r.ll[0]);\n+      ssse3_test_phaddsw (&vals[i + 1].ll[0], &vals[i + 1].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_phaddsw128 (&vals[i + 0], &vals[i + 4], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_phaddsw128 (&vals[i + 0].m[0], &vals[i + 1].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "fa4b9a5ef87dedb86320eae28df99c34897b6018", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-phaddw.c", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phaddw.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -19,64 +19,57 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_phaddw (int *i1, int *i2, int *r)\n+ssse3_test_phaddw (__m64 *i1, __m64 *i2, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  __m64 t2 = *(__m64 *) i2;\n-  *(__m64 *) r = _mm_hadd_pi16 (t1, t2);\n+  *r = _mm_hadd_pi16 (*i1, *i2);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_phaddw128 (int *i1, int *i2, int *r)\n+ssse3_test_phaddw128 (__m128i *i1, __m128i *i2, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  __m128i t2 = *(__m128i *) i2;\n-  *(__m128i *) r = _mm_hadd_epi16 (t1, t2);\n+  *r = _mm_hadd_epi16 (*i1, *i2);\n }\n \n /* Routine to manually compute the results */\n static void\n-compute_correct_result(int *i1, int *i2, int *r)\n+compute_correct_result(short *i1, short *i2, short *r)\n {\n-  short *s1 = (short *) i1;\n-  short *s2 = (short *) i2;\n-  short *sout = (short *) r;\n   int i;\n \n   for (i = 0; i < 4; i++)\n-    sout[i] = s1[2 * i] + s1[2 * i + 1];\n+    r[i] = i1[2 * i] + i1[2 * i + 1];\n \n   for (i = 0; i < 4; i++)\n-    sout[i + 4] = s2[2 * i] + s2[2 * i + 1];\n+    r[i + 4] = i2[2 * i] + i2[2 * i + 1];\n }\n \n static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 8)\n+  for (i = 0; i < ARRAY_SIZE (vals) - 1; i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+      compute_correct_result (&vals[i + 0].h[0], &vals[i + 1].h[0], &ck.h[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_phaddw (&vals[i + 0], &vals[i + 2], &r[0]);\n-      ssse3_test_phaddw (&vals[i + 4], &vals[i + 6], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_phaddw (&vals[i + 0].ll[0], &vals[i + 0].ll[1], &r.ll[0]);\n+      ssse3_test_phaddw (&vals[i + 1].ll[0], &vals[i + 1].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_phaddw128 (&vals[i + 0], &vals[i + 4], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_phaddw128 (&vals[i + 0].m[0], &vals[i + 1].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "c8291bef424fa20b7ecbabb5de72f24131ba73c1", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-phsubd.c", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubd.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -19,23 +19,19 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_phsubd (int *i1, int *i2, int *r)\n+ssse3_test_phsubd (__m64 *i1, __m64 *i2, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  __m64 t2 = *(__m64 *) i2;\n-  *(__m64 *) r = _mm_hsub_pi32(t1, t2);\n+  *r = _mm_hsub_pi32 (*i1, *i2);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_phsubd128 (int *i1, int *i2, int *r)\n+ssse3_test_phsubd128 (__m128i *i1, __m128i *i2, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  __m128i t2 = *(__m128i *) i2;\n-  *(__m128i *) r = _mm_hsub_epi32 (t1, t2);\n+  *(__m128i *) r = _mm_hsub_epi32 (*i1, *i2);\n }\n \n /* Routine to manually compute the results */\n@@ -54,25 +50,25 @@ static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 8)\n+  for (i = 0; i < ARRAY_SIZE (vals) - 1; i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+      compute_correct_result (&vals[i + 0].w[0], &vals[i + 1].w[0], &ck.w[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_phsubd (&vals[i + 0], &vals[i + 2], &r[0]);\n-      ssse3_test_phsubd (&vals[i + 4], &vals[i + 6], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_phsubd (&vals[i + 0].ll[0], &vals[i + 0].ll[1], &r.ll[0]);\n+      ssse3_test_phsubd (&vals[i + 1].ll[0], &vals[i + 1].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_phsubd128 (&vals[i + 0], &vals[i + 4], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_phsubd128 (&vals[i + 0].m[0], &vals[i + 1].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "e03ae60bfef24e1f7ca150afd667ffd6fea96b8e", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-phsubsw.c", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubsw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubsw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubsw.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -19,25 +19,19 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_phsubsw (int *i1, int *i2, int *r)\n+ssse3_test_phsubsw (__m64 *i1, __m64 *i2, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  __m64 t2 = *(__m64 *) i2;\n-\n-  *(__m64 *) r = _mm_hsubs_pi16 (t1, t2);\n-\n+  *(__m64 *) r = _mm_hsubs_pi16 (*i1, *i2);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_phsubsw128 (int *i1, int *i2, int *r)\n+ssse3_test_phsubsw128 (__m128i *i1, __m128i *i2, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  __m128i t2 = *(__m128i *) i2;\n-  *(__m128i *) r = _mm_hsubs_epi16 (t1, t2);\n+  *r = _mm_hsubs_epi16 (*i1, *i2);\n }\n \n static short\n@@ -54,43 +48,40 @@ signed_saturate_to_word (int x)\n \n /* Routine to manually compute the results */\n static void\n-compute_correct_result (int *i1, int *i2, int *r)\n+compute_correct_result (short *i1, short *i2, short *r)\n {\n-  short *s1 = (short *) i1;\n-  short *s2 = (short *) i2;\n-  short *sout = (short *) r;\n   int i;\n \n   for (i = 0; i < 4; i++)\n-    sout[i] = signed_saturate_to_word (s1[2 * i] - s1[2 * i + 1]);\n+    r[i] = signed_saturate_to_word (i1[2 * i] - i1[2 * i + 1]);\n \n   for (i = 0; i < 4; i++)\n-    sout[i + 4] = signed_saturate_to_word (s2[2 * i] - s2[2 * i + 1]);\n+    r[i + 4] = signed_saturate_to_word (i2[2 * i] - i2[2 * i + 1]);\n }\n \n static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 8)\n+  for (i = 0; i < ARRAY_SIZE (vals) - 1; i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+      compute_correct_result (&vals[i + 0].h[0], &vals[i + 1].h[0], &ck.h[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_phsubsw (&vals[i + 0], &vals[i + 2], &r[0]);\n-      ssse3_test_phsubsw (&vals[i + 4], &vals[i + 6], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_phsubsw (&vals[i + 0].ll[0], &vals[i + 0].ll[1], &r.ll[0]);\n+      ssse3_test_phsubsw (&vals[i + 1].ll[0], &vals[i + 1].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_phsubsw128 (&vals[i + 0], &vals[i + 4], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_phsubsw128 (&vals[i + 0].m[0], &vals[i + 1].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "87ed6b4a6f15652096f29a486f4841b0d36bcf95", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-phsubw.c", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-phsubw.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -18,64 +18,56 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_phsubw (int *i1, int *i2, int *r)\n+ssse3_test_phsubw (__m64 *i1, __m64 *i2, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  __m64 t2 = *(__m64 *) i2;\n-  *(__m64 *) r = _mm_hsub_pi16 (t1, t2);\n+  *(__m64 *) r = _mm_hsub_pi16 (*i1, *i2);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_phsubw128 (int *i1, int *i2, int *r)\n+ssse3_test_phsubw128 (__m128i *i1, __m128i *i2, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  __m128i t2 = *(__m128i *) i2;\n-\n-  *(__m128i *) r = _mm_hsub_epi16 (t1, t2);\n+  *(__m128i *) r = _mm_hsub_epi16 (*i1, *i2);\n }\n \n /* Routine to manually compute the results */\n static void\n-compute_correct_result (int *i1, int *i2, int *r)\n+compute_correct_result (short *i1, short *i2, short *r)\n {\n-  short *s1 = (short *) i1;\n-  short *s2 = (short *) i2;\n-  short *sout = (short *) r;\n   int i;\n \n   for (i = 0; i < 4; i++)\n-    sout[i] = s1[2 * i] - s1[2 * i + 1];\n+    r[i] = i1[2 * i] - i1[2 * i + 1];\n   for (i = 0; i < 4; i++)\n-    sout[i + 4] = s2[2 * i] - s2[2 * i + 1];\n+    r[i + 4] = i2[2 * i] - i2[2 * i + 1];\n }\n \n static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 8)\n+  for (i = 0; i < ARRAY_SIZE (vals) - 1; i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+      compute_correct_result (&vals[i + 0].h[0], &vals[i + 1].h[0], &ck.h[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_phsubw (&vals[i + 0], &vals[i + 2], &r[0]);\n-      ssse3_test_phsubw (&vals[i + 4], &vals[i + 6], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_phsubw (&vals[i + 0].ll[0], &vals[i + 0].ll[1], &r.ll[0]);\n+      ssse3_test_phsubw (&vals[i + 1].ll[0], &vals[i + 1].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_phsubw128 (&vals[i + 0], &vals[i + 4], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_phsubw128 (&vals[i + 0].m[0], &vals[i + 1].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "46fbd0eca1bfa3a23bf2491e9e39651a3b5b8bf5", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-pmaddubsw.c", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pmaddubsw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pmaddubsw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pmaddubsw.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -19,23 +19,19 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_pmaddubsw (int *i1, int *i2, int *r)\n+ssse3_test_pmaddubsw (__m64 *i1, __m64 *i2, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  __m64 t2 = *(__m64 *) i2;\n-  *(__m64 *) r = _mm_maddubs_pi16 (t1, t2);\n+  *(__m64 *) r = _mm_maddubs_pi16 (*i1, *i2);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_pmaddubsw128 (int *i1, int *i2, int *r)\n+ssse3_test_pmaddubsw128 (__m128i *i1, __m128i *i2, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  __m128i t2 = *(__m128i *) i2;\n-  *(__m128i *) r = _mm_maddubs_epi16 (t1, t2);\n+  *r = _mm_maddubs_epi16 (*i1, *i2);\n }\n \n static short\n@@ -52,45 +48,42 @@ signed_saturate_to_word(int x)\n \n /* Routine to manually compute the results */\n static void\n-compute_correct_result (int *i1, int *i2, int *r)\n+compute_correct_result (unsigned char *i1, signed char *i2, short *r)\n {\n-  unsigned char *ub1 = (unsigned char *) i1;\n-  char *sb2 = (char *) i2;\n-  short *sout = (short *) r;\n   int t0;\n   int i;\n \n   for (i = 0; i < 8; i++)\n     { \n-      t0 = ((int) ub1[2 * i] * (int) sb2[2 * i] +\n-\t    (int) ub1[2 * i + 1] * (int) sb2[2 * i + 1]);\n-      sout[i] = signed_saturate_to_word (t0);\n+      t0 = ((int) i1[2 * i] * (int) i2[2 * i] +\n+\t    (int) i1[2 * i + 1] * (int) i2[2 * i + 1]);\n+      r[i] = signed_saturate_to_word (t0);\n     }\n }\n \n static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 8)\n+  for (i = 0; i < ARRAY_SIZE (vals) - 1; i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+      compute_correct_result (&vals[i + 0].ub[0], &vals[i + 1].b[0], &ck.h[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_pmaddubsw (&vals[i + 0], &vals[i + 4], &r[0]);\n-      ssse3_test_pmaddubsw (&vals[i + 2], &vals[i + 6], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_pmaddubsw (&vals[i + 0].ll[0], &vals[i + 1].ll[0], &r.ll[0]);\n+      ssse3_test_pmaddubsw (&vals[i + 0].ll[1], &vals[i + 1].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_pmaddubsw128 (&vals[i + 0], &vals[i + 4], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_pmaddubsw128 (&vals[i + 0].m[0], &vals[i + 1].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "ab7e840fe53cd2a071b18624b34b2c1e36872719", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-pmulhrsw.c", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pmulhrsw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pmulhrsw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pmulhrsw.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -19,65 +19,58 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_pmulhrsw (int *i1, int *i2, int *r)\n+ssse3_test_pmulhrsw (__m64 *i1, __m64 *i2, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  __m64 t2 = *(__m64 *) i2;\n-  *(__m64 *) r = _mm_mulhrs_pi16 (t1, t2);\n+  *r = _mm_mulhrs_pi16 (*i1, *i2);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_pmulhrsw128 (int *i1, int *i2, int *r)\n+ssse3_test_pmulhrsw128 (__m128i *i1, __m128i *i2, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  __m128i t2 = *(__m128i *) i2;\n-  *(__m128i *) r = _mm_mulhrs_epi16 (t1, t2);\n+  *r = _mm_mulhrs_epi16 (*i1, *i2);\n }\n \n /* Routine to manually compute the results */\n static void\n-compute_correct_result (int *i1, int *i2, int *r)\n+compute_correct_result (short *i1, short *i2, short *r)\n {\n-  short *s1 = (short *) i1;\n-  short *s2 = (short *) i2;\n-  short *sout = (short *) r;\n   int t0;\n   int i;\n \n   for (i = 0; i < 8; i++)\n     {\n-      t0 = (((int) s1[i] * (int) s2[i]) >> 14) + 1;\n-      sout[i] = (short) (t0 >> 1);\n+      t0 = (((int) i1[i] * (int) i2[i]) >> 14) + 1;\n+      r[i] = (short) (t0 >> 1);\n     }\n }\n \n static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 8)\n+  for (i = 0; i < ARRAY_SIZE (vals) - 1; i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+      compute_correct_result (&vals[i + 0].h[0], &vals[i + 1].h[0], &ck.h[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_pmulhrsw (&vals[i + 0], &vals[i + 4], &r[0]);\n-      ssse3_test_pmulhrsw (&vals[i + 2], &vals[i + 6], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_pmulhrsw (&vals[i + 0].ll[0], &vals[i + 1].ll[0], &r.ll[0]);\n+      ssse3_test_pmulhrsw (&vals[i + 0].ll[1], &vals[i + 1].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_pmulhrsw128 (&vals[i + 0], &vals[i + 4], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_pmulhrsw128 (&vals[i + 0].m[0], &vals[i + 1].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "404ca4d82c1411e9439f10679601b3f398ce9554", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-pshufb.c", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pshufb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pshufb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-pshufb.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -19,94 +19,84 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_pshufb (int *i1, int *i2, int *r)\n+ssse3_test_pshufb (__m64 *i1, __m64 *i2, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  __m64 t2 = *(__m64 *) i2;\n-  *(__m64 *)r = _mm_shuffle_pi8 (t1, t2);\n+  *r = _mm_shuffle_pi8 (*i1, *i2);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_pshufb128 (int *i1, int *i2, int *r)\n+ssse3_test_pshufb128 (__m128i *i1, __m128i *i2, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  __m128i t2 = *(__m128i *) i2;\n-  *(__m128i *)r = _mm_shuffle_epi8 (t1, t2);\n+  *r = _mm_shuffle_epi8 (*i1, *i2);\n }\n \n #ifndef __AVX__\n /* Routine to manually compute the results */\n static void\n-compute_correct_result_64 (int *i1, int *i2, int *r)\n+compute_correct_result_64 (signed char *i1, signed char *i2, signed char *r)\n {\n-  char *b1 = (char *) i1;\n-  char *b2 = (char *) i2;\n-  char *bout = (char *) r;\n   int i;\n   char select;\n \n   for (i = 0; i < 16; i++)\n     {\n-      select = b2[i];\n+      select = i2[i];\n       if (select & 0x80)\n-\tbout[i] = 0;\n+\tr[i] = 0;\n       else if (i < 8)\n-\tbout[i] = b1[select & 0x7];\n+\tr[i] = i1[select & 0x7];\n       else\n-\tbout[i] = b1[8 + (select & 0x7)];\n+\tr[i] = i1[8 + (select & 0x7)];\n     }\n }\n #endif\n \n static void\n-compute_correct_result_128 (int *i1, int *i2, int *r)\n+compute_correct_result_128 (signed char *i1, signed char *i2, signed char *r)\n {\n-  char *b1 = (char *) i1;\n-  char *b2 = (char *) i2;\n-  char *bout = (char *) r;\n   int i;\n   char select;\n \n   for (i = 0; i < 16; i++)\n     {\n-      select = b2[i];\n+      select = i2[i];\n       if (select & 0x80)\n-\tbout[i] = 0;\n+\tr[i] = 0;\n       else\n-\tbout[i] = b1[select & 0xf];\n+\tr[i] = i1[select & 0xf];\n     }\n }\n \n static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 8)\n+  for (i = 0; i < ARRAY_SIZE (vals) - 1; i++)\n     {\n #ifndef __AVX__\n       /* Manually compute the result */\n-      compute_correct_result_64 (&vals[i + 0], &vals[i + 4], ck);\n+      compute_correct_result_64 (&vals[i + 0].b[0], &vals[i + 1].b[0], &ck.b[0]);\n \n       /* Run the 64-bit tests */\n-      ssse3_test_pshufb (&vals[i + 0], &vals[i + 4], &r[0]);\n-      ssse3_test_pshufb (&vals[i + 2], &vals[i + 6], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_pshufb (&vals[i + 0].ll[0], &vals[i + 1].ll[0], &r.ll[0]);\n+      ssse3_test_pshufb (&vals[i + 0].ll[1], &vals[i + 1].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Recompute the result for 128-bits */\n-      compute_correct_result_128 (&vals[i + 0], &vals[i + 4], ck);\n+      compute_correct_result_128 (&vals[i + 0].b[0], &vals[i + 1].b[0], &ck.b[0]);\n \n       /* Run the 128-bit tests */\n-      ssse3_test_pshufb128 (&vals[i + 0], &vals[i + 4], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_pshufb128 (&vals[i + 0].m[0], &vals[i + 1].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "0ad08f04eb7be4ff9f99ba5ddc7ac452d4027292", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-psignb.c", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignb.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignb.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignb.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -18,66 +18,59 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_psignb (int *i1, int *i2, int *r)\n+ssse3_test_psignb (__m64 *i1, __m64 *i2, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  __m64 t2 = *(__m64 *) i2;\n-  *(__m64 *) r = _mm_sign_pi8 (t1, t2);\n+  *r = _mm_sign_pi8 (*i1, *i2);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_psignb128 (int *i1, int *i2, int *r)\n+ssse3_test_psignb128 (__m128i *i1, __m128i *i2, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  __m128i t2 = *(__m128i *) i2;\n-  *(__m128i *) r = _mm_sign_epi8 (t1, t2);\n+  *r = _mm_sign_epi8 (*i1, *i2);\n }\n \n /* Routine to manually compute the results */\n static void\n-compute_correct_result (int *i1, int *i2, int *r)\n+compute_correct_result (signed char *i1, signed char *i2, signed char *r)\n {\n-  char *b1 = (char *) i1;\n-  char *b2 = (char *) i2;\n-  char *bout = (char *) r;\n   int i;\n \n   for (i = 0; i < 16; i++)\n-    if (b2[i] < 0)\n-      bout[i] = -b1[i];\n-    else if (b2[i] == 0)\n-      bout[i] = 0;\n+    if (i2[i] < 0)\n+      r[i] = -i1[i];\n+    else if (i2[i] == 0)\n+      r[i] = 0;\n     else\n-      bout[i] = b1[i];\n+      r[i] = i1[i];\n }\n \n static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 8)\n+  for (i = 0; i < ARRAY_SIZE (vals) - 1; i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+      compute_correct_result (&vals[i + 0].b[0], &vals[i + 1].b[0], &ck.b[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_psignb (&vals[i + 0], &vals[i + 4], &r[0]);\n-      ssse3_test_psignb (&vals[i + 2], &vals[i + 6], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_psignb (&vals[i + 0].ll[0], &vals[i + 1].ll[0], &r.ll[0]);\n+      ssse3_test_psignb (&vals[i + 0].ll[1], &vals[i + 1].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_psignb128 (&vals[i + 0], &vals[i + 4], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_psignb128 (&vals[i + 0].m[0], &vals[i + 1].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "5258510cebb009e9100130779d6195d71f5f02d8", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-psignd.c", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignd.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignd.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignd.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -18,23 +18,19 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_psignd (int *i1, int *i2, int *r)\n+ssse3_test_psignd (__m64 *i1, __m64 *i2, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  __m64 t2 = *(__m64 *) i2;\n-  *(__m64 *) r = _mm_sign_pi32 (t1, t2);\n+  *r = _mm_sign_pi32 (*i1, *i2);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_psignd128 (int *i1, int *i2, int *r)\n+ssse3_test_psignd128 (__m128i *i1, __m128i *i2, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  __m128i t2 = *(__m128i *) i2;\n-  *(__m128i *)r = _mm_sign_epi32 (t1, t2);\n+  *r = _mm_sign_epi32 (*i1, *i2);\n }\n \n /* Routine to manually compute the results */\n@@ -56,25 +52,25 @@ static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 8)\n+  for (i = 0; i < ARRAY_SIZE (vals) - 1; i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+      compute_correct_result (&vals[i + 0].w[0], &vals[i + 1].w[0], &ck.w[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_psignd (&vals[i + 0], &vals[i + 4], &r[0]);\n-      ssse3_test_psignd (&vals[i + 2], &vals[i + 6], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_psignd (&vals[i + 0].ll[0], &vals[i + 1].ll[0], &r.ll[0]);\n+      ssse3_test_psignd (&vals[i + 0].ll[1], &vals[i + 1].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_psignd128 (&vals[i + 0], &vals[i + 4], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_psignd128 (&vals[i + 0].m[0], &vals[i + 1].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "b0f012225ae223aed2bfd1eeff8b3840049bb8c7", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-psignw.c", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-psignw.c?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -18,66 +18,59 @@\n #ifndef __AVX__\n /* Test the 64-bit form */\n static void\n-ssse3_test_psignw (int *i1, int *i2, int *r)\n+ssse3_test_psignw (__m64 *i1, __m64 *i2, __m64 *r)\n {\n-  __m64 t1 = *(__m64 *) i1;\n-  __m64 t2 = *(__m64 *) i2;\n-  *(__m64 *) r = _mm_sign_pi16 (t1, t2);\n+  *r = _mm_sign_pi16 (*i1, *i2);\n   _mm_empty ();\n }\n #endif\n \n /* Test the 128-bit form */\n static void\n-ssse3_test_psignw128 (int *i1, int *i2, int *r)\n+ssse3_test_psignw128 (__m128i *i1, __m128i *i2, __m128i *r)\n {\n   /* Assumes incoming pointers are 16-byte aligned */\n-  __m128i t1 = *(__m128i *) i1;\n-  __m128i t2 = *(__m128i *) i2;\n- *(__m128i *) r = _mm_sign_epi16 (t1, t2);\n+ *r = _mm_sign_epi16 (*i1, *i2);\n }\n \n /* Routine to manually compute the results */\n static void\n-compute_correct_result (int *i1, int *i2, int *r)\n+compute_correct_result (short *i1, short *i2, short *r)\n {\n-  short *s1 = (short *) i1;\n-  short *s2 = (short *) i2;\n-  short *sout = (short *) r;\n   int i;\n \n   for (i = 0; i < 8; i++)\n-    if (s2[i] < 0)\n-      sout[i] = -s1[i];\n-    else if (s2[i] == 0)\n-      sout[i] = 0;\n+    if (i2[i] < 0)\n+      r[i] = -i1[i];\n+    else if (i2[i] == 0)\n+      r[i] = 0;\n     else\n-      sout[i] = s1[i];\n+      r[i] = i1[i];\n }\n \n static void\n TEST (void)\n {\n   int i;\n-  int r [4] __attribute__ ((aligned(16)));\n-  int ck [4];\n+  union data r __attribute__ ((aligned(16)));\n+  union data ck;\n   int fail = 0;\n \n-  for (i = 0; i < 256; i += 8)\n+  for (i = 0; i < ARRAY_SIZE (vals) - 1; i++)\n     {\n       /* Manually compute the result */\n-      compute_correct_result (&vals[i + 0], &vals[i + 4], ck);\n+      compute_correct_result (&vals[i + 0].h[0], &vals[i + 1].h[0], &ck.h[0]);\n \n #ifndef __AVX__\n       /* Run the 64-bit tests */\n-      ssse3_test_psignw (&vals[i + 0], &vals[i + 4], &r[0]);\n-      ssse3_test_psignw (&vals[i + 2], &vals[i + 6], &r[2]);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_psignw (&vals[i + 0].ll[0], &vals[i + 1].ll[0], &r.ll[0]);\n+      ssse3_test_psignw (&vals[i + 0].ll[1], &vals[i + 1].ll[1], &r.ll[1]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n #endif\n \n       /* Run the 128-bit tests */\n-      ssse3_test_psignw128 (&vals[i + 0], &vals[i + 4], r);\n-      fail += chk_128 (ck, r);\n+      ssse3_test_psignw128 (&vals[i + 0].m[0], &vals[i + 1].m[0], &r.m[0]);\n+      fail += chk_128 (ck.m[0], r.m[0]);\n     }\n \n   if (fail != 0)"}, {"sha": "54674fba0c165724e6f57be311c0284e5c2a4443", "filename": "gcc/testsuite/gcc.target/powerpc/ssse3-vals.h", "status": "modified", "additions": 76, "deletions": 53, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-vals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a0317e70007d6558e53a2ba5b104ff09b2e9642/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-vals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fssse3-vals.h?ref=9a0317e70007d6558e53a2ba5b104ff09b2e9642", "patch": "@@ -1,60 +1,83 @@\n+#include <tmmintrin.h>\n+\n /* Routine to check correctness of the results */\n static int\n-chk_128 (int *v1, int *v2)\n+chk_128 (__m128i v1, __m128i v2)\n {\n-  int i;\n-  int n_fails = 0;\n-\n-  for (i = 0; i < 4; i++)\n-    if (v1[i] != v2[i])\n-      n_fails += 1;\n-\n-  return n_fails;\n+  return (v1[0] != v2[0]) || (v1[1] != v2[1]);\n }\n \n-static int vals [256] __attribute__ ((aligned(16))) =\n+static union data {\n+  int w[4];\n+  signed char b[16];\n+  unsigned char ub[16];\n+  short h[8];\n+  unsigned long long ll[2];\n+  __m128i m[1];\n+} vals[] __attribute__ ((aligned(16))) =\n {\n-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x5be800ee, 0x4f2d7b15,\n-  0x409d9291, 0xdd95f27f, 0x423986e3, 0x21a4d2cd, 0xa7056d84, 0x4f4e5a3b,\n-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n-  0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,\n-  0x73ef0244, 0xcd836329, 0x847f634f, 0xa7e3abcf, 0xb4c14764, 0x1ef42c06,\n-  0x504f29ac, 0x4ae7ca73, 0xaddde3c9, 0xf63ded2e, 0xa5d3553d, 0xa52ae05f,\n-  0x6fd3c83a, 0x7dc2b300, 0x76b05de7, 0xea8ebae5, 0x549568dd, 0x172f0358,\n-  0x917eadf0, 0x796fb0a7, 0xb39381af, 0xd0591d61, 0x731d2f17, 0xbc4b6f5d,\n-  0x8ec664c2, 0x3c199c19, 0x9c81db12, 0x6d85913b, 0x486107a9, 0xab6f4b26,\n-  0x5630d37c, 0x20836e85, 0x40d4e746, 0xdfbaba36, 0xbeacaa69, 0xb3c84083,\n-  0x8a688eb4, 0x08cde481, 0x66e7a190, 0x74ee1639, 0xb3942a19, 0xe0c40471,\n-  0x9b789489, 0x9751207a, 0x543a1524, 0x41da7ad6, 0x614bb563, 0xf86f57b1,\n-  0x69e62199, 0x2150cb12, 0x9ed74062, 0x429471f4, 0xad28502b, 0xf2e2d4d5,\n-  0x45b6ce09, 0xaaa5e649, 0xb46da484, 0x0a637515, 0xae7a3212, 0x5afc784c,\n-  0x776cfbbe, 0x9c542bb2, 0x64193aa8, 0x16e8a655, 0x4e3d2f92, 0xe05d7b72,\n-  0x89854ebc, 0x8c318814, 0xb81e76e0, 0x3f2625f5, 0x61b44852, 0x5209d7ad,\n-  0x842fe317, 0xd3cfcca1, 0x8d287cc7, 0x80f0c9a8, 0x4215f4e5, 0x563993d6,\n-  0x5d627433, 0xc4449e35, 0x5b4fe009, 0x3ef92286, 0xacbc8927, 0x549ab870,\n-  0x9ac5b959, 0xed8f1c91, 0x7ecf02cd, 0x989c0e8b, 0xa31d6918, 0x1dc2bcc1,\n-  0x99d3f3cc, 0x6857acc8, 0x45d7324a, 0xaebdf2e6, 0x7af2f2ae, 0x09716f73,\n-  0x7816e694, 0xc65493c0, 0x9f7e87bc, 0xaa96cd40, 0xbfb5bfc6, 0x01a2cce7,\n-  0x5f1d8c46, 0x45303efb, 0xb24607c3, 0xef2009a7, 0xba873753, 0xbefb14bc,\n-  0x74e53cd3, 0x70124708, 0x6eb4bdbd, 0xf3ba5e43, 0x4c94085f, 0x0c03e7e0,\n-  0x9a084931, 0x62735424, 0xaeee77c5, 0xdb34f90f, 0x6860cbdd, 0xaf77cf9f,\n-  0x95b28158, 0x23bd70d7, 0x9fbc3d88, 0x742e659e, 0x53bcfb48, 0xb8a63f6c,\n-  0x4dcf3373, 0x2b168627, 0x4fe20745, 0xd0af5e94, 0x22514e6a, 0xb8ef25c2,\n-  0x89ec781a, 0x13d9002b, 0x6d724500, 0x7fdbf63f, 0xb0e9ced5, 0xf919e0f3,\n-  0x00fef203, 0x8905d47a, 0x434e7517, 0x4aef8e2c, 0x689f51e8, 0xe513b7c3,\n-  0x72bbc5d2, 0x3a222f74, 0x05c3a0f9, 0xd5489d82, 0xb41fbe83, 0xec5d305f,\n-  0x5ea02b0b, 0xb176065b, 0xa8eb404e, 0x80349117, 0x210fd49e, 0x43898d0e,\n-  0x6c151b9c, 0x8742df18, 0x7b64de73, 0x1dbf52b2, 0x55c9cb19, 0xeb841f10,\n-  0x10b8ae76, 0x0764ecb6, 0xb7479018, 0x2672cb3f, 0x7ac9ac90, 0x4be5332c,\n-  0x8f1a0615, 0x4efb7a77, 0x16551a85, 0xdb2c3d66, 0x49179c07, 0x5dc4657e,\n-  0x5e76907e, 0xd7486a9c, 0x445204a4, 0x65cdc426, 0x33f86ded, 0xcba95dda,\n-  0x83351f16, 0xfedefad9, 0x639b620f, 0x86896a64, 0xba4099ba, 0x965f4a21,\n-  0x1247154f, 0x25604c42, 0x5862d692, 0xb1e9149e, 0x612516a5, 0x02c49bf8,\n-  0x631212bf, 0x9f69f54e, 0x168b63b0, 0x310a25ba, 0xa42a59cd, 0x084f0af9,\n-  0x44a06cec, 0x5c0cda40, 0xb932d721, 0x7c42bb0d, 0x213cd3f0, 0xedc7f5a4,\n-  0x7fb85859, 0x6b3da5ea, 0x61cd591e, 0xe8e9aa08, 0x4361fc34, 0x53d40d2a,\n-  0x0511ad1b, 0xf996b44c, 0xb5ead756, 0xc022138d, 0x6172adf1, 0xa4a0a3b4,\n-  0x8c2977b8, 0xa8e482ed, 0x04fcdd6b, 0x3f7b85d4, 0x4fca1e46, 0xa392ddca,\n-  0x569fc791, 0x346a706c, 0x543bf3eb, 0x895b3cde, 0x2146bb80, 0x26b3c168,\n-  0x929998db, 0x1ea472c9, 0x7207b36b, 0x6a8f10d4 \n+  { { 0x00000000, 0x00000000, 0x00000000, 0x00000000 } },\n+  { { 0x5be800ee, 0x4f2d7b15, 0x409d9291, 0xdd95f27f } },\n+  { { 0x423986e3, 0x21a4d2cd, 0xa7056d84, 0x4f4e5a3b } },\n+  { { 0x00000000, 0x00000000, 0x00000000, 0x00000000 } },\n+  { { 0x00000000, 0x00000000, 0x00000000, 0x00000000 } },\n+  { { 0x00000000, 0x00000000, 0x00000000, 0x00000000 } },\n+  { { 0x73ef0244, 0xcd836329, 0x847f634f, 0xa7e3abcf } },\n+  { { 0xb4c14764, 0x1ef42c06, 0x504f29ac, 0x4ae7ca73 } },\n+  { { 0xaddde3c9, 0xf63ded2e, 0xa5d3553d, 0xa52ae05f } },\n+  { { 0x6fd3c83a, 0x7dc2b300, 0x76b05de7, 0xea8ebae5 } },\n+  { { 0x549568dd, 0x172f0358, 0x917eadf0, 0x796fb0a7 } },\n+  { { 0xb39381af, 0xd0591d61, 0x731d2f17, 0xbc4b6f5d } },\n+  { { 0x8ec664c2, 0x3c199c19, 0x9c81db12, 0x6d85913b } },\n+  { { 0x486107a9, 0xab6f4b26, 0x5630d37c, 0x20836e85 } },\n+  { { 0x40d4e746, 0xdfbaba36, 0xbeacaa69, 0xb3c84083 } },\n+  { { 0x8a688eb4, 0x08cde481, 0x66e7a190, 0x74ee1639 } },\n+  { { 0xb3942a19, 0xe0c40471, 0x9b789489, 0x9751207a } },\n+  { { 0x543a1524, 0x41da7ad6, 0x614bb563, 0xf86f57b1 } },\n+  { { 0x69e62199, 0x2150cb12, 0x9ed74062, 0x429471f4 } },\n+  { { 0xad28502b, 0xf2e2d4d5, 0x45b6ce09, 0xaaa5e649 } },\n+  { { 0xb46da484, 0x0a637515, 0xae7a3212, 0x5afc784c } },\n+  { { 0x776cfbbe, 0x9c542bb2, 0x64193aa8, 0x16e8a655 } },\n+  { { 0x4e3d2f92, 0xe05d7b72, 0x89854ebc, 0x8c318814 } },\n+  { { 0xb81e76e0, 0x3f2625f5, 0x61b44852, 0x5209d7ad } },\n+  { { 0x842fe317, 0xd3cfcca1, 0x8d287cc7, 0x80f0c9a8 } },\n+  { { 0x4215f4e5, 0x563993d6, 0x5d627433, 0xc4449e35 } },\n+  { { 0x5b4fe009, 0x3ef92286, 0xacbc8927, 0x549ab870 } },\n+  { { 0x9ac5b959, 0xed8f1c91, 0x7ecf02cd, 0x989c0e8b } },\n+  { { 0xa31d6918, 0x1dc2bcc1, 0x99d3f3cc, 0x6857acc8 } },\n+  { { 0x45d7324a, 0xaebdf2e6, 0x7af2f2ae, 0x09716f73 } },\n+  { { 0x7816e694, 0xc65493c0, 0x9f7e87bc, 0xaa96cd40 } },\n+  { { 0xbfb5bfc6, 0x01a2cce7, 0x5f1d8c46, 0x45303efb } },\n+  { { 0xb24607c3, 0xef2009a7, 0xba873753, 0xbefb14bc } },\n+  { { 0x74e53cd3, 0x70124708, 0x6eb4bdbd, 0xf3ba5e43 } },\n+  { { 0x4c94085f, 0x0c03e7e0, 0x9a084931, 0x62735424 } },\n+  { { 0xaeee77c5, 0xdb34f90f, 0x6860cbdd, 0xaf77cf9f } },\n+  { { 0x95b28158, 0x23bd70d7, 0x9fbc3d88, 0x742e659e } },\n+  { { 0x53bcfb48, 0xb8a63f6c, 0x4dcf3373, 0x2b168627 } },\n+  { { 0x4fe20745, 0xd0af5e94, 0x22514e6a, 0xb8ef25c2 } },\n+  { { 0x89ec781a, 0x13d9002b, 0x6d724500, 0x7fdbf63f } },\n+  { { 0xb0e9ced5, 0xf919e0f3, 0x00fef203, 0x8905d47a } },\n+  { { 0x434e7517, 0x4aef8e2c, 0x689f51e8, 0xe513b7c3 } },\n+  { { 0x72bbc5d2, 0x3a222f74, 0x05c3a0f9, 0xd5489d82 } },\n+  { { 0xb41fbe83, 0xec5d305f, 0x5ea02b0b, 0xb176065b } },\n+  { { 0xa8eb404e, 0x80349117, 0x210fd49e, 0x43898d0e } },\n+  { { 0x6c151b9c, 0x8742df18, 0x7b64de73, 0x1dbf52b2 } },\n+  { { 0x55c9cb19, 0xeb841f10, 0x10b8ae76, 0x0764ecb6 } },\n+  { { 0xb7479018, 0x2672cb3f, 0x7ac9ac90, 0x4be5332c } },\n+  { { 0x8f1a0615, 0x4efb7a77, 0x16551a85, 0xdb2c3d66 } },\n+  { { 0x49179c07, 0x5dc4657e, 0x5e76907e, 0xd7486a9c } },\n+  { { 0x445204a4, 0x65cdc426, 0x33f86ded, 0xcba95dda } },\n+  { { 0x83351f16, 0xfedefad9, 0x639b620f, 0x86896a64 } },\n+  { { 0xba4099ba, 0x965f4a21, 0x1247154f, 0x25604c42 } },\n+  { { 0x5862d692, 0xb1e9149e, 0x612516a5, 0x02c49bf8 } },\n+  { { 0x631212bf, 0x9f69f54e, 0x168b63b0, 0x310a25ba } },\n+  { { 0xa42a59cd, 0x084f0af9, 0x44a06cec, 0x5c0cda40 } },\n+  { { 0xb932d721, 0x7c42bb0d, 0x213cd3f0, 0xedc7f5a4 } },\n+  { { 0x7fb85859, 0x6b3da5ea, 0x61cd591e, 0xe8e9aa08 } },\n+  { { 0x4361fc34, 0x53d40d2a, 0x0511ad1b, 0xf996b44c } },\n+  { { 0xb5ead756, 0xc022138d, 0x6172adf1, 0xa4a0a3b4 } },\n+  { { 0x8c2977b8, 0xa8e482ed, 0x04fcdd6b, 0x3f7b85d4 } },\n+  { { 0x4fca1e46, 0xa392ddca, 0x569fc791, 0x346a706c } },\n+  { { 0x543bf3eb, 0x895b3cde, 0x2146bb80, 0x26b3c168 } },\n+  { { 0x929998db, 0x1ea472c9, 0x7207b36b, 0x6a8f10d4 } } \n };"}]}