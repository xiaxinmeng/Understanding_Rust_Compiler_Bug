{"sha": "c1bbe5b3945c30510c7512869c6006285c71de34", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzFiYmU1YjM5NDVjMzA1MTBjNzUxMjg2OWM2MDA2Mjg1YzcxZGUzNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2018-03-27T13:23:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2018-03-27T13:23:15Z"}, "message": "re PR middle-end/84067 (gcc.dg/wmul-1.c regression on aarch64 after r257077)\n\n2018-03-27  Richard Biener  <rguenther@suse.de>\n\n\tPR middle-ed/84067\n\t* match.pd ((A * C) +- (B * C) -> (A+-B) * C): Guard with\n\texplicit single_use checks.\n\nFrom-SVN: r258881", "tree": {"sha": "696739f0dc7f0b72728742cb02fda4683d464dda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/696739f0dc7f0b72728742cb02fda4683d464dda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c1bbe5b3945c30510c7512869c6006285c71de34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1bbe5b3945c30510c7512869c6006285c71de34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c1bbe5b3945c30510c7512869c6006285c71de34", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c1bbe5b3945c30510c7512869c6006285c71de34/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "18f5009ec8e87ada5228ff03f18264e93268e00f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/18f5009ec8e87ada5228ff03f18264e93268e00f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/18f5009ec8e87ada5228ff03f18264e93268e00f"}], "stats": {"total": 47, "additions": 29, "deletions": 18}, "files": [{"sha": "b670c5da8bedb335a141835771bcf9269e1122d5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1bbe5b3945c30510c7512869c6006285c71de34/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1bbe5b3945c30510c7512869c6006285c71de34/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c1bbe5b3945c30510c7512869c6006285c71de34", "patch": "@@ -1,3 +1,9 @@\n+2018-03-27  Richard Biener  <rguenther@suse.de>\n+\n+\tPR middle-ed/84067\n+\t* match.pd ((A * C) +- (B * C) -> (A+-B) * C): Guard with\n+\texplicit single_use checks.\n+\n 2018-03-27  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/85082"}, {"sha": "3e1636c41a45104c42ef153dd9db8a5426b0806f", "filename": "gcc/match.pd", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c1bbe5b3945c30510c7512869c6006285c71de34/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c1bbe5b3945c30510c7512869c6006285c71de34/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=c1bbe5b3945c30510c7512869c6006285c71de34", "patch": "@@ -1948,30 +1948,35 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n      && (!FLOAT_TYPE_P (type) || flag_associative_math))\n  (for plusminus (plus minus)\n   (simplify\n-   (plusminus (mult:cs @0 @1) (mult:cs @0 @2))\n-   (if (!ANY_INTEGRAL_TYPE_P (type)\n-        || TYPE_OVERFLOW_WRAPS (type)\n-        || (INTEGRAL_TYPE_P (type)\n-\t    && tree_expr_nonzero_p (@0)\n-\t    && expr_not_equal_to (@0, wi::minus_one (TYPE_PRECISION (type)))))\n-    (mult (plusminus @1 @2) @0)))\n-  /* We cannot generate constant 1 for fract.  */\n-  (if (!ALL_FRACT_MODE_P (TYPE_MODE (type)))\n-   (simplify\n-    (plusminus @0 (mult:cs @0 @2))\n-    (if (!ANY_INTEGRAL_TYPE_P (type)\n+   (plusminus (mult:cs@3 @0 @1) (mult:cs@4 @0 @2))\n+   (if ((!ANY_INTEGRAL_TYPE_P (type)\n \t || TYPE_OVERFLOW_WRAPS (type)\n \t || (INTEGRAL_TYPE_P (type)\n \t     && tree_expr_nonzero_p (@0)\n \t     && expr_not_equal_to (@0, wi::minus_one (TYPE_PRECISION (type)))))\n+\t/* If @1 +- @2 is constant require a hard single-use on either\n+\t   original operand (but not on both).  */\n+\t&& (single_use (@3) || single_use (@4)))\n+    (mult (plusminus @1 @2) @0)))\n+  /* We cannot generate constant 1 for fract.  */\n+  (if (!ALL_FRACT_MODE_P (TYPE_MODE (type)))\n+   (simplify\n+    (plusminus @0 (mult:c@3 @0 @2))\n+    (if ((!ANY_INTEGRAL_TYPE_P (type)\n+\t  || TYPE_OVERFLOW_WRAPS (type)\n+\t  || (INTEGRAL_TYPE_P (type)\n+\t      && tree_expr_nonzero_p (@0)\n+\t      && expr_not_equal_to (@0, wi::minus_one (TYPE_PRECISION (type)))))\n+\t && single_use (@3))\n      (mult (plusminus { build_one_cst (type); } @2) @0)))\n    (simplify\n-    (plusminus (mult:cs @0 @2) @0)\n-    (if (!ANY_INTEGRAL_TYPE_P (type)\n-\t || TYPE_OVERFLOW_WRAPS (type)\n-\t || (INTEGRAL_TYPE_P (type)\n-\t     && tree_expr_nonzero_p (@0)\n-\t     && expr_not_equal_to (@0, wi::minus_one (TYPE_PRECISION (type)))))\n+    (plusminus (mult:c@3 @0 @2) @0)\n+    (if ((!ANY_INTEGRAL_TYPE_P (type)\n+\t  || TYPE_OVERFLOW_WRAPS (type)\n+\t  || (INTEGRAL_TYPE_P (type)\n+\t      && tree_expr_nonzero_p (@0)\n+\t      && expr_not_equal_to (@0, wi::minus_one (TYPE_PRECISION (type)))))\n+\t && single_use (@3))\n      (mult (plusminus @2 { build_one_cst (type); }) @0))))))\n \n /* Simplifications of MIN_EXPR, MAX_EXPR, fmin() and fmax().  */"}]}