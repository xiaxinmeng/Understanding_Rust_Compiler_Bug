{"sha": "438ff97c274020cf44c92a47593ebceffa6c06cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDM4ZmY5N2MyNzQwMjBjZjQ0YzkyYTQ3NTkzZWJjZWZmYTZjMDZjZg==", "commit": {"author": {"name": "Ed Schonberg", "email": "schonberg@adacore.com", "date": "2010-06-14T08:14:10Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2010-06-14T08:14:10Z"}, "message": "sem_ch4.adb (Complete_Object_Operation): After analyzing the rewritten call...\n\n2010-06-14  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_ch4.adb (Complete_Object_Operation): After analyzing the\n\trewritten call, preserve the resulting type to prevent spurious errors,\n\twhen the call is implicitly dereferenced in the context of an in-out\n\tactual.\n\n\t* checks.adb (Apply_Discriminant_Check): If the target of the\n\tassignment is a renaming of a heap object, create constrained type for\n\tit to apply check.\n\nFrom-SVN: r160709", "tree": {"sha": "f17524d1633d55b13a0f7439b81e0e068aa18d48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f17524d1633d55b13a0f7439b81e0e068aa18d48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/438ff97c274020cf44c92a47593ebceffa6c06cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438ff97c274020cf44c92a47593ebceffa6c06cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/438ff97c274020cf44c92a47593ebceffa6c06cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/438ff97c274020cf44c92a47593ebceffa6c06cf/comments", "author": {"login": "Edschonberg", "id": 6352375, "node_id": "MDQ6VXNlcjYzNTIzNzU=", "avatar_url": "https://avatars.githubusercontent.com/u/6352375?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Edschonberg", "html_url": "https://github.com/Edschonberg", "followers_url": "https://api.github.com/users/Edschonberg/followers", "following_url": "https://api.github.com/users/Edschonberg/following{/other_user}", "gists_url": "https://api.github.com/users/Edschonberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/Edschonberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Edschonberg/subscriptions", "organizations_url": "https://api.github.com/users/Edschonberg/orgs", "repos_url": "https://api.github.com/users/Edschonberg/repos", "events_url": "https://api.github.com/users/Edschonberg/events{/privacy}", "received_events_url": "https://api.github.com/users/Edschonberg/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "71158d7e6d3ce21ac0ef3b96a516073870178631", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71158d7e6d3ce21ac0ef3b96a516073870178631", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71158d7e6d3ce21ac0ef3b96a516073870178631"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "b7660b50808008cca2a91d106f4bc00fda8afa1f", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438ff97c274020cf44c92a47593ebceffa6c06cf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438ff97c274020cf44c92a47593ebceffa6c06cf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=438ff97c274020cf44c92a47593ebceffa6c06cf", "patch": "@@ -1,3 +1,14 @@\n+2010-06-14  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_ch4.adb (Complete_Object_Operation): After analyzing the\n+\trewritten call, preserve the resulting type to prevent spurious errors,\n+\twhen the call is implicitly dereferenced in the context of an in-out\n+\tactual.\n+\n+\t* checks.adb (Apply_Discriminant_Check): If the target of the\n+\tassignment is a renaming of a heap object, create constrained type for\n+\tit to apply check.\n+\n 2010-06-14  Pascal Obry  <obry@adacore.com>\n \n \t* prj-proc.adb: Fix copy of object directory for extending projects."}, {"sha": "29689d166376e8275dc69020cd357bcc8007cdee", "filename": "gcc/ada/checks.adb", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438ff97c274020cf44c92a47593ebceffa6c06cf/gcc%2Fada%2Fchecks.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438ff97c274020cf44c92a47593ebceffa6c06cf/gcc%2Fada%2Fchecks.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fchecks.adb?ref=438ff97c274020cf44c92a47593ebceffa6c06cf", "patch": "@@ -1084,13 +1084,33 @@ package body Checks is\n       Cond      : Node_Id;\n       T_Typ     : Entity_Id;\n \n+      function Denotes_Explicit_Dereference (Obj : Node_Id) return Boolean;\n+      --  A heap object with an indefinite subtype is constrained by its\n+      --  initial value, and assigning to it requires a constraint_check.\n+      --  The target may be an explicit dereference, or a renaming of one.\n+\n       function Is_Aliased_Unconstrained_Component return Boolean;\n       --  It is possible for an aliased component to have a nominal\n       --  unconstrained subtype (through instantiation). If this is a\n       --  discriminated component assigned in the expansion of an aggregate\n       --  in an initialization, the check must be suppressed. This unusual\n       --  situation requires a predicate of its own.\n \n+      ----------------------------------\n+      -- Denotes_Explicit_Dereference --\n+      ----------------------------------\n+\n+      function Denotes_Explicit_Dereference (Obj : Node_Id) return Boolean is\n+      begin\n+         return\n+           Nkind (Obj) = N_Explicit_Dereference\n+             or else\n+               (Is_Entity_Name (Obj)\n+                 and then Present (Renamed_Object (Entity (Obj)))\n+                and then Nkind (Renamed_Object (Entity (Obj)))\n+                  = N_Explicit_Dereference);\n+      end Denotes_Explicit_Dereference;\n+\n       ----------------------------------------\n       -- Is_Aliased_Unconstrained_Component --\n       ----------------------------------------\n@@ -1164,7 +1184,7 @@ package body Checks is\n       --  Ada 2005 (AI-363): For Ada 2005, we limit the building of the actual\n       --  subtype to the parameter and dereference cases, since other aliased\n       --  objects are unconstrained (unless the nominal subtype is explicitly\n-      --  constrained). (But we also need to test for renamings???)\n+      --  constrained).\n \n       if Present (Lhs)\n         and then (Present (Param_Entity (Lhs))\n@@ -1174,7 +1194,7 @@ package body Checks is\n                              and then not Is_Aliased_Unconstrained_Component)\n                    or else (Ada_Version >= Ada_05\n                              and then not Is_Constrained (T_Typ)\n-                             and then Nkind (Lhs) = N_Explicit_Dereference\n+                             and then Denotes_Explicit_Dereference (Lhs)\n                              and then Nkind (Original_Node (Lhs)) /=\n                                         N_Function_Call))\n       then"}, {"sha": "c29b783f5eaabb877dbddcde9fdc22bdfce7dfbd", "filename": "gcc/ada/sem_ch4.adb", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/438ff97c274020cf44c92a47593ebceffa6c06cf/gcc%2Fada%2Fsem_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/438ff97c274020cf44c92a47593ebceffa6c06cf/gcc%2Fada%2Fsem_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch4.adb?ref=438ff97c274020cf44c92a47593ebceffa6c06cf", "patch": "@@ -6182,6 +6182,17 @@ package body Sem_Ch4 is\n             Save_Interps (Subprog, Node_To_Replace);\n          else\n             Analyze (Node_To_Replace);\n+\n+            --  If the operation has been rewritten into a call, which may\n+            --  get subsequently an explicit dereference, preserve the\n+            --  type on the original node (selected component or indexed\n+            --  component) for subsequent legality tests, e.g. Is_Variable.\n+            --  which examines the original node.\n+\n+            if Nkind (Node_To_Replace) = N_Function_Call then\n+               Set_Etype\n+                 (Original_Node (Node_To_Replace), Etype (Node_To_Replace));\n+            end if;\n          end if;\n       end Complete_Object_Operation;\n "}]}