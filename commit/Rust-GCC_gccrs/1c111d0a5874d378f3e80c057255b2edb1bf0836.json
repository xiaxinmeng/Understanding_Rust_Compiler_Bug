{"sha": "1c111d0a5874d378f3e80c057255b2edb1bf0836", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWMxMTFkMGE1ODc0ZDM3OGYzZTgwYzA1NzI1NWIyZWRiMWJmMDgzNg==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2010-08-17T15:49:32Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2010-08-17T15:49:32Z"}, "message": "Try to avoid lea if possible.\n\n2010-08-17  H.J. Lu  <hongjiu.lu@intel.com>\n\n\t* config/i386/i386.c (ix86_lea_for_add_ok): For !TARGET_OPT_AGU\n\tor optimizing for size, always avoid lea if possible.\n\n\t* config/i386/i386.md (*add<mode>_1): Always avoid lea if\n\tpossible.\n\nFrom-SVN: r163310", "tree": {"sha": "2dd7ee12e470dc49dda87653d8123bb331b108a4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2dd7ee12e470dc49dda87653d8123bb331b108a4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1c111d0a5874d378f3e80c057255b2edb1bf0836", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c111d0a5874d378f3e80c057255b2edb1bf0836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c111d0a5874d378f3e80c057255b2edb1bf0836", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c111d0a5874d378f3e80c057255b2edb1bf0836/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e2a1fcf0add4aaa44ac743278eacf623d9f39f62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2a1fcf0add4aaa44ac743278eacf623d9f39f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2a1fcf0add4aaa44ac743278eacf623d9f39f62"}], "stats": {"total": 37, "additions": 21, "deletions": 16}, "files": [{"sha": "47aa331abdd8a846513e8b38a7eaadf4b048b5a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c111d0a5874d378f3e80c057255b2edb1bf0836/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c111d0a5874d378f3e80c057255b2edb1bf0836/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1c111d0a5874d378f3e80c057255b2edb1bf0836", "patch": "@@ -1,3 +1,11 @@\n+2010-08-17  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.c (ix86_lea_for_add_ok): For !TARGET_OPT_AGU\n+\tor optimizing for size, always avoid lea if possible.\n+\n+\t* config/i386/i386.md (*add<mode>_1): Always avoid lea if\n+\tpossible.\n+\n 2010-08-17  Iain Sandoe  <iains@gcc.gnu.org>\n \n \t* unwind-dw2-fde-darwin.c (_darwin10_Unwind_FindEnclosingFunction):"}, {"sha": "f1d4402b83d8209a3a9721a7d83a3fdbda8a5c57", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c111d0a5874d378f3e80c057255b2edb1bf0836/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c111d0a5874d378f3e80c057255b2edb1bf0836/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1c111d0a5874d378f3e80c057255b2edb1bf0836", "patch": "@@ -14802,27 +14802,25 @@ distance_agu_use (unsigned int regno0, rtx insn)\n #define IX86_LEA_PRIORITY 2\n \n /* Return true if it is ok to optimize an ADD operation to LEA\n-   operation to avoid flag register consumation.  For the processors\n-   like ATOM, if the destination register of LEA holds an actual\n-   address which will be used soon, LEA is better and otherwise ADD\n-   is better.  */\n+   operation to avoid flag register consumation.  For most processors,\n+   ADD is faster than LEA.  For the processors like ATOM, if the\n+   destination register of LEA holds an actual address which will be\n+   used soon, LEA is better and otherwise ADD is better.  */\n \n bool\n ix86_lea_for_add_ok (enum rtx_code code ATTRIBUTE_UNUSED,\n                      rtx insn, rtx operands[])\n {\n   unsigned int regno0 = true_regnum (operands[0]);\n   unsigned int regno1 = true_regnum (operands[1]);\n-  unsigned int regno2;\n-\n-  if (!TARGET_OPT_AGU || optimize_function_for_size_p (cfun))\n-    return regno0 != regno1;\n-\n-  regno2 = true_regnum (operands[2]);\n+  unsigned int regno2 = true_regnum (operands[2]);\n \n   /* If a = b + c, (a!=b && a!=c), must use lea form. */\n   if (regno0 != regno1 && regno0 != regno2)\n     return true;\n+\n+  if (!TARGET_OPT_AGU || optimize_function_for_size_p (cfun))\n+    return false;\n   else\n     {\n       int dist_define, dist_use;"}, {"sha": "f6ab0e2f35d0eabbe2e75780184a8cf871d9d051", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1c111d0a5874d378f3e80c057255b2edb1bf0836/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1c111d0a5874d378f3e80c057255b2edb1bf0836/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1c111d0a5874d378f3e80c057255b2edb1bf0836", "patch": "@@ -5813,8 +5813,10 @@\n \t}\n \n     default:\n-      /* Use add as much as possible to replace lea for AGU optimization. */\n-      if (which_alternative == 2 && TARGET_OPT_AGU)\n+      /* This alternative was added for TARGET_OPT_AGU to use add as\n+\t much as possible.  But add is also faster than lea for\n+\t !TARGET_OPT_AGU.  */\n+      if (which_alternative == 2)\n         return \"add{<imodesuffix>}\\t{%1, %0|%0, %1}\";\n         \n       gcc_assert (rtx_equal_p (operands[0], operands[1]));\n@@ -5825,10 +5827,7 @@\n     }\n }\n   [(set (attr \"type\")\n-     (cond [(and (eq_attr \"alternative\" \"2\") \n-                 (eq (symbol_ref \"TARGET_OPT_AGU\") (const_int 0)))\n-\t      (const_string \"lea\")\n-            (eq_attr \"alternative\" \"3\")\n+     (cond [(eq_attr \"alternative\" \"3\")\n               (const_string \"lea\")\n \t    (match_operand:SWI48 2 \"incdec_operand\" \"\")\n \t      (const_string \"incdec\")"}]}