{"sha": "703c9ccdc69438c8d1931c777116ce76d22415de", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzAzYzljY2RjNjk0MzhjOGQxOTMxYzc3NzExNmNlNzZkMjI0MTVkZQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2015-02-10T13:37:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2015-02-10T13:37:54Z"}, "message": "re PR tree-optimization/64995 (ICE in vn_reference_insert_pieces, at tree-ssa-sccvn.c:2341)\n\n2015-02-10  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/64995\n\t* tree-ssa-sccvn.c (set_ssa_val_to): Assert that the\n\tvalue we use is final.\n\t(visit_reference_op_store): Always valueize op.\n\t(visit_use): Properly valueize vuses.\n\n\t* g++.dg/torture/pr64995.C: New testcase.\n\nFrom-SVN: r220581", "tree": {"sha": "c92bf0ac60a485f33803b2ee862e103fe4440a76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c92bf0ac60a485f33803b2ee862e103fe4440a76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/703c9ccdc69438c8d1931c777116ce76d22415de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703c9ccdc69438c8d1931c777116ce76d22415de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/703c9ccdc69438c8d1931c777116ce76d22415de", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/703c9ccdc69438c8d1931c777116ce76d22415de/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "696814edb80cfae8840213cf3e3100d0265944bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/696814edb80cfae8840213cf3e3100d0265944bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/696814edb80cfae8840213cf3e3100d0265944bd"}], "stats": {"total": 55, "additions": 49, "deletions": 6}, "files": [{"sha": "788571c0715105df95faed5c059a7353f716becc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703c9ccdc69438c8d1931c777116ce76d22415de/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703c9ccdc69438c8d1931c777116ce76d22415de/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=703c9ccdc69438c8d1931c777116ce76d22415de", "patch": "@@ -1,3 +1,11 @@\n+2015-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/64995\n+\t* tree-ssa-sccvn.c (set_ssa_val_to): Assert that the\n+\tvalue we use is final.\n+\t(visit_reference_op_store): Always valueize op.\n+\t(visit_use): Properly valueize vuses.\n+\n 2015-02-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/64909"}, {"sha": "d1d8692a723eacd101c8d3eacca5a423199bc559", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703c9ccdc69438c8d1931c777116ce76d22415de/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703c9ccdc69438c8d1931c777116ce76d22415de/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=703c9ccdc69438c8d1931c777116ce76d22415de", "patch": "@@ -1,3 +1,8 @@\n+2015-02-10  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/64995\n+\t* g++.dg/torture/pr64995.C: New testcase.\n+\n 2015-02-10  Richard Biener  <rguenther@suse.de>\n \n \tPR tree-optimization/64909"}, {"sha": "f5b97cf371b86840aaebb880938c8302c094458e", "filename": "gcc/testsuite/g++.dg/torture/pr64995.C", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703c9ccdc69438c8d1931c777116ce76d22415de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64995.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703c9ccdc69438c8d1931c777116ce76d22415de/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64995.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftorture%2Fpr64995.C?ref=703c9ccdc69438c8d1931c777116ce76d22415de", "patch": "@@ -0,0 +1,28 @@\n+// { dg-do compile }\n+\n+extern \"C\" double acos(double);\n+class A {\n+public:\n+    double mY, mZ;\n+    A(double, double);\n+    double m_fn1(A *);\n+    int *m_fn2();\n+};\n+double a;\n+A *b;\n+A::A(double, double) : mY(), mZ() {}\n+\n+double A::m_fn1(A *) { return mY * mZ; }\n+\n+inline int *A::m_fn2() {\n+    mZ = 0;\n+    double c = m_fn1(this);\n+    a = acos(c);\n+    double d = m_fn1(b);\n+    acos(d);\n+}\n+\n+void passTime() {\n+    A e(0, 1);\n+    e.m_fn2();\n+}"}, {"sha": "e417a1536efc0a087bc3bdd232c23d56693152ee", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/703c9ccdc69438c8d1931c777116ce76d22415de/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/703c9ccdc69438c8d1931c777116ce76d22415de/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=703c9ccdc69438c8d1931c777116ce76d22415de", "patch": "@@ -1606,7 +1606,7 @@ vn_reference_lookup_or_insert_for_pieces (tree vuse,\n \t\t\t\t\t        va_heap> operands,\n \t\t\t\t\t  tree value)\n {\n-  struct vn_reference_s vr1;\n+  vn_reference_s vr1;\n   vn_reference_t result;\n   unsigned value_id;\n   vr1.vuse = vuse;\n@@ -2816,7 +2816,8 @@ set_ssa_val_to (tree from, tree to)\n     }\n \n   gcc_assert (to != NULL_TREE\n-\t      && (TREE_CODE (to) == SSA_NAME\n+\t      && ((TREE_CODE (to) == SSA_NAME\n+\t\t   && (to == from || SSA_VAL (to) == to))\n \t\t  || is_gimple_min_invariant (to)));\n \n   if (from != to)\n@@ -3122,6 +3123,9 @@ visit_reference_op_store (tree lhs, tree op, gimple stmt)\n   tree vuse = gimple_vuse (stmt);\n   tree vdef = gimple_vdef (stmt);\n \n+  if (TREE_CODE (op) == SSA_NAME)\n+    op = SSA_VAL (op);\n+\n   /* First we want to lookup using the *vuses* from the store and see\n      if there the last store to this location with the same address\n      had the same value.\n@@ -3144,8 +3148,6 @@ visit_reference_op_store (tree lhs, tree op, gimple stmt)\n     {\n       if (TREE_CODE (result) == SSA_NAME)\n \tresult = SSA_VAL (result);\n-      if (TREE_CODE (op) == SSA_NAME)\n-\top = SSA_VAL (op);\n       resultsame = expressions_equal_p (result, op);\n     }\n \n@@ -3722,7 +3724,7 @@ visit_use (tree use)\n \t\t  changed = set_ssa_val_to (lhs, simplified);\n \t\t  if (gimple_vdef (stmt))\n \t\t    changed |= set_ssa_val_to (gimple_vdef (stmt),\n-\t\t\t\t\t       gimple_vuse (stmt));\n+\t\t\t\t\t       SSA_VAL (gimple_vuse (stmt)));\n \t\t  goto done;\n \t\t}\n \t      else if (simplified\n@@ -3731,7 +3733,7 @@ visit_use (tree use)\n \t\t  changed = visit_copy (lhs, simplified);\n \t\t  if (gimple_vdef (stmt))\n \t\t    changed |= set_ssa_val_to (gimple_vdef (stmt),\n-\t\t\t\t\t       gimple_vuse (stmt));\n+\t\t\t\t\t       SSA_VAL (gimple_vuse (stmt)));\n \t\t  goto done;\n \t\t}\n \t      else"}]}