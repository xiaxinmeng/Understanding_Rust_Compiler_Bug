{"sha": "37368818b9b039ebdb177c483b0d563e128952ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzczNjg4MThiOWIwMzllYmRiMTc3YzQ4M2IwZDU2M2UxMjg5NTJiYQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-08-01T09:57:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-08-01T09:57:04Z"}, "message": "sem_aggr.adb, [...]: Minor reformatting & code reorganization.\n\n2014-08-01  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_aggr.adb, exp_atag.adb, layout.adb, nlists.adb, nlists.ads,\n\texp_attr.adb, exp_ch9.adb, par-ch12.adb, exp_aggr.adb,\n\texp_ch3.adb: Minor reformatting & code reorganization.\n\nFrom-SVN: r213439", "tree": {"sha": "d10a18c9ffde695836bbb4f6aea82a4ae8cd0a9a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d10a18c9ffde695836bbb4f6aea82a4ae8cd0a9a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/37368818b9b039ebdb177c483b0d563e128952ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37368818b9b039ebdb177c483b0d563e128952ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/37368818b9b039ebdb177c483b0d563e128952ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/37368818b9b039ebdb177c483b0d563e128952ba/comments", "author": null, "committer": null, "parents": [{"sha": "e08add8ea93dfa94541f2d20c0b56614ef0a2449", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e08add8ea93dfa94541f2d20c0b56614ef0a2449", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e08add8ea93dfa94541f2d20c0b56614ef0a2449"}], "stats": {"total": 186, "additions": 94, "deletions": 92}, "files": [{"sha": "0d4085f44dd85e1115da564bac45f65bc8cde278", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=37368818b9b039ebdb177c483b0d563e128952ba", "patch": "@@ -1,3 +1,9 @@\n+2014-08-01  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_aggr.adb, exp_atag.adb, layout.adb, nlists.adb, nlists.ads,\n+\texp_attr.adb, exp_ch9.adb, par-ch12.adb, exp_aggr.adb,\n+\texp_ch3.adb: Minor reformatting & code reorganization.\n+\n 2014-08-01  Robert Dewar  <dewar@adacore.com>\n \n \t* gnat_rm.texi: Remove VMS specific rules for pragma Ident."}, {"sha": "557e3c82dfef756e74fa8e86406c66bd30823862", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 46, "deletions": 48, "changes": 94, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=37368818b9b039ebdb177c483b0d563e128952ba", "patch": "@@ -1163,9 +1163,9 @@ package body Exp_Aggr is\n \n             if Needs_Finalization (Ctype) then\n                Append_To (L,\n-                 Make_Init_Call (\n-                   Obj_Ref => New_Copy_Tree (Indexed_Comp),\n-                   Typ     => Ctype));\n+                 Make_Init_Call\n+                   (Obj_Ref => New_Copy_Tree (Indexed_Comp),\n+                    Typ     => Ctype));\n             end if;\n \n          else\n@@ -1262,9 +1262,9 @@ package body Exp_Aggr is\n                   and then Nkind (Expr) = N_Aggregate)\n             then\n                Append_To (L,\n-                 Make_Adjust_Call (\n-                   Obj_Ref => New_Copy_Tree (Indexed_Comp),\n-                   Typ     => Comp_Type));\n+                 Make_Adjust_Call\n+                   (Obj_Ref => New_Copy_Tree (Indexed_Comp),\n+                    Typ     => Comp_Type));\n             end if;\n          end if;\n \n@@ -1406,11 +1406,12 @@ package body Exp_Aggr is\n \n          --  Construct the final loop\n \n-         Append_To (S, Make_Implicit_Loop_Statement\n-                         (Node             => N,\n-                          Identifier       => Empty,\n-                          Iteration_Scheme => L_Iteration_Scheme,\n-                          Statements       => L_Body));\n+         Append_To (S,\n+           Make_Implicit_Loop_Statement\n+             (Node             => N,\n+              Identifier       => Empty,\n+              Iteration_Scheme => L_Iteration_Scheme,\n+              Statements       => L_Body));\n \n          --  A small optimization: if the aggregate is initialized with a box\n          --  and the component type has no initialization procedure, remove the\n@@ -1513,11 +1514,12 @@ package body Exp_Aggr is\n \n          --  Construct the final loop\n \n-         Append_To (S, Make_Implicit_Loop_Statement\n-                         (Node             => N,\n-                          Identifier       => Empty,\n-                          Iteration_Scheme => W_Iteration_Scheme,\n-                          Statements       => W_Body));\n+         Append_To (S,\n+           Make_Implicit_Loop_Statement\n+             (Node             => N,\n+              Identifier       => Empty,\n+              Iteration_Scheme => W_Iteration_Scheme,\n+              Statements       => W_Body));\n \n          return S;\n       end Gen_While;\n@@ -1604,7 +1606,7 @@ package body Exp_Aggr is\n       then\n          Append_To (New_Code,\n            Make_Assignment_Statement (Loc,\n-             Name => New_Copy_Tree (Into),\n+             Name       => New_Copy_Tree (Into),\n              Expression =>\n                Unchecked_Convert_To (Typ,\n                  Make_Integer_Literal (Loc, Uint_0))));\n@@ -2186,7 +2188,7 @@ package body Exp_Aggr is\n \n             Append_To (L,\n               Make_Procedure_Call_Statement (Loc,\n-                Name =>\n+                Name                   =>\n                   New_Occurrence_Of\n                     (Find_Prim_Op (Init_Typ, Name_Initialize), Loc),\n                 Parameter_Associations => New_List (New_Copy_Tree (Ref))));\n@@ -2510,9 +2512,9 @@ package body Exp_Aggr is\n                  and then not Is_Limited_Type (Etype (Ancestor))\n                then\n                   Append_To (Assign,\n-                    Make_Adjust_Call (\n-                      Obj_Ref => New_Copy_Tree (Ref),\n-                      Typ     => Etype (Ancestor)));\n+                    Make_Adjust_Call\n+                      (Obj_Ref => New_Copy_Tree (Ref),\n+                       Typ     => Etype (Ancestor)));\n                end if;\n \n                Append_To (L,\n@@ -2628,9 +2630,8 @@ package body Exp_Aggr is\n             if Nkind (N) = N_Aggregate then\n                Append_To (L,\n                  Make_Procedure_Call_Statement (Loc,\n-                   Name =>\n-                     New_Occurrence_Of\n-                       (Base_Init_Proc (CPP_Parent), Loc),\n+                   Name                   =>\n+                     New_Occurrence_Of (Base_Init_Proc (CPP_Parent), Loc),\n                    Parameter_Associations => New_List (\n                      Unchecked_Convert_To (CPP_Parent,\n                        New_Copy_Tree (Lhs)))));\n@@ -2655,10 +2656,10 @@ package body Exp_Aggr is\n          if Is_CPP_Constructor_Call (Expression (Comp)) then\n             Append_List_To (L,\n               Build_Initialization_Call (Loc,\n-                Id_Ref            => Make_Selected_Component (Loc,\n-                                       Prefix        => New_Copy_Tree (Target),\n-                                       Selector_Name =>\n-                                         New_Occurrence_Of (Selector, Loc)),\n+                Id_Ref            =>\n+                  Make_Selected_Component (Loc,\n+                    Prefix        => New_Copy_Tree (Target),\n+                    Selector_Name => New_Occurrence_Of (Selector, Loc)),\n                 Typ               => Etype (Selector),\n                 Enclos_Type       => Typ,\n                 With_Default_Init => True,\n@@ -2911,13 +2912,13 @@ package body Exp_Aggr is\n                  and then not Is_Limited_Type (Comp_Type)\n                then\n                   Append_To (L,\n-                    Make_Adjust_Call (\n-                      Obj_Ref => New_Copy_Tree (Comp_Expr),\n-                      Typ     => Comp_Type));\n+                    Make_Adjust_Call\n+                      (Obj_Ref => New_Copy_Tree (Comp_Expr),\n+                       Typ     => Comp_Type));\n                end if;\n             end if;\n \n-         --  ???\n+         --  comment would be good here ???\n \n          elsif Ekind (Selector) = E_Discriminant\n            and then Nkind (N) /= N_Extension_Aggregate\n@@ -2955,9 +2956,9 @@ package body Exp_Aggr is\n                   Make_Raise_Constraint_Error (Loc,\n                     Condition =>\n                       Make_Op_Ne (Loc,\n-                        Left_Opnd => New_Copy_Tree (Node (D_Val)),\n+                        Left_Opnd  => New_Copy_Tree (Node (D_Val)),\n                         Right_Opnd => Expression (Comp)),\n-                      Reason => CE_Discriminant_Check_Failed));\n+                    Reason    => CE_Discriminant_Check_Failed));\n \n                else\n                   --  Find self-reference in previous discriminant assignment,\n@@ -4199,7 +4200,7 @@ package body Exp_Aggr is\n \n                Append_To (Indexes,\n                  Make_Range (Loc,\n-                   Low_Bound =>  Make_Integer_Literal (Loc, 1),\n+                   Low_Bound  => Make_Integer_Literal (Loc, 1),\n                    High_Bound => Make_Integer_Literal (Loc, Num)));\n             end loop;\n \n@@ -4209,11 +4210,10 @@ package body Exp_Aggr is\n             --  positional. Retrieve each dimension bounds (computed earlier).\n \n             for D in 1 .. Number_Dimensions (Typ) loop\n-               Append (\n+               Append_To (Indexes,\n                  Make_Range (Loc,\n-                    Low_Bound  => Aggr_Low  (D),\n-                    High_Bound => Aggr_High (D)),\n-                 Indexes);\n+                   Low_Bound  => Aggr_Low  (D),\n+                   High_Bound => Aggr_High (D)));\n             end loop;\n          end if;\n \n@@ -6097,11 +6097,11 @@ package body Exp_Aggr is\n                   Discriminant := First_Stored_Discriminant (Base_Type (Typ));\n                   while Present (Discriminant) loop\n                      New_Comp :=\n-                       New_Copy_Tree (\n-                         Get_Discriminant_Value (\n-                             Discriminant,\n-                             Typ,\n-                             Discriminant_Constraint (Typ)));\n+                       New_Copy_Tree\n+                         (Get_Discriminant_Value\n+                            (Discriminant,\n+                              Typ,\n+                              Discriminant_Constraint (Typ)));\n                      Append (New_Comp, Constraints);\n                      Next_Stored_Discriminant (Discriminant);\n                   end loop;\n@@ -6173,8 +6173,7 @@ package body Exp_Aggr is\n                        Make_Component_Association (Loc,\n                          Choices    =>\n                            New_List (New_Occurrence_Of (Comp, Loc)),\n-                         Expression =>\n-                           New_Comp));\n+                         Expression => New_Comp));\n \n                      Analyze_And_Resolve (New_Comp, Etype (Comp));\n                   end if;\n@@ -7135,8 +7134,7 @@ package body Exp_Aggr is\n \n                for I in UI_To_Int (Intval (Lo)) .. UI_To_Int (Intval (Hi))\n                loop\n-                  Append_To\n-                    (Expressions (Agg), New_Copy (Expression (Expr)));\n+                  Append_To (Expressions (Agg), New_Copy (Expression (Expr)));\n \n                   --  The copied expression must be analyzed and resolved.\n                   --  Besides setting the type, this ensures that static"}, {"sha": "bd5f9e26eca8306f0e0c8a9537fa73ba91133221", "filename": "gcc/ada/exp_atag.adb", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fexp_atag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fexp_atag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_atag.adb?ref=37368818b9b039ebdb177c483b0d563e128952ba", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 2006-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2006-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -99,10 +99,11 @@ package body Exp_Atag is\n \n       Append_To (Stmts,\n         Make_Assignment_Statement (Loc,\n-          Name => Make_Identifier (Loc, Name_uC),\n+          Name       => Make_Identifier (Loc, Name_uC),\n           Expression =>\n             Make_Function_Call (Loc,\n-              Name => New_Occurrence_Of (RTE (RE_Get_Prim_Op_Kind), Loc),\n+              Name                   =>\n+                New_Occurrence_Of (RTE (RE_Get_Prim_Op_Kind), Loc),\n               Parameter_Associations => New_List (\n                 Tag_Node,\n                 Make_Identifier (Loc, Name_uS)))));\n@@ -415,9 +416,9 @@ package body Exp_Atag is\n \n             Append_To (Result,\n               Make_Assignment_Statement (Loc,\n-                Name =>\n+                Name      =>\n                   Make_Indexed_Component (Loc,\n-                    Prefix =>\n+                    Prefix      =>\n                       Make_Explicit_Dereference (Loc,\n                         Unchecked_Convert_To\n                           (Node (Last_Elmt (Access_Disp_Table (Typ))),\n@@ -428,7 +429,7 @@ package body Exp_Atag is\n                Expression =>\n                  Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n                    Make_Attribute_Reference (Loc,\n-                     Prefix => New_Occurrence_Of (E, Loc),\n+                     Prefix         => New_Occurrence_Of (E, Loc),\n                      Attribute_Name => Name_Unrestricted_Access))));\n          end if;\n \n@@ -455,7 +456,7 @@ package body Exp_Atag is\n          if not CPP_Table (J) then\n             Prepend_To (Result,\n               Make_Assignment_Statement (Loc,\n-                Name =>\n+                Name       =>\n                   Make_Explicit_Dereference (Loc,\n                     Unchecked_Convert_To\n                       (Node (Last_Elmt (Access_Disp_Table (CPP_Typ))),\n@@ -550,14 +551,14 @@ package body Exp_Atag is\n \n                         Append_To (Result,\n                           Make_Assignment_Statement (Loc,\n-                            Name =>\n+                            Name       =>\n                               Make_Indexed_Component (Loc,\n-                                Prefix =>\n+                                Prefix      =>\n                                   Make_Explicit_Dereference (Loc,\n                                     Unchecked_Convert_To\n                                       (Node\n                                         (Last_Elmt\n-                                          (Access_Disp_Table (Iface))),\n+                                           (Access_Disp_Table (Iface))),\n                                        New_Occurrence_Of (Typ_Tag, Loc))),\n                                 Expressions =>\n                                    New_List\n@@ -566,7 +567,7 @@ package body Exp_Atag is\n                             Expression =>\n                               Unchecked_Convert_To (RTE (RE_Prim_Ptr),\n                                 Make_Attribute_Reference (Loc,\n-                                  Prefix => New_Occurrence_Of (E, Loc),\n+                                  Prefix         => New_Occurrence_Of (E, Loc),\n                                   Attribute_Name =>\n                                     Name_Unrestricted_Access))));\n                      end if;\n@@ -584,7 +585,7 @@ package body Exp_Atag is\n                      if not Prims_Table (J) then\n                         Insert_After (Last_Nod,\n                           Make_Assignment_Statement (Loc,\n-                            Name =>\n+                            Name       =>\n                               Make_Explicit_Dereference (Loc,\n                                 Unchecked_Convert_To\n                                  (Node (Last_Elmt (Access_Disp_Table (Iface))),"}, {"sha": "9b307954ca151e7b0037d1ddbe63823d3038af41", "filename": "gcc/ada/exp_attr.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fexp_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fexp_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_attr.adb?ref=37368818b9b039ebdb177c483b0d563e128952ba", "patch": "@@ -459,14 +459,14 @@ package body Exp_Attr is\n             Append_To (Alt_List,\n               Make_Case_Statement_Alternative (Loc,\n                 Discrete_Choices => New_Copy_List (Discrete_Choices (Variant)),\n-                Statements =>\n+                Statements       =>\n                   Make_VS_Case (E, Component_List (Variant), Discrs)));\n             Next_Non_Pragma (Variant);\n          end loop;\n \n          Append_To (Result,\n            Make_Case_Statement (Loc,\n-             Expression =>\n+             Expression   =>\n                Make_Selected_Component (Loc,\n                  Prefix        => Make_Identifier (Loc, Name_X),\n                  Selector_Name => New_Copy (Name (Variant_Part (CL)))),"}, {"sha": "48008b02998748dddbe572435b9a1c39d139c03e", "filename": "gcc/ada/exp_ch3.adb", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fexp_ch3.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fexp_ch3.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch3.adb?ref=37368818b9b039ebdb177c483b0d563e128952ba", "patch": "@@ -2350,8 +2350,7 @@ package body Exp_Ch3 is\n \n             if not Null_Present (Type_Definition (N)) then\n                Append_List_To (Body_Stmts,\n-                 Build_Init_Statements (\n-                   Component_List (Type_Definition (N))));\n+                 Build_Init_Statements (Component_List (Type_Definition (N))));\n             end if;\n \n          --  N is a Derived_Type_Definition with a possible non-empty\n@@ -4459,8 +4458,7 @@ package body Exp_Ch3 is\n             --  the case statement switch. Their value is added when an\n             --  equality call on unchecked unions is expanded.\n \n-            Append_List_To (Stmts,\n-              Make_Eq_Case (Typ, Comps, New_Discrs));\n+            Append_List_To (Stmts, Make_Eq_Case (Typ, Comps, New_Discrs));\n          end;\n \n       --  Normal case (not unchecked union)"}, {"sha": "55cd2a21e6cc9a0b867e3ed94434e3efee4bfacd", "filename": "gcc/ada/exp_ch9.adb", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fexp_ch9.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fexp_ch9.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch9.adb?ref=37368818b9b039ebdb177c483b0d563e128952ba", "patch": "@@ -10624,14 +10624,13 @@ package body Exp_Ch9 is\n          Params : constant List_Id := New_List;\n \n       begin\n-         Append (\n+         Append_To (Params,\n            Make_Attribute_Reference (Loc,\n              Prefix         => New_Occurrence_Of (Qnam, Loc),\n-             Attribute_Name => Name_Unchecked_Access),\n-           Params);\n-         Append (Select_Mode,                  Params);\n-         Append (New_Occurrence_Of (Ann, Loc),  Params);\n-         Append (New_Occurrence_Of (Xnam, Loc), Params);\n+             Attribute_Name => Name_Unchecked_Access));\n+         Append_To (Params, Select_Mode);\n+         Append_To (Params, New_Occurrence_Of (Ann, Loc));\n+         Append_To (Params, New_Occurrence_Of (Xnam, Loc));\n \n          return\n            Make_Procedure_Call_Statement (Loc,\n@@ -11351,6 +11350,7 @@ package body Exp_Ch9 is\n             Append (Cases, Stats);\n          end;\n       end if;\n+\n       Append (End_Lab, Stats);\n \n       --  Replace accept statement with appropriate block"}, {"sha": "7721eefdd9d3c23a8904bae2eb7f03c01f9c2506", "filename": "gcc/ada/layout.adb", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Flayout.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Flayout.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Flayout.adb?ref=37368818b9b039ebdb177c483b0d563e128952ba", "patch": "@@ -2195,13 +2195,12 @@ package body Layout is\n                            D_List := New_List;\n                            D_Entity := First_Discriminant (E);\n                            while Present (D_Entity) loop\n-                              Append (\n+                              Append_To (D_List,\n                                 Make_Selected_Component (Loc,\n                                   Prefix        =>\n                                     Make_Identifier (Loc, Vname),\n                                   Selector_Name =>\n-                                    New_Occurrence_Of (D_Entity, Loc)),\n-                                D_List);\n+                                    New_Occurrence_Of (D_Entity, Loc)));\n \n                               D_Entity := Next_Discriminant (D_Entity);\n                            end loop;"}, {"sha": "dcb5dd41cb714e5d1b117eae7c11f6e1cf8a0af8", "filename": "gcc/ada/nlists.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fnlists.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fnlists.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.adb?ref=37368818b9b039ebdb177c483b0d563e128952ba", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -744,8 +744,8 @@ package body Nlists is\n \n       else\n          NL := New_List;\n-         E := First (List);\n \n+         E := First (List);\n          while Present (E) loop\n             if Comes_From_Source (E) then\n                Append (New_Copy (E), NL);"}, {"sha": "5950b4a71ab79a9736436684f0dd3e106eda7afd", "filename": "gcc/ada/nlists.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fnlists.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fnlists.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fnlists.ads?ref=37368818b9b039ebdb177c483b0d563e128952ba", "patch": "@@ -225,9 +225,9 @@ package Nlists is\n \n    procedure Append (Node : Node_Or_Entity_Id; To : List_Id);\n    --  Appends Node at the end of node list To. Node must be a non-empty node\n-   --  that is not already a member of a node list, and To must be a\n-   --  node list. An attempt to append an error node is ignored without\n-   --  complaint and the list is unchanged.\n+   --  that is not already a member of a node list, and To must be a node list.\n+   --  An attempt to append an error node is ignored without complaint and the\n+   --  list is unchanged.\n \n    procedure Append_To (To : List_Id; Node : Node_Or_Entity_Id);\n    pragma Inline (Append_To);"}, {"sha": "39169e1fc808761905c7b1fb296bf4ea04507438", "filename": "gcc/ada/par-ch12.adb", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fpar-ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fpar-ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar-ch12.adb?ref=37368818b9b039ebdb177c483b0d563e128952ba", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -168,6 +168,7 @@ package body Ch12 is\n \n          if Token = Tok_Use then\n             Append (P_Use_Clause, Decls);\n+\n          else\n             --  Parse a generic parameter declaration\n "}, {"sha": "e5dfcaac365294931697e302fb54a824db2e939e", "filename": "gcc/ada/sem_aggr.adb", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fsem_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/37368818b9b039ebdb177c483b0d563e128952ba/gcc%2Fada%2Fsem_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_aggr.adb?ref=37368818b9b039ebdb177c483b0d563e128952ba", "patch": "@@ -4355,13 +4355,12 @@ package body Sem_Aggr is\n                            end if;\n \n                            if Needs_Box then\n-                              Append\n-                                (Make_Component_Association (Loc,\n-                                   Choices     =>\n-                                     New_List (Make_Others_Choice (Loc)),\n-                                   Expression  => Empty,\n-                                      Box_Present => True),\n-                                 Component_Associations (Aggr));\n+                              Append_To (Component_Associations (Aggr),\n+                                Make_Component_Association (Loc,\n+                                  Choices     =>\n+                                    New_List (Make_Others_Choice (Loc)),\n+                                  Expression  => Empty,\n+                                  Box_Present => True));\n                            end if;\n                         end Propagate_Discriminants;\n \n@@ -4400,14 +4399,14 @@ package body Sem_Aggr is\n                               while Present (Comp) loop\n                                  if Ekind (Comp) = E_Component then\n                                     if not Is_Record_Type (Etype (Comp)) then\n-                                       Append\n-                                         (Make_Component_Association (Loc,\n+                                       Append_To\n+                                         (Component_Associations (Expr),\n+                                          Make_Component_Association (Loc,\n                                             Choices     =>\n                                               New_List\n                                                (Make_Others_Choice (Loc)),\n                                             Expression  => Empty,\n-                                               Box_Present => True),\n-                                          Component_Associations (Expr));\n+                                               Box_Present => True));\n                                     end if;\n                                     exit;\n                                  end if;"}]}