{"sha": "a0af8668dcfac575d5c0f426d2dfac76d5a1490a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTBhZjg2NjhkY2ZhYzU3NWQ1YzBmNDI2ZDJkZmFjNzZkNWExNDkwYQ==", "commit": {"author": {"name": "Carl Love", "email": "cel@us.ibm.com", "date": "2016-11-22T16:49:02Z"}, "committer": {"name": "Carl Love", "email": "carll@gcc.gnu.org", "date": "2016-11-22T16:49:02Z"}, "message": "rs6000-c.c: Add built-in support for vector compare equal and vector compare not equal.\n\ngcc/ChangeLog:\n\n2016-11-21  Carl Love  <cel@us.ibm.com>\n\n        * config/rs6000/rs6000-c.c: Add built-in support for vector compare\n        equal and vector compare not equal.  The vector compares take two\n        arguments of type vector bool char, vector bool short, vector bool int,\n        vector bool long long with the same return type.\n        * doc/extend.texi: Update built-in documentation file for the new\n        powerpc built-ins.\n\ngcc/testsuite/ChangeLog:\n\n2016-11-21  Carl Love  <cel@us.ibm.com>\n\n        * gcc.target/powerpc/builtins-3.c: New file to test the new\n        built-ins for vector compare equal and vector compare not equal.\n\nFrom-SVN: r242706", "tree": {"sha": "b713dc26db1310eb7bb904d63f9982a946af38bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b713dc26db1310eb7bb904d63f9982a946af38bc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0af8668dcfac575d5c0f426d2dfac76d5a1490a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0af8668dcfac575d5c0f426d2dfac76d5a1490a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0af8668dcfac575d5c0f426d2dfac76d5a1490a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0af8668dcfac575d5c0f426d2dfac76d5a1490a/comments", "author": {"login": "carlelove", "id": 86435705, "node_id": "MDQ6VXNlcjg2NDM1NzA1", "avatar_url": "https://avatars.githubusercontent.com/u/86435705?v=4", "gravatar_id": "", "url": "https://api.github.com/users/carlelove", "html_url": "https://github.com/carlelove", "followers_url": "https://api.github.com/users/carlelove/followers", "following_url": "https://api.github.com/users/carlelove/following{/other_user}", "gists_url": "https://api.github.com/users/carlelove/gists{/gist_id}", "starred_url": "https://api.github.com/users/carlelove/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/carlelove/subscriptions", "organizations_url": "https://api.github.com/users/carlelove/orgs", "repos_url": "https://api.github.com/users/carlelove/repos", "events_url": "https://api.github.com/users/carlelove/events{/privacy}", "received_events_url": "https://api.github.com/users/carlelove/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b2b0acbe2bec113381c9925cc29f26a402873350", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2b0acbe2bec113381c9925cc29f26a402873350", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2b0acbe2bec113381c9925cc29f26a402873350"}], "stats": {"total": 109, "additions": 108, "deletions": 1}, "files": [{"sha": "a81c423f477030246aa67146dcba7ae52100ad62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0af8668dcfac575d5c0f426d2dfac76d5a1490a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0af8668dcfac575d5c0f426d2dfac76d5a1490a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a0af8668dcfac575d5c0f426d2dfac76d5a1490a", "patch": "@@ -1,3 +1,12 @@\n+2016-11-22  Carl Love  <cel@us.ibm.com>\n+\n+\t* config/rs6000/rs6000-c.c: Add built-in support for vector compare\n+\tequal and vector compare not equal.  The vector compares take two\n+\targuments of type vector bool char, vector bool short, vector bool int,\n+\tvector bool long long with the same return type.\n+\t* doc/extend.texi: Update built-in documentation file for the new\n+\tpowerpc built-ins.\n+\n 2016-11-22  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* Makefile.in ($(lang_checks_parallelized)): Fix detection"}, {"sha": "4f332d7173500ebb87497ae05cbfae10a21e2887", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0af8668dcfac575d5c0f426d2dfac76d5a1490a/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0af8668dcfac575d5c0f426d2dfac76d5a1490a/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=a0af8668dcfac575d5c0f426d2dfac76d5a1490a", "patch": "@@ -1107,14 +1107,22 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPEQ, ALTIVEC_BUILTIN_VCMPEQUB,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPEQ, ALTIVEC_BUILTIN_VCMPEQUB,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPEQ, ALTIVEC_BUILTIN_VCMPEQUH,\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPEQ, ALTIVEC_BUILTIN_VCMPEQUH,\n     RS6000_BTI_bool_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPEQ, ALTIVEC_BUILTIN_VCMPEQUH,\n     RS6000_BTI_bool_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPEQ, ALTIVEC_BUILTIN_VCMPEQUW,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPEQ, ALTIVEC_BUILTIN_VCMPEQUW,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPEQ, ALTIVEC_BUILTIN_VCMPEQUW,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPEQ, P8V_BUILTIN_VCMPEQUD,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPEQ, P8V_BUILTIN_VCMPEQUD,\n     RS6000_BTI_bool_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPEQ, P8V_BUILTIN_VCMPEQUD,\n@@ -4485,6 +4493,9 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEB,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_V16QI,\n     RS6000_BTI_V16QI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEB,\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI,\n+    RS6000_BTI_bool_V16QI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEB,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI,\n     RS6000_BTI_unsigned_V16QI, 0 },\n@@ -4508,7 +4519,11 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEW,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_unsigned_V4SI,\n     RS6000_BTI_unsigned_V4SI, 0 },\n-\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEB,\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI,\n+    RS6000_BTI_bool_V4SI, 0 },\n+  { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNED,\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNEF,\n     RS6000_BTI_bool_V4SI, RS6000_BTI_V4SF, RS6000_BTI_V4SF, 0 },\n   { ALTIVEC_BUILTIN_VEC_CMPNE, P9V_BUILTIN_CMPNED,"}, {"sha": "ca4691866509d4c1f6c3d430eaa56af04cb6c6be", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0af8668dcfac575d5c0f426d2dfac76d5a1490a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0af8668dcfac575d5c0f426d2dfac76d5a1490a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=a0af8668dcfac575d5c0f426d2dfac76d5a1490a", "patch": "@@ -15652,6 +15652,9 @@ vector float vec_ceil (vector float);\n \n vector signed int vec_cmpb (vector float, vector float);\n \n+vector bool char vec_cmpeq (vector bool char, vector bool char);\n+vector bool short vec_cmpeq (vector bool short, vector bool short);\n+vector bool int vec_cmpeq (vector bool int, vector bool int);\n vector bool char vec_cmpeq (vector signed char, vector signed char);\n vector bool char vec_cmpeq (vector unsigned char, vector unsigned char);\n vector bool short vec_cmpeq (vector signed short, vector signed short);\n@@ -17568,6 +17571,8 @@ int vec_any_lt (vector unsigned long long, vector unsigned long long);\n int vec_any_ne (vector long long, vector long long);\n int vec_any_ne (vector unsigned long long, vector unsigned long long);\n \n+vector bool long long vec_cmpeq (vector bool long long, vector bool long long);\n+\n vector long long vec_eqv (vector long long, vector long long);\n vector long long vec_eqv (vector bool long long, vector long long);\n vector long long vec_eqv (vector long long, vector bool long long);\n@@ -17901,6 +17906,11 @@ If the ISA 3.0 instruction set additions (@option{-mcpu=power9})\n are available:\n \n @smallexample\n+vector bool char vec_cmpne (vector bool char, vector bool char);\n+vector bool short vec_cmpne (vector bool short, vector bool short);\n+vector bool int vec_cmpne (vector bool int, vector bool int);\n+vector bool long long vec_cmpne (vector bool long long, vector bool long long);\n+\n vector long long vec_vctz (vector long long);\n vector unsigned long long vec_vctz (vector unsigned long long);\n vector int vec_vctz (vector int);"}, {"sha": "e6c41c4d8558e335abf73bb81dc823f79986503e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0af8668dcfac575d5c0f426d2dfac76d5a1490a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0af8668dcfac575d5c0f426d2dfac76d5a1490a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a0af8668dcfac575d5c0f426d2dfac76d5a1490a", "patch": "@@ -1,3 +1,8 @@\n+2016-11-22  Carl Love  <cel@us.ibm.com>\n+\n+\t* gcc.target/powerpc/builtins-3.c: New file to test the new\n+\tbuilt-ins for vector compare equal and vector compare not equal.\n+\n 2016-11-22  Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/78443"}, {"sha": "8d4b63d806da881cc669186e6f3a651bcde5aa60", "filename": "gcc/testsuite/gcc.target/powerpc/builtins-3.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0af8668dcfac575d5c0f426d2dfac76d5a1490a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0af8668dcfac575d5c0f426d2dfac76d5a1490a/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fbuiltins-3.c?ref=a0af8668dcfac575d5c0f426d2dfac76d5a1490a", "patch": "@@ -0,0 +1,68 @@\n+#include <altivec.h>\n+\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+\n+vector bool char\n+test_eq_char (vector bool char x, vector bool char y)\n+{\n+\treturn vec_cmpeq (x, y);\n+}\n+\n+vector bool short\n+test_eq_short (vector bool short x, vector bool short y)\n+{\n+\treturn vec_cmpeq (x, y);\n+}\n+\n+vector bool int\n+test_eq_int (vector bool int x, vector bool int y)\n+{\n+\treturn vec_cmpeq (x, y);\n+}\n+\n+vector bool long\n+test_eq_long (vector bool long x, vector bool long y)\n+{\n+\treturn vec_cmpeq (x, y);\n+}\n+\n+vector bool char\n+test_ne_char (vector bool char x, vector bool char y)\n+{\n+\treturn vec_cmpne (x, y);\n+}\n+\n+vector bool short\n+test_ne_short (vector bool short x, vector bool short y)\n+{\n+\treturn vec_cmpne (x, y);\n+}\n+\n+vector bool int\n+test_ne_int (vector bool int x, vector bool int y)\n+{\n+\treturn vec_cmpne (x, y);\n+}\n+\n+vector bool long\n+test_ne_long (vector bool long x, vector bool long y)\n+{\n+\treturn vec_cmpne (x, y);\n+}\n+\n+/* Note: vec_cmpne is implemented as vcmpeq and then NOT'ed\n+   using the xxlnor instruction.\n+\n+   Expected test results:\n+   test_eq_char              1 vcmpeq inst\n+   test_eq_short             1 vcmpeq inst\n+   test_eq_int               1 vcmpeq inst\n+   test_eq_long              1 vcmpeq inst\n+   test_ne_char              1 vcmpeq, 1 xxlnor inst\n+   test_ne_short             1 vcmpeq, 1 xxlnor inst\n+   test_ne_int               1 vcmpeq, 1 xxlnor inst\n+   test_ne_long              1 vcmpeq, 1 xxlnor inst */\n+\n+/* { dg-final { scan-assembler-times \"vcmpeq\" 8 } } */\n+/* { dg-final { scan-assembler-times \"xxlnor\" 4 } } */"}]}