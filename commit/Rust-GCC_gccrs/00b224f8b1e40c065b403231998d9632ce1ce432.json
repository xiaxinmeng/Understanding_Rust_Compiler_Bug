{"sha": "00b224f8b1e40c065b403231998d9632ce1ce432", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBiMjI0ZjhiMWU0MGMwNjViNDAzMjMxOTk4ZDk2MzJjZTFjZTQzMg==", "commit": {"author": {"name": "Bryce McKinlay", "email": "bryce@waitaki.otago.ac.nz", "date": "2002-04-08T12:03:02Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2002-04-08T12:03:02Z"}, "message": "gcj.texi (Invocation): Update JvAttachCurrentThread documentation.\n\n\t* gcj.texi (Invocation): Update JvAttachCurrentThread documentation.\n\tAdd note about handling uncaught exceptions. Add an exception handler\n\tto example.\n\nFrom-SVN: r52022", "tree": {"sha": "037dd873b5839c12c289a18925014739ba095fc5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/037dd873b5839c12c289a18925014739ba095fc5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00b224f8b1e40c065b403231998d9632ce1ce432", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b224f8b1e40c065b403231998d9632ce1ce432", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b224f8b1e40c065b403231998d9632ce1ce432", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b224f8b1e40c065b403231998d9632ce1ce432/comments", "author": null, "committer": null, "parents": [{"sha": "fc06c4b207c230b84ed5d8644059c7e01f17be8c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc06c4b207c230b84ed5d8644059c7e01f17be8c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc06c4b207c230b84ed5d8644059c7e01f17be8c"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "b4932ea74e19fe48ca448e884ca65ad847379ea2", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b224f8b1e40c065b403231998d9632ce1ce432/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b224f8b1e40c065b403231998d9632ce1ce432/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=00b224f8b1e40c065b403231998d9632ce1ce432", "patch": "@@ -1,3 +1,9 @@\n+2002-04-08  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n+\n+\t* gcj.texi (Invocation): Update JvAttachCurrentThread documentation.\n+\tAdd note about handling uncaught exceptions. Add an exception handler\n+\tto example.\n+\n 2002-04-08  Bryce McKinlay  <bryce@waitaki.otago.ac.nz>\n \n \t* parse.y (resolve_qualified_expression_name): Clear \"from_super\" flag"}, {"sha": "9f1b41fcf1ebd5ab41cc9070a838ea2418fe8381", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 43, "deletions": 9, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00b224f8b1e40c065b403231998d9632ce1ce432/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00b224f8b1e40c065b403231998d9632ce1ce432/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=00b224f8b1e40c065b403231998d9632ce1ce432", "patch": "@@ -1709,40 +1709,74 @@ used in a future release.\n \n @deftypefun java::lang::Thread* JvAttachCurrentThread (jstring @var{name}, java::lang::ThreadGroup* @var{group})\n Registers an existing thread with the Java runtime.  This must be called once\n-by a multi-threaded C++ application for each thread, before that thread makes\n-any other Java or CNI calls.\n+from each thread, before that thread makes any other Java or CNI calls. It\n+must be called after @code{JvCreateJavaVM}.\n @var{name} specifies a name for the thread. It may be @code{NULL}, in which \n case a name will be generated.\n @var{group} is the ThreadGroup in which this thread will be a member. If it\n is @code{NULL}, the thread will be a member of the main thread group.\n The return value is the Java @code{Thread} object that represents the thread.\n+It is safe to call @code{JvAttachCurrentThread()} more than once from the same\n+thread. If the thread is already attached, the call is ignored and the current\n+thread object is returned.\n @end deftypefun\n \n @deftypefun jint JvDetachCurrentThread ()\n Unregisters a thread from the Java runtime. This should be called by threads\n that were attached using @code{JvAttachCurrentThread()}, after they have \n finished making calls to Java code. This ensures that any resources associated\n with the thread become eligible for garbage collection.\n-This function returns @code{0} upon success.\n+This function returns @code{0} upon success, or @code{-1} if the current thread\n+is not attached.\n @end deftypefun\n \n-The following example demonstrates the use of @code{JvCreateJavaVM()} from\n-a simple C++ application. It can be compiled with \n-@command{c++ test.cc -lgcj}.\n+@subsection Handling uncaught exceptions\n+\n+If an exception is thrown from Java code called using the invocation API, and\n+no handler for the exception can be found, the runtime will abort the\n+application. In order to make the application more robust, it is recommended \n+that code which uses the invocation API be wrapped by a top-level try/catch \n+block that catches all Java exceptions.\n+\n+@subsection Example\n+\n+The following code demonstrates the use of the invocation API. In this\n+example, the C++ application initializes the Java runtime and attaches\n+itself. The @code{java.lang.System} class is initialized in order to\n+access its @code{out} field, and a Java string is printed. Finally, the thread\n+is detached from the runtime once it has finished making Java calls. Everything\n+is wrapped with a try/catch block to provide a default handler for any uncaught \n+exceptions.\n+\n+The example can be compiled with @command{c++ test.cc -lgcj}.\n \n @example\n // test.cc\n #include <gcj/cni.h>\n #include <java/lang/System.h>\n #include <java/io/PrintStream.h>\n+#include <java/lang/Throwable.h>\n \n int main(int argc, char *argv)\n @{\n   using namespace java::lang;\n   \n-  JvCreateJavaVM(NULL);\n-  String *hello = JvNewStringLatin1(\"Hello from C++\");\n-  System::out->println(hello);\n+  try\n+  @{\n+    JvCreateJavaVM(NULL);\n+    JvAttachCurrentThread(NULL, NULL);\n+\n+    String *message = JvNewStringLatin1(\"Hello from C++\");\n+    JvInitClass(&System.class$);\n+    System::out->println(message);\n+\n+    JvDetachCurrentThread();\n+  @}\n+  catch (Throwable *t)\n+  @{\n+    System::err->println(JvNewStringLatin1(\"Unhandled Java exception:\"));\n+    t->printStackTrace();\n+  @}\n @}\n @end example\n "}]}