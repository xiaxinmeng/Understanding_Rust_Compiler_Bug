{"sha": "cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ZkZjZmZjYxYjgxMDdkMTI0ZjQxYzQyNmQ2NWFjZjhiNWFkOGNmNQ==", "commit": {"author": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-07-31T09:34:36Z"}, "committer": {"name": "Thomas Koenig", "email": "tkoenig@gcc.gnu.org", "date": "2017-07-31T09:34:36Z"}, "message": "re PR fortran/81581 (runtime checks for DIM argument of intrinsic SUM missing)\n\n2017-07-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/81581\n\t* m4/ifuntion.m4 (name`'rtype_qual`_'atype_code): Perform check\n\tfor dim.\n\t(`m'name`'rtype_qual`_'atype_code): Likewise. Change type of rank\n\tand tim to index_type.\n\t(`s'name`'rtype_qual`_'atype_code): Perform check for dim.\n\t* generated/iall_i16.c: Regenerated.\n\t* generated/iall_i1.c: Regenerated.\n\t* generated/iall_i2.c: Regenerated.\n\t* generated/iall_i4.c: Regenerated.\n\t* generated/iall_i8.c: Regenerated.\n\t* generated/iany_i16.c: Regenerated.\n\t* generated/iany_i1.c: Regenerated.\n\t* generated/iany_i2.c: Regenerated.\n\t* generated/iany_i4.c: Regenerated.\n\t* generated/iany_i8.c: Regenerated.\n\t* generated/iparity_i16.c: Regenerated.\n\t* generated/iparity_i1.c: Regenerated.\n\t* generated/iparity_i2.c: Regenerated.\n\t* generated/iparity_i4.c: Regenerated.\n\t* generated/iparity_i8.c: Regenerated.\n\t* generated/maxloc1_16_i16.c: Regenerated.\n\t* generated/maxloc1_16_i1.c: Regenerated.\n\t* generated/maxloc1_16_i2.c: Regenerated.\n\t* generated/maxloc1_16_i4.c: Regenerated.\n\t* generated/maxloc1_16_i8.c: Regenerated.\n\t* generated/maxloc1_16_r10.c: Regenerated.\n\t* generated/maxloc1_16_r16.c: Regenerated.\n\t* generated/maxloc1_16_r4.c: Regenerated.\n\t* generated/maxloc1_16_r8.c: Regenerated.\n\t* generated/maxloc1_4_i16.c: Regenerated.\n\t* generated/maxloc1_4_i1.c: Regenerated.\n\t* generated/maxloc1_4_i2.c: Regenerated.\n\t* generated/maxloc1_4_i4.c: Regenerated.\n\t* generated/maxloc1_4_i8.c: Regenerated.\n\t* generated/maxloc1_4_r10.c: Regenerated.\n\t* generated/maxloc1_4_r16.c: Regenerated.\n\t* generated/maxloc1_4_r4.c: Regenerated.\n\t* generated/maxloc1_4_r8.c: Regenerated.\n\t* generated/maxloc1_8_i16.c: Regenerated.\n\t* generated/maxloc1_8_i1.c: Regenerated.\n\t* generated/maxloc1_8_i2.c: Regenerated.\n\t* generated/maxloc1_8_i4.c: Regenerated.\n\t* generated/maxloc1_8_i8.c: Regenerated.\n\t* generated/maxloc1_8_r10.c: Regenerated.\n\t* generated/maxloc1_8_r16.c: Regenerated.\n\t* generated/maxloc1_8_r4.c: Regenerated.\n\t* generated/maxloc1_8_r8.c: Regenerated.\n\t* generated/maxval_i16.c: Regenerated.\n\t* generated/maxval_i1.c: Regenerated.\n\t* generated/maxval_i2.c: Regenerated.\n\t* generated/maxval_i4.c: Regenerated.\n\t* generated/maxval_i8.c: Regenerated.\n\t* generated/maxval_r10.c: Regenerated.\n\t* generated/maxval_r16.c: Regenerated.\n\t* generated/maxval_r4.c: Regenerated.\n\t* generated/maxval_r8.c: Regenerated.\n\t* generated/minloc1_16_i16.c: Regenerated.\n\t* generated/minloc1_16_i1.c: Regenerated.\n\t* generated/minloc1_16_i2.c: Regenerated.\n\t* generated/minloc1_16_i4.c: Regenerated.\n\t* generated/minloc1_16_i8.c: Regenerated.\n\t* generated/minloc1_16_r10.c: Regenerated.\n\t* generated/minloc1_16_r16.c: Regenerated.\n\t* generated/minloc1_16_r4.c: Regenerated.\n\t* generated/minloc1_16_r8.c: Regenerated.\n\t* generated/minloc1_4_i16.c: Regenerated.\n\t* generated/minloc1_4_i1.c: Regenerated.\n\t* generated/minloc1_4_i2.c: Regenerated.\n\t* generated/minloc1_4_i4.c: Regenerated.\n\t* generated/minloc1_4_i8.c: Regenerated.\n\t* generated/minloc1_4_r10.c: Regenerated.\n\t* generated/minloc1_4_r16.c: Regenerated.\n\t* generated/minloc1_4_r4.c: Regenerated.\n\t* generated/minloc1_4_r8.c: Regenerated.\n\t* generated/minloc1_8_i16.c: Regenerated.\n\t* generated/minloc1_8_i1.c: Regenerated.\n\t* generated/minloc1_8_i2.c: Regenerated.\n\t* generated/minloc1_8_i4.c: Regenerated.\n\t* generated/minloc1_8_i8.c: Regenerated.\n\t* generated/minloc1_8_r10.c: Regenerated.\n\t* generated/minloc1_8_r16.c: Regenerated.\n\t* generated/minloc1_8_r4.c: Regenerated.\n\t* generated/minloc1_8_r8.c: Regenerated.\n\t* generated/minval_i16.c: Regenerated.\n\t* generated/minval_i1.c: Regenerated.\n\t* generated/minval_i2.c: Regenerated.\n\t* generated/minval_i4.c: Regenerated.\n\t* generated/minval_i8.c: Regenerated.\n\t* generated/minval_r10.c: Regenerated.\n\t* generated/minval_r16.c: Regenerated.\n\t* generated/minval_r4.c: Regenerated.\n\t* generated/minval_r8.c: Regenerated.\n\t* generated/norm2_r10.c: Regenerated.\n\t* generated/norm2_r16.c: Regenerated.\n\t* generated/norm2_r4.c: Regenerated.\n\t* generated/norm2_r8.c: Regenerated.\n\t* generated/parity_l16.c: Regenerated.\n\t* generated/parity_l1.c: Regenerated.\n\t* generated/parity_l2.c: Regenerated.\n\t* generated/parity_l4.c: Regenerated.\n\t* generated/parity_l8.c: Regenerated.\n\t* generated/product_c10.c: Regenerated.\n\t* generated/product_c16.c: Regenerated.\n\t* generated/product_c4.c: Regenerated.\n\t* generated/product_c8.c: Regenerated.\n\t* generated/product_i16.c: Regenerated.\n\t* generated/product_i1.c: Regenerated.\n\t* generated/product_i2.c: Regenerated.\n\t* generated/product_i4.c: Regenerated.\n\t* generated/product_i8.c: Regenerated.\n\t* generated/product_r10.c: Regenerated.\n\t* generated/product_r16.c: Regenerated.\n\t* generated/product_r4.c: Regenerated.\n\t* generated/product_r8.c: Regenerated.\n\t* generated/sum_c10.c: Regenerated.\n\t* generated/sum_c16.c: Regenerated.\n\t* generated/sum_c4.c: Regenerated.\n\t* generated/sum_c8.c: Regenerated.\n\t* generated/sum_i16.c: Regenerated.\n\t* generated/sum_i1.c: Regenerated.\n\t* generated/sum_i2.c: Regenerated.\n\t* generated/sum_i4.c: Regenerated.\n\t* generated/sum_i8.c: Regenerated.\n\t* generated/sum_r10.c: Regenerated.\n\t* generated/sum_r16.c: Regenerated.\n\t* generated/sum_r4.c: Regenerated.\n\t* generated/sum_r8.c: Regenerated.\n\n2017-07-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n\n\tPR fortran/81581\n\t* gfortran.dg/dim_sum_1.f90: New test case.\n\t* gfortran.dg/dim_sum_2.f90: New test case.\n\t* gfortran.dg/dim_sum_3.f90: New test case.\n\nFrom-SVN: r250735", "tree": {"sha": "783709854bf8b404d2eb4fa26cadb72c619966ea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/783709854bf8b404d2eb4fa26cadb72c619966ea"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/comments", "author": null, "committer": null, "parents": [{"sha": "57b1c5e9ab2d6e5f6d0896f690e5910280fff83f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57b1c5e9ab2d6e5f6d0896f690e5910280fff83f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57b1c5e9ab2d6e5f6d0896f690e5910280fff83f"}], "stats": {"total": 3520, "additions": 3170, "deletions": 350}, "files": [{"sha": "f7e647c1863d9e22fdf70aa081f6d0ed237838c4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -1,3 +1,10 @@\n+2017-07-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/81581\n+\t* gfortran.dg/dim_sum_1.f90: New test case.\n+\t* gfortran.dg/dim_sum_2.f90: New test case.\n+\t* gfortran.dg/dim_sum_3.f90: New test case.\n+\n 2017-07-31  Martin Liska  <mliska@suse.cz>\n \n \t* gcc.dg/builtin-unreachable-6.c: Update scanned patterns."}, {"sha": "b2fb94312d3f8ac065dad181e0634354e4284e37", "filename": "gcc/testsuite/gfortran.dg/dim_sum_1.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/gcc%2Ftestsuite%2Fgfortran.dg%2Fdim_sum_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/gcc%2Ftestsuite%2Fgfortran.dg%2Fdim_sum_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdim_sum_1.f90?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do  run }\n+! { dg-shouldfail \"Dim argument incorrect in SUM intrinsic: is 5, should be between 1 and 2\" }\n+\n+program summation\n+\n+  integer, parameter :: n1=5, n2=7\n+  integer, dimension(1:n1,1:n2) :: arr\n+  integer, dimension(1:n1) :: r2\n+  integer, dimension(1:n2) :: r1\n+  integer :: i,j\n+  character(len=80) :: c1, c2\n+  character(len=50) :: fmt = '(10I5)'\n+  do j=1,n2\n+     do i=1,n1\n+        arr(i,j) = i+j*10\n+     end do\n+  end do\n+  \n+  r1 = sum(arr,dim=1)\n+  write (unit=c2, fmt=fmt) r1\n+  call print_sum(1,c1)\n+  if (c1 /= c2) call abort\n+  r2 = sum(arr,dim=2)\n+  write (unit=c2, fmt=fmt) r2\n+  call print_sum(2,c1)\n+  if (c1 /= c2) call abort\n+  call print_sum(5,c1)\n+\n+contains\n+\n+  subroutine print_sum(d, c)\n+    integer, intent(in) :: d\n+    character(len=80), intent(out) :: c\n+    write (unit=c, fmt=fmt) sum(arr,dim=d)\n+   end subroutine\n+\n+end"}, {"sha": "6290444a81d10d0d78b0055cfd63f25b623f848f", "filename": "gcc/testsuite/gfortran.dg/dim_sum_2.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/gcc%2Ftestsuite%2Fgfortran.dg%2Fdim_sum_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/gcc%2Ftestsuite%2Fgfortran.dg%2Fdim_sum_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdim_sum_2.f90?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do  run }\n+! { dg-shouldfail \"Dim argument incorrect in SUM intrinsic: is 5, should be between 1 and 2\" }\n+\n+program summation\n+\n+  integer, parameter :: n1=5, n2=7\n+  integer, dimension(1:n1,1:n2) :: arr\n+  integer, dimension(1:n1) :: r2\n+  integer, dimension(1:n2) :: r1\n+  integer :: i,j\n+  character(len=80) :: c1, c2\n+  character(len=50) :: fmt = '(10I5)'\n+  do j=1,n2\n+     do i=1,n1\n+        arr(i,j) = i+j*10\n+     end do\n+  end do\n+  \n+  r1 = sum(arr,dim=1,mask=arr>23)\n+  write (unit=c2, fmt=fmt) r1\n+  call print_sum(1,c1)\n+  if (c1 /= c2) call abort\n+  r2 = sum(arr,dim=2,mask=arr>23)\n+  write (unit=c2, fmt=fmt) r2\n+  call print_sum(2,c1)\n+  if (c1 /= c2) call abort\n+  call print_sum(5,c1)\n+\n+contains\n+\n+  subroutine print_sum(d, c)\n+    integer, intent(in) :: d\n+    character(len=80), intent(out) :: c\n+    write (unit=c, fmt=fmt) sum(arr,dim=d,mask=arr>23)\n+   end subroutine\n+\n+end"}, {"sha": "2661b3700fdc6fc7607046b214f2a4a37fe08f19", "filename": "gcc/testsuite/gfortran.dg/dim_sum_3.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/gcc%2Ftestsuite%2Fgfortran.dg%2Fdim_sum_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/gcc%2Ftestsuite%2Fgfortran.dg%2Fdim_sum_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdim_sum_3.f90?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do  run }\n+! { dg-shouldfail \"Dim argument incorrect in SUM intrinsic: is 5, should be between 1 and 2\" }\n+\n+program summation\n+\n+  integer, parameter :: n1=5, n2=7\n+  integer, dimension(1:n1,1:n2) :: arr\n+  integer, dimension(1:n1) :: r2\n+  integer, dimension(1:n2) :: r1\n+  integer :: i,j\n+  character(len=80) :: c1, c2\n+  character(len=50) :: fmt = '(10I5)'\n+  do j=1,n2\n+     do i=1,n1\n+        arr(i,j) = i+j*10\n+     end do\n+  end do\n+  \n+  r1 = sum(arr,dim=1,mask=.true.)\n+  write (unit=c2, fmt=fmt) r1\n+  call print_sum(1,c1)\n+  if (c1 /= c2) call abort\n+  r2 = sum(arr,dim=2,mask=.true.)\n+  write (unit=c2, fmt=fmt) r2\n+  call print_sum(2,c1)\n+  if (c1 /= c2) call abort\n+  call print_sum(5,c1)\n+\n+contains\n+\n+  subroutine print_sum(d, c)\n+    integer, intent(in) :: d\n+    character(len=80), intent(out) :: c\n+    write (unit=c, fmt=fmt) sum(arr,dim=d,mask=.true.)\n+   end subroutine\n+\n+end"}, {"sha": "3b3cf7f86f952d6593a19dc6659694f31ac2740c", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -1,3 +1,134 @@\n+2017-07-31  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\tPR fortran/81581\n+\t* m4/ifuntion.m4 (name`'rtype_qual`_'atype_code): Perform check\n+\tfor dim.\n+\t(`m'name`'rtype_qual`_'atype_code): Likewise. Change type of rank\n+\tand tim to index_type.\n+\t(`s'name`'rtype_qual`_'atype_code): Perform check for dim.\n+\t* generated/iall_i16.c: Regenerated.\n+\t* generated/iall_i1.c: Regenerated.\n+\t* generated/iall_i2.c: Regenerated.\n+\t* generated/iall_i4.c: Regenerated.\n+\t* generated/iall_i8.c: Regenerated.\n+\t* generated/iany_i16.c: Regenerated.\n+\t* generated/iany_i1.c: Regenerated.\n+\t* generated/iany_i2.c: Regenerated.\n+\t* generated/iany_i4.c: Regenerated.\n+\t* generated/iany_i8.c: Regenerated.\n+\t* generated/iparity_i16.c: Regenerated.\n+\t* generated/iparity_i1.c: Regenerated.\n+\t* generated/iparity_i2.c: Regenerated.\n+\t* generated/iparity_i4.c: Regenerated.\n+\t* generated/iparity_i8.c: Regenerated.\n+\t* generated/maxloc1_16_i16.c: Regenerated.\n+\t* generated/maxloc1_16_i1.c: Regenerated.\n+\t* generated/maxloc1_16_i2.c: Regenerated.\n+\t* generated/maxloc1_16_i4.c: Regenerated.\n+\t* generated/maxloc1_16_i8.c: Regenerated.\n+\t* generated/maxloc1_16_r10.c: Regenerated.\n+\t* generated/maxloc1_16_r16.c: Regenerated.\n+\t* generated/maxloc1_16_r4.c: Regenerated.\n+\t* generated/maxloc1_16_r8.c: Regenerated.\n+\t* generated/maxloc1_4_i16.c: Regenerated.\n+\t* generated/maxloc1_4_i1.c: Regenerated.\n+\t* generated/maxloc1_4_i2.c: Regenerated.\n+\t* generated/maxloc1_4_i4.c: Regenerated.\n+\t* generated/maxloc1_4_i8.c: Regenerated.\n+\t* generated/maxloc1_4_r10.c: Regenerated.\n+\t* generated/maxloc1_4_r16.c: Regenerated.\n+\t* generated/maxloc1_4_r4.c: Regenerated.\n+\t* generated/maxloc1_4_r8.c: Regenerated.\n+\t* generated/maxloc1_8_i16.c: Regenerated.\n+\t* generated/maxloc1_8_i1.c: Regenerated.\n+\t* generated/maxloc1_8_i2.c: Regenerated.\n+\t* generated/maxloc1_8_i4.c: Regenerated.\n+\t* generated/maxloc1_8_i8.c: Regenerated.\n+\t* generated/maxloc1_8_r10.c: Regenerated.\n+\t* generated/maxloc1_8_r16.c: Regenerated.\n+\t* generated/maxloc1_8_r4.c: Regenerated.\n+\t* generated/maxloc1_8_r8.c: Regenerated.\n+\t* generated/maxval_i16.c: Regenerated.\n+\t* generated/maxval_i1.c: Regenerated.\n+\t* generated/maxval_i2.c: Regenerated.\n+\t* generated/maxval_i4.c: Regenerated.\n+\t* generated/maxval_i8.c: Regenerated.\n+\t* generated/maxval_r10.c: Regenerated.\n+\t* generated/maxval_r16.c: Regenerated.\n+\t* generated/maxval_r4.c: Regenerated.\n+\t* generated/maxval_r8.c: Regenerated.\n+\t* generated/minloc1_16_i16.c: Regenerated.\n+\t* generated/minloc1_16_i1.c: Regenerated.\n+\t* generated/minloc1_16_i2.c: Regenerated.\n+\t* generated/minloc1_16_i4.c: Regenerated.\n+\t* generated/minloc1_16_i8.c: Regenerated.\n+\t* generated/minloc1_16_r10.c: Regenerated.\n+\t* generated/minloc1_16_r16.c: Regenerated.\n+\t* generated/minloc1_16_r4.c: Regenerated.\n+\t* generated/minloc1_16_r8.c: Regenerated.\n+\t* generated/minloc1_4_i16.c: Regenerated.\n+\t* generated/minloc1_4_i1.c: Regenerated.\n+\t* generated/minloc1_4_i2.c: Regenerated.\n+\t* generated/minloc1_4_i4.c: Regenerated.\n+\t* generated/minloc1_4_i8.c: Regenerated.\n+\t* generated/minloc1_4_r10.c: Regenerated.\n+\t* generated/minloc1_4_r16.c: Regenerated.\n+\t* generated/minloc1_4_r4.c: Regenerated.\n+\t* generated/minloc1_4_r8.c: Regenerated.\n+\t* generated/minloc1_8_i16.c: Regenerated.\n+\t* generated/minloc1_8_i1.c: Regenerated.\n+\t* generated/minloc1_8_i2.c: Regenerated.\n+\t* generated/minloc1_8_i4.c: Regenerated.\n+\t* generated/minloc1_8_i8.c: Regenerated.\n+\t* generated/minloc1_8_r10.c: Regenerated.\n+\t* generated/minloc1_8_r16.c: Regenerated.\n+\t* generated/minloc1_8_r4.c: Regenerated.\n+\t* generated/minloc1_8_r8.c: Regenerated.\n+\t* generated/minval_i16.c: Regenerated.\n+\t* generated/minval_i1.c: Regenerated.\n+\t* generated/minval_i2.c: Regenerated.\n+\t* generated/minval_i4.c: Regenerated.\n+\t* generated/minval_i8.c: Regenerated.\n+\t* generated/minval_r10.c: Regenerated.\n+\t* generated/minval_r16.c: Regenerated.\n+\t* generated/minval_r4.c: Regenerated.\n+\t* generated/minval_r8.c: Regenerated.\n+\t* generated/norm2_r10.c: Regenerated.\n+\t* generated/norm2_r16.c: Regenerated.\n+\t* generated/norm2_r4.c: Regenerated.\n+\t* generated/norm2_r8.c: Regenerated.\n+\t* generated/parity_l16.c: Regenerated.\n+\t* generated/parity_l1.c: Regenerated.\n+\t* generated/parity_l2.c: Regenerated.\n+\t* generated/parity_l4.c: Regenerated.\n+\t* generated/parity_l8.c: Regenerated.\n+\t* generated/product_c10.c: Regenerated.\n+\t* generated/product_c16.c: Regenerated.\n+\t* generated/product_c4.c: Regenerated.\n+\t* generated/product_c8.c: Regenerated.\n+\t* generated/product_i16.c: Regenerated.\n+\t* generated/product_i1.c: Regenerated.\n+\t* generated/product_i2.c: Regenerated.\n+\t* generated/product_i4.c: Regenerated.\n+\t* generated/product_i8.c: Regenerated.\n+\t* generated/product_r10.c: Regenerated.\n+\t* generated/product_r16.c: Regenerated.\n+\t* generated/product_r4.c: Regenerated.\n+\t* generated/product_r8.c: Regenerated.\n+\t* generated/sum_c10.c: Regenerated.\n+\t* generated/sum_c16.c: Regenerated.\n+\t* generated/sum_c4.c: Regenerated.\n+\t* generated/sum_c8.c: Regenerated.\n+\t* generated/sum_i16.c: Regenerated.\n+\t* generated/sum_i1.c: Regenerated.\n+\t* generated/sum_i2.c: Regenerated.\n+\t* generated/sum_i4.c: Regenerated.\n+\t* generated/sum_i8.c: Regenerated.\n+\t* generated/sum_r10.c: Regenerated.\n+\t* generated/sum_r16.c: Regenerated.\n+\t* generated/sum_r4.c: Regenerated.\n+\t* generated/sum_r8.c: Regenerated.\n+\n 2017-07-24  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/80365"}, {"sha": "3453fd20c0f548cb36c3116be5a258c5f10b6133", "filename": "libgfortran/generated/iall_i1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiall_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiall_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iall_i1 (gfc_array_i1 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miall_i1 (gfc_array_i1 * const restrict retarray,\n   GFC_INTEGER_1 * restrict dest;\n   const GFC_INTEGER_1 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miall_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siall_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "9f6747aa99db79aa5d480f6848b78f835cf5276d", "filename": "libgfortran/generated/iall_i16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiall_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiall_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iall_i16 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miall_i16 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miall_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siall_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "5ac86ab9cea10bc4387543014f7e48b870111cbd", "filename": "libgfortran/generated/iall_i2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiall_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiall_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iall_i2 (gfc_array_i2 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miall_i2 (gfc_array_i2 * const restrict retarray,\n   GFC_INTEGER_2 * restrict dest;\n   const GFC_INTEGER_2 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miall_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siall_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "0d3ba8aebca99a931c8fae86c9c677dfaf0f11d9", "filename": "libgfortran/generated/iall_i4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiall_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiall_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iall_i4 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miall_i4 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miall_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siall_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "d3424a07df7d20b8c024f223fac6aec87fc68dc2", "filename": "libgfortran/generated/iall_i8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiall_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiall_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiall_i8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iall_i8 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miall_i8 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miall_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siall_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IALL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "1009c1803e27d07e9fa711c08a6c695b52b438d2", "filename": "libgfortran/generated/iany_i1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiany_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiany_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iany_i1 (gfc_array_i1 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miany_i1 (gfc_array_i1 * const restrict retarray,\n   GFC_INTEGER_1 * restrict dest;\n   const GFC_INTEGER_1 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miany_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siany_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "6910040aa0244824b90e1eb3838d9cf09380d3fc", "filename": "libgfortran/generated/iany_i16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiany_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiany_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iany_i16 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miany_i16 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miany_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siany_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "09d8cc4a5a5e82c0e2494c1ae9051142f8e05ff4", "filename": "libgfortran/generated/iany_i2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiany_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiany_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iany_i2 (gfc_array_i2 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miany_i2 (gfc_array_i2 * const restrict retarray,\n   GFC_INTEGER_2 * restrict dest;\n   const GFC_INTEGER_2 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miany_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siany_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "4d18e7918356cc4363c0c86a7f3ffa55df2c51a7", "filename": "libgfortran/generated/iany_i4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiany_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiany_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iany_i4 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miany_i4 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miany_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siany_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "e857424d7509e7ff0c8e6f69d60f44239d312c32", "filename": "libgfortran/generated/iany_i8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiany_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiany_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiany_i8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iany_i8 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miany_i8 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miany_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siany_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IANY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "ff5fbeb496b1b075df7d689e229dac3027f7c19f", "filename": "libgfortran/generated/iparity_i1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiparity_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiparity_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iparity_i1 (gfc_array_i1 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miparity_i1 (gfc_array_i1 * const restrict retarray,\n   GFC_INTEGER_1 * restrict dest;\n   const GFC_INTEGER_1 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miparity_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siparity_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "fcd7bef68a19966317d234f111defa07b33d8cad", "filename": "libgfortran/generated/iparity_i16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiparity_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiparity_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iparity_i16 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miparity_i16 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miparity_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siparity_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "9aa34e07780afd584e1bbec005f600c5e36caaac", "filename": "libgfortran/generated/iparity_i2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiparity_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiparity_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iparity_i2 (gfc_array_i2 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miparity_i2 (gfc_array_i2 * const restrict retarray,\n   GFC_INTEGER_2 * restrict dest;\n   const GFC_INTEGER_2 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miparity_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siparity_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "71835df9f3e144265a77d54d7c4e5d975d79796b", "filename": "libgfortran/generated/iparity_i4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiparity_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiparity_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iparity_i4 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miparity_i4 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miparity_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siparity_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "e04360c0f54df22013846ed2b9d7cc1474a7e8cc", "filename": "libgfortran/generated/iparity_i8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiparity_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fiparity_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fiparity_i8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ iparity_i8 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ miparity_i8 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ miparity_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ siparity_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in IPARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "f6bab618c7a9f76a0ef4b4e6e203fa5cb5874898", "filename": "libgfortran/generated/maxloc1_16_i1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_1 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "b3b8b36826fa211d04accd416165f7a526dfc58e", "filename": "libgfortran/generated/maxloc1_16_i16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "fb38b2b43aaa72193345d31354a2abc6d2bca8d6", "filename": "libgfortran/generated/maxloc1_16_i2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_2 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "d17f4eb5d2a32f8e35d94a45ac3dd9e61af5e07f", "filename": "libgfortran/generated/maxloc1_16_i4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "f0bd1ace0f3e5e9a303c79cf6e69ba24c1bb0224", "filename": "libgfortran/generated/maxloc1_16_i8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_i8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "db8ff10eb2f53e57acb2c6279692eb66b40680fe", "filename": "libgfortran/generated/maxloc1_16_r10.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r10.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_REAL_10 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "1f48631547d7d2255e94a782b37324f704697827", "filename": "libgfortran/generated/maxloc1_16_r16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_REAL_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "c444f6b20c2aa7f1e9c9973e6b336be1225361c2", "filename": "libgfortran/generated/maxloc1_16_r4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_REAL_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "33205ff21a063e8a9d27066e9fb7cc771592fd4d", "filename": "libgfortran/generated/maxloc1_16_r8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_16_r8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_REAL_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "6e466e68fa10c58ab21ebe4a24747462fdd070db", "filename": "libgfortran/generated/maxloc1_4_i1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_1 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "dfff85b1151a0f65f59830c26fa2c198cd6f68de", "filename": "libgfortran/generated/maxloc1_4_i16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "1006c0046f1fd3ce9e5fb42fbad8b4b081a66ccf", "filename": "libgfortran/generated/maxloc1_4_i2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_2 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "4186654e16942764005d139551957dd34a4e2c05", "filename": "libgfortran/generated/maxloc1_4_i4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "01cfa7336b8407da7ca5752fc4edd8e2d6eff5c7", "filename": "libgfortran/generated/maxloc1_4_i8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_i8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "2992e2bd99a7fe39d3fbe7cab384adbec30fee2a", "filename": "libgfortran/generated/maxloc1_4_r10.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r10.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_REAL_10 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "325211a2ccfcad237989c2e91cdc703943b86ac6", "filename": "libgfortran/generated/maxloc1_4_r16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_REAL_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "9f48540eca507f82c6f9a94047b6efdd188722fd", "filename": "libgfortran/generated/maxloc1_4_r4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_REAL_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "f5f4145a3c41451a512c6ad8e313eac15eb31600", "filename": "libgfortran/generated/maxloc1_4_r8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_4_r8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_REAL_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "297a19b5775963168d0ecdcbfc6a1b55db7e6473", "filename": "libgfortran/generated/maxloc1_8_i1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_1 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "773e3df163646ebd33d4a2c5444069cdaba47001", "filename": "libgfortran/generated/maxloc1_8_i16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "204d01044cd1d21eb1423d1a0645bb8d5872d666", "filename": "libgfortran/generated/maxloc1_8_i2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_2 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "7c73244d39d1c5d7d4b839981accf212c3f32895", "filename": "libgfortran/generated/maxloc1_8_i4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "a8965871a506ab4fdb5b79e356a6f4fa65a4ec34", "filename": "libgfortran/generated/maxloc1_8_i8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_i8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "4bc66cdd1211f17bf635f8cdc8f9677bda440191", "filename": "libgfortran/generated/maxloc1_8_r10.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r10.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_REAL_10 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "959e3f98554dfe2a16848cbf0b74d1eb23c2dcf5", "filename": "libgfortran/generated/maxloc1_8_r16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_REAL_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "06849640a7712a49d84b34dbd6aaddb8540cd367", "filename": "libgfortran/generated/maxloc1_8_r4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_REAL_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "ae40ff65ff92c35e91d4a58e8dd856cd38a66c2b", "filename": "libgfortran/generated/maxloc1_8_r8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxloc1_8_r8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mmaxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_REAL_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mmaxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ smaxloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "fe4733518e65a01feb38bd10cb0009fe62d92245", "filename": "libgfortran/generated/maxval_i1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxval_i1 (gfc_array_i1 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mmaxval_i1 (gfc_array_i1 * const restrict retarray,\n   GFC_INTEGER_1 * restrict dest;\n   const GFC_INTEGER_1 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mmaxval_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ smaxval_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "21174935b25ce8d4ee015cdeace78a35791dae23", "filename": "libgfortran/generated/maxval_i16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxval_i16 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mmaxval_i16 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mmaxval_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ smaxval_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "9a5a6b876a48180aae0c4cbbdc162c912eaf3c0c", "filename": "libgfortran/generated/maxval_i2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxval_i2 (gfc_array_i2 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mmaxval_i2 (gfc_array_i2 * const restrict retarray,\n   GFC_INTEGER_2 * restrict dest;\n   const GFC_INTEGER_2 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mmaxval_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ smaxval_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "5451a4e565bf6db6b1a1d2a1d4ad17d110337b8b", "filename": "libgfortran/generated/maxval_i4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxval_i4 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mmaxval_i4 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mmaxval_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ smaxval_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "93d81249d7bcb710ae42aa64f3c87a09bf9bd87e", "filename": "libgfortran/generated/maxval_i8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_i8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxval_i8 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mmaxval_i8 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mmaxval_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ smaxval_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "d3b10d123c81067cb9bed420ac7d8eb811452b95", "filename": "libgfortran/generated/maxval_r10.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r10.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxval_r10 (gfc_array_r10 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mmaxval_r10 (gfc_array_r10 * const restrict retarray,\n   GFC_REAL_10 * restrict dest;\n   const GFC_REAL_10 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mmaxval_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ smaxval_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "32e935a2d09b990f7d4a9ea39eb8d90d1abba886", "filename": "libgfortran/generated/maxval_r16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxval_r16 (gfc_array_r16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mmaxval_r16 (gfc_array_r16 * const restrict retarray,\n   GFC_REAL_16 * restrict dest;\n   const GFC_REAL_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mmaxval_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ smaxval_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "92627190558729135d623e971d893b0fa3e6b3d8", "filename": "libgfortran/generated/maxval_r4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxval_r4 (gfc_array_r4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mmaxval_r4 (gfc_array_r4 * const restrict retarray,\n   GFC_REAL_4 * restrict dest;\n   const GFC_REAL_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mmaxval_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ smaxval_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "b12f34dd68abb0363e048569e4170cace22db2ec", "filename": "libgfortran/generated/maxval_r8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fmaxval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fmaxval_r8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ maxval_r8 (gfc_array_r8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mmaxval_r8 (gfc_array_r8 * const restrict retarray,\n   GFC_REAL_8 * restrict dest;\n   const GFC_REAL_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mmaxval_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ smaxval_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MAXVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "b27e146c45f1fb2d98978ee977afb30cc1e97a12", "filename": "libgfortran/generated/minloc1_16_i1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_1 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_16_i1 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "be0cd693f148c161fcb2e1ecc2e7ee75e8e613ad", "filename": "libgfortran/generated/minloc1_16_i16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_16_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "4b9dcac503f94f79f929a8621977bcebcfa51aef", "filename": "libgfortran/generated/minloc1_16_i2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_2 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_16_i2 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "b305ac8ad473465831cc72e0d0cdc677875bf618", "filename": "libgfortran/generated/minloc1_16_i4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_16_i4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "6a60af9f845478038eee4807d0d713ba55a75eb7", "filename": "libgfortran/generated/minloc1_16_i8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_i8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_16_i8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "bb5546f45c8406cfd151bd606b109fefb7526bfe", "filename": "libgfortran/generated/minloc1_16_r10.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r10.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_REAL_10 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_16_r10 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "636195e80ed4aee20aff0e9a78996dc63034a662", "filename": "libgfortran/generated/minloc1_16_r16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_REAL_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_16_r16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "89f453fa0fa3b001c6c6637d93bb2e9a5d7d4d1f", "filename": "libgfortran/generated/minloc1_16_r4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_REAL_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_16_r4 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "42ca7da88b2fa666d7093099ae97674a911b34e5", "filename": "libgfortran/generated/minloc1_16_r8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_16_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_16_r8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_REAL_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_16_r8 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "3ff1eb1610966dc37ec48e3a2e54d65586b7b9de", "filename": "libgfortran/generated/minloc1_4_i1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_1 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_4_i1 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "10f07a136e1e446db2e0887db40a2ee6899c8286", "filename": "libgfortran/generated/minloc1_4_i16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_4_i16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "344202db39e7f39fc9aeb8cba5c56140dd2c4424", "filename": "libgfortran/generated/minloc1_4_i2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_2 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_4_i2 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "ac9d44c8ecfebad5996d80bfbeed150d2b7e9b9a", "filename": "libgfortran/generated/minloc1_4_i4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_4_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "11d212062f96cb6e733147268146f088903215a5", "filename": "libgfortran/generated/minloc1_4_i8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_i8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_4_i8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "3365e7ada6a813d0f4a72f6ff8239f055574f74b", "filename": "libgfortran/generated/minloc1_4_r10.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r10.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_REAL_10 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_4_r10 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "3b5989cce8f6676db474c05e05d7260635a4815e", "filename": "libgfortran/generated/minloc1_4_r16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_REAL_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_4_r16 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "d79f905a659da3771529ac2146374a827684d047", "filename": "libgfortran/generated/minloc1_4_r4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_REAL_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_4_r4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "3175f33149420e0f3d8868580c44f97a4dc12739", "filename": "libgfortran/generated/minloc1_4_r8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_4_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_4_r8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_REAL_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_4_r8 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "bfd935444e6a86e7bcbfc83613306ed9939d5ed3", "filename": "libgfortran/generated/minloc1_8_i1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_1 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_8_i1 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "1fc912928f32809b0298129be464283ad80e4876", "filename": "libgfortran/generated/minloc1_8_i16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_8_i16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "5cf6eed7e6982c45e25f581ea7cc2031b57a2a62", "filename": "libgfortran/generated/minloc1_8_i2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_2 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_8_i2 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "8d7a8f3f8ec96e5ebce19d3b28ff4d35c21d27ef", "filename": "libgfortran/generated/minloc1_8_i4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_8_i4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "0035263405286570b5e5175b0180664df358df5e", "filename": "libgfortran/generated/minloc1_8_i8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_i8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_8_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "918c0b17388e79923134e50e15d164ba6be04123", "filename": "libgfortran/generated/minloc1_8_r10.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r10.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_REAL_10 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_8_r10 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "c5b35955ac85ccc07cfa4ff099c7cbbb751e5b52", "filename": "libgfortran/generated/minloc1_8_r16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_REAL_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_8_r16 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "2112352aa591721cd53d467eb0be9d5e94ef664b", "filename": "libgfortran/generated/minloc1_8_r4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_REAL_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_8_r4 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "d3d303ed082695ea506ac27239672791b4193ebb", "filename": "libgfortran/generated/minloc1_8_r8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminloc1_8_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminloc1_8_r8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -224,8 +231,8 @@ mminloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_REAL_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -235,6 +242,14 @@ mminloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -445,6 +460,13 @@ sminloc1_8_r8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINLOC intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "9c899bab4f612657ee67cab5040d856c45af25bf", "filename": "libgfortran/generated/minval_i1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minval_i1 (gfc_array_i1 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mminval_i1 (gfc_array_i1 * const restrict retarray,\n   GFC_INTEGER_1 * restrict dest;\n   const GFC_INTEGER_1 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mminval_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ sminval_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "8b427f92004532668ae7fd690d95028facece572", "filename": "libgfortran/generated/minval_i16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minval_i16 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mminval_i16 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mminval_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ sminval_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "79f3c9b308691aab39620f07f219ed03982fe377", "filename": "libgfortran/generated/minval_i2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minval_i2 (gfc_array_i2 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mminval_i2 (gfc_array_i2 * const restrict retarray,\n   GFC_INTEGER_2 * restrict dest;\n   const GFC_INTEGER_2 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mminval_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ sminval_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "3b1830668d1f78b09e3ad8df616716c5c29daf7a", "filename": "libgfortran/generated/minval_i4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minval_i4 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mminval_i4 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mminval_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ sminval_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "5d415f3a7f7c6656849a5c9805a61e57eba82904", "filename": "libgfortran/generated/minval_i8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_i8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minval_i8 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mminval_i8 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mminval_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ sminval_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "c86d8c6c7bbf23e27b351f198ec7047bb88cb8f5", "filename": "libgfortran/generated/minval_r10.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r10.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minval_r10 (gfc_array_r10 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mminval_r10 (gfc_array_r10 * const restrict retarray,\n   GFC_REAL_10 * restrict dest;\n   const GFC_REAL_10 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mminval_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ sminval_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "421026d7bd448aeb9263263b018b8a7e8f05d6b3", "filename": "libgfortran/generated/minval_r16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minval_r16 (gfc_array_r16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mminval_r16 (gfc_array_r16 * const restrict retarray,\n   GFC_REAL_16 * restrict dest;\n   const GFC_REAL_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mminval_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ sminval_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "ff3d919a69b3ef255882e022aeb4c12d924ae142", "filename": "libgfortran/generated/minval_r4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minval_r4 (gfc_array_r4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mminval_r4 (gfc_array_r4 * const restrict retarray,\n   GFC_REAL_4 * restrict dest;\n   const GFC_REAL_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mminval_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ sminval_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "0970c31ba9a0ca44ebec8b68c341e283e7bc5279", "filename": "libgfortran/generated/minval_r8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fminval_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fminval_r8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ minval_r8 (gfc_array_r8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -217,8 +224,8 @@ mminval_r8 (gfc_array_r8 * const restrict retarray,\n   GFC_REAL_8 * restrict dest;\n   const GFC_REAL_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -228,6 +235,14 @@ mminval_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -433,6 +448,13 @@ sminval_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in MINVAL intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "4f6eceefe24363d4ef5f846fd92e3bd0fd2be2de", "filename": "libgfortran/generated/norm2_r10.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fnorm2_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fnorm2_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r10.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -55,8 +55,15 @@ norm2_r10 (gfc_array_r10 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in NORM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)"}, {"sha": "596195fb85b0a190f89a16b71e50372ae1d54226", "filename": "libgfortran/generated/norm2_r16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fnorm2_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fnorm2_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -59,8 +59,15 @@ norm2_r16 (gfc_array_r16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in NORM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)"}, {"sha": "4f61ea33b016789d93f9dc7872d7b60955f43d82", "filename": "libgfortran/generated/norm2_r4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fnorm2_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fnorm2_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -55,8 +55,15 @@ norm2_r4 (gfc_array_r4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in NORM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)"}, {"sha": "d325236b50b2a82cb9e6debe4a2dbd1aacca3c2e", "filename": "libgfortran/generated/norm2_r8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fnorm2_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fnorm2_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fnorm2_r8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -55,8 +55,15 @@ norm2_r8 (gfc_array_r8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in NORM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)"}, {"sha": "34cac760a3d464807050e2eb9a9693fb421829a5", "filename": "libgfortran/generated/parity_l1.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fparity_l1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fparity_l1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ parity_l1 (gfc_array_l1 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)"}, {"sha": "8aae3038e7b16c9ad89771105f4361ca6e47f3cf", "filename": "libgfortran/generated/parity_l16.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fparity_l16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fparity_l16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ parity_l16 (gfc_array_l16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)"}, {"sha": "0d87c525028d57f4ae4d3aacf77d89e27850c375", "filename": "libgfortran/generated/parity_l2.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fparity_l2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fparity_l2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ parity_l2 (gfc_array_l2 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)"}, {"sha": "5c524ad13a81f1251df6bdd812e30250b4a475a6", "filename": "libgfortran/generated/parity_l4.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fparity_l4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fparity_l4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ parity_l4 (gfc_array_l4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)"}, {"sha": "d655ebd083798ed2e460ffa6a9b2ad36962a3956", "filename": "libgfortran/generated/parity_l8.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fparity_l8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fparity_l8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fparity_l8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ parity_l8 (gfc_array_l8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PARITY intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)"}, {"sha": "b84870cab328583f4063cd65d573276f55d97996", "filename": "libgfortran/generated/product_c10.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c10.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ product_c10 (gfc_array_c10 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ mproduct_c10 (gfc_array_c10 * const restrict retarray,\n   GFC_COMPLEX_10 * restrict dest;\n   const GFC_COMPLEX_10 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ mproduct_c10 (gfc_array_c10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ sproduct_c10 (gfc_array_c10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "e1618c5a6454c42e804ccae4b238fe78bd8b86d8", "filename": "libgfortran/generated/product_c16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ product_c16 (gfc_array_c16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ mproduct_c16 (gfc_array_c16 * const restrict retarray,\n   GFC_COMPLEX_16 * restrict dest;\n   const GFC_COMPLEX_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ mproduct_c16 (gfc_array_c16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ sproduct_c16 (gfc_array_c16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "679670c938988247cbda052aac82fcea71cc5fc1", "filename": "libgfortran/generated/product_c4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ product_c4 (gfc_array_c4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ mproduct_c4 (gfc_array_c4 * const restrict retarray,\n   GFC_COMPLEX_4 * restrict dest;\n   const GFC_COMPLEX_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ mproduct_c4 (gfc_array_c4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ sproduct_c4 (gfc_array_c4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "1f4dd10796bccf6046a82ccfc4ac18f77c266d19", "filename": "libgfortran/generated/product_c8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_c8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ product_c8 (gfc_array_c8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ mproduct_c8 (gfc_array_c8 * const restrict retarray,\n   GFC_COMPLEX_8 * restrict dest;\n   const GFC_COMPLEX_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ mproduct_c8 (gfc_array_c8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ sproduct_c8 (gfc_array_c8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "43e20b8dcb1aa073967f4f6826a6867a9f085f93", "filename": "libgfortran/generated/product_i1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ product_i1 (gfc_array_i1 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ mproduct_i1 (gfc_array_i1 * const restrict retarray,\n   GFC_INTEGER_1 * restrict dest;\n   const GFC_INTEGER_1 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ mproduct_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ sproduct_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "d786c950686a87d30251fee4ea8838136dab382c", "filename": "libgfortran/generated/product_i16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ product_i16 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ mproduct_i16 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ mproduct_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ sproduct_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "bdb875598ff1bf8dd592af43686eb0cc626f8398", "filename": "libgfortran/generated/product_i2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ product_i2 (gfc_array_i2 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ mproduct_i2 (gfc_array_i2 * const restrict retarray,\n   GFC_INTEGER_2 * restrict dest;\n   const GFC_INTEGER_2 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ mproduct_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ sproduct_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "1328055736a65a9910974e12f40126fac1fff1c6", "filename": "libgfortran/generated/product_i4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ product_i4 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ mproduct_i4 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ mproduct_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ sproduct_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "5adf2de1453972901f394b3aad6a043f6ce0236a", "filename": "libgfortran/generated/product_i8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_i8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ product_i8 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ mproduct_i8 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ mproduct_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ sproduct_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "404b1a5bf41620c47187e48a0e1e68fb45b32538", "filename": "libgfortran/generated/product_r10.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r10.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ product_r10 (gfc_array_r10 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ mproduct_r10 (gfc_array_r10 * const restrict retarray,\n   GFC_REAL_10 * restrict dest;\n   const GFC_REAL_10 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ mproduct_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ sproduct_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "592a9b9bf505b0bc234b314cf4c6cf02b0ab0bb2", "filename": "libgfortran/generated/product_r16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ product_r16 (gfc_array_r16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ mproduct_r16 (gfc_array_r16 * const restrict retarray,\n   GFC_REAL_16 * restrict dest;\n   const GFC_REAL_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ mproduct_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ sproduct_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "882c0917f9b58ce8f69b496f6244d907d8b6a2ab", "filename": "libgfortran/generated/product_r4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ product_r4 (gfc_array_r4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ mproduct_r4 (gfc_array_r4 * const restrict retarray,\n   GFC_REAL_4 * restrict dest;\n   const GFC_REAL_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ mproduct_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ sproduct_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "cc1454963a1692b04cea9a0a7405a2915914ed9d", "filename": "libgfortran/generated/product_r8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fproduct_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fproduct_r8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ product_r8 (gfc_array_r8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ mproduct_r8 (gfc_array_r8 * const restrict retarray,\n   GFC_REAL_8 * restrict dest;\n   const GFC_REAL_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ mproduct_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ sproduct_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in PRODUCT intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "d3e8550e57db9c05cfb70788df3e94b706fd33d7", "filename": "libgfortran/generated/sum_c10.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_c10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_c10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c10.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ sum_c10 (gfc_array_c10 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ msum_c10 (gfc_array_c10 * const restrict retarray,\n   GFC_COMPLEX_10 * restrict dest;\n   const GFC_COMPLEX_10 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ msum_c10 (gfc_array_c10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ ssum_c10 (gfc_array_c10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "280c2ff89c6776b53ce45bc717fd3b6dc1f6b323", "filename": "libgfortran/generated/sum_c16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_c16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_c16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ sum_c16 (gfc_array_c16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ msum_c16 (gfc_array_c16 * const restrict retarray,\n   GFC_COMPLEX_16 * restrict dest;\n   const GFC_COMPLEX_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ msum_c16 (gfc_array_c16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ ssum_c16 (gfc_array_c16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "0e3a74da85197ce4d36a52e5bfa0ef90d37f170d", "filename": "libgfortran/generated/sum_c4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_c4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_c4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ sum_c4 (gfc_array_c4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ msum_c4 (gfc_array_c4 * const restrict retarray,\n   GFC_COMPLEX_4 * restrict dest;\n   const GFC_COMPLEX_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ msum_c4 (gfc_array_c4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ ssum_c4 (gfc_array_c4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "f04f374ee120e0cfb93f7cf550930777c830a532", "filename": "libgfortran/generated/sum_c8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_c8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_c8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_c8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ sum_c8 (gfc_array_c8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ msum_c8 (gfc_array_c8 * const restrict retarray,\n   GFC_COMPLEX_8 * restrict dest;\n   const GFC_COMPLEX_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ msum_c8 (gfc_array_c8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ ssum_c8 (gfc_array_c8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "b7e8a9813198aa749cdf08fa5185c1b2c1465c78", "filename": "libgfortran/generated/sum_i1.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_i1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_i1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i1.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ sum_i1 (gfc_array_i1 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ msum_i1 (gfc_array_i1 * const restrict retarray,\n   GFC_INTEGER_1 * restrict dest;\n   const GFC_INTEGER_1 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ msum_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ ssum_i1 (gfc_array_i1 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "489b9bbcdf78dd8cb355c1f7d4c10069ea5e54cb", "filename": "libgfortran/generated/sum_i16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_i16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_i16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ sum_i16 (gfc_array_i16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ msum_i16 (gfc_array_i16 * const restrict retarray,\n   GFC_INTEGER_16 * restrict dest;\n   const GFC_INTEGER_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ msum_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ ssum_i16 (gfc_array_i16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "40304c846cea2ebb35c7c2e81ef9673615861677", "filename": "libgfortran/generated/sum_i2.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_i2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_i2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i2.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ sum_i2 (gfc_array_i2 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ msum_i2 (gfc_array_i2 * const restrict retarray,\n   GFC_INTEGER_2 * restrict dest;\n   const GFC_INTEGER_2 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ msum_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ ssum_i2 (gfc_array_i2 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "736ccd177105280caa16912687271716a1706225", "filename": "libgfortran/generated/sum_i4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_i4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_i4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ sum_i4 (gfc_array_i4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ msum_i4 (gfc_array_i4 * const restrict retarray,\n   GFC_INTEGER_4 * restrict dest;\n   const GFC_INTEGER_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ msum_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ ssum_i4 (gfc_array_i4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "0eb9e3f92e02f16834037792c64e4b0d3adbe749", "filename": "libgfortran/generated/sum_i8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_i8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_i8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_i8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ sum_i8 (gfc_array_i8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ msum_i8 (gfc_array_i8 * const restrict retarray,\n   GFC_INTEGER_8 * restrict dest;\n   const GFC_INTEGER_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ msum_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ ssum_i8 (gfc_array_i8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "e37dd26a0294b46dd8902e04bc2cb87d3b7d2107", "filename": "libgfortran/generated/sum_r10.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_r10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_r10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r10.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ sum_r10 (gfc_array_r10 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ msum_r10 (gfc_array_r10 * const restrict retarray,\n   GFC_REAL_10 * restrict dest;\n   const GFC_REAL_10 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ msum_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ ssum_r10 (gfc_array_r10 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "b3058035cc9628531d30702a9fe0f35c2b28b9fc", "filename": "libgfortran/generated/sum_r16.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_r16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_r16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r16.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ sum_r16 (gfc_array_r16 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ msum_r16 (gfc_array_r16 * const restrict retarray,\n   GFC_REAL_16 * restrict dest;\n   const GFC_REAL_16 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ msum_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ ssum_r16 (gfc_array_r16 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "c53dc7e198a79778a9409a309b68e045d4b55fb2", "filename": "libgfortran/generated/sum_r4.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_r4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_r4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r4.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ sum_r4 (gfc_array_r4 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ msum_r4 (gfc_array_r4 * const restrict retarray,\n   GFC_REAL_4 * restrict dest;\n   const GFC_REAL_4 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ msum_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ ssum_r4 (gfc_array_r4 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "4657def97e4197fb6cfac081a6be10910e3e40f1", "filename": "libgfortran/generated/sum_r8.c", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_r8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fgenerated%2Fsum_r8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fgenerated%2Fsum_r8.c?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -52,8 +52,15 @@ sum_r8 (gfc_array_r8 * const restrict retarray,\n   int continue_loop;\n \n   /* Make dim zero based to avoid confusion.  */\n-  dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n+  dim = (*pdim) - 1;\n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n \n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n@@ -203,8 +210,8 @@ msum_r8 (gfc_array_r8 * const restrict retarray,\n   GFC_REAL_8 * restrict dest;\n   const GFC_REAL_8 * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -214,6 +221,14 @@ msum_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -391,6 +406,13 @@ ssum_r8 (gfc_array_r8 * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in SUM intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}, {"sha": "91cfd28d5d13da696f2564609839e0846489b01e", "filename": "libgfortran/m4/ifunction.m4", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fm4%2Fifunction.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5/libgfortran%2Fm4%2Fifunction.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fm4%2Fifunction.m4?ref=cfdf6ff61b8107d124f41c426d65acf8b5ad8cf5", "patch": "@@ -45,6 +45,13 @@ name`'rtype_qual`_'atype_code (rtype * const restrict retarray,\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in u_name intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len < 0)\n     len = 0;\n@@ -193,8 +200,8 @@ void\n   rtype_name * restrict dest;\n   const atype_name * restrict base;\n   const GFC_LOGICAL_1 * restrict mbase;\n-  int rank;\n-  int dim;\n+  index_type rank;\n+  index_type dim;\n   index_type n;\n   index_type len;\n   index_type delta;\n@@ -204,6 +211,14 @@ void\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+\n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in u_name intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   len = GFC_DESCRIPTOR_EXTENT(array,dim);\n   if (len <= 0)\n     return;\n@@ -380,6 +395,13 @@ void\n   dim = (*pdim) - 1;\n   rank = GFC_DESCRIPTOR_RANK (array) - 1;\n \n+  if (unlikely (dim < 0 || dim > rank))\n+    {\n+      runtime_error (\"Dim argument incorrect in u_name intrinsic: \"\n+ \t\t     \"is %ld, should be between 1 and %ld\",\n+\t\t     (long int) dim + 1, (long int) rank + 1);\n+    }\n+\n   for (n = 0; n < dim; n++)\n     {\n       extent[n] = GFC_DESCRIPTOR_EXTENT(array,n);"}]}