{"sha": "7da26277f801ce48caa91d0df25ebc5136f6cc63", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RhMjYyNzdmODAxY2U0OGNhYTkxZDBkZjI1ZWJjNTEzNmY2Y2M2Mw==", "commit": {"author": {"name": "Trevor Saunders", "email": "tbsaunde+gcc@tbsaunde.org", "date": "2015-05-09T04:17:12Z"}, "committer": {"name": "Trevor Saunders", "email": "tbsaunde@gcc.gnu.org", "date": "2015-05-09T04:17:12Z"}, "message": "more rtx_insn * in recog.c\n\ngcc/ChangeLog:\n\n2015-05-08  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n\n\t* ira.c (decrease_live_ranges_number): Changetype of local\n\tvariable to rtx_insn *.\n\t* recog.c: Change argument types to rtx_insn *.\n\t* recog.h: Adjust.\n\nFrom-SVN: r222952", "tree": {"sha": "184939629d1819c3a9e2ff7fb29d1f84b42f00d6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/184939629d1819c3a9e2ff7fb29d1f84b42f00d6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7da26277f801ce48caa91d0df25ebc5136f6cc63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da26277f801ce48caa91d0df25ebc5136f6cc63", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7da26277f801ce48caa91d0df25ebc5136f6cc63", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7da26277f801ce48caa91d0df25ebc5136f6cc63/comments", "author": null, "committer": null, "parents": [{"sha": "1d415e65efa150795c3b712e136bd8d5334cb4cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d415e65efa150795c3b712e136bd8d5334cb4cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d415e65efa150795c3b712e136bd8d5334cb4cd"}], "stats": {"total": 59, "additions": 33, "deletions": 26}, "files": [{"sha": "e08209e98465e15bf95570e6e5e514f0a8675cdf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da26277f801ce48caa91d0df25ebc5136f6cc63/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da26277f801ce48caa91d0df25ebc5136f6cc63/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7da26277f801ce48caa91d0df25ebc5136f6cc63", "patch": "@@ -1,3 +1,10 @@\n+2015-05-08  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n+\n+\t* ira.c (decrease_live_ranges_number): Changetype of local\n+\tvariable to rtx_insn *.\n+\t* recog.c: Change argument types to rtx_insn *.\n+\t* recog.h: Adjust.\n+\n 2015-05-08  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* reorg.c: Change argument types to rtx_insn *."}, {"sha": "75ea6e02abd9b680ab13da66181f8a3f9013a9ec", "filename": "gcc/ira.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da26277f801ce48caa91d0df25ebc5136f6cc63/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da26277f801ce48caa91d0df25ebc5136f6cc63/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=7da26277f801ce48caa91d0df25ebc5136f6cc63", "patch": "@@ -2045,8 +2045,8 @@ decrease_live_ranges_number (void)\n {\n   basic_block bb;\n   rtx_insn *insn;\n-  rtx set, src, dest, dest_death, q, note;\n-  rtx_insn *p;\n+  rtx set, src, dest, dest_death, note;\n+  rtx_insn *p, *q;\n   int sregno, dregno;\n \n   if (! flag_expensive_optimizations)"}, {"sha": "d933364f57b8e786a7ca9f82569c278e926f49de", "filename": "gcc/recog.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da26277f801ce48caa91d0df25ebc5136f6cc63/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da26277f801ce48caa91d0df25ebc5136f6cc63/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=7da26277f801ce48caa91d0df25ebc5136f6cc63", "patch": "@@ -84,9 +84,9 @@ along with GCC; see the file COPYING3.  If not see\n #endif\n #endif\n \n-static void validate_replace_rtx_1 (rtx *, rtx, rtx, rtx, bool);\n+static void validate_replace_rtx_1 (rtx *, rtx, rtx, rtx_insn *, bool);\n static void validate_replace_src_1 (rtx *, void *);\n-static rtx split_insn (rtx_insn *);\n+static rtx_insn *split_insn (rtx_insn *);\n \n struct target_recog default_target_recog;\n #if SWITCHABLE_TARGET\n@@ -319,7 +319,7 @@ validate_unshare_change (rtx object, rtx *loc, rtx new_rtx, bool in_group)\n \n    Return true if anything was changed.  */\n bool\n-canonicalize_change_group (rtx insn, rtx x)\n+canonicalize_change_group (rtx_insn *insn, rtx x)\n {\n   if (COMMUTATIVE_P (x)\n       && swap_commutative_operands_p (XEXP (x, 0), XEXP (x, 1)))\n@@ -598,7 +598,7 @@ cancel_changes (int num)\n    rtx.  */\n \n static void\n-simplify_while_replacing (rtx *loc, rtx to, rtx object,\n+simplify_while_replacing (rtx *loc, rtx to, rtx_insn *object,\n                           machine_mode op0_mode)\n {\n   rtx x = *loc;\n@@ -758,7 +758,7 @@ simplify_while_replacing (rtx *loc, rtx to, rtx object,\n    validate_change passing OBJECT.  */\n \n static void\n-validate_replace_rtx_1 (rtx *loc, rtx from, rtx to, rtx object,\n+validate_replace_rtx_1 (rtx *loc, rtx from, rtx to, rtx_insn *object,\n                         bool simplify)\n {\n   int i, j;\n@@ -847,7 +847,7 @@ validate_replace_rtx_1 (rtx *loc, rtx from, rtx to, rtx object,\n    if INSN is still valid.  */\n \n int\n-validate_replace_rtx_subexp (rtx from, rtx to, rtx insn, rtx *loc)\n+validate_replace_rtx_subexp (rtx from, rtx to, rtx_insn *insn, rtx *loc)\n {\n   validate_replace_rtx_1 (loc, from, to, insn, true);\n   return apply_change_group ();\n@@ -857,7 +857,7 @@ validate_replace_rtx_subexp (rtx from, rtx to, rtx insn, rtx *loc)\n    changes have been made, validate by seeing if INSN is still valid.  */\n \n int\n-validate_replace_rtx (rtx from, rtx to, rtx insn)\n+validate_replace_rtx (rtx from, rtx to, rtx_insn *insn)\n {\n   validate_replace_rtx_1 (&PATTERN (insn), from, to, insn, true);\n   return apply_change_group ();\n@@ -870,7 +870,7 @@ validate_replace_rtx (rtx from, rtx to, rtx insn)\n    validate_replace_rtx_part (from, to, &PATTERN (insn), insn).  */\n \n int\n-validate_replace_rtx_part (rtx from, rtx to, rtx *where, rtx insn)\n+validate_replace_rtx_part (rtx from, rtx to, rtx *where, rtx_insn *insn)\n {\n   validate_replace_rtx_1 (where, from, to, insn, true);\n   return apply_change_group ();\n@@ -879,7 +879,7 @@ validate_replace_rtx_part (rtx from, rtx to, rtx *where, rtx insn)\n /* Same as above, but do not simplify rtx afterwards.  */\n int\n validate_replace_rtx_part_nosimplify (rtx from, rtx to, rtx *where,\n-                                      rtx insn)\n+\t\t\t\t      rtx_insn *insn)\n {\n   validate_replace_rtx_1 (where, from, to, insn, false);\n   return apply_change_group ();\n@@ -890,7 +890,7 @@ validate_replace_rtx_part_nosimplify (rtx from, rtx to, rtx *where,\n    will replace in REG_EQUAL and REG_EQUIV notes.  */\n \n void\n-validate_replace_rtx_group (rtx from, rtx to, rtx insn)\n+validate_replace_rtx_group (rtx from, rtx to, rtx_insn *insn)\n {\n   rtx note;\n   validate_replace_rtx_1 (&PATTERN (insn), from, to, insn, true);\n@@ -936,7 +936,7 @@ validate_replace_src_group (rtx from, rtx to, rtx_insn *insn)\n    pattern and return true if something was simplified.  */\n \n bool\n-validate_simplify_insn (rtx insn)\n+validate_simplify_insn (rtx_insn *insn)\n {\n   int i;\n   rtx pat = NULL;\n@@ -976,7 +976,7 @@ validate_simplify_insn (rtx insn)\n    EQ and NE tests do not count.  */\n \n int\n-next_insn_tests_no_inequality (rtx insn)\n+next_insn_tests_no_inequality (rtx_insn *insn)\n {\n   rtx_insn *next = next_cc0_user (insn);\n \n@@ -2517,7 +2517,7 @@ preprocess_insn_constraints (int icode)\n    The collected data is stored in recog_op_alt.  */\n \n void\n-preprocess_constraints (rtx insn)\n+preprocess_constraints (rtx_insn *insn)\n {\n   int icode = INSN_CODE (insn);\n   if (icode >= 0)\n@@ -2911,7 +2911,7 @@ reg_fits_class_p (const_rtx operand, reg_class_t cl, int offset,\n    split_all_insns_noflow.  Return last insn in the sequence if successful,\n    or NULL if unsuccessful.  */\n \n-static rtx\n+static rtx_insn *\n split_insn (rtx_insn *insn)\n {\n   /* Split insns here to get max fine-grain parallelism.  */\n@@ -2920,7 +2920,7 @@ split_insn (rtx_insn *insn)\n   rtx insn_set, last_set, note;\n \n   if (last == insn)\n-    return NULL_RTX;\n+    return NULL;\n \n   /* If the original instruction was a single set that was known to be\n      equivalent to a constant, see if we can say the same about the last"}, {"sha": "463c748bd922de3ca627598bc81bcfab4db53059", "filename": "gcc/recog.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7da26277f801ce48caa91d0df25ebc5136f6cc63/gcc%2Frecog.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7da26277f801ce48caa91d0df25ebc5136f6cc63/gcc%2Frecog.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.h?ref=7da26277f801ce48caa91d0df25ebc5136f6cc63", "patch": "@@ -88,7 +88,7 @@ extern int check_asm_operands (rtx);\n extern int asm_operand_ok (rtx, const char *, const char **);\n extern bool validate_change (rtx, rtx *, rtx, bool);\n extern bool validate_unshare_change (rtx, rtx *, rtx, bool);\n-extern bool canonicalize_change_group (rtx insn, rtx x);\n+extern bool canonicalize_change_group (rtx_insn *insn, rtx x);\n extern int insn_invalid_p (rtx_insn *, bool);\n extern int verify_changes (int);\n extern void confirm_change_group (void);\n@@ -104,15 +104,15 @@ extern int strict_memory_address_addr_space_p (machine_mode, rtx,\n \t\t\t\t\t       addr_space_t);\n #define strict_memory_address_p(mode,addr) \\\n \tstrict_memory_address_addr_space_p ((mode), (addr), ADDR_SPACE_GENERIC)\n-extern int validate_replace_rtx_subexp (rtx, rtx, rtx, rtx *);\n-extern int validate_replace_rtx (rtx, rtx, rtx);\n-extern int validate_replace_rtx_part (rtx, rtx, rtx *, rtx);\n-extern int validate_replace_rtx_part_nosimplify (rtx, rtx, rtx *, rtx);\n-extern void validate_replace_rtx_group (rtx, rtx, rtx);\n+extern int validate_replace_rtx_subexp (rtx, rtx, rtx_insn *, rtx *);\n+extern int validate_replace_rtx (rtx, rtx, rtx_insn *);\n+extern int validate_replace_rtx_part (rtx, rtx, rtx *, rtx_insn *);\n+extern int validate_replace_rtx_part_nosimplify (rtx, rtx, rtx *, rtx_insn *);\n+extern void validate_replace_rtx_group (rtx, rtx, rtx_insn *);\n extern void validate_replace_src_group (rtx, rtx, rtx_insn *);\n-extern bool validate_simplify_insn (rtx insn);\n+extern bool validate_simplify_insn (rtx_insn *insn);\n extern int num_changes_pending (void);\n-extern int next_insn_tests_no_inequality (rtx);\n+extern int next_insn_tests_no_inequality (rtx_insn *);\n extern bool reg_fits_class_p (const_rtx, reg_class_t, int, machine_mode);\n \n extern int offsettable_memref_p (rtx);\n@@ -138,7 +138,7 @@ extern void extract_insn_cached (rtx_insn *);\n extern void preprocess_constraints (int, int, const char **,\n \t\t\t\t    operand_alternative *);\n extern const operand_alternative *preprocess_insn_constraints (int);\n-extern void preprocess_constraints (rtx);\n+extern void preprocess_constraints (rtx_insn *);\n extern rtx peep2_next_insn (int);\n extern int peep2_regno_dead_p (int, int);\n extern int peep2_reg_dead_p (int, rtx);"}]}