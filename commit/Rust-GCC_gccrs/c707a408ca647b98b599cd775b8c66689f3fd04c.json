{"sha": "c707a408ca647b98b599cd775b8c66689f3fd04c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzcwN2E0MDhjYTY0N2I5OGI1OTljZDc3NWI4YzY2Njg5ZjNmZDA0Yw==", "commit": {"author": {"name": "Gabriel Dos Reis", "email": "gdr@integrable-solutions.net", "date": "2003-06-28T13:40:31Z"}, "committer": {"name": "Gabriel Dos Reis", "email": "gdr@gcc.gnu.org", "date": "2003-06-28T13:40:31Z"}, "message": "diagnostic.c (output_integer_with_precision): New macro.\n\n\t* diagnostic.c (output_integer_with_precision): New macro.\n\t(output_format): Use it.  Handle more format specifiers.\n\t(output_long_decimal): Remove.\n\t(output_unsigned_decimal): Likewise.\n\t(output_long_unsigned_decimal): Likewise.\n\t(output_octal): Likewise.\n\t(output_long_octal): Likewise.\n\t(output_hexadecimal): Likewise.\n\t(output_long_hexadecimal): Likewise.\n\t(output_long_long_decimal): Likewise.\n\nFrom-SVN: r68638", "tree": {"sha": "4d6365a06006ba95304e6059d2d1beb7cf3197ad", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d6365a06006ba95304e6059d2d1beb7cf3197ad"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c707a408ca647b98b599cd775b8c66689f3fd04c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c707a408ca647b98b599cd775b8c66689f3fd04c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c707a408ca647b98b599cd775b8c66689f3fd04c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c707a408ca647b98b599cd775b8c66689f3fd04c/comments", "author": {"login": "cxx-undef", "id": 5528103, "node_id": "MDQ6VXNlcjU1MjgxMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/5528103?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cxx-undef", "html_url": "https://github.com/cxx-undef", "followers_url": "https://api.github.com/users/cxx-undef/followers", "following_url": "https://api.github.com/users/cxx-undef/following{/other_user}", "gists_url": "https://api.github.com/users/cxx-undef/gists{/gist_id}", "starred_url": "https://api.github.com/users/cxx-undef/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cxx-undef/subscriptions", "organizations_url": "https://api.github.com/users/cxx-undef/orgs", "repos_url": "https://api.github.com/users/cxx-undef/repos", "events_url": "https://api.github.com/users/cxx-undef/events{/privacy}", "received_events_url": "https://api.github.com/users/cxx-undef/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f99740268614ca5bb0d4c5ac3d8c56eeaa4c6023", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f99740268614ca5bb0d4c5ac3d8c56eeaa4c6023", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f99740268614ca5bb0d4c5ac3d8c56eeaa4c6023"}], "stats": {"total": 198, "additions": 93, "deletions": 105}, "files": [{"sha": "1cfc2ccd4a1b53d3d6d933355a30a2fe816f7f15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c707a408ca647b98b599cd775b8c66689f3fd04c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c707a408ca647b98b599cd775b8c66689f3fd04c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c707a408ca647b98b599cd775b8c66689f3fd04c", "patch": "@@ -1,3 +1,16 @@\n+2003-06-28  Gabriel Dos Reis <gdr@integrable-solutions.net>\n+\n+\t* diagnostic.c (output_integer_with_precision): New macro.\n+\t(output_format): Use it.  Handle more format specifiers.\n+\t(output_long_decimal): Remove.\n+\t(output_unsigned_decimal): Likewise.\n+\t(output_long_unsigned_decimal): Likewise.\n+\t(output_octal): Likewise.\n+\t(output_long_octal): Likewise.\n+\t(output_hexadecimal): Likewise.\n+\t(output_long_hexadecimal): Likewise.\n+\t(output_long_long_decimal): Likewise.\n+\n 2003-06-28  Andreas Schwab  <schwab@suse.de>\n \n \t* config/ia64/ia64.md: Follow recent emit_note API change."}, {"sha": "8e22a4819f58d9a08f8d455830dbf5f7f569963d", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 80, "deletions": 105, "changes": 185, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c707a408ca647b98b599cd775b8c66689f3fd04c/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c707a408ca647b98b599cd775b8c66689f3fd04c/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=c707a408ca647b98b599cd775b8c66689f3fd04c", "patch": "@@ -44,6 +44,34 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #define line_wrap_cutoff(BUFFER) (BUFFER)->state.maximum_length\n #define prefix_was_emitted_for(BUFFER) (BUFFER)->state.emitted_prefix_p\n \n+/* Format an integer given by va_arg (ARG, type-specifier T) where\n+   type-specifier is a precision modifier as indicated by PREC.  F is\n+   a string used to construct the appropciate format-specifier.  */\n+#define output_integer_with_precision(BUFFER, ARG, PREC, T, F)  \\\n+  do                                                            \\\n+    switch (PREC)                                               \\\n+      {                                                         \\\n+      case 0:                                                   \\\n+        output_formatted_scalar                                 \\\n+          (BUFFER, \"%\" F, va_arg (ARG, T));                     \\\n+        break;                                                  \\\n+                                                                \\\n+      case 1:                                                   \\\n+        output_formatted_scalar                                 \\\n+          (BUFFER, \"%l\" F, va_arg (ARG, long T));               \\\n+        break;                                                  \\\n+                                                                \\\n+      case 2:                                                   \\\n+        output_formatted_scalar                                 \\\n+          (BUFFER, \"%ll\" F, va_arg (ARG, long long T));         \\\n+        break;                                                  \\\n+                                                                \\\n+      default:                                                  \\\n+        break;                                                  \\\n+      }                                                         \\\n+  while (0)\n+\n+\n /* Prototypes.  */\n static void output_flush (output_buffer *);\n static void output_do_verbatim (output_buffer *, text_info *);\n@@ -57,15 +85,6 @@ static void format_with_decl (output_buffer *, text_info *, tree);\n static void diagnostic_for_decl (diagnostic_context *, diagnostic_info *,\n \t\t\t\t tree);\n static void set_real_maximum_length (output_buffer *);\n-\n-static void output_unsigned_decimal (output_buffer *, unsigned int);\n-static void output_long_decimal (output_buffer *, long int);\n-static void output_long_unsigned_decimal (output_buffer *,\n-\t\t\t\t\t  long unsigned int);\n-static void output_octal (output_buffer *, unsigned int);\n-static void output_long_octal (output_buffer *, unsigned long int);\n-static void output_hexadecimal (output_buffer *, unsigned int);\n-static void output_long_hexadecimal (output_buffer *, unsigned long int);\n static void output_append_r (output_buffer *, const char *, int);\n static void wrap_text (output_buffer *, const char *, const char *);\n static void maybe_wrap_text (output_buffer *, const char *, const char *);\n@@ -292,54 +311,6 @@ output_decimal (output_buffer *buffer, int i)\n   output_formatted_scalar (buffer, \"%d\", i);\n }\n \n-static inline void\n-output_long_decimal (output_buffer *buffer, long int i)\n-{\n-  output_formatted_scalar (buffer, \"%ld\", i);\n-}\n-\n-static inline void\n-output_unsigned_decimal (output_buffer *buffer, unsigned int i)\n-{\n-  output_formatted_scalar (buffer, \"%u\", i);\n-}\n-\n-static inline void\n-output_long_unsigned_decimal (output_buffer *buffer, long unsigned int i)\n-{\n-  output_formatted_scalar (buffer, \"%lu\", i);\n-}\n-\n-static inline void\n-output_octal (output_buffer *buffer, unsigned int i)\n-{\n-  output_formatted_scalar (buffer, \"%o\", i);\n-}\n-\n-static inline void\n-output_long_octal (output_buffer *buffer, long unsigned int i)\n-{\n-  output_formatted_scalar (buffer, \"%lo\", i);\n-}\n-\n-static inline void\n-output_hexadecimal (output_buffer *buffer, unsigned int i)\n-{\n-  output_formatted_scalar (buffer, \"%x\", i);\n-}\n-\n-static inline void\n-output_long_hexadecimal (output_buffer *buffer, long unsigned int i)\n-{\n-  output_formatted_scalar (buffer, \"%lx\", i);\n-}\n-\n-static inline void\n-output_long_long_decimal (output_buffer *buffer, long long int i)\n-{\n-  output_formatted_scalar (buffer, \"%lld\", i);\n-}\n-\n void\n output_host_wide_integer (output_buffer *buffer, HOST_WIDE_INT i)\n {\n@@ -469,8 +440,8 @@ output_buffer_to_stream (output_buffer *buffer)\n    %o: unsigned integer in base eight.\n    %x: unsigned integer in base sixteen.\n    %ld, %li, %lo, %lu, %lx: long versions of the above.\n-   %ll: long long int.\n-   %w: and integer of type HOST_WIDE_INT.\n+   %lld, %lli, %llo, %llu, %llx: long long versions.\n+   %wd, %wi, %wo, %wu, %wx: HOST_WIDE_INT versions.\n    %c: character.\n    %s: string.\n    %p: pointer.\n@@ -483,7 +454,8 @@ output_format (output_buffer *buffer, text_info *text)\n {\n   for (; *text->format_spec; ++text->format_spec)\n     {\n-      bool long_integer = 0;\n+      int precision = 0;\n+      bool wide = false;\n \n       /* Ignore text.  */\n       {\n@@ -497,17 +469,27 @@ output_format (output_buffer *buffer, text_info *text)\n       if (*text->format_spec == '\\0')\n \tbreak;\n \n-      /* We got a '%'.  Let's see what happens. Record whether we're\n-         parsing a long integer format specifier.  */\n-      if (*++text->format_spec == 'l')\n-\t{\n-\t  long_integer = true;\n-\t  ++text->format_spec;\n-\t}\n+      /* We got a '%'.  Parse precision modifiers, if any.  */\n+      switch (*++text->format_spec)\n+        {\n+        case 'w':\n+          wide = true;\n+          ++text->format_spec;\n+          break;\n+\n+        case 'l':\n+          do\n+            ++precision;\n+          while (*++text->format_spec == 'l');\n+          break;\n+\n+        default:\n+          break;\n+        }\n+      /* We don't support precision behond that of \"long long\".   */\n+      if (precision > 2)\n+        abort();\n \n-      /* Handle %c, %d, %i, %ld, %li, %lo, %lu, %lx, %m, %o, %s, %u,\n-         %x, %p, %.*s; %%.  And nothing else.  Front-ends should install\n-         printers to grok language specific format specifiers.  */\n       switch (*text->format_spec)\n \t{\n \tcase 'c':\n@@ -516,18 +498,23 @@ output_format (output_buffer *buffer, text_info *text)\n \n \tcase 'd':\n \tcase 'i':\n-\t  if (long_integer)\n-\t    output_long_decimal (buffer, va_arg (*text->args_ptr, long int));\n-\t  else\n-\t    output_decimal (buffer, va_arg (*text->args_ptr, int));\n+          if (wide)\n+            output_formatted_scalar\n+              (buffer, HOST_WIDE_INT_PRINT_DEC,\n+               va_arg (*text->args_ptr, HOST_WIDE_INT));\n+          else\n+            output_integer_with_precision\n+              (buffer, *text->args_ptr, precision, int, \"d\");\n \t  break;\n \n \tcase 'o':\n-\t  if (long_integer)\n-\t    output_long_octal (buffer,\n-\t\t\t       va_arg (*text->args_ptr, unsigned long int));\n-\t  else\n-\t    output_octal (buffer, va_arg (*text->args_ptr, unsigned int));\n+          if (wide)\n+            output_formatted_scalar\n+              (buffer, \"%\" HOST_WIDE_INT_PRINT \"o\",\n+               va_arg (*text->args_ptr, unsigned HOST_WIDE_INT));\n+          else\n+            output_integer_with_precision\n+              (buffer, *text->args_ptr, precision, unsigned, \"u\");\n \t  break;\n \n \tcase 's':\n@@ -539,31 +526,24 @@ output_format (output_buffer *buffer, text_info *text)\n           break;\n \n \tcase 'u':\n-\t  if (long_integer)\n-\t    output_long_unsigned_decimal\n-\t      (buffer, va_arg (*text->args_ptr, long unsigned int));\n-\t  else\n-\t    output_unsigned_decimal\n-\t      (buffer, va_arg (*text->args_ptr, unsigned int));\n+          if (wide)\n+            output_formatted_scalar\n+              (buffer, HOST_WIDE_INT_PRINT_UNSIGNED,\n+               va_arg (*text->args_ptr, unsigned HOST_WIDE_INT));\n+          else\n+            output_integer_with_precision\n+              (buffer, *text->args_ptr, precision, unsigned, \"u\");\n \t  break;\n \n \tcase 'x':\n-\t  if (long_integer)\n-\t    output_long_hexadecimal\n-\t      (buffer, va_arg (*text->args_ptr, unsigned long int));\n-\t  else\n-\t    output_hexadecimal\n-              (buffer, va_arg (*text->args_ptr, unsigned int));\n-\t  break;\n-\n-        case 'l':\n-          if (long_integer)\n-            output_long_long_decimal\n-              (buffer, va_arg (*text->args_ptr, long long));\n+          if (wide)\n+            output_formatted_scalar\n+              (buffer, HOST_WIDE_INT_PRINT_HEX,\n+               va_arg (*text->args_ptr, unsigned HOST_WIDE_INT));\n           else\n-            /* Sould not happen.  */\n-            abort();\n-          break;\n+            output_integer_with_precision\n+              (buffer, *text->args_ptr, precision, unsigned, \"x\");\n+\t  break;\n \n \tcase 'm':\n \t  output_add_string (buffer, xstrerror (text->err_no));\n@@ -598,11 +578,6 @@ output_format (output_buffer *buffer, text_info *text)\n \t  }\n \t  break;\n \n-        case 'w':\n-          output_host_wide_integer\n-            (buffer, va_arg (*text->args_ptr, HOST_WIDE_INT));\n-          break;                                   \n-\n \tdefault:\n \t  if (!buffer->format_decoder\n               || !(*buffer->format_decoder) (buffer, text))"}]}