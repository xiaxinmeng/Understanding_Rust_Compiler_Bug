{"sha": "9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWIxN2YxMmJkYzBhMWJkZjkyMmMwMmEyNjc2Y2ZjYjk1ZmIyOWQ5Mg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2012-11-23T11:06:07Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2012-11-23T11:06:07Z"}, "message": "trans.c (Attribute_to_gnu): Look through a view conversion from constrained to unconstrained form.\n\n\t* gcc-interface/trans.c (Attribute_to_gnu) <Attr_Length>: Look through\n\ta view conversion from constrained to unconstrained form.\n\nFrom-SVN: r193751", "tree": {"sha": "ea25c897a8b0d34ef398ca515c72f77d002c3122", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ea25c897a8b0d34ef398ca515c72f77d002c3122"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92/comments", "author": null, "committer": null, "parents": [{"sha": "29e100b31a77dcee0c57f7438e3a71007b18b52b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29e100b31a77dcee0c57f7438e3a71007b18b52b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29e100b31a77dcee0c57f7438e3a71007b18b52b"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "7e1c7bc25a6b81e023886aeaa72e91f8ccb0fcc5", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92", "patch": "@@ -1,3 +1,8 @@\n+2012-11-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (Attribute_to_gnu) <Attr_Length>: Look through\n+\ta view conversion from constrained to unconstrained form.\n+\n 2012-11-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/decl.c (components_need_strict_alignment): New."}, {"sha": "7194129f5b7865b999d1db236964e702a16aef21", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92", "patch": "@@ -1700,7 +1700,20 @@ Attribute_to_gnu (Node_Id gnat_node, tree *gnu_result_type_p, int attribute)\n \t      gnat_param = Entity (Prefix (gnat_prefix));\n \t  }\n \n-\tgnu_type = TREE_TYPE (gnu_prefix);\n+\t/* If the prefix is the view conversion of a constrained array to an\n+\t   unconstrained form, we retrieve the constrained array because we\n+\t   might not be able to substitute the PLACEHOLDER_EXPR coming from\n+\t   the conversion.  This can occur with the 'Old attribute applied\n+\t   to a parameter with an unconstrained type, which gets rewritten\n+\t   into a constrained local variable very late in the game.  */\n+\tif (TREE_CODE (gnu_prefix) == VIEW_CONVERT_EXPR\n+\t    && CONTAINS_PLACEHOLDER_P (TYPE_SIZE (TREE_TYPE (gnu_prefix)))\n+\t    && !CONTAINS_PLACEHOLDER_P\n+\t        (TYPE_SIZE (TREE_TYPE (TREE_OPERAND (gnu_prefix, 0)))))\n+\t  gnu_type = TREE_TYPE (TREE_OPERAND (gnu_prefix, 0));\n+\telse\n+\t  gnu_type = TREE_TYPE (gnu_prefix);\n+\n \tprefix_unused = true;\n \tgnu_result_type = get_unpadded_type (Etype (gnat_node));\n "}, {"sha": "8021aef4e8780b0058213bcb437dbafc18d495d4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92", "patch": "@@ -1,3 +1,7 @@\n+2012-11-23  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gnat.dg/discr40.ad[sb]: New test.\n+\n 2012-11-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/discr39.adb: New test."}, {"sha": "ea1b46aa7649de9e732bbe7d6b07b00dd9f36f91", "filename": "gcc/testsuite/gnat.dg/discr40.adb", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr40.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr40.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr40.adb?ref=9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92", "patch": "@@ -0,0 +1,12 @@\n+-- { dg-do compile }\n+-- { dg-options \"-gnat12 -gnata\" }\n+\n+package body Discr40 is\n+\n+   procedure Push (S: in out Stack; E : Element) is\n+   begin\n+      S.Length := S.Length + 1;\n+      S.Data(S.Length) := E;\n+   end Push;\n+\n+end Discr40;"}, {"sha": "b4ec3ada8b48ac036da4131aa37fb0a4ab9e2217", "filename": "gcc/testsuite/gnat.dg/discr40.ads", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr40.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr40.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fdiscr40.ads?ref=9b17f12bdc0a1bdf922c02a2676cfcb95fb29d92", "patch": "@@ -0,0 +1,26 @@\n+pragma Assertion_Policy(Check);\n+\n+package Discr40 is\n+\n+   subtype Element is Integer;\n+\n+   type Vector is array (Positive range <>) of Element;\n+\n+   type Stack (Max_Length : Natural) is\n+   record\n+      Length : Natural;\n+      Data : Vector (1 .. Max_Length);\n+   end record;\n+\n+   function Not_Full (S : Stack) return Boolean is\n+      (S.Length < S.Max_Length);\n+\n+    procedure Push (S: in out Stack; E : Element)\n+         with Pre => Not_Full(S),   -- Precodition\n+              Post =>             -- Postcondition\n+                 (S.Length = S'Old.Length + 1) and\n+                 (S.Data (S.Length) = E) and\n+                 (for all J in 1 .. S'Old.Length =>\n+                     S.Data(J) = S'Old.Data(J));\n+\n+end Discr40;"}]}