{"sha": "2241061463ad43de95eb7d3e07546bcb5efa8607", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjI0MTA2MTQ2M2FkNDNkZTk1ZWI3ZDNlMDc1NDZiY2I1ZWZhODYwNw==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-10-27T11:06:06Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-10-28T00:28:10Z"}, "message": "[RS6000] power10 scan-assembler tests\n\nOn power10 these are \"dg-do run\" tests, so need -save-temps for the\nassembler scanning.\n\n\t* gcc.target/powerpc/vsx-load-element-extend-char.c: Add -save-temps.\n\t* gcc.target/powerpc/vsx-load-element-extend-int.c: Likewise.\n\t* gcc.target/powerpc/vsx-load-element-extend-longlong.c: Likewise.\n\t* gcc.target/powerpc/vsx-load-element-extend-short.c: Likewise.\n\t* gcc.target/powerpc/vsx-store-element-truncate-char.c: Likewise.\n\t* gcc.target/powerpc/vsx-store-element-truncate-int.c: Likewise.\n\t* gcc.target/powerpc/vsx-store-element-truncate-longlong.c: Likewise.\n\t* gcc.target/powerpc/vsx-store-element-truncate-short.c: Likewise.", "tree": {"sha": "1eb93ae75d2f950f295eb9dc1f9dd6d447597c1b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eb93ae75d2f950f295eb9dc1f9dd6d447597c1b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2241061463ad43de95eb7d3e07546bcb5efa8607", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2241061463ad43de95eb7d3e07546bcb5efa8607", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2241061463ad43de95eb7d3e07546bcb5efa8607", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2241061463ad43de95eb7d3e07546bcb5efa8607/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec69fe4e984bb686844b81589033135d64985c60", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec69fe4e984bb686844b81589033135d64985c60", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec69fe4e984bb686844b81589033135d64985c60"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "f386346e059eaa477c27721d02c34fda54e0ce5e", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-load-element-extend-char.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-char.c?ref=2241061463ad43de95eb7d3e07546bcb5efa8607", "patch": "@@ -5,7 +5,7 @@\n /* { dg-do compile {target power10_ok} } */\n /* { dg-do run {target power10_hw} } */\n /* { dg-require-effective-target int128 } */\n-/* { dg-options \"-mdejagnu-cpu=power10 -O3\" } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O3 -save-temps\" } */\n \n /* At the time of writing, the number of lxvrbx instructions is\n    double what we expect because we are generating a "}, {"sha": "ea737466a58ea34dc438eb662d451f1b4dac894a", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-load-element-extend-int.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-int.c?ref=2241061463ad43de95eb7d3e07546bcb5efa8607", "patch": "@@ -10,7 +10,7 @@\n    the lxvr*x instruction is generated. At higher optimization levels\n    the instruction we are looking for is sometimes replaced by other\n    load instructions. */\n-/* { dg-options \"-mdejagnu-cpu=power10 -O0\" } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O0 -save-temps\" } */\n \n /* { dg-final { scan-assembler-times {\\mlxvrwx\\M} 2 } } */\n "}, {"sha": "cd155c2013dc316e0761ae3fb980ada9fcce9de2", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-load-element-extend-longlong.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-longlong.c?ref=2241061463ad43de95eb7d3e07546bcb5efa8607", "patch": "@@ -5,7 +5,7 @@\n /* { dg-do compile {target power10_ok} } */\n /* { dg-do run {target power10_hw} } */\n /* { dg-require-effective-target int128 } */\n-/* { dg-options \"-mdejagnu-cpu=power10 -O3\" } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O3 -save-temps\" } */\n \n /* At time of writing, we also geenerate a .constrprop copy\n    of the function, so our instruction hit count is"}, {"sha": "68fdcdcea373dcb39e7c90401bb705dbb576bec1", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-load-element-extend-short.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-load-element-extend-short.c?ref=2241061463ad43de95eb7d3e07546bcb5efa8607", "patch": "@@ -10,7 +10,7 @@\n    the lxvr*x instruction is generated. At higher optimization levels\n    the instruction we are looking for is sometimes replaced by other\n    load instructions.  */\n-/* { dg-options \"-mdejagnu-cpu=power10 -O0\" } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O0 -save-temps\" } */\n \n /* { dg-final { scan-assembler-times {\\mlxvrhx\\M} 2 } } */\n "}, {"sha": "45c49547d664357cb71ea0d88cd9c4e83ae20a13", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-store-element-truncate-char.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-char.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-char.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-char.c?ref=2241061463ad43de95eb7d3e07546bcb5efa8607", "patch": "@@ -8,7 +8,7 @@\n    the stxvr*x instruction is generated. At higher optimization levels\n    the instruction we are looking for is sometimes replaced by other\n    store instructions.  */\n-/* { dg-options \"-mdejagnu-cpu=power10 -O0\" } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O0 -save-temps\" } */\n \n /* { dg-final { scan-assembler-times {\\mstxvrbx\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mstbx\\M} 0 } } */"}, {"sha": "f263e3d5cc94132eb823174a47f5ba27a89a1e72", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-store-element-truncate-int.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-int.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-int.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-int.c?ref=2241061463ad43de95eb7d3e07546bcb5efa8607", "patch": "@@ -8,7 +8,7 @@\n    the stxvr*x instruction is generated. At higher optimization levels\n    the instruction we are looking for is sometimes replaced by other\n    store instructions.  */\n-/* { dg-options \"-mdejagnu-cpu=power10 -O0\" } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O0 -save-temps\" } */\n  \n /* { dg-final { scan-assembler-times {\\mstxvrwx\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mstwx\\M} 0 } } */"}, {"sha": "0eeef5e6ba9e5f6bb20b3fd8fc789bd3df0dcb5e", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-store-element-truncate-longlong.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-longlong.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-longlong.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-longlong.c?ref=2241061463ad43de95eb7d3e07546bcb5efa8607", "patch": "@@ -9,7 +9,7 @@\n    the stxvr*x instruction is generated. At higher optimization levels\n    the instruction we are looking for is sometimes replaced by other\n    store instructions. */\n-/* { dg-options \"-mdejagnu-cpu=power10 -O0\" } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O0 -save-temps\" } */\n \n /* { dg-final { scan-assembler-times {\\mstxvrdx\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\mstwx\\M} 0 } } */"}, {"sha": "0186ddc552f0d58671cc27f82a27019fa99618a2", "filename": "gcc/testsuite/gcc.target/powerpc/vsx-store-element-truncate-short.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-short.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2241061463ad43de95eb7d3e07546bcb5efa8607/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-short.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fvsx-store-element-truncate-short.c?ref=2241061463ad43de95eb7d3e07546bcb5efa8607", "patch": "@@ -9,7 +9,7 @@\n    the stxvr*x instruction is generated. At higher optimization levels\n    the instruction we are looking for is sometimes replaced by other\n    store instructions.  */\n-/* { dg-options \"-mdejagnu-cpu=power10 -O0\" } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O0 -save-temps\" } */\n \n /* { dg-final { scan-assembler-times {\\mstxvrhx\\M} 2 } } */\n /* { dg-final { scan-assembler-times {\\msthx\\M} 0 } } */"}]}