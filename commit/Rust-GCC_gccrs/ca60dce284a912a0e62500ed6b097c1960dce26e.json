{"sha": "ca60dce284a912a0e62500ed6b097c1960dce26e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E2MGRjZTI4NGE5MTJhMGU2MjUwMGVkNmIwOTdjMTk2MGRjZTI2ZQ==", "commit": {"author": {"name": "Bryce McKinlay", "email": "mckinlay@redhat.com", "date": "2004-05-28T18:53:06Z"}, "committer": {"name": "Bryce McKinlay", "email": "bryce@gcc.gnu.org", "date": "2004-05-28T18:53:06Z"}, "message": "gcj.texi (Object allocation): Remove _Jv_AllocBytes.\n\n\t* gcj.texi (Object allocation): Remove _Jv_AllocBytes.\n\t(Mixing with C++): Document JvAllocBytes and RawDataManaged.\n\n\t* gcj/cni.h (JvAllocBytes): New public CNI function. Calls\n\t_Jv_AllocBytes.\n\t* gnu/gcj/RawDataManaged.java: New file.\n\t* java/lang/Thread.java (data): Declare as RawDataManaged.\n\t* java/lang/natThread.cc (init_native): Cast natThread data to\n\tRawDataManaged, not jobject.\n\t* Makefile.am (ordinary_java_source_files): Add RawDataManaged.\n\t* Makefile.in: Rebuilt.\n\nFrom-SVN: r82372", "tree": {"sha": "a45dca3a962b2788d50822d0c51a8159a48662d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a45dca3a962b2788d50822d0c51a8159a48662d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca60dce284a912a0e62500ed6b097c1960dce26e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca60dce284a912a0e62500ed6b097c1960dce26e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca60dce284a912a0e62500ed6b097c1960dce26e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca60dce284a912a0e62500ed6b097c1960dce26e/comments", "author": null, "committer": null, "parents": [{"sha": "0919ed7222874f28a047d4ace01e15efd7edfe7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0919ed7222874f28a047d4ace01e15efd7edfe7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0919ed7222874f28a047d4ace01e15efd7edfe7d"}], "stats": {"total": 100, "additions": 83, "deletions": 17}, "files": [{"sha": "e869a07785919e9b0ab537220f84b0ea0b6e7998", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60dce284a912a0e62500ed6b097c1960dce26e/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60dce284a912a0e62500ed6b097c1960dce26e/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ca60dce284a912a0e62500ed6b097c1960dce26e", "patch": "@@ -1,3 +1,8 @@\n+2004-05-28  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* gcj.texi (Object allocation): Remove _Jv_AllocBytes.\n+\t(Mixing with C++): Document JvAllocBytes and RawDataManaged.\n+\n 2004-05-26  Bryce McKinlay  <mckinlay@redhat.com>\n \n \t* decl.c (struct binding_level): Add GTY marker. Compile"}, {"sha": "e5b37a0e0771c63c37ea2f3d37107ac8188a0e09", "filename": "gcc/java/gcj.texi", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60dce284a912a0e62500ed6b097c1960dce26e/gcc%2Fjava%2Fgcj.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60dce284a912a0e62500ed6b097c1960dce26e/gcc%2Fjava%2Fgcj.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fgcj.texi?ref=ca60dce284a912a0e62500ed6b097c1960dce26e", "patch": "@@ -1171,9 +1171,7 @@ macros start with the @code{Jv} prefix, for example the function\n @code{JvNewObjectArray}.  This convention is used to avoid conflicts\n with other libraries.  Internal functions in CNI start with the prefix\n @code{_Jv_}.  You should not call these; if you find a need to, let us\n-know and we will try to come up with an alternate solution.  (This\n-manual lists @code{_Jv_AllocBytes} as an example; CNI should instead\n-provide a @code{JvAllocBytes} function.)\n+know and we will try to come up with an alternate solution.\n \n \n @subsection Limitations\n@@ -1488,11 +1486,6 @@ using standard C++ overload resolution rules.\n java::util::Hashtable *ht = new java::util::Hashtable(120);\n @end example\n \n-@deftypefun void* _Jv_AllocBytes (jsize @var{size})\n-Allocates @var{size} bytes from the heap.  The memory is not scanned\n-by the garbage collector but it freed if no references to it are discovered.\n-@end deftypefun\n-\n \n @node Arrays\n @section Arrays\n@@ -1784,11 +1777,13 @@ jint\n @}\n @end example\n \n-But this restriction can cause a problem so @acronym{CNI} includes the\n+@subsection RawData\n+\n+The above restriction can be problematic, so @acronym{CNI} includes the\n @code{gnu.gcj.RawData} class.  The @code{RawData} class is a\n @dfn{non-scanned reference} type.  In other words variables declared\n of type @code{RawData} can contain any data and are not checked by the\n-compiler in any way.\n+compiler or memory manager in any way.\n \n This means that you can put C/C++ data structures (including classes)\n in your @acronym{CNI} classes, as long as you use the appropriate cast.\n@@ -1826,6 +1821,30 @@ void\n @end example\n \n \n+@subsection RawDataManaged\n+\n+@code{gnu.gcj.RawDataManaged} is another type used to indicate special data used \n+by native code. Unlike the @code{RawData} type, fields declared as \n+@code{RawDataManaged} will be \"marked\" by the memory manager and \n+considered for garbage collection.  \n+\n+Native data which is allocated using CNI's @code{JvAllocBytes()}\n+function and stored in a @code{RawDataManaged} will be automatically \n+freed when the Java object it is associated with becomes unreachable.\n+\n+@subsection Native memory allocation\n+\n+@deftypefun void* JvAllocBytes (jsize @var{size})\n+Allocates @var{size} bytes from the heap.  The memory returned is zeroed.\n+This memory is not scanned for pointers by the garbage collector, but will \n+be freed if no references to it are discovered.\n+\n+This function can be useful if you need to associate some native data with a\n+Java object. Using a CNI's special @code{RawDataManaged} type, native data \n+allocated with @code{JvAllocBytes} will be automatically freed when the Java \n+object itself becomes unreachable.\n+@end deftypefun\n+\n @node Exception Handling\n @section Exception Handling\n "}, {"sha": "e6270fe86a59f5cd147a369c07b2fa14b9e7422f", "filename": "libjava/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=ca60dce284a912a0e62500ed6b097c1960dce26e", "patch": "@@ -1,3 +1,14 @@\n+2004-05-28  Bryce McKinlay  <mckinlay@redhat.com>\n+\n+\t* gcj/cni.h (JvAllocBytes): New public CNI function. Calls\n+\t_Jv_AllocBytes.\n+\t* gnu/gcj/RawDataManaged.java: New file.\n+\t* java/lang/Thread.java (data): Declare as RawDataManaged.\n+\t* java/lang/natThread.cc (init_native): Cast natThread data to\n+\tRawDataManaged, not jobject.\n+\t* Makefile.am (ordinary_java_source_files): Add RawDataManaged.\n+\t* Makefile.in: Rebuilt.\n+\n 2004-05-27  Jerry Quinn  <jlquinn@optonline.net>\n \n \t* java/util/SimpleTimeZone.java: Reverting my last change until I"}, {"sha": "5a97d9b886fccc9d1272e95a2aad7e7540793ad1", "filename": "libjava/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.am?ref=ca60dce284a912a0e62500ed6b097c1960dce26e", "patch": "@@ -2251,6 +2251,7 @@ gnu/classpath/ServiceFactory.java \\\n gnu/classpath/ServiceProviderLoadingAction.java \\\n gnu/gcj/Core.java \\\n gnu/gcj/RawData.java \\\n+gnu/gcj/RawDataManaged.java \\\n gnu/gcj/io/DefaultMimeTypes.java \\\n gnu/gcj/io/MimeTypes.java \\\n gnu/gcj/io/SimpleSHSStream.java\t\\"}, {"sha": "cb924d587572b3f0fdda33b1c9ac32a184ff93d5", "filename": "libjava/Makefile.in", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FMakefile.in?ref=ca60dce284a912a0e62500ed6b097c1960dce26e", "patch": "@@ -1923,6 +1923,7 @@ gnu/classpath/ServiceFactory.java \\\n gnu/classpath/ServiceProviderLoadingAction.java \\\n gnu/gcj/Core.java \\\n gnu/gcj/RawData.java \\\n+gnu/gcj/RawDataManaged.java \\\n gnu/gcj/io/DefaultMimeTypes.java \\\n gnu/gcj/io/MimeTypes.java \\\n gnu/gcj/io/SimpleSHSStream.java\t\\\n@@ -3075,7 +3076,8 @@ DEP_FILES =  .deps/$(srcdir)/$(CONVERT_DIR)/gen-from-JIS.P \\\n .deps/gnu/awt/xlib/XToolkit.P .deps/gnu/classpath/Configuration.P \\\n .deps/gnu/classpath/ServiceFactory.P \\\n .deps/gnu/classpath/ServiceProviderLoadingAction.P .deps/gnu/gcj/Core.P \\\n-.deps/gnu/gcj/RawData.P .deps/gnu/gcj/convert/BytesToUnicode.P \\\n+.deps/gnu/gcj/RawData.P .deps/gnu/gcj/RawDataManaged.P \\\n+.deps/gnu/gcj/convert/BytesToUnicode.P \\\n .deps/gnu/gcj/convert/Convert.P .deps/gnu/gcj/convert/IOConverter.P \\\n .deps/gnu/gcj/convert/Input_8859_1.P \\\n .deps/gnu/gcj/convert/Input_ASCII.P \\"}, {"sha": "b9ee3829ce12e8defb9a8353620f8b6dc803e5a6", "filename": "libjava/gcj/cni.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2Fgcj%2Fcni.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2Fgcj%2Fcni.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgcj%2Fcni.h?ref=ca60dce284a912a0e62500ed6b097c1960dce26e", "patch": "@@ -22,13 +22,20 @@ details.  */\n \n extern \"C\" jstring _Jv_NewStringUTF (const char *bytes);\n extern \"C\" void _Jv_InitClass (jclass);\n+extern \"C\" void *_Jv_AllocBytes (jsize size) __attribute__((__malloc__));\n \n extern inline void\n JvInitClass (jclass cls)\n {\n   return _Jv_InitClass (cls);\n }\n \n+extern inline void *\n+JvAllocBytes (jsize sz)\n+{\n+  return _Jv_AllocBytes (sz);\n+}\n+\n extern inline jstring\n JvAllocString (jsize sz)\n {"}, {"sha": "91a36acb9525c3f4dd17d93e6c389776e5a20af3", "filename": "libjava/gnu/gcj/RawDataManaged.java", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2Fgnu%2Fgcj%2FRawDataManaged.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2Fgnu%2Fgcj%2FRawDataManaged.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fgcj%2FRawDataManaged.java?ref=ca60dce284a912a0e62500ed6b097c1960dce26e", "patch": "@@ -0,0 +1,23 @@\n+/* Copyright (C) 2004  Free Software Foundation\n+\n+   This file is part of libgcj.\n+\n+This software is copyrighted work licensed under the terms of the\n+Libgcj License.  Please consult the file \"LIBGCJ_LICENSE\" for\n+details.  */\n+\n+package gnu.gcj;\n+\n+/** A type used to indicate special data used by native code. Unlike the \n+    <code>RawData</code> type, fields declared as <code>RawDataManaged</code> \n+    will be \"marked\" by the memory manager and considered for garbage \n+    collection.  \n+    \n+    Native data which is allocated using CNI's <code>JvAllocBytes()</code> \n+    function and stored in a <code>RawDataManaged</code> will be automatically \n+    freed when the Java object it is associated with becomes unreachable.  */\n+\n+public final class RawDataManaged\n+{\n+   private RawDataManaged() { }\n+}"}, {"sha": "f631cc5aaeaab690f5169009a384f25ab713f3d7", "filename": "libjava/java/lang/Thread.java", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2Fjava%2Flang%2FThread.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2Fjava%2Flang%2FThread.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FThread.java?ref=ca60dce284a912a0e62500ed6b097c1960dce26e", "patch": "@@ -39,6 +39,7 @@\n package java.lang;\n \n import gnu.gcj.RawData;\n+import gnu.gcj.RawDataManaged;\n \n /* Written using \"Java Class Libraries\", 2nd edition, ISBN 0-201-31002-3\n  * \"The Java Language Specification\", ISBN 0-201-63451-1\n@@ -127,7 +128,7 @@ public class Thread implements Runnable\n   RawData interp_frame;\n \n   // Our native data - points to an instance of struct natThread.\n-  private Object data;\n+  private RawDataManaged data;\n \n   /**\n    * Allocates a new <code>Thread</code> object. This constructor has"}, {"sha": "ea235ce378979ed74a7ef34523336e3dd1e6d2bc", "filename": "libjava/java/lang/natThread.cc", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2Fjava%2Flang%2FnatThread.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca60dce284a912a0e62500ed6b097c1960dce26e/libjava%2Fjava%2Flang%2FnatThread.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatThread.cc?ref=ca60dce284a912a0e62500ed6b097c1960dce26e", "patch": "@@ -16,6 +16,7 @@ details.  */\n #include <jvm.h>\n #include <java-threads.h>\n \n+#include <gnu/gcj/RawDataManaged.h>\n #include <java/lang/Thread.h>\n #include <java/lang/ThreadGroup.h>\n #include <java/lang/IllegalArgumentException.h>\n@@ -59,11 +60,7 @@ java::lang::Thread::initialize_native (void)\n {\n   natThread *nt = (natThread *) _Jv_AllocBytes (sizeof (natThread));\n   \n-  // The native thread data is kept in a Object field, not a RawData, so that\n-  // the GC allocator can be used and a finalizer run after the thread becomes\n-  // unreachable. Note that this relies on the GC's ability to finalize \n-  // non-Java objects. FIXME?\n-  data = reinterpret_cast<jobject> (nt);\n+  data = (gnu::gcj::RawDataManaged *) nt;\n   \n   // Register a finalizer to clean up the native thread resources.\n   _Jv_RegisterFinalizer (data, finalize_native);"}]}