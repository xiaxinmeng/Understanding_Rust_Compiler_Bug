{"sha": "a14175560cca5da1f9ff776c5c7309473397d43d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTE0MTc1NTYwY2NhNWRhMWY5ZmY3NzZjNWM3MzA5NDczMzk3ZDQzZA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2018-06-08T16:43:14Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2018-06-08T16:43:14Z"}, "message": "Define special members as defaulted\n\n\t* include/bits/ios_base.h (ios::Init::Init(const Init&))\n\t(ios::Init::operator=): Define as defaulted.\n\t* include/bits/stl_bvector.h (_Bit_reference(const _Bit_reference&)):\n\tLikewise.\n\t* include/bits/stream_iterator.h (istream_iterator::operator=)\n\t(ostream_iterator::operator=): Likewise.\n\t* include/bits/streambuf_iterator.h (istreambuf_iterator::operator=)\n\tLikewise.\n\t* include/std/bitset (bitset::reference::reference(const reference&)):\n\tLikewise.\n\t* include/std/complex (complex<float>::complex(const complex&))\n\t(complex<double>::complex(const complex&))\n\t(complex<long double>::complex(const complex&)): Likewise.\n\nFrom-SVN: r261338", "tree": {"sha": "b4f7b600f85d721994a50cf2134624619d3c6521", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4f7b600f85d721994a50cf2134624619d3c6521"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a14175560cca5da1f9ff776c5c7309473397d43d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14175560cca5da1f9ff776c5c7309473397d43d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a14175560cca5da1f9ff776c5c7309473397d43d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a14175560cca5da1f9ff776c5c7309473397d43d/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29a50dfb47ff12c7730a3d604642ce500a39c78f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/29a50dfb47ff12c7730a3d604642ce500a39c78f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/29a50dfb47ff12c7730a3d604642ce500a39c78f"}], "stats": {"total": 54, "additions": 51, "deletions": 3}, "files": [{"sha": "84bc4a79622aa93f33c5d1112f658e004b518f14", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a14175560cca5da1f9ff776c5c7309473397d43d", "patch": "@@ -1,3 +1,19 @@\n+2018-06-08  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/bits/ios_base.h (ios::Init::Init(const Init&))\n+\t(ios::Init::operator=): Define as defaulted.\n+\t* include/bits/stl_bvector.h (_Bit_reference(const _Bit_reference&)):\n+\tLikewise.\n+\t* include/bits/stream_iterator.h (istream_iterator::operator=)\n+\t(ostream_iterator::operator=): Likewise.\n+\t* include/bits/streambuf_iterator.h (istreambuf_iterator::operator=)\n+\tLikewise.\n+\t* include/std/bitset (bitset::reference::reference(const reference&)):\n+\tLikewise.\n+\t* include/std/complex (complex<float>::complex(const complex&))\n+\t(complex<double>::complex(const complex&))\n+\t(complex<long double>::complex(const complex&)): Likewise.\n+\n 2018-06-07  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* include/bits/regex.h (sub_match): Add noexcept to default"}, {"sha": "819afb96187627d7010a8d47bb4720452161e65d", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=a14175560cca5da1f9ff776c5c7309473397d43d", "patch": "@@ -607,6 +607,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       Init();\n       ~Init();\n \n+#if __cplusplus >= 201103L\n+      Init(const Init&) = default;\n+      Init& operator=(const Init&) = default;\n+#endif\n+\n     private:\n       static _Atomic_word\t_S_refcount;\n       static bool\t\t_S_synced_with_stdio;"}, {"sha": "4527ce7832aa99c941f9f7ef54278b4af19c98d5", "filename": "libstdc++-v3/include/bits/stl_bvector.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_bvector.h?ref=a14175560cca5da1f9ff776c5c7309473397d43d", "patch": "@@ -79,6 +79,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \n     _Bit_reference() _GLIBCXX_NOEXCEPT : _M_p(0), _M_mask(0) { }\n \n+#if __cplusplus >= 201103L\n+    _Bit_reference(const _Bit_reference&) = default;\n+#endif\n+\n     operator bool() const _GLIBCXX_NOEXCEPT\n     { return !!(*_M_p & _M_mask); }\n "}, {"sha": "7b682d2959e5efd574900396e5652a4f83a1873a", "filename": "libstdc++-v3/include/bits/stream_iterator.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstream_iterator.h?ref=a14175560cca5da1f9ff776c5c7309473397d43d", "patch": "@@ -74,6 +74,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n         _M_ok(__obj._M_ok)\n       { }\n \n+#if __cplusplus >= 201103L\n+      istream_iterator& operator=(const istream_iterator&) = default;\n+#endif\n+\n       const _Tp&\n       operator*() const\n       {\n@@ -188,6 +192,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       ostream_iterator(const ostream_iterator& __obj)\n       : _M_stream(__obj._M_stream), _M_string(__obj._M_string)  { }\n \n+#if __cplusplus >= 201103L\n+      ostream_iterator& operator=(const ostream_iterator&) = default;\n+#endif\n+\n       /// Writes @a value to underlying ostream using operator<<.  If\n       /// constructed with delimiter string, writes delimiter to ostream.\n       ostream_iterator&"}, {"sha": "8a3a382325a0e92d8e2bf9debdf199d6e6fa7702", "filename": "libstdc++-v3/include/bits/streambuf_iterator.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstreambuf_iterator.h?ref=a14175560cca5da1f9ff776c5c7309473397d43d", "patch": "@@ -121,6 +121,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       istreambuf_iterator(streambuf_type* __s) _GLIBCXX_USE_NOEXCEPT\n       : _M_sbuf(__s), _M_c(traits_type::eof()) { }\n \n+#if __cplusplus >= 201103L\n+      istreambuf_iterator&\n+      operator=(const istreambuf_iterator&) noexcept = default;\n+#endif\n+\n       ///  Return the current character pointed to by iterator.  This returns\n       ///  streambuf.sgetc().  It cannot be assigned.  NB: The result of\n       ///  operator*() on an end of stream is undefined."}, {"sha": "25e44d1553d9c499780a231a1cbb5593ac12f5b6", "filename": "libstdc++-v3/include/std/bitset", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fbitset?ref=a14175560cca5da1f9ff776c5c7309473397d43d", "patch": "@@ -816,6 +816,10 @@ _GLIBCXX_BEGIN_NAMESPACE_CONTAINER\n \t  _M_bpos = _Base::_S_whichbit(__pos);\n \t}\n \n+#if __cplusplus >= 201103L\n+\treference(const reference&) = default;\n+#endif\n+\n \t~reference() _GLIBCXX_NOEXCEPT\n \t{ }\n "}, {"sha": "2d1cc1831d0a5d9fb07a0b5a15a44ed23b282c51", "filename": "libstdc++-v3/include/std/complex", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a14175560cca5da1f9ff776c5c7309473397d43d/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fcomplex?ref=a14175560cca5da1f9ff776c5c7309473397d43d", "patch": "@@ -1158,7 +1158,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n       // Let the compiler synthesize the copy and assignment\n       // operator.  It always does a pretty good job.\n-      // complex& operator=(const complex&);\n+#if __cplusplus >= 201103L\n+      _GLIBCXX14_CONSTEXPR complex& operator=(const complex&) = default;\n+#endif\n \n       template<typename _Tp>\n         complex&\n@@ -1308,7 +1310,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       // The compiler will synthesize this, efficiently.\n-      // complex& operator=(const complex&);\n+#if __cplusplus >= 201103L\n+      _GLIBCXX14_CONSTEXPR complex& operator=(const complex&) = default;\n+#endif\n \n       template<typename _Tp>\n         complex&\n@@ -1460,7 +1464,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n \n       // The compiler knows how to do this efficiently\n-      // complex& operator=(const complex&);\n+#if __cplusplus >= 201103L\n+      _GLIBCXX14_CONSTEXPR complex& operator=(const complex&) = default;\n+#endif\n \n       template<typename _Tp>\n         complex&"}]}