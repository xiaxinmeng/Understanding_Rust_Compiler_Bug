{"sha": "672a6f42e98d55a92af9b649f077c0d38517116e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjcyYTZmNDJlOThkNTVhOTJhZjliNjQ5ZjA3N2MwZDM4NTE3MTE2ZQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-06-26T18:09:27Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-06-26T18:09:27Z"}, "message": "Makefile.in (TARGET_H, [...]): New.\n\n\t* Makefile.in (TARGET_H, TARGET_DEF_H): New.\n\t(c-decl.o, tree.o, c-typeck.o, $(out_object_file)): Update.\n\t* c-decl.c (duplicate_decls): Use function pointer.\n\t* c-typeck.c (common_type): Similarly.\n\t* tree.c (valid_machine_attribute): Similarly.\n\t(merge_machine_type_attributes): Rename merge_type_attributes.\n\t(merge_machine_decl_attributes): Rename merge_decl_attributes.\n\t(merge_dllimport_decl_attributes): New function.\n\t* tree.h (merge_machine_type_attributes): Rename merge_type_attributes.\n\t(merge_machine_decl_attributes): Rename merge_decl_attributes.\n\t(merge_dllimport_decl_attributes): New prototype.\n\t* target.h: New.\n\t* target-def.h: New.\n\ndoc:\t(Joseph Myers)\n\t* doc/gcc.texi, doc/tm.texi: Update documentation.\n\ncp:\tMake-lang.in: Update dependencies.\n\t* spew.c: Include target.h.\n\t(duplicate_decls): Call target function.\n\t* decl2.c: include target.h\n\t(import_export_class): Use existence of target function pointer.\n\t* typeck.c: Include target.h.\n\t(qualify_type_recursive): Rename variable.  Call target function.\n\t(type_after_usual_arithmetic_conversions): Similarly.\n\t(common_type): Similarly.\n\nconfig:\t* 1750a/1750a.c, a29k/29k.c, alpha/alpha.c, arc/arc.c, arm/arm.c,\n\tavr/avr.c, c4x/c4x.c, clipper/clipper.c, convex/convex.c,\n\td30v/d30v.c, dsp16xx/dsp16xx.c, elxsi/elxsi.c, fr30/fr30.c,\n\ti370/i370.c, i386/i386.c, i860/i860.c, i960/i960.c, ia64/ia64.c,\n\tm32r/m32r.c, m68hc11/m68hc11.c, m68k/m68k.c, m88k/m88k.c,\n\tmips/mips.c, mn10200/mn10200.c, mn10300/mn10300.c, ns32k/ns32k.c,\n\tpa/pa.c, pdp11/pdp11.c, pj/pj.c, romp/romp.c, rs6000/rs6000.c,\n\tsh/sh.c, sparc/sparc.c,\tv850/v850.c, vax/vax.c, we32k/we32k.c)\n\t: Include target.h and target-def.h.  Define target.\n\n\t* arc/arc-protos.h (arc_valid_machine_decl_attribute): Remove.\n\t* arc/arc.c (arc_valid_machine_decl_attribute): Rename\n\tarc_valid_decl_attribute, make static.\n\t* arc/arc.h (VALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n\t* arm/arm-protos.h (arm_valid_machine_decl_attribute,\n\tarm_valid_type_attribute_p, arm_pe_valid_machine_decl_attribute,\n\tarm_pe_merge_machine_decl_attributes): Remove.\n\t* arm/arm.c (arm_valid_machine_decl_attribute_p): Rename\n\tarm_valid_decl_attribute_p, make static.\n\t(arm_pe_valid_decl_attribute_p): Move from pe.c.\n\t* arm/pe.c (arm_pe_valid_machine_decl_attribute_p): Move to arm.c.\n\t(arm_pe_merge_machine_decl_attributes): Move to tree.c.\n\t* arm/arm.h (VALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n\t* arm/coff.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n\t* arm/elf.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n\t* arm/pe.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): New.\n\t(VALID_MACHINE_TYPE_ATTRIBUTE, VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n\t* avr/avr-protos.h (valid_machine_type_attribute,\n\tvalid_machine_decl_attribute): Remove.\n\t* avr/avr.c (valid_machine_type_attribute,\n\tvalid_machine_decl_attribute): Rename and make static.\n\t* avr/avr.h (VALID_MACHINE_TYPE_ATTRIBUTE,\n\tVALID_MACHINE_DECL_ATTRIBUTE): Remove.\n\t* c4x/c4x-protos.h (c4x_valid_type_attribute_p): Remove.\n\t* c4x/c4x.c (c4x_valid_type_attribute_p): Make static.\n\t* c4x/c4x.h (VALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n\t* d30v/d30v.h: Remove obsolete comments.\n\t* h8300/h8300-protos.h (h8300_valid_machine_decl_attribute): Remove.\n\t* h8300/h8300.c (h8300_valid_machine_decl_attribute): Rename, make\n\tstatic.\n\t* h8300/h8300.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n\t* i386/cygwin.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define.\n\t(i386_pe_merge_decl_attributes, MERGE_MACHINE_DECL_ATTRIBUTES,\n\ti386_pe_valid_type_attributes_p): Remove.\n\t* i386/i386-protos.h (ix86_valid_decl_attribute_p,\n\tix86_valid_type_attribute_p): Remove.\n\t* i386/i386.c (ix86_valid_decl_attribute_p): Remove.\n\t(ix86_valid_type_attribute_p): Make static.\n\t* i386/i386.h (VALID_MACHINE_DECL_ATTRIBUTE,\n\tVALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n\t* i386/winnt.c (i386_pe_merge_decl_attributes): Move to tree.c.\n\t* ia64/ia64-protos.h (ia64_valid_type_attribute): Remove.\n\t* ia64/ia64.c (ia64_valid_type_attribute): Make static.\n\t* ia64/ia64.h (VALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n\t* m32r/m32r-protos.h (m32r_valid_machine_decl_attribute): Remove.\n\t* m32r/m32r.c (m32r_valid_decl_attribute): Make static.\n\t* m32r/m32r.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n\t* m68hc11/m68hc11-protos.h (m68hc11_valid_decl_attribute_p,\n\tm68hc11_valid_type_attribute_p): Remove.\n\t* m68hc11/m68hc11.c (m68hc11_valid_decl_attribute_p): Remove.\n\t(m68hc11_valid_type_attribute_p): Make static.\n\t* m68hc11/m68hc11.h (VALID_MACHINE_DECL_ATTRIBUTE,\n\tVALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n\t* mcore/mcore-protos.h (mcore_valid_machine_decl_attribute,\n\tmcore_merge_machine_decl_attribute): Remove.\n\t* mcore/mcore.c (mcore_valid_machine_decl_attribute): Rename,\n\tmake static.\n\t(mcore_merge_machine_decl_attributes): Move to tree.c.\n\t* mcore/mcore.h (VALID_MACHINE_DECL_ATTRIBUTE,\n\tVALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n\t(TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define.\n\t* ns32k/ns32k-protos.h (ns32k_valid_decl_attribute_p,\n\tns32k_valid_type_attribute_p): Remove.\n\t* ns32k/ns32k.c (ns32k_valid_decl_attribute_p): Remove.\n\t(ns32k_valid_type_attribute_p): Make static.\n\t* ns32k/ns32k.h (VALID_MACHINE_DECL_ATTRIBUTE,\n\tVALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n\t* rs6000/rs6000-protos.h (rs6000_valid_decl_attribute_p,\n\trs6000_valid_type_attribute_p): Remove.\n\t* rs6000/rs6000.c (rs6000_valid_decl_attribute_p): Remove.\n\t(rs6000_valid_type_attribute_p): Make static.\n\t* rs6000/rs6000.h (VALID_MACHINE_DECL_ATTRIBUTE,\n\tVALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n\t* sh/sh-protos.h (sh_valid_machine_decl_attribute): Remove.\n\t* sh/sh.c (sh_valid_machine_decl_attribute): Rename, make static.\n\t* sh/sh.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n\t* v850/v850-protos.h (v850_valid_machine_decl_attribute): Remove.\n\t* v850/v850.c (v850_valid_machine_decl_attribute): Rename, make static.\n\t* v850/v850.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n\nFrom-SVN: r43585", "tree": {"sha": "d665db59621711f135866f664fecbdc22274c141", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d665db59621711f135866f664fecbdc22274c141"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/672a6f42e98d55a92af9b649f077c0d38517116e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672a6f42e98d55a92af9b649f077c0d38517116e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/672a6f42e98d55a92af9b649f077c0d38517116e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/672a6f42e98d55a92af9b649f077c0d38517116e/comments", "author": null, "committer": null, "parents": [{"sha": "51da3560e0f89359b53d63f90ee422e95872be45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/51da3560e0f89359b53d63f90ee422e95872be45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/51da3560e0f89359b53d63f90ee422e95872be45"}], "stats": {"total": 1508, "additions": 874, "deletions": 634}, "files": [{"sha": "7f59344137eb94549ae6880e08347ef977df78e2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -1,3 +1,122 @@\n+2001-06-26  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (TARGET_H, TARGET_DEF_H): New.\n+\t(c-decl.o, tree.o, c-typeck.o, $(out_object_file)): Update.\n+\t* c-decl.c (duplicate_decls): Use function pointer.\n+\t* c-typeck.c (common_type): Similarly.\n+\t* tree.c (valid_machine_attribute): Similarly.\n+\t(merge_machine_type_attributes): Rename merge_type_attributes.\n+\t(merge_machine_decl_attributes): Rename merge_decl_attributes.\n+\t(merge_dllimport_decl_attributes): New function.\n+\t* tree.h (merge_machine_type_attributes): Rename merge_type_attributes.\n+\t(merge_machine_decl_attributes): Rename merge_decl_attributes.\n+\t(merge_dllimport_decl_attributes): New prototype.\n+\t* target.h: New.\n+\t* target-def.h: New.\n+\n+doc:\t(Joseph Myers)\n+\t* doc/gcc.texi, doc/tm.texi: Update documentation.\n+\n+cp:\tMake-lang.in: Update dependencies.\n+\t* spew.c: Include target.h.\n+\t(duplicate_decls): Call target function.\n+\t* decl2.c: include target.h\n+\t(import_export_class): Use existence of target function pointer.\n+\t* typeck.c: Include target.h.\n+\t(qualify_type_recursive): Rename variable.  Call target function.\n+\t(type_after_usual_arithmetic_conversions): Similarly.\n+\t(common_type): Similarly.\n+\n+config:\t* 1750a/1750a.c, a29k/29k.c, alpha/alpha.c, arc/arc.c, arm/arm.c,\n+\tavr/avr.c, c4x/c4x.c, clipper/clipper.c, convex/convex.c,\n+\td30v/d30v.c, dsp16xx/dsp16xx.c, elxsi/elxsi.c, fr30/fr30.c,\n+\ti370/i370.c, i386/i386.c, i860/i860.c, i960/i960.c, ia64/ia64.c,\n+\tm32r/m32r.c, m68hc11/m68hc11.c, m68k/m68k.c, m88k/m88k.c,\n+\tmips/mips.c, mn10200/mn10200.c, mn10300/mn10300.c, ns32k/ns32k.c,\n+\tpa/pa.c, pdp11/pdp11.c, pj/pj.c, romp/romp.c, rs6000/rs6000.c,\n+\tsh/sh.c, sparc/sparc.c,\tv850/v850.c, vax/vax.c, we32k/we32k.c)\n+\t: Include target.h and target-def.h.  Define target.\n+\n+\t* arc/arc-protos.h (arc_valid_machine_decl_attribute): Remove.\n+\t* arc/arc.c (arc_valid_machine_decl_attribute): Rename\n+\tarc_valid_decl_attribute, make static.\n+\t* arc/arc.h (VALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n+\t* arm/arm-protos.h (arm_valid_machine_decl_attribute,\n+\tarm_valid_type_attribute_p, arm_pe_valid_machine_decl_attribute,\n+\tarm_pe_merge_machine_decl_attributes): Remove.\n+\t* arm/arm.c (arm_valid_machine_decl_attribute_p): Rename\n+\tarm_valid_decl_attribute_p, make static.\n+\t(arm_pe_valid_decl_attribute_p): Move from pe.c.\n+\t* arm/pe.c (arm_pe_valid_machine_decl_attribute_p): Move to arm.c.\n+\t(arm_pe_merge_machine_decl_attributes): Move to tree.c.\n+\t* arm/arm.h (VALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n+\t* arm/coff.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n+\t* arm/elf.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n+\t* arm/pe.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): New.\n+\t(VALID_MACHINE_TYPE_ATTRIBUTE, VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n+\t* avr/avr-protos.h (valid_machine_type_attribute,\n+\tvalid_machine_decl_attribute): Remove.\n+\t* avr/avr.c (valid_machine_type_attribute,\n+\tvalid_machine_decl_attribute): Rename and make static.\n+\t* avr/avr.h (VALID_MACHINE_TYPE_ATTRIBUTE,\n+\tVALID_MACHINE_DECL_ATTRIBUTE): Remove.\n+\t* c4x/c4x-protos.h (c4x_valid_type_attribute_p): Remove.\n+\t* c4x/c4x.c (c4x_valid_type_attribute_p): Make static.\n+\t* c4x/c4x.h (VALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n+\t* d30v/d30v.h: Remove obsolete comments.\n+\t* h8300/h8300-protos.h (h8300_valid_machine_decl_attribute): Remove.\n+\t* h8300/h8300.c (h8300_valid_machine_decl_attribute): Rename, make\n+\tstatic.\n+\t* h8300/h8300.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n+\t* i386/cygwin.h (TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define.\n+\t(i386_pe_merge_decl_attributes, MERGE_MACHINE_DECL_ATTRIBUTES,\n+\ti386_pe_valid_type_attributes_p): Remove.\n+\t* i386/i386-protos.h (ix86_valid_decl_attribute_p,\n+\tix86_valid_type_attribute_p): Remove.\n+\t* i386/i386.c (ix86_valid_decl_attribute_p): Remove.\n+\t(ix86_valid_type_attribute_p): Make static.\n+\t* i386/i386.h (VALID_MACHINE_DECL_ATTRIBUTE,\n+\tVALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n+\t* i386/winnt.c (i386_pe_merge_decl_attributes): Move to tree.c.\n+\t* ia64/ia64-protos.h (ia64_valid_type_attribute): Remove.\n+\t* ia64/ia64.c (ia64_valid_type_attribute): Make static.\n+\t* ia64/ia64.h (VALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n+\t* m32r/m32r-protos.h (m32r_valid_machine_decl_attribute): Remove.\n+\t* m32r/m32r.c (m32r_valid_decl_attribute): Make static.\n+\t* m32r/m32r.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n+\t* m68hc11/m68hc11-protos.h (m68hc11_valid_decl_attribute_p,\n+\tm68hc11_valid_type_attribute_p): Remove.\n+\t* m68hc11/m68hc11.c (m68hc11_valid_decl_attribute_p): Remove.\n+\t(m68hc11_valid_type_attribute_p): Make static.\n+\t* m68hc11/m68hc11.h (VALID_MACHINE_DECL_ATTRIBUTE,\n+\tVALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n+\t* mcore/mcore-protos.h (mcore_valid_machine_decl_attribute,\n+\tmcore_merge_machine_decl_attribute): Remove.\n+\t* mcore/mcore.c (mcore_valid_machine_decl_attribute): Rename,\n+\tmake static.\n+\t(mcore_merge_machine_decl_attributes): Move to tree.c.\n+\t* mcore/mcore.h (VALID_MACHINE_DECL_ATTRIBUTE,\n+\tVALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n+\t(TARGET_DLLIMPORT_DECL_ATTRIBUTES): Define.\n+\t* ns32k/ns32k-protos.h (ns32k_valid_decl_attribute_p,\n+\tns32k_valid_type_attribute_p): Remove.\n+\t* ns32k/ns32k.c (ns32k_valid_decl_attribute_p): Remove.\n+\t(ns32k_valid_type_attribute_p): Make static.\n+\t* ns32k/ns32k.h (VALID_MACHINE_DECL_ATTRIBUTE,\n+\tVALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n+\t* rs6000/rs6000-protos.h (rs6000_valid_decl_attribute_p,\n+\trs6000_valid_type_attribute_p): Remove.\n+\t* rs6000/rs6000.c (rs6000_valid_decl_attribute_p): Remove.\n+\t(rs6000_valid_type_attribute_p): Make static.\n+\t* rs6000/rs6000.h (VALID_MACHINE_DECL_ATTRIBUTE,\n+\tVALID_MACHINE_TYPE_ATTRIBUTE): Remove.\n+\t* sh/sh-protos.h (sh_valid_machine_decl_attribute): Remove.\n+\t* sh/sh.c (sh_valid_machine_decl_attribute): Rename, make static.\n+\t* sh/sh.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n+\t* v850/v850-protos.h (v850_valid_machine_decl_attribute): Remove.\n+\t* v850/v850.c (v850_valid_machine_decl_attribute): Rename, make static.\n+\t* v850/v850.h (VALID_MACHINE_DECL_ATTRIBUTE): Remove.\n+\n 2001-06-26  Vladimir Makarov  <vmakarov@toke.toronto.redhat.com>\n \n \t* glimits.h (USHRT_MAX): Use unsigned suffix if int can not hold"}, {"sha": "811a94407176be4bf8b865dfbf5dafd72f116e7d", "filename": "gcc/Makefile.in", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -552,6 +552,8 @@ GCONFIG_H = config.h $(host_xm_file_list)\n HCONFIG_H = hconfig.h $(build_xm_file_list)\n CONFIG_H = $(GCONFIG_H) insn-codes.h insn-flags.h\n TCONFIG_H = tconfig.h $(xm_file_list) insn-codes.h\n+TARGET_H = target.h\n+TARGET_DEF_H = target-def.h\n TM_P_H = tm_p.h $(tm_p_file_list) insn-codes.h\n \n MACHMODE_H = machmode.h machmode.def\n@@ -1148,10 +1150,10 @@ $(srcdir)/c-parse.y: c-parse.in\n \t$(SHELL) $(srcdir)/move-if-change tmp-c-parse.y $(srcdir)/c-parse.y\n \n c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) $(C_TREE_H) \\\n-    $(GGC_H) c-lex.h flags.h function.h output.h $(EXPR_H) \\\n+    $(GGC_H) $(TARGET_H) c-lex.h flags.h function.h output.h $(EXPR_H) \\\n     toplev.h intl.h $(TM_P_H)\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n-    flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h $(TM_P_H)\n+    $(TARGET_H) flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h $(TM_P_H)\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     $(GGC_H)  c-lex.h toplev.h diagnostic.h output.h function.h \\\n     $(RTL_H) $(EXPR_H)\n@@ -1321,7 +1323,7 @@ prefix.o: prefix.c $(CONFIG_H) $(SYSTEM_H) Makefile prefix.h\n convert.o: convert.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h convert.h toplev.h\n \n tree.o : tree.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h function.h toplev.h \\\n-   $(GGC_H) $(HASHTAB_H) output.h $(TM_P_H)\n+   $(GGC_H) $(HASHTAB_H) $(TARGET_H) output.h $(TM_P_H)\n print-tree.o : print-tree.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(GGC_H)\n stor-layout.o : stor-layout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) flags.h \\\n    function.h $(EXPR_H) $(RTL_H) toplev.h $(GGC_H) $(TM_P_H)\n@@ -1535,8 +1537,8 @@ params.o : params.c $(CONFIG_H) $(SYSTEM_H) params.h toplev.h\n \n $(out_object_file): $(out_file) $(CONFIG_H) $(TREE_H) $(GGC_H) \\\n    $(RTL_H) $(REGS_H) hard-reg-set.h real.h insn-config.h conditions.h \\\n-   output.h $(INSN_ATTR_H) $(SYSTEM_H) toplev.h \\\n-   function.h sched-int.h $(TM_P_H)\n+   output.h $(INSN_ATTR_H) $(SYSTEM_H) toplev.h $(TARGET_H) \\\n+   $(TARGET_DEF_H) function.h sched-int.h $(TM_P_H)\n \t$(CC) -c $(ALL_CFLAGS) $(ALL_CPPFLAGS) $(INCLUDES) \\\n \t\t$(out_file) $(OUTPUT_OPTION)\n "}, {"sha": "348701e78aee7000e7a7931fd9962587d29dfe21", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -41,6 +41,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"tm_p.h\"\n #include \"cpplib.h\"\n+#include \"target.h\"\n \n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n enum decl_context\n@@ -1403,7 +1404,7 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \n   if (DECL_P (olddecl))\n     DECL_MACHINE_ATTRIBUTES (newdecl)\n-      = merge_machine_decl_attributes (olddecl, newdecl);\n+      = (*target.merge_decl_attributes) (olddecl, newdecl);\n \n   if (TREE_CODE (newtype) == ERROR_MARK\n       || TREE_CODE (oldtype) == ERROR_MARK)"}, {"sha": "1a9ed5fe06bc281be57ba1f493fc6fe47933f8ed", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -41,6 +41,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"intl.h\"\n #include \"ggc.h\"\n+#include \"target.h\"\n \n /* Nonzero if we've already printed a \"missing braces around initializer\"\n    message within this initializer.  */\n@@ -205,7 +206,7 @@ common_type (t1, t2)\n     return t1;\n \n   /* Merge the attributes.  */\n-  attributes = merge_machine_type_attributes (t1, t2);\n+  attributes = (*target.merge_type_attributes) (t1, t2);\n \n   /* Treat an enum type as the unsigned integer type of the same width.  */\n "}, {"sha": "cdeecd29701c96c52451b9691724e5a6538048f2", "filename": "gcc/config/1750a/1750a.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2F1750a%2F1750a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2F1750a%2F1750a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -33,6 +33,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"regs.h\"\n #include \"output.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n struct datalabel_array datalbl[DATALBL_ARRSIZ];\n int datalbl_ndx = -1;\n@@ -44,7 +46,11 @@ const char *const sectname[4] =\n {\"Init\", \"Normal\", \"Konst\", \"Static\"};\n \n static int which_bit PARAMS ((int));\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n void\n notice_update_cc (exp)\n      rtx exp;"}, {"sha": "3d6e85d52be2274d790192e2ea0053caf391d9e8", "filename": "gcc/config/a29k/a29k.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fa29k%2Fa29k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fa29k%2Fa29k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -39,6 +39,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"reload.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n static int shift_constant_operand PARAMS ((rtx, enum machine_mode, int));\n static void a29k_set_memflags_1 PARAMS ((rtx, int, int, int, int));\n@@ -90,6 +92,10 @@ int a29k_debug_reg_map[FIRST_PSEUDO_REGISTER];\n rtx a29k_compare_op0, a29k_compare_op1;\n int a29k_compare_fp_p;\n \f\n+/* Initialize the GCC target structure.  */\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Returns 1 if OP is a 8-bit constant. */\n \n int"}, {"sha": "37a831352b765218ae8d545555c1f8d65dd6f0b2", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -43,6 +43,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"tm_p.h\"\n #include \"integrate.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* External data.  */\n extern int rtx_equal_function_value_matters;\n@@ -144,6 +146,10 @@ static rtx alpha_emit_xfloating_compare\n #define REG_PV 27\n #define REG_RA 26\n \f\n+/* Initialize the GCC target structure.  */\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Parse target option strings. */\n \n void"}, {"sha": "e550e68a22546daba9991555f52867c1a81c00d0", "filename": "gcc/config/arc/arc-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farc%2Farc-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farc%2Farc-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -62,7 +62,6 @@ extern int shift_operator PARAMS ((rtx, enum machine_mode));\n extern enum arc_function_type arc_compute_function_type PARAMS ((tree));\n extern int arc_comp_type_attributes PARAMS ((tree, tree));\n extern void arc_set_default_type_attributes PARAMS ((tree));\n-extern int arc_valid_machine_decl_attribute PARAMS ((tree, tree, tree, tree));\n extern void arc_setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t\tenum machine_mode, tree,\n \t\t\t\t\t\tint *, int));"}, {"sha": "c5c910690c989a532142e60f86c268e295a93e18", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -38,6 +38,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* Which cpu we're compiling for (NULL(=base), ???).  */\n const char *arc_cpu_string;\n@@ -85,7 +87,14 @@ static int current_insn_set_cc_p;\n static void record_cc_ref PARAMS ((rtx));\n static void arc_init_reg_tables PARAMS ((void));\n static int get_arc_condition_code PARAMS ((rtx));\n+static int arc_valid_decl_attribute PARAMS ((tree, tree, tree, tree));\n+\f\n+/* Initialize the GCC target structure.  */\n+#undef TARGET_VALID_DECL_ATTRIBUTE\n+#define TARGET_VALID_DECL_ATTRIBUTE arc_valid_decl_attribute\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n \n void\n@@ -313,8 +322,8 @@ arc_init_reg_tables ()\n \n /* Return nonzero if IDENTIFIER is a valid decl attribute.  */\n \n-int\n-arc_valid_machine_decl_attribute (type, attributes, identifier, args)\n+static int\n+arc_valid_decl_attribute (type, attributes, identifier, args)\n      tree type ATTRIBUTE_UNUSED;\n      tree attributes ATTRIBUTE_UNUSED;\n      tree identifier;"}, {"sha": "4a78213a58e4014fd92587c198bb4c31d6288384", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -1575,12 +1575,6 @@ do { if ((LOG) != 0) fprintf (FILE, \"\\t.align %d\\n\", 1 << (LOG)); } while (0)\n /* A function address in a call instruction.  */\n #define FUNCTION_MODE SImode\n \n-/* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n-   is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-arc_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n-\n /* A C expression that returns zero if the attributes on TYPE1 and TYPE2 are\n    incompatible, one if they are compatible, and two if they are\n    nearly compatible (which causes a warning to be generated).  */"}, {"sha": "2d3ee1a77d73be3f7fc972fbd038d6dc0f80629f", "filename": "gcc/config/arm/arm-protos.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Farm-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Farm-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -38,9 +38,7 @@ extern unsigned long arm_current_func_type\tPARAMS ((void));\n \n #ifdef TREE_CODE\n extern int    arm_return_in_memory\tPARAMS ((tree));\n-extern int    arm_valid_machine_decl_attribute\tPARAMS ((tree, tree, tree));\n extern int    arm_comp_type_attributes\tPARAMS ((tree, tree));\n-extern int    arm_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n extern void   arm_set_default_type_attributes\tPARAMS ((tree));\n extern void   arm_encode_call_attribute\tPARAMS ((tree, int));\n extern int    arm_function_ok_for_sibcall PARAMS ((tree));\n@@ -187,10 +185,6 @@ extern int  arm_dllexport_name_p \tPARAMS ((const char *));\n extern int  arm_dllimport_name_p \tPARAMS ((const char *));\n \n #ifdef TREE_CODE\n-extern int  arm_pe_valid_machine_decl_attribute\n-\t\t\t\t\tPARAMS ((tree, tree, tree, tree));\n-extern tree arm_pe_merge_machine_decl_attributes\n-\t\t\t\t\tPARAMS ((tree, tree));\n extern void arm_pe_unique_section \tPARAMS ((tree, int));\n extern void arm_pe_encode_section_info \tPARAMS ((tree));\n extern int  arm_dllexport_p \t\tPARAMS ((tree));"}, {"sha": "b673534525bbeccf7996851dd4b7088d316df949", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 65, "deletions": 7, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -45,6 +45,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-pragma.h\"\n #include \"integrate.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* Forward definitions of types.  */\n typedef struct minipool_node    Mnode;\n@@ -100,12 +102,34 @@ static int       current_file_function_operand\tPARAMS ((rtx));\n static Ulong     arm_compute_save_reg_mask\tPARAMS ((void));\n static Ulong     arm_isr_value \t\t\tPARAMS ((tree));\n static Ulong     arm_compute_func_type\t\tPARAMS ((void));\n-\f\n+static int\t arm_valid_type_attribute_p\tPARAMS ((tree, tree,\n+\t\t\t\t\t\t\t tree, tree));\n+static int\t arm_valid_decl_attribute_p\tPARAMS ((tree, tree,\n+\t\t\t\t\t\t\t tree, tree));\n #undef Hint\n #undef Mmode\n #undef Ulong\n #undef Ccstar\n+\f\n+/* Initialize the GCC target structure.  */\n+#ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#undef TARGET_MERGE_DECL_ATTRIBUTES\n+#define TARGET_MERGE_DECL_ATTRIBUTES merge_dllimport_decl_attributes\n+#endif\n \n+#undef TARGET_VALID_TYPE_ATTRIBUTE\n+#define TARGET_VALID_TYPE_ATTRIBUTE arm_valid_type_attribute_p\n+\n+#undef TARGET_VALID_DECL_ATTRIBUTE\n+#ifdef ARM_PE\n+   static int arm_pe_valid_decl_attribute_p PARAMS ((tree, tree, tree, tree));\n+#  define TARGET_VALID_DECL_ATTRIBUTE arm_pe_valid_decl_attribute_p\n+#else\n+#  define TARGET_VALID_DECL_ATTRIBUTE arm_valid_decl_attribute_p\n+#endif\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Obstack for minipool constant handling.  */\n static struct obstack minipool_obstack;\n static char *minipool_startobj;\n@@ -1851,10 +1875,10 @@ arm_pr_long_calls_off (pfile)\n }\n \n \f\n-/* Return nonzero if IDENTIFIER with arguments ARGS is a valid machine specific\n-   attribute for TYPE.  The attributes in ATTRIBUTES have previously been\n-   assigned to TYPE.  */\n-int\n+/* Return nonzero if IDENTIFIER with arguments ARGS is a valid machine\n+   specific attribute for TYPE.  The attributes in ATTRIBUTES have\n+   previously been assigned to TYPE.  */\n+static int\n arm_valid_type_attribute_p (type, attributes, identifier, args)\n      tree type;\n      tree attributes ATTRIBUTE_UNUSED;\n@@ -4093,9 +4117,10 @@ multi_register_push (op, mode)\n      Always assume that this function will be entered in ARM mode,\n      not Thumb mode, and that the caller wishes to be returned to in\n      ARM mode.  */\n-int\n-arm_valid_machine_decl_attribute (decl, attr, args)\n+static int\n+arm_valid_decl_attribute_p (decl, attributes, attr, args)\n      tree decl;\n+     tree attributes ATTRIBUTE_UNUSED;\n      tree attr;\n      tree args;\n {\n@@ -4118,6 +4143,39 @@ arm_valid_machine_decl_attribute (decl, attr, args)\n   \n   return 0;\n }\n+\n+#ifdef ARM_PE\n+\n+/* ARM/PE has three new attributes:\n+   naked - for interrupt functions\n+   dllexport - for exporting a function/variable that will live in a dll\n+   dllimport - for importing a function/variable from a dll\n+\n+   Microsoft allows multiple declspecs in one __declspec, separating\n+   them with spaces.  We do NOT support this.  Instead, use __declspec\n+   multiple times.\n+*/\n+\n+static int\n+arm_pe_valid_decl_attribute_p (decl, attributes, attr, args)\n+     tree decl;\n+     tree attributes;\n+     tree attr;\n+     tree args;\n+{\n+  if (args != NULL_TREE)\n+    return 0;\n+\n+  if (is_attribute_p (\"dllexport\", attr))\n+    return 1;\n+  \n+  if (is_attribute_p (\"dllimport\", attr))\n+    return 1;\n+\n+  return arm_valid_decl_attribute_p (decl, attributes, attr, args);\n+}\n+\n+#endif /* ARM_PE  */\n \f\n /* Routines for use in generating RTL.  */\n rtx"}, {"sha": "88997d790667ccb33d03f81e02851365a72e068b", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -2542,12 +2542,6 @@ extern const char * arm_pic_register_string;\n    offset.  */\n extern int making_const_table;\n \f\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for TYPE.\n-   The attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n-#define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, NAME, ARGS) \\\n-  (arm_valid_type_attribute_p (TYPE, ATTRIBUTES, NAME, ARGS))\n-\n /* If defined, a C expression whose value is zero if the attributes on\n    TYPE1 and TYPE2 are incompatible, one if they are compatible, and\n    two if they are nearly compatible (which causes a warning to be"}, {"sha": "eeea20b2a9d3fcc185ca686bf77f2f39b208b28b", "filename": "gcc/config/arm/coff.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Fcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Fcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcoff.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -41,12 +41,6 @@ Boston, MA 02111-1307, USA.  */\n   { \"marm\", \"mlittle-endian\", \"msoft-float\", \"mapcs-32\", \"mno-thumb-interwork\" }\n #endif\n \f\n-/* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n-   is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-  arm_valid_machine_decl_attribute (DECL, IDENTIFIER, ARGS)\n-\f\n /* This is COFF, but prefer stabs.  */\n #define SDB_DEBUGGING_INFO\n "}, {"sha": "2eb2388be8c7d41770580e64a03a5bf8e4b9de14", "filename": "gcc/config/arm/elf.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Felf.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -190,12 +190,6 @@ Boston, MA 02111-1307, USA.  */\n #define MULTILIB_DEFAULTS \\\n   { \"marm\", \"mlittle-endian\", \"msoft-float\", \"mapcs-32\", \"mno-thumb-interwork\", \"fno-leading-underscore\" }\n #endif\n-\n-/* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n-   is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-  arm_valid_machine_decl_attribute (DECL, IDENTIFIER, ARGS)\n \f\n \n /* This outputs a lot of .req's to define alias for various registers."}, {"sha": "29c470e3f3c2dd6ddcfa94a51905f51db3d0472b", "filename": "gcc/config/arm/pe.c", "status": "modified", "additions": 0, "deletions": 87, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Fpe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Fpe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -31,93 +31,6 @@ Boston, MA 02111-1307, USA.  */\n \n extern int current_function_anonymous_args;\n \n-/* ARM/PE specific attribute support.\n-\n-   ARM/PE has three new attributes:\n-   naked - for interrupt functions\n-   dllexport - for exporting a function/variable that will live in a dll\n-   dllimport - for importing a function/variable from a dll\n-\n-   Microsoft allows multiple declspecs in one __declspec, separating\n-   them with spaces.  We do NOT support this.  Instead, use __declspec\n-   multiple times.\n-*/\n-\n-/* Return nonzero if ATTR is a valid attribute for DECL.\n-   ATTRIBUTES are any existing attributes and ARGS are the arguments\n-   supplied with ATTR.  */\n-\n-int\n-arm_pe_valid_machine_decl_attribute (decl, attributes, attr, args)\n-     tree decl;\n-     tree attributes ATTRIBUTE_UNUSED;\n-     tree attr;\n-     tree args;\n-{\n-  if (args != NULL_TREE)\n-    return 0;\n-\n-  if (is_attribute_p (\"dllexport\", attr))\n-    return 1;\n-  \n-  if (is_attribute_p (\"dllimport\", attr))\n-    return 1;\n-\n-  return arm_valid_machine_decl_attribute (decl, attr, args);\n-}\n-\n-/* Merge attributes in decls OLD and NEW.\n-\n-   This handles the following situation:\n-\n-   __declspec (dllimport) int foo;\n-   int foo;\n-\n-   The second instance of `foo' nullifies the dllimport.  */\n-\n-tree\n-arm_pe_merge_machine_decl_attributes (old, new)\n-     tree old, new;\n-{\n-  tree a;\n-  int delete_dllimport_p;\n-\n-  old = DECL_MACHINE_ATTRIBUTES (old);\n-  new = DECL_MACHINE_ATTRIBUTES (new);\n-\n-  /* What we need to do here is remove from `old' dllimport if it doesn't\n-     appear in `new'.  dllimport behaves like extern: if a declaration is\n-     marked dllimport and a definition appears later, then the object\n-     is not dllimport'd.  */\n-\n-  if (lookup_attribute (\"dllimport\", old) != NULL_TREE\n-      && lookup_attribute (\"dllimport\", new) == NULL_TREE)\n-    delete_dllimport_p = 1;\n-  else\n-    delete_dllimport_p = 0;\n-\n-  a = merge_attributes (old, new);\n-\n-  if (delete_dllimport_p)\n-    {\n-      tree prev,t;\n-\n-      /* Scan the list for dllimport and delete it.  */\n-      for (prev = NULL_TREE, t = a; t; prev = t, t = TREE_CHAIN (t))\n-\t{\n-\t  if (is_attribute_p (\"dllimport\", TREE_PURPOSE (t)))\n-\t    {\n-\t      if (prev == NULL_TREE)\n-\t\ta = TREE_CHAIN (a);\n-\t      else\n-\t\tTREE_CHAIN (prev) = TREE_CHAIN (t);\n-\t      break;\n-\t    }\n-\t}\n-    }\n-\n-  return a;\n-}\n \f\n /* Return non-zero if DECL is a dllexport'd object.  */\n "}, {"sha": "82818861c191807f604651dea6179723a732f77a", "filename": "gcc/config/arm/pe.h", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Fpe.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Farm%2Fpe.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fpe.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -38,6 +38,10 @@ Boston, MA 02111-1307, USA.  */\n #undef  TARGET_VERSION\n #define TARGET_VERSION fputs (\" (ARM/pe)\", stderr)\n \n+/* Get tree.c to declare a target-specific specialization of\n+   merge_decl_attributes.  */\n+#define TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+\n /* Support the __declspec keyword by turning them into attributes.\n    We currently only support: naked, dllimport, and dllexport.\n    Note that the current way we do this may result in a collision with\n@@ -91,16 +95,6 @@ Boston, MA 02111-1307, USA.  */\n   1,1,1\t\t\t\\\n }\n \f\n-/* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n-   is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-#undef  VALID_MACHINE_DECL_ATTRIBUTE\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-  arm_pe_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n-\n-#define MERGE_MACHINE_DECL_ATTRIBUTES(OLD, NEW) \\\n-  arm_pe_merge_machine_decl_attributes ((OLD), (NEW))\n-\n /* In addition to the stuff done in arm.h, we must mark dll symbols specially.\n    Definitions of dllexport'd objects install some info in the .drectve\n    section.  References to dllimport'd objects are fetched indirectly via"}, {"sha": "3d99a313b9405c3ea2ce2e08cb974967c75bce12", "filename": "gcc/config/avr/avr-protos.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Favr%2Favr-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Favr%2Favr-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -50,12 +50,6 @@ extern void   encode_section_info          PARAMS ((tree decl));\n extern void   asm_output_section_name      PARAMS ((FILE *file, tree decl,\n \t\t\t\t\t\t   const char *name,\n \t\t\t\t\t\t   int reloc));\n-extern int    valid_machine_type_attribute PARAMS ((tree type, tree attributes,\n-\t\t\t\t\t\t   tree identifier,\n-\t\t\t\t\t\t   tree args));\n-extern int    valid_machine_decl_attribute PARAMS ((tree decl, tree attributes,\n-\t\t\t\t\t\t   tree attr, tree args));\n-\n extern int    avr_progmem_p                PARAMS ((tree decl));\n \n "}, {"sha": "7ca4ab788139c9e5bb10404ac27595e72467d6eb", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -38,6 +38,8 @@\n #include \"function.h\"\n #include \"recog.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* Maximal allowed offset for an address in the LD command */\n #define MAX_LD_OFFSET(MODE) (64 - (signed)GET_MODE_SIZE (MODE))\n@@ -56,6 +58,8 @@ static int    compare_sign_p       PARAMS ((rtx insn));\n static int    reg_was_0            PARAMS ((rtx insn, rtx op));\n static int    io_address_p         PARAMS ((rtx x, int size));\n void          debug_hard_reg_set   PARAMS ((HARD_REG_SET set));\n+static int    avr_valid_type_attribute PARAMS ((tree, tree, tree, tree));\n+static int    avr_valid_decl_attribute PARAMS ((tree, tree, tree, tree));\n \n /* Allocate registers from r25 to r8 for parameters for function calls */\n #define FIRST_CUM_REG 26\n@@ -165,7 +169,16 @@ static const struct mcu_type_s avr_mcu_types[] = {\n };\n \n int avr_case_values_threshold = 30000;\n+\f\n+/* Initialize the GCC target structure.  */\n+#undef TARGET_VALID_DECL_ATTRIBUTE\n+#define TARGET_VALID_DECL_ATTRIBUTE avr_valid_decl_attribute\n \n+#undef TARGET_VALID_TYPE_ATTRIBUTE\n+#define TARGET_VALID_TYPE_ATTRIBUTE avr_valid_type_attribute\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n void\n avr_override_options ()\n {\n@@ -4664,8 +4677,8 @@ class_likely_spilled_p (c)\n \n /* Only `progmem' attribute valid for type.  */\n \n-int\n-valid_machine_type_attribute(type, attributes, identifier, args)\n+static int\n+avr_valid_type_attribute (type, attributes, identifier, args)\n      tree type ATTRIBUTE_UNUSED;\n      tree attributes ATTRIBUTE_UNUSED;\n      tree identifier;\n@@ -4684,8 +4697,8 @@ valid_machine_type_attribute(type, attributes, identifier, args)\n    prologue interrupts are enabled;\n    naked     - don't generate function prologue/epilogue and `ret' command.  */\n \n-int\n-valid_machine_decl_attribute (decl, attributes, attr, args)\n+static int\n+avr_valid_decl_attribute (decl, attributes, attr, args)\n      tree decl;\n      tree attributes ATTRIBUTE_UNUSED;\n      tree attr;"}, {"sha": "25aeca3854846d6c2b2fe86fe104b58c876ace93", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -2837,20 +2837,6 @@ extern int avr_case_values_threshold;\n    of arguments that the function accepts.  Some people think a larger\n    threshold should be used on RISC machines.  */\n \n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n-/* `VALID_MACHINE_DECL_ATTRIBUTE (DECL, ATTRIBUTES, IDENTIFIER, ARGS)'\n-   If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-\n-#define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-     valid_machine_type_attribute(TYPE, ATTRIBUTES, IDENTIFIER, ARGS)\n-/* `VALID_MACHINE_TYPE_ATTRIBUTE (TYPE, ATTRIBUTES, IDENTIFIER, ARGS)'\n-   If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for TYPE.\n-   The attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n-\n #define DOLLARS_IN_IDENTIFIERS 0\n /* Define this macro to control use of the character `$' in identifier\n    names.  0 means `$' is not allowed by default; 1 means it is"}, {"sha": "27bbbdbb6e7fd1ab10e25601d6382c15b23e4ecb", "filename": "gcc/config/c4x/c4x-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -61,8 +61,6 @@ extern struct rtx_def *c4x_function_arg PARAMS ((CUMULATIVE_ARGS *,\n \n extern void c4x_encode_section_info PARAMS ((tree));\n \n-extern int c4x_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n-\n #endif /* TREE_CODE */\n \n "}, {"sha": "bf30de340bf1575b1666d5f3b17a25b4a6edc8b2", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -47,6 +47,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-lex.h\"\n #include \"c-pragma.h\"\n #include \"c4x-protos.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n rtx smulhi3_libfunc;\n rtx umulhi3_libfunc;\n@@ -187,7 +189,14 @@ static int c4x_parse_pragma PARAMS ((const char *, tree *, tree *));\n static int c4x_r11_set_p PARAMS ((rtx));\n static int c4x_rptb_valid_p PARAMS ((rtx, rtx));\n static int c4x_label_ref_used_p PARAMS ((rtx, rtx));\n-\n+static int c4x_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n+\f\n+/* Initialize the GCC target structure.  */\n+#undef TARGET_VALID_TYPE_ATTRIBUTE\n+#define TARGET_VALID_TYPE_ATTRIBUTE c4x_valid_type_attribute_p\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Called to register all of our global variables with the garbage\n    collector.  */\n \n@@ -4741,7 +4750,7 @@ c4x_set_default_attributes(decl, attributes)\n    specific attribute for TYPE.  The attributes in ATTRIBUTES have\n    previously been assigned to TYPE.  */\n \n-int\n+static int\n c4x_valid_type_attribute_p (type, attributes, identifier, args)\n      tree type;\n      tree attributes ATTRIBUTE_UNUSED;"}, {"sha": "963752649d3f3f40dfa78a81c0441543c7213f3c", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -2446,9 +2446,6 @@ do {\t\t\t\t\t\t\\\n #define SET_DEFAULT_DECL_ATTRIBUTES(DECL, ATTRIBUTES) \\\n   c4x_set_default_attributes (DECL, &ATTRIBUTES)\n \n-#define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, NAME, ARGS) \\\n-  (c4x_valid_type_attribute_p (TYPE, ATTRIBUTES, NAME, ARGS))\n-\n /* Assembler Commands for Alignment.  */\n \n #define ASM_OUTPUT_SKIP(FILE, SIZE) \\"}, {"sha": "42a5ad7ff38756452245ce89549820d4af19aca5", "filename": "gcc/config/clipper/clipper.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fclipper%2Fclipper.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fclipper%2Fclipper.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -37,13 +37,19 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"recog.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n extern char regs_ever_live[];\n \n extern int frame_pointer_needed;\n \n static int frame_size;\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Compute size of a clipper stack frame where 'lsize' is the required\n    space for local variables.  */\n "}, {"sha": "8589fb4c2dff9a0ecfe597f06db60ac8034b0a79", "filename": "gcc/config/convex/convex.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fconvex%2Fconvex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fconvex%2Fconvex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -33,6 +33,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"expr.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* Tables used in convex.h */\n \n@@ -62,7 +64,11 @@ static int frame_argblock_size;\n static rtx convert_arg_pushes ();\n #endif\n static void expand_movstr_call PARAMS ((rtx *));\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Here from OVERRIDE_OPTIONS at startup.  Initialize constant tables. */\n \n void"}, {"sha": "c63dd528c1c962ca146959d7f0dbe0650a584233", "filename": "gcc/config/d30v/d30v.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fd30v%2Fd30v.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fd30v%2Fd30v.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -39,6 +39,8 @@\n #include \"function.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n static void d30v_print_operand_memory_reference PARAMS ((FILE *, rtx));\n static void d30v_build_long_insn PARAMS ((HOST_WIDE_INT, HOST_WIDE_INT,\n@@ -76,7 +78,10 @@ enum reg_class regno_reg_class[FIRST_PSEUDO_REGISTER];\n \n /* Map class letter into register class */\n enum reg_class reg_class_from_letter[256];\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n    sense on a particular target machine.  You can define a macro"}, {"sha": "f072cfb96f84fb62b072e43a4f50f00a3c48c81d", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -5889,16 +5889,6 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n    must also be defined).  */\n /* #define HANDLE_WEAK_PRAGMA */\n \n-/* If defined, a C expression whose value is nonzero if IDENTIFIER with\n-   arguments ARGS is a valid machine specific attribute for DECL.  The\n-   attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-/* #define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) */\n-\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER with\n-   arguments ARGS is a valid machine specific attribute for TYPE.  The\n-   attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n-/* #define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, IDENTIFIER, ARGS) */\n-\n /* If defined, a C expression whose value is zero if the attributes on TYPE1\n    and TYPE2 are incompatible, one if they are compatible, and two if they are\n    nearly compatible (which causes a warning to be generated).  */"}, {"sha": "2a333ea06d65a7afdb4d0f65e839e9c34315141c", "filename": "gcc/config/dsp16xx/dsp16xx.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -38,6 +38,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"recog.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n const char *text_seg_name;\n const char *rsect_text;\n@@ -145,7 +147,11 @@ static const char *const lshift_right_asm_first[] =\n };\n \n static int reg_save_size PARAMS ((void));\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n int \n hard_regno_mode_ok (regno, mode)\n      int regno;"}, {"sha": "41b33631efa6fe17136e6299711f2c5be1b802b4", "filename": "gcc/config/elxsi/elxsi.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Felxsi%2Felxsi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Felxsi%2Felxsi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -27,6 +27,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"output.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n extern const char *reg_names[];\n rtx cmp_op0=0, cmp_op1=0;\n@@ -35,7 +37,11 @@ rtx cmp_op0=0, cmp_op1=0;\n static const char *const cmp_tab[] = {\n     \"gt\", \"gt\", \"eq\", \"eq\", \"ge\", \"ge\", \"lt\", \"lt\", \"ne\", \"ne\",\n     \"le\", \"le\" };\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* type is the index into the above table */\n /* s is \"\" for signed, or \"u\" for unsigned */\n const char *"}, {"sha": "51a5c26d49661c0721d58bb6f86e31a41a3258aa", "filename": "gcc/config/fr30/fr30.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Ffr30%2Ffr30.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Ffr30%2Ffr30.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -42,6 +42,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"except.h\"\n #include \"function.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /*}}}*/\n /*{{{  Function Prologues & Epilogues */ \n@@ -136,7 +138,11 @@ static struct fr30_frame_info \tzero_frame_info;\n #if UNITS_PER_WORD == 4\n #define WORD_ALIGN(SIZE) (((SIZE) + 3) & ~3)\n #endif\n-     \n+\f\n+/* Initialize the GCC target structure.  */\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Returns the number of bytes offset between FROM_REG and TO_REG\n    for the current function.  As a side effect it fills in the \n    current_frame_info structure, if the data is available.  */"}, {"sha": "0c3aa2967e426923f835949b2e3af6b805f2aebe", "filename": "gcc/config/h8300/h8300-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -61,8 +61,6 @@ extern int nshift_operator PARAMS ((rtx, enum machine_mode));\n #ifdef TREE_CODE\n extern struct rtx_def *function_arg PARAMS ((CUMULATIVE_ARGS *,\n \t\t\t\t\t     enum machine_mode, tree, int));\n-extern int h8300_valid_machine_decl_attribute PARAMS ((tree, tree, tree,\n-\t\t\t\t\t\t       tree));\n extern int h8300_funcvec_function_p PARAMS ((tree));\n extern int h8300_eightbit_data_p PARAMS ((tree));\n extern int h8300_tiny_data_p PARAMS ((tree));"}, {"sha": "9fd2c3218fedd04202eb655d08ffe222f2086e84", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -40,6 +40,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-pragma.h\"\n #include \"tm_p.h\"\n #include \"ggc.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* Forward declarations.  */\n static int h8300_interrupt_function_p PARAMS ((tree));\n@@ -51,6 +53,7 @@ static unsigned int compute_saved_regs PARAMS ((void));\n static void push PARAMS ((FILE *, int));\n static void pop PARAMS ((FILE *, int));\n static const char *cond_string PARAMS ((enum rtx_code));\n+static int h8300_valid_decl_attribute PARAMS ((tree, tree, tree, tree));\n \n /* CPU_TYPE, says what cpu we're compiling for.  */\n int cpu_type;\n@@ -90,7 +93,13 @@ static const char *const h8_pop_ops[2] = { \"pop\", \"pop.l\" };\n static const char *const h8_mov_ops[2] = { \"mov.w\", \"mov.l\" };\n \n const char *h8_push_op, *h8_pop_op, *h8_mov_op;\n+\f\n+/* Initialize the GCC target structure.  */\n+#undef TARGET_VALID_DECL_ATTRIBUTE\n+#define TARGET_VALID_DECL_ATTRIBUTE h8300_valid_decl_attribute\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Initialize various cpu specific globals at start up.  */\n \n void\n@@ -3022,8 +3031,8 @@ h8300_tiny_data_p (decl)\n    tiny_data: This variable lives in the tiny data area and can be\n    referenced with 16-bit absolute memory references.  */\n \n-int\n-h8300_valid_machine_decl_attribute (decl, attributes, attr, args)\n+static int\n+h8300_valid_decl_attribute (decl, attributes, attr, args)\n      tree decl;\n      tree attributes ATTRIBUTE_UNUSED;\n      tree attr;"}, {"sha": "47450e51d466cb5b02d799c6f45e3ce7dd18cda7", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -998,12 +998,6 @@ struct cum_arg\n    so give the MEM rtx a byte's mode.  */\n #define FUNCTION_MODE QImode\n \n-/* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n-   is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-h8300_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n-\n #define ADJUST_INSN_LENGTH(INSN, LENGTH) \\\n   LENGTH += h8300_adjust_insn_length (INSN, LENGTH);\n "}, {"sha": "ebd1d85ef3a6efdc275acc507e5d97f39f4aba62", "filename": "gcc/config/i370/i370.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi370%2Fi370.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi370%2Fi370.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -41,6 +41,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-pragma.h\"\n #include \"c-lex.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n extern FILE *asm_out_file;\n \n@@ -283,7 +285,11 @@ static const unsigned char ebcasc[256] =\n  /*F8   8     9                                     */\n      0x38, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF\n };\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Map characters from one character set to another.\n    C is the character to be translated.  */\n "}, {"sha": "a1c7c332384623e28c7105c5c6258d5ee55186b8", "filename": "gcc/config/i386/cygwin.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi386%2Fcygwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi386%2Fcygwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygwin.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -86,6 +86,10 @@ Boston, MA 02111-1307, USA. */\n \t\t       \"-idirafter /usr/include/mingw\"\n #endif\n \n+/* Get tree.c to declare a target-specific specialization of\n+   merge_decl_attributes.  */\n+#define TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+\n /* Support the __declspec keyword by turning them into attributes.\n    We currently only support: dllimport and dllexport.\n    Note that the current way we do this may result in a collision with\n@@ -199,11 +203,6 @@ extern int i386_pe_valid_decl_attribute_p PARAMS ((TREE, TREE, TREE, TREE));\n   i386_pe_valid_type_attribute_p (TYPE, ATTRIBUTES, IDENTIFIER, ARGS)\n extern int i386_pe_valid_type_attribute_p PARAMS ((TREE, TREE, TREE, TREE));\n \n-extern union tree_node *i386_pe_merge_decl_attributes PARAMS ((TREE, TREE));\n-#define MERGE_MACHINE_DECL_ATTRIBUTES(OLD, NEW) \\\n-  i386_pe_merge_decl_attributes ((OLD), (NEW))\n-extern TREE i386_pe_merge_decl_attributes PARAMS ((TREE, TREE));\n-\n /* Used to implement dllexport overriding dllimport semantics.  It's also used\n    to handle vtables - the first pass won't do anything because\n    DECL_CONTEXT (DECL) will be 0 so i386_pe_dll{ex,im}port_p will return 0."}, {"sha": "88706c86865156879f385fd6ce118ceefaca95d1", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -169,8 +169,6 @@ extern rtx ix86_expand_builtin PARAMS ((tree, rtx, rtx, enum machine_mode, int))\n #endif\n \n #ifdef TREE_CODE\n-extern int ix86_valid_decl_attribute_p PARAMS ((tree, tree, tree, tree));\n-extern int ix86_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n extern int ix86_comp_type_attributes PARAMS ((tree, tree));\n extern int ix86_return_pops_args PARAMS ((tree, tree, int));\n "}, {"sha": "21ceedc3b4528dcd09ef759b5a8ba5164c911b86", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -40,6 +40,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"basic-block.h\"\n #include \"ggc.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n #ifndef CHECK_STACK_LIMIT\n #define CHECK_STACK_LIMIT -1\n@@ -605,6 +607,18 @@ static int ix86_fp_comparison_sahf_cost PARAMS ((enum rtx_code code));\n static int ix86_fp_comparison_cost PARAMS ((enum rtx_code code));\n static int ix86_save_reg PARAMS ((int, int));\n static void ix86_compute_frame_layout PARAMS ((struct ix86_frame *));\n+static int ix86_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n+\f\n+/* Initialize the GCC target structure.  */\n+#ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#undef TARGET_MERGE_DECL_ATTRIBUTES\n+#define TARGET_MERGE_DECL_ATTRIBUTES merge_dllimport_decl_attributes\n+#endif\n+\n+#undef TARGET_VALID_TYPE_ATTRIBUTE\n+#define TARGET_VALID_TYPE_ATTRIBUTE ix86_valid_type_attribute_p\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n    sense on a particular target machine.  You can define a macro\n@@ -859,25 +873,11 @@ optimization_options (level, size)\n #endif\n }\n \f\n-/* Return nonzero if IDENTIFIER with arguments ARGS is a valid machine specific\n-   attribute for DECL.  The attributes in ATTRIBUTES have previously been\n-   assigned to DECL.  */\n-\n-int\n-ix86_valid_decl_attribute_p (decl, attributes, identifier, args)\n-     tree decl ATTRIBUTE_UNUSED;\n-     tree attributes ATTRIBUTE_UNUSED;\n-     tree identifier ATTRIBUTE_UNUSED;\n-     tree args ATTRIBUTE_UNUSED;\n-{\n-  return 0;\n-}\n-\n /* Return nonzero if IDENTIFIER with arguments ARGS is a valid machine specific\n    attribute for TYPE.  The attributes in ATTRIBUTES have previously been\n    assigned to TYPE.  */\n \n-int\n+static int\n ix86_valid_type_attribute_p (type, attributes, identifier, args)\n      tree type;\n      tree attributes ATTRIBUTE_UNUSED;"}, {"sha": "177e1321e370d53d16676548a4523ee3cb238405", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -2240,20 +2240,6 @@ do\t\t\t\t\t\t\t\t\t\\\n while (0)\n \n \f\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, NAME, ARGS) \\\n-  (ix86_valid_decl_attribute_p (DECL, ATTRIBUTES, NAME, ARGS))\n-\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for TYPE.\n-   The attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n-\n-#define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, NAME, ARGS) \\\n-  (ix86_valid_type_attribute_p (TYPE, ATTRIBUTES, NAME, ARGS))\n-\n /* If defined, a C expression whose value is zero if the attributes on\n    TYPE1 and TYPE2 are incompatible, one if they are compatible, and\n    two if they are nearly compatible (which causes a warning to be"}, {"sha": "676c4bddd5da2644a3ca41762275d3b0b8ad3eb2", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -95,58 +95,6 @@ i386_pe_valid_type_attribute_p (type, attributes, attr, args)\n   return ix86_valid_type_attribute_p (type, attributes, attr, args);\n }\n \n-/* Merge attributes in decls OLD and NEW.\n-\n-   This handles the following situation:\n-\n-   __declspec (dllimport) int foo;\n-   int foo;\n-\n-   The second instance of `foo' nullifies the dllimport.  */\n-\n-tree\n-i386_pe_merge_decl_attributes (old, new)\n-     tree old, new;\n-{\n-  tree a;\n-  int delete_dllimport_p;\n-\n-  old = DECL_MACHINE_ATTRIBUTES (old);\n-  new = DECL_MACHINE_ATTRIBUTES (new);\n-\n-  /* What we need to do here is remove from `old' dllimport if it doesn't\n-     appear in `new'.  dllimport behaves like extern: if a declaration is\n-     marked dllimport and a definition appears later, then the object\n-     is not dllimport'd.  */\n-\n-  if (lookup_attribute (\"dllimport\", old) != NULL_TREE\n-      && lookup_attribute (\"dllimport\", new) == NULL_TREE)\n-    delete_dllimport_p = 1;\n-  else\n-    delete_dllimport_p = 0;\n-\n-  a = merge_attributes (old, new);\n-\n-  if (delete_dllimport_p)\n-    {\n-      tree prev,t;\n-\n-      /* Scan the list for dllimport and delete it.  */\n-      for (prev = NULL_TREE, t = a; t; prev = t, t = TREE_CHAIN (t))\n-\t{\n-\t  if (is_attribute_p (\"dllimport\", TREE_PURPOSE (t)))\n-\t    {\n-\t      if (prev == NULL_TREE)\n-\t\ta = TREE_CHAIN (a);\n-\t      else\n-\t\tTREE_CHAIN (prev) = TREE_CHAIN (t);\n-\t      break;\n-\t    }\n-\t}\n-    }\n-\n-  return a;\n-}\n \f\n /* Return the type that we should use to determine if DECL is\n    imported or exported.  */"}, {"sha": "08e099b2eb43b77a4cac1ba696b4aba646a5d49a", "filename": "gcc/config/i860/i860.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi860%2Fi860.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi860%2Fi860.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -42,6 +42,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"function.h\"\n #include \"expr.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n static rtx find_addr_reg PARAMS ((rtx));\n static int reg_clobbered_p PARAMS ((rtx, rtx));\n@@ -60,6 +62,10 @@ const char *i860_reg_prefix = I860_REG_PREFIX;\n \n rtx i860_compare_op0, i860_compare_op1;\n \f\n+/* Initialize the GCC target structure.  */\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Return non-zero if this pattern, can be evaluated safely, even if it\n    was not asked for.  */\n int"}, {"sha": "fbdc939c0d0011fd3119999b02bb48ae31355d25", "filename": "gcc/config/i960/i960.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi960%2Fi960.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fi960%2Fi960.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -44,6 +44,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-pragma.h\"\n #include \"c-lex.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -86,7 +88,11 @@ static int ret_label = 0;\n ((TYPE_ARG_TYPES (TREE_TYPE (FNDECL)) != 0\t\t\t\t\t\t      \\\n   && (TREE_VALUE (tree_last (TYPE_ARG_TYPES (TREE_TYPE (FNDECL)))) != void_type_node))    \\\n  || current_function_varargs)\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Initialize variables before compiling any files.  */\n \n void"}, {"sha": "f0bae81e5cffcdc1c105609250029c193379bd80", "filename": "gcc/config/ia64/ia64-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fia64%2Fia64-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -124,7 +124,6 @@ extern void ia64_function_arg_advance PARAMS((CUMULATIVE_ARGS *,\n extern int ia64_return_in_memory PARAMS((tree));\n extern void ia64_asm_output_external PARAMS((FILE *, tree, const char *));\n \n-extern int ia64_valid_type_attribute PARAMS((tree, tree, tree, tree));\n extern void ia64_encode_section_info PARAMS((tree));\n #endif /* TREE_CODE */\n "}, {"sha": "c503a673460e22632fd034a31f22b97ea2f0bca7", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -42,6 +42,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"basic-block.h\"\n #include \"toplev.h\"\n #include \"sched-int.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* This is used for communication between ASM_OUTPUT_LABEL and\n    ASM_OUTPUT_LABELREF.  */\n@@ -134,6 +136,13 @@ static rtx ia64_expand_compare_and_swap PARAMS ((enum machine_mode, int,\n static rtx ia64_expand_lock_test_and_set PARAMS ((enum machine_mode,\n \t\t\t\t\t\t  tree, rtx));\n static rtx ia64_expand_lock_release PARAMS ((enum machine_mode, tree, rtx));\n+static int ia64_valid_type_attribute PARAMS((tree, tree, tree, tree));\n+\f\n+/* Initialize the GCC target structure.  */\n+#undef TARGET_VALID_TYPE_ATTRIBUTE\n+#define TARGET_VALID_TYPE_ATTRIBUTE ia64_valid_type_attribute\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n \f\n /* Return 1 if OP is a valid operand for the MEM of a CALL insn.  */\n \n@@ -6524,7 +6533,7 @@ ia64_epilogue_uses (regno)\n \n /* Return true if IDENTIFIER is a valid attribute for TYPE.  */\n \n-int\n+static int\n ia64_valid_type_attribute (type, attributes, identifier, args)\n      tree type;\n      tree attributes ATTRIBUTE_UNUSED;"}, {"sha": "cb2747e3571522f2f159b2bd6d92af650bac7cdb", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -2756,13 +2756,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define HANDLE_SYSV_PRAGMA\n \n-/* If defined, a C expression whose value is nonzero if IDENTIFIER with\n-   arguments ARGS is a valid machine specific attribute for TYPE.  The\n-   attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n-\n-#define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-  ia64_valid_type_attribute (TYPE, ATTRIBUTES, IDENTIFIER, ARGS)\n-\n /* In rare cases, correct code generation requires extra machine dependent\n    processing between the second jump optimization pass and delayed branch\n    scheduling.  On those machines, define this macro as a C statement to act on"}, {"sha": "5ab4a4ce1a65f5ca2e531bdcb7986e55a94f3c5a", "filename": "gcc/config/m32r/m32r-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -36,7 +36,6 @@ extern void   m32r_asm_file_start\t\tPARAMS ((FILE *));\n extern void   m32r_sched_init \t\t\tPARAMS ((FILE *, int));\n extern int    direct_return \t\t\tPARAMS ((void));\n #ifdef TREE_CODE\n-extern int    m32r_valid_machine_decl_attribute\tPARAMS ((tree, tree, tree, tree));\n extern int    m32r_comp_type_attributes\t\tPARAMS ((tree, tree));\n extern void   m32r_select_section\t\tPARAMS ((tree, int));\n extern void   m32r_encode_section_info\t\tPARAMS ((tree));"}, {"sha": "a7763a2c25c7b9bc58edd37503c5b47d7613ed03", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -36,6 +36,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"m32r-protos.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -59,7 +61,15 @@ int m32r_sched_odd_word_p;\n static void  init_reg_tables\t\t\tPARAMS ((void));\n static void  block_move_call\t\t\tPARAMS ((rtx, rtx, rtx));\n static int   m32r_is_insn\t\t\tPARAMS ((rtx));\n+static int   m32r_valid_decl_attribute\t\tPARAMS ((tree, tree,\n+\t\t\t\t\t\t\t tree, tree));\n+\f\n+/* Initialize the GCC target structure.  */\n+#undef TARGET_VALID_DECL_ATTRIBUTE\n+#define TARGET_VALID_DECL_ATTRIBUTE m32r_valid_decl_attribute\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Called by OVERRIDE_OPTIONS to initialize various things.  */\n \n void\n@@ -242,8 +252,8 @@ init_idents PARAMS ((void))\n \n /* Return nonzero if IDENTIFIER is a valid decl attribute.  */\n \n-int\n-m32r_valid_machine_decl_attribute (type, attributes, identifier, args)\n+static int\n+m32r_valid_decl_attribute (type, attributes, identifier, args)\n      tree type ATTRIBUTE_UNUSED;\n      tree attributes ATTRIBUTE_UNUSED;\n      tree identifier;"}, {"sha": "8600e6ed7039bd6eb5d0b58c74c6c6d87bea5752", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -2112,12 +2112,6 @@ extern char m32r_punct_chars[];\n /* A function address in a call instruction.  */\n #define FUNCTION_MODE SImode\n \n-/* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n-   is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-m32r_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n-\n /* A C expression that returns zero if the attributes on TYPE1 and TYPE2 are\n    incompatible, one if they are compatible, and two if they are\n    nearly compatible (which causes a warning to be generated).  */"}, {"sha": "8c659b0571ea49be71499de4eff4b9d7fedc5ad4", "filename": "gcc/config/m68hc11/m68hc11-protos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -43,10 +43,6 @@ extern void m68hc11_function_arg_advance PARAMS((CUMULATIVE_ARGS*,\n                                                  enum machine_mode,\n                                                  tree,\n                                                  int));\n-extern int m68hc11_valid_decl_attribute_p PARAMS((tree, tree,\n-\t\t\t\t\t          tree, tree));\n-extern int m68hc11_valid_type_attribute_p PARAMS((tree, tree,\n-\t\t\t\t\t\t  tree, tree));\n extern int m68hc11_comp_type_attributes PARAMS((tree, tree));\n extern void m68hc11_set_default_type_attributes PARAMS((tree));\n extern void m68hc11_encode_section_info PARAMS((tree));"}, {"sha": "906c368f00aba757c08248c64f0de3f114686516", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -52,6 +52,8 @@ Boston, MA 02111-1307, USA.\n #include \"basic-block.h\"\n #include \"function.h\"\n #include \"ggc.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n static void print_options PARAMS ((FILE *));\n static void emit_move_after_reload PARAMS ((rtx, rtx, rtx));\n@@ -64,6 +66,8 @@ static rtx m68hc11_expand_compare PARAMS((enum rtx_code, rtx, rtx));\n static int must_parenthesize PARAMS ((rtx));\n static int m68hc11_shift_cost PARAMS ((enum machine_mode, rtx, int));\n static int m68hc11_auto_inc_p PARAMS ((rtx));\n+static int m68hc11_valid_type_attribute_p PARAMS((tree, tree,\n+\t\t\t\t\t\t  tree, tree));\n \n void create_regs_rtx PARAMS ((void));\n \n@@ -201,7 +205,13 @@ const char *m68hc11_soft_reg_count;\n static void m68hc11_add_gc_roots PARAMS ((void));\n \n static int nb_soft_regs;\n+\f\n+/* Initialize the GCC target structure.  */\n+#undef TARGET_VALID_TYPE_ATTRIBUTE\n+#define TARGET_VALID_TYPE_ATTRIBUTE m68hc11_valid_type_attribute_p\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n int\n m68hc11_override_options ()\n {\n@@ -1115,25 +1125,11 @@ m68hc11_initialize_trampoline (tramp, fnaddr, cxt)\n \f\n /* Declaration of types.  */\n \n-/* If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-\n-int\n-m68hc11_valid_decl_attribute_p (decl, attributes, identifier, args)\n-     tree decl ATTRIBUTE_UNUSED;\n-     tree attributes ATTRIBUTE_UNUSED;\n-     tree identifier ATTRIBUTE_UNUSED;\n-     tree args ATTRIBUTE_UNUSED;\n-{\n-  return 0;\n-}\n-\n /* If defined, a C expression whose value is nonzero if IDENTIFIER\n    with arguments ARGS is a valid machine specific attribute for TYPE.\n    The attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n \n-int\n+static int\n m68hc11_valid_type_attribute_p (type, attributes, identifier, args)\n      tree type;\n      tree attributes ATTRIBUTE_UNUSED;"}, {"sha": "e9c38dea0b29ad1d3e319d4ad2e1c3708106cde3", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -1194,21 +1194,6 @@ typedef struct m68hc11_args\n   m68hc11_initialize_trampoline ((TRAMP), (FNADDR), (CXT))\n \n \f\n-\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, NAME, ARGS) \\\n-  (m68hc11_valid_decl_attribute_p (DECL, ATTRIBUTES, NAME, ARGS))\n-\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for TYPE.\n-   The attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n-\n-#define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, NAME, ARGS) \\\n-  (m68hc11_valid_type_attribute_p (TYPE, ATTRIBUTES, NAME, ARGS))\n-\n /* If defined, a C expression whose value is zero if the attributes on\n    TYPE1 and TYPE2 are incompatible, one if they are compatible, and\n    two if they are nearly compatible (which causes a warning to be"}, {"sha": "e377e77c15efec964e107db9430383d33efb1462", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -34,6 +34,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* Needed for use_return_insn.  */\n #include \"flags.h\"\n@@ -75,7 +77,11 @@ int m68k_align_funcs;\n    sCC expanders peek at this to determine what to do for the\n    68060, which has no fsCC instructions.  */\n int m68k_last_compare_had_fp_operands;\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Sometimes certain combinations of command options do not make\n    sense on a particular target machine.  You can define a macro\n    `OVERRIDE_OPTIONS' to take account of this.  This macro, if"}, {"sha": "38c6c66f437c63bf9b8899bd3a80fb14bfb59b93", "filename": "gcc/config/m88k/m88k.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm88k%2Fm88k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fm88k%2Fm88k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -39,6 +39,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n extern int flag_traditional;\n extern FILE *asm_out_file;\n@@ -61,6 +63,10 @@ rtx m88k_compare_op1;\t\t/* cmpsi operand 1 */\n \n enum processor_type m88k_cpu;\t/* target cpu */\n \f\n+/* Initialize the GCC target structure.  */\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Determine what instructions are needed to manufacture the integer VALUE\n    in the given MODE.  */\n "}, {"sha": "8c2b1bac49b1ca077cd969db98a0ed6389419061", "filename": "gcc/config/mcore/mcore-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -37,8 +37,6 @@ extern int          mcore_naked_function_p       \tPARAMS ((void));\n #ifdef TREE_CODE\n extern void         mcore_unique_section         \tPARAMS ((tree, int));\n extern void         mcore_encode_section_info    \tPARAMS ((tree));\n-extern int          mcore_valid_machine_decl_attribute\tPARAMS ((tree, tree, tree, tree));\n-extern tree         mcore_merge_machine_decl_attributes PARAMS ((tree, tree));\n \n #ifdef HAVE_MACHINE_MODES\n extern int          mcore_function_arg_partial_nregs\tPARAMS ((CUMULATIVE_ARGS, enum machine_mode, tree, int));"}, {"sha": "b7755091ce27db80b009598444efc0974ffac359", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 17, "deletions": 53, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -39,6 +39,8 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n #include \"function.h\"\n #include \"ggc.h\"\n #include \"toplev.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* Maximum size we are allowed to grow the stack in a single operation.\n    If we want more, we must do it in increments of at most this size.\n@@ -128,6 +130,19 @@ static void       mcore_mark_dllexport         PARAMS ((tree));\n static void       mcore_mark_dllimport         PARAMS ((tree));\n static int        mcore_dllexport_p            PARAMS ((tree));\n static int        mcore_dllimport_p            PARAMS ((tree));\n+static int        mcore_valid_decl_attribute   PARAMS ((tree, tree,\n+\t\t\t\t\t\t\ttree, tree));\n+\f\n+/* Initialize the GCC target structure.  */\n+#ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+#undef TARGET_MERGE_DECL_ATTRIBUTES\n+#define TARGET_MERGE_DECL_ATTRIBUTES merge_dllimport_decl_attributes\n+#endif\n+\n+#undef TARGET_VALID_DECL_ATTRIBUTE\n+#define TARGET_VALID_DECL_ATTRIBUTE mcore_valid_decl_attribute\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n \f\n /* Adjust the stack and return the number of bytes taken to do it.  */\n static void\n@@ -3496,8 +3511,8 @@ mcore_encode_section_info (decl)\n    dllexport - for exporting a function/variable that will live in a dll\n    dllimport - for importing a function/variable from a dll\n    naked     - do not create a function prologue/epilogue.  */\n-int\n-mcore_valid_machine_decl_attribute (decl, attributes, attr, args)\n+static int\n+mcore_valid_decl_attribute (decl, attributes, attr, args)\n      tree decl;\n      tree attributes ATTRIBUTE_UNUSED;\n      tree attr;\n@@ -3537,57 +3552,6 @@ mcore_valid_machine_decl_attribute (decl, attributes, attr, args)\n   return 0;\n }\n \n-/* Merge attributes in decls OLD and NEW.\n-   This handles the following situation:\n-\n-     __declspec (dllimport) int foo;\n-     int foo;\n-\n-   The second instance of `foo' nullifies the dllimport.  */\n-tree\n-mcore_merge_machine_decl_attributes (old, new)\n-     tree old;\n-     tree new;\n-{\n-  tree a;\n-  int delete_dllimport_p;\n-\n-  old = DECL_MACHINE_ATTRIBUTES (old);\n-  new = DECL_MACHINE_ATTRIBUTES (new);\n-\n-  /* What we need to do here is remove from `old' dllimport if it doesn't\n-     appear in `new'.  dllimport behaves like extern: if a declaration is\n-     marked dllimport and a definition appears later, then the object\n-     is not dllimport'd.  */\n-  if (   lookup_attribute (\"dllimport\", old) != NULL_TREE\n-      && lookup_attribute (\"dllimport\", new) == NULL_TREE)\n-    delete_dllimport_p = 1;\n-  else\n-    delete_dllimport_p = 0;\n-\n-  a = merge_attributes (old, new);\n-\n-  if (delete_dllimport_p)\n-    {\n-      tree prev,t;\n-\n-      /* Scan the list for dllimport and delete it.  */\n-      for (prev = NULL_TREE, t = a; t; prev = t, t = TREE_CHAIN (t))\n-\t{\n-\t  if (is_attribute_p (\"dllimport\", TREE_PURPOSE (t)))\n-\t    {\n-\t      if (prev == NULL_TREE)\n-\t\ta = TREE_CHAIN (a);\n-\t      else\n-\t\tTREE_CHAIN (prev) = TREE_CHAIN (t);\n-\t      break;\n-\t    }\n-\t}\n-    }\n-\n-  return a;\n-}\n-\n /* Cover function for UNIQUE_SECTION.  */\n \n void"}, {"sha": "3440dbd6b99604e455f00c6431f9b11725950a4f", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -35,15 +35,9 @@ the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */\n /* Run-time Target Specification.  */\n #define TARGET_MCORE\n \n-/* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n-   is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-#undef  VALID_MACHINE_DECL_ATTRIBUTE\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-  mcore_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n-\n-#define MERGE_MACHINE_DECL_ATTRIBUTES(OLD, NEW) \\\n-  mcore_merge_machine_decl_attributes (OLD, NEW)\n+/* Get tree.c to declare a target-specific specialization of\n+   merge_decl_attributes.  */\n+#define TARGET_DLLIMPORT_DECL_ATTRIBUTES\n \n /* Support the __declspec keyword by turning them into attributes.\n    We currently only support: dllexport and dllimport."}, {"sha": "dd735cc25c1ac540053b18901c806efb3bb19aa1", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -49,8 +49,9 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"tm_p.h\"\n #include \"ggc.h\"\n-\n #include \"gstab.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n #ifdef __GNU_STAB__\n #define STAB_CODE_TYPE enum __stab_debug_code\n@@ -427,7 +428,10 @@ enum reg_class mips_char_to_class[256] =\n   NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n   NO_REGS,\tNO_REGS,\tNO_REGS,\tNO_REGS,\n };\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n \f\n /* Return truth value of whether OP can be used as an operands\n    where a register or 16 bit unsigned integer is needed.  */"}, {"sha": "965d61c81d0c804ed234a359d81b14f5d18015c0", "filename": "gcc/config/mn10200/mn10200.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fmn10200%2Fmn10200.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -38,6 +38,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* Global registers known to hold the value zero.\n \n@@ -63,7 +65,11 @@ static void count_tst_insns PARAMS ((int *));\n \n /* Note whether or not we need an out of line epilogue.  */\n static int out_of_line_epilogue;\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Indicate this file was compiled by gcc and what optimization\n    level was used.  */\n void"}, {"sha": "472b2933fba9521b53d88aa5f7bd8a4ebfa69c49", "filename": "gcc/config/mn10300/mn10300.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fmn10300%2Fmn10300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -38,6 +38,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include \"toplev.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* The size of the callee register save area.  Right now we save everything\n    on entry since it costs us nothing in code size.  It does cost us from a\n@@ -48,7 +50,11 @@ Boston, MA 02111-1307, USA.  */\n \t\t\t+ 4 * regs_ever_live[7] \\\n \t\t\t+ 16 * (regs_ever_live[14] || regs_ever_live[15] \\\n \t\t\t\t|| regs_ever_live[16] || regs_ever_live[17]))\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n void\n asm_file_start (file)\n      FILE *file;"}, {"sha": "7c6da1bbca00f82cdc30a3f6bc630feb99d0dd9c", "filename": "gcc/config/ns32k/ns32k-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -40,8 +40,6 @@ extern int symbolic_reference_mentioned_p PARAMS ((rtx));\n #ifdef TREE_CODE\n extern int ns32k_comp_type_attributes PARAMS ((tree, tree));\n extern int ns32k_return_pops_args PARAMS ((tree, tree, int));\n-extern int ns32k_valid_decl_attribute_p PARAMS ((tree, tree, tree, tree));\n-extern int ns32k_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n #endif /* TREE_CODE */\n \n extern int hard_regno_mode_ok PARAMS ((int, enum machine_mode));"}, {"sha": "ec5470a05c23cb0ddcef9820ac79a5ceb7664bca", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -35,6 +35,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"flags.h\"\n #include \"recog.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n #ifdef OSF_OS\n int ns32k_num_files = 0;\n@@ -62,7 +64,14 @@ const char *const ns32k_out_reg_names[] = OUTPUT_REGISTER_NAMES;\n static rtx gen_indexed_expr PARAMS ((rtx, rtx, rtx));\n static const char *singlemove_string PARAMS ((rtx *));\n static void move_tail PARAMS ((rtx[], int, int));\n+static int ns32k_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n+\f\n+/* Initialize the GCC target structure.  */\n+#undef TARGET_VALID_TYPE_ATTRIBUTE\n+#define TARGET_VALID_TYPE_ATTRIBUTE ns32k_valid_type_attribute_p\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE. */ \n int\n hard_regno_mode_ok (regno, mode)\n@@ -633,25 +642,11 @@ symbolic_reference_mentioned_p (op)\n   return 0;\n }\n \f\n-/* Return nonzero if IDENTIFIER with arguments ARGS is a valid machine specific\n-   attribute for DECL.  The attributes in ATTRIBUTES have previously been\n-   assigned to DECL.  */\n-\n-int\n-ns32k_valid_decl_attribute_p (decl, attributes, identifier, args)\n-     tree decl ATTRIBUTE_UNUSED;\n-     tree attributes ATTRIBUTE_UNUSED;\n-     tree identifier ATTRIBUTE_UNUSED;\n-     tree args ATTRIBUTE_UNUSED;\n-{\n-  return 0;\n-}\n-\n /* Return nonzero if IDENTIFIER with arguments ARGS is a valid machine specific\n    attribute for TYPE.  The attributes in ATTRIBUTES have previously been\n    assigned to TYPE.  */\n \n-int\n+static int\n ns32k_valid_type_attribute_p (type, attributes, identifier, args)\n      tree type;\n      tree attributes ATTRIBUTE_UNUSED;"}, {"sha": "e92140b797334b451ce28c3329670be86c56f8bc", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -1294,20 +1294,6 @@ while (0)\n  { if (GET_CODE (ADDR) == POST_INC || GET_CODE (ADDR) == PRE_DEC)\t\\\n      goto LABEL;}\n \f\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, NAME, ARGS) \\\n-  (ns32k_valid_decl_attribute_p (DECL, ATTRIBUTES, NAME, ARGS))\n-\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for TYPE.\n-   The attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n-\n-#define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, NAME, ARGS) \\\n-  (ns32k_valid_type_attribute_p (TYPE, ATTRIBUTES, NAME, ARGS))\n-\n /* If defined, a C expression whose value is zero if the attributes on\n    TYPE1 and TYPE2 are incompatible, one if they are compatible, and\n    two if they are nearly compatible (which causes a warning to be"}, {"sha": "9100a80fa327b6a70b2ccd530243a98b8ba4b041", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -41,6 +41,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"recog.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n #ifndef DO_FRAME_NOTES\n #ifdef INCOMING_RETURN_ADDR_RTX\n@@ -105,7 +107,11 @@ struct deferred_plabel\n   char *name;\n } *deferred_plabels = 0;\n int n_deferred_plabels = 0;\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n void\n override_options ()\n {"}, {"sha": "6da1531d13b8e69347da540efa9da80e20b64f4d", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -35,6 +35,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"tree.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /*\n #define FPU_REG_P(X)\t((X)>=8 && (X)<14)\n@@ -50,7 +52,11 @@ int current_first_parm_offset;\n \n static rtx find_addr_reg PARAMS ((rtx)); \n static const char *singlemove_string PARAMS ((rtx *)); \n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Nonzero if OP is a valid second operand for an arithmetic insn.  */\n \n int"}, {"sha": "1e0d3a828dd69a060ceebe93c165133be373129a", "filename": "gcc/config/pj/pj.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fpj%2Fpj.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fpj%2Fpj.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -99,6 +99,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"basic-block.h\"\n #include \"ggc.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* Compare insns in pj.md store the information needed to generate\n    branch instructions here.  */\n@@ -122,7 +124,11 @@ static int nfakes;\n /* Whether anything has been printed to the current assembly output\n    line. */\n int pj_stuff_on_line;\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* printf to the asm_out_file, with special format control characters\n    for decoding operands.  \n "}, {"sha": "aec840ca44c22f48ffc5636999303e45b9392c72", "filename": "gcc/config/romp/romp.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fromp%2Fromp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fromp%2Fromp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -38,6 +38,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #include \"function.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n #define min(A,B)\t((A) < (B) ? (A) : (B))\n #define max(A,B)\t((A) > (B) ? (A) : (B))\n@@ -49,6 +51,10 @@ static void init_fpops PARAMS ((void));\n static int memory_offset_in_range_p PARAMS ((rtx, enum machine_mode, int, int));\n static unsigned int hash_rtx PARAMS ((rtx));\n \f\n+/* Initialize the GCC target structure.  */\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Return 1 if the insn using CC0 set by INSN does not contain\n    any unsigned tests applied to the condition codes.\n "}, {"sha": "cbcd25746336930d71673708f88e6a2ec50fc0bb", "filename": "gcc/config/rs6000/rs6000-protos.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -138,8 +138,6 @@ extern void setup_incoming_varargs PARAMS ((CUMULATIVE_ARGS *,\n extern struct rtx_def *rs6000_va_arg PARAMS ((tree, tree));\n extern void output_mi_thunk PARAMS ((FILE *, tree, int, tree));\n extern int rs6000_comp_type_attributes PARAMS ((tree, tree));\n-extern int rs6000_valid_decl_attribute_p PARAMS ((tree, tree, tree, tree));\n-extern int rs6000_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n extern void rs6000_set_default_type_attributes PARAMS ((tree));\n extern void rs6000_encode_section_info PARAMS ((tree));\n extern void rs6000_select_section PARAMS ((tree, int));"}, {"sha": "45e6bd40d0643def4fff5ce8ff218e70157815dc", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -42,6 +42,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"hashtab.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n #ifndef TARGET_NO_PROTOTYPE\n #define TARGET_NO_PROTOTYPE 0\n@@ -123,6 +125,7 @@ static int constant_pool_expr_1 PARAMS ((rtx, int *, int *));\n static void rs6000_free_machine_status PARAMS ((struct function *));\n static void rs6000_init_machine_status PARAMS ((struct function *));\n static int rs6000_ra_ever_killed PARAMS ((void));\n+static int rs6000_valid_type_attribute_p PARAMS ((tree, tree, tree, tree));\n \f\n /* Default register names.  */\n char rs6000_reg_names[][8] =\n@@ -160,7 +163,13 @@ static char alt_reg_names[][8] =\n #ifndef MASK_STRICT_ALIGN\n #define MASK_STRICT_ALIGN 0\n #endif\n+\f\n+/* Initialize the GCC target structure.  */\n+#undef TARGET_VALID_TYPE_ATTRIBUTE\n+#define TARGET_VALID_TYPE_ATTRIBUTE rs6000_valid_type_attribute_p\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Override command line options.  Mostly we process the processor\n    type and sometimes adjust other TARGET_ options.  */\n \n@@ -7820,25 +7829,11 @@ rs6000_initialize_trampoline (addr, fnaddr, cxt)\n }\n \n \f\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-\n-int\n-rs6000_valid_decl_attribute_p (decl, attributes, identifier, args)\n-     tree decl ATTRIBUTE_UNUSED;\n-     tree attributes ATTRIBUTE_UNUSED;\n-     tree identifier ATTRIBUTE_UNUSED;\n-     tree args ATTRIBUTE_UNUSED;\n-{\n-  return 0;\n-}\n-\n /* If defined, a C expression whose value is nonzero if IDENTIFIER\n    with arguments ARGS is a valid machine specific attribute for TYPE.\n    The attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n \n-int\n+static int\n rs6000_valid_type_attribute_p (type, attributes, identifier, args)\n      tree type;\n      tree attributes ATTRIBUTE_UNUSED;"}, {"sha": "ad4768fdab8ec9d9047bb4d9990126c7546f5e4e", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -1611,20 +1611,6 @@ typedef struct rs6000_args\n #define INITIALIZE_TRAMPOLINE(ADDR, FNADDR, CXT)\t\t\\\n   rs6000_initialize_trampoline (ADDR, FNADDR, CXT)\n \f\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, NAME, ARGS) \\\n-  (rs6000_valid_decl_attribute_p (DECL, ATTRIBUTES, NAME, ARGS))\n-\n-/* If defined, a C expression whose value is nonzero if IDENTIFIER\n-   with arguments ARGS is a valid machine specific attribute for TYPE.\n-   The attributes in ATTRIBUTES have previously been assigned to TYPE.  */\n-\n-#define VALID_MACHINE_TYPE_ATTRIBUTE(TYPE, ATTRIBUTES, NAME, ARGS) \\\n-  (rs6000_valid_type_attribute_p (TYPE, ATTRIBUTES, NAME, ARGS))\n-\n /* If defined, a C expression whose value is zero if the attributes on\n    TYPE1 and TYPE2 are incompatible, one if they are compatible, and\n    two if they are nearly compatible (which causes a warning to be"}, {"sha": "2296e414bd85891641aa111c60d1d3657530d14b", "filename": "gcc/config/sh/sh-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fsh%2Fsh-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -106,7 +106,6 @@ extern rtx sh_va_arg PARAMS ((tree, tree));\n \n #ifdef TREE_CODE\n extern void sh_pragma_insert_attributes PARAMS ((tree, tree *, tree *));\n-extern int sh_valid_machine_decl_attribute PARAMS ((tree, tree, tree, tree));\n extern tree sh_build_va_list PARAMS ((void));\n #endif /* TREE_CODE */\n "}, {"sha": "5cdc2093d79749993296e4b8ee24149f86769b23", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -37,6 +37,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"c-pragma.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n int code_for_indirect_jump_scratch = CODE_FOR_indirect_jump_scratch;\n \n@@ -151,6 +153,13 @@ static int calc_live_regs PARAMS ((int *, int *));\n static void mark_use PARAMS ((rtx, rtx *));\n static HOST_WIDE_INT rounded_frame_size PARAMS ((int));\n static rtx mark_constant_pool_use PARAMS ((rtx));\n+static int sh_valid_decl_attribute PARAMS ((tree, tree, tree, tree));\n+\f\n+/* Initialize the GCC target structure.  */\n+#undef TARGET_VALID_DECL_ATTRIBUTE\n+#define TARGET_VALID_DECL_ATTRIBUTE sh_valid_decl_attribute\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n \f\n /* Print the operand address in x to the stream.  */\n \n@@ -4626,8 +4635,8 @@ sh_pragma_insert_attributes (node, attributes, prefix)\n    trap_exit -- use a trapa to exit an interrupt function instead of\n    an rte instruction.  */\n \n-int\n-sh_valid_machine_decl_attribute (decl, attributes, attr, args)\n+static int\n+sh_valid_decl_attribute (decl, attributes, attr, args)\n      tree decl;\n      tree attributes ATTRIBUTE_UNUSED;\n      tree attr;"}, {"sha": "0b36079560de4835ca1c6ab6d353598ad822101d", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -2298,12 +2298,6 @@ extern int current_function_interrupt;\n    for interrupt functions.  */\n extern struct rtx_def *sp_switch;\n \n-/* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n-   is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-sh_valid_machine_decl_attribute (DECL, ATTRIBUTES, IDENTIFIER, ARGS)\n-\n #define PRAGMA_INSERT_ATTRIBUTES(node, pattr, prefix_attr) \\\n   sh_pragma_insert_attributes (node, pattr, prefix_attr)\n "}, {"sha": "ab24f0d8f1b4dcd04cd9606f46236772469d5b7f", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -40,6 +40,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"toplev.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n /* 1 if the caller has placed an \"unimp\" insn immediately after the call.\n    This is used in v8 code when calling a function that returns a structure.\n@@ -175,7 +177,11 @@ struct sparc_cpu_select sparc_select[] =\n \n /* CPU type.  This is set from TARGET_CPU_DEFAULT and -m{cpu,tune}=xxx.  */\n enum processor_type sparc_cpu;\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* Validate and override various options, and do some machine dependent\n    initialization.  */\n "}, {"sha": "9d6d08adc226c08a89ceb44045da2860f98b3175", "filename": "gcc/config/v850/v850-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fv850%2Fv850-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850-protos.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -72,7 +72,6 @@ extern rtx    v850_va_arg                   PARAMS ((tree, tree));\n #endif /* TREE_CODE */\n \n #ifdef TREE_CODE\n-extern int    v850_valid_machine_decl_attribute  PARAMS ((tree, tree, tree));\n extern void   v850_encode_data_area         PARAMS ((tree));\n extern void   v850_set_default_decl_attr    PARAMS ((tree));\n extern int    v850_interrupt_function_p     PARAMS ((tree));"}, {"sha": "18ad632eed063bb9f3706522fe8e6fc659b6c624", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -40,6 +40,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"c-lex.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n \n #ifndef streq\n #define streq(a,b) (strcmp (a, b) == 0)\n@@ -51,6 +53,7 @@ static int  const_costs_int          PARAMS ((HOST_WIDE_INT, int));\n static void substitute_ep_register   PARAMS ((rtx, rtx, int, int, rtx *, rtx *));\n static int  ep_memory_offset         PARAMS ((enum machine_mode, int));\n static void v850_set_data_area       PARAMS ((tree, v850_data_area));\n+static int v850_valid_decl_attribute PARAMS ((tree, tree, tree, tree));\n \n /* True if the current function has anonymous arguments.  */\n int current_function_anonymous_args;\n@@ -78,7 +81,12 @@ static int v850_interrupt_cache_p = FALSE;\n \n /* Whether current function is an interrupt handler.  */\n static int v850_interrupt_p = FALSE;\n+\f\n+/* Initialize the GCC target structure.  */\n+#undef TARGET_VALID_DECL_ATTRIBUTE\n+#define TARGET_VALID_DECL_ATTRIBUTE v850_valid_decl_attribute\n \n+struct gcc_target target = TARGET_INITIALIZER;\n \f\n /* Sometimes certain combinations of command options do not make\n    sense on a particular target machine.  You can define a macro\n@@ -2003,9 +2011,10 @@ v850_set_data_area (decl, data_area)\n /* Return nonzero if ATTR is a valid attribute for DECL.\n    ARGS are the arguments supplied with ATTR.  */\n \n-int\n-v850_valid_machine_decl_attribute (decl, attr, args)\n+static int\n+v850_valid_decl_attribute (decl, unused, attr, args)\n      tree decl;\n+     tree unused ATTRIBUTE_UNUSED;\n      tree attr;\n      tree args;\n {"}, {"sha": "bde4bb360512b510ee14fb2a72d45d72e8422eef", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -1486,12 +1486,6 @@ do { char dstr[30];\t\t\t\t\t\\\n    so give the MEM rtx a byte's mode.  */\n #define FUNCTION_MODE QImode\n \n-/* A C expression whose value is nonzero if IDENTIFIER with arguments ARGS\n-   is a valid machine specific attribute for DECL.\n-   The attributes in ATTRIBUTES have previously been assigned to DECL.  */\n-#define VALID_MACHINE_DECL_ATTRIBUTE(DECL, ATTRIBUTES, IDENTIFIER, ARGS) \\\n-  v850_valid_machine_decl_attribute (DECL, IDENTIFIER, ARGS)\n-\n /* A C statement that assigns default attributes to a newly created DECL.  */\n #define SET_DEFAULT_DECL_ATTRIBUTES(decl, attr) \\\n      v850_set_default_decl_attr (decl)"}, {"sha": "43d6a9cc7bdfc926b955b8a1ee6ba9861a0e6a63", "filename": "gcc/config/vax/vax.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fvax%2Fvax.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fvax%2Fvax.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -34,7 +34,13 @@ Boston, MA 02111-1307, USA.  */\n #include \"tree.h\"\n #endif\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n /* This is like nonimmediate_operand with a restriction on the type of MEM.  */\n \n void"}, {"sha": "f7346a49a9e8332fed60f5cfcf0d843b46f66cfe", "filename": "gcc/config/we32k/we32k.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fconfig%2Fwe32k%2Fwe32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -30,7 +30,13 @@ Boston, MA 02111-1307, USA.  */\n #include \"recog.h\"\n #include \"output.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n+#include \"target-def.h\"\n+\f\n+/* Initialize the GCC target structure.  */\n \n+struct gcc_target target = TARGET_INITIALIZER;\n+\f\n void\n output_move_double (operands)\n      rtx *operands;"}, {"sha": "07a2e5bede5534584dc22b88e3557dae12453f5f", "filename": "gcc/cp/Make-lang.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fcp%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fcp%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FMake-lang.in?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -233,7 +233,7 @@ c++.stage4: stage4-start\n #\f\n # .o: .h dependencies.\n CXX_TREE_H = $(TREE_H) cp/cp-tree.h c-common.h cp/cp-tree.def c-common.def \\\n-\tfunction.h varray.h $(SYSTEM_H) $(CONFIG_H) \\\n+\tfunction.h varray.h $(SYSTEM_H) $(CONFIG_H) $(TARGET_H) \\\n \t$(srcdir)/../include/hashtab.h $(srcdir)/../include/splay-tree.h\n \n cp/spew.o: cp/spew.c $(CXX_TREE_H) cp/parse.h flags.h cp/lex.h toplev.h"}, {"sha": "350422bcfe6c59fb8914616397102e04f675821d", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -43,6 +43,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"../hash.h\"\n #include \"ggc.h\"\n #include \"tm_p.h\"\n+#include \"target.h\"\n \n extern int (*valid_lang_attribute) PARAMS ((tree, tree, tree, tree));\n \n@@ -3483,7 +3484,7 @@ duplicate_decls (newdecl, olddecl)\n   /* Copy all the DECL_... slots specified in the new decl\n      except for any that we copy here from the old type.  */\n   DECL_MACHINE_ATTRIBUTES (newdecl)\n-    = merge_machine_decl_attributes (olddecl, newdecl);\n+    = (*target.merge_decl_attributes) (olddecl, newdecl);\n \n   if (TREE_CODE (newdecl) == TEMPLATE_DECL)\n     {"}, {"sha": "7d0ee46c639d8a81a3022abee4e6f524c6456f73", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -45,6 +45,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"timevar.h\"\n #include \"cpplib.h\"\n+#include \"target.h\"\n extern cpp_reader *parse_in;\n \n /* This structure contains information about the initializations\n@@ -2455,13 +2456,15 @@ import_export_class (ctype)\n   if (CLASSTYPE_INTERFACE_ONLY (ctype))\n     return;\n \n-#ifdef VALID_MACHINE_TYPE_ATTRIBUTE\n-  /* FIXME this should really use some sort of target-independent macro.  */\n-  if (lookup_attribute (\"dllimport\", TYPE_ATTRIBUTES (ctype)))\n-    import_export = -1;\n-  else if (lookup_attribute (\"dllexport\", TYPE_ATTRIBUTES (ctype)))\n-    import_export = 1;\n-#endif\n+  if (target.valid_type_attribute != NULL)\n+    {\n+      /* FIXME this should really use some sort of target-independent\n+         macro.  */\n+      if (lookup_attribute (\"dllimport\", TYPE_ATTRIBUTES (ctype)))\n+\timport_export = -1;\n+      else if (lookup_attribute (\"dllexport\", TYPE_ATTRIBUTES (ctype)))\n+\timport_export = 1;\n+    }\n \n   /* If we got -fno-implicit-templates, we import template classes that\n      weren't explicitly instantiated.  */"}, {"sha": "db1044adeee688cc4b45d6c9d43421ea1ff97c85", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -41,6 +41,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"output.h\"\n #include \"toplev.h\"\n #include \"diagnostic.h\"\n+#include \"target.h\"\n \n static tree convert_for_assignment PARAMS ((tree, tree, const char *, tree,\n \t\t\t\t\t  int));\n@@ -210,8 +211,8 @@ qualify_type_recursive (t1, t2)\n       tree tt2 = TREE_TYPE (t2);\n       tree b1;\n       int type_quals;\n-      tree target;\n-      tree attributes = merge_machine_type_attributes (t1, t2);\n+      tree tgt;\n+      tree attributes = (*target.merge_type_attributes) (t1, t2);\n \n       if (TREE_CODE (tt1) == OFFSET_TYPE)\n \t{\n@@ -223,11 +224,11 @@ qualify_type_recursive (t1, t2)\n \tb1 = NULL_TREE;\n \n       type_quals = (CP_TYPE_QUALS (tt1) | CP_TYPE_QUALS (tt2));\n-      target = qualify_type_recursive (tt1, tt2);\n-      target = cp_build_qualified_type (target, type_quals);\n+      tgt = qualify_type_recursive (tt1, tt2);\n+      tgt = cp_build_qualified_type (tgt, type_quals);\n       if (b1)\n-\ttarget = build_offset_type (b1, target);\n-      t1 = build_pointer_type (target);\n+\ttgt = build_offset_type (b1, tgt);\n+      t1 = build_pointer_type (tgt);\n       t1 = build_type_attribute_variant (t1, attributes);\n     }\n   return t1;\n@@ -342,7 +343,7 @@ type_after_usual_arithmetic_conversions (t1, t2)\n \n   /* In what follows, we slightly generalize the rules given in [expr]\n      so as to deal with `long long'.  First, merge the attributes.  */\n-  attributes = merge_machine_type_attributes (t1, t2);\n+  attributes = (*target.merge_type_attributes) (t1, t2);\n \n   /* If only one is real, use it as the result.  */\n   if (code1 == REAL_TYPE && code2 != REAL_TYPE)\n@@ -548,7 +549,7 @@ common_type (t1, t2)\n     return type_after_usual_arithmetic_conversions (t1, t2);\n \n   /* Merge the attributes.  */\n-  attributes = merge_machine_type_attributes (t1, t2);\n+  attributes = (*target.merge_type_attributes) (t1, t2);\n \n   /* Treat an enum type as the unsigned integer type of the same width.  */\n "}, {"sha": "40c28e383fcd42089feb76e9219d2b8d5690717c", "filename": "gcc/doc/gcc.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fdoc%2Fgcc.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fdoc%2Fgcc.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fgcc.texi?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -272,7 +272,7 @@ bugs.  It corresponds to GCC version 3.1.\n * Trees::           The source representation used by the C and C++ front ends.\n * RTL::             The intermediate representation that most passes work on.\n * Machine Desc::    How to write machine description instruction patterns.\n-* Target Macros::   How to write the machine description C macros.\n+* Target Macros::   How to write the machine description C macros and functions.\n * Config::          Writing the @file{xm-@var{machine}.h} file.\n * Fragments::       Writing the @file{t-@var{target}} and @file{x-@var{host}} files.\n @end ifset"}, {"sha": "24eed3aefecbe430173c8c1f9e119bd94a554265", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 81, "deletions": 28, "changes": 109, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -4,22 +4,28 @@\n @c For copying conditions, see the file gcc.texi.\n \n @node Target Macros\n-@chapter Target Description Macros\n+@chapter Target Description Macros and Functions\n @cindex machine description macros\n @cindex target description macros\n @cindex macros, target description\n @cindex @file{tm.h} macros\n \n In addition to the file @file{@var{machine}.md}, a machine description\n includes a C header file conventionally given the name\n-@file{@var{machine}.h}.  This header file defines numerous macros\n-that convey the information about the target machine that does not fit\n-into the scheme of the @file{.md} file.  The file @file{tm.h} should be\n-a link to @file{@var{machine}.h}.  The header file @file{config.h}\n-includes @file{tm.h} and most compiler source files include\n-@file{config.h}.\n+@file{@var{machine}.h} and a C source file named @file{@var{machine}.c}.\n+The header file defines numerous macros that convey the information\n+about the target machine that does not fit into the scheme of the\n+@file{.md} file.  The file @file{tm.h} should be a link to\n+@file{@var{machine}.h}.  The header file @file{config.h} includes\n+@file{tm.h} and most compiler source files include @file{config.h}.  The\n+source file defines a variable @code{target}, which is a structure\n+containing pointers to functions and data relating to the target\n+machine.  @file{@var{machine}.c} should also contain their definitions,\n+if they are not defined elsewhere in GCC, and other functions called\n+through the macros defined in the @file{.h} file.\n \n @menu\n+* Target Structure::    The @code{target} variable.\n * Driver::              Controlling how the driver runs the compilation passes.\n * Run-time Target::     Defining @samp{-m} options like @option{-m68000} and @option{-m68020}.\n * Per-Function Data::   Defining data structures for per-function information.\n@@ -44,6 +50,38 @@ includes @file{tm.h} and most compiler source files include\n * Misc::                Everything else.\n @end menu\n \n+@node Target Structure\n+@section The Global @code{target} Variable\n+@cindex target hooks\n+@cindex target functions\n+\n+@deftypevar {struct gcc_target} target\n+The target @file{.c} file must define the global @code{target} variable\n+which contains pointers to functions and data relating to the target\n+machine.  The variable is declared in @file{target.h};\n+@file{target-def.h} defines the macro @code{TARGET_INITIALIZER} which is\n+used to initialize the variable, and macros for the default initializers\n+for elements of the structure.  The @file{.c} file should override those\n+macros for which the default definition is inappropriate.  For example:\n+@smallexample\n+#include \"target.h\"\n+#include \"target-def.h\"\n+\n+/* @r{Initialize the GCC target structure.}  */\n+\n+#undef TARGET_VALID_TYPE_ATTRIBUTE\n+#define TARGET_VALID_TYPE_ATTRIBUTE @var{machine}_valid_type_attribute_p\n+\n+struct gcc_target target = TARGET_INITIALIZER;\n+@end smallexample\n+@end deftypevar\n+\n+Where a macro should be defined in the @file{.c} file in this manner to\n+form part of the @code{target} structure, it is documented below as a\n+``Target Hook'' with a prototype.  Many macros will change in future\n+from being defined in the @file{.h} file to being part of the\n+@code{target} structure.\n+\n @node Driver\n @section Controlling the Compilation Driver, @file{gcc}\n @cindex driver\n@@ -8223,19 +8261,21 @@ pack value of zero resets the behaviour to the default.  Successive\n invocations of this pragma cause the previous values to be stacked, so\n that invocations of @samp{#pragma pack(pop)} will return to the previous\n value.\n+@end table\n \n-@findex VALID_MACHINE_DECL_ATTRIBUTE\n-@item VALID_MACHINE_DECL_ATTRIBUTE (@var{decl}, @var{attributes}, @var{identifier}, @var{args})\n-If defined, a C expression whose value is nonzero if @var{identifier} with\n+@deftypefn {Target Hook} int TARGET_VALID_DECL_ATTRIBUTE (tree @var{decl}, tree @var{attributes}, tree @var{identifier}, tree @var{args})\n+If defined, this target hook is a function which returns nonzero if @var{identifier} with\n arguments @var{args} is a valid machine specific attribute for @var{decl}.\n The attributes in @var{attributes} have previously been assigned to @var{decl}.\n+@end deftypefn\n \n-@findex VALID_MACHINE_TYPE_ATTRIBUTE\n-@item VALID_MACHINE_TYPE_ATTRIBUTE (@var{type}, @var{attributes}, @var{identifier}, @var{args})\n-If defined, a C expression whose value is nonzero if @var{identifier} with\n+@deftypefn {Target Hook} int TARGET_VALID_TYPE_ATTRIBUTE (tree @var{type}, tree @var{attributes}, tree @var{identifier}, tree @var{args})\n+If defined, this target hook is a function which returns nonzero if @var{identifier} with\n arguments @var{args} is a valid machine specific attribute for @var{type}.\n The attributes in @var{attributes} have previously been assigned to @var{type}.\n+@end deftypefn\n \n+@table @code\n @findex COMP_TYPE_ATTRIBUTES\n @item COMP_TYPE_ATTRIBUTES (@var{type1}, @var{type2})\n If defined, a C expression whose value is zero if the attributes on\n@@ -8247,23 +8287,36 @@ generated).\n @item SET_DEFAULT_TYPE_ATTRIBUTES (@var{type})\n If defined, a C statement that assigns default attributes to\n newly defined @var{type}.\n+@end table\n \n-@findex MERGE_MACHINE_TYPE_ATTRIBUTES\n-@item MERGE_MACHINE_TYPE_ATTRIBUTES (@var{type1}, @var{type2})\n-Define this macro if the merging of type attributes needs special handling.\n-If defined, the result is a list of the combined TYPE_ATTRIBUTES of\n-@var{type1} and @var{type2}.  It is assumed that comptypes has already been\n-called and returned 1.\n-\n-@findex MERGE_MACHINE_DECL_ATTRIBUTES\n-@item MERGE_MACHINE_DECL_ATTRIBUTES (@var{olddecl}, @var{newdecl})\n-Define this macro if the merging of decl attributes needs special handling.\n-If defined, the result is a list of the combined DECL_MACHINE_ATTRIBUTES of\n-@var{olddecl} and @var{newdecl}.  @var{newdecl} is a duplicate declaration\n-of @var{olddecl}.  Examples of when this is needed are when one attribute\n-overrides another, or when an attribute is nullified by a subsequent\n-definition.\n+@deftypefn {Target Hook} tree TARGET_MERGE_TYPE_ATTRIBUTES (tree @var{type1}, tree @var{type2})\n+Define this target hook if the merging of type attributes needs special\n+handling.  If defined, the result is a list of the combined\n+@code{TYPE_ATTRIBUTES} of @var{type1} and @var{type2}.  It is assumed\n+that @code{comptypes} has already been called and returned 1.  This\n+function may call @code{merge_attributes} to handle machine-independent\n+merging.\n+@end deftypefn\n+\n+@deftypefn {Target Hook} tree TARGET_MERGE_DECL_ATTRIBUTES (tree @var{olddecl}, tree @var{newdecl})\n+Define this target hook if the merging of decl attributes needs special\n+handling.  If defined, the result is a list of the combined\n+@code{DECL_MACHINE_ATTRIBUTES} of @var{olddecl} and @var{newdecl}.\n+@var{newdecl} is a duplicate declaration of @var{olddecl}.  Examples of\n+when this is needed are when one attribute overrides another, or when an\n+attribute is nullified by a subsequent definition.  This function may\n+call @code{merge_attributes} to handle machine-independent merging.\n+\n+@findex TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+If the only target-specific handling you require is @samp{dllimport} for\n+Windows targets, you should define the macro\n+@code{TARGET_DLLIMPORT_DECL_ATTRIBUTES}.  This links in a function\n+called @code{merge_dllimport_decl_attributes} which can then be defined\n+as the expansion of @code{TARGET_MERGE_DECL_ATTRIBUTES}.  This is done\n+in @file{i386/cygwin.h} and @file{i386/i386.c}, for example.\n+@end deftypefn\n \n+@table @code\n @findex INSERT_ATTRIBUTES\n @item INSERT_ATTRIBUTES (@var{node}, @var{attr_ptr}, @var{prefix_ptr})\n Define this macro if you want to be able to add attributes to a decl"}, {"sha": "1af66c382937b55af9379ba708064775f096683b", "filename": "gcc/target-def.h", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Ftarget-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Ftarget-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget-def.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -0,0 +1,38 @@\n+/* Default initializers for a generic GCC target.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This program is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+ In other words, you are welcome to use, share and improve this program.\n+ You are forbidden to forbid anyone else to use, share and improve\n+ what you give them.   Help stamp out software-hoarding!  */\n+\n+/* See target.h for a desciption of what this file contains and how to\n+   use it.  */\n+\n+/* Both in tree.c.  */\n+#define TARGET_MERGE_DECL_ATTRIBUTES merge_decl_attributes\n+#define TARGET_MERGE_TYPE_ATTRIBUTES merge_type_attributes\n+#define TARGET_VALID_DECL_ATTRIBUTE 0\n+#define TARGET_VALID_TYPE_ATTRIBUTE 0\n+\n+/* The whole shebang.  */\n+#define TARGET_INITIALIZER\t\t\t\\\n+{\t\t\t\t\t\t\\\n+  TARGET_MERGE_DECL_ATTRIBUTES,\t\t\t\\\n+  TARGET_MERGE_TYPE_ATTRIBUTES,\t\t\t\\\n+  TARGET_VALID_DECL_ATTRIBUTE,\t\t\t\\\n+  TARGET_VALID_TYPE_ATTRIBUTE\t\t\t\\\n+}"}, {"sha": "08d0568573c33211e86aafbf769808285ec8c918", "filename": "gcc/target.h", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Ftarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Ftarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftarget.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -0,0 +1,68 @@\n+/* Data structure definitions for a generic GCC target.\n+   Copyright (C) 2001 Free Software Foundation, Inc.\n+\n+This program is free software; you can redistribute it and/or modify it\n+under the terms of the GNU General Public License as published by the\n+Free Software Foundation; either version 2, or (at your option) any\n+later version.\n+\n+This program is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with this program; if not, write to the Free Software\n+Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n+\n+ In other words, you are welcome to use, share and improve this program.\n+ You are forbidden to forbid anyone else to use, share and improve\n+ what you give them.   Help stamp out software-hoarding!  */\n+\n+/* This file contains a data structure that describes a GCC target.\n+   At present, it is incomplete, but in future it should grow to\n+   contain most or all target machine and target O/S specific\n+   information.\n+\n+   This structure has its initializer declared in target-def.h in the\n+   form of large macro TARGET_INITIALIZER that expands to many smaller\n+   macros.\n+\n+   The smaller macros each initialize one component of the structure,\n+   and each has a default.  Each target should have a file that\n+   includes target.h and target-def.h, and overrides any inappropriate\n+   defaults by undefining the relevant macro and defining a suitable\n+   replacement.  That file should then contain the definition of\n+   \"target\" like so:\n+\n+   struct gcc_target target = TARGET_INITIALIZER;\n+\n+   Doing things this way allows us to bring together everything that\n+   defines a target to GCC.  By supplying a default that is\n+   appropriate to most targets, we can easily add new items without\n+   needing to edit dozens of target configuration files.  It should\n+   also allow us to gradually reduce the amount of conditional\n+   compilation that is scattered throughout GCC.  */\n+\n+struct gcc_target\n+{\n+  /* Given two decls, merge their attributes and return the result.  */\n+  tree (* merge_decl_attributes) PARAMS ((tree, tree));\n+\n+  /* Given two types, merge their attributes and return the result.  */\n+  tree (* merge_type_attributes) PARAMS ((tree, tree));\n+\n+  /* Nonzero if IDENTIFIER with arguments ARGS is a valid machine\n+     specific attribute for DECL.  The attributes in ATTRIBUTES have\n+     previously been assigned to DECL.  */\n+  int (* valid_decl_attribute) PARAMS ((tree decl, tree attributes,\n+\t\t\t\t\ttree identifier, tree args));\n+\n+  /* Nonzero if IDENTIFIER with arguments ARGS is a valid machine\n+     specific attribute for TYPE.  The attributes in ATTRIBUTES have\n+     previously been assigned to TYPE.  */\n+  int (* valid_type_attribute) PARAMS ((tree type, tree attributes,\n+\t\t\t\t\ttree identifier, tree args));\n+};\n+\n+extern struct gcc_target target;"}, {"sha": "40524c39701641236d26ca3558aaa2e74bbf6b16", "filename": "gcc/tree.c", "status": "modified", "additions": 150, "deletions": 105, "changes": 255, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -44,6 +44,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"ggc.h\"\n #include \"hashtab.h\"\n #include \"output.h\"\n+#include \"target.h\"\n \n #define obstack_chunk_alloc xmalloc\n #define obstack_chunk_free free\n@@ -2706,124 +2707,119 @@ build_type_attribute_variant (ttype, attribute)\n   return ttype;\n }\n \n-/* Return a 1 if ATTR_NAME and ATTR_ARGS is valid for either declaration DECL\n-   or type TYPE and 0 otherwise.  Validity is determined the configuration\n-   macros VALID_MACHINE_DECL_ATTRIBUTE and VALID_MACHINE_TYPE_ATTRIBUTE.  */\n+/* Return 1 if ATTR_NAME and ATTR_ARGS is valid for either declaration\n+   DECL or type TYPE and 0 otherwise.  Validity is determined the\n+   target functions valid_decl_attribute and valid_machine_attribute.  */\n \n int\n valid_machine_attribute (attr_name, attr_args, decl, type)\n-  tree attr_name;\n-  tree attr_args ATTRIBUTE_UNUSED;\n-  tree decl ATTRIBUTE_UNUSED;\n-  tree type ATTRIBUTE_UNUSED;\n-{\n-  int validated = 0;\n-#ifdef VALID_MACHINE_DECL_ATTRIBUTE\n-  tree decl_attr_list = decl != 0 ? DECL_MACHINE_ATTRIBUTES (decl) : 0;\n-#endif\n-#ifdef VALID_MACHINE_TYPE_ATTRIBUTE\n-  tree type_attr_list = TYPE_ATTRIBUTES (type);\n-#endif\n-\n+     tree attr_name;\n+     tree attr_args;\n+     tree decl;\n+     tree type;\n+{\n   if (TREE_CODE (attr_name) != IDENTIFIER_NODE)\n     abort ();\n \n-#ifdef VALID_MACHINE_DECL_ATTRIBUTE\n-  if (decl != 0\n-      && VALID_MACHINE_DECL_ATTRIBUTE (decl, decl_attr_list, attr_name,\n-\t\t\t\t       attr_args))\n+  if (decl && target.valid_decl_attribute != NULL)\n     {\n-      tree attr = lookup_attribute (IDENTIFIER_POINTER (attr_name),\n-\t\t\t\t    decl_attr_list);\n+      tree decl_attrs = DECL_MACHINE_ATTRIBUTES (decl);\n \n-      if (attr != NULL_TREE)\n-\t{\n-\t  /* Override existing arguments.  Declarations are unique so we can\n-\t     modify this in place.  */\n-\t  TREE_VALUE (attr) = attr_args;\n-\t}\n-      else\n+      if ((*target.valid_decl_attribute) (decl, decl_attrs, attr_name,\n+\t\t\t\t\t  attr_args))\n \t{\n-\t  decl_attr_list = tree_cons (attr_name, attr_args, decl_attr_list);\n-\t  decl = build_decl_attribute_variant (decl, decl_attr_list);\n-\t}\n+\t  tree attr = lookup_attribute (IDENTIFIER_POINTER (attr_name),\n+\t\t\t\t\tdecl_attrs);\n \n-      validated = 1;\n+\t  if (attr != NULL_TREE)\n+\t    {\n+\t      /* Override existing arguments.  Declarations are unique\n+\t\t so we can modify this in place.  */\n+\t      TREE_VALUE (attr) = attr_args;\n+\t    }\n+\t  else\n+\t    {\n+\t      decl_attrs = tree_cons (attr_name, attr_args, decl_attrs);\n+\t      decl = build_decl_attribute_variant (decl, decl_attrs);\n+\t    }\n+\n+\t  /* Don't apply the attribute to both the decl and the type.  */\n+\t  return 1;\n+\t}\n     }\n-#endif\n \n-#ifdef VALID_MACHINE_TYPE_ATTRIBUTE\n-  if (validated)\n-    /* Don't apply the attribute to both the decl and the type.  */\n-    ;\n-  else if (VALID_MACHINE_TYPE_ATTRIBUTE (type, type_attr_list, attr_name,\n-\t\t\t\t\t attr_args))\n+  if (target.valid_type_attribute != NULL)\n     {\n-      tree attr = lookup_attribute (IDENTIFIER_POINTER (attr_name),\n-\t\t\t\t    type_attr_list);\n+      tree type_attrs = TYPE_ATTRIBUTES (type);\n \n-      if (attr != NULL_TREE)\n+      if ((*target.valid_type_attribute) (type, type_attrs, attr_name,\n+\t\t\t\t\t  attr_args))\n \t{\n-\t  /* Override existing arguments.\n-\t     ??? This currently works since attribute arguments are not\n-\t     included in `attribute_hash_list'.  Something more complicated\n-\t     may be needed in the future.  */\n-\t  TREE_VALUE (attr) = attr_args;\n-\t}\n-      else\n-\t{\n-\t  /* If this is part of a declaration, create a type variant,\n-\t     otherwise, this is part of a type definition, so add it\n-\t     to the base type.  */\n-\t  type_attr_list = tree_cons (attr_name, attr_args, type_attr_list);\n-\t  if (decl != 0)\n-\t    type = build_type_attribute_variant (type, type_attr_list);\n-\t  else\n-\t    TYPE_ATTRIBUTES (type) = type_attr_list;\n-\t}\n-\n-      if (decl != 0)\n-\tTREE_TYPE (decl) = type;\n+\t  tree attr = lookup_attribute (IDENTIFIER_POINTER (attr_name),\n+\t\t\t\t\ttype_attrs);\n \n-      validated = 1;\n-    }\n+\t  if (attr != NULL_TREE)\n+\t    {\n+\t      /* Override existing arguments.  ??? This currently\n+\t\t works since attribute arguments are not included in\n+\t\t `attribute_hash_list'.  Something more complicated\n+\t\t may be needed in the future.  */\n+\t      TREE_VALUE (attr) = attr_args;\n+\t    }\n+\t  else\n+\t    {\n+\t      /* If this is part of a declaration, create a type variant,\n+\t\t otherwise, this is part of a type definition, so add it\n+\t\t to the base type.  */\n+\t      type_attrs = tree_cons (attr_name, attr_args, type_attrs);\n+\t      if (decl != 0)\n+\t\ttype = build_type_attribute_variant (type, type_attrs);\n+\t      else\n+\t\tTYPE_ATTRIBUTES (type) = type_attrs;\n+\t    }\n \n-  /* Handle putting a type attribute on pointer-to-function-type by putting\n-     the attribute on the function type.  */\n-  else if (POINTER_TYPE_P (type)\n-\t   && TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE\n-\t   && VALID_MACHINE_TYPE_ATTRIBUTE (TREE_TYPE (type), type_attr_list,\n-\t\t\t\t\t    attr_name, attr_args))\n-    {\n-      tree inner_type = TREE_TYPE (type);\n-      tree inner_attr_list = TYPE_ATTRIBUTES (inner_type);\n-      tree attr = lookup_attribute (IDENTIFIER_POINTER (attr_name),\n-\t\t\t\t    type_attr_list);\n+\t  if (decl)\n+\t    TREE_TYPE (decl) = type;\n \n-      if (attr != NULL_TREE)\n-\tTREE_VALUE (attr) = attr_args;\n-      else\n-\t{\n-\t  inner_attr_list = tree_cons (attr_name, attr_args, inner_attr_list);\n-\t  inner_type = build_type_attribute_variant (inner_type,\n-\t\t\t\t\t\t     inner_attr_list);\n+\t  return 1;\n \t}\n \n-      if (decl != 0)\n-\tTREE_TYPE (decl) = build_pointer_type (inner_type);\n-      else\n+      /* Handle putting a type attribute on pointer-to-function-type\n+\t by putting the attribute on the function type.  */\n+      else if (POINTER_TYPE_P (type)\n+\t       && TREE_CODE (TREE_TYPE (type)) == FUNCTION_TYPE\n+\t       && (*target.valid_type_attribute) (TREE_TYPE (type), type_attrs,\n+\t\t\t\t\t\t  attr_name, attr_args))\n \t{\n-\t  /* Clear TYPE_POINTER_TO for the old inner type, since\n-\t     `type' won't be pointing to it anymore.  */\n-\t  TYPE_POINTER_TO (TREE_TYPE (type)) = NULL_TREE;\n-\t  TREE_TYPE (type) = inner_type;\n-\t}\n+\t  tree inner_type = TREE_TYPE (type);\n+\t  tree inner_attrs = TYPE_ATTRIBUTES (inner_type);\n+\t  tree attr = lookup_attribute (IDENTIFIER_POINTER (attr_name),\n+\t\t\t\t\ttype_attrs);\n \n-      validated = 1;\n+\t  if (attr != NULL_TREE)\n+\t    TREE_VALUE (attr) = attr_args;\n+\t  else\n+\t    {\n+\t      inner_attrs = tree_cons (attr_name, attr_args, inner_attrs);\n+\t      inner_type = build_type_attribute_variant (inner_type,\n+\t\t\t\t\t\t\t inner_attrs);\n+\t    }\n+\n+\t  if (decl)\n+\t    TREE_TYPE (decl) = build_pointer_type (inner_type);\n+\t  else\n+\t    {\n+\t      /* Clear TYPE_POINTER_TO for the old inner type, since\n+\t\t `type' won't be pointing to it anymore.  */\n+\t      TYPE_POINTER_TO (TREE_TYPE (type)) = NULL_TREE;\n+\t      TREE_TYPE (type) = inner_type;\n+\t    }\n+\n+\t  return 1;\n+\t}\n     }\n-#endif\n \n-  return validated;\n+  return 0;\n }\n \n /* Return non-zero if IDENT is a valid name for attribute ATTR,\n@@ -2938,34 +2934,83 @@ merge_attributes (a1, a2)\n }\n \n /* Given types T1 and T2, merge their attributes and return\n-   the result.  */\n+  the result.  */\n \n tree\n-merge_machine_type_attributes (t1, t2)\n+merge_type_attributes (t1, t2)\n      tree t1, t2;\n {\n-#ifdef MERGE_MACHINE_TYPE_ATTRIBUTES\n-  return MERGE_MACHINE_TYPE_ATTRIBUTES (t1, t2);\n-#else\n   return merge_attributes (TYPE_ATTRIBUTES (t1),\n \t\t\t   TYPE_ATTRIBUTES (t2));\n-#endif\n }\n \n /* Given decls OLDDECL and NEWDECL, merge their attributes and return\n    the result.  */\n \n tree\n-merge_machine_decl_attributes (olddecl, newdecl)\n+merge_decl_attributes (olddecl, newdecl)\n      tree olddecl, newdecl;\n {\n-#ifdef MERGE_MACHINE_DECL_ATTRIBUTES\n-  return MERGE_MACHINE_DECL_ATTRIBUTES (olddecl, newdecl);\n-#else\n   return merge_attributes (DECL_MACHINE_ATTRIBUTES (olddecl),\n \t\t\t   DECL_MACHINE_ATTRIBUTES (newdecl));\n-#endif\n }\n+\n+#ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+\n+/* Specialization of merge_decl_attributes for various Windows targets.\n+\n+   This handles the following situation:\n+\n+     __declspec (dllimport) int foo;\n+     int foo;\n+\n+   The second instance of `foo' nullifies the dllimport.  */\n+\n+tree\n+merge_dllimport_decl_attributes (old, new)\n+     tree old;\n+     tree new;\n+{\n+  tree a;\n+  int delete_dllimport_p;\n+\n+  old = DECL_MACHINE_ATTRIBUTES (old);\n+  new = DECL_MACHINE_ATTRIBUTES (new);\n+\n+  /* What we need to do here is remove from `old' dllimport if it doesn't\n+     appear in `new'.  dllimport behaves like extern: if a declaration is\n+     marked dllimport and a definition appears later, then the object\n+     is not dllimport'd.  */\n+  if (lookup_attribute (\"dllimport\", old) != NULL_TREE\n+      && lookup_attribute (\"dllimport\", new) == NULL_TREE)\n+    delete_dllimport_p = 1;\n+  else\n+    delete_dllimport_p = 0;\n+\n+  a = merge_attributes (old, new);\n+\n+  if (delete_dllimport_p)\n+    {\n+      tree prev,t;\n+\n+      /* Scan the list for dllimport and delete it.  */\n+      for (prev = NULL_TREE, t = a; t; prev = t, t = TREE_CHAIN (t))\n+\t{\n+\t  if (is_attribute_p (\"dllimport\", TREE_PURPOSE (t)))\n+\t    {\n+\t      if (prev == NULL_TREE)\n+\t\ta = TREE_CHAIN (a);\n+\t      else\n+\t\tTREE_CHAIN (prev) = TREE_CHAIN (t);\n+\t      break;\n+\t    }\n+\t}\n+    }\n+\n+  return a;\n+}\n+\n+#endif /* TARGET_DLLIMPORT_DECL_ATTRIBUTES  */\n \f\n /* Set the type qualifiers for TYPE to TYPE_QUALS, which is a bitmask\n    of the various TYPE_QUAL values.  */"}, {"sha": "7f2881c1e7bf19b6e064b90d34604d68fa63ba54", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/672a6f42e98d55a92af9b649f077c0d38517116e/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=672a6f42e98d55a92af9b649f077c0d38517116e", "patch": "@@ -2039,8 +2039,8 @@ extern tree make_tree\t\t\tPARAMS ((tree, struct rtx_def *));\n extern tree build_type_attribute_variant PARAMS ((tree, tree));\n extern tree build_decl_attribute_variant PARAMS ((tree, tree));\n \n-extern tree merge_machine_decl_attributes PARAMS ((tree, tree));\n-extern tree merge_machine_type_attributes PARAMS ((tree, tree));\n+extern tree merge_decl_attributes PARAMS ((tree, tree));\n+extern tree merge_type_attributes PARAMS ((tree, tree));\n \n /* Split a list of declspecs and attributes into two.  */\n \n@@ -2068,6 +2068,12 @@ extern tree lookup_attribute\t\tPARAMS ((const char *, tree));\n \n extern tree merge_attributes\t\tPARAMS ((tree, tree));\n \n+#ifdef TARGET_DLLIMPORT_DECL_ATTRIBUTES\n+/* Given two Windows decl attributes lists, possibly including\n+   dllimport, return a list of their union .  */\n+extern tree merge_dllimport_decl_attributes PARAMS ((tree, tree));\n+#endif\n+\n /* Return a version of the TYPE, qualified as indicated by the\n    TYPE_QUALS, if one exists.  If no qualified version exists yet,\n    return NULL_TREE.  */"}]}