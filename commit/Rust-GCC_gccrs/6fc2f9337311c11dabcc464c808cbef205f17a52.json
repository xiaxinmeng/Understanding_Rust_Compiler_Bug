{"sha": "6fc2f9337311c11dabcc464c808cbef205f17a52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmZjMmY5MzM3MzExYzExZGFiY2M0NjRjODA4Y2JlZjIwNWYxN2E1Mg==", "commit": {"author": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2020-01-21T08:34:42Z"}, "committer": {"name": "Andrew Pinski", "email": "apinski@marvell.com", "date": "2020-01-21T11:17:26Z"}, "message": "Change recursive prepare_block_for_update to use a worklist\n\nReported as PR 93321, prepare_block_for_update with some huge\nrecusive inlining can go past the stack limit. Transforming this\nrecursive into worklist improves the stack usage here and we no\nlonger seg fault for the testcase.  Note the order we walk the siblings\nchange.\n\nChangeLog:\n\tPR tree-opt/93321\n\t* tree-into-ssa.c (prepare_block_for_update_1): Split out from ...\n\t(prepare_block_for_update): This.  Use a worklist instead of recursing.", "tree": {"sha": "01d4541f9ee44e2a51cb51e69c6f43312a4afcff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01d4541f9ee44e2a51cb51e69c6f43312a4afcff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6fc2f9337311c11dabcc464c808cbef205f17a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc2f9337311c11dabcc464c808cbef205f17a52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6fc2f9337311c11dabcc464c808cbef205f17a52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6fc2f9337311c11dabcc464c808cbef205f17a52/comments", "author": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apinski-cavium", "id": 6335315, "node_id": "MDQ6VXNlcjYzMzUzMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/6335315?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apinski-cavium", "html_url": "https://github.com/apinski-cavium", "followers_url": "https://api.github.com/users/apinski-cavium/followers", "following_url": "https://api.github.com/users/apinski-cavium/following{/other_user}", "gists_url": "https://api.github.com/users/apinski-cavium/gists{/gist_id}", "starred_url": "https://api.github.com/users/apinski-cavium/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apinski-cavium/subscriptions", "organizations_url": "https://api.github.com/users/apinski-cavium/orgs", "repos_url": "https://api.github.com/users/apinski-cavium/repos", "events_url": "https://api.github.com/users/apinski-cavium/events{/privacy}", "received_events_url": "https://api.github.com/users/apinski-cavium/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0aec8643830a50812aeec0296086ed338aac678", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0aec8643830a50812aeec0296086ed338aac678", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0aec8643830a50812aeec0296086ed338aac678"}], "stats": {"total": 67, "additions": 55, "deletions": 12}, "files": [{"sha": "262f0d6506f6cf2e03350343ebb7447ebfccd3be", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc2f9337311c11dabcc464c808cbef205f17a52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc2f9337311c11dabcc464c808cbef205f17a52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6fc2f9337311c11dabcc464c808cbef205f17a52", "patch": "@@ -1,3 +1,11 @@\n+2020-01-21  Andrew Pinski  <apinski@marvel.com>\n+\n+\tPR tree-opt/93321\n+\t* tree-into-ssa.c (prepare_block_for_update_1): Split out\n+\tfrom ...\n+\t(prepare_block_for_update): This.  Use a worklist instead of\n+\trecursing.\n+\n 2020-01-21  Mihail-Calin Ionescu  <mihail.ionescu@arm.com>\n \n \t* gcc/config/arm/arm.c (clear_operation_p):"}, {"sha": "6528acac31ac577394d47dbbad3b65e57047e191", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 47, "deletions": 12, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6fc2f9337311c11dabcc464c808cbef205f17a52/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6fc2f9337311c11dabcc464c808cbef205f17a52/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=6fc2f9337311c11dabcc464c808cbef205f17a52", "patch": "@@ -2593,11 +2593,9 @@ mark_use_interesting (tree var, gimple *stmt, basic_block bb,\n     }\n }\n \n-\n-/* Do a dominator walk starting at BB processing statements that\n-   reference symbols in SSA operands.  This is very similar to\n-   mark_def_sites, but the scan handles statements whose operands may\n-   already be SSA names.\n+/* Processing statements in BB that reference symbols in SSA operands.\n+   This is very similar to mark_def_sites, but the scan handles\n+   statements whose operands may already be SSA names.\n \n    If INSERT_PHI_P is true, mark those uses as live in the\n    corresponding block.  This is later used by the PHI placement\n@@ -2610,9 +2608,8 @@ mark_use_interesting (tree var, gimple *stmt, basic_block bb,\n \t   that.  */\n \n static void\n-prepare_block_for_update (basic_block bb, bool insert_phi_p)\n+prepare_block_for_update_1 (basic_block bb, bool insert_phi_p)\n {\n-  basic_block son;\n   edge e;\n   edge_iterator ei;\n \n@@ -2694,13 +2691,51 @@ prepare_block_for_update (basic_block bb, bool insert_phi_p)\n \t}\n     }\n \n-  /* Now visit all the blocks dominated by BB.  */\n-  for (son = first_dom_son (CDI_DOMINATORS, bb);\n-       son;\n-       son = next_dom_son (CDI_DOMINATORS, son))\n-    prepare_block_for_update (son, insert_phi_p);\n }\n \n+/* Do a dominator walk starting at BB processing statements that\n+   reference symbols in SSA operands.  This is very similar to\n+   mark_def_sites, but the scan handles statements whose operands may\n+   already be SSA names.\n+\n+   If INSERT_PHI_P is true, mark those uses as live in the\n+   corresponding block.  This is later used by the PHI placement\n+   algorithm to make PHI pruning decisions.\n+\n+   FIXME.  Most of this would be unnecessary if we could associate a\n+\t   symbol to all the SSA names that reference it.  But that\n+\t   sounds like it would be expensive to maintain.  Still, it\n+\t   would be interesting to see if it makes better sense to do\n+\t   that.  */\n+static void\n+prepare_block_for_update (basic_block bb, bool insert_phi_p)\n+{\n+  size_t sp = 0;\n+  basic_block *worklist;\n+\n+  /* Allocate the worklist.  */\n+  worklist = XNEWVEC (basic_block, n_basic_blocks_for_fn (cfun));\n+  /* Add the BB to the worklist.  */\n+  worklist[sp++] = bb;\n+\n+  while (sp)\n+    {\n+      basic_block bb;\n+      basic_block son;\n+\n+      /* Pick a block from the worklist.  */\n+      bb = worklist[--sp];\n+\n+      prepare_block_for_update_1 (bb, insert_phi_p);\n+\n+      /* Now add all the blocks dominated by BB to the worklist.  */\n+      for (son = first_dom_son (CDI_DOMINATORS, bb);\n+\t   son;\n+\t   son = next_dom_son (CDI_DOMINATORS, son))\n+\tworklist[sp++] = son;\n+    }\n+  free (worklist);\n+}\n \n /* Helper for prepare_names_to_update.  Mark all the use sites for\n    NAME as interesting.  BLOCKS and INSERT_PHI_P are as in"}]}