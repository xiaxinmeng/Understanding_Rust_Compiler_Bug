{"sha": "22cff118f7526bec195ed6e41452980820fdf3a8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjJjZmYxMThmNzUyNmJlYzE5NWVkNmU0MTQ1Mjk4MDgyMGZkZjNhOA==", "commit": {"author": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-04-23T10:23:51Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-04-26T10:32:00Z"}, "message": "Add '-Wopenacc-parallelism'\n\n... to diagnose potentially suboptimal choices regarding OpenACC parallelism.\n\nNot enabled by default: too noisy (\"*potentially* suboptimal choices\"); see\nXFAILed 'dg-bogus'es.\n\n\tgcc/c-family/\n\t* c.opt (Wopenacc-parallelism): New.\n\tgcc/fortran/\n\t* lang.opt (Wopenacc-parallelism): New.\n\tgcc/\n\t* omp-offload.c (oacc_validate_dims): Implement\n\t'-Wopenacc-parallelism'.\n\t* doc/invoke.texi (-Wopenacc-parallelism): Document.\n\tgcc/testsuite/\n\t* c-c++-common/goacc/diag-parallelism-1.c: New.\n\t* c-c++-common/goacc/acc-icf.c: Specify '-Wopenacc-parallelism',\n\tand match diagnostics, as appropriate.\n\t* c-c++-common/goacc/classify-kernels-unparallelized.c: Likewise.\n\t* c-c++-common/goacc/classify-kernels.c: Likewise.\n\t* c-c++-common/goacc/classify-parallel.c: Likewise.\n\t* c-c++-common/goacc/classify-routine.c: Likewise.\n\t* c-c++-common/goacc/classify-serial.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-1.c: Likewise.\n\t* c-c++-common/goacc/kernels-decompose-2.c: Likewise.\n\t* c-c++-common/goacc/parallel-dims-1.c: Likewise.\n\t* c-c++-common/goacc/parallel-reduction.c: Likewise.\n\t* c-c++-common/goacc/pr70688.c: Likewise.\n\t* c-c++-common/goacc/routine-1.c: Likewise.\n\t* c-c++-common/goacc/routine-level-of-parallelism-2.c: Likewise.\n\t* c-c++-common/goacc/uninit-dim-clause.c: Likewise.\n\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Likewise.\n\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n\t* gfortran.dg/goacc/classify-parallel.f95: Likewise.\n\t* gfortran.dg/goacc/classify-routine.f95: Likewise.\n\t* gfortran.dg/goacc/classify-serial.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-decompose-1.f95: Likewise.\n\t* gfortran.dg/goacc/kernels-decompose-2.f95: Likewise.\n\t* gfortran.dg/goacc/parallel-tree.f95: Likewise.\n\t* gfortran.dg/goacc/routine-4.f90: Likewise.\n\t* gfortran.dg/goacc/routine-level-of-parallelism-1.f90: Likewise.\n\t* gfortran.dg/goacc/routine-module-mod-1.f90: Likewise.\n\t* gfortran.dg/goacc/routine-multiple-directives-1.f90: Likewise.\n\t* gfortran.dg/goacc/uninit-dim-clause.f95: Likewise.\n\tlibgomp/\n\t* testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c: Specify\n\t'-Wopenacc-parallelism', and match diagnostics, as appropriate.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/loop-w-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/mode-transitions.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/par-reduction-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/par-reduction-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-dims.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/parallel-reduction.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/pr85381-3.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/private-variables.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-5.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/reduction-7.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-g-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-w-1.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c: Likewise.\n\t* testsuite/libgomp.oacc-c-c++-common/static-variable-1.c:\n\tLikewise.\n\t* testsuite/libgomp.oacc-fortran/optional-private.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/par-reduction-2-1.f: Likewise.\n\t* testsuite/libgomp.oacc-fortran/par-reduction-2-2.f: Likewise.\n\t* testsuite/libgomp.oacc-fortran/parallel-dims.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/parallel-reduction.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/pr84028.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/private-variables.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/reduction-1.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/reduction-5.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/reduction-6.f90: Likewise.\n\t* testsuite/libgomp.oacc-fortran/routine-7.f90: Likewise.\n\nCo-Authored-By: Nathan Sidwell <nathan@codesourcery.com>\nCo-Authored-By: Tom de Vries <vries@codesourcery.com>\nCo-Authored-By: Julian Brown <julian@codesourcery.com>\nCo-Authored-By: Kwok Cheung Yeung <kcy@codesourcery.com>", "tree": {"sha": "b2050907ef4e5e174e850714c98bcdc9f0713562", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2050907ef4e5e174e850714c98bcdc9f0713562"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/22cff118f7526bec195ed6e41452980820fdf3a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22cff118f7526bec195ed6e41452980820fdf3a8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/22cff118f7526bec195ed6e41452980820fdf3a8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/22cff118f7526bec195ed6e41452980820fdf3a8/comments", "author": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c640779bf042ceb05fe50260307af88fed75407", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c640779bf042ceb05fe50260307af88fed75407", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c640779bf042ceb05fe50260307af88fed75407"}], "stats": {"total": 514, "additions": 511, "deletions": 3}, "files": [{"sha": "f1b4c3f34ecb01c180534b8c588db4eff85adf3b", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1037,6 +1037,10 @@ Wold-style-definition\n C ObjC Var(warn_old_style_definition) Init(-1) Warning\n Warn if an old-style parameter definition is used.\n \n+Wopenacc-parallelism\n+C C++ Var(warn_openacc_parallelism) Warning\n+Warn about potentially suboptimal choices related to OpenACC parallelism.\n+\n Wopenmp-simd\n C C++ Var(warn_openmp_simd) Warning LangEnabledBy(C C++,Wall)\n Warn if a simd directive is overridden by the vectorizer cost model."}, {"sha": "40cacc6f8e7e64cce22baab27b9e3ec39ff0f8f2", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -364,7 +364,9 @@ Objective-C and Objective-C++ Dialects}.\n -Wmissing-include-dirs  -Wmissing-noreturn  -Wno-missing-profile @gol\n -Wno-multichar  -Wmultistatement-macros  -Wnonnull  -Wnonnull-compare @gol\n -Wnormalized=@r{[}none@r{|}id@r{|}nfc@r{|}nfkc@r{]} @gol\n--Wnull-dereference  -Wno-odr  -Wopenmp-simd  @gol\n+-Wnull-dereference  -Wno-odr  @gol\n+-Wopenacc-parallelism  @gol\n+-Wopenmp-simd  @gol\n -Wno-overflow  -Woverlength-strings  -Wno-override-init-side-effects @gol\n -Wpacked  -Wno-packed-bitfield-compat  -Wpacked-not-aligned  -Wpadded @gol\n -Wparentheses  -Wno-pedantic-ms-format @gol\n@@ -8749,6 +8751,12 @@ Do not warn about compile-time overflow in constant expressions.\n Warn about One Definition Rule violations during link-time optimization.\n Enabled by default.\n \n+@item -Wopenacc-parallelism\n+@opindex Wopenacc-parallelism\n+@opindex Wno-openacc-parallelism\n+@cindex OpenACC accelerator programming\n+Warn about potentially suboptimal choices related to OpenACC parallelism.\n+\n @item -Wopenmp-simd\n @opindex Wopenmp-simd\n @opindex Wno-openmp-simd"}, {"sha": "6db01c736be1866fb186a01fe645aeab52232e6b", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -285,6 +285,10 @@ Wuse-without-only\n Fortran Var(warn_use_without_only) Warning\n Warn about USE statements that have no ONLY qualifier.\n \n+Wopenacc-parallelism\n+Fortran\n+; Documented in C\n+\n Wopenmp-simd\n Fortran\n ; Documented in C"}, {"sha": "16124613fa7f7827c1237d3bcec6c07c056216e2", "filename": "gcc/omp-offload.c", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Fomp-offload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Fomp-offload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-offload.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -928,6 +928,35 @@ oacc_validate_dims (tree fn, tree attrs, int *dims, int level, unsigned used)\n       pos = TREE_CHAIN (pos);\n     }\n \n+  bool check = true;\n+#ifdef ACCEL_COMPILER\n+  check = false;\n+#endif\n+  if (check\n+      && warn_openacc_parallelism\n+      && !lookup_attribute (\"oacc kernels\", DECL_ATTRIBUTES (fn)))\n+    {\n+      static char const *const axes[] =\n+      /* Must be kept in sync with GOMP_DIM enumeration.  */\n+\t{ \"gang\", \"worker\", \"vector\" };\n+      for (ix = level >= 0 ? level : 0; ix != GOMP_DIM_MAX; ix++)\n+\tif (dims[ix] < 0)\n+\t  ; /* Defaulting axis.  */\n+\telse if ((used & GOMP_DIM_MASK (ix)) && dims[ix] == 1)\n+\t  /* There is partitioned execution, but the user requested a\n+\t     dimension size of 1.  They're probably confused.  */\n+\t  warning_at (DECL_SOURCE_LOCATION (fn), OPT_Wopenacc_parallelism,\n+\t\t      \"region contains %s partitioned code but\"\n+\t\t      \" is not %s partitioned\", axes[ix], axes[ix]);\n+\telse if (!(used & GOMP_DIM_MASK (ix)) && dims[ix] != 1)\n+\t  /* The dimension is explicitly partitioned to non-unity, but\n+\t     no use is made within the region.  */\n+\t  warning_at (DECL_SOURCE_LOCATION (fn), OPT_Wopenacc_parallelism,\n+\t\t      \"region is %s partitioned but\"\n+\t\t      \" does not contain %s partitioned code\",\n+\t\t      axes[ix], axes[ix]);\n+    }\n+\n   bool changed = targetm.goacc.validate_dims (fn, dims, level, used);\n \n   /* Default anything left to 1 or a partitioned default.  */"}, {"sha": "9cf119bf89c7c4404a4bc5cfa71309411671ce27", "filename": "gcc/testsuite/c-c++-common/goacc/acc-icf.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Facc-icf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Facc-icf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Facc-icf.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -2,7 +2,12 @@\n \n /* { dg-additional-options \"-fopenacc -O2 -fdump-ipa-icf\" }  */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #pragma acc routine gang\n+/* { dg-bogus \"warning: region is worker partitioned but does not contain worker partitioned code\" \"TODO default 'gang' 'vector'\" { xfail *-*-* } .+3 }\n+   TODO It's the compiler's own decision to not use 'worker' parallelism here, so it doesn't make sense to bother the user about it.  */\n int\n routine1 (int n)\n {\n@@ -16,6 +21,8 @@ routine1 (int n)\n }\n \n #pragma acc routine gang\n+/* { dg-bogus \"warning: region is worker partitioned but does not contain worker partitioned code\" \"TODO default 'gang' 'vector'\" { xfail *-*-* } .+3 }\n+   TODO It's the compiler's own decision to not use 'worker' parallelism here, so it doesn't make sense to bother the user about it.  */\n int\n routine2 (int n)\n {"}, {"sha": "218f6248062c98c53b9768be812310f96bf6c84c", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels-unparallelized.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels-unparallelized.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -7,6 +7,9 @@\n    { dg-additional-options \"-fdump-tree-parloops1-all\" }\n    { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #define N 1024\n \n extern unsigned int *__restrict a;"}, {"sha": "95a150ca9acde6b3af7f70b8d19ffe4ae5fa5438", "filename": "gcc/testsuite/c-c++-common/goacc/classify-kernels.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-kernels.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -7,6 +7,9 @@\n    { dg-additional-options \"-fdump-tree-parloops1-all\" }\n    { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #define N 1024\n \n extern unsigned int *__restrict a;"}, {"sha": "230e70c66cd168f11b901a436d6cbf2b850b630c", "filename": "gcc/testsuite/c-c++-common/goacc/classify-parallel.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-parallel.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -6,6 +6,9 @@\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n    { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #define N 1024\n \n extern unsigned int *__restrict a;"}, {"sha": "81fe3696baa511b96d686986a6a4a179b98266cc", "filename": "gcc/testsuite/c-c++-common/goacc/classify-routine.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-routine.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -6,6 +6,9 @@\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n    { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #define N 1024\n \n extern unsigned int *__restrict a;"}, {"sha": "ae052ae6a1cef04f4910674b4ff973fe6dc9ee8b", "filename": "gcc/testsuite/c-c++-common/goacc/classify-serial.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-serial.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-serial.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fclassify-serial.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -6,6 +6,9 @@\n    { dg-additional-options \"-fdump-tree-ompexp\" }\n    { dg-additional-options \"-fdump-tree-oaccdevlow\" } */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #define N 1024\n \n extern unsigned int *__restrict a;\n@@ -15,6 +18,11 @@ extern unsigned int *__restrict c;\n void SERIAL ()\n {\n #pragma acc serial loop copyin (a[0:N], b[0:N]) copyout (c[0:N]) /* { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" } */\n+  /* { dg-bogus \"warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-1 }\n+     { dg-bogus \"warning: region contains worker partitioned code but is not worker partitioned\" \"\" { target *-*-* } .-2 }\n+     { dg-bogus \"warning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }\n+     TODO Should we really diagnose this if the user explicitly requested 'serial'?\n+     TODO Should we instead diagnose ('-Wextra' category?) that the user may enable use of parallelism if replacing 'serial' with 'parallel', if applicable?  */\n   for (unsigned int i = 0; i < N; i++)\n     c[i] = a[i] + b[i];\n }"}, {"sha": "6ee7bd078ddce6f72af83d79ed9cdd3096bb79ff", "filename": "gcc/testsuite/c-c++-common/goacc/diag-parallelism-1.c", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdiag-parallelism-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdiag-parallelism-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fdiag-parallelism-1.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -0,0 +1,124 @@\n+/* Diagnostics about potentially suboptimal choices related to OpenACC\n+   parallelism.\n+\n+   { dg-additional-options \"-Wopenacc-parallelism\" }\n+*/\n+\n+\n+//TODO 'kernels'\n+\n+//TODO 'serial'\n+\n+//TODO 'routine'\n+\n+//TODO Fortran\n+\n+\n+static void f1 ()\n+{\n+  int ary[10];\n+\n+\n+#pragma acc parallel num_gangs (1)\n+  /* { dg-warning \"region contains gang partitioned code but is not gang partitioned\" \"\" { target *-*-* } .-1 } */\n+  {\n+    #pragma acc loop gang\n+    for (int i = 0; i < 10; i++)\n+      ary[i] = i;\n+  }\n+\n+#pragma acc parallel num_workers (1)\n+  /* { dg-warning \"region contains worker partitioned code but is not worker partitioned\" \"\" { target *-*-* } .-1 } */\n+  {\n+    #pragma acc loop worker\n+    for (int i = 0; i < 10; i++)\n+      ary[i] = i;\n+  }\n+\n+#pragma acc parallel vector_length (1)\n+  /* { dg-warning \"region contains vector partitioned code but is not vector partitioned\" \"\" { target *-*-* } .-1 } */\n+  {\n+    #pragma acc loop vector\n+    for (int i = 0; i < 10; i++)\n+      ary[i] = i;\n+  }\n+}\n+\n+\n+static void f2 ()\n+{\n+  int ary[10];\n+\n+\n+#pragma acc parallel num_gangs (8)\n+  /* { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .-1 } */\n+  {\n+    #pragma acc loop worker\n+    for (int i = 0; i < 10; i++)\n+      ary[i] = i;\n+  }\n+\n+#pragma acc parallel num_gangs (8)\n+  /* { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .-1 } */\n+  {\n+    #pragma acc loop vector\n+    for (int i = 0; i < 10; i++)\n+      ary[i] = i;\n+  }\n+\n+#pragma acc parallel num_gangs (8)\n+  /* { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .-1 } */\n+  {\n+    #pragma acc loop worker vector\n+    for (int i = 0; i < 10; i++)\n+      ary[i] = i;\n+  }\n+\n+#pragma acc parallel num_workers (8)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n+  {\n+    #pragma acc loop gang\n+    for (int i = 0; i < 10; i++)\n+      ary[i] = i;\n+  }\n+\n+#pragma acc parallel num_workers (8)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n+  {\n+    #pragma acc loop vector\n+    for (int i = 0; i < 10; i++)\n+      ary[i] = i;\n+  }\n+\n+#pragma acc parallel num_workers (8)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n+  {\n+    #pragma acc loop gang vector\n+    for (int i = 0; i < 10; i++)\n+      ary[i] = i;\n+  }\n+\n+#pragma acc parallel vector_length (8)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n+  {\n+    #pragma acc loop gang\n+    for (int i = 0; i < 10; i++)\n+      ary[i] = i;\n+  }\n+\n+#pragma acc parallel vector_length (8)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n+  {\n+    #pragma acc loop worker\n+    for (int i = 0; i < 10; i++)\n+      ary[i] = i;\n+  }\n+\n+#pragma acc parallel vector_length (8)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n+  {\n+    #pragma acc loop gang worker\n+    for (int i = 0; i < 10; i++)\n+      ary[i] = i;\n+  }\n+}"}, {"sha": "f549cbadfa7e3faee1adf3006e4df312df2db9c3", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-1.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-1.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -5,6 +5,9 @@\n /* { dg-additional-options \"--param=openacc-kernels=decompose\" }\n    { dg-additional-options \"-fdump-tree-omp_oacc_kernels_decompose\" } */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n /* See also '../../gfortran.dg/goacc/kernels-decompose-1.f95'.  */\n \n /* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'"}, {"sha": "cdf85d4bafae6843cc9739a74c8044bd107656b9", "filename": "gcc/testsuite/c-c++-common/goacc/kernels-decompose-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fkernels-decompose-2.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -4,6 +4,9 @@\n /* { dg-additional-options \"--param=openacc-kernels=decompose\" }\n /* { dg-additional-options \"-O2\" } for 'parloops'.  */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n /* See also '../../gfortran.dg/goacc/kernels-decompose-2.f95'.  */\n \n /* It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n@@ -116,6 +119,7 @@ main ()\n   }\n \n #pragma acc kernels\n+  /* { dg-bogus \"warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'kernels'\" { xfail *-*-* } .-1 } */\n   {\n     y = f_g (a[5]); /* { dg-line l_part[incr c_part] } */\n     /*TODO If such a construct is placed in its own part (like it is, here), can't this actually use gang paralelism, instead of \"gang-single\"?"}, {"sha": "2a8d35d493de324c770e2ce775b27c50d3b5e4f6", "filename": "gcc/testsuite/c-c++-common/goacc/parallel-dims-1.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-dims-1.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,11 +1,18 @@\n /* Valid use of OpenACC parallelism dimensions clauses: num_gangs, num_workers,\n    vector_length.  */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n void f(int i)\n {\n #pragma acc kernels num_gangs(i) num_workers(i) vector_length(i)\n   ;\n \n #pragma acc parallel num_gangs(i) num_workers(i) vector_length(i)\n+  /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO runtime\" { xfail *-*-* } .-1 }\n+     { dg-bogus \"warning: region is worker partitioned but does not contain worker partitioned code\" \"TODO runtime\" { xfail *-*-* } .-2 }\n+     { dg-bogus \"warning: region is vector partitioned but does not contain vector partitioned code\" \"TODO runtime\" { xfail *-*-* } .-3 }\n+     TODO 'region is [...] partitioned' isn't correct for 'i == 1'.  */\n   ;\n }"}, {"sha": "c5c0edc98ee69b26f2006c31f0307ce217f4e219", "filename": "gcc/testsuite/c-c++-common/goacc/parallel-reduction.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fparallel-reduction.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n int\n main ()\n {\n@@ -7,6 +10,7 @@ main ()\n #pragma acc data copy (dummy)\n   {\n #pragma acc parallel num_gangs (10) copy (sum) reduction (+:sum)\n+    /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-1 } */\n     {\n       int v = 5;\n       sum += 10 + v;"}, {"sha": "e96a8530772f2d5983e538c22a3007d423344e07", "filename": "gcc/testsuite/c-c++-common/goacc/pr70688.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpr70688.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpr70688.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Fpr70688.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n const int n = 100;\n \n int\n@@ -22,6 +25,7 @@ parallel_reduction ()\n #pragma acc data copy (dummy)\n   {\n #pragma acc parallel num_gangs (10) copy (sum) reduction (+:sum)\n+    /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-1 } */\n     {\n       int v = 5;\n       sum += 10 + v;\n@@ -37,10 +41,12 @@ main ()\n   int i, s = 0;\n \n #pragma acc parallel num_gangs (10) copy (s) reduction (+:s)\n+  /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-1 } */\n   for (i = 0; i < n; i++)\n     s += i+1;\n \n #pragma acc parallel num_gangs (10) reduction (+:s) copy (s)\n+  /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-1 } */\n   for (i = 0; i < n; i++)\n     s += i+1;\n "}, {"sha": "051f7937deee9a307ba7970fda3283fb5a74a481", "filename": "gcc/testsuite/c-c++-common/goacc/routine-1.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-1.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,15 +1,23 @@\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n \n #pragma acc routine gang\n+/* { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .+3 }\n+   { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .+2 }\n+   { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .+1 } */\n void gang (void)\n {\n }\n \n #pragma acc routine worker\n+/* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .+2 }\n+   { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .+1 } */\n void worker (void)\n {\n }\n \n #pragma acc routine vector\n+/* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .+1 } */\n void vector (void)\n {\n }"}, {"sha": "33678fe8d0a98b8fe30fb45bf13d75d03dc5b836", "filename": "gcc/testsuite/c-c++-common/goacc/routine-level-of-parallelism-2.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-level-of-parallelism-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-level-of-parallelism-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Froutine-level-of-parallelism-2.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -2,7 +2,13 @@\n    with the OpenACC 'routine' directive.  The Fortran counterpart is\n    '../../gfortran.dg/goacc/routine-level-of-parallelism-1.f90'.  */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #pragma acc routine gang\n+/* { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .+3 }\n+   { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .+2 }\n+   { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .+1 } */\n void g_1 (void)\n {\n }"}, {"sha": "d9b143bb1086b0f4cd774282e67fd0241991b36c", "filename": "gcc/testsuite/c-c++-common/goacc/uninit-dim-clause.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-dim-clause.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-dim-clause.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgoacc%2Funinit-dim-clause.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,16 +1,22 @@\n /* { dg-additional-options \"-Wuninitialized\" } */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n void acc_parallel()\n {\n   int i, j, k;\n \n   #pragma acc parallel num_gangs(i) /* { dg-warning \"is used uninitialized\" } */\n+  /* { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .-1 } */\n   ;\n \n   #pragma acc parallel num_workers(j) /* { dg-warning \"is used uninitialized\" } */\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n   ;\n \n   #pragma acc parallel vector_length(k) /* { dg-warning \"is used uninitialized\" } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n   ;\n }\n "}, {"sha": "cb5251a2aeb1e95d818b901aba5c993c8b224172", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels-unparallelized.f95", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels-unparallelized.f95?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -7,6 +7,9 @@\n ! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n ! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n program main\n   implicit none\n   integer, parameter :: n = 1024"}, {"sha": "07aaf065e1d93b50321efe96e5a873bcbb856109", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-kernels.f95", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-kernels.f95?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -7,6 +7,9 @@\n ! { dg-additional-options \"-fdump-tree-parloops1-all\" }\n ! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n program main\n   implicit none\n   integer, parameter :: n = 1024"}, {"sha": "a41e0e68b385201cc546afc88d68957ef07b8aaa", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-parallel.f95", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-parallel.f95?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -6,6 +6,9 @@\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n ! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n program main\n   implicit none\n   integer, parameter :: n = 1024"}, {"sha": "52cc870dfba08d4039b3d8f334615aea594beebd", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-routine.f95", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-routine.f95?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -6,6 +6,9 @@\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n ! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n subroutine ROUTINE\n   !$acc routine worker\n   integer, parameter :: n = 1024"}, {"sha": "6d402e683de6812f5ba5b720558a05312b119731", "filename": "gcc/testsuite/gfortran.dg/goacc/classify-serial.f95", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fclassify-serial.f95?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -6,6 +6,9 @@\n ! { dg-additional-options \"-fdump-tree-ompexp\" }\n ! { dg-additional-options \"-fdump-tree-oaccdevlow\" }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n program main\n   implicit none\n   integer, parameter :: n = 1024\n@@ -15,6 +18,9 @@ program main\n   call setup(a, b)\n \n   !$acc serial loop copyin (a(0:n-1), b(0:n-1)) copyout (c(0:n-1)) ! { dg-message \"optimized: assigned OpenACC gang vector loop parallelism\" }\n+  ! { dg-bogus \"warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-1 }\n+  ! { dg-bogus \"warning: region contains worker partitioned code but is not worker partitioned\" \"\" { target *-*-* } .-2 }\n+  ! { dg-bogus \"warning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }\n   do i = 0, n - 1\n      c(i) = a(i) + b(i)\n   end do"}, {"sha": "ddaf7f8e43d47461958ca759c2e6bdcad0c7a081", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-decompose-1.f95", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-decompose-1.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-decompose-1.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-decompose-1.f95?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -5,6 +5,9 @@\n ! { dg-additional-options \"--param=openacc-kernels=decompose\" }\n ! { dg-additional-options \"-fdump-tree-omp_oacc_kernels_decompose\" }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n ! See also '../../c-c++-common/goacc/kernels-decompose-1.c'.\n \n ! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'"}, {"sha": "a3cec8325c7261059bae8f1390d6fb29c9e0ec55", "filename": "gcc/testsuite/gfortran.dg/goacc/kernels-decompose-2.f95", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-decompose-2.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-decompose-2.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fkernels-decompose-2.f95?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -4,6 +4,9 @@\n ! { dg-additional-options \"--param=openacc-kernels=decompose\" }\n ! { dg-additional-options \"-O2\" } for 'parloops'.\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n ! See also '../../c-c++-common/goacc/kernels-decompose-2.c'.\n \n ! It's only with Tcl 8.5 (released in 2007) that \"the variable 'varName'\n@@ -119,6 +122,7 @@ program main\n   !$acc end kernels\n \n   !$acc kernels\n+  ! { dg-bogus \"warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'kernels'\" { xfail *-*-* } .-1 }\n   y = f_g (a(5)) ! { dg-line l_part[incr c_part] }\n   !TODO If such a construct is placed in its own part (like it is, here), can't this actually use gang paralelism, instead of \"gang-single\"?\n   ! { dg-message \"note: beginning 'gang-single' part in OpenACC 'kernels' region\" \"\" { target *-*-* } l_part$c_part }"}, {"sha": "c51cb2a0504899426694e1458f330b57ac60daad", "filename": "gcc/testsuite/gfortran.dg/goacc/parallel-tree.f95", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-tree.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-tree.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Fparallel-tree.f95?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -2,6 +2,9 @@\n \n ! test for tree-dump-original and spaces-commas\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n program test\n   implicit none\n   integer :: q, i, j, k, m, n, o, p, r, s, t, u, v, w\n@@ -12,6 +15,9 @@ program test\n   !$acc no_create(n) &\n   !$acc present(o), pcopy(p), pcopyin(r), pcopyout(s), pcreate(t) &\n   !$acc deviceptr(u), private(v), firstprivate(w)\n+  ! { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .-1 }\n+  ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 }\n+  ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 }\n   !$acc end parallel\n \n end program test"}, {"sha": "53b1fbe5039fa882b17eac4d78bda3d99674a7d7", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-4.f90", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-4.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-4.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-4.f90?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,5 +1,8 @@\n ! Test invalid calls to routines.\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n module param\n   integer, parameter :: N = 32\n end module param\n@@ -120,6 +123,9 @@ program main\n \n   subroutine gang (a) ! { dg-message \"declared here\" 3 }\n     !$acc routine gang\n+    ! { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .-2 }\n+    ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-3 }\n+    ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-4 }\n     integer, intent (inout) :: a(N)\n     integer :: i\n \n@@ -130,6 +136,8 @@ end subroutine gang\n \n   subroutine worker (a) ! { dg-message \"declared here\" 2 }\n     !$acc routine worker\n+    ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 }\n+    ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 }\n     integer, intent (inout) :: a(N)\n     integer :: i\n \n@@ -140,6 +148,7 @@ end subroutine worker\n \n   subroutine vector (a) ! { dg-message \"declared here\" }\n     !$acc routine vector\n+    ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 }\n     integer, intent (inout) :: a(N)\n     integer :: i\n "}, {"sha": "99929f136f698f4277712f4815218374fe712517", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-level-of-parallelism-1.f90", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-level-of-parallelism-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-level-of-parallelism-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-level-of-parallelism-1.f90?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -2,8 +2,14 @@\n ! with the OpenACC routine directive.  The C/C++ counterpart is\n ! '../../c-c++-common/goacc/routine-level-of-parallelism-2.c'.\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n subroutine g_1\n   !$acc routine gang\n+  ! { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .-2 }\n+  ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-3 }\n+  ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-4 }\n end subroutine g_1\n \n subroutine s_1_2a"}, {"sha": "22106508141d06047653af7b5674c988c5e40c27", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-module-mod-1.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-mod-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-mod-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-module-mod-1.f90?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -2,6 +2,9 @@\n \n ! { dg-additional-options \"-fopt-info-optimized-omp\" }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n module routine_module_mod_1\n contains\n   subroutine s_1\n@@ -53,6 +56,7 @@ end subroutine w_1\n   subroutine g_1\n     implicit none\n     !$acc routine gang\n+    ! { dg-bogus \"warning: region is worker partitioned but does not contain worker partitioned code\" \"TODO default 'gang' 'vector'\" { xfail *-*-* } .-3 }\n \n     integer :: i\n "}, {"sha": "622a9d9ccce8a8ec601c3f5774733d4d0a3825ed", "filename": "gcc/testsuite/gfortran.dg/goacc/routine-multiple-directives-1.f90", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-multiple-directives-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-multiple-directives-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Froutine-multiple-directives-1.f90?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,5 +1,8 @@\n ! Check for valid cases of multiple OpenACC 'routine' directives.\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n       SUBROUTINE s_1\n !$ACC ROUTINE(s_1)\n !$ACC ROUTINE(s_1) SEQ\n@@ -17,12 +20,14 @@ SUBROUTINE v_1\n !$ACC ROUTINE VECTOR\n !$ACC ROUTINE(v_1) VECTOR\n !$ACC ROUTINE VECTOR\n+! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-5 }\n       END SUBROUTINE v_1\n \n       SUBROUTINE v_2\n !$ACC ROUTINE(v_2) VECTOR\n !$ACC ROUTINE VECTOR\n !$ACC ROUTINE(v_2) VECTOR\n+! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-4 }\n       END SUBROUTINE v_2\n \n       SUBROUTINE sub_1"}, {"sha": "59e923f90fbf61bfe17c182684bf0dedb77f760d", "filename": "gcc/testsuite/gfortran.dg/goacc/uninit-dim-clause.f95", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-dim-clause.f95", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-dim-clause.f95", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgoacc%2Funinit-dim-clause.f95?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,16 +1,22 @@\n ! { dg-additional-options \"-Wuninitialized\" }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n subroutine acc_parallel\n   implicit none\n   integer :: i, j, k\n \n   !$acc parallel num_gangs(i) ! { dg-warning \"is used uninitialized\" }\n+  ! { dg-warning \"region is gang partitioned but does not contain gang partitioned code\" \"\" { target *-*-* } .-1 }\n   !$acc end parallel\n \n   !$acc parallel num_workers(j) ! { dg-warning \"is used uninitialized\" }\n+  ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n   !$acc end parallel\n \n   !$acc parallel vector_length(k) ! { dg-warning \"is used uninitialized\" }\n+  ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 }\n   !$acc end parallel\n end subroutine acc_parallel\n "}, {"sha": "0990e3db22404d3891b247cbcd27e4bee312cd36", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/firstprivate-1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Ffirstprivate-1.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #include  <openacc.h>\n \n \n@@ -117,6 +120,8 @@ void t4 ()\n     arr[i] = 3;\n \n #pragma acc parallel firstprivate(x) copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n #pragma acc loop gang\n     for (i = 0; i < 32; i++)"}, {"sha": "c13cab780cb502a144467fd9239c45ab36bfa633", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-auto-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-auto-1.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -3,6 +3,9 @@\n \n /* { dg-additional-options \"-fopenacc-dim=32\" } */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -151,6 +154,7 @@ int gang_1 (int *ary, int size)\n   clear (ary, size);\n   \n #pragma acc parallel num_gangs (32) num_workers (32) vector_length(32) copy(ary[0:size]) firstprivate (size)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n   {\n #pragma acc loop auto\n     for (int jx = 0; jx <  size  / 64; jx++)"}, {"sha": "2f749e04ae0cf223d29a0fbfbeb986025fa8d948", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-w-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-1.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -12,6 +15,7 @@ int main ()\n \n #pragma acc parallel num_workers(32) vector_length(32) copy(ondev) \\\n \t    copyout(workersize)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n #pragma acc loop worker reduction(+:t)\n     for (unsigned ix = 0; ix < N; ix++)"}, {"sha": "9727e22d3c2b4691dab33fdd270f60e962541941", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-red-w-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-red-w-2.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -12,6 +15,7 @@ int main ()\n \n #pragma acc parallel num_workers(32) vector_length(32) copy(q) copy(ondev) \\\n \t    copyout(workersize)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     int t = q;\n     "}, {"sha": "d639e14a67ccf01c15584d7aafa8877e299b97e5", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/loop-w-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Floop-w-1.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -16,6 +19,7 @@ int main ()\n   \n #pragma acc parallel num_workers(32) vector_length(32) copy(ary) copy(ondev) \\\n \t    copyout(workersize)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"vector\" { target *-*-* } .-2 } */\n   {\n #pragma acc loop worker\n     for (unsigned ix = 0; ix < N; ix++)"}, {"sha": "6c989abedf5cc4f783da051741496f3fc1f32578", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/mode-transitions.c", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fmode-transitions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fmode-transitions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fmode-transitions.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n /* Miscellaneous test cases for gang/worker/vector mode transitions.  */\n \n #include <assert.h>\n@@ -287,6 +290,7 @@ void t7()\n   int n = 0;\n   #pragma acc parallel copy(n) \\\n \t\t       num_gangs(1) num_workers(1) vector_length(32)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     n++;\n   }\n@@ -310,6 +314,7 @@ void t8()\n \n       #pragma acc parallel copy(arr) \\\n \t\t\t   num_gangs(gangs) num_workers(1) vector_length(32)\n+      /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n       {\n \tint j;\n \t#pragma acc loop gang\n@@ -339,6 +344,7 @@ void t9()\n \n       #pragma acc parallel copy(arr) \\\n \t\t\t   num_gangs(gangs) num_workers(1) vector_length(32)\n+      /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n       {\n \tint j;\n \t#pragma acc loop gang\n@@ -371,6 +377,7 @@ void t10()\n \n       #pragma acc parallel copy(arr) \\\n \t\t\t   num_gangs(gangs) num_workers(1) vector_length(32)\n+      /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n       {\n \tint j;\n \t#pragma acc loop gang\n@@ -404,6 +411,7 @@ void t11()\n \n   #pragma acc parallel copy(arr) \\\n \t\t       num_gangs(1024) num_workers(1) vector_length(32)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     int j;\n \n@@ -442,6 +450,7 @@ void t12()\n \n   #pragma acc parallel copyout(fizz, buzz, fizzbuzz) \\\n \t\t       num_gangs(NUM_GANGS) num_workers(1) vector_length(32)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     int j;\n     \n@@ -488,6 +497,7 @@ void t13()\n \n   #pragma acc parallel copy(arr) \\\n \t\t       num_gangs(8) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     int j;\n     #pragma acc loop gang\n@@ -613,6 +623,7 @@ void t16()\n \n   #pragma acc parallel copy(n, arr) \\\n \t\t       num_gangs(8) num_workers(16) vector_length(32)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     int j;\n     #pragma acc loop gang\n@@ -665,6 +676,7 @@ void t17()\n \n \t#pragma acc parallel copyin(arr_a) copyout(arr_b) \\\n \t\t\t     num_gangs(num_gangs) num_workers(num_workers) vector_length(32)\n+\t/* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n \t{\n \t  int j;\n \t  #pragma acc loop gang\n@@ -882,6 +894,8 @@ void t21()\n \n   #pragma acc parallel copy(arr) \\\n \t\t       num_gangs(8) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 } */\n   {\n     int j;\n     #pragma acc loop gang\n@@ -905,6 +919,8 @@ void t22()\n \n   #pragma acc parallel copy(arr) \\\n \t\t       num_gangs(8) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 } */\n   {\n     int j;\n     #pragma acc loop gang\n@@ -931,6 +947,8 @@ void t23()\n \n   #pragma acc parallel copy(arr) \\\n \t\t       num_gangs(8) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 } */\n   {\n     int j;\n     #pragma acc loop gang\n@@ -957,6 +975,8 @@ void t24()\n \n   #pragma acc parallel copy(arr) \\\n \t\t       num_gangs(8) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 } */\n   {\n     int j;\n     #pragma acc loop gang\n@@ -988,6 +1008,7 @@ void t25()\n \n   #pragma acc parallel copy(arr) \\\n \t\t       num_gangs(8) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     int j;\n     #pragma acc loop gang\n@@ -1020,6 +1041,7 @@ void t26()\n \n   #pragma acc parallel copy(arr) \\\n \t\t       num_gangs(8) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     int j;\n     #pragma acc loop gang\n@@ -1070,6 +1092,8 @@ void t27()\n \n   #pragma acc parallel copy(n, arr) copyout(ondev) \\\n \t  num_gangs(ACTUAL_GANGS) num_workers(8) vector_length(32)\n+  /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'atomic'\" { xfail *-*-* } .-2 } */\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-3 } */\n   {\n     int j;\n "}, {"sha": "8157cff109a724651d24a82b978c50b8d30f727a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/par-reduction-1.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-1.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #include <assert.h>\n \n /* Test of reduction on parallel directive.  */\n@@ -16,6 +19,9 @@ main (int argc, char *argv[])\n #endif\n   #pragma acc parallel num_gangs(GANGS) num_workers(32) vector_length(32) \\\n     reduction(+:res1) copy(res2, res1)\n+  /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail { ! openacc_host_selected } } .-2 } */\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-3 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-4 } */\n   {\n     res1 += 5;\n \n@@ -37,6 +43,9 @@ main (int argc, char *argv[])\n #endif\n   #pragma acc parallel num_gangs(GANGS) num_workers(32) vector_length(32) \\\n     reduction(*:res1) copy(res1, res2)\n+  /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail { ! openacc_host_selected } } .-2 } */\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-3 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-4 } */\n   {\n     res1 *= 5;\n "}, {"sha": "8b7900e66ffa43e0421919a60ae1f8701f55c7fc", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/par-reduction-2.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpar-reduction-2.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,6 +1,9 @@\n /* Test of reduction on parallel directive (with async).  */\n /* See also Fortran variants in \"../libgomp.oacc-fortran/par-reduction-2*\".  */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #include <assert.h>\n #include <openacc.h>\n \n@@ -16,6 +19,9 @@ main (int argc, char *argv[])\n #endif\n   #pragma acc parallel num_gangs(GANGS) num_workers(32) vector_length(32) \\\n     reduction(+:res1) copy(res1, res2) async(1)\n+  /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail { ! openacc_host_selected } } .-2 } */\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-3 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-4 } */\n   {\n     res1 += 5;\n \n@@ -39,6 +45,9 @@ main (int argc, char *argv[])\n #endif\n   #pragma acc parallel num_gangs(GANGS) num_workers(32) vector_length(32) \\\n     reduction(*:res1) copy(res1, res2) async(1)\n+  /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail { ! openacc_host_selected } } .-2 } */\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-3 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-4 } */\n   {\n     res1 *= 5;\n "}, {"sha": "ef4917aafffdb6ffdf655cbf2193f1128c758abe", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-dims.c", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-dims.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,6 +1,9 @@\n /* OpenACC parallelism dimensions clauses: num_gangs, num_workers,\n    vector_length.  */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n /* See also '../libgomp.oacc-fortran/parallel-dims.f90'.  */\n \n #include <limits.h>\n@@ -105,6 +108,7 @@ int main ()\n     gangs_max = workers_max = vectors_max = INT_MIN;\n #pragma acc parallel copy (gangs_actual) \\\n   num_gangs (GANGS) /* { dg-warning \"'num_gangs' value must be positive\" \"\" { target c++ } } */\n+    /* { dg-warning \"region contains gang partitioned code but is not gang partitioned\" \"\" { target *-*-* } .-2 } */\n     {\n       /* We're actually executing with num_gangs (1).  */\n       gangs_actual = 1;\n@@ -134,6 +138,7 @@ int main ()\n     gangs_max = workers_max = vectors_max = INT_MIN;\n #pragma acc parallel copy (workers_actual) \\\n   num_workers (WORKERS) /* { dg-warning \"'num_workers' value must be positive\" \"\" { target c++ } } */\n+    /* { dg-warning \"region contains worker partitioned code but is not worker partitioned\" \"\" { target *-*-* } .-2 } */\n     {\n       /* We're actually executing with num_workers (1).  */\n       workers_actual = 1;\n@@ -163,6 +168,7 @@ int main ()\n     gangs_max = workers_max = vectors_max = INT_MIN;\n #pragma acc parallel copy (vectors_actual) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   vector_length (VECTORS) /* { dg-warning \"'vector_length' value must be positive\" \"\" { target c++ } } */\n+    /* { dg-warning \"region contains vector partitioned code but is not vector partitioned\" \"\" { target *-*-* } .-2 } */\n     {\n       /* We're actually executing with vector_length (1), just the GCC nvptx\n \t back end enforces vector_length (32).  */\n@@ -208,6 +214,7 @@ int main ()\n #pragma acc parallel copy (gangs_actual) \\\n   reduction (min: gangs_min, workers_min, vectors_min) reduction (max: gangs_max, workers_max, vectors_max) \\\n   num_gangs (gangs)\n+    /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-3 } */\n     {\n       if (acc_on_device (acc_device_host))\n \t{\n@@ -617,6 +624,9 @@ int main ()\n     gangs_max = workers_max = vectors_max = INT_MIN;\n #pragma acc serial copy (vectors_actual) /* { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } } */ \\\n   copy (gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max)\n+    /* { dg-bogus \"warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-2 }\n+       { dg-bogus \"warning: region contains worker partitioned code but is not worker partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }\n+       { dg-bogus \"warning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-4 } */\n     {\n       if (acc_on_device (acc_device_nvidia))\n \t{"}, {"sha": "b15ee8b22ff3fb62328e20d1ce187af638ad5f4f", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/parallel-reduction.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-reduction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-reduction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fparallel-reduction.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,4 +1,5 @@\n-/* { dg-do run } */\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n \n #include <stdlib.h>\n #include <openacc.h>\n@@ -15,6 +16,7 @@ main ()\n #pragma acc data copy (dummy)\n   {\n #pragma acc parallel num_gangs (N) reduction (+:s1) copy(s1)\n+    /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-1 } */\n     {\n       s1++;\n     }\n@@ -35,6 +37,7 @@ main ()\n   s2 = 0;\n \n #pragma acc parallel num_gangs (10) reduction (+:s1, s2) copy(s1, s2)\n+  /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-1 } */\n   {\n     s1++;\n     s2 += N;"}, {"sha": "2a7e48116c32b3e86c39b2a02be490909bcdb32a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/pr85381-3.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85381-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85381-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fpr85381-3.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -2,17 +2,23 @@\n    { dg-skip-if \"\" { *-*-* } { \"*\" } { \"-O2\" } } */\n /* { dg-additional-options \"-foffload=-fdump-rtl-mach\" } */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n int a;\n #pragma acc declare create(a)\n \n #pragma acc routine vector\n+/* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .+2 } */\n void __attribute__((noinline, noclone))\n foo_v (void)\n {\n   a = 1;\n }\n \n #pragma acc routine worker\n+/* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .+3 }\n+   { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .+2 } */\n void __attribute__((noinline, noclone))\n foo_w (void)\n {"}, {"sha": "3cc6f150f63464be7bd406017294fc8241e91257", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/private-variables.c", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-variables.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-variables.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fprivate-variables.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #include <assert.h>\n #include <openacc.h>\n \n@@ -22,6 +25,8 @@ void local_g_1()\n     arr[i] = 3;\n \n   #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     int x;\n \n@@ -295,6 +300,8 @@ void loop_g_1()\n     arr[i] = i;\n \n   #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     #pragma acc loop gang private(x)\n     for (i = 0; i < 32; i++)\n@@ -320,6 +327,7 @@ void loop_g_2()\n     arr[i] = i;\n \n   #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n   {\n     #pragma acc loop gang private(x)\n     for (i = 0; i < 32; i++)\n@@ -348,6 +356,7 @@ void loop_g_3()\n     arr[i] = i;\n \n   #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n   {\n     #pragma acc loop gang private(x)\n     for (i = 0; i < 32; i++)\n@@ -376,6 +385,7 @@ void loop_g_4()\n     arr[i] = i;\n \n   #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n   {\n     #pragma acc loop gang private(x)\n     for (i = 0; i < 32; i++)\n@@ -408,6 +418,7 @@ void loop_g_5()\n     arr[i] = i;\n \n   #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n   {\n     #pragma acc loop gang private(x)\n     for (i = 0; i < 32; i++)\n@@ -438,6 +449,7 @@ void loop_g_6()\n     arr[i] = i;\n \n   #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n   {\n     #pragma acc loop gang private(pt)\n     for (i = 0; i < 32; i++)\n@@ -559,6 +571,7 @@ void loop_w_1()\n     arr[i] = i;\n \n   #pragma acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n   {\n     int j;\n \n@@ -875,6 +888,8 @@ void parallel_g_1()\n     arr[i] = 3;\n \n   #pragma acc parallel private(x) copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     #pragma acc loop gang(static:1)\n     for (i = 0; i < 32; i++)\n@@ -904,6 +919,7 @@ void parallel_g_2()\n     arr[i] = i;\n \n   #pragma acc parallel private(x) copy(arr) num_gangs(32) num_workers(2) vector_length(32)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n   {\n     #pragma acc loop gang\n     for (i = 0; i < 32; i++)"}, {"sha": "bae1dee6ad2f815e2fb5eb180c44847858391ccd", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-5.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-5.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,4 +1,5 @@\n-/* { dg-do run } */\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n \n /* Multiple reductions.  */\n \n@@ -45,6 +46,7 @@ main (void)\n   /* Nvptx targets require a vector_length or 32 in to allow spinlocks with\n      gangs.  */\n   check_reduction (num_workers (nw) vector_length (vl), worker);\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n   check_reduction (vector_length (vl), vector);\n   check_reduction (num_gangs (ng) num_workers (nw) vector_length (vl), gang\n \t\t   worker vector);"}, {"sha": "c2fb922a7f142dc31b881db27ba447ab3ced62cc", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/reduction-7.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Freduction-7.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,5 +1,8 @@\n /* Tests of reduction on loop directive.  */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #include <assert.h>\n \n \n@@ -14,6 +17,8 @@ void g_np_1()\n     arr[i] = i;\n \n   #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     #pragma acc loop gang reduction(+:res)\n     for (i = 0; i < 1024; i++)\n@@ -28,6 +33,8 @@ void g_np_1()\n   res = hres = 1;\n \n   #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     #pragma acc loop gang reduction(*:res)\n     for (i = 0; i < 12; i++)\n@@ -52,6 +59,7 @@ void gv_np_1()\n     arr[i] = i;\n \n   #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n   {\n     #pragma acc loop gang vector reduction(+:res)\n     for (i = 0; i < 1024; i++)\n@@ -76,6 +84,7 @@ void gw_np_1()\n     arr[i] = i;\n \n   #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n   {\n     #pragma acc loop gang worker reduction(+:res)\n     for (i = 0; i < 1024; i++)\n@@ -239,6 +248,7 @@ void v_p_1()\n \n   #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n \t\t       private(res) copyout(out)\n+  /* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     #pragma acc loop gang\n     for (j = 0; j < 32; j++)\n@@ -315,6 +325,7 @@ void w_p_1()\n \n   #pragma acc parallel num_gangs(32) num_workers(32) vector_length(32) \\\n \t\t       private(res) copyout(out)\n+  /* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n   {\n     #pragma acc loop gang\n     for (j = 0; j < 32; j++)"}, {"sha": "1536ce0ecb226f1df2911328acbd2ab01ca63791", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-g-1.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-g-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-g-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-g-1.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -6,6 +9,8 @@\n \n #pragma acc routine gang\n void __attribute__ ((noinline)) gang (int ary[N])\n+/* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 } */\n+/* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 } */\n {\n #pragma acc loop gang\n     for (unsigned ix = 0; ix < N; ix++)"}, {"sha": "b9137d819352a25442ba9f7497ed17b114859006", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-w-1.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-w-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-w-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-w-1.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -6,6 +9,7 @@\n \n #pragma acc routine worker\n void __attribute__ ((noinline)) worker (int ary[N])\n+/* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 } */\n {\n #pragma acc loop worker\n   for (unsigned ix = 0; ix < N; ix++)"}, {"sha": "a03a2c2b163881b74025304c0c0722305c2944b7", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/routine-wv-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Froutine-wv-2.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,3 +1,6 @@\n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n #include <stdio.h>\n #include <openacc.h>\n #include <gomp-constants.h>\n@@ -44,6 +47,7 @@ int DoWorkVec (int nw)\n   printf (\"spawning %d ...\", nw); fflush (stdout);\n   \n #pragma acc parallel num_workers(nw) vector_length (NUM_VECTORS) copy (ary)\n+  /* { dg-warning \"region contains vector partitioned code but is not vector partitioned\" \"\" { target openacc_radeon_accel_selected } .-1 } */\n   {\n     WorkVec ((int *)ary, WIDTH, HEIGHT, nw, NUM_VECTORS);\n   }"}, {"sha": "0c071c3734667d293353f13f8dab96fb0e34298a", "filename": "libgomp/testsuite/libgomp.oacc-c-c++-common/static-variable-1.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstatic-variable-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstatic-variable-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-c-c%2B%2B-common%2Fstatic-variable-1.c?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -9,6 +9,9 @@\n    variables\" (only visible to members of the GitHub OpenACC organization).\n */\n \n+/* { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+   aspects of that functionality.  */\n+\n \n #undef NDEBUG\n #include <assert.h>\n@@ -63,6 +66,9 @@ static void t0_c(void)\n static const int t0_r_var_init = 61;\n \n #pragma acc routine gang\n+/* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'atomic'\" { xfail *-*-* } .+4 } */\n+/* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .+3 } */\n+/* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .+2 } */\n __attribute__((noinline))\n static int t0_r_r(void)\n {\n@@ -123,6 +129,7 @@ static void t1_c(void)\n     {\n       int result = 0;\n       int num_gangs_actual = -1;\n+      /* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'atomic'\" { xfail *-*-* } .+1 } */\n #pragma acc parallel \\\n   num_gangs(num_gangs_request) \\\n   reduction(max:num_gangs_actual) \\\n@@ -153,6 +160,9 @@ static void t1_c(void)\n static const int t1_r2_var_init = 166;\n \n #pragma acc routine gang\n+/* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'atomic'\" { xfail *-*-* } .+4 } */\n+/* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .+3 } */\n+/* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .+2 } */\n __attribute__((noinline))\n static int t1_r2_r(void)\n {\n@@ -245,6 +255,9 @@ static void t1_r2(void)\n static const int t2_var_init_2 = -55;\n \n #pragma acc routine gang\n+/* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'atomic'\" { xfail *-*-* } .+4 } */\n+/* { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .+3 } */\n+/* { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .+2 } */\n __attribute__((noinline))\n static int t2_r(void)\n {\n@@ -286,6 +299,7 @@ static void t2(void)\n \t   itself, meaning that all 'i = 0' execution has finished (on the\n \t   device) before 'i = 1' is started (on the device), etc.  */\n \n+\t/* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'atomic'\" { xfail *-*-* } .+1 } */\n #pragma acc parallel \\\n   present(results_1) \\\n   num_gangs(num_gangs_request_1) \\\n@@ -308,6 +322,7 @@ static void t2(void)\n \t  results_2[i][__builtin_goacc_parlevel_id(GOMP_DIM_GANG)] += t2_r();\n \t}\n \n+\t/* { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'atomic'\" { xfail *-*-* } .+1 } */\n #pragma acc parallel \\\n   present(results_3) \\\n   num_gangs(num_gangs_request_3) \\"}, {"sha": "4d36d869b0c4fe3e0c58c8d817c5b7c91a1761c4", "filename": "libgomp/testsuite/libgomp.oacc-fortran/optional-private.f90", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-private.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-private.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Foptional-private.f90?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -4,6 +4,9 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n program main\n   implicit none\n \n@@ -30,6 +33,8 @@ subroutine t1(x)\n     end do\n \n     !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+    ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n+    ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 }\n     !$acc loop gang private(x)\n     do i = 1, 32\n        x = i * 2;\n@@ -55,6 +60,7 @@ subroutine t2(pt)\n     end do\n \n     !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+    ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n     !$acc loop gang private(pt)\n     do i = 0, 31\n        pt%x = i"}, {"sha": "408404cb7e66390027bfd78ad3babeb9d40cac31", "filename": "libgomp/testsuite/libgomp.oacc-fortran/par-reduction-2-1.f", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-1.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-1.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-1.f?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -4,6 +4,9 @@\n \n !     { dg-do run }\n \n+!     { dg-additional-options \"-Wopenacc-parallelism\" } for\n+!     testing/documenting aspects of that functionality.\n+\n       PROGRAM MAIN\n       IMPLICIT NONE\n       INCLUDE \"openacc_lib.h\"\n@@ -15,6 +18,9 @@ PROGRAM MAIN\n \n !$ACC PARALLEL NUM_GANGS(256) NUM_WORKERS(32) VECTOR_LENGTH(32)\n !$ACC& REDUCTION(+:RES1) COPY(RES1, RES2) ASYNC(1)\n+!     { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail *-*-* } .-1 }\n+!     { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 }\n+!     { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 }\n       res1 = res1 + 5\n \n !$ACC ATOMIC\n@@ -37,6 +43,9 @@ PROGRAM MAIN\n \n !$ACC PARALLEL NUM_GANGS(8) NUM_WORKERS(32) VECTOR_LENGTH(32)\n !$ACC& REDUCTION(*:RES1) COPY(RES1, RES2) ASYNC(1)\n+!     { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail *-*-* } .-1 }\n+!     { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 }\n+!     { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 }\n       res1 = res1 * 5\n \n !$ACC ATOMIC"}, {"sha": "91ad99b256f9a3cfb02001c4cb968a1da897b983", "filename": "libgomp/testsuite/libgomp.oacc-fortran/par-reduction-2-2.f", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-2.f", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-2.f", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpar-reduction-2-2.f?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -4,6 +4,9 @@\n \n !     { dg-do run }\n \n+!     { dg-additional-options \"-Wopenacc-parallelism\" } for\n+!     testing/documenting aspects of that functionality.\n+\n       PROGRAM MAIN\n       USE OPENACC\n       IMPLICIT NONE\n@@ -15,6 +18,9 @@ PROGRAM MAIN\n \n !$ACC PARALLEL NUM_GANGS(256) NUM_WORKERS(32) VECTOR_LENGTH(32)\n !$ACC& REDUCTION(+:RES1) COPY(RES1, RES2) ASYNC(1)\n+!     { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail *-*-* } .-1 }\n+!     { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 }\n+!     { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 }\n       res1 = res1 + 5\n \n !$ACC ATOMIC\n@@ -37,6 +43,9 @@ PROGRAM MAIN\n \n !$ACC PARALLEL NUM_GANGS(8) NUM_WORKERS(32) VECTOR_LENGTH(32)\n !$ACC& REDUCTION(*:RES1) COPY(RES1, RES2) ASYNC(1)\n+!     { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction', 'atomic'\" { xfail *-*-* } .-1 }\n+!     { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 }\n+!     { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 }\n       res1 = res1 * 5\n \n !$ACC ATOMIC"}, {"sha": "fae99b338a5e0b38b2d1030080263d86c480717c", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-dims.f90", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-dims.f90?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -5,6 +5,9 @@\n ! { dg-do run }\n ! { dg-prune-output \"command-line option '-fintrinsic-modules-path=.*' is valid for Fortran but not for C\" }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n ! See also '../libgomp.oacc-c-c++-common/parallel-dims.c'.\n \n module acc_routines\n@@ -84,6 +87,9 @@ program main\n   vectors_max = -huge(gangs_max) - 1 ! INT_MIN\n   !$acc serial copy (vectors_actual) &\n   !$acc   copy (gangs_min, gangs_max, workers_min, workers_max, vectors_min, vectors_max) ! { dg-warning \"using vector_length \\\\(32\\\\), ignoring 1\" \"\" { target openacc_nvidia_accel_selected } }\n+  ! { dg-bogus \"warning: region contains gang partitioned code but is not gang partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-1 }\n+  ! { dg-bogus \"warning: region contains worker partitioned code but is not worker partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-2 }\n+  ! { dg-bogus \"warning: region contains vector partitioned code but is not vector partitioned\" \"TODO 'serial'\" { xfail *-*-* } .-3 }\n   if (acc_on_device (acc_device_nvidia)) then\n      ! The GCC nvptx back end enforces vector_length (32).\n      ! It's unclear if that's actually permissible here;"}, {"sha": "edf748efbb454b0005633cfbbcb3583b47416f56", "filename": "libgomp/testsuite/libgomp.oacc-fortran/parallel-reduction.f90", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-reduction.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-reduction.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fparallel-reduction.f90?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,5 +1,8 @@\n ! { dg-do run }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n program reduction\n   implicit none\n   integer, parameter :: n = 10\n@@ -10,6 +13,7 @@ program reduction\n   s2 = 0\n \n   !$acc parallel reduction(+:s1,s2) num_gangs (n) copy(s1)\n+  ! { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-1 }\n   s1 = s1 + 1\n   s2 = s2 + 1\n   !$acc end parallel\n@@ -40,6 +44,7 @@ subroutine redsub(s1, s2, n)\n   integer :: s1, s2, n\n \n   !$acc parallel reduction(+:s1,s2) num_gangs (10)  copy(s1)\n+  ! { dg-bogus \"warning: region is gang partitioned but does not contain gang partitioned code\" \"TODO 'reduction'\" { xfail *-*-* } .-1 }\n   s1 = s1 + 1\n   s2 = s2 + 1\n   !$acc end parallel"}, {"sha": "e60322143ca9e765a785bfa9543cae9de6c09a59", "filename": "libgomp/testsuite/libgomp.oacc-fortran/pr84028.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr84028.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr84028.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fpr84028.f90?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,11 +1,15 @@\n ! { dg-do run }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n program foo\n   integer :: a(3,3,3), ll, lll\n \n   a = 1\n \n   !$acc parallel num_gangs(1) num_workers(2)\n+  ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n \n   if (any(a(1:3,1:3,1:3).ne.1)) STOP 1\n "}, {"sha": "81043a22fd8de66e9e7e8b5403181cf452971536", "filename": "libgomp/testsuite/libgomp.oacc-fortran/private-variables.f90", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-variables.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-variables.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Fprivate-variables.f90?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -2,6 +2,9 @@\n \n ! { dg-do run }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n \n ! Test of gang-private variables declared on loop directive.\n \n@@ -13,6 +16,8 @@ subroutine t1()\n   end do\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n+  ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 }\n   !$acc loop gang private(x)\n   do i = 1, 32\n      x = i * 2;\n@@ -37,6 +42,7 @@ subroutine t2()\n   end do\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 }\n   !$acc loop gang private(x)\n   do i = 0, 31\n      x = i * 2;\n@@ -65,6 +71,7 @@ subroutine t3()\n   end do\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n   !$acc loop gang private(x)\n   do i = 0, 31\n      x = i * 2;\n@@ -98,6 +105,7 @@ subroutine t4()\n   end do\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n   !$acc loop gang private(pt)\n   do i = 0, 31\n      pt%x = i\n@@ -208,6 +216,7 @@ subroutine t7()\n   end do\n \n   !$acc parallel copy(arr) num_gangs(32) num_workers(8) vector_length(32)\n+  ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 }\n   !$acc loop gang private(x)\n   do i = 0, 31\n      !$acc loop worker private(x)\n@@ -507,6 +516,8 @@ subroutine t14()\n   end do\n \n   !$acc parallel private(x) copy(arr) num_gangs(n) num_workers(8) vector_length(32)\n+  ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-1 }\n+  ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-2 }\n     !$acc loop gang(static:1)\n     do i = 1, n\n       x = i * 2;"}, {"sha": "95c3ed7ee9c0a121fb8b6ce9f01e018f2f0ed98f", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-1.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-1.f90?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,5 +1,8 @@\n ! { dg-do run }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n ! Integer reductions\n \n program reduction_1\n@@ -279,6 +282,7 @@ program reduction_1\n   !$acc end parallel\n \n   !$acc parallel vector_length(vl) copy(rv)\n+  ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 }\n   !$acc loop reduction(ior:rv) gang\n   do i = 1, n\n      rv = ior (rv, array(i))"}, {"sha": "5d1c1d99fce1c04a6cc1bcebd7f352e8921cb875", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-5.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-5.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-5.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-5.f90?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,5 +1,8 @@\n ! { dg-do run }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n ! subroutine reduction\n \n program reduction\n@@ -45,6 +48,7 @@ subroutine redsub_worker(sum, n, c)\n   sum = 0\n \n   !$acc parallel copyin (n, c) num_workers(4) vector_length (32) copy(sum)\n+  ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 }\n   !$acc loop reduction(+:sum) worker\n   do i = 1, n\n      sum = sum + c"}, {"sha": "6908d16418ca5e45a65e4af051286d39b080233f", "filename": "libgomp/testsuite/libgomp.oacc-fortran/reduction-6.f90", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Freduction-6.f90?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -1,6 +1,9 @@\n ! { dg-do run }\n ! { dg-additional-options \"-cpp\" }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+\n program reduction\n   implicit none\n \n@@ -28,6 +31,7 @@ program reduction\n   !$acc end parallel\n \n   !$acc parallel num_workers (4) vector_length (32)\n+  ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-1 }\n   !$acc loop reduction(+:ws1, ws2) worker\n   do i = 1, n\n      ws1 = ws1 + 1"}, {"sha": "c34de3a4963db771e6a5a69ca7062b53261ef665", "filename": "libgomp/testsuite/libgomp.oacc-fortran/routine-7.f90", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/22cff118f7526bec195ed6e41452980820fdf3a8/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.oacc-fortran%2Froutine-7.f90?ref=22cff118f7526bec195ed6e41452980820fdf3a8", "patch": "@@ -2,6 +2,10 @@\n ! { dg-do run }\n ! { dg-additional-options \"-cpp\" }\n \n+! { dg-additional-options \"-Wopenacc-parallelism\" } for testing/documenting\n+! aspects of that functionality.\n+!TODO { dg-additional-options \"-fno-inline\" } for stable results regarding OpenACC 'routine'.\n+\n #define M 8\n #define N 32\n \n@@ -97,6 +101,8 @@ end subroutine worker\n \n subroutine gang (a)\n   !$acc routine gang\n+  ! { dg-warning \"region is worker partitioned but does not contain worker partitioned code\" \"\" { target *-*-* } .-2 }\n+  ! { dg-warning \"region is vector partitioned but does not contain vector partitioned code\" \"\" { target *-*-* } .-3 }\n   integer, intent (inout) :: a(N)\n   integer :: i\n "}]}