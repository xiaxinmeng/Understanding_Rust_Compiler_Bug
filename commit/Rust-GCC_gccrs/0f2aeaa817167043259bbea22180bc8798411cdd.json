{"sha": "0f2aeaa817167043259bbea22180bc8798411cdd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGYyYWVhYTgxNzE2NzA0MzI1OWJiZWEyMjE4MGJjODc5ODQxMWNkZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-10-20T19:12:44Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2014-10-20T19:12:44Z"}, "message": "compiler, runtime: Add type information to single object allocation.\n\nFrom-SVN: r216490", "tree": {"sha": "f104ef0ebe6cc82d982a30c5de643b4f9c1c063b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f104ef0ebe6cc82d982a30c5de643b4f9c1c063b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0f2aeaa817167043259bbea22180bc8798411cdd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2aeaa817167043259bbea22180bc8798411cdd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0f2aeaa817167043259bbea22180bc8798411cdd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0f2aeaa817167043259bbea22180bc8798411cdd/comments", "author": null, "committer": null, "parents": [{"sha": "7b28fa2c6b956d08b2ef909026f42b5df60ae990", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b28fa2c6b956d08b2ef909026f42b5df60ae990", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b28fa2c6b956d08b2ef909026f42b5df60ae990"}], "stats": {"total": 134, "additions": 85, "deletions": 49}, "files": [{"sha": "2f7bf2bbe16be18e85979236818f66b16096109c", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 39, "deletions": 21, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=0f2aeaa817167043259bbea22180bc8798411cdd", "patch": "@@ -12170,7 +12170,7 @@ class Array_construction_expression : public Expression\n   { return this->vals_ == NULL ? 0 : this->vals_->size(); }\n \n protected:\n-  int\n+  virtual int\n   do_traverse(Traverse* traverse);\n \n   bool\n@@ -12495,11 +12495,33 @@ class Slice_construction_expression : public Array_construction_expression\n     : Array_construction_expression(EXPRESSION_SLICE_CONSTRUCTION,\n \t\t\t\t    type, indexes, vals, location),\n       valtype_(NULL)\n-  { go_assert(type->is_slice_type()); }\n+  {\n+    go_assert(type->is_slice_type());\n+\n+    mpz_t lenval;\n+    Expression* length;\n+    if (vals == NULL || vals->empty())\n+      mpz_init_set_ui(lenval, 0);\n+    else\n+      {\n+\tif (this->indexes() == NULL)\n+\t  mpz_init_set_ui(lenval, vals->size());\n+\telse\n+\t  mpz_init_set_ui(lenval, indexes->back() + 1);\n+      }\n+    Type* int_type = Type::lookup_integer_type(\"int\");\n+    length = Expression::make_integer(&lenval, int_type, location);\n+    mpz_clear(lenval);\n+    Type* element_type = type->array_type()->element_type();\n+    this->valtype_ = Type::make_array_type(element_type, length);\n+  }\n \n  protected:\n   // Note that taking the address of a slice literal is invalid.\n \n+  int\n+  do_traverse(Traverse* traverse);\n+\n   Expression*\n   do_copy()\n   {\n@@ -12518,6 +12540,19 @@ class Slice_construction_expression : public Array_construction_expression\n   Type* valtype_;\n };\n \n+// Traversal.\n+\n+int\n+Slice_construction_expression::do_traverse(Traverse* traverse)\n+{\n+  if (this->Array_construction_expression::do_traverse(traverse)\n+      == TRAVERSE_EXIT)\n+    return TRAVERSE_EXIT;\n+  if (Type::traverse(this->valtype_, traverse) == TRAVERSE_EXIT)\n+    return TRAVERSE_EXIT;\n+  return TRAVERSE_CONTINUE;\n+}\n+\n // Return the backend representation for constructing a slice.\n \n Bexpression*\n@@ -12532,24 +12567,7 @@ Slice_construction_expression::do_get_backend(Translate_context* context)\n \n   Location loc = this->location();\n   Type* element_type = array_type->element_type();\n-  if (this->valtype_ == NULL)\n-    {\n-      mpz_t lenval;\n-      Expression* length;\n-      if (this->vals() == NULL || this->vals()->empty())\n-        mpz_init_set_ui(lenval, 0);\n-      else\n-        {\n-          if (this->indexes() == NULL)\n-            mpz_init_set_ui(lenval, this->vals()->size());\n-          else\n-            mpz_init_set_ui(lenval, this->indexes()->back() + 1);\n-        }\n-      Type* int_type = Type::lookup_integer_type(\"int\");\n-      length = Expression::make_integer(&lenval, int_type, loc);\n-      mpz_clear(lenval);\n-      this->valtype_ = Type::make_array_type(element_type, length);\n-    }\n+  go_assert(this->valtype_ != NULL);\n \n   Expression_list* vals = this->vals();\n   if (this->vals() == NULL || this->vals()->empty())\n@@ -14028,7 +14046,7 @@ class GC_symbol_expression : public Expression\n  protected:\n   Type*\n   do_type()\n-  { return Type::make_pointer_type(Type::make_void_type()); }\n+  { return Type::lookup_integer_type(\"uintptr\"); }\n \n   bool\n   do_is_immutable() const"}, {"sha": "7850e00a041f0c4babfbc8b2b74a7a47580a25b0", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=0f2aeaa817167043259bbea22180bc8798411cdd", "patch": "@@ -96,9 +96,6 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n   // Create function descriptors as needed.\n   ::gogo->create_function_descriptors();\n \n-  // Write out queued up functions for hash and comparison of types.\n-  ::gogo->write_specific_type_functions();\n-\n   // Now that we have seen all the names, verify that types are\n   // correct.\n   ::gogo->verify_types();\n@@ -130,6 +127,9 @@ go_parse_input_files(const char** filenames, unsigned int filename_count,\n   // Convert complicated go and defer statements into simpler ones.\n   ::gogo->simplify_thunk_statements();\n \n+  // Write out queued up functions for hash and comparison of types.\n+  ::gogo->write_specific_type_functions();\n+\n   // Flatten the parse tree.\n   ::gogo->flatten();\n "}, {"sha": "7c3ebce103c7128ebf0d07b533d1cd568bcc2faa", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=0f2aeaa817167043259bbea22180bc8798411cdd", "patch": "@@ -4196,21 +4196,18 @@ Build_method_tables::type(Type* type)\n Expression*\n Gogo::allocate_memory(Type* type, Location location)\n {\n-  Btype* btype = type->get_backend(this);\n-  size_t size = this->backend()->type_size(btype);\n-  mpz_t size_val;\n-  mpz_init_set_ui(size_val, size);\n-  Type* uintptr = Type::lookup_integer_type(\"uintptr\");\n-  Expression* size_expr =\n-    Expression::make_integer(&size_val, uintptr, location);\n-\n-  // If the package imports unsafe, then it may play games with\n-  // pointers that look like integers.\n+  Expression* td = Expression::make_type_descriptor(type, location);\n+  Expression* size =\n+    Expression::make_type_info(type, Expression::TYPE_INFO_SIZE);\n+\n+  // If this package imports unsafe, then it may play games with\n+  // pointers that look like integers.  We should be able to determine\n+  // whether or not to use new pointers in libgo/go-new.c.  FIXME.\n   bool use_new_pointers = this->imported_unsafe_ || type->has_pointer();\n   return Runtime::make_call((use_new_pointers\n \t\t\t     ? Runtime::NEW\n \t\t\t     : Runtime::NEW_NOPOINTERS),\n-                            location, 1, size_expr);\n+\t\t\t    location, 2, td, size);\n }\n \n // Traversal class used to check for return statements."}, {"sha": "4370a580fca2ad768769e7724cb30fb5a3247fc0", "filename": "gcc/go/gofrontend/runtime.cc", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Fruntime.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.cc?ref=0f2aeaa817167043259bbea22180bc8798411cdd", "patch": "@@ -82,6 +82,7 @@ static Type*\n runtime_function_type(Runtime_function_type bft)\n {\n   go_assert(bft < NUMBER_OF_RUNTIME_FUNCTION_TYPES);\n+  Type* any = Type::make_pointer_type(Type::make_void_type());\n   if (runtime_function_types[bft] == NULL)\n     {\n       const Location bloc = Linemap::predeclared_location();\n@@ -145,21 +146,19 @@ runtime_function_type(Runtime_function_type bft)\n \t  break;\n \n \tcase RFT_SLICE:\n-\t  t = Type::make_array_type(Type::make_void_type(), NULL);\n+\t  t = Type::make_array_type(any, NULL);\n \t  break;\n \n \tcase RFT_MAP:\n-\t  t = Type::make_map_type(Type::make_void_type(),\n-\t\t\t\t  Type::make_void_type(),\n-\t\t\t\t  bloc);\n+\t  t = Type::make_map_type(any, any, bloc);\n \t  break;\n \n \tcase RFT_MAPITER:\n \t  t = Type::make_pointer_type(Runtime::map_iteration_type());\n \t  break;\n \n \tcase RFT_CHAN:\n-\t  t = Type::make_channel_type(true, true, Type::make_void_type());\n+\t  t = Type::make_channel_type(true, true, any);\n \t  break;\n \n \tcase RFT_IFACE:"}, {"sha": "bec1cfc09ea0686dad30943398f51ca63d804405", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=0f2aeaa817167043259bbea22180bc8798411cdd", "patch": "@@ -221,10 +221,10 @@ DEF_GO_RUNTIME(REGISTER_GC_ROOTS, \"__go_register_gc_roots\", P1(POINTER), R0())\n \n \n // Allocate memory.\n-DEF_GO_RUNTIME(NEW, \"__go_new\", P1(UINTPTR), R1(POINTER))\n+DEF_GO_RUNTIME(NEW, \"__go_new\", P2(TYPE, UINTPTR), R1(POINTER))\n \n // Allocate memory which can not contain pointers.\n-DEF_GO_RUNTIME(NEW_NOPOINTERS, \"__go_new_nopointers\", P1(UINTPTR), R1(POINTER))\n+DEF_GO_RUNTIME(NEW_NOPOINTERS, \"__go_new_nopointers\", P2(TYPE, UINTPTR), R1(POINTER))\n \n \n // Start a new goroutine."}, {"sha": "0478e2085885d6d597e8f38902b88c2f014625aa", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=0f2aeaa817167043259bbea22180bc8798411cdd", "patch": "@@ -1878,7 +1878,7 @@ Inc_dec_statement::do_lower(Gogo*, Named_object*, Block*, Statement_inserter*)\n \n   mpz_t oval;\n   mpz_init_set_ui(oval, 1UL);\n-  Expression* oexpr = Expression::make_integer(&oval, NULL, loc);\n+  Expression* oexpr = Expression::make_integer(&oval, this->expr_->type(), loc);\n   mpz_clear(oval);\n \n   Operator op = this->is_inc_ ? OPERATOR_PLUSEQ : OPERATOR_MINUSEQ;"}, {"sha": "fb7ebee9423e5909a7c863286758bfdaa979b810", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2aeaa817167043259bbea22180bc8798411cdd/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=0f2aeaa817167043259bbea22180bc8798411cdd", "patch": "@@ -1244,6 +1244,25 @@ Type::make_type_descriptor_var(Gogo* gogo)\n       phash = &ins.first->second;\n     }\n \n+  // The type descriptor symbol for the unsafe.Pointer type is defined in\n+  // libgo/go-unsafe-pointer.c, so we just return a reference to that\n+  // symbol if necessary.\n+  if (this->is_unsafe_pointer_type())\n+    {\n+      Location bloc = Linemap::predeclared_location();\n+\n+      Type* td_type = Type::make_type_descriptor_type();\n+      Btype* td_btype = td_type->get_backend(gogo);\n+      this->type_descriptor_var_ =\n+\tgogo->backend()->immutable_struct_reference(\"__go_tdn_unsafe.Pointer\",\n+\t\t\t\t\t\t    td_btype,\n+\t\t\t\t\t\t    bloc);\n+\n+      if (phash != NULL)\n+\t*phash = this->type_descriptor_var_;\n+      return;\n+    }\n+\n   std::string var_name = this->type_descriptor_var_name(gogo, nt);\n \n   // Build the contents of the type descriptor.\n@@ -1540,7 +1559,7 @@ Type::make_type_descriptor_type()\n \t\t\t\t       \"hash\", uint32_type,\n \t\t\t\t       \"hashfn\", uintptr_type,\n \t\t\t\t       \"equalfn\", uintptr_type,\n-\t\t\t\t       \"gc\", unsafe_pointer_type,\n+\t\t\t\t       \"gc\", uintptr_type,\n \t\t\t\t       \"string\", pointer_string_type,\n \t\t\t\t       \"\", pointer_uncommon_type,\n \t\t\t\t       \"ptrToThis\",\n@@ -6027,7 +6046,6 @@ Array_type::write_hash_function(Gogo* gogo, Named_type* name,\n   tref->set_is_lvalue();\n   s = Statement::make_assignment_operation(OPERATOR_PLUSEQ, tref, ele_size,\n \t\t\t\t\t   bloc);\n-\n   Block* statements = gogo->finish_block(bloc);\n \n   for_range->add_statements(statements);"}, {"sha": "dad6efb30c0cc3f0c3dd00779334afb4fe203d4c", "filename": "libgo/runtime/go-new.c", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0f2aeaa817167043259bbea22180bc8798411cdd/libgo%2Fruntime%2Fgo-new.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0f2aeaa817167043259bbea22180bc8798411cdd/libgo%2Fruntime%2Fgo-new.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fgo-new.c?ref=0f2aeaa817167043259bbea22180bc8798411cdd", "patch": "@@ -10,13 +10,17 @@\n #include \"malloc.h\"\n \n void *\n-__go_new (uintptr_t size)\n+__go_new (const struct __go_type_descriptor *td, uintptr_t size)\n {\n-  return runtime_mallocgc (size, 0, 0);\n+  return runtime_mallocgc (size,\n+\t\t\t   (uintptr) td | TypeInfo_SingleObject,\n+\t\t\t   0);\n }\n \n void *\n-__go_new_nopointers (uintptr_t size)\n+__go_new_nopointers (const struct __go_type_descriptor *td,  uintptr_t size)\n {\n-  return runtime_mallocgc (size, 0, FlagNoScan);\n+  return runtime_mallocgc (size,\n+\t\t\t   (uintptr) td | TypeInfo_SingleObject,\n+\t\t\t   FlagNoScan);\n }"}]}