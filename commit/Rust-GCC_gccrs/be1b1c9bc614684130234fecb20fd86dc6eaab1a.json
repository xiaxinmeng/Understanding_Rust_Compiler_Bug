{"sha": "be1b1c9bc614684130234fecb20fd86dc6eaab1a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUxYjFjOWJjNjE0Njg0MTMwMjM0ZmVjYjIwZmQ4NmRjNmVhYWIxYQ==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2005-05-30T18:48:59Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2005-05-30T18:48:59Z"}, "message": "re PR c/20303 ([4.0 only] Can't push more than 16 nested visibility)\n\n2005-05-30  H.J. Lu  <hongjiu.lu@intel.com>\n\n\tPR middle-end/20303\n\t* c-pragma.c: Include \"vec.h\".\n\t(handle_pragma_visibility): Use VEC.\n\n\t* doc/invoke.texi: Remove the nested visibility push limit.\n\nFrom-SVN: r100371", "tree": {"sha": "bd7cc05629321f73e730bb986c10c1dfa3da61b0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bd7cc05629321f73e730bb986c10c1dfa3da61b0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be1b1c9bc614684130234fecb20fd86dc6eaab1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1b1c9bc614684130234fecb20fd86dc6eaab1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be1b1c9bc614684130234fecb20fd86dc6eaab1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be1b1c9bc614684130234fecb20fd86dc6eaab1a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "385e0e0837c50581978a97fd16fdc2465462197d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/385e0e0837c50581978a97fd16fdc2465462197d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/385e0e0837c50581978a97fd16fdc2465462197d"}], "stats": {"total": 36, "additions": 24, "deletions": 12}, "files": [{"sha": "7a91d13abf34a97772bd7f42a3fbe6012fcfc3ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1b1c9bc614684130234fecb20fd86dc6eaab1a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1b1c9bc614684130234fecb20fd86dc6eaab1a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=be1b1c9bc614684130234fecb20fd86dc6eaab1a", "patch": "@@ -1,3 +1,11 @@\n+2005-05-30  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR middle-end/20303\n+\t* c-pragma.c: Include \"vec.h\".\n+\t(handle_pragma_visibility): Use VEC.\n+\n+\t* doc/invoke.texi: Remove the nested visibility push limit.\n+\n 2005-05-30  Roger Sayle  <roger@eyesopen.com>\n \n \tPR rtl-optimization/15422"}, {"sha": "bf1c4581a1dffaa31a636d8911275bd1b853e52d", "filename": "gcc/c-pragma.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1b1c9bc614684130234fecb20fd86dc6eaab1a/gcc%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1b1c9bc614684130234fecb20fd86dc6eaab1a/gcc%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pragma.c?ref=be1b1c9bc614684130234fecb20fd86dc6eaab1a", "patch": "@@ -34,6 +34,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n #include \"c-common.h\"\n #include \"output.h\"\n #include \"tm_p.h\"\n+#include \"vec.h\"\n #include \"target.h\"\n \n #define GCC_BAD(msgid) do { warning (0, msgid); return; } while (0)\n@@ -585,15 +586,20 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n #ifdef HANDLE_PRAGMA_VISIBILITY\n static void handle_pragma_visibility (cpp_reader *);\n \n+typedef enum symbol_visibility visibility;\n+DEF_VEC_I (visibility);\n+DEF_VEC_ALLOC_I (visibility, heap);\n+\n /* Sets the default visibility for symbols to something other than that\n    specified on the command line.  */\n static void\n handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n-{ /* Form is #pragma GCC visibility push(hidden)|pop */\n-  static int visstack [16], visidx;\n+{\n+  /* Form is #pragma GCC visibility push(hidden)|pop */\n   tree x;\n   enum cpp_ttype token;\n   enum { bad, push, pop } action = bad;\n+  static VEC (visibility, heap) *visstack;\n  \n   token = c_lex (&x);\n   if (token == CPP_NAME)\n@@ -610,14 +616,15 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n     {\n       if (pop == action)\n         {\n-          if (!visidx)\n+          if (!VEC_length (visibility, visstack))\n             {\n               GCC_BAD (\"No matching push for %<#pragma GCC visibility pop%>\");\n             }\n           else\n             {\n-              default_visibility = visstack[--visidx];\n-              visibility_options.inpragma = (visidx>0);\n+\t      default_visibility = VEC_pop (visibility, visstack);\n+\t      visibility_options.inpragma\n+\t\t= VEC_length (visibility, visstack) != 0;\n             }\n         }\n       else\n@@ -629,14 +636,11 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n             {\n               GCC_BAD (\"malformed #pragma GCC visibility push\");\n             }\n-          else if (visidx >= 16)\n-            {\n-              GCC_BAD (\"No more than sixteen #pragma GCC visibility pushes allowed at once\");\n-            }\n           else\n             {\n               const char *str = IDENTIFIER_POINTER (x);\n-              visstack[visidx++] = default_visibility;\n+\t      VEC_safe_push (visibility, heap, visstack,\n+\t\t\t     default_visibility);\n               if (!strcmp (str, \"default\"))\n                 default_visibility = VISIBILITY_DEFAULT;\n               else if (!strcmp (str, \"internal\"))"}, {"sha": "47e137c03bd38f04790b488bcaeb41b4d7136eb1", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be1b1c9bc614684130234fecb20fd86dc6eaab1a/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be1b1c9bc614684130234fecb20fd86dc6eaab1a/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=be1b1c9bc614684130234fecb20fd86dc6eaab1a", "patch": "@@ -12774,8 +12774,8 @@ For those adding visibility support to existing code, you may find\n @samp{#pragma GCC visibility} of use.  This works by you enclosing\n the declarations you wish to set visibility for with (for example)\n @samp{#pragma GCC visibility push(hidden)} and\n-@samp{#pragma GCC visibility pop}.  These can be nested up to sixteen\n-times.  Bear in mind that symbol visibility should be viewed @strong{as\n+@samp{#pragma GCC visibility pop}.\n+Bear in mind that symbol visibility should be viewed @strong{as\n part of the API interface contract} and thus all new code should\n always specify visibility when it is not the default ie; declarations\n only for use within the local DSO should @strong{always} be marked explicitly"}]}