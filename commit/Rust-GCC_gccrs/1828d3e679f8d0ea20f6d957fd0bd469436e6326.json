{"sha": "1828d3e679f8d0ea20f6d957fd0bd469436e6326", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTgyOGQzZTY3OWY4ZDBlYTIwZjZkOTU3ZmQwYmQ0Njk0MzZlNjMyNg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-06-01T20:53:18Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2014-06-01T20:53:18Z"}, "message": "constraints.md (Bw): Rename from 'w'.\n\n\t* config/i386/constraints.md (Bw): Rename from 'w'.\n\t(Bz): Rename from 'z'.\n\t* config/i386/i386.md: Change 'w' to 'Bw' and 'z' to 'Bz' globally.\n\nFrom-SVN: r211119", "tree": {"sha": "a054b0fcc8cb877b6dd645c542e69dc34d209c65", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a054b0fcc8cb877b6dd645c542e69dc34d209c65"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1828d3e679f8d0ea20f6d957fd0bd469436e6326", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1828d3e679f8d0ea20f6d957fd0bd469436e6326", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1828d3e679f8d0ea20f6d957fd0bd469436e6326", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1828d3e679f8d0ea20f6d957fd0bd469436e6326/comments", "author": null, "committer": null, "parents": [{"sha": "7fd009d0a73e43a079fd6582f40af445045b0017", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7fd009d0a73e43a079fd6582f40af445045b0017", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7fd009d0a73e43a079fd6582f40af445045b0017"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "120ada9d8161cf09982d372bdc50785395281c40", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1828d3e679f8d0ea20f6d957fd0bd469436e6326/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1828d3e679f8d0ea20f6d957fd0bd469436e6326/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1828d3e679f8d0ea20f6d957fd0bd469436e6326", "patch": "@@ -1,8 +1,15 @@\n+2014-06-01  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/constraints.md (Bw): Rename from 'w'.\n+\t(Bz): Rename from 'z'.\n+\t* config/i386/i386.md: Change 'w' to 'Bw' and 'z' to 'Bz' globally.\n+\n 2014-06-01  Kai Tietz  <ktietz@redhat.com>\n \n \tPR target/61377\n-\t* constrains.md (define_constrain): New 'Bs' constraint.\n-\t* i386.md (sibcall_insn_operand): Use Bs instead of m constraint.\n+\t* config/i386/constrains.md (define_constrain): New 'Bs' constraint.\n+\t* config/i386/i386.md (sibcall_insn_operand): Use Bs\n+\tinstead of m constraint.\n \n 2014-05-31  Andreas Schwab  <schwab@linux-m68k.org>\n "}, {"sha": "8e0a58355ecdf26ff87150fbf3b869efd1742f98", "filename": "gcc/config/i386/constraints.md", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1828d3e679f8d0ea20f6d957fd0bd469436e6326/gcc%2Fconfig%2Fi386%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1828d3e679f8d0ea20f6d957fd0bd469436e6326/gcc%2Fconfig%2Fi386%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fconstraints.md?ref=1828d3e679f8d0ea20f6d957fd0bd469436e6326", "patch": "@@ -19,7 +19,7 @@\n \n ;;; Unused letters:\n ;;;           H\n-;;;           h j\n+;;;           h j            w  z\n \n ;; Integer register constraints.\n ;; It is not necessary to define 'r' here.\n@@ -91,6 +91,9 @@\n (define_register_constraint \"x\" \"TARGET_SSE ? SSE_REGS : NO_REGS\"\n  \"Any SSE register.\")\n \n+(define_register_constraint \"v\" \"TARGET_SSE ? ALL_SSE_REGS : NO_REGS\"\n+ \"Any EVEX encodable SSE register (@code{%xmm0-%xmm31}).\")\n+\n ;; We use the Y prefix to denote any number of conditional register sets:\n ;;  z\tFirst SSE register.\n ;;  i\tSSE2 inter-unit moves to SSE register enabled\n@@ -144,26 +147,25 @@\n  \"(ix86_fpmath & FPMATH_387) ? FLOAT_REGS : NO_REGS\"\n  \"@internal Any x87 register when 80387 FP arithmetic is enabled.\")\n \n-;; We use the B prefix to denote any number of internal memory operands:\n-;;  s  Sibling memory operand.\n+;; We use the B prefix to denote any number of internal operands:\n+;;  s  Sibcall memory operand, not valid for TARGET_X32\n+;;  w  Call memory operand, not valid for TARGET_X32\n+;;  z  Constant call address operand.\n \n (define_constraint \"Bs\"\n   \"@internal Sibcall memory operand.\"\n   (and (not (match_test \"TARGET_X32\"))\n        (match_operand 0 \"sibcall_memory_operand\")))\n \n-(define_register_constraint \"v\" \"TARGET_SSE ? ALL_SSE_REGS : NO_REGS\"\n- \"Any EVEX encodable SSE register (@code{%xmm0-%xmm31}).\")\n-\n-(define_constraint \"z\"\n-  \"@internal Constant call address operand.\"\n-  (match_operand 0 \"constant_call_address_operand\"))\n-\n-(define_constraint \"w\"\n+(define_constraint \"Bw\"\n   \"@internal Call memory operand.\"\n   (and (not (match_test \"TARGET_X32\"))\n        (match_operand 0 \"memory_operand\")))\n \n+(define_constraint \"Bz\"\n+  \"@internal Constant call address operand.\"\n+  (match_operand 0 \"constant_call_address_operand\"))\n+\n ;; Integer constant constraints.\n (define_constraint \"I\"\n   \"Integer constant in the range 0 @dots{} 31, for 32-bit shifts.\""}, {"sha": "f7716a82381066c08c51950da12dea6bddaa635d", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1828d3e679f8d0ea20f6d957fd0bd469436e6326/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1828d3e679f8d0ea20f6d957fd0bd469436e6326/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=1828d3e679f8d0ea20f6d957fd0bd469436e6326", "patch": "@@ -11182,7 +11182,7 @@\n })\n \n (define_insn \"*indirect_jump\"\n-  [(set (pc) (match_operand:W 0 \"indirect_branch_operand\" \"rw\"))]\n+  [(set (pc) (match_operand:W 0 \"indirect_branch_operand\" \"rBw\"))]\n   \"\"\n   \"jmp\\t%A0\"\n   [(set_attr \"type\" \"ibr\")\n@@ -11230,7 +11230,7 @@\n })\n \n (define_insn \"*tablejump_1\"\n-  [(set (pc) (match_operand:W 0 \"indirect_branch_operand\" \"rw\"))\n+  [(set (pc) (match_operand:W 0 \"indirect_branch_operand\" \"rBw\"))\n    (use (label_ref (match_operand 1)))]\n   \"\"\n   \"jmp\\t%A0\"\n@@ -11360,23 +11360,23 @@\n })\n \n (define_insn \"*call\"\n-  [(call (mem:QI (match_operand:W 0 \"call_insn_operand\" \"<c>zw\"))\n+  [(call (mem:QI (match_operand:W 0 \"call_insn_operand\" \"<c>BwBz\"))\n \t (match_operand 1))]\n   \"!SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*call_rex64_ms_sysv\"\n   [(match_parallel 2 \"call_rex64_ms_sysv_operation\"\n-    [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rzw\"))\n+    [(call (mem:QI (match_operand:DI 0 \"call_insn_operand\" \"rBwBz\"))\n \t   (match_operand 1))\n      (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)])]\n   \"TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*sibcall\"\n-  [(call (mem:QI (match_operand:W 0 \"sibcall_insn_operand\" \"UzBs\"))\n+  [(call (mem:QI (match_operand:W 0 \"sibcall_insn_operand\" \"UBsBz\"))\n \t (match_operand 1))]\n   \"SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[0]);\"\n@@ -11396,7 +11396,7 @@\n })\n \n (define_insn \"*call_pop\"\n-  [(call (mem:QI (match_operand:SI 0 \"call_insn_operand\" \"lzm\"))\n+  [(call (mem:QI (match_operand:SI 0 \"call_insn_operand\" \"lmBz\"))\n \t (match_operand 1))\n    (set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n@@ -11406,7 +11406,7 @@\n   [(set_attr \"type\" \"call\")])\n \n (define_insn \"*sibcall_pop\"\n-  [(call (mem:QI (match_operand:SI 0 \"sibcall_insn_operand\" \"UzBs\"))\n+  [(call (mem:QI (match_operand:SI 0 \"sibcall_insn_operand\" \"UBsBz\"))\n \t (match_operand 1))\n    (set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n@@ -11443,15 +11443,15 @@\n \n (define_insn \"*call_value\"\n   [(set (match_operand 0)\n-\t(call (mem:QI (match_operand:W 1 \"call_insn_operand\" \"<c>zw\"))\n+\t(call (mem:QI (match_operand:W 1 \"call_insn_operand\" \"<c>BwBz\"))\n \t      (match_operand 2)))]\n   \"!SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n   [(set_attr \"type\" \"callv\")])\n \n (define_insn \"*sibcall_value\"\n   [(set (match_operand 0)\n-\t(call (mem:QI (match_operand:W 1 \"sibcall_insn_operand\" \"UzBs\"))\n+\t(call (mem:QI (match_operand:W 1 \"sibcall_insn_operand\" \"UBsBz\"))\n \t      (match_operand 2)))]\n   \"SIBLING_CALL_P (insn)\"\n   \"* return ix86_output_call_insn (insn, operands[1]);\"\n@@ -11460,7 +11460,7 @@\n (define_insn \"*call_value_rex64_ms_sysv\"\n   [(match_parallel 3 \"call_rex64_ms_sysv_operation\"\n     [(set (match_operand 0)\n-\t  (call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rzw\"))\n+\t  (call (mem:QI (match_operand:DI 1 \"call_insn_operand\" \"rBwBz\"))\n \t\t(match_operand 2)))\n      (unspec [(const_int 0)] UNSPEC_MS_TO_SYSV_CALL)])]\n  \"TARGET_64BIT && !SIBLING_CALL_P (insn)\"\n@@ -11483,7 +11483,7 @@\n \n (define_insn \"*call_value_pop\"\n   [(set (match_operand 0)\n-\t(call (mem:QI (match_operand:SI 1 \"call_insn_operand\" \"lzm\"))\n+\t(call (mem:QI (match_operand:SI 1 \"call_insn_operand\" \"lmBz\"))\n \t      (match_operand 2)))\n    (set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n@@ -11494,7 +11494,7 @@\n \n (define_insn \"*sibcall_value_pop\"\n   [(set (match_operand 0)\n-\t(call (mem:QI (match_operand:SI 1 \"sibcall_insn_operand\" \"UzBs\"))\n+\t(call (mem:QI (match_operand:SI 1 \"sibcall_insn_operand\" \"UBsBz\"))\n \t      (match_operand 2)))\n    (set (reg:SI SP_REG)\n \t(plus:SI (reg:SI SP_REG)\n@@ -12539,7 +12539,7 @@\n \t(unspec:SI\n \t [(match_operand:SI 1 \"register_operand\" \"b\")\n \t  (match_operand 2 \"tls_symbolic_operand\")\n-\t  (match_operand 3 \"constant_call_address_operand\" \"z\")\n+\t  (match_operand 3 \"constant_call_address_operand\" \"Bz\")\n \t  (reg:SI SP_REG)]\n \t UNSPEC_TLS_GD))\n    (clobber (match_scratch:SI 4 \"=d\"))\n@@ -12577,7 +12577,7 @@\n (define_insn \"*tls_global_dynamic_64_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=a\")\n \t(call:P\n-\t (mem:QI (match_operand 2 \"constant_call_address_operand\" \"z\"))\n+\t (mem:QI (match_operand 2 \"constant_call_address_operand\" \"Bz\"))\n \t (match_operand 3)))\n    (unspec:P [(match_operand 1 \"tls_symbolic_operand\")]\n \t     UNSPEC_TLS_GD)]\n@@ -12634,7 +12634,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(unspec:SI\n \t [(match_operand:SI 1 \"register_operand\" \"b\")\n-\t  (match_operand 2 \"constant_call_address_operand\" \"z\")\n+\t  (match_operand 2 \"constant_call_address_operand\" \"Bz\")\n \t  (reg:SI SP_REG)]\n \t UNSPEC_TLS_LD_BASE))\n    (clobber (match_scratch:SI 3 \"=d\"))\n@@ -12673,7 +12673,7 @@\n (define_insn \"*tls_local_dynamic_base_64_<mode>\"\n   [(set (match_operand:P 0 \"register_operand\" \"=a\")\n \t(call:P\n-\t (mem:QI (match_operand 1 \"constant_call_address_operand\" \"z\"))\n+\t (mem:QI (match_operand 1 \"constant_call_address_operand\" \"Bz\"))\n \t (match_operand 2)))\n    (unspec:P [(const_int 0)] UNSPEC_TLS_LD_BASE)]\n   \"TARGET_64BIT\"\n@@ -12725,7 +12725,7 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(plus:SI\n \t (unspec:SI [(match_operand:SI 1 \"register_operand\" \"b\")\n-\t\t     (match_operand 2 \"constant_call_address_operand\" \"z\")\n+\t\t     (match_operand 2 \"constant_call_address_operand\" \"Bz\")\n \t\t     (reg:SI SP_REG)]\n \t\t    UNSPEC_TLS_LD_BASE)\n \t (const:SI (unspec:SI"}]}