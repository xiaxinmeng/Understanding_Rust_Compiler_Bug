{"sha": "8bf04387959a7eea3d3e58f9e25a70fa67da641a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGJmMDQzODc5NTlhN2VlYTNkM2U1OGY5ZTI1YTcwZmE2N2RhNjQxYQ==", "commit": {"author": {"name": "Tom Tromey", "email": "tromey@redhat.com", "date": "2005-01-24T19:05:34Z"}, "committer": {"name": "Tom Tromey", "email": "tromey@gcc.gnu.org", "date": "2005-01-24T19:05:34Z"}, "message": "Class.h (next): Updated documentation.\n\n\t* java/lang/Class.h (next): Updated documentation.  Renamed to\n\t'next_or_version'.\n\t* java/lang/natClassLoader.cc (_Jv_RegisterClasses): Use\n\t_Jv_CheckABIVersion.\n\t(_Jv_RegisterClasses_Counted): Likewise.\n\t(_Jv_RegisterClassHookDefault): Fix starting condition of\n\tduplicate-checking loop.\n\t* include/jvm.h (GCJ_VERSION): New define.\n\t(GCJ_BINARYCOMPAT_ADDITION): Likewise.\n\t(_Jv_CheckABIVersion): New function.\n\nFrom-SVN: r94173", "tree": {"sha": "0ee3307d0e89506b5d2eddd057065bf2334d4ace", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0ee3307d0e89506b5d2eddd057065bf2334d4ace"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8bf04387959a7eea3d3e58f9e25a70fa67da641a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf04387959a7eea3d3e58f9e25a70fa67da641a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8bf04387959a7eea3d3e58f9e25a70fa67da641a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8bf04387959a7eea3d3e58f9e25a70fa67da641a/comments", "author": null, "committer": null, "parents": [{"sha": "635b0f2a72770f39f07df01048baec5271b5c44f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/635b0f2a72770f39f07df01048baec5271b5c44f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/635b0f2a72770f39f07df01048baec5271b5c44f"}], "stats": {"total": 58, "additions": 43, "deletions": 15}, "files": [{"sha": "8bc63074903ee682c4e916909227941444d0345d", "filename": "libjava/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf04387959a7eea3d3e58f9e25a70fa67da641a/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf04387959a7eea3d3e58f9e25a70fa67da641a/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=8bf04387959a7eea3d3e58f9e25a70fa67da641a", "patch": "@@ -1,3 +1,16 @@\n+2005-01-24  Tom Tromey  <tromey@redhat.com>\n+\n+\t* java/lang/Class.h (next): Updated documentation.  Renamed to\n+\t'next_or_version'.\n+\t* java/lang/natClassLoader.cc (_Jv_RegisterClasses): Use\n+\t_Jv_CheckABIVersion.\n+\t(_Jv_RegisterClasses_Counted): Likewise.\n+\t(_Jv_RegisterClassHookDefault): Fix starting condition of\n+\tduplicate-checking loop.\n+\t* include/jvm.h (GCJ_VERSION): New define.\n+\t(GCJ_BINARYCOMPAT_ADDITION): Likewise.\n+\t(_Jv_CheckABIVersion): New function.\n+\n 2005-01-24  Jakub Jelinek  <jakub@redhat.com>\n \n \t* Makefile.am (libgij_la_LIBADD): Add -L$(here)/.libs."}, {"sha": "cf4d7d640d095092b125075cf744814acf2d518c", "filename": "libjava/include/jvm.h", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf04387959a7eea3d3e58f9e25a70fa67da641a/libjava%2Finclude%2Fjvm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf04387959a7eea3d3e58f9e25a70fa67da641a/libjava%2Finclude%2Fjvm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fjvm.h?ref=8bf04387959a7eea3d3e58f9e25a70fa67da641a", "patch": "@@ -566,4 +566,19 @@ extern void (*_Jv_JVMPI_Notify_THREAD_END) (JVMPI_Event *event);\n \n extern void _Jv_RegisterBootstrapPackages ();\n \n+\n+// This is used to find ABI versions we recognize.\n+#define GCJ_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 10)\n+#define GCJ_BINARYCOMPAT_ADDITION 5\n+\n+inline bool\n+_Jv_CheckABIVersion (unsigned long value)\n+{\n+  // For this release, recognize just our defined C++ ABI and our\n+  // defined BC ABI.  (In the future we may recognize past BC ABIs as\n+  // well.)\n+  return (value == GCJ_VERSION\n+\t  || value == (GCJ_VERSION + GCJ_BINARYCOMPAT_ADDITION));\n+}\n+\n #endif /* __JAVA_JVM_H__ */"}, {"sha": "4e061cee5742e1557f8cf7095a99802d9c8661b8", "filename": "libjava/java/lang/Class.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf04387959a7eea3d3e58f9e25a70fa67da641a/libjava%2Fjava%2Flang%2FClass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf04387959a7eea3d3e58f9e25a70fa67da641a/libjava%2Fjava%2Flang%2FClass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FClass.h?ref=8bf04387959a7eea3d3e58f9e25a70fa67da641a", "patch": "@@ -488,8 +488,10 @@ class java::lang::Class : public java::lang::Object\n \n   friend void ::_Jv_sharedlib_register_hook (jclass klass);\n \n-  // Chain for class pool.\n-  jclass next;\n+  // Chain for class pool.  This also doubles as the ABI version\n+  // number.  It is only used for this purpose at class registration\n+  // time, and only for precompiled classes.\n+  jclass next_or_version;\n   // Name of class.\n   _Jv_Utf8Const *name;\n   // Access flags for class."}, {"sha": "15fb9eb415c754e878e887f81702f0d6dfb32341", "filename": "libjava/java/lang/natClassLoader.cc", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8bf04387959a7eea3d3e58f9e25a70fa67da641a/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8bf04387959a7eea3d3e58f9e25a70fa67da641a/libjava%2Fjava%2Flang%2FnatClassLoader.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fjava%2Flang%2FnatClassLoader.cc?ref=8bf04387959a7eea3d3e58f9e25a70fa67da641a", "patch": "@@ -75,7 +75,7 @@ _Jv_FindClassInCache (_Jv_Utf8Const *name)\n   jint hash = HASH_UTF (name);\n \n   jclass klass;\n-  for (klass = loaded_classes[hash]; klass; klass = klass->next)\n+  for (klass = loaded_classes[hash]; klass; klass = klass->next_or_version)\n     {\n       if (_Jv_equalUtf8Consts (name, klass->name))\n \tbreak;\n@@ -91,11 +91,11 @@ _Jv_UnregisterClass (jclass the_class)\n   jint hash = HASH_UTF(the_class->name);\n \n   jclass *klass = &(loaded_classes[hash]);\n-  for ( ; *klass; klass = &((*klass)->next))\n+  for ( ; *klass; klass = &((*klass)->next_or_version))\n     {\n       if (*klass == the_class)\n \t{\n-\t  *klass = (*klass)->next;\n+\t  *klass = (*klass)->next_or_version;\n \t  break;\n \t}\n     }\n@@ -122,7 +122,8 @@ _Jv_RegisterClasses (const jclass *classes)\n     {\n       jclass klass = *classes;\n \n-      (*_Jv_RegisterClassHook) (klass);\n+      if (_Jv_CheckABIVersion ((unsigned long) klass->next_or_version))\n+\t(*_Jv_RegisterClassHook) (klass);\n     }\n }\n \n@@ -135,7 +136,8 @@ _Jv_RegisterClasses_Counted (const jclass * classes, size_t count)\n     {\n       jclass klass = classes[i];\n \n-      (*_Jv_RegisterClassHook) (klass);\n+      if (_Jv_CheckABIVersion ((unsigned long) klass->next_or_version))\n+\t(*_Jv_RegisterClassHook) (klass);\n     }\n }\n \n@@ -144,12 +146,10 @@ _Jv_RegisterClassHookDefault (jclass klass)\n {\n   jint hash = HASH_UTF (klass->name);\n \n-  // The BC ABI makes this check unnecessary: we always resolve all\n-  // data references via the appropriate class loader, so the kludge\n-  // that required this check has gone.\n   // If the class is already registered, don't re-register it.\n-  jclass check_class = klass->next;\n-  while (check_class != NULL)\n+  for (jclass check_class = loaded_classes[hash];\n+       check_class != NULL;\n+       check_class = check_class->next_or_version)\n     {\n       if (check_class == klass)\n \t{\n@@ -170,14 +170,12 @@ _Jv_RegisterClassHookDefault (jclass klass)\n \t      throw new java::lang::VirtualMachineError (str);\n \t    }\n \t}\n-\n-      check_class = check_class->next;\n     }\n \n   // FIXME: this is really bogus!\n   if (! klass->engine)\n     klass->engine = &_Jv_soleCompiledEngine;\n-  klass->next = loaded_classes[hash];\n+  klass->next_or_version = loaded_classes[hash];\n   loaded_classes[hash] = klass;\n }\n "}]}