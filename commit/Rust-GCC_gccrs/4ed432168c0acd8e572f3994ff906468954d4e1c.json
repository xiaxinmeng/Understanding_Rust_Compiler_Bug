{"sha": "4ed432168c0acd8e572f3994ff906468954d4e1c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGVkNDMyMTY4YzBhY2Q4ZTU3MmYzOTk0ZmY5MDY0Njg5NTRkNGUxYw==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-07-12T22:49:48Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-07-12T22:49:48Z"}, "message": "c-format.c: Fix comment formatting.\n\n\t* c-format.c: Fix comment formatting.\n\t* c-typeck.c: Likewise.\n\t* coverage.c: Likewise.\n\t* cppcharset.c: Likewise.\n\t* cpplib.c: Likewise.\n\t* dbxout.c: Likewise.\n\t* gcov-io.h: Likewise.\n\t* toplev.c: Likewise.\n\nFrom-SVN: r69276", "tree": {"sha": "c1de26b1f01549c9268b8764b22ddc9d6f9a3ba0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c1de26b1f01549c9268b8764b22ddc9d6f9a3ba0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ed432168c0acd8e572f3994ff906468954d4e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed432168c0acd8e572f3994ff906468954d4e1c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ed432168c0acd8e572f3994ff906468954d4e1c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ed432168c0acd8e572f3994ff906468954d4e1c/comments", "author": null, "committer": null, "parents": [{"sha": "0c6a2903e58fff129d796e670226decdcd988dd6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c6a2903e58fff129d796e670226decdcd988dd6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c6a2903e58fff129d796e670226decdcd988dd6"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "5a83f1ecc3efc1b5607fbe6d726fac17768004a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4ed432168c0acd8e572f3994ff906468954d4e1c", "patch": "@@ -1,3 +1,14 @@\n+2003-07-12  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* c-format.c: Fix comment formatting.\n+\t* c-typeck.c: Likewise.\n+\t* coverage.c: Likewise.\n+\t* cppcharset.c: Likewise.\n+\t* cpplib.c: Likewise.\n+\t* dbxout.c: Likewise.\n+\t* gcov-io.h: Likewise.\n+\t* toplev.c: Likewise.\n+\n 2003-07-12  Nathanael Nerode  <neroden@gcc.gnu.org>\n \n \t* fixinc/inclhack.def (alpha_sbrk): Note that OpenBSD needs this "}, {"sha": "769b039a07662d526c7489f60e7e83187db13020", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=4ed432168c0acd8e572f3994ff906468954d4e1c", "patch": "@@ -2619,7 +2619,7 @@ init_dynamic_diag_info (void)\n \t}\n       if (t)\n         {\n-\t  /* All specifiers taking a tree share the same struct. */\n+\t  /* All specifiers taking a tree share the same struct.  */\n \t  i = find_char_info_specifier_index (cdiag_fci, 'D');\n \t  cdiag_fci[i].types[0].type = &t;\n \t  cdiag_fci[i].pointer_count = 1;\n@@ -2639,7 +2639,7 @@ init_dynamic_diag_info (void)\n \t}\n       if (t)\n         {\n-\t  /* All specifiers taking a tree share the same struct. */\n+\t  /* All specifiers taking a tree share the same struct.  */\n \t  i = find_char_info_specifier_index (cxxdiag_fci, 'D');\n \t  cxxdiag_fci[i].types[0].type = &t;\n \t  cxxdiag_fci[i].pointer_count = 1;"}, {"sha": "7564660cd012094dea9c8e66b949c4079b3b42c3", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=4ed432168c0acd8e572f3994ff906468954d4e1c", "patch": "@@ -641,7 +641,7 @@ tagged_types_tu_compatible_p (tree t1, tree t2, int flags)\n   /* We have to verify that the tags of the types are the same.  This\n      is harder than it looks because this may be a typedef, so we have\n      to go look at the original type.  It may even be a typedef of a\n-     typedef... */\n+     typedef...  */\n   while (TYPE_NAME (t1) && TREE_CODE (TYPE_NAME (t1)) == TYPE_DECL)\n     t1 = DECL_ORIGINAL_TYPE (TYPE_NAME (t1));\n "}, {"sha": "3335237a717f35f2928aa551a8354699f506145c", "filename": "gcc/coverage.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=4ed432168c0acd8e572f3994ff906468954d4e1c", "patch": "@@ -178,7 +178,7 @@ read_counts_file (void)\n       return;\n     }\n \n-  /* Read and discard the stamp. */\n+  /* Read and discard the stamp.  */\n   gcov_read_unsigned ();\n   \n   counts_hash = htab_create (10,"}, {"sha": "0fc87f2ce24a073bd11b9de392dc14fcae1b13ec", "filename": "gcc/cppcharset.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fcppcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fcppcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppcharset.c?ref=4ed432168c0acd8e572f3994ff906468954d4e1c", "patch": "@@ -448,7 +448,7 @@ one_utf16_to_utf8 (iconv_t bigend, const uchar **inbufp, size_t *inbytesleftp,\n \n /* Helper routine for the next few functions.  The 'const' on\n    one_conversion means that we promise not to modify what function is\n-   pointed to, which lets the inliner see through it. */\n+   pointed to, which lets the inliner see through it.  */\n \n static inline bool\n conversion_loop (int (*const one_conversion)(iconv_t, const uchar **, size_t *,"}, {"sha": "bbd6d016e01166a824f37ade784594f08d5d568f", "filename": "gcc/cpplib.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fcpplib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fcpplib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.c?ref=4ed432168c0acd8e572f3994ff906468954d4e1c", "patch": "@@ -559,7 +559,7 @@ undefine_macros (cpp_reader *pfile, cpp_hashnode *h,\n       if (CPP_OPTION (pfile, warn_unused_macros))\n         _cpp_warn_if_unused_macro (pfile, h, NULL);\n \n-      /* and fall through... */\n+      /* and fall through...  */\n     case NT_ASSERTION:\n       _cpp_free_definition (h);\n       break;"}, {"sha": "618094d2d5b7eb8ae60780ba1026389f633f303b", "filename": "gcc/dbxout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=4ed432168c0acd8e572f3994ff906468954d4e1c", "patch": "@@ -562,7 +562,7 @@ dbxout_typedefs (tree syms)\n }\n \n #ifdef DBX_USE_BINCL\n-/* Emit BINCL stab using given name.   */\n+/* Emit BINCL stab using given name.  */\n static void\n emit_bincl_stab (const char *name)\n {"}, {"sha": "fd5755fea78e28769cab8bfd926498867f10972a", "filename": "gcc/gcov-io.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fgcov-io.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Fgcov-io.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-io.h?ref=4ed432168c0acd8e572f3994ff906468954d4e1c", "patch": "@@ -454,7 +454,7 @@ GCOV_LINKAGE struct gcov_var\n    functions, gcov_seek & gcov_error. When a file is to be rewritten\n    you use the functions for reading, then gcov_rewrite then the\n    functions for writing.  Your file may become corrupted if you break\n-   these invariants. */\n+   these invariants.  */\n #if IN_LIBGCOV\n GCOV_LINKAGE int gcov_open (const char */*name*/);\n #else"}, {"sha": "da18f92885426f2ce56a4a0b1ae3cd4f3cb82ee0", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ed432168c0acd8e572f3994ff906468954d4e1c/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=4ed432168c0acd8e572f3994ff906468954d4e1c", "patch": "@@ -465,7 +465,7 @@ int mem_report = 0;\n    and to print them when we are done.  */\n int flag_detailed_statistics = 0;\n \n-/* A random sequence of characters, unless overridden by user. */\n+/* A random sequence of characters, unless overridden by user.  */\n const char *flag_random_seed;\n \n /* A local time stamp derived from the time of compilation. It will be"}]}