{"sha": "ef5f7b89bbc352255595069eb870d6f30f1f9134", "node_id": "C_kwDOANBUbNoAKGVmNWY3Yjg5YmJjMzUyMjU1NTk1MDY5ZWI4NzBkNmYzMGYxZjkxMzQ", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2023-02-01T07:59:41Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@linux.ibm.com", "date": "2023-02-01T07:59:41Z"}, "message": "New reg note REG_CFA_NORESTORE\n\nThis patch introduces a new reg note which can be used to tell the CFI\nverification in dwarf2cfi that a register is stored without intending\nto restore from it.\n\nThis is useful when storing e.g. register contents to the stack and\ngenerate CFI for it although the register is not really supposed to be\nrestored.\n\ngcc/ChangeLog:\n\n\t* dwarf2cfi.cc (dwarf2out_frame_debug_cfa_restore): Add\n\tEMIT_CFI parameter.\n\t(dwarf2out_frame_debug): Add case for REG_CFA_NORESTORE.\n\t* reg-notes.def (REG_CFA_NOTE): New reg note definition.", "tree": {"sha": "4f076743b14fc3cf7dd4d2b0c2906114295dbba1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4f076743b14fc3cf7dd4d2b0c2906114295dbba1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ef5f7b89bbc352255595069eb870d6f30f1f9134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5f7b89bbc352255595069eb870d6f30f1f9134", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ef5f7b89bbc352255595069eb870d6f30f1f9134", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ef5f7b89bbc352255595069eb870d6f30f1f9134/comments", "author": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Andreas-Krebbel", "id": 38103320, "node_id": "MDQ6VXNlcjM4MTAzMzIw", "avatar_url": "https://avatars.githubusercontent.com/u/38103320?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Andreas-Krebbel", "html_url": "https://github.com/Andreas-Krebbel", "followers_url": "https://api.github.com/users/Andreas-Krebbel/followers", "following_url": "https://api.github.com/users/Andreas-Krebbel/following{/other_user}", "gists_url": "https://api.github.com/users/Andreas-Krebbel/gists{/gist_id}", "starred_url": "https://api.github.com/users/Andreas-Krebbel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Andreas-Krebbel/subscriptions", "organizations_url": "https://api.github.com/users/Andreas-Krebbel/orgs", "repos_url": "https://api.github.com/users/Andreas-Krebbel/repos", "events_url": "https://api.github.com/users/Andreas-Krebbel/events{/privacy}", "received_events_url": "https://api.github.com/users/Andreas-Krebbel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97258480438db77e52f4b3947fa2c075b09d3fe1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97258480438db77e52f4b3947fa2c075b09d3fe1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97258480438db77e52f4b3947fa2c075b09d3fe1"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "57283c10a299a4b9af75569a1c63703a54aa10b5", "filename": "gcc/dwarf2cfi.cc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef5f7b89bbc352255595069eb870d6f30f1f9134/gcc%2Fdwarf2cfi.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef5f7b89bbc352255595069eb870d6f30f1f9134/gcc%2Fdwarf2cfi.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.cc?ref=ef5f7b89bbc352255595069eb870d6f30f1f9134", "patch": "@@ -1496,18 +1496,21 @@ dwarf2out_frame_debug_cfa_val_expression (rtx set)\n   update_row_reg_save (cur_row, dwf_regno (dest), cfi);\n }\n \n-/* A subroutine of dwarf2out_frame_debug, process a REG_CFA_RESTORE note.  */\n+/* A subroutine of dwarf2out_frame_debug, process a REG_CFA_RESTORE\n+   note. When called with EMIT_CFI set to false emitting a CFI\n+   statement is suppressed.  */\n \n static void\n-dwarf2out_frame_debug_cfa_restore (rtx reg)\n+dwarf2out_frame_debug_cfa_restore (rtx reg, bool emit_cfi)\n {\n   gcc_assert (REG_P (reg));\n \n   rtx span = targetm.dwarf_register_span (reg);\n   if (!span)\n     {\n       unsigned int regno = dwf_regno (reg);\n-      add_cfi_restore (regno);\n+      if (emit_cfi)\n+\tadd_cfi_restore (regno);\n       update_row_reg_save (cur_row, regno, NULL);\n     }\n   else\n@@ -1522,7 +1525,8 @@ dwarf2out_frame_debug_cfa_restore (rtx reg)\n \t  reg = XVECEXP (span, 0, par_index);\n \t  gcc_assert (REG_P (reg));\n \t  unsigned int regno = dwf_regno (reg);\n-\t  add_cfi_restore (regno);\n+\t  if (emit_cfi)\n+\t    add_cfi_restore (regno);\n \t  update_row_reg_save (cur_row, regno, NULL);\n \t}\n     }\n@@ -2309,6 +2313,7 @@ dwarf2out_frame_debug (rtx_insn *insn)\n \tbreak;\n \n       case REG_CFA_RESTORE:\n+      case REG_CFA_NO_RESTORE:\n \tn = XEXP (note, 0);\n \tif (n == NULL)\n \t  {\n@@ -2317,7 +2322,7 @@ dwarf2out_frame_debug (rtx_insn *insn)\n \t      n = XVECEXP (n, 0, 0);\n \t    n = XEXP (n, 0);\n \t  }\n-\tdwarf2out_frame_debug_cfa_restore (n);\n+\tdwarf2out_frame_debug_cfa_restore (n, REG_NOTE_KIND (note) == REG_CFA_RESTORE);\n \thandled_one = true;\n \tbreak;\n "}, {"sha": "1f74a605b3ef1495f7afc390b640113a1f57c075", "filename": "gcc/reg-notes.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ef5f7b89bbc352255595069eb870d6f30f1f9134/gcc%2Freg-notes.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ef5f7b89bbc352255595069eb870d6f30f1f9134/gcc%2Freg-notes.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-notes.def?ref=ef5f7b89bbc352255595069eb870d6f30f1f9134", "patch": "@@ -157,6 +157,11 @@ REG_CFA_NOTE (CFA_VAL_EXPRESSION)\n    first pattern is the register to be restored.  */\n REG_CFA_NOTE (CFA_RESTORE)\n \n+/* Like CFA_RESTORE but without actually emitting CFI.  This can be\n+   used to tell the verification infrastructure that a register is\n+   saved without intending to restore it.  */\n+REG_CFA_NOTE (CFA_NO_RESTORE)\n+\n /* Attached to insns that are RTX_FRAME_RELATED_P, marks insn that sets\n    vDRAP from DRAP.  If vDRAP is a register, vdrap_reg is initalized\n    to the argument, if it is a MEM, it is ignored.  */"}]}