{"sha": "7d08043da935095543172f91f691917bd6379c53", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2QwODA0M2RhOTM1MDk1NTQzMTcyZjkxZjY5MTkxN2JkNjM3OWM1Mw==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-06-18T02:05:16Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@linux.ibm.com", "date": "2021-06-18T02:05:16Z"}, "message": "Add IEEE 128-bit min/max support on PowerPC.\n\nThis patch adds the support for the IEEE 128-bit floating point C minimum and\nmaximum instructions.  The next patch will add the support for using the\ncompare and set mask instruction to implement conditional moves.\n\nThis patch does not try to re-use the code used for SF/DF min/max\nsupport.  It defines a separate insn for the IEEE 128-bit support.  It\nuses the code iterator <minmax> to simplify adding both operations.\n\nGCC will not convert ternary operations into using min/max instructions\nprovided in this patch unless the user uses -Ofast.  The next patch that adds\nconditional move instructions will enable the ternary conversion in many cases.\n\ngcc/\n2021-06-17  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* config/rs6000/rs6000.c (rs6000_emit_minmax): Add support for ISA\n\t3.1 IEEE 128-bit floating point xsmaxcqp/xsmincqp instructions.\n\t* config/rs6000/rs6000.md (s<minmax><mode>3, IEEE128 iterator):\n\tNew insns.\n\ngcc/testsuite/\n2021-06-17  Michael Meissner  <meissner@linux.ibm.com>\n\n\t* gcc.target/powerpc/float128-minmax-2.c: New test.", "tree": {"sha": "c7f3bebe4a23809c4a90d8b208ff7ae04b44f037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7f3bebe4a23809c4a90d8b208ff7ae04b44f037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7d08043da935095543172f91f691917bd6379c53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d08043da935095543172f91f691917bd6379c53", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7d08043da935095543172f91f691917bd6379c53", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7d08043da935095543172f91f691917bd6379c53/comments", "author": null, "committer": null, "parents": [{"sha": "688359a27d835bbdab554fdf5eb207f1bd678371", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/688359a27d835bbdab554fdf5eb207f1bd678371", "html_url": "https://github.com/Rust-GCC/gccrs/commit/688359a27d835bbdab554fdf5eb207f1bd678371"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "2c249e186e1e28c5bdb87f3d628b2c619f9512d1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d08043da935095543172f91f691917bd6379c53/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d08043da935095543172f91f691917bd6379c53/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=7d08043da935095543172f91f691917bd6379c53", "patch": "@@ -16103,7 +16103,8 @@ rs6000_emit_minmax (rtx dest, enum rtx_code code, rtx op0, rtx op1)\n   /* VSX/altivec have direct min/max insns.  */\n   if ((code == SMAX || code == SMIN)\n       && (VECTOR_UNIT_ALTIVEC_OR_VSX_P (mode)\n-\t  || (mode == SFmode && VECTOR_UNIT_VSX_P (DFmode))))\n+\t  || (mode == SFmode && VECTOR_UNIT_VSX_P (DFmode))\n+\t  || (TARGET_POWER10 && TARGET_FLOAT128_HW && FLOAT128_IEEE_P (mode))))\n     {\n       emit_insn (gen_rtx_SET (dest, gen_rtx_fmt_ee (code, mode, op0, op1)));\n       return;"}, {"sha": "abd825fe14a71b24ef6306188253dee067f1d821", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d08043da935095543172f91f691917bd6379c53/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d08043da935095543172f91f691917bd6379c53/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=7d08043da935095543172f91f691917bd6379c53", "patch": "@@ -5214,6 +5214,17 @@\n }\n   [(set_attr \"type\" \"fp\")])\n \n+;; Min/max for ISA 3.1 IEEE 128-bit floating point\n+(define_insn \"s<minmax><mode>3\"\n+  [(set (match_operand:IEEE128 0 \"altivec_register_operand\" \"=v\")\n+\t(fp_minmax:IEEE128\n+\t (match_operand:IEEE128 1 \"altivec_register_operand\" \"v\")\n+\t (match_operand:IEEE128 2 \"altivec_register_operand\" \"v\")))]\n+  \"TARGET_POWER10 && TARGET_FLOAT128_HW\"\n+  \"xs<minmax>cqp %0,%1,%2\"\n+  [(set_attr \"type\" \"vecfloat\")\n+   (set_attr \"size\" \"128\")])\n+\n ;; The conditional move instructions allow us to perform max and min operations\n ;; even when we don't have the appropriate max/min instruction using the FSEL\n ;; instruction."}, {"sha": "c71ba08c9f8eb6c1eee123b4f6d482ccdb3cf15d", "filename": "gcc/testsuite/gcc.target/powerpc/float128-minmax-2.c", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7d08043da935095543172f91f691917bd6379c53/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-minmax-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7d08043da935095543172f91f691917bd6379c53/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-minmax-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Ffloat128-minmax-2.c?ref=7d08043da935095543172f91f691917bd6379c53", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-require-effective-target ppc_float128_hw } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power10 -O2 -ffast-math\" } */\n+\n+#ifndef TYPE\n+#define TYPE _Float128\n+#endif\n+\n+/* Test that the fminf128/fmaxf128 functions generate if/then/else and not a\n+   call.  */\n+TYPE f128_min (TYPE a, TYPE b) { return __builtin_fminf128 (a, b); }\n+TYPE f128_max (TYPE a, TYPE b) { return __builtin_fmaxf128 (a, b); }\n+\n+/* { dg-final { scan-assembler {\\mxsmaxcqp\\M} } } */\n+/* { dg-final { scan-assembler {\\mxsmincqp\\M} } } */"}]}