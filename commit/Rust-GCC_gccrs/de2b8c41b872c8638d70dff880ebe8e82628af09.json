{"sha": "de2b8c41b872c8638d70dff880ebe8e82628af09", "node_id": "C_kwDOANBUbNoAKGRlMmI4YzQxYjg3MmM4NjM4ZDcwZGZmODgwZWJlOGU4MjYyOGFmMDk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-19T14:00:47Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-12-19T14:00:47Z"}, "message": "modula2: Don't treat % in Modula 2 messages specially\n\nOn top of the just posted patch, this patch makes sure that\nany % chars in message strings aren't treated as format chars.\nNone of these functions take variable number of arguments, so for\nmost of format specifiers there is nowhere to take arguments from,\nit is true that a couple of format specifiers don't take any\narguments - %%, %m, %<, %>, %' - so it is actually possible\nto use them, but one needs to verify that no other are emitted and\nthat what should be printed as % is really emitted as %%.\nIf the FE does that, then please ignore this patch, otherwise I think\nit is safer to do this.\n\n2022-12-19  Jakub Jelinek  <jakub@redhat.com>\n\n\t* gm2-gcc/m2linemap.cc (m2linemap_ErrorAt, m2linemap_ErrorAtf,\n\tm2linemap_WarningAtf, m2linemap_NoteAtf, m2linemap_internal_error):\n\tCall functions with \"%s\", message rather than just message, so that\n\t% chars in message aren't treated as format specifiers.", "tree": {"sha": "3722621d820adb8a237b63af551c53d5d5aadeb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3722621d820adb8a237b63af551c53d5d5aadeb1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/de2b8c41b872c8638d70dff880ebe8e82628af09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de2b8c41b872c8638d70dff880ebe8e82628af09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de2b8c41b872c8638d70dff880ebe8e82628af09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de2b8c41b872c8638d70dff880ebe8e82628af09/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "158b18ffa510105b239bd2f4a253ed33e21fcebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/158b18ffa510105b239bd2f4a253ed33e21fcebc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/158b18ffa510105b239bd2f4a253ed33e21fcebc"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "ba09c0b8c8db1722ed6a2aff783576e2737615b5", "filename": "gcc/m2/gm2-gcc/m2linemap.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/de2b8c41b872c8638d70dff880ebe8e82628af09/gcc%2Fm2%2Fgm2-gcc%2Fm2linemap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/de2b8c41b872c8638d70dff880ebe8e82628af09/gcc%2Fm2%2Fgm2-gcc%2Fm2linemap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fm2%2Fgm2-gcc%2Fm2linemap.cc?ref=de2b8c41b872c8638d70dff880ebe8e82628af09", "patch": "@@ -177,7 +177,7 @@ EXTERN\n void\n m2linemap_ErrorAt (location_t location, char *message)\n {\n-  error_at (location, message);\n+  error_at (location, \"%s\", message);\n }\n \n /* m2linemap_ErrorAtf - wraps up an error message.  */\n@@ -198,7 +198,7 @@ m2linemap_ErrorAtf_1 (location_t location, const char *message, ...)\n void\n m2linemap_ErrorAtf (location_t location, const char *message)\n {\n-  m2linemap_ErrorAtf_1 (location, message);\n+  m2linemap_ErrorAtf_1 (location, \"%s\", message);\n }\n \n /* m2linemap_WarningAtf - wraps up a warning message.  */\n@@ -219,7 +219,7 @@ m2linemap_WarningAtf_1 (location_t location, const char *message, ...)\n void\n m2linemap_WarningAtf (location_t location, const char *message)\n {\n-  m2linemap_WarningAtf_1 (location, message);\n+  m2linemap_WarningAtf_1 (location, \"%s\", message);\n }\n \n /* m2linemap_NoteAtf - wraps up a note message.  */\n@@ -240,15 +240,15 @@ m2linemap_NoteAtf_1 (location_t location, const char *message, ...)\n void\n m2linemap_NoteAtf (location_t location, const char *message)\n {\n-  m2linemap_NoteAtf_1 (location, message);\n+  m2linemap_NoteAtf_1 (location, \"%s\", message);\n }\n \n /* m2linemap_internal_error - allow Modula-2 to use the GCC internal error.  */\n \n void\n m2linemap_internal_error (const char *message)\n {\n-  internal_error (message);\n+  internal_error (\"%s\", message);\n }\n \n /* UnknownLocation - return the predefined location representing an"}]}