{"sha": "430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDMwMDAyZTFkOTdjYTdiMDJkNmM5YmFhMTM3OGJkZGE0ZmJmNzUyNw==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2019-01-09T21:41:36Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2019-01-09T21:41:36Z"}, "message": "PR other/16615 [3/5]\n\n2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tPR other/16615 [3/5]\n\n\tgcc/testsuite/\n\t* g++.dg/lto/odr-1_1.C: Update diagnostic message patterns to replace\n\t\"can not\" with \"cannot\".\n\t* gfortran.dg/common_15.f90: Likewise.\n\t* gfortran.dg/derived_result_2.f90: Likewise.\n\t* gfortran.dg/do_check_6.f90: Likewise.\n\t* gfortran.dg/namelist_args.f90: Likewise.\n\t* gfortran.dg/negative_unit_check.f90: Likewise.\n\t* gfortran.dg/pure_formal_3.f90: Likewise.\n\t* obj-c++.dg/attributes/method-attribute-2.mm: Likewise.\n\t* obj-c++.dg/exceptions-3.mm: Likewise.\n\t* obj-c++.dg/exceptions-4.mm: Likewise.\n\t* obj-c++.dg/exceptions-5.mm: Likewise.\n\t* obj-c++.dg/property/at-property-23.mm: Likewise.\n\t* obj-c++.dg/property/dotsyntax-17.mm: Likewise.\n\t* obj-c++.dg/property/property-neg-7.mm: Likewise.\n\t* objc.dg/attributes/method-attribute-2.m: Likewise.\n\t* objc.dg/exceptions-3.m: Likewise.\n\t* objc.dg/exceptions-4.m: Likewise.\n\t* objc.dg/exceptions-5.m: Likewise.\n\t* objc.dg/param-1.m: Likewise.\n\t* objc.dg/property/at-property-23.m: Likewise.\n\t* objc.dg/property/dotsyntax-17.m: Likewise.\n\t* objc.dg/property/property-neg-7.m: Likewise.\n\nFrom-SVN: r267785", "tree": {"sha": "a5bdde09edf75dbcfac30acd9945cc5ae42bb3ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a5bdde09edf75dbcfac30acd9945cc5ae42bb3ca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "html_url": "https://github.com/Rust-GCC/gccrs/commit/430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "adcb167e030e016946c3dbf6fcfc81093ca6feea", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/adcb167e030e016946c3dbf6fcfc81093ca6feea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/adcb167e030e016946c3dbf6fcfc81093ca6feea"}], "stats": {"total": 134, "additions": 81, "deletions": 53}, "files": [{"sha": "fc8395f76f63457d943c67344abdbf5ef9dbf8e5", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -1,3 +1,31 @@\n+2019-01-09  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\tPR other/16615\n+\n+\t* g++.dg/lto/odr-1_1.C: Update diagnostic message patterns to replace\n+\t\"can not\" with \"cannot\".\n+\t* gfortran.dg/common_15.f90: Likewise.\n+\t* gfortran.dg/derived_result_2.f90: Likewise.\n+\t* gfortran.dg/do_check_6.f90: Likewise.\n+\t* gfortran.dg/namelist_args.f90: Likewise.\n+\t* gfortran.dg/negative_unit_check.f90: Likewise.\n+\t* gfortran.dg/pure_formal_3.f90: Likewise.\n+\t* obj-c++.dg/attributes/method-attribute-2.mm: Likewise.\n+\t* obj-c++.dg/exceptions-3.mm: Likewise.\n+\t* obj-c++.dg/exceptions-4.mm: Likewise.\n+\t* obj-c++.dg/exceptions-5.mm: Likewise.\n+\t* obj-c++.dg/property/at-property-23.mm: Likewise.\n+\t* obj-c++.dg/property/dotsyntax-17.mm: Likewise.\n+\t* obj-c++.dg/property/property-neg-7.mm: Likewise.\n+\t* objc.dg/attributes/method-attribute-2.m: Likewise.\n+\t* objc.dg/exceptions-3.m: Likewise.\n+\t* objc.dg/exceptions-4.m: Likewise.\n+\t* objc.dg/exceptions-5.m: Likewise.\n+\t* objc.dg/param-1.m: Likewise.\n+\t* objc.dg/property/at-property-23.m: Likewise.\n+\t* objc.dg/property/dotsyntax-17.m: Likewise.\n+\t* objc.dg/property/property-neg-7.m: Likewise.\n+\n 2019-01-09  Thomas Koenig  <tkoenig@gcc.gnu.org>\n \n \tPR fortran/68426"}, {"sha": "494436a46c6547e1d23128bbdb04e0a067752c9a", "filename": "gcc/testsuite/g++.dg/lto/odr-1_1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-1_1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-1_1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fodr-1_1.C?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -1,5 +1,5 @@\n namespace {\n-  struct b; // { dg-lto-message \"type 'struct b' defined in anonymous namespace can not match across the translation unit boundary\" }\n+  struct b; // { dg-lto-message \"type 'struct b' defined in anonymous namespace cannot match across the translation unit boundary\" }\n  }\n enum vals {aa,bb,cc}; // { dg-lto-message \"an enum with different value name is defined in another translation unit\" }\n struct a { // { dg-lto-message \"a different type is defined in another translation unit\" }"}, {"sha": "9723bd1a8285d48474dbe13f5c4304a135b8c50b", "filename": "gcc/testsuite/gfortran.dg/common_15.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_15.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_15.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fcommon_15.f90?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -4,6 +4,6 @@\n !\n ! Contributed by Vittorio Zecca <zeccav@gmail.com>\n \n-common/sub/ a  ! { dg-error \"can not have the EXTERNAL attribute\" }\n+common/sub/ a  ! { dg-error \"cannot have the EXTERNAL attribute\" }\n external sub\n end"}, {"sha": "60cad8ddcadb2e9b6a9d825cc7c8d1088c9060d4", "filename": "gcc/testsuite/gfortran.dg/derived_result_2.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_result_2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_result_2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fderived_result_2.f90?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -37,9 +37,9 @@ type(field) function new_field()\n  subroutine test\n    integer :: i\n    type(grid) :: g\n-   g = new_field()%mesh              ! { dg-error \"can not be a function reference\" }\n+   g = new_field()%mesh              ! { dg-error \"cannot be a function reference\" }\n    call new_field()%mesh%new_grid()  ! { dg-error \"Syntax error\" }\n-   i = new_field() % mesh%new_int()  ! { dg-error \"can not be a function reference\" }\n+   i = new_field() % mesh%new_int()  ! { dg-error \"cannot be a function reference\" }\n  end subroutine\n \n end module"}, {"sha": "19eff8de5b4a9370e89740e6877a5dc243dd1975", "filename": "gcc/testsuite/gfortran.dg/do_check_6.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_6.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_6.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdo_check_6.f90?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -26,10 +26,10 @@ subroutine test1()\n   end do\n \n   ! Invalid: io-implied-do\n-  print *, (i, i=1,5 ) ! { dg-error \"PROTECTED and can not appear in a variable definition context .iterator variable.\" }\n+  print *, (i, i=1,5 ) ! { dg-error \"PROTECTED and cannot appear in a variable definition context .iterator variable.\" }\n \n   ! Invalid: do-variable in a do-stmt\n-  do i = 1, 5 ! { dg-error \"PROTECTED and can not appear in a variable definition context .iterator variable.\" }\n+  do i = 1, 5 ! { dg-error \"PROTECTED and cannot appear in a variable definition context .iterator variable.\" }\n   end do\n end subroutine test1\n "}, {"sha": "077e2eb783381f864e0edc101fdf686a98a52dae", "filename": "gcc/testsuite/gfortran.dg/namelist_args.f90", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_args.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_args.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnamelist_args.f90?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -11,8 +11,8 @@ function j(k1, k2, k3)\n end function\n program pr50555\n   namelist /i/ j\n-  call g(k,l,i) ! { dg-error \"can not be an argument\" }\n-  f(k,l,i)=0    ! { dg-error \"can not be an argument\" }\n-  h = j(k,l,i)  ! { dg-error \"can not be an argument\" }\n+  call g(k,l,i) ! { dg-error \"cannot be an argument\" }\n+  f(k,l,i)=0    ! { dg-error \"cannot be an argument\" }\n+  h = j(k,l,i)  ! { dg-error \"cannot be an argument\" }\n end program\n ! Note: -std=gnu needed because line 15 function statement is obsolescent"}, {"sha": "3386676125229c61f5fc53545d4de83d9e53f0ff", "filename": "gcc/testsuite/gfortran.dg/negative_unit_check.f90", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative_unit_check.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative_unit_check.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fnegative_unit_check.f90?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -1,6 +1,6 @@\n ! { dg-do compile }\n !  Test case from PR61933.\n    LOGICAL :: file_exists\n-   INQUIRE(UNIT=-1,EXIST=file_exists)! { dg-error \"can not be -1\" }\n-   INQUIRE(UNIT=-2,EXIST=file_exists)! { dg-error \"can not be -2\" }\n+   INQUIRE(UNIT=-1,EXIST=file_exists)! { dg-error \"cannot be -1\" }\n+   INQUIRE(UNIT=-2,EXIST=file_exists)! { dg-error \"cannot be -2\" }\n END"}, {"sha": "6e3b8585058fa20962b733aef3bcc082f48ca278", "filename": "gcc/testsuite/gfortran.dg/pure_formal_3.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_formal_3.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_formal_3.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpure_formal_3.f90?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -12,7 +12,7 @@ end module m\n \n pure subroutine foo()\n   use m\n-  call bar(x) ! { dg-error \"can not appear in a variable definition context\" }\n+  call bar(x) ! { dg-error \"cannot appear in a variable definition context\" }\n   call bar2(x) ! { dg-error \"is local to a PURE procedure and has the POINTER attribute\" }\n   call bb(y) ! { dg-error \"is local to a PURE procedure and has the POINTER attribute\" }\n contains"}, {"sha": "06dfa2028310c8c8e9b4b85af7357c06f54b7027", "filename": "gcc/testsuite/obj-c++.dg/attributes/method-attribute-2.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fattributes%2Fmethod-attribute-2.mm?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -14,7 +14,7 @@ - (int) depunusedarg:(int) __attribute__((unused)) uarg __attribute__((deprecate\n @end\n \n @implementation obj\n-- (int) depmth __attribute__((deprecated)) { return var; }  /* { dg-warning \"method attributes can not be specified in @implementation context\" } */\n+- (int) depmth __attribute__((deprecated)) { return var; }  /* { dg-warning \"method attributes cannot be specified in @implementation context\" } */\n - (int) depmtharg:(int) iarg { return var + iarg ; }\n - (int) unusedarg:(int) __attribute__((unused)) uarg { return var; }\n - (int) depunusedarg:(int) __attribute__((unused)) uarg { return var; }"}, {"sha": "90a657c8d7046fcb3c2dfa2872c75e26b38b0bf7", "filename": "gcc/testsuite/obj-c++.dg/exceptions-3.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-3.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-3.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-3.mm?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -51,7 +51,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (id <MyProtocol> x) /* { dg-error \"@catch parameter can not be protocol-qualified\" } */\n+  @catch (id <MyProtocol> x) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -63,7 +63,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObject <MyProtocol> *x)  /* { dg-error \"@catch parameter can not be protocol-qualified\" } */\n+  @catch (MyObject <MyProtocol> *x)  /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -86,7 +86,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObjectTypedef <MyProtocol> *x) /* { dg-error \"@catch parameter can not be protocol-qualified\" } */\n+  @catch (MyObjectTypedef <MyProtocol> *x) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }"}, {"sha": "ccdeb34a01586e046c1eaed44ef8f703c6cb68c3", "filename": "gcc/testsuite/obj-c++.dg/exceptions-4.mm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-4.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-4.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-4.mm?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -44,7 +44,7 @@ int test (id object)\n       dummy++;\n     }\n   @catch (id <MyProtocol x) /* { dg-error \"expected ... before .x.\" } */\n-    {                       /* { dg-error \"@catch parameter can not be protocol-qualified\" \"\" { target *-*-* } .-1 } */\n+    {                       /* { dg-error \"@catch parameter cannot be protocol-qualified\" \"\" { target *-*-* } .-1 } */\n       dummy++;\n     }\n   @catch MyObject *x       /* { dg-error \"expected ... before .MyObject.\" } */"}, {"sha": "01bf10843b7d6e2f98e34f8dde7f0fc2de19615f", "filename": "gcc/testsuite/obj-c++.dg/exceptions-5.mm", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-5.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-5.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fexceptions-5.mm?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -51,7 +51,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (id <MyProtocol>) /* { dg-error \"@catch parameter can not be protocol-qualified\" } */\n+  @catch (id <MyProtocol>) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -63,7 +63,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObject <MyProtocol> *)  /* { dg-error \"@catch parameter can not be protocol-qualified\" } */\n+  @catch (MyObject <MyProtocol> *)  /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -87,7 +87,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObjectTypedef <MyProtocol> *) /* { dg-error \"@catch parameter can not be protocol-qualified\" } */\n+  @catch (MyObjectTypedef <MyProtocol> *) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }"}, {"sha": "009caf9fd2c917f41c4efc615f310e962269b059", "filename": "gcc/testsuite/obj-c++.dg/property/at-property-23.mm", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-23.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-23.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fat-property-23.mm?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -11,8 +11,8 @@ @interface MyRootClass\n {\n   Class isa;\n }\n-@property int a[8]; /* { dg-error \"property can not be an array\" } */\n+@property int a[8]; /* { dg-error \"property cannot be an array\" } */\n @property int b:8;  /* { dg-error \"expected\" } */\n-@property int c[];  /* { dg-error \"property can not be an array\" } */\n+@property int c[];  /* { dg-error \"property cannot be an array\" } */\n /* { dg-error \"forbids flexible array member\" \"flexible array member\" { target *-*-* } .-1 } */\n @end"}, {"sha": "ce015982201492bfef2847f10094e44d5fdd4a37", "filename": "gcc/testsuite/obj-c++.dg/property/dotsyntax-17.mm", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-17.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-17.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fdotsyntax-17.mm?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -35,19 +35,19 @@ int main (void)\n {\n   MyRootClass *object = [[MyRootClass alloc] init];\n \n-  object.count = 10; /* { dg-error \"readonly property can not be set\" } */\n+  object.count = 10; /* { dg-error \"readonly property cannot be set\" } */\n   if (object.count != 10) /* Ok */\n     abort ();\n \n   /* Test errors when trying to change a readonly property using\n      pre/post increment/decrement operators.  */\n-  object.count++; /* { dg-error \"readonly property can not be set\" } */\n+  object.count++; /* { dg-error \"readonly property cannot be set\" } */\n \n-  ++object.count; /* { dg-error \"readonly property can not be set\" } */\n+  ++object.count; /* { dg-error \"readonly property cannot be set\" } */\n \n-  object.count--; /* { dg-error \"readonly property can not be set\" } */\n+  object.count--; /* { dg-error \"readonly property cannot be set\" } */\n \n-  --object.count; /* { dg-error \"readonly property can not be set\" } */\n+  --object.count; /* { dg-error \"readonly property cannot be set\" } */\n \n   /* Test errors when trying to change something using Objective-C 2.0\n      dot-syntax but there is a setter but no getter.  */"}, {"sha": "245a807f448362da5710eae49664859730ff5a8e", "filename": "gcc/testsuite/obj-c++.dg/property/property-neg-7.mm", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-7.mm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-7.mm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobj-c%2B%2B.dg%2Fproperty%2Fproperty-neg-7.mm?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -13,8 +13,8 @@ @implementation NSArray\n \n void foo (NSArray *ans[], id pid, id apid[], int i) {\n     NSArray *test;\n-    test.count = 1; /* { dg-error \"readonly property can not be set\" } */\n-    ((NSArray *)pid).count = 1;  /* { dg-error \"readonly property can not be set\" } */\n-    ((NSArray *)apid[i]).count = 1; /* { dg-error \"readonly property can not be set\" } */\n-    ans[i].count = 3; /* { dg-error \"readonly property can not be set\" } */\n+    test.count = 1; /* { dg-error \"readonly property cannot be set\" } */\n+    ((NSArray *)pid).count = 1;  /* { dg-error \"readonly property cannot be set\" } */\n+    ((NSArray *)apid[i]).count = 1; /* { dg-error \"readonly property cannot be set\" } */\n+    ans[i].count = 3; /* { dg-error \"readonly property cannot be set\" } */\n }"}, {"sha": "06dfa2028310c8c8e9b4b85af7357c06f54b7027", "filename": "gcc/testsuite/objc.dg/attributes/method-attribute-2.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fattributes%2Fmethod-attribute-2.m?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -14,7 +14,7 @@ - (int) depunusedarg:(int) __attribute__((unused)) uarg __attribute__((deprecate\n @end\n \n @implementation obj\n-- (int) depmth __attribute__((deprecated)) { return var; }  /* { dg-warning \"method attributes can not be specified in @implementation context\" } */\n+- (int) depmth __attribute__((deprecated)) { return var; }  /* { dg-warning \"method attributes cannot be specified in @implementation context\" } */\n - (int) depmtharg:(int) iarg { return var + iarg ; }\n - (int) unusedarg:(int) __attribute__((unused)) uarg { return var; }\n - (int) depunusedarg:(int) __attribute__((unused)) uarg { return var; }"}, {"sha": "5548a39a08c10255b95a425fdd265c506ee76f24", "filename": "gcc/testsuite/objc.dg/exceptions-3.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-3.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-3.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-3.m?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -51,7 +51,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (id <MyProtocol> x) /* { dg-error \"@catch parameter can not be protocol-qualified\" } */\n+  @catch (id <MyProtocol> x) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -63,7 +63,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObject <MyProtocol> *x)  /* { dg-error \"@catch parameter can not be protocol-qualified\" } */\n+  @catch (MyObject <MyProtocol> *x)  /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -87,7 +87,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObjectTypedef <MyProtocol> *x) /* { dg-error \"@catch parameter can not be protocol-qualified\" } */\n+  @catch (MyObjectTypedef <MyProtocol> *x) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }"}, {"sha": "5db60e34aca97cf44d7ff383d123036559bf26da", "filename": "gcc/testsuite/objc.dg/exceptions-4.m", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-4.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-4.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-4.m?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -44,7 +44,7 @@ int test (id object)\n       dummy++;\n     }\n   @catch (id <MyProtocol x) /* { dg-error \"expected ... before .x.\" } */\n-    {                       /* { dg-error \"@catch parameter can not be protocol-qualified\" \"\" { target *-*-* } .-1 } */\n+    {                       /* { dg-error \"@catch parameter cannot be protocol-qualified\" \"\" { target *-*-* } .-1 } */\n       dummy++;\n     }\n   @catch MyObject *x       /* { dg-error \"expected ... before .MyObject.\" } */"}, {"sha": "402aa114ade4eaf0e61eb112f41d94dc80ab4250", "filename": "gcc/testsuite/objc.dg/exceptions-5.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-5.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-5.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fexceptions-5.m?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -51,7 +51,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (id <MyProtocol>) /* { dg-error \"@catch parameter can not be protocol-qualified\" } */\n+  @catch (id <MyProtocol>) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -63,7 +63,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObject <MyProtocol> *)  /* { dg-error \"@catch parameter can not be protocol-qualified\" } */\n+  @catch (MyObject <MyProtocol> *)  /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }\n@@ -87,7 +87,7 @@ int test (id object)\n     }\n \n   @try { @throw object; }\n-  @catch (MyObjectTypedef <MyProtocol> *) /* { dg-error \"@catch parameter can not be protocol-qualified\" } */\n+  @catch (MyObjectTypedef <MyProtocol> *) /* { dg-error \"@catch parameter cannot be protocol-qualified\" } */\n     {\n       dummy++;\n     }"}, {"sha": "9dbf6e3fcd94935de805a6f753fac205b0fffe32", "filename": "gcc/testsuite/objc.dg/param-1.m", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fparam-1.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fparam-1.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fparam-1.m?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -9,11 +9,11 @@ @implementation foo\n @end\n \n @interface bar\n--(void) my_method:(foo) my_param; /* { dg-error \"can not use an object as parameter to a method\" } */\n+-(void) my_method:(foo) my_param; /* { dg-error \"cannot use an object as parameter to a method\" } */\n @end\n \n @implementation bar\n--(void) my_method:(foo) my_param /* { dg-error \"can not use an object as parameter to a method\" } */\n+-(void) my_method:(foo) my_param /* { dg-error \"cannot use an object as parameter to a method\" } */\n {\n }\n @end"}, {"sha": "3f6c6098df7f2d600ed8691821988da06ff82255", "filename": "gcc/testsuite/objc.dg/property/at-property-23.m", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-23.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-23.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fat-property-23.m?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -11,7 +11,7 @@ @interface MyRootClass\n {\n   Class isa;\n }\n-@property int a[8]; /* { dg-error \"property can not be an array\" } */\n-@property int b:8;  /* { dg-error \"property can not be a bit-field\" } */\n-@property int c[];  /* { dg-error \"property can not be an array\" } */\n+@property int a[8]; /* { dg-error \"property cannot be an array\" } */\n+@property int b:8;  /* { dg-error \"property cannot be a bit-field\" } */\n+@property int c[];  /* { dg-error \"property cannot be an array\" } */\n @end"}, {"sha": "ce015982201492bfef2847f10094e44d5fdd4a37", "filename": "gcc/testsuite/objc.dg/property/dotsyntax-17.m", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-17.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-17.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fdotsyntax-17.m?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -35,19 +35,19 @@ int main (void)\n {\n   MyRootClass *object = [[MyRootClass alloc] init];\n \n-  object.count = 10; /* { dg-error \"readonly property can not be set\" } */\n+  object.count = 10; /* { dg-error \"readonly property cannot be set\" } */\n   if (object.count != 10) /* Ok */\n     abort ();\n \n   /* Test errors when trying to change a readonly property using\n      pre/post increment/decrement operators.  */\n-  object.count++; /* { dg-error \"readonly property can not be set\" } */\n+  object.count++; /* { dg-error \"readonly property cannot be set\" } */\n \n-  ++object.count; /* { dg-error \"readonly property can not be set\" } */\n+  ++object.count; /* { dg-error \"readonly property cannot be set\" } */\n \n-  object.count--; /* { dg-error \"readonly property can not be set\" } */\n+  object.count--; /* { dg-error \"readonly property cannot be set\" } */\n \n-  --object.count; /* { dg-error \"readonly property can not be set\" } */\n+  --object.count; /* { dg-error \"readonly property cannot be set\" } */\n \n   /* Test errors when trying to change something using Objective-C 2.0\n      dot-syntax but there is a setter but no getter.  */"}, {"sha": "245a807f448362da5710eae49664859730ff5a8e", "filename": "gcc/testsuite/objc.dg/property/property-neg-7.m", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-7.m", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/430002e1d97ca7b02d6c9baa1378bdda4fbf7527/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-7.m", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fobjc.dg%2Fproperty%2Fproperty-neg-7.m?ref=430002e1d97ca7b02d6c9baa1378bdda4fbf7527", "patch": "@@ -13,8 +13,8 @@ @implementation NSArray\n \n void foo (NSArray *ans[], id pid, id apid[], int i) {\n     NSArray *test;\n-    test.count = 1; /* { dg-error \"readonly property can not be set\" } */\n-    ((NSArray *)pid).count = 1;  /* { dg-error \"readonly property can not be set\" } */\n-    ((NSArray *)apid[i]).count = 1; /* { dg-error \"readonly property can not be set\" } */\n-    ans[i].count = 3; /* { dg-error \"readonly property can not be set\" } */\n+    test.count = 1; /* { dg-error \"readonly property cannot be set\" } */\n+    ((NSArray *)pid).count = 1;  /* { dg-error \"readonly property cannot be set\" } */\n+    ((NSArray *)apid[i]).count = 1; /* { dg-error \"readonly property cannot be set\" } */\n+    ans[i].count = 3; /* { dg-error \"readonly property cannot be set\" } */\n }"}]}