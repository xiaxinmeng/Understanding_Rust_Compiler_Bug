{"sha": "c77fbfbea6027e29a02333323daf3fec50b8b9a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzc3ZmJmYmVhNjAyN2UyOWEwMjMzMzMyM2RhZjNmZWM1MGI4YjlhMQ==", "commit": {"author": {"name": "Geoffrey Keating", "email": "geoffk@redhat.com", "date": "2001-07-19T19:46:29Z"}, "committer": {"name": "Geoffrey Keating", "email": "geoffk@gcc.gnu.org", "date": "2001-07-19T19:46:29Z"}, "message": "reload1.c (eliminate_regs_in_insn): When updating a set to the frame pointer to the hardware frame pointer...\n\n\t* reload1.c (eliminate_regs_in_insn): When updating a set\n\tto the frame pointer to the hardware frame pointer, perform\n\tthe update always not just when REPLACE is set.\n\nFrom-SVN: r44161", "tree": {"sha": "1ce032c40e90048f6e69e6865f359ae1856bde3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ce032c40e90048f6e69e6865f359ae1856bde3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c77fbfbea6027e29a02333323daf3fec50b8b9a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77fbfbea6027e29a02333323daf3fec50b8b9a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c77fbfbea6027e29a02333323daf3fec50b8b9a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c77fbfbea6027e29a02333323daf3fec50b8b9a1/comments", "author": null, "committer": null, "parents": [{"sha": "eb4d554e37b3ba7f6c1c67f25f199ccbac0da977", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb4d554e37b3ba7f6c1c67f25f199ccbac0da977", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb4d554e37b3ba7f6c1c67f25f199ccbac0da977"}], "stats": {"total": 41, "additions": 26, "deletions": 15}, "files": [{"sha": "0a967bccd206fcb10d2d60706dd79ff97e292a51", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77fbfbea6027e29a02333323daf3fec50b8b9a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77fbfbea6027e29a02333323daf3fec50b8b9a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c77fbfbea6027e29a02333323daf3fec50b8b9a1", "patch": "@@ -1,5 +1,9 @@\n 2001-07-19  Geoffrey Keating  <geoffk@redhat.com>\n \n+\t* reload1.c (eliminate_regs_in_insn): When updating a set\n+\tto the frame pointer to the hardware frame pointer, perform\n+\tthe update always not just when REPLACE is set.\n+\n \t* reload1.c (choose_reload_regs): Don't inherit a reload\n \tthat crosses multiple registers if registers past the first\n \tdon't fit in the desired class."}, {"sha": "ced823b0c1b58c8a2500af41214417ff9e4dbff0", "filename": "gcc/reload1.c", "status": "modified", "additions": 22, "deletions": 15, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c77fbfbea6027e29a02333323daf3fec50b8b9a1/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c77fbfbea6027e29a02333323daf3fec50b8b9a1/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=c77fbfbea6027e29a02333323daf3fec50b8b9a1", "patch": "@@ -2962,22 +2962,29 @@ eliminate_regs_in_insn (insn, replace)\n \n \t\tif (ok)\n \t\t  {\n-\t\t    if (replace)\n+\t\t    rtx src\n+\t\t      = plus_constant (ep->to_rtx, offset - ep->offset);\n+\n+\t\t    new_body = old_body;\n+\t\t    if (! replace)\n+\t\t      {\n+\t\t\tnew_body = copy_insn (old_body);\n+\t\t\tif (REG_NOTES (insn))\n+\t\t\t  REG_NOTES (insn) = copy_insn_1 (REG_NOTES (insn));\n+\t\t      }\n+\t\t    PATTERN (insn) = new_body;\n+\t\t    old_set = single_set (insn);\n+\n+\t\t    /* First see if this insn remains valid when we\n+\t\t       make the change.  If not, keep the INSN_CODE\n+\t\t       the same and let reload fit it up.  */\n+\t\t    validate_change (insn, &SET_SRC (old_set), src, 1);\n+\t\t    validate_change (insn, &SET_DEST (old_set),\n+\t\t\t\t     ep->to_rtx, 1);\n+\t\t    if (! apply_change_group ())\n \t\t      {\n-\t\t\trtx src\n-\t\t\t  = plus_constant (ep->to_rtx, offset - ep->offset);\n-\n-\t\t\t/* First see if this insn remains valid when we\n-\t\t\t   make the change.  If not, keep the INSN_CODE\n-\t\t\t   the same and let reload fit it up.  */\n-\t\t\tvalidate_change (insn, &SET_SRC (old_set), src, 1);\n-\t\t\tvalidate_change (insn, &SET_DEST (old_set),\n-\t\t\t\t\t ep->to_rtx, 1);\n-\t\t\tif (! apply_change_group ())\n-\t\t\t  {\n-\t\t\t    SET_SRC (old_set) = src;\n-\t\t\t    SET_DEST (old_set) = ep->to_rtx;\n-\t\t\t  }\n+\t\t\tSET_SRC (old_set) = src;\n+\t\t\tSET_DEST (old_set) = ep->to_rtx;\n \t\t      }\n \n \t\t    val = 1;"}]}