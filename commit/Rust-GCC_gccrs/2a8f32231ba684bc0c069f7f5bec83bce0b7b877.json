{"sha": "2a8f32231ba684bc0c069f7f5bec83bce0b7b877", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmE4ZjMyMjMxYmE2ODRiYzBjMDY5ZjdmNWJlYzgzYmNlMGI3Yjg3Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2016-01-14T23:12:53Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2016-01-14T23:12:53Z"}, "message": "re PR rtl-optimization/69014 (gcc.c-torture/execute/991023-1.c FAILs with -Os -fmodulo-sched -fno-tree-vrp)\n\nPR rtl-opt/69014\n\n  * loop-doloop.c (record_reg_sets): New.\n  (doloop_optimize): Reject the transform if the sequence\n  clobbers registers live at the end of the loop block.\n  (doloop_optimize_loops): Enable df_live if needed.\n\nFrom-SVN: r232395", "tree": {"sha": "c7675675e4671a600acec3cae6ba71f6d60be13f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c7675675e4671a600acec3cae6ba71f6d60be13f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2a8f32231ba684bc0c069f7f5bec83bce0b7b877", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8f32231ba684bc0c069f7f5bec83bce0b7b877", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2a8f32231ba684bc0c069f7f5bec83bce0b7b877", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2a8f32231ba684bc0c069f7f5bec83bce0b7b877/comments", "author": null, "committer": null, "parents": [{"sha": "c47eaca68cc88f241d3e301acb755417e73414f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c47eaca68cc88f241d3e301acb755417e73414f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c47eaca68cc88f241d3e301acb755417e73414f5"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "790662511d1ba60de97545e6b4f9f0586f7c3adb", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8f32231ba684bc0c069f7f5bec83bce0b7b877/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8f32231ba684bc0c069f7f5bec83bce0b7b877/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2a8f32231ba684bc0c069f7f5bec83bce0b7b877", "patch": "@@ -1,3 +1,11 @@\n+2016-01-14  Richard Henderson  <rth@redhat.com>\n+\n+\tPR rtl-opt/69014\n+\t* loop-doloop.c (record_reg_sets): New.\n+\t(doloop_optimize): Reject the transform if the sequence\n+\tclobbers registers live at the end of the loop block.\n+\t(doloop_optimize_loops): Enable df_live if needed. \n+\n 2016-01-14  Michael Meissner  <meissner@linux.vnet.ibm.com>\n \n \t* config/rs6000/rs6000-builtin.def: Revert 2016-01-13 change."}, {"sha": "940c966dc5a8b6b0e2d7d6204ed9ebc836e8ee3f", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2a8f32231ba684bc0c069f7f5bec83bce0b7b877/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2a8f32231ba684bc0c069f7f5bec83bce0b7b877/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=2a8f32231ba684bc0c069f7f5bec83bce0b7b877", "patch": "@@ -34,6 +34,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"params.h\"\n #include \"dumpfile.h\"\n #include \"loop-unroll.h\"\n+#include \"regs.h\"\n+#include \"df.h\"\n \n /* This module is used to modify loops with a determinable number of\n    iterations to use special low-overhead looping instructions.\n@@ -573,6 +575,27 @@ doloop_modify (struct loop *loop, struct niter_desc *desc,\n     }\n }\n \n+/* Called through note_stores.  */\n+\n+static void\n+record_reg_sets (rtx x, const_rtx pat ATTRIBUTE_UNUSED, void *data)\n+{\n+  bitmap mod = (bitmap)data;\n+  if (REG_P (x))\n+    {\n+      unsigned int regno = REGNO (x);\n+      if (HARD_REGISTER_P (x))\n+\t{\n+\t  unsigned int end_regno = end_hard_regno (GET_MODE (x), regno);\n+\t  do\n+\t    bitmap_set_bit (mod, regno);\n+\t  while (++regno < end_regno);\n+\t}\n+      else\n+\tbitmap_set_bit (mod, regno);\n+    }\n+}\n+\n /* Process loop described by LOOP validating that the loop is suitable for\n    conversion to use a low overhead looping instruction, replacing the jump\n    insn where suitable.  Returns true if the loop was successfully\n@@ -706,6 +729,26 @@ doloop_optimize (struct loop *loop)\n       return false;\n     }\n \n+  /* Ensure that the new sequence doesn't clobber a register that\n+     is live at the end of the block.  */\n+  {\n+    bitmap modified = BITMAP_ALLOC (NULL);\n+\n+    for (rtx_insn *i = doloop_seq; i != NULL; i = NEXT_INSN (i))\n+      note_stores (PATTERN (i), record_reg_sets, modified);\n+\n+    basic_block loop_end = desc->out_edge->src;\n+    bool fail = bitmap_intersect_p (df_get_live_out (loop_end), modified);\n+    BITMAP_FREE (modified);\n+\n+    if (fail)\n+      {\n+\tif (dump_file)\n+\t  fprintf (dump_file, \"Doloop: doloop pattern clobbers live out\\n\");\n+\treturn false;\n+      }\n+  }\n+\n   doloop_modify (loop, desc, doloop_seq, condition, count);\n   return true;\n }\n@@ -717,11 +760,20 @@ doloop_optimize_loops (void)\n {\n   struct loop *loop;\n \n+  if (optimize == 1)\n+    {\n+      df_live_add_problem ();\n+      df_live_set_all_dirty ();\n+    }\n+\n   FOR_EACH_LOOP (loop, 0)\n     {\n       doloop_optimize (loop);\n     }\n \n+  if (optimize == 1)\n+    df_remove_problem (df_live);\n+\n   iv_analysis_done ();\n \n   checking_verify_loop_structure ();"}]}