{"sha": "1853aadde2b24bc529a21a3fbe2b0acb2ba4dde1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTg1M2FhZGRlMmIyNGJjNTI5YTIxYTNmYmUyYjBhY2IyYmE0ZGRlMQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-06T22:44:52Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1996-06-06T22:44:52Z"}, "message": "Whitespace, formatting, and spelling fixes in comments.\n\nFrom-SVN: r12187", "tree": {"sha": "fe06028d4a3c60d6223b064e2663cc3572f8e5e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe06028d4a3c60d6223b064e2663cc3572f8e5e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1853aadde2b24bc529a21a3fbe2b0acb2ba4dde1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1853aadde2b24bc529a21a3fbe2b0acb2ba4dde1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1853aadde2b24bc529a21a3fbe2b0acb2ba4dde1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1853aadde2b24bc529a21a3fbe2b0acb2ba4dde1/comments", "author": null, "committer": null, "parents": [{"sha": "69685820b3ac43bcf07ae609b0c1abbadc31753e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/69685820b3ac43bcf07ae609b0c1abbadc31753e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/69685820b3ac43bcf07ae609b0c1abbadc31753e"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "44852cd0809e10b99f6dba8e733f27b7d08e4300", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1853aadde2b24bc529a21a3fbe2b0acb2ba4dde1/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1853aadde2b24bc529a21a3fbe2b0acb2ba4dde1/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=1853aadde2b24bc529a21a3fbe2b0acb2ba4dde1", "patch": "@@ -2797,14 +2797,14 @@ print_operand (file, x, code)\n \t    }\n \t  abort ();\n \n-      /* This is used by the conditional move instructions.  */\n-    case 'C':\n-\tput_condition_code (GET_CODE (x), file);\n-\treturn;\n-      /* like above but reverse condition */\n-    case 'N':\n-\tput_condition_code (reverse_condition (GET_CODE (x)), file);\n-\treturn;\n+\t  /* This is used by the conditional move instructions.  */\n+\tcase 'C':\n+\t  put_condition_code (GET_CODE (x), file);\n+\t  return;\n+\t  /* like above, but reverse condition */\n+\tcase 'N':\n+\t  put_condition_code (reverse_condition (GET_CODE (x)), file);\n+\t  return;\n \n \tdefault:\n \t  {\n@@ -4542,7 +4542,7 @@ output_strlen_unroll (operands)\n \n     /* Generate loop to check 4 bytes at a time */\n     /* IMHO it is not a good idea to align this loop.  It gives only */\n-    /* huge programms, but does not help to speed up */\n+    /* huge programs, but does not help to speed up */\n   /* ASM_OUTPUT_LOOP_ALIGN (asm_out_file); */\n   ASM_OUTPUT_INTERNAL_LABEL (asm_out_file, \"L\", CODE_LABEL_NUMBER (xops[8]));\n \n@@ -4551,11 +4551,11 @@ output_strlen_unroll (operands)\n \n   if (QI_REG_P (xops[1]))\n     {\n- \t/* on i586 it is faster to compare the hi- and lo- part */\n-\t/* as a kind of lookahead.  If xoring both is zero, then one */\n-\t/* of both *could* be zero, otherwith none of both is zero */\n-\t/* this saves one instruction, on i486 this is slower */\n-\t/* testet with P-90, i486DX2-66, AMD486DX2-66 */\n+      /* On i586 it is faster to combine the hi- and lo- part as\n+\t a kind of lookahead.  If anding both yields zero, then one\n+\t of both *could* be zero, otherwise none of both is zero;\n+\t this saves one instruction, on i486 this is slower\n+\t tested with P-90, i486DX2-66, AMD486DX2-66  */\n       if(TARGET_PENTIUM)\n         {\n \t  output_asm_insn (AS2 (test%B1,%h1,%b1), xops);"}]}