{"sha": "c6d741b85b24960cf70afda7a3afddd57e3b4ef5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzZkNzQxYjg1YjI0OTYwY2Y3MGFmZGE3YTNhZmRkZDU3ZTNiNGVmNQ==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael.morin@sfr.fr", "date": "2011-10-07T20:14:44Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2011-10-07T20:14:44Z"}, "message": "trans.h (gfc_loopinfo): Remove codimen field.\n\n\t* trans.h (gfc_loopinfo): Remove codimen field.\n\t* trans-array.c (gfc_set_vector_loop_bounds,\n\tgfc_trans_scalarizing_loops, gfc_conv_loop_setup): Update loop upper\n\tlimit.\n\t(gfc_set_loop_bounds_from_array_spec): Ditto. Remove skip on last\n\tcodimension.\n\t(gfc_start_scalarized_body): Update loop lower limit.\n\t(gfc_conv_ss_startstride): Don't set loop's codimen field.\n\t(gfc_conv_loop_setup): Remove unnecessary condition.\n\t(gfc_conv_expr_descriptor): Don't use loop's codimen field as corank.\n\nFrom-SVN: r179689", "tree": {"sha": "b4b8f25000efe7d8ea9656daac4e11baf06418e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b4b8f25000efe7d8ea9656daac4e11baf06418e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c6d741b85b24960cf70afda7a3afddd57e3b4ef5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d741b85b24960cf70afda7a3afddd57e3b4ef5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6d741b85b24960cf70afda7a3afddd57e3b4ef5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6d741b85b24960cf70afda7a3afddd57e3b4ef5/comments", "author": null, "committer": null, "parents": [{"sha": "8e50858e075268ac75d6b39d31638633bb618768", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e50858e075268ac75d6b39d31638633bb618768", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e50858e075268ac75d6b39d31638633bb618768"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "42f1f82788b0b840574011c2155acffab3d7a3a6", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d741b85b24960cf70afda7a3afddd57e3b4ef5/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d741b85b24960cf70afda7a3afddd57e3b4ef5/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=c6d741b85b24960cf70afda7a3afddd57e3b4ef5", "patch": "@@ -1,3 +1,16 @@\n+2011-10-07  Mikael Morin  <mikael.morin@sfr.fr>\n+\n+\t* trans.h (gfc_loopinfo): Remove codimen field.\n+\t* trans-array.c (gfc_set_vector_loop_bounds,\n+\tgfc_trans_scalarizing_loops, gfc_conv_loop_setup): Update loop upper\n+\tlimit.\n+\t(gfc_set_loop_bounds_from_array_spec): Ditto. Remove skip on last\n+\tcodimension.\n+\t(gfc_start_scalarized_body): Update loop lower limit.\n+\t(gfc_conv_ss_startstride): Don't set loop's codimen field.\n+\t(gfc_conv_loop_setup): Remove unnecessary condition.\n+\t(gfc_conv_expr_descriptor): Don't use loop's codimen field as corank.\n+\n 2011-10-07  Mikael Morin  <mikael.morin@sfr.fr>\n \n \t* trans.h (gfc_ss): Remove data.temp.codimen field."}, {"sha": "0a9d28145b307884583077fa123564acd7553056", "filename": "gcc/fortran/trans-array.c", "status": "modified", "additions": 18, "deletions": 25, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d741b85b24960cf70afda7a3afddd57e3b4ef5/gcc%2Ffortran%2Ftrans-array.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d741b85b24960cf70afda7a3afddd57e3b4ef5/gcc%2Ffortran%2Ftrans-array.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-array.c?ref=c6d741b85b24960cf70afda7a3afddd57e3b4ef5", "patch": "@@ -641,7 +641,7 @@ gfc_set_loop_bounds_from_array_spec (gfc_interface_mapping * mapping,\n   tree tmp;\n \n   if (as && as->type == AS_EXPLICIT)\n-    for (n = 0; n < se->loop->dimen + se->loop->codimen; n++)\n+    for (n = 0; n < se->loop->dimen; n++)\n       {\n \tdim = se->ss->data.info.dim[n];\n \tgcc_assert (dim < as->rank);\n@@ -655,22 +655,18 @@ gfc_set_loop_bounds_from_array_spec (gfc_interface_mapping * mapping,\n \t    gfc_add_block_to_block (&se->post, &tmpse.post);\n \t    lower = fold_convert (gfc_array_index_type, tmpse.expr);\n \n-\t    if (se->loop->codimen == 0\n-\t\t|| n < se->loop->dimen + se->loop->codimen - 1)\n-\t      {\n-\t\t/* ...and the upper bound.  */\n-\t\tgfc_init_se (&tmpse, NULL);\n-\t\tgfc_apply_interface_mapping (mapping, &tmpse, as->upper[dim]);\n-\t\tgfc_add_block_to_block (&se->pre, &tmpse.pre);\n-\t\tgfc_add_block_to_block (&se->post, &tmpse.post);\n-\t\tupper = fold_convert (gfc_array_index_type, tmpse.expr);\n-\n-\t\t/* Set the upper bound of the loop to UPPER - LOWER.  */\n-\t\ttmp = fold_build2_loc (input_location, MINUS_EXPR,\n-\t\t\t\t       gfc_array_index_type, upper, lower);\n-\t\ttmp = gfc_evaluate_now (tmp, &se->pre);\n-\t\tse->loop->to[n] = tmp;\n-\t      }\n+\t    /* ...and the upper bound.  */\n+\t    gfc_init_se (&tmpse, NULL);\n+\t    gfc_apply_interface_mapping (mapping, &tmpse, as->upper[dim]);\n+\t    gfc_add_block_to_block (&se->pre, &tmpse.pre);\n+\t    gfc_add_block_to_block (&se->post, &tmpse.post);\n+\t    upper = fold_convert (gfc_array_index_type, tmpse.expr);\n+\n+\t    /* Set the upper bound of the loop to UPPER - LOWER.  */\n+\t    tmp = fold_build2_loc (input_location, MINUS_EXPR,\n+\t\t\t\t   gfc_array_index_type, upper, lower);\n+\t    tmp = gfc_evaluate_now (tmp, &se->pre);\n+\t    se->loop->to[n] = tmp;\n \t  }\n       }\n }\n@@ -2116,7 +2112,7 @@ gfc_set_vector_loop_bounds (gfc_loopinfo * loop, gfc_ss_info * info)\n   int n;\n   int dim;\n \n-  for (n = 0; n < loop->dimen + loop->codimen; n++)\n+  for (n = 0; n < loop->dimen; n++)\n     {\n       dim = info->dim[n];\n       if (info->ref->u.ar.dimen_type[dim] == DIMEN_VECTOR\n@@ -2948,7 +2944,7 @@ gfc_start_scalarized_body (gfc_loopinfo * loop, stmtblock_t * pbody)\n \n   gcc_assert (!loop->array_parameter);\n \n-  for (dim = loop->dimen + loop->codimen - 1; dim >= 0; dim--)\n+  for (dim = loop->dimen - 1; dim >= 0; dim--)\n     {\n       n = loop->order[dim];\n \n@@ -3102,7 +3098,7 @@ gfc_trans_scalarizing_loops (gfc_loopinfo * loop, stmtblock_t * body)\n \n   pblock = body;\n   /* Generate the loops.  */\n-  for (dim = 0; dim < loop->dimen + loop->codimen; dim++)\n+  for (dim = 0; dim < loop->dimen; dim++)\n     {\n       n = loop->order[dim];\n       gfc_trans_scalarized_loop_end (loop, n, pblock);\n@@ -3288,7 +3284,6 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \tcase GFC_SS_FUNCTION:\n \tcase GFC_SS_COMPONENT:\n \t  loop->dimen = ss->data.info.dimen;\n-\t  loop->codimen = ss->data.info.codimen;\n \t  goto done;\n \n \t/* As usual, lbound and ubound are exceptions!.  */\n@@ -3298,14 +3293,12 @@ gfc_conv_ss_startstride (gfc_loopinfo * loop)\n \t    case GFC_ISYM_LBOUND:\n \t    case GFC_ISYM_UBOUND:\n \t      loop->dimen = ss->data.info.dimen;\n-\t      loop->codimen = 0;\n \t      goto done;\n \n \t    case GFC_ISYM_LCOBOUND:\n \t    case GFC_ISYM_UCOBOUND:\n \t    case GFC_ISYM_THIS_IMAGE:\n \t      loop->dimen = ss->data.info.dimen;\n-\t      loop->codimen = ss->data.info.codimen;\n \t      goto done;\n \n \t    default:\n@@ -3888,7 +3881,7 @@ gfc_conv_loop_setup (gfc_loopinfo * loop, locus * where)\n   mpz_t i;\n \n   mpz_init (i);\n-  for (n = 0; n < loop->dimen + loop->codimen; n++)\n+  for (n = 0; n < loop->dimen; n++)\n     {\n       loopspec[n] = NULL;\n       dynamic[n] = false;\n@@ -3997,7 +3990,7 @@ gfc_conv_loop_setup (gfc_loopinfo * loop, locus * where)\n \n       /* Set the extents of this range.  */\n       cshape = loopspec[n]->shape;\n-      if (n < loop->dimen && cshape && INTEGER_CST_P (info->start[dim])\n+      if (cshape && INTEGER_CST_P (info->start[dim])\n \t  && INTEGER_CST_P (info->stride[dim]))\n \t{\n \t  loop->from[n] = info->start[dim];"}, {"sha": "085334c2e64abc67986f6b60acf3b304e83fdcd1", "filename": "gcc/fortran/trans.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c6d741b85b24960cf70afda7a3afddd57e3b4ef5/gcc%2Ffortran%2Ftrans.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c6d741b85b24960cf70afda7a3afddd57e3b4ef5/gcc%2Ffortran%2Ftrans.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans.h?ref=c6d741b85b24960cf70afda7a3afddd57e3b4ef5", "patch": "@@ -245,7 +245,7 @@ typedef struct gfc_loopinfo\n   stmtblock_t pre;\n   stmtblock_t post;\n \n-  int dimen, codimen;\n+  int dimen;\n \n   /* All the SS involved with this loop.  */\n   gfc_ss *ss;"}]}