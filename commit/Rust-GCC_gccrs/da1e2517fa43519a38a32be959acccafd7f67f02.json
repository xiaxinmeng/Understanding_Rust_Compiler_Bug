{"sha": "da1e2517fa43519a38a32be959acccafd7f67f02", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGExZTI1MTdmYTQzNTE5YTM4YTMyYmU5NTlhY2NjYWZkN2Y2N2YwMg==", "commit": {"author": {"name": "Brooks Moses", "email": "bmoses@stanford.edu", "date": "2006-10-01T00:51:21Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2006-10-01T00:51:21Z"}, "message": "invoke.texi: Add mention of BOZ constants and integer overflow to -fno-range-check.\n\n2006-09-30  Brooks Moses  <bmoses@stanford.edu>\n\n\t* invoke.texi:  Add mention of BOZ constants and integer\n\toverflow to -fno-range-check.\n\t* fortran.texi:  Add mention of -fno-range-check to\n\tsection on BOZ contants.\n\nFrom-SVN: r117342", "tree": {"sha": "94929706483e2339daf4f1c17b2cd54be73abfb9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/94929706483e2339daf4f1c17b2cd54be73abfb9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/da1e2517fa43519a38a32be959acccafd7f67f02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da1e2517fa43519a38a32be959acccafd7f67f02", "html_url": "https://github.com/Rust-GCC/gccrs/commit/da1e2517fa43519a38a32be959acccafd7f67f02", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/da1e2517fa43519a38a32be959acccafd7f67f02/comments", "author": null, "committer": null, "parents": [{"sha": "04652d6c8d35b508002e2faad2ab0b5eebd4c8ff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04652d6c8d35b508002e2faad2ab0b5eebd4c8ff", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04652d6c8d35b508002e2faad2ab0b5eebd4c8ff"}], "stats": {"total": 41, "additions": 31, "deletions": 10}, "files": [{"sha": "a37b8579fc78d6234669ce9884e88eaeea3c94be", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1e2517fa43519a38a32be959acccafd7f67f02/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1e2517fa43519a38a32be959acccafd7f67f02/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=da1e2517fa43519a38a32be959acccafd7f67f02", "patch": "@@ -1,3 +1,10 @@\n+2006-09-30  Brooks Moses  <bmoses@stanford.edu>\n+\n+\t* invoke.texi:  Add mention of BOZ constants and integer\n+\toverflow to -fno-range-check.\n+\t* gfortran.texi:  Add mention of -fno-range-check to\n+\tsection on BOZ contants.\n+\n 2006-09-30  Bernhard Fischer  <aldot@gcc.gnu.org>\n \n \t* resolve.c: Fix commentary typo.  Fix whitespace."}, {"sha": "cd281e1d0256d5031160309ef5f3f00a1a667a28", "filename": "gcc/fortran/gfortran.texi", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1e2517fa43519a38a32be959acccafd7f67f02/gcc%2Ffortran%2Fgfortran.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1e2517fa43519a38a32be959acccafd7f67f02/gcc%2Ffortran%2Fgfortran.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.texi?ref=da1e2517fa43519a38a32be959acccafd7f67f02", "patch": "@@ -933,12 +933,19 @@ the @code{DATA} statement, and it is expected to be assigned to an\n @code{INTEGER} variable.  @command{gfortran} permits a BOZ to appear\n in any initialization expression as well as assignment statements.\n \n-The use of a BOZ literal constant to initialize a @code{REAL} variable will \n-lead to confusion.  A BOZ literal constant is converted to an\n-@code{INTEGER} with the kind type with the largest decimal representation\n-before a conversion to a @code{REAL} variable.  That is, one should not\n-expect a bitwise copy of the BOZ literal constant to be assigned to the\n-@code{REAL}.\n+Attempts to use a BOZ literal constant to do a bitwise initialization of a\n+variable can lead to confusion.  A BOZ literal constant is converted to an\n+@code{INTEGER} value with the kind type with the largest decimal representation,\n+and this value is then converted numerically to the type and kind of the\n+variable in question.  Thus, one should not expect a bitwise copy of the BOZ\n+literal constant to be assigned to a @code{REAL} variable.\n+\n+Similarly, initializing an @code{INTEGER} variable with a statement such as\n+@code{DATA i/Z'FFFFFFFF'/} will produce an integer overflow rather than the\n+desired result of @math{-1} when @code{i} is a 32-bit integer on a system that\n+supports 64-bit integers.  The @samp{-fno-range-check} option can be used as \n+a workaround for legacy code that initializes integers in this manner.\n+\n \n @node Real array indices\n @section Real array indices\n@@ -1370,7 +1377,8 @@ available.\n @itemize\n @item \n Intrinsics @code{command_argument_count}, @code{get_command},\n-@code{get_command_argument}, and @code{get_environment_variable}.\n+@code{get_command_argument}, @code{get_environment_variable}, and\n+@code{move_alloc}.\n \n @item \n @cindex Array constructors\n@@ -1397,14 +1405,17 @@ Support for the declaration of enumeration constants via the\n \n @item\n @cindex TR 15581\n-The following parts of TR 15581:\n+TR 15581:\n @itemize\n @item\n @cindex @code{ALLOCATABLE} dummy arguments\n-The @code{ALLOCATABLE} attribute for dummy arguments.\n+@code{ALLOCATABLE} dummy arguments.\n @item\n @cindex @code{ALLOCATABLE} function results\n @code{ALLOCATABLE} function results\n+@item\n+@cindex @code{ALLOCATABLE} components of derived types\n+@code{ALLOCATABLE} components of derived types\n @end itemize\n \n @item"}, {"sha": "e0a0c474a3120af35eeb13104e3fe14932c2e953", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/da1e2517fa43519a38a32be959acccafd7f67f02/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/da1e2517fa43519a38a32be959acccafd7f67f02/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=da1e2517fa43519a38a32be959acccafd7f67f02", "patch": "@@ -315,7 +315,10 @@ Enable range checking on results of simplification of constant expressions\n during compilation.  For example, by default, @command{gfortran} will give\n an overflow error at compile time when simplifying @code{a = EXP(1000)}.\n With @samp{-fno-range-check}, no error will be given and the variable @code{a}\n-will be assigned the value @code{+Infinity}.\n+will be assigned the value @code{+Infinity}.  Similarly,\n+@code{DATA i/Z'FFFFFFFF'/} will result in an integer overflow on most systems,\n+but with @samp{-fno-range-check} the value will ``wrap around'' and @code{i}\n+will be initialized to @math{-1} instead.\n \n @cindex -std=@var{std} option\n @cindex option, -std=@var{std}"}]}