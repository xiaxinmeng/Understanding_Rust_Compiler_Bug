{"sha": "95e207682899fcbf2bcfc43dd2926a6e866e884a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTVlMjA3NjgyODk5ZmNiZjJiY2ZjNDNkZDI5MjZhNmU4NjZlODg0YQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2009-05-05T13:00:03Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2009-05-05T13:00:03Z"}, "message": "typeck.c (cp_build_compound_expr): Require RHS to have a known type.\n\n\tcp/\n\t* typeck.c (cp_build_compound_expr): Require RHS to have a known\n\ttype.\n\t* class.c (resolve_address_of_overloaded_function): Use\n\tOVL_CURRENT for error message.\n\t(instantiate_type): Forbid COMPOUND_EXPRs and remove code dealing\n\twith them.  Do not copy the node.\n\n\ttestsuite/\n\t* g++.old-deja/g++.other/overload11.C: Adjust expected errors.\n\t* g++.dg/template/overload9.C: Likewise.\n\t* g++.dg/ext/ms-1.C: New.\n\nFrom-SVN: r147125", "tree": {"sha": "4ea69e4744077e7a5591e81e2452d87a81f52039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4ea69e4744077e7a5591e81e2452d87a81f52039"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/95e207682899fcbf2bcfc43dd2926a6e866e884a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e207682899fcbf2bcfc43dd2926a6e866e884a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95e207682899fcbf2bcfc43dd2926a6e866e884a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95e207682899fcbf2bcfc43dd2926a6e866e884a/comments", "author": null, "committer": null, "parents": [{"sha": "66ba9b0b152bf853249f594655c0791189b10fc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/66ba9b0b152bf853249f594655c0791189b10fc6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/66ba9b0b152bf853249f594655c0791189b10fc6"}], "stats": {"total": 75, "additions": 47, "deletions": 28}, "files": [{"sha": "56e413fc780f5f29447e13dfbb8541a18c19b266", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=95e207682899fcbf2bcfc43dd2926a6e866e884a", "patch": "@@ -1,3 +1,12 @@\n+2009-05-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* typeck.c (cp_build_compound_expr): Require RHS to have a known\n+\ttype.\n+\t* class.c (resolve_address_of_overloaded_function): Use\n+\tOVL_CURRENT for error message.\n+\t(instantiate_type): Forbid COMPOUND_EXPRs and remove code dealing\n+\twith them.  Do not copy the node.\n+\n 2009-05-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/40013"}, {"sha": "6ad941510ba4b16bdd52adaebd602c1a0a6fce87", "filename": "gcc/cp/class.c", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=95e207682899fcbf2bcfc43dd2926a6e866e884a", "patch": "@@ -6147,7 +6147,7 @@ resolve_address_of_overloaded_function (tree target_type,\n       if (flags & tf_error)\n \t{\n \t  error (\"no matches converting function %qD to type %q#T\",\n-\t\t DECL_NAME (OVL_FUNCTION (overload)),\n+\t\t DECL_NAME (OVL_CURRENT (overload)),\n \t\t target_type);\n \n \t  /* print_candidates expects a chain with the functions in\n@@ -6310,13 +6310,8 @@ instantiate_type (tree lhstype, tree rhs, tsubst_flags_t flags)\n      dependent on overload resolution.  */\n   gcc_assert (TREE_CODE (rhs) == ADDR_EXPR\n \t      || TREE_CODE (rhs) == COMPONENT_REF\n-\t      || TREE_CODE (rhs) == COMPOUND_EXPR\n-\t      || really_overloaded_fn (rhs));\n-\n-  /* We don't overwrite rhs if it is an overloaded function.\n-     Copying it would destroy the tree link.  */\n-  if (TREE_CODE (rhs) != OVERLOAD)\n-    rhs = copy_node (rhs);\n+\t      || really_overloaded_fn (rhs)\n+\t      || (flag_ms_extensions && TREE_CODE (rhs) == FUNCTION_DECL));\n \n   /* This should really only be used when attempting to distinguish\n      what sort of a pointer to function we have.  For now, any\n@@ -6368,19 +6363,6 @@ instantiate_type (tree lhstype, tree rhs, tsubst_flags_t flags)\n \t\t\t\t\t\t/*explicit_targs=*/NULL_TREE,\n \t\t\t\t\t\taccess_path);\n \n-    case COMPOUND_EXPR:\n-      TREE_OPERAND (rhs, 0)\n-\t= instantiate_type (lhstype, TREE_OPERAND (rhs, 0), flags);\n-      if (TREE_OPERAND (rhs, 0) == error_mark_node)\n-\treturn error_mark_node;\n-      TREE_OPERAND (rhs, 1)\n-\t= instantiate_type (lhstype, TREE_OPERAND (rhs, 1), flags);\n-      if (TREE_OPERAND (rhs, 1) == error_mark_node)\n-\treturn error_mark_node;\n-\n-      TREE_TYPE (rhs) = lhstype;\n-      return rhs;\n-\n     case ADDR_EXPR:\n     {\n       if (PTRMEM_OK_P (rhs))"}, {"sha": "e34d942a06c2e6e634ddf01d123ae8da5bb4624e", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=95e207682899fcbf2bcfc43dd2926a6e866e884a", "patch": "@@ -5034,6 +5034,12 @@ cp_build_compound_expr (tree lhs, tree rhs, tsubst_flags_t complain)\n       return rhs;\n     }\n \n+  if (type_unknown_p (rhs))\n+    {\n+      error (\"no context to resolve type of %qE\", rhs);\n+      return error_mark_node;\n+    }\n+  \n   return build2 (COMPOUND_EXPR, TREE_TYPE (rhs), lhs, rhs);\n }\n "}, {"sha": "f6ef3ef5e3aa04bf32992507273aede956ec1e93", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=95e207682899fcbf2bcfc43dd2926a6e866e884a", "patch": "@@ -1,3 +1,9 @@\n+2009-05-05  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\t* g++.old-deja/g++.other/overload11.C: Adjust expected errors.\n+\t* g++.dg/template/overload9.C: Likewise.\n+\t* g++.dg/ext/ms-1.C: New.\n+\n 2009-05-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c++/40013"}, {"sha": "dcd1d0466ef6abf6134ffb2a4ed1d2b4a125db23", "filename": "gcc/testsuite/g++.dg/ext/ms-1.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fms-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fms-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fms-1.C?ref=95e207682899fcbf2bcfc43dd2926a6e866e884a", "patch": "@@ -0,0 +1,17 @@\n+\n+// MS allows more things to be pointers to member functions\n+// { dg-options \"-fms-extensions\" }\n+\n+struct X\n+{\n+  void Foo (X *);\n+  void Bar ();\n+};\n+\n+void Quux (void (X::*) ());\n+\n+void X::Foo (X *ptr)  // { dg-message \"candidates\" }\n+{\n+  Quux (Foo); // { dg-error \"no matches\" }\n+  Quux (Bar);\n+}"}, {"sha": "8aeab9eaa8e9365319c287d93ad67a60b4d10ab6", "filename": "gcc/testsuite/g++.dg/template/overload9.C", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Foverload9.C?ref=95e207682899fcbf2bcfc43dd2926a6e866e884a", "patch": "@@ -7,12 +7,12 @@ template <typename T> A<T>& operator<<(A<T>&, const B<T>&);\n template <typename T>\n struct A \n {\n-  A<T>& operator<<(A<T>& (*)(A<T>&)); // { dg-message \"candidate\" }\n+  A<T>& operator<<(A<T>& (*)(A<T>&));\n };\n \n template <typename T> A<T>& foo(A<T>&);\n extern A<char> c;\n \n int main () {\n-  c << (1, foo); // { dg-error \"no match\" }\n+  c << (1, foo); // { dg-error \"no context\" }\n }"}, {"sha": "e8c88fd58ec852157c13036000b7cd0b0f4ac168", "filename": "gcc/testsuite/g++.old-deja/g++.other/overload11.C", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foverload11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/95e207682899fcbf2bcfc43dd2926a6e866e884a/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foverload11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.old-deja%2Fg%2B%2B.other%2Foverload11.C?ref=95e207682899fcbf2bcfc43dd2926a6e866e884a", "patch": "@@ -54,11 +54,10 @@ int main (int argc, char **argv)\n   \n   ptr = (ovl);              // ok\n   ptr = (&ovl);             // ok\n-  // 13.4 indicates these are ok.\n-  ptr = (0, ovl);           // ok { dg-bogus \"\" \"\" { xfail *-*-* } }\n-  ptr = (0, &ovl);          // ok { dg-bogus \"\" \"\" { xfail *-*-* } }\n-  ptr = (argc ? ovl : ovl); // ok { dg-bogus \"\" \"\" { xfail *-*-* } }\n-  ptr = (argc ? &ovl : &ovl);// ok { dg-bogus \"\" \"\" { xfail *-*-* } }\n+  ptr = (0, ovl);           // ok { dg-error \"no context\" }\n+  ptr = (0, &ovl);          // ok { dg-error \"no context\" }\n+  ptr = (argc ? ovl : ovl); // ok { dg-error \"no context\" }\n+  ptr = (argc ? &ovl : &ovl);// ok { dg-error \"no context\" }\n   \n   vptr = (ovl);              // { dg-error \"\" } no matching candidates\n   vptr = (&ovl);             // { dg-error \"\" } no matching candidates"}]}