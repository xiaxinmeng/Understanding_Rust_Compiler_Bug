{"sha": "ab612f39a4b756e3a58ec3cb36b4033f84825b9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWI2MTJmMzlhNGI3NTZlM2E1OGVjM2NiMzZiNDAzM2Y4NDgyNWI5Yg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-01-17T15:56:07Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-01-17T15:56:07Z"}, "message": "Fix failure building LLVM with location wrapper nodes (PR c++/83799)\n\nPR c++/83799 reports a failure building LLVM due to a bogus\n\"no matching function for call to\" error at a callsite like this:\n  TLI->getTypeLegalizationCost(DL);\nwhere \"DL\" is from:\n  using TargetTransformInfoImplBase::DL;\n\nThe root cause is that type_dependent_expression_p on a USING_DECL\nshould return true when processing a template, but after r256448 the\nthe argument at the callsite is a location wrapper around the USING_DECL,\nand type_dependent_expression_p erroneously returns false for it, as\nit is comparing tree codes, and failing a match, then looking at types.\n\nThis prevents cp_parser_postfix_expression from using the\n\"build_min_nt_call_vec\" path for handling the call, instead erroneously\nhandling it via build_new_method_call (which fails for this case).\n\nThis patch fixes the problem by stripping any location wrappers before\nthe various tree code tests in type_dependent_expression_p.   It fixes\nthe reduced test case, and the full BasicTargetTransformInfo.ii; after\nthis patch, the assembly generated for that latter case is identical to\nthat generated before r256448.\n\ngcc/cp/ChangeLog:\n\tPR c++/83799\n\t* pt.c (type_dependent_expression_p): Strip any location wrapper\n\tbefore testing tree codes.\n\t(selftest::test_type_dependent_expression_p): New function.\n\t(selftest::cp_pt_c_tests): Call it.\n\ngcc/testsuite/ChangeLog:\n\tPR c++/83799\n\t* g++.dg/wrappers/pr83799.C: New test case.\n\nFrom-SVN: r256796", "tree": {"sha": "3bc9e71861a2599e6cb0a2ed6e26be602365e358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3bc9e71861a2599e6cb0a2ed6e26be602365e358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ab612f39a4b756e3a58ec3cb36b4033f84825b9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab612f39a4b756e3a58ec3cb36b4033f84825b9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab612f39a4b756e3a58ec3cb36b4033f84825b9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab612f39a4b756e3a58ec3cb36b4033f84825b9b/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f0fbe57d54af9234f441f1332050ef36d0787653", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f0fbe57d54af9234f441f1332050ef36d0787653", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f0fbe57d54af9234f441f1332050ef36d0787653"}], "stats": {"total": 69, "additions": 69, "deletions": 0}, "files": [{"sha": "ed44be73fd1a6082794b32aaf7e7cd39c4657bef", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab612f39a4b756e3a58ec3cb36b4033f84825b9b/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab612f39a4b756e3a58ec3cb36b4033f84825b9b/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ab612f39a4b756e3a58ec3cb36b4033f84825b9b", "patch": "@@ -1,3 +1,11 @@\n+2018-01-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/83799\n+\t* pt.c (type_dependent_expression_p): Strip any location wrapper\n+\tbefore testing tree codes.\n+\t(selftest::test_type_dependent_expression_p): New function.\n+\t(selftest::cp_pt_c_tests): Call it.\n+\n 2018-01-17  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/83739"}, {"sha": "85997e2fd518d56ecf0acbee2f22272d2b0f91cd", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab612f39a4b756e3a58ec3cb36b4033f84825b9b/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab612f39a4b756e3a58ec3cb36b4033f84825b9b/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ab612f39a4b756e3a58ec3cb36b4033f84825b9b", "patch": "@@ -24237,6 +24237,8 @@ type_dependent_expression_p (tree expression)\n   if (expression == NULL_TREE || expression == error_mark_node)\n     return false;\n \n+  STRIP_ANY_LOCATION_WRAPPER (expression);\n+\n   /* An unresolved name is always dependent.  */\n   if (identifier_p (expression)\n       || TREE_CODE (expression) == USING_DECL\n@@ -26675,12 +26677,48 @@ test_build_non_dependent_expr ()\n \t     build_non_dependent_expr (wrapped_string_lit));\n }\n \n+/* Verify that type_dependent_expression_p () works correctly, even\n+   in the presence of location wrapper nodes.  */\n+\n+static void\n+test_type_dependent_expression_p ()\n+{\n+  location_t loc = BUILTINS_LOCATION;\n+\n+  tree name = get_identifier (\"foo\");\n+\n+  /* If no templates are involved, nothing is type-dependent.  */\n+  gcc_assert (!processing_template_decl);\n+  ASSERT_FALSE (type_dependent_expression_p (name));\n+\n+  ++processing_template_decl;\n+\n+  /* Within a template, an unresolved name is always type-dependent.  */\n+  ASSERT_TRUE (type_dependent_expression_p (name));\n+\n+  /* Ensure it copes with NULL_TREE and errors.  */\n+  ASSERT_FALSE (type_dependent_expression_p (NULL_TREE));\n+  ASSERT_FALSE (type_dependent_expression_p (error_mark_node));\n+\n+  /* A USING_DECL in a template should be type-dependent, even if wrapped\n+     with a location wrapper (PR c++/83799).  */\n+  tree using_decl = build_lang_decl (USING_DECL, name, NULL_TREE);\n+  TREE_TYPE (using_decl) = integer_type_node;\n+  ASSERT_TRUE (type_dependent_expression_p (using_decl));\n+  tree wrapped_using_decl = maybe_wrap_with_location (using_decl, loc);\n+  ASSERT_TRUE (location_wrapper_p (wrapped_using_decl));\n+  ASSERT_TRUE (type_dependent_expression_p (wrapped_using_decl));\n+\n+  --processing_template_decl;\n+}\n+\n /* Run all of the selftests within this file.  */\n \n void\n cp_pt_c_tests ()\n {\n   test_build_non_dependent_expr ();\n+  test_type_dependent_expression_p ();\n }\n \n } // namespace selftest"}, {"sha": "74ad98e4d52bafed16d257317c1d788267582f72", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab612f39a4b756e3a58ec3cb36b4033f84825b9b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab612f39a4b756e3a58ec3cb36b4033f84825b9b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ab612f39a4b756e3a58ec3cb36b4033f84825b9b", "patch": "@@ -1,3 +1,8 @@\n+2018-01-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR c++/83799\n+\t* g++.dg/wrappers/pr83799.C: New test case.\n+\n 2018-01-17  Nathan Sidwell  <nathan@acm.org>\n \n \tPR c++/83739"}, {"sha": "b4f5a6929e04c44f7afcd498201206d428403dbb", "filename": "gcc/testsuite/g++.dg/wrappers/pr83799.C", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ab612f39a4b756e3a58ec3cb36b4033f84825b9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr83799.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ab612f39a4b756e3a58ec3cb36b4033f84825b9b/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr83799.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwrappers%2Fpr83799.C?ref=ab612f39a4b756e3a58ec3cb36b4033f84825b9b", "patch": "@@ -0,0 +1,18 @@\n+struct DataLayout;\n+struct TargetLoweringBase {\n+  void getTypeLegalizationCost(const DataLayout &DL) const;\n+};\n+struct TargetTransformInfoImplBase {\n+  const DataLayout &DL;\n+};\n+template <typename T>\n+struct TargetTransformInfoImplCRTPBase : public TargetTransformInfoImplBase {};\n+template <typename T>\n+struct BasicTTIImplBase : public TargetTransformInfoImplCRTPBase<T> {\n+  const TargetLoweringBase *getTLI() const;\n+  using TargetTransformInfoImplBase::DL;\n+  void getArithmeticInstrCost() {\n+    const TargetLoweringBase *TLI = getTLI();\n+    TLI->getTypeLegalizationCost(DL);\n+  }\n+};"}]}