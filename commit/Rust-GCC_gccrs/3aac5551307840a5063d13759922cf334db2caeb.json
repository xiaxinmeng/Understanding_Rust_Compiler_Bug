{"sha": "3aac5551307840a5063d13759922cf334db2caeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2FhYzU1NTEzMDc4NDBhNTA2M2QxMzc1OTkyMmNmMzM0ZGIyY2FlYg==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2014-07-30T13:48:04Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2014-07-30T13:48:04Z"}, "message": "exp_ch7.adb, [...]: Minor reformatting.\n\n2014-07-30  Robert Dewar  <dewar@adacore.com>\n\n\t* exp_ch7.adb, s-tataat.adb, s-tataat.ads, s-parame-vms-alpha.ads,\n\tinline.adb, s-parame-hpux.ads, exp_smem.adb, s-tasini.adb,\n\ts-tasini.ads, s-parame-vms-ia64.ads, s-parame.ads, s-taskin.ads,\n\ts-parame-vxworks.ads, a-tasatt.adb, a-tasatt.ads: Minor reformatting.\n\t* a-suenco.adb (Convert): Handle overlong encodings in UTF8-UTF8\n\tconversion.\n\nFrom-SVN: r213268", "tree": {"sha": "d4a81b782569bcedc25fe6e5ba6e07906d83a49c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d4a81b782569bcedc25fe6e5ba6e07906d83a49c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3aac5551307840a5063d13759922cf334db2caeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aac5551307840a5063d13759922cf334db2caeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3aac5551307840a5063d13759922cf334db2caeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3aac5551307840a5063d13759922cf334db2caeb/comments", "author": null, "committer": null, "parents": [{"sha": "274d2584e534a5e63be48999c794e90a73d420cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/274d2584e534a5e63be48999c794e90a73d420cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/274d2584e534a5e63be48999c794e90a73d420cb"}], "stats": {"total": 257, "additions": 170, "deletions": 87}, "files": [{"sha": "b13804bb7765a7065fa41a4ac8dc16038bb020b7", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -1,3 +1,12 @@\n+2014-07-30  Robert Dewar  <dewar@adacore.com>\n+\n+\t* exp_ch7.adb, s-tataat.adb, s-tataat.ads, s-parame-vms-alpha.ads,\n+\tinline.adb, s-parame-hpux.ads, exp_smem.adb, s-tasini.adb,\n+\ts-tasini.ads, s-parame-vms-ia64.ads, s-parame.ads, s-taskin.ads,\n+\ts-parame-vxworks.ads, a-tasatt.adb, a-tasatt.ads: Minor reformatting.\n+\t* a-suenco.adb (Convert): Handle overlong encodings in UTF8-UTF8\n+\tconversion.\n+\n 2014-07-30  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_ch5.adb: Improve error recovery."}, {"sha": "54d142d7a6532adeefd8051a569d209f6519904a", "filename": "gcc/ada/a-suenco.adb", "status": "modified", "additions": 47, "deletions": 20, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fa-suenco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fa-suenco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-suenco.adb?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 2010-2013, Free Software Foundation, Inc.         --\n+--          Copyright (C) 2010-2014, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -42,15 +42,16 @@ package body Ada.Strings.UTF_Encoding.Conversions is\n    is\n    begin\n       --  Nothing to do if identical schemes, but for UTF_8 we need to\n-      --  exclude overlong encodings, so need to do the full conversion.\n+      --  handle overlong encodings, so need to do the full conversion.\n \n       if Input_Scheme = Output_Scheme\n         and then Input_Scheme /= UTF_8\n       then\n          return Item;\n \n       --  For remaining cases, one or other of the operands is UTF-16BE/LE\n-      --  encoded, so go through UTF-16 intermediate.\n+      --  encoded, or we have the UTF-8 to UTF-8 case where we must handle\n+      --  overlong encodings. In all cases,  go through UTF-16 intermediate.\n \n       else\n          return Convert (UTF_16_Wide_String'(Convert (Item, Input_Scheme)),\n@@ -159,7 +160,7 @@ package body Ada.Strings.UTF_Encoding.Conversions is\n          C := To_Unsigned_8 (Item (Iptr));\n          Iptr := Iptr + 1;\n \n-         --  Codes in the range 16#00# - 16#7F#\n+         --  Codes in the range 16#00# .. 16#7F#\n          --    UTF-8:  0xxxxxxx\n          --    UTF-16: 00000000_0xxxxxxx\n \n@@ -173,7 +174,7 @@ package body Ada.Strings.UTF_Encoding.Conversions is\n          elsif C <= 2#10_111111# then\n             Raise_Encoding_Error (Iptr - 1);\n \n-         --  Codes in the range 16#80# - 16#7FF#\n+         --  Codes in the range 16#80# .. 16#7FF#\n          --    UTF-8:  110yyyxx 10xxxxxx\n          --    UTF-16: 00000yyy_xxxxxxxx\n \n@@ -183,7 +184,7 @@ package body Ada.Strings.UTF_Encoding.Conversions is\n             Len := Len + 1;\n             Result (Len) := Wide_Character'Val (R);\n \n-         --  Codes in the range 16#800# - 16#FFFF#\n+         --  Codes in the range 16#800# .. 16#D7FF or 16#DF01# .. 16#FFFF#\n          --    UTF-8:  1110yyyy 10yyyyxx 10xxxxxx\n          --    UTF-16: yyyyyyyy_xxxxxxxx\n \n@@ -201,7 +202,7 @@ package body Ada.Strings.UTF_Encoding.Conversions is\n                Raise_Encoding_Error (Iptr - 3);\n             end if;\n \n-         --  Codes in the range 16#10000# - 16#10FFFF#\n+         --  Codes in the range 16#10000# .. 16#10FFFF#\n          --    UTF-8:  11110zzz 10zzyyyy 10yyyyxx 10xxxxxx\n          --    UTF-16: 110110zz_zzyyyyyy 110111yy_xxxxxxxx\n          --    Note: zzzz in the output is input zzzzz - 1\n@@ -212,24 +213,50 @@ package body Ada.Strings.UTF_Encoding.Conversions is\n \n             --  R now has zzzzzyyyy\n \n-            R := R - 2#0000_1_0000#;\n+            --  At this stage, we check for the case where we have an overlong\n+            --  encoding, and the encoded value in fact lies in the single word\n+            --  range (16#800# .. 16#D7FF or 16#DF01# .. 16#FFFF#). This means\n+            --  that the result fits in a single result word.\n \n-            --  R now has zzzzyyyy (zzzz minus one for the output)\n+            if R <= 2#1111# then\n+               Get_Continuation;\n+               Get_Continuation;\n \n-            Get_Continuation;\n+               --  Make sure we are not in the forbidden surrogate range\n \n-            --  R now has zzzzyyyyyyyyxx\n+               if R in 16#D800# .. 16#DF00# then\n+                  Raise_Encoding_Error (Iptr - 3);\n+               end if;\n \n-            Len := Len + 1;\n-            Result (Len) :=\n-              Wide_Character'Val\n-                (2#110110_00_0000_0000# or Shift_Right (R, 4));\n+               --  Otherwise output a single UTF-16 value\n \n-            R := R and 2#1111#;\n-            Get_Continuation;\n-            Len := Len + 1;\n-            Result (Len) :=\n-              Wide_Character'Val (2#110111_00_0000_0000# or R);\n+               Len := Len + 1;\n+               Result (Len) := Wide_Character'Val (R);\n+\n+            --  Here for normal case (code value > 16#FFFF and zzzzz non-zero)\n+\n+            else\n+               --  Subtract 1 from input zzzzz value to get output zzzz value\n+\n+               R := R - 2#0000_1_0000#;\n+\n+               --  R now has zzzzyyyy (zzzz minus one for the output)\n+\n+               Get_Continuation;\n+\n+               --  R now has zzzzyy_yyyyyyxx\n+\n+               Len := Len + 1;\n+               Result (Len) :=\n+                 Wide_Character'Val\n+                   (2#110110_00_0000_0000# or Shift_Right (R, 4));\n+\n+               R := R and 2#1111#;\n+               Get_Continuation;\n+               Len := Len + 1;\n+               Result (Len) :=\n+                 Wide_Character'Val (2#110111_00_0000_0000# or R);\n+            end if;\n \n          --  Any other code is an error\n "}, {"sha": "c127fe0809aaf66c6c98da208b2996e8f857bfc3", "filename": "gcc/ada/a-tasatt.adb", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fa-tasatt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fa-tasatt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tasatt.adb?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -70,35 +70,40 @@ package body Ada.Task_Attributes is\n    --  Each value in the task control block's Attributes array is either\n    --  mapped to the attribute value directly if Fast_Path is True, or\n    --  is in effect a Real_Attribute_Access.\n+   --\n    --  Note: the Deallocator field must be first, for compatibility with\n    --  System.Tasking.Task_Attributes.Attribute_Record and to allow unchecked\n    --  conversions between Attribute_Access and Real_Attribute_Access.\n \n    function New_Attribute (Val : Attribute) return Atomic_Address;\n-   --  Create a new Real_Attribute using Val, and return its address.\n-   --  The returned value can be converted via To_Real_Attribute.\n+   --  Create a new Real_Attribute using Val, and return its address. The\n+   --  returned value can be converted via To_Real_Attribute.\n \n    procedure Deallocate (Ptr : Atomic_Address);\n    --  Free memory associated with Ptr, a Real_Attribute_Access in reality\n \n    function To_Real_Attribute is new\n      Ada.Unchecked_Conversion (Atomic_Address, Real_Attribute_Access);\n \n-   --  Kill warning about possible size mismatch\n    pragma Warnings (Off);\n+   --  Kill warning about possible size mismatch\n+\n    function To_Address is new\n      Ada.Unchecked_Conversion (Attribute, Atomic_Address);\n    function To_Attribute is new\n      Ada.Unchecked_Conversion (Atomic_Address, Attribute);\n+\n    pragma Warnings (On);\n \n    function To_Address is new\n      Ada.Unchecked_Conversion (Real_Attribute_Access, Atomic_Address);\n \n-   --  Kill warning about possible aliasing\n    pragma Warnings (Off);\n+   --  Kill warning about possible aliasing\n+\n    function To_Handle is new\n      Ada.Unchecked_Conversion (System.Address, Attribute_Handle);\n+\n    pragma Warnings (On);\n \n    function To_Task_Id is new Ada.Unchecked_Conversion\n@@ -109,15 +114,15 @@ package body Ada.Task_Attributes is\n      Ada.Unchecked_Deallocation (Real_Attribute, Real_Attribute_Access);\n \n    Fast_Path : constant Boolean :=\n-     Attribute'Size <= Atomic_Address'Size and then\n-     To_Address (Initial_Value) = 0;\n+                 Attribute'Size <= Atomic_Address'Size\n+                   and then To_Address (Initial_Value) = 0;\n    --  If the attribute fits in an Atomic_Address and Initial_Value is 0 (or\n    --  null), then we will map the attribute directly into\n    --  ATCB.Attributes (Index), otherwise we will create a level of indirection\n    --  and instead use Attributes (Index) as a Real_Attribute_Access.\n \n    Index : constant Integer :=\n-     Next_Index (Require_Finalization => not Fast_Path);\n+             Next_Index (Require_Finalization => not Fast_Path);\n    --  Index in the task control block's Attributes array\n \n    --------------\n@@ -126,11 +131,13 @@ package body Ada.Task_Attributes is\n \n    procedure Finalize (Cleanup : in out Attribute_Cleanup) is\n       pragma Unreferenced (Cleanup);\n+\n    begin\n       STPO.Lock_RTS;\n \n       declare\n          C : System.Tasking.Task_Id := System.Tasking.All_Tasks_List;\n+\n       begin\n          while C /= null loop\n             STPO.Write_Lock (C);\n@@ -168,9 +175,8 @@ package body Ada.Task_Attributes is\n    function New_Attribute (Val : Attribute) return Atomic_Address is\n       Tmp : Real_Attribute_Access;\n    begin\n-      Tmp := new Real_Attribute'\n-        (Free  => Deallocate'Unrestricted_Access,\n-         Value => Val);\n+      Tmp := new Real_Attribute'(Free  => Deallocate'Unrestricted_Access,\n+                                 Value => Val);\n       return To_Address (Tmp);\n    end New_Attribute;\n \n@@ -184,7 +190,7 @@ package body Ada.Task_Attributes is\n    is\n       Self_Id       : Task_Id;\n       TT            : constant Task_Id := To_Task_Id (T);\n-      Error_Message : constant String  := \"Trying to get the reference of a \";\n+      Error_Message : constant String  := \"trying to get the reference of a \";\n       Result        : Attribute_Handle;\n \n    begin\n@@ -235,8 +241,11 @@ package body Ada.Task_Attributes is\n       end if;\n \n       if Fast_Path then\n+\n          --  No finalization needed, simply reset to Initial_Value\n+\n          TT.Attributes (Index) := To_Address (Initial_Value);\n+\n       else\n          Self_Id := STPO.Self;\n          Task_Lock (Self_Id);\n@@ -264,7 +273,7 @@ package body Ada.Task_Attributes is\n    is\n       Self_Id       : Task_Id;\n       TT            : constant Task_Id := To_Task_Id (T);\n-      Error_Message : constant String  := \"Trying to Set the Value of a \";\n+      Error_Message : constant String  := \"trying to set the value of a \";\n \n    begin\n       if TT = null then\n@@ -276,14 +285,18 @@ package body Ada.Task_Attributes is\n       end if;\n \n       if Fast_Path then\n+\n          --  No finalization needed, simply set to Val\n+\n          TT.Attributes (Index) := To_Address (Val);\n+\n       else\n          Self_Id := STPO.Self;\n          Task_Lock (Self_Id);\n \n          declare\n             Attr : Atomic_Address renames TT.Attributes (Index);\n+\n          begin\n             if Attr /= 0 then\n                Deallocate (Attr);\n@@ -306,7 +319,7 @@ package body Ada.Task_Attributes is\n    is\n       Self_Id       : Task_Id;\n       TT            : constant Task_Id := To_Task_Id (T);\n-      Error_Message : constant String  := \"Trying to get the Value of a \";\n+      Error_Message : constant String  := \"trying to get the value of a \";\n \n    begin\n       if TT = null then\n@@ -319,20 +332,23 @@ package body Ada.Task_Attributes is\n \n       if Fast_Path then\n          return To_Attribute (TT.Attributes (Index));\n+\n       else\n          Self_Id := STPO.Self;\n          Task_Lock (Self_Id);\n \n          declare\n             Attr : Atomic_Address renames TT.Attributes (Index);\n+\n          begin\n             if Attr = 0 then\n                Task_Unlock (Self_Id);\n                return Initial_Value;\n+\n             else\n                declare\n                   Result : constant Attribute :=\n-                    To_Real_Attribute (Attr).Value;\n+                             To_Real_Attribute (Attr).Value;\n                begin\n                   Task_Unlock (Self_Id);\n                   return Result;"}, {"sha": "a3e1f0eddc3f3ee4db62bfd1438e7d573158565b", "filename": "gcc/ada/a-tasatt.ads", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fa-tasatt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fa-tasatt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fa-tasatt.ads?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 S p e c                                  --\n --                                                                          --\n---          Copyright (C) 1992-2009, Free Software Foundation, Inc.         --\n+--            Copyright (C) 2014, Free Software Foundation, Inc.            --\n --                                                                          --\n -- This specification is derived from the Ada Reference Manual for use with --\n -- GNAT. The copyright notice above, and the license provisions that follow --\n@@ -41,28 +41,52 @@ generic\n \n package Ada.Task_Attributes is\n \n+   --  Note that this package will use an efficient implementation with no\n+   --  locks and no extra dynamic memory allocation if Attribute can fit in a\n+   --  System.Address type, and Initial_Value is 0 (null for an access type).\n+\n+   --  Other types and initial values are supported, but will require\n+   --  the use of locking and a level of indirection (meaning extra dynamic\n+   --  memory allocation).\n+\n+   --  The maximum number of task attributes supported by this implementation\n+   --  is determined by the constant System.Parameters.Max_Attribute_Count.\n+   --  If you exceed this number, Storage_Error will be raised during the\n+   --  elaboration of the instantiation of this package.\n+\n    type Attribute_Handle is access all Attribute;\n \n    function Value\n-     (T    : Ada.Task_Identification.Task_Id :=\n-               Ada.Task_Identification.Current_Task) return Attribute;\n+     (T : Ada.Task_Identification.Task_Id :=\n+            Ada.Task_Identification.Current_Task) return Attribute;\n+   --  Return the value of the corresponding attribute of T. Tasking_Error\n+   --  is raised if T is terminated and Program_Error will be raised if T\n+   --  is Null_Task_Id.\n \n    function Reference\n-     (T    : Ada.Task_Identification.Task_Id :=\n-               Ada.Task_Identification.Current_Task) return Attribute_Handle;\n+     (T : Ada.Task_Identification.Task_Id :=\n+            Ada.Task_Identification.Current_Task) return Attribute_Handle;\n+   --  Return an access value that designates the corresponding attribute of\n+   --  T. Tasking_Error is raised if T is terminated and Program_Error will be\n+   --  raised if T is Null_Task_Id.\n \n    procedure Set_Value\n      (Val : Attribute;\n       T   : Ada.Task_Identification.Task_Id :=\n               Ada.Task_Identification.Current_Task);\n+   --  Finalize the old value of the attribute of T and assign Val to that\n+   --  attribute. Tasking_Error is raised if T is terminated and Program_Error\n+   --  will be raised if T is Null_Task_Id.\n \n    procedure Reinitialize\n-     (T :   Ada.Task_Identification.Task_Id :=\n-              Ada.Task_Identification.Current_Task);\n+     (T : Ada.Task_Identification.Task_Id :=\n+            Ada.Task_Identification.Current_Task);\n+   --  Same as Set_Value (Initial_Value, T). Tasking_Error is raised if T is\n+   --  terminated and Program_Error will be raised if T is Null_Task_Id.\n \n private\n    pragma Inline (Value);\n+   pragma Inline (Reference);\n    pragma Inline (Set_Value);\n    pragma Inline (Reinitialize);\n-\n end Ada.Task_Attributes;"}, {"sha": "24773471efa8d24f72fc94ceb70dc87d55787192", "filename": "gcc/ada/exp_ch7.adb", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fexp_ch7.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fexp_ch7.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch7.adb?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -5022,13 +5022,14 @@ package body Exp_Ch7 is\n \n          --  Reset the action lists\n \n-         Scope_Stack.Table (Scope_Stack.Last).\n-           Actions_To_Be_Wrapped (Before) := No_List;\n-         Scope_Stack.Table (Scope_Stack.Last).\n-           Actions_To_Be_Wrapped (After) := No_List;\n+         Scope_Stack.Table\n+           (Scope_Stack.Last).Actions_To_Be_Wrapped (Before) := No_List;\n+         Scope_Stack.Table\n+           (Scope_Stack.Last).Actions_To_Be_Wrapped (After)  := No_List;\n+\n          if Clean then\n-            Scope_Stack.Table (Scope_Stack.Last).\n-              Actions_To_Be_Wrapped (Cleanup) := No_List;\n+            Scope_Stack.Table\n+              (Scope_Stack.Last).Actions_To_Be_Wrapped (Cleanup) := No_List;\n          end if;\n       end;\n    end Insert_Actions_In_Scope_Around;"}, {"sha": "c264b50b5c385b50be6e659792d8db952f8f1453", "filename": "gcc/ada/exp_smem.adb", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fexp_smem.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fexp_smem.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_smem.adb?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -189,25 +189,24 @@ package body Exp_Smem is\n       --  subtypes in transient scopes.\n \n       Vid := Make_Temporary (Loc, 'N', Obj);\n-      Vde := Make_Object_Declaration (Loc,\n+      Vde :=\n+        Make_Object_Declaration (Loc,\n           Defining_Identifier => Vid,\n           Constant_Present    => True,\n           Object_Definition   => New_Occurrence_Of (Standard_String, Loc),\n           Expression          => Make_String_Literal (Loc, Vnm));\n \n-      if In_Transient then\n-\n-         --  Already in a transient scope: make sure we insert Vde outside\n-         --  that scope.\n+      --  Already in a transient scope. Make sure that we insert Vde outside\n+      --  that scope.\n \n+      if In_Transient then\n          Insert_Before_And_Analyze (Node_To_Be_Wrapped, Vde);\n \n-      else\n-         --  Not in a transient scope yet: insert Vde as an action on N prio\n-         --  to establishing one.\n+      --  Not in a transient scope yet: insert Vde as an action on N prior to\n+      --  establishing one.\n \n+      else\n          Insert_Action (N, Vde);\n-\n          Establish_Transient_Scope (N, Sec_Stack => False);\n       end if;\n \n@@ -216,6 +215,7 @@ package body Exp_Smem is\n       declare\n          Locked_Shared_Objects : Elist_Id renames\n            Scope_Stack.Table (Scope_Stack.Last).Locked_Shared_Objects;\n+\n       begin\n          if Locked_Shared_Objects = No_Elist then\n             Locked_Shared_Objects := New_Elmt_List;"}, {"sha": "4f099585da4b4e745a40d1899a9e206d0657e373", "filename": "gcc/ada/inline.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Finline.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Finline.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Finline.adb?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -1698,7 +1698,7 @@ package body Inline is\n       elsif Present (Body_Id)\n         and then (No (SPARK_Pragma (Body_Id))\n                    or else\n-                  Get_SPARK_Mode_From_Pragma (SPARK_Pragma (Body_Id)) /= On)\n+                     Get_SPARK_Mode_From_Pragma (SPARK_Pragma (Body_Id)) /= On)\n       then\n          return False;\n "}, {"sha": "8ee4b4f2b6dfb433be31eb9e91f02f3d4e23d715", "filename": "gcc/ada/s-parame-hpux.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-parame-hpux.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-parame-hpux.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame-hpux.ads?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -181,7 +181,7 @@ package System.Parameters is\n    ---------------------\n \n    Max_Attribute_Count : constant := 32;\n-   --  Number of task attributes stored in the task control block.\n+   --  Number of task attributes stored in the task control block\n \n    --------------------\n    -- Runtime Traces --"}, {"sha": "1e7161fbe16729d1e936f56f83d8b22c7df60173", "filename": "gcc/ada/s-parame-vms-alpha.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-parame-vms-alpha.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-parame-vms-alpha.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame-vms-alpha.ads?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -184,7 +184,7 @@ package System.Parameters is\n    ---------------------\n \n    Max_Attribute_Count : constant := 32;\n-   --  Number of task attributes stored in the task control block.\n+   --  Number of task attributes stored in the task control block\n \n    --------------------\n    -- Runtime Traces --"}, {"sha": "0f18f3dcf2877dc0ffcab9d827d4f020f9594a12", "filename": "gcc/ada/s-parame-vms-ia64.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-parame-vms-ia64.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-parame-vms-ia64.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame-vms-ia64.ads?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -184,7 +184,7 @@ package System.Parameters is\n    ---------------------\n \n    Max_Attribute_Count : constant := 32;\n-   --  Number of task attributes stored in the task control block.\n+   --  Number of task attributes stored in the task control block\n \n    --------------------\n    -- Runtime Traces --"}, {"sha": "e2768e52526d07573bc8fc16d1f363a35e4bfb4f", "filename": "gcc/ada/s-parame-vxworks.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-parame-vxworks.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-parame-vxworks.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame-vxworks.ads?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -183,7 +183,7 @@ package System.Parameters is\n    ---------------------\n \n    Max_Attribute_Count : constant := 16;\n-   --  Number of task attributes stored in the task control block.\n+   --  Number of task attributes stored in the task control block\n \n    --------------------\n    -- Runtime Traces --"}, {"sha": "abc3f4e0f5ec7d99a490a5f5e4ee57e587d95e55", "filename": "gcc/ada/s-parame.ads", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-parame.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-parame.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-parame.ads?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -183,7 +183,7 @@ package System.Parameters is\n    ---------------------\n \n    Max_Attribute_Count : constant := 32;\n-   --  Number of task attributes stored in the task control block.\n+   --  Number of task attributes stored in the task control block\n \n    --------------------\n    -- Runtime Traces --"}, {"sha": "b8e036288f9d1a424183c8cd060fdca2e43b289f", "filename": "gcc/ada/s-tasini.adb", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-tasini.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-tasini.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.adb?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -814,6 +814,7 @@ package body System.Tasking.Initialization is\n \n    procedure Finalize_Attributes (T : Task_Id) is\n       Attr : Atomic_Address;\n+\n    begin\n       for J in T.Attributes'Range loop\n          Attr := T.Attributes (J);"}, {"sha": "29f10e0613348437c6ec021672096ea876a0b71c", "filename": "gcc/ada/s-tasini.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-tasini.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-tasini.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tasini.ads?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -38,9 +38,9 @@ package System.Tasking.Initialization is\n    --  Remove T from All_Tasks_List. Call this function with RTS_Lock taken\n \n    procedure Finalize_Attributes (T : Task_Id);\n-   --  Finalize all attributes from T\n-   --  This is to be called just before the ATCB is deallocated.\n-   --  It relies on the caller holding T.L write-lock on entry.\n+   --  Finalize all attributes from T. This is to be called just before the\n+   --  ATCB is deallocated. It relies on the caller holding T.L write-lock\n+   --  on entry.\n \n    ---------------------------------\n    -- Tasking-Specific Soft Links --"}, {"sha": "761bd2b629af05d1fb360bd4face1705ab5f3fe9", "filename": "gcc/ada/s-taskin.ads", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-taskin.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-taskin.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-taskin.ads?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -942,9 +942,9 @@ package System.Tasking is\n    pragma Atomic (Atomic_Address);\n    type Attribute_Array is\n      array (1 .. Parameters.Max_Attribute_Count) of Atomic_Address;\n-   --  Array of task attributes.\n-   --  The value (Atomic_Address) will either be converted to a task\n-   --  attribute if it fits, or to a pointer to a record by Ada.Task_Attributes\n+   --  Array of task attributes. The value (Atomic_Address) will either be\n+   --  converted to a task attribute if it fits, or to a pointer to a record\n+   --  by Ada.Task_Attributes.\n \n    type Task_Serial_Number is mod 2 ** 64;\n    --  Used to give each task a unique serial number"}, {"sha": "3f002fa1bfa1fb8be1f5f4c63bdcf8289e196fb3", "filename": "gcc/ada/s-tataat.adb", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-tataat.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-tataat.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tataat.adb?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -34,19 +34,21 @@ with System.Tasking.Initialization; use System.Tasking.Initialization;\n \n package body System.Tasking.Task_Attributes is\n \n-   ----------------\n-   -- Next_Index --\n-   ----------------\n-\n    type Index_Info is record\n-      Used, Require_Finalization : Boolean;\n+      Used : Boolean;\n+      --  Used is True if a given index is used by an instantiation of\n+      --  Ada.Task_Attributes, False otherwise.\n+\n+      Require_Finalization : Boolean;\n+      --  Require_Finalization is True if the attribute requires finalization\n    end record;\n-   --  Used is True if a given index is used by an instantiation of\n-   --  Ada.Task_Attributes, False otherwise.\n-   --  Require_Finalization is True if the attribute requires finalization.\n \n    Index_Array : array (1 .. Max_Attribute_Count) of Index_Info :=\n-     (others => (False, False));\n+                   (others => (False, False));\n+\n+   --  Note that this package will use an efficient implementation with no\n+   --  locks and no extra dynamic memory allocation if Attribute can fit in a\n+   --  System.Address type and Initial_Value is 0 (or null for an access type).\n \n    function Next_Index (Require_Finalization : Boolean) return Integer is\n       Self_Id : constant Task_Id := Self;\n@@ -79,6 +81,10 @@ package body System.Tasking.Task_Attributes is\n       Task_Unlock (Self_Id);\n    end Finalize;\n \n+   --------------------------\n+   -- Require_Finalization --\n+   --------------------------\n+\n    function Require_Finalization (Index : Integer) return Boolean is\n    begin\n       pragma Assert (Index in Index_Array'Range);"}, {"sha": "2dd5f5e67870405014368b56e30f073dd8cd2521", "filename": "gcc/ada/s-tataat.ads", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-tataat.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3aac5551307840a5063d13759922cf334db2caeb/gcc%2Fada%2Fs-tataat.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-tataat.ads?ref=3aac5551307840a5063d13759922cf334db2caeb", "patch": "@@ -50,17 +50,16 @@ package System.Tasking.Task_Attributes is\n      Ada.Unchecked_Conversion (Atomic_Address, Attribute_Access);\n \n    function Next_Index (Require_Finalization : Boolean) return Integer;\n-   --  Return the next attribute index available.\n-   --  Require_Finalization is True if the attribute requires finalization\n-   --  and in particular its deallocator (Free field in Attribute_Record)\n-   --  should be called.\n-   --  Raise Storage_Error if no index is available.\n+   --  Return the next attribute index available. Require_Finalization is True\n+   --  if the attribute requires finalization and in particular its deallocator\n+   --  (Free field in Attribute_Record) should be called. Raise Storage_Error\n+   --  if no index is available.\n \n    function Require_Finalization (Index : Integer) return Boolean;\n-   --  Return True if a given attribute index requires call to Free.\n-   --  This call is not protected against concurrent access, should only\n-   --  be called during finalization of the corresponding instantiation of\n-   --  Ada.Task_Attributes, or during finalization of a task.\n+   --  Return True if a given attribute index requires call to Free. This call\n+   --  is not protected against concurrent access, should only be called during\n+   --  finalization of the corresponding instantiation of Ada.Task_Attributes,\n+   --  or during finalization of a task.\n \n    procedure Finalize (Index : Integer);\n    --  Finalize given Index, possibly allowing future reuse"}]}