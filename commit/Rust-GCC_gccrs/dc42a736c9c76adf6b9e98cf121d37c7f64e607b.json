{"sha": "dc42a736c9c76adf6b9e98cf121d37c7f64e607b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGM0MmE3MzZjOWM3NmFkZjZiOWU5OGNmMTIxZDM3YzdmNjRlNjA3Yg==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-02-20T10:52:50Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2017-02-20T10:52:50Z"}, "message": "re PR fortran/79382 (DTIO ICE)\n\n2017-02-16  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/79382\n\t* decl.c (access_attr_decl): Test for presence of generic DTIO\n\tinterface and emit error if not present.\n\n2017-02-16  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/79382\n\t* io/transfer.c (check_dtio_proc): New function.\n\t(formatted_transfer_scalar_read): Use it.\n\t(formatted_transfer_scalar_write): ditto.\n\n2017-02-16  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/79382\n\t* gfortran.dg/dtio_10.f90 : Change test of error message.\n\t* gfortran.dg/dtio_23.f90 : New test.\n\t* gfortran.dg/dtio_24.f90 : New test.\n\nFrom-SVN: r245596", "tree": {"sha": "8afb6a237aa77fa173be94f5c6785ab688583e6e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8afb6a237aa77fa173be94f5c6785ab688583e6e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dc42a736c9c76adf6b9e98cf121d37c7f64e607b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc42a736c9c76adf6b9e98cf121d37c7f64e607b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dc42a736c9c76adf6b9e98cf121d37c7f64e607b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/comments", "author": null, "committer": null, "parents": [{"sha": "1ca6a74f8900cd8e18a5603eaea2c16f4f0d1e36", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ca6a74f8900cd8e18a5603eaea2c16f4f0d1e36", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ca6a74f8900cd8e18a5603eaea2c16f4f0d1e36"}], "stats": {"total": 152, "additions": 151, "deletions": 1}, "files": [{"sha": "418f9267cb05fa3884cbe0e3989e199200040f16", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=dc42a736c9c76adf6b9e98cf121d37c7f64e607b", "patch": "@@ -1,3 +1,9 @@\n+2017-02-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79382\n+\t* decl.c (access_attr_decl): Test for presence of generic DTIO\n+\tinterface and emit error if not present.\n+\n 2017-02-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/79434"}, {"sha": "52de1c113124fcbbd80979feed91919b0a9b2c97", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=dc42a736c9c76adf6b9e98cf121d37c7f64e607b", "patch": "@@ -7568,6 +7568,21 @@ access_attr_decl (gfc_statement st)\n \n \tcase INTERFACE_GENERIC:\n \tcase INTERFACE_DTIO:\n+\n+\t  if (type == INTERFACE_DTIO\n+\t      && gfc_current_ns->proc_name\n+\t      && gfc_current_ns->proc_name->attr.flavor == FL_MODULE)\n+\t    {\n+\t      gfc_find_symbol (name, gfc_current_ns, 0, &sym);\n+\t      if (sym == NULL)\n+\t\t{\n+\t\t  gfc_error (\"The GENERIC DTIO INTERFACE at %C is not \"\n+\t\t\t     \"present in the MODULE '%s'\",\n+\t\t\t     gfc_current_ns->proc_name->name);\n+\t\t  return MATCH_ERROR;\n+\t\t}\n+\t    }\n+\n \t  if (gfc_get_symbol (name, NULL, &sym))\n \t    goto done;\n "}, {"sha": "ce53f01cdea301f8958242585aa50a2529f2cbc9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=dc42a736c9c76adf6b9e98cf121d37c7f64e607b", "patch": "@@ -1,3 +1,10 @@\n+2017-02-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79382\n+\t* gfortran.dg/dtio_10.f90 : Change test of error message.\n+\t* gfortran.dg/dtio_23.f90 : New test.\n+\t* gfortran.dg/dtio_24.f90 : New test.\n+\n 2017-02-20  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/79434"}, {"sha": "6ab6c3e68b4407e4cb36052a49ca314e4ed739b9", "filename": "gcc/testsuite/gfortran.dg/dtio_10.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_10.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_10.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_10.f90?ref=dc42a736c9c76adf6b9e98cf121d37c7f64e607b", "patch": "@@ -23,5 +23,5 @@ program test1\n   read (10, fmt='(dt)', advance='no', size=thesize, iostat=ios, &\n             & iomsg=errormsg) i, udt1\n   if (ios.ne.5006) call abort\n-  if (errormsg(1:25).ne.\"Expected CLASS or DERIVED\") call abort\n+  if (errormsg(27:47).ne.\"intrinsic type passed\") call abort\n end program test1"}, {"sha": "4ebddbbe854bb87e37ee628d0bec25ac892756c4", "filename": "gcc/testsuite/gfortran.dg/dtio_23.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_23.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_23.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_23.f90?ref=dc42a736c9c76adf6b9e98cf121d37c7f64e607b", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do compile }\n+!\n+! Test fix for the original in PR79832.\n+!\n+! Contributed by Walt Brainerd  <walt.brainerd@gmail.com>\n+!\n+module dollar_mod\n+\n+   implicit none\n+   private\n+\n+   type, public :: dollar_type\n+      real :: amount\n+   contains\n+      procedure :: Write_dollar\n+      generic :: write(formatted) => Write_dollar\n+   end type dollar_type\n+\n+   PRIVATE :: write (formatted) ! { dg-error \"is not present\" }\n+\n+contains\n+\n+subroutine Write_dollar &\n+\n+   (dollar_value, unit, b_edit_descriptor, v_list, iostat, iomsg)\n+\n+   class (dollar_type), intent(in) :: dollar_value\n+   integer, intent(in) :: unit\n+   character (len=*), intent(in) :: b_edit_descriptor\n+   integer, dimension(:), intent(in) :: v_list\n+   integer, intent(out) :: iostat\n+   character (len=*), intent(inout) :: iomsg\n+   write (unit=unit, fmt=\"(f9.2)\", iostat=iostat) dollar_value%amount\n+\n+end subroutine Write_dollar\n+\n+end module dollar_mod"}, {"sha": "eb59b9ec8ba58eb109a1566608803f4cef5eb3b6", "filename": "gcc/testsuite/gfortran.dg/dtio_24.f90", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_24.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_24.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fdtio_24.f90?ref=dc42a736c9c76adf6b9e98cf121d37c7f64e607b", "patch": "@@ -0,0 +1,51 @@\n+! { dg-do run }\n+!\n+! Test fix for the additional bug that was found in fixing PR79832.\n+!\n+! Contributed by Walt Brainerd  <walt.brainerd@gmail.com>\n+!\n+module dollar_mod\n+\n+   implicit none\n+   private\n+\n+   type, public :: dollar_type\n+      real :: amount\n+   end type dollar_type\n+\n+   interface write(formatted)\n+      module procedure Write_dollar\n+   end interface\n+\n+   private :: write (formatted)\n+\n+contains\n+\n+subroutine Write_dollar &\n+\n+   (dollar_value, unit, b_edit_descriptor, v_list, iostat, iomsg)\n+\n+   class (dollar_type), intent(in) :: dollar_value\n+   integer, intent(in) :: unit\n+   character (len=*), intent(in) :: b_edit_descriptor\n+   integer, dimension(:), intent(in) :: v_list\n+   integer, intent(out) :: iostat\n+   character (len=*), intent(inout) :: iomsg\n+   write (unit=unit, fmt=\"(f9.2)\", iostat=iostat) dollar_value%amount\n+\n+end subroutine Write_dollar\n+\n+end module dollar_mod\n+\n+program test_dollar\n+\n+   use :: dollar_mod\n+   implicit none\n+   integer  :: ios\n+   character(100) :: errormsg\n+\n+   type (dollar_type), parameter :: wage = dollar_type(15.10)\n+   write (unit=*, fmt=\"(DT)\", iostat=ios, iomsg=errormsg) wage\n+   if (ios.ne.5006) call abort\n+   if (errormsg(1:22).ne.\"Missing DTIO procedure\") call abort\n+end program test_dollar"}, {"sha": "4cdb3b4f2521b3ba6411c0f03d9ccb961fb371d7", "filename": "libgfortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/libgfortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/libgfortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2FChangeLog?ref=dc42a736c9c76adf6b9e98cf121d37c7f64e607b", "patch": "@@ -1,3 +1,10 @@\n+2017-02-16  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/79382\n+\t* io/transfer.c (check_dtio_proc): New function.\n+\t(formatted_transfer_scalar_read): Use it.\n+\t(formatted_transfer_scalar_write): ditto.\n+\n 2017-01-31  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/79305"}, {"sha": "36786c0349e62019fc63cbcd3533927046ad2fd7", "filename": "libgfortran/io/transfer.c", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/libgfortran%2Fio%2Ftransfer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dc42a736c9c76adf6b9e98cf121d37c7f64e607b/libgfortran%2Fio%2Ftransfer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgfortran%2Fio%2Ftransfer.c?ref=dc42a736c9c76adf6b9e98cf121d37c7f64e607b", "patch": "@@ -1244,6 +1244,26 @@ require_type (st_parameter_dt *dtp, bt expected, bt actual, const fnode *f)\n }\n \n \n+/* Check that the dtio procedure required for formatted IO is present.  */\n+\n+static int\n+check_dtio_proc (st_parameter_dt *dtp, const fnode *f)\n+{\n+  char buffer[BUFLEN];\n+\n+  if (dtp->u.p.fdtio_ptr != NULL)\n+    return 0;\n+\n+  snprintf (buffer, BUFLEN,\n+\t    \"Missing DTIO procedure or intrinsic type passed for item %d \"\n+\t    \"in formatted transfer\",\n+\t    dtp->u.p.item_count - 1);\n+\n+  format_error (dtp, f, buffer);\n+  return 1;\n+}\n+\n+\n static int\n require_numeric_type (st_parameter_dt *dtp, bt actual, const fnode *f)\n {\n@@ -1436,6 +1456,9 @@ formatted_transfer_scalar_read (st_parameter_dt *dtp, bt type, void *p, int kind\n \tcase FMT_DT:\n \t  if (n == 0)\n \t    goto need_read_data;\n+\n+\t  if (check_dtio_proc (dtp, f))\n+\t    return;\n \t  if (require_type (dtp, BT_CLASS, type, f))\n \t    return;\n \t  int unit = dtp->u.p.current_unit->unit_number;\n@@ -1938,8 +1961,12 @@ formatted_transfer_scalar_write (st_parameter_dt *dtp, bt type, void *p, int kin\n \t      child_iomsg_len = IOMSG_LEN;\n \t    }\n \n+\t  if (check_dtio_proc (dtp, f))\n+\t    return;\n+\n \t  /* Call the user defined formatted WRITE procedure.  */\n \t  dtp->u.p.current_unit->child_dtio++;\n+\n \t  dtp->u.p.fdtio_ptr (p, &unit, iotype, f->u.udf.vlist,\n \t\t\t      child_iostat, child_iomsg,\n \t\t\t      iotype_len, child_iomsg_len);"}]}