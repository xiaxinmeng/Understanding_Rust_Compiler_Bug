{"sha": "cab37c89d1d443c24ad189bb8b62f5665ba829ad", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FiMzdjODlkMWQ0NDNjMjRhZDE4OWJiOGI2MmY1NjY1YmE4MjlhZA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2013-12-12T08:52:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2013-12-12T08:52:06Z"}, "message": "re PR libgomp/59467 (copyprivate in the fortran testsuite)\n\n\tPR libgomp/59467\n\t* gimplify.c (omp_check_private): Add copyprivate argument, if it\n\tis true, don't check omp_privatize_by_reference.\n\t(gimplify_scan_omp_clauses): For OMP_CLAUSE_COPYPRIVATE verify\n\tdecl is private in outer context.  Adjust omp_check_private caller.\n\n\t* gfortran.dg/gomp/pr59467.f90: New test.\n\t* c-c++-common/gomp/pr59467.c: New test.\n\n\t* testsuite/libgomp.fortran/crayptr2.f90: Add private (d) clause to\n\t!$omp parallel.\n\nFrom-SVN: r205922", "tree": {"sha": "5b5f9bb96f851af0b0a2ebcbf289d3324fd65c0a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5b5f9bb96f851af0b0a2ebcbf289d3324fd65c0a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cab37c89d1d443c24ad189bb8b62f5665ba829ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab37c89d1d443c24ad189bb8b62f5665ba829ad", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cab37c89d1d443c24ad189bb8b62f5665ba829ad", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cab37c89d1d443c24ad189bb8b62f5665ba829ad/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2207d6514ad71067f17fb0887ac51a47b57b24b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2207d6514ad71067f17fb0887ac51a47b57b24b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2207d6514ad71067f17fb0887ac51a47b57b24b"}], "stats": {"total": 149, "additions": 144, "deletions": 5}, "files": [{"sha": "26266a1f35a1bba5e99a812eb2d07a51815dd1b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab37c89d1d443c24ad189bb8b62f5665ba829ad/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab37c89d1d443c24ad189bb8b62f5665ba829ad/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cab37c89d1d443c24ad189bb8b62f5665ba829ad", "patch": "@@ -1,3 +1,11 @@\n+2013-12-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/59467\n+\t* gimplify.c (omp_check_private): Add copyprivate argument, if it\n+\tis true, don't check omp_privatize_by_reference.\n+\t(gimplify_scan_omp_clauses): For OMP_CLAUSE_COPYPRIVATE verify\n+\tdecl is private in outer context.  Adjust omp_check_private caller.\n+\n 2013-12-11  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/59446"}, {"sha": "1ca847ac7597b9ced2ed2014d2638a78aa9b5df2", "filename": "gcc/gimplify.c", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab37c89d1d443c24ad189bb8b62f5665ba829ad/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab37c89d1d443c24ad189bb8b62f5665ba829ad/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=cab37c89d1d443c24ad189bb8b62f5665ba829ad", "patch": "@@ -5817,7 +5817,7 @@ omp_is_private (struct gimplify_omp_ctx *ctx, tree decl, bool simd)\n    region's REDUCTION clause.  */\n \n static bool\n-omp_check_private (struct gimplify_omp_ctx *ctx, tree decl)\n+omp_check_private (struct gimplify_omp_ctx *ctx, tree decl, bool copyprivate)\n {\n   splay_tree_node n;\n \n@@ -5826,8 +5826,11 @@ omp_check_private (struct gimplify_omp_ctx *ctx, tree decl)\n       ctx = ctx->outer_context;\n       if (ctx == NULL)\n \treturn !(is_global_var (decl)\n-\t\t /* References might be private, but might be shared too.  */\n-\t\t || lang_hooks.decls.omp_privatize_by_reference (decl));\n+\t\t /* References might be private, but might be shared too,\n+\t\t    when checking for copyprivate, assume they might be\n+\t\t    private, otherwise assume they might be shared.  */\n+\t\t || (!copyprivate\n+\t\t     && lang_hooks.decls.omp_privatize_by_reference (decl)));\n \n       if ((ctx->region_type & (ORT_TARGET | ORT_TARGET_DATA)) != 0)\n \tcontinue;\n@@ -6037,12 +6040,36 @@ gimplify_scan_omp_clauses (tree *list_p, gimple_seq *pre_p,\n \t      remove = true;\n \t      break;\n \t    }\n+\t  if (OMP_CLAUSE_CODE (c) == OMP_CLAUSE_COPYPRIVATE\n+\t      && !remove\n+\t      && !omp_check_private (ctx, decl, true))\n+\t    {\n+\t      remove = true;\n+\t      if (is_global_var (decl))\n+\t\t{\n+\t\t  if (DECL_THREAD_LOCAL_P (decl))\n+\t\t    remove = false;\n+\t\t  else if (DECL_HAS_VALUE_EXPR_P (decl))\n+\t\t    {\n+\t\t      tree value = get_base_address (DECL_VALUE_EXPR (decl));\n+\n+\t\t      if (value\n+\t\t\t  && DECL_P (value)\n+\t\t\t  && DECL_THREAD_LOCAL_P (value))\n+\t\t\tremove = false;\n+\t\t    }\n+\t\t}\n+\t      if (remove)\n+\t\terror_at (OMP_CLAUSE_LOCATION (c),\n+\t\t\t  \"copyprivate variable %qE is not threadprivate\"\n+\t\t\t  \" or private in outer context\", DECL_NAME (decl));\n+\t    }\n \tdo_notice:\n \t  if (outer_ctx)\n \t    omp_notice_variable (outer_ctx, decl, true);\n \t  if (check_non_private\n \t      && region_type == ORT_WORKSHARE\n-\t      && omp_check_private (ctx, decl))\n+\t      && omp_check_private (ctx, decl, false))\n \t    {\n \t      error (\"%s variable %qE is private in outer context\",\n \t\t     check_non_private, DECL_NAME (decl));"}, {"sha": "b91e83f48bc074c2dd7ed27460616fb91de5b582", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab37c89d1d443c24ad189bb8b62f5665ba829ad/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab37c89d1d443c24ad189bb8b62f5665ba829ad/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cab37c89d1d443c24ad189bb8b62f5665ba829ad", "patch": "@@ -1,3 +1,9 @@\n+2013-12-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/59467\n+\t* gfortran.dg/gomp/pr59467.f90: New test.\n+\t* c-c++-common/gomp/pr59467.c: New test.\n+\n 2013-12-12  Ryan Mansfield  <rmansfield@qnx.com>\n \n \tPR testsuite/59442"}, {"sha": "475182a6236da48dfb2bd787f11171b606fb7636", "filename": "gcc/testsuite/c-c++-common/gomp/pr59467.c", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab37c89d1d443c24ad189bb8b62f5665ba829ad/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr59467.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab37c89d1d443c24ad189bb8b62f5665ba829ad/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr59467.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fpr59467.c?ref=cab37c89d1d443c24ad189bb8b62f5665ba829ad", "patch": "@@ -0,0 +1,68 @@\n+/* PR libgomp/59467 */\n+\n+int v;\n+\n+void\n+foo (void)\n+{\n+  int x = 0, y = 0;\n+  #pragma omp parallel\n+  {\n+    int z;\n+    #pragma omp single copyprivate (x)\t/* { dg-error \"is not threadprivate or private in outer context\" } */\n+    {\n+      #pragma omp atomic write\n+\tx = 6;\n+    }\n+    #pragma omp atomic read\n+    z = x;\n+    #pragma omp atomic\n+    y += z;\n+  }\n+  #pragma omp parallel\n+  {\n+    int z;\n+    #pragma omp single copyprivate (v)\t/* { dg-error \"is not threadprivate or private in outer context\" } */\n+    {\n+      #pragma omp atomic write\n+\tv = 6;\n+    }\n+    #pragma omp atomic read\n+    z = v;\n+    #pragma omp atomic\n+    y += z;\n+  }\n+  #pragma omp parallel private (x)\n+  {\n+    int z;\n+    #pragma omp single copyprivate (x)\n+    {\n+      #pragma omp atomic write\n+\tx = 6;\n+    }\n+    #pragma omp atomic read\n+    z = x;\n+    #pragma omp atomic\n+    y += z;\n+  }\n+  x = 0;\n+  #pragma omp parallel reduction (+:x)\n+  {\n+    #pragma omp single copyprivate (x)\n+    {\n+      #pragma omp atomic write\n+\tx = 6;\n+    }\n+    #pragma omp atomic\n+    y += x;\n+  }\n+  #pragma omp single copyprivate (x)\n+  {\n+    x = 7;\n+  }\n+  #pragma omp single copyprivate (v)\t/* { dg-error \"is not threadprivate or private in outer context\" } */\n+  {\n+    #pragma omp atomic write\n+      v = 6;\n+  }\n+}"}, {"sha": "e69c9eb49a02fbf3cdd45ce144bba8fa32e4e4e5", "filename": "gcc/testsuite/gfortran.dg/gomp/pr59467.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab37c89d1d443c24ad189bb8b62f5665ba829ad/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr59467.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab37c89d1d443c24ad189bb8b62f5665ba829ad/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr59467.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgomp%2Fpr59467.f90?ref=cab37c89d1d443c24ad189bb8b62f5665ba829ad", "patch": "@@ -0,0 +1,24 @@\n+! PR libgomp/59467\n+! { dg-do compile }\n+! { dg-options \"-fopenmp\" }\n+  FUNCTION t()\n+    INTEGER :: a, b, t\n+    a = 0\n+    b = 0\n+    !$OMP PARALLEL REDUCTION(+:b)\n+      !$OMP SINGLE\t! { dg-error \"is not threadprivate or private in outer context\" }\n+        !$OMP ATOMIC WRITE\n+        a = 6\n+      !$OMP END SINGLE COPYPRIVATE (a)\n+      b = a\n+    !$OMP END PARALLEL\n+    t = b\n+    b = 0\n+    !$OMP PARALLEL REDUCTION(+:b)\n+      !$OMP SINGLE\n+        !$OMP ATOMIC WRITE\n+        b = 6\n+      !$OMP END SINGLE COPYPRIVATE (b)\n+    !$OMP END PARALLEL\n+    t = t + b\n+  END FUNCTION"}, {"sha": "bdcc930d97bd604704f8dbe45cbabcc56406d2d5", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab37c89d1d443c24ad189bb8b62f5665ba829ad/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab37c89d1d443c24ad189bb8b62f5665ba829ad/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=cab37c89d1d443c24ad189bb8b62f5665ba829ad", "patch": "@@ -1,3 +1,9 @@\n+2013-12-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR libgomp/59467\n+\t* testsuite/libgomp.fortran/crayptr2.f90: Add private (d) clause to\n+\t!$omp parallel.\n+\n 2013-11-07  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* testsuite/lib/libgomp.exp (libgomp_init): Don't add -fopenmp to"}, {"sha": "c88cc7ab884af1c359d10a0b1258329a4155914b", "filename": "libgomp/testsuite/libgomp.fortran/crayptr2.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cab37c89d1d443c24ad189bb8b62f5665ba829ad/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fcrayptr2.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cab37c89d1d443c24ad189bb8b62f5665ba829ad/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fcrayptr2.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.fortran%2Fcrayptr2.f90?ref=cab37c89d1d443c24ad189bb8b62f5665ba829ad", "patch": "@@ -12,7 +12,7 @@\n   b = 2\n   c = 3\n   l = .false.\n-!$omp parallel num_threads (3) reduction (.or.:l)\n+!$omp parallel num_threads (3) reduction (.or.:l) private (d)\n   if (omp_get_thread_num () .eq. 0) then\n     ip = loc (a)\n   elseif (omp_get_thread_num () .eq. 1) then"}]}