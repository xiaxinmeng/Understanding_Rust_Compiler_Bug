{"sha": "03307888f71f81829bc96f569b927a825e5ab2f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMzMDc4ODhmNzFmODE4MjliYzk2ZjU2OWI5MjdhODI1ZTVhYjJmNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2003-05-13T18:58:56Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2003-05-13T18:58:56Z"}, "message": "tree.h (STRIP_MAIN_TYPE_NOPS): New macro.\n\n        * tree.h (STRIP_MAIN_TYPE_NOPS): New macro.\n\n        * tree.c (iterative_hash_expr): New fn.\n\n        * c-semantics.c (emit_local_var): Don't mess with temp slots if\n        there's no initializer.\n\nFrom-SVN: r66775", "tree": {"sha": "38e4eda90974c27801ffbbf2262cd0f625dedcde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/38e4eda90974c27801ffbbf2262cd0f625dedcde"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03307888f71f81829bc96f569b927a825e5ab2f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03307888f71f81829bc96f569b927a825e5ab2f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03307888f71f81829bc96f569b927a825e5ab2f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03307888f71f81829bc96f569b927a825e5ab2f4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d660cefe65aba85a809c01e104b1480df13952d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d660cefe65aba85a809c01e104b1480df13952d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d660cefe65aba85a809c01e104b1480df13952d1"}], "stats": {"total": 109, "additions": 103, "deletions": 6}, "files": [{"sha": "0d53c1a2f7219e92eee76b270aeeefb534482765", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03307888f71f81829bc96f569b927a825e5ab2f4/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03307888f71f81829bc96f569b927a825e5ab2f4/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03307888f71f81829bc96f569b927a825e5ab2f4", "patch": "@@ -1,3 +1,12 @@\n+2003-05-13  Jason Merrill  <jason@redhat.com>\n+\n+\t* tree.h (STRIP_MAIN_TYPE_NOPS): New macro.\n+\n+\t* tree.c (iterative_hash_expr): New fn.\n+\n+\t* c-semantics.c (emit_local_var): Don't mess with temp slots if\n+\tthere's no initializer.\n+\n 2003-05-13  Richard Sandiford  <rsandifo@redhat.com>\n \n \t* final.c (final_scan_insn): Apply the effects of frame-related"}, {"sha": "91ab8738033b1d5f8ed7c12eecfc67ea8a9fdb01", "filename": "gcc/c-semantics.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03307888f71f81829bc96f569b927a825e5ab2f4/gcc%2Fc-semantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03307888f71f81829bc96f569b927a825e5ab2f4/gcc%2Fc-semantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-semantics.c?ref=03307888f71f81829bc96f569b927a825e5ab2f4", "patch": "@@ -286,14 +286,17 @@ emit_local_var (decl)\n \texpand_decl (decl);\n     }\n \n-  /* Actually do the initialization.  */\n-  if (stmts_are_full_exprs_p ())\n-    expand_start_target_temps ();\n+  if (DECL_INITIAL (decl))\n+    {\n+      /* Actually do the initialization.  */\n+      if (stmts_are_full_exprs_p ())\n+\texpand_start_target_temps ();\n \n-  expand_decl_init (decl);\n+      expand_decl_init (decl);\n \n-  if (stmts_are_full_exprs_p ())\n-    expand_end_target_temps ();\n+      if (stmts_are_full_exprs_p ())\n+\texpand_end_target_temps ();\n+    }\n }\n \n /* Helper for generating the RTL at the beginning of a scope.  */"}, {"sha": "5ae362cc9d5e3a5fa15d12b4dfb4e82cd784d8c6", "filename": "gcc/tree.c", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03307888f71f81829bc96f569b927a825e5ab2f4/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03307888f71f81829bc96f569b927a825e5ab2f4/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=03307888f71f81829bc96f569b927a825e5ab2f4", "patch": "@@ -3491,6 +3491,79 @@ compare_tree_int (t, u)\n   else\n     return 1;\n }\n+\n+/* Generate a hash value for an expression.  This can be used iteratively\n+   by passing a previous result as the \"val\" argument.\n+\n+   This function is intended to produce the same hash for expressions which\n+   would compare equal using operand_equal_p.  */\n+\n+hashval_t\n+iterative_hash_expr (tree t, hashval_t val)\n+{\n+  int i;\n+  enum tree_code code;\n+  char class;\n+\n+  if (t == NULL_TREE)\n+    return iterative_hash_object (t, val);\n+\n+  code = TREE_CODE (t);\n+  class = TREE_CODE_CLASS (code);\n+\n+  if (class == 'd')\n+    {\n+      /* Decls we can just compare by pointer.  */\n+      val = iterative_hash_object (t, val);\n+    }\n+  else if (class == 'c')\n+    {\n+      /* Alas, constants aren't shared, so we can't rely on pointer\n+\t identity.  */\n+      if (code == INTEGER_CST)\n+\t{\n+\t  val = iterative_hash_object (TREE_INT_CST_LOW (t), val);\n+\t  val = iterative_hash_object (TREE_INT_CST_HIGH (t), val);\n+\t}\n+      else if (code == REAL_CST)\n+\tval = iterative_hash (TREE_REAL_CST_PTR (t),\n+\t\t\t      sizeof (REAL_VALUE_TYPE), val);\n+      else if (code == STRING_CST)\n+\tval = iterative_hash (TREE_STRING_POINTER (t),\n+\t\t\t      TREE_STRING_LENGTH (t), val);\n+      else if (code == COMPLEX_CST)\n+\t{\n+\t  val = iterative_hash_expr (TREE_REALPART (t), val);\n+\t  val = iterative_hash_expr (TREE_IMAGPART (t), val);\n+\t}\n+      else if (code == VECTOR_CST)\n+\tval = iterative_hash_expr (TREE_VECTOR_CST_ELTS (t), val);\n+      else\n+\tabort ();\n+    }\n+  else if (IS_EXPR_CODE_CLASS (class) || class == 'r')\n+    {\n+      val = iterative_hash_object (code, val);\n+\n+      if (code == NOP_EXPR || code == CONVERT_EXPR\n+\t  || code == NON_LVALUE_EXPR)\n+\tval = iterative_hash_object (TREE_TYPE (t), val);\n+  \n+      for (i = first_rtl_op (code) - 1; i >= 0; --i)\n+\tval = iterative_hash_expr (TREE_OPERAND (t, i), val);\n+    }\n+  else if (code == TREE_LIST)\n+    {\n+      /* A list of expressions, for a CALL_EXPR or as the elements of a\n+\t VECTOR_CST.  */\n+      for (; t; t = TREE_CHAIN (t))\n+\tval = iterative_hash_expr (TREE_VALUE (t), val);\n+    }\n+  else\n+    abort ();\n+\n+  return val;\n+}\n \f\n /* Constructors for pointer, array and function types.\n    (RECORD_TYPE, UNION_TYPE and ENUMERAL_TYPE nodes are"}, {"sha": "060ecd1118911e719d24850c498209196b193baf", "filename": "gcc/tree.h", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03307888f71f81829bc96f569b927a825e5ab2f4/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03307888f71f81829bc96f569b927a825e5ab2f4/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=03307888f71f81829bc96f569b927a825e5ab2f4", "patch": "@@ -427,6 +427,17 @@ extern void tree_operand_check_failed PARAMS ((int, enum tree_code,\n \t     == TREE_UNSIGNED (TREE_TYPE (TREE_OPERAND (EXP, 0))))) \\\n     (EXP) = TREE_OPERAND (EXP, 0)\n \n+/* Like STRIP_NOPS, but don't alter the TREE_TYPE main variant either.  */\n+\n+#define STRIP_MAIN_TYPE_NOPS(EXP)\t\t\t\t\t\\\n+  while ((TREE_CODE (EXP) == NOP_EXPR\t\t\t\t\t\\\n+\t  || TREE_CODE (EXP) == CONVERT_EXPR\t\t\t\t\\\n+\t  || TREE_CODE (EXP) == NON_LVALUE_EXPR)\t\t\t\\\n+\t && TREE_OPERAND (EXP, 0) != error_mark_node\t\t\t\\\n+\t && (TYPE_MAIN_VARIANT (TREE_TYPE (EXP))\t\t\t\\\n+\t     == TYPE_MAIN_VARIANT (TREE_TYPE (TREE_OPERAND (EXP, 0)))))\t\\\n+    (EXP) = TREE_OPERAND (EXP, 0)\n+\n /* Like STRIP_NOPS, but don't alter the TREE_TYPE either.  */\n \n #define STRIP_TYPE_NOPS(EXP) \\\n@@ -2955,6 +2966,7 @@ extern bool variably_modified_type_p    PARAMS ((tree));\n extern int tree_log2\t\t\tPARAMS ((tree));\n extern int tree_floor_log2\t\tPARAMS ((tree));\n extern int simple_cst_equal\t\tPARAMS ((tree, tree));\n+extern unsigned int iterative_hash_expr\tPARAMS ((tree, unsigned int));\n extern int compare_tree_int\t\tPARAMS ((tree,\n \t\t\t\t\t\t unsigned HOST_WIDE_INT));\n extern int type_list_equal\t\tPARAMS ((tree, tree));"}]}