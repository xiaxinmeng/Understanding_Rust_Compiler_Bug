{"sha": "466183763cd52169d326f0c3a651e8e46adc8b73", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDY2MTgzNzYzY2Q1MjE2OWQzMjZmMGMzYTY1MWU4ZTQ2YWRjOGI3Mw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-12T08:22:29Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-12T08:22:29Z"}, "message": "re PR target/92449 (ICE in extract_insn, at recog.c:2311)\n\n\tPR target/92449\n\t* tree-complex.c (expand_complex_multiplication): If !HONOR_NANS,\n\tdon't emit UNORDERED_EXPR guarded libcall.  Formatting fixes.\n\nFrom-SVN: r278081", "tree": {"sha": "b2d69d807653bbffe599ce955d50a6cdb32f9a4b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2d69d807653bbffe599ce955d50a6cdb32f9a4b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/466183763cd52169d326f0c3a651e8e46adc8b73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466183763cd52169d326f0c3a651e8e46adc8b73", "html_url": "https://github.com/Rust-GCC/gccrs/commit/466183763cd52169d326f0c3a651e8e46adc8b73", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/466183763cd52169d326f0c3a651e8e46adc8b73/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e4722b81a45e797565b700d1a5af9b66ae56adf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4722b81a45e797565b700d1a5af9b66ae56adf0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4722b81a45e797565b700d1a5af9b66ae56adf0"}], "stats": {"total": 27, "additions": 19, "deletions": 8}, "files": [{"sha": "b912abcb6135155c90579e9963fff4061652a355", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466183763cd52169d326f0c3a651e8e46adc8b73/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466183763cd52169d326f0c3a651e8e46adc8b73/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=466183763cd52169d326f0c3a651e8e46adc8b73", "patch": "@@ -1,5 +1,9 @@\n 2019-11-12  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR target/92449\n+\t* tree-complex.c (expand_complex_multiplication): If !HONOR_NANS,\n+\tdon't emit UNORDERED_EXPR guarded libcall.  Formatting fixes.\n+\n \tPR tree-optimization/92452\n \t* tree-vrp.c (vrp_prop::check_array_ref): If TRUNC_DIV_EXPR folds\n \tinto NULL_TREE, set up_bound to NULL_TREE instead of computing"}, {"sha": "804edd11e53a0b74f90ae74acda6f6e2dbacd8a2", "filename": "gcc/tree-complex.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/466183763cd52169d326f0c3a651e8e46adc8b73/gcc%2Ftree-complex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/466183763cd52169d326f0c3a651e8e46adc8b73/gcc%2Ftree-complex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-complex.c?ref=466183763cd52169d326f0c3a651e8e46adc8b73", "patch": "@@ -1144,14 +1144,24 @@ expand_complex_multiplication (gimple_stmt_iterator *gsi, tree type,\n \t      return;\n \t    }\n \n+\t  if (!HONOR_NANS (inner_type))\n+\t    {\n+\t      /* If we are not worrying about NaNs expand to\n+\t\t (ar*br - ai*bi) + i(ar*bi + br*ai) directly.  */\n+\t      expand_complex_multiplication_components (gsi, inner_type,\n+\t\t\t\t\t\t\tar, ai, br, bi,\n+\t\t\t\t\t\t\t&rr, &ri);\n+\t      break;\n+\t    }\n+\n \t  /* Else, expand x = a * b into\n \t     x = (ar*br - ai*bi) + i(ar*bi + br*ai);\n \t     if (isunordered (__real__ x, __imag__ x))\n \t\tx = __muldc3 (a, b);  */\n \n \t  tree tmpr, tmpi;\n \t  expand_complex_multiplication_components (gsi, inner_type, ar, ai,\n-\t\t\t\t\t\t     br, bi, &tmpr, &tmpi);\n+\t\t\t\t\t\t    br, bi, &tmpr, &tmpi);\n \n \t  gimple *check\n \t    = gimple_build_cond (UNORDERED_EXPR, tmpr, tmpi,\n@@ -1167,13 +1177,12 @@ expand_complex_multiplication (gimple_stmt_iterator *gsi, tree type,\n \t    = insert_cond_bb (gsi_bb (*gsi), gsi_stmt (*gsi), check,\n \t\t\t      profile_probability::very_unlikely ());\n \n-\n \t  gimple_stmt_iterator cond_bb_gsi = gsi_last_bb (cond_bb);\n \t  gsi_insert_after (&cond_bb_gsi, gimple_build_nop (), GSI_NEW_STMT);\n \n \t  tree libcall_res\n \t    = expand_complex_libcall (&cond_bb_gsi, type, ar, ai, br,\n-\t\t\t\t       bi, MULT_EXPR, false);\n+\t\t\t\t      bi, MULT_EXPR, false);\n \t  tree cond_real = gimplify_build1 (&cond_bb_gsi, REALPART_EXPR,\n \t\t\t\t\t    inner_type, libcall_res);\n \t  tree cond_imag = gimplify_build1 (&cond_bb_gsi, IMAGPART_EXPR,\n@@ -1190,20 +1199,18 @@ expand_complex_multiplication (gimple_stmt_iterator *gsi, tree type,\n \t  edge orig_to_join = find_edge (orig_bb, join_bb);\n \n \t  gphi *real_phi = create_phi_node (rr, gsi_bb (*gsi));\n-\t  add_phi_arg (real_phi, cond_real, cond_to_join,\n-\t\t\tUNKNOWN_LOCATION);\n+\t  add_phi_arg (real_phi, cond_real, cond_to_join, UNKNOWN_LOCATION);\n \t  add_phi_arg (real_phi, tmpr, orig_to_join, UNKNOWN_LOCATION);\n \n \t  gphi *imag_phi = create_phi_node (ri, gsi_bb (*gsi));\n-\t  add_phi_arg (imag_phi, cond_imag, cond_to_join,\n-\t\t\tUNKNOWN_LOCATION);\n+\t  add_phi_arg (imag_phi, cond_imag, cond_to_join, UNKNOWN_LOCATION);\n \t  add_phi_arg (imag_phi, tmpi, orig_to_join, UNKNOWN_LOCATION);\n \t}\n       else\n \t/* If we are not worrying about NaNs expand to\n \t  (ar*br - ai*bi) + i(ar*bi + br*ai) directly.  */\n \texpand_complex_multiplication_components (gsi, inner_type, ar, ai,\n-\t\t\t\t\t\t      br, bi, &rr, &ri);\n+\t\t\t\t\t\t  br, bi, &rr, &ri);\n       break;\n \n     default:"}]}