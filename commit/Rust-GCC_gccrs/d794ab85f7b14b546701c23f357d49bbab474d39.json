{"sha": "d794ab85f7b14b546701c23f357d49bbab474d39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc5NGFiODVmN2IxNGI1NDY3MDFjMjNmMzU3ZDQ5YmJhYjQ3NGQzOQ==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2018-11-28T21:25:06Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2018-11-28T21:25:06Z"}, "message": "[PR c++/87531] operator= lookup in templates\n\nhttps://gcc.gnu.org/ml/gcc-patches/2018-11/msg02301.html\n\tPR c++/87531\n\t* class.c (finish_struct): In a template, add artificial using\n\tdecl for operator=.\n\n\t* g++.dg/lookup/pr87531.C: New.\n\nFrom-SVN: r266590", "tree": {"sha": "af6a1973befb50407eadb8f349b613955ef97097", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/af6a1973befb50407eadb8f349b613955ef97097"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d794ab85f7b14b546701c23f357d49bbab474d39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d794ab85f7b14b546701c23f357d49bbab474d39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d794ab85f7b14b546701c23f357d49bbab474d39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d794ab85f7b14b546701c23f357d49bbab474d39/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "410902c31caa82cf414f020b5db51ddc20159f20", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/410902c31caa82cf414f020b5db51ddc20159f20", "html_url": "https://github.com/Rust-GCC/gccrs/commit/410902c31caa82cf414f020b5db51ddc20159f20"}], "stats": {"total": 97, "additions": 97, "deletions": 0}, "files": [{"sha": "8b8a857bd3710cbb59a48d5466b5ea8534acd921", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d794ab85f7b14b546701c23f357d49bbab474d39/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d794ab85f7b14b546701c23f357d49bbab474d39/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=d794ab85f7b14b546701c23f357d49bbab474d39", "patch": "@@ -1,3 +1,9 @@\n+2018-11-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/87531\n+\t* class.c (finish_struct): In a template, add artificial using\n+\tdecl for operator=.\n+\n 2018-11-28  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* except.c (do_allocate_exception): Annotate __cxa_allocate_exception"}, {"sha": "57261511a9001c8a72b5afe688b1520e7d078664", "filename": "gcc/cp/class.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d794ab85f7b14b546701c23f357d49bbab474d39/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d794ab85f7b14b546701c23f357d49bbab474d39/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=d794ab85f7b14b546701c23f357d49bbab474d39", "patch": "@@ -7150,6 +7150,19 @@ finish_struct (tree t, tree attributes)\n \telse if (DECL_DECLARES_FUNCTION_P (x))\n \t  DECL_IN_AGGR_P (x) = false;\n \n+      /* Also add a USING_DECL for operator=.  We know there'll be (at\n+\t least) one, but we don't know the signature(s).  We want name\n+\t lookup not to fail or recurse into bases.  This isn't added\n+\t to the template decl list so we drop this at instantiation\n+\t time.  */\n+      tree ass_op = build_lang_decl (USING_DECL, assign_op_identifier,\n+\t\t\t\t     NULL_TREE);\n+      USING_DECL_SCOPE (ass_op) = t;\n+      DECL_DEPENDENT_P (ass_op) = true;\n+      DECL_ARTIFICIAL (ass_op) = true;\n+      DECL_CHAIN (ass_op) = TYPE_FIELDS (t);\n+      TYPE_FIELDS (t) = ass_op;\n+\n       TYPE_SIZE (t) = bitsize_zero_node;\n       TYPE_SIZE_UNIT (t) = size_zero_node;\n       /* COMPLETE_TYPE_P is now true.  */"}, {"sha": "740671978b8bb25a072aefa4586e4c211322f786", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d794ab85f7b14b546701c23f357d49bbab474d39/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d794ab85f7b14b546701c23f357d49bbab474d39/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d794ab85f7b14b546701c23f357d49bbab474d39", "patch": "@@ -1,3 +1,8 @@\n+2018-11-28  Nathan Sidwell  <nathan@acm.org>\n+\n+\tPR c++/87531\n+\t* g++.dg/lookup/pr87531.C: New.\n+\n 2018-11-28  Jan Hubicka  <jh@suse.cz>\n \n \t* gcc.dg/predict-13.c: Update template."}, {"sha": "4765343b68af829c1d2ae716308e891474d04278", "filename": "gcc/testsuite/g++.dg/lookup/pr87531.C", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d794ab85f7b14b546701c23f357d49bbab474d39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr87531.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d794ab85f7b14b546701c23f357d49bbab474d39/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr87531.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flookup%2Fpr87531.C?ref=d794ab85f7b14b546701c23f357d49bbab474d39", "patch": "@@ -0,0 +1,73 @@\n+// PR c+/87531 lookup of operator= in templates\n+// { dg-do run }\n+\n+struct Base {\n+  void operator= (Base const&);\n+};\n+\n+void Base::operator= (Base const &)\n+{\n+}\n+\n+template <typename T>\n+struct Derived : Base\n+{\n+  T v;\n+\n+  Derived() : v (0) {}\n+  Derived(T v_) : v (v_) {}\n+\n+  T &assign1 (Derived const& rhs)\n+  {\n+    operator=(rhs); // erroneously bound to Base::operator=\n+    return v;\n+  }\n+\n+  T &assign2 (Derived const& rhs)\n+  {\n+    this->operator=(rhs); // erroneously bound to Base::operator=\n+    return v;\n+  }\n+};\n+\n+template <typename T>\n+struct Single\n+{\n+  T v;\n+\n+  Single () : v (0) {}\n+  Single (T v_) : v (v_) {}\n+\n+  T &assign1 (Single const& rhs)\n+  {\n+    operator=(rhs); // lookup failed\n+    return v;\n+  }\n+\n+  T &assign2 (Single const& rhs)\n+  {\n+    this->operator=(rhs); // Marked as dependent, happened to work\n+    return v;\n+  }\n+};\n+\n+int main()\n+{\n+  Derived<int> a, b(123);\n+\n+  if (a.assign1 (b) != 123)\n+    return 1;\n+\n+  if (a.assign2 (b) != 123)\n+    return 2;\n+\n+  Single<int> c, d(123);\n+  \n+  if (c.assign1 (d) != 123)\n+    return 3;\n+\n+  if (c.assign2 (d) != 123)\n+    return 4;\n+\n+  return 0;\n+}"}]}