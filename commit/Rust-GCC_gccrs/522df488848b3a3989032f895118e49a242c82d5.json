{"sha": "522df488848b3a3989032f895118e49a242c82d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTIyZGY0ODg4NDhiM2EzOTg5MDMyZjg5NTExOGU0OWEyNDJjODJkNQ==", "commit": {"author": {"name": "Dan Nicolaescu", "email": "dann@ics.uci.edu", "date": "2003-08-27T00:49:19Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2003-08-27T00:49:19Z"}, "message": "parser.c (struct cp_token): Use enum bitfields.\n\n2003-08-26  Dan Nicolaescu  <dann@ics.uci.edu>\n\n\t* parser.c (struct cp_token): Use enum bitfields.\n\t(CP_TOKEN_BLOCK_NUM_TOKENS): Make sure cp_token_block fits in a\n\t512B allocation unit.\n\t(cp_parser_token_tree_map_node): Use enum bitfields.\n\nFrom-SVN: r70837", "tree": {"sha": "5a0b3f9f8c514eb41ab9de7c968c15aa3bd2051a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5a0b3f9f8c514eb41ab9de7c968c15aa3bd2051a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/522df488848b3a3989032f895118e49a242c82d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522df488848b3a3989032f895118e49a242c82d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/522df488848b3a3989032f895118e49a242c82d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/522df488848b3a3989032f895118e49a242c82d5/comments", "author": null, "committer": null, "parents": [{"sha": "82ba99d59e56c2d0774c267624583341a96b681f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82ba99d59e56c2d0774c267624583341a96b681f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82ba99d59e56c2d0774c267624583341a96b681f"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "a779d62b40291f2bfa1fc08f09104429c15857e1", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522df488848b3a3989032f895118e49a242c82d5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522df488848b3a3989032f895118e49a242c82d5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=522df488848b3a3989032f895118e49a242c82d5", "patch": "@@ -1,3 +1,10 @@\n+2003-08-26  Dan Nicolaescu  <dann@ics.uci.edu>\n+\n+\t* parser.c (struct cp_token): Use enum bitfields.\n+\t(CP_TOKEN_BLOCK_NUM_TOKENS): Make sure cp_token_block fits in a\n+\t512B allocation unit.\n+\t(cp_parser_token_tree_map_node): Use enum bitfields.\n+\n 2003-08-26  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/11871\n@@ -224,7 +231,7 @@\n \t(cp_parser_elaborated_type_specifier): Adjust call to\n \tcheck_elaborated_type_specifier.\n \t* typeck2.c (build_functional_cast): Do not perform name lookups.\n-\t\n+\n \tPR c++/10717\n \t* decl.c (expand_static_init): Remove unncessary code.\n \n@@ -283,7 +290,7 @@ Sun Aug 17 10:05:38 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \tbuild_non_dependent_expr.\n \t* error.c (dump_expr) <NON_DEPENDENT_EXPR case>: Dump the operand.\n \t* pt.c (build_non_dependent_expr): Set operand.\n-\t\n+\n 2003-08-14  Jan Hubicka  <jh@suse.cz>\n \n \t* decl2.c (mark_member_pointers): Rename to...\n@@ -350,7 +357,7 @@ Thu Aug 14 12:19:25 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t(cp_parser_function_definition): Likewise.\n \t(cp_parser_member_declaration): Likewise.\n \t(cp_parser_single_declaration): Likewise.\n-\t\n+\n \t* cp-tree.h (lang_type_class): Remove has_call_overloaded,\n \thas_array_ref_overloaded, has_arrow_overloaded, and got_semicolon.\n \t(TYPE_OVERLOADS_CALL_EXPR): Remove.\n@@ -375,12 +382,12 @@ Thu Aug 14 12:19:25 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* ptree.c (cxx_print_type): Do not print them.\n \t* semantics.c (finish_member_class_template): Do not call\n \tnote_list_got_semicolon.\n-\t\n+\n 2003-08-11  Aldy Hernandez  <aldyh@redhat.com>\n- \n-        * call.c (standard_conversion): Opaque pointers interconvert.\n- \n-        * testsuite/g++.dg/other/opaque-3.C: New.\n+\n+\t* call.c (standard_conversion): Opaque pointers interconvert.\n+\n+\t* testsuite/g++.dg/other/opaque-3.C: New.\n \n 2003-08-11  Mark Mitchell  <mark@codesourcery.com>\n \n@@ -445,7 +452,7 @@ Thu Aug 14 12:19:25 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t* call.c (convert_like_real): Add rvalue binding error message.\n \t* error.c (dump_expr) <NOP_EXPR case>: Detect when the no expr is\n \treally a cast.\n-\t\n+\n \tPR c++/10530\n \t* pt.c (dependent_type_p_r): A dependent template-id is a class\n \ttype with dependent template arguments, or a bound template\n@@ -613,10 +620,10 @@ Thu Aug 14 12:19:25 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t(begin_stmt_expr): Clear last_expr_type.\n \t(finish_stmt_expr_expr): New.\n \t(finish_stmt_expr): Process the value expression.\n-\t\n+\n \t* typeck.c (build_compound_expr): If RHS is a TARGET_EXPR, put the\n \tcompound expr inside the target's initializer.\n-\t\n+\n \tPR c++/11525\n \t* parser.c (cp_parser_primary_expression): Do not set\n \tnon-constant-p merely because it is a dependent scope.\n@@ -973,7 +980,7 @@ Mon Jul 28 23:55:10 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \t(strip_all_pointer_quals): Remove.\n \t* typeck2.c (digest_init): Adjust pointer-to-member handling.\n \t(build_m_component_ref): Likewise.\n-\t\n+\n 2003-07-22  Wolfgang Bangerth  <bangerth@dealii.org>\n \n \t* lex.c (unqualified_fn_lookup_error): Mention that the error"}, {"sha": "735d592651d6f97e5e00d08252d343e3dab7f0e4", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/522df488848b3a3989032f895118e49a242c82d5/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/522df488848b3a3989032f895118e49a242c82d5/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=522df488848b3a3989032f895118e49a242c82d5", "patch": "@@ -68,19 +68,20 @@\n typedef struct cp_token GTY (())\n {\n   /* The kind of token.  */\n-  enum cpp_ttype type;\n-  /* The value associated with this token, if any.  */\n-  tree value;\n+  enum cpp_ttype type : 8;\n   /* If this token is a keyword, this value indicates which keyword.\n      Otherwise, this value is RID_MAX.  */\n-  enum rid keyword;\n+  enum rid keyword : 8;\n+  /* The value associated with this token, if any.  */\n+  tree value;\n   /* The location at which this token was found.  */\n   location_t location;\n } cp_token;\n \n-/* The number of tokens in a single token block.  */\n+/* The number of tokens in a single token block.\n+   Computed so that cp_token_block fits in a 512B allocation unit.  */\n \n-#define CP_TOKEN_BLOCK_NUM_TOKENS 32\n+#define CP_TOKEN_BLOCK_NUM_TOKENS ((512 - 3*sizeof (char*))/sizeof (cp_token))\n \n /* A group of tokens.  These groups are chained together to store\n    large numbers of tokens.  (For example, a token block is created\n@@ -1062,9 +1063,9 @@ typedef enum cp_parser_declarator_kind\n typedef struct cp_parser_token_tree_map_node\n {\n   /* The token type.  */\n-  enum cpp_ttype token_type;\n+  enum cpp_ttype token_type : 8;\n   /* The corresponding tree code.  */\n-  enum tree_code tree_type;\n+  enum tree_code tree_type : 8;\n } cp_parser_token_tree_map_node;\n \n /* A complete map consists of several ordinary entries, followed by a"}]}