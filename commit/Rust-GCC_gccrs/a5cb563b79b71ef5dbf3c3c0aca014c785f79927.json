{"sha": "a5cb563b79b71ef5dbf3c3c0aca014c785f79927", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVjYjU2M2I3OWI3MWVmNWRiZjNjM2MwYWNhMDE0Yzc4NWY3OTkyNw==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2009-04-18T15:28:40Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2009-04-18T15:28:40Z"}, "message": "re PR preprocessor/39647 (Syntax checks in #line not quite right)\n\nlibcpp:\n\tPR preprocessor/39647\n\t* directives.c (check_eol): Add parameter expand.\n\t(do_undef, parse_include, do_line, do_linemarker, do_ident,\n\tdo_pragma_once, do_pragma_system_header, do_ifdef, do_ifndef,\n\tdo_else, do_endif, do_assert, do_unassert): All callers changed.\n\tPass true from do_line, false elsewhere.\n\ngcc/testsuite:\n\t* gcc.dg/cpp/line7.c: New test.\n\nFrom-SVN: r146316", "tree": {"sha": "77102eabd471055daec6714f7c09468dba337166", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77102eabd471055daec6714f7c09468dba337166"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5cb563b79b71ef5dbf3c3c0aca014c785f79927", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5cb563b79b71ef5dbf3c3c0aca014c785f79927", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5cb563b79b71ef5dbf3c3c0aca014c785f79927", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5cb563b79b71ef5dbf3c3c0aca014c785f79927/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2586ba4bdaaa47413b9c03ff164d926fe52f8dc1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2586ba4bdaaa47413b9c03ff164d926fe52f8dc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2586ba4bdaaa47413b9c03ff164d926fe52f8dc1"}], "stats": {"total": 70, "additions": 53, "deletions": 17}, "files": [{"sha": "58ea48782cca52ccde12321964a1d7b6311a32c7", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5cb563b79b71ef5dbf3c3c0aca014c785f79927/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5cb563b79b71ef5dbf3c3c0aca014c785f79927/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5cb563b79b71ef5dbf3c3c0aca014c785f79927", "patch": "@@ -1,3 +1,8 @@\n+2009-04-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/39647\n+\t* gcc.dg/cpp/line7.c: New test.\n+\n 2009-04-18  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/39804"}, {"sha": "754727e885f93fdfad622049794e2e79ac48de34", "filename": "gcc/testsuite/gcc.dg/cpp/line7.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5cb563b79b71ef5dbf3c3c0aca014c785f79927/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5cb563b79b71ef5dbf3c3c0aca014c785f79927/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fline7.c?ref=a5cb563b79b71ef5dbf3c3c0aca014c785f79927", "patch": "@@ -0,0 +1,19 @@\n+/* Test #line syntax, including macro expansion and empty macros.  PR\n+   39647.  */\n+\n+/* { dg-do preprocess } */\n+/* { dg-options \"-std=c99 -pedantic-errors\" } */\n+\n+#define EMPTY_OBJ\n+#define EMPTY_FUNC()\n+\n+#define A 12 \"line7.c\"\n+#line A\n+\n+#line EMPTY_OBJ /* { dg-error \"unexpected end of file\" } */\n+#line X /* { dg-error \"is not a positive integer\" } */\n+#line 16 16 /* { dg-error \"is not a valid filename\" } */\n+\n+#line 18 \"line7.c\" EMPTY_OBJ\n+#line 19 \"line7.c\" EMPTY_FUNC()\n+#line 20 \"line7.c\" foo /* { dg-error \"extra tokens at end\" } */"}, {"sha": "ce7bbe059cdbd8da22463643cea946dd008c6eb8", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5cb563b79b71ef5dbf3c3c0aca014c785f79927/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5cb563b79b71ef5dbf3c3c0aca014c785f79927/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a5cb563b79b71ef5dbf3c3c0aca014c785f79927", "patch": "@@ -1,3 +1,12 @@\n+2009-04-18  Joseph Myers  <joseph@codesourcery.com>\n+\n+\tPR preprocessor/39647\n+\t* directives.c (check_eol): Add parameter expand.\n+\t(do_undef, parse_include, do_line, do_linemarker, do_ident,\n+\tdo_pragma_once, do_pragma_system_header, do_ifdef, do_ifndef,\n+\tdo_else, do_endif, do_assert, do_unassert): All callers changed.\n+\tPass true from do_line, false elsewhere.\n+\n 2009-04-12  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR preprocessor/31869"}, {"sha": "9cb8506bb136f718e69ed1125f659fed9fd2001b", "filename": "libcpp/directives.c", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5cb563b79b71ef5dbf3c3c0aca014c785f79927/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5cb563b79b71ef5dbf3c3c0aca014c785f79927/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=a5cb563b79b71ef5dbf3c3c0aca014c785f79927", "patch": "@@ -92,7 +92,7 @@ struct directive\n /* Forward declarations.  */\n \n static void skip_rest_of_line (cpp_reader *);\n-static void check_eol (cpp_reader *);\n+static void check_eol (cpp_reader *, bool);\n static void start_directive (cpp_reader *);\n static void prepare_directive_trad (cpp_reader *);\n static void end_directive (cpp_reader *, int);\n@@ -208,11 +208,14 @@ skip_rest_of_line (cpp_reader *pfile)\n       ;\n }\n \n-/* Ensure there are no stray tokens at the end of a directive.  */\n+/* Ensure there are no stray tokens at the end of a directive.  If\n+   EXPAND is true, tokens macro-expanding to nothing are allowed.  */\n static void\n-check_eol (cpp_reader *pfile)\n+check_eol (cpp_reader *pfile, bool expand)\n {\n-  if (! SEEN_EOL () && _cpp_lex_token (pfile)->type != CPP_EOF)\n+  if (! SEEN_EOL () && (expand\n+\t\t\t? cpp_get_token (pfile)\n+\t\t\t: _cpp_lex_token (pfile))->type != CPP_EOF)\n     cpp_error (pfile, CPP_DL_PEDWARN, \"extra tokens at end of #%s directive\",\n \t       pfile->directive->name);\n }\n@@ -609,7 +612,7 @@ do_undef (cpp_reader *pfile)\n \t}\n     }\n \n-  check_eol (pfile);\n+  check_eol (pfile, false);\n }\n \n /* Undefine a single macro/assertion/whatever.  */\n@@ -721,7 +724,7 @@ parse_include (cpp_reader *pfile, int *pangle_brackets,\n       /* This pragma allows extra tokens after the file name.  */\n     }\n   else if (buf == NULL || CPP_OPTION (pfile, discard_comments))\n-    check_eol (pfile);\n+    check_eol (pfile, false);\n   else\n     {\n       /* If we are not discarding comments, then gather them while\n@@ -911,7 +914,7 @@ do_line (cpp_reader *pfile)\n       if (cpp_interpret_string_notranslate (pfile, &token->val.str, 1,\n \t\t\t\t\t    &s, false))\n \tnew_file = (const char *)s.text;\n-      check_eol (pfile);\n+      check_eol (pfile, true);\n     }\n   else if (token->type != CPP_EOF)\n     {\n@@ -991,7 +994,7 @@ do_linemarker (cpp_reader *pfile)\n \t}\n       pfile->buffer->sysp = new_sysp;\n \n-      check_eol (pfile);\n+      check_eol (pfile, false);\n     }\n   else if (token->type != CPP_EOF)\n     {\n@@ -1068,7 +1071,7 @@ do_ident (cpp_reader *pfile)\n   else if (pfile->cb.ident)\n     pfile->cb.ident (pfile, pfile->directive_line, &str->val.str);\n \n-  check_eol (pfile);\n+  check_eol (pfile, false);\n }\n \n /* Lookup a PRAGMA name in a singly-linked CHAIN.  Returns the\n@@ -1401,7 +1404,7 @@ do_pragma_once (cpp_reader *pfile)\n   if (cpp_in_primary_file (pfile))\n     cpp_error (pfile, CPP_DL_WARNING, \"#pragma once in main file\");\n \n-  check_eol (pfile);\n+  check_eol (pfile, false);\n   _cpp_mark_file_once_only (pfile, pfile->buffer->file);\n }\n \n@@ -1453,7 +1456,7 @@ do_pragma_system_header (cpp_reader *pfile)\n \t       \"#pragma system_header ignored outside include file\");\n   else\n     {\n-      check_eol (pfile);\n+      check_eol (pfile, false);\n       skip_rest_of_line (pfile);\n       cpp_make_system_header (pfile, 1, 0);\n     }\n@@ -1694,7 +1697,7 @@ do_ifdef (cpp_reader *pfile)\n \t\t    pfile->cb.used_undef (pfile, pfile->directive_line, node);\n \t\t}\n \t    }\n-\t  check_eol (pfile);\n+\t  check_eol (pfile, false);\n \t}\n     }\n \n@@ -1730,7 +1733,7 @@ do_ifndef (cpp_reader *pfile)\n \t\t    pfile->cb.used_undef (pfile, pfile->directive_line, node);\n \t\t}\n \t    }\n-\t  check_eol (pfile);\n+\t  check_eol (pfile, false);\n \t}\n     }\n \n@@ -1783,7 +1786,7 @@ do_else (cpp_reader *pfile)\n \n       /* Only check EOL if was not originally skipping.  */\n       if (!ifs->was_skipping && CPP_OPTION (pfile, warn_endif_labels))\n-\tcheck_eol (pfile);\n+\tcheck_eol (pfile, false);\n     }\n }\n \n@@ -1844,7 +1847,7 @@ do_endif (cpp_reader *pfile)\n     {\n       /* Only check EOL if was not originally skipping.  */\n       if (!ifs->was_skipping && CPP_OPTION (pfile, warn_endif_labels))\n-\tcheck_eol (pfile);\n+\tcheck_eol (pfile, false);\n \n       /* If potential control macro, we go back outside again.  */\n       if (ifs->next == 0 && ifs->mi_cmacro)\n@@ -2088,7 +2091,7 @@ do_assert (cpp_reader *pfile)\n \n       node->type = NT_ASSERTION;\n       node->value.answers = new_answer;\n-      check_eol (pfile);\n+      check_eol (pfile, false);\n     }\n }\n \n@@ -2116,7 +2119,7 @@ do_unassert (cpp_reader *pfile)\n \t  if (node->value.answers == 0)\n \t    node->type = NT_VOID;\n \n-\t  check_eol (pfile);\n+\t  check_eol (pfile, false);\n \t}\n       else\n \t_cpp_free_definition (node);"}]}