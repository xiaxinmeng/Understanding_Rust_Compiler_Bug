{"sha": "d118937d79ce5f32fcc7b09acb932e559a2c16e9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDExODkzN2Q3OWNlNWYzMmZjYzdiMDlhY2I5MzJlNTU5YTJjMTZlOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-12-03T03:46:03Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-12-03T03:46:03Z"}, "message": "builtins.c (expand_builtin_strcat, [...]): New functions.\n\n\t* builtins.c (expand_builtin_strcat, expand_builtin_strncat,\n\texpand_builtin_strspn, expand_builtin_strcspn): New functions.\n\t(expand_builtin): Handle BUILT_IN_STRCAT, BUILT_IN_STRNCAT,\n\tBUILT_IN_STRSPN and BUILT_IN_STRCSPN.\n\n\t* builtins.def (BUILT_IN_STRCAT, BUILT_IN_STRNCAT,\n\tBUILT_IN_STRSPN, BUILT_IN_STRCSPN): New entries.\n\n\t* c-common.c (c_common_nodes_and_builtins): Declare builtin\n\tstrcat, strncat, strspn and strcspn.\n\t(string_ftype_string_cstring): Renamed from `string_ftype_ptr_ptr'.\n\n\t* extend.texi (strcat, strcspn, strncat, strspn): Document new\n\tbuiltins.\n\ntestsuite:\n\t* gcc.c-torture/execute/string-opt-9.c: New test.\n\t* gcc.c-torture/execute/string-opt-10.c: Likewise.\n\t* gcc.c-torture/execute/string-opt-11.c: Likewise.\n\t* gcc.c-torture/execute/string-opt-12.c: Likewise.\n\nFrom-SVN: r37964", "tree": {"sha": "24241ef620273494e9e408df936e6f35081239e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/24241ef620273494e9e408df936e6f35081239e8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d118937d79ce5f32fcc7b09acb932e559a2c16e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d118937d79ce5f32fcc7b09acb932e559a2c16e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d118937d79ce5f32fcc7b09acb932e559a2c16e9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d118937d79ce5f32fcc7b09acb932e559a2c16e9/comments", "author": null, "committer": null, "parents": [{"sha": "ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca8034a0ea78638a2c9cdc54b13274fcb78fdfa4"}], "stats": {"total": 545, "additions": 531, "deletions": 14}, "files": [{"sha": "61ac69e7f84cd0c2d0673c2913d9211c505f64a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d118937d79ce5f32fcc7b09acb932e559a2c16e9", "patch": "@@ -1,3 +1,20 @@\n+2000-12-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_strcat, expand_builtin_strncat,\n+\texpand_builtin_strspn, expand_builtin_strcspn): New functions.\n+\t(expand_builtin): Handle BUILT_IN_STRCAT, BUILT_IN_STRNCAT,\n+\tBUILT_IN_STRSPN and BUILT_IN_STRCSPN.\n+\n+\t* builtins.def (BUILT_IN_STRCAT, BUILT_IN_STRNCAT,\n+\tBUILT_IN_STRSPN, BUILT_IN_STRCSPN): New entries.\n+\n+\t* c-common.c (c_common_nodes_and_builtins): Declare builtin\n+\tstrcat, strncat, strspn and strcspn.\n+\t(string_ftype_string_cstring): Renamed from `string_ftype_ptr_ptr'. \n+\n+\t* extend.texi (strcat, strcspn, strncat, strspn): Document new\n+\tbuiltins.\n+\n 2000-12-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* builtins.c (expand_builtin_strcmp): Use const*_rtx when"}, {"sha": "7994f63dcada45d2b8ef046715cfd44eb7401597", "filename": "gcc/builtins.c", "status": "modified", "additions": 234, "deletions": 0, "changes": 234, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=d118937d79ce5f32fcc7b09acb932e559a2c16e9", "patch": "@@ -111,6 +111,14 @@ static rtx expand_builtin_strncmp\tPARAMS ((tree, rtx,\n \t\t\t\t\t\t enum machine_mode));\n static rtx builtin_memcpy_read_str\tPARAMS ((PTR, HOST_WIDE_INT,\n \t\t\t\t\t\t enum machine_mode));\n+static rtx expand_builtin_strcat\tPARAMS ((tree, rtx,\n+\t\t\t\t\t\t enum machine_mode));\n+static rtx expand_builtin_strncat\tPARAMS ((tree, rtx,\n+\t\t\t\t\t\t enum machine_mode));\n+static rtx expand_builtin_strspn\tPARAMS ((tree, rtx,\n+\t\t\t\t\t\t enum machine_mode));\n+static rtx expand_builtin_strcspn\tPARAMS ((tree, rtx,\n+\t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_memcpy\tPARAMS ((tree));\n static rtx expand_builtin_strcpy\tPARAMS ((tree));\n static rtx builtin_strncpy_read_str\tPARAMS ((PTR, HOST_WIDE_INT,\n@@ -2423,6 +2431,206 @@ expand_builtin_strncmp (exp, target, mode)\n   return 0;\n }\n \n+/* Expand expression EXP, which is a call to the strcat builtin.\n+   Return 0 if we failed the caller should emit a normal call,\n+   otherwise try to get the result in TARGET, if convenient.  */\n+static rtx\n+expand_builtin_strcat (arglist, target, mode)\n+     tree arglist;\n+     rtx target;\n+     enum machine_mode mode;\n+{\n+  /* If we need to check memory accesses, call the library function.  */\n+  if (current_function_check_memory_usage)\n+    return 0;\n+\n+  if (arglist == 0\n+      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n+      || TREE_CHAIN (arglist) == 0\n+      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n+\t  != POINTER_TYPE))\n+    return 0;\n+  else\n+    {\n+      tree dst = TREE_VALUE (arglist),\n+\tsrc = TREE_VALUE (TREE_CHAIN (arglist));\n+      const char *p = c_getstr (src);\n+\n+      /* If the string length is zero, return the dst parameter.  */\n+      if (p && *p == '\\0')\n+\treturn expand_expr (dst, target, mode, EXPAND_NORMAL);\n+\n+      return 0;\n+    }\n+}\n+\n+/* Expand expression EXP, which is a call to the strncat builtin.\n+   Return 0 if we failed the caller should emit a normal call,\n+   otherwise try to get the result in TARGET, if convenient.  */\n+static rtx\n+expand_builtin_strncat (arglist, target, mode)\n+     tree arglist;\n+     rtx target;\n+     enum machine_mode mode;\n+{\n+  /* If we need to check memory accesses, call the library function.  */\n+  if (current_function_check_memory_usage)\n+    return 0;\n+\n+  if (arglist == 0\n+      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n+      || TREE_CHAIN (arglist) == 0\n+      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n+\t  != POINTER_TYPE)\n+      || TREE_CHAIN (TREE_CHAIN (arglist)) == 0\n+      || (TREE_CODE (TREE_TYPE (TREE_VALUE\n+\t\t\t\t(TREE_CHAIN (TREE_CHAIN (arglist)))))\n+\t  != INTEGER_TYPE))\n+    return 0;\n+  else\n+    {\n+      tree dst = TREE_VALUE (arglist),\n+\tsrc = TREE_VALUE (TREE_CHAIN (arglist)),\n+\tlen = TREE_VALUE (TREE_CHAIN (TREE_CHAIN (arglist)));\n+      const char *p = c_getstr (src);\n+\n+      /* If the requested length is zero, or the src parameter string\n+          length is zero, return the dst parameter.  */\n+      if ((TREE_CODE (len) == INTEGER_CST && compare_tree_int (len, 0) == 0)\n+\t  || (p && *p == '\\0'))\n+        {\n+\t  /* Evaluate and ignore the src and len parameters in case\n+\t     they have side-effects.  */\n+\t  expand_expr (src, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\t  expand_expr (len, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\t  return expand_expr (dst, target, mode, EXPAND_NORMAL);\n+\t}\n+\n+      /* If the requested len is greater than or equal to the string\n+         length, call strcat.  */\n+      if (TREE_CODE (len) == INTEGER_CST && p\n+\t  && compare_tree_int (len, strlen (p)) >= 0)\n+        {\n+\t  tree call_expr, newarglist = \n+\t    tree_cons (NULL_TREE, dst, build_tree_list (NULL_TREE, src)),\n+\t    fn = built_in_decls[BUILT_IN_STRCAT];\n+\t  \n+\t  /* If the replacement _DECL isn't initialized, don't do the\n+\t     transformation. */\n+\t  if (!fn)\n+\t    return 0;\n+\n+\t  call_expr = build1 (ADDR_EXPR,\n+\t\t\t      build_pointer_type (TREE_TYPE (fn)), fn);\n+\t  call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n+\t\t\t     call_expr, newarglist, NULL_TREE);\n+\t  TREE_SIDE_EFFECTS (call_expr) = 1;\n+\t  return expand_expr (call_expr, target, mode, EXPAND_NORMAL);\n+\t}\n+      return 0;\n+    }\n+}\n+\n+/* Expand expression EXP, which is a call to the strspn builtin.\n+   Return 0 if we failed the caller should emit a normal call,\n+   otherwise try to get the result in TARGET, if convenient.  */\n+static rtx\n+expand_builtin_strspn (arglist, target, mode)\n+     tree arglist;\n+     rtx target;\n+     enum machine_mode mode;\n+{\n+  /* If we need to check memory accesses, call the library function.  */\n+  if (current_function_check_memory_usage)\n+    return 0;\n+\n+  if (arglist == 0\n+      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n+      || TREE_CHAIN (arglist) == 0\n+      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n+\t  != POINTER_TYPE))\n+    return 0;\n+  else\n+    {\n+      tree s1 = TREE_VALUE (arglist), s2 = TREE_VALUE (TREE_CHAIN (arglist));\n+      const char *p1 = c_getstr (s1), *p2 = c_getstr (s2);\n+      \n+      /* If both arguments are constants, evaluate at compile-time.  */\n+      if (p1 && p2)\n+        {\n+\t  const size_t r = strspn (p1, p2);\n+\t  return expand_expr (size_int (r), target, mode, EXPAND_NORMAL);\n+\t}\n+      \n+      /* If the second argument is \"\", return 0.  */\n+      if (p2 && *p2 == '\\0')\n+        {\n+\t  /* Evaluate and ignore argument s1 in case it has\n+\t     side-effects.  */\n+\t  expand_expr (s1, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+\t  return const0_rtx;\n+\t}\n+      return 0;\n+    }\n+}\n+\n+/* Expand expression EXP, which is a call to the strcspn builtin.\n+   Return 0 if we failed the caller should emit a normal call,\n+   otherwise try to get the result in TARGET, if convenient.  */\n+static rtx\n+expand_builtin_strcspn (arglist, target, mode)\n+     tree arglist;\n+     rtx target;\n+     enum machine_mode mode;\n+{\n+  /* If we need to check memory accesses, call the library function.  */\n+  if (current_function_check_memory_usage)\n+    return 0;\n+\n+  if (arglist == 0\n+      /* Arg could be non-pointer if user redeclared this fcn wrong.  */\n+      || TREE_CODE (TREE_TYPE (TREE_VALUE (arglist))) != POINTER_TYPE\n+      || TREE_CHAIN (arglist) == 0\n+      || (TREE_CODE (TREE_TYPE (TREE_VALUE (TREE_CHAIN (arglist))))\n+\t  != POINTER_TYPE))\n+    return 0;\n+  else\n+    {\n+      tree s1 = TREE_VALUE (arglist), s2 = TREE_VALUE (TREE_CHAIN (arglist));\n+      const char *p1 = c_getstr (s1), *p2 = c_getstr (s2);\n+      \n+      /* If both arguments are constants, evaluate at compile-time.  */\n+      if (p1 && p2)\n+        {\n+\t  const size_t r = strcspn (p1, p2);\n+\t  return expand_expr (size_int (r), target, mode, EXPAND_NORMAL);\n+\t}\n+      \n+      /* If the second argument is \"\", return __builtin_strlen(s1).  */\n+      if (p2 && *p2 == '\\0')\n+        {\n+\t  tree call_expr, newarglist = build_tree_list (NULL_TREE, s1),\n+\t    fn = built_in_decls[BUILT_IN_STRLEN];\n+\t  \n+\t  /* If the replacement _DECL isn't initialized, don't do the\n+\t     transformation. */\n+\t  if (!fn)\n+\t    return 0;\n+\n+\t  call_expr = build1 (ADDR_EXPR,\n+\t\t\t      build_pointer_type (TREE_TYPE (fn)), fn);\n+\t  call_expr = build (CALL_EXPR, TREE_TYPE (TREE_TYPE (fn)),\n+\t\t\t     call_expr, newarglist, NULL_TREE);\n+\t  TREE_SIDE_EFFECTS (call_expr) = 1;\n+\t  return expand_expr (call_expr, target, mode, EXPAND_NORMAL);\n+\t}\n+      return 0;\n+    }\n+}\n+\n /* Expand a call to __builtin_saveregs, generating the result in TARGET,\n    if that's convenient.  */\n \n@@ -3127,6 +3335,8 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \t  || fcode == BUILT_IN_STRLEN || fcode == BUILT_IN_STRCPY\n \t  || fcode == BUILT_IN_STRNCPY || fcode == BUILT_IN_STRNCMP\n \t  || fcode == BUILT_IN_STRSTR || fcode == BUILT_IN_STRPBRK\n+\t  || fcode == BUILT_IN_STRCAT || fcode == BUILT_IN_STRNCAT\n+\t  || fcode == BUILT_IN_STRSPN || fcode == BUILT_IN_STRCSPN\n \t  || fcode == BUILT_IN_STRCMP || fcode == BUILT_IN_FFS\n \t  || fcode == BUILT_IN_PUTCHAR || fcode == BUILT_IN_PUTS\n \t  || fcode == BUILT_IN_PRINTF || fcode == BUILT_IN_FPUTC\n@@ -3262,6 +3472,30 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \treturn target;\n       break;\n       \n+    case BUILT_IN_STRCAT:\n+      target = expand_builtin_strcat (arglist, target, mode);\n+      if (target)\n+\treturn target;\n+      break;\n+      \n+    case BUILT_IN_STRNCAT:\n+      target = expand_builtin_strncat (arglist, target, mode);\n+      if (target)\n+\treturn target;\n+      break;\n+      \n+    case BUILT_IN_STRSPN:\n+      target = expand_builtin_strspn (arglist, target, mode);\n+      if (target)\n+\treturn target;\n+      break;\n+      \n+    case BUILT_IN_STRCSPN:\n+      target = expand_builtin_strcspn (arglist, target, mode);\n+      if (target)\n+\treturn target;\n+      break;\n+      \n     case BUILT_IN_STRSTR:\n       target = expand_builtin_strstr (arglist, target, mode);\n       if (target)"}, {"sha": "fba269b5c5e4e6874c0ed2b93651382c9c3fea06", "filename": "gcc/builtins.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=d118937d79ce5f32fcc7b09acb932e559a2c16e9", "patch": "@@ -39,13 +39,17 @@ DEF_BUILTIN(BUILT_IN_BZERO)\n DEF_BUILTIN(BUILT_IN_BCMP)\n DEF_BUILTIN(BUILT_IN_INDEX)\n DEF_BUILTIN(BUILT_IN_RINDEX)\n+DEF_BUILTIN(BUILT_IN_STRCAT)\n+DEF_BUILTIN(BUILT_IN_STRNCAT)\n DEF_BUILTIN(BUILT_IN_STRCPY)\n DEF_BUILTIN(BUILT_IN_STRNCPY)\n DEF_BUILTIN(BUILT_IN_STRCMP)\n DEF_BUILTIN(BUILT_IN_STRNCMP)\n DEF_BUILTIN(BUILT_IN_STRLEN)\n DEF_BUILTIN(BUILT_IN_STRSTR)\n DEF_BUILTIN(BUILT_IN_STRPBRK)\n+DEF_BUILTIN(BUILT_IN_STRSPN)\n+DEF_BUILTIN(BUILT_IN_STRCSPN)\n DEF_BUILTIN(BUILT_IN_STRCHR)\n DEF_BUILTIN(BUILT_IN_STRRCHR)\n DEF_BUILTIN(BUILT_IN_FSQRT)"}, {"sha": "cdbc8aabdc426a91f3e8207dea8f03fecbfd119d", "filename": "gcc/c-common.c", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=d118937d79ce5f32fcc7b09acb932e559a2c16e9", "patch": "@@ -4939,8 +4939,8 @@ c_common_nodes_and_builtins ()\n   tree void_ftype_any, void_ftype_int, int_ftype_any, sizet_ftype_any;\n   tree double_ftype_double, double_ftype_double_double;\n   tree float_ftype_float, ldouble_ftype_ldouble;\n-  tree int_ftype_cptr_cptr_sizet;\n-  tree int_ftype_string_string, string_ftype_ptr_ptr;\n+  tree int_ftype_cptr_cptr_sizet, sizet_ftype_cstring_cstring;\n+  tree int_ftype_string_string, string_ftype_string_cstring;\n   tree string_ftype_string_int, string_ftype_string_string;\n   tree string_ftype_string_cstring_sizet, int_ftype_cstring_cstring_sizet;\n   tree long_ftype_long;\n@@ -5058,15 +5058,15 @@ c_common_nodes_and_builtins ()\n   void_zero_node = build_int_2 (0, 0);\n   TREE_TYPE (void_zero_node) = void_type_node;\n \n-  /* Prototype for strcpy.  */\n-  string_ftype_ptr_ptr\n+  /* Prototype for strcpy/strcat.  */\n+  string_ftype_string_cstring\n     = build_function_type (string_type_node,\n \t\t\t   tree_cons (NULL_TREE, string_type_node,\n \t\t\t\t      tree_cons (NULL_TREE,\n \t\t\t\t\t\t const_string_type_node,\n \t\t\t\t\t\t endlink)));\n \n-  /* Prototype for strncpy.  */\n+  /* Prototype for strncpy/strncat.  */\n   string_ftype_string_cstring_sizet\n     = build_function_type (string_type_node,\n \t\t\t   tree_cons (NULL_TREE, string_type_node,\n@@ -5088,6 +5088,14 @@ c_common_nodes_and_builtins ()\n \t\t\t\t\t\t const_string_type_node,\n \t\t\t\t\t\t endlink)));\n \n+  /* Prototype for strspn/strcspn.  */\n+  sizet_ftype_cstring_cstring\n+    = build_function_type (c_size_type_node,\n+\t\t\t   tree_cons (NULL_TREE, const_string_type_node,\n+\t\t\t\t      tree_cons (NULL_TREE,\n+\t\t\t\t\t\t const_string_type_node,\n+\t\t\t\t\t\t endlink)));\n+\n   /* Prototype for strncmp.  */\n   int_ftype_cstring_cstring_sizet\n     = build_function_type (integer_type_node,\n@@ -5357,12 +5365,22 @@ c_common_nodes_and_builtins ()\n \t\t    BUILT_IN_STRCHR, BUILT_IN_NORMAL, \"strchr\");\n   builtin_function (\"__builtin_strrchr\", string_ftype_string_int,\n \t\t    BUILT_IN_STRRCHR, BUILT_IN_NORMAL, \"strrchr\");\n-  builtin_function (\"__builtin_strcpy\", string_ftype_ptr_ptr,\n+  builtin_function (\"__builtin_strcpy\", string_ftype_string_cstring,\n \t\t    BUILT_IN_STRCPY, BUILT_IN_NORMAL, \"strcpy\");\n   builtin_function (\"__builtin_strncpy\", string_ftype_string_cstring_sizet,\n \t\t    BUILT_IN_STRNCPY, BUILT_IN_NORMAL, \"strncpy\");\n-  builtin_function (\"__builtin_strlen\", strlen_ftype,\n-\t\t    BUILT_IN_STRLEN, BUILT_IN_NORMAL, \"strlen\");\n+  built_in_decls[BUILT_IN_STRCAT] =\n+    builtin_function (\"__builtin_strcat\", string_ftype_string_cstring,\n+\t\t      BUILT_IN_STRCAT, BUILT_IN_NORMAL, \"strcat\");\n+  builtin_function (\"__builtin_strncat\", string_ftype_string_cstring_sizet,\n+\t\t    BUILT_IN_STRNCAT, BUILT_IN_NORMAL, \"strncat\");\n+  builtin_function (\"__builtin_strspn\", string_ftype_string_cstring,\n+\t\t    BUILT_IN_STRSPN, BUILT_IN_NORMAL, \"strspn\");\n+  builtin_function (\"__builtin_strcspn\", string_ftype_string_cstring_sizet,\n+\t\t    BUILT_IN_STRCSPN, BUILT_IN_NORMAL, \"strcspn\");\n+  built_in_decls[BUILT_IN_STRLEN] =\n+    builtin_function (\"__builtin_strlen\", strlen_ftype,\n+\t\t      BUILT_IN_STRLEN, BUILT_IN_NORMAL, \"strlen\");\n   builtin_function (\"__builtin_sqrtf\", float_ftype_float,\n \t\t    BUILT_IN_FSQRT, BUILT_IN_NORMAL, \"sqrtf\");\n   builtin_function (\"__builtin_fsqrt\", double_ftype_double,\n@@ -5441,10 +5459,18 @@ c_common_nodes_and_builtins ()\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strpbrk\", string_ftype_string_string, BUILT_IN_STRPBRK,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n-      builtin_function (\"strcpy\", string_ftype_ptr_ptr, BUILT_IN_STRCPY,\n+      builtin_function (\"strcpy\", string_ftype_string_cstring, BUILT_IN_STRCPY,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strncpy\", string_ftype_string_cstring_sizet,\n \t\t\tBUILT_IN_STRNCPY, BUILT_IN_NORMAL, NULL_PTR);\n+      builtin_function (\"strcat\", string_ftype_string_cstring, BUILT_IN_STRCAT,\n+\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n+      builtin_function (\"strncat\", string_ftype_string_cstring_sizet,\n+\t\t\tBUILT_IN_STRNCAT, BUILT_IN_NORMAL, NULL_PTR);\n+      builtin_function (\"strspn\", sizet_ftype_cstring_cstring, BUILT_IN_STRSPN,\n+\t\t\tBUILT_IN_NORMAL, NULL_PTR);\n+      builtin_function (\"strcspn\", sizet_ftype_cstring_cstring,\n+\t\t\tBUILT_IN_STRCSPN, BUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"strlen\", strlen_ftype, BUILT_IN_STRLEN,\n \t\t\tBUILT_IN_NORMAL, NULL_PTR);\n       builtin_function (\"sqrtf\", float_ftype_float, BUILT_IN_FSQRT,"}, {"sha": "bfb9da5cecd1bb4c228240f955aa537e6889b136", "filename": "gcc/extend.texi", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fextend.texi?ref=d118937d79ce5f32fcc7b09acb932e559a2c16e9", "patch": "@@ -3311,14 +3311,18 @@ function as well.\n @findex sqrt\n @findex sqrtf\n @findex sqrtl\n+@findex strcat\n @findex strchr\n @findex strcmp\n @findex strcpy\n+@findex strcspn\n @findex strlen\n+@findex strncat\n @findex strncmp\n @findex strncpy\n @findex strpbrk\n @findex strrchr\n+@findex strspn\n @findex strstr\n \n GNU CC provides a large number of built-in functions other than the ones\n@@ -3361,9 +3365,10 @@ corresponding versions prefixed with @code{__builtin_}.\n The following ISO C89 functions are recognized as builtins unless\n @samp{-fno-builtin} is specified: @code{abs}, @code{cos}, @code{fabs},\n @code{fputs}, @code{labs}, @code{memcmp}, @code{memcpy}, @code{memset},\n-@code{printf}, @code{sin}, @code{sqrt}, @code{strchr}, @code{strcmp},\n-@code{strcpy}, @code{strlen}, @code{strncmp}, @code{strncpy},\n-@code{strpbrk}, @code{strrchr}, and @code{strstr}.  All of these\n+@code{printf}, @code{sin}, @code{sqrt}, @code{strcat}, @code{strchr},\n+@code{strcmp}, @code{strcpy}, @code{strcspn}, @code{strlen},\n+@code{strncat}, @code{strncmp}, @code{strncpy}, @code{strpbrk},\n+@code{strrchr}, @code{strspn}, and @code{strstr}.  All of these\n functions have corresponding versions prefixed with @code{__builtin_},\n except that the version for @code{sqrt} is called\n @code{__builtin_fsqrt}."}, {"sha": "b205469de54770f8d0eef256d90b69022d0a5e66", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d118937d79ce5f32fcc7b09acb932e559a2c16e9", "patch": "@@ -1,7 +1,12 @@\n 2000-12-02  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n-\tgcc.c-torture/execute/string-opt-3.c: Add more strcmp checks.\n-\tgcc.c-torture/execute/string-opt-8.c: Add more strncmp checks.\n+\t* gcc.c-torture/execute/string-opt-9.c: New test.\n+\t* gcc.c-torture/execute/string-opt-10.c: Likewise.\n+\t* gcc.c-torture/execute/string-opt-11.c: Likewise.\n+\t* gcc.c-torture/execute/string-opt-12.c: Likewise.\n+\n+\t* gcc.c-torture/execute/string-opt-3.c: Add more strcmp checks.\n+\t* gcc.c-torture/execute/string-opt-8.c: Add more strncmp checks.\n \n 2000-12-02  Geoffrey Keating  <geoffk@redhat.com>\n "}, {"sha": "3949bb8ae03e63944db93cc7e931c54291770a5b", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-10.c", "status": "added", "additions": 78, "deletions": 0, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-10.c?ref=d118937d79ce5f32fcc7b09acb932e559a2c16e9", "patch": "@@ -0,0 +1,78 @@\n+/* Copyright (C) 2000  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin strncat occur and\n+   perform correctly.\n+\n+   Written by Kaveh R. Ghazi, 11/27/2000.  */\n+\n+extern void abort (void);\n+typedef __SIZE_TYPE__ size_t;\n+extern char *strncat (char *, const char *, size_t);\n+extern char *strcpy (char *, const char *);\n+extern char *strcmp (const char *, const char *);\n+int x = 123;\n+\n+int main ()\n+{\n+  const char *const s1 = \"hello world\";\n+  const char *const s2 = \"\";\n+  char dst[64], *d2;\n+  \n+  strcpy (dst, s1);\n+  if (strncat (dst, \"\", 100) != dst || strcmp (dst, s1))\n+    abort();\n+  strcpy (dst, s1);\n+  if (strncat (dst, s2, 100) != dst || strcmp (dst, s1))\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strncat (++d2, s2, 100) != dst+1 || d2 != dst+1 || strcmp (dst, s1))\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strncat (++d2+5, s2, 100) != dst+6 || d2 != dst+1 || strcmp (dst, s1))\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strncat (++d2+5, s1+11, 100) != dst+6 || d2 != dst+1 || strcmp (dst, s1))\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strncat (++d2+5, s1, 0) != dst+6 || d2 != dst+1 || strcmp (dst, s1))\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strncat (++d2+5, \"\", ++x) != dst+6 || d2 != dst+1 || x != 124\n+      || strcmp (dst, s1))\n+    abort();\n+\n+  strcpy (dst, s1);\n+  if (strncat (dst, \"foo\", 3) != dst || strcmp (dst, \"hello worldfoo\"))\n+    abort();\n+  strcpy (dst, s1);\n+  if (strncat (dst, \"foo\", 100) != dst || strcmp (dst, \"hello worldfoo\"))\n+    abort();\n+  strcpy (dst, s1);\n+  if (strncat (dst, s1, 100) != dst || strcmp (dst, \"hello worldhello world\"))\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strncat (++d2, s1, 100) != dst+1 || d2 != dst+1\n+      || strcmp (dst, \"hello worldhello world\"))\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strncat (++d2+5, s1, 100) != dst+6 || d2 != dst+1\n+      || strcmp (dst, \"hello worldhello world\"))\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strncat (++d2+5, s1+5, 100) != dst+6 || d2 != dst+1\n+      || strcmp (dst, \"hello world world\"))\n+    abort();\n+\n+  return 0;\n+}\n+\n+#ifdef __OPTIMIZE__\n+/* When optimizing, all the above cases should be transformed into\n+   something else.  So any remaining calls to the original function\n+   should abort.  */\n+static char *\n+strncat (char *s1, const char *s2, size_t n)\n+{\n+  abort();\n+}\n+#endif"}, {"sha": "9d043c9f64d7bd0575beacf2d5f0e0791796ed05", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-11.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-11.c?ref=d118937d79ce5f32fcc7b09acb932e559a2c16e9", "patch": "@@ -0,0 +1,50 @@\n+/* Copyright (C) 2000  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin strspn occur and\n+   perform correctly.\n+\n+   Written by Kaveh R. Ghazi, 11/27/2000.  */\n+\n+extern void abort (void);\n+typedef __SIZE_TYPE__ size_t;\n+extern size_t strspn (const char *, const char *);\n+extern char *strcpy (char *, const char *);\n+\n+int main ()\n+{\n+  const char *const s1 = \"hello world\";\n+  char dst[64], *d2;\n+  \n+  if (strspn (s1, \"hello\") != 5)\n+    abort();\n+  if (strspn (s1+4, \"hello\") != 1)\n+    abort();\n+  if (strspn (s1, \"z\") != 0)\n+    abort();\n+  if (strspn (s1, \"hello world\") != 11)\n+    abort();\n+  if (strspn (s1, \"\") != 0)\n+    abort();\n+  strcpy (dst, s1);\n+  if (strspn (dst, \"\") != 0)\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strspn (++d2, \"\") != 0 || d2 != dst+1)\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strspn (++d2+5, \"\") != 0 || d2 != dst+1)\n+    abort();\n+\n+  return 0;\n+}\n+\n+#ifdef __OPTIMIZE__\n+/* When optimizing, all the above cases should be transformed into\n+   something else.  So any remaining calls to the original function\n+   should abort.  */\n+static size_t\n+strspn (const char *s1, const char *s2)\n+{\n+  abort();\n+}\n+#endif"}, {"sha": "0126b85b81d41f621e0728fea9d23c8e1de708e9", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-12.c", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-12.c?ref=d118937d79ce5f32fcc7b09acb932e559a2c16e9", "patch": "@@ -0,0 +1,50 @@\n+/* Copyright (C) 2000  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin strcspn occur and\n+   perform correctly.\n+\n+   Written by Kaveh R. Ghazi, 11/27/2000.  */\n+\n+extern void abort (void);\n+typedef __SIZE_TYPE__ size_t;\n+extern size_t strcspn (const char *, const char *);\n+extern char *strcpy (char *, const char *);\n+\n+int main ()\n+{\n+  const char *const s1 = \"hello world\";\n+  char dst[64], *d2;\n+  \n+  if (strcspn (s1, \"hello\") != 0)\n+    abort();\n+  if (strcspn (s1, \"z\") != 11)\n+    abort();\n+  if (strcspn (s1+4, \"z\") != 7)\n+    abort();\n+  if (strcspn (s1, \"hello world\") != 0)\n+    abort();\n+  if (strcspn (s1, \"\") != 11)\n+    abort();\n+  strcpy (dst, s1);\n+  if (strcspn (dst, \"\") != 11)\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strcspn (++d2, \"\") != 10 || d2 != dst+1)\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strcspn (++d2+5, \"\") != 5 || d2 != dst+1)\n+    abort();\n+\n+  return 0;\n+}\n+\n+#ifdef __OPTIMIZE__\n+/* When optimizing, all the above cases should be transformed into\n+   something else.  So any remaining calls to the original function\n+   should abort.  */\n+static size_t\n+strcspn (const char *s1, const char *s2)\n+{\n+  abort();\n+}\n+#endif"}, {"sha": "c1174d90f2c1fc7a060cae5d5558fd4b84ebe8f5", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-9.c", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d118937d79ce5f32fcc7b09acb932e559a2c16e9/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-9.c?ref=d118937d79ce5f32fcc7b09acb932e559a2c16e9", "patch": "@@ -0,0 +1,48 @@\n+/* Copyright (C) 2000  Free Software Foundation.\n+\n+   Ensure all expected transformations of builtin strcat occur and\n+   perform correctly.\n+\n+   Written by Kaveh R. Ghazi, 11/27/2000.  */\n+\n+extern void abort (void);\n+typedef __SIZE_TYPE__ size_t;\n+extern char *strcat (char *, const char *);\n+extern char *strcpy (char *, const char *);\n+extern char *strcmp (const char *, const char *);\n+\n+int main ()\n+{\n+  const char *const s1 = \"hello world\";\n+  const char *const s2 = \"\";\n+  char dst[64], *d2;\n+  \n+  strcpy (dst, s1);\n+  if (strcat (dst, \"\") != dst || strcmp (dst, s1))\n+    abort();\n+  strcpy (dst, s1);\n+  if (strcat (dst, s2) != dst || strcmp (dst, s1))\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strcat (++d2, s2) != dst+1 || d2 != dst+1 || strcmp (dst, s1))\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strcat (++d2+5, s2) != dst+6 || d2 != dst+1 || strcmp (dst, s1))\n+    abort();\n+  strcpy (dst, s1); d2 = dst;\n+  if (strcat (++d2+5, s1+11) != dst+6 || d2 != dst+1 || strcmp (dst, s1))\n+    abort();\n+\n+  return 0;\n+}\n+\n+#ifdef __OPTIMIZE__\n+/* When optimizing, all the above cases should be transformed into\n+   something else.  So any remaining calls to the original function\n+   should abort.  */\n+static char *\n+strcat (char *s1, const char *s2)\n+{\n+  abort();\n+}\n+#endif"}]}