{"sha": "30a2c10eb639f1855fe7e060552f09c706efa532", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzBhMmMxMGViNjM5ZjE4NTVmZTdlMDYwNTUyZjA5YzcwNmVmYTUzMg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2018-03-28T19:15:39Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2018-03-28T19:15:39Z"}, "message": "re PR middle-end/82004 (SPEC CPU2017 628.pop2_s miscompare)\n\n\tPR tree-optimization/82004\n\t* gimple-match-head.c (optimize_pow_to_exp): New function.\n\t* match.pd (pow(C,x) -> exp(log(C)*x)): Wrap with #if GIMPLE.\n\tDon't fold to exp if optimize_pow_to_exp is false.\n\n\t* gcc.dg/pr82004.c: New test.\n\nFrom-SVN: r258930", "tree": {"sha": "707858c0b19b0db09b4434b773deb95486f2dae0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/707858c0b19b0db09b4434b773deb95486f2dae0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/30a2c10eb639f1855fe7e060552f09c706efa532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a2c10eb639f1855fe7e060552f09c706efa532", "html_url": "https://github.com/Rust-GCC/gccrs/commit/30a2c10eb639f1855fe7e060552f09c706efa532", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/30a2c10eb639f1855fe7e060552f09c706efa532/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cefc09063eb4b0eb572c89c3f0657e5b5e36e77d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cefc09063eb4b0eb572c89c3f0657e5b5e36e77d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cefc09063eb4b0eb572c89c3f0657e5b5e36e77d"}], "stats": {"total": 117, "additions": 116, "deletions": 1}, "files": [{"sha": "3ac9f9bdd5cedd5dcbf1f5958c73e9c0d52cbdc9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a2c10eb639f1855fe7e060552f09c706efa532/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a2c10eb639f1855fe7e060552f09c706efa532/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=30a2c10eb639f1855fe7e060552f09c706efa532", "patch": "@@ -1,3 +1,10 @@\n+2018-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/82004\n+\t* gimple-match-head.c (optimize_pow_to_exp): New function.\n+\t* match.pd (pow(C,x) -> exp(log(C)*x)): Wrap with #if GIMPLE.\n+\tDon't fold to exp if optimize_pow_to_exp is false.\n+\n 2018-03-28  Martin Liska  <mliska@suse.cz>\n \n \tPR other/84819"}, {"sha": "4266fb3d906b040d82e2e6e9c4b0a23d36af11d0", "filename": "gcc/gimple-match-head.c", "status": "modified", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a2c10eb639f1855fe7e060552f09c706efa532/gcc%2Fgimple-match-head.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a2c10eb639f1855fe7e060552f09c706efa532/gcc%2Fgimple-match-head.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-match-head.c?ref=30a2c10eb639f1855fe7e060552f09c706efa532", "patch": "@@ -840,3 +840,71 @@ canonicalize_math_after_vectorization_p ()\n {\n   return !cfun || (cfun->curr_properties & PROP_gimple_lvec) != 0;\n }\n+\n+/* Return true if pow(cst, x) should be optimized into exp(log(cst) * x).\n+   As a workaround for SPEC CPU2017 628.pop2_s, don't do it if arg0\n+   is an exact integer, arg1 = phi_res +/- cst1 and phi_res = PHI <cst2, ...>\n+   where cst2 +/- cst1 is an exact integer, because then pow (arg0, arg1)\n+   will likely be exact, while exp (log (arg0) * arg1) might be not.\n+   Also don't do it if arg1 is phi_res above and cst2 is an exact integer.  */\n+\n+static bool\n+optimize_pow_to_exp (tree arg0, tree arg1)\n+{\n+  gcc_assert (TREE_CODE (arg0) == REAL_CST);\n+  if (!real_isinteger (TREE_REAL_CST_PTR (arg0), TYPE_MODE (TREE_TYPE (arg0))))\n+    return true;\n+\n+  if (TREE_CODE (arg1) != SSA_NAME)\n+    return true;\n+\n+  gimple *def = SSA_NAME_DEF_STMT (arg1);\n+  gphi *phi = dyn_cast <gphi *> (def);\n+  tree cst1 = NULL_TREE;\n+  enum tree_code code = ERROR_MARK;\n+  if (!phi)\n+    {\n+      if (!is_gimple_assign (def))\n+\treturn true;\n+      code = gimple_assign_rhs_code (def);\n+      switch (code)\n+\t{\n+\tcase PLUS_EXPR:\n+\tcase MINUS_EXPR:\n+\t  break;\n+\tdefault:\n+\t  return true;\n+\t}\n+      if (TREE_CODE (gimple_assign_rhs1 (def)) != SSA_NAME\n+\t  || TREE_CODE (gimple_assign_rhs2 (def)) != REAL_CST)\n+\treturn true;\n+\n+      cst1 = gimple_assign_rhs2 (def);\n+\n+      phi = dyn_cast <gphi *> (SSA_NAME_DEF_STMT (gimple_assign_rhs1 (def)));\n+      if (!phi)\n+\treturn true;\n+    }\n+\n+  tree cst2 = NULL_TREE;\n+  int n = gimple_phi_num_args (phi);\n+  for (int i = 0; i < n; i++)\n+    {\n+      tree arg = PHI_ARG_DEF (phi, i);\n+      if (TREE_CODE (arg) != REAL_CST)\n+\tcontinue;\n+      else if (cst2 == NULL_TREE)\n+\tcst2 = arg;\n+      else if (!operand_equal_p (cst2, arg, 0))\n+\treturn true;\n+    }\n+\n+  if (cst1 && cst2)\n+    cst2 = const_binop (code, TREE_TYPE (cst2), cst2, cst1);\n+  if (cst2\n+      && TREE_CODE (cst2) == REAL_CST\n+      && real_isinteger (TREE_REAL_CST_PTR (cst2),\n+\t\t\t TYPE_MODE (TREE_TYPE (cst2))))\n+    return false;\n+  return true;\n+}"}, {"sha": "7c4c11c4ef7dedc97e1be859700ddf5825a2fb86", "filename": "gcc/match.pd", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a2c10eb639f1855fe7e060552f09c706efa532/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a2c10eb639f1855fe7e060552f09c706efa532/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=30a2c10eb639f1855fe7e060552f09c706efa532", "patch": "@@ -4006,6 +4006,7 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  /* pow(C,x) -> exp(log(C)*x) if C > 0,\n     or if C is a positive power of 2,\n     pow(C,x) -> exp2(log2(C)*x).  */\n+#if GIMPLE\n  (for pows (POW)\n       exps (EXP)\n       logs (LOG)\n@@ -4035,8 +4036,10 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t }\n      }\n      (if (!use_exp2)\n-      (exps (mult (logs @0) @1))\n+      (if (optimize_pow_to_exp (@0, @1))\n+       (exps (mult (logs @0) @1)))\n       (exp2s (mult (log2s @0) @1)))))))\n+#endif\n \n  /* pow(C,x)*expN(y) -> expN(logN(C)*x+y) if C > 0.  */\n  (for pows (POW)"}, {"sha": "78a1ebb3c8b2ff78732aa4550afa544027400aa1", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a2c10eb639f1855fe7e060552f09c706efa532/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a2c10eb639f1855fe7e060552f09c706efa532/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=30a2c10eb639f1855fe7e060552f09c706efa532", "patch": "@@ -1,3 +1,8 @@\n+2018-03-28  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR tree-optimization/82004\n+\t* gcc.dg/pr82004.c: New test.\n+\n 2018-03-28  Jakub Jelinek  <jakub@redhat.com>\n \t    Martin Liska  <mliska@suse.cz>\n "}, {"sha": "2dd3eae90a8f8b288d838e09c0788a9a56e5aff6", "filename": "gcc/testsuite/gcc.dg/pr82004.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/30a2c10eb639f1855fe7e060552f09c706efa532/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82004.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/30a2c10eb639f1855fe7e060552f09c706efa532/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82004.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr82004.c?ref=30a2c10eb639f1855fe7e060552f09c706efa532", "patch": "@@ -0,0 +1,32 @@\n+/* PR tree-optimization/82004 */\n+/* { dg-do run } */\n+/* { dg-options \"-Ofast\" } */\n+\n+extern double log10 (double);\n+extern double pow (double, double);\n+\n+__attribute__((noipa)) void\n+bar (double x)\n+{\n+  if (x < 0.001)\n+    __builtin_abort ();\n+  asm volatile (\"\" : : : \"memory\");\n+}\n+\n+int\n+main ()\n+{\n+  double d = 0.001;\n+  double e = 10.0;\n+  double f = (log10 (e) - log10 (d)) / 400.0;\n+  double g = log10 (d) - f;\n+  volatile int q = 0;\n+  int i;\n+  if (__builtin_expect (q == 0, 0))\n+    for (i = 0; i < 400; ++i)\n+      {\n+\tg = g + f;\n+\tbar (pow (10.0, g));\n+      }\n+  return 0;  \n+}"}]}