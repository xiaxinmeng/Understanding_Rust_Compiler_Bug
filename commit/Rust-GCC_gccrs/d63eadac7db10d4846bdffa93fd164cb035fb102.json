{"sha": "d63eadac7db10d4846bdffa93fd164cb035fb102", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDYzZWFkYWM3ZGIxMGQ0ODQ2YmRmZmE5M2ZkMTY0Y2IwMzVmYjEwMg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2019-09-20T09:54:54Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2019-09-20T09:54:54Z"}, "message": "re PR testsuite/91821 (r275928 breaks gcc.target/powerpc/sad-vectorize-2.c)\n\n2019-09-20  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/91821\n\t* tree-vect-loop.c (check_reduction_path): Check we can compute\n\treduc_idx.\n\t(vect_is_simple_reduction): Set STMT_VINFO_REDUC_IDX.\n\t* tree-vect-patterns.c (vect_reassociating_reduction_p): Return\n\toperands in canonical order.\n\t* tree-vectorizer.c (vec_info::new_stmt_vec_info): Initialize\n\tSTMT_VINFO_REDUC_IDX.\n\t* tree-vectorizer.h (_stmt_vec_info::reduc_idx): New.\n\t(STMT_VINFO_REDUC_IDX): Likewise.\n\nFrom-SVN: r275996", "tree": {"sha": "ef1dc5db6c4ed322f9ed8485cabbf001647679c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef1dc5db6c4ed322f9ed8485cabbf001647679c7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d63eadac7db10d4846bdffa93fd164cb035fb102", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63eadac7db10d4846bdffa93fd164cb035fb102", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d63eadac7db10d4846bdffa93fd164cb035fb102", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d63eadac7db10d4846bdffa93fd164cb035fb102/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9ba4312712a96eba938c9d280e57f71929cdef41", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ba4312712a96eba938c9d280e57f71929cdef41", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ba4312712a96eba938c9d280e57f71929cdef41"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "756b4d47e12fde5d0c83b7348518d53e5ffae054", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63eadac7db10d4846bdffa93fd164cb035fb102/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63eadac7db10d4846bdffa93fd164cb035fb102/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d63eadac7db10d4846bdffa93fd164cb035fb102", "patch": "@@ -1,3 +1,16 @@\n+2019-09-20  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/91821\n+\t* tree-vect-loop.c (check_reduction_path): Check we can compute\n+\treduc_idx.\n+\t(vect_is_simple_reduction): Set STMT_VINFO_REDUC_IDX.\n+\t* tree-vect-patterns.c (vect_reassociating_reduction_p): Return\n+\toperands in canonical order.\n+\t* tree-vectorizer.c (vec_info::new_stmt_vec_info): Initialize\n+\tSTMT_VINFO_REDUC_IDX.\n+\t* tree-vectorizer.h (_stmt_vec_info::reduc_idx): New.\n+\t(STMT_VINFO_REDUC_IDX): Likewise.\n+\n 2019-09-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/91269"}, {"sha": "e952713d1313b33639782fa3106d2c6063d2e1ec", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63eadac7db10d4846bdffa93fd164cb035fb102/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63eadac7db10d4846bdffa93fd164cb035fb102/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=d63eadac7db10d4846bdffa93fd164cb035fb102", "patch": "@@ -2658,7 +2658,13 @@ check_reduction_path (dump_user_location_t loc, loop_p loop, gphi *phi,\n       gimple *use_stmt = USE_STMT (path[i].second);\n       tree op = USE_FROM_PTR (path[i].second);\n       if (! has_single_use (op)\n-\t  || ! is_gimple_assign (use_stmt))\n+\t  || ! is_gimple_assign (use_stmt)\n+\t  /* The following make sure we can compute the operand index\n+\t     easily plus it mostly disallows chaining via COND_EXPR condition\n+\t     operands.  */\n+\t  || (gimple_assign_rhs1 (use_stmt) != op\n+\t      && gimple_assign_rhs2 (use_stmt) != op\n+\t      && gimple_assign_rhs3 (use_stmt) != op))\n \t{\n \t  fail = true;\n \t  break;\n@@ -3058,6 +3064,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n \t  || !flow_bb_inside_loop_p (loop, gimple_bb (def1_info->stmt))\n \t  || vect_valid_reduction_input_p (def1_info)))\n     {\n+      STMT_VINFO_REDUC_IDX (def_stmt_info) = 1;\n       if (dump_enabled_p ())\n \treport_vect_op (MSG_NOTE, def_stmt, \"detected reduction: \");\n       return def_stmt_info;\n@@ -3070,6 +3077,7 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n \t  || !flow_bb_inside_loop_p (loop, gimple_bb (def2_info->stmt))\n \t  || vect_valid_reduction_input_p (def2_info)))\n     {\n+      STMT_VINFO_REDUC_IDX (def_stmt_info) = 0;\n       if (dump_enabled_p ())\n \treport_vect_op (MSG_NOTE, def_stmt, \"detected reduction: \");\n       return def_stmt_info;\n@@ -3084,16 +3092,18 @@ vect_is_simple_reduction (loop_vec_info loop_info, stmt_vec_info phi_info,\n          restriction is that all operations in the chain are the same.  */\n       auto_vec<stmt_vec_info, 8> reduc_chain;\n       unsigned i;\n+      bool is_slp_reduc = !nested_in_vect_loop && code != COND_EXPR;\n       for (i = path.length () - 1; i >= 1; --i)\n \t{\n \t  gimple *stmt = USE_STMT (path[i].second);\n \t  if (gimple_assign_rhs_code (stmt) != code)\n-\t    break;\n-\t  reduc_chain.safe_push (loop_info->lookup_stmt (stmt));\n+\t    is_slp_reduc = false;\n+\t  stmt_vec_info stmt_info = loop_info->lookup_stmt (stmt);\n+\t  STMT_VINFO_REDUC_IDX (stmt_info)\n+\t    = path[i].second->use - gimple_assign_rhs1_ptr (stmt);\n+\t  reduc_chain.safe_push (stmt_info);\n \t}\n-      if (i == 0\n-\t  && ! nested_in_vect_loop\n-\t  && code != COND_EXPR)\n+      if (is_slp_reduc)\n \t{\n \t  for (unsigned i = 0; i < reduc_chain.length () - 1; ++i)\n \t    {"}, {"sha": "baa9a4cb8fad312db5f8a04af4d634d2ad976157", "filename": "gcc/tree-vect-patterns.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63eadac7db10d4846bdffa93fd164cb035fb102/gcc%2Ftree-vect-patterns.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63eadac7db10d4846bdffa93fd164cb035fb102/gcc%2Ftree-vect-patterns.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-patterns.c?ref=d63eadac7db10d4846bdffa93fd164cb035fb102", "patch": "@@ -868,6 +868,8 @@ vect_reassociating_reduction_p (stmt_vec_info stmt_info, tree_code code,\n \n   *op0_out = gimple_assign_rhs1 (assign);\n   *op1_out = gimple_assign_rhs2 (assign);\n+  if (commutative_tree_code (code) && STMT_VINFO_REDUC_IDX (stmt_info) == 0)\n+    std::swap (*op0_out, *op1_out);\n   return true;\n }\n "}, {"sha": "da4330cb68213b8448004bbe45c72e8bb44a090e", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63eadac7db10d4846bdffa93fd164cb035fb102/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63eadac7db10d4846bdffa93fd164cb035fb102/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=d63eadac7db10d4846bdffa93fd164cb035fb102", "patch": "@@ -639,6 +639,7 @@ vec_info::new_stmt_vec_info (gimple *stmt)\n   STMT_VINFO_VECTORIZABLE (res) = true;\n   STMT_VINFO_VEC_REDUCTION_TYPE (res) = TREE_CODE_REDUCTION;\n   STMT_VINFO_VEC_CONST_COND_REDUC_CODE (res) = ERROR_MARK;\n+  STMT_VINFO_REDUC_IDX (res) = -1;\n   STMT_VINFO_SLP_VECT_ONLY (res) = false;\n \n   if (gimple_code (stmt) == GIMPLE_PHI"}, {"sha": "09d31ec8b1c4467bf689a2e06352698a709132ad", "filename": "gcc/tree-vectorizer.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d63eadac7db10d4846bdffa93fd164cb035fb102/gcc%2Ftree-vectorizer.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d63eadac7db10d4846bdffa93fd164cb035fb102/gcc%2Ftree-vectorizer.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.h?ref=d63eadac7db10d4846bdffa93fd164cb035fb102", "patch": "@@ -941,6 +941,10 @@ class _stmt_vec_info {\n      vect_force_simple_reduction.  */\n   enum vect_reduction_type reduc_type;\n \n+  /* On a stmt participating in the reduction the index of the operand\n+     on the reduction SSA cycle.  */\n+  int reduc_idx;\n+\n   /* On a reduction PHI the def returned by vect_force_simple_reduction.\n      On the def returned by vect_force_simple_reduction the\n      corresponding PHI.  */\n@@ -1030,6 +1034,7 @@ STMT_VINFO_BB_VINFO (stmt_vec_info stmt_vinfo)\n #define STMT_VINFO_SIMD_LANE_ACCESS_P(S)   (S)->simd_lane_access_p\n #define STMT_VINFO_VEC_REDUCTION_TYPE(S)   (S)->v_reduc_type\n #define STMT_VINFO_VEC_CONST_COND_REDUC_CODE(S) (S)->const_cond_reduc_code\n+#define STMT_VINFO_REDUC_IDX(S)\t\t   (S)->reduc_idx\n \n #define STMT_VINFO_DR_WRT_VEC_LOOP(S)      (S)->dr_wrt_vec_loop\n #define STMT_VINFO_DR_BASE_ADDRESS(S)      (S)->dr_wrt_vec_loop.base_address"}]}