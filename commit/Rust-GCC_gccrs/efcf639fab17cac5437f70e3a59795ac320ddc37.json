{"sha": "efcf639fab17cac5437f70e3a59795ac320ddc37", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWZjZjYzOWZhYjE3Y2FjNTQzN2Y3MGUzYTU5Nzk1YWMzMjBkZGMzNw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2012-01-25T00:04:13Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-01-25T00:04:13Z"}, "message": "Update to current Go testsuite.\n\n\t* go.test/go-test.exp (filecmp): New procedure.\n\t(errchk): Handle quoted square brackets.\n\t(go-gc-tests): Set go_compile_args. Handle various new test\n\tlines.  Skip a few new tests.\n\t* lib/go-torture.exp (go-torture-execute): Use go_compile_args.\n\nFrom-SVN: r183502", "tree": {"sha": "f820710fc010727fffa668d2cfa5067bddb1109f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f820710fc010727fffa668d2cfa5067bddb1109f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/efcf639fab17cac5437f70e3a59795ac320ddc37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcf639fab17cac5437f70e3a59795ac320ddc37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efcf639fab17cac5437f70e3a59795ac320ddc37", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcf639fab17cac5437f70e3a59795ac320ddc37/comments", "author": null, "committer": null, "parents": [{"sha": "d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890"}], "stats": {"total": 10333, "additions": 9165, "deletions": 1168}, "files": [{"sha": "9f5677375ee80db67d158fbb92896e712b17ed08", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,3 +1,11 @@\n+2012-01-24  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go.test/go-test.exp (filecmp): New procedure.\n+\t(errchk): Handle quoted square brackets.\n+\t(go-gc-tests): Set go_compile_args. Handle various new test\n+\tlines.  Skip a few new tests.\n+\t* lib/go-torture.exp (go-torture-execute): Use go_compile_args.\n+\n 2012-01-24  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \t* lib/target-supports.exp (proc check_effective_target_vect_perm)"}, {"sha": "c9ba41ae38f477ff35af6c87f5670bdb6f1354c9", "filename": "gcc/testsuite/go.test/go-test.exp", "status": "modified", "additions": 201, "deletions": 15, "changes": 216, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Fgo-test.exp?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -34,6 +34,38 @@\n load_lib go-dg.exp\n load_lib go-torture.exp\n \n+# Compare two files\n+proc filecmp { file1 file2 testname } {\n+    set f1 [open $file1 r]\n+    set f2 [open $file2 r]\n+    set ok 1\n+    while { [gets $f1 line1] >= 0 } {\n+\tif { [gets $f2 line2] < 0 } {\n+\t    verbose -log \"output mismatch: $file2 shorter than $file1\"\n+\t    set ok 0\n+\t    break\n+\t}\n+\tif { $line1 != $line2 } {\n+\t    verbose -log \"output mismatch comparing $file1 and $file2\"\n+\t    verbose -log \"expected \\\"$line1\\\"\"\n+\t    verbose -log \"got      \\\"$line2\\\"\"\n+\t    set ok 0\n+\t    break\n+\t}\n+    }\n+    if { [gets $f2 line2] >= 0 } {\n+\tverbose -log \"output mismatch: $file1 shorter than $file2\"\n+\tset ok 0\n+    }\n+    close $f1\n+    close $f2\n+    if { ! $ok } {\n+\tfail $testname\n+    } else {\n+\tpass $testname\n+    }\n+}\n+\n # Implement errchk\n proc errchk { test opts } {\n     global dg-do-what-default\n@@ -56,6 +88,14 @@ proc errchk { test opts } {\n \t    continue\n \t}\n \tregsub \"// \\(GCCGO_\\)?ERROR \\\"\\(\\[^\\\"\\]*\\)\\\".*$\" $copy_line \"// \\{ dg-error \\\"\\\\2\\\" \\}\" out_line\n+\tif [string match \"*dg-error*\\\\\\[*\" $out_line] {\n+\t    set index [string first \"dg-error\" $out_line]\n+\t    regsub -start $index -all \"\\\\\\\\\\\\\\[\" $out_line \"\\\\\\\\\\\\\\\\\\\\\\[\" out_line\n+\t}\n+\tif [string match \"*dg-error*\\\\\\]*\" $out_line] {\n+\t    set index [string first \"dg-error\" $out_line]\n+\t    regsub -start $index -all \"\\\\\\\\\\\\\\]\" $out_line \"\\\\\\\\\\\\\\\\\\\\\\]\" out_line\n+\t}\n \tif [string match \"*dg-error*.\\**\" $out_line] {\n \t    # I worked out the right number of backslashes by\n \t    # experimentation, not analysis.\n@@ -199,6 +239,7 @@ proc go-gc-tests { } {\n     global TOOL_OPTIONS\n     global TORTURE_OPTIONS\n     global dg-do-what-default\n+    global go_compile_args\n     global go_execute_args\n     global target_triplet\n \n@@ -230,13 +271,10 @@ proc go-gc-tests { } {\n \t    continue\n \t}\n \n-\t# Skip the files in bench and garbage; they are not tests.\n+\t# Skip the files in bench; they are not tests.\n \tif [string match \"*go.test/test/bench/*\" $test] {\n \t    continue\n \t}\n-\tif [string match \"*go.test/test/garbage/*\" $test] {\n-\t    continue\n-\t}\n \n \t# Skip files in sub-subdirectories: they are components of\n \t# other tests.\n@@ -274,6 +312,20 @@ proc go-gc-tests { } {\n \t    continue\n \t}\n \n+\tif { [file tail $test] == \"init1.go\" } {\n+\t    # This tests whether GC runs during init, which for gccgo\n+\t    # it currently does not.\n+\t    untested $name\n+\t    continue\n+\t}\n+\n+\tif { [file tail $test] == \"closure.go\" } {\n+\t    # This tests whether function closures do any memory\n+\t    # allocation, which for gccgo they currently do.\n+\t    untested $name\n+\t    continue\n+\t}\n+\n \tset fd [open $test r]\n \n \tset lines_ok 1\n@@ -290,7 +342,8 @@ proc go-gc-tests { } {\n \t    if { [ string match \"*nacl*exit 0*\" $test_line ] \\\n \t\t     || [ string match \"*exit 0*nacl*\" $test_line ] \\\n \t\t     || [ string match \"*Android*exit 0*\" $test_line ] \\\n-\t\t     || [ string match \"*exit 0*Android*\" $test_line ] } {\n+\t\t     || [ string match \"*exit 0*Android*\" $test_line ] \\\n+\t\t     || [ string match \"*\\\"\\$GOOS\\\" == windows*\" $test_line ] } {\n \t\tcontinue\n \t    }\n \n@@ -320,8 +373,9 @@ proc go-gc-tests { } {\n \n \tclose $fd\n \n+\tset go_compile_args \"\"\n \tset go_execute_args \"\"\n-\tif { [regexp \".*\\\\\\$A.out (\\[^|&>\\].*)\\$\" $test_line match progargs] } {\n+\tif { [regexp \".*\\\\\\$A.out (\\[^|&>2\\].*)\\$\" $test_line match progargs] } {\n \t    set go_execute_args $progargs\n \t    verbose -log \"$test: go_execute_args is $go_execute_args\"\n \t    set index [string last \" $progargs\" $test_line]\n@@ -393,6 +447,33 @@ proc go-gc-tests { } {\n \t    # This is a vanilla execution test.\n \t    go-torture-execute $test\n \t    file delete core [glob -nocomplain core.*]\n+\t} elseif { $test_line == \"// \\$G \\$D/\\$F.go && \\$L \\$F.\\$A && ./\\$A.out 2>&1 | cmp - \\$D/\\$F.out\" \\\n+\t\t       || $test_line == \"// (\\$G \\$D/\\$F.go && \\$L \\$F.\\$A && ./\\$A.out 2>&1 | cmp - \\$D/\\$F.out)\" } {\n+\t    # This is an execution test for which we need to check the\n+\t    # program output.\n+\t    set hold_runtests $runtests\n+\t    set runtests \"go-test.exp\"\n+\t    set dg-do-what-default \"link\"\n+\t    dg-test -keep-output $test \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t    set output_file \"./[file rootname [file tail $test]].exe\"\n+\t    set base \"[file rootname [file tail $test]]\"\n+\t    if [isnative] {\n+\t\tverbose -log \"$output_file >$base.p 2>&1\"\n+\t\tif { [catch \"exec $output_file 2>$base.p\" catcherr] != 0 } {\n+\t\t    verbose -log $catcherr\n+\t\t    fail \"$name execution\"\n+\t\t    untested \"$name compare\"\n+\t\t} else {\n+\t\t    pass \"$name execution\"\n+\t\t    regsub \"\\\\.go$\" $test \".out\" expect\n+\t\t    filecmp $expect $base.p \"$name compare\"\n+\t\t}\n+\t\t#file delete $base.p\n+\t    } else {\n+\t\tuntested \"$name execution\"\n+\t\tuntested \"$name compare\"\n+\t    }\n+\t    set runtests $hold_runtests\n \t} elseif { [string match \\\n \t\t\t\"// \\$G \\$D/\\$F.go && \\$L \\$F.\\$A || echo BUG*\" \\\n \t\t\t$test_line] \\\n@@ -405,6 +486,10 @@ proc go-gc-tests { } {\n \t} elseif { [string match \"// \\$G \\$D/\\$F.go\" $test_line] \\\n \t\t   || [string match \"// \\$G \\$D/\\$F.go || echo BUG*\" \\\n \t\t\t   $test_line] \\\n+\t\t   || [string match \"// \\$G \\$D/\\$F.go || echo \\\"Bug*\" \\\n+\t\t\t   $test_line] \\\n+\t\t   || [string match \"// \\$G \\$D/\\$F.go || echo \\\"Issue*\" \\\n+\t\t\t   $test_line] \\\n \t\t   || [string match \"// \\$G \\$F.go || echo BUG*\" \\\n \t\t\t   $test_line] \\\n \t\t   || [string match \"// ! \\$G \\$D/\\$F.go && echo BUG*\" \\\n@@ -452,13 +537,27 @@ proc go-gc-tests { } {\n \t    errchk $test \"\"\n \t} elseif { [string match \\\n \t\t\t\"// \\$G \\$D/\\$F.dir/bug0.go && \\$G \\$D/\\$F.dir/bug1.go || echo BUG*\" \\\n-\t\t\t$test_line] } {\n+\t\t\t$test_line] \\\n+\t\t       || [string match \\\n+\t\t\t       \"// \\$G \\$D/\\$F.dir/one.go && \\$G \\$D/\\$F.dir/two.go\" \\\n+\t\t\t       $test_line] } {\n+\t    if { [string match \\\n+\t\t      \"// \\$G \\$D/\\$F.dir/bug0.go && \\$G \\$D/\\$F.dir/bug1.go || echo BUG*\" \\\n+\t\t      $test_line] } {\n+\t\tset name1 \"bug0.go\"\n+\t\tset name2 \"bug1.go\"\n+\t    } elseif { [string match \\\n+\t\t\t    \"// \\$G \\$D/\\$F.dir/one.go && \\$G \\$D/\\$F.dir/two.go\" \\\n+\t\t\t    $test_line] } {\n+\t\tset name1 \"one.go\"\n+\t\tset name2 \"two.go\"\n+\t    }\n \t    set hold_runtests $runtests\n \t    set runtests \"go-test.exp\"\n \t    set dg-do-what-default \"assemble\"\n-\t    regsub \"\\\\.go$\" $test \".dir/bug0.go\" file1\n+\t    regsub \"\\\\.go$\" $test \".dir/$name1\" file1\n \t    dg-test -keep-output $file1 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n-\t    regsub \"\\\\.go$\" $test \".dir/bug1.go\" file2\n+\t    regsub \"\\\\.go$\" $test \".dir/$name2\" file2\n \t    dg-test $file2 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n \t    file delete \"[file rootname [file tail $file1]].o\"\n \t    set runtests $hold_runtests\n@@ -650,14 +749,28 @@ proc go-gc-tests { } {\n \t    set runtests $hold_runtests\n \t} elseif { [string match \\\n \t\t\t\"// \\$G \\$D/\\$F.dir/lib.go && \\$G \\$D/\\$F.dir/main.go && \\$L main.\\$A && ./\\$A.out || echo BUG*\" \\\n-\t\t\t$test_line ] } {\n+\t\t\t$test_line ] || \\\n+\t\t       [string match \\\n+\t\t\t    \"// \\$G \\$D/\\$F.dir/p.go && \\$G \\$D/\\$F.dir/main.go && \\$L main.\\$A && ./\\$A.out || echo BUG*\" \\\n+\t\t\t    $test_line ] } {\n+\t    if { [string match \\\n+\t\t      \"// \\$G \\$D/\\$F.dir/lib.go && \\$G \\$D/\\$F.dir/main.go && \\$L main.\\$A && ./\\$A.out || echo BUG*\" \\\n+\t\t      $test_line ] } {\n+\t\tset name1 \"lib.go\"\n+\t\tset name2 \"main.go\"\n+\t    } elseif { [string match \\\n+\t\t\t    \"// \\$G \\$D/\\$F.dir/p.go && \\$G \\$D/\\$F.dir/main.go && \\$L main.\\$A && ./\\$A.out || echo BUG*\" \\\n+\t\t\t    $test_line ] } {\n+\t\tset name1 \"p.go\"\n+\t\tset name2 \"main.go\"\n+\t    }\n \t    set hold_runtests $runtests\n \t    set runtests \"go-test.exp\"\n \t    set dg-do-what-default \"assemble\"\n-\t    regsub \"\\\\.go$\" $test \".dir/lib.go\" file1\n+\t    regsub \"\\\\.go$\" $test \".dir/$name1\" file1\n \t    dg-test -keep-output $file1 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n \t    set ofile1 \"[file rootname [file tail $file1]].o\"\n-\t    regsub \"\\\\.go$\" $test \".dir/main.go\" file2\n+\t    regsub \"\\\\.go$\" $test \".dir/$name2\" file2\n \t    dg-test -keep-output $file2 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n \t    set ofile2 \"[file rootname [file tail $file2]].o\"\n \t    set dg-do-what-default \"link\"\n@@ -705,7 +818,7 @@ proc go-gc-tests { } {\n \t    errchk $file2 \"\"\n \t    file delete \"[file rootname [file tail $file1]].o\"\n \t    set runtests $hold_runtests\n-\t} elseif { [string match \"// true*\" $test_line] } {\n+\t} elseif { \"$test_line\" == \"\" || [string match \"// true*\" $test_line] } {\n \t    # Not a real test, just ignore.\n \t} elseif { $test_line == \"// \\$G \\$D/\\$F.dir/bug0.go &&\" \\\n \t\t       && $test_line2 == \"// \\$G \\$D/\\$F.dir/bug1.go &&\" \\\n@@ -886,31 +999,104 @@ proc go-gc-tests { } {\n \t\t    file delete $base-out.x\n \t\t    go-torture-execute \"./$base-out.go\"\n \t\t}\n-\t\t# file delete $base-out.go\n+\t\tfile delete $base-out.go\n \t    }\n \t    file delete $output_file\n \t    set runtests $hold_runtests\n \t} elseif { $test_line == \"// errchk \\$G -e \\$D/\\$F.dir/\\[ab\\].go\" } {\n \t    regsub \"\\\\.go$\" $test \".dir/a.go\" file1\n \t    regsub \"\\\\.go$\" $test \".dir/b.go\" file2\n \t    errchk \"$file1\" \"$file2\"\n+\t} elseif { $test_line == \"// \\$G \\$D/\\$F.go \\$D/z*.go && \\$L \\$F.\\$A && ./\\$A.out\" } {\n+\t    set dir [file dirname $test]\n+\t    set go_compile_args [glob $dir/z*.go]\n+\t    go-torture-execute $test\n+\t} elseif { $test_line == \"// \\$G -N -o slow.\\$A \\$D/bug369.dir/pkg.go &&\" \\\n+\t\t       && $test_line2 == \"// \\$G -o fast.\\$A \\$D/bug369.dir/pkg.go &&\" \\\n+\t\t       && $test_line3 == \"// \\$G \\$D/\\$F.go && \\$L \\$F.\\$A && ./\\$A.out\" } {\n+\t    set hold_runtests $runtests\n+\t    set runtests \"go-test.exp\"\n+\t    set dg-do-what-default \"assemble\"\n+\t    regsub \"\\\\.go$\" $test \".dir/pkg.go\" file1\n+\t    dg-test -keep-output $file1 \"\" \"-fgo-prefix=slow -w $DEFAULT_GOCFLAGS\"\n+\t    set ofile1 \"[file rootname [file tail $file1]].o\"\n+\t    file rename -force $ofile1 slow.o\n+\t    dg-test -keep-output $file1 \"-O2\" \"-fgo-prefix=fast -w $DEFAULT_GOCFLAGS\"\n+\t    file rename -force $ofile1 fast.o\n+\t    set ofile2 \"[file rootname [file tail $test]].o\"\n+\t    dg-test -keep-output $test \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t    set output_file \"./[file rootname [file tail $test]].exe\"\n+\t    set comp_output [go_target_compile \"$ofile2 slow.o fast.o\" \\\n+\t\t\t\t $output_file \"executable\" \"$options\"]\n+\t    set comp_output [go-dg-prune $target_triplet $comp_output]\n+\t    if [string match \"\" $comp_output] {\n+\t\tset result [go_load \"$output_file\" \"\" \"\"]\n+\t\tset status [lindex $result 0]\n+\t\t$status $name\n+\t    } else {\n+\t\tverbose -log $comp_output\n+\t\tfail $name\n+\t    }\n+\t    file delete slow.o fast.o $ofile2 $output_file\n+\t    set runtests $hold_runtests\n+\t} elseif { [string match \\\n+\t\t\t\"// \\$G \\$D/\\$F.dir/pkg.go && \\$G \\$D/\\$F.go || echo *\" \\\n+\t\t\t$test_line ] } {\n+\t    set hold_runtests $runtests\n+\t    set runtests \"go-test.exp\"\n+\t    set dg-do-what-default \"assemble\"\n+\t    regsub \"\\\\.go$\" $test \".dir/pkg.go\" file1\n+\t    dg-test -keep-output $file1 \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t    dg-test $test \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t    file delete \"[file rootname [file tail $file1]].o\"\n+\t    set runtests $hold_runtests\n+\t} elseif { $test_line == \"// \\$G \\$D/\\$F.go && \\$L \\$F.\\$A && ./\\$A.out >tmp.go &&\"\n+\t\t   && $test_line2 == \"// \\$G tmp.go && \\$L tmp.\\$A && ./\\$A.out\" } {\n+\t    set go_execute_args \"\"\n+\t    set hold_runtests $runtests\n+\t    set runtests \"go-test.exp\"\n+\t    set dg-do-what-default \"link\"\n+\t    dg-test -keep-output $test \"-O\" \"-w $DEFAULT_GOCFLAGS\"\n+\t    set output_file \"./[file rootname [file tail $test]].exe\"\n+\t    set base \"[file rootname [file tail $test]]\"\n+\t    if [isnative] {\n+\t\tif { [catch \"exec $output_file >$base-out.go\"] != 0 } {\n+\t\t    fail \"$name execution\"\n+\t\t} else {\n+\t\t    pass \"$name execution\"\n+\t\t    file delete $base-out.x\n+\t\t    go-torture-execute \"./$base-out.go\"\n+\t\t}\n+\t\tfile delete $base-out.go\n+\t    }\n+\t    file delete $output_file\n+\t    set runtests $hold_runtests\n \t} elseif { $test_line == \"// # generated by cmplxdivide.c\" } {\n \t    # Ignore.\n \t} elseif { $test_line == \"// \\$G \\$D/bug302.dir/p.go && gopack grc pp.a p.\\$A && \\$G \\$D/bug302.dir/main.go\" \\\n \t\t   || $test_line == \"// \\$G \\$D/empty.go && errchk \\$G \\$D/\\$F.go\" } {\n \t    # These tests import the same package under two different\n \t    # names, which gccgo does not support.\n-\t} elseif { $test_line == \"// \\$G -S \\$D/\\$F.go | egrep initdone >/dev/null && echo FAIL || true\" } {\n+\t} elseif { $test_line == \"// \\$G -S \\$D/\\$F.go | egrep initdone >/dev/null && echo BUG sinit || true\" } {\n \t    # This tests whether initializers are written out\n \t    # statically.  gccgo does not provide a way to test that,\n \t    # as an initializer will be generated for any code which\n \t    # has global variables which need to be registered as GC\n \t    # roots.\n+\t} elseif { $test_line == \"// errchk -0 \\$G -m -l \\$D/\\$F.go\" } {\n+\t    # This tests debug output of the gc compiler, which is\n+\t    # meaningless for gccgo.\n+\t} elseif { $test_line == \"// \\[ \\$O == 6 \\] || errchk \\$G -e \\$D/\\$F.go\" \\\n+\t\t       || $test_line == \"// \\[ \\$O != 6 \\]  || errchk \\$G -e \\$D/\\$F.go\" } {\n+\t    # This tests specific handling of the gc compiler on types\n+\t    # that are too large.  It is target specific in a way I\n+\t    # haven't bothered to check for here.\n \t} else {\n \t    clone_output \"$name: unrecognized test line: $test_line\"\n \t    unsupported $name\n \t}\n \n+\tset go_compile_args \"\"\n \tset go_execute_args \"\"\n     }\n "}, {"sha": "639a9cabbb4fa5d61ac3b42b23af7bbf13e5acea", "filename": "gcc/testsuite/go.test/test/alias.go", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Falias.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Falias.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Falias.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,32 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// Test that error messages say what the source file says\n+// (uint8 vs byte, int32 vs. rune).\n+\n+import (\n+\t\"fmt\"\n+\t\"unicode/utf8\"\n+)\n+\n+func f(byte)  {}\n+func g(uint8) {}\n+\n+func main() {\n+\tvar x float64\n+\tf(x) // ERROR \"byte\"\n+\tg(x) // ERROR \"uint8\"\n+\n+\t// Test across imports.\n+\n+\tvar ff fmt.Formatter\n+\tvar fs fmt.State\n+\tff.Format(fs, x) // ERROR \"rune\"\n+\n+\tutf8.RuneStart(x) // ERROR \"byte\"\n+}"}, {"sha": "e8ef8a23f961b4488124e26dc594e196360ca66b", "filename": "gcc/testsuite/go.test/test/alias1.go", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Falias1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Falias1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Falias1.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,54 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// Test that dynamic interface checks treat byte=uint8\n+// and rune=int or rune=int32.\n+\n+func main() {\n+\tvar x interface{}\n+\n+\tx = byte(1)\n+\tswitch x.(type) {\n+\tcase uint8:\n+\t\t// ok\n+\tdefault:\n+\t\tprintln(\"byte != uint8\")\n+\t}\n+\n+\tx = uint8(2)\n+\tswitch x.(type) {\n+\tcase byte:\n+\t\t// ok\n+\tdefault:\n+\t\tprintln(\"uint8 != byte\")\n+\t}\n+\n+\trune32 := false\n+\tx = rune(3)\n+\tswitch x.(type) {\n+\tcase int:\n+\t\t// ok\n+\tcase int32:\n+\t\t// must be new code\n+\t\trune32 = true\n+\tdefault:\n+\t\tprintln(\"rune != int and rune != int32\")\n+\t}\n+\n+\tif rune32 {\n+\t\tx = int32(4)\n+\t} else {\n+\t\tx = int(5)\n+\t}\n+\tswitch x.(type) {\n+\tcase rune:\n+\t\t// ok\n+\tdefault:\n+\t\tprintln(\"int (or int32) != rune\")\n+\t}\n+}"}, {"sha": "e178f46990d62b613133b17b0f7b56571c9a1228", "filename": "gcc/testsuite/go.test/test/append.go", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fappend.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fappend.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fappend.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -63,6 +63,11 @@ var tests = []struct {\n \t{\"byte i\", append([]byte{0, 1, 2}, []byte{3}...), []byte{0, 1, 2, 3}},\n \t{\"byte j\", append([]byte{0, 1, 2}, []byte{3, 4, 5}...), []byte{0, 1, 2, 3, 4, 5}},\n \n+\t{\"bytestr a\", append([]byte{}, \"0\"...), []byte(\"0\")},\n+\t{\"bytestr b\", append([]byte{}, \"0123\"...), []byte(\"0123\")},\n+\n+\t{\"bytestr c\", append([]byte(\"012\"), \"3\"...), []byte(\"0123\")},\n+\t{\"bytestr d\", append([]byte(\"012\"), \"345\"...), []byte(\"012345\")},\n \n \t{\"int16 a\", append([]int16{}), []int16{}},\n \t{\"int16 b\", append([]int16{}, 0), []int16{0}},"}, {"sha": "8002a2017bc568c754bcdca648e4a03865702479", "filename": "gcc/testsuite/go.test/test/bench/garbage/Makefile", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2FMakefile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2FMakefile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2FMakefile?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -2,23 +2,24 @@\n # Use of this source code is governed by a BSD-style\n # license that can be found in the LICENSE file.\n \n-include ../../src/Make.inc\n+include ../../../src/Make.inc\n \n ALL=\\\n \tparser\\\n \tpeano\\\n \ttree\\\n+\ttree2\\\n \n all: $(addsuffix .out, $(ALL))\n \n %.$O: %.go stats.go\n-\t$(GC) $*.go stats.go\n+\t$(GC) $(GCFLAGS) $(GCIMPORTS) $*.go stats.go\n \n %.out: %.$O\n \t$(LD) -o $@ $*.$O\n \n %.bench: %.out\n-\t./$*.out\n+\ttime ./$*.out\n \n bench: $(addsuffix .bench, $(ALL))\n ", "previous_filename": "gcc/testsuite/go.test/test/garbage/Makefile"}, {"sha": "9e15f6c0f4d41ee1dc0ee0f3aa3ea1ccb27767de", "filename": "gcc/testsuite/go.test/test/bench/garbage/parser.go", "status": "renamed", "additions": 34, "deletions": 47, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Fparser.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Fparser.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Fparser.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -12,27 +12,27 @@ import (\n \t\"go/ast\"\n \t\"go/parser\"\n \t\"go/token\"\n+\t\"log\"\n+\t\"net/http\"\n+\t_ \"net/http/pprof\"\n \t\"os\"\n \t\"path\"\n \t\"runtime\"\n \t\"strings\"\n \t\"time\"\n-\t\"http\"\n-\t_ \"http/pprof\"\n-\t\"log\"\n )\n \n var serve = flag.String(\"serve\", \"\", \"serve http on this address at end\")\n \n-func isGoFile(dir *os.FileInfo) bool {\n-\treturn dir.IsRegular() &&\n-\t\t!strings.HasPrefix(dir.Name, \".\") && // ignore .files\n-\t\tpath.Ext(dir.Name) == \".go\"\n+func isGoFile(dir os.FileInfo) bool {\n+\treturn !dir.IsDir() &&\n+\t\t!strings.HasPrefix(dir.Name(), \".\") && // ignore .files\n+\t\tpath.Ext(dir.Name()) == \".go\"\n }\n \n-func isPkgFile(dir *os.FileInfo) bool {\n+func isPkgFile(dir os.FileInfo) bool {\n \treturn isGoFile(dir) &&\n-\t\t!strings.HasSuffix(dir.Name, \"_test.go\") // ignore test files\n+\t\t!strings.HasSuffix(dir.Name(), \"_test.go\") // ignore test files\n }\n \n func pkgName(filename string) string {\n@@ -49,15 +49,15 @@ func parseDir(dirpath string) map[string]*ast.Package {\n \t_, pkgname := path.Split(dirpath)\n \n \t// filter function to select the desired .go files\n-\tfilter := func(d *os.FileInfo) bool {\n+\tfilter := func(d os.FileInfo) bool {\n \t\tif isPkgFile(d) {\n \t\t\t// Some directories contain main packages: Only accept\n \t\t\t// files that belong to the expected package so that\n \t\t\t// parser.ParsePackage doesn't return \"multiple packages\n \t\t\t// found\" errors.\n \t\t\t// Additionally, accept the special package name\n \t\t\t// fakePkgName if we are looking at cmd documentation.\n-\t\t\tname := pkgName(dirpath + \"/\" + d.Name)\n+\t\t\tname := pkgName(dirpath + \"/\" + d.Name())\n \t\t\treturn name == pkgname\n \t\t}\n \t\treturn false\n@@ -66,17 +66,13 @@ func parseDir(dirpath string) map[string]*ast.Package {\n \t// get package AST\n \tpkgs, err := parser.ParseDir(token.NewFileSet(), dirpath, filter, parser.ParseComments)\n \tif err != nil {\n-\t\tprintln(\"parse\", dirpath, err.String())\n+\t\tprintln(\"parse\", dirpath, err.Error())\n \t\tpanic(\"fail\")\n \t}\n \treturn pkgs\n }\n \n func main() {\n-\truntime.GOMAXPROCS(4)\n-\tgo func() {}()\n-\tgo func() {}()\n-\tgo func() {}()\n \tst := &runtime.MemStats\n \tpackages = append(packages, packages...)\n \tpackages = append(packages, packages...)\n@@ -86,7 +82,7 @@ func main() {\n \tflag.Parse()\n \n \tvar lastParsed []map[string]*ast.Package\n-\tvar t0 int64\n+\tvar t0 time.Time\n \tpkgroot := runtime.GOROOT() + \"/src/pkg/\"\n \tfor pass := 0; pass < 2; pass++ {\n \t\t// Once the heap is grown to full size, reset counters.\n@@ -95,7 +91,7 @@ func main() {\n \t\t// the average look much better than it actually is.\n \t\tst.NumGC = 0\n \t\tst.PauseTotalNs = 0\n-\t\tt0 = time.Nanoseconds()\n+\t\tt0 = time.Now()\n \n \t\tfor i := 0; i < *n; i++ {\n \t\t\tparsed := make([]map[string]*ast.Package, *p)\n@@ -109,7 +105,7 @@ func main() {\n \t\truntime.GC()\n \t\truntime.GC()\n \t}\n-\tt1 := time.Nanoseconds()\n+\tt1 := time.Now()\n \n \tfmt.Printf(\"Alloc=%d/%d Heap=%d Mallocs=%d PauseTime=%.3f/%d = %.3f\\n\",\n \t\tst.Alloc, st.TotalAlloc,\n@@ -124,31 +120,28 @@ func main() {\n \t\t}\n \t*/\n \t// Standard gotest benchmark output, collected by build dashboard.\n-\tgcstats(\"BenchmarkParser\", *n, t1-t0)\n+\tgcstats(\"BenchmarkParser\", *n, t1.Sub(t0))\n \n \tif *serve != \"\" {\n \t\tlog.Fatal(http.ListenAndServe(*serve, nil))\n \t\tprintln(lastParsed)\n \t}\n }\n \n-\n var packages = []string{\n \t\"archive/tar\",\n-\t\"asn1\",\n-\t\"big\",\n+\t\"encoding/asn1\",\n+\t\"math/big\",\n \t\"bufio\",\n \t\"bytes\",\n-\t\"cmath\",\n+\t\"math/cmplx\",\n \t\"compress/flate\",\n \t\"compress/gzip\",\n \t\"compress/zlib\",\n \t\"container/heap\",\n \t\"container/list\",\n \t\"container/ring\",\n-\t\"container/vector\",\n \t\"crypto/aes\",\n-\t\"crypto/block\",\n \t\"crypto/blowfish\",\n \t\"crypto/hmac\",\n \t\"crypto/md4\",\n@@ -167,20 +160,14 @@ var packages = []string{\n \t\"debug/macho\",\n \t\"debug/elf\",\n \t\"debug/gosym\",\n-\t\"debug/proc\",\n-\t\"ebnf\",\n+\t\"exp/ebnf\",\n \t\"encoding/ascii85\",\n \t\"encoding/base64\",\n \t\"encoding/binary\",\n \t\"encoding/git85\",\n \t\"encoding/hex\",\n \t\"encoding/pem\",\n-\t\"exec\",\n-\t\"exp/datafmt\",\n-\t\"exp/draw\",\n-\t\"exp/eval\",\n-\t\"exp/iterable\",\n-\t\"expvar\",\n+\t\"os/exec\",\n \t\"flag\",\n \t\"fmt\",\n \t\"go/ast\",\n@@ -189,18 +176,18 @@ var packages = []string{\n \t\"go/printer\",\n \t\"go/scanner\",\n \t\"go/token\",\n-\t\"gob\",\n+\t\"encoding/gob\",\n \t\"hash\",\n \t\"hash/adler32\",\n \t\"hash/crc32\",\n \t\"hash/crc64\",\n-\t\"http\",\n+\t\"net/http\",\n \t\"image\",\n \t\"image/jpeg\",\n \t\"image/png\",\n \t\"io\",\n \t\"io/ioutil\",\n-\t\"json\",\n+\t\"encoding/json\",\n \t\"log\",\n \t\"math\",\n \t\"mime\",\n@@ -209,29 +196,29 @@ var packages = []string{\n \t\"os/signal\",\n \t\"patch\",\n \t\"path\",\n-\t\"rand\",\n+\t\"math/rand\",\n \t\"reflect\",\n \t\"regexp\",\n-\t\"rpc\",\n+\t\"net/rpc\",\n \t\"runtime\",\n-\t\"scanner\",\n+\t\"text/scanner\",\n \t\"sort\",\n-\t\"smtp\",\n+\t\"net/smtp\",\n \t\"strconv\",\n \t\"strings\",\n \t\"sync\",\n \t\"syscall\",\n-\t\"syslog\",\n-\t\"tabwriter\",\n-\t\"template\",\n+\t\"log/syslog\",\n+\t\"text/tabwriter\",\n+\t\"text/template\",\n \t\"testing\",\n \t\"testing/iotest\",\n \t\"testing/quick\",\n \t\"testing/script\",\n \t\"time\",\n \t\"unicode\",\n-\t\"utf8\",\n-\t\"utf16\",\n+\t\"unicode/utf8\",\n+\t\"unicode/utf16\",\n \t\"websocket\",\n-\t\"xml\",\n+\t\"encoding/xml\",\n }", "previous_filename": "gcc/testsuite/go.test/test/garbage/parser.go"}, {"sha": "f1ad6ed699c6fbbbc5b4e0fd2dea2331cd5be4e7", "filename": "gcc/testsuite/go.test/test/bench/garbage/peano.go", "status": "renamed", "additions": 3, "deletions": 17, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Fpeano.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Fpeano.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Fpeano.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -12,31 +12,25 @@ import (\n \t\"time\"\n )\n \n-\n type Number struct {\n \tnext *Number\n }\n \n-\n // -------------------------------------\n // Peano primitives\n \n func zero() *Number { return nil }\n \n-\n func is_zero(x *Number) bool { return x == nil }\n \n-\n func add1(x *Number) *Number {\n \te := new(Number)\n \te.next = x\n \treturn e\n }\n \n-\n func sub1(x *Number) *Number { return x.next }\n \n-\n func add(x, y *Number) *Number {\n \tif is_zero(y) {\n \t\treturn x\n@@ -45,7 +39,6 @@ func add(x, y *Number) *Number {\n \treturn add(add1(x), sub1(y))\n }\n \n-\n func mul(x, y *Number) *Number {\n \tif is_zero(x) || is_zero(y) {\n \t\treturn zero()\n@@ -54,7 +47,6 @@ func mul(x, y *Number) *Number {\n \treturn add(mul(x, sub1(y)), x)\n }\n \n-\n func fact(n *Number) *Number {\n \tif is_zero(n) {\n \t\treturn add1(zero())\n@@ -63,7 +55,6 @@ func fact(n *Number) *Number {\n \treturn mul(fact(sub1(n)), n)\n }\n \n-\n // -------------------------------------\n // Helpers to generate/count Peano integers\n \n@@ -75,7 +66,6 @@ func gen(n int) *Number {\n \treturn zero()\n }\n \n-\n func count(x *Number) int {\n \tif is_zero(x) {\n \t\treturn 0\n@@ -84,15 +74,13 @@ func count(x *Number) int {\n \treturn count(sub1(x)) + 1\n }\n \n-\n func check(x *Number, expected int) {\n \tvar c = count(x)\n \tif c != expected {\n \t\tpanic(fmt.Sprintf(\"error: found %d; expected %d\", c, expected))\n \t}\n }\n \n-\n // -------------------------------------\n // Test basic functionality\n \n@@ -117,19 +105,17 @@ func verify() {\n \tcheck(fact(gen(5)), 120)\n }\n \n-\n // -------------------------------------\n // Factorial\n \n-\n func main() {\n-\tt0 := time.Nanoseconds()\n+\tt0 := time.Now()\n \tverify()\n \tfor i := 0; i <= 9; i++ {\n \t\tprint(i, \"! = \", count(fact(gen(i))), \"\\n\")\n \t}\n \truntime.GC()\n-\tt1 := time.Nanoseconds()\n+\tt1 := time.Now()\n \n-\tgcstats(\"BenchmarkPeano\", 1, t1-t0)\n+\tgcstats(\"BenchmarkPeano\", 1, t1.Sub(t0))\n }", "previous_filename": "gcc/testsuite/go.test/test/garbage/peano.go"}, {"sha": "985e7eaf5dc3fc23894d6da378189f528da4db93", "filename": "gcc/testsuite/go.test/test/bench/garbage/stats.go", "status": "renamed", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Fstats.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Fstats.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Fstats.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -8,12 +8,13 @@ import (\n \t\"fmt\"\n \t\"runtime\"\n \t\"sort\"\n+\t\"time\"\n )\n \n-func gcstats(name string, n int, t int64) {\n+func gcstats(name string, n int, t time.Duration) {\n \tst := &runtime.MemStats\n \tfmt.Printf(\"garbage.%sMem Alloc=%d/%d Heap=%d NextGC=%d Mallocs=%d\\n\", name, st.Alloc, st.TotalAlloc, st.Sys, st.NextGC, st.Mallocs)\n-\tfmt.Printf(\"garbage.%s %d %d ns/op\\n\", name, n, t/int64(n))\n+\tfmt.Printf(\"garbage.%s %d %d ns/op\\n\", name, n, t.Nanoseconds()/int64(n))\n \tfmt.Printf(\"garbage.%sLastPause 1 %d ns/op\\n\", name, st.PauseNs[(st.NumGC-1)%uint32(len(st.PauseNs))])\n \tfmt.Printf(\"garbage.%sPause %d %d ns/op\\n\", name, st.NumGC, int64(st.PauseTotalNs)/int64(st.NumGC))\n \tnn := int(st.NumGC)\n@@ -22,13 +23,14 @@ func gcstats(name string, n int, t int64) {\n \t}\n \tt1, t2, t3, t4, t5 := tukey5(st.PauseNs[0:nn])\n \tfmt.Printf(\"garbage.%sPause5: %d %d %d %d %d\\n\", name, t1, t2, t3, t4, t5)\n-\t\n-//\tfmt.Printf(\"garbage.%sScan: %v\\n\", name, st.ScanDist)\n+\n+\t//\tfmt.Printf(\"garbage.%sScan: %v\\n\", name, st.ScanDist)\n }\n \n type T []uint64\n-func (t T) Len() int { return len(t) }\n-func (t T) Swap(i, j int) { t[i], t[j] = t[j], t[i] }\n+\n+func (t T) Len() int           { return len(t) }\n+func (t T) Swap(i, j int)      { t[i], t[j] = t[j], t[i] }\n func (t T) Less(i, j int) bool { return t[i] < t[j] }\n \n func tukey5(raw []uint64) (lo, q1, q2, q3, hi uint64) {", "previous_filename": "gcc/testsuite/go.test/test/garbage/stats.go"}, {"sha": "0a3ec234db803333fea2b5a4b1e6062f0d331fd6", "filename": "gcc/testsuite/go.test/test/bench/garbage/tree.go", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Ftree.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Ftree.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Ftree.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -68,7 +68,7 @@ const minDepth = 4\n func main() {\n \tflag.Parse()\n \n-\tt0 := time.Nanoseconds()\n+\tt0 := time.Now()\n \n \tmaxDepth := *n\n \tif minDepth+2 > *n {\n@@ -93,8 +93,8 @@ func main() {\n \t}\n \tfmt.Printf(\"long lived tree of depth %d\\t check: %d\\n\", maxDepth, longLivedTree.itemCheck())\n \n-\tt1 := time.Nanoseconds()\n+\tt1 := time.Now()\n \n \t// Standard gotest benchmark output, collected by build dashboard.\n-\tgcstats(\"BenchmarkTree\", *n, t1-t0)\n+\tgcstats(\"BenchmarkTree\", *n, t1.Sub(t0))\n }", "previous_filename": "gcc/testsuite/go.test/test/garbage/tree.go"}, {"sha": "6d78f72c5b850becf59467755f3fdfb1e83507fe", "filename": "gcc/testsuite/go.test/test/bench/garbage/tree2.go", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Ftree2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Ftree2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgarbage%2Ftree2.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,88 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import (\n+\t\"flag\"\n+\t\"fmt\"\n+\t\"log\"\n+\t\"os\"\n+\t\"runtime\"\n+\t\"runtime/pprof\"\n+\t\"unsafe\"\n+)\n+\n+const BranchingFactor = 4\n+\n+type Object struct {\n+\tchild [BranchingFactor]*Object\n+}\n+\n+var (\n+\tcpus       = flag.Int(\"cpus\", 1, \"number of cpus to use\")\n+\theapsize   = flag.Int64(\"heapsize\", 100*1024*1024, \"size of the heap in bytes\")\n+\tcpuprofile = flag.String(\"cpuprofile\", \"\", \"write cpu profile to file\")\n+\n+\tlastPauseNs uint64 = 0\n+\tlastFree    uint64 = 0\n+\theap        *Object\n+\tcalls       [20]int\n+\tnumobjects  int64\n+)\n+\n+func buildHeap() {\n+\tobjsize := int64(unsafe.Sizeof(Object{}))\n+\theap, _ = buildTree(float64(objsize), float64(*heapsize), 0)\n+\tfmt.Printf(\"*** built heap: %.0f MB; (%d objects * %d bytes)\\n\",\n+\t\tfloat64(*heapsize)/1048576, numobjects, objsize)\n+}\n+\n+func buildTree(objsize, size float64, depth int) (*Object, float64) {\n+\tcalls[depth]++\n+\tx := &Object{}\n+\tnumobjects++\n+\tsubtreeSize := (size - objsize) / BranchingFactor\n+\talloc := objsize\n+\tfor i := 0; i < BranchingFactor && alloc < size; i++ {\n+\t\tc, n := buildTree(objsize, subtreeSize, depth+1)\n+\t\tx.child[i] = c\n+\t\talloc += n\n+\t}\n+\treturn x, alloc\n+}\n+\n+func gc() {\n+\truntime.GC()\n+\truntime.UpdateMemStats()\n+\tpause := runtime.MemStats.PauseTotalNs\n+\tinuse := runtime.MemStats.Alloc\n+\tfree := runtime.MemStats.TotalAlloc - inuse\n+\tfmt.Printf(\"gc pause: %8.3f ms; collect: %8.0f MB; heapsize: %8.0f MB\\n\",\n+\t\tfloat64(pause-lastPauseNs)/1e6,\n+\t\tfloat64(free-lastFree)/1048576,\n+\t\tfloat64(inuse)/1048576)\n+\tlastPauseNs = pause\n+\tlastFree = free\n+}\n+\n+func main() {\n+\tflag.Parse()\n+\tbuildHeap()\n+\truntime.GOMAXPROCS(*cpus)\n+\truntime.UpdateMemStats()\n+\tlastPauseNs = runtime.MemStats.PauseTotalNs\n+\tlastFree = runtime.MemStats.TotalAlloc - runtime.MemStats.Alloc\n+\tif *cpuprofile != \"\" {\n+\t\tf, err := os.Create(*cpuprofile)\n+\t\tif err != nil {\n+\t\t\tlog.Fatal(err)\n+\t\t}\n+\t\tpprof.StartCPUProfile(f)\n+\t\tdefer pprof.StopCPUProfile()\n+\t}\n+\tfor i := 0; i < 10; i++ {\n+\t\tgc()\n+\t}\n+}"}, {"sha": "94847438f9c62a1039c899a902fc61f583bf4425", "filename": "gcc/testsuite/go.test/test/bench/go1/Makefile", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2FMakefile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2FMakefile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2FMakefile?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,7 @@\n+include $(GOROOT)/src/Make.inc\n+\n+TARG=go1\n+GOFILES=\\\n+\tdummy.go\\\n+\n+include $(GOROOT)/src/Make.pkg"}, {"sha": "9fa1baa99aa0699d17d4765e284597b2f8f6ed4e", "filename": "gcc/testsuite/go.test/test/bench/go1/_gotest_.6", "status": "added", "additions": 885, "deletions": 0, "changes": 885, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2F_gotest_.6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2F_gotest_.6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2F_gotest_.6?ref=efcf639fab17cac5437f70e3a59795ac320ddc37"}, {"sha": "2920de0f03fe339b442bf581b1115a1c545a8dfa", "filename": "gcc/testsuite/go.test/test/bench/go1/_testmain.6", "status": "added", "additions": 261, "deletions": 0, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2F_testmain.6", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2F_testmain.6", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2F_testmain.6?ref=efcf639fab17cac5437f70e3a59795ac320ddc37"}, {"sha": "bedc373a575d34065d9467a3ceb87a18bce581f4", "filename": "gcc/testsuite/go.test/test/bench/go1/_testmain.go", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2F_testmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2F_testmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2F_testmain.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,40 @@\n+package main\n+\n+import target \"go1\"\n+import \"testing\"\n+import \"regexp\"\n+\n+var tests = []testing.InternalTest{\n+}\n+\n+var benchmarks = []testing.InternalBenchmark{\n+\t{\"go1.BenchmarkBinaryTree17\", target.BenchmarkBinaryTree17},\n+\t{\"go1.BenchmarkFannkuch11\", target.BenchmarkFannkuch11},\n+\t{\"go1.BenchmarkGobDecode\", target.BenchmarkGobDecode},\n+\t{\"go1.BenchmarkGobEncode\", target.BenchmarkGobEncode},\n+\t{\"go1.BenchmarkGzip\", target.BenchmarkGzip},\n+\t{\"go1.BenchmarkGunzip\", target.BenchmarkGunzip},\n+\t{\"go1.BenchmarkJSONEncode\", target.BenchmarkJSONEncode},\n+\t{\"go1.BenchmarkJSONDecode\", target.BenchmarkJSONDecode},\n+\t{\"go1.BenchmarkRevcomp25M\", target.BenchmarkRevcomp25M},\n+\t{\"go1.BenchmarkTemplate\", target.BenchmarkTemplate},\n+}\n+var examples = []testing.InternalExample{}\n+\n+var matchPat string\n+var matchRe *regexp.Regexp\n+\n+func matchString(pat, str string) (result bool, err error) {\n+\tif matchRe == nil || matchPat != pat {\n+\t\tmatchPat = pat\n+\t\tmatchRe, err = regexp.Compile(matchPat)\n+\t\tif err != nil {\n+\t\t\treturn\n+\t\t}\n+\t}\n+\treturn matchRe.MatchString(str), nil\n+}\n+\n+func main() {\n+\ttesting.Main(matchString, tests, benchmarks, examples)\n+}"}, {"sha": "c64c4b881669a742110f386296879358e746d98f", "filename": "gcc/testsuite/go.test/test/bench/go1/binarytree_test.go", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fbinarytree_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fbinarytree_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fbinarytree_test.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This benchmark, taken from the shootout, tests garbage collector\n+// performance by generating and discarding large binary trees.\n+\n+package go1\n+\n+import \"testing\"\n+\n+type binaryNode struct {\n+\titem        int\n+\tleft, right *binaryNode\n+}\n+\n+func bottomUpTree(item, depth int) *binaryNode {\n+\tif depth <= 0 {\n+\t\treturn &binaryNode{item: item}\n+\t}\n+\treturn &binaryNode{item, bottomUpTree(2*item-1, depth-1), bottomUpTree(2*item, depth-1)}\n+}\n+\n+func (n *binaryNode) itemCheck() int {\n+\tif n.left == nil {\n+\t\treturn n.item\n+\t}\n+\treturn n.item + n.left.itemCheck() - n.right.itemCheck()\n+}\n+\n+const minDepth = 4\n+\n+func binarytree(n int) {\n+\tmaxDepth := n\n+\tif minDepth+2 > n {\n+\t\tmaxDepth = minDepth + 2\n+\t}\n+\tstretchDepth := maxDepth + 1\n+\n+\tcheck := bottomUpTree(0, stretchDepth).itemCheck()\n+\t//fmt.Printf(\"stretch tree of depth %d\\t check: %d\\n\", stretchDepth, check)\n+\n+\tlongLivedTree := bottomUpTree(0, maxDepth)\n+\n+\tfor depth := minDepth; depth <= maxDepth; depth += 2 {\n+\t\titerations := 1 << uint(maxDepth-depth+minDepth)\n+\t\tcheck = 0\n+\n+\t\tfor i := 1; i <= iterations; i++ {\n+\t\t\tcheck += bottomUpTree(i, depth).itemCheck()\n+\t\t\tcheck += bottomUpTree(-i, depth).itemCheck()\n+\t\t}\n+\t\t//fmt.Printf(\"%d\\t trees of depth %d\\t check: %d\\n\", iterations*2, depth, check)\n+\t}\n+\tlongLivedTree.itemCheck()\n+\t//fmt.Printf(\"long lived tree of depth %d\\t check: %d\\n\", maxDepth, longLivedTree.itemCheck())\n+}\n+\n+func BenchmarkBinaryTree17(b *testing.B) {\n+\tfor i := 0; i < b.N; i++ {\n+\t\tbinarytree(17)\n+\t}\n+}"}, {"sha": "4956bc7b79ffdc7655c08917adcbb2d7119a384d", "filename": "gcc/testsuite/go.test/test/bench/go1/dummy.go", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fdummy.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fdummy.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fdummy.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,3 @@\n+package go1\n+\n+// Nothing to see here: everything is in the _test files."}, {"sha": "ae45bfd88130dfe382bffe61ad48613cc0632307", "filename": "gcc/testsuite/go.test/test/bench/go1/fannkuch_test.go", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ffannkuch_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ffannkuch_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ffannkuch_test.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,84 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This benchmark, taken from the shootout, tests array indexing\n+// and array bounds elimination performance.\n+\n+package go1\n+\n+import \"testing\"\n+\n+func fannkuch(n int) int {\n+\tif n < 1 {\n+\t\treturn 0\n+\t}\n+\n+\tn1 := n - 1\n+\tperm := make([]int, n)\n+\tperm1 := make([]int, n)\n+\tcount := make([]int, n)\n+\n+\tfor i := 0; i < n; i++ {\n+\t\tperm1[i] = i // initial (trivial) permutation\n+\t}\n+\n+\tr := n\n+\tdidpr := 0\n+\tflipsMax := 0\n+\tfor {\n+\t\tif didpr < 30 {\n+\t\t\tdidpr++\n+\t\t}\n+\t\tfor ; r != 1; r-- {\n+\t\t\tcount[r-1] = r\n+\t\t}\n+\n+\t\tif perm1[0] != 0 && perm1[n1] != n1 {\n+\t\t\tflips := 0\n+\t\t\tfor i := 1; i < n; i++ { // perm = perm1\n+\t\t\t\tperm[i] = perm1[i]\n+\t\t\t}\n+\t\t\tk := perm1[0] // cache perm[0] in k\n+\t\t\tfor {         // k!=0 ==> k>0\n+\t\t\t\tfor i, j := 1, k-1; i < j; i, j = i+1, j-1 {\n+\t\t\t\t\tperm[i], perm[j] = perm[j], perm[i]\n+\t\t\t\t}\n+\t\t\t\tflips++\n+\t\t\t\t// Now exchange k (caching perm[0]) and perm[k]... with care!\n+\t\t\t\tj := perm[k]\n+\t\t\t\tperm[k] = k\n+\t\t\t\tk = j\n+\t\t\t\tif k == 0 {\n+\t\t\t\t\tbreak\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif flipsMax < flips {\n+\t\t\t\tflipsMax = flips\n+\t\t\t}\n+\t\t}\n+\n+\t\tfor ; r < n; r++ {\n+\t\t\t// rotate down perm[0..r] by one\n+\t\t\tperm0 := perm1[0]\n+\t\t\tfor i := 0; i < r; i++ {\n+\t\t\t\tperm1[i] = perm1[i+1]\n+\t\t\t}\n+\t\t\tperm1[r] = perm0\n+\t\t\tcount[r]--\n+\t\t\tif count[r] > 0 {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t}\n+\t\tif r == n {\n+\t\t\treturn flipsMax\n+\t\t}\n+\t}\n+\treturn 0\n+}\n+\n+func BenchmarkFannkuch11(b *testing.B) {\n+\tfor i := 0; i < b.N; i++ {\n+\t\tfannkuch(11)\n+\t}\n+}"}, {"sha": "dcb2d1055d9763253aeae8e3d01504b12959b66c", "filename": "gcc/testsuite/go.test/test/bench/go1/fasta_test.go", "status": "added", "additions": 164, "deletions": 0, "changes": 164, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ffasta_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ffasta_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ffasta_test.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,164 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package go1\n+\n+// Not a benchmark; input for revcomp.\n+\n+var fasta25m = fasta(25e6)\n+\n+func fasta(n int) []byte {\n+\tout := make(fastaBuffer, 0, 11*n)\n+\n+\tiub := []fastaAcid{\n+\t\t{prob: 0.27, sym: 'a'},\n+\t\t{prob: 0.12, sym: 'c'},\n+\t\t{prob: 0.12, sym: 'g'},\n+\t\t{prob: 0.27, sym: 't'},\n+\t\t{prob: 0.02, sym: 'B'},\n+\t\t{prob: 0.02, sym: 'D'},\n+\t\t{prob: 0.02, sym: 'H'},\n+\t\t{prob: 0.02, sym: 'K'},\n+\t\t{prob: 0.02, sym: 'M'},\n+\t\t{prob: 0.02, sym: 'N'},\n+\t\t{prob: 0.02, sym: 'R'},\n+\t\t{prob: 0.02, sym: 'S'},\n+\t\t{prob: 0.02, sym: 'V'},\n+\t\t{prob: 0.02, sym: 'W'},\n+\t\t{prob: 0.02, sym: 'Y'},\n+\t}\n+\n+\thomosapiens := []fastaAcid{\n+\t\t{prob: 0.3029549426680, sym: 'a'},\n+\t\t{prob: 0.1979883004921, sym: 'c'},\n+\t\t{prob: 0.1975473066391, sym: 'g'},\n+\t\t{prob: 0.3015094502008, sym: 't'},\n+\t}\n+\n+\talu := []byte(\n+\t\t\"GGCCGGGCGCGGTGGCTCACGCCTGTAATCCCAGCACTTTGG\" +\n+\t\t\t\"GAGGCCGAGGCGGGCGGATCACCTGAGGTCAGGAGTTCGAGA\" +\n+\t\t\t\"CCAGCCTGGCCAACATGGTGAAACCCCGTCTCTACTAAAAAT\" +\n+\t\t\t\"ACAAAAATTAGCCGGGCGTGGTGGCGCGCGCCTGTAATCCCA\" +\n+\t\t\t\"GCTACTCGGGAGGCTGAGGCAGGAGAATCGCTTGAACCCGGG\" +\n+\t\t\t\"AGGCGGAGGTTGCAGTGAGCCGAGATCGCGCCACTGCACTCC\" +\n+\t\t\t\"AGCCTGGGCGACAGAGCGAGACTCCGTCTCAAAAA\")\n+\n+\tout.WriteString(\">ONE Homo sapiens alu\\n\")\n+\tfastaRepeat(&out, alu, 2*n)\n+\tout.WriteString(\">TWO IUB ambiguity codes\\n\")\n+\tfastaRandom(&out, iub, 3*n)\n+\tout.WriteString(\">THREE Homo sapiens frequency\\n\")\n+\tfastaRandom(&out, homosapiens, 5*n)\n+\treturn out\n+}\n+\n+type fastaBuffer []byte\n+\n+func (b *fastaBuffer) Flush() {\n+\tpanic(\"flush\")\n+}\n+\n+func (b *fastaBuffer) WriteString(s string) {\n+\tp := b.NextWrite(len(s))\n+\tcopy(p, s)\n+}\n+\n+func (b *fastaBuffer) NextWrite(n int) []byte {\n+\tp := *b\n+\tif len(p)+n > cap(p) {\n+\t\tb.Flush()\n+\t\tp = *b\n+\t}\n+\tout := p[len(p) : len(p)+n]\n+\t*b = p[:len(p)+n]\n+\treturn out\n+}\n+\n+const fastaLine = 60\n+\n+func fastaRepeat(out *fastaBuffer, alu []byte, n int) {\n+\tbuf := append(alu, alu...)\n+\toff := 0\n+\tfor n > 0 {\n+\t\tm := n\n+\t\tif m > fastaLine {\n+\t\t\tm = fastaLine\n+\t\t}\n+\t\tbuf1 := out.NextWrite(m + 1)\n+\t\tcopy(buf1, buf[off:])\n+\t\tbuf1[m] = '\\n'\n+\t\tif off += m; off >= len(alu) {\n+\t\t\toff -= len(alu)\n+\t\t}\n+\t\tn -= m\n+\t}\n+}\n+\n+const (\n+\tfastaLookupSize          = 4096\n+\tfastaLookupScale float64 = fastaLookupSize - 1\n+)\n+\n+var fastaRand uint32 = 42\n+\n+type fastaAcid struct {\n+\tsym   byte\n+\tprob  float64\n+\tcprob float64\n+\tnext  *fastaAcid\n+}\n+\n+func fastaComputeLookup(acid []fastaAcid) *[fastaLookupSize]*fastaAcid {\n+\tvar lookup [fastaLookupSize]*fastaAcid\n+\tvar p float64\n+\tfor i := range acid {\n+\t\tp += acid[i].prob\n+\t\tacid[i].cprob = p * fastaLookupScale\n+\t\tif i > 0 {\n+\t\t\tacid[i-1].next = &acid[i]\n+\t\t}\n+\t}\n+\tacid[len(acid)-1].cprob = 1.0 * fastaLookupScale\n+\n+\tj := 0\n+\tfor i := range lookup {\n+\t\tfor acid[j].cprob < float64(i) {\n+\t\t\tj++\n+\t\t}\n+\t\tlookup[i] = &acid[j]\n+\t}\n+\n+\treturn &lookup\n+}\n+\n+func fastaRandom(out *fastaBuffer, acid []fastaAcid, n int) {\n+\tconst (\n+\t\tIM = 139968\n+\t\tIA = 3877\n+\t\tIC = 29573\n+\t)\n+\tlookup := fastaComputeLookup(acid)\n+\tfor n > 0 {\n+\t\tm := n\n+\t\tif m > fastaLine {\n+\t\t\tm = fastaLine\n+\t\t}\n+\t\tbuf := out.NextWrite(m + 1)\n+\t\tf := fastaLookupScale / IM\n+\t\tmyrand := fastaRand\n+\t\tfor i := 0; i < m; i++ {\n+\t\t\tmyrand = (myrand*IA + IC) % IM\n+\t\t\tr := float64(int(myrand)) * f\n+\t\t\ta := lookup[int(r)]\n+\t\t\tfor a.cprob < r {\n+\t\t\t\ta = a.next\n+\t\t\t}\n+\t\t\tbuf[i] = a.sym\n+\t\t}\n+\t\tfastaRand = myrand\n+\t\tbuf[m] = '\\n'\n+\t\tn -= m\n+\t}\n+}"}, {"sha": "00eeed57a569197eb0ffa38ca8d06547d2bfc5ff", "filename": "gcc/testsuite/go.test/test/bench/go1/gob_test.go", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fgob_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fgob_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fgob_test.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,95 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This benchmark tests gob encoding and decoding performance.\n+\n+package go1\n+\n+import (\n+\t\"bytes\"\n+\t\"encoding/gob\"\n+\t\"encoding/json\"\n+\t\"io/ioutil\"\n+\t\"log\"\n+\t\"reflect\"\n+\t\"testing\"\n+)\n+\n+var (\n+\tgobbytes []byte\n+\tgobdata  *JSONResponse\n+)\n+\n+func gobinit() {\n+\t// gobinit is called after json's init,\n+\t// because it uses jsondata.\n+\tgobdata = gobResponse(&jsondata)\n+\n+\tvar buf bytes.Buffer\n+\tif err := gob.NewEncoder(&buf).Encode(gobdata); err != nil {\n+\t\tpanic(err)\n+\t}\n+\tgobbytes = buf.Bytes()\n+\n+\tvar r JSONResponse\n+\tif err := gob.NewDecoder(bytes.NewBuffer(gobbytes)).Decode(&r); err != nil {\n+\t\tpanic(err)\n+\t}\n+\tif !reflect.DeepEqual(gobdata, &r) {\n+\t\tlog.Printf(\"%v\\n%v\", jsondata, r)\n+\t\tb, _ := json.Marshal(&jsondata)\n+\t\tbr, _ := json.Marshal(&r)\n+\t\tlog.Printf(\"%s\\n%s\\n\", b, br)\n+\t\tpanic(\"gob: encode+decode lost data\")\n+\t}\n+}\n+\n+// gob turns [] into null, so make a copy of the data structure like that\n+func gobResponse(r *JSONResponse) *JSONResponse {\n+\treturn &JSONResponse{gobNode(r.Tree), r.Username}\n+}\n+\n+func gobNode(n *JSONNode) *JSONNode {\n+\tn1 := new(JSONNode)\n+\t*n1 = *n\n+\tif len(n1.Kids) == 0 {\n+\t\tn1.Kids = nil\n+\t} else {\n+\t\tfor i, k := range n1.Kids {\n+\t\t\tn1.Kids[i] = gobNode(k)\n+\t\t}\n+\t}\n+\treturn n1\n+}\n+\n+func gobdec() {\n+\tif gobbytes == nil {\n+\t\tpanic(\"gobdata not initialized\")\n+\t}\n+\tvar r JSONResponse\n+\tif err := gob.NewDecoder(bytes.NewBuffer(gobbytes)).Decode(&r); err != nil {\n+\t\tpanic(err)\n+\t}\n+\t_ = r\n+}\n+\n+func gobenc() {\n+\tif err := gob.NewEncoder(ioutil.Discard).Encode(&gobdata); err != nil {\n+\t\tpanic(err)\n+\t}\n+}\n+\n+func BenchmarkGobDecode(b *testing.B) {\n+\tb.SetBytes(int64(len(gobbytes)))\n+\tfor i := 0; i < b.N; i++ {\n+\t\tgobdec()\n+\t}\n+}\n+\n+func BenchmarkGobEncode(b *testing.B) {\n+\tb.SetBytes(int64(len(gobbytes)))\n+\tfor i := 0; i < b.N; i++ {\n+\t\tgobenc()\n+\t}\n+}"}, {"sha": "c9eeb175f535dd9b885b870ea872c11eb33e8fc3", "filename": "gcc/testsuite/go.test/test/bench/go1/gzip_test.go", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fgzip_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fgzip_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fgzip_test.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,69 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This benchmark tests gzip and gunzip performance.\n+\n+package go1\n+\n+import (\n+\t\"bytes\"\n+\tgz \"compress/gzip\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\t\"testing\"\n+)\n+\n+var (\n+\tjsongunz = bytes.Repeat(jsonbytes, 10)\n+\tjsongz   []byte\n+)\n+\n+func init() {\n+\tvar buf bytes.Buffer\n+\tc, err := gz.NewWriter(&buf)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tc.Write(jsongunz)\n+\tc.Close()\n+\tjsongz = buf.Bytes()\n+}\n+\n+func gzip() {\n+\tc, err := gz.NewWriter(ioutil.Discard)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tif _, err := c.Write(jsongunz); err != nil {\n+\t\tpanic(err)\n+\t}\n+\tif err := c.Close(); err != nil {\n+\t\tpanic(err)\n+\t}\n+}\n+\n+func gunzip() {\n+\tr, err := gz.NewReader(bytes.NewBuffer(jsongz))\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tif _, err := io.Copy(ioutil.Discard, r); err != nil {\n+\t\tpanic(err)\n+\t}\n+\tr.Close()\n+}\n+\n+func BenchmarkGzip(b *testing.B) {\n+\tb.SetBytes(int64(len(jsongunz)))\n+\tfor i := 0; i < b.N; i++ {\n+\t\tgzip()\n+\t}\n+}\n+\n+func BenchmarkGunzip(b *testing.B) {\n+\tb.SetBytes(int64(len(jsongunz)))\n+\tfor i := 0; i < b.N; i++ {\n+\t\tgunzip()\n+\t}\n+}"}, {"sha": "5a3012167b1f9c827b091f09bfba9099929fe8e1", "filename": "gcc/testsuite/go.test/test/bench/go1/json_test.go", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fjson_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fjson_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fjson_test.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,84 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This benchmark tests JSON encoding and decoding performance.\n+\n+package go1\n+\n+import (\n+\t\"compress/bzip2\"\n+\t\"encoding/base64\"\n+\t\"encoding/json\"\n+\t\"io\"\n+\t\"io/ioutil\"\n+\t\"strings\"\n+\t\"testing\"\n+)\n+\n+var (\n+\tjsonbytes []byte\n+\tjsondata  JSONResponse\n+)\n+\n+func init() {\n+\tvar r io.Reader\n+\tr = strings.NewReader(jsonbz2_base64)\n+\tr = base64.NewDecoder(base64.StdEncoding, r)\n+\tr = bzip2.NewReader(r)\n+\tb, err := ioutil.ReadAll(r)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\tjsonbytes = b\n+\n+\tif err := json.Unmarshal(jsonbytes, &jsondata); err != nil {\n+\t\tpanic(err)\n+\t}\n+\tgobinit()\n+}\n+\n+type JSONResponse struct {\n+\tTree     *JSONNode `json:\"tree\"`\n+\tUsername string    `json:\"username\"`\n+}\n+\n+type JSONNode struct {\n+\tName     string      `json:\"name\"`\n+\tKids     []*JSONNode `json:\"kids\"`\n+\tCLWeight float64     `json:\"cl_weight\"`\n+\tTouches  int         `json:\"touches\"`\n+\tMinT     int64       `json:\"min_t\"`\n+\tMaxT     int64       `json:\"max_t\"`\n+\tMeanT    int64       `json:\"mean_t\"`\n+}\n+\n+func jsondec() {\n+\tvar r JSONResponse\n+\tif err := json.Unmarshal(jsonbytes, &r); err != nil {\n+\t\tpanic(err)\n+\t}\n+\t_ = r\n+}\n+\n+func jsonenc() {\n+\tbuf, err := json.Marshal(&jsondata)\n+\tif err != nil {\n+\t\tpanic(err)\n+\t}\n+\t_ = buf\n+}\n+\n+func BenchmarkJSONEncode(b *testing.B) {\n+\tb.SetBytes(int64(len(jsonbytes)))\n+\tfor i := 0; i < b.N; i++ {\n+\t\tjsonenc()\n+\t}\n+}\n+\n+func BenchmarkJSONDecode(b *testing.B) {\n+\tb.SetBytes(int64(len(jsonbytes)))\n+\tfor i := 0; i < b.N; i++ {\n+\t\tjsondec()\n+\t}\n+}"}, {"sha": "7d42c9665795b4f3d864bbec8ba2acca20c8d503", "filename": "gcc/testsuite/go.test/test/bench/go1/jsondata_test.go", "status": "added", "additions": 1818, "deletions": 0, "changes": 1818, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fjsondata_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fjsondata_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Fjsondata_test.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37"}, {"sha": "9256164d76f3ccbcfa43887c73d4daa425dc062d", "filename": "gcc/testsuite/go.test/test/bench/go1/revcomp_test.go", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Frevcomp_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Frevcomp_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Frevcomp_test.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This benchmark, taken from the shootout, tests array indexing\n+// and array bounds elimination performance.\n+\n+package go1\n+\n+import (\n+\t\"bufio\"\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"testing\"\n+)\n+\n+var revCompTable = [256]uint8{\n+\t'A': 'T', 'a': 'T',\n+\t'C': 'G', 'c': 'G',\n+\t'G': 'C', 'g': 'C',\n+\t'T': 'A', 't': 'A',\n+\t'U': 'A', 'u': 'A',\n+\t'M': 'K', 'm': 'K',\n+\t'R': 'Y', 'r': 'Y',\n+\t'W': 'W', 'w': 'W',\n+\t'S': 'S', 's': 'S',\n+\t'Y': 'R', 'y': 'R',\n+\t'K': 'M', 'k': 'M',\n+\t'V': 'B', 'v': 'B',\n+\t'H': 'D', 'h': 'D',\n+\t'D': 'H', 'd': 'H',\n+\t'B': 'V', 'b': 'V',\n+\t'N': 'N', 'n': 'N',\n+}\n+\n+func revcomp(data []byte) {\n+\tin := bufio.NewReader(bytes.NewBuffer(data))\n+\tout := ioutil.Discard\n+\tbuf := make([]byte, 1024*1024)\n+\tline, err := in.ReadSlice('\\n')\n+\tfor err == nil {\n+\t\tout.Write(line)\n+\n+\t\t// Accumulate reversed complement in buf[w:]\n+\t\tnchar := 0\n+\t\tw := len(buf)\n+\t\tfor {\n+\t\t\tline, err = in.ReadSlice('\\n')\n+\t\t\tif err != nil || line[0] == '>' {\n+\t\t\t\tbreak\n+\t\t\t}\n+\t\t\tline = line[0 : len(line)-1]\n+\t\t\tnchar += len(line)\n+\t\t\tif len(line)+nchar/60+128 >= w {\n+\t\t\t\tnbuf := make([]byte, len(buf)*5)\n+\t\t\t\tcopy(nbuf[len(nbuf)-len(buf):], buf)\n+\t\t\t\tw += len(nbuf) - len(buf)\n+\t\t\t\tbuf = nbuf\n+\t\t\t}\n+\n+\t\t\t// This loop is the bottleneck.\n+\t\t\tfor _, c := range line {\n+\t\t\t\tw--\n+\t\t\t\tbuf[w] = revCompTable[c]\n+\t\t\t}\n+\t\t}\n+\n+\t\t// Copy down to beginning of buffer, inserting newlines.\n+\t\t// The loop left room for the newlines and 128 bytes of padding.\n+\t\ti := 0\n+\t\tfor j := w; j < len(buf); j += 60 {\n+\t\t\tn := copy(buf[i:i+60], buf[j:])\n+\t\t\tbuf[i+n] = '\\n'\n+\t\t\ti += n + 1\n+\t\t}\n+\t\tout.Write(buf[0:i])\n+\t}\n+}\n+\n+func BenchmarkRevcomp25M(b *testing.B) {\n+\tb.SetBytes(int64(len(fasta25m)))\n+\tfor i := 0; i < b.N; i++ {\n+\t\trevcomp(fasta25m)\n+\t}\n+}"}, {"sha": "db4839a488a417acac59c07f240d0c1b30874290", "filename": "gcc/testsuite/go.test/test/bench/go1/template_test.go", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ftemplate_test.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ftemplate_test.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fgo1%2Ftemplate_test.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,76 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// This benchmark tests text/template throughput,\n+// converting a large data structure with a simple template.\n+\n+package go1\n+\n+import (\n+\t\"bytes\"\n+\t\"io/ioutil\"\n+\t\"strings\"\n+\t\"testing\"\n+\t\"text/template\"\n+)\n+\n+// After removing \\t and \\n this generates identical output to\n+// json.Marshal, making it easy to test for correctness.\n+const tmplText = `\n+{\n+\t\"tree\":{{template \"node\" .Tree}},\n+\t\"username\":\"{{.Username}}\"\n+}\n+{{define \"node\"}}\n+{\n+\t\"name\":\"{{.Name}}\",\n+\t\"kids\":[\n+\t{{range $i, $k := .Kids}}\n+\t\t{{if $i}}\n+\t\t\t,\n+\t\t{{end}}\n+\t\t{{template \"node\" $k}}\n+\t{{end}}\n+\t],\n+\t\"cl_weight\":{{.CLWeight}},\n+\t\"touches\":{{.Touches}},\n+\t\"min_t\":{{.MinT}},\n+\t\"max_t\":{{.MaxT}},\n+\t\"mean_t\":{{.MeanT}}\n+}\n+{{end}}\n+`\n+\n+func stripTabNL(r rune) rune {\n+\tif r == '\\t' || r == '\\n' {\n+\t\treturn -1\n+\t}\n+\treturn r\n+}\n+\n+var tmpl = template.Must(template.New(\"main\").Parse(strings.Map(stripTabNL, tmplText)))\n+\n+func init() {\n+\tvar buf bytes.Buffer\n+\tif err := tmpl.Execute(&buf, &jsondata); err != nil {\n+\t\tpanic(err)\n+\t}\n+\tif !bytes.Equal(buf.Bytes(), jsonbytes) {\n+\t\tprintln(buf.Len(), len(jsonbytes))\n+\t\tpanic(\"wrong output\")\n+\t}\n+}\n+\n+func tmplexec() {\n+\tif err := tmpl.Execute(ioutil.Discard, &jsondata); err != nil {\n+\t\tpanic(err)\n+\t}\n+}\n+\n+func BenchmarkTemplate(b *testing.B) {\n+\tb.SetBytes(int64(len(jsonbytes)))\n+\tfor i := 0; i < b.N; i++ {\n+\t\ttmplexec()\n+\t}\n+}"}, {"sha": "e1c9b7b80ec3907e3b50e07db5e8aed0e49e2aed", "filename": "gcc/testsuite/go.test/test/bench/shootout/Makefile", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2FMakefile", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2FMakefile", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2FMakefile?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -2,7 +2,7 @@\n # Use of this source code is governed by a BSD-style\n # license that can be found in the LICENSE file.\n \n-include ../../src/Make.inc\n+include ../../../src/Make.inc\n \n all:\n \t@echo \"make clean or timing\"", "previous_filename": "gcc/testsuite/go.test/test/bench/Makefile"}, {"sha": "071a4e06e7b270d6c104edb0408dd0dc74975ba1", "filename": "gcc/testsuite/go.test/test/bench/shootout/binary-tree-freelist.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree-freelist.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree-freelist.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree-freelist.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/binary-tree-freelist.go"}, {"sha": "f8286dd88bd490f57323048f4e333a37ede0453d", "filename": "gcc/testsuite/go.test/test/bench/shootout/binary-tree-freelist.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree-freelist.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree-freelist.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree-freelist.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/binary-tree-freelist.txt"}, {"sha": "1b4070406f3eb4375fb4fb23c835f85fb85b4a58", "filename": "gcc/testsuite/go.test/test/bench/shootout/binary-tree.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree.c?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/binary-tree.c"}, {"sha": "9f867d11a70f8d454d37611868f07b98a12aa544", "filename": "gcc/testsuite/go.test/test/bench/shootout/binary-tree.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/binary-tree.go"}, {"sha": "f8286dd88bd490f57323048f4e333a37ede0453d", "filename": "gcc/testsuite/go.test/test/bench/shootout/binary-tree.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fbinary-tree.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/binary-tree.txt"}, {"sha": "ed78c31d7ba09a80430eed112021c81cb6d57548", "filename": "gcc/testsuite/go.test/test/bench/shootout/chameneosredux.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fchameneosredux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fchameneosredux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fchameneosredux.c?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/chameneosredux.c"}, {"sha": "3395798620f060589ab3afefcfb5c11351991b30", "filename": "gcc/testsuite/go.test/test/bench/shootout/chameneosredux.go", "status": "renamed", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fchameneosredux.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fchameneosredux.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fchameneosredux.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -49,20 +49,20 @@ const (\n )\n \n var complement = [...]int{\n-\tred | red<<2: red,\n-\tred | yellow<<2: blue,\n-\tred | blue<<2: yellow,\n-\tyellow | red<<2: blue,\n+\tred | red<<2:       red,\n+\tred | yellow<<2:    blue,\n+\tred | blue<<2:      yellow,\n+\tyellow | red<<2:    blue,\n \tyellow | yellow<<2: yellow,\n-\tyellow | blue<<2: red,\n-\tblue | red<<2: yellow,\n-\tblue | yellow<<2: red,\n-\tblue | blue<<2: blue,\n+\tyellow | blue<<2:   red,\n+\tblue | red<<2:      yellow,\n+\tblue | yellow<<2:   red,\n+\tblue | blue<<2:     blue,\n }\n \n var colname = [...]string{\n-\tblue: \"blue\",\n-\tred: \"red\",\n+\tblue:   \"blue\",\n+\tred:    \"red\",\n \tyellow: \"yellow\",\n }\n ", "previous_filename": "gcc/testsuite/go.test/test/bench/chameneosredux.go"}, {"sha": "6016d59a8c9e65ce1b99a1763e24015e0158f19d", "filename": "gcc/testsuite/go.test/test/bench/shootout/chameneosredux.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fchameneosredux.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fchameneosredux.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fchameneosredux.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/chameneosredux.txt"}, {"sha": "7e9b98d5051e953482502c0381c371fb0fb91f17", "filename": "gcc/testsuite/go.test/test/bench/shootout/fannkuch-parallel.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch-parallel.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch-parallel.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch-parallel.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/fannkuch-parallel.go"}, {"sha": "e66f779ea1d18ea1b153c33e43d41c4bc12bad35", "filename": "gcc/testsuite/go.test/test/bench/shootout/fannkuch-parallel.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch-parallel.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch-parallel.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch-parallel.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/fannkuch-parallel.txt"}, {"sha": "e576b5441f994b0f829c4839ab5c71f012f0c0e5", "filename": "gcc/testsuite/go.test/test/bench/shootout/fannkuch.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch.c?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/fannkuch.c"}, {"sha": "b554c77b10490a0a403d0f423e1b05ca05b8f200", "filename": "gcc/testsuite/go.test/test/bench/shootout/fannkuch.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/fannkuch.go"}, {"sha": "e66f779ea1d18ea1b153c33e43d41c4bc12bad35", "filename": "gcc/testsuite/go.test/test/bench/shootout/fannkuch.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffannkuch.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/fannkuch.txt"}, {"sha": "f1caba0d628000ab62a51a1b731e61bb0db8d559", "filename": "gcc/testsuite/go.test/test/bench/shootout/fasta-1000.out", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffasta-1000.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffasta-1000.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffasta-1000.out?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/fasta-1000.out"}, {"sha": "64c1c5205817725cfbf4b5acd1c28224458bb4de", "filename": "gcc/testsuite/go.test/test/bench/shootout/fasta.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffasta.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffasta.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffasta.c?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/fasta.c"}, {"sha": "17ff5dae55da47bed7e548427155a9b7d1558299", "filename": "gcc/testsuite/go.test/test/bench/shootout/fasta.go", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffasta.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffasta.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffasta.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -70,7 +70,7 @@ const (\n \tIA = 3877\n \tIC = 29573\n \n-\tLookupSize  = 4096\n+\tLookupSize          = 4096\n \tLookupScale float64 = LookupSize - 1\n )\n \n@@ -178,7 +178,6 @@ func main() {\n \tRandom(homosapiens, 5**n)\n }\n \n-\n type buffer []byte\n \n func (b *buffer) Flush() {", "previous_filename": "gcc/testsuite/go.test/test/bench/fasta.go"}, {"sha": "f1caba0d628000ab62a51a1b731e61bb0db8d559", "filename": "gcc/testsuite/go.test/test/bench/shootout/fasta.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffasta.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffasta.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ffasta.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/fasta.txt"}, {"sha": "96c80d8f0c8021b4b9d7fcda536386cae8f7ea86", "filename": "gcc/testsuite/go.test/test/bench/shootout/k-nucleotide-parallel.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide-parallel.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide-parallel.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide-parallel.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/k-nucleotide-parallel.go"}, {"sha": "84169b8ec36c670035ca85db716a4d166144cfc9", "filename": "gcc/testsuite/go.test/test/bench/shootout/k-nucleotide-parallel.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide-parallel.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide-parallel.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide-parallel.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/k-nucleotide-parallel.txt"}, {"sha": "3bace391c4d7c69a47d480183695d1553f7b6a72", "filename": "gcc/testsuite/go.test/test/bench/shootout/k-nucleotide.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide.c?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/k-nucleotide.c"}, {"sha": "fdc98ed472505be7bba50fb60eaf50627fa1c94e", "filename": "gcc/testsuite/go.test/test/bench/shootout/k-nucleotide.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/k-nucleotide.go"}, {"sha": "84169b8ec36c670035ca85db716a4d166144cfc9", "filename": "gcc/testsuite/go.test/test/bench/shootout/k-nucleotide.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fk-nucleotide.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/k-nucleotide.txt"}, {"sha": "c177c088ca6fbe6beec65e58bd1b607472efb43d", "filename": "gcc/testsuite/go.test/test/bench/shootout/mandelbrot.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmandelbrot.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmandelbrot.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmandelbrot.c?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/mandelbrot.c"}, {"sha": "1f9fbfd3d4418345a603b53f0ab2f529755f13ee", "filename": "gcc/testsuite/go.test/test/bench/shootout/mandelbrot.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmandelbrot.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmandelbrot.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmandelbrot.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/mandelbrot.go"}, {"sha": "2f7bbbc6b0a127b8883712eda12c04a786055753", "filename": "gcc/testsuite/go.test/test/bench/shootout/mandelbrot.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmandelbrot.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmandelbrot.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmandelbrot.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/mandelbrot.txt"}, {"sha": "19c43402c8c4bd6580eb7922d2328f2c80b6d3cd", "filename": "gcc/testsuite/go.test/test/bench/shootout/meteor-contest.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmeteor-contest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmeteor-contest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmeteor-contest.c?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/meteor-contest.c"}, {"sha": "34a4e23f97b0a48577f42e81c2d6be5f67cc626d", "filename": "gcc/testsuite/go.test/test/bench/shootout/meteor-contest.go", "status": "renamed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmeteor-contest.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmeteor-contest.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmeteor-contest.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -43,7 +43,6 @@ import (\n \n var max_solutions = flag.Int(\"n\", 2100, \"maximum number of solutions\")\n \n-\n func boolInt(b bool) int8 {\n \tif b {\n \t\treturn 1\n@@ -115,7 +114,6 @@ var piece_def = [10][4]int8{\n \t[4]int8{E, E, E, SW},\n }\n \n-\n /* To minimize the amount of work done in the recursive solve function below,\n  * I'm going to allocate enough space for all legal rotations of each piece\n  * at each position on the board. That's 10 pieces x 50 board positions x\n@@ -138,7 +136,6 @@ func rotate(dir int8) int8 { return (dir + 2) % PIVOT }\n /* Returns the direction flipped on the horizontal axis */\n func flip(dir int8) int8 { return (PIVOT - dir) % PIVOT }\n \n-\n /* Returns the new cell index from the specified cell in the\n  * specified direction.  The index is only valid if the\n  * starting cell and direction have been checked by the\n@@ -322,7 +319,6 @@ func record_piece(piece int, minimum int8, first_empty int8, piece_mask uint64)\n \tpiece_counts[piece][minimum]++\n }\n \n-\n /* Fill the entire board going cell by cell.  If any cells are \"trapped\"\n  * they will be left alone.\n  */\n@@ -351,7 +347,6 @@ func fill_contiguous_space(board []int8, index int8) {\n \t}\n }\n \n-\n /* To thin the number of pieces, I calculate if any of them trap any empty\n  * cells at the edges.  There are only a handful of exceptions where the\n  * the board can be solved with the trapped cells.  For example:  piece 8 can\n@@ -382,7 +377,6 @@ func has_island(cell []int8, piece int) bool {\n \treturn true\n }\n \n-\n /* Calculate all six rotations of the specified piece at the specified index.\n  * We calculate only half of piece 3's rotations.  This is because any solution\n  * found has an identical solution rotated 180 degrees.  Thus we can reduce the\n@@ -417,7 +411,6 @@ func calc_pieces() {\n \t}\n }\n \n-\n /* Calculate all 32 possible states for a 5-bit row and all rows that will\n  * create islands that follow any of the 32 possible rows.  These pre-\n  * calculated 5-bit rows will be used to find islands in a partially solved\n@@ -530,7 +523,6 @@ func calc_rows() {\n \t}\n }\n \n-\n /* Calculate islands while solving the board.\n  */\n func boardHasIslands(cell int8) int8 {\n@@ -545,7 +537,6 @@ func boardHasIslands(cell int8) int8 {\n \treturn bad_even_triple[current_triple]\n }\n \n-\n /* The recursive solve algorithm.  Try to place each permutation in the upper-\n  * leftmost empty cell.  Mark off available pieces as it goes along.\n  * Because the board is a bit mask, the piece number and bit mask must be saved", "previous_filename": "gcc/testsuite/go.test/test/bench/meteor-contest.go"}, {"sha": "38d9783d64fb7d1eb058c5754c930402c27e758d", "filename": "gcc/testsuite/go.test/test/bench/shootout/meteor-contest.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmeteor-contest.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmeteor-contest.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fmeteor-contest.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/meteor-contest.txt"}, {"sha": "3b95b05929eec67c9159de2226410587362bc99c", "filename": "gcc/testsuite/go.test/test/bench/shootout/nbody.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fnbody.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fnbody.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fnbody.c?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/nbody.c"}, {"sha": "988f3ba9cc06cd0b6e60396df6d68796175841cd", "filename": "gcc/testsuite/go.test/test/bench/shootout/nbody.go", "status": "renamed", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fnbody.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fnbody.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fnbody.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -125,39 +125,39 @@ func (sys System) advance(dt float64) {\n \n var (\n \tjupiter = Body{\n-\t\tx: 4.84143144246472090e+00,\n-\t\ty: -1.16032004402742839e+00,\n-\t\tz: -1.03622044471123109e-01,\n-\t\tvx: 1.66007664274403694e-03 * daysPerYear,\n-\t\tvy: 7.69901118419740425e-03 * daysPerYear,\n-\t\tvz: -6.90460016972063023e-05 * daysPerYear,\n+\t\tx:    4.84143144246472090e+00,\n+\t\ty:    -1.16032004402742839e+00,\n+\t\tz:    -1.03622044471123109e-01,\n+\t\tvx:   1.66007664274403694e-03 * daysPerYear,\n+\t\tvy:   7.69901118419740425e-03 * daysPerYear,\n+\t\tvz:   -6.90460016972063023e-05 * daysPerYear,\n \t\tmass: 9.54791938424326609e-04 * solarMass,\n \t}\n \tsaturn = Body{\n-\t\tx: 8.34336671824457987e+00,\n-\t\ty: 4.12479856412430479e+00,\n-\t\tz: -4.03523417114321381e-01,\n-\t\tvx: -2.76742510726862411e-03 * daysPerYear,\n-\t\tvy: 4.99852801234917238e-03 * daysPerYear,\n-\t\tvz: 2.30417297573763929e-05 * daysPerYear,\n+\t\tx:    8.34336671824457987e+00,\n+\t\ty:    4.12479856412430479e+00,\n+\t\tz:    -4.03523417114321381e-01,\n+\t\tvx:   -2.76742510726862411e-03 * daysPerYear,\n+\t\tvy:   4.99852801234917238e-03 * daysPerYear,\n+\t\tvz:   2.30417297573763929e-05 * daysPerYear,\n \t\tmass: 2.85885980666130812e-04 * solarMass,\n \t}\n \turanus = Body{\n-\t\tx: 1.28943695621391310e+01,\n-\t\ty: -1.51111514016986312e+01,\n-\t\tz: -2.23307578892655734e-01,\n-\t\tvx: 2.96460137564761618e-03 * daysPerYear,\n-\t\tvy: 2.37847173959480950e-03 * daysPerYear,\n-\t\tvz: -2.96589568540237556e-05 * daysPerYear,\n+\t\tx:    1.28943695621391310e+01,\n+\t\ty:    -1.51111514016986312e+01,\n+\t\tz:    -2.23307578892655734e-01,\n+\t\tvx:   2.96460137564761618e-03 * daysPerYear,\n+\t\tvy:   2.37847173959480950e-03 * daysPerYear,\n+\t\tvz:   -2.96589568540237556e-05 * daysPerYear,\n \t\tmass: 4.36624404335156298e-05 * solarMass,\n \t}\n \tneptune = Body{\n-\t\tx: 1.53796971148509165e+01,\n-\t\ty: -2.59193146099879641e+01,\n-\t\tz: 1.79258772950371181e-01,\n-\t\tvx: 2.68067772490389322e-03 * daysPerYear,\n-\t\tvy: 1.62824170038242295e-03 * daysPerYear,\n-\t\tvz: -9.51592254519715870e-05 * daysPerYear,\n+\t\tx:    1.53796971148509165e+01,\n+\t\ty:    -2.59193146099879641e+01,\n+\t\tz:    1.79258772950371181e-01,\n+\t\tvx:   2.68067772490389322e-03 * daysPerYear,\n+\t\tvy:   1.62824170038242295e-03 * daysPerYear,\n+\t\tvz:   -9.51592254519715870e-05 * daysPerYear,\n \t\tmass: 5.15138902046611451e-05 * solarMass,\n \t}\n \tsun = Body{", "previous_filename": "gcc/testsuite/go.test/test/bench/nbody.go"}, {"sha": "1731557ce19f86112c5a71d266c4f5d3b4e86a19", "filename": "gcc/testsuite/go.test/test/bench/shootout/nbody.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fnbody.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fnbody.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fnbody.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/nbody.txt"}, {"sha": "c064da0dd20e125ab744ab7b9c933cc31c8cc0e3", "filename": "gcc/testsuite/go.test/test/bench/shootout/pidigits.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fpidigits.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fpidigits.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fpidigits.c?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/pidigits.c"}, {"sha": "a0f21a91db64ab6f83606aed1188f9e25b0d02e2", "filename": "gcc/testsuite/go.test/test/bench/shootout/pidigits.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fpidigits.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fpidigits.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fpidigits.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -38,9 +38,9 @@ POSSIBILITY OF SUCH DAMAGE.\n package main\n \n import (\n-\t\"big\"\n \t\"flag\"\n \t\"fmt\"\n+\t\"math/big\"\n )\n \n var n = flag.Int(\"n\", 27, \"number of digits\")", "previous_filename": "gcc/testsuite/go.test/test/bench/pidigits.go"}, {"sha": "ad946a9e85d9f9b7e99dd3d88f0a1cefd8de10c4", "filename": "gcc/testsuite/go.test/test/bench/shootout/pidigits.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fpidigits.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fpidigits.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fpidigits.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/pidigits.txt"}, {"sha": "9c6d42101d968a811d1840300dc9ef8d37466fac", "filename": "gcc/testsuite/go.test/test/bench/shootout/regex-dna-parallel.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna-parallel.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna-parallel.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna-parallel.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -39,8 +39,8 @@ import (\n \t\"fmt\"\n \t\"io/ioutil\"\n \t\"os\"\n-\t\"runtime\"\n \t\"regexp\"\n+\t\"runtime\"\n )\n \n var variants = []string{", "previous_filename": "gcc/testsuite/go.test/test/bench/regex-dna-parallel.go"}, {"sha": "e23e71fd6eb93073f1a980601c684b2699948d04", "filename": "gcc/testsuite/go.test/test/bench/shootout/regex-dna-parallel.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna-parallel.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna-parallel.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna-parallel.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/regex-dna-parallel.txt"}, {"sha": "134f8215c7f48e8dc04f90d8b464808f6bf71a8c", "filename": "gcc/testsuite/go.test/test/bench/shootout/regex-dna.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna.c?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/regex-dna.c"}, {"sha": "042d7f28361a4abfdaf7af3e5727da2715fbf4e2", "filename": "gcc/testsuite/go.test/test/bench/shootout/regex-dna.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/regex-dna.go"}, {"sha": "e23e71fd6eb93073f1a980601c684b2699948d04", "filename": "gcc/testsuite/go.test/test/bench/shootout/regex-dna.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fregex-dna.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/regex-dna.txt"}, {"sha": "b34c84696ed0e1644dc8e221c1cc44c0555f82fa", "filename": "gcc/testsuite/go.test/test/bench/shootout/reverse-complement.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Freverse-complement.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Freverse-complement.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Freverse-complement.c?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/reverse-complement.c"}, {"sha": "baa30ffccc8c38a0042a5bebec535349b02dcc97", "filename": "gcc/testsuite/go.test/test/bench/shootout/reverse-complement.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Freverse-complement.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Freverse-complement.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Freverse-complement.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/reverse-complement.go"}, {"sha": "14d792ade8d52eaf0f7a9059d1d78d58d57096c0", "filename": "gcc/testsuite/go.test/test/bench/shootout/reverse-complement.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Freverse-complement.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Freverse-complement.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Freverse-complement.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/reverse-complement.txt"}, {"sha": "2706f39ec3d593e56c93d5ba4a4ad88ba0dbcbba", "filename": "gcc/testsuite/go.test/test/bench/shootout/spectral-norm-parallel.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fspectral-norm-parallel.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fspectral-norm-parallel.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fspectral-norm-parallel.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/spectral-norm-parallel.go"}, {"sha": "832eb3d2176016ff98b021703bd3ac95a614dd1a", "filename": "gcc/testsuite/go.test/test/bench/shootout/spectral-norm.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fspectral-norm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fspectral-norm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fspectral-norm.c?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/spectral-norm.c"}, {"sha": "6667f3e04a5e1bc39238d4ff7d603e34c7997e9d", "filename": "gcc/testsuite/go.test/test/bench/shootout/spectral-norm.go", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fspectral-norm.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fspectral-norm.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fspectral-norm.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/spectral-norm.go"}, {"sha": "b9885983ee4387f942ee8510c1c9c05bfcb1af5f", "filename": "gcc/testsuite/go.test/test/bench/shootout/spectral-norm.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fspectral-norm.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fspectral-norm.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fspectral-norm.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/spectral-norm.txt"}, {"sha": "2c4fb77515af0c3ef3efa18b4320b543c4759284", "filename": "gcc/testsuite/go.test/test/bench/shootout/threadring.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fthreadring.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fthreadring.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fthreadring.c?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/threadring.c"}, {"sha": "e76dd0b452decdc25b359015197eb328cc6d589f", "filename": "gcc/testsuite/go.test/test/bench/shootout/threadring.go", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fthreadring.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fthreadring.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fthreadring.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -52,7 +52,7 @@ func f(i int, in <-chan int, out chan<- int) {\n \t\t\tfmt.Printf(\"%d\\n\", i)\n \t\t\tos.Exit(0)\n \t\t}\n-\t\tout <- n-1\n+\t\tout <- n - 1\n \t}\n }\n ", "previous_filename": "gcc/testsuite/go.test/test/bench/threadring.go"}, {"sha": "f9aaa4d565f4a169e1033d0aa0aa7eb4a22e351f", "filename": "gcc/testsuite/go.test/test/bench/shootout/threadring.txt", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fthreadring.txt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fthreadring.txt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Fthreadring.txt?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/threadring.txt"}, {"sha": "2541a766b7f63d61b545274f6a5451a487f9b396", "filename": "gcc/testsuite/go.test/test/bench/shootout/timing.log", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ftiming.log", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ftiming.log", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ftiming.log?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "previous_filename": "gcc/testsuite/go.test/test/bench/timing.log"}, {"sha": "3e190e15c83c3cd937c7fd1d9932a32dfb34ff82", "filename": "gcc/testsuite/go.test/test/bench/shootout/timing.sh", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ftiming.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ftiming.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbench%2Fshootout%2Ftiming.sh?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -5,7 +5,7 @@\n \n set -e\n \n-eval $(gomake --no-print-directory -f ../../src/Make.inc go-env)\n+eval $(gomake --no-print-directory -f ../../../src/Make.inc go-env)\n PATH=.:$PATH\n \n havegccgo=false", "previous_filename": "gcc/testsuite/go.test/test/bench/timing.sh"}, {"sha": "d6c9e79c607f74e20d5de50495e108549b86bec5", "filename": "gcc/testsuite/go.test/test/blank.go", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fblank.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -101,6 +101,46 @@ func main() {\n \t}\n \n \th(a, b)\n+\t\n+\tm()\n+}\n+\n+type I interface {\n+\tM(_ int, y int)\n+}\n+\n+type TI struct{}\n+\n+func (TI) M(x int, y int) {\n+\tif x != y {\n+\t\tprintln(\"invalid M call:\", x, y)\n+\t\tpanic(\"bad M\")\n+\t}\n+}\n+\n+var fp = func(_ int, y int) {}\n+\n+func init() {\n+\tfp = fp1\n+}\n+\n+func fp1(x, y int) {\n+\tif x != y {\n+\t\tprintln(\"invalid fp1 call:\", x, y)\n+\t\tpanic(\"bad fp1\")\n+\t}\n+}\n+\n+\n+func m() {\n+\tvar i I\n+\t\n+\ti = TI{}\n+\ti.M(1, 1)\n+\ti.M(2, 2)\n+\t\n+\tfp(1, 1)\n+\tfp(2, 2)\n }\n \n // useless but legal\n@@ -120,3 +160,4 @@ func _() {\n func ff() {\n \tvar _ int = 1\n }\n+"}, {"sha": "adf74497cde7a9bb5fa2f6cecd7aba0f9da20e25", "filename": "gcc/testsuite/go.test/test/bugs/bug395.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug395.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug395.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fbugs%2Fbug395.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,22 @@\n+// echo bug395 is broken  # takes 90+ seconds to break\n+// # $G $D/$F.go || echo bug395\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1909\n+// Would OOM due to exponential recursion on Foo's expanded methodset in nodefmt\n+package test\n+\n+type Foo interface {\n+\tBar() interface {\n+\t\tFoo\n+\t}\n+\tBaz() interface {\n+\t\tFoo\n+\t}\n+\tBug() interface {\n+\t\tFoo\n+\t}\n+}"}, {"sha": "f8d50c90c0f5c7dc60f275622c527e1855286015", "filename": "gcc/testsuite/go.test/test/chan/doubleselect.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fdoubleselect.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fdoubleselect.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fdoubleselect.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -82,5 +82,4 @@ func main() {\n \t// However, the result of the bug linked to at the top is that we'll\n \t// end up panicking with: \"throw: bad g->status in ready\".\n \trecver(cmux)\n-\tprint(\"PASS\\n\")\n }"}, {"sha": "9addf12e99ac7af30fd8b15b7e1d5eba472cdc4a", "filename": "gcc/testsuite/go.test/test/chan/nonblock.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fnonblock.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fnonblock.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fnonblock.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -279,5 +279,4 @@ func main() {\n \t\t\t<-sync\n \t\t}\n \t}\n-\tprint(\"PASS\\n\")\n }"}, {"sha": "a43df198214b21d5b8dfa16e764e1a8435f4767f", "filename": "gcc/testsuite/go.test/test/chan/perm.go", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fperm.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fperm.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fperm.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -48,4 +48,11 @@ func main() {\n \tcase x := <-cs: // ERROR \"receive\"\n \t\t_ = x\n \t}\n+\n+\tfor _ = range cs {// ERROR \"receive\"\n+\t}\n+\n+\tclose(c)\n+\tclose(cs)\n+\tclose(cr)  // ERROR \"receive\"\n }"}, {"sha": "5fed6cbd426fa79d74a29fbd69150ab14fff1f30", "filename": "gcc/testsuite/go.test/test/chan/select7.go", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect7.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect7.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fchan%2Fselect7.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,68 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test select when discarding a value.\n+\n+package main\n+\n+import \"runtime\"\n+\n+func recv1(c <-chan int) {\n+\t<-c\n+}\n+\n+func recv2(c <-chan int) {\n+\tselect {\n+\tcase <-c:\n+\t}\n+}\n+\n+func recv3(c <-chan int) {\n+\tc2 := make(chan int)\n+\tselect {\n+\tcase <-c:\n+\tcase <-c2:\n+\t}\n+}\n+\n+func send1(recv func(<-chan int)) {\n+\tc := make(chan int)\n+\tgo recv(c)\n+\truntime.Gosched()\n+\tc <- 1\n+}\n+\n+func send2(recv func(<-chan int)) {\n+\tc := make(chan int)\n+\tgo recv(c)\n+\truntime.Gosched()\n+\tselect {\n+\tcase c <- 1:\n+\t}\n+}\n+\n+func send3(recv func(<-chan int)) {\n+\tc := make(chan int)\n+\tgo recv(c)\n+\truntime.Gosched()\n+\tc2 := make(chan int)\n+\tselect {\n+\tcase c <- 1:\n+\tcase c2 <- 1:\n+\t}\n+}\n+\n+func main() {\n+\tsend1(recv1)\n+\tsend2(recv1)\n+\tsend3(recv1)\n+\tsend1(recv2)\n+\tsend2(recv2)\n+\tsend3(recv2)\n+\tsend1(recv3)\n+\tsend2(recv3)\n+\tsend3(recv3)\n+}"}, {"sha": "97da1dd23045d6d65393c40251e2fa0a73410782", "filename": "gcc/testsuite/go.test/test/closure.go", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosure.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosure.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fclosure.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -6,6 +6,8 @@\n \n package main\n \n+import \"runtime\"\n+\n var c = make(chan int)\n \n func check(a []int) {\n@@ -77,6 +79,8 @@ func h() {\n func newfunc() func(int) int { return func(x int) int { return x } }\n \n func main() {\n+\tvar fail bool\n+\n \tgo f()\n \tcheck([]int{1, 4, 5, 4})\n \n@@ -88,13 +92,26 @@ func main() {\n \tgo h()\n \tcheck([]int{100, 200, 101, 201, 500, 101, 201, 500})\n \n+\truntime.UpdateMemStats()\n+        n0 := runtime.MemStats.Mallocs\n+\n \tx, y := newfunc(), newfunc()\n \tif x(1) != 1 || y(2) != 2 {\n \t\tprintln(\"newfunc returned broken funcs\")\n-\t\tpanic(\"fail\")\n+\t\tfail = true\n+\t}\n+\n+\truntime.UpdateMemStats()\n+        if n0 != runtime.MemStats.Mallocs {\n+\t\tprintln(\"newfunc allocated unexpectedly\")\n+\t\tfail = true\n \t}\n \n \tff(1)\n+\n+\tif fail {\n+\t\tpanic(\"fail\") \n+\t}\n }\n \n func ff(x int) {"}, {"sha": "d51a11aa2462e22200e8b6cbb6fdd45977a0c3ae", "filename": "gcc/testsuite/go.test/test/cmp.go", "status": "added", "additions": 400, "deletions": 0, "changes": 400, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,400 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2009 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+var global bool\n+func use(b bool) { global = b }\n+\n+func stringptr(s string) uintptr { return *(*uintptr)(unsafe.Pointer(&s)) }\n+\n+func isfalse(b bool) {\n+\tif b {\n+\t\t// stack will explain where\n+\t\tpanic(\"wanted false, got true\")\n+\t}\n+}\n+\n+func istrue(b bool) {\n+\tif !b {\n+\t\t// stack will explain where\n+\t\tpanic(\"wanted true, got false\")\n+\t}\n+}\n+\n+type T *int\n+\n+func main() {\n+\tvar a []int\n+\tvar b map[string]int\n+\n+\tvar c string = \"hello\"\n+\tvar d string = \"hel\" // try to get different pointer\n+\td = d + \"lo\"\n+\tif stringptr(c) == stringptr(d) {\n+\t\tpanic(\"compiler too smart -- got same string\")\n+\t}\n+\n+\tvar e = make(chan int)\n+\n+\tvar ia interface{} = a\n+\tvar ib interface{} = b\n+\tvar ic interface{} = c\n+\tvar id interface{} = d\n+\tvar ie interface{} = e\n+\n+\t// these comparisons are okay because\n+\t// string compare is okay and the others\n+\t// are comparisons where the types differ.\n+\tisfalse(ia == ib)\n+\tisfalse(ia == ic)\n+\tisfalse(ia == id)\n+\tisfalse(ib == ic)\n+\tisfalse(ib == id)\n+\tistrue(ic == id)\n+\tistrue(ie == ie)\n+\n+\tistrue(ia != ib)\n+\tistrue(ia != ic)\n+\tistrue(ia != id)\n+\tistrue(ib != ic)\n+\tistrue(ib != id)\n+\tisfalse(ic != id)\n+\tisfalse(ie != ie)\n+\n+\t// these are not okay, because there is no comparison on slices or maps.\n+\t//isfalse(a == ib)\n+\t//isfalse(a == ic)\n+\t//isfalse(a == id)\n+\t//isfalse(b == ic)\n+\t//isfalse(b == id)\n+\n+\tistrue(c == id)\n+\tistrue(e == ie)\n+\n+\t//isfalse(ia == b)\n+\tisfalse(ia == c)\n+\tisfalse(ia == d)\n+\tisfalse(ib == c)\n+\tisfalse(ib == d)\n+\tistrue(ic == d)\n+\tistrue(ie == e)\n+\n+\t//istrue(a != ib)\n+\t//istrue(a != ic)\n+\t//istrue(a != id)\n+\t//istrue(b != ic)\n+\t//istrue(b != id)\n+\tisfalse(c != id)\n+\tisfalse(e != ie)\n+\n+\t//istrue(ia != b)\n+\tistrue(ia != c)\n+\tistrue(ia != d)\n+\tistrue(ib != c)\n+\tistrue(ib != d)\n+\tisfalse(ic != d)\n+\tisfalse(ie != e)\n+\n+\t// 6g used to let this go through as true.\n+\tvar g uint64 = 123\n+\tvar h int64 = 123\n+\tvar ig interface{} = g\n+\tvar ih interface{} = h\n+\tisfalse(ig == ih)\n+\tistrue(ig != ih)\n+\n+\t// map of interface should use == on interface values,\n+\t// not memory.\n+\tvar m = make(map[interface{}]int)\n+\tm[ic] = 1\n+\tm[id] = 2\n+\tif m[c] != 2 {\n+\t\tprintln(\"m[c] = \", m[c])\n+\t\tpanic(\"bad m[c]\")\n+\t}\n+\n+\t// non-interface comparisons\n+\t{\n+\t\tc := make(chan int)\n+\t\tc1 := (<-chan int)(c)\n+\t\tc2 := (chan<- int)(c)\n+\t\tistrue(c == c1)\n+\t\tistrue(c == c2)\n+\t\tistrue(c1 == c)\n+\t\tistrue(c2 == c)\n+\n+\t\tisfalse(c != c1)\n+\t\tisfalse(c != c2)\n+\t\tisfalse(c1 != c)\n+\t\tisfalse(c2 != c)\n+\n+\t\td := make(chan int)\n+\t\tisfalse(c == d)\n+\t\tisfalse(d == c)\n+\t\tisfalse(d == c1)\n+\t\tisfalse(d == c2)\n+\t\tisfalse(c1 == d)\n+\t\tisfalse(c2 == d)\n+\n+\t\tistrue(c != d)\n+\t\tistrue(d != c)\n+\t\tistrue(d != c1)\n+\t\tistrue(d != c2)\n+\t\tistrue(c1 != d)\n+\t\tistrue(c2 != d)\n+\t}\n+\n+\t// named types vs not\n+\t{\n+\t\tvar x = new(int)\n+\t\tvar y T\n+\t\tvar z T = x\n+\n+\t\tisfalse(x == y)\n+\t\tistrue(x == z)\n+\t\tisfalse(y == z)\n+\n+\t\tisfalse(y == x)\n+\t\tistrue(z == x)\n+\t\tisfalse(z == y)\n+\n+\t\tistrue(x != y)\n+\t\tisfalse(x != z)\n+\t\tistrue(y != z)\n+\n+\t\tistrue(y != x)\n+\t\tisfalse(z != x)\n+\t\tistrue(z != y)\n+\t}\n+\n+\t// structs\n+\t{\n+\t\tvar x = struct {\n+\t\t\tx int\n+\t\t\ty string\n+\t\t}{1, \"hi\"}\n+\t\tvar y = struct {\n+\t\t\tx int\n+\t\t\ty string\n+\t\t}{2, \"bye\"}\n+\t\tvar z = struct {\n+\t\t\tx int\n+\t\t\ty string\n+\t\t}{1, \"hi\"}\n+\n+\t\tisfalse(x == y)\n+\t\tisfalse(y == x)\n+\t\tisfalse(y == z)\n+\t\tisfalse(z == y)\n+\t\tistrue(x == z)\n+\t\tistrue(z == x)\n+\n+\t\tistrue(x != y)\n+\t\tistrue(y != x)\n+\t\tistrue(y != z)\n+\t\tistrue(z != y)\n+\t\tisfalse(x != z)\n+\t\tisfalse(z != x)\n+\n+\t\tvar m = make(map[struct {\n+\t\t\tx int\n+\t\t\ty string\n+\t\t}]int)\n+\t\tm[x] = 10\n+\t\tm[y] = 20\n+\t\tm[z] = 30\n+\t\tistrue(m[x] == 30)\n+\t\tistrue(m[y] == 20)\n+\t\tistrue(m[z] == 30)\n+\t\tistrue(m[x] != 10)\n+\t\tisfalse(m[x] != 30)\n+\t\tisfalse(m[y] != 20)\n+\t\tisfalse(m[z] != 30)\n+\t\tisfalse(m[x] == 10)\n+\n+\t\tvar m1 = make(map[struct {\n+\t\t\tx int\n+\t\t\ty string\n+\t\t}]struct {\n+\t\t\tx int\n+\t\t\ty string\n+\t\t})\n+\t\tm1[x] = x\n+\t\tm1[y] = y\n+\t\tm1[z] = z\n+\t\tistrue(m1[x] == z)\n+\t\tistrue(m1[y] == y)\n+\t\tistrue(m1[z] == z)\n+\t\tistrue(m1[x] == x)\n+\t\tisfalse(m1[x] != z)\n+\t\tisfalse(m1[y] != y)\n+\t\tisfalse(m1[z] != z)\n+\t\tisfalse(m1[x] != x)\n+\n+\t\tvar ix, iy, iz interface{} = x, y, z\n+\n+\t\tisfalse(ix == iy)\n+\t\tisfalse(iy == ix)\n+\t\tisfalse(iy == iz)\n+\t\tisfalse(iz == iy)\n+\t\tistrue(ix == iz)\n+\t\tistrue(iz == ix)\n+\n+\t\tisfalse(x == iy)\n+\t\tisfalse(y == ix)\n+\t\tisfalse(y == iz)\n+\t\tisfalse(z == iy)\n+\t\tistrue(x == iz)\n+\t\tistrue(z == ix)\n+\n+\t\tisfalse(ix == y)\n+\t\tisfalse(iy == x)\n+\t\tisfalse(iy == z)\n+\t\tisfalse(iz == y)\n+\t\tistrue(ix == z)\n+\t\tistrue(iz == x)\n+\n+\t\tistrue(ix != iy)\n+\t\tistrue(iy != ix)\n+\t\tistrue(iy != iz)\n+\t\tistrue(iz != iy)\n+\t\tisfalse(ix != iz)\n+\t\tisfalse(iz != ix)\n+\n+\t\tistrue(x != iy)\n+\t\tistrue(y != ix)\n+\t\tistrue(y != iz)\n+\t\tistrue(z != iy)\n+\t\tisfalse(x != iz)\n+\t\tisfalse(z != ix)\n+\n+\t\tistrue(ix != y)\n+\t\tistrue(iy != x)\n+\t\tistrue(iy != z)\n+\t\tistrue(iz != y)\n+\t\tisfalse(ix != z)\n+\t\tisfalse(iz != x)\n+\t}\n+\n+\t// arrays\n+\t{\n+\t\tvar x = [2]string{\"1\", \"hi\"}\n+\t\tvar y = [2]string{\"2\", \"bye\"}\n+\t\tvar z = [2]string{\"1\", \"hi\"}\n+\n+\t\tisfalse(x == y)\n+\t\tisfalse(y == x)\n+\t\tisfalse(y == z)\n+\t\tisfalse(z == y)\n+\t\tistrue(x == z)\n+\t\tistrue(z == x)\n+\n+\t\tistrue(x != y)\n+\t\tistrue(y != x)\n+\t\tistrue(y != z)\n+\t\tistrue(z != y)\n+\t\tisfalse(x != z)\n+\t\tisfalse(z != x)\n+\n+\t\tvar m = make(map[[2]string]int)\n+\t\tm[x] = 10\n+\t\tm[y] = 20\n+\t\tm[z] = 30\n+\t\tistrue(m[x] == 30)\n+\t\tistrue(m[y] == 20)\n+\t\tistrue(m[z] == 30)\n+\t\tisfalse(m[x] != 30)\n+\t\tisfalse(m[y] != 20)\n+\t\tisfalse(m[z] != 30)\n+\n+\t\tvar ix, iy, iz interface{} = x, y, z\n+\n+\t\tisfalse(ix == iy)\n+\t\tisfalse(iy == ix)\n+\t\tisfalse(iy == iz)\n+\t\tisfalse(iz == iy)\n+\t\tistrue(ix == iz)\n+\t\tistrue(iz == ix)\n+\n+\t\tisfalse(x == iy)\n+\t\tisfalse(y == ix)\n+\t\tisfalse(y == iz)\n+\t\tisfalse(z == iy)\n+\t\tistrue(x == iz)\n+\t\tistrue(z == ix)\n+\n+\t\tisfalse(ix == y)\n+\t\tisfalse(iy == x)\n+\t\tisfalse(iy == z)\n+\t\tisfalse(iz == y)\n+\t\tistrue(ix == z)\n+\t\tistrue(iz == x)\n+\n+\t\tistrue(ix != iy)\n+\t\tistrue(iy != ix)\n+\t\tistrue(iy != iz)\n+\t\tistrue(iz != iy)\n+\t\tisfalse(ix != iz)\n+\t\tisfalse(iz != ix)\n+\n+\t\tistrue(x != iy)\n+\t\tistrue(y != ix)\n+\t\tistrue(y != iz)\n+\t\tistrue(z != iy)\n+\t\tisfalse(x != iz)\n+\t\tisfalse(z != ix)\n+\n+\t\tistrue(ix != y)\n+\t\tistrue(iy != x)\n+\t\tistrue(iy != z)\n+\t\tistrue(iz != y)\n+\t\tisfalse(ix != z)\n+\t\tisfalse(iz != x)\n+\t}\n+\n+\tshouldPanic(p1)\n+\tshouldPanic(p2)\n+\tshouldPanic(p3)\n+\tshouldPanic(p4)\n+}\n+\n+func p1() {\n+\tvar a []int\n+\tvar ia interface{} = a\n+\tuse(ia == ia)\n+}\n+\n+func p2() {\n+\tvar b []int\n+\tvar ib interface{} = b\n+\tuse(ib == ib)\n+}\n+\n+func p3() {\n+\tvar a []int\n+\tvar ia interface{} = a\n+\tvar m = make(map[interface{}]int)\n+\tm[ia] = 1\n+}\n+\n+func p4() {\n+\tvar b []int\n+\tvar ib interface{} = b\n+\tvar m = make(map[interface{}]int)\n+\tm[ib] = 1\n+}\n+\n+func shouldPanic(f func()) {\n+\tdefer func() {\n+\t\tif recover() == nil {\n+\t\t\tpanic(\"function should panic\")\n+\t\t}\n+\t}()\n+\tf()\n+}"}, {"sha": "f6f124f2e8aaed1a72c0561a60c2614ce27e6f9b", "filename": "gcc/testsuite/go.test/test/cmp2.go", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp2.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,15 +0,0 @@\n-// $G $D/$F.go && $L $F.$A && ! ./$A.out\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-func use(bool) { }\n-\n-func main() {\n-\tvar a []int\n-\tvar ia interface{} = a\n-\tuse(ia == ia)\n-}"}, {"sha": "dd90bfb03e0ae4cb7ada98514f97d2f1b45d62b1", "filename": "gcc/testsuite/go.test/test/cmp3.go", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp3.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,15 +0,0 @@\n-// $G $D/$F.go && $L $F.$A && ! ./$A.out\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-func use(bool) { }\n-\n-func main() {\n-\tvar b []int\n-\tvar ib interface{} = b\n-\tuse(ib == ib)\n-}"}, {"sha": "3f9b2c0b8b6b1dbce2106f7bf8605330a0ca84eb", "filename": "gcc/testsuite/go.test/test/cmp4.go", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcmp4.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,14 +0,0 @@\n-// $G $D/$F.go && $L $F.$A && ! ./$A.out\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-func main() {\n-\tvar a []int\n-\tvar ia interface{} = a\n-\tvar m = make(map[interface{}] int)\n-\tm[ia] = 1\n-}"}, {"sha": "8dfc71dcb47ab5bc138585f039d66aa453461be4", "filename": "gcc/testsuite/go.test/test/complit.go", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcomplit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcomplit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcomplit.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -31,6 +31,18 @@ func eq(a []*R) {\n \t}\n }\n \n+func teq(t *T, n int) {\n+\tfor i := 0; i < n; i++ {\n+\t\tif t == nil || t.i != i {\n+\t\t\tpanic(\"bad\")\n+\t\t}\n+\t\tt = t.next\n+\t}\n+\tif t != nil {\n+\t\tpanic(\"bad\")\n+\t}\n+}\n+\n type P struct {\n \ta, b int\n }\n@@ -46,6 +58,9 @@ func main() {\n \tvar tp *T\n \ttp = &T{0, 7.2, \"hi\", &t}\n \n+\ttl := &T{i: 0, next: &T{i: 1, next: &T{i: 2, next: &T{i: 3, next: &T{i: 4}}}}}\n+\tteq(tl, 5)\n+\n \ta1 := []int{1, 2, 3}\n \tif len(a1) != 3 {\n \t\tpanic(\"a1\")\n@@ -93,6 +108,7 @@ func main() {\n \t}\n \n \teq([]*R{itor(0), itor(1), itor(2), itor(3), itor(4), itor(5)})\n+\teq([]*R{{0}, {1}, {2}, {3}, {4}, {5}})\n \n \tp1 := NewP(1, 2)\n \tp2 := NewP(1, 2)"}, {"sha": "cd543930eef7ef1f264bfce9aea9bd9d83e68c81", "filename": "gcc/testsuite/go.test/test/complit1.go", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcomplit1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcomplit1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcomplit1.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,39 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+var m map[int][3]int\n+\n+func f() [3]int\n+\n+func fp() *[3]int\n+\n+var mp map[int]*[3]int\n+\n+var (\n+\t_ = [3]int{1, 2, 3}[:] // ERROR \"slice of unaddressable value\"\n+\t_ = m[0][:]            // ERROR \"slice of unaddressable value\"\n+\t_ = f()[:]             // ERROR \"slice of unaddressable value\"\n+\n+\t// these are okay because they are slicing a pointer to an array\n+\t_ = (&[3]int{1, 2, 3})[:]\n+\t_ = mp[0][:]\n+\t_ = fp()[:]\n+)\n+\n+type T struct {\n+\ti    int\n+\tf    float64\n+\ts    string\n+\tnext *T\n+}\n+\n+var (\n+\t_ = &T{0, 0, \"\", nil}               // ok\n+\t_ = &T{i: 0, f: 0, s: \"\", next: {}} // ERROR \"missing type in composite literal|omit types within composite literal\"\n+\t_ = &T{0, 0, \"\", {}}                // ERROR \"missing type in composite literal|omit types within composite literal\"\n+)"}, {"sha": "bbd0c5f2b06364cde6112645571aee732be79178", "filename": "gcc/testsuite/go.test/test/convert1.go", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconvert1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconvert1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconvert1.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,96 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type Tbyte []byte\n+type Trune []rune\n+type Tint64 []int64\n+type Tstring string\n+\n+func main() {\n+\ts := \"hello\"\n+\tsb := []byte(\"hello\")\n+\tsr := []rune(\"hello\")\n+\tsi := []int64{'h', 'e', 'l', 'l', 'o'}\n+\n+\tts := Tstring(s)\n+\ttsb := Tbyte(sb)\n+\ttsr := Trune(sr)\n+\ttsi := Tint64(si)\n+\n+\t_ = string(s)\n+\t_ = []byte(s)\n+\t_ = []rune(s)\n+\t_ = []int64(s) // ERROR \"cannot convert.*\\[\\]int64|invalid type conversion\"\n+\t_ = Tstring(s)\n+\t_ = Tbyte(s)\n+\t_ = Trune(s)\n+\t_ = Tint64(s) // ERROR \"cannot convert.*Tint64|invalid type conversion\"\n+\n+\t_ = string(sb)\n+\t_ = []byte(sb)\n+\t_ = []rune(sb)  // ERROR \"cannot convert.*\\[\\]rune|invalid type conversion\"\n+\t_ = []int64(sb) // ERROR \"cannot convert.*\\[\\]int64|invalid type conversion\"\n+\t_ = Tstring(sb)\n+\t_ = Tbyte(sb)\n+\t_ = Trune(sb)  // ERROR \"cannot convert.*Trune|invalid type conversion\"\n+\t_ = Tint64(sb) // ERROR \"cannot convert.*Tint64|invalid type conversion\"\n+\n+\t_ = string(sr)\n+\t_ = []byte(sr) // ERROR \"cannot convert.*\\[\\]byte|invalid type conversion\"\n+\t_ = []rune(sr)\n+\t_ = []int64(sr) // ERROR \"cannot convert.*\\[\\]int64|invalid type conversion\"\n+\t_ = Tstring(sr)\n+\t_ = Tbyte(sr) // ERROR \"cannot convert.*Tbyte|invalid type conversion\"\n+\t_ = Trune(sr)\n+\t_ = Tint64(sr) // ERROR \"cannot convert.*Tint64|invalid type conversion\"\n+\n+\t_ = string(si) // ERROR \"cannot convert.* string|invalid type conversion\"\n+\t_ = []byte(si) // ERROR \"cannot convert.*\\[\\]byte|invalid type conversion\"\n+\t_ = []rune(si) // ERROR \"cannot convert.*\\[\\]rune|invalid type conversion\"\n+\t_ = []int64(si)\n+\t_ = Tstring(si) // ERROR \"cannot convert.*Tstring|invalid type conversion\"\n+\t_ = Tbyte(si)   // ERROR \"cannot convert.*Tbyte|invalid type conversion\"\n+\t_ = Trune(si)   // ERROR \"cannot convert.*Trune|invalid type conversion\"\n+\t_ = Tint64(si)\n+\n+\t_ = string(ts)\n+\t_ = []byte(ts)\n+\t_ = []rune(ts)\n+\t_ = []int64(ts) // ERROR \"cannot convert.*\\[\\]int64|invalid type conversion\"\n+\t_ = Tstring(ts)\n+\t_ = Tbyte(ts)\n+\t_ = Trune(ts)\n+\t_ = Tint64(ts) // ERROR \"cannot convert.*Tint64|invalid type conversion\"\n+\n+\t_ = string(tsb)\n+\t_ = []byte(tsb)\n+\t_ = []rune(tsb)  // ERROR \"cannot convert.*\\[\\]rune|invalid type conversion\"\n+\t_ = []int64(tsb) // ERROR \"cannot convert.*\\[\\]int64|invalid type conversion\"\n+\t_ = Tstring(tsb)\n+\t_ = Tbyte(tsb)\n+\t_ = Trune(tsb)  // ERROR \"cannot convert.*Trune|invalid type conversion\"\n+\t_ = Tint64(tsb) // ERROR \"cannot convert.*Tint64|invalid type conversion\"\n+\n+\t_ = string(tsr)\n+\t_ = []byte(tsr) // ERROR \"cannot convert.*\\[\\]byte|invalid type conversion\"\n+\t_ = []rune(tsr)\n+\t_ = []int64(tsr) // ERROR \"cannot convert.*\\[\\]int64|invalid type conversion\"\n+\t_ = Tstring(tsr)\n+\t_ = Tbyte(tsr) // ERROR \"cannot convert.*Tbyte|invalid type conversion\"\n+\t_ = Trune(tsr)\n+\t_ = Tint64(tsr) // ERROR \"cannot convert.*Tint64|invalid type conversion\"\n+\n+\t_ = string(tsi) // ERROR \"cannot convert.* string|invalid type conversion\"\n+\t_ = []byte(tsi) // ERROR \"cannot convert.*\\[\\]byte|invalid type conversion\"\n+\t_ = []rune(tsi) // ERROR \"cannot convert.*\\[\\]rune|invalid type conversion\"\n+\t_ = []int64(tsi)\n+\t_ = Tstring(tsi) // ERROR \"cannot convert.*Tstring|invalid type conversion\"\n+\t_ = Tbyte(tsi)   // ERROR \"cannot convert.*Tbyte|invalid type conversion\"\n+\t_ = Trune(tsi)   // ERROR \"cannot convert.*Trune|invalid type conversion\"\n+\t_ = Tint64(tsi)\n+}"}, {"sha": "292b63bf4b33bc6d6ff42a519ec8bf2993fd1069", "filename": "gcc/testsuite/go.test/test/crlf.go", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcrlf.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcrlf.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fcrlf.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,52 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out >tmp.go &&\n+// $G tmp.go && $L tmp.$A && ./$A.out\n+// rm -f tmp.go\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test source files and strings containing \\r and \\r\\n.\n+\n+package main\n+\n+import (\n+\t\"fmt\"\n+\t\"strings\"\n+)\n+\n+func main() {\n+\tprog = strings.Replace(prog, \"BQ\", \"`\", -1)\n+\tprog = strings.Replace(prog, \"CR\", \"\\r\", -1)\n+\tfmt.Print(prog)\n+}\n+\n+var prog = `\n+package main\n+CR\n+\n+import \"fmt\"\n+\n+var CR s = \"hello\\n\" + CR\n+\t\" world\"CR\n+\n+var t = BQhelloCR\n+ worldBQ\n+\n+var u = BQhCReCRlCRlCRoCR\n+ worldBQ\n+\n+var golden = \"hello\\n world\"\n+\n+func main() {\n+\tif s != golden {\n+\t\tfmt.Printf(\"s=%q, want %q\", s, golden)\n+\t}\n+\tif t != golden {\n+\t\tfmt.Printf(\"t=%q, want %q\", t, golden)\n+\t}\n+\tif u != golden {\n+\t\tfmt.Printf(\"u=%q, want %q\", u, golden)\n+\t}\n+}\n+`"}, {"sha": "6d84248e5e800e9b322e046a24007a87cb6cc8f9", "filename": "gcc/testsuite/go.test/test/ddd1.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fddd1.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -15,8 +15,8 @@ var (\n \t_ = sum()\n \t_ = sum(1.0, 2.0)\n \t_ = sum(1.5)      // ERROR \"integer\"\n-\t_ = sum(\"hello\")  // ERROR \"string.*as type int|incompatible\"\n-\t_ = sum([]int{1}) // ERROR \"slice literal.*as type int|incompatible\"\n+\t_ = sum(\"hello\")  // ERROR \".hello. .type string. as type int|incompatible\"\n+\t_ = sum([]int{1}) // ERROR \"\\[\\]int literal.*as type int|incompatible\"\n )\n \n type T []T"}, {"sha": "0e0c618216809f40df15c9948550b6eaed7bee55", "filename": "gcc/testsuite/go.test/test/deferprint.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdeferprint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdeferprint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdeferprint.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,4 @@\n-// $G $D/$F.go && $L $F.$A && ./$A.out\n+// $G $D/$F.go && $L $F.$A && ./$A.out 2>&1 | cmp - $D/$F.out\n \n // Copyright 2010 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style"}, {"sha": "a71cfcebd7e723e5c6aaa133399b9c5dfa3a108f", "filename": "gcc/testsuite/go.test/test/deferprint.out", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdeferprint.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdeferprint.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdeferprint.out?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,2 @@\n+printing: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n+42 true false true +1.500000e+000 world 0x0 [0/0]0x0 0x0 0x0 255"}, {"sha": "68434f0ab57ed37b2ee6e03300d51704ec724bc0", "filename": "gcc/testsuite/go.test/test/dwarf/linedirectives.go", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Flinedirectives.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Flinedirectives.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Flinedirectives.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,83 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+//line foo/bar.y:4\n+package main\n+//line foo/bar.y:60\n+func main() { \n+//line foo/bar.y:297\n+\tf, l := 0, 0\n+//line yacctab:1\n+\tf, l = 1, 1\n+//line yaccpar:1\n+\tf, l = 2, 1\n+//line foo/bar.y:82\n+\tf, l = 3, 82\n+//line foo/bar.y:90\n+\tf, l = 3, 90\n+//line foo/bar.y:92\n+\tf, l = 3, 92\n+//line foo/bar.y:100\n+\tf, l = 3, 100\n+//line foo/bar.y:104\n+\tl = 104\n+//line foo/bar.y:112\n+\tl = 112\n+//line foo/bar.y:117\n+\tl = 117\n+//line foo/bar.y:121\n+\tl = 121\n+//line foo/bar.y:125\n+\tl = 125\n+//line foo/bar.y:133\n+\tl = 133\n+//line foo/bar.y:146\n+\tl = 146\n+//line foo/bar.y:148\n+//line foo/bar.y:153\n+//line foo/bar.y:155\n+\tl = 155\n+//line foo/bar.y:160\n+\n+//line foo/bar.y:164\n+//line foo/bar.y:173\n+\n+//line foo/bar.y:178\n+//line foo/bar.y:180\n+//line foo/bar.y:185\n+//line foo/bar.y:195\n+//line foo/bar.y:197\n+//line foo/bar.y:202\n+//line foo/bar.y:204\n+//line foo/bar.y:208\n+//line foo/bar.y:211\n+//line foo/bar.y:213\n+//line foo/bar.y:215\n+//line foo/bar.y:217\n+//line foo/bar.y:221\n+//line foo/bar.y:229\n+//line foo/bar.y:236\n+//line foo/bar.y:238\n+//line foo/bar.y:240\n+//line foo/bar.y:244\n+//line foo/bar.y:249\n+//line foo/bar.y:253\n+//line foo/bar.y:257\n+//line foo/bar.y:262\n+//line foo/bar.y:267\n+//line foo/bar.y:272\n+\tif l == f {\n+//line foo/bar.y:277\n+\tpanic(\"aie!\")\n+//line foo/bar.y:281\n+\t}\n+//line foo/bar.y:285\n+\treturn\n+//line foo/bar.y:288\n+//line foo/bar.y:290\n+}\n+//line foo/bar.y:293\n+//line foo/bar.y:295"}, {"sha": "7f2ec4c00a6862922625ea45b27e238ef05d591c", "filename": "gcc/testsuite/go.test/test/dwarf/main.go", "status": "renamed", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fmain.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,14 +1,29 @@\n-// $G $D/$F.go && $L $F.$A && ! ./$A.out\n+// $G $D/$F.go $D/z*.go && $L $F.$A && ./$A.out\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n package main\n-\n func main() {\n-\tvar b []int\n-\tvar ib interface{} = b\n-\tvar m = make(map[interface{}] int)\n-\tm[ib] = 1\n+F1()\n+F2()\n+F3()\n+F4()\n+F5()\n+F6()\n+F7()\n+F8()\n+F9()\n+F10()\n+F11()\n+F12()\n+F13()\n+F14()\n+F15()\n+F16()\n+F17()\n+F18()\n+F19()\n+F20()\n }", "previous_filename": "gcc/testsuite/go.test/test/cmp5.go"}, {"sha": "7f163e9a1d97c4f3fb1afd4f3bd57f8415e95b8a", "filename": "gcc/testsuite/go.test/test/dwarf/z1.go", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz1.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+//line x1.go:4\n+package main\n+func F1() {}"}, {"sha": "19c70020e0ca367624a97a47be7256aebee1f32b", "filename": "gcc/testsuite/go.test/test/dwarf/z10.go", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz10.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz10.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz10.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,6 @@\n+\n+\n+\n+//line x10.go:4\n+package main\n+func F10() {}"}, {"sha": "c1d2f9180f11752e79734507a7d041d193c80903", "filename": "gcc/testsuite/go.test/test/dwarf/z11.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz11.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz11.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz11.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x11.go:4\n+package main\n+func F11() {}"}, {"sha": "7455f18946826965937e88b17cf613e9802f410d", "filename": "gcc/testsuite/go.test/test/dwarf/z12.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz12.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz12.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz12.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x12.go:4\n+package main\n+func F12() {}"}, {"sha": "ecb3c4c8c711dba7e20d8fdfaba1f47389a4c720", "filename": "gcc/testsuite/go.test/test/dwarf/z13.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz13.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz13.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz13.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x13.go:4\n+package main\n+func F13() {}"}, {"sha": "134b39b64e2bda6b4bf3fd9da6c4419590546971", "filename": "gcc/testsuite/go.test/test/dwarf/z14.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz14.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz14.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz14.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x14.go:4\n+package main\n+func F14() {}"}, {"sha": "d73819b443ba1b7734261eb0fc9ec7e262022c1f", "filename": "gcc/testsuite/go.test/test/dwarf/z15.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz15.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz15.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz15.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x15.go:4\n+package main\n+func F15() {}"}, {"sha": "6c31651baa891e4ebff5e8a061e05a060fd336f3", "filename": "gcc/testsuite/go.test/test/dwarf/z16.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz16.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz16.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz16.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x16.go:4\n+package main\n+func F16() {}"}, {"sha": "b742d1672606cabc4b9fc31cdb3e039f69481186", "filename": "gcc/testsuite/go.test/test/dwarf/z17.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz17.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz17.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz17.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x17.go:4\n+package main\n+func F17() {}"}, {"sha": "84150ff0a35569ddbdcc45021f3200f377443324", "filename": "gcc/testsuite/go.test/test/dwarf/z18.go", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz18.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz18.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz18.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,5 @@\n+\n+\n+//line x18.go:4\n+package main\n+func F18() {}"}, {"sha": "bb2e29684174f20a92926ec988ba9daad1f3d47b", "filename": "gcc/testsuite/go.test/test/dwarf/z19.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz19.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz19.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz19.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x19.go:4\n+package main\n+func F19() {}"}, {"sha": "68bd58257d9a025d26459c9f471278fd6a131e18", "filename": "gcc/testsuite/go.test/test/dwarf/z2.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz2.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x2.go:4\n+package main\n+func F2() {}"}, {"sha": "03111e184521d6a5535cc22ca60d42cfef73ca3c", "filename": "gcc/testsuite/go.test/test/dwarf/z20.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz20.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz20.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz20.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x20.go:4\n+package main\n+func F20() {}"}, {"sha": "5e4ad3ae257df2bdbeaee6e382005121e049188d", "filename": "gcc/testsuite/go.test/test/dwarf/z3.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz3.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x3.go:4\n+package main\n+func F3() {}"}, {"sha": "1f28465c57714f35f4dbac9b173f32a5b424fa26", "filename": "gcc/testsuite/go.test/test/dwarf/z4.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz4.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x4.go:4\n+package main\n+func F4() {}"}, {"sha": "7f4eeb419a35bcec5bdb83f1b767a4032df4570e", "filename": "gcc/testsuite/go.test/test/dwarf/z5.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz5.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz5.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz5.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x5.go:4\n+package main\n+func F5() {}"}, {"sha": "241791dff2b0e003fa592d70e4752689e51e81ef", "filename": "gcc/testsuite/go.test/test/dwarf/z6.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz6.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz6.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz6.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x6.go:4\n+package main\n+func F6() {}"}, {"sha": "68c1ad0c2434ad098addca086e34a88998456372", "filename": "gcc/testsuite/go.test/test/dwarf/z7.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz7.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz7.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz7.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x7.go:4\n+package main\n+func F7() {}"}, {"sha": "16eed32a28d3c4bcca08507f31ff5e3508f68438", "filename": "gcc/testsuite/go.test/test/dwarf/z8.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz8.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz8.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz8.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x8.go:4\n+package main\n+func F8() {}"}, {"sha": "cbb94b4d2beddef80e39ec29177b561725c920a3", "filename": "gcc/testsuite/go.test/test/dwarf/z9.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz9.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz9.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fdwarf%2Fz9.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+\n+//line x9.go:4\n+package main\n+func F9() {}"}, {"sha": "73b2a7e58973eb73377e19da9d1596cd56336680", "filename": "gcc/testsuite/go.test/test/escape2.go", "status": "added", "additions": 1064, "deletions": 0, "changes": 1064, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape2.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,1064 @@\n+// errchk -0 $G -m -l $D/$F.go\n+\n+// Copyright 2010 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package foo\n+\n+import (\n+\t\"fmt\"\n+\t\"unsafe\"\n+)\n+\n+var gxx *int\n+\n+func foo1(x int) { // ERROR \"moved to heap: x\"\n+\tgxx = &x // ERROR \"&x escapes to heap\"\n+}\n+\n+func foo2(yy *int) { // ERROR \"leaking param: yy\"\n+\tgxx = yy\n+}\n+\n+func foo3(x int) *int { // ERROR \"moved to heap: x\"\n+\treturn &x // ERROR \"&x escapes to heap\"\n+}\n+\n+type T *T\n+\n+func foo3b(t T) { // ERROR \"leaking param: t\"\n+\t*t = t\n+}\n+\n+// xx isn't going anywhere, so use of yy is ok\n+func foo4(xx, yy *int) { // ERROR \"xx does not escape\" \"yy does not escape\"\n+\txx = yy\n+}\n+\n+// xx isn't going anywhere, so taking address of yy is ok\n+func foo5(xx **int, yy *int) { // ERROR \"xx does not escape\" \"yy does not escape\"\n+\txx = &yy // ERROR \"&yy does not escape\"\n+}\n+\n+func foo6(xx **int, yy *int) { // ERROR \"xx does not escape\" \"leaking param: yy\"\n+\t*xx = yy\n+}\n+\n+func foo7(xx **int, yy *int) { // ERROR \"xx does not escape\" \"yy does not escape\"\n+\t**xx = *yy\n+}\n+\n+func foo8(xx, yy *int) int { // ERROR \"xx does not escape\" \"yy does not escape\"\n+\txx = yy\n+\treturn *xx\n+}\n+\n+func foo9(xx, yy *int) *int { // ERROR \"leaking param: xx\" \"leaking param: yy\"\n+\txx = yy\n+\treturn xx\n+}\n+\n+func foo10(xx, yy *int) { // ERROR \"xx does not escape\" \"yy does not escape\"\n+\t*xx = *yy\n+}\n+\n+func foo11() int {\n+\tx, y := 0, 42\n+\txx := &x // ERROR \"&x does not escape\"\n+\tyy := &y // ERROR \"&y does not escape\"\n+\t*xx = *yy\n+\treturn x\n+}\n+\n+var xxx **int\n+\n+func foo12(yyy **int) { // ERROR \"leaking param: yyy\"\n+\txxx = yyy\n+}\n+\n+func foo13(yyy **int) { // ERROR \"yyy does not escape\"\n+\t*xxx = *yyy\n+}\n+\n+func foo14(yyy **int) { // ERROR \"yyy does not escape\"\n+\t**xxx = **yyy\n+}\n+\n+func foo15(yy *int) { // ERROR \"moved to heap: yy\"\n+\txxx = &yy // ERROR \"&yy escapes to heap\"\n+}\n+\n+func foo16(yy *int) { // ERROR \"leaking param: yy\"\n+\t*xxx = yy\n+}\n+\n+func foo17(yy *int) { // ERROR \"yy does not escape\"\n+\t**xxx = *yy\n+}\n+\n+func foo18(y int) { // ERROR \"moved to heap: \"y\"\n+\t*xxx = &y // ERROR \"&y escapes to heap\"\n+}\n+\n+func foo19(y int) {\n+\t**xxx = y\n+}\n+\n+type Bar struct {\n+\ti  int\n+\tii *int\n+}\n+\n+func NewBar() *Bar {\n+\treturn &Bar{42, nil} // ERROR \"&Bar literal escapes to heap\"\n+}\n+\n+func NewBarp(x *int) *Bar { // ERROR \"leaking param: x\"\n+\treturn &Bar{42, x} // ERROR \"&Bar literal escapes to heap\"\n+}\n+\n+func NewBarp2(x *int) *Bar { // ERROR \"x does not escape\"\n+\treturn &Bar{*x, nil} // ERROR \"&Bar literal escapes to heap\"\n+}\n+\n+func (b *Bar) NoLeak() int { // ERROR \"b does not escape\"\n+\treturn *(b.ii)\n+}\n+\n+func (b *Bar) Leak() *int { // ERROR \"leaking param: b\"\n+\treturn &b.i // ERROR \"&b.i escapes to heap\"\n+}\n+\n+func (b *Bar) AlsoNoLeak() *int { // ERROR \"b does not escape\"\n+\treturn b.ii\n+}\n+\n+func (b Bar) AlsoLeak() *int { // ERROR \"leaking param: b\"\n+\treturn b.ii\n+}\n+\n+func (b Bar) LeaksToo() *int { // ERROR \"leaking param: b\"\n+\tv := 0\t// ERROR \"moved to heap: v\"\n+\tb.ii = &v // ERROR \"&v escapes\"\n+\treturn b.ii\n+}\n+\n+func (b *Bar) LeaksABit() *int { // ERROR \"b does not escape\"\n+\tv := 0\t// ERROR \"moved to heap: v\"\n+\tb.ii = &v // ERROR \"&v escapes\"\n+\treturn b.ii\n+}\n+\n+func (b Bar) StillNoLeak() int { // ERROR \"b does not escape\"\n+\tv := 0\n+\tb.ii = &v // ERROR \"&v does not escape\"\n+\treturn b.i\n+}\n+\n+func goLeak(b *Bar) { // ERROR \"leaking param: b\"\n+\tgo b.NoLeak()\n+}\n+\n+type Bar2 struct {\n+\ti  [12]int\n+\tii []int\n+}\n+\n+func NewBar2() *Bar2 {\n+\treturn &Bar2{[12]int{42}, nil} // ERROR \"&Bar2 literal escapes to heap\"\n+}\n+\n+func (b *Bar2) NoLeak() int { // ERROR \"b does not escape\"\n+\treturn b.i[0]\n+}\n+\n+func (b *Bar2) Leak() []int { // ERROR \"leaking param: b\"\n+\treturn b.i[:] // ERROR \"b.i escapes to heap\"\n+}\n+\n+func (b *Bar2) AlsoNoLeak() []int { // ERROR \"b does not escape\"\n+\treturn b.ii[0:1]\n+}\n+\n+func (b Bar2) AgainNoLeak() [12]int { // ERROR \"b does not escape\"\n+\treturn b.i\n+}\n+\n+func (b *Bar2) LeakSelf() { // ERROR \"leaking param: b\"\n+\tb.ii = b.i[0:4] // ERROR \"b.i escapes to heap\"\n+}\n+\n+func (b *Bar2) LeakSelf2() { // ERROR \"leaking param: b\"\n+\tvar buf []int\n+\tbuf = b.i[0:] // ERROR \"b.i escapes to heap\"\n+\tb.ii = buf\n+}\n+\n+func foo21() func() int {\n+\tx := 42             // ERROR \"moved to heap: x\"\n+\treturn func() int { // ERROR \"func literal escapes to heap\"\n+\t\treturn x // ERROR \"&x escapes to heap\"\n+\t}\n+}\n+\n+func foo22() int {\n+\tx := 42\n+\treturn func() int { // ERROR \"func literal does not escape\"\n+\t\treturn x\n+\t}()\n+}\n+\n+func foo23(x int) func() int { // ERROR \"moved to heap: x\"\n+\treturn func() int { // ERROR \"func literal escapes to heap\"\n+\t\treturn x // ERROR \"&x escapes to heap\"\n+\t}\n+}\n+\n+func foo23a(x int) func() int { // ERROR \"moved to heap: x\"\n+\tf := func() int { // ERROR \"func literal escapes to heap\"\n+\t\treturn x // ERROR \"&x escapes to heap\"\n+\t}\n+\treturn f\n+}\n+\n+func foo23b(x int) *(func() int) { // ERROR \"moved to heap: x\"\n+\tf := func() int { return x } // ERROR \"moved to heap: f\" \"func literal escapes to heap\" \"&x escapes to heap\"\n+\treturn &f                    // ERROR \"&f escapes to heap\"\n+}\n+\n+func foo24(x int) int {\n+\treturn func() int { // ERROR \"func literal does not escape\"\n+\t\treturn x\n+\t}()\n+}\n+\n+var x *int\n+\n+func fooleak(xx *int) int { // ERROR \"leaking param: xx\"\n+\tx = xx\n+\treturn *x\n+}\n+\n+func foonoleak(xx *int) int { // ERROR \"xx does not escape\"\n+\treturn *x + *xx\n+}\n+\n+func foo31(x int) int { // ERROR \"moved to heap: x\"\n+\treturn fooleak(&x) // ERROR \"&x escapes to heap\"\n+}\n+\n+func foo32(x int) int {\n+\treturn foonoleak(&x) // ERROR \"&x does not escape\"\n+}\n+\n+type Foo struct {\n+\txx *int\n+\tx  int\n+}\n+\n+var F Foo\n+var pf *Foo\n+\n+func (f *Foo) fooleak() { // ERROR \"leaking param: f\"\n+\tpf = f\n+}\n+\n+func (f *Foo) foonoleak() { // ERROR \"f does not escape\"\n+\tF.x = f.x\n+}\n+\n+func (f *Foo) Leak() { // ERROR \"leaking param: f\"\n+\tf.fooleak()\n+}\n+\n+func (f *Foo) NoLeak() { // ERROR \"f does not escape\"\n+\tf.foonoleak()\n+}\n+\n+func foo41(x int) { // ERROR \"moved to heap: x\"\n+\tF.xx = &x // ERROR \"&x escapes to heap\"\n+}\n+\n+func (f *Foo) foo42(x int) { // ERROR \"f does not escape\" \"moved to heap: x\"\n+\tf.xx = &x // ERROR \"&x escapes to heap\"\n+}\n+\n+func foo43(f *Foo, x int) { // ERROR \"f does not escape\" \"moved to heap: x\"\n+\tf.xx = &x // ERROR \"&x escapes to heap\"\n+}\n+\n+func foo44(yy *int) { // ERROR \"leaking param: yy\"\n+\tF.xx = yy\n+}\n+\n+func (f *Foo) foo45() { // ERROR \"f does not escape\"\n+\tF.x = f.x\n+}\n+\n+func (f *Foo) foo46() { // ERROR \"f does not escape\"\n+\tF.xx = f.xx\n+}\n+\n+func (f *Foo) foo47() { // ERROR \"leaking param: f\"\n+\tf.xx = &f.x // ERROR \"&f.x escapes to heap\"\n+}\n+\n+var ptrSlice []*int\n+\n+func foo50(i *int) { // ERROR \"leaking param: i\"\n+\tptrSlice[0] = i\n+}\n+\n+var ptrMap map[*int]*int\n+\n+func foo51(i *int) { // ERROR \"leaking param: i\"\n+\tptrMap[i] = i\n+}\n+\n+func indaddr1(x int) *int { // ERROR \"moved to heap: x\"\n+\treturn &x // ERROR \"&x escapes to heap\"\n+}\n+\n+func indaddr2(x *int) *int { // ERROR \"leaking param: x\"\n+\treturn *&x // ERROR \"&x does not escape\"\n+}\n+\n+func indaddr3(x *int32) *int { // ERROR \"leaking param: x\"\n+\treturn *(**int)(unsafe.Pointer(&x)) // ERROR \"&x does not escape\"\n+}\n+\n+// From package math:\n+\n+func Float32bits(f float32) uint32 {\n+\treturn *(*uint32)(unsafe.Pointer(&f)) // ERROR \"&f does not escape\"\n+}\n+\n+func Float32frombits(b uint32) float32 {\n+\treturn *(*float32)(unsafe.Pointer(&b)) // ERROR \"&b does not escape\"\n+}\n+\n+func Float64bits(f float64) uint64 {\n+\treturn *(*uint64)(unsafe.Pointer(&f)) // ERROR \"&f does not escape\"\n+}\n+\n+func Float64frombits(b uint64) float64 {\n+\treturn *(*float64)(unsafe.Pointer(&b)) // ERROR \"&b does not escape\"\n+}\n+\n+// contrast with\n+func float64bitsptr(f float64) *uint64 { // ERROR \"moved to heap: f\"\n+\treturn (*uint64)(unsafe.Pointer(&f)) // ERROR \"&f escapes to heap\"\n+}\n+\n+func float64ptrbitsptr(f *float64) *uint64 { // ERROR \"leaking param: f\"\n+\treturn (*uint64)(unsafe.Pointer(f))\n+}\n+\n+func typesw(i interface{}) *int { // ERROR \"leaking param: i\"\n+\tswitch val := i.(type) {\n+\tcase *int:\n+\t\treturn val\n+\tcase *int8:\n+\t\tv := int(*val) // ERROR \"moved to heap: v\"\n+\t\treturn &v      // ERROR \"&v escapes to heap\"\n+\t}\n+\treturn nil\n+}\n+\n+func exprsw(i *int) *int { // ERROR \"leaking param: i\"\n+\tswitch j := i; *j + 110 {\n+\tcase 12:\n+\t\treturn j\n+\tcase 42:\n+\t\treturn nil\n+\t}\n+\treturn nil\n+\n+}\n+\n+// assigning to an array element is like assigning to the array\n+func foo60(i *int) *int { // ERROR \"leaking param: i\"\n+\tvar a [12]*int\n+\ta[0] = i\n+\treturn a[1]\n+}\n+\n+func foo60a(i *int) *int { // ERROR \"i does not escape\"\n+\tvar a [12]*int\n+\ta[0] = i\n+\treturn nil\n+}\n+\n+// assigning to a struct field  is like assigning to the struct\n+func foo61(i *int) *int { // ERROR \"leaking param: i\"\n+\ttype S struct {\n+\t\ta, b *int\n+\t}\n+\tvar s S\n+\ts.a = i\n+\treturn s.b\n+}\n+\n+func foo61a(i *int) *int { // ERROR \"i does not escape\"\n+\ttype S struct {\n+\t\ta, b *int\n+\t}\n+\tvar s S\n+\ts.a = i\n+\treturn nil\n+}\n+\n+// assigning to a struct field is like assigning to the struct but\n+// here this subtlety is lost, since s.a counts as an assignment to a\n+// track-losing dereference.\n+func foo62(i *int) *int { // ERROR \"leaking param: i\"\n+\ttype S struct {\n+\t\ta, b *int\n+\t}\n+\ts := new(S) // ERROR \"new[(]S[)] does not escape\"\n+\ts.a = i\n+\treturn nil // s.b\n+}\n+\n+type M interface {\n+\tM()\n+}\n+\n+func foo63(m M) { // ERROR \"m does not escape\"\n+}\n+\n+func foo64(m M) { // ERROR \"leaking param: m\"\n+\tm.M()\n+}\n+\n+func foo64b(m M) { // ERROR \"leaking param: m\"\n+\tdefer m.M()\n+}\n+\n+type MV int\n+\n+func (MV) M() {}\n+\n+func foo65() {\n+\tvar mv MV\n+\tfoo63(&mv) // ERROR \"&mv does not escape\"\n+}\n+\n+func foo66() {\n+\tvar mv MV  // ERROR \"moved to heap: mv\"\n+\tfoo64(&mv) // ERROR \"&mv escapes to heap\"\n+}\n+\n+func foo67() {\n+\tvar mv MV\n+\tfoo63(mv)\n+}\n+\n+func foo68() {\n+\tvar mv MV\n+\tfoo64(mv) // escapes but it's an int so irrelevant\n+}\n+\n+func foo69(m M) { // ERROR \"leaking param: m\"\n+\tfoo64(m)\n+}\n+\n+func foo70(mv1 *MV, m M) { // ERROR \"leaking param: mv1\" \"leaking param: m\"\n+\tm = mv1\n+\tfoo64(m)\n+}\n+\n+func foo71(x *int) []*int { // ERROR \"leaking param: x\"\n+\tvar y []*int\n+\ty = append(y, x)\n+\treturn y\n+}\n+\n+func foo71a(x int) []*int { // ERROR \"moved to heap: x\"\n+\tvar y []*int\n+\ty = append(y, &x) // ERROR \"&x escapes to heap\"\n+\treturn y\n+}\n+\n+func foo72() {\n+\tvar x int\n+\tvar y [1]*int\n+\ty[0] = &x // ERROR \"&x does not escape\"\n+}\n+\n+func foo72aa() [10]*int {\n+\tvar x int // ERROR \"moved to heap: x\"\n+\tvar y [10]*int\n+\ty[0] = &x // ERROR \"&x escapes to heap\"\n+\treturn y\n+}\n+\n+func foo72a() {\n+\tvar y [10]*int\n+\tfor i := 0; i < 10; i++ {\n+\t\t// escapes its scope\n+\t\tx := i    // ERROR \"moved to heap: x\"\n+\t\ty[i] = &x // ERROR \"&x escapes to heap\"\n+\t}\n+\treturn\n+}\n+\n+func foo72b() [10]*int {\n+\tvar y [10]*int\n+\tfor i := 0; i < 10; i++ {\n+\t\tx := i    // ERROR \"moved to heap: x\"\n+\t\ty[i] = &x // ERROR \"&x escapes to heap\"\n+\t}\n+\treturn y\n+}\n+\n+// issue 2145\n+func foo73() {\n+\ts := []int{3, 2, 1} // ERROR \"\\[\\]int literal does not escape\"\n+\tfor _, v := range s {\n+\t\tvv := v // ERROR \"moved to heap: vv\"\n+\t\t// actually just escapes its scope\n+\t\tdefer func() { // ERROR \"func literal escapes to heap\"\n+\t\t\tprintln(vv) // ERROR \"&vv escapes to heap\"\n+\t\t}()\n+\t}\n+}\n+\n+func foo74() {\n+\ts := []int{3, 2, 1} // ERROR \"\\[\\]int literal does not escape\"\n+\tfor _, v := range s {\n+\t\tvv := v // ERROR \"moved to heap: vv\"\n+\t\t// actually just escapes its scope\n+\t\tfn := func() { // ERROR \"func literal escapes to heap\"\n+\t\t\tprintln(vv) // ERROR \"&vv escapes to heap\"\n+\t\t}\n+\t\tdefer fn()\n+\t}\n+}\n+\n+func myprint(y *int, x ...interface{}) *int { // ERROR \"x does not escape\" \"leaking param: y\"\n+\treturn y\n+}\n+\n+func myprint1(y *int, x ...interface{}) *interface{} { // ERROR \"y does not escape\" \"leaking param: x\"\n+\treturn &x[0] // ERROR \"&x.0. escapes to heap\"\n+}\n+\n+func foo75(z *int) { // ERROR \"leaking param: z\"\n+\tmyprint(z, 1, 2, 3) // ERROR \"[.][.][.] argument does not escape\"\n+}\n+\n+func foo75a(z *int) { // ERROR \"z does not escape\"\n+\tmyprint1(z, 1, 2, 3) // ERROR \"[.][.][.] argument escapes to heap\"\n+}\n+\n+func foo76(z *int) { // ERROR \"leaking param: z\"\n+\tmyprint(nil, z) // ERROR \"[.][.][.] argument does not escape\"\n+}\n+\n+func foo76a(z *int) { // ERROR \"leaking param: z\"\n+\tmyprint1(nil, z) // ERROR \"[.][.][.] argument escapes to heap\"\n+}\n+\n+func foo76b() {\n+\tmyprint(nil, 1, 2, 3) // ERROR \"[.][.][.] argument does not escape\"\n+}\n+\n+func foo76c() {\n+\tmyprint1(nil, 1, 2, 3) // ERROR \"[.][.][.] argument escapes to heap\"\n+}\n+\n+func foo76d() {\n+\tdefer myprint(nil, 1, 2, 3) // ERROR \"[.][.][.] argument does not escape\"\n+}\n+\n+func foo76e() {\n+\tdefer myprint1(nil, 1, 2, 3) // ERROR \"[.][.][.] argument escapes to heap\"\n+}\n+\n+func foo76f() {\n+\tfor {\n+\t\t// TODO: This one really only escapes its scope, but we don't distinguish yet.\n+\t\tdefer myprint(nil, 1, 2, 3) // ERROR \"[.][.][.] argument escapes to heap\"\n+\t}\n+}\n+\n+func foo76g() {\n+\tfor {\n+\t\tdefer myprint1(nil, 1, 2, 3) // ERROR \"[.][.][.] argument escapes to heap\"\n+\t}\n+}\n+\n+func foo77(z []interface{}) { // ERROR \"z does not escape\"\n+\tmyprint(nil, z...) // z does not escape\n+}\n+\n+func foo77a(z []interface{}) { // ERROR \"leaking param: z\"\n+\tmyprint1(nil, z...)\n+}\n+\n+func foo78(z int) *int { // ERROR \"moved to heap: z\"\n+\treturn &z // ERROR \"&z escapes to heap\"\n+}\n+\n+func foo78a(z int) *int { // ERROR \"moved to heap: z\"\n+\ty := &z   // ERROR \"&z escapes to heap\"\n+\tx := &y   // ERROR \"&y does not escape\"\n+\treturn *x // really return y\n+}\n+\n+func foo79() *int {\n+\treturn new(int) // ERROR \"new[(]int[)] escapes to heap\"\n+}\n+\n+func foo80() *int {\n+\tvar z *int\n+\tfor {\n+\t\t// Really just escapes its scope but we don't distinguish\n+\t\tz = new(int) // ERROR \"new[(]int[)] escapes to heap\"\n+\t}\n+\t_ = z\n+\treturn nil\n+}\n+\n+func foo81() *int {\n+\tfor {\n+\t\tz := new(int) // ERROR \"new[(]int[)] does not escape\"\n+\t\t_ = z\n+\t}\n+\treturn nil\n+}\n+\n+type Fooer interface {\n+\tFoo()\n+}\n+\n+type LimitedFooer struct {\n+\tFooer\n+\tN int64\n+}\n+\n+func LimitFooer(r Fooer, n int64) Fooer { // ERROR \"leaking param: r\"\n+\treturn &LimitedFooer{r, n} // ERROR \"&LimitedFooer literal escapes to heap\"\n+}\n+\n+func foo90(x *int) map[*int]*int { // ERROR \"leaking param: x\"\n+\treturn map[*int]*int{nil: x} // ERROR \"map\\[\\*int\\]\\*int literal escapes to heap\"\n+}\n+\n+func foo91(x *int) map[*int]*int { // ERROR \"leaking param: x\"\n+\treturn map[*int]*int{x: nil} // ERROR \"map\\[\\*int\\]\\*int literal escapes to heap\"\n+}\n+\n+func foo92(x *int) [2]*int { // ERROR \"leaking param: x\"\n+\treturn [2]*int{x, nil}\n+}\n+\n+// does not leak c\n+func foo93(c chan *int) *int { // ERROR \"c does not escape\"\n+\tfor v := range c {\n+\t\treturn v\n+\t}\n+\treturn nil\n+}\n+\n+// does not leak m\n+func foo94(m map[*int]*int, b bool) *int { // ERROR \"m does not escape\"\n+\tfor k, v := range m {\n+\t\tif b {\n+\t\t\treturn k\n+\t\t}\n+\t\treturn v\n+\t}\n+\treturn nil\n+}\n+\n+// does leak x\n+func foo95(m map[*int]*int, x *int) { // ERROR \"m does not escape\" \"leaking param: x\"\n+\tm[x] = x\n+}\n+\n+// does not leak m\n+func foo96(m []*int) *int { // ERROR \"m does not escape\"\n+\treturn m[0]\n+}\n+\n+// does leak m\n+func foo97(m [1]*int) *int { // ERROR \"leaking param: m\"\n+\treturn m[0]\n+}\n+\n+// does not leak m\n+func foo98(m map[int]*int) *int { // ERROR \"m does not escape\"\n+\treturn m[0]\n+}\n+\n+// does leak m\n+func foo99(m *[1]*int) []*int { // ERROR \"leaking param: m\"\n+\treturn m[:]\n+}\n+\n+// does not leak m\n+func foo100(m []*int) *int { // ERROR \"m does not escape\"\n+\tfor _, v := range m {\n+\t\treturn v\n+\t}\n+\treturn nil\n+}\n+\n+// does leak m\n+func foo101(m [1]*int) *int { // ERROR \"leaking param: m\"\n+\tfor _, v := range m {\n+\t\treturn v\n+\t}\n+\treturn nil\n+}\n+\n+// does not leak m\n+func foo101a(m [1]*int) *int { // ERROR \"m does not escape\"\n+\tfor i := range m { // ERROR \"moved to heap: i\"\n+\t\treturn &i // ERROR \"&i escapes to heap\"\n+\t}\n+\treturn nil\n+}\n+\n+// does leak x\n+func foo102(m []*int, x *int) { // ERROR \"m does not escape\" \"leaking param: x\"\n+\tm[0] = x\n+}\n+\n+// does not leak x\n+func foo103(m [1]*int, x *int) { // ERROR \"m does not escape\" \"x does not escape\"\n+\tm[0] = x\n+}\n+\n+var y []*int\n+\n+// does not leak x\n+func foo104(x []*int) { // ERROR \"x does not escape\"\n+\tcopy(y, x)\n+}\n+\n+// does not leak x\n+func foo105(x []*int) { // ERROR \"x does not escape\"\n+\t_ = append(y, x...)\n+}\n+\n+// does leak x\n+func foo106(x *int) { // ERROR \"leaking param: x\"\n+\t_ = append(y, x)\n+}\n+\n+func foo107(x *int) map[*int]*int { // ERROR \"leaking param: x\"\n+\treturn map[*int]*int{x: nil} // ERROR \"map.* literal escapes to heap\"\n+}\n+\n+func foo108(x *int) map[*int]*int { // ERROR \"leaking param: x\"\n+\treturn map[*int]*int{nil: x} // ERROR \"map.* literal escapes to heap\"\n+}\n+\n+func foo109(x *int) *int { // ERROR \"leaking param: x\"\n+\tm := map[*int]*int{x: nil} // ERROR \"map.* literal does not escape\"\n+\tfor k, _ := range m {\n+\t\treturn k\n+\t}\n+\treturn nil\n+}\n+\n+func foo110(x *int) *int { // ERROR \"leaking param: x\"\n+\tm := map[*int]*int{nil: x} // ERROR \"map.* literal does not escape\"\n+\treturn m[nil]\n+}\n+\n+func foo111(x *int) *int { // ERROR \"leaking param: x\"\n+\tm := []*int{x} // ERROR \"\\[\\]\\*int literal does not escape\"\n+\treturn m[0]\n+}\n+\n+func foo112(x *int) *int { // ERROR \"leaking param: x\"\n+\tm := [1]*int{x}\n+\treturn m[0]\n+}\n+\n+func foo113(x *int) *int { // ERROR \"leaking param: x\"\n+\tm := Bar{ii: x}\n+\treturn m.ii\n+}\n+\n+func foo114(x *int) *int { // ERROR \"leaking param: x\"\n+\tm := &Bar{ii: x} // ERROR \"&Bar literal does not escape\"\n+\treturn m.ii\n+}\n+\n+func foo115(x *int) *int { // ERROR \"leaking param: x\"\n+\treturn (*int)(unsafe.Pointer(uintptr(unsafe.Pointer(x)) + 1))\n+}\n+\n+func foo116(b bool) *int {\n+\tif b {\n+\t\tx := 1    // ERROR \"moved to heap: x\"\n+\t\treturn &x // ERROR \"&x escapes to heap\"\n+\t} else {\n+\t\ty := 1    // ERROR \"moved to heap: y\"\n+\t\treturn &y // ERROR \"&y escapes to heap\"\n+\t}\n+\treturn nil\n+}\n+\n+func foo117(unknown func(interface{})) { // ERROR \"unknown does not escape\"\n+\tx := 1      // ERROR \"moved to heap: x\"\n+\tunknown(&x) // ERROR \"&x escapes to heap\"\n+}\n+\n+func foo118(unknown func(*int)) { // ERROR \"unknown does not escape\"\n+\tx := 1      // ERROR \"moved to heap: x\"\n+\tunknown(&x) // ERROR \"&x escapes to heap\"\n+}\n+\n+func external(*int)\n+\n+func foo119(x *int) { // ERROR \"leaking param: x\"\n+\texternal(x)\n+}\n+\n+func foo120() {\n+\t// formerly exponential time analysis\n+L1:\n+L2:\n+L3:\n+L4:\n+L5:\n+L6:\n+L7:\n+L8:\n+L9:\n+L10:\n+L11:\n+L12:\n+L13:\n+L14:\n+L15:\n+L16:\n+L17:\n+L18:\n+L19:\n+L20:\n+L21:\n+L22:\n+L23:\n+L24:\n+L25:\n+L26:\n+L27:\n+L28:\n+L29:\n+L30:\n+L31:\n+L32:\n+L33:\n+L34:\n+L35:\n+L36:\n+L37:\n+L38:\n+L39:\n+L40:\n+L41:\n+L42:\n+L43:\n+L44:\n+L45:\n+L46:\n+L47:\n+L48:\n+L49:\n+L50:\n+L51:\n+L52:\n+L53:\n+L54:\n+L55:\n+L56:\n+L57:\n+L58:\n+L59:\n+L60:\n+L61:\n+L62:\n+L63:\n+L64:\n+L65:\n+L66:\n+L67:\n+L68:\n+L69:\n+L70:\n+L71:\n+L72:\n+L73:\n+L74:\n+L75:\n+L76:\n+L77:\n+L78:\n+L79:\n+L80:\n+L81:\n+L82:\n+L83:\n+L84:\n+L85:\n+L86:\n+L87:\n+L88:\n+L89:\n+L90:\n+L91:\n+L92:\n+L93:\n+L94:\n+L95:\n+L96:\n+L97:\n+L98:\n+L99:\n+L100:\n+\t// use the labels to silence compiler errors\n+\tgoto L1\n+\tgoto L2\n+\tgoto L3\n+\tgoto L4\n+\tgoto L5\n+\tgoto L6\n+\tgoto L7\n+\tgoto L8\n+\tgoto L9\n+\tgoto L10\n+\tgoto L11\n+\tgoto L12\n+\tgoto L13\n+\tgoto L14\n+\tgoto L15\n+\tgoto L16\n+\tgoto L17\n+\tgoto L18\n+\tgoto L19\n+\tgoto L20\n+\tgoto L21\n+\tgoto L22\n+\tgoto L23\n+\tgoto L24\n+\tgoto L25\n+\tgoto L26\n+\tgoto L27\n+\tgoto L28\n+\tgoto L29\n+\tgoto L30\n+\tgoto L31\n+\tgoto L32\n+\tgoto L33\n+\tgoto L34\n+\tgoto L35\n+\tgoto L36\n+\tgoto L37\n+\tgoto L38\n+\tgoto L39\n+\tgoto L40\n+\tgoto L41\n+\tgoto L42\n+\tgoto L43\n+\tgoto L44\n+\tgoto L45\n+\tgoto L46\n+\tgoto L47\n+\tgoto L48\n+\tgoto L49\n+\tgoto L50\n+\tgoto L51\n+\tgoto L52\n+\tgoto L53\n+\tgoto L54\n+\tgoto L55\n+\tgoto L56\n+\tgoto L57\n+\tgoto L58\n+\tgoto L59\n+\tgoto L60\n+\tgoto L61\n+\tgoto L62\n+\tgoto L63\n+\tgoto L64\n+\tgoto L65\n+\tgoto L66\n+\tgoto L67\n+\tgoto L68\n+\tgoto L69\n+\tgoto L70\n+\tgoto L71\n+\tgoto L72\n+\tgoto L73\n+\tgoto L74\n+\tgoto L75\n+\tgoto L76\n+\tgoto L77\n+\tgoto L78\n+\tgoto L79\n+\tgoto L80\n+\tgoto L81\n+\tgoto L82\n+\tgoto L83\n+\tgoto L84\n+\tgoto L85\n+\tgoto L86\n+\tgoto L87\n+\tgoto L88\n+\tgoto L89\n+\tgoto L90\n+\tgoto L91\n+\tgoto L92\n+\tgoto L93\n+\tgoto L94\n+\tgoto L95\n+\tgoto L96\n+\tgoto L97\n+\tgoto L98\n+\tgoto L99\n+\tgoto L100\n+}\n+\n+func foo121() {\n+\tfor i := 0; i < 10; i++ {\n+\t\tdefer myprint(nil, i) // ERROR \"[.][.][.] argument escapes to heap\"\n+\t\tgo myprint(nil, i)    // ERROR \"[.][.][.] argument escapes to heap\"\n+\t}\n+}\n+\n+// same as foo121 but check across import\n+func foo121b() {\n+\tfor i := 0; i < 10; i++ {\n+\t\tdefer fmt.Printf(\"%d\", i) // ERROR \"[.][.][.] argument escapes to heap\"\n+\t\tgo fmt.Printf(\"%d\", i)    // ERROR \"[.][.][.] argument escapes to heap\"\n+\t}\n+}\n+\n+// a harmless forward jump\n+func foo122() {\n+\tvar i *int\n+\n+\tgoto L1\n+L1:\n+\ti = new(int) // ERROR \"does not escape\"\n+\t_ = i\n+}\n+\n+// a backward jump, increases loopdepth\n+func foo123() {\n+\tvar i *int\n+\n+L1:\n+\ti = new(int) // ERROR \"escapes\"\n+\n+\tgoto L1\n+\t_ = i\n+}"}, {"sha": "fc2d6ebbe4bbb84c613b2c2e82cbb26d330ebbb0", "filename": "gcc/testsuite/go.test/test/escape3.go", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fescape3.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,36 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test run-time behavior of escape analysis-related optimizations.\n+\n+package main\n+\n+func main() {\n+\ttest1()\n+}\n+\n+func test1() {\n+\tcheck1(0)\n+\tcheck1(1)\n+\tcheck1(2)\n+}\n+\n+type T1 struct {\n+\tX, Y, Z int\n+}\n+\n+func f() int {\n+\treturn 1\n+}\n+\n+func check1(pass int) T1 {\n+\tv := []T1{{X: f(), Z: f()}}\n+\tif v[0].Y != 0 {\n+\t\tpanic(\"nonzero init\")\n+\t}\n+\tv[0].Y = pass\n+\treturn v[0]\n+}"}, {"sha": "cf2daaecf06b42b9a8e058171f9098113640ffa8", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug027.go", "status": "modified", "additions": 49, "deletions": 26, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug027.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug027.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug027.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -6,53 +6,76 @@\n \n package main\n \n+import \"fmt\"\n+\n type Element interface {\n }\n \n type Vector struct {\n-\tnelem int;\n-\telem []Element;\n+\tnelem int\n+\telem  []Element\n }\n \n func New() *Vector {\n-\tv := new(Vector);\n-\tv.nelem = 0;\n-\tv.elem = make([]Element, 10);\n-\treturn v;\n+\tv := new(Vector)\n+\tv.nelem = 0\n+\tv.elem = make([]Element, 10)\n+\treturn v\n }\n \n func (v *Vector) At(i int) Element {\n-\treturn v.elem[i];\n+\treturn v.elem[i]\n }\n \n func (v *Vector) Insert(e Element) {\n-\tv.elem[v.nelem] = e;\n-\tv.nelem++;\n+\tv.elem[v.nelem] = e\n+\tv.nelem++\n }\n \n func main() {\n-\ttype I struct { val int; };\n-\ti0 := new(I); i0.val = 0;\n-\ti1 := new(I); i1.val = 11;\n-\ti2 := new(I); i2.val = 222;\n-\ti3 := new(I); i3.val = 3333;\n-\ti4 := new(I); i4.val = 44444;\n-\tv := New();\n-\tprint(\"hi\\n\");\n-\tv.Insert(i4);\n-\tv.Insert(i3);\n-\tv.Insert(i2);\n-\tv.Insert(i1);\n-\tv.Insert(i0);\n+\ttype I struct{ val int }\n+\ti0 := new(I)\n+\ti0.val = 0\n+\ti1 := new(I)\n+\ti1.val = 11\n+\ti2 := new(I)\n+\ti2.val = 222\n+\ti3 := new(I)\n+\ti3.val = 3333\n+\ti4 := new(I)\n+\ti4.val = 44444\n+\tv := New()\n+\tr := \"hi\\n\"\n+\tv.Insert(i4)\n+\tv.Insert(i3)\n+\tv.Insert(i2)\n+\tv.Insert(i1)\n+\tv.Insert(i0)\n \tfor i := 0; i < v.nelem; i++ {\n-\t\tvar x *I;\n-\t\tx = v.At(i).(*I);\n-\t\tprint(i, \" \", x.val, \"\\n\");  // prints correct list\n+\t\tvar x *I\n+\t\tx = v.At(i).(*I)\n+\t\tr += fmt.Sprintln(i, x.val) // prints correct list\n \t}\n \tfor i := 0; i < v.nelem; i++ {\n-\t\tprint(i, \" \", v.At(i).(*I).val, \"\\n\");\n+\t\tr += fmt.Sprintln(i, v.At(i).(*I).val)\n+\t}\n+\texpect := `hi\n+0 44444\n+1 3333\n+2 222\n+3 11\n+4 0\n+0 44444\n+1 3333\n+2 222\n+3 11\n+4 0\n+`\n+\tif r != expect {\n+\t\tpanic(r)\n \t}\n }\n+\n /*\n bug027.go:50: illegal types for operand\n \t(<Element>I{}) CONV (<I>{})"}, {"sha": "328d191bb423d02728a99579cc3fce9e0b700951", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug067.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug067.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug067.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug067.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -10,6 +10,6 @@ var c chan int\n \n func main() {\n \tc = make(chan int);\n-\tgo func() { print(\"ok\\n\"); c <- 0 } ();\n+\tgo func() { c <- 0 } ();\n \t<-c\n }"}, {"sha": "24ac7798889ad9d4af3fb3f17a2e7c4dc7af5fdd", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug070.go", "status": "modified", "additions": 26, "deletions": 11, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug070.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug070.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug070.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -6,20 +6,35 @@\n \n package main\n \n+import \"fmt\"\n+\n func main() {\n-\tvar i, k int;\n-\touter:\n-\tfor k=0; k<2; k++ {\n-\t\tprint(\"outer loop top k \", k, \"\\n\");\n-\t\tif k != 0 { panic(\"k not zero\") }  // inner loop breaks this one every time\n-\t\tfor i=0; i<2; i++ {\n-\t\t\tif i != 0 { panic(\"i not zero\") }  // loop breaks every time\n-\t\t\tprint(\"inner loop top i \", i, \"\\n\");\n+\tvar i, k int\n+\tvar r string\n+outer:\n+\tfor k = 0; k < 2; k++ {\n+\t\tr += fmt.Sprintln(\"outer loop top k\", k)\n+\t\tif k != 0 {\n+\t\t\tpanic(\"k not zero\")\n+\t\t} // inner loop breaks this one every time\n+\t\tfor i = 0; i < 2; i++ {\n+\t\t\tif i != 0 {\n+\t\t\t\tpanic(\"i not zero\")\n+\t\t\t} // loop breaks every time\n+\t\t\tr += fmt.Sprintln(\"inner loop top i\", i)\n \t\t\tif true {\n-\t\t\t\tprint(\"do break\\n\");\n-\t\t\t\tbreak outer;\n+\t\t\t\tr += \"do break\\n\"\n+\t\t\t\tbreak outer\n \t\t\t}\n \t\t}\n \t}\n-\tprint(\"broke\\n\");\n+\tr += \"broke\\n\"\n+\texpect := `outer loop top k 0\n+inner loop top i 0\n+do break\n+broke\n+`\n+\tif r != expect {\n+\t\tpanic(r)\n+\t}\n }"}, {"sha": "52d92c7e3d4c668414ac3cf97a742ae5e8c6461a", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug093.go", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug093.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug093.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug093.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -10,7 +10,6 @@ type S struct {\n }\n \n func (p *S) M() {\n-\tprint(\"M\\n\");\n }\n \n type I interface {"}, {"sha": "4ca07dc65a72da31cbf1c206658834f1de489d70", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug113.go", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug113.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug113.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug113.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,4 @@\n-// $G $D/$F.go && $L $F.$A && (! ./$A.out || echo BUG: should not succeed)\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -21,8 +21,24 @@ func main() {\n \tif foo2(v2) != 1 {\n \t\tpanic(2)\n \t}\n+\t\n+\tshouldPanic(p1)\n+}\n+\n+func p1() {\n+\tvar i I\n+\ti = 1\n \tvar v3 = i.(int32) // This type conversion should fail at runtime.\n \tif foo2(v3) != 1 {\n \t\tpanic(3)\n \t}\n }\n+\n+func shouldPanic(f func()) {\n+\tdefer func() {\n+\t\tif recover() == nil {\n+\t\t\tpanic(\"function should panic\")\n+\t\t}\n+\t}()\n+\tf()\n+}"}, {"sha": "251020c96f79e94a505c6cf35a855fd098b506e7", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug148.go", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug148.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug148.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug148.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,4 @@\n-// $G $D/$F.go && $L $F.$A && ! ./$A.out || echo BUG: should crash\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -8,6 +8,8 @@ package main\n \n type T struct {a, b int};\n \n+func println(x, y int) { }\n+\n func f(x interface{}) interface{} {\n \ttype T struct {a, b int};\n \n@@ -24,16 +26,29 @@ func main() {\n \tinner_T := f(nil);\n \tf(inner_T);\n \n+\tshouldPanic(p1)\n+}\n+\n+func p1() {\n \touter_T := T{5, 7};\n \tf(outer_T);\n }\n \n+func shouldPanic(f func()) {\n+\tdefer func() {\n+\t\tif recover() == nil {\n+\t\t\tpanic(\"function should panic\")\n+\t\t}\n+\t}()\n+\tf()\n+}\n+\n /*\n This prints:\n \n 2 3\n 5 7\n \n-but it should crash: The type assertion on line 14 should fail\n+but it should crash: The type assertion on line 18 should fail\n for the 2nd call to f with outer_T.\n */"}, {"sha": "ff027ddc22963a2b2fac556f0ecc0e7818b6074f", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug220.go", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug220.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug220.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug220.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,14 +0,0 @@\n-// $G $D/$F.go || echo BUG: bug220\n-\n-// Copyright 2009 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-func main() {\n-\tm := make(map[int]map[uint]float64)\n-\n-\tm[0] = make(map[uint]float64), false // 6g used to reject this\n-\tm[1] = nil\n-}"}, {"sha": "d80ae76a215ba32443b07c9f2e104f97af3f0fef", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug242.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug242.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug242.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug242.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -93,7 +93,8 @@ func main() {\n \n \tm[13] = 'B'\n \t//  13        14\n-\tm[gint()] = gbyte(), false\n+\tdelete(m, gint())\n+\tgbyte()\n \tif _, present := m[13]; present {\n \t\tprintln(\"bad map removal\")\n \t\tpanic(\"fail\")"}, {"sha": "a9cda7bd7cb89325c7fe93f1121bcd42a3687f06", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug270.go", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug270.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug270.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug270.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,21 +0,0 @@\n-// $G $D/$F.go\n-\n-// Copyright 2010 The Go Authors.  All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-// http://code.google.com/p/go/issues/detail?id=746\n-\n-package main\n-\n-type I interface { F() }\n-\n-type T struct{}\n-\n-func (T) F() {}\n-\n-func main() {\n-\tswitch I(T{}).(type) {\n-\tcase interface{}:\n-\t}\n-}"}, {"sha": "eb678385610ebb713e0f48c52df9c687ea4ae08e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug286.go", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug286.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug286.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug286.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -12,16 +12,14 @@ type I interface {\n \tf()\n }\n \n-\n var callee string\n-var error bool\n+var error_ bool\n \n type T int\n \n func (t *T) f() { callee = \"f\" }\n func (i *T) g() { callee = \"g\" }\n \n-\n // test1 and test2 are the same except that in the interface J\n // the entries are swapped. test2 and test3 are the same except\n // that in test3 the interface J is declared outside the function.\n@@ -36,11 +34,10 @@ func test1(x I) {\n \tx.(J).f()\n \tif callee != \"f\" {\n \t\tprintln(\"test1 called\", callee)\n-\t\terror = true\n+\t\terror_ = true\n \t}\n }\n \n-\n func test2(x I) {\n \ttype J interface {\n \t\tg()\n@@ -49,11 +46,10 @@ func test2(x I) {\n \tx.(J).f()\n \tif callee != \"f\" {\n \t\tprintln(\"test2 called\", callee)\n-\t\terror = true\n+\t\terror_ = true\n \t}\n }\n \n-\n type J interface {\n \tg()\n \tI\n@@ -63,7 +59,7 @@ func test3(x I) {\n \tx.(J).f()\n \tif callee != \"f\" {\n \t\tprintln(\"test3 called\", callee)\n-\t\terror = true\n+\t\terror_ = true\n \t}\n }\n \n@@ -72,7 +68,7 @@ func main() {\n \ttest1(x)\n \ttest2(x)\n \ttest3(x)\n-\tif error {\n+\tif error_ {\n \t\tpanic(\"wrong method called\")\n \t}\n }"}, {"sha": "825298371f969d03ab2e48e1ece03fb335f3afff", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug328.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug328.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug328.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug328.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,4 @@\n-// $G $D/$F.go && $L $F.$A && ./$A.out\n+// $G $D/$F.go && $L $F.$A && ./$A.out 2>&1 | cmp - $D/$F.out\n \n // Copyright 2011 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style"}, {"sha": "9982566dc094533dcc25d9e38ad7d9f0b4c603d4", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug328.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug328.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug328.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug328.out?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1 @@\n+0x0"}, {"sha": "34cc013151f992ac2377042c43b2b6c3ef9341f7", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug340.go", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug340.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug340.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug340.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -10,8 +10,8 @@ package main\n \n func main() {\n \tvar x interface{}\n-\tswitch t := x.(type) { // GC_ERROR \"0 is not a type\"\n-\tcase 0:\t\t// GCCGO_ERROR \"expected type\"\n-\t\tt.x = 1 // ERROR \"type interface \\{ \\}|reference to undefined field or method\"\n+\tswitch t := x.(type) {\n+\tcase 0:\t\t// ERROR \"type\"\n+\t\tt.x = 1 // ERROR \"type interface \\{\\}|reference to undefined field or method\"\n \t}\n }"}, {"sha": "bc8c2c5e62c7d9a07b2d472f9064575b95a23494", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug365.go", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug365.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug365.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug365.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -12,11 +12,11 @@\n package main\n \n type S struct {\n-\terr os.Error  // ERROR \"undefined|expected package\"\n+\terr foo.Bar // ERROR \"undefined|expected package\"\n \tNum int\n }\n \n func main() {\n \ts := S{}\n-\t_ = s.Num  // no error here please\n+\t_ = s.Num // no error here please\n }"}, {"sha": "8c000f50a931838dffe9d09017521679d26a56d7", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug366.go", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug366.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug366.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug366.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,37 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2206.  Incorrect sign extension of div arguments.\n+\n+package main\n+\n+func five(x int64) {\n+\tif x != 5 {\n+\t\tpanic(x)\n+\t}\n+}\n+\n+func main() {\n+       // 5\n+       five(int64(5 / (5 / 3)))\n+\n+       // 5\n+       five(int64(byte(5) / (byte(5) / byte(3))))\n+\n+       // 5\n+       var a, b byte = 5, 3\n+       five(int64(a / (a / b)))\n+       \n+       // integer divide by zero in golang.org sandbox\n+       // 0 on windows/amd64\n+       x := [3]byte{2, 3, 5}\n+       five(int64(x[2] / (x[2] / x[1])))\n+\n+       // integer divide by zero in golang.org sandbox\n+       // crash on windows/amd64\n+       y := x[1:3]\n+       five(int64(y[1] / (y[1] / y[0])))\n+}\n\\ No newline at end of file"}, {"sha": "21e9a5002c9c00266a1d2aec530f0558b78fb82c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug367.dir/main.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.dir%2Fmain.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.dir%2Fmain.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.dir%2Fmain.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,24 @@\n+package main\n+\n+import (\n+\t\"./p\"\n+)\n+\n+type T struct{ *p.S }\n+type I interface {\n+\tget()\n+}\n+\n+func main() {\n+\tvar t T\n+\tp.F(t)\n+\tvar x interface{} = t\n+\t_, ok := x.(I)\n+\tif ok {\n+\t\tpanic(\"should not satisfy main.I\")\n+\t}\n+\t_, ok = x.(p.I)\n+\tif !ok {\n+\t\tpanic(\"should satisfy p.I\")\n+\t}\n+}"}, {"sha": "c8772d2d051543b217f55130aa0d74ec115905c4", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug367.dir/p.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.dir%2Fp.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.dir%2Fp.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.dir%2Fp.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,15 @@\n+package p\n+\n+type T struct{ x int }\n+type S struct{}\n+\n+func (p *S) get() {\n+}\n+\n+type I interface {\n+\tget()\n+}\n+\n+func F(i I) {\n+\ti.get()\n+}"}, {"sha": "25d11a15318d1be22c91aa2b57fc60f25d2b2f9e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug367.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug367.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,7 @@\n+// $G $D/$F.dir/p.go && $G $D/$F.dir/main.go && $L main.$A && ./$A.out || echo BUG: should not fail\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "8d94f531c9bd8aa6e3cbb85ee135d67272ad0877", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug368.go", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug368.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug368.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug368.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,26 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// 5g bug used to set up the 0 for -f() before calling f,\n+// and the call to f smashed the register.\n+\n+func f(n int) int {\n+\ts := 0\n+\tfor i := 0; i < n; i++ {\n+\t\ts += i>>1\n+\t}\n+\treturn s\n+}\n+\n+func main() {\n+\tx := -f(100)\n+\tif x != -2450 {\n+\t\tprintln(x)\n+\t\tpanic(\"broken\")\n+\t}\n+}"}, {"sha": "cf57041928a507b81d787e4d32e5675612f977da", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug369.dir/pkg.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug369.dir%2Fpkg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug369.dir%2Fpkg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug369.dir%2Fpkg.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package pkg\n+\n+func NonASCII(b []byte, i int) int {\n+\tfor i = 0; i < len(b); i++ {\n+\t\tif b[i] >= 0x80 {\n+\t\t\tbreak\n+\t\t}\n+\t}\n+\treturn i\n+}\n+"}, {"sha": "8eb23eecf16ecd6bc2d50d7d2f35a16fdfe5fb91", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug369.go", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug369.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug369.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug369.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,59 @@\n+// $G -N -o slow.$A $D/bug369.dir/pkg.go &&\n+// $G -o fast.$A $D/bug369.dir/pkg.go &&\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that compiling with optimization turned on produces faster code.\n+\n+package main\n+\n+import (\n+\t\"flag\"\n+\t\"os\"\n+\t\"runtime\"\n+\t\"testing\"\n+\n+\tfast \"./fast\"\n+\tslow \"./slow\"\n+)\n+\n+var buf = make([]byte, 1048576)\n+\n+func BenchmarkFastNonASCII(b *testing.B) {\n+\tfor i := 0; i < b.N; i++ {\n+\t\tfast.NonASCII(buf, 0)\n+\t}\n+}\n+\n+func BenchmarkSlowNonASCII(b *testing.B) {\n+\tfor i := 0; i < b.N; i++ {\n+\t\tslow.NonASCII(buf, 0)\n+\t}\n+}\n+\n+func main() {\n+\tos.Args = []string{os.Args[0], \"-test.benchtime=0.1\"}\n+\tflag.Parse()\n+\t\n+\trslow := testing.Benchmark(BenchmarkSlowNonASCII)\n+\trfast := testing.Benchmark(BenchmarkFastNonASCII)\n+\ttslow := rslow.NsPerOp()\n+\ttfast := rfast.NsPerOp()\n+\n+\t// Optimization should be good for at least 2x, but be forgiving.\n+\t// On the ARM simulator we see closer to 1.5x.\n+\tspeedup := float64(tslow)/float64(tfast)\n+\twant := 1.8\n+\tif runtime.GOARCH == \"arm\" {\n+\t\twant = 1.3\n+\t}\n+\tif speedup < want {\n+\t\t// TODO(rsc): doesn't work on linux-amd64 or darwin-amd64 builders, nor on\n+\t\t// a Lenovo x200 (linux-amd64) laptop.\n+\t\t//println(\"fast:\", tfast, \"slow:\", tslow, \"speedup:\", speedup, \"want:\", want)\n+\t\t//println(\"not fast enough\")\n+\t}\n+}"}, {"sha": "9cb45f6e0dea549bd6e9f6395c2092bdef4700f4", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug370.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug370.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug370.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug370.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,18 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// issue 2337\n+// The program deadlocked.\n+\n+import \"runtime\"\n+\n+func main() {\n+\truntime.GOMAXPROCS(2)\n+\truntime.GC()\n+\truntime.GOMAXPROCS(1)\n+}"}, {"sha": "bf993df068032e28461088cc080d1be245fe138c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug371.go", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug371.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug371.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug371.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,24 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 2343\n+\n+package main\n+\n+type T struct {}\n+\n+func (t *T) pm() {}\n+func (t T) m() {}\n+\n+func main() {\n+\tp := &T{}\n+\tp.pm()\n+\tp.m()\n+\n+\tq := &p\n+\tq.m()  // ERROR \"requires explicit dereference\"\n+\tq.pm()\n+}"}, {"sha": "a6f7208bbd54ab5a3a448deeeb9ea996acde408f", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug372.go", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug372.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug372.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug372.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,28 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: bug372\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2355\n+package main\n+\n+type T struct {}\n+func (T) m() string { return \"T\" }\n+\n+type TT struct {\n+\tT\n+\tm func() string\n+}\n+\n+\n+func ff() string { return \"ff\" }\n+\n+func main() {\n+\tvar tt TT\n+\ttt.m = ff\n+\n+\tif tt.m() != \"ff\" {\n+\t\tprintln(tt.m(), \"!= \\\"ff\\\"\")\n+\t}\n+}"}, {"sha": "934a6c7328c7d57586ca253053d423bc0e2dd1bc", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug373.go", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug373.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug373.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug373.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,32 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 873, 2162\n+\n+package foo\n+\n+func f(x interface{}) {\n+\tswitch t := x.(type) {  // ERROR \"declared and not used\"\n+\tcase int:\n+\t}\n+}\n+\n+func g(x interface{}) {\n+\tswitch t := x.(type) {\n+\tcase int:\n+\tcase float32:\n+\t\tprintln(t)\n+\t}\n+}\n+\n+func h(x interface{}) {\n+\tswitch t := x.(type) {\n+\tcase int:\n+\tcase float32:\n+\tdefault:\n+\t\tprintln(t)\n+\t}\n+}"}, {"sha": "b55c5df4567ca77f1c66ea3abab451f1d9eb3448", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug374.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug374.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug374.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug374.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,20 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1556\n+package foo\n+\n+type I interface {\n+\tm() int\n+}\n+\n+type T int\n+\n+var _ I = T(0)\t// GCCGO_ERROR \"incompatible\"\n+\n+func (T) m(buf []byte) (a int, b xxxx) {  // ERROR \"xxxx\"\n+\treturn 0, nil\n+}"}, {"sha": "527358526375c779f2ebea4b873279a804823449", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug375.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug375.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug375.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug375.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,19 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: bug375\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2423\n+\n+package main\n+\n+func main() {\n+\tvar x interface{} = \"hello\"\n+\n+\tswitch x {\n+\tcase \"hello\":\n+\tdefault:\n+\t\tprintln(\"FAIL\")\n+\t}\n+}"}, {"sha": "1efbeecf21c1a6458c09937b671f4083ba63029e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug376.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug376.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug376.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug376.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,11 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 1951\n+package foo\n+import \"unsafe\"\n+var v = unsafe.Sizeof  // ERROR \"must be called\"\n+"}, {"sha": "c9060756b1a4870408831f687c16daee97837190", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug377.dir/one.go", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug377.dir%2Fone.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug377.dir%2Fone.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug377.dir%2Fone.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,6 @@\n+package one\n+\n+func Foo() (n int64, _ *int) {\n+\treturn 42, nil\n+}\n+"}, {"sha": "8a5346ab72b0a03032cf23f5e627cf2ec28ee8ba", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug377.dir/two.go", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug377.dir%2Ftwo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug377.dir%2Ftwo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug377.dir%2Ftwo.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+package two\n+\n+import _ \"./one\"\n+"}, {"sha": "e905e34d683f1e210db8a817c812bec2e16a4dc2", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug377.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug377.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug377.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug377.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,9 @@\n+// $G $D/$F.dir/one.go && $G $D/$F.dir/two.go\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 1802\n+\n+package ignored"}, {"sha": "b393b3dc1e9246d96f931047d495dfd357b49c0d", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug378.go", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug378.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug378.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug378.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,19 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: bug378\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2497\n+\n+package main\n+\n+type Header struct{}\n+func (h Header) Method() {}\n+\n+var _ interface{} = Header{}\n+\n+func main() {\n+  \ttype X Header\n+  \tvar _ interface{} = X{}\n+}"}, {"sha": "3dd3d2983bd0869130cad19cbdc35e84c1df75de", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug379.go", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug379.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug379.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug379.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,18 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2452.\n+\n+// Check that the error messages says \n+//\tbug378.go:17: 1 + 2 not used\n+// and not\n+//\tbug378.go:17: 1 not used\n+\n+package main\n+\n+func main() {\n+\t1 + 2 // ERROR \"1 \\+ 2 not used|value computed is not used\"\n+}"}, {"sha": "75b58064f5df3ecbd4a4db185a2a48237bb96b1d", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug380.go", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug380.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug380.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug380.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,11 @@\n+// $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Used to cause a typechecking loop error.\n+\n+package pkg\n+type T map[int]string\n+var q = &T{}"}, {"sha": "3f3232bf12f3afd1ba326ad81b373b2930b1412c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug381.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug381.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug381.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug381.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,20 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2276.\n+\n+// Check that the error messages says \n+//\tbug378.go:19: unsafe.Alignof(0) not used\n+// and not\n+//\tbug378.go:19: 4 not used\n+\n+package main\n+\n+import \"unsafe\"\n+\n+func main() {\n+\tunsafe.Alignof(0) // ERROR \"unsafe\\.Alignof|value computed is not used\"\n+}"}, {"sha": "f8d75d4541954d77c10ed9db96056bd086ce0b43", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug382.dir/pkg.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug382.dir%2Fpkg.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug382.dir%2Fpkg.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug382.dir%2Fpkg.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,7 @@\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package pkg\n+type T struct {}\n+var E T"}, {"sha": "6212fbf507c3e355ab2c05832aae284850bb1e10", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug382.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug382.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug382.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug382.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,10 @@\n+// $G $D/$F.dir/pkg.go && $G $D/$F.go || echo \"Bug 382\"\n+\n+// Issue 2529\n+\n+package main\n+import \"./pkg\"\n+\n+var x = pkg.E\n+\n+var fo = struct {F pkg.T}{F: x}"}, {"sha": "181a897b63d42f82b96db769f67e2be468591498", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug383.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug383.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug383.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug383.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,13 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2520\n+\n+package main\n+func main() {\n+\tif 2e9 { }      // ERROR \"2e.09|expected bool\"\n+\tif 3.14+1i { }  // ERROR \"3.14 . 1i|expected bool\"\n+}"}, {"sha": "b3d646688293197b9831f407b847695f5bfa75d6", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug384.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug384.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug384.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug384.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,12 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2500\n+\n+package foo\n+\n+// Check that we only get root cause message, no further complaints about r undefined\n+func (r *indexWriter) foo() {}  // ERROR \"undefined.*indexWriter\""}, {"sha": "a009f664e09d48da94ad0375ac4725cb7cf4840c", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug385_32.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug385_32.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug385_32.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug385_32.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,14 @@\n+// [ $O == 6 ] || errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2444\n+\n+package main\n+func main() {\n+\tvar arr [1000200030]int   // ERROR \"type .* too large\"\n+\tarr_bkup := arr\n+\t_ = arr_bkup\n+}\n\\ No newline at end of file"}, {"sha": "701be0d09ac6ec33a4721025418115fb0965a1eb", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug385_64.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug385_64.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug385_64.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug385_64.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,15 @@\n+// [ $O != 6 ]  || errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2444\n+\n+package main\n+func main() {  // ERROR \"stack frame too large\"\n+\tvar arr [1000200030]int\n+\tarr_bkup := arr\n+\t_ = arr_bkup\n+}\n+"}, {"sha": "b42c07073b03946c4ad58ab9dea057b82002fa3b", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug386.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug386.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug386.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug386.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,12 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2451, 2452 \n+package foo\n+\n+func f() error { return 0 } // ERROR \"cannot use 0 .type int.|has no methods\"\n+\n+func g() error { return -1 }  // ERROR \"cannot use -1 .type int.|has no methods\""}, {"sha": "c9db4aea89fc6a8c5a142a23c456dd674d942044", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug387.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug387.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug387.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug387.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,30 @@\n+// $G $D/$F.go || echo \"Bug387\"\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2549\n+\n+/*  Used to die with\n+missing typecheck: [7f5bf07b4438]\n+\n+.   AS l(45)\n+.   .   NAME-main.autotmp_0017 u(1) a(1) l(45) x(0+0) class(PAUTO)\n+esc(N) tc(1) used(1) ARRAY-[2]string\n+internal compiler error: missing typecheck \n+*/\n+package main\n+\n+import (\n+        \"fmt\"\n+        \"path/filepath\"\n+)\n+\n+func main() {\n+        switch _, err := filepath.Glob(filepath.Join(\".\", \"vnc\")); {\n+        case err != nil:\n+                fmt.Println(err)\n+        }\n+}\n+"}, {"sha": "1459285b2fab841107071639c6bbf273041c38b7", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug388.go", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug388.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug388.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug388.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,39 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2231\n+\n+package main\n+import \"runtime\"\n+\n+func foo(runtime.UintType, i int) {  // ERROR \"cannot declare name runtime.UintType|named/anonymous mix\"\n+\tprintln(i, runtime.UintType) \n+}\n+\n+func bar(i int) {\n+\truntime.UintType := i       // ERROR \"cannot declare name runtime.UintType|non-name on left side\"\n+\tprintln(runtime.UintType)\t// GCCGO_ERROR \"invalid use of type\"\n+}\n+\n+func baz() {\n+\tmain.i := 1\t// ERROR \"non-name main.i|non-name on left side\"\n+\tprintln(main.i)\t// GCCGO_ERROR \"no fields or methods\"\n+}\n+\n+func qux() {\n+\tvar main.i\t// ERROR \"unexpected [.]|expected type\"\n+\tprintln(main.i)\n+}\n+\n+func corge() {\n+\tvar foo.i int  // ERROR \"unexpected [.]|expected type\"\n+\tprintln(foo.i)\n+}\n+\n+func main() {\n+\tfoo(42,43)\n+\tbar(1969)\n+}"}, {"sha": "ecbbbdd585e8fe4c04ac34e1f127ab3014b38d9d", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug389.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug389.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug389.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug389.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,12 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2563\n+package foo\n+\n+func fn(a float32) {}\n+\n+var f func(arg int) = fn  // ERROR \"cannot use fn .type func.float32.. as type func.int. in assignment|different parameter types\""}, {"sha": "31c4dd40babb829eef8dc13350c5c535c00451ef", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug390.go", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug390.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug390.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug390.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,16 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2627 -- unsafe.Pointer type isn't handled nicely in some errors\n+\n+package main\n+\n+import \"unsafe\"\n+\n+func main() {\n+\tvar x *int\n+\t_ = unsafe.Pointer(x) - unsafe.Pointer(x) // ERROR \"operator - not defined on unsafe.Pointer|expected integer, floating, or complex type\"\n+}"}, {"sha": "81507188b23439a8fed28eab37bf9b1f7a575bc4", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug391.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug391.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug391.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug391.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,14 @@\n+// $G $D/$F.go || echo \"Issue2576\"\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2576\n+package bug\n+\n+type T struct { a int }\n+\n+func f(t T) {\n+        switch _, _ = t.a, t.a; {}\n+}\n\\ No newline at end of file"}, {"sha": "a7017255e5a1aa198236fcc2514c7c1e0849bbff", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug392.dir/one.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug392.dir%2Fone.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug392.dir%2Fone.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug392.dir%2Fone.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Functions that the inliner exported incorrectly.\n+\n+package one\n+\n+type T int\n+\n+// Issue 2678\n+func F1(T *T) bool { return T == nil }\n+\n+// Issue 2682.\n+func F2(c chan int) bool { return c == (<-chan int)(nil) }\n+\n+// Use of single named return value.\n+func F3() (ret []int) { return append(ret, 1) }\n+\n+// Call of inlined method with blank receiver.\n+func (_ *T) M() int { return 1 }\n+func (t *T) MM() int { return t.M() }"}, {"sha": "b0ce26d39abadef65dfcadbb00e5e4990747c070", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug392.dir/two.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug392.dir%2Ftwo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug392.dir%2Ftwo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug392.dir%2Ftwo.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Use the functions in one.go so that the inlined\n+// forms get type-checked.\n+\n+package two\n+\n+import \"./one\"\n+\n+func use() {\n+\tone.F1(nil)\n+\tone.F2(nil)\n+\tone.F3()\n+\n+\tvar t *one.T\n+\tt.M()\n+\tt.MM()\n+}"}, {"sha": "50af6006fbe698c60458fbbcf1a8c53ff68acafd", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug392.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug392.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug392.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug392.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,7 @@\n+// $G $D/$F.dir/one.go && $G $D/$F.dir/two.go\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "e21b9c4a416dbbc9d0aa6f7ea4ee2be76730f31d", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug393.go", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug393.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug393.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug393.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,30 @@\n+// $G $D/$F.go || echo BUG: bug393\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// issue 2672\n+// was trying binary search with an interface type\n+\n+package main\n+\n+func f(x interface{}) int {\n+\tswitch x {\n+\tcase 1:\n+\t\treturn 1\n+\tcase 2:\n+\t\treturn 2\n+\tcase 3:\n+\t\treturn 3\n+\tcase 4:\n+\t\treturn 4\n+\tcase \"5\":\n+\t\treturn 5\n+\tcase \"6\":\n+\t\treturn 6\n+\tdefault:\n+\t\treturn 7\n+\t}\n+\tpanic(\"switch\")\n+}"}, {"sha": "42c20e7a9188c797922389d47ef38e178489e15e", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug394.go", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug394.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug394.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug394.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,10 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Issue 2598\n+package foo\n+\n+return nil // ERROR \"non-declaration statement outside function body|expected declaration\""}, {"sha": "7902a07d535057966a1f9c558678666bc9b9396d", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug396.dir/one.go", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug396.dir%2Fone.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug396.dir%2Fone.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug396.dir%2Fone.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,9 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package one\n+\n+type T struct { int }\n+\n+func New(i int) T { return T{i} }"}, {"sha": "9b32508fd4f640a8a874b38021f3100820e89fe8", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug396.dir/two.go", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug396.dir%2Ftwo.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug396.dir%2Ftwo.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug396.dir%2Ftwo.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Use the functions in one.go so that the inlined\n+// forms get type-checked.\n+\n+package two\n+\n+import \"./one\"\n+\n+func use() {\n+\t_ = one.New(1)\n+}\n\\ No newline at end of file"}, {"sha": "50af6006fbe698c60458fbbcf1a8c53ff68acafd", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug396.go", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug396.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug396.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug396.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,7 @@\n+// $G $D/$F.dir/one.go && $G $D/$F.dir/two.go\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package ignored"}, {"sha": "03957013023af0051c2962c0ba0a8452fded3d26", "filename": "gcc/testsuite/go.test/test/fixedbugs/bug397.go", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug397.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug397.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ffixedbugs%2Fbug397.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,13 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+// Issue 2623\n+var m = map[string]int {\n+\t\"abc\":1,\n+\t1:2, // ERROR \"cannot use 1.*as type string in map key|incompatible type\"\n+}"}, {"sha": "e0b4cf6e2a791e8350e6dd70624835df6810bab2", "filename": "gcc/testsuite/go.test/test/golden.out", "status": "modified", "additions": 5, "deletions": 152, "changes": 157, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgolden.out?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,166 +1,19 @@\n \n == ./\n \n-=========== ./cmp2.go\n-panic: runtime error: comparing uncomparable type []int\n-\n-\n-=========== ./cmp3.go\n-panic: runtime error: comparing uncomparable type []int\n-\n-\n-=========== ./cmp4.go\n-panic: runtime error: hash of unhashable type []int\n-\n-\n-=========== ./cmp5.go\n-panic: runtime error: hash of unhashable type []int\n-\n-\n-=========== ./deferprint.go\n-printing: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n-42 true false true +1.500000e+000 world 0x0 [0/0]0x0 0x0 0x0 255\n-\n-=========== ./goprint.go\n-42 true false true +1.500000e+000 world 0x0 [0/0]0x0 0x0 0x0 255\n-\n-=========== ./helloworld.go\n-hello, world\n-\n-=========== ./peano.go\n-0! = 1\n-1! = 1\n-2! = 2\n-3! = 6\n-4! = 24\n-5! = 120\n-6! = 720\n-7! = 5040\n-8! = 40320\n-9! = 362880\n-\n-=========== ./printbig.go\n--9223372036854775808\n-9223372036854775807\n-\n-=========== ./sigchld.go\n-survived SIGCHLD\n-\n-=========== ./sinit.go\n-FAIL\n-\n-=========== ./turing.go\n-Hello World!\n-\n == ken/\n \n-=========== ken/cplx0.go\n-(+5.000000e+000+6.000000e+000i)\n-(+5.000000e+000+6.000000e+000i)\n-(+5.000000e+000+6.000000e+000i)\n-(+5.000000e+000+6.000000e+000i)\n-\n-=========== ken/cplx3.go\n-(+1.292308e+000-1.384615e-001i)\n-(+1.292308e+000-1.384615e-001i)\n-\n-=========== ken/cplx4.go\n-c = (-5.000000-6.000000i)\n-c = (5.000000+6.000000i)\n-c = (5.000000+6.000000i)\n-c = (5.000000+6.000000i)\n-c = (5+6i)\n-c = (13+7i)\n-\n-=========== ken/cplx5.go\n-(+5.000000e+000-5.000000e+000i)\n-(+5.000000e+000-5.000000e+000i)\n-(+5.000000e+000-5.000000e+000i)\n-(+5.000000e+000-5.000000e+000i)\n-(+5.000000e+000-5.000000e+000i)\n-(+5.000000e+000-5.000000e+000i)\n-(+5.000000e+000-5.000000e+000i)\n-\n-=========== ken/intervar.go\n- print 1 bio 2 file 3 -- abc\n-\n-=========== ken/label.go\n-100\n-\n-=========== ken/rob1.go\n-9876543210\n-\n-=========== ken/rob2.go\n-(defn foo (add 12 34))\n-\n-=========== ken/simpprint.go\n-hello world\n-\n-=========== ken/simpswitch.go\n-0out01out12out2aout34out4fiveout56out6aout78out89out9\n-\n-=========== ken/string.go\n-abcxyz-abcxyz-abcxyz-abcxyz-abcxyz-abcxyz-abcxyz\n-\n == chan/\n \n-=========== chan/doubleselect.go\n-PASS\n-\n-=========== chan/nonblock.go\n-PASS\n-\n == interface/\n \n-=========== interface/fail.go\n-panic: interface conversion: *main.S is not main.I: missing method Foo\n-\n-\n-=========== interface/returntype.go\n-panic: interface conversion: *main.S is not main.I2: missing method Name\n-\n-\n-== nilptr/\n-\n == syntax/\n \n-== fixedbugs/\n-\n-=========== fixedbugs/bug027.go\n-hi\n-0 44444\n-1 3333\n-2 222\n-3 11\n-4 0\n-0 44444\n-1 3333\n-2 222\n-3 11\n-4 0\n-\n-=========== fixedbugs/bug067.go\n-ok\n-\n-=========== fixedbugs/bug070.go\n-outer loop top k 0\n-inner loop top i 0\n-do break\n-broke\n-\n-=========== fixedbugs/bug093.go\n-M\n-\n-=========== fixedbugs/bug113.go\n-panic: interface conversion: interface is int, not int32\n+== dwarf/\n \n-\n-=========== fixedbugs/bug148.go\n-2 3\n-panic: interface conversion: interface is main.T, not main.T\n-\n-\n-=========== fixedbugs/bug328.go\n-0x0\n+== fixedbugs/\n \n == bugs/\n+\n+=========== bugs/bug395.go\n+bug395 is broken"}, {"sha": "53ed055a070abc94f8d386ba0201a5e5d1c4227d", "filename": "gcc/testsuite/go.test/test/goprint.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoprint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoprint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoprint.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,4 @@\n-// $G $D/$F.go && $L $F.$A && ./$A.out\n+// $G $D/$F.go && $L $F.$A && ./$A.out 2>&1 | cmp - $D/$F.out\n \n // Copyright 2011 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style"}, {"sha": "da3919ed64f50a8db50657eb11ebd7629fe26758", "filename": "gcc/testsuite/go.test/test/goprint.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoprint.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoprint.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fgoprint.out?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1 @@\n+42 true false true +1.500000e+000 world 0x0 [0/0]0x0 0x0 0x0 255"}, {"sha": "16c95f00686e6669f609946a073d0cd6c621d637", "filename": "gcc/testsuite/go.test/test/helloworld.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fhelloworld.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fhelloworld.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fhelloworld.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,4 @@\n-// $G $F.go && $L $F.$A && ./$A.out\n+// $G $F.go && $L $F.$A && ./$A.out 2>&1 | cmp - $D/$F.out\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style"}, {"sha": "4b5fa63702dd96796042e92787f464e28f09f17d", "filename": "gcc/testsuite/go.test/test/helloworld.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fhelloworld.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fhelloworld.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fhelloworld.out?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1 @@\n+hello, world"}, {"sha": "9ce3c12ee68f9267f4d4be3709a7fc314d7ee4ed", "filename": "gcc/testsuite/go.test/test/init1.go", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finit1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finit1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finit1.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,44 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test that goroutines and garbage collection run during init.\n+\n+package main\n+\n+import \"runtime\"\n+\n+var x []byte\n+\n+func init() {\n+\tc := make(chan int)\n+\tgo send(c)\n+\t<-c\n+\t\n+\tconst chunk = 1<<20\n+\truntime.UpdateMemStats()\n+\tsys := runtime.MemStats.Sys\t\n+\tb := make([]byte, chunk)\n+\tfor i := range b {\n+\t\tb[i] = byte(i%10 + '0')\n+\t}\n+\ts := string(b)\n+\tfor i := 0; i < 1000; i++ {\n+\t\tx = []byte(s)\n+\t}\n+\truntime.UpdateMemStats()\n+\tsys1 := runtime.MemStats.Sys\n+\tif sys1-sys > chunk*50 {\n+\t\tprintln(\"allocated 1000 chunks of\", chunk, \"and used \", sys1-sys, \"memory\")\n+\t}\n+}\n+\n+func send(c chan int) {\n+\tc <- 1\n+}\n+\n+func main() {\n+}\n+"}, {"sha": "0c20bcf756a4275b505eb5ab07edf5ba961f9d63", "filename": "gcc/testsuite/go.test/test/interface/fail.go", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Ffail.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Ffail.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Ffail.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,4 @@\n-// $G $D/$F.go && $L $F.$A && ! ./$A.out\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -13,6 +13,10 @@ type I interface {\n }\n \n func main() {\n+\tshouldPanic(p1)\n+}\n+\n+func p1() {\n \tvar s *S\n \tvar i I\n \tvar e interface {}\n@@ -21,6 +25,14 @@ func main() {\n \t_ = i\n }\n \n-// hide S down here to avoid static warning\n type S struct {\n }\n+\n+func shouldPanic(f func()) {\n+\tdefer func() {\n+\t\tif recover() == nil {\n+\t\t\tpanic(\"function should panic\")\n+\t\t}\n+\t}()\n+\tf()\n+}"}, {"sha": "3c2ea5975a14286c334c66d5968384eeaa3ca00a", "filename": "gcc/testsuite/go.test/test/interface/noeq.go", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fnoeq.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fnoeq.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Fnoeq.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,39 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out || echo BUG: interface/noeq\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Interface values containing types that cannot be compared for equality.\n+\n+package main\n+\n+func main() {\n+\tcmp(1)\n+\n+\tvar (\n+\t\tm map[int]int\n+\t\ts struct{ x []int }\n+\t\tf func()\n+\t)\n+\tnoCmp(m)\n+\tnoCmp(s)\n+\tnoCmp(f)\n+}\n+\n+func cmp(x interface{}) bool {\n+\treturn x == x\n+}\n+\n+func noCmp(x interface{}) {\n+\tshouldPanic(func() { cmp(x) })\n+}\n+\n+func shouldPanic(f func()) {\n+\tdefer func() {\n+\t\tif recover() == nil {\n+\t\t\tpanic(\"function should panic\")\n+\t\t}\n+\t}()\n+\tf()\n+}"}, {"sha": "2c93a28363aa89b86980025123c1fa86ce719ae8", "filename": "gcc/testsuite/go.test/test/interface/recursive1.go", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive1.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,15 @@\n+// true  # used by recursive2\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package p\n+\n+type I1 interface {\n+\tF() I2\n+}\n+\n+type I2 interface {\n+\tI1\n+}"}, {"sha": "a7f9ab5dbd98e71b2deacdb6b12889d736c9b764", "filename": "gcc/testsuite/go.test/test/interface/recursive2.go", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Frecursive2.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,22 @@\n+// $G $D/recursive1.go && $G $D/$F.go\n+\n+// Copyright 2012 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check that the mutually recursive types in recursive1.go made it\n+// intact and with the same meaning, by assigning to or using them.\n+\n+package main\n+\n+import \"./recursive1\"\n+\n+func main() {\n+\tvar i1 p.I1\n+\tvar i2 p.I2\n+\ti1 = i2\n+\ti2 = i1\n+\ti1 = i2.F()\n+\ti2 = i1.F()\n+\t_, _ = i1, i2\n+}"}, {"sha": "5cf083617813495b1da44ac203044620d2551742", "filename": "gcc/testsuite/go.test/test/interface/returntype.go", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Freturntype.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Freturntype.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Finterface%2Freturntype.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,4 @@\n-// $G $D/$F.go && $L $F.$A && (! ./$A.out || echo BUG: should not succeed)\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -18,8 +18,21 @@ type I1 interface { Name() int8 }\n type I2 interface { Name() int64 }\n \n func main() {\n+\tshouldPanic(p1)\n+}\n+\n+func p1() {\n \tvar i1 I1\n \tvar s *S\n \ti1 = s\n \tprint(i1.(I2).Name())\n }\n+\n+func shouldPanic(f func()) {\n+\tdefer func() {\n+\t\tif recover() == nil {\n+\t\t\tpanic(\"function should panic\")\n+\t\t}\n+\t}()\n+\tf()\n+}"}, {"sha": "f38ce5b65d11007b3ba071ec8365bbbe427ca381", "filename": "gcc/testsuite/go.test/test/ken/cplx0.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx0.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx0.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx0.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,4 @@\n-// $G $D/$F.go && $L $F.$A && ./$A.out\n+// $G $D/$F.go && $L $F.$A && ./$A.out 2>&1 | cmp - $D/$F.out\n \n // Copyright 2010 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style"}, {"sha": "7627c28df7a64b9cc58ff0ed6c3a8ae369bc506a", "filename": "gcc/testsuite/go.test/test/ken/cplx0.out", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx0.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx0.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx0.out?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,4 @@\n+(+5.000000e+000+6.000000e+000i)\n+(+5.000000e+000+6.000000e+000i)\n+(+5.000000e+000+6.000000e+000i)\n+(+5.000000e+000+6.000000e+000i)"}, {"sha": "89f4a04181e44926d5cbecf9a448072ee34d5fe5", "filename": "gcc/testsuite/go.test/test/ken/cplx2.go", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx2.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -105,4 +105,16 @@ func main() {\n \t\tprintln(\"opcode x\", ce, Ce)\n \t\tpanic(\"fail\")\n \t}\n+\t\n+\tr32 := real(complex64(ce))\n+\tif r32 != float32(real(Ce)) {\n+\t\tprintln(\"real(complex64(ce))\", r32, real(Ce))\n+\t\tpanic(\"fail\")\n+\t}\n+\t\n+\tr64 := real(complex128(ce))\n+\tif r64 != real(Ce) {\n+\t\tprintln(\"real(complex128(ce))\", r64, real(Ce))\n+\t\tpanic(\"fail\")\n+\t}\n }"}, {"sha": "048c93eef67fb5a24fa42e626294fc39a29fd62a", "filename": "gcc/testsuite/go.test/test/ken/cplx3.go", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx3.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -19,10 +19,29 @@ const (\n func main() {\n \tc0 := C1\n \tc0 = (c0 + c0 + c0) / (c0 + c0 + 3i)\n-\tprintln(c0)\n+\tr, i := real(c0), imag(c0)\n+\td := r - 1.292308\n+\tif d < 0 {\n+\t\td = - d\n+\t}\n+\tif d > 1e-6 {\n+\t\tprintln(r, \"!= 1.292308\")\n+\t\tpanic(0)\n+\t}\n+\td = i + 0.1384615\n+\tif d < 0 {\n+\t\td = - d\n+\t}\n+\tif d > 1e-6 {\n+\t\tprintln(i, \"!= -0.1384615\")\n+\t\tpanic(0)\n+\t}\n \n \tc := *(*complex128)(unsafe.Pointer(&c0))\n-\tprintln(c)\n+\tif c != c0 {\n+\t\tprintln(c, \"!=\", c)\n+\t\tpanic(0)\n+\t}\n \n \tvar a interface{}\n \tswitch c := reflect.ValueOf(a); c.Kind() {"}, {"sha": "738afcd2cad3df54fca8f4391fbc5b6551f5c02e", "filename": "gcc/testsuite/go.test/test/ken/cplx4.go", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx4.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -15,30 +15,44 @@ const (\n \tC1 = R + I // ADD(5,6)\n )\n \n-func doprint(c complex128) { fmt.Printf(\"c = %f\\n\", c) }\n+func want(s, w string) {\n+\tif s != w {\n+\t\tpanic(s + \" != \" + w)\n+\t}\n+}\n+\n+func doprint(c complex128, w string) {\n+\ts := fmt.Sprintf(\"%f\", c)\n+\twant(s, w)\n+}\n \n func main() {\n \n \t// constants\n-\tfmt.Printf(\"c = %f\\n\", -C1)\n-\tdoprint(C1)\n+\ts := fmt.Sprintf(\"%f\", -C1)\n+\twant(s, \"(-5.000000-6.000000i)\")\n+\tdoprint(C1, \"(5.000000+6.000000i)\")\n \n \t// variables\n \tc1 := C1\n-\tfmt.Printf(\"c = %f\\n\", c1)\n-\tdoprint(c1)\n+\ts = fmt.Sprintf(\"%f\", c1)\n+\twant(s, \"(5.000000+6.000000i)\")\n+\tdoprint(c1, \"(5.000000+6.000000i)\")\n \n \t// 128\n \tc2 := complex128(C1)\n-\tfmt.Printf(\"c = %G\\n\", c2)\n+\ts = fmt.Sprintf(\"%G\", c2)\n+\twant(s, \"(5+6i)\")\n \n \t// real, imag, complex\n \tc3 := complex(real(c2)+3, imag(c2)-5) + c2\n-\tfmt.Printf(\"c = %G\\n\", c3)\n+\ts = fmt.Sprintf(\"%G\", c3)\n+\twant(s, \"(13+7i)\")\n \n \t// compiler used to crash on nested divide\n \tc4 := complex(real(c3/2), imag(c3/2))\n \tif c4 != c3/2 {\n \t\tfmt.Printf(\"BUG: c3 = %G != c4 = %G\\n\", c3, c4)\n+\t\tpanic(0)\n \t}\n }"}, {"sha": "e6696674b0a5670185501128d63367a4f8d4154e", "filename": "gcc/testsuite/go.test/test/ken/cplx5.go", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx5.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx5.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fcplx5.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -19,36 +19,52 @@ func main() {\n \tfor i := 0; i < len(a); i++ {\n \t\ta[i] = complex(float64(i), float64(-i))\n \t}\n-\tprintln(a[5])\n+\tif a[5] != 5-5i {\n+\t\tpanic(a[5])\n+\t}\n \n \t// slice of complex128\n \ts = make([]complex128, len(a))\n \tfor i := 0; i < len(s); i++ {\n \t\ts[i] = a[i]\n \t}\n-\tprintln(s[5])\n+\tif s[5] != 5-5i {\n+\t\tpanic(s[5])\n+\t}\n \n \t// chan\n \tc = make(chan complex128)\n \tgo chantest(c)\n-\tprintln(<-c)\n+\tvc := <-c\n+\tif vc != 5-5i {\n+\t\tpanic(vc)\n+\t}\n \n \t// pointer of complex128\n \tv := a[5]\n \tpv := &v\n-\tprintln(*pv)\n+\tif *pv != 5-5i {\n+\t\tpanic(*pv)\n+\t}\n \n \t// field of complex128\n \tf.c = a[5]\n-\tprintln(f.c)\n+\tif f.c != 5-5i {\n+\t\tpanic(f.c)\n+\t}\n \n \t// map of complex128\n \tm = make(map[complex128]complex128)\n \tfor i := 0; i < len(s); i++ {\n \t\tm[-a[i]] = a[i]\n \t}\n-\tprintln(m[5i-5])\n-\tprintln(m[complex(-5, 5)])\n+\tif m[5i-5] != 5-5i {\n+\t\tpanic(m[5i-5])\n+\t}\n+\tvm := m[complex(-5, 5)]\n+\tif vm != 5-5i {\n+\t\tpanic(vm)\n+\t}\n }\n \n func chantest(c chan complex128) { c <- a[5] }"}, {"sha": "73d1b0660bd7666e610c3c1ef61c1bce21afc271", "filename": "gcc/testsuite/go.test/test/ken/intervar.go", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fintervar.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fintervar.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fintervar.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -7,7 +7,7 @@\n package main\n \n type\tIputs\tinterface {\n-\tputs\t(s string);\n+\tputs\t(s string) string;\n }\n \n // ---------\n@@ -17,9 +17,9 @@ type\tPrint\tstruct {\n \tput\tIputs;\n }\n \n-func (p *Print) dop() {\n-\tprint(\" print \", p.whoami);\n-\tp.put.puts(\"abc\");\n+func (p *Print) dop() string {\n+\tr := \" print \" + string(p.whoami + '0')\n+\treturn r + p.put.puts(\"abc\");\n }\n \n // ---------\n@@ -29,9 +29,9 @@ type\tBio\tstruct {\n \tput\tIputs;\n }\n \n-func (b *Bio) puts(s string) {\n-\tprint(\" bio \", b.whoami);\n-\tb.put.puts(s);\n+func (b *Bio) puts(s string) string {\n+\tr := \" bio \" + string(b.whoami + '0')\n+\treturn r + b.put.puts(s);\n }\n \n // ---------\n@@ -41,8 +41,8 @@ type\tFile\tstruct {\n \tput\tIputs;\n }\n \n-func (f *File) puts(s string) {\n-\tprint(\" file \", f.whoami, \" -- \", s);\n+func (f *File) puts(s string) string {\n+\treturn \" file \" + string(f.whoami + '0') + \" -- \" + s\n }\n \n func\n@@ -59,6 +59,9 @@ main() {\n \n \tf.whoami = 3;\n \n-\tp.dop();\n-\tprint(\"\\n\");\n+\tr := p.dop();\n+\texpected := \" print 1 bio 2 file 3 -- abc\"\n+\tif r != expected {\n+\t\tpanic(r + \" != \" + expected)\n+\t}\n }"}, {"sha": "7a509f0484a92630c47dc174dda79f0a121be0b7", "filename": "gcc/testsuite/go.test/test/ken/label.go", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Flabel.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Flabel.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Flabel.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -4,33 +4,29 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-\n package main\n \n-func\n-main() {\n-\ti := 0;\n+func main() {\n+\ti := 0\n \tif false {\n-\t\tgoto gogoloop;\n+\t\tgoto gogoloop\n \t}\n \tif false {\n-\t\tgoto gogoloop;\n+\t\tgoto gogoloop\n \t}\n \tif false {\n-\t\tgoto gogoloop;\n+\t\tgoto gogoloop\n \t}\n-\tgoto gogoloop;\n+\tgoto gogoloop\n \n-// backward declared\n+\t// backward declared\n loop:\n-\ti = i+1;\n+\ti = i + 1\n \tif i < 100 {\n-\t\tgoto loop;\n+\t\tgoto loop\n \t}\n-\tprint(i);\n-\tprint(\"\\n\");\n-\treturn;\n+\treturn\n \n gogoloop:\n-\tgoto loop;\n+\tgoto loop\n }"}, {"sha": "a5854b93e2f3627e2f22c62f8fb80268671a5e0a", "filename": "gcc/testsuite/go.test/test/ken/rob1.go", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Frob1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Frob1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Frob1.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -7,61 +7,64 @@\n package main\n \n type Item interface {\n-\tPrint();\n+\tPrint() string\n }\n \n type ListItem struct {\n-\titem    Item;\n-\tnext    *ListItem;\n+\titem Item\n+\tnext *ListItem\n }\n \n type List struct {\n-\thead    *ListItem;\n+\thead *ListItem\n }\n \n func (list *List) Init() {\n-\tlist.head = nil;\n+\tlist.head = nil\n }\n \n func (list *List) Insert(i Item) {\n-\titem := new(ListItem);\n-\titem.item = i;\n-\titem.next = list.head;\n-\tlist.head = item;\n+\titem := new(ListItem)\n+\titem.item = i\n+\titem.next = list.head\n+\tlist.head = item\n }\n \n-func (list *List) Print() {\n-\ti := list.head;\n+func (list *List) Print() string {\n+\tr := \"\"\n+\ti := list.head\n \tfor i != nil {\n-\t\ti.item.Print();\n-\t\ti = i.next;\n+\t\tr += i.item.Print()\n+\t\ti = i.next\n \t}\n+\treturn r\n }\n \n // Something to put in a list\n type Integer struct {\n-\tval\t\tint;\n+\tval int\n }\n \n func (this *Integer) Init(i int) *Integer {\n-\tthis.val = i;\n-\treturn this;\n+\tthis.val = i\n+\treturn this\n }\n \n-func (this *Integer) Print() {\n-\tprint(this.val);\n+func (this *Integer) Print() string {\n+\treturn string(this.val + '0')\n }\n \n-func\n-main() {\n-\tlist := new(List);\n-\tlist.Init();\n+func main() {\n+\tlist := new(List)\n+\tlist.Init()\n \tfor i := 0; i < 10; i = i + 1 {\n-\t\tinteger := new(Integer);\n-\t\tinteger.Init(i);\n-\t\tlist.Insert(integer);\n+\t\tinteger := new(Integer)\n+\t\tinteger.Init(i)\n+\t\tlist.Insert(integer)\n \t}\n \n-\tlist.Print();\n-\tprint(\"\\n\");\n+\tr := list.Print()\n+\tif r != \"9876543210\" {\n+\t\tpanic(r)\n+\t}\n }"}, {"sha": "d13e2441d401488add0f6aad2775a7cb8ca9c981", "filename": "gcc/testsuite/go.test/test/ken/rob2.go", "status": "modified", "additions": 133, "deletions": 128, "changes": 261, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Frob2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Frob2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Frob2.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -4,269 +4,274 @@\n // Use of this source code is governed by a BSD-style\n // license that can be found in the LICENSE file.\n \n-\n package main\n \n-const nilchar = 0;\n+import \"fmt\"\n+\n+const nilchar = 0\n \n type Atom struct {\n-\tstr\t\tstring;\n-\tinteger\t\tint;\n-\tnext\t\t*Slist;\t/* in hash bucket */\n+\tstr     string\n+\tinteger int\n+\tnext    *Slist /* in hash bucket */\n }\n \n type List struct {\n-\tcar\t\t*Slist;\n-\tcdr*Slist;\n+\tcar *Slist\n+\tcdr *Slist\n }\n \n type Slist struct {\n-\tisatom\t\tbool;\n-\tisstring\tbool;\n+\tisatom   bool\n+\tisstring bool\n \t//union {\n-\tatom\t\tAtom;\n-\tlist\t\tList;\n+\tatom Atom\n+\tlist List\n \t//} u;\n \n }\n \n func (this *Slist) Car() *Slist {\n-\treturn this.list.car;\n+\treturn this.list.car\n }\n \n func (this *Slist) Cdr() *Slist {\n-\treturn this.list.cdr;\n+\treturn this.list.cdr\n }\n \n func (this *Slist) String() string {\n-\treturn this.atom.str;\n+\treturn this.atom.str\n }\n \n func (this *Slist) Integer() int {\n-\treturn this.atom.integer;\n+\treturn this.atom.integer\n }\n \n func (slist *Slist) Free() {\n \tif slist == nil {\n-\t\treturn;\n+\t\treturn\n \t}\n \tif slist.isatom {\n-//\t\tfree(slist.String());\n+\t\t//\t\tfree(slist.String());\n \t} else {\n-\t\tslist.Car().Free();\n-\t\tslist.Cdr().Free();\n+\t\tslist.Car().Free()\n+\t\tslist.Cdr().Free()\n \t}\n-//\tfree(slist);\n+\t//\tfree(slist);\n }\n \n //Slist* atom(byte *s, int i);\n \n-var token int;\n-var peekc int = -1;\n-var lineno int32 = 1;\n+var token int\n+var peekc int = -1\n+var lineno int32 = 1\n \n-var input string;\n-var inputindex int = 0;\n-var tokenbuf [100]byte;\n-var tokenlen int = 0;\n+var input string\n+var inputindex int = 0\n+var tokenbuf [100]byte\n+var tokenlen int = 0\n \n-const EOF int = -1;\n+const EOF int = -1\n \n func main() {\n-\tvar list *Slist;\n+\tvar list *Slist\n \n-\tOpenFile();\n-\tfor ;; {\n-\t\tlist = Parse();\n+\tOpenFile()\n+\tfor {\n+\t\tlist = Parse()\n \t\tif list == nil {\n-\t\t\tbreak;\n+\t\t\tbreak\n+\t\t}\n+\t\tr := list.Print()\n+\t\tlist.Free()\n+\t\tif r != \"(defn foo (add 12 34))\" {\n+\t\t\tpanic(r)\n \t\t}\n-\t\tlist.Print();\n-\t\tlist.Free();\n-\t\tbreak;\n+\t\tbreak\n \t}\n }\n \n-func (slist *Slist) PrintOne(doparen bool) {\n+func (slist *Slist) PrintOne(doparen bool) string {\n \tif slist == nil {\n-\t\treturn;\n+\t\treturn \"\"\n \t}\n+\tvar r string\n \tif slist.isatom {\n \t\tif slist.isstring {\n-\t\t\tprint(slist.String());\n+\t\t\tr = slist.String()\n \t\t} else {\n-\t\t\tprint(slist.Integer());\n+\t\t\tr = fmt.Sprintf(\"%v\", slist.Integer())\n \t\t}\n \t} else {\n \t\tif doparen {\n-\t\t\tprint(\"(\" );\n+\t\t\tr += \"(\"\n \t\t}\n-\t\tslist.Car().PrintOne(true);\n+\t\tr += slist.Car().PrintOne(true)\n \t\tif slist.Cdr() != nil {\n-\t\t\tprint(\" \");\n-\t\t\tslist.Cdr().PrintOne(false);\n+\t\t\tr += \" \"\n+\t\t\tr += slist.Cdr().PrintOne(false)\n \t\t}\n \t\tif doparen {\n-\t\t\tprint(\")\");\n+\t\t\tr += \")\"\n \t\t}\n \t}\n+\treturn r\n }\n \n-func (slist *Slist) Print() {\n-\tslist.PrintOne(true);\n-\tprint(\"\\n\");\n+func (slist *Slist) Print() string {\n+\treturn slist.PrintOne(true)\n }\n \n func Get() int {\n-\tvar c int;\n+\tvar c int\n \n \tif peekc >= 0 {\n-\t\tc = peekc;\n-\t\tpeekc = -1;\n+\t\tc = peekc\n+\t\tpeekc = -1\n \t} else {\n-\t\tc = int(input[inputindex]);\n-\t\tinputindex++;\n+\t\tc = int(input[inputindex])\n+\t\tinputindex++\n \t\tif c == '\\n' {\n-\t\t\tlineno = lineno + 1;\n+\t\t\tlineno = lineno + 1\n \t\t}\n \t\tif c == nilchar {\n-\t\t\tinputindex = inputindex - 1;\n-\t\t\tc = EOF;\n+\t\t\tinputindex = inputindex - 1\n+\t\t\tc = EOF\n \t\t}\n \t}\n-\treturn c;\n+\treturn c\n }\n \n func WhiteSpace(c int) bool {\n-\treturn c == ' ' || c == '\\t' || c == '\\r' || c == '\\n';\n+\treturn c == ' ' || c == '\\t' || c == '\\r' || c == '\\n'\n }\n \n func NextToken() {\n-\tvar i, c int;\n+\tvar i, c int\n \n-\ttokenbuf[0] = nilchar;\t// clear previous token\n-\tc = Get();\n+\ttokenbuf[0] = nilchar // clear previous token\n+\tc = Get()\n \tfor WhiteSpace(c) {\n-\t\tc = Get();\n+\t\tc = Get()\n \t}\n \tswitch c {\n \tcase EOF:\n-\t\ttoken = EOF;\n+\t\ttoken = EOF\n \tcase '(', ')':\n-\t\ttoken = c;\n-\t\tbreak;\n+\t\ttoken = c\n+\t\tbreak\n \tdefault:\n-\t\tfor i = 0; i < 100 - 1; {\t// sizeof tokenbuf - 1\n-\t\t\ttokenbuf[i] = byte(c);\n-\t\t\ti = i + 1;\n-\t\t\tc = Get();\n+\t\tfor i = 0; i < 100-1; { // sizeof tokenbuf - 1\n+\t\t\ttokenbuf[i] = byte(c)\n+\t\t\ti = i + 1\n+\t\t\tc = Get()\n \t\t\tif c == EOF {\n-\t\t\t\tbreak;\n+\t\t\t\tbreak\n \t\t\t}\n \t\t\tif WhiteSpace(c) || c == ')' {\n-\t\t\t\tpeekc = c;\n-\t\t\t\tbreak;\n+\t\t\t\tpeekc = c\n+\t\t\t\tbreak\n \t\t\t}\n \t\t}\n-\t\tif i >= 100 - 1 {\t// sizeof tokenbuf - 1\n-\t\t\tpanic(\"atom too long\\n\");\n+\t\tif i >= 100-1 { // sizeof tokenbuf - 1\n+\t\t\tpanic(\"atom too long\\n\")\n \t\t}\n-\t\ttokenlen = i;\n-\t\ttokenbuf[i] = nilchar;\n+\t\ttokenlen = i\n+\t\ttokenbuf[i] = nilchar\n \t\tif '0' <= tokenbuf[0] && tokenbuf[0] <= '9' {\n-\t\t\ttoken = '0';\n+\t\t\ttoken = '0'\n \t\t} else {\n-\t\t\ttoken = 'A';\n+\t\t\ttoken = 'A'\n \t\t}\n \t}\n }\n \n func Expect(c int) {\n \tif token != c {\n-\t\tprint(\"parse error: expected \", c, \"\\n\");\n-\t\tpanic(\"parse\");\n+\t\tprint(\"parse error: expected \", c, \"\\n\")\n+\t\tpanic(\"parse\")\n \t}\n-\tNextToken();\n+\tNextToken()\n }\n \n // Parse a non-parenthesized list up to a closing paren or EOF\n func ParseList() *Slist {\n-\tvar slist, retval *Slist;\n-\n-\tslist = new(Slist);\n-\tslist.list.car = nil;\n-\tslist.list.cdr = nil;\n-\tslist.isatom = false;\n-\tslist.isstring = false;\n-\n-\tretval = slist;\n-\tfor ;; {\n-\t\tslist.list.car = Parse();\n-\t\tif token == ')' || token == EOF {\t// empty cdr\n-\t\t\tbreak;\n+\tvar slist, retval *Slist\n+\n+\tslist = new(Slist)\n+\tslist.list.car = nil\n+\tslist.list.cdr = nil\n+\tslist.isatom = false\n+\tslist.isstring = false\n+\n+\tretval = slist\n+\tfor {\n+\t\tslist.list.car = Parse()\n+\t\tif token == ')' || token == EOF { // empty cdr\n+\t\t\tbreak\n \t\t}\n-\t\tslist.list.cdr = new(Slist);\n-\t\tslist = slist.list.cdr;\n+\t\tslist.list.cdr = new(Slist)\n+\t\tslist = slist.list.cdr\n \t}\n-\treturn retval;\n+\treturn retval\n }\n \n-func atom(i int) *Slist\t{ // BUG: uses tokenbuf; should take argument)\n-\tvar slist *Slist;\n+func atom(i int) *Slist { // BUG: uses tokenbuf; should take argument)\n+\tvar slist *Slist\n \n-\tslist = new(Slist);\n+\tslist = new(Slist)\n \tif token == '0' {\n-\t\tslist.atom.integer = i;\n-\t\tslist.isstring = false;\n+\t\tslist.atom.integer = i\n+\t\tslist.isstring = false\n \t} else {\n-\t\tslist.atom.str = string(tokenbuf[0:tokenlen]);\n-\t\tslist.isstring = true;\n+\t\tslist.atom.str = string(tokenbuf[0:tokenlen])\n+\t\tslist.isstring = true\n \t}\n-\tslist.isatom = true;\n-\treturn slist;\n+\tslist.isatom = true\n+\treturn slist\n }\n \n-func atoi() int\t{ // BUG: uses tokenbuf; should take argument)\n-\tvar v int = 0;\n+func atoi() int { // BUG: uses tokenbuf; should take argument)\n+\tvar v int = 0\n \tfor i := 0; i < tokenlen && '0' <= tokenbuf[i] && tokenbuf[i] <= '9'; i = i + 1 {\n-\t\tv = 10 * v + int(tokenbuf[i] - '0');\n+\t\tv = 10*v + int(tokenbuf[i]-'0')\n \t}\n-\treturn v;\n+\treturn v\n }\n \n func Parse() *Slist {\n-\tvar slist *Slist;\n+\tvar slist *Slist\n \n \tif token == EOF || token == ')' {\n-\t\treturn nil;\n+\t\treturn nil\n \t}\n \tif token == '(' {\n-\t\tNextToken();\n-\t\tslist = ParseList();\n-\t\tExpect(')');\n-\t\treturn slist;\n+\t\tNextToken()\n+\t\tslist = ParseList()\n+\t\tExpect(')')\n+\t\treturn slist\n \t} else {\n \t\t// Atom\n \t\tswitch token {\n \t\tcase EOF:\n-\t\t\treturn nil;\n+\t\t\treturn nil\n \t\tcase '0':\n-\t\t\tslist = atom(atoi());\n+\t\t\tslist = atom(atoi())\n \t\tcase '\"', 'A':\n-\t\t\tslist = atom(0);\n+\t\t\tslist = atom(0)\n \t\tdefault:\n-\t\t\tslist = nil;\n-\t\t\tprint(\"unknown token: \", token, \"\\n\");\n+\t\t\tslist = nil\n+\t\t\tprint(\"unknown token: \", token, \"\\n\")\n \t\t}\n-\t\tNextToken();\n-\t\treturn slist;\n+\t\tNextToken()\n+\t\treturn slist\n \t}\n-\treturn nil;\n+\treturn nil\n }\n \n func OpenFile() {\n-\tinput = \"(defn foo (add 12 34))\\n\\x00\";\n-\tinputindex = 0;\n-\tpeekc = -1;\t\t// BUG\n-\tNextToken();\n+\tinput = \"(defn foo (add 12 34))\\n\\x00\"\n+\tinputindex = 0\n+\tpeekc = -1 // BUG\n+\tNextToken()\n }"}, {"sha": "6077f7eb025aa32b83f140b35128604dd04c7ff9", "filename": "gcc/testsuite/go.test/test/ken/simpprint.go", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fsimpprint.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fsimpprint.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fsimpprint.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,13 +0,0 @@\n-// $G $D/$F.go && $L $F.$A && ./$A.out\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-\n-package main\n-\n-func\n-main() {\n-\tprint(\"hello world\\n\");\n-}"}, {"sha": "710af2e08c69b277e2f264f0829abe79075fa380", "filename": "gcc/testsuite/go.test/test/ken/simpswitch.go", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fsimpswitch.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fsimpswitch.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fsimpswitch.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -6,19 +6,21 @@\n \n package main\n \n-func\n-main() {\n-\ta := 3;\n-\tfor i:=0; i<10; i=i+1 {\n-\t\tswitch(i) {\n+func main() {\n+\tr := \"\"\n+\ta := 3\n+\tfor i := 0; i < 10; i = i + 1 {\n+\t\tswitch i {\n \t\tcase 5:\n-\t\t\tprint(\"five\");\n-\t\tcase a,7:\n-\t\t\tprint(\"a\");\n+\t\t\tr += \"five\"\n+\t\tcase a, 7:\n+\t\t\tr += \"a\"\n \t\tdefault:\n-\t\t\tprint(i);\n+\t\t\tr += string(i + '0')\n \t\t}\n-\t\tprint(\"out\", i);\n+\t\tr += \"out\" + string(i+'0')\n+\t}\n+\tif r != \"0out01out12out2aout34out4fiveout56out6aout78out89out9\" {\n+\t\tpanic(r)\n \t}\n-\tprint(\"\\n\");\n }"}, {"sha": "e0510824293221abb38fedf12961d5ac8e30c82a", "filename": "gcc/testsuite/go.test/test/ken/string.go", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fstring.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fstring.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fstring.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,4 @@\n-// $G $D/$F.go && $L $F.$A && ./$A.out\n+// $G $D/$F.go && $L $F.$A && ./$A.out 2>&1 | cmp - $D/$F.out\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -71,16 +71,14 @@ func main() {\n \t/* create string with integer constant */\n \tc = string('x')\n \tif c != \"x\" {\n-\t\tprint(\"create int \", c)\n-\t\tpanic(\"fail\")\n+\t\tpanic(\"create int \" + c)\n \t}\n \n \t/* create string with integer variable */\n \tv := 'x'\n \tc = string(v)\n \tif c != \"x\" {\n-\t\tprint(\"create int \", c)\n-\t\tpanic(\"fail\")\n+\t\tpanic(\"create int \" + c)\n \t}\n \n \t/* create string with byte array */\n@@ -90,8 +88,7 @@ func main() {\n \tz1[2] = 'c'\n \tc = string(z1[0:])\n \tif c != \"abc\" {\n-\t\tprint(\"create byte array \", c)\n-\t\tpanic(\"fail\")\n+\t\tpanic(\"create byte array \" + c)\n \t}\n \n \t/* create string with int array */\n@@ -101,8 +98,7 @@ func main() {\n \tz2[2] = 'c'\n \tc = string(z2[0:])\n \tif c != \"a\\u1234c\" {\n-\t\tprint(\"create int array \", c)\n-\t\tpanic(\"fail\")\n+\t\tpanic(\"create int array \" + c)\n \t}\n \n \t/* create string with byte array pointer */\n@@ -112,7 +108,6 @@ func main() {\n \tz3[2] = 'c'\n \tc = string(z3[0:])\n \tif c != \"abc\" {\n-\t\tprint(\"create array pointer \", c)\n-\t\tpanic(\"fail\")\n+\t\tpanic(\"create array pointer \" + c)\n \t}\n }"}, {"sha": "8bc36bc6f531e791c1d1ac67428def37ded2ef7e", "filename": "gcc/testsuite/go.test/test/ken/string.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fstring.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fstring.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fken%2Fstring.out?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1 @@\n+abcxyz-abcxyz-abcxyz-abcxyz-abcxyz-abcxyz-abcxyz"}, {"sha": "ff62392473d58bef51aefe3262aa54356c998aa0", "filename": "gcc/testsuite/go.test/test/mallocfin.go", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmallocfin.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmallocfin.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmallocfin.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -47,18 +47,28 @@ func finalB(b *B) {\n \tnfinal++\n }\n \n+func nofinalB(b *B) {\n+\tpanic(\"nofinalB run\")\n+}\n+\n func main() {\n \truntime.GOMAXPROCS(4)\n \tfor i = 0; i < N; i++ {\n \t\tb := &B{i}\n \t\ta := &A{b, i}\n+\t\tc := new(B)\n+\t\truntime.SetFinalizer(c, nofinalB)\n \t\truntime.SetFinalizer(b, finalB)\n \t\truntime.SetFinalizer(a, finalA)\n+\t\truntime.SetFinalizer(c, nil)\n \t}\n \tfor i := 0; i < N; i++ {\n \t\truntime.GC()\n \t\truntime.Gosched()\n \t\ttime.Sleep(1e6)\n+\t\tif nfinal >= N*8/10 {\n+\t\t\tbreak\n+\t\t}\n \t}\n \tif nfinal < N*8/10 {\n \t\tprintln(\"not enough finalizing:\", nfinal, \"/\", N)"}, {"sha": "cffcd1638fcecface8e3002b76fc6b978a73d5bc", "filename": "gcc/testsuite/go.test/test/mallocrep.go", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmallocrep.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmallocrep.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmallocrep.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -33,6 +33,7 @@ func bigger() {\n \n func main() {\n \truntime.GC()               // clean up garbage from init\n+\truntime.UpdateMemStats()   // first call can do some allocations\n \truntime.MemProfileRate = 0 // disable profiler\n \truntime.MemStats.Alloc = 0 // ignore stacks\n \tflag.Parse()"}, {"sha": "6af10565cd1cf6750cbeb9049b163e09f6b90c12", "filename": "gcc/testsuite/go.test/test/map1.go", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmap1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmap1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fmap1.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,41 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {}\n+\n+type v bool\n+\n+var (\n+\t// valid\n+\t_ map[int8]v\n+\t_ map[uint8]v\n+\t_ map[int16]v\n+\t_ map[uint16]v\n+\t_ map[int32]v\n+\t_ map[uint32]v\n+\t_ map[int64]v\n+\t_ map[uint64]v\n+\t_ map[int]v\n+\t_ map[uint]v\n+\t_ map[uintptr]v\n+\t_ map[float32]v\n+\t_ map[float64]v\n+\t_ map[complex64]v\n+\t_ map[complex128]v\n+\t_ map[bool]v\n+\t_ map[string]v\n+\t_ map[chan int]v\n+\t_ map[*int]v\n+\t_ map[struct{}]v\n+\t_ map[[10]int]v\n+\n+\t// invalid\n+\t_ map[[]int]v       // ERROR \"invalid map key\"\n+\t_ map[func()]v      // ERROR \"invalid map key\"\n+\t_ map[map[int]int]v // ERROR \"invalid map key\"\n+)"}, {"sha": "efcf4f7822b08c2672ae647c01342a40b8a7023d", "filename": "gcc/testsuite/go.test/test/nil.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnil.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnil.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnil.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -150,7 +150,7 @@ func maptest() {\n \t\tm[2] = 3\n \t})\n \tshouldPanic(func() {\n-\t\tm[2] = 0, false\n+\t\tdelete(m, 2)\n \t})\n }\n "}, {"sha": "b0c1df2d95c2e59d9545be001f0bb901d3d5f369", "filename": "gcc/testsuite/go.test/test/nilptr.go", "status": "added", "additions": 129, "deletions": 0, "changes": 129, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,129 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+import \"unsafe\"\n+\n+// Having a big address space means that indexing\n+// at a 256 MB offset from a nil pointer might not\n+// cause a memory access fault. This test checks\n+// that Go is doing the correct explicit checks to catch\n+// these nil pointer accesses, not just relying on the hardware.\n+var dummy [256 << 20]byte // give us a big address space\n+\n+func main() {\n+\t// the test only tests what we intend to test\n+\t// if dummy starts in the first 256 MB of memory.\n+\t// otherwise there might not be anything mapped\n+\t// at the address that might be accidentally\n+\t// dereferenced below.\n+\tif uintptr(unsafe.Pointer(&dummy)) > 256<<20 {\n+\t\tpanic(\"dummy too far out\")\n+\t}\n+\n+\tshouldPanic(p1)\n+\tshouldPanic(p2)\n+\tshouldPanic(p3)\n+\tshouldPanic(p4)\n+\tshouldPanic(p5)\n+\tshouldPanic(p6)\n+\tshouldPanic(p7)\n+\tshouldPanic(p8)\n+\tshouldPanic(p9)\n+\tshouldPanic(p10)\n+}\n+\n+func shouldPanic(f func()) {\n+\tdefer func() {\n+\t\tif recover() == nil {\n+\t\t\tpanic(\"memory reference did not panic\")\n+\t\t}\n+\t}()\n+\tf()\n+}\n+\n+func p1() {\n+\t// Array index.\n+\tvar p *[1 << 30]byte = nil\n+\tprintln(p[256<<20]) // very likely to be inside dummy, but should panic\n+}\n+\n+var xb byte\n+\n+func p2() {\n+\tvar p *[1 << 30]byte = nil\n+\txb = 123\n+\n+\t// Array index.\n+\tprintln(p[uintptr(unsafe.Pointer(&xb))]) // should panic\n+}\n+\n+func p3() {\n+\t// Array to slice.\n+\tvar p *[1 << 30]byte = nil\n+\tvar x []byte = p[0:] // should panic\n+\t_ = x\n+}\n+\n+var q *[1 << 30]byte\n+\n+func p4() {\n+\t// Array to slice.\n+\tvar x []byte\n+\tvar y = &x\n+\t*y = q[0:] // should crash (uses arraytoslice runtime routine)\n+}\n+\n+func fb([]byte) {\n+\tpanic(\"unreachable\")\n+}\n+\n+func p5() {\n+\t// Array to slice.\n+\tvar p *[1 << 30]byte = nil\n+\tfb(p[0:]) // should crash\n+}\n+\n+func p6() {\n+\t// Array to slice.\n+\tvar p *[1 << 30]byte = nil\n+\tvar _ []byte = p[10 : len(p)-10] // should crash\n+}\n+\n+type T struct {\n+\tx [256 << 20]byte\n+\ti int\n+}\n+\n+func f() *T {\n+\treturn nil\n+}\n+\n+var y *T\n+var x = &y\n+\n+func p7() {\n+\t// Struct field access with large offset.\n+\tprintln(f().i) // should crash\n+}\n+\n+func p8() {\n+\t// Struct field access with large offset.\n+\tprintln((*x).i) // should crash\n+}\n+\n+func p9() {\n+\t// Struct field access with large offset.\n+\tvar t *T\n+\tprintln(&t.i) // should crash\n+}\n+\n+func p10() {\n+\t// Struct field access with large offset.\n+\tvar t *T\n+\tprintln(t.i) // should crash\n+}"}, {"sha": "fa26532c67b49493baffc29cdcfd34a2a5090ddf", "filename": "gcc/testsuite/go.test/test/nilptr/arrayindex.go", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farrayindex.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farrayindex.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farrayindex.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,26 +0,0 @@\n-// $G $D/$F.go && $L $F.$A &&\n-//\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import \"unsafe\"\n-\n-var x byte\n-\n-func main() {\n-\tvar p *[1<<30]byte = nil\n-\tx = 123\n-\n-\t// The problem here is not the use of unsafe:\n-\t// it is that indexing into p[] with a large\n-\t// enough index jumps out of the unmapped section\n-\t// at the beginning of memory and into valid memory.\n-\t// Pointer offsets and array indices, if they are\n-\t// very large, need to dereference the base pointer\n-\t// to trigger a trap.\n-\tprintln(p[uintptr(unsafe.Pointer(&x))])\t// should crash\n-}"}, {"sha": "64f46e14d19bc1b685ef9a7d5eae9fe6421136b0", "filename": "gcc/testsuite/go.test/test/nilptr/arrayindex1.go", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farrayindex1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farrayindex1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farrayindex1.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,31 +0,0 @@\n-// $G $D/$F.go && $L $F.$A &&\n-//\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import \"unsafe\"\n-\n-var dummy [512<<20]byte\t// give us a big address space\n-func main() {\n-\t// the test only tests what we intend to test\n-\t// if dummy starts in the first 256 MB of memory.\n-\t// otherwise there might not be anything mapped\n-\t// at the address that might be accidentally\n-\t// dereferenced below.\n-\tif uintptr(unsafe.Pointer(&dummy)) > 256<<20 {\n-\t\tpanic(\"dummy too far out\")\n-\t}\n-\n-\t// The problem here is that indexing into p[] with a large\n-\t// enough index jumps out of the unmapped section\n-\t// at the beginning of memory and into valid memory.\n-\t// Pointer offsets and array indices, if they are\n-\t// very large, need to dereference the base pointer\n-\t// to trigger a trap.\n-\tvar p *[1<<30]byte = nil\n-\tprintln(p[256<<20])\t// very likely to be inside dummy, but should crash\n-}"}, {"sha": "03879fb42f7a6e983bd1864eb7a0027ca8fbe032", "filename": "gcc/testsuite/go.test/test/nilptr/arraytoslice.go", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,36 +0,0 @@\n-// $G $D/$F.go && $L $F.$A &&\n-//\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import \"unsafe\"\n-\n-func f([]byte) {\n-\tpanic(\"unreachable\")\n-}\n-\n-var dummy [512<<20]byte\t// give us a big address space\n-func main() {\n-\t// the test only tests what we intend to test\n-\t// if dummy starts in the first 256 MB of memory.\n-\t// otherwise there might not be anything mapped\n-\t// at the address that might be accidentally\n-\t// dereferenced below.\n-\tif uintptr(unsafe.Pointer(&dummy)) > 256<<20 {\n-\t\tpanic(\"dummy too far out\")\n-\t}\n-\n-\t// The problem here is that indexing into p[] with a large\n-\t// enough index can jump out of the unmapped section\n-\t// at the beginning of memory and into valid memory.\n-\t//\n-\t// To avoid needing a check on every slice beyond the\n-\t// usual len and cap, we require the *array -> slice\n-\t// conversion to do the check.\n-\tvar p *[1<<30]byte = nil\n-\tf(p[0:])\t// should crash\n-}"}, {"sha": "c86070fa4734719332bc9ef9888ff7c004ce682f", "filename": "gcc/testsuite/go.test/test/nilptr/arraytoslice1.go", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice1.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,33 +0,0 @@\n-// $G $D/$F.go && $L $F.$A &&\n-//\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import \"unsafe\"\n-\n-var dummy [512<<20]byte\t// give us a big address space\n-func main() {\n-\t// the test only tests what we intend to test\n-\t// if dummy starts in the first 256 MB of memory.\n-\t// otherwise there might not be anything mapped\n-\t// at the address that might be accidentally\n-\t// dereferenced below.\n-\tif uintptr(unsafe.Pointer(&dummy)) > 256<<20 {\n-\t\tpanic(\"dummy too far out\")\n-\t}\n-\n-\t// The problem here is that indexing into p[] with a large\n-\t// enough index can jump out of the unmapped section\n-\t// at the beginning of memory and into valid memory.\n-\t//\n-\t// To avoid needing a check on every slice beyond the\n-\t// usual len and cap, we require the *array -> slice\n-\t// conversion to do the check.\n-\tvar p *[1<<30]byte = nil\n-\tvar x []byte = p[0:]\t// should crash\n-\t_ = x\n-}"}, {"sha": "68ea44083cb3dd18811f438338ae8c5c24373830", "filename": "gcc/testsuite/go.test/test/nilptr/arraytoslice2.go", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Farraytoslice2.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,34 +0,0 @@\n-// $G $D/$F.go && $L $F.$A &&\n-//\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import \"unsafe\"\n-\n-var dummy [512<<20]byte\t// give us a big address space\n-var q *[1<<30]byte\n-func main() {\n-\t// the test only tests what we intend to test\n-\t// if dummy starts in the first 256 MB of memory.\n-\t// otherwise there might not be anything mapped\n-\t// at the address that might be accidentally\n-\t// dereferenced below.\n-\tif uintptr(unsafe.Pointer(&dummy)) > 256<<20 {\n-\t\tpanic(\"dummy too far out\")\n-\t}\n-\n-\t// The problem here is that indexing into p[] with a large\n-\t// enough index can jump out of the unmapped section\n-\t// at the beginning of memory and into valid memory.\n-\t//\n-\t// To avoid needing a check on every slice beyond the\n-\t// usual len and cap, we require the *array -> slice\n-\t// conversion to do the check.\n-\tvar x []byte\n-\tvar y = &x\n-\t*y = q[0:]\t// should crash (uses arraytoslice runtime routine)\n-}"}, {"sha": "26ca42773282e5b8155bf603bde3ecff417fdc6f", "filename": "gcc/testsuite/go.test/test/nilptr/slicearray.go", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fslicearray.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fslicearray.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fslicearray.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,32 +0,0 @@\n-// $G $D/$F.go && $L $F.$A &&\n-//\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import \"unsafe\"\n-\n-var dummy [512<<20]byte\t// give us a big address space\n-func main() {\n-\t// the test only tests what we intend to test\n-\t// if dummy starts in the first 256 MB of memory.\n-\t// otherwise there might not be anything mapped\n-\t// at the address that might be accidentally\n-\t// dereferenced below.\n-\tif uintptr(unsafe.Pointer(&dummy)) > 256<<20 {\n-\t\tpanic(\"dummy too far out\")\n-\t}\n-\n-\t// The problem here is that indexing into p[] with a large\n-\t// enough index can jump out of the unmapped section\n-\t// at the beginning of memory and into valid memory.\n-\t//\n-\t// To avoid needing a check on every slice beyond the\n-\t// usual len and cap, we require the slice operation\n-\t// to do the check.\n-\tvar p *[1<<30]byte = nil\n-\tvar _ []byte = p[10:len(p)-10]\t// should crash\n-}"}, {"sha": "35196bb68ddd96e7cc941ff6e12ed9ce94dadda0", "filename": "gcc/testsuite/go.test/test/nilptr/structfield.go", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,34 +0,0 @@\n-// $G $D/$F.go && $L $F.$A &&\n-//\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import \"unsafe\"\n-\n-var dummy [512<<20]byte\t// give us a big address space\n-type T struct {\n-\tx [256<<20] byte\n-\ti int\n-}\n-\n-func main() {\n-\t// the test only tests what we intend to test\n-\t// if dummy starts in the first 256 MB of memory.\n-\t// otherwise there might not be anything mapped\n-\t// at the address that might be accidentally\n-\t// dereferenced below.\n-\tif uintptr(unsafe.Pointer(&dummy)) > 256<<20 {\n-\t\tpanic(\"dummy too far out\")\n-\t}\n-\n-\t// The problem here is that indexing into t with a large\n-\t// enough index can jump out of the unmapped section\n-\t// at the beginning of memory and into valid memory.\n-\t// We require the pointer dereference to check.\n-\tvar t *T\n-\tprintln(t.i)\t// should crash\n-}"}, {"sha": "7c7abed1aa0ae3e4f846c9dbe31cb9e78ac4bbe9", "filename": "gcc/testsuite/go.test/test/nilptr/structfield1.go", "status": "removed", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield1.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield1.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield1.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,37 +0,0 @@\n-// $G $D/$F.go && $L $F.$A &&\n-//\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import \"unsafe\"\n-\n-var dummy [512<<20]byte\t// give us a big address space\n-type T struct {\n-\tx [256<<20] byte\n-\ti int\n-}\n-\n-func f() *T {\n-\treturn nil\n-}\n-\n-func main() {\n-\t// the test only tests what we intend to test\n-\t// if dummy starts in the first 256 MB of memory.\n-\t// otherwise there might not be anything mapped\n-\t// at the address that might be accidentally\n-\t// dereferenced below.\n-\tif uintptr(unsafe.Pointer(&dummy)) > 256<<20 {\n-\t\tpanic(\"dummy too far out\")\n-\t}\n-\n-\t// The problem here is that indexing into t with a large\n-\t// enough index can jump out of the unmapped section\n-\t// at the beginning of memory and into valid memory.\n-\t// We require the pointer dereference to check.\n-\tprintln(f().i)\t// should crash\n-}"}, {"sha": "02a44f17318279f849f935572053e48e7da371a3", "filename": "gcc/testsuite/go.test/test/nilptr/structfield2.go", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfield2.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,36 +0,0 @@\n-// $G $D/$F.go && $L $F.$A &&\n-//\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import \"unsafe\"\n-\n-var dummy [512<<20]byte\t// give us a big address space\n-type T struct {\n-\tx [256<<20] byte\n-\ti int\n-}\n-\n-var y *T\n-var x = &y\n-\n-func main() {\n-\t// the test only tests what we intend to test\n-\t// if dummy starts in the first 256 MB of memory.\n-\t// otherwise there might not be anything mapped\n-\t// at the address that might be accidentally\n-\t// dereferenced below.\n-\tif uintptr(unsafe.Pointer(&dummy)) > 256<<20 {\n-\t\tpanic(\"dummy too far out\")\n-\t}\n-\n-\t// The problem here is that indexing into t with a large\n-\t// enough index can jump out of the unmapped section\n-\t// at the beginning of memory and into valid memory.\n-\t// We require the pointer dereference to check.\n-\tprintln((*x).i)\t// should crash\n-}"}, {"sha": "f3177bafbaa3ecd41a6189329ff90b2e23784675", "filename": "gcc/testsuite/go.test/test/nilptr/structfieldaddr.go", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfieldaddr.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfieldaddr.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fnilptr%2Fstructfieldaddr.go?ref=d1cab3a6152a8ffe3049ca9ceb4ec639a6f04890", "patch": "@@ -1,34 +0,0 @@\n-// $G $D/$F.go && $L $F.$A &&\n-//\t((! sh -c ./$A.out) >/dev/null 2>&1 || echo BUG: should fail)\n-\n-// Copyright 2009 The Go Authors. All rights reserved.\n-// Use of this source code is governed by a BSD-style\n-// license that can be found in the LICENSE file.\n-\n-package main\n-\n-import \"unsafe\"\n-\n-var dummy [512<<20]byte\t// give us a big address space\n-type T struct {\n-\tx [256<<20] byte\n-\ti int\n-}\n-\n-func main() {\n-\t// the test only tests what we intend to test\n-\t// if dummy starts in the first 256 MB of memory.\n-\t// otherwise there might not be anything mapped\n-\t// at the address that might be accidentally\n-\t// dereferenced below.\n-\tif uintptr(unsafe.Pointer(&dummy)) > 256<<20 {\n-\t\tpanic(\"dummy too far out\")\n-\t}\n-\n-\t// The problem here is that indexing into t with a large\n-\t// enough index can jump out of the unmapped section\n-\t// at the beginning of memory and into valid memory.\n-\t// We require the address calculation to check.\n-\tvar t *T\n-\tprintln(&t.i)\t// should crash\n-}"}, {"sha": "dd4c36e0b434f02ea0715daca3c491026b716d30", "filename": "gcc/testsuite/go.test/test/peano.go", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fpeano.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fpeano.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fpeano.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -8,32 +8,27 @@ package main\n \n type Number *Number\n \n-\n // -------------------------------------\n // Peano primitives\n \n func zero() *Number {\n \treturn nil\n }\n \n-\n func is_zero(x *Number) bool {\n \treturn x == nil\n }\n \n-\n func add1(x *Number) *Number {\n \te := new(Number)\n \t*e = x\n \treturn e\n }\n \n-\n func sub1(x *Number) *Number {\n \treturn *x\n }\n \n-\n func add(x, y *Number) *Number {\n \tif is_zero(y) {\n \t\treturn x\n@@ -42,7 +37,6 @@ func add(x, y *Number) *Number {\n \treturn add(add1(x), sub1(y))\n }\n \n-\n func mul(x, y *Number) *Number {\n \tif is_zero(x) || is_zero(y) {\n \t\treturn zero()\n@@ -51,7 +45,6 @@ func mul(x, y *Number) *Number {\n \treturn add(mul(x, sub1(y)), x)\n }\n \n-\n func fact(n *Number) *Number {\n \tif is_zero(n) {\n \t\treturn add1(zero())\n@@ -60,7 +53,6 @@ func fact(n *Number) *Number {\n \treturn mul(fact(sub1(n)), n)\n }\n \n-\n // -------------------------------------\n // Helpers to generate/count Peano integers\n \n@@ -72,7 +64,6 @@ func gen(n int) *Number {\n \treturn zero()\n }\n \n-\n func count(x *Number) int {\n \tif is_zero(x) {\n \t\treturn 0\n@@ -81,7 +72,6 @@ func count(x *Number) int {\n \treturn count(sub1(x)) + 1\n }\n \n-\n func check(x *Number, expected int) {\n \tvar c = count(x)\n \tif c != expected {\n@@ -90,7 +80,6 @@ func check(x *Number, expected int) {\n \t}\n }\n \n-\n // -------------------------------------\n // Test basic functionality\n \n@@ -115,12 +104,19 @@ func init() {\n \tcheck(fact(gen(5)), 120)\n }\n \n-\n // -------------------------------------\n // Factorial\n \n+var results = [...]int{\n+\t1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800,\n+\t39916800, 479001600,\n+}\n+\n func main() {\n \tfor i := 0; i <= 9; i++ {\n-\t\tprint(i, \"! = \", count(fact(gen(i))), \"\\n\")\n+\t\tif f := count(fact(gen(i))); f != results[i] {\n+\t\t\tprintln(\"FAIL:\", i, \"!:\", f, \"!=\", results[i])\n+\t\t\tpanic(0)\n+\t\t}\n \t}\n }"}, {"sha": "d867bdc646c14c34807a7a8417e4c7cfb28e2794", "filename": "gcc/testsuite/go.test/test/printbig.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fprintbig.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fprintbig.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fprintbig.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,4 @@\n-// $G $F.go && $L $F.$A && ./$A.out\n+// $G $F.go && $L $F.$A && ./$A.out 2>&1 | cmp - $D/$F.out\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style"}, {"sha": "6a16b15d987c9d87278ecb4b7943766f3aa3374c", "filename": "gcc/testsuite/go.test/test/printbig.out", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fprintbig.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fprintbig.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fprintbig.out?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,2 @@\n+-9223372036854775808\n+9223372036854775807"}, {"sha": "67d07523b41d8cef1bfac362b7c1fceaf8c65ea2", "filename": "gcc/testsuite/go.test/test/reorder.go", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Freorder.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Freorder.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Freorder.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,121 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Check reordering of assignments.\n+\n+package main\n+\n+import \"fmt\"\n+\n+func main() {\n+\tp1()\n+\tp2()\n+\tp3()\n+\tp4()\n+\tp5()\n+\tp6()\n+\tp7()\n+\tp8()\n+}\n+\n+var gx []int\n+\n+func f(i int) int {\n+\treturn gx[i]\n+}\n+\n+func check(x []int, x0, x1, x2 int) {\n+\tif x[0] != x0 || x[1] != x1 || x[2] != x2 {\n+\t\tfmt.Printf(\"%v, want %d,%d,%d\\n\", x, x0, x1, x2)\n+\t\tpanic(\"failed\")\n+\t}\n+}\n+\n+func check3(x, y, z, xx, yy, zz int) {\n+\tif x != xx || y != yy || z != zz {\n+\t\tfmt.Printf(\"%d,%d,%d, want %d,%d,%d\\n\", x, y, z, xx, yy, zz)\n+\t\tpanic(\"failed\")\n+\t}\n+}\n+\n+func p1() {\n+\tx := []int{1,2,3}\n+\ti := 0\n+\ti, x[i] = 1, 100\n+\t_ = i\n+\tcheck(x, 100, 2, 3)\n+}\n+\n+func p2() {\n+\tx := []int{1,2,3}\n+\ti := 0\n+\tx[i], i = 100, 1\n+\t_ = i\n+\tcheck(x, 100, 2, 3)\n+}\n+\n+func p3() {\n+\tx := []int{1,2,3}\n+\ty := x\n+\tgx = x\n+\tx[1], y[0] = f(0), f(1)\n+\tcheck(x, 2, 1, 3)\n+}\n+\n+func p4() {\n+\tx := []int{1,2,3}\n+\ty := x\n+\tgx = x\n+\tx[1], y[0] = gx[0], gx[1]\n+\tcheck(x, 2, 1, 3)\n+}\n+\n+func p5() {\n+\tx := []int{1,2,3}\n+\ty := x\n+\tp := &x[0]\n+\tq := &x[1]\n+\t*p, *q = x[1], y[0]\n+\tcheck(x, 2, 1, 3)\n+}\n+\n+func p6() {\n+\tx := 1\n+\ty := 2\n+\tz := 3\n+\tpx := &x\n+\tpy := &y\n+\t*px, *py = y, x\n+\tcheck3(x, y, z, 2, 1, 3)\t\n+}\n+\n+func f1(x, y, z int) (xx, yy, zz int) {\n+\treturn x, y, z\n+}\n+\n+func f2() (x, y, z int) {\n+\treturn f1(2, 1, 3)\n+}\n+\n+func p7() {\n+\tx, y, z := f2()\n+\tcheck3(x, y, z, 2, 1, 3)\n+}\n+\n+func p8() {\n+\tx := []int{1,2,3}\n+\n+\tdefer func() {\n+\t\terr := recover()\n+\t\tif err == nil {\n+\t\t\tpanic(\"not panicking\")\n+\t\t}\n+\t\tcheck(x, 100, 2, 3)\n+\t}()\n+\n+\ti := 0\n+\ti, x[i], x[5] = 1, 100, 500\n+}"}, {"sha": "03c91ee30ee3cea462898ca0f6ae89d2c51c1de3", "filename": "gcc/testsuite/go.test/test/run", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frun", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frun", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frun?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -23,15 +23,15 @@ Xarm)\n \texit 1\n esac\n \n-export G=${A}g\n+export G=\"${A}g ${GCFLAGS}\"\n export L=${A}l\n export GOTRACEBACK=0\n export LANG=C\n unset GREP_OPTIONS\t# in case user has a non-standard set\n \n failed=0\n \n-PATH=/bin:/usr/bin:/usr/local/bin:${GOBIN:-$GOROOT/bin}:`pwd`\n+PATH=${GOBIN:-$GOROOT/bin}:`pwd`:/bin:/usr/bin:/usr/local/bin\n \n RUNFILE=\"/tmp/gorun-$$-$USER\"\n TMP1FILE=\"/tmp/gotest1-$$-$USER\"\n@@ -53,7 +53,7 @@ filterout() {\n \tgrep '^'\"$2\"'$' $1 >/dev/null\n }\n \n-for dir in . ken chan interface nilptr syntax fixedbugs bugs\n+for dir in . ken chan interface syntax dwarf fixedbugs bugs\n do\n \techo\n \techo '==' $dir'/'"}, {"sha": "3386972b6d7ed98b72b9abe8131dfcd88b4d851b", "filename": "gcc/testsuite/go.test/test/rune.go", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frune.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frune.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Frune.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,44 @@\n+// $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+var (\n+\tr0 = 'a'\n+\tr1 = 'a'+1\n+\tr2 = 1+'a'\n+\tr3 = 'a'*2\n+\tr4 = 'a'/2\n+\tr5 = 'a'<<1\n+\tr6 = 'b'<<2\n+\tr7 int32\n+\n+\tr = []rune{r0, r1, r2, r3, r4, r5, r6, r7}\n+)\n+\n+var (\n+\tf0 = 1.2\n+\tf1 = 1.2/'a'\n+\n+\tf = []float64{f0, f1}\n+)\n+\n+var (\n+\ti0 = 1\n+\ti1 = 1<<'\\x01'\n+\t\n+\ti = []int{i0, i1}\n+)\n+\n+const (\n+\tmaxRune = '\\U0010FFFF'\n+)\n+\n+var (\n+\tb0 = maxRune < r0\n+\t\n+\tb = []bool{b0}\n+)"}, {"sha": "e7c3d5abb48d4289f3454552a0d85583104f6e4d", "filename": "gcc/testsuite/go.test/test/sigchld.go", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsigchld.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsigchld.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsigchld.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,5 @@\n-// $G $D/$F.go && $L $F.$A && ./$A.out\n+// [ \"$GOOS\" == windows ] ||\n+// ($G $D/$F.go && $L $F.$A && ./$A.out 2>&1 | cmp - $D/$F.out)\n \n // Copyright 2009 The Go Authors. All rights reserved.\n // Use of this source code is governed by a BSD-style"}, {"sha": "477d02579678d0d61e866f5a8145cf8e61411b22", "filename": "gcc/testsuite/go.test/test/sigchld.out", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsigchld.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsigchld.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsigchld.out?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1 @@\n+survived SIGCHLD"}, {"sha": "5cd3a4567b8d41e0dd6a2ad9b81515e57e66ca98", "filename": "gcc/testsuite/go.test/test/sinit.go", "status": "modified", "additions": 187, "deletions": 32, "changes": 219, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsinit.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsinit.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsinit.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,4 @@\n-// $G -S $D/$F.go | egrep initdone >/dev/null && echo FAIL || true\n+// $G -S $D/$F.go | egrep initdone >/dev/null && echo BUG sinit || true\n \n // Copyright 2010 The Go Authors.  All rights reserved.\n // Use of this source code is governed by a BSD-style\n@@ -9,45 +9,45 @@ package p\n // Should be no init func in the assembly.\n // All these initializations should be done at link time.\n \n-type\tS\tstruct{ a,b,c int }\n-type\tSS\tstruct{ aa,bb,cc S }\n-type\tSA\tstruct{ a,b,c [3]int }\n-type\tSC\tstruct{ a,b,c []int }\n+type S struct{ a, b, c int }\n+type SS struct{ aa, bb, cc S }\n+type SA struct{ a, b, c [3]int }\n+type SC struct{ a, b, c []int }\n \n var (\n-\tzero = 2\n-\tone = 1\n-\tpi = 3.14\n-\tslice = []byte{1,2,3}\n-\tsliceInt = []int{1,2,3}\n-\thello = \"hello, world\"\n-\tbytes = []byte(\"hello, world\")\n-\tfour, five = 4, 5\n-\tx, y = 0.1, \"hello\"\n-\tnilslice []byte = nil\n-\tnilmap map[string]int = nil\n-\tnilfunc func() = nil\n-\tnilchan chan int = nil\n-\tnilptr *byte = nil\n+\tzero                      = 2\n+\tone                       = 1\n+\tpi                        = 3.14\n+\tslice                     = []byte{1, 2, 3}\n+\tsliceInt                  = []int{1, 2, 3}\n+\thello                     = \"hello, world\"\n+\tbytes                     = []byte(\"hello, world\")\n+\tfour, five                = 4, 5\n+\tx, y                      = 0.1, \"hello\"\n+\tnilslice   []byte         = nil\n+\tnilmap     map[string]int = nil\n+\tnilfunc    func()         = nil\n+\tnilchan    chan int       = nil\n+\tnilptr     *byte          = nil\n )\n \n-var\ta\t= [3]int{1001, 1002, 1003}\n-var\ts\t= S{1101, 1102, 1103}\n-var\tc\t= []int{1201, 1202, 1203}\n+var a = [3]int{1001, 1002, 1003}\n+var s = S{1101, 1102, 1103}\n+var c = []int{1201, 1202, 1203}\n \n-var\taa\t= [3][3]int{[3]int{2001,2002,2003}, [3]int{2004,2005,2006}, [3]int{2007,2008,2009}}\n-var\tas\t= [3]S{S{2101,2102,2103},S{2104,2105,2106},S{2107,2108,2109}}\n-var\tac\t= [3][]int{[]int{2201,2202,2203}, []int{2204,2205,2206}, []int{2207,2208,2209}}\n+var aa = [3][3]int{[3]int{2001, 2002, 2003}, [3]int{2004, 2005, 2006}, [3]int{2007, 2008, 2009}}\n+var as = [3]S{S{2101, 2102, 2103}, S{2104, 2105, 2106}, S{2107, 2108, 2109}}\n+var ac = [3][]int{[]int{2201, 2202, 2203}, []int{2204, 2205, 2206}, []int{2207, 2208, 2209}}\n \n-var\tsa\t= SA{[3]int{3001,3002,3003},[3]int{3004,3005,3006},[3]int{3007,3008,3009}}\n-var\tss\t= SS{S{3101,3102,3103},S{3104,3105,3106},S{3107,3108,3109}}\n-var\tsc\t= SC{[]int{3201,3202,3203},[]int{3204,3205,3206},[]int{3207,3208,3209}}\n+var sa = SA{[3]int{3001, 3002, 3003}, [3]int{3004, 3005, 3006}, [3]int{3007, 3008, 3009}}\n+var ss = SS{S{3101, 3102, 3103}, S{3104, 3105, 3106}, S{3107, 3108, 3109}}\n+var sc = SC{[]int{3201, 3202, 3203}, []int{3204, 3205, 3206}, []int{3207, 3208, 3209}}\n \n-var\tca\t= [][3]int{[3]int{4001,4002,4003}, [3]int{4004,4005,4006}, [3]int{4007,4008,4009}}\n-var\tcs\t= []S{S{4101,4102,4103},S{4104,4105,4106},S{4107,4108,4109}}\n-var\tcc\t= [][]int{[]int{4201,4202,4203}, []int{4204,4205,4206}, []int{4207,4208,4209}}\n+var ca = [][3]int{[3]int{4001, 4002, 4003}, [3]int{4004, 4005, 4006}, [3]int{4007, 4008, 4009}}\n+var cs = []S{S{4101, 4102, 4103}, S{4104, 4105, 4106}, S{4107, 4108, 4109}}\n+var cc = [][]int{[]int{4201, 4202, 4203}, []int{4204, 4205, 4206}, []int{4207, 4208, 4209}}\n \n-var\tanswers\t= [...]int {\n+var answers = [...]int{\n \t// s\n \t1101, 1102, 1103,\n \n@@ -98,3 +98,158 @@ var\tanswers\t= [...]int {\n \t2008, 2208, 2308, 4008, 4208, 4308, 5008, 5208, 5308,\n \t2009, 2209, 2309, 4009, 4209, 4309, 5009, 5209, 5309,\n }\n+\n+var (\n+\tcopy_zero = zero\n+\tcopy_one = one\n+\tcopy_pi = pi\n+\tcopy_slice = slice\n+\tcopy_sliceInt = sliceInt\n+\tcopy_hello = hello\n+\tcopy_bytes = bytes\n+\tcopy_four, copy_five = four, five\n+\tcopy_x, copy_y = x, y\n+\tcopy_nilslice = nilslice\n+\tcopy_nilmap = nilmap\n+\tcopy_nilfunc = nilfunc\n+\tcopy_nilchan = nilchan\n+\tcopy_nilptr = nilptr\n+)\n+\n+var copy_a = a\n+var copy_s = s\n+var copy_c = c\n+\n+var copy_aa = aa\n+var copy_as = as\n+var copy_ac = ac\n+\n+var copy_sa = sa\n+var copy_ss = ss\n+var copy_sc = sc\n+\n+var copy_ca = ca\n+var copy_cs = cs\n+var copy_cc = cc\n+\n+var copy_answers = answers\n+\n+var bx bool\n+var b0 = false\n+var b1 = true\n+\n+var fx float32\n+var f0 = float32(0)\n+var f1 = float32(1)\n+\n+var gx float64\n+var g0 = float64(0)\n+var g1 = float64(1)\n+\n+var ix int\n+var i0 = 0\n+var i1 = 1\n+\n+var jx uint\n+var j0 = uint(0)\n+var j1 = uint(1)\n+\n+var cx complex64\n+var c0 = complex64(0)\n+var c1 = complex64(1)\n+\n+var dx complex128\n+var d0 = complex128(0)\n+var d1 = complex128(1)\n+\n+var sx []int\n+var s0 = []int{0, 0, 0}\n+var s1 = []int{1, 2, 3}\n+\n+func fi() int\n+\n+var ax [10]int\n+var a0 = [10]int{0, 0, 0}\n+var a1 = [10]int{1, 2, 3, 4}\n+\n+type T struct{ X, Y int }\n+\n+var tx T\n+var t0 = T{}\n+var t0a = T{0, 0}\n+var t0b = T{X: 0}\n+var t1 = T{X: 1, Y: 2}\n+var t1a = T{3, 4}\n+\n+var psx *[]int\n+var ps0 = &[]int{0, 0, 0}\n+var ps1 = &[]int{1, 2, 3}\n+\n+var pax *[10]int\n+var pa0 = &[10]int{0, 0, 0}\n+var pa1 = &[10]int{1, 2, 3}\n+\n+var ptx *T\n+var pt0 = &T{}\n+var pt0a = &T{0, 0}\n+var pt0b = &T{X: 0}\n+var pt1 = &T{X: 1, Y: 2}\n+var pt1a = &T{3, 4}\n+\n+var copy_bx = bx\n+var copy_b0 = b0\n+var copy_b1 = b1\n+\n+var copy_fx = fx\n+var copy_f0 = f0\n+var copy_f1 = f1\n+\n+var copy_gx = gx\n+var copy_g0 = g0\n+var copy_g1 = g1\n+\n+var copy_ix = ix\n+var copy_i0 = i0\n+var copy_i1 = i1\n+\n+var copy_jx = jx\n+var copy_j0 = j0\n+var copy_j1 = j1\n+\n+var copy_cx = cx\n+var copy_c0 = c0\n+var copy_c1 = c1\n+\n+var copy_dx = dx\n+var copy_d0 = d0\n+var copy_d1 = d1\n+\n+var copy_sx = sx\n+var copy_s0 = s0\n+var copy_s1 = s1\n+\n+var copy_ax = ax\n+var copy_a0 = a0\n+var copy_a1 = a1\n+\n+var copy_tx = tx\n+var copy_t0 = t0\n+var copy_t0a = t0a\n+var copy_t0b = t0b\n+var copy_t1 = t1\n+var copy_t1a = t1a\n+\n+var copy_psx = psx\n+var copy_ps0 = ps0\n+var copy_ps1 = ps1\n+\n+var copy_pax = pax\n+var copy_pa0 = pa0\n+var copy_pa1 = pa1\n+\n+var copy_ptx = ptx\n+var copy_pt0 = pt0\n+var copy_pt0a = pt0a\n+var copy_pt0b = pt0b\n+var copy_pt1 = pt1\n+var copy_pt1a = pt1a"}, {"sha": "2398c4117d3ad85723d9843371e4f712e150b28a", "filename": "gcc/testsuite/go.test/test/struct0.go", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fstruct0.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fstruct0.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fstruct0.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,34 @@\n+// $G $D/$F.go && $L $F.$A && ./$A.out\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// zero length structs.\n+// used to not be evaluated.\n+// issue 2232.\n+\n+package main\n+\n+func recv(c chan interface{}) struct{} {\n+\treturn (<-c).(struct{})\n+}\n+\n+var m = make(map[interface{}]int)\n+\n+func recv1(c chan interface{}) {\n+\tdefer rec()\n+\tm[(<-c).(struct{})] = 0\n+}\n+\n+func rec() {\n+\trecover()\n+}\n+\n+func main() {\n+\tc := make(chan interface{})\n+\tgo recv(c)\n+\tc <- struct{}{}\n+\tgo recv1(c)\n+\tc <- struct{}{}\n+}"}, {"sha": "bed027ce85f6c9df79880dc18940a1be7756b6ad", "filename": "gcc/testsuite/go.test/test/switch.go", "status": "modified", "additions": 212, "deletions": 69, "changes": 281, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fswitch.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fswitch.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fswitch.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -19,121 +19,264 @@ func main() {\n \thello := \"hello\"\n \n \tswitch true {\n-\tcase i5 < 5: assert(false, \"<\")\n-\tcase i5 == 5: assert(true, \"!\")\n-\tcase i5 > 5: assert(false, \">\")\n+\tcase i5 < 5:\n+\t\tassert(false, \"<\")\n+\tcase i5 == 5:\n+\t\tassert(true, \"!\")\n+\tcase i5 > 5:\n+\t\tassert(false, \">\")\n \t}\n \n \tswitch {\n-\tcase i5 < 5: assert(false, \"<\")\n-\tcase i5 == 5: assert(true, \"!\")\n-\tcase i5 > 5: assert(false, \">\")\n+\tcase i5 < 5:\n+\t\tassert(false, \"<\")\n+\tcase i5 == 5:\n+\t\tassert(true, \"!\")\n+\tcase i5 > 5:\n+\t\tassert(false, \">\")\n \t}\n \n \tswitch x := 5; true {\n-\tcase i5 < x: assert(false, \"<\")\n-\tcase i5 == x: assert(true, \"!\")\n-\tcase i5 > x: assert(false, \">\")\n+\tcase i5 < x:\n+\t\tassert(false, \"<\")\n+\tcase i5 == x:\n+\t\tassert(true, \"!\")\n+\tcase i5 > x:\n+\t\tassert(false, \">\")\n \t}\n \n \tswitch x := 5; true {\n-\tcase i5 < x: assert(false, \"<\")\n-\tcase i5 == x: assert(true, \"!\")\n-\tcase i5 > x: assert(false, \">\")\n+\tcase i5 < x:\n+\t\tassert(false, \"<\")\n+\tcase i5 == x:\n+\t\tassert(true, \"!\")\n+\tcase i5 > x:\n+\t\tassert(false, \">\")\n \t}\n \n \tswitch i5 {\n-\tcase 0: assert(false, \"0\")\n-\tcase 1: assert(false, \"1\")\n-\tcase 2: assert(false, \"2\")\n-\tcase 3: assert(false, \"3\")\n-\tcase 4: assert(false, \"4\")\n-\tcase 5: assert(true, \"5\")\n-\tcase 6: assert(false, \"6\")\n-\tcase 7: assert(false, \"7\")\n-\tcase 8: assert(false, \"8\")\n-\tcase 9: assert(false, \"9\")\n-\tdefault: assert(false, \"default\")\n+\tcase 0:\n+\t\tassert(false, \"0\")\n+\tcase 1:\n+\t\tassert(false, \"1\")\n+\tcase 2:\n+\t\tassert(false, \"2\")\n+\tcase 3:\n+\t\tassert(false, \"3\")\n+\tcase 4:\n+\t\tassert(false, \"4\")\n+\tcase 5:\n+\t\tassert(true, \"5\")\n+\tcase 6:\n+\t\tassert(false, \"6\")\n+\tcase 7:\n+\t\tassert(false, \"7\")\n+\tcase 8:\n+\t\tassert(false, \"8\")\n+\tcase 9:\n+\t\tassert(false, \"9\")\n+\tdefault:\n+\t\tassert(false, \"default\")\n \t}\n \n \tswitch i5 {\n-\tcase 0,1,2,3,4: assert(false, \"4\")\n-\tcase 5: assert(true, \"5\")\n-\tcase 6,7,8,9: assert(false, \"9\")\n-\tdefault: assert(false, \"default\")\n+\tcase 0, 1, 2, 3, 4:\n+\t\tassert(false, \"4\")\n+\tcase 5:\n+\t\tassert(true, \"5\")\n+\tcase 6, 7, 8, 9:\n+\t\tassert(false, \"9\")\n+\tdefault:\n+\t\tassert(false, \"default\")\n \t}\n \n \tswitch i5 {\n \tcase 0:\n \tcase 1:\n \tcase 2:\n \tcase 3:\n-\tcase 4: assert(false, \"4\")\n-\tcase 5: assert(true, \"5\")\n+\tcase 4:\n+\t\tassert(false, \"4\")\n+\tcase 5:\n+\t\tassert(true, \"5\")\n \tcase 6:\n \tcase 7:\n \tcase 8:\n \tcase 9:\n-\tdefault: assert(i5 == 5, \"good\")\n+\tdefault:\n+\t\tassert(i5 == 5, \"good\")\n \t}\n \n \tswitch i5 {\n-\tcase 0: dummy := 0; _ = dummy; fallthrough\n-\tcase 1: dummy := 0; _ = dummy; fallthrough\n-\tcase 2: dummy := 0; _ = dummy; fallthrough\n-\tcase 3: dummy := 0; _ = dummy; fallthrough\n-\tcase 4: dummy := 0; _ = dummy; assert(false, \"4\")\n-\tcase 5: dummy := 0; _ = dummy; fallthrough\n-\tcase 6: dummy := 0; _ = dummy; fallthrough\n-\tcase 7: dummy := 0; _ = dummy; fallthrough\n-\tcase 8: dummy := 0; _ = dummy; fallthrough\n-\tcase 9: dummy := 0; _ = dummy; fallthrough\n-\tdefault: dummy := 0; _ = dummy; assert(i5 == 5, \"good\")\n+\tcase 0:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 1:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 2:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 3:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 4:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tassert(false, \"4\")\n+\tcase 5:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 6:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 7:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 8:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 9:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tdefault:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tassert(i5 == 5, \"good\")\n \t}\n \n \tfired := false\n \tswitch i5 {\n-\tcase 0: dummy := 0; _ = dummy; fallthrough;  // tests scoping of cases\n-\tcase 1: dummy := 0; _ = dummy; fallthrough\n-\tcase 2: dummy := 0; _ = dummy; fallthrough\n-\tcase 3: dummy := 0; _ = dummy; fallthrough\n-\tcase 4: dummy := 0; _ = dummy; assert(false, \"4\")\n-\tcase 5: dummy := 0; _ = dummy; fallthrough\n-\tcase 6: dummy := 0; _ = dummy; fallthrough\n-\tcase 7: dummy := 0; _ = dummy; fallthrough\n-\tcase 8: dummy := 0; _ = dummy; fallthrough\n-\tcase 9: dummy := 0; _ = dummy; fallthrough\n-\tdefault: dummy := 0; _ = dummy; fired = !fired; assert(i5 == 5, \"good\")\n+\tcase 0:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough // tests scoping of cases\n+\tcase 1:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 2:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 3:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 4:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tassert(false, \"4\")\n+\tcase 5:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 6:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 7:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 8:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tcase 9:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfallthrough\n+\tdefault:\n+\t\tdummy := 0\n+\t\t_ = dummy\n+\t\tfired = !fired\n+\t\tassert(i5 == 5, \"good\")\n \t}\n \tassert(fired, \"fired\")\n \n \tcount := 0\n \tswitch i5 {\n-\tcase 0: count = count + 1; fallthrough\n-\tcase 1: count = count + 1; fallthrough\n-\tcase 2: count = count + 1; fallthrough\n-\tcase 3: count = count + 1; fallthrough\n-\tcase 4: count = count + 1; assert(false, \"4\")\n-\tcase 5: count = count + 1; fallthrough\n-\tcase 6: count = count + 1; fallthrough\n-\tcase 7: count = count + 1; fallthrough\n-\tcase 8: count = count + 1; fallthrough\n-\tcase 9: count = count + 1; fallthrough\n-\tdefault: assert(i5 == count, \"good\")\n+\tcase 0:\n+\t\tcount = count + 1\n+\t\tfallthrough\n+\tcase 1:\n+\t\tcount = count + 1\n+\t\tfallthrough\n+\tcase 2:\n+\t\tcount = count + 1\n+\t\tfallthrough\n+\tcase 3:\n+\t\tcount = count + 1\n+\t\tfallthrough\n+\tcase 4:\n+\t\tcount = count + 1\n+\t\tassert(false, \"4\")\n+\tcase 5:\n+\t\tcount = count + 1\n+\t\tfallthrough\n+\tcase 6:\n+\t\tcount = count + 1\n+\t\tfallthrough\n+\tcase 7:\n+\t\tcount = count + 1\n+\t\tfallthrough\n+\tcase 8:\n+\t\tcount = count + 1\n+\t\tfallthrough\n+\tcase 9:\n+\t\tcount = count + 1\n+\t\tfallthrough\n+\tdefault:\n+\t\tassert(i5 == count, \"good\")\n \t}\n \tassert(fired, \"fired\")\n \n \tswitch hello {\n-\tcase \"wowie\": assert(false, \"wowie\")\n-\tcase \"hello\": assert(true, \"hello\")\n-\tcase \"jumpn\": assert(false, \"jumpn\")\n-\tdefault: assert(false, \"default\")\n+\tcase \"wowie\":\n+\t\tassert(false, \"wowie\")\n+\tcase \"hello\":\n+\t\tassert(true, \"hello\")\n+\tcase \"jumpn\":\n+\t\tassert(false, \"jumpn\")\n+\tdefault:\n+\t\tassert(false, \"default\")\n \t}\n \n \tfired = false\n \tswitch i := i5 + 2; i {\n-\tcase i7: fired = true\n-\tdefault: assert(false, \"fail\")\n+\tcase i7:\n+\t\tfired = true\n+\tdefault:\n+\t\tassert(false, \"fail\")\n \t}\n \tassert(fired, \"var\")\n+\n+\t// switch on nil-only comparison types\n+\tswitch f := func() {}; f {\n+\tcase nil:\n+\t\tassert(false, \"f should not be nil\")\n+\tdefault:\n+\t}\n+\n+\tswitch m := make(map[int]int); m {\n+\tcase nil:\n+\t\tassert(false, \"m should not be nil\")\n+\tdefault:\n+\t}\n+\n+\tswitch a := make([]int, 1); a {\n+\tcase nil:\n+\t\tassert(false, \"m should not be nil\")\n+\tdefault:\n+\t}\n }"}, {"sha": "6c9ebfe6d48ee9ef7bbd7459d1f0a4cf0412dd76", "filename": "gcc/testsuite/go.test/test/switch3.go", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fswitch3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fswitch3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fswitch3.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,58 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+type I interface {\n+\tM()\n+}\n+\n+func bad() {\n+\tvar i I\n+\tvar s string\n+\n+\tswitch i {\n+\tcase s: // ERROR \"mismatched types string and I|incompatible types\"\n+\t}\n+\n+\tswitch s {\n+\tcase i: // ERROR \"mismatched types I and string|incompatible types\"\n+\t}\n+\n+\tvar m, m1 map[int]int\n+\tswitch m {\n+\tcase nil:\n+\tcase m1: // ERROR \"can only compare map m to nil|map can only be compared to nil\"\n+\tdefault:\n+\t}\n+\n+\tvar a, a1 []int\n+\tswitch a {\n+\tcase nil:\n+\tcase a1: // ERROR \"can only compare slice a to nil|slice can only be compared to nil\"\n+\tdefault:\n+\t}\n+\n+\tvar f, f1 func()\n+\tswitch f {\n+\tcase nil:\n+\tcase f1: // ERROR \"can only compare func f to nil|func can only be compared to nil\"\n+\tdefault:\n+\t}\n+}\n+\n+func good() {\n+\tvar i interface{}\n+\tvar s string\n+\n+\tswitch i {\n+\tcase s:\n+\t}\n+\n+\tswitch s {\n+\tcase i:\n+\t}\n+}"}, {"sha": "99595254fd4877a402b77f3bbfe217d2d24b50a6", "filename": "gcc/testsuite/go.test/test/syntax/else.go", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Felse.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Felse.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fsyntax%2Felse.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,12 @@\n+// errchk $G $D/$F.go\n+\n+// Copyright 2011 The Go Authors.  All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+func main() {\n+\tif true {\n+\t} else ;  // ERROR \"else must be followed by if or statement block|expected .if. or .{.\"\n+}"}, {"sha": "841fab9ef2b6e9856f8ec259315c47077da50f18", "filename": "gcc/testsuite/go.test/test/times.out", "status": "added", "additions": 632, "deletions": 0, "changes": 632, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ftimes.out", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ftimes.out", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ftimes.out?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,632 @@\n+0.04 ./235\n+1.72 ./64bit\n+0.03 ./alias\n+0.03 ./alias1\n+0.30 ./append\n+0.07 ./args\n+0.02 ./assign\n+0.04 ./assign1\n+0.04 ./bigalg\n+0.03 ./bigmap\n+0.14 ./blank\n+0.03 ./blank1\n+0.03 ./chancap\n+0.07 ./char_lit\n+0.03 ./char_lit1\n+0.09 ./closedchan\n+0.05 ./closure\n+0.06 ./cmp\n+0.02 ./cmp6\n+0.03 ./cmplx\n+0.60 ./cmplxdivide\n+0.00 ./cmplxdivide1\n+0.04 ./complit\n+0.02 ./complit1\n+0.03 ./compos\n+0.04 ./const\n+0.03 ./const1\n+0.03 ./const2\n+0.13 ./const3\n+0.08 ./convert\n+0.03 ./convert1\n+0.02 ./convert3\n+0.04 ./convlit\n+0.02 ./convlit1\n+0.34 ./copy\n+0.27 ./crlf\n+0.05 ./ddd\n+0.02 ./ddd1\n+0.00 ./ddd2\n+0.04 ./ddd3\n+0.03 ./decl\n+0.03 ./declbad\n+0.14 ./defer\n+0.03 ./deferprint\n+0.14 ./divide\n+0.00 ./empty\n+0.08 ./env\n+0.00 ./eof\n+0.00 ./eof1\n+0.04 ./escape\n+0.12 ./escape2\n+0.03 ./escape3\n+0.05 ./float_lit\n+0.14 ./floatcmp\n+0.03 ./for\n+0.04 ./func\n+0.03 ./func1\n+0.00 ./func2\n+0.03 ./func3\n+0.03 ./func4\n+0.03 ./func5\n+0.00 ./func6\n+0.04 ./func7\n+0.03 ./gc\n+0.04 ./gc1\n+0.26 ./gc2\n+0.06 ./goprint\n+0.04 ./goto\n+0.04 ./hashmap\n+0.03 ./helloworld\n+0.03 ./if\n+0.02 ./import\n+0.15 ./import1\n+0.00 ./import2\n+0.01 ./import3\n+0.14 ./import4\n+1.70 ./index\n+0.03 ./indirect\n+0.02 ./indirect1\n+0.02 ./init\n+0.25 ./init1\n+0.03 ./initcomma\n+0.15 ./initialize\n+0.02 ./initializerr\n+0.06 ./initsyscall\n+0.07 ./int_lit\n+0.03 ./intcvt\n+0.03 ./iota\n+0.03 ./label\n+0.03 ./label1\n+0.04 ./literal\n+0.15 ./malloc1\n+0.06 ./mallocfin\n+0.19 ./mallocrand\n+0.21 ./mallocrep\n+0.52 ./mallocrep1\n+0.17 ./map\n+0.02 ./map1\n+0.05 ./method\n+0.02 ./method1\n+0.03 ./method2\n+0.04 ./method3\n+0.06 ./named\n+0.03 ./named1\n+0.18 ./nil\n+0.15 ./nilptr\n+0.16 ./nul1\n+0.00 ./parentype\n+0.11 ./peano\n+0.02 ./printbig\n+0.05 ./range\n+0.04 ./recover\n+0.04 ./recover1\n+0.08 ./recover2\n+0.06 ./recover3\n+0.14 ./rename\n+0.02 ./rename1\n+0.16 ./reorder\n+0.00 ./rune\n+0.03 ./runtime\n+0.03 ./shift1\n+0.01 ./shift2\n+0.03 ./sieve\n+0.06 ./sigchld\n+0.03 ./simassign\n+0.02 ./sinit\n+0.00 ./sizeof\n+0.03 ./solitaire\n+0.06 ./stack\n+0.08 ./string_lit\n+0.14 ./stringrange\n+0.04 ./struct0\n+0.04 ./switch\n+0.08 ./switch1\n+0.02 ./switch3\n+0.04 ./test0\n+0.03 ./turing\n+0.07 ./typeswitch\n+0.15 ./typeswitch1\n+0.02 ./typeswitch2\n+0.03 ./typeswitch3\n+0.02 ./undef\n+0.04 ./utf\n+0.03 ./varerr\n+0.03 ./varinit\n+0.26 ./zerodivide\n+0.04 ken/array\n+0.11 ken/chan\n+0.04 ken/chan1\n+0.04 ken/complit\n+0.07 ken/convert\n+0.03 ken/cplx0\n+0.02 ken/cplx1\n+0.06 ken/cplx2\n+0.09 ken/cplx3\n+0.14 ken/cplx4\n+0.03 ken/cplx5\n+0.31 ken/divconst\n+0.05 ken/divmod\n+0.04 ken/embed\n+0.03 ken/for\n+0.04 ken/interbasic\n+0.03 ken/interfun\n+0.04 ken/intervar\n+0.03 ken/label\n+0.03 ken/litfun\n+0.03 ken/mfunc\n+0.34 ken/modconst\n+0.03 ken/ptrfun\n+0.03 ken/ptrvar\n+0.04 ken/range\n+0.03 ken/rob1\n+0.18 ken/rob2\n+0.04 ken/robfor\n+0.04 ken/robfunc\n+0.03 ken/shift\n+0.03 ken/simparray\n+0.04 ken/simpbool\n+0.03 ken/simpconv\n+0.03 ken/simpfun\n+0.03 ken/simpswitch\n+0.03 ken/simpvar\n+0.02 ken/slicearray\n+0.03 ken/sliceslice\n+0.03 ken/string\n+0.03 ken/strvar\n+0.32 chan/doubleselect\n+0.06 chan/fifo\n+0.12 chan/goroutines\n+0.07 chan/nonblock\n+0.02 chan/perm\n+0.10 chan/powser1\n+0.09 chan/powser2\n+0.03 chan/select\n+0.15 chan/select2\n+0.97 chan/select3\n+0.03 chan/select4\n+0.72 chan/select5\n+0.03 chan/select6\n+0.04 chan/select7\n+0.03 chan/sendstmt\n+0.03 chan/sieve1\n+0.04 chan/sieve2\n+0.02 chan/zerosize\n+0.04 interface/bigdata\n+0.04 interface/convert\n+0.03 interface/convert1\n+0.03 interface/convert2\n+0.09 interface/embed\n+0.00 interface/embed0\n+0.03 interface/embed1\n+0.02 interface/embed2\n+0.02 interface/explicit\n+0.03 interface/fail\n+0.09 interface/fake\n+0.03 interface/noeq\n+0.03 interface/pointer\n+0.03 interface/private\n+0.00 interface/private1\n+0.04 interface/receiver\n+0.03 interface/receiver1\n+0.00 interface/recursive\n+0.03 interface/returntype\n+0.09 interface/struct\n+0.02 syntax/chan\n+0.03 syntax/chan1\n+0.02 syntax/else\n+0.02 syntax/forvar\n+0.03 syntax/if\n+0.03 syntax/import\n+0.03 syntax/interface\n+0.03 syntax/semi1\n+0.02 syntax/semi2\n+0.03 syntax/semi3\n+0.03 syntax/semi4\n+0.02 syntax/semi5\n+0.03 syntax/semi6\n+0.02 syntax/semi7\n+0.02 syntax/topexpr\n+0.03 syntax/typesw\n+0.02 syntax/vareq\n+0.03 syntax/vareq1\n+0.04 dwarf/linedirectives\n+0.05 dwarf/main\n+0.00 dwarf/z1\n+0.00 dwarf/z10\n+0.00 dwarf/z11\n+0.00 dwarf/z12\n+0.00 dwarf/z13\n+0.00 dwarf/z14\n+0.00 dwarf/z15\n+0.00 dwarf/z16\n+0.00 dwarf/z17\n+0.00 dwarf/z18\n+0.00 dwarf/z19\n+0.00 dwarf/z2\n+0.00 dwarf/z20\n+0.00 dwarf/z3\n+0.00 dwarf/z4\n+0.00 dwarf/z5\n+0.00 dwarf/z6\n+0.00 dwarf/z7\n+0.00 dwarf/z8\n+0.00 dwarf/z9\n+0.03 fixedbugs/bug000\n+0.03 fixedbugs/bug002\n+0.03 fixedbugs/bug003\n+0.03 fixedbugs/bug004\n+0.04 fixedbugs/bug005\n+0.08 fixedbugs/bug006\n+0.03 fixedbugs/bug007\n+0.03 fixedbugs/bug008\n+0.02 fixedbugs/bug009\n+0.03 fixedbugs/bug010\n+0.03 fixedbugs/bug011\n+0.03 fixedbugs/bug012\n+0.03 fixedbugs/bug013\n+0.03 fixedbugs/bug014\n+0.02 fixedbugs/bug015\n+0.02 fixedbugs/bug016\n+0.03 fixedbugs/bug017\n+0.00 fixedbugs/bug020\n+0.03 fixedbugs/bug021\n+0.02 fixedbugs/bug022\n+0.03 fixedbugs/bug023\n+0.03 fixedbugs/bug024\n+0.03 fixedbugs/bug026\n+0.14 fixedbugs/bug027\n+0.03 fixedbugs/bug028\n+0.02 fixedbugs/bug030\n+0.03 fixedbugs/bug031\n+0.02 fixedbugs/bug035\n+0.00 fixedbugs/bug036\n+0.02 fixedbugs/bug037\n+0.00 fixedbugs/bug038\n+0.03 fixedbugs/bug039\n+0.00 fixedbugs/bug040\n+0.03 fixedbugs/bug045\n+0.03 fixedbugs/bug046\n+0.03 fixedbugs/bug047\n+0.02 fixedbugs/bug048\n+0.03 fixedbugs/bug049\n+0.03 fixedbugs/bug050\n+0.02 fixedbugs/bug051\n+0.03 fixedbugs/bug052\n+0.03 fixedbugs/bug053\n+0.03 fixedbugs/bug054\n+0.03 fixedbugs/bug055\n+0.03 fixedbugs/bug056\n+0.00 fixedbugs/bug057\n+0.04 fixedbugs/bug058\n+0.08 fixedbugs/bug059\n+0.08 fixedbugs/bug060\n+0.03 fixedbugs/bug061\n+0.03 fixedbugs/bug062\n+0.00 fixedbugs/bug063\n+0.00 fixedbugs/bug064\n+0.03 fixedbugs/bug065\n+0.00 fixedbugs/bug066\n+0.03 fixedbugs/bug067\n+0.03 fixedbugs/bug068\n+0.00 fixedbugs/bug069\n+0.15 fixedbugs/bug070\n+0.00 fixedbugs/bug071\n+0.03 fixedbugs/bug072\n+0.03 fixedbugs/bug073\n+0.03 fixedbugs/bug074\n+0.03 fixedbugs/bug075\n+0.03 fixedbugs/bug076\n+0.00 fixedbugs/bug077\n+0.03 fixedbugs/bug078\n+0.00 fixedbugs/bug080\n+0.02 fixedbugs/bug081\n+0.03 fixedbugs/bug082\n+0.03 fixedbugs/bug083\n+0.04 fixedbugs/bug084\n+0.02 fixedbugs/bug085\n+0.03 fixedbugs/bug086\n+0.00 fixedbugs/bug087\n+0.01 fixedbugs/bug088\n+0.00 fixedbugs/bug089\n+0.03 fixedbugs/bug090\n+0.02 fixedbugs/bug091\n+0.03 fixedbugs/bug092\n+0.03 fixedbugs/bug093\n+0.00 fixedbugs/bug094\n+0.00 fixedbugs/bug096\n+0.03 fixedbugs/bug097\n+0.00 fixedbugs/bug098\n+0.03 fixedbugs/bug099\n+0.03 fixedbugs/bug101\n+0.03 fixedbugs/bug102\n+0.02 fixedbugs/bug103\n+0.03 fixedbugs/bug104\n+0.01 fixedbugs/bug106\n+0.03 fixedbugs/bug107\n+0.03 fixedbugs/bug108\n+0.00 fixedbugs/bug109\n+0.03 fixedbugs/bug110\n+0.03 fixedbugs/bug111\n+0.00 fixedbugs/bug112\n+0.03 fixedbugs/bug113\n+0.03 fixedbugs/bug114\n+0.00 fixedbugs/bug115\n+0.03 fixedbugs/bug116\n+0.02 fixedbugs/bug117\n+0.00 fixedbugs/bug118\n+0.03 fixedbugs/bug119\n+0.11 fixedbugs/bug120\n+0.02 fixedbugs/bug121\n+0.03 fixedbugs/bug122\n+0.03 fixedbugs/bug123\n+0.02 fixedbugs/bug126\n+0.02 fixedbugs/bug127\n+0.03 fixedbugs/bug128\n+0.01 fixedbugs/bug129\n+0.08 fixedbugs/bug130\n+0.02 fixedbugs/bug131\n+0.02 fixedbugs/bug132\n+0.03 fixedbugs/bug133\n+0.00 fixedbugs/bug135\n+0.02 fixedbugs/bug136\n+0.00 fixedbugs/bug137\n+0.00 fixedbugs/bug139\n+0.00 fixedbugs/bug140\n+0.07 fixedbugs/bug141\n+0.03 fixedbugs/bug142\n+0.00 fixedbugs/bug143\n+0.00 fixedbugs/bug144\n+0.00 fixedbugs/bug145\n+0.03 fixedbugs/bug146\n+0.06 fixedbugs/bug147\n+0.03 fixedbugs/bug148\n+0.00 fixedbugs/bug149\n+0.00 fixedbugs/bug150\n+0.00 fixedbugs/bug151\n+0.03 fixedbugs/bug1515\n+0.03 fixedbugs/bug152\n+0.14 fixedbugs/bug154\n+0.03 fixedbugs/bug155\n+0.00 fixedbugs/bug156\n+0.00 fixedbugs/bug157\n+0.00 fixedbugs/bug158\n+0.07 fixedbugs/bug159\n+0.09 fixedbugs/bug160\n+0.00 fixedbugs/bug161\n+0.02 fixedbugs/bug163\n+0.00 fixedbugs/bug164\n+0.03 fixedbugs/bug165\n+0.03 fixedbugs/bug167\n+0.03 fixedbugs/bug168\n+0.02 fixedbugs/bug169\n+0.03 fixedbugs/bug170\n+0.03 fixedbugs/bug171\n+0.02 fixedbugs/bug172\n+0.00 fixedbugs/bug173\n+0.00 fixedbugs/bug174\n+0.03 fixedbugs/bug175\n+0.03 fixedbugs/bug176\n+0.09 fixedbugs/bug177\n+0.03 fixedbugs/bug178\n+0.03 fixedbugs/bug179\n+0.03 fixedbugs/bug180\n+0.03 fixedbugs/bug181\n+0.02 fixedbugs/bug182\n+0.03 fixedbugs/bug183\n+0.15 fixedbugs/bug184\n+0.04 fixedbugs/bug185\n+0.02 fixedbugs/bug186\n+0.08 fixedbugs/bug187\n+0.03 fixedbugs/bug188\n+0.03 fixedbugs/bug189\n+0.00 fixedbugs/bug190\n+0.04 fixedbugs/bug191\n+0.03 fixedbugs/bug192\n+0.03 fixedbugs/bug193\n+0.03 fixedbugs/bug194\n+0.02 fixedbugs/bug195\n+0.04 fixedbugs/bug196\n+0.02 fixedbugs/bug197\n+0.03 fixedbugs/bug198\n+0.03 fixedbugs/bug199\n+0.03 fixedbugs/bug200\n+0.03 fixedbugs/bug201\n+0.03 fixedbugs/bug202\n+0.03 fixedbugs/bug203\n+0.03 fixedbugs/bug204\n+0.02 fixedbugs/bug205\n+0.21 fixedbugs/bug206\n+0.14 fixedbugs/bug207\n+0.02 fixedbugs/bug208\n+0.02 fixedbugs/bug209\n+0.03 fixedbugs/bug211\n+0.03 fixedbugs/bug212\n+0.03 fixedbugs/bug213\n+0.00 fixedbugs/bug214\n+0.02 fixedbugs/bug215\n+0.00 fixedbugs/bug216\n+0.03 fixedbugs/bug217\n+0.00 fixedbugs/bug218\n+0.00 fixedbugs/bug219\n+0.04 fixedbugs/bug221\n+0.01 fixedbugs/bug222\n+0.00 fixedbugs/bug223\n+0.03 fixedbugs/bug224\n+0.03 fixedbugs/bug225\n+0.03 fixedbugs/bug227\n+0.03 fixedbugs/bug228\n+0.03 fixedbugs/bug229\n+0.03 fixedbugs/bug230\n+0.02 fixedbugs/bug231\n+0.00 fixedbugs/bug232\n+0.01 fixedbugs/bug233\n+0.04 fixedbugs/bug234\n+0.00 fixedbugs/bug235\n+0.04 fixedbugs/bug236\n+0.15 fixedbugs/bug237\n+0.03 fixedbugs/bug238\n+0.00 fixedbugs/bug239\n+0.03 fixedbugs/bug240\n+0.03 fixedbugs/bug241\n+0.04 fixedbugs/bug242\n+0.04 fixedbugs/bug243\n+0.03 fixedbugs/bug244\n+0.00 fixedbugs/bug245\n+0.03 fixedbugs/bug246\n+0.03 fixedbugs/bug247\n+0.11 fixedbugs/bug248\n+0.03 fixedbugs/bug249\n+0.00 fixedbugs/bug250\n+0.03 fixedbugs/bug251\n+0.03 fixedbugs/bug252\n+0.03 fixedbugs/bug253\n+0.03 fixedbugs/bug254\n+0.03 fixedbugs/bug255\n+0.03 fixedbugs/bug256\n+0.47 fixedbugs/bug257\n+0.14 fixedbugs/bug258\n+0.16 fixedbugs/bug259\n+0.16 fixedbugs/bug260\n+0.03 fixedbugs/bug261\n+0.10 fixedbugs/bug262\n+0.03 fixedbugs/bug263\n+0.03 fixedbugs/bug264\n+0.07 fixedbugs/bug265\n+0.03 fixedbugs/bug266\n+0.00 fixedbugs/bug267\n+0.03 fixedbugs/bug269\n+0.13 fixedbugs/bug271\n+0.02 fixedbugs/bug272\n+0.04 fixedbugs/bug273\n+0.02 fixedbugs/bug274\n+0.00 fixedbugs/bug275\n+0.03 fixedbugs/bug276\n+0.00 fixedbugs/bug277\n+0.03 fixedbugs/bug278\n+0.04 fixedbugs/bug279\n+0.02 fixedbugs/bug280\n+0.04 fixedbugs/bug281\n+0.00 fixedbugs/bug282\n+0.00 fixedbugs/bug283\n+0.03 fixedbugs/bug284\n+0.05 fixedbugs/bug285\n+0.04 fixedbugs/bug286\n+0.02 fixedbugs/bug287\n+0.00 fixedbugs/bug288\n+0.02 fixedbugs/bug289\n+0.04 fixedbugs/bug290\n+0.04 fixedbugs/bug291\n+0.03 fixedbugs/bug292\n+0.04 fixedbugs/bug293\n+0.03 fixedbugs/bug294\n+0.16 fixedbugs/bug295\n+0.04 fixedbugs/bug296\n+0.03 fixedbugs/bug297\n+0.03 fixedbugs/bug298\n+0.03 fixedbugs/bug299\n+0.03 fixedbugs/bug300\n+0.00 fixedbugs/bug301\n+0.04 fixedbugs/bug302\n+0.05 fixedbugs/bug303\n+0.00 fixedbugs/bug304\n+0.03 fixedbugs/bug305\n+0.01 fixedbugs/bug306\n+0.00 fixedbugs/bug307\n+0.01 fixedbugs/bug308\n+0.00 fixedbugs/bug309\n+0.04 fixedbugs/bug311\n+0.03 fixedbugs/bug312\n+0.04 fixedbugs/bug313\n+0.04 fixedbugs/bug314\n+0.00 fixedbugs/bug315\n+0.00 fixedbugs/bug316\n+0.03 fixedbugs/bug317\n+0.03 fixedbugs/bug318\n+0.00 fixedbugs/bug319\n+0.03 fixedbugs/bug320\n+0.14 fixedbugs/bug321\n+0.04 fixedbugs/bug322\n+0.03 fixedbugs/bug323\n+0.04 fixedbugs/bug324\n+0.03 fixedbugs/bug325\n+0.02 fixedbugs/bug326\n+0.04 fixedbugs/bug327\n+0.03 fixedbugs/bug328\n+0.04 fixedbugs/bug329\n+0.02 fixedbugs/bug330\n+0.04 fixedbugs/bug331\n+0.02 fixedbugs/bug332\n+0.03 fixedbugs/bug333\n+0.01 fixedbugs/bug334\n+0.01 fixedbugs/bug335\n+0.04 fixedbugs/bug336\n+0.03 fixedbugs/bug337\n+0.00 fixedbugs/bug338\n+0.03 fixedbugs/bug339\n+0.02 fixedbugs/bug340\n+0.03 fixedbugs/bug341\n+0.02 fixedbugs/bug342\n+0.04 fixedbugs/bug343\n+0.02 fixedbugs/bug344\n+0.03 fixedbugs/bug345\n+0.08 fixedbugs/bug346\n+0.04 fixedbugs/bug347\n+0.06 fixedbugs/bug348\n+0.03 fixedbugs/bug349\n+0.03 fixedbugs/bug350\n+0.02 fixedbugs/bug351\n+0.03 fixedbugs/bug352\n+0.03 fixedbugs/bug353\n+0.00 fixedbugs/bug354\n+0.03 fixedbugs/bug355\n+0.03 fixedbugs/bug356\n+0.02 fixedbugs/bug357\n+0.04 fixedbugs/bug358\n+0.00 fixedbugs/bug361\n+0.03 fixedbugs/bug362\n+0.03 fixedbugs/bug363\n+0.15 fixedbugs/bug364\n+0.02 fixedbugs/bug365\n+0.03 fixedbugs/bug366\n+0.03 fixedbugs/bug367\n+0.03 fixedbugs/bug368\n+0.51 fixedbugs/bug369\n+0.03 fixedbugs/bug370\n+0.02 fixedbugs/bug371\n+0.03 fixedbugs/bug372\n+0.03 fixedbugs/bug373\n+0.03 fixedbugs/bug374\n+0.03 fixedbugs/bug375\n+0.03 fixedbugs/bug376\n+0.01 fixedbugs/bug377\n+0.03 fixedbugs/bug378\n+0.02 fixedbugs/bug379\n+0.00 fixedbugs/bug380\n+0.03 fixedbugs/bug381\n+0.01 fixedbugs/bug382\n+0.03 fixedbugs/bug383\n+0.03 fixedbugs/bug384\n+0.00 fixedbugs/bug385_32\n+0.03 fixedbugs/bug385_64\n+0.03 fixedbugs/bug386\n+0.01 fixedbugs/bug387\n+0.02 fixedbugs/bug388\n+0.03 fixedbugs/bug389\n+0.03 fixedbugs/bug390\n+0.00 fixedbugs/bug391\n+0.01 fixedbugs/bug392\n+0.00 fixedbugs/bug393\n+0.03 fixedbugs/bug394\n+0.00 fixedbugs/bug395\n+0.01 fixedbugs/bug396"}, {"sha": "366982e67f12e8ecb4d381f022342a7fb4bffce7", "filename": "gcc/testsuite/go.test/test/turing.go", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fturing.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fturing.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fturing.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -10,42 +10,47 @@ package main\n \n var p, pc int\n var a [30000]byte\n+\n const prog = \"++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.!\"\n \n func scan(dir int) {\n \tfor nest := dir; dir*nest > 0; pc += dir {\n \t\tswitch prog[pc+dir] {\n-\t\t\tcase ']':\n-\t\t\t\tnest--\n-\t\t\tcase '[':\n-\t\t\t\tnest++\n+\t\tcase ']':\n+\t\t\tnest--\n+\t\tcase '[':\n+\t\t\tnest++\n \t\t}\n \t}\n }\n \n func main() {\n+\tr := \"\"\n \tfor {\n \t\tswitch prog[pc] {\n-\t\t\tcase '>':\n-\t\t\t\t\tp++\n-\t\t\tcase '<':\n-\t\t\t\t\tp--\n-\t\t\tcase '+':\n-\t\t\t\t\ta[p]++\n-\t\t\tcase '-':\n-\t\t\t\t\ta[p]--\n-\t\t\tcase '.':\n-\t\t\t\t\tprint(string(a[p]))\n-\t\t\tcase '[':\n-\t\t\t\tif a[p] == 0 {\n-\t\t\t\t\tscan(1)\n-\t\t\t\t}\n-\t\t\tcase ']':\n-\t\t\t\tif a[p] != 0 {\n-\t\t\t\t\tscan(-1)\n-\t\t\t\t}\n-\t\t\tdefault:\n-\t\t\t\t\treturn\n+\t\tcase '>':\n+\t\t\tp++\n+\t\tcase '<':\n+\t\t\tp--\n+\t\tcase '+':\n+\t\t\ta[p]++\n+\t\tcase '-':\n+\t\t\ta[p]--\n+\t\tcase '.':\n+\t\t\tr += string(a[p])\n+\t\tcase '[':\n+\t\t\tif a[p] == 0 {\n+\t\t\t\tscan(1)\n+\t\t\t}\n+\t\tcase ']':\n+\t\t\tif a[p] != 0 {\n+\t\t\t\tscan(-1)\n+\t\t\t}\n+\t\tdefault:\n+\t\t\tif r != \"Hello World!\\n\" {\n+\t\t\t\tpanic(r)\n+\t\t\t}\n+\t\t\treturn\n \t\t}\n \t\tpc++\n \t}"}, {"sha": "3e3acdae37747a6337d075ec9421505dc7f7111d", "filename": "gcc/testsuite/go.test/test/typeswitch2.go", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ftypeswitch2.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ftypeswitch2.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ftypeswitch2.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -18,11 +18,27 @@ func whatis(x interface{}) string {\n \t\treturn \"Reader1\"\n \tcase io.Reader: // ERROR \"duplicate\"\n \t\treturn \"Reader2\"\n-\tcase interface { r(); w() }:\n+\tcase interface {\n+\t\tr()\n+\t\tw()\n+\t}:\n \t\treturn \"rw\"\n-\tcase interface { w(); r() }:\t// ERROR \"duplicate\"\n+\tcase interface {\t// GCCGO_ERROR \"duplicate\"\n+\t\tw()\n+\t\tr()\n+\t}: // GC_ERROR \"duplicate\"\n \t\treturn \"wr\"\n-\t\n+\n \t}\n \treturn \"\"\n }\n+\n+func notused(x interface{}) {\n+\t// The first t is in a different scope than the 2nd t; it cannot\n+\t// be accessed (=> declared and not used error); but it is legal\n+\t// to declare it.\n+\tswitch t := 0; t := x.(type) { // ERROR \"declared and not used\"\n+\tcase int:\n+\t\t_ = t // this is using the t of \"t := x.(type)\"\n+\t}\n+}"}, {"sha": "99d08a20f777d2a863304060d0d4f5f170720e1f", "filename": "gcc/testsuite/go.test/test/typeswitch3.go", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ftypeswitch3.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ftypeswitch3.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Ftypeswitch3.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -0,0 +1,20 @@\n+// errchk $G -e $D/$F.go\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+package main\n+\n+\n+type I interface {\n+       M()\n+}\n+\n+func main(){\n+       var x I\n+       switch x.(type) {\n+       case string:\t// ERROR \"impossible\"\n+               println(\"FAIL\")\n+       }\n+}"}, {"sha": "3b08e774cc193ce3034ed8f06272ba97deca9696", "filename": "gcc/testsuite/go.test/test/zerodivide.go", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fzerodivide.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fzerodivide.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fzerodivide.go?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -9,13 +9,10 @@ package main\n import (\n \t\"fmt\"\n \t\"math\"\n+\t\"runtime\"\n \t\"strings\"\n )\n \n-type Error interface {\n-\tString() string\n-}\n-\n type ErrorTest struct {\n \tname string\n \tfn   func()\n@@ -161,10 +158,10 @@ var errorTests = []ErrorTest{\n \tErrorTest{\"complex128 1/0\", func() { use(e128 / d128) }, \"\"},\n }\n \n-func error(fn func()) (error string) {\n+func error_(fn func()) (error string) {\n \tdefer func() {\n \t\tif e := recover(); e != nil {\n-\t\t\terror = e.(Error).String()\n+\t\t\terror = e.(runtime.Error).Error()\n \t\t}\n \t}()\n \tfn()\n@@ -199,7 +196,7 @@ func main() {\n \t\tif t.err != \"\" {\n \t\t\tcontinue\n \t\t}\n-\t\terr := error(t.fn)\n+\t\terr := error_(t.fn)\n \t\tswitch {\n \t\tcase t.err == \"\" && err == \"\":\n \t\t\t// fine"}, {"sha": "209b8f8d6757c8a9f510a8a954608b3e9265df41", "filename": "gcc/testsuite/lib/go-torture.exp", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Flib%2Fgo-torture.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/efcf639fab17cac5437f70e3a59795ac320ddc37/gcc%2Ftestsuite%2Flib%2Fgo-torture.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Fgo-torture.exp?ref=efcf639fab17cac5437f70e3a59795ac320ddc37", "patch": "@@ -1,4 +1,4 @@\n-# Copyright (C) 2009 Free Software Foundation, Inc.\n+# Copyright (C) 2009, 2011, 2012 Free Software Foundation, Inc.\n \n # This program is free software; you can redistribute it and/or modify\n # it under the terms of the GNU General Public License as published by\n@@ -138,6 +138,7 @@ proc go-torture-execute { src } {\n     global tool\n     global compiler_conditional_xfail_data\n     global TORTURE_OPTIONS\n+    global go_compile_args\n     global go_execute_args\n \n     # Check for alternate driver.\n@@ -156,6 +157,9 @@ proc go-torture-execute { src } {\n     set executable $tmpdir/[file tail [file rootname $src].x]\n     regsub \"(?q)$srcdir/\" $src \"\" testcase\n \n+    if { ! [info exists go_compile_args] } {\n+\tset go_compile_args \"\"\n+    }\n     if { ! [info exists go_execute_args] } {\n \tset go_execute_args \"\"\n     }\n@@ -194,6 +198,9 @@ proc go-torture-execute { src } {\n \tif { $additional_flags != \"\" } {\n \t    lappend options \"additional_flags=$additional_flags\"\n \t}\n+\tif { $go_compile_args != \"\" } {\n+\t    lappend options \"additional_flags=$go_compile_args\"\n+\t}\n \tset comp_output [go_target_compile \"$src\" \"$executable\" executable $options]\n \n \t# See if we got something bad."}]}