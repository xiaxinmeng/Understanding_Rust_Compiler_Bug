{"sha": "4cbdcd40faee48d744e65c0ec05522f58147110d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGNiZGNkNDBmYWVlNDhkNzQ0ZTY1YzBlYzA1NTIyZjU4MTQ3MTEwZA==", "commit": {"author": {"name": "Tom de Vries", "email": "tom@codesourcery.com", "date": "2011-10-23T16:06:32Z"}, "committer": {"name": "Tom de Vries", "email": "vries@gcc.gnu.org", "date": "2011-10-23T16:06:32Z"}, "message": "re PR tree-optimization/50763 (ICE: verify_gimple failed: missing PHI def with -ftree-tail-merge)\n\n2011-10-23  Tom de Vries  <tom@codesourcery.com>\n\n\tPR tree-optimization/50763\n\t* tree-ssa-tail-merge.c (same_succ_flush_bb): New function, factored out\n\tof ...\n\t(same_succ_flush_bbs): Use same_succ_flush_bb.\n\t(purge_bbs): Remove argument.  Remove calls to same_succ_flush_bbs,\n\trelease_last_vdef and delete_basic_block.\n\t(unlink_virtual_phi): New function.\n\t(update_vuses): Add and use vuse1_phi_args argument.  Set var to\n\tSSA_NAME_VAR of vuse1 or vuse2, and use var.  Handle case that def_stmt2\n\tis NULL.  Use phi result as phi arg in case vuse1 or vuse2 is NULL_TREE.\n\tReplace uses of vuse1 if vuse2 is NULL_TREE.  Fix code to limit\n\treplacement of uses.  Propagate phi argument for phis with a single\n\targument.\n\t(replace_block_by): Update vops if phi_vuse1 or phi_vuse2 is NULL_TREE.\n\tSet vuse1_phi_args if vuse1 is a phi defined in bb1.  Add vuse1_phi_args\n\tas argument to call to update_vuses.  Call release_last_vdef,\n\tsame_succ_flush_bb, delete_basic_block.  Update CDI_DOMINATORS info.\n\t(tail_merge_optimize): Remove argument in call to purge_bbs.  Remove\n\tcall to free_dominance_info.  Only call calculate_dominance_info once.\n\nFrom-SVN: r180341", "tree": {"sha": "e9acfb687f9f02c47c7aa67a50b60e586e7bf58d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9acfb687f9f02c47c7aa67a50b60e586e7bf58d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4cbdcd40faee48d744e65c0ec05522f58147110d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbdcd40faee48d744e65c0ec05522f58147110d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cbdcd40faee48d744e65c0ec05522f58147110d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cbdcd40faee48d744e65c0ec05522f58147110d/comments", "author": null, "committer": null, "parents": [{"sha": "4db183a2d5c98d60144b88dcf402f06fc2103200", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4db183a2d5c98d60144b88dcf402f06fc2103200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4db183a2d5c98d60144b88dcf402f06fc2103200"}], "stats": {"total": 165, "additions": 115, "deletions": 50}, "files": [{"sha": "525ced515199244ae1b0e4eae152cbb9d4babfaa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbdcd40faee48d744e65c0ec05522f58147110d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbdcd40faee48d744e65c0ec05522f58147110d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4cbdcd40faee48d744e65c0ec05522f58147110d", "patch": "@@ -1,3 +1,25 @@\n+2011-10-23  Tom de Vries  <tom@codesourcery.com>\n+\n+\tPR tree-optimization/50763\n+\t* tree-ssa-tail-merge.c (same_succ_flush_bb): New function, factored out\n+\tof ...\n+\t(same_succ_flush_bbs): Use same_succ_flush_bb.\n+\t(purge_bbs): Remove argument.  Remove calls to same_succ_flush_bbs,\n+\trelease_last_vdef and delete_basic_block.\n+\t(unlink_virtual_phi): New function.\n+\t(update_vuses): Add and use vuse1_phi_args argument.  Set var to\n+\tSSA_NAME_VAR of vuse1 or vuse2, and use var.  Handle case that def_stmt2\n+\tis NULL.  Use phi result as phi arg in case vuse1 or vuse2 is NULL_TREE.\n+\tReplace uses of vuse1 if vuse2 is NULL_TREE.  Fix code to limit\n+\treplacement of uses.  Propagate phi argument for phis with a single\n+\targument.\n+\t(replace_block_by): Update vops if phi_vuse1 or phi_vuse2 is NULL_TREE.\n+\tSet vuse1_phi_args if vuse1 is a phi defined in bb1.  Add vuse1_phi_args\n+\tas argument to call to update_vuses.  Call release_last_vdef,\n+\tsame_succ_flush_bb, delete_basic_block.  Update CDI_DOMINATORS info.\n+\t(tail_merge_optimize): Remove argument in call to purge_bbs.  Remove\n+\tcall to free_dominance_info.  Only call calculate_dominance_info once.\n+\n 2011-10-23  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* fold-const.c (invert_tree_comparison): Always invert EQ_EXPR/NE_EXPR."}, {"sha": "f7b2f5278d7a7b896b57726202b7cc600d49de36", "filename": "gcc/tree-ssa-tail-merge.c", "status": "modified", "additions": 93, "deletions": 50, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4cbdcd40faee48d744e65c0ec05522f58147110d/gcc%2Ftree-ssa-tail-merge.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4cbdcd40faee48d744e65c0ec05522f58147110d/gcc%2Ftree-ssa-tail-merge.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-tail-merge.c?ref=4cbdcd40faee48d744e65c0ec05522f58147110d", "patch": "@@ -753,6 +753,19 @@ delete_basic_block_same_succ (basic_block bb)\n     bitmap_set_bit (deleted_bb_preds, e->src->index);\n }\n \n+/* Removes BB from its corresponding same_succ.  */\n+\n+static void\n+same_succ_flush_bb (basic_block bb)\n+{\n+  same_succ same = BB_SAME_SUCC (bb);\n+  BB_SAME_SUCC (bb) = NULL;\n+  if (bitmap_single_bit_set_p (same->bbs))\n+    htab_remove_elt_with_hash (same_succ_htab, same, same->hashval);\n+  else\n+    bitmap_clear_bit (same->bbs, bb->index);\n+}\n+\n /* Removes all bbs in BBS from their corresponding same_succ.  */\n \n static void\n@@ -762,15 +775,7 @@ same_succ_flush_bbs (bitmap bbs)\n   bitmap_iterator bi;\n \n   EXECUTE_IF_SET_IN_BITMAP (bbs, 0, i, bi)\n-    {\n-      basic_block bb = BASIC_BLOCK (i);\n-      same_succ same = BB_SAME_SUCC (bb);\n-      BB_SAME_SUCC (bb) = NULL;\n-      if (bitmap_single_bit_set_p (same->bbs))\n-\thtab_remove_elt_with_hash (same_succ_htab, same, same->hashval);\n-      else\n-\tbitmap_clear_bit (same->bbs, i);\n-    }\n+    same_succ_flush_bb (BASIC_BLOCK (i));\n }\n \n /* Release the last vdef in BB, either normal or phi result.  */\n@@ -807,23 +812,8 @@ release_last_vdef (basic_block bb)\n /* Delete all deleted_bbs.  */\n \n static void\n-purge_bbs (bool update_vops)\n+purge_bbs (void)\n {\n-  unsigned int i;\n-  bitmap_iterator bi;\n-  basic_block bb;\n-\n-  same_succ_flush_bbs (deleted_bbs);\n-\n-  EXECUTE_IF_SET_IN_BITMAP (deleted_bbs, 0, i, bi)\n-    {\n-      bb = BASIC_BLOCK (i);\n-      if (!update_vops)\n-\trelease_last_vdef (bb);\n-\n-      delete_basic_block (bb);\n-    }\n-\n   bitmap_and_compl_into (deleted_bb_preds, deleted_bbs);\n   bitmap_clear (deleted_bbs);\n }\n@@ -1363,26 +1353,56 @@ find_clusters (void)\n     }\n }\n \n+/* Replace uses of the result of PHI with NAME.  */\n+\n+static void\n+unlink_virtual_phi (gimple phi, tree name)\n+{\n+  use_operand_p use_p;\n+  imm_use_iterator iter;\n+  gimple use_stmt;\n+  tree vdef = gimple_phi_result (phi);\n+\n+  if (!vdef\n+      || TREE_CODE (vdef) != SSA_NAME)\n+    return;\n+\n+  FOR_EACH_IMM_USE_STMT (use_stmt, iter, vdef)\n+    {\n+      FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n+\tSET_USE (use_p, name);\n+    }\n+\n+  if (SSA_NAME_OCCURS_IN_ABNORMAL_PHI (vdef))\n+    SSA_NAME_OCCURS_IN_ABNORMAL_PHI (name) = 1;\n+}\n+\n /* Create or update a vop phi in BB2.  Use VUSE1 arguments for all the\n    REDIRECTED_EDGES, or if VUSE1 is NULL_TREE, use BB_VOP_AT_EXIT.  If a new\n    phis is created, use the phi instead of VUSE2 in BB2.  */\n \n static void\n-update_vuses (tree vuse1, tree vuse2, basic_block bb2,\n+update_vuses (bool vuse1_phi_args, tree vuse1, tree vuse2, basic_block bb2,\n               VEC (edge,heap) *redirected_edges)\n {\n   gimple stmt, phi = NULL;\n-  tree lhs = NULL_TREE, arg;\n+  tree lhs = NULL_TREE, arg, var;\n   unsigned int i;\n-  gimple def_stmt2;\n+  gimple def_stmt2 = NULL;\n   imm_use_iterator iter;\n   use_operand_p use_p;\n   edge_iterator ei;\n   edge e;\n \n-  def_stmt2 = SSA_NAME_DEF_STMT (vuse2);\n+  if (vuse2 != NULL_TREE)\n+    {\n+      var = SSA_NAME_VAR (vuse2);\n+      def_stmt2 =  SSA_NAME_DEF_STMT (vuse2);\n+    }\n+  else\n+    var = SSA_NAME_VAR (vuse1);\n \n-  if (gimple_bb (def_stmt2) == bb2)\n+  if (def_stmt2 && gimple_bb (def_stmt2) == bb2)\n     /* Update existing phi.  */\n     phi = def_stmt2;\n   else\n@@ -1392,38 +1412,41 @@ update_vuses (tree vuse1, tree vuse2, basic_block bb2,\n \treturn;\n \n       /* Create a phi.  */\n-      lhs = make_ssa_name (SSA_NAME_VAR (vuse2), NULL);\n+      lhs = make_ssa_name (var, NULL);\n       VN_INFO_GET (lhs);\n       phi = create_phi_node (lhs, bb2);\n       SSA_NAME_DEF_STMT (lhs) = phi;\n \n       /* Set default argument vuse2 for all preds.  */\n+      arg = vuse2 == NULL_TREE ? gimple_phi_result (phi): vuse2;\n       FOR_EACH_EDGE (e, ei, bb2->preds)\n-\tadd_phi_arg (phi, vuse2, e, UNKNOWN_LOCATION);\n+\tadd_phi_arg (phi, arg, e, UNKNOWN_LOCATION);\n     }\n \n   /* Update phi.  */\n   for (i = 0; i < EDGE_COUNT (redirected_edges); ++i)\n     {\n       e = VEC_index (edge, redirected_edges, i);\n-      if (vuse1 != NULL_TREE)\n-\targ = vuse1;\n-      else\n+      if (vuse1_phi_args)\n \targ = BB_VOP_AT_EXIT (e->src);\n+      else\n+\targ = vuse1 == NULL_TREE ? gimple_phi_result (phi): vuse1;\n+\n       add_phi_arg (phi, arg, e, UNKNOWN_LOCATION);\n     }\n \n   /* Return if we updated an existing phi.  */\n-  if (gimple_bb (def_stmt2) == bb2)\n+  if (def_stmt2 && gimple_bb (def_stmt2) == bb2)\n     return;\n \n-  /* Replace relevant uses of vuse2 with the newly created phi.  */\n-  FOR_EACH_IMM_USE_STMT (stmt, iter, vuse2)\n+  /* Replace relevant uses with the newly created phi.  */\n+  FOR_EACH_IMM_USE_STMT (stmt, iter, vuse2 == NULL_TREE ? vuse1 : vuse2)\n     {\n       if (stmt == phi)\n \tcontinue;\n-      if (gimple_code (stmt) != GIMPLE_PHI)\n-\tif (gimple_bb (stmt) != bb2)\n+\n+      if (gimple_code (stmt) != GIMPLE_PHI\n+\t  && !dominated_by_p (CDI_DOMINATORS, gimple_bb (stmt), bb2))\n \t  continue;\n \n       FOR_EACH_IMM_USE_ON_STMT (use_p, iter)\n@@ -1432,8 +1455,16 @@ update_vuses (tree vuse1, tree vuse2, basic_block bb2,\n \t    {\n \t      unsigned int pred_index = PHI_ARG_INDEX_FROM_USE (use_p);\n \t      basic_block pred = EDGE_PRED (gimple_bb (stmt), pred_index)->src;\n-\t      if (pred !=  bb2)\n+\t      if (!dominated_by_p (CDI_DOMINATORS, pred, bb2))\n \t\tcontinue;\n+\n+\t      if (pred == bb2 && EDGE_COUNT (gimple_bb (stmt)->preds) == 2)\n+\t\t{\n+\t\t  gimple_stmt_iterator gsi = gsi_for_stmt (stmt);\n+\t\t  unlink_virtual_phi (stmt, lhs);\n+\t\t  remove_phi_node (&gsi, true);\n+\t\t  break;\n+\t\t}\n \t    }\n \t  SET_USE (use_p, lhs);\n \t  update_stmt (stmt);\n@@ -1507,6 +1538,8 @@ replace_block_by (basic_block bb1, basic_block bb2, bool update_vops)\n   VEC (edge,heap) *redirected_edges = NULL;\n   edge e;\n   edge_iterator ei;\n+  bool vuse1_phi_args = false;\n+  VEC (basic_block,heap) *fix_dom_bb;\n \n   phi_vuse2 = vop_at_entry (bb2);\n   if (phi_vuse2 != NULL_TREE && TREE_CODE (phi_vuse2) != SSA_NAME)\n@@ -1517,11 +1550,11 @@ replace_block_by (basic_block bb1, basic_block bb2, bool update_vops)\n       /* Find the vops at entry of bb1 and bb2.  */\n       phi_vuse1 = vop_at_entry (bb1);\n \n-      /* If one of the 2 not found, it means there's no need to update.  */\n-      update_vops = phi_vuse1 != NULL_TREE && phi_vuse2 != NULL_TREE;\n+      /* If both are not found, it means there's no need to update.  */\n+      update_vops = phi_vuse1 != NULL_TREE || phi_vuse2 != NULL_TREE;\n     }\n \n-  if (update_vops && gimple_bb (SSA_NAME_DEF_STMT (phi_vuse1)) == bb1)\n+  if (phi_vuse1 && gimple_bb (SSA_NAME_DEF_STMT (phi_vuse1)) == bb1)\n     {\n       /* If the vop at entry of bb1 is a phi, save the phi alternatives in\n \t BB_VOP_AT_EXIT, before we lose that information by redirecting the\n@@ -1531,7 +1564,7 @@ replace_block_by (basic_block bb1, basic_block bb2, bool update_vops)\n \t  arg = PHI_ARG_DEF_FROM_EDGE (SSA_NAME_DEF_STMT (phi_vuse1), e);\n \t  BB_VOP_AT_EXIT (e->src) = arg;\n \t}\n-      phi_vuse1 = NULL;\n+      vuse1_phi_args = true;\n     }\n \n   /* Mark the basic block for later deletion.  */\n@@ -1556,9 +1589,22 @@ replace_block_by (basic_block bb1, basic_block bb2, bool update_vops)\n   /* Update the vops.  */\n   if (update_vops)\n     {\n-      update_vuses (phi_vuse1, phi_vuse2, bb2, redirected_edges);\n+      update_vuses (vuse1_phi_args, phi_vuse1, phi_vuse2, bb2,\n+\t\t    redirected_edges);\n       VEC_free (edge, heap, redirected_edges);\n     }\n+  else\n+    release_last_vdef (bb1);\n+\n+  same_succ_flush_bb (bb1);\n+  delete_basic_block (bb1);\n+\n+  fix_dom_bb = VEC_alloc (basic_block, heap, 2);\n+  VEC_safe_push (basic_block, heap, fix_dom_bb, bb2);\n+  FOR_EACH_EDGE (e, ei, bb2->succs)\n+    VEC_safe_push (basic_block, heap, fix_dom_bb, e->dest);\n+  iterate_fix_dominators (CDI_DOMINATORS, fix_dom_bb, false);\n+  VEC_free (basic_block, heap, fix_dom_bb);\n }\n \n /* Bbs for which update_debug_stmt need to be called.  */\n@@ -1708,13 +1754,11 @@ tail_merge_optimize (unsigned int todo)\n       if (nr_bbs_removed == 0)\n \tbreak;\n \n-      free_dominance_info (CDI_DOMINATORS);\n-      purge_bbs (update_vops);\n+      purge_bbs ();\n \n       if (iteration_nr == max_iterations)\n \tbreak;\n \n-      calculate_dominance_info (CDI_DOMINATORS);\n       update_worklist ();\n     }\n \n@@ -1724,7 +1768,6 @@ tail_merge_optimize (unsigned int todo)\n \n   if (nr_bbs_removed_total > 0)\n     {\n-      calculate_dominance_info (CDI_DOMINATORS);\n       update_debug_stmts ();\n \n       if (dump_file && (dump_flags & TDF_DETAILS))"}]}