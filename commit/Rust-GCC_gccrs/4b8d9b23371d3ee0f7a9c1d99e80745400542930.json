{"sha": "4b8d9b23371d3ee0f7a9c1d99e80745400542930", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGI4ZDliMjMzNzFkM2VlMGY3YTljMWQ5OWU4MDc0NTQwMDU0MjkzMA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-07-10T18:12:54Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2019-07-10T18:12:54Z"}, "message": "compiler: finalize methods when importing types\n    \n    This patch changes the compiler to be more aggressive about finalizing\n    methods on imported types, to avoid problems with interface types that\n    are imported but remain unreachable until a later stage in the compilation.\n    \n    The normal pattern prior to this change was that the import process would\n    leave imported interface types alone, and rely on Gogo::finalize_methods\n    to locate and finalize all interface types at a later point. This way\n    of doing things was not working in all cases due to the fact that we can\n    import an interface type that is only reachable from the body of an\n    inlinable function, meaning that we can't \"find\" the type during\n    the methods finalize phase.\n    \n    The importer's Import::read_types() now makes a pass over all imported\n    types to finalize methods on any newly imported type, which takes care\n    of the issue.\n    \n    New test case for this problem in CL 185517.\n    \n    Fixes golang/go#33013\n    \n    Reviewed-on: https://go-review.googlesource.com/c/gofrontend/+/185518\n\nFrom-SVN: r273364", "tree": {"sha": "c5120040301f2abab3b22bbccab6ca5c6c63ddf0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5120040301f2abab3b22bbccab6ca5c6c63ddf0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b8d9b23371d3ee0f7a9c1d99e80745400542930", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8d9b23371d3ee0f7a9c1d99e80745400542930", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b8d9b23371d3ee0f7a9c1d99e80745400542930", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b8d9b23371d3ee0f7a9c1d99e80745400542930/comments", "author": null, "committer": null, "parents": [{"sha": "41112d9519d48a503864a157d90fd3c6ef974bfe", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41112d9519d48a503864a157d90fd3c6ef974bfe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41112d9519d48a503864a157d90fd3c6ef974bfe"}], "stats": {"total": 87, "additions": 65, "deletions": 22}, "files": [{"sha": "7b3f874123da409f818dda759c0ebbcf2f775aa0", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8d9b23371d3ee0f7a9c1d99e80745400542930/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8d9b23371d3ee0f7a9c1d99e80745400542930/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=4b8d9b23371d3ee0f7a9c1d99e80745400542930", "patch": "@@ -1,4 +1,4 @@\n-170ecdf6b2eab8aac2b8c852fa95d3c36d6bf604\n+ec754ff4617d564d3dc377121ea9ac5e55f6535a\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "234a4f44a4bdcb2dd5f5e6b2f6d8bc2f93a34665", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8d9b23371d3ee0f7a9c1d99e80745400542930/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8d9b23371d3ee0f7a9c1d99e80745400542930/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=4b8d9b23371d3ee0f7a9c1d99e80745400542930", "patch": "@@ -3422,24 +3422,6 @@ Gogo::create_function_descriptors()\n   this->traverse(&cfd);\n }\n \n-// Look for interface types to finalize methods of inherited\n-// interfaces.\n-\n-class Finalize_methods : public Traverse\n-{\n- public:\n-  Finalize_methods(Gogo* gogo)\n-    : Traverse(traverse_types),\n-      gogo_(gogo)\n-  { }\n-\n-  int\n-  type(Type*);\n-\n- private:\n-  Gogo* gogo_;\n-};\n-\n // Finalize the methods of an interface type.\n \n int"}, {"sha": "cb8e25f446f926de499ed5d5a3ec4da14293e4ed", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8d9b23371d3ee0f7a9c1d99e80745400542930/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8d9b23371d3ee0f7a9c1d99e80745400542930/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=4b8d9b23371d3ee0f7a9c1d99e80745400542930", "patch": "@@ -3556,6 +3556,24 @@ class Traverse\n   Expressions_seen* expressions_seen_;\n };\n \n+// This class looks for interface types to finalize methods of inherited\n+// interfaces.\n+\n+class Finalize_methods : public Traverse\n+{\n+ public:\n+  Finalize_methods(Gogo* gogo)\n+    : Traverse(traverse_types),\n+      gogo_(gogo)\n+  { }\n+\n+  int\n+  type(Type*);\n+\n+ private:\n+  Gogo* gogo_;\n+};\n+\n // A class which makes it easier to insert new statements before the\n // current statement during a traversal.\n "}, {"sha": "ad7ba7fe3a4d251e8fe9944e25b15e616c930113", "filename": "gcc/go/gofrontend/import.cc", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8d9b23371d3ee0f7a9c1d99e80745400542930/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8d9b23371d3ee0f7a9c1d99e80745400542930/gcc%2Fgo%2Fgofrontend%2Fimport.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.cc?ref=4b8d9b23371d3ee0f7a9c1d99e80745400542930", "patch": "@@ -290,10 +290,16 @@ Import::Import(Stream* stream, Location location)\n   : gogo_(NULL), stream_(stream), location_(location), package_(NULL),\n     add_to_globals_(false), packages_(), type_data_(), type_pos_(0),\n     type_offsets_(), builtin_types_((- SMALLEST_BUILTIN_CODE) + 1),\n-    types_(), version_(EXPORT_FORMAT_UNKNOWN)\n+    types_(), finalizer_(NULL), version_(EXPORT_FORMAT_UNKNOWN)\n {\n }\n \n+Import::~Import()\n+{\n+  if (this->finalizer_ != NULL)\n+    delete this->finalizer_;\n+}\n+\n // Import the data in the associated stream.\n \n Package*\n@@ -672,9 +678,40 @@ Import::read_types()\n \tthis->gogo_->add_named_type(nt);\n     }\n \n+  // Finalize methods for any imported types. This is done after most of\n+  // read_types() is complete so as to avoid method finalization of a type\n+  // whose methods refer to types that are only partially read in.\n+  // See issue #33013 for more on why this is needed.\n+  this->finalize_methods();\n+\n   return true;\n }\n \n+void\n+Import::finalize_methods()\n+{\n+  if (this->finalizer_ == NULL)\n+    this->finalizer_ = new Finalize_methods(gogo_);\n+  Unordered_set(Type*) real_for_named;\n+  for (size_t i = 1; i < this->types_.size(); i++)\n+    {\n+      Type* type = this->types_[i];\n+      if (type != NULL && type->named_type() != NULL)\n+        {\n+          this->finalizer_->type(type);\n+          real_for_named.insert(type->named_type()->real_type());\n+        }\n+    }\n+  for (size_t i = 1; i < this->types_.size(); i++)\n+    {\n+      Type* type = this->types_[i];\n+      if (type != NULL\n+          && type->named_type() == NULL\n+          && real_for_named.find(type) == real_for_named.end())\n+        this->finalizer_->type(type);\n+    }\n+}\n+\n // Import a constant.\n \n void"}, {"sha": "ea01bbcfb4616e54edee296b5ecd8311602e164f", "filename": "gcc/go/gofrontend/import.h", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b8d9b23371d3ee0f7a9c1d99e80745400542930/gcc%2Fgo%2Fgofrontend%2Fimport.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b8d9b23371d3ee0f7a9c1d99e80745400542930/gcc%2Fgo%2Fgofrontend%2Fimport.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fimport.h?ref=4b8d9b23371d3ee0f7a9c1d99e80745400542930", "patch": "@@ -20,6 +20,7 @@ class Expression;\n class Import_function_body;\n class Temporary_statement;\n class Unnamed_label;\n+class Finalize_methods;\n \n // Expressions can be imported either directly from import data (for\n // simple constant expressions that can appear in a const declaration\n@@ -207,8 +208,7 @@ class Import : public Import_expression\n   // Constructor.\n   Import(Stream*, Location);\n \n-  virtual ~Import()\n-  {}\n+  virtual ~Import();\n \n   // Register the builtin types.\n   void\n@@ -423,6 +423,10 @@ class Import : public Import_expression\n     return true;\n   }\n \n+  // Finalize methods for newly imported types.\n+  void\n+  finalize_methods();\n+\n   // The general IR.\n   Gogo* gogo_;\n   // The stream from which to read import data.\n@@ -446,6 +450,8 @@ class Import : public Import_expression\n   std::vector<Named_type*> builtin_types_;\n   // Mapping from exported type codes to Type structures.\n   std::vector<Type*> types_;\n+  // Helper for finalizing methods.\n+  Finalize_methods* finalizer_;\n   // Version of export data we're reading.\n   Export_data_version version_;\n };"}]}