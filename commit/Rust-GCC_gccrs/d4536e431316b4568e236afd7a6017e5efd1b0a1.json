{"sha": "d4536e431316b4568e236afd7a6017e5efd1b0a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDQ1MzZlNDMxMzE2YjQ1NjhlMjM2YWZkN2E2MDE3ZTVlZmQxYjBhMQ==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-08T08:52:56Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-02-08T12:05:44Z"}, "message": "lto/96591 - walk VECTOR_CST elements in walk_tree\n\nThis implements walking of VECTOR_CST elements in walk_tree, mimicing\nthe walk of COMPLEX_CST elements.  Without this free-lang-data fails\nto see some types in case they are only refered to via tree constants\nused only as VECTOR_CST elements.\n\n2021-02-08  Richard Biener  <rguenther@suse.de>\n\n\tPR lto/96591\n\t* tree.c (walk_tree_1): Walk VECTOR_CST elements.\n\n\t* g++.dg/lto/pr96591_0.C: New testcase.", "tree": {"sha": "d441b8a714952a95d33657cae42b7d11b7e01f56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d441b8a714952a95d33657cae42b7d11b7e01f56"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d4536e431316b4568e236afd7a6017e5efd1b0a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4536e431316b4568e236afd7a6017e5efd1b0a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4536e431316b4568e236afd7a6017e5efd1b0a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4536e431316b4568e236afd7a6017e5efd1b0a1/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d701e3eb89870237669ef7bf41394d90c35ae70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d701e3eb89870237669ef7bf41394d90c35ae70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d701e3eb89870237669ef7bf41394d90c35ae70"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "ae2dc98efc4c716c78fe205e1f09fbc0a4c34c3a", "filename": "gcc/testsuite/g++.dg/lto/pr96591_0.C", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4536e431316b4568e236afd7a6017e5efd1b0a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr96591_0.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4536e431316b4568e236afd7a6017e5efd1b0a1/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr96591_0.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Flto%2Fpr96591_0.C?ref=d4536e431316b4568e236afd7a6017e5efd1b0a1", "patch": "@@ -0,0 +1,45 @@\n+// { dg-lto-do assemble }\n+// { dg-lto-options { { -O -flto } } }\n+\n+template <typename scalar_t, unsigned length>\n+struct builtin_simd\n+{\n+  using type [[gnu::vector_size(sizeof(scalar_t) * length)]] = scalar_t;\n+};\n+\n+struct simd_traits\n+{\n+  using scalar_type = int;\n+\n+  template <typename new_scalar_type>\n+  using rebind = typename builtin_simd<new_scalar_type, 1>::type;\n+};\n+\n+template <typename simd_t>\n+constexpr simd_t fill(typename simd_traits::scalar_type const scalar)\n+{\n+  return simd_t{scalar};\n+}\n+\n+class Test\n+{\n+    using score_type = typename builtin_simd<int, 1>::type;\n+    score_type data[1]{fill<score_type>(8)};\n+};\n+\n+struct TestFactoryBase\n+{\n+  virtual Test *CreateTest() = 0;\n+};\n+\n+template <class TestClass>\n+struct TestFactoryImpl : public TestFactoryBase\n+{\n+  Test *CreateTest() override { return new TestClass; }\n+};\n+\n+void MakeAndRegisterTestInfo(TestFactoryBase *factory);\n+\n+int main() {\n+  MakeAndRegisterTestInfo(new TestFactoryImpl<Test>);\n+}"}, {"sha": "c09434d7293b69afebb52888459fe773641dd340", "filename": "gcc/tree.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d4536e431316b4568e236afd7a6017e5efd1b0a1/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d4536e431316b4568e236afd7a6017e5efd1b0a1/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=d4536e431316b4568e236afd7a6017e5efd1b0a1", "patch": "@@ -12131,7 +12131,6 @@ walk_tree_1 (tree *tp, walk_tree_fn func, void *data,\n     case INTEGER_CST:\n     case REAL_CST:\n     case FIXED_CST:\n-    case VECTOR_CST:\n     case STRING_CST:\n     case BLOCK:\n     case PLACEHOLDER_EXPR:\n@@ -12162,6 +12161,18 @@ walk_tree_1 (tree *tp, walk_tree_fn func, void *data,\n \tWALK_SUBTREE_TAIL (TREE_VEC_ELT (*tp, 0));\n       }\n \n+    case VECTOR_CST:\n+      {\n+\tunsigned len = vector_cst_encoded_nelts (*tp);\n+\tif (len == 0)\n+\t  break;\n+\t/* Walk all elements but the first.  */\n+\twhile (--len)\n+\t  WALK_SUBTREE (VECTOR_CST_ENCODED_ELT (*tp, len));\n+\t/* Now walk the first one as a tail call.  */\n+\tWALK_SUBTREE_TAIL (VECTOR_CST_ENCODED_ELT (*tp, 0));\n+      }\n+\n     case COMPLEX_CST:\n       WALK_SUBTREE (TREE_REALPART (*tp));\n       WALK_SUBTREE_TAIL (TREE_IMAGPART (*tp));"}]}