{"sha": "04a9b554ba1a71baae6f985905d92fe693acb437", "node_id": "C_kwDOANBUbNoAKDA0YTliNTU0YmExYTcxYmFhZTZmOTg1OTA1ZDkyZmU2OTNhY2I0Mzc", "commit": {"author": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-09-16T14:22:41Z"}, "committer": {"name": "Kito Cheng", "email": "kito.cheng@sifive.com", "date": "2021-10-25T09:06:18Z"}, "message": "RISC-V: Cost model for zba extension.\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.c (riscv_extend_cost): Handle cost model\n\tfor zba extension.\n\t(riscv_rtx_costs): Ditto.", "tree": {"sha": "93b0f9c82cc582204af5a55fc20749fa826c1475", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/93b0f9c82cc582204af5a55fc20749fa826c1475"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04a9b554ba1a71baae6f985905d92fe693acb437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a9b554ba1a71baae6f985905d92fe693acb437", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04a9b554ba1a71baae6f985905d92fe693acb437", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04a9b554ba1a71baae6f985905d92fe693acb437/comments", "author": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kito-cheng", "id": 2723185, "node_id": "MDQ6VXNlcjI3MjMxODU=", "avatar_url": "https://avatars.githubusercontent.com/u/2723185?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kito-cheng", "html_url": "https://github.com/kito-cheng", "followers_url": "https://api.github.com/users/kito-cheng/followers", "following_url": "https://api.github.com/users/kito-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/kito-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/kito-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kito-cheng/subscriptions", "organizations_url": "https://api.github.com/users/kito-cheng/orgs", "repos_url": "https://api.github.com/users/kito-cheng/repos", "events_url": "https://api.github.com/users/kito-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/kito-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "283b1707f2373794c9ff724f01429586359f0b71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/283b1707f2373794c9ff724f01429586359f0b71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/283b1707f2373794c9ff724f01429586359f0b71"}], "stats": {"total": 81, "additions": 81, "deletions": 0}, "files": [{"sha": "dec31c0ca6f5d660e9b95f1f2f1be978fd9d55bf", "filename": "gcc/config/riscv/riscv.c", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04a9b554ba1a71baae6f985905d92fe693acb437/gcc%2Fconfig%2Friscv%2Friscv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04a9b554ba1a71baae6f985905d92fe693acb437/gcc%2Fconfig%2Friscv%2Friscv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.c?ref=04a9b554ba1a71baae6f985905d92fe693acb437", "patch": "@@ -1703,6 +1703,10 @@ riscv_extend_cost (rtx op, bool unsigned_p)\n     /* We can use ANDI.  */\n     return COSTS_N_INSNS (1);\n \n+  /* ZBA provide zext.w.  */\n+  if (TARGET_ZBA && TARGET_64BIT && unsigned_p && GET_MODE (op) == SImode)\n+    return COSTS_N_INSNS (1);\n+\n   if (!unsigned_p && GET_MODE (op) == SImode)\n     /* We can use SEXT.W.  */\n     return COSTS_N_INSNS (1);\n@@ -1776,6 +1780,21 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n       return false;\n \n     case AND:\n+      /* slli.uw pattern for zba.  */\n+      if (TARGET_ZBA && TARGET_64BIT && mode == DImode\n+\t  && GET_CODE (XEXP (x, 0)) == ASHIFT)\n+\t{\n+\t  rtx and_rhs = XEXP (x, 1);\n+\t  rtx ashift_lhs = XEXP (XEXP (x, 0), 0);\n+\t  rtx ashift_rhs = XEXP (XEXP (x, 0), 1);\n+\t  if (REG_P (ashift_lhs)\n+\t      && CONST_INT_P (ashift_rhs)\n+\t      && CONST_INT_P (and_rhs)\n+\t      && ((INTVAL (and_rhs) >> INTVAL (ashift_rhs)) == 0xffffffff))\n+\t    *total = COSTS_N_INSNS (1);\n+\t    return true;\n+\t}\n+      gcc_fallthrough ();\n     case IOR:\n     case XOR:\n       /* Double-word operations use two single-word operations.  */\n@@ -1867,6 +1886,68 @@ riscv_rtx_costs (rtx x, machine_mode mode, int outer_code, int opno ATTRIBUTE_UN\n \n     case MINUS:\n     case PLUS:\n+      /* add.uw pattern for zba.  */\n+      if (TARGET_ZBA\n+\t  && (TARGET_64BIT && (mode == DImode))\n+\t  && GET_CODE (XEXP (x, 0)) == ZERO_EXTEND\n+\t  && REG_P (XEXP (XEXP (x, 0), 0))\n+\t  && GET_MODE (XEXP (XEXP (x, 0), 0)) == SImode)\n+\t{\n+\t  *total = COSTS_N_INSNS (1);\n+\t  return true;\n+\t}\n+      /* shNadd pattern for zba.  */\n+      if (TARGET_ZBA\n+\t  && ((!TARGET_64BIT && (mode == SImode)) ||\n+\t      (TARGET_64BIT && (mode == DImode)))\n+\t  && (GET_CODE (XEXP (x, 0)) == ASHIFT)\n+\t  && REG_P (XEXP (XEXP (x, 0), 0))\n+\t  && CONST_INT_P (XEXP (XEXP (x, 0), 0))\n+\t  && IN_RANGE (INTVAL (XEXP (XEXP (x, 0), 0)), 1, 3))\n+\t{\n+\t  *total = COSTS_N_INSNS (1);\n+\t  return true;\n+\t}\n+      /* shNadd.uw pattern for zba.\n+\t [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t       (plus:DI\n+\t\t (and:DI (ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n+\t\t\t\t    (match_operand:QI 2 \"immediate_operand\" \"I\"))\n+\t\t\t (match_operand 3 \"immediate_operand\" \"\"))\n+\t\t (match_operand:DI 4 \"register_operand\" \"r\")))]\n+\t \"TARGET_64BIT && TARGET_ZBA\n+\t  && (INTVAL (operands[2]) >= 1) && (INTVAL (operands[2]) <= 3)\n+\t  && (INTVAL (operands[3]) >> INTVAL (operands[2])) == 0xffffffff\"\n+      */\n+      if (TARGET_ZBA\n+\t  && (TARGET_64BIT && (mode == DImode))\n+\t  && (GET_CODE (XEXP (x, 0)) == AND)\n+\t  && (REG_P (XEXP (x, 1))))\n+\t{\n+\t  do {\n+\t    rtx and_lhs = XEXP (XEXP (x, 0), 0);\n+\t    rtx and_rhs = XEXP (XEXP (x, 0), 1);\n+\t    if (GET_CODE (and_lhs) != ASHIFT)\n+\t      break;\n+\t    if (!CONST_INT_P (and_rhs))\n+\t      break;\n+\n+\t    rtx ashift_lhs = XEXP (and_lhs, 0);\n+\t    rtx ashift_rhs = XEXP (and_lhs, 1);\n+\n+\t    if (!CONST_INT_P (ashift_rhs)\n+\t\t|| !IN_RANGE (INTVAL (ashift_rhs), 1, 3))\n+\t      break;\n+\n+\t    if (CONST_INT_P (and_rhs)\n+\t\t&& ((INTVAL (and_rhs) >> INTVAL (ashift_rhs)) == 0xffffffff))\n+\t      {\n+\t\t*total = COSTS_N_INSNS (1);\n+\t\treturn true;\n+\t      }\n+\t  } while (false);\n+\t}\n+\n       if (float_mode_p)\n \t*total = tune_param->fp_add[mode == DFmode];\n       else"}]}