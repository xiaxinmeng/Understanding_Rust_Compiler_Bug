{"sha": "9918e7966c0d51e25b14a99adf87e2fbbe97c2e0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTkxOGU3OTY2YzBkNTFlMjViMTRhOTlhZGY4N2UyZmJiZTk3YzJlMA==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@acm.org", "date": "2017-11-02T18:29:26Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2017-11-02T18:29:26Z"}, "message": "[C++ PATCH] overloaded operator fns [8/N]\n\nhttps://gcc.gnu.org/ml/gcc-patches/2017-11/msg00095.html\n\t* cp-tree.h (IDENTIFIER_NEWDEL_OP_P): Restore, adjust.\n\t(IDENTIFIER_NEW_OP_P): New.\n\t* decl.c (grokdeclarator): Restore IDENTIFIER_NEWDEL_OP_P use.\n\t* pt.c (push_template_decl_real): Likewise.\n\t* typeck.c (check_return_expr): Use IDENTIFIER_NEW_OP_P.\n\nFrom-SVN: r254350", "tree": {"sha": "3b70db062b6d1f096f376d65783b7e331d9a1514", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3b70db062b6d1f096f376d65783b7e331d9a1514"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0/comments", "author": {"login": "urnathan", "id": 13103001, "node_id": "MDQ6VXNlcjEzMTAzMDAx", "avatar_url": "https://avatars.githubusercontent.com/u/13103001?v=4", "gravatar_id": "", "url": "https://api.github.com/users/urnathan", "html_url": "https://github.com/urnathan", "followers_url": "https://api.github.com/users/urnathan/followers", "following_url": "https://api.github.com/users/urnathan/following{/other_user}", "gists_url": "https://api.github.com/users/urnathan/gists{/gist_id}", "starred_url": "https://api.github.com/users/urnathan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/urnathan/subscriptions", "organizations_url": "https://api.github.com/users/urnathan/orgs", "repos_url": "https://api.github.com/users/urnathan/repos", "events_url": "https://api.github.com/users/urnathan/events{/privacy}", "received_events_url": "https://api.github.com/users/urnathan/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "dfa65d3fd1bfe62e2c831f7accf67855219b917f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfa65d3fd1bfe62e2c831f7accf67855219b917f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfa65d3fd1bfe62e2c831f7accf67855219b917f"}], "stats": {"total": 42, "additions": 26, "deletions": 16}, "files": [{"sha": "f1dec178920146f683df687a3cb9184bc53297bc", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9918e7966c0d51e25b14a99adf87e2fbbe97c2e0", "patch": "@@ -1,5 +1,11 @@\n 2017-11-02  Nathan Sidwell  <nathan@acm.org>\n \n+\t* cp-tree.h (IDENTIFIER_NEWDEL_OP_P): Restore, adjust.\n+\t(IDENTIFIER_NEW_OP_P): New.\n+\t* decl.c (grokdeclarator): Restore IDENTIFIER_NEWDEL_OP_P use.\n+\t* pt.c (push_template_decl_real): Likewise.\n+\t* typeck.c (check_return_expr): Use IDENTIFIER_NEW_OP_P.\n+\n \tPR c++/82710\n \t* decl.c (grokdeclarator): Don't warn when parens protect a return\n \ttype from a qualified name.\n@@ -8,16 +14,16 @@\n \n \t* cp-tree.h (enum cp_identifier_kind): Delete cik_newdel_op.\n \tRenumber and reserve udlit value.\n-\t(IDENTIFIER_NEWDEL_OP): Delete.\n-\t(IDENTIFIER_OVL_OP): New.\n-\t(IDENTIFIER_ASSIGN_OP): Adjust.\n-\t(IDENTIFIER_CONV_OP): Adjust.\n+\t(IDENTIFIER_NEWDEL_OP_P): Delete.\n+\t(IDENTIFIER_OVL_OP_P): New.\n+\t(IDENTIFIER_ASSIGN_OP_P): Adjust.\n+\t(IDENTIFIER_CONV_OP_P): Adjust.\n \t(IDENTIFIER_OVL_OP_INFO): Adjust.\n \t(IDENTIFIER_OVL_OP_FLAGS): New.\n \t* decl.c (grokdeclarator): Use IDENTIFIER_OVL_OP_FLAGS.\n \t* lex.c (get_identifier_kind_name): Adjust.\n \t(init_operators): Don't special case new/delete ops.\n-\t* mangle.c (write_unqualified_id): Use IDENTIFIER_OVL_OP.\n+\t* mangle.c (write_unqualified_id): Use IDENTIFIER_OVL_OP_P.\n \t* pt.c (push_template_decl_real): Use IDENTIFIER_OVL_OP_FLAGS.\n \t* typeck.c (check_return_expr): Likewise.\n "}, {"sha": "65f1fae5c5ea4dd8d19ad51cc02908e8140e4d49", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=9918e7966c0d51e25b14a99adf87e2fbbe97c2e0", "patch": "@@ -1070,6 +1070,17 @@ enum cp_identifier_kind {\n    & IDENTIFIER_KIND_BIT_1 (NODE)\t\t\\\n    & (!IDENTIFIER_KIND_BIT_0 (NODE)))\n \n+/* True if this identifier is a new or delete operator.  */\n+#define IDENTIFIER_NEWDEL_OP_P(NODE)\t\t\\\n+  (IDENTIFIER_OVL_OP_P (NODE)\t\t\t\\\n+   && IDENTIFIER_OVL_OP_FLAGS (NODE) & OVL_OP_FLAG_ALLOC)\n+\n+/* True if this identifier is a new operator.  */\n+#define IDENTIFIER_NEW_OP_P(NODE)\t\t\t\t\t\\\n+  (IDENTIFIER_OVL_OP_P (NODE)\t\t\t\t\t\t\\\n+   && (IDENTIFIER_OVL_OP_FLAGS (NODE)\t\t\t\t\t\\\n+       & (OVL_OP_FLAG_ALLOC | OVL_OP_FLAG_DELETE)) == OVL_OP_FLAG_ALLOC)\n+\n /* Access a C++-specific index for identifier NODE.\n    Used to optimize operator mappings etc.  */\n #define IDENTIFIER_CP_INDEX(NODE)\t\t\\"}, {"sha": "7c6f85724df53ae2d7631a029e31a5b9e2b69737", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=9918e7966c0d51e25b14a99adf87e2fbbe97c2e0", "patch": "@@ -11751,8 +11751,7 @@ grokdeclarator (const cp_declarator *declarator,\n \n   if (ctype && TREE_CODE (type) == FUNCTION_TYPE && staticp < 2\n       && !(identifier_p (unqualified_id)\n-\t   && IDENTIFIER_OVL_OP_P (unqualified_id)\n-\t   && (IDENTIFIER_OVL_OP_FLAGS (unqualified_id) & OVL_OP_FLAG_ALLOC)))\n+\t   && IDENTIFIER_NEWDEL_OP_P (unqualified_id)))\n     {\n       cp_cv_quals real_quals = memfn_quals;\n       if (cxx_dialect < cxx14 && constexpr_p\n@@ -11865,9 +11864,7 @@ grokdeclarator (const cp_declarator *declarator,\n \n \t\tif (virtualp\n \t\t    && identifier_p (unqualified_id)\n-\t\t    && IDENTIFIER_OVL_OP_P (unqualified_id)\n-\t\t    && (IDENTIFIER_OVL_OP_FLAGS (unqualified_id)\n-\t\t\t& OVL_OP_FLAG_ALLOC))\n+\t\t    && IDENTIFIER_NEWDEL_OP_P (unqualified_id))\n \t\t  {\n \t\t    error (\"%qD cannot be declared %<virtual%>, since it \"\n \t\t\t   \"is always static\", unqualified_id);"}, {"sha": "629b2dd50ef1f91035aa05ace5501015b90a813b", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=9918e7966c0d51e25b14a99adf87e2fbbe97c2e0", "patch": "@@ -5329,9 +5329,7 @@ push_template_decl_real (tree decl, bool is_friend)\n \t      error (\"destructor %qD declared as member template\", decl);\n \t      return error_mark_node;\n \t    }\n-\t  if (IDENTIFIER_OVL_OP_P (DECL_NAME (decl))\n-\t      && (IDENTIFIER_OVL_OP_FLAGS (DECL_NAME (decl))\n-\t\t  & OVL_OP_FLAG_ALLOC)\n+\t  if (IDENTIFIER_NEWDEL_OP_P (DECL_NAME (decl))\n \t      && (!prototype_p (TREE_TYPE (decl))\n \t\t  || TYPE_ARG_TYPES (TREE_TYPE (decl)) == void_list_node\n \t\t  || !TREE_CHAIN (TYPE_ARG_TYPES (TREE_TYPE (decl)))"}, {"sha": "9130c10f3908f573f176e02fe2b8b22ab5bc61d6", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9918e7966c0d51e25b14a99adf87e2fbbe97c2e0/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=9918e7966c0d51e25b14a99adf87e2fbbe97c2e0", "patch": "@@ -9073,9 +9073,7 @@ check_return_expr (tree retval, bool *no_warning)\n     }\n \n   /* Only operator new(...) throw(), can return NULL [expr.new/13].  */\n-  if (IDENTIFIER_OVL_OP_P (DECL_NAME (current_function_decl))\n-      && ((IDENTIFIER_OVL_OP_FLAGS (DECL_NAME (current_function_decl))\n-\t   & (OVL_OP_FLAG_ALLOC | OVL_OP_FLAG_DELETE)) == OVL_OP_FLAG_ALLOC)\n+  if (IDENTIFIER_NEW_OP_P (DECL_NAME (current_function_decl))\n       && !TYPE_NOTHROW_P (TREE_TYPE (current_function_decl))\n       && ! flag_check_new\n       && retval && null_ptr_cst_p (retval))"}]}