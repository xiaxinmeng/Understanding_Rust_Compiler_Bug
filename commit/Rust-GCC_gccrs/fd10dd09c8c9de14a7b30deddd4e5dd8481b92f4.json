{"sha": "fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQxMGRkMDljOGM5ZGUxNGE3YjMwZGVkZGQ0ZTVkZDg0ODFiOTJmNA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-08-22T14:42:22Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-08-22T14:42:22Z"}, "message": "pt.c (tsubst_expr): Hand off to the TREE_CHAIN of a statement.\n\n        * pt.c (tsubst_expr): Hand off to the TREE_CHAIN of a statement.\n        Don't loop in COMPOUND_STMT, FOR_STMT or TRY_BLOCK.\n        * tree.c (cp_statement_code_p): A TAG_DEFN is a statement.\n\nFrom-SVN: r45106", "tree": {"sha": "62cb2c6c35a7ca6023a9e43d5744244dba851312", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/62cb2c6c35a7ca6023a9e43d5744244dba851312"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1322177dbd4024fc4cd4cd6d5dd5a70805ca9d7d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1322177dbd4024fc4cd4cd6d5dd5a70805ca9d7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1322177dbd4024fc4cd4cd6d5dd5a70805ca9d7d"}], "stats": {"total": 65, "additions": 35, "deletions": 30}, "files": [{"sha": "3038bc2e71b44d5c5189111cdabf3bd62eb9aad2", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4", "patch": "@@ -1,3 +1,9 @@\n+2001-08-22  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* pt.c (tsubst_expr): Hand off to the TREE_CHAIN of a statement.\n+\tDon't loop in COMPOUND_STMT, FOR_STMT or TRY_BLOCK.\n+\t* tree.c (cp_statement_code_p): A TAG_DEFN is a statement.\n+\n 2001-08-19  Jakub Jelinek  <jakub@redhat.com>\n \n \t* typeck2.c (add_exception_specifier): Only require complete type if"}, {"sha": "471a629a465625d80373404202b97f7d677cef86", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4", "patch": "@@ -7171,22 +7171,24 @@ tsubst_expr (t, args, complain, in_decl)\n      int complain;\n      tree in_decl;\n {\n-  tree stmt;\n+  tree stmt, tmp;\n \n   if (t == NULL_TREE || t == error_mark_node)\n     return t;\n \n   if (processing_template_decl)\n     return tsubst_copy (t, args, complain, in_decl);\n \n+  if (!statement_code_p (TREE_CODE (t)))\n+    return build_expr_from_tree (tsubst_copy (t, args, complain, in_decl));\n+    \n   switch (TREE_CODE (t))\n     {\n     case RETURN_INIT:\n       prep_stmt (t);\n       finish_named_return_value\n \t(TREE_OPERAND (t, 0),\n \t tsubst_expr (TREE_OPERAND (t, 1), args, /*complain=*/1, in_decl));\n-      tsubst_expr (TREE_CHAIN (t), args, complain, in_decl);\n       break;\n \n     case CTOR_INITIALIZER:\n@@ -7200,7 +7202,6 @@ tsubst_expr (t, args, complain, in_decl)\n \tbase_init_list\n \t  = tsubst_initializer_list (TREE_OPERAND (t, 1), args);\n \tsetup_vtbl_ptr (member_init_list, base_init_list);\n-\ttsubst_expr (TREE_CHAIN (t), args, complain, in_decl);\n \tbreak;\n       }\n \n@@ -7265,17 +7266,21 @@ tsubst_expr (t, args, complain, in_decl)\n \t        cp_finish_decl (decl, init, NULL_TREE, 0);\n \t      }\n \t  }\n-\treturn decl;\n+\n+\t/* A DECL_STMT can also be used as an expression, in the condition\n+\t   clause of a if/for/while construct.  If we aren't followed by\n+\t   another statement, return our decl.  */\n+\tif (TREE_CHAIN (t) == NULL_TREE)\n+\t  return decl;\n       }\n+      break;\n \n     case FOR_STMT:\n       {\n-\ttree tmp;\n \tprep_stmt (t);\n \n \tstmt = begin_for_stmt ();\n-\tfor (tmp = FOR_INIT_STMT (t); tmp; tmp = TREE_CHAIN (tmp))\n-\t  tsubst_expr (tmp, args, complain, in_decl);\n+\ttsubst_expr (FOR_INIT_STMT (t), args, complain, in_decl);\n \tfinish_for_init_stmt (stmt);\n \tfinish_for_cond (tsubst_expr (FOR_COND (t), args,\n \t\t\t\t      complain, in_decl),\n@@ -7313,8 +7318,6 @@ tsubst_expr (t, args, complain, in_decl)\n \n     case IF_STMT:\n       {\n-\ttree tmp;\n-\n \tprep_stmt (t);\n \tstmt = begin_if_stmt ();\n \tfinish_if_stmt_cond (tsubst_expr (IF_COND (t),\n@@ -7340,15 +7343,10 @@ tsubst_expr (t, args, complain, in_decl)\n \n     case COMPOUND_STMT:\n       {\n-\ttree substmt;\n-\n \tprep_stmt (t);\n \tstmt = begin_compound_stmt (COMPOUND_STMT_NO_SCOPE (t));\n-\tfor (substmt = COMPOUND_BODY (t); \n-\t     substmt != NULL_TREE;\n-\t     substmt = TREE_CHAIN (substmt))\n-\t  tsubst_expr (substmt, args, complain, in_decl);\n-\treturn finish_compound_stmt (COMPOUND_STMT_NO_SCOPE (t), stmt);\n+\ttsubst_expr (COMPOUND_BODY (t), args, complain, in_decl);\n+\tfinish_compound_stmt (COMPOUND_STMT_NO_SCOPE (t), stmt);\n       }\n       break;\n \n@@ -7389,15 +7387,15 @@ tsubst_expr (t, args, complain, in_decl)\n \n     case GOTO_STMT:\n       prep_stmt (t);\n-      t = GOTO_DESTINATION (t);\n-      if (TREE_CODE (t) != LABEL_DECL)\n+      tmp = GOTO_DESTINATION (t);\n+      if (TREE_CODE (tmp) != LABEL_DECL)\n \t/* Computed goto's must be tsubst'd into.  On the other hand,\n \t   non-computed gotos must not be; the identifier in question\n \t   will have no binding.  */\n-\tt = tsubst_expr (t, args, complain, in_decl);\n+\ttmp = tsubst_expr (tmp, args, complain, in_decl);\n       else\n-\tt = DECL_NAME (t);\n-      finish_goto_stmt (t);\n+\ttmp = DECL_NAME (tmp);\n+      finish_goto_stmt (tmp);\n       break;\n \n     case ASM_STMT:\n@@ -7423,8 +7421,6 @@ tsubst_expr (t, args, complain, in_decl)\n \t}\n       else\n \t{\n-\t  tree handler;\n-\n \t  if (FN_TRY_BLOCK_P (t))\n \t    stmt = begin_function_try_block ();\n \t  else\n@@ -7437,9 +7433,7 @@ tsubst_expr (t, args, complain, in_decl)\n \t  else\n \t    finish_try_block (stmt);\n \n-\t  handler = TRY_HANDLERS (t);\n-\t  for (; handler; handler = TREE_CHAIN (handler))\n-\t    tsubst_expr (handler, args, complain, in_decl);\n+\t  tsubst_expr (TRY_HANDLERS (t), args, complain, in_decl);\n \t  if (FN_TRY_BLOCK_P (t))\n \t    finish_function_handler_sequence (stmt);\n \t  else\n@@ -7472,14 +7466,18 @@ tsubst_expr (t, args, complain, in_decl)\n \n     case TAG_DEFN:\n       prep_stmt (t);\n-      t = TREE_TYPE (t);\n-      tsubst (t, args, complain, NULL_TREE);\n+      tsubst (TREE_TYPE (t), args, complain, NULL_TREE);\n       break;\n \n+    case CTOR_STMT:\n+      add_stmt (copy_node (t));\n+      break;\n+      \n     default:\n-      return build_expr_from_tree (tsubst_copy (t, args, complain, in_decl));\n+      abort ();\n     }\n-  return NULL_TREE;\n+\n+  return tsubst_expr (TREE_CHAIN (t), args, complain, in_decl);\n }\n \n /* TMPL is a TEMPLATE_DECL for a cloned constructor or destructor."}, {"sha": "40a2d55bbd889ebcceaafa874564ae49c5f67b0b", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=fd10dd09c8c9de14a7b30deddd4e5dd8481b92f4", "patch": "@@ -1037,6 +1037,7 @@ cp_statement_code_p (code)\n     case HANDLER:\n     case EH_SPEC_BLOCK:\n     case USING_STMT:\n+    case TAG_DEFN:\n       return 1;\n \n     default:"}]}