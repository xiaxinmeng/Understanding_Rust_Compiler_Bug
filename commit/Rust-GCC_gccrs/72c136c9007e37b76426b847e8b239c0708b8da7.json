{"sha": "72c136c9007e37b76426b847e8b239c0708b8da7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzJjMTM2YzkwMDdlMzdiNzY0MjZiODQ3ZThiMjM5YzA3MDhiOGRhNw==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-08T20:52:05Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-08T20:52:05Z"}, "message": "libphobos: Remove --enable-unix configure option.\n\nThis option is not useful on its own as all posix modules require the\ncompiler to predefine version(Posix) anyway.  So the option has been\nremoved, and logic moved into DRUNTIME_OS_SOURCES, where the conditional\nDRUNTIME_OS_POSIX is set instead.\n\nlibphobos/ChangeLog:\n\n\t* configure: Regenerate.\n\t* configure.ac: Remove DRUNTIME_OS_UNIX.\n\t* libdruntime/Makefile.am: Add DRUNTIME_DSOURCES_POSIX if\n\tDRUNTIME_OS_POSIX is true.\n\t* libdruntime/Makefile.in: Regenerate.\n\t* m4/druntime/os.m4 (DRUNTIME_OS_UNIX): Remove, move AM_CONDITIONAL\n\tlogic to...\n\t(DRUNTIME_OS_SOURCES): ...here.  Rename conditional to\n\tDRUNTIME_OS_POSIX.", "tree": {"sha": "ae6a8fff04ae15047b9b0b221ba0256b97829b59", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ae6a8fff04ae15047b9b0b221ba0256b97829b59"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/72c136c9007e37b76426b847e8b239c0708b8da7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72c136c9007e37b76426b847e8b239c0708b8da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/72c136c9007e37b76426b847e8b239c0708b8da7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/72c136c9007e37b76426b847e8b239c0708b8da7/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0cc1b79b39994c917abb23f71064bb39eedcc70", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0cc1b79b39994c917abb23f71064bb39eedcc70", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0cc1b79b39994c917abb23f71064bb39eedcc70"}], "stats": {"total": 109, "additions": 47, "deletions": 62}, "files": [{"sha": "216cd61baf15eea155b82e818e17e98b066a8c60", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c136c9007e37b76426b847e8b239c0708b8da7/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c136c9007e37b76426b847e8b239c0708b8da7/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=72c136c9007e37b76426b847e8b239c0708b8da7", "patch": "@@ -1,3 +1,15 @@\n+2020-04-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* configure: Regenerate.\n+\t* configure.ac: Remove DRUNTIME_OS_UNIX.\n+\t* libdruntime/Makefile.am: Add DRUNTIME_DSOURCES_POSIX if\n+\tDRUNTIME_OS_POSIX is true.\n+\t* libdruntime/Makefile.in: Regenerate.\n+\t* m4/druntime/os.m4 (DRUNTIME_OS_UNIX): Remove, move AM_CONDITIONAL\n+\tlogic to...\n+\t(DRUNTIME_OS_SOURCES): ...here.  Rename conditional to\n+\tDRUNTIME_OS_POSIX.\n+\n 2020-04-08  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* Makefile.in: Regenerate."}, {"sha": "108518d86aa23f93014dc7503476cf4061eb6d73", "filename": "libphobos/configure", "status": "modified", "additions": 23, "deletions": 36, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c136c9007e37b76426b847e8b239c0708b8da7/libphobos%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c136c9007e37b76426b847e8b239c0708b8da7/libphobos%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure?ref=72c136c9007e37b76426b847e8b239c0708b8da7", "patch": "@@ -662,6 +662,8 @@ DRUNTIME_OS_ARM_EABI_UNWINDER_FALSE\n DRUNTIME_OS_ARM_EABI_UNWINDER_TRUE\n DCFG_ARM_EABI_UNWINDER\n DCFG_THREAD_MODEL\n+DRUNTIME_OS_POSIX_FALSE\n+DRUNTIME_OS_POSIX_TRUE\n DRUNTIME_OS_SOLARIS_FALSE\n DRUNTIME_OS_SOLARIS_TRUE\n DRUNTIME_OS_MINGW_FALSE\n@@ -682,8 +684,6 @@ DRUNTIME_OS_ANDROID_FALSE\n DRUNTIME_OS_ANDROID_TRUE\n DRUNTIME_OS_AIX_FALSE\n DRUNTIME_OS_AIX_TRUE\n-DRUNTIME_OS_UNIX_FALSE\n-DRUNTIME_OS_UNIX_TRUE\n DRUNTIME_CPU_S390_FALSE\n DRUNTIME_CPU_S390_TRUE\n DRUNTIME_CPU_SYSTEMZ_FALSE\n@@ -835,7 +835,6 @@ enable_libtool_lock\n with_gcc_major_version_only\n enable_werror\n enable_druntime_gc\n-enable_unix\n enable_thread_lib\n with_libatomic\n with_libbacktrace\n@@ -1486,8 +1485,6 @@ Optional Features:\n   --disable-libtool-lock  avoid locking (might break parallel builds)\n   --enable-werror         turns on -Werror [default=no]\n   --enable-druntime-gc    enable D runtime garbage collector (default: yes)\n-  --enable-unix           enables Unix runtime (default: yes, for Unix\n-                          targets)\n   --enable-thread-lib=<arg>\n                           specify linker option for the system thread library\n                           (default: autodetect)\n@@ -11649,7 +11646,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11652 \"configure\"\n+#line 11649 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -11755,7 +11752,7 @@ else\n   lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n   lt_status=$lt_dlunknown\n   cat > conftest.$ac_ext <<_LT_EOF\n-#line 11758 \"configure\"\n+#line 11755 \"configure\"\n #include \"confdefs.h\"\n \n #if HAVE_DLFCN_H\n@@ -14105,31 +14102,6 @@ fi\n \n \n \n-  # Check whether --enable-unix was given.\n-if test \"${enable_unix+set}\" = set; then :\n-  enableval=$enable_unix; :\n-else\n-  enable_unix=auto\n-fi\n-\n-\n-  case \"$druntime_cv_target_os\" in\n-    aix*|*bsd*|cygwin*|darwin*|gnu*|linux*|skyos*|*solaris*|sysv*) d_have_unix=1 ;;\n-  esac\n-  if test -n \"$d_have_unix\" && test \"$enable_unix\" = auto ; then\n-    enable_unix=yes\n-  fi\n-   if test \"$enable_unix\" = \"yes\"; then\n-  DRUNTIME_OS_UNIX_TRUE=\n-  DRUNTIME_OS_UNIX_FALSE='#'\n-else\n-  DRUNTIME_OS_UNIX_TRUE='#'\n-  DRUNTIME_OS_UNIX_FALSE=\n-fi\n-\n-\n-\n-\n \n   druntime_target_os_parsed=\"\"\n   case \"$druntime_cv_target_os\" in\n@@ -14239,6 +14211,21 @@ else\n fi\n \n \n+  druntime_target_posix=\"no\"\n+  case \"$druntime_cv_target_os\" in\n+    aix*|*bsd*|cygwin*|darwin*|gnu*|linux*|skyos*|*solaris*|sysv*)\n+      druntime_target_posix=\"yes\"\n+      ;;\n+  esac\n+   if test \"$druntime_target_posix\" = \"yes\"; then\n+  DRUNTIME_OS_POSIX_TRUE=\n+  DRUNTIME_OS_POSIX_FALSE='#'\n+else\n+  DRUNTIME_OS_POSIX_TRUE='#'\n+  DRUNTIME_OS_POSIX_FALSE=\n+fi\n+\n+\n \n \n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for thread model used by GDC\" >&5\n@@ -15599,10 +15586,6 @@ if test -z \"${DRUNTIME_CPU_S390_TRUE}\" && test -z \"${DRUNTIME_CPU_S390_FALSE}\";\n   as_fn_error $? \"conditional \\\"DRUNTIME_CPU_S390\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n-if test -z \"${DRUNTIME_OS_UNIX_TRUE}\" && test -z \"${DRUNTIME_OS_UNIX_FALSE}\"; then\n-  as_fn_error $? \"conditional \\\"DRUNTIME_OS_UNIX\\\" was never defined.\n-Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n-fi\n if test -z \"${DRUNTIME_OS_AIX_TRUE}\" && test -z \"${DRUNTIME_OS_AIX_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"DRUNTIME_OS_AIX\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n@@ -15643,6 +15626,10 @@ if test -z \"${DRUNTIME_OS_SOLARIS_TRUE}\" && test -z \"${DRUNTIME_OS_SOLARIS_FALSE\n   as_fn_error $? \"conditional \\\"DRUNTIME_OS_SOLARIS\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n fi\n+if test -z \"${DRUNTIME_OS_POSIX_TRUE}\" && test -z \"${DRUNTIME_OS_POSIX_FALSE}\"; then\n+  as_fn_error $? \"conditional \\\"DRUNTIME_OS_POSIX\\\" was never defined.\n+Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\n+fi\n if test -z \"${DRUNTIME_OS_ARM_EABI_UNWINDER_TRUE}\" && test -z \"${DRUNTIME_OS_ARM_EABI_UNWINDER_FALSE}\"; then\n   as_fn_error $? \"conditional \\\"DRUNTIME_OS_ARM_EABI_UNWINDER\\\" was never defined.\n Usually this means the macro was only invoked conditionally.\" \"$LINENO\" 5"}, {"sha": "594d2001b067c5376a122682cc79f3cde3e3a929", "filename": "libphobos/configure.ac", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c136c9007e37b76426b847e8b239c0708b8da7/libphobos%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c136c9007e37b76426b847e8b239c0708b8da7/libphobos%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fconfigure.ac?ref=72c136c9007e37b76426b847e8b239c0708b8da7", "patch": "@@ -122,7 +122,6 @@ DRUNTIME_MULTILIB\n DRUNTIME_WERROR\n DRUNTIME_GC\n DRUNTIME_CPU_SOURCES\n-DRUNTIME_OS_UNIX\n DRUNTIME_OS_SOURCES\n DRUNTIME_OS_THREAD_MODEL\n DRUNTIME_OS_ARM_EABI_UNWINDER"}, {"sha": "41ccfaa339c8c1206a5ac59922c78bad062e868f", "filename": "libphobos/libdruntime/Makefile.am", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c136c9007e37b76426b847e8b239c0708b8da7/libphobos%2Flibdruntime%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c136c9007e37b76426b847e8b239c0708b8da7/libphobos%2Flibdruntime%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.am?ref=72c136c9007e37b76426b847e8b239c0708b8da7", "patch": "@@ -47,7 +47,7 @@ else\n     DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_GCSTUB)\n endif\n # OS specific sources\n-if DRUNTIME_OS_UNIX\n+if DRUNTIME_OS_POSIX\n     DRUNTIME_SOURCES_CONFIGURED += $(DRUNTIME_DSOURCES_POSIX)\n endif\n if DRUNTIME_OS_DARWIN"}, {"sha": "9277e0a16655c14b3070822f3108c623b47bbfad", "filename": "libphobos/libdruntime/Makefile.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c136c9007e37b76426b847e8b239c0708b8da7/libphobos%2Flibdruntime%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c136c9007e37b76426b847e8b239c0708b8da7/libphobos%2Flibdruntime%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Flibdruntime%2FMakefile.in?ref=72c136c9007e37b76426b847e8b239c0708b8da7", "patch": "@@ -112,7 +112,7 @@ target_triplet = @target@\n @DRUNTIME_GC_ENABLE_TRUE@am__append_1 = $(DRUNTIME_DSOURCES_GC)\n @DRUNTIME_GC_ENABLE_FALSE@am__append_2 = $(DRUNTIME_DSOURCES_GCSTUB)\n # OS specific sources\n-@DRUNTIME_OS_UNIX_TRUE@am__append_3 = $(DRUNTIME_DSOURCES_POSIX)\n+@DRUNTIME_OS_POSIX_TRUE@am__append_3 = $(DRUNTIME_DSOURCES_POSIX)\n @DRUNTIME_OS_DARWIN_TRUE@am__append_4 = $(DRUNTIME_DSOURCES_DARWIN)\n @DRUNTIME_OS_DRAGONFLYBSD_TRUE@am__append_5 = $(DRUNTIME_DSOURCES_DRAGONFLYBSD)\n @DRUNTIME_OS_ANDROID_TRUE@am__append_6 = $(DRUNTIME_DSOURCES_BIONIC)\n@@ -272,7 +272,7 @@ am__objects_7 = core/sys/posix/aio.lo core/sys/posix/arpa/inet.lo \\\n \tcore/sys/posix/syslog.lo core/sys/posix/termios.lo \\\n \tcore/sys/posix/time.lo core/sys/posix/ucontext.lo \\\n \tcore/sys/posix/unistd.lo core/sys/posix/utime.lo\n-@DRUNTIME_OS_UNIX_TRUE@am__objects_8 = $(am__objects_7)\n+@DRUNTIME_OS_POSIX_TRUE@am__objects_8 = $(am__objects_7)\n am__objects_9 = core/sys/darwin/crt_externs.lo \\\n \tcore/sys/darwin/dlfcn.lo core/sys/darwin/execinfo.lo \\\n \tcore/sys/darwin/mach/dyld.lo core/sys/darwin/mach/getsect.lo \\"}, {"sha": "47d4c6a6c800bf5728f0097edc84a9bb2b8f70a6", "filename": "libphobos/m4/druntime/os.m4", "status": "modified", "additions": 9, "deletions": 22, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/72c136c9007e37b76426b847e8b239c0708b8da7/libphobos%2Fm4%2Fdruntime%2Fos.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/72c136c9007e37b76426b847e8b239c0708b8da7/libphobos%2Fm4%2Fdruntime%2Fos.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Fm4%2Fdruntime%2Fos.m4?ref=72c136c9007e37b76426b847e8b239c0708b8da7", "patch": "@@ -52,33 +52,12 @@ AC_DEFUN([DRUNTIME_OS_DETECT],\n ])\n \n \n-# DRUNTIME_OS_UNIX\n-# ----------------\n-# Add --enable-unix option or autodetects if system is unix\n-# and create the DRUNTIME_OS_UNIX conditional.\n-AC_DEFUN([DRUNTIME_OS_UNIX],\n-[\n-  AC_REQUIRE([DRUNTIME_OS_DETECT])\n-  AC_ARG_ENABLE(unix,\n-    AC_HELP_STRING([--enable-unix],\n-                   [enables Unix runtime (default: yes, for Unix targets)]),\n-    :,[enable_unix=auto])\n-\n-  case \"$druntime_cv_target_os\" in\n-    aix*|*bsd*|cygwin*|darwin*|gnu*|linux*|skyos*|*solaris*|sysv*) d_have_unix=1 ;;\n-  esac\n-  if test -n \"$d_have_unix\" && test \"$enable_unix\" = auto ; then\n-    enable_unix=yes\n-  fi\n-  AM_CONDITIONAL([DRUNTIME_OS_UNIX], [test \"$enable_unix\" = \"yes\"])\n-])\n-\n-\n # DRUNTIME_OS_SOURCES\n # -------------------\n # Detect target OS and add DRUNTIME_OS_AIX DRUNTIME_OS_DARWIN\n # DRUNTIME_OS_FREEBSD DRUNTIME_OS_LINUX DRUNTIME_OS_MINGW\n # DRUNTIME_OS_SOLARIS DRUNTIME_OS_OPENBSD conditionals.\n+# If the system is posix, add DRUNTIME_OS_POSIX conditional.\n AC_DEFUN([DRUNTIME_OS_SOURCES],\n [\n   AC_REQUIRE([DRUNTIME_OS_DETECT])\n@@ -130,6 +109,14 @@ AC_DEFUN([DRUNTIME_OS_SOURCES],\n                  [test \"$druntime_target_os_parsed\" = \"mingw\"])\n   AM_CONDITIONAL([DRUNTIME_OS_SOLARIS],\n                  [test \"$druntime_target_os_parsed\" = \"solaris\"])\n+\n+  druntime_target_posix=\"no\"\n+  case \"$druntime_cv_target_os\" in\n+    aix*|*bsd*|cygwin*|darwin*|gnu*|linux*|skyos*|*solaris*|sysv*)\n+      druntime_target_posix=\"yes\"\n+      ;;\n+  esac\n+  AM_CONDITIONAL([DRUNTIME_OS_POSIX], [test \"$druntime_target_posix\" = \"yes\"])\n ])\n \n "}]}