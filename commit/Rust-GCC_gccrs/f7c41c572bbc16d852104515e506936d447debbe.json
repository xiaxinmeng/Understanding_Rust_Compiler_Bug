{"sha": "f7c41c572bbc16d852104515e506936d447debbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjdjNDFjNTcyYmJjMTZkODUyMTA0NTE1ZTUwNjkzNmQ0NDdkZWJiZQ==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-10T19:12:03Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-11-10T19:22:48Z"}, "message": "libstdc++: Reorder constructors in <sstream>\n\nThis groups all the constructors together, consistent with the synopses\nin the C++20 standard.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/std/sstream (basic_stringbug, basic_istringstream)\n\t(basic_ostringstream, basic_stringstream): Reorder C++20\n\tconstructors to be declared next to other constructors.", "tree": {"sha": "8eeec621faf8e93bacd79c72249542090369a6bd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8eeec621faf8e93bacd79c72249542090369a6bd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7c41c572bbc16d852104515e506936d447debbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7c41c572bbc16d852104515e506936d447debbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7c41c572bbc16d852104515e506936d447debbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7c41c572bbc16d852104515e506936d447debbe/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/95cb0fc8c51841cc6a0e51490cb3769eb80fa34c"}], "stats": {"total": 200, "additions": 100, "deletions": 100}, "files": [{"sha": "d7200ab6ed88617ee6090dda0c2e12fde36b48b4", "filename": "libstdc++-v3/include/std/sstream", "status": "modified", "additions": 100, "deletions": 100, "changes": 200, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7c41c572bbc16d852104515e506936d447debbe/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7c41c572bbc16d852104515e506936d447debbe/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fsstream?ref=f7c41c572bbc16d852104515e506936d447debbe", "patch": "@@ -149,37 +149,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       : basic_stringbuf(std::move(__rhs), __xfer_bufptrs(__rhs, this))\n       { __rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0); }\n \n-      // 27.8.2.2 Assign and swap:\n-\n-      basic_stringbuf&\n-      operator=(const basic_stringbuf&) = delete;\n-\n-      basic_stringbuf&\n-      operator=(basic_stringbuf&& __rhs)\n-      {\n-\t__xfer_bufptrs __st{__rhs, this};\n-\tconst __streambuf_type& __base = __rhs;\n-\t__streambuf_type::operator=(__base);\n-\tthis->pubimbue(__rhs.getloc());\n-\t_M_mode = __rhs._M_mode;\n-\t_M_string = std::move(__rhs._M_string);\n-\t__rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0);\n-\treturn *this;\n-      }\n-\n-      void\n-      swap(basic_stringbuf& __rhs) noexcept(_Noexcept_swap::value)\n-      {\n-\t__xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};\n-\t__xfer_bufptrs __r_st{__rhs, this};\n-\t__streambuf_type& __base = __rhs;\n-\t__streambuf_type::swap(__base);\n-\t__rhs.pubimbue(this->pubimbue(__rhs.getloc()));\n-\tstd::swap(_M_mode, __rhs._M_mode);\n-\tstd::swap(_M_string, __rhs._M_string); // XXX not exception safe\n-      }\n-#endif // C++11\n-\n #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n       explicit\n       basic_stringbuf(const allocator_type& __a)\n@@ -226,7 +195,38 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \n       allocator_type get_allocator() const noexcept\n       { return _M_string.get_allocator(); }\n-#endif\n+#endif // C++20\n+\n+      // 27.8.2.2 Assign and swap:\n+\n+      basic_stringbuf&\n+      operator=(const basic_stringbuf&) = delete;\n+\n+      basic_stringbuf&\n+      operator=(basic_stringbuf&& __rhs)\n+      {\n+\t__xfer_bufptrs __st{__rhs, this};\n+\tconst __streambuf_type& __base = __rhs;\n+\t__streambuf_type::operator=(__base);\n+\tthis->pubimbue(__rhs.getloc());\n+\t_M_mode = __rhs._M_mode;\n+\t_M_string = std::move(__rhs._M_string);\n+\t__rhs._M_sync(const_cast<char_type*>(__rhs._M_string.data()), 0, 0);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_stringbuf& __rhs) noexcept(_Noexcept_swap::value)\n+      {\n+\t__xfer_bufptrs __l_st{*this, std::__addressof(__rhs)};\n+\t__xfer_bufptrs __r_st{__rhs, this};\n+\t__streambuf_type& __base = __rhs;\n+\t__streambuf_type::swap(__base);\n+\t__rhs.pubimbue(this->pubimbue(__rhs.getloc()));\n+\tstd::swap(_M_mode, __rhs._M_mode);\n+\tstd::swap(_M_string, __rhs._M_string); // XXX not exception safe\n+      }\n+#endif // C++11\n \n       // Getters and setters:\n \n@@ -282,7 +282,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \telse\n \t  return _M_string;\n       }\n-#endif\n+#endif // C++20\n \n       /**\n        *  @brief  Setting a new buffer.\n@@ -513,7 +513,7 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _M_mode(__rhs._M_mode), _M_string(std::move(__rhs._M_string), __a)\n       { }\n #endif\n-#endif\n+#endif // C++11\n     };\n \n \n@@ -623,27 +623,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _M_stringbuf(std::move(__rhs._M_stringbuf))\n       { __istream_type::set_rdbuf(&_M_stringbuf); }\n \n-      // 27.8.3.2 Assign and swap:\n-\n-      basic_istringstream&\n-      operator=(const basic_istringstream&) = delete;\n-\n-      basic_istringstream&\n-      operator=(basic_istringstream&& __rhs)\n-      {\n-\t__istream_type::operator=(std::move(__rhs));\n-\t_M_stringbuf = std::move(__rhs._M_stringbuf);\n-\treturn *this;\n-      }\n-\n-      void\n-      swap(basic_istringstream& __rhs)\n-      {\n-\t__istream_type::swap(__rhs);\n-\t_M_stringbuf.swap(__rhs._M_stringbuf);\n-      }\n-#endif\n-\n #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n       basic_istringstream(ios_base::openmode __mode, const allocator_type& __a)\n       : __istream_type(), _M_stringbuf(__mode | ios_base::in, __a)\n@@ -674,7 +653,28 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t    ios_base::openmode __mode = ios_base::in)\n \t: basic_istringstream(__str, __mode, allocator_type())\n \t{ }\n-#endif\n+#endif // C++20\n+\n+      // 27.8.3.2 Assign and swap:\n+\n+      basic_istringstream&\n+      operator=(const basic_istringstream&) = delete;\n+\n+      basic_istringstream&\n+      operator=(basic_istringstream&& __rhs)\n+      {\n+\t__istream_type::operator=(std::move(__rhs));\n+\t_M_stringbuf = std::move(__rhs._M_stringbuf);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_istringstream& __rhs)\n+      {\n+\t__istream_type::swap(__rhs);\n+\t_M_stringbuf.swap(__rhs._M_stringbuf);\n+      }\n+#endif // C++11\n \n       // Members:\n       /**\n@@ -844,27 +844,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _M_stringbuf(std::move(__rhs._M_stringbuf))\n       { __ostream_type::set_rdbuf(&_M_stringbuf); }\n \n-      // 27.8.3.2 Assign and swap:\n-\n-      basic_ostringstream&\n-      operator=(const basic_ostringstream&) = delete;\n-\n-      basic_ostringstream&\n-      operator=(basic_ostringstream&& __rhs)\n-      {\n-\t__ostream_type::operator=(std::move(__rhs));\n-\t_M_stringbuf = std::move(__rhs._M_stringbuf);\n-\treturn *this;\n-      }\n-\n-      void\n-      swap(basic_ostringstream& __rhs)\n-      {\n-\t__ostream_type::swap(__rhs);\n-\t_M_stringbuf.swap(__rhs._M_stringbuf);\n-      }\n-#endif\n-\n #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n       basic_ostringstream(ios_base::openmode __mode, const allocator_type& __a)\n       : __ostream_type(), _M_stringbuf(__mode | ios_base::out, __a)\n@@ -895,7 +874,28 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t    ios_base::openmode __mode = ios_base::out)\n \t: basic_ostringstream(__str, __mode, allocator_type())\n \t{ }\n-#endif\n+#endif // C++20\n+\n+      // 27.8.3.2 Assign and swap:\n+\n+      basic_ostringstream&\n+      operator=(const basic_ostringstream&) = delete;\n+\n+      basic_ostringstream&\n+      operator=(basic_ostringstream&& __rhs)\n+      {\n+\t__ostream_type::operator=(std::move(__rhs));\n+\t_M_stringbuf = std::move(__rhs._M_stringbuf);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_ostringstream& __rhs)\n+      {\n+\t__ostream_type::swap(__rhs);\n+\t_M_stringbuf.swap(__rhs._M_stringbuf);\n+      }\n+#endif // C++11\n \n       // Members:\n       /**\n@@ -1061,27 +1061,6 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n       _M_stringbuf(std::move(__rhs._M_stringbuf))\n       { __iostream_type::set_rdbuf(&_M_stringbuf); }\n \n-      // 27.8.3.2 Assign and swap:\n-\n-      basic_stringstream&\n-      operator=(const basic_stringstream&) = delete;\n-\n-      basic_stringstream&\n-      operator=(basic_stringstream&& __rhs)\n-      {\n-\t__iostream_type::operator=(std::move(__rhs));\n-\t_M_stringbuf = std::move(__rhs._M_stringbuf);\n-\treturn *this;\n-      }\n-\n-      void\n-      swap(basic_stringstream& __rhs)\n-      {\n-\t__iostream_type::swap(__rhs);\n-\t_M_stringbuf.swap(__rhs._M_stringbuf);\n-      }\n-#endif\n-\n #if __cplusplus > 201703L && _GLIBCXX_USE_CXX11_ABI\n       basic_stringstream(ios_base::openmode __mode, const allocator_type& __a)\n       : __iostream_type(), _M_stringbuf(__mode, __a)\n@@ -1114,7 +1093,28 @@ _GLIBCXX_BEGIN_NAMESPACE_CXX11\n \t\t\t\t\t\t       | ios_base::out)\n \t: basic_stringstream(__str, __mode, allocator_type())\n \t{ }\n-#endif\n+#endif // C++20\n+\n+      // 27.8.3.2 Assign and swap:\n+\n+      basic_stringstream&\n+      operator=(const basic_stringstream&) = delete;\n+\n+      basic_stringstream&\n+      operator=(basic_stringstream&& __rhs)\n+      {\n+\t__iostream_type::operator=(std::move(__rhs));\n+\t_M_stringbuf = std::move(__rhs._M_stringbuf);\n+\treturn *this;\n+      }\n+\n+      void\n+      swap(basic_stringstream& __rhs)\n+      {\n+\t__iostream_type::swap(__rhs);\n+\t_M_stringbuf.swap(__rhs._M_stringbuf);\n+      }\n+#endif // C++11\n \n       // Members:\n       /**"}]}