{"sha": "accde4cfac29504186f6c6f2cffb7680281cbd54", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWNjZGU0Y2ZhYzI5NTA0MTg2ZjZjNmYyY2ZmYjc2ODAyODFjYmQ1NA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-12-27T09:35:54Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-12-27T09:35:54Z"}, "message": "i386.h (UNITS_PER_SIMD_WORD): Don't use MMX/3DNOW.\n\n        * config/i386/i386.h (UNITS_PER_SIMD_WORD): Don't use MMX/3DNOW.\n\n        * gcc.dg/vect/vect-27a.c, gcc.dg/vect/vect-29a.c,\n        gcc.dg/vect/vect-48a.c, gcc.dg/vect/vect-56a.c,\n        gcc.dg/vect/vect-72a.c, gcc.dg/vect/vect-77a.c: Remove.\n\nFrom-SVN: r92637", "tree": {"sha": "27ca79485bd0dbdef9a42c9f2a4f213a52a2d869", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27ca79485bd0dbdef9a42c9f2a4f213a52a2d869"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/accde4cfac29504186f6c6f2cffb7680281cbd54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/accde4cfac29504186f6c6f2cffb7680281cbd54", "html_url": "https://github.com/Rust-GCC/gccrs/commit/accde4cfac29504186f6c6f2cffb7680281cbd54", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/accde4cfac29504186f6c6f2cffb7680281cbd54/comments", "author": null, "committer": null, "parents": [{"sha": "d833cfb0415986ea6211b79621b38516034ab16e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d833cfb0415986ea6211b79621b38516034ab16e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d833cfb0415986ea6211b79621b38516034ab16e"}], "stats": {"total": 310, "additions": 13, "deletions": 297}, "files": [{"sha": "e84e90aeeaa1e219ee2c186fc34467c61ed83387", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accde4cfac29504186f6c6f2cffb7680281cbd54/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accde4cfac29504186f6c6f2cffb7680281cbd54/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=accde4cfac29504186f6c6f2cffb7680281cbd54", "patch": "@@ -1,3 +1,7 @@\n+2004-12-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* config/i386/i386.h (UNITS_PER_SIMD_WORD): Don't use MMX/3DNOW.\n+\n 2004-12-26  Richard Henderson  <rth@redhat.com>\n \n \t* config/i386/i386.c (ix86_gimplify_va_arg): Also pass the result"}, {"sha": "9d86b59453ea66b250851806e43c6ec580a922d8", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accde4cfac29504186f6c6f2cffb7680281cbd54/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accde4cfac29504186f6c6f2cffb7680281cbd54/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=accde4cfac29504186f6c6f2cffb7680281cbd54", "patch": "@@ -1085,8 +1085,9 @@ do {\t\t\t\t\t\t\t\t\t\\\n     ((MODE) == DImode || (MODE) == V8QImode || (MODE) == V4HImode\t\\\n      || (MODE) == V2SImode || (MODE) == SImode)\n \n-#define UNITS_PER_SIMD_WORD \\\n-    (TARGET_SSE ? 16 : TARGET_MMX || TARGET_3DNOW ? 8 : 0)\n+/* ??? No autovectorization into MMX or 3DNOW until we can reliably\n+   place emms and femms instructions.  */\n+#define UNITS_PER_SIMD_WORD (TARGET_SSE ? 16 : 0)\n \n #define VALID_FP_MODE_P(MODE)\t\t\t\t\t\t\\\n     ((MODE) == SFmode || (MODE) == DFmode || (MODE) == XFmode\t\t\\"}, {"sha": "4608c672401f9a3fe23424e0d226c55b6d798693", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/accde4cfac29504186f6c6f2cffb7680281cbd54/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/accde4cfac29504186f6c6f2cffb7680281cbd54/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=accde4cfac29504186f6c6f2cffb7680281cbd54", "patch": "@@ -1,3 +1,9 @@\n+2004-12-27  Richard Henderson  <rth@redhat.com>\n+\n+\t* gcc.dg/vect/vect-27a.c, gcc.dg/vect/vect-29a.c,\n+\tgcc.dg/vect/vect-48a.c, gcc.dg/vect/vect-56a.c,\n+\tgcc.dg/vect/vect-72a.c, gcc.dg/vect/vect-77a.c: Remove.\n+\n 2004-12-26  Richard Henderson  <rth@redhat.com>\n \n \t* gcc.dg/compat/compat-common.h (CINT, CDBL): Use multiplication"}, {"sha": "2c6d4bd1c48bfa0e5e2e2da0655ffb1ef75c76c2", "filename": "gcc/testsuite/gcc.dg/vect/vect-27a.c", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d833cfb0415986ea6211b79621b38516034ab16e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d833cfb0415986ea6211b79621b38516034ab16e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-27a.c?ref=d833cfb0415986ea6211b79621b38516034ab16e", "patch": "@@ -1,45 +0,0 @@\n-/* { dg-require-effective-target vect_int } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -mmmx\" { target i?86-*-* x86_64-*-* } } */\n-\n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 128\n-\n-/* unaligned load.  */\n-\n-int main1 ()\n-{\n-  int i;\n-  int ia[N];\n-  int ib[N+1];\n-\n-  for (i=0; i < N; i++)\n-    {\n-      ib[i] = i;\n-    }\n-\n-  for (i = 1; i <= N; i++)\n-    {\n-      ia[i-1] = ib[i];\n-    }\n-\n-  /* check results:  */\n-  for (i = 1; i <= N; i++)\n-    {\n-      if (ia[i-1] != ib[i])\n-        abort ();\n-    }\n-\n-  return 0;\n-}\n-\n-int main (void)\n-{ \n-  check_vect ();\n-  \n-  return main1 ();\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail sparc*-*-* } } } */\n-"}, {"sha": "d63b633da8669b1bfc49e9146ea794880c3fbae5", "filename": "gcc/testsuite/gcc.dg/vect/vect-29a.c", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d833cfb0415986ea6211b79621b38516034ab16e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d833cfb0415986ea6211b79621b38516034ab16e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-29a.c?ref=d833cfb0415986ea6211b79621b38516034ab16e", "patch": "@@ -1,48 +0,0 @@\n-/* { dg-require-effective-target vect_int } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -mmmx\" { target i?86-*-* x86_64-*-* } } */\n-\n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 128\n-#define OFF 3\n-\n-/* unaligned load.  */\n-\n-int main1 (int off)\n-{\n-  int i;\n-  int ia[N];\n-  int ib[N+OFF];\n-\n-  for (i = 0; i < N+OFF; i++)\n-    {\n-      ib[i] = i;\n-    }\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      ia[i] = ib[i+off];\n-    }\n-\n-  /* check results:  */\n-  for (i = 0; i < N; i++)\n-    {\n-      if (ia[i] != ib[i+off])\n-        abort ();\n-    }\n-\n-  return 0;\n-}\n-\n-int main (void)\n-{ \n-  check_vect ();\n-  \n-  main1 (0); /* aligned */\n-  main1 (OFF); /* unaligned */\n-  return 0;\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail sparc*-*-* } } } */\n-"}, {"sha": "401da6c998a4911d0f33df73b164292cce26713c", "filename": "gcc/testsuite/gcc.dg/vect/vect-48a.c", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d833cfb0415986ea6211b79621b38516034ab16e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d833cfb0415986ea6211b79621b38516034ab16e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-48a.c?ref=d833cfb0415986ea6211b79621b38516034ab16e", "patch": "@@ -1,56 +0,0 @@\n-/* { dg-require-effective-target vect_int } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -mmmx\" { target i?86-*-* x86_64-*-* } } */\n-  \n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 256\n-\n-typedef short ashort __attribute__ ((__aligned__(16)));\n-\n-void bar (short *pa, short *pb, short *pc) \n-{\n-  int i;\n-\n-  /* check results:  */\n-  for (i = 0; i < N; i++)\n-    {\n-      if (pa[i] != (pb[i] + pc[i]))\n-\tabort ();\n-    }\n-\n-  return;\n-}\n-\n-\n-int\n-main1 (ashort * __restrict__ pa, short * __restrict__ pb, short * __restrict__ pc)\n-{\n-  int i;\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      pa[i] = pb[i] + pc[i];\n-    }\n-\n-  bar (pa,pb,pc);\n-\n-  return 0;\n-}\n-\n-int main (void)\n-{\n-  int i;\n-  ashort a[N];\n-  ashort b[N+1] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60};\n-  ashort c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n-\n-  check_vect ();\n-\n-  main1 (a,b,c);\n-  main1 (a,&b[1],c);\n-\n-  return 0;\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail sparc*-*-* alpha*-*-* } } } */"}, {"sha": "1cd117eb0b34e0f371bdcb122fe0242a3f48b1c1", "filename": "gcc/testsuite/gcc.dg/vect/vect-56a.c", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d833cfb0415986ea6211b79621b38516034ab16e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d833cfb0415986ea6211b79621b38516034ab16e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-56a.c?ref=d833cfb0415986ea6211b79621b38516034ab16e", "patch": "@@ -1,54 +0,0 @@\n-/* { dg-require-effective-target vect_int } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -mmmx\" { target i?86-*-* x86_64-*-* } } */\n-\n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 256\n-\n-typedef short ashort __attribute__ ((__aligned__(16)));\n-\n-void bar (ashort *pa, ashort *pb, ashort *pc)\n-{\n-  int i;\n-\n-  /* check results:  */\n-  for (i = 0; i < N/2; i++)\n-    {\n-      if (pa[i] != (pb[i+1] + pc[i+1]))\n-\tabort ();\n-    }\n-\n-  return;\n-}\n-\n-\n-int\n-main1 (ashort * __restrict__ pa, ashort * __restrict__ pb, ashort * __restrict__ pc)\n-{\n-  int i;\n-\n-  for (i = 0; i < N/2; i++)\n-    {\n-      pa[i] = pb[i+1] + pc[i+1];\n-    }\n-\n-  bar (pa,pb,pc);\n-\n-  return 0;\n-}\n-\n-int main (void)\n-{\n-  int i;\n-  ashort a[N];\n-  ashort b[N] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57};\n-  ashort c[N] = {0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19};\n-\n-  check_vect ();\n-\n-  main1 (a,b,c);\n-  return 0;\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail sparc*-*-* alpha*-*-* } } } */"}, {"sha": "64a584dd93cef8e8630773247a9892477bdacf2d", "filename": "gcc/testsuite/gcc.dg/vect/vect-72a.c", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d833cfb0415986ea6211b79621b38516034ab16e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d833cfb0415986ea6211b79621b38516034ab16e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-72a.c?ref=d833cfb0415986ea6211b79621b38516034ab16e", "patch": "@@ -1,46 +0,0 @@\n-/* { dg-require-effective-target vect_int } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -mmmx\" { target i?86-*-* x86_64-*-* } } */\n-\n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 128\n-\n-/* unaligned load.  */\n-\n-int main1 ()\n-{\n-  int i;\n-  char ia[N];\n-  char ib[N+1];\n-\n-  for (i=0; i < N+1; i++)\n-    {\n-      ib[i] = i;\n-    }\n-\n-  for (i = 1; i < N+1; i++)\n-    {\n-      ia[i-1] = ib[i];\n-    }\n-\n-  /* check results:  */\n-  for (i = 1; i <= N; i++)\n-    {\n-      if (ia[i-1] != ib[i])\n-        abort ();\n-    }\n-\n-  return 0;\n-}\n-\n-int main (void)\n-{ \n-  check_vect ();\n-  \n-  return main1 ();\n-}\n-\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail sparc*-*-* } } } */\n-\n-"}, {"sha": "5e10d28c97632c449ec8b9a3cfef3ec360af086c", "filename": "gcc/testsuite/gcc.dg/vect/vect-77a.c", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d833cfb0415986ea6211b79621b38516034ab16e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d833cfb0415986ea6211b79621b38516034ab16e/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-77a.c?ref=d833cfb0415986ea6211b79621b38516034ab16e", "patch": "@@ -1,46 +0,0 @@\n-/* { dg-require-effective-target vect_int } */\n-/* { dg-options \"-O2 -ftree-vectorize -fdump-tree-vect-stats -mmmx\" { target i?86-*-* x86_64-*-* } } */\n-\n-#include <stdarg.h>\n-#include \"tree-vect.h\"\n-\n-#define N 8\n-#define OFF 8\n-\n-typedef int aint __attribute__ ((__aligned__(16)));\n-\n-aint ib[N+OFF] = {0, 1, 3, 5, 7, 11, 13, 17, 0, 2, 6, 10, 14, 22, 26, 34};\n-\n-int main1 (aint *ib, int off)\n-{\n-  int i;\n-  int ia[N];\n-\n-  for (i = 0; i < N; i++)\n-    {\n-      ia[i] = ib[i+off];\n-    }\n-\n-\n-  /* check results:  */\n-  for (i = 0; i < N; i++)\n-    {\n-     if (ia[i] != ib[i+off])\n-        abort ();\n-    }\n-\n-  return 0;\n-}\n-\n-int main (void)\n-{\n-  check_vect ();\n-\n-  main1 (ib, 8);\n-  return 0;\n-}\n-\n-\n-/* This fails to vectorize for 64-bit powerpc but there's no way to\n-   specify that in an xfail list.  */\n-/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" { xfail sparc*-*-* alpha*-*-* } } } */"}]}