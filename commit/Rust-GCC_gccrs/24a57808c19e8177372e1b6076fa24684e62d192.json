{"sha": "24a57808c19e8177372e1b6076fa24684e62d192", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjRhNTc4MDhjMTllODE3NzM3MmUxYjYwNzZmYTI0Njg0ZTYyZDE5Mg==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2010-11-21T00:54:14Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2010-11-21T00:54:14Z"}, "message": "tm.texi.in (HANDLE_SYSV_PRAGMA, [...]): Remove.\n\n\t* doc/tm.texi.in (HANDLE_SYSV_PRAGMA,\n\tHANDLE_PRAGMA_PACK_PUSH_POP): Remove.\n\t(HANDLE_PRAGMA_PACK_WITH_EXPANSION): Don't refer to\n\tHANDLE_SYSV_PRAGMA.\n\t* doc/tm.texi: Regenerate.\n\t* system.h (HANDLE_PRAGMA_PACK_PUSH_POP, HANDLE_SYSV_PRAGMA,\n\tHANDLE_PRAGMA_WEAK): Poison.\n\t* config/alpha/elf.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t* config/alpha/linux.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't\n\tdefine.\n\t* config/alpha/osf5.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t* config/alpha/vms.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t* config/arm/arm.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/arm/netbsd.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t* config/cris/cris.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/darwin.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t(HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/elfos.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t* config/freebsd.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/frv/frv.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t* config/i386/cygming.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't\n\tdefine.\n\t* config/i386/djgpp.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/i386/i386-interix.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t(HANDLE_PRAGMA_WEAK): Don't undefine.\n\t* config/i386/netware.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't\n\tdefine.\n\t* config/i386/vxworks.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t* config/ia64/hpux.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/ia64/ia64.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t* config/interix.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t(HANDLE_PRAGMA_WEAK): Don't undefine.\n\t* config/linux.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/m32r/linux.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t(HANDLE_PRAGMA_PACK): Don't undefine.\n\t* config/m32r/m32r.h (HANDLE_SYSV_PRAGMA): Don't undefine.\n\t* config/mep/mep.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/mips/elf.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/mips/sde.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/mmix/mmix.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t* config/netbsd.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t(HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/openbsd.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t* config/pa/pa-hpux.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t(HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/rs6000/aix.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t* config/rs6000/sysv4.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't\n\tdefine.\n\t* config/rx/rx.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/score/elf.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t* config/spu/spu.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\t* config/stormy16/stormy16.h (HANDLE_SYSV_PRAGMA): Don't define.\n\t* config/xtensa/elf.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n\nc-family:\n\t* c-pragma.c: Remove conditionals on HANDLE_PRAGMA_PACK,\n\tHANDLE_PRAGMA_PACK_PUSH_POP, HANDLE_PRAGMA_WEAK and\n\tHANDLE_PRAGMA_VISIBILITY.\n\t* c-pragma.h (HANDLE_PRAGMA_WEAK, HANDLE_PRAGMA_PACK,\n\tHANDLE_PRAGMA_VISIBILITY): Don't define.\n\t(HANDLE_SYSV_PRAGMA, HANDLE_PRAGMA_PACK_PUSH_POP): Don't test.\n\ncp:\n\t* name-lookup.c (handle_namespace_attrs): Don't check\n\tHANDLE_PRAGMA_VISIBILITY.\n\t* parser.c (cp_parser_namespace_definition): Don't check\n\tHANDLE_PRAGMA_VISIBILITY.\n\ntestsuite:\n\t* g++.dg/cpp/_Pragma1.C: Test for all non-Solaris targets.\n\t* gcc.dg/cpp/_Pragma6.c: Test for all non-Solaris targets.\n\t* gcc.dg/pack-test-1.c: Test for all non-default_packed targets.\n\t* gcc.dg/pack-test-2.c: Test for all targets.\n\t* gcc.dg/pragma-align.c: Test for all targets.\n\t* gcc.dg/pragma-pack-4.c: Do not skip for AVR.\n\t* gcc.dg/ucnid-10.c: Test for all targets.\n\nFrom-SVN: r166992", "tree": {"sha": "b2bd8d545c3a23b47aa405d8c17b8530c0cd6152", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b2bd8d545c3a23b47aa405d8c17b8530c0cd6152"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/24a57808c19e8177372e1b6076fa24684e62d192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a57808c19e8177372e1b6076fa24684e62d192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/24a57808c19e8177372e1b6076fa24684e62d192", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/24a57808c19e8177372e1b6076fa24684e62d192/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ea8e3f2f756a100cf7676f8e8a9803dbe4f482b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ea8e3f2f756a100cf7676f8e8a9803dbe4f482b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ea8e3f2f756a100cf7676f8e8a9803dbe4f482b"}], "stats": {"total": 417, "additions": 111, "deletions": 306}, "files": [{"sha": "684e920cdd119e5c8f5c79fbf03fac610552b7d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,3 +1,59 @@\n+2010-11-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/tm.texi.in (HANDLE_SYSV_PRAGMA,\n+\tHANDLE_PRAGMA_PACK_PUSH_POP): Remove.\n+\t(HANDLE_PRAGMA_PACK_WITH_EXPANSION): Don't refer to\n+\tHANDLE_SYSV_PRAGMA.\n+\t* doc/tm.texi: Regenerate.\n+\t* system.h (HANDLE_PRAGMA_PACK_PUSH_POP, HANDLE_SYSV_PRAGMA,\n+\tHANDLE_PRAGMA_WEAK): Poison.\n+\t* config/alpha/elf.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t* config/alpha/linux.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't\n+\tdefine.\n+\t* config/alpha/osf5.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t* config/alpha/vms.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t* config/arm/arm.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/arm/netbsd.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t* config/cris/cris.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/darwin.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t(HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/elfos.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t* config/freebsd.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/frv/frv.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t* config/i386/cygming.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't\n+\tdefine.\n+\t* config/i386/djgpp.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/i386/i386-interix.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t(HANDLE_PRAGMA_WEAK): Don't undefine.\n+\t* config/i386/netware.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't\n+\tdefine.\n+\t* config/i386/vxworks.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t* config/ia64/hpux.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/ia64/ia64.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t* config/interix.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t(HANDLE_PRAGMA_WEAK): Don't undefine.\n+\t* config/linux.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/m32r/linux.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t(HANDLE_PRAGMA_PACK): Don't undefine.\n+\t* config/m32r/m32r.h (HANDLE_SYSV_PRAGMA): Don't undefine.\n+\t* config/mep/mep.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/mips/elf.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/mips/sde.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/mmix/mmix.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t* config/netbsd.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t(HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/openbsd.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t* config/pa/pa-hpux.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t(HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/rs6000/aix.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t* config/rs6000/sysv4.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't\n+\tdefine.\n+\t* config/rx/rx.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/score/elf.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t* config/spu/spu.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\t* config/stormy16/stormy16.h (HANDLE_SYSV_PRAGMA): Don't define.\n+\t* config/xtensa/elf.h (HANDLE_PRAGMA_PACK_PUSH_POP): Don't define.\n+\n 2010-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \tPR target/31100"}, {"sha": "86e75ce84c9bc022abf64e0cb600cfc689c12f18", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,3 +1,12 @@\n+2010-11-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-pragma.c: Remove conditionals on HANDLE_PRAGMA_PACK,\n+\tHANDLE_PRAGMA_PACK_PUSH_POP, HANDLE_PRAGMA_WEAK and\n+\tHANDLE_PRAGMA_VISIBILITY.\n+\t* c-pragma.h (HANDLE_PRAGMA_WEAK, HANDLE_PRAGMA_PACK,\n+\tHANDLE_PRAGMA_VISIBILITY): Don't define.\n+\t(HANDLE_SYSV_PRAGMA, HANDLE_PRAGMA_PACK_PUSH_POP): Don't test.\n+\n 2010-11-20  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR c++/16189"}, {"sha": "2250bef9fc0de8311b41cd8a144adfd0591d9528", "filename": "gcc/c-family/c-pragma.c", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fc-family%2Fc-pragma.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fc-family%2Fc-pragma.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.c?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -54,10 +54,8 @@ typedef struct GTY(()) align_stack {\n \n static GTY(()) struct align_stack * alignment_stack;\n \n-#ifdef HANDLE_PRAGMA_PACK\n static void handle_pragma_pack (cpp_reader *);\n \n-#ifdef HANDLE_PRAGMA_PACK_PUSH_POP\n /* If we have a \"global\" #pragma pack(<n>) in effect when the first\n    #pragma pack(push,<n>) is encountered, this stores the value of\n    maximum_field_alignment in effect.  When the final pop_alignment()\n@@ -125,13 +123,6 @@ pop_alignment (tree id)\n \n   alignment_stack = entry;\n }\n-#else  /* not HANDLE_PRAGMA_PACK_PUSH_POP */\n-#define SET_GLOBAL_ALIGNMENT(ALIGN) (maximum_field_alignment = (ALIGN))\n-#define push_alignment(ID, N) \\\n-    GCC_BAD (\"#pragma pack(push[, id], <n>) is not supported on this target\")\n-#define pop_alignment(ID) \\\n-    GCC_BAD (\"#pragma pack(pop[, id], <n>) is not supported on this target\")\n-#endif /* HANDLE_PRAGMA_PACK_PUSH_POP */\n \n /* #pragma pack ()\n    #pragma pack (N)\n@@ -244,7 +235,6 @@ handle_pragma_pack (cpp_reader * ARG_UNUSED (dummy))\n     case pop:   pop_alignment (id);\t       break;\n     }\n }\n-#endif  /* HANDLE_PRAGMA_PACK */\n \n typedef struct GTY(()) pending_weak_d\n {\n@@ -257,7 +247,6 @@ DEF_VEC_ALLOC_O(pending_weak,gc);\n \n static GTY(()) VEC(pending_weak,gc) *pending_weaks;\n \n-#ifdef HANDLE_PRAGMA_WEAK\n static void apply_pragma_weak (tree, tree);\n static void handle_pragma_weak (cpp_reader *);\n \n@@ -380,17 +369,6 @@ handle_pragma_weak (cpp_reader * ARG_UNUSED (dummy))\n       pe->value = value;\n     }\n }\n-#else\n-void\n-maybe_apply_pragma_weak (tree ARG_UNUSED (decl))\n-{\n-}\n-\n-void\n-maybe_apply_pending_pragma_weaks (void)\n-{\n-}\n-#endif /* HANDLE_PRAGMA_WEAK */\n \n /* GCC supports two #pragma directives for renaming the external\n    symbol associated with a declaration (DECL_ASSEMBLER_NAME), for\n@@ -617,7 +595,6 @@ maybe_apply_renaming_pragma (tree decl, tree asmname)\n }\n \n \n-#ifdef HANDLE_PRAGMA_VISIBILITY\n static void handle_pragma_visibility (cpp_reader *);\n \n static VEC (int, heap) *visstack;\n@@ -710,8 +687,6 @@ handle_pragma_visibility (cpp_reader *dummy ATTRIBUTE_UNUSED)\n     warning (OPT_Wpragmas, \"junk at end of %<#pragma GCC visibility%>\");\n }\n \n-#endif\n-\n static void\n handle_pragma_diagnostic(cpp_reader *ARG_UNUSED(dummy))\n {\n@@ -1316,19 +1291,13 @@ init_pragma (void)\n     cpp_register_deferred_pragma (parse_in, \"GCC\", \"pch_preprocess\",\n \t\t\t\t  PRAGMA_GCC_PCH_PREPROCESS, false, false);\n \n-#ifdef HANDLE_PRAGMA_PACK\n #ifdef HANDLE_PRAGMA_PACK_WITH_EXPANSION\n   c_register_pragma_with_expansion (0, \"pack\", handle_pragma_pack);\n #else\n   c_register_pragma (0, \"pack\", handle_pragma_pack);\n #endif\n-#endif\n-#ifdef HANDLE_PRAGMA_WEAK\n   c_register_pragma (0, \"weak\", handle_pragma_weak);\n-#endif\n-#ifdef HANDLE_PRAGMA_VISIBILITY\n   c_register_pragma (\"GCC\", \"visibility\", handle_pragma_visibility);\n-#endif\n \n   c_register_pragma (\"GCC\", \"diagnostic\", handle_pragma_diagnostic);\n   c_register_pragma (\"GCC\", \"target\", handle_pragma_target);"}, {"sha": "1c29ec455eb56a913bb39fa226f2d32852200be6", "filename": "gcc/c-family/c-pragma.h", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fc-family%2Fc-pragma.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fc-family%2Fc-pragma.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-pragma.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,6 +1,6 @@\n /* Pragma related interfaces.\n    Copyright (C) 1995, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,\n-   2007, 2008  Free Software Foundation, Inc.\n+   2007, 2008, 2009, 2010  Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -75,26 +75,9 @@ typedef enum pragma_omp_clause {\n \n extern struct cpp_reader* parse_in;\n \n-#define HANDLE_PRAGMA_WEAK SUPPORTS_WEAK\n-\n-#ifdef HANDLE_SYSV_PRAGMA\n-/* We always support #pragma pack for SYSV pragmas.  */\n-#ifndef HANDLE_PRAGMA_PACK\n-#define HANDLE_PRAGMA_PACK 1\n-#endif\n-#endif /* HANDLE_SYSV_PRAGMA */\n-\n-\n-#ifdef HANDLE_PRAGMA_PACK_PUSH_POP\n-/* If we are supporting #pragma pack(push... then we automatically\n-   support #pragma pack(<n>)  */\n-#define HANDLE_PRAGMA_PACK 1\n-#endif /* HANDLE_PRAGMA_PACK_PUSH_POP */\n-\n /* It's safe to always leave visibility pragma enabled as if\n    visibility is not supported on the host OS platform the\n    statements are ignored.  */\n-#define HANDLE_PRAGMA_VISIBILITY 1\n extern void push_visibility (const char *, int);\n extern bool pop_visibility (int);\n "}, {"sha": "78cafedb970bd78899b9825ddb27f19b9dc63aff", "filename": "gcc/config/alpha/elf.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Falpha%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Falpha%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Felf.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -400,9 +400,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n   \"%{ffast-math|funsafe-math-optimizations:crtfastmath.o%s} \\\n    %{shared|pie:crtendS.o%s;:crtend.o%s} crtn.o%s\"\n \n-/* We support #pragma.  */\n-#define HANDLE_SYSV_PRAGMA 1\n-\n /* Select a format to encode pointers in exception handling data.  CODE\n    is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n    true if the symbol may be affected by dynamic relocations."}, {"sha": "86b6594f45b33afd119e0c277f15c843c79da29a", "filename": "gcc/config/alpha/linux.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Falpha%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Falpha%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Flinux.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,7 +1,7 @@\n /* Definitions of target machine for GNU compiler,\n    for Alpha Linux-based GNU systems.\n-   Copyright (C) 1996, 1997, 1998, 2002, 2003, 2004, 2005, 2006, 2007\n-   Free Software Foundation, Inc.\n+   Copyright (C) 1996, 1997, 1998, 2002, 2003, 2004, 2005, 2006, 2007, 2009,\n+   2010 Free Software Foundation, Inc.\n    Contributed by Richard Henderson.\n \n This file is part of GCC.\n@@ -61,9 +61,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef WCHAR_TYPE\n #define WCHAR_TYPE \"int\"\n \n-/* Define this so that all GNU/Linux targets handle the same pragmas.  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP\n-\n #define OPTION_GLIBC  (linux_libc == LIBC_GLIBC)\n \n /* Determine whether the entire c99 runtime is present in the"}, {"sha": "84a3c248eca6c657018ef01b41fa74254d6d2534", "filename": "gcc/config/alpha/osf5.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Falpha%2Fosf5.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Falpha%2Fosf5.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fosf5.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -268,9 +268,6 @@ __enable_execute_stack (void *addr)\t\t\t\t\t\\\n #define TARGET_ASM_OPEN_PAREN \"\"\n #define TARGET_ASM_CLOSE_PAREN \"\"\n \n-/* Handle #pragma weak and #pragma pack.  */\n-#define HANDLE_SYSV_PRAGMA 1\n-\n /* Handle #pragma extern_prefix.  */\n #define TARGET_HANDLE_PRAGMA_EXTERN_PREFIX 1\n "}, {"sha": "9985b67728ed56b1b92c06d650b9b0315fe3b5b6", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -69,8 +69,6 @@ along with GCC; see the file COPYING3.  If not see\n #define POINTER_SIZE 32\n #define POINTERS_EXTEND_UNSIGNED 0\n \n-#define HANDLE_SYSV_PRAGMA 1\n-\n #define MAX_OFILE_ALIGNMENT 524288  /* 8 x 2^16 by DEC Ada Test CD40VRA */\n \n /* The maximum alignment 'malloc' honors.  */"}, {"sha": "b7df3239fb546e8e8dbe298b2c0a4f0b73e5a43a", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -2097,9 +2097,6 @@ typedef struct\n #define ARM_INDEX_REGISTER_RTX_P(X)  \\\n   (GET_CODE (X) == REG && ARM_REG_OK_FOR_INDEX_P (X))\n \f\n-/* Define this for compatibility reasons. */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP\n-\n /* Specify the machine mode that this machine uses\n    for the index in the tablejump instruction.  */\n #define CASE_VECTOR_MODE Pmode"}, {"sha": "4a1adbae9915c85ac5c5d303e1891af61faa4e77", "filename": "gcc/config/arm/netbsd.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Farm%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Farm%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fnetbsd.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,5 +1,5 @@\n /* NetBSD/arm a.out version.\n-   Copyright (C) 1993, 1994, 1997, 1998, 2003, 2004, 2005, 2007, 2008\n+   Copyright (C) 1993, 1994, 1997, 1998, 2003, 2004, 2005, 2007, 2008, 2010\n    Free Software Foundation, Inc.\n    Contributed by Mark Brinicombe (amb@physig.ph.kcl.ac.uk)\n \n@@ -71,8 +71,6 @@\n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"int\"\n \n-#define HANDLE_SYSV_PRAGMA 1\n-\n /* We don't have any limit on the length as out debugger is GDB.  */\n #undef DBX_CONTIN_LENGTH\n "}, {"sha": "4049a6b4663c6701eec2270682491c24e39c382f", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1334,9 +1334,6 @@ enum cris_pic_symbol_type\n \n #define NO_IMPLICIT_EXTERN_C\n \n-/* No specific purpose other than warningless compatibility.  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1\n-\n /*\n  * Local variables:\n  * eval: (c-set-style \"gnu\")"}, {"sha": "086e428f2d4977f6174d60ea3543edf9a1b1645f", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -869,11 +869,6 @@ enum machopic_addr_class {\n #undef TARGET_ASM_NAMED_SECTION\n #define TARGET_ASM_NAMED_SECTION darwin_asm_named_section\n \n-/* Handle pragma weak and pragma pack.  */\n-#define HANDLE_SYSV_PRAGMA 1\n-\n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1\n-\n #define DARWIN_REGISTER_TARGET_PRAGMAS()\t\t\t\\\n   do {\t\t\t\t\t\t\t\t\\\n     if (!flag_preprocess_only)\t\t\t\t\t\\"}, {"sha": "e483216ef7fb45b6728f787cf68f83febd419057", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -65,10 +65,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define PCC_BITFIELD_TYPE_MATTERS 1\n #endif\n \n-/* Handle #pragma weak and #pragma pack.  */\n-\n-#define HANDLE_SYSV_PRAGMA 1\n-\n /* All ELF targets can support DWARF-2.  */\n \n #define DWARF2_DEBUGGING_INFO 1"}, {"sha": "51caad294be411b3a6ebec59989943cdec8505b4", "filename": "gcc/config/freebsd.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Ffreebsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Ffreebsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffreebsd.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -45,9 +45,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef  LIB_SPEC\n #define LIB_SPEC FBSD_LIB_SPEC\n \n-/* Define this so we can compile MS code for use with WINE.  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1\n-\n /************************[  Target stuff  ]***********************************/\n \n /* All FreeBSD Architectures support the ELF object file format.  */"}, {"sha": "49cee4cf334a8f2a618ec3d55f5306d063bd307e", "filename": "gcc/config/frv/frv.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Ffrv%2Ffrv.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Ffrv%2Ffrv.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffrv%2Ffrv.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -2306,13 +2306,6 @@ fprintf (STREAM, \"\\t.word .L%d\\n\", VALUE)\n    `QImode'.  */\n #define FUNCTION_MODE QImode\n \n-/* Define this macro to handle System V style pragmas: #pragma pack and\n-   #pragma weak.  Note, #pragma weak will only be supported if SUPPORT_WEAK is\n-   defined.\n-\n-   Defined in svr4.h.  */\n-#define HANDLE_SYSV_PRAGMA 1\n-\n /* A C expression for the maximum number of instructions to execute via\n    conditional execution instructions instead of a branch.  A value of\n    BRANCH_COST+1 is the default if the machine does not use"}, {"sha": "28c3082bd599587491943501cf3fc84418658419", "filename": "gcc/config/i386/cygming.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fi386%2Fcygming.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fi386%2Fcygming.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fcygming.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -178,9 +178,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef LONG_TYPE_SIZE\n #define LONG_TYPE_SIZE 32\n \f\n-/* Enable parsing of #pragma pack(push,<n>) and #pragma pack(pop).  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1\n-\n union tree_node;\n #define TREE union tree_node *\n \f"}, {"sha": "de355c4709dfb671ff7be770a8bab3a74f713316", "filename": "gcc/config/i386/djgpp.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fi386%2Fdjgpp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fdjgpp.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -24,11 +24,6 @@ along with GCC; see the file COPYING3.  If not see\n /* Don't assume anything about the header files.  */\n #define NO_IMPLICIT_EXTERN_C\n \n-#define HANDLE_SYSV_PRAGMA 1\n-\n-/* Enable parsing of #pragma pack(push,<n>) and #pragma pack(pop).  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1\n-\n /* If defined, a C expression whose value is a string containing the\n    assembler operation to identify the following data as\n    uninitialized global data.  If not defined, and neither"}, {"sha": "a2f579a1c443b71d1cd0a109ab8c37b348b04adb", "filename": "gcc/config/i386/i386-interix.h", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fi386%2Fi386-interix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-interix.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,6 +1,6 @@\n /* Target definitions for GCC for Intel 80386 running Interix\n-   Parts Copyright (C) 1991, 1999, 2000, 2002, 2003, 2004, 2007, 2008\n-   Free Software Foundation, Inc.\n+   Parts Copyright (C) 1991, 1999, 2000, 2002, 2003, 2004, 2007, 2008, 2009,\n+   2010 Free Software Foundation, Inc.\n \n    Parts:\n      by Douglas B. Rupp (drupp@cs.washington.edu).\n@@ -30,9 +30,6 @@ along with GCC; see the file COPYING3.  If not see\n #define SDB_DEBUGGING_INFO 1\n #define PREFERRED_DEBUGGING_TYPE DBX_DEBUG\n \n-#define HANDLE_SYSV_PRAGMA 1\n-#undef HANDLE_PRAGMA_WEAK  /* until the link format can handle it */\n-\n /* By default, target has a 80387, uses IEEE compatible arithmetic,\n    and returns float values in the 387 and needs stack probes\n    We also align doubles to 64-bits for MSVC default compatibility"}, {"sha": "7f90e1dd8141c3c82f5f17a2e07bb1d78331e48d", "filename": "gcc/config/i386/netware.h", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fi386%2Fnetware.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fi386%2Fnetware.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fnetware.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,6 +1,7 @@\n /* Core target definitions for GCC for Intel 80x86 running Netware.\n    and using dwarf for the debugging format.\n-   Copyright (C) 1993, 1994, 2004, 2007, 2008 Free Software Foundation, Inc.\n+   Copyright (C) 1993, 1994, 2004, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n \n    Written by David V. Henkel-Wallace (gumby@cygnus.com)\n \n@@ -104,9 +105,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #undef DBX_REGISTER_NUMBER\n #define DBX_REGISTER_NUMBER(n) (svr4_dbx_register_map[n])\n \n-/* Enable parsing of #pragma pack(push,<n>) and #pragma pack(pop).  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP\n-\n /* Default structure packing is 1-byte. */\n #define TARGET_DEFAULT_PACK_STRUCT 1\n "}, {"sha": "f7f929850162d41d725a9a2f762806ab53506144", "filename": "gcc/config/i386/vxworks.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fi386%2Fvxworks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fi386%2Fvxworks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fvxworks.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,5 +1,5 @@\n /* IA32 VxWorks target definitions for GNU compiler.\n-   Copyright (C) 2003, 2004, 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005, 2007, 2010 Free Software Foundation, Inc.\n    Updated by CodeSourcery, LLC.\n \n This file is part of GCC.\n@@ -18,8 +18,6 @@ You should have received a copy of the GNU General Public License\n along with GCC; see the file COPYING3.  If not see\n <http://www.gnu.org/licenses/>.  */\n \n-#define HANDLE_SYSV_PRAGMA 1\n-\n #undef  TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (80586, VxWorks syntax)\");\n "}, {"sha": "b422441d343bfaf82aa40ac9ee0661ddd815e524", "filename": "gcc/config/ia64/hpux.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fia64%2Fhpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fia64%2Fhpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fhpux.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine GNU compiler.  IA-64 version.\n-   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007\n+   Copyright (C) 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2009, 2010\n    Free Software Foundation, Inc.\n    Contributed by Steve Ellcey <sje@cup.hp.com> and\n                   Reva Cuthbertson <reva@cup.hp.com>\n@@ -213,9 +213,6 @@ do {\t\t\t\t\t\t\t\t\\\n #undef NO_PROFILE_COUNTERS\n #define NO_PROFILE_COUNTERS 0\n \n-#undef HANDLE_PRAGMA_PACK_PUSH_POP\n-#define HANDLE_PRAGMA_PACK_PUSH_POP\n-\n /* The HP-UX linker has a bug that causes calls from functions in\n    .text.unlikely to functions in .text to cause a segfault.  Until\n    it is fixed, prevent code from being put into .text.unlikely or"}, {"sha": "0b512f25cc87c897c40a985b60362097b2a1491b", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1778,12 +1778,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #define FUNCTION_MODE Pmode\n \n-/* Define this macro to handle System V style pragmas: #pragma pack and\n-   #pragma weak.  Note, #pragma weak will only be supported if SUPPORT_WEAK is\n-   defined.  */\n-\n-#define HANDLE_SYSV_PRAGMA 1\n-\n /* A C expression for the maximum number of instructions to execute via\n    conditional execution instructions instead of a branch.  A value of\n    BRANCH_COST+1 is the default if the machine does not use"}, {"sha": "aa3871214e82a413c481c027779b9a41c38cae21", "filename": "gcc/config/interix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Finterix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Finterix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Finterix.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -61,9 +61,6 @@ for windows/multi thread */\n \n #define STDC_0_IN_SYSTEM_HEADERS 1\n \n-#define HANDLE_SYSV_PRAGMA 1\n-#undef HANDLE_PRAGMA_WEAK  /* until the link format can handle it */\n-\n /* Names to predefine in the preprocessor for this target machine.  */\n \n #define DBX_DEBUGGING_INFO 1"}, {"sha": "4f3b4b8681a797fd7914701db52b0021b9ceebc8", "filename": "gcc/config/linux.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flinux.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -102,9 +102,6 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #define LINK_EH_SPEC \"%{!static:--eh-frame-hdr} \"\n #endif\n \n-/* Define this so we can compile MS code for use with WINE.  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP\n-\n #undef LINK_GCC_C_SEQUENCE_SPEC\n #define LINK_GCC_C_SEQUENCE_SPEC \\\n   \"%{static:--start-group} %G %L %{static:--end-group}%{!static:%G}\""}, {"sha": "9856e81fa2611edd26a53efda8f37abda8492e7d", "filename": "gcc/config/m32r/linux.h", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fm32r%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fm32r%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Flinux.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,5 +1,5 @@\n /* Definitions for Renesas M32R running Linux-based GNU systems using ELF.\n-   Copyright (C) 2003, 2004, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2006, 2007, 2010 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -23,10 +23,6 @@\n    supposed to be outputting something that will assemble under SVr4.\n    This gets us pretty close.  */\n \n-#define HANDLE_SYSV_PRAGMA\n-\n-#undef  HANDLE_PRAGMA_PACK\n-\n #undef  TARGET_VERSION\n #define TARGET_VERSION fprintf (stderr, \" (M32R GNU/Linux with ELF)\");\n "}, {"sha": "72e3dc9798bb8ca02c3637b17fe3d7d0e05822ad", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -22,7 +22,6 @@\n - longlong.h?\n */\n \n-#undef HANDLE_SYSV_PRAGMA\n #undef SIZE_TYPE\n #undef PTRDIFF_TYPE\n #undef WCHAR_TYPE"}, {"sha": "9a7b285cb8826b1205575377382e7f174bae3d41", "filename": "gcc/config/mep/mep.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fmep%2Fmep.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fmep%2Fmep.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -804,8 +804,6 @@ typedef struct\n \n #define REGISTER_TARGET_PRAGMAS()\t mep_register_pragmas ()\n \n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1\n-   \n /* If defined, a C expression to determine the base term of address X.\n    This macro is used in only one place: `find_base_term' in alias.c.\n "}, {"sha": "572553742f43e7323ff9ac2c652183e7f4234da5", "filename": "gcc/config/mips/elf.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fmips%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fmips%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Felf.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,5 +1,5 @@\n /* Target macros for mips*-elf targets.\n-   Copyright (C) 1994, 1997, 1999, 2000, 2002, 2003, 2004, 2007\n+   Copyright (C) 1994, 1997, 1999, 2000, 2002, 2003, 2004, 2007, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -49,5 +49,3 @@ along with GCC; see the file COPYING3.  If not see\n #define ENDFILE_SPEC \"crtend%O%s crtn%O%s\"\n \n #define NO_IMPLICIT_EXTERN_C 1\n-\n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1"}, {"sha": "dfa40b91a9410ef4abb0f0f589683f08924c1ac9", "filename": "gcc/config/mips/sde.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fmips%2Fsde.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fmips%2Fsde.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fsde.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -94,9 +94,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef PTRDIFF_TYPE\n #define PTRDIFF_TYPE \"long int\"\n \n-/* Enable parsing of #pragma pack(push,<n>) and #pragma pack(pop).  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1\n-\n /* Use standard ELF-style local labels (not '$' as on early Irix).  */\n #undef LOCAL_LABEL_PREFIX\n #define LOCAL_LABEL_PREFIX \".\""}, {"sha": "1d8665bdf3b585b550756dddd405f7de5af55753", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -887,8 +887,6 @@ typedef struct { int regs; int lib; } CUMULATIVE_ARGS;\n \n #define NO_IMPLICIT_EXTERN_C\n \n-#define HANDLE_SYSV_PRAGMA 1\n-\n /* These are checked.  */\n #define DOLLARS_IN_IDENTIFIERS 0\n #define NO_DOLLAR_IN_LABEL"}, {"sha": "ddf6567dc5311d60c07c8cf763904e1c640e5a66", "filename": "gcc/config/netbsd.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fnetbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fnetbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnetbsd.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,6 +1,6 @@\n /* Base configuration file for all NetBSD targets.\n    Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004,\n-   2007 Free Software Foundation, Inc.\n+   2007, 2009, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -158,10 +158,6 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_POSIX_IO\n #define TARGET_POSIX_IO\n \n-/* Handle #pragma weak and #pragma pack.  */\n-\n-#define HANDLE_SYSV_PRAGMA 1\n-\n /* Don't assume anything about the header files.  */\n #undef  NO_IMPLICIT_EXTERN_C\n #define NO_IMPLICIT_EXTERN_C    1\n@@ -224,6 +220,3 @@ __enable_execute_stack (void *addr)\t\t\t\t\t\\\n   /* 7 == PROT_READ | PROT_WRITE | PROT_EXEC */\t\t\t\t\\\n   (void) mprotect (page, end - page, 7);\t\t\t\t\\\n }\n-\n-/* Define this so we can compile MS code for use with WINE.  */\n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1"}, {"sha": "b1076a7b4d6c7ecbcb4db20f180d9d620e070879", "filename": "gcc/config/openbsd.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fopenbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fopenbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fopenbsd.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -282,12 +282,6 @@ do {\t\t\t\t\t\t\t\t\t \\\n /* Storage layout.  */\n \n \f\n-/* bug work around: we don't want to support #pragma weak, but the current\n-   code layout needs HANDLE_PRAGMA_WEAK asserted for __attribute((weak)) to\n-   work.  On the other hand, we don't define HANDLE_PRAGMA_WEAK directly,\n-   as this depends on a few other details as well...  */\n-#define HANDLE_SYSV_PRAGMA 1\n-\n /* Stack is explicitly denied execution rights on OpenBSD platforms.  */\n #define ENABLE_EXECUTE_STACK\t\t\t\t\t\t\\\n extern void __enable_execute_stack (void *);\t\t\t\t\\"}, {"sha": "69a9d1905f7bbb3f335ad8005ebb538d02ec02e0", "filename": "gcc/config/pa/pa-hpux.h", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fpa%2Fpa-hpux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-hpux.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for HP-UX.\n-   Copyright (C) 1991, 1995, 1996, 2002, 2003, 2004, 2007, 2008\n+   Copyright (C) 1991, 1995, 1996, 2002, 2003, 2004, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -114,12 +114,4 @@ along with GCC; see the file COPYING3.  If not see\n #undef TARGET_HPUX_UNWIND_LIBRARY\n #define TARGET_HPUX_UNWIND_LIBRARY 1\n \n-/* Handle #pragma weak and #pragma pack.  */\n-#undef HANDLE_SYSV_PRAGMA\n-#define HANDLE_SYSV_PRAGMA\n-\n-/* Define this so we can compile MS code for use with WINE.  */\n-#undef HANDLE_PRAGMA_PACK_PUSH_POP\n-#define HANDLE_PRAGMA_PACK_PUSH_POP\n-\n #define MD_UNWIND_SUPPORT \"config/pa/hpux-unwind.h\""}, {"sha": "7f60d329beda3ac98707ddffa8a799b77dd0552f", "filename": "gcc/config/rs6000/aix.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Frs6000%2Faix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Frs6000%2Faix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faix.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -56,9 +56,6 @@\n #define ASM_OUTPUT_DWARF_TABLE_REF rs6000_aix_asm_output_dwarf_table_ref\n #endif\n \n-/* Handle #pragma weak and #pragma pack.  */\n-#define HANDLE_SYSV_PRAGMA 1\n-\n /* This is the only version of nm that collect2 can work with.  */\n #define REAL_NM_FILE_NAME \"/usr/ucb/nm\"\n "}, {"sha": "ae27682a6827f3d1b631611420af0a7255e41538", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1062,18 +1062,6 @@ ncrtn.o%s\"\n /* Function name to call to do profiling.  */\n #define RS6000_MCOUNT \"_mcount\"\n \n-/* Define this macro (to a value of 1) if you want to support the\n-   Win32 style pragmas #pragma pack(push,<n>)' and #pragma\n-   pack(pop)'.  The pack(push,<n>) pragma specifies the maximum\n-   alignment (in bytes) of fields within a structure, in much the\n-   same way as the __aligned__' and __packed__' __attribute__'s\n-   do.  A pack value of zero resets the behavior to the default.\n-   Successive invocations of this pragma cause the previous values to\n-   be stacked, so that invocations of #pragma pack(pop)' will return\n-   to the previous value.  */\n-\n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1\n-\n /* Select a format to encode pointers in exception handling data.  CODE\n    is 0 for data, 1 for code labels, 2 for function pointers.  GLOBAL is\n    true if the symbol may be affected by dynamic relocations.  */"}, {"sha": "233fac2f3dcfc60ed806f399b444801a18dbd69c", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -151,8 +151,6 @@ extern enum rx_cpu_types  rx_cpu_type;\n \n #define LEGITIMATE_CONSTANT_P(X) \trx_is_legitimate_constant (X)\n \n-#define HANDLE_PRAGMA_PACK_PUSH_POP\t1\n-\n #define HAVE_PRE_DECCREMENT\t\t1\n #define HAVE_POST_INCREMENT\t\t1\n "}, {"sha": "30fc7f016cc1f047c1d3be7fb10fbc54d6c9e905", "filename": "gcc/config/score/elf.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fscore%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fscore%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fscore%2Felf.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,5 +1,5 @@\n /* elf.h for Sunplus S+CORE processor\n-   Copyright (C) 2005, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2005, 2007, 2010 Free Software Foundation, Inc.\n \n    This file is part of GCC.\n \n@@ -95,6 +95,3 @@\n \n #undef  ENDFILE_SPEC\n #define ENDFILE_SPEC            \"crtend%O%s crtn%O%s\"\n-\n-/* We support #pragma.  */\n-#define HANDLE_SYSV_PRAGMA      1"}, {"sha": "b5e054b18d9c570bc6b9fdd999f3096a9879600c", "filename": "gcc/config/spu/spu.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fspu%2Fspu.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fspu%2Fspu.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -512,8 +512,6 @@ targetm.resolve_overloaded_builtin = spu_resolve_overloaded_builtin;\t\\\n \n #define NO_IMPLICIT_EXTERN_C 1\n \n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1\n-\n /* Canonicalize a comparison from one we don't have to one we do have.  */\n #define CANONICALIZE_COMPARISON(CODE,OP0,OP1) \\\n   do {                                                                    \\"}, {"sha": "1781bc3adea05ee6a20fef6033a2081c0dde081d", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -587,5 +587,3 @@ enum reg_class\n #define FUNCTION_MODE HImode\n \n #define NO_IMPLICIT_EXTERN_C\n-\n-#define HANDLE_SYSV_PRAGMA 1"}, {"sha": "90b1c717666984ed13c45b338d4c677623c8709b", "filename": "gcc/config/xtensa/elf.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fxtensa%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fconfig%2Fxtensa%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Felf.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,6 +1,6 @@\n /* Xtensa/Elf configuration.\n    Derived from the configuration for GCC for Intel i386 running Linux.\n-   Copyright (C) 2001, 2003, 2006, 2007 Free Software Foundation, Inc.\n+   Copyright (C) 2001, 2003, 2006, 2007, 2010 Free Software Foundation, Inc.\n \n This file is part of GCC.\n \n@@ -98,5 +98,3 @@ do \\\n \t      \"GCC\", PREFIX_PRIORITY_LAST, 0, 0); \\\n   } \\\n while (0)\n-\n-#define HANDLE_PRAGMA_PACK_PUSH_POP 1"}, {"sha": "6daf31b38a802077de574ff6e8dfe84cac39786b", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,3 +1,10 @@\n+2010-11-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* name-lookup.c (handle_namespace_attrs): Don't check\n+\tHANDLE_PRAGMA_VISIBILITY.\n+\t* parser.c (cp_parser_namespace_definition): Don't check\n+\tHANDLE_PRAGMA_VISIBILITY.\n+\n 2010-11-20  Nathan Froyd  <froydnj@codesourcery.com>\n \n \tPR c++/16189"}, {"sha": "dc735443db251ad3e836aa88d56622f9f3bac38e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -3239,7 +3239,6 @@ handle_namespace_attrs (tree ns, tree attributes)\n       tree name = TREE_PURPOSE (d);\n       tree args = TREE_VALUE (d);\n \n-#ifdef HANDLE_PRAGMA_VISIBILITY\n       if (is_attribute_p (\"visibility\", name))\n \t{\n \t  tree x = args ? TREE_VALUE (args) : NULL_TREE;\n@@ -3260,7 +3259,6 @@ handle_namespace_attrs (tree ns, tree attributes)\n \t  saw_vis = true;\n \t}\n       else\n-#endif\n \t{\n \t  warning (OPT_Wattributes, \"%qD attribute directive ignored\",\n \t\t   name);"}, {"sha": "3ed0579538a9a2f450410d5e01ee7f23f9747eaa", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -13838,10 +13838,8 @@ cp_parser_namespace_definition (cp_parser* parser)\n   /* Parse the body of the namespace.  */\n   cp_parser_namespace_body (parser);\n \n-#ifdef HANDLE_PRAGMA_VISIBILITY\n   if (has_visibility)\n     pop_visibility (1);\n-#endif\n \n   /* Finish the namespace.  */\n   pop_namespace ();"}, {"sha": "58d5bbd55f739b9f974ae30aa261838fc6cc5323", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -10666,55 +10666,8 @@ rule to the makefile fragment pointed to by @code{tmake_file} that shows\n how to build this object file.\n @end deftypefun\n \n-@findex #pragma\n-@findex pragma\n-@defmac HANDLE_SYSV_PRAGMA\n-Define this macro (to a value of 1) if you want the System V style\n-pragmas @samp{#pragma pack(<n>)} and @samp{#pragma weak <name>\n-[=<value>]} to be supported by gcc.\n-\n-The pack pragma specifies the maximum alignment (in bytes) of fields\n-within a structure, in much the same way as the @samp{__aligned__} and\n-@samp{__packed__} @code{__attribute__}s do.  A pack value of zero resets\n-the behavior to the default.\n-\n-A subtlety for Microsoft Visual C/C++ style bit-field packing\n-(e.g.@: -mms-bitfields) for targets that support it:\n-When a bit-field is inserted into a packed record, the whole size\n-of the underlying type is used by one or more same-size adjacent\n-bit-fields (that is, if its long:3, 32 bits is used in the record,\n-and any additional adjacent long bit-fields are packed into the same\n-chunk of 32 bits.  However, if the size changes, a new field of that\n-size is allocated).\n-\n-If both MS bit-fields and @samp{__attribute__((packed))} are used,\n-the latter will take precedence.  If @samp{__attribute__((packed))} is\n-used on a single field when MS bit-fields are in use, it will take\n-precedence for that field, but the alignment of the rest of the structure\n-may affect its placement.\n-\n-The weak pragma only works if @code{SUPPORTS_WEAK} and\n-@code{ASM_WEAKEN_LABEL} are defined.  If enabled it allows the creation\n-of specifically named weak labels, optionally with a value.\n-@end defmac\n-\n-@findex #pragma\n-@findex pragma\n-@defmac HANDLE_PRAGMA_PACK_PUSH_POP\n-Define this macro (to a value of 1) if you want to support the Win32\n-style pragmas @samp{#pragma pack(push[,@var{n}])} and @samp{#pragma\n-pack(pop)}.  The @samp{pack(push,[@var{n}])} pragma specifies the maximum\n-alignment (in bytes) of fields within a structure, in much the same way as\n-the @samp{__aligned__} and @samp{__packed__} @code{__attribute__}s do.  A\n-pack value of zero resets the behavior to the default.  Successive\n-invocations of this pragma cause the previous values to be stacked, so\n-that invocations of @samp{#pragma pack(pop)} will return to the previous\n-value.\n-@end defmac\n-\n @defmac HANDLE_PRAGMA_PACK_WITH_EXPANSION\n-Define this macro, as well as\n-@code{HANDLE_SYSV_PRAGMA}, if macros should be expanded in the\n+Define this macro if macros should be expanded in the\n arguments of @samp{#pragma pack}.\n @end defmac\n "}, {"sha": "d9fed9bdadfe6396724c011166baea7a55fa5bf3", "filename": "gcc/doc/tm.texi.in", "status": "modified", "additions": 1, "deletions": 48, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fdoc%2Ftm.texi.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fdoc%2Ftm.texi.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi.in?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -10628,55 +10628,8 @@ rule to the makefile fragment pointed to by @code{tmake_file} that shows\n how to build this object file.\n @end deftypefun\n \n-@findex #pragma\n-@findex pragma\n-@defmac HANDLE_SYSV_PRAGMA\n-Define this macro (to a value of 1) if you want the System V style\n-pragmas @samp{#pragma pack(<n>)} and @samp{#pragma weak <name>\n-[=<value>]} to be supported by gcc.\n-\n-The pack pragma specifies the maximum alignment (in bytes) of fields\n-within a structure, in much the same way as the @samp{__aligned__} and\n-@samp{__packed__} @code{__attribute__}s do.  A pack value of zero resets\n-the behavior to the default.\n-\n-A subtlety for Microsoft Visual C/C++ style bit-field packing\n-(e.g.@: -mms-bitfields) for targets that support it:\n-When a bit-field is inserted into a packed record, the whole size\n-of the underlying type is used by one or more same-size adjacent\n-bit-fields (that is, if its long:3, 32 bits is used in the record,\n-and any additional adjacent long bit-fields are packed into the same\n-chunk of 32 bits.  However, if the size changes, a new field of that\n-size is allocated).\n-\n-If both MS bit-fields and @samp{__attribute__((packed))} are used,\n-the latter will take precedence.  If @samp{__attribute__((packed))} is\n-used on a single field when MS bit-fields are in use, it will take\n-precedence for that field, but the alignment of the rest of the structure\n-may affect its placement.\n-\n-The weak pragma only works if @code{SUPPORTS_WEAK} and\n-@code{ASM_WEAKEN_LABEL} are defined.  If enabled it allows the creation\n-of specifically named weak labels, optionally with a value.\n-@end defmac\n-\n-@findex #pragma\n-@findex pragma\n-@defmac HANDLE_PRAGMA_PACK_PUSH_POP\n-Define this macro (to a value of 1) if you want to support the Win32\n-style pragmas @samp{#pragma pack(push[,@var{n}])} and @samp{#pragma\n-pack(pop)}.  The @samp{pack(push,[@var{n}])} pragma specifies the maximum\n-alignment (in bytes) of fields within a structure, in much the same way as\n-the @samp{__aligned__} and @samp{__packed__} @code{__attribute__}s do.  A\n-pack value of zero resets the behavior to the default.  Successive\n-invocations of this pragma cause the previous values to be stacked, so\n-that invocations of @samp{#pragma pack(pop)} will return to the previous\n-value.\n-@end defmac\n-\n @defmac HANDLE_PRAGMA_PACK_WITH_EXPANSION\n-Define this macro, as well as\n-@code{HANDLE_SYSV_PRAGMA}, if macros should be expanded in the\n+Define this macro if macros should be expanded in the\n arguments of @samp{#pragma pack}.\n @end defmac\n "}, {"sha": "42332b3bd0138592fcb53709621e42e78e3770d5", "filename": "gcc/system.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fsystem.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Fsystem.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsystem.h?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -777,7 +777,8 @@ extern void fancy_abort (const char *, int, const char *) ATTRIBUTE_NORETURN;\n \tORDER_REGS_FOR_LOCAL_ALLOC FUNCTION_OUTGOING_VALUE\t\t   \\\n \tASM_DECLARE_CONSTANT_NAME MODIFY_TARGET_NAME SWITCHES_NEED_SPACES  \\\n \tSWITCH_CURTAILS_COMPILATION SWITCH_TAKES_ARG WORD_SWITCH_TAKES_ARG \\\n-\tTARGET_OPTION_TRANSLATE_TABLE\n+\tTARGET_OPTION_TRANSLATE_TABLE HANDLE_PRAGMA_PACK_PUSH_POP\t   \\\n+\tHANDLE_SYSV_PRAGMA HANDLE_PRAGMA_WEAK\n \n /* Hooks that are no longer used.  */\n  #pragma GCC poison LANG_HOOKS_FUNCTION_MARK LANG_HOOKS_FUNCTION_FREE\t\\"}, {"sha": "87e7ab5c5e4a06aae81a02a16e1046d04aa914f9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,3 +1,13 @@\n+2010-11-20  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* g++.dg/cpp/_Pragma1.C: Test for all non-Solaris targets.\n+\t* gcc.dg/cpp/_Pragma6.c: Test for all non-Solaris targets.\n+\t* gcc.dg/pack-test-1.c: Test for all non-default_packed targets.\n+\t* gcc.dg/pack-test-2.c: Test for all targets.\n+\t* gcc.dg/pragma-align.c: Test for all targets.\n+\t* gcc.dg/pragma-pack-4.c: Do not skip for AVR.\n+\t* gcc.dg/ucnid-10.c: Test for all targets.\n+\n 2010-11-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc.target/sparc/sparc-align-1.c: New test."}, {"sha": "2a4086b8125a853f2cb9557eea79354dd3eba993", "filename": "gcc/testsuite/g++.dg/cpp/_Pragma1.C", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2F_Pragma1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2F_Pragma1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2F_Pragma1.C?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,8 +1,7 @@\n // PR c++/27748\n // This is supposed to succeed only if\n-// the target defines HANDLE_PRAGMA_PACK_PUSH_POP \n-// and doesn't define HANDLE_PRAGMA_PACK_WITH_EXPANSION.\n-// { dg-do compile { target { ! { powerpc-ibm-aix* *-*-solaris2* fido-*-* m68k-*-* mips-sgi-irix* sh*-[us]*-elf m32c-*-* *-*-vxworks alpha*-dec-osf* } } } }\n+// the target doesn't define HANDLE_PRAGMA_PACK_WITH_EXPANSION.\n+// { dg-do compile { target { ! { *-*-solaris2* } } } }\n \n #define push bar\n #define foo _Pragma (\"pack(push)\")"}, {"sha": "7f3f7763e7505be8e8af5ed842a7d9fc32f319c1", "filename": "gcc/testsuite/gcc.dg/cpp/_Pragma6.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2F_Pragma6.c?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,8 +1,7 @@\n /* PR c/27747 */\n /* This is supposed to succeed only if\n-   the target defines HANDLE_PRAGMA_PACK_PUSH_POP\n-   and doesn't define HANDLE_PRAGMA_PACK_WITH_EXPANSION.  */\n-/* { dg-do compile { target { ! { powerpc-ibm-aix* *-*-solaris2* fido-*-* m68k-*-* sh*-[us]*-elf m32c-*-* *-*-vxworks moxie-*-* mips-sgi-irix* alpha*-dec-osf* } } } } */\n+   the target doesn't define HANDLE_PRAGMA_PACK_WITH_EXPANSION.  */\n+/* { dg-do compile { target { ! { *-*-solaris2* } } } } */\n \n #define push bar\n #define foo _Pragma (\"pack(push)\")"}, {"sha": "e019e7837919afdf4858aec78181f71bc297f187", "filename": "gcc/testsuite/gcc.dg/pack-test-1.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-1.c?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,7 +1,7 @@\n /* Test semantics of #pragma pack.\n    Contributed by Mike Coleman <mcoleman2@kc.rr.com> */\n \n-/* { dg-do compile { target { { *-*-linux* *-*-cygwin* powerpc*-*-eabi* } && { ! default_packed } } } } */\n+/* { dg-do compile { target { ! default_packed } } } */\n \n /* Mainly we're just testing whether pushing and popping seem to be\n    working correctly, and verifying the (alignment == 1) case, which"}, {"sha": "5c2f6ae466270f1f3cfa58b177d790f9ed2529cb", "filename": "gcc/testsuite/gcc.dg/pack-test-2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpack-test-2.c?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,7 +1,7 @@\n /* Tests for syntax checking of #pragma pack.\n    Contributed by Mike Coleman <mcoleman2@kc.rr.com> */\n \n-/* { dg-do compile { target *-*-linux* *-*-cygwin* powerpc*-*-eabi* } } */\n+/* { dg-do compile } */\n \n #pragma pack(pop)               /* { dg-warning \"without matching\" } */\n "}, {"sha": "3569a1fb24127d58b72c874121a88489f9bd0767", "filename": "gcc/testsuite/gcc.dg/pragma-align.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-align.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-align.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-align.c?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,6 +1,6 @@\n-/* Prove that HANDLE_SYSTEMV_PRAGMA alignment handling works somewhat. */\n+/* Prove that pragma alignment handling works somewhat. */\n \n-/* { dg-do run { target i?86-*-linux* x86_64-*-linux* i?86-*-*bsd* *-*-solaris2.* } } */\n+/* { dg-do run } */\n \n extern void abort (void);\n "}, {"sha": "c2ea59e9dacee28a1365fe9fa9ae75610d0eda46", "filename": "gcc/testsuite/gcc.dg/pragma-pack-4.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-pack-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-pack-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpragma-pack-4.c?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,6 +1,5 @@\n /* PR c/28286 */\n /* { dg-do compile } */\n-/* { dg-skip-if \"no Pragma pack\" { \"avr-*-*\" } { \"*\" } { \"\" } } */\n \n \n #pragma pack(0.5)         /* { dg-warning \"invalid constant\" } */"}, {"sha": "bbcde1ff6052e4d8d0c6207a7915132d335d1f6f", "filename": "gcc/testsuite/gcc.dg/ucnid-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/24a57808c19e8177372e1b6076fa24684e62d192/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fucnid-10.c?ref=24a57808c19e8177372e1b6076fa24684e62d192", "patch": "@@ -1,6 +1,6 @@\n /* Verify diagnostics for extended identifiers refer to UCNs (in the C\n    locale).  Test #pragma pack diagnostics.  */\n-/* { dg-do compile { target *-*-linux* *-*-cygwin* powerpc*-*-eabi* } } */\n+/* { dg-do compile } */\n /* { dg-options \"-std=gnu99 -fextended-identifiers\" } */\n \n #pragma pack(push)"}]}