{"sha": "9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWM0YTRiM2NiZDQ5NzA0NDdkMjg5NjM0ODFjMDRiYjdiN2QyYzRmMg==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2018-09-17T23:32:12Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2018-09-17T23:32:12Z"}, "message": "Add range_idx param to range_label::get_text\n\nThis patch updates the pure virtual function range_label::get_text\n(and its implementations) so that the index of the range is passed\nin, allowing for one label instance to be shared by multiple ranges.\n\ngcc/c-family/ChangeLog:\n\t* c-format.c (range_label_for_format_type_mismatch::get_text):\n\tUpdate for new param.\n\ngcc/c/ChangeLog:\n\t* c-objc-common.c (range_label_for_type_mismatch::get_text):\n\tUpdate for new param.\n\t* c-typeck.c (maybe_range_label_for_tree_type_mismatch::get_text):\n\tLikewise.\n\ngcc/cp/ChangeLog:\n\t* error.c (range_label_for_type_mismatch::get_text): Update for\n\tnew param.\n\ngcc/ChangeLog:\n\t* diagnostic-show-locus.c (class layout_range): Add field\n\t\"m_original_idx\".\n\t(layout_range::layout_range): Add \"original_idx\" param and use it\n\tto initialize new field.\n\t(make_range): Use 0 for original_idx.\n\t(layout::layout): Pass in index to calls to\n\tmaybe_add_location_range.\n\t(layout::maybe_add_location_range): Add param \"original_idx\" and\n\tpass it on to layout_range.\n\t(layout::print_any_labels): Pass on range->m_original_idx to\n\tget_text call.\n\t(gcc_rich_location::add_location_if_nearby): Use 0 for\n\toriginal_idx.\n\t* gcc-rich-location.h (text_range_label::get_text): Update for new\n\tparam.\n\t(range_label_for_type_mismatch::get_text): Likewise.\n\nlibcpp/ChangeLog:\n\t* include/line-map.h (range_label::get_text): Add param\n\t\"range_idx\".\n\nFrom-SVN: r264376", "tree": {"sha": "c99eac9e12ee799efbd01d27abbba880659e4241", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c99eac9e12ee799efbd01d27abbba880659e4241"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "71b731be7a9fa2b92ee63abeb48900008902f7a6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71b731be7a9fa2b92ee63abeb48900008902f7a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71b731be7a9fa2b92ee63abeb48900008902f7a6"}], "stats": {"total": 82, "additions": 67, "deletions": 15}, "files": [{"sha": "d236d68e5015e3a684d3b2078d8ff222877295a1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "patch": "@@ -1,3 +1,22 @@\n+2018-09-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* diagnostic-show-locus.c (class layout_range): Add field\n+\t\"m_original_idx\".\n+\t(layout_range::layout_range): Add \"original_idx\" param and use it\n+\tto initialize new field.\n+\t(make_range): Use 0 for original_idx.\n+\t(layout::layout): Pass in index to calls to\n+\tmaybe_add_location_range.\n+\t(layout::maybe_add_location_range): Add param \"original_idx\" and\n+\tpass it on to layout_range.\n+\t(layout::print_any_labels): Pass on range->m_original_idx to\n+\tget_text call.\n+\t(gcc_rich_location::add_location_if_nearby): Use 0 for\n+\toriginal_idx.\n+\t* gcc-rich-location.h (text_range_label::get_text): Update for new\n+\tparam.\n+\t(range_label_for_type_mismatch::get_text): Likewise.\n+\n 2018-09-17  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* config/i386/i386.c (ix86_emit_i387_log1p): Emit fldln2 earlier."}, {"sha": "f2ec39424162a12b2ee0ce86a5071e2736936c76", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "patch": "@@ -1,3 +1,8 @@\n+2018-09-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-format.c (range_label_for_format_type_mismatch::get_text):\n+\tUpdate for new param.\n+\n 2018-09-17  David Malcolm  <dmalcolm@redhat.com>\n \n \t* c-format.c (format_warning_at_char): Update for introduction of"}, {"sha": "a1133c75d93d1e7176f4abf722b49546e6db96ae", "filename": "gcc/c-family/c-format.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fc-family%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fc-family%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-format.c?ref=9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "patch": "@@ -3597,9 +3597,9 @@ class range_label_for_format_type_mismatch\n   {\n   }\n \n-  label_text get_text () const FINAL OVERRIDE\n+  label_text get_text (unsigned range_idx) const FINAL OVERRIDE\n   {\n-    label_text text = range_label_for_type_mismatch::get_text ();\n+    label_text text = range_label_for_type_mismatch::get_text (range_idx);\n     if (text.m_buffer == NULL)\n       return text;\n "}, {"sha": "6fd76cfe970379d542b9d8de8f621149b5afa808", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "patch": "@@ -1,3 +1,10 @@\n+2018-09-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* c-objc-common.c (range_label_for_type_mismatch::get_text):\n+\tUpdate for new param.\n+\t* c-typeck.c (maybe_range_label_for_tree_type_mismatch::get_text):\n+\tLikewise.\n+\n 2018-09-17  Martin Jambor  <mjambor@suse.cz>\n \n \tPR c/63886"}, {"sha": "fee52689e2dbc0c6fd67873ac73cf66f933f58de", "filename": "gcc/c/c-objc-common.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-objc-common.c?ref=9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "patch": "@@ -218,7 +218,7 @@ c_tree_printer (pretty_printer *pp, text_info *text, const char *spec,\n    range_label_for_type_mismatch.  */\n \n label_text\n-range_label_for_type_mismatch::get_text () const\n+range_label_for_type_mismatch::get_text (unsigned /*range_idx*/) const\n {\n   if (m_labelled_type == NULL_TREE)\n     return label_text (NULL, false);"}, {"sha": "a5a7da0084c72793e71b072dd0a0919decd852bc", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "patch": "@@ -11056,7 +11056,7 @@ class maybe_range_label_for_tree_type_mismatch : public range_label\n   {\n   }\n \n-  label_text get_text () const FINAL OVERRIDE\n+  label_text get_text (unsigned range_idx) const FINAL OVERRIDE\n   {\n     if (m_expr == NULL_TREE\n \t|| !EXPR_P (m_expr))\n@@ -11068,7 +11068,7 @@ class maybe_range_label_for_tree_type_mismatch : public range_label\n       other_type = TREE_TYPE (m_other_expr);\n \n    range_label_for_type_mismatch inner (expr_type, other_type);\n-   return inner.get_text ();\n+   return inner.get_text (range_idx);\n   }\n \n  private:"}, {"sha": "cec08bfd712ca4496d6f3e1f7d91d9fcfdd17d54", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "patch": "@@ -1,3 +1,8 @@\n+2018-09-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* error.c (range_label_for_type_mismatch::get_text): Update for\n+\tnew param.\n+\n 2018-09-13  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \t* typeck2.c (digest_init_r): Fix overlength strings."}, {"sha": "601f6d2c264ee4fd05c81bc983346307213b4b23", "filename": "gcc/cp/error.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fcp%2Ferror.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fcp%2Ferror.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ferror.c?ref=9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "patch": "@@ -4289,7 +4289,7 @@ qualified_name_lookup_error (tree scope, tree name,\n    Compare with print_template_differences above.  */\n \n label_text\n-range_label_for_type_mismatch::get_text () const\n+range_label_for_type_mismatch::get_text (unsigned /*range_idx*/) const\n {\n   if (m_labelled_type == NULL_TREE)\n     return label_text (NULL, false);"}, {"sha": "7dfb0a036cd6f541dcd161202a382f77f40795ab", "filename": "gcc/diagnostic-show-locus.c", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fdiagnostic-show-locus.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fdiagnostic-show-locus.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic-show-locus.c?ref=9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "patch": "@@ -128,6 +128,7 @@ class layout_range\n \t\tconst expanded_location *finish_exploc,\n \t\tenum range_display_kind range_display_kind,\n \t\tconst expanded_location *caret_exploc,\n+\t\tunsigned original_idx,\n \t\tconst range_label *label);\n \n   bool contains_point (linenum_type row, int column) const;\n@@ -137,6 +138,7 @@ class layout_range\n   layout_point m_finish;\n   enum range_display_kind m_range_display_kind;\n   layout_point m_caret;\n+  unsigned m_original_idx;\n   const range_label *m_label;\n };\n \n@@ -236,6 +238,7 @@ class layout\n \t  diagnostic_t diagnostic_kind);\n \n   bool maybe_add_location_range (const location_range *loc_range,\n+\t\t\t\t unsigned original_idx,\n \t\t\t\t bool restrict_to_current_line_spans);\n \n   int get_num_line_spans () const { return m_line_spans.length (); }\n@@ -414,11 +417,13 @@ layout_range::layout_range (const expanded_location *start_exploc,\n \t\t\t    const expanded_location *finish_exploc,\n \t\t\t    enum range_display_kind range_display_kind,\n \t\t\t    const expanded_location *caret_exploc,\n+\t\t\t    unsigned original_idx,\n \t\t\t    const range_label *label)\n : m_start (*start_exploc),\n   m_finish (*finish_exploc),\n   m_range_display_kind (range_display_kind),\n   m_caret (*caret_exploc),\n+  m_original_idx (original_idx),\n   m_label (label)\n {\n }\n@@ -546,7 +551,7 @@ make_range (int start_line, int start_col, int end_line, int end_col)\n   const expanded_location finish_exploc\n     = {\"test.c\", end_line, end_col, NULL, false};\n   return layout_range (&start_exploc, &finish_exploc, SHOW_RANGE_WITHOUT_CARET,\n-\t\t       &start_exploc, NULL);\n+\t\t       &start_exploc, 0, NULL);\n }\n \n /* Selftests for layout_range::contains_point and\n@@ -899,7 +904,7 @@ layout::layout (diagnostic_context * context,\n       /* This diagnostic printer can only cope with \"sufficiently sane\" ranges.\n \t Ignore any ranges that are awkward to handle.  */\n       const location_range *loc_range = richloc->get_range (idx);\n-      maybe_add_location_range (loc_range, false);\n+      maybe_add_location_range (loc_range, idx, false);\n     }\n \n   /* Populate m_fixit_hints, filtering to only those that are in the\n@@ -953,6 +958,9 @@ layout::layout (diagnostic_context * context,\n /* Attempt to add LOC_RANGE to m_layout_ranges, filtering them to\n    those that we can sanely print.\n \n+   ORIGINAL_IDX is the index of LOC_RANGE within its rich_location,\n+   (for use as extrinsic state by label ranges FIXME).\n+\n    If RESTRICT_TO_CURRENT_LINE_SPANS is true, then LOC_RANGE is also\n    filtered against this layout instance's current line spans: it\n    will only be added if the location is fully within the lines\n@@ -962,6 +970,7 @@ layout::layout (diagnostic_context * context,\n \n bool\n layout::maybe_add_location_range (const location_range *loc_range,\n+\t\t\t\t  unsigned original_idx,\n \t\t\t\t  bool restrict_to_current_line_spans)\n {\n   gcc_assert (loc_range);\n@@ -1001,7 +1010,7 @@ layout::maybe_add_location_range (const location_range *loc_range,\n   /* Everything is now known to be in the correct source file,\n      but it may require further sanitization.  */\n   layout_range ri (&start, &finish, loc_range->m_range_display_kind, &caret,\n-\t\t   loc_range->m_label);\n+\t\t   original_idx, loc_range->m_label);\n \n   /* If we have a range that finishes before it starts (perhaps\n      from something built via macro expansion), printing the\n@@ -1488,7 +1497,7 @@ layout::print_any_labels (linenum_type row)\n \t  continue;\n \n \tlabel_text text;\n-\ttext = range->m_label->get_text ();\n+\ttext = range->m_label->get_text (range->m_original_idx);\n \n \t/* Allow for labels that return NULL from their get_text\n \t   implementation (so e.g. such labels can control their own\n@@ -2277,7 +2286,7 @@ gcc_rich_location::add_location_if_nearby (location_t loc)\n   location_range loc_range;\n   loc_range.m_loc = loc;\n   loc_range.m_range_display_kind = SHOW_RANGE_WITHOUT_CARET;\n-  if (!layout.maybe_add_location_range (&loc_range, true))\n+  if (!layout.maybe_add_location_range (&loc_range, 0, true))\n     return false;\n \n   add_range (loc);"}, {"sha": "e55dd76f4c6cf91394d0fc66bd30139c24e44fb4", "filename": "gcc/gcc-rich-location.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fgcc-rich-location.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/gcc%2Fgcc-rich-location.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc-rich-location.h?ref=9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "patch": "@@ -109,7 +109,7 @@ class text_range_label : public range_label\n  public:\n   text_range_label (const char *text) : m_text (text) {}\n \n-  label_text get_text () const FINAL OVERRIDE\n+  label_text get_text (unsigned /*range_idx*/) const FINAL OVERRIDE\n   {\n     return label_text (const_cast <char *> (m_text), false);\n   }\n@@ -155,7 +155,7 @@ class range_label_for_type_mismatch : public range_label\n   {\n   }\n \n-  label_text get_text () const OVERRIDE;\n+  label_text get_text (unsigned range_idx) const OVERRIDE;\n \n  protected:\n   tree m_labelled_type;"}, {"sha": "ef96824f7ef388d08ec089efae1ab260d45d45c8", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "patch": "@@ -1,3 +1,8 @@\n+2018-09-17  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* include/line-map.h (range_label::get_text): Add param\n+\t\"range_idx\".\n+\n 2018-08-30  Nathan Sidwell  <nathan@acm.org>\n \n \t* include/line-map.h (enum lc_reason): Comment each member"}, {"sha": "c479dfa2b3ce4c11097bb45f61980b6e1b470ae8", "filename": "libcpp/include/line-map.h", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/libcpp%2Finclude%2Fline-map.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2/libcpp%2Finclude%2Fline-map.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fline-map.h?ref=9c4a4b3cbd4970447d28963481c04bb7b7d2c4f2", "patch": "@@ -1808,8 +1808,10 @@ class range_label\n  public:\n   virtual ~range_label () {}\n \n-  /* Get localized text for the label.  */\n-  virtual label_text get_text () const = 0;\n+  /* Get localized text for the label.\n+     The RANGE_IDX is provided, allowing for range_label instances to be\n+     shared by multiple ranges if need be (the \"flyweight\" design pattern).  */\n+  virtual label_text get_text (unsigned range_idx) const = 0;\n };\n \n /* A fix-it hint: a suggested insertion, replacement, or deletion of text."}]}