{"sha": "0cfc095c8d150af9f0f68a3238abe76b43e73bec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGNmYzA5NWM4ZDE1MGFmOWYwZjY4YTMyMzhhYmU3NmI0M2U3M2JlYw==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2018-10-12T10:49:27Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2018-10-12T10:49:27Z"}, "message": "[AArch64] Support zero-extended move to FP register\n\nThe popcount expansion uses SIMD instructions acting on 64-bit values.\nAs a result a popcount of a 32-bit integer requires zero-extension before \nmoving the zero-extended value into an FP register.  This patch adds\nsupport for zero-extended int->FP moves to avoid the redundant uxtw.\nSimilarly, add support for 32-bit zero-extending load->FP register\nand 32-bit zero-extending FP->FP and FP->int moves.\nAdd a missing 'fp' arch attribute to the related 8/16-bit pattern and\nfix an incorrect type attribute.\n\nTo complete zero-extended load support, add a new alternative to \nload_pair_zero_extendsidi2_aarch64 to support LDP into FP registers too.\n\nint f (int a)\n{\n  return __builtin_popcount (a);\n}\n\nBefore:\n\tuxtw\tx0, w0\n\tfmov\td0, x0\n\tcnt\tv0.8b, v0.8b\n\taddv\tb0, v0.8b\n\tfmov\tw0, s0\n\tret\n\nAfter:\n\tfmov\ts0, w0\n\tcnt\tv0.8b, v0.8b\n\taddv\tb0, v0.8b\n\tfmov\tw0, s0\n\tret\n\nPasses regress & bootstrap on AArch64.\n\n    gcc/\n\t* config/aarch64/aarch64.md (zero_extendsidi2_aarch64): Add alternatives\n\tto zero-extend between int and floating-point registers.\n\t(load_pair_zero_extendsidi2_aarch64): Add alternative for zero-extended\n\tldp into floating-point registers.  Add type and arch attributes.\n\t(zero_extend<SHORT:mode><GPI:mode>2_aarch64): Add arch attribute.\n\tUse f_loads for type attribute.\n\n    testsuite/\n\t* gcc.target/aarch64/popcnt.c: Test zero-extended popcount.\n\t* gcc.target/aarch64/vec_zeroextend.c: Test zero-extended vectors.\n\nFrom-SVN: r265079", "tree": {"sha": "f746fd533cf5f3d089d33b8c9c44c23d14eebf91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f746fd533cf5f3d089d33b8c9c44c23d14eebf91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0cfc095c8d150af9f0f68a3238abe76b43e73bec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cfc095c8d150af9f0f68a3238abe76b43e73bec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0cfc095c8d150af9f0f68a3238abe76b43e73bec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0cfc095c8d150af9f0f68a3238abe76b43e73bec/comments", "author": null, "committer": null, "parents": [{"sha": "4dc003fffabd35361fb77a40f077805d21184f9c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4dc003fffabd35361fb77a40f077805d21184f9c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4dc003fffabd35361fb77a40f077805d21184f9c"}], "stats": {"total": 81, "additions": 68, "deletions": 13}, "files": [{"sha": "ecf2b805d70c3fbfa42317ed37a75605b1e88b63", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfc095c8d150af9f0f68a3238abe76b43e73bec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfc095c8d150af9f0f68a3238abe76b43e73bec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0cfc095c8d150af9f0f68a3238abe76b43e73bec", "patch": "@@ -1,3 +1,12 @@\n+2018-10-12  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* config/aarch64/aarch64.md (zero_extendsidi2_aarch64): Add alternatives\n+\tto zero-extend between int and floating-point registers.\n+\t(load_pair_zero_extendsidi2_aarch64): Add alternative for zero-extended\n+\tldp into floating-point registers.  Add type and arch attributes.\n+\t(zero_extend<SHORT:mode><GPI:mode>2_aarch64): Add arch attribute.\n+\tUse f_loads for type attribute.\n+\n 2018-10-11  Martin Sebor  <msebor@redhat.com>\n \n \t* doc/extend.texi (attribute packed): Correct typos."}, {"sha": "58e9962ae249518b3786b295e4690df9ac326bc3", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfc095c8d150af9f0f68a3238abe76b43e73bec/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfc095c8d150af9f0f68a3238abe76b43e73bec/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=0cfc095c8d150af9f0f68a3238abe76b43e73bec", "patch": "@@ -1520,26 +1520,34 @@\n )\n \n (define_insn \"*zero_extendsidi2_aarch64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-        (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"r,m\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,r,w,w,r,w\")\n+        (zero_extend:DI (match_operand:SI 1 \"nonimmediate_operand\" \"r,m,r,m,w,w\")))]\n   \"\"\n   \"@\n    uxtw\\t%0, %w1\n-   ldr\\t%w0, %1\"\n-  [(set_attr \"type\" \"extend,load_4\")]\n+   ldr\\t%w0, %1\n+   fmov\\t%s0, %w1\n+   ldr\\t%s0, %1\n+   fmov\\t%w0, %s1\n+   fmov\\t%s0, %s1\"\n+  [(set_attr \"type\" \"extend,load_4,f_mcr,f_loads,f_mrc,fmov\")\n+   (set_attr \"arch\" \"*,*,fp,fp,fp,fp\")]\n )\n \n (define_insn \"*load_pair_zero_extendsidi2_aarch64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (match_operand:SI 1 \"aarch64_mem_pair_operand\" \"Ump\")))\n-   (set (match_operand:DI 2 \"register_operand\" \"=r\")\n-\t(zero_extend:DI (match_operand:SI 3 \"memory_operand\" \"m\")))]\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r,w\")\n+\t(zero_extend:DI (match_operand:SI 1 \"aarch64_mem_pair_operand\" \"Ump,Ump\")))\n+   (set (match_operand:DI 2 \"register_operand\" \"=r,w\")\n+\t(zero_extend:DI (match_operand:SI 3 \"memory_operand\" \"m,m\")))]\n   \"rtx_equal_p (XEXP (operands[3], 0),\n \t\tplus_constant (Pmode,\n \t\t\t       XEXP (operands[1], 0),\n \t\t\t       GET_MODE_SIZE (SImode)))\"\n-  \"ldp\\\\t%w0, %w2, %1\"\n-  [(set_attr \"type\" \"load_8\")]\n+  \"@\n+   ldp\\t%w0, %w2, %1\n+   ldp\\t%s0, %s2, %1\"\n+  [(set_attr \"type\" \"load_8,neon_load1_2reg\")\n+   (set_attr \"arch\" \"*,fp\")]\n )\n \n (define_expand \"<ANY_EXTEND:optab><SHORT:mode><GPI:mode>2\"\n@@ -1566,7 +1574,8 @@\n    and\\t%<GPI:w>0, %<GPI:w>1, <SHORT:short_mask>\n    ldr<SHORT:size>\\t%w0, %1\n    ldr\\t%<SHORT:size>0, %1\"\n-  [(set_attr \"type\" \"logic_imm,load_4,load_4\")]\n+  [(set_attr \"type\" \"logic_imm,load_4,f_loads\")\n+   (set_attr \"arch\" \"*,*,fp\")]\n )\n \n (define_expand \"<optab>qihi2\""}, {"sha": "964f4ea4c11f4177abbf04878f96c30081589c5b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfc095c8d150af9f0f68a3238abe76b43e73bec/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfc095c8d150af9f0f68a3238abe76b43e73bec/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0cfc095c8d150af9f0f68a3238abe76b43e73bec", "patch": "@@ -1,3 +1,8 @@\n+2018-10-12  Wilco Dijkstra  <wdijkstr@arm.com>\n+\n+\t* gcc.target/aarch64/popcnt.c: Test zero-extended popcount.\n+\t* gcc.target/aarch64/vec_zeroextend.c: Test zero-extended vectors.\n+\n 2018-10-11  Will Schmidt  <will_schmidt@vnet.ibm.com>\n \n \t* gcc.target/powerpc/fold-vec-insert-char-p8.c: New."}, {"sha": "2b5e9f3e2c0245438ed7bcc5d0d4e01efe01b1ee", "filename": "gcc/testsuite/gcc.target/aarch64/popcnt.c", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfc095c8d150af9f0f68a3238abe76b43e73bec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpopcnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfc095c8d150af9f0f68a3238abe76b43e73bec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpopcnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fpopcnt.c?ref=0cfc095c8d150af9f0f68a3238abe76b43e73bec", "patch": "@@ -19,5 +19,16 @@ foo2 (long long x)\n   return __builtin_popcountll (x);\n }\n \n-/* { dg-final { scan-assembler-not \"popcount\" } } */\n-/* { dg-final { scan-assembler-times \"cnt\\t\" 3 } } */\n+int\n+foo3 (int *p)\n+{\n+  return __builtin_popcount (*p);\n+}\n+\n+/* { dg-final { scan-assembler-not {popcount} } } */\n+/* { dg-final { scan-assembler-times {cnt\\t} 4 } } */\n+/* { dg-final { scan-assembler-times {fmov\\ts} 1 {target lp64} } } */\n+/* { dg-final { scan-assembler-times {fmov\\td} 2 {target lp64} } } */\n+/* { dg-final { scan-assembler-times {fmov\\ts} 2 {target ilp32} } } */\n+/* { dg-final { scan-assembler-times {fmov\\td} 1 {target ilp32} } } */\n+/* { dg-final { scan-assembler-times {ldr\\ts} 1 } } */"}, {"sha": "9c3971f036add8b1ee0204141d09db24720d05c6", "filename": "gcc/testsuite/gcc.target/aarch64/vec_zeroextend.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0cfc095c8d150af9f0f68a3238abe76b43e73bec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvec_zeroextend.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0cfc095c8d150af9f0f68a3238abe76b43e73bec/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvec_zeroextend.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvec_zeroextend.c?ref=0cfc095c8d150af9f0f68a3238abe76b43e73bec", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+#define vector __attribute__((vector_size(16) ))\n+\n+vector unsigned long long\n+f1(vector unsigned long long b, vector unsigned int a)\n+{\n+  b[0] = a[0];\n+  return b;\n+}\n+\n+unsigned long long\n+f2(vector unsigned int a)\n+{\n+  return a[0];\n+}\n+\n+/* { dg-final { scan-assembler-times {fmov} 2 } } */\n+/* { dg-final { scan-assembler-not {umov} } } */\n+/* { dg-final { scan-assembler-not {uxtw} } } */"}]}