{"sha": "7b8ec21790fa899f8729b8901380129565405dcd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2I4ZWMyMTc5MGZhODk5Zjg3MjliODkwMTM4MDEyOTU2NTQwNWRjZA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-10T18:21:58Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-02-10T18:21:58Z"}, "message": "Don't crash checking for unexported self-referential pointer field.\n\nFrom-SVN: r170017", "tree": {"sha": "23afb9500e147fde2f5e284cb7dda07627d8feca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/23afb9500e147fde2f5e284cb7dda07627d8feca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7b8ec21790fa899f8729b8901380129565405dcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8ec21790fa899f8729b8901380129565405dcd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7b8ec21790fa899f8729b8901380129565405dcd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7b8ec21790fa899f8729b8901380129565405dcd/comments", "author": null, "committer": null, "parents": [{"sha": "a3fa23e44b9bb4bbcd68bd8c960c00d53afb7c23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a3fa23e44b9bb4bbcd68bd8c960c00d53afb7c23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a3fa23e44b9bb4bbcd68bd8c960c00d53afb7c23"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "86efc3b28bc00ff2552801c9a7f7c9b124d14e1d", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7b8ec21790fa899f8729b8901380129565405dcd/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7b8ec21790fa899f8729b8901380129565405dcd/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=7b8ec21790fa899f8729b8901380129565405dcd", "patch": "@@ -8052,9 +8052,9 @@ Type::is_unexported_field_or_method(Gogo* gogo, const Type* type,\n \t\t\t\t    const std::string& name,\n \t\t\t\t    std::vector<const Named_type*>* seen)\n {\n-  type = type->deref();\n-\n   const Named_type* nt = type->named_type();\n+  if (nt == NULL)\n+    nt = type->deref()->named_type();\n   if (nt != NULL)\n     {\n       if (nt->is_unexported_local_method(gogo, name))\n@@ -8072,6 +8072,8 @@ Type::is_unexported_field_or_method(Gogo* gogo, const Type* type,\n \t}\n     }\n \n+  type = type->deref();\n+\n   const Interface_type* it = type->interface_type();\n   if (it != NULL && it->is_unexported_method(gogo, name))\n     return true;\n@@ -8095,11 +8097,17 @@ Type::is_unexported_field_or_method(Gogo* gogo, const Type* type,\n        ++pf)\n     {\n       if (pf->is_anonymous()\n-\t  && (!pf->type()->deref()->is_error_type()\n-\t      && !pf->type()->deref()->is_undefined()))\n+\t  && !pf->type()->deref()->is_error_type()\n+\t  && !pf->type()->deref()->is_undefined())\n \t{\n-\t  Named_type* subtype = pf->type()->deref()->named_type();\n-\t  gcc_assert(subtype != NULL);\n+\t  Named_type* subtype = pf->type()->named_type();\n+\t  if (subtype == NULL)\n+\t    subtype = pf->type()->deref()->named_type();\n+\t  if (subtype == NULL)\n+\t    {\n+\t      // This is an error, but it will be diagnosed elsewhere.\n+\t      continue;\n+\t    }\n \t  if (Type::is_unexported_field_or_method(gogo, subtype, name, seen))\n \t    {\n \t      if (nt != NULL)"}]}