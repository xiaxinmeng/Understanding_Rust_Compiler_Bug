{"sha": "7bd41ea6c8e6e08d4382230a82e6655c0d0ab477", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JkNDFlYTZjOGU2ZTA4ZDQzODIyMzBhODJlNjY1NWMwZDBhYjQ3Nw==", "commit": {"author": {"name": "Mark Mitchell", "email": "mark@codesourcery.com", "date": "1999-09-16T21:00:21Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-09-16T21:00:21Z"}, "message": "haifa-sched.c (sched_analyze): Keep the list of notes organized in pairs.\n\n\t* haifa-sched.c (sched_analyze): Keep the list of notes organized\n\tin pairs.\n\t(reemit_notes): Likewise.\n\nFrom-SVN: r29462", "tree": {"sha": "2ff14e08efafb9f46d170fb56157a53d8c0874c8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ff14e08efafb9f46d170fb56157a53d8c0874c8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bd41ea6c8e6e08d4382230a82e6655c0d0ab477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd41ea6c8e6e08d4382230a82e6655c0d0ab477", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bd41ea6c8e6e08d4382230a82e6655c0d0ab477", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bd41ea6c8e6e08d4382230a82e6655c0d0ab477/comments", "author": null, "committer": null, "parents": [{"sha": "96df4529dc098109a5616d81feedade2f7b3922f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/96df4529dc098109a5616d81feedade2f7b3922f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/96df4529dc098109a5616d81feedade2f7b3922f"}], "stats": {"total": 29, "additions": 20, "deletions": 9}, "files": [{"sha": "716ea42195fe17f3ada09ea73779c4efb874b434", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd41ea6c8e6e08d4382230a82e6655c0d0ab477/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd41ea6c8e6e08d4382230a82e6655c0d0ab477/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bd41ea6c8e6e08d4382230a82e6655c0d0ab477", "patch": "@@ -1,3 +1,9 @@\n+Thu Sep 16 14:03:32 1999  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* haifa-sched.c (sched_analyze): Keep the list of notes organized\n+\tin pairs.\n+\t(reemit_notes): Likewise.\n+\n Thu Sep 16 11:50:52 1999  Alex Samuel  <samuel@codesourcery.com>\n \n \t* ggc.h (ggc_root): Move to ggc-common.c."}, {"sha": "e0387c607b1697688470972a63e6d63582991639", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bd41ea6c8e6e08d4382230a82e6655c0d0ab477/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bd41ea6c8e6e08d4382230a82e6655c0d0ab477/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=7bd41ea6c8e6e08d4382230a82e6655c0d0ab477", "patch": "@@ -3939,12 +3939,17 @@ sched_analyze (head, tail)\n \t\t   || (NOTE_LINE_NUMBER (insn) == NOTE_INSN_SETJMP\n \t\t       && GET_CODE (PREV_INSN (insn)) != CALL_INSN)))\n \t{\n+\t  rtx region;\n+\n \t  if (NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_BEG\n \t      || NOTE_LINE_NUMBER (insn) == NOTE_INSN_EH_REGION_END)\n-\t    loop_notes = alloc_EXPR_LIST (REG_DEAD,\n-\t\t\t\t\t  GEN_INT (NOTE_EH_HANDLER (insn)),\n-\t\t\t\t\t  loop_notes);\n+\t    region = GEN_INT (NOTE_EH_HANDLER (insn));\n+\t  else\n+\t    region = GEN_INT (0);\n \n+\t  loop_notes = alloc_EXPR_LIST (REG_DEAD,\n+\t\t\t\t\tregion,\n+\t\t\t\t\tloop_notes);\n \t  loop_notes = alloc_EXPR_LIST (REG_DEAD,\n \t\t\t\t\tGEN_INT (NOTE_LINE_NUMBER (insn)),\n \t\t\t\t\tloop_notes);\n@@ -6497,7 +6502,7 @@ move_insn1 (insn, last)\n /* Search INSN for fake REG_DEAD note pairs for NOTE_INSN_SETJMP,\n    NOTE_INSN_{LOOP,EHREGION}_{BEG,END}; and convert them back into\n    NOTEs.  The REG_DEAD note following first one is contains the saved\n-   value for NOTE_EH_HANDLER which is useful for\n+   value for NOTE_BLOCK_NUMBER which is useful for\n    NOTE_INSN_EH_REGION_{BEG,END} NOTEs.  LAST is the last instruction\n    output by the instruction scheduler.  Return the new value of LAST.  */\n \n@@ -6519,6 +6524,8 @@ reemit_notes (insn, last)\n \t    {\n \t      retval = emit_note_after (NOTE_INSN_SETJMP, insn);\n \t      CONST_CALL_P (retval) = CONST_CALL_P (note);\n+\t      remove_note (insn, note);\n+\t      note = XEXP (note, 1);\n \t    }\n \t  else if (note_type == NOTE_INSN_RANGE_START\n                    || note_type == NOTE_INSN_RANGE_END)\n@@ -6531,13 +6538,11 @@ reemit_notes (insn, last)\n \t  else\n \t    {\n \t      last = emit_note_before (note_type, last);\n+\t      remove_note (insn, note);\n+\t      note = XEXP (note, 1);\n \t      if (note_type == NOTE_INSN_EH_REGION_BEG\n \t\t  || note_type == NOTE_INSN_EH_REGION_END)\n-\t\t{\n-\t\t  remove_note (insn, note);\n-\t\t  note = XEXP (note, 1);\n-\t\t  NOTE_EH_HANDLER (last) = INTVAL (XEXP (note, 0));\n-\t\t}\n+\t\tNOTE_EH_HANDLER (last) = INTVAL (XEXP (note, 0));\n \t    }\n \t  remove_note (insn, note);\n \t}"}]}