{"sha": "519104fe1ada7514354e982779db4657b8bf85da", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTE5MTA0ZmUxYWRhNzUxNDM1NGU5ODI3NzlkYjQ2NTdiOGJmODVkYQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2000-01-11T18:37:11Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2000-01-11T18:37:11Z"}, "message": "pa-protos.h: New file.\n\n        * pa-protos.h: New file.\n\n        * pa.c: Include recog.h and tm_p.h.\n        (compute_zdepwi_operands, compute_movstrsi_length,\n        remove_useless_addtr_insns, store_reg, load_reg, set_reg_plus_d,\n        find_addr_reg, import_milli): Add static prototypes.\n        (pa_cpu_string, pa_arch_string): Constify a char*.\n        (legitimize_pic_address): Pass argument `mode' to pic_label_operand.\n        (read_only_operand): Add argument `mode'.\n        (singlemove_string, output_move_double, output_fp_move_double,\n        output_block_move, output_and, output_ior, output_ascii,\n        remove_useless_addtr_insns, milli_names, output_mul_insn,\n        output_div_insn, output_mod_insn, output_arg_descriptor,\n        output_cbranch, output_bb, output_bvb, output_dbra, ,\n        output_millicode_call, output_call, hppa_encode_label,\n        output_parallel_movb, output_parallel_addb): Constify a char*.\n        (hppa_va_start): Mark parameter `stdarg_p' with ATTRIBUTE_UNUSED.\n        (output_parallel_addb): Remove extra arg to `constrain_operands'\n\n        * pa.h:  Move all prototypes to pa-protos.h.\n        (pa_cpu_string, pa_arch_string): Constify a char*.\n        (LEGITIMIZE_ADDRESS): Call `symbolic_operand' with mode argument.\n\n        * pa.md: Call `function_label_operand' with mode argument.\n        Likewise for `read_only_operand'.\n        Fix nesting of parens in call to `symbolic_operand'.\n\nFrom-SVN: r31331", "tree": {"sha": "a6a4f45d53bcf8369a28de3b2c1917c7ae6135a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a6a4f45d53bcf8369a28de3b2c1917c7ae6135a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/519104fe1ada7514354e982779db4657b8bf85da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519104fe1ada7514354e982779db4657b8bf85da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/519104fe1ada7514354e982779db4657b8bf85da", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/519104fe1ada7514354e982779db4657b8bf85da/comments", "author": null, "committer": null, "parents": [{"sha": "e2d457f192a36ad3968f077ce521523c8f716e96", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e2d457f192a36ad3968f077ce521523c8f716e96", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e2d457f192a36ad3968f077ce521523c8f716e96"}], "stats": {"total": 383, "additions": 232, "deletions": 151}, "files": [{"sha": "e35f8cfa28dfcb4805abf382134ed295d0db0279", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519104fe1ada7514354e982779db4657b8bf85da/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519104fe1ada7514354e982779db4657b8bf85da/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=519104fe1ada7514354e982779db4657b8bf85da", "patch": "@@ -1,3 +1,32 @@\n+2000-01-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* pa-protos.h: New file.\n+\n+\t* pa.c: Include recog.h and tm_p.h.\n+\t(compute_zdepwi_operands, compute_movstrsi_length,\n+\tremove_useless_addtr_insns, store_reg, load_reg, set_reg_plus_d,\n+\tfind_addr_reg, import_milli): Add static prototypes.\n+\t(pa_cpu_string, pa_arch_string): Constify a char*.\n+\t(legitimize_pic_address): Pass argument `mode' to pic_label_operand.\n+\t(read_only_operand): Add argument `mode'.\n+\t(singlemove_string, output_move_double, output_fp_move_double,\n+\toutput_block_move, output_and, output_ior, output_ascii,\n+\tremove_useless_addtr_insns, milli_names, output_mul_insn,\n+\toutput_div_insn, output_mod_insn, output_arg_descriptor,\n+\toutput_cbranch, output_bb, output_bvb, output_dbra, ,\n+\toutput_millicode_call, output_call, hppa_encode_label,\n+\toutput_parallel_movb, output_parallel_addb): Constify a char*.\n+\t(hppa_va_start): Mark parameter `stdarg_p' with ATTRIBUTE_UNUSED.\n+\t(output_parallel_addb): Remove extra arg to `constrain_operands'\n+\n+\t* pa.h:  Move all prototypes to pa-protos.h.\n+\t(pa_cpu_string, pa_arch_string): Constify a char*.\n+\t(LEGITIMIZE_ADDRESS): Call `symbolic_operand' with mode argument.\n+\n+\t* pa.md: Call `function_label_operand' with mode argument.\n+\tLikewise for `read_only_operand'.\n+\tFix nesting of parens in call to `symbolic_operand'.\n+\t\n 2000-01-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* i860-protos.h: New file."}, {"sha": "f766e38804fffc972d3aede819b3e18febe8b05a", "filename": "gcc/config/pa/pa-protos.h", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519104fe1ada7514354e982779db4657b8bf85da/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519104fe1ada7514354e982779db4657b8bf85da/gcc%2Fconfig%2Fpa%2Fpa-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa-protos.h?ref=519104fe1ada7514354e982779db4657b8bf85da", "patch": "@@ -0,0 +1,145 @@\n+/* Prototypes for pa.c functions used in the md file & elsewhere.\n+   Copyright (C) 2000 Free Software Foundation, Inc.\n+\n+This file is part of GNU CC.\n+\n+GNU CC is free software; you can redistribute it and/or modify\n+it under the terms of the GNU General Public License as published by\n+the Free Software Foundation; either version 2, or (at your option)\n+any later version.\n+\n+GNU CC is distributed in the hope that it will be useful,\n+but WITHOUT ANY WARRANTY; without even the implied warranty of\n+MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+GNU General Public License for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GNU CC; see the file COPYING.  If not, write to\n+the Free Software Foundation, 59 Temple Place - Suite 330,\n+Boston, MA 02111-1307, USA.  */\n+\n+#ifdef RTX_CODE\n+/* Prototype function used in MACHINE_DEPENDENT_REORG macro. */\n+extern void pa_reorg PARAMS ((rtx));\n+\n+/* Prototype function used in various macros. */\n+extern int symbolic_operand PARAMS ((rtx, enum machine_mode));\n+\n+/* Used in insn-*.c. */\n+extern int following_call PARAMS ((rtx));\n+extern int function_label_operand PARAMS ((rtx, enum machine_mode));\n+extern int lhs_lshift_cint_operand PARAMS ((rtx, enum machine_mode));\n+\n+#ifdef TREE_CODE\n+extern void hppa_va_start PARAMS ((int, tree, rtx));\n+extern rtx hppa_va_arg PARAMS ((tree, tree));\n+#endif /* TREE_CODE */\n+extern rtx hppa_legitimize_address PARAMS ((rtx, rtx, enum machine_mode));\n+\n+/* Define functions in pa.c and used in insn-output.c.  */\n+\n+extern const char *output_and PARAMS ((rtx *));\n+extern const char *output_ior PARAMS ((rtx *));\n+extern const char *output_move_double PARAMS ((rtx *));\n+extern const char *output_fp_move_double PARAMS ((rtx *));\n+extern const char *output_block_move PARAMS ((rtx *, int));\n+extern const char *output_cbranch PARAMS ((rtx *, int, int, int, rtx));\n+extern const char *output_bb PARAMS ((rtx *, int, int, int, rtx, int));\n+extern const char *output_bvb PARAMS ((rtx *, int, int, int, rtx, int));\n+extern const char *output_dbra PARAMS ((rtx *, rtx, int));\n+extern const char *output_movb PARAMS ((rtx *, rtx, int, int));\n+extern const char *output_parallel_movb PARAMS ((rtx *, int));\n+extern const char *output_parallel_addb PARAMS ((rtx *, int));\n+extern const char *output_call PARAMS ((rtx, rtx));\n+extern const char *output_millicode_call PARAMS ((rtx, rtx));\n+extern const char *output_mul_insn PARAMS ((int, rtx));\n+extern const char *output_div_insn PARAMS ((rtx *, int, rtx));\n+extern const char *output_mod_insn PARAMS ((int, rtx));\n+extern const char *singlemove_string PARAMS ((rtx *));\n+extern void output_arg_descriptor PARAMS ((rtx));\n+extern void output_global_address PARAMS ((FILE *, rtx, int));\n+extern void print_operand PARAMS ((FILE *, rtx, int));\n+extern rtx legitimize_pic_address PARAMS ((rtx, enum machine_mode, rtx));\n+extern struct rtx_def *gen_cmp_fp PARAMS ((enum rtx_code, rtx, rtx));\n+extern void hppa_encode_label PARAMS ((rtx, int));\n+extern int arith11_operand PARAMS ((rtx, enum machine_mode));\n+extern int symbolic_expression_p PARAMS ((rtx));\n+extern int hppa_address_cost PARAMS ((rtx));\n+extern int symbolic_memory_operand PARAMS ((rtx, enum machine_mode));\n+extern int pa_adjust_cost PARAMS ((rtx, rtx, rtx, int));\n+extern int pa_adjust_insn_length PARAMS ((rtx, int));\n+extern int int11_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_cint_move_operand PARAMS ((rtx, enum machine_mode));\n+extern int arith5_operand PARAMS ((rtx, enum machine_mode));\n+extern int uint5_operand PARAMS ((rtx, enum machine_mode));\n+extern int pic_label_operand PARAMS ((rtx, enum machine_mode));\n+extern int plus_xor_ior_operator PARAMS ((rtx, enum machine_mode));\n+extern int basereg_operand PARAMS ((rtx, enum machine_mode));\n+extern int shadd_operand PARAMS ((rtx, enum machine_mode));\n+extern int arith_operand PARAMS ((rtx, enum machine_mode));\n+extern int read_only_operand PARAMS ((rtx, enum machine_mode));\n+extern int move_operand PARAMS ((rtx, enum machine_mode));\n+extern int and_operand PARAMS ((rtx, enum machine_mode));\n+extern int ior_operand PARAMS ((rtx, enum machine_mode));\n+extern int arith32_operand PARAMS ((rtx, enum machine_mode));\n+extern int uint32_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_nonsymb_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_0_operand PARAMS ((rtx, enum machine_mode));\n+extern int reg_or_0_or_nonsymb_mem_operand PARAMS ((rtx, enum machine_mode));\n+extern int pre_cint_operand PARAMS ((rtx, enum machine_mode));\n+extern int post_cint_operand PARAMS ((rtx, enum machine_mode));\n+extern int div_operand PARAMS ((rtx, enum machine_mode));\n+extern int int5_operand PARAMS ((rtx, enum machine_mode));\n+extern int movb_comparison_operator PARAMS ((rtx, enum machine_mode));\n+extern int ireg_or_int5_operand PARAMS ((rtx, enum machine_mode));\n+extern int fmpyaddoperands PARAMS ((rtx *));\n+extern int fmpysuboperands PARAMS ((rtx *));\n+extern int call_operand_address PARAMS ((rtx, enum machine_mode));\n+extern int ior_operand PARAMS ((rtx, enum machine_mode));\n+extern void emit_bcond_fp PARAMS ((enum rtx_code, rtx));\n+extern int emit_move_sequence PARAMS ((rtx *, enum machine_mode, rtx));\n+extern int emit_hpdiv_const PARAMS ((rtx *, int));\n+extern int is_function_label_plus_const PARAMS ((rtx));\n+extern int jump_in_call_delay PARAMS ((rtx));\n+extern enum reg_class secondary_reload_class PARAMS ((enum reg_class,\n+\t\t\t\t\t\t      enum machine_mode, rtx));\n+\n+/* Declare functions defined in pa.c and used in templates.  */\n+\n+extern struct rtx_def *return_addr_rtx PARAMS ((int, rtx));\n+\n+extern int fp_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int arith_double_operand PARAMS ((rtx, enum machine_mode));\n+extern int ireg_operand PARAMS ((rtx, enum machine_mode));\n+extern int lhs_lshift_operand PARAMS ((rtx, enum machine_mode));\n+extern int pc_or_label_operand PARAMS ((rtx, enum machine_mode));\n+#ifdef ARGS_SIZE_RTX\n+/* expr.h defines ARGS_SIZE_RTX and `enum direction' */\n+extern enum direction function_arg_padding PARAMS ((enum machine_mode, tree));\n+#endif /* ARGS_SIZE_RTX */\n+extern int non_hard_reg_operand PARAMS ((rtx, enum machine_mode));\n+extern int eq_neq_comparison_operator PARAMS ((rtx, enum machine_mode));\n+extern int insn_refs_are_delayed PARAMS ((rtx));\n+#endif /* RTX_CODE */\n+\n+/* Prototype function used in macro CONST_OK_FOR_LETTER_P. */\n+extern int zdepi_cint_p PARAMS ((unsigned HOST_WIDE_INT));\n+\n+extern struct rtx_def *hppa_builtin_saveregs PARAMS ((void));\n+\n+extern void output_deferred_plabels PARAMS ((FILE *));\n+extern void override_options PARAMS ((void));\n+extern void output_ascii PARAMS ((FILE *, const unsigned char *, int));\n+extern void output_function_prologue PARAMS ((FILE *, int));\n+extern void output_function_epilogue PARAMS ((FILE *, int));\n+extern int compute_frame_size PARAMS ((int, int *));\n+extern int and_mask_p PARAMS ((unsigned HOST_WIDE_INT));\n+extern int cint_ok_for_move PARAMS ((HOST_WIDE_INT));\n+extern void hppa_expand_prologue PARAMS ((void));\n+extern void hppa_expand_epilogue PARAMS ((void));\n+extern int hppa_can_use_return_insn_p PARAMS ((void));\n+extern int ior_mask_p PARAMS ((unsigned HOST_WIDE_INT));\n+\n+#ifdef TREE_CODE\n+extern int reloc_needed PARAMS ((tree));\n+#endif /* TREE_CODE */"}, {"sha": "4b0a42fd5acb8459f3a1fe093376297d99e1634c", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 49, "deletions": 39, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519104fe1ada7514354e982779db4657b8bf85da/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519104fe1ada7514354e982779db4657b8bf85da/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=519104fe1ada7514354e982779db4657b8bf85da", "patch": "@@ -1,5 +1,5 @@\n /* Subroutines for insn-output.c for HPPA.\n-   Copyright (C) 1992, 93-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93-99, 2000 Free Software Foundation, Inc.\n    Contributed by Tim Moore (moore@cs.utah.edu), based on sparc.c\n \n This file is part of GNU CC.\n@@ -39,6 +39,8 @@ Boston, MA 02111-1307, USA.  */\n #include \"obstack.h\"\n #include \"toplev.h\"\n #include \"ggc.h\"\n+#include \"recog.h\"\n+#include \"tm_p.h\"\n \n static void restore_unscaled_index_insn_codes\t\tPROTO((rtx));\n static void record_unscaled_index_insn_codes\t\tPROTO((rtx));\n@@ -48,6 +50,12 @@ static int forward_branch_p\t\t\t\tPROTO((rtx));\n static int shadd_constant_p\t\t\t\tPROTO((int));\n static void pa_add_gc_roots                             PROTO((void));\n static void mark_deferred_plabels                       PROTO((void *));\n+static void compute_zdepwi_operands\t\t\tPROTO((unsigned HOST_WIDE_INT, unsigned *));\n+static int compute_movstrsi_length\t\t\tPROTO((rtx));\n+static void remove_useless_addtr_insns\t\t\tPROTO((rtx, int));\n+static void store_reg\t\t\t\t\tPROTO((int, int, int));\n+static void load_reg\t\t\t\t\tPROTO((int, int, int));\n+static void set_reg_plus_d\t\t\t\tPROTO((int, int, int));\n \n /* Save the operands last given to a compare for use when we\n    generate a scc or bcc insn.  */\n@@ -59,13 +67,13 @@ enum cmp_type hppa_branch_type;\n enum processor_type pa_cpu;\n \n /* String to hold which cpu we are scheduling for.  */\n-char *pa_cpu_string;\n+const char *pa_cpu_string;\n \n /* Which architecture we are generating code for.  */\n enum architecture_type pa_arch;\n \n /* String to hold which architecture we are generating code for.  */\n-char *pa_arch_string;\n+const char *pa_arch_string;\n \n /* Set by the FUNCTION_PROFILER macro. */\n int hp_profile_labelno;\n@@ -74,7 +82,7 @@ int hp_profile_labelno;\n    registers which were saved by the current function's prologue.  */\n static int gr_saved, fr_saved;\n \n-static rtx find_addr_reg ();\n+static rtx find_addr_reg PARAMS ((rtx));\n \n /* Keep track of the number of bytes we have output in the CODE subspaces\n    during this compilation so we'll know when to emit inline long-calls.  */\n@@ -643,12 +651,12 @@ pc_or_label_operand (op, mode)\n rtx\n legitimize_pic_address (orig, mode, reg)\n      rtx orig, reg;\n-     enum machine_mode mode ATTRIBUTE_UNUSED;\n+     enum machine_mode mode;\n {\n   rtx pic_ref = orig;\n \n   /* Labels need special handling.  */\n-  if (pic_label_operand (orig))\n+  if (pic_label_operand (orig, mode))\n     {\n       /* We do not want to go through the movXX expanders here since that\n \t would create recursion.\n@@ -1616,8 +1624,9 @@ reloc_needed (exp)\n    so SYMBOL_REF_FLAG, which is set by ENCODE_SECTION_INFO, will be true.  */\n \n int\n-read_only_operand (operand)\n+read_only_operand (operand, mode)\n      rtx operand;\n+     enum machine_mode mode ATTRIBUTE_UNUSED;\n {\n   if (GET_CODE (operand) == CONST)\n     operand = XEXP (XEXP (operand, 0), 0);\n@@ -1637,7 +1646,7 @@ read_only_operand (operand)\n \f\n /* Return the best assembler insn template\n    for moving operands[1] into operands[0] as a fullword.   */\n-char *\n+const char *\n singlemove_string (operands)\n      rtx *operands;\n {\n@@ -1683,7 +1692,7 @@ singlemove_string (operands)\n /* Compute position (in OP[1]) and width (in OP[2])\n    useful for copying IMM to a register using the zdepi\n    instructions.  Store the immediate value to insert in OP[0].  */\n-void\n+static void\n compute_zdepwi_operands (imm, op)\n      unsigned HOST_WIDE_INT imm;\n      unsigned *op;\n@@ -1722,7 +1731,7 @@ compute_zdepwi_operands (imm, op)\n /* Output assembler code to perform a doubleword move insn\n    with operands OPERANDS.  */\n \n-char *\n+const char *\n output_move_double (operands)\n      rtx *operands;\n {\n@@ -1999,7 +2008,7 @@ output_move_double (operands)\n   return \"\";\n }\n \f\n-char *\n+const char *\n output_fp_move_double (operands)\n      rtx *operands;\n {\n@@ -2070,7 +2079,7 @@ find_addr_reg (addr)\n    OPERANDS[5] is the alignment safe to use, as a CONST_INT. \n    OPERANDS[6] is another temporary register.   */\n \n-char *\n+const char *\n output_block_move (operands, size_is_constant)\n      rtx *operands;\n      int size_is_constant ATTRIBUTE_UNUSED;\n@@ -2171,7 +2180,7 @@ output_block_move (operands, size_is_constant)\n    Basic structure is the same as emit_block_move, except that we\n    count insns rather than emit them.  */\n \n-int\n+static int\n compute_movstrsi_length (insn)\n      rtx insn;\n {\n@@ -2203,7 +2212,7 @@ compute_movstrsi_length (insn)\n }\n \f\n \n-char *\n+const char *\n output_and (operands)\n      rtx *operands;\n {\n@@ -2254,7 +2263,7 @@ output_and (operands)\n     return \"and %1,%2,%0\";\n }\n \n-char *\n+const char *\n output_ior (operands)\n      rtx *operands;\n {\n@@ -2287,7 +2296,7 @@ output_ior (operands)\n void\n output_ascii (file, p, size)\n      FILE *file;\n-     unsigned char *p;\n+     const unsigned char *p;\n      int size;\n {\n   int i;\n@@ -2354,7 +2363,7 @@ output_ascii (file, p, size)\n    When CHECK_NOTES is zero we can only eliminate add,tr insns\n    when there's a 1:1 correspondence between fcmp and ftest/fbranch\n    instructions.  */\n-void\n+static void\n remove_useless_addtr_insns (insns, check_notes)\n      rtx insns;\n      int check_notes;\n@@ -3946,7 +3955,7 @@ output_global_address (file, x, round_constant)\n   if (GET_CODE (x) == HIGH)\n     x = XEXP (x, 0);\n \n-  if (GET_CODE (x) == SYMBOL_REF && read_only_operand (x))\n+  if (GET_CODE (x) == SYMBOL_REF && read_only_operand (x, VOIDmode))\n     assemble_name (file, XSTR (x, 0));\n   else if (GET_CODE (x) == SYMBOL_REF && !flag_pic)\n     {\n@@ -3955,7 +3964,7 @@ output_global_address (file, x, round_constant)\n     }\n   else if (GET_CODE (x) == CONST)\n     {\n-      char *sep = \"\";\n+      const char *sep = \"\";\n       int offset = 0;\t\t/* assembler wants -$global$ at end */\n       rtx base = NULL_RTX;\n \n@@ -4004,7 +4013,7 @@ output_global_address (file, x, round_constant)\n \tsep = \"-\";\n       else abort ();\n \n-      if (!read_only_operand (base) && !flag_pic)\n+      if (!read_only_operand (base, VOIDmode) && !flag_pic)\n \tfputs (\"-$global$\", file);\n       if (offset)\n \tfprintf (file,\"%s%d\", sep, offset);\n@@ -4040,8 +4049,9 @@ output_deferred_plabels (file)\n    Keep track of which ones we have used.  */\n \n enum millicodes { remI, remU, divI, divU, mulI, mulU, end1000 };\n+static void import_milli\t\t\tPROTO((enum millicodes));\n static char imported[(int)end1000];\n-static char *milli_names[] = {\"remI\", \"remU\", \"divI\", \"divU\", \"mulI\", \"mulU\"};\n+static const char * const milli_names[] = {\"remI\", \"remU\", \"divI\", \"divU\", \"mulI\", \"mulU\"};\n static char import_string[] = \".IMPORT $$....,MILLICODE\";\n #define MILLI_START 10\n \n@@ -4063,7 +4073,7 @@ import_milli (code)\n /* The register constraints have put the operands and return value in\n    the proper registers. */\n \n-char *\n+const char *\n output_mul_insn (unsignedp, insn)\n      int unsignedp ATTRIBUTE_UNUSED;\n      rtx insn;\n@@ -4124,7 +4134,7 @@ emit_hpdiv_const (operands, unsignedp)\n   return 0;\n }\n \n-char *\n+const char *\n output_div_insn (operands, unsignedp, insn)\n      rtx *operands;\n      int unsignedp;\n@@ -4179,7 +4189,7 @@ output_div_insn (operands, unsignedp, insn)\n \n /* Output a $$rem millicode to do mod. */\n \n-char *\n+const char *\n output_mod_insn (unsignedp, insn)\n      int unsignedp;\n      rtx insn;\n@@ -4202,7 +4212,7 @@ void\n output_arg_descriptor (call_insn)\n      rtx call_insn;\n {\n-  char *arg_regs[4];\n+  const char *arg_regs[4];\n   enum machine_mode arg_mode;\n   rtx link;\n   int i, output_flag = 0;\n@@ -4353,7 +4363,7 @@ secondary_reload_class (class, mode, in)\n   \n   if (!flag_pic\n       && is_symbolic\n-      && read_only_operand (in))\n+      && read_only_operand (in, VOIDmode))\n     return NO_REGS;\n \n   if (class != R1_REGS && is_symbolic)\n@@ -4439,7 +4449,7 @@ hppa_builtin_saveregs ()\n \n void\n hppa_va_start (stdarg_p, valist, nextarg)\n-     int stdarg_p;\n+     int stdarg_p ATTRIBUTE_UNUSED;\n      tree valist;\n      rtx nextarg;\n {\n@@ -4511,7 +4521,7 @@ hppa_va_arg (valist, type)\n    output appropriate to emit the branch corresponding to all given\n    parameters.  */\n \n-char *\n+const char *\n output_cbranch (operands, nullify, length, negated, insn)\n   rtx *operands;\n   int nullify, length, negated;\n@@ -4690,7 +4700,7 @@ output_cbranch (operands, nullify, length, negated, insn)\n    varying length branches, negated branches and all combinations of the\n    above.  it returns the appropriate output template to emit the branch.  */\n \n-char *\n+const char *\n output_bb (operands, nullify, length, negated, insn, which)\n   rtx *operands ATTRIBUTE_UNUSED;\n   int nullify, length, negated;\n@@ -4828,7 +4838,7 @@ output_bb (operands, nullify, length, negated, insn, which)\n    of the above.  it returns the appropriate output template to emit the\n    branch.  */\n \n-char *\n+const char *\n output_bvb (operands, nullify, length, negated, insn, which)\n   rtx *operands ATTRIBUTE_UNUSED;\n   int nullify, length, negated;\n@@ -4964,7 +4974,7 @@ output_bvb (operands, nullify, length, negated, insn, which)\n \n    Note it may perform some output operations on its own before\n    returning the final output string.  */\n-char *\n+const char *\n output_dbra (operands, insn, which_alternative)\n      rtx *operands;\n      rtx insn;\n@@ -5069,7 +5079,7 @@ output_dbra (operands, insn, which_alternative)\n \n    Note it may perform some output operations on its own before\n    returning the final output string.  */\n-char *\n+const char *\n output_movb (operands, insn, which_alternative, reverse_comparison)\n      rtx *operands;\n      rtx insn;\n@@ -5184,7 +5194,7 @@ output_movb (operands, insn, which_alternative, reverse_comparison)\n \n    CALL_DEST is the routine we are calling.  */\n \n-char *\n+const char *\n output_millicode_call (insn, call_dest)\n   rtx insn;\n   rtx call_dest;\n@@ -5344,7 +5354,7 @@ extern struct obstack *current_obstack;\n \n    CALL_DEST is the routine we are calling.  */\n \n-char *\n+const char *\n output_call (insn, call_dest)\n   rtx insn;\n   rtx call_dest;\n@@ -5437,7 +5447,7 @@ output_call (insn, call_dest)\n \t we don't have any direct calls in that case.  */\n \t{\n \t  int i;\n-\t  char *name = XSTR (call_dest, 0);\n+\t  const char *name = XSTR (call_dest, 0);\n \n \t  /* See if we have already put this function on the list\n \t     of deferred plabels.  This list is generally small,\n@@ -5602,7 +5612,7 @@ hppa_encode_label (sym, permanent)\n      rtx sym;\n      int permanent;\n {\n-  char *str = XSTR (sym, 0);\n+  const char *str = XSTR (sym, 0);\n   int len = strlen (str);\n   char *newstr;\n \n@@ -5904,7 +5914,7 @@ jump_in_call_delay (insn)\n \n /* Output an unconditional move and branch insn.  */\n \n-char *\n+const char *\n output_parallel_movb (operands, length)\n      rtx *operands;\n      int length;\n@@ -5935,7 +5945,7 @@ output_parallel_movb (operands, length)\n \n /* Output an unconditional add and branch insn.  */\n \n-char *\n+const char *\n output_parallel_addb (operands, length)\n      rtx *operands;\n      int length;\n@@ -6518,7 +6528,7 @@ pa_can_combine_p (new, anchor, floater, reversed, dest, src1, src2)\n   INSN_CODE (new) = -1;\n   insn_code_number = recog_memoized (new);\n   if (insn_code_number < 0\n-      || !constrain_operands (insn_code_number, 1))\n+      || !constrain_operands (1))\n     return 0;\n \n   if (reversed)"}, {"sha": "1ad4377aad27025ed22e5df4e5281b3ac36aa2ab", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 4, "deletions": 107, "changes": 111, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519104fe1ada7514354e982779db4657b8bf85da/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519104fe1ada7514354e982779db4657b8bf85da/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=519104fe1ada7514354e982779db4657b8bf85da", "patch": "@@ -1,5 +1,5 @@\n /* Definitions of target machine for GNU compiler, for the HP Spectrum.\n-   Copyright (C) 1992, 93-98, 1999 Free Software Foundation, Inc.\n+   Copyright (C) 1992, 93-99, 2000 Free Software Foundation, Inc.\n    Contributed by Michael Tiemann (tiemann@cygnus.com) of Cygnus Support\n    and Tim Moore (moore@defmacro.cs.utah.edu) of the Center for\n    Software Science at the University of Utah.\n@@ -44,7 +44,7 @@ enum processor_type\n };\n \n /* For -mschedule= option.  */\n-extern char *pa_cpu_string;\n+extern const char *pa_cpu_string;\n extern enum processor_type pa_cpu;\n \n #define pa_cpu_attr ((enum attr_cpu)pa_cpu)\n@@ -70,7 +70,7 @@ enum architecture_type\n };\n \n /* For -march= option.  */\n-extern char *pa_arch_string;\n+extern const char *pa_arch_string;\n extern enum architecture_type pa_arch;\n \n /* Print subsidiary information on the compiler version in use.  */\n@@ -294,17 +294,6 @@ extern int target_flags;\n /* Machine dependent reorg pass.  */\n #define MACHINE_DEPENDENT_REORG(X) pa_reorg(X)\n \n-/* Prototype function used in MACHINE_DEPENDENT_REORG macro. */\n-void pa_reorg ();\n-\n-/* Prototype function used in various macros. */\n-int symbolic_operand ();\n-\n-/* Used in insn-*.c. */\n-int following_call ();\n-int function_label_operand ();\n-int lhs_lshift_cint_operand ();\n-\n /* Names to predefine in the preprocessor for this target machine.  */\n \n #define CPP_PREDEFINES \"-Dhppa -Dhp9000s800 -D__hp9000s800 -Dhp9k8 -Dunix -Dhp9000 -Dhp800 -Dspectrum -DREVARGV -Asystem(unix) -Asystem(bsd) -Acpu(hppa) -Amachine(hppa)\"\n@@ -748,9 +737,6 @@ enum reg_class { NO_REGS, R1_REGS, GENERAL_REGS, FPUPPER_REGS, FP_REGS, GENERAL_\n    : (C) == 'P' ? and_mask_p (VALUE)\t\t\t\t\\\n    : 0)\n \n-/* Prototype function used in macro CONST_OK_FOR_LETTER_P. */\n-int zdepi_cint_p ();\n-\n /* Similar, but for floating or large integer constants, and defining letters\n    G and H.   Here VALUE is the CONST_DOUBLE rtx itself.\n \n@@ -1219,18 +1205,15 @@ extern int may_call_alloca;\n    Ordinarily they are not call used registers, but they are for\n    _builtin_saveregs, so we must make this explicit.  */\n \n-extern struct rtx_def *hppa_builtin_saveregs ();\n #define EXPAND_BUILTIN_SAVEREGS() hppa_builtin_saveregs ()\n \n /* Implement `va_start' for varargs and stdarg.  */\n \n-extern void hppa_va_start();\n #define EXPAND_BUILTIN_VA_START(stdarg, valist, nextarg) \\\n   hppa_va_start (stdarg, valist, nextarg)\n \n /* Implement `va_arg'.  */\n \n-extern struct rtx_def *hppa_va_arg();\n #define EXPAND_BUILTIN_VA_ARG(valist, type) \\\n   hppa_va_arg (valist, type)\n \f\n@@ -1586,7 +1569,6 @@ do { \t\t\t\t\t\t\t\t\t\\\n    It is always safe for this macro to do nothing.  It exists to recognize\n    opportunities to optimize the output.  */\n \n-extern struct rtx_def *hppa_legitimize_address ();\n #define LEGITIMIZE_ADDRESS(X, OLDX, MODE, WIN)\t\\\n { rtx orig_x = (X);\t\t\t\t\\\n   (X) = hppa_legitimize_address (X, OLDX, MODE);\t\\\n@@ -2153,7 +2135,7 @@ while (0)\n       fprintf (FILE, \"%d(%s)\", offset, reg_names [REGNO (base)]);\t\\\n       break;\t\t\t\t\t\t\t\t\\\n     case LO_SUM:\t\t\t\t\t\t\t\\\n-      if (!symbolic_operand (XEXP (addr, 1)))\t\t\t\t\\\n+      if (!symbolic_operand (XEXP (addr, 1), VOIDmode))\t\t\t\\\n \tfputs (\"R'\", FILE);\t\t\t\t\t\t\\\n       else if (flag_pic == 0)\t\t\t\t\t\t\\\n \tfputs (\"RR'\", FILE);\t\t\t\t\t\t\\\n@@ -2174,91 +2156,6 @@ while (0)\n     }}\n \n \f\n-/* Define functions in pa.c and used in insn-output.c.  */\n-\n-extern char *output_and ();\n-extern char *output_ior ();\n-extern char *output_move_double ();\n-extern char *output_fp_move_double ();\n-extern char *output_block_move ();\n-extern char *output_cbranch ();\n-extern char *output_bb ();\n-extern char *output_bvb ();\n-extern char *output_dbra ();\n-extern char *output_movb ();\n-extern char *output_parallel_movb ();\n-extern char *output_parallel_addb ();\n-extern char *output_return ();\n-extern char *output_call ();\n-extern char *output_millicode_call ();\n-extern char *output_mul_insn ();\n-extern char *output_div_insn ();\n-extern char *output_mod_insn ();\n-extern char *singlemove_string ();\n-extern void output_arg_descriptor ();\n-extern void output_deferred_plabels ();\n-extern void override_options ();\n-extern void output_ascii ();\n-extern void output_function_prologue ();\n-extern void output_function_epilogue ();\n-extern void output_global_address ();\n-extern void print_operand ();\n-extern struct rtx_def *legitimize_pic_address ();\n-extern struct rtx_def *gen_cmp_fp ();\n-extern void hppa_encode_label ();\n-extern int arith11_operand ();\n-extern int symbolic_expression_p ();\n-extern int reloc_needed ();\n-extern int compute_frame_size ();\n-extern int hppa_address_cost ();\n-extern int and_mask_p ();\n-extern int symbolic_memory_operand ();\n-extern int pa_adjust_cost ();\n-extern int pa_adjust_insn_length ();\n-extern int int11_operand ();\n-extern int reg_or_cint_move_operand ();\n-extern int arith5_operand ();\n-extern int uint5_operand ();\n-extern int pic_label_operand ();\n-extern int plus_xor_ior_operator ();\n-extern int basereg_operand ();\n-extern int shadd_operand ();\n-extern int arith_operand ();\n-extern int read_only_operand ();\n-extern int move_operand ();\n-extern int and_operand ();\n-extern int ior_operand ();\n-extern int arith32_operand ();\n-extern int uint32_operand ();\n-extern int reg_or_nonsymb_mem_operand ();\n-extern int reg_or_0_operand ();\n-extern int reg_or_0_or_nonsymb_mem_operand ();\n-extern int pre_cint_operand ();\n-extern int post_cint_operand ();\n-extern int div_operand ();\n-extern int int5_operand ();\n-extern int movb_comparison_operator ();\n-extern int ireg_or_int5_operand ();\n-extern int fmpyaddoperands ();\n-extern int fmpysuboperands ();\n-extern int call_operand_address ();\n-extern int cint_ok_for_move ();\n-extern int ior_operand ();\n-extern void emit_bcond_fp ();\n-extern int emit_move_sequence ();\n-extern int emit_hpdiv_const ();\n-extern void hppa_expand_prologue ();\n-extern void hppa_expand_epilogue ();\n-extern int hppa_can_use_return_insn_p ();\n-extern int is_function_label_plus_const ();\n-extern int jump_in_call_delay ();\n-extern enum reg_class secondary_reload_class ();\n-extern int insn_sets_and_refs_are_delayed ();\n-\n-/* Declare functions defined in pa.c and used in templates.  */\n-\n-extern struct rtx_def *return_addr_rtx ();\n-\n /* Find the return address associated with the frame given by\n    FRAMEADDR.  */\n #define RETURN_ADDR_RTX(COUNT, FRAMEADDR)\t\t\t\t \\"}, {"sha": "29bbac0a10a88654d58a313065ccd83246b878df", "filename": "gcc/config/pa/pa.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/519104fe1ada7514354e982779db4657b8bf85da/gcc%2Fconfig%2Fpa%2Fpa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/519104fe1ada7514354e982779db4657b8bf85da/gcc%2Fconfig%2Fpa%2Fpa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.md?ref=519104fe1ada7514354e982779db4657b8bf85da", "patch": "@@ -1,5 +1,5 @@\n ;;- Machine description for HP PA-RISC architecture for GNU C compiler\n-;;   Copyright (C) 1992, 93-98, 1999 Free Software Foundation, Inc.\n+;;   Copyright (C) 1992, 93-99, 2000 Free Software Foundation, Inc.\n ;;   Contributed by the Center for Software Science at the University\n ;;   of Utah.\n \n@@ -1620,7 +1620,7 @@\n \t(plus:SI (match_operand:SI 1 \"register_operand\" \"r\")\n \t\t (high:SI (match_operand 2 \"\" \"\"))))]\n   \"symbolic_operand (operands[2], Pmode)\n-   && ! function_label_operand (operands[2])\n+   && ! function_label_operand (operands[2], Pmode)\n    && flag_pic == 2\"\n   \"addil LT'%G2,%1\"\n   [(set_attr \"type\" \"binary\")\n@@ -1652,8 +1652,8 @@\n   [(set (match_operand:SI 0 \"register_operand\" \"=a\")\n \t(high:SI (match_operand 1 \"\" \"\")))]\n   \"symbolic_operand (operands[1], Pmode)\n-   && ! function_label_operand (operands[1])\n-   && ! read_only_operand (operands[1])\n+   && ! function_label_operand (operands[1], Pmode)\n+   && ! read_only_operand (operands[1], Pmode)\n    && ! flag_pic\"\n   \"*\n {\n@@ -1688,7 +1688,7 @@\n (define_insn \"\"\n   [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n \t(high:SI (match_operand 1 \"\" \"\")))]\n-  \"(!flag_pic || !symbolic_operand (operands[1]), Pmode)\n+  \"(!flag_pic || !symbolic_operand (operands[1], Pmode))\n     && !is_function_label_plus_const (operands[1])\"\n   \"*\n {"}]}