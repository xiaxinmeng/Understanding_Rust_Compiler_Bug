{"sha": "7ef0daad61a23ce02d461cac50b9eb1a67ef80dd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2VmMGRhYWQ2MWEyM2NlMDJkNDYxY2FjNTBiOWViMWE2N2VmODBkZA==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@cs.umass.edu", "date": "2003-10-11T19:00:49Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2003-10-11T19:00:49Z"}, "message": "expr.c: Follow spelling conventions.\n\n\t* expr.c: Follow spelling conventions.\n\t* final.c: Likewise.\n\t* optabs.c: Likewise.\n\t* sched-deps.c: Likewise.\n\t* sdbout.c: Likewise.\n\nFrom-SVN: r72361", "tree": {"sha": "b75603a6e4a2bded3183dd393f89df7d93b538cf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b75603a6e4a2bded3183dd393f89df7d93b538cf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd/comments", "author": null, "committer": null, "parents": [{"sha": "e3ff2b2bb624babf5209b08e9745024e940c1744", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3ff2b2bb624babf5209b08e9745024e940c1744", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3ff2b2bb624babf5209b08e9745024e940c1744"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "2012c2b08182452139d503ba6f7485577fb5bd7f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7ef0daad61a23ce02d461cac50b9eb1a67ef80dd", "patch": "@@ -1,3 +1,11 @@\n+2003-10-11  Kazu Hirata  <kazu@cs.umass.edu>\n+\n+\t* expr.c: Follow spelling conventions.\n+\t* final.c: Likewise.\n+\t* optabs.c: Likewise.\n+\t* sched-deps.c: Likewise.\n+\t* sdbout.c: Likewise.\n+\n Sat Oct 11 12:24:23 CEST 2003  Jan Hubicka  <jh@suse.cz>\n \n \t* varasm.c (notice_global_symbol):  Fix handling of variables; avoid"}, {"sha": "a973065a571e746a7c1689a4720640a48b4df6a3", "filename": "gcc/expr.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=7ef0daad61a23ce02d461cac50b9eb1a67ef80dd", "patch": "@@ -5716,7 +5716,7 @@ safe_from_p (rtx x, tree exp, int top_p)\n   /* A SAVE_EXPR might appear many times in the expression passed to the\n      top-level safe_from_p call, and if it has a complex subexpression,\n      examining it multiple times could result in a combinatorial explosion.\n-     E.g. on an Alpha running at least 200MHz, a Fortran test case compiled\n+     E.g. on an Alpha running at least 200MHz, a Fortran testcase compiled\n      with optimization took about 28 minutes to compile -- even though it was\n      only a few lines long.  So we mark each SAVE_EXPR we see with TREE_PRIVATE\n      and turn that off when we are done.  We keep a list of the SAVE_EXPRs"}, {"sha": "423c734ae2770dd2a7135aca9b190d935319aa49", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=7ef0daad61a23ce02d461cac50b9eb1a67ef80dd", "patch": "@@ -3422,7 +3422,7 @@ asm_fprintf (FILE *file, const char *p, ...)\n \t    break;\n \n #ifdef ASM_FPRINTF_EXTENSIONS\n-\t    /* Upper case letters are reserved for general use by asm_fprintf\n+\t    /* Uppercase letters are reserved for general use by asm_fprintf\n \t       and so are not available to target specific code.  In order to\n \t       prevent the ASM_FPRINTF_EXTENSIONS macro from using them then,\n \t       they are defined here.  As they get turned into real extensions"}, {"sha": "18a6b93ad76b5bfb9f2e678a65a63ade3c408d53", "filename": "gcc/optabs.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=7ef0daad61a23ce02d461cac50b9eb1a67ef80dd", "patch": "@@ -4950,7 +4950,7 @@ init_convert_optab (enum rtx_code code)\n /* Initialize the libfunc fields of an entire group of entries in some\n    optab.  Each entry is set equal to a string consisting of a leading\n    pair of underscores followed by a generic operation name followed by\n-   a mode name (downshifted to lower case) followed by a single character\n+   a mode name (downshifted to lowercase) followed by a single character\n    representing the number of operands for the given operation (which is\n    usually one of the characters '2', '3', or '4').\n "}, {"sha": "cd51527b2bdc99715c6bca47dba1ecc6b9c58b93", "filename": "gcc/sched-deps.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd/gcc%2Fsched-deps.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd/gcc%2Fsched-deps.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched-deps.c?ref=7ef0daad61a23ce02d461cac50b9eb1a67ef80dd", "patch": "@@ -1424,7 +1424,7 @@ free_deps (struct deps *deps)\n   free_INSN_LIST_list (&deps->last_pending_memory_flush);\n \n   /* Without the EXECUTE_IF_SET, this loop is executed max_reg * nr_regions\n-     times.  For a test case with 42000 regs and 8000 small basic blocks,\n+     times.  For a testcase with 42000 regs and 8000 small basic blocks,\n      this loop accounted for nearly 60% (84 sec) of the total -O2 runtime.  */\n   EXECUTE_IF_SET_IN_REG_SET (&deps->reg_last_in_use, 0, i,\n     {"}, {"sha": "9175417a7582c96011d5e3ce4054a2defa47ed2c", "filename": "gcc/sdbout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7ef0daad61a23ce02d461cac50b9eb1a67ef80dd/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=7ef0daad61a23ce02d461cac50b9eb1a67ef80dd", "patch": "@@ -1058,7 +1058,7 @@ sdbout_one_type (tree type)\n       /* This is reputed to cause trouble with the following case,\n \t but perhaps checking TYPE_SIZE above will fix it.  */\n \n-      /* Here is a test case:\n+      /* Here is a testcase:\n \n \tstruct foo {\n \t  struct badstr *bbb;"}]}