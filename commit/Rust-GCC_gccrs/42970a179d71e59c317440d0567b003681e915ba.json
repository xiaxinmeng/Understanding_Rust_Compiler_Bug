{"sha": "42970a179d71e59c317440d0567b003681e915ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDI5NzBhMTc5ZDcxZTU5YzMxNzQ0MGQwNTY3YjAwMzY4MWU5MTViYQ==", "commit": {"author": {"name": "Bin Cheng", "email": "bin.cheng@arm.com", "date": "2016-08-09T15:08:02Z"}, "committer": {"name": "Bin Cheng", "email": "amker@gcc.gnu.org", "date": "2016-08-09T15:08:02Z"}, "message": "re PR tree-optimization/72772 (Missed SCEV after pass reordering@236440)\n\n\tPR tree-optimization/72772\n\t* tree-ssa-loop-niter.c (loop_exits_before_overflow): Check equality\n\tfor expanded base.\n\n\tgcc/testsuite\n\tPR tree-optimization/pr72772\n\t* gcc.dg/tree-ssa/pr72772.c: New test.\n\nFrom-SVN: r239291", "tree": {"sha": "e2dec7e06bcb0dea52cd1cba64b1dc05f6b884da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2dec7e06bcb0dea52cd1cba64b1dc05f6b884da"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/42970a179d71e59c317440d0567b003681e915ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42970a179d71e59c317440d0567b003681e915ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42970a179d71e59c317440d0567b003681e915ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42970a179d71e59c317440d0567b003681e915ba/comments", "author": null, "committer": null, "parents": [{"sha": "8aa46dd2d5808a951afee6c6322615225f298d6a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aa46dd2d5808a951afee6c6322615225f298d6a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aa46dd2d5808a951afee6c6322615225f298d6a"}], "stats": {"total": 55, "additions": 47, "deletions": 8}, "files": [{"sha": "ff169b580eaf24dd537b61f15c3bfd0a8b978b03", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42970a179d71e59c317440d0567b003681e915ba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42970a179d71e59c317440d0567b003681e915ba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=42970a179d71e59c317440d0567b003681e915ba", "patch": "@@ -1,3 +1,9 @@\n+2016-08-09  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/72772\n+\t* tree-ssa-loop-niter.c (loop_exits_before_overflow): Check equality\n+\tfor expanded base.\n+\n 2016-08-09  Bin Cheng  <bin.cheng@arm.com>\n \n \tPR tree-optimization/72772"}, {"sha": "3a5468cbb478ff90d4dd6f14f947804d9caa6bcd", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42970a179d71e59c317440d0567b003681e915ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42970a179d71e59c317440d0567b003681e915ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=42970a179d71e59c317440d0567b003681e915ba", "patch": "@@ -1,3 +1,8 @@\n+2016-08-09  Bin Cheng  <bin.cheng@arm.com>\n+\n+\tPR tree-optimization/pr72772\n+\t* gcc.dg/tree-ssa/pr72772.c: New test.\n+\n 2016-08-09  Matthew Fortune  <matthew.fortune@imgtec.com>\n \n \tPR rtl-optimization/66669"}, {"sha": "b9985618093722abbd757d83abc2eb2a4e89ea78", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr72772.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42970a179d71e59c317440d0567b003681e915ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr72772.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42970a179d71e59c317440d0567b003681e915ba/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr72772.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr72772.c?ref=42970a179d71e59c317440d0567b003681e915ba", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -ftree-loop-distribution -fdump-tree-ldist-details\" } */\n+\n+int foo (int flag, char *a)\n+{\n+  short i, j;\n+  short l = 0;\n+  if (flag == 1)\n+    l = 3;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      for (j = l - 1; j > 0; j--)\n+        a[j] = a[j - 1];\n+      a[0] = i;\n+    }\n+}\n+\n+/* Addresses of array reference a[j] and a[j - 1] are SCEVs.  */\n+/* { dg-final { scan-tree-dump-not \"failed: evolution of base is not affine.\" \"ldist\" } } */\n+"}, {"sha": "a50d2b4b43ee88eececa1fb59ea7758545904351", "filename": "gcc/tree-ssa-loop-niter.c", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/42970a179d71e59c317440d0567b003681e915ba/gcc%2Ftree-ssa-loop-niter.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/42970a179d71e59c317440d0567b003681e915ba/gcc%2Ftree-ssa-loop-niter.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-niter.c?ref=42970a179d71e59c317440d0567b003681e915ba", "patch": "@@ -4214,7 +4214,7 @@ loop_exits_before_overflow (tree base, tree step,\n       for (civ = loop->control_ivs; civ; civ = civ->next)\n \t{\n \t  enum tree_code code;\n-\t  tree stepped, extreme, civ_type = TREE_TYPE (civ->step);\n+\t  tree civ_type = TREE_TYPE (civ->step);\n \n \t  /* Have to consider type difference because operand_equal_p ignores\n \t     that for constants.  */\n@@ -4227,11 +4227,13 @@ loop_exits_before_overflow (tree base, tree step,\n \t    continue;\n \n \t  /* Done proving if this is a no-overflow control IV.  */\n-\t  if (operand_equal_p (base, civ->base, 0)\n-\t      /* Control IV is recorded after expanding simple operations,\n-\t\t Here we compare it against expanded base too.  */\n-\t      || operand_equal_p (expand_simple_operations (base),\n-\t\t\t\t  civ->base, 0))\n+\t  if (operand_equal_p (base, civ->base, 0))\n+\t    return true;\n+\n+\t  /* Control IV is recorded after expanding simple operations,\n+\t     Here we expand base and compare it too.  */\n+\t  tree expanded_base = expand_simple_operations (base);\n+\t  if (operand_equal_p (expanded_base, civ->base, 0))\n \t    return true;\n \n \t  /* If this is a before stepping control IV, in other words, we have\n@@ -4253,9 +4255,14 @@ loop_exits_before_overflow (tree base, tree step,\n \t  else\n \t    code = PLUS_EXPR;\n \n-\t  stepped = fold_build2 (code, TREE_TYPE (base), base, step);\n-\t  if (operand_equal_p (stepped, civ->base, 0))\n+\t  tree stepped = fold_build2 (code, TREE_TYPE (base), base, step);\n+\t  tree expanded_stepped = fold_build2 (code, TREE_TYPE (base),\n+\t\t\t\t\t       expanded_base, step);\n+\t  if (operand_equal_p (stepped, civ->base, 0)\n+\t      || operand_equal_p (expanded_stepped, civ->base, 0))\n \t    {\n+\t      tree extreme;\n+\n \t      if (tree_int_cst_sign_bit (step))\n \t\t{\n \t\t  code = LT_EXPR;"}]}