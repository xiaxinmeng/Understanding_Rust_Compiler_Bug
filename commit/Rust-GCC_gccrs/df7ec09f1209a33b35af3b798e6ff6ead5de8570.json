{"sha": "df7ec09f1209a33b35af3b798e6ff6ead5de8570", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGY3ZWMwOWYxMjA5YTMzYjM1YWYzYjc5OGU2ZmY2ZWFkNWRlODU3MA==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2016-08-11T15:51:01Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2016-08-11T15:51:01Z"}, "message": "Use TImode for piecewise move in 64-bit mode\n\nUse TImode for piecewise move in 64-bit mode.  We should use TImode in\n32-bit mode and use OImode or XImode if they are available.  But since\nby_pieces_ninsns determines the widest mode with MAX_FIXED_MODE_SIZE,\nwe can only use TImode in 64-bit mode.\n\ngcc/\n\n\t* config/i386/i386.h (MOVE_MAX_PIECES): Use TImode in 64-bit\n\tmode if unaligned SSE load and store are optimal.\n\ngcc/testsuite/\n\n\t* gcc.target/i386/pieces-memcpy-1.c: New test.\n\t* gcc.target/i386/pieces-memcpy-2.c: Likewise.\n\t* gcc.target/i386/pieces-memcpy-3.c: Likewise.\n\t* gcc.target/i386/pieces-memcpy-4.c: Likewise.\n\t* gcc.target/i386/pieces-memcpy-5.c: Likewise.\n\t* gcc.target/i386/pieces-memcpy-6.c: Likewise.\n\nFrom-SVN: r239378", "tree": {"sha": "6b52fc64727c944242444e0addb30cbb1af05030", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b52fc64727c944242444e0addb30cbb1af05030"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/df7ec09f1209a33b35af3b798e6ff6ead5de8570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7ec09f1209a33b35af3b798e6ff6ead5de8570", "html_url": "https://github.com/Rust-GCC/gccrs/commit/df7ec09f1209a33b35af3b798e6ff6ead5de8570", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/df7ec09f1209a33b35af3b798e6ff6ead5de8570/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4200a7231e1ad67dc5476b7b6ab9ea015ccaa65d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4200a7231e1ad67dc5476b7b6ab9ea015ccaa65d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4200a7231e1ad67dc5476b7b6ab9ea015ccaa65d"}], "stats": {"total": 106, "additions": 104, "deletions": 2}, "files": [{"sha": "9ed3a74ef8121d60e3885aaaf87834a29c094143", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=df7ec09f1209a33b35af3b798e6ff6ead5de8570", "patch": "@@ -1,3 +1,8 @@\n+2015-08-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* config/i386/i386.h (MOVE_MAX_PIECES): Use TImode in 64-bit\n+\tmode if unaligned SSE load and store are optimal.\n+\n 2016-08-11  Bernd Edlinger  <bernd.edlinger@hotmail.de>\n \n \tPR tree-optimization/71083"}, {"sha": "8751143a2a6d4402d623df9503211a5bb56b5064", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=df7ec09f1209a33b35af3b798e6ff6ead5de8570", "patch": "@@ -1950,8 +1950,18 @@ typedef struct ix86_args {\n \n /* MOVE_MAX_PIECES is the number of bytes at a time which we can\n    move efficiently, as opposed to  MOVE_MAX which is the maximum\n-   number of bytes we can move with a single instruction.  */\n-#define MOVE_MAX_PIECES UNITS_PER_WORD\n+   number of bytes we can move with a single instruction.\n+\n+   ??? We should use TImode in 32-bit mode and use OImode or XImode\n+   if they are available.  But since by_pieces_ninsns determines the\n+   widest mode with MAX_FIXED_MODE_SIZE, we can only use TImode in\n+   64-bit mode.  */\n+#define MOVE_MAX_PIECES \\\n+  ((TARGET_64BIT \\\n+    && TARGET_SSE2 \\\n+    && TARGET_SSE_UNALIGNED_LOAD_OPTIMAL \\\n+    && TARGET_SSE_UNALIGNED_STORE_OPTIMAL) \\\n+   ? GET_MODE_SIZE (TImode) : UNITS_PER_WORD)\n \n /* If a memory-to-memory move would take MOVE_RATIO or more simple\n    move-instruction pairs, we will do a movmem or libcall instead."}, {"sha": "c2482f5dce21eadbf5dbebac1c6059f7139667da", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=df7ec09f1209a33b35af3b798e6ff6ead5de8570", "patch": "@@ -1,3 +1,12 @@\n+2015-08-11  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\t* gcc.target/i386/pieces-memcpy-1.c: New test.\n+\t* gcc.target/i386/pieces-memcpy-2.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-3.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-4.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-5.c: Likewise.\n+\t* gcc.target/i386/pieces-memcpy-6.c: Likewise.\n+\n 2016-08-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/72816"}, {"sha": "22202c26f8cf2149e9b71db6e454ef854f8ecdb6", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-1.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-1.c?ref=df7ec09f1209a33b35af3b798e6ff6ead5de8570", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx -msse2 -mtune=generic\" } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 64);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 4 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 4 } } */"}, {"sha": "bc4f05b86c50527013be0a855d1fdcad9b8cac9a", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-2.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-2.c?ref=df7ec09f1209a33b35af3b798e6ff6ead5de8570", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx -msse2 -mtune=generic\" } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 33);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 2 } } */"}, {"sha": "84d6676fca02278a5d0d74763250d5f48b6dd94f", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-3.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-3.c?ref=df7ec09f1209a33b35af3b798e6ff6ead5de8570", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx -msse2 -mtune=generic\" } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 17);\n+}\n+\n+/* { dg-final { scan-assembler-times \"movdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"movups\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */"}, {"sha": "64e8921abe26bc6faef60f8f580dc13fa9d8e0b0", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-4.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-4.c?ref=df7ec09f1209a33b35af3b798e6ff6ead5de8570", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx2 -mavx -mtune=generic\" } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 18);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovups\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */"}, {"sha": "3c464c32f8eed6de0ab15f2fae0f6f5bb87dcf75", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-5.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-5.c?ref=df7ec09f1209a33b35af3b798e6ff6ead5de8570", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mavx512f -mtune=generic\" } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 19);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */\n+/* { dg-final { scan-assembler-times \"vmovups\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 1 } } */"}, {"sha": "cdb00e05bc15d6fc3c9f06318a61f5821336d534", "filename": "gcc/testsuite/gcc.target/i386/pieces-memcpy-6.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/df7ec09f1209a33b35af3b798e6ff6ead5de8570/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpieces-memcpy-6.c?ref=df7ec09f1209a33b35af3b798e6ff6ead5de8570", "patch": "@@ -0,0 +1,13 @@\n+/* { dg-do compile { target { ! ia32 } } } */\n+/* { dg-options \"-O2 -mno-avx2 -mavx -mtune=sandybridge\" } */\n+\n+extern char *dst, *src;\n+\n+void\n+foo (void)\n+{\n+  __builtin_memcpy (dst, src, 33);\n+}\n+\n+/* { dg-final { scan-assembler-times \"vmovdqu\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 2 } } */\n+/* { dg-final { scan-assembler-times \"vmovups\\[ \\\\t\\]+\\[^\\n\\]*%xmm\" 2 } } */"}]}