{"sha": "6174da1b28176c4879ec55581325b4648fc72096", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjE3NGRhMWIyODE3NmM0ODc5ZWM1NTU4MTMyNWI0NjQ4ZmM3MjA5Ng==", "commit": {"author": {"name": "Nathan Froyd", "email": "froydnj@codesourcery.com", "date": "2011-05-06T01:37:00Z"}, "committer": {"name": "Nathan Froyd", "email": "froydnj@gcc.gnu.org", "date": "2011-05-06T01:37:00Z"}, "message": "don't use build_function_type in the ObjC/C++ frontends\n\ndon't use build_function_type in the ObjC/C++ frontends\n\t* objc-runtime-shared-support.h (get_arg_type_list): Delete.\n\t(build_function_type_for_method): Declare.\n\t* objc-runtime-hooks.h (struct _objc_runtime_hooks_r): Change\n\ttype of get_arg_type_base_list field.\n\t* objc-act.h (OBJC_VOID_AT_END): Delete.\n\t* objc-act.c (get_arg_type_list): Delete.\n\t(build_function_type_for_method): New function.\n\t(objc_decl_method_attributes): Call build_function_type_for_method.\n\t(really_start_method): Likewise.\n\t* objc-gnu-runtime-abi-01.c\n\t(gnu_runtime_abi_01_get_type_arg_list_base): Change prototype and\n\tadjust function accordingly.  Update header comment.\n\t(build_objc_method_call): Call build_function_type_for_method.\n\t* objc-next-runtime-abi-01.c\n\t(next_runtime_abi_01_get_type_arg_list_base): Change prototype and\n\tadjust function accordingly.  Update header comment.\n\t(build_objc_method_call): Call build_function_type_for_method.\n\t* objc-next-runtime-abi-02.c\n\t(next_runtime_abi_02_get_type_arg_list_base): Change prototype and\n\tadjust function accordingly.  Update header comment.\n\t(objc_copy_to_temp_side_effect_params): Take fntype instead of a\n\ttypelist.  Use function_args_iterator for traversing fntype.\n\t(build_v2_build_objc_method_call): Adjust call to it.\n\tCall build_function_type_for_method\n\nFrom-SVN: r173465", "tree": {"sha": "06eefaee175f6f613c49a5e5b8325691f5b90bdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/06eefaee175f6f613c49a5e5b8325691f5b90bdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6174da1b28176c4879ec55581325b4648fc72096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6174da1b28176c4879ec55581325b4648fc72096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6174da1b28176c4879ec55581325b4648fc72096", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6174da1b28176c4879ec55581325b4648fc72096/comments", "author": null, "committer": null, "parents": [{"sha": "9eb21cfca6bdbc70fe9deab875a93a8217a20434", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9eb21cfca6bdbc70fe9deab875a93a8217a20434", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9eb21cfca6bdbc70fe9deab875a93a8217a20434"}], "stats": {"total": 253, "additions": 144, "deletions": 109}, "files": [{"sha": "04ef7f74a627fb79b39e7bc5f56237a3dd0e965c", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=6174da1b28176c4879ec55581325b4648fc72096", "patch": "@@ -1,3 +1,30 @@\n+2011-05-05  Nathan Froyd  <froydnj@codesourcery.com>\n+\n+\t* objc-runtime-shared-support.h (get_arg_type_list): Delete.\n+\t(build_function_type_for_method): Declare.\n+\t* objc-runtime-hooks.h (struct _objc_runtime_hooks_r): Change\n+\ttype of get_arg_type_base_list field.\n+\t* objc-act.h (OBJC_VOID_AT_END): Delete.\n+\t* objc-act.c (get_arg_type_list): Delete.\n+\t(build_function_type_for_method): New function.\n+\t(objc_decl_method_attributes): Call build_function_type_for_method.\n+\t(really_start_method): Likewise.\n+\t* objc-gnu-runtime-abi-01.c\n+\t(gnu_runtime_abi_01_get_type_arg_list_base): Change prototype and\n+\tadjust function accordingly.  Update header comment.\n+\t(build_objc_method_call): Call build_function_type_for_method.\n+\t* objc-next-runtime-abi-01.c\n+\t(next_runtime_abi_01_get_type_arg_list_base): Change prototype and\n+\tadjust function accordingly.  Update header comment.\n+\t(build_objc_method_call): Call build_function_type_for_method.\n+\t* objc-next-runtime-abi-02.c\n+\t(next_runtime_abi_02_get_type_arg_list_base): Change prototype and\n+\tadjust function accordingly.  Update header comment.\n+\t(objc_copy_to_temp_side_effect_params): Take fntype instead of a\n+\ttypelist.  Use function_args_iterator for traversing fntype.\n+\t(build_v2_build_objc_method_call): Adjust call to it.\n+\tCall build_function_type_for_method\n+\n 2011-05-05  Joseph Myers  <joseph@codesourcery.com>\n \n \t* objc-act.c (objc_start_method_definition): Add parameter expr."}, {"sha": "7e69b0dbf59f08d736f5c4abd4f4a092e9f1354e", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 42, "deletions": 37, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=6174da1b28176c4879ec55581325b4648fc72096", "patch": "@@ -5043,8 +5043,9 @@ objc_decl_method_attributes (tree *node, tree attributes, int flags)\n \t (by setting TREE_DEPRECATED and TREE_THIS_VOLATILE) so there\n \t is nothing to do.  */\n       tree saved_type = TREE_TYPE (*node);\n-      TREE_TYPE (*node) = build_function_type\n-\t(TREE_VALUE (saved_type), get_arg_type_list (*node, METHOD_REF, 0));\n+      TREE_TYPE (*node)\n+\t= build_function_type_for_method (TREE_VALUE (saved_type), *node,\n+\t\t\t\t\t  METHOD_REF, 0);\n       decl_attributes (node, filtered_attributes, flags);\n       METHOD_TYPE_ATTRIBUTES (*node) = TYPE_ATTRIBUTES (TREE_TYPE (*node));\n       TREE_TYPE (*node) = saved_type;\n@@ -5057,60 +5058,66 @@ objc_method_decl (enum tree_code opcode)\n   return opcode == INSTANCE_METHOD_DECL || opcode == CLASS_METHOD_DECL;\n }\n \n-/* Used by `build_objc_method_call'.  Return an argument list for\n-   method METH.  CONTEXT is either METHOD_DEF or METHOD_REF, saying\n-   whether we are trying to define a method or call one.  SUPERFLAG\n-   says this is for a send to super; this makes a difference for the\n-   NeXT calling sequence in which the lookup and the method call are\n-   done together.  If METH is null, user-defined arguments (i.e.,\n-   beyond self and _cmd) shall be represented by `...'.  */\n+/* Return a function type for METHOD with RETURN_TYPE.  CONTEXT is\n+   either METHOD_DEF or METHOD_REF, indicating whether we are defining a\n+   method or calling one.  SUPER_FLAG indicates whether this is a send\n+   to super; this makes a difference for the NeXT calling sequence in\n+   which the lookup and the method call are done together.  If METHOD is\n+   NULL, user-defined arguments (i.e., beyond self and _cmd) shall be\n+   represented as varargs.  */\n \n tree\n-get_arg_type_list (tree meth, int context, int superflag)\n+build_function_type_for_method (tree return_type, tree method,\n+\t\t\t\tint context, bool super_flag)\n {\n-  tree arglist, akey;\n+  VEC(tree,gc) *argtypes = make_tree_vector ();\n+  tree t, ftype;\n+  bool is_varargs = false;\n \n-  /* Receiver & _cmd types are runtime-dependent.  */\n-  arglist = (*runtime.get_arg_type_list_base) (meth, context, superflag);\n+  (*runtime.get_arg_type_list_base) (&argtypes, method, context, super_flag);\n \n-  /* No actual method prototype given -- assume that remaining arguments\n-     are `...'.  */\n-  if (!meth)\n-    return arglist;\n+  /* No actual method prototype given; remaining args passed as varargs.  */\n+  if (method == NULL_TREE)\n+    {\n+      is_varargs = true;\n+      goto build_ftype;\n+    }\n \n-  /* Build a list of argument types.  */\n-  for (akey = METHOD_SEL_ARGS (meth); akey; akey = DECL_CHAIN (akey))\n+  for (t = METHOD_SEL_ARGS (method); t; t = DECL_CHAIN (t))\n     {\n-      tree arg_type = TREE_VALUE (TREE_TYPE (akey));\n+      tree arg_type = TREE_VALUE (TREE_TYPE (t));\n \n-      /* Decay argument types for the underlying C function as appropriate.  */\n+      /* Decay argument types for the underlying C function as\n+         appropriate.  */\n       arg_type = objc_decay_parm_type (arg_type);\n \n-      chainon (arglist, build_tree_list (NULL_TREE, arg_type));\n+      VEC_safe_push (tree, gc, argtypes, arg_type);\n     }\n \n-  if (METHOD_ADD_ARGS (meth))\n+  if (METHOD_ADD_ARGS (method))\n     {\n-      for (akey = TREE_CHAIN (METHOD_ADD_ARGS (meth));\n-\t   akey; akey = TREE_CHAIN (akey))\n+      for (t = TREE_CHAIN (METHOD_ADD_ARGS (method));\n+\t   t; t = TREE_CHAIN (t))\n \t{\n-\t  tree arg_type = TREE_TYPE (TREE_VALUE (akey));\n+\t  tree arg_type = TREE_TYPE (TREE_VALUE (t));\n \n \t  arg_type = objc_decay_parm_type (arg_type);\n \n-\t  chainon (arglist, build_tree_list (NULL_TREE, arg_type));\n+\t  VEC_safe_push (tree, gc, argtypes, arg_type);\n \t}\n \n-      if (!METHOD_ADD_ARGS_ELLIPSIS_P (meth))\n-\tgoto lack_of_ellipsis;\n+      if (METHOD_ADD_ARGS_ELLIPSIS_P (method))\n+\tis_varargs = true;\n     }\n+\n+ build_ftype:\n+  if (is_varargs)\n+    ftype = build_varargs_function_type_vec (return_type, argtypes);\n   else\n-    {\n-     lack_of_ellipsis:\n-      chainon (arglist, OBJC_VOID_AT_END);\n-    }\n+    ftype = build_function_type_vec (return_type, argtypes);\n \n-  return arglist;\n+  release_tree_vector (argtypes);\n+  return ftype;\n }\n \n static tree\n@@ -8700,9 +8707,7 @@ really_start_method (tree method,\n   push_lang_context (lang_name_c);\n #endif\n \n-  meth_type\n-    = build_function_type (ret_type,\n-\t\t\t   get_arg_type_list (method, METHOD_DEF, 0));\n+  meth_type = build_function_type_for_method (ret_type, method, METHOD_DEF, 0);\n   objc_start_function (method_id, meth_type, NULL_TREE, parmlist);\n \n   /* Set self_decl from the first argument.  */"}, {"sha": "d31bb7dce2e0521e6bdd6f61ddd903fc52aa4021", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=6174da1b28176c4879ec55581325b4648fc72096", "patch": "@@ -665,8 +665,6 @@ typedef enum string_section\n #define OBJC_MODIFIER_TRANSIENT\t\t0x00000200\n #define OBJC_MODIFIER_NONE_SPECIFIED\t0x80000000\n \n-#define OBJC_VOID_AT_END\t\tvoid_list_node\n-\n /* Exception handling constructs.  We begin by having the parser do most\n    of the work and passing us blocks.\n    This allows us to handle different exceptions implementations.  */"}, {"sha": "d21f2e9a6b598044b89384074a2486c6023e3a2a", "filename": "gcc/objc/objc-gnu-runtime-abi-01.c", "status": "modified", "additions": 19, "deletions": 18, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-gnu-runtime-abi-01.c?ref=6174da1b28176c4879ec55581325b4648fc72096", "patch": "@@ -103,7 +103,8 @@ static tree gnu_runtime_abi_01_get_class_super_ref (location_t, struct imp_entry\n static tree gnu_runtime_abi_01_get_category_super_ref (location_t, struct imp_entry *, bool);\n \n static tree gnu_runtime_abi_01_receiver_is_class_object (tree);\n-static tree gnu_runtime_abi_01_get_arg_type_list_base (tree, int, int);\n+static void gnu_runtime_abi_01_get_arg_type_list_base (VEC(tree,gc) **, tree,\n+\t\t\t\t\t\t       int, int);\n static tree gnu_runtime_abi_01_build_objc_method_call (location_t, tree, tree,\n \t\t\t\t\t\t\ttree, tree, tree, int);\n \n@@ -577,27 +578,28 @@ gnu_runtime_abi_01_get_class_reference (tree ident)\n   return build_function_call (input_location, objc_get_class_decl, params);\n }\n \n-/* Used by get_arg_type_list.\n-   Return the types for receiver & _cmd at the start of a method argument list.\n-   context is either METHOD_DEF or METHOD_REF, saying whether we are trying\n-   to define a method or call one.  superflag says this is for a send to super.\n-   meth may be NULL, in the case that there is no prototype.  */\n+/* Used by build_function_type_for_method.  Append the types for\n+   receiver & _cmd at the start of a method argument list to ARGTYPES.\n+   CONTEXT is either METHOD_DEF or METHOD_REF, saying whether we are\n+   trying to define a method or call one.  SUPERFLAG says this is for a\n+   send to super.  METH may be NULL, in the case that there is no\n+   prototype.  */\n \n-static tree\n-gnu_runtime_abi_01_get_arg_type_list_base (tree meth, int context,\n+static void\n+gnu_runtime_abi_01_get_arg_type_list_base (VEC(tree,gc) **argtypes, tree meth,\n+\t\t\t\t\t   int context,\n \t\t\t\t\t   int superflag ATTRIBUTE_UNUSED)\n {\n-  tree arglist;\n+  tree receiver_type;\n \n-  /* Receiver type.  */\n   if (context == METHOD_DEF && TREE_CODE (meth) == INSTANCE_METHOD_DECL)\n-    arglist = build_tree_list (NULL_TREE, objc_instance_type);\n+    receiver_type = objc_instance_type;\n   else\n-    arglist = build_tree_list (NULL_TREE, objc_object_type);\n+    receiver_type = objc_object_type;\n \n+  VEC_safe_push (tree, gc, *argtypes, receiver_type);\n   /* Selector type - will eventually change to `int'.  */\n-  chainon (arglist, build_tree_list (NULL_TREE, objc_selector_type));\n-  return arglist;\n+  VEC_safe_push (tree, gc, *argtypes, objc_selector_type);\n }\n \n /* Unused for GNU runtime.  */\n@@ -672,10 +674,9 @@ build_objc_method_call (location_t loc, int super_flag, tree method_prototype,\n     = (method_prototype\n        ? TREE_VALUE (TREE_TYPE (method_prototype))\n        : objc_object_type);\n-\n-  tree method_param_types =\n-    get_arg_type_list (method_prototype, METHOD_REF, super_flag);\n-  tree ftype = build_function_type (ret_type, method_param_types);\n+  tree ftype\n+    = build_function_type_for_method (ret_type, method_prototype,\n+\t\t\t\t      METHOD_REF, super_flag);\n   tree sender_cast;\n   tree method, t;\n "}, {"sha": "d5b795fbb0e78249e2c81585730e7b2d77e070cb", "filename": "gcc/objc/objc-next-runtime-abi-01.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-01.c?ref=6174da1b28176c4879ec55581325b4648fc72096", "patch": "@@ -123,7 +123,8 @@ static tree next_runtime_abi_01_get_class_super_ref (location_t, struct imp_entr\n static tree next_runtime_abi_01_get_category_super_ref (location_t, struct imp_entry *, bool);\n \n static tree next_runtime_abi_01_receiver_is_class_object (tree);\n-static tree next_runtime_abi_01_get_arg_type_list_base (tree, int, int);\n+static void next_runtime_abi_01_get_arg_type_list_base (VEC(tree,gc) **, tree,\n+\t\t\t\t\t\t\tint, int);\n static tree next_runtime_abi_01_build_objc_method_call (location_t, tree, tree,\n \t\t\t\t\t\t\ttree, tree, tree, int);\n static bool next_runtime_abi_01_setup_const_string_class_decl (void);\n@@ -721,28 +722,29 @@ next_runtime_abi_01_get_class_reference (tree ident)\n     }\n }\n \n-/* Used by get_arg_type_list.\n-   Return the types for receiver & _cmd at the start of a method argument list.\n-   context is either METHOD_DEF or METHOD_REF, saying whether we are trying\n-   to define a method or call one.  superflag says this is for a send to super.\n-   meth may be NULL, in the case that there is no prototype.  */\n+/* Used by build_function_type_for_method.  Append the types for\n+   receiver & _cmd at the start of a method argument list to ARGTYPES.\n+   CONTEXT is either METHOD_DEF or METHOD_REF, saying whether we are\n+   trying to define a method or call one.  SUPERFLAG says this is for a\n+   send to super.  METH may be NULL, in the case that there is no\n+   prototype.  */\n \n-static tree\n-next_runtime_abi_01_get_arg_type_list_base (tree meth, int context, int superflag)\n+static void\n+next_runtime_abi_01_get_arg_type_list_base (VEC(tree,gc) **argtypes, tree meth,\n+\t\t\t\t\t    int context, int superflag)\n {\n-  tree arglist;\n+  tree receiver_type;\n \n-  /* Receiver type.  */\n   if (superflag)\n-    arglist = build_tree_list (NULL_TREE, objc_super_type);\n+    receiver_type = objc_super_type;\n   else if (context == METHOD_DEF && TREE_CODE (meth) == INSTANCE_METHOD_DECL)\n-    arglist = build_tree_list (NULL_TREE, objc_instance_type);\n+    receiver_type = objc_instance_type;\n   else\n-    arglist = build_tree_list (NULL_TREE, objc_object_type);\n+    receiver_type = objc_object_type;\n \n+  VEC_safe_push (tree, gc, *argtypes, receiver_type);\n   /* Selector type - will eventually change to `int'.  */\n-  chainon (arglist, build_tree_list (NULL_TREE, objc_selector_type));\n-  return arglist;\n+  VEC_safe_push (tree, gc, *argtypes, objc_selector_type);\n }\n \n static tree\n@@ -828,10 +830,8 @@ build_objc_method_call (location_t loc, int super_flag, tree method_prototype,\n     = (method_prototype\n        ? TREE_VALUE (TREE_TYPE (method_prototype))\n        : objc_object_type);\n-\n-  tree method_param_types =\n-    get_arg_type_list (method_prototype, METHOD_REF, super_flag);\n-  tree ftype = build_function_type (ret_type, method_param_types);\n+  tree ftype = build_function_type_for_method (ret_type, method_prototype,\n+\t\t\t\t\t       METHOD_REF, super_flag);\n \n   if (method_prototype && METHOD_TYPE_ATTRIBUTES (method_prototype))\n     ftype = build_type_attribute_variant (ftype,"}, {"sha": "3d889b0a1166b310139ba3d28e0095e712af0a2d", "filename": "gcc/objc/objc-next-runtime-abi-02.c", "status": "modified", "additions": 34, "deletions": 31, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-next-runtime-abi-02.c?ref=6174da1b28176c4879ec55581325b4648fc72096", "patch": "@@ -213,7 +213,8 @@ static tree next_runtime_abi_02_get_class_super_ref (location_t, struct imp_entr\n static tree next_runtime_abi_02_get_category_super_ref (location_t, struct imp_entry *, bool);\n \n static tree next_runtime_abi_02_receiver_is_class_object (tree);\n-static tree next_runtime_abi_02_get_arg_type_list_base (tree, int, int);\n+static void next_runtime_abi_02_get_arg_type_list_base (VEC(tree,gc) **, tree,\n+\t\t\t\t\t\t\tint, int);\n static tree next_runtime_abi_02_build_objc_method_call (location_t, tree, tree,\n \t\t\t\t\t\t\ttree, tree, tree, int);\n static bool next_runtime_abi_02_setup_const_string_class_decl (void);\n@@ -1098,31 +1099,32 @@ next_runtime_abi_02_get_class_reference (tree ident)\n     }\n }\n \n-/* Used by get_arg_type_list.\n-   Return the types for receiver & _cmd at the start of a method\n-   argument list.  context is either METHOD_DEF or METHOD_REF, saying\n-   whether we are trying to define a method or call one.  superflag\n-   says this is for a send to super.  meth may be NULL, in the case\n-   that there is no prototype.  */\n+/* Used by build_function_type_for_method.  Append the types for\n+   receiver & _cmd at the start of a method argument list to ARGTYPES.\n+   CONTEXT is either METHOD_DEF or METHOD_REF, saying whether we are\n+   trying to define a method or call one.  SUPERFLAG says this is for a\n+   send to super.  METH may be NULL, in the case that there is no\n+   prototype.  */\n \n-static tree\n-next_runtime_abi_02_get_arg_type_list_base (tree meth, int context, int superflag)\n+static void\n+next_runtime_abi_02_get_arg_type_list_base (VEC(tree,gc) **argtypes, tree meth,\n+\t\t\t\t\t    int context, int superflag)\n {\n-  tree arglist;\n+  tree receiver_type;\n \n-  /* Receiver type.  */\n   if (superflag)\n-    arglist = build_tree_list (NULL_TREE, objc_super_type);\n+    receiver_type = objc_super_type;\n   else if (context == METHOD_DEF && TREE_CODE (meth) == INSTANCE_METHOD_DECL)\n-    arglist = build_tree_list (NULL_TREE, objc_instance_type);\n+    receiver_type = objc_instance_type;\n   else\n-    arglist = build_tree_list (NULL_TREE, objc_object_type);\n+    receiver_type = objc_object_type;\n \n+  VEC_safe_push (tree, gc, *argtypes, receiver_type);\n   /* Selector type - will eventually change to `int'.  */\n-  chainon (arglist, build_tree_list (NULL_TREE,\n-\t\t\t\t     (superflag ? objc_v2_super_selector_type\n-\t\t\t\t\t\t: objc_v2_selector_type)));\n-  return arglist;\n+  VEC_safe_push (tree, gc, *argtypes,\n+\t\t (superflag\n+\t\t  ? objc_v2_super_selector_type\n+\t\t  : objc_v2_selector_type));\n }\n \n /* TODO: Merge this with the message refs.  */\n@@ -1539,23 +1541,26 @@ next_runtime_abi_02_receiver_is_class_object (tree receiver)\n   return NULL_TREE;\n }\n \n-/* Assign all arguments in VALUES which have side-effect to a\n-   temporary and replaced that argument in VALUES list with the\n-   temporary. TYPELIST is the list of argument types. */\n+/* Assign all arguments in VALUES which have side-effect to a temporary\n+   and replaced that argument in VALUES list with the temporary. The\n+   arguments will be passed to a function with FNTYPE.  */\n \n static tree\n-objc_copy_to_temp_side_effect_params (tree typelist, tree values)\n+objc_copy_to_temp_side_effect_params (tree fntype, tree values)\n {\n-  tree valtail, typetail;\n+  tree valtail;\n+  function_args_iterator iter;\n+\n   /* Skip over receiver and the &_msf_ref types.  */\n-  gcc_assert (TREE_CHAIN (typelist));\n-  typetail = TREE_CHAIN (TREE_CHAIN (typelist));\n+  function_args_iter_init (&iter, fntype);\n+  function_args_iter_next (&iter);\n+  function_args_iter_next (&iter);\n \n   for (valtail = values; valtail;\n-       valtail = TREE_CHAIN (valtail), typetail = TREE_CHAIN (typetail))\n+       valtail = TREE_CHAIN (valtail), function_args_iter_next (&iter))\n     {\n       tree value = TREE_VALUE (valtail);\n-      tree type = typetail ? TREE_VALUE (typetail) : NULL_TREE;\n+      tree type = function_args_iter_cond (&iter);\n       if (type == NULL_TREE)\n \tbreak;\n       if (!TREE_SIDE_EFFECTS (value))\n@@ -1583,10 +1588,8 @@ build_v2_build_objc_method_call (int super_flag, tree method_prototype,\n     = (method_prototype\n        ? TREE_VALUE (TREE_TYPE (method_prototype))\n        : objc_object_type);\n-  tree method_param_types = get_arg_type_list (method_prototype,\n+  tree ftype = build_function_type_for_method (ret_type, method_prototype,\n \t\t\t\t\t       METHOD_REF, super_flag);\n-\n-  tree ftype = build_function_type (ret_type, method_param_types);\n   tree sender_cast;\n \n   if (method_prototype && METHOD_TYPE_ATTRIBUTES (method_prototype))\n@@ -1596,7 +1599,7 @@ build_v2_build_objc_method_call (int super_flag, tree method_prototype,\n   sender_cast = build_pointer_type (ftype);\n \n   if (check_for_nil)\n-    method_params = objc_copy_to_temp_side_effect_params (method_param_types,\n+    method_params = objc_copy_to_temp_side_effect_params (ftype,\n \t\t\t\t\t\t\t  method_params);\n \n   /* Get &message_ref_t.messenger.  */"}, {"sha": "9145681bfa9dcbba853562db2d87c74759ad7ce9", "filename": "gcc/objc/objc-runtime-hooks.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-runtime-hooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-runtime-hooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-runtime-hooks.h?ref=6174da1b28176c4879ec55581325b4648fc72096", "patch": "@@ -75,7 +75,7 @@ typedef struct _objc_runtime_hooks_r\n   /* Receiver is class Object, check runtime-specific.  */\n   tree (*receiver_is_class_object) (tree);\n   /* Get the start of a method argument type list (receiver, _cmd).  */\n-  tree (*get_arg_type_list_base) (tree, int, int);\n+  void (*get_arg_type_list_base) (VEC(tree,gc) **, tree, int, int);\n   /* Build method call.  */\n   tree (*build_objc_method_call) (location_t, tree, tree, tree, tree, tree, int);\n "}, {"sha": "bb0e5711df0924428c7effe5c8cd138ee152f1a5", "filename": "gcc/objc/objc-runtime-shared-support.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-runtime-shared-support.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6174da1b28176c4879ec55581325b4648fc72096/gcc%2Fobjc%2Fobjc-runtime-shared-support.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-runtime-shared-support.h?ref=6174da1b28176c4879ec55581325b4648fc72096", "patch": "@@ -49,7 +49,8 @@ extern void objc_start_function (tree, tree, tree, struct c_arg_info *);\n extern struct c_arg_info *objc_get_parm_info (int, tree);\n #endif\n extern void objc_push_parm (tree);\n-extern tree get_arg_type_list (tree, int, int);\n+\n+extern tree build_function_type_for_method (tree, tree, int, bool);\n \n /* Stuff that should be migrated to shared support (or some v1-only file).  */\n extern void build_super_template (void);"}]}