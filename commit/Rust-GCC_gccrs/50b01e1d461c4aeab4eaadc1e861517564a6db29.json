{"sha": "50b01e1d461c4aeab4eaadc1e861517564a6db29", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTBiMDFlMWQ0NjFjNGFlYWI0ZWFhZGMxZTg2MTUxNzU2NGE2ZGIyOQ==", "commit": {"author": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2016-10-05T21:14:14Z"}, "committer": {"name": "Steven G. Kargl", "email": "kargl@gcc.gnu.org", "date": "2016-10-05T21:14:14Z"}, "message": "re PR fortran/58991 (ICE with associate and character string constant)\n\n2016-10-05  Steven G. Kargl  <kargls@gcc.gnu.org>\n\n\tPR fortran/58991\n\tPR fortran/58992\n\t* resolve.c (resolve_assoc_var):  Fix CHARACTER type-spec for a\n\tselector in ASSOCIATE.\n\t(resolve_fl_variable): Skip checks for an ASSOCIATE variable.\n\n\n2016-10-05  Steven G. Kargl  <kargls@gcc.gnu.org>\n\n\tPR fortran/58991\n\tPR fortran/58992\n\t* gfortran.dg/associate_22.f90: New test.\n\nFrom-SVN: r240812", "tree": {"sha": "60dcb3118b8b4ff2e6daeaa2a2f3a83a264dd270", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/60dcb3118b8b4ff2e6daeaa2a2f3a83a264dd270"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/50b01e1d461c4aeab4eaadc1e861517564a6db29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b01e1d461c4aeab4eaadc1e861517564a6db29", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50b01e1d461c4aeab4eaadc1e861517564a6db29", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50b01e1d461c4aeab4eaadc1e861517564a6db29/comments", "author": null, "committer": null, "parents": [{"sha": "908b82964e0985f2f97e5848ba10cda7e77ce8cb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/908b82964e0985f2f97e5848ba10cda7e77ce8cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/908b82964e0985f2f97e5848ba10cda7e77ce8cb"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "2bab7b3110b8e0fbebecc43b4a7ff9eff663edc9", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b01e1d461c4aeab4eaadc1e861517564a6db29/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b01e1d461c4aeab4eaadc1e861517564a6db29/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=50b01e1d461c4aeab4eaadc1e861517564a6db29", "patch": "@@ -1,3 +1,11 @@\n+2016-10-05  Steven G. Kargl  <kargls@gcc.gnu.org>\n+\n+\tPR fortran/58991\n+\tPR fortran/58992\n+\t* resolve.c (resolve_assoc_var):  Fix CHARACTER type-spec for a\n+\tselector in ASSOCIATE.\n+\t(resolve_fl_variable): Skip checks for an ASSOCIATE variable.\n+\n 2016-10-05  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* interface.c (gfc_compare_types): Don't compare BT_UNION components"}, {"sha": "4645b57c78d01672c2fa1a40e7577e5af1e9bd72", "filename": "gcc/fortran/resolve.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b01e1d461c4aeab4eaadc1e861517564a6db29/gcc%2Ffortran%2Fresolve.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b01e1d461c4aeab4eaadc1e861517564a6db29/gcc%2Ffortran%2Fresolve.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.c?ref=50b01e1d461c4aeab4eaadc1e861517564a6db29", "patch": "@@ -8304,6 +8304,18 @@ resolve_assoc_var (gfc_symbol* sym, bool resolve_target)\n   /* Mark this as an associate variable.  */\n   sym->attr.associate_var = 1;\n \n+  /* Fix up the type-spec for CHARACTER types.  */\n+  if (sym->ts.type == BT_CHARACTER && !sym->attr.select_type_temporary)\n+    {\n+      if (!sym->ts.u.cl)\n+\tsym->ts.u.cl = target->ts.u.cl;\n+\n+      if (!sym->ts.u.cl->length)\n+\tsym->ts.u.cl->length\n+\t  = gfc_get_int_expr (gfc_default_integer_kind,\n+\t\t\t      NULL, target->value.character.length);\n+    }\n+\n   /* If the target is a good class object, so is the associate variable.  */\n   if (sym->ts.type == BT_CLASS && gfc_expr_attr (target).class_ok)\n     sym->attr.class_ok = 1;\n@@ -11577,7 +11589,7 @@ resolve_fl_variable (gfc_symbol *sym, int mp_flag)\n   if (!deferred_requirements (sym))\n     return false;\n \n-  if (sym->ts.type == BT_CHARACTER)\n+  if (sym->ts.type == BT_CHARACTER && !sym->attr.associate_var)\n     {\n       /* Make sure that character string variables with assumed length are\n \t dummy arguments.  */"}, {"sha": "f2e83f838f44e4e6fe0d6aceeb694808982a85c3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b01e1d461c4aeab4eaadc1e861517564a6db29/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b01e1d461c4aeab4eaadc1e861517564a6db29/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=50b01e1d461c4aeab4eaadc1e861517564a6db29", "patch": "@@ -1,3 +1,9 @@\n+2016-10-05  Steven G. Kargl  <kargls@gcc.gnu.org>\n+\n+\tPR fortran/58991\n+\tPR fortran/58992\n+\t* gfortran.dg/associate_22.f90: New test.\n+\n 2016-10-05  Fritz Reese  <fritzoreese@gmail.com>\n \n \t* gfortran.dg/dec_union_9.f90: New testcase."}, {"sha": "1558992004d1773eee4b6fdc083f66c015130723", "filename": "gcc/testsuite/gfortran.dg/associate_22.f90", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/50b01e1d461c4aeab4eaadc1e861517564a6db29/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_22.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/50b01e1d461c4aeab4eaadc1e861517564a6db29/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_22.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fassociate_22.f90?ref=50b01e1d461c4aeab4eaadc1e861517564a6db29", "patch": "@@ -0,0 +1,37 @@\n+! { dg-do run }\n+program foo\n+\n+   implicit none\n+\n+   character(len=4) :: s\n+   character(len=10) :: a\n+\n+   ! This works.\n+   s = 'abc'\n+   associate(t => s)\n+      if (trim(t) /= 'abc') call abort\n+   end associate\n+\n+   ! This failed.\n+   associate(u => 'abc')\n+      if (trim(u) /= 'abc') call abort\n+   end associate\n+\n+   ! This failed.\n+   a = s // 'abc'\n+   associate(v => s // 'abc')\n+      if (trim(v) /= trim(a)) call abort\n+   end associate\n+\n+   ! This failed.\n+   a = trim(s) // 'abc'\n+   associate(w => trim(s) // 'abc')\n+      if (trim(w) /= trim(a)) call abort\n+   end associate\n+\n+   ! This failed.\n+   associate(x => trim('abc'))\n+      if (trim(x) /= 'abc') call abort\n+   end associate\n+\n+end program foo"}]}