{"sha": "cabaf50ac511cdedd2710faf87c126996483c3e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2FiYWY1MGFjNTExY2RlZGQyNzEwZmFmODdjMTI2OTk2NDgzYzNlNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-11-26T18:20:18Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-11-26T18:20:18Z"}, "message": "constexpr.c (cxx_eval_constant_expression): Avoid multiple evaluation.\n\n\t* constexpr.c (cxx_eval_constant_expression) [SAVE_EXPR]: Avoid\n\tmultiple evaluation.\n\nFrom-SVN: r218093", "tree": {"sha": "c3737897fd5b3f665b18c4e29372e8d35f6ea1df", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c3737897fd5b3f665b18c4e29372e8d35f6ea1df"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cabaf50ac511cdedd2710faf87c126996483c3e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cabaf50ac511cdedd2710faf87c126996483c3e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cabaf50ac511cdedd2710faf87c126996483c3e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cabaf50ac511cdedd2710faf87c126996483c3e5/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c06dcc4734ffbc3c761595eba14b71bbce888eb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c06dcc4734ffbc3c761595eba14b71bbce888eb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c06dcc4734ffbc3c761595eba14b71bbce888eb1"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "32092c418a15e10de09fef03e9b09e5525cef2f3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabaf50ac511cdedd2710faf87c126996483c3e5/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabaf50ac511cdedd2710faf87c126996483c3e5/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cabaf50ac511cdedd2710faf87c126996483c3e5", "patch": "@@ -1,5 +1,8 @@\n 2014-11-26  Jason Merrill  <jason@redhat.com>\n \n+\t* constexpr.c (cxx_eval_constant_expression) [SAVE_EXPR]: Avoid\n+\tmultiple evaluation.\n+\n \t* constexpr.c (cxx_eval_call_expression): Don't talk about\n \tflowing off the end if we're already non-constant.\n "}, {"sha": "ef9ef70d6e0b303e0196a20ebbb4c3eda311f3eb", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cabaf50ac511cdedd2710faf87c126996483c3e5/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cabaf50ac511cdedd2710faf87c126996483c3e5/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=cabaf50ac511cdedd2710faf87c126996483c3e5", "patch": "@@ -2974,11 +2974,22 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n       *jump_target = t;\n       break;\n \n+    case SAVE_EXPR:\n+      /* Avoid evaluating a SAVE_EXPR more than once.  */\n+      if (tree *p = ctx->values->get (t))\n+\tr = *p;\n+      else\n+\t{\n+\t  r = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 0), addr,\n+\t\t\t\t\t    non_constant_p, overflow_p);\n+\t  ctx->values->put (t, r);\n+\t}\n+      break;\n+\n     case NON_LVALUE_EXPR:\n     case TRY_CATCH_EXPR:\n     case CLEANUP_POINT_EXPR:\n     case MUST_NOT_THROW_EXPR:\n-    case SAVE_EXPR:\n     case EXPR_STMT:\n     case EH_SPEC_BLOCK:\n       r = cxx_eval_constant_expression (ctx, TREE_OPERAND (t, 0),"}]}