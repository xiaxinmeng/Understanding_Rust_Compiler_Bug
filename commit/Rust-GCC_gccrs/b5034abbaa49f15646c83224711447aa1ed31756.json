{"sha": "b5034abbaa49f15646c83224711447aa1ed31756", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjUwMzRhYmJhYTQ5ZjE1NjQ2YzgzMjI0NzExNDQ3YWExZWQzMTc1Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-08-13T18:54:16Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-08-13T18:55:09Z"}, "message": "i386: Improve CET builtin expanders.\n\nSeveral fixes to CET builtin expanders:\n\na) Split out explicit zeroing of RDSSP output operand.\nb) Use DImode memory operand for RSTORSSP and CLRSSBSY instructions.\nc) Use parameterized pattern names to simplify calling of named patterns.\n\n2020-08-13  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n\ngcc/ChangeLog:\n\n\t* config/i386/i386-builtin.def (CET_NORMAL): Merge to CET BDESC array.\n\t(__builtin_ia32_rddspd, __builtin_ia32_rddspq, __builtin_ia32_incsspd)\n\t(__builtin_ia32_incsspq, __builtin_ia32_wrssd, __builtin_ia32_wrssq)\n\t(__builtin_ia32_wrussd, __builtin_ia32_wrussq): Use CODE_FOR_nothing.\n\t* config/i386/i386-builtins.c: Remove handling of CET_NORMAL builtins.\n\t* config/i386/i386.md (@rdssp<mode>): Implement as parametrized\n\tname pattern.  Use SWI48 mode iterator.  Introduce input operand\n\tand remove explicit XOR zeroing from insn template.\n\t(@incssp<mode>): Implement as parametrized name pattern.\n\tUse SWI48 mode iterator.\n\t(@wrss<mode>): Ditto.\n\t(@wruss<mode>): Ditto.\n\t(rstorssp): Remove expander.  Rename insn pattern from *rstorssp<mode>.\n\tUse DImode memory operand.\n\t(clrssbsy): Remove expander.  Rename insn pattern from *clrssbsy<mode>.\n\tUse DImode memory operand.\n\t(save_stack_nonlocal): Update for parametrized name patterns.\n\tUse cleared register as an argument to gen_rddsp.\n\t(restore_stack_nonlocal): Update for parametrized name patterns.\n\t* config/i386/i386-expand.c (ix86_expand_builtin):\n\t[case IX86_BUILTIN_RDSSPD, case IX86_BUILTIN_RDSSPQ]: Expand here.\n\t[case IX86_BUILTIN_INCSSPD, case IX86_BUILTIN_INCSSPQ]: Ditto.\n\t[case IX86_BUILTIN_RSTORSSP, case IX86_BUILTIN_CLRSSBSY]:\n\tGenerate DImode memory operand.\n\t[case IX86_BUILTIN_WRSSD, case IX86_BUILTIN_WRSSQ]\n\t[case IX86_BUILTIN_WRUSSD, case IX86_BUILTIN_WRUSSD]:\n\tUpdate for parameterized name patterns.", "tree": {"sha": "6128575a1e4333f90386e7d217b7ff7abe088d75", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6128575a1e4333f90386e7d217b7ff7abe088d75"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b5034abbaa49f15646c83224711447aa1ed31756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5034abbaa49f15646c83224711447aa1ed31756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b5034abbaa49f15646c83224711447aa1ed31756", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b5034abbaa49f15646c83224711447aa1ed31756/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ad7e730c142ef6cd0ddc1491a89a7f330caa887", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0ad7e730c142ef6cd0ddc1491a89a7f330caa887", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0ad7e730c142ef6cd0ddc1491a89a7f330caa887"}], "stats": {"total": 185, "additions": 78, "deletions": 107}, "files": [{"sha": "25b80868bd35313fc750c9e2a7119a26582d16f6", "filename": "gcc/config/i386/i386-builtin.def", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5034abbaa49f15646c83224711447aa1ed31756/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5034abbaa49f15646c83224711447aa1ed31756/gcc%2Fconfig%2Fi386%2Fi386-builtin.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtin.def?ref=b5034abbaa49f15646c83224711447aa1ed31756", "patch": "@@ -3126,21 +3126,17 @@ BDESC_END (MULTI_ARG, CET)\n \n /* CET.  */\n BDESC_FIRST (cet, CET,\n-       OPTION_MASK_ISA_SHSTK, 0, CODE_FOR_incsspsi, \"__builtin_ia32_incsspd\", IX86_BUILTIN_INCSSPD, UNKNOWN, (int) VOID_FTYPE_UNSIGNED)\n-BDESC (OPTION_MASK_ISA_SHSTK | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_incsspdi, \"__builtin_ia32_incsspq\", IX86_BUILTIN_INCSSPQ, UNKNOWN, (int) VOID_FTYPE_UINT64)\n+       OPTION_MASK_ISA_SHSTK, 0, CODE_FOR_nothing, \"__builtin_ia32_rdsspd\", IX86_BUILTIN_RDSSPD, UNKNOWN, (int) UINT_FTYPE_VOID)\n+BDESC (OPTION_MASK_ISA_SHSTK | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_nothing, \"__builtin_ia32_rdsspq\", IX86_BUILTIN_RDSSPQ, UNKNOWN, (int) UINT64_FTYPE_VOID)\n+BDESC (OPTION_MASK_ISA_SHSTK, 0, CODE_FOR_nothing, \"__builtin_ia32_incsspd\", IX86_BUILTIN_INCSSPD, UNKNOWN, (int) VOID_FTYPE_UNSIGNED)\n+BDESC (OPTION_MASK_ISA_SHSTK | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_nothing, \"__builtin_ia32_incsspq\", IX86_BUILTIN_INCSSPQ, UNKNOWN, (int) VOID_FTYPE_UINT64)\n BDESC (OPTION_MASK_ISA_SHSTK, 0, CODE_FOR_saveprevssp, \"__builtin_ia32_saveprevssp\", IX86_BUILTIN_SAVEPREVSSP, UNKNOWN, (int) VOID_FTYPE_VOID)\n BDESC (OPTION_MASK_ISA_SHSTK, 0, CODE_FOR_rstorssp, \"__builtin_ia32_rstorssp\", IX86_BUILTIN_RSTORSSP, UNKNOWN, (int) VOID_FTYPE_PVOID)\n-BDESC (OPTION_MASK_ISA_SHSTK, 0, CODE_FOR_wrsssi, \"__builtin_ia32_wrssd\", IX86_BUILTIN_WRSSD, UNKNOWN, (int) VOID_FTYPE_UNSIGNED_PVOID)\n-BDESC (OPTION_MASK_ISA_SHSTK | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_wrssdi, \"__builtin_ia32_wrssq\", IX86_BUILTIN_WRSSQ, UNKNOWN, (int) VOID_FTYPE_UINT64_PVOID)\n-BDESC (OPTION_MASK_ISA_SHSTK, 0, CODE_FOR_wrusssi, \"__builtin_ia32_wrussd\", IX86_BUILTIN_WRUSSD, UNKNOWN, (int) VOID_FTYPE_UNSIGNED_PVOID)\n-BDESC (OPTION_MASK_ISA_SHSTK | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_wrussdi, \"__builtin_ia32_wrussq\", IX86_BUILTIN_WRUSSQ, UNKNOWN, (int) VOID_FTYPE_UINT64_PVOID)\n+BDESC (OPTION_MASK_ISA_SHSTK, 0, CODE_FOR_nothing, \"__builtin_ia32_wrssd\", IX86_BUILTIN_WRSSD, UNKNOWN, (int) VOID_FTYPE_UNSIGNED_PVOID)\n+BDESC (OPTION_MASK_ISA_SHSTK | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_nothing, \"__builtin_ia32_wrssq\", IX86_BUILTIN_WRSSQ, UNKNOWN, (int) VOID_FTYPE_UINT64_PVOID)\n+BDESC (OPTION_MASK_ISA_SHSTK, 0, CODE_FOR_nothing, \"__builtin_ia32_wrussd\", IX86_BUILTIN_WRUSSD, UNKNOWN, (int) VOID_FTYPE_UNSIGNED_PVOID)\n+BDESC (OPTION_MASK_ISA_SHSTK | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_nothing, \"__builtin_ia32_wrussq\", IX86_BUILTIN_WRUSSQ, UNKNOWN, (int) VOID_FTYPE_UINT64_PVOID)\n BDESC (OPTION_MASK_ISA_SHSTK, 0, CODE_FOR_setssbsy, \"__builtin_ia32_setssbsy\", IX86_BUILTIN_SETSSBSY, UNKNOWN, (int) VOID_FTYPE_VOID)\n BDESC (OPTION_MASK_ISA_SHSTK, 0, CODE_FOR_clrssbsy, \"__builtin_ia32_clrssbsy\", IX86_BUILTIN_CLRSSBSY, UNKNOWN, (int) VOID_FTYPE_PVOID)\n \n-BDESC_END (CET, CET_NORMAL)\n-\n-BDESC_FIRST (cet_rdssp, CET_NORMAL,\n-       OPTION_MASK_ISA_SHSTK, 0, CODE_FOR_rdsspsi, \"__builtin_ia32_rdsspd\", IX86_BUILTIN_RDSSPD, UNKNOWN, (int) UINT_FTYPE_VOID)\n-BDESC (OPTION_MASK_ISA_SHSTK | OPTION_MASK_ISA_64BIT, 0, CODE_FOR_rdsspdi, \"__builtin_ia32_rdsspq\", IX86_BUILTIN_RDSSPQ, UNKNOWN, (int) UINT64_FTYPE_VOID)\n-\n-BDESC_END (CET_NORMAL, MAX)\n+BDESC_END (CET, MAX)"}, {"sha": "834438a6666aaa9a6f0ea169caa1ce65ea1ba4d5", "filename": "gcc/config/i386/i386-builtins.c", "status": "modified", "additions": 1, "deletions": 18, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5034abbaa49f15646c83224711447aa1ed31756/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5034abbaa49f15646c83224711447aa1ed31756/gcc%2Fconfig%2Fi386%2Fi386-builtins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-builtins.c?ref=b5034abbaa49f15646c83224711447aa1ed31756", "patch": "@@ -116,10 +116,8 @@ BDESC_VERIFYS (IX86_BUILTIN__BDESC_MULTI_ARG_FIRST,\n \t       IX86_BUILTIN__BDESC_ROUND_ARGS_LAST, 1);\n BDESC_VERIFYS (IX86_BUILTIN__BDESC_CET_FIRST,\n \t       IX86_BUILTIN__BDESC_MULTI_ARG_LAST, 1);\n-BDESC_VERIFYS (IX86_BUILTIN__BDESC_CET_NORMAL_FIRST,\n-\t       IX86_BUILTIN__BDESC_CET_LAST, 1);\n BDESC_VERIFYS (IX86_BUILTIN_MAX,\n-\t       IX86_BUILTIN__BDESC_CET_NORMAL_LAST, 1);\n+\t       IX86_BUILTIN__BDESC_CET_LAST, 1);\n \n \n /* Table for the ix86 builtin non-function types.  */\n@@ -1227,21 +1225,6 @@ ix86_init_mmx_sse_builtins (void)\n   BDESC_VERIFYS (IX86_BUILTIN__BDESC_CET_LAST,\n \t\t IX86_BUILTIN__BDESC_CET_FIRST,\n \t\t ARRAY_SIZE (bdesc_cet) - 1);\n-\n-  for (i = 0, d = bdesc_cet_rdssp;\n-       i < ARRAY_SIZE (bdesc_cet_rdssp);\n-       i++, d++)\n-    {\n-      BDESC_VERIFY (d->code, IX86_BUILTIN__BDESC_CET_NORMAL_FIRST, i);\n-      if (d->name == 0)\n-\tcontinue;\n-\n-      ftype = (enum ix86_builtin_func_type) d->flag;\n-      def_builtin (d->mask, d->mask2, d->name, ftype, d->code);\n-    }\n-  BDESC_VERIFYS (IX86_BUILTIN__BDESC_CET_NORMAL_LAST,\n-\t\t IX86_BUILTIN__BDESC_CET_NORMAL_FIRST,\n-\t\t ARRAY_SIZE (bdesc_cet_rdssp) - 1);\n }\n \n #undef BDESC_VERIFY"}, {"sha": "aec894bbdb40d1da1ffdfe1b00ce7a1e421daeb9", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 45, "deletions": 35, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5034abbaa49f15646c83224711447aa1ed31756/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5034abbaa49f15646c83224711447aa1ed31756/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=b5034abbaa49f15646c83224711447aa1ed31756", "patch": "@@ -12736,55 +12736,73 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       emit_insn (gen_xabort (op0));\n       return 0;\n \n+    case IX86_BUILTIN_RDSSPD:\n+    case IX86_BUILTIN_RDSSPQ:\n+      mode = (fcode == IX86_BUILTIN_RDSSPD ? SImode : DImode);\n+\n+      if (target == 0\n+\t  || !register_operand (target, mode))\n+\ttarget = gen_reg_rtx (mode);\n+\n+      op0 = force_reg (mode, const0_rtx);\n+\n+      emit_insn (gen_rdssp (mode, target, op0));\n+      return target;\n+\n+    case IX86_BUILTIN_INCSSPD:\n+    case IX86_BUILTIN_INCSSPQ:\n+      mode = (fcode == IX86_BUILTIN_INCSSPD ? SImode : DImode);\n+\n+      arg0 = CALL_EXPR_ARG (exp, 0);\n+      op0 = expand_normal (arg0);\n+\n+      op0 = force_reg (mode, op0);\n+\n+      emit_insn (gen_incssp (mode, op0));\n+      return 0;\n+\n     case IX86_BUILTIN_RSTORSSP:\n     case IX86_BUILTIN_CLRSSBSY:\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       op0 = expand_normal (arg0);\n       icode = (fcode == IX86_BUILTIN_RSTORSSP\n-\t  ? CODE_FOR_rstorssp\n-\t  : CODE_FOR_clrssbsy);\n+\t       ? CODE_FOR_rstorssp\n+\t       : CODE_FOR_clrssbsy);\n+\n       if (!address_operand (op0, VOIDmode))\n \t{\n-\t  op1 = convert_memory_address (Pmode, op0);\n-\t  op0 = copy_addr_to_reg (op1);\n+\t  op0 = convert_memory_address (Pmode, op0);\n+\t  op0 = copy_addr_to_reg (op0);\n \t}\n-      emit_insn (GEN_FCN (icode) (gen_rtx_MEM (Pmode, op0)));\n+      emit_insn (GEN_FCN (icode) (gen_rtx_MEM (DImode, op0)));\n       return 0;\n \n     case IX86_BUILTIN_WRSSD:\n     case IX86_BUILTIN_WRSSQ:\n     case IX86_BUILTIN_WRUSSD:\n     case IX86_BUILTIN_WRUSSQ:\n+      mode = ((fcode == IX86_BUILTIN_WRSSD\n+\t       || fcode == IX86_BUILTIN_WRUSSD)\n+\t      ? SImode : DImode);\n+\n       arg0 = CALL_EXPR_ARG (exp, 0);\n       op0 = expand_normal (arg0);\n       arg1 = CALL_EXPR_ARG (exp, 1);\n       op1 = expand_normal (arg1);\n-      switch (fcode)\n-\t{\n-\tcase IX86_BUILTIN_WRSSD:\n-\t  icode = CODE_FOR_wrsssi;\n-\t  mode = SImode;\n-\t  break;\n-\tcase IX86_BUILTIN_WRSSQ:\n-\t  icode = CODE_FOR_wrssdi;\n-\t  mode = DImode;\n-\t  break;\n-\tcase IX86_BUILTIN_WRUSSD:\n-\t  icode = CODE_FOR_wrusssi;\n-\t  mode = SImode;\n-\t  break;\n-\tcase IX86_BUILTIN_WRUSSQ:\n-\t  icode = CODE_FOR_wrussdi;\n-\t  mode = DImode;\n-\t  break;\n-\t}\n+\n       op0 = force_reg (mode, op0);\n+\n       if (!address_operand (op1, VOIDmode))\n \t{\n-\t  op2 = convert_memory_address (Pmode, op1);\n-\t  op1 = copy_addr_to_reg (op2);\n+\t  op1 = convert_memory_address (Pmode, op1);\n+\t  op1 = copy_addr_to_reg (op1);\n \t}\n-      emit_insn (GEN_FCN (icode) (op0, gen_rtx_MEM (mode, op1)));\n+      op1 = gen_rtx_MEM (mode, op1);\n+\n+      emit_insn ((fcode == IX86_BUILTIN_WRSSD\n+\t\t  || fcode == IX86_BUILTIN_WRSSQ)\n+\t\t ? gen_wrss (mode, op0, op1)\n+\t\t : gen_wruss (mode, op0, op1));\n       return 0;\n \n     default:\n@@ -13086,14 +13104,6 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n \t\t\t\t\t       target);\n     }\n \n-  if (fcode >= IX86_BUILTIN__BDESC_CET_NORMAL_FIRST\n-      && fcode <= IX86_BUILTIN__BDESC_CET_NORMAL_LAST)\n-    {\n-      i = fcode - IX86_BUILTIN__BDESC_CET_NORMAL_FIRST;\n-      return ix86_expand_special_args_builtin (bdesc_cet_rdssp + i, exp,\n-\t\t\t\t       target);\n-    }\n-\n   gcc_unreachable ();\n }\n "}, {"sha": "3985c771d00b8f85ff4b2b64b2f9bf9e86471f53", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 23, "deletions": 41, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b5034abbaa49f15646c83224711447aa1ed31756/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b5034abbaa49f15646c83224711447aa1ed31756/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b5034abbaa49f15646c83224711447aa1ed31756", "patch": "@@ -19139,10 +19139,8 @@\n \t to the second slot.  */\n       rtx ssp_slot = adjust_address (operands[0], word_mode, 0);\n       stack_slot = adjust_address (operands[0], Pmode, UNITS_PER_WORD);\n-      rtx ssp = gen_reg_rtx (word_mode);\n-      emit_insn ((word_mode == SImode)\n-\t\t ? gen_rdsspsi (ssp)\n-\t\t : gen_rdsspdi (ssp));\n+      rtx ssp = force_reg (word_mode, const0_rtx);\n+      emit_insn (gen_rdssp (word_mode, ssp, ssp));\n       emit_move_insn (ssp_slot, ssp);\n     }\n   else\n@@ -19170,11 +19168,8 @@\n       /* Get the current shadow stack pointer.  The code below will check if\n \t SHSTK feature is enabled.  If it is not enabled the RDSSP instruction\n \t is a NOP.  */\n-      reg_ssp = gen_reg_rtx (word_mode);\n-      emit_insn (gen_rtx_SET (reg_ssp, const0_rtx));\n-      emit_insn ((word_mode == SImode)\n-\t\t ? gen_rdsspsi (reg_ssp)\n-\t\t : gen_rdsspdi (reg_ssp));\n+      reg_ssp = force_reg (word_mode, const0_rtx);\n+      emit_insn (gen_rdssp (word_mode, reg_ssp, reg_ssp));\n \n       /* Compare through substraction the saved and the current ssp to decide\n \t if ssp has to be adjusted.  */\n@@ -19227,9 +19222,7 @@\n       emit_label (loop_label);\n       LABEL_NUSES (loop_label) = 1;\n \n-      emit_insn ((word_mode == SImode)\n-\t\t ? gen_incsspsi (reg_255)\n-\t\t : gen_incsspdi (reg_255));\n+      emit_insn (gen_incssp (word_mode, reg_255));\n       tmp = gen_rtx_SET (reg_adj, gen_rtx_MINUS (ptr_mode,\n \t\t\t\t\t\t reg_adj,\n \t\t\t\t\t\t GEN_INT (255)));\n@@ -19251,9 +19244,7 @@\n \n       emit_label (inc_label);\n       LABEL_NUSES (inc_label) = 1;\n-      emit_insn ((word_mode == SImode)\n-\t\t ? gen_incsspsi (reg_ssp)\n-\t\t : gen_incsspdi (reg_ssp));\n+      emit_insn (gen_incssp (word_mode, reg_ssp));\n \n       emit_label (noadj_label);\n       LABEL_NUSES (noadj_label) = 1;\n@@ -21253,16 +21244,17 @@\n    (set_attr \"memory\" \"unknown\")])\n \n ;; CET instructions\n-(define_insn \"rdssp<mode>\"\n-  [(set (match_operand:SWI48x 0 \"register_operand\" \"=r\")\n-\t(unspec_volatile:SWI48x [(const_int 0)] UNSPECV_NOP_RDSSP))]\n+(define_insn \"@rdssp<mode>\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(unspec_volatile:SWI48 [(match_operand:SWI48 1 \"register_operand\" \"0\")]\n+\t\t\t       UNSPECV_NOP_RDSSP))]\n   \"TARGET_SHSTK || (flag_cf_protection & CF_RETURN)\"\n-  \"xor{l}\\t%k0, %k0\\n\\trdssp<mskmodesuffix>\\t%0\"\n+  \"rdssp<mskmodesuffix>\\t%0\"\n   [(set_attr \"length\" \"6\")\n    (set_attr \"type\" \"other\")])\n \n-(define_insn \"incssp<mode>\"\n-  [(unspec_volatile [(match_operand:SWI48x 0 \"register_operand\" \"r\")]\n+(define_insn \"@incssp<mode>\"\n+  [(unspec_volatile [(match_operand:SWI48 0 \"register_operand\" \"r\")]\n \t\t    UNSPECV_INCSSP)]\n   \"TARGET_SHSTK || (flag_cf_protection & CF_RETURN)\"\n   \"incssp<mskmodesuffix>\\t%0\"\n@@ -21276,31 +21268,26 @@\n   [(set_attr \"length\" \"5\")\n    (set_attr \"type\" \"other\")])\n \n-(define_expand \"rstorssp\"\n-  [(unspec_volatile [(match_operand 0 \"memory_operand\")]\n-\t\t    UNSPECV_RSTORSSP)]\n-  \"TARGET_SHSTK\")\n-\n-(define_insn \"*rstorssp<mode>\"\n-  [(unspec_volatile [(match_operand:P 0 \"memory_operand\" \"m\")]\n+(define_insn \"rstorssp\"\n+  [(unspec_volatile [(match_operand:DI 0 \"memory_operand\" \"m\")]\n \t\t    UNSPECV_RSTORSSP)]\n   \"TARGET_SHSTK\"\n   \"rstorssp\\t%0\"\n   [(set_attr \"length\" \"5\")\n    (set_attr \"type\" \"other\")])\n \n-(define_insn \"wrss<mode>\"\n-  [(unspec_volatile [(match_operand:SWI48x 0 \"register_operand\" \"r\")\n-\t\t     (match_operand:SWI48x 1 \"memory_operand\" \"m\")]\n+(define_insn \"@wrss<mode>\"\n+  [(unspec_volatile [(match_operand:SWI48 0 \"register_operand\" \"r\")\n+\t\t     (match_operand:SWI48 1 \"memory_operand\" \"m\")]\n \t\t    UNSPECV_WRSS)]\n   \"TARGET_SHSTK\"\n   \"wrss<mskmodesuffix>\\t%0, %1\"\n   [(set_attr \"length\" \"3\")\n    (set_attr \"type\" \"other\")])\n \n-(define_insn \"wruss<mode>\"\n-  [(unspec_volatile [(match_operand:SWI48x 0 \"register_operand\" \"r\")\n-\t\t     (match_operand:SWI48x 1 \"memory_operand\" \"m\")]\n+(define_insn \"@wruss<mode>\"\n+  [(unspec_volatile [(match_operand:SWI48 0 \"register_operand\" \"r\")\n+\t\t     (match_operand:SWI48 1 \"memory_operand\" \"m\")]\n \t\t    UNSPECV_WRUSS)]\n   \"TARGET_SHSTK\"\n   \"wruss<mskmodesuffix>\\t%0, %1\"\n@@ -21314,13 +21301,8 @@\n   [(set_attr \"length\" \"4\")\n    (set_attr \"type\" \"other\")])\n \n-(define_expand \"clrssbsy\"\n-  [(unspec_volatile [(match_operand 0 \"memory_operand\")]\n-\t\t    UNSPECV_CLRSSBSY)]\n-  \"TARGET_SHSTK\")\n-\n-(define_insn \"*clrssbsy<mode>\"\n-  [(unspec_volatile [(match_operand:P 0 \"memory_operand\" \"m\")]\n+(define_insn \"clrssbsy\"\n+  [(unspec_volatile [(match_operand:DI 0 \"memory_operand\" \"m\")]\n \t\t    UNSPECV_CLRSSBSY)]\n   \"TARGET_SHSTK\"\n   \"clrssbsy\\t%0\""}]}