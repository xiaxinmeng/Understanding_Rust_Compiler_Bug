{"sha": "1d51f406677ceea381da32d39f43f4084fd8d69f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ1MWY0MDY2NzdjZWVhMzgxZGEzMmQzOWY0M2Y0MDg0ZmQ4ZDY5Zg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2007-08-20T11:37:08Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2007-08-20T11:37:08Z"}, "message": "c-objc-common.c (c_disregard_inline_limits): Remove.\n\n2007-08-20  Richard Guenther  <rguenther@suse.de>\n\n\t* c-objc-common.c (c_disregard_inline_limits): Remove.\n\t* c-objc-common.h (c_disregard_inline_limits): Likewise.\n\t* cgraphunit.c (cgraph_process_new_functions): Call\n\tdisregard_inline_limits_p.\n\t(cgraph_preserve_function_body_p): Likewise.\n\t* ipa-inline.c (compute_inline_parameters): Likewise.\n\t* langhooks-def.h (lhd_tree_inlining_disregard_inline_limits):\n\tRemove.\n\t(LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS): Remove.\n\t(LANG_HOOKS_TREE_INLINING_INITIALIZER): Remove initializer for\n\tdisregard_inline_limits langhook.\n\t* langhooks.c (lhd_tree_inlining_disregard_inline_limits):\n\tRemove.\n\t* langhooks.h (lang_hooks_for_tree_inlining): Remove\n\tdisregard_inline_limits langhook.\n\t* tree-inline.c (disregard_inline_limits_p): New function.\n\t* tree-inline.h (disregard_inline_limits_p): Declare.\n\nFrom-SVN: r127644", "tree": {"sha": "80efab936a1dcc2f70ed51c276471013fcb4ee5c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/80efab936a1dcc2f70ed51c276471013fcb4ee5c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d51f406677ceea381da32d39f43f4084fd8d69f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d51f406677ceea381da32d39f43f4084fd8d69f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d51f406677ceea381da32d39f43f4084fd8d69f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d51f406677ceea381da32d39f43f4084fd8d69f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "50886bf1f9143bd97180043ceaddde5061d43e78", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/50886bf1f9143bd97180043ceaddde5061d43e78", "html_url": "https://github.com/Rust-GCC/gccrs/commit/50886bf1f9143bd97180043ceaddde5061d43e78"}], "stats": {"total": 71, "additions": 33, "deletions": 38}, "files": [{"sha": "4ce1dd6c650c2d063db3cbbb425151c293518a04", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d51f406677ceea381da32d39f43f4084fd8d69f", "patch": "@@ -1,3 +1,23 @@\n+2007-08-20  Richard Guenther  <rguenther@suse.de>\n+\n+\t* c-objc-common.c (c_disregard_inline_limits): Remove.\n+\t* c-objc-common.h (c_disregard_inline_limits): Likewise.\n+\t* cgraphunit.c (cgraph_process_new_functions): Call\n+\tdisregard_inline_limits_p.\n+\t(cgraph_preserve_function_body_p): Likewise.\n+\t* ipa-inline.c (compute_inline_parameters): Likewise.\n+\t* langhooks-def.h (lhd_tree_inlining_disregard_inline_limits):\n+\tRemove.\n+\t(LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS): Remove.\n+\t(LANG_HOOKS_TREE_INLINING_INITIALIZER): Remove initializer for\n+\tdisregard_inline_limits langhook.\n+\t* langhooks.c (lhd_tree_inlining_disregard_inline_limits):\n+\tRemove.\n+\t* langhooks.h (lang_hooks_for_tree_inlining): Remove\n+\tdisregard_inline_limits langhook.\n+\t* tree-inline.c (disregard_inline_limits_p): New function.\n+\t* tree-inline.h (disregard_inline_limits_p): Declare.\n+\n 2007-08-20  Richard Guenther  <rguenther@suse.de>\n \n \t* langhooks-def.h (lhd_tree_inlining_auto_var_in_fn_p): Remove."}, {"sha": "efd576fd5be079cb6f71eb8e4b65127cddafbd04", "filename": "gcc/c-objc-common.c", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Fc-objc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Fc-objc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.c?ref=1d51f406677ceea381da32d39f43f4084fd8d69f", "patch": "@@ -50,20 +50,6 @@ c_missing_noreturn_ok_p (tree decl)\n   return flag_hosted && MAIN_NAME_P (DECL_ASSEMBLER_NAME (decl));\n }\n \n-/* We want to inline `extern inline' functions even if this would\n-   violate inlining limits.  Some glibc and linux constructs depend on\n-   such functions always being inlined when optimizing.  */\n-\n-int\n-c_disregard_inline_limits (const_tree fn)\n-{\n-  if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) != NULL)\n-    return 1;\n-\n-  return (!flag_really_no_inline && DECL_DECLARED_INLINE_P (fn)\n-\t  && DECL_EXTERNAL (fn));\n-}\n-\n int\n c_cannot_inline_tree_fn (tree *fnp)\n {"}, {"sha": "66b25b369236ee932b0a2c95f024d612d4ca227a", "filename": "gcc/c-objc-common.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Fc-objc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Fc-objc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-objc-common.h?ref=1d51f406677ceea381da32d39f43f4084fd8d69f", "patch": "@@ -85,9 +85,6 @@ extern void c_initialize_diagnostics (diagnostic_context *);\n #undef LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN\n #define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\\n   c_cannot_inline_tree_fn\n-#undef LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS\n-#define LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS \\\n-  c_disregard_inline_limits\n #undef LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN\n #define LANG_HOOKS_TREE_DUMP_DUMP_TREE_FN c_dump_tree\n "}, {"sha": "dddc093b5b35fd12d7221f88714721f0b7e3ded2", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=1d51f406677ceea381da32d39f43f4084fd8d69f", "patch": "@@ -381,7 +381,7 @@ cgraph_process_new_functions (void)\n \t  node->local.self_insns = estimate_num_insns (fndecl,\n \t\t\t\t\t\t       &eni_inlining_weights);\n \t  node->local.disregard_inline_limits\n-\t    |= lang_hooks.tree_inlining.disregard_inline_limits (fndecl);\n+\t    |= disregard_inline_limits_p (fndecl);\n \t  /* Inlining characteristics are maintained by the\n \t     cgraph_mark_inline.  */\n \t  node->global.insns = node->local.self_insns;\n@@ -1252,7 +1252,7 @@ cgraph_preserve_function_body_p (tree decl)\n   struct cgraph_node *node;\n   if (!cgraph_global_info_ready)\n     return (flag_really_no_inline\n-\t    ? lang_hooks.tree_inlining.disregard_inline_limits (decl)\n+\t    ? disregard_inline_limits_p (decl)\n \t    : DECL_INLINE (decl));\n   /* Look if there is any clone around.  */\n   for (node = cgraph_node (decl); node; node = node->next_clone)"}, {"sha": "f74ebf8c9f14af6fae79a2489bb7d2b3b9a26f50", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=1d51f406677ceea381da32d39f43f4084fd8d69f", "patch": "@@ -1529,7 +1529,7 @@ compute_inline_parameters (void)\n \t\t\t\t\t       &eni_inlining_weights);\n   if (node->local.inlinable && !node->local.disregard_inline_limits)\n     node->local.disregard_inline_limits\n-      = lang_hooks.tree_inlining.disregard_inline_limits (current_function_decl);\n+      = disregard_inline_limits_p (current_function_decl);\n   if (flag_really_no_inline && !node->local.disregard_inline_limits)\n     node->local.inlinable = 0;\n   /* Inlining characteristics are maintained by the cgraph_mark_inline.  */"}, {"sha": "05d8f4b74ba079ec79f6ddff66bd35a1ea6bca1a", "filename": "gcc/langhooks-def.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Flanghooks-def.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Flanghooks-def.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks-def.h?ref=1d51f406677ceea381da32d39f43f4084fd8d69f", "patch": "@@ -69,7 +69,6 @@ extern tree lhd_builtin_function (tree decl);\n \n /* Declarations of default tree inlining hooks.  */\n extern int lhd_tree_inlining_cannot_inline_tree_fn (tree *);\n-extern int lhd_tree_inlining_disregard_inline_limits (const_tree);\n extern void lhd_initialize_diagnostics (struct diagnostic_context *);\n extern tree lhd_callgraph_analyze_expr (tree *, int *, tree);\n \n@@ -134,14 +133,11 @@ extern void lhd_omp_firstprivatize_type_sizes (struct gimplify_omp_ctx *,\n /* Tree inlining hooks.  */\n #define LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN \\\n   lhd_tree_inlining_cannot_inline_tree_fn\n-#define LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS \\\n-  lhd_tree_inlining_disregard_inline_limits\n #define LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P \\\n   hook_bool_tree_tree_false\n \n #define LANG_HOOKS_TREE_INLINING_INITIALIZER { \\\n   LANG_HOOKS_TREE_INLINING_CANNOT_INLINE_TREE_FN, \\\n-  LANG_HOOKS_TREE_INLINING_DISREGARD_INLINE_LIMITS, \\\n   LANG_HOOKS_TREE_INLINING_VAR_MOD_TYPE_P, \\\n }\n "}, {"sha": "56680c94082c75b5ffb0388465395c269d955265", "filename": "gcc/langhooks.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Flanghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Flanghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.c?ref=1d51f406677ceea381da32d39f43f4084fd8d69f", "patch": "@@ -290,19 +290,6 @@ lhd_tree_inlining_cannot_inline_tree_fn (tree *fnp)\n   return 0;\n }\n \n-/* lang_hooks.tree_inlining.disregard_inline_limits is called to\n-   determine whether a function should be considered for inlining even\n-   if it would exceed inlining limits.  */\n-\n-int\n-lhd_tree_inlining_disregard_inline_limits (const_tree fn)\n-{\n-  if (lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) != NULL)\n-    return 1;\n-\n-  return 0;\n-}\n-\n /* lang_hooks.tree_dump.dump_tree:  Dump language-specific parts of tree\n    nodes.  Returns nonzero if it does not want the usual dumping of the\n    second argument.  */"}, {"sha": "a25371c05eef1d33b5656068bcd225c632f39fcf", "filename": "gcc/langhooks.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Flanghooks.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Flanghooks.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flanghooks.h?ref=1d51f406677ceea381da32d39f43f4084fd8d69f", "patch": "@@ -36,7 +36,6 @@ typedef void (*lang_print_tree_hook) (FILE *, tree, int indent);\n struct lang_hooks_for_tree_inlining\n {\n   int (*cannot_inline_tree_fn) (tree *);\n-  int (*disregard_inline_limits) (const_tree);\n   bool (*var_mod_type_p) (tree, tree);\n };\n "}, {"sha": "16198385496bc13422bee23bce8606b03b86a6d6", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=1d51f406677ceea381da32d39f43f4084fd8d69f", "patch": "@@ -1914,6 +1914,15 @@ inlinable_function_p (tree fn)\n   return inlinable;\n }\n \n+/* Return true if we shall disregard inlining limits for the function\n+   FN during inlining.  */\n+\n+bool\n+disregard_inline_limits_p (tree fn)\n+{\n+  return lookup_attribute (\"always_inline\", DECL_ATTRIBUTES (fn)) != NULL_TREE;\n+}\n+\n /* Estimate the cost of a memory move.  Use machine dependent\n    word size and take possible memcpy call into account.  */\n "}, {"sha": "05d921a2b6f79a453df504043bae468f4d50e1f8", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d51f406677ceea381da32d39f43f4084fd8d69f/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=1d51f406677ceea381da32d39f43f4084fd8d69f", "patch": "@@ -130,6 +130,7 @@ extern void insert_decl_map (copy_body_data *, tree, tree);\n \n unsigned int optimize_inline_calls (tree);\n bool tree_inlinable_function_p (tree);\n+bool disregard_inline_limits_p (tree);\n tree copy_tree_r (tree *, int *, void *);\n void clone_body (tree, tree, void *);\n void save_body (tree, tree *, tree *);"}]}