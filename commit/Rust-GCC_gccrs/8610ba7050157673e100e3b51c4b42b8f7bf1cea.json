{"sha": "8610ba7050157673e100e3b51c4b42b8f7bf1cea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODYxMGJhNzA1MDE1NzY3M2UxMDBlM2I1MWM0YjQyYjhmN2JmMWNlYQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-12-15T02:25:41Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-12-15T02:25:41Z"}, "message": "regrename.c (mode_change_ok): New.\n\n        * regrename.c (mode_change_ok): New.\n        (find_oldest_value_reg): Use it.\n\nFrom-SVN: r48029", "tree": {"sha": "0c533cd236a49c765590352d4a8695491e2f6877", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c533cd236a49c765590352d4a8695491e2f6877"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8610ba7050157673e100e3b51c4b42b8f7bf1cea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8610ba7050157673e100e3b51c4b42b8f7bf1cea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8610ba7050157673e100e3b51c4b42b8f7bf1cea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8610ba7050157673e100e3b51c4b42b8f7bf1cea/comments", "author": null, "committer": null, "parents": [{"sha": "752ae91493c7b2a0d99405a35ecb42407762000d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/752ae91493c7b2a0d99405a35ecb42407762000d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/752ae91493c7b2a0d99405a35ecb42407762000d"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "2e4f175d1dbc35838996defd51274af49ad76dd5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8610ba7050157673e100e3b51c4b42b8f7bf1cea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8610ba7050157673e100e3b51c4b42b8f7bf1cea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8610ba7050157673e100e3b51c4b42b8f7bf1cea", "patch": "@@ -1,3 +1,8 @@\n+2001-12-14  Richard Henderson  <rth@redhat.com>\n+\n+\t* regrename.c (mode_change_ok): New.\n+\t(find_oldest_value_reg): Use it.\n+\n 2001-12-14  Richard Henderson  <rth@redhat.com>\n \n \t* regrename.c (struct value_data): Add max_value_regs."}, {"sha": "ddef8378eee3bf9153ac0e30f42706a3a5f552b5", "filename": "gcc/regrename.c", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8610ba7050157673e100e3b51c4b42b8f7bf1cea/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8610ba7050157673e100e3b51c4b42b8f7bf1cea/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=8610ba7050157673e100e3b51c4b42b8f7bf1cea", "patch": "@@ -996,6 +996,8 @@ static void kill_clobbered_value PARAMS ((rtx, rtx, void *));\n static void kill_set_value PARAMS ((rtx, rtx, void *));\n static int kill_autoinc_value PARAMS ((rtx *, void *));\n static void copy_value PARAMS ((rtx, rtx, struct value_data *));\n+static bool mode_change_ok PARAMS ((enum machine_mode, enum machine_mode,\n+\t\t\t\t    unsigned int));\n static rtx find_oldest_value_reg PARAMS ((enum reg_class, unsigned int,\n \t\t\t\t\t    enum machine_mode,\n \t\t\t\t\t    struct value_data *));\n@@ -1212,6 +1214,25 @@ copy_value (dest, src, vd)\n #endif\n }\n \n+/* Return true if a mode change from ORIG to NEW is allowed for REGNO.  */\n+\n+static bool\n+mode_change_ok (orig_mode, new_mode, regno)\n+     enum machine_mode orig_mode, new_mode;\n+     unsigned int regno;\n+{\n+  if (GET_MODE_SIZE (orig_mode) < GET_MODE_SIZE (new_mode))\n+    return false;\n+\n+#ifdef CLASS_CANNOT_CHANGE_MODE\n+  if (TEST_HARD_REG_BIT (reg_class_contents[CLASS_CANNOT_CHANGE_MODE], regno)\n+      && CLASS_CANNOT_CHANGE_MODE_P (orig_mode, new_mode))\n+    return false;\n+#endif\n+\n+  return true;\n+}\n+\n /* Find the oldest copy of the value contained in REGNO that is in\n    register class CLASS and has mode MODE.  If found, return an rtx\n    of that oldest register, otherwise return NULL.  */\n@@ -1226,8 +1247,9 @@ find_oldest_value_reg (class, regno, mode, vd)\n   unsigned int i;\n \n   for (i = vd->e[regno].oldest_regno; i != regno; i = vd->e[i].next_regno)\n-    if (vd->e[i].mode == mode\n-\t&& TEST_HARD_REG_BIT (reg_class_contents[class], i))\n+    if (TEST_HARD_REG_BIT (reg_class_contents[class], i)\n+\t&& (vd->e[i].mode == mode\n+\t    || mode_change_ok (vd->e[i].mode, mode, regno)))\n       return gen_rtx_REG (mode, i);\n \n   return NULL_RTX;"}]}