{"sha": "c417a082ead98f746d5c289520a3d45f5d1e85f4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzQxN2EwODJlYWQ5OGY3NDZkNWMyODk1MjBhM2Q0NWY1ZDFlODVmNA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-11-02T16:50:10Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-11-02T16:50:10Z"}, "message": "exp/terminal: Use tcgetattr/tcsetattr rather than ioctl.\n\nFrom-SVN: r180780", "tree": {"sha": "8e902ca727e1f5cf9ac5a0585fec129555e1c14d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e902ca727e1f5cf9ac5a0585fec129555e1c14d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c417a082ead98f746d5c289520a3d45f5d1e85f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c417a082ead98f746d5c289520a3d45f5d1e85f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c417a082ead98f746d5c289520a3d45f5d1e85f4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c417a082ead98f746d5c289520a3d45f5d1e85f4/comments", "author": null, "committer": null, "parents": [{"sha": "e1bb1accc1c3aeb59741c837b27b3712f56c164d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1bb1accc1c3aeb59741c837b27b3712f56c164d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1bb1accc1c3aeb59741c837b27b3712f56c164d"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "05a8990b0414b2ca9c515e8701ccd2c052d33811", "filename": "libgo/go/exp/terminal/terminal.go", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c417a082ead98f746d5c289520a3d45f5d1e85f4/libgo%2Fgo%2Fexp%2Fterminal%2Fterminal.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c417a082ead98f746d5c289520a3d45f5d1e85f4/libgo%2Fgo%2Fexp%2Fterminal%2Fterminal.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fexp%2Fterminal%2Fterminal.go?ref=c417a082ead98f746d5c289520a3d45f5d1e85f4", "patch": "@@ -17,7 +17,6 @@ package terminal\n import (\n \t\"os\"\n \t\"syscall\"\n-\t\"unsafe\"\n )\n \n // State contains the state of a terminal.\n@@ -28,7 +27,7 @@ type State struct {\n // IsTerminal returns true if the given file descriptor is a terminal.\n func IsTerminal(fd int) bool {\n \tvar termios syscall.Termios\n-\t_, _, e := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), uintptr(syscall.TCGETS), uintptr(unsafe.Pointer(&termios)), 0, 0, 0)\n+\te := syscall.Tcgetattr(fd, &termios)\n \treturn e == 0\n }\n \n@@ -37,14 +36,14 @@ func IsTerminal(fd int) bool {\n // restored.\n func MakeRaw(fd int) (*State, os.Error) {\n \tvar oldState State\n-\tif _, _, e := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), uintptr(syscall.TCGETS), uintptr(unsafe.Pointer(&oldState.termios)), 0, 0, 0); e != 0 {\n+\tif e := syscall.Tcgetattr(fd, &oldState.termios); e != 0 {\n \t\treturn nil, os.Errno(e)\n \t}\n \n \tnewState := oldState.termios\n \tnewState.Iflag &^= syscall.ISTRIP | syscall.INLCR | syscall.ICRNL | syscall.IGNCR | syscall.IXON | syscall.IXOFF\n \tnewState.Lflag &^= syscall.ECHO | syscall.ICANON | syscall.ISIG\n-\tif _, _, e := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), uintptr(syscall.TCSETS), uintptr(unsafe.Pointer(&newState)), 0, 0, 0); e != 0 {\n+\tif e := syscall.Tcsetattr(fd, syscall.TCSANOW, &newState); e != 0 {\n \t\treturn nil, os.Errno(e)\n \t}\n \n@@ -54,7 +53,7 @@ func MakeRaw(fd int) (*State, os.Error) {\n // Restore restores the terminal connected to the given file descriptor to a\n // previous state.\n func Restore(fd int, state *State) os.Error {\n-\t_, _, e := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), uintptr(syscall.TCSETS), uintptr(unsafe.Pointer(&state.termios)), 0, 0, 0)\n+\te := syscall.Tcsetattr(fd, syscall.TCSANOW, &state.termios)\n \treturn os.Errno(e)\n }\n \n@@ -63,18 +62,18 @@ func Restore(fd int, state *State) os.Error {\n // returned does not include the \\n.\n func ReadPassword(fd int) ([]byte, os.Error) {\n \tvar oldState syscall.Termios\n-\tif _, _, e := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), uintptr(syscall.TCGETS), uintptr(unsafe.Pointer(&oldState)), 0, 0, 0); e != 0 {\n+\tif e := syscall.Tcgetattr(fd, &oldState); e != 0 {\n \t\treturn nil, os.Errno(e)\n \t}\n \n \tnewState := oldState\n \tnewState.Lflag &^= syscall.ECHO\n-\tif _, _, e := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), uintptr(syscall.TCSETS), uintptr(unsafe.Pointer(&newState)), 0, 0, 0); e != 0 {\n+\tif e := syscall.Tcsetattr(fd, syscall.TCSANOW, &newState); e != 0 {\n \t\treturn nil, os.Errno(e)\n \t}\n \n \tdefer func() {\n-\t\tsyscall.Syscall6(syscall.SYS_IOCTL, uintptr(fd), uintptr(syscall.TCSETS), uintptr(unsafe.Pointer(&oldState)), 0, 0, 0)\n+\t\tsyscall.Tcsetattr(fd, syscall.TCSANOW, &oldState)\n \t}()\n \n \tvar buf [16]byte"}, {"sha": "87ed4e628fd9e9a5a45f438a2b853ef0bce43e66", "filename": "libgo/go/syscall/libcall_posix.go", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c417a082ead98f746d5c289520a3d45f5d1e85f4/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c417a082ead98f746d5c289520a3d45f5d1e85f4/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fsyscall%2Flibcall_posix.go?ref=c417a082ead98f746d5c289520a3d45f5d1e85f4", "patch": "@@ -377,3 +377,9 @@ func NsecToTimeval(nsec int64) (tv Timeval) {\n \ttv.Usec = Timeval_usec_t(nsec % 1e9 / 1e3)\n \treturn\n }\n+\n+//sysnb\tTcgetattr(fd int, p *Termios) (errno int)\n+//tcgetattr(fd int, p *Termios) int\n+\n+//sys\tTcsetattr(fd int, actions int, p *Termios) (errno int)\n+//tcsetattr(fd int, actions int, p *Termios) int"}]}