{"sha": "27b95a65410ccb700752c8178fd19f1485a4b5bf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjdiOTVhNjU0MTBjY2I3MDA3NTJjODE3OGZkMTlmMTQ4NWE0YjViZg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2016-04-19T13:19:45Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2016-04-19T13:19:45Z"}, "message": "sem_util.adb (Build_Elaboration_Entity): Always request an elab counter when preserving control-flow.\n\n2016-04-19  Olivier Hainque  <hainque@adacore.com>\n\n\t* sem_util.adb (Build_Elaboration_Entity): Always request an\n\telab counter when preserving control-flow.\n\n2016-04-19  Olivier Hainque  <hainque@adacore.com>\n\n\t* sem_ch13.adb (Build_Invariant_Procedure_Declaration): Set\n\tNeeds_Debug_Info when producing SCOs.\n\t* par_sco.adb (Traverse_Aspects): Fix categorization of\n\tType_Invariant to match actual processing as activated depending\n\ton pragma Assertion_Policy.\n\t* sem_prag.adb (Analyze_Pragma): Remove special case for\n\tName_Invariant regarding SCO generation, which completely disabled\n\tthe production of SCOs for Invariant pragmas and aspects.\n\nFrom-SVN: r235202", "tree": {"sha": "132f0b06c5933b23ab8d346737f54e784f7c852a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/132f0b06c5933b23ab8d346737f54e784f7c852a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/27b95a65410ccb700752c8178fd19f1485a4b5bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b95a65410ccb700752c8178fd19f1485a4b5bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27b95a65410ccb700752c8178fd19f1485a4b5bf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27b95a65410ccb700752c8178fd19f1485a4b5bf/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b4213ffdafd1907f53c50b7bcdaa7fd269495592", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4213ffdafd1907f53c50b7bcdaa7fd269495592", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4213ffdafd1907f53c50b7bcdaa7fd269495592"}], "stats": {"total": 77, "additions": 59, "deletions": 18}, "files": [{"sha": "3737bf36eb3533fe3c1c4ba8186239fca5d6a513", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b95a65410ccb700752c8178fd19f1485a4b5bf/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b95a65410ccb700752c8178fd19f1485a4b5bf/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=27b95a65410ccb700752c8178fd19f1485a4b5bf", "patch": "@@ -1,3 +1,19 @@\n+2016-04-19  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* sem_util.adb (Build_Elaboration_Entity): Always request an\n+\telab counter when preserving control-flow.\n+\n+2016-04-19  Olivier Hainque  <hainque@adacore.com>\n+\n+\t* sem_ch13.adb (Build_Invariant_Procedure_Declaration): Set\n+\tNeeds_Debug_Info when producing SCOs.\n+\t* par_sco.adb (Traverse_Aspects): Fix categorization of\n+\tType_Invariant to match actual processing as activated depending\n+\ton pragma Assertion_Policy.\n+\t* sem_prag.adb (Analyze_Pragma): Remove special case for\n+\tName_Invariant regarding SCO generation, which completely disabled\n+\tthe production of SCOs for Invariant pragmas and aspects.\n+\n 2016-04-19  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* checks.adb, sem_util.adb, sem_res.adb, sem_attr.adb: Minor"}, {"sha": "e55742df4ad6432576aa06708d26982d94f3ac3a", "filename": "gcc/ada/par_sco.adb", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b95a65410ccb700752c8178fd19f1485a4b5bf/gcc%2Fada%2Fpar_sco.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b95a65410ccb700752c8178fd19f1485a4b5bf/gcc%2Fada%2Fpar_sco.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fpar_sco.adb?ref=27b95a65410ccb700752c8178fd19f1485a4b5bf", "patch": "@@ -1640,11 +1640,12 @@ package body Par_SCO is\n                --  specification. The corresponding pragma will have the same\n                --  sloc.\n \n-               when Aspect_Pre           |\n-                    Aspect_Precondition  |\n-                    Aspect_Post          |\n-                    Aspect_Postcondition |\n-                    Aspect_Invariant     =>\n+               when Aspect_Pre            |\n+                    Aspect_Precondition   |\n+                    Aspect_Post           |\n+                    Aspect_Postcondition  |\n+                    Aspect_Type_Invariant |\n+                    Aspect_Invariant      =>\n \n                   C1 := 'a';\n \n@@ -1660,8 +1661,7 @@ package body Par_SCO is\n \n                when Aspect_Predicate         |\n                     Aspect_Static_Predicate  |\n-                    Aspect_Dynamic_Predicate |\n-                    Aspect_Type_Invariant    =>\n+                    Aspect_Dynamic_Predicate =>\n \n                   C1 := 'A';\n \n@@ -2397,8 +2397,8 @@ package body Par_SCO is\n       Sync_Def : Node_Id;\n       --  N's protected or task definition\n \n-      Vis_Decl : List_Id;\n-      --  Sync_Def's Visible_Declarations\n+      Vis_Decl, Priv_Decl : List_Id;\n+      --  Sync_Def's Visible_Declarations and Private_Declarations\n \n    begin\n       case Nkind (N) is\n@@ -2412,7 +2412,16 @@ package body Par_SCO is\n             raise Program_Error;\n       end case;\n \n-      Vis_Decl := Visible_Declarations (Sync_Def);\n+      --  Sync_Def may be Empty at least for empty Task_Type_Declarations.\n+      --  Querying Visible or Private_Declarations is invalid in this case.\n+\n+      if Present (Sync_Def) then\n+         Vis_Decl := Visible_Declarations (Sync_Def);\n+         Priv_Decl := Private_Declarations (Sync_Def);\n+      else\n+         Vis_Decl := No_List;\n+         Priv_Decl := No_List;\n+      end if;\n \n       Dom_Info := Traverse_Declarations_Or_Statements\n                     (L => Vis_Decl,\n@@ -2422,7 +2431,7 @@ package body Par_SCO is\n       --  is dominated by the last visible declaration.\n \n       Traverse_Declarations_Or_Statements\n-        (L => Private_Declarations (Sync_Def),\n+        (L => Priv_Decl,\n          D => Dom_Info);\n    end Traverse_Sync_Definition;\n "}, {"sha": "b436b43a08626e332700e4c0c28dbabe2ed1a81d", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b95a65410ccb700752c8178fd19f1485a4b5bf/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b95a65410ccb700752c8178fd19f1485a4b5bf/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=27b95a65410ccb700752c8178fd19f1485a4b5bf", "patch": "@@ -7841,6 +7841,14 @@ package body Sem_Ch13 is\n       Set_Is_Invariant_Procedure (SId);\n       Set_Invariant_Procedure (Typ, SId);\n \n+      --  Source Coverage Obligations might be attached to the invariant\n+      --  expression this procedure evaluates, and we need debug info to be\n+      --  able to assess the coverage achieved by evaluations.\n+\n+      if Opt.Generate_SCO then\n+         Set_Needs_Debug_Info (SId);\n+      end if;\n+\n       --  Mark the invariant procedure explicitly as Ghost because it does not\n       --  come from source.\n "}, {"sha": "d929c852c94b28c61455b463bb6370f4b075d69a", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b95a65410ccb700752c8178fd19f1485a4b5bf/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b95a65410ccb700752c8178fd19f1485a4b5bf/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=27b95a65410ccb700752c8178fd19f1485a4b5bf", "patch": "@@ -12265,11 +12265,11 @@ package body Sem_Prag is\n \n             case Cname is\n \n-               --  Nothing to do for invariants and predicates as the checks\n-               --  occur in the client units. The SCO for the aspect in the\n-               --  declaration unit is conservatively always enabled.\n+               --  Nothing to do for predicates as the checks occur in the\n+               --  client units. The SCO for the aspect in the declaration\n+               --  unit is conservatively always enabled.\n \n-               when Name_Invariant | Name_Predicate =>\n+               when Name_Predicate =>\n                   null;\n \n                --  Otherwise mark aspect/pragma SCO as enabled"}, {"sha": "ba4f0321c2dbbb813d52b6b3471f55497f6f4d3e", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/27b95a65410ccb700752c8178fd19f1485a4b5bf/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/27b95a65410ccb700752c8178fd19f1485a4b5bf/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=27b95a65410ccb700752c8178fd19f1485a4b5bf", "patch": "@@ -1662,9 +1662,17 @@ package body Sem_Util is\n       elsif ASIS_Mode then\n          return;\n \n-      --  See if we need elaboration entity. We always need it for the dynamic\n-      --  elaboration model, since it is needed to properly generate the PE\n-      --  exception for access before elaboration.\n+      --  See if we need elaboration entity.\n+\n+      --  We always need an elaboration entity when preserving control-flow, as\n+      --  we want to remain explicit about the units elaboration order.\n+\n+      elsif Opt.Suppress_Control_Flow_Optimizations then\n+         null;\n+\n+      --  We always need an elaboration entity for the dynamic elaboration\n+      --  model, since it is needed to properly generate the PE exception for\n+      --  access before elaboration.\n \n       elsif Dynamic_Elaboration_Checks then\n          null;"}]}