{"sha": "a700b5f073c45564f513ff035b2c0d5fb0edfaa0", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTcwMGI1ZjA3M2M0NTU2NGY1MTNmZjAzNWIyYzBkNWZiMGVkZmFhMA==", "commit": {"author": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2011-06-02T22:26:42Z"}, "committer": {"name": "Kaz Kojima", "email": "kkojima@gcc.gnu.org", "date": "2011-06-02T22:26:42Z"}, "message": "predicates.md (general_movsrc_operand): Return 0 for memory and memory subreg of which address is an invalid indexed...\n\n\t* config/sh/predicates.md (general_movsrc_operand): Return 0\n\tfor memory and memory subreg of which address is an invalid\n\tindexed address for QI and HImode.\n\t(general_movdst_operand): Likewise.\n\t* gcc.c-torture/compile/pr49163.c: New.\n\nFrom-SVN: r174586", "tree": {"sha": "4d23397d21aeaa5440d07cc7bdf414f59f96eea0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4d23397d21aeaa5440d07cc7bdf414f59f96eea0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a700b5f073c45564f513ff035b2c0d5fb0edfaa0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a700b5f073c45564f513ff035b2c0d5fb0edfaa0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a700b5f073c45564f513ff035b2c0d5fb0edfaa0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a700b5f073c45564f513ff035b2c0d5fb0edfaa0/comments", "author": null, "committer": null, "parents": [{"sha": "76015c34a97c58e6e6fb058f8d34a5be56d3a713", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76015c34a97c58e6e6fb058f8d34a5be56d3a713", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76015c34a97c58e6e6fb058f8d34a5be56d3a713"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "a6fd4de01bcd78a11c89e87ea0927dc20e9bd6ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a700b5f073c45564f513ff035b2c0d5fb0edfaa0/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a700b5f073c45564f513ff035b2c0d5fb0edfaa0/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a700b5f073c45564f513ff035b2c0d5fb0edfaa0", "patch": "@@ -1,3 +1,11 @@\n+2011-06-02  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/49163\n+\t* config/sh/predicates.md (general_movsrc_operand): Return 0\n+\tfor memory and memory subreg of which address is an invalid\n+\tindexed address for QI and HImode.\n+\t(general_movdst_operand): Likewise.\n+\n 2011-06-02  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* cse.c (cse_find_path): Refine change to exclude EDGE_ABNORMAL_CALL"}, {"sha": "20354588d99291398b8a6b18f7a144b4904c23e1", "filename": "gcc/config/sh/predicates.md", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a700b5f073c45564f513ff035b2c0d5fb0edfaa0/gcc%2Fconfig%2Fsh%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a700b5f073c45564f513ff035b2c0d5fb0edfaa0/gcc%2Fconfig%2Fsh%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fpredicates.md?ref=a700b5f073c45564f513ff035b2c0d5fb0edfaa0", "patch": "@@ -394,6 +394,18 @@\n \treturn 0;\n     }\n \n+  if ((mode == QImode || mode == HImode)\n+      && (MEM_P (op)\n+\t  || (GET_CODE (op) == SUBREG && MEM_P (SUBREG_REG (op)))))\n+    {\n+      rtx x = XEXP ((MEM_P (op) ? op : SUBREG_REG (op)), 0);\n+\n+      if (GET_CODE (x) == PLUS\n+\t  && REG_P (XEXP (x, 0))\n+\t  && CONST_INT_P (XEXP (x, 1)))\n+\treturn sh_legitimate_index_p (mode, XEXP (x, 1));\n+    }\n+\n   if (TARGET_SHMEDIA\n       && (GET_CODE (op) == PARALLEL || GET_CODE (op) == CONST_VECTOR)\n       && sh_rep_vec (op, mode))\n@@ -419,6 +431,18 @@\n       && ! (high_life_started || reload_completed))\n     return 0;\n \n+  if ((mode == QImode || mode == HImode)\n+      && (MEM_P (op)\n+\t  || (GET_CODE (op) == SUBREG && MEM_P (SUBREG_REG (op)))))\n+    {\n+      rtx x = XEXP ((MEM_P (op) ? op : SUBREG_REG (op)), 0);\n+\n+      if (GET_CODE (x) == PLUS\n+\t  && REG_P (XEXP (x, 0))\n+\t  && CONST_INT_P (XEXP (x, 1)))\n+\treturn sh_legitimate_index_p (mode, XEXP (x, 1));\n+    }\n+\n   return general_operand (op, mode);\n })\n "}, {"sha": "7c9adb1ae6b02f492dc58c14483a953b2108d7f8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a700b5f073c45564f513ff035b2c0d5fb0edfaa0/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a700b5f073c45564f513ff035b2c0d5fb0edfaa0/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a700b5f073c45564f513ff035b2c0d5fb0edfaa0", "patch": "@@ -1,3 +1,8 @@\n+2011-06-02  Kaz Kojima  <kkojima@gcc.gnu.org>\n+\n+\tPR target/49163\n+\t* gcc.c-torture/compile/pr49163.c: New.\n+\n 2011-06-02  Asher Langton  <langton2@llnl.gov>\n \n \tPR fortran/49268"}, {"sha": "f14ab1531e608e45fc0acd466b37d6fe52f97b2c", "filename": "gcc/testsuite/gcc.c-torture/compile/pr49163.c", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a700b5f073c45564f513ff035b2c0d5fb0edfaa0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr49163.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a700b5f073c45564f513ff035b2c0d5fb0edfaa0/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr49163.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2Fpr49163.c?ref=a700b5f073c45564f513ff035b2c0d5fb0edfaa0", "patch": "@@ -0,0 +1,35 @@\n+/* PR target/49163 */\n+struct S1\n+{\n+ unsigned f0:18;\n+ int f1;\n+} __attribute__ ((packed));\n+\n+struct S2\n+{\n+  volatile long long f0;\n+  int f1;\n+};\n+\n+struct S1 s1;\n+struct S2 s2;\n+const struct S2 s2array[2][1] = { };\n+\n+struct S2 **sptr;\n+\n+extern int bar (char a, long long b, int * c, long long d, long long e);\n+extern int baz (void);\n+\n+int i;\n+int *ptr;\n+\n+void\n+foo (int *arg)\n+{\n+  for (i = 0; i < 1; i = baz())\n+    {\n+      *arg = *(int *)sptr;\n+      *ptr = bar (*arg, s2.f1, ptr,\n+\t\t  bar (s2array[1][0].f0, *arg, ptr, s1.f1, *ptr), *arg);\n+    }\n+}"}]}