{"sha": "757dbb59c1f2cd88c84a6dc7dc038e4da750b035", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzU3ZGJiNTljMWYyY2Q4OGM4NGE2ZGM3ZGMwMzhlNGRhNzUwYjAzNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-22T22:40:35Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-05-26T06:38:24Z"}, "message": "gcc-git: Add prepare-commit-msg hook.\n\nThis patch introduces a prepare-commit-msg hook that appends a ChangeLog\nskeleton to a commit message when the GCC_FORCE_MKLOG environment variable\nis set, and a 'git commit-mklog' command set that variable while running\n'git commit'.\n\ncontrib/ChangeLog:\n\n\t* prepare-commit-msg: New file.\n\t* gcc-git-customization.sh: Install it.  Add commit-mklog alias.\n\t* mklog.py: Add new option -c which appends\n\tto a ChangeLog file.", "tree": {"sha": "b23b29e0cb81510b99e04b750ae88adb70a0a4e0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b23b29e0cb81510b99e04b750ae88adb70a0a4e0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/757dbb59c1f2cd88c84a6dc7dc038e4da750b035", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEE6I4wzqqylQBfXaRhTcGC3A+nN4UFAl7MuWAACgkQTcGC3A+n\nN4V+fwgAwaDgK8VGVn2C0xjkrJpZCt3FTb8CGnWfVcoQRFDEsse5c/md3Xg81VMJ\nS8ckP7bwF1eIWkengFvQybvTMVs2ZFGVSJB9ti71BlFZMJplULN8NBzMC7T64zaM\nbUmOhLldGfomacnO+UgWzQ4+6fYr7B0MEUCH2+C9lmboPoZ2LfEs4mnvmnA0agJ7\nV6G/QKyvyCsGlfKX7Jn3o/swMkhO/I/OGEHovqyXA9gz1DsDL6F8RwwYe1tvH5iE\nyDcfSOytQWX17BVDuHP/2c3aPj3ApcREj6+wwb70L/ZX9CHJL2vTZo2NH12IWapX\nQDyOmyvdnMTIm+RRWhquNFKG0rN28A==\n=Za80\n-----END PGP SIGNATURE-----", "payload": "tree b23b29e0cb81510b99e04b750ae88adb70a0a4e0\nparent b8e5f22671e900d9c7757f6289cc10d0c4fd0f03\nauthor Jason Merrill <jason@redhat.com> 1590187235 -0400\ncommitter Martin Liska <mliska@suse.cz> 1590475104 +0200\n\ngcc-git: Add prepare-commit-msg hook.\n\nThis patch introduces a prepare-commit-msg hook that appends a ChangeLog\nskeleton to a commit message when the GCC_FORCE_MKLOG environment variable\nis set, and a 'git commit-mklog' command set that variable while running\n'git commit'.\n\ncontrib/ChangeLog:\n\n\t* prepare-commit-msg: New file.\n\t* gcc-git-customization.sh: Install it.  Add commit-mklog alias.\n\t* mklog.py: Add new option -c which appends\n\tto a ChangeLog file.\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757dbb59c1f2cd88c84a6dc7dc038e4da750b035", "html_url": "https://github.com/Rust-GCC/gccrs/commit/757dbb59c1f2cd88c84a6dc7dc038e4da750b035", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/757dbb59c1f2cd88c84a6dc7dc038e4da750b035/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8e5f22671e900d9c7757f6289cc10d0c4fd0f03", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8e5f22671e900d9c7757f6289cc10d0c4fd0f03", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8e5f22671e900d9c7757f6289cc10d0c4fd0f03"}], "stats": {"total": 93, "additions": 92, "deletions": 1}, "files": [{"sha": "dcc42683fa66973f232aeca09a45d236a89ef832", "filename": "contrib/gcc-git-customization.sh", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757dbb59c1f2cd88c84a6dc7dc038e4da750b035/contrib%2Fgcc-git-customization.sh", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757dbb59c1f2cd88c84a6dc7dc038e4da750b035/contrib%2Fgcc-git-customization.sh", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fgcc-git-customization.sh?ref=757dbb59c1f2cd88c84a6dc7dc038e4da750b035", "patch": "@@ -30,6 +30,8 @@ git config alias.gcc-backport '!f() { rev=$1; git cherry-pick -x $@; } ; f'\n \n git config alias.gcc-mklog '!f() { \"`git rev-parse --show-toplevel`/contrib/mklog.py\" $@; } ; f'\n \n+git config alias.commit-mklog '!f() { GCC_FORCE_MKLOG=1 git commit \"$@\"; }; f'\n+\n # Make diff on MD files use \"(define\" as a function marker.\n # Use this in conjunction with a .gitattributes file containing\n # *.md    diff=md\n@@ -127,6 +129,17 @@ echo \"(local branches starting <prefix>/ can be pushed directly to your\"\n ask \"personal area on the gcc server)\" $old_pfx new_pfx\n git config \"gcc-config.userpfx\" \"$new_pfx\"\n \n+echo\n+ask \"Install prepare-commit-msg git hook for 'git commit-mklog' alias\" yes dohook\n+if [ \"x$dohook\" = xyes ]; then\n+    hookdir=`git rev-parse --git-path hooks`\n+    if [ -f \"$hookdir/prepare-commit-msg\" ]; then\n+\techo \" Moving existing prepare-commit-msg hook to prepare-commit-msg.bak\"\n+\tmv \"$hookdir/prepare-commit-msg\" \"$hookdir/prepare-commit-msg.bak\"\n+    fi\n+    install -c \"`git rev-parse --show-toplevel`/contrib/prepare-commit-msg\" \"$hookdir\"\n+fi\n+\n # Scan the existing settings to see if there are any we need to rewrite.\n vendors=$(git config --get-all \"remote.${upstream}.fetch\" \"refs/vendors/\" | sed -r \"s:.*refs/vendors/([^/]+)/.*:\\1:\" | sort | uniq)\n url=$(git config --get \"remote.${upstream}.url\")"}, {"sha": "fb58661b5ebb94521fd99dc59c47ccca5e2e00b8", "filename": "contrib/mklog.py", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757dbb59c1f2cd88c84a6dc7dc038e4da750b035/contrib%2Fmklog.py", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757dbb59c1f2cd88c84a6dc7dc038e4da750b035/contrib%2Fmklog.py", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fmklog.py?ref=757dbb59c1f2cd88c84a6dc7dc038e4da750b035", "patch": "@@ -30,6 +30,7 @@\n import os\n import re\n import sys\n+from itertools import takewhile\n \n import requests\n \n@@ -221,6 +222,9 @@ def generate_changelog(data, no_functions=False, fill_pr_titles=False):\n                         help='Do not generate function names in ChangeLogs')\n     parser.add_argument('-p', '--fill-up-bug-titles', action='store_true',\n                         help='Download title of mentioned PRs')\n+    parser.add_argument('-c', '--changelog',\n+                        help='Append the ChangeLog to a git commit message '\n+                             'file')\n     args = parser.parse_args()\n     if args.input == '-':\n         args.input = None\n@@ -229,4 +233,21 @@ def generate_changelog(data, no_functions=False, fill_pr_titles=False):\n     data = input.read()\n     output = generate_changelog(data, args.no_functions,\n                                 args.fill_up_bug_titles)\n-    print(output, end='')\n+    if args.changelog:\n+        lines = open(args.changelog).read().split('\\n')\n+        start = list(takewhile(lambda l: not l.startswith('#'), lines))\n+        end = lines[len(start):]\n+        with open(args.changelog, 'w') as f:\n+            if start:\n+                # appent empty line\n+                if start[-1] != '':\n+                    start.append('')\n+            else:\n+                # append 2 empty lines\n+                start = 2 * ['']\n+            f.write('\\n'.join(start))\n+            f.write('\\n')\n+            f.write(output)\n+            f.write('\\n'.join(end))\n+    else:\n+        print(output, end='')"}, {"sha": "820dacc7e42c60612c39be4c78f8c024ff83edc1", "filename": "contrib/prepare-commit-msg", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/757dbb59c1f2cd88c84a6dc7dc038e4da750b035/contrib%2Fprepare-commit-msg", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/757dbb59c1f2cd88c84a6dc7dc038e4da750b035/contrib%2Fprepare-commit-msg", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2Fprepare-commit-msg?ref=757dbb59c1f2cd88c84a6dc7dc038e4da750b035", "patch": "@@ -0,0 +1,57 @@\n+#!/bin/sh\n+\n+# Copyright (C) 2020 Free Software Foundation, Inc.\n+#\n+# This file is part of GCC.\n+#\n+# GCC is free software; you can redistribute it and/or modify\n+# it under the terms of the GNU General Public License as published by\n+# the Free Software Foundation; either version 3, or (at your option)\n+# any later version.\n+#\n+# GCC is distributed in the hope that it will be useful,\n+# but WITHOUT ANY WARRANTY; without even the implied warranty of\n+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+# GNU General Public License for more details.\n+#\n+# You should have received a copy of the GNU General Public License\n+# along with GCC; see the file COPYING.  If not, write to\n+# the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n+# Boston, MA 02110-1301, USA.\n+\n+COMMIT_MSG_FILE=$1\n+COMMIT_SOURCE=$2\n+SHA1=$3\n+\n+# Can't do anything if $COMMIT_MSG_FILE isn't a file.\n+if ! [ -f \"$COMMIT_MSG_FILE\" ]; then exit 0; fi\n+\n+# Don't do anything unless requested to.\n+if [ -z \"$GCC_FORCE_MKLOG\" ]; then exit 0; fi\n+\n+if [ -z \"$COMMIT_SOURCE\" ] || [ $COMMIT_SOURCE = template ]; then\n+    # No source or \"template\" means new commit.\n+    cmd=\"diff --cached\"\n+\n+elif [ $COMMIT_SOURCE = message ]; then\n+    # \"message\" means -m; assume a new commit if there are any changes staged.\n+    if ! git diff --cached --quiet; then\n+\tcmd=\"diff --cached\"\n+    else\n+\tcmd=\"diff --cached HEAD^\"\n+    fi\n+\n+elif [ $COMMIT_SOURCE = commit ]; then\n+    # The message of an existing commit.  If it's HEAD, assume --amend;\n+    # otherwise, assume a new commit with -C.\n+    if [ $SHA1 = HEAD ]; then\n+\tcmd=\"diff --cached HEAD^\"\n+    else\n+\tcmd=\"diff --cached\"\n+    fi\n+else\n+    # Do nothing for merge or squash.\n+    exit 0\n+fi\n+\n+git $cmd | git gcc-mklog -c \"$COMMIT_MSG_FILE\""}]}