{"sha": "9482a5e4eac8d696129ec2854b331e1bb5dbab42", "node_id": "C_kwDOANBUbNoAKDk0ODJhNWU0ZWFjOGQ2OTYxMjllYzI4NTRiMzMxZTFiYjVkYmFiNDI", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-10-20T09:37:34Z"}, "committer": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2022-10-20T09:37:34Z"}, "message": "aarch64: Replace CONSTEXPR with constexpr\n\nMove away from the pre-C++11 compatibility macro CONSTEXPR.\n\ngcc/\n\t* config/aarch64/aarch64-sve-builtins-base.cc: Replace CONSTEXPR\n\twith constexpr throughout.\n\t* config/aarch64/aarch64-sve-builtins-functions.h: Likewise.\n\t* config/aarch64/aarch64-sve-builtins-shapes.cc: Likewise.\n\t* config/aarch64/aarch64-sve-builtins-sve2.cc: Likewise.\n\t* config/aarch64/aarch64-sve-builtins.cc: Likewise.", "tree": {"sha": "17d36ab69c6f94102ecaabb12d45e0897c969b2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17d36ab69c6f94102ecaabb12d45e0897c969b2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9482a5e4eac8d696129ec2854b331e1bb5dbab42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9482a5e4eac8d696129ec2854b331e1bb5dbab42", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9482a5e4eac8d696129ec2854b331e1bb5dbab42", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9482a5e4eac8d696129ec2854b331e1bb5dbab42/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57675c7f92a3bd3ca8dae1faac7f2f51d40e0f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57675c7f92a3bd3ca8dae1faac7f2f51d40e0f9e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57675c7f92a3bd3ca8dae1faac7f2f51d40e0f9e"}], "stats": {"total": 166, "additions": 83, "deletions": 83}, "files": [{"sha": "d52454bcf27ba197e2bb3f39398c563d5be386a6", "filename": "gcc/config/aarch64/aarch64-sve-builtins-base.cc", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9482a5e4eac8d696129ec2854b331e1bb5dbab42/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9482a5e4eac8d696129ec2854b331e1bb5dbab42/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-base.cc?ref=9482a5e4eac8d696129ec2854b331e1bb5dbab42", "patch": "@@ -177,7 +177,7 @@ class svabd_impl : public function_base\n class svac_impl : public function_base\n {\n public:\n-  CONSTEXPR svac_impl (int unspec) : m_unspec (unspec) {}\n+  constexpr svac_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -209,7 +209,7 @@ class svadda_impl : public function_base\n class svadr_bhwd_impl : public function_base\n {\n public:\n-  CONSTEXPR svadr_bhwd_impl (unsigned int shift) : m_shift (shift) {}\n+  constexpr svadr_bhwd_impl (unsigned int shift) : m_shift (shift) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -259,7 +259,7 @@ class svbic_impl : public function_base\n class svbrk_binary_impl : public function_base\n {\n public:\n-  CONSTEXPR svbrk_binary_impl (int unspec) : m_unspec (unspec) {}\n+  constexpr svbrk_binary_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -275,7 +275,7 @@ class svbrk_binary_impl : public function_base\n class svbrk_unary_impl : public function_base\n {\n public:\n-  CONSTEXPR svbrk_unary_impl (int unspec) : m_unspec (unspec) {}\n+  constexpr svbrk_unary_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -309,7 +309,7 @@ class svcadd_impl : public function_base\n class svclast_impl : public quiet<function_base>\n {\n public:\n-  CONSTEXPR svclast_impl (int unspec) : m_unspec (unspec) {}\n+  constexpr svclast_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -381,7 +381,7 @@ class svcmla_lane_impl : public function_base\n class svcmp_impl : public function_base\n {\n public:\n-  CONSTEXPR svcmp_impl (tree_code code, int unspec_for_fp)\n+  constexpr svcmp_impl (tree_code code, int unspec_for_fp)\n     : m_code (code), m_unspec_for_fp (unspec_for_fp) {}\n \n   gimple *\n@@ -437,7 +437,7 @@ class svcmp_impl : public function_base\n class svcmp_wide_impl : public function_base\n {\n public:\n-  CONSTEXPR svcmp_wide_impl (tree_code code, int unspec_for_sint,\n+  constexpr svcmp_wide_impl (tree_code code, int unspec_for_sint,\n \t\t\t     int unspec_for_uint)\n     : m_code (code), m_unspec_for_sint (unspec_for_sint),\n       m_unspec_for_uint (unspec_for_uint) {}\n@@ -512,7 +512,7 @@ class svcnot_impl : public function_base\n class svcnt_bhwd_impl : public function_base\n {\n public:\n-  CONSTEXPR svcnt_bhwd_impl (machine_mode ref_mode) : m_ref_mode (ref_mode) {}\n+  constexpr svcnt_bhwd_impl (machine_mode ref_mode) : m_ref_mode (ref_mode) {}\n \n   gimple *\n   fold (gimple_folder &f) const override\n@@ -536,7 +536,7 @@ class svcnt_bhwd_impl : public function_base\n class svcnt_bhwd_pat_impl : public svcnt_bhwd_impl\n {\n public:\n-  CONSTEXPR svcnt_bhwd_pat_impl (machine_mode ref_mode)\n+  constexpr svcnt_bhwd_pat_impl (machine_mode ref_mode)\n     : svcnt_bhwd_impl (ref_mode) {}\n \n   gimple *\n@@ -588,7 +588,7 @@ class svcntp_impl : public function_base\n class svcreate_impl : public quiet<multi_vector_function>\n {\n public:\n-  CONSTEXPR svcreate_impl (unsigned int vectors_per_tuple)\n+  constexpr svcreate_impl (unsigned int vectors_per_tuple)\n     : quiet<multi_vector_function> (vectors_per_tuple) {}\n \n   gimple *\n@@ -722,7 +722,7 @@ class svdot_impl : public function_base\n class svdotprod_lane_impl : public unspec_based_function_base\n {\n public:\n-  CONSTEXPR svdotprod_lane_impl (int unspec_for_sint,\n+  constexpr svdotprod_lane_impl (int unspec_for_sint,\n \t\t\t\t int unspec_for_uint,\n \t\t\t\t int unspec_for_float)\n     : unspec_based_function_base (unspec_for_sint,\n@@ -961,7 +961,7 @@ class svdupq_lane_impl : public quiet<function_base>\n class svext_bhw_impl : public function_base\n {\n public:\n-  CONSTEXPR svext_bhw_impl (scalar_int_mode from_mode)\n+  constexpr svext_bhw_impl (scalar_int_mode from_mode)\n     : m_from_mode (from_mode) {}\n \n   rtx\n@@ -1003,7 +1003,7 @@ class svext_bhw_impl : public function_base\n class svget_impl : public quiet<multi_vector_function>\n {\n public:\n-  CONSTEXPR svget_impl (unsigned int vectors_per_tuple)\n+  constexpr svget_impl (unsigned int vectors_per_tuple)\n     : quiet<multi_vector_function> (vectors_per_tuple) {}\n \n   gimple *\n@@ -1066,7 +1066,7 @@ class svinsr_impl : public quiet<function_base>\n class svlast_impl : public quiet<function_base>\n {\n public:\n-  CONSTEXPR svlast_impl (int unspec) : m_unspec (unspec) {}\n+  constexpr svlast_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -1118,7 +1118,7 @@ class svld1_impl : public full_width_access\n class svld1_extend_impl : public extending_load\n {\n public:\n-  CONSTEXPR svld1_extend_impl (type_suffix_index memory_type)\n+  constexpr svld1_extend_impl (type_suffix_index memory_type)\n     : extending_load (memory_type) {}\n \n   rtx\n@@ -1158,7 +1158,7 @@ class svld1_gather_impl : public full_width_access\n class svld1_gather_extend_impl : public extending_load\n {\n public:\n-  CONSTEXPR svld1_gather_extend_impl (type_suffix_index memory_type)\n+  constexpr svld1_gather_extend_impl (type_suffix_index memory_type)\n     : extending_load (memory_type) {}\n \n   rtx\n@@ -1289,7 +1289,7 @@ class svld1ro_impl : public load_replicate\n class svld234_impl : public full_width_access\n {\n public:\n-  CONSTEXPR svld234_impl (unsigned int vectors_per_tuple)\n+  constexpr svld234_impl (unsigned int vectors_per_tuple)\n     : full_width_access (vectors_per_tuple) {}\n \n   unsigned int\n@@ -1372,7 +1372,7 @@ class svldff1_gather_impl : public full_width_access\n class svldff1_gather_extend : public extending_load\n {\n public:\n-  CONSTEXPR svldff1_gather_extend (type_suffix_index memory_type)\n+  constexpr svldff1_gather_extend (type_suffix_index memory_type)\n     : extending_load (memory_type) {}\n \n   rtx\n@@ -1416,7 +1416,7 @@ class svldnt1_impl : public full_width_access\n class svldxf1_impl : public full_width_access\n {\n public:\n-  CONSTEXPR svldxf1_impl (int unspec) : m_unspec (unspec) {}\n+  constexpr svldxf1_impl (int unspec) : m_unspec (unspec) {}\n \n   unsigned int\n   call_properties (const function_instance &) const override\n@@ -1443,7 +1443,7 @@ class svldxf1_impl : public full_width_access\n class svldxf1_extend_impl : public extending_load\n {\n public:\n-  CONSTEXPR svldxf1_extend_impl (type_suffix_index memory_type, int unspec)\n+  constexpr svldxf1_extend_impl (type_suffix_index memory_type, int unspec)\n     : extending_load (memory_type), m_unspec (unspec) {}\n \n   unsigned int\n@@ -1633,7 +1633,7 @@ class svnor_impl : public function_base\n class svnot_impl : public rtx_code_function\n {\n public:\n-  CONSTEXPR svnot_impl () : rtx_code_function (NOT, NOT, -1) {}\n+  constexpr svnot_impl () : rtx_code_function (NOT, NOT, -1) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -1681,7 +1681,7 @@ class svpfalse_impl : public function_base\n class svpfirst_svpnext_impl : public function_base\n {\n public:\n-  CONSTEXPR svpfirst_svpnext_impl (int unspec) : m_unspec (unspec) {}\n+  constexpr svpfirst_svpnext_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -1699,7 +1699,7 @@ class svpfirst_svpnext_impl : public function_base\n class svprf_bhwd_impl : public function_base\n {\n public:\n-  CONSTEXPR svprf_bhwd_impl (machine_mode mode) : m_mode (mode) {}\n+  constexpr svprf_bhwd_impl (machine_mode mode) : m_mode (mode) {}\n \n   unsigned int\n   call_properties (const function_instance &) const override\n@@ -1723,7 +1723,7 @@ class svprf_bhwd_impl : public function_base\n class svprf_bhwd_gather_impl : public function_base\n {\n public:\n-  CONSTEXPR svprf_bhwd_gather_impl (machine_mode mode) : m_mode (mode) {}\n+  constexpr svprf_bhwd_gather_impl (machine_mode mode) : m_mode (mode) {}\n \n   unsigned int\n   call_properties (const function_instance &) const override\n@@ -1761,7 +1761,7 @@ class svprf_bhwd_gather_impl : public function_base\n class svptest_impl : public function_base\n {\n public:\n-  CONSTEXPR svptest_impl (rtx_code compare) : m_compare (compare) {}\n+  constexpr svptest_impl (rtx_code compare) : m_compare (compare) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -1866,7 +1866,7 @@ class svptrue_pat_impl : public function_base\n class svqdec_svqinc_bhwd_impl : public function_base\n {\n public:\n-  CONSTEXPR svqdec_svqinc_bhwd_impl (rtx_code code_for_sint,\n+  constexpr svqdec_svqinc_bhwd_impl (rtx_code code_for_sint,\n \t\t\t\t     rtx_code code_for_uint,\n \t\t\t\t     scalar_int_mode elem_mode)\n     : m_code_for_sint (code_for_sint),\n@@ -1913,23 +1913,23 @@ class svqdec_svqinc_bhwd_impl : public function_base\n class svqdec_bhwd_impl : public svqdec_svqinc_bhwd_impl\n {\n public:\n-  CONSTEXPR svqdec_bhwd_impl (scalar_int_mode elem_mode)\n+  constexpr svqdec_bhwd_impl (scalar_int_mode elem_mode)\n     : svqdec_svqinc_bhwd_impl (SS_MINUS, US_MINUS, elem_mode) {}\n };\n \n /* Implements svqinc[bhwd]{,_pat}.  */\n class svqinc_bhwd_impl : public svqdec_svqinc_bhwd_impl\n {\n public:\n-  CONSTEXPR svqinc_bhwd_impl (scalar_int_mode elem_mode)\n+  constexpr svqinc_bhwd_impl (scalar_int_mode elem_mode)\n     : svqdec_svqinc_bhwd_impl (SS_PLUS, US_PLUS, elem_mode) {}\n };\n \n /* Implements svqdecp and svqincp.  */\n class svqdecp_svqincp_impl : public function_base\n {\n public:\n-  CONSTEXPR svqdecp_svqincp_impl (rtx_code code_for_sint,\n+  constexpr svqdecp_svqincp_impl (rtx_code code_for_sint,\n \t\t\t\t  rtx_code code_for_uint)\n     : m_code_for_sint (code_for_sint),\n       m_code_for_uint (code_for_uint)\n@@ -2070,7 +2070,7 @@ class svsel_impl : public quiet<function_base>\n class svset_impl : public quiet<multi_vector_function>\n {\n public:\n-  CONSTEXPR svset_impl (unsigned int vectors_per_tuple)\n+  constexpr svset_impl (unsigned int vectors_per_tuple)\n     : quiet<multi_vector_function> (vectors_per_tuple) {}\n \n   gimple *\n@@ -2199,7 +2199,7 @@ class svst1_scatter_impl : public full_width_access\n class svst1_scatter_truncate_impl : public truncating_store\n {\n public:\n-  CONSTEXPR svst1_scatter_truncate_impl (scalar_int_mode to_mode)\n+  constexpr svst1_scatter_truncate_impl (scalar_int_mode to_mode)\n     : truncating_store (to_mode) {}\n \n   rtx\n@@ -2219,7 +2219,7 @@ class svst1_scatter_truncate_impl : public truncating_store\n class svst1_truncate_impl : public truncating_store\n {\n public:\n-  CONSTEXPR svst1_truncate_impl (scalar_int_mode to_mode)\n+  constexpr svst1_truncate_impl (scalar_int_mode to_mode)\n     : truncating_store (to_mode) {}\n \n   rtx\n@@ -2235,7 +2235,7 @@ class svst1_truncate_impl : public truncating_store\n class svst234_impl : public full_width_access\n {\n public:\n-  CONSTEXPR svst234_impl (unsigned int vectors_per_tuple)\n+  constexpr svst234_impl (unsigned int vectors_per_tuple)\n     : full_width_access (vectors_per_tuple) {}\n \n   unsigned int\n@@ -2296,7 +2296,7 @@ class svstnt1_impl : public full_width_access\n class svsub_impl : public rtx_code_function\n {\n public:\n-  CONSTEXPR svsub_impl ()\n+  constexpr svsub_impl ()\n     : rtx_code_function (MINUS, MINUS, UNSPEC_COND_FSUB) {}\n \n   rtx\n@@ -2325,7 +2325,7 @@ class svtbl_impl : public permute\n class svtrn_impl : public binary_permute\n {\n public:\n-  CONSTEXPR svtrn_impl (int base)\n+  constexpr svtrn_impl (int base)\n     : binary_permute (base ? UNSPEC_TRN2 : UNSPEC_TRN1), m_base (base) {}\n \n   gimple *\n@@ -2351,7 +2351,7 @@ class svtrn_impl : public binary_permute\n class svundef_impl : public quiet<multi_vector_function>\n {\n public:\n-  CONSTEXPR svundef_impl (unsigned int vectors_per_tuple)\n+  constexpr svundef_impl (unsigned int vectors_per_tuple)\n     : quiet<multi_vector_function> (vectors_per_tuple) {}\n \n   rtx\n@@ -2367,7 +2367,7 @@ class svundef_impl : public quiet<multi_vector_function>\n class svunpk_impl : public quiet<function_base>\n {\n public:\n-  CONSTEXPR svunpk_impl (bool high_p) : m_high_p (high_p) {}\n+  constexpr svunpk_impl (bool high_p) : m_high_p (high_p) {}\n \n   gimple *\n   fold (gimple_folder &f) const override\n@@ -2409,7 +2409,7 @@ class svunpk_impl : public quiet<function_base>\n class svusdot_impl : public function_base\n {\n public:\n-  CONSTEXPR svusdot_impl (bool su) : m_su (su) {}\n+  constexpr svusdot_impl (bool su) : m_su (su) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -2437,7 +2437,7 @@ class svusdot_impl : public function_base\n class svuzp_impl : public binary_permute\n {\n public:\n-  CONSTEXPR svuzp_impl (unsigned int base)\n+  constexpr svuzp_impl (unsigned int base)\n     : binary_permute (base ? UNSPEC_UZP2 : UNSPEC_UZP1), m_base (base) {}\n \n   gimple *\n@@ -2460,7 +2460,7 @@ class svuzp_impl : public binary_permute\n class svwhilelx_impl : public while_comparison\n {\n public:\n-  CONSTEXPR svwhilelx_impl (int unspec_for_sint, int unspec_for_uint, bool eq_p)\n+  constexpr svwhilelx_impl (int unspec_for_sint, int unspec_for_uint, bool eq_p)\n     : while_comparison (unspec_for_sint, unspec_for_uint), m_eq_p (eq_p)\n   {}\n \n@@ -2547,7 +2547,7 @@ class svwrffr_impl : public function_base\n class svzip_impl : public binary_permute\n {\n public:\n-  CONSTEXPR svzip_impl (unsigned int base)\n+  constexpr svzip_impl (unsigned int base)\n     : binary_permute (base ? UNSPEC_ZIP2 : UNSPEC_ZIP1), m_base (base) {}\n \n   gimple *"}, {"sha": "120b72669436c87b6cbf1dd03b1aa8e7adca9f3c", "filename": "gcc/config/aarch64/aarch64-sve-builtins-functions.h", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9482a5e4eac8d696129ec2854b331e1bb5dbab42/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9482a5e4eac8d696129ec2854b331e1bb5dbab42/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-functions.h?ref=9482a5e4eac8d696129ec2854b331e1bb5dbab42", "patch": "@@ -30,17 +30,17 @@ template<typename T>\n class quiet : public T\n {\n public:\n-  CONSTEXPR quiet () : T () {}\n+  constexpr quiet () : T () {}\n \n   /* Unfortunately we can't use parameter packs yet.  */\n   template<typename T1>\n-  CONSTEXPR quiet (const T1 &t1) : T (t1) {}\n+  constexpr quiet (const T1 &t1) : T (t1) {}\n \n   template<typename T1, typename T2>\n-  CONSTEXPR quiet (const T1 &t1, const T2 &t2) : T (t1, t2) {}\n+  constexpr quiet (const T1 &t1, const T2 &t2) : T (t1, t2) {}\n \n   template<typename T1, typename T2, typename T3>\n-  CONSTEXPR quiet (const T1 &t1, const T2 &t2, const T3 &t3)\n+  constexpr quiet (const T1 &t1, const T2 &t2, const T3 &t3)\n     : T (t1, t2, t3) {}\n \n   unsigned int\n@@ -55,7 +55,7 @@ class quiet : public T\n class multi_vector_function : public function_base\n {\n public:\n-  CONSTEXPR multi_vector_function (unsigned int vectors_per_tuple)\n+  constexpr multi_vector_function (unsigned int vectors_per_tuple)\n     : m_vectors_per_tuple (vectors_per_tuple) {}\n \n   unsigned int\n@@ -74,7 +74,7 @@ class multi_vector_function : public function_base\n class full_width_access : public multi_vector_function\n {\n public:\n-  CONSTEXPR full_width_access (unsigned int vectors_per_tuple = 1)\n+  constexpr full_width_access (unsigned int vectors_per_tuple = 1)\n     : multi_vector_function (vectors_per_tuple) {}\n \n   tree\n@@ -99,7 +99,7 @@ class full_width_access : public multi_vector_function\n class extending_load : public function_base\n {\n public:\n-  CONSTEXPR extending_load (type_suffix_index memory_type)\n+  constexpr extending_load (type_suffix_index memory_type)\n     : m_memory_type (memory_type) {}\n \n   unsigned int\n@@ -142,7 +142,7 @@ class extending_load : public function_base\n class truncating_store : public function_base\n {\n public:\n-  CONSTEXPR truncating_store (scalar_int_mode to_mode) : m_to_mode (to_mode) {}\n+  constexpr truncating_store (scalar_int_mode to_mode) : m_to_mode (to_mode) {}\n \n   unsigned int\n   call_properties (const function_instance &) const override\n@@ -179,7 +179,7 @@ class truncating_store : public function_base\n class rtx_code_function_base : public function_base\n {\n public:\n-  CONSTEXPR rtx_code_function_base (rtx_code code_for_sint,\n+  constexpr rtx_code_function_base (rtx_code code_for_sint,\n \t\t\t\t    rtx_code code_for_uint,\n \t\t\t\t    int unspec_for_fp = -1)\n     : m_code_for_sint (code_for_sint), m_code_for_uint (code_for_uint),\n@@ -200,7 +200,7 @@ class rtx_code_function_base : public function_base\n class rtx_code_function : public rtx_code_function_base\n {\n public:\n-  CONSTEXPR rtx_code_function (rtx_code code_for_sint, rtx_code code_for_uint,\n+  constexpr rtx_code_function (rtx_code code_for_sint, rtx_code code_for_uint,\n \t\t\t       int unspec_for_fp = -1)\n     : rtx_code_function_base (code_for_sint, code_for_uint, unspec_for_fp) {}\n \n@@ -219,7 +219,7 @@ class rtx_code_function : public rtx_code_function_base\n class rtx_code_function_rotated : public rtx_code_function_base\n {\n public:\n-  CONSTEXPR rtx_code_function_rotated (rtx_code code_for_sint,\n+  constexpr rtx_code_function_rotated (rtx_code code_for_sint,\n \t\t\t\t       rtx_code code_for_uint,\n \t\t\t\t       int unspec_for_fp = -1)\n     : rtx_code_function_base (code_for_sint, code_for_uint, unspec_for_fp) {}\n@@ -243,7 +243,7 @@ class rtx_code_function_rotated : public rtx_code_function_base\n class unspec_based_function_base : public function_base\n {\n public:\n-  CONSTEXPR unspec_based_function_base (int unspec_for_sint,\n+  constexpr unspec_based_function_base (int unspec_for_sint,\n \t\t\t\t\tint unspec_for_uint,\n \t\t\t\t\tint unspec_for_fp)\n     : m_unspec_for_sint (unspec_for_sint),\n@@ -272,7 +272,7 @@ class unspec_based_function_base : public function_base\n class unspec_based_function : public unspec_based_function_base\n {\n public:\n-  CONSTEXPR unspec_based_function (int unspec_for_sint, int unspec_for_uint,\n+  constexpr unspec_based_function (int unspec_for_sint, int unspec_for_uint,\n \t\t\t\t   int unspec_for_fp)\n     : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n \t\t\t\t  unspec_for_fp)\n@@ -293,7 +293,7 @@ class unspec_based_function : public unspec_based_function_base\n class unspec_based_function_rotated : public unspec_based_function_base\n {\n public:\n-  CONSTEXPR unspec_based_function_rotated (int unspec_for_sint,\n+  constexpr unspec_based_function_rotated (int unspec_for_sint,\n \t\t\t\t\t   int unspec_for_uint,\n \t\t\t\t\t   int unspec_for_fp)\n     : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n@@ -321,7 +321,7 @@ template<insn_code (*CODE) (int, machine_mode)>\n class unspec_based_function_exact_insn : public unspec_based_function_base\n {\n public:\n-  CONSTEXPR unspec_based_function_exact_insn (int unspec_for_sint,\n+  constexpr unspec_based_function_exact_insn (int unspec_for_sint,\n \t\t\t\t\t      int unspec_for_uint,\n \t\t\t\t\t      int unspec_for_fp)\n     : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n@@ -378,7 +378,7 @@ template<insn_code (*INT_CODE) (int, machine_mode)>\n class unspec_based_fused_function : public unspec_based_function_base\n {\n public:\n-  CONSTEXPR unspec_based_fused_function (int unspec_for_sint,\n+  constexpr unspec_based_fused_function (int unspec_for_sint,\n \t\t\t\t\t int unspec_for_uint,\n \t\t\t\t\t int unspec_for_fp)\n     : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n@@ -413,7 +413,7 @@ template<insn_code (*INT_CODE) (int, machine_mode)>\n class unspec_based_fused_lane_function : public unspec_based_function_base\n {\n public:\n-  CONSTEXPR unspec_based_fused_lane_function (int unspec_for_sint,\n+  constexpr unspec_based_fused_lane_function (int unspec_for_sint,\n \t\t\t\t\t      int unspec_for_uint,\n \t\t\t\t\t      int unspec_for_fp)\n     : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n@@ -474,7 +474,7 @@ class code_for_mode_function : public function_base\n class fixed_insn_function : public function_base\n {\n public:\n-  CONSTEXPR fixed_insn_function (insn_code code) : m_code (code) {}\n+  constexpr fixed_insn_function (insn_code code) : m_code (code) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -516,7 +516,7 @@ class permute : public quiet<function_base>\n class binary_permute : public permute\n {\n public:\n-  CONSTEXPR binary_permute (int unspec) : m_unspec (unspec) {}\n+  constexpr binary_permute (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -533,13 +533,13 @@ class binary_permute : public permute\n class reduction : public function_base\n {\n public:\n-  CONSTEXPR reduction (int unspec)\n+  constexpr reduction (int unspec)\n     : m_unspec_for_sint (unspec),\n       m_unspec_for_uint (unspec),\n       m_unspec_for_fp (unspec)\n   {}\n \n-  CONSTEXPR reduction (int unspec_for_sint, int unspec_for_uint,\n+  constexpr reduction (int unspec_for_sint, int unspec_for_uint,\n \t\t       int unspec_for_fp)\n     : m_unspec_for_sint (unspec_for_sint),\n       m_unspec_for_uint (unspec_for_uint),\n@@ -572,7 +572,7 @@ class reduction : public function_base\n class shift_wide : public function_base\n {\n public:\n-  CONSTEXPR shift_wide (rtx_code code, int wide_unspec)\n+  constexpr shift_wide (rtx_code code, int wide_unspec)\n     : m_code (code), m_wide_unspec (wide_unspec) {}\n \n   rtx\n@@ -607,7 +607,7 @@ class shift_wide : public function_base\n class unary_count : public quiet<function_base>\n {\n public:\n-  CONSTEXPR unary_count (rtx_code code) : m_code (code) {}\n+  constexpr unary_count (rtx_code code) : m_code (code) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -630,7 +630,7 @@ class unary_count : public quiet<function_base>\n class while_comparison : public function_base\n {\n public:\n-  CONSTEXPR while_comparison (int unspec_for_sint, int unspec_for_uint)\n+  constexpr while_comparison (int unspec_for_sint, int unspec_for_uint)\n     : m_unspec_for_sint (unspec_for_sint),\n       m_unspec_for_uint (unspec_for_uint)\n   {}\n@@ -659,7 +659,7 @@ class while_comparison : public function_base\n /* Declare the global function base NAME, creating it from an instance\n    of class CLASS with constructor arguments ARGS.  */\n #define FUNCTION(NAME, CLASS, ARGS) \\\n-  namespace { static CONSTEXPR const CLASS NAME##_obj ARGS; } \\\n+  namespace { static constexpr const CLASS NAME##_obj ARGS; } \\\n   namespace functions { const function_base *const NAME = &NAME##_obj; }\n \n #endif"}, {"sha": "bf1d05e5b8c9db4dc9143287d527635698f8371c", "filename": "gcc/config/aarch64/aarch64-sve-builtins-shapes.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9482a5e4eac8d696129ec2854b331e1bb5dbab42/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9482a5e4eac8d696129ec2854b331e1bb5dbab42/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-shapes.cc?ref=9482a5e4eac8d696129ec2854b331e1bb5dbab42", "patch": "@@ -447,7 +447,7 @@ long_type_suffix (function_resolver &r, type_suffix_index type)\n /* Declare the function shape NAME, pointing it to an instance\n    of class <NAME>_def.  */\n #define SHAPE(NAME) \\\n-  static CONSTEXPR const NAME##_def NAME##_obj; \\\n+  static constexpr const NAME##_def NAME##_obj; \\\n   namespace shapes { const function_shape *const NAME = &NAME##_obj; }\n \n /* Base class for functions that are not overloaded.  */\n@@ -587,7 +587,7 @@ struct binary_imm_long_base : public overloaded_base<0>\n /* Base class for inc_dec and inc_dec_pat.  */\n struct inc_dec_base : public overloaded_base<0>\n {\n-  CONSTEXPR inc_dec_base (bool pat_p) : m_pat_p (pat_p) {}\n+  constexpr inc_dec_base (bool pat_p) : m_pat_p (pat_p) {}\n \n   /* Resolve based on the first argument only, which must be either a\n      scalar or a vector.  If it's a scalar, it must be a 32-bit or\n@@ -1924,7 +1924,7 @@ SHAPE (get)\n    whose size is tied to the [bhwd] suffix of \"svfoo\".  */\n struct inc_dec_def : public inc_dec_base\n {\n-  CONSTEXPR inc_dec_def () : inc_dec_base (false) {}\n+  constexpr inc_dec_def () : inc_dec_base (false) {}\n \n   void\n   build (function_builder &b, const function_group_info &group) const override\n@@ -1949,7 +1949,7 @@ SHAPE (inc_dec)\n    whose size is tied to the [bhwd] suffix of \"svfoo\".  */\n struct inc_dec_pat_def : public inc_dec_base\n {\n-  CONSTEXPR inc_dec_pat_def () : inc_dec_base (true) {}\n+  constexpr inc_dec_pat_def () : inc_dec_base (true) {}\n \n   void\n   build (function_builder &b, const function_group_info &group) const override"}, {"sha": "9eb0bdda12ec4efeaa02c797879f31b5c80141ef", "filename": "gcc/config/aarch64/aarch64-sve-builtins-sve2.cc", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9482a5e4eac8d696129ec2854b331e1bb5dbab42/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9482a5e4eac8d696129ec2854b331e1bb5dbab42/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins-sve2.cc?ref=9482a5e4eac8d696129ec2854b331e1bb5dbab42", "patch": "@@ -138,7 +138,7 @@ class svldnt1_gather_impl : public full_width_access\n class svldnt1_gather_extend_impl : public extending_load\n {\n public:\n-  CONSTEXPR svldnt1_gather_extend_impl (type_suffix_index memory_type)\n+  constexpr svldnt1_gather_extend_impl (type_suffix_index memory_type)\n     : extending_load (memory_type) {}\n \n   rtx\n@@ -159,7 +159,7 @@ class svldnt1_gather_extend_impl : public extending_load\n class svmatch_svnmatch_impl : public function_base\n {\n public:\n-  CONSTEXPR svmatch_svnmatch_impl (int unspec) : m_unspec (unspec) {}\n+  constexpr svmatch_svnmatch_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -178,7 +178,7 @@ class svmatch_svnmatch_impl : public function_base\n class svmovl_lb_impl : public unspec_based_function_base\n {\n public:\n-  CONSTEXPR svmovl_lb_impl (int unspec_for_sint, int unspec_for_uint,\n+  constexpr svmovl_lb_impl (int unspec_for_sint, int unspec_for_uint,\n \t\t\t    int unspec_for_fp)\n     : unspec_based_function_base (unspec_for_sint, unspec_for_uint,\n \t\t\t\t  unspec_for_fp)\n@@ -238,7 +238,7 @@ class svqrdcmlah_lane_impl : public function_base\n class svqrshl_impl : public unspec_based_function\n {\n public:\n-  CONSTEXPR svqrshl_impl ()\n+  constexpr svqrshl_impl ()\n     : unspec_based_function (UNSPEC_SQRSHL, UNSPEC_UQRSHL, -1) {}\n \n   gimple *\n@@ -272,7 +272,7 @@ class svqrshl_impl : public unspec_based_function\n class svqshl_impl : public unspec_based_function\n {\n public:\n-  CONSTEXPR svqshl_impl ()\n+  constexpr svqshl_impl ()\n     : unspec_based_function (UNSPEC_SQSHL, UNSPEC_UQSHL, -1) {}\n \n   gimple *\n@@ -308,7 +308,7 @@ class svqshl_impl : public unspec_based_function\n class svrshl_impl : public unspec_based_function\n {\n public:\n-  CONSTEXPR svrshl_impl ()\n+  constexpr svrshl_impl ()\n     : unspec_based_function (UNSPEC_SRSHL, UNSPEC_URSHL, -1) {}\n \n   gimple *\n@@ -393,7 +393,7 @@ class svstnt1_scatter_impl : public full_width_access\n class svstnt1_scatter_truncate_impl : public truncating_store\n {\n public:\n-  CONSTEXPR svstnt1_scatter_truncate_impl (scalar_int_mode to_mode)\n+  constexpr svstnt1_scatter_truncate_impl (scalar_int_mode to_mode)\n     : truncating_store (to_mode) {}\n \n   rtx\n@@ -409,7 +409,7 @@ class svstnt1_scatter_truncate_impl : public truncating_store\n class svtbl2_impl : public quiet<multi_vector_function>\n {\n public:\n-  CONSTEXPR svtbl2_impl () : quiet<multi_vector_function> (2) {}\n+  constexpr svtbl2_impl () : quiet<multi_vector_function> (2) {}\n \n   rtx\n   expand (function_expander &e) const override\n@@ -437,7 +437,7 @@ class svuqadd_impl : public function_base\n class svwhilerw_svwhilewr_impl : public full_width_access\n {\n public:\n-  CONSTEXPR svwhilerw_svwhilewr_impl (int unspec) : m_unspec (unspec) {}\n+  constexpr svwhilerw_svwhilewr_impl (int unspec) : m_unspec (unspec) {}\n \n   rtx\n   expand (function_expander &e) const override"}, {"sha": "63b1358c13813b6e3ddc9bd0ea9b7b7ff74bcb75", "filename": "gcc/config/aarch64/aarch64-sve-builtins.cc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9482a5e4eac8d696129ec2854b331e1bb5dbab42/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9482a5e4eac8d696129ec2854b331e1bb5dbab42/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-sve-builtins.cc?ref=9482a5e4eac8d696129ec2854b331e1bb5dbab42", "patch": "@@ -99,7 +99,7 @@ struct registered_function_hasher : nofree_ptr_hash <registered_function>\n };\n \n /* Information about each single-predicate or single-vector type.  */\n-static CONSTEXPR const vector_type_info vector_types[] = {\n+static constexpr const vector_type_info vector_types[] = {\n #define DEF_SVE_TYPE(ACLE_NAME, NCHARS, ABI_NAME, SCALAR_TYPE) \\\n   { #ACLE_NAME, #ABI_NAME, \"u\" #NCHARS #ABI_NAME },\n #include \"aarch64-sve-builtins.def\"\n@@ -116,7 +116,7 @@ static const char *const pred_suffixes[NUM_PREDS + 1] = {\n };\n \n /* Static information about each mode_suffix_index.  */\n-CONSTEXPR const mode_suffix_info mode_suffixes[] = {\n+constexpr const mode_suffix_info mode_suffixes[] = {\n #define VECTOR_TYPE_none NUM_VECTOR_TYPES\n #define DEF_SVE_MODE(NAME, BASE, DISPLACEMENT, UNITS) \\\n   { \"_\" #NAME, VECTOR_TYPE_##BASE, VECTOR_TYPE_##DISPLACEMENT, UNITS_##UNITS },\n@@ -126,7 +126,7 @@ CONSTEXPR const mode_suffix_info mode_suffixes[] = {\n };\n \n /* Static information about each type_suffix_index.  */\n-CONSTEXPR const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n+constexpr const type_suffix_info type_suffixes[NUM_TYPE_SUFFIXES + 1] = {\n #define DEF_SVE_TYPE_SUFFIX(NAME, ACLE_TYPE, CLASS, BITS, MODE) \\\n   { \"_\" #NAME, \\\n     VECTOR_TYPE_##ACLE_TYPE, \\\n@@ -522,7 +522,7 @@ static const predication_index preds_z_or_none[] = {\n static const predication_index preds_z[] = { PRED_z, NUM_PREDS };\n \n /* A list of all SVE ACLE functions.  */\n-static CONSTEXPR const function_group_info function_groups[] = {\n+static constexpr const function_group_info function_groups[] = {\n #define DEF_SVE_FUNCTION(NAME, SHAPE, TYPES, PREDS) \\\n   { #NAME, &functions::NAME, &shapes::SHAPE, types_##TYPES, preds_##PREDS, \\\n     REQUIRED_EXTENSIONS | AARCH64_FL_SVE },"}]}