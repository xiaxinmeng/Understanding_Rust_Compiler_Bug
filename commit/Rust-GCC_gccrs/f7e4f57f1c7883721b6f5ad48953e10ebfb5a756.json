{"sha": "f7e4f57f1c7883721b6f5ad48953e10ebfb5a756", "node_id": "C_kwDOANBUbNoAKGY3ZTRmNTdmMWM3ODgzNzIxYjZmNWFkNDg5NTNlMTBlYmZiNWE3NTY", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-27T12:02:06Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2021-11-27T12:02:06Z"}, "message": "x86: Fix up x86_{,64_}sh{l,r}d patterns [PR103431]\n\nThe following testcase is miscompiled because the x86_{,64_}sh{l,r}d\npatterns don't properly describe what the instructions do.  One thing\nis left out, in particular that there is initial count &= 63 for\nsh{l,r}dq and initial count &= 31 for sh{l,r}d{l,w}.  And another thing\nnot described properly, in particular the behavior when count (after the\nmasking) is 0.  The pattern says it is e.g.\nres = (op0 << op2) | (op1 >> (64 - op2))\nbut that triggers UB on op1 >> 64.  For op2 0 we actually want\nres = (op0 << op2) | 0\nWhen constants are propagated to these patterns during RTL optimizations,\nboth such problems trigger wrong-code issues.\nThis patch represents the patterns as e.g.\nres = (op0 << (op2 & 63)) | (unsigned long long) ((uint128_t) op1 >> (64 - (op2 & 63)))\nso there is both the initial masking and op2 == 0 behavior results in\nzero being ored.\nThe patch introduces alternate patterns for constant op2 where\nsimplify-rtx.c will fold those expressions into simple numbers,\nand define_insn_and_split pre-reload splitter for how the patterns\nlooked before into the new form, so that it can pattern match during\ncombine even computations that assumed the shift amount will be in\nthe range of 1 .. bitsize-1.\n\n2021-11-27  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR middle-end/103431\n\t* config/i386/i386.md (x86_64_shld, x86_shld, x86_64_shrd, x86_shrd):\n\tChange insn pattern to accurately describe the instructions.\n\t(*x86_64_shld_1, *x86_shld_1, *x86_64_shrd_1, *x86_shrd_1): New\n\tdefine_insn patterns.\n\t(*x86_64_shld_2, *x86_shld_2, *x86_64_shrd_2, *x86_shrd_2): New\n\tdefine_insn_and_split patterns.\n\t(*ashl<dwi>3_doubleword_mask, *ashl<dwi>3_doubleword_mask_1,\n\t*<insn><dwi>3_doubleword_mask, *<insn><dwi>3_doubleword_mask_1,\n\tix86_rotl<dwi>3_doubleword, ix86_rotr<dwi>3_doubleword): Adjust\n\tsplitters for x86_{,64_}sh{l,r}d pattern changes.\n\n\t* gcc.dg/pr103431.c: New test.", "tree": {"sha": "34d27c49bc2a63cbe527e74f2a7ec20c16df1021", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/34d27c49bc2a63cbe527e74f2a7ec20c16df1021"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f7e4f57f1c7883721b6f5ad48953e10ebfb5a756", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e4f57f1c7883721b6f5ad48953e10ebfb5a756", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f7e4f57f1c7883721b6f5ad48953e10ebfb5a756", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f7e4f57f1c7883721b6f5ad48953e10ebfb5a756/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "567d5f3d62fba2a23a9e975f7e7c7b61bb67cf24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/567d5f3d62fba2a23a9e975f7e7c7b61bb67cf24", "html_url": "https://github.com/Rust-GCC/gccrs/commit/567d5f3d62fba2a23a9e975f7e7c7b61bb67cf24"}], "stats": {"total": 323, "additions": 281, "deletions": 42}, "files": [{"sha": "24368c73edca8554b1fd57398f11e232938c6999", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 260, "deletions": 42, "changes": 302, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4f57f1c7883721b6f5ad48953e10ebfb5a756/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4f57f1c7883721b6f5ad48953e10ebfb5a756/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=f7e4f57f1c7883721b6f5ad48953e10ebfb5a756", "patch": "@@ -11301,9 +11301,12 @@\n   \"&& 1\"\n   [(parallel\n      [(set (match_dup 6)\n-\t   (ior:DWIH (ashift:DWIH (match_dup 6) (match_dup 2))\n-\t\t     (lshiftrt:DWIH (match_dup 5)\n-\t\t       (minus:QI (match_dup 8) (match_dup 2)))))\n+\t   (ior:DWIH (ashift:DWIH (match_dup 6)\n+\t\t       (and:QI (match_dup 2) (match_dup 8)))\n+\t\t     (subreg:DWIH\n+\t\t       (lshiftrt:<DWI> (zero_extend:<DWI> (match_dup 5))\n+\t\t\t (minus:QI (match_dup 9)\n+\t\t\t\t   (and:QI (match_dup 2) (match_dup 8)))) 0)))\n       (clobber (reg:CC FLAGS_REG))])\n    (parallel\n      [(set (match_dup 4)\n@@ -11312,7 +11315,8 @@\n {\n   split_double_mode (<DWI>mode, &operands[0], 2, &operands[4], &operands[6]);\n \n-  operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n+  operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT - 1);\n+  operands[9] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n \n   if ((INTVAL (operands[3]) & ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n       != ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n@@ -11342,9 +11346,12 @@\n   \"&& 1\"\n   [(parallel\n      [(set (match_dup 6)\n-\t   (ior:DWIH (ashift:DWIH (match_dup 6) (match_dup 2))\n-\t\t     (lshiftrt:DWIH (match_dup 5)\n-\t\t       (minus:QI (match_dup 8) (match_dup 2)))))\n+\t   (ior:DWIH (ashift:DWIH (match_dup 6)\n+\t\t       (and:QI (match_dup 2) (match_dup 8)))\n+\t\t     (subreg:DWIH\n+\t\t       (lshiftrt:<DWI> (zero_extend:<DWI> (match_dup 5))\n+\t\t\t (minus:QI (match_dup 9)\n+\t\t\t\t   (and:QI (match_dup 2) (match_dup 8)))) 0)))\n       (clobber (reg:CC FLAGS_REG))])\n    (parallel\n      [(set (match_dup 4)\n@@ -11353,7 +11360,8 @@\n {\n   split_double_mode (<DWI>mode, &operands[0], 2, &operands[4], &operands[6]);\n \n-  operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n+  operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT - 1);\n+  operands[9] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n \n   if ((INTVAL (operands[3]) & ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n       != ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n@@ -11404,9 +11412,14 @@\n (define_insn \"x86_64_shld\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:DI (ashift:DI (match_dup 0)\n-\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"Jc\"))\n-\t\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t  (minus:QI (const_int 64) (match_dup 2)))))\n+\t\t  (and:QI (match_operand:QI 2 \"nonmemory_operand\" \"Jc\")\n+\t\t\t  (const_int 63)))\n+\t\t(subreg:DI\n+\t\t  (lshiftrt:TI\n+\t\t    (zero_extend:TI\n+\t\t      (match_operand:DI 1 \"register_operand\" \"r\"))\n+\t\t    (minus:QI (const_int 64)\n+\t\t\t      (and:QI (match_dup 2) (const_int 63)))) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n   \"shld{q}\\t{%s2%1, %0|%0, %1, %2}\"\n@@ -11417,12 +11430,58 @@\n    (set_attr \"amdfam10_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n \n+(define_insn \"*x86_64_shld_1\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m\")\n+        (ior:DI (ashift:DI (match_dup 0)\n+\t\t\t   (match_operand:QI 2 \"const_0_to_63_operand\" \"J\"))\n+\t\t(subreg:DI\n+\t\t  (lshiftrt:TI\n+\t\t    (zero_extend:TI\n+\t\t      (match_operand:DI 1 \"register_operand\" \"r\"))\n+\t\t    (match_operand:QI 3 \"const_0_to_255_operand\" \"N\")) 0)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\n+   && INTVAL (operands[3]) == 64 - INTVAL (operands[2])\"\n+  \"shld{q}\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"DI\")\n+   (set_attr \"athlon_decode\" \"vector\")\n+   (set_attr \"amdfam10_decode\" \"vector\")\n+   (set_attr \"bdver1_decode\" \"vector\")])\n+\n+(define_insn_and_split \"*x86_64_shld_2\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n+\t(ior:DI (ashift:DI (match_dup 0)\n+\t\t\t   (match_operand:QI 2 \"nonmemory_operand\"))\n+\t\t(lshiftrt:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t     (minus:QI (const_int 64) (match_dup 2)))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:DI (ashift:DI (match_dup 0)\n+\t\t\t\t      (and:QI (match_dup 2) (const_int 63)))\n+\t\t\t   (subreg:DI\n+\t\t\t     (lshiftrt:TI\n+\t\t\t       (zero_extend:TI (match_dup 1))\n+\t\t\t\t (minus:QI (const_int 64)\n+\t\t\t\t\t   (and:QI (match_dup 2)\n+\t\t\t\t\t\t   (const_int 63)))) 0)))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n+\n (define_insn \"x86_shld\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:SI (ashift:SI (match_dup 0)\n-\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"Ic\"))\n-\t\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t  (minus:QI (const_int 32) (match_dup 2)))))\n+\t\t  (and:QI (match_operand:QI 2 \"nonmemory_operand\" \"Ic\")\n+\t\t\t  (const_int 31)))\n+\t\t(subreg:SI\n+\t\t  (lshiftrt:DI\n+\t\t    (zero_extend:DI\n+\t\t      (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t    (minus:QI (const_int 32)\n+\t\t\t      (and:QI (match_dup 2) (const_int 31)))) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"shld{l}\\t{%s2%1, %0|%0, %1, %2}\"\n@@ -11434,6 +11493,47 @@\n    (set_attr \"amdfam10_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n \n+(define_insn \"*x86_shld_1\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+r*m\")\n+        (ior:SI (ashift:SI (match_dup 0)\n+\t\t\t   (match_operand:QI 2 \"const_0_to_31_operand\" \"I\"))\n+\t\t(subreg:SI\n+\t\t  (lshiftrt:DI\n+\t\t    (zero_extend:DI\n+\t\t      (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t    (match_operand:QI 3 \"const_0_to_63_operand\" \"J\")) 0)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"INTVAL (operands[3]) == 32 - INTVAL (operands[2])\"\n+  \"shld{l}\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"SI\")\n+   (set_attr \"pent_pair\" \"np\")\n+   (set_attr \"athlon_decode\" \"vector\")\n+   (set_attr \"amdfam10_decode\" \"vector\")\n+   (set_attr \"bdver1_decode\" \"vector\")])\n+\n+(define_insn_and_split \"*x86_shld_2\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\")\n+\t(ior:SI (ashift:SI (match_dup 0)\n+\t\t\t   (match_operand:QI 2 \"nonmemory_operand\"))\n+\t\t(lshiftrt:SI (match_operand:SI 1 \"register_operand\")\n+\t\t\t     (minus:QI (const_int 32) (match_dup 2)))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:SI (ashift:SI (match_dup 0)\n+\t\t\t\t      (and:QI (match_dup 2) (const_int 31)))\n+\t\t\t   (subreg:SI\n+\t\t\t     (lshiftrt:DI\n+\t\t\t       (zero_extend:DI (match_dup 1))\n+\t\t\t\t (minus:QI (const_int 32)\n+\t\t\t\t\t   (and:QI (match_dup 2)\n+\t\t\t\t\t\t   (const_int 31)))) 0)))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n+\n (define_expand \"@x86_shift<mode>_adj_1\"\n   [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ (and:QI (match_operand:QI 2 \"register_operand\")\n@@ -12080,9 +12180,12 @@\n   \"&& 1\"\n   [(parallel\n      [(set (match_dup 4)\n-\t   (ior:DWIH (lshiftrt:DWIH (match_dup 4) (match_dup 2))\n-\t\t     (ashift:DWIH (match_dup 7)\n-\t\t       (minus:QI (match_dup 8) (match_dup 2)))))\n+\t   (ior:DWIH (lshiftrt:DWIH (match_dup 4)\n+\t\t       (and:QI (match_dup 2) (match_dup 8)))\n+\t\t     (subreg:DWIH\n+\t\t       (ashift:<DWI> (zero_extend:<DWI> (match_dup 7))\n+\t\t\t (minus:QI (match_dup 9)\n+\t\t\t\t   (and:QI (match_dup 2) (match_dup 8)))) 0)))\n       (clobber (reg:CC FLAGS_REG))])\n    (parallel\n      [(set (match_dup 6)\n@@ -12091,7 +12194,8 @@\n {\n   split_double_mode (<DWI>mode, &operands[0], 2, &operands[4], &operands[6]);\n \n-  operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n+  operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT - 1);\n+  operands[9] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n \n   if ((INTVAL (operands[3]) & ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n       != ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n@@ -12121,9 +12225,12 @@\n   \"&& 1\"\n   [(parallel\n      [(set (match_dup 4)\n-\t   (ior:DWIH (lshiftrt:DWIH (match_dup 4) (match_dup 2))\n-\t\t     (ashift:DWIH (match_dup 7)\n-\t\t       (minus:QI (match_dup 8) (match_dup 2)))))\n+\t   (ior:DWIH (lshiftrt:DWIH (match_dup 4)\n+\t\t       (and:QI (match_dup 2) (match_dup 8)))\n+\t\t     (subreg:DWIH\n+\t\t       (ashift:<DWI> (zero_extend:<DWI> (match_dup 7))\n+\t\t\t (minus:QI (match_dup 9)\n+\t\t\t\t   (and:QI (match_dup 2) (match_dup 8)))) 0)))\n       (clobber (reg:CC FLAGS_REG))])\n    (parallel\n      [(set (match_dup 6)\n@@ -12132,7 +12239,8 @@\n {\n   split_double_mode (<DWI>mode, &operands[0], 2, &operands[4], &operands[6]);\n \n-  operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n+  operands[8] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT - 1);\n+  operands[9] = GEN_INT (<MODE_SIZE> * BITS_PER_UNIT);\n \n   if ((INTVAL (operands[3]) & ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n       != ((<MODE_SIZE> * BITS_PER_UNIT) - 1))\n@@ -12177,9 +12285,14 @@\n (define_insn \"x86_64_shrd\"\n   [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:DI (lshiftrt:DI (match_dup 0)\n-\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"Jc\"))\n-\t\t(ashift:DI (match_operand:DI 1 \"register_operand\" \"r\")\n-\t\t  (minus:QI (const_int 64) (match_dup 2)))))\n+\t\t  (and:QI (match_operand:QI 2 \"nonmemory_operand\" \"Jc\")\n+\t\t\t  (const_int 63)))\n+\t\t(subreg:DI\n+\t\t  (ashift:TI\n+\t\t    (zero_extend:TI\n+\t\t      (match_operand:DI 1 \"register_operand\" \"r\"))\n+\t\t    (minus:QI (const_int 64)\n+\t\t\t      (and:QI (match_dup 2) (const_int 63)))) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"TARGET_64BIT\"\n   \"shrd{q}\\t{%s2%1, %0|%0, %1, %2}\"\n@@ -12190,12 +12303,58 @@\n    (set_attr \"amdfam10_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n \n+(define_insn \"*x86_64_shrd_1\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\" \"+r*m\")\n+        (ior:DI (lshiftrt:DI (match_dup 0)\n+\t\t\t     (match_operand:QI 2 \"const_0_to_63_operand\" \"J\"))\n+\t\t(subreg:DI\n+\t\t  (ashift:TI\n+\t\t    (zero_extend:TI\n+\t\t      (match_operand:DI 1 \"register_operand\" \"r\"))\n+\t\t    (match_operand:QI 3 \"const_0_to_255_operand\" \"N\")) 0)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT\n+   && INTVAL (operands[3]) == 64 - INTVAL (operands[2])\"\n+  \"shrd{q}\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"DI\")\n+   (set_attr \"athlon_decode\" \"vector\")\n+   (set_attr \"amdfam10_decode\" \"vector\")\n+   (set_attr \"bdver1_decode\" \"vector\")])\n+\n+(define_insn_and_split \"*x86_64_shrd_2\"\n+  [(set (match_operand:DI 0 \"nonimmediate_operand\")\n+\t(ior:DI (lshiftrt:DI (match_dup 0)\n+\t\t\t     (match_operand:QI 2 \"nonmemory_operand\"))\n+\t\t(ashift:DI (match_operand:DI 1 \"register_operand\")\n+\t\t\t   (minus:QI (const_int 64) (match_dup 2)))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:DI (lshiftrt:DI (match_dup 0)\n+\t\t\t\t\t(and:QI (match_dup 2) (const_int 63)))\n+\t\t\t   (subreg:DI\n+\t\t\t     (ashift:TI\n+\t\t\t       (zero_extend:TI (match_dup 1))\n+\t\t\t\t (minus:QI (const_int 64)\n+\t\t\t\t\t   (and:QI (match_dup 2)\n+\t\t\t\t\t\t   (const_int 63)))) 0)))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n+\n (define_insn \"x86_shrd\"\n   [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+r*m\")\n         (ior:SI (lshiftrt:SI (match_dup 0)\n-\t\t  (match_operand:QI 2 \"nonmemory_operand\" \"Ic\"))\n-\t\t(ashift:SI (match_operand:SI 1 \"register_operand\" \"r\")\n-\t\t  (minus:QI (const_int 32) (match_dup 2)))))\n+\t\t  (and:QI (match_operand:QI 2 \"nonmemory_operand\" \"Ic\")\n+\t\t\t  (const_int 31)))\n+\t\t(subreg:SI\n+\t\t  (ashift:DI\n+\t\t    (zero_extend:DI\n+\t\t      (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t    (minus:QI (const_int 32)\n+\t\t\t      (and:QI (match_dup 2) (const_int 31)))) 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n   \"shrd{l}\\t{%s2%1, %0|%0, %1, %2}\"\n@@ -12207,6 +12366,47 @@\n    (set_attr \"amdfam10_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n \n+(define_insn \"*x86_shrd_1\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\" \"+r*m\")\n+        (ior:SI (lshiftrt:SI (match_dup 0)\n+\t\t\t     (match_operand:QI 2 \"const_0_to_31_operand\" \"I\"))\n+\t\t(subreg:SI\n+\t\t  (ashift:DI\n+\t\t    (zero_extend:DI\n+\t\t      (match_operand:SI 1 \"register_operand\" \"r\"))\n+\t\t    (match_operand:QI 3 \"const_0_to_63_operand\" \"J\")) 0)))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"INTVAL (operands[3]) == 32 - INTVAL (operands[2])\"\n+  \"shrd{l}\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"type\" \"ishift\")\n+   (set_attr \"prefix_0f\" \"1\")\n+   (set_attr \"mode\" \"SI\")\n+   (set_attr \"pent_pair\" \"np\")\n+   (set_attr \"athlon_decode\" \"vector\")\n+   (set_attr \"amdfam10_decode\" \"vector\")\n+   (set_attr \"bdver1_decode\" \"vector\")])\n+\n+(define_insn_and_split \"*x86_shrd_2\"\n+  [(set (match_operand:SI 0 \"nonimmediate_operand\")\n+\t(ior:SI (lshiftrt:SI (match_dup 0)\n+\t\t\t     (match_operand:QI 2 \"nonmemory_operand\"))\n+\t\t(ashift:SI (match_operand:SI 1 \"register_operand\")\n+\t\t\t   (minus:QI (const_int 32) (match_dup 2)))))\n+   (clobber (reg:CC FLAGS_REG))]\n+  \"TARGET_64BIT && ix86_pre_reload_split ()\"\n+  \"#\"\n+  \"&& 1\"\n+  [(parallel [(set (match_dup 0)\n+\t\t   (ior:SI (lshiftrt:SI (match_dup 0)\n+\t\t\t\t\t(and:QI (match_dup 2) (const_int 31)))\n+\t\t\t   (subreg:SI\n+\t\t\t     (ashift:DI\n+\t\t\t       (zero_extend:DI (match_dup 1))\n+\t\t\t\t (minus:QI (const_int 32)\n+\t\t\t\t\t   (and:QI (match_dup 2)\n+\t\t\t\t\t\t   (const_int 31)))) 0)))\n+\t      (clobber (reg:CC FLAGS_REG))])])\n+\n ;; Base name for insn mnemonic.\n (define_mode_attr cvt_mnemonic\n   [(SI \"{cltd|cdq}\") (DI \"{cqto|cqo}\")])\n@@ -12784,18 +12984,27 @@\n  [(set (match_dup 3) (match_dup 4))\n   (parallel\n    [(set (match_dup 4)\n-\t (ior:DWIH (ashift:DWIH (match_dup 4) (match_dup 2))\n-\t\t   (lshiftrt:DWIH (match_dup 5)\n-\t\t\t\t  (minus:QI (match_dup 6) (match_dup 2)))))\n+\t (ior:DWIH (ashift:DWIH (match_dup 4)\n+\t\t\t\t(and:QI (match_dup 2) (match_dup 6)))\n+\t\t   (subreg:DWIH\n+\t\t     (lshiftrt:<DWI> (zero_extend:<DWI> (match_dup 5))\n+\t\t\t\t     (minus:QI (match_dup 7)\n+\t\t\t\t\t       (and:QI (match_dup 2)\n+\t\t\t\t\t\t       (match_dup 6)))) 0)))\n     (clobber (reg:CC FLAGS_REG))])\n   (parallel\n    [(set (match_dup 5)\n-\t (ior:DWIH (ashift:DWIH (match_dup 5) (match_dup 2))\n-\t\t   (lshiftrt:DWIH (match_dup 3)\n-\t\t\t\t  (minus:QI (match_dup 6) (match_dup 2)))))\n+\t (ior:DWIH (ashift:DWIH (match_dup 5)\n+\t\t\t\t(and:QI (match_dup 2) (match_dup 6)))\n+\t\t   (subreg:DWIH\n+\t\t     (lshiftrt:<DWI> (zero_extend:<DWI> (match_dup 3))\n+\t\t\t\t     (minus:QI (match_dup 7)\n+\t\t\t\t\t       (and:QI (match_dup 2)\n+\t\t\t\t\t\t       (match_dup 6)))) 0)))\n     (clobber (reg:CC FLAGS_REG))])]\n {\n-  operands[6] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));\n+  operands[6] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - 1);\n+  operands[7] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));\n \n   split_double_mode (<DWI>mode, &operands[0], 1, &operands[4], &operands[5]);\n })\n@@ -12812,18 +13021,27 @@\n  [(set (match_dup 3) (match_dup 4))\n   (parallel\n    [(set (match_dup 4)\n-\t (ior:DWIH (lshiftrt:DWIH (match_dup 4) (match_dup 2))\n-\t\t   (ashift:DWIH (match_dup 5)\n-\t\t\t\t(minus:QI (match_dup 6) (match_dup 2)))))\n+\t (ior:DWIH (lshiftrt:DWIH (match_dup 4)\n+\t\t\t\t  (and:QI (match_dup 2) (match_dup 6)))\n+\t\t   (subreg:DWIH\n+\t\t     (ashift:<DWI> (zero_extend:<DWI> (match_dup 5))\n+\t\t\t\t   (minus:QI (match_dup 7)\n+\t\t\t\t\t     (and:QI (match_dup 2)\n+\t\t\t\t\t\t     (match_dup 6)))) 0)))\n     (clobber (reg:CC FLAGS_REG))])\n   (parallel\n    [(set (match_dup 5)\n-\t (ior:DWIH (lshiftrt:DWIH (match_dup 5) (match_dup 2))\n-\t\t   (ashift:DWIH (match_dup 3)\n-\t\t\t\t(minus:QI (match_dup 6) (match_dup 2)))))\n+\t (ior:DWIH (lshiftrt:DWIH (match_dup 5)\n+\t\t\t\t  (and:QI (match_dup 2) (match_dup 6)))\n+\t\t   (subreg:DWIH\n+\t\t     (ashift:<DWI> (zero_extend:<DWI> (match_dup 3))\n+\t\t\t\t   (minus:QI (match_dup 7)\n+\t\t\t\t\t     (and:QI (match_dup 2)\n+\t\t\t\t\t\t     (match_dup 6)))) 0)))\n     (clobber (reg:CC FLAGS_REG))])]\n {\n-  operands[6] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));\n+  operands[6] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode) - 1);\n+  operands[7] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));\n \n   split_double_mode (<DWI>mode, &operands[0], 1, &operands[4], &operands[5]);\n })"}, {"sha": "09f224a3903758f940eae5789937df754d2e15d9", "filename": "gcc/testsuite/gcc.dg/pr103431.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f7e4f57f1c7883721b6f5ad48953e10ebfb5a756/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103431.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f7e4f57f1c7883721b6f5ad48953e10ebfb5a756/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103431.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr103431.c?ref=f7e4f57f1c7883721b6f5ad48953e10ebfb5a756", "patch": "@@ -0,0 +1,21 @@\n+/* PR middle-end/103431 */\n+/* { dg-do run { target int128 } } */\n+/* { dg-options \"-O -fno-tree-bit-ccp -fno-tree-dominator-opts\" } */\n+\n+__attribute__((noipa))\n+void foo (unsigned short a)\n+{\n+  __uint128_t b = 5;\n+  int size = __SIZEOF_INT128__ * __CHAR_BIT__ - 1;\n+  a /= 0xfffffffd;\n+  __uint128_t c = (b << (a & size) | b >> (-(a & size) & size));\n+  if (c != 5)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  foo (0);\n+  return 0;\n+}"}]}