{"sha": "ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E3NTU4ZmNjNmZlMWNjZmNiYzkxYzFmMjAxN2I2NzA2ZWFlNGNmMw==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-03-03T14:07:39Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-03-03T14:07:39Z"}, "message": "attribs.c (init_attributes, [...]): Use ARRAY_SIZE in lieu of explicit sizeof/sizeof.\n\n\t* attribs.c (init_attributes, decl_attributes): Use ARRAY_SIZE in\n\tlieu of explicit sizeof/sizeof.\n\t* i386.c (override_options, ix86_init_mmx_sse_builtins,\n\tix86_expand_builtin): Likewise.\n\t* mips.c (mips_add_gc_roots): Likewise.\n\t* mmix.c (mmix_output_condition): Likewise.\n\t* rs6000.c (rs6000_override_options, altivec_expand_builtin,\n\taltivec_init_builtins): Likewise.\n\t* sparc.c (mark_ultrasparc_pipeline_state): Likewise.\n\t* cppexp.c (Nsuff, parse_number): Likewise.\n\t* cppinit.c (builtin_array_end): Likewise.\n\t* gcc.c (n_default_compilers, process_command): Likewise.\n\t* genpreds.c (output_predicate_decls): Likewise.\n\t* ggc-page.c (NUM_EXTRA_ORDERS): Likewise.\n\t* lcm.c (N_ENTITIES): Likewise.\n\t* stor-layout.c (set_sizetype): Likewise.\n\nada:\n\t* utils.c (init_gnat_to_gnu, init_gigi_decls): Use ARRAY_SIZE in\n\tlieu of explicit sizeof/sizeof.\n\ncp:\n\t* decl.c (cxx_init_decl_processing): Use ARRAY_SIZE in lieu of\n\texplicit sizeof/sizeof.\n\t* decl2.c (cxx_decode_option): Likewise.\n\t* lex.c (init_reswords, REDUCE_LENGTH, TOKEN_LENGTH): Likewise.\n\njava:\n\t* class.c (init_class_processing): Use ARRAY_SIZE in lieu of\n\texplicit sizeof/sizeof.\n\t* decl.c (java_init_decl_processing): Likewise.\n\t* jcf-parse.c (init_jcf_parse): Likewise.\n\t* parse.y (init_src_parse): Likewise.\n\nFrom-SVN: r50255", "tree": {"sha": "22fa38b6c76c86b74f079f044047e56332102862", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/22fa38b6c76c86b74f079f044047e56332102862"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/comments", "author": null, "committer": null, "parents": [{"sha": "de2467532d9ac55ed1c208f5934d2273a544c35d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de2467532d9ac55ed1c208f5934d2273a544c35d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de2467532d9ac55ed1c208f5934d2273a544c35d"}], "stats": {"total": 174, "additions": 94, "deletions": 80}, "files": [{"sha": "f2de82d35e0a5e29f2a4a6635fe1c91785223304", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -1,3 +1,22 @@\n+2002-03-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* attribs.c (init_attributes, decl_attributes): Use ARRAY_SIZE in\n+\tlieu of explicit sizeof/sizeof.\n+\t* i386.c (override_options, ix86_init_mmx_sse_builtins,\n+\tix86_expand_builtin): Likewise.\n+\t* mips.c (mips_add_gc_roots): Likewise.\n+\t* mmix.c (mmix_output_condition): Likewise.\n+\t* rs6000.c (rs6000_override_options, altivec_expand_builtin,\n+\taltivec_init_builtins): Likewise.\n+\t* sparc.c (mark_ultrasparc_pipeline_state): Likewise.\n+\t* cppexp.c (Nsuff, parse_number): Likewise.\n+\t* cppinit.c (builtin_array_end): Likewise.\n+\t* gcc.c (n_default_compilers, process_command): Likewise.\n+\t* genpreds.c (output_predicate_decls): Likewise.\n+\t* ggc-page.c (NUM_EXTRA_ORDERS): Likewise.\n+\t* lcm.c (N_ENTITIES): Likewise.\n+\t* stor-layout.c (set_sizetype): Likewise.\n+\t\n 2002-03-03  Richard Henderson  <rth@redhat.com>\n \n \t* toplev.c (rest_of_decl_compilation): Do not invoke make_decl_rtl"}, {"sha": "2c9d3fd77ec6306dd5d30c1f429c268387472b22", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -1,3 +1,8 @@\n+2002-03-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* utils.c (init_gnat_to_gnu, init_gigi_decls): Use ARRAY_SIZE in\n+\tlieu of explicit sizeof/sizeof.\n+\n 2002-02-28  Neil Booth  <neil@daikokuya.demon.co.uk>\n \n \t* misc.c (copy_lang_decl): Remove."}, {"sha": "224f43150aa193b6a985e09494b8ec64f1f553df", "filename": "gcc/ada/utils.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fada%2Futils.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fada%2Futils.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Futils.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *                            $Revision: 1.7 $\n+ *                            $Revision: 1.8 $\n  *                                                                          *\n  *          Copyright (C) 1992-2001, Free Software Foundation, Inc.         *\n  *                                                                          *\n@@ -165,7 +165,7 @@ init_gnat_to_gnu ()\n   ggc_add_tree_root (&signed_and_unsigned_types[0][0],\n \t\t     (sizeof signed_and_unsigned_types\n \t\t      / sizeof signed_and_unsigned_types[0][0]));\n-  ggc_add_tree_root (float_types, sizeof float_types / sizeof float_types[0]);\n+  ggc_add_tree_root (float_types, ARRAY_SIZE (float_types));\n \n   ggc_add_root (&current_binding_level, 1, sizeof current_binding_level,\n \t\tmark_binding_level);\n@@ -692,8 +692,7 @@ init_gigi_decls (long_long_float_type, exception_type)\n   DECL_BUILT_IN_CLASS (setjmp_decl) = BUILT_IN_NORMAL;\n   DECL_FUNCTION_CODE (setjmp_decl) = BUILT_IN_SETJMP;\n \n-  ggc_add_tree_root (gnat_std_decls,\n-\t\t     sizeof gnat_std_decls / sizeof gnat_std_decls[0]);\n+  ggc_add_tree_root (gnat_std_decls, ARRAY_SIZE (gnat_std_decls));\n }\n \f\n /* This routine is called in tree.c to print an error message for invalid use"}, {"sha": "c1536f699a3ac7dc57090f4f3fef8ca73ef341e8", "filename": "gcc/attribs.c", "status": "modified", "additions": 7, "deletions": 19, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -177,7 +177,7 @@ static void\n init_attributes ()\n {\n #ifdef ENABLE_CHECKING\n-  int i;\n+  size_t i;\n #endif\n \n   attribute_tables[0]\n@@ -188,9 +188,7 @@ init_attributes ()\n \n #ifdef ENABLE_CHECKING\n   /* Make some sanity checks on the attribute tables.  */\n-  for (i = 0;\n-       i < (int) (sizeof (attribute_tables) / sizeof (attribute_tables[0]));\n-       i++)\n+  for (i = 0; i < ARRAY_SIZE (attribute_tables); i++)\n     {\n       int j;\n \n@@ -222,9 +220,7 @@ init_attributes ()\n     }\n \n   /* Check that each name occurs just once in each table.  */\n-  for (i = 0;\n-       i < (int) (sizeof (attribute_tables) / sizeof (attribute_tables[0]));\n-       i++)\n+  for (i = 0; i < ARRAY_SIZE (attribute_tables); i++)\n     {\n       int j, k;\n       for (j = 0; attribute_tables[i][j].name != NULL; j++)\n@@ -234,16 +230,11 @@ init_attributes ()\n \t    abort ();\n     }\n   /* Check that no name occurs in more than one table.  */\n-  for (i = 0;\n-       i < (int) (sizeof (attribute_tables) / sizeof (attribute_tables[0]));\n-       i++)\n+  for (i = 0; i < ARRAY_SIZE (attribute_tables); i++)\n     {\n-      int j, k, l;\n+      size_t j, k, l;\n \n-      for (j = i + 1;\n-\t   j < ((int) (sizeof (attribute_tables)\n-\t\t       / sizeof (attribute_tables[0])));\n-\t   j++)\n+      for (j = i + 1; j < ARRAY_SIZE (attribute_tables); j++)\n \tfor (k = 0; attribute_tables[i][k].name != NULL; k++)\n \t  for (l = 0; attribute_tables[j][l].name != NULL; l++)\n \t    if (!strcmp (attribute_tables[i][k].name,\n@@ -294,10 +285,7 @@ decl_attributes (node, attributes, flags)\n       bool no_add_attrs = 0;\n       int i;\n \n-      for (i = 0;\n-\t   i < ((int) (sizeof (attribute_tables)\n-\t\t       / sizeof (attribute_tables[0])));\n-\t   i++)\n+      for (i = 0; i < ARRAY_SIZE (attribute_tables); i++)\n \t{\n \t  int j;\n "}, {"sha": "2f7bb73a64b8e6652c39efe2034fe9b9bea34585", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -903,7 +903,7 @@ override_options ()\n \t\t\t\t      | PTA_3DNOW_A | PTA_SSE},\n     };\n \n-  int const pta_size = sizeof (processor_alias_table) / sizeof (struct pta);\n+  int const pta_size = ARRAY_SIZE (processor_alias_table);\n \n #ifdef SUBTARGET_OVERRIDE_OPTIONS\n   SUBTARGET_OVERRIDE_OPTIONS;\n@@ -11181,7 +11181,7 @@ ix86_init_mmx_sse_builtins ()\n \n   /* Add all builtins that are more or less simple operations on two\n      operands.  */\n-  for (i = 0, d = bdesc_2arg; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)\n+  for (i = 0, d = bdesc_2arg; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n     {\n       /* Use one of the operands; the target can have a different mode for\n \t mask-generating compares.  */\n@@ -11244,7 +11244,7 @@ ix86_init_mmx_sse_builtins ()\n   def_builtin (MASK_MMX, \"__builtin_ia32_pmaddwd\", v2si_ftype_v4hi_v4hi, IX86_BUILTIN_PMADDWD);\n \n   /* comi/ucomi insns.  */\n-  for (i = 0, d = bdesc_comi; i < sizeof (bdesc_comi) / sizeof *d; i++, d++)\n+  for (i = 0, d = bdesc_comi; i < ARRAY_SIZE (bdesc_comi); i++, d++)\n     def_builtin (d->mask, d->name, int_ftype_v4sf_v4sf, d->code);\n \n   def_builtin (MASK_MMX, \"__builtin_ia32_packsswb\", v8qi_ftype_v4hi_v4hi, IX86_BUILTIN_PACKSSWB);\n@@ -12025,7 +12025,7 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n       break;\n     }\n \n-  for (i = 0, d = bdesc_2arg; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)\n+  for (i = 0, d = bdesc_2arg; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n     if (d->code == fcode)\n       {\n \t/* Compares are treated specially.  */\n@@ -12038,11 +12038,11 @@ ix86_expand_builtin (exp, target, subtarget, mode, ignore)\n \treturn ix86_expand_binop_builtin (d->icode, arglist, target);\n       }\n \n-  for (i = 0, d = bdesc_1arg; i < sizeof (bdesc_1arg) / sizeof *d; i++, d++)\n+  for (i = 0, d = bdesc_1arg; i < ARRAY_SIZE (bdesc_1arg); i++, d++)\n     if (d->code == fcode)\n       return ix86_expand_unop_builtin (d->icode, arglist, target, 0);\n \n-  for (i = 0, d = bdesc_comi; i < sizeof (bdesc_comi) / sizeof *d; i++, d++)\n+  for (i = 0, d = bdesc_comi; i < ARRAY_SIZE (bdesc_comi); i++, d++)\n     if (d->code == fcode)\n       return ix86_expand_sse_comi (d, arglist, target);\n "}, {"sha": "ea1a41de3043c55076d83464c23cfa03ee328ec1", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -9847,7 +9847,7 @@ mips_add_gc_roots ()\n   ggc_add_rtx_root (&mips_load_reg2, 1);\n   ggc_add_rtx_root (&mips_load_reg3, 1);\n   ggc_add_rtx_root (&mips_load_reg4, 1);\n-  ggc_add_rtx_root (branch_cmp, sizeof (branch_cmp) / sizeof (rtx));\n+  ggc_add_rtx_root (branch_cmp, ARRAY_SIZE (branch_cmp));\n   ggc_add_rtx_root (&embedded_pic_fnaddr_rtx, 1);\n   ggc_add_rtx_root (&mips16_gp_pseudo_rtx, 1);\n }"}, {"sha": "b1f7d3f0b7b65bb126d18e6a5d889bcf2a3dd6d8", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -3087,13 +3087,13 @@ mmix_output_condition (stream, x, reversed)\n        {CCmode, cc_signed_convs},\n        {DImode, cc_di_convs}};\n \n-  unsigned int i;\n+  size_t i;\n   int j;\n \n   enum machine_mode mode = GET_MODE (XEXP (x, 0));\n   RTX_CODE cc = GET_CODE (x);\n \n-  for (i = 0; i < sizeof (cc_convs)/sizeof(*cc_convs); i++)\n+  for (i = 0; i < ARRAY_SIZE (cc_convs); i++)\n     {\n       if (mode == cc_convs[i].cc_mode)\n \t{"}, {"sha": "b180577ba9fb33792eb251fac5289fe48c30cc01", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -410,7 +410,7 @@ rs6000_override_options (default_cpu)\n \t    MASK_POWERPC | MASK_SOFT_FLOAT | MASK_NEW_MNEMONICS,\n \t    POWER_MASKS | POWERPC_OPT_MASKS | MASK_POWERPC64}};\n \n-  size_t ptt_size = sizeof (processor_target_table) / sizeof (struct ptt);\n+  const size_t ptt_size = ARRAY_SIZE (processor_target_table);\n \n   /* Save current -mmultiple/-mno-multiple status.  */\n   int multiple = TARGET_MULTIPLE;\n@@ -4018,7 +4018,7 @@ altivec_expand_builtin (exp, target)\n \n   /* Handle DST variants.  */\n   d = (struct builtin_description *) bdesc_dst;\n-  for (i = 0; i < sizeof (bdesc_dst) / sizeof *d; i++, d++)\n+  for (i = 0; i < ARRAY_SIZE (bdesc_dst); i++, d++)\n     if (d->code == fcode)\n       {\n \targ0 = TREE_VALUE (arglist);\n@@ -4057,25 +4057,25 @@ altivec_expand_builtin (exp, target)\n \n   /* Expand abs* operations.  */\n   d = (struct builtin_description *) bdesc_abs;\n-  for (i = 0; i < sizeof (bdesc_abs) / sizeof *d; i++, d++)\n+  for (i = 0; i < ARRAY_SIZE (bdesc_abs); i++, d++)\n     if (d->code == fcode)\n       return altivec_expand_abs_builtin (d->icode, arglist, target);\n \n   /* Handle simple unary operations.  */\n   d = (struct builtin_description *) bdesc_1arg;\n-  for (i = 0; i < sizeof (bdesc_1arg) / sizeof *d; i++, d++)\n+  for (i = 0; i < ARRAY_SIZE (bdesc_1arg); i++, d++)\n     if (d->code == fcode)\n       return altivec_expand_unop_builtin (d->icode, arglist, target);\n \n   /* Handle simple binary operations.  */\n   d = (struct builtin_description *) bdesc_2arg;\n-  for (i = 0; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)\n+  for (i = 0; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n     if (d->code == fcode)\n       return altivec_expand_binop_builtin (d->icode, arglist, target);\n \n   /* Expand the AltiVec predicates.  */\n   dp = (struct builtin_description_predicates *) bdesc_altivec_preds;\n-  for (i = 0; i < sizeof (bdesc_altivec_preds) / sizeof *dp; i++, dp++)\n+  for (i = 0; i < ARRAY_SIZE (bdesc_altivec_preds); i++, dp++)\n     if (dp->code == fcode)\n       return altivec_expand_predicate_builtin (dp->icode, dp->opcode, arglist, target);\n \n@@ -4110,7 +4110,7 @@ altivec_expand_builtin (exp, target)\n \n   /* Handle simple ternary operations.  */\n   d = (struct builtin_description *) bdesc_3arg;\n-  for (i = 0; i < sizeof  (bdesc_3arg) / sizeof *d; i++, d++)\n+  for (i = 0; i < ARRAY_SIZE  (bdesc_3arg); i++, d++)\n     if (d->code == fcode)\n       return altivec_expand_ternop_builtin (d->icode, arglist, target);\n \n@@ -4606,7 +4606,7 @@ altivec_init_builtins (void)\n \n   /* Add the simple ternary operators.  */\n   d = (struct builtin_description *) bdesc_3arg;\n-  for (i = 0; i < sizeof (bdesc_3arg) / sizeof *d; i++, d++)\n+  for (i = 0; i < ARRAY_SIZE (bdesc_3arg); i++, d++)\n     {\n       \n       enum machine_mode mode0, mode1, mode2, mode3;\n@@ -4699,12 +4699,12 @@ altivec_init_builtins (void)\n \n   /* Add the DST variants.  */\n   d = (struct builtin_description *) bdesc_dst;\n-  for (i = 0; i < sizeof (bdesc_dst) / sizeof *d; i++, d++)\n+  for (i = 0; i < ARRAY_SIZE (bdesc_dst); i++, d++)\n     def_builtin (d->mask, d->name, void_ftype_pvoid_int_char, d->code);\n \n   /* Initialize the predicates.  */\n   dp = (struct builtin_description_predicates *) bdesc_altivec_preds;\n-  for (i = 0; i < sizeof (bdesc_altivec_preds) / sizeof *dp; i++, dp++)\n+  for (i = 0; i < ARRAY_SIZE (bdesc_altivec_preds); i++, dp++)\n     {\n       enum machine_mode mode1;\n       tree type;\n@@ -4734,7 +4734,7 @@ altivec_init_builtins (void)\n \n   /* Add the simple binary operators.  */\n   d = (struct builtin_description *) bdesc_2arg;\n-  for (i = 0; i < sizeof (bdesc_2arg) / sizeof *d; i++, d++)\n+  for (i = 0; i < ARRAY_SIZE (bdesc_2arg); i++, d++)\n     {\n       enum machine_mode mode0, mode1, mode2;\n       tree type;\n@@ -4852,7 +4852,7 @@ altivec_init_builtins (void)\n \n   /* Initialize the abs* operators.  */\n   d = (struct builtin_description *) bdesc_abs;\n-  for (i = 0; i < sizeof (bdesc_abs) / sizeof *d; i++, d++)\n+  for (i = 0; i < ARRAY_SIZE (bdesc_abs); i++, d++)\n     {\n       enum machine_mode mode0;\n       tree type;\n@@ -4882,7 +4882,7 @@ altivec_init_builtins (void)\n \n   /* Add the simple unary operators.  */\n   d = (struct builtin_description *) bdesc_1arg;\n-  for (i = 0; i < sizeof (bdesc_1arg) / sizeof *d; i++, d++)\n+  for (i = 0; i < ARRAY_SIZE (bdesc_1arg); i++, d++)\n     {\n       enum machine_mode mode0, mode1;\n       tree type;"}, {"sha": "635809122363948760a06d7aa00ed02d09e6d3cb", "filename": "gcc/config/sparc/sparc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fconfig%2Fsparc%2Fsparc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fconfig%2Fsparc%2Fsparc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -8466,7 +8466,7 @@ mark_ultrasparc_pipeline_state (arg)\n   size_t i;\n \n   ups = (struct ultrasparc_pipeline_state *) arg;\n-  for (i = 0; i < sizeof (ups->group) / sizeof (rtx); ++i)\n+  for (i = 0; i < ARRAY_SIZE (ups->group); ++i)\n     ggc_mark_rtx (ups->group[i]);\n }\n "}, {"sha": "56136be9f0a733d4b9317642499f7b6819b7b23e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -1,3 +1,10 @@\n+2002-03-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* decl.c (cxx_init_decl_processing): Use ARRAY_SIZE in lieu of\n+\texplicit sizeof/sizeof.\n+\t* decl2.c (cxx_decode_option): Likewise.\n+\t* lex.c (init_reswords, REDUCE_LENGTH, TOKEN_LENGTH): Likewise.\n+\n 2002-03-02  Nathan Sidwell  <nathan@codesourcery.com>\n \n \tPR c++/775"}, {"sha": "9eb31bac4035c71d60531f846ed1f7fe49c9e7cb", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -6608,8 +6608,8 @@ cxx_init_decl_processing ()\n     flag_const_strings = 0;\n \n   /* Add GC roots for all of our global variables.  */\n-  ggc_add_tree_root (c_global_trees, sizeof c_global_trees / sizeof(tree));\n-  ggc_add_tree_root (cp_global_trees, sizeof cp_global_trees / sizeof(tree));\n+  ggc_add_tree_root (c_global_trees, ARRAY_SIZE (c_global_trees));\n+  ggc_add_tree_root (cp_global_trees, ARRAY_SIZE (cp_global_trees));\n   ggc_add_tree_root (&integer_three_node, 1);\n   ggc_add_tree_root (&integer_two_node, 1);\n   ggc_add_tree_root (&signed_size_zero_node, 1);"}, {"sha": "71dc38839ac215fef44a7b6f370143d421c55eb1", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -514,8 +514,7 @@ cxx_decode_option (argc, argv)\n \t caller that the option was processed successfully.  */\n       if (bsearch (&positive_option, \n \t\t   unsupported_options, \n-\t\t   (sizeof (unsupported_options) \n-\t\t    / sizeof (unsupported_options[0])),\n+\t\t   ARRAY_SIZE (unsupported_options),\n \t\t   sizeof (unsupported_options[0]),\n \t\t   compare_options))\n \t{\n@@ -560,10 +559,7 @@ cxx_decode_option (argc, argv)\n \t{\n \t  int found = 0;\n \n-\t  for (j = 0;\n-\t       !found && j < (sizeof (lang_f_options) \n-\t\t\t      / sizeof (lang_f_options[0]));\n-\t       j++)\n+\t  for (j = 0; !found && j < ARRAY_SIZE (lang_f_options); j++)\n \t    {\n \t      if (!strcmp (p, lang_f_options[j].string))\n \t\t{"}, {"sha": "1eb7075a85107889a6bb25912a92e040ffae44fb", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -484,7 +484,6 @@ static const struct resword reswords[] =\n   { \"xor_eq\",\t\tRID_XOR_EQ,\tD_OPNAME },\n \n };\n-#define N_reswords (sizeof reswords / sizeof (struct resword))\n \n /* Table mapping from RID_* constants to yacc token numbers.\n    Unfortunately we have to have entries for all the keywords in all\n@@ -639,7 +638,7 @@ init_reswords ()\n      all the trees it points to are permanently interned in the\n      get_identifier hash anyway.  */\n   ridpointers = (tree *) xcalloc ((int) RID_MAX, sizeof (tree));\n-  for (i = 0; i < N_reswords; i++)\n+  for (i = 0; i < ARRAY_SIZE (reswords); i++)\n     {\n       id = get_identifier (reswords[i].word);\n       C_RID_CODE (id) = reswords[i].rid;\n@@ -812,8 +811,8 @@ static int *reduce_count;\n int *token_count;\n \n #if 0\n-#define REDUCE_LENGTH (sizeof (yyr2) / sizeof (yyr2[0]))\n-#define TOKEN_LENGTH (256 + sizeof (yytname) / sizeof (yytname[0]))\n+#define REDUCE_LENGTH ARRAY_SIZE (yyr2)\n+#define TOKEN_LENGTH (256 + ARRAY_SIZE (yytname))\n #endif\n \n #ifdef GATHER_STATISTICS"}, {"sha": "5766a7903c07fb6a9bccf0a57274e737e5a5e9ab", "filename": "gcc/cppexp.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fcppexp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fcppexp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppexp.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -83,7 +83,6 @@ static const struct suffix vsuf_3[] = {\n   { \"ull\", 1, 2 }, { \"ULL\", 1, 2 }, { \"uLL\", 1, 2 }, { \"Ull\", 1, 2 },\n   { \"llu\", 1, 2 }, { \"LLU\", 1, 2 }, { \"LLu\", 1, 2 }, { \"llU\", 1, 2 }\n };\n-#define Nsuff(tab) (sizeof tab / sizeof (struct suffix))\n \n /* Parse and convert what is presumably an integer in TOK.  Accepts\n    decimal, hex, or octal with or without size suffixes.  Returned op\n@@ -157,9 +156,9 @@ parse_number (pfile, tok)\n \t See the suffix tables, above.  */\n       switch (end - p)\n \t{\n-\tcase 1: sufftab = vsuf_1; nsuff = Nsuff(vsuf_1); break;\n-\tcase 2: sufftab = vsuf_2; nsuff = Nsuff(vsuf_2); break;\n-\tcase 3: sufftab = vsuf_3; nsuff = Nsuff(vsuf_3); break;\n+\tcase 1: sufftab = vsuf_1; nsuff = ARRAY_SIZE (vsuf_1); break;\n+\tcase 2: sufftab = vsuf_2; nsuff = ARRAY_SIZE (vsuf_2); break;\n+\tcase 3: sufftab = vsuf_3; nsuff = ARRAY_SIZE (vsuf_3); break;\n \tdefault: goto invalid_suffix;\n \t}\n "}, {"sha": "386816725242b64f6c7538732b8427046b32f9d5", "filename": "gcc/cppinit.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fcppinit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fcppinit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppinit.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -690,8 +690,7 @@ static const struct builtin builtin_array[] =\n #undef C\n #undef X\n #undef O\n-#define builtin_array_end \\\n- builtin_array + sizeof(builtin_array)/sizeof(struct builtin)\n+#define builtin_array_end (builtin_array + ARRAY_SIZE (builtin_array))\n \n /* Subroutine of cpp_read_main_file; reads the builtins table above and\n    enters them, and language-specific macros, into the hash table.  */"}, {"sha": "ead8ffa10a2b3f27ea2bc2712b8777315b7590a7", "filename": "gcc/gcc.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -858,8 +858,7 @@ static const struct compiler default_compilers[] =\n \n /* Number of elements in default_compilers, not counting the terminator.  */\n \n-static int n_default_compilers\n-  = (sizeof default_compilers / sizeof (struct compiler)) - 1;\n+static const int n_default_compilers = ARRAY_SIZE (default_compilers) - 1;\n \n /* A vector of options to give to the linker.\n    These options are accumulated by %x,\n@@ -3686,8 +3685,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n #ifdef MODIFY_TARGET_NAME\n \t      is_modify_target_name = 0;\n \n-\t      for (j = 0;\n-\t\t   j < sizeof modify_target / sizeof modify_target[0]; j++)\n+\t      for (j = 0; j < ARRAY_SIZE (modify_target); j++)\n \t\tif (! strcmp (argv[i], modify_target[j].sw))\n \t\t  {\n \t\t    char *new_name\n@@ -3822,7 +3820,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n #ifdef MODIFY_TARGET_NAME\n       is_modify_target_name = 0;\n \n-      for (j = 0; j < sizeof modify_target / sizeof modify_target[0]; j++)\n+      for (j = 0; j < ARRAY_SIZE (modify_target); j++)\n \tif (! strcmp (argv[i], modify_target[j].sw))\n \t  is_modify_target_name = 1;\n "}, {"sha": "cf8c0bd46ba5decbfd2fa80bd0786d44c86d4321", "filename": "gcc/genpreds.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fgenpreds.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fgenpreds.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenpreds.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -43,7 +43,7 @@ output_predicate_decls ()\n   size_t i;\n \n   puts (\"#ifdef RTX_CODE\\n\");\n-  for (i = 0; i < sizeof predicate / sizeof *predicate; i++)\n+  for (i = 0; i < ARRAY_SIZE (predicate); i++)\n     printf (\"extern int %s PARAMS ((rtx, enum machine_mode));\\n\",\n \t    predicate[i].name);\n   puts (\"\\n#endif /* RTX_CODE */\\n\");"}, {"sha": "db4266b9709b2277b7327a5e82c55c40015ff873", "filename": "gcc/ggc-page.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fggc-page.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fggc-page.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fggc-page.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -161,8 +161,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n /* The number of extra orders, not corresponding to power-of-two sized\n    objects.  */\n \n-#define NUM_EXTRA_ORDERS \\\n-  (sizeof (extra_order_size_table) / sizeof (extra_order_size_table[0]))\n+#define NUM_EXTRA_ORDERS ARRAY_SIZE (extra_order_size_table)\n \n /* The Ith entry is the maximum size of an object to be stored in the\n    Ith extra order.  Adding a new entry to this array is the *only*"}, {"sha": "6cd8b5f9bc286cb5e5719de1add55ba706dc950e", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -1,3 +1,11 @@\n+2002-03-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* class.c (init_class_processing): Use ARRAY_SIZE in lieu of\n+\texplicit sizeof/sizeof.\n+\t* decl.c (java_init_decl_processing): Likewise.\n+\t* jcf-parse.c (init_jcf_parse): Likewise.\n+\t* parse.y (init_src_parse): Likewise.\n+\n 2002-03-02  Per Bothner  <per@bothner.com>\n \n \tMake --CLASSPATH by a synonym for --classpath and -classpath."}, {"sha": "c8290eabf2b99c27107d9a15beed2eac66e21538", "filename": "gcc/java/class.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -2325,7 +2325,7 @@ init_class_processing ()\n   registerClass_libfunc = gen_rtx (SYMBOL_REF, Pmode, \"_Jv_RegisterClass\");\n   registerResource_libfunc = \n     gen_rtx (SYMBOL_REF, Pmode, \"_Jv_RegisterResource\");\n-  ggc_add_tree_root (class_roots, sizeof (class_roots) / sizeof (tree));\n+  ggc_add_tree_root (class_roots, ARRAY_SIZE (class_roots));\n   fields_ident = get_identifier (\"fields\");\n   info_ident = get_identifier (\"info\");\n   ggc_add_rtx_root (&registerClass_libfunc, 1);"}, {"sha": "86dd5c099dad3a31dfede96c0315f843d68cd843", "filename": "gcc/java/decl.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fjava%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fjava%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fdecl.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -907,8 +907,7 @@ java_init_decl_processing ()\n   init_jcf_parse ();\n \n   /* Register nodes with the garbage collector.  */\n-  ggc_add_tree_root (java_global_trees, \n-\t\t     sizeof (java_global_trees) / sizeof (tree));\n+  ggc_add_tree_root (java_global_trees, ARRAY_SIZE (java_global_trees));\n   ggc_add_tree_root (&decl_map, 1);\n   ggc_add_tree_root (&pending_local_decls, 1);\n "}, {"sha": "c2350a0c99e8eb17fea86fd2861f71885466a837", "filename": "gcc/java/jcf-parse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fjava%2Fjcf-parse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fjava%2Fjcf-parse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fjcf-parse.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -1326,7 +1326,7 @@ void\n init_jcf_parse ()\n {\n   /* Register roots with the garbage collector.  */\n-  ggc_add_tree_root (parse_roots, sizeof (parse_roots) / sizeof(tree));\n+  ggc_add_tree_root (parse_roots, ARRAY_SIZE (parse_roots));\n \n   ggc_add_root (&current_jcf, 1, sizeof (JCF), (void (*)(void *))ggc_mark_jcf);\n "}, {"sha": "d21fe63f41420593ce55df492dc8f12a9b9301e5", "filename": "gcc/java/parse.y", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fjava%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fjava%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fparse.y?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -15997,7 +15997,7 @@ void\n init_src_parse ()\n {\n   /* Register roots with the garbage collector.  */\n-  ggc_add_tree_root (src_parse_roots, sizeof (src_parse_roots) / sizeof(tree));\n+  ggc_add_tree_root (src_parse_roots, ARRAY_SIZE (src_parse_roots));\n }\n \n \f"}, {"sha": "a7d1dac7b822552307b45fd725c0d656b90b0122", "filename": "gcc/lcm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -1023,7 +1023,7 @@ optimize_mode_switching (file)\n   sbitmap *kill;\n   struct edge_list *edge_list;\n   static const int num_modes[] = NUM_MODES_FOR_MODE_SWITCHING;\n-#define N_ENTITIES (sizeof num_modes / sizeof (int))\n+#define N_ENTITIES ARRAY_SIZE (num_modes)\n   int entity_map[N_ENTITIES];\n   struct bb_info *bb_info[N_ENTITIES];\n   int i, j;"}, {"sha": "4a8d7d019a129f0a8901c1cbfd14a7039f77f8c9", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=ca7558fcc6fe1ccfcbc91c1f2017b6706eae4cf3", "patch": "@@ -1816,8 +1816,7 @@ set_sizetype (type)\n       TYPE_REFERENCE_TO (sizetype_tab[i]) = 0;\n     }\n \n-  ggc_add_tree_root ((tree *) &sizetype_tab,\n-\t\t     sizeof sizetype_tab / sizeof (tree));\n+  ggc_add_tree_root ((tree *) &sizetype_tab, ARRAY_SIZE (sizetype_tab));\n \n   /* Go down each of the types we already made and set the proper type\n      for the sizes in them.  */"}]}