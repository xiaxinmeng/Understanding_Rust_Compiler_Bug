{"sha": "9d6e0be1f607c2289a000018eac74ff322ff3f52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQ2ZTBiZTFmNjA3YzIyODlhMDAwMDE4ZWFjNzRmZjMyMmZmM2Y1Mg==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-07-29T17:11:25Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-07-29T17:11:25Z"}, "message": "implement-c.texi: Add C90 subclause references.\n\n\t* doc/implement-c.texi: Add C90 subclause references.  Point to\n\tpreprocessor documentation instead of duplicating it.  Add points\n\tonly present in C90.  Fill in documentation for all points.\n\nFrom-SVN: r85305", "tree": {"sha": "dc78edd9dc1056fc4d85c3992e52b18253d91606", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dc78edd9dc1056fc4d85c3992e52b18253d91606"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d6e0be1f607c2289a000018eac74ff322ff3f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6e0be1f607c2289a000018eac74ff322ff3f52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d6e0be1f607c2289a000018eac74ff322ff3f52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6e0be1f607c2289a000018eac74ff322ff3f52/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "715ab8c3f46a91e127b0bf74bd5b7c93e3ffe3c0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/715ab8c3f46a91e127b0bf74bd5b7c93e3ffe3c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/715ab8c3f46a91e127b0bf74bd5b7c93e3ffe3c0"}], "stats": {"total": 379, "additions": 311, "deletions": 68}, "files": [{"sha": "22fa108494969d6d377e9da7464148df7f2c25d1", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6e0be1f607c2289a000018eac74ff322ff3f52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6e0be1f607c2289a000018eac74ff322ff3f52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d6e0be1f607c2289a000018eac74ff322ff3f52", "patch": "@@ -1,3 +1,9 @@\n+2004-07-29  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\t* doc/implement-c.texi: Add C90 subclause references.  Point to\n+\tpreprocessor documentation instead of duplicating it.  Add points\n+\tonly present in C90.  Fill in documentation for all points.\n+\n 2004-07-29  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* pa.c (output_movb): Correct typo."}, {"sha": "7fde145a2e91981442420f820ea09d834a15c257", "filename": "gcc/doc/implement-c.texi", "status": "modified", "additions": 305, "deletions": 68, "changes": 373, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d6e0be1f607c2289a000018eac74ff322ff3f52/gcc%2Fdoc%2Fimplement-c.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d6e0be1f607c2289a000018eac74ff322ff3f52/gcc%2Fdoc%2Fimplement-c.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fimplement-c.texi?ref=9d6e0be1f607c2289a000018eac74ff322ff3f52", "patch": "@@ -9,7 +9,19 @@\n A conforming implementation of ISO C is required to document its\n choice of behavior in each of the areas that are designated\n ``implementation defined.''  The following lists all such areas,\n-along with the section number from the ISO/IEC 9899:1999 standard.\n+along with the section numbers from the ISO/IEC 9899:1990 and ISO/IEC\n+9899:1999 standards.  Some areas are only implementation-defined in\n+one version of the standard.\n+\n+Some choices depend on the externally determined ABI for the platform\n+(including standard character encodings) which GCC follows; these are\n+listed as ``determined by ABI'' below.  @xref{Compatibility, , Binary\n+Compatibility}, and @uref{http://gcc.gnu.org/readings.html}.  Some\n+choices are documented in the preprocessor manual.\n+@xref{Implementation-defined behavior, , Implementation-defined\n+behavior, cpp, The C Preprocessor}.  Some choices are made by the\n+library and operating system (or other environment when compiling for\n+a freestanding environment); refer to their documentation for details.\n \n @menu\n * Translation implementation::\n@@ -22,6 +34,8 @@ along with the section number from the ISO/IEC 9899:1999 standard.\n * Hints implementation::\n * Structures unions enumerations and bit-fields implementation::\n * Qualifiers implementation::\n+* Declarators implementation::\n+* Statements implementation::\n * Preprocessing directives implementation::\n * Library functions implementation::\n * Architecture implementation::\n@@ -33,117 +47,209 @@ along with the section number from the ISO/IEC 9899:1999 standard.\n \n @itemize @bullet\n @item\n-@cite{How a diagnostic is identified (3.10, 5.1.1.3).}\n+@cite{How a diagnostic is identified (C90 3.7, C99 3.10, C90 and C99 5.1.1.3).}\n \n Diagnostics consist of all the output sent to stderr by GCC.\n \n @item\n @cite{Whether each nonempty sequence of white-space characters other than\n new-line is retained or replaced by one space character in translation\n-phase 3 (5.1.1.2).}\n+phase 3 (C90 and C99 5.1.1.2).}\n+\n+@xref{Implementation-defined behavior, , Implementation-defined\n+behavior, cpp, The C Preprocessor}.\n+\n @end itemize\n \n @node Environment implementation\n @section Environment\n \n-The behavior of these points are dependent on the implementation\n+The behavior of most of these points are dependent on the implementation\n of the C library, and are not defined by GCC itself.\n \n+@itemize @bullet\n+@item\n+@cite{The mapping between physical source file multibyte characters\n+and the source character set in translation phase 1 (C90 and C99 5.1.1.2).}\n+\n+@xref{Implementation-defined behavior, , Implementation-defined\n+behavior, cpp, The C Preprocessor}.\n+\n+@end itemize\n+\n @node Identifiers implementation\n @section Identifiers\n \n @itemize @bullet\n @item\n @cite{Which additional multibyte characters may appear in identifiers\n-and their correspondence to universal character names (6.4.2).}\n+and their correspondence to universal character names (C99 6.4.2).}\n+\n+@xref{Implementation-defined behavior, , Implementation-defined\n+behavior, cpp, The C Preprocessor}.\n \n @item\n @cite{The number of significant initial characters in an identifier\n-(5.2.4.1, 6.4.2).}\n+(C90 6.1.2, C90 and C99 5.2.4.1, C99 6.4.2).}\n \n For internal names, all characters are significant.  For external names,\n the number of significant characters are defined by the linker; for\n almost all targets, all characters are significant.\n \n+@item\n+@cite{Whether case distinctions are significant in an identifier with\n+external linkage (C90 6.1.2).}\n+\n+This is a property of the linker.  C99 requires that case distinctions\n+are always significant in identifiers with external linkage and\n+systems without this property are not supported by GCC@.\n+\n @end itemize\n \n @node Characters implementation\n @section Characters\n \n @itemize @bullet\n @item\n-@cite{The number of bits in a byte (3.6).}\n+@cite{The number of bits in a byte (C90 3.4, C99 3.6).}\n+\n+Determined by ABI@.\n \n @item\n-@cite{The values of the members of the execution character set (5.2.1).}\n+@cite{The values of the members of the execution character set (C90\n+and C99 5.2.1).}\n+\n+Determined by ABI@.\n \n @item\n @cite{The unique value of the member of the execution character set produced\n-for each of the standard alphabetic escape sequences (5.2.2).}\n+for each of the standard alphabetic escape sequences (C90 and C99 5.2.2).}\n+\n+Determined by ABI@.\n \n @item\n @cite{The value of a @code{char} object into which has been stored any\n-character other than a member of the basic execution character set (6.2.5).}\n+character other than a member of the basic execution character set\n+(C90 6.1.2.5, C99 6.2.5).}\n+\n+Determined by ABI@.\n \n @item\n-@cite{Which of @code{signed char} or @code{unsigned char} has the same range,\n-representation, and behavior as ``plain'' @code{char} (6.2.5, 6.3.1.1).}\n+@cite{Which of @code{signed char} or @code{unsigned char} has the same\n+range, representation, and behavior as ``plain'' @code{char} (C90\n+6.1.2.5, C90 6.2.1.1, C99 6.2.5, C99 6.3.1.1).}\n+\n+@opindex fsigned-char\n+@opindex funsigned-char\n+Determined by ABI@.  The options @option{-funsigned-char} and\n+@option{-fsigned-char} change the default.  @xref{C Dialect Options, ,\n+Options Controlling C Dialect}.\n \n @item\n @cite{The mapping of members of the source character set (in character\n constants and string literals) to members of the execution character\n-set (6.4.4.4, 5.1.1.2).}\n+set (C90 6.1.3.4, C99 6.4.4.4, C90 and C99 5.1.1.2).}\n+\n+Determined by ABI@.\n \n @item\n @cite{The value of an integer character constant containing more than one\n character or containing a character or escape sequence that does not map\n-to a single-byte execution character (6.4.4.4).}\n+to a single-byte execution character (C90 6.1.3.4, C99 6.4.4.4).}\n+\n+@xref{Implementation-defined behavior, , Implementation-defined\n+behavior, cpp, The C Preprocessor}.\n \n @item\n @cite{The value of a wide character constant containing more than one\n multibyte character, or containing a multibyte character or escape\n-sequence not represented in the extended execution character set (6.4.4.4).}\n+sequence not represented in the extended execution character set (C90\n+6.1.3.4, C99 6.4.4.4).}\n+\n+@xref{Implementation-defined behavior, , Implementation-defined\n+behavior, cpp, The C Preprocessor}.\n \n @item\n @cite{The current locale used to convert a wide character constant consisting\n of a single multibyte character that maps to a member of the extended\n-execution character set into a corresponding wide character code (6.4.4.4).}\n+execution character set into a corresponding wide character code (C90\n+6.1.3.4, C99 6.4.4.4).}\n+\n+@xref{Implementation-defined behavior, , Implementation-defined\n+behavior, cpp, The C Preprocessor}.\n \n @item\n @cite{The current locale used to convert a wide string literal into\n-corresponding wide character codes (6.4.5).}\n+corresponding wide character codes (C90 6.1.4, C99 6.4.5).}\n+\n+@xref{Implementation-defined behavior, , Implementation-defined\n+behavior, cpp, The C Preprocessor}.\n \n @item\n @cite{The value of a string literal containing a multibyte character or escape\n-sequence not represented in the execution character set (6.4.5).}\n+sequence not represented in the execution character set (C90 6.1.4, C99 6.4.5).}\n+\n+@xref{Implementation-defined behavior, , Implementation-defined\n+behavior, cpp, The C Preprocessor}.\n @end itemize\n \n @node Integers implementation\n @section Integers\n \n @itemize @bullet\n @item\n-@cite{Any extended integer types that exist in the implementation (6.2.5).}\n+@cite{Any extended integer types that exist in the implementation (C99 6.2.5).}\n+\n+GCC does not support any extended integer types.\n+@c The __mode__ attribute might create types of precisions not\n+@c otherwise supported, but the syntax isn't right for use everywhere\n+@c the standard type names might be used.  Predefined typedefs should\n+@c be used if any extended integer types are to be defined.  The\n+@c __int128_t and __uint128_t typedefs are not extended integer types\n+@c as they are generally longer than the ABI-specified intmax_t.\n \n @item\n @cite{Whether signed integer types are represented using sign and magnitude,\n two's complement, or one's complement, and whether the extraordinary value\n-is a trap representation or an ordinary value (6.2.6.2).}\n+is a trap representation or an ordinary value (C99 6.2.6.2).}\n \n GCC supports only two's complement integer types, and all bit patterns\n are ordinary values.\n \n @item\n @cite{The rank of any extended integer type relative to another extended\n-integer type with the same precision (6.3.1.1).}\n+integer type with the same precision (C99 6.3.1.1).}\n+\n+GCC does not support any extended integer types.\n+@c If it did, there would only be one of each precision and signedness.\n \n @item\n @cite{The result of, or the signal raised by, converting an integer to a\n signed integer type when the value cannot be represented in an object of\n-that type (6.3.1.3).}\n+that type (C90 6.2.1.2, C99 6.3.1.3).}\n+\n+For conversion to a type of width @math{N}, the value is reduced\n+modulo @math{2^N} to be within range of the type; no signal is raised.\n \n @item\n-@cite{The results of some bitwise operations on signed integers (6.5).}\n+@cite{The results of some bitwise operations on signed integers (C90\n+6.3, C99 6.5).}\n+\n+Bitwise operators act on the representation of the value including\n+both the sign and value bits, where the sign bit is considered\n+immediately above the highest-value value bit.  Signed @samp{>>} acts\n+on negative numbers by sign extension.\n+\n+GCC does not use the latitude given in C99 only to treat certain\n+aspects of signed @samp{<<} as undefined, but this is subject to\n+change.\n+\n+@item\n+@cite{The sign of the remainder on integer division (C90 6.3.5).}\n+\n+GCC always follows the C99 requirement that the result of division is\n+truncated towards zero.\n+\n @end itemize\n \n @node Floating point implementation\n@@ -153,54 +259,88 @@ that type (6.3.1.3).}\n @item\n @cite{The accuracy of the floating-point operations and of the library\n functions in @code{<math.h>} and @code{<complex.h>} that return floating-point\n-results (5.2.4.2.2).}\n+results (C90 and C99 5.2.4.2.2).}\n+\n+The accuracy is unknown.\n \n @item\n @cite{The rounding behaviors characterized by non-standard values\n of @code{FLT_ROUNDS} @gol\n-(5.2.4.2.2).}\n+(C90 and C99 5.2.4.2.2).}\n+\n+GCC does not use such values.\n \n @item\n @cite{The evaluation methods characterized by non-standard negative\n-values of @code{FLT_EVAL_METHOD} (5.2.4.2.2).}\n+values of @code{FLT_EVAL_METHOD} (C99 5.2.4.2.2).}\n+\n+GCC does not use such values.\n \n @item\n @cite{The direction of rounding when an integer is converted to a\n floating-point number that cannot exactly represent the original\n-value (6.3.1.4).}\n+value (C90 6.2.1.3, C99 6.3.1.4).}\n+\n+C99 Annex F is followed.\n \n @item\n @cite{The direction of rounding when a floating-point number is\n-converted to a narrower floating-point number (6.3.1.5).}\n+converted to a narrower floating-point number (C90 6.2.1.4, C99\n+6.3.1.5).}\n+\n+C99 Annex F is followed.\n \n @item\n @cite{How the nearest representable value or the larger or smaller\n representable value immediately adjacent to the nearest representable\n-value is chosen for certain floating constants (6.4.4.2).}\n+value is chosen for certain floating constants (C90 6.1.3.1, C99\n+6.4.4.2).}\n+\n+C99 Annex F is followed.\n \n @item\n @cite{Whether and how floating expressions are contracted when not\n-disallowed by the @code{FP_CONTRACT} pragma (6.5).}\n+disallowed by the @code{FP_CONTRACT} pragma (C99 6.5).}\n+\n+Expressions are currently only contracted if\n+@option{-funsafe-math-optimizations} or @option{-ffast-math} are used.\n+This is subject to change.\n \n @item\n-@cite{The default state for the @code{FENV_ACCESS} pragma (7.6.1).}\n+@cite{The default state for the @code{FENV_ACCESS} pragma (C99 7.6.1).}\n+\n+This pragma is not implemented, but the default is to ``off'' unless\n+@option{-frounding-math} is used in which case it is ``on''.\n \n @item\n @cite{Additional floating-point exceptions, rounding modes, environments,\n-and classifications, and their macro names (7.6, 7.12).}\n+and classifications, and their macro names (C99 7.6, C99 7.12).}\n+\n+This is dependent on the implementation of the C library, and is not\n+defined by GCC itself.\n \n @item\n-@cite{The default state for the @code{FP_CONTRACT} pragma (7.12.2).}\n+@cite{The default state for the @code{FP_CONTRACT} pragma (C99 7.12.2).}\n+\n+This pragma is not implemented.  Expressions are currently only\n+contracted if @option{-funsafe-math-optimizations} or\n+@option{-ffast-math} are used.  This is subject to change.\n \n @item\n @cite{Whether the ``inexact'' floating-point exception can be raised\n when the rounded result actually does equal the mathematical result\n-in an IEC 60559 conformant implementation (F.9).}\n+in an IEC 60559 conformant implementation (C99 F.9).}\n+\n+This is dependent on the implementation of the C library, and is not\n+defined by GCC itself.\n \n @item\n @cite{Whether the ``underflow'' (and ``inexact'') floating-point\n exception can be raised when a result is tiny but not inexact in an\n-IEC 60559 conformant implementation (F.9).}\n+IEC 60559 conformant implementation (C99 F.9).}\n+\n+This is dependent on the implementation of the C library, and is not\n+defined by GCC itself.\n \n @end itemize\n \n@@ -210,7 +350,7 @@ IEC 60559 conformant implementation (F.9).}\n @itemize @bullet\n @item\n @cite{The result of converting a pointer to an integer or\n-vice versa (6.3.2.3).}\n+vice versa (C90 6.3.4, C99 6.3.2.3).}\n \n A cast from pointer to integer discards most-significant bits if the\n pointer representation is larger than the integer type,\n@@ -232,11 +372,15 @@ is larger than the integer type, otherwise the bits are unchanged.\n When casting from pointer to integer and back again, the resulting\n pointer must reference the same object as the original pointer, otherwise\n the behavior is undefined.  That is, one may not use integer arithmetic to\n-avoid the undefined behavior of pointer arithmetic as proscribed in 6.5.6/8.\n+avoid the undefined behavior of pointer arithmetic as proscribed in\n+C99 6.5.6/8.\n \n @item\n @cite{The size of the result of subtracting two pointers to elements\n-of the same array (6.5.6).}\n+of the same array (C90 6.3.6, C99 6.5.6).}\n+\n+The value is as specified in the standard and the type is determined\n+by the ABI@.\n \n @end itemize\n \n@@ -246,7 +390,7 @@ of the same array (6.5.6).}\n @itemize @bullet\n @item\n @cite{The extent to which suggestions made by using the @code{register}\n-storage-class specifier are effective (6.7.1).}\n+storage-class specifier are effective (C90 6.5.1, C99 6.7.1).}\n \n The @code{register} specifier affects code generation only in these ways:\n \n@@ -271,7 +415,7 @@ in registers unless they are marked @code{register}.\n \n @item\n @cite{The extent to which suggestions made by using the inline function\n-specifier are effective (6.7.4).}\n+specifier are effective (C99 6.7.4).}\n \n GCC will not inline any functions if the @option{-fno-inline} option is\n used or if @option{-O0} is used.  Otherwise, GCC may still be unable to\n@@ -285,24 +429,69 @@ used to determine if a function has not been inlined and why not.\n \n @itemize @bullet\n @item\n-@cite{Whether a ``plain'' int bit-field is treated as a @code{signed int}\n-bit-field or as an @code{unsigned int} bit-field (6.7.2, 6.7.2.1).}\n+@cite{A member of a union object is accessed using a member of a\n+different type (C90 6.3.2.3).}\n+\n+The relevant bytes of the representation of the object are treated as\n+an object of the type used for the access.  This may be a trap\n+representation.\n+\n+@item\n+@cite{Whether a ``plain'' @code{int} bit-field is treated as a\n+@code{signed int} bit-field or as an @code{unsigned int} bit-field\n+(C90 6.5.2, C90 6.5.2.1, C99 6.7.2, C99 6.7.2.1).}\n+\n+@opindex funsigned-bitfields\n+By default it is treated as @code{signed int} but this may be changed\n+by the @option{-funsigned-bitfields} option.\n \n @item\n @cite{Allowable bit-field types other than @code{_Bool}, @code{signed int},\n-and @code{unsigned int} (6.7.2.1).}\n+and @code{unsigned int} (C99 6.7.2.1).}\n+\n+No other types are permitted in strictly conforming mode.\n+@c Would it be better to restrict the pedwarn for other types to C90\n+@c mode and document the other types for C99 mode?\n \n @item\n-@cite{Whether a bit-field can straddle a storage-unit boundary (6.7.2.1).}\n+@cite{Whether a bit-field can straddle a storage-unit boundary (C90\n+6.5.2.1, C99 6.7.2.1).}\n+\n+Determined by ABI@.\n \n @item\n-@cite{The order of allocation of bit-fields within a unit (6.7.2.1).}\n+@cite{The order of allocation of bit-fields within a unit (C90\n+6.5.2.1, C99 6.7.2.1).}\n+\n+Determined by ABI@.\n \n @item\n-@cite{The alignment of non-bit-field members of structures (6.7.2.1).}\n+@cite{The alignment of non-bit-field members of structures (C90\n+6.5.2.1, C99 6.7.2.1).}\n+\n+Determined by ABI@.\n \n @item\n-@cite{The integer type compatible with each enumerated type (6.7.2.2).}\n+@cite{The integer type compatible with each enumerated type (C90\n+6.5.2.2, C99 6.7.2.2).}\n+\n+@opindex fshort-enums\n+Normally, the type is @code{unsigned int} if there are no negative\n+values in the enumeration, otherwise @code{int}.  If\n+@option{-fshort-enums} is specified, then if there are negative values\n+it is the first of @code{signed char}, @code{short} and @code{int}\n+that can represent all the values, otherwise it is the first of\n+@code{unsigned char}, @code{unsigned short} and @code{unsigned int}\n+that can represent all the values.\n+@c On a few unusual targets with 64-bit int, this doesn't agree with\n+@c the code and one of the types accessed via mode attributes (which\n+@c are not currently considered extended integer types) may be used.\n+@c If these types are made extended integer types, it would still be\n+@c the case that -fshort-enums stops the implementation from\n+@c conforming to C90 on those targets.\n+\n+On some targets, @option{-fshort-enums} is the default; this is\n+determined by the ABI@.\n \n @end itemize\n \n@@ -312,87 +501,135 @@ and @code{unsigned int} (6.7.2.1).}\n @itemize @bullet\n @item\n @cite{What constitutes an access to an object that has volatile-qualified\n-type (6.7.3).}\n+type (C90 6.5.3, C99 6.7.3).}\n+\n+@xref{Volatiles, , When is a Volatile Object Accessed?}.\n+\n+@end itemize\n+\n+@node Declarators implementation\n+@section Declarators\n+\n+@itemize @bullet\n+@item\n+@cite{The maximum number of declarators that may modify an arithmetic,\n+structure or union type (C90 6.5.4).}\n+\n+GCC is only limited by available memory.\n+\n+@end itemize\n+\n+@node Statements implementation\n+@section Statements\n+\n+@itemize @bullet\n+@item\n+@cite{The maximum number of @code{case} values in a @code{switch}\n+statement (C90 6.6.4.2).}\n+\n+GCC is only limited by available memory.\n \n @end itemize\n \n @node Preprocessing directives implementation\n @section Preprocessing directives\n \n+@xref{Implementation-defined behavior, , Implementation-defined\n+behavior, cpp, The C Preprocessor}, for details of these aspects of\n+implementation-defined behavior.\n+\n @itemize @bullet\n @item\n @cite{How sequences in both forms of header names are mapped to headers\n-or external source file names (6.4.7).}\n+or external source file names (C90 6.1.7, C99 6.4.7).}\n \n @item\n @cite{Whether the value of a character constant in a constant expression\n that controls conditional inclusion matches the value of the same character\n-constant in the execution character set (6.10.1).}\n+constant in the execution character set (C90 6.8.1, C99 6.10.1).}\n \n @item\n @cite{Whether the value of a single-character character constant in a\n constant expression that controls conditional inclusion may have a\n-negative value (6.10.1).}\n+negative value (C90 6.8.1, C99 6.10.1).}\n \n @item\n @cite{The places that are searched for an included @samp{<>} delimited\n header, and how the places are specified or the header is\n-identified (6.10.2).}\n+identified (C90 6.8.2, C99 6.10.2).}\n \n @item\n @cite{How the named source file is searched for in an included @samp{\"\"}\n-delimited header (6.10.2).}\n+delimited header (C90 6.8.2, C99 6.10.2).}\n \n @item\n @cite{The method by which preprocessing tokens (possibly resulting from\n macro expansion) in a @code{#include} directive are combined into a header\n-name (6.10.2).}\n+name (C90 6.8.2, C99 6.10.2).}\n \n @item\n-@cite{The nesting limit for @code{#include} processing (6.10.2).}\n-\n-GCC imposes a limit of 200 nested @code{#include}s.\n+@cite{The nesting limit for @code{#include} processing (C90 6.8.2, C99\n+6.10.2).}\n \n @item\n @cite{Whether the @samp{#} operator inserts a @samp{\\} character before\n the @samp{\\} character that begins a universal character name in a\n-character constant or string literal (6.10.3.2).}\n+character constant or string literal (C99 6.10.3.2).}\n \n @item\n @cite{The behavior on each recognized non-@code{STDC #pragma}\n-directive (6.10.6).}\n+directive (C90 6.8.6, C99 6.10.6).}\n+\n+@xref{Pragmas, , Pragmas, cpp, The C Preprocessor}, for details of\n+pragmas accepted by GCC on all targets.  @xref{Pragmas, , Pragmas\n+Accepted by GCC}, for details of target-specific pragmas.\n \n @item\n @cite{The definitions for @code{__DATE__} and @code{__TIME__} when\n-respectively, the date and time of translation are not available (6.10.8).}\n-\n-If the date and time are not available, @code{__DATE__} expands to\n-@code{@w{\"??? ?? ????\"}} and @code{__TIME__} expands to\n-@code{\"??:??:??\"}.\n+respectively, the date and time of translation are not available (C90\n+6.8.8, C99 6.10.8).}\n \n @end itemize\n \n @node Library functions implementation\n @section Library functions\n \n-The behavior of these points are dependent on the implementation\n+The behavior of most of these points are dependent on the implementation\n of the C library, and are not defined by GCC itself.\n \n+@itemize @bullet\n+@item\n+@cite{The null pointer constant to which the macro @code{NULL} expands\n+(C90 7.1.6, C99 7.17).}\n+\n+In @code{<stddef.h>}, @code{NULL} expands to @code{((void *)0)}.  GCC\n+does not provide the other headers which define @code{NULL} and some\n+library implementations may use other definitions in those headers.\n+\n+@end itemize\n+\n @node Architecture implementation\n @section Architecture\n \n @itemize @bullet\n @item\n @cite{The values or expressions assigned to the macros specified in the\n headers @code{<float.h>}, @code{<limits.h>}, and @code{<stdint.h>}\n-(5.2.4.2, 7.18.2, 7.18.3).}\n+(C90 and C99 5.2.4.2, C99 7.18.2, C99 7.18.3).}\n+\n+Determined by ABI@.\n \n @item\n @cite{The number, order, and encoding of bytes in any object\n-(when not explicitly specified in this International Standard) (6.2.6.1).}\n+(when not explicitly specified in this International Standard) (C99 6.2.6.1).}\n+\n+Determined by ABI@.\n \n @item\n-@cite{The value of the result of the sizeof operator (6.5.3.4).}\n+@cite{The value of the result of the @code{sizeof} operator (C90\n+6.3.3.4, C99 6.5.3.4).}\n+\n+Determined by ABI@.\n \n @end itemize\n "}]}