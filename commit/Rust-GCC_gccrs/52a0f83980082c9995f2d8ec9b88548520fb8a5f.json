{"sha": "52a0f83980082c9995f2d8ec9b88548520fb8a5f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTJhMGY4Mzk4MDA4MmM5OTk1ZjJkOGVjOWI4ODU0ODUyMGZiOGE1Zg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-18T07:17:24Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-05-18T09:53:10Z"}, "message": "tree-optimization/95172 - avoid mixing conditionalized and ordered SM\n\nThe following testcase shows a missed optimization that then leads to\nwrong-code when issueing SMed stores on exits.  When we were able to\ncompute an ordered sequence of stores for an exit we need to emit\nthat in the correct order and we can emit it disregarding to any\nconditional for whether a store actually happened (we know it did).\nWe can also improve detection as of whether we need conditional\nprocessing at all.  Both parts fix the testcase.\n\n2020-05-18  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/95172\n\t* tree-ssa-loop-im.c (execute_sm): Get flag whether we\n\teventually need the conditional processing.\n\t(execute_sm_exit): When processing an orderd sequence\n\tavoid doing any conditional processing.\n\t(hoist_memory_references): Pass down whether all edges\n\thave ordered processing for a ref to execute_sm.\n\n\t* gcc.dg/torture/pr95172.c: New testcase.", "tree": {"sha": "b692c135345da7a3eeeea1ac268995d4603d2339", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b692c135345da7a3eeeea1ac268995d4603d2339"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/52a0f83980082c9995f2d8ec9b88548520fb8a5f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a0f83980082c9995f2d8ec9b88548520fb8a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/52a0f83980082c9995f2d8ec9b88548520fb8a5f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/52a0f83980082c9995f2d8ec9b88548520fb8a5f/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03d549090e3551eb3c4a41a5d63a76cff7112c7b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03d549090e3551eb3c4a41a5d63a76cff7112c7b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03d549090e3551eb3c4a41a5d63a76cff7112c7b"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "491293d77df1f14ecbbfac94936c06c01207f666", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a0f83980082c9995f2d8ec9b88548520fb8a5f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a0f83980082c9995f2d8ec9b88548520fb8a5f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=52a0f83980082c9995f2d8ec9b88548520fb8a5f", "patch": "@@ -1,3 +1,13 @@\n+2020-05-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95172\n+\t* tree-ssa-loop-im.c (execute_sm): Get flag whether we\n+\teventually need the conditional processing.\n+\t(execute_sm_exit): When processing an orderd sequence\n+\tavoid doing any conditional processing.\n+\t(hoist_memory_references): Pass down whether all edges\n+\thave ordered processing for a ref to execute_sm.\n+\n 2020-05-17 Jeff Law  <law@redhat.com>\n \n \t* config/h8300/predicates.md (pc_or_label_operand): New predicate."}, {"sha": "1123599b9a71f188594cfbd29cc1f7dac587c2ff", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a0f83980082c9995f2d8ec9b88548520fb8a5f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a0f83980082c9995f2d8ec9b88548520fb8a5f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=52a0f83980082c9995f2d8ec9b88548520fb8a5f", "patch": "@@ -1,3 +1,8 @@\n+2020-05-18  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/95172\n+\t* gcc.dg/torture/pr95172.c: New testcase.\n+\n 2020-05-17  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/95021"}, {"sha": "b39de69f08e7273cf5c19a920f0b31adf9d4fbff", "filename": "gcc/testsuite/gcc.dg/torture/pr95172.c", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a0f83980082c9995f2d8ec9b88548520fb8a5f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr95172.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a0f83980082c9995f2d8ec9b88548520fb8a5f/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr95172.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr95172.c?ref=52a0f83980082c9995f2d8ec9b88548520fb8a5f", "patch": "@@ -0,0 +1,17 @@\n+/* { dg-do run } */\n+\n+int a, d;\n+int *b = &a;\n+short c;\n+int main()\n+{\n+  for (; c <= 4; c--) {\n+    for (; d;)\n+      ;\n+    a = 1;\n+    *b = 0;\n+  }\n+  if (a != 0)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "63f4ef8883c0b190a77f9e69c486cf380b5b4bef", "filename": "gcc/tree-ssa-loop-im.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/52a0f83980082c9995f2d8ec9b88548520fb8a5f/gcc%2Ftree-ssa-loop-im.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/52a0f83980082c9995f2d8ec9b88548520fb8a5f/gcc%2Ftree-ssa-loop-im.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-loop-im.c?ref=52a0f83980082c9995f2d8ec9b88548520fb8a5f", "patch": "@@ -2130,7 +2130,7 @@ struct sm_aux\n \n static void\n execute_sm (class loop *loop, im_mem_ref *ref,\n-\t    hash_map<im_mem_ref *, sm_aux *> &aux_map)\n+\t    hash_map<im_mem_ref *, sm_aux *> &aux_map, bool maybe_mt)\n {\n   gassign *load;\n   struct fmt_data fmt_data;\n@@ -2154,8 +2154,9 @@ execute_sm (class loop *loop, im_mem_ref *ref,\n   for_each_index (&ref->mem.ref, force_move_till, &fmt_data);\n \n   bool always_stored = ref_always_accessed_p (loop, ref, true);\n-  if (bb_in_transaction (loop_preheader_edge (loop)->src)\n-      || (! flag_store_data_races && ! always_stored))\n+  if (maybe_mt\n+      && (bb_in_transaction (loop_preheader_edge (loop)->src)\n+\t  || (! flag_store_data_races && ! always_stored)))\n     multi_threaded_model_p = true;\n \n   if (multi_threaded_model_p)\n@@ -2244,7 +2245,7 @@ execute_sm_exit (class loop *loop, edge ex, vec<seq_entry> &seq,\n       else\n \t{\n \t  sm_aux *aux = *aux_map.get (ref);\n-\t  if (!aux->store_flag)\n+\t  if (!aux->store_flag || kind == sm_ord)\n \t    {\n \t      gassign *store;\n \t      store = gimple_build_assign (unshare_expr (ref->mem.ref),\n@@ -2630,7 +2631,7 @@ hoist_memory_references (class loop *loop, bitmap mem_refs,\n   EXECUTE_IF_SET_IN_BITMAP (mem_refs, 0, i, bi)\n     {\n       ref = memory_accesses.refs_list[i];\n-      execute_sm (loop, ref, aux_map);\n+      execute_sm (loop, ref, aux_map, bitmap_bit_p (refs_not_supported, i));\n     }\n \n   /* Materialize ordered store sequences on exits.  */"}]}