{"sha": "3474db0e5e5abbb13fe33a223a7719914013d9bd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzQ3NGRiMGU1ZTVhYmJiMTNmZTMzYTIyM2E3NzE5OTE0MDEzZDliZA==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-30T05:32:58Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-06-30T05:32:58Z"}, "message": "(expand_end_case): Pass 1 as UNSIGNEDP to emit_cmp_insn when handling wide values.\n\n(expand_end_case): Pass 1 as UNSIGNEDP to emit_cmp_insn\nwhen handling wide values.\nSave original minval in orig_minval and use for making the table.\n\nFrom-SVN: r4800", "tree": {"sha": "b687721834026f6fea33f2e1f5f3854caeb8a4b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b687721834026f6fea33f2e1f5f3854caeb8a4b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3474db0e5e5abbb13fe33a223a7719914013d9bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3474db0e5e5abbb13fe33a223a7719914013d9bd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3474db0e5e5abbb13fe33a223a7719914013d9bd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3474db0e5e5abbb13fe33a223a7719914013d9bd/comments", "author": null, "committer": null, "parents": [{"sha": "3c84bf1b0f6a338cef5cf5e5e7d2c08a1bf64a3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c84bf1b0f6a338cef5cf5e5e7d2c08a1bf64a3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c84bf1b0f6a338cef5cf5e5e7d2c08a1bf64a3d"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "72fa81467b30dc3f55e011e061733d7efc370284", "filename": "gcc/stmt.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3474db0e5e5abbb13fe33a223a7719914013d9bd/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3474db0e5e5abbb13fe33a223a7719914013d9bd/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=3474db0e5e5abbb13fe33a223a7719914013d9bd", "patch": "@@ -3685,7 +3685,7 @@ void\n expand_end_case (orig_index)\n      tree orig_index;\n {\n-  tree minval, maxval, range;\n+  tree minval, maxval, range, orig_minval;\n   rtx default_label = 0;\n   register struct case_node *n;\n   int count;\n@@ -3778,6 +3778,8 @@ expand_end_case (orig_index)\n \t    count++;\n \t}\n \n+      orig_minval = minval;\n+\n       /* Compute span of values.  */\n       if (count != 0)\n \trange = fold (build (MINUS_EXPR, TREE_TYPE (index_expr),\n@@ -3789,6 +3791,7 @@ expand_end_case (orig_index)\n \t  emit_queue ();\n \t  emit_jump (default_label);\n \t}\n+\n       /* If range of values is much bigger than number of values,\n \t make a sequence of conditional branches instead of a dispatch.\n \t If the switch-index is a constant, do it this way\n@@ -3924,7 +3927,7 @@ expand_end_case (orig_index)\n \t\t\t\t      index_expr, minval);\n \t\t  minval = integer_zero_node;\n \t\t  index = expand_expr (index_expr, NULL_RTX, VOIDmode, 0);\n-\t\t  emit_cmp_insn (rangertx, index, LTU, NULL_RTX, omode, 0, 0);\n+\t\t  emit_cmp_insn (rangertx, index, LTU, NULL_RTX, omode, 1, 0);\n \t\t  emit_jump_insn (gen_bltu (default_label));\n \t\t  /* Now we can safely truncate.  */\n \t\t  index = convert_to_mode (index_mode, index, 0);\n@@ -3978,13 +3981,13 @@ expand_end_case (orig_index)\n \t  for (n = thiscase->data.case_stmt.case_list; n; n = n->right)\n \t    {\n \t      register HOST_WIDE_INT i\n-\t\t= TREE_INT_CST_LOW (n->low) - TREE_INT_CST_LOW (minval);\n+\t\t= TREE_INT_CST_LOW (n->low) - TREE_INT_CST_LOW (orig_minval);\n \n \t      while (1)\n \t\t{\n \t\t  labelvec[i]\n \t\t    = gen_rtx (LABEL_REF, Pmode, label_rtx (n->code_label));\n-\t\t  if (i + TREE_INT_CST_LOW (minval)\n+\t\t  if (i + TREE_INT_CST_LOW (orig_minval)\n \t\t      == TREE_INT_CST_LOW (n->high))\n \t\t    break;\n \t\t  i++;"}]}