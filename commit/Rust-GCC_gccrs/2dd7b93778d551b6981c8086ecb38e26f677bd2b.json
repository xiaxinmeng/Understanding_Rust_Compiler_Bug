{"sha": "2dd7b93778d551b6981c8086ecb38e26f677bd2b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmRkN2I5Mzc3OGQ1NTFiNjk4MWM4MDg2ZWNiMzhlMjZmNjc3YmQyYg==", "commit": {"author": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-09-28T07:12:33Z"}, "committer": {"name": "Alan Modra", "email": "amodra@gmail.com", "date": "2020-10-01T01:04:48Z"}, "message": "[RS6000] Adjust gcc asm for power10\n\nGenerate assembly with .localentry,1 functions using @notoc calls.\nThis patch makes libgcc.a asm look the same as power10 pcrel as far as\ntoc/notoc is concerned.\n\nOtherwise calling between functions that advertise as using the TOC\nand those that don't, will require linker call stubs in statically\nlinked code.\n\ngcc/\n\t* config/rs6000/ppc-asm.h: Support __PCREL__ code.\nlibgcc/\n\t* config/rs6000/morestack.S,\n\t* config/rs6000/tramp.S: Support __PCREL__ code.\nlibitm/\n\t* config/powerpc/sjlj.S: Support __PCREL__ code.", "tree": {"sha": "513fb58bfdd39b9e1778ce3e2f1ae7f5d92d7897", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/513fb58bfdd39b9e1778ce3e2f1ae7f5d92d7897"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2dd7b93778d551b6981c8086ecb38e26f677bd2b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd7b93778d551b6981c8086ecb38e26f677bd2b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dd7b93778d551b6981c8086ecb38e26f677bd2b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dd7b93778d551b6981c8086ecb38e26f677bd2b/comments", "author": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "amodra", "id": 6006325, "node_id": "MDQ6VXNlcjYwMDYzMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6006325?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amodra", "html_url": "https://github.com/amodra", "followers_url": "https://api.github.com/users/amodra/followers", "following_url": "https://api.github.com/users/amodra/following{/other_user}", "gists_url": "https://api.github.com/users/amodra/gists{/gist_id}", "starred_url": "https://api.github.com/users/amodra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amodra/subscriptions", "organizations_url": "https://api.github.com/users/amodra/orgs", "repos_url": "https://api.github.com/users/amodra/repos", "events_url": "https://api.github.com/users/amodra/events{/privacy}", "received_events_url": "https://api.github.com/users/amodra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6be439b37702f6ac4c2fc447c6f3ed1042b80a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6be439b37702f6ac4c2fc447c6f3ed1042b80a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6be439b37702f6ac4c2fc447c6f3ed1042b80a3"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "e0bce9c5aec227b66029e8ed4c67823d9ec6ec92", "filename": "gcc/config/rs6000/ppc-asm.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd7b93778d551b6981c8086ecb38e26f677bd2b/gcc%2Fconfig%2Frs6000%2Fppc-asm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd7b93778d551b6981c8086ecb38e26f677bd2b/gcc%2Fconfig%2Frs6000%2Fppc-asm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fppc-asm.h?ref=2dd7b93778d551b6981c8086ecb38e26f677bd2b", "patch": "@@ -262,6 +262,14 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n #undef toc\n \n #define FUNC_NAME(name) GLUE(__USER_LABEL_PREFIX__,name)\n+#ifdef __PCREL__\n+#define JUMP_TARGET(name) GLUE(FUNC_NAME(name),@notoc)\n+#define FUNC_START(name) \\\n+\t.type FUNC_NAME(name),@function; \\\n+\t.globl FUNC_NAME(name); \\\n+FUNC_NAME(name): \\\n+\t.localentry FUNC_NAME(name),1\n+#else\n #define JUMP_TARGET(name) FUNC_NAME(name)\n #define FUNC_START(name) \\\n \t.type FUNC_NAME(name),@function; \\\n@@ -270,6 +278,7 @@ FUNC_NAME(name): \\\n 0:\taddis 2,12,(.TOC.-0b)@ha; \\\n \taddi 2,2,(.TOC.-0b)@l; \\\n \t.localentry FUNC_NAME(name),.-FUNC_NAME(name)\n+#endif /* !__PCREL__ */\n \n #define HIDDEN_FUNC(name) \\\n   FUNC_START(name) \\"}, {"sha": "ac33c882c3060048ed31dca147846ea4e382acc2", "filename": "libgcc/config/rs6000/morestack.S", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd7b93778d551b6981c8086ecb38e26f677bd2b/libgcc%2Fconfig%2Frs6000%2Fmorestack.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd7b93778d551b6981c8086ecb38e26f677bd2b/libgcc%2Fconfig%2Frs6000%2Fmorestack.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Fmorestack.S?ref=2dd7b93778d551b6981c8086ecb38e26f677bd2b", "patch": "@@ -55,11 +55,18 @@\n \t.type name,@function;\t\t\t\t\\\n name##:\n \n+#ifdef __PCREL__\n+#define ENTRY(name)\t\t\t\t\t\\\n+\tENTRY0(name);\t\t\t\t\t\\\n+\t.localentry name, 1\n+#define JUMP_TARGET(name) name##@notoc\n+#else\n #define ENTRY(name)\t\t\t\t\t\\\n \tENTRY0(name);\t\t\t\t\t\\\n 0:\taddis %r2,%r12,.TOC.-0b@ha;\t\t\t\\\n         addi %r2,%r2,.TOC.-0b@l;\t\t\t\\\n \t.localentry name, .-name\n+#endif\n \n #else\n \n@@ -81,6 +88,9 @@ BODY_LABEL(name)##:\n \n #define SIZE(name) .size name, .-BODY_LABEL(name)\n \n+#ifndef JUMP_TARGET\n+#define JUMP_TARGET(name) name\n+#endif\n \n \t.text\n # Just like __morestack, but with larger excess allocation\n@@ -156,15 +166,15 @@ ENTRY0(__morestack)\n \tstdu %r1,-MORESTACK_FRAMESIZE(%r1)\n \n \t# void __morestack_block_signals (void)\n-\tbl __morestack_block_signals\n+\tbl JUMP_TARGET(__morestack_block_signals)\n \n \t# void *__generic_morestack (size_t *pframe_size,\n \t#\t\t\t     void *old_stack,\n \t#\t\t\t     size_t param_size)\n \taddi %r3,%r29,NEWSTACKSIZE_SAVE\n \tmr %r4,%r29\n \tli %r5,0\t\t\t# no copying from old stack\n-\tbl __generic_morestack\n+\tbl JUMP_TARGET(__generic_morestack)\n \n # Start using new stack\n \tstdu %r29,-32(%r3)\t\t# back-chain\n@@ -183,7 +193,7 @@ ENTRY0(__morestack)\n \tstd %r3,-0x7000-64(%r13)\t# tcbhead_t.__private_ss\n \n \t# void __morestack_unblock_signals (void)\n-\tbl __morestack_unblock_signals\n+\tbl JUMP_TARGET(__morestack_unblock_signals)\n \n # Set up for a call to the target function, located 3\n # instructions after __morestack's return address.\n@@ -218,11 +228,11 @@ ENTRY0(__morestack)\n \tstd %r10,PARAMREG_SAVE+56(%r29)\n #endif\n \n-\tbl __morestack_block_signals\n+\tbl JUMP_TARGET(__morestack_block_signals)\n \n \t# void *__generic_releasestack (size_t *pavailable)\n \taddi %r3,%r29,NEWSTACKSIZE_SAVE\n-\tbl __generic_releasestack\n+\tbl JUMP_TARGET(__generic_releasestack)\n \n # Reset __private_ss stack guard to value for old stack\n \tld %r12,NEWSTACKSIZE_SAVE(%r29)\n@@ -231,7 +241,7 @@ ENTRY0(__morestack)\n .LEHE0:\n \tstd %r3,-0x7000-64(%r13)\t# tcbhead_t.__private_ss\n \n-\tbl __morestack_unblock_signals\n+\tbl JUMP_TARGET(__morestack_unblock_signals)\n \n # Use old stack again.\n \tmr %r1,%r29\n@@ -260,13 +270,15 @@ cleanup:\n \tstd %r3,PARAMREG_SAVE(%r29)\t# Save exception header\n \t# size_t __generic_findstack (void *stack)\n \tmr %r3,%r29\n-\tbl __generic_findstack\n+\tbl JUMP_TARGET(__generic_findstack)\n \tsub %r3,%r29,%r3\n \taddi %r3,%r3,BACKOFF\n \tstd %r3,-0x7000-64(%r13)\t# tcbhead_t.__private_ss\n \tld %r3,PARAMREG_SAVE(%r29)\n-\tbl _Unwind_Resume\n+\tbl JUMP_TARGET(_Unwind_Resume)\n+#ifndef __PCREL__\n \tnop\n+#endif\n \t.cfi_endproc\n \tSIZE (__morestack)\n \n@@ -310,7 +322,7 @@ ENTRY(__stack_split_initialize)\n \t# void __generic_morestack_set_initial_sp (void *sp, size_t len)\n \tmr %r3,%r1\n \tli %r4, 0x4000\n-\tb __generic_morestack_set_initial_sp\n+\tb JUMP_TARGET(__generic_morestack_set_initial_sp)\n # The lack of .cfi_endproc here is deliberate.  This function and the\n # following ones can all use the default FDE.\n \tSIZE (__stack_split_initialize)"}, {"sha": "b165faa31ec7ba04661c2eaf1242ea8ae69546de", "filename": "libgcc/config/rs6000/tramp.S", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd7b93778d551b6981c8086ecb38e26f677bd2b/libgcc%2Fconfig%2Frs6000%2Ftramp.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd7b93778d551b6981c8086ecb38e26f677bd2b/libgcc%2Fconfig%2Frs6000%2Ftramp.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgcc%2Fconfig%2Frs6000%2Ftramp.S?ref=2dd7b93778d551b6981c8086ecb38e26f677bd2b", "patch": "@@ -140,15 +140,21 @@ trampoline_size = .-trampoline_initial\n /* R5 = function address */\n /* R6 = static chain */\n \n+#ifndef __PCREL__\n \t.pushsection \".toc\",\"aw\"\n .LC0:\n \t.quad\ttrampoline_initial-8\n \t.popsection\n+#endif\n \n FUNC_START(__trampoline_setup)\n \t.cfi_startproc\n+#ifdef __PCREL__\n+\tpla 7,(trampoline_initial-8)@pcrel\n+#else\n \taddis 7,2,.LC0@toc@ha\n \tld 7,.LC0@toc@l(7)\t/* trampoline address -8 */\n+#endif\n \n \tli\tr8,trampoline_size\t/* verify that the trampoline is big enough */\n \tcmpw\tcr1,r8,r4"}, {"sha": "bcb0e73a2852ad60c77a700d11c76475466a8070", "filename": "libitm/config/powerpc/sjlj.S", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2dd7b93778d551b6981c8086ecb38e26f677bd2b/libitm%2Fconfig%2Fpowerpc%2Fsjlj.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2dd7b93778d551b6981c8086ecb38e26f677bd2b/libitm%2Fconfig%2Fpowerpc%2Fsjlj.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libitm%2Fconfig%2Fpowerpc%2Fsjlj.S?ref=2dd7b93778d551b6981c8086ecb38e26f677bd2b", "patch": "@@ -26,7 +26,23 @@\n \n #include \"asmcfi.h\"\n \n-#if defined(__powerpc64__) && _CALL_ELF == 2\n+#if defined(__powerpc64__) && _CALL_ELF == 2 && defined(__PCREL__)\n+.macro FUNC name\n+\t.globl\t\\name\n+\t.type\t\\name, @function\n+\\name:\n+\t.localentry \\name, 1\n+.endm\n+.macro END name\n+\t.size\t\\name, . - \\name\n+.endm\n+.macro HIDDEN name\n+\t.hidden\t\\name\n+.endm\n+.macro CALL name\n+\tbl\t\\name @notoc\n+.endm\n+#elif defined(__powerpc64__) && _CALL_ELF == 2\n .macro FUNC name\n         .globl  \\name\n         .type   \\name, @function"}]}