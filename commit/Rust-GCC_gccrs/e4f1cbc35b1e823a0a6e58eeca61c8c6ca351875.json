{"sha": "e4f1cbc35b1e823a0a6e58eeca61c8c6ca351875", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTRmMWNiYzM1YjFlODIzYTBhNmU1OGVlY2E2MWM4YzZjYTM1MTg3NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-20T08:24:19Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2020-07-20T08:24:19Z"}, "message": "gimple-fold: Handle bitfields in fold_const_aggregate_ref_1 [PR93121]\n\nWhen working on __builtin_bit_cast that needs to handle bitfields too,\nI've made the following change to handle at least some bitfields in\nfold_const_aggregate_ref_1 (those that have integral representative).\nIt already handles some, but only those that start and end at byte\nboundaries.\n\n2020-07-20  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libstdc++/93121\n\t* gimple-fold.c (fold_const_aggregate_ref_1): For COMPONENT_REF\n\tof a bitfield not aligned on byte boundaries try to\n\tfold_ctor_reference DECL_BIT_FIELD_REPRESENTATIVE if any and\n\tadjust it depending on endianity.\n\n\t* gcc.dg/tree-ssa/pr93121-2.c: New test.", "tree": {"sha": "baee51a3e02e958107cd446bb1587507df747e58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/baee51a3e02e958107cd446bb1587507df747e58"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e4f1cbc35b1e823a0a6e58eeca61c8c6ca351875", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f1cbc35b1e823a0a6e58eeca61c8c6ca351875", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e4f1cbc35b1e823a0a6e58eeca61c8c6ca351875", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e4f1cbc35b1e823a0a6e58eeca61c8c6ca351875/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83b171655dc0785262a444f5d5c2be7195977987", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/83b171655dc0785262a444f5d5c2be7195977987", "html_url": "https://github.com/Rust-GCC/gccrs/commit/83b171655dc0785262a444f5d5c2be7195977987"}], "stats": {"total": 82, "additions": 80, "deletions": 2}, "files": [{"sha": "81c77f7e8b458cf484f434e1ea65d2b5299d34a5", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 58, "deletions": 2, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f1cbc35b1e823a0a6e58eeca61c8c6ca351875/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f1cbc35b1e823a0a6e58eeca61c8c6ca351875/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=e4f1cbc35b1e823a0a6e58eeca61c8c6ca351875", "patch": "@@ -7189,8 +7189,64 @@ fold_const_aggregate_ref_1 (tree t, tree (*valueize) (tree))\n       if (maybe_lt (offset, 0))\n \treturn NULL_TREE;\n \n-      return fold_ctor_reference (TREE_TYPE (t), ctor, offset, size,\n-\t\t\t\t  base);\n+      tem = fold_ctor_reference (TREE_TYPE (t), ctor, offset, size, base);\n+      if (tem)\n+\treturn tem;\n+\n+      /* For bit field reads try to read the representative and\n+\t adjust.  */\n+      if (TREE_CODE (t) == COMPONENT_REF\n+\t  && DECL_BIT_FIELD (TREE_OPERAND (t, 1))\n+\t  && DECL_BIT_FIELD_REPRESENTATIVE (TREE_OPERAND (t, 1)))\n+\t{\n+\t  HOST_WIDE_INT csize, coffset;\n+\t  tree field = TREE_OPERAND (t, 1);\n+\t  tree repr = DECL_BIT_FIELD_REPRESENTATIVE (field);\n+\t  if (INTEGRAL_TYPE_P (TREE_TYPE (repr))\n+\t      && size.is_constant (&csize)\n+\t      && offset.is_constant (&coffset)\n+\t      && (coffset % BITS_PER_UNIT != 0\n+\t\t  || csize % BITS_PER_UNIT != 0)\n+\t      && !reverse\n+\t      && BYTES_BIG_ENDIAN == WORDS_BIG_ENDIAN)\n+\t    {\n+\t      poly_int64 bitoffset;\n+\t      poly_uint64 field_offset, repr_offset;\n+\t      if (poly_int_tree_p (DECL_FIELD_OFFSET (field), &field_offset)\n+\t\t  && poly_int_tree_p (DECL_FIELD_OFFSET (repr), &repr_offset))\n+\t\tbitoffset = (field_offset - repr_offset) * BITS_PER_UNIT;\n+\t      else\n+\t\tbitoffset = 0;\n+\t      bitoffset += (tree_to_uhwi (DECL_FIELD_BIT_OFFSET (field))\n+\t\t\t    - tree_to_uhwi (DECL_FIELD_BIT_OFFSET (repr)));\n+\t      HOST_WIDE_INT bitoff;\n+\t      int diff = (TYPE_PRECISION (TREE_TYPE (repr))\n+\t\t\t  - TYPE_PRECISION (TREE_TYPE (field)));\n+\t      if (bitoffset.is_constant (&bitoff)\n+\t\t  && bitoff >= 0\n+\t\t  && bitoff <= diff)\n+\t\t{\n+\t\t  offset -= bitoff;\n+\t\t  size = tree_to_uhwi (DECL_SIZE (repr));\n+\n+\t\t  tem = fold_ctor_reference (TREE_TYPE (repr), ctor, offset,\n+\t\t\t\t\t     size, base);\n+\t\t  if (tem && TREE_CODE (tem) == INTEGER_CST)\n+\t\t    {\n+\t\t      if (!BYTES_BIG_ENDIAN)\n+\t\t\ttem = wide_int_to_tree (TREE_TYPE (field),\n+\t\t\t\t\t\twi::lrshift (wi::to_wide (tem),\n+\t\t\t\t\t\t\t     bitoff));\n+\t\t      else\n+\t\t\ttem = wide_int_to_tree (TREE_TYPE (field),\n+\t\t\t\t\t\twi::lrshift (wi::to_wide (tem),\n+\t\t\t\t\t\t\t     diff - bitoff));\n+\t\t      return tem;\n+\t\t    }\n+\t\t}\n+\t    }\n+\t}\n+      break;\n \n     case REALPART_EXPR:\n     case IMAGPART_EXPR:"}, {"sha": "323dca62f955d66416afb94b15c9a032ebec7276", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr93121-2.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e4f1cbc35b1e823a0a6e58eeca61c8c6ca351875/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93121-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e4f1cbc35b1e823a0a6e58eeca61c8c6ca351875/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93121-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr93121-2.c?ref=e4f1cbc35b1e823a0a6e58eeca61c8c6ca351875", "patch": "@@ -0,0 +1,22 @@\n+/* PR libstdc++/93121 */\n+/* { dg-do compile { target { ilp32 || lp64 } } } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+\n+union U { int a[3]; struct S { int d; int a : 3; int b : 24; int c : 5; int e; } b; };\n+const union U u = { .a = { 0x7efa3412, 0x5a876543, 0x1eeffeed } };\n+int a, b, c;\n+\n+void\n+foo ()\n+{\n+  a = u.b.a;\n+  b = u.b.b;\n+  c = u.b.c;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"a = 3;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"b = 5303464;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"c = 11;\" 1 \"optimized\" { target le } } } */\n+/* { dg-final { scan-tree-dump-times \"a = 2;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"b = -2868438;\" 1 \"optimized\" { target be } } } */\n+/* { dg-final { scan-tree-dump-times \"c = 3;\" 1 \"optimized\" { target be } } } */"}]}