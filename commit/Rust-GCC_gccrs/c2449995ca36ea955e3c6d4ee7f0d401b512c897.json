{"sha": "c2449995ca36ea955e3c6d4ee7f0d401b512c897", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzI0NDk5OTVjYTM2ZWE5NTVlM2M2ZDRlZTdmMGQ0MDFiNTEyYzg5Nw==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-06-02T01:37:04Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2020-06-02T01:37:04Z"}, "message": "c++: constrained lambda inside template [PR92633]\n\nWhen regenerating a constrained lambda during instantiation of an\nenclosing template, we are forgetting to substitute into the lambda's\nconstraints.  Fix this by substituting through the constraints during\ntsubst_lambda_expr.\n\ngcc/cp/ChangeLog:\n\n\tPR c++/92633\n\tPR c++/92838\n\t* pt.c (tsubst_function_decl): Don't do set_constraints when\n\tregenerating a lambda.\n\t(tsubst_lambda_expr): Substitute into the lambda's constraints\n\tand do set_constraints here.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/92633\n\tPR c++/92838\n\t* g++.dg/cpp2a/concepts-lambda11.C: New test.\n\t* g++.dg/cpp2a/concepts-lambda12.C: New test.", "tree": {"sha": "5e828f15585a6625a8755ae0e91d6c2ffed80daf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e828f15585a6625a8755ae0e91d6c2ffed80daf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c2449995ca36ea955e3c6d4ee7f0d401b512c897", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2449995ca36ea955e3c6d4ee7f0d401b512c897", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2449995ca36ea955e3c6d4ee7f0d401b512c897", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2449995ca36ea955e3c6d4ee7f0d401b512c897/comments", "author": null, "committer": null, "parents": [{"sha": "4a9aa9dec7fc413654807890061a4d7df8a1c5e7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a9aa9dec7fc413654807890061a4d7df8a1c5e7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a9aa9dec7fc413654807890061a4d7df8a1c5e7"}], "stats": {"total": 48, "additions": 47, "deletions": 1}, "files": [{"sha": "907ca879c7319be10c0e1873360178d814e6a920", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2449995ca36ea955e3c6d4ee7f0d401b512c897/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2449995ca36ea955e3c6d4ee7f0d401b512c897/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=c2449995ca36ea955e3c6d4ee7f0d401b512c897", "patch": "@@ -13854,7 +13854,10 @@ tsubst_function_decl (tree t, tree args, tsubst_flags_t complain,\n      don't substitute through the constraints; that's only done when\n      they are checked.  */\n   if (tree ci = get_constraints (t))\n-    set_constraints (r, ci);\n+    /* Unless we're regenerating a lambda, in which case we'll set the\n+       lambda's constraints in tsubst_lambda_expr.  */\n+    if (!lambda_fntype)\n+      set_constraints (r, ci);\n \n   if (DECL_FRIEND_P (t) && DECL_FRIEND_CONTEXT (t))\n     SET_DECL_FRIEND_CONTEXT (r,\n@@ -19029,6 +19032,17 @@ tsubst_lambda_expr (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t  finish_member_declaration (fn);\n \t}\n \n+      if (tree ci = get_constraints (oldfn))\n+\t{\n+\t  /* Substitute into the lambda's constraints.  */\n+\t  if (oldtmpl)\n+\t    ++processing_template_decl;\n+\t  ci = tsubst_constraint_info (ci, args, complain, in_decl);\n+\t  if (oldtmpl)\n+\t    --processing_template_decl;\n+\t  set_constraints (fn, ci);\n+\t}\n+\n       /* Let finish_function set this.  */\n       DECL_DECLARED_CONSTEXPR_P (fn) = false;\n "}, {"sha": "dd9cd4e2344492dafa6a948ce61e40aafd7a6270", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-lambda11.C", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2449995ca36ea955e3c6d4ee7f0d401b512c897/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda11.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2449995ca36ea955e3c6d4ee7f0d401b512c897/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda11.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda11.C?ref=c2449995ca36ea955e3c6d4ee7f0d401b512c897", "patch": "@@ -0,0 +1,17 @@\n+// PR c++/92838\n+// { dg-do compile { target c++20 } }\n+\n+template<int N>\n+auto foo()\n+{\n+  [] () requires (N != 0) { }(); // { dg-error \"no match\" }\n+  [] () requires (N == 0) { }();\n+\n+  [] <int M=1> () requires (N == M) { }(); // { dg-error \"no match\" }\n+  [] <int M=1> () requires (N != M) { }();\n+}\n+\n+void bar()\n+{\n+  foo<0>();\n+}"}, {"sha": "2bc9fd0bb25ed31379201d1fedcbb0a932af1190", "filename": "gcc/testsuite/g++.dg/cpp2a/concepts-lambda12.C", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c2449995ca36ea955e3c6d4ee7f0d401b512c897/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda12.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c2449995ca36ea955e3c6d4ee7f0d401b512c897/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda12.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fconcepts-lambda12.C?ref=c2449995ca36ea955e3c6d4ee7f0d401b512c897", "patch": "@@ -0,0 +1,15 @@\n+// PR c++/92633\n+// { dg-do compile { target c++20 } }\n+\n+template<class A, class B>\n+concept different_than = !__is_same_as(A, B);\n+\n+template<class B>\n+auto diff(B) {\n+    return [](different_than<B> auto a) {};\n+}\n+\n+int main() {\n+    diff(42)(\"\");\n+    diff(42)(42); // { dg-error \"no match\" }\n+}"}]}