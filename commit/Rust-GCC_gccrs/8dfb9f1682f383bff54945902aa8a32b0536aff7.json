{"sha": "8dfb9f1682f383bff54945902aa8a32b0536aff7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRmYjlmMTY4MmYzODNiZmY1NDk0NTkwMmFhOGEzMmIwNTM2YWZmNw==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-16T12:56:44Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2011-04-16T12:56:44Z"}, "message": "sse.md (sseunpackmode): New mode attribute.\n\n\t* config/i386/sse.md (sseunpackmode): New mode attribute.\n\t(ssepackmode): Ditto.\n\t(vec_pack_trunc_<mode>): Macroize expander from\n\tvec_pack_trunc_{v8hi,v4si,v2di} using VI248_128 mode iterator.\n\t(vec_unpacks_lo_<mode>): Macroize expander from\n\tvec_unpacks_lo_{v16qi,v8hi,v4si} using VI124_128 mode iterator.\n\t(vec_unpacks_hi_<mode>): Macroize expander from\n\tvec_unpacks_hi_{v16qi,v8hi,v4si} using VI124_128 mode iterator.\n\t(vec_unpacku_lo_<mode>): Macroize expander from\n\tvec_unpacku_lo_{v16qi,v8hi,v4si} using VI124_128 mode iterator.\n\t(vec_unpacku_hi_<mode>): Macroize expander from\n\tvec_unpacks_hi_{v16qi,v8hi,v4si} using VI124_128 mode iterator.\n\t* config/i386/i386.c (ix86_expand_sse_unpack): Merge with\n\tix86_expand_sse4_unpack.\n\t* config/i386/i386-protos.h (ix86_expand_sse4_unpack): Remove.\n\nFrom-SVN: r172585", "tree": {"sha": "0c17e3d4b098d04269c3a307782431cc948d344a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0c17e3d4b098d04269c3a307782431cc948d344a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8dfb9f1682f383bff54945902aa8a32b0536aff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dfb9f1682f383bff54945902aa8a32b0536aff7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8dfb9f1682f383bff54945902aa8a32b0536aff7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8dfb9f1682f383bff54945902aa8a32b0536aff7/comments", "author": null, "committer": null, "parents": [{"sha": "b984326076197af94824c4c87b4a814bbaf9be71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b984326076197af94824c4c87b4a814bbaf9be71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b984326076197af94824c4c87b4a814bbaf9be71"}], "stats": {"total": 422, "additions": 153, "deletions": 269}, "files": [{"sha": "da5797e3bd5b03553c598864c3a722f81a202a35", "filename": "gcc/ChangeLog", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dfb9f1682f383bff54945902aa8a32b0536aff7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dfb9f1682f383bff54945902aa8a32b0536aff7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=8dfb9f1682f383bff54945902aa8a32b0536aff7", "patch": "@@ -1,3 +1,21 @@\n+2011-04-16  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/sse.md (sseunpackmode): New mode attribute.\n+\t(ssepackmode): Ditto.\n+\t(vec_pack_trunc_<mode>): Macroize expander from\n+\tvec_pack_trunc_{v8hi,v4si,v2di} using VI248_128 mode iterator.\n+\t(vec_unpacks_lo_<mode>): Macroize expander from\n+\tvec_unpacks_lo_{v16qi,v8hi,v4si} using VI124_128 mode iterator.\n+\t(vec_unpacks_hi_<mode>): Macroize expander from\n+\tvec_unpacks_hi_{v16qi,v8hi,v4si} using VI124_128 mode iterator.\n+\t(vec_unpacku_lo_<mode>): Macroize expander from\n+\tvec_unpacku_lo_{v16qi,v8hi,v4si} using VI124_128 mode iterator.\n+\t(vec_unpacku_hi_<mode>): Macroize expander from\n+\tvec_unpacks_hi_{v16qi,v8hi,v4si} using VI124_128 mode iterator.\n+\t* config/i386/i386.c (ix86_expand_sse_unpack): Merge with\n+\tix86_expand_sse4_unpack.\n+\t* config/i386/i386-protos.h (ix86_expand_sse4_unpack): Remove.\n+\n 2011-04-16  Jan Hubicka  <jh@suse.cz>\n \n \t* cgraphbuild.c: Include ipa-inline.h.\n@@ -10,23 +28,25 @@\n \tand disregard_inline_limits flags.\n \t(cgrpah_global_info): Remove estimated_stack_size, stack_frame_offset,\n \ttime, size, estimated_growth.\n-\t* ipa-cp.c (ipcp_versionable_function_p, ipcp_generate_summary): Update.\n+\t* ipa-cp.c (ipcp_versionable_function_p, ipcp_generate_summary):\n+\tUpdate.\n \t* cgraphunit.c (cgraph_decide_is_function_needed): Use\n \tDECL_DISREGARD_INLINE_LIMITS.\n \t(cgraph_analyze_function): Do not initialize\n \tnode->local.disregard_inline_limits.\n \t* lto-cgraph.c (lto_output_node, input_overwrite_node): Do not stream\n \tinlinable, versionable and disregard_inline_limits.\n \t* ipa-inline.c (cgraph_clone_inlined_nodes, cgraph_mark_inline_edge,\n-\tcgraph_check_inline_limits, cgraph_default_inline_p, cgraph_edge_badness,\n-\tupdate_caller_keys, update_callee_keys, add_new_edges_to_heap): Update.\n-\t(cgraph_decide_inlining_of_small_function): Update; set CIF_FUNCTION_NOT_INLINABLE\n-\tfor uninlinable functions.\n+\tcgraph_check_inline_limits, cgraph_default_inline_p,\n+\tcgraph_edge_badness, update_caller_keys, update_callee_keys,\n+\tadd_new_edges_to_heap): Update.\n+\t(cgraph_decide_inlining_of_small_function): Update; set\n+\tCIF_FUNCTION_NOT_INLINABLE for uninlinable functions.\n \t(cgraph_decide_inlining, cgraph_edge_early_inlinable_p,\n \tcgraph_decide_inlining_incrementally): Update.\n-\t* ipa-inline.h (inline_summary): Add inlinable, versionable, disregard_inline_limits,\n-\testimated_stack_size, stack_frame_offset, time, size and estimated_growth\n-\tparameters.\n+\t* ipa-inline.h (inline_summary): Add inlinable, versionable,\n+\tdisregard_inline_limits, estimated_stack_size, stack_frame_offset,\n+\ttime, size and estimated_growth parameters.\n \t(estimate_edge_growth): Update.\n \t(initialize_inline_failed): Declare.\n \t* ipa-split.c: Include ipa-inline.h"}, {"sha": "c651687cff4dcbb6a0eea325f214f82633829d19", "filename": "gcc/config/i386/i386-protos.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dfb9f1682f383bff54945902aa8a32b0536aff7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dfb9f1682f383bff54945902aa8a32b0536aff7/gcc%2Fconfig%2Fi386%2Fi386-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-protos.h?ref=8dfb9f1682f383bff54945902aa8a32b0536aff7", "patch": "@@ -114,7 +114,6 @@ extern bool ix86_expand_fp_movcc (rtx[]);\n extern bool ix86_expand_fp_vcond (rtx[]);\n extern bool ix86_expand_int_vcond (rtx[]);\n extern void ix86_expand_sse_unpack (rtx[], bool, bool);\n-extern void ix86_expand_sse4_unpack (rtx[], bool, bool);\n extern bool ix86_expand_int_addcc (rtx[]);\n extern rtx ix86_expand_call (rtx, rtx, rtx, rtx, rtx, int);\n extern void ix86_split_call_vzeroupper (rtx, rtx);"}, {"sha": "b6d41f08dd01c001b5b82db26c1766300e363e15", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 68, "deletions": 72, "changes": 140, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dfb9f1682f383bff54945902aa8a32b0536aff7/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dfb9f1682f383bff54945902aa8a32b0536aff7/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=8dfb9f1682f383bff54945902aa8a32b0536aff7", "patch": "@@ -19100,91 +19100,87 @@ void\n ix86_expand_sse_unpack (rtx operands[2], bool unsigned_p, bool high_p)\n {\n   enum machine_mode imode = GET_MODE (operands[1]);\n-  rtx (*unpack)(rtx, rtx, rtx);\n-  rtx se, dest;\n+  rtx tmp, dest;\n \n-  switch (imode)\n+  if (TARGET_SSE4_1)\n     {\n-    case V16QImode:\n-      if (high_p)\n-        unpack = gen_vec_interleave_highv16qi;\n-      else\n-        unpack = gen_vec_interleave_lowv16qi;\n-      break;\n-    case V8HImode:\n-      if (high_p)\n-        unpack = gen_vec_interleave_highv8hi;\n-      else\n-        unpack = gen_vec_interleave_lowv8hi;\n-      break;\n-    case V4SImode:\n+      rtx (*unpack)(rtx, rtx);\n+\n+      switch (imode)\n+\t{\n+\tcase V16QImode:\n+\t  if (unsigned_p)\n+\t    unpack = gen_sse4_1_zero_extendv8qiv8hi2;\n+\t  else\n+\t    unpack = gen_sse4_1_sign_extendv8qiv8hi2;\n+\t  break;\n+\tcase V8HImode:\n+\t  if (unsigned_p)\n+\t    unpack = gen_sse4_1_zero_extendv4hiv4si2;\n+\t  else\n+\t    unpack = gen_sse4_1_sign_extendv4hiv4si2;\n+\t  break;\n+\tcase V4SImode:\n+\t  if (unsigned_p)\n+\t    unpack = gen_sse4_1_zero_extendv2siv2di2;\n+\t  else\n+\t    unpack = gen_sse4_1_sign_extendv2siv2di2;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+\n       if (high_p)\n-        unpack = gen_vec_interleave_highv4si;\n+\t{\n+\t  /* Shift higher 8 bytes to lower 8 bytes.  */\n+\t  tmp = gen_reg_rtx (imode);\n+\t  emit_insn (gen_sse2_lshrv1ti3 (gen_lowpart (V1TImode, tmp),\n+\t\t\t\t\t gen_lowpart (V1TImode, operands[1]),\n+\t\t\t\t\t GEN_INT (64)));\n+\t}\n       else\n-        unpack = gen_vec_interleave_lowv4si;\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n-\n-  dest = gen_lowpart (imode, operands[0]);\n+\ttmp = operands[1];\n \n-  if (unsigned_p)\n-    se = force_reg (imode, CONST0_RTX (imode));\n+      emit_insn (unpack (operands[0], tmp));\n+    }\n   else\n-    se = ix86_expand_sse_cmp (gen_reg_rtx (imode), GT, CONST0_RTX (imode),\n-                              operands[1], pc_rtx, pc_rtx);\n-\n-  emit_insn (unpack (dest, operands[1], se));\n-}\n+    {\n+      rtx (*unpack)(rtx, rtx, rtx);\n \n-/* This function performs the same task as ix86_expand_sse_unpack,\n-   but with SSE4.1 instructions.  */\n+      switch (imode)\n+\t{\n+\tcase V16QImode:\n+\t  if (high_p)\n+\t    unpack = gen_vec_interleave_highv16qi;\n+\t  else\n+\t    unpack = gen_vec_interleave_lowv16qi;\n+\t  break;\n+\tcase V8HImode:\n+\t  if (high_p)\n+\t    unpack = gen_vec_interleave_highv8hi;\n+\t  else\n+\t    unpack = gen_vec_interleave_lowv8hi;\n+\t  break;\n+\tcase V4SImode:\n+\t  if (high_p)\n+\t    unpack = gen_vec_interleave_highv4si;\n+\t  else\n+\t    unpack = gen_vec_interleave_lowv4si;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n \n-void\n-ix86_expand_sse4_unpack (rtx operands[2], bool unsigned_p, bool high_p)\n-{\n-  enum machine_mode imode = GET_MODE (operands[1]);\n-  rtx (*unpack)(rtx, rtx);\n-  rtx src, dest;\n+      dest = gen_lowpart (imode, operands[0]);\n \n-  switch (imode)\n-    {\n-    case V16QImode:\n       if (unsigned_p)\n-\tunpack = gen_sse4_1_zero_extendv8qiv8hi2;\n+\ttmp = force_reg (imode, CONST0_RTX (imode));\n       else\n-\tunpack = gen_sse4_1_sign_extendv8qiv8hi2;\n-      break;\n-    case V8HImode:\n-      if (unsigned_p)\n-\tunpack = gen_sse4_1_zero_extendv4hiv4si2;\n-      else\n-\tunpack = gen_sse4_1_sign_extendv4hiv4si2;\n-      break;\n-    case V4SImode:\n-      if (unsigned_p)\n-\tunpack = gen_sse4_1_zero_extendv2siv2di2;\n-      else\n-\tunpack = gen_sse4_1_sign_extendv2siv2di2;\n-      break;\n-    default:\n-      gcc_unreachable ();\n-    }\n+\ttmp = ix86_expand_sse_cmp (gen_reg_rtx (imode), GT, CONST0_RTX (imode),\n+\t\t\t\t   operands[1], pc_rtx, pc_rtx);\n \n-  dest = operands[0];\n-  if (high_p)\n-    {\n-      /* Shift higher 8 bytes to lower 8 bytes.  */\n-      src = gen_reg_rtx (imode);\n-      emit_insn (gen_sse2_lshrv1ti3 (gen_lowpart (V1TImode, src),\n-\t\t\t\t     gen_lowpart (V1TImode, operands[1]),\n-\t\t\t\t     GEN_INT (64)));\n+      emit_insn (unpack (dest, operands[1], tmp));\n     }\n-  else\n-    src = operands[1];\n-\n-  emit_insn (unpack (dest, src));\n }\n \n /* Expand conditional increment or decrement using adb/sbb instructions."}, {"sha": "928bf784031fcd2be1a743cac9ced7abe905dae6", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 57, "deletions": 188, "changes": 245, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8dfb9f1682f383bff54945902aa8a32b0536aff7/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8dfb9f1682f383bff54945902aa8a32b0536aff7/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=8dfb9f1682f383bff54945902aa8a32b0536aff7", "patch": "@@ -70,6 +70,31 @@\n (define_mode_iterator VI24_128 [V8HI V4SI])\n (define_mode_iterator VI248_128 [V8HI V4SI V2DI])\n \n+;; Mapping from float mode to required SSE level\n+(define_mode_attr sse\n+  [(SF \"sse\") (DF \"sse2\")\n+   (V4SF \"sse\") (V2DF \"sse2\")\n+   (V8SF \"avx\") (V4DF \"avx\")])\n+\n+(define_mode_attr sse2\n+  [(V16QI \"sse2\") (V32QI \"avx\")\n+   (V2DI \"sse2\") (V4DI \"avx\")])\n+\n+(define_mode_attr sse3\n+  [(V16QI \"sse3\") (V32QI \"avx\")])\n+\n+(define_mode_attr sse4_1\n+  [(V4SF \"sse4_1\") (V2DF \"sse4_1\")\n+   (V8SF \"avx\") (V4DF \"avx\")])\n+\n+;; Pack/unpack vector modes\n+(define_mode_attr sseunpackmode\n+  [(V16QI \"V8HI\") (V8HI \"V4SI\") (V4SI \"V2DI\")])\n+\n+(define_mode_attr ssepackmode\n+  [(V8HI \"V16QI\") (V4SI \"V8HI\") (V2DI \"V4SI\")])\n+\n+\n \n ;; Instruction suffix for sign and zero extensions.\n (define_code_attr extsuffix [(sign_extend \"sx\") (zero_extend \"zx\")])\n@@ -126,23 +151,6 @@\n    (V2DF \"TARGET_SSE\") (V4SF \"TARGET_SSE\")\n    (V4DF \"TARGET_AVX\") (V8SF \"TARGET_AVX\")])\n \n-;; Mapping from float mode to required SSE level\n-(define_mode_attr sse\n-  [(SF \"sse\") (DF \"sse2\")\n-   (V4SF \"sse\") (V2DF \"sse2\")\n-   (V8SF \"avx\") (V4DF \"avx\")])\n-\n-(define_mode_attr sse2\n-  [(V16QI \"sse2\") (V32QI \"avx\")\n-   (V2DI \"sse2\") (V4DI \"avx\")])\n-\n-(define_mode_attr sse3\n-  [(V16QI \"sse3\") (V32QI \"avx\")])\n-\n-(define_mode_attr sse4_1\n-  [(V4SF \"sse4_1\") (V2DF \"sse4_1\")\n-   (V8SF \"avx\") (V4DF \"avx\")])\n-\n ;; Mapping from integer vector mode to mnemonic suffix\n (define_mode_attr ssevecsize [(V16QI \"b\") (V8HI \"w\") (V4SI \"d\") (V2DI \"q\")])\n \n@@ -5856,38 +5864,14 @@\n ;;\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n \n-(define_expand \"vec_pack_trunc_v8hi\"\n-  [(match_operand:V16QI 0 \"register_operand\" \"\")\n-   (match_operand:V8HI 1 \"register_operand\" \"\")\n-   (match_operand:V8HI 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n-{\n-  rtx op1 = gen_lowpart (V16QImode, operands[1]);\n-  rtx op2 = gen_lowpart (V16QImode, operands[2]);\n-  ix86_expand_vec_extract_even_odd (operands[0], op1, op2, 0);\n-  DONE;\n-})\n-\n-(define_expand \"vec_pack_trunc_v4si\"\n-  [(match_operand:V8HI 0 \"register_operand\" \"\")\n-   (match_operand:V4SI 1 \"register_operand\" \"\")\n-   (match_operand:V4SI 2 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n-{\n-  rtx op1 = gen_lowpart (V8HImode, operands[1]);\n-  rtx op2 = gen_lowpart (V8HImode, operands[2]);\n-  ix86_expand_vec_extract_even_odd (operands[0], op1, op2, 0);\n-  DONE;\n-})\n-\n-(define_expand \"vec_pack_trunc_v2di\"\n-  [(match_operand:V4SI 0 \"register_operand\" \"\")\n-   (match_operand:V2DI 1 \"register_operand\" \"\")\n-   (match_operand:V2DI 2 \"register_operand\" \"\")]\n+(define_expand \"vec_pack_trunc_<mode>\"\n+  [(match_operand:<ssepackmode> 0 \"register_operand\" \"\")\n+   (match_operand:VI248_128 1 \"register_operand\" \"\")\n+   (match_operand:VI248_128 2 \"register_operand\" \"\")]\n   \"TARGET_SSE2\"\n {\n-  rtx op1 = gen_lowpart (V4SImode, operands[1]);\n-  rtx op2 = gen_lowpart (V4SImode, operands[2]);\n+  rtx op1 = gen_lowpart (<ssepackmode>mode, operands[1]);\n+  rtx op2 = gen_lowpart (<ssepackmode>mode, operands[2]);\n   ix86_expand_vec_extract_even_odd (operands[0], op1, op2, 0);\n   DONE;\n })\n@@ -6767,149 +6751,29 @@\n    (set_attr \"prefix\" \"maybe_vex,orig,orig,vex,orig,orig,vex\")\n    (set_attr \"mode\" \"TI,TI,TI,TI,V4SF,V2SF,V2SF\")])\n \n-(define_expand \"vec_unpacku_hi_v16qi\"\n-  [(match_operand:V8HI 0 \"register_operand\" \"\")\n-   (match_operand:V16QI 1 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_expand_sse4_unpack (operands, true, true);\n-  else\n-    ix86_expand_sse_unpack (operands, true, true);\n-  DONE;\n-})\n-\n-(define_expand \"vec_unpacks_hi_v16qi\"\n-  [(match_operand:V8HI 0 \"register_operand\" \"\")\n-   (match_operand:V16QI 1 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_expand_sse4_unpack (operands, false, true);\n-  else\n-    ix86_expand_sse_unpack (operands, false, true);\n-  DONE;\n-})\n-\n-(define_expand \"vec_unpacku_lo_v16qi\"\n-  [(match_operand:V8HI 0 \"register_operand\" \"\")\n-   (match_operand:V16QI 1 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_expand_sse4_unpack (operands, true, false);\n-  else\n-    ix86_expand_sse_unpack (operands, true, false);\n-  DONE;\n-})\n-\n-(define_expand \"vec_unpacks_lo_v16qi\"\n-  [(match_operand:V8HI 0 \"register_operand\" \"\")\n-   (match_operand:V16QI 1 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_expand_sse4_unpack (operands, false, false);\n-  else\n-    ix86_expand_sse_unpack (operands, false, false);\n-  DONE;\n-})\n-\n-(define_expand \"vec_unpacku_hi_v8hi\"\n-  [(match_operand:V4SI 0 \"register_operand\" \"\")\n-   (match_operand:V8HI 1 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_expand_sse4_unpack (operands, true, true);\n-  else\n-    ix86_expand_sse_unpack (operands, true, true);\n-  DONE;\n-})\n-\n-(define_expand \"vec_unpacks_hi_v8hi\"\n-  [(match_operand:V4SI 0 \"register_operand\" \"\")\n-   (match_operand:V8HI 1 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_expand_sse4_unpack (operands, false, true);\n-  else\n-    ix86_expand_sse_unpack (operands, false, true);\n-  DONE;\n-})\n-\n-(define_expand \"vec_unpacku_lo_v8hi\"\n-  [(match_operand:V4SI 0 \"register_operand\" \"\")\n-   (match_operand:V8HI 1 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_expand_sse4_unpack (operands, true, false);\n-  else\n-    ix86_expand_sse_unpack (operands, true, false);\n-  DONE;\n-})\n-\n-(define_expand \"vec_unpacks_lo_v8hi\"\n-  [(match_operand:V4SI 0 \"register_operand\" \"\")\n-   (match_operand:V8HI 1 \"register_operand\" \"\")]\n-  \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_expand_sse4_unpack (operands, false, false);\n-  else\n-    ix86_expand_sse_unpack (operands, false, false);\n-  DONE;\n-})\n-\n-(define_expand \"vec_unpacku_hi_v4si\"\n-  [(match_operand:V2DI 0 \"register_operand\" \"\")\n-   (match_operand:V4SI 1 \"register_operand\" \"\")]\n+(define_expand \"vec_unpacks_lo_<mode>\"\n+  [(match_operand:<sseunpackmode> 0 \"register_operand\" \"\")\n+   (match_operand:VI124_128 1 \"register_operand\" \"\")]\n   \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_expand_sse4_unpack (operands, true, true);\n-  else\n-    ix86_expand_sse_unpack (operands, true, true);\n-  DONE;\n-})\n+  \"ix86_expand_sse_unpack (operands, false, false); DONE;\")\n \n-(define_expand \"vec_unpacks_hi_v4si\"\n-  [(match_operand:V2DI 0 \"register_operand\" \"\")\n-   (match_operand:V4SI 1 \"register_operand\" \"\")]\n+(define_expand \"vec_unpacks_hi_<mode>\"\n+  [(match_operand:<sseunpackmode> 0 \"register_operand\" \"\")\n+   (match_operand:VI124_128 1 \"register_operand\" \"\")]\n   \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_expand_sse4_unpack (operands, false, true);\n-  else\n-    ix86_expand_sse_unpack (operands, false, true);\n-  DONE;\n-})\n+  \"ix86_expand_sse_unpack (operands, false, true); DONE;\")\n \n-(define_expand \"vec_unpacku_lo_v4si\"\n-  [(match_operand:V2DI 0 \"register_operand\" \"\")\n-   (match_operand:V4SI 1 \"register_operand\" \"\")]\n+(define_expand \"vec_unpacku_lo_<mode>\"\n+  [(match_operand:<sseunpackmode> 0 \"register_operand\" \"\")\n+   (match_operand:VI124_128 1 \"register_operand\" \"\")]\n   \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_expand_sse4_unpack (operands, true, false);\n-  else\n-    ix86_expand_sse_unpack (operands, true, false);\n-  DONE;\n-})\n+  \"ix86_expand_sse_unpack (operands, true, false); DONE;\")\n \n-(define_expand \"vec_unpacks_lo_v4si\"\n-  [(match_operand:V2DI 0 \"register_operand\" \"\")\n-   (match_operand:V4SI 1 \"register_operand\" \"\")]\n+(define_expand \"vec_unpacku_hi_<mode>\"\n+  [(match_operand:<sseunpackmode> 0 \"register_operand\" \"\")\n+   (match_operand:VI124_128 1 \"register_operand\" \"\")]\n   \"TARGET_SSE2\"\n-{\n-  if (TARGET_SSE4_1)\n-    ix86_expand_sse4_unpack (operands, false, false);\n-  else\n-    ix86_expand_sse_unpack (operands, false, false);\n-  DONE;\n-})\n+  \"ix86_expand_sse_unpack (operands, true, true); DONE;\")\n \n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;;\n@@ -10062,23 +9926,28 @@\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"OI\")])\n \n-(define_insn_and_split \"vec_dup<mode>\"\n+(define_insn \"vec_dup<mode>\"\n   [(set (match_operand:AVX256MODE24P 0 \"register_operand\" \"=x,x\")\n \t(vec_duplicate:AVX256MODE24P\n \t  (match_operand:<avxscalarmode> 1 \"nonimmediate_operand\" \"m,?x\")))]\n   \"TARGET_AVX\"\n   \"@\n    vbroadcast<ssescalarmodesuffix>\\t{%1, %0|%0, %1}\n    #\"\n-  \"&& reload_completed && REG_P (operands[1])\"\n-  [(set (match_dup 2) (vec_duplicate:<avxhalfvecmode> (match_dup 1)))\n-   (set (match_dup 0) (vec_concat:AVX256MODE24P (match_dup 2) (match_dup 2)))]\n-  \"operands[2] = gen_rtx_REG (<avxhalfvecmode>mode, REGNO (operands[0]));\"\n   [(set_attr \"type\" \"ssemov\")\n    (set_attr \"prefix_extra\" \"1\")\n    (set_attr \"prefix\" \"vex\")\n    (set_attr \"mode\" \"V8SF\")])\n \n+(define_split\n+  [(set (match_operand:AVX256MODE24P 0 \"register_operand\" \"\")\n+\t(vec_duplicate:AVX256MODE24P\n+\t  (match_operand:<avxscalarmode> 1 \"register_operand\" \"\")))]\n+  \"TARGET_AVX && reload_completed\"\n+  [(set (match_dup 2) (vec_duplicate:<avxhalfvecmode> (match_dup 1)))\n+   (set (match_dup 0) (vec_concat:AVX256MODE24P (match_dup 2) (match_dup 2)))]\n+  \"operands[2] = gen_rtx_REG (<avxhalfvecmode>mode, REGNO (operands[0]));\")\n+\n (define_insn \"avx_vbroadcastf128_<mode>\"\n   [(set (match_operand:AVX256MODE 0 \"register_operand\" \"=x,x,x\")\n \t(vec_concat:AVX256MODE"}]}