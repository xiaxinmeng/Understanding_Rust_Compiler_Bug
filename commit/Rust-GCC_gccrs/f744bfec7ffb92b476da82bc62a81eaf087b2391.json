{"sha": "f744bfec7ffb92b476da82bc62a81eaf087b2391", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Zjc0NGJmZWM3ZmZiOTJiNDc2ZGE4MmJjNjJhODFlYWYwODdiMjM5MQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2017-12-19T07:44:07Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-12-19T07:44:07Z"}, "message": "re PR tree-optimization/83444 (missing strlen optimization on a member array of a local struct)\n\n\tPR tree-optimization/83444\n\t* tree-ssa-strlen.c (strlen_check_and_optimize_stmt): Optimize\n\tcharacter loads.\n\n\t* gcc.dg/strlenopt-38.c: New test.\n\nFrom-SVN: r255806", "tree": {"sha": "14829559d70dd7a4530537fb45f37839eba9b180", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/14829559d70dd7a4530537fb45f37839eba9b180"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f744bfec7ffb92b476da82bc62a81eaf087b2391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f744bfec7ffb92b476da82bc62a81eaf087b2391", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f744bfec7ffb92b476da82bc62a81eaf087b2391", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f744bfec7ffb92b476da82bc62a81eaf087b2391/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6ea70a0dcf7ca69321c6fa7c583bc9a2ca3dfd0"}], "stats": {"total": 103, "additions": 103, "deletions": 0}, "files": [{"sha": "9c0419d83334317f5d0bea14cd55cf109c368b5f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f744bfec7ffb92b476da82bc62a81eaf087b2391/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f744bfec7ffb92b476da82bc62a81eaf087b2391/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f744bfec7ffb92b476da82bc62a81eaf087b2391", "patch": "@@ -1,5 +1,9 @@\n 2017-12-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/83444\n+\t* tree-ssa-strlen.c (strlen_check_and_optimize_stmt): Optimize\n+\tcharacter loads.\n+\n \tPR ipa/82801\n \tPR ipa/83346\n \t* ipa-inline.c (flatten_remove_node_hook): New function."}, {"sha": "1eb45e541e935cceb121f73ffe8be92772a8571b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f744bfec7ffb92b476da82bc62a81eaf087b2391/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f744bfec7ffb92b476da82bc62a81eaf087b2391/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f744bfec7ffb92b476da82bc62a81eaf087b2391", "patch": "@@ -1,5 +1,8 @@\n 2017-12-19  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR tree-optimization/83444\n+\t* gcc.dg/strlenopt-38.c: New test.\n+\n \tPR ipa/82801\n \tPR ipa/83346\n \t* g++.dg/ipa/pr82801.C: New test."}, {"sha": "3b698f9c1e80bc5cb24941705a9caea78b665304", "filename": "gcc/testsuite/gcc.dg/strlenopt-38.c", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f744bfec7ffb92b476da82bc62a81eaf087b2391/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-38.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f744bfec7ffb92b476da82bc62a81eaf087b2391/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-38.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstrlenopt-38.c?ref=f744bfec7ffb92b476da82bc62a81eaf087b2391", "patch": "@@ -0,0 +1,38 @@\n+/* PR tree-optimization/83444 */\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -fdump-tree-optimized\" } */\n+/* { dg-final { scan-tree-dump-not \"abort \\\\(\\\\)\" \"optimized\" } } */\n+\n+#include \"strlenopt.h\"\n+\n+void\n+foo (void)\n+{\n+  char a[5] = \"012\";\n+  strcpy (a, \"\");\n+  if (strlen (a) != 0)\n+    abort ();\n+}\n+\n+void\n+bar (void)\n+{\n+  char a[5] = \"012\";\n+  char b[7] = \"\";\n+  strcpy (a, b);\n+  if (strlen (a) != 0)\n+    abort ();\n+}\n+\n+struct S { char a[4]; char b[5]; char c[7]; };\n+\n+void\n+baz (void)\n+{\n+  struct S s;\n+  strcpy (s.b, \"012\");\n+  strcpy (s.c, \"\");\n+  strcpy (s.b, s.c);\n+  if (s.b[0] != 0)\n+    abort ();\n+}"}, {"sha": "a2d514cb35a954e86a33ac7a915297b92bac97a9", "filename": "gcc/tree-ssa-strlen.c", "status": "modified", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f744bfec7ffb92b476da82bc62a81eaf087b2391/gcc%2Ftree-ssa-strlen.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f744bfec7ffb92b476da82bc62a81eaf087b2391/gcc%2Ftree-ssa-strlen.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-strlen.c?ref=f744bfec7ffb92b476da82bc62a81eaf087b2391", "patch": "@@ -3146,6 +3146,64 @@ strlen_check_and_optimize_stmt (gimple_stmt_iterator *gsi)\n \telse if (code == EQ_EXPR || code == NE_EXPR)\n \t  fold_strstr_to_strncmp (gimple_assign_rhs1 (stmt),\n \t\t\t\t  gimple_assign_rhs2 (stmt), stmt);\n+\telse if (gimple_assign_load_p (stmt)\n+\t\t && TREE_CODE (TREE_TYPE (lhs)) == INTEGER_TYPE\n+\t\t && TYPE_MODE (TREE_TYPE (lhs)) == TYPE_MODE (char_type_node)\n+\t\t && (TYPE_PRECISION (TREE_TYPE (lhs))\n+\t\t     == TYPE_PRECISION (char_type_node))\n+\t\t && !gimple_has_volatile_ops (stmt))\n+\t  {\n+\t    tree off = integer_zero_node;\n+\t    unsigned HOST_WIDE_INT coff = 0;\n+\t    int idx = -1;\n+\t    tree rhs1 = gimple_assign_rhs1 (stmt);\n+\t    if (code == MEM_REF)\n+\t      {\n+\t\tidx = get_stridx (TREE_OPERAND (rhs1, 0));\n+\t\toff = TREE_OPERAND (rhs1, 1);\n+\t      }\n+\t    else\n+\t      idx = get_addr_stridx (rhs1, NULL_TREE, &coff);\n+\t    if (idx > 0)\n+\t      {\n+\t\tstrinfo *si = get_strinfo (idx);\n+\t\tif (si\n+\t\t    && si->nonzero_chars\n+\t\t    && TREE_CODE (si->nonzero_chars) == INTEGER_CST)\n+\t\t  {\n+\t\t    widest_int w1 = wi::to_widest (si->nonzero_chars);\n+\t\t    widest_int w2 = wi::to_widest (off) + coff;\n+\t\t    if (w1 == w2\n+\t\t\t&& si->full_string_p)\n+\t\t      {\n+\t\t\t/* Reading the final '\\0' character.  */\n+\t\t\ttree zero = build_int_cst (TREE_TYPE (lhs), 0);\n+\t\t\tgimple_set_vuse (stmt, NULL_TREE);\n+\t\t\tgimple_assign_set_rhs_from_tree (gsi, zero);\n+\t\t\tupdate_stmt (gsi_stmt (*gsi));\n+\t\t      }\n+\t\t    else if (w1 > w2)\n+\t\t      {\n+\t\t\t/* Reading a character before the final '\\0'\n+\t\t\t   character.  Just set the value range to ~[0, 0]\n+\t\t\t   if we don't have anything better.  */\n+\t\t\twide_int min, max;\n+\t\t\ttree type = TREE_TYPE (lhs);\n+\t\t\tenum value_range_type vr\n+\t\t\t  = get_range_info (lhs, &min, &max);\n+\t\t\tif (vr == VR_VARYING\n+\t\t\t    || (vr == VR_RANGE\n+\t\t\t\t&& min == wi::min_value (TYPE_PRECISION (type),\n+\t\t\t\t\t\t\t TYPE_SIGN (type))\n+\t\t\t\t&& max == wi::max_value (TYPE_PRECISION (type),\n+\t\t\t\t\t\t\t TYPE_SIGN (type))))\n+\t\t\t  set_range_info (lhs, VR_ANTI_RANGE,\n+\t\t\t\t\t  wi::zero (TYPE_PRECISION (type)),\n+\t\t\t\t\t  wi::zero (TYPE_PRECISION (type)));\n+\t\t      }\n+\t\t  }\n+\t      }\n+\t  }\n \n \tif (strlen_to_stridx)\n \t  {"}]}