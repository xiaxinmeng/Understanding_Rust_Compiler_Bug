{"sha": "c7d193178f7b3a7747849d4f8574091bc2d4a7f8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzdkMTkzMTc4ZjdiM2E3NzQ3ODQ5ZDRmODU3NDA5MWJjMmQ0YTdmOA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2020-02-04T23:13:00Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-05T12:17:46Z"}, "message": "[Ada] Fix incorrect initialization for array of non-standard enumeration type\n\n2020-06-05  Eric Botcazou  <ebotcazou@adacore.com>\n\ngcc/ada/\n\n\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Use\n\tExpr_Rep_Value instead of Expr_Value to obtain the equivalent\n\tinteger value.\n\t* sem_eval.ads (Expr_Value): Document more supported cases.\n\t* sem_eval.adb (Expr_Rep_Value): Copy missing cases from\n\tExp_Value.", "tree": {"sha": "bf94138a109a047f9f0d8379c4be8a629fb22274", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bf94138a109a047f9f0d8379c4be8a629fb22274"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c7d193178f7b3a7747849d4f8574091bc2d4a7f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d193178f7b3a7747849d4f8574091bc2d4a7f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c7d193178f7b3a7747849d4f8574091bc2d4a7f8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c7d193178f7b3a7747849d4f8574091bc2d4a7f8/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2754419d08d5a49551fb817a01067e81c3da3f4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2754419d08d5a49551fb817a01067e81c3da3f4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2754419d08d5a49551fb817a01067e81c3da3f4"}], "stats": {"total": 30, "additions": 24, "deletions": 6}, "files": [{"sha": "26765e9f4387bf665013fb153d20375ac50135cf", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d193178f7b3a7747849d4f8574091bc2d4a7f8/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d193178f7b3a7747849d4f8574091bc2d4a7f8/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=c7d193178f7b3a7747849d4f8574091bc2d4a7f8", "patch": "@@ -5390,9 +5390,10 @@ package body Exp_Aggr is\n             return Expr_Value_R (Expr) = Ureal_0;\n          end if;\n \n-         --  For other types, we can look into the value as an integer\n+         --  For other types, we can look into the value as an integer, which\n+         --  means the representation value for enumeration literals.\n \n-         Value := Expr_Value (Expr);\n+         Value := Expr_Rep_Value (Expr);\n \n          if Has_Biased_Representation (Ctyp) then\n             Value := Value - Expr_Value (Type_Low_Bound (Ctyp));"}, {"sha": "d4a3ff86e6a140fe65954bb7049681b9d961881d", "filename": "gcc/ada/sem_eval.adb", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d193178f7b3a7747849d4f8574091bc2d4a7f8/gcc%2Fada%2Fsem_eval.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d193178f7b3a7747849d4f8574091bc2d4a7f8/gcc%2Fada%2Fsem_eval.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.adb?ref=c7d193178f7b3a7747849d4f8574091bc2d4a7f8", "patch": "@@ -4203,10 +4203,16 @@ package body Sem_Eval is\n          pragma Assert (Is_Fixed_Point_Type (Underlying_Type (Etype (N))));\n          return Corresponding_Integer_Value (N);\n \n-      --  Otherwise must be character literal\n+      --  The NULL access value\n \n-      else\n-         pragma Assert (Kind = N_Character_Literal);\n+      elsif Kind = N_Null then\n+         pragma Assert (Is_Access_Type (Underlying_Type (Etype (N)))\n+           or else Error_Posted (N));\n+         return Uint_0;\n+\n+      --  Character literal\n+\n+      elsif Kind = N_Character_Literal then\n          Ent := Entity (N);\n \n          --  Since Character literals of type Standard.Character don't have any\n@@ -4220,6 +4226,15 @@ package body Sem_Eval is\n          else\n             return Enumeration_Rep (Ent);\n          end if;\n+\n+      --  Unchecked conversion, which can come from System'To_Address (X)\n+      --  where X is a static integer expression. Recursively evaluate X.\n+\n+      elsif Kind = N_Unchecked_Type_Conversion then\n+         return Expr_Rep_Value (Expression (N));\n+\n+      else\n+         raise Program_Error;\n       end if;\n    end Expr_Rep_Value;\n "}, {"sha": "ba84e54868bac919e4832f0a6daf42f8a1f3b65c", "filename": "gcc/ada/sem_eval.ads", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c7d193178f7b3a7747849d4f8574091bc2d4a7f8/gcc%2Fada%2Fsem_eval.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c7d193178f7b3a7747849d4f8574091bc2d4a7f8/gcc%2Fada%2Fsem_eval.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_eval.ads?ref=c7d193178f7b3a7747849d4f8574091bc2d4a7f8", "patch": "@@ -276,7 +276,9 @@ package Sem_Eval is\n    --  or character literals. In the latter two cases, the value returned is\n    --  the Pos value in the relevant enumeration type. It can also be used for\n    --  fixed-point values, in which case it returns the corresponding integer\n-   --  value. It cannot be used for floating-point values.\n+   --  value, but it cannot be used for floating-point values. Finally, it can\n+   --  also be used for the Null access value, as well as for the result of an\n+   --  unchecked conversion of the aforementioned handled values.\n \n    function Expr_Value_E (N : Node_Id) return Entity_Id;\n    --  Returns the folded value of the expression. This function is called in"}]}