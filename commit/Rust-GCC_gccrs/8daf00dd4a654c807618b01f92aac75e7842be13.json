{"sha": "8daf00dd4a654c807618b01f92aac75e7842be13", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGRhZjAwZGQ0YTY1NGM4MDc2MThiMDFmOTJhYWM3NWU3ODQyYmUxMw==", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2019-12-13T09:03:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "pmderodat@gcc.gnu.org", "date": "2019-12-13T09:03:28Z"}, "message": "[Ada] Missing accessibility checks on conditionals\n\n2019-12-13  Justin Squirek  <squirek@adacore.com>\n\ngcc/ada/\n\n\t* sem_res.adb (Resolve_Allocator): Add calls to\n\tCheck_Cond_Expr_Accessibility when a conditional expression is\n\tfound.\n\t(Check_Allocator_Discrim_Accessibility_Exprs): Created to\n\trecursively traverse a potentially compound conditional\n\texpression and perform accessibility checks for each\n\talternative.\n\t* sem_util.adb (Dynamic_Accessibility_Level): Avoid use of\n\toriginal node of the expression in question so we can handle\n\tdynamic accessibility in the limited case of a constant folded\n\tconditional expression.\n\nFrom-SVN: r279342", "tree": {"sha": "9bf4e382c38d88188450606e4a738071f4323aeb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9bf4e382c38d88188450606e4a738071f4323aeb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8daf00dd4a654c807618b01f92aac75e7842be13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8daf00dd4a654c807618b01f92aac75e7842be13", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8daf00dd4a654c807618b01f92aac75e7842be13", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8daf00dd4a654c807618b01f92aac75e7842be13/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d7c37f454912c398302679e780ff69c76a3f843a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d7c37f454912c398302679e780ff69c76a3f843a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d7c37f454912c398302679e780ff69c76a3f843a"}], "stats": {"total": 93, "additions": 89, "deletions": 4}, "files": [{"sha": "40c8bf323f174bd532ba581b7890cf179e6d77dd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8daf00dd4a654c807618b01f92aac75e7842be13/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8daf00dd4a654c807618b01f92aac75e7842be13/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8daf00dd4a654c807618b01f92aac75e7842be13", "patch": "@@ -1,3 +1,17 @@\n+2019-12-13  Justin Squirek  <squirek@adacore.com>\n+\n+\t* sem_res.adb (Resolve_Allocator): Add calls to\n+\tCheck_Cond_Expr_Accessibility when a conditional expression is\n+\tfound.\n+\t(Check_Allocator_Discrim_Accessibility_Exprs): Created to\n+\trecursively traverse a potentially compound conditional\n+\texpression and perform accessibility checks for each\n+\talternative.\n+\t* sem_util.adb (Dynamic_Accessibility_Level): Avoid use of\n+\toriginal node of the expression in question so we can handle\n+\tdynamic accessibility in the limited case of a constant folded\n+\tconditional expression.\n+\n 2019-12-13  Steve Baird  <baird@adacore.com>\n \n \t* exp_ch4.adb (Expand_N_Op_Eq.Is_Equality): Move this function"}, {"sha": "0bdbc25ff0fd2e8d3ff64401dac09ee24df2045e", "filename": "gcc/ada/sem_res.adb", "status": "modified", "additions": 68, "deletions": 4, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8daf00dd4a654c807618b01f92aac75e7842be13/gcc%2Fada%2Fsem_res.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8daf00dd4a654c807618b01f92aac75e7842be13/gcc%2Fada%2Fsem_res.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_res.adb?ref=8daf00dd4a654c807618b01f92aac75e7842be13", "patch": "@@ -4965,6 +4965,12 @@ package body Sem_Res is\n       --  the cases of a constraint expression which is an access attribute or\n       --  an access discriminant.\n \n+      procedure Check_Allocator_Discrim_Accessibility_Exprs\n+        (Curr_Exp  : Node_Id;\n+         Alloc_Typ : Entity_Id);\n+      --  Dispatch checks performed by Check_Allocator_Discrim_Accessibility\n+      --  across all expressions within a given conditional expression.\n+\n       function In_Dispatching_Context return Boolean;\n       --  If the allocator is an actual in a call, it is allowed to be class-\n       --  wide when the context is not because it is a controlling actual.\n@@ -5016,6 +5022,62 @@ package body Sem_Res is\n          end if;\n       end Check_Allocator_Discrim_Accessibility;\n \n+      -------------------------------------------------\n+      -- Check_Allocator_Discrim_Accessibility_Exprs --\n+      -------------------------------------------------\n+\n+      procedure Check_Allocator_Discrim_Accessibility_Exprs\n+        (Curr_Exp  : Node_Id;\n+         Alloc_Typ : Entity_Id)\n+      is\n+         Alt      : Node_Id;\n+         Expr     : Node_Id;\n+         Disc_Exp : constant Node_Id := Original_Node (Curr_Exp);\n+      begin\n+         --  When conditional expressions are constant folded we know at\n+         --  compile time which expression to check - so don't bother with\n+         --  the rest of the cases.\n+\n+         if Nkind (Curr_Exp) = N_Attribute_Reference then\n+            Check_Allocator_Discrim_Accessibility (Curr_Exp, Alloc_Typ);\n+\n+         --  Non-constant-folded if expressions\n+\n+         elsif Nkind (Disc_Exp) = N_If_Expression then\n+            --  Check both expressions if they are still present in the face\n+            --  of expansion.\n+\n+            Expr := Next (First (Expressions (Disc_Exp)));\n+            if Present (Expr) then\n+               Check_Allocator_Discrim_Accessibility_Exprs (Expr, Alloc_Typ);\n+               Expr := Next (Expr);\n+               if Present (Expr) then\n+                  Check_Allocator_Discrim_Accessibility_Exprs\n+                    (Expr, Alloc_Typ);\n+               end if;\n+            end if;\n+\n+         --  Non-constant-folded case expressions\n+\n+         elsif Nkind (Disc_Exp) = N_Case_Expression then\n+            --  Check all alternatives\n+\n+            Alt := First (Alternatives (Disc_Exp));\n+            while Present (Alt) loop\n+               Check_Allocator_Discrim_Accessibility_Exprs\n+                 (Expression (Alt), Alloc_Typ);\n+\n+               Next (Alt);\n+            end loop;\n+\n+         --  Base case, check the accessibility of the original node of the\n+         --  expression.\n+\n+         else\n+            Check_Allocator_Discrim_Accessibility (Disc_Exp, Alloc_Typ);\n+         end if;\n+      end Check_Allocator_Discrim_Accessibility_Exprs;\n+\n       ----------------------------\n       -- In_Dispatching_Context --\n       ----------------------------\n@@ -5167,7 +5229,8 @@ package body Sem_Res is\n \n                while Present (Discrim) and then Present (Disc_Exp) loop\n                   if Ekind (Etype (Discrim)) = E_Anonymous_Access_Type then\n-                     Check_Allocator_Discrim_Accessibility (Disc_Exp, Typ);\n+                     Check_Allocator_Discrim_Accessibility_Exprs\n+                       (Disc_Exp, Typ);\n                   end if;\n \n                   Next_Discriminant (Discrim);\n@@ -5225,12 +5288,13 @@ package body Sem_Res is\n                while Present (Discrim) and then Present (Constr) loop\n                   if Ekind (Etype (Discrim)) = E_Anonymous_Access_Type then\n                      if Nkind (Constr) = N_Discriminant_Association then\n-                        Disc_Exp := Original_Node (Expression (Constr));\n+                        Disc_Exp := Expression (Constr);\n                      else\n-                        Disc_Exp := Original_Node (Constr);\n+                        Disc_Exp := Constr;\n                      end if;\n \n-                     Check_Allocator_Discrim_Accessibility (Disc_Exp, Typ);\n+                     Check_Allocator_Discrim_Accessibility_Exprs\n+                       (Disc_Exp, Typ);\n                   end if;\n \n                   Next_Discriminant (Discrim);"}, {"sha": "91137ad808ba6f2d73d865150280fbe60ffec5da", "filename": "gcc/ada/sem_util.adb", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8daf00dd4a654c807618b01f92aac75e7842be13/gcc%2Fada%2Fsem_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8daf00dd4a654c807618b01f92aac75e7842be13/gcc%2Fada%2Fsem_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_util.adb?ref=8daf00dd4a654c807618b01f92aac75e7842be13", "patch": "@@ -6612,6 +6612,13 @@ package body Sem_Util is\n          end if;\n       end if;\n \n+      --  Handle a constant-folded conditional expression by avoiding use of\n+      --  the original node.\n+\n+      if Nkind_In (Expr, N_Case_Expression, N_If_Expression) then\n+         Expr := N;\n+      end if;\n+\n       --  Unimplemented: Ptr.all'Access, where Ptr has Extra_Accessibility ???\n \n       case Nkind (Expr) is"}]}