{"sha": "bb7de82295a953b28a4d01b378ab65ffafe9aeeb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI3ZGU4MjI5NWE5NTNiMjhhNGQwMWIzNzhhYjY1ZmZhZmU5YWVlYg==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-03T20:09:56Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1993-11-03T20:09:56Z"}, "message": "(safe_read): New function.\n\n(main, finclude, check_precompiled): Use safe_read.\n\nFrom-SVN: r5982", "tree": {"sha": "44260cf23061392e8de35f125fd6e9fe4555d53e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/44260cf23061392e8de35f125fd6e9fe4555d53e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb7de82295a953b28a4d01b378ab65ffafe9aeeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7de82295a953b28a4d01b378ab65ffafe9aeeb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb7de82295a953b28a4d01b378ab65ffafe9aeeb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb7de82295a953b28a4d01b378ab65ffafe9aeeb/comments", "author": null, "committer": null, "parents": [{"sha": "309ffab61f6253d61fe16a8d5d0a97a56b055328", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/309ffab61f6253d61fe16a8d5d0a97a56b055328", "html_url": "https://github.com/Rust-GCC/gccrs/commit/309ffab61f6253d61fe16a8d5d0a97a56b055328"}], "stats": {"total": 68, "additions": 45, "deletions": 23}, "files": [{"sha": "f28cfe6eefd99f0a478d5709d8d299f38b94ed65", "filename": "gcc/cccp.c", "status": "modified", "additions": 45, "deletions": 23, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb7de82295a953b28a4d01b378ab65ffafe9aeeb/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb7de82295a953b28a4d01b378ab65ffafe9aeeb/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=bb7de82295a953b28a4d01b378ab65ffafe9aeeb", "patch": "@@ -980,6 +980,46 @@ static int deps_column;\n    so don't look for #include \"foo\" the source-file directory.  */\n static int ignore_srcdir;\n \f\n+/* Read LEN bytes at PTR from descriptor DESC, for file FILENAME,\n+   retrying if necessary.  Return the actual number of bytes read.  */\n+\n+static int\n+safe_read (desc, ptr, len)\n+     int desc;\n+     char *ptr;\n+     int len;\n+{\n+  int left = len;\n+  while (left > 0) {\n+    int nchars = read (desc, ptr, left);\n+    if (nchars < 0)\n+      return nchars;\n+    if (nchars == 0)\n+      break;\n+    ptr += nchars;\n+    left -= nchars;\n+  }\n+  return len - left;\n+}\n+\n+/* Write LEN bytes at PTR to descriptor DESC,\n+   retrying if necessary, and treating any real error as fatal.  */\n+\n+static void\n+safe_write (desc, ptr, len)\n+     int desc;\n+     char *ptr;\n+     int len;\n+{\n+  while (len > 0) {\n+    int written = write (desc, ptr, len);\n+    if (written < 0)\n+      pfatal_with_name (out_fname);\n+    ptr += written;\n+    len -= written;\n+  }\n+}\n+\f\n int\n main (argc, argv)\n      int argc;\n@@ -1880,7 +1920,7 @@ main (argc, argv)\n     fp->buf = (U_CHAR *) xmalloc (bsize + 2);\n     bufp = fp->buf;\n     for (;;) {\n-      cnt = read (f, bufp, bsize - size);\n+      cnt = safe_read (f, bufp, bsize - size);\n       if (cnt < 0) goto perror;\t/* error! */\n       if (cnt == 0) break;\t/* End of file */\n       size += cnt;\n@@ -1900,7 +1940,7 @@ main (argc, argv)\n     fp->buf = (U_CHAR *) xmalloc (st_size + 2);\n \n     while (st_size > 0) {\n-      i = read (f, fp->buf + fp->length, st_size);\n+      i = safe_read (f, fp->buf + fp->length, st_size);\n       if (i <= 0) {\n         if (i == 0) break;\n \tgoto perror;\n@@ -4279,7 +4319,7 @@ finclude (f, fname, op, system_header_p, dirptr)\n     /* Read the file contents, knowing that st_size is an upper bound\n        on the number of bytes we can read.  */\n     while (st_size > 0) {\n-      i = read (f, fp->buf + fp->length, st_size);\n+      i = safe_read (f, fp->buf + fp->length, st_size);\n       if (i <= 0) {\n \tif (i == 0) break;\n \tgoto nope;\n@@ -4307,7 +4347,7 @@ finclude (f, fname, op, system_header_p, dirptr)\n     bufp = basep;\n \n     for (;;) {\n-      i = read (f, bufp, bsize - st_size);\n+      i = safe_read (f, bufp, bsize - st_size);\n       if (i < 0)\n \tgoto nope;      /* error! */\n       if (i == 0)\n@@ -4521,7 +4561,7 @@ check_precompiled (pcf, fname, limit)\n       buf = xmalloc (st_size + 2);\n       while (st_size > 0)\n \t{\n-\t  i = read (pcf, buf + length, st_size);\n+\t  i = safe_read (pcf, buf + length, st_size);\n \t  if (i < 0)\n \t    goto nope;\n \t  if (i == 0)\n@@ -4746,24 +4786,6 @@ pcstring_used (hp)\n   delete_macro (hp);\n }\n \n-/* Write LEN bytes at PTR to descriptor DESC,\n-   retrying if necessary, and treating any real error as fatal.  */\n-\n-static void\n-safe_write (desc, ptr, len)\n-     int desc;\n-     char *ptr;\n-     int len;\n-{\n-  while (len > 0) {\n-    int written = write (fileno (stdout), ptr, len);\n-    if (written < 0)\n-      pfatal_with_name (out_fname);\n-    ptr += written;\n-    len -= written;\n-  }\n-}\n-\n /* Write the output, interspersing precompiled strings in their */\n  /* appropriate places. */\n static void"}]}