{"sha": "a024f5143d592db41c5316c24d3e10fd86c839ec", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAyNGY1MTQzZDU5MmRiNDFjNTMxNmMyNGQzZTEwZmQ4NmM4MzllYw==", "commit": {"author": {"name": "Max Filippov", "email": "jcmvbkbc@gmail.com", "date": "2015-08-12T17:36:45Z"}, "committer": {"name": "Max Filippov", "email": "jcmvbkbc@gcc.gnu.org", "date": "2015-08-12T17:36:45Z"}, "message": "xtensa: add -mauto-litpools option\n\nWith support from assembler this option allows compiling huge functions,\nwhere single literal pool at the beginning of a function may not be\nreachable by L32R instructions at its end.\n\nCurrently assembler --auto-litpools option cannot deal with literals\nused from multiple locations separated by more than 256 KBytes of code.\nDon't turn constants into literals, instead use MOVI instruction to load\nthem into registers and let the assembler turn them into literals as\nnecessary.\n\n2015-08-12  Max Filippov  <jcmvbkbc@gmail.com>\ngcc/\n\t* config/xtensa/constraints.md (define_constraint \"Y\"): New\n\tconstraint.\n\t* config/xtensa/elf.h (ASM_SPEC): Add m(no-)auto-litpools.\n\t* config/xtensa/linux.h (ASM_SPEC): Likewise.\n\t* config/xtensa/predicates.md (move_operand): Match constants\n\tand symbols in the presence of TARGET_AUTO_LITPOOLS.\n\t* config/xtensa/xtensa.c (xtensa_valid_move): Don't allow\n\timmediate references to TLS data.\n\t(xtensa_emit_move_sequence): Don't force constants to memory in\n\tthe presence of TARGET_AUTO_LITPOOLS.\n\t(print_operand): Add 'y' format, same as default, but capable of\n\tprinting SF mode constants as well.\n\t* config/xtensa/xtensa.md (movsi_internal, movhi_internal)\n\t(movsf_internal): Add movi pattern that loads literal.\n\t(movsf, movdf): Don't force constants to memory in the presence\n\tof TARGET_AUTO_LITPOOLS.\n\t(movdf_internal): Add 'Y' constraint.\n\t* config/xtensa/xtensa.opt (mauto-litpools): New option.\n\t* doc/invoke.text (Xtensa options): Document -mauto-litpools.\n\nFrom-SVN: r226828", "tree": {"sha": "07a3b7e9657deeab0b91ba1446c600d5ffbcfcf5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/07a3b7e9657deeab0b91ba1446c600d5ffbcfcf5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a024f5143d592db41c5316c24d3e10fd86c839ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a024f5143d592db41c5316c24d3e10fd86c839ec", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a024f5143d592db41c5316c24d3e10fd86c839ec", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a024f5143d592db41c5316c24d3e10fd86c839ec/comments", "author": {"login": "jcmvbkbc", "id": 166731, "node_id": "MDQ6VXNlcjE2NjczMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/166731?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jcmvbkbc", "html_url": "https://github.com/jcmvbkbc", "followers_url": "https://api.github.com/users/jcmvbkbc/followers", "following_url": "https://api.github.com/users/jcmvbkbc/following{/other_user}", "gists_url": "https://api.github.com/users/jcmvbkbc/gists{/gist_id}", "starred_url": "https://api.github.com/users/jcmvbkbc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jcmvbkbc/subscriptions", "organizations_url": "https://api.github.com/users/jcmvbkbc/orgs", "repos_url": "https://api.github.com/users/jcmvbkbc/repos", "events_url": "https://api.github.com/users/jcmvbkbc/events{/privacy}", "received_events_url": "https://api.github.com/users/jcmvbkbc/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4757fa7f0ba01e207b313c2931312555d5ec98bf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4757fa7f0ba01e207b313c2931312555d5ec98bf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4757fa7f0ba01e207b313c2931312555d5ec98bf"}], "stats": {"total": 115, "additions": 94, "deletions": 21}, "files": [{"sha": "e8e7ab1bf10afefbaa8ea8b0d8b7492105dae8fc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a024f5143d592db41c5316c24d3e10fd86c839ec", "patch": "@@ -1,3 +1,25 @@\n+2015-08-12  Max Filippov  <jcmvbkbc@gmail.com>\n+\n+\t* config/xtensa/constraints.md (define_constraint \"Y\"): New\n+\tconstraint.\n+\t* config/xtensa/elf.h (ASM_SPEC): Add m(no-)auto-litpools.\n+\t* config/xtensa/linux.h (ASM_SPEC): Likewise.\n+\t* config/xtensa/predicates.md (move_operand): Match constants\n+\tand symbols in the presence of TARGET_AUTO_LITPOOLS.\n+\t* config/xtensa/xtensa.c (xtensa_valid_move): Don't allow\n+\timmediate references to TLS data.\n+\t(xtensa_emit_move_sequence): Don't force constants to memory in\n+\tthe presence of TARGET_AUTO_LITPOOLS.\n+\t(print_operand): Add 'y' format, same as default, but capable of\n+\tprinting SF mode constants as well.\n+\t* config/xtensa/xtensa.md (movsi_internal, movhi_internal)\n+\t(movsf_internal): Add movi pattern that loads literal.\n+\t(movsf, movdf): Don't force constants to memory in the presence\n+\tof TARGET_AUTO_LITPOOLS.\n+\t(movdf_internal): Add 'Y' constraint.\n+\t* config/xtensa/xtensa.opt (mauto-litpools): New option.\n+\t* doc/invoke.text (Xtensa options): Document -mauto-litpools.\n+\n 2015-08-12  Matthew Wahab  <matthew.wahab@arm.com>\n \n \t* config/arm/arm-fpus.def: Replace booleans with feature flags."}, {"sha": "773d4f9b3add607e379d969785109d2d7129416a", "filename": "gcc/config/xtensa/constraints.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Fconstraints.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Fconstraints.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fconstraints.md?ref=a024f5143d592db41c5316c24d3e10fd86c839ec", "patch": "@@ -111,6 +111,11 @@\n  (and (match_code \"const_int\")\n       (match_test \"xtensa_mask_immediate (ival)\")))\n \n+(define_constraint \"Y\"\n+ \"A constant that can be used in relaxed MOVI instructions.\"\n+ (and (match_code \"const_int,const_double,const,symbol_ref,label_ref\")\n+      (match_test \"TARGET_AUTO_LITPOOLS\")))\n+\n ;; Memory constraints.  Do not use define_memory_constraint here.  Doing so\n ;; causes reload to force some constants into the constant pool, but since\n ;; the Xtensa constant pool can only be accessed with L32R instructions, it"}, {"sha": "12056f781ca35d9a6cdbec50f3417f6014c55ae7", "filename": "gcc/config/xtensa/elf.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Felf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Felf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Felf.h?ref=a024f5143d592db41c5316c24d3e10fd86c839ec", "patch": "@@ -48,7 +48,9 @@ along with GCC; see the file COPYING3.  If not see\n   %{mtarget-align:--target-align} \\\n   %{mno-target-align:--no-target-align} \\\n   %{mlongcalls:--longcalls} \\\n-  %{mno-longcalls:--no-longcalls}\"\n+  %{mno-longcalls:--no-longcalls} \\\n+  %{mauto-litpools:--auto-litpools} \\\n+  %{mno-auto-litpools:--no-auto-litpools}\"\n \n #undef LIB_SPEC\n #define LIB_SPEC \"-lc -lsim -lc -lhandlers-sim -lhal\""}, {"sha": "5b0243aaff05d0f6f091125eaa4ece22a4730ee9", "filename": "gcc/config/xtensa/linux.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Flinux.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Flinux.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Flinux.h?ref=a024f5143d592db41c5316c24d3e10fd86c839ec", "patch": "@@ -42,7 +42,9 @@ along with GCC; see the file COPYING3.  If not see\n   %{mtarget-align:--target-align} \\\n   %{mno-target-align:--no-target-align} \\\n   %{mlongcalls:--longcalls} \\\n-  %{mno-longcalls:--no-longcalls}\"\n+  %{mno-longcalls:--no-longcalls} \\\n+  %{mauto-litpools:--auto-litpools} \\\n+  %{mno-auto-litpools:--no-auto-litpools}\"\n \n #define GLIBC_DYNAMIC_LINKER \"/lib/ld.so.1\"\n "}, {"sha": "d7dfa1107f8ddfa179f3a077f343a058736d141d", "filename": "gcc/config/xtensa/predicates.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fpredicates.md?ref=a024f5143d592db41c5316c24d3e10fd86c839ec", "patch": "@@ -142,7 +142,8 @@\n \t       (match_test \"GET_MODE_CLASS (mode) == MODE_INT\n \t\t\t    && xtensa_simm12b (INTVAL (op))\"))\n \t  (and (match_code \"const_int,const_double,const,symbol_ref,label_ref\")\n-\t       (match_test \"TARGET_CONST16 && CONSTANT_P (op)\n+\t       (match_test \"(TARGET_CONST16 || TARGET_AUTO_LITPOOLS)\n+\t\t\t    && CONSTANT_P (op)\n \t\t\t    && GET_MODE_SIZE (mode) % UNITS_PER_WORD == 0\")))))\n \n ;; Accept the floating point constant 1 in the appropriate mode."}, {"sha": "1910061fdb5d6b4720751398cd2b0d6c081e9aaf", "filename": "gcc/config/xtensa/xtensa.c", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Fxtensa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.c?ref=a024f5143d592db41c5316c24d3e10fd86c839ec", "patch": "@@ -480,6 +480,9 @@ xtensa_valid_move (machine_mode mode, rtx *operands)\n     {\n       int dst_regnum = xt_true_regnum (operands[0]);\n \n+      if (xtensa_tls_referenced_p (operands[1]))\n+\treturn FALSE;\n+\n       /* The stack pointer can only be assigned with a MOVSP opcode.  */\n       if (dst_regnum == STACK_POINTER_REGNUM)\n \treturn !TARGET_WINDOWED_ABI\n@@ -1048,7 +1051,7 @@ xtensa_emit_move_sequence (rtx *operands, machine_mode mode)\n \t  return 1;\n \t}\n \n-      if (! TARGET_CONST16)\n+      if (! TARGET_AUTO_LITPOOLS && ! TARGET_CONST16)\n \t{\n \t  src = force_const_mem (SImode, src);\n \t  operands[1] = src;\n@@ -2429,6 +2432,20 @@ print_operand (FILE *file, rtx x, int letter)\n \t}\n       break;\n \n+    case 'y':\n+      if (GET_CODE (x) == CONST_DOUBLE &&\n+\t  GET_MODE (x) == SFmode)\n+\t{\n+\t  REAL_VALUE_TYPE r;\n+\t  long l;\n+\t  REAL_VALUE_FROM_CONST_DOUBLE (r, x);\n+\t  REAL_VALUE_TO_TARGET_SINGLE (r, l);\n+\t  fprintf (file, \"0x%08lx\", l);\n+\t  break;\n+\t}\n+\n+      /* fall through */\n+\n     default:\n       if (GET_CODE (x) == REG || GET_CODE (x) == SUBREG)\n \tfprintf (file, \"%s\", reg_names[xt_true_regnum (x)]);"}, {"sha": "3a3a9029a31cca8514f8d036e855b4d7e63d2c97", "filename": "gcc/config/xtensa/xtensa.md", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Fxtensa.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.md?ref=a024f5143d592db41c5316c24d3e10fd86c839ec", "patch": "@@ -761,8 +761,8 @@\n })\n \n (define_insn \"movsi_internal\"\n-  [(set (match_operand:SI 0 \"nonimmed_operand\" \"=D,D,D,D,R,R,a,q,a,W,a,a,U,*a,*A\")\n-\t(match_operand:SI 1 \"move_operand\" \"M,D,d,R,D,d,r,r,I,i,T,U,r,*A,*r\"))]\n+  [(set (match_operand:SI 0 \"nonimmed_operand\" \"=D,D,D,D,R,R,a,q,a,a,W,a,a,U,*a,*A\")\n+\t(match_operand:SI 1 \"move_operand\" \"M,D,d,R,D,d,r,r,I,Y,i,T,U,r,*A,*r\"))]\n   \"xtensa_valid_move (SImode, operands)\"\n   \"@\n    movi.n\\t%0, %x1\n@@ -774,15 +774,16 @@\n    mov\\t%0, %1\n    movsp\\t%0, %1\n    movi\\t%0, %x1\n+   movi\\t%0, %1\n    const16\\t%0, %t1\\;const16\\t%0, %b1\n    %v1l32r\\t%0, %1\n    %v1l32i\\t%0, %1\n    %v0s32i\\t%1, %0\n    rsr\\t%0, ACCLO\n    wsr\\t%1, ACCLO\"\n-  [(set_attr \"type\" \"move,move,move,load,store,store,move,move,move,move,load,load,store,rsr,wsr\")\n+  [(set_attr \"type\" \"move,move,move,load,store,store,move,move,move,move,move,load,load,store,rsr,wsr\")\n    (set_attr \"mode\"\t\"SI\")\n-   (set_attr \"length\"\t\"2,2,2,2,2,2,3,3,3,6,3,3,3,3,3\")])\n+   (set_attr \"length\"\t\"2,2,2,2,2,2,3,3,3,3,6,3,3,3,3,3\")])\n \n ;; 16-bit Integer moves\n \n@@ -796,21 +797,22 @@\n })\n \n (define_insn \"movhi_internal\"\n-  [(set (match_operand:HI 0 \"nonimmed_operand\" \"=D,D,a,a,a,U,*a,*A\")\n-\t(match_operand:HI 1 \"move_operand\" \"M,d,r,I,U,r,*A,*r\"))]\n+  [(set (match_operand:HI 0 \"nonimmed_operand\" \"=D,D,a,a,a,a,U,*a,*A\")\n+\t(match_operand:HI 1 \"move_operand\" \"M,d,r,I,Y,U,r,*A,*r\"))]\n   \"xtensa_valid_move (HImode, operands)\"\n   \"@\n    movi.n\\t%0, %x1\n    mov.n\\t%0, %1\n    mov\\t%0, %1\n    movi\\t%0, %x1\n+   movi\\t%0, %1\n    %v1l16ui\\t%0, %1\n    %v0s16i\\t%1, %0\n    rsr\\t%0, ACCLO\n    wsr\\t%1, ACCLO\"\n-  [(set_attr \"type\"\t\"move,move,move,move,load,store,rsr,wsr\")\n+  [(set_attr \"type\"\t\"move,move,move,move,move,load,store,rsr,wsr\")\n    (set_attr \"mode\"\t\"HI\")\n-   (set_attr \"length\"\t\"2,2,3,3,3,3,3,3\")])\n+   (set_attr \"length\"\t\"2,2,3,3,3,3,3,3,3\")])\n \n ;; 8-bit Integer moves\n \n@@ -881,7 +883,7 @@\n \t(match_operand:SF 1 \"general_operand\" \"\"))]\n   \"\"\n {\n-  if (!TARGET_CONST16 && CONSTANT_P (operands[1]))\n+  if (!TARGET_CONST16 && !TARGET_AUTO_LITPOOLS && CONSTANT_P (operands[1]))\n     operands[1] = force_const_mem (SFmode, operands[1]);\n \n   if ((!register_operand (operands[0], SFmode)\n@@ -896,8 +898,8 @@\n })\n \n (define_insn \"movsf_internal\"\n-  [(set (match_operand:SF 0 \"nonimmed_operand\" \"=f,f,U,D,D,R,a,f,a,W,a,a,U\")\n-\t(match_operand:SF 1 \"move_operand\" \"f,U,f,d,R,d,r,r,f,iF,T,U,r\"))]\n+  [(set (match_operand:SF 0 \"nonimmed_operand\" \"=f,f,U,D,D,R,a,f,a,a,W,a,a,U\")\n+\t(match_operand:SF 1 \"move_operand\" \"f,U,f,d,R,d,r,r,f,Y,iF,T,U,r\"))]\n   \"((register_operand (operands[0], SFmode)\n      || register_operand (operands[1], SFmode))\n     && !(FP_REG_P (xt_true_regnum (operands[0]))\n@@ -912,13 +914,14 @@\n    mov\\t%0, %1\n    wfr\\t%0, %1\n    rfr\\t%0, %1\n+   movi\\t%0, %y1\n    const16\\t%0, %t1\\;const16\\t%0, %b1\n    %v1l32r\\t%0, %1\n    %v1l32i\\t%0, %1\n    %v0s32i\\t%1, %0\"\n-  [(set_attr \"type\"\t\"farith,fload,fstore,move,load,store,move,farith,farith,move,load,load,store\")\n+  [(set_attr \"type\"\t\"farith,fload,fstore,move,load,store,move,farith,farith,move,move,load,load,store\")\n    (set_attr \"mode\"\t\"SF\")\n-   (set_attr \"length\"\t\"3,3,3,2,2,2,3,3,3,6,3,3,3\")])\n+   (set_attr \"length\"\t\"3,3,3,2,2,2,3,3,3,3,6,3,3,3\")])\n \n (define_insn \"*lsiu\"\n   [(set (match_operand:SF 0 \"register_operand\" \"=f\")\n@@ -991,7 +994,7 @@\n \t(match_operand:DF 1 \"general_operand\" \"\"))]\n   \"\"\n {\n-  if (CONSTANT_P (operands[1]) && !TARGET_CONST16)\n+  if (CONSTANT_P (operands[1]) && !TARGET_CONST16 && !TARGET_AUTO_LITPOOLS)\n     operands[1] = force_const_mem (DFmode, operands[1]);\n \n   if (!register_operand (operands[0], DFmode)\n@@ -1002,8 +1005,8 @@\n })\n \n (define_insn_and_split \"movdf_internal\"\n-  [(set (match_operand:DF 0 \"nonimmed_operand\" \"=a,W,a,a,U\")\n-\t(match_operand:DF 1 \"move_operand\" \"r,iF,T,U,r\"))]\n+  [(set (match_operand:DF 0 \"nonimmed_operand\" \"=a,a,W,a,a,U\")\n+\t(match_operand:DF 1 \"move_operand\" \"r,Y,iF,T,U,r\"))]\n   \"register_operand (operands[0], DFmode)\n    || register_operand (operands[1], DFmode)\"\n   \"#\""}, {"sha": "21c6e962abbf4bb73faf1895ee890510623ad284", "filename": "gcc/config/xtensa/xtensa.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.opt?ref=a024f5143d592db41c5316c24d3e10fd86c839ec", "patch": "@@ -38,6 +38,10 @@ mtext-section-literals\n Target\n Intersperse literal pools with code in the text section\n \n+mauto-litpools\n+Target Report Mask(AUTO_LITPOOLS)\n+Relax literals in assembler and place them automatically in the text section\n+\n mserialize-volatile\n Target Report Mask(SERIALIZE_VOLATILE)\n -mno-serialize-volatile\tDo not serialize volatile memory references with MEMW instructions"}, {"sha": "0ae2e26b1e6ce41b2d001fc28c267cadf89f790f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a024f5143d592db41c5316c24d3e10fd86c839ec/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=a024f5143d592db41c5316c24d3e10fd86c839ec", "patch": "@@ -1120,6 +1120,7 @@ See RS/6000 and PowerPC Options.\n -mforce-no-pic @gol\n -mserialize-volatile  -mno-serialize-volatile @gol\n -mtext-section-literals  -mno-text-section-literals @gol\n+-mauto-litpools  -mno-auto-litpools @gol\n -mtarget-align  -mno-target-align @gol\n -mlongcalls  -mno-longcalls}\n \n@@ -23605,7 +23606,23 @@ pools from separate object files to remove redundant literals and\n improve code size.  With @option{-mtext-section-literals}, the literals\n are interspersed in the text section in order to keep them as close as\n possible to their references.  This may be necessary for large assembly\n-files.\n+files.  Literals for each function are placed right before that function.\n+\n+@item -mauto-litpools\n+@itemx -mno-auto-litpools\n+@opindex mauto-litpools\n+@opindex mno-auto-litpools\n+These options control the treatment of literal pools.  The default is\n+@option{-mno-auto-litpools}, which places literals in a separate\n+section in the output file unless @option{-mtext-section-literals} is\n+used.  With @option{-mauto-litpools} the literals are interspersed in\n+the text section by the assembler.  Compiler does not produce explicit\n+@code{.literal} directives and loads literals into registers with\n+@code{MOVI} instructions instead of @code{L32R} to let the assembler\n+do relaxation and place literals as necessary.  This option allows\n+assembler to create several literal pools per function and assemble\n+very big functions, which may not be possible with\n+@option{-mtext-section-literals}.\n \n @item -mtarget-align\n @itemx -mno-target-align"}]}