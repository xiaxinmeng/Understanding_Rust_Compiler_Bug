{"sha": "28d0e143fe4a942b5c29b087db18107664e0809f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjhkMGUxNDNmZTRhOTQyYjVjMjliMDg3ZGIxODEwNzY2NGUwODA5Zg==", "commit": {"author": {"name": "Paolo Bonzini", "email": "bonzini@gnu.org", "date": "2005-08-23T17:39:59Z"}, "committer": {"name": "Paolo Bonzini", "email": "bonzini@gcc.gnu.org", "date": "2005-08-23T17:39:59Z"}, "message": "predicates.md (equality_operator): New.\n\n2005-08-23  Paolo Bonzini  <bonzini@gnu.org>\n\n\t* config/rs6000/predicates.md (equality_operator): New.\n\t* config/rs6000/rs6000.md: Rewrite as a peephole2 the split for\n\tcomparison with a large constant.\n\nFrom-SVN: r103405", "tree": {"sha": "c453d587e3dcaaf45e4a56b9f0f8eb38032b5356", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c453d587e3dcaaf45e4a56b9f0f8eb38032b5356"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/28d0e143fe4a942b5c29b087db18107664e0809f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d0e143fe4a942b5c29b087db18107664e0809f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/28d0e143fe4a942b5c29b087db18107664e0809f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/28d0e143fe4a942b5c29b087db18107664e0809f/comments", "author": {"login": "bonzini", "id": 42082, "node_id": "MDQ6VXNlcjQyMDgy", "avatar_url": "https://avatars.githubusercontent.com/u/42082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonzini", "html_url": "https://github.com/bonzini", "followers_url": "https://api.github.com/users/bonzini/followers", "following_url": "https://api.github.com/users/bonzini/following{/other_user}", "gists_url": "https://api.github.com/users/bonzini/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonzini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonzini/subscriptions", "organizations_url": "https://api.github.com/users/bonzini/orgs", "repos_url": "https://api.github.com/users/bonzini/repos", "events_url": "https://api.github.com/users/bonzini/events{/privacy}", "received_events_url": "https://api.github.com/users/bonzini/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e293cbd5364ac751cb4bad7ea54b098620a943f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e293cbd5364ac751cb4bad7ea54b098620a943f5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e293cbd5364ac751cb4bad7ea54b098620a943f5"}], "stats": {"total": 65, "additions": 43, "deletions": 22}, "files": [{"sha": "4c1dd35148953d6321cdd511484b7133a94f166f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0e143fe4a942b5c29b087db18107664e0809f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0e143fe4a942b5c29b087db18107664e0809f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=28d0e143fe4a942b5c29b087db18107664e0809f", "patch": "@@ -1,3 +1,9 @@\n+2005-08-23  Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* config/rs6000/predicates.md (equality_operator): New.\n+\t* config/rs6000/rs6000.md: Rewrite as a peephole2 the split for\n+\tcomparison with a large constant.\n+\n 2005-08-23  Mark Mitchell  <mark@codesourcery.com>\n \n \t* hwint.h (HOST_WIDE_INT_PRINT): Use HOST_LONG_LONG_FORMAT."}, {"sha": "3b5ef34a41b2f85c771d409946b6b3d5599babe1", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0e143fe4a942b5c29b087db18107664e0809f/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0e143fe4a942b5c29b087db18107664e0809f/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=28d0e143fe4a942b5c29b087db18107664e0809f", "patch": "@@ -710,6 +710,10 @@\n (define_predicate \"boolean_or_operator\"\n   (match_code \"ior,xor\"))\n \n+;; Return true if operand is an equality operator.\n+(define_special_predicate \"equality_operator\"\n+  (match_code \"eq,ne\"))\n+\n ;; Return true if operand is MIN or MAX operator.\n (define_predicate \"min_max_operator\"\n   (match_code \"smin,smax,umin,umax\"))"}, {"sha": "d1f810919ba550917af2d6bfd8957b5c28fc1a15", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 33, "deletions": 22, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/28d0e143fe4a942b5c29b087db18107664e0809f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/28d0e143fe4a942b5c29b087db18107664e0809f/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=28d0e143fe4a942b5c29b087db18107664e0809f", "patch": "@@ -10729,32 +10729,43 @@\n   [(set_attr \"type\" \"cmp\")])\n \n ;; If we are comparing a register for equality with a large constant,\n-;; we can do this with an XOR followed by a compare.  But we need a scratch\n-;; register for the result of the XOR.\n+;; we can do this with an XOR followed by a compare.  But this is profitable\n+;; only if the large constant is only used for the comparison (and in this\n+;; case we already have a register to reuse as scratch).\n \n-(define_split\n-  [(set (match_operand:CC 0 \"cc_reg_operand\" \"\")\n-\t(compare:CC (match_operand:SI 1 \"gpc_reg_operand\" \"\")\n-\t\t    (match_operand:SI 2 \"non_short_cint_operand\" \"\")))\n-   (clobber (match_operand:SI 3 \"gpc_reg_operand\" \"\"))]\n-  \"find_single_use (operands[0], insn, 0)\n-   && (GET_CODE (*find_single_use (operands[0], insn, 0)) == EQ\n-       || GET_CODE (*find_single_use (operands[0], insn, 0)) == NE)\"\n-  [(set (match_dup 3) (xor:SI (match_dup 1) (match_dup 4)))\n-   (set (match_dup 0) (compare:CC (match_dup 3) (match_dup 5)))]\n-  \"\n-{\n-  /* Get the constant we are comparing against, C,  and see what it looks like\n-     sign-extended to 16 bits.  Then see what constant could be XOR'ed\n-     with C to get the sign-extended value.  */\n-\n-  HOST_WIDE_INT c = INTVAL (operands[2]);\n+(define_peephole2\n+  [(set (match_operand:GPR 0 \"register_operand\")\n+        (match_operand:GPR 1 \"logical_operand\" \"\"))\n+   (set (match_dup 0) (match_operator:GPR 3 \"boolean_or_operator\"\n+\t\t       [(match_dup 0)\n+\t\t\t(match_operand:GPR 2 \"logical_operand\" \"\")]))\n+   (set (match_operand:CC 4 \"cc_reg_operand\" \"\")\n+        (compare:CC (match_operand:GPR 5 \"gpc_reg_operand\" \"\")\n+                    (match_dup 0)))\n+   (set (pc)\n+        (if_then_else (match_operator 6 \"equality_operator\"\n+                       [(match_dup 4) (const_int 0)])\n+                      (match_operand 7 \"\" \"\")\n+                      (match_operand 8 \"\" \"\")))]\n+  \"peep2_reg_dead_p (3, operands[0])\"\n+ [(set (match_dup 0) (xor:GPR (match_dup 5) (match_dup 9)))\n+  (set (match_dup 4) (compare:CC (match_dup 0) (match_dup 10)))\n+  (set (pc) (if_then_else (match_dup 6) (match_dup 7) (match_dup 8)))]\n+ \n+{\n+  /* Get the constant we are comparing against, and see what it looks like\n+     when sign-extended from 16 to 32 bits.  Then see what constant we could\n+     XOR with SEXTC to get the sign-extended value.  */\n+  rtx cnst = simplify_const_binary_operation (GET_CODE (operands[3]),\n+\t\t\t\t\t      GET_MODE (operands[3]),\n+\t\t\t\t\t      operands[1], operands[2]);\n+  HOST_WIDE_INT c = INTVAL (cnst);\n   HOST_WIDE_INT sextc = ((c & 0xffff) ^ 0x8000) - 0x8000;\n   HOST_WIDE_INT xorv = c ^ sextc;\n \n-  operands[4] = GEN_INT (xorv);\n-  operands[5] = GEN_INT (sextc);\n-}\")\n+  operands[9] = GEN_INT (xorv);\n+  operands[10] = GEN_INT (sextc);\n+})\n \n (define_insn \"*cmpsi_internal2\"\n   [(set (match_operand:CCUNS 0 \"cc_reg_operand\" \"=y\")"}]}