{"sha": "6f6074ea6f56b6b887939a2f9925a0b456ebcbba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmY2MDc0ZWE2ZjU2YjZiODg3OTM5YTJmOTkyNWEwYjQ1NmViY2JiYQ==", "commit": {"author": {"name": "Michael Meissner", "email": "meissner@cygnus.com", "date": "1998-06-16T10:48:57Z"}, "committer": {"name": "Michael Meissner", "email": "meissner@gcc.gnu.org", "date": "1998-06-16T10:48:57Z"}, "message": "Print constants for function_units_used and *_blockage_range more human friendly\n\nFrom-SVN: r20523", "tree": {"sha": "37f9b5bf19c6b00e1af0f5d6117e7cef1688a790", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/37f9b5bf19c6b00e1af0f5d6117e7cef1688a790"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6f6074ea6f56b6b887939a2f9925a0b456ebcbba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f6074ea6f56b6b887939a2f9925a0b456ebcbba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f6074ea6f56b6b887939a2f9925a0b456ebcbba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f6074ea6f56b6b887939a2f9925a0b456ebcbba/comments", "author": null, "committer": null, "parents": [{"sha": "56c5997c8e8cdd396d205d234bc4c9abd8c30369", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/56c5997c8e8cdd396d205d234bc4c9abd8c30369", "html_url": "https://github.com/Rust-GCC/gccrs/commit/56c5997c8e8cdd396d205d234bc4c9abd8c30369"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "1bb94a9179a773b66af43f91101e1182072801b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f6074ea6f56b6b887939a2f9925a0b456ebcbba/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f6074ea6f56b6b887939a2f9925a0b456ebcbba/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6f6074ea6f56b6b887939a2f9925a0b456ebcbba", "patch": "@@ -1,3 +1,17 @@\n+Tue Jun 16 13:44:02 1998  Michael Meissner  <meissner@cygnus.com>\n+\n+\t* genattrtab.c (struct attr_desc): Change int flags to bit\n+\tfields.  Add bit fields for this being function_units_used\n+\tor *_blockage_range attributes.\n+\t(write_unit_name): New function to print a function unit name\n+\tgiven unit #.\n+\t(expand_units): Indicate whether this is function_units_used or\n+\t*_blockage_range attributes.\n+\t(write_toplevel_expr): Print function_units_used and\n+\t*_blockage_range attributes in a more friendly fashion.\n+\t(make_internal_attr): Indicate whether this attribute is either\n+\tfunction_units_used or *_blockage_range.\n+\n Mon Jun 15 17:06:43 1998  Michael Meissner  <meissner@cygnus.com>\n \t\t\t  Jim Wilson  <wilson@cygnus.com>\n "}, {"sha": "253aaaefd5ee14c6f55a39f289ad392263332e0a", "filename": "gcc/genattrtab.c", "status": "modified", "additions": 61, "deletions": 11, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6f6074ea6f56b6b887939a2f9925a0b456ebcbba/gcc%2Fgenattrtab.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6f6074ea6f56b6b887939a2f9925a0b456ebcbba/gcc%2Fgenattrtab.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenattrtab.c?ref=6f6074ea6f56b6b887939a2f9925a0b456ebcbba", "patch": "@@ -178,11 +178,13 @@ struct attr_desc\n {\n   char *name;\t\t\t/* Name of attribute.  */\n   struct attr_desc *next;\t/* Next attribute.  */\n-  int is_numeric;\t\t/* Values of this attribute are numeric.  */\n-  int negative_ok;\t\t/* Allow negative numeric values.  */\n-  int unsigned_p;\t\t/* Make the output function unsigned int.  */\n-  int is_const;\t\t\t/* Attribute value constant for each run.  */\n-  int is_special;\t\t/* Don't call `write_attr_set'.  */\n+  unsigned is_numeric\t: 1;\t/* Values of this attribute are numeric.  */\n+  unsigned negative_ok\t: 1;\t/* Allow negative numeric values.  */\n+  unsigned unsigned_p\t: 1;\t/* Make the output function unsigned int.  */\n+  unsigned is_const\t: 1;\t/* Attribute value constant for each run.  */\n+  unsigned is_special\t: 1;\t/* Don't call `write_attr_set'.  */\n+  unsigned func_units_p\t: 1;\t/* this is the function_units attribute */\n+  unsigned blockage_p\t: 1;\t/* this is the blockage range function */\n   struct attr_value *first_value; /* First value of this attribute.  */\n   struct attr_value *default_val; /* Default value for this attribute.  */\n };\n@@ -435,6 +437,7 @@ static void write_attr_set\tPROTO((struct attr_desc *, int, rtx, char *,\n \t\t\t\t       char *, rtx, int, int));\n static void write_attr_case\tPROTO((struct attr_desc *, struct attr_value *,\n \t\t\t\t       int, char *, char *, int, rtx));\n+static void write_unit_name\tPROTO((char *, int, char *));\n static void write_attr_valueq\tPROTO((struct attr_desc *, char *));\n static void write_attr_value\tPROTO((struct attr_desc *, rtx));\n static void write_upcase\tPROTO((char *));\n@@ -1909,7 +1912,7 @@ expand_units ()\n       unitsmask = attr_rtx (FFS, unitsmask);\n     }\n \n-  make_internal_attr (\"*function_units_used\", unitsmask, 2);\n+  make_internal_attr (\"*function_units_used\", unitsmask, 10);\n \n   /* Create an array of ops for each unit.  Add an extra unit for the\n      result_ready_cost function that has the ops of all other units.  */\n@@ -2128,7 +2131,7 @@ expand_units ()\n \n \t      str = attr_printf (strlen (unit->name) + sizeof (\"*_unit_blockage_range\"),\n \t\t\t\t \"*%s_unit_blockage_range\", unit->name);\n-\t      make_internal_attr (str, newexp, 4);\n+\t      make_internal_attr (str, newexp, 20);\n \t    }\n \n \t  str = attr_printf (strlen (unit->name) + sizeof (\"*_unit_ready_cost\"),\n@@ -5176,17 +5179,62 @@ write_toplevel_expr (p)\n \f\n /* Utilities to write names in various forms.  */\n \n+static void\n+write_unit_name (prefix, num, suffix)\n+     char *prefix;\n+     int num;\n+     char *suffix;\n+{\n+  struct function_unit *unit;\n+\n+  for (unit = units; unit; unit = unit->next)\n+    if (unit->num == num)\n+      {\n+\tprintf (\"%s%s%s\", prefix, unit->name, suffix);\n+\treturn;\n+      }\n+\n+  printf (\"%s<unknown>%s\", prefix, suffix);\n+}\n+\n static void\n write_attr_valueq (attr, s)\n      struct attr_desc *attr;\n      char *s;\n {\n   if (attr->is_numeric)\n     {\n-      printf (\"%s\", s);\n-      /* Make the blockage range values easier to read.  */\n-      if (strlen (s) > 1)\n-\tprintf (\" /* 0x%x */\", atoi (s));\n+      int num = atoi (s);\n+\n+      printf (\"%d\", num);\n+\n+      /* Make the blockage range values and function units used values easier\n+         to read.  */\n+      if (attr->func_units_p)\n+\t{\n+\t  if (num == -1)\n+\t    printf (\" /* units: none */\");\n+\t  else if (num >= 0)\n+\t    write_unit_name (\" /* units: \", num, \" */\");\n+\t  else\n+\t    {\n+\t      int i;\n+\t      char *sep = \" /* units: \";\n+\t      for (i = 0, num = ~num; num; i++, num >>= 1)\n+\t\tif (num & 1)\n+\t\t  {\n+\t\t    write_unit_name (sep, i, (num == 1) ? \" */\" : \"\");\n+\t\t    sep = \", \";\n+\t\t  }\n+\t    }\n+\t}\n+\n+      else if (attr->blockage_p)\n+\tprintf (\" /* min %d, max %d */\", num >> (HOST_BITS_PER_INT / 2),\n+\t\tnum & ((1 << (HOST_BITS_PER_INT / 2)) - 1));\n+\n+      else if (num > 9 || num < 0)\n+\tprintf (\" /* 0x%x */\", num);\n     }\n   else\n     {\n@@ -5626,6 +5674,8 @@ make_internal_attr (name, value, special)\n   attr->is_special = (special & 1) != 0;\n   attr->negative_ok = (special & 2) != 0;\n   attr->unsigned_p = (special & 4) != 0;\n+  attr->func_units_p = (special & 8) != 0;\n+  attr->blockage_p = (special & 16) != 0;\n   attr->default_val = get_attr_value (value, attr, -2);\n }\n "}]}