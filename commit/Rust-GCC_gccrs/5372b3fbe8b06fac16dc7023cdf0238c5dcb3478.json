{"sha": "5372b3fbe8b06fac16dc7023cdf0238c5dcb3478", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTM3MmIzZmJlOGIwNmZhYzE2ZGM3MDIzY2RmMDIzOGM1ZGNiMzQ3OA==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2002-01-23T07:51:16Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2002-01-23T07:51:16Z"}, "message": "re PR c/3504 (__alignof__ not working correctly)\n\n\tPR c/3504\n\t* doc/extend.texi: Correct documentation of __alignof__.\n\nFrom-SVN: r49126", "tree": {"sha": "d6141c2a328bd5520c033e87b336731cf7aca2dd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d6141c2a328bd5520c033e87b336731cf7aca2dd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5372b3fbe8b06fac16dc7023cdf0238c5dcb3478", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5372b3fbe8b06fac16dc7023cdf0238c5dcb3478", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5372b3fbe8b06fac16dc7023cdf0238c5dcb3478", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5372b3fbe8b06fac16dc7023cdf0238c5dcb3478/comments", "author": null, "committer": null, "parents": [{"sha": "9b6e0e57a1acad4ecef432950815c3b4a793f700", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9b6e0e57a1acad4ecef432950815c3b4a793f700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9b6e0e57a1acad4ecef432950815c3b4a793f700"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "796052927e395a7751da467eb6b530ffc15196f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5372b3fbe8b06fac16dc7023cdf0238c5dcb3478/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5372b3fbe8b06fac16dc7023cdf0238c5dcb3478/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5372b3fbe8b06fac16dc7023cdf0238c5dcb3478", "patch": "@@ -1,3 +1,8 @@\n+2002-01-23  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\tPR c/3504\n+\t* doc/extend.texi: Correct documentation of __alignof__.\n+\n 2002-01-22  Zack Weinberg  <zack@codesourcery.com>\n \n \t* params.h: Rename arguments of DEFPARAM so that it will be"}, {"sha": "48408332bc906ab47fea5d4b0c58a10c7f3afa45", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 7, "deletions": 12, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5372b3fbe8b06fac16dc7023cdf0238c5dcb3478/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5372b3fbe8b06fac16dc7023cdf0238c5dcb3478/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=5372b3fbe8b06fac16dc7023cdf0238c5dcb3478", "patch": "@@ -2754,27 +2754,22 @@ Some machines never actually require alignment; they allow reference to any\n data type even at an odd addresses.  For these machines, @code{__alignof__}\n reports the @emph{recommended} alignment of a type.\n \n-When the operand of @code{__alignof__} is an lvalue rather than a type, the\n-value is the largest alignment that the lvalue is known to have.  It may\n-have this alignment as a result of its data type, or because it is part of\n-a structure and inherits alignment from that structure.  For example, after\n-this declaration:\n+If the operand of @code{__alignof__} is an lvalue rather than a type,\n+its value is the required alignment for its type, taking into account\n+any minimum alignment specified with GCC's @code{__attribute__}\n+extension (@pxref{Variable Attributes}).  For example, after this\n+declaration:\n \n @example\n struct foo @{ int x; char y; @} foo1;\n @end example\n \n @noindent\n-the value of @code{__alignof__ (foo1.y)} is probably 2 or 4, the same as\n-@code{__alignof__ (int)}, even though the data type of @code{foo1.y}\n-does not itself demand any alignment.\n+the value of @code{__alignof__ (foo1.y)} is 1, even though its actual\n+alignment is probably 2 or 4, the same as @code{__alignof__ (int)}.\n \n It is an error to ask for the alignment of an incomplete type.\n \n-A related feature which lets you specify the alignment of an object is\n-@code{__attribute__ ((aligned (@var{alignment})))}; see the following\n-section.\n-\n @node Variable Attributes\n @section Specifying Attributes of Variables\n @cindex attribute of variables"}]}