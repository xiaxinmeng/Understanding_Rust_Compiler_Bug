{"sha": "793c28b87fbb215df23a3e72d33a4ffa07899044", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzkzYzI4Yjg3ZmJiMjE1ZGYyM2EzZTcyZDMzYTRmZmEwNzg5OTA0NA==", "commit": {"author": {"name": "James Greenhalgh", "email": "james.greenhalgh@arm.com", "date": "2013-11-26T10:04:51Z"}, "committer": {"name": "James Greenhalgh", "email": "jgreenhalgh@gcc.gnu.org", "date": "2013-11-26T10:04:51Z"}, "message": "[AArch64] [4/4 Fix vtbx1] Handle vtbx{1,3} emulation sequence using\n other intrinsics\n\ngcc/\n\t* config/aarch64/arm_neon.h (vtbx1_<psu>8): Emulate behaviour\n\tusing other intrinsics.\n\t(vtbx3_<psu>8): Likewise.\n\nFrom-SVN: r205386", "tree": {"sha": "a68690bf97a50d533e0719b658673fbb4d8b6692", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a68690bf97a50d533e0719b658673fbb4d8b6692"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/793c28b87fbb215df23a3e72d33a4ffa07899044", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793c28b87fbb215df23a3e72d33a4ffa07899044", "html_url": "https://github.com/Rust-GCC/gccrs/commit/793c28b87fbb215df23a3e72d33a4ffa07899044", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/793c28b87fbb215df23a3e72d33a4ffa07899044/comments", "author": {"login": "jgreenhalgh-arm", "id": 6104025, "node_id": "MDQ6VXNlcjYxMDQwMjU=", "avatar_url": "https://avatars.githubusercontent.com/u/6104025?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jgreenhalgh-arm", "html_url": "https://github.com/jgreenhalgh-arm", "followers_url": "https://api.github.com/users/jgreenhalgh-arm/followers", "following_url": "https://api.github.com/users/jgreenhalgh-arm/following{/other_user}", "gists_url": "https://api.github.com/users/jgreenhalgh-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jgreenhalgh-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jgreenhalgh-arm/subscriptions", "organizations_url": "https://api.github.com/users/jgreenhalgh-arm/orgs", "repos_url": "https://api.github.com/users/jgreenhalgh-arm/repos", "events_url": "https://api.github.com/users/jgreenhalgh-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/jgreenhalgh-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46e778c4f5a3c93deaf16faeacd4628823f5efb0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46e778c4f5a3c93deaf16faeacd4628823f5efb0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46e778c4f5a3c93deaf16faeacd4628823f5efb0"}], "stats": {"total": 171, "additions": 66, "deletions": 105}, "files": [{"sha": "d1885d97d4d7ecbe11f1e99f78390cb98aa7ecda", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c28b87fbb215df23a3e72d33a4ffa07899044/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c28b87fbb215df23a3e72d33a4ffa07899044/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=793c28b87fbb215df23a3e72d33a4ffa07899044", "patch": "@@ -1,3 +1,9 @@\n+2013-11-26  James Greenhalgh  <james.greenhalgh@arm.com>\n+\n+\t* config/aarch64/arm_neon.h (vtbx1_<psu>8): Emulate behaviour\n+\tusing other intrinsics.\n+\t(vtbx3_<psu>8): Likewise.\n+\n 2013-11-26  James Greenhalgh  <james.greenhalgh@arm.com>\n \n \t* config/aarch64/aarch64-builtins.c"}, {"sha": "03549bd7a27cccb14ed8cdce91cbd4e4278c273f", "filename": "gcc/config/aarch64/arm_neon.h", "status": "modified", "additions": 60, "deletions": 105, "changes": 165, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/793c28b87fbb215df23a3e72d33a4ffa07899044/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/793c28b87fbb215df23a3e72d33a4ffa07899044/gcc%2Fconfig%2Faarch64%2Farm_neon.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Farm_neon.h?ref=793c28b87fbb215df23a3e72d33a4ffa07899044", "patch": "@@ -15134,54 +15134,6 @@ vtbl4_p8 (poly8x8x4_t tab, uint8x8_t idx)\n   return result;\n }\n \n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-vtbx1_s8 (int8x8_t r, int8x8_t tab, int8x8_t idx)\n-{\n-  int8x8_t result;\n-  int8x8_t tmp1;\n-  int8x16_t temp = vcombine_s8 (tab, vcreate_s8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"movi %0.8b, 8\\n\\t\"\n-\t   \"cmhs %0.8b, %3.8b, %0.8b\\n\\t\"\n-\t   \"tbl %1.8b, {%2.16b}, %3.8b\\n\\t\"\n-\t   \"bsl %0.8b, %4.8b, %1.8b\\n\\t\"\n-           : \"+w\"(result), \"=&w\"(tmp1)\n-           : \"w\"(temp), \"w\"(idx), \"w\"(r)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-vtbx1_u8 (uint8x8_t r, uint8x8_t tab, uint8x8_t idx)\n-{\n-  uint8x8_t result;\n-  uint8x8_t tmp1;\n-  uint8x16_t temp = vcombine_u8 (tab, vcreate_u8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"movi %0.8b, 8\\n\\t\"\n-\t   \"cmhs %0.8b, %3.8b, %0.8b\\n\\t\"\n-\t   \"tbl %1.8b, {%2.16b}, %3.8b\\n\\t\"\n-\t   \"bsl %0.8b, %4.8b, %1.8b\\n\\t\"\n-           : \"+w\"(result), \"=&w\"(tmp1)\n-           : \"w\"(temp), \"w\"(idx), \"w\"(r)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n-__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n-vtbx1_p8 (poly8x8_t r, poly8x8_t tab, uint8x8_t idx)\n-{\n-  poly8x8_t result;\n-  poly8x8_t tmp1;\n-  poly8x16_t temp = vcombine_p8 (tab, vcreate_p8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"movi %0.8b, 8\\n\\t\"\n-\t   \"cmhs %0.8b, %3.8b, %0.8b\\n\\t\"\n-\t   \"tbl %1.8b, {%2.16b}, %3.8b\\n\\t\"\n-\t   \"bsl %0.8b, %4.8b, %1.8b\\n\\t\"\n-           : \"+w\"(result), \"=&w\"(tmp1)\n-           : \"w\"(temp), \"w\"(idx), \"w\"(r)\n-           : /* No clobbers */);\n-  return result;\n-}\n-\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vtbx2_s8 (int8x8_t r, int8x8x2_t tab, int8x8_t idx)\n {\n@@ -15218,63 +15170,6 @@ vtbx2_p8 (poly8x8_t r, poly8x8x2_t tab, uint8x8_t idx)\n   return result;\n }\n \n-__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n-vtbx3_s8 (int8x8_t r, int8x8x3_t tab, int8x8_t idx)\n-{\n-  int8x8_t result;\n-  int8x8_t tmp1;\n-  int8x16x2_t temp;\n-  temp.val[0] = vcombine_s8 (tab.val[0], tab.val[1]);\n-  temp.val[1] = vcombine_s8 (tab.val[2], vcreate_s8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"ld1 {v16.16b - v17.16b}, %2\\n\\t\"\n-\t   \"movi %0.8b, 24\\n\\t\"\n-\t   \"cmhs %0.8b, %3.8b, %0.8b\\n\\t\"\n-\t   \"tbl %1.8b, {v16.16b - v17.16b}, %3.8b\\n\\t\"\n-\t   \"bsl %0.8b, %4.8b, %1.8b\\n\\t\"\n-           : \"+w\"(result), \"=&w\"(tmp1)\n-           : \"Q\"(temp), \"w\"(idx), \"w\"(r)\n-           : \"v16\", \"v17\", \"memory\");\n-  return result;\n-}\n-\n-__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n-vtbx3_u8 (uint8x8_t r, uint8x8x3_t tab, uint8x8_t idx)\n-{\n-  uint8x8_t result;\n-  uint8x8_t tmp1;\n-  uint8x16x2_t temp;\n-  temp.val[0] = vcombine_u8 (tab.val[0], tab.val[1]);\n-  temp.val[1] = vcombine_u8 (tab.val[2], vcreate_u8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"ld1 {v16.16b - v17.16b}, %2\\n\\t\"\n-\t   \"movi %0.8b, 24\\n\\t\"\n-\t   \"cmhs %0.8b, %3.8b, %0.8b\\n\\t\"\n-\t   \"tbl %1.8b, {v16.16b - v17.16b}, %3.8b\\n\\t\"\n-\t   \"bsl %0.8b, %4.8b, %1.8b\\n\\t\"\n-           : \"+w\"(result), \"=&w\"(tmp1)\n-           : \"Q\"(temp), \"w\"(idx), \"w\"(r)\n-           : \"v16\", \"v17\", \"memory\");\n-  return result;\n-}\n-\n-__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n-vtbx3_p8 (poly8x8_t r, poly8x8x3_t tab, uint8x8_t idx)\n-{\n-  poly8x8_t result;\n-  poly8x8_t tmp1;\n-  poly8x16x2_t temp;\n-  temp.val[0] = vcombine_p8 (tab.val[0], tab.val[1]);\n-  temp.val[1] = vcombine_p8 (tab.val[2], vcreate_p8 (__AARCH64_UINT64_C (0x0)));\n-  __asm__ (\"ld1 {v16.16b - v17.16b}, %2\\n\\t\"\n-\t   \"movi %0.8b, 24\\n\\t\"\n-\t   \"cmhs %0.8b, %3.8b, %0.8b\\n\\t\"\n-\t   \"tbl %1.8b, {v16.16b - v17.16b}, %3.8b\\n\\t\"\n-\t   \"bsl %0.8b, %4.8b, %1.8b\\n\\t\"\n-           : \"+w\"(result), \"=&w\"(tmp1)\n-           : \"Q\"(temp), \"w\"(idx), \"w\"(r)\n-           : \"v16\", \"v17\", \"memory\");\n-  return result;\n-}\n-\n __extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n vtbx4_s8 (int8x8_t r, int8x8x4_t tab, int8x8_t idx)\n {\n@@ -24920,6 +24815,66 @@ vsubd_u64 (uint64x1_t __a, uint64x1_t __b)\n   return __a - __b;\n }\n \n+/* vtbx1  */\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vtbx1_s8 (int8x8_t __r, int8x8_t __tab, int8x8_t __idx)\n+{\n+  uint8x8_t __mask = vclt_u8 (vreinterpret_u8_s8 (__idx),\n+\t\t\t      vmov_n_u8 (8));\n+  int8x8_t __tbl = vtbl1_s8 (__tab, __idx);\n+\n+  return vbsl_s8 (__mask, __tbl, __r);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+vtbx1_u8 (uint8x8_t __r, uint8x8_t __tab, uint8x8_t __idx)\n+{\n+  uint8x8_t __mask = vclt_u8 (__idx, vmov_n_u8 (8));\n+  uint8x8_t __tbl = vtbl1_u8 (__tab, __idx);\n+\n+  return vbsl_u8 (__mask, __tbl, __r);\n+}\n+\n+__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n+vtbx1_p8 (poly8x8_t __r, poly8x8_t __tab, uint8x8_t __idx)\n+{\n+  uint8x8_t __mask = vclt_u8 (__idx, vmov_n_u8 (8));\n+  poly8x8_t __tbl = vtbl1_p8 (__tab, __idx);\n+\n+  return vbsl_p8 (__mask, __tbl, __r);\n+}\n+\n+/* vtbx3  */\n+\n+__extension__ static __inline int8x8_t __attribute__ ((__always_inline__))\n+vtbx3_s8 (int8x8_t __r, int8x8x3_t __tab, int8x8_t __idx)\n+{\n+  uint8x8_t __mask = vclt_u8 (vreinterpret_u8_s8 (__idx),\n+\t\t\t      vmov_n_u8 (24));\n+  int8x8_t __tbl = vtbl3_s8 (__tab, __idx);\n+\n+  return vbsl_s8 (__mask, __tbl, __r);\n+}\n+\n+__extension__ static __inline uint8x8_t __attribute__ ((__always_inline__))\n+vtbx3_u8 (uint8x8_t __r, uint8x8x3_t __tab, uint8x8_t __idx)\n+{\n+  uint8x8_t __mask = vclt_u8 (__idx, vmov_n_u8 (24));\n+  uint8x8_t __tbl = vtbl3_u8 (__tab, __idx);\n+\n+  return vbsl_u8 (__mask, __tbl, __r);\n+}\n+\n+__extension__ static __inline poly8x8_t __attribute__ ((__always_inline__))\n+vtbx3_p8 (poly8x8_t __r, poly8x8x3_t __tab, uint8x8_t __idx)\n+{\n+  uint8x8_t __mask = vclt_u8 (__idx, vmov_n_u8 (24));\n+  poly8x8_t __tbl = vtbl3_p8 (__tab, __idx);\n+\n+  return vbsl_p8 (__mask, __tbl, __r);\n+}\n+\n /* vtrn */\n \n __extension__ static __inline float32x2x2_t __attribute__ ((__always_inline__))"}]}