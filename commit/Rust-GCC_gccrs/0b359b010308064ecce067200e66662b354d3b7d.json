{"sha": "0b359b010308064ecce067200e66662b354d3b7d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIzNTliMDEwMzA4MDY0ZWNjZTA2NzIwMGU2NjY2MmIzNTRkM2I3ZA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2005-07-16T16:01:57Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2005-07-16T16:01:57Z"}, "message": "re PR c/22421 (problems with -Wformat and bit-fields)\n\n\tPR c/22421\n\t* c-decl.c (c_build_bitfield_integer_type): New function.\n\t(finish_struct): Call it.\n\t* c-pretty-print.c (pp_c_type_specifier): Handle bit-field types.\n\ntestsuite:\n\t* gcc.dg/format/bitfld-1.c: New test.\n\nFrom-SVN: r102091", "tree": {"sha": "5f32a34bba8e5b6ed4a7e93f9ba7f8ff1df01cd4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f32a34bba8e5b6ed4a7e93f9ba7f8ff1df01cd4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b359b010308064ecce067200e66662b354d3b7d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b359b010308064ecce067200e66662b354d3b7d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b359b010308064ecce067200e66662b354d3b7d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b359b010308064ecce067200e66662b354d3b7d/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fcef540f3a1600c26bc7dbebed9c6142f3da7e8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8fcef540f3a1600c26bc7dbebed9c6142f3da7e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8fcef540f3a1600c26bc7dbebed9c6142f3da7e8"}], "stats": {"total": 101, "additions": 97, "deletions": 4}, "files": [{"sha": "a9faa79a611e437731c801ff3d68fb6524b1964d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b359b010308064ecce067200e66662b354d3b7d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b359b010308064ecce067200e66662b354d3b7d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0b359b010308064ecce067200e66662b354d3b7d", "patch": "@@ -1,3 +1,10 @@\n+2005-07-16  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/22421\n+\t* c-decl.c (c_build_bitfield_integer_type): New function.\n+\t(finish_struct): Call it.\n+\t* c-pretty-print.c (pp_c_type_specifier): Handle bit-field types.\n+\n 2005-07-16  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n \t* c-typeck.c (digest_init): Call 'convert_for_assignment'"}, {"sha": "aff59bc170f20fd80003ffe66bb759e8398f35a1", "filename": "gcc/c-decl.c", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b359b010308064ecce067200e66662b354d3b7d/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b359b010308064ecce067200e66662b354d3b7d/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=0b359b010308064ecce067200e66662b354d3b7d", "patch": "@@ -3774,6 +3774,30 @@ check_bitfield_type_and_width (tree *type, tree *width, const char *orig_name)\n \twarning (0, \"%qs is narrower than values of its type\", name);\n     }\n }\n+\n+/* Build a bit-field integer type for the given WIDTH and UNSIGNEDP.  */\n+static tree\n+c_build_bitfield_integer_type (unsigned HOST_WIDE_INT width, int unsignedp)\n+{\n+  /* Extended integer types of the same width as a standard type have\n+     lesser rank, so those of the same width as int promote to int or\n+     unsigned int and are valid for printf formats expecting int or\n+     unsigned int.  To avoid such special cases, avoid creating\n+     extended integer types for bit-fields if a standard integer type\n+     is available.  */\n+  if (width == TYPE_PRECISION (integer_type_node))\n+    return unsignedp ? unsigned_type_node : integer_type_node;\n+  if (width == TYPE_PRECISION (signed_char_type_node))\n+    return unsignedp ? unsigned_char_type_node : signed_char_type_node;\n+  if (width == TYPE_PRECISION (short_integer_type_node))\n+    return unsignedp ? short_unsigned_type_node : short_integer_type_node;\n+  if (width == TYPE_PRECISION (long_integer_type_node))\n+    return unsignedp ? long_unsigned_type_node : long_integer_type_node;\n+  if (width == TYPE_PRECISION (long_long_integer_type_node))\n+    return (unsignedp ? long_long_unsigned_type_node\n+\t    : long_long_integer_type_node);\n+  return build_nonstandard_integer_type (width, unsignedp);\n+}\n \f\n /* Given declspecs and a declarator,\n    determine the name and type of the object declared\n@@ -5376,7 +5400,7 @@ finish_struct (tree t, tree fieldlist, tree attributes)\n \t  if (width != TYPE_PRECISION (type))\n \t    {\n \t      TREE_TYPE (*fieldlistp)\n-\t        = build_nonstandard_integer_type (width, TYPE_UNSIGNED (type));\n+\t\t= c_build_bitfield_integer_type (width, TYPE_UNSIGNED (type));\n \t      DECL_MODE (*fieldlistp) = TYPE_MODE (TREE_TYPE (*fieldlistp));\n \t    }\n \t  DECL_INITIAL (*fieldlistp) = 0;"}, {"sha": "6276923e794c782540d5f607df33143f38d3a76e", "filename": "gcc/c-pretty-print.c", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b359b010308064ecce067200e66662b354d3b7d/gcc%2Fc-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b359b010308064ecce067200e66662b354d3b7d/gcc%2Fc-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-pretty-print.c?ref=0b359b010308064ecce067200e66662b354d3b7d", "patch": "@@ -315,10 +315,21 @@ pp_c_type_specifier (c_pretty_printer *pp, tree t)\n     case INTEGER_TYPE:\n     case REAL_TYPE:\n       if (TYPE_NAME (t))\n-        t = TYPE_NAME (t);\n+\t{\n+\t  t = TYPE_NAME (t);\n+\t  pp_c_type_specifier (pp, t);\n+\t}\n       else\n-        t = c_common_type_for_mode (TYPE_MODE (t), TYPE_UNSIGNED (t));\n-      pp_c_type_specifier (pp, t);\n+\t{\n+\t  int prec = TYPE_PRECISION (t);\n+\t  t = c_common_type_for_mode (TYPE_MODE (t), TYPE_UNSIGNED (t));\n+\t  pp_c_type_specifier (pp, t);\n+\t  if (TYPE_PRECISION (t) != prec)\n+\t    {\n+\t      pp_string (pp, \":\");\n+\t      pp_decimal_int (pp, prec);\n+\t    }\n+\t}\n       break;\n \n     case TYPE_DECL:"}, {"sha": "6590ad75820cfc18717ef1f05ced9a890570e73a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b359b010308064ecce067200e66662b354d3b7d/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b359b010308064ecce067200e66662b354d3b7d/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0b359b010308064ecce067200e66662b354d3b7d", "patch": "@@ -1,3 +1,8 @@\n+2005-07-16  Joseph S. Myers  <joseph@codesourcery.com>\n+\n+\tPR c/22421\n+\t* gcc.dg/format/bitfld-1.c: New test.\n+\n 2005-07-15  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/22204"}, {"sha": "2cea5d220e5fe3df7e44356a5133d239d8d39e17", "filename": "gcc/testsuite/gcc.dg/format/bitfld-1.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b359b010308064ecce067200e66662b354d3b7d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbitfld-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b359b010308064ecce067200e66662b354d3b7d/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbitfld-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fformat%2Fbitfld-1.c?ref=0b359b010308064ecce067200e66662b354d3b7d", "patch": "@@ -0,0 +1,46 @@\n+/* Test for printf formats and bit-fields: bug 22421.  */\n+/* Origin: Joseph Myers <joseph@codesourcery.com> */\n+/* { dg-do compile } */\n+/* { dg-options \"-std=gnu99 -Wformat\" } */\n+\n+#include \"format.h\"\n+\n+struct s {\n+  unsigned int u1 : 1;\n+  signed int s1 : 1;\n+  unsigned int u15 : 15;\n+  signed int s15 : 15;\n+  unsigned int u16 : 16;\n+  signed int s16 : 16;\n+  unsigned long u31 : 31;\n+  signed long s31 : 31;\n+  unsigned long u32 : 32;\n+  signed long s32 : 32;\n+  unsigned long long u48 : 48;\n+} x;\n+\n+void\n+foo (void)\n+{\n+  printf (\"%d%u\", x.u1, x.u1);\n+  printf (\"%d%u\", x.s1, x.s1);\n+  printf (\"%d%u\", x.u15, x.u15);\n+  printf (\"%d%u\", x.s15, x.s15);\n+  printf (\"%d%u\", x.u16, x.u16);\n+  printf (\"%d%u\", x.s16, x.s16);\n+  printf (\"%d%u\", x.u31, x.u31);\n+  printf (\"%d%u\", x.s31, x.s31);\n+#if __LONG_MAX__ > 2147483647 && __INT_MAX__ >= 2147483647\n+  /* If long is wider than 32 bits, the 32-bit bit-fields are int or\n+     unsigned int or promote to those types.  Otherwise, long is 32\n+     bits and the bit-fields are of type plain long or unsigned\n+     long.  */\n+  printf (\"%d%u\", x.u32, x.u32);\n+  printf (\"%d%u\", x.s32, x.s32);\n+#else\n+  printf (\"%ld%lu\", x.u32, x.u32);\n+  printf (\"%ld%lu\", x.s32, x.s32);\n+#endif\n+  printf (\"%llu\", x.u48); /* { dg-warning \"has type '.*unsigned int:48'\" } */\n+  printf (\"%llu\", (unsigned long long)x.u48);\n+}"}]}