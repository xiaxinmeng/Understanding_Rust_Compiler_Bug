{"sha": "026a79f70cf33f836ea5275eda72d4870a3041e5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDI2YTc5ZjcwY2YzM2Y4MzZlYTUyNzVlZGE3MmQ0ODcwYTMwNDFlNQ==", "commit": {"author": {"name": "Andrew Sutton", "email": "andrew.n.sutton@gmail.com", "date": "2017-09-15T21:16:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2017-09-15T21:16:37Z"}, "message": "Add support for -std=c++2a.\n\n\t* c-common.h (cxx_dialect): Add cxx2a as a dialect.\n\t* opt.c: Add options for -std=c++2a and -std=gnu++2a.\n\t* c-opts.c (set_std_cxx2a): New.\n\t(c_common_handle_option): Set options when -std=c++2a is enabled.\n\t(c_common_post_options): Adjust comments.\n\t(set_std_cxx14, set_std_cxx17): Likewise.\n\n\t* doc/cpp.texi (__cplusplus): Document value for -std=c++2a\n\tor -std=gnu+2a.\n\t* doc/invoke.texi: Document -std=c++2a and -std=gnu++2a.\n\n\t* lib/target-supports.exp (check_effective_target_c++17): Return\n\t1 also if check_effective_target_c++2a.\n\t(check_effective_target_c++17_down): New.\n\t(check_effective_target_c++2a_only): New.\n\t(check_effective_target_c++2a): New.\n\t* g++.dg/cpp2a/cplusplus.C: New.\n\n\t* include/cpplib.h (c_lang): Add CXX2A and GNUCXX2A.\n\t* init.c (lang_defaults): Add rows for CXX2A and GNUCXX2A.\n\t(cpp_init_builtins): Set __cplusplus to 201709L for C++2a.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r252850", "tree": {"sha": "2f390353edc0761950168ed8a79be2315be52ac6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2f390353edc0761950168ed8a79be2315be52ac6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/026a79f70cf33f836ea5275eda72d4870a3041e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/026a79f70cf33f836ea5275eda72d4870a3041e5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/026a79f70cf33f836ea5275eda72d4870a3041e5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/026a79f70cf33f836ea5275eda72d4870a3041e5/comments", "author": {"login": "asutton", "id": 570796, "node_id": "MDQ6VXNlcjU3MDc5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/570796?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asutton", "html_url": "https://github.com/asutton", "followers_url": "https://api.github.com/users/asutton/followers", "following_url": "https://api.github.com/users/asutton/following{/other_user}", "gists_url": "https://api.github.com/users/asutton/gists{/gist_id}", "starred_url": "https://api.github.com/users/asutton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asutton/subscriptions", "organizations_url": "https://api.github.com/users/asutton/orgs", "repos_url": "https://api.github.com/users/asutton/repos", "events_url": "https://api.github.com/users/asutton/events{/privacy}", "received_events_url": "https://api.github.com/users/asutton/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "41dfa93fb8d0cfd3a64ba3e6eba9fbbe1d66090c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41dfa93fb8d0cfd3a64ba3e6eba9fbbe1d66090c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41dfa93fb8d0cfd3a64ba3e6eba9fbbe1d66090c"}], "stats": {"total": 137, "additions": 129, "deletions": 8}, "files": [{"sha": "1b5176a760d1e7754ccb8eeacc37ece0e287d690", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=026a79f70cf33f836ea5275eda72d4870a3041e5", "patch": "@@ -1,3 +1,11 @@\n+2017-09-15  Andrew Sutton  <andrew.n.sutton@gmail.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tAdd support for -std=c++2a.\n+\t* doc/cpp.texi (__cplusplus): Document value for -std=c++2a\n+\tor -std=gnu+2a.\n+\t* doc/invoke.texi: Document -std=c++2a and -std=gnu++2a.\n+\n 2017-09-15  Steve Ellcey  <sellcey@cavium.com>\n \n \tPR target/82066"}, {"sha": "8003fb55fc705a120b03d49fa79aed420311c238", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=026a79f70cf33f836ea5275eda72d4870a3041e5", "patch": "@@ -1,3 +1,14 @@\n+2017-09-15  Andrew Sutton  <andrew.n.sutton@gmail.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tAdd support for -std=c++2a.\n+\t* c-common.h (cxx_dialect): Add cxx2a as a dialect.\n+\t* opt.c: Add options for -std=c++2a and -std=gnu++2a.\n+\t* c-opts.c (set_std_cxx2a): New.\n+\t(c_common_handle_option): Set options when -std=c++2a is enabled.\n+\t(c_common_post_options): Adjust comments.\n+\t(set_std_cxx14, set_std_cxx17): Likewise.\n+\n 2017-09-15  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* c-pragma.c (handle_pragma_scalar_storage_order): Expand on error"}, {"sha": "da6a0be92000dd1605c61d700327d3165b231b21", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=026a79f70cf33f836ea5275eda72d4870a3041e5", "patch": "@@ -703,7 +703,9 @@ enum cxx_dialect {\n   /* C++14 */\n   cxx14,\n   /* C++17 */\n-  cxx17\n+  cxx17,\n+  /* C++2a (C++20?) */\n+  cxx2a\n };\n \n /* The C++ dialect being used. C++98 is the default.  */"}, {"sha": "3662aa37be69660c7d1d15dde60f008ec1205104", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=026a79f70cf33f836ea5275eda72d4870a3041e5", "patch": "@@ -111,6 +111,7 @@ static void set_std_cxx98 (int);\n static void set_std_cxx11 (int);\n static void set_std_cxx14 (int);\n static void set_std_cxx17 (int);\n+static void set_std_cxx2a (int);\n static void set_std_c89 (int, int);\n static void set_std_c99 (int);\n static void set_std_c11 (int);\n@@ -637,6 +638,12 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n \tset_std_cxx17 (code == OPT_std_c__17 /* ISO */);\n       break;\n \n+    case OPT_std_c__2a:\n+    case OPT_std_gnu__2a:\n+      if (!preprocessing_asm_p)\n+\tset_std_cxx2a (code == OPT_std_c__2a /* ISO */);\n+      break;\n+\n     case OPT_std_c90:\n     case OPT_std_iso9899_199409:\n       if (!preprocessing_asm_p)\n@@ -938,7 +945,7 @@ c_common_post_options (const char **pfilename)\n \twarn_narrowing = 1;\n \n       /* Unless -f{,no-}ext-numeric-literals has been used explicitly,\n-\t for -std=c++{11,14,17} default to -fno-ext-numeric-literals.  */\n+\t for -std=c++{11,14,17,2a} default to -fno-ext-numeric-literals.  */\n       if (flag_iso && !global_options_set.x_flag_ext_numeric_literals)\n \tcpp_opts->ext_numeric_literals = 0;\n     }\n@@ -1589,7 +1596,7 @@ set_std_cxx14 (int iso)\n   flag_no_gnu_keywords = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n-  /* C++11 includes the C99 standard library.  */\n+  /* C++14 includes the C99 standard library.  */\n   flag_isoc94 = 1;\n   flag_isoc99 = 1;\n   cxx_dialect = cxx14;\n@@ -1604,14 +1611,30 @@ set_std_cxx17 (int iso)\n   flag_no_gnu_keywords = iso;\n   flag_no_nonansi_builtin = iso;\n   flag_iso = iso;\n-  /* C++11 includes the C99 standard library.  */\n+  /* C++17 includes the C11 standard library.  */\n   flag_isoc94 = 1;\n   flag_isoc99 = 1;\n   flag_isoc11 = 1;\n   cxx_dialect = cxx17;\n   lang_hooks.name = \"GNU C++17\";\n }\n \n+/* Set the C++ 202a draft standard (without GNU extensions if ISO).  */\n+static void\n+set_std_cxx2a (int iso)\n+{\n+  cpp_set_lang (parse_in, iso ? CLK_CXX2A: CLK_GNUCXX2A);\n+  flag_no_gnu_keywords = iso;\n+  flag_no_nonansi_builtin = iso;\n+  flag_iso = iso;\n+  /* C++17 includes the C11 standard library.  */\n+  flag_isoc94 = 1;\n+  flag_isoc99 = 1;\n+  flag_isoc11 = 1;\n+  cxx_dialect = cxx2a;\n+  lang_hooks.name = \"GNU C++17\"; /* Pretend C++17 until standardization.  */\n+}\n+\n /* Args to -d specify what to dump.  Silently ignore\n    unrecognized options; they may be aimed at toplev.c.  */\n static void"}, {"sha": "3c2c107ba4b2643a0ae1e8313f23f5e24ccabfbe", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=026a79f70cf33f836ea5275eda72d4870a3041e5", "patch": "@@ -1932,6 +1932,10 @@ std=c++17\n C++ ObjC++\n Conform to the ISO 2017 C++ standard.\n \n+std=c++2a\n+C++ ObjC++\n+Conform to the ISO 2020(?) C++ draft standard (experimental and incomplete support).\n+\n std=c11\n C ObjC\n Conform to the ISO 2011 C standard.\n@@ -1990,6 +1994,10 @@ std=gnu++17\n C++ ObjC++\n Conform to the ISO 2017 C++ standard with GNU extensions.\n \n+std=gnu++2a\n+C++ ObjC++\n+Conform to the ISO 2020(?) C++ draft standard with GNU extensions (experimental and incomplete support).\n+\n std=gnu11\n C ObjC\n Conform to the ISO 2011 C standard with GNU extensions."}, {"sha": "52f2606eadc11ff6006bbb90f8a46be546510f30", "filename": "gcc/doc/cpp.texi", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Fdoc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Fdoc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fcpp.texi?ref=026a79f70cf33f836ea5275eda72d4870a3041e5", "patch": "@@ -1877,7 +1877,10 @@ selected, the value of the macro is\n @code{199711L} for the 1998 C++ standard,\n @code{201103L} for the 2011 C++ standard,\n @code{201402L} for the 2014 C++ standard,\n-@code{201703L} for the 2017 C++ standard.\n+@code{201703L} for the 2017 C++ standard,\n+or an unspecified value strictly larger than @code{201703L} for the\n+experimental languages enabled by @option{-std=c++2a} and\n+@option{-std=gnu++2a}.\n \n @item __OBJC__\n This macro is defined, with value 1, when the Objective-C compiler is in"}, {"sha": "204c9b77b612b4a9638c99112cfba566d1dd0418", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=026a79f70cf33f836ea5275eda72d4870a3041e5", "patch": "@@ -1880,6 +1880,16 @@ The name @samp{c++1z} is deprecated.\n @itemx gnu++1z\n GNU dialect of @option{-std=c++17}.\n The name @samp{gnu++1z} is deprecated.\n+\n+@item c++2a\n+The next revision of the ISO C++ standard, tentatively planned for\n+2020.  Support is highly experimental, and will almost certainly\n+change in incompatible ways in future releases.\n+\n+@item gnu++2a\n+GNU dialect of @option{-std=c++2a}.  Support is highly experimental,\n+and will almost certainly change in incompatible ways in future\n+releases.\n @end table\n \n @item -fgnu89-inline"}, {"sha": "1a94535b0ee0628fc9cf2c60a793a109c6578008", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=026a79f70cf33f836ea5275eda72d4870a3041e5", "patch": "@@ -1,3 +1,14 @@\n+2017-09-15  Andrew Sutton  <andrew.n.sutton@gmail.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tAdd support for -std=c++2a.\n+\t* lib/target-supports.exp (check_effective_target_c++17): Return\n+\t1 also if check_effective_target_c++2a.\n+\t(check_effective_target_c++17_down): New.\n+\t(check_effective_target_c++2a_only): New.\n+\t(check_effective_target_c++2a): New.\n+\t* g++.dg/cpp2a/cplusplus.C: New.\n+\n 2017-09-15  Joseph Myers  <joseph@codesourcery.com>\n \n \tPR c/82071"}, {"sha": "614fc52e391d4c2db177e3991caf1cead077260d", "filename": "gcc/testsuite/g++.dg/cpp2a/cplusplus.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcplusplus.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcplusplus.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp2a%2Fcplusplus.C?ref=026a79f70cf33f836ea5275eda72d4870a3041e5", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do compile }\n+// { dg-options \"-std=c++2a\" }\n+\n+static_assert(__cplusplus > 201703L);"}, {"sha": "6ea71222c6e59cadc1248530c10e9154eca4e445", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026a79f70cf33f836ea5275eda72d4870a3041e5/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=026a79f70cf33f836ea5275eda72d4870a3041e5", "patch": "@@ -7863,8 +7863,35 @@ proc check_effective_target_c++17_only { } {\n     }\n     return 0\n }\n+\n proc check_effective_target_c++17 { } {\n-    return [check_effective_target_c++17_only]\n+    if [check_effective_target_c++17_only] {\n+\treturn 1\n+    }\n+    return [check_effective_target_c++2a]\n+}\n+proc check_effective_target_c++17_down { } {\n+    if ![check_effective_target_c++] {\n+\treturn 0\n+    }\n+    return [expr ![check_effective_target_c++2a] ]\n+}\n+\n+proc check_effective_target_c++2a_only { } {\n+    global cxx_default\n+    if ![check_effective_target_c++] {\n+\treturn 0\n+    }\n+    if [check-flags { { } { } { -std=c++2a -std=gnu++2a } }] {\n+\treturn 1\n+    }\n+    if { $cxx_default == \"c++20\" && [check-flags { { } { } { } { -std=* } }] } {\n+\treturn 1\n+    }\n+    return 0\n+}\n+proc check_effective_target_c++2a { } {\n+    return [check_effective_target_c++2a_only]\n }\n \n # Check for C++ Concepts TS support, i.e. -fconcepts flag."}, {"sha": "0621074b53b6d1712aab4a843a911fc64c096907", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026a79f70cf33f836ea5275eda72d4870a3041e5/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026a79f70cf33f836ea5275eda72d4870a3041e5/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=026a79f70cf33f836ea5275eda72d4870a3041e5", "patch": "@@ -1,3 +1,11 @@\n+2017-09-15  Andrew Sutton  <andrew.n.sutton@gmail.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\tAdd support for -std=c++2a.\n+\t* include/cpplib.h (c_lang): Add CXX2A and GNUCXX2A.\n+\t* init.c (lang_defaults): Add rows for CXX2A and GNUCXX2A.\n+\t(cpp_init_builtins): Set __cplusplus to 201709L for C++2a.\n+\n 2017-09-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* include/cpplib.h (enum c_lang): Rename CLK_GNUCXX1Z"}, {"sha": "804132a44da8fd6df7886a3a1891f4edc9dcd7bf", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026a79f70cf33f836ea5275eda72d4870a3041e5/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026a79f70cf33f836ea5275eda72d4870a3041e5/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=026a79f70cf33f836ea5275eda72d4870a3041e5", "patch": "@@ -171,7 +171,8 @@ enum cpp_ttype\n enum c_lang {CLK_GNUC89 = 0, CLK_GNUC99, CLK_GNUC11,\n \t     CLK_STDC89, CLK_STDC94, CLK_STDC99, CLK_STDC11,\n \t     CLK_GNUCXX, CLK_CXX98, CLK_GNUCXX11, CLK_CXX11,\n-\t     CLK_GNUCXX14, CLK_CXX14, CLK_GNUCXX17, CLK_CXX17, CLK_ASM};\n+\t     CLK_GNUCXX14, CLK_CXX14, CLK_GNUCXX17, CLK_CXX17,\n+\t     CLK_GNUCXX2A, CLK_CXX2A, CLK_ASM};\n \n /* Payload of a NUMBER, STRING, CHAR or COMMENT token.  */\n struct GTY(()) cpp_string {"}, {"sha": "16ff202c8cf11729268c08f810bddaa9cb2fdc54", "filename": "libcpp/init.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/026a79f70cf33f836ea5275eda72d4870a3041e5/libcpp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/026a79f70cf33f836ea5275eda72d4870a3041e5/libcpp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finit.c?ref=026a79f70cf33f836ea5275eda72d4870a3041e5", "patch": "@@ -110,6 +110,8 @@ static const struct lang_flags lang_defaults[] =\n   /* CXX14    */  { 1,  1,  0,  1,  1,  1,  1,   1,   1,   1,    1,     1,     1,   0 },\n   /* GNUCXX17 */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1 },\n   /* CXX17    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1 },\n+  /* GNUCXX2A */  { 1,  1,  1,  1,  1,  0,  1,   1,   1,   1,    1,     1,     0,   1 },\n+  /* CXX2A    */  { 1,  1,  1,  1,  1,  1,  1,   1,   1,   1,    1,     1,     0,   1 },\n   /* ASM      */  { 0,  0,  1,  0,  0,  0,  0,   0,   0,   0,    0,     0,     0,   0 }\n };\n \n@@ -497,7 +499,10 @@ cpp_init_builtins (cpp_reader *pfile, int hosted)\n \n   if (CPP_OPTION (pfile, cplusplus))\n     {\n-      if (CPP_OPTION (pfile, lang) == CLK_CXX17\n+      if (CPP_OPTION (pfile, lang) == CLK_CXX2A\n+\t  || CPP_OPTION (pfile, lang) == CLK_GNUCXX2A)\n+\t_cpp_define_builtin (pfile, \"__cplusplus 201709L\");\n+      else if (CPP_OPTION (pfile, lang) == CLK_CXX17\n \t  || CPP_OPTION (pfile, lang) == CLK_GNUCXX17)\n \t_cpp_define_builtin (pfile, \"__cplusplus 201703L\");\n       else if (CPP_OPTION (pfile, lang) == CLK_CXX14"}]}