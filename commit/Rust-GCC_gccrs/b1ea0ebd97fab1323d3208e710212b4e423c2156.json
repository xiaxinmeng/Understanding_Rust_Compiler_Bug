{"sha": "b1ea0ebd97fab1323d3208e710212b4e423c2156", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjFlYTBlYmQ5N2ZhYjEzMjNkMzIwOGU3MTAyMTJiNGU0MjNjMjE1Ng==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-05T16:01:06Z"}, "committer": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2020-05-05T16:01:06Z"}, "message": "i386: Use \"clobber (scratch)\" in expanders\n\nUse \"clobber (scratch:M)\" instad of \"clobber (match_scratch:M N)\" in expanders.\n\n\t* config/i386/i386.md (fixuns_trunc<mode>si2): Use\n\t\"clobber (scratch:M)\" instad of \"clobber (match_scratch:M N)\".\n\t(addqi3_cconly_overflow): Ditto.\n\t(umulv<mode>4): Ditto.\n\t(<s>mul<mode>3_highpart): Ditto.\n\t(tls_global_dynamic_32): Ditto.\n\t(tls_local_dynamic_base_32): Ditto.\n\t(atanxf2): Ditto.\n\t(asinxf2): Ditto.\n\t(acosxf2): Ditto.\n\t(logxf2): Ditto.\n\t(log10xf2): Ditto.\n\t(log2xf2): Ditto.\n\t(*adddi_4): Remove \"m\" constraint from scratch operand.\n\t(*add<mode>_4): Ditto.", "tree": {"sha": "bcca71624cb5b0ee2831e053c7fbfa09af10907f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/bcca71624cb5b0ee2831e053c7fbfa09af10907f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b1ea0ebd97fab1323d3208e710212b4e423c2156", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ea0ebd97fab1323d3208e710212b4e423c2156", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b1ea0ebd97fab1323d3208e710212b4e423c2156", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b1ea0ebd97fab1323d3208e710212b4e423c2156/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b776bdca9322977cbb8aced2fe24ecd317a6f16b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b776bdca9322977cbb8aced2fe24ecd317a6f16b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b776bdca9322977cbb8aced2fe24ecd317a6f16b"}], "stats": {"total": 58, "additions": 38, "deletions": 20}, "files": [{"sha": "92fdacff545dab27ba186b660e337b697bc5c29e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ea0ebd97fab1323d3208e710212b4e423c2156/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ea0ebd97fab1323d3208e710212b4e423c2156/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b1ea0ebd97fab1323d3208e710212b4e423c2156", "patch": "@@ -1,3 +1,21 @@\n+2020-05-05  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (fixuns_trunc<mode>si2): Use\n+\t\"clobber (scratch:M)\" instad of \"clobber (match_scratch:M N)\".\n+\t(addqi3_cconly_overflow): Ditto.\n+\t(umulv<mode>4): Ditto.\n+\t(<s>mul<mode>3_highpart): Ditto.\n+\t(tls_global_dynamic_32): Ditto.\n+\t(tls_local_dynamic_base_32): Ditto.\n+\t(atanxf2): Ditto.\n+\t(asinxf2): Ditto.\n+\t(acosxf2): Ditto.\n+\t(logxf2): Ditto.\n+\t(log10xf2): Ditto.\n+\t(log2xf2): Ditto.\n+\t(*adddi_4): Remove \"m\" constraint from scratch operand.\n+\t(*add<mode>_4): Ditto.\n+\n 2020-05-05  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/94516\n@@ -208,7 +226,7 @@\n \n 2020-05-03  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n \n-        * config/i386/i386-expand.c (ix86_expand_int_movcc):\n+\t* config/i386/i386-expand.c (ix86_expand_int_movcc):\n \tUse plus_constant instead of gen_rtx_PLUS with GEN_INT.\n \t(emit_memmov): Ditto.\n \t(emit_memset): Ditto."}, {"sha": "898bb946a2d0ec8728bdb5211fda4c8640ff4212", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b1ea0ebd97fab1323d3208e710212b4e423c2156/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b1ea0ebd97fab1323d3208e710212b4e423c2156/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=b1ea0ebd97fab1323d3208e710212b4e423c2156", "patch": "@@ -4591,8 +4591,8 @@\n \t  (unsigned_fix:SI\n \t    (match_operand:MODEF 1 \"nonimmediate_operand\")))\n      (use (match_dup 2))\n-     (clobber (match_scratch:<ssevecmode> 3))\n-     (clobber (match_scratch:<ssevecmode> 4))])]\n+     (clobber (scratch:<ssevecmode>))\n+     (clobber (scratch:<ssevecmode>))])]\n   \"(!TARGET_64BIT || TARGET_AVX512F) && TARGET_SSE2 && TARGET_SSE_MATH\"\n {\n   machine_mode mode = <MODE>mode;\n@@ -5660,7 +5660,7 @@\n \t(compare\n \t  (match_operand:DI 1 \"nonimmediate_operand\" \"0\")\n \t  (match_operand:DI 2 \"x86_64_immediate_operand\" \"e\")))\n-   (clobber (match_scratch:DI 0 \"=rm\"))]\n+   (clobber (match_scratch:DI 0 \"=r\"))]\n   \"TARGET_64BIT\n    && ix86_match_ccmode (insn, CCGCmode)\"\n {\n@@ -5705,7 +5705,7 @@\n \t(compare\n \t  (match_operand:SWI124 1 \"nonimmediate_operand\" \"0\")\n \t  (match_operand:SWI124 2 \"const_int_operand\" \"n\")))\n-   (clobber (match_scratch:SWI124 0 \"=<r>m\"))]\n+   (clobber (match_scratch:SWI124 0 \"=<r>\"))]\n   \"ix86_match_ccmode (insn, CCGCmode)\"\n {\n   switch (get_attr_type (insn))\n@@ -6955,7 +6955,7 @@\n \t       (match_operand:QI 0 \"nonimmediate_operand\")\n \t       (match_operand:QI 1 \"general_operand\"))\n \t     (match_dup 0)))\n-      (clobber (match_scratch:QI 2))])]\n+      (clobber (scratch:QI))])]\n   \"!(MEM_P (operands[0]) && MEM_P (operands[1]))\")\n \n (define_insn \"*add<mode>3_cconly_overflow_1\"\n@@ -7591,7 +7591,7 @@\n \t\t\t      (mult:SWI248 (match_dup 1) (match_dup 2)))))\n \t      (set (match_operand:SWI248 0 \"register_operand\")\n \t\t   (mult:SWI248 (match_dup 1) (match_dup 2)))\n-\t      (clobber (match_scratch:SWI248 4))])\n+\t      (clobber (scratch:SWI248))])\n    (set (pc) (if_then_else\n \t       (eq (reg:CCO FLAGS_REG) (const_int 0))\n \t       (label_ref (match_operand 3))\n@@ -7810,7 +7810,7 @@\n \t\t\t (any_extend:<DWI>\n \t\t\t   (match_operand:DWIH 2 \"register_operand\")))\n \t\t       (match_dup 3))))\n-\t      (clobber (match_scratch:DWIH 4))\n+\t      (clobber (scratch:DWIH))\n \t      (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n   \"operands[3] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));\")\n@@ -14825,8 +14825,8 @@\n \t\t      (match_operand 3 \"constant_call_address_operand\")\n \t\t      (reg:SI SP_REG)]\n \t\t     UNSPEC_TLS_GD))\n-     (clobber (match_scratch:SI 4))\n-     (clobber (match_scratch:SI 5))\n+     (clobber (scratch:SI))\n+     (clobber (scratch:SI))\n      (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n   \"ix86_tls_descriptor_calls_expanded_in_cfun = true;\")\n@@ -14942,8 +14942,8 @@\n \t     (match_operand 2 \"constant_call_address_operand\")\n \t     (reg:SI SP_REG)]\n \t    UNSPEC_TLS_LD_BASE))\n-      (clobber (match_scratch:SI 3))\n-      (clobber (match_scratch:SI 4))\n+      (clobber (scratch:SI))\n+      (clobber (scratch:SI))\n       (clobber (reg:CC FLAGS_REG))])]\n   \"\"\n   \"ix86_tls_descriptor_calls_expanded_in_cfun = true;\")\n@@ -15979,7 +15979,7 @@\n \t\t   (unspec:XF [(match_dup 2)\n \t\t\t       (match_operand:XF 1 \"register_operand\")]\n \t\t\t      UNSPEC_FPATAN))\n-\t      (clobber (match_scratch:XF 3))])]\n+\t      (clobber (scratch:XF))])]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n   \"operands[2] = force_reg (XFmode, CONST1_RTX (XFmode));\")\n@@ -16008,9 +16008,9 @@\n    (set (match_dup 4) (minus:XF (match_dup 3) (match_dup 2)))\n    (set (match_dup 5) (sqrt:XF (match_dup 4)))\n    (parallel [(set (match_operand:XF 0 \"register_operand\")\n-        \t   (unspec:XF [(match_dup 5) (match_dup 1)]\n+\t\t   (unspec:XF [(match_dup 5) (match_dup 1)]\n \t\t\t      UNSPEC_FPATAN))\n-   \t      (clobber (match_scratch:XF 6))])]\n+\t      (clobber (scratch:XF))])]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n {\n@@ -16046,9 +16046,9 @@\n    (set (match_dup 4) (minus:XF (match_dup 3) (match_dup 2)))\n    (set (match_dup 5) (sqrt:XF (match_dup 4)))\n    (parallel [(set (match_operand:XF 0 \"register_operand\")\n-        \t   (unspec:XF [(match_dup 1) (match_dup 5)]\n+\t\t   (unspec:XF [(match_dup 1) (match_dup 5)]\n \t\t\t      UNSPEC_FPATAN))\n-   \t      (clobber (match_scratch:XF 6))])]\n+\t      (clobber (scratch:XF))])]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n {\n@@ -16260,7 +16260,7 @@\n   [(parallel [(set (match_operand:XF 0 \"register_operand\")\n \t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\")\n \t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n-\t      (clobber (match_scratch:XF 3))])]\n+\t      (clobber (scratch:XF))])]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n {\n@@ -16289,7 +16289,7 @@\n   [(parallel [(set (match_operand:XF 0 \"register_operand\")\n \t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\")\n \t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n-\t      (clobber (match_scratch:XF 3))])]\n+\t      (clobber (scratch:XF))])]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n {\n@@ -16318,7 +16318,7 @@\n   [(parallel [(set (match_operand:XF 0 \"register_operand\")\n \t\t   (unspec:XF [(match_operand:XF 1 \"register_operand\")\n \t\t\t       (match_dup 2)] UNSPEC_FYL2X))\n-\t      (clobber (match_scratch:XF 3))])]\n+\t      (clobber (scratch:XF))])]\n   \"TARGET_USE_FANCY_MATH_387\n    && flag_unsafe_math_optimizations\"\n   \"operands[2] = force_reg (XFmode, CONST1_RTX (XFmode));\")"}]}