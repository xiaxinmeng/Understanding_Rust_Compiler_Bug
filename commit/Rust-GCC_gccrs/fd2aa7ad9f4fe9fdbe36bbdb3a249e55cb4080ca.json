{"sha": "fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmQyYWE3YWQ5ZjRmZTlmZGJlMzZiYmRiM2EyNDllNTVjYjQwODBjYQ==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-09-18T20:19:50Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2006-09-18T20:19:50Z"}, "message": "re PR fortran/28526 ('end' is recognized as a variable incorrectly)\n\n2006-09-18 Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/28526\n\t* primary.c (match_variable): If the compiler is in a module\n\tspecification block, an interface block or a contains section,\n\treset host_flag to force the changed symbols mechanism.\n\n\tPR fortran/29101\n\t* trans-stmt.c (gfc_trans_character_select): Add the post block\n\tfor the expression to the main block, after the call to\n\tselect_string and the last label.\n\n\n2006-09-18 Paul Thomas <pault@gcc.gnu.org>\n\n\tPR fortran/28526\n\t* gfortran.dg/keyword_symbol_1.f90: New test.\n\n\t* gfortran.dg/spread_shape_1.f90: Add missing warning with\n\tpedantic compilation option.\n\nFrom-SVN: r117034", "tree": {"sha": "212f8468ca7132f84be43fe535001b524f1c6632", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/212f8468ca7132f84be43fe535001b524f1c6632"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca/comments", "author": null, "committer": null, "parents": [{"sha": "eb496303d7c7e6f2acb8ab90c22453947988f06b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb496303d7c7e6f2acb8ab90c22453947988f06b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb496303d7c7e6f2acb8ab90c22453947988f06b"}], "stats": {"total": 92, "additions": 91, "deletions": 1}, "files": [{"sha": "44e1800a144046180f811018a4adca60b1e45d7e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca", "patch": "@@ -1,3 +1,15 @@\n+2006-09-18 Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/28526\n+\t* primary.c (match_variable): If the compiler is in a module\n+\tspecification block, an interface block or a contains section,\n+\treset host_flag to force the changed symbols mechanism.\n+\n+\tPR fortran/29101\n+\t* trans-stmt.c (gfc_trans_character_select): Add the post block\n+\tfor the expression to the main block, after the call to\n+\tselect_string and the last label.\n+\n 2006-09-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29060"}, {"sha": "6f61ad749ea4396c2d790303426bb7f29a001d95", "filename": "gcc/fortran/primary.c", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca/gcc%2Ffortran%2Fprimary.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca/gcc%2Ffortran%2Fprimary.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.c?ref=fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca", "patch": "@@ -2283,6 +2283,17 @@ match_variable (gfc_expr ** result, int equiv_flag, int host_flag)\n   locus where;\n   match m;\n \n+  /* Since nothing has any business being an lvalue in a module\n+     specification block, an interface block or a contains section,\n+     we force the changed_symbols mechanism to work by setting\n+     host_flag to 0. This prevents valid symbols that have the name\n+     of keywords, such as 'end', being turned into variables by\n+     failed matching to assignments for, eg., END INTERFACE.  */\n+  if (gfc_current_state () == COMP_MODULE\n+      || gfc_current_state () == COMP_INTERFACE\n+      || gfc_current_state () == COMP_CONTAINS)\n+    host_flag = 0;\n+\n   m = gfc_match_sym_tree (&st, host_flag);\n   if (m != MATCH_YES)\n     return m;"}, {"sha": "841b4578203638b97eafcd53851b98815d723d65", "filename": "gcc/fortran/trans-stmt.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca/gcc%2Ffortran%2Ftrans-stmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca/gcc%2Ffortran%2Ftrans-stmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-stmt.c?ref=fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca", "patch": "@@ -1475,6 +1475,8 @@ gfc_trans_character_select (gfc_code *code)\n   if (n != 0)\n     gfc_free (labels);\n \n+  gfc_add_block_to_block (&block, &se.post);\n+\n   return gfc_finish_block (&block);\n }\n "}, {"sha": "73889e02932051c7dae2d987ef7a0e4d64427ccb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca", "patch": "@@ -1,3 +1,11 @@\n+2006-09-18 Paul Thomas <pault@gcc.gnu.org>\n+\n+\tPR fortran/28526\n+\t* gfortran.dg/keyword_symbol_1.f90: New test.\n+\n+\t* gfortran.dg/spread_shape_1.f90: Add missing warning with\n+\tpedantic compilation option.\n+\n 2006-09-18  Paul Thomas  <pault@gcc.gnu.org>\n \n \tPR fortran/29060"}, {"sha": "7195f25083745354d675a5b8c5566f24ebbfae28", "filename": "gcc/testsuite/gfortran.dg/keyword_symbol_1.f90", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca/gcc%2Ftestsuite%2Fgfortran.dg%2Fkeyword_symbol_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca/gcc%2Ftestsuite%2Fgfortran.dg%2Fkeyword_symbol_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fkeyword_symbol_1.f90?ref=fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca", "patch": "@@ -0,0 +1,57 @@\n+! ' dg-do compile }\n+! This tests the fix for PR28526, in which a public interface named\n+! 'end' would be treated as a variable because the matcher tried\n+! 'END INTERFACE' as an assignment and left the symbol modified in\n+! failing. The various pitfalls that were encountered in developing\n+! the fix are checked here.\n+!\n+! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n+!\n+module blahblah\n+  public function, end\n+\n+! The original PR from Yusuke IGUCHI <iguchi@coral.t.u-tokyo.ac.jp>\n+  interface end\n+    module procedure foo1\n+  end interface\n+\n+! A contribution to the PR from Tobias Schlueter  <tobi@gcc.gnu.org>\n+  interface function\n+     module procedure foo2 ! { dg-error \"is neither function nor\" }\n+  end interface\n+\n+  interface function\n+     module procedure foo3\n+  end interface\n+\n+  interface\n+    function foo4 ()\n+      real foo4\n+      x = 1.0          ! { dg-error \"in INTERFACE\" }\n+    end function foo4\n+  end interface\n+\n+  interface\n+    x = 2.0            ! { dg-error \"in INTERFACE block\" }\n+    function foo5 ()\n+      real foo5\n+    end function foo5\n+  end interface\n+\n+  x = 3.0              ! { dg-error \"in MODULE\" }\n+\n+contains\n+\n+  subroutine foo1\n+  end subroutine foo1\n+\n+  function foo2        ! { dg-error \"Expected formal argument list\" }\n+    foo2 = 0           ! { dg-error \"already been host associated\" }\n+  end function foo2    ! { dg-error \"Expecting END MODULE\" }\n+\n+  function foo3 ()\n+    real foo3\n+  end function foo3\n+\n+  x = 4.0              ! { dg-error \"in CONTAINS section\" }\n+end module blahblah"}, {"sha": "bbef232cc135209821d0e4c120b9de4b67644ef3", "filename": "gcc/testsuite/gfortran.dg/spread_shape_1.f90", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_shape_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_shape_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fspread_shape_1.f90?ref=fd2aa7ad9f4fe9fdbe36bbdb3a249e55cb4080ca", "patch": "@@ -4,7 +4,7 @@\n !\n ! Contributed by Paul Thomas  <pault@gcc.gnu.org>\n   real,dimension(:, :),pointer :: ptr\n-  real,dimension(2, 2),parameter :: u = &\n+  real,dimension(2, 2),parameter :: u = & ! { dg-warning \"nonstandard\" }\n \treshape((/0.25, 0.5, 0.75, 1.00/),(/2,2/))\n   allocate (ptr(2,2))\n "}]}