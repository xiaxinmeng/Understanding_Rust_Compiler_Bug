{"sha": "2347da644d23390399cc060fe3f2358314efc1b6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjM0N2RhNjQ0ZDIzMzkwMzk5Y2MwNjBmZTNmMjM1ODMxNGVmYzFiNg==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-07-31T09:00:09Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-07-31T09:00:09Z"}, "message": "locale_facets.tcc (num_get<>::_M_extract_float, [...]): In the main parsing loop delay the life of __q to the actual use point.\n\n2004-07-30  Paolo Carlini  <pcarlini@suse.de>\n\n\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float,\n\tnum_get<>::_M_extract_int): In the main parsing loop delay the\n\tlife of __q to the actual use point.\n\nFrom-SVN: r85380", "tree": {"sha": "c8321aab61f962489c31967acd6d221fec368d73", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c8321aab61f962489c31967acd6d221fec368d73"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2347da644d23390399cc060fe3f2358314efc1b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2347da644d23390399cc060fe3f2358314efc1b6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2347da644d23390399cc060fe3f2358314efc1b6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2347da644d23390399cc060fe3f2358314efc1b6/comments", "author": null, "committer": null, "parents": [{"sha": "bdc6aa1b275833c791562e7baa42a41d3b7c3e64", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bdc6aa1b275833c791562e7baa42a41d3b7c3e64", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bdc6aa1b275833c791562e7baa42a41d3b7c3e64"}], "stats": {"total": 143, "additions": 79, "deletions": 64}, "files": [{"sha": "f56c60f509311bf8508a253b7ce61a6a988b93f7", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2347da644d23390399cc060fe3f2358314efc1b6/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2347da644d23390399cc060fe3f2358314efc1b6/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=2347da644d23390399cc060fe3f2358314efc1b6", "patch": "@@ -1,3 +1,9 @@\n+2004-07-30  Paolo Carlini  <pcarlini@suse.de>\n+\n+\t* include/bits/locale_facets.tcc (num_get<>::_M_extract_float,\n+\tnum_get<>::_M_extract_int): In the main parsing loop delay the\n+\tlife of __q to the actual use point.\n+\n 2004-07-29  Paolo Carlini  <pcarlini@suse.de>\n \n \tPR libstdc++/14220"}, {"sha": "ee5ea7d1def6ec49d894b2b83e3fafccce509d45", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 73, "deletions": 64, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2347da644d23390399cc060fe3f2358314efc1b6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2347da644d23390399cc060fe3f2358314efc1b6/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=2347da644d23390399cc060fe3f2358314efc1b6", "patch": "@@ -330,7 +330,6 @@ namespace std\n \t  // According to 22.2.2.1.2, p8-9, first look for thousands_sep\n \t  // and decimal_point.\n \t  const char_type __c = *__beg;\n-\t  const char_type* __q = __traits_type::find(__lit_zero, 10, __c);\n           if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n \t    {\n \t      if (!__found_dec && !__found_sci)\n@@ -368,40 +367,44 @@ namespace std\n \t      else\n \t\tbreak;\n \t    }\n-          else if (__q != 0)\n+          else\n \t    {\n-\t      __xtrc += __num_base::_S_atoms_in[__q - __lit];\n-\t      __found_mantissa = true;\n-\t      ++__sep_pos;\n-\t      ++__beg;\n-\t    }\n-\t  else if ((__c == __lit[__num_base::_S_ie] \n-\t\t    || __c == __lit[__num_base::_S_iE])\n-\t\t   && __found_mantissa && !__found_sci)\n-\t    {\n-\t      // Scientific notation.\n-\t      if (__found_grouping.size() && !__found_dec)\n-\t\t__found_grouping += static_cast<char>(__sep_pos);\n-\t      __xtrc += 'e';\n-\t      __found_sci = true;\n-\n-\t      // Remove optional plus or minus sign, if they exist.\n-\t      if (++__beg != __end)\n+\t      const char_type* __q = __traits_type::find(__lit_zero, 10, __c);\n+\t      if (__q)\n \t\t{\n-\t\t  const bool __plus = *__beg == __lit[__num_base::_S_iplus];\n-\t\t  if ((__plus || *__beg == __lit[__num_base::_S_iminus])\n-\t\t      && !(__lc->_M_use_grouping\n-\t\t\t   && *__beg == __lc->_M_thousands_sep)\n-\t\t      && !(*__beg == __lc->_M_decimal_point))\n+\t\t  __xtrc += __num_base::_S_atoms_in[__q - __lit];\n+\t\t  __found_mantissa = true;\n+\t\t  ++__sep_pos;\n+\t\t  ++__beg;\n+\t\t}\n+\t      else if ((__c == __lit[__num_base::_S_ie] \n+\t\t\t|| __c == __lit[__num_base::_S_iE])\n+\t\t       && __found_mantissa && !__found_sci)\n+\t\t{\n+\t\t  // Scientific notation.\n+\t\t  if (__found_grouping.size() && !__found_dec)\n+\t\t    __found_grouping += static_cast<char>(__sep_pos);\n+\t\t  __xtrc += 'e';\n+\t\t  __found_sci = true;\n+\n+\t\t  // Remove optional plus or minus sign, if they exist.\n+\t\t  if (++__beg != __end)\n \t\t    {\n-\t\t      __xtrc += __plus ? '+' : '-';\n-\t\t      ++__beg;\n+\t\t      const bool __plus = *__beg == __lit[__num_base::_S_iplus];\n+\t\t      if ((__plus || *__beg == __lit[__num_base::_S_iminus])\n+\t\t\t  && !(__lc->_M_use_grouping\n+\t\t\t       && *__beg == __lc->_M_thousands_sep)\n+\t\t\t  && !(*__beg == __lc->_M_decimal_point))\n+\t\t\t{\n+\t\t\t  __xtrc += __plus ? '+' : '-';\n+\t\t\t  ++__beg;\n+\t\t\t}\n \t\t    }\n \t\t}\n+\t      else\n+\t\t// Not a valid input item.\n+\t\tbreak;\n \t    }\n-\t  else\n-\t    // Not a valid input item.\n-\t    break;\n         }\n \n       // Digit grouping is checked. If grouping and found_grouping don't\n@@ -516,8 +519,6 @@ namespace std\n \t\t// According to 22.2.2.1.2, p8-9, first look for thousands_sep\n \t\t// and decimal_point.\n \t\tconst char_type __c = *__beg;\n-\t\tconst char_type* __q = __traits_type::find(__lit_zero, \n-\t\t\t\t\t\t\t   __len, __c);\n \t\tif (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n \t\t  {\n \t\t    // NB: Thousands separator at the beginning of a string\n@@ -535,26 +536,31 @@ namespace std\n \t\t  }\n \t\telse if (__c == __lc->_M_decimal_point)\n \t\t  break;\n-\t\telse if (__q != 0)\n+\t\telse\n \t\t  {\n-\t\t    int __digit = __q - __lit_zero;\n-\t\t    if (__digit > 15)\n-\t\t      __digit -= 6;\n-\t\t    if (__result < __min)\n-\t\t      __overflow = true;\n-\t\t    else\n+\t\t    const char_type* __q = __traits_type::find(__lit_zero, \n+\t\t\t\t\t\t\t       __len, __c);\n+\t\t    if (__q)\n \t\t      {\n-\t\t\tconst _ValueT __new_result = __result * __base\n-\t\t\t                             - __digit;\n-\t\t\t__overflow |= __new_result > __result;\n-\t\t\t__result = __new_result;\n-\t\t\t++__sep_pos;\n-\t\t\t__found_num = true;\n+\t\t\tint __digit = __q - __lit_zero;\n+\t\t\tif (__digit > 15)\n+\t\t\t  __digit -= 6;\n+\t\t\tif (__result < __min)\n+\t\t\t  __overflow = true;\n+\t\t\telse\n+\t\t\t  {\n+\t\t\t    const _ValueT __new_result = (__result * __base\n+\t\t\t\t\t\t\t  - __digit);\n+\t\t\t    __overflow |= __new_result > __result;\n+\t\t\t    __result = __new_result;\n+\t\t\t    ++__sep_pos;\n+\t\t\t    __found_num = true;\n+\t\t\t  }\n \t\t      }\n+\t\t    else\n+\t\t      // Not a valid input item.\n+\t\t      break;\n \t\t  }\n-\t\telse\n-\t\t  // Not a valid input item.\n-\t\t  break;\n \t      }\n \t  }\n \telse\n@@ -563,8 +569,6 @@ namespace std\n \t    for (; __beg != __end; ++__beg)\n \t      {\n \t\tconst char_type __c = *__beg;\n-\t\tconst char_type* __q = __traits_type::find(__lit_zero, \n-\t\t\t\t\t\t\t   __len, __c);\n \t\tif (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)\n \t\t  {\n \t\t    if (__sep_pos)\n@@ -580,25 +584,30 @@ namespace std\n \t\t  }\n \t\telse if (__c == __lc->_M_decimal_point)\n \t\t  break;\n-\t\telse if (__q != 0)\n+\t\telse\n \t\t  {\n-\t\t    int __digit = __q - __lit_zero;\n-\t\t    if (__digit > 15)\n-\t\t      __digit -= 6;\n-\t\t    if (__result > __max)\n-\t\t      __overflow = true;\n-\t\t    else\n+\t\t    const char_type* __q = __traits_type::find(__lit_zero,\n+\t\t\t\t\t\t\t       __len, __c);    \n+\t\t    if (__q)\n \t\t      {\n-\t\t\tconst _ValueT __new_result = __result * __base\n-\t\t\t                             + __digit;\n-\t\t\t__overflow |= __new_result < __result;\n-\t\t\t__result = __new_result;\n-\t\t\t++__sep_pos;\n-\t\t\t__found_num = true;\n+\t\t\tint __digit = __q - __lit_zero;\n+\t\t\tif (__digit > 15)\n+\t\t\t  __digit -= 6;\n+\t\t\tif (__result > __max)\n+\t\t\t  __overflow = true;\n+\t\t\telse\n+\t\t\t  {\n+\t\t\t    const _ValueT __new_result = (__result * __base\n+\t\t\t\t\t\t\t  + __digit);\n+\t\t\t    __overflow |= __new_result < __result;\n+\t\t\t    __result = __new_result;\n+\t\t\t    ++__sep_pos;\n+\t\t\t    __found_num = true;\n+\t\t\t  }\n \t\t      }\n+\t\t    else\n+\t\t      break;\n \t\t  }\n-\t\telse\n-\t\t  break;\n \t      }\n \t  }\n "}]}