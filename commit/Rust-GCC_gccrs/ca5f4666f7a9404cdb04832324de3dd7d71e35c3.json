{"sha": "ca5f4666f7a9404cdb04832324de3dd7d71e35c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E1ZjQ2NjZmN2E5NDA0Y2RiMDQ4MzIzMjRkZTNkZDdkNzFlMzVjMw==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-10-21T23:55:28Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-10-22T00:02:22Z"}, "message": "Check for undefined before not returning a constant value\n\nDon't return UNDEFINED for a range in an unreachable block if the global\nvalue evaluates to a constant.  Return that constant instead.\n\n\tPR tree-optimization/97515\n\t* value-query.cc (range_query::value_of_expr): If the result is\n\tUNDEFINED, check to see if the global value is a constant.\n\t(range_query::value_on_edge): Ditto.", "tree": {"sha": "1009d2a11e595ce97796371bcab61744f85f7581", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1009d2a11e595ce97796371bcab61744f85f7581"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca5f4666f7a9404cdb04832324de3dd7d71e35c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5f4666f7a9404cdb04832324de3dd7d71e35c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca5f4666f7a9404cdb04832324de3dd7d71e35c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca5f4666f7a9404cdb04832324de3dd7d71e35c3/comments", "author": null, "committer": null, "parents": [{"sha": "2ab1fc7a322e2582772f0e4ed916508c890175e3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2ab1fc7a322e2582772f0e4ed916508c890175e3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2ab1fc7a322e2582772f0e4ed916508c890175e3"}], "stats": {"total": 44, "additions": 40, "deletions": 4}, "files": [{"sha": "2b6185ec90bba5db4b1e2ad3920ef1c9d1ccd0d2", "filename": "gcc/testsuite/gcc.dg/pr97515.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4666f7a9404cdb04832324de3dd7d71e35c3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97515.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4666f7a9404cdb04832324de3dd7d71e35c3/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97515.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr97515.c?ref=ca5f4666f7a9404cdb04832324de3dd7d71e35c3", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int\n+e7 (int gg)\n+{\n+  int xe = 0;\n+\n+  while (xe < 1)\n+    {\n+      int ui;\n+\n+      ui = ~xe;\n+      if (ui == 0)\n+        ui = xe >> gg;\n+\n+      xe %= !ui;\n+    }\n+\n+  return xe;\n+}"}, {"sha": "23ba48d73a7710415eb3496f19c0c24a4aefeca2", "filename": "gcc/value-query.cc", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca5f4666f7a9404cdb04832324de3dd7d71e35c3/gcc%2Fvalue-query.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca5f4666f7a9404cdb04832324de3dd7d71e35c3/gcc%2Fvalue-query.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-query.cc?ref=ca5f4666f7a9404cdb04832324de3dd7d71e35c3", "patch": "@@ -82,8 +82,16 @@ range_query::value_of_expr (tree name, gimple *stmt)\n \n   if (!irange::supports_type_p (TREE_TYPE (name)))\n     return NULL_TREE;\n-  if (range_of_expr (r, name, stmt) && r.singleton_p (&t))\n-    return t;\n+\n+  if (range_of_expr (r, name, stmt))\n+    {\n+      // A constant used in an unreachable block oftens returns as UNDEFINED.\n+      // If the result is undefined, check the global value for a constant.\n+      if (r.undefined_p ())\n+\trange_of_expr (r, name);\n+      if (r.singleton_p (&t))\n+\treturn t;\n+    }\n   return NULL_TREE;\n }\n \n@@ -95,8 +103,15 @@ range_query::value_on_edge (edge e, tree name)\n \n   if (!irange::supports_type_p (TREE_TYPE (name)))\n     return NULL_TREE;\n-  if (range_on_edge (r, e, name) && r.singleton_p (&t))\n-    return t;\n+  if (range_on_edge (r, e, name))\n+    {\n+      // A constant used in an unreachable block oftens returns as UNDEFINED.\n+      // If the result is undefined, check the global value for a constant.\n+      if (r.undefined_p ())\n+\trange_of_expr (r, name);\n+      if (r.singleton_p (&t))\n+\treturn t;\n+    }\n   return NULL_TREE;\n \n }"}]}