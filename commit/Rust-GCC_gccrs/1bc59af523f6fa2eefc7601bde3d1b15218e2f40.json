{"sha": "1bc59af523f6fa2eefc7601bde3d1b15218e2f40", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWJjNTlhZjUyM2Y2ZmEyZWVmYzc2MDFiZGUzZDFiMTUyMThlMmY0MA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-02-26T04:55:48Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-02-26T04:55:48Z"}, "message": "ios.cc (ios_base::~ios_base): Tweak.\n\n\n2002-02-25  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* src/ios.cc (ios_base::~ios_base): Tweak.\n\t(ios_base::_M_call_callbacks): Deal with null __p.\n\t(ios_base::ios_base): Set _M_callbacks.\n\t* include/bits/basic_ios.tcc (basic_ios::init): Adjust comment.\n\t* testsuite/27_io/ios_init.cc (test02): Fix.\n\n\t* mkcheck.in (static_fail): Failed links go to output file.\n\nFrom-SVN: r50032", "tree": {"sha": "f3ca2de6558dba8249c9e8902aa6aeec203d7856", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3ca2de6558dba8249c9e8902aa6aeec203d7856"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1bc59af523f6fa2eefc7601bde3d1b15218e2f40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc59af523f6fa2eefc7601bde3d1b15218e2f40", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1bc59af523f6fa2eefc7601bde3d1b15218e2f40", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1bc59af523f6fa2eefc7601bde3d1b15218e2f40/comments", "author": null, "committer": null, "parents": [{"sha": "801791cc03c18e06b1dcdbe0a0d475c50508102c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/801791cc03c18e06b1dcdbe0a0d475c50508102c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/801791cc03c18e06b1dcdbe0a0d475c50508102c"}], "stats": {"total": 59, "additions": 38, "deletions": 21}, "files": [{"sha": "12baa573132770783e46a7d336907d1a747a4cac", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc59af523f6fa2eefc7601bde3d1b15218e2f40/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc59af523f6fa2eefc7601bde3d1b15218e2f40/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=1bc59af523f6fa2eefc7601bde3d1b15218e2f40", "patch": "@@ -1,3 +1,13 @@\n+2002-02-25  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* src/ios.cc (ios_base::~ios_base): Tweak.\n+\t(ios_base::_M_call_callbacks): Deal with null __p.\n+\t(ios_base::ios_base): Set _M_callbacks.\n+\t* include/bits/basic_ios.tcc (basic_ios::init): Adjust comment.\n+\t* testsuite/27_io/ios_init.cc (test02): Fix.\n+\t\n+\t* mkcheck.in (static_fail): Failed links go to output file.\n+\n 2002-02-25  Phil Edwards  <pme@gcc.gnu.org>\n \n \t* docs/html/faq/index.html:  Update."}, {"sha": "b4f523f54835ec6472d23f39d41811f2afbc54c7", "filename": "libstdc++-v3/include/bits/basic_ios.tcc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc59af523f6fa2eefc7601bde3d1b15218e2f40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc59af523f6fa2eefc7601bde3d1b15218e2f40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_ios.tcc?ref=1bc59af523f6fa2eefc7601bde3d1b15218e2f40", "patch": "@@ -148,12 +148,12 @@ namespace std\n       // requirements after basic_ios::init() has been called. As part\n       // of this, fill() must return widen(' '), which needs an imbued\n       // ctype facet of char_type to return without throwing an\n-      // exception. This is not a required facet, so streams with\n-      // char_type != [char, wchar_t] will not have it by\n-      // default. However, because fill()'s signature is const, this\n-      // data member cannot be lazily initialized.  Thus, thoughts of\n-      // using a non-const helper function in ostream inserters is\n-      // really besides the point.\n+      // exception. Unfortunately, ctype<char_type> is not necessarily a\n+      // required facet, so streams with char_type != [char, wchar_t]\n+      // will not have it by default. However, because fill()'s\n+      // signature is const, this data member cannot be lazily\n+      // initialized.  Thus, thoughts of using a non-const helper\n+      // function in ostream inserters is really besides the point.\n       _M_fill = this->widen(' ');\n \n       _M_exception = goodbit;"}, {"sha": "2cc959b1c273d6a72b35486eb5f4ba08af261253", "filename": "libstdc++-v3/include/bits/ios_base.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc59af523f6fa2eefc7601bde3d1b15218e2f40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc59af523f6fa2eefc7601bde3d1b15218e2f40/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fios_base.h?ref=1bc59af523f6fa2eefc7601bde3d1b15218e2f40", "patch": "@@ -277,7 +277,7 @@ namespace std\n     };\n \n     static const int \t_S_local_words = 8;\n-    _Words  \t\t_M_word_array[_S_local_words];  // Guaranteed storage\n+    _Words  \t\t_M_word_array[_S_local_words];  // Guaranteed storage.\n     _Words  \t\t_M_dummy;    // Only for failed iword/pword calls.\n     _Words* \t\t_M_words;\n     int     \t\t_M_word_limit;"}, {"sha": "b104244dba61e7047c62d3acaad8ed9969afbf23", "filename": "libstdc++-v3/mkcheck.in", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc59af523f6fa2eefc7601bde3d1b15218e2f40/libstdc%2B%2B-v3%2Fmkcheck.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc59af523f6fa2eefc7601bde3d1b15218e2f40/libstdc%2B%2B-v3%2Fmkcheck.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fmkcheck.in?ref=1bc59af523f6fa2eefc7601bde3d1b15218e2f40", "patch": "@@ -362,8 +362,8 @@ test_file()\n     else\n         # the file did not compile/link.\n         printf \"\\n\" >> $LOG_FILE\n-#        `cat compile.out >> $LOG_FILE` \n-#        rm compile.out\n+        `cat compile.out >> $LOG_FILE` \n+        rm compile.out\n         RESULT=\"-b\"\n         TEXT=\"0\"\n         DATA=\"0\""}, {"sha": "9824b10223a686d312cb5715cec886061551f197", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc59af523f6fa2eefc7601bde3d1b15218e2f40/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc59af523f6fa2eefc7601bde3d1b15218e2f40/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=1bc59af523f6fa2eefc7601bde3d1b15218e2f40", "patch": "@@ -257,7 +257,7 @@ namespace std\n \t  }\n \tfor (; i < _M_word_limit; i++) \n \t  words[i] = _M_words[i];\n-\tif (_M_words != _M_word_array) \n+\tif (_M_words && _M_words != _M_word_array) \n \t  delete [] _M_words;\n       }\n     \n@@ -294,17 +294,20 @@ namespace std\n \n   ios_base::ios_base()\n   {\n-    // Do nothing; init() does it.  Static init to 0 makes everything sane.\n+    // Do nothing: basic_ios::init() does it.  \n+    // NB: _M_callbacks and _M_words must be zero for non-initialized\n+    // ios_base to go through ~ios_base gracefully.\n+    _M_callbacks = 0;\n+    _M_words = 0;\n   }\n   \n   // 27.4.2.7  ios_base constructors/destructors\n   ios_base::~ios_base()\n   {\n     _M_call_callbacks(erase_event);\n     _M_dispose_callbacks();\n-    if (_M_words != _M_word_array) \n+    if (_M_words && _M_words != _M_word_array) \n       delete [] _M_words;\n-    // XXX done?\n   }\n \n   void \n@@ -314,13 +317,14 @@ namespace std\n   void \n   ios_base::_M_call_callbacks(event __e) throw()\n   {\n-    for (_Callback_list* __p = _M_callbacks; __p; __p = __p->_M_next)\n+    _Callback_list* __p = _M_callbacks;\n+    while (__p)\n       {\n-\ttry { \n-\t  (*__p->_M_fn) (__e, *this, __p->_M_index); \n-\t} \n-\tcatch (...) { \n-\t}\n+\ttry \n+\t  { (*__p->_M_fn) (__e, *this, __p->_M_index); } \n+\tcatch (...) \n+\t  { }\n+\t__p = __p->_M_next;\n       }\n   }\n "}, {"sha": "9f87ee0d32e5540ee7bcde54655bff1a45725958", "filename": "libstdc++-v3/testsuite/27_io/ios_init.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1bc59af523f6fa2eefc7601bde3d1b15218e2f40/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1bc59af523f6fa2eefc7601bde3d1b15218e2f40/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Fios_init.cc?ref=1bc59af523f6fa2eefc7601bde3d1b15218e2f40", "patch": "@@ -86,14 +86,17 @@ void test01()\n // by default, into the locale object. As such, basic_ios::init is\n // required to return a bad_cast for the first use of fill() call.\n // See 27.4.4.1\n+\n+class gnu_ios: public std::basic_ios<char> { };\n+\n void test02() \n {\n   bool test = true;\n \n   // 01: Doesn't call basic_ios::init, which uses ctype<char_type>..\n   try\n     {\n-      std::basic_ostringstream<unsigned short> \toss;\n+      gnu_ios gios;\n     }\n   catch(...)\n     { \n@@ -122,7 +125,7 @@ void test02()\n     }\n   catch(const std::bad_cast& obj)\n     {\n-      test = true;\n+      // This is correct.\n     }\n   catch(...)\n     {"}]}