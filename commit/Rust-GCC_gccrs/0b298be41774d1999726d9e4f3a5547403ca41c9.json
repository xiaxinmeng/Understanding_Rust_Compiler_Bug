{"sha": "0b298be41774d1999726d9e4f3a5547403ca41c9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGIyOThiZTQxNzc0ZDE5OTk3MjZkOWU0ZjNhNTU0NzQwM2NhNDFjOQ==", "commit": {"author": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-02-05T23:33:36Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "1993-02-05T23:33:36Z"}, "message": "(true_dependence, anti_dependence, output_dependence):\n\nAssume that MEM_IN_STRUCT_P QImode varying addresses can overlap a\nnon-MEM_IN_STRUCT_P fixed address.\n\nFrom-SVN: r3426", "tree": {"sha": "a87bef4d23830355e56938af12b8159a00ad7bd7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a87bef4d23830355e56938af12b8159a00ad7bd7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0b298be41774d1999726d9e4f3a5547403ca41c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b298be41774d1999726d9e4f3a5547403ca41c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0b298be41774d1999726d9e4f3a5547403ca41c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0b298be41774d1999726d9e4f3a5547403ca41c9/comments", "author": null, "committer": null, "parents": [{"sha": "0a56ad627e91edd29d348813c4fd15c57e1c930a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a56ad627e91edd29d348813c4fd15c57e1c930a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a56ad627e91edd29d348813c4fd15c57e1c930a"}], "stats": {"total": 13, "additions": 11, "deletions": 2}, "files": [{"sha": "386d66e960d172f82a68f5f4534b1deee5b80d9d", "filename": "gcc/sched.c", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0b298be41774d1999726d9e4f3a5547403ca41c9/gcc%2Fsched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0b298be41774d1999726d9e4f3a5547403ca41c9/gcc%2Fsched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsched.c?ref=0b298be41774d1999726d9e4f3a5547403ca41c9", "patch": "@@ -696,8 +696,11 @@ memrefs_conflict_p (xsize, x, ysize, y, c)\n    changed.  A volatile and non-volatile reference can be interchanged\n    though. \n \n-   A MEM_IN_STRUCT reference at a varying address can never conflict with a\n-   non-MEM_IN_STRUCT reference at a fixed address.  */\n+   A MEM_IN_STRUCT reference at a non-QImode varying address can never\n+   conflict with a non-MEM_IN_STRUCT reference at a fixed address.   We must\n+   allow QImode aliasing because the ANSI C standard allows character\n+   pointers to alias anything.  We are assuming that characters are\n+   always QImode here.  */\n \n /* Read dependence: X is read after read in MEM takes place.  There can\n    only be a dependence here if both reads are volatile.  */\n@@ -731,8 +734,10 @@ true_dependence (mem, x)\n \t  || (memrefs_conflict_p (SIZE_FOR_MODE (mem), XEXP (mem, 0),\n \t\t\t\t  SIZE_FOR_MODE (x), XEXP (x, 0), 0)\n \t      && ! (MEM_IN_STRUCT_P (mem) && rtx_addr_varies_p (mem)\n+\t\t    && GET_MODE (mem) != QImode\n \t\t    && ! MEM_IN_STRUCT_P (x) && ! rtx_addr_varies_p (x))\n \t      && ! (MEM_IN_STRUCT_P (x) && rtx_addr_varies_p (x)\n+\t\t    && GET_MODE (x) != QImode\n \t\t    && ! MEM_IN_STRUCT_P (mem) && ! rtx_addr_varies_p (mem))));\n }\n \n@@ -753,8 +758,10 @@ anti_dependence (mem, x)\n \t  || (memrefs_conflict_p (SIZE_FOR_MODE (mem), XEXP (mem, 0),\n \t\t\t\t  SIZE_FOR_MODE (x), XEXP (x, 0), 0)\n \t      && ! (MEM_IN_STRUCT_P (mem) && rtx_addr_varies_p (mem)\n+\t\t    && GET_MODE (mem) != QImode\n \t\t    && ! MEM_IN_STRUCT_P (x) && ! rtx_addr_varies_p (x))\n \t      && ! (MEM_IN_STRUCT_P (x) && rtx_addr_varies_p (x)\n+\t\t    && GET_MODE (x) != QImode\n \t\t    && ! MEM_IN_STRUCT_P (mem) && ! rtx_addr_varies_p (mem))));\n }\n \n@@ -769,8 +776,10 @@ output_dependence (mem, x)\n \t  || (memrefs_conflict_p (SIZE_FOR_MODE (mem), XEXP (mem, 0),\n \t\t\t\t  SIZE_FOR_MODE (x), XEXP (x, 0), 0)\n \t      && ! (MEM_IN_STRUCT_P (mem) && rtx_addr_varies_p (mem)\n+\t\t    && GET_MODE (mem) != QImode\n \t\t    && ! MEM_IN_STRUCT_P (x) && ! rtx_addr_varies_p (x))\n \t      && ! (MEM_IN_STRUCT_P (x) && rtx_addr_varies_p (x)\n+\t\t    && GET_MODE (x) != QImode\n \t\t    && ! MEM_IN_STRUCT_P (mem) && ! rtx_addr_varies_p (mem))));\n }\n \f"}]}