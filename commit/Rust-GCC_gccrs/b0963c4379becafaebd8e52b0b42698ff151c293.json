{"sha": "b0963c4379becafaebd8e52b0b42698ff151c293", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjA5NjNjNDM3OWJlY2FmYWViZDhlNTJiMGI0MjY5OGZmMTUxYzI5Mw==", "commit": {"author": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-08-19T22:33:29Z"}, "committer": {"name": "Peter Bergner", "email": "bergner@linux.ibm.com", "date": "2021-08-19T22:34:13Z"}, "message": "rs6000: Fix ICE expanding lxvp and stxvp gimple built-ins [PR101849]\n\nPR101849 shows we ICE on a test case when we pass a non __vector_pair *\npointer to the __builtin_vsx_lxvp and __builtin_vsx_stxvp built-ins\nthat is cast to __vector_pair *.  The problem is that when we expand\nthe built-in, the cast has already been removed from gimple and we are\nonly given the base pointer.  The solution used here (which fixes the ICE)\nis to catch this case and convert the pointer to a __vector_pair * pointer\nwhen expanding the built-in.\n\n2021-08-19  Peter Bergner  <bergner@linux.ibm.com>\n\ngcc/\n\tPR target/101849\n\t* config/rs6000/rs6000-call.c (rs6000_gimple_fold_mma_builtin): Cast\n\tpointer to __vector_pair *.\n\ngcc/testsuite/\n\tPR target/101849\n\t* gcc.target/powerpc/pr101849.c: New test.", "tree": {"sha": "48faf0d3fd550f29edf6ef34932f6084308591bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/48faf0d3fd550f29edf6ef34932f6084308591bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0963c4379becafaebd8e52b0b42698ff151c293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0963c4379becafaebd8e52b0b42698ff151c293", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0963c4379becafaebd8e52b0b42698ff151c293", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0963c4379becafaebd8e52b0b42698ff151c293/comments", "author": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "peter-bergner", "id": 17504345, "node_id": "MDQ6VXNlcjE3NTA0MzQ1", "avatar_url": "https://avatars.githubusercontent.com/u/17504345?v=4", "gravatar_id": "", "url": "https://api.github.com/users/peter-bergner", "html_url": "https://github.com/peter-bergner", "followers_url": "https://api.github.com/users/peter-bergner/followers", "following_url": "https://api.github.com/users/peter-bergner/following{/other_user}", "gists_url": "https://api.github.com/users/peter-bergner/gists{/gist_id}", "starred_url": "https://api.github.com/users/peter-bergner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/peter-bergner/subscriptions", "organizations_url": "https://api.github.com/users/peter-bergner/orgs", "repos_url": "https://api.github.com/users/peter-bergner/repos", "events_url": "https://api.github.com/users/peter-bergner/events{/privacy}", "received_events_url": "https://api.github.com/users/peter-bergner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d881460deb1f0bdfc3e8fa2d391a03a9763cbff4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d881460deb1f0bdfc3e8fa2d391a03a9763cbff4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d881460deb1f0bdfc3e8fa2d391a03a9763cbff4"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "3c3108a1c87fcbbbdde1f7779443beb70beeee3e", "filename": "gcc/config/rs6000/rs6000-call.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0963c4379becafaebd8e52b0b42698ff151c293/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0963c4379becafaebd8e52b0b42698ff151c293/gcc%2Fconfig%2Frs6000%2Frs6000-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-call.c?ref=b0963c4379becafaebd8e52b0b42698ff151c293", "patch": "@@ -11919,6 +11919,9 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n       tree offset = gimple_call_arg (stmt, 0);\n       tree ptr = gimple_call_arg (stmt, 1);\n       tree lhs = gimple_call_lhs (stmt);\n+      if (TREE_TYPE (TREE_TYPE (ptr)) != vector_pair_type_node)\n+\tptr = build1 (VIEW_CONVERT_EXPR,\n+\t\t      build_pointer_type (vector_pair_type_node), ptr);\n       tree mem = build_simple_mem_ref (build2 (POINTER_PLUS_EXPR,\n \t\t\t\t\t       TREE_TYPE (ptr), ptr, offset));\n       gimplify_assign (lhs, mem, &new_seq);\n@@ -11932,6 +11935,9 @@ rs6000_gimple_fold_mma_builtin (gimple_stmt_iterator *gsi)\n       tree src = gimple_call_arg (stmt, 0);\n       tree offset = gimple_call_arg (stmt, 1);\n       tree ptr = gimple_call_arg (stmt, 2);\n+      if (TREE_TYPE (TREE_TYPE (ptr)) != vector_pair_type_node)\n+\tptr = build1 (VIEW_CONVERT_EXPR,\n+\t\t      build_pointer_type (vector_pair_type_node), ptr);\n       tree mem = build_simple_mem_ref (build2 (POINTER_PLUS_EXPR,\n \t\t\t\t\t       TREE_TYPE (ptr), ptr, offset));\n       gimplify_assign (mem, src, &new_seq);"}, {"sha": "823fbfe9647d4a517cc10743d1edfa9cabb310aa", "filename": "gcc/testsuite/gcc.target/powerpc/pr101849.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0963c4379becafaebd8e52b0b42698ff151c293/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr101849.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0963c4379becafaebd8e52b0b42698ff151c293/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr101849.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr101849.c?ref=b0963c4379becafaebd8e52b0b42698ff151c293", "patch": "@@ -0,0 +1,22 @@\n+/* PR target/101849 */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target power10_ok } */\n+/* { dg-options \"-O2 -mdejagnu-cpu=power10\" } */\n+\n+/* Verify we do not ICE on the tests below.  */\n+\n+void\n+foo (__vector_pair *dst, double *x, long offset)\n+{\n+  dst[0] = __builtin_vsx_lxvp (0, (__vector_pair *)(void *)x);\n+  dst[1] = __builtin_vsx_lxvp (32, (__vector_pair *)(void *)x);\n+  dst[2] = __builtin_vsx_lxvp (offset, (__vector_pair *)(void *)x);\n+}\n+\n+void\n+bar (__vector_pair *src, double *x, long offset)\n+{\n+  __builtin_vsx_stxvp (src[0], 0, (__vector_pair *)(void *)x);\n+  __builtin_vsx_stxvp (src[1], 32, (__vector_pair *)(void *)x);\n+  __builtin_vsx_stxvp (src[2], offset, (__vector_pair *)(void *)x);\n+}"}]}