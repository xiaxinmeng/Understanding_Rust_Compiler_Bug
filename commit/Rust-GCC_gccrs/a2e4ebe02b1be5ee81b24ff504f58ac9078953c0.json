{"sha": "a2e4ebe02b1be5ee81b24ff504f58ac9078953c0", "node_id": "C_kwDOANBUbNoAKGEyZTRlYmUwMmIxYmU1ZWU4MWIyNGZmNTA0ZjU4YWM5MDc4OTUzYzA", "commit": {"author": {"name": "Justin Squirek", "email": "squirek@adacore.com", "date": "2021-10-29T19:42:28Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-11-09T09:44:50Z"}, "message": "[Ada] Invalid GPR_PROJECT_PATH_FILE confuses gnatls\n\ngcc/ada/\n\n\t* gnatls.adb (Initialize_Default_Project_Path): Remove early\n\tabort on invalid path.", "tree": {"sha": "c093f36aab372d7cea71a06105336c5aa2712717", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c093f36aab372d7cea71a06105336c5aa2712717"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2e4ebe02b1be5ee81b24ff504f58ac9078953c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e4ebe02b1be5ee81b24ff504f58ac9078953c0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2e4ebe02b1be5ee81b24ff504f58ac9078953c0", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2e4ebe02b1be5ee81b24ff504f58ac9078953c0/comments", "author": {"login": "AdaDoom3", "id": 3445599, "node_id": "MDQ6VXNlcjM0NDU1OTk=", "avatar_url": "https://avatars.githubusercontent.com/u/3445599?v=4", "gravatar_id": "", "url": "https://api.github.com/users/AdaDoom3", "html_url": "https://github.com/AdaDoom3", "followers_url": "https://api.github.com/users/AdaDoom3/followers", "following_url": "https://api.github.com/users/AdaDoom3/following{/other_user}", "gists_url": "https://api.github.com/users/AdaDoom3/gists{/gist_id}", "starred_url": "https://api.github.com/users/AdaDoom3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/AdaDoom3/subscriptions", "organizations_url": "https://api.github.com/users/AdaDoom3/orgs", "repos_url": "https://api.github.com/users/AdaDoom3/repos", "events_url": "https://api.github.com/users/AdaDoom3/events{/privacy}", "received_events_url": "https://api.github.com/users/AdaDoom3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5861b128b9942ef92b3755610b0459273e7cf234", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5861b128b9942ef92b3755610b0459273e7cf234", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5861b128b9942ef92b3755610b0459273e7cf234"}], "stats": {"total": 82, "additions": 39, "deletions": 43}, "files": [{"sha": "b20cda4fdd68dbc6f69c04d46be5f6055d574f53", "filename": "gcc/ada/gnatls.adb", "status": "modified", "additions": 39, "deletions": 43, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2e4ebe02b1be5ee81b24ff504f58ac9078953c0/gcc%2Fada%2Fgnatls.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2e4ebe02b1be5ee81b24ff504f58ac9078953c0/gcc%2Fada%2Fgnatls.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnatls.adb?ref=a2e4ebe02b1be5ee81b24ff504f58ac9078953c0", "patch": "@@ -1339,61 +1339,57 @@ procedure Gnatls is\n          if Gpr_Prj_Path_File.all /= \"\" then\n             FD := Open_Read (Gpr_Prj_Path_File.all, GNAT.OS_Lib.Text);\n \n-            if FD = Invalid_FD then\n-               Osint.Fail\n-                 (\"warning: could not read project path file \"\"\"\n-                  & Gpr_Prj_Path_File.all & \"\"\"\");\n-            end if;\n+            if FD /= Invalid_FD then\n+               Len := Integer (File_Length (FD));\n \n-            Len := Integer (File_Length (FD));\n+               declare\n+                  Buffer : String (1 .. Len);\n+                  Index  : Positive := 1;\n+                  Last   : Positive;\n+                  Tmp    : String_Access;\n \n-            declare\n-               Buffer : String (1 .. Len);\n-               Index  : Positive := 1;\n-               Last   : Positive;\n-               Tmp    : String_Access;\n+               begin\n+                  --  Read the file\n \n-            begin\n-               --  Read the file\n+                  Len := Read (FD, Buffer (1)'Address, Len);\n+                  Close (FD);\n \n-               Len := Read (FD, Buffer (1)'Address, Len);\n-               Close (FD);\n+                  --  Scan the file line by line\n \n-               --  Scan the file line by line\n+                  while Index < Buffer'Last loop\n \n-               while Index < Buffer'Last loop\n+                     --  Find the end of line\n \n-                  --  Find the end of line\n+                     Last := Index;\n+                     while Last <= Buffer'Last\n+                       and then Buffer (Last) /= ASCII.LF\n+                       and then Buffer (Last) /= ASCII.CR\n+                     loop\n+                        Last := Last + 1;\n+                     end loop;\n \n-                  Last := Index;\n-                  while Last <= Buffer'Last\n-                    and then Buffer (Last) /= ASCII.LF\n-                    and then Buffer (Last) /= ASCII.CR\n-                  loop\n-                     Last := Last + 1;\n-                  end loop;\n-\n-                  --  Ignore empty lines\n+                     --  Ignore empty lines\n \n-                  if Last > Index then\n-                     Tmp := Self;\n-                     Self :=\n-                       new String'\n-                         (Tmp.all & Path_Separator &\n-                          Buffer (Index .. Last - 1));\n-                     Free (Tmp);\n-                  end if;\n+                     if Last > Index then\n+                        Tmp := Self;\n+                        Self :=\n+                          new String'\n+                            (Tmp.all & Path_Separator &\n+                             Buffer (Index .. Last - 1));\n+                        Free (Tmp);\n+                     end if;\n \n-                  --  Find the beginning of the next line\n+                     --  Find the beginning of the next line\n \n-                  Index := Last;\n-                  while Buffer (Index) = ASCII.CR or else\n-                        Buffer (Index) = ASCII.LF\n-                  loop\n-                     Index := Index + 1;\n+                     Index := Last;\n+                     while Buffer (Index) = ASCII.CR or else\n+                           Buffer (Index) = ASCII.LF\n+                     loop\n+                        Index := Index + 1;\n+                     end loop;\n                   end loop;\n-               end loop;\n-            end;\n+               end;\n+            end if;\n \n          end if;\n "}]}