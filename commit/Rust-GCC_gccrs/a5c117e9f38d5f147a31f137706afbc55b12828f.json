{"sha": "a5c117e9f38d5f147a31f137706afbc55b12828f", "node_id": "C_kwDOANBUbNoAKGE1YzExN2U5ZjM4ZDVmMTQ3YTMxZjEzNzcwNmFmYmM1NWIxMjgyOGY", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2022-06-23T20:50:57Z"}, "committer": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2022-06-24T14:18:14Z"}, "message": "[PATCH,RS6000 3/5] Rework the RS6000_BTM defines, continued.\n\nThe RS6000_BTM_<xxxx> definitions are mostly unused after\nthe rs6000 builtin code was reworked.   This cleans\nup the remaining RS6000_BTM_<xxxx> references by replacing\nthem with their OPTION_MASK_<xxxx> equivalents.\n\nThis patch removes the defines\nRS6000_BTM_MODULO, RS6000_BTM_ALTIVEC, RS6000_BTM_CMPB,\nRS6000_BTM_VSX, RS6000_BTM_P8_VECTOR, RS6000_BTM_P9_VECTOR,\nRS6000_BTM_P9_MISC, RS6000_BTM_CRYPTO, RS6000_BTM_HTM,\nRS6000_BTM_FRE.\n\ngcc/\n\t* config/rs6000/rs6000.cc (RS6000_BTM_ALTIVEC, RS6000_BTM_CMPB,\n\tRS6000_BTM_VSX, RS6000_BTM_FRE, RS6000_BTM_P8_VECTOR,\n\tRS6000_BTM_P9_VECTOR, RS6000_BTM_P9_MISC, RS6000_BTM_MODULO,\n\tRS6000_BTM_CRYPTO, RS6000_BTM_HTM): Replace with OPTION_MASK_ALTIVEC,\n\tOPTION_MASK_CMPB, OPTION_MASK_VSX, OPTION_MASK_POPCNTB,\n\tOPTION_MASK_P8_VECTOR, OPTION_MASK_P9_VECTOR, OPTION_MASK_P9_MISC,\n\tOPTION_MASK_MODULO, OPTION_MASK_CRYPTO, OPTION_MASK_HTM.\n\t* config/rs6000/rs6000.h (RS6000_BTM_MODULO, RS6000_BTM_ALTIVEC,\n\tRS6000_BTM_CMPB, RS6000_BTM_VSX, RS6000_BTM_P8_VECTOR,\n\tRS6000_BTM_P9_VECTOR, RS6000_BTM_P9_MISC, RS6000_BTM_CRYPTO,\n\tRS6000_BTM_HTM, RS6000_BTM_FRE): Remove.", "tree": {"sha": "a9162ee15883ab513ed089c0620e2acff37bb04a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9162ee15883ab513ed089c0620e2acff37bb04a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5c117e9f38d5f147a31f137706afbc55b12828f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c117e9f38d5f147a31f137706afbc55b12828f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5c117e9f38d5f147a31f137706afbc55b12828f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5c117e9f38d5f147a31f137706afbc55b12828f/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c0d2b63a706d5282948c18246b10e7c2ffd62fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0c0d2b63a706d5282948c18246b10e7c2ffd62fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0c0d2b63a706d5282948c18246b10e7c2ffd62fd"}], "stats": {"total": 56, "additions": 18, "deletions": 38}, "files": [{"sha": "21780563d45c413fb96c782014564e05df761849", "filename": "gcc/config/rs6000/rs6000.cc", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c117e9f38d5f147a31f137706afbc55b12828f/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c117e9f38d5f147a31f137706afbc55b12828f/gcc%2Fconfig%2Frs6000%2Frs6000.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.cc?ref=a5c117e9f38d5f147a31f137706afbc55b12828f", "patch": "@@ -3379,23 +3379,23 @@ darwin_rs6000_override_options (void)\n HOST_WIDE_INT\n rs6000_builtin_mask_calculate (void)\n {\n-  return (((TARGET_ALTIVEC)\t\t    ? RS6000_BTM_ALTIVEC   : 0)\n-\t  | ((TARGET_CMPB)\t\t    ? RS6000_BTM_CMPB\t   : 0)\n-\t  | ((TARGET_VSX)\t\t    ? RS6000_BTM_VSX\t   : 0)\n-\t  | ((TARGET_FRE)\t\t    ? RS6000_BTM_FRE\t   : 0)\n+  return (((TARGET_ALTIVEC)\t\t    ? OPTION_MASK_ALTIVEC    : 0)\n+\t  | ((TARGET_CMPB)\t\t    ? OPTION_MASK_CMPB\t     : 0)\n+\t  | ((TARGET_VSX)\t\t    ? OPTION_MASK_VSX\t     : 0)\n+\t  | ((TARGET_FRE)\t\t    ? OPTION_MASK_POPCNTB    : 0)\n \t  | ((TARGET_FRES)\t\t    ? OPTION_MASK_PPC_GFXOPT : 0)\n \t  | ((TARGET_FRSQRTE)\t\t    ? OPTION_MASK_PPC_GFXOPT : 0)\n \t  | ((TARGET_FRSQRTES)\t\t    ? OPTION_MASK_POPCNTB    : 0)\n \t  | ((TARGET_POPCNTD)\t\t    ? OPTION_MASK_POPCNTD    : 0)\n \t  | ((rs6000_cpu == PROCESSOR_CELL) ? OPTION_MASK_FPRND      : 0)\n-\t  | ((TARGET_P8_VECTOR)\t\t    ? RS6000_BTM_P8_VECTOR : 0)\n-\t  | ((TARGET_P9_VECTOR)\t\t    ? RS6000_BTM_P9_VECTOR : 0)\n-\t  | ((TARGET_P9_MISC)\t\t    ? RS6000_BTM_P9_MISC   : 0)\n-\t  | ((TARGET_MODULO)\t\t    ? RS6000_BTM_MODULO    : 0)\n+\t  | ((TARGET_P8_VECTOR)\t\t    ? OPTION_MASK_P8_VECTOR  : 0)\n+\t  | ((TARGET_P9_VECTOR)\t\t    ? OPTION_MASK_P9_VECTOR  : 0)\n+\t  | ((TARGET_P9_MISC)\t\t    ? OPTION_MASK_P9_MISC    : 0)\n+\t  | ((TARGET_MODULO)\t\t    ? OPTION_MASK_MODULO     : 0)\n \t  | ((TARGET_64BIT)\t\t    ? MASK_64BIT\t     : 0)\n \t  | ((TARGET_POWERPC64)\t\t    ? MASK_POWERPC64\t     : 0)\n-\t  | ((TARGET_CRYPTO)\t\t    ? RS6000_BTM_CRYPTO\t   : 0)\n-\t  | ((TARGET_HTM)\t\t    ? RS6000_BTM_HTM\t   : 0)\n+\t  | ((TARGET_CRYPTO)\t\t    ? OPTION_MASK_CRYPTO     : 0)\n+\t  | ((TARGET_HTM)\t\t    ? OPTION_MASK_HTM\t     : 0)\n \t  | ((TARGET_DFP)\t\t    ? OPTION_MASK_DFP\t     : 0)\n \t  | ((TARGET_HARD_FLOAT)\t    ? OPTION_MASK_SOFT_FLOAT : 0)\n \t  | ((TARGET_LONG_DOUBLE_128\n@@ -24053,19 +24053,19 @@ static struct rs6000_opt_mask const rs6000_opt_masks[] =\n /* Builtin mask mapping for printing the flags.  */\n static struct rs6000_opt_mask const rs6000_builtin_mask_names[] =\n {\n-  { \"altivec\",\t\t RS6000_BTM_ALTIVEC,\tfalse, false },\n-  { \"vsx\",\t\t RS6000_BTM_VSX,\tfalse, false },\n-  { \"fre\",\t\t RS6000_BTM_FRE,\tfalse, false },\n+  { \"altivec\",\t\t OPTION_MASK_ALTIVEC,\tfalse, false },\n+  { \"vsx\",\t\t OPTION_MASK_VSX,\tfalse, false },\n+  { \"fre\",\t\t OPTION_MASK_POPCNTB,\tfalse, false },\n   { \"fres\",\t\t OPTION_MASK_PPC_GFXOPT, false, false },\n   { \"frsqrte\",\t\t OPTION_MASK_PPC_GFXOPT, false, false },\n   { \"frsqrtes\",\t\t OPTION_MASK_POPCNTB,\tfalse, false },\n   { \"popcntd\",\t\t OPTION_MASK_POPCNTD,\tfalse, false },\n   { \"cell\",\t\t OPTION_MASK_FPRND,\tfalse, false },\n-  { \"power8-vector\",\t RS6000_BTM_P8_VECTOR,\tfalse, false },\n-  { \"power9-vector\",\t RS6000_BTM_P9_VECTOR,\tfalse, false },\n-  { \"power9-misc\",\t RS6000_BTM_P9_MISC,\tfalse, false },\n-  { \"crypto\",\t\t RS6000_BTM_CRYPTO,\tfalse, false },\n-  { \"htm\",\t\t RS6000_BTM_HTM,\tfalse, false },\n+  { \"power8-vector\",\t OPTION_MASK_P8_VECTOR,\tfalse, false },\n+  { \"power9-vector\",\t OPTION_MASK_P9_VECTOR,\tfalse, false },\n+  { \"power9-misc\",\t OPTION_MASK_P9_MISC,\tfalse, false },\n+  { \"crypto\",\t\t OPTION_MASK_CRYPTO,\tfalse, false },\n+  { \"htm\",\t\t OPTION_MASK_HTM,\tfalse, false },\n   { \"hard-dfp\",\t\t OPTION_MASK_DFP,\tfalse, false },\n   { \"hard-float\",\t OPTION_MASK_SOFT_FLOAT, false, false },\n   { \"long-double-128\",\t OPTION_MASK_MULTIPLE,\tfalse, false },"}, {"sha": "72eb473acbc3c9414e1f5e6a03040840dbdd4c07", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5c117e9f38d5f147a31f137706afbc55b12828f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5c117e9f38d5f147a31f137706afbc55b12828f/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=a5c117e9f38d5f147a31f137706afbc55b12828f", "patch": "@@ -553,11 +553,6 @@ extern int rs6000_vector_align[];\n #define MASK_LITTLE_ENDIAN\t\tOPTION_MASK_LITTLE_ENDIAN\n #endif\n \n-#ifdef TARGET_MODULO\n-#define RS6000_BTM_MODULO\t\tOPTION_MASK_MODULO\n-#endif\n-\n-\n /* For power systems, we want to enable Altivec and VSX builtins even if the\n    user did not use -maltivec or -mvsx to allow the builtins to be used inside\n    of #pragma GCC target or the target attribute to change the code level for a\n@@ -2240,21 +2235,6 @@ extern char rs6000_reg_names[][8];\t/* register names (0 vs. %r0).  */\n /* General flags.  */\n extern int frame_pointer_needed;\n \n-\n-/* Builtin targets.  For now, we reuse the masks for those options that are in\n-   target flags, and pick a random bit for ldbl128, which isn't in\n-   target_flags.  */\n-#define RS6000_BTM_ALTIVEC\tMASK_ALTIVEC\t/* VMX/altivec vectors.  */\n-#define RS6000_BTM_CMPB\t\tMASK_CMPB\t/* ISA 2.05: compare bytes.  */\n-#define RS6000_BTM_VSX\t\tMASK_VSX\t/* VSX (vector/scalar).  */\n-#define RS6000_BTM_P8_VECTOR\tMASK_P8_VECTOR\t/* ISA 2.07 vector.  */\n-#define RS6000_BTM_P9_VECTOR\tMASK_P9_VECTOR\t/* ISA 3.0 vector.  */\n-#define RS6000_BTM_P9_MISC\tMASK_P9_MISC\t/* ISA 3.0 misc. non-vector */\n-#define RS6000_BTM_CRYPTO\tMASK_CRYPTO\t/* crypto funcs.  */\n-#define RS6000_BTM_HTM\t\tMASK_HTM\t/* hardware TM funcs.  */\n-#define RS6000_BTM_FRE\t\tMASK_POPCNTB\t/* FRE instruction.  */\n-\n-\n enum rs6000_builtin_type_index\n {\n   RS6000_BTI_NOT_OPAQUE,"}]}