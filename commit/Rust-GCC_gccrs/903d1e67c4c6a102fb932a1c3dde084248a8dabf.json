{"sha": "903d1e67c4c6a102fb932a1c3dde084248a8dabf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTAzZDFlNjdjNGM2YTEwMmZiOTMyYTFjM2RkZTA4NDI0OGE4ZGFiZg==", "commit": {"author": {"name": "Xinliang David Li", "email": "davidxl@google.com", "date": "2011-04-22T00:03:41Z"}, "committer": {"name": "Xinliang David Li", "email": "davidxl@gcc.gnu.org", "date": "2011-04-22T00:03:41Z"}, "message": "Remove cgraph pid\n\nFrom-SVN: r172848", "tree": {"sha": "b1de1237c40a1783f8ec27a4d0b43d7764263cf2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1de1237c40a1783f8ec27a4d0b43d7764263cf2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/903d1e67c4c6a102fb932a1c3dde084248a8dabf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903d1e67c4c6a102fb932a1c3dde084248a8dabf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/903d1e67c4c6a102fb932a1c3dde084248a8dabf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/903d1e67c4c6a102fb932a1c3dde084248a8dabf/comments", "author": {"login": "vns-mn", "id": 57157229, "node_id": "MDQ6VXNlcjU3MTU3MjI5", "avatar_url": "https://avatars.githubusercontent.com/u/57157229?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vns-mn", "html_url": "https://github.com/vns-mn", "followers_url": "https://api.github.com/users/vns-mn/followers", "following_url": "https://api.github.com/users/vns-mn/following{/other_user}", "gists_url": "https://api.github.com/users/vns-mn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vns-mn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vns-mn/subscriptions", "organizations_url": "https://api.github.com/users/vns-mn/orgs", "repos_url": "https://api.github.com/users/vns-mn/repos", "events_url": "https://api.github.com/users/vns-mn/events{/privacy}", "received_events_url": "https://api.github.com/users/vns-mn/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7378e95ff1863346c11ac486189dde1eaa56a794", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7378e95ff1863346c11ac486189dde1eaa56a794", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7378e95ff1863346c11ac486189dde1eaa56a794"}], "stats": {"total": 95, "additions": 68, "deletions": 27}, "files": [{"sha": "ce3df3d38a3453c5910ca3f6882fb47faee8555d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=903d1e67c4c6a102fb932a1c3dde084248a8dabf", "patch": "@@ -1,3 +1,18 @@\n+2011-04-21  Xinliang David Li  <davidxl@google.com>\n+\n+\t* cgraph.h: Remove pid.\n+\t* cgraph.c: Remove pid.\n+\t* value-prof.c (init_node_map): New function.\n+\t(del_node_map): New function.\n+\t(find_func_by_funcdef_no): New function.\n+\t(gimple_ic_transform): Call new function.\n+\t* cgraphunit.c (cgraph_finalize_function): Remove pid.\n+\t* function.c (get_last_funcdef_no): New function.\n+\t* function.h (get_last_funcdef_no): New function.\n+\t* tree-profile.c (gimple_gen_ic_func_profiler): Pass funcdef_no\n+\tto libgcov function.\n+\t(tree-profiling): Call node map init and delete function.\n+\n 2011-04-21  Ian Lance Taylor  <iant@google.com>\n \n \t* godump.c (go_format_type): Use exported Go name for anonymous"}, {"sha": "8526646728449720ea7dea67ad248940a34c3933", "filename": "gcc/cgraph.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=903d1e67c4c6a102fb932a1c3dde084248a8dabf", "patch": "@@ -142,9 +142,6 @@ int cgraph_max_uid;\n /* Maximal uid used in cgraph edges.  */\n int cgraph_edge_max_uid;\n \n-/* Maximal pid used for profiling */\n-int cgraph_max_pid;\n-\n /* Set when whole unit has been analyzed so we can access global info.  */\n bool cgraph_global_info_ready = false;\n \n@@ -472,7 +469,6 @@ cgraph_create_node_1 (void)\n   struct cgraph_node *node = cgraph_allocate_node ();\n \n   node->next = cgraph_nodes;\n-  node->pid = -1;\n   node->order = cgraph_order++;\n   if (cgraph_nodes)\n     cgraph_nodes->previous = node;\n@@ -1827,8 +1823,7 @@ dump_cgraph_node (FILE *f, struct cgraph_node *node)\n   struct cgraph_edge *edge;\n   int indirect_calls_count = 0;\n \n-  fprintf (f, \"%s/%i(%i)\", cgraph_node_name (node), node->uid,\n-\t   node->pid);\n+  fprintf (f, \"%s/%i\", cgraph_node_name (node), node->uid);\n   dump_addr (f, \" @\", (void *)node);\n   if (DECL_ASSEMBLER_NAME_SET_P (node->decl))\n     fprintf (f, \" (asm: %s)\", IDENTIFIER_POINTER (DECL_ASSEMBLER_NAME (node->decl)));"}, {"sha": "b57a5e07c75444f21229499b651140eac2a985bb", "filename": "gcc/cgraph.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=903d1e67c4c6a102fb932a1c3dde084248a8dabf", "patch": "@@ -200,9 +200,6 @@ struct GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\"))) cgraph_node {\n   /* Ordering of all cgraph nodes.  */\n   int order;\n \n-  /* unique id for profiling. pid is not suitable because of different\n-     number of cfg nodes with -fprofile-generate and -fprofile-use */\n-  int pid;\n   enum ld_plugin_symbol_resolution resolution;\n \n   /* Set when function must be output for some reason.  The primary\n@@ -472,7 +469,6 @@ extern GTY(()) struct cgraph_node *cgraph_nodes;\n extern GTY(()) int cgraph_n_nodes;\n extern GTY(()) int cgraph_max_uid;\n extern GTY(()) int cgraph_edge_max_uid;\n-extern GTY(()) int cgraph_max_pid;\n extern bool cgraph_global_info_ready;\n enum cgraph_state\n {\n@@ -730,7 +726,6 @@ void cgraph_clone_inlined_nodes (struct cgraph_edge *, bool, bool);\n void compute_inline_parameters (struct cgraph_node *);\n cgraph_inline_failed_t cgraph_edge_inlinable_p (struct cgraph_edge *);\n \n-\n /* Create a new static variable of type TYPE.  */\n tree add_new_static_var (tree type);\n "}, {"sha": "7e7530b4ee97717484bba2af78e56564b56ffacf", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=903d1e67c4c6a102fb932a1c3dde084248a8dabf", "patch": "@@ -348,7 +348,6 @@ cgraph_finalize_function (tree decl, bool nested)\n   if (node->local.finalized)\n     cgraph_reset_node (node);\n \n-  node->pid = cgraph_max_pid ++;\n   notice_global_symbol (decl);\n   node->local.finalized = true;\n   node->lowered = DECL_STRUCT_FUNCTION (decl)->cfg != NULL;"}, {"sha": "1ba9dbbed28bf13a5e8749b052d2b3f35272b02f", "filename": "gcc/function.c", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=903d1e67c4c6a102fb932a1c3dde084248a8dabf", "patch": "@@ -4378,6 +4378,13 @@ get_next_funcdef_no (void)\n   return funcdef_no++;\n }\n \n+/* Return value of funcdef.  */\n+int\n+get_last_funcdef_no (void)\n+{\n+  return funcdef_no;\n+}\n+\n /* Allocate a function structure for FNDECL and set its contents\n    to the defaults.  Set cfun to the newly-allocated object.\n    Some of the helper functions invoked during initialization assume"}, {"sha": "fa449585a4287ed3ee31d0f8262a3f2e9a2e443e", "filename": "gcc/function.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Ffunction.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Ffunction.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.h?ref=903d1e67c4c6a102fb932a1c3dde084248a8dabf", "patch": "@@ -755,6 +755,7 @@ extern bool reference_callee_copied (CUMULATIVE_ARGS *, enum machine_mode,\n extern void used_types_insert (tree);\n \n extern int get_next_funcdef_no (void);\n+extern int get_last_funcdef_no (void);\n \n /* In predict.c */\n extern bool optimize_function_for_size_p (struct function *);"}, {"sha": "a77d3c51e1d11f6030a7f59e8593daf630cf6223", "filename": "gcc/profile.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Fprofile.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Fprofile.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.h?ref=903d1e67c4c6a102fb932a1c3dde084248a8dabf", "patch": "@@ -44,4 +44,7 @@ extern void mcf_smooth_cfg (void);\n \n extern gcov_type sum_edge_counts (VEC (edge, gc) *edges);\n \n+extern void init_node_map (void);\n+extern void del_node_map (void);\n+\n #endif /* PROFILE_H */"}, {"sha": "c296dffe3c384b5b8c0f779cfa4e267512271f93", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=903d1e67c4c6a102fb932a1c3dde084248a8dabf", "patch": "@@ -43,6 +43,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"value-prof.h\"\n #include \"cgraph.h\"\n+#include \"profile.h\"\n \n static GTY(()) tree gcov_type_node;\n static GTY(()) tree gcov_type_tmp_var;\n@@ -369,7 +370,7 @@ gimple_gen_ic_func_profiler (void)\n   ptr_var = force_gimple_operand_gsi (&gsi, ic_void_ptr_var,\n \t\t\t\t      true, NULL_TREE, true,\n \t\t\t\t      GSI_SAME_STMT);\n-  tree_uid = build_int_cst (gcov_type_node, c_node->pid);\n+  tree_uid = build_int_cst (gcov_type_node, current_function_funcdef_no);\n   stmt1 = gimple_build_call (tree_indirect_call_profiler_fn, 4,\n \t\t\t     counter_ptr, tree_uid, cur_func, ptr_var);\n   gsi_insert_before (&gsi, stmt1, GSI_SAME_STMT);\n@@ -454,6 +455,8 @@ tree_profiling (void)\n   if (cgraph_state == CGRAPH_STATE_FINISHED)\n     return 0;\n \n+  init_node_map();\n+\n   for (node = cgraph_nodes; node; node = node->next)\n     {\n       if (!node->analyzed\n@@ -548,6 +551,7 @@ tree_profiling (void)\n       pop_cfun ();\n     }\n \n+  del_node_map();\n   return 0;\n }\n "}, {"sha": "586a9b9204e147d2fd1e241ad23d5d1db8bb6f67", "filename": "gcc/value-prof.c", "status": "modified", "additions": 36, "deletions": 14, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/903d1e67c4c6a102fb932a1c3dde084248a8dabf/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=903d1e67c4c6a102fb932a1c3dde084248a8dabf", "patch": "@@ -46,6 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"timevar.h\"\n #include \"tree-pass.h\"\n #include \"pointer-set.h\"\n+#include \"profile.h\"\n \n /* In this file value profile based optimizations are placed.  Currently the\n    following optimizations are implemented (for more detailed descriptions\n@@ -1059,35 +1060,56 @@ gimple_mod_subtract_transform (gimple_stmt_iterator *si)\n   return true;\n }\n \n-static struct cgraph_node** pid_map = NULL;\n+static VEC(cgraph_node_ptr, heap) *cgraph_node_map = NULL;\n \n-/* Initialize map of pids (pid -> cgraph node) */\n+/* Initialize map from FUNCDEF_NO to CGRAPH_NODE.  */\n \n-static void\n-init_pid_map (void)\n+void\n+init_node_map (void)\n {\n   struct cgraph_node *n;\n \n-  if (pid_map != NULL)\n-    return;\n-\n-  pid_map = XCNEWVEC (struct cgraph_node*, cgraph_max_pid);\n+  if (get_last_funcdef_no ())\n+    VEC_safe_grow_cleared (cgraph_node_ptr, heap,\n+                           cgraph_node_map, get_last_funcdef_no ());\n \n   for (n = cgraph_nodes; n; n = n->next)\n     {\n-      if (n->pid != -1)\n-\tpid_map [n->pid] = n;\n+      if (DECL_STRUCT_FUNCTION (n->decl))\n+        VEC_replace (cgraph_node_ptr, cgraph_node_map,\n+                     DECL_STRUCT_FUNCTION (n->decl)->funcdef_no, n);\n     }\n }\n \n+/* Delete the CGRAPH_NODE_MAP.  */\n+\n+void\n+del_node_map (void)\n+{\n+   VEC_free (cgraph_node_ptr, heap, cgraph_node_map);\n+   cgraph_node_map = NULL;\n+}\n+\n /* Return cgraph node for function with pid */\n \n static inline struct cgraph_node*\n-find_func_by_pid (int\tpid)\n+find_func_by_funcdef_no (int func_id)\n {\n-  init_pid_map ();\n+  int max_id = get_last_funcdef_no ();\n+  if (func_id >= max_id || VEC_index (cgraph_node_ptr,\n+                                      cgraph_node_map,\n+                                      func_id) == NULL)\n+    {\n+      if (flag_profile_correction)\n+        inform (DECL_SOURCE_LOCATION (current_function_decl),\n+                \"Inconsistent profile: indirect call target (%d) does not exist\", func_id);\n+      else\n+        error (\"Inconsistent profile: indirect call target (%d) does not exist\", func_id);\n+\n+      return NULL;\n+    }\n \n-  return pid_map [pid];\n+  return VEC_index (cgraph_node_ptr, cgraph_node_map, func_id);\n }\n \n /* Perform sanity check on the indirect call target. Due to race conditions,\n@@ -1285,7 +1307,7 @@ gimple_ic_transform (gimple stmt)\n     prob = (count * REG_BR_PROB_BASE + all / 2) / all;\n   else\n     prob = 0;\n-  direct_call = find_func_by_pid ((int)val);\n+  direct_call = find_func_by_funcdef_no ((int)val);\n \n   if (direct_call == NULL)\n     return false;"}]}