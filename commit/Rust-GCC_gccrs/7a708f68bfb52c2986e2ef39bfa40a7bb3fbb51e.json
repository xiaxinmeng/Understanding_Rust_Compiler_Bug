{"sha": "7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2E3MDhmNjhiZmI1MmMyOTg2ZTJlZjM5YmZhNDBhN2JiM2ZiYjUxZQ==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-15T07:28:33Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2015-07-15T07:28:33Z"}, "message": "re PR rtl-optimization/66838 (Calling multiple SYSV AMD64 ABI functions from MS x64 ABI one results in clobbered parameters)\n\n\tPR rtl-optimization/66838\n\t* postreload.c (reload_cse_move2add): Also process\n\tCALL_INSN_FUNCTION_USAGE when resetting information of\n\tcall-clobbered registers.\n\ntestsuite/ChangeLog:\n\n\tPR rtl-optimization/66838\n\t* gcc.target/i386/pr66838.c: New test.\n\nFrom-SVN: r225806", "tree": {"sha": "b09e790e8ac470e5158ba902cf0d764743a55594", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b09e790e8ac470e5158ba902cf0d764743a55594"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e/comments", "author": null, "committer": null, "parents": [{"sha": "73bf400d361db60f7c02a35fa7f5494efcc5edb3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/73bf400d361db60f7c02a35fa7f5494efcc5edb3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/73bf400d361db60f7c02a35fa7f5494efcc5edb3"}], "stats": {"total": 93, "additions": 79, "deletions": 14}, "files": [{"sha": "327564f58831b3ead15e9062c4baa68e21cc8f0b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e", "patch": "@@ -1,3 +1,10 @@\n+2015-07-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/66838\n+\t* postreload.c (reload_cse_move2add): Also process\n+\tCALL_INSN_FUNCTION_USAGE when resetting information of\n+\tcall-clobbered registers.\n+\n 2015-07-14  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Cesar Philippidis  <cesar@codesourcery.com>\n \t    Chung-Lin Tang  <cltang@codesourcery.com>\n@@ -21,8 +28,8 @@\n \t(nios2_expand_cache_builtin): New function.\n \t(nios2_expand_wrpie_builtin): New function.\n \t(nios2_expand_eni_builtin): New function.\n-\t(nios2_expand_builtin): Add arch field handling and new builtin \n-        cases.\n+\t(nios2_expand_builtin): Add arch field handling and new builtin\n+\tcases.\n \t* doc/extend.texi (Altera Nios II Built-in Functions): Document\n \tnew builtins.\n \t* doc/md.texi (Machine Constraints): Document U and v constraints.\n@@ -271,7 +278,7 @@\n \t* omega.h: Don't include config.h, don't include params.h again if\n \tomega.h has already been included.\n \t* graphite-poly.h: Include sese.h.\n-\t* graphite.c: Don't include sese.h, remove needless includes and \n+\t* graphite.c: Don't include sese.h, remove needless includes and\n \tminimize includes outside #ifdef HAVE_isl block.\n \t* graphite-blocking.c: Don't include sese.h, remove needless includes,\n \tand wrap entire file in #ifdef HAVE_isl"}, {"sha": "88d5234eef367da8eeb79050b1484965baa83fcd", "filename": "gcc/postreload.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e", "patch": "@@ -2127,12 +2127,29 @@ reload_cse_move2add (rtx_insn *first)\n \t unknown values.  */\n       if (CALL_P (insn))\n \t{\n+\t  rtx link;\n+\n \t  for (i = FIRST_PSEUDO_REGISTER - 1; i >= 0; i--)\n \t    {\n \t      if (call_used_regs[i])\n \t\t/* Reset the information about this register.  */\n \t\treg_mode[i] = VOIDmode;\n \t    }\n+\n+\t  for (link = CALL_INSN_FUNCTION_USAGE (insn); link;\n+\t       link = XEXP (link, 1))\n+\t    {\n+\t      rtx setuse = XEXP (link, 0);\n+\t      rtx usage_rtx = XEXP (setuse, 0);\n+\t      if (GET_CODE (setuse) == CLOBBER\n+\t\t  && REG_P (usage_rtx))\n+\t        {\n+\t\t  unsigned int end_regno = END_REGNO (usage_rtx);\n+\t\t  for (unsigned int r = REGNO (usage_rtx); r < end_regno; ++r)\n+\t\t    /* Reset the information about this register.  */\n+\t\t    reg_mode[r] = VOIDmode;\n+\t\t}\n+\t    }\n \t}\n     }\n   return changed;"}, {"sha": "82d8660ce6aa4dff23586cfc17204a4a61aba777", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e", "patch": "@@ -1,3 +1,8 @@\n+2015-07-15  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\tPR rtl-optimization/66838\n+\t* gcc.target/i386/pr66838.c: New test.\n+\n 2015-07-14  Patrick Palka  <ppalka@gcc.gnu.org>\n \n \tPR c++/66850\n@@ -356,7 +361,7 @@\n \t* gcc.target/mips/umips-branch-14.c: New file.\n \t* gcc.target/mips/umips-branch-15.c: New file.\n \t* gcc.target/mips/umips-branch-16.c: New file.\n-\t* gcc.target/mips/branch-helper.h (OCCUPY_0x10000): New define.  \n+\t* gcc.target/mips/branch-helper.h (OCCUPY_0x10000): New define.\n \t(OCCUPY_0xfffc): New define.\n \n 2015-07-08  Renlin Li  <renlin.li@arm.com>\n@@ -427,10 +432,10 @@\n \t* gcc.target/arm/attr_thumb-static.c: Test for all targets.\n \tFix return value.\n \n-2015-05-05  Jakub Jelinek  <jakub@redhat.com>\n+2015-07-06  Jakub Jelinek  <jakub@redhat.com>\n \n-        PR target/65956\n-        * gcc.c-torture/execute/pr65956.c: New test.\n+\tPR target/65956\n+\t* gcc.c-torture/execute/pr65956.c: New test.\n \n 2015-07-06  Alan Lawrence  <alan.lawrence@arm.com>\n \n@@ -616,7 +621,7 @@\n \t* gcc.target/arm/armv8-sync-op-full.c: Likewise.\n \t* gcc.target/arm/armv8-sync-op-release.c: Likewise.\n \t* gcc.target/arm/armv8-sync-op-acquire.c: Likewise.  Also, replace\n-        'stlex' with 'strex' as the expected output.\n+\t'stlex' with 'strex' as the expected output.\n \n 2015-07-01  Paolo Carlini  <paolo.carlini@oracle.com>\n \n@@ -860,7 +865,7 @@\n 2015-06-24  Ramana Radhakrishnan  <ramana.radhakrishnan@arm.com>\n \n \t* gcc.target/arm/fixed_float_conversion.c: Skip for inappropriate\n-          multilibs.\n+\tmultilibs.\n \t* gcc.target/arm/memset-inline-10.c: Likewise.\n \t* gcc.target/arm/pr58784.c: Likewise.\n \t* gcc.target/arm/pr59985.C: Likewise.\n@@ -898,9 +903,9 @@\n \n 2015-06-24  James Greenhalgh  <james.greenhalgh@arm.com>\n \n-        * lib/c-torture.exp: Don't call check_effective_target_lto\n+\t* lib/c-torture.exp: Don't call check_effective_target_lto\n \tbefore setting up environment correctly.\n-        * lib/gcc-dg.exp: Likewise, and protect\n+\t* lib/gcc-dg.exp: Likewise, and protect\n \tgcc_force_conventional_output.\n \n 2015-06-24  Andreas Krebbel  <krebbel@linux.vnet.ibm.com>\n@@ -920,7 +925,7 @@\n \n 2015-06-23  Chen Gang  <gang.chen.5i5j@gmail.com>\n \n-        PR target/65803\n+\tPR target/65803\n \t* gcc.c-torture/pr65803.c: New test.\n \n 2015-06-23  Patrick Palka  <ppalka@gcc.gnu.org>\n@@ -1820,8 +1825,8 @@\n \n 2015-06-01  Alex Velenko  <Alex.Velenko@arm.com>\n \n-        * gcc.target/arm/thumb-ltu.c (foo): Predefined.\n-        (bar): Predefined.\n+\t* gcc.target/arm/thumb-ltu.c (foo): Predefined.\n+\t(bar): Predefined.\n \n 2015-06-01  Richard Biener  <rguenther@suse.de>\n "}, {"sha": "46effedad3bcc2299704be8bd73741dc981396e0", "filename": "gcc/testsuite/gcc.target/i386/pr66838.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66838.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66838.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr66838.c?ref=7a708f68bfb52c2986e2ef39bfa40a7bb3fbb51e", "patch": "@@ -0,0 +1,36 @@\n+/* { dg-do run { target lp64 } } */\n+/* { dg-options \"-O2\" } */\n+\n+void abort (void);\n+\n+char global;\n+\n+__attribute__((sysv_abi, noinline, noclone))\n+void sysv_abi_func(char const *desc, void *local)\n+{\n+  register int esi asm (\"esi\");\n+  register int edi asm (\"edi\");\n+  \n+  if (local != &global)\n+    abort ();\n+\n+  /* Clobber some of the extra SYSV ABI registers.  */\n+  asm volatile (\"movl\\t%2, %0\\n\\tmovl\\t%2, %1\"\n+\t\t: \"=r\" (esi), \"=r\" (edi)\n+\t\t: \"i\" (0xdeadbeef));\n+}\n+\n+__attribute__((ms_abi, noinline, noclone))\n+void ms_abi_func ()\n+{\n+  sysv_abi_func (\"1st call\", &global);\n+  sysv_abi_func (\"2nd call\", &global);\n+  sysv_abi_func (\"3rd call\", &global);\n+}\n+\n+int\n+main(void)\n+{\n+  ms_abi_func();\n+  return 0;\n+}"}]}