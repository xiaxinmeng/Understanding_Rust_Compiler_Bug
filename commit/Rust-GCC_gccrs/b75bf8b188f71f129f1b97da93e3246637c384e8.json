{"sha": "b75bf8b188f71f129f1b97da93e3246637c384e8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc1YmY4YjE4OGY3MWYxMjlmMWI5N2RhOTNlMzI0NjYzN2MzODRlOA==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-03-07T20:00:14Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-03-07T20:00:14Z"}, "message": "decl.c (create_array_type_for_decl): Only warn about invalid C++1y VLA if flag_iso or warn_vla>0.\n\n\t* decl.c (create_array_type_for_decl): Only warn about invalid\n\tC++1y VLA if flag_iso or warn_vla>0.\n\t(grokdeclarator): Likewise.\n\t* pt.c (tsubst): Likewise.\n\t* semantics.c (finish_decltype_type): Likewise.\n\t* typeck.c (cxx_sizeof_or_alignof_type): Likewise.\n\t(cp_build_addr_expr_1): Likewise.\n\t* init.c (build_new_1): Improve diagnostics.\n\nFrom-SVN: r208411", "tree": {"sha": "7eb9de0c86e9f4c54e5cd212d59aa19b658e8b0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7eb9de0c86e9f4c54e5cd212d59aa19b658e8b0b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b75bf8b188f71f129f1b97da93e3246637c384e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75bf8b188f71f129f1b97da93e3246637c384e8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b75bf8b188f71f129f1b97da93e3246637c384e8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b75bf8b188f71f129f1b97da93e3246637c384e8/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c12b3bd34db27979bc1ce2015f09c959cb9a5fb2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c12b3bd34db27979bc1ce2015f09c959cb9a5fb2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c12b3bd34db27979bc1ce2015f09c959cb9a5fb2"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "988c3bf264f7b7c1f4e43a58a57a286afd375a47", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b75bf8b188f71f129f1b97da93e3246637c384e8", "patch": "@@ -1,3 +1,14 @@\n+2014-03-07  Jason Merrill  <jason@redhat.com>\n+\n+\t* decl.c (create_array_type_for_decl): Only warn about invalid\n+\tC++1y VLA if flag_iso or warn_vla>0.\n+\t(grokdeclarator): Likewise.\n+\t* pt.c (tsubst): Likewise.\n+\t* semantics.c (finish_decltype_type): Likewise.\n+\t* typeck.c (cxx_sizeof_or_alignof_type): Likewise.\n+\t(cp_build_addr_expr_1): Likewise.\n+\t* init.c (build_new_1): Improve diagnostics.\n+\n 2014-03-07  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58609"}, {"sha": "4eb3e69af7953086f45017100ead5eeef711b974", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b75bf8b188f71f129f1b97da93e3246637c384e8", "patch": "@@ -8530,7 +8530,8 @@ create_array_type_for_decl (tree name, tree type, tree size)\n       return error_mark_node;\n     }\n \n-  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type))\n+  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type)\n+      && (flag_iso || warn_vla > 0))\n     pedwarn (input_location, OPT_Wvla, \"array of array of runtime bound\");\n \n   /* Figure out the index type for the array.  */\n@@ -9762,7 +9763,8 @@ grokdeclarator (const cp_declarator *declarator,\n                    : G_(\"cannot declare pointer to qualified function type %qT\"),\n \t\t   type);\n \n-\t  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type))\n+\t  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type)\n+\t      && (flag_iso || warn_vla > 0))\n \t    pedwarn (input_location, OPT_Wvla,\n \t\t     declarator->kind == cdk_reference\n \t\t     ? G_(\"reference to array of runtime bound\")\n@@ -10110,7 +10112,8 @@ grokdeclarator (const cp_declarator *declarator,\n \t  type = error_mark_node;\n \t}\n \n-      if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type))\n+      if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type)\n+\t  && (flag_iso || warn_vla > 0))\n \tpedwarn (input_location, OPT_Wvla,\n \t\t \"typedef naming array of runtime bound\");\n "}, {"sha": "7f5d04539a5e5d0fd8f28f5dcc4806d4e03ff0b7", "filename": "gcc/cp/init.c", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=b75bf8b188f71f129f1b97da93e3246637c384e8", "patch": "@@ -2285,6 +2285,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n      is therefore reusable.  */\n   tree data_addr;\n   tree init_preeval_expr = NULL_TREE;\n+  tree orig_type = type;\n \n   if (nelts)\n     {\n@@ -2330,7 +2331,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \t  if (complain & tf_error)\n \t    {\n \t      error_at (EXPR_LOC_OR_LOC (inner_nelts, input_location),\n-\t\t\t\"array size in operator new must be constant\");\n+\t\t\t\"array size in new-expression must be constant\");\n \t      cxx_constant_value(inner_nelts);\n \t    }\n \t  nelts = error_mark_node;\n@@ -2344,7 +2345,7 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n \n   if (variably_modified_type_p (elt_type, NULL_TREE) && (complain & tf_error))\n     {\n-      error (\"variably modified type not allowed in operator new\");\n+      error (\"variably modified type not allowed in new-expression\");\n       return error_mark_node;\n     }\n \n@@ -2357,8 +2358,17 @@ build_new_1 (vec<tree, va_gc> **placement, tree type, tree nelts,\n       && !TREE_CONSTANT (maybe_constant_value (outer_nelts)))\n     {\n       if (complain & tf_warning_or_error)\n-\tpedwarn(EXPR_LOC_OR_LOC (outer_nelts, input_location), OPT_Wvla,\n-\t\t\"ISO C++ does not support variable-length array types\");\n+\t{\n+\t  const char *msg;\n+\t  if (typedef_variant_p (orig_type))\n+\t    msg = (\"non-constant array new length must be specified \"\n+\t\t   \"directly, not by typedef\");\n+\t  else\n+\t    msg = (\"non-constant array new length must be specified \"\n+\t\t   \"without parentheses around the type-id\");\n+\t  pedwarn (EXPR_LOC_OR_LOC (outer_nelts, input_location),\n+\t\t   OPT_Wvla, msg);\n+\t}\n       else\n \treturn error_mark_node;\n     }"}, {"sha": "6476d8aae56ef393e07ebf6d02bab387ad0e3376", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b75bf8b188f71f129f1b97da93e3246637c384e8", "patch": "@@ -11954,7 +11954,8 @@ tsubst (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \n \tif (cxx_dialect >= cxx1y\n \t    && !(TREE_CODE (t) == REFERENCE_TYPE && REFERENCE_VLA_OK (t))\n-\t    && array_of_runtime_bound_p (type))\n+\t    && array_of_runtime_bound_p (type)\n+\t    && (flag_iso || warn_vla > 0))\n \t  {\n \t    if (complain & tf_warning_or_error)\n \t      pedwarn"}, {"sha": "b9c1271e3898ba0067859f5a252df4faea613477", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=b75bf8b188f71f129f1b97da93e3246637c384e8", "patch": "@@ -7031,7 +7031,8 @@ finish_decltype_type (tree expr, bool id_expression_or_member_access_p,\n \t}\n     }\n \n-  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type))\n+  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type)\n+      && (flag_iso || warn_vla > 0))\n     {\n       if (complain & tf_warning_or_error)\n \tpedwarn (input_location, OPT_Wvla,"}, {"sha": "c91612c767548e2cd2d313bd0a3426b1900265b3", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=b75bf8b188f71f129f1b97da93e3246637c384e8", "patch": "@@ -1552,7 +1552,8 @@ cxx_sizeof_or_alignof_type (tree type, enum tree_code op, bool complain)\n       return value;\n     }\n \n-  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type))\n+  if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (type)\n+      && (flag_iso || warn_vla > 0))\n     {\n       if (complain & tf_warning_or_error)\n \tpedwarn (input_location, OPT_Wvla,\n@@ -5471,7 +5472,8 @@ cp_build_addr_expr_1 (tree arg, bool strict_lvalue, tsubst_flags_t complain)\n \n   if (argtype != error_mark_node)\n     {\n-      if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (argtype))\n+      if (cxx_dialect >= cxx1y && array_of_runtime_bound_p (argtype)\n+\t  && (flag_iso || warn_vla > 0))\n \t{\n \t  if (complain & tf_warning_or_error)\n \t    pedwarn (input_location, OPT_Wvla,"}, {"sha": "55ae5c8af0a310d96b6a4e4bad41efc5c0515c55", "filename": "gcc/testsuite/g++.dg/ext/vla1.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla1.C?ref=b75bf8b188f71f129f1b97da93e3246637c384e8", "patch": "@@ -9,7 +9,7 @@ class A { A (int); };\n \n A::A (int i)\n {\n-  int ar[1][i];    // { dg-error \"variable length array\" }\n+  int ar[1][i];    // { dg-error \"array\" }\n \n   ar[0][0] = 0;\n }"}, {"sha": "ca583091769f6da191d567f3e5fcf3e781781998", "filename": "gcc/testsuite/g++.dg/ext/vla5.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla5.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla5.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla5.C?ref=b75bf8b188f71f129f1b97da93e3246637c384e8", "patch": "@@ -6,5 +6,5 @@\n void\n test (int a)\n {\n-  new (char[a]); // { dg-warning \"variable-length array\" }\n+  new (char[a]); // { dg-warning \"parentheses\" }\n }"}, {"sha": "9e2d6bdad436b284bcc34d0d8c6add56ba894f92", "filename": "gcc/testsuite/g++.dg/ext/vla8.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fext%2Fvla8.C?ref=b75bf8b188f71f129f1b97da93e3246637c384e8", "patch": "@@ -8,7 +8,7 @@ struct AvlTreeIter\n \n   AvlTreeIter()\n   {\n-    new (void* [Num()]); // { dg-warning \"variable-length array\" }\n+    new (void* [Num()]); // { dg-warning \"parentheses\" }\n   }\n };\n "}, {"sha": "7d07cf57f86594daf3812d832e186f3cfe2032f0", "filename": "gcc/testsuite/g++.dg/init/new35.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew35.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew35.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew35.C?ref=b75bf8b188f71f129f1b97da93e3246637c384e8", "patch": "@@ -5,7 +5,7 @@ int\n main (int argc, char **argv)\n {\n   typedef char A[argc];\n-  new A; // { dg-warning \"variable-length array types|not a constant\" }\n+  new A; // { dg-warning \"array\" }\n   new A[0]; // { dg-error \"must be constant|not a constant\" }\n   new A[5]; // { dg-error \"must be constant|not a constant\" }\n   new (A[0]); // { dg-error \"must be constant|not a constant\" }"}, {"sha": "eab7854217454fd36127a578ee8391268412ffea", "filename": "gcc/testsuite/g++.dg/init/new37.C", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b75bf8b188f71f129f1b97da93e3246637c384e8/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fnew37.C?ref=b75bf8b188f71f129f1b97da93e3246637c384e8", "patch": "@@ -3,7 +3,7 @@\n void\n nonconst(int n)\n {\n-  new (long[n][n]); // { dg-error \"variable length|array size|not a constant\" }\n+  new (long[n][n]); // { dg-error \"variable length|array size|not a constant|runtime bound\" }\n   new long[n][n]; // { dg-error \"variable length|array size|not a constant\" }\n }\n "}]}