{"sha": "a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI3N2RkOWIxYTA4ODRhZDUxNjFlNWRjMGY0MzJiYmNkOTQ5ZThjZg==", "commit": {"author": {"name": "Sandra Loosemore", "email": "sandra@codesourcery.com", "date": "2010-07-02T14:48:04Z"}, "committer": {"name": "Sandra Loosemore", "email": "sandra@gcc.gnu.org", "date": "2010-07-02T14:48:04Z"}, "message": "arm.c (neon_vdup_constant): Expand into canonical RTL instead of an unspec.\n\n2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n\n\tgcc/\n\t* config/arm/arm.c (neon_vdup_constant): Expand into canonical RTL\n\tinstead of an unspec.\n\t(neon_expand_vector_init): Likewise.\n\t* config/arm/neon.md (UNSPEC_VCOMBINE): Delete.\n\t(UNSPEC_VDUP_LANE): Delete.\n\t(UNSPEC VDUP_N): Delete.\n\t(UNSPEC_VGET_HIGH): Delete.\n\t(UNSPEC_VGET_LANE): Delete.\n\t(UNSPEC_VGET_LOW): Delete.\n\t(UNSPEC_VMVN): Delete.\n\t(UNSPEC_VSET_LANE): Delete.\n\t(V_double_vector_mode): New.\n\t(vec_set<mode>_internal): Make code emitted match that for the\n\tcorresponding intrinsics.\n\t(vec_setv2di_internal): Likewise.\n\t(neon_vget_lanedi): Rewrite to expand into emit_move_insn.\n\t(neon_vget_lanev2di): Rewrite to expand into vec_extractv2di.\n\t(neon_vset_lane<mode>): Combine double and quad patterns and\n\texpand into vec_set<mode>_internal instead of UNSPEC_VSET_LANE.\n\t(neon_vset_lanedi): Rewrite to expand into emit_move_insn.\n\t(neon_vdup_n<mode>): Rewrite RTL without unspec.\n\t(neon_vdup_ndi): Rewrite as define_expand and use emit_move_insn.\n\t(neon_vdup_nv2di): Rewrite RTL without unspec and merge with\n\twith neon_vdup_lanev2di, adjusting the pattern from the latter\n\tto be predicable for consistency.\n\t(neon_vdup_lane<mode>_internal): New.\n\t(neon_vdup_lane<mode>): Turn into a define_expand and rewrite\n\tto avoid using an unspec.\n\t(neon_vdup_lanedi): Rewrite RTL pattern to avoid unspec.\n\t(neon_vdup_lanev2di): Turn into a define_expand.\n\t(neon_vcombine): Rewrite pattern to eliminate UNPSEC_VCOMBINE.\n\t(neon_vget_high<mode>): Replace with....\n\t(neon_vget_highv16qi): New pattern using canonical RTL.\n\t(neon_vget_highv8hi): Likewise.\n\t(neon_vget_highv4si): Likewise.\n\t(neon_vget_highv4sf): Likewise.\n\t(neon_vget_highv2di): Likewise.\n\t(neon_vget_low<mode>): Replace with....\n\t(neon_vget_lowv16qi): New pattern using canonical RTL.\n\t(neon_vget_lowv8hi): Likewise.\n\t(neon_vget_lowv4si): Likewise.\n\t(neon_vget_lowv4sf): Likewise.\n\t(neon_vget_lowv2di): Likewise.\n\n\t* config/arm/neon.ml (Vget_lane): Add No_op attribute to suppress\n\ttest for this emitting vmov.\n\t(Vset_lane): Likewise.\n\t(Vdup_n): Likewise.\n\t(Vmov_n): Likewise.\n\n\t* doc/arm-neon-intrinsics.texi: Regenerated.\n\n\tgcc/testsuite/\n\t* gcc.target/arm/neon/vdup_ns64.c: Regenerated.\n\t* gcc.target/arm/neon/vdup_nu64.c: Regenerated.\n\t* gcc.target/arm/neon/vdupQ_ns64.c: Regenerated.\n\t* gcc.target/arm/neon/vdupQ_nu64.c: Regenerated.\n\t* gcc.target/arm/neon/vmov_ns64.c: Regenerated.\n\t* gcc.target/arm/neon/vmov_nu64.c: Regenerated.\n\t* gcc.target/arm/neon/vmovQ_ns64.c: Regenerated.\n\t* gcc.target/arm/neon/vmovQ_nu64.c: Regenerated.\n\t* gcc.target/arm/neon/vget_lanes64.c: Regenerated.\n\t* gcc.target/arm/neon/vget_laneu64.c: Regenerated.\n\t* gcc.target/arm/neon/vset_lanes64.c: Regenerated.\n\t* gcc.target/arm/neon/vset_laneu64.c: Regenerated.\n\t* gcc.target/arm/neon-vdup_ns64.c: New.\n\t* gcc.target/arm/neon-vdup_nu64.c: New.\n\t* gcc.target/arm/neon-vdupQ_ns64.c: New.\n\t* gcc.target/arm/neon-vdupQ_nu64.c: New.\n\t* gcc.target/arm/neon-vdupQ_lanes64.c: New.\n\t* gcc.target/arm/neon-vdupQ_laneu64.c: New.\n\t* gcc.target/arm/neon-vmov_ns64.c: New.\n\t* gcc.target/arm/neon-vmov_nu64.c: New.\n\t* gcc.target/arm/neon-vmovQ_ns64.c: New.\n\t* gcc.target/arm/neon-vmovQ_nu64.c: New.\n\t* gcc.target/arm/neon-vget_lanes64.c: New.\n\t* gcc.target/arm/neon-vget_laneu64.c: New.\n\t* gcc.target/arm/neon-vset_lanes64.c: New.\n\t* gcc.target/arm/neon-vset_laneu64.c: New.\n\nFrom-SVN: r161720", "tree": {"sha": "496d9999349fb60c99c98dfea93f7718bb2efaa4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/496d9999349fb60c99c98dfea93f7718bb2efaa4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/comments", "author": {"login": "SandraLoosemore", "id": 104087111, "node_id": "U_kgDOBjQ-Rw", "avatar_url": "https://avatars.githubusercontent.com/u/104087111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SandraLoosemore", "html_url": "https://github.com/SandraLoosemore", "followers_url": "https://api.github.com/users/SandraLoosemore/followers", "following_url": "https://api.github.com/users/SandraLoosemore/following{/other_user}", "gists_url": "https://api.github.com/users/SandraLoosemore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SandraLoosemore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SandraLoosemore/subscriptions", "organizations_url": "https://api.github.com/users/SandraLoosemore/orgs", "repos_url": "https://api.github.com/users/SandraLoosemore/repos", "events_url": "https://api.github.com/users/SandraLoosemore/events{/privacy}", "received_events_url": "https://api.github.com/users/SandraLoosemore/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8c98c2a6cc3155c02ae6be8ce4478a30fef203c1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8c98c2a6cc3155c02ae6be8ce4478a30fef203c1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8c98c2a6cc3155c02ae6be8ce4478a30fef203c1"}], "stats": {"total": 917, "additions": 695, "deletions": 222}, "files": [{"sha": "a398516d24a1a7c50534d734fc0fe419fa43c690", "filename": "gcc/ChangeLog", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -1,3 +1,57 @@\n+2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* config/arm/arm.c (neon_vdup_constant): Expand into canonical RTL\n+\tinstead of an unspec.\n+\t(neon_expand_vector_init): Likewise.\n+\t* config/arm/neon.md (UNSPEC_VCOMBINE): Delete.\n+\t(UNSPEC_VDUP_LANE): Delete.\n+\t(UNSPEC VDUP_N): Delete.\n+\t(UNSPEC_VGET_HIGH): Delete.\n+\t(UNSPEC_VGET_LANE): Delete.\n+\t(UNSPEC_VGET_LOW): Delete.\n+\t(UNSPEC_VMVN): Delete.\n+\t(UNSPEC_VSET_LANE): Delete.\n+\t(V_double_vector_mode): New.\n+\t(vec_set<mode>_internal): Make code emitted match that for the\n+\tcorresponding intrinsics.\n+\t(vec_setv2di_internal): Likewise.\n+\t(neon_vget_lanedi): Rewrite to expand into emit_move_insn.\n+\t(neon_vget_lanev2di): Rewrite to expand into vec_extractv2di.\n+\t(neon_vset_lane<mode>): Combine double and quad patterns and\n+\texpand into vec_set<mode>_internal instead of UNSPEC_VSET_LANE.\n+\t(neon_vset_lanedi): Rewrite to expand into emit_move_insn.\n+\t(neon_vdup_n<mode>): Rewrite RTL without unspec.\n+\t(neon_vdup_ndi): Rewrite as define_expand and use emit_move_insn.\n+\t(neon_vdup_nv2di): Rewrite RTL without unspec and merge with\n+\twith neon_vdup_lanev2di, adjusting the pattern from the latter\n+\tto be predicable for consistency.\n+\t(neon_vdup_lane<mode>_internal): New.\n+\t(neon_vdup_lane<mode>): Turn into a define_expand and rewrite\n+\tto avoid using an unspec.\n+\t(neon_vdup_lanedi): Rewrite RTL pattern to avoid unspec.\n+\t(neon_vdup_lanev2di): Turn into a define_expand.\n+\t(neon_vcombine): Rewrite pattern to eliminate UNPSEC_VCOMBINE.\n+\t(neon_vget_high<mode>): Replace with....\n+\t(neon_vget_highv16qi): New pattern using canonical RTL.\n+\t(neon_vget_highv8hi): Likewise.\n+\t(neon_vget_highv4si): Likewise.\n+\t(neon_vget_highv4sf): Likewise.\n+\t(neon_vget_highv2di): Likewise.\n+\t(neon_vget_low<mode>): Replace with....\n+\t(neon_vget_lowv16qi): New pattern using canonical RTL.\n+\t(neon_vget_lowv8hi): Likewise.\n+\t(neon_vget_lowv4si): Likewise.\n+\t(neon_vget_lowv4sf): Likewise.\n+\t(neon_vget_lowv2di): Likewise.\n+\n+\t* config/arm/neon.ml (Vget_lane): Add No_op attribute to suppress\n+\ttest for this emitting vmov.\n+\t(Vset_lane): Likewise.\n+\t(Vdup_n): Likewise.\n+\t(Vmov_n): Likewise.\n+\n+\t* doc/arm-neon-intrinsics.texi: Regenerated.\n+\n 2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n \n \t* config/arm/neon.md (vec_extractv2di): Correct error in register"}, {"sha": "92f19c362d7b0fb40b538882bf18a43b87de5279", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -8250,8 +8250,7 @@ neon_vdup_constant (rtx vals)\n      load.  */\n \n   x = copy_to_mode_reg (inner_mode, XVECEXP (vals, 0, 0));\n-  return gen_rtx_UNSPEC (mode, gen_rtvec (1, x),\n-\t\t\t UNSPEC_VDUP_N);\n+  return gen_rtx_VEC_DUPLICATE (mode, x);\n }\n \n /* Generate code to load VALS, which is a PARALLEL containing only\n@@ -8347,8 +8346,7 @@ neon_expand_vector_init (rtx target, rtx vals)\n     {\n       x = copy_to_mode_reg (inner_mode, XVECEXP (vals, 0, 0));\n       emit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t      gen_rtx_UNSPEC (mode, gen_rtvec (1, x),\n-\t\t\t\t\t      UNSPEC_VDUP_N)));\n+\t\t\t      gen_rtx_VEC_DUPLICATE (mode, x)));\n       return;\n     }\n \n@@ -8357,7 +8355,7 @@ neon_expand_vector_init (rtx target, rtx vals)\n   if (n_var == 1)\n     {\n       rtx copy = copy_rtx (vals);\n-      rtvec ops;\n+      rtx index = GEN_INT (one_var);\n \n       /* Load constant part of vector, substitute neighboring value for\n \t varying element.  */\n@@ -8366,9 +8364,38 @@ neon_expand_vector_init (rtx target, rtx vals)\n \n       /* Insert variable.  */\n       x = copy_to_mode_reg (inner_mode, XVECEXP (vals, 0, one_var));\n-      ops = gen_rtvec (3, x, target, GEN_INT (one_var));\n-      emit_insn (gen_rtx_SET (VOIDmode, target,\n-\t\t\t      gen_rtx_UNSPEC (mode, ops, UNSPEC_VSET_LANE)));\n+      switch (mode)\n+\t{\n+\tcase V8QImode:\n+\t  emit_insn (gen_neon_vset_lanev8qi (target, x, target, index));\n+\t  break;\n+\tcase V16QImode:\n+\t  emit_insn (gen_neon_vset_lanev16qi (target, x, target, index));\n+\t  break;\n+\tcase V4HImode:\n+\t  emit_insn (gen_neon_vset_lanev4hi (target, x, target, index));\n+\t  break;\n+\tcase V8HImode:\n+\t  emit_insn (gen_neon_vset_lanev8hi (target, x, target, index));\n+\t  break;\n+\tcase V2SImode:\n+\t  emit_insn (gen_neon_vset_lanev2si (target, x, target, index));\n+\t  break;\n+\tcase V4SImode:\n+\t  emit_insn (gen_neon_vset_lanev4si (target, x, target, index));\n+\t  break;\n+\tcase V2SFmode:\n+\t  emit_insn (gen_neon_vset_lanev2sf (target, x, target, index));\n+\t  break;\n+\tcase V4SFmode:\n+\t  emit_insn (gen_neon_vset_lanev4sf (target, x, target, index));\n+\t  break;\n+\tcase V2DImode:\n+\t  emit_insn (gen_neon_vset_lanev2di (target, x, target, index));\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n       return;\n     }\n "}, {"sha": "f02250a5d87a2aced6bce16b91da906efdee120d", "filename": "gcc/config/arm/neon.md", "status": "modified", "additions": 265, "deletions": 173, "changes": 438, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Fconfig%2Farm%2Fneon.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Fconfig%2Farm%2Fneon.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.md?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -42,16 +42,10 @@\n    (UNSPEC_VCLS\t\t\t84)\n    (UNSPEC_VCLZ\t\t\t85)\n    (UNSPEC_VCNT\t\t\t86)\n-   (UNSPEC_VCOMBINE\t\t87)\n    (UNSPEC_VCVT\t\t\t88)\n    (UNSPEC_VCVT_N\t\t89)\n-   (UNSPEC_VDUP_LANE\t\t90)\n-   (UNSPEC_VDUP_N\t\t91)\n    (UNSPEC_VEOR\t\t\t92)\n    (UNSPEC_VEXT\t\t\t93)\n-   (UNSPEC_VGET_HIGH\t\t94)\n-   (UNSPEC_VGET_LANE\t\t95)\n-   (UNSPEC_VGET_LOW\t\t96)\n    (UNSPEC_VHADD\t\t97)\n    (UNSPEC_VHSUB\t\t98)\n    (UNSPEC_VLD1\t\t\t99)\n@@ -87,7 +81,6 @@\n    (UNSPEC_VMUL_LANE\t\t129)\n    (UNSPEC_VMULL_LANE\t\t130)\n    (UNSPEC_VMUL_N\t\t131)\n-   (UNSPEC_VMVN\t\t\t132)\n    (UNSPEC_VORN\t\t\t133)\n    (UNSPEC_VORR\t\t\t134)\n    (UNSPEC_VPADAL\t\t135)\n@@ -125,7 +118,6 @@\n    (UNSPEC_VREV64\t\t167)\n    (UNSPEC_VRSQRTE\t\t168)\n    (UNSPEC_VRSQRTS\t\t169)\n-   (UNSPEC_VSET_LANE\t\t170)\n    (UNSPEC_VSHL\t\t\t171)\n    (UNSPEC_VSHLL_N\t\t172)\n    (UNSPEC_VSHL_N\t\t173)\n@@ -335,6 +327,14 @@\n \t\t\t\t  (V4HI \"V2SI\") (V8HI \"V4SI\")\n \t\t\t\t  (V2SI \"DI\")   (V4SI \"V2DI\")])\n \n+;; Double-sized modes with the same element size.\n+;; Used for neon_vdup_lane, where the second operand is double-sized\n+;; even when the first one is quad.\n+(define_mode_attr V_double_vector_mode [(V16QI \"V8QI\") (V8HI \"V4HI\")\n+                                        (V4SI \"V2SI\") (V4SF \"V2SF\")\n+                                        (V8QI \"V8QI\") (V4HI \"V4HI\")\n+                                        (V2SI \"V2SI\") (V2SF \"V2SF\")])\n+\n ;; Mode of result of comparison operations (and bit-select operand 1).\n (define_mode_attr V_cmp_result [(V8QI \"V8QI\") (V16QI \"V16QI\")\n \t\t\t        (V4HI \"V4HI\") (V8HI  \"V8HI\")\n@@ -688,7 +688,7 @@\n     elt = GET_MODE_NUNITS (<MODE>mode) - 1 - elt;\n   operands[2] = GEN_INT (elt);\n   \n-  return \"vmov%?.<V_uf_sclr>\\t%P0[%c2], %1\";\n+  return \"vmov%?.<V_sz_elem>\\t%P0[%c2], %1\";\n }\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"neon_type\" \"neon_mcr\")])\n@@ -714,7 +714,7 @@\n   operands[0] = gen_rtx_REG (<V_HALF>mode, regno + hi);\n   operands[2] = GEN_INT (elt);\n \n-  return \"vmov%?.<V_uf_sclr>\\t%P0[%c2], %1\";\n+  return \"vmov%?.<V_sz_elem>\\t%P0[%c2], %1\";\n }\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"neon_type\" \"neon_mcr\")]\n@@ -734,7 +734,7 @@\n \n   operands[0] = gen_rtx_REG (DImode, regno);\n \n-  return \"vmov%?.64\\t%P0, %Q1, %R1\";\n+  return \"vmov%?\\t%P0, %Q1, %R1\";\n }\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"neon_type\" \"neon_mcr_2_mcrr\")]\n@@ -2555,126 +2555,65 @@\n ; Operand 3 (info word) is ignored because it does nothing useful with 64-bit\n ; elements.\n \n-(define_insn \"neon_vget_lanedi\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n-       (unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"w\")\n-                   (match_operand:SI 2 \"immediate_operand\" \"i\")\n-                   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n-                  UNSPEC_VGET_LANE))]\n+(define_expand \"neon_vget_lanedi\"\n+  [(match_operand:DI 0 \"s_register_operand\" \"=r\")\n+   (match_operand:DI 1 \"s_register_operand\" \"w\")\n+   (match_operand:SI 2 \"immediate_operand\" \"i\")\n+   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n   \"TARGET_NEON\"\n {\n   neon_lane_bounds (operands[2], 0, 1);\n-  return \"vmov%?\\t%Q0, %R0, %P1  @ di\";\n-}\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"neon_type\" \"neon_bp_simple\")]\n-)\n+  emit_move_insn (operands[0], operands[1]);\n+  DONE;\n+})\n \n-(define_insn \"neon_vget_lanev2di\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=r\")\n-       (unspec:DI [(match_operand:V2DI 1 \"s_register_operand\" \"w\")\n-                   (match_operand:SI 2 \"immediate_operand\" \"i\")\n-                   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n-                  UNSPEC_VGET_LANE))]\n+(define_expand \"neon_vget_lanev2di\"\n+  [(match_operand:DI 0 \"s_register_operand\" \"=r\")\n+   (match_operand:V2DI 1 \"s_register_operand\" \"w\")\n+   (match_operand:SI 2 \"immediate_operand\" \"i\")\n+   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n   \"TARGET_NEON\"\n {\n-  rtx ops[2];\n-  unsigned int regno = REGNO (operands[1]);\n-  unsigned int elt = INTVAL (operands[2]);\n-\n   neon_lane_bounds (operands[2], 0, 2);\n+  emit_insn (gen_vec_extractv2di (operands[0], operands[1], operands[2]));\n+  DONE;\n+})\n \n-  ops[0] = operands[0];\n-  ops[1] = gen_rtx_REG (DImode, regno + 2 * elt);\n-  output_asm_insn (\"vmov%?\\t%Q0, %R0, %P1  @ v2di\", ops);\n-\n-  return \"\";\n-}\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"neon_type\" \"neon_bp_simple\")]\n-)\n-\n-(define_insn \"neon_vset_lane<mode>\"\n-  [(set (match_operand:VD 0 \"s_register_operand\" \"=w\")\n-\t(unspec:VD [(match_operand:<V_elem> 1 \"s_register_operand\" \"r\")\n-\t\t    (match_operand:VD 2 \"s_register_operand\" \"0\")\n-                    (match_operand:SI 3 \"immediate_operand\" \"i\")]\n-                   UNSPEC_VSET_LANE))]\n-  \"TARGET_NEON\"\n-{\n-  neon_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode));\n-  return \"vmov%?.<V_sz_elem>\\t%P0[%c3], %1\";\n-}\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"neon_type\" \"neon_bp_simple\")]\n-)\n-\n-; See neon_vget_lanedi comment for reasons operands 2 & 3 are ignored.\n-\n-(define_insn \"neon_vset_lanedi\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"r\")\n-\t\t    (match_operand:DI 2 \"s_register_operand\" \"0\")\n-                    (match_operand:SI 3 \"immediate_operand\" \"i\")]\n-                   UNSPEC_VSET_LANE))]\n-  \"TARGET_NEON\"\n-{\n-  neon_lane_bounds (operands[3], 0, 1);\n-  return \"vmov%?\\t%P0, %Q1, %R1  @ di\";\n-}\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"neon_type\" \"neon_bp_simple\")]\n-)\n-\n-(define_insn \"neon_vset_lane<mode>\"\n-  [(set (match_operand:VQ 0 \"s_register_operand\" \"=w\")\n-\t(unspec:VQ [(match_operand:<V_elem> 1 \"s_register_operand\" \"r\")\n-\t\t    (match_operand:VQ 2 \"s_register_operand\" \"0\")\n-                    (match_operand:SI 3 \"immediate_operand\" \"i\")]\n-                   UNSPEC_VSET_LANE))]\n+(define_expand \"neon_vset_lane<mode>\"\n+  [(match_operand:VDQ 0 \"s_register_operand\" \"=w\")\n+   (match_operand:<V_elem> 1 \"s_register_operand\" \"r\")\n+   (match_operand:VDQ 2 \"s_register_operand\" \"0\")\n+   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n   \"TARGET_NEON\"\n {\n-  rtx ops[4];\n-  unsigned int regno = REGNO (operands[0]);\n-  unsigned int halfelts = GET_MODE_NUNITS (<MODE>mode) / 2;\n   unsigned int elt = INTVAL (operands[3]);\n+  neon_lane_bounds (operands[3], 0, GET_MODE_NUNITS (<MODE>mode));\n \n-  neon_lane_bounds (operands[3], 0, halfelts * 2);\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      unsigned int reg_nelts\n+\t= 64 / GET_MODE_BITSIZE (GET_MODE_INNER (<MODE>mode));\n+      elt ^= reg_nelts - 1;\n+    }\n \n-  ops[0] = gen_rtx_REG (<V_HALF>mode, regno + 2 * (elt / halfelts));\n-  ops[1] = operands[1];\n-  ops[2] = GEN_INT (elt % halfelts);\n-  output_asm_insn (\"vmov%?.<V_sz_elem>\\t%P0[%c2], %1\", ops);\n+  emit_insn (gen_vec_set<mode>_internal (operands[0], operands[1],\n+                                         GEN_INT (1 << elt), operands[2]));\n+  DONE;\n+})\n \n-  return \"\";\n-}\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"neon_type\" \"neon_bp_simple\")]\n-)\n+; See neon_vget_lanedi comment for reasons operands 2 & 3 are ignored.\n \n-(define_insn \"neon_vset_lanev2di\"\n-  [(set (match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:V2DI [(match_operand:DI 1 \"s_register_operand\" \"r\")\n-\t\t      (match_operand:V2DI 2 \"s_register_operand\" \"0\")\n-                      (match_operand:SI 3 \"immediate_operand\" \"i\")]\n-                   UNSPEC_VSET_LANE))]\n+(define_expand \"neon_vset_lanedi\"\n+  [(match_operand:DI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:DI 1 \"s_register_operand\" \"r\")\n+   (match_operand:DI 2 \"s_register_operand\" \"0\")\n+   (match_operand:SI 3 \"immediate_operand\" \"i\")]\n   \"TARGET_NEON\"\n {\n-  rtx ops[2];\n-  unsigned int regno = REGNO (operands[0]);\n-  unsigned int elt = INTVAL (operands[3]);\n-\n-  neon_lane_bounds (operands[3], 0, 2);\n-\n-  ops[0] = gen_rtx_REG (DImode, regno + 2 * elt);\n-  ops[1] = operands[1];\n-  output_asm_insn (\"vmov%?\\t%P0, %Q1, %R1  @ v2di\", ops);\n-\n-  return \"\";\n-}\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"neon_type\" \"neon_bp_simple\")]\n-)\n+  neon_lane_bounds (operands[3], 0, 1);\n+  emit_move_insn (operands[0], operands[1]);\n+  DONE;\n+})\n \n (define_expand \"neon_vcreate<mode>\"\n   [(match_operand:VDX 0 \"s_register_operand\" \"\")\n@@ -2688,8 +2627,7 @@\n \n (define_insn \"neon_vdup_n<mode>\"\n   [(set (match_operand:VX 0 \"s_register_operand\" \"=w\")\n-\t(unspec:VX [(match_operand:<V_elem> 1 \"s_register_operand\" \"r\")]\n-\t\t   UNSPEC_VDUP_N))]\n+        (vec_duplicate:VX (match_operand:<V_elem> 1 \"s_register_operand\" \"r\")))]\n   \"TARGET_NEON\"\n   \"vdup%?.<V_sz_elem>\\t%<V_reg>0, %1\"\n   ;; Assume this schedules like vmov.\n@@ -2699,8 +2637,7 @@\n \n (define_insn \"neon_vdup_n<mode>\"\n   [(set (match_operand:V32 0 \"s_register_operand\" \"=w,w\")\n-\t(unspec:V32 [(match_operand:<V_elem> 1 \"s_register_operand\" \"r,t\")]\n-\t\t    UNSPEC_VDUP_N))]\n+        (vec_duplicate:V32 (match_operand:<V_elem> 1 \"s_register_operand\" \"r,t\")))]\n   \"TARGET_NEON\"\n   \"@\n   vdup%?.<V_sz_elem>\\t%<V_reg>0, %1\n@@ -2710,82 +2647,94 @@\n    (set_attr \"neon_type\" \"neon_bp_simple\")]\n )\n \n-(define_insn \"neon_vdup_ndi\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"r\")]\n-                   UNSPEC_VDUP_N))]\n+(define_expand \"neon_vdup_ndi\"\n+  [(match_operand:DI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:DI 1 \"s_register_operand\" \"r\")]\n   \"TARGET_NEON\"\n-  \"vmov%?\\t%P0, %Q1, %R1\"\n-  [(set_attr \"predicable\" \"yes\")\n-   (set_attr \"neon_type\" \"neon_bp_simple\")]\n+{\n+  emit_move_insn (operands[0], operands[1]);\n+  DONE;\n+}\n )\n \n (define_insn \"neon_vdup_nv2di\"\n-  [(set (match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:V2DI [(match_operand:DI 1 \"s_register_operand\" \"r\")]\n-                     UNSPEC_VDUP_N))]\n+  [(set (match_operand:V2DI 0 \"s_register_operand\" \"=w,w\")\n+        (vec_duplicate:V2DI (match_operand:DI 1 \"s_register_operand\" \"r,w\")))]\n   \"TARGET_NEON\"\n-  \"vmov%?\\t%e0, %Q1, %R1\\;vmov%?\\t%f0, %Q1, %R1\"\n+  \"@\n+  vmov%?\\t%e0, %Q1, %R1\\;vmov%?\\t%f0, %Q1, %R1\n+  vmov%?\\t%e0, %P1\\;vmov%?\\t%f0, %P1\"\n   [(set_attr \"predicable\" \"yes\")\n    (set_attr \"length\" \"8\")\n    (set_attr \"neon_type\" \"neon_bp_simple\")]\n )\n \n-(define_insn \"neon_vdup_lane<mode>\"\n-  [(set (match_operand:VD 0 \"s_register_operand\" \"=w\")\n-\t(unspec:VD [(match_operand:VD 1 \"s_register_operand\" \"w\")\n-\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n-                   UNSPEC_VDUP_LANE))]\n+(define_insn \"neon_vdup_lane<mode>_internal\"\n+  [(set (match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n+  \t(vec_duplicate:VDQW \n+          (vec_select:<V_elem>\n+            (match_operand:<V_double_vector_mode> 1 \"s_register_operand\" \"w\")\n+            (parallel [(match_operand:SI 2 \"immediate_operand\" \"i\")]))))]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[2], 0, GET_MODE_NUNITS (<MODE>mode));\n-  return \"vdup.<V_sz_elem>\\t%P0, %P1[%c2]\";\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      int elt = INTVAL (operands[2]);\n+      elt = GET_MODE_NUNITS (<V_double_vector_mode>mode) - 1 - elt;\n+      operands[2] = GEN_INT (elt);\n+    }\n+  if (<Is_d_reg>)\n+    return \"vdup.<V_sz_elem>\\t%P0, %P1[%c2]\";\n+  else\n+    return \"vdup.<V_sz_elem>\\t%q0, %P1[%c2]\";\n }\n   ;; Assume this schedules like vmov.\n   [(set_attr \"neon_type\" \"neon_bp_simple\")]\n )\n \n-(define_insn \"neon_vdup_lane<mode>\"\n-  [(set (match_operand:VQ 0 \"s_register_operand\" \"=w\")\n-\t(unspec:VQ [(match_operand:<V_HALF> 1 \"s_register_operand\" \"w\")\n-\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n-                   UNSPEC_VDUP_LANE))]\n+(define_expand \"neon_vdup_lane<mode>\"\n+  [(match_operand:VDQW 0 \"s_register_operand\" \"=w\")\n+   (match_operand:<V_double_vector_mode> 1 \"s_register_operand\" \"w\")\n+   (match_operand:SI 2 \"immediate_operand\" \"i\")]\n   \"TARGET_NEON\"\n {\n-  neon_lane_bounds (operands[2], 0, GET_MODE_NUNITS (<V_HALF>mode));\n-  return \"vdup.<V_sz_elem>\\t%q0, %P1[%c2]\";\n-}\n-  ;; Assume this schedules like vmov.\n-  [(set_attr \"neon_type\" \"neon_bp_simple\")]\n-)\n+  neon_lane_bounds (operands[2], 0, GET_MODE_NUNITS (<V_double_vector_mode>mode));\n+  if (BYTES_BIG_ENDIAN)\n+    {\n+      unsigned int elt = INTVAL (operands[2]);\n+      unsigned int reg_nelts\n+\t= 64 / GET_MODE_BITSIZE (GET_MODE_INNER (<V_double_vector_mode>mode));\n+      elt ^= reg_nelts - 1;\n+      operands[2] = GEN_INT (elt);\n+    }\n+    emit_insn (gen_neon_vdup_lane<mode>_internal (operands[0], operands[1],\n+                                                  operands[2]));\n+    DONE;\n+})\n \n ; Scalar index is ignored, since only zero is valid here.\n (define_expand \"neon_vdup_lanedi\"\n-  [(set (match_operand:DI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:DI [(match_operand:DI 1 \"s_register_operand\" \"w\")\n-\t\t    (match_operand:SI 2 \"immediate_operand\" \"i\")]\n-                   UNSPEC_VDUP_LANE))]\n+  [(match_operand:DI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:DI 1 \"s_register_operand\" \"w\")\n+   (match_operand:SI 2 \"immediate_operand\" \"i\")]\n   \"TARGET_NEON\"\n {\n   neon_lane_bounds (operands[2], 0, 1);\n   emit_move_insn (operands[0], operands[1]);\n   DONE;\n })\n \n-; Likewise.\n-(define_insn \"neon_vdup_lanev2di\"\n-  [(set (match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n-\t(unspec:V2DI [(match_operand:DI 1 \"s_register_operand\" \"w\")\n-\t\t      (match_operand:SI 2 \"immediate_operand\" \"i\")]\n-                     UNSPEC_VDUP_LANE))]\n+; Likewise for v2di, as the DImode second operand has only a single element.\n+(define_expand \"neon_vdup_lanev2di\"\n+  [(match_operand:V2DI 0 \"s_register_operand\" \"=w\")\n+   (match_operand:DI 1 \"s_register_operand\" \"w\")\n+   (match_operand:SI 2 \"immediate_operand\" \"i\")]\n   \"TARGET_NEON\"\n {\n   neon_lane_bounds (operands[2], 0, 1);\n-  return \"vmov\\t%e0, %P1\\;vmov\\t%f0, %P1\";\n-}\n-  [(set_attr \"length\" \"8\")\n-   (set_attr \"neon_type\" \"neon_bp_simple\")]\n-)\n+  emit_insn (gen_neon_vdup_nv2di (operands[0], operands[1]));\n+  DONE;\n+})\n \n ;; In this insn, operand 1 should be low, and operand 2 the high part of the\n ;; dest vector.\n@@ -2796,9 +2745,8 @@\n \n (define_insn \"neon_vcombine<mode>\"\n   [(set (match_operand:<V_DOUBLE> 0 \"s_register_operand\" \"=w\")\n-\t(unspec:<V_DOUBLE> [(match_operand:VDX 1 \"s_register_operand\" \"w\")\n-\t\t\t    (match_operand:VDX 2 \"s_register_operand\" \"w\")]\n-                           UNSPEC_VCOMBINE))]\n+        (vec_concat:<V_DOUBLE> (match_operand:VDX 1 \"s_register_operand\" \"w\")\n+\t\t\t       (match_operand:VDX 2 \"s_register_operand\" \"w\")))]\n   \"TARGET_NEON\"\n {\n   int dest = REGNO (operands[0]);\n@@ -2838,10 +2786,82 @@\n    (set_attr \"neon_type\" \"neon_bp_simple\")]\n )\n \n-(define_insn \"neon_vget_high<mode>\"\n-  [(set (match_operand:<V_HALF> 0 \"s_register_operand\" \"=w\")\n-\t(unspec:<V_HALF> [(match_operand:VQX 1 \"s_register_operand\" \"w\")]\n-\t\t\t UNSPEC_VGET_HIGH))]\n+(define_insn \"neon_vget_highv16qi\"\n+  [(set (match_operand:V8QI 0 \"s_register_operand\" \"=w\")\n+\t(vec_select:V8QI (match_operand:V16QI 1 \"s_register_operand\" \"w\")\n+                         (parallel [(const_int 8) (const_int 9)\n+\t\t\t            (const_int 10) (const_int 11)\n+\t\t\t\t    (const_int 12) (const_int 13)\n+\t\t\t\t    (const_int 14) (const_int 15)])))]\n+  \"TARGET_NEON\"\n+{\n+  int dest = REGNO (operands[0]);\n+  int src = REGNO (operands[1]);\n+\n+  if (dest != src + 2)\n+    return \"vmov\\t%P0, %f1\";\n+  else\n+    return \"\";\n+}\n+  [(set_attr \"neon_type\" \"neon_bp_simple\")]\n+)\n+\n+(define_insn \"neon_vget_highv8hi\"\n+  [(set (match_operand:V4HI 0 \"s_register_operand\" \"=w\")\n+\t(vec_select:V4HI (match_operand:V8HI 1 \"s_register_operand\" \"w\")\n+\t                 (parallel [(const_int 4) (const_int 5)\n+\t\t\t            (const_int 6) (const_int 7)])))]\n+  \"TARGET_NEON\"\n+{\n+  int dest = REGNO (operands[0]);\n+  int src = REGNO (operands[1]);\n+\n+  if (dest != src + 2)\n+    return \"vmov\\t%P0, %f1\";\n+  else\n+    return \"\";\n+}\n+  [(set_attr \"neon_type\" \"neon_bp_simple\")]\n+)\n+\n+(define_insn \"neon_vget_highv4si\"\n+  [(set (match_operand:V2SI 0 \"s_register_operand\" \"=w\")\n+\t(vec_select:V2SI (match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t                 (parallel [(const_int 2) (const_int 3)])))]\n+  \"TARGET_NEON\"\n+{\n+  int dest = REGNO (operands[0]);\n+  int src = REGNO (operands[1]);\n+\n+  if (dest != src + 2)\n+    return \"vmov\\t%P0, %f1\";\n+  else\n+    return \"\";\n+}\n+  [(set_attr \"neon_type\" \"neon_bp_simple\")]\n+)\n+\n+(define_insn \"neon_vget_highv4sf\"\n+  [(set (match_operand:V2SF 0 \"s_register_operand\" \"=w\")\n+\t(vec_select:V2SF (match_operand:V4SF 1 \"s_register_operand\" \"w\")\n+\t                 (parallel [(const_int 2) (const_int 3)])))]\n+  \"TARGET_NEON\"\n+{\n+  int dest = REGNO (operands[0]);\n+  int src = REGNO (operands[1]);\n+\n+  if (dest != src + 2)\n+    return \"vmov\\t%P0, %f1\";\n+  else\n+    return \"\";\n+}\n+  [(set_attr \"neon_type\" \"neon_bp_simple\")]\n+)\n+\n+(define_insn \"neon_vget_highv2di\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w\")\n+\t(vec_select:DI (match_operand:V2DI 1 \"s_register_operand\" \"w\")\n+\t               (parallel [(const_int 1)])))]\n   \"TARGET_NEON\"\n {\n   int dest = REGNO (operands[0]);\n@@ -2855,10 +2875,82 @@\n   [(set_attr \"neon_type\" \"neon_bp_simple\")]\n )\n \n-(define_insn \"neon_vget_low<mode>\"\n-  [(set (match_operand:<V_HALF> 0 \"s_register_operand\" \"=w\")\n-\t(unspec:<V_HALF> [(match_operand:VQX 1 \"s_register_operand\" \"w\")]\n-\t\t\t UNSPEC_VGET_LOW))]\n+(define_insn \"neon_vget_lowv16qi\"\n+  [(set (match_operand:V8QI 0 \"s_register_operand\" \"=w\")\n+\t(vec_select:V8QI (match_operand:V16QI 1 \"s_register_operand\" \"w\")\n+                         (parallel [(const_int 0) (const_int 1)\n+\t\t\t            (const_int 2) (const_int 3)\n+\t\t\t\t    (const_int 4) (const_int 5)\n+\t\t\t\t    (const_int 6) (const_int 7)])))]\n+  \"TARGET_NEON\"\n+{\n+  int dest = REGNO (operands[0]);\n+  int src = REGNO (operands[1]);\n+\n+  if (dest != src)\n+    return \"vmov\\t%P0, %e1\";\n+  else\n+    return \"\";\n+}\n+  [(set_attr \"neon_type\" \"neon_bp_simple\")]\n+)\n+\n+(define_insn \"neon_vget_lowv8hi\"\n+  [(set (match_operand:V4HI 0 \"s_register_operand\" \"=w\")\n+\t(vec_select:V4HI (match_operand:V8HI 1 \"s_register_operand\" \"w\")\n+\t                 (parallel [(const_int 0) (const_int 1)\n+\t\t\t            (const_int 2) (const_int 3)])))]\n+  \"TARGET_NEON\"\n+{\n+  int dest = REGNO (operands[0]);\n+  int src = REGNO (operands[1]);\n+\n+  if (dest != src)\n+    return \"vmov\\t%P0, %e1\";\n+  else\n+    return \"\";\n+}\n+  [(set_attr \"neon_type\" \"neon_bp_simple\")]\n+)\n+\n+(define_insn \"neon_vget_lowv4si\"\n+  [(set (match_operand:V2SI 0 \"s_register_operand\" \"=w\")\n+\t(vec_select:V2SI (match_operand:V4SI 1 \"s_register_operand\" \"w\")\n+\t                 (parallel [(const_int 0) (const_int 1)])))]\n+  \"TARGET_NEON\"\n+{\n+  int dest = REGNO (operands[0]);\n+  int src = REGNO (operands[1]);\n+\n+  if (dest != src)\n+    return \"vmov\\t%P0, %e1\";\n+  else\n+    return \"\";\n+}\n+  [(set_attr \"neon_type\" \"neon_bp_simple\")]\n+)\n+\n+(define_insn \"neon_vget_lowv4sf\"\n+  [(set (match_operand:V2SF 0 \"s_register_operand\" \"=w\")\n+\t(vec_select:V2SF (match_operand:V4SF 1 \"s_register_operand\" \"w\")\n+\t                 (parallel [(const_int 0) (const_int 1)])))]\n+  \"TARGET_NEON\"\n+{\n+  int dest = REGNO (operands[0]);\n+  int src = REGNO (operands[1]);\n+\n+  if (dest != src)\n+    return \"vmov\\t%P0, %e1\";\n+  else\n+    return \"\";\n+}\n+  [(set_attr \"neon_type\" \"neon_bp_simple\")]\n+)\n+\n+(define_insn \"neon_vget_lowv2di\"\n+  [(set (match_operand:DI 0 \"s_register_operand\" \"=w\")\n+\t(vec_select:DI (match_operand:V2DI 1 \"s_register_operand\" \"w\")\n+\t               (parallel [(const_int 0)])))]\n   \"TARGET_NEON\"\n {\n   int dest = REGNO (operands[0]);"}, {"sha": "b93e87b240cfdf57129510ffe6d0b274bab1caa1", "filename": "gcc/config/arm/neon.ml", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Fconfig%2Farm%2Fneon.ml", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Fconfig%2Farm%2Fneon.ml", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fneon.ml?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -967,7 +967,8 @@ let ops =\n       Use_operands [| Corereg; Dreg; Immed |],\n       \"vget_lane\", get_lane, pf_su_8_32;\n     Vget_lane,\n-      [InfoWord;\n+      [No_op;\n+       InfoWord;\n        Disassembles_as [Use_operands [| Corereg; Corereg; Dreg |]];\n        Instruction_name [\"vmov\"]; Const_valuator (fun _ -> 0)],\n       Use_operands [| Corereg; Dreg; Immed |],\n@@ -989,7 +990,8 @@ let ops =\n                 Instruction_name [\"vmov\"]],\n       Use_operands [| Dreg; Corereg; Dreg; Immed |], \"vset_lane\",\n       set_lane, pf_su_8_32;\n-    Vset_lane, [Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |]];\n+    Vset_lane, [No_op;\n+                Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |]];\n                 Instruction_name [\"vmov\"]; Const_valuator (fun _ -> 0)],\n       Use_operands [| Dreg; Corereg; Dreg; Immed |], \"vset_lane\",\n       set_lane_notype, [S64; U64];\n@@ -1017,7 +1019,8 @@ let ops =\n       Use_operands [| Dreg; Corereg |], \"vdup_n\", bits_1,\n       pf_su_8_32;\n     Vdup_n,\n-      [Instruction_name [\"vmov\"];\n+      [No_op;\n+       Instruction_name [\"vmov\"];\n        Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |]]],\n       Use_operands [| Dreg; Corereg |], \"vdup_n\", notype_1,\n       [S64; U64];\n@@ -1028,7 +1031,8 @@ let ops =\n       Use_operands [| Qreg; Corereg |], \"vdupQ_n\", bits_1,\n       pf_su_8_32;\n     Vdup_n,\n-      [Instruction_name [\"vmov\"];\n+      [No_op;\n+       Instruction_name [\"vmov\"];\n        Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |];\n                         Use_operands [| Dreg; Corereg; Corereg |]]],\n       Use_operands [| Qreg; Corereg |], \"vdupQ_n\", notype_1,\n@@ -1043,7 +1047,8 @@ let ops =\n       Use_operands [| Dreg; Corereg |],\n       \"vmov_n\", bits_1, pf_su_8_32;\n     Vmov_n,\n-      [Builtin_name \"vdup_n\";\n+      [No_op;\n+       Builtin_name \"vdup_n\";\n        Instruction_name [\"vmov\"];\n        Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |]]],\n       Use_operands [| Dreg; Corereg |],\n@@ -1056,7 +1061,8 @@ let ops =\n       Use_operands [| Qreg; Corereg |],\n       \"vmovQ_n\", bits_1, pf_su_8_32;\n     Vmov_n,\n-      [Builtin_name \"vdupQ_n\";\n+      [No_op;\n+       Builtin_name \"vdupQ_n\";\n        Instruction_name [\"vmov\"];\n        Disassembles_as [Use_operands [| Dreg; Corereg; Corereg |];\n                         Use_operands [| Dreg; Corereg; Corereg |]]],"}, {"sha": "60391e8a6367f5562591521fdadde34785b6598a", "filename": "gcc/doc/arm-neon-intrinsics.texi", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Fdoc%2Farm-neon-intrinsics.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Farm-neon-intrinsics.texi?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -4750,13 +4750,11 @@\n \n @itemize @bullet\n @item uint64_t vget_lane_u64 (uint64x1_t, const int)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{r0}, @var{r0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n @item int64_t vget_lane_s64 (int64x1_t, const int)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{r0}, @var{r0}, @var{d0}}\n @end itemize\n \n \n@@ -4886,13 +4884,11 @@\n \n @itemize @bullet\n @item uint64x1_t vset_lane_u64 (uint64_t, uint64x1_t, const int)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{r0}, @var{r0}}\n @end itemize\n \n \n @itemize @bullet\n @item int64x1_t vset_lane_s64 (int64_t, int64x1_t, const int)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{r0}, @var{r0}}\n @end itemize\n \n \n@@ -5081,13 +5077,11 @@\n \n @itemize @bullet\n @item uint64x1_t vdup_n_u64 (uint64_t)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{r0}, @var{r0}}\n @end itemize\n \n \n @itemize @bullet\n @item int64x1_t vdup_n_s64 (int64_t)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{r0}, @var{r0}}\n @end itemize\n \n \n@@ -5147,13 +5141,11 @@\n \n @itemize @bullet\n @item uint64x2_t vdupq_n_u64 (uint64_t)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{r0}, @var{r0}}\n @end itemize\n \n \n @itemize @bullet\n @item int64x2_t vdupq_n_s64 (int64_t)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{r0}, @var{r0}}\n @end itemize\n \n \n@@ -5213,13 +5205,11 @@\n \n @itemize @bullet\n @item uint64x1_t vmov_n_u64 (uint64_t)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{r0}, @var{r0}}\n @end itemize\n \n \n @itemize @bullet\n @item int64x1_t vmov_n_s64 (int64_t)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{r0}, @var{r0}}\n @end itemize\n \n \n@@ -5279,13 +5269,11 @@\n \n @itemize @bullet\n @item uint64x2_t vmovq_n_u64 (uint64_t)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{r0}, @var{r0}}\n @end itemize\n \n \n @itemize @bullet\n @item int64x2_t vmovq_n_s64 (int64_t)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{r0}, @var{r0}}\n @end itemize\n \n \n@@ -5572,32 +5560,30 @@\n \n \n @itemize @bullet\n-@item uint64x1_t vget_low_u64 (uint64x2_t)\n+@item float32x2_t vget_low_f32 (float32x4_t)\n @*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n-@item int64x1_t vget_low_s64 (int64x2_t)\n+@item poly16x4_t vget_low_p16 (poly16x8_t)\n @*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n-@item float32x2_t vget_low_f32 (float32x4_t)\n+@item poly8x8_t vget_low_p8 (poly8x16_t)\n @*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{d0}}\n @end itemize\n \n \n @itemize @bullet\n-@item poly16x4_t vget_low_p16 (poly16x8_t)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{d0}}\n+@item uint64x1_t vget_low_u64 (uint64x2_t)\n @end itemize\n \n \n @itemize @bullet\n-@item poly8x8_t vget_low_p8 (poly8x16_t)\n-@*@emph{Form of expected instruction(s):} @code{vmov @var{d0}, @var{d0}}\n+@item int64x1_t vget_low_s64 (int64x2_t)\n @end itemize\n \n "}, {"sha": "369557b488ed97d51927414191b30e1fa7372342", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -1,3 +1,32 @@\n+2010-07-02  Sandra Loosemore  <sandra@codesourcery.com>\n+\n+\t* gcc.target/arm/neon/vdup_ns64.c: Regenerated.\n+\t* gcc.target/arm/neon/vdup_nu64.c: Regenerated.\n+\t* gcc.target/arm/neon/vdupQ_ns64.c: Regenerated.\n+\t* gcc.target/arm/neon/vdupQ_nu64.c: Regenerated.\n+\t* gcc.target/arm/neon/vmov_ns64.c: Regenerated.\n+\t* gcc.target/arm/neon/vmov_nu64.c: Regenerated.\n+\t* gcc.target/arm/neon/vmovQ_ns64.c: Regenerated.\n+\t* gcc.target/arm/neon/vmovQ_nu64.c: Regenerated.\n+\t* gcc.target/arm/neon/vget_lanes64.c: Regenerated.\n+\t* gcc.target/arm/neon/vget_laneu64.c: Regenerated.\n+\t* gcc.target/arm/neon/vset_lanes64.c: Regenerated.\n+\t* gcc.target/arm/neon/vset_laneu64.c: Regenerated.\n+\t* gcc.target/arm/neon-vdup_ns64.c: New.\n+\t* gcc.target/arm/neon-vdup_nu64.c: New.\n+\t* gcc.target/arm/neon-vdupQ_ns64.c: New.\n+\t* gcc.target/arm/neon-vdupQ_nu64.c: New.\n+\t* gcc.target/arm/neon-vdupQ_lanes64.c: New.\n+\t* gcc.target/arm/neon-vdupQ_laneu64.c: New.\n+\t* gcc.target/arm/neon-vmov_ns64.c: New.\n+\t* gcc.target/arm/neon-vmov_nu64.c: New.\n+\t* gcc.target/arm/neon-vmovQ_ns64.c: New.\n+\t* gcc.target/arm/neon-vmovQ_nu64.c: New.\n+\t* gcc.target/arm/neon-vget_lanes64.c: New.\n+\t* gcc.target/arm/neon-vget_laneu64.c: New.\n+\t* gcc.target/arm/neon-vset_lanes64.c: New.\n+\t* gcc.target/arm/neon-vset_laneu64.c: New.\n+\n 2010-07-02  Richard Guenther  <rguenther@suse.de>\n \n \t* g++.dg/torture/20100702-1.C: New testcase."}, {"sha": "da24eaca69f9049ac0c4086e1af6808fe9639e29", "filename": "gcc/testsuite/gcc.target/arm/neon-vdupQ_lanes64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdupQ_lanes64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdupQ_lanes64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdupQ_lanes64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,22 @@\n+/* Test the `vdupq_lanes64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64x2_t out_int64x2_t = {0, 0};\n+  int64_t arg0_int64_t = (int64_t) 0xdeadbeef;\n+\n+  out_int64x2_t = vdupq_lane_s64 ((int64x1_t)arg0_int64_t, 0);\n+  if (vgetq_lane_s64 (out_int64x2_t, 0) != arg0_int64_t)\n+    abort();\n+  if (vgetq_lane_s64 (out_int64x2_t, 1) != arg0_int64_t)\n+    abort();\n+  return 0;\n+}"}, {"sha": "cc19ea512529e6ac72182af61fb4b617dff723d5", "filename": "gcc/testsuite/gcc.target/arm/neon-vdupQ_laneu64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdupQ_laneu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdupQ_laneu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdupQ_laneu64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,22 @@\n+/* Test the `vdupq_laneu64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64x2_t out_uint64x2_t = {0, 0};\n+  uint64_t arg0_uint64_t = (uint64_t) 0xdeadbeef;\n+\n+  out_uint64x2_t = vdupq_lane_u64 ((uint64x1_t)arg0_uint64_t, 0);\n+  if (vgetq_lane_u64 (out_uint64x2_t, 0) != arg0_uint64_t)\n+    abort();\n+  if (vgetq_lane_u64 (out_uint64x2_t, 1) != arg0_uint64_t)\n+    abort();\n+  return 0;\n+}"}, {"sha": "79b4d4eb60da2ad0c5e454b26746e1b8909ae7b1", "filename": "gcc/testsuite/gcc.target/arm/neon-vdupQ_ns64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdupQ_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdupQ_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdupQ_ns64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,22 @@\n+/* Test the `vdupq_ns64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64x2_t out_int64x2_t = {0, 0};\n+  int64_t arg0_int64_t = (int64_t) 0xdeadbeef;\n+\n+  out_int64x2_t = vdupq_n_s64 (arg0_int64_t);\n+  if (vgetq_lane_s64 (out_int64x2_t, 0) != arg0_int64_t)\n+    abort();\n+  if (vgetq_lane_s64 (out_int64x2_t, 1) != arg0_int64_t)\n+    abort();\n+  return 0;\n+}"}, {"sha": "ef6f47fd3aa260f5cd5c013dd859176e2f83c459", "filename": "gcc/testsuite/gcc.target/arm/neon-vdupQ_nu64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdupQ_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdupQ_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdupQ_nu64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,22 @@\n+/* Test the `vdupq_nu64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64x2_t out_uint64x2_t = {0, 0};\n+  uint64_t arg0_uint64_t = (uint64_t) 0xdeadbeef;\n+\n+  out_uint64x2_t = vdupq_n_u64 (arg0_uint64_t);\n+  if (vgetq_lane_u64 (out_uint64x2_t, 0) != arg0_uint64_t)\n+    abort();\n+  if (vgetq_lane_u64 (out_uint64x2_t, 1) != arg0_uint64_t)\n+    abort();\n+  return 0;\n+}"}, {"sha": "589ea22930d07aa7b1674acb36209f2fea2862a7", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup_ns64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup_ns64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vdup_ns64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64x1_t out_int64x1_t = 0;\n+  int64_t arg0_int64_t = (int64_t) 0xdeadbeef;\n+\n+  out_int64x1_t = vdup_n_s64 (arg0_int64_t);\n+  if ((int64_t)out_int64x1_t != arg0_int64_t)\n+    abort();\n+  return 0;\n+}"}, {"sha": "8bed5a0c7d73dec6ace940a2765ebeded518963c", "filename": "gcc/testsuite/gcc.target/arm/neon-vdup_nu64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vdup_nu64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vdup_nu64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64x1_t out_uint64x1_t = 0;\n+  uint64_t arg0_uint64_t = (uint64_t) 0xdeadbeef;\n+\n+  out_uint64x1_t = vdup_n_u64 (arg0_uint64_t);\n+  if ((uint64_t)out_uint64x1_t != arg0_uint64_t)\n+    abort();\n+  return 0;\n+}"}, {"sha": "5891e66193a10c7e7248b4039cdc79efb9d2338d", "filename": "gcc/testsuite/gcc.target/arm/neon-vget_lanes64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vget_lanes64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vget_lanes64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vget_lanes64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vget_lane_s64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64_t out_int64_t = 0;\n+  int64x1_t arg0_int64x1_t = (int64x1_t) 0xdeadbeefbadf00dLL;\n+\n+  out_int64_t = vget_lane_s64 (arg0_int64x1_t, 0);\n+  if (out_int64_t != (int64_t)arg0_int64x1_t)\n+    abort();\n+  return 0;\n+}"}, {"sha": "b0ce070d3b931eed4a541c38514beee37c20dadd", "filename": "gcc/testsuite/gcc.target/arm/neon-vget_laneu64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vget_laneu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vget_laneu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vget_laneu64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vget_lane_u64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64_t out_uint64_t = 0;\n+  uint64x1_t arg0_uint64x1_t = (uint64x1_t) 0xdeadbeefbadf00dLL;\n+\n+  out_uint64_t = vget_lane_u64 (arg0_uint64x1_t, 0);\n+  if (out_uint64_t != (uint64_t)arg0_uint64x1_t)\n+    abort();\n+  return 0;\n+}"}, {"sha": "5a8abdce0381cd461ca7d18567a9bfb9fbd8de2a", "filename": "gcc/testsuite/gcc.target/arm/neon-vmovQ_ns64.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmovQ_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmovQ_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmovQ_ns64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,22 @@\n+/* Test the `vmovq_ns64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64x2_t out_int64x2_t = {0, 0};\n+  int64_t arg0_int64_t = (int64_t) 0xdeadbeef;\n+\n+  out_int64x2_t = vmovq_n_s64 (arg0_int64_t);\n+  if (vgetq_lane_s64 (out_int64x2_t, 0) != arg0_int64_t)\n+    abort();\n+  if (vgetq_lane_s64 (out_int64x2_t, 1) != arg0_int64_t)\n+    abort();\n+  return 0;\n+}"}, {"sha": "8012fc1753d078235614a04ab32ab09e7030d7d6", "filename": "gcc/testsuite/gcc.target/arm/neon-vmovQ_nu64.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmovQ_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmovQ_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmovQ_nu64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,23 @@\n+/* Test the `vmovq_nu64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64x2_t out_uint64x2_t = {0, 0};\n+  uint64_t arg0_uint64_t = (uint64_t) 0xdeadbeef;\n+\n+  out_uint64x2_t = vmovq_n_u64 (arg0_uint64_t);\n+  if (vgetq_lane_u64 (out_uint64x2_t, 0) != arg0_uint64_t)\n+    abort();\n+  if (vgetq_lane_u64 (out_uint64x2_t, 1) != arg0_uint64_t)\n+    abort();\n+  return 0;\n+}\n+"}, {"sha": "c125f4a247dedfe8d06d3d16c8eb1ad332b8cc9e", "filename": "gcc/testsuite/gcc.target/arm/neon-vmov_ns64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmov_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmov_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmov_ns64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vmov_ns64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64x1_t out_int64x1_t = 0;\n+  int64_t arg0_int64_t = (int64_t) 0xdeadbeef;\n+\n+  out_int64x1_t = vmov_n_s64 (arg0_int64_t);\n+  if ((int64_t)out_int64x1_t != arg0_int64_t)\n+    abort();\n+  return 0;\n+}"}, {"sha": "71ecaed134e15be2238884a6bdeb183b962cadbe", "filename": "gcc/testsuite/gcc.target/arm/neon-vmov_nu64.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmov_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmov_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vmov_nu64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,20 @@\n+/* Test the `vmov_nu64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64x1_t out_uint64x1_t = 0;\n+  uint64_t arg0_uint64_t = (uint64_t) 0xdeadbeef;\n+\n+  out_uint64x1_t = vmov_n_u64 (arg0_uint64_t);\n+  if ((uint64_t)out_uint64x1_t != arg0_uint64_t)\n+    abort();\n+  return 0;\n+}"}, {"sha": "10113932711ec3ec4a456294a4f16fade60ff972", "filename": "gcc/testsuite/gcc.target/arm/neon-vset_lanes64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vset_lanes64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vset_lanes64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vset_lanes64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vset_lane_s64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  int64x1_t out_int64x1_t = 0;\n+  int64_t arg0_int64_t = 0xf00f00f00LL;\n+  int64x1_t arg1_int64x1_t = (int64x1_t) 0xdeadbeefbadf00dLL;\n+\n+  out_int64x1_t = vset_lane_s64 (arg0_int64_t, arg1_int64x1_t, 0);\n+  if ((int64_t)out_int64x1_t != arg0_int64_t)\n+    abort();\n+  return 0;\n+}"}, {"sha": "cafc2607687afbdd03b8160a372ef9e4c0a104bf", "filename": "gcc/testsuite/gcc.target/arm/neon-vset_laneu64.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vset_laneu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vset_laneu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon-vset_laneu64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -0,0 +1,21 @@\n+/* Test the `vset_lane_s64' ARM Neon intrinsic.  */\n+\n+/* { dg-do run } */\n+/* { dg-require-effective-target arm_neon_hw } */\n+/* { dg-options \"-O0\" } */\n+/* { dg-add-options arm_neon } */\n+\n+#include \"arm_neon.h\"\n+#include <stdlib.h>\n+\n+int main (void)\n+{\n+  uint64x1_t out_uint64x1_t = 0;\n+  uint64_t arg0_uint64_t = 0xf00f00f00LL;\n+  uint64x1_t arg1_uint64x1_t = (uint64x1_t) 0xdeadbeefbadf00dLL;\n+\n+  out_uint64x1_t = vset_lane_u64 (arg0_uint64_t, arg1_uint64x1_t, 0);\n+  if ((uint64_t)out_uint64x1_t != arg0_uint64_t)\n+    abort();\n+  return 0;\n+}"}, {"sha": "ab749a7bbad19365a8dc54118c51e1e3f673d580", "filename": "gcc/testsuite/gcc.target/arm/neon/vdupQ_ns64.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_ns64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -16,6 +16,4 @@ void test_vdupQ_ns64 (void)\n   out_int64x2_t = vdupq_n_s64 (arg0_int64_t);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "0ddb72decc8dec5e181e0f3da71d90912c9b89ed", "filename": "gcc/testsuite/gcc.target/arm/neon/vdupQ_nu64.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvdupQ_nu64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -16,6 +16,4 @@ void test_vdupQ_nu64 (void)\n   out_uint64x2_t = vdupq_n_u64 (arg0_uint64_t);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "033f1b4744c9bf7b491e1726adae211fc38410f9", "filename": "gcc/testsuite/gcc.target/arm/neon/vdup_ns64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_ns64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -16,5 +16,4 @@ void test_vdup_ns64 (void)\n   out_int64x1_t = vdup_n_s64 (arg0_int64_t);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "6888125c638a2a0eb9ce74e9d09ba0dee468c9a3", "filename": "gcc/testsuite/gcc.target/arm/neon/vdup_nu64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvdup_nu64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -16,5 +16,4 @@ void test_vdup_nu64 (void)\n   out_uint64x1_t = vdup_n_u64 (arg0_uint64_t);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5dc99424fa56d9f2d5b058893a80062f956baee4", "filename": "gcc/testsuite/gcc.target/arm/neon/vget_lanes64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvget_lanes64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvget_lanes64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvget_lanes64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -16,5 +16,4 @@ void test_vget_lanes64 (void)\n   out_int64_t = vget_lane_s64 (arg0_int64x1_t, 0);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "496a057fc7307ce51a3fcf473e95d696c6d225b7", "filename": "gcc/testsuite/gcc.target/arm/neon/vget_laneu64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvget_laneu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvget_laneu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvget_laneu64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -16,5 +16,4 @@ void test_vget_laneu64 (void)\n   out_uint64_t = vget_lane_u64 (arg0_uint64x1_t, 0);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[dD\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "35936cbd43a1747edaacecf6a17b2c8095332061", "filename": "gcc/testsuite/gcc.target/arm/neon/vmovQ_ns64.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_ns64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -16,6 +16,4 @@ void test_vmovQ_ns64 (void)\n   out_int64x2_t = vmovq_n_s64 (arg0_int64_t);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "e373a1218659756985b303304a43f86254edfd35", "filename": "gcc/testsuite/gcc.target/arm/neon/vmovQ_nu64.c", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2FvmovQ_nu64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -16,6 +16,4 @@ void test_vmovQ_nu64 (void)\n   out_uint64x2_t = vmovq_n_u64 (arg0_uint64_t);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "7b011282832bd9e81eb4fd454784a756604cb5d1", "filename": "gcc/testsuite/gcc.target/arm/neon/vmov_ns64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_ns64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_ns64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_ns64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -16,5 +16,4 @@ void test_vmov_ns64 (void)\n   out_int64x1_t = vmov_n_s64 (arg0_int64_t);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "b9613e06ff119e1f5dfc20622ce8992fec402ca9", "filename": "gcc/testsuite/gcc.target/arm/neon/vmov_nu64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvmov_nu64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -16,5 +16,4 @@ void test_vmov_nu64 (void)\n   out_uint64x1_t = vmov_n_u64 (arg0_uint64_t);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "5c5454f98074066ad8603394b1d7305393642edd", "filename": "gcc/testsuite/gcc.target/arm/neon/vset_lanes64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvset_lanes64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvset_lanes64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvset_lanes64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -17,5 +17,4 @@ void test_vset_lanes64 (void)\n   out_int64x1_t = vset_lane_s64 (arg0_int64_t, arg1_int64x1_t, 0);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}, {"sha": "3bff5d232c72140bffa3acc5db7b21a58618c44c", "filename": "gcc/testsuite/gcc.target/arm/neon/vset_laneu64.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvset_laneu64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvset_laneu64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Fneon%2Fvset_laneu64.c?ref=a277dd9b1a0884ad5161e5dc0f432bbcd949e8cf", "patch": "@@ -17,5 +17,4 @@ void test_vset_laneu64 (void)\n   out_uint64x1_t = vset_lane_u64 (arg0_uint64_t, arg1_uint64x1_t, 0);\n }\n \n-/* { dg-final { scan-assembler \"vmov\\[ \t\\]+\\[dD\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+, \\[rR\\]\\[0-9\\]+!?\\(\\[ \t\\]+@\\[a-zA-Z0-9 \\]+\\)?\\n\" } } */\n /* { dg-final { cleanup-saved-temps } } */"}]}