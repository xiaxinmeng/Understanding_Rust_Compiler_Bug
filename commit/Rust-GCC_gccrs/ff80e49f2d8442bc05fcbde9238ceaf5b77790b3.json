{"sha": "ff80e49f2d8442bc05fcbde9238ceaf5b77790b3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmY4MGU0OWYyZDg0NDJiYzA1ZmNiZGU5MjM4Y2VhZjViNzc3OTBiMw==", "commit": {"author": {"name": "Joseph Myers", "email": "jsm@polyomino.org.uk", "date": "2004-09-24T00:08:37Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2004-09-24T00:08:37Z"}, "message": "re PR c/6980 (-Wbad-function-cast gives bogus warning for (double) rand())\n\n\tPR c/6980\n\t* c-typeck.c (build_c_cast): Improve wording of\n\t-Wbad-function-cast diagnostic.\n\ntestsuite:\n\t* gcc.dg/Wbad-function-cast-1.c: New test.\n\nFrom-SVN: r87991", "tree": {"sha": "e9fe71e9b3dd13025618bfa5b1e1a256b7bf1ed5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e9fe71e9b3dd13025618bfa5b1e1a256b7bf1ed5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ff80e49f2d8442bc05fcbde9238ceaf5b77790b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff80e49f2d8442bc05fcbde9238ceaf5b77790b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ff80e49f2d8442bc05fcbde9238ceaf5b77790b3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ff80e49f2d8442bc05fcbde9238ceaf5b77790b3/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "847450b41d77461a88cde1fb4dffd5bde6f50c39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/847450b41d77461a88cde1fb4dffd5bde6f50c39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/847450b41d77461a88cde1fb4dffd5bde6f50c39"}], "stats": {"total": 65, "additions": 64, "deletions": 1}, "files": [{"sha": "adc8e9a03160ea4bafcdb15011a2beb0d9cb6348", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff80e49f2d8442bc05fcbde9238ceaf5b77790b3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff80e49f2d8442bc05fcbde9238ceaf5b77790b3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ff80e49f2d8442bc05fcbde9238ceaf5b77790b3", "patch": "@@ -1,3 +1,9 @@\n+2004-09-24  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/6980\n+\t* c-typeck.c (build_c_cast): Improve wording of\n+\t-Wbad-function-cast diagnostic.\n+\n 2004-09-23  Hans-Peter Nilsson  <hp@axis.com>\n \n \tPR target/17626"}, {"sha": "4c33c63122ec75437caa52ce52cf0ec69419231e", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff80e49f2d8442bc05fcbde9238ceaf5b77790b3/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff80e49f2d8442bc05fcbde9238ceaf5b77790b3/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ff80e49f2d8442bc05fcbde9238ceaf5b77790b3", "patch": "@@ -3138,7 +3138,8 @@ build_c_cast (tree type, tree expr)\n       if (warn_bad_function_cast\n \t  && TREE_CODE (value) == CALL_EXPR\n \t  && TREE_CODE (type) != TREE_CODE (otype))\n-\twarning (\"cast does not match function type\");\n+\twarning (\"cast from function call of type %qT to non-matching \"\n+\t\t \"type %qT\", otype, type);\n \n       if (TREE_CODE (type) == POINTER_TYPE\n \t  && TREE_CODE (otype) == INTEGER_TYPE"}, {"sha": "b687ac245aa0352d68d1388e437e9b964702888b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff80e49f2d8442bc05fcbde9238ceaf5b77790b3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff80e49f2d8442bc05fcbde9238ceaf5b77790b3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ff80e49f2d8442bc05fcbde9238ceaf5b77790b3", "patch": "@@ -1,3 +1,8 @@\n+2004-09-24  Joseph S. Myers  <jsm@polyomino.org.uk>\n+\n+\tPR c/6980\n+\t* gcc.dg/Wbad-function-cast-1.c: New test.\n+\n 2004-09-23  Zack Weinberg  <zack@codesourcery.com>\n \n \t* g++.dg/ext/complit1.C"}, {"sha": "4a0547f0b529998f36a45411127d69fe04c6d162", "filename": "gcc/testsuite/gcc.dg/Wbad-function-cast-1.c", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ff80e49f2d8442bc05fcbde9238ceaf5b77790b3/gcc%2Ftestsuite%2Fgcc.dg%2FWbad-function-cast-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ff80e49f2d8442bc05fcbde9238ceaf5b77790b3/gcc%2Ftestsuite%2Fgcc.dg%2FWbad-function-cast-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWbad-function-cast-1.c?ref=ff80e49f2d8442bc05fcbde9238ceaf5b77790b3", "patch": "@@ -0,0 +1,51 @@\n+/* Test operation of -Wbad-function-cast.  Bug 6980 complained of the\n+   wording of the diagnostic.  */\n+/* Origin: Joseph Myers <jsm@polyomino.org.uk> */\n+/* { dg-do compile } */\n+/* { dg-options \"-Wbad-function-cast\" } */\n+\n+void vf(void);\n+int if1(void);\n+char if2(void);\n+long if3(void);\n+float rf1(void);\n+double rf2(void);\n+_Complex double cf(void);\n+enum e { E1 } ef(void);\n+_Bool bf(void);\n+char *pf1(void);\n+int *pf2(void);\n+\n+void\n+foo(void)\n+{\n+  /* Casts to void types are always OK.  */\n+  (void)vf();\n+  (void)if1();\n+  (void)cf();\n+  (const void)bf();\n+  /* Casts to the same type or similar types are OK.  */\n+  (int)if1();\n+  (long)if2();\n+  (char)if3();\n+  (float)rf1();\n+  (long double)rf2();\n+  (_Complex float)cf();\n+  (enum f { F1 })ef();\n+  (_Bool)bf();\n+  (void *)pf1();\n+  (char *)pf2();\n+  /* Casts to types with different TREE_CODE (which is how this\n+     warning has been defined) are not OK, except for casts to void\n+     types.  */\n+  (float)if1(); /* { dg-warning \"cast from function call of type 'int' to non-matching type 'float'\" } */\n+  (double)if2(); /* { dg-warning \"cast from function call of type 'char' to non-matching type 'double'\" } */\n+  (_Bool)if3(); /* { dg-warning \"cast from function call of type 'long int' to non-matching type '_Bool'\" } */\n+  (int)rf1(); /* { dg-warning \"cast from function call of type 'float' to non-matching type 'int'\" } */\n+  (long)rf2(); /* { dg-warning \"cast from function call of type 'double' to non-matching type 'long int'\" } */\n+  (double)cf(); /* { dg-warning \"cast from function call of type 'complex double' to non-matching type 'double'\" } */\n+  (int)ef(); /* { dg-warning \"cast from function call of type 'enum e' to non-matching type 'int'\" } */\n+  (int)bf(); /* { dg-warning \"cast from function call of type '_Bool' to non-matching type 'int'\" } */\n+  (__SIZE_TYPE__)pf1(); /* { dg-warning \"cast from function call of type 'char \\\\*' to non-matching type '\\[^\\\\n\\]*'\" } */\n+  (__PTRDIFF_TYPE__)pf2(); /* { dg-warning \"cast from function call of type 'int \\\\*' to non-matching type '\\[^\\\\n\\]*'\" } */\n+}"}]}