{"sha": "ca87c493f78fc19c4196e28cfe137add40bf2932", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2E4N2M0OTNmNzhmYzE5YzQxOTZlMjhjZmUxMzdhZGQ0MGJmMjkzMg==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2015-07-09T09:01:51Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2015-07-09T09:01:51Z"}, "message": "re PR tree-optimization/66718 (Non-invariant ADDR_EXPR not vectorized)\n\n\tPR tree-optimization/66718\n\t* Makefile.in (OBJS): Add gimple-laddress.o. \n\t* passes.def: Schedule pass_laddress.\n\t* timevar.def (DEFTIMEVAR): Add TV_GIMPLE_LADDRESS.\n\t* tree-pass.h (make_pass_laddress): Declare.\n\t* gimple-laddress.c: New file.\n\n\t* gcc.dg/vect/vect-126.c: New test.\n\nFrom-SVN: r225604", "tree": {"sha": "35e0e97002573399f487879b3239c90025aee9fd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35e0e97002573399f487879b3239c90025aee9fd"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca87c493f78fc19c4196e28cfe137add40bf2932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca87c493f78fc19c4196e28cfe137add40bf2932", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca87c493f78fc19c4196e28cfe137add40bf2932", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca87c493f78fc19c4196e28cfe137add40bf2932/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6c909a6a21c2046b41d571f68843334e315ba6a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c909a6a21c2046b41d571f68843334e315ba6a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c909a6a21c2046b41d571f68843334e315ba6a1"}], "stats": {"total": 218, "additions": 218, "deletions": 0}, "files": [{"sha": "a0d835e1efde13bec4b9d1d1b71fe9eac3503645", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca87c493f78fc19c4196e28cfe137add40bf2932", "patch": "@@ -1,3 +1,12 @@\n+2015-07-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR tree-optimization/66718\n+\t* Makefile.in (OBJS): Add gimple-laddress.o. \n+\t* passes.def: Schedule pass_laddress.\n+\t* timevar.def (DEFTIMEVAR): Add TV_GIMPLE_LADDRESS.\n+\t* tree-pass.h (make_pass_laddress): Declare.\n+\t* gimple-laddress.c: New file.\n+\n 2015-07-09  Richard Biener  <rguenther@suse.de>\n \n \t* toplev.c (compile_file): Reset maximum_field_alignment after parsing."}, {"sha": "181702517cc1802e8d874576218a04fa1fec77ba", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=ca87c493f78fc19c4196e28cfe137add40bf2932", "patch": "@@ -1255,6 +1255,7 @@ OBJS = \\\n \tgimple-expr.o \\\n \tgimple-iterator.o \\\n \tgimple-fold.o \\\n+\tgimple-laddress.o \\\n \tgimple-low.o \\\n \tgimple-match.o \\\n \tgeneric-match.o \\"}, {"sha": "c8036b90d1e2dbfb48e26a5033c25bee5008787b", "filename": "gcc/gimple-laddress.c", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2Fgimple-laddress.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2Fgimple-laddress.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-laddress.c?ref=ca87c493f78fc19c4196e28cfe137add40bf2932", "patch": "@@ -0,0 +1,137 @@\n+/* Lower and optimize address expressions.\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+   Contributed by Marek Polacek <polacek@redhat.com>\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+#include \"config.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"alias.h\"\n+#include \"predict.h\"\n+#include \"tm.h\"\n+#include \"function.h\"\n+#include \"dominance.h\"\n+#include \"cfg.h\"\n+#include \"basic-block.h\"\n+#include \"tree-ssa-alias.h\"\n+#include \"symtab.h\"\n+#include \"tree.h\"\n+#include \"stringpool.h\"\n+#include \"tree-ssanames.h\"\n+#include \"fold-const.h\"\n+#include \"gimple-expr.h\"\n+#include \"gimple.h\"\n+#include \"gimplify.h\"\n+#include \"gimple-iterator.h\"\n+#include \"gimplify-me.h\"\n+#include \"tree-pass.h\"\n+\n+\n+namespace {\n+\n+const pass_data pass_data_laddress =\n+{\n+  GIMPLE_PASS, /* type */\n+  \"laddress\", /* name */\n+  OPTGROUP_NONE, /* optinfo_flags */\n+  TV_GIMPLE_LADDRESS, /* tv_id */\n+  ( PROP_cfg | PROP_ssa ), /* properties_required */\n+  0, /* properties_provided */\n+  0, /* properties_destroyed */\n+  0, /* todo_flags_start */\n+  0, /* todo_flags_finish */\n+};\n+\n+class pass_laddress : public gimple_opt_pass\n+{\n+public:\n+  pass_laddress (gcc::context *ctxt)\n+    : gimple_opt_pass (pass_data_laddress, ctxt)\n+  {}\n+\n+  /* opt_pass methods: */\n+  opt_pass * clone () { return new pass_laddress (m_ctxt); }\n+  virtual bool gate (function *) { return optimize != 0; }\n+  virtual unsigned int execute (function *);\n+\n+}; // class pass_laddress\n+\n+unsigned int\n+pass_laddress::execute (function *fun)\n+{\n+  basic_block bb;\n+\n+  FOR_EACH_BB_FN (bb, fun)\n+    {\n+      for (gimple_stmt_iterator gsi = gsi_start_bb (bb); !gsi_end_p (gsi);)\n+\t{\n+\t  gimple stmt = gsi_stmt (gsi);\n+\t  if (!is_gimple_assign (stmt)\n+\t      || gimple_assign_rhs_code (stmt) != ADDR_EXPR\n+\t      || is_gimple_invariant_address (gimple_assign_rhs1 (stmt)))\n+\t    {\n+\t      gsi_next (&gsi);\n+\t      continue;\n+\t    }\n+\n+\t  /* Lower ADDR_EXPR assignments:\n+\t       _4 = &b[i_9];\n+\t     into\n+\t       _1 = (sizetype) i_9;\n+\t       _7 = _1 * 4;\n+\t       _4 = &b + _7;\n+\t     This ought to aid the vectorizer and expose CSE opportunities.\n+\t  */\n+\n+\t  tree expr = gimple_assign_rhs1 (stmt);\n+\t  HOST_WIDE_INT bitsize, bitpos;\n+\t  tree base, offset;\n+\t  machine_mode mode;\n+\t  int volatilep = 0, unsignedp = 0;\n+\t  base = get_inner_reference (TREE_OPERAND (expr, 0), &bitsize,\n+\t\t\t\t      &bitpos, &offset, &mode, &unsignedp,\n+\t\t\t\t      &volatilep, false);\n+\t  gcc_assert (base != NULL_TREE && (bitpos % BITS_PER_UNIT) == 0);\n+\t  if (offset != NULL_TREE)\n+\t    {\n+\t      if (bitpos != 0)\n+\t\toffset = size_binop (PLUS_EXPR, offset,\n+\t\t\t\t     size_int (bitpos / BITS_PER_UNIT));\n+\t      offset = force_gimple_operand_gsi (&gsi, offset, true, NULL,\n+\t\t\t\t\t\t true, GSI_SAME_STMT);\n+\t      base = build_fold_addr_expr (base);\n+\t      base = force_gimple_operand_gsi (&gsi, base, true, NULL,\n+\t\t\t\t\t       true, GSI_SAME_STMT);\n+\t      gimple g = gimple_build_assign (gimple_assign_lhs (stmt),\n+\t\t\t\t\t      POINTER_PLUS_EXPR, base, offset);\n+\t      gsi_replace (&gsi, g, false);\n+\t    }\n+\t  gsi_next (&gsi);\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n+} // anon namespace\n+\n+gimple_opt_pass *\n+make_pass_laddress (gcc::context *ctxt)\n+{\n+  return new pass_laddress (ctxt);\n+}"}, {"sha": "5cd07aed8f4d6d7902169dcdfa88384cca37c9a6", "filename": "gcc/passes.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2Fpasses.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2Fpasses.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpasses.def?ref=ca87c493f78fc19c4196e28cfe137add40bf2932", "patch": "@@ -213,6 +213,7 @@ along with GCC; see the file COPYING3.  If not see\n \t form if possible.  */\n       NEXT_PASS (pass_cse_sincos);\n       NEXT_PASS (pass_optimize_bswap);\n+      NEXT_PASS (pass_laddress);\n       NEXT_PASS (pass_split_crit_edges);\n       NEXT_PASS (pass_pre);\n       NEXT_PASS (pass_sink_code);"}, {"sha": "661ccb52de186f80f2dee8076993fc0f71f90a6a", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca87c493f78fc19c4196e28cfe137add40bf2932", "patch": "@@ -1,3 +1,8 @@\n+2015-07-09  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR tree-optimization/66718\n+\t* gcc.dg/vect/vect-126.c: New test.\n+\n 2015-07-08  Carlos S\u00e1nchez de La Lama  <csanchezdll@gmail.com>\n \n \t* g++.dg/debug/dwarf2/*.C: generate dwarf-2 debug information"}, {"sha": "f01b95e1920558676b4abeb9c47a4af2c42eb454", "filename": "gcc/testsuite/gcc.dg/vect/vect-126.c", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-126.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-126.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect-126.c?ref=ca87c493f78fc19c4196e28cfe137add40bf2932", "patch": "@@ -0,0 +1,63 @@\n+/* PR tree-optimization/66718 */\n+/* { dg-do compile } */\n+\n+int *a[1024], b[1024];\n+struct S { int u, v, w, x; };\n+struct S c[1024];\n+int d[1024][10];\n+\n+void\n+f0 (void)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    a[i] = &b[0];\n+}\n+\n+void\n+f1 (void)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    {\n+      int *p = &b[0];\n+      a[i] = p + i;\n+    }\n+}\n+\n+void\n+f2 (int *p)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    a[i] = &p[i];\n+}\n+\n+void\n+f3 (void)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    a[i] = &b[i];\n+}\n+\n+void\n+f4 (void)\n+{\n+  int *p = &c[0].v;\n+  for (int i = 0; i < 1024; i++)\n+    a[i] = &p[4 * i];\n+}\n+\n+void\n+f5 (void)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    a[i] = &c[i].v;\n+}\n+\n+void\n+f6 (void)\n+{\n+  for (int i = 0; i < 1024; i++)\n+    for (unsigned int j = 0; j < 10; j++)\n+      a[i] = &d[i][j];\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops in function\" 7 \"vect\" { target { i?86-*-* x86_64-*-* } } } } */"}, {"sha": "aee36e6941d5a1a42e39e1f6ad79999dd4fd388d", "filename": "gcc/timevar.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2Ftimevar.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2Ftimevar.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftimevar.def?ref=ca87c493f78fc19c4196e28cfe137add40bf2932", "patch": "@@ -275,6 +275,7 @@ DEFTIMEVAR (TV_GIMPLE_SLSR           , \"straight-line strength reduction\")\n DEFTIMEVAR (TV_VTABLE_VERIFICATION   , \"vtable verification\")\n DEFTIMEVAR (TV_TREE_UBSAN            , \"tree ubsan\")\n DEFTIMEVAR (TV_INITIALIZE_RTL        , \"initialize rtl\")\n+DEFTIMEVAR (TV_GIMPLE_LADDRESS       , \"address lowering\")\n \n /* Everything else in rest_of_compilation not included above.  */\n DEFTIMEVAR (TV_EARLY_LOCAL\t     , \"early local passes\")"}, {"sha": "c47b22eb2ee2e7aa0ef2e3c6a50378c065cb3e13", "filename": "gcc/tree-pass.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2Ftree-pass.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca87c493f78fc19c4196e28cfe137add40bf2932/gcc%2Ftree-pass.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pass.h?ref=ca87c493f78fc19c4196e28cfe137add40bf2932", "patch": "@@ -393,6 +393,7 @@ extern gimple_opt_pass *make_pass_cd_dce (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_call_cdce (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_merge_phi (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_split_crit_edges (gcc::context *ctxt);\n+extern gimple_opt_pass *make_pass_laddress (gcc::context *ctxt);\n extern gimple_opt_pass *make_pass_pre (gcc::context *ctxt);\n extern unsigned int tail_merge_optimize (unsigned int);\n extern gimple_opt_pass *make_pass_profile (gcc::context *ctxt);"}]}