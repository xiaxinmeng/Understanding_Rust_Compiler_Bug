{"sha": "9a6f71b45c63bbcd47e7dc34b5aeecc3b43c7531", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWE2ZjcxYjQ1YzYzYmJjZDQ3ZTdkYzM0YjVhZWVjYzNiNDNjNzUzMQ==", "commit": {"author": {"name": "Andreas Krebbel", "email": "krebbel1@de.ibm.com", "date": "2007-02-19T14:35:10Z"}, "committer": {"name": "Andreas Krebbel", "email": "krebbel@gcc.gnu.org", "date": "2007-02-19T14:35:10Z"}, "message": "s390.c (s390_call_saved_register_used, [...]): Adjust the way CALL_EXPR arguments are accessed to the new scheme.\n\n2007-02-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n\n\t* config/s390/s390.c (s390_call_saved_register_used,\n\ts390_function_ok_for_sibcall): Adjust the way CALL_EXPR arguments are\n\taccessed to the new scheme.\n\nFrom-SVN: r122129", "tree": {"sha": "d50bb9a6aef59dd091d1f8ffcfd0471187d31c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d50bb9a6aef59dd091d1f8ffcfd0471187d31c1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9a6f71b45c63bbcd47e7dc34b5aeecc3b43c7531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6f71b45c63bbcd47e7dc34b5aeecc3b43c7531", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a6f71b45c63bbcd47e7dc34b5aeecc3b43c7531", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a6f71b45c63bbcd47e7dc34b5aeecc3b43c7531/comments", "author": null, "committer": null, "parents": [{"sha": "991c42ace3e11a0685b2ff65a4d33a0d88ede2cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/991c42ace3e11a0685b2ff65a4d33a0d88ede2cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/991c42ace3e11a0685b2ff65a4d33a0d88ede2cc"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "b5c4a676d792ca0359cc5e3d5ee02ebeadf158f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6f71b45c63bbcd47e7dc34b5aeecc3b43c7531/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6f71b45c63bbcd47e7dc34b5aeecc3b43c7531/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9a6f71b45c63bbcd47e7dc34b5aeecc3b43c7531", "patch": "@@ -1,3 +1,9 @@\n+2007-02-19  Andreas Krebbel  <krebbel1@de.ibm.com>\n+\n+\t* config/s390/s390.c (s390_call_saved_register_used,\n+\ts390_function_ok_for_sibcall): Adjust the way CALL_EXPR arguments are\n+\taccessed to the new scheme.\n+\n 2007-02-19  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* config/cris/cris.c (cris_movem_load_rest_p, cris_store_multiple_op_p)"}, {"sha": "ad73869888c3ff50a1c110ebc4356f32af78c4ff", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9a6f71b45c63bbcd47e7dc34b5aeecc3b43c7531/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9a6f71b45c63bbcd47e7dc34b5aeecc3b43c7531/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9a6f71b45c63bbcd47e7dc34b5aeecc3b43c7531", "patch": "@@ -8703,28 +8703,26 @@ s390_valid_pointer_mode (enum machine_mode mode)\n   return (mode == SImode || (TARGET_64BIT && mode == DImode));\n }\n \n-/* Checks whether the given ARGUMENT_LIST would use a caller\n+/* Checks whether the given CALL_EXPR would use a caller\n    saved register.  This is used to decide whether sibling call\n    optimization could be performed on the respective function\n    call.  */\n \n static bool\n-s390_call_saved_register_used (tree argument_list)\n+s390_call_saved_register_used (tree call_expr)\n {\n   CUMULATIVE_ARGS cum;\n   tree parameter;\n   enum machine_mode mode;\n   tree type;\n   rtx parm_rtx;\n-  int reg;\n+  int reg, i;\n \n   INIT_CUMULATIVE_ARGS (cum, NULL, NULL, 0, 0);\n \n-  while (argument_list)\n+  for (i = 0; i < call_expr_nargs (call_expr); i++)\n     {\n-      parameter = TREE_VALUE (argument_list);\n-      argument_list = TREE_CHAIN (argument_list);\n-\n+      parameter = CALL_EXPR_ARG (call_expr, i);\n       gcc_assert (parameter);\n \n       /* For an undeclared variable passed as parameter we will get\n@@ -8780,11 +8778,7 @@ s390_function_ok_for_sibcall (tree decl, tree exp)\n   /* Register 6 on s390 is available as an argument register but unfortunately\n      \"caller saved\". This makes functions needing this register for arguments\n      not suitable for sibcalls.  */\n-  if (TREE_OPERAND (exp, 1)\n-      && s390_call_saved_register_used (TREE_OPERAND (exp, 1)))\n-      return false;\n-\n-  return true;\n+  return !s390_call_saved_register_used (exp);\n }\n \n /* Return the fixed registers used for condition codes.  */"}]}