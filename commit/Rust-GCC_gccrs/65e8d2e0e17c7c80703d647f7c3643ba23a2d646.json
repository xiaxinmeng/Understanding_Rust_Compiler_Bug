{"sha": "65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjVlOGQyZTBlMTdjN2M4MDcwM2Q2NDdmN2MzNjQzYmEyM2EyZDY0Ng==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@libertysurf.fr", "date": "2004-03-16T18:38:32Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2004-03-16T18:38:32Z"}, "message": "union-by-value-1_main.c, [...]: New files.\n\n\t* gcc.dg/compat/union-by-value-1_main.c,\n\tunion-by-value-1_x.c, union-by-value-1_y.c,\n\tunion-check.h, union-defs.h,\n\tunion-init.h, union-return-1_main.c,\n\tunion-return-1_x.c, union-return-1_y.c: New files.\n\nFrom-SVN: r79539", "tree": {"sha": "126bb86371e3f22d0dcd50451896d7cad5f732f5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/126bb86371e3f22d0dcd50451896d7cad5f732f5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/comments", "author": {"login": "ebotcazou", "id": 48091907, "node_id": "MDQ6VXNlcjQ4MDkxOTA3", "avatar_url": "https://avatars.githubusercontent.com/u/48091907?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ebotcazou", "html_url": "https://github.com/ebotcazou", "followers_url": "https://api.github.com/users/ebotcazou/followers", "following_url": "https://api.github.com/users/ebotcazou/following{/other_user}", "gists_url": "https://api.github.com/users/ebotcazou/gists{/gist_id}", "starred_url": "https://api.github.com/users/ebotcazou/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ebotcazou/subscriptions", "organizations_url": "https://api.github.com/users/ebotcazou/orgs", "repos_url": "https://api.github.com/users/ebotcazou/repos", "events_url": "https://api.github.com/users/ebotcazou/events{/privacy}", "received_events_url": "https://api.github.com/users/ebotcazou/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f7adc0c6b74b589e669fce0ad2f43fe2228de32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f7adc0c6b74b589e669fce0ad2f43fe2228de32"}], "stats": {"total": 584, "additions": 584, "deletions": 0}, "files": [{"sha": "a7d2d49c85e962e54966b83b602ac89d5e7e9d8d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "patch": "@@ -1,3 +1,11 @@\n+2004-03-16  Eric Botcazou  <ebotcazou@libertysurf.fr>\n+\n+\t* gcc.dg/compat/union-by-value-1_main.c,\n+\tunion-by-value-1_x.c, union-by-value-1_y.c,\n+\tunion-check.h, union-defs.h,\n+\tunion-init.h, union-return-1_main.c,\n+\tunion-return-1_x.c, union-return-1_y.c: New files.\n+\n 2004-03-16  Eric Botcazou  <ebotcazou@libertysurf.fr>\n \n \t* gcc.dg/compat/mixed-struct-check.h, mixed-struct-defs.h,"}, {"sha": "cd9065920f634d42b74b06030f257ea784d67879", "filename": "gcc/testsuite/gcc.dg/compat/union-by-value-1_main.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-by-value-1_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-by-value-1_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-by-value-1_main.c?ref=65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "patch": "@@ -0,0 +1,13 @@\n+/* Test function argument passing.  This was written when correcting\n+   a deviation from the ABI on SPARC64 between 3.3 and 3.4.  */\n+\n+extern void union_by_value_1_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  union_by_value_1_x ();\n+  exit (0);\n+}"}, {"sha": "a3efd4ed7d840f65f137c26f9fce119de915090a", "filename": "gcc/testsuite/gcc.dg/compat/union-by-value-1_x.c", "status": "added", "additions": 180, "deletions": 0, "changes": 180, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-by-value-1_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-by-value-1_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-by-value-1_x.c?ref=65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "patch": "@@ -0,0 +1,180 @@\n+#include \"compat-common.h\"\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+TYPE g1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE;\t\t\\\n+TYPE g5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE;\t\t\\\n+TYPE g9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE;\t\t\\\n+TYPE g13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##TYPE (TYPE *p, int i);\t\t\t\\\n+extern void checkg##TYPE (void);\t\t\t\t\\\n+extern void\t\t\t\t\t\t\t\\\n+test##TYPE (TYPE s1, TYPE s2, TYPE s3, TYPE s4,\t\t\t\\\n+\t    TYPE s5, TYPE s6, TYPE s7, TYPE s8,\t\t\t\\\n+\t    TYPE s9, TYPE s10, TYPE s11, TYPE s12,\t\t\\\n+\t    TYPE s13, TYPE s14, TYPE s15, TYPE s16);\t\t\\\n+extern void testva##TYPE (int n, ...);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test2_##TYPE (TYPE s1, TYPE s2, TYPE s3, TYPE s4,\t\t\\\n+\t      TYPE s5, TYPE s6, TYPE s7, TYPE s8)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  test##TYPE (s1, g2s##TYPE, s2, g4s##TYPE,\t\t\t\\\n+\t      s3, g6s##TYPE, s4, g8s##TYPE,\t\t\t\\\n+\t      s5, g10s##TYPE, s6, g12s##TYPE,\t\t\t\\\n+\t      s7, g14s##TYPE, s8, g16s##TYPE);\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testit##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" init: \");\t\t\t\t\t\\\n+  init##TYPE  ( &g1s##TYPE,  1);\t\t\t\t\\\n+  init##TYPE  ( &g2s##TYPE,  2);\t\t\t\t\\\n+  init##TYPE  ( &g3s##TYPE,  3);\t\t\t\t\\\n+  init##TYPE  ( &g4s##TYPE,  4);\t\t\t\t\\\n+  init##TYPE  ( &g5s##TYPE,  5);\t\t\t\t\\\n+  init##TYPE  ( &g6s##TYPE,  6);\t\t\t\t\\\n+  init##TYPE  ( &g7s##TYPE,  7);\t\t\t\t\\\n+  init##TYPE  ( &g8s##TYPE,  8);\t\t\t\t\\\n+  init##TYPE  ( &g9s##TYPE,  9);\t\t\t\t\\\n+  init##TYPE  (&g10s##TYPE, 10);\t\t\t\t\\\n+  init##TYPE  (&g11s##TYPE, 11);\t\t\t\t\\\n+  init##TYPE  (&g12s##TYPE, 12);\t\t\t\t\\\n+  init##TYPE  (&g13s##TYPE, 13);\t\t\t\t\\\n+  init##TYPE  (&g14s##TYPE, 14);\t\t\t\t\\\n+  init##TYPE  (&g15s##TYPE, 15);\t\t\t\t\\\n+  init##TYPE  (&g16s##TYPE, 16);\t\t\t\t\\\n+  checkg##TYPE ();\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test: \");\t\t\t\t\t\\\n+  test##TYPE (g1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t      g5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t      g9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t      g13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" testva:\");\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (1,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (2,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (3,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (4,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (5,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (6,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (7,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (8,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (9,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (10,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE);\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (11,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (12,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (13,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (14,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE, g14s##TYPE);\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (15,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE, g14s##TYPE, g15s##TYPE);\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  testva##TYPE (16,\t\t\t\t\t\t\\\n+\t\tg1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE,\t\\\n+\t\tg5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE,\t\\\n+\t\tg9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE,\t\\\n+\t\tg13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE); \\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test2:\");\t\t\t\t\t\\\n+  test2_##TYPE (g1s##TYPE, g3s##TYPE, g5s##TYPE, g7s##TYPE,\t\\\n+\t\tg9s##TYPE, g11s##TYPE, g13s##TYPE, g15s##TYPE);\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+#include \"union-defs.h\"\n+#include \"union-check.h\"\n+\n+T(Ucs)\n+T(Uci)\n+T(Ucl)\n+T(Ucll)\n+T(Usi)\n+T(Usl)\n+T(Usll)\n+T(Uil)\n+T(Uill)\n+T(Ulll)\n+\n+#undef T\n+\n+void\n+union_by_value_1_x ()\n+{\n+DEBUG_INIT\n+\n+#define T(TYPE) testit##TYPE ();\n+\n+T(Ucs)\n+T(Uci)\n+T(Ucl)\n+T(Ucll)\n+T(Usi)\n+T(Usl)\n+T(Usll)\n+T(Uil)\n+T(Uill)\n+T(Ulll)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "b17613e99526137faa52e2d4b92c939113f84e5f", "filename": "gcc/testsuite/gcc.dg/compat/union-by-value-1_y.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-by-value-1_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-by-value-1_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-by-value-1_y.c?ref=65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "patch": "@@ -0,0 +1,92 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+#ifdef SKIP_VA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#include \"union-defs.h\"\n+#include \"union-init.h\"\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+extern void check##TYPE (TYPE x, int i);\t\t\t\\\n+extern TYPE g1s##TYPE, g2s##TYPE, g3s##TYPE, g4s##TYPE;\t\t\\\n+extern TYPE g5s##TYPE, g6s##TYPE, g7s##TYPE, g8s##TYPE;\t\t\\\n+extern TYPE g9s##TYPE, g10s##TYPE, g11s##TYPE, g12s##TYPE;\t\\\n+extern TYPE g13s##TYPE, g14s##TYPE, g15s##TYPE, g16s##TYPE;\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkg##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##TYPE (  g1s##TYPE,  1);\t\t\t\t\\\n+  check##TYPE (  g2s##TYPE,  2);\t\t\t\t\\\n+  check##TYPE (  g3s##TYPE,  3);\t\t\t\t\\\n+  check##TYPE (  g4s##TYPE,  4);\t\t\t\t\\\n+  check##TYPE (  g5s##TYPE,  5);\t\t\t\t\\\n+  check##TYPE (  g6s##TYPE,  6);\t\t\t\t\\\n+  check##TYPE (  g7s##TYPE,  7);\t\t\t\t\\\n+  check##TYPE (  g8s##TYPE,  8);\t\t\t\t\\\n+  check##TYPE (  g9s##TYPE,  9);\t\t\t\t\\\n+  check##TYPE ( g10s##TYPE, 10);\t\t\t\t\\\n+  check##TYPE ( g11s##TYPE, 11);\t\t\t\t\\\n+  check##TYPE ( g12s##TYPE, 12);\t\t\t\t\\\n+  check##TYPE ( g13s##TYPE, 13);\t\t\t\t\\\n+  check##TYPE ( g14s##TYPE, 14);\t\t\t\t\\\n+  check##TYPE ( g15s##TYPE, 15);\t\t\t\t\\\n+  check##TYPE ( g16s##TYPE, 16);\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+test##TYPE (TYPE s1, TYPE s2, TYPE s3, TYPE s4,\t\t\t\\\n+\t    TYPE s5, TYPE s6, TYPE s7, TYPE s8,\t\t\t\\\n+\t    TYPE s9, TYPE s10, TYPE s11, TYPE s12,\t\t\\\n+\t    TYPE s13, TYPE s14, TYPE s15, TYPE s16)\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##TYPE (s1, 1);\t\t\t\t\t\t\\\n+  check##TYPE (s2, 2);\t\t\t\t\t\t\\\n+  check##TYPE (s3, 3);\t\t\t\t\t\t\\\n+  check##TYPE (s4, 4);\t\t\t\t\t\t\\\n+  check##TYPE (s5, 5);\t\t\t\t\t\t\\\n+  check##TYPE (s6, 6);\t\t\t\t\t\t\\\n+  check##TYPE (s7, 7);\t\t\t\t\t\t\\\n+  check##TYPE (s8, 8);\t\t\t\t\t\t\\\n+  check##TYPE (s9, 9);\t\t\t\t\t\t\\\n+  check##TYPE (s10, 10);\t\t\t\t\t\\\n+  check##TYPE (s11, 11);\t\t\t\t\t\\\n+  check##TYPE (s12, 12);\t\t\t\t\t\\\n+  check##TYPE (s13, 13);\t\t\t\t\t\\\n+  check##TYPE (s14, 14);\t\t\t\t\t\\\n+  check##TYPE (s15, 15);\t\t\t\t\t\\\n+  check##TYPE (s16, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testva##TYPE (int n, ...)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\\\n+  if (test_va)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      va_start (ap, n);\t\t\t\t\t\t\\\n+      for (i = 0; i < n; i++)\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  TYPE t = va_arg (ap, TYPE);\t\t\t\t\\\n+\t  check##TYPE (t, i+1);\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      va_end (ap);\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+}\n+\n+T(Ucs)\n+T(Uci)\n+T(Ucl)\n+T(Ucll)\n+T(Usi)\n+T(Usl)\n+T(Usll)\n+T(Uil)\n+T(Uill)\n+T(Ulll)"}, {"sha": "b5157814d58225ff30aec615a7d5bbfc81f74777", "filename": "gcc/testsuite/gcc.dg/compat/union-check.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-check.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-check.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-check.h?ref=65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "patch": "@@ -0,0 +1,34 @@\n+/* Function definitions that are used by multiple tests.  */\n+\n+#define CHECK_CHAR(TYPE)\t\t\\\n+  void check##TYPE (TYPE p, int i)\t\\\n+   { if (p.c != (char)i) DEBUG_CHECK }\n+\n+CHECK_CHAR(Ucs)\n+CHECK_CHAR(Uci)\n+CHECK_CHAR(Ucl)\n+CHECK_CHAR(Ucll)\n+\n+\n+#define CHECK_SHORT(TYPE)\t\t\\\n+  void check##TYPE (TYPE p, int i)\t\\\n+   { if (p.s != (short)i) DEBUG_CHECK }\n+\n+CHECK_SHORT(Usi)\n+CHECK_SHORT(Usl)\n+CHECK_SHORT(Usll)\n+\n+\n+#define CHECK_INT(TYPE)\t\t\t\\\n+  void check##TYPE (TYPE p, int i)\t\\\n+   { if (p.i != i) DEBUG_CHECK }\n+\n+CHECK_INT(Uil)\n+CHECK_INT(Uill)\n+\n+\n+#define CHECK_LONG(TYPE)\t\t\\\n+  void check##TYPE (TYPE p, int i)\t\\\n+   { if (p.l != (long)i) DEBUG_CHECK }\n+\n+CHECK_LONG(Ulll)"}, {"sha": "887cd6da8e86512916440e9e8afc5fb0a59e4364", "filename": "gcc/testsuite/gcc.dg/compat/union-defs.h", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-defs.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-defs.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-defs.h?ref=65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "patch": "@@ -0,0 +1,15 @@\n+/* Type definitions that are used by multiple tests.  */\n+\n+typedef union { char c; short s; } Ucs;\n+typedef union { char c; int i; } Uci;\n+typedef union { char c; long l; } Ucl;\n+typedef union { char c; long long ll; } Ucll;\n+\n+typedef union { short s; int i; } Usi;\n+typedef union { short s; long l; } Usl;\n+typedef union { short s; long long ll; } Usll;\n+\n+typedef union { int i; long l; } Uil;\n+typedef union { int i; long long ll; } Uill;\n+\n+typedef union { long l; long long ll; } Ulll;"}, {"sha": "5add7b4a8001f74070c3e9cc234e0d109c6b0ef9", "filename": "gcc/testsuite/gcc.dg/compat/union-init.h", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-init.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-init.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-init.h?ref=65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "patch": "@@ -0,0 +1,34 @@\n+/* Function definitions that are used by multiple tests.  */\n+\n+#define INIT_CHAR(TYPE)\t\t\t\\\n+  void init##TYPE (TYPE *p, int i)\t\\\n+   { p->c = (char)i; }\n+\n+INIT_CHAR(Ucs)\n+INIT_CHAR(Uci)\n+INIT_CHAR(Ucl)\n+INIT_CHAR(Ucll)\n+\n+\n+#define INIT_SHORT(TYPE)\t\t\\\n+  void init##TYPE (TYPE *p, int i)\t\\\n+   { p->s = (short)i; }\n+\n+INIT_SHORT(Usi)\n+INIT_SHORT(Usl)\n+INIT_SHORT(Usll)\n+\n+\n+#define INIT_INT(TYPE)\t\t\t\\\n+  void init##TYPE (TYPE *p, int i)\t\\\n+   { p->i = i; }\n+\n+INIT_INT(Uil)\n+INIT_INT(Uill)\n+\n+\n+#define INIT_LONG(TYPE)\t\t\t\\\n+  void init##TYPE (TYPE *p, int i)\t\\\n+   { p->l = (long)i; }\n+\n+INIT_LONG(Ulll)"}, {"sha": "edf15166b957d639c2ff824dec462d8ae2c73d3d", "filename": "gcc/testsuite/gcc.dg/compat/union-return-1_main.c", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-return-1_main.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-return-1_main.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-return-1_main.c?ref=65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "patch": "@@ -0,0 +1,13 @@\n+/* Test function return values.  This was written when correcting\n+   a deviation from the ABI on SPARC64 between 3.3 and 3.4.  */\n+\n+extern void union_return_1_x (void);\n+extern void exit (int);\n+int fails;\n+\n+int\n+main ()\n+{\n+  union_return_1_x ();\n+  exit (0);\n+}"}, {"sha": "761f000aa11e4670046c1cd1bf61bcd96ecfdf57", "filename": "gcc/testsuite/gcc.dg/compat/union-return-1_x.c", "status": "added", "additions": 124, "deletions": 0, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-return-1_x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-return-1_x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-return-1_x.c?ref=65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "patch": "@@ -0,0 +1,124 @@\n+#include \"compat-common.h\"\n+\n+#ifdef SKIP_VA\n+const int test_va = 0;\n+#else\n+const int test_va = 1;\n+#endif\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+TYPE g01##TYPE, g02##TYPE, g03##TYPE, g04##TYPE;\t\t\\\n+TYPE g05##TYPE, g06##TYPE, g07##TYPE, g08##TYPE;\t\t\\\n+TYPE g09##TYPE, g10##TYPE, g11##TYPE, g12##TYPE;\t\t\\\n+TYPE g13##TYPE, g14##TYPE, g15##TYPE, g16##TYPE;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void init##TYPE (TYPE *p, int i);\t\t\t\\\n+extern void checkg##TYPE (void);\t\t\t\t\\\n+extern TYPE test0##TYPE (void);\t\t\t\t\t\\\n+extern TYPE test1##TYPE (TYPE);\t\t\t\t\t\\\n+extern TYPE testva##TYPE (int n, ...);\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+testit##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  TYPE rslt;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" init: \");\t\t\t\t\t\\\n+  init##TYPE  (&g01##TYPE,  1);\t\t\t\t\t\\\n+  init##TYPE  (&g02##TYPE,  2);\t\t\t\t\t\\\n+  init##TYPE  (&g03##TYPE,  3);\t\t\t\t\t\\\n+  init##TYPE  (&g04##TYPE,  4);\t\t\t\t\t\\\n+  init##TYPE  (&g05##TYPE,  5);\t\t\t\t\t\\\n+  init##TYPE  (&g06##TYPE,  6);\t\t\t\t\t\\\n+  init##TYPE  (&g07##TYPE,  7);\t\t\t\t\t\\\n+  init##TYPE  (&g08##TYPE,  8);\t\t\t\t\t\\\n+  init##TYPE  (&g09##TYPE,  9);\t\t\t\t\t\\\n+  init##TYPE  (&g10##TYPE, 10);\t\t\t\t\t\\\n+  init##TYPE  (&g11##TYPE, 11);\t\t\t\t\t\\\n+  init##TYPE  (&g12##TYPE, 12);\t\t\t\t\t\\\n+  init##TYPE  (&g13##TYPE, 13);\t\t\t\t\t\\\n+  init##TYPE  (&g14##TYPE, 14);\t\t\t\t\t\\\n+  init##TYPE  (&g15##TYPE, 15);\t\t\t\t\t\\\n+  init##TYPE  (&g16##TYPE, 16);\t\t\t\t\t\\\n+  checkg##TYPE ();\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test0: \");\t\t\t\t\t\\\n+  rslt = test0##TYPE ();\t\t\t\t\t\\\n+  check##TYPE (rslt, 1);\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (#TYPE);\t\t\t\t\t\t\\\n+  DEBUG_FPUTS (\" test1: \");\t\t\t\t\t\\\n+  rslt = test1##TYPE (g01##TYPE);\t\t\t\t\\\n+  check##TYPE (rslt, 1);\t\t\t\t\t\\\n+  if (test_va)\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      DEBUG_NL;\t\t\t\t\t\t\t\\\n+      DEBUG_FPUTS (#TYPE);\t\t\t\t\t\\\n+      DEBUG_FPUTS (\" testva: \");\t\t\t\t\\\n+      rslt = testva##TYPE (1, g01##TYPE);\t\t\t\\\n+      check##TYPE (rslt, 1);\t\t\t\t\t\\\n+      rslt = testva##TYPE (5, g01##TYPE, g02##TYPE,\t\t\\\n+\t\t\t   g03##TYPE, g04##TYPE,\t\t\\\n+\t\t\t   g05##TYPE);\t\t\t\t\\\n+      check##TYPE (rslt, 5);\t\t\t\t\t\\\n+      rslt = testva##TYPE (9, g01##TYPE, g02##TYPE,\t\t\\\n+\t\t\t   g03##TYPE, g04##TYPE,\t\t\\\n+\t\t\t   g05##TYPE, g06##TYPE,\t\t\\\n+\t\t\t   g07##TYPE, g08##TYPE,\t\t\\\n+\t\t\t   g09##TYPE);\t\t\t\t\\\n+      check##TYPE (rslt, 9);\t\t\t\t\t\\\n+      rslt = testva##TYPE (16, g01##TYPE, g02##TYPE,\t\t\\\n+\t\t\t   g03##TYPE, g04##TYPE,\t\t\\\n+\t\t\t   g05##TYPE, g06##TYPE,\t\t\\\n+\t\t\t   g07##TYPE, g08##TYPE,\t\t\\\n+\t\t\t   g09##TYPE, g10##TYPE,\t\t\\\n+\t\t\t   g11##TYPE, g12##TYPE,\t\t\\\n+\t\t\t   g13##TYPE, g14##TYPE,\t\t\\\n+\t\t\t   g15##TYPE, g16##TYPE);\t\t\\\n+      check##TYPE (rslt, 16);\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  DEBUG_NL;\t\t\t\t\t\t\t\\\n+}\n+\n+#include \"union-defs.h\"\n+#include \"union-check.h\"\n+\n+T(Ucs)\n+T(Uci)\n+T(Ucl)\n+T(Ucll)\n+T(Usi)\n+T(Usl)\n+T(Usll)\n+T(Uil)\n+T(Uill)\n+T(Ulll)\n+\n+#undef T\n+\n+void\n+union_return_1_x ()\n+{\n+DEBUG_INIT\n+\n+#define T(TYPE) testit##TYPE ();\n+\n+T(Ucs)\n+T(Uci)\n+T(Ucl)\n+T(Ucll)\n+T(Usi)\n+T(Usl)\n+T(Usll)\n+T(Uil)\n+T(Uill)\n+T(Ulll)\n+\n+DEBUG_FINI\n+\n+if (fails != 0)\n+  abort ();\n+\n+#undef T\n+}"}, {"sha": "9eaa9777e0a3ef13741fdb3ec546e4f04e01beed", "filename": "gcc/testsuite/gcc.dg/compat/union-return-1_y.c", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-return-1_y.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/65e8d2e0e17c7c80703d647f7c3643ba23a2d646/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-return-1_y.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcompat%2Funion-return-1_y.c?ref=65e8d2e0e17c7c80703d647f7c3643ba23a2d646", "patch": "@@ -0,0 +1,71 @@\n+#include <stdarg.h>\n+\n+#include \"compat-common.h\"\n+\n+#include \"union-defs.h\"\n+#include \"union-init.h\"\n+\n+#define T(TYPE)\t\t\t\t\t\t\t\\\n+extern TYPE g01##TYPE, g02##TYPE, g03##TYPE, g04##TYPE;\t\t\\\n+extern TYPE g05##TYPE, g06##TYPE, g07##TYPE, g08##TYPE;\t\t\\\n+extern TYPE g09##TYPE, g10##TYPE, g11##TYPE, g12##TYPE;\t\t\\\n+extern TYPE g13##TYPE, g14##TYPE, g15##TYPE, g16##TYPE;\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+extern void check##TYPE (TYPE x, int i);\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+void\t\t\t\t\t\t\t\t\\\n+checkg##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  check##TYPE (g01##TYPE,  1);\t\t\t\t\t\\\n+  check##TYPE (g02##TYPE,  2);\t\t\t\t\t\\\n+  check##TYPE (g03##TYPE,  3);\t\t\t\t\t\\\n+  check##TYPE (g04##TYPE,  4);\t\t\t\t\t\\\n+  check##TYPE (g05##TYPE,  5);\t\t\t\t\t\\\n+  check##TYPE (g06##TYPE,  6);\t\t\t\t\t\\\n+  check##TYPE (g07##TYPE,  7);\t\t\t\t\t\\\n+  check##TYPE (g08##TYPE,  8);\t\t\t\t\t\\\n+  check##TYPE (g09##TYPE,  9);\t\t\t\t\t\\\n+  check##TYPE (g10##TYPE, 10);\t\t\t\t\t\\\n+  check##TYPE (g11##TYPE, 11);\t\t\t\t\t\\\n+  check##TYPE (g12##TYPE, 12);\t\t\t\t\t\\\n+  check##TYPE (g13##TYPE, 13);\t\t\t\t\t\\\n+  check##TYPE (g14##TYPE, 14);\t\t\t\t\t\\\n+  check##TYPE (g15##TYPE, 15);\t\t\t\t\t\\\n+  check##TYPE (g16##TYPE, 16);\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+test0##TYPE (void)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return g01##TYPE;\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+test1##TYPE (TYPE x01)\t\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  return x01;\t\t\t\t\t\t\t\\\n+}\t\t\t\t\t\t\t\t\\\n+\t\t\t\t\t\t\t\t\\\n+TYPE\t\t\t\t\t\t\t\t\\\n+testva##TYPE (int n, ...)\t\t\t\t\t\\\n+{\t\t\t\t\t\t\t\t\\\n+  int i;\t\t\t\t\t\t\t\\\n+  TYPE rslt;\t\t\t\t\t\t\t\\\n+  va_list ap;\t\t\t\t\t\t\t\\\n+  va_start (ap, n);\t\t\t\t\t\t\\\n+  for (i = 0; i < n; i++)\t\t\t\t\t\\\n+      rslt = va_arg (ap, TYPE);\t\t\t\t\t\\\n+  va_end (ap);\t\t\t\t\t\t\t\\\n+  return rslt;\t\t\t\t\t\t\t\\\n+}\n+\n+T(Ucs)\n+T(Uci)\n+T(Ucl)\n+T(Ucll)\n+T(Usi)\n+T(Usl)\n+T(Usll)\n+T(Uil)\n+T(Uill)\n+T(Ulll)"}]}