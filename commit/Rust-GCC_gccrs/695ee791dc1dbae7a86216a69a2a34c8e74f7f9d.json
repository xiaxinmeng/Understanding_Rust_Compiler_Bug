{"sha": "695ee791dc1dbae7a86216a69a2a34c8e74f7f9d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Njk1ZWU3OTFkYzFkYmFlN2E4NjIxNmE2OWEyYTM0YzhlNzRmN2Y5ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2001-03-28T03:35:05Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2001-03-28T03:35:05Z"}, "message": "rtl.h (LCT_NORETURN): New.\n\n        * rtl.h (LCT_NORETURN): New.\n        * calls.c (emit_library_call_value_1): Handle it.\n\nFrom-SVN: r40897", "tree": {"sha": "920ea0bd9f76af3237a61a78395386b780e427d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/920ea0bd9f76af3237a61a78395386b780e427d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/695ee791dc1dbae7a86216a69a2a34c8e74f7f9d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/695ee791dc1dbae7a86216a69a2a34c8e74f7f9d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/695ee791dc1dbae7a86216a69a2a34c8e74f7f9d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/695ee791dc1dbae7a86216a69a2a34c8e74f7f9d/comments", "author": null, "committer": null, "parents": [{"sha": "3d74dad834986e7f0c1d06dd29adef3d1a8a5974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3d74dad834986e7f0c1d06dd29adef3d1a8a5974", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3d74dad834986e7f0c1d06dd29adef3d1a8a5974"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "24fdc0514e430b0d15c2562f7e0f8d93666ae934", "filename": "gcc/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/695ee791dc1dbae7a86216a69a2a34c8e74f7f9d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/695ee791dc1dbae7a86216a69a2a34c8e74f7f9d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=695ee791dc1dbae7a86216a69a2a34c8e74f7f9d", "patch": "@@ -3,6 +3,9 @@\n \t* function.c (expand_function_start): Set DECL_REGISTER on\n \ta pseudo used for DECL_RESULT.\n \n+\t* rtl.h (LCT_NORETURN): New.\n+\t* calls.c (emit_library_call_value_1): Handle it.\n+\n 2001-03-27  Stan Shebs  <shebs@apple.com>\n \n \t* objc/objc-act.c (objc_init): Use dump_base_name."}, {"sha": "3162b4654a61495b87f2d86e377f57be0a310ee0", "filename": "gcc/calls.c", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/695ee791dc1dbae7a86216a69a2a34c8e74f7f9d/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/695ee791dc1dbae7a86216a69a2a34c8e74f7f9d/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=695ee791dc1dbae7a86216a69a2a34c8e74f7f9d", "patch": "@@ -3504,6 +3504,7 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n   int flags = 0;\n   int reg_parm_stack_space = 0;\n   int needed;\n+  rtx before_call;\n \n #ifdef REG_PARM_STACK_SPACE\n   /* Define the boundary of the register parm stack space that needs to be\n@@ -3528,6 +3529,8 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n     flags |= ECF_CONST;\n   else if (fn_type == LCT_PURE_MAKE_BLOCK)\n     flags |= ECF_PURE;\n+  else if (fn_type == LCT_NORETURN)\n+    flags |= ECF_NORETURN;\n   fun = orgfun;\n \n   if (libfunc_nothrow (fun))\n@@ -4041,6 +4044,8 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n     abort ();\n #endif\n \n+  before_call = get_last_insn ();\n+\n   /* We pass the old value of inhibit_defer_pop + 1 to emit_call_1, which\n      will set inhibit_defer_pop to that value.  */\n   /* The return type is needed to decide how many bytes the function pops.\n@@ -4058,6 +4063,34 @@ emit_library_call_value_1 (retval, orgfun, value, fn_type, outmode, nargs, p)\n \t       valreg,\n \t       old_inhibit_defer_pop + 1, call_fusage, flags);\n \n+  /* For calls to `setjmp', etc., inform flow.c it should complain\n+     if nonvolatile values are live.  For functions that cannot return,\n+     inform flow that control does not fall through.  */\n+\n+  if (flags & (ECF_RETURNS_TWICE | ECF_NORETURN | ECF_LONGJMP))\n+    {\n+      /* The barrier or NOTE_INSN_SETJMP note must be emitted\n+\t immediately after the CALL_INSN.  Some ports emit more than\n+\t just a CALL_INSN above, so we must search for it here.  */\n+\n+      rtx last = get_last_insn ();\n+      while (GET_CODE (last) != CALL_INSN)\n+\t{\n+\t  last = PREV_INSN (last);\n+\t  /* There was no CALL_INSN?  */\n+\t  if (last == before_call)\n+\t    abort ();\n+\t}\n+\n+      if (flags & ECF_RETURNS_TWICE)\n+\t{\n+\t  emit_note_after (NOTE_INSN_SETJMP, last);\n+\t  current_function_calls_setjmp = 1;\n+\t}\n+      else\n+\temit_barrier_after (last);\n+    }\n+\n   /* Now restore inhibit_defer_pop to its actual original value.  */\n   OK_DEFER_POP;\n "}, {"sha": "a15fda29e55a8c33598a9876f9b7ac0c8d49720f", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/695ee791dc1dbae7a86216a69a2a34c8e74f7f9d/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/695ee791dc1dbae7a86216a69a2a34c8e74f7f9d/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=695ee791dc1dbae7a86216a69a2a34c8e74f7f9d", "patch": "@@ -1972,7 +1972,8 @@ enum libcall_type\n   LCT_CONST = 1,\n   LCT_PURE = 2,\n   LCT_CONST_MAKE_BLOCK = 3,\n-  LCT_PURE_MAKE_BLOCK = 4\n+  LCT_PURE_MAKE_BLOCK = 4,\n+  LCT_NORETURN = 5\n };\n \n extern void emit_library_call\t\tPARAMS ((rtx, enum libcall_type,"}]}