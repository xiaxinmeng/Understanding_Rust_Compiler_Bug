{"sha": "ebfbbdc556443d1ea95923b596f59411256bd9b5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWJmYmJkYzU1NjQ0M2QxZWE5NTkyM2I1OTZmNTk0MTEyNTZiZDliNQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-04-07T20:33:36Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-04-07T20:33:36Z"}, "message": "re PR c/18624 (GCC does not detect local variable set but never used)\n\n\tPR c/18624\n\t* tree.h (DECL_READ_P): Define.\n\t(struct tree_decl_common): Add decl_read_flag.\n\t* c-decl.c (pop_scope): If TREE_USED but !DECL_READ_P, issue\n\ta set but not used warning.\n\t(merge_decls): Merge DECL_READ_P flag.\n\t(finish_decl, build_compound_literal): Set DECL_READ_P flag.\n\t(finish_function): Issue -Wunused-but-set-parameter diagnostics.\n\t* c-common.c (handle_used_attribute, handle_unused_attribute):\n\tLikewise.\n\t* c-tree.h (default_function_array_read_conversion, mark_exp_read):\n\tNew prototypes.\n\t* c-typeck.c (default_function_array_read_conversion, mark_exp_read):\n\tNew functions.\n\t(default_conversion, c_process_expr_stmt): Call mark_exp_read.\n\t* c-parser.c (c_parser_initializer, c_parser_expr_no_commas,\n\tc_parser_binary_expression, c_parser_cast_expression,\n\tc_parser_expr_list, c_parser_omp_atomic, c_parser_omp_for_loop):\n\tCall default_function_array_read_conversion instead of\n\tdefault_function_array_conversion where needed.\n\t(c_parser_unary_expression, c_parser_conditional_expression,\n\tc_parser_postfix_expression_after_primary, c_parser_initelt):\n\tLikewise.  Call mark_exp_read where needed.\n\t(c_parser_statement_after_labels, c_parser_asm_operands,\n\tc_parser_typeof_specifier, c_parser_sizeof_expression,\n\tc_parser_alignof_expression, c_parser_initval): Call mark_exp_read\n\twhere needed.\n\t* common.opt (Wunused-but-set-variable, Wunused-but-set-parameter):\n\tNew.\n\t* toplev.c (warn_unused_but_set_variable): Default to warn_unused.\n\t(warn_unused_but_set_parameter): Default to warn_unused\n\t&& extra_warnings.\n\t* doc/invoke.texi: Document -Wunused-but-set-variable and\n\t-Wunused-but-set-parameter.\n\n\t* objc-act.c (finish_var_decl, objc_begin_catch_clause,\n\treally_start_method, get_super_receiver, handle_class_ref): Set\n\tDECL_READ_P in addition to TREE_USED.\n\n\t* gcc.dg/Wunused-var-1.c: New test.\n\t* gcc.dg/Wunused-var-2.c: New test.\n\t* gcc.dg/Wunused-var-3.c: New test.\n\t* gcc.dg/Wunused-var-4.c: New test.\n\t* gcc.dg/Wunused-var-5.c: New test.\n\t* gcc.dg/Wunused-var-6.c: New test.\n\t* gcc.dg/Wunused-parm-1.c: New test.\n\nFrom-SVN: r158086", "tree": {"sha": "2559870c4c1dbe82ba98485de0b41abd6bed7ca2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2559870c4c1dbe82ba98485de0b41abd6bed7ca2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ebfbbdc556443d1ea95923b596f59411256bd9b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfbbdc556443d1ea95923b596f59411256bd9b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebfbbdc556443d1ea95923b596f59411256bd9b5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebfbbdc556443d1ea95923b596f59411256bd9b5/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0bb8c1342ffedb0d012f007342f802e0fb692e4d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0bb8c1342ffedb0d012f007342f802e0fb692e4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0bb8c1342ffedb0d012f007342f802e0fb692e4d"}], "stats": {"total": 626, "additions": 586, "deletions": 40}, "files": [{"sha": "9db02bcfc60e00f54f17b903ef1204d49ec86597", "filename": "gcc/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -1,5 +1,40 @@\n 2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/18624\n+\t* tree.h (DECL_READ_P): Define.\n+\t(struct tree_decl_common): Add decl_read_flag.\n+\t* c-decl.c (pop_scope): If TREE_USED but !DECL_READ_P, issue\n+\ta set but not used warning.\n+\t(merge_decls): Merge DECL_READ_P flag.\n+\t(finish_decl, build_compound_literal): Set DECL_READ_P flag.\n+\t(finish_function): Issue -Wunused-but-set-parameter diagnostics.\n+\t* c-common.c (handle_used_attribute, handle_unused_attribute):\n+\tLikewise.\n+\t* c-tree.h (default_function_array_read_conversion, mark_exp_read):\n+\tNew prototypes.\n+\t* c-typeck.c (default_function_array_read_conversion, mark_exp_read):\n+\tNew functions.\n+\t(default_conversion, c_process_expr_stmt): Call mark_exp_read.\n+\t* c-parser.c (c_parser_initializer, c_parser_expr_no_commas,\n+\tc_parser_binary_expression, c_parser_cast_expression,\n+\tc_parser_expr_list, c_parser_omp_atomic, c_parser_omp_for_loop):\n+\tCall default_function_array_read_conversion instead of\n+\tdefault_function_array_conversion where needed.\n+\t(c_parser_unary_expression, c_parser_conditional_expression,\n+\tc_parser_postfix_expression_after_primary, c_parser_initelt):\n+\tLikewise.  Call mark_exp_read where needed.\n+\t(c_parser_statement_after_labels, c_parser_asm_operands,\n+\tc_parser_typeof_specifier, c_parser_sizeof_expression,\n+\tc_parser_alignof_expression, c_parser_initval): Call mark_exp_read\n+\twhere needed.\n+\t* common.opt (Wunused-but-set-variable, Wunused-but-set-parameter):\n+\tNew.\n+\t* toplev.c (warn_unused_but_set_variable): Default to warn_unused.\n+\t(warn_unused_but_set_parameter): Default to warn_unused\n+\t&& extra_warnings.\n+\t* doc/invoke.texi: Document -Wunused-but-set-variable and\n+\t-Wunused-but-set-parameter.\n+\n \t* tree-ssa-pre.c (my_rev_post_order_compute): Remove set but not\n \tused count variable.\n \t* genemit.c (gen_expand, gen_split): Avoid set but not used warnings"}, {"sha": "32dc21e93af05c70e1567ff8036c186bc7564317", "filename": "gcc/c-common.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -6121,6 +6121,8 @@ handle_used_attribute (tree *pnode, tree name, tree ARG_UNUSED (args),\n     {\n       TREE_USED (node) = 1;\n       DECL_PRESERVE_P (node) = 1;\n+      if (TREE_CODE (node) == VAR_DECL)\n+\tDECL_READ_P (node) = 1;\n     }\n   else\n     {\n@@ -6147,7 +6149,12 @@ handle_unused_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t  || TREE_CODE (decl) == FUNCTION_DECL\n \t  || TREE_CODE (decl) == LABEL_DECL\n \t  || TREE_CODE (decl) == TYPE_DECL)\n-\tTREE_USED (decl) = 1;\n+\t{\n+\t  TREE_USED (decl) = 1;\n+\t  if (TREE_CODE (decl) == VAR_DECL\n+\t      || TREE_CODE (decl) == PARM_DECL)\n+\t    DECL_READ_P (decl) = 1;\n+\t}\n       else\n \t{\n \t  warning (OPT_Wattributes, \"%qE attribute ignored\", name);"}, {"sha": "bc90fdd38ddf9e9c0f9d89ef339499002e5fb474", "filename": "gcc/c-decl.c", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -1164,14 +1164,21 @@ pop_scope (void)\n \n \tcase VAR_DECL:\n \t  /* Warnings for unused variables.  */\n-\t  if (!TREE_USED (p)\n+\t  if ((!TREE_USED (p) || !DECL_READ_P (p))\n \t      && !TREE_NO_WARNING (p)\n \t      && !DECL_IN_SYSTEM_HEADER (p)\n \t      && DECL_NAME (p)\n \t      && !DECL_ARTIFICIAL (p)\n \t      && scope != file_scope\n \t      && scope != external_scope)\n-\t    warning (OPT_Wunused_variable, \"unused variable %q+D\", p);\n+\t    {\n+\t      if (!TREE_USED (p))\n+\t\twarning (OPT_Wunused_variable, \"unused variable %q+D\", p);\n+\t      else if (DECL_CONTEXT (p) == current_function_decl)\n+\t\twarning_at (DECL_SOURCE_LOCATION (p),\n+\t\t\t    OPT_Wunused_but_set_variable,\n+\t\t\t    \"variable %qD set but not used\", p);\n+\t    }\n \n \t  if (b->inner_comp)\n \t    {\n@@ -2387,6 +2394,8 @@ merge_decls (tree newdecl, tree olddecl, tree newtype, tree oldtype)\n     TREE_USED (newdecl) = 1;\n   else if (TREE_USED (newdecl))\n     TREE_USED (olddecl) = 1;\n+  if (TREE_CODE (olddecl) == VAR_DECL || TREE_CODE (olddecl) == PARM_DECL)\n+    DECL_READ_P (newdecl) |= DECL_READ_P (olddecl);\n   if (DECL_PRESERVE_P (olddecl))\n     DECL_PRESERVE_P (newdecl) = 1;\n   else if (DECL_PRESERVE_P (newdecl))\n@@ -4232,7 +4241,10 @@ finish_decl (tree decl, location_t init_loc, tree init,\n \t}\n \n       if (TREE_USED (type))\n-\tTREE_USED (decl) = 1;\n+\t{\n+\t  TREE_USED (decl) = 1;\n+\t  DECL_READ_P (decl) = 1;\n+\t}\n     }\n \n   /* If this is a function and an assembler name is specified, reset DECL_RTL\n@@ -4380,6 +4392,7 @@ finish_decl (tree decl, location_t init_loc, tree init,\n \t  /* Don't warn about decl unused; the cleanup uses it.  */\n \t  TREE_USED (decl) = 1;\n \t  TREE_USED (cleanup_decl) = 1;\n+\t  DECL_READ_P (decl) = 1;\n \n \t  push_cleanup (decl, cleanup, false);\n \t}\n@@ -4472,6 +4485,7 @@ build_compound_literal (location_t loc, tree type, tree init, bool non_const)\n   TREE_STATIC (decl) = (current_scope == file_scope);\n   DECL_CONTEXT (decl) = current_function_decl;\n   TREE_USED (decl) = 1;\n+  DECL_READ_P (decl) = 1;\n   TREE_TYPE (decl) = type;\n   TREE_READONLY (decl) = TYPE_READONLY (type);\n   store_init_value (loc, decl, init, NULL_TREE);\n@@ -8060,6 +8074,25 @@ finish_function (void)\n       TREE_NO_WARNING (fndecl) = 1;\n     }\n \n+  /* Complain about parameters that are only set, but never otherwise used.  */\n+  if (warn_unused_but_set_parameter)\n+    {\n+      tree decl;\n+\n+      for (decl = DECL_ARGUMENTS (fndecl);\n+\t   decl;\n+\t   decl = TREE_CHAIN (decl))\n+\tif (TREE_USED (decl)\n+\t    && TREE_CODE (decl) == PARM_DECL\n+\t    && !DECL_READ_P (decl)\n+\t    && DECL_NAME (decl)\n+\t    && !DECL_ARTIFICIAL (decl)\n+\t    && !TREE_NO_WARNING (decl))\n+\t  warning_at (DECL_SOURCE_LOCATION (decl),\n+\t\t      OPT_Wunused_but_set_parameter,\n+\t\t      \"parameter %qD set but not used\", decl);\n+    }\n+\n   /* Store the end of the function, so that we get good line number\n      info for the epilogue.  */\n   cfun->function_end_locus = input_location;"}, {"sha": "27f0b819880cf0062522dcdbc209d88b15184130", "filename": "gcc/c-parser.c", "status": "modified", "additions": 47, "deletions": 30, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parser.c?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -1,6 +1,6 @@\n /* Parser for C and Objective-C.\n    Copyright (C) 1987, 1988, 1989, 1992, 1993, 1994, 1995, 1996, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n    Parser actions based on the old Bison parser; structure somewhat\n@@ -2171,6 +2171,7 @@ c_parser_typeof_specifier (c_parser *parser)\n       if (TREE_CODE (expr.value) == COMPONENT_REF\n \t  && DECL_C_BIT_FIELD (TREE_OPERAND (expr.value, 1)))\n \terror_at (here, \"%<typeof%> applied to a bit-field\");\n+      mark_exp_read (expr.value);\n       ret.spec = TREE_TYPE (expr.value);\n       was_vm = variably_modified_type_p (ret.spec, NULL_TREE);\n       /* This is returned with the type so that when the type is\n@@ -3073,7 +3074,7 @@ c_parser_initializer (c_parser *parser)\n       ret = c_parser_expr_no_commas (parser, NULL);\n       if (TREE_CODE (ret.value) != STRING_CST\n \t  && TREE_CODE (ret.value) != COMPOUND_LITERAL_EXPR)\n-\tret = default_function_array_conversion (loc, ret);\n+\tret = default_function_array_read_conversion (loc, ret);\n       return ret;\n     }\n }\n@@ -3229,6 +3230,7 @@ c_parser_initelt (c_parser *parser)\n \t\t      goto parse_message_args;\n \t\t    }\n \t\t  first = c_parser_expr_no_commas (parser, NULL).value;\n+\t\t  mark_exp_read (first);\n \t\t  if (c_parser_next_token_is (parser, CPP_ELLIPSIS)\n \t\t      || c_parser_next_token_is (parser, CPP_CLOSE_SQUARE))\n \t\t    goto array_desig_after_first;\n@@ -3244,7 +3246,8 @@ c_parser_initelt (c_parser *parser)\n \t\t      c_parser_consume_token (parser);\n \t\t      exp_loc = c_parser_peek_token (parser)->location;\n \t\t      next = c_parser_expr_no_commas (parser, NULL);\n-\t\t      next = default_function_array_conversion (exp_loc, next);\n+\t\t      next = default_function_array_read_conversion (exp_loc,\n+\t\t\t\t\t\t\t\t     next);\n \t\t      rec = build_compound_expr (comma_loc, rec, next.value);\n \t\t    }\n \t\tparse_message_args:\n@@ -3264,12 +3267,14 @@ c_parser_initelt (c_parser *parser)\n \t\t}\n \t      c_parser_consume_token (parser);\n \t      first = c_parser_expr_no_commas (parser, NULL).value;\n+\t      mark_exp_read (first);\n \t    array_desig_after_first:\n \t      if (c_parser_next_token_is (parser, CPP_ELLIPSIS))\n \t\t{\n \t\t  ellipsis_loc = c_parser_peek_token (parser)->location;\n \t\t  c_parser_consume_token (parser);\n \t\t  second = c_parser_expr_no_commas (parser, NULL).value;\n+\t\t  mark_exp_read (second);\n \t\t}\n \t      else\n \t\tsecond = NULL_TREE;\n@@ -3337,7 +3342,7 @@ c_parser_initval (c_parser *parser, struct c_expr *after)\n       if (init.value != NULL_TREE\n \t  && TREE_CODE (init.value) != STRING_CST\n \t  && TREE_CODE (init.value) != COMPOUND_LITERAL_EXPR)\n-\tinit = default_function_array_conversion (loc, init);\n+\tinit = default_function_array_read_conversion (loc, init);\n     }\n   process_init_element (init, false);\n }\n@@ -3840,6 +3845,7 @@ c_parser_statement_after_labels (c_parser *parser)\n \t  else\n \t    {\n \t      struct c_expr expr = c_parser_expression_conv (parser);\n+\t      mark_exp_read (expr.value);\n \t      stmt = c_finish_return (loc, expr.value, expr.original_type);\n \t      goto expect_semicolon;\n \t    }\n@@ -4455,6 +4461,7 @@ c_parser_asm_operands (c_parser *parser, bool convert_p)\n \t}\n       loc = c_parser_peek_token (parser)->location;\n       expr = c_parser_expression (parser);\n+      mark_exp_read (expr.value);\n       if (convert_p)\n \texpr = default_function_array_conversion (loc, expr);\n       expr.value = c_fully_fold (expr.value, false, NULL);\n@@ -4605,7 +4612,7 @@ c_parser_expr_no_commas (c_parser *parser, struct c_expr *after)\n   c_parser_consume_token (parser);\n   exp_location = c_parser_peek_token (parser)->location;\n   rhs = c_parser_expr_no_commas (parser, NULL);\n-  rhs = default_function_array_conversion (exp_location, rhs);\n+  rhs = default_function_array_read_conversion (exp_location, rhs);\n   ret.value = build_modify_expr (op_location, lhs.value, lhs.original_type,\n \t\t\t\t code, exp_location, rhs.value,\n \t\t\t\t rhs.original_type);\n@@ -4647,7 +4654,7 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after)\n   if (c_parser_next_token_is_not (parser, CPP_QUERY))\n     return cond;\n   cond_loc = c_parser_peek_token (parser)->location;\n-  cond = default_function_array_conversion (cond_loc, cond);\n+  cond = default_function_array_read_conversion (cond_loc, cond);\n   c_parser_consume_token (parser);\n   if (c_parser_next_token_is (parser, CPP_COLON))\n     {\n@@ -4674,6 +4681,7 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after)\n \t(cond_loc, default_conversion (cond.value));\n       c_inhibit_evaluation_warnings += cond.value == truthvalue_false_node;\n       exp1 = c_parser_expression_conv (parser);\n+      mark_exp_read (exp1.value);\n       c_inhibit_evaluation_warnings +=\n \t((cond.value == truthvalue_true_node)\n \t - (cond.value == truthvalue_false_node));\n@@ -4691,7 +4699,7 @@ c_parser_conditional_expression (c_parser *parser, struct c_expr *after)\n   {\n     location_t exp2_loc = c_parser_peek_token (parser)->location;\n     exp2 = c_parser_conditional_expression (parser, NULL);\n-    exp2 = default_function_array_conversion (exp2_loc, exp2);\n+    exp2 = default_function_array_read_conversion (exp2_loc, exp2);\n   }\n   c_inhibit_evaluation_warnings -= cond.value == truthvalue_true_node;\n   ret.value = build_conditional_expr (colon_loc, cond.value,\n@@ -4844,10 +4852,11 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after)\n \tbreak;\t\t\t\t\t\t\t\t      \\\n       }\t\t\t\t\t\t\t\t\t      \\\n     stack[sp - 1].expr\t\t\t\t\t\t\t      \\\n-      = default_function_array_conversion (stack[sp - 1].loc,\t\t      \\\n-\t\t\t\t\t   stack[sp - 1].expr);\t\t      \\\n+      = default_function_array_read_conversion (stack[sp - 1].loc,\t      \\\n+\t\t\t\t\t\tstack[sp - 1].expr);\t      \\\n     stack[sp].expr\t\t\t\t\t\t\t      \\\n-      = default_function_array_conversion (stack[sp].loc, stack[sp].expr);    \\\n+      = default_function_array_read_conversion (stack[sp].loc,\t\t      \\\n+\t\t\t\t\t\tstack[sp].expr);\t      \\\n     stack[sp - 1].expr = parser_build_binary_op (stack[sp].loc,\t\t      \\\n \t\t\t\t\t\t stack[sp].op,\t\t      \\\n \t\t\t\t\t\t stack[sp - 1].expr,\t      \\\n@@ -4952,17 +4961,17 @@ c_parser_binary_expression (c_parser *parser, struct c_expr *after)\n \t{\n \tcase TRUTH_ANDIF_EXPR:\n \t  stack[sp].expr\n-\t    = default_function_array_conversion (stack[sp].loc,\n-\t\t\t\t\t\t stack[sp].expr);\n+\t    = default_function_array_read_conversion (stack[sp].loc,\n+\t\t\t\t\t\t      stack[sp].expr);\n \t  stack[sp].expr.value = c_objc_common_truthvalue_conversion\n \t    (stack[sp].loc, default_conversion (stack[sp].expr.value));\n \t  c_inhibit_evaluation_warnings += (stack[sp].expr.value\n \t\t\t\t\t    == truthvalue_false_node);\n \t  break;\n \tcase TRUTH_ORIF_EXPR:\n \t  stack[sp].expr\n-\t    = default_function_array_conversion (stack[sp].loc,\n-\t\t\t\t\t\t stack[sp].expr);\n+\t    = default_function_array_read_conversion (stack[sp].loc,\n+\t\t\t\t\t\t      stack[sp].expr);\n \t  stack[sp].expr.value = c_objc_common_truthvalue_conversion\n \t    (stack[sp].loc, default_conversion (stack[sp].expr.value));\n \t  c_inhibit_evaluation_warnings += (stack[sp].expr.value\n@@ -5032,7 +5041,7 @@ c_parser_cast_expression (c_parser *parser, struct c_expr *after)\n       {\n \tlocation_t expr_loc = c_parser_peek_token (parser)->location;\n \texpr = c_parser_cast_expression (parser, NULL);\n-\texpr = default_function_array_conversion (expr_loc, expr);\n+\texpr = default_function_array_read_conversion (expr_loc, expr);\n       }\n       ret.value = c_cast_expr (cast_loc, type_name, expr.value);\n       ret.original_code = ERROR_MARK;\n@@ -5085,23 +5094,24 @@ c_parser_unary_expression (c_parser *parser)\n       c_parser_consume_token (parser);\n       exp_loc = c_parser_peek_token (parser)->location;\n       op = c_parser_cast_expression (parser, NULL);\n-      op = default_function_array_conversion (exp_loc, op);\n+      op = default_function_array_read_conversion (exp_loc, op);\n       return parser_build_unary_op (op_loc, PREINCREMENT_EXPR, op);\n     case CPP_MINUS_MINUS:\n       c_parser_consume_token (parser);\n       exp_loc = c_parser_peek_token (parser)->location;\n       op = c_parser_cast_expression (parser, NULL);\n-      op = default_function_array_conversion (exp_loc, op);\n+      op = default_function_array_read_conversion (exp_loc, op);\n       return parser_build_unary_op (op_loc, PREDECREMENT_EXPR, op);\n     case CPP_AND:\n       c_parser_consume_token (parser);\n-      return parser_build_unary_op (op_loc, ADDR_EXPR,\n-\t\t\t\t    c_parser_cast_expression (parser, NULL));\n+      op = c_parser_cast_expression (parser, NULL);\n+      mark_exp_read (op.value);\n+      return parser_build_unary_op (op_loc, ADDR_EXPR, op);\n     case CPP_MULT:\n       c_parser_consume_token (parser);\n       exp_loc = c_parser_peek_token (parser)->location;\n       op = c_parser_cast_expression (parser, NULL);\n-      op = default_function_array_conversion (exp_loc, op);\n+      op = default_function_array_read_conversion (exp_loc, op);\n       ret.value = build_indirect_ref (op_loc, op.value, RO_UNARY_STAR);\n       return ret;\n     case CPP_PLUS:\n@@ -5112,25 +5122,25 @@ c_parser_unary_expression (c_parser *parser)\n       c_parser_consume_token (parser);\n       exp_loc = c_parser_peek_token (parser)->location;\n       op = c_parser_cast_expression (parser, NULL);\n-      op = default_function_array_conversion (exp_loc, op);\n+      op = default_function_array_read_conversion (exp_loc, op);\n       return parser_build_unary_op (op_loc, CONVERT_EXPR, op);\n     case CPP_MINUS:\n       c_parser_consume_token (parser);\n       exp_loc = c_parser_peek_token (parser)->location;\n       op = c_parser_cast_expression (parser, NULL);\n-      op = default_function_array_conversion (exp_loc, op);\n+      op = default_function_array_read_conversion (exp_loc, op);\n       return parser_build_unary_op (op_loc, NEGATE_EXPR, op);\n     case CPP_COMPL:\n       c_parser_consume_token (parser);\n       exp_loc = c_parser_peek_token (parser)->location;\n       op = c_parser_cast_expression (parser, NULL);\n-      op = default_function_array_conversion (exp_loc, op);\n+      op = default_function_array_read_conversion (exp_loc, op);\n       return parser_build_unary_op (op_loc, BIT_NOT_EXPR, op);\n     case CPP_NOT:\n       c_parser_consume_token (parser);\n       exp_loc = c_parser_peek_token (parser)->location;\n       op = c_parser_cast_expression (parser, NULL);\n-      op = default_function_array_conversion (exp_loc, op);\n+      op = default_function_array_read_conversion (exp_loc, op);\n       return parser_build_unary_op (op_loc, TRUTH_NOT_EXPR, op);\n     case CPP_AND_AND:\n       /* Refer to the address of a label as a pointer.  */\n@@ -5230,6 +5240,7 @@ c_parser_sizeof_expression (c_parser *parser)\n     sizeof_expr:\n       c_inhibit_evaluation_warnings--;\n       in_sizeof--;\n+      mark_exp_read (expr.value);\n       if (TREE_CODE (expr.value) == COMPONENT_REF\n \t  && DECL_C_BIT_FIELD (TREE_OPERAND (expr.value, 1)))\n \terror_at (expr_loc, \"%<sizeof%> applied to a bit-field\");\n@@ -5290,6 +5301,7 @@ c_parser_alignof_expression (c_parser *parser)\n       struct c_expr ret;\n       expr = c_parser_unary_expression (parser);\n     alignof_expr:\n+      mark_exp_read (expr.value);\n       c_inhibit_evaluation_warnings--;\n       in_alignof--;\n       ret.value = c_alignof_expr (loc, expr.value);\n@@ -5495,6 +5507,7 @@ c_parser_postfix_expression (c_parser *parser)\n \t      break;\n \t    }\n \t  e1 = c_parser_expr_no_commas (parser, NULL);\n+\t  mark_exp_read (e1.value);\n \t  e1.value = c_fully_fold (e1.value, false, NULL);\n \t  if (!c_parser_require (parser, CPP_COMMA, \"expected %<,%>\"))\n \t    {\n@@ -5639,6 +5652,8 @@ c_parser_postfix_expression (c_parser *parser)\n \t    tree c;\n \n \t    c = e1.value;\n+\t    mark_exp_read (e2.value);\n+\t    mark_exp_read (e3.value);\n \t    if (TREE_CODE (c) != INTEGER_CST\n \t\t|| !INTEGRAL_TYPE_P (TREE_TYPE (c)))\n \t      error_at (loc,\n@@ -5883,6 +5898,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \t  c_parser_skip_until_found (parser, CPP_CLOSE_PAREN,\n \t\t\t\t     \"expected %<)%>\");\n \t  orig_expr = expr;\n+\t  mark_exp_read (expr.value);\n \t  /* FIXME diagnostics: Ideally we want the FUNCNAME, not the\n \t     \"(\" after the FUNCNAME, which is what we have now.    */\n \t  expr.value = build_function_call_vec (op_loc, expr.value, exprlist,\n@@ -5965,7 +5981,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \tcase CPP_PLUS_PLUS:\n \t  /* Postincrement.  */\n \t  c_parser_consume_token (parser);\n-\t  expr = default_function_array_conversion (expr_loc, expr);\n+\t  expr = default_function_array_read_conversion (expr_loc, expr);\n \t  expr.value = build_unary_op (op_loc,\n \t\t\t\t       POSTINCREMENT_EXPR, expr.value, 0);\n \t  expr.original_code = ERROR_MARK;\n@@ -5974,7 +5990,7 @@ c_parser_postfix_expression_after_primary (c_parser *parser,\n \tcase CPP_MINUS_MINUS:\n \t  /* Postdecrement.  */\n \t  c_parser_consume_token (parser);\n-\t  expr = default_function_array_conversion (expr_loc, expr);\n+\t  expr = default_function_array_read_conversion (expr_loc, expr);\n \t  expr.value = build_unary_op (op_loc,\n \t\t\t\t       POSTDECREMENT_EXPR, expr.value, 0);\n \t  expr.original_code = ERROR_MARK;\n@@ -6052,7 +6068,7 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n \n   expr = c_parser_expr_no_commas (parser, NULL);\n   if (convert_p)\n-    expr = default_function_array_conversion (loc, expr);\n+    expr = default_function_array_read_conversion (loc, expr);\n   if (fold_p)\n     expr.value = c_fully_fold (expr.value, false, NULL);\n   VEC_quick_push (tree, ret, expr.value);\n@@ -6064,7 +6080,7 @@ c_parser_expr_list (c_parser *parser, bool convert_p, bool fold_p,\n       loc = c_parser_peek_token (parser)->location;\n       expr = c_parser_expr_no_commas (parser, NULL);\n       if (convert_p)\n-\texpr = default_function_array_conversion (loc, expr);\n+\texpr = default_function_array_read_conversion (loc, expr);\n       if (fold_p)\n \texpr.value = c_fully_fold (expr.value, false, NULL);\n       VEC_safe_push (tree, gc, ret, expr.value);\n@@ -7887,7 +7903,7 @@ c_parser_omp_atomic (location_t loc, c_parser *parser)\n       {\n \tlocation_t rhs_loc = c_parser_peek_token (parser)->location;\n \trhs_expr = c_parser_expression (parser);\n-\trhs_expr = default_function_array_conversion (rhs_loc, rhs_expr);\n+\trhs_expr = default_function_array_read_conversion (rhs_loc, rhs_expr);\n       }\n       rhs = rhs_expr.value;\n       rhs = c_fully_fold (rhs, false, NULL);\n@@ -8034,7 +8050,8 @@ c_parser_omp_for_loop (location_t loc,\n \n \t  init_loc = c_parser_peek_token (parser)->location;\n \t  init_exp = c_parser_expr_no_commas (parser, NULL);\n-\t  init_exp = default_function_array_conversion (init_loc, init_exp);\n+\t  init_exp = default_function_array_read_conversion (init_loc,\n+\t\t\t\t\t\t\t     init_exp);\n \t  init = build_modify_expr (init_loc, decl, decl_exp.original_type,\n \t\t\t\t    NOP_EXPR, init_loc, init_exp.value,\n \t\t\t\t    init_exp.original_type);"}, {"sha": "3681ed7dfec1ea61ef0e1ea79d70338e83870bd3", "filename": "gcc/c-tree.h", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -1,6 +1,6 @@\n /* Definitions for C parsing and type checking.\n    Copyright (C) 1987, 1993, 1994, 1995, 1997, 1998,\n-   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009\n+   1999, 2000, 2001, 2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n    Free Software Foundation, Inc.\n \n This file is part of GCC.\n@@ -511,7 +511,10 @@ extern bool c_mark_addressable (tree);\n extern void c_incomplete_type_error (const_tree, const_tree);\n extern tree c_type_promotes_to (tree);\n extern struct c_expr default_function_array_conversion (location_t,\n-    \t\t\t\t\t\t\tstruct c_expr);\n+\t\t\t\t\t\t\tstruct c_expr);\n+extern struct c_expr default_function_array_read_conversion (location_t,\n+\t\t\t\t\t\t\t     struct c_expr);\n+extern void mark_exp_read (tree);\n extern tree composite_type (tree, tree);\n extern tree build_component_ref (location_t, tree, tree);\n extern tree build_array_ref (location_t, tree, tree);"}, {"sha": "2296cbe2f932964268b73b3867cc9d84ae38bfcf", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -1763,6 +1763,35 @@ function_to_pointer_conversion (location_t loc, tree exp)\n   return build_unary_op (loc, ADDR_EXPR, exp, 0);\n }\n \n+/* Mark EXP as read, not just set, for set but not used -Wunused\n+   warning purposes.  */\n+\n+void\n+mark_exp_read (tree exp)\n+{\n+  switch (TREE_CODE (exp))\n+    {\n+    case VAR_DECL:\n+    case PARM_DECL:\n+      DECL_READ_P (exp) = 1;\n+      break;\n+    case ARRAY_REF:\n+    case COMPONENT_REF:\n+    case MODIFY_EXPR:\n+    case REALPART_EXPR:\n+    case IMAGPART_EXPR:\n+    CASE_CONVERT:\n+    case ADDR_EXPR:\n+      mark_exp_read (TREE_OPERAND (exp, 0));\n+      break;\n+    case COMPOUND_EXPR:\n+      mark_exp_read (TREE_OPERAND (exp, 1));\n+      break;\n+    default:\n+      break;\n+    }\n+}\n+\n /* Perform the default conversion of arrays and functions to pointers.\n    Return the result of converting EXP.  For any other expression, just\n    return EXP.\n@@ -1818,6 +1847,12 @@ default_function_array_conversion (location_t loc, struct c_expr exp)\n   return exp;\n }\n \n+struct c_expr\n+default_function_array_read_conversion (location_t loc, struct c_expr exp)\n+{\n+  mark_exp_read (exp.value);\n+  return default_function_array_conversion (loc, exp);\n+}\n \n /* EXP is an expression of integer type.  Apply the integer promotions\n    to it and return the promoted value.  */\n@@ -1879,6 +1914,8 @@ default_conversion (tree exp)\n   enum tree_code code = TREE_CODE (type);\n   tree promoted_type;\n \n+  mark_exp_read (exp);\n+\n   /* Functions and arrays have been converted during parsing.  */\n   gcc_assert (code != FUNCTION_TYPE);\n   if (code == ARRAY_TYPE)\n@@ -8793,6 +8830,7 @@ c_process_expr_stmt (location_t loc, tree expr)\n      number, wrap the thing in a no-op NOP_EXPR.  */\n   if (DECL_P (expr) || CONSTANT_CLASS_P (expr))\n     {\n+      mark_exp_read (expr);\n       expr = build1 (NOP_EXPR, TREE_TYPE (expr), expr);\n       SET_EXPR_LOCATION (expr, loc);\n     }"}, {"sha": "d5f00a0bd9ad6b81291be0d418b234a6016a7696", "filename": "gcc/common.opt", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -212,6 +212,14 @@ Wunused\n Common Var(warn_unused) Init(0) Warning\n Enable all -Wunused- warnings\n \n+Wunused-but-set-parameter\n+Common Var(warn_unused_but_set_parameter) Init(-1) Warning\n+Warn when a function parameter is only set, otherwise unused\n+\n+Wunused-but-set-variable\n+Common Var(warn_unused_but_set_variable) Init(-1) Warning\n+Warn when a variable is only set, otherwise unused\n+\n Wunused-function\n Common Var(warn_unused_function) Init(-1) Warning\n Warn when a function is unused"}, {"sha": "67a1b60d15cac0a60dadf8084c84e287fb99b2dd", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -262,7 +262,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wunknown-pragmas  -Wno-pragmas @gol\n -Wunsuffixed-float-constants  -Wunused  -Wunused-function @gol\n -Wunused-label  -Wunused-parameter -Wno-unused-result -Wunused-value  -Wunused-variable @gol\n--Wvariadic-macros -Wvla @gol\n+-Wunused-but-set-parameter -Wunused-but-set-variable -Wvariadic-macros -Wvla @gol\n -Wvolatile-register-var  -Wwrite-strings}\n \n @item C and Objective-C-only Warning Options\n@@ -2926,7 +2926,8 @@ name is still supported, but the newer name is more descriptive.)\n -Wsign-compare  @gol\n -Wtype-limits  @gol\n -Wuninitialized  @gol\n--Wunused-parameter @r{(only with} @option{-Wunused} @r{or} @option{-Wall}@r{)}  @gol\n+-Wunused-parameter @r{(only with} @option{-Wunused} @r{or} @option{-Wall}@r{)} @gol\n+-Wunused-but-set-parameter @r{(only with} @option{-Wunused} @r{or} @option{-Wall}@r{)}  @gol\n }\n \n The option @option{-Wextra} also prints warning messages for the\n@@ -3321,6 +3322,31 @@ Warn if any trigraphs are encountered that might change the meaning of\n the program (trigraphs within comments are not warned about).\n This warning is enabled by @option{-Wall}.\n \n+@item -Wunused-but-set-parameter\n+@opindex Wunused-but-set-parameter\n+@opindex Wno-unused-but-set-parameter\n+Warn whenever a function parameter is assigned to, but otherwise unused\n+(aside from its declaration).\n+\n+To suppress this warning use the @samp{unused} attribute\n+(@pxref{Variable Attributes}).\n+\n+This warning is also enabled by @option{-Wunused} together with\n+@option{-Wextra}.\n+\n+@item -Wunused-but-set-variable\n+@opindex Wunused-but-set-variable\n+@opindex Wno-unused-but-set-variable\n+Warn whenever a local variable is assigned to, but otherwise unused\n+(aside from its declaration).\n+This warning is enabled by @option{-Wall}.\n+\n+To suppress this warning use the @samp{unused} attribute\n+(@pxref{Variable Attributes}).\n+\n+This warning is also enabled by @option{-Wunused}, which is enabled\n+by @option{-Wall}.\n+\n @item -Wunused-function\n @opindex Wunused-function\n @opindex Wno-unused-function"}, {"sha": "4307001dffcaef286da836ad7372f5847a02cfa9", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -1,3 +1,10 @@\n+2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/18624\n+\t* objc-act.c (finish_var_decl, objc_begin_catch_clause,\n+\treally_start_method, get_super_receiver, handle_class_ref): Set\n+\tDECL_READ_P in addition to TREE_USED.\n+\n 2010-04-07  Iain Sandoe <iains@gcc.gnu.org>\n \n \tPR objc/35996"}, {"sha": "9e5fdb515f78676c66127e51a5517ad99eb3c4d2", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -1,6 +1,7 @@\n /* Implement classes and message passing for Objective C.\n    Copyright (C) 1992, 1993, 1994, 1995, 1997, 1998, 1999, 2000, 2001,\n-   2002, 2003, 2004, 2005, 2007, 2008, 2009 Free Software Foundation, Inc.\n+   2002, 2003, 2004, 2005, 2007, 2008, 2009, 2010\n+   Free Software Foundation, Inc.\n    Contributed by Steve Naroff.\n \n This file is part of GCC.\n@@ -1531,6 +1532,7 @@ finish_var_decl (tree var, tree initializer)\n   mark_decl_referenced (var);\n   /* Mark the decl to avoid \"defined but not used\" warning.  */\n   TREE_USED (var) = 1;\n+  DECL_READ_P (var) = 1;\n   /* We reserve the right for the runtime to use/modify these variables\n      in ways that are opaque to us.  */\n   DECL_PRESERVE_P (var) = 1;\n@@ -3867,6 +3869,7 @@ objc_begin_catch_clause (tree decl)\n   /* ??? As opposed to __attribute__((unused))?  Anyway, this appears to\n      be what the previous objc implementation did.  */\n   TREE_USED (decl) = 1;\n+  DECL_READ_P (decl) = 1;\n \n   /* Verify that the type of the catch is valid.  It must be a pointer\n      to an Objective-C class, or \"id\" (which is catch-all).  */\n@@ -8722,7 +8725,9 @@ really_start_method (tree method,\n \n   /* Suppress unused warnings.  */\n   TREE_USED (self_decl) = 1;\n+  DECL_READ_P (self_decl) = 1;\n   TREE_USED (TREE_CHAIN (self_decl)) = 1;\n+  DECL_READ_P (TREE_CHAIN (self_decl)) = 1;\n #ifdef OBJCPLUS\n   pop_lang_context ();\n #endif\n@@ -8799,6 +8804,7 @@ get_super_receiver (void)\n \t\t\t\t       objc_super_template);\n \t/* This prevents `unused variable' warnings when compiling with -Wall.  */\n \tTREE_USED (UOBJC_SUPER_decl) = 1;\n+\tDECL_READ_P (UOBJC_SUPER_decl) = 1;\n \tlang_hooks.decls.pushdecl (UOBJC_SUPER_decl);\n         finish_decl (UOBJC_SUPER_decl, input_location, NULL_TREE, NULL_TREE,\n \t    \t     NULL_TREE);\n@@ -9422,6 +9428,7 @@ handle_class_ref (tree chain)\n   DECL_INITIAL (decl) = exp;\n   TREE_STATIC (decl) = 1;\n   TREE_USED (decl) = 1;\n+  DECL_READ_P (decl) = 1;\n   /* Force the output of the decl as this forces the reference of the class.  */\n   mark_decl_referenced (decl);\n "}, {"sha": "d4ea27875680dab8de3a6419644f93751190a45e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -1,5 +1,14 @@\n 2010-04-07  Jakub Jelinek  <jakub@redhat.com>\n \n+\tPR c/18624\n+\t* gcc.dg/Wunused-var-1.c: New test.\n+\t* gcc.dg/Wunused-var-2.c: New test.\n+\t* gcc.dg/Wunused-var-3.c: New test.\n+\t* gcc.dg/Wunused-var-4.c: New test.\n+\t* gcc.dg/Wunused-var-5.c: New test.\n+\t* gcc.dg/Wunused-var-6.c: New test.\n+\t* gcc.dg/Wunused-parm-1.c: New test.\n+\n \t* gcc.dg/builtin-choose-expr.c: Avoid set but not used warnings.\n \t* gcc.dg/trunc-1.c: Likewise.\n \t* gcc.dg/vla-9.c: Likewise."}, {"sha": "bddbd83a63c635c9ddb6ad7a3d631d3ed6ccacd9", "filename": "gcc/testsuite/gcc.dg/Wunused-parm-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-parm-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-parm-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-parm-1.c?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused -W\" } */\n+\n+long\n+f1 (unsigned long long x)\n+{\n+  unsigned long long a = 1;\n+  const union { unsigned long long l; unsigned int p[2]; } b = { .l = x };\n+  const union { unsigned long long l; unsigned int p[2]; } c = { .l = a };\n+  return b.p[0] + c.p[0];\n+}\n+\n+int\n+f2 (int x, int y)\n+{\n+  int a = 1;\n+  int b[] = { 1, 2, x, a, 3, 4 };\n+  return b[y];\n+}\n+\n+int\n+f3 (int a,\t/* { dg-warning \"unused parameter\" } */\n+    int b,\t/* { dg-warning \"set but not used\" } */\n+    int c)\n+{\n+  b = 1;\n+  c = 1;\n+  return c;\n+}"}, {"sha": "bee34d8803106445f88fb17ae7f385ff4b5a6c01", "filename": "gcc/testsuite/gcc.dg/Wunused-var-1.c", "status": "added", "additions": 179, "deletions": 0, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-1.c?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -0,0 +1,179 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused\" } */\n+\n+void\n+f1 (void)\n+{\n+  int a;\t/* { dg-warning \"set but not used\" } */\n+  int b;\n+  int c;\n+  c = 1;\n+  a = b = c;\n+}\n+\n+void\n+f2 (int x)\n+{\n+  int a;\t/* { dg-warning \"set but not used\" } */\n+  int b;\n+  int c;\t/* { dg-warning \"set but not used\" } */\n+  c = (a = x, b = x);\n+}\n+\n+int\n+f3 (int x)\n+{\n+  int a;\n+  return a = x;\n+}\n+\n+int\n+f4 (int x)\n+{\n+  int a;\n+  a = x;\n+  return a;\n+}\n+\n+void\n+f5 (int x)\n+{\n+  int a[2];\t/* { dg-warning \"set but not used\" } */\n+  int b;\n+  int *c, d[2];\n+  c = d;\n+  b = x;\n+  a[b] = 1;\n+  c[b] = 1;\n+}\n+\n+int\n+f6 (int x)\n+{\n+  int a[2];\n+  int b;\n+  b = x;\n+  a[b] = 1;\n+  return a[b];\n+}\n+\n+void\n+f7 (int x, int *p)\n+{\n+  int *a[2];\n+  a[x] = p;\n+  a[x][x] = x;\n+}\n+\n+struct S { int i; };\n+\n+void\n+f8 (void)\n+{\n+  struct S s;\t/* { dg-warning \"set but not used\" } */\n+  s.i = 6;\n+}\n+\n+int\n+f9 (void)\n+{\n+  struct S s;\n+  s.i = 6;\n+  return s.i;\n+}\n+\n+struct S\n+f10 (void)\n+{\n+  struct S s;\n+  s.i = 6;\n+  return s;\n+}\n+\n+extern int foo11 (int *);\n+\n+void\n+f11 (void)\n+{\n+  int a[2];\n+  foo11 (a);\n+}\n+\n+void\n+f12 (void)\n+{\n+  int a;\n+  a = 1;\n+  a;\t/* { dg-warning \"statement with no effect\" } */\n+}\n+\n+void\n+f13 (void (*x) (void))\n+{\n+  void (*a) (void);\n+  a = x;\n+  a ();\n+}\n+\n+void\n+f14 (void (*x) (void))\n+{\n+  void (*a) (void);\t/* { dg-warning \"set but not used\" } */\n+  a = x;\n+}\n+\n+extern void foo15 (int *);\n+\n+void\n+f15 (void)\n+{\n+  int a[10];\n+  int *b = a + 2;\n+  foo15 (b);\n+}\n+\n+extern void foo16 (int **);\n+\n+void\n+f16 (void)\n+{\n+  int a[10];\n+  int *b[] = { a, a + 2 };\n+  foo16 (b);\n+}\n+\n+void\n+f17 (int x)\n+{\n+  long a;\t/* { dg-warning \"set but not used\" } */\n+  int b;\n+  a = b = x;\n+}\n+\n+void\n+f18 (int x)\n+{\n+  int a;\t/* { dg-warning \"set but not used\" } */\n+  int b;\n+  a = (char) (b = x);\n+}\n+\n+int\n+f19 (int x, int y, int z)\n+{\n+  int a;\n+  int b;\n+  a = x;\n+  b = y;\n+  return z ? a : b;\n+}\n+\n+int *\n+f20 (int x)\n+{\n+  static int a[] = { 3, 4, 5, 6 };\n+  static int b[] = { 4, 5, 6, 7 };\n+  static int c[] = { 5, 6, 7, 8 };\t/* { dg-warning \"set but not used\" } */\n+  c[1] = 1;\n+  return x ? a : b;\n+}"}, {"sha": "281825900b521844a27d83afeaef74829d2b8027", "filename": "gcc/testsuite/gcc.dg/Wunused-var-2.c", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-2.c?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -0,0 +1,20 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused\" } */\n+\n+int\n+f1 (void)\n+{\n+  int c = ({\n+    int a;\n+    a = 1;\n+    a; });\n+  return c;\n+}\n+\n+void\n+f2 (void)\n+{\n+  int f;\n+  f = 0;\n+  __asm__ __volatile__ (\"\" : \"+r\" (f));\n+}"}, {"sha": "9b1fce77ad3ad49410084dcc6dae487ef742442e", "filename": "gcc/testsuite/gcc.dg/Wunused-var-3.c", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-3.c?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -0,0 +1,37 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused\" } */\n+\n+void\n+f1 (void)\n+{\n+  _Complex int a;\t/* { dg-warning \"set but not used\" } */\n+  _Complex double b;\t/* { dg-warning \"set but not used\" } */\n+  __real__ a = 1;\n+  __imag__ a = 2;\n+  __real__ b = 3.0;\n+  __imag__ b = 4.0;\n+}\n+\n+int\n+f2 (void)\n+{\n+  _Complex int a;\n+  _Complex double b;\n+  __real__ a = 1;\n+  __imag__ a = 2;\n+  __real__ b = 3.0;\n+  __imag__ b = 4.0;\n+  return __real__ a + __imag__ b;\n+}\n+\n+_Complex double\n+f3 (void)\n+{\n+  _Complex int a;\n+  _Complex double b;\n+  __real__ a = 1;\n+  __imag__ a = 2;\n+  __real__ b = 3.0;\n+  __imag__ b = 4.0;\n+  return a + b;\n+}"}, {"sha": "d60dd70e57345a78167703a9720fcf052466dc61", "filename": "gcc/testsuite/gcc.dg/Wunused-var-4.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-4.c?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused\" } */\n+\n+int\n+f1 (void)\n+{\n+  int a;\n+  int foo (void)\n+  {\n+    return a;\n+  }\n+  a = 1;\n+  return foo ();\n+}\n+\n+void\n+f2 (void)\n+{\n+  int a;\t/* { dg-warning \"set but not used\" } */\n+  void foo (void)\n+  {\n+    a = 2;\n+  }\n+  a = 1;\n+  foo ();\n+}"}, {"sha": "747f58d04c090b1a432d9907d0d825308e583f1e", "filename": "gcc/testsuite/gcc.dg/Wunused-var-5.c", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-5.c?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -0,0 +1,33 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused\" } */\n+\n+void\n+f1 (void)\n+{\n+  extern int extvari;\n+  extvari = 1;\n+}\n+\n+int extvarj;\n+\n+void\n+f2 (void)\n+{\n+  extern int extvarj;\n+  extvarj = 1;\n+}\n+\n+static int extvark;\n+\n+void\n+f3 (void)\n+{\n+  extern int extvark;\n+  extvark = 1;\n+}\n+\n+int\n+f4 (void)\n+{\n+  return extvark;\n+}"}, {"sha": "b5a22f86545c44f4f62fb513fe565e5ad5f0914b", "filename": "gcc/testsuite/gcc.dg/Wunused-var-6.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWunused-var-6.c?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-Wunused\" } */\n+\n+int\n+f1 (void)\n+{\n+  int a;\n+  int b;\n+  int c;\n+  int d;\n+  int e;\n+  a = 1;\n+  b = 2;\n+  c = 3;\n+  d = 4;\n+  e = 5;\n+  return sizeof (a) + ((__typeof (b)) 1) + __alignof__ (c)\n+         + __builtin_choose_expr (1, d, e);\n+}"}, {"sha": "798f0d493c617d256efa60611473588f71124fff", "filename": "gcc/toplev.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -1796,6 +1796,12 @@ process_options (void)\n     warn_unused_parameter = (warn_unused && extra_warnings);\n   if (warn_unused_variable == -1)\n     warn_unused_variable = warn_unused;\n+  /* Wunused-but-set-parameter is enabled if both -Wunused -Wextra are\n+     enabled.  */\n+  if (warn_unused_but_set_parameter == -1)\n+    warn_unused_but_set_parameter = (warn_unused && extra_warnings);\n+  if (warn_unused_but_set_variable == -1)\n+    warn_unused_but_set_variable = warn_unused;\n   if (warn_unused_value == -1)\n     warn_unused_value = warn_unused;\n "}, {"sha": "96c95758dd9a5ca143eae56e98aec1a3bf49adff", "filename": "gcc/tree.h", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ebfbbdc556443d1ea95923b596f59411256bd9b5/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=ebfbbdc556443d1ea95923b596f59411256bd9b5", "patch": "@@ -1317,6 +1317,9 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n   (TREE_CHECK3 (NODE, VAR_DECL, PARM_DECL, \\\n \t\tRESULT_DECL)->decl_common.decl_restricted_flag)\n \n+#define DECL_READ_P(NODE) \\\n+  (TREE_CHECK2 (NODE, VAR_DECL, PARM_DECL)->decl_common.decl_read_flag)\n+\n /* In a CALL_EXPR, means that the call is the jump from a thunk to the\n    thunked-to function.  */\n #define CALL_FROM_THUNK_P(NODE) (CALL_EXPR_CHECK (NODE)->base.protected_flag)\n@@ -2691,8 +2694,12 @@ struct GTY(()) tree_decl_common {\n   /* In VAR_DECL, PARM_DECL and RESULT_DECL, this is DECL_RESTRICTED_P.  */\n   unsigned decl_restricted_flag : 1;\n \n+  /* In VAR_DECL and PARM_DECL set when the decl has been used except for\n+     being set.  */\n+  unsigned decl_read_flag : 1;\n+\n   /* Padding so that 'off_align' can be on a 32-bit boundary.  */\n-  unsigned decl_common_unused : 2;\n+  unsigned decl_common_unused : 1;\n \n   /* DECL_OFFSET_ALIGN, used only for FIELD_DECLs.  */\n   unsigned int off_align : 8;"}]}