{"sha": "dd44445f09bcf92198e9238a28bf026959152be1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQ0NDQ0NWYwOWJjZjkyMTk4ZTkyMzhhMjhiZjAyNjk1OTE1MmJlMQ==", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-07-26T07:47:42Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2021-07-26T09:55:24Z"}, "message": "Pass gimple context to array_bounds_checker.\n\nI have changed the use of the array_bounds_checker in VRP to use a\nranger in my local tree to make sure there are no regressions when using\neither VRP or the ranger.  In doing so I noticed that the checker\ndoes not pass context to get_value_range, which causes the ranger to miss a\nfew cases.  This patch fixes the oversight.\n\nTested on x86-64 Linux using the array bounds checker both with VRP and\nthe ranger.\n\ngcc/ChangeLog:\n\n\t* gimple-array-bounds.cc (array_bounds_checker::get_value_range):\n\tAdd gimple argument.\n\t(array_bounds_checker::check_array_ref): Same.\n\t(array_bounds_checker::check_addr_expr): Same.\n\t(array_bounds_checker::check_array_bounds): Pass statement to\n\tcheck_array_bounds and check_addr_expr.\n\t* gimple-array-bounds.h (check_array_bounds): Add gimple argument.\n\t(check_addr_expr): Same.\n\t(get_value_range): Same.", "tree": {"sha": "5758cdc6fec2bd1a34a0996e6482395461b6fb31", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5758cdc6fec2bd1a34a0996e6482395461b6fb31"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd44445f09bcf92198e9238a28bf026959152be1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd44445f09bcf92198e9238a28bf026959152be1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd44445f09bcf92198e9238a28bf026959152be1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd44445f09bcf92198e9238a28bf026959152be1/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ab2270036dc0f2a13442ce682267bc7433ffb34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1ab2270036dc0f2a13442ce682267bc7433ffb34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1ab2270036dc0f2a13442ce682267bc7433ffb34"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "598c76bf52e916f50a6d915f0b25f2092f44d75d", "filename": "gcc/gimple-array-bounds.cc", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd44445f09bcf92198e9238a28bf026959152be1/gcc%2Fgimple-array-bounds.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd44445f09bcf92198e9238a28bf026959152be1/gcc%2Fgimple-array-bounds.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.cc?ref=dd44445f09bcf92198e9238a28bf026959152be1", "patch": "@@ -43,9 +43,9 @@ along with GCC; see the file COPYING3.  If not see\n // break the dependency on equivalences for this pass.\n \n const value_range *\n-array_bounds_checker::get_value_range (const_tree op)\n+array_bounds_checker::get_value_range (const_tree op, gimple *stmt)\n {\n-  return ranges->get_value_range (op);\n+  return ranges->get_value_range (op, stmt);\n }\n \n /* Try to determine the DECL that REF refers to.  Return the DECL or\n@@ -173,7 +173,7 @@ trailing_array (tree arg, tree *pref)\n \n bool\n array_bounds_checker::check_array_ref (location_t location, tree ref,\n-\t\t\t\t       bool ignore_off_by_one)\n+\t\t\t\t       gimple *stmt, bool ignore_off_by_one)\n {\n   if (warning_suppressed_p (ref, OPT_Warray_bounds))\n     /* Return true to have the caller prevent warnings for enclosing\n@@ -287,7 +287,7 @@ array_bounds_checker::check_array_ref (location_t location, tree ref,\n   const value_range *vr = NULL;\n   if (TREE_CODE (low_sub) == SSA_NAME)\n     {\n-      vr = get_value_range (low_sub);\n+      vr = get_value_range (low_sub, stmt);\n       if (!vr->undefined_p () && !vr->varying_p ())\n \t{\n \t  low_sub = vr->kind () == VR_RANGE ? vr->max () : vr->min ();\n@@ -563,7 +563,8 @@ array_bounds_checker::check_mem_ref (location_t location, tree ref,\n    address of an ARRAY_REF, and call check_array_ref on it.  */\n \n void\n-array_bounds_checker::check_addr_expr (location_t location, tree t)\n+array_bounds_checker::check_addr_expr (location_t location, tree t,\n+\t\t\t\t       gimple *stmt)\n {\n   /* For the most significant subscript only, accept taking the address\n      of the just-past-the-end element.  */\n@@ -575,7 +576,7 @@ array_bounds_checker::check_addr_expr (location_t location, tree t)\n       bool warned = false;\n       if (TREE_CODE (t) == ARRAY_REF)\n \t{\n-\t  warned = check_array_ref (location, t, ignore_off_by_one);\n+\t  warned = check_array_ref (location, t, stmt, ignore_off_by_one);\n \t  ignore_off_by_one = false;\n \t}\n       else if (TREE_CODE (t) == MEM_REF)\n@@ -728,14 +729,14 @@ array_bounds_checker::check_array_bounds (tree *tp, int *walk_subtree,\n   bool warned = false;\n   array_bounds_checker *checker = (array_bounds_checker *) wi->info;\n   if (TREE_CODE (t) == ARRAY_REF)\n-    warned = checker->check_array_ref (location, t,\n+    warned = checker->check_array_ref (location, t, wi->stmt,\n \t\t\t\t       false/*ignore_off_by_one*/);\n   else if (TREE_CODE (t) == MEM_REF)\n     warned = checker->check_mem_ref (location, t,\n \t\t\t\t     false /*ignore_off_by_one*/);\n   else if (TREE_CODE (t) == ADDR_EXPR)\n     {\n-      checker->check_addr_expr (location, t);\n+      checker->check_addr_expr (location, t, wi->stmt);\n       *walk_subtree = false;\n     }\n   else if (inbounds_memaccess_p (t))"}, {"sha": "d8f7ff7a89fc4f04cb73e009b41f3ce0fd05654c", "filename": "gcc/gimple-array-bounds.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd44445f09bcf92198e9238a28bf026959152be1/gcc%2Fgimple-array-bounds.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd44445f09bcf92198e9238a28bf026959152be1/gcc%2Fgimple-array-bounds.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-array-bounds.h?ref=dd44445f09bcf92198e9238a28bf026959152be1", "patch": "@@ -31,10 +31,10 @@ class array_bounds_checker\n \n private:\n   static tree check_array_bounds (tree *tp, int *walk_subtree, void *data);\n-  bool check_array_ref (location_t, tree, bool ignore_off_by_one);\n+  bool check_array_ref (location_t, tree, gimple *, bool ignore_off_by_one);\n   bool check_mem_ref (location_t, tree, bool ignore_off_by_one);\n-  void check_addr_expr (location_t, tree);\n-  const value_range *get_value_range (const_tree op);\n+  void check_addr_expr (location_t, tree, gimple *);\n+  const value_range *get_value_range (const_tree op, gimple *);\n \n   struct function *fun;\n   range_query *ranges;"}]}