{"sha": "fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmRiZmU0ZTU1MjNmOWZlNTViNzc1OWIyZDE2YjFjZTI3MDRmZDNhYw==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@linaro.org", "date": "2017-12-20T12:54:36Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2017-12-20T12:54:36Z"}, "message": "poly_int: operand_subword\n\nThis patch makes operand_subword and operand_subword_force take\npolynomial offsets.  This is a fairly old-school interface and\nthese days should only be used when splitting multiword operations\ninto word operations.  It still doesn't hurt to support polynomial\noffsets and it helps make callers easier to write.\n\n2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n\t    Alan Hayward  <alan.hayward@arm.com>\n\t    David Sherwood  <david.sherwood@arm.com>\n\ngcc/\n\t* rtl.h (operand_subword, operand_subword_force): Take the offset\n\tas a poly_uint64 an unsigned int.\n\t* emit-rtl.c (operand_subword, operand_subword_force): Likewise.\n\nCo-Authored-By: Alan Hayward <alan.hayward@arm.com>\nCo-Authored-By: David Sherwood <david.sherwood@arm.com>\n\nFrom-SVN: r255883", "tree": {"sha": "03c7742cd083bae688c146c6723fbcfedfd77164", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/03c7742cd083bae688c146c6723fbcfedfd77164"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac/comments", "author": null, "committer": null, "parents": [{"sha": "91914e56a5e952cc87468bdd6d006e51eaa54294", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/91914e56a5e952cc87468bdd6d006e51eaa54294", "html_url": "https://github.com/Rust-GCC/gccrs/commit/91914e56a5e952cc87468bdd6d006e51eaa54294"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "fa0a3ce3dec3935cbf43bdd5b906e033e035e5d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac", "patch": "@@ -1,3 +1,11 @@\n+2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n+\t    Alan Hayward  <alan.hayward@arm.com>\n+\t    David Sherwood  <david.sherwood@arm.com>\n+\n+\t* rtl.h (operand_subword, operand_subword_force): Take the offset\n+\tas a poly_uint64 an unsigned int.\n+\t* emit-rtl.c (operand_subword, operand_subword_force): Likewise.\n+\n 2017-12-20  Richard Sandiford  <richard.sandiford@linaro.org>\n \t    Alan Hayward  <alan.hayward@arm.com>\n \t    David Sherwood  <david.sherwood@arm.com>"}, {"sha": "6f4dea325ca357a43657aae14d1fc004f2531524", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac", "patch": "@@ -1705,7 +1705,8 @@ subreg_lowpart_p (const_rtx x)\n  */\n \n rtx\n-operand_subword (rtx op, unsigned int offset, int validate_address, machine_mode mode)\n+operand_subword (rtx op, poly_uint64 offset, int validate_address,\n+\t\t machine_mode mode)\n {\n   if (mode == VOIDmode)\n     mode = GET_MODE (op);\n@@ -1714,12 +1715,12 @@ operand_subword (rtx op, unsigned int offset, int validate_address, machine_mode\n \n   /* If OP is narrower than a word, fail.  */\n   if (mode != BLKmode\n-      && (GET_MODE_SIZE (mode) < UNITS_PER_WORD))\n+      && maybe_lt (GET_MODE_SIZE (mode), UNITS_PER_WORD))\n     return 0;\n \n   /* If we want a word outside OP, return zero.  */\n   if (mode != BLKmode\n-      && (offset + 1) * UNITS_PER_WORD > GET_MODE_SIZE (mode))\n+      && maybe_gt ((offset + 1) * UNITS_PER_WORD, GET_MODE_SIZE (mode)))\n     return const0_rtx;\n \n   /* Form a new MEM at the requested address.  */\n@@ -1753,7 +1754,7 @@ operand_subword (rtx op, unsigned int offset, int validate_address, machine_mode\n    MODE is the mode of OP, in case it is CONST_INT.  */\n \n rtx\n-operand_subword_force (rtx op, unsigned int offset, machine_mode mode)\n+operand_subword_force (rtx op, poly_uint64 offset, machine_mode mode)\n {\n   rtx result = operand_subword (op, offset, 1, mode);\n "}, {"sha": "17fd9209e9a9c15dacc1429a98d72469892a7724", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=fdbfe4e5523f9fe55b7759b2d16b1ce2704fd3ac", "patch": "@@ -3043,10 +3043,10 @@ extern rtx gen_lowpart_if_possible (machine_mode, rtx);\n /* In emit-rtl.c */\n extern rtx gen_highpart (machine_mode, rtx);\n extern rtx gen_highpart_mode (machine_mode, machine_mode, rtx);\n-extern rtx operand_subword (rtx, unsigned int, int, machine_mode);\n+extern rtx operand_subword (rtx, poly_uint64, int, machine_mode);\n \n /* In emit-rtl.c */\n-extern rtx operand_subword_force (rtx, unsigned int, machine_mode);\n+extern rtx operand_subword_force (rtx, poly_uint64, machine_mode);\n extern int subreg_lowpart_p (const_rtx);\n extern poly_uint64 subreg_size_lowpart_offset (poly_uint64, poly_uint64);\n "}]}