{"sha": "a51042110f7b12f90ca1dfd6a96e99ea946a5c72", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTUxMDQyMTEwZjdiMTJmOTBjYTFkZmQ2YTk2ZTk5ZWE5NDZhNWM3Mg==", "commit": {"author": {"name": "Zack Weinberg", "email": "zack@wolery.cumb.org", "date": "2000-04-03T23:25:07Z"}, "committer": {"name": "Zack Weinberg", "email": "zack@gcc.gnu.org", "date": "2000-04-03T23:25:07Z"}, "message": "bb-reorder.c (verify_insn_chain): #ifdef out unless ENABLE_CHECKING.\n\n\t* bb-reorder.c (verify_insn_chain): #ifdef out unless ENABLE_CHECKING.\n\t* i386.h (FUNCTION_ARG_REGNO_P): Remove unnecessary test for N >= 0.\n\t* i386.md (call_value, call_value_pop): Remove unused variable 'addr'.\n\nFrom-SVN: r32893", "tree": {"sha": "27761750c5c166af3e1dcdd3db8e382449c95495", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/27761750c5c166af3e1dcdd3db8e382449c95495"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a51042110f7b12f90ca1dfd6a96e99ea946a5c72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51042110f7b12f90ca1dfd6a96e99ea946a5c72", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a51042110f7b12f90ca1dfd6a96e99ea946a5c72", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a51042110f7b12f90ca1dfd6a96e99ea946a5c72/comments", "author": null, "committer": null, "parents": [{"sha": "f6905025adc1f3cb637a26b5899720fcc64ab93f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6905025adc1f3cb637a26b5899720fcc64ab93f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6905025adc1f3cb637a26b5899720fcc64ab93f"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "ab788fa5ab08f0ddf892f82bf813c00f1f78cfad", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51042110f7b12f90ca1dfd6a96e99ea946a5c72/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51042110f7b12f90ca1dfd6a96e99ea946a5c72/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a51042110f7b12f90ca1dfd6a96e99ea946a5c72", "patch": "@@ -1,5 +1,9 @@\n 2000-04-03  Zack Weinberg  <zack@wolery.cumb.org>\n \n+\t* bb-reorder.c (verify_insn_chain): #ifdef out unless ENABLE_CHECKING.\n+\t* i386.h (FUNCTION_ARG_REGNO_P): Remove unnecessary test for N >= 0.\n+\t* i386.md (call_value, call_value_pop): Remove unused variable 'addr'.\n+\n \t* gcc.c (C specs): Pass -fno-show-column to the preprocessor.\n \t* objc/lang-specs.h: Likewise.\n "}, {"sha": "e2f40f1657eee93d0dc937208eab0cb543bb3337", "filename": "gcc/bb-reorder.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51042110f7b12f90ca1dfd6a96e99ea946a5c72/gcc%2Fbb-reorder.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51042110f7b12f90ca1dfd6a96e99ea946a5c72/gcc%2Fbb-reorder.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbb-reorder.c?ref=a51042110f7b12f90ca1dfd6a96e99ea946a5c72", "patch": "@@ -123,8 +123,9 @@ static basic_block get_common_dest\tPARAMS ((basic_block, basic_block));\n static basic_block chain_reorder_blocks\tPARAMS ((edge, basic_block));\n static void make_reorder_chain\t\tPARAMS ((basic_block));\n static void fixup_reorder_chain\t\tPARAMS ((void));\n+#ifdef ENABLE_CHECKING\n static void verify_insn_chain\t\tPARAMS ((void));\n-\n+#endif\n \n /* Skip over insns BEFORE or AFTER BB which are typically associated with\n    basic block BB.  */\n@@ -718,7 +719,7 @@ fixup_reorder_chain ()\n       reverse direction.\n    2. Count insns in chain, going both directions, and check if equal.\n    3. Check that get_last_insn () returns the actual end of chain.  */\n-\n+#ifdef ENABLE_CHECKING\n static void\n verify_insn_chain ()\n {\n@@ -775,7 +776,7 @@ verify_insn_chain ()\n       abort ();\n     }\n }\n-\n+#endif\n \n /* Reorder basic blocks.  */\n "}, {"sha": "d73e7b0c65c5fd00a5b02b41b2d503861383f532", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51042110f7b12f90ca1dfd6a96e99ea946a5c72/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51042110f7b12f90ca1dfd6a96e99ea946a5c72/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=a51042110f7b12f90ca1dfd6a96e99ea946a5c72", "patch": "@@ -1210,7 +1210,7 @@ enum reg_class\n #define APPLY_RESULT_SIZE (8+108)\n \n /* 1 if N is a possible register number for function argument passing.  */\n-#define FUNCTION_ARG_REGNO_P(N) ((N) >= 0 && (N) < REGPARM_MAX)\n+#define FUNCTION_ARG_REGNO_P(N) ((N) < REGPARM_MAX)\n \n /* Define a data type for recording info about an argument list\n    during the scan of that argument list.  This data type should"}, {"sha": "e9a5aa3cf57b490f63bec76201ecaa576ee4c67f", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a51042110f7b12f90ca1dfd6a96e99ea946a5c72/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a51042110f7b12f90ca1dfd6a96e99ea946a5c72/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=a51042110f7b12f90ca1dfd6a96e99ea946a5c72", "patch": "@@ -7159,8 +7159,6 @@\n   \"\"\n   \"\n {\n-  rtx addr;\n-\n   if (operands[4] == const0_rtx)\n     {\n       emit_insn (gen_call_value (operands[0], operands[1], operands[2]));\n@@ -7183,8 +7181,6 @@\n   \"\"\n   \"\n {\n-  rtx addr;\n-\n   /* ??? Not true for calls to static functions.  */\n   if (flag_pic)\n     current_function_uses_pic_offset_table = 1;"}]}