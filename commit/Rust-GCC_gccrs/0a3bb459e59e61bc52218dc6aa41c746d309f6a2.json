{"sha": "0a3bb459e59e61bc52218dc6aa41c746d309f6a2", "node_id": "C_kwDOANBUbNoAKDBhM2JiNDU5ZTU5ZTYxYmM1MjIxOGRjNmFhNDFjNzQ2ZDMwOWY2YTI", "commit": {"author": {"name": "Alexandre Oliva", "email": "oliva@adacore.com", "date": "2022-06-27T13:34:17Z"}, "committer": {"name": "Alexandre Oliva", "email": "oliva@gnu.org", "date": "2022-06-27T13:34:17Z"}, "message": "testsuite: pthread: call sched_yield for non-preemptive targets\n\nSystems without preemptive multi-threading require sched_yield calls\nto be placed at points in which a context switch might be needed to\nenable the test to complete.\n\n\nfor  gcc/testsuite/ChangeLog\n\n\t* gcc.dg/atomic/c11-atomic-exec-4.c: Call sched_yield.\n\t* gcc.dg/atomic/c11-atomic-exec-5.c: Likewise.\n\t* gcc.dg/atomic/pr80640-2.c: Likewise.\n\t* gcc.dg/atomic/pr80640.c: Likewise.\n\t* gcc.dg/atomic/pr81316.c: Likewise.\n\t* gcc.dg/di-sync-multithread.c: Likewise.", "tree": {"sha": "2bed70d683cb86ec17a69db55902c777b4cc7ae4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2bed70d683cb86ec17a69db55902c777b4cc7ae4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0a3bb459e59e61bc52218dc6aa41c746d309f6a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3bb459e59e61bc52218dc6aa41c746d309f6a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0a3bb459e59e61bc52218dc6aa41c746d309f6a2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0a3bb459e59e61bc52218dc6aa41c746d309f6a2/comments", "author": null, "committer": null, "parents": [{"sha": "486893b1d325d22d54c1380937943913a7501f91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/486893b1d325d22d54c1380937943913a7501f91", "html_url": "https://github.com/Rust-GCC/gccrs/commit/486893b1d325d22d54c1380937943913a7501f91"}], "stats": {"total": 47, "additions": 37, "deletions": 10}, "files": [{"sha": "669e7c058c39e410e3c8adc435b1c48e6eed3df2", "filename": "gcc/testsuite/gcc.dg/atomic/c11-atomic-exec-4.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3bb459e59e61bc52218dc6aa41c746d309f6a2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3bb459e59e61bc52218dc6aa41c746d309f6a2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-4.c?ref=0a3bb459e59e61bc52218dc6aa41c746d309f6a2", "patch": "@@ -32,7 +32,10 @@ test_thread_##NAME (void *arg)\t\t\t\t\t\t\\\n {\t\t\t\t\t\t\t\t\t\\\n   thread_ready = true;\t\t\t\t\t\t\t\\\n   for (int i = 0; i < ITER_COUNT; i++)\t\t\t\t\t\\\n-    PRE var_##NAME POST;\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      sched_yield ();\t\t\t\t\t\t\t\\\n+      PRE var_##NAME POST;\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   return NULL;\t\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n \t\t\t\t\t\t\t\t\t\\\n@@ -49,9 +52,12 @@ test_main_##NAME (void)\t\t\t\t\t\t\t\\\n       return 1;\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (!thread_ready)\t\t\t\t\t\t\t\\\n-    ;\t\t\t\t\t\t\t\t\t\\\n+    sched_yield ();\t\t\t\t\t\t\t\\\n   for (int i = 0; i < ITER_COUNT; i++)\t\t\t\t\t\\\n-    PRE var_##NAME POST;\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\t\\\n+      PRE var_##NAME POST;\t\t\t\t\t\t\\\n+      sched_yield ();\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\t\\\n   pthread_join (thread_id, NULL);\t\t\t\t\t\\\n   if (var_##NAME != (FINAL))\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\"}, {"sha": "f8bfa63b4cc8a693bb1352f0876368421a96a02b", "filename": "gcc/testsuite/gcc.dg/atomic/c11-atomic-exec-5.c", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3bb459e59e61bc52218dc6aa41c746d309f6a2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3bb459e59e61bc52218dc6aa41c746d309f6a2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fc11-atomic-exec-5.c?ref=0a3bb459e59e61bc52218dc6aa41c746d309f6a2", "patch": "@@ -53,8 +53,11 @@ test_thread_##NAME (void *arg)\t\t\t\t\t\t\\\n   thread_ready = true;\t\t\t\t\t\t\t\\\n   while (!thread_stop)\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n+      sched_yield ();\t\t\t\t\t\t\t\\\n       var_##NAME = (INIT1);\t\t\t\t\t\t\\\n+      sched_yield ();\t\t\t\t\t\t\t\\\n       var_##NAME = (INIT2);\t\t\t\t\t\t\\\n+      sched_yield ();\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   return NULL;\t\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\\n@@ -75,13 +78,14 @@ test_main_##NAME (void)\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   int num_1_pass = 0, num_1_fail = 0, num_2_pass = 0, num_2_fail = 0;\t\\\n   while (!thread_ready)\t\t\t\t\t\t\t\\\n-    ;\t\t\t\t\t\t\t\t\t\\\n+    sched_yield ();\t\t\t\t\t\t\t\\\n   for (int i = 0; i < ITER_COUNT; i++)\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       feclearexcept (FE_ALL_EXCEPT);\t\t\t\t\t\\\n       feraiseexcept (BEXC);\t\t\t\t\t\t\\\n       LHSTYPE r = (PRE var_##NAME POST);\t\t\t\t\\\n       int rexc = fetestexcept (TEST_ALL_EXCEPT);\t\t\t\\\n+      sched_yield ();\t\t\t\t\t\t\t\\\n       if (VALTEST1 (r))\t\t\t\t\t\t\t\\\n \t{\t\t\t\t\t\t\t\t\\\n \t  if (rexc == ((BEXC) | (EXC1)))\t\t\t\t\\"}, {"sha": "e33dcc386ab6f66ed13e09097183091d03e1117d", "filename": "gcc/testsuite/gcc.dg/atomic/pr80640-2.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3bb459e59e61bc52218dc6aa41c746d309f6a2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr80640-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3bb459e59e61bc52218dc6aa41c746d309f6a2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr80640-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr80640-2.c?ref=0a3bb459e59e61bc52218dc6aa41c746d309f6a2", "patch": "@@ -12,7 +12,8 @@ static void *f(void *va)\n   void **p = va;\n   if (*p) return *p;\n   sem1 = 1;\n-  while (!__atomic_load_n(&sem2, __ATOMIC_ACQUIRE));\n+  while (!__atomic_load_n(&sem2, __ATOMIC_ACQUIRE))\n+    sched_yield ();\n   // GCC used to RTL-CSE this and the first load, causing 0 to be returned\n   return *p;\n }\n@@ -23,7 +24,8 @@ int main()\n   pthread_t thr;\n   if (pthread_create(&thr, 0, f, &p))\n     return 2;\n-  while (!sem1);\n+  while (!sem1)\n+    sched_yield ();\n   __atomic_thread_fence(__ATOMIC_ACQUIRE);\n   p = &p;\n   __atomic_store_n(&sem2, 1, __ATOMIC_RELEASE);"}, {"sha": "2577e0ddf4f190b728f1f6e22b8af60cf923a0c3", "filename": "gcc/testsuite/gcc.dg/atomic/pr80640.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3bb459e59e61bc52218dc6aa41c746d309f6a2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr80640.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3bb459e59e61bc52218dc6aa41c746d309f6a2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr80640.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr80640.c?ref=0a3bb459e59e61bc52218dc6aa41c746d309f6a2", "patch": "@@ -12,7 +12,8 @@ static void *f(void *va)\n   void **p = va;\n   if (*p) return *p;\n   sem1 = 1;\n-  while (!sem2);\n+  while (!sem2)\n+    sched_yield ();\n   __atomic_thread_fence(__ATOMIC_ACQUIRE);\n   // GCC used to RTL-CSE this and the first load, causing 0 to be returned\n   return *p;\n@@ -24,7 +25,8 @@ int main()\n   pthread_t thr;\n   if (pthread_create(&thr, 0, f, &p))\n     return 2;\n-  while (!sem1);\n+  while (!sem1)\n+    sched_yield ();\n   __atomic_thread_fence(__ATOMIC_ACQUIRE);\n   p = &p;\n   __atomic_thread_fence(__ATOMIC_RELEASE);"}, {"sha": "dc6569a7253ac4babb9f2a5044906c39a1fa386d", "filename": "gcc/testsuite/gcc.dg/atomic/pr81316.c", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3bb459e59e61bc52218dc6aa41c746d309f6a2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr81316.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3bb459e59e61bc52218dc6aa41c746d309f6a2/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr81316.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic%2Fpr81316.c?ref=0a3bb459e59e61bc52218dc6aa41c746d309f6a2", "patch": "@@ -10,7 +10,8 @@ static _Atomic int sem1;\n static void *f(void *va)\n {\n   void **p = va;\n-  while (!__atomic_load_n(&sem1, __ATOMIC_ACQUIRE));\n+  while (!__atomic_load_n(&sem1, __ATOMIC_ACQUIRE))\n+    sched_yield ();\n   exit(!*p);\n }\n \n@@ -24,6 +25,10 @@ int main(int argc)\n   p = &p;\n   __atomic_store_n(&sem1, 1, __ATOMIC_RELEASE);\n   int r = -1;\n-  while (r < 0) asm(\"\":\"+r\"(r));\n+  while (r < 0)\n+    {\n+      sched_yield ();\n+      asm(\"\":\"+r\"(r));\n+    }\n   return r;\n }"}, {"sha": "1a97df7a9e63765f0e0be289f586bfcc8eee904f", "filename": "gcc/testsuite/gcc.dg/di-sync-multithread.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0a3bb459e59e61bc52218dc6aa41c746d309f6a2/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-sync-multithread.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0a3bb459e59e61bc52218dc6aa41c746d309f6a2/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-sync-multithread.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdi-sync-multithread.c?ref=0a3bb459e59e61bc52218dc6aa41c746d309f6a2", "patch": "@@ -70,6 +70,8 @@ worker (void* data)\n          case this to carry across the 32bit boundary.  */\n       for (tmp2 = 0; tmp2 < 64; tmp2++)\n \t{\n+\t  sched_yield ();\n+\n \t  /* Add 2 using the two different adds.  */\n \t  tmp1 = __sync_add_and_fetch (&workspace, add1bit);\n \t  tmp3 = __sync_fetch_and_add (&workspace, add1bit);\n@@ -103,6 +105,8 @@ worker (void* data)\n \n       for (tmp2 = 0; tmp2 < 64; tmp2++)\n \t{\n+\t  sched_yield ();\n+\n \t  /* Subtract 2 using the two different subs.  */\n \t  tmp1=__sync_sub_and_fetch (&workspace, add1bit);\n \t  tmp3=__sync_fetch_and_sub (&workspace, add1bit);\n@@ -178,6 +182,8 @@ main ()\n \tt, err);\n   };\n \n+  sched_yield ();\n+\n #ifdef _WIN32\n   Sleep (5000);\n #else\n@@ -187,6 +193,8 @@ main ()\n   /* Stop please.  */\n   __sync_lock_test_and_set (&doquit, 1ll);\n \n+  sched_yield ();\n+\n   for (t = 0; t < 3; t++)\n     {\n       err=pthread_join (threads[t], NULL);"}]}