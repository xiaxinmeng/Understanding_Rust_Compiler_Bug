{"sha": "b4e19405bc16c663afd58b08aeba3f8936679ffc", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjRlMTk0MDViYzE2YzY2M2FmZDU4YjA4YWViYTNmODkzNjY3OWZmYw==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2006-06-16T08:30:34Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2006-06-16T08:30:34Z"}, "message": "cgraph.h (struct cgraph_local_info): Turn bool elements into a bitfield.\n\n2006-06-16  Richard Guenther  <rguenther@suse.de>\n\n\t* cgraph.h (struct cgraph_local_info): Turn bool elements\n\tinto a bitfield.\n\t(struct cgraph_node): Likewise.\n\t(struct cgraph_varpool_node): Likewise.\n\nFrom-SVN: r114711", "tree": {"sha": "cbe5010f6c8a533a7d68fbc2975dd491c706e170", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cbe5010f6c8a533a7d68fbc2975dd491c706e170"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b4e19405bc16c663afd58b08aeba3f8936679ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e19405bc16c663afd58b08aeba3f8936679ffc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b4e19405bc16c663afd58b08aeba3f8936679ffc", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b4e19405bc16c663afd58b08aeba3f8936679ffc/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "81ee09de66d53b4b6c2bb3862b5b3199852b625c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81ee09de66d53b4b6c2bb3862b5b3199852b625c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81ee09de66d53b4b6c2bb3862b5b3199852b625c"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "0a86fc802f9bf2d9f342a89c12670185cfa46ef4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e19405bc16c663afd58b08aeba3f8936679ffc/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e19405bc16c663afd58b08aeba3f8936679ffc/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b4e19405bc16c663afd58b08aeba3f8936679ffc", "patch": "@@ -1,3 +1,10 @@\n+2006-06-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* cgraph.h (struct cgraph_local_info): Turn bool elements\n+\tinto a bitfield.\n+\t(struct cgraph_node): Likewise.\n+\t(struct cgraph_varpool_node): Likewise.\n+\n 2006-06-15  Richard Guenther  <rguenther@suse.de>\n \n \t* fold-const.c (fold_truth_not_expr): Rename from"}, {"sha": "3a1665f90a3eb9347bd0da527bc51f8419b9388a", "filename": "gcc/cgraph.h", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b4e19405bc16c663afd58b08aeba3f8936679ffc/gcc%2Fcgraph.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b4e19405bc16c663afd58b08aeba3f8936679ffc/gcc%2Fcgraph.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.h?ref=b4e19405bc16c663afd58b08aeba3f8936679ffc", "patch": "@@ -56,31 +56,31 @@ struct cgraph_local_info GTY(())\n \n   /* Set when function function is visible in current compilation unit only\n      and its address is never taken.  */\n-  bool local;\n+  unsigned local : 1;\n \n   /* Set when function is visible by other units.  */\n-  bool externally_visible;\n+  unsigned externally_visible : 1;\n \n   /* Set once it has been finalized so we consider it to be output.  */\n-  bool finalized;\n+  unsigned finalized : 1;\n \n   /* False when there something makes inlining impossible (such as va_arg).  */\n-  bool inlinable;\n+  unsigned inlinable : 1;\n \n   /* True when function should be inlined independently on its size.  */\n-  bool disregard_inline_limits;\n+  unsigned disregard_inline_limits : 1;\n \n   /* True when the function has been originally extern inline, but it is\n      redefined now.  */\n-  bool redefined_extern_inline;\n+  unsigned redefined_extern_inline : 1;\n \n   /* True if statics_read_for_function and\n      statics_written_for_function contain valid data.  */\n-  bool for_functions_valid;\n+  unsigned for_functions_valid : 1;\n \n   /* True if the function is going to be emitted in some other translation\n      unit, referenced from vtable.  */\n-  bool vtable_method;\n+  unsigned vtable_method : 1;\n };\n \n /* Information about the function that needs to be computed globally\n@@ -146,23 +146,24 @@ struct cgraph_node GTY((chain_next (\"%h.next\"), chain_prev (\"%h.previous\")))\n   int uid;\n   /* Ordering of all cgraph nodes.  */\n   int order;\n+\n   /* Set when function must be output - it is externally visible\n      or its address is taken.  */\n-  bool needed;\n+  unsigned needed : 1;\n   /* Set when function is reachable by call from other function\n      that is either reachable or needed.  */\n-  bool reachable;\n+  unsigned reachable : 1;\n   /* Set once the function is lowered (i.e. its CFG is built).  */\n-  bool lowered;\n+  unsigned lowered : 1;\n   /* Set once the function has been instantiated and its callee\n      lists created.  */\n-  bool analyzed;\n+  unsigned analyzed : 1;\n   /* Set when function is scheduled to be assembled.  */\n-  bool output;\n+  unsigned output : 1;\n   /* Set when function is visible by other units.  */\n-  bool externally_visible;\n+  unsigned externally_visible : 1;\n   /* Set for aliases once they got through assemble_alias.  */\n-  bool alias;\n+  unsigned alias : 1;\n \n   /* In non-unit-at-a-time mode the function body of inline candidates is saved\n      into clone before compiling so the function in original form can be\n@@ -209,21 +210,21 @@ struct cgraph_varpool_node GTY(())\n \n   /* Set when function must be output - it is externally visible\n      or its address is taken.  */\n-  bool needed;\n+  unsigned needed : 1;\n   /* Needed variables might become dead by optimization.  This flag\n      forces the variable to be output even if it appears dead otherwise.  */\n-  bool force_output;\n+  unsigned force_output : 1;\n   /* Set once the variable has been instantiated and its callee\n      lists created.  */\n-  bool analyzed;\n+  unsigned analyzed : 1;\n   /* Set once it has been finalized so we consider it to be output.  */\n-  bool finalized;\n+  unsigned finalized : 1;\n   /* Set when variable is scheduled to be assembled.  */\n-  bool output;\n+  unsigned output : 1;\n   /* Set when function is visible by other units.  */\n-  bool externally_visible;\n+  unsigned externally_visible : 1;\n   /* Set for aliases once they got through assemble_alias.  */\n-  bool alias;\n+  unsigned alias : 1;\n };\n \n /* Every top level asm statement is put into a cgraph_asm_node.  */"}]}