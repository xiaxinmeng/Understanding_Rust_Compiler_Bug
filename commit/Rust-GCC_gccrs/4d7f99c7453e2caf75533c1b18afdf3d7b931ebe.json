{"sha": "4d7f99c7453e2caf75533c1b18afdf3d7b931ebe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGQ3Zjk5Yzc0NTNlMmNhZjc1NTMzYzFiMThhZmRmM2Q3YjkzMWViZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2011-05-23T15:32:39Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2011-05-23T15:32:39Z"}, "message": "re PR libstdc++/49058 ([C++0x] Bind no-arguments functor failed using std::bind with -pedantic option.)\n\n\tPR c++/49058\n\t* call.c (splice_viable): Be strict in templates.\n\nFrom-SVN: r174073", "tree": {"sha": "408da199f5363260069631ac8fcc8abf25a61d69", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/408da199f5363260069631ac8fcc8abf25a61d69"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4d7f99c7453e2caf75533c1b18afdf3d7b931ebe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7f99c7453e2caf75533c1b18afdf3d7b931ebe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d7f99c7453e2caf75533c1b18afdf3d7b931ebe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d7f99c7453e2caf75533c1b18afdf3d7b931ebe/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "42d1e31d0f0352009d851f52a9cfd5273ad303f8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42d1e31d0f0352009d851f52a9cfd5273ad303f8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42d1e31d0f0352009d851f52a9cfd5273ad303f8"}], "stats": {"total": 39, "additions": 39, "deletions": 0}, "files": [{"sha": "cfb6b58065c46357ae1b7fad013555eb05c53c59", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7f99c7453e2caf75533c1b18afdf3d7b931ebe/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7f99c7453e2caf75533c1b18afdf3d7b931ebe/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4d7f99c7453e2caf75533c1b18afdf3d7b931ebe", "patch": "@@ -1,5 +1,8 @@\n 2011-05-23  Jason Merrill  <jason@redhat.com>\n \n+\tPR c++/49058\n+\t* call.c (splice_viable): Be strict in templates.\n+\n \tPR c++/47336\n \t* error.c (dump_template_bindings): Suppress access control.\n "}, {"sha": "8503f5ebabfb8fafbd9a0837d8d281048de363ca", "filename": "gcc/cp/call.c", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7f99c7453e2caf75533c1b18afdf3d7b931ebe/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7f99c7453e2caf75533c1b18afdf3d7b931ebe/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=4d7f99c7453e2caf75533c1b18afdf3d7b931ebe", "patch": "@@ -3009,6 +3009,11 @@ splice_viable (struct z_candidate *cands,\n   struct z_candidate **last_viable;\n   struct z_candidate **cand;\n \n+  /* Be strict inside templates, since build_over_call won't actually\n+     do the conversions to get pedwarns.  */\n+  if (processing_template_decl)\n+    strict_p = true;\n+\n   viable = NULL;\n   last_viable = &viable;\n   *any_viable_p = false;"}, {"sha": "c41c7f607533f6a090667c69745a35c5c9469326", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7f99c7453e2caf75533c1b18afdf3d7b931ebe/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7f99c7453e2caf75533c1b18afdf3d7b931ebe/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4d7f99c7453e2caf75533c1b18afdf3d7b931ebe", "patch": "@@ -1,5 +1,7 @@\n 2011-05-23  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/sfinae24.C: New.\n+\n \t* g++.dg/cpp0x/error3.C: New.\n \n \t* g++.dg/cpp0x/defaulted27.C: New."}, {"sha": "3e1d2e725b0cfcedf0a1a1736c68f1555b3dc778", "filename": "gcc/testsuite/g++.dg/cpp0x/sfinae24.C", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4d7f99c7453e2caf75533c1b18afdf3d7b931ebe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae24.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4d7f99c7453e2caf75533c1b18afdf3d7b931ebe/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae24.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fsfinae24.C?ref=4d7f99c7453e2caf75533c1b18afdf3d7b931ebe", "patch": "@@ -0,0 +1,29 @@\n+// PR c++/49058\n+// This error is not subject to SFINAE because it doesn't happen in the\n+// deduction context.\n+// { dg-options -std=c++0x }\n+// { dg-prune-output \"note\" }\n+\n+template<typename T> T val();\n+\n+struct F1\n+{\n+    void operator()();\n+};\n+\n+template<typename F>\n+struct Bind\n+{\n+    template<typename R\n+      = decltype( val<F>()( ) )>\n+    R f();\n+\n+    template<typename R\n+      = decltype( val<const F>()( ) )>\n+    R f() const;\t\t// { dg-error \"no match\" }\n+};\n+\n+int main()\n+{\n+  Bind<F1> b;\n+}"}]}