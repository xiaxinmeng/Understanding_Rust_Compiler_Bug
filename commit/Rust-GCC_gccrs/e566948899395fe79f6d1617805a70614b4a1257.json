{"sha": "e566948899395fe79f6d1617805a70614b4a1257", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTU2Njk0ODg5OTM5NWZlNzlmNmQxNjE3ODA1YTcwNjE0YjRhMTI1Nw==", "commit": {"author": {"name": "Georg-Johann Lay", "email": "avr@gjlay.de", "date": "2013-01-07T18:34:40Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2013-01-07T18:34:40Z"}, "message": "re PR target/55897 ([avr] Allocate __memx data to .progmemx.data)\n\n\tPR target/55897\n\t* config/avr/avr.h (ADDR_SPACE_COUNT): New enum.\n\t(avr_addrspace_t): Add .section_name field.\n\t* config/avr/avr.c (progmem_section): Use ADDR_SPACE_COUNT as\n\tarray size.\n\t(avr_addrspace): Same.  Initialize .section_name.  Remove last\n\tNULL entry.  Put __memx into .progmemx.data.\n\t(progmem_section_prefix): Remove.\n\t(avr_asm_init_sections): No need to initialize progmem_section.\n\t(avr_asm_named_section): Use avr_addrspace[].section_name to get\n\tsection name prefix.\n\t(avr_asm_select_section): Ditto.  And use get_unnamed_section to\n\tretrieve the progmem section.\n\t* avr-c.c (avr_cpu_cpp_builtins): Use ADDR_SPACE_COUNT as loop\n\tboundary to run over avr_addrspace[].\n\t(avr_register_target_pragmas): Ditto.\n\nFrom-SVN: r194991", "tree": {"sha": "c4a686603df3d3afcc60f7804405c9534c0e7993", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4a686603df3d3afcc60f7804405c9534c0e7993"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e566948899395fe79f6d1617805a70614b4a1257", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e566948899395fe79f6d1617805a70614b4a1257", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e566948899395fe79f6d1617805a70614b4a1257", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e566948899395fe79f6d1617805a70614b4a1257/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e35e87dc46b7e9ad4486987db50587e33e643802", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e35e87dc46b7e9ad4486987db50587e33e643802", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e35e87dc46b7e9ad4486987db50587e33e643802"}], "stats": {"total": 102, "additions": 59, "deletions": 43}, "files": [{"sha": "f79f53b9de267b26a71bda41e10c27c979b10412", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e566948899395fe79f6d1617805a70614b4a1257/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e566948899395fe79f6d1617805a70614b4a1257/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e566948899395fe79f6d1617805a70614b4a1257", "patch": "@@ -1,3 +1,22 @@\n+2013-01-07  Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/55897\n+\t* config/avr/avr.h (ADDR_SPACE_COUNT): New enum.\n+\t(avr_addrspace_t): Add .section_name field.\n+\t* config/avr/avr.c (progmem_section): Use ADDR_SPACE_COUNT as\n+\tarray size.\n+\t(avr_addrspace): Same.  Initialize .section_name.  Remove last\n+\tNULL entry.  Put __memx into .progmemx.data.\n+\t(progmem_section_prefix): Remove.\n+\t(avr_asm_init_sections): No need to initialize progmem_section.\n+\t(avr_asm_named_section): Use avr_addrspace[].section_name to get\n+\tsection name prefix.\n+\t(avr_asm_select_section): Ditto.  And use get_unnamed_section to\n+\tretrieve the progmem section.\n+\t* avr-c.c (avr_cpu_cpp_builtins): Use ADDR_SPACE_COUNT as loop\n+\tboundary to run over avr_addrspace[].\n+\t(avr_register_target_pragmas): Ditto.\n+\n 2013-01-06  Jakub Jelinek  <jakub@redhat.com>\n \n \t* varasm.c (output_constant_def_contents): For asan_protect_global"}, {"sha": "c872e5ccd54d1c93c34f578f5d5491a964b2cad6", "filename": "gcc/config/avr/avr-c.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e566948899395fe79f6d1617805a70614b4a1257/gcc%2Fconfig%2Favr%2Favr-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e566948899395fe79f6d1617805a70614b4a1257/gcc%2Fconfig%2Favr%2Favr-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr-c.c?ref=e566948899395fe79f6d1617805a70614b4a1257", "patch": "@@ -43,7 +43,7 @@ avr_register_target_pragmas (void)\n   /* Register address spaces.  The order must be the same as in the respective\n      enum from avr.h (or designated initialized must be used in avr.c).  */\n \n-  for (i = 0; avr_addrspace[i].name; i++)\n+  for (i = 0; i < ADDR_SPACE_COUNT; i++)\n     {\n       gcc_assert (i == avr_addrspace[i].id);\n \n@@ -160,7 +160,7 @@ avr_cpu_cpp_builtins (struct cpp_reader *pfile)\n   \n   if (!strcmp (lang_hooks.name, \"GNU C\"))\n     {\n-      for (i = 0; avr_addrspace[i].name; i++)\n+      for (i = 0; i < ADDR_SPACE_COUNT; i++)\n         if (!ADDR_SPACE_GENERIC_P (i)\n             /* Only supply __FLASH<n> macro if the address space is reasonable\n                for this target.  The address space qualifier itself is still"}, {"sha": "669c1432e5a9a1f7843ea52523307494dd7ef3d7", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 31, "deletions": 39, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e566948899395fe79f6d1617805a70614b4a1257/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e566948899395fe79f6d1617805a70614b4a1257/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=e566948899395fe79f6d1617805a70614b4a1257", "patch": "@@ -80,29 +80,18 @@\n \n /* Known address spaces.  The order must be the same as in the respective\n    enum from avr.h (or designated initialized must be used).  */\n-const avr_addrspace_t avr_addrspace[] =\n-{\n-    { ADDR_SPACE_RAM,  0, 2, \"\"     ,   0 },\n-    { ADDR_SPACE_FLASH,  1, 2, \"__flash\",   0 },\n-    { ADDR_SPACE_FLASH1, 1, 2, \"__flash1\",  1 },\n-    { ADDR_SPACE_FLASH2, 1, 2, \"__flash2\",  2 },\n-    { ADDR_SPACE_FLASH3, 1, 2, \"__flash3\",  3 },\n-    { ADDR_SPACE_FLASH4, 1, 2, \"__flash4\",  4 },\n-    { ADDR_SPACE_FLASH5, 1, 2, \"__flash5\",  5 },\n-    { ADDR_SPACE_MEMX, 1, 3, \"__memx\",  0 },\n-    { 0              , 0, 0, NULL,      0 }\n+const avr_addrspace_t avr_addrspace[ADDR_SPACE_COUNT] =\n+{\n+  { ADDR_SPACE_RAM,  0, 2, \"\", 0, NULL },\n+  { ADDR_SPACE_FLASH,  1, 2, \"__flash\",   0, \".progmem.data\" },\n+  { ADDR_SPACE_FLASH1, 1, 2, \"__flash1\",  1, \".progmem1.data\" },\n+  { ADDR_SPACE_FLASH2, 1, 2, \"__flash2\",  2, \".progmem2.data\" },\n+  { ADDR_SPACE_FLASH3, 1, 2, \"__flash3\",  3, \".progmem3.data\" },\n+  { ADDR_SPACE_FLASH4, 1, 2, \"__flash4\",  4, \".progmem4.data\" },\n+  { ADDR_SPACE_FLASH5, 1, 2, \"__flash5\",  5, \".progmem5.data\" },\n+  { ADDR_SPACE_MEMX, 1, 3, \"__memx\",  0, \".progmemx.data\" },\n };\n \n-/* Map 64-k Flash segment to section prefix.  */\n-static const char* const progmem_section_prefix[6] =\n-  {\n-    \".progmem.data\",\n-    \".progmem1.data\",\n-    \".progmem2.data\",\n-    \".progmem3.data\",\n-    \".progmem4.data\",\n-    \".progmem5.data\"\n-  };\n \n /* Holding RAM addresses of some SFRs used by the compiler and that\n    are unique over all devices in an architecture like 'avr4'.  */\n@@ -205,8 +194,9 @@ const struct mcu_type_s *avr_current_device;\n static GTY(()) section *progmem_swtable_section;\n \n /* Unnamed sections associated to __attribute__((progmem)) aka. PROGMEM\n-   or to address space __flash*.  */\n-static GTY(()) section *progmem_section[6];\n+   or to address space __flash* or __memx.  Only used as singletons inside\n+   avr_asm_select_section, but it must not be local there because of GTY.  */\n+static GTY(()) section *progmem_section[ADDR_SPACE_COUNT];\n \n /* Condition for insns/expanders from avr-dimode.md.  */\n bool avr_have_dimode = true;\n@@ -8107,8 +8097,6 @@ avr_output_progmem_section_asm_op (const void *data)\n static void\n avr_asm_init_sections (void)\n {\n-  unsigned int n;\n-  \n   /* Set up a section for jump tables.  Alignment is handled by\n      ASM_OUTPUT_BEFORE_CASE_LABEL.  */\n   \n@@ -8127,13 +8115,6 @@ avr_asm_init_sections (void)\n                                \",\\\"ax\\\",@progbits\");\n     }\n \n-  for (n = 0; n < sizeof (progmem_section) / sizeof (*progmem_section); n++)\n-    {\n-      progmem_section[n]\n-        = get_unnamed_section (0, avr_output_progmem_section_asm_op,\n-                               progmem_section_prefix[n]);\n-    }\n-  \n   /* Override section callbacks to keep track of `avr_need_clear_bss_p'\n      resp. `avr_need_copy_data_p'.  */\n   \n@@ -8211,10 +8192,9 @@ avr_asm_named_section (const char *name, unsigned int flags, tree decl)\n   if (flags & AVR_SECTION_PROGMEM)\n     {\n       addr_space_t as = (flags & AVR_SECTION_PROGMEM) / SECTION_MACH_DEP;\n-      int segment = avr_addrspace[as].segment;\n       const char *old_prefix = \".rodata\";\n-      const char *new_prefix = progmem_section_prefix[segment];\n-      \n+      const char *new_prefix = avr_addrspace[as].section_name;\n+\n       if (STR_PREFIX_P (name, old_prefix))\n         {\n           const char *sname = ACONCAT ((new_prefix,\n@@ -8326,13 +8306,18 @@ avr_asm_select_section (tree decl, int reloc, unsigned HOST_WIDE_INT align)\n       && avr_progmem_p (decl, DECL_ATTRIBUTES (decl)))\n     {\n       addr_space_t as = TYPE_ADDR_SPACE (TREE_TYPE (decl));\n-      int segment = avr_addrspace[as].segment;\n+\n+      /* __progmem__ goes in generic space but shall be allocated to\n+         .progmem.data  */\n+\n+      if (ADDR_SPACE_GENERIC_P (as))\n+        as = ADDR_SPACE_FLASH;\n       \n       if (sect->common.flags & SECTION_NAMED)\n         {\n           const char * name = sect->named.name;\n           const char * old_prefix = \".rodata\";\n-          const char * new_prefix = progmem_section_prefix[segment];\n+          const char * new_prefix = avr_addrspace[as].section_name;\n \n           if (STR_PREFIX_P (name, old_prefix))\n             {\n@@ -8341,8 +8326,15 @@ avr_asm_select_section (tree decl, int reloc, unsigned HOST_WIDE_INT align)\n               return get_section (sname, sect->common.flags, sect->named.decl);\n             }\n         }\n-          \n-      return progmem_section[segment];\n+\n+      if (!progmem_section[as])\n+        {\n+          progmem_section[as]\n+            = get_unnamed_section (0, avr_output_progmem_section_asm_op,\n+                                   avr_addrspace[as].section_name);\n+        }\n+\n+      return progmem_section[as];\n     }\n \n   return sect;"}, {"sha": "32f0e4897164014d5d5cc2c489065244a48060f2", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e566948899395fe79f6d1617805a70614b4a1257/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e566948899395fe79f6d1617805a70614b4a1257/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=e566948899395fe79f6d1617805a70614b4a1257", "patch": "@@ -37,6 +37,9 @@ typedef struct\n \n   /* Segment (i.e. 64k memory chunk) number.  */\n   int segment;\n+\n+  /* Section prefix, e.g. \".progmem1.data\"  */\n+  const char *section_name;\n } avr_addrspace_t;\n \n extern const avr_addrspace_t avr_addrspace[];\n@@ -45,14 +48,16 @@ extern const avr_addrspace_t avr_addrspace[];\n \n enum\n   {\n-    ADDR_SPACE_RAM,\n+    ADDR_SPACE_RAM, /* ADDR_SPACE_GENERIC */\n     ADDR_SPACE_FLASH,\n     ADDR_SPACE_FLASH1,\n     ADDR_SPACE_FLASH2,\n     ADDR_SPACE_FLASH3,\n     ADDR_SPACE_FLASH4,\n     ADDR_SPACE_FLASH5,\n-    ADDR_SPACE_MEMX\n+    ADDR_SPACE_MEMX,\n+    /* Sentinel */\n+    ADDR_SPACE_COUNT\n   };\n \n #define TARGET_CPU_CPP_BUILTINS()\tavr_cpu_cpp_builtins (pfile)"}]}