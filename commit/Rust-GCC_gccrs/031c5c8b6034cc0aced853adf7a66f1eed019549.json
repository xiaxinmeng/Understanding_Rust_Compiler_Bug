{"sha": "031c5c8b6034cc0aced853adf7a66f1eed019549", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDMxYzVjOGI2MDM0Y2MwYWNlZDg1M2FkZjdhNjZmMWVlZDAxOTU0OQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2019-02-21T11:00:47Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2019-02-21T11:00:47Z"}, "message": "[omp] Move NE_EXPR handling to omp_adjust_for_condition\n\n2019-02-21  Martin Jambor  <mjambor@suse.cz>\n\n\tPR hsa/89302\n\t* omp-general.c (omp_extract_for_data): Removed a duplicate call\n\tto omp_adjust_for_condition, moved NE_EXPR code_cond processing...\n\t(omp_adjust_for_condition): ...here.  Added necessary parameters.\n\t* omp-general.h (omp_adjust_for_condition): Updated declaration.\n\t* omp-grid.c (grid_attempt_target_gridification): Adjust to pass\n\tproper values to new parameters of omp_adjust_for_condition.\n\nFrom-SVN: r269066", "tree": {"sha": "6cbac7f13f7b1c073387e8bc78b3d7ffa656567f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6cbac7f13f7b1c073387e8bc78b3d7ffa656567f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/031c5c8b6034cc0aced853adf7a66f1eed019549", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/031c5c8b6034cc0aced853adf7a66f1eed019549", "html_url": "https://github.com/Rust-GCC/gccrs/commit/031c5c8b6034cc0aced853adf7a66f1eed019549", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/031c5c8b6034cc0aced853adf7a66f1eed019549/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "0864e3fcb6ffbb47de637600fa5f632aa1700ed3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0864e3fcb6ffbb47de637600fa5f632aa1700ed3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0864e3fcb6ffbb47de637600fa5f632aa1700ed3"}], "stats": {"total": 88, "additions": 50, "deletions": 38}, "files": [{"sha": "54a1d928b7149c0d970ef8cbcb2cafa4a5f60fdf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031c5c8b6034cc0aced853adf7a66f1eed019549/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031c5c8b6034cc0aced853adf7a66f1eed019549/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=031c5c8b6034cc0aced853adf7a66f1eed019549", "patch": "@@ -1,3 +1,13 @@\n+2019-02-21  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR hsa/89302\n+\t* omp-general.c (omp_extract_for_data): Removed a duplicate call\n+\tto omp_adjust_for_condition, moved NE_EXPR code_cond processing...\n+\t(omp_adjust_for_condition): ...here.  Added necessary parameters.\n+\t* omp-general.h (omp_adjust_for_condition): Updated declaration.\n+\t* omp-grid.c (grid_attempt_target_gridification): Adjust to pass\n+\tproper values to new parameters of omp_adjust_for_condition.\n+\n 2019-02-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR middle-end/89412"}, {"sha": "0f66ba0c5d86e173fe991cd9b6071532f8c39d8a", "filename": "gcc/omp-general.c", "status": "modified", "additions": 34, "deletions": 33, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031c5c8b6034cc0aced853adf7a66f1eed019549/gcc%2Fomp-general.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031c5c8b6034cc0aced853adf7a66f1eed019549/gcc%2Fomp-general.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.c?ref=031c5c8b6034cc0aced853adf7a66f1eed019549", "patch": "@@ -56,18 +56,47 @@ omp_is_reference (tree decl)\n   return lang_hooks.decls.omp_privatize_by_reference (decl);\n }\n \n-/* Adjust *COND_CODE and *N2 so that the former is either LT_EXPR or\n-   GT_EXPR.  */\n+/* Adjust *COND_CODE and *N2 so that the former is either LT_EXPR or GT_EXPR,\n+   given that V is the loop index variable and STEP is loop step. */\n \n void\n-omp_adjust_for_condition (location_t loc, enum tree_code *cond_code, tree *n2)\n+omp_adjust_for_condition (location_t loc, enum tree_code *cond_code, tree *n2,\n+\t\t\t  tree v, tree step)\n {\n   switch (*cond_code)\n     {\n     case LT_EXPR:\n     case GT_EXPR:\n+      break;\n+\n     case NE_EXPR:\n+      gcc_assert (TREE_CODE (step) == INTEGER_CST);\n+      if (TREE_CODE (TREE_TYPE (v)) == INTEGER_TYPE)\n+\t{\n+\t  if (integer_onep (step))\n+\t    *cond_code = LT_EXPR;\n+\t  else\n+\t    {\n+\t      gcc_assert (integer_minus_onep (step));\n+\t      *cond_code = GT_EXPR;\n+\t    }\n+\t}\n+      else\n+\t{\n+\t  tree unit = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (v)));\n+\t  gcc_assert (TREE_CODE (unit) == INTEGER_CST);\n+\t  if (tree_int_cst_equal (unit, step))\n+\t    *cond_code = LT_EXPR;\n+\t  else\n+\t    {\n+\t      gcc_assert (wi::neg (wi::to_widest (unit))\n+\t\t\t  == wi::to_widest (step));\n+\t      *cond_code = GT_EXPR;\n+\t    }\n+\t}\n+\n       break;\n+\n     case LE_EXPR:\n       if (POINTER_TYPE_P (TREE_TYPE (*n2)))\n \t*n2 = fold_build_pointer_plus_hwi_loc (loc, *n2, 1);\n@@ -258,41 +287,13 @@ omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n       gcc_assert (loop->cond_code != NE_EXPR\n \t\t  || (gimple_omp_for_kind (for_stmt)\n \t\t      != GF_OMP_FOR_KIND_OACC_LOOP));\n-      omp_adjust_for_condition (loc, &loop->cond_code, &loop->n2);\n \n       t = gimple_omp_for_incr (for_stmt, i);\n       gcc_assert (TREE_OPERAND (t, 0) == var);\n       loop->step = omp_get_for_step_from_incr (loc, t);\n \n-      if (loop->cond_code == NE_EXPR)\n-\t{\n-\t  gcc_assert (TREE_CODE (loop->step) == INTEGER_CST);\n-\t  if (TREE_CODE (TREE_TYPE (loop->v)) == INTEGER_TYPE)\n-\t    {\n-\t      if (integer_onep (loop->step))\n-\t\tloop->cond_code = LT_EXPR;\n-\t      else\n-\t\t{\n-\t\t  gcc_assert (integer_minus_onep (loop->step));\n-\t\t  loop->cond_code = GT_EXPR;\n-\t\t}\n-\t    }\n-\t  else\n-\t    {\n-\t      tree unit = TYPE_SIZE_UNIT (TREE_TYPE (TREE_TYPE (loop->v)));\n-\t      gcc_assert (TREE_CODE (unit) == INTEGER_CST);\n-\t      if (tree_int_cst_equal (unit, loop->step))\n-\t\tloop->cond_code = LT_EXPR;\n-\t      else\n-\t\t{\n-\t\t  gcc_assert (wi::neg (wi::to_widest (unit))\n-\t\t\t      == wi::to_widest (loop->step));\n-\t\t  loop->cond_code = GT_EXPR;\n-\t\t}\n-\t    }\n-\t}\n-\n-      omp_adjust_for_condition (loc, &loop->cond_code, &loop->n2);\n+      omp_adjust_for_condition (loc, &loop->cond_code, &loop->n2, loop->v,\n+\t\t\t\tloop->step);\n \n       if (simd\n \t  || (fd->sched_kind == OMP_CLAUSE_SCHEDULE_STATIC"}, {"sha": "0cbbb31e73bb240e9cd40c8837f31bffa9e16ecd", "filename": "gcc/omp-general.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031c5c8b6034cc0aced853adf7a66f1eed019549/gcc%2Fomp-general.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031c5c8b6034cc0aced853adf7a66f1eed019549/gcc%2Fomp-general.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-general.h?ref=031c5c8b6034cc0aced853adf7a66f1eed019549", "patch": "@@ -73,7 +73,7 @@ struct omp_for_data\n extern tree omp_find_clause (tree clauses, enum omp_clause_code kind);\n extern bool omp_is_reference (tree decl);\n extern void omp_adjust_for_condition (location_t loc, enum tree_code *cond_code,\n-\t\t\t\t      tree *n2);\n+\t\t\t\t      tree *n2, tree v, tree step);\n extern tree omp_get_for_step_from_incr (location_t loc, tree incr);\n extern void omp_extract_for_data (gomp_for *for_stmt, struct omp_for_data *fd,\n \t\t\t\t  struct omp_for_data_loop *loops);"}, {"sha": "1ff65aa160cd9cc385c6668d0d07d8946c233e2f", "filename": "gcc/omp-grid.c", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/031c5c8b6034cc0aced853adf7a66f1eed019549/gcc%2Fomp-grid.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/031c5c8b6034cc0aced853adf7a66f1eed019549/gcc%2Fomp-grid.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-grid.c?ref=031c5c8b6034cc0aced853adf7a66f1eed019549", "patch": "@@ -1303,7 +1303,8 @@ grid_attempt_target_gridification (gomp_target *target,\n   push_gimplify_context ();\n   for (size_t i = 0; i < grid.collapse; i++)\n     {\n-      tree itype, type = TREE_TYPE (gimple_omp_for_index (inner_loop, i));\n+      tree index_var = gimple_omp_for_index (inner_loop, i);\n+      tree itype, type = TREE_TYPE (index_var);\n       if (POINTER_TYPE_P (type))\n \titype = signed_type_for (type);\n       else\n@@ -1314,13 +1315,13 @@ grid_attempt_target_gridification (gomp_target *target,\n       walk_tree (&n1, grid_remap_prebody_decls, &wi, NULL);\n       tree n2 = unshare_expr (gimple_omp_for_final (inner_loop, i));\n       walk_tree (&n2, grid_remap_prebody_decls, &wi, NULL);\n-      omp_adjust_for_condition (loc, &cond_code, &n2);\n+      tree step\n+\t= omp_get_for_step_from_incr (loc, gimple_omp_for_incr (inner_loop, i));\n+      omp_adjust_for_condition (loc, &cond_code, &n2, index_var, step);\n       n1 = fold_convert (itype, n1);\n       n2 = fold_convert (itype, n2);\n \n       tree cond = fold_build2 (cond_code, boolean_type_node, n1, n2);\n-      tree step\n-\t= omp_get_for_step_from_incr (loc, gimple_omp_for_incr (inner_loop, i));\n \n       tree t = build_int_cst (itype, (cond_code == LT_EXPR ? -1 : 1));\n       t = fold_build2 (PLUS_EXPR, itype, step, t);"}]}