{"sha": "a2bef74c1bfdea615812953cbbadd6e39ab63f45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTJiZWY3NGMxYmZkZWE2MTU4MTI5NTNjYmJhZGQ2ZTM5YWI2M2Y0NQ==", "commit": {"author": {"name": "Daniel Franke", "email": "franke.daniel@gmail.com", "date": "2007-07-13T08:04:04Z"}, "committer": {"name": "Daniel Franke", "email": "dfranke@gcc.gnu.org", "date": "2007-07-13T08:04:04Z"}, "message": "invoke.texi: Unified upper- and lower-case in menus.\n\n2007-07-13  Daniel Franke  <franke.daniel@gmail.com>\n\n        * invoke.texi: Unified upper- and lower-case in menus.\n        (-w, -W): Removed, documented by gcc.\n        * intrinsic.texi: Unified Class-section entries, added\n        subroutine/function warning where appropiate.\n\nFrom-SVN: r126614", "tree": {"sha": "c5a034798b13af60c52207bbdfd2f80e82a989e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5a034798b13af60c52207bbdfd2f80e82a989e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a2bef74c1bfdea615812953cbbadd6e39ab63f45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2bef74c1bfdea615812953cbbadd6e39ab63f45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a2bef74c1bfdea615812953cbbadd6e39ab63f45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a2bef74c1bfdea615812953cbbadd6e39ab63f45/comments", "author": {"login": "dfranke76", "id": 15729164, "node_id": "MDQ6VXNlcjE1NzI5MTY0", "avatar_url": "https://avatars.githubusercontent.com/u/15729164?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dfranke76", "html_url": "https://github.com/dfranke76", "followers_url": "https://api.github.com/users/dfranke76/followers", "following_url": "https://api.github.com/users/dfranke76/following{/other_user}", "gists_url": "https://api.github.com/users/dfranke76/gists{/gist_id}", "starred_url": "https://api.github.com/users/dfranke76/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dfranke76/subscriptions", "organizations_url": "https://api.github.com/users/dfranke76/orgs", "repos_url": "https://api.github.com/users/dfranke76/repos", "events_url": "https://api.github.com/users/dfranke76/events{/privacy}", "received_events_url": "https://api.github.com/users/dfranke76/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1617e5eedcc094ee8eb18dc3d3b0df3f2cbd546b"}], "stats": {"total": 210, "additions": 115, "deletions": 95}, "files": [{"sha": "9b0a0a440d2e45dc5f1906a13a757832ece1f183", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2bef74c1bfdea615812953cbbadd6e39ab63f45/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2bef74c1bfdea615812953cbbadd6e39ab63f45/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a2bef74c1bfdea615812953cbbadd6e39ab63f45", "patch": "@@ -1,3 +1,10 @@\n+2007-07-13  Daniel Franke  <franke.daniel@gmail.com>\n+\n+\t* invoke.texi: Unified upper- and lower-case in menus.\n+\t(-w, -W): Removed, documented by gcc.\n+\t* intrinsic.texi: Unified Class-section entries, added\n+\tsubroutine/function warning where appropiate.\n+\n 2007-07-12  Daniel Franke  <franke.daniel@gmail.com>\n \n \tPR fortran/31639"}, {"sha": "fb74e1bcfdcd08a706e60708dec8df25ba4541fe", "filename": "gcc/fortran/intrinsic.texi", "status": "modified", "additions": 87, "deletions": 61, "changes": 148, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2bef74c1bfdea615812953cbbadd6e39ab63f45/gcc%2Ffortran%2Fintrinsic.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2bef74c1bfdea615812953cbbadd6e39ab63f45/gcc%2Ffortran%2Fintrinsic.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fintrinsic.texi?ref=a2bef74c1bfdea615812953cbbadd6e39ab63f45", "patch": "@@ -314,7 +314,7 @@ which is suitable for debugging purposes.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental subroutine\n+Subroutine\n \n @item @emph{Syntax}:\n @code{CALL ABORT}\n@@ -876,7 +876,7 @@ in the array along dimension @var{DIM}.\n F95 and later\n \n @item @emph{Class}:\n-transformational function\n+Transformational function\n \n @item @emph{Syntax}:\n @code{RESULT = ALL(MASK [, DIM])}\n@@ -986,7 +986,7 @@ the use of the @ref{IAND} intrinsic defined by the Fortran standard.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = AND(I, J)}\n@@ -1090,7 +1090,7 @@ end program test_anint\n F95 and later\n \n @item @emph{Class}:\n-transformational function\n+Transformational function\n \n @item @emph{Syntax}:\n @code{RESULT = ANY(MASK [, DIM])}\n@@ -2221,7 +2221,7 @@ only one form can be used in any given program unit.\n GNU extension\n \n @item @emph{Class}:\n-Subroutine, non-elemental function\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -2273,7 +2273,7 @@ only one form can be used in any given program unit.\n GNU extension\n \n @item @emph{Class}:\n-Subroutine, non-elemental function\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -2310,7 +2310,7 @@ program chmod_test\n   print *, 'Status: ', status\n end program chmod_test\n @end smallexample\n-@code{CHMOD} as non-elemental function:\n+@code{CHMOD} as function:\n @smallexample\n program chmod_test\n   implicit none\n@@ -2652,7 +2652,7 @@ range of @math{1 /leq DIM /leq n)} where @math{n} is the rank of @var{MASK}.\n F95 and later\n \n @item @emph{Class}:\n-transformational function\n+Transformational function\n \n @item @emph{Syntax}:\n @code{RESULT = COUNT(MASK [, DIM])}\n@@ -2814,7 +2814,7 @@ only one form can be used in any given program unit.\n GNU extension\n \n @item @emph{Class}:\n-Subroutine\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -3172,7 +3172,7 @@ vectors are @code{LOGICAL}, the result is @code{ANY(X.AND.Y)}.\n F95 and later\n \n @item @emph{Class}:\n-transformational function\n+Transformational function\n \n @item @emph{Syntax}:\n @code{RESULT = DOT_PRODUCT(X, Y)}\n@@ -3310,8 +3310,8 @@ sufficiently small limits that overflows (wrap around) are possible, such as\n become, negative, or numerically less than previous values, during a single\n run of the compiled program.\n \n-If @code{DTIME} is invoked as a function, it can not be invoked as a\n-subroutine, and vice versa.\n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n \n @var{TARRAY} and @var{RESULT} are @code{INTENT(OUT)} and provide the following:\n \n@@ -3325,7 +3325,7 @@ subroutine, and vice versa.\n GNU extension\n \n @item @emph{Class}:\n-Subroutine\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -3575,8 +3575,8 @@ sufficiently small limits that overflows (wrap around) are possible, such as\n become, negative, or numerically less than previous values, during a single\n run of the compiled program.\n \n-If @code{ETIME} is invoked as a function, it can not be invoked as a\n-subroutine, and vice versa.\n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n \n @var{TARRAY} and @var{RESULT} are @code{INTENT(OUT)} and provide the following:\n \n@@ -3590,7 +3590,7 @@ subroutine, and vice versa.\n GNU extension\n \n @item @emph{Class}:\n-Subroutine\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -3786,16 +3786,16 @@ end program test_exponent\n @code{CTIME}) in @var{DATE}. It is equivalent to @code{CALL CTIME(DATE,\n TIME())}.\n \n-If @code{FDATE} is invoked as a function, it can not be invoked as a\n-subroutine, and vice versa.\n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n \n @var{DATE} is an @code{INTENT(OUT)} @code{CHARACTER} variable.\n \n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n-Subroutine\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -3882,7 +3882,10 @@ Read a single character in stream mode from stdin by bypassing normal\n formatted output. Stream I/O should not be mixed with normal record-oriented \n (formatted or unformatted) I/O on the same unit; the results are unpredictable.\n \n-This intrinsic routine is provided for backwards compatibility with \n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n+\n+Note that the @code{FGET} intrinsic is provided for backwards compatibility with \n @command{g77}.  GNU Fortran provides the Fortran 2003 Stream facility.\n Programmers should consider the use of new stream IO feature in new code \n for future portability. See also @ref{Fortran 2003 status}.\n@@ -3891,7 +3894,7 @@ for future portability. See also @ref{Fortran 2003 status}.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental subroutine\n+Subroutine, function\n \n @item @emph{Syntax}:\n @code{CALL FGET(C [, STATUS])}\n@@ -3940,16 +3943,19 @@ Read a single character in stream mode by bypassing normal formatted output.\n Stream I/O should not be mixed with normal record-oriented (formatted or \n unformatted) I/O on the same unit; the results are unpredictable.\n \n-This intrinsic routine is provided for backwards compatibility with \n-@command{g77}.  GNU Fortran provides the Fortran 2003 Stream facility.\n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n+\n+Note that the @code{FGET} intrinsic is provided for backwards compatibility\n+with @command{g77}.  GNU Fortran provides the Fortran 2003 Stream facility.\n Programmers should consider the use of new stream IO feature in new code \n for future portability. See also @ref{Fortran 2003 status}.\n \n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental subroutine\n+Subroutine, function\n \n @item @emph{Syntax}:\n @code{CALL FGETC(UNIT, C [, STATUS])}\n@@ -4045,7 +4051,7 @@ argument, all units are flushed, otherwise just the unit specified.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental subroutine\n+Subroutine\n \n @item @emph{Syntax}:\n @code{CALL FLUSH(UNIT)}\n@@ -4077,7 +4083,7 @@ open Fortran I/O unit @code{UNIT}.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = FNUM(UNIT)}\n@@ -4117,7 +4123,10 @@ Write a single character in stream mode to stdout by bypassing normal\n formatted output. Stream I/O should not be mixed with normal record-oriented \n (formatted or unformatted) I/O on the same unit; the results are unpredictable.\n \n-This intrinsic routine is provided for backwards compatibility with \n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n+\n+Note that the @code{FGET} intrinsic is provided for backwards compatibility with \n @command{g77}.  GNU Fortran provides the Fortran 2003 Stream facility.\n Programmers should consider the use of new stream IO feature in new code \n for future portability. See also @ref{Fortran 2003 status}.\n@@ -4126,7 +4135,7 @@ for future portability. See also @ref{Fortran 2003 status}.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental subroutine\n+Subroutine, function\n \n @item @emph{Syntax}:\n @code{CALL FPUT(C [, STATUS])}\n@@ -4168,7 +4177,10 @@ Write a single character in stream mode by bypassing normal formatted\n output. Stream I/O should not be mixed with normal record-oriented \n (formatted or unformatted) I/O on the same unit; the results are unpredictable.\n \n-This intrinsic routine is provided for backwards compatibility with \n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n+\n+Note that the @code{FGET} intrinsic is provided for backwards compatibility with \n @command{g77}.  GNU Fortran provides the Fortran 2003 Stream facility.\n Programmers should consider the use of new stream IO feature in new code \n for future portability. See also @ref{Fortran 2003 status}.\n@@ -4177,7 +4189,7 @@ for future portability. See also @ref{Fortran 2003 status}.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental subroutine\n+Subroutine, function\n \n @item @emph{Syntax}:\n @code{CALL FPUTC(UNIT, C [, STATUS])}\n@@ -4386,11 +4398,14 @@ already opened file is obtained.\n \n The elements in @code{BUFF} are the same as described by @ref{STAT}.\n \n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental subroutine\n+Subroutine, function\n \n @item @emph{Syntax}:\n @code{CALL FSTAT(UNIT, BUFF [, STATUS])}\n@@ -4671,11 +4686,14 @@ END PROGRAM\n @item @emph{Description}:\n Get current working directory.\n \n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental subroutine.\n+Subroutine, function\n \n @item @emph{Syntax}:\n @code{CALL GETCWD(CWD [, STATUS])}\n@@ -4805,7 +4823,7 @@ Returns the numerical group ID of the current process.\n GNU extension\n \n @item @emph{Class}:\n-function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = GETGID()}\n@@ -4883,7 +4901,7 @@ Returns the numerical process identifier of the current process.\n GNU extension\n \n @item @emph{Class}:\n-function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = GETPID()}\n@@ -4922,7 +4940,7 @@ Returns the numerical user ID of the current process.\n GNU extension\n \n @item @emph{Class}:\n-function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = GETUID()}\n@@ -5192,7 +5210,7 @@ standard.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental Function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = IARGC()}\n@@ -5494,7 +5512,7 @@ function.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = IERRNO()}\n@@ -5750,7 +5768,7 @@ it is used as a new seed with @code{SRAND}.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = IRAND(FLAG)}\n@@ -5791,7 +5809,7 @@ Determine whether a unit is connected to a terminal device.\n GNU extension.\n \n @item @emph{Class}:\n-Non-elemental function.\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = ISATTY(UNIT)}\n@@ -5960,8 +5978,11 @@ end program test_itime\n Sends the signal specified by @var{SIGNAL} to the process @var{PID}.\n See @code{kill(2)}.\n \n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n+\n @item @emph{Class}:\n-Subroutine\n+Subroutine, function\n \n @item @emph{Syntax}:\n @code{CALL KILL(PID, SIGNAL [, STATUS])}\n@@ -6247,7 +6268,7 @@ however, only one form can be used in any given program unit.\n GNU extension\n \n @item @emph{Class}:\n-Subroutine, non-elemental function\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -6668,11 +6689,14 @@ then the link itself is statted, not the file that it refers to.\n \n The elements in @code{BUFF} are the same as described by @ref{STAT}.\n \n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n+\n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental subroutine\n+Subroutine, function\n \n @item @emph{Syntax}:\n @code{CALL LSTAT(FILE, BUFF [, STATUS])}\n@@ -6765,7 +6789,7 @@ using Fortran 95 pointers, the memory allocation intrinsic is\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{Syntax}:\n @code{PTR = MALLOC(SIZE)}\n@@ -7088,7 +7112,7 @@ compiled program.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = MCLOCK()}\n@@ -7128,7 +7152,7 @@ less than previous values during a single run of the compiled program.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = MCLOCK8()}\n@@ -7825,7 +7849,7 @@ the use of the @ref{IOR} intrinsic defined by the Fortran standard.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = OR(X, Y)}\n@@ -8155,7 +8179,7 @@ documentation.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{See also}:\n @ref{RAND}, @ref{RANDOM_NUMBER}\n@@ -8180,7 +8204,7 @@ it is used as a new seed with @code{SRAND}.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = RAND(FLAG)}\n@@ -8443,7 +8467,7 @@ however, only one form can be used in any given program unit.\n GNU extension\n \n @item @emph{Class}:\n-Subroutine, non-elemental function\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -8747,7 +8771,7 @@ use is discouraged.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = SECNDS (X)}\n@@ -8798,7 +8822,7 @@ however, only one form can be used in any given program unit.\n GNU extension\n \n @item @emph{Class}:\n-Subroutine, non-elemental function\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -9096,7 +9120,7 @@ is supplied, it is set to the value returned by @code{signal(2)}.\n GNU extension\n \n @item @emph{Class}:\n-Subroutine, non-elemental function\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -9559,7 +9583,7 @@ generator is specified by the required argument @var{SEED}.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental subroutine\n+Subroutine\n \n @item @emph{Syntax}:\n @code{CALL SRAND(SEED)}\n@@ -9622,12 +9646,14 @@ The elements that are obtained and stored in the array @code{BUFF}:\n Not all these elements are relevant on all systems. \n If an element is not relevant, it is returned as 0.\n \n+This intrinsic is provided in both subroutine and function forms; however,\n+only one form can be used in any given program unit.\n \n @item @emph{Standard}:\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental subroutine\n+Subroutine, function\n \n @item @emph{Syntax}:\n @code{CALL STAT(FILE,BUFF[,STATUS])}\n@@ -9752,7 +9778,7 @@ however, only one form can be used in any given program unit.\n GNU extension\n \n @item @emph{Class}:\n-Subroutine, non-elemental function\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -9794,7 +9820,7 @@ however, only one form can be used in any given program unit.\n GNU extension\n \n @item @emph{Class}:\n-Subroutine, non-elemental function\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -9990,7 +10016,7 @@ compilers.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = TIME()}\n@@ -10029,7 +10055,7 @@ less than previous values during a single run of the compiled program.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = TIME8()}\n@@ -10232,7 +10258,7 @@ however, only one form can be used in any given program unit.\n GNU extension\n \n @item @emph{Class}:\n-Subroutine, non-elemental function\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -10351,7 +10377,7 @@ however, only one form can be used in any given program unit.\n GNU extension\n \n @item @emph{Class}:\n-Subroutine, non-elemental function\n+Subroutine, function\n \n @item @emph{Syntax}:\n @multitable @columnfractions .80\n@@ -10492,7 +10518,7 @@ the use of the @ref{IEOR} intrinsic defined by the Fortran standard.\n GNU extension\n \n @item @emph{Class}:\n-Non-elemental function\n+Function\n \n @item @emph{Syntax}:\n @code{RESULT = XOR(X, Y)}"}, {"sha": "2e47391a80506135f17399230e2b72777d822cfd", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 21, "deletions": 34, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a2bef74c1bfdea615812953cbbadd6e39ab63f45/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a2bef74c1bfdea615812953cbbadd6e39ab63f45/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=a2bef74c1bfdea615812953cbbadd6e39ab63f45", "patch": "@@ -101,11 +101,11 @@ one is not the default.\n * Runtime Options::     Influencing runtime behavior\n * Code Gen Options::    Specifying conventions for function calls, data layout\n                         and register usage.\n-* Environment Variables:: Env vars that affect @command{gfortran}.\n+* Environment Variables:: Environment variables that affect @command{gfortran}.\n @end menu\n \n @node Option Summary\n-@section Option Summary\n+@section Option summary\n \n @c man begin OPTIONS\n \n@@ -114,7 +114,7 @@ by type.  Explanations are in the following sections.\n \n @table @emph\n @item Fortran Language Options\n-@xref{Fortran Dialect Options,,Options Controlling Fortran Dialect}.\n+@xref{Fortran Dialect Options,,Options controlling Fortran dialect}.\n @gccoptlist{-fall-intrinsics  -ffree-form  -fno-fixed-form @gol\n -fdollar-ok  -fimplicit-none  -fmax-identifier-length @gol\n -std=@var{std} -fd-lines-as-code  -fd-lines-as-comments @gol\n@@ -124,21 +124,21 @@ by type.  Explanations are in the following sections.\n -fcray-pointer  -fopenmp  -frange-check -fno-backslash }\n \n @item Error and Warning Options\n-@xref{Error and Warning Options,,Options to Request or Suppress Errors\n-and Warnings}.\n+@xref{Error and Warning Options,,Options to request or suppress errors\n+and warnings}.\n @gccoptlist{-fmax-errors=@var{n} @gol\n -fsyntax-only  -pedantic  -pedantic-errors @gol\n -w  -Wall  -Waliasing  -Wampersand  -Wcharacter-truncation  -Wconversion @gol\n -Wimplicit-interface  -Wline-truncation  -Wnonstd-intrinsics  -Wsurprising @gol\n--Wno-tabs  -Wunderflow  -W}\n+-Wno-tabs  -Wunderflow}\n \n @item Debugging Options\n-@xref{Debugging Options,,Options for Debugging Your Program or GCC}.\n+@xref{Debugging Options,,Options for debugging your program or GNU Fortran}.\n @gccoptlist{-fdump-parse-tree  -ffpe-trap=@var{list} @gol\n -fdump-core -fbacktrace}\n \n @item Directory Options\n-@xref{Directory Options,,Options for Directory Search}.\n+@xref{Directory Options,,Options for directory search}.\n @gccoptlist{-I@var{dir}  -J@var{dir}  -M@var{dir}  -fintrinsic-modules-path @var{dir}}\n \n @item Link Options\n@@ -151,7 +151,7 @@ and Warnings}.\n -fmax-subrecord-length=@var{length}}\n \n @item Code Generation Options\n-@xref{Code Gen Options,,Options for Code Generation Conventions}.\n+@xref{Code Gen Options,,Options for code generation conventions}.\n @gccoptlist{-fno-automatic  -ff2c  -fno-underscoring\n -fsecond-underscore @gol\n -fbounds-check  -fmax-stack-var-size=@var{n} @gol\n@@ -172,7 +172,7 @@ and Warnings}.\n @end menu\n \n @node Fortran Dialect Options\n-@section Options Controlling Fortran Dialect\n+@section Options controlling Fortran dialect\n @cindex dialect options\n @cindex language, dialect options\n @cindex options, dialect\n@@ -320,7 +320,7 @@ standards.\n @end table\n \n @node Error and Warning Options\n-@section Options to Request or Suppress Errors and Warnings\n+@section Options to request or suppress errors and warnings\n @cindex options, warnings\n @cindex options, errors\n @cindex warnings, suppressing\n@@ -388,11 +388,6 @@ This should be used in conjunction with @option{-std=f95} or\n Like @option{-pedantic}, except that errors are produced rather than\n warnings.\n \n-@item -w\n-@opindex @code{w}\n-@cindex warnings, none\n-Inhibit all warning messages.\n-\n @item -Wall\n @opindex @code{Wall}\n @cindex all warnings\n@@ -497,14 +492,6 @@ encountered, which yield an UNDERFLOW during compilation.\n @opindex @code{Werror}\n @cindex warnings, to errors\n Turns all warnings into errors.\n-\n-@item -W\n-@opindex @code{W}\n-@cindex warnings, extra\n-@cindex extra warnings\n-Turns on ``extra warnings'' and, if optimization is specified\n-via @option{-O}, the @option{-Wuninitialized} option.\n-(This might change in future versions of GNU Fortran.)\n @end table\n \n @xref{Error and Warning Options,,Options to Request or Suppress Errors and\n@@ -515,7 +502,7 @@ and other GNU compilers.\n Some of these have no effect when compiling programs written in Fortran.\n \n @node Debugging Options\n-@section Options for Debugging Your Program or GNU Fortran\n+@section Options for debugging your program or GNU Fortran\n @cindex options, debugging\n @cindex debugging information options\n \n@@ -562,7 +549,7 @@ gcc,Using the GNU Compiler Collection (GCC)}, for more information on\n debugging options.\n \n @node Directory Options\n-@section Options for Directory Search\n+@section Options for directory search\n @cindex directory, options\n @cindex options, directory search\n @cindex search path\n@@ -623,7 +610,7 @@ they are not in the default location expected by the compiler.\n @end table\n \n @node Link Options\n-@section Influencing the Linking Step\n+@section Influencing the linking step\n @cindex options, linking\n @cindex linking, static\n \n@@ -642,7 +629,7 @@ configured, this option has no effect.\n \n \n @node Runtime Options\n-@section Influencing Runtime Behavior\n+@section Influencing runtime behavior\n @cindex options, runtime\n \n These options affect the runtime behavior of programs compiled with GNU Fortran.\n@@ -663,10 +650,10 @@ variable override the default specified by @option{-fconvert}.}\n @opindex @code{frecord-marker=}@var{length}\n Specify the length of record markers for unformatted files.\n Valid values for @var{length} are 4 and 8.  Default is 4.\n-@emph{This is different from previous versions of gfortran},\n+@emph{This is different from previous versions of @command{gfortran}},\n which specified a default record marker length of 8 on most\n systems.  If you want to read or write files compatible\n-with earlier versions of gfortran, use @option{-frecord-marker=8}.\n+with earlier versions of @command{gfortran}, use @option{-frecord-marker=8}.\n \n @item -fmax-subrecord-length=@var{length}\n @opindex @code{fmax-subrecord-length=}@var{length}\n@@ -676,7 +663,7 @@ really useful for use by the gfortran testsuite.\n @end table\n \n @node Code Gen Options\n-@section Options for Code Generation Conventions\n+@section Options for code generation conventions\n @cindex code generation, conventions\n @cindex options, code generation\n @cindex options, run-time\n@@ -883,8 +870,8 @@ enumerator set will fit in, and give all its enumerators this kind.\n \n @item -fexternal-blas\n @opindex @code{fexternal-blas}\n-This option will make gfortran generate calls to BLAS functions for some\n-matrix operations like @code{MATMUL}, instead of using our own\n+This option will make @command{gfortran} generate calls to BLAS functions\n+for some matrix operations like @code{MATMUL}, instead of using our own\n algorithms, if the size of the matrices involved is larger than a given\n limit (see @option{-fblas-matmul-limit}).  This may be profitable if an\n optimized vendor BLAS library is available.  The BLAS library will have\n@@ -912,7 +899,7 @@ shared by @command{gfortran}, @command{gcc}, and other GNU compilers.\n @c man end\n \n @node Environment Variables\n-@section Environment Variables Affecting @command{gfortran}\n+@section Environment variables affecting @command{gfortran}\n @cindex environment variable\n \n @c man begin ENVIRONMENT"}]}