{"sha": "a12bdb97c9bb28dc996017ec826612ac61dbe846", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEyYmRiOTdjOWJiMjhkYzk5NjAxN2VjODI2NjEyYWM2MWRiZTg0Ng==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2008-03-31T18:22:05Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2008-03-31T18:22:05Z"}, "message": "re PR tree-optimization/30186 (accessing an element via a \"pointer\" on a vector does not cause vec_extract to be used (non-zero index))\n\n2008-03-31  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR middle-end/30186\n        * fold-const.c (fold_indirect_ref_1): Support accessing non first\n        element of the vector via a pointer.\n\n2008-03-31  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR middle-end/30186\n        * gcc.dg/tree-ssa/vector-1.c: New testcase.\n        * gcc.c-torture/execute/vector-1.c: New testcase.\n        * gcc.c-torture/execute/vector-2.c: New testcase.\n\nFrom-SVN: r133766", "tree": {"sha": "05015805c094c492567941926cc55180a8afe552", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/05015805c094c492567941926cc55180a8afe552"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a12bdb97c9bb28dc996017ec826612ac61dbe846", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a12bdb97c9bb28dc996017ec826612ac61dbe846", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a12bdb97c9bb28dc996017ec826612ac61dbe846", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a12bdb97c9bb28dc996017ec826612ac61dbe846/comments", "author": null, "committer": null, "parents": [{"sha": "2d4bba805eeeea81ee9e566e569528de83876e08", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d4bba805eeeea81ee9e566e569528de83876e08", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d4bba805eeeea81ee9e566e569528de83876e08"}], "stats": {"total": 155, "additions": 155, "deletions": 0}, "files": [{"sha": "c3e9ffd27b499c3f737e8c9dcb40261ac5aba3aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12bdb97c9bb28dc996017ec826612ac61dbe846/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12bdb97c9bb28dc996017ec826612ac61dbe846/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a12bdb97c9bb28dc996017ec826612ac61dbe846", "patch": "@@ -1,3 +1,9 @@\n+2008-03-31  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR middle-end/30186\n+\t* fold-const.c (fold_indirect_ref_1): Support accessing non first\n+\telement of the vector via a pointer.\n+\n 2008-03-31  Ian Lance Taylor  <iant@google.com>\n \n \t* tlink.c (scan_linker_output): Look for symbol name in single"}, {"sha": "9fa31376864f6c33a865050968b7d4a793c8055d", "filename": "gcc/fold-const.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12bdb97c9bb28dc996017ec826612ac61dbe846/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12bdb97c9bb28dc996017ec826612ac61dbe846/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=a12bdb97c9bb28dc996017ec826612ac61dbe846", "patch": "@@ -14963,6 +14963,34 @@ fold_indirect_ref_1 (tree type, tree op0)\n \t}\n     }\n \n+  /* ((foo*)&vectorfoo)[1] => BIT_FIELD_REF<vectorfoo,...> */\n+  if (TREE_CODE (sub) == POINTER_PLUS_EXPR\n+      && TREE_CODE (TREE_OPERAND (sub, 1)) == INTEGER_CST)\n+    { \n+      tree op00 = TREE_OPERAND (sub, 0);\n+      tree op01 = TREE_OPERAND (sub, 1);\n+      tree op00type;\n+      \n+      STRIP_NOPS (op00);\n+      op00type = TREE_TYPE (op00);\n+      if (TREE_CODE (op00) == ADDR_EXPR\n+          && TREE_CODE (TREE_TYPE (op00type)) == VECTOR_TYPE\n+          && type == TREE_TYPE (TREE_TYPE (op00type)))\n+\t{ \n+\t  HOST_WIDE_INT offset = tree_low_cst (op01, 0);\n+\t  tree part_width = TYPE_SIZE (type);\n+\t  unsigned HOST_WIDE_INT part_widthi = tree_low_cst (part_width, 0)/BITS_PER_UNIT;\n+\t  unsigned HOST_WIDE_INT indexi = offset * BITS_PER_UNIT;\n+\t  tree index = bitsize_int (indexi);\n+\n+\t  if (offset/part_widthi <= TYPE_VECTOR_SUBPARTS (TREE_TYPE (op00type)))\n+\t    return fold_build3 (BIT_FIELD_REF, type, TREE_OPERAND (op00, 0),\n+\t\t\t\tpart_width, index);\n+        \n+\t}\n+    }\n+\n+\n   /* ((foo*)&complexfoo)[1] => __imag__ complexfoo */\n   if (TREE_CODE (sub) == POINTER_PLUS_EXPR\n       && TREE_CODE (TREE_OPERAND (sub, 1)) == INTEGER_CST)"}, {"sha": "b62c44e66508c2364875aeb16d4c2b10a6b7d655", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12bdb97c9bb28dc996017ec826612ac61dbe846/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12bdb97c9bb28dc996017ec826612ac61dbe846/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a12bdb97c9bb28dc996017ec826612ac61dbe846", "patch": "@@ -1,3 +1,10 @@\n+2008-03-31  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR middle-end/30186\n+\t* gcc.dg/tree-ssa/vector-1.c: New testcase.\n+\t* gcc.c-torture/execute/vector-1.c: New testcase.\n+\t* gcc.c-torture/execute/vector-2.c: New testcase.\n+\n 2008-03-31  Olivier Hainque  <hainque@adacore.com>\n \n \t* gnat.dg/assign_from_packed_pixels.ads: Support for ..."}, {"sha": "ff21d68ca7be8e7cab83b57bd495f1aa788739bb", "filename": "gcc/testsuite/gcc.c-torture/execute/vector-1.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12bdb97c9bb28dc996017ec826612ac61dbe846/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12bdb97c9bb28dc996017ec826612ac61dbe846/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-1.c?ref=a12bdb97c9bb28dc996017ec826612ac61dbe846", "patch": "@@ -0,0 +1,36 @@\n+/* Check that vector extraction works correctly. */\n+\n+#define vector __attribute__((vector_size(16) ))\n+\n+int f0(vector int t)\n+{\n+  return ((int*)&t)[0];\n+}\n+int f1(vector int t)\n+{\n+  return ((int*)&t)[1];\n+}\n+int f2(vector int t)\n+{\n+  return ((int*)&t)[2];\n+}\n+int f3(vector int t)\n+{\n+  return ((int*)&t)[3];\n+}\n+int main(void)\n+{\n+  vector int a = {0, 1, 2, 3};\n+  /* Make sure that we have the correct size for the vectors. */\n+  if (sizeof(int) != 4)\n+    __builtin_exit (0);\n+  if (f0(a) != 0)\n+    __builtin_abort ();\n+  if (f1(a) != 1)\n+    __builtin_abort ();\n+  if (f2(a) != 2)\n+    __builtin_abort ();\n+  if (f3(a) != 3)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "55330dd66060b8fe7841cfac39cd23ccbd30bba7", "filename": "gcc/testsuite/gcc.c-torture/execute/vector-2.c", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12bdb97c9bb28dc996017ec826612ac61dbe846/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12bdb97c9bb28dc996017ec826612ac61dbe846/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fvector-2.c?ref=a12bdb97c9bb28dc996017ec826612ac61dbe846", "patch": "@@ -0,0 +1,46 @@\n+/* Check that vector insertion works correctly. */\n+\n+#define vector __attribute__((vector_size(16) ))\n+\n+vector int f0(vector int t, int a)\n+{\n+ ((int*)&t)[0] = a;\n+ return t;\n+}\n+vector int f1(vector int t, int a)\n+{\n+ ((int*)&t)[1] = a;\n+ return t;\n+}\n+vector int f2(vector int t, int a)\n+{\n+ ((int*)&t)[2] = a;\n+ return t;\n+}\n+vector int f3(vector int t, int a)\n+{\n+ ((int*)&t)[3] = a;\n+ return t;\n+}\n+int main(void)\n+{\n+  vector int a = {0, 0, 0, 0};\n+  vector int b = {1, 0, 0, 0};\n+  vector int c = {0, 1, 0, 0};\n+  vector int d = {0, 0, 1, 0};\n+  vector int e = {0, 0, 0, 1};\n+  vector int a0;\n+  a0 = f0(a, 1);\n+  if (memcmp (&a0, &b, sizeof(a0)))\n+    __builtin_abort ();\n+  a0 = f1(a, 1);\n+  if (memcmp (&a0, &c, sizeof(a0)))\n+    __builtin_abort ();\n+  a0 = f2(a, 1);\n+  if (memcmp (&a0, &d, sizeof(a0)))\n+    __builtin_abort ();\n+  a0 = f3(a, 1);\n+  if (memcmp (&a0, &e, sizeof(a0)))\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "5b07c67a2c65284fbc21f6ee72cfb17ad8f6f3fa", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vector-1.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a12bdb97c9bb28dc996017ec826612ac61dbe846/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a12bdb97c9bb28dc996017ec826612ac61dbe846/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-1.c?ref=a12bdb97c9bb28dc996017ec826612ac61dbe846", "patch": "@@ -0,0 +1,32 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-w -O1 -fdump-tree-gimple\" } */\n+\n+\n+/* We should be able to produce a BIT_FIELD_REF for each of these vector access. */\n+#define vector __attribute__((vector_size(16)))\n+float f0(vector float t)\n+{\n+  return ((float*)&t)[0];\n+}\n+\n+float f1(vector float t)\n+{\n+  return ((float*)&t)[1];\n+}\n+\n+float f2(vector float t)\n+{\n+  return ((float*)&t)[2];\n+}\n+\n+float f3(vector float t)\n+{\n+  return ((float*)&t)[3];\n+}\n+\n+\n+/* { dg-final { scan-tree-dump-times \"BIT_FIELD_REF\" 4 \"gimple\"} } */\n+\n+/* { dg-final { cleanup-tree-dump \"gimple\" } } */\n+\n+"}]}