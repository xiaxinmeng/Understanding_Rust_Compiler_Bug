{"sha": "fe27b7cc414a7b57ef801872157b596f4f39c1f6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmUyN2I3Y2M0MTRhN2I1N2VmODAxODcyMTU3YjU5NmY0ZjM5YzFmNg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-09-11T22:51:20Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-09-11T22:51:20Z"}, "message": "builtins.c (fold_builtin_logarithm): if N can't be truncated to MODE exactly...\n\n\t* builtins.c (fold_builtin_logarithm): if N can't be truncated to\n\tMODE exactly, then only convert logN(N) -> 1.0 if\n\tflag_unsafe_math_optimizations is set.\n\nFrom-SVN: r71322", "tree": {"sha": "468ba5ac0830c30d6b8f6e34fa94e86f02f19f5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/468ba5ac0830c30d6b8f6e34fa94e86f02f19f5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe27b7cc414a7b57ef801872157b596f4f39c1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe27b7cc414a7b57ef801872157b596f4f39c1f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe27b7cc414a7b57ef801872157b596f4f39c1f6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe27b7cc414a7b57ef801872157b596f4f39c1f6/comments", "author": null, "committer": null, "parents": [{"sha": "ab01a87cbc7872383eff0faa4c1cc53271ff6e85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ab01a87cbc7872383eff0faa4c1cc53271ff6e85", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ab01a87cbc7872383eff0faa4c1cc53271ff6e85"}], "stats": {"total": 19, "additions": 14, "deletions": 5}, "files": [{"sha": "df66b3e2640ba51e1aea82f4c88de202212a6027", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe27b7cc414a7b57ef801872157b596f4f39c1f6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe27b7cc414a7b57ef801872157b596f4f39c1f6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fe27b7cc414a7b57ef801872157b596f4f39c1f6", "patch": "@@ -1,5 +1,9 @@\n 2003-09-11  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* builtins.c (fold_builtin_logarithm): if N can't be truncated to\n+\tMODE exactly, then only convert logN(N) -> 1.0 if\n+\tflag_unsafe_math_optimizations is set.\n+\n \t* builtins.c (builtin_dconsts_init, dconstpi, dconste,\n \tinit_builtin_dconsts): Delete.\n \t* emit-rtl.c (dconstpi, dconste): Define."}, {"sha": "2e8189d106cddc5c0003be0e78c08fbd17292cc8", "filename": "gcc/builtins.c", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe27b7cc414a7b57ef801872157b596f4f39c1f6/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe27b7cc414a7b57ef801872157b596f4f39c1f6/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=fe27b7cc414a7b57ef801872157b596f4f39c1f6", "patch": "@@ -5949,16 +5949,21 @@ fold_builtin_logarithm (tree exp, const REAL_VALUE_TYPE *value)\n       tree type = TREE_TYPE (TREE_TYPE (fndecl));\n       tree arg = TREE_VALUE (arglist);\n       const enum built_in_function fcode = builtin_mathfn_code (arg);\n-      const REAL_VALUE_TYPE value_mode =\n-\treal_value_truncate (TYPE_MODE (type), *value);\n \t\n       /* Optimize log*(1.0) = 0.0.  */\n       if (real_onep (arg))\n \treturn build_real (type, dconst0);\n \n-      /* Optimize logN(N) = 1.0.  */\n-      if (real_dconstp (arg, &value_mode))\n-\treturn build_real (type, dconst1);\n+      /* Optimize logN(N) = 1.0.  If N can't be truncated to MODE\n+         exactly, then only do this if flag_unsafe_math_optimizations.  */\n+      if (exact_real_truncate (TYPE_MODE (type), value)\n+\t  || flag_unsafe_math_optimizations)\n+        {\n+\t  const REAL_VALUE_TYPE value_truncate =\n+\t    real_value_truncate (TYPE_MODE (type), *value);\n+\t  if (real_dconstp (arg, &value_truncate))\n+\t    return build_real (type, dconst1);\n+\t}\n       \n       /* Special case, optimize logN(expN(x)) = x.  */\n       if (flag_unsafe_math_optimizations"}]}