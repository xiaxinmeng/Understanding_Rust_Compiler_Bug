{"sha": "57a6af27ed66c67241c101ba79b3f3b0c44a4867", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTdhNmFmMjdlZDY2YzY3MjQxYzEwMWJhNzliM2YzYjBjNDRhNDg2Nw==", "commit": {"author": {"name": "Ziemowit Laski", "email": "zlaski@apple.com", "date": "2004-09-02T00:36:18Z"}, "committer": {"name": "Ziemowit Laski", "email": "zlaski@gcc.gnu.org", "date": "2004-09-02T00:36:18Z"}, "message": "c-parse.in (primary): Call objc_build_message_expr()...\n\n[gcc/ChangeLog]\n2004-09-01  Ziemowit Laski  <zlaski@apple.com>\n\n\t* c-parse.in (primary): Call objc_build_message_expr(),\n\tobjc_build_selector_expr(), objc_build_protocol_expr(),\n\tobjc_build_encode_expr() and objc_build_string_object() instead of\n\tbuild_message_expr(), build_selector_expr(), build_protocol_expr(),\n\tbuild_encode_expr() and build_objc_string_object(), respectively.\n\t(component_decl_list2): Call objc_get_class_ivars() instead of\n\tget_class_ivars_from_name().\n\t(keyworddecl): Call objc_build_keyword_decl() instead of\n\tbuild_keyword_decl().\n\t(receiver): Call objc_get_class_reference() instead of\n\tget_class_reference().\n\t(reswords): Add blank line before @@ifobjc section, for clarity.\n\n[gcc/objc/ChangeLog]\n2004-09-01  Ziemowit Laski  <zlaski@apple.com>\n\n\t* objc-act.c (objc_check_decl): Use OBJC_TYPE_NAME macro instead of\n\tTYPE_NAME.\n\t(build_objc_string_object): Rename to objc_build_string_object().\n\t(get_class_reference): Rename to objc_get_class_reference().\n\t(get_class_ivars_from_name): Rename to objc_get_class_ivars().\n\t(next_sjlj_build_catch_list, get_super_receiver): Call\n\tobjc_get_class_reference() instead of get_class_reference().\n\t(build_keyword_decl): Rename to objc_build_keyword_decl().\n\t(build_message_expr): Rename to objc_build_message_expr().\n\t(build_protocol_expr): Rename to objc_build_protocol_expr().\n\t(build_selector_expr): Rename to objc_build_selector_expr().\n\t(build_encode_expr): Rename to objc_build_encode_expr().\n\t* objc-act.h (get_class_ivars_from_name): Rename prototype to\n\tobjc_get_class_ivars().\n\t(get_class_reference): Rename prototype to objc_get_class_reference().\n\t(build_message_expr): Rename prototype to objc_build_message_expr().\n\t(build_selector_expr): Rename prototype to objc_build_selector_expr().\n\t(build_keyword_decl): Rename prototype to objc_build_keyword_decl().\n\t(build_protocol_expr): Rename prototype to objc_build_prototype_expr().\n\t(build_objc_string_object): Rename prototype to\n\tobjc_build_string_object().\n\nFrom-SVN: r86950", "tree": {"sha": "8612d1c8f22f6fea0d75cc788e1647e6f088d90f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8612d1c8f22f6fea0d75cc788e1647e6f088d90f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57a6af27ed66c67241c101ba79b3f3b0c44a4867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a6af27ed66c67241c101ba79b3f3b0c44a4867", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a6af27ed66c67241c101ba79b3f3b0c44a4867", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a6af27ed66c67241c101ba79b3f3b0c44a4867/comments", "author": null, "committer": null, "parents": [{"sha": "a6615c08bf77bfc2623fd4c6cb4178851d4554d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a6615c08bf77bfc2623fd4c6cb4178851d4554d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a6615c08bf77bfc2623fd4c6cb4178851d4554d1"}], "stats": {"total": 106, "additions": 73, "deletions": 33}, "files": [{"sha": "6ecbd2fb93c0043bf0454f10858f221de6d6e26c", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a6af27ed66c67241c101ba79b3f3b0c44a4867/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a6af27ed66c67241c101ba79b3f3b0c44a4867/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=57a6af27ed66c67241c101ba79b3f3b0c44a4867", "patch": "@@ -1,3 +1,18 @@\n+2004-09-01  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* c-parse.in (primary): Call objc_build_message_expr(),\n+\tobjc_build_selector_expr(), objc_build_protocol_expr(),\n+\tobjc_build_encode_expr() and objc_build_string_object() instead of\n+\tbuild_message_expr(), build_selector_expr(), build_protocol_expr(),\n+\tbuild_encode_expr() and build_objc_string_object(), respectively.\n+\t(component_decl_list2): Call objc_get_class_ivars() instead of\n+\tget_class_ivars_from_name().\n+\t(keyworddecl): Call objc_build_keyword_decl() instead of\n+\tbuild_keyword_decl().\n+\t(receiver): Call objc_get_class_reference() instead of\n+\tget_class_reference().\n+\t(reswords): Add blank line before @@ifobjc section, for clarity.\n+\n 2002-09-01  Fariborz Jahanian <fjahanian@apple.com>\n \n \t* config/rs6000/darwin.h (ROUND_TYPE_ALIGN): Restrict alignment"}, {"sha": "d45ff5e13718874716b9adc152809242617148a8", "filename": "gcc/c-parse.in", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a6af27ed66c67241c101ba79b3f3b0c44a4867/gcc%2Fc-parse.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a6af27ed66c67241c101ba79b3f3b0c44a4867/gcc%2Fc-parse.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-parse.in?ref=57a6af27ed66c67241c101ba79b3f3b0c44a4867", "patch": "@@ -744,19 +744,19 @@ primary:\n \t\t  $$.original_code = ERROR_MARK; }\n @@ifobjc\n \t| objcmessageexpr\n-\t\t{ $$.value = build_message_expr ($1);\n+\t\t{ $$.value = objc_build_message_expr ($1);\n \t\t  $$.original_code = ERROR_MARK; }\n \t| objcselectorexpr\n-\t\t{ $$.value = build_selector_expr ($1);\n+\t\t{ $$.value = objc_build_selector_expr ($1);\n \t\t  $$.original_code = ERROR_MARK; }\n \t| objcprotocolexpr\n-\t\t{ $$.value = build_protocol_expr ($1);\n+\t\t{ $$.value = objc_build_protocol_expr ($1);\n \t\t  $$.original_code = ERROR_MARK; }\n \t| objcencodeexpr\n-\t\t{ $$.value = build_encode_expr ($1);\n+\t\t{ $$.value = objc_build_encode_expr ($1);\n \t\t  $$.original_code = ERROR_MARK; }\n \t| OBJC_STRING\n-\t\t{ $$.value = build_objc_string_object ($1);\n+\t\t{ $$.value = objc_build_string_object ($1);\n \t\t  $$.original_code = ERROR_MARK; }\n @@end_ifobjc\n \t;\n@@ -1808,7 +1808,7 @@ component_decl_list2:\t/* empty */\n @@ifobjc\n \t/* foo(sizeof(struct{ @defs(ClassName)})); */\n \t| AT_DEFS '(' CLASSNAME ')'\n-\t\t{ $$ = nreverse (get_class_ivars_from_name ($3)); }\n+\t\t{ $$ = nreverse (objc_get_class_ivars ($3)); }\n @@end_ifobjc\n \t;\n \n@@ -3047,22 +3047,22 @@ reservedwords:\n keyworddecl:\n \t  selector ':' '(' typename ')' identifier\n \t\t{\n-\t\t  $$ = build_keyword_decl ($1, $4, $6);\n+\t\t  $$ = objc_build_keyword_decl ($1, $4, $6);\n \t\t}\n \n \t| selector ':' identifier\n \t\t{\n-\t\t  $$ = build_keyword_decl ($1, NULL_TREE, $3);\n+\t\t  $$ = objc_build_keyword_decl ($1, NULL_TREE, $3);\n \t\t}\n \n \t| ':' '(' typename ')' identifier\n \t\t{\n-\t\t  $$ = build_keyword_decl (NULL_TREE, $3, $5);\n+\t\t  $$ = objc_build_keyword_decl (NULL_TREE, $3, $5);\n \t\t}\n \n \t| ':' identifier\n \t\t{\n-\t\t  $$ = build_keyword_decl (NULL_TREE, NULL_TREE, $2);\n+\t\t  $$ = objc_build_keyword_decl (NULL_TREE, NULL_TREE, $2);\n \t\t}\n \t;\n \n@@ -3108,11 +3108,11 @@ receiver:\n \t\t{ $$ = $1.value; }\n \t| CLASSNAME\n \t\t{\n-\t\t  $$ = get_class_reference ($1);\n+\t\t  $$ = objc_get_class_reference ($1);\n \t\t}\n \t| TYPENAME\n \t\t{\n-\t\t  $$ = get_class_reference ($1);\n+\t\t  $$ = objc_get_class_reference ($1);\n \t\t}\n \t;\n \n@@ -3271,6 +3271,7 @@ static const struct resword reswords[] =\n   { \"void\",\t\tRID_VOID,\t0 },\n   { \"volatile\",\t\tRID_VOLATILE,\t0 },\n   { \"while\",\t\tRID_WHILE,\t0 },\n+\n @@ifobjc\n   { \"id\",\t\tRID_ID,\t\t\tD_OBJC },\n "}, {"sha": "d6354d2cf548fda146580ca96f255e4d3704942b", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a6af27ed66c67241c101ba79b3f3b0c44a4867/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a6af27ed66c67241c101ba79b3f3b0c44a4867/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=57a6af27ed66c67241c101ba79b3f3b0c44a4867", "patch": "@@ -1,3 +1,27 @@\n+2004-09-01  Ziemowit Laski  <zlaski@apple.com>\n+\n+\t* objc-act.c (objc_check_decl): Use OBJC_TYPE_NAME macro instead of\n+\tTYPE_NAME.\n+\t(build_objc_string_object): Rename to objc_build_string_object().\n+\t(get_class_reference): Rename to objc_get_class_reference().\n+\t(get_class_ivars_from_name): Rename to objc_get_class_ivars().\n+\t(next_sjlj_build_catch_list, get_super_receiver): Call\n+\tobjc_get_class_reference() instead of get_class_reference().\n+\t(build_keyword_decl): Rename to objc_build_keyword_decl().\n+\t(build_message_expr): Rename to objc_build_message_expr().\n+\t(build_protocol_expr): Rename to objc_build_protocol_expr().\n+\t(build_selector_expr): Rename to objc_build_selector_expr().\n+\t(build_encode_expr): Rename to objc_build_encode_expr().\n+\t* objc-act.h (get_class_ivars_from_name): Rename prototype to\n+\tobjc_get_class_ivars().\n+\t(get_class_reference): Rename prototype to objc_get_class_reference().\n+\t(build_message_expr): Rename prototype to objc_build_message_expr().\n+\t(build_selector_expr): Rename prototype to objc_build_selector_expr().\n+\t(build_keyword_decl): Rename prototype to objc_build_keyword_decl().\n+\t(build_protocol_expr): Rename prototype to objc_build_prototype_expr().\n+\t(build_objc_string_object): Rename prototype to\n+\tobjc_build_string_object().\n+\t\n 2004-09-01  Ziemowit Laski  <zlaski@apple.com>\n \n \t* objc-act.c (lookup_interface): Make function 'static' and add a"}, {"sha": "aefb4fb8198ea07528f06be5979a4936f40e89db", "filename": "gcc/objc/objc-act.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a6af27ed66c67241c101ba79b3f3b0c44a4867/gcc%2Fobjc%2Fobjc-act.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a6af27ed66c67241c101ba79b3f3b0c44a4867/gcc%2Fobjc%2Fobjc-act.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.c?ref=57a6af27ed66c67241c101ba79b3f3b0c44a4867", "patch": "@@ -961,7 +961,7 @@ objc_check_decl (tree decl)\n \n   if (TREE_CODE (type) != RECORD_TYPE)\n     return;\n-  if (TYPE_NAME (type) && (type = objc_is_class_name (TYPE_NAME (type))))\n+  if (OBJC_TYPE_NAME (type) && (type = objc_is_class_name (OBJC_TYPE_NAME (type))))\n     error (\"statically allocated instance of Objective-C class `%s'\",\n \t   IDENTIFIER_POINTER (type));\n }\n@@ -1366,7 +1366,7 @@ my_build_string (int len, const char *str)\n    NXConstantString class object.  */\n \n tree\n-build_objc_string_object (tree string)\n+objc_build_string_object (tree string)\n {\n   tree initlist, constructor, constant_string_class;\n   int length;\n@@ -2338,7 +2338,7 @@ add_class_reference (tree ident)\n    reference variable.  */\n \n tree\n-get_class_reference (tree ident)\n+objc_get_class_reference (tree ident)\n {\n   tree orig_ident;\n \n@@ -2586,7 +2586,7 @@ lookup_interface (tree ident)\n /* Implement @defs (<classname>) within struct bodies.  */\n \n tree\n-get_class_ivars_from_name (tree class_name)\n+objc_get_class_ivars (tree class_name)\n {\n   tree interface = lookup_interface (class_name);\n   tree field, fields = NULL_TREE;\n@@ -2884,7 +2884,7 @@ next_sjlj_build_catch_list (void)\n \t  else\n \t    {\n \t      args = tree_cons (NULL, cur_try_context->caught_decl, NULL);\n-\t      t = get_class_reference (OBJC_TYPE_NAME (TREE_TYPE (type)));\n+\t      t = objc_get_class_reference (OBJC_TYPE_NAME (TREE_TYPE (type)));\n \t      args = tree_cons (NULL, t, args);\n \t      t = build_function_call (objc_exception_match_decl, args);\n \t      cond = lang_hooks.truthvalue_conversion (t);\n@@ -5309,7 +5309,7 @@ adjust_type_for_id_default (tree type)\n      Out:\tan instance of \"keyword_decl\".  */\n \n tree\n-build_keyword_decl (tree key_name, tree arg_type, tree arg_name)\n+objc_build_keyword_decl (tree key_name, tree arg_type, tree arg_name)\n {\n   tree keyword_decl;\n \n@@ -5503,7 +5503,7 @@ check_duplicates (hash hsh, int methods, int is_class)\n }\n \n /* If RECEIVER is a class reference, return the identifier node for\n-   the referenced class.  RECEIVER is created by get_class_reference,\n+   the referenced class.  RECEIVER is created by objc_get_class_reference,\n    so we check the exact form created depending on which runtimes are\n    used.  */\n \n@@ -5579,7 +5579,7 @@ objc_message_selector (void)\n    (*(<abstract_decl>(*)())_msgSuper)(receiver, selTransTbl[n], ...);  */\n \n tree\n-build_message_expr (tree mess)\n+objc_build_message_expr (tree mess)\n {\n   tree receiver = TREE_PURPOSE (mess);\n   tree sel_name;\n@@ -5656,7 +5656,7 @@ lookup_method_in_hash_lists (tree sel_name, int is_class)\n }\n \n /* The 'finish_message_expr' routine is called from within\n-   'build_message_expr' for non-template functions.  In the case of\n+   'objc_build_message_expr' for non-template functions.  In the case of\n    C++ template functions, it is called from 'build_expr_from_tree'\n    (in decl2.c) after RECEIVER and METHOD_PARAMS have been expanded.  */\n \n@@ -5950,7 +5950,7 @@ build_protocol_reference (tree p)\n /* This function is called by the parser when (and only when) a\n    @protocol() expression is found, in order to compile it.  */\n tree\n-build_protocol_expr (tree protoname)\n+objc_build_protocol_expr (tree protoname)\n {\n   tree expr;\n   tree p = lookup_protocol (protoname);\n@@ -6022,7 +6022,7 @@ build_protocol_expr (tree protoname)\n    is found, in order to compile it.  It is only called by the parser\n    and only to compile a @selector().  */\n tree\n-build_selector_expr (tree selnamelist)\n+objc_build_selector_expr (tree selnamelist)\n {\n   tree selname;\n \n@@ -6068,7 +6068,7 @@ build_selector_expr (tree selnamelist)\n }\n \n tree\n-build_encode_expr (tree type)\n+objc_build_encode_expr (tree type)\n {\n   tree result;\n   const char *string;\n@@ -7898,7 +7898,7 @@ get_super_receiver (void)\n \n \t  if (flag_next_runtime && !flag_zero_link)\n \t    {\n-\t      super_class = get_class_reference (super_name);\n+\t      super_class = objc_get_class_reference (super_name);\n \t      if (TREE_CODE (objc_method_context) == CLASS_METHOD_DECL)\n \t\t/* If we are in a class method, we must retrieve the\n \t\t   _metaclass_ for the current class, pointed at by"}, {"sha": "d5d63141e93eebaf33b42dd5d3155141ba4ea45f", "filename": "gcc/objc/objc-act.h", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a6af27ed66c67241c101ba79b3f3b0c44a4867/gcc%2Fobjc%2Fobjc-act.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a6af27ed66c67241c101ba79b3f3b0c44a4867/gcc%2Fobjc%2Fobjc-act.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2Fobjc-act.h?ref=57a6af27ed66c67241c101ba79b3f3b0c44a4867", "patch": "@@ -54,18 +54,18 @@ tree add_instance_variable (tree, int, tree, tree, tree);\n tree objc_add_method (tree, tree, int);\n tree get_super_receiver (void);\n void objc_clear_super_receiver (void);\n-tree get_class_ivars_from_name (tree);\n-tree get_class_reference (tree);\n+tree objc_get_class_ivars (tree);\n+tree objc_get_class_reference (tree);\n tree get_static_reference (tree, tree);\n tree get_protocol_reference (tree);\n-tree build_message_expr (tree);\n+tree objc_build_message_expr (tree);\n tree finish_message_expr (tree, tree, tree);\n-tree build_selector_expr (tree);\n+tree objc_build_selector_expr (tree);\n tree build_ivar_reference (tree);\n-tree build_keyword_decl (tree, tree, tree);\n+tree objc_build_keyword_decl (tree, tree, tree);\n tree build_method_decl (enum tree_code, tree, tree, tree);\n-tree build_protocol_expr (tree);\n-tree build_objc_string_object (tree);\n+tree objc_build_protocol_expr (tree);\n+tree objc_build_string_object (tree);\n \n void objc_declare_alias (tree, tree);\n void objc_declare_class (tree);\n@@ -78,7 +78,7 @@ void objc_check_decl (tree);\n \n /* NeXT extensions */\n \n-tree build_encode_expr (tree);\n+tree objc_build_encode_expr (tree);\n \n /* Objective-C structures */\n "}]}