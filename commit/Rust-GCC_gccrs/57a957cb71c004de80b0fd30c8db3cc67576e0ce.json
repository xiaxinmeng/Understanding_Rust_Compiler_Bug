{"sha": "57a957cb71c004de80b0fd30c8db3cc67576e0ce", "node_id": "C_kwDOANBUbNoAKDU3YTk1N2NiNzFjMDA0ZGU4MGIwZmQzMGM4ZGIzY2M2NzU3NmUwY2U", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-26T06:57:17Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2022-04-26T06:57:17Z"}, "message": "libgomp: Fix up two non-GOMP_USE_ALIGNED_WORK_SHARES related issues [PR105358]\n\nLast fall I've changed struct gomp_work_share, so that it doesn't have\n__attribute__((aligned (64))) lock member in the middle unless the target has\nnon-emulated aligned allocator, otherwise it just makes sure the first and\nsecond halves are 64 bytes appart for cache line reasons, but doesn't make\nthe struct 64-byte aligned itself and so we can use normal allocators for it.\n\nWhen the struct isn't 64-byte aligned, the amount of tail padding significantly\ndecreases, to 0 or 4 bytes or so.  The library uses that tail padding when\nthe ordered_teams_ids array (array of uints) and/or the memory for lastprivate\nconditional temporaries (the latter wants to guarantee long long alignment).\nThe problem with it on ia32 darwin9 is that while the struct contains\nlong long members, long long is just 4 byte aligned while __alignof__(long long)\nis 8.  That causes problems in gomp_init_work_share, where we currently rely on\nif offsetof (struct gomp_work_share, inline_ordered_team_ids) is long long\naligned, then that tail array will be aligned at runtime and so no extra\nmemory for dynamic realignment will be needed (that is false when the whole\nstruct doesn't have long long alignment).  And also in the remaining hunks\ncauses another problem, where we compute INLINE_ORDERED_TEAM_IDS_OFF\nas the above offsetof aligned up to long long boundary and subtract\nsizeof (struct gomp_work_share) and INLINE_ORDERED_TEAM_IDS_OFF.\nWhen unlucky, the former isn't multiple of 8 and the latter is 4 bigger\nthan that and as the subtraction is done in size_t, we end up with (size_t) -4,\nso the comparison doesn't really work.\n\nThe fixes add additional conditions to make it work properly, but all of them\nshould be evaluated at compile time when optimizing and so shouldn't slow\nanything.\n\n2022-04-26  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR libgomp/105358\n\t* work.c (gomp_init_work_share): Don't mask of adjustment for\n\tdynamic long long realignment if struct gomp_work_share has smaller\n\talignof than long long.\n\t* loop.c (GOMP_loop_start): Don't use inline_ordered_team_ids if\n\tstruct gomp_work_share has smaller alignof than long long or if\n\tsizeof (struct gomp_work_share) is smaller than\n\tINLINE_ORDERED_TEAM_IDS_OFF.\n\t* loop_ull.c (GOMP_loop_ull_start): Likewise.\n\t* sections.c (GOMP_sections2_start): Likewise.", "tree": {"sha": "74607f2b52669b8db12005d197bc22f723474e0f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/74607f2b52669b8db12005d197bc22f723474e0f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/57a957cb71c004de80b0fd30c8db3cc67576e0ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a957cb71c004de80b0fd30c8db3cc67576e0ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/57a957cb71c004de80b0fd30c8db3cc67576e0ce", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/57a957cb71c004de80b0fd30c8db3cc67576e0ce/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65735d21ac410463126114c572999682f987972c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/65735d21ac410463126114c572999682f987972c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/65735d21ac410463126114c572999682f987972c"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "be85162bb1ecec4ab458cbc5d33a68b1505e23cf", "filename": "libgomp/loop.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a957cb71c004de80b0fd30c8db3cc67576e0ce/libgomp%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a957cb71c004de80b0fd30c8db3cc67576e0ce/libgomp%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Floop.c?ref=57a957cb71c004de80b0fd30c8db3cc67576e0ce", "patch": "@@ -270,8 +270,11 @@ GOMP_loop_start (long start, long end, long incr, long sched,\n #define INLINE_ORDERED_TEAM_IDS_OFF \\\n   ((offsetof (struct gomp_work_share, inline_ordered_team_ids)\t\t\\\n     + __alignof__ (long long) - 1) & ~(__alignof__ (long long) - 1))\n-\t  if (size > (sizeof (struct gomp_work_share)\n-\t\t      - INLINE_ORDERED_TEAM_IDS_OFF))\n+\t  if (sizeof (struct gomp_work_share)\n+\t      <= INLINE_ORDERED_TEAM_IDS_OFF\n+\t      || __alignof__ (struct gomp_work_share) < __alignof__ (long long)\n+\t      || size > (sizeof (struct gomp_work_share)\n+\t\t\t- INLINE_ORDERED_TEAM_IDS_OFF))\n \t    *mem\n \t      = (void *) (thr->ts.work_share->ordered_team_ids\n \t\t\t  = gomp_malloc_cleared (size));"}, {"sha": "602737296d400b47e614eba75056ddc450ec9366", "filename": "libgomp/loop_ull.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a957cb71c004de80b0fd30c8db3cc67576e0ce/libgomp%2Floop_ull.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a957cb71c004de80b0fd30c8db3cc67576e0ce/libgomp%2Floop_ull.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Floop_ull.c?ref=57a957cb71c004de80b0fd30c8db3cc67576e0ce", "patch": "@@ -269,8 +269,11 @@ GOMP_loop_ull_start (bool up, gomp_ull start, gomp_ull end,\n #define INLINE_ORDERED_TEAM_IDS_OFF \\\n   ((offsetof (struct gomp_work_share, inline_ordered_team_ids)\t\t\\\n     + __alignof__ (long long) - 1) & ~(__alignof__ (long long) - 1))\n-\t  if (size > (sizeof (struct gomp_work_share)\n-\t\t      - INLINE_ORDERED_TEAM_IDS_OFF))\n+\t  if (sizeof (struct gomp_work_share)\n+\t      <= INLINE_ORDERED_TEAM_IDS_OFF\n+\t      || __alignof__ (struct gomp_work_share) < __alignof__ (long long)\n+\t      || size > (sizeof (struct gomp_work_share)\n+\t\t\t- INLINE_ORDERED_TEAM_IDS_OFF))\n \t    *mem\n \t      = (void *) (thr->ts.work_share->ordered_team_ids\n \t\t\t  = gomp_malloc_cleared (size));"}, {"sha": "7751d5aac830b406bfa6c6de5182e21626bd15cb", "filename": "libgomp/sections.c", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a957cb71c004de80b0fd30c8db3cc67576e0ce/libgomp%2Fsections.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a957cb71c004de80b0fd30c8db3cc67576e0ce/libgomp%2Fsections.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fsections.c?ref=57a957cb71c004de80b0fd30c8db3cc67576e0ce", "patch": "@@ -121,8 +121,11 @@ GOMP_sections2_start (unsigned count, uintptr_t *reductions, void **mem)\n #define INLINE_ORDERED_TEAM_IDS_OFF \\\n   ((offsetof (struct gomp_work_share, inline_ordered_team_ids)\t\t\\\n     + __alignof__ (long long) - 1) & ~(__alignof__ (long long) - 1))\n-\t  if (size > (sizeof (struct gomp_work_share)\n-\t\t      - INLINE_ORDERED_TEAM_IDS_OFF))\n+\t  if (sizeof (struct gomp_work_share)\n+\t      <= INLINE_ORDERED_TEAM_IDS_OFF\n+\t      || __alignof__ (struct gomp_work_share) < __alignof__ (long long)\n+\t      || size > (sizeof (struct gomp_work_share)\n+\t\t\t- INLINE_ORDERED_TEAM_IDS_OFF))\n \t    *mem\n \t      = (void *) (thr->ts.work_share->ordered_team_ids\n \t\t\t  = gomp_malloc_cleared (size));"}, {"sha": "c53625afe2c6a41884f07d6106efd6145f5b618b", "filename": "libgomp/work.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/57a957cb71c004de80b0fd30c8db3cc67576e0ce/libgomp%2Fwork.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/57a957cb71c004de80b0fd30c8db3cc67576e0ce/libgomp%2Fwork.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Fwork.c?ref=57a957cb71c004de80b0fd30c8db3cc67576e0ce", "patch": "@@ -113,7 +113,9 @@ gomp_init_work_share (struct gomp_work_share *ws, size_t ordered,\n \t  size_t o = nthreads * sizeof (*ws->ordered_team_ids);\n \t  o += __alignof__ (long long) - 1;\n \t  if ((offsetof (struct gomp_work_share, inline_ordered_team_ids)\n-\t       & (__alignof__ (long long) - 1)) == 0)\n+\t       & (__alignof__ (long long) - 1)) == 0\n+\t      && __alignof__ (struct gomp_work_share)\n+\t\t >= __alignof__ (long long))\n \t    o &= ~(__alignof__ (long long) - 1);\n \t  ordered += o - 1;\n \t}"}]}