{"sha": "8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA5OWIyYWVlODJlYTBiZjdlZjQ5ZjM4ZjE3OWZhNmU3ZTI3ZTk3MA==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2003-01-23T17:21:11Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2003-01-23T17:21:11Z"}, "message": "configure.in (libtool_VERSION): To 6:0:0.\n\n\n2003-01-23  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* configure.in (libtool_VERSION): To 6:0:0.\n\t* configure: Regenerated.\n\t* config/linker-map.gnu: Clean.\n\n\t* src/misc-inst.cc: Remove instantiations.\n\n\t* include/bits/stl_alloc.h (__malloc_alloc_template):\n\tTo __malloc_alloc.\n\t(__default_alloc_template): To __pool_alloc.\n\t* src/stl-inst.cc: Same.\n\t* include/backward/alloc.h: Update.\n\t* testsuite/ext/allocators.cc: Update.\n\n\t* src/globals.cc (__gnu_cxx): Remove _GLIBCPP_ASM_SYMVER. Should\n\treally try to remove these if possible.\n\t* src/locale.cc (std): Same.\n\n\t* testsuite/abi_check.cc (check_version): Add.\n\nFrom-SVN: r61658", "tree": {"sha": "0800934037e463e6d315f7cfc4b38adfd4809bc4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0800934037e463e6d315f7cfc4b38adfd4809bc4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/comments", "author": null, "committer": null, "parents": [{"sha": "2d110c0a7ffab65d87ce905f7a9e6eeecf165ce4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d110c0a7ffab65d87ce905f7a9e6eeecf165ce4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d110c0a7ffab65d87ce905f7a9e6eeecf165ce4"}], "stats": {"total": 529, "additions": 205, "deletions": 324}, "files": [{"sha": "5b5e8c7392d375d65ac54037c39404feebeb2042", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "patch": "@@ -1,3 +1,24 @@\n+2003-01-23  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* configure.in (libtool_VERSION): To 6:0:0.\n+\t* configure: Regenerated.\n+\t* config/linker-map.gnu: Clean.\n+\t\n+\t* src/misc-inst.cc: Remove instantiations.\n+\n+\t* include/bits/stl_alloc.h (__malloc_alloc_template): \n+\tTo __malloc_alloc.\n+\t(__default_alloc_template): To __pool_alloc.\n+\t* src/stl-inst.cc: Same.\n+\t* include/backward/alloc.h: Update.\n+\t* testsuite/ext/allocators.cc: Update.\n+\t\n+\t* src/globals.cc (__gnu_cxx): Remove _GLIBCPP_ASM_SYMVER. Should\n+\treally try to remove these if possible.\n+\t* src/locale.cc (std): Same.\n+\n+\t* testsuite/abi_check.cc (check_version): Add.\n+\n 2003-01-22  Benjamin Kosnik  <bkoz@redhat.com>\n \t    Sysoltsev Slawa  <Vyatcheslav.Sysoltsev@intel.com>\n \t    Mark Mitchell  <mark@codesourcery.com>"}, {"sha": "cd38a2de82550485074969df614b0bc968cc52aa", "filename": "libstdc++-v3/config/linker-map.gnu", "status": "modified", "additions": 85, "deletions": 187, "changes": 272, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Flinker-map.gnu?ref=8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "patch": "@@ -1,6 +1,6 @@\n ## Linker script for GNU ld 2.11.94+ only.\n ##\n-## Copyright (C) 2002 Free Software Foundation, Inc.\n+## Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n ##\n ## This file is part of the libstdc++ version 3 distribution.\n ##\n@@ -20,7 +20,7 @@\n ## Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n ## USA.\n \n-GLIBCPP_3.2 {\n+GLIBCPP_3.4 {\n \n   global:\n \n@@ -37,31 +37,24 @@ GLIBCPP_3.2 {\n       std::basic_[t-z]*;\n       std::ba[t-z]*;\n       std::b[b-z]*;\n-      std::c[a-n]*;\n-      std::co[a-c]*;\n-      std::codecvt_byname*;\n-      std::codecvt::[A-Za-b]*;\n-      std::codecvt::[A-Zd-z]*;\n-      std::codecvt_c;\n-      std::codecvt_w;\n-      std::co[e-z]*;\n-      std::c[p-z]*;\n-      std::c_[a-z]*;\t\n-      std::[A-Zd-k]*;\n+      std::[A-Zc-k]*;\n       std::length_error*;\n       std::logic_error*;\n       std::locale::[A-Za-e]*;\n       std::locale::facet::[A-Za-z]*;\n       std::locale::facet::_M*;\n-      std::locale::facet::_S_c_locale;\n+      std::locale::facet::_S_c_locale;\t\n       std::locale::facet::_S_clone_c_locale*;\n       std::locale::facet::_S_create_c_locale*;\n       std::locale::facet::_S_destroy_c_locale*;\n-      std::locale::[A-Zg-z]*;\n-      std::locale::_[A-Ra-z]*;\n-      std::locale::_S_classic;\n-      std::locale::_S_global;\n-      std::locale::_S_num_categories;\n+      std::locale::[A-Zg-h]*;\n+      std::locale::id::[A-Za-z]*;\n+      std::locale::id::_S_highwater;\n+      std::locale::[A-Zj-z]*;\n+      std::locale::_[A-Ha-z]*;\n+      std::locale::_Impl::[A-Za-z]*;\n+      std::locale::_Impl::_M_[A-Za-z]*;\n+      std::locale::_[J-Ra-z]*;\n       std::locale::_S_normalize_category*;\n       std::locale::_[T-Za-z]*;\n       std::[A-Zm-z]*;\n@@ -70,110 +63,60 @@ GLIBCPP_3.2 {\n       std::__num_base*;\n       std::__timepunct*;\n       std::__numeric_limits_base*;\n-      std::_S_bit_count;\n-      std::_S_first_one\n+      std::_S_bit_count\n     };\n \n     # Names not in an 'extern' block are mangled names.\n \n-    # std::string minus binary operator plus\n-    _ZNKSs*;\n-    _ZNKSb*;\n-    _ZNSs[A-Za-z]*;\n-    _ZNSs[0-9][A-Za-z]*;\n-    _ZNSs[0-9][0-9][A-Za-z]*;\n-    _ZNSs[0-9]_[A-Ra-z]*;\n-    _ZNSs[0-9][0-9]_[A-Ra-z]*;\n-    _ZNSs12_S_empty_repEv;\n-    _ZNSs20_S_empty_rep_storageE;\n-    _ZNSbIwSt11char_traitsIwESaIwEE20_S_empty_rep_storageE;\n-    _ZNSs12_S_constructE*;\n-    _ZNSs13_S_copy_charsE*;\n-    _ZNSbIwSt11char_traitsIwESaIwEE[A-Ra-z]*;\n-    _ZNSbIwSt11char_traitsIwESaIwEE[0-9][A-Ra-z]*;\n-    _ZNSbIwSt11char_traitsIwESaIwEE[0-9][0-9][A-Ra-z]*;\n-    _ZNSbIwSt11char_traitsIwESaIwEE[0-9]_[A-Ra-z]*;\n-    _ZNSbIwSt11char_traitsIwESaIwEE[0-9][0-9]_[A-Ra-z]*;\n-    _ZNSbIwSt11char_traitsIwESaIwEE13_S_copy_chars*;\n-    _ZNSbIwSt11char_traitsIwESaIwEE12_S_constructE[jm]wRKS1_;\n-    _ZNSbIwSt11char_traitsIwESaIwEE12_S_empty_repEv;\n-    _ZSt24__uninitialized_copy_auxIN9*;\n-    _ZSt26__uninitialized_fill_n_aux*;\n-    _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_EPKS3_RKS6_;\n-    _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ES3_RKS6_;\n-    _ZStplIwSt11char_traitsIwESaIwEESbIT_T0_T1_EPKS3_RKS6_;\n-    _ZStplIwSt11char_traitsIwESaIwEESbIT_T0_T1_ES3_RKS6_;\n-\n     # std::locale destructors\n     _ZNSt6localeD*;\n \t\n     # std::locale::facet destructors\n     _ZNSt6locale5facetD*;\n \t \n-    # std::codecvt<char> members.\n-    _ZNKSt7codecvtIcc11__mbstate_tE*;\n-    # std::codecvt<char>::~codecvt\n-    _ZNSt7codecvtIcc11__mbstate_tED*;\n-    # std::codecvt<char>::codecvt(size_t), where size_t variable.\n-    _ZNSt7codecvtIcc11__mbstate_tEC[12]E[jm];\n-    # std::codecvt<char>::id\n-    _ZNSt7codecvtIcc11__mbstate_tE2idE;\n-\n-    # std::codecvt<wchar_t> members.\n-    _ZNKSt7codecvtIwc11__mbstate_tE*;\n-    # std::codecvt<wchar_t>::~codecvt\n-    _ZNSt7codecvtIwc11__mbstate_tED*;\n-    # std::codecvt<wchar_t>::codecvt(size_t), where size_t variable.\n-    _ZNSt7codecvtIwc11__mbstate_tEC[12]E[jm];\n-    # std::codecvt<wchar_t>::id\n-    _ZNSt7codecvtIwc11__mbstate_tE2idE;\n-\n-     # std::use_facet<codecvt>\n-    _ZSt9use_facetISt7codecvtIcc11__mbstate_tEERKT_RKSt6locale;\n-    _ZSt9use_facetISt7codecvtIwc11__mbstate_tEERKT_RKSt6locale;\n+    # std::locale::_Impl constructors, destrutors\n+    _ZNSt6locale5_ImplC*;\n+    _ZNSt6locale5_ImplD*;\n \n-    # std::has_facet*\n+    # bool has_facet \n     _ZSt9has_facet*;\n \n-    # std::__default_alloc_template\n-    _ZNSt24__default_alloc_templateILb1ELi0EE10deallocate*;\n-    _ZNSt24__default_alloc_templateILb1ELi0EE8allocate*;\n-    _ZNSt24__default_alloc_templateILb1ELi0EE12_S_free_listE;\n-    _ZNSt24__default_alloc_templateILb1ELi0EE22_S_node_allocator_lockE;\n-    _ZNSt24__default_alloc_templateILb1ELi0EE9_S_refillE*;\n-\n-    # std::__default_alloc_template to be removed in the future\n-    _ZNSt24__default_alloc_templateILb1ELi0EE10reallocateEPv*;\n-    _ZNSt24__default_alloc_templateILb1ELi0EE11_S_round_upE*;\n-    _ZNSt24__default_alloc_templateILb1ELi0EE14_S_chunk_allocE*;\n-    _ZNSt24__default_alloc_templateILb1ELi0EE17_S_freelist_indexE*;\n-    _ZNSt24__default_alloc_templateILb1ELi0EE11_S_end_freeE;\n-    _ZNSt24__default_alloc_templateILb1ELi0EE12_S_heap_sizeE;\n-    _ZNSt24__default_alloc_templateILb1ELi0EE13_S_start_freeE;\n-    _ZNSt24__default_alloc_templateILb1ELi0EE5_Lock*;\n-\n-    # operator new(unsigned)\n-    _Znwj;\n-    # operator new(unsigned, std::nothrow_t const&)\n-    _ZnwjRKSt9nothrow_t;\n-    # operator new(unsigned long)\n-    _Znwm;\n-    # operator new(unsigned long, std::nothrow_t const&)\n-    _ZnwmRKSt9nothrow_t;\n+    # std::string, std::wstring minus static data members\n+    _ZNKS[sb]*;\n+    _ZNS[sb]D*;\n+    _ZNS[sb]C*;\n+    _ZStplI[cw]St11char_traitsI[cw]ESaI[cw]EESbIT_T0_T1_EPKS3_RKS6_;\n+    _ZStplI[cw]St11char_traitsI[cw]ESaI[cw]EESbIT_T0_T1_ES3_RKS6_;\n+    _ZNS[sb]I[cw]St11char_traitsI[cw]ESaI[cw]EE[A-Ra-z]*;\n+    _ZNS[sb]I[cw]St11char_traitsI[cw]ESaI[cw]EE[0-9][A-Ra-z]*;\n+    _ZNS[sb]I[cw]St11char_traitsI[cw]ESaI[cw]EE[0-9][0-9][A-Ra-z]*;\n+    _ZNS[sb]I[cw]St11char_traitsI[cw]ESaI[cw]EE[0-9]_[A-Ra-z]*;\n+    _ZNS[sb]I[cw]St11char_traitsI[cw]ESaI[cw]EE[0-9][0-9]_[A-Ra-z]*;\n+    _ZNS[sb]I[cw]St11char_traitsI[cw]ESaI[cw]EE20_S_empty_rep_storageE;\n+\n+    # std::__pool_alloc\n+    _ZNSt12__pool_allocILb1ELi0EE10deallocateEPvj*;\n+    _ZNSt12__pool_allocILb1ELi0EE8allocateEj*;\n+    _ZNSt12__pool_allocILb1ELi0EE5_Lock*;\n+    _ZNSt12__pool_allocILb1ELi0EE12_S_force_newE;\n+    _ZNSt12__pool_allocILb1ELi0EE12_S_free_listE;\n+    _ZNSt12__pool_allocILb1ELi0EE7_S_lockE;\n+    _ZNSt12__pool_allocILb1ELi0EE9_S_refillE[jm];\n+\n+    # operator new(size_t)\n+    _Znw[jm];\n+    # operator new(size_t, std::nothrow_t const&)\n+    _Znw[jm]RKSt9nothrow_t;\n \n     # operator delete(void*)\n     _ZdlPv;\n     # operator delete(void*, std::nothrow_t const&)\n     _ZdlPvRKSt9nothrow_t;\n \n-    # operator new[](unsigned)\n-    _Znaj;\n-    # operator new[](unsigned, std::nothrow_t const&)\n-    _ZnajRKSt9nothrow_t;\n-    # operator new[](unsigned long)\n-    _Znam;\n-    # operator new[](unsigned long, std::nothrow_t const&)\n-    _ZnamRKSt9nothrow_t;\n+    # operator new[](size_t)\n+    _Zna[jm];\n+    # operator new[](size_t, std::nothrow_t const&)\n+    _Zna[jm]RKSt9nothrow_t;\n \n     # operator delete[](void*)\n     _ZdaPv;\n@@ -199,66 +142,47 @@ GLIBCPP_3.2 {\n     # std::__convert_to_v\n     _ZSt14__convert_to_v*;\n \n+    # stub functions from libmath\n+    sinf;\n+    sinl;\n+    sinhf;\n+    sinhl;\n+    cosf;\n+    cosl;\n+    coshf;\n+    coshl;\n+    tanf;\n+    tanl;\n+    tanhf;\n+    tanhl;\n+    atan2f;\n+    atan2l;\n+    expf;\n+    expl;\n+    hypotf;\n+    hypotl;\n+    hypot;\n+    logf;\n+    logl;\n+    log10f;\n+    log10l;\n+    powf;\n+    powl;\n+    sqrtf;\n+    sqrtl;\n+    copysignf;\n+    nan;\n+    __signbit;\n+    __signbitf;\n+    __signbitl;\n+\n   local:\n     *;\n };\n \n-# Symbols added after GLIBCPP_3.2\n-GLIBCPP_3.2.1 {\n-\n-  _ZNSt7codecvtIcc11__mbstate_tEC1EP15__locale_structj;\n-  _ZNSt7codecvtIcc11__mbstate_tEC2EP15__locale_structj;\n-  _ZNSt7codecvtIwc11__mbstate_tEC1EP15__locale_structj;\n-  _ZNSt7codecvtIwc11__mbstate_tEC2EP15__locale_structj;\n-\n-  _ZStplIcSt11char_traitsIcESaIcEESbIT_T0_T1_ERKS6_S8_;\n-  _ZStplIwSt11char_traitsIwESaIwEESbIT_T0_T1_ERKS6_S8_;\n-\n-  # stub functions from libmath\n-  sinf;\n-  sinl;\n-  sinhf;\n-  sinhl;\n-  cosf;\n-  cosl;\n-  coshf;\n-  coshl;\n-  tanf;\n-  tanl;\n-  tanhf;\n-  tanhl;\n-  atan2f;\n-  atan2l;\n-  expf;\n-  expl;\n-  hypotf;\n-  hypotl;\n-  hypot;\n-  logf;\n-  logl;\n-  log10f;\n-  log10l;\n-  powf;\n-  powl;\n-  sqrtf;\n-  sqrtl;\n-  copysignf;\n-  nan;\n-  __signbit;\n-  __signbitf;\n-  __signbitl;\n-\n-} GLIBCPP_3.2;\n-\n-\n-GLIBCPP_3.2.2 {\n-\n-  _ZNSt24__default_alloc_templateILb1ELi0EE12_S_force_newE;\n-\n-} GLIBCPP_3.2.1;\n \n # Symbols in the support library (libsupc++) have their own tag.\n-CXXABI_1.2 {\n+CXXABI_1.3 {\n \n   global:\n     __cxa_allocate_exception;\n@@ -272,6 +196,9 @@ CXXABI_1.2 {\n     __cxa_free_exception;\n     __cxa_get_globals;\n     __cxa_get_globals_fast;\n+    __cxa_guard_abort;\n+    __cxa_guard_acquire;\n+    __cxa_guard_release;\n     __cxa_pure_virtual;\n     __cxa_rethrow;\n     __cxa_throw;\n@@ -292,35 +219,6 @@ CXXABI_1.2 {\n     # __gnu_cxx::_verbose_terminate_handler()\n     _ZN9__gnu_cxx27__verbose_terminate_handlerEv;\n \n-    # XXX Should not be exported.\n-    __cxa_dyn_string_append_char;\n-    __cxa_dyn_string_append_cstr;\n-    __cxa_dyn_string_append;\n-    __cxa_dyn_string_clear;\n-    __cxa_dyn_string_copy_cstr;\n-    __cxa_dyn_string_copy;\n-    __cxa_dyn_string_delete;\n-    __cxa_dyn_string_eq;\n-    __cxa_dyn_string_init;\n-    __cxa_dyn_string_insert_char;\n-    __cxa_dyn_string_insert_cstr;\n-    __cxa_dyn_string_insert;\n-    __cxa_dyn_string_new;\n-    __cxa_dyn_string_prepend_cstr;\n-    __cxa_dyn_string_prepend;\n-    __cxa_dyn_string_release;\n-    __cxa_dyn_string_resize;\n-    __cxa_dyn_string_substring;\n-\n   local:\n     *;\n };\n-\n-# Symbols added after CXXABI_1.2\n-CXXABI_1.2.1 {\n-\n-    __cxa_guard_acquire;\n-    __cxa_guard_release;\n-    __cxa_guard_abort;\n-\n-} CXXABI_1.2;\n\\ No newline at end of file"}, {"sha": "0ee2e2b16e7f7a11f8d14cc0ef00f8b1a21f301f", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "patch": "@@ -591,7 +591,7 @@ ORIGINAL_LD_FOR_MULTILIBS=$LD\n PACKAGE=libstdc++\n \n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=5:2:0\n+libtool_VERSION=6:0:0\n \n \n "}, {"sha": "0c3c09e8805606dbd88a31081557d23a2ca13524", "filename": "libstdc++-v3/configure.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fconfigure.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fconfigure.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure.in?ref=8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "patch": "@@ -13,7 +13,7 @@ ORIGINAL_LD_FOR_MULTILIBS=$LD\n PACKAGE=libstdc++\n AC_SUBST(PACKAGE)\n # For libtool versioning info, format is CURRENT:REVISION:AGE\n-libtool_VERSION=5:2:0\n+libtool_VERSION=6:0:0\n AC_SUBST(libtool_VERSION)\n \n GLIBCPP_TOPREL_CONFIGURE"}, {"sha": "6bcc421b7af2e0f39b397057703947b8c7309dc0", "filename": "libstdc++-v3/include/backward/alloc.h", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbackward%2Falloc.h?ref=8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "patch": "@@ -1,6 +1,6 @@\n // Backward-compat support -*- C++ -*-\n \n-// Copyright (C) 2001 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -47,12 +47,13 @@\n #include <bits/c++config.h>\n #include <bits/stl_alloc.h>\n \n-using std::__malloc_alloc_template; \n+using std::__malloc_alloc; \n using std::__simple_alloc; \n using std::__debug_alloc; \n using std::__alloc; \n using std::__single_client_alloc; \n+using std::__pool_alloc; \n using std::allocator;\n-using std::__default_alloc_template; \n+\n \n #endif "}, {"sha": "a40f7c1feae0fcdfdd6943f876d82a0572b83652", "filename": "libstdc++-v3/include/bits/stl_alloc.h", "status": "modified", "additions": 45, "deletions": 47, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_alloc.h?ref=8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "patch": "@@ -1,6 +1,6 @@\n // Allocators -*- C++ -*-\n \n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -113,15 +113,15 @@ namespace std\n   /**\n    *  @if maint\n    *  A malloc-based allocator.  Typically slower than the\n-   *  __default_alloc_template (below).  Typically thread-safe and more\n+   *  __pool_alloc (below).  Typically thread-safe and more\n    *  storage efficient.  The template argument is unused and is only present\n-   *  to permit multiple instantiations (but see __default_alloc_template\n+   *  to permit multiple instantiations (but see __pool_alloc\n    *  for caveats).  \"SGI\" style, plus __set_malloc_handler for OOM conditions.\n    *  @endif\n    *  (See @link Allocators allocators info @endlink for more.)\n    */\n   template<int __inst>\n-    class __malloc_alloc_template\n+    class __malloc_alloc\n     {\n     private:\n       static void* _S_oom_malloc(size_t);\n@@ -151,11 +151,11 @@ namespace std\n \n   // malloc_alloc out-of-memory handling\n   template<int __inst>\n-    void (* __malloc_alloc_template<__inst>::__malloc_alloc_oom_handler)() = 0;\n+    void (* __malloc_alloc<__inst>::__malloc_alloc_oom_handler)() = 0;\n \n   template<int __inst>\n     void*\n-    __malloc_alloc_template<__inst>::\n+    __malloc_alloc<__inst>::\n     _S_oom_malloc(size_t __n)\n     {\n       void (* __my_malloc_handler)();\n@@ -286,7 +286,7 @@ namespace std\n    *  (See @link Allocators allocators info @endlink for more.)\n    */\n   template<bool __threads, int __inst>\n-    class __default_alloc_template\n+    class __pool_alloc\n     {\n     private:\n       enum {_ALIGN = 8};\n@@ -306,7 +306,8 @@ namespace std\n       static char*                  _S_end_free;\n       static size_t                 _S_heap_size;\n \n-      static _STL_mutex_lock        _S_node_allocator_lock;\n+      static _STL_mutex_lock        _S_lock;\n+      static _Atomic_word \t    _S_force_new;\n \n       static size_t\n       _S_round_up(size_t __bytes)\n@@ -330,13 +331,11 @@ namespace std\n       // test whether threads are in use.\n       struct _Lock\n       {\n-        _Lock() { if (__threads) _S_node_allocator_lock._M_acquire_lock(); }\n-        ~_Lock() { if (__threads) _S_node_allocator_lock._M_release_lock(); }\n+        _Lock() { if (__threads) _S_lock._M_acquire_lock(); }\n+        ~_Lock() { if (__threads) _S_lock._M_release_lock(); }\n       } __attribute__ ((__unused__));\n       friend struct _Lock;\n \n-      static _Atomic_word _S_force_new;\n-\n     public:\n       // __n must be > 0\n       static void*\n@@ -404,18 +403,18 @@ namespace std\n     };\n \n   template<bool __threads, int __inst> _Atomic_word\n-  __default_alloc_template<__threads, __inst>::_S_force_new = 0;\n+  __pool_alloc<__threads, __inst>::_S_force_new = 0;\n \n   template<bool __threads, int __inst>\n     inline bool\n-    operator==(const __default_alloc_template<__threads,__inst>&,\n-               const __default_alloc_template<__threads,__inst>&)\n+    operator==(const __pool_alloc<__threads,__inst>&, \n+\t       const __pool_alloc<__threads,__inst>&)\n     { return true; }\n \n   template<bool __threads, int __inst>\n     inline bool\n-    operator!=(const __default_alloc_template<__threads,__inst>&,\n-               const __default_alloc_template<__threads,__inst>&)\n+    operator!=(const __pool_alloc<__threads,__inst>&,\n+               const __pool_alloc<__threads,__inst>&)\n     { return false; }\n \n \n@@ -424,7 +423,7 @@ namespace std\n   // the allocation lock.\n   template<bool __threads, int __inst>\n     char*\n-    __default_alloc_template<__threads, __inst>::\n+    __pool_alloc<__threads, __inst>::\n     _S_chunk_alloc(size_t __size, int& __nobjs)\n     {\n       char* __result;\n@@ -499,7 +498,7 @@ namespace std\n   // hold the allocation lock.\n   template<bool __threads, int __inst>\n     void*\n-    __default_alloc_template<__threads, __inst>::_S_refill(size_t __n)\n+    __pool_alloc<__threads, __inst>::_S_refill(size_t __n)\n     {\n       int __nobjs = 20;\n       char* __chunk = _S_chunk_alloc(__n, __nobjs);\n@@ -534,24 +533,23 @@ namespace std\n \n   template<bool __threads, int __inst>\n     _STL_mutex_lock\n-    __default_alloc_template<__threads,__inst>::_S_node_allocator_lock\n-    __STL_MUTEX_INITIALIZER;\n+    __pool_alloc<__threads,__inst>::_S_lock __STL_MUTEX_INITIALIZER;\n \n   template<bool __threads, int __inst>\n-    char* __default_alloc_template<__threads,__inst>::_S_start_free = 0;\n+    char* __pool_alloc<__threads,__inst>::_S_start_free = 0;\n \n   template<bool __threads, int __inst>\n-    char* __default_alloc_template<__threads,__inst>::_S_end_free = 0;\n+    char* __pool_alloc<__threads,__inst>::_S_end_free = 0;\n \n   template<bool __threads, int __inst>\n-    size_t __default_alloc_template<__threads,__inst>::_S_heap_size = 0;\n+    size_t __pool_alloc<__threads,__inst>::_S_heap_size = 0;\n \n   template<bool __threads, int __inst>\n-    typename __default_alloc_template<__threads,__inst>::_Obj* volatile\n-    __default_alloc_template<__threads,__inst>::_S_free_list[_NFREELISTS];\n+    typename __pool_alloc<__threads,__inst>::_Obj* volatile\n+    __pool_alloc<__threads,__inst>::_S_free_list[_NFREELISTS];\n \n-  typedef __default_alloc_template<true,0>    __alloc;\n-  typedef __default_alloc_template<false,0>   __single_client_alloc;\n+  typedef __pool_alloc<true,0>    __alloc;\n+  typedef __pool_alloc<false,0>   __single_client_alloc;\n \n \n   /**\n@@ -561,7 +559,7 @@ namespace std\n    *  of stl_alloc.h.)\n    *\n    *  The underlying allocator behaves as follows.\n-   *    - __default_alloc_template is used via two typedefs\n+   *    - __pool_alloc is used via two typedefs\n    *    - \"__single_client_alloc\" typedef does no locking for threads\n    *    - \"__alloc\" typedef is threadsafe via the locks\n    *    - __new_alloc is used for memory requests\n@@ -655,7 +653,7 @@ namespace std\n   /**\n    *  @if maint\n    *  Allocator adaptor to turn an \"SGI\" style allocator (e.g.,\n-   *  __alloc, __malloc_alloc_template) into a \"standard\" conforming\n+   *  __alloc, __malloc_alloc) into a \"standard\" conforming\n    *  allocator.  Note that this adaptor does *not* assume that all\n    *  objects of the underlying alloc class are identical, nor does it\n    *  assume that all of the underlying alloc's member functions are\n@@ -757,14 +755,14 @@ namespace std\n    */\n   template<int inst>\n     inline bool\n-    operator==(const __malloc_alloc_template<inst>&,\n-               const __malloc_alloc_template<inst>&)\n+    operator==(const __malloc_alloc<inst>&,\n+               const __malloc_alloc<inst>&)\n     { return true; }\n \n   template<int __inst>\n     inline bool\n-    operator!=(const __malloc_alloc_template<__inst>&,\n-               const __malloc_alloc_template<__inst>&)\n+    operator!=(const __malloc_alloc<__inst>&,\n+               const __malloc_alloc<__inst>&)\n     { return false; }\n \n   template<typename _Alloc>\n@@ -840,20 +838,20 @@ namespace std\n   //@{\n   /// Versions for the predefined \"SGI\" style allocators.\n   template<typename _Tp, int __inst>\n-    struct _Alloc_traits<_Tp, __malloc_alloc_template<__inst> >\n+    struct _Alloc_traits<_Tp, __malloc_alloc<__inst> >\n     {\n       static const bool _S_instanceless = true;\n-      typedef __simple_alloc<_Tp, __malloc_alloc_template<__inst> > _Alloc_type;\n-      typedef __allocator<_Tp, __malloc_alloc_template<__inst> > allocator_type;\n+      typedef __simple_alloc<_Tp, __malloc_alloc<__inst> > _Alloc_type;\n+      typedef __allocator<_Tp, __malloc_alloc<__inst> > allocator_type;\n     };\n \n   template<typename _Tp, bool __threads, int __inst>\n-    struct _Alloc_traits<_Tp, __default_alloc_template<__threads, __inst> >\n+    struct _Alloc_traits<_Tp, __pool_alloc<__threads, __inst> >\n     {\n       static const bool _S_instanceless = true;\n-      typedef __simple_alloc<_Tp, __default_alloc_template<__threads, __inst> >\n+      typedef __simple_alloc<_Tp, __pool_alloc<__threads, __inst> >\n       _Alloc_type;\n-      typedef __allocator<_Tp, __default_alloc_template<__threads, __inst> >\n+      typedef __allocator<_Tp, __pool_alloc<__threads, __inst> >\n       allocator_type;\n     };\n \n@@ -871,20 +869,20 @@ namespace std\n   /// \"SGI\" style allocators.\n   template<typename _Tp, typename _Tp1, int __inst>\n     struct _Alloc_traits<_Tp,\n-                         __allocator<_Tp1, __malloc_alloc_template<__inst> > >\n+                         __allocator<_Tp1, __malloc_alloc<__inst> > >\n     {\n       static const bool _S_instanceless = true;\n-      typedef __simple_alloc<_Tp, __malloc_alloc_template<__inst> > _Alloc_type;\n-      typedef __allocator<_Tp, __malloc_alloc_template<__inst> > allocator_type;\n+      typedef __simple_alloc<_Tp, __malloc_alloc<__inst> > _Alloc_type;\n+      typedef __allocator<_Tp, __malloc_alloc<__inst> > allocator_type;\n     };\n \n   template<typename _Tp, typename _Tp1, bool __thr, int __inst>\n-    struct _Alloc_traits<_Tp, __allocator<_Tp1, __default_alloc_template<__thr, __inst> > >\n+    struct _Alloc_traits<_Tp, __allocator<_Tp1, __pool_alloc<__thr, __inst> > >\n     {\n       static const bool _S_instanceless = true;\n-      typedef __simple_alloc<_Tp, __default_alloc_template<__thr,__inst> >\n+      typedef __simple_alloc<_Tp, __pool_alloc<__thr,__inst> >\n       _Alloc_type;\n-      typedef __allocator<_Tp, __default_alloc_template<__thr,__inst> >\n+      typedef __allocator<_Tp, __pool_alloc<__thr,__inst> >\n       allocator_type;\n     };\n \n@@ -902,7 +900,7 @@ namespace std\n   // NB: This syntax is a GNU extension.\n   extern template class allocator<char>;\n   extern template class allocator<wchar_t>;\n-  extern template class __default_alloc_template<true,0>;\n+  extern template class __pool_alloc<true,0>;\n } // namespace std\n \n #endif"}, {"sha": "7d4949c51888014a0ed12bdf01fb521c114e25c6", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 1, "deletions": 42, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "patch": "@@ -1,4 +1,4 @@\n-// Copyright (C) 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -68,7 +68,6 @@ namespace __gnu_cxx\n   typedef char fake_locale[sizeof(locale)]\n   __attribute__ ((aligned(__alignof__(locale))));\n   fake_locale c_locale;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx8c_localeE, _ZSt8c_locale, GLIBCPP_3.2)\n \n   // GLIBCXX_ABI > 5 will not need this symbol at all.\n   // It's here just as a placeholder, as the size of this exported\n@@ -77,171 +76,131 @@ namespace __gnu_cxx\n   typedef char fake_locale_Impl_compat[o]\n   __attribute__ ((aligned(__alignof__(o))));\n   fake_locale_Impl_compat  c_locale_impl_compat;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx20c_locale_impl_compatE, _ZSt13c_locale_impl, GLIBCPP_3.2)\n \n   typedef char fake_facet_vec[sizeof(locale::facet*)]\n   __attribute__ ((aligned(__alignof__(locale::facet*))));\n   fake_facet_vec facet_vec[_GLIBCPP_NUM_FACETS];\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9facet_vecE, _ZSt9facet_vec, GLIBCPP_3.2)\n \n   typedef char fake_ctype_c[sizeof(std::ctype<char>)]\n   __attribute__ ((aligned(__alignof__(std::ctype<char>))));\n   fake_ctype_c ctype_c;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx7ctype_cE, _ZSt7ctype_c, GLIBCPP_3.2)\n \n   typedef char fake_collate_c[sizeof(std::collate<char>)]\n   __attribute__ ((aligned(__alignof__(std::collate<char>))));\n   fake_collate_c collate_c;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9collate_cE, _ZSt9collate_c, GLIBCPP_3.2)\n \n   typedef char fake_numpunct_c[sizeof(numpunct<char>)]\n   __attribute__ ((aligned(__alignof__(numpunct<char>))));\n   fake_numpunct_c numpunct_c;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10numpunct_cE, _ZSt10numpunct_c, GLIBCPP_3.2)\n \n   typedef char fake_num_get_c[sizeof(num_get<char>)]\n   __attribute__ ((aligned(__alignof__(num_get<char>))));\n   fake_num_get_c num_get_c;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9num_get_cE, _ZSt9num_get_c, GLIBCPP_3.2)\n \n   typedef char fake_num_put_c[sizeof(num_put<char>)]\n   __attribute__ ((aligned(__alignof__(num_put<char>))));\n   fake_num_put_c num_put_c;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9num_put_cE, _ZSt9num_put_c, GLIBCPP_3.2)\n \n   typedef char fake_codecvt_c[sizeof(codecvt<char, char, mbstate_t>)]\n   __attribute__ ((aligned(__alignof__(codecvt<char, char, mbstate_t>))));\n   fake_codecvt_c codecvt_c;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9codecvt_cE, _ZSt9codecvt_c, GLIBCPP_3.2)\n \n   typedef char fake_moneypunct_c[sizeof(moneypunct<char, true>)]\n   __attribute__ ((aligned(__alignof__(moneypunct<char, true>))));\n   fake_moneypunct_c moneypunct_tc;\n   fake_moneypunct_c moneypunct_fc;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx13moneypunct_tcE,\\\n-        _ZSt13moneypunct_tc, GLIBCPP_3.2)\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx13moneypunct_fcE,\\\n-        _ZSt13moneypunct_fc, GLIBCPP_3.2)\n \n   typedef char fake_money_get_c[sizeof(money_get<char>)]\n   __attribute__ ((aligned(__alignof__(money_get<char>))));\n   fake_money_get_c money_get_c;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx11money_get_cE, _ZSt11money_get_c, GLIBCPP_3.2)\n   \n   typedef char fake_money_put_c[sizeof(money_put<char>)]\n   __attribute__ ((aligned(__alignof__(money_put<char>))));\n   fake_money_put_c money_put_c;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx11money_put_cE, _ZSt11money_put_c, GLIBCPP_3.2)\n \n   typedef char fake_timepunct_c[sizeof(__timepunct<char>)]\n   __attribute__ ((aligned(__alignof__(__timepunct<char>))));\n   fake_timepunct_c timepunct_c;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx11timepunct_cE, _ZSt11timepunct_c, GLIBCPP_3.2)\n \n   typedef char fake_time_get_c[sizeof(time_get<char>)]\n   __attribute__ ((aligned(__alignof__(time_get<char>))));\n   fake_time_get_c time_get_c;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10time_get_cE, _ZSt10time_get_c, GLIBCPP_3.2)\n \n   typedef char fake_time_put_c[sizeof(time_put<char>)]\n   __attribute__ ((aligned(__alignof__(time_put<char>))));\n   fake_time_put_c time_put_c;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10time_put_cE, _ZSt10time_put_c, GLIBCPP_3.2)\n \n   typedef char fake_messages_c[sizeof(messages<char>)]\n   __attribute__ ((aligned(__alignof__(messages<char>))));\n   fake_messages_c messages_c;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10messages_cE, _ZSt10messages_c, GLIBCPP_3.2)\n \n #ifdef  _GLIBCPP_USE_WCHAR_T\n   typedef char fake_wtype_w[sizeof(std::ctype<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(std::ctype<wchar_t>))));\n   fake_wtype_w ctype_w;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx7ctype_wE, _ZSt7ctype_w, GLIBCPP_3.2)\n \n   typedef char fake_wollate_w[sizeof(std::collate<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(std::collate<wchar_t>))));\n   fake_wollate_w collate_w;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9collate_wE, _ZSt9collate_w, GLIBCPP_3.2)\n \n   typedef char fake_numpunct_w[sizeof(numpunct<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(numpunct<wchar_t>))));\n   fake_numpunct_w numpunct_w;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10numpunct_wE, _ZSt10numpunct_w, GLIBCPP_3.2)\n \n   typedef char fake_num_get_w[sizeof(num_get<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(num_get<wchar_t>))));\n   fake_num_get_w num_get_w;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9num_get_wE, _ZSt9num_get_w, GLIBCPP_3.2)\n \n   typedef char fake_num_put_w[sizeof(num_put<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(num_put<wchar_t>))));\n   fake_num_put_w num_put_w;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9num_put_wE, _ZSt9num_put_w, GLIBCPP_3.2)\n \n   typedef char fake_wodecvt_w[sizeof(codecvt<wchar_t, char, mbstate_t>)]\n   __attribute__ ((aligned(__alignof__(codecvt<wchar_t, char, mbstate_t>))));\n   fake_wodecvt_w codecvt_w;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9codecvt_wE, _ZSt9codecvt_w, GLIBCPP_3.2)\n \n   typedef char fake_moneypunct_w[sizeof(moneypunct<wchar_t, true>)]\n   __attribute__ ((aligned(__alignof__(moneypunct<wchar_t, true>))));\n   fake_moneypunct_w moneypunct_tw;\n   fake_moneypunct_w moneypunct_fw;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx13moneypunct_twE,\\\n-        _ZSt13moneypunct_tw, GLIBCPP_3.2)\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx13moneypunct_fwE,\\\n-        _ZSt13moneypunct_fw, GLIBCPP_3.2)\n \n   typedef char fake_money_get_w[sizeof(money_get<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(money_get<wchar_t>))));\n   fake_money_get_w money_get_w;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx11money_get_wE, _ZSt11money_get_w, GLIBCPP_3.2)\n   \n   typedef char fake_money_put_w[sizeof(money_put<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(money_put<wchar_t>))));\n   fake_money_put_w money_put_w;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx11money_put_wE, _ZSt11money_put_w, GLIBCPP_3.2)\n \n   typedef char fake_timepunct_w[sizeof(__timepunct<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(__timepunct<wchar_t>))));\n   fake_timepunct_w timepunct_w;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx11timepunct_wE, _ZSt11timepunct_w, GLIBCPP_3.2)\n \n   typedef char fake_time_get_w[sizeof(time_get<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(time_get<wchar_t>))));\n   fake_time_get_w time_get_w;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10time_get_wE, _ZSt10time_get_w, GLIBCPP_3.2)\n \n   typedef char fake_time_put_w[sizeof(time_put<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(time_put<wchar_t>))));\n   fake_time_put_w time_put_w;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10time_put_wE, _ZSt10time_put_w, GLIBCPP_3.2)\n \n   typedef char fake_messages_w[sizeof(messages<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(messages<wchar_t>))));\n   fake_messages_w messages_w;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx10messages_wE, _ZSt10messages_w, GLIBCPP_3.2)\n #endif\n \n   typedef char fake_filebuf[sizeof(stdio_filebuf<char>)]\n   __attribute__ ((aligned(__alignof__(stdio_filebuf<char>))));\n   fake_filebuf buf_cout;\n   fake_filebuf buf_cin;\n   fake_filebuf buf_cerr;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx8buf_coutE, _ZSt8buf_cout, GLIBCPP_3.2)\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx7buf_cinE, _ZSt7buf_cin, GLIBCPP_3.2)\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx8buf_cerrE, _ZSt8buf_cerr, GLIBCPP_3.2)\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   typedef char fake_wfilebuf[sizeof(stdio_filebuf<wchar_t>)]\n   __attribute__ ((aligned(__alignof__(stdio_filebuf<wchar_t>))));\n   fake_wfilebuf buf_wcout;\n   fake_wfilebuf buf_wcin;\n   fake_wfilebuf buf_wcerr;\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9buf_wcoutE, _ZSt9buf_wcout, GLIBCPP_3.2)\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx8buf_wcinE, _ZSt8buf_wcin, GLIBCPP_3.2)\n-  _GLIBCPP_ASM_SYMVER(_ZN9__gnu_cxx9buf_wcerrE, _ZSt9buf_wcerr, GLIBCPP_3.2)\n #endif\n \n   // Globals for once-only runtime initialization of mutex objects.  This"}, {"sha": "8246f4a5f475a448f86ae09d0695f61c1df3dd2e", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "patch": "@@ -58,10 +58,11 @@ namespace std\n   // In the future, GLIBCXX_ABI > 5 should remove all uses of\n   // _GLIBCPP_ASM_SYMVER in this file, and remove exports of any\n   // static data members of locale.\n+\n+  // These are no longer exported.\n   locale::_Impl* \t\tlocale::_S_classic;\n   locale::_Impl* \t\tlocale::_S_global; \n   const size_t \t\t\tlocale::_S_categories_size;\n-  _GLIBCPP_ASM_SYMVER(_ZNSt6locale18_S_categories_sizeE, _ZNSt6locale17_S_num_categoriesE, GLIBCPP_3.2)\n   const size_t \t\t\tlocale::_S_extra_categories_size;\n \n   // Definitions for static const data members of locale::id"}, {"sha": "e612aa45cabba907e1b6a2844bff6d15d2a3aa2e", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002\n+// Copyright (C) 1997, 1998, 1999, 2000, 2001, 2002, 2003\n // Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n@@ -71,19 +71,4 @@ namespace std\n #ifdef _GLIBCPP_INST_ATOMICITY_LOCK\n   template volatile int __Atomicity_lock<0>::_S_atomicity_lock;\n #endif\n-\n-#if 1\n-  // XXX\n-  // 2002-05-24 These are no longer needed and should eventually be deleted.\n-  template \n-    string* \n-    __uninitialized_fill_n_aux<string*, size_t, string>\n-    (string*, size_t, string const &, __false_type);\n-\n-  template \n-    string* \n-    __uninitialized_copy_aux<vector<string>::const_iterator, string *>\n-    (vector<string>::const_iterator, vector<string>::const_iterator, \n-     string*, __false_type);\n-#endif\n } // namespace std"}, {"sha": "4bcf23f54dd29db0dbc600213db030695c81a8a9", "filename": "libstdc++-v3/src/stl-inst.cc", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fstl-inst.cc?ref=8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "patch": "@@ -1,6 +1,6 @@\n // Explicit instantiation file.\n \n-// Copyright (C) 1999, 2001, 2002 Free Software Foundation, Inc.\n+// Copyright (C) 1999, 2001, 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -39,5 +39,5 @@ namespace std\n   template class allocator<char>;\n   template class allocator<wchar_t>;\n \n-  template class __default_alloc_template<true, 0>;\n+  template class __pool_alloc<true, 0>;\n } // namespace std"}, {"sha": "4460dd14d4e40a7bfa85cf0b41a3975af3f2e54b", "filename": "libstdc++-v3/testsuite/abi_check.cc", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fabi_check.cc?ref=8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "patch": "@@ -1,6 +1,6 @@\n // Utility for libstdc++ ABI analysis -*- C++ -*-\n \n-// Copyright (C) 2002 Free Software Foundation, Inc.\n+// Copyright (C) 2002, 2003 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -75,6 +75,38 @@ namespace __gnu_cxx\n typedef std::deque<std::string>\t\t\t\tsymbol_names;\n typedef __gnu_cxx::hash_map<std::string, symbol_info> \tsymbol_infos;\n \n+\n+bool\n+check_version(const symbol_info& test)\n+{\n+  bool ret = true;\n+\n+  typedef std::vector<std::string> compat_list;\n+  static compat_list known;\n+  if (known.empty())\n+    {\n+      known.push_back(\"GLIBCPP_3.2\");\n+      known.push_back(\"GLIBCPP_3.2.1\");\n+      known.push_back(\"GLIBCPP_3.2.2\");\n+      known.push_back(\"GLIBCPP_3.4\");\n+      known.push_back(\"CXXABI_1.2\");\n+      known.push_back(\"CXXABI_1.2.1\");\n+      known.push_back(\"CXXABI_1.3\");\n+    }\n+\n+  compat_list::iterator end = known.end();\n+\n+  // Check version names for compatibility...\n+  compat_list::iterator it1 = find(known.begin(), end, test.version_name);\n+  \n+  // Check for weak label.\n+  compat_list::iterator it2 = find(known.begin(), end, test.name);\n+  if (it1 != end || it2 != end)\n+    ret = true;\n+\n+  return ret;\n+}\n+\n bool \n check_compatible(const symbol_info& lhs, const symbol_info& rhs, \n \t\t bool verbose = false)\n@@ -113,7 +145,8 @@ check_compatible(const symbol_info& lhs, const symbol_info& rhs,\n \t}\n     }\n \n-  if (lhs.version_name != rhs.version_name)\n+  if (lhs.version_name != rhs.version_name \n+      && !check_version(lhs) && !check_version(rhs))\n     {\n       ret = false;\n       if (verbose)\n@@ -363,23 +396,8 @@ main(int argc, char** argv)\n   // Check added names for compatibility.\n   for (size_t i = 0; i < added_names.size(); ++i)\n     {\n-      vector<string> compatible_versions;\n-      compatible_versions.push_back(\"GLIBCPP_3.2.1\");\n-      compatible_versions.push_back(\"GLIBCPP_3.2.2\");\n-      compatible_versions.push_back(\"CXXABI_1.2.1\");\n-\n       symbol_info test = test_symbols[added_names[i]];\n-      vector<string>::iterator end = compatible_versions.end();\n-\n-      // Check version names for compatibility...\n-      vector<string>::iterator it1 = find(compatible_versions.begin(), end, \n-\t\t\t\t\t  test.version_name);\n-\n-      // Check for weak label.\n-      vector<string>::iterator it2 = find(compatible_versions.begin(), end, \n-\t\t\t\t\t  test.name);\n-\n-      if (it1 == end && it2 == end)\n+      if (!check_version(test))\n \t{\n \t  incompatible.push_back(symbol_pair(test, test));\n \t  cout << test.version_name << endl;"}, {"sha": "3102c91bcdeda98eec48b6874106454d7c46931d", "filename": "libstdc++-v3/testsuite/ext/allocators.cc", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fallocators.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8099b2aee82ea0bf7ef49f38f179fa6e7e27e970/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fallocators.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fext%2Fallocators.cc?ref=8099b2aee82ea0bf7ef49f38f179fa6e7e27e970", "patch": "@@ -24,17 +24,17 @@\n #include <cstdlib>\n #include <testsuite_hooks.h>\n \n-typedef std::__malloc_alloc_template<3>             weird_alloc;\n-template class std::__malloc_alloc_template<3>;\n+typedef std::__malloc_alloc<3>             weird_alloc;\n+template class std::__malloc_alloc<3>;\n \n typedef std::__debug_alloc<weird_alloc>             debug_weird_alloc;\n template class std::__debug_alloc<weird_alloc>;\n \n-typedef std::__default_alloc_template<true, 3>      unshared_normal_alloc;\n-template class std::__default_alloc_template<true, 3>;\n+typedef std::__pool_alloc<true, 3>      unshared_normal_alloc;\n+template class std::__pool_alloc<true, 3>;\n \n-typedef std::__default_alloc_template<false, 3>     unshared_singlethreaded;\n-template class std::__default_alloc_template<false, 3>;\n+typedef std::__pool_alloc<false, 3>     unshared_singlethreaded;\n+template class std::__pool_alloc<false, 3>;\n \n //std::malloc_alloc test_malloc_alloc;\n "}]}