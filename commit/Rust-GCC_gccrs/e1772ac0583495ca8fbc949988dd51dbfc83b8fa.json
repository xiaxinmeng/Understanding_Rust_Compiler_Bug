{"sha": "e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTE3NzJhYzA1ODM0OTVjYThmYmM5NDk5ODhkZDUxZGJmYzgzYjhmYQ==", "commit": {"author": {"name": "Neil Booth", "email": "neil@daikokuya.demon.co.uk", "date": "2001-07-19T21:17:09Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2001-07-19T21:17:09Z"}, "message": "Makefile.in (emit-rtl.o, c-decl.o): Depend on debug.h.\n\n\t* Makefile.in (emit-rtl.o, c-decl.o): Depend on debug.h.\n\t(final.o): Don't depend on xcoffout.h, dbxout.h or sdbout.h.\n\t(toplev.o): Don't depend on xcoffout.h.\n\t* c-decl.c: Include debug.h\n\t(duplicate_decls): Use debug hook.\n\t* dbxout.c (dbxout_source_file, dbxout_args): Make static.\n\t(dbx_debug_hooks, xcoff_debug_hooks): Update.\n\t(dbxout_types): Remove.\n\t* dbxout.h (dbxout_source_file, dbxout_types, dbxout_args): Remove.\n\t* debug.c (do_nothing_debug_hooks): Update.\n\t(debug_true_tree, debug_nothing_rtx): New.\n\t* debug.h (struct rtx_def): New.\n\t(struct gcc_debug_hooks): New hooks ignore_block,\n\toutlining_inline_function and label.\n\t(debug_true_tree, debug_nothing_rtx, dwarf2out_frame_init,\n\tdwarf2out_frame_finish): New.\n\t* dwarf2out.c (dwarf2out_ignore_block, dwarf2out_abstract_function):\n\tMake static, update prototype.\n\t(dwarf2_debug_hooks): Update.\n\t* dwarf2out.h (dwarf2out_ignore_block, dwarf2out_abstract_function,\n\tdwarf2out_frame_init, dwarf2out_frame_finish): Remove.\n\t* dwarfout.c (dwarf_debug_hooks): Update.\n\t* emit-rtl.c: Include debug.h.\n\t(remove_unnecessary_notes): Use debug hook.\n\t* final.c: Don't include dbxout.h, xcoffout.h or sdbout.h.\n\t(final_scan_insn): Use debug hook.\n\t* integrate.c (output_inline_function): Use debug hook.\n\t* sdbout.c (sdbout_toplevel_data, sdbout_label): Make static.\n\t(sdb_debug_hooks): Update.\n\t* sdbout.h (sdbout_label, sdbout_toplevel_data): Remove.\n\t* toplev.c: Don't include xcoffout.h.\n\t(note_outlining_of_inline_function, debug_ignore_block): Remove.\n\t* toplev.h (note_outlining_of_inline_function, debug_ignore_block):\n\tRemove.\n\t* tree.h (dwarf2out_do_frame): Remove.\n\nFrom-SVN: r44163", "tree": {"sha": "434ba7ff40dd5b0508e6609dc0b744e6680e3656", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/434ba7ff40dd5b0508e6609dc0b744e6680e3656"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/comments", "author": null, "committer": null, "parents": [{"sha": "77f43519e73eaac473819ed22dd95e643f500907", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/77f43519e73eaac473819ed22dd95e643f500907", "html_url": "https://github.com/Rust-GCC/gccrs/commit/77f43519e73eaac473819ed22dd95e643f500907"}], "stats": {"total": 260, "additions": 139, "deletions": 121}, "files": [{"sha": "9d7ab64223b89cb3701e12a605911e51947ed89e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -1,3 +1,41 @@\n+2001-07-19  Neil Booth  <neil@daikokuya.demon.co.uk>\n+\n+\t* Makefile.in (emit-rtl.o, c-decl.o): Depend on debug.h.\n+\t(final.o): Don't depend on xcoffout.h, dbxout.h or sdbout.h.\n+\t(toplev.o): Don't depend on xcoffout.h.\n+\t* c-decl.c: Include debug.h\n+\t(duplicate_decls): Use debug hook.\n+\t* dbxout.c (dbxout_source_file, dbxout_args): Make static.\n+\t(dbx_debug_hooks, xcoff_debug_hooks): Update.\n+\t(dbxout_types): Remove.\n+\t* dbxout.h (dbxout_source_file, dbxout_types, dbxout_args): Remove.\n+\t* debug.c (do_nothing_debug_hooks): Update.\n+\t(debug_true_tree, debug_nothing_rtx): New.\n+\t* debug.h (struct rtx_def): New.\n+\t(struct gcc_debug_hooks): New hooks ignore_block,\n+\toutlining_inline_function and label.\n+\t(debug_true_tree, debug_nothing_rtx, dwarf2out_frame_init,\n+\tdwarf2out_frame_finish): New.\n+\t* dwarf2out.c (dwarf2out_ignore_block, dwarf2out_abstract_function):\n+\tMake static, update prototype.\n+\t(dwarf2_debug_hooks): Update.\n+\t* dwarf2out.h (dwarf2out_ignore_block, dwarf2out_abstract_function,\n+\tdwarf2out_frame_init, dwarf2out_frame_finish): Remove.\n+\t* dwarfout.c (dwarf_debug_hooks): Update.\n+\t* emit-rtl.c: Include debug.h.\n+\t(remove_unnecessary_notes): Use debug hook.\n+\t* final.c: Don't include dbxout.h, xcoffout.h or sdbout.h.\n+\t(final_scan_insn): Use debug hook.\n+\t* integrate.c (output_inline_function): Use debug hook.\n+\t* sdbout.c (sdbout_toplevel_data, sdbout_label): Make static.\n+\t(sdb_debug_hooks): Update.\n+\t* sdbout.h (sdbout_label, sdbout_toplevel_data): Remove.\n+\t* toplev.c: Don't include xcoffout.h.\n+\t(note_outlining_of_inline_function, debug_ignore_block): Remove.\n+\t* toplev.h (note_outlining_of_inline_function, debug_ignore_block):\n+\tRemove.\n+\t* tree.h (dwarf2out_do_frame): Remove.\n+\n 2001-07-19  Catherine Moore  <clm@cygnus.com>\n \n         * config/v850/v850.h (ASM_OUTPUT_LABELREF): Restore. "}, {"sha": "b6bb7c491e92d7e2b7d1b02eddba467ee7a84ee1", "filename": "gcc/Makefile.in", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -1156,7 +1156,7 @@ $(srcdir)/c-parse.y: c-parse.in\n \n c-decl.o : c-decl.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) $(C_TREE_H) \\\n     $(GGC_H) $(TARGET_H) c-lex.h flags.h function.h output.h $(EXPR_H) \\\n-    toplev.h intl.h $(TM_P_H)\n+    debug.h toplev.h intl.h $(TM_P_H)\n c-typeck.o : c-typeck.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n     $(TARGET_H) flags.h intl.h output.h $(EXPR_H) $(RTL_H) toplev.h $(TM_P_H)\n c-lang.o : c-lang.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(C_TREE_H) \\\n@@ -1339,7 +1339,7 @@ diagnostic.o : diagnostic.c diagnostic.h diagnostic.def \\\n    $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) $(TM_P_H) flags.h \\\n    $(GGC_H) input.h $(INSN_ATTR_H) insn-config.h toplev.h intl.h\n toplev.o : toplev.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) function.h \\\n-   flags.h input.h $(INSN_ATTR_H) xcoffout.h output.h diagnostic.h \\\n+   flags.h input.h $(INSN_ATTR_H) output.h diagnostic.h \\\n    debug.h insn-config.h intl.h $(RECOG_H) Makefile toplev.h \\\n    dwarf2out.h sdbout.h dbxout.h $(EXPR_H) hard-reg-set.h $(BASIC_BLOCK_H) \\\n    graph.h $(LOOP_H) except.h $(REGS_H) $(TIMEVAR_H) $(lang_options_files) \\\n@@ -1414,7 +1414,7 @@ xcoffout.o : xcoffout.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) $(RTL_H) xcoffout.h \\\n emit-rtl.o : emit-rtl.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    function.h $(REGS_H) insn-config.h $(RECOG_H) real.h $(GGC_H) \\\n    $(EXPR_H) $(srcdir)/../include/obstack.h hard-reg-set.h bitmap.h toplev.h \\\n-   $(HASHTAB_H) $(TM_P_H)\n+   $(HASHTAB_H) $(TM_P_H) debug.h\n real.o : real.c $(CONFIG_H) $(SYSTEM_H) $(TREE_H) toplev.h $(TM_P_H)\n integrate.o : integrate.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h \\\n    debug.h $(INTEGRATE_H) insn-config.h $(EXPR_H) real.h $(REGS_H) \\\n@@ -1524,8 +1524,7 @@ sched-vis.o : sched-vis.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) sched-int.h \\\n final.o : final.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) $(TREE_H) flags.h intl.h \\\n    $(REGS_H) $(RECOG_H) conditions.h insn-config.h $(INSN_ATTR_H) function.h \\\n    real.h output.h hard-reg-set.h except.h debug.h \\\n-   xcoffout.h toplev.h reload.h dwarf2out.h sdbout.h \\\n-   dbxout.h $(BASIC_BLOCK_H) $(TM_P_H) $(TARGET_H)\n+   toplev.h reload.h dwarf2out.h $(BASIC_BLOCK_H) $(TM_P_H) $(TARGET_H)\n recog.o : recog.c $(CONFIG_H) $(SYSTEM_H) $(RTL_H) function.h $(BASIC_BLOCK_H) \\\n    $(REGS_H) $(RECOG_H) $(EXPR_H) hard-reg-set.h flags.h insn-config.h \\\n    $(INSN_ATTR_H) real.h toplev.h output.h reload.h $(TM_P_H)"}, {"sha": "25149f3e404e3106d153809dd4cc30393d5370cc", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -42,6 +42,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"tm_p.h\"\n #include \"cpplib.h\"\n #include \"target.h\"\n+#include \"debug.h\"\n \n /* In grokdeclarator, distinguish syntactic contexts of declarators.  */\n enum decl_context\n@@ -1960,7 +1961,7 @@ duplicate_decls (newdecl, olddecl, different_binding_level)\n \t been written out yet.  */\n       if (new_is_definition && DECL_INITIAL (olddecl) && TREE_USED (olddecl))\n \t{\n-\t  note_outlining_of_inline_function (olddecl);\n+\t  (*debug_hooks->outlining_inline_function) (olddecl);\n \n \t  /* The new defn must not be inline.  */\n \t  DECL_INLINE (newdecl) = 0;"}, {"sha": "e7c2c546dcd6a9dbf916fab708c93b2db984dbda", "filename": "gcc/dbxout.c", "status": "modified", "additions": 12, "deletions": 22, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -289,6 +289,7 @@ static void dbxout_finish\t\tPARAMS ((const char *));\n static void dbxout_start_source_file\tPARAMS ((unsigned, const char *));\n static void dbxout_end_source_file\tPARAMS ((unsigned));\n static void dbxout_source_line\t\tPARAMS ((unsigned int, const char *));\n+static void dbxout_source_file\t\tPARAMS ((FILE *, const char *));\n #if defined(ASM_OUTPUT_SECTION_NAME)\n static void dbxout_function_end\t\tPARAMS ((void));\n #endif\n@@ -297,6 +298,7 @@ static void dbxout_type_index\t\tPARAMS ((tree));\n #if DBX_CONTIN_LENGTH > 0\n static void dbxout_continue\t\tPARAMS ((void));\n #endif\n+static void dbxout_args\t\t\tPARAMS ((tree));\n static void dbxout_type_fields\t\tPARAMS ((tree));\n static void dbxout_type_method_1\tPARAMS ((tree, const char *));\n static void dbxout_type_methods\t\tPARAMS ((tree));\n@@ -329,6 +331,7 @@ struct gcc_debug_hooks dbx_debug_hooks =\n   dbxout_end_source_file,\n   dbxout_begin_block,\n   dbxout_end_block,\n+  debug_true_tree,\t\t/* ignore_block */\n   dbxout_source_line,\t\t/* source_line */\n   dbxout_source_line,\t\t/* begin_prologue: just output line info */\n   debug_nothing_int,\t\t/* end_prologue */\n@@ -341,7 +344,9 @@ struct gcc_debug_hooks dbx_debug_hooks =\n   debug_nothing_int,\t\t/* end_function */\n   dbxout_function_decl,\n   debug_nothing_tree,\t\t/* global_decl */\n-  debug_nothing_tree\t\t/* deferred_inline_function */\n+  debug_nothing_tree,\t\t/* deferred_inline_function */\n+  debug_nothing_tree,\t\t/* outlining_inline_function */\n+  debug_nothing_rtx\t\t/* label */\n };\n #endif /* DBX_DEBUGGING_INFO  */\n \n@@ -356,6 +361,7 @@ struct gcc_debug_hooks xcoff_debug_hooks =\n   dbxout_end_source_file,\n   xcoffout_begin_block,\n   xcoffout_end_block,\n+  debug_true_tree,\t\t/* ignore_block */\n   xcoffout_source_line,\n   xcoffout_begin_prologue,\t/* begin_prologue */\n   debug_nothing_int,\t\t/* end_prologue */\n@@ -364,7 +370,9 @@ struct gcc_debug_hooks xcoff_debug_hooks =\n   xcoffout_end_function,\n   debug_nothing_tree,\t\t/* function_decl */\n   debug_nothing_tree,\t\t/* global_decl */\n-  debug_nothing_tree\t\t/* deferred_inline_function */\n+  debug_nothing_tree,\t\t/* deferred_inline_function */\n+  debug_nothing_tree,\t\t/* outlining_inline_function */\n+  debug_nothing_rtx\t\t/* label */\n };\n #endif /* XCOFF_DEBUGGING_INFO  */\n \f\n@@ -547,7 +555,7 @@ dbxout_end_source_file (line)\n \n /* Output debugging info to FILE to switch to sourcefile FILENAME.  */\n \n-void\n+static void\n dbxout_source_file (file, filename)\n      FILE *file;\n      const char *filename;\n@@ -2595,7 +2603,7 @@ dbxout_reg_parms (parms)\n /* Given a chain of ..._TYPE nodes (as come in a parameter list),\n    output definitions of those names, in raw form */\n \n-void\n+static void\n dbxout_args (args)\n      tree args;\n {\n@@ -2608,24 +2616,6 @@ dbxout_args (args)\n     }\n }\n \f\n-/* Given a chain of ..._TYPE nodes,\n-   find those which have typedef names and output those names.\n-   This is to ensure those types get output.  */\n-\n-void\n-dbxout_types (types)\n-     register tree types;\n-{\n-  while (types)\n-    {\n-      if (TYPE_NAME (types)\n-\t  && TREE_CODE (TYPE_NAME (types)) == TYPE_DECL\n-\t  && ! TREE_ASM_WRITTEN (TYPE_NAME (types)))\n-\tdbxout_symbol (TYPE_NAME (types), 1);\n-      types = TREE_CHAIN (types);\n-    }\n-}\n-\f\n /* Output everything about a symbol block (a BLOCK node\n    that represents a scope level),\n    including recursive output of contained blocks."}, {"sha": "333687f7e4e5082da82b0d1d0b59d61c679332c8", "filename": "gcc/dbxout.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdbxout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdbxout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.h?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -18,9 +18,6 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void dbxout_source_file\t\tPARAMS ((FILE *, const char *));\n-extern void dbxout_types\t\tPARAMS ((tree));\n-extern void dbxout_args\t\t\tPARAMS ((tree));\n extern int dbxout_symbol\t\tPARAMS ((tree, int));\n extern void dbxout_parms\t\tPARAMS ((tree));\n extern void dbxout_reg_parms\t\tPARAMS ((tree));"}, {"sha": "05811a94ffd18178fcf1d876fa19f598f59d7538", "filename": "gcc/debug.c", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdebug.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdebug.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.c?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -28,8 +28,9 @@ struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_int_charstar,\n   debug_nothing_int_charstar,\n   debug_nothing_int,\n-  debug_nothing_int_int,\n-  debug_nothing_int_int,\n+  debug_nothing_int_int,\t/* begin_block */\n+  debug_nothing_int_int,\t/* end_block */\n+  debug_true_tree,\t\t/* ignore_block */\n   debug_nothing_int_charstar,\t/* source_line */\n   debug_nothing_int_charstar,\t/* begin_prologue */\n   debug_nothing_int,\t\t/* end_prologue */\n@@ -38,7 +39,9 @@ struct gcc_debug_hooks do_nothing_debug_hooks =\n   debug_nothing_int,\t\t/* end_function */\n   debug_nothing_tree,\t\t/* function_decl */\n   debug_nothing_tree,\t\t/* global_decl */\n-  debug_nothing_tree\t\t/* deferred_inline_function */\n+  debug_nothing_tree,\t\t/* deferred_inline_function */\n+  debug_nothing_tree,\t\t/* outlining_inline_function */\n+  debug_nothing_rtx\t\t/* label */\n };\n \n /* This file contains implementations of each debug hook that do\n@@ -55,6 +58,19 @@ debug_nothing_tree (decl)\n {\n }\n \n+bool\n+debug_true_tree (block)\n+     union tree_node *block ATTRIBUTE_UNUSED;\n+{\n+  return true;\n+}\n+\n+void\n+debug_nothing_rtx (insn)\n+     struct rtx_def *insn ATTRIBUTE_UNUSED;\n+{\n+}\n+\n void\n debug_nothing_charstar (main_filename)\n      const char *main_filename ATTRIBUTE_UNUSED;"}, {"sha": "3626ed554e0b82c37fe2d245d21b0cca37f551ad", "filename": "gcc/debug.h", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdebug.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdebug.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdebug.h?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -19,6 +19,7 @@ Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */\n #define GCC_DEBUG_H\n \n union tree_node;\n+struct rtx_def;\n \n /* This structure contains hooks for the debug information output\n    functions, accessed through the global instance debug_hooks set in\n@@ -53,6 +54,13 @@ struct gcc_debug_hooks\n   /* Record the end of a block.  Arguments as for begin_block.  */\n   void (* end_block) PARAMS ((unsigned int line, unsigned int n));\n \n+  /* Returns nonzero if it is appropriate not to emit any debugging\n+     information for BLOCK, because it doesn't contain any\n+     instructions.  This may not be the case for blocks containing\n+     nested functions, since we may actually call such a function even\n+     though the BLOCK information is messed up.  Defaults to true.  */\n+  bool (* ignore_block) PARAMS ((union tree_node *));\n+\n   /* Record a source file location at (FILE, LINE).  */\n   void (* source_line) PARAMS ((unsigned int line, const char *file));\n \n@@ -87,6 +95,15 @@ struct gcc_debug_hooks\n   /* DECL is an inline function, whose body is present, but which is\n      not being output at this point.  */\n   void (* deferred_inline_function) PARAMS ((union tree_node *decl));\n+\n+  /* DECL is an inline function which is about to be emitted out of\n+     line.  The hook is useful to, e.g., emit abstract debug info for\n+     the inline before it gets mangled by optimization.  */\n+  void (* outlining_inline_function) PARAMS ((union tree_node *decl));\n+\n+  /* Called from final_scan_insn for any CODE_LABEL insn whose\n+     LABEL_NAME is non-null.  */\n+  void (* label) PARAMS ((struct rtx_def *insn));\n };\n \n extern struct gcc_debug_hooks *debug_hooks;\n@@ -104,6 +121,10 @@ extern void debug_nothing_int_int\n   PARAMS ((unsigned int, unsigned int));\n extern void debug_nothing_tree\n   PARAMS ((union tree_node *));\n+extern bool debug_true_tree\n+  PARAMS ((union tree_node *));\n+extern void debug_nothing_rtx\n+  PARAMS ((struct rtx_def *));\n \n /* Hooks for various debug formats.  */\n extern struct gcc_debug_hooks do_nothing_debug_hooks;\n@@ -121,5 +142,13 @@ extern void dwarf2out_begin_prologue\n   PARAMS ((unsigned int, const char * file));\n extern void dwarf2out_end_epilogue\n   PARAMS ((void));\n+extern void dwarf2out_frame_init\n+  PARAMS ((void));\n+extern void dwarf2out_frame_finish\n+  PARAMS ((void));\n+/* Decide whether we want to emit frame unwind information for the current\n+   translation unit.  */\n+extern int dwarf2out_do_frame\n+  PARAMS ((void));\n \n #endif /* !GCC_DEBUG_H  */"}, {"sha": "13a7e57c81ee6d02c65693f2c2c571634fa7a95b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -3022,7 +3022,9 @@ static void dwarf2out_start_source_file\tPARAMS ((unsigned, const char *));\n static void dwarf2out_end_source_file\tPARAMS ((unsigned));\n static void dwarf2out_begin_block\tPARAMS ((unsigned, unsigned));\n static void dwarf2out_end_block\t\tPARAMS ((unsigned, unsigned));\n+static bool dwarf2out_ignore_block\tPARAMS ((tree));\n static void dwarf2out_global_decl\tPARAMS ((tree));\n+static void dwarf2out_abstract_function PARAMS ((tree));\n \n /* The debug hooks structure.  */\n \n@@ -3036,6 +3038,7 @@ struct gcc_debug_hooks dwarf2_debug_hooks =\n   dwarf2out_end_source_file,\n   dwarf2out_begin_block,\n   dwarf2out_end_block,\n+  dwarf2out_ignore_block,\n   dwarf2out_source_line,\n   dwarf2out_begin_prologue,\n   debug_nothing_int,\t\t/* end_prologue */\n@@ -3044,7 +3047,12 @@ struct gcc_debug_hooks dwarf2_debug_hooks =\n   debug_nothing_int,\t\t/* end_function */\n   dwarf2out_decl,\t\t/* function_decl */\n   dwarf2out_global_decl,\n-  debug_nothing_tree\t\t/* deferred_inline_function */\n+  debug_nothing_tree,\t\t/* deferred_inline_function */\n+  /* The DWARF 2 backend tries to reduce debugging bloat by not\n+     emitting the abstract description of inline functions until\n+     something tries to reference them.  */\n+  dwarf2out_abstract_function,\t/* outlining_inline_function */\n+  debug_nothing_rtx\t\t/* label */\n };\n \f\n /* NOTE: In the comments in this file, many references are made to\n@@ -9619,7 +9627,7 @@ gen_type_die_for_member (type, member, context_die)\n    of a function which we may later generate inlined and/or\n    out-of-line instances of.  */\n \n-void\n+static void\n dwarf2out_abstract_function (decl)\n      tree decl;\n {\n@@ -11176,7 +11184,7 @@ dwarf2out_end_block (line, blocknum)\n    as we would end up with orphans, and in the presence of scheduling\n    we may end up calling them anyway.  */\n \n-int\n+static bool\n dwarf2out_ignore_block (block)\n      tree block;\n {"}, {"sha": "7c5ca308ccf2e3c9ffa0dbebcdce10625d313097", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -18,17 +18,13 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern int dwarf2out_ignore_block\tPARAMS ((tree));\n extern void dwarf2out_decl\t\tPARAMS ((tree));\t\n-extern void dwarf2out_frame_init\tPARAMS ((void));\n extern void dwarf2out_frame_debug\tPARAMS ((rtx));\n-extern void dwarf2out_frame_finish\tPARAMS ((void));\n \n extern void debug_dwarf\t\t\tPARAMS ((void));\n struct die_struct;\n extern void debug_dwarf_die\t\tPARAMS ((struct die_struct *));\n extern void dwarf2out_set_demangle_name_func PARAMS ((const char *(*) (const char *)));\n-extern void dwarf2out_abstract_function PARAMS ((tree));\n extern void dwarf2out_add_library_unit_info PARAMS ((const char *, const char *));\n \n extern unsigned current_funcdef_number;"}, {"sha": "89e162e7ee05fe2cdcae36e5c33ece92293fd255", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -1387,6 +1387,7 @@ struct gcc_debug_hooks dwarf_debug_hooks =\n   dwarfout_end_source_file_check,\n   dwarfout_begin_block,\n   dwarfout_end_block,\n+  debug_true_tree,\t\t/* ignore_block */\n   dwarfout_source_line,\t\t/* source_line */\n   dwarfout_source_line,\t\t/* begin_prologue */\n   dwarfout_end_prologue,\n@@ -1395,7 +1396,9 @@ struct gcc_debug_hooks dwarf_debug_hooks =\n   dwarfout_end_function,\n   dwarfout_function_decl,\n   dwarfout_global_decl,\n-  dwarfout_deferred_inline_function\n+  dwarfout_deferred_inline_function,\n+  debug_nothing_tree,\t\t/* outlining_inline_function */\n+  debug_nothing_rtx\t\t/* label */\n };\n \f\n /************************ general utility functions **************************/"}, {"sha": "58e264f0ba3aa54f858ce8e30d7278e1f4b05f0c", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -54,6 +54,7 @@ Boston, MA 02111-1307, USA.  */\n #include \"bitmap.h\"\n #include \"basic-block.h\"\n #include \"ggc.h\"\n+#include \"debug.h\"\n \n /* Commonly used modes.  */\n \n@@ -3003,9 +3004,13 @@ remove_unnecessary_notes ()\n \n \t      if (NOTE_LINE_NUMBER (tmp) == NOTE_INSN_BLOCK_BEG)\n \t\t{\n-\t\t  /* We just verified that this BLOCK matches us\n-\t\t     with the block_stack check above.  */\n-\t\t  if (debug_ignore_block (NOTE_BLOCK (insn)))\n+\t\t  /* We just verified that this BLOCK matches us with\n+\t\t     the block_stack check above.  Never delete the\n+\t\t     BLOCK for the outermost scope of the function; we\n+\t\t     can refer to names from that scope even if the\n+\t\t     block notes are messed up.  */\n+\t\t  if (! is_body_block (NOTE_BLOCK (insn))\n+\t\t      && (*debug_hooks->ignore_block) (NOTE_BLOCK (insn)))\n \t\t    {\n \t\t      remove_insn (tmp);\n \t\t      remove_insn (insn);"}, {"sha": "55a7c7dcf221a4efbb44036df304304c79a1a0d7", "filename": "gcc/final.c", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -68,22 +68,10 @@ Boston, MA 02111-1307, USA.  */\n #include \"target.h\"\n #include \"debug.h\"\n \n-#if defined (DBX_DEBUGGING_INFO) || defined (XCOFF_DEBUGGING_INFO)\n-#include \"dbxout.h\"\n-#endif /* DBX_DEBUGGING_INFO || XCOFF_DEBUGGING_INFO */\n-\n-#ifdef XCOFF_DEBUGGING_INFO\n-#include \"xcoffout.h\"\n-#endif\n-\n #if defined (DWARF2_UNWIND_INFO) || defined (DWARF2_DEBUGGING_INFO)\n #include \"dwarf2out.h\"\n #endif\n \n-#ifdef SDB_DEBUGGING_INFO\n-#include \"sdbout.h\"\n-#endif\n-\n /* If we aren't using cc0, CC_STATUS_INIT shouldn't exist.  So define a\n    null default for it to save conditionalization later.  */\n #ifndef CC_STATUS_INIT\n@@ -2218,10 +2206,9 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n       FINAL_PRESCAN_INSN (insn, NULL, 0);\n #endif\n \n-#ifdef SDB_DEBUGGING_INFO\n-      if (write_symbols == SDB_DEBUG && LABEL_NAME (insn))\n-\tsdbout_label (insn);\n-#endif\n+      if (LABEL_NAME (insn))\n+\t(*debug_hooks->label) (insn);\n+\n       if (app_on)\n \t{\n \t  fputs (ASM_APP_OFF, file);"}, {"sha": "cfab58a6f6e40191dcebbfb0e2cbf4d9b03c141a", "filename": "gcc/integrate.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -2889,7 +2889,7 @@ output_inline_function (fndecl)\n \n   /* Do any preparation, such as emitting abstract debug info for the inline\n      before it gets mangled by optimization.  */\n-  note_outlining_of_inline_function (fndecl);\n+  (*debug_hooks->outlining_inline_function) (fndecl);\n \n   /* Compile this function all the way down to assembly code.  */\n   rest_of_compilation (fndecl);"}, {"sha": "accd9edb25976e44d6ee1415198ba10c179981fe", "filename": "gcc/sdbout.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fsdbout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fsdbout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.c?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -106,6 +106,8 @@ static void sdbout_begin_prologue\tPARAMS ((unsigned int, const char *));\n static void sdbout_end_prologue\t\tPARAMS ((unsigned int));\n static void sdbout_begin_function\tPARAMS ((tree));\n static void sdbout_end_function\t\tPARAMS ((unsigned int));\n+static void sdbout_toplevel_data\tPARAMS ((tree));\n+static void sdbout_label\t\tPARAMS ((rtx));\n static char *gen_fake_label\t\tPARAMS ((void));\n static int plain_type\t\t\tPARAMS ((tree));\n static int template_name_p\t\tPARAMS ((tree));\n@@ -304,6 +306,7 @@ struct gcc_debug_hooks sdb_debug_hooks =\n   sdbout_end_source_file,\n   sdbout_begin_block,\n   sdbout_end_block,\n+  debug_true_tree,\t\t/* ignore_block */\n   sdbout_source_line,\n #ifdef MIPS_DEBUGGING_INFO\n   /* Defer on MIPS systems so that parameter descriptions follow\n@@ -319,7 +322,9 @@ struct gcc_debug_hooks sdb_debug_hooks =\n   sdbout_end_function,\n   debug_nothing_tree,\t\t/* function_decl */\n   sdbout_global_decl,\n-  debug_nothing_tree\t\t/* deferred_inline_function */\n+  debug_nothing_tree,\t\t/* deferred_inline_function */\n+  debug_nothing_tree,\t\t/* outlining_inline_function */\n+  sdbout_label\n };\n \f\n #if 0\n@@ -947,7 +952,7 @@ sdbout_symbol (decl, local)\n /* Output SDB information for a top-level initialized variable\n    that has been delayed.  */\n \n-void\n+static void\n sdbout_toplevel_data (decl)\n      tree decl;\n {\n@@ -1657,7 +1662,7 @@ sdbout_end_epilogue ()\n /* Output sdb info for the given label.  Called only if LABEL_NAME (insn)\n    is present.  */\n \n-void\n+static void\n sdbout_label (insn)\n      register rtx insn;\n {"}, {"sha": "28ba6b229bc46402c6ad64b0e0bb0a42715524e2", "filename": "gcc/sdbout.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fsdbout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Fsdbout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsdbout.h?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -18,7 +18,5 @@ along with GNU CC; see the file COPYING.  If not, write to\n the Free Software Foundation, 59 Temple Place - Suite 330,\n Boston, MA 02111-1307, USA.  */\n \n-extern void sdbout_label\t\tPARAMS ((rtx));\n extern void sdbout_symbol\t\tPARAMS ((tree, int));\n-extern void sdbout_toplevel_data\tPARAMS ((tree));\n extern void sdbout_types\t\tPARAMS ((tree));"}, {"sha": "d2adc92f246c2247faa78b18a4fb355f752ba37b", "filename": "gcc/toplev.c", "status": "modified", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -79,10 +79,6 @@ Boston, MA 02111-1307, USA.  */\n #ifdef SDB_DEBUGGING_INFO\n #include \"sdbout.h\"\n #endif\n-\n-#ifdef XCOFF_DEBUGGING_INFO\n-#include \"xcoffout.h\"\n-#endif\n \f\n #ifdef VMS\n /* The extra parameters substantially improve the I/O performance.  */\n@@ -2590,24 +2586,6 @@ rest_of_type_compilation (type, toplev)\n   timevar_pop (TV_SYMOUT);\n }\n \n-/* FNDECL is an inline function which is about to be emitted out of line.\n-   Do any preparation, such as emitting abstract debug info for the inline\n-   before it gets mangled by optimization.  */\n-\n-void\n-note_outlining_of_inline_function (fndecl)\n-     tree fndecl ATTRIBUTE_UNUSED;\n-{\n-#ifdef DWARF2_DEBUGGING_INFO\n-  /* The DWARF 2 backend tries to reduce debugging bloat by not emitting\n-     the abstract description of inline functions until something tries to\n-     reference them.  Force it out now, before optimizations mangle the\n-     block tree.  */\n-  if (write_symbols == DWARF2_DEBUG)\n-    dwarf2out_abstract_function (fndecl);\n-#endif\n-}\n-\n /* This is called from finish_function (within yyparse)\n    after each top-level definition is parsed.\n    It is supposed to compile that function or variable\n@@ -5089,27 +5067,3 @@ print_switch_values (file, pos, max, indent, sep, term)\n \n   fprintf (file, \"%s\", term);\n }\n-\n-/* Returns nonzero if it is appropriate not to emit any debugging\n-   information for BLOCK, because it doesn't contain any instructions.\n-   This may not be the case for blocks containing nested functions, since\n-   we may actually call such a function even though the BLOCK information\n-   is messed up.  */\n-\n-int\n-debug_ignore_block (block)\n-     tree block ATTRIBUTE_UNUSED;\n-{\n-  /* Never delete the BLOCK for the outermost scope\n-     of the function; we can refer to names from\n-     that scope even if the block notes are messed up.  */\n-  if (is_body_block (block))\n-    return 0;\n-\n-#ifdef DWARF2_DEBUGGING_INFO\n-  if (write_symbols == DWARF2_DEBUG)\n-    return dwarf2out_ignore_block (block);\n-#endif\n-\n-  return 1;\n-}"}, {"sha": "2892dc4cab05c246ec865cae5e1116e8c166e516", "filename": "gcc/toplev.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -37,7 +37,6 @@ extern int read_integral_parameter\tPARAMS ((const char *, const char *,\n extern int count_error\t\t\tPARAMS ((int));\n extern void strip_off_ending\t\tPARAMS ((char *, int));\n extern void print_time\t\t\tPARAMS ((const char *, long));\n-extern int debug_ignore_block\t\tPARAMS ((union tree_node *));\n extern const char *trim_filename\tPARAMS ((const char *));\n extern void internal_error\t\tPARAMS ((const char *, ...))\n \t\t\t\t\t       ATTRIBUTE_PRINTF_1\n@@ -123,8 +122,6 @@ extern void fnotice\t\t\tPARAMS ((FILE *, const char *, ...))\n \n extern int wrapup_global_declarations   PARAMS ((union tree_node **, int));\n extern void check_global_declarations   PARAMS ((union tree_node **, int));\n-extern void note_outlining_of_inline_function\n-\t\t\t\t\tPARAMS ((union tree_node *));\n \n extern const char *progname;\n extern const char *dump_base_name;"}, {"sha": "c34b7ea0eddff538b9ebcfd978c5ad85a79827bf", "filename": "gcc/tree.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1772ac0583495ca8fbc949988dd51dbfc83b8fa/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=e1772ac0583495ca8fbc949988dd51dbfc83b8fa", "patch": "@@ -2885,11 +2885,6 @@ extern tree get_file_function_name PARAMS ((int));\n \f\n /* Interface of the DWARF2 unwind info support.  */\n \n-/* Decide whether we want to emit frame unwind information for the current\n-   translation unit.  */\n-\n-extern int dwarf2out_do_frame\t\tPARAMS ((void));\n-\n /* Generate a new label for the CFI info to refer to.  */\n \n extern char *dwarf2out_cfi_label\tPARAMS ((void));"}]}