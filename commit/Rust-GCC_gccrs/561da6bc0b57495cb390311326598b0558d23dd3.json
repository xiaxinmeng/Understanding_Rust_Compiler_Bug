{"sha": "561da6bc0b57495cb390311326598b0558d23dd3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTYxZGE2YmMwYjU3NDk1Y2IzOTAzMTEzMjY1OThiMDU1OGQyM2RkMw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2010-08-20T18:08:10Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2010-08-20T18:08:10Z"}, "message": "simplify-rtx.c (simplify_unary_operation_1): Optimize (sign_extend (zero_extend ()) and ({sign,zero}_extend (lshiftrt...\n\n\t* simplify-rtx.c (simplify_unary_operation_1): Optimize\n\t(sign_extend (zero_extend ()) and\n\t({sign,zero}_extend (lshiftrt (ashift X (const_int I)) (const_int I))).\n\nCo-Authored-By: Paolo Bonzini <bonzini@gnu.org>\n\nFrom-SVN: r163413", "tree": {"sha": "7c21d0a4de53397e0e7f2b92be4db9f274312b3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7c21d0a4de53397e0e7f2b92be4db9f274312b3f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/561da6bc0b57495cb390311326598b0558d23dd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561da6bc0b57495cb390311326598b0558d23dd3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/561da6bc0b57495cb390311326598b0558d23dd3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/561da6bc0b57495cb390311326598b0558d23dd3/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "89ad0f25dc8910505a30611497f57457c113a6da", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89ad0f25dc8910505a30611497f57457c113a6da", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89ad0f25dc8910505a30611497f57457c113a6da"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "fc3654583d12cfe182a4972c3c8342320ac0d01d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561da6bc0b57495cb390311326598b0558d23dd3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561da6bc0b57495cb390311326598b0558d23dd3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=561da6bc0b57495cb390311326598b0558d23dd3", "patch": "@@ -1,3 +1,10 @@\n+2010-08-20  Jakub Jelinek  <jakub@redhat.com>\n+\t    Paolo Bonzini  <bonzini@gnu.org>\n+\n+\t* simplify-rtx.c (simplify_unary_operation_1): Optimize\n+\t(sign_extend (zero_extend ()) and\n+\t({sign,zero}_extend (lshiftrt (ashift X (const_int I)) (const_int I))).\n+\n 2010-08-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/45353"}, {"sha": "fb8ba396d4f6f481230e0ae9a534b9b38636086a", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/561da6bc0b57495cb390311326598b0558d23dd3/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/561da6bc0b57495cb390311326598b0558d23dd3/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=561da6bc0b57495cb390311326598b0558d23dd3", "patch": "@@ -1010,15 +1010,22 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \t  && GET_MODE_SIZE (mode) <= GET_MODE_SIZE (GET_MODE (XEXP (op, 0))))\n \treturn rtl_hooks.gen_lowpart_no_emit (mode, op);\n \n-      /* (sign_extend:M (sign_extend:N <X>)) is (sign_extend:M <X>).  */\n-      if (GET_CODE (op) == SIGN_EXTEND)\n-\treturn simplify_gen_unary (SIGN_EXTEND, mode, XEXP (op, 0),\n-\t\t\t\t   GET_MODE (XEXP (op, 0)));\n+      /* (sign_extend:M (sign_extend:N <X>)) is (sign_extend:M <X>).\n+\t (sign_extend:M (zero_extend:N <X>)) is (zero_extend:M <X>).  */\n+      if (GET_CODE (op) == SIGN_EXTEND || GET_CODE (op) == ZERO_EXTEND)\n+\t{\n+\t  gcc_assert (GET_MODE_BITSIZE (mode)\n+\t\t      > GET_MODE_BITSIZE (GET_MODE (op)));\n+\t  return simplify_gen_unary (GET_CODE (op), mode, XEXP (op, 0),\n+\t\t\t\t     GET_MODE (XEXP (op, 0)));\n+\t}\n \n       /* (sign_extend:M (ashiftrt:N (ashift <X> (const_int I)) (const_int I)))\n \t is (sign_extend:M (subreg:O <X>)) if there is mode with\n-\t GET_MODE_BITSIZE (N) - I bits.  */\n-      if (GET_CODE (op) == ASHIFTRT\n+\t GET_MODE_BITSIZE (N) - I bits.\n+\t (sign_extend:M (lshiftrt:N (ashift <X> (const_int I)) (const_int I)))\n+\t is similarly (zero_extend:M (subreg:O <X>)).  */\n+      if ((GET_CODE (op) == ASHIFTRT || GET_CODE (op) == LSHIFTRT)\n \t  && GET_CODE (XEXP (op, 0)) == ASHIFT\n \t  && CONST_INT_P (XEXP (op, 1))\n \t  && XEXP (XEXP (op, 0), 1) == XEXP (op, 1)\n@@ -1027,11 +1034,15 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \t  enum machine_mode tmode\n \t    = mode_for_size (GET_MODE_BITSIZE (GET_MODE (op))\n \t\t\t     - INTVAL (XEXP (op, 1)), MODE_INT, 1);\n+\t  gcc_assert (GET_MODE_BITSIZE (mode)\n+\t\t      > GET_MODE_BITSIZE (GET_MODE (op)));\n \t  if (tmode != BLKmode)\n \t    {\n \t      rtx inner =\n \t\trtl_hooks.gen_lowpart_no_emit (tmode, XEXP (XEXP (op, 0), 0));\n-\t      return simplify_gen_unary (SIGN_EXTEND, mode, inner, tmode);\n+\t      return simplify_gen_unary (GET_CODE (op) == ASHIFTRT\n+\t\t\t\t\t ? SIGN_EXTEND : ZERO_EXTEND,\n+\t\t\t\t\t mode, inner, tmode);\n \t    }\n \t}\n \n@@ -1066,6 +1077,26 @@ simplify_unary_operation_1 (enum rtx_code code, enum machine_mode mode, rtx op)\n \treturn simplify_gen_unary (ZERO_EXTEND, mode, XEXP (op, 0),\n \t\t\t\t   GET_MODE (XEXP (op, 0)));\n \n+      /* (zero_extend:M (lshiftrt:N (ashift <X> (const_int I)) (const_int I)))\n+\t is (zero_extend:M (subreg:O <X>)) if there is mode with\n+\t GET_MODE_BITSIZE (N) - I bits.  */\n+      if (GET_CODE (op) == LSHIFTRT\n+\t  && GET_CODE (XEXP (op, 0)) == ASHIFT\n+\t  && CONST_INT_P (XEXP (op, 1))\n+\t  && XEXP (XEXP (op, 0), 1) == XEXP (op, 1)\n+\t  && GET_MODE_BITSIZE (GET_MODE (op)) > INTVAL (XEXP (op, 1)))\n+\t{\n+\t  enum machine_mode tmode\n+\t    = mode_for_size (GET_MODE_BITSIZE (GET_MODE (op))\n+\t\t\t     - INTVAL (XEXP (op, 1)), MODE_INT, 1);\n+\t  if (tmode != BLKmode)\n+\t    {\n+\t      rtx inner =\n+\t\trtl_hooks.gen_lowpart_no_emit (tmode, XEXP (XEXP (op, 0), 0));\n+\t      return simplify_gen_unary (ZERO_EXTEND, mode, inner, tmode);\n+\t    }\n+\t}\n+\n #if defined(POINTERS_EXTEND_UNSIGNED) && !defined(HAVE_ptr_extend)\n       /* As we do not know which address space the pointer is refering to,\n \t we can do this only if the target does not support different pointer"}]}