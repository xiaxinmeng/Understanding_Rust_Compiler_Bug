{"sha": "03f24169cd08ba3dca65248ff7cc4d7a18d35a48", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDNmMjQxNjljZDA4YmEzZGNhNjUyNDhmZjdjYzRkN2ExOGQzNWE0OA==", "commit": {"author": {"name": "Joseph Myers", "email": "joseph@codesourcery.com", "date": "2016-11-23T23:32:54Z"}, "committer": {"name": "Joseph Myers", "email": "jsm28@gcc.gnu.org", "date": "2016-11-23T23:32:54Z"}, "message": "Add another e500 subreg pattern.\n\nBuilding glibc for powerpc-linux-gnuspe --enable-e500-double, given\nthe patch <https://gcc.gnu.org/ml/gcc-patches/2016-11/msg02404.html>\napplied, fails with errors such as:\n\n../sysdeps/ieee754/ldbl-128ibm/s_modfl.c: In function '__modfl':\n../sysdeps/ieee754/ldbl-128ibm/s_modfl.c:91:1: error: unrecognizable insn:\n }\n ^\n(insn 31 30 32 2 (set (reg:DF 203)\n        (subreg:DF (reg:TI 202) 8)) \"../sysdeps/ieee754/ldbl-128ibm/s_modfl.c\":44 -1\n     (nil))\n../sysdeps/ieee754/ldbl-128ibm/s_modfl.c:91:1: internal compiler error: in extract_insn, at recog.c:2311\n\nThis patch adds an insn pattern similar to various patterns already\npresent to handle extracting such a subreg.  This allows the glibc\nbuild to get further, until it runs into an assembler error for which\nI have another patch.\n\ngcc:\n\t* config/rs6000/spe.md (*frob_<SPE64:mode>_ti_8): New insn\n\tpattern.\n\ngcc/testsuite:\n\t* gcc.c-torture/compile/20161123-1.c: New test.\n\nFrom-SVN: r242813", "tree": {"sha": "4e33e2bd653cb98b8c630bb7f24924b2057de920", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4e33e2bd653cb98b8c630bb7f24924b2057de920"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/03f24169cd08ba3dca65248ff7cc4d7a18d35a48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f24169cd08ba3dca65248ff7cc4d7a18d35a48", "html_url": "https://github.com/Rust-GCC/gccrs/commit/03f24169cd08ba3dca65248ff7cc4d7a18d35a48", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/03f24169cd08ba3dca65248ff7cc4d7a18d35a48/comments", "author": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jsm28", "id": 10537793, "node_id": "MDQ6VXNlcjEwNTM3Nzkz", "avatar_url": "https://avatars.githubusercontent.com/u/10537793?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jsm28", "html_url": "https://github.com/jsm28", "followers_url": "https://api.github.com/users/jsm28/followers", "following_url": "https://api.github.com/users/jsm28/following{/other_user}", "gists_url": "https://api.github.com/users/jsm28/gists{/gist_id}", "starred_url": "https://api.github.com/users/jsm28/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jsm28/subscriptions", "organizations_url": "https://api.github.com/users/jsm28/orgs", "repos_url": "https://api.github.com/users/jsm28/repos", "events_url": "https://api.github.com/users/jsm28/events{/privacy}", "received_events_url": "https://api.github.com/users/jsm28/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "469585df2d22f325c50e1614d397a0a38b29df6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/469585df2d22f325c50e1614d397a0a38b29df6f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/469585df2d22f325c50e1614d397a0a38b29df6f"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "27e032df6d9efddf207532c0bea969979937d5ac", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f24169cd08ba3dca65248ff7cc4d7a18d35a48/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f24169cd08ba3dca65248ff7cc4d7a18d35a48/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=03f24169cd08ba3dca65248ff7cc4d7a18d35a48", "patch": "@@ -1,3 +1,8 @@\n+2016-11-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* config/rs6000/spe.md (*frob_<SPE64:mode>_ti_8): New insn\n+\tpattern.\n+\n 2016-11-23  Segher Boessenkool  <segher@kernel.crashing.org>\n \n \t* combine.c (change_zero_ext): Only change the mode of a hard register"}, {"sha": "4d33210becde32d3ce2b00eca98de9c1174f39d2", "filename": "gcc/config/rs6000/spe.md", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f24169cd08ba3dca65248ff7cc4d7a18d35a48/gcc%2Fconfig%2Frs6000%2Fspe.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f24169cd08ba3dca65248ff7cc4d7a18d35a48/gcc%2Fconfig%2Frs6000%2Fspe.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fspe.md?ref=03f24169cd08ba3dca65248ff7cc4d7a18d35a48", "patch": "@@ -2314,6 +2314,18 @@\n     }\n })\n \n+(define_insn \"*frob_<SPE64:mode>_ti_8\"\n+  [(set (match_operand:SPE64 0 \"nonimmediate_operand\" \"=r\")\n+        (subreg:SPE64 (match_operand:TI 1 \"input_operand\" \"r\") 8))]\n+  \"(TARGET_E500_DOUBLE && <SPE64:MODE>mode == DFmode)\n+   || (TARGET_SPE && <SPE64:MODE>mode != DFmode)\"\n+{\n+  if (WORDS_BIG_ENDIAN)\n+    return \"evmergelo %0,%Y1,%Z1\";\n+  else\n+    return \"evmergelo %0,%Z1,%Y1\";\n+})\n+\n (define_insn \"*frob_tf_ti\"\n   [(set (match_operand:TF 0 \"gpc_reg_operand\" \"=r\")\n         (subreg:TF (match_operand:TI 1 \"gpc_reg_operand\" \"r\") 0))]"}, {"sha": "0af543cc9e0c1bdd7e6e58f8649069e990e67be6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f24169cd08ba3dca65248ff7cc4d7a18d35a48/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f24169cd08ba3dca65248ff7cc4d7a18d35a48/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=03f24169cd08ba3dca65248ff7cc4d7a18d35a48", "patch": "@@ -1,3 +1,7 @@\n+2016-11-23  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.c-torture/compile/20161123-1.c: New test.\n+\n 2016-11-23  Steven G. Kargl  <kargl@gcc.gnu.org>\n \n \tPR fortran/78297"}, {"sha": "b8b2f1b7cc3644b1722c88ad3c20271ebadb76a7", "filename": "gcc/testsuite/gcc.c-torture/compile/20161123-1.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/03f24169cd08ba3dca65248ff7cc4d7a18d35a48/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20161123-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/03f24169cd08ba3dca65248ff7cc4d7a18d35a48/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20161123-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fcompile%2F20161123-1.c?ref=03f24169cd08ba3dca65248ff7cc4d7a18d35a48", "patch": "@@ -0,0 +1,7 @@\n+double\n+f (long double x)\n+{\n+  union { long double ld; double d[2]; } u;\n+  u.ld = x;\n+  return u.d[1];\n+}"}]}