{"sha": "1a265e7824356359788dddf51b04d85ae4f7ff04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWEyNjVlNzgyNDM1NjM1OTc4OGRkZGY1MWIwNGQ4NWFlNGY3ZmYwNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T09:04:40Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-01T09:04:40Z"}, "message": "[multiple changes]\n\n2011-08-01  Ed Schonberg  <schonberg@adacore.com>\n\n\t* sem_attr.adb (Analyze_Attribute, case 'Access): handle properly named\n\taccess to protected subprograms in generic bodies.\n\t* sem_ch6.adb (Analyze_Subprogram_Declaration): If the context is a\n\tprotected type, indicate that the convention of the subprogram is\n\tConvention_Protected, because it may be used in subsequent declarations\n\twithin the protected declaration.\n\n2011-08-01  Vincent Celier  <celier@adacore.com>\n\n\t* mlib-prj.adb (Build_Library): Use \"ada_\" as the prefix for the \"init\"\n\tand \"final\" procedures when the name of the library is \"ada\", to avoid\n\tduplicate symbols \"adainit\" and \"adafinal\" in executables.\n\nFrom-SVN: r177002", "tree": {"sha": "91ba915ac405b8e5b1f9aeb7989d7fd0795e94bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/91ba915ac405b8e5b1f9aeb7989d7fd0795e94bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1a265e7824356359788dddf51b04d85ae4f7ff04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a265e7824356359788dddf51b04d85ae4f7ff04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1a265e7824356359788dddf51b04d85ae4f7ff04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1a265e7824356359788dddf51b04d85ae4f7ff04/comments", "author": null, "committer": null, "parents": [{"sha": "67e28ef818ad694185e3738dad037864d2c51240", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/67e28ef818ad694185e3738dad037864d2c51240", "html_url": "https://github.com/Rust-GCC/gccrs/commit/67e28ef818ad694185e3738dad037864d2c51240"}], "stats": {"total": 58, "additions": 46, "deletions": 12}, "files": [{"sha": "101b285d6b7d2319b0dd456f3c4d731188ee55b4", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a265e7824356359788dddf51b04d85ae4f7ff04/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a265e7824356359788dddf51b04d85ae4f7ff04/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1a265e7824356359788dddf51b04d85ae4f7ff04", "patch": "@@ -1,3 +1,18 @@\n+2011-08-01  Ed Schonberg  <schonberg@adacore.com>\n+\n+\t* sem_attr.adb (Analyze_Attribute, case 'Access): Handle properly named\n+\taccess to protected subprograms in generic bodies.\n+\t* sem_ch6.adb (Analyze_Subprogram_Declaration): If the context is a\n+\tprotected type, indicate that the convention of the subprogram is\n+\tConvention_Protected, because it may be used in subsequent declarations\n+\twithin the protected declaration.\n+\n+2011-08-01  Vincent Celier  <celier@adacore.com>\n+\n+\t* mlib-prj.adb (Build_Library): Use \"ada_\" as the prefix for the \"init\"\n+\tand \"final\" procedures when the name of the library is \"ada\", to avoid\n+\tduplicate symbols \"adainit\" and \"adafinal\" in executables.\n+\n 2011-08-01  Ed Schonberg  <schonberg@adacore.com>\n \n \t* sem_attr.adb (Analyze_Attribute, case 'Result): Handle properly a"}, {"sha": "8feffc019c6354c2cb477e786e00c74d0e01604a", "filename": "gcc/ada/mlib-prj.adb", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a265e7824356359788dddf51b04d85ae4f7ff04/gcc%2Fada%2Fmlib-prj.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a265e7824356359788dddf51b04d85ae4f7ff04/gcc%2Fada%2Fmlib-prj.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fmlib-prj.adb?ref=1a265e7824356359788dddf51b04d85ae4f7ff04", "patch": "@@ -862,7 +862,7 @@ package body MLib.Prj is\n                Arguments := new String_List (1 .. Initial_Argument_Max);\n             end if;\n \n-            --  Add \"-n -o b~<lib>.adb (b__<lib>.adb on VMS) -L<lib>\"\n+            --  Add \"-n -o b~<lib>.adb (b__<lib>.adb on VMS) -L<lib>_\"\n \n             Argument_Number := 2;\n             Arguments (1) := No_Main;\n@@ -875,7 +875,17 @@ package body MLib.Prj is\n             Add_Argument\n               (B_Start.all\n                & Get_Name_String (For_Project.Library_Name) & \".adb\");\n-            Add_Argument (\"-L\" & Get_Name_String (For_Project.Library_Name));\n+\n+            --  Make sure that the init procedure is never \"adainit\"\n+\n+            Get_Name_String (For_Project.Library_Name);\n+\n+            if Name_Buffer (1 .. Name_Len) = \"ada\" then\n+               Add_Argument (\"-Lada_\");\n+            else\n+               Add_Argument\n+                 (\"-L\" & Get_Name_String (For_Project.Library_Name));\n+            end if;\n \n             if For_Project.Lib_Auto_Init and then SALs_Use_Constructors then\n                Add_Argument (Auto_Initialize);\n@@ -950,16 +960,15 @@ package body MLib.Prj is\n                then\n                   if Check_Project (Unit.File_Names (Impl).Project) then\n                      if Unit.File_Names (Spec) = null then\n-                        declare\n-                           Src_Ind : Source_File_Index;\n-\n-                        begin\n-                           Src_Ind := Sinput.P.Load_Project_File\n-                                        (Get_Name_String\n-                                          (Unit.File_Names (Impl).Path.Name));\n \n-                           --  Add the ALI file only if it is not a subunit\n+                        --  Add the ALI file only if it is not a subunit\n \n+                        declare\n+                           Src_Ind : constant Source_File_Index :=\n+                                       Sinput.P.Load_Project_File\n+                                         (Get_Name_String\n+                                           (Unit.File_Names (Impl).Path.Name));\n+                        begin\n                            if not\n                              Sinput.P.Source_File_Is_Subunit (Src_Ind)\n                            then"}, {"sha": "ea00352ec6fcf3d7f08937fa36e4c42c670e27df", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a265e7824356359788dddf51b04d85ae4f7ff04/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a265e7824356359788dddf51b04d85ae4f7ff04/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=1a265e7824356359788dddf51b04d85ae4f7ff04", "patch": "@@ -7837,14 +7837,16 @@ package body Sem_Attr is\n \n                if Ekind_In (Btyp, E_Access_Subprogram_Type,\n                                   E_Anonymous_Access_Subprogram_Type,\n+                                  E_Access_Protected_Subprogram_Type,\n                                   E_Anonymous_Access_Protected_Subprogram_Type)\n                then\n                   --  Deal with convention mismatch\n \n-                  if Convention (Btyp) /= Convention (Entity (P)) then\n+                  if Convention (Designated_Type (Btyp)) /=\n+                     Convention (Entity (P))\n+                  then\n                      Error_Msg_FE\n                        (\"subprogram & has wrong convention\", P, Entity (P));\n-\n                      Error_Msg_FE\n                        (\"\\does not match convention of access type &\",\n                         P, Btyp);"}, {"sha": "625fc4e43d032cd84ea18898db1d9e63ae5f9f48", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1a265e7824356359788dddf51b04d85ae4f7ff04/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1a265e7824356359788dddf51b04d85ae4f7ff04/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=1a265e7824356359788dddf51b04d85ae4f7ff04", "patch": "@@ -2929,6 +2929,14 @@ package body Sem_Ch6 is\n          Write_Eol;\n       end if;\n \n+      if Is_Protected_Type (Current_Scope) then\n+\n+         --  Indicate that this is a protected operation, because it may be\n+         --  used in subsequent declarations within the protected type.\n+\n+         Set_Convention (Designator, Convention_Protected);\n+      end if;\n+\n       List_Inherited_Pre_Post_Aspects (Designator);\n       Analyze_Aspect_Specifications (N, Designator, Aspect_Specifications (N));\n    end Analyze_Subprogram_Declaration;"}]}