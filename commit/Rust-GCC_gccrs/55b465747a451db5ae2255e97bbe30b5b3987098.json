{"sha": "55b465747a451db5ae2255e97bbe30b5b3987098", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTViNDY1NzQ3YTQ1MWRiNWFlMjI1NWU5N2JiZTMwYjViMzk4NzA5OA==", "commit": {"author": {"name": "Rainer Orth", "email": "ro@CeBiTec.Uni-Bielefeld.DE", "date": "2011-03-16T09:41:16Z"}, "committer": {"name": "Rainer Orth", "email": "ro@gcc.gnu.org", "date": "2011-03-16T09:41:16Z"}, "message": "re PR driver/46944 (gcc should accept -fuse-linker-plugin only if linker handles -plugin)\n\n\tPR lto/46944\n\t* configure.ac (gcc_cv_gld_major_version, gcc_cv_gld_minor):\n\tHandle in-tree gold.\n\t(ld_vers): Extract binutils version for gold.\n\t(gcc_cv_ld_hidden): Handle gold here.\n\t(gcc_cv_lto_plugin): Determine level of linker plugin support.\n\t* configure: Regenerate.\n\t* config.in: Regenerate.\n\t* gcc.c: Only use LTO plugin if HAVE_LTO_PLUGIN > 0, reject\n\t-fuse-linker-plugin otherwise.\n\t(LINK_PLUGIN_SPEC): Define.  Extract from LINK_COMMAND_SPEC.\n\t(LINK_COMMAND_SPEC): Use it.\n\t(main): Only look for LTOPLUGINSONAME if HAVE_LTO_PLUGIN > 0.\n\nFrom-SVN: r171039", "tree": {"sha": "4b6f1a55c5f340871037eaece338e7df6f200979", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4b6f1a55c5f340871037eaece338e7df6f200979"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/55b465747a451db5ae2255e97bbe30b5b3987098", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b465747a451db5ae2255e97bbe30b5b3987098", "html_url": "https://github.com/Rust-GCC/gccrs/commit/55b465747a451db5ae2255e97bbe30b5b3987098", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/55b465747a451db5ae2255e97bbe30b5b3987098/comments", "author": {"login": "rorth", "id": 3930951, "node_id": "MDQ6VXNlcjM5MzA5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/3930951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rorth", "html_url": "https://github.com/rorth", "followers_url": "https://api.github.com/users/rorth/followers", "following_url": "https://api.github.com/users/rorth/following{/other_user}", "gists_url": "https://api.github.com/users/rorth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rorth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rorth/subscriptions", "organizations_url": "https://api.github.com/users/rorth/orgs", "repos_url": "https://api.github.com/users/rorth/repos", "events_url": "https://api.github.com/users/rorth/events{/privacy}", "received_events_url": "https://api.github.com/users/rorth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2969d8ee4dd8fc1242cd98a27299eb6fe9e17ae"}], "stats": {"total": 179, "additions": 128, "deletions": 51}, "files": [{"sha": "351c745608f932bf5b7f7a3e3a73ed9503477280", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b465747a451db5ae2255e97bbe30b5b3987098/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b465747a451db5ae2255e97bbe30b5b3987098/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=55b465747a451db5ae2255e97bbe30b5b3987098", "patch": "@@ -1,3 +1,19 @@\n+2011-03-16  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>\n+\n+\tPR lto/46944\n+\t* configure.ac (gcc_cv_gld_major_version, gcc_cv_gld_minor):\n+\tHandle in-tree gold.\n+\t(ld_vers): Extract binutils version for gold.\n+\t(gcc_cv_ld_hidden): Handle gold here.\n+\t(gcc_cv_lto_plugin): Determine level of linker plugin support.\n+\t* configure: Regenerate.\n+\t* config.in: Regenerate.\n+\t* gcc.c: Only use LTO plugin if HAVE_LTO_PLUGIN > 0, reject\n+\t-fuse-linker-plugin otherwise.\n+\t(LINK_PLUGIN_SPEC): Define.  Extract from LINK_COMMAND_SPEC.\n+\t(LINK_COMMAND_SPEC): Use it.\n+\t(main): Only look for LTOPLUGINSONAME if HAVE_LTO_PLUGIN > 0.\n+\n 2011-03-16  Jakub Jelinek  <jakub@redhat.com>\n \n \t* emit-rtl.c (try_split): Don't call copy_call_info debug hook."}, {"sha": "f4885ca8374b5eada08caa418a96d9d8af8844e8", "filename": "gcc/config.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b465747a451db5ae2255e97bbe30b5b3987098/gcc%2Fconfig.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b465747a451db5ae2255e97bbe30b5b3987098/gcc%2Fconfig.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.in?ref=55b465747a451db5ae2255e97bbe30b5b3987098", "patch": "@@ -1252,7 +1252,7 @@\n #endif\n \n \n-/* Define if your linker supports plugin. */\n+/* Define to the level of your linker's plugin support. */\n #ifndef USED_FOR_TARGET\n #undef HAVE_LTO_PLUGIN\n #endif"}, {"sha": "a2f78c394164c77af49b29f1834ad0d92feec0f2", "filename": "gcc/configure", "status": "modified", "additions": 41, "deletions": 18, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b465747a451db5ae2255e97bbe30b5b3987098/gcc%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b465747a451db5ae2255e97bbe30b5b3987098/gcc%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure?ref=55b465747a451db5ae2255e97bbe30b5b3987098", "patch": "@@ -21096,7 +21096,8 @@ esac\n \n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking what linker to use\" >&5\n $as_echo_n \"checking what linker to use... \" >&6; }\n-if test \"$gcc_cv_ld\" = ../ld/ld-new$build_exeext; then\n+if test \"$gcc_cv_ld\" = ../ld/ld-new$build_exeext \\\n+   || test \"$gcc_cv_ld\" = ../gold/ld-new$build_exeext; then\n \t# Single tree build which includes ld.  We want to prefer it\n \t# over whatever linker top-level may have detected, since\n \t# we'll use what we're building after installation anyway.\n@@ -21108,6 +21109,8 @@ $as_echo \"newly built ld\" >&6; }\n \t    || grep 'EMUL = .*linux' ../ld/Makefile \\\n \t    || grep 'EMUL = .*lynx' ../ld/Makefile) > /dev/null; then\n \t  in_tree_ld_is_elf=yes\n+\telif test \"$ld_is_gold\" = yes; then\n+\t  in_tree_ld_is_elf=yes\n \tfi\n \tfor f in $gcc_cv_ld_bfd_srcdir/configure $gcc_cv_ld_gld_srcdir/configure $gcc_cv_ld_gld_srcdir/configure.in $gcc_cv_ld_gld_srcdir/Makefile.in\n \tdo\n@@ -21716,11 +21719,23 @@ fi\n \n if test $in_tree_ld != yes ; then\n   ld_ver=`$gcc_cv_ld --version 2>/dev/null | sed 1q`\n-  if test x\"$ld_is_gold\" = xyes; then\n-    gcc_cv_ld_hidden=yes\n-  elif echo \"$ld_ver\" | grep GNU > /dev/null; then\n-    ld_vers=`echo $ld_ver | sed -n \\\n-\t-e 's,^.*[\t ]\\([0-9][0-9]*\\.[0-9][0-9]*.*\\)$,\\1,p'`\n+  if echo \"$ld_ver\" | grep GNU > /dev/null; then\n+    if test x\"$ld_is_gold\" = xyes; then\n+      # GNU gold --version looks like this:\n+      #\n+      # GNU gold (GNU Binutils 2.21.51.20110225) 1.11\n+      #\n+      # We extract the binutils version which is more familiar and specific\n+      # than the gold version.\n+      ld_vers=`echo $ld_ver | sed -n \\\n+\t  -e 's,^[^)]*[\t ]\\([0-9][0-9]*\\.[0-9][0-9]*[^)]*\\)) .*$,\\1,p'`\n+    else\n+      # GNU ld --version looks like this:\n+      #\n+      # GNU ld (GNU Binutils) 2.21.51.20110225\n+      ld_vers=`echo $ld_ver | sed -n \\\n+\t  -e 's,^.*[\t ]\\([0-9][0-9]*\\.[0-9][0-9]*.*\\)$,\\1,p'`\n+    fi\n     ld_date=`echo $ld_ver | sed -n 's,^.*\\([2-9][0-9][0-9][0-9]\\)[-]*\\([01][0-9]\\)[-]*\\([0-3][0-9]\\).*$,\\1\\2\\3,p'`\n     ld_vers_major=`expr \"$ld_vers\" : '\\([0-9]*\\)'`\n     ld_vers_minor=`expr \"$ld_vers\" : '[0-9]*\\.\\([0-9]*\\)'`\n@@ -21762,7 +21777,9 @@ else\n   fi\n else\n   gcc_cv_ld_hidden=yes\n-  if echo \"$ld_ver\" | grep GNU > /dev/null; then\n+  if test x\"$ld_is_gold\" = xyes; then\n+    :\n+  elif echo \"$ld_ver\" | grep GNU > /dev/null; then\n     if test 0\"$ld_date\" -lt 20020404; then\n       if test -n \"$ld_date\"; then\n \t# If there was date string, but was earlier than 2002-04-04, fail\n@@ -23115,24 +23132,30 @@ fi\n \n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking linker plugin support\" >&5\n $as_echo_n \"checking linker plugin support... \" >&6; }\n-gcc_cv_lto_plugin=no\n+gcc_cv_lto_plugin=0\n if test -f liblto_plugin.la; then\n   if test $in_tree_ld = yes -a x\"$ORIGINAL_PLUGIN_LD_FOR_TARGET=\" = x\"$gcc_cv_ld\"; then\n-    if test x\"$ld_is_gold\" = xyes; then\n-      gcc_cv_lto_plugin=yes\n-    elif test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 21 -o \"$gcc_cv_gld_major_version\" -gt 2; then \\\n-      gcc_cv_lto_plugin=yes\n+    if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 21 -o \"$gcc_cv_gld_major_version\" -gt 2; then\n+      gcc_cv_lto_plugin=2\n+    elif test \"$ld_is_gold\" = yes -a \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -eq 20; then\n+      gcc_cv_lto_plugin=1\n+\n+    fi\n+  elif echo \"$ld_ver\" | grep GNU > /dev/null; then\n+    # Require GNU ld or gold 2.21+ for plugin support by default.\n+    if test \"$ld_vers_major\" -eq 2 -a \"$ld_vers_minor\" -ge 21; then\n+      gcc_cv_lto_plugin=2\n+    # Allow -fuse-linker-plugin to enable plugin support in GNU gold 2.20.\n+    elif test \"$ld_is_gold\" = yes -a \"$ld_vers_major\" -eq 2 -a \"$ld_vers_minor\" -eq 20; then\n+      gcc_cv_lto_plugin=1\n     fi\n-  # Check if the linker supports --plugin-opt option\n-  elif $ORIGINAL_PLUGIN_LD_FOR_TARGET --help 2>/dev/null | grep plugin-opt > /dev/null; then\n-    gcc_cv_lto_plugin=yes\n   fi\n fi\n-if test x\"$gcc_cv_lto_plugin\" = xyes; then\n \n-$as_echo \"#define HAVE_LTO_PLUGIN 1\" >>confdefs.h\n+cat >>confdefs.h <<_ACEOF\n+#define HAVE_LTO_PLUGIN $gcc_cv_lto_plugin\n+_ACEOF\n \n-fi\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $gcc_cv_lto_plugin\" >&5\n $as_echo \"$gcc_cv_lto_plugin\" >&6; }\n "}, {"sha": "2e83b2d46daa404a70d769492617862bb01d7a24", "filename": "gcc/configure.ac", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b465747a451db5ae2255e97bbe30b5b3987098/gcc%2Fconfigure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b465747a451db5ae2255e97bbe30b5b3987098/gcc%2Fconfigure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfigure.ac?ref=55b465747a451db5ae2255e97bbe30b5b3987098", "patch": "@@ -1967,7 +1967,8 @@ case \"$ORIGINAL_LD_FOR_TARGET\" in\n esac \n \n AC_MSG_CHECKING(what linker to use)\n-if test \"$gcc_cv_ld\" = ../ld/ld-new$build_exeext; then\n+if test \"$gcc_cv_ld\" = ../ld/ld-new$build_exeext \\\n+   || test \"$gcc_cv_ld\" = ../gold/ld-new$build_exeext; then\n \t# Single tree build which includes ld.  We want to prefer it\n \t# over whatever linker top-level may have detected, since\n \t# we'll use what we're building after installation anyway.\n@@ -1978,6 +1979,8 @@ if test \"$gcc_cv_ld\" = ../ld/ld-new$build_exeext; then\n \t    || grep 'EMUL = .*linux' ../ld/Makefile \\\n \t    || grep 'EMUL = .*lynx' ../ld/Makefile) > /dev/null; then\n \t  in_tree_ld_is_elf=yes\n+\telif test \"$ld_is_gold\" = yes; then\n+\t  in_tree_ld_is_elf=yes\n \tfi\n \tfor f in $gcc_cv_ld_bfd_srcdir/configure $gcc_cv_ld_gld_srcdir/configure $gcc_cv_ld_gld_srcdir/configure.in $gcc_cv_ld_gld_srcdir/Makefile.in\n \tdo\n@@ -2192,11 +2195,23 @@ fi\n changequote(,)dnl\n if test $in_tree_ld != yes ; then\n   ld_ver=`$gcc_cv_ld --version 2>/dev/null | sed 1q`\n-  if test x\"$ld_is_gold\" = xyes; then\n-    gcc_cv_ld_hidden=yes\n-  elif echo \"$ld_ver\" | grep GNU > /dev/null; then\n-    ld_vers=`echo $ld_ver | sed -n \\\n-\t-e 's,^.*[\t ]\\([0-9][0-9]*\\.[0-9][0-9]*.*\\)$,\\1,p'`\n+  if echo \"$ld_ver\" | grep GNU > /dev/null; then\n+    if test x\"$ld_is_gold\" = xyes; then\n+      # GNU gold --version looks like this:\n+      #\n+      # GNU gold (GNU Binutils 2.21.51.20110225) 1.11\n+      #\n+      # We extract the binutils version which is more familiar and specific\n+      # than the gold version.\n+      ld_vers=`echo $ld_ver | sed -n \\\n+\t  -e 's,^[^)]*[\t ]\\([0-9][0-9]*\\.[0-9][0-9]*[^)]*\\)) .*$,\\1,p'`\n+    else\n+      # GNU ld --version looks like this:\n+      #\n+      # GNU ld (GNU Binutils) 2.21.51.20110225\n+      ld_vers=`echo $ld_ver | sed -n \\\n+\t  -e 's,^.*[\t ]\\([0-9][0-9]*\\.[0-9][0-9]*.*\\)$,\\1,p'`\n+    fi\n     ld_date=`echo $ld_ver | sed -n 's,^.*\\([2-9][0-9][0-9][0-9]\\)[-]*\\([01][0-9]\\)[-]*\\([0-3][0-9]\\).*$,\\1\\2\\3,p'`\n     ld_vers_major=`expr \"$ld_vers\" : '\\([0-9]*\\)'`\n     ld_vers_minor=`expr \"$ld_vers\" : '[0-9]*\\.\\([0-9]*\\)'`\n@@ -2235,7 +2250,9 @@ AC_CACHE_CHECK(linker for .hidden support, gcc_cv_ld_hidden,\n   fi\n else\n   gcc_cv_ld_hidden=yes\n-  if echo \"$ld_ver\" | grep GNU > /dev/null; then\n+  if test x\"$ld_is_gold\" = xyes; then\n+    :\n+  elif echo \"$ld_ver\" | grep GNU > /dev/null; then\n     if test 0\"$ld_date\" -lt 20020404; then\n       if test -n \"$ld_date\"; then\n \t# If there was date string, but was earlier than 2002-04-04, fail\n@@ -3173,23 +3190,27 @@ if test x\"$demangler_in_ld\" = xyes; then\n fi\n \n AC_MSG_CHECKING(linker plugin support)\n-gcc_cv_lto_plugin=no\n+gcc_cv_lto_plugin=0\n if test -f liblto_plugin.la; then\n   if test $in_tree_ld = yes -a x\"$ORIGINAL_PLUGIN_LD_FOR_TARGET=\" = x\"$gcc_cv_ld\"; then\n-    if test x\"$ld_is_gold\" = xyes; then\n-      gcc_cv_lto_plugin=yes\n-    elif test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 21 -o \"$gcc_cv_gld_major_version\" -gt 2; then \\\n-      gcc_cv_lto_plugin=yes\n+    if test \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -ge 21 -o \"$gcc_cv_gld_major_version\" -gt 2; then\n+      gcc_cv_lto_plugin=2\n+    elif test \"$ld_is_gold\" = yes -a \"$gcc_cv_gld_major_version\" -eq 2 -a \"$gcc_cv_gld_minor_version\" -eq 20; then\n+      gcc_cv_lto_plugin=1\n+\n+    fi\n+  elif echo \"$ld_ver\" | grep GNU > /dev/null; then\n+    # Require GNU ld or gold 2.21+ for plugin support by default.\n+    if test \"$ld_vers_major\" -eq 2 -a \"$ld_vers_minor\" -ge 21; then\n+      gcc_cv_lto_plugin=2\n+    # Allow -fuse-linker-plugin to enable plugin support in GNU gold 2.20.\n+    elif test \"$ld_is_gold\" = yes -a \"$ld_vers_major\" -eq 2 -a \"$ld_vers_minor\" -eq 20; then\n+      gcc_cv_lto_plugin=1\n     fi\n-  # Check if the linker supports --plugin-opt option\n-  elif $ORIGINAL_PLUGIN_LD_FOR_TARGET --help 2>/dev/null | grep plugin-opt > /dev/null; then\n-    gcc_cv_lto_plugin=yes\n   fi\n fi\n-if test x\"$gcc_cv_lto_plugin\" = xyes; then\n-  AC_DEFINE(HAVE_LTO_PLUGIN, 1,\n-[Define if your linker supports plugin.])\n-fi\n+AC_DEFINE_UNQUOTED(HAVE_LTO_PLUGIN, $gcc_cv_lto_plugin,\n+  [Define to the level of your linker's plugin support.])\n AC_MSG_RESULT($gcc_cv_lto_plugin)\n \n case \"$target\" in"}, {"sha": "ef308e33dc3fb6e04e125a2e23385c8e0c2799c4", "filename": "gcc/gcc.c", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/55b465747a451db5ae2255e97bbe30b5b3987098/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/55b465747a451db5ae2255e97bbe30b5b3987098/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=55b465747a451db5ae2255e97bbe30b5b3987098", "patch": "@@ -621,19 +621,37 @@ proper position among the other output files.  */\n # endif\n #endif\n \n-/* Conditional to test whether plugin is used or not.\n+/* Conditional to test whether the LTO plugin is used or not.\n    FIXME: For slim LTO we will need to enable plugin unconditionally.  This\n    still cause problems with PLUGIN_LD != LD and when plugin is built but\n    not useable.  For GCC 4.6 we don't support slim LTO and thus we can enable\n    plugin only when LTO is enabled.  We still honor explicit\n-   -fuse-linker-plugin.  */\n-#ifdef HAVE_LTO_PLUGIN\n+   -fuse-linker-plugin if the linker used understands -plugin.  */\n+\n+/* The linker has some plugin support.  */\n+#if HAVE_LTO_PLUGIN > 0\n+/* The linker used has full plugin support, use LTO plugin by default.  */\n+#if HAVE_LTO_PLUGIN == 2\n #define PLUGIN_COND \"!fno-use-linker-plugin:%{flto|flto=*|fuse-linker-plugin\"\n #define PLUGIN_COND_CLOSE \"}\"\n #else\n+/* The linker used has limited plugin support, use LTO plugin with explicit\n+   -fuse-linker-plugin.  */\n #define PLUGIN_COND \"fuse-linker-plugin\"\n #define PLUGIN_COND_CLOSE \"\"\n #endif\n+#define LINK_PLUGIN_SPEC \\\n+    \"%{\"PLUGIN_COND\": \\\n+    -plugin %(linker_plugin_file) \\\n+    -plugin-opt=%(lto_wrapper) \\\n+    -plugin-opt=-fresolution=%u.res \\\n+    %{!nostdlib:%{!nodefaultlibs:%:pass-through-libs(%(link_gcc_c_sequence))}} \\\n+    }\"PLUGIN_COND_CLOSE\n+#else\n+/* The linker used doesn't support -plugin, reject -fuse-linker-plugin.  */\n+#define LINK_PLUGIN_SPEC \"%{fuse-linker-plugin:\\\n+    %e-fuse-linker-plugin is not supported in this configuration}\"\n+#endif\n \n \n /* -u* was put back because both BSD and SysV seem to support it.  */\n@@ -648,14 +666,9 @@ proper position among the other output files.  */\n #ifndef LINK_COMMAND_SPEC\n #define LINK_COMMAND_SPEC \"\\\n %{!fsyntax-only:%{!c:%{!M:%{!MM:%{!E:%{!S:\\\n-    %(linker) \\\n-    %{\"PLUGIN_COND\": \\\n-    -plugin %(linker_plugin_file) \\\n-    -plugin-opt=%(lto_wrapper) \\\n-    -plugin-opt=-fresolution=%u.res \\\n-    %{!nostdlib:%{!nodefaultlibs:%:pass-through-libs(%(link_gcc_c_sequence))}} \\\n-    }\"PLUGIN_COND_CLOSE\" \\\n-    %{flto|flto=*:%<fcompare-debug*} \\\n+    %(linker) \" \\\n+    LINK_PLUGIN_SPEC \\\n+    \"%{flto|flto=*:%<fcompare-debug*} \\\n     %{flto} %{flto=*} %l \" LINK_PIE_SPEC \\\n    \"%X %{o*} %{e*} %{N} %{n} %{r}\\\n     %{s} %{t} %{u*} %{z} %{Z} %{!nostdlib:%{!nostartfiles:%S}}\\\n@@ -6815,10 +6828,12 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n   if (num_linker_inputs > 0 && !seen_error () && print_subprocess_help < 2)\n     {\n       int tmp = execution_count;\n-#ifdef HAVE_LTO_PLUGIN\n+#if HAVE_LTO_PLUGIN > 0\n+#if HAVE_LTO_PLUGIN == 2\n       const char *fno_use_linker_plugin = \"fno-use-linker-plugin\";\n #else\n       const char *fuse_linker_plugin = \"fuse-linker-plugin\";\n+#endif\n #endif\n \n       /* We'll use ld if we can't find collect2.  */\n@@ -6829,7 +6844,8 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t    linker_name_spec = \"ld\";\n \t}\n \n-#ifdef HAVE_LTO_PLUGIN\n+#if HAVE_LTO_PLUGIN > 0\n+#if HAVE_LTO_PLUGIN == 2\n       if (!switch_matches (fno_use_linker_plugin,\n \t\t\t   fno_use_linker_plugin + strlen (fno_use_linker_plugin), 0))\n #else\n@@ -6843,6 +6859,7 @@ warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\\n\\n\"\n \t  if (!linker_plugin_file_spec)\n \t    fatal_error (\"-fuse-linker-plugin, but \" LTOPLUGINSONAME \" not found\");\n \t}\n+#endif\n       lto_gcc_spec = argv[0];\n \n       /* Rebuild the COMPILER_PATH and LIBRARY_PATH environment variables"}]}