{"sha": "6bac43d760cdced2775cb17add346f757ee6f045", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmJhYzQzZDc2MGNkY2VkMjc3NWNiMTdhZGQzNDZmNzU3ZWU2ZjA0NQ==", "commit": {"author": {"name": "Richard Sandiford", "email": "richard.sandiford@arm.com", "date": "2015-11-17T18:41:55Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2015-11-17T18:41:55Z"}, "message": "Add gencfn-macros.c\n\nThis patch automatically generates case macros such as:\n\n        CASE_CFN_SQRT\n\nfor each {F,,L} floating-point built-in function and each {,L,LL,IMAX}\ninteger built-in function.  The macros match the same built-in\nfunctions as CASE_FLT_FN and CASE_INT_FN but in addition include\nthe associated internal function, if any.\n\nThe idea is to make sure that users of combined_fn don't need to know\nwhich built-in functions have internal-function equivalents.  If we add\na new function to internal-fn.def, all combined_fn users should pick it\nup automatically.\n\nThe generator wants to use \"hash_set <nofree_string_hash>\",\nso the patch follows hash_map in using the types given by the\ntraits as the key.  This is a no-op for current users of hash_set.\n\nTested on x86_64-linux-gnu, aarch64-linux-gnu and arm-linux-gnueabi.\n\ngcc/\n\t* Makefile.in (HASH_TABLE_H): Add GGC_H.\n\t(MOSTLYCLEANFILES, generated_files): Add case-fn-macros.h.\n\t(s-case-cfn-macros, case-cfn-macros.h, build/gencfn-macros.o)\n\t(build/gencfn-macros$(build_exeext): New rules.\n\t(genprogerr): Add cfn-macros.\n\t* hash-set.h (hash_set): Use the traits value_type as the key.\n\t* gencfn-macros.c: New file.\n\nFrom-SVN: r230476", "tree": {"sha": "5e9bc873dd49d3dfdd8631708321cbf4a109a760", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e9bc873dd49d3dfdd8631708321cbf4a109a760"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6bac43d760cdced2775cb17add346f757ee6f045", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bac43d760cdced2775cb17add346f757ee6f045", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6bac43d760cdced2775cb17add346f757ee6f045", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6bac43d760cdced2775cb17add346f757ee6f045/comments", "author": {"login": "rsandifo-arm", "id": 28043039, "node_id": "MDQ6VXNlcjI4MDQzMDM5", "avatar_url": "https://avatars.githubusercontent.com/u/28043039?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rsandifo-arm", "html_url": "https://github.com/rsandifo-arm", "followers_url": "https://api.github.com/users/rsandifo-arm/followers", "following_url": "https://api.github.com/users/rsandifo-arm/following{/other_user}", "gists_url": "https://api.github.com/users/rsandifo-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/rsandifo-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rsandifo-arm/subscriptions", "organizations_url": "https://api.github.com/users/rsandifo-arm/orgs", "repos_url": "https://api.github.com/users/rsandifo-arm/repos", "events_url": "https://api.github.com/users/rsandifo-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/rsandifo-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "4959a752881b69064fb988df23c10e14827099e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4959a752881b69064fb988df23c10e14827099e9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4959a752881b69064fb988df23c10e14827099e9"}], "stats": {"total": 207, "additions": 203, "deletions": 4}, "files": [{"sha": "38b7fe8f340a6dab3ab824cfbc2090dfdfc93859", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bac43d760cdced2775cb17add346f757ee6f045/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bac43d760cdced2775cb17add346f757ee6f045/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6bac43d760cdced2775cb17add346f757ee6f045", "patch": "@@ -1,3 +1,13 @@\n+2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n+\n+\t* Makefile.in (HASH_TABLE_H): Add GGC_H.\n+\t(MOSTLYCLEANFILES, generated_files): Add case-fn-macros.h.\n+\t(s-case-cfn-macros, case-cfn-macros.h, build/gencfn-macros.o)\n+\t(build/gencfn-macros$(build_exeext): New rules.\n+\t(genprogerr): Add cfn-macros.\n+\t* hash-set.h (hash_set): Use the traits value_type as the key.\n+\t* gencfn-macros.c: New file.\n+\n 2015-11-17  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* internal-fn.def (DEF_INTERNAL_INT_FN): New macro."}, {"sha": "ba8108d198c59eca81fa706ac09147cd304183b4", "filename": "gcc/Makefile.in", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bac43d760cdced2775cb17add346f757ee6f045/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bac43d760cdced2775cb17add346f757ee6f045/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=6bac43d760cdced2775cb17add346f757ee6f045", "patch": "@@ -876,7 +876,7 @@ endif\n # Shorthand variables for dependency lists.\n DUMPFILE_H = $(srcdir)/../libcpp/include/line-map.h dumpfile.h\n VEC_H = vec.h statistics.h $(GGC_H)\n-HASH_TABLE_H = $(HASHTAB_H) hash-table.h\n+HASH_TABLE_H = $(HASHTAB_H) hash-table.h $(GGC_H)\n EXCEPT_H = except.h $(HASHTAB_H)\n TARGET_DEF = target.def target-hooks-macros.h target-insns.def\n C_TARGET_DEF = c-family/c-target.def target-hooks-macros.h\n@@ -1570,6 +1570,7 @@ MOSTLYCLEANFILES = insn-flags.h insn-config.h insn-codes.h \\\n  tm-preds.h tm-constrs.h checksum-options gimple-match.c generic-match.c \\\n  tree-check.h min-insn-modes.c insn-modes.c insn-modes.h \\\n  genrtl.h gt-*.h gtype-*.h gtype-desc.c gtyp-input.list \\\n+ case-cfn-macros.h \\\n  xgcc$(exeext) cpp$(exeext) $(FULL_DRIVER_NAME) \\\n  $(EXTRA_PROGRAMS) gcc-cross$(exeext) \\\n  $(SPECS) collect2$(exeext) gcc-ar$(exeext) gcc-nm$(exeext) \\\n@@ -2247,6 +2248,14 @@ s-constrs-h: $(MD_DEPS) build/genpreds$(build_exeext)\n \t$(SHELL) $(srcdir)/../move-if-change tmp-constrs.h tm-constrs.h\n \t$(STAMP) s-constrs-h\n \n+s-case-cfn-macros: build/gencfn-macros$(build_exeext)\n+\t$(RUN_GEN) build/gencfn-macros$(build_exeext) -c \\\n+\t  > tmp-case-cfn-macros.h\n+\t$(SHELL) $(srcdir)/../move-if-change tmp-case-cfn-macros.h \\\n+\t  case-cfn-macros.h\n+\t$(STAMP) s-case-cfn-macros\n+case-cfn-macros.h: s-case-cfn-macros; @true\n+\n target-hooks-def.h: s-target-hooks-def-h; @true\n # make sure that when we build info files, the used tm.texi is up to date.\n $(srcdir)/doc/tm.texi: s-tm-texi; @true\n@@ -2434,7 +2443,7 @@ generated_files = config.h tm.h $(TM_P_H) $(TM_H) multilib.h \\\n        $(ALL_GTFILES_H) gtype-desc.c gtype-desc.h gcov-iov.h \\\n        options.h target-hooks-def.h insn-opinit.h \\\n        common/common-target-hooks-def.h pass-instances.def \\\n-       c-family/c-target-hooks-def.h params.list\n+       c-family/c-target-hooks-def.h params.list case-cfn-macros.h\n \n #\f\n # How to compile object files to run on the build machine.\n@@ -2581,6 +2590,8 @@ build/genmddump.o : genmddump.c $(RTL_BASE_H) $(BCONFIG_H) $(SYSTEM_H)\t\\\n build/genmatch.o : genmatch.c $(BCONFIG_H) $(SYSTEM_H) \\\n   coretypes.h errors.h $(HASH_TABLE_H) hash-map.h $(GGC_H) is-a.h \\\n   tree.def builtins.def\n+build/gencfn-macros.o : gencfn-macros.c $(BCONFIG_H) $(SYSTEM_H)\t\\\n+  coretypes.h errors.h $(HASH_TABLE_H) hash-set.h builtins.def internal-fn.def\n \n # Compile the programs that generate insn-* from the machine description.\n # They are compiled with $(COMPILER_FOR_BUILD), and associated libraries,\n@@ -2597,7 +2608,7 @@ genprogmd = $(genprogrtl) mddeps constants enums\n $(genprogmd:%=build/gen%$(build_exeext)): $(BUILD_MD)\n \n # All these programs need to report errors.\n-genprogerr = $(genprogmd) genrtl modes gtype hooks\n+genprogerr = $(genprogmd) genrtl modes gtype hooks cfn-macros\n $(genprogerr:%=build/gen%$(build_exeext)): $(BUILD_ERRORS)\n \n # Remaining build programs.\n@@ -2607,6 +2618,7 @@ genprog = $(genprogerr) check checksum condmd match\n build/genautomata$(build_exeext) : BUILD_LIBS += -lm\n \n build/genrecog$(build_exeext) : build/hash-table.o build/inchash.o\n+build/gencfn-macros$(build_exeext) : build/hash-table.o build/ggc-none.o\n \n # For stage1 and when cross-compiling use the build libcpp which is\n # built with NLS disabled.  For stage2+ use the host library and"}, {"sha": "5ee3af0eb5cc35437c3878259df0f0b5c72a9233", "filename": "gcc/gencfn-macros.c", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bac43d760cdced2775cb17add346f757ee6f045/gcc%2Fgencfn-macros.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bac43d760cdced2775cb17add346f757ee6f045/gcc%2Fgencfn-macros.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencfn-macros.c?ref=6bac43d760cdced2775cb17add346f757ee6f045", "patch": "@@ -0,0 +1,176 @@\n+/* Generate macros based on the combined_fn enum.\n+   Copyright (C) 2015 Free Software Foundation, Inc.\n+\n+This file is part of GCC.\n+\n+GCC is free software; you can redistribute it and/or modify it under\n+the terms of the GNU General Public License as published by the Free\n+Software Foundation; either version 3, or (at your option) any later\n+version.\n+\n+GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+for more details.\n+\n+You should have received a copy of the GNU General Public License\n+along with GCC; see the file COPYING3.  If not see\n+<http://www.gnu.org/licenses/>.  */\n+\n+/* Automatically generate code fragments related to combined_fn.\n+\n+   The program looks for math built-in functions that have float, double\n+   and long double variants, such as {sqrtf, sqrt, sqrtl}, and that may\n+   or may not have an associated internal function as well.  It also looks\n+   for integer built-in functions that have int, long, long long and\n+   intmax_t variants, such as {clz, clzl, clzll, clzimax}, and that\n+   again may or may not have an associated internal function as well.\n+\n+   When run with -c, the generator prints a list of macros such as:\n+\n+      CASE_CFN_SQRT\n+\n+   for each group of functions described above, with 'case CFN_*'\n+   statements for each built-in and internal function in the group.\n+   For example, there are both built-in and internal implementations\n+   of SQRT, so \"CASE_CFN_SQRT:\" is equivalent to:\n+\n+      case CFN_BUILT_IN_SQRTF:\n+      case CFN_BUILT_IN_SQRT:\n+      case CFN_BUILT_IN_SQRTL:\n+      case CFN_SQRT:\n+\n+   The macros for groups with no internal function drop the last line.  */\n+\n+#include \"bconfig.h\"\n+#include \"system.h\"\n+#include \"coretypes.h\"\n+#include \"hash-table.h\"\n+#include \"hash-set.h\"\n+#include \"errors.h\"\n+\n+typedef hash_set <nofree_string_hash> string_set;\n+\n+/* Add all names in null-terminated list NAMES to SET.  */\n+\n+static void\n+add_to_set (string_set *set, const char *const *names)\n+{\n+  for (unsigned int i = 0; names[i]; ++i)\n+    set->add (names[i]);\n+}\n+\n+/* Return true if *BUILTINS contains BUILT_IN_<NAME><SUFFIX> for all\n+   suffixes in null-terminated list SUFFIXES.  */\n+\n+static bool\n+is_group (string_set *builtins, const char *name, const char *const *suffixes)\n+{\n+  for (unsigned int i = 0; suffixes[i]; ++i)\n+    if (!builtins->contains (ACONCAT ((\"BUILT_IN_\", name, suffixes[i], NULL))))\n+      return false;\n+  return true;\n+}\n+\n+/* Print a macro for all combined functions related to NAME, with the\n+   null-terminated list of suffixes in SUFFIXES.  INTERNAL_P says whether\n+   CFN_<NAME> also exists.  */\n+\n+static void\n+print_case_cfn (const char *name, bool internal_p,\n+\t\tconst char *const *suffixes)\n+{\n+  printf (\"#define CASE_CFN_%s\", name);\n+  if (internal_p)\n+    printf (\" \\\\\\n  case CFN_%s\", name);\n+  for (unsigned int i = 0; suffixes[i]; ++i)\n+    printf (\"%s \\\\\\n  case CFN_BUILT_IN_%s%s\",\n+\t    internal_p || i > 0 ? \":\" : \"\", name, suffixes[i]);\n+  printf (\"\\n\");\n+}\n+\n+const char *const builtin_names[] = {\n+#define DEF_BUILTIN(ENUM, N, C, T, LT, B, F, NA, AT, IM, COND) \\\n+  #ENUM,\n+#include \"builtins.def\"\n+  NULL\n+};\n+\n+const char *const internal_fn_flt_names[] = {\n+#define DEF_INTERNAL_FLT_FN(NAME, FLAGS, OPTAB, TYPE) \\\n+  #NAME,\n+#include \"internal-fn.def\"\n+  NULL\n+};\n+\n+const char *const internal_fn_int_names[] = {\n+#define DEF_INTERNAL_INT_FN(NAME, FLAGS, OPTAB, TYPE) \\\n+  #NAME,\n+#include \"internal-fn.def\"\n+  NULL\n+};\n+\n+static const char *const flt_suffixes[] = { \"F\", \"\", \"L\", NULL };\n+static const char *const int_suffixes[] = { \"\", \"L\", \"LL\", \"IMAX\", NULL };\n+\n+static const char *const *const suffix_lists[] = {\n+  flt_suffixes,\n+  int_suffixes,\n+  NULL\n+};\n+\n+int\n+main (int argc, char **argv)\n+{\n+  /* Check arguments.  */\n+  progname = argv[0];\n+  if (argc != 2\n+      || argv[1][0] != '-'\n+      || argv[1][1] != 'c'\n+      || argv[1][2])\n+    fatal (\"usage: %s -c > file\", progname);\n+\n+  /* Collect the set of built-in and internal functions.  */\n+  string_set builtins;\n+  string_set internal_fns;\n+  add_to_set (&builtins, builtin_names);\n+  add_to_set (&internal_fns, internal_fn_flt_names);\n+  add_to_set (&internal_fns, internal_fn_int_names);\n+\n+  /* Check the functions.  */\n+  for (unsigned int i = 0; internal_fn_flt_names[i]; ++i)\n+    {\n+      const char *name = internal_fn_flt_names[i];\n+      if (!is_group (&builtins, name, flt_suffixes))\n+\terror (\"DEF_INTERNAL_FLT_FN (%s) has no associated built-in\"\n+\t       \" functions\", name);\n+    }\n+  for (unsigned int i = 0; internal_fn_int_names[i]; ++i)\n+    {\n+      const char *name = internal_fn_int_names[i];\n+      if (!is_group (&builtins, name, int_suffixes))\n+\terror (\"DEF_INTERNAL_INT_FN (%s) has no associated built-in\"\n+\t       \" functions\", name);\n+    }\n+\n+  /* Go through the built-in functions in declaration order, outputting\n+     definitions as appropriate.  */\n+  for (unsigned int i = 0; builtin_names[i]; ++i)\n+    {\n+      const char *name = builtin_names[i];\n+      if (strncmp (name, \"BUILT_IN_\", 9) == 0)\n+\t{\n+\t  const char *root = name + 9;\n+\t  for (unsigned int j = 0; suffix_lists[j]; ++j)\n+\t    if (is_group (&builtins, root, suffix_lists[j]))\n+\t      {\n+\t\tbool internal_p = internal_fns.contains (root);\n+\t\tprint_case_cfn (root, internal_p, suffix_lists[j]);\n+\t      }\n+\t}\n+    }\n+\n+  if (fflush (stdout) || fclose (stdout) || have_error)\n+    return FATAL_EXIT_CODE;\n+  return SUCCESS_EXIT_CODE;\n+}"}, {"sha": "679d2b6df64562ab1da6c502679844095c92372f", "filename": "gcc/hash-set.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6bac43d760cdced2775cb17add346f757ee6f045/gcc%2Fhash-set.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6bac43d760cdced2775cb17add346f757ee6f045/gcc%2Fhash-set.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhash-set.h?ref=6bac43d760cdced2775cb17add346f757ee6f045", "patch": "@@ -21,10 +21,11 @@ along with GCC; see the file COPYING3.  If not see\n #ifndef hash_set_h\n #define hash_set_h\n \n-template<typename Key, typename Traits = default_hash_traits<Key> >\n+template<typename KeyId, typename Traits = default_hash_traits<KeyId> >\n class hash_set\n {\n public:\n+  typedef typename Traits::value_type Key;\n   explicit hash_set (size_t n = 13, bool ggc = false CXX_MEM_STAT_INFO)\n     : m_table (n, ggc, true, HASH_SET_ORIGIN PASS_MEM_STAT) {}\n "}]}