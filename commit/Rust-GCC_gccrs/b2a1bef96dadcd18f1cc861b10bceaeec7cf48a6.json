{"sha": "b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6", "node_id": "C_kwDOANBUbNoAKGIyYTFiZWY5NmRhZGNkMThmMWNjODYxYjEwYmNlYWVlYzdjZjQ4YTY", "commit": {"author": {"name": "Christoph M\u00fcllner", "email": "christoph.muellner@vrull.eu", "date": "2022-10-06T11:17:40Z"}, "committer": {"name": "Philipp Tomsich", "email": "philipp.tomsich@vrull.eu", "date": "2023-03-15T09:00:42Z"}, "message": "riscv: thead: Add support for the XTheadMac ISA extension\n\nThe XTheadMac ISA extension provides multiply-accumulate/subtract\ninstructions:\n* mula/mulaw/mulah\n* muls/mulsw/mulsh\n\nTo benefit from middle-end passes, we expand the following named\npatterns in riscv.md (as they are not T-Head-specific):\n* maddhisi4\n* msubhisi4\n\nCo-Developed-by: Xianmiao Qu <cooper.qu@linux.alibaba.com>\nSigned-off-by: Xianmiao Qu <cooper.qu@linux.alibaba.com>\nSigned-off-by: Christoph M\u00fcllner <christoph.muellner@vrull.eu>\n\ngcc/ChangeLog:\n\n\t* config/riscv/riscv.md (maddhisi4): New expand.\n\t(msubhisi4): New expand.\n\t* config/riscv/thead.md (*th_mula<mode>): New pattern.\n\t(*th_mulawsi): New pattern.\n\t(*th_mulawsi2): New pattern.\n\t(*th_maddhisi4): New pattern.\n\t(*th_sextw_maddhisi4): New pattern.\n\t(*th_muls<mode>): New pattern.\n\t(*th_mulswsi): New pattern.\n\t(*th_mulswsi2): New pattern.\n\t(*th_msubhisi4): New pattern.\n\t(*th_sextw_msubhisi4): New pattern.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/riscv/xtheadmac-mula-muls.c: New test.", "tree": {"sha": "3c17631793b5e43217d22860ae72b78541cb14d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c17631793b5e43217d22860ae72b78541cb14d8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6/comments", "author": {"login": "cmuellner", "id": 92810, "node_id": "MDQ6VXNlcjkyODEw", "avatar_url": "https://avatars.githubusercontent.com/u/92810?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cmuellner", "html_url": "https://github.com/cmuellner", "followers_url": "https://api.github.com/users/cmuellner/followers", "following_url": "https://api.github.com/users/cmuellner/following{/other_user}", "gists_url": "https://api.github.com/users/cmuellner/gists{/gist_id}", "starred_url": "https://api.github.com/users/cmuellner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cmuellner/subscriptions", "organizations_url": "https://api.github.com/users/cmuellner/orgs", "repos_url": "https://api.github.com/users/cmuellner/repos", "events_url": "https://api.github.com/users/cmuellner/events{/privacy}", "received_events_url": "https://api.github.com/users/cmuellner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ptomsich", "id": 14983582, "node_id": "MDQ6VXNlcjE0OTgzNTgy", "avatar_url": "https://avatars.githubusercontent.com/u/14983582?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptomsich", "html_url": "https://github.com/ptomsich", "followers_url": "https://api.github.com/users/ptomsich/followers", "following_url": "https://api.github.com/users/ptomsich/following{/other_user}", "gists_url": "https://api.github.com/users/ptomsich/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptomsich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptomsich/subscriptions", "organizations_url": "https://api.github.com/users/ptomsich/orgs", "repos_url": "https://api.github.com/users/ptomsich/repos", "events_url": "https://api.github.com/users/ptomsich/events{/privacy}", "received_events_url": "https://api.github.com/users/ptomsich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e7ffe126debfbc59e2d359ef3c37899327e2055", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8e7ffe126debfbc59e2d359ef3c37899327e2055", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8e7ffe126debfbc59e2d359ef3c37899327e2055"}], "stats": {"total": 182, "additions": 182, "deletions": 0}, "files": [{"sha": "1a9c3e0a12ce562bcb5949f447595335ddcbe270", "filename": "gcc/config/riscv/riscv.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6/gcc%2Fconfig%2Friscv%2Friscv.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6/gcc%2Fconfig%2Friscv%2Friscv.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Friscv.md?ref=b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6", "patch": "@@ -3115,6 +3115,24 @@\n     FAIL;\n })\n \n+(define_expand \"maddhisi4\"\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(plus:SI\n+\t  (mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\"))\n+\t\t   (sign_extend:SI (match_operand:HI 2 \"register_operand\")))\n+\t  (match_operand:SI 3 \"register_operand\")))]\n+  \"TARGET_XTHEADMAC\"\n+)\n+\n+(define_expand \"msubhisi4\"\n+  [(set (match_operand:SI 0 \"register_operand\")\n+\t(minus:SI\n+\t  (match_operand:SI 3 \"register_operand\")\n+\t  (mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\"))\n+\t\t   (sign_extend:SI (match_operand:HI 2 \"register_operand\")))))]\n+  \"TARGET_XTHEADMAC\"\n+)\n+\n (include \"bitmanip.md\")\n (include \"crypto.md\")\n (include \"sync.md\")"}, {"sha": "ce709ca79a46ad0dd73ce23dd8940b86f9484103", "filename": "gcc/config/riscv/thead.md", "status": "modified", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6/gcc%2Fconfig%2Friscv%2Fthead.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6/gcc%2Fconfig%2Friscv%2Fthead.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Friscv%2Fthead.md?ref=b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6", "patch": "@@ -138,3 +138,124 @@\n    th.mveqz\\t%0,%z3,%1\"\n   [(set_attr \"type\" \"condmove\")\n    (set_attr \"mode\" \"<GPR:MODE>\")])\n+\n+;; XTheadMac\n+\n+(define_insn \"*th_mula<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t      (plus:X (mult:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:X 2 \"register_operand\" \"r\"))\n+\t\t      (match_operand:X 3 \"register_operand\" \"0\")))]\n+  \"TARGET_XTHEADMAC\"\n+  \"th.mula\\\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"*th_mulawsi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI\n+\t  (plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t    (match_operand:SI 2 \"register_operand\" \"r\"))\n+\t\t   (match_operand:SI 3 \"register_operand\" \"0\"))))]\n+  \"TARGET_XTHEADMAC && TARGET_64BIT\"\n+  \"th.mulaw\\\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n+(define_insn \"*th_mulawsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t      (plus:SI (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t\t(match_operand:SI 2 \"register_operand\" \"r\"))\n+\t\t       (match_operand:SI 3 \"register_operand\" \"0\")))]\n+  \"TARGET_XTHEADMAC && TARGET_64BIT\"\n+  \"th.mulaw\\\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n+(define_insn \"*th_maddhisi4\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t  (plus:SI\n+\t    (mult:SI\n+\t      (sign_extend:SI (match_operand:HI 1 \"register_operand\" \" r\"))\n+\t      (sign_extend:SI (match_operand:HI 2 \"register_operand\" \" r\")))\n+\t    (match_operand:SI 3 \"register_operand\" \" 0\")))]\n+  \"TARGET_XTHEADMAC\"\n+  \"th.mulah\\\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n+(define_insn \"*th_sextw_maddhisi4\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI\n+\t  (plus:SI\n+\t    (mult:SI\n+\t      (sign_extend:SI (match_operand:HI 1 \"register_operand\" \" r\"))\n+\t      (sign_extend:SI (match_operand:HI 2 \"register_operand\" \" r\")))\n+\t    (match_operand:SI 3 \"register_operand\" \" 0\"))))]\n+  \"TARGET_XTHEADMAC && TARGET_64BIT\"\n+  \"th.mulah\\\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n+(define_insn \"*th_muls<mode>\"\n+  [(set (match_operand:X 0 \"register_operand\" \"=r\")\n+\t      (minus:X (match_operand:X 3 \"register_operand\" \"0\")\n+\t\t       (mult:X (match_operand:X 1 \"register_operand\" \"r\")\n+\t\t\t       (match_operand:X 2 \"register_operand\" \"r\"))))]\n+  \"TARGET_XTHEADMAC\"\n+  \"th.muls\\\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"<MODE>\")]\n+)\n+\n+(define_insn \"*th_mulswsi\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI\n+\t  (minus:SI (match_operand:SI 3 \"register_operand\" \"0\")\n+\t\t    (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t     (match_operand:SI 2 \"register_operand\" \"r\")))))]\n+  \"TARGET_XTHEADMAC && TARGET_64BIT\"\n+  \"th.mulsw\\\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n+(define_insn \"*th_mulswsi2\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (match_operand:SI 3 \"register_operand\" \"0\")\n+\t\t  (mult:SI (match_operand:SI 1 \"register_operand\" \"r\")\n+\t\t\t   (match_operand:SI 2 \"register_operand\" \"r\"))))]\n+  \"TARGET_XTHEADMAC && TARGET_64BIT\"\n+  \"th.mulsw\\\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n+(define_insn \"*th_msubhisi4\"\n+  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n+\t(minus:SI (match_operand:SI 3 \"register_operand\" \" 0\")\n+\t  (mult:SI (sign_extend:SI (match_operand:HI 1 \"register_operand\" \" r\"))\n+\t    (sign_extend:SI (match_operand:HI 2 \"register_operand\" \" r\")))))]\n+  \"TARGET_XTHEADMAC\"\n+  \"th.mulsh\\\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")]\n+)\n+\n+(define_insn \"*th_sextw_msubhisi4\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n+\t(sign_extend:DI\n+\t  (minus:SI (match_operand:SI 3 \"register_operand\" \" 0\")\n+\t    (mult:SI\n+\t      (sign_extend:SI (match_operand:HI 1 \"register_operand\" \" r\"))\n+\t      (sign_extend:SI (match_operand:HI 2 \"register_operand\" \" r\"))))))]\n+  \"TARGET_XTHEADMAC && TARGET_64BIT\"\n+  \"th.mulsh\\\\t%0,%1,%2\"\n+  [(set_attr \"type\" \"imul\")\n+   (set_attr \"mode\" \"SI\")]\n+)"}, {"sha": "751a4be5091d48320f852a355f781d8238bc7438", "filename": "gcc/testsuite/gcc.target/riscv/xtheadmac-mula-muls.c", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadmac-mula-muls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadmac-mula-muls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Friscv%2Fxtheadmac-mula-muls.c?ref=b2a1bef96dadcd18f1cc861b10bceaeec7cf48a6", "patch": "@@ -0,0 +1,43 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-march=rv32gc_xtheadmac\" { target { rv32 } } } */\n+/* { dg-options \"-march=rv64gc_xtheadmac\" { target { rv64 } } } */\n+/* { dg-skip-if \"\" { *-*-* } { \"-O0\" \"-O1\" \"-Og\" } } */\n+\n+long f_mula(long a, long b, long c)\n+{\n+  return a + b * c;\n+}\n+\n+long f_muls(long a, long b, long c)\n+{\n+  return a - b * c;\n+}\n+\n+#if __riscv_xlen == 64\n+int f_mulaw(int a, int b, int c)\n+{\n+  return a + b * c;\n+}\n+\n+int f_mulsw(int a, int b, int c)\n+{\n+  return a - b * c;\n+}\n+#endif\n+\n+long f_mulah(int a, unsigned short b, unsigned short c)\n+{\n+  return a + (int)(short)b * (int)(short)c;\n+}\n+\n+long f_mulsh(int a, unsigned short b, unsigned short c)\n+{\n+  return a - (int)(short)b * (int)(short)c;\n+}\n+\n+/* { dg-final { scan-assembler-times \"th.mula\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"th.muls\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"th.mulaw\\t\" 1 { target { rv64 } } } } */\n+/* { dg-final { scan-assembler-times \"th.mulsw\\t\" 1 { target { rv64 } } } } */\n+/* { dg-final { scan-assembler-times \"th.mulah\\t\" 1 } } */\n+/* { dg-final { scan-assembler-times \"th.mulsh\\t\" 1 } } */"}]}