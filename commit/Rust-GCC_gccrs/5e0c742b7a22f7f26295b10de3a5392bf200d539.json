{"sha": "5e0c742b7a22f7f26295b10de3a5392bf200d539", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUwYzc0MmI3YTIyZjdmMjYyOTViMTBkZTNhNTM5MmJmMjAwZDUzOQ==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T11:17:09Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2012-12-05T11:17:09Z"}, "message": "[multiple changes]\n\n2012-12-05  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Check_Loop_Invariant_Variant_Placement): When pragma\n\tLoop_[In]variant does not appear immediately within the statements\n\tof a loop, it must appear in a chain of nested blocks.\n\n2012-12-05  Thomas Quinot  <quinot@adacore.com>\n\n\t* sem_ch13.adb: Minor reformatting.\n\t Remove redundant assertion.\n\nFrom-SVN: r194213", "tree": {"sha": "d1adb2b24cd145dae1facb856252c6df719f5c7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1adb2b24cd145dae1facb856252c6df719f5c7f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e0c742b7a22f7f26295b10de3a5392bf200d539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0c742b7a22f7f26295b10de3a5392bf200d539", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e0c742b7a22f7f26295b10de3a5392bf200d539", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e0c742b7a22f7f26295b10de3a5392bf200d539/comments", "author": null, "committer": null, "parents": [{"sha": "ce95786742efb57662ba5a27f3da38b3b917c56c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce95786742efb57662ba5a27f3da38b3b917c56c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce95786742efb57662ba5a27f3da38b3b917c56c"}], "stats": {"total": 116, "additions": 89, "deletions": 27}, "files": [{"sha": "89030d9d584afdb263cd6d2921dabe016a608b07", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0c742b7a22f7f26295b10de3a5392bf200d539/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0c742b7a22f7f26295b10de3a5392bf200d539/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=5e0c742b7a22f7f26295b10de3a5392bf200d539", "patch": "@@ -1,3 +1,14 @@\n+2012-12-05  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Check_Loop_Invariant_Variant_Placement): When pragma\n+\tLoop_[In]variant does not appear immediately within the statements\n+\tof a loop, it must appear in a chain of nested blocks.\n+\n+2012-12-05  Thomas Quinot  <quinot@adacore.com>\n+\n+\t* sem_ch13.adb: Minor reformatting.\n+\t Remove redundant assertion.\n+\n 2012-12-05  Thomas Quinot  <quinot@adacore.com>\n \n \t* par_sco.adb, scos.ads, put_scos.adb, put_scos.ads,"}, {"sha": "887b0792e786af14c03d6b7bf4d3cdab2438ef78", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0c742b7a22f7f26295b10de3a5392bf200d539/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0c742b7a22f7f26295b10de3a5392bf200d539/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=5e0c742b7a22f7f26295b10de3a5392bf200d539", "patch": "@@ -84,7 +84,7 @@ package body Sem_Ch13 is\n \n    procedure Build_Predicate_Function (Typ : Entity_Id; N : Node_Id);\n    --  If Typ has predicates (indicated by Has_Predicates being set for Typ,\n-   --  then either there are pragma Invariant entries on the rep chain for the\n+   --  then either there are pragma Predicate entries on the rep chain for the\n    --  type (note that Predicate aspects are converted to pragma Predicate), or\n    --  there are inherited aspects from a parent type, or ancestor subtypes.\n    --  This procedure builds the spec and body for the Predicate function that\n@@ -5423,9 +5423,9 @@ package body Sem_Ch13 is\n    --  use this function even if checks are off, e.g. for membership tests.\n \n    procedure Build_Predicate_Function (Typ : Entity_Id; N : Node_Id) is\n-      Loc  : constant Source_Ptr := Sloc (Typ);\n-      Spec : Node_Id;\n-      SId  : Entity_Id;\n+      Loc   : constant Source_Ptr := Sloc (Typ);\n+      Spec  : Node_Id;\n+      SId   : Entity_Id;\n       FDecl : Node_Id;\n       FBody : Node_Id;\n \n@@ -5669,7 +5669,6 @@ package body Sem_Ch13 is\n \n          --  Build function declaration\n \n-         pragma Assert (Has_Predicates (Typ));\n          SId :=\n            Make_Defining_Identifier (Loc,\n              Chars => New_External_Name (Chars (Typ), \"Predicate\"));"}, {"sha": "be5afe028a6bf2a1c2487944130bed30edcf44f9", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 74, "deletions": 22, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e0c742b7a22f7f26295b10de3a5392bf200d539/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e0c742b7a22f7f26295b10de3a5392bf200d539/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=5e0c742b7a22f7f26295b10de3a5392bf200d539", "patch": "@@ -620,7 +620,7 @@ package body Sem_Prag is\n \n       procedure Check_Loop_Invariant_Variant_Placement;\n       --  Verify whether pragma Loop_Invariant or pragma Loop_Variant appear\n-      --  immediately within the statements of the related loop.\n+      --  immediately within a construct restricted to loops.\n \n       procedure Check_Is_In_Decl_Part_Or_Package_Spec;\n       --  Check that pragma appears in a declarative part, or in a package\n@@ -1921,37 +1921,89 @@ package body Sem_Prag is\n       --------------------------------------------\n \n       procedure Check_Loop_Invariant_Variant_Placement is\n-         Loop_Stmt : Node_Id;\n+         procedure Placement_Error (Constr : Node_Id);\n+         --  Node Constr denotes the last loop restricted construct before we\n+         --  encountered an illegal relation between enclosing constructs. Emit\n+         --  an error depending on what Constr was.\n+\n+         ---------------------\n+         -- Placement_Error --\n+         ---------------------\n+\n+         procedure Placement_Error (Constr : Node_Id) is\n+         begin\n+            if Nkind (Constr) = N_Pragma then\n+               Error_Pragma\n+                 (\"pragma % must appear immediately within the statements \" &\n+                  \"of a loop\");\n+            else\n+               Error_Pragma_Arg\n+                 (\"block containing pragma % must appear immediately within \" &\n+                  \"the statements of a loop\", Constr);\n+            end if;\n+         end Placement_Error;\n+\n+         --  Local declarations\n+\n+         Prev : Node_Id;\n+         Stmt : Node_Id;\n+\n+      --  Start of processing for Check_Loop_Invariant_Variant_Placement\n \n       begin\n-         --  Locate the enclosing loop statement (if any)\n+         Prev := N;\n+         Stmt := Parent (N);\n+         while Present (Stmt) loop\n \n-         Loop_Stmt := N;\n-         while Present (Loop_Stmt) loop\n-            if Nkind (Loop_Stmt) = N_Loop_Statement then\n-               exit;\n+            --  The pragma or previous block must appear immediately within the\n+            --  current block's declarative or statement part.\n+\n+            if Nkind (Stmt) = N_Block_Statement then\n+               if (No (Declarations (Stmt))\n+                     or else List_Containing (Prev) /= Declarations (Stmt))\n+                 and then\n+                   List_Containing (Prev) /=\n+                     Statements (Handled_Statement_Sequence (Stmt))\n+               then\n+                  Placement_Error (Prev);\n+                  return;\n \n-            --  Prevent the search from going too far\n+               --  Keep inspecting the parents because we are now within a\n+               --  chain of nested blocks.\n+\n+               else\n+                  Prev := Stmt;\n+                  Stmt := Parent (Stmt);\n+               end if;\n+\n+            --  The pragma or previous block must appear immediately within the\n+            --  statements of the loop.\n+\n+            elsif Nkind (Stmt) = N_Loop_Statement then\n+               if List_Containing (Prev) /= Statements (Stmt) then\n+                  Placement_Error (Prev);\n+               end if;\n+\n+               --  Stop the traversal because we reached the innermost loop\n+               --  regardless of whether we encountered an error or not.\n \n-            elsif Nkind_In (Loop_Stmt, N_Entry_Body,\n-                                       N_Package_Body,\n-                                       N_Package_Declaration,\n-                                       N_Protected_Body,\n-                                       N_Subprogram_Body,\n-                                       N_Task_Body)\n-            then\n-               Error_Pragma (\"pragma % must appear inside a loop statement\");\n                return;\n \n+            --  Ignore a handled statement sequence. Note that this node may\n+            --  be related to a subprogram body in which case we will emit an\n+            --  error on the next iteration of the search.\n+\n+            elsif Nkind (Stmt) = N_Handled_Sequence_Of_Statements then\n+               Stmt := Parent (Stmt);\n+\n+            --  Any other statement breaks the chain from the pragma to the\n+            --  loop.\n+\n             else\n-               Loop_Stmt := Parent (Loop_Stmt);\n+               Placement_Error (Prev);\n+               return;\n             end if;\n          end loop;\n-\n-         if List_Containing (N) /= Statements (Loop_Stmt) then\n-            Error_Pragma\n-              (\"pragma % must occur immediately in the statements of a loop\");\n-         end if;\n       end Check_Loop_Invariant_Variant_Placement;\n \n       -------------------------------------------"}]}