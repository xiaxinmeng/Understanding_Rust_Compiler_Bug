{"sha": "f526a3c8fd2cbcf42ae282cfa3572b59d19414f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjUyNmEzYzhmZDJjYmNmNDJhZTI4MmNmYTM1NzJiNTlkMTk0MTRmOQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-11-05T23:54:30Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-11-05T23:54:30Z"}, "message": "ia64.md (UNSPEC_SHRP): New.\n\n        * ia64.md (UNSPEC_SHRP): New.\n        (dshift_count_operand): New.\n        (ashrti3, ashrti3_internal, lshrti3, lshrti3_internal, shrp): New.\n        * ia64.c (rtx_needs_barrier): Handle UNSPEC_SHRP.\n\nFrom-SVN: r90149", "tree": {"sha": "e1726fa48863ece21aaf22832be6057b0a0f947b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e1726fa48863ece21aaf22832be6057b0a0f947b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f526a3c8fd2cbcf42ae282cfa3572b59d19414f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f526a3c8fd2cbcf42ae282cfa3572b59d19414f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f526a3c8fd2cbcf42ae282cfa3572b59d19414f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f526a3c8fd2cbcf42ae282cfa3572b59d19414f9/comments", "author": null, "committer": null, "parents": [{"sha": "787dec5fccc3a31bd3b42d062fbfaa9ea9671a3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/787dec5fccc3a31bd3b42d062fbfaa9ea9671a3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/787dec5fccc3a31bd3b42d062fbfaa9ea9671a3c"}], "stats": {"total": 104, "additions": 104, "deletions": 0}, "files": [{"sha": "5cf30867886ebccfb26cbff95197d1b617eb15ce", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f526a3c8fd2cbcf42ae282cfa3572b59d19414f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f526a3c8fd2cbcf42ae282cfa3572b59d19414f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f526a3c8fd2cbcf42ae282cfa3572b59d19414f9", "patch": "@@ -1,3 +1,10 @@\n+2004-11-05  Richard Henderson  <rth@redhat.com>\n+\n+\t* ia64.md (UNSPEC_SHRP): New.\n+\t(dshift_count_operand): New.\n+\t(ashrti3, ashrti3_internal, lshrti3, lshrti3_internal, shrp): New.\n+\t* ia64.c (rtx_needs_barrier): Handle UNSPEC_SHRP.\n+\n 2004-11-05  Joseph S. Myers  <joseph@codesourcery.com>\n \n \t* c-typeck.c (output_init_element): Return early if value is"}, {"sha": "0b65686512c0414fe226a74aed988f135079f133", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f526a3c8fd2cbcf42ae282cfa3572b59d19414f9/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f526a3c8fd2cbcf42ae282cfa3572b59d19414f9/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=f526a3c8fd2cbcf42ae282cfa3572b59d19414f9", "patch": "@@ -4899,6 +4899,7 @@ rtx_needs_barrier (rtx x, struct reg_flags flags, int pred)\n \t  break;\n \n \tcase UNSPEC_FR_RECIP_APPROX:\n+\tcase UNSPEC_SHRP:\n \t  need_barrier = rtx_needs_barrier (XVECEXP (x, 0, 0), flags, pred);\n \t  need_barrier |= rtx_needs_barrier (XVECEXP (x, 0, 1), flags, pred);\n \t  break;"}, {"sha": "4a01ba4d9042d946e2175a0a5370fe49e2271517", "filename": "gcc/config/ia64/ia64.md", "status": "modified", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f526a3c8fd2cbcf42ae282cfa3572b59d19414f9/gcc%2Fconfig%2Fia64%2Fia64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f526a3c8fd2cbcf42ae282cfa3572b59d19414f9/gcc%2Fconfig%2Fia64%2Fia64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.md?ref=f526a3c8fd2cbcf42ae282cfa3572b59d19414f9", "patch": "@@ -77,6 +77,7 @@\n    (UNSPEC_RET_ADDR\t\t26)\n    (UNSPEC_SETF_EXP             27)\n    (UNSPEC_FR_SQRT_RECIP_APPROX 28)\n+   (UNSPEC_SHRP\t\t\t29)\n   ])\n \n (define_constants\n@@ -335,6 +336,11 @@\n        (and (match_code \"const_int\")\n \t    (match_test \"CONST_OK_FOR_J (INTVAL (op))\"))))\n \n+;; True if OP is a 7 bit immediate operand.\n+(define_predicate \"dshift_count_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"INTVAL (op) >= 0 && INTVAL (op) < 128\")))\n+\n ;; True if OP is a 6 bit immediate operand.\n (define_predicate \"shift_count_operand\"\n   (and (match_code \"const_int\")\n@@ -4654,6 +4660,96 @@\n \f\n ;; ::::::::::::::::::::\n ;; ::\n+;; :: 128 bit Integer Shifts and Rotates\n+;; ::\n+;; ::::::::::::::::::::\n+\n+(define_expand \"ashrti3\"\n+  [(set (match_operand:TI 0 \"gr_register_operand\" \"\")\n+\t(ashiftrt:TI (match_operand:TI 1 \"gr_register_operand\" \"\")\n+\t\t     (match_operand:DI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+{\n+  if (!dshift_count_operand (operands[2], DImode))\n+    FAIL;\n+})\n+\n+(define_insn_and_split \"*ashrti3_internal\"\n+  [(set (match_operand:TI 0 \"gr_register_operand\" \"=r\")\n+\t(ashiftrt:TI (match_operand:TI 1 \"gr_register_operand\" \"r\")\n+\t\t     (match_operand:DI 2 \"dshift_count_operand\" \"n\")))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+{\n+  HOST_WIDE_INT shift = INTVAL (operands[2]);\n+  rtx lo = gen_lowpart (DImode, operands[1]);\n+  rtx hi = gen_highpart (DImode, operands[1]);\n+  rtx shiftlo = GEN_INT (shift & 63);\n+\n+  if (shift & 64)\n+    {\n+      emit_insn (gen_ashrdi3 (lo, hi, shiftlo));\n+      emit_insn (gen_ashrdi3 (hi, hi, GEN_INT (63)));\n+    }\n+  else\n+    {\n+      emit_insn (gen_shrp (lo, hi, lo, shiftlo));\n+      emit_insn (gen_ashrdi3 (hi, hi, shiftlo));\n+    }\n+  DONE;\n+})\n+\n+(define_expand \"lshrti3\"\n+  [(set (match_operand:TI 0 \"gr_register_operand\" \"\")\n+        (lshiftrt:TI (match_operand:TI 1 \"gr_register_operand\" \"\")\n+                     (match_operand:DI 2 \"nonmemory_operand\" \"\")))]\n+  \"\"\n+{ \n+  if (!dshift_count_operand (operands[2], DImode))\n+    FAIL;\n+}) \n+\n+(define_insn_and_split \"*lshrti3_internal\"\n+  [(set (match_operand:TI 0 \"gr_register_operand\" \"=r\")\n+\t(lshiftrt:TI (match_operand:TI 1 \"gr_register_operand\" \"r\")\n+\t\t     (match_operand:DI 2 \"dshift_count_operand\" \"n\")))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(const_int 0)]\n+{\n+  HOST_WIDE_INT shift = INTVAL (operands[2]);\n+  rtx lo = gen_lowpart (DImode, operands[1]);\n+  rtx hi = gen_highpart (DImode, operands[1]);\n+  rtx shiftlo = GEN_INT (shift & 63);\n+\n+  if (shift & 64)\n+    {\n+      emit_insn (gen_lshrdi3 (lo, hi, shiftlo));\n+      emit_move_insn (hi, const0_rtx);\n+    }\n+  else\n+    {\n+      emit_insn (gen_shrp (lo, hi, lo, shiftlo));\n+      emit_insn (gen_lshrdi3 (hi, hi, shiftlo));\n+    }\n+  DONE;\n+})\n+\n+(define_insn \"shrp\"\n+  [(set (match_operand:DI 0 \"gr_register_operand\" \"=r\")\n+\t(unspec:DI [(match_operand:DI 1 \"gr_register_operand\" \"r\")\n+\t\t    (match_operand:DI 2 \"gr_register_operand\" \"r\")\n+\t\t    (match_operand:DI 3 \"shift_count_operand\" \"M\")]\n+\t\t   UNSPEC_SHRP))]\n+  \"\"\n+  \"shrp %0 = %1, %2, %3\"\n+  [(set_attr \"itanium_class\" \"ishf\")])\n+\f\n+;; ::::::::::::::::::::\n+;; ::\n ;; :: 32 bit Integer Logical operations\n ;; ::\n ;; ::::::::::::::::::::"}]}