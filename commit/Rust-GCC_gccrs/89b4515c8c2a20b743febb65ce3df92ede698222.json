{"sha": "89b4515c8c2a20b743febb65ce3df92ede698222", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODliNDUxNWM4YzJhMjBiNzQzZmViYjY1Y2UzZGY5MmVkZTY5ODIyMg==", "commit": {"author": {"name": "Alex Velenko", "email": "Alex.Velenko@arm.com", "date": "2014-01-23T14:46:31Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-01-23T14:46:31Z"}, "message": "[AArch64_BE 1/4] Big-Endian lane numbering fix\n\n[gcc/]\n2014-01-23  Alex Velenko  <Alex.Velenko@arm.com>\n\n\t* config/aarch64/aarch64-simd.md (aarch64_be_ld1<mode>):\n\tNew define_insn.\n\t(aarch64_be_st1<mode>): Likewise.\n\t(aarch_ld1<VALL:mode>): Define_expand modified.\n\t(aarch_st1<VALL:mode>): Likewise.\n\t* config/aarch64/aarch64.md (UNSPEC_LD1): New unspec definition.\n\t(UNSPEC_ST1): Likewise.\n\n[gcc/testsuite/]\n2014-01-23  Alex Velenko  <Alex.Velenko@arm.com>\n\n\t* gcc.target/aarch64/vld1-vst1_1.c: New test_case.\n\nFrom-SVN: r206968", "tree": {"sha": "99f2af343ccb2a58e398cb739261d67a829469a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/99f2af343ccb2a58e398cb739261d67a829469a5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/89b4515c8c2a20b743febb65ce3df92ede698222", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b4515c8c2a20b743febb65ce3df92ede698222", "html_url": "https://github.com/Rust-GCC/gccrs/commit/89b4515c8c2a20b743febb65ce3df92ede698222", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/89b4515c8c2a20b743febb65ce3df92ede698222/comments", "author": null, "committer": null, "parents": [{"sha": "f3eeb82c28c0028b2151ea8ac7ab8f1170b66304", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3eeb82c28c0028b2151ea8ac7ab8f1170b66304", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3eeb82c28c0028b2151ea8ac7ab8f1170b66304"}], "stats": {"total": 98, "additions": 96, "deletions": 2}, "files": [{"sha": "28e41625f04303e284028d9f898d396ffd18f6d7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b4515c8c2a20b743febb65ce3df92ede698222/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b4515c8c2a20b743febb65ce3df92ede698222/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=89b4515c8c2a20b743febb65ce3df92ede698222", "patch": "@@ -1,3 +1,13 @@\n+2014-01-23  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* config/aarch64/aarch64-simd.md (aarch64_be_ld1<mode>):\n+\tNew define_insn.\n+\t(aarch64_be_st1<mode>): Likewise.\n+\t(aarch_ld1<VALL:mode>): Define_expand modified.\n+\t(aarch_st1<VALL:mode>): Likewise.\n+\t* config/aarch64/aarch64.md (UNSPEC_LD1): New unspec definition.\n+\t(UNSPEC_ST1): Likewise.\n+\n 2014-01-23  David Holsgrove <david.holsgrove@xilinx.com>\n \n \t* config/microblaze/microblaze.md: Add trap insn and attribute"}, {"sha": "1454a7e11eab75abd5fc04bd84a2dce4271e952e", "filename": "gcc/config/aarch64/aarch64-simd.md", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b4515c8c2a20b743febb65ce3df92ede698222/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b4515c8c2a20b743febb65ce3df92ede698222/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64-simd.md?ref=89b4515c8c2a20b743febb65ce3df92ede698222", "patch": "@@ -3544,6 +3544,24 @@\n    (set (attr \"length\") (symbol_ref \"aarch64_simd_attr_length_move (insn)\"))]\n )\n \n+(define_insn \"aarch64_be_ld1<mode>\"\n+  [(set (match_operand:VALLDI 0\t\"register_operand\" \"=w\")\n+\t(unspec:VALLDI [(match_operand:VALLDI 1 \"aarch64_simd_struct_operand\" \"Utv\")]\n+\tUNSPEC_LD1))]\n+  \"TARGET_SIMD\"\n+  \"ld1\\\\t{%0<Vmtype>}, %1\"\n+  [(set_attr \"type\" \"neon_load1_1reg<q>\")]\n+)\n+\n+(define_insn \"aarch64_be_st1<mode>\"\n+  [(set (match_operand:VALLDI 0 \"aarch64_simd_struct_operand\" \"=Utv\")\n+\t(unspec:VALLDI [(match_operand:VALLDI 1 \"register_operand\" \"w\")]\n+\tUNSPEC_ST1))]\n+  \"TARGET_SIMD\"\n+  \"st1\\\\t{%1<Vmtype>}, %0\"\n+  [(set_attr \"type\" \"neon_store1_1reg<q>\")]\n+)\n+\n (define_split\n   [(set (match_operand:OI 0 \"register_operand\" \"\")\n \t(match_operand:OI 1 \"register_operand\" \"\"))]\n@@ -3762,7 +3780,11 @@\n {\n   enum machine_mode mode = <VALL:MODE>mode;\n   rtx mem = gen_rtx_MEM (mode, operands[1]);\n-  emit_move_insn (operands[0], mem);\n+\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_aarch64_be_ld1<VALL:mode> (operands[0], mem));\n+  else\n+    emit_move_insn (operands[0], mem);\n   DONE;\n })\n \n@@ -3988,7 +4010,11 @@\n {\n   enum machine_mode mode = <VALL:MODE>mode;\n   rtx mem = gen_rtx_MEM (mode, operands[0]);\n-  emit_move_insn (mem, operands[1]);\n+\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_aarch64_be_st1<VALL:mode> (mem, operands[1]));\n+  else\n+    emit_move_insn (mem, operands[1]);\n   DONE;\n })\n "}, {"sha": "8657b168582248530392afdbf5e1925e9b556932", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b4515c8c2a20b743febb65ce3df92ede698222/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b4515c8c2a20b743febb65ce3df92ede698222/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=89b4515c8c2a20b743febb65ce3df92ede698222", "patch": "@@ -81,6 +81,7 @@\n     UNSPEC_GOTSMALLPIC\n     UNSPEC_GOTSMALLTLS\n     UNSPEC_GOTTINYPIC\n+    UNSPEC_LD1\n     UNSPEC_LD2\n     UNSPEC_LD3\n     UNSPEC_LD4\n@@ -92,6 +93,7 @@\n     UNSPEC_SISD_SSHL\n     UNSPEC_SISD_USHL\n     UNSPEC_SSHL_2S\n+    UNSPEC_ST1\n     UNSPEC_ST2\n     UNSPEC_ST3\n     UNSPEC_ST4"}, {"sha": "d45d3dd45dbef27c6403a907a4dbf10b2c0d2fed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b4515c8c2a20b743febb65ce3df92ede698222/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b4515c8c2a20b743febb65ce3df92ede698222/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=89b4515c8c2a20b743febb65ce3df92ede698222", "patch": "@@ -1,3 +1,7 @@\n+2014-01-23  Alex Velenko  <Alex.Velenko@arm.com>\n+\n+\t* gcc.target/aarch64/vld1-vst1_1.c: New test_case.\n+\n 2014-01-23  David Holsgrove <david.holsgrove@xilinx.com>\n \n \t* gcc.target/microblaze/others/builtin-trap.c: New test,"}, {"sha": "d1834a264708fe6ab901ac1a27544ca8ebb815cc", "filename": "gcc/testsuite/gcc.target/aarch64/vld1-vst1_1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/89b4515c8c2a20b743febb65ce3df92ede698222/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvld1-vst1_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/89b4515c8c2a20b743febb65ce3df92ede698222/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvld1-vst1_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fvld1-vst1_1.c?ref=89b4515c8c2a20b743febb65ce3df92ede698222", "patch": "@@ -0,0 +1,52 @@\n+/* Test vld1 and vst1 maintain consistent indexing.  */\n+/* { dg-do run } */\n+/* { dg-options \"-O3\" } */\n+#include <arm_neon.h>\n+\n+extern void abort (void);\n+\n+int __attribute__ ((noinline))\n+test_vld1_vst1 ()\n+{\n+  int8x8_t a;\n+  int8x8_t b;\n+  int i = 0;\n+  int8_t c[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };\n+  int8_t d[8];\n+  a = vld1_s8 (c);\n+  asm volatile (\"\":::\"memory\");\n+  vst1_s8 (d, a);\n+  asm volatile (\"\":::\"memory\");\n+  for (; i < 8; i++)\n+    if (c[i] != d[i])\n+      return 1;\n+  return 0;\n+}\n+\n+int __attribute__ ((noinline))\n+test_vld1q_vst1q ()\n+{\n+  int16x8_t a;\n+  int16x8_t b;\n+  int i = 0;\n+  int16_t c[8] = { 0, 1, 2, 3, 4, 5, 6, 7 };\n+  int16_t d[8];\n+  a = vld1q_s16 (c);\n+  asm volatile (\"\":::\"memory\");\n+  vst1q_s16 (d, a);\n+  asm volatile (\"\":::\"memory\");\n+  for (; i < 8; i++)\n+    if (c[i] != d[i])\n+      return 1;\n+  return 0;\n+}\n+\n+int\n+main ()\n+{\n+  if (test_vld1_vst1 ())\n+    abort ();\n+  if (test_vld1q_vst1q ())\n+    abort ();\n+  return 0;\n+}"}]}