{"sha": "bcf51da29c8c946e51084946a2307a36a1198529", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmNmNTFkYTI5YzhjOTQ2ZTUxMDg0OTQ2YTIzMDdhMzZhMTE5ODUyOQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-12-16T05:55:45Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-12-16T05:55:45Z"}, "message": "* parser.c, pt.c: Fix comment typos.\n\nFrom-SVN: r108625", "tree": {"sha": "1407c01a6db2cdb005196f2de0c1ac5e8805f76b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1407c01a6db2cdb005196f2de0c1ac5e8805f76b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bcf51da29c8c946e51084946a2307a36a1198529", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf51da29c8c946e51084946a2307a36a1198529", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bcf51da29c8c946e51084946a2307a36a1198529", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bcf51da29c8c946e51084946a2307a36a1198529/comments", "author": null, "committer": null, "parents": [{"sha": "8a6c4339182e5148b15d865234dc5e29733c2441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8a6c4339182e5148b15d865234dc5e29733c2441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8a6c4339182e5148b15d865234dc5e29733c2441"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "55a7b0b8d82c723ecc27bc868810ff5d017bcee4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf51da29c8c946e51084946a2307a36a1198529/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf51da29c8c946e51084946a2307a36a1198529/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bcf51da29c8c946e51084946a2307a36a1198529", "patch": "@@ -1,3 +1,7 @@\n+2005-12-16  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* parser.c, pt.c: Fix comment typos.\n+\n 2005-12-13  Petr Machata  <machata@post.cz>\n \n \tPR c++/24907"}, {"sha": "3079faa6b9429234f5998d4d4f69911703f8a70a", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf51da29c8c946e51084946a2307a36a1198529/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf51da29c8c946e51084946a2307a36a1198529/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=bcf51da29c8c946e51084946a2307a36a1198529", "patch": "@@ -2735,7 +2735,7 @@ cp_parser_translation_unit (cp_parser* parser)\n    ADDRESS_P is true iff this expression was immediately preceded by\n    \"&\" and therefore might denote a pointer-to-member.  CAST_P is true\n    iff this expression is the target of a cast.  TEMPLATE_ARG_P is\n-   true iff this expression is a tempalte argument.\n+   true iff this expression is a template argument.\n \n    Returns a representation of the expression.  Upon return, *IDK\n    indicates what kind of id-expression (if any) was present.  */\n@@ -14521,7 +14521,7 @@ cp_parser_label_declaration (cp_parser* parser)\n    types.\n \n    If AMBIGUOUS_DECLS is non-NULL, *AMBIGUOUS_DECLS is set to a\n-   TREE_LIST of candiates if name-lookup results in an ambiguity, and\n+   TREE_LIST of candidates if name-lookup results in an ambiguity, and\n    NULL_TREE otherwise.  */ \n \n static tree"}, {"sha": "9e610bf047c1ef9fe0bab33e51527b44f43c5569", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bcf51da29c8c946e51084946a2307a36a1198529/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bcf51da29c8c946e51084946a2307a36a1198529/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bcf51da29c8c946e51084946a2307a36a1198529", "patch": "@@ -1194,7 +1194,7 @@ register_specialization (tree spec, tree tmpl, tree args, bool is_friend)\n \n   \t           An explicit specialization of a function template\n \t\t   is inline only if it is explicitly declared to be,\n-\t\t   and independently of whether its function tempalte\n+\t\t   and independently of whether its function template\n \t\t   is.\n \n \t\tto the primary function; now copy the inline bits to"}]}