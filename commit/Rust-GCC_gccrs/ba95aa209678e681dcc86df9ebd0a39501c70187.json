{"sha": "ba95aa209678e681dcc86df9ebd0a39501c70187", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmE5NWFhMjA5Njc4ZTY4MWRjYzg2ZGY5ZWJkMGEzOTUwMWM3MDE4Nw==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2018-02-13T22:12:55Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2018-02-13T22:12:55Z"}, "message": "combine: Update links correctly for new I2 (PR84169)\n\nIf there is a LOG_LINK between two insns, this means those two insns\ncan be combined, as far as dataflow is concerned.  There never should\nbe a LOG_LINK between two unrelated insns.  If there is one, combine\nwill try to combine the insns without doing all the needed checks if\nthe earlier destination is used before the later insn, etc.\n\nUnfortunately we do not update the LOG_LINKs correctly in some cases.\nThis patch fixes at least some of those cases.\n\n\n\tPR rtl-optimization/84169\n\t* combine.c (try_combine): New variable split_i2i3.  Set it to true if\n\twe generated a parallel as new i3 and we split that to new i2 and i3\n\tinstructions.  Handle split_i2i3 similar to swap_i2i3: scan the\n\tLOG_LINKs of i3 to see which of those need to link to i2 now.  Link\n\tthose to i2, not i1.  Partially rewrite this scan code.\n\ngcc/testsuite/\n\tPR rtl-optimization/84169\n\t* gcc.c-torture/execute/pr84169.c: New.\n\nFrom-SVN: r257644", "tree": {"sha": "9d2833672a93b6995ce058c172305d5c25c9e9c5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9d2833672a93b6995ce058c172305d5c25c9e9c5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba95aa209678e681dcc86df9ebd0a39501c70187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba95aa209678e681dcc86df9ebd0a39501c70187", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba95aa209678e681dcc86df9ebd0a39501c70187", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba95aa209678e681dcc86df9ebd0a39501c70187/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b7a6b85f8a3d6845ad99a3291b13bff6f788110c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b7a6b85f8a3d6845ad99a3291b13bff6f788110c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b7a6b85f8a3d6845ad99a3291b13bff6f788110c"}], "stats": {"total": 96, "additions": 70, "deletions": 26}, "files": [{"sha": "ac283a63a9ebcc83b9673039e9a29dfc3a9cb0aa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba95aa209678e681dcc86df9ebd0a39501c70187/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba95aa209678e681dcc86df9ebd0a39501c70187/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ba95aa209678e681dcc86df9ebd0a39501c70187", "patch": "@@ -1,3 +1,12 @@\n+2018-02-13  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/84169\n+\t* combine.c (try_combine): New variable split_i2i3.  Set it to true if\n+\twe generated a parallel as new i3 and we split that to new i2 and i3\n+\tinstructions.  Handle split_i2i3 similar to swap_i2i3: scan the\n+\tLOG_LINKs of i3 to see which of those need to link to i2 now.  Link\n+\tthose to i2, not i1.  Partially rewrite this scan code.\n+\n 2018-02-13  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR c/82210"}, {"sha": "c4d55eb85a4fc638b760ecd441681223650ec079", "filename": "gcc/combine.c", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba95aa209678e681dcc86df9ebd0a39501c70187/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba95aa209678e681dcc86df9ebd0a39501c70187/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=ba95aa209678e681dcc86df9ebd0a39501c70187", "patch": "@@ -2665,6 +2665,7 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n   /* Notes that I1, I2 or I3 is a MULT operation.  */\n   int have_mult = 0;\n   int swap_i2i3 = 0;\n+  int split_i2i3 = 0;\n   int changed_i3_dest = 0;\n \n   int maxreg;\n@@ -4091,6 +4092,9 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \t    }\n \n \t  insn_code_number = recog_for_combine (&newpat, i3, &new_i3_notes);\n+\n+\t  if (insn_code_number >= 0)\n+\t    split_i2i3 = 1;\n \t}\n     }\n \n@@ -4258,44 +4262,45 @@ try_combine (rtx_insn *i3, rtx_insn *i2, rtx_insn *i1, rtx_insn *i0,\n \n   if (swap_i2i3)\n     {\n-      rtx_insn *insn;\n-      struct insn_link *link;\n-      rtx ni2dest;\n-\n       /* I3 now uses what used to be its destination and which is now\n \t I2's destination.  This requires us to do a few adjustments.  */\n       PATTERN (i3) = newpat;\n       adjust_for_new_dest (i3);\n+    }\n \n-      /* We need a LOG_LINK from I3 to I2.  But we used to have one,\n-\t so we still will.\n+  if (swap_i2i3 || split_i2i3)\n+    {\n+      /* We might need a LOG_LINK from I3 to I2.  But then we used to\n+\t have one, so we still will.\n \n \t However, some later insn might be using I2's dest and have\n-\t a LOG_LINK pointing at I3.  We must remove this link.\n-\t The simplest way to remove the link is to point it at I1,\n-\t which we know will be a NOTE.  */\n+\t a LOG_LINK pointing at I3.  We should change it to point at\n+\t I2 instead.  */\n \n       /* newi2pat is usually a SET here; however, recog_for_combine might\n \t have added some clobbers.  */\n-      if (GET_CODE (newi2pat) == PARALLEL)\n-\tni2dest = SET_DEST (XVECEXP (newi2pat, 0, 0));\n-      else\n-\tni2dest = SET_DEST (newi2pat);\n-\n-      for (insn = NEXT_INSN (i3);\n-\t   insn && (this_basic_block->next_bb == EXIT_BLOCK_PTR_FOR_FN (cfun)\n-\t\t    || insn != BB_HEAD (this_basic_block->next_bb));\n+      rtx x = newi2pat;\n+      if (GET_CODE (x) == PARALLEL)\n+\tx = XVECEXP (newi2pat, 0, 0);\n+\n+      unsigned int regno = REGNO (SET_DEST (x));\n+\n+      bool done = false;\n+      for (rtx_insn *insn = NEXT_INSN (i3);\n+\t   !done\n+\t   && insn\n+\t   && NONDEBUG_INSN_P (insn)\n+\t   && BLOCK_FOR_INSN (insn) == this_basic_block;\n \t   insn = NEXT_INSN (insn))\n \t{\n-\t  if (NONDEBUG_INSN_P (insn)\n-\t      && reg_referenced_p (ni2dest, PATTERN (insn)))\n-\t    {\n-\t      FOR_EACH_LOG_LINK (link, insn)\n-\t\tif (link->insn == i3)\n-\t\t  link->insn = i1;\n-\n-\t      break;\n-\t    }\n+\t  struct insn_link *link;\n+\t  FOR_EACH_LOG_LINK (link, insn)\n+\t    if (link->insn == i3 && link->regno == regno)\n+\t      {\n+\t\tlink->insn = i2;\n+\t\tdone = true;\n+\t\tbreak;\n+\t      }\n \t}\n     }\n "}, {"sha": "034931bad9b40c71f6df9437fe9941cb11087998", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba95aa209678e681dcc86df9ebd0a39501c70187/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba95aa209678e681dcc86df9ebd0a39501c70187/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ba95aa209678e681dcc86df9ebd0a39501c70187", "patch": "@@ -1,3 +1,8 @@\n+2018-02-13  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\tPR rtl-optimization/84169\n+\t* gcc.c-torture/execute/pr84169.c: New.\n+\n 2018-02-13  Peter Bergner  <bergner@vnet.ibm.com>\n \n \tPR target/84370"}, {"sha": "ba8f8fc4c05d83a63c2af564762cf86e1687b071", "filename": "gcc/testsuite/gcc.c-torture/execute/pr84169.c", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba95aa209678e681dcc86df9ebd0a39501c70187/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr84169.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba95aa209678e681dcc86df9ebd0a39501c70187/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr84169.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fpr84169.c?ref=ba95aa209678e681dcc86df9ebd0a39501c70187", "patch": "@@ -0,0 +1,25 @@\n+/* PR rtl-optimization/84169 */\n+\n+#ifdef __SIZEOF_INT128__\n+typedef unsigned __int128 T;\n+#else\n+typedef unsigned long long T;\n+#endif\n+\n+T b;\n+\n+static __attribute__ ((noipa)) T\n+foo (T c, T d, T e, T f, T g, T h)\n+{\n+  __builtin_mul_overflow ((unsigned char) h, -16, &h);\n+  return b + h;\n+}\n+\n+int\n+main ()\n+{\n+  T x = foo (0, 0, 0, 0, 0, 4);\n+  if (x != -64)\n+    __builtin_abort ();\n+  return 0;\n+}"}]}