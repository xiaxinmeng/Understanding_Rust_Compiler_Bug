{"sha": "b0d6c7d844902d77bb74033bcaccd18155223d19", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjBkNmM3ZDg0NDkwMmQ3N2JiNzQwMzNiY2FjY2QxODE1NTIyM2QxOQ==", "commit": {"author": {"name": "David Edelsohn", "email": "edelsohn@gnu.org", "date": "2007-08-26T16:32:40Z"}, "committer": {"name": "David Edelsohn", "email": "dje@gcc.gnu.org", "date": "2007-08-26T16:32:40Z"}, "message": "re PR target/33151 (Invalid insn with pre_inc)\n\n\tPR target/33151\n        * config/rs6000/predicates.md (offsettable_mem_operand): Memory\n        operand without auto-inc-dec.\n        * config/rs6000/rs6000.md (floatsidf2_internal): Use\n        offsettable_mem_operand.\n        (floatunssidf2_internal): Same.\n        (fix_truncdfsi2_internal): Same.\n        (floatsidf_ppc64): Same.\n        (floatunssidf_ppc64): Same.\n        (fix_trunctfsi2_internal): Same.\n\nFrom-SVN: r127807", "tree": {"sha": "8e1d662bd27b2a8022a3cb5623f38b8913967807", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e1d662bd27b2a8022a3cb5623f38b8913967807"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b0d6c7d844902d77bb74033bcaccd18155223d19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d6c7d844902d77bb74033bcaccd18155223d19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b0d6c7d844902d77bb74033bcaccd18155223d19", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b0d6c7d844902d77bb74033bcaccd18155223d19/comments", "author": null, "committer": null, "parents": [{"sha": "0aae8c6ba8ca24c1e2a50e4aa14b8f9bfde8dc62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0aae8c6ba8ca24c1e2a50e4aa14b8f9bfde8dc62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0aae8c6ba8ca24c1e2a50e4aa14b8f9bfde8dc62"}], "stats": {"total": 33, "additions": 23, "deletions": 10}, "files": [{"sha": "1b834ba2a2ba90d3dd8cb154df2d74936e19faa9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d6c7d844902d77bb74033bcaccd18155223d19/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d6c7d844902d77bb74033bcaccd18155223d19/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b0d6c7d844902d77bb74033bcaccd18155223d19", "patch": "@@ -1,3 +1,16 @@\n+2007-08-26  David Edelsohn  <edelsohn@gnu.org>\n+\n+\tPR target/33151\n+\t* config/rs6000/predicates.md (offsettable_mem_operand): Memory\n+\toperand without auto-inc-dec.\n+\t* config/rs6000/rs6000.md (floatsidf2_internal): Use\n+\toffsettable_mem_operand.\n+\t(floatunssidf2_internal): Same.\n+\t(fix_truncdfsi2_internal): Same.\n+\t(floatsidf_ppc64): Same.\n+\t(floatunssidf_ppc64): Same.\n+\t(fix_trunctfsi2_internal): Same.\n+\n 2007-08-26  Bernhard Fischer  <aldot@gcc.gnu.org>\n \n \tPR bootstrap/30620"}, {"sha": "f56c176b37c95bc9bcf179cd76ea619062ca15da", "filename": "gcc/config/rs6000/predicates.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d6c7d844902d77bb74033bcaccd18155223d19/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d6c7d844902d77bb74033bcaccd18155223d19/gcc%2Fconfig%2Frs6000%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fpredicates.md?ref=b0d6c7d844902d77bb74033bcaccd18155223d19", "patch": "@@ -349,10 +349,10 @@\n \n ;; Return 1 if the operand is an offsettable memory operand.\n (define_predicate \"offsettable_mem_operand\"\n-  (and (match_code \"mem\")\n-       (match_test \"offsettable_address_p (reload_completed\n-\t\t\t\t\t   || reload_in_progress,\n-\t\t\t\t\t   mode, XEXP (op, 0))\")))\n+  (and (match_operand 0 \"memory_operand\")\n+       (match_test \"GET_CODE (XEXP (op, 0)) != PRE_INC\n+\t\t    && GET_CODE (XEXP (op, 0)) != PRE_DEC\n+\t\t    && GET_CODE (XEXP (op, 0)) != PRE_MODIFY\")))\n \n ;; Return 1 if the operand is a memory operand with an address divisible by 4\n (define_predicate \"word_offset_memref_operand\""}, {"sha": "4bc711282785d58e3ff2f7ac6855ff6c91370a47", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b0d6c7d844902d77bb74033bcaccd18155223d19/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b0d6c7d844902d77bb74033bcaccd18155223d19/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=b0d6c7d844902d77bb74033bcaccd18155223d19", "patch": "@@ -5821,7 +5821,7 @@\n \t(float:DF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n    (use (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n    (use (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))\n-   (clobber (match_operand:DF 4 \"memory_operand\" \"=o\"))\n+   (clobber (match_operand:DF 4 \"offsettable_mem_operand\" \"=o\"))\n    (clobber (match_operand:DF 5 \"gpc_reg_operand\" \"=&f\"))\n    (clobber (match_operand:SI 6 \"gpc_reg_operand\" \"=&r\"))]\n   \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n@@ -5892,7 +5892,7 @@\n \t(unsigned_float:DF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n    (use (match_operand:SI 2 \"gpc_reg_operand\" \"r\"))\n    (use (match_operand:DF 3 \"gpc_reg_operand\" \"f\"))\n-   (clobber (match_operand:DF 4 \"memory_operand\" \"=o\"))\n+   (clobber (match_operand:DF 4 \"offsettable_mem_operand\" \"=o\"))\n    (clobber (match_operand:DF 5 \"gpc_reg_operand\" \"=&f\"))]\n   \"! TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n@@ -5959,7 +5959,7 @@\n   [(set (match_operand:SI 0 \"gpc_reg_operand\" \"=r\")\n \t(fix:SI (match_operand:DF 1 \"gpc_reg_operand\" \"f\")))\n    (clobber (match_operand:DI 2 \"gpc_reg_operand\" \"=f\"))\n-   (clobber (match_operand:DI 3 \"memory_operand\" \"=o\"))]\n+   (clobber (match_operand:DI 3 \"offsettable_mem_operand\" \"=o\"))]\n   \"(TARGET_POWER2 || TARGET_POWERPC) && TARGET_HARD_FLOAT && TARGET_FPRS\"\n   \"#\"\n   \"&& (can_create_pseudo_p () || offsettable_nonstrict_memref_p (operands[3]))\"\n@@ -6112,7 +6112,7 @@\n (define_insn_and_split \"floatsidf_ppc64\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(float:DF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n-   (clobber (match_operand:DI 2 \"memory_operand\" \"=o\"))\n+   (clobber (match_operand:DI 2 \"offsettable_mem_operand\" \"=o\"))\n    (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"=r\"))\n    (clobber (match_operand:DI 4 \"gpc_reg_operand\" \"=f\"))]\n   \"TARGET_POWERPC64 && !TARGET_MFPGPR && TARGET_HARD_FLOAT && TARGET_FPRS\"\n@@ -6127,7 +6127,7 @@\n (define_insn_and_split \"floatunssidf_ppc64\"\n   [(set (match_operand:DF 0 \"gpc_reg_operand\" \"=f\")\n \t(unsigned_float:DF (match_operand:SI 1 \"gpc_reg_operand\" \"r\")))\n-   (clobber (match_operand:DI 2 \"memory_operand\" \"=o\"))\n+   (clobber (match_operand:DI 2 \"offsettable_mem_operand\" \"=o\"))\n    (clobber (match_operand:DI 3 \"gpc_reg_operand\" \"=r\"))\n    (clobber (match_operand:DI 4 \"gpc_reg_operand\" \"=f\"))]\n   \"TARGET_POWERPC64 && TARGET_HARD_FLOAT && TARGET_FPRS\"\n@@ -8800,7 +8800,7 @@\n    (clobber (match_operand:DF 2 \"gpc_reg_operand\" \"=f\"))\n    (clobber (match_operand:DF 3 \"gpc_reg_operand\" \"=&f\"))\n    (clobber (match_operand:DI 4 \"gpc_reg_operand\" \"=f\"))\n-   (clobber (match_operand:DI 5 \"memory_operand\" \"=o\"))]\n+   (clobber (match_operand:DI 5 \"offsettable_mem_operand\" \"=o\"))]\n   \"!TARGET_IEEEQUAD\n    && TARGET_HARD_FLOAT && TARGET_FPRS && TARGET_LONG_DOUBLE_128\"\n   \"#\""}]}