{"sha": "a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTVhMTE1MjU4YWZkNmMwYmRkOGZmNGM4MDcxZGNmZmJhZmI4ODE4Ng==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-13T00:16:35Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2020-11-13T00:16:35Z"}, "message": "Daily bump.", "tree": {"sha": "da67baced2441415f341e32d52bc2fa01cec89b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/da67baced2441415f341e32d52bc2fa01cec89b3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/comments", "author": null, "committer": null, "parents": [{"sha": "de6f64f9556ae39317186f3486135f1ef308a096", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/de6f64f9556ae39317186f3486135f1ef308a096", "html_url": "https://github.com/Rust-GCC/gccrs/commit/de6f64f9556ae39317186f3486135f1ef308a096"}], "stats": {"total": 507, "additions": 506, "deletions": 1}, "files": [{"sha": "a180527b7c21528a7d5cf685894df670fad7de99", "filename": "gcc/ChangeLog", "status": "modified", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "patch": "@@ -1,3 +1,156 @@\n+2020-11-12  Nelson Chu  <nelson.chu@sifive.com>\n+\n+\t* configure: Regenerated.\n+\t* configure.ac: If ifunc was supported in the binutils for\n+\tlinux toolchain, then set enable_gnu_indirect_function to yes.\n+\n+2020-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* doc/cpp.texi (__has_attribute): Document when scopes are allowed\n+\tfor C.\n+\t(__has_c_attribute): New.\n+\n+2020-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* builtin-types.def (BT_FN_PTR_SIZE_SIZE_PTRMODE): New function type.\n+\t* omp-builtins.def (BUILT_IN_GOACC_DECLARE): Move earlier.\n+\t(BUILT_IN_GOMP_ALLOC, BUILT_IN_GOMP_FREE): New builtins.\n+\t* gimplify.c (gimplify_scan_omp_clauses): Force allocator into a\n+\tdecl if it is not NULL, INTEGER_CST or decl.\n+\t(gimplify_adjust_omp_clauses): Clear GOVD_EXPLICIT on explicit clauses\n+\twhich are being removed.  Remove allocate clauses for variables not seen\n+\tif they are private, firstprivate or linear too.  Call\n+\tomp_notice_variable on the allocator otherwise.\n+\t(gimplify_omp_for): Handle iterator vars mentioned in allocate clauses\n+\tsimilarly to non-is_gimple_reg iterators.\n+\t* omp-low.c (struct omp_context): Add allocate_map field.\n+\t(delete_omp_context): Delete it.\n+\t(scan_sharing_clauses): Fill it from allocate clauses.  Remove it\n+\tif mentioned also in shared clause.\n+\t(lower_private_allocate): New function.\n+\t(lower_rec_input_clauses): Handle allocate clause for privatized\n+\tvariables, except for task/taskloop, C/C++ array reductions for now\n+\tand task/inscan variables.\n+\t(lower_send_shared_vars): Don't consider variables in allocate_map\n+\tas shared.\n+\t* omp-expand.c (expand_omp_for_generic, expand_omp_for_static_nochunk,\n+\texpand_omp_for_static_chunk): Use expand_omp_build_assign instead of\n+\tgimple_build_assign + gsi_insert_after.\n+\t* builtins.c (builtin_fnspec): Handle BUILTIN_GOMP_ALLOC and\n+\tBUILTIN_GOMP_FREE.\n+\t* tree-ssa-ccp.c (evaluate_stmt): Handle BUILTIN_GOMP_ALLOC.\n+\t* tree-ssa-dce.c (mark_stmt_if_obviously_necessary): Handle\n+\tBUILTIN_GOMP_ALLOC.\n+\t(mark_all_reaching_defs_necessary_1): Handle BUILTIN_GOMP_ALLOC\n+\tand BUILTIN_GOMP_FREE.\n+\t(propagate_necessity): Likewise.\n+\n+2020-11-12  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* cgraphclones.c (cgraph_node::materialize_clone): Check that clone\n+\tinfo is not NULL before attempting to dump it.\n+\n+2020-11-12  Martin Jambor  <mjambor@suse.cz>\n+\n+\t* ipa-cp.c (class ipcp_value_base): Change the type of\n+\tlocal_time_benefit and prop_time_benefit to sreal.  Adjust the\n+\tconstructor initializer.\n+\t(ipcp_lattice::print): Dump sreals.\n+\t(struct caller_statistics): Change the type of freq_sum to sreal.\n+\t(gather_caller_stats): Work with sreal freq_sum.\n+\t(incorporate_penalties): Work with sreal evaluation.\n+\t(good_cloning_opportunity_p): Adjusted for sreal sreal time_benefit\n+\tand freq_sum.  Bail out if size_cost is INT_MAX.\n+\t(perform_estimation_of_a_value): Work with sreal time_benefit.  Avoid\n+\tunnecessary capping.\n+\t(estimate_local_effects): Pass sreal time benefit to\n+\tgood_cloning_opportunity_p without capping it.  Adjust dumping.\n+\t(safe_add): If there can be overflow, return INT_MAX.\n+\t(propagate_effects): Work with sreal times.\n+\t(get_info_about_necessary_edges): Work with sreal frequencies.\n+\t(decide_about_value): Likewise and with sreal time benefits.\n+\n+2020-11-12  Marek Polacek  <polacek@redhat.com>\n+\n+\t* system.h (WARN_UNUSED_RESULT): Define for GCC >= 3.4.\n+\t* tree.h (maybe_wrap_with_location): Add WARN_UNUSED_RESULT.\n+\n+2020-11-12  Jan Hubicka  <jh@suse.cz>\n+\n+\t* fold-const.c (operand_compare::operand_equal_p): Compare field\n+\toffsets in operand_equal_p and OEP_ADDRESS_OF.\n+\t(operand_compare::hash_operand): Update.\n+\n+2020-11-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* bitmap.c (bitmap_list_view): Restore head->current.\n+\t* tree-ssa-pre.c (pre_expr_DFS): Elide expr_visited bitmap.\n+\tSpecial-case value expression bitmaps with one element.\n+\t(bitmap_find_leader): Likewise.\n+\t(sorted_array_from_bitmap_set): Elide expr_visited bitmap.\n+\n+2020-11-12  Jan Hubicka  <jh@suse.cz>\n+\n+\t* attr-fnspec.h: Update topleve comment.\n+\t(attr_fnspec::arg_direct_p): Accept 1...9.\n+\t(attr_fnspec::arg_maybe_written_p): Reject 1...9.\n+\t(attr_fnspec::arg_copied_to_arg_p): New member function.\n+\t* builtins.c (builtin_fnspec): Update fnspec of block copy.\n+\t* tree-ssa-alias.c (attr_fnspec::verify): Update.\n+\n+2020-11-12  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-pre.c (bitmap_value_replace_in_set): Return\n+\twhether we have changed anything.\n+\t(do_pre_regular_insertion): Get topologically sorted array\n+\tof expressions from caller.\n+\t(do_pre_partial_partial_insertion): Likewise.\n+\t(insert): Compute topologically sorted arrays of expressions\n+\there and locally iterate actual insertion.  Iterate only\n+\twhen AVAIL_OUT of an already visited block source changed.\n+\n+2020-11-12  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/97730\n+\t* config/aarch64/aarch64-sve2.md (@aarch64_sve2_bcax<mode>):\n+\tChange to define_expand, add missing (trivially-predicated) not\n+\trtx to fix wrong code bug.\n+\t(*aarch64_sve2_bcax<mode>): New.\n+\n+2020-11-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97806\n+\t* tree-ssa-pre.c (pre_expr_DFS): New overload for visiting\n+\tvalues, visiting all leaders for a value.  Use a bitmap\n+\tfor visited values.\n+\t(sorted_array_from_bitmap_set): Walk over values and adjust.\n+\n+2020-11-12  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\tPR target/97326\n+\t* config/s390/vector.md: Support vector floating point modes in\n+\tvec_cmp.\n+\n+2020-11-12  Andreas Krebbel  <krebbel@linux.ibm.com>\n+\n+\t* config/s390/vector.md: Rename tointvec to TOINTVEC.\n+\t* config/s390/vx-builtins.md: Likewise.\n+\n+2020-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR debug/97060\n+\t* dwarf2out.c (gen_subprogram_die): It's a declaration\n+\tif DECL_INITIAL isn't set.\n+\n+2020-11-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/97424\n+\t* doc/invoke.texi (Static Analyzer Options): Add\n+\t-Wno-analyzer-shift-count-negative and\n+\t-Wno-analyzer-shift-count-overflow.\n+\t(-Wno-analyzer-shift-count-negative): New.\n+\t(-Wno-analyzer-shift-count-overflow): New.\n+\n 2020-11-11  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* config/darwin-protos.h (darwin_make_eh_symbol_indirect): New."}, {"sha": "b84a76f5a25c183268576475e91e7c040d3a7ea5", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "patch": "@@ -1 +1 @@\n-20201112\n+20201113"}, {"sha": "f0dd2708d1ff676226ccadd6a3419a27c8b78bcf", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "patch": "@@ -1,3 +1,38 @@\n+2020-11-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* checker-path.h (checker_event::get_id_ptr): New.\n+\t* diagnostic-manager.cc (path_builder::path_builder): Add \"sd\"\n+\tparam and use it to initialize new field \"m_sd\".\n+\t(path_builder::get_pending_diagnostic): New.\n+\t(path_builder::m_sd): New field.\n+\t(diagnostic_manager::emit_saved_diagnostic): Pass sd to\n+\tpath_builder ctor.\n+\t(diagnostic_manager::add_events_for_superedge): Call new\n+\tmaybe_add_custom_events_for_superedge vfunc.\n+\t* engine.cc (stale_jmp_buf::stale_jmp_buf): Add \"setjmp_point\"\n+\tparam and use it to initialize new field \"m_setjmp_point\".\n+\tInitialize new field \"m_stack_pop_event\".\n+\t(stale_jmp_buf::maybe_add_custom_events_for_superedge): New vfunc\n+\timplementation.\n+\t(stale_jmp_buf::describe_final_event): New vfunc implementation.\n+\t(stale_jmp_buf::m_setjmp_point): New field.\n+\t(stale_jmp_buf::m_stack_pop_event): New field.\n+\t(exploded_node::on_longjmp): Pass setjmp_point to stale_jmp_buf\n+\tctor.\n+\t* pending-diagnostic.h\n+\t(pending_diagnostic::maybe_add_custom_events_for_superedge): New\n+\tvfunc.\n+\n+2020-11-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/97424\n+\t* analyzer.opt (Wanalyzer-shift-count-negative): New.\n+\t(Wanalyzer-shift-count-overflow): New.\n+\t* region-model.cc (class shift_count_negative_diagnostic): New.\n+\t(class shift_count_overflow_diagnostic): New.\n+\t(region_model::get_gassign_result): Complain about shift counts that\n+\tare negative or are >= the operand's type's width.\n+\n 2020-11-10  Martin Liska  <mliska@suse.cz>\n \n \t* constraint-manager.cc (constraint_manager::merge): Remove"}, {"sha": "5761942c0b809ca61420926dba727c1693924f99", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "patch": "@@ -1,3 +1,17 @@\n+2020-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* c-lex.c (c_common_has_attribute): Take argument std_syntax.\n+\tAllow scope for C.  Handle standard attributes for C.  Do not\n+\taccept unscoped attributes if std_syntax and not handled as\n+\tstandard attributes.\n+\t* c-common.h (c_common_has_attribute): Update prototype.\n+\n+2020-11-12  Nicholas Guriev  <guriev-ns@ya.ru>\n+\n+\tPR pch/86674\n+\t* c-pch.c (c_common_valid_pch): Use cpp_warning with CPP_W_INVALID_PCH\n+\treason to fix -Werror=invalid-pch and -Wno-error=invalid-pch switches.\n+\n 2020-11-11  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/88115"}, {"sha": "f514ceb7cc4786a530c93efda27a5f7662798afd", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "patch": "@@ -1,3 +1,15 @@\n+2020-11-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* semantics.c (finish_compound_literal): Don't wrap the original\n+\tcompound literal in a TARGET_EXPR when inside a template.\n+\n+2020-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97790\n+\t* constexpr.c (cxx_eval_constant_expression) <case CLEANUP_POINT_EXPR,\n+\tcase TRY_FINALLY_EXPR, case CLEANUP_STMT>: Don't pass jump_target to\n+\tcxx_eval_constant_expression when evaluating the cleanups.\n+\n 2020-11-11  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* parser.c (cp_parser_declaration): Unless we are compiling for"}, {"sha": "91b519dde94042ebe67a52798a7fde13c0950c6f", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "patch": "@@ -1,3 +1,24 @@\n+2020-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* f95-lang.c (ATTR_ALLOC_WARN_UNUSED_RESULT_SIZE_2_NOTHROW_LIST):\n+\tDefine.\n+\t(gfc_init_builtin_functions): Add alloc_size and warn_unused_result\n+\tattributes to __builtin_GOMP_alloc.\n+\t* types.def (BT_PTRMODE): New primitive type.\n+\t(BT_FN_VOID_PTR_PTRMODE, BT_FN_PTR_SIZE_SIZE_PTRMODE): New function\n+\ttypes.\n+\n+2020-11-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/97782\n+\t* trans-openmp.c (gfc_trans_oacc_construct, gfc_trans_omp_parallel_do,\n+\tgfc_trans_omp_parallel_do_simd, gfc_trans_omp_parallel_sections,\n+\tgfc_trans_omp_parallel_workshare, gfc_trans_omp_sections\n+\tgfc_trans_omp_single, gfc_trans_omp_task, gfc_trans_omp_teams\n+\tgfc_trans_omp_target, gfc_trans_omp_target_data,\n+\tgfc_trans_omp_workshare): Use code->loc instead of input_location\n+\twhen building the OMP_/OACC_ construct.\n+\n 2020-11-11  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR fortran/97768"}, {"sha": "e45b4e39ffec893c76fd0b953d2cc643b83daa06", "filename": "gcc/jit/ChangeLog", "status": "modified", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2Fjit%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2Fjit%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjit%2FChangeLog?ref=a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "patch": "@@ -1,3 +1,135 @@\n+2020-11-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/87291\n+\t* docs/cp/topics/asm.rst: New file.\n+\t* docs/cp/topics/index.rst (Topic Reference): Add it.\n+\t* docs/topics/asm.rst: New file.\n+\t* docs/topics/compatibility.rst (LIBGCCJIT_ABI_15): New.\n+\t* docs/topics/functions.rst (Statements): Add link to extended\n+\tasm.\n+\t* docs/topics/index.rst (Topic Reference): Add asm.rst.\n+\t* docs/topics/objects.rst: Add gcc_jit_extended_asm to ASCII art.\n+\t* docs/_build/texinfo/Makefile: Regenerate.\n+\t* docs/_build/texinfo/libgccjit.texi: Regenerate.\n+\t* jit-common.h (gcc::jit::recording::extended_asm): New forward\n+\tdecl.\n+\t(gcc::jit::recording::top_level_asm): Likewise.\n+\t* jit-playback.c: Include \"stmt.h\".\n+\t(build_string): New.\n+\t(gcc::jit::playback::context::new_string_literal): Disambiguate\n+\tbuild_string call.\n+\t(gcc::jit::playback::context::add_top_level_asm): New.\n+\t(build_operand_chain): New.\n+\t(build_clobbers): New.\n+\t(build_goto_operands): New.\n+\t(gcc::jit::playback::block::add_extended_asm): New.\n+\t* jit-playback.h (gcc::jit::playback::context::add_top_level_asm):\n+\tNew decl.\n+\t(struct gcc::jit::playback::asm_operand): New struct.\n+\t(gcc::jit::playback::block::add_extended_asm): New decl.\n+\t* jit-recording.c (gcc::jit::recording::context::dump_to_file):\n+\tDump top-level asms.\n+\t(gcc::jit::recording::context::add_top_level_asm): New.\n+\t(gcc::jit::recording::block::add_extended_asm): New.\n+\t(gcc::jit::recording::block::end_with_extended_asm_goto): New.\n+\t(gcc::jit::recording::asm_operand::asm_operand): New.\n+\t(gcc::jit::recording::asm_operand::print): New.\n+\t(gcc::jit::recording::asm_operand::make_debug_string): New.\n+\t(gcc::jit::recording::output_asm_operand::write_reproducer): New.\n+\t(gcc::jit::recording::output_asm_operand::print): New.\n+\t(gcc::jit::recording::input_asm_operand::write_reproducer): New.\n+\t(gcc::jit::recording::input_asm_operand::print): New.\n+\t(gcc::jit::recording::extended_asm::add_output_operand): New.\n+\t(gcc::jit::recording::extended_asm::add_input_operand): New.\n+\t(gcc::jit::recording::extended_asm::add_clobber): New.\n+\t(gcc::jit::recording::extended_asm::replay_into): New.\n+\t(gcc::jit::recording::extended_asm::make_debug_string): New.\n+\t(gcc::jit::recording::extended_asm::write_flags): New.\n+\t(gcc::jit::recording::extended_asm::write_clobbers): New.\n+\t(gcc::jit::recording::extended_asm_simple::write_reproducer): New.\n+\t(gcc::jit::recording::extended_asm::maybe_populate_playback_blocks):\n+\tNew.\n+\t(gcc::jit::recording::extended_asm_goto::extended_asm_goto): New.\n+\t(gcc::jit::recording::extended_asm_goto::replay_into): New.\n+\t(gcc::jit::recording::extended_asm_goto::write_reproducer): New.\n+\t(gcc::jit::recording::extended_asm_goto::get_successor_blocks):\n+\tNew.\n+\t(gcc::jit::recording::extended_asm_goto::maybe_print_gotos): New.\n+\t(gcc::jit::recording::extended_asm_goto::maybe_populate_playback_blocks):\n+\tNew.\n+\t(gcc::jit::recording::top_level_asm::top_level_asm): New.\n+\t(gcc::jit::recording::top_level_asm::replay_into): New.\n+\t(gcc::jit::recording::top_level_asm::make_debug_string): New.\n+\t(gcc::jit::recording::top_level_asm::write_to_dump): New.\n+\t(gcc::jit::recording::top_level_asm::write_reproducer): New.\n+\t* jit-recording.h\n+\t(gcc::jit::recording::context::add_top_level_asm): New decl.\n+\t(gcc::jit::recording::context::m_top_level_asms): New field.\n+\t(gcc::jit::recording::block::add_extended_asm): New decl.\n+\t(gcc::jit::recording::block::end_with_extended_asm_goto): New\n+\tdecl.\n+\t(gcc::jit::recording::asm_operand): New class.\n+\t(gcc::jit::recording::output_asm_operand): New class.\n+\t(gcc::jit::recording::input_asm_operand): New class.\n+\t(gcc::jit::recording::extended_asm): New class.\n+\t(gcc::jit::recording::extended_asm_simple): New class.\n+\t(gcc::jit::recording::extended_asm_goto): New class.\n+\t(gcc::jit::recording::top_level_asm): New class.\n+\t* libgccjit++.h (gccjit::extended_asm): New forward decl.\n+\t(gccjit::context::add_top_level_asm): New.\n+\t(gccjit::block::add_extended_asm): New.\n+\t(gccjit::block::end_with_extended_asm_goto): New.\n+\t(gccjit::extended_asm): New class.\n+\t(gccjit::extended_asm::extended_asm): New ctors.\n+\t(gccjit::extended_asm::set_volatile_flag): New.\n+\t(gccjit::extended_asm::set_inline_flag): New.\n+\t(gccjit::extended_asm::add_output_operand): New.\n+\t(gccjit::extended_asm::add_input_operand): New.\n+\t(gccjit::extended_asm::add_clobber): New.\n+\t(gccjit::extended_asm::get_inner_extended_asm): New.\n+\t* libgccjit.c (struct gcc_jit_extended_asm): New.\n+\t(jit_error): Make \"loc\" param take a gcc::jit::recording::location *\n+\trather than a gcc_jit_location *.\n+\t(gcc_jit_block_add_extended_asm): New entrypoint.\n+\t(gcc_jit_block_end_with_extended_asm_goto): New entrypoint.\n+\t(gcc_jit_extended_asm_as_object): New entrypoint.\n+\t(gcc_jit_extended_asm_set_volatile_flag): New entrypoint.\n+\t(gcc_jit_extended_asm_set_inline_flag): New entrypoint.\n+\t(gcc_jit_extended_asm_add_output_operand): New entrypoint.\n+\t(gcc_jit_extended_asm_add_clobber): New entrypoint.\n+\t(gcc_jit_context_add_top_level_asm): New entrypoint.\n+\t* libgccjit.h: Add gcc_jit_extended_asm to ASCII art.\n+\t(gcc_jit_extended_asm): New typedef.\n+\t(LIBGCCJIT_HAVE_ASM_STATEMENTS): New define.\n+\t(gcc_jit_block_add_extended_asm): New entrypoint.\n+\t(gcc_jit_block_end_with_extended_asm_goto): New entrypoint.\n+\t(gcc_jit_extended_asm_as_object): New entrypoint.\n+\t(gcc_jit_extended_asm_set_volatile_flag): New entrypoint.\n+\t(gcc_jit_extended_asm_set_inline_flag): New entrypoint.\n+\t(gcc_jit_extended_asm_add_output_operand): New entrypoint.\n+\t(gcc_jit_extended_asm_add_input_operand): New entrypoint.\n+\t(gcc_jit_extended_asm_add_clobber): New entrypoint.\n+\t(gcc_jit_context_add_top_level_asm): New entrypoint.\n+\t* libgccjit.map (LIBGCCJIT_ABI_15): New.\n+\n+2020-11-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit-recording.c (recording::context::new_string): Add \"escaped\"\n+\tparam and use it when creating the new recording::string instance.\n+\t(recording::string::string): Add \"escaped\" param and use it to\n+\tinitialize m_escaped.\n+\t(recording::string::make_debug_string): Replace check that first\n+\tchar is double-quote with use of m_escaped.  Fix escaping of\n+\t'\\t' and '\\n'.  Set \"escaped\" on the result.\n+\t* jit-recording.h (recording::context::new_string): Add \"escaped\"\n+\tparam.\n+\t(recording::string::string): Add \"escaped\" param.\n+\t(recording::string::m_escaped): New field.\n+\n+2020-11-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* libgccjit.h: Fix typo in comment.\n+\n 2020-09-14  Andrea Corallo  <andrea.corallo@arm.com>\n \n \t* docs/_build/texinfo/libgccjit.texi: Regenerate."}, {"sha": "5edac485e07aebdf231e618d62eb4ea957a62301", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "patch": "@@ -1,3 +1,77 @@\n+2020-11-13  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/cpp2a/concepts-decltype3.C: New test.\n+\n+2020-11-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR jit/87291\n+\t* jit.dg/jit.exp: Load target-supports-dg.exp.\n+\tSet dg-do-what-default.\n+\t(jit-dg-test): Set dg-do-what and call dg-get-options, skipping\n+\tthe test if it's not supported on the given target.\n+\t* jit.dg/test-asm.c: New test.\n+\t* jit.dg/test-asm.cc: New test.\n+\n+2020-11-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* jit.dg/test-debug-strings.c (create_code): Add tests of\n+\tstring literal escaping.\n+\n+2020-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* gcc.dg/c2x-has-c-attribute-1.c, gcc.dg/c2x-has-c-attribute-2.c,\n+\tgcc.dg/c2x-has-c-attribute-3.c, gcc.dg/c2x-has-c-attribute-4.c:\n+\tNew tests.\n+\n+2020-11-12  Tobias Burnus  <tobias@codesourcery.com>\n+\n+\tPR fortran/97782\n+\t* gfortran.dg/goacc/classify-kernels-unparallelized.f95: Move dg-message\n+\tone line up.\n+\t* gfortran.dg/goacc/classify-kernels.f95: Likewise.\n+\n+2020-11-12  Thomas Koenig  <tkoenig@gcc.gnu.org>\n+\n+\t* gfortran.dg/entry_23.f: New test.\n+\n+2020-11-12  Alex Coplan  <alex.coplan@arm.com>\n+\n+\tPR target/97730\n+\t* gcc.target/aarch64/sve2/bcax_1.c (OP): Add missing bitwise not\n+\tto match correct bcax semantics.\n+\t* gcc.dg/vect/pr97730.c: New test.\n+\n+2020-11-12  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/97806\n+\t* gcc.dg/pr97806.c: New testcase.\n+\n+2020-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c++/97790\n+\t* g++.dg/cpp2a/constexpr-dtor9.C: New test.\n+\n+2020-11-12  Jason Merrill  <jason@redhat.com>\n+\n+\tPR debug/97060\n+\t* gcc.dg/debug/dwarf2/pr97060.c: New test.\n+\n+2020-11-12  Kewen Lin  <linkw@linux.ibm.com>\n+\n+\t* gcc.dg/tree-ssa/pr96789.c: Adjusted by disabling loop\n+\tvectorization.\n+\n+2020-11-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/setjmp-5.c: Update expected path output to show\n+\tan event where the pertinent stack frame is popped.  Update\n+\texpected message from final event to reference this event.\n+\n+2020-11-12  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR tree-optimization/97424\n+\t* gcc.dg/analyzer/invalid-shift-1.c: New test.\n+\n 2020-11-11  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/88115"}, {"sha": "b231d0dd81aa4e72e7a0cf971a22ac98e5bef362", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "patch": "@@ -1,3 +1,20 @@\n+2020-11-12  Joseph Myers  <joseph@codesourcery.com>\n+\n+\t* include/cpplib.h (struct cpp_callbacks): Add bool argument to\n+\thas_attribute.\n+\t(enum cpp_builtin_type): Add BT_HAS_STD_ATTRIBUTE.\n+\t* init.c (builtin_array): Add __has_c_attribute.\n+\t(cpp_init_special_builtins): Handle BT_HAS_STD_ATTRIBUTE.\n+\t* macro.c (_cpp_builtin_macro_text): Handle BT_HAS_STD_ATTRIBUTE.\n+\tUpdate call to has_attribute for BT_HAS_ATTRIBUTE.\n+\t* traditional.c (fun_like_macro): Handle BT_HAS_STD_ATTRIBUTE.\n+\n+2020-11-12  Nicholas Guriev  <guriev-ns@ya.ru>\n+\n+\tPR pch/86674\n+\t* files.c (_cpp_find_file): Use CPP_DL_NOTE not CPP_DL_ERROR in call to\n+\tcpp_error.\n+\n 2020-11-07  Lewis Hyatt  <lhyatt@gmail.com>\n \n \t* generated_cpp_wcwidth.h: Regenerated from Unicode 13.0.0 data."}, {"sha": "7b046b8e5f8a0f56297aad15fa8d266928fdda33", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "patch": "@@ -1,3 +1,21 @@\n+2020-11-12  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* libgomp.map (GOMP_alloc, GOMP_free): Export at GOMP_5.0.1.\n+\t* omp.h.in (omp_alloc): Add malloc and alloc_size attributes.\n+\t* libgomp_g.h (GOMP_alloc, GOMP_free): Declare.\n+\t* allocator.c (omp_aligned_alloc): New for now static function,\n+\tadd alignment argument and handle it.\n+\t(omp_alloc): Reimplement using omp_aligned_alloc.\n+\t(GOMP_alloc, GOMP_free): New functions.\n+\t(omp_free): Add ialias.\n+\t* testsuite/libgomp.c-c++-common/allocate-1.c: New test.\n+\t* testsuite/libgomp.c++/allocate-1.C: New test.\n+\n+2020-11-12  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR fortran/97782\n+\t* testsuite/libgomp.oacc-fortran/attach-descriptor-1.f90: Adjust.\n+\n 2020-11-10  Chung-Lin Tang  <cltang@codesourcery.com>\n \n \t* libgomp.h (enum gomp_map_vars_kind): Adjust enum values to be bit-flag"}, {"sha": "8bda85dcaf0e1588a651d2c8cfb4c7bdf47c23c6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a5a115258afd6c0bdd8ff4c8071dcffbafb88186/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a5a115258afd6c0bdd8ff4c8071dcffbafb88186", "patch": "@@ -1,3 +1,32 @@\n+2020-11-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/future (future::wait_for): Do not wait for\n+\tdurations less than or equal to zero.\n+\t* src/c++11/futex.cc (_M_futex_wait_until)\n+\t(_M_futex_wait_until_steady): Do not wait for timeouts before\n+\tthe epoch.\n+\t* testsuite/30_threads/future/members/poll.cc: New test.\n+\n+2020-11-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/ext/numeric_traits.h (__numeric_traits): Change\n+\tprimary template to always derive from __numeric_traits_integer.\n+\t(__numeric_traits<float>, __numeric_traits<double>)\n+\t(__numeric_traits<long double>): Add explicit specializations.\n+\n+2020-11-12  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/97798\n+\t* include/ext/numeric_traits.h (__glibcxx_signed)\n+\t(__glibcxx_digits, __glibcxx_min, __glibcxx_max): Remove\n+\tmacros.\n+\t(__is_integer_nonstrict::__width): Define new constant.\n+\t(__numeric_traits_integer): Define constants in terms of each\n+\tother and __is_integer_nonstrict::__width, rather than the\n+\tremoved macros.\n+\t(_GLIBCXX_INT_N_TRAITS): Macro to define explicit\n+\tspecializations for non-standard integer types.\n+\n 2020-11-11  Jonathan Yong  <10walls@gmail.com>\n \n \t* acinclude.m4 (GLIBCXX_CHECK_LINKER_FEATURES): Exclude"}]}