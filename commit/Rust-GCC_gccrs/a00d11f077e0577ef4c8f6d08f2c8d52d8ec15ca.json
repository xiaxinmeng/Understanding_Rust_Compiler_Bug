{"sha": "a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTAwZDExZjA3N2UwNTc3ZWY0YzhmNmQwOGYyYzhkNTJkOGVjMTVjYQ==", "commit": {"author": {"name": "Jan Hubicka", "email": "jh@suse.cz", "date": "2005-06-06T12:31:35Z"}, "committer": {"name": "Jan Hubicka", "email": "hubicka@gcc.gnu.org", "date": "2005-06-06T12:31:35Z"}, "message": "predict.c (tree_predict_edge): Don't drop useless predictions; check that it is not called too late in the game.\n\n\n\t* predict.c (tree_predict_edge): Don't drop useless predictions;\n\tcheck that it is not called too late in the game.\n\t(gate_estimate_probability): New gate.\n\t(pass_profile): Gate.\n\t* tree-mudflap.c (mf_build_check_statement_for): Do not drop\n\tpredictions; update CFG instead.\n\t* cfgrtl.c (rtl_verify_flow_info): Check that predcitions are consumed.\n\nFrom-SVN: r100662", "tree": {"sha": "b33345b9d09639a34fdfad1df1f1c467319d43a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b33345b9d09639a34fdfad1df1f1c467319d43a7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca/comments", "author": null, "committer": null, "parents": [{"sha": "bbf59fad2d3953258c0a0c13516f8850b9e26c99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bbf59fad2d3953258c0a0c13516f8850b9e26c99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bbf59fad2d3953258c0a0c13516f8850b9e26c99"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "84678e289cb9126ead4c0f2684599011bb0683d9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca", "patch": "@@ -1,3 +1,13 @@\n+2005-06-06  Jan Hubicka  <jh@suse.cz>\n+\n+\t* predict.c (tree_predict_edge): Don't drop useless predictions;\n+\tcheck that it is not called too late in the game.\n+\t(gate_estimate_probability): New gate.\n+\t(pass_profile): Gate.\n+\t* tree-mudflap.c (mf_build_check_statement_for): Do not drop\n+\tpredictions; update CFG instead.\n+\t* cfgrtl.c (rtl_verify_flow_info): Check that predcitions are consumed.\n+\n 2005-06-06  Jie Zhang  <jie.zhang@analog.com>\n \n \t* config.gcc (bfin*-uclinux*): New."}, {"sha": "f414def06bd3bbe00e3beb5216378945b6d21e43", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca", "patch": "@@ -2136,6 +2136,12 @@ rtl_verify_flow_info (void)\n       edge e;\n       edge_iterator ei;\n \n+      if (bb->predictions)\n+\t{\n+\t  error (\"bb prediction set for block %i, but it is not used in RTL land\", bb->index);\n+\t  err = 1;\n+\t}\n+\n       FOR_EACH_EDGE (e, ei, bb->succs)\n \tif (e->flags & EDGE_FALLTHRU)\n \t  break;"}, {"sha": "61cc5402e7443ebb02ed768adf8edbfd141d7115", "filename": "gcc/predict.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca", "patch": "@@ -231,8 +231,9 @@ rtl_predict_edge (edge e, enum br_predictor predictor, int probability)\n void\n tree_predict_edge (edge e, enum br_predictor predictor, int probability)\n {\n+  gcc_assert (profile_status != PROFILE_GUESSED);\n   if ((e->src != ENTRY_BLOCK_PTR && EDGE_COUNT (e->src->succs) > 1)\n-      && flag_guess_branch_prob)\n+      && flag_guess_branch_prob && optimize)\n     {\n       struct edge_prediction *i = ggc_alloc (sizeof (struct edge_prediction));\n \n@@ -1926,11 +1927,16 @@ choose_function_section (void)\n \t\t    UNLIKELY_EXECUTED_TEXT_SECTION_NAME);\n }\n \n+static bool\n+gate_estimate_probability (void)\n+{\n+  return flag_guess_branch_prob;\n+}\n \n struct tree_opt_pass pass_profile = \n {\n   \"profile\",\t\t\t\t/* name */\n-  NULL,\t\t\t\t\t/* gate */\n+  gate_estimate_probability,\t\t/* gate */\n   tree_estimate_probability,\t\t/* execute */\n   NULL,\t\t\t\t\t/* sub */\n   NULL,\t\t\t\t\t/* next */"}, {"sha": "a6d87cc42aef671d0b2f8ba1392036c26f988c99", "filename": "gcc/tree-mudflap.c", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca/gcc%2Ftree-mudflap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca/gcc%2Ftree-mudflap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-mudflap.c?ref=a00d11f077e0577ef4c8f6d08f2c8d52d8ec15ca", "patch": "@@ -528,14 +528,11 @@ mf_build_check_statement_for (tree base, tree limit,\n   make_edge (cond_bb, then_bb, EDGE_TRUE_VALUE);\n   make_single_succ_edge (then_bb, join_bb, EDGE_FALLTHRU);\n \n-  /* We expect that the conditional jump we will construct will not\n-     be taken very often as it basically is an exception condition.  */\n-  predict_edge_def (single_pred_edge (then_bb), PRED_MUDFLAP, NOT_TAKEN);\n-\n   /* Mark the pseudo-fallthrough edge from cond_bb to join_bb.  */\n   e = find_edge (cond_bb, join_bb);\n   e->flags = EDGE_FALSE_VALUE;\n-  predict_edge_def (e, PRED_MUDFLAP, TAKEN);\n+  e->count = cond_bb->count;\n+  e->probability = REG_BR_PROB_BASE;\n \n   /* Update dominance info.  Note that bb_join's data was\n      updated by split_block.  */"}]}