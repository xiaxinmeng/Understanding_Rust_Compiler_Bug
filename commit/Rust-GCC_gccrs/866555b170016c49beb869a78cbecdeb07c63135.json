{"sha": "866555b170016c49beb869a78cbecdeb07c63135", "node_id": "C_kwDOANBUbNoAKDg2NjU1NWIxNzAwMTZjNDliZWI4NjlhNzhjYmVjZGViMDdjNjMxMzU", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-16T14:35:05Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-02-16T14:35:05Z"}, "message": "tree-ssa-dse: Fix up handling of lhs of internal calls [PR108657]\n\nThe r13-1778 PR106378 tree-ssa-dse change didn't just add special support\nfor IFN_LEN_STORE and IFN_MASK_STORE internal function calls as I believe\nwas intended, but given that the function was\nif (is builtin) { ... }\nelse if (lhs present and non-SSA_NAME) { ... }\nreturn false;\nand it added a new\nelse if (is internal builtin) { ... }\nin between the two, the last if used to be done before on all stmts\nwith non-SSA_NAME lhs except for calls to builtin functions, but newly\nisn't done also for calls to internal functions.  In the testcase\nthe important internal function is .DEFERRED_INIT, which often has\nnon-SSA_NAME lhs, and the change resulted in them no longer being DSEd,\nso a block with nothing in it left but var = .DEFERRED_INIT () and\nvar = {CLOBBER} was unrolled several times.\n\nThe following patch does the lhs handling for all stmts with non-SSA_NAME lhs\nunless initialize_ao_ref_for_dse handled those specially already and\nreturned (which is the case for various mem* builtins which don't have\nsuch lhs, for some cases of calloc which again is fine,and since r13-1778\nalso for IFN_LEN_STORE call and some IFN_MASK_STORE calls.\nAs IFN_MASK_STORE doesn't have a lhs, the break for the !may_def_ok case\ndoesn't seem to change anything, and because we've handled internal fns\nthat way in the past, I think it is the right thing to do that again.\nThat said, if it is inappropriate for some new ifn, I guess it could\nbe added to the switch and just return false; for it instead of break;.\n\n2023-02-16  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR tree-optimization/108657\n\t* tree-ssa-dse.cc (initialize_ao_ref_for_dse): If lhs of stmt\n\texists and is not a SSA_NAME, call ao_ref_init even if the stmt\n\tis a call to internal or builtin function.\n\n\t* gcc.dg/pr108657.c: New test.", "tree": {"sha": "931cc8c289a52894cee9536b887a51b5f2876fc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/931cc8c289a52894cee9536b887a51b5f2876fc7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/866555b170016c49beb869a78cbecdeb07c63135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866555b170016c49beb869a78cbecdeb07c63135", "html_url": "https://github.com/Rust-GCC/gccrs/commit/866555b170016c49beb869a78cbecdeb07c63135", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/866555b170016c49beb869a78cbecdeb07c63135/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7478278f88ba1753e68d6962b7f38d1be5b43d56", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7478278f88ba1753e68d6962b7f38d1be5b43d56", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7478278f88ba1753e68d6962b7f38d1be5b43d56"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "37d0b8e863f916f30692b0a10da37b42c1715756", "filename": "gcc/testsuite/gcc.dg/pr108657.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866555b170016c49beb869a78cbecdeb07c63135/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108657.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866555b170016c49beb869a78cbecdeb07c63135/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108657.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr108657.c?ref=866555b170016c49beb869a78cbecdeb07c63135", "patch": "@@ -0,0 +1,31 @@\n+/* PR tree-optimization/108657 */\n+/* { dg-do run } */\n+/* { dg-options \"-O3 -ftrivial-auto-var-init=zero\" } */\n+\n+int c, e, f;\n+static int *d = &c;\n+\n+__attribute__((noipa)) void\n+foo (void)\n+{\n+  if (c != 1)\n+    __builtin_abort ();\n+}\n+\n+int\n+main ()\n+{\n+  for (c = 1; c >= 0; c--)\n+    {\n+      e = 0;\n+      for (int j = 0; j <= 2; j++)\n+\t{\n+\t  short k[1];\n+\t  if (e)\n+\t    break;\n+\t  e ^= f;\n+\t}\n+    }\n+  *d = 1;\n+  foo ();\n+}"}, {"sha": "4f8a44fbba02243519e9d8512fd18d9ef11bbc94", "filename": "gcc/tree-ssa-dse.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/866555b170016c49beb869a78cbecdeb07c63135/gcc%2Ftree-ssa-dse.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/866555b170016c49beb869a78cbecdeb07c63135/gcc%2Ftree-ssa-dse.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dse.cc?ref=866555b170016c49beb869a78cbecdeb07c63135", "patch": "@@ -177,7 +177,7 @@ initialize_ao_ref_for_dse (gimple *stmt, ao_ref *write, bool may_def_ok = false)\n \tdefault:;\n \t}\n     }\n-  else if (tree lhs = gimple_get_lhs (stmt))\n+  if (tree lhs = gimple_get_lhs (stmt))\n     {\n       if (TREE_CODE (lhs) != SSA_NAME)\n \t{"}]}