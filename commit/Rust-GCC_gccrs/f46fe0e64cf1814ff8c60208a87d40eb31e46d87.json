{"sha": "f46fe0e64cf1814ff8c60208a87d40eb31e46d87", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjQ2ZmUwZTY0Y2YxODE0ZmY4YzYwMjA4YTg3ZDQwZWIzMWU0NmQ4Nw==", "commit": {"author": {"name": "Andrew Pinski", "email": "andrew_pinski@playstation.sony.com", "date": "2007-06-28T19:03:49Z"}, "committer": {"name": "Andrew Pinski", "email": "pinskia@gcc.gnu.org", "date": "2007-06-28T19:03:49Z"}, "message": "re PR middle-end/32417 (416.gamess ICEs (in aff_combination_add_elt, tree-affine.c))\n\n2007-06-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR tree-opt/32417\n        * tree-affine.c (aff_combination_add_elt): Handle\n        pointer addition specially.\n\n2007-06-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n\n        PR tree-opt/32417\n        * gfortran.fortran-torture/compile/pr32417.f90: New test.\n\nFrom-SVN: r126082", "tree": {"sha": "1491da5dec11ddc8e18a3642e00a9602e8072c1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1491da5dec11ddc8e18a3642e00a9602e8072c1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f46fe0e64cf1814ff8c60208a87d40eb31e46d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f46fe0e64cf1814ff8c60208a87d40eb31e46d87", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f46fe0e64cf1814ff8c60208a87d40eb31e46d87", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f46fe0e64cf1814ff8c60208a87d40eb31e46d87/comments", "author": null, "committer": null, "parents": [{"sha": "5346c75c5685cd351bb6d711a010ebab201b5da7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5346c75c5685cd351bb6d711a010ebab201b5da7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5346c75c5685cd351bb6d711a010ebab201b5da7"}], "stats": {"total": 48, "additions": 43, "deletions": 5}, "files": [{"sha": "f1ff6307220b9ffdfb9826c6740ba3974b5bf4a3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46fe0e64cf1814ff8c60208a87d40eb31e46d87/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46fe0e64cf1814ff8c60208a87d40eb31e46d87/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f46fe0e64cf1814ff8c60208a87d40eb31e46d87", "patch": "@@ -1,3 +1,9 @@\n+2007-06-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR tree-opt/32417\n+\t* tree-affine.c (aff_combination_add_elt): Handle\n+\tpointer addition specially.\n+\n 2007-06-28  Jakub Jelinek  <jakub@redhat.com>\n \n \t* config/rs6000/rs6000.c (rs6000_function_ok_for_sibcall): Ensure"}, {"sha": "9d5b05d0684d3b5a9d175ec20cebcba1b6f0ca37", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46fe0e64cf1814ff8c60208a87d40eb31e46d87/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46fe0e64cf1814ff8c60208a87d40eb31e46d87/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f46fe0e64cf1814ff8c60208a87d40eb31e46d87", "patch": "@@ -1,3 +1,8 @@\n+2007-06-28  Andrew Pinski  <andrew_pinski@playstation.sony.com>\n+\n+\tPR tree-opt/32417\n+\t* gfortran.fortran-torture/compile/pr32417.f90: New test.\n+\n 2007-06-28  Dorit Nuzman  <dorit@il.ibm.com>\n \n \t* gcc.dg/vect/vect-iv-4.c: Test now passes on vect_pack_trunc"}, {"sha": "913ce949829ff984740f2ec41f1cff0126901459", "filename": "gcc/testsuite/gfortran.fortran-torture/compile/pr32417.f90", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46fe0e64cf1814ff8c60208a87d40eb31e46d87/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr32417.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46fe0e64cf1814ff8c60208a87d40eb31e46d87/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr32417.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.fortran-torture%2Fcompile%2Fpr32417.f90?ref=f46fe0e64cf1814ff8c60208a87d40eb31e46d87", "patch": "@@ -0,0 +1,15 @@\n+! PR tree-opt/32417\n+! this used to crash while running IV-opts\n+! aff_combination_add_elt was not ready to handle pointers correctly\n+\n+SUBROUTINE ONEINTS()\n+  COMMON /INFOA / NAT,NUM\n+  DIMENSION TINT(NUM*NUM,NAT,3,3,3),TINTM(NUM,NUM,NAT,3,3,3)\n+\n+  CALL TINTS(IC)\n+  DO ID=1,3\n+    DO IC=1,NAT\n+      TINTM(J,I,IC,IAN,INU,ID) = TINT((I-1)*NUM+J,IC,IAN,INU,ID)\n+    ENDDO\n+  ENDDO\n+END"}, {"sha": "ec2ad8f1389215171b9854ca11269ceefc1b0ba3", "filename": "gcc/tree-affine.c", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f46fe0e64cf1814ff8c60208a87d40eb31e46d87/gcc%2Ftree-affine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f46fe0e64cf1814ff8c60208a87d40eb31e46d87/gcc%2Ftree-affine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-affine.c?ref=f46fe0e64cf1814ff8c60208a87d40eb31e46d87", "patch": "@@ -130,6 +130,7 @@ void\n aff_combination_add_elt (aff_tree *comb, tree elt, double_int scale)\n {\n   unsigned i;\n+  tree type;\n \n   scale = double_int_ext_for_comb (scale, comb);\n   if (double_int_zero_p (scale))\n@@ -169,15 +170,26 @@ aff_combination_add_elt (aff_tree *comb, tree elt, double_int scale)\n       return;\n     }\n \n+  type = comb->type;\n+  if (POINTER_TYPE_P (type))\n+    type = sizetype;\n+\n   if (double_int_one_p (scale))\n-    elt = fold_convert (comb->type, elt);\n+    elt = fold_convert (type, elt);\n   else\n-    elt = fold_build2 (MULT_EXPR, comb->type,\n-\t\t       fold_convert (comb->type, elt),\n-\t\t       double_int_to_tree (comb->type, scale)); \n+    elt = fold_build2 (MULT_EXPR, type,\n+\t\t       fold_convert (type, elt),\n+\t\t       double_int_to_tree (type, scale)); \n \n   if (comb->rest)\n-    comb->rest = fold_build2 (PLUS_EXPR, comb->type, comb->rest, elt);\n+    {\n+      if (POINTER_TYPE_P (comb->type))\n+\tcomb->rest = fold_build2 (POINTER_PLUS_EXPR, comb->type,\n+\t\t\t\t  comb->rest, elt);\n+      else\n+\tcomb->rest = fold_build2 (PLUS_EXPR, comb->type, comb->rest,\n+\t\t\t\t  elt);\n+    }\n   else\n     comb->rest = elt;\n }"}]}