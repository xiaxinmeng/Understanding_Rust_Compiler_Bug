{"sha": "1f0dc22ab5f61ed6b91118f946879dac3e7c9a67", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWYwZGMyMmFiNWY2MWVkNmI5MTExOGY5NDY4NzlkYWMzZTdjOWE2Nw==", "commit": {"author": {"name": "H.J. Lu", "email": "hongjiu.lu@intel.com", "date": "2019-05-15T15:05:48Z"}, "committer": {"name": "H.J. Lu", "email": "hjl@gcc.gnu.org", "date": "2019-05-15T15:05:48Z"}, "message": "i386: Emulate MMX plusminus/sat_plusminus with SSE\n\nEmulate MMX plusminus/sat_plusminus with SSE.  Only SSE register source\noperand is allowed.\n\n\tPR target/89021\n\t* config/i386/mmx.md (MMXMODEI8): Require TARGET_SSE2 for V1DI.\n\t(plusminus:mmx_<plusminus_insn><mode>3): Check\n\tTARGET_MMX_WITH_SSE.\n\t(sat_plusminus:mmx_<plusminus_insn><mode>3): Likewise.\n\t(<plusminus_insn><mode>3): New.\n\t(*mmx_<plusminus_insn><mode>3): Add SSE emulation.\n\t(*mmx_<plusminus_insn><mode>3): Likewise.\n\nFrom-SVN: r271217", "tree": {"sha": "480a8dfe9a9ac059adbbc1c764e4112be0b41033", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/480a8dfe9a9ac059adbbc1c764e4112be0b41033"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f0dc22ab5f61ed6b91118f946879dac3e7c9a67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0dc22ab5f61ed6b91118f946879dac3e7c9a67", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f0dc22ab5f61ed6b91118f946879dac3e7c9a67", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f0dc22ab5f61ed6b91118f946879dac3e7c9a67/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6e9fffcf83638a50cac6e2a127817c409238cfde", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6e9fffcf83638a50cac6e2a127817c409238cfde", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6e9fffcf83638a50cac6e2a127817c409238cfde"}], "stats": {"total": 70, "additions": 49, "deletions": 21}, "files": [{"sha": "344954794e20eed9f2e146279c9aec650c173c4b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0dc22ab5f61ed6b91118f946879dac3e7c9a67/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0dc22ab5f61ed6b91118f946879dac3e7c9a67/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f0dc22ab5f61ed6b91118f946879dac3e7c9a67", "patch": "@@ -1,3 +1,14 @@\n+2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n+\n+\tPR target/89021\n+\t* config/i386/mmx.md (MMXMODEI8): Require TARGET_SSE2 for V1DI.\n+\t(plusminus:mmx_<plusminus_insn><mode>3): Check\n+\tTARGET_MMX_WITH_SSE.\n+\t(sat_plusminus:mmx_<plusminus_insn><mode>3): Likewise.\n+\t(<plusminus_insn><mode>3): New.\n+\t(*mmx_<plusminus_insn><mode>3): Add SSE emulation.\n+\t(*mmx_<plusminus_insn><mode>3): Likewise.\n+\n 2019-05-15  H.J. Lu  <hongjiu.lu@intel.com>\n \n \tPR target/89021"}, {"sha": "d0dcd2f94810f4b34a87393b2f5144b740afa6e9", "filename": "gcc/config/i386/mmx.md", "status": "modified", "additions": 38, "deletions": 21, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f0dc22ab5f61ed6b91118f946879dac3e7c9a67/gcc%2Fconfig%2Fi386%2Fmmx.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f0dc22ab5f61ed6b91118f946879dac3e7c9a67/gcc%2Fconfig%2Fi386%2Fmmx.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fmmx.md?ref=1f0dc22ab5f61ed6b91118f946879dac3e7c9a67", "patch": "@@ -45,7 +45,7 @@\n \n ;; 8 byte integral modes handled by MMX (and by extension, SSE)\n (define_mode_iterator MMXMODEI [V8QI V4HI V2SI])\n-(define_mode_iterator MMXMODEI8 [V8QI V4HI V2SI V1DI])\n+(define_mode_iterator MMXMODEI8 [V8QI V4HI V2SI (V1DI \"TARGET_SSE2\")])\n \n ;; All 8-byte vector modes handled by MMX\n (define_mode_iterator MMXMODE [V8QI V4HI V2SI V1DI V2SF])\n@@ -688,39 +688,56 @@\n (define_expand \"mmx_<plusminus_insn><mode>3\"\n   [(set (match_operand:MMXMODEI8 0 \"register_operand\")\n \t(plusminus:MMXMODEI8\n-\t  (match_operand:MMXMODEI8 1 \"nonimmediate_operand\")\n-\t  (match_operand:MMXMODEI8 2 \"nonimmediate_operand\")))]\n-  \"TARGET_MMX || (TARGET_SSE2 && <MODE>mode == V1DImode)\"\n+\t  (match_operand:MMXMODEI8 1 \"register_mmxmem_operand\")\n+\t  (match_operand:MMXMODEI8 2 \"register_mmxmem_operand\")))]\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n+  \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n+\n+(define_expand \"<plusminus_insn><mode>3\"\n+  [(set (match_operand:MMXMODEI 0 \"register_operand\")\n+\t(plusminus:MMXMODEI\n+\t  (match_operand:MMXMODEI 1 \"register_operand\")\n+\t  (match_operand:MMXMODEI 2 \"register_operand\")))]\n+  \"TARGET_MMX_WITH_SSE\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*mmx_<plusminus_insn><mode>3\"\n-  [(set (match_operand:MMXMODEI8 0 \"register_operand\" \"=y\")\n+  [(set (match_operand:MMXMODEI8 0 \"register_operand\" \"=y,x,Yv\")\n         (plusminus:MMXMODEI8\n-\t  (match_operand:MMXMODEI8 1 \"nonimmediate_operand\" \"<comm>0\")\n-\t  (match_operand:MMXMODEI8 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"(TARGET_MMX || (TARGET_SSE2 && <MODE>mode == V1DImode))\n+\t  (match_operand:MMXMODEI8 1 \"register_mmxmem_operand\" \"<comm>0,0,Yv\")\n+\t  (match_operand:MMXMODEI8 2 \"register_mmxmem_operand\" \"ym,x,Yv\")))]\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n    && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"p<plusminus_mnemonic><mmxvecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n+  \"@\n+   p<plusminus_mnemonic><mmxvecsize>\\t{%2, %0|%0, %2}\n+   p<plusminus_mnemonic><mmxvecsize>\\t{%2, %0|%0, %2}\n+   vp<plusminus_mnemonic><mmxvecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n (define_expand \"mmx_<plusminus_insn><mode>3\"\n   [(set (match_operand:MMXMODE12 0 \"register_operand\")\n \t(sat_plusminus:MMXMODE12\n-\t  (match_operand:MMXMODE12 1 \"nonimmediate_operand\")\n-\t  (match_operand:MMXMODE12 2 \"nonimmediate_operand\")))]\n-  \"TARGET_MMX\"\n+\t  (match_operand:MMXMODE12 1 \"register_mmxmem_operand\")\n+\t  (match_operand:MMXMODE12 2 \"register_mmxmem_operand\")))]\n+  \"TARGET_MMX || TARGET_MMX_WITH_SSE\"\n   \"ix86_fixup_binary_operands_no_copy (<CODE>, <MODE>mode, operands);\")\n \n (define_insn \"*mmx_<plusminus_insn><mode>3\"\n-  [(set (match_operand:MMXMODE12 0 \"register_operand\" \"=y\")\n+  [(set (match_operand:MMXMODE12 0 \"register_operand\" \"=y,x,Yv\")\n         (sat_plusminus:MMXMODE12\n-\t  (match_operand:MMXMODE12 1 \"nonimmediate_operand\" \"<comm>0\")\n-\t  (match_operand:MMXMODE12 2 \"nonimmediate_operand\" \"ym\")))]\n-  \"TARGET_MMX && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n-  \"p<plusminus_mnemonic><mmxvecsize>\\t{%2, %0|%0, %2}\"\n-  [(set_attr \"type\" \"mmxadd\")\n-   (set_attr \"mode\" \"DI\")])\n+\t  (match_operand:MMXMODE12 1 \"register_mmxmem_operand\" \"<comm>0,0,Yv\")\n+\t  (match_operand:MMXMODE12 2 \"register_mmxmem_operand\" \"ym,x,Yv\")))]\n+  \"(TARGET_MMX || TARGET_MMX_WITH_SSE)\n+   && ix86_binary_operator_ok (<CODE>, <MODE>mode, operands)\"\n+  \"@\n+   p<plusminus_mnemonic><mmxvecsize>\\t{%2, %0|%0, %2}\n+   p<plusminus_mnemonic><mmxvecsize>\\t{%2, %0|%0, %2}\n+   vp<plusminus_mnemonic><mmxvecsize>\\t{%2, %1, %0|%0, %1, %2}\"\n+  [(set_attr \"mmx_isa\" \"native,x64_noavx,x64_avx\")\n+   (set_attr \"type\" \"mmxadd,sseadd,sseadd\")\n+   (set_attr \"mode\" \"DI,TI,TI\")])\n \n (define_expand \"mmx_mulv4hi3\"\n   [(set (match_operand:V4HI 0 \"register_operand\")"}]}