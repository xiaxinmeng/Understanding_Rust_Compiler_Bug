{"sha": "9f23af489a0c86f0b2f98db15d0e5761ed72dacd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWYyM2FmNDg5YTBjODZmMGIyZjk4ZGIxNWQwZTU3NjFlZDcyZGFjZA==", "commit": {"author": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-10-07T10:46:58Z"}, "committer": {"name": "Mikael Morin", "email": "mikael@gcc.gnu.org", "date": "2010-10-07T10:46:58Z"}, "message": "re PR fortran/45916 (ICE in match_procedure_in_type, at fortran/decl.c:7921)\n\n2010-10-07  Mikael Morin  <mikael@gcc.gnu.org>\n\n\tPR fortran/45916\n\tRevert revision 165026:\n\t2010-10-06  Mikael Morin  <mikael@gcc.gnu.org>\n\n\t* decl.c (match_procedure_in_type): Assertify if conditions.\n\n2010-10-07  Mikael Morin  <mikael@gcc.gnu.org>\n\n\tPR fortran/45916\n\t* gfortran.dg/generic_typebound_operator_1.f90: New test.\n\nFrom-SVN: r165089", "tree": {"sha": "ddd20f0785bae84cf67811bd9c809fadb41e9baf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ddd20f0785bae84cf67811bd9c809fadb41e9baf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9f23af489a0c86f0b2f98db15d0e5761ed72dacd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f23af489a0c86f0b2f98db15d0e5761ed72dacd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9f23af489a0c86f0b2f98db15d0e5761ed72dacd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9f23af489a0c86f0b2f98db15d0e5761ed72dacd/comments", "author": null, "committer": null, "parents": [{"sha": "fa8d6f0771c5454f35a4ca2bec88313bc28c0914", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fa8d6f0771c5454f35a4ca2bec88313bc28c0914", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fa8d6f0771c5454f35a4ca2bec88313bc28c0914"}], "stats": {"total": 43, "additions": 38, "deletions": 5}, "files": [{"sha": "18e4dd94faa17fa29e927904179bc0830b88ce1e", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f23af489a0c86f0b2f98db15d0e5761ed72dacd/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f23af489a0c86f0b2f98db15d0e5761ed72dacd/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=9f23af489a0c86f0b2f98db15d0e5761ed72dacd", "patch": "@@ -1,3 +1,11 @@\n+2010-10-07  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/45916\n+\tRevert revision 165026:\n+\t2010-10-06  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\t* decl.c (match_procedure_in_type): Assertify if conditions.\n+\n 2010-10-06  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/45889"}, {"sha": "5b4ab182ed7b1f100aa9f7b2650bffcaa08282f9", "filename": "gcc/fortran/decl.c", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f23af489a0c86f0b2f98db15d0e5761ed72dacd/gcc%2Ffortran%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f23af489a0c86f0b2f98db15d0e5761ed72dacd/gcc%2Ffortran%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fdecl.c?ref=9f23af489a0c86f0b2f98db15d0e5761ed72dacd", "patch": "@@ -7916,19 +7916,20 @@ match_procedure_in_type (void)\n \t would be an error.  If a GENERIC already targetted this binding, it may\n \t be already there but then typebound is still NULL.  */\n       stree = gfc_find_symtree (ns->tb_sym_root, name);\n-      if (stree)\n+      if (stree && stree->n.tb)\n \t{\n-\t  gcc_assert (stree->n.tb);\n \t  gfc_error (\"There is already a procedure with binding name '%s' for \"\n \t\t     \"the derived type '%s' at %C\", name, block->name);\n \t  return MATCH_ERROR;\n \t}\n \n       /* Insert it and set attributes.  */\n \n-      gcc_assert (!stree);\n-      stree = gfc_new_symtree (&ns->tb_sym_root, name);\n-      gcc_assert (stree);\n+      if (!stree)\n+\t{\n+\t  stree = gfc_new_symtree (&ns->tb_sym_root, name);\n+\t  gcc_assert (stree);\n+\t}\n       stree->n.tb = gfc_get_typebound_proc (&tb);\n \n       if (gfc_get_sym_tree (target, gfc_current_ns, &stree->n.tb->u.specific,"}, {"sha": "bedc124192e2c939ec9fed3e6ce69fae898cc3b3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f23af489a0c86f0b2f98db15d0e5761ed72dacd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f23af489a0c86f0b2f98db15d0e5761ed72dacd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9f23af489a0c86f0b2f98db15d0e5761ed72dacd", "patch": "@@ -1,3 +1,8 @@\n+2010-10-07  Mikael Morin  <mikael@gcc.gnu.org>\n+\n+\tPR fortran/45916\n+\t* gfortran.dg/generic_typebound_operator_1.f90: New test.\n+\n 2010-10-06  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/45889"}, {"sha": "76c15e97baa161cfb06e2c544e4d8e230e01152d", "filename": "gcc/testsuite/gfortran.dg/generic_typebound_operator_1.f90", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9f23af489a0c86f0b2f98db15d0e5761ed72dacd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_typebound_operator_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9f23af489a0c86f0b2f98db15d0e5761ed72dacd/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_typebound_operator_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fgeneric_typebound_operator_1.f90?ref=9f23af489a0c86f0b2f98db15d0e5761ed72dacd", "patch": "@@ -0,0 +1,19 @@\n+! { dg-do compile }\n+!\n+! PR fortran/45916\n+! ICE with generic type-bound operator\n+\n+module m_sort\n+  implicit none\n+  type, abstract :: sort_t\n+  contains\n+    generic :: operator(.gt.) => gt_cmp\n+    procedure(gt_cmp), deferred :: gt_cmp\n+  end type sort_t\n+  interface\n+    logical function gt_cmp(a,b)\n+      import\n+      class(sort_t), intent(in) :: a, b\n+    end function gt_cmp\n+  end interface\n+end module m_sort"}]}