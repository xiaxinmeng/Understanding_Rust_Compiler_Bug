{"sha": "a473646ec83e0835cf3f16e146a69445e6da7ee5", "node_id": "C_kwDOANBUbNoAKGE0NzM2NDZlYzgzZTA4MzVjZjNmMTZlMTQ2YTY5NDQ1ZTZkYTdlZTU", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-01-30T17:39:39Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-11T08:53:19Z"}, "message": "[Ada] Use pygments for Ada code examples of elaboration control\n\nOnly enhancement of formatting.\n\ngcc/ada/\n\n\t* doc/gnat_ugn/elaboration_order_handling_in_gnat.rst: Change\n\tblocks from plain code to Ada.", "tree": {"sha": "25c1a349b186455d62787ed05d743f78001ca22d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/25c1a349b186455d62787ed05d743f78001ca22d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a473646ec83e0835cf3f16e146a69445e6da7ee5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a473646ec83e0835cf3f16e146a69445e6da7ee5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a473646ec83e0835cf3f16e146a69445e6da7ee5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a473646ec83e0835cf3f16e146a69445e6da7ee5/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42c0119157824beb106345faa4b100c10dbb38cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/42c0119157824beb106345faa4b100c10dbb38cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/42c0119157824beb106345faa4b100c10dbb38cc"}], "stats": {"total": 52, "additions": 26, "deletions": 26}, "files": [{"sha": "4982ebf4b1077119f6d869b07b9d38e6cab0d969", "filename": "gcc/ada/doc/gnat_ugn/elaboration_order_handling_in_gnat.rst", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a473646ec83e0835cf3f16e146a69445e6da7ee5/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a473646ec83e0835cf3f16e146a69445e6da7ee5/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Felaboration_order_handling_in_gnat.rst?ref=a473646ec83e0835cf3f16e146a69445e6da7ee5", "patch": "@@ -93,7 +93,7 @@ Elaboration code may appear in two distinct contexts:\n   [body] compilation unit, ignoring any other package [body] declarations in\n   between.\n \n-  ::\n+  .. code-block:: ada\n \n      with Server;\n      package Client is\n@@ -116,7 +116,7 @@ Elaboration code may appear in two distinct contexts:\n   bounded by the region starting from the ``begin`` keyword of the package body\n   and ending at the ``end`` keyword of the package body.\n \n-  ::\n+  .. code-block:: ada\n \n      package body Client is\n         procedure Proc is\n@@ -142,7 +142,7 @@ executed is referred to as **elaboration order**.\n \n Within a single unit, elaboration code is executed in sequential order.\n \n-  ::\n+  .. code-block:: ada\n \n      package body Client is\n         Result : ... := Server.Func;\n@@ -190,13 +190,13 @@ factors:\n \n A program may have several elaboration orders depending on its structure.\n \n-  ::\n+  .. code-block:: ada\n \n      package Server is\n         function Func (Index : Integer) return Integer;\n      end Server;\n \n-  ::\n+  .. code-block:: ada\n \n      package body Server is\n         Results : array (1 .. 5) of Integer := (1, 2, 3, 4, 5);\n@@ -207,14 +207,14 @@ A program may have several elaboration orders depending on its structure.\n         end Func;\n      end Server;\n \n-  ::\n+  .. code-block:: ada\n \n      with Server;\n      package Client is\n         Val : constant Integer := Server.Func (3);\n      end Client;\n \n-  ::\n+  .. code-block:: ada\n \n      with Client;\n      procedure Main is begin null; end Main;\n@@ -320,7 +320,7 @@ the desired elaboration order and avoiding ABE problems altogether.\n   A library package which does not require a completing body does not suffer\n   from ABE problems.\n \n-  ::\n+  .. code-block:: ada\n \n      package Pack is\n         generic\n@@ -358,15 +358,15 @@ the desired elaboration order and avoiding ABE problems altogether.\n   scenario can invoke a server target before the target body has been\n   elaborated because the spec and body are effectively \"glued\" together.\n \n-  ::\n+  .. code-block:: ada\n \n      package Server is\n         pragma Elaborate_Body;\n \n         function Func return Integer;\n      end Server;\n \n-  ::\n+  .. code-block:: ada\n \n      package body Server is\n         function Func return Integer is\n@@ -375,7 +375,7 @@ the desired elaboration order and avoiding ABE problems altogether.\n         end Func;\n      end Server;\n \n-  ::\n+  .. code-block:: ada\n \n      with Server;\n      package Client is\n@@ -425,13 +425,13 @@ depend on.\n   be elaborated prior to the unit with the pragma. Note that other unrelated\n   units may be elaborated in between the spec and the body.\n \n-  ::\n+  .. code-block:: ada\n \n      package Server is\n         function Func return Integer;\n      end Server;\n \n-  ::\n+  .. code-block:: ada\n \n      package body Server is\n         function Func return Integer is\n@@ -440,7 +440,7 @@ depend on.\n         end Func;\n      end Server;\n \n-  ::\n+  .. code-block:: ada\n \n      with Server;\n      pragma Elaborate (Server);\n@@ -479,13 +479,13 @@ depend on.\n   |withed| by the spec and body of the argument, recursively. Note that other\n   unrelated units may be elaborated in between the spec and the body.\n \n-  ::\n+  .. code-block:: ada\n \n      package Math is\n         function Factorial (Val : Natural) return Natural;\n      end Math;\n \n-  ::\n+  .. code-block:: ada\n \n      package body Math is\n         function Factorial (Val : Natural) return Natural is\n@@ -494,7 +494,7 @@ depend on.\n         end Factorial;\n      end Math;\n \n-  ::\n+  .. code-block:: ada\n \n      package Computer is\n         type Operation_Kind is (None, Op_Factorial);\n@@ -504,7 +504,7 @@ depend on.\n            Op  : Operation_Kind) return Natural;\n      end Computer;\n \n-  ::\n+  .. code-block:: ada\n \n      with Math;\n      package body Computer is\n@@ -520,7 +520,7 @@ depend on.\n         end Compute;\n      end Computer;\n \n-  ::\n+  .. code-block:: ada\n \n      with Computer;\n      pragma Elaborate_All (Computer);\n@@ -738,7 +738,7 @@ execution. The warnings can be suppressed selectively with ``pragma Warnings\n A *guaranteed ABE* arises when the body of a target is not elaborated early\n enough, and causes *all* scenarios that directly invoke the target to fail.\n \n-  ::\n+  .. code-block:: ada\n \n      package body Guaranteed_ABE is\n         function ABE return Integer;\n@@ -765,7 +765,7 @@ the declaration of ``Val``. This invokes function ``ABE``, however the body of\n A *conditional ABE* arises when the body of a target is not elaborated early\n enough, and causes *some* scenarios that directly invoke the target to fail.\n \n-  ::\n+  .. code-block:: ada\n \n       1. package body Conditional_ABE is\n       2.    procedure Force_Body is null;\n@@ -850,19 +850,19 @@ clauses, elaboration-control pragmas, or invocations in elaboration code.\n \n The following example exhibits an elaboration circularity.\n \n-  ::\n+  .. code-block:: ada\n \n      with B; pragma Elaborate (B);\n      package A is\n      end A;\n \n-  ::\n+  .. code-block:: ada\n \n      package B is\n         procedure Force_Body;\n      end B;\n \n-  ::\n+  .. code-block:: ada\n \n      with C;\n      package body B is\n@@ -871,13 +871,13 @@ The following example exhibits an elaboration circularity.\n         Elab : constant Integer := C.Func;\n      end B;\n \n-  ::\n+  .. code-block:: ada\n \n      package C is\n         function Func return Integer;\n      end C;\n \n-  ::\n+  .. code-block:: ada\n \n      with A;\n      package body C is"}]}