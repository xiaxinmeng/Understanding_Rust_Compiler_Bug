{"sha": "00eaaa505695d75765f570ec3e18680cc394a377", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDBlYWFhNTA1Njk1ZDc1NzY1ZjU3MGVjM2UxODY4MGNjMzk0YTM3Nw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-09-26T19:57:37Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-09-26T19:57:37Z"}, "message": "mangle.c (is_std_substitution): Check for abi_tag.\n\ngcc/cp/\n\t* mangle.c (is_std_substitution): Check for abi_tag.\nlibiberty/\n\t* cp-demangle.c (d_substitution): Handle abi tags on abbreviation.\n\nFrom-SVN: r215647", "tree": {"sha": "f0ac17ea8372dfc4024ad89e42ad2b268f33402f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f0ac17ea8372dfc4024ad89e42ad2b268f33402f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/00eaaa505695d75765f570ec3e18680cc394a377", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00eaaa505695d75765f570ec3e18680cc394a377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00eaaa505695d75765f570ec3e18680cc394a377", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00eaaa505695d75765f570ec3e18680cc394a377/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "20ee26901f9bd834fa221f751c7baa5bf07137b5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/20ee26901f9bd834fa221f751c7baa5bf07137b5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/20ee26901f9bd834fa221f751c7baa5bf07137b5"}], "stats": {"total": 98, "additions": 63, "deletions": 35}, "files": [{"sha": "126c14836b4af51763d4abf498323563678ee196", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eaaa505695d75765f570ec3e18680cc394a377/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eaaa505695d75765f570ec3e18680cc394a377/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=00eaaa505695d75765f570ec3e18680cc394a377", "patch": "@@ -1,3 +1,7 @@\n+2014-09-26  Jason Merrill  <jason@redhat.com>\n+\n+\t* mangle.c (find_substitution): Use write_abi_tags.\n+\n 2014-09-25  Marek Polacek  <polacek@redhat.com>\n \n \tPR c++/61945"}, {"sha": "6e6aa8a5734b5b7b8a14d898edd948cdd6fb98f3", "filename": "gcc/cp/mangle.c", "status": "modified", "additions": 31, "deletions": 34, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eaaa505695d75765f570ec3e18680cc394a377/gcc%2Fcp%2Fmangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eaaa505695d75765f570ec3e18680cc394a377/gcc%2Fcp%2Fmangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fmangle.c?ref=00eaaa505695d75765f570ec3e18680cc394a377", "patch": "@@ -512,6 +512,7 @@ find_substitution (tree node)\n   const int size = vec_safe_length (G.substitutions);\n   tree decl;\n   tree type;\n+  const char *abbr = NULL;\n \n   if (DEBUG_MANGLE)\n     fprintf (stderr, \"  ++ find_substitution (%s at %p)\\n\",\n@@ -530,13 +531,10 @@ find_substitution (tree node)\n   if (decl\n       && is_std_substitution (decl, SUBID_ALLOCATOR)\n       && !CLASSTYPE_USE_TEMPLATE (TREE_TYPE (decl)))\n-    {\n-      write_string (\"Sa\");\n-      return 1;\n-    }\n+    abbr = \"Sa\";\n \n   /* Check for std::basic_string.  */\n-  if (decl && is_std_substitution (decl, SUBID_BASIC_STRING))\n+  else if (decl && is_std_substitution (decl, SUBID_BASIC_STRING))\n     {\n       if (TYPE_P (node))\n \t{\n@@ -555,26 +553,20 @@ find_substitution (tree node)\n \t\t\t\t\t       SUBID_CHAR_TRAITS)\n \t\t  && is_std_substitution_char (TREE_VEC_ELT (args, 2),\n \t\t\t\t\t       SUBID_ALLOCATOR))\n-\t\t{\n-\t\t  write_string (\"Ss\");\n-\t\t  return 1;\n-\t\t}\n+\t\tabbr = \"Ss\";\n \t    }\n \t}\n       else\n \t/* Substitute for the template name only if this isn't a type.  */\n-\t{\n-\t  write_string (\"Sb\");\n-\t  return 1;\n-\t}\n+\tabbr = \"Sb\";\n     }\n \n   /* Check for basic_{i,o,io}stream.  */\n-  if (TYPE_P (node)\n-      && cp_type_quals (type) == TYPE_UNQUALIFIED\n-      && CLASS_TYPE_P (type)\n-      && CLASSTYPE_USE_TEMPLATE (type)\n-      && CLASSTYPE_TEMPLATE_INFO (type) != NULL)\n+  else if (TYPE_P (node)\n+\t   && cp_type_quals (type) == TYPE_UNQUALIFIED\n+\t   && CLASS_TYPE_P (type)\n+\t   && CLASSTYPE_USE_TEMPLATE (type)\n+\t   && CLASSTYPE_TEMPLATE_INFO (type) != NULL)\n     {\n       /* First, check for the template\n \t args <char, std::char_traits<char> > .  */\n@@ -587,35 +579,29 @@ find_substitution (tree node)\n \t{\n \t  /* Got them.  Is this basic_istream?  */\n \t  if (is_std_substitution (decl, SUBID_BASIC_ISTREAM))\n-\t    {\n-\t      write_string (\"Si\");\n-\t      return 1;\n-\t    }\n+\t    abbr = \"Si\";\n \t  /* Or basic_ostream?  */\n \t  else if (is_std_substitution (decl, SUBID_BASIC_OSTREAM))\n-\t    {\n-\t      write_string (\"So\");\n-\t      return 1;\n-\t    }\n+\t    abbr = \"So\";\n \t  /* Or basic_iostream?  */\n \t  else if (is_std_substitution (decl, SUBID_BASIC_IOSTREAM))\n-\t    {\n-\t      write_string (\"Sd\");\n-\t      return 1;\n-\t    }\n+\t    abbr = \"Sd\";\n \t}\n     }\n \n   /* Check for namespace std.  */\n-  if (decl && DECL_NAMESPACE_STD_P (decl))\n+  else if (decl && DECL_NAMESPACE_STD_P (decl))\n     {\n       write_string (\"St\");\n       return 1;\n     }\n \n+  tree tags = NULL_TREE;\n+  if (OVERLOAD_TYPE_P (node))\n+    tags = lookup_attribute (\"abi_tag\", TYPE_ATTRIBUTES (type));\n   /* Now check the list of available substitutions for this mangling\n      operation.  */\n-  for (i = 0; i < size; ++i)\n+  if (!abbr || tags) for (i = 0; i < size; ++i)\n     {\n       tree candidate = (*G.substitutions)[i];\n       /* NODE is a matched to a candidate if it's the same decl node or\n@@ -630,8 +616,19 @@ find_substitution (tree node)\n \t}\n     }\n \n-  /* No substitution found.  */\n-  return 0;\n+  if (!abbr)\n+    /* No substitution found.  */\n+    return 0;\n+\n+  write_string (abbr);\n+  if (tags)\n+    {\n+      /* If there are ABI tags on the abbreviation, it becomes\n+\t a substitution candidate.  */\n+      write_abi_tags (tags);\n+      add_substitution (node);\n+    }\n+  return 1;\n }\n \n "}, {"sha": "9ec78a9ac1aeae1cb0a57eb22eaa630bdcea96cf", "filename": "gcc/testsuite/g++.dg/abi/abi-tag9.C", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eaaa505695d75765f570ec3e18680cc394a377/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag9.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eaaa505695d75765f570ec3e18680cc394a377/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag9.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fabi%2Fabi-tag9.C?ref=00eaaa505695d75765f570ec3e18680cc394a377", "patch": "@@ -0,0 +1,11 @@\n+// { dg-final { scan-assembler \"_Z1fSsB3fooS_\" } }\n+\n+namespace std {\n+  template <class T> struct char_traits {};\n+  template <class T> struct allocator {};\n+  template <class T, class U, class V>\n+  struct __attribute ((abi_tag (\"foo\"))) basic_string { };\n+  typedef basic_string<char,char_traits<char>,allocator<char> > string;\n+}\n+\n+void f(std::string,std::string) {}"}, {"sha": "829f684d393540aa99c1c3cd7f253d4e8a567419", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eaaa505695d75765f570ec3e18680cc394a377/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eaaa505695d75765f570ec3e18680cc394a377/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=00eaaa505695d75765f570ec3e18680cc394a377", "patch": "@@ -1,3 +1,7 @@\n+2014-09-26  Jason Merrill  <jason@redhat.com>\n+\n+\t* cp-demangle.c (d_substitution): Handle abi tags on abbreviation.\n+\n 2014-09-26  Max Ostapenko  <m.ostapenko@partner.samsung.com>\n \n \t* pex-common.h (struct pex_funcs): Add new parameter for open_write field."}, {"sha": "77c2cee9d176015ffd681b43e9f55db00b2801f4", "filename": "libiberty/cp-demangle.c", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eaaa505695d75765f570ec3e18680cc394a377/libiberty%2Fcp-demangle.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eaaa505695d75765f570ec3e18680cc394a377/libiberty%2Fcp-demangle.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Fcp-demangle.c?ref=00eaaa505695d75765f570ec3e18680cc394a377", "patch": "@@ -3687,6 +3687,7 @@ d_substitution (struct d_info *di, int prefix)\n \t    {\n \t      const char *s;\n \t      int len;\n+\t      struct demangle_component *c;\n \n \t      if (p->set_last_name != NULL)\n \t\tdi->last_name = d_make_sub (di, p->set_last_name,\n@@ -3702,7 +3703,15 @@ d_substitution (struct d_info *di, int prefix)\n \t\t  len = p->simple_len;\n \t\t}\n \t      di->expansion += len;\n-\t      return d_make_sub (di, s, len);\n+\t      c = d_make_sub (di, s, len);\n+\t      if (d_peek_char (di) == 'B')\n+\t\t{\n+\t\t  /* If there are ABI tags on the abbreviation, it becomes\n+\t\t     a substitution candidate.  */\n+\t\t  c = d_abi_tags (di, c);\n+\t\t  d_add_substitution (di, c);\n+\t\t}\n+\t      return c;\n \t    }\n \t}\n "}, {"sha": "a030685de0894e130e784e609b8cb0e612d5857d", "filename": "libiberty/testsuite/demangle-expected", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/00eaaa505695d75765f570ec3e18680cc394a377/libiberty%2Ftestsuite%2Fdemangle-expected", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/00eaaa505695d75765f570ec3e18680cc394a377/libiberty%2Ftestsuite%2Fdemangle-expected", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2Ftestsuite%2Fdemangle-expected?ref=00eaaa505695d75765f570ec3e18680cc394a377", "patch": "@@ -4353,3 +4353,6 @@ xxx\n _QueueNotification_QueueController__$4PPPPPPPM_A_INotice___Z\n _QueueNotification_QueueController__$4PPPPPPPM_A_INotice___Z\n _QueueNotification_QueueController__$4PPPPPPPM_A_INotice___Z\n+--format=gnu-v3\n+_Z1fSsB3fooS_\n+f(std::string[abi:foo], std::string[abi:foo])"}]}