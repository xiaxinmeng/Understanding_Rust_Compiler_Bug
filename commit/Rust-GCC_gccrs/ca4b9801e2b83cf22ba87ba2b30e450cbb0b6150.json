{"sha": "ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150", "node_id": "C_kwDOANBUbNoAKGNhNGI5ODAxZTJiODNjZjIyYmE4N2JhMmIzMGU0NTBjYmIwYjYxNTA", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2022-09-05T15:51:34Z"}, "committer": {"name": "Marc Poulhi\u00e8s", "email": "poulhies@adacore.com", "date": "2022-09-12T08:16:52Z"}, "message": "[Ada] Temporary tweak new expansion of contracts\n\nIn the case of a function, the new expansion of contracts makes use of an\nextended return statement to store the result of the function in the return\nobject while the post-conditions are evaluated.\n\nUnfortunately GNAT does not elide the copy of the return object for extended\nreturn statements for the time being, so this scheme incurs an extra copy of\nthe return value on the primary or secondary stack, as well as an additional\npair of calls to Adjust/Finalize when the return type needs finalization.\n\nThis temporarily changes the expansion to use a block statement containing a\nrenaming, which does not incur the extra copy provided that it is manually\nadjusted to be recognized by the existing \"tail call\" optimization present\nin the Expand_Simple_Function_Return routine.\n\ngcc/ada/\n\n\t* contracts.adb (uild_Subprogram_Contract_Wrapper): Remove useless\n\tlocal variable. In the case of a function, replace the extended\n\treturn statement by a block statement declaring a renaming of the\n\tcall to the local subprogram after removing side effects manually.\n\t(Expand_Subprogram_Contract): Adjust description accordingly.\n\t* exp_ch6.adb (Expand_Ctrl_Function_Call): Rewrite obsolete\n\tcomment and do not apply the transformation twice.\n\t* sem_attr.adb (Analyze_Attribute_Old_Result): Now expect a block\n\tstatement instead of an extended return statement.", "tree": {"sha": "6decf5098283a05f09706e02a3519b1f32b9d58d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6decf5098283a05f09706e02a3519b1f32b9d58d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150/comments", "author": null, "committer": {"login": "dkm", "id": 87603, "node_id": "MDQ6VXNlcjg3NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/87603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dkm", "html_url": "https://github.com/dkm", "followers_url": "https://api.github.com/users/dkm/followers", "following_url": "https://api.github.com/users/dkm/following{/other_user}", "gists_url": "https://api.github.com/users/dkm/gists{/gist_id}", "starred_url": "https://api.github.com/users/dkm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dkm/subscriptions", "organizations_url": "https://api.github.com/users/dkm/orgs", "repos_url": "https://api.github.com/users/dkm/repos", "events_url": "https://api.github.com/users/dkm/events{/privacy}", "received_events_url": "https://api.github.com/users/dkm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ccd61dfee0f21cf049653cfdaf2c28750ebe3cd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9ccd61dfee0f21cf049653cfdaf2c28750ebe3cd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9ccd61dfee0f21cf049653cfdaf2c28750ebe3cd"}], "stats": {"total": 133, "additions": 91, "deletions": 42}, "files": [{"sha": "34db67a8cabf2d4ac72c4d044c3fbf52a9dd9b14", "filename": "gcc/ada/contracts.adb", "status": "modified", "additions": 84, "deletions": 35, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150/gcc%2Fada%2Fcontracts.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150/gcc%2Fada%2Fcontracts.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fcontracts.adb?ref=ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150", "patch": "@@ -1577,7 +1577,6 @@ package body Contracts is\n       Decls   : List_Id;\n       Result  : Entity_Id)\n    is\n-      Actuals   : constant List_Id    := Empty_List;\n       Body_Decl : constant Entity_Id  := Unit_Declaration_Node (Body_Id);\n       Loc       : constant Source_Ptr := Sloc (Body_Decl);\n       Spec_Id   : constant Entity_Id  := Corresponding_Spec (Body_Decl);\n@@ -1606,11 +1605,11 @@ package body Contracts is\n       Ret_Type := Etype (Subp_Id);\n \n       --  Generate the contracts wrapper by moving the original declarations\n-      --  and statements within a local subprogram and calling it within\n-      --  an extended return to preserve the result for the purpose of\n-      --  evaluating postconditions, contracts, type invariants, etc.\n+      --  and statements within a local subprogram, calling it and possibly\n+      --  preserving the result for the purpose of evaluating postconditions,\n+      --  contracts, type invariants, etc.\n \n-      --  Generate:\n+      --  In the case of a function, generate:\n       --\n       --  function Original_Func (X : in out Integer) return Typ is\n       --     <prologue renamings>\n@@ -1623,13 +1622,25 @@ package body Contracts is\n       --     end;\n       --\n       --  begin\n-      --     return\n-      --        Result_Obj : constant Typ := _Wrapped_Statements\n-      --     do\n+      --     declare\n+      --        type Axx is access all Typ;\n+      --        Rxx : constant Axx := _Wrapped_Statements'reference;\n+      --        Result_Obj : Typ renames Rxx.all;\n+      --\n+      --     begin\n       --        <postconditions statments>\n-      --     end return;\n+      --        return Rxx.all;\n+      --     end;\n       --  end;\n       --\n+      --  This sequence is recognized by Expand_Simple_Function_Return as a\n+      --  tail call, in other words equivalent to \"return _Wrapped_Statements;\"\n+      --  and thus the copy to the anonymous return object is elided, including\n+      --  a pair of calls to Adjust/Finalize for types requiring finalization.\n+\n+      --  Note that an extended return statement does not yield the same result\n+      --  because the copy of the return object is not elided by GNAT for now.\n+\n       --  Or, in the case of a procedure:\n       --\n       --  procedure Original_Proc (X : in out Integer) is\n@@ -1680,8 +1691,7 @@ package body Contracts is\n       Set_Declarations (Body_Decl, Decls);\n       Set_Handled_Statement_Sequence (Body_Decl,\n         Make_Handled_Sequence_Of_Statements (Loc,\n-          End_Label  => Make_Identifier (Loc, Chars (Wrapper_Id)),\n-          Statements => New_List));\n+          End_Label  => Make_Identifier (Loc, Chars (Wrapper_Id))));\n \n       --  Move certain flags which are relevant to the body\n \n@@ -1697,7 +1707,7 @@ package body Contracts is\n       Set_Has_Pragma_Inline_Always\n         (Wrapper_Id, Has_Pragma_Inline_Always (Subp_Id));\n \n-      --  Generate call to the wrapper\n+      --  Prepend a call to the wrapper when the subprogram is a procedure\n \n       if No (Ret_Type) or else Ret_Type = Standard_Void_Type then\n          Prepend_To (Stmts,\n@@ -1706,25 +1716,64 @@ package body Contracts is\n          Set_Statements\n            (Handled_Statement_Sequence (Body_Decl), Stmts);\n \n-      --  Generate the post-execution statements and the extended return\n-      --  when the subprogram being wrapped is a function.\n+      --  Declare a renaming of the result of the call to the wrapper and\n+      --  append a return of the result of the call when the subprogram is\n+      --  a function, after manually removing the side effects. Note that\n+      --  we cannot call Remove_Side_Effects here because nothing has been\n+      --  analyzed yet and we cannot return the renaming itself because\n+      --  Expand_Simple_Function_Return expects an explicit dereference.\n \n       else\n-         Set_Statements (Handled_Statement_Sequence (Body_Decl), New_List (\n-           Make_Extended_Return_Statement (Loc,\n-             Return_Object_Declarations => New_List (\n-                Make_Object_Declaration (Loc,\n-                  Defining_Identifier => Result,\n-                  Object_Definition   =>\n-                    New_Occurrence_Of (Ret_Type, Loc),\n-                  Expression          =>\n-                    Make_Function_Call (Loc,\n-                      Name                   =>\n-                        New_Occurrence_Of (Wrapper_Id, Loc),\n-                      Parameter_Associations => Actuals))),\n-             Handled_Statement_Sequence =>\n-               Make_Handled_Sequence_Of_Statements (Loc,\n-                 Statements => Stmts))));\n+         declare\n+            A_Id : constant Node_Id := Make_Temporary (Loc, 'A');\n+            R_Id : constant Node_Id := Make_Temporary (Loc, 'R');\n+\n+         begin\n+            Set_Statements (Handled_Statement_Sequence (Body_Decl), New_List (\n+              Make_Block_Statement (Loc,\n+\n+                Declarations => New_List (\n+                  Make_Full_Type_Declaration (Loc,\n+                    Defining_Identifier => A_Id,\n+                    Type_Definition     =>\n+                      Make_Access_To_Object_Definition (Loc,\n+                        All_Present        => True,\n+                        Null_Exclusion_Present => True,\n+                        Subtype_Indication =>\n+                          New_Occurrence_Of (Ret_Type, Loc))),\n+\n+                  Make_Object_Declaration (Loc,\n+                    Defining_Identifier => R_Id,\n+                    Object_Definition   => New_Occurrence_Of (A_Id, Loc),\n+                    Constant_Present    => True,\n+                    Expression          =>\n+                      Make_Reference (Loc,\n+                        Make_Function_Call (Loc,\n+                          Name => New_Occurrence_Of (Wrapper_Id, Loc)))),\n+\n+                  Make_Object_Renaming_Declaration (Loc,\n+                    Defining_Identifier => Result,\n+                    Subtype_Mark        => New_Occurrence_Of (Ret_Type, Loc),\n+                    Name                =>\n+                      Make_Explicit_Dereference (Loc,\n+                        New_Occurrence_Of (R_Id, Loc)))),\n+\n+                Handled_Statement_Sequence =>\n+                  Make_Handled_Sequence_Of_Statements (Loc,\n+                    Statements => Stmts))));\n+\n+            Append_To (Stmts,\n+              Make_Simple_Return_Statement (Loc,\n+                Expression =>\n+                  Make_Explicit_Dereference (Loc,\n+                    New_Occurrence_Of (R_Id, Loc))));\n+\n+            --  It is required for Is_Related_To_Func_Return to return True\n+            --  that the temporary Rxx be related to the expression of the\n+            --  simple return statement built just above.\n+\n+            Set_Related_Expression (R_Id, Expression (Last (Stmts)));\n+         end;\n       end if;\n    end Build_Subprogram_Contract_Wrapper;\n \n@@ -3387,16 +3436,16 @@ package body Contracts is\n       --       <preconditions from body>\n       --       <contract case conditions>\n \n-      --       function _wrapped_statements (...) return ... is\n+      --       function _Wrapped_Statements (...) return ... is\n       --          <source declarations>\n       --       begin\n       --          <source statements>\n-      --       end _wrapped_statements;\n+      --       end _Wrapped_Statements;\n \n       --    begin\n-      --       return\n-      --          Result : ... := _wrapped_statements\n-      --       do\n+      --       declare\n+      --          Result : ... renames _Wrapped_Statements;\n+      --       begin\n       --          <refined postconditions from body>\n       --          <postconditions from body>\n       --          <postconditions from spec>\n@@ -3405,7 +3454,7 @@ package body Contracts is\n       --          <invariant check of function result>\n       --          <invariant and predicate checks of parameters\n       --          return Result;\n-      --       end return;\n+      --       end;\n       --    end Original_Code;\n \n       --  Step 1: augment contracts list with postconditions associated with"}, {"sha": "0873191bf476d633f4b86a99012199a9f345408f", "filename": "gcc/ada/exp_ch6.adb", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150/gcc%2Fada%2Fexp_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150/gcc%2Fada%2Fexp_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch6.adb?ref=ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150", "patch": "@@ -5052,11 +5052,11 @@ package body Exp_Ch6 is\n \n       Set_Analyzed (N);\n \n-      --  A function which returns a controlled object uses the secondary\n-      --  stack. Rewrite the call into a temporary which obtains the result of\n-      --  the function using 'reference.\n+      --  Apply the transformation, unless it was already applied manually\n \n-      Remove_Side_Effects (N);\n+      if Nkind (Par) /= N_Reference then\n+         Remove_Side_Effects (N);\n+      end if;\n \n       --  The side effect removal of the function call produced a temporary.\n       --  When the context is a case expression, if expression, or expression"}, {"sha": "f33da069207fd35c776cc246699df635753e9b74", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=ca4b9801e2b83cf22ba87ba2b30e450cbb0b6150", "patch": "@@ -1454,10 +1454,10 @@ package body Sem_Attr is\n             Subp_Decl := Find_Related_Declaration_Or_Body (Prag);\n          end if;\n \n-         --  'Old objects appear in extended return statements as part of\n-         --  the expansion of contract wrappers.\n+         --  'Old objects appear in block statements as part of the expansion\n+         --  of contract wrappers.\n \n-         if Nkind (Subp_Decl) = N_Extended_Return_Statement then\n+         if Nkind (Subp_Decl) = N_Block_Statement then\n             Subp_Decl := Parent (Parent (Subp_Decl));\n          end if;\n "}]}