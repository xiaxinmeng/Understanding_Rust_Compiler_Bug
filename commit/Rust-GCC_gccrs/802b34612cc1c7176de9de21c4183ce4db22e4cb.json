{"sha": "802b34612cc1c7176de9de21c4183ce4db22e4cb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODAyYjM0NjEyY2MxYzcxNzZkZTlkZTIxYzQxODNjZTRkYjIyZTRjYg==", "commit": {"author": {"name": "Daniel Jacobowitz", "email": "dan@codesourcery.com", "date": "2005-11-04T14:51:20Z"}, "committer": {"name": "Daniel Jacobowitz", "email": "drow@gcc.gnu.org", "date": "2005-11-04T14:51:20Z"}, "message": "lib1funcs.asm: Don't include \"libunwind.S\".\n\n\t* config/arm/lib1funcs.asm: Don't include \"libunwind.S\".\n\t* config/arm/libunwind.S: Include \"lib1funcs.asm\".\n\t* config/arm/t-bpabi (LIB1ASMFUNCS): Remove _unwind.\n\t(LIB2ADDEH): Add libunwind.S.\n\t(LIB2ADDEHDEP): Add lib1funcs.asm.\n\t* mklibgcc.in: Handle asm files in libgcc_eh.a.\n\nFrom-SVN: r106488", "tree": {"sha": "a28603023ec39ac71341399247a92265c0d9be8d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a28603023ec39ac71341399247a92265c0d9be8d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/802b34612cc1c7176de9de21c4183ce4db22e4cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802b34612cc1c7176de9de21c4183ce4db22e4cb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/802b34612cc1c7176de9de21c4183ce4db22e4cb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/802b34612cc1c7176de9de21c4183ce4db22e4cb/comments", "author": null, "committer": null, "parents": [{"sha": "aab384ae9af4eaa4110a9f5d0a54c2fcac194441", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/aab384ae9af4eaa4110a9f5d0a54c2fcac194441", "html_url": "https://github.com/Rust-GCC/gccrs/commit/aab384ae9af4eaa4110a9f5d0a54c2fcac194441"}], "stats": {"total": 101, "additions": 68, "deletions": 33}, "files": [{"sha": "f24cb9891958bc6801f6d5b1aa8e4e9c208169b4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802b34612cc1c7176de9de21c4183ce4db22e4cb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802b34612cc1c7176de9de21c4183ce4db22e4cb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=802b34612cc1c7176de9de21c4183ce4db22e4cb", "patch": "@@ -1,3 +1,12 @@\n+2005-11-04  Daniel Jacobowitz  <dan@codesourcery.com>\n+\n+\t* config/arm/lib1funcs.asm: Don't include \"libunwind.S\".\n+\t* config/arm/libunwind.S: Include \"lib1funcs.asm\".\n+\t* config/arm/t-bpabi (LIB1ASMFUNCS): Remove _unwind.\n+\t(LIB2ADDEH): Add libunwind.S.\n+\t(LIB2ADDEHDEP): Add lib1funcs.asm.\n+\t* mklibgcc.in: Handle asm files in libgcc_eh.a.\n+\n 2005-11-04  Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n \n \tPR fortran/18452"}, {"sha": "364d9fea8048e25fbe566a9342f7e413774fcd84", "filename": "gcc/config/arm/lib1funcs.asm", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802b34612cc1c7176de9de21c4183ce4db22e4cb/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802b34612cc1c7176de9de21c4183ce4db22e4cb/gcc%2Fconfig%2Farm%2Flib1funcs.asm", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flib1funcs.asm?ref=802b34612cc1c7176de9de21c4183ce4db22e4cb", "patch": "@@ -1315,5 +1315,4 @@ LSYM(Lchange_\\register):\n #include \"ieee754-df.S\"\n #include \"ieee754-sf.S\"\n #include \"bpabi.S\"\n-#include \"libunwind.S\"\n #endif /* __symbian__ */"}, {"sha": "8d226df3fd2feb715f1c386b99c3ba940f7c6877", "filename": "gcc/config/arm/libunwind.S", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802b34612cc1c7176de9de21c4183ce4db22e4cb/gcc%2Fconfig%2Farm%2Flibunwind.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802b34612cc1c7176de9de21c4183ce4db22e4cb/gcc%2Fconfig%2Farm%2Flibunwind.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Flibunwind.S?ref=802b34612cc1c7176de9de21c4183ce4db22e4cb", "patch": "@@ -1,5 +1,5 @@\n /* Support functions for the unwinder.\n-   Copyright (C) 2003, 2004  Free Software Foundation, Inc.\n+   Copyright (C) 2003, 2004, 2005  Free Software Foundation, Inc.\n    Contributed by Paul Brook\n \n    This file is free software; you can redistribute it and/or modify it\n@@ -26,7 +26,9 @@\n    the Free Software Foundation, 51 Franklin Street, Fifth Floor,\n    Boston, MA 02110-1301, USA.  */\n \n-#ifdef L_unwind\n+#ifndef __symbian__\n+\n+#include \"lib1funcs.asm\"\n \n .macro UNPREFIX name\n \t.global SYM (\\name)\n@@ -113,4 +115,4 @@ ARM_FUNC_START gnu_Unwind_Save_VFP\n UNWIND_WRAPPER _Unwind_RaiseException\n UNWIND_WRAPPER _Unwind_Resume\n \n-#endif  /* L_unwind */\n+#endif  /* __symbian__ */"}, {"sha": "b5c6a0b617171f9eaf9b8d40fbeb4e0549e1b1b7", "filename": "gcc/config/arm/t-bpabi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802b34612cc1c7176de9de21c4183ce4db22e4cb/gcc%2Fconfig%2Farm%2Ft-bpabi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802b34612cc1c7176de9de21c4183ce4db22e4cb/gcc%2Fconfig%2Farm%2Ft-bpabi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Ft-bpabi?ref=802b34612cc1c7176de9de21c4183ce4db22e4cb", "patch": "@@ -1,15 +1,15 @@\n # Add the bpabi.S functions.\n-LIB1ASMFUNCS += _aeabi_lcmp _aeabi_ulcmp _aeabi_ldivmod _aeabi_uldivmod \\\n-  _unwind\n+LIB1ASMFUNCS += _aeabi_lcmp _aeabi_ulcmp _aeabi_ldivmod _aeabi_uldivmod\n \n # Add the BPABI C functions.\n LIB2FUNCS_EXTRA = $(srcdir)/config/arm/bpabi.c \\\n \t\t  $(srcdir)/config/arm/unaligned-funcs.c\n \n UNWIND_H = $(srcdir)/config/arm/unwind-arm.h\n LIB2ADDEH = $(srcdir)/config/arm/unwind-arm.c \\\n+  $(srcdir)/config/arm/libunwind.S \\\n   $(srcdir)/config/arm/pr-support.c $(srcdir)/unwind-c.c\n-LIB2ADDEHDEP = $(UNWIND_H)\n+LIB2ADDEHDEP = $(UNWIND_H) $(srcdir)/config/$(LIB1ASMSRC)\n \n # Add the BPABI names.\n SHLIB_MAPFILES += $(srcdir)/config/arm/libgcc-bpabi.ver"}, {"sha": "b36d31ef5113db14a727e631b9acd17aa857909f", "filename": "gcc/mklibgcc.in", "status": "modified", "additions": 51, "deletions": 26, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/802b34612cc1c7176de9de21c4183ce4db22e4cb/gcc%2Fmklibgcc.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/802b34612cc1c7176de9de21c4183ce4db22e4cb/gcc%2Fmklibgcc.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmklibgcc.in?ref=802b34612cc1c7176de9de21c4183ce4db22e4cb", "patch": "@@ -510,36 +510,55 @@ for ml in $MULTILIBS; do\n \n   # If we don't have libgcc_eh.a, only LIB2ADDEH matters.  If we do, only\n   # LIB2ADDEHSTATIC and LIB2ADDEHSHARED matter.  (Usually all three are\n-  # identical.)  We do _not_ handle assembly files in this context.\n+  # identical.)\n \n   if [ \"$libgcc_eh_a\" ]; then\n     for file in $LIB2ADDEHSTATIC; do\n-      case $file in\n-        *.c) ;;\n-\t*)   echo \"Unhandled extension: $file\">&2; exit 1 ;;\n-       esac\n-\n-      name=`echo $file | sed -e 's/[.]c$//'`\n+      name=`echo $file | sed -e 's/[.][cSo]$//' -e 's/[.]asm$//'`\n       oname=`echo $name | sed -e 's,.*/,,'`\n       out=\"libgcc/${dir}/${oname}${objext}\"\n \n-      echo $out: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep\n-      echo \"\t$gcc_compile\" $flags '$(vis_hide)' -fexceptions -c $file -o $out\n+      case $file in\n+        *.c)\n+\t  echo $out: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep\n+\t  echo \"\t$gcc_compile\" $flags -fexceptions '$(vis_hide)' -c $file -o $out\n+\t  ;;\n+\t*.asm | *.S)\n+\t  # We have to compile it twice in order to establish the list\n+\t  # of symbols to be marked hidden.\n+\t  outV=\"libgcc/${dir}/${oname}.vis\"\n+\t  outT=\"libgcc/${dir}/${oname}_t${objext}\"\n+\t  echo ${outT}: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep\n+\t  echo \"\t$gcc_compile\" $flags -xassembler-with-cpp \\\n+\t\t  -c $file -o ${outT}\n+\t  echo $out: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep $outV\n+\t  echo \"\t$gcc_compile\" $flags -xassembler-with-cpp \\\n+\t\t  -include $outV -c $file -o $out\n+\t  echo \"${outV}: ${outT}; \\$(gen-hide-list)\"\n+\t  ;;\n+\t*)   echo \"Unhandled extension: $file\">&2; exit 1 ;;\n+      esac\n+\n       echo $libgcc_eh_a: $out\n     done\n \n     for file in $LIB2ADDEHSHARED; do\n-      case $file in\n-        *.c) ;;\n-\t*)   echo \"Unhandled extension: $file\">&2; exit 1 ;;\n-       esac\n-\n-      name=`echo $file | sed -e 's/[.]c$//'`\n+      name=`echo $file | sed -e 's/[.][cSo]$//' -e 's/[.]asm$//'`\n       oname=`echo $name | sed -e 's,.*/,,'`\n       outS=\"libgcc/${dir}/${oname}_s${objext}\"\n \n-      echo $outS: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep\n-      echo \"\t$gcc_s_compile\" $flags -fexceptions -c $file -o $outS\n+      case $file in\n+        *.c)\n+\t  echo $outS: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep\n+\t  echo \"\t$gcc_s_compile\" $flags -fexceptions -c $file -o $outS\n+\t  ;;\n+\t*.asm | *.S)\n+\t  echo $outS: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep\n+\t  echo \"\t$gcc_s_compile\" $flags -xassembler-with-cpp -c $file -o $outS\n+\t  ;;\n+\t*)   echo \"Unhandled extension: $file\">&2; exit 1 ;;\n+      esac\n+\n       echo $libgcc_s_so: $outS\n       if [ \"$SHLIB_MKMAP\" ]; then\n \techo libgcc/${dir}/libgcc.map: $outS\n@@ -561,22 +580,28 @@ for ml in $MULTILIBS; do\n \n   else # no libgcc_eh.a\n     for file in $LIB2ADDEH; do\n-      case $file in\n-        *.c) ;;\n-\t*)   echo \"Unhandled extension: $file\">&2; exit 1 ;;\n-       esac\n-\n-      name=`echo $file | sed -e 's/[.]c$//'`\n+      name=`echo $file | sed -e 's/[.][cSo]$//' -e 's/[.]asm$//'`\n       oname=`echo $name | sed -e 's,.*/,,'`\n       out=\"libgcc/${dir}/${oname}${objext}\"\n \n-      echo $out: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep\n-      echo \"\t$gcc_compile\" $flags -fexceptions '$(vis_hide)' -c $file -o $out\n+      case $file in\n+        *.c)\n+\t  echo $out: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep\n+\t  echo \"\t$gcc_compile\" $flags '$(vis_hide)' -fexceptions -c $file -o $out\n+\t  ;;\n+\t*.asm | *.S)\n+\t  echo $out: stmp-dirs $file $LIB2ADDEHDEP $libgcc_dep\n+\t  echo \"\t$gcc_compile\" $flags -xassembler-with-cpp \\\n+\t\t  -c $file -o $out\n+\t  ;;\n+\t*)   echo \"Unhandled extension: $file\">&2; exit 1 ;;\n+      esac\n+\n       echo $libgcc_a: $out\n     done\n   fi\n \n-  # Again, this does not handle assembly.\n+  # We do _not_ handle assembly files in this context.\n   if [ \"$LIBUNWIND\" ]; then\n     for file in $LIBUNWIND; do\n       case $file in"}]}