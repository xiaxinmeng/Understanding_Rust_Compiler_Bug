{"sha": "f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjgxZTYyNTBkNWFhOTJiNDlmZjFhZWYyMmRlYWU1YmI3ZGNlMWQ5YQ==", "commit": {"author": {"name": "Robert Dewar", "email": "dewar@adacore.com", "date": "2005-06-16T08:43:32Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2005-06-16T08:43:32Z"}, "message": "opt.ads, opt.adb: New flags for persistent_bss mode Add Ada_Version_Explicit...\n\n2005-06-14  Robert Dewar  <dewar@adacore.com>\n\n\t* opt.ads, opt.adb: New flags for persistent_bss mode\n\tAdd Ada_Version_Explicit, for implementation of AI-362\n\tAdd Assertions_Enabled_Config and associated handling\n\tNeeded since setting can be changed with Assertion_Policy pragma\n\tAdd new flag Warn_On_Ada_2005_Compatibility\n\n\t* switch-c.adb: Recognize -gnatwy/Y\n\tSet Ada_Version_Explicit, for implementation of AI-362\n\tThe -gnatg switch now includes -gnatyu\n\n\t* usage.adb: Add -gnatwy/Y\n\tRemove wrong asterisk on -gnatwX line\n\tAdd line for -gnatyu switch\n\nFrom-SVN: r101049", "tree": {"sha": "cffa0da8d27a20221632d034280fd6cfc6feb739", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/cffa0da8d27a20221632d034280fd6cfc6feb739"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a/comments", "author": null, "committer": null, "parents": [{"sha": "ebccab778e3265f39cae0b3bd45288f20b9d813d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ebccab778e3265f39cae0b3bd45288f20b9d813d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ebccab778e3265f39cae0b3bd45288f20b9d813d"}], "stats": {"total": 358, "additions": 217, "deletions": 141}, "files": [{"sha": "5337e5821fa7f6c661c146f43de2dc39fac625db", "filename": "gcc/ada/opt.adb", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a/gcc%2Fada%2Fopt.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a/gcc%2Fada%2Fopt.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.adb?ref=f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1992-2004, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1992-2005, Free Software Foundation, Inc.         --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n -- terms of the  GNU General Public License as published  by the Free Soft- --\n@@ -50,11 +50,14 @@ package body Opt is\n    procedure Register_Opt_Config_Switches is\n    begin\n       Ada_Version_Config                    := Ada_Version;\n+      Ada_Version_Explicit_Config           := Ada_Version_Explicit;\n+      Assertions_Enabled_Config             := Assertions_Enabled;\n       Dynamic_Elaboration_Checks_Config     := Dynamic_Elaboration_Checks;\n       Exception_Locations_Suppressed_Config := Exception_Locations_Suppressed;\n       Extensions_Allowed_Config             := Extensions_Allowed;\n       External_Name_Exp_Casing_Config       := External_Name_Exp_Casing;\n       External_Name_Imp_Casing_Config       := External_Name_Imp_Casing;\n+      Persistent_BSS_Mode_Config            := Persistent_BSS_Mode;\n       Polling_Required_Config               := Polling_Required;\n       Use_VADS_Size_Config                  := Use_VADS_Size;\n    end Register_Opt_Config_Switches;\n@@ -66,11 +69,14 @@ package body Opt is\n    procedure Restore_Opt_Config_Switches (Save : Config_Switches_Type) is\n    begin\n       Ada_Version                    := Save.Ada_Version;\n+      Ada_Version_Explicit           := Save.Ada_Version_Explicit;\n+      Assertions_Enabled             := Save.Assertions_Enabled;\n       Dynamic_Elaboration_Checks     := Save.Dynamic_Elaboration_Checks;\n       Exception_Locations_Suppressed := Save.Exception_Locations_Suppressed;\n       Extensions_Allowed             := Save.Extensions_Allowed;\n       External_Name_Exp_Casing       := Save.External_Name_Exp_Casing;\n       External_Name_Imp_Casing       := Save.External_Name_Imp_Casing;\n+      Persistent_BSS_Mode            := Save.Persistent_BSS_Mode;\n       Polling_Required               := Save.Polling_Required;\n       Use_VADS_Size                  := Save.Use_VADS_Size;\n    end Restore_Opt_Config_Switches;\n@@ -82,11 +88,14 @@ package body Opt is\n    procedure Save_Opt_Config_Switches (Save : out Config_Switches_Type) is\n    begin\n       Save.Ada_Version                    := Ada_Version;\n+      Save.Ada_Version_Explicit           := Ada_Version_Explicit;\n+      Save.Assertions_Enabled             := Assertions_Enabled;\n       Save.Dynamic_Elaboration_Checks     := Dynamic_Elaboration_Checks;\n       Save.Exception_Locations_Suppressed := Exception_Locations_Suppressed;\n       Save.Extensions_Allowed             := Extensions_Allowed;\n       Save.External_Name_Exp_Casing       := External_Name_Exp_Casing;\n       Save.External_Name_Imp_Casing       := External_Name_Imp_Casing;\n+      Save.Persistent_BSS_Mode            := Persistent_BSS_Mode;\n       Save.Polling_Required               := Polling_Required;\n       Save.Use_VADS_Size                  := Use_VADS_Size;\n    end Save_Opt_Config_Switches;\n@@ -99,32 +108,39 @@ package body Opt is\n    begin\n       if Internal_Unit then\n          Ada_Version                := Ada_Version_Runtime;\n+         Assertions_Enabled         := False;\n          Dynamic_Elaboration_Checks := False;\n          Extensions_Allowed         := True;\n          External_Name_Exp_Casing   := As_Is;\n          External_Name_Imp_Casing   := Lowercase;\n+         Persistent_BSS_Mode        := False;\n          Use_VADS_Size              := False;\n \n       else\n          Ada_Version                := Ada_Version_Config;\n+         Assertions_Enabled         := Assertions_Enabled_Config;\n          Dynamic_Elaboration_Checks := Dynamic_Elaboration_Checks_Config;\n          Extensions_Allowed         := Extensions_Allowed_Config;\n          External_Name_Exp_Casing   := External_Name_Exp_Casing_Config;\n          External_Name_Imp_Casing   := External_Name_Imp_Casing_Config;\n+         Persistent_BSS_Mode        := Persistent_BSS_Mode_Config;\n          Use_VADS_Size              := Use_VADS_Size_Config;\n       end if;\n \n       Exception_Locations_Suppressed := Exception_Locations_Suppressed_Config;\n       Polling_Required               := Polling_Required_Config;\n+      Ada_Version_Explicit           := Ada_Version_Explicit_Config;\n    end Set_Opt_Config_Switches;\n \n    ---------------\n    -- Tree_Read --\n    ---------------\n \n    procedure Tree_Read is\n-      Tree_Version_String_Len : Nat;\n-      Ada_Version_Config_Val  : Nat;\n+      Tree_Version_String_Len         : Nat;\n+      Ada_Version_Config_Val          : Nat;\n+      Ada_Version_Explicit_Config_Val : Nat;\n+      Assertions_Enabled_Config_Val   : Nat;\n \n    begin\n       Tree_Read_Int  (Tree_ASIS_Version_Number);\n@@ -138,12 +154,19 @@ package body Opt is\n       Tree_Read_Data (Warning_Mode'Address,\n                       Warning_Mode_Type'Object_Size / Storage_Unit);\n       Tree_Read_Int  (Ada_Version_Config_Val);\n+      Tree_Read_Int  (Ada_Version_Explicit_Config_Val);\n+      Tree_Read_Int  (Assertions_Enabled_Config_Val);\n       Tree_Read_Bool (All_Errors_Mode);\n       Tree_Read_Bool (Assertions_Enabled);\n       Tree_Read_Bool (Enable_Overflow_Checks);\n       Tree_Read_Bool (Full_List);\n \n-      Ada_Version_Config := Ada_Version_Type'Val (Ada_Version_Config_Val);\n+      Ada_Version_Config :=\n+        Ada_Version_Type'Val (Ada_Version_Config_Val);\n+      Ada_Version_Explicit_Config :=\n+        Ada_Version_Type'Val (Ada_Version_Explicit_Config_Val);\n+      Assertions_Enabled_Config :=\n+        Boolean'Val (Assertions_Enabled_Config_Val);\n \n       --  Read version string: we have to check the length first\n \n@@ -199,6 +222,8 @@ package body Opt is\n       Tree_Write_Data (Warning_Mode'Address,\n                        Warning_Mode_Type'Object_Size / Storage_Unit);\n       Tree_Write_Int  (Ada_Version_Type'Pos (Ada_Version_Config));\n+      Tree_Write_Int  (Ada_Version_Type'Pos (Ada_Version_Explicit_Config));\n+      Tree_Write_Int  (Boolean'Pos (Assertions_Enabled_Config));\n       Tree_Write_Bool (All_Errors_Mode);\n       Tree_Write_Bool (Assertions_Enabled);\n       Tree_Write_Bool (Enable_Overflow_Checks);"}, {"sha": "408fa46edf662127405592ffd0e70d0814f37d82", "filename": "gcc/ada/opt.ads", "status": "modified", "additions": 171, "deletions": 135, "changes": 306, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a/gcc%2Fada%2Fopt.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a/gcc%2Fada%2Fopt.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fopt.ads?ref=f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a", "patch": "@@ -31,10 +31,10 @@\n --                                                                          --\n ------------------------------------------------------------------------------\n \n---  This package contains global flags set by the initialization\n---  routine from the command line and referenced throughout the compiler,\n---  the binder, gnatmake or other GNAT tools. The comments indicate which\n---  options are used by which programs (GNAT, GNATBIND, GNATMAKE, etc).\n+--  This package contains global flags set by the initialization routine from\n+--  the command line and referenced throughout the compiler, the binder, or\n+--  other GNAT tools. The comments indicate which options are used by which\n+--  programs (GNAT, GNATBIND, GNATMAKE, etc).\n \n with Gnatvsn;  use Gnatvsn;\n with Hostparm; use Hostparm;\n@@ -70,11 +70,23 @@ package Opt is\n \n    Ada_Version : Ada_Version_Type := Ada_Version_Default;\n    --  GNAT\n-   --  Current Ada version for compiler\n+   --  Current Ada version for compiler, as set by configuration pragmas,\n+   --  compiler switches, or implicitly (to Ada_Version_Runtime) when a\n+   --  predefined or internal file is compiled.\n+\n+   Ada_Version_Explicit : Ada_Version_Type := Ada_Version_Default;\n+   --  GNAT\n+   --  Like Ada_Version, but does not get set implicitly for predefined\n+   --  or internal units, so it reflects the Ada version explicitly set\n+   --  using configuration pragmas or compiler switches (or if neither\n+   --  appears, it remains set to Ada_Version_Default). This is used in\n+   --  the rare cases (notably for pragmas Preelaborate_05 and Pure_05)\n+   --  where in the run-time we want the explicit version set.\n \n    Ada_Version_Runtime : Ada_Version_Type := Ada_05;\n    --  GNAT\n-   --  Ada version used to compile the runtime\n+   --  Ada version used to compile the runtime. Used to set Ada_Version (but\n+   --  not Ada_Version_Explicit) when compiling predefined or internal units.\n \n    Ada_Final_Suffix : constant String := \"final\";\n    Ada_Final_Name : String_Ptr := new String'(\"ada\" & Ada_Final_Suffix);\n@@ -126,7 +138,7 @@ package Opt is\n \n    Assertions_Enabled : Boolean := False;\n    --  GNAT\n-   --  Enable assertions made using pragma Assert.\n+   --  Enable assertions made using pragma Assert\n \n    ASIS_Mode : Boolean := False;\n    --  GNAT\n@@ -153,7 +165,7 @@ package Opt is\n \n    Bind_Main_Program : Boolean := True;\n    --  GNATBIND\n-   --  Set to False if not binding main Ada program.\n+   --  Set to False if not binding main Ada program\n \n    Bind_For_Library : Boolean := False;\n    --  GNATBIND\n@@ -192,11 +204,11 @@ package Opt is\n \n    Check_Only : Boolean := False;\n    --  GNATBIND\n-   --  Set to True to do checks only, no output of binder file.\n+   --  Set to True to do checks only, no output of binder file\n \n    Check_Readonly_Files : Boolean := False;\n    --  GNATMAKE\n-   --  Set to True to check readonly files during the make process.\n+   --  Set to True to check readonly files during the make process\n \n    Check_Source_Files : Boolean := True;\n    --  GNATBIND, GNATMAKE\n@@ -207,7 +219,7 @@ package Opt is\n \n    Check_Switches : Boolean := False;\n    --  GNATMAKE\n-   --  Set to True to check compiler options during the make process.\n+   --  Set to True to check compiler options during the make process\n \n    Check_Unreferenced : Boolean := False;\n    --  GNAT\n@@ -216,8 +228,8 @@ package Opt is\n \n    Check_Unreferenced_Formals : Boolean := False;\n    --  GNAT\n-   --  Set True to check for unreferenced formals. This is turned\n-   --  on by -gnatwa/wf/wu and turned off by -gnatwA/wF/wU.\n+   --  Set True to check for unreferenced formals. This is turned on by\n+   --  -gnatwa/wf/wu and turned off by -gnatwA/wF/wU.\n \n    Check_Withs : Boolean := False;\n    --  GNAT\n@@ -377,9 +389,9 @@ package Opt is\n                            Front_End_Setjmp_Longjmp_Exceptions;\n    --  GNAT\n    --  Set to the appropriate value depending on the default as given in\n-   --  system.ads (ZCX_By_Default, GCC_ZCX_Support, Front_End_ZCX_Support)\n-   --  and the use of -gnatL -gnatZ (and -gnatdX). The C convention is\n-   --  there to make this variable accessible to gigi.\n+   --  system.ads (ZCX_By_Default, GCC_ZCX_Support, Front_End_ZCX_Support) and\n+   --  the use of -gnatL -gnatZ (and -gnatdX). The C convention is there to\n+   --  make this variable accessible to gigi.\n \n    Exception_Tracebacks : Boolean := False;\n    --  GNATBIND\n@@ -450,13 +462,6 @@ package Opt is\n    --  GNATMAKE\n    --  Set to force recompilations even when the objects are up-to-date.\n \n-   Force_RM_Elaboration_Order : Boolean := False;\n-   --  GNATBIND\n-   --  True if binding with forced RM elaboration order (-f switch set)\n-   --  Note: this is considered an obsolescent option, to be removed in\n-   --  some future release. It is no longer documented. The proper way\n-   --  to get this effect is to use -gnatE and suppress elab checks.\n-\n    Full_Path_Name_For_Brief_Errors : Boolean := False;\n    --  GNAT, GNATMAKE, GNATCLEAN\n    --  When True, in Brief_Output mode, each error message line\n@@ -473,7 +478,7 @@ package Opt is\n \n    GCC_Version : constant Nat := get_gcc_version;\n    --  GNATMAKE\n-   --  Indicates which version of gcc is in use (2 = 2.8.1, 3 = 3.x).\n+   --  Indicates which version of gcc is in use (2 = 2.8.1, 3 = 3.x)\n \n    Global_Discard_Names : Boolean := False;\n    --  GNAT, GNATBIND\n@@ -554,7 +559,7 @@ package Opt is\n \n    Front_End_Inlining : Boolean := False;\n    --  GNAT\n-   --  Set True to activate inlining by front-end expansion.\n+   --  Set True to activate inlining by front-end expansion\n \n    Inline_Processing_Required : Boolean := False;\n    --  GNAT\n@@ -702,7 +707,7 @@ package Opt is\n \n    Minimal_Recompilation : Boolean := False;\n    --  GNATMAKE\n-   --  Set to True if minimal recompilation mode requested.\n+   --  Set to True if minimal recompilation mode requested\n \n    Multiple_Unit_Index : Int;\n    --  GNAT\n@@ -779,6 +784,11 @@ package Opt is\n    --  GNATBIND\n    --  True if output of list of objects is requested (-O switch set)\n \n+   Persistent_BSS_Mode : Boolean := False;\n+   --  GNAT\n+   --  True if a Persistent_BSS configuration pragma is in effect, causing\n+   --  potentially persistent data to be placed in the persistent_bss section.\n+\n    Pessimistic_Elab_Order : Boolean := False;\n    --  GNATBIND\n    --  True if pessimistic elaboration order is to be chosen (-p switch set)\n@@ -863,12 +873,12 @@ package Opt is\n \n    Stack_Checking_Enabled : Boolean;\n    --  GNAT\n-   --  Set to indicate if -fstack-check switch is set for the compilation.\n-   --  True means that the switch is set, so that stack checking is enabled.\n-   --  False means that the switch is not set (no stack checking). This\n-   --  value is obtained from the external imported value flag_stack_check\n-   --  in the gcc backend (see Frontend) and may be referenced throughout\n-   --  the compilation phases.\n+   --  Set to indicate if -fstack-check switch is set for the compilation. True\n+   --  means that the switch is set, so that stack checking is enabled. False\n+   --  means that the switch is not set (no stack checking). This value is\n+   --  obtained from the external imported value flag_stack_check in the gcc\n+   --  backend (see Frontend) and may be referenced throughout the compilation\n+   --  phases.\n \n    Style_Check : Boolean := False;\n    --  GNAT\n@@ -888,7 +898,7 @@ package Opt is\n    --  is never appropriate in GNAT_Mode (and causes troubles, including\n    --  bogus circularities, if we try to compile the run-time library with\n    --  a System extension). If GNAT_Mode is not set, then System_Extend_Unit\n-   --  is a copy of the value set in System_Extend_Pragma_Ary.\n+   --  is a copy of the value set in System_Extend_Pragma_Arg.\n \n    Subunits_Missing : Boolean := False;\n    --  GNAT\n@@ -915,10 +925,10 @@ package Opt is\n    Table_Factor : Int := 1;\n    --  GNAT\n    --  Factor by which all initial table sizes set in Alloc are multiplied.\n-   --  Used in Table to calculate initial table sizes (the initial table\n-   --  size is the value in Alloc, used as the Table_Initial parameter\n-   --  value, multiplied by the factor given here. The default value is\n-   --  used if no -gnatT switch appears.\n+   --  Used in Table to calculate initial table sizes (the initial table size\n+   --  is the value in Alloc, used as the Table_Initial parameter value,\n+   --  multiplied by the factor given here. The default value is used if no\n+   --  -gnatT switch appears.\n \n    Task_Dispatching_Policy : Character := ' ';\n    --  GNAT, GNATBIND\n@@ -943,18 +953,16 @@ package Opt is\n \n    Time_Slice_Value : Nat;\n    --  GNATBIND\n-   --  Time slice value. Valid only if Time_Slice_Set is True, i.e. if a\n-   --  Time_Slice pragma has been processed. Set to the time slice value\n-   --  in microseconds. Negative values are stored as zero, and the value\n-   --  is not larger than 1_000_000_000 (1000 seconds). Values larger than\n-   --  this are reset to this maximum. This can also be set with the -gnatTnn\n-   --  switch.\n+   --  Time slice value. Valid only if Time_Slice_Set is True, i.e. if\n+   --  Time_Slice pragma has been processed. Set to the time slice value in\n+   --  microseconds. Negative values are stored as zero, and the value is not\n+   --  larger than 1_000_000_000 (1000 seconds). Values larger than this are\n+   --  reset to this maximum. This can also be set with the -gnatTnn switch.\n \n    Tolerate_Consistency_Errors : Boolean := False;\n    --  GNATBIND\n-   --  Tolerate time stamp and other consistency errors. If this flag is\n-   --  set to True (-t), then inconsistencies result in warnings rather than\n-   --  errors.\n+   --  Tolerate time stamp and other consistency errors. If this flag is set to\n+   --  True (-t), then inconsistencies result in warnings rather than errors.\n \n    Tree_Output : Boolean := False;\n    --  GNAT\n@@ -980,24 +988,24 @@ package Opt is\n \n    Universal_Addressing_On_AAMP : Boolean := False;\n    --  GNAAMP\n-   --  Indicates if library-level objects should be accessed and updated\n-   --  using universal addressing instructions on the AAMP architecture.\n-   --  This flag is set to True when pragma Universal_Data is given as\n-   --  a configuration pragma.\n+   --  Indicates if library-level objects should be accessed and updated using\n+   --  universal addressing instructions on the AAMP architecture. This flag is\n+   --  set to True when pragma Universal_Data is given as a configuration\n+   --  pragma.\n \n    Unreserve_All_Interrupts : Boolean := False;\n    --  GNAT, GNATBIND\n-   --  Normally set False, set True if a valid Unreserve_All_Interrupts\n-   --  pragma appears anywhere in the main unit for GNAT, or if any ALI\n-   --  file has the corresponding attribute set in GNATBIND.\n+   --  Normally set False, set True if a valid Unreserve_All_Interrupts pragma\n+   --  appears anywhere in the main unit for GNAT, or if any ALI file has the\n+   --  corresponding attribute set in GNATBIND.\n \n    Upper_Half_Encoding : Boolean := False;\n    --  GNAT\n    --  Normally set False, indicating that upper half ASCII characters are\n    --  used in the normal way to represent themselves. If the wide character\n-   --  encoding method uses the upper bit for this encoding, then this flag\n-   --  is set True, and upper half characters in the source indicate the\n-   --  start of a wide character sequence.\n+   --  encoding method uses the upper bit for this encoding, then this flag is\n+   --  set True, and upper half characters in the source indicate the start of\n+   --  a wide character sequence.\n \n    Usage_Requested : Boolean := False;\n    --  GNAT, GNATBIND, GNATMAKE\n@@ -1012,19 +1020,24 @@ package Opt is\n    --  GNAT\n    --  This flag determines if validity checking is on or off. The initial\n    --  state is on, and the required default validity checks are active. The\n-   --  actual set of checks that is performed if Validity_Checks_On is set\n-   --  is defined by the switches in package Sem_Val. The Validity_Checks_On\n-   --  flag is controlled by pragma Validity_Checks (On | Off), and also\n-   --  some generated compiler code (typically code that has to do with\n-   --  validity check generation) is compiled with this flag set to False.\n-   --  This flag is set to False by the -gnatp switch.\n+   --  actual set of checks that is performed if Validity_Checks_On is set is\n+   --  defined by the switches in package Sem_Val. The Validity_Checks_On flag\n+   --  is controlled by pragma Validity_Checks (On | Off), and also some\n+   --  generated compiler code (typically code that has to do with validity\n+   --  check generation) is compiled with this flag set to False. This flag is\n+   --  set to False by the -gnatp switch.\n \n    Verbose_Mode : Boolean := False;\n-   --  GNAT, GNATBIND, GNATMAKE, GNATLINK, GNATLS, GNATCHOP, GNATNAME,\n-   --  GNATCLEAN\n+   --  GNAT, GNATBIND, GNATMAKE, GNATLINK, GNATLS, GNATNAME, GNATCLEAN\n    --  Set to True to get verbose mode (full error message text and location\n    --  information sent to standard output, also header, copyright and summary)\n \n+   Warn_On_Ada_2005_Compatibility : Boolean := True;\n+   --  GNAT\n+   --  Set to True to active all warnings on Ada 2005 compatibility issues,\n+   --  including warnings on Ada 2005 obsolescent features used in Ada 2005\n+   --  mode. Set False by -gnatwY.\n+\n    Warn_On_Bad_Fixed_Value : Boolean := False;\n    --  GNAT\n    --  Set to True to generate warnings for static fixed-point expression\n@@ -1052,8 +1065,8 @@ package Opt is\n \n    Warn_On_Modified_Unread : Boolean := False;\n    --  GNAT\n-   --  Set to True to generate warnings if a variable is assigned but is\n-   --  never read. The default is that this warning is suppressed.\n+   --  Set to True to generate warnings if a variable is assigned but is never\n+   --  read. The default is that this warning is suppressed.\n \n    Warn_On_No_Value_Assigned : Boolean := True;\n    --  GNAT\n@@ -1063,8 +1076,8 @@ package Opt is\n \n    Warn_On_Obsolescent_Feature : Boolean := False;\n    --  GNAT\n-   --  Set to True to generate warnings on use of any feature in Annex J\n-   --  or if a subprogram is called for which a pragma Obsolescent applies.\n+   --  Set to True to generate warnings on use of any feature in Annex or if a\n+   --  subprogram is called for which a pragma Obsolescent applies.\n \n    Warn_On_Redundant_Constructs : Boolean := False;\n    --  GNAT\n@@ -1096,10 +1109,10 @@ package Opt is\n    --  description of type in unit System.WCh_Con for a list of the methods\n    --  that are currently supported. Note that brackets notation is always\n    --  recognized in source programs regardless of the setting of this\n-   --  variable. The default setting causes only the brackets notation\n-   --  to be recognized. If this is the main unit, this setting also\n-   --  controls the output of the W=? parameter in the ALI file, which\n-   --  is used to provide the default for Wide_Text_IO files.\n+   --  variable. The default setting causes only the brackets notation to be\n+   --  recognized. If this is the main unit, this setting also controls the\n+   --  output of the W=? parameter in the ALI file, which is used to provide\n+   --  the default for Wide_Text_IO files.\n \n    Xref_Active : Boolean := True;\n    --  GNAT\n@@ -1109,28 +1122,39 @@ package Opt is\n    Zero_Cost_Exceptions_Set : Boolean := False;\n    --  GNAT\n    --  These values are to record the setting of the zero cost exception\n-   --  handling mode set by argument switches (-gnatZ/-gnatL). If the\n-   --  value is set by one of these switches, then Zero_Cost_Exceptions_Set\n-   --  is set to True, and Zero_Cost_Exceptions_Val indicates the setting.\n+   --  handling mode set by argument switches (-gnatZ/-gnatL). If the value is\n+   --  set by one of these switches, then Zero_Cost_Exceptions_Set is set to\n+   --  True, and Zero_Cost_Exceptions_Val indicates the setting.\n \n    ----------------------------\n    -- Configuration Settings --\n    ----------------------------\n \n-   --  These are settings that are used to establish the mode at the start\n-   --  of each unit. The values defined below can be affected either by\n-   --  command line switches, or by the use of appropriate configuration\n-   --  pragmas in the gnat.adc file.\n+   --  These are settings that are used to establish the mode at the start of\n+   --  each unit. The values defined below can be affected either by command\n+   --  line switches, or by the use of appropriate configuration pragmas in the\n+   --  gnat.adc file.\n \n    Ada_Version_Config : Ada_Version_Type;\n    --  GNAT\n    --  This is the value of the configuration switch for the Ada 83 mode, as\n-   --  set by the command line switches -gnat83/95/05, and possibly modified\n-   --  by the use of configuration pragmas Ada_83/Ada95/Ada05. This switch\n-   --  is used to set the initial value for Ada_Version mode at the start\n-   --  of analysis of a unit. Note however, that the setting of this flag\n-   --  is ignored for internal and predefined units (which are always compiled\n-   --  in the most up to date version of Ada).\n+   --  set by the command line switches -gnat83/95/05, and possibly modified by\n+   --  the use of configuration pragmas Ada_83/Ada95/Ada05. This switch is used\n+   --  to set the initial value for Ada_Version mode at the start of analysis\n+   --  of a unit. Note however, that the setting of this flag is ignored for\n+   --  internal and predefined units (which are always compiled in the most up\n+   --  to date version of Ada).\n+\n+   Ada_Version_Explicit_Config : Ada_Version_Type;\n+   --  GNAT\n+   --  Same as above but used to initialize Ada_Version_Explicit. Currently\n+   --  this will always have the same value as Ada_Version_Config.\n+\n+   Assertions_Enabled_Config : Boolean;\n+   --  GNAT\n+   --  This is the value of the configuration switch for assertions enabled\n+   --  mode, as possibly set by the command line switch -gnata, and possibly\n+   --  modified by the use of the configuration pragma Assertion_Policy.\n \n    Dynamic_Elaboration_Checks_Config : Boolean := False;\n    --  GNAT\n@@ -1143,73 +1167,82 @@ package Opt is\n \n    Extensions_Allowed_Config : Boolean;\n    --  GNAT\n-   --  This is the flag that indicates whether extensions are allowed.\n-   --  It can be set True either by use of the -gnatX switch, or by use\n-   --  of the configuration pragma Extensions_Allowed (On). It is always\n-   --  set to True for internal GNAT units, since extensions are always\n-   --  permitted in such units.\n+   --  This is the flag that indicates whether extensions are allowed. It can\n+   --  be set True either by use of the -gnatX switch, or by use of the\n+   --  configuration pragma Extensions_Allowed (On). It is always set to True\n+   --  for internal GNAT units, since extensions are always permitted in such\n+   --  units.\n \n    External_Name_Exp_Casing_Config : External_Casing_Type;\n    --  GNAT\n-   --  This is the value of the configuration switch that controls casing\n-   --  of external symbols for which an explicit external name is given. It\n-   --  can be set to Uppercase by the command line switch -gnatF, and further\n-   --  modified by the use of the configuration pragma External_Name_Casing\n-   --  in the gnat.adc file. This flag is used to set the initial value\n-   --  for External_Name_Exp_Casing at the start of analyzing each unit.\n-   --  Note however that the setting of this flag is ignored for internal\n-   --  and predefined units (which are always compiled with As_Is mode).\n+   --  This is the value of the configuration switch that controls casing of\n+   --  external symbols for which an explicit external name is given. It can be\n+   --  set to Uppercase by the command line switch -gnatF, and further modified\n+   --  by the use of the configuration pragma External_Name_Casing in the\n+   --  gnat.adc file. This flag is used to set the initial value for\n+   --  External_Name_Exp_Casing at the start of analyzing each unit. Note\n+   --  however that the setting of this flag is ignored for internal and\n+   --  predefined units (which are always compiled with As_Is mode).\n \n    External_Name_Imp_Casing_Config : External_Casing_Type;\n    --  GNAT\n-   --  This is the value of the configuration switch that controls casing\n-   --  of external symbols where the external name is implicitly given. It\n-   --  can be set to Uppercase by the command line switch -gnatF, and further\n-   --  modified by the use of the configuration pragma External_Name_Casing\n-   --  in the gnat.adc file. This flag is used to set the initial value\n-   --  for External_Name_Imp_Casing at the start of analyzing each unit.\n-   --  Note however that the setting of this flag is ignored for internal\n-   --  and predefined units (which are always compiled with Lowercase mode).\n+   --  This is the value of the configuration switch that controls casing of\n+   --  external symbols where the external name is implicitly given. It can be\n+   --  set to Uppercase by the command line switch -gnatF, and further modified\n+   --  by the use of the configuration pragma External_Name_Casing in the\n+   --  gnat.adc file. This flag is used to set the initial value for\n+   --  External_Name_Imp_Casing at the start of analyzing each unit. Note\n+   --  however that the setting of this flag is ignored for internal and\n+   --  predefined units (which are always compiled with Lowercase mode).\n+\n+   Persistent_BSS_Mode_Config : Boolean;\n+   --  GNAT\n+   --  This is the value of the configuration switch that controls whether\n+   --  potentially persistent data is to be placed in the persistent_bss\n+   --  section. It can be set True by use of the pragma Persistent_BSS.\n+   --  This flag is used to set the initial value of Persistent_BSS_Mode\n+   --  at the start of each compilation unit, except that it is always\n+   --  set False for predefined units.\n \n    Polling_Required_Config : Boolean;\n    --  GNAT\n    --  This is the value of the configuration switch that controls polling\n    --  mode. It can be set True by the command line switch -gnatP, and then\n-   --  further modified by the use of pragma Polling in the gnat.adc file.\n-   --  This flag is used to set the initial value for Polling_Required\n-   --  at the start of analyzing each unit.\n+   --  further modified by the use of pragma Polling in the gnat.adc file. This\n+   --  flag is used to set the initial value for Polling_Required at the start\n+   --  of analyzing each unit.\n \n    Use_VADS_Size_Config : Boolean;\n    --  GNAT\n-   --  This is the value of the configuration switch that controls the use\n-   --  of VADS_Size instead of Size whereever the attribute Size is used.\n-   --  It can be set True by the use of the pragma Use_VADS_Size in the\n-   --  gnat.adc file. This flag is used to set the initial value for\n-   --  Use_VADS_Size at the start of analyzing each unit. Note however that\n-   --  the setting of this flag is ignored for internal and predefined\n-   --  units (which are always compiled with the standard Size semantics).\n+   --  This is the value of the configuration switch that controls the use of\n+   --  VADS_Size instead of Size whereever the attribute Size is used. It can\n+   --  be set True by the use of the pragma Use_VADS_Size in the gnat.adc file.\n+   --  This flag is used to set the initial value for Use_VADS_Size at the\n+   --  start of analyzing each unit. Note however that the setting of this flag\n+   --  is ignored for internal and predefined units (which are always compiled\n+   --  with the standard Size semantics).\n \n    type Config_Switches_Type is private;\n    --  Type used to save values of the switches set from Config values\n \n    procedure Save_Opt_Config_Switches (Save : out Config_Switches_Type);\n    --  This procedure saves the current values of the switches which are\n-   --  initialized from the above Config values, and then resets these\n-   --  switches according to the Config value settings.\n+   --  initialized from the above Config values, and then resets these switches\n+   --  according to the Config value settings.\n \n    procedure Set_Opt_Config_Switches (Internal_Unit : Boolean);\n-   --  This procedure sets the switches to the appropriate initial values.\n-   --  The parameter Internal_Unit is True for an internal or predefined\n-   --  unit, and affects the way the switches are set (see above).\n+   --  This procedure sets the switches to the appropriate initial values. The\n+   --  parameter Internal_Unit is True for an internal or predefined unit, and\n+   --  affects the way the switches are set (see above).\n \n    procedure Restore_Opt_Config_Switches (Save : Config_Switches_Type);\n-   --  This procedure restores a set of switch values previously saved\n-   --  by a call to Save_Opt_Switches.\n+   --  This procedure restores a set of switch values previously saved by a\n+   --  call to Save_Opt_Switches.\n \n    procedure Register_Opt_Config_Switches;\n    --  This procedure is called after processing the gnat.adc file to record\n-   --  the values of the Config switches, as possibly modified by the use\n-   --  of command line switches and configuration pragmas.\n+   --  the values of the Config switches, as possibly modified by the use of\n+   --  command line switches and configuration pragmas.\n \n    ------------------------\n    -- Other Global Flags --\n@@ -1220,10 +1253,10 @@ package Opt is\n    --  (False). When expansion is deactivated all calls to expander routines\n    --  have no effect. Note that the initial setting of False is merely to\n    --  prevent saving of an undefined value for an initial call to the\n-   --  Expander_Mode_Save_And_Set procedure. For more information on the\n-   --  use of this flag, see package Expander. Indeed this flag might more\n-   --  logically be in the spec of Expander, but it is referenced by Errout,\n-   --  and it really seems wrong for Errout to depend on Expander.\n+   --  Expander_Mode_Save_And_Set procedure. For more information on the use of\n+   --  this flag, see package Expander. Indeed this flag might more logically\n+   --  be in the spec of Expander, but it is referenced by Errout, and it\n+   --  really seems wrong for Errout to depend on Expander.\n \n    -----------------------\n    -- Tree I/O Routines --\n@@ -1248,12 +1281,12 @@ package Opt is\n    --  from the Gnatvsn package which is a part of ASIS implementation.\n \n    Tree_Version_String : String (Gnat_Version_String'Range);\n-   --  Used to store the compiler version string read from a tree file to\n-   --  check if it is the same as stored in the version string in Gnatvsn.\n-   --  Therefore its length is taken directly from the version string in\n-   --  Gnatvsn. If the length of the version string stored in the tree is\n-   --  different, then versions are for sure different, and a string containing\n-   --  '?' characters is assigned to this variable as a result of tree read.\n+   --  Used to store the compiler version string read from a tree file to check\n+   --  if it is the same as stored in the version string in Gnatvsn. Therefore\n+   --  its length is taken directly from the version string in Gnatvsn. If the\n+   --  length of the version string stored in the tree is different, then\n+   --  versions are for sure different, and a string containing '?' characters\n+   --  is assigned to this variable as a result of tree read.\n \n    Tree_ASIS_Version_Number : Int;\n    --  Used to store the ASIS version number read from a tree file to check if\n@@ -1263,11 +1296,14 @@ private\n \n    type Config_Switches_Type is record\n       Ada_Version                    : Ada_Version_Type;\n+      Ada_Version_Explicit           : Ada_Version_Type;\n+      Assertions_Enabled             : Boolean;\n       Dynamic_Elaboration_Checks     : Boolean;\n       Exception_Locations_Suppressed : Boolean;\n       Extensions_Allowed             : Boolean;\n       External_Name_Exp_Casing       : External_Casing_Type;\n       External_Name_Imp_Casing       : External_Casing_Type;\n+      Persistent_BSS_Mode            : Boolean;\n       Polling_Required               : Boolean;\n       Use_VADS_Size                  : Boolean;\n    end record;"}, {"sha": "7613e735879b3d0686f7aa4baf5b5b68a3de0a96", "filename": "gcc/ada/switch-c.adb", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a/gcc%2Fada%2Fswitch-c.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a/gcc%2Fada%2Fswitch-c.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fswitch-c.adb?ref=f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a", "patch": "@@ -503,7 +503,7 @@ package body Switch.C is\n                Warn_On_Unchecked_Conversion := True;\n                Warn_On_Unrecognized_Pragma  := True;\n \n-               Set_Style_Check_Options (\"3abcdefhiklmnprst\");\n+               Set_Style_Check_Options (\"3abcdefhiklmnprstu\");\n \n             --  Processing for G switch\n \n@@ -763,6 +763,7 @@ package body Switch.C is\n                         Constant_Condition_Warnings     := True;\n                         Implementation_Unit_Warnings    := True;\n                         Ineffective_Inline_Warnings     := True;\n+                        Warn_On_Ada_2005_Compatibility  := True;\n                         Warn_On_Bad_Fixed_Value         := True;\n                         Warn_On_Constant                := True;\n                         Warn_On_Export_Import           := True;\n@@ -781,6 +782,7 @@ package body Switch.C is\n                         Elab_Warnings                   := False;\n                         Implementation_Unit_Warnings    := False;\n                         Ineffective_Inline_Warnings     := False;\n+                        Warn_On_Ada_2005_Compatibility  := False;\n                         Warn_On_Bad_Fixed_Value         := False;\n                         Warn_On_Constant                := False;\n                         Warn_On_Dereference             := False;\n@@ -908,6 +910,12 @@ package body Switch.C is\n                      when 'X' =>\n                         Warn_On_Export_Import           := False;\n \n+                     when 'y' =>\n+                        Warn_On_Ada_2005_Compatibility  := True;\n+\n+                     when 'Y' =>\n+                        Warn_On_Ada_2005_Compatibility  := False;\n+\n                      when 'z' =>\n                         Warn_On_Unchecked_Conversion    := True;\n \n@@ -972,6 +980,7 @@ package body Switch.C is\n                Ptr := Ptr + 1;\n                Extensions_Allowed := True;\n                Ada_Version := Ada_Version_Type'Last;\n+               Ada_Version_Explicit := Ada_Version;\n \n             --  Processing for y switch\n \n@@ -1067,6 +1076,7 @@ package body Switch.C is\n                else\n                   Ptr := Ptr + 1;\n                   Ada_Version := Ada_83;\n+                  Ada_Version_Explicit := Ada_Version;\n                end if;\n \n             --  Processing for 95 switch\n@@ -1083,6 +1093,7 @@ package body Switch.C is\n                else\n                   Ptr := Ptr + 1;\n                   Ada_Version := Ada_95;\n+                  Ada_Version_Explicit := Ada_Version;\n                end if;\n \n             --  Processing for 05 switch\n@@ -1099,6 +1110,7 @@ package body Switch.C is\n                else\n                   Ptr := Ptr + 1;\n                   Ada_Version := Ada_05;\n+                  Ada_Version_Explicit := Ada_Version;\n                end if;\n \n             --  Ignore extra switch character"}, {"sha": "dd6e5be802c089b1401cd6e58a6cc8795b9e57fc", "filename": "gcc/ada/usage.adb", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a/gcc%2Fada%2Fusage.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a/gcc%2Fada%2Fusage.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fusage.adb?ref=f81e6250d5aa92b49ff1aef22deae5bb7dce1d9a", "patch": "@@ -390,7 +390,9 @@ begin\n    Write_Line (\"        v*   turn on warnings for unassigned variable\");\n    Write_Line (\"        V    turn off warnings for unassigned variable\");\n    Write_Line (\"        x*   turn on warnings for export/import\");\n-   Write_Line (\"        X*   turn off warnings for export/import\");\n+   Write_Line (\"        X    turn off warnings for export/import\");\n+   Write_Line (\"        y*   turn on warnings for Ada 2005 incompatibility\");\n+   Write_Line (\"        Y    turn off warnings for Ada 2005 incompatibility\");\n    Write_Line (\"        z*   turn on size/align warnings for \" &\n                                                   \"unchecked conversion\");\n    Write_Line (\"        Z    turn off size/align warnings for \" &\n@@ -450,6 +452,7 @@ begin\n    Write_Line (\"        r    check casing for identifier references\");\n    Write_Line (\"        s    check separate subprogram specs present\");\n    Write_Line (\"        t    check token separation rules\");\n+   Write_Line (\"        u    check no unnecessary blank lines\");\n    Write_Line (\"        x    check extra parens around conditionals\");\n \n    --  Lines for -gnatyN switch"}]}