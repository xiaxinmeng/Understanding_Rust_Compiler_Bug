{"sha": "58dd8e861c8f05fac2263fa722fd846f7aacb423", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NThkZDhlODYxYzhmMDVmYWMyMjYzZmE3MjJmZDg0NmY3YWFjYjQyMw==", "commit": {"author": {"name": "Paul Koning", "email": "ni1d@arrl.net", "date": "2010-11-20T19:11:32Z"}, "committer": {"name": "Paul Koning", "email": "pkoning@gcc.gnu.org", "date": "2010-11-20T19:11:32Z"}, "message": "pdp11-protos.h (pdp11_initial_elimination_offset, [...]): New functions.\n\n* config/pdp11/pdp11-protos.h (pdp11_initial_elimination_offset,\npdp11_regno_reg_class): New functions.\n* config/pdp11/pdp11.md (define_constants): Add register numbers.\n* config/pdp11/pdp11.c (pdp11_regno_reg_class,\npdp11_sp_frame_offset, pdp11_initial_elimination_offset): New\nfunctions. \n* config/pdp11/pdp11.h (FIXED_REGISTERS, CALL_USED_REGISTERS): Add\nframe pointer and argument pointer pseudo-registers.\n(ARG_POINTER_REGNUM): Define.\n(REG_CLASS_CONTENTS, REGNO_REG_CLASS): Add frame pointer and\nargument pointer. \n(FIRST_PARM_OFFSET): Update for argument pointer.\n(INITIAL_FRAME_POINTER_OFFSET): Delete.\n(ELIMINABLE_REGS, INITIAL_ELIMINATION_OFFSET): New macros.\n(REGNO_OK_FOR_BASE_P, REGNO_OK_FOR_INDEX_P, REGISTER_NAMES): Add\nframe pointer and argument pointer.\n\nFrom-SVN: r166978", "tree": {"sha": "5438898281b6802861fe1345022684ff79a3694d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5438898281b6802861fe1345022684ff79a3694d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/58dd8e861c8f05fac2263fa722fd846f7aacb423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58dd8e861c8f05fac2263fa722fd846f7aacb423", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58dd8e861c8f05fac2263fa722fd846f7aacb423", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58dd8e861c8f05fac2263fa722fd846f7aacb423/comments", "author": null, "committer": null, "parents": [{"sha": "a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9aa2c3ae2aa0ccb98a04cab88c52ac76107d74c"}], "stats": {"total": 173, "additions": 129, "deletions": 44}, "files": [{"sha": "c6da1be8a3ddc5037d0227832e83578fe651342f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dd8e861c8f05fac2263fa722fd846f7aacb423/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dd8e861c8f05fac2263fa722fd846f7aacb423/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=58dd8e861c8f05fac2263fa722fd846f7aacb423", "patch": "@@ -1,3 +1,22 @@\n+2010-11-20  Paul Koning  <ni1d@arrl.net>\n+\n+\t* config/pdp11/pdp11-protos.h (pdp11_initial_elimination_offset,\n+\tpdp11_regno_reg_class): New functions.\n+\t* config/pdp11/pdp11.md (define_constants): Add register numbers.\n+\t* config/pdp11/pdp11.c (pdp11_regno_reg_class,\n+\tpdp11_sp_frame_offset, pdp11_initial_elimination_offset): New\n+\tfunctions. \n+\t* config/pdp11/pdp11.h (FIXED_REGISTERS, CALL_USED_REGISTERS): Add\n+\tframe pointer and argument pointer pseudo-registers.\n+\t(ARG_POINTER_REGNUM): Define.\n+\t(REG_CLASS_CONTENTS, REGNO_REG_CLASS): Add frame pointer and\n+\targument pointer. \n+\t(FIRST_PARM_OFFSET): Update for argument pointer.\n+\t(INITIAL_FRAME_POINTER_OFFSET): Delete.\n+\t(ELIMINABLE_REGS, INITIAL_ELIMINATION_OFFSET): New macros.\n+\t(REGNO_OK_FOR_BASE_P, REGNO_OK_FOR_INDEX_P, REGISTER_NAMES): Add\n+\tframe pointer and argument pointer. \n+\t\n 2010-11-20  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR debug/46561"}, {"sha": "97f0589db030e59acd7eade61d2fb61a8c60f3cd", "filename": "gcc/config/pdp11/pdp11-protos.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dd8e861c8f05fac2263fa722fd846f7aacb423/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dd8e861c8f05fac2263fa722fd846f7aacb423/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11-protos.h?ref=58dd8e861c8f05fac2263fa722fd846f7aacb423", "patch": "@@ -35,6 +35,8 @@ extern bool pdp11_cannot_change_mode_class (enum machine_mode,\n                                             enum machine_mode, enum reg_class);\n extern bool pdp11_secondary_memory_needed (reg_class_t, reg_class_t, \n \t\t\t\t\t   enum machine_mode);\n+extern int pdp11_initial_elimination_offset (int, int);\n+extern enum reg_class pdp11_regno_reg_class (int);\n \n #endif /* RTX_CODE */\n "}, {"sha": "617a7f560806f50c30d93dad3951990329249b9c", "filename": "gcc/config/pdp11/pdp11.c", "status": "modified", "additions": 67, "deletions": 2, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dd8e861c8f05fac2263fa722fd846f7aacb423/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dd8e861c8f05fac2263fa722fd846f7aacb423/gcc%2Fconfig%2Fpdp11%2Fpdp11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.c?ref=58dd8e861c8f05fac2263fa722fd846f7aacb423", "patch": "@@ -300,7 +300,7 @@ pdp11_output_function_prologue (FILE *stream, HOST_WIDE_INT size)\n \tasm_fprintf (stream, \"\\tsub $%#wo, sp\\n\", fsize);\n \n     /* save CPU registers  */\n-    for (regno = 0; regno <= PC_REGNUM; regno++)\t\t\t\t\n+    for (regno = R0_REGNUM; regno <= PC_REGNUM; regno++)\t\t\t\t\n       if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\t\n \t    if (! ((regno == FRAME_POINTER_REGNUM)\t\t\t\n \t\t   && frame_pointer_needed))\t\t\t\t\n@@ -379,7 +379,7 @@ pdp11_output_function_epilogue (FILE *stream, HOST_WIDE_INT size)\n \tk = 2*j;\n \t\n \t/* change fp -> r5 due to the compile error on libgcc2.c */\n-\tfor (i = PC_REGNUM ; i >= 0 ; i--)\t\t\t\t\t\n+\tfor (i = PC_REGNUM ; i >= R0_REGNUM ; i--)\t\t\t\t\t\n \t  if (df_regs_ever_live_p (i) && ! call_used_regs[i])\t\t\n \t\tfprintf(stream, \"\\tmov %#\" HOST_WIDE_INT_PRINT \"o(r5), %s\\n\",\n \t\t\t(-fsize-2*j--)&0xffff, reg_names[i]);\n@@ -1706,6 +1706,71 @@ pdp11_secondary_memory_needed (reg_class_t c1, reg_class_t c2,\n   return (fromfloat != tofloat);\n }\n \n+/* Return the class number of the smallest class containing\n+   reg number REGNO.  */\n+enum reg_class\n+pdp11_regno_reg_class (int regno)\n+{ \n+  if (regno == FRAME_POINTER_REGNUM || regno == ARG_POINTER_REGNUM)\n+    return GENERAL_REGS;\n+  else if (regno > AC3_REGNUM)\n+    return NO_LOAD_FPU_REGS;\n+  else if (regno >= AC0_REGNUM)\n+    return LOAD_FPU_REGS;\n+  else if (regno & 1)\n+    return MUL_REGS;\n+  else\n+    return GENERAL_REGS;\n+}\n+\n+\n+static int\n+pdp11_sp_frame_offset (void)\n+{\n+  int offset = 0, regno;\n+  offset = get_frame_size();\n+  for (regno = 0; regno <= PC_REGNUM; regno++)\n+    if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\n+      offset += 2;\n+  for (regno = AC0_REGNUM; regno <= AC5_REGNUM; regno++)\n+    if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\n+      offset += 8;\n+  \n+  return offset;\n+}   \n+\n+/* Return the offset between two registers, one to be eliminated, and the other\n+   its replacement, at the start of a routine.  */\n+\n+int\n+pdp11_initial_elimination_offset (int from, int to)\n+{\n+  int spoff;\n+  \n+  if (from == ARG_POINTER_REGNUM && to == HARD_FRAME_POINTER_REGNUM)\n+    return 4;\n+  else if (from == FRAME_POINTER_REGNUM\n+\t   && to == HARD_FRAME_POINTER_REGNUM)\n+    return 0;\n+  else\n+    {\n+      gcc_assert (to == STACK_POINTER_REGNUM);\n+\n+      /* Get the size of the register save area.  */\n+      spoff = pdp11_sp_frame_offset ();\n+      if (from == FRAME_POINTER_REGNUM)\n+\treturn spoff;\n+\n+      gcc_assert (from == ARG_POINTER_REGNUM);\n+\n+      /* If there is a frame pointer, that is saved too.  */\n+      if (frame_pointer_needed)\n+\tspoff += 2;\n+      \n+      /* Account for the saved PC in the function call.  */\n+      return spoff + 2;\n+    }\n+}    \n \n /* A copy of output_addr_const modified for pdp11 expression syntax.\n    output_addr_const also gets called for %cDIGIT and %nDIGIT, which we don't"}, {"sha": "2d06b7d30a8052dac27e49215f44bbfe5d153fef", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 34, "deletions": 40, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dd8e861c8f05fac2263fa722fd846f7aacb423/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dd8e861c8f05fac2263fa722fd846f7aacb423/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=58dd8e861c8f05fac2263fa722fd846f7aacb423", "patch": "@@ -149,11 +149,9 @@ extern const struct real_format pdp11_d_format;\n    reg 5\t= fp;  not necessarily! \n */\n \n-/* don't let them touch fp regs for the time being !*/\n-\n #define FIXED_REGISTERS  \\\n {0, 0, 0, 0, 0, 0, 1, 1, \\\n- 0, 0, 0, 0, 0, 0     }\n+ 0, 0, 0, 0, 0, 0, 1, 1 }\n \n \n \n@@ -167,7 +165,7 @@ extern const struct real_format pdp11_d_format;\n /* don't know about fp */\n #define CALL_USED_REGISTERS  \\\n {1, 1, 0, 0, 0, 0, 1, 1, \\\n- 0, 0, 0, 0, 0, 0 }\n+ 0, 0, 0, 0, 0, 0, 1, 1 }\n \n \n /* Make sure everything's fine if we *don't* have an FPU.\n@@ -183,7 +181,7 @@ extern const struct real_format pdp11_d_format;\n   if (!TARGET_FPU)\t\t\t\t\\\n     { \t\t\t\t\t\t\\\n       COPY_HARD_REG_SET (x, reg_class_contents[(int)FPU_REGS]); \\\n-      for (i = 0; i < FIRST_PSEUDO_REGISTER; i++ ) \\\n+      for (i = R0_REGNUM; i < FIRST_PSEUDO_REGISTER; i++ ) \\\n        if (TEST_HARD_REG_BIT (x, i)) \t\t\\\n \tfixed_regs[i] = call_used_regs[i] = 1; \t\\\n     } \t\t\t\t\t\t\\\n@@ -239,9 +237,6 @@ extern const struct real_format pdp11_d_format;\n /* Specify the registers used for certain standard purposes.\n    The values of these macros are register numbers.  */\n \n-/* Base register for access to arguments of the function.  */\n-#define ARG_POINTER_REGNUM FRAME_POINTER_REGNUM\n-\n /* Register in which static-chain is passed to a function.  */\n /* ??? - i don't want to give up a reg for this! */\n #define STATIC_CHAIN_REGNUM 4\n@@ -298,19 +293,14 @@ enum reg_class { NO_REGS, MUL_REGS, GENERAL_REGS, LOAD_FPU_REGS, NO_LOAD_FPU_REG\n    This is an initializer for a vector of HARD_REG_SET\n    of length N_REG_CLASSES.  */\n \n-#define REG_CLASS_CONTENTS {{0}, {0x00aa}, {0x00ff}, {0x0f00}, {0x3000}, {0x3f00}, {0x3fff}}\n+#define REG_CLASS_CONTENTS {{0}, {0x00aa}, {0xc0ff}, {0x0f00}, {0x3000}, {0x3f00}, {0xffff}}\n \n /* The same information, inverted:\n    Return the class number of the smallest class containing\n    reg number REGNO.  This could be a conditional expression\n    or could index an array.  */\n \n-#define REGNO_REG_CLASS(REGNO) \t\t\\\n-((REGNO) >= AC0_REGNUM ? \\\n- ((REGNO) <= AC3_REGNUM ? LOAD_FPU_REGS : \\\n-  NO_LOAD_FPU_REGS) :                     \\\n- (((REGNO) & 1) ? MUL_REGS : GENERAL_REGS))\n-\n+#define REGNO_REG_CLASS(REGNO) pdp11_regno_reg_class (REGNO)\n \n /* The class value for index registers, and the one for base regs.  */\n #define INDEX_REG_CLASS GENERAL_REGS\n@@ -369,13 +359,8 @@ enum reg_class { NO_REGS, MUL_REGS, GENERAL_REGS, LOAD_FPU_REGS, NO_LOAD_FPU_REG\n    stack */\n extern int current_first_parm_offset;\n \n-/* Offset of first parameter from the argument pointer register value.  \n-   For the pdp11, this is nonzero to account for the return address.\n-\t1 - return address\n-\t2 - frame pointer, if needed\n-\n-*/\n-#define FIRST_PARM_OFFSET(FNDECL) ((frame_pointer_needed) ? 4 : 2)\n+/* Offset of first parameter from the argument pointer register value.  */\n+#define FIRST_PARM_OFFSET(FNDECL) 0\n \n /* Define how to find the value returned by a function.\n    VALTYPE is the data type of the value (as a tree).\n@@ -425,20 +410,28 @@ extern int may_call_alloca;\n \n #define EXIT_IGNORE_STACK\t1\n \n-#define INITIAL_FRAME_POINTER_OFFSET(DEPTH_VAR)\t\\\n-{\t\t\t\t\t\t\t\t\\\n-  int offset, regno;\t\t      \t\t\t\t\\\n-  offset = get_frame_size();\t\t\t\t\t\\\n-  for (regno = 0; regno <= PC_REGNUM; regno++)\t\t\t\\\n-    if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\t\\\n-      offset += 2;\t\t\t\t\t\t\\\n-  for (regno = AC0_REGNUM; regno <= AC5_REGNUM; regno++)\t\\\n-    if (df_regs_ever_live_p (regno) && ! call_used_regs[regno])\t\\\n-      offset += 8;\t\t\t\t\t\t\\\n-  /* offset -= 2;   no fp on stack frame */\t\t\t\\\n-  (DEPTH_VAR) = offset;\t\t\t\t\t\t\\\n-}   \n-    \n+/* Definitions for register eliminations.\n+\n+   This is an array of structures.  Each structure initializes one pair\n+   of eliminable registers.  The \"from\" register number is given first,\n+   followed by \"to\".  Eliminations of the same \"from\" register are listed\n+   in order of preference.\n+\n+   There are two registers that can always be eliminated on the pdp11.\n+   The frame pointer and the arg pointer can be replaced by either the\n+   hard frame pointer or to the stack pointer, depending upon the\n+   circumstances.  The hard frame pointer is not used before reload and\n+   so it is not eligible for elimination.  */\n+\n+#define ELIMINABLE_REGS\t\t\t\t\t\\\n+{{ ARG_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\\n+ { ARG_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM},\t\\\n+ { FRAME_POINTER_REGNUM, STACK_POINTER_REGNUM},\t\t\\\n+ { FRAME_POINTER_REGNUM, HARD_FRAME_POINTER_REGNUM}}\t\\\n+\n+#define INITIAL_ELIMINATION_OFFSET(FROM, TO, OFFSET) \\\n+  ((OFFSET) = pdp11_initial_elimination_offset ((FROM), (TO)))\n+\n \f\n /* Addressing modes, and classification of registers for them.  */\n \n@@ -454,10 +447,11 @@ extern int may_call_alloca;\n    Since they use reg_renumber, they are safe only once reg_renumber\n    has been allocated, which happens in local-alloc.c.  */\n \n-#define REGNO_OK_FOR_INDEX_P(REGNO) \\\n-  ((REGNO) <= PC_REGNUM || (unsigned) reg_renumber[REGNO] <= PC_REGNUM)\n #define REGNO_OK_FOR_BASE_P(REGNO)  \\\n-  ((REGNO) <= PC_REGNUM || (unsigned) reg_renumber[REGNO] <= PC_REGNUM)\n+  ((REGNO) <= PC_REGNUM || (unsigned) reg_renumber[REGNO] <= PC_REGNUM || \\\n+   (REGNO) == ARG_POINTER_REGNUM || (REGNO) == FRAME_POINTER_REGNUM)\n+\n+#define REGNO_OK_FOR_INDEX_P(REGNO) REGNO_OK_FOR_BASE_P (REGNO)\n \n /* Now macros that check whether X is a register and also,\n    strictly, whether it is in a specified class.\n@@ -743,7 +737,7 @@ extern struct rtx_def *cc0_reg_rtx;\n \n #define REGISTER_NAMES \\\n {\"r0\", \"r1\", \"r2\", \"r3\", \"r4\", \"r5\", \"sp\", \"pc\",     \\\n- \"ac0\", \"ac1\", \"ac2\", \"ac3\", \"ac4\", \"ac5\" }\n+ \"ac0\", \"ac1\", \"ac2\", \"ac3\", \"ac4\", \"ac5\", \"fp\", \"ap\" }\n \n /* Globalizing directive for a label.  */\n #define GLOBAL_ASM_OP \"\\t.globl \""}, {"sha": "6f76458e41c218a024498de400ece166122932ba", "filename": "gcc/config/pdp11/pdp11.md", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/58dd8e861c8f05fac2263fa722fd846f7aacb423/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/58dd8e861c8f05fac2263fa722fd846f7aacb423/gcc%2Fconfig%2Fpdp11%2Fpdp11.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.md?ref=58dd8e861c8f05fac2263fa722fd846f7aacb423", "patch": "@@ -25,15 +25,20 @@\n (define_constants\n   [\n    ;; Register numbers\n+   (R0_REGNUM     \t  0)\n    (RETVAL_REGNUM     \t  0)\n-   (FRAME_POINTER_REGNUM  5)\n+   (HARD_FRAME_POINTER_REGNUM  5)\n    (STACK_POINTER_REGNUM  6)\n    (PC_REGNUM             7)\n    (AC0_REGNUM            8)\n    (AC3_REGNUM            11)\n    (AC4_REGNUM            12)\n    (AC5_REGNUM            13)\n-   (FIRST_PSEUDO_REGISTER 14)\n+   ;; The next two are not physical registers but are used for addressing\n+   ;; arguments.\n+   (FRAME_POINTER_REGNUM  14)\n+   (ARG_POINTER_REGNUM    15)\n+   (FIRST_PSEUDO_REGISTER 16)\n    ;; Branch offset limits, as byte offsets from instruction address\n    (MIN_BRANCH            -254)\n    (MAX_BRANCH            256)"}]}