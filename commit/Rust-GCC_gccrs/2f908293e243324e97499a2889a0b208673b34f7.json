{"sha": "2f908293e243324e97499a2889a0b208673b34f7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmY5MDgyOTNlMjQzMzI0ZTk3NDk5YTI4ODlhMGIyMDg2NzNiMzRmNw==", "commit": {"author": {"name": "Seongbae Park", "email": "seongbae.park@gmail.com", "date": "2008-03-31T21:52:10Z"}, "committer": {"name": "Seongbae Park", "email": "spark@gcc.gnu.org", "date": "2008-03-31T21:52:10Z"}, "message": "common.opt (fprofile-dir=, [...]): New options\n\ngcc/ChangeLog:\n2008-03-31  Seongbae Park <seongbae.park@gmail.com>\n\n\t* common.opt (fprofile-dir=, fprofile-use=, fprofile-generate=):\n\tNew options\n\t(fprofile-use): Add var flag_profile_use\n\t* coverage.c (coverage_begin_output): Do not open a gcno file for output\n\tonly if -ftest-coverage is set.\n\tDo not add getpwd() to gcda file path.\n\t(build_gcov_info): Check the new flag \n\tflag_profile_datafile_relative_path.\n\t(coverage_init): Use profile_data_prefix.\n\tRead profile counter only if flag_profile_use is set.\n\t* opts.c (common_handle_option): New option fprofile-use=,\n\tfprofile-dir=, fprofile-generate=.\n\t* toplev.c (profile_data_prefix): New variable definition.\n\t* toplev.h (profile_data_prefix): New declaration.\n\t* doc/invoke.tex (Option Summary, Optimization Options):\n\tAdd new options.\n\ngcc/testsuite/ChangeLog:\n2008-03-31  Seongbae Park <seongbae.park@gmail.com>\n\n\t* g++.db/bprob/bprob.exp: Do not check gcno files.\n\tUse -fprofile-use for profile use.\n\t* gcc.misc-tests/bprob.exp: Ditto.\n\t* g++.dg/tree-pro/tree-prof.exp: Do not check gcno files.\n\t* gcc.dg/matrix/matrix.exp: Ditto.\n\t* gcc.dg/struct/struct-reorg.exp: Ditto.\n\t* gcc.dg/tree-prof/tree-prof.exp: Ditto.\n\t* gcc.dg/profile-dir-1.c: New test.\n\t* gcc.dg/profile-dir-2.c: New test.\n\t* gcc.dg/profile-dir-3.c: New test.\n\nChangeLog:\n2008-03-31  Seongbae Park <seongbae.park@gmail.com>\n\n\t* Makefile.tpl (.NOTPARALLEL): Serialize stageprofile libiberty.\n\t* Makefile.in (.NOTPARALLEL): Regenerate.\n\nFrom-SVN: r133774", "tree": {"sha": "d9fedd3a8f1f63959b283643213b8eec14e77278", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d9fedd3a8f1f63959b283643213b8eec14e77278"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2f908293e243324e97499a2889a0b208673b34f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f908293e243324e97499a2889a0b208673b34f7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2f908293e243324e97499a2889a0b208673b34f7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2f908293e243324e97499a2889a0b208673b34f7/comments", "author": null, "committer": null, "parents": [{"sha": "1def9c3f7d418a9e197ac24ce97ab20335c7660a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1def9c3f7d418a9e197ac24ce97ab20335c7660a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1def9c3f7d418a9e197ac24ce97ab20335c7660a"}], "stats": {"total": 189, "additions": 163, "deletions": 26}, "files": [{"sha": "2618eb0381540963b42a39272258c0af3adc5d0d", "filename": "ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/ChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/ChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/ChangeLog?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -1,3 +1,8 @@\n+2008-03-31  Seongbae Park <seongbae.park@gmail.com>\n+\n+\t* Makefile.tpl (.NOTPARALLEL): Serialize stageprofile libiberty.\n+\t* Makefile.in (.NOTPARALLEL): Regenerate.\n+\n 2008-03-27  Paolo Bonzini  <bonzini@gnu.org>\n \n \t* Makefile.tpl (PICFLAG, PICFLAG_FOR_TARGET): Remove."}, {"sha": "30bd744bccc9157daa91d4790eb24dad4a2314d4", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -394,6 +394,8 @@ LDFLAGS_FOR_TARGET =\n # This lives here to allow makefile fragments to contain dependencies.\n all:\n \n+.NOTPARALLEL: all-stageprofile-libiberty\n+\n #### host and target specific makefile fragments come in here.\n @target_makefile_frag@\n @alphaieee_frag@"}, {"sha": "bfce4f11ccf685a045ad4cb8ce8dc87531571f6b", "filename": "Makefile.tpl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -397,6 +397,8 @@ LDFLAGS_FOR_TARGET =\n # This lives here to allow makefile fragments to contain dependencies.\n all:\n \n+.NOTPARALLEL: all-stageprofile-libiberty\n+\n #### host and target specific makefile fragments come in here.\n @target_makefile_frag@\n @alphaieee_frag@"}, {"sha": "44dabe846e6acd65261620d1a84697dd58aab185", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -1,3 +1,22 @@\n+2008-03-31  Seongbae Park <seongbae.park@gmail.com>\n+\n+\t* common.opt (fprofile-dir=, fprofile-use=, fprofile-generate=):\n+\tNew options\n+\t(fprofile-use): Add var flag_profile_use\n+\t* coverage.c (coverage_begin_output): Do not open a gcno file for output\n+\tonly if -ftest-coverage is set.\n+\tDo not add getpwd() to gcda file path.\n+\t(build_gcov_info): Check the new flag \n+\tflag_profile_datafile_relative_path.\n+\t(coverage_init): Use profile_data_prefix.\n+\tRead profile counter only if flag_profile_use is set.\n+\t* opts.c (common_handle_option): New option fprofile-use=,\n+\tfprofile-dir=, fprofile-generate=.\n+\t* toplev.c (profile_data_prefix): New variable definition.\n+\t* toplev.h (profile_data_prefix): New declaration.\n+\t* doc/invoke.tex (Option Summary, Optimization Options):\n+\tAdd new options.\n+\n 2008-03-31  James E. Wilson  <wilson@tuliptree.org>\n \n \tPR target/35695"}, {"sha": "dae5d61637d092ac8304cf3a7a6bd83f4bccf180", "filename": "gcc/common.opt", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -815,14 +815,27 @@ fprofile-arcs\n Common Report Var(profile_arc_flag)\n Insert arc-based program profiling code\n \n+fprofile-dir=\n+Common Joined RejectNegative\n+Set the top-level directory for storing the profile data.\n+The default is 'pwd'.\n+\n fprofile-generate\n Common\n Enable common options for generating profile info for profile feedback directed optimizations\n \n+fprofile-generate=\n+Common Joined RejectNegative\n+Enable common options for generating profile info for profile feedback directed optimizations, and set -fprofile-dir=\n+\n fprofile-use\n-Common\n+Common Var(flag_profile_use)\n Enable common options for performing profile feedback directed optimizations\n \n+fprofile-use=\n+Common Joined RejectNegative\n+Enable common options for performing profile feedback directed optimizations, and set -fprofile-dir=\n+\n fprofile-values\n Common Report Var(flag_profile_values)\n Insert code to profile values of expressions"}, {"sha": "cd1c13e2d5702a69d2564970c441ab5118950b1a", "filename": "gcc/coverage.c", "status": "modified", "additions": 28, "deletions": 15, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -545,7 +545,9 @@ compute_checksum (void)\n int\n coverage_begin_output (void)\n {\n-  if (no_coverage)\n+  /* We don't need to output .gcno file unless we're under -ftest-coverage\n+     (e.g. -fprofile-arcs/generate/use don't need .gcno to work). */\n+  if (no_coverage || !flag_test_coverage)\n     return 0;\n \n   if (!bbg_function_announced)\n@@ -802,8 +804,7 @@ build_gcov_info (void)\n   tree field, fields = NULL_TREE;\n   tree value = NULL_TREE;\n   tree filename_string;\n-  char *filename;\n-  int filename_len;\n+  int da_file_name_len;\n   unsigned n_fns;\n   const struct function_list *fn;\n   tree string_type;\n@@ -842,17 +843,11 @@ build_gcov_info (void)\n   field = build_decl (FIELD_DECL, NULL_TREE, string_type);\n   TREE_CHAIN (field) = fields;\n   fields = field;\n-  filename = getpwd ();\n-  filename = (filename && da_file_name[0] != '/'\n-\t      ? concat (filename, \"/\", da_file_name, NULL)\n-\t      : da_file_name);\n-  filename_len = strlen (filename);\n-  filename_string = build_string (filename_len + 1, filename);\n-  if (filename != da_file_name)\n-    free (filename);\n+  da_file_name_len = strlen (da_file_name);\n+  filename_string = build_string (da_file_name_len + 1, da_file_name);\n   TREE_TYPE (filename_string) = build_array_type\n     (char_type_node, build_index_type\n-     (build_int_cst (NULL_TREE, filename_len)));\n+     (build_int_cst (NULL_TREE, da_file_name_len)));\n   value = tree_cons (field, build1 (ADDR_EXPR, string_type, filename_string),\n \t\t     value);\n \n@@ -979,18 +974,36 @@ void\n coverage_init (const char *filename)\n {\n   int len = strlen (filename);\n+  /* + 1 for extra '/', in case prefix doesn't end with /.  */\n+  int prefix_len;\n+ \n+  if (profile_data_prefix == 0 && filename[0] != '/')\n+    profile_data_prefix = getpwd ();\n+\n+  prefix_len = (profile_data_prefix) ? strlen (profile_data_prefix) + 1 : 0;\n \n   /* Name of da file.  */\n-  da_file_name = XNEWVEC (char, len + strlen (GCOV_DATA_SUFFIX) + 1);\n-  strcpy (da_file_name, filename);\n+  da_file_name = XNEWVEC (char, len + strlen (GCOV_DATA_SUFFIX) \n+\t\t\t  + prefix_len + 1);\n+\n+  if (profile_data_prefix)\n+    {\n+      strcpy (da_file_name, profile_data_prefix);\n+      da_file_name[prefix_len - 1] = '/';\n+      da_file_name[prefix_len] = 0;\n+    }\n+  else\n+    da_file_name[0] = 0;\n+  strcat (da_file_name, filename);\n   strcat (da_file_name, GCOV_DATA_SUFFIX);\n \n   /* Name of bbg file.  */\n   bbg_file_name = XNEWVEC (char, len + strlen (GCOV_NOTE_SUFFIX) + 1);\n   strcpy (bbg_file_name, filename);\n   strcat (bbg_file_name, GCOV_NOTE_SUFFIX);\n \n-  read_counts_file ();\n+  if (flag_profile_use)\n+    read_counts_file ();\n }\n \n /* Performs file-level cleanup.  Close graph file, generate coverage"}, {"sha": "d16f161a7e4312d37eea199fd394236075b6e84f", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -341,8 +341,9 @@ Objective-C and Objective-C++ Dialects}.\n -fno-toplevel-reorder -fno-trapping-math -fno-zero-initialized-in-bss @gol\n -fomit-frame-pointer -foptimize-register-move -foptimize-sibling-calls @gol\n -fpeel-loops -fpredictive-commoning -fprefetch-loop-arrays @gol\n--fprofile-generate -fprofile-use -fprofile-values -freciprocal-math @gol\n--fregmove -frename-registers -freorder-blocks @gol\n+-fprofile-dir=@var{path} -fprofile-generate -fprofile-generate=@var{path} @gol\n+-fprofile-use -fprofile-use=@var{path} -fprofile-values @gol\n+-freciprocal-math -fregmove -frename-registers -freorder-blocks @gol\n -freorder-blocks-and-partition -freorder-functions @gol\n -frerun-cse-after-loop -freschedule-modulo-scheduled-loops @gol\n -frounding-math -frtl-abstract-sequences -fsched2-use-superblocks @gol\n@@ -6311,7 +6312,19 @@ and occasionally eliminate the copy.\n \n Enabled at levels @option{-O}, @option{-O2}, @option{-O3}, @option{-Os}.\n \n+@item -fprofile-dir=@var{path}\n+@opindex fprofile-dir\n+\n+Set the directory to search the profile data files in to @var{path}.\n+This option affects only the profile data generated by\n+@option{-fprofile-generate}, @option{-ftest-coverage}, @option{-fprofile-arcs}\n+and used by @option{-fprofile-use} and @option{-fbranch-probabilities} \n+and its related options.\n+By default, GCC will use the current directory as @var{path}\n+thus the profile data file will appear in the same directory as the object file.\n+\n @item -fprofile-generate\n+@itemx -fprofile-generate=@var{path}\n @opindex fprofile-generate\n \n Enable options usually used for instrumenting application to produce\n@@ -6321,7 +6334,11 @@ compiling and when linking your program.\n \n The following options are enabled: @code{-fprofile-arcs}, @code{-fprofile-values}, @code{-fvpt}.\n \n+If @var{path} is specified, GCC will look at the @var{path} to find\n+the profile feeedback data files. See @option{-fprofile-dir}.\n+\n @item -fprofile-use\n+@itemx -fprofile-use=@var{path}\n @opindex fprofile-use\n Enable profile feedback directed optimizations, and optimizations\n generally profitable only with profile feedback available.\n@@ -6333,6 +6350,9 @@ By default, GCC emits an error message if the feedback profiles do not\n match the source code.  This error can be turned into a warning by using\n @option{-Wcoverage-mismatch}.  Note this may result in poorly optimized\n code.\n+\n+If @var{path} is specified, GCC will look at the @var{path} to find\n+the profile feedback data files. See @option{-fprofile-dir}.\n @end table\n \n The following options control compiler behavior regarding floating"}, {"sha": "b87bc562e5a000de5c4875139ccb45831b685477", "filename": "gcc/opts.c", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -1716,6 +1716,15 @@ common_handle_option (size_t scode, const char *arg, int value,\n       flag_inline_functions_set = true;\n       break;\n \n+    case OPT_fprofile_dir_:\n+      profile_data_prefix = xstrdup (arg);\n+      break;\n+\n+    case OPT_fprofile_use_:\n+      profile_data_prefix = xstrdup (arg);\n+      flag_profile_use = true;\n+      value = true;\n+      /* No break here - do -fprofile-use processing. */\n     case OPT_fprofile_use:\n       if (!flag_branch_probabilities_set)\n         flag_branch_probabilities = value;\n@@ -1733,6 +1742,10 @@ common_handle_option (size_t scode, const char *arg, int value,\n         flag_inline_functions = value;\n       break;\n \n+    case OPT_fprofile_generate_:\n+      profile_data_prefix = xstrdup (arg);\n+      value = true;\n+      /* No break here - do -fprofile-generate processing. */\n     case OPT_fprofile_generate:\n       if (!profile_arc_flag_set)\n         profile_arc_flag = value;"}, {"sha": "8e9f51b84eb1f4abc389b301022c480cfb918dbc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -1,3 +1,16 @@\n+2008-03-31  Seongbae Park <seongbae.park@gmail.com>\n+\n+\t* g++.db/bprob/bprob.exp: Do not check gcno files.\n+\tUse -fprofile-use for profile use.\n+\t* gcc.misc-tests/bprob.exp: Ditto.\n+\t* g++.dg/tree-pro/tree-prof.exp: Do not check gcno files.\n+\t* gcc.dg/matrix/matrix.exp: Ditto.\n+\t* gcc.dg/struct/struct-reorg.exp: Ditto.\n+\t* gcc.dg/tree-prof/tree-prof.exp: Ditto.\n+\t* gcc.dg/profile-dir-1.c: New test.\n+\t* gcc.dg/profile-dir-2.c: New test.\n+\t* gcc.dg/profile-dir-3.c: New test.\n+\n 2008-03-31  Volker Reichelt  <v.reichelt@netcologne.de>\n \n \tPR c/35750"}, {"sha": "a2f011f69eeaae0a1a178c6b1af66eaeddfb4084", "filename": "gcc/testsuite/g++.dg/bprob/bprob.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fbprob%2Fbprob.exp?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -27,7 +27,7 @@ if { ![check_profiling_available \"-fprofile-arcs\"] } {\n \n # The procedures in profopt.exp need these parameters.\n set tool g++\n-set prof_ext \"gcda gcno\"\n+set prof_ext \"gcda\"\n \n if $tracelevel then {\n     strace $tracelevel\n@@ -51,7 +51,7 @@ if $tracelevel then {\n load_lib profopt.exp\n \n set profile_options \"-fprofile-arcs\"\n-set feedback_options \"-fbranch-probabilities\"\n+set feedback_options \"-fprofile-use\"\n \n # Main loop.\n foreach profile_option $profile_options feedback_option $feedback_options {"}, {"sha": "930df4f1acc1375c7d9f9d02903f6c9f20e21596", "filename": "gcc/testsuite/g++.dg/tree-prof/tree-prof.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Ftree-prof.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Ftree-prof.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftree-prof%2Ftree-prof.exp?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -26,7 +26,7 @@ if { ![check_profiling_available \"\"] } {\n \n # The procedures in profopt.exp need these parameters.\n set tool g++\n-set prof_ext \"gcda gcno\"\n+set prof_ext \"gcda\"\n \n # Override the list defined in profopt.exp.\n set PROFOPT_OPTIONS [list {}]"}, {"sha": "b2f4ede944877ec99e00bd5741383fb135f8088e", "filename": "gcc/testsuite/gcc.dg/matrix/matrix.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fmatrix%2Fmatrix.exp?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -36,7 +36,7 @@ if { ![check_profiling_available \"\"] } {\n \n # The procedures in profopt.exp need these parameters.\n set tool gcc\n-set prof_ext \"gcda gcno\"\n+set prof_ext \"gcda\"\n \n # Override the list defined in profopt.exp.\n set PROFOPT_OPTIONS [list {}]"}, {"sha": "78fbcb20eb500f076a7721c8b5b4b35e0da05953", "filename": "gcc/testsuite/gcc.dg/profile-dir-1.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-dir-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-dir-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-dir-1.c?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fprofile-generate=.\" } */\n+/* { dg-final { scan-assembler \"\\\"./profile-dir-1.gcda\\\"\" } } */\n+\n+int\n+main(void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-coverage-files } } */"}, {"sha": "af55b36a400d11199071333396f918857e7bf043", "filename": "gcc/testsuite/gcc.dg/profile-dir-2.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-dir-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-dir-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-dir-2.c?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fprofile-generate\" } */\n+/* { dg-final { scan-assembler \"/profile-dir-2.gcda\" } } */\n+\n+int\n+main(void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-coverage-files } } */"}, {"sha": "0a924e97251b27d23e16b6ecc81c2933f6c3eac6", "filename": "gcc/testsuite/gcc.dg/profile-dir-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-dir-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-dir-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fprofile-dir-3.c?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O -fprofile-generate -fprofile-dir=.\" } */\n+/* { dg-final { scan-assembler \"\\\"./profile-dir-3.gcda\\\"\" } } */\n+\n+int\n+main(void)\n+{\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-coverage-files } } */"}, {"sha": "19a7f63a7dd4b5c392f2393a625ffa19b7281990", "filename": "gcc/testsuite/gcc.dg/struct/struct-reorg.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fstruct-reorg.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fstruct-reorg.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fstruct%2Fstruct-reorg.exp?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -36,7 +36,7 @@ if { ![check_profiling_available \"\"] } {\n \n # The procedures in profopt.exp need these parameters.\n set tool gcc\n-set prof_ext \"gcda gcno\"\n+set prof_ext \"gcda\"\n \n # Override the list defined in profopt.exp.\n set PROFOPT_OPTIONS [list {}]"}, {"sha": "974c68b1d6fca4d4af82fc5f7ff38bcac0b58712", "filename": "gcc/testsuite/gcc.dg/tree-prof/tree-prof.exp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftree-prof.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftree-prof.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-prof%2Ftree-prof.exp?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -26,7 +26,7 @@ if { ![check_profiling_available \"\"] } {\n \n # The procedures in profopt.exp need these parameters.\n set tool gcc\n-set prof_ext \"gcda gcno\"\n+set prof_ext \"gcda\"\n \n # Override the list defined in profopt.exp.\n set PROFOPT_OPTIONS [list {}]"}, {"sha": "933546e1c407858e8d7a85b2f7396b3cbd53ac2f", "filename": "gcc/testsuite/gcc.misc-tests/bprob.exp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.misc-tests%2Fbprob.exp?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -27,7 +27,7 @@ if { ![check_profiling_available \"-fprofile-arcs\"] } {\n \n # The procedures in profopt.exp need these parameters.\n set tool gcc\n-set prof_ext \"gcda gcno\"\n+set prof_ext \"gcda\"\n set perf_ext tim\n \n # Override the list defined in profopt.exp.\n@@ -48,7 +48,7 @@ if $tracelevel then {\n load_lib profopt.exp\n \n set profile_options \"-fprofile-arcs\"\n-set feedback_options \"-fbranch-probabilities\"\n+set feedback_options \"-fprofile-use\"\n \n foreach profile_option $profile_options feedback_option $feedback_options {\n     foreach src [lsort [glob -nocomplain $srcdir/$subdir/bprob-*.c]] {"}, {"sha": "36b24d7eabf3545dc1db2197359bc8bdfca3a45b", "filename": "gcc/toplev.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -152,6 +152,9 @@ const char *dump_base_name;\n \n const char *aux_base_name;\n \n+/* Prefix for profile data files */\n+const char *profile_data_prefix;\n+\n /* A mask of target_flags that includes bit X if X was set or cleared\n    on the command line.  */\n "}, {"sha": "9c42aefd78b68d439f54bcda124f132f0c3fe20b", "filename": "gcc/toplev.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftoplev.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2f908293e243324e97499a2889a0b208673b34f7/gcc%2Ftoplev.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.h?ref=2f908293e243324e97499a2889a0b208673b34f7", "patch": "@@ -111,6 +111,7 @@ extern const char *progname;\n extern const char *dump_base_name;\n extern const char *aux_base_name;\n extern const char *aux_info_file_name;\n+extern const char *profile_data_prefix;\n extern const char *asm_file_name;\n extern bool exit_after_options;\n "}]}