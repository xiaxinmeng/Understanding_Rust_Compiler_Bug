{"sha": "61e95a9bf6d4e8cc4de7b2d2b4c1ac989fa76836", "node_id": "C_kwDOANBUbNoAKDYxZTk1YTliZjZkNGU4Y2M0ZGU3YjJkMmI0YzFhYzk4OWZhNzY4MzY", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-06-14T12:29:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-14T12:29:33Z"}, "message": "Merge #1296\n\n1296: Ast dump trait impl r=CohenArthur a=CohenArthur\n\nNeeds #1295\r\n\r\nThis adds the dumping of trait implementations for types. However, it is incomplete as I don't believe we can yet handle associated types and associated constants properly? Am I looking in the wrong place?\r\n\r\nWill dig deeper, but opening for any early review.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>", "tree": {"sha": "ba05ce52f9288593f1190792d9a66d98a905c108", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ba05ce52f9288593f1190792d9a66d98a905c108"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/61e95a9bf6d4e8cc4de7b2d2b4c1ac989fa76836", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiqH8tCRBK7hj4Ov3rIwAAddkIAKzU147Gmo2Om1XE3h8IISeT\nei8lGuP6+PkU5OiYNJq6yli8aFAMablMSlU7EPCbns67mVkdYl5Li5VB6flkJZ6F\nzfYoq7VN6JuKlH1eUNOhJ76K4tWuSts2d9Q0IydfNFCgx5I0mMHA2Y8HEDgBkEjf\nDp16RE/zC7c+ncHPQM3MFCMhUIN3vOvn6vLFcvCiEWxx7WR/45yp2bIMITbXsGmx\nUMjkm9/XYqusr7E4H6niHoRDSFPU0k1IdpMi9xZ/YvWynak1F9YZXs8XsTJ+Iuun\nrZ4tcrT5pNxV3/UDt/20wPw9Bs9gF4fDL2hOltB54OuvSjbCcZEHIW3ZZlQllG8=\n=KsuX\n-----END PGP SIGNATURE-----\n", "payload": "tree ba05ce52f9288593f1190792d9a66d98a905c108\nparent 1c679d7f42834a72956d6fb39c8d298dd6dc4b4e\nparent 88db3982bc2c38111077fe0adc93d8451bad2ca1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1655209773 +0000\ncommitter GitHub <noreply@github.com> 1655209773 +0000\n\nMerge #1296\n\n1296: Ast dump trait impl r=CohenArthur a=CohenArthur\n\nNeeds #1295\r\n\r\nThis adds the dumping of trait implementations for types. However, it is incomplete as I don't believe we can yet handle associated types and associated constants properly? Am I looking in the wrong place?\r\n\r\nWill dig deeper, but opening for any early review.\n\nCo-authored-by: Arthur Cohen <arthur.cohen@embecosm.com>\n"}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e95a9bf6d4e8cc4de7b2d2b4c1ac989fa76836", "html_url": "https://github.com/Rust-GCC/gccrs/commit/61e95a9bf6d4e8cc4de7b2d2b4c1ac989fa76836", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/61e95a9bf6d4e8cc4de7b2d2b4c1ac989fa76836/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c679d7f42834a72956d6fb39c8d298dd6dc4b4e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1c679d7f42834a72956d6fb39c8d298dd6dc4b4e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1c679d7f42834a72956d6fb39c8d298dd6dc4b4e"}, {"sha": "88db3982bc2c38111077fe0adc93d8451bad2ca1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/88db3982bc2c38111077fe0adc93d8451bad2ca1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/88db3982bc2c38111077fe0adc93d8451bad2ca1"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "d1105c9507389ff5dc8f3cfc65e4b534b4817ade", "filename": "gcc/rust/ast/rust-ast-dump.cc", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/61e95a9bf6d4e8cc4de7b2d2b4c1ac989fa76836/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/61e95a9bf6d4e8cc4de7b2d2b4c1ac989fa76836/gcc%2Frust%2Fast%2Frust-ast-dump.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-dump.cc?ref=61e95a9bf6d4e8cc4de7b2d2b4c1ac989fa76836", "patch": "@@ -624,7 +624,21 @@ Dump::visit (InherentImpl &impl)\n \n void\n Dump::visit (TraitImpl &impl)\n-{}\n+{\n+  stream << \"impl \";\n+  impl.get_trait_path ().accept_vis (*this);\n+  stream << \" for \";\n+  impl.get_type ()->accept_vis (*this);\n+\n+  stream << \" {\\n\";\n+  indentation.increment ();\n+\n+  for (auto &item : impl.get_impl_items ())\n+    item->accept_vis (*this);\n+\n+  indentation.decrement ();\n+  stream << \"\\n}\\n\";\n+}\n \n void\n Dump::visit (ExternalStaticItem &item)"}]}