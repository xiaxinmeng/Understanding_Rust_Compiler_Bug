{"sha": "2e6039943389e265c08f390ff07f39790409c022", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmU2MDM5OTQzMzg5ZTI2NWMwOGYzOTBmZjA3ZjM5NzkwNDA5YzAyMg==", "commit": {"author": {"name": "Olivier Hainque", "email": "hainque@adacore.com", "date": "2007-06-06T10:45:25Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2007-06-06T10:45:25Z"}, "message": "raise-gcc.c (__gnat_eh_personality): Tweak the signature and add special code on ia64-vms to handle major...\n\n2007-04-20  Olivier Hainque  <hainque@adacore.com>\n\n\t* raise-gcc.c (__gnat_eh_personality): Tweak the signature and add\n\tspecial code on ia64-vms to handle major incompatibilities between the\n\tGCC unwinding ABI and the VMS Condition Handling Facility, both calling\n\tthis routine with a very different set of arguments and expectations on\n\tthe return value.\n\nFrom-SVN: r125455", "tree": {"sha": "ef44fa305404ccceaabad62e91fb5c2f22b14927", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ef44fa305404ccceaabad62e91fb5c2f22b14927"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2e6039943389e265c08f390ff07f39790409c022", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6039943389e265c08f390ff07f39790409c022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2e6039943389e265c08f390ff07f39790409c022", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2e6039943389e265c08f390ff07f39790409c022/comments", "author": {"login": "hainque", "id": 18735142, "node_id": "MDQ6VXNlcjE4NzM1MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/18735142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hainque", "html_url": "https://github.com/hainque", "followers_url": "https://api.github.com/users/hainque/followers", "following_url": "https://api.github.com/users/hainque/following{/other_user}", "gists_url": "https://api.github.com/users/hainque/gists{/gist_id}", "starred_url": "https://api.github.com/users/hainque/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hainque/subscriptions", "organizations_url": "https://api.github.com/users/hainque/orgs", "repos_url": "https://api.github.com/users/hainque/repos", "events_url": "https://api.github.com/users/hainque/events{/privacy}", "received_events_url": "https://api.github.com/users/hainque/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "e090bc755c27e9c1364f02e2228bbea13a47f34b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e090bc755c27e9c1364f02e2228bbea13a47f34b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e090bc755c27e9c1364f02e2228bbea13a47f34b"}], "stats": {"total": 65, "additions": 61, "deletions": 4}, "files": [{"sha": "e6879f7a8268ba75d03bd9607d61cd6763e2b9e1", "filename": "gcc/ada/raise-gcc.c", "status": "modified", "additions": 61, "deletions": 4, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2e6039943389e265c08f390ff07f39790409c022/gcc%2Fada%2Fraise-gcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2e6039943389e265c08f390ff07f39790409c022/gcc%2Fada%2Fraise-gcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fraise-gcc.c?ref=2e6039943389e265c08f390ff07f39790409c022", "patch": "@@ -6,7 +6,7 @@\n  *                                                                          *\n  *                          C Implementation File                           *\n  *                                                                          *\n- *             Copyright (C) 1992-2005, Free Software Foundation, Inc.      *\n+ *             Copyright (C) 1992-2007, Free Software Foundation, Inc.      *\n  *                                                                          *\n  * GNAT is free software;  you can  redistribute it  and/or modify it under *\n  * terms of the  GNU General Public License as published  by the Free Soft- *\n@@ -1004,20 +1004,77 @@ extern void __gnat_notify_unhandled_exception (void);\n /* Below is the eh personality routine per se. We currently assume that only\n    GNU-Ada exceptions are met.  */\n \n+/* Major tweak for ia64-vms : the CHF propagation phase calls this personality\n+   routine with sigargs/mechargs arguments and has very specific expectations\n+   on possible return values.\n+\n+   We handle this with a number of specific tricks:\n+\n+   1. We tweak the personality routine prototype to have the \"version\" and\n+      \"phases\" two first arguments be void * instead of int and _Unwind_Action\n+      as nominally expected in the GCC context.\n+\n+      This allows us to access the full range of bits passed in every case and\n+      has no impact on the callers side since each argument remains assigned\n+      the same single 64bit slot.\n+\n+   2. We retrieve the corresponding int and _Unwind_Action values within the\n+      routine for regular use with truncating conversions. This is a noop when\n+      called from the libgcc unwinder.\n+\n+   3. We assume we're called by the VMS CHF when unexpected bits are set in\n+      both those values. The incoming arguments are then real sigargs and\n+      mechargs pointers, which we then redirect to __gnat_handle_vms_condition\n+      for proper processing.\n+*/\n+#if defined (VMS) && defined (__IA64)\n+typedef void * version_arg_t;\n+typedef void * phases_arg_t;\n+#else\n+typedef int version_arg_t;\n+typedef _Unwind_Action phases_arg_t;\n+#endif\n+\n _Unwind_Reason_Code\n-__gnat_eh_personality (int uw_version,\n-                       _Unwind_Action uw_phases,\n+__gnat_eh_personality (version_arg_t version_arg,\n+                       phases_arg_t phases_arg,\n                        _Unwind_Exception_Class uw_exception_class,\n                        _Unwind_Exception *uw_exception,\n                        _Unwind_Context *uw_context)\n {\n+  /* Fetch the version and phases args with their nominal ABI types for later\n+     use. This is a noop everywhere except on ia64-vms when called from the\n+     Condition Handling Facility.  */\n+  int uw_version = (int) version_arg;\n+  _Unwind_Action uw_phases = (_Unwind_Action) phases_arg;\n+\n   _GNAT_Exception * gnat_exception = (_GNAT_Exception *) uw_exception;\n \n   region_descriptor region;\n   action_descriptor action;\n \n+  /* Check that we're called from the ABI context we expect, with a major\n+     possible variation on VMS for IA64.  */\n   if (uw_version != 1)\n-    return _URC_FATAL_PHASE1_ERROR;\n+    {\n+      #if defined (VMS) && defined (__IA64)\n+\n+      /* Assume we're called with sigargs/mechargs arguments if really\n+\t unexpected bits are set in our first two formals.  Redirect to the\n+\t GNAT condition handling code in this case.  */\n+\n+      extern long __gnat_handle_vms_condition (void *, void *);\n+\n+      unsigned int version_unexpected_bits_mask = 0xffffff00U;\n+      unsigned int phases_unexpected_bits_mask  = 0xffffff00U;\n+\n+      if ((unsigned int)uw_version & version_unexpected_bits_mask\n+\t  && (unsigned int)uw_phases & phases_unexpected_bits_mask)\n+\treturn __gnat_handle_vms_condition (version_arg, phases_arg);\n+      #endif\n+\n+      return _URC_FATAL_PHASE1_ERROR;\n+    }\n \n   db_indent (DB_INDENT_RESET);\n   db_phases (uw_phases);"}]}