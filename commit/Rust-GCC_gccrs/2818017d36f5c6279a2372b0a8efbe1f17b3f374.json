{"sha": "2818017d36f5c6279a2372b0a8efbe1f17b3f374", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjgxODAxN2QzNmY1YzYyNzlhMjM3MmIwYThlZmJlMWYxN2IzZjM3NA==", "commit": {"author": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-26T21:34:14Z"}, "committer": {"name": "Philip Herron", "email": "philip.herron@embecosm.com", "date": "2021-07-27T13:33:43Z"}, "message": "Adds support for compilation of extern \"C\" functions.\n\nThis adds extern block compilation support. It currently assumes the C abi\nand does not perform any name mangling. It does not support varadic\narguments yet but its the initial support to get this working.\n\nFixes #421", "tree": {"sha": "539d5f7a8df8ab3fee23fd057914cfc380775358", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/539d5f7a8df8ab3fee23fd057914cfc380775358"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2818017d36f5c6279a2372b0a8efbe1f17b3f374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2818017d36f5c6279a2372b0a8efbe1f17b3f374", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2818017d36f5c6279a2372b0a8efbe1f17b3f374", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2818017d36f5c6279a2372b0a8efbe1f17b3f374/comments", "author": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "committer": {"login": "philberty", "id": 84585, "node_id": "MDQ6VXNlcjg0NTg1", "avatar_url": "https://avatars.githubusercontent.com/u/84585?v=4", "gravatar_id": "", "url": "https://api.github.com/users/philberty", "html_url": "https://github.com/philberty", "followers_url": "https://api.github.com/users/philberty/followers", "following_url": "https://api.github.com/users/philberty/following{/other_user}", "gists_url": "https://api.github.com/users/philberty/gists{/gist_id}", "starred_url": "https://api.github.com/users/philberty/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/philberty/subscriptions", "organizations_url": "https://api.github.com/users/philberty/orgs", "repos_url": "https://api.github.com/users/philberty/repos", "events_url": "https://api.github.com/users/philberty/events{/privacy}", "received_events_url": "https://api.github.com/users/philberty/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b176f389161bbe30237ff29063697f8e0ccaa513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b176f389161bbe30237ff29063697f8e0ccaa513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b176f389161bbe30237ff29063697f8e0ccaa513"}], "stats": {"total": 174, "additions": 174, "deletions": 0}, "files": [{"sha": "1eba011c6fac3a8bd692517bb5a3cfd0fce4a444", "filename": "gcc/rust/backend/rust-compile-extern.h", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2818017d36f5c6279a2372b0a8efbe1f17b3f374/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2818017d36f5c6279a2372b0a8efbe1f17b3f374/gcc%2Frust%2Fbackend%2Frust-compile-extern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-extern.h?ref=2818017d36f5c6279a2372b0a8efbe1f17b3f374", "patch": "@@ -0,0 +1,150 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#ifndef RUST_COMPILE_EXTERN_ITEM\n+#define RUST_COMPILE_EXTERN_ITEM\n+\n+#include \"rust-compile-base.h\"\n+#include \"rust-compile-tyty.h\"\n+#include \"rust-compile-implitem.h\"\n+#include \"rust-compile-var-decl.h\"\n+#include \"rust-compile-stmt.h\"\n+#include \"rust-compile-expr.h\"\n+#include \"rust-compile-fnparam.h\"\n+\n+namespace Rust {\n+namespace Compile {\n+\n+class CompileExternItem : public HIRCompileBase\n+{\n+  using Rust::Compile::HIRCompileBase::visit;\n+\n+public:\n+  static void compile (HIR::ExternalItem *item, Context *ctx,\n+\t\t       bool compile_fns = true,\n+\t\t       TyTy::BaseType *concrete = nullptr)\n+  {\n+    CompileExternItem compiler (ctx, compile_fns, concrete);\n+    item->accept_vis (compiler);\n+  }\n+\n+  void visit (HIR::ExternalStaticItem &item) override\n+  {\n+    TyTy::BaseType *resolved_type = nullptr;\n+    bool ok = ctx->get_tyctx ()->lookup_type (item.get_mappings ().get_hirid (),\n+\t\t\t\t\t      &resolved_type);\n+    rust_assert (ok);\n+\n+    std::string name = item.get_item_name ();\n+\n+    // FIXME\n+    // this is assuming C ABI\n+    std::string asm_name = \"_\" + name;\n+\n+    Btype *type = TyTyResolveCompile::compile (ctx, resolved_type);\n+    bool is_external = true;\n+    bool is_hidden = false;\n+    bool in_unique_section = false;\n+\n+    Bvariable *static_global\n+      = ctx->get_backend ()->global_variable (name, asm_name, type, is_external,\n+\t\t\t\t\t      is_hidden, in_unique_section,\n+\t\t\t\t\t      item.get_locus ());\n+    ctx->insert_var_decl (item.get_mappings ().get_hirid (), static_global);\n+    ctx->push_var (static_global);\n+  }\n+\n+  void visit (HIR::ExternalFunctionItem &function) override\n+  {\n+    if (!compile_fns)\n+      return;\n+\n+    TyTy::BaseType *fntype_tyty;\n+    if (!ctx->get_tyctx ()->lookup_type (function.get_mappings ().get_hirid (),\n+\t\t\t\t\t &fntype_tyty))\n+      {\n+\trust_fatal_error (function.get_locus (),\n+\t\t\t  \"failed to lookup function type\");\n+\treturn;\n+      }\n+\n+    rust_assert (fntype_tyty->get_kind () == TyTy::TypeKind::FNDEF);\n+    TyTy::FnType *fntype = static_cast<TyTy::FnType *> (fntype_tyty);\n+    if (fntype->has_subsititions_defined ())\n+      {\n+\t// we cant do anything for this only when it is used and a concrete type\n+\t// is given\n+\tif (concrete == nullptr)\n+\t  return;\n+\telse\n+\t  {\n+\t    rust_assert (concrete->get_kind () == TyTy::TypeKind::FNDEF);\n+\t    fntype = static_cast<TyTy::FnType *> (concrete);\n+\t  }\n+      }\n+\n+    // items can be forward compiled which means we may not need to invoke this\n+    // code. We might also have already compiled this generic function as well.\n+    Bfunction *lookup = nullptr;\n+    if (ctx->lookup_function_decl (fntype->get_ty_ref (), &lookup, fntype))\n+      {\n+\t// has this been added to the list then it must be finished\n+\tif (ctx->function_completed (lookup))\n+\t  {\n+\t    Bfunction *dummy = nullptr;\n+\t    if (!ctx->lookup_function_decl (fntype->get_ty_ref (), &dummy))\n+\t      ctx->insert_function_decl (fntype->get_ty_ref (), lookup, fntype);\n+\n+\t    return;\n+\t  }\n+      }\n+\n+    if (fntype->has_subsititions_defined ())\n+      {\n+\t// override the Hir Lookups for the substituions in this context\n+\tfntype->override_context ();\n+      }\n+\n+    ::Btype *compiled_fn_type = TyTyResolveCompile::compile (ctx, fntype);\n+\n+    const unsigned int flags\n+      = Backend::function_is_declaration | Backend::function_is_visible;\n+\n+    std::string ir_symbol_name = function.get_item_name ();\n+    // FIXME this assumes C ABI\n+    std::string asm_name = function.get_item_name ();\n+\n+    Bfunction *fndecl\n+      = ctx->get_backend ()->function (compiled_fn_type, ir_symbol_name,\n+\t\t\t\t       asm_name, flags, function.get_locus ());\n+    ctx->insert_function_decl (fntype->get_ty_ref (), fndecl, fntype);\n+  }\n+\n+private:\n+  CompileExternItem (Context *ctx, bool compile_fns, TyTy::BaseType *concrete)\n+    : HIRCompileBase (ctx), compile_fns (compile_fns), concrete (concrete)\n+  {}\n+\n+  bool compile_fns;\n+  TyTy::BaseType *concrete;\n+};\n+\n+} // namespace Compile\n+} // namespace Rust\n+\n+#endif // RUST_COMPILE_EXTERN_ITEM"}, {"sha": "a6bc7f3f73bf077da5ea917d69b07c1f29d89128", "filename": "gcc/rust/backend/rust-compile-item.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2818017d36f5c6279a2372b0a8efbe1f17b3f374/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2818017d36f5c6279a2372b0a8efbe1f17b3f374/gcc%2Frust%2Fbackend%2Frust-compile-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fbackend%2Frust-compile-item.h?ref=2818017d36f5c6279a2372b0a8efbe1f17b3f374", "patch": "@@ -26,6 +26,7 @@\n #include \"rust-compile-stmt.h\"\n #include \"rust-compile-expr.h\"\n #include \"rust-compile-fnparam.h\"\n+#include \"rust-compile-extern.h\"\n \n namespace Rust {\n namespace Compile {\n@@ -274,6 +275,14 @@ class CompileItem : public HIRCompileBase\n \t\t\t\t\tcompile_fns);\n   }\n \n+  void visit (HIR::ExternBlock &extern_block) override\n+  {\n+    for (auto &item : extern_block.get_extern_items ())\n+      {\n+\tCompileExternItem::compile (item.get (), ctx, compile_fns, concrete);\n+      }\n+  }\n+\n private:\n   CompileItem (Context *ctx, bool compile_fns, TyTy::BaseType *concrete)\n     : HIRCompileBase (ctx), compile_fns (compile_fns), concrete (concrete)"}, {"sha": "d416efa33af66cf99be3f9d9a1b394d90d37274b", "filename": "gcc/testsuite/rust/execute/torture/helloworld1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2818017d36f5c6279a2372b0a8efbe1f17b3f374/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld1.rs", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2818017d36f5c6279a2372b0a8efbe1f17b3f374/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld1.rs", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Frust%2Fexecute%2Ftorture%2Fhelloworld1.rs?ref=2818017d36f5c6279a2372b0a8efbe1f17b3f374", "patch": "@@ -0,0 +1,15 @@\n+/* { dg-output \"Hello World\" }*/\n+extern \"C\" {\n+    fn puts(s: *const i8);\n+}\n+\n+fn main() -> i32 {\n+    unsafe {\n+        let a = \"Hello World\";\n+        let b = a as *const str;\n+        let c = b as *const i8;\n+\n+        puts(c);\n+    }\n+    0\n+}"}]}