{"sha": "c84e271261e37fe33fe8e8886e65f563211c7d39", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yzg0ZTI3MTI2MWUzN2ZlMzNmZThlODg4NmU2NWY1NjMyMTFjN2QzOQ==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "1998-10-13T15:25:25Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "1998-10-13T15:25:25Z"}, "message": "Warning fixes:\n\n\t* Makefile.in (gencheck.o): Depend on gansidecl.h.\n\t* c-common.c (print_char_table): Add missing initializers.\n\t(scan_char_table): Likewise.\n\t(time_char_table): Likewise.\n\t* c-decl.c (c_decode_option): Mark parameter `argc' with\n\tATTRIBUTE_UNUSED.\n\t(declare_parm_level): Mark parameter `definition_flag' with\n\tATTRIBUTE_UNUSED.\n\t* c-lex.c (readescape): Use `(unsigned)1' in shift.\n\t(yylex): Likewise.  Cast `sizeof' to an (int) when comparing\n\tagainst one.\n\t* calls.c (store_one_arg): Remove unused parameter `fndecl'.  All\n\tcallers changed.\n\t(emit_call_1): Mark parameters `fndecl' and `funtype' with\n\tATTRIBUTE_UNUSED.\n\t(expand_call): Cast result of MIN() to (unsigned int) when\n\tcomparing against an unsigned value.\n\t* cccp.c (pcfinclude): Remove unused parameter `limit'.  All\n\tcallers changed.\n\t(make_definition): Remove unused parameter `op'.  All callers\n\tchanged.\n\t(create_definition): Cast REST_EXTENSION_LENGTH to (long) when\n\tcomparing against the result of pointer arithmetic.\n\t* config/mips/mips.h (FUNCTION_ARG_BOUNDARY): Cast to (unsigned)\n\twhen comparing against one.\n\t* dwarf2out.c (dwarf2out_frame_debug): Cast REGNO() and\n \tHARD_FRAME_POINTER_REGNUM to (unsigned) when comparing against\n \tone.\n\t(output_die): Move variable `i' into the scope in which it is\n\tused.  Change its type to `unsigned'.\n\t(output_die): Cast the result of `strlen' to (int) when passing it\n\tto ASM_OUTPUT_ASCII().\n\t(output_pubnames): Likewise.\n\t(output_line_info): Likewise.\n\t* emit-rtl.c (global_rtl): Add missing initializers.\n\t* explow.c (promote_mode): Mark parameter `for_call' with\n\tATTRIBUTE_UNUSED.\n\t* expmed.c (expand_shift): Cast the result of GET_MODE_BITSIZE to\n \t`unsigned HOST_WIDE_INT' when comparing against one.\n\t(synth_mult): Change type of variable `cost' to int.\n\t(emit_store_flag): Use `(unsigned HOST_WIDE_INT) 1' in shift.\n\t* expr.c (copy_blkmode_from_reg): Cast BITS_PER_WORD to (unsigned)\n\twhen comparing against one.\n\t(get_inner_reference): Change variable `alignment' to unsigned.\n\t(expand_expr): Cast the result of GET_MODE_ALIGNMENT to (unsigned\n\tint) when comparing against one.\n\t(expand_builtin_setjmp): Change type of variable `i' to size_t.\n\t* fold-const.c (div_and_round_double): Cast BASE to\n\t(HOST_WIDE_INT) when comparing against one.\n\t* gencheck.c: Include gansidecl.h.\n\t(main): Mark parameter `argv' with ATTRIBUTE_UNUSED.\n\t* optabs.c (gen_cond_trap): Mark parameters `code', `op2' and\n\t`tcode' with ATTRIBUTE_UNUSED.\n\t* real.c (edivm): Cast constant value to (unsigned long) in\n\texpression compared against an unsigned value.\n\t* stmt.c (expand_return): Cast BITS_PER_WORD to (unsigned) when\n\tcomparing against one.\n\t(expand_end_case): Cast CASE_VALUES_THRESHOLD to (unsigned int)\n\twhen comparing against one.\n\t* stor-layout.c (mode_for_size): Cast MAX_FIXED_MODE_SIZE to\n\t(unsigned int) when comparing against one.  Likewise for\n\tGET_MODE_BITSIZE.\n\t(smallest_mode_for_size): Likewise.\n\t(save_storage_status): Mark parameter `p' with ATTRIBUTE_UNUSED.\n\t(restore_storage_status): Likewise.\n\t* toplev.c (debug_args): Add missing initializer.\n\t(f_options): Spelling correction.  Add missing initializers.\n\t(documented_lang_options): Likewise.\n\t(debug_end_source_file): Mark parameter `lineno' with\n\tATTRIBUTE_UNUSED.\n\t* tree.c (valid_machine_attribute): Mark parameters `attr_args',\n\t`decl' and `type' with ATTRIBUTE_UNUSED.\n\t* varasm.c (decode_reg_name): Cast `sizeof' expression to (int)\n\twhen comparing against one.\n\t(assemble_variable): Mark parameter `top_level' with\n\tATTRIBUTE_UNUSED.\n\t(assemble_external_libcall): Mark parameter `fun' with\n\tATTRIBUTE_UNUSED.\n\t(output_constant_pool): Mark parameters `fnname' and `fndecl' with\n\tATTRIBUTE_UNUSED.\n\nFrom-SVN: r23054", "tree": {"sha": "9109de466e2f46323434f5bfe9d22d5a36da5c61", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9109de466e2f46323434f5bfe9d22d5a36da5c61"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c84e271261e37fe33fe8e8886e65f563211c7d39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84e271261e37fe33fe8e8886e65f563211c7d39", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c84e271261e37fe33fe8e8886e65f563211c7d39", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c84e271261e37fe33fe8e8886e65f563211c7d39/comments", "author": null, "committer": null, "parents": [{"sha": "9fbf56f7a1c01f69835b0dd722c4df5d6d83ab0b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fbf56f7a1c01f69835b0dd722c4df5d6d83ab0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fbf56f7a1c01f69835b0dd722c4df5d6d83ab0b"}], "stats": {"total": 331, "additions": 224, "deletions": 107}, "files": [{"sha": "3f9ba28bbfe8555f810c57d22848b69198ef6ccc", "filename": "gcc/ChangeLog", "status": "modified", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -1,3 +1,106 @@\n+Tue Oct 13 17:46:18 1998  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* Makefile.in (gencheck.o): Depend on gansidecl.h.\n+\n+\t* c-common.c (print_char_table): Add missing initializers.\n+\t(scan_char_table): Likewise.\n+\t(time_char_table): Likewise.\n+\n+\t* c-decl.c (c_decode_option): Mark parameter `argc' with\n+\tATTRIBUTE_UNUSED.\n+\t(declare_parm_level): Mark parameter `definition_flag' with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* c-lex.c (readescape): Use `(unsigned)1' in shift.\n+\t(yylex): Likewise.  Cast `sizeof' to an (int) when comparing\n+\tagainst one.\n+\n+\t* calls.c (store_one_arg): Remove unused parameter `fndecl'.  All\n+\tcallers changed.\n+\t(emit_call_1): Mark parameters `fndecl' and `funtype' with\n+\tATTRIBUTE_UNUSED.\n+\t(expand_call): Cast result of MIN() to (unsigned int) when\n+\tcomparing against an unsigned value.\n+\n+\t* cccp.c (pcfinclude): Remove unused parameter `limit'.  All\n+\tcallers changed.\n+\t(make_definition): Remove unused parameter `op'.  All callers\n+\tchanged.\n+\t(create_definition): Cast REST_EXTENSION_LENGTH to (long) when\n+\tcomparing against the result of pointer arithmetic.\n+\n+\t* config/mips/mips.h (FUNCTION_ARG_BOUNDARY): Cast to (unsigned)\n+\twhen comparing against one.\n+\n+\t* dwarf2out.c (dwarf2out_frame_debug): Cast REGNO() and\n+ \tHARD_FRAME_POINTER_REGNUM to (unsigned) when comparing against\n+ \tone.\n+\t(output_die): Move variable `i' into the scope in which it is\n+\tused.  Change its type to `unsigned'.\n+\t(output_die): Cast the result of `strlen' to (int) when passing it\n+\tto ASM_OUTPUT_ASCII().\n+\t(output_pubnames): Likewise.\n+\t(output_line_info): Likewise.\n+\n+\t* emit-rtl.c (global_rtl): Add missing initializers.\n+\n+\t* explow.c (promote_mode): Mark parameter `for_call' with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* expmed.c (expand_shift): Cast the result of GET_MODE_BITSIZE to\n+ \t`unsigned HOST_WIDE_INT' when comparing against one.\n+\t(synth_mult): Change type of variable `cost' to int.\n+\t(emit_store_flag): Use `(unsigned HOST_WIDE_INT) 1' in shift.\n+\n+\t* expr.c (copy_blkmode_from_reg): Cast BITS_PER_WORD to (unsigned)\n+\twhen comparing against one.\n+\t(get_inner_reference): Change variable `alignment' to unsigned.\n+\t(expand_expr): Cast the result of GET_MODE_ALIGNMENT to (unsigned\n+\tint) when comparing against one.\n+\t(expand_builtin_setjmp): Change type of variable `i' to size_t.\n+\n+\t* fold-const.c (div_and_round_double): Cast BASE to\n+\t(HOST_WIDE_INT) when comparing against one.\n+\n+\t* gencheck.c: Include gansidecl.h.\n+\t(main): Mark parameter `argv' with ATTRIBUTE_UNUSED.\n+\n+\t* optabs.c (gen_cond_trap): Mark parameters `code', `op2' and\n+\t`tcode' with ATTRIBUTE_UNUSED.\n+\n+\t* real.c (edivm): Cast constant value to (unsigned long) in\n+\texpression compared against an unsigned value.\n+\n+\t* stmt.c (expand_return): Cast BITS_PER_WORD to (unsigned) when\n+\tcomparing against one.\n+\t(expand_end_case): Cast CASE_VALUES_THRESHOLD to (unsigned int)\n+\twhen comparing against one.\n+\n+\t* stor-layout.c (mode_for_size): Cast MAX_FIXED_MODE_SIZE to\n+\t(unsigned int) when comparing against one.  Likewise for\n+\tGET_MODE_BITSIZE.\n+\t(smallest_mode_for_size): Likewise.\n+\t(save_storage_status): Mark parameter `p' with ATTRIBUTE_UNUSED.\n+\t(restore_storage_status): Likewise.\n+\t\n+\t* toplev.c (debug_args): Add missing initializer.\n+\t(f_options): Spelling correction.  Add missing initializers.\n+\t(documented_lang_options): Likewise.\n+\t(debug_end_source_file): Mark parameter `lineno' with\n+\tATTRIBUTE_UNUSED.\n+\n+\t* tree.c (valid_machine_attribute): Mark parameters `attr_args',\n+\t`decl' and `type' with ATTRIBUTE_UNUSED.\n+\n+\t* varasm.c (decode_reg_name): Cast `sizeof' expression to (int)\n+\twhen comparing against one.\n+\t(assemble_variable): Mark parameter `top_level' with\n+\tATTRIBUTE_UNUSED.\n+\t(assemble_external_libcall): Mark parameter `fun' with\n+\tATTRIBUTE_UNUSED.\n+\t(output_constant_pool): Mark parameters `fnname' and `fndecl' with\n+\tATTRIBUTE_UNUSED.\n+\n Tue Oct 13 12:51:04 1998  Nick Clifton  <nickc@cygnus.com>\n \n \t* config/v850/lib1funcs.asm (_udivsi3): Add .type declaration."}, {"sha": "b39f69b86c7c9a78fc471ca20968c1721d552374", "filename": "gcc/Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FMakefile.in?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -1363,7 +1363,7 @@ gencheck : gencheck.o tree.def $(lang_tree_files) $(HOST_LIBDEPS)\n \t$(HOST_CC) $(HOST_CFLAGS) $(HOST_LDFLAGS) -o $@ \\\n \t gencheck.o $(HOST_LIBS)\n \n-gencheck.o : gencheck.c hconfig.h system.h\n+gencheck.o : gencheck.c hconfig.h system.h gansidecl.h\n \t$(HOST_CC) -c $(HOST_CFLAGS) $(HOST_CPPFLAGS) $(INCLUDES) $(srcdir)/gencheck.c\n \n dumpvers: dumpvers.c"}, {"sha": "a7b1ff1e937fe611c8ac3f34368e70eb58ff68f5", "filename": "gcc/c-common.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -1137,7 +1137,7 @@ static format_char_info print_char_table[] = {\n   { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-wp\"\t\t},\n   { \"p\",\t1,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"-w\"\t\t},\n   { \"n\",\t1,\tT_I,\tNULL,\tT_S,\tT_L,\tT_LL,\tNULL,\tNULL,\t\"\"\t\t},\n-  { NULL }\n+  { NULL,\t0,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL\t\t}\n };\n \n static format_char_info scan_char_table[] = {\n@@ -1151,7 +1151,7 @@ static format_char_info scan_char_table[] = {\n   { \"S\",\t1,\tT_W,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*a\"\t},\n   { \"p\",\t2,\tT_V,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\t\"*\"\t},\n   { \"n\",\t1,\tT_I,\tT_C,\tT_S,\tT_L,\tT_LL,\tNULL,\tNULL,\t\"\"\t},\n-  { NULL }\n+  { NULL,\t0,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL,\tNULL\t}\n };\n \n /* Handle format characters recognized by glibc's strftime.c.\n@@ -1176,7 +1176,7 @@ static format_char_info time_char_table[] = {\n   { \"p\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"#\" },\n   { \"bh\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"^\" },\n   { \"CY\",\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, \"-_0EOw\" },\n-  { NULL }\n+  { NULL,\t\t0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }\n };\n \n typedef struct function_format_info"}, {"sha": "1cf5b45e8344f8b99c221d29c3d15f2606337122", "filename": "gcc/c-decl.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -601,7 +601,7 @@ int dollars_in_ident = DOLLARS_IN_IDENTIFIERS;\n    \n int\n c_decode_option (argc, argv)\n-     int argc;\n+     int argc ATTRIBUTE_UNUSED;\n      char **argv;\n {\n   int strings_processed;\n@@ -946,7 +946,7 @@ kept_level_p ()\n \n void\n declare_parm_level (definition_flag)\n-     int definition_flag;\n+     int definition_flag ATTRIBUTE_UNUSED;\n {\n   current_binding_level->parm_flag = 1;\n }"}, {"sha": "ec1386ae59c30864e40aa646eff816d48460a3b4", "filename": "gcc/c-lex.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fc-lex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fc-lex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-lex.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -950,7 +950,7 @@ readescape (ignore_ptr)\n \t;\n       else if ((count - 1) * 4 >= TYPE_PRECISION (integer_type_node)\n \t       || (count > 1\n-\t\t   && ((1 << (TYPE_PRECISION (integer_type_node) - (count - 1) * 4))\n+\t\t   && (((unsigned)1 << (TYPE_PRECISION (integer_type_node) - (count - 1) * 4))\n \t\t       <= firstdig)))\n \tpedwarn (\"hex escape out of range\");\n       return code;\n@@ -1848,7 +1848,7 @@ yylex ()\n \t\tif (ignore)\n \t\t  goto tryagain;\n \t\tif (width < HOST_BITS_PER_INT\n-\t\t    && (unsigned) c >= (1 << width))\n+\t\t    && (unsigned) c >= ((unsigned)1 << width))\n \t\t  pedwarn (\"escape sequence out of range for character\");\n #ifdef MAP_CHARACTER\n \t\tif (ISPRINT (c))\n@@ -2003,7 +2003,7 @@ yylex ()\n \t\tif (ignore)\n \t\t  goto skipnewline;\n \t\tif (width < HOST_BITS_PER_INT\n-\t\t    && (unsigned) c >= (1 << width))\n+\t\t    && (unsigned) c >= ((unsigned)1 << width))\n \t\t  pedwarn (\"escape sequence out of range for character\");\n \t      }\n \t    else if (c == '\\n')\n@@ -2063,7 +2063,7 @@ yylex ()\n \t\tfor (byte = 0; byte < WCHAR_BYTES; ++byte)\n \t\t  {\n \t\t    int value;\n-\t\t    if (byte >= sizeof (c))\n+\t\t    if (byte >= (int) sizeof (c))\n \t\t      value = 0;\n \t\t    else\n \t\t      value = (c >> (byte * width)) & bytemask;"}, {"sha": "d46973ae1558089e5587f8fadf55c2bed19e7f62", "filename": "gcc/calls.c", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fcalls.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fcalls.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcalls.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -126,7 +126,7 @@ static void emit_call_1\t\tPROTO((rtx, tree, tree, HOST_WIDE_INT,\n \t\t\t\t       HOST_WIDE_INT, rtx, rtx,\n \t\t\t\t       int, rtx, int));\n static void store_one_arg\tPROTO ((struct arg_data *, rtx, int, int,\n-\t\t\t\t\ttree, int));\n+\t\t\t\t\tint));\n \f\n /* If WHICH is 1, return 1 if EXP contains a call to the built-in function\n    `alloca'.\n@@ -343,8 +343,8 @@ emit_call_1 (funexp, fndecl, funtype, stack_size, struct_value_size,\n              next_arg_reg, valreg, old_inhibit_defer_pop, call_fusage,\n \t     is_const)\n      rtx funexp;\n-     tree fndecl;\n-     tree funtype;\n+     tree fndecl ATTRIBUTE_UNUSED;\n+     tree funtype ATTRIBUTE_UNUSED;\n      HOST_WIDE_INT stack_size;\n      HOST_WIDE_INT struct_value_size;\n      rtx next_arg_reg;\n@@ -1765,7 +1765,7 @@ expand_call (exp, target, ignore)\n   for (i = 0; i < num_actuals; i++)\n     if (args[i].reg == 0 || args[i].pass_on_stack)\n       store_one_arg (&args[i], argblock, may_be_alloca,\n-\t\t     args_size.var != 0, fndecl, reg_parm_stack_space);\n+\t\t     args_size.var != 0, reg_parm_stack_space);\n \n   /* If we have a parm that is passed in registers but not in memory\n      and whose alignment does not permit a direct copy into registers,\n@@ -1777,7 +1777,7 @@ expand_call (exp, target, ignore)\n       if (args[i].reg != 0 && ! args[i].pass_on_stack\n \t&& args[i].mode == BLKmode\n \t  && (TYPE_ALIGN (TREE_TYPE (args[i].tree_value))\n-\t      < MIN (BIGGEST_ALIGNMENT, BITS_PER_WORD)))\n+\t      < (unsigned int) MIN (BIGGEST_ALIGNMENT, BITS_PER_WORD)))\n \t{\n \t  int bytes = int_size_in_bytes (TREE_TYPE (args[i].tree_value));\n \t  int big_endian_correction = 0;\n@@ -1835,7 +1835,7 @@ expand_call (exp, target, ignore)\n     for (i = 0; i < num_actuals; i++)\n       if (args[i].partial != 0 && ! args[i].pass_on_stack)\n \tstore_one_arg (&args[i], argblock, may_be_alloca,\n-\t\t       args_size.var != 0, fndecl, reg_parm_stack_space);\n+\t\t       args_size.var != 0, reg_parm_stack_space);\n \n #ifndef PUSH_ARGS_REVERSED\n #ifdef STACK_BOUNDARY\n@@ -3357,13 +3357,12 @@ target_for_arg (type, size, args_addr, offset)\n    FNDECL is the declaration of the function we are calling.  */\n \n static void\n-store_one_arg (arg, argblock, may_be_alloca, variable_size, fndecl,\n+store_one_arg (arg, argblock, may_be_alloca, variable_size,\n \t       reg_parm_stack_space)\n      struct arg_data *arg;\n      rtx argblock;\n      int may_be_alloca;\n      int variable_size;\n-     tree fndecl;\n      int reg_parm_stack_space;\n {\n   register tree pval = arg->tree_value;"}, {"sha": "363afa4af01319bc2f38c018618d00f34de95617", "filename": "gcc/cccp.c", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fcccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fcccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcccp.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -942,7 +942,7 @@ static void record_control_macro PROTO((struct include_file *, U_CHAR *));\n \n static char *check_precompiled PROTO((int, struct stat *, char *, char **));\n static int check_preconditions PROTO((char *));\n-static void pcfinclude PROTO((U_CHAR *, U_CHAR *, U_CHAR *, FILE_BUF *));\n+static void pcfinclude PROTO((U_CHAR *, U_CHAR *, FILE_BUF *));\n static void pcstring_used PROTO((HASHNODE *));\n static void write_output PROTO((void));\n static void pass_thru_directive PROTO((U_CHAR *, U_CHAR *, FILE_BUF *, struct directive *));\n@@ -1024,7 +1024,7 @@ static void dump_arg_n PROTO((DEFINITION *, int, FILE *));\n static void initialize_char_syntax PROTO((void));\n static void initialize_builtins PROTO((FILE_BUF *, FILE_BUF *));\n \n-static void make_definition PROTO((char *, FILE_BUF *));\n+static void make_definition PROTO((char *));\n static void make_undef PROTO((char *, FILE_BUF *));\n \n static void make_assertion PROTO((char *, char *));\n@@ -1828,7 +1828,7 @@ main (argc, argv)\n \t    sprintf (versbuf, \"__VMS_VER=%08ld\", vms_version_value);\n \t    if (debug_output)\n \t      output_line_directive (fp, &outbuf, 0, same_file);\n-\t    make_definition (versbuf, &outbuf);\n+\t    make_definition (versbuf);\n \t  }\n       }\n #endif\n@@ -1847,7 +1847,7 @@ main (argc, argv)\n \t  *p++= 0;\n \tif (debug_output)\n \t  output_line_directive (fp, &outbuf, 0, same_file);\n-\tmake_definition (q, &outbuf);\n+\tmake_definition (q);\n \twhile (*p == ' ' || *p == '\\t')\n \t  p++;\n       } else if (p[0] == '-' && p[1] == 'A') {\n@@ -1912,7 +1912,7 @@ main (argc, argv)\n     if (pend_defs[i]) {\n       if (debug_output)\n         output_line_directive (fp, &outbuf, 0, same_file);\n-      make_definition (pend_defs[i], &outbuf);\n+      make_definition (pend_defs[i]);\n     }\n     if (pend_assertions[i])\n       make_assertion (pend_assertion_options[i], pend_assertions[i]);\n@@ -4806,8 +4806,7 @@ do_include (buf, limit, op, keyword)\n     if (pcfbuf) {\n       pcfname = xmalloc (strlen (pcftry) + 1);\n       strcpy (pcfname, pcftry);\n-      pcfinclude ((U_CHAR *) pcfbuf, (U_CHAR *) pcfbuflimit,\n-\t\t  (U_CHAR *) fname, op);\n+      pcfinclude ((U_CHAR *) pcfbuf, (U_CHAR *) fname, op);\n     }\n     else\n       finclude (f, inc, op, is_system_include (fname), searchptr);\n@@ -5514,8 +5513,8 @@ check_preconditions (prec)\n    in.  OP is the main output buffer.  */\n \n static void\n-pcfinclude (buf, limit, name, op)\n-     U_CHAR *buf, *limit, *name;\n+pcfinclude (buf, name, op)\n+     U_CHAR *buf, *name;\n      FILE_BUF *op;\n {\n   FILE_BUF tmpbuf;\n@@ -5802,7 +5801,7 @@ create_definition (buf, limit, op)\n       while (is_idchar[*bp]) {\n \tbp++;\n \t/* do we have a \"special\" rest-args extension here? */\n-\tif (limit - bp > REST_EXTENSION_LENGTH\n+\tif (limit - bp > (long) REST_EXTENSION_LENGTH\n \t    && bcmp (rest_extension, bp, REST_EXTENSION_LENGTH) == 0) {\n \t  if (pedantic && !instack[indepth].system_header_p)\n \t    pedwarn (\"ANSI C does not allow macro with variable arguments\");\n@@ -10185,9 +10184,8 @@ initialize_builtins (inp, outp)\n  */\n \n static void\n-make_definition (str, op)\n+make_definition (str)\n      char *str;\n-     FILE_BUF *op;\n {\n   FILE_BUF *ip;\n   struct directive *kt;"}, {"sha": "ddbc3bd628c09d8e428d91570dd3e901fac922b7", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -2470,7 +2470,7 @@ typedef struct mips_args {\n \n #define FUNCTION_ARG_BOUNDARY(MODE, TYPE)\t\t\t\t\\\n   (((TYPE) != 0)\t\t\t\t\t\t\t\\\n-\t? ((TYPE_ALIGN(TYPE) <= PARM_BOUNDARY)\t\t\t\t\\\n+\t? ((TYPE_ALIGN(TYPE) <= (unsigned)PARM_BOUNDARY)\t\t\\\n \t\t? PARM_BOUNDARY\t\t\t\t\t\t\\\n \t\t: TYPE_ALIGN(TYPE))\t\t\t\t\t\\\n \t: ((GET_MODE_ALIGNMENT(MODE) <= PARM_BOUNDARY)\t\t\t\\"}, {"sha": "c1b22daf746816c24cdd44e659fe05d4d6954e69", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 32, "deletions": 29, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -1252,7 +1252,7 @@ dwarf2out_frame_debug (insn)\n \t{\n \t  /* Setting FP from SP.  */\n \tcase REG:\n-\t  if (cfa_reg != REGNO (src))\n+\t  if (cfa_reg != (unsigned) REGNO (src))\n \t    abort ();\n \t  if (REGNO (dest) != STACK_POINTER_REGNUM\n \t      && !(frame_pointer_needed\n@@ -1272,7 +1272,7 @@ dwarf2out_frame_debug (insn)\n \t\t  offset = INTVAL (XEXP (src, 1));\n \t\t  break;\n \t\tcase REG:\n-\t\t  if (REGNO (XEXP (src, 1)) != cfa_temp_reg)\n+\t\t  if ((unsigned) REGNO (XEXP (src, 1)) != cfa_temp_reg)\n \t\t    abort ();\n \t\t  offset = cfa_temp_value;\n \t\t  break;\n@@ -1283,7 +1283,7 @@ dwarf2out_frame_debug (insn)\n \t      if (XEXP (src, 0) == hard_frame_pointer_rtx)\n \t\t{\n \t\t  /* Restoring SP from FP in the epilogue.  */\n-\t\t  if (cfa_reg != HARD_FRAME_POINTER_REGNUM)\n+\t\t  if (cfa_reg != (unsigned) HARD_FRAME_POINTER_REGNUM)\n \t\t    abort ();\n \t\t  cfa_reg = STACK_POINTER_REGNUM;\n \t\t}\n@@ -1319,7 +1319,7 @@ dwarf2out_frame_debug (insn)\n               else if (XEXP (src, 0) == hard_frame_pointer_rtx\n                        && GET_CODE (XEXP (src, 1)) == CONST_INT)\n                 {\n-\t\t  if (cfa_reg != HARD_FRAME_POINTER_REGNUM)\n+\t\t  if (cfa_reg != (unsigned) HARD_FRAME_POINTER_REGNUM)\n \t\t    abort ();\n                   offset = INTVAL (XEXP (src, 1));\n                   if (GET_CODE (src) == PLUS)\n@@ -1336,7 +1336,7 @@ dwarf2out_frame_debug (insn)\n \t\t  || XEXP (src, 1) != stack_pointer_rtx)\n \t\tabort ();\n \t      if (GET_CODE (XEXP (src, 0)) != REG\n-\t\t  || REGNO (XEXP (src, 0)) != cfa_temp_reg)\n+\t\t  || (unsigned) REGNO (XEXP (src, 0)) != cfa_temp_reg)\n \t\tabort ();\n \t      if (cfa_reg != STACK_POINTER_REGNUM)\n \t\tabort ();\n@@ -1352,8 +1352,8 @@ dwarf2out_frame_debug (insn)\n \n \tcase IOR:\n \t  if (GET_CODE (XEXP (src, 0)) != REG\n-\t      || REGNO (XEXP (src, 0)) != cfa_temp_reg\n-\t      || REGNO (dest) != cfa_temp_reg\n+\t      || (unsigned) REGNO (XEXP (src, 0)) != cfa_temp_reg\n+\t      || (unsigned) REGNO (dest) != cfa_temp_reg\n \t      || GET_CODE (XEXP (src, 1)) != CONST_INT)\n \t    abort ();\n \t  cfa_temp_value |= INTVAL (XEXP (src, 1));\n@@ -1396,14 +1396,14 @@ dwarf2out_frame_debug (insn)\n \t  if (GET_CODE (src) == MINUS)\n \t    offset = -offset;\n \n-\t  if (cfa_store_reg != REGNO (XEXP (XEXP (dest, 0), 0)))\n+\t  if (cfa_store_reg != (unsigned) REGNO (XEXP (XEXP (dest, 0), 0)))\n \t    abort ();\n \t  offset -= cfa_store_offset;\n \t  break;\n \n \t  /* Without an offset.  */\n \tcase REG:\n-\t  if (cfa_store_reg != REGNO (XEXP (dest, 0)))\n+\t  if (cfa_store_reg != (unsigned) REGNO (XEXP (dest, 0)))\n \t    abort();\n \t  offset = -cfa_store_offset;\n \t  break;\n@@ -5199,7 +5199,6 @@ output_die (die)\n   register unsigned long ref_offset;\n   register unsigned long size;\n   register dw_loc_descr_ref loc;\n-  register int i;\n \n   output_uleb128 (die->die_abbrev);\n   if (flag_debug_asm)\n@@ -5302,24 +5301,27 @@ output_die (die)\n \t  break;\n \n \tcase dw_val_class_float:\n-\t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file,\n-\t\t\t\t  a->dw_attr_val.v.val_float.length * 4);\n-\t  if (flag_debug_asm)\n-\t    fprintf (asm_out_file, \"\\t%s %s\",\n-\t\t     ASM_COMMENT_START, dwarf_attr_name (a->dw_attr));\n-\n-\t  fputc ('\\n', asm_out_file);\n-\t  for (i = 0; i < a->dw_attr_val.v.val_float.length; ++i)\n-\t    {\n-\t      ASM_OUTPUT_DWARF_DATA4 (asm_out_file,\n-\t\t\t\t      a->dw_attr_val.v.val_float.array[i]);\n-\t      if (flag_debug_asm)\n-\t\tfprintf (asm_out_file, \"\\t%s fp constant word %d\",\n-\t\t\t ASM_COMMENT_START, i);\n+\t  {\n+\t    register unsigned int i;\n+\t    ASM_OUTPUT_DWARF_DATA1 (asm_out_file,\n+\t\t\t\t    a->dw_attr_val.v.val_float.length * 4);\n+\t    if (flag_debug_asm)\n+\t      fprintf (asm_out_file, \"\\t%s %s\",\n+\t\t       ASM_COMMENT_START, dwarf_attr_name (a->dw_attr));\n+\n+\t    fputc ('\\n', asm_out_file);\n+\t    for (i = 0; i < a->dw_attr_val.v.val_float.length; ++i)\n+\t      {\n+\t\tASM_OUTPUT_DWARF_DATA4 (asm_out_file,\n+\t\t\t\t\ta->dw_attr_val.v.val_float.array[i]);\n+\t\tif (flag_debug_asm)\n+\t\t  fprintf (asm_out_file, \"\\t%s fp constant word %u\",\n+\t\t\t   ASM_COMMENT_START, i);\n \n-\t      fputc ('\\n', asm_out_file);\n-\t    }\n+\t\tfputc ('\\n', asm_out_file);\n+\t      }\n \t  break;\n+\t  }\n \n \tcase dw_val_class_flag:\n \t  ASM_OUTPUT_DWARF_DATA1 (asm_out_file, a->dw_attr_val.v.val_flag);\n@@ -5362,7 +5364,7 @@ output_die (die)\n \t  else\n \t    ASM_OUTPUT_ASCII (asm_out_file,\n \t\t\t      a->dw_attr_val.v.val_str,\n-\t\t\t      strlen (a->dw_attr_val.v.val_str) + 1);\n+\t\t\t      (int) strlen (a->dw_attr_val.v.val_str) + 1);\n \t  break;\n \n \tdefault:\n@@ -5514,7 +5516,8 @@ output_pubnames ()\n \t}\n       else\n \t{\n-\t  ASM_OUTPUT_ASCII (asm_out_file, pub->name, strlen (pub->name) + 1);\n+\t  ASM_OUTPUT_ASCII (asm_out_file, pub->name,\n+\t\t\t    (int) strlen (pub->name) + 1);\n \t}\n \n       fputc ('\\n', asm_out_file);\n@@ -5751,7 +5754,7 @@ output_line_info ()\n \t{\n \t  ASM_OUTPUT_ASCII (asm_out_file,\n \t\t\t    file_table[ft_index],\n-\t\t\t    strlen (file_table[ft_index]) + 1);\n+\t\t\t    (int) strlen (file_table[ft_index]) + 1);\n \t}\n \n       fputc ('\\n', asm_out_file);"}, {"sha": "e1209b7a6f7fc58f99d491a00360c015dbe4cc5b", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -91,19 +91,27 @@ static int no_line_numbers;\n    All of these except perhaps the floating-point CONST_DOUBLEs\n    are unique; no other rtx-object will be equal to any of these.  */\n \n+/* Avoid warnings by initializing the `fld' field.  Since its a union,\n+   bypass problems with KNR compilers by only doing so when __GNUC__. */\n+#ifdef __GNUC__\n+#define FLDI , {{0}}\n+#else\n+#define FLDI\n+#endif\n+\n struct _global_rtl global_rtl =\n {\n-  {PC, VOIDmode},\t\t\t/* pc_rtx */\n-  {CC0, VOIDmode},\t\t\t/* cc0_rtx */\n-  {REG},\t\t\t\t/* stack_pointer_rtx */\n-  {REG},\t\t\t\t/* frame_pointer_rtx */\n-  {REG},\t\t\t\t/* hard_frame_pointer_rtx */\n-  {REG},\t\t\t\t/* arg_pointer_rtx */\n-  {REG},\t\t\t\t/* virtual_incoming_args_rtx */\n-  {REG},\t\t\t\t/* virtual_stack_vars_rtx */\n-  {REG},\t\t\t\t/* virtual_stack_dynamic_rtx */\n-  {REG},\t\t\t\t/* virtual_outgoing_args_rtx */\n-  {REG},\t\t\t\t/* virtual_cfa_rtx */\n+  {PC, VOIDmode, 0, 0, 0, 0, 0, 0, 0, 0 FLDI },  /* pc_rtx */\n+  {CC0, VOIDmode, 0, 0, 0, 0, 0, 0, 0, 0 FLDI }, /* cc0_rtx */\n+  {REG, VOIDmode, 0, 0, 0, 0, 0, 0, 0, 0 FLDI }, /* stack_pointer_rtx */\n+  {REG, VOIDmode, 0, 0, 0, 0, 0, 0, 0, 0 FLDI }, /* frame_pointer_rtx */\n+  {REG, VOIDmode, 0, 0, 0, 0, 0, 0, 0, 0 FLDI }, /* hard_frame_pointer_rtx */\n+  {REG, VOIDmode, 0, 0, 0, 0, 0, 0, 0, 0 FLDI }, /* arg_pointer_rtx */\n+  {REG, VOIDmode, 0, 0, 0, 0, 0, 0, 0, 0 FLDI }, /* virtual_incoming_args_rtx */\n+  {REG, VOIDmode, 0, 0, 0, 0, 0, 0, 0, 0 FLDI }, /* virtual_stack_vars_rtx */\n+  {REG, VOIDmode, 0, 0, 0, 0, 0, 0, 0, 0 FLDI }, /* virtual_stack_dynamic_rtx */\n+  {REG, VOIDmode, 0, 0, 0, 0, 0, 0, 0, 0 FLDI }, /* virtual_outgoing_args_rtx */\n+  {REG, VOIDmode, 0, 0, 0, 0, 0, 0, 0, 0 FLDI }, /* virtual_cfa_rtx */\n };\n \n /* We record floating-point CONST_DOUBLEs in each floating-point mode for"}, {"sha": "95fb5612ffb85237bb8aec12707096526c497e5e", "filename": "gcc/explow.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fexplow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fexplow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexplow.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -736,7 +736,7 @@ promote_mode (type, mode, punsignedp, for_call)\n      tree type;\n      enum machine_mode mode;\n      int *punsignedp;\n-     int for_call;\n+     int for_call ATTRIBUTE_UNUSED;\n {\n   enum tree_code code = TREE_CODE (type);\n   int unsignedp = *punsignedp;"}, {"sha": "bb2224569d28e0f04230b9b249653af96f023195", "filename": "gcc/expmed.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fexpmed.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fexpmed.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpmed.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -1854,7 +1854,8 @@ expand_shift (code, mode, shifted, amount, target, unsignedp)\n   if (SHIFT_COUNT_TRUNCATED)\n     {\n       if (GET_CODE (op1) == CONST_INT\n-          && (unsigned HOST_WIDE_INT) INTVAL (op1) >= GET_MODE_BITSIZE (mode))\n+          && ((unsigned HOST_WIDE_INT) INTVAL (op1) >=\n+\t      (unsigned HOST_WIDE_INT) GET_MODE_BITSIZE (mode)))\n         op1 = GEN_INT ((unsigned HOST_WIDE_INT) INTVAL (op1)\n \t\t       % GET_MODE_BITSIZE (mode));\n       else if (GET_CODE (op1) == SUBREG\n@@ -2029,7 +2030,7 @@ synth_mult (alg_out, t, cost_limit)\n {\n   int m;\n   struct algorithm *alg_in, *best_alg;\n-  unsigned int cost;\n+  int cost;\n   unsigned HOST_WIDE_INT q;\n \n   /* Indicate that no algorithm is yet found.  If no algorithm\n@@ -4292,7 +4293,7 @@ emit_store_flag (target, code, op0, op1, mode, unsignedp, normalizep)\n \n       else if (GET_MODE_BITSIZE (mode) <= HOST_BITS_PER_WIDE_INT\n \t       && ((STORE_FLAG_VALUE & GET_MODE_MASK (mode))\n-\t\t   == (HOST_WIDE_INT) 1 << (GET_MODE_BITSIZE (mode) - 1)))\n+\t\t   == (unsigned HOST_WIDE_INT) 1 << (GET_MODE_BITSIZE (mode) - 1)))\n \t;\n       else\n \treturn 0;"}, {"sha": "9a42b43c9699e531d67a7abaf1fae31658b39ef3", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -2101,7 +2101,7 @@ copy_blkmode_from_reg(tgtblk,srcreg,type)\n {\n       int bytes = int_size_in_bytes (type);\n       rtx src = NULL, dst = NULL;\n-      int bitsize = MIN (TYPE_ALIGN (type), BITS_PER_WORD);\n+      int bitsize = MIN (TYPE_ALIGN (type), (unsigned int) BITS_PER_WORD);\n       int bitpos, xbitpos, big_endian_correction = 0;\n       \n       if (tgtblk == 0)\n@@ -4709,7 +4709,7 @@ get_inner_reference (exp, pbitsize, pbitpos, poffset, pmode,\n   tree size_tree = 0;\n   enum machine_mode mode = VOIDmode;\n   tree offset = integer_zero_node;\n-  int alignment = BIGGEST_ALIGNMENT;\n+  unsigned int alignment = BIGGEST_ALIGNMENT;\n \n   if (TREE_CODE (exp) == COMPONENT_REF)\n     {\n@@ -6462,7 +6462,7 @@ expand_expr (exp, target, tmode, modifier)\n \t\t    /* If the field isn't aligned enough to fetch as a memref,\n \t\t       fetch it as a bit field.  */\n \t\t    || (SLOW_UNALIGNED_ACCESS\n-\t\t\t&& ((TYPE_ALIGN (TREE_TYPE (tem)) < GET_MODE_ALIGNMENT (mode))\n+\t\t\t&& ((TYPE_ALIGN (TREE_TYPE (tem)) < (unsigned int) GET_MODE_ALIGNMENT (mode))\n \t\t\t    || (bitpos % GET_MODE_ALIGNMENT (mode) != 0))))))\n \t  {\n \t    enum machine_mode ext_mode = mode;\n@@ -8422,7 +8422,7 @@ expand_builtin_setjmp (buf_addr, target, first_label, next_label)\n   if (fixed_regs[ARG_POINTER_REGNUM])\n     {\n #ifdef ELIMINABLE_REGS\n-      int i;\n+      size_t i;\n       static struct elims {int from, to;} elim_regs[] = ELIMINABLE_REGS;\n \n       for (i = 0; i < sizeof elim_regs / sizeof elim_regs[0]; i++)"}, {"sha": "c05c331daca593ed9eece907472b8fed0ecce12f", "filename": "gcc/fold-const.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -529,7 +529,7 @@ div_and_round_double (code, uns,\n   encode (den, lden, hden);\n \n   /* Special code for when the divisor < BASE.  */\n-  if (hden == 0 && lden < BASE)\n+  if (hden == 0 && lden < (HOST_WIDE_INT) BASE)\n     {\n       /* hnum != 0 already checked.  */\n       for (i = 4 - 1; i >= 0; i--)"}, {"sha": "fdbe3ec7889190e71c896c877266a3ba5436cb76", "filename": "gcc/gencheck.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fgencheck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fgencheck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgencheck.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -20,6 +20,7 @@ Boston, MA 02111-1307, USA.  */\n \n #include \"hconfig.h\"\n #include \"system.h\"\n+#include \"gansidecl.h\"\n \n #define DEFTREECODE(SYM, NAME, TYPE, LEN)   STRINGIFY(SYM),\n \n@@ -36,7 +37,7 @@ void usage ()\n \n int main (argc, argv)\n      int argc;\n-     char *argv[];\n+     char *argv[] ATTRIBUTE_UNUSED;\n {\n   int i;\n "}, {"sha": "f4095c82bde7e47de50f5d01f855ce3560c7c2b5", "filename": "gcc/optabs.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -4451,8 +4451,8 @@ init_traps ()\n \n rtx\n gen_cond_trap (code, op1, op2, tcode)\n-     enum rtx_code code;\n-     rtx op1, op2, tcode;\n+  enum rtx_code code ATTRIBUTE_UNUSED;\n+  rtx op1, op2 ATTRIBUTE_UNUSED, tcode ATTRIBUTE_UNUSED;\n {\n   enum machine_mode mode = GET_MODE (op1);\n "}, {"sha": "7e059131b3f4cbd68adb1c8c5bb0d9a67e6ff21d", "filename": "gcc/real.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Freal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Freal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freal.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -2333,7 +2333,7 @@ edivm (den, num)\n       tnum = (((unsigned EMULONG) num[M]) << 16) + num[M+1];\n \n       /* Do not execute the divide instruction if it will overflow.  */\n-      if ((tdenm * 0xffffL) < tnum)\n+      if ((tdenm * (unsigned long)0xffff) < tnum)\n \ttquot = 0xffff;\n       else\n \ttquot = tnum / tdenm;"}, {"sha": "f821d77da0f248d636f5601068abd7f1e4c2dc10", "filename": "gcc/stmt.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -2630,7 +2630,8 @@ expand_return (retval)\n       int big_endian_correction = 0;\n       int bytes = int_size_in_bytes (TREE_TYPE (retval_rhs));\n       int n_regs = (bytes + UNITS_PER_WORD - 1) / UNITS_PER_WORD;\n-      int bitsize = MIN (TYPE_ALIGN (TREE_TYPE (retval_rhs)),BITS_PER_WORD);\n+      int bitsize = MIN (TYPE_ALIGN (TREE_TYPE (retval_rhs)),\n+\t\t\t (unsigned int)BITS_PER_WORD);\n       rtx *result_pseudos = (rtx *) alloca (sizeof (rtx) * n_regs);\n       rtx result_reg, src = NULL_RTX, dst = NULL_RTX;\n       rtx result_val = expand_expr (retval_rhs, NULL_RTX, VOIDmode, 0);\n@@ -4899,7 +4900,7 @@ expand_end_case (orig_index)\n #endif /* CASE_VALUES_THRESHOLD */\n \n       else if (TREE_INT_CST_HIGH (range) != 0\n-\t       || count < CASE_VALUES_THRESHOLD\n+\t       || count < (unsigned int) CASE_VALUES_THRESHOLD\n \t       || ((unsigned HOST_WIDE_INT) (TREE_INT_CST_LOW (range))\n \t\t   > 10 * count)\n #ifndef ASM_OUTPUT_ADDR_DIFF_ELT"}, {"sha": "a9474476de8f27df54285f4989a1b88b42289dc4", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -144,13 +144,13 @@ mode_for_size (size, class, limit)\n {\n   register enum machine_mode mode;\n \n-  if (limit && size > MAX_FIXED_MODE_SIZE)\n+  if (limit && size > (unsigned int)(MAX_FIXED_MODE_SIZE))\n     return BLKmode;\n \n   /* Get the first mode which has this size, in the specified class.  */\n   for (mode = GET_CLASS_NARROWEST_MODE (class); mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n-    if (GET_MODE_BITSIZE (mode) == size)\n+    if ((unsigned int)GET_MODE_BITSIZE (mode) == size)\n       return mode;\n \n   return BLKmode;\n@@ -170,7 +170,7 @@ smallest_mode_for_size (size, class)\n      specified class.  */\n   for (mode = GET_CLASS_NARROWEST_MODE (class); mode != VOIDmode;\n        mode = GET_MODE_WIDER_MODE (mode))\n-    if (GET_MODE_BITSIZE (mode) >= size)\n+    if ((unsigned int)GET_MODE_BITSIZE (mode) >= size)\n       return mode;\n \n   abort ();\n@@ -1382,7 +1382,7 @@ get_best_mode (bitsize, bitpos, align, largest_mode, volatilep)\n \n void\n save_storage_status (p)\n-     struct function *p;\n+     struct function *p ATTRIBUTE_UNUSED;\n {\n #if 0  /* Need not save, since always 0 and non0 (resp.) within a function.  */\n   p->pending_sizes = pending_sizes;\n@@ -1395,7 +1395,7 @@ save_storage_status (p)\n \n void\n restore_storage_status (p)\n-     struct function *p;\n+     struct function *p ATTRIBUTE_UNUSED;\n {\n #if 0\n   pending_sizes = p->pending_sizes;"}, {"sha": "8e777b18ccced3c88522fabc5ee9ea3f888b5d9a", "filename": "gcc/toplev.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -762,7 +762,7 @@ debug_args[] =\n #ifdef SDB_DEBUGGING_INFO\n   { \"gcoff\", SDB_DEBUG, 0, \"Generate COFF format debug output\" },\n #endif\n-  { 0, 0, 0 }\n+  { 0, 0, 0, 0 }\n };\n \n typedef struct\n@@ -896,8 +896,9 @@ lang_independent_options f_options[] =\n   {\"gnu-linker\", &flag_gnu_linker, 1,\n    \"Output GNU ld formatted global initialisers\"},\n   {\"regmove\", &flag_regmove, 1,\n-   \"Enables a regoster move optimisation\"},\n-  {\"optimize-register-move\", &flag_regmove, 1},\n+   \"Enables a register move optimisation\"},\n+  {\"optimize-register-move\", &flag_regmove, 1,\n+   \"Do the full regmove optimization pass\"},\n   {\"pack-struct\", &flag_pack_struct, 1,\n    \"Pack structure members together without holes\" },\n   {\"stack-check\", &flag_stack_check, 1,\n@@ -914,7 +915,8 @@ lang_independent_options f_options[] =\n    \"Generate code to check every memory access\" },\n   {\"prefix-function-name\", &flag_prefix_function_name, 1,\n    \"Add a prefix to all function names\" },\n-  {\"dump-unnumbered\", &flag_dump_unnumbered, 1},\n+  {\"dump-unnumbered\", &flag_dump_unnumbered, 1,\n+   \"Suppress output of instruction numbers and line number notes in debugging dumps\"},\n   {\"instrument-functions\", &flag_instrument_function_entry_exit, 1,\n    \"Instrument function entry/exit with profiling calls\"},\n };\n@@ -981,9 +983,9 @@ documented_lang_options[] =\n   { \"-Wchar-subscripts\", \"Warn about subscripts whose type is 'char'\"},\n   { \"-Wno-char-subscripts\", \"\" },\n   { \"-Wcomment\", \"Warn if nested comments are detected\" },\n-  { \"-Wno-comment\", },\n-  { \"-Wcomments\", },\n-  { \"-Wno-comments\", },\n+  { \"-Wno-comment\", \"\" },\n+  { \"-Wcomments\", \"Warn if nested comments are detected\" },\n+  { \"-Wno-comments\", \"\" },\n   { \"-Wconversion\", \"Warn about possibly confusing type conversions\" },\n   { \"-Wno-conversion\", \"\" },\n   { \"-Wformat\", \"Warn about printf format anomalies\" },\n@@ -5087,7 +5089,7 @@ debug_start_source_file (filename)\n \n void\n debug_end_source_file (lineno)\n-     register unsigned lineno;\n+     register unsigned lineno ATTRIBUTE_UNUSED;\n {\n #ifdef DBX_DEBUGGING_INFO\n   if (write_symbols == DBX_DEBUG)"}, {"sha": "35b83a45c74159cccdb5a0f8e348ac074f2b9291", "filename": "gcc/tree.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -3332,9 +3332,10 @@ build_type_attribute_variant (ttype, attribute)\n \n int\n valid_machine_attribute (attr_name, attr_args, decl, type)\n-     tree attr_name, attr_args;\n-     tree decl;\n-     tree type;\n+  tree attr_name;\n+  tree attr_args ATTRIBUTE_UNUSED;\n+  tree decl ATTRIBUTE_UNUSED;\n+  tree type ATTRIBUTE_UNUSED;\n {\n   int valid = 0;\n #ifdef VALID_MACHINE_DECL_ATTRIBUTE"}, {"sha": "e47a0cda419b32bf3a2a8a24f9d489716712c963", "filename": "gcc/varasm.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c84e271261e37fe33fe8e8886e65f563211c7d39/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=c84e271261e37fe33fe8e8886e65f563211c7d39", "patch": "@@ -595,7 +595,7 @@ decode_reg_name (asmspec)\n \tstatic struct { char *name; int number; } table[]\n \t  = ADDITIONAL_REGISTER_NAMES;\n \n-\tfor (i = 0; i < sizeof (table) / sizeof (table[0]); i++)\n+\tfor (i = 0; i < (int)(sizeof (table) / sizeof (table[0])); i++)\n \t  if (! strcmp (asmspec, table[i].name))\n \t    return table[i].number;\n       }\n@@ -1134,7 +1134,7 @@ assemble_string (p, size)\n void\n assemble_variable (decl, top_level, at_end, dont_output_data)\n      tree decl;\n-     int top_level;\n+     int top_level ATTRIBUTE_UNUSED;\n      int at_end;\n      int dont_output_data;\n {\n@@ -1608,7 +1608,7 @@ assemble_external (decl)\n \n void\n assemble_external_libcall (fun)\n-     rtx fun;\n+     rtx fun ATTRIBUTE_UNUSED;\n {\n #ifdef ASM_OUTPUT_EXTERNAL_LIBCALL\n   /* Declare library function name external when first used, if nec.  */\n@@ -3572,8 +3572,8 @@ get_pool_size ()\n \n void\n output_constant_pool (fnname, fndecl)\n-     char *fnname;\n-     tree fndecl;\n+  char *fnname ATTRIBUTE_UNUSED;\n+  tree fndecl ATTRIBUTE_UNUSED;\n {\n   struct pool_constant *pool;\n   rtx x;"}]}