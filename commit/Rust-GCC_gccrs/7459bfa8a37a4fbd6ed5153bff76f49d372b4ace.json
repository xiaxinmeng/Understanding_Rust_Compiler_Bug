{"sha": "7459bfa8a37a4fbd6ed5153bff76f49d372b4ace", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzQ1OWJmYThhMzdhNGZiZDZlZDUxNTNiZmY3NmY0OWQzNzJiNGFjZQ==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-07-31T00:19:42Z"}, "committer": {"name": "Ian Lance Taylor", "email": "iant@golang.org", "date": "2021-08-02T22:27:08Z"}, "message": "compiler, runtime: allow slice to array pointer conversion\n\nPanic if the slice is too short.\n\nFor golang/go#395\n\nReviewed-on: https://go-review.googlesource.com/c/gofrontend/+/338630", "tree": {"sha": "e0c96ae718c359f5a026b93a2c3cf31eb4587fca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0c96ae718c359f5a026b93a2c3cf31eb4587fca"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/comments", "author": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ianlancetaylor", "id": 3194333, "node_id": "MDQ6VXNlcjMxOTQzMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3194333?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ianlancetaylor", "html_url": "https://github.com/ianlancetaylor", "followers_url": "https://api.github.com/users/ianlancetaylor/followers", "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}", "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}", "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions", "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs", "repos_url": "https://api.github.com/users/ianlancetaylor/repos", "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}", "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06d0437d4a5faca2b695918cbe1d54a61935c98b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/06d0437d4a5faca2b695918cbe1d54a61935c98b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/06d0437d4a5faca2b695918cbe1d54a61935c98b"}], "stats": {"total": 162, "additions": 159, "deletions": 3}, "files": [{"sha": "95b9340b42db467c96b90278ccc92e5b439e20d5", "filename": "gcc/go/gofrontend/MERGE", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/gcc%2Fgo%2Fgofrontend%2FMERGE", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/gcc%2Fgo%2Fgofrontend%2FMERGE", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2FMERGE?ref=7459bfa8a37a4fbd6ed5153bff76f49d372b4ace", "patch": "@@ -1,4 +1,4 @@\n-ad667e7c70cea9fa5730660d72ad891b5753eb62\n+0a4d612e6b211780b294717503fc739bbd1f509c\n \n The first line of this file holds the git revision number of the last\n merge done from the gofrontend repository."}, {"sha": "15c9eabc6bf69f8323f3b8dd659e766051ae3f1e", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=7459bfa8a37a4fbd6ed5153bff76f49d372b4ace", "patch": "@@ -3866,11 +3866,12 @@ Type_conversion_expression::do_traverse(Traverse* traverse)\n   return TRAVERSE_CONTINUE;\n }\n \n-// Convert to a constant at lowering time.\n+// Convert to a constant at lowering time.  Also lower conversions\n+// from slice to pointer-to-array, as they can panic.\n \n Expression*\n Type_conversion_expression::do_lower(Gogo*, Named_object*,\n-\t\t\t\t     Statement_inserter*, int)\n+\t\t\t\t     Statement_inserter* inserter, int)\n {\n   Type* type = this->type_;\n   Expression* val = this->expr_;\n@@ -3958,6 +3959,54 @@ Type_conversion_expression::do_lower(Gogo*, Named_object*,\n \t}\n     }\n \n+  if (type->points_to() != NULL\n+      && type->points_to()->array_type() != NULL\n+      && !type->points_to()->is_slice_type()\n+      && val->type()->is_slice_type())\n+    {\n+      Temporary_statement* val_temp = NULL;\n+      if (!val->is_multi_eval_safe())\n+\t{\n+\t  val_temp = Statement::make_temporary(val->type(), NULL, location);\n+\t  inserter->insert(val_temp);\n+\t  val = Expression::make_set_and_use_temporary(val_temp, val,\n+\t\t\t\t\t\t       location);\n+\t}\n+\n+      Type* int_type = Type::lookup_integer_type(\"int\");\n+      Temporary_statement* vallen_temp =\n+\tStatement::make_temporary(int_type, NULL, location);\n+      inserter->insert(vallen_temp);\n+\n+      Expression* arrlen = type->points_to()->array_type()->length();\n+      Expression* vallen =\n+\tExpression::make_slice_info(val, Expression::SLICE_INFO_LENGTH,\n+\t\t\t\t    location);\n+      vallen = Expression::make_set_and_use_temporary(vallen_temp, vallen,\n+\t\t\t\t\t\t      location);\n+      Expression* cond = Expression::make_binary(OPERATOR_GT, arrlen, vallen,\n+\t\t\t\t\t\t location);\n+\n+      vallen = Expression::make_temporary_reference(vallen_temp, location);\n+      Expression* panic = Runtime::make_call(Runtime::PANIC_SLICE_CONVERT,\n+\t\t\t\t\t     location, 2, arrlen, vallen);\n+\n+      Expression* nil = Expression::make_nil(location);\n+      Expression* check = Expression::make_conditional(cond, panic, nil,\n+\t\t\t\t\t\t       location);\n+\n+      if (val_temp == NULL)\n+\tval = val->copy();\n+      else\n+\tval = Expression::make_temporary_reference(val_temp, location);\n+      Expression* ptr =\n+\tExpression::make_slice_info(val, Expression::SLICE_INFO_VALUE_POINTER,\n+\t\t\t\t    location);\n+      ptr = Expression::make_unsafe_cast(type, ptr, location);\n+\n+      return Expression::make_compound(check, ptr, location);\n+    }\n+\n   return this;\n }\n "}, {"sha": "fad8cebc012d60ecb5c211a25adda66b971441ef", "filename": "gcc/go/gofrontend/runtime.def", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/gcc%2Fgo%2Fgofrontend%2Fruntime.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fruntime.def?ref=7459bfa8a37a4fbd6ed5153bff76f49d372b4ace", "patch": "@@ -582,6 +582,11 @@ DEF_GO_RUNTIME(PANIC_EXTEND_SLICE3_C, \"runtime.goPanicExtendSlice3C\",\n DEF_GO_RUNTIME(PANIC_EXTEND_SLICE3_C_U, \"runtime.goPanicExtendSlice3CU\",\n \t       P2(UINT64, INT), R0())\n \n+// Panic for conversion of slice to pointer-to-array if the slice is\n+// too short.\n+DEF_GO_RUNTIME(PANIC_SLICE_CONVERT, \"runtime.goPanicSliceConvert\",\n+\t       P2(INT, INT), R0())\n+\n // Remove helper macros.\n #undef ABFT6\n #undef ABFT2"}, {"sha": "7c7b2eb82715dd65017c4ba14c678caf924fb080", "filename": "gcc/go/gofrontend/types.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/gcc%2Fgo%2Fgofrontend%2Ftypes.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Ftypes.cc?ref=7459bfa8a37a4fbd6ed5153bff76f49d372b4ace", "patch": "@@ -842,6 +842,13 @@ Type::are_convertible(const Type* lhs, const Type* rhs, std::string* reason)\n \treturn true;\n     }\n \n+  // A slice may be converted to a pointer-to-array.\n+  if (rhs->is_slice_type()\n+      && lhs->points_to() != NULL\n+      && lhs->points_to()->array_type() != NULL\n+      && !lhs->points_to()->is_slice_type())\n+    return true;\n+\n   // An unsafe.Pointer type may be converted to any pointer type or to\n   // a type whose underlying type is uintptr, and vice-versa.\n   if (lhs->is_unsafe_pointer_type()"}, {"sha": "2bc9c96a527fa15a9625cec9df3eb444cadccbd5", "filename": "gcc/testsuite/go.test/test/convert4.go", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconvert4.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconvert4.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgo.test%2Ftest%2Fconvert4.go?ref=7459bfa8a37a4fbd6ed5153bff76f49d372b4ace", "patch": "@@ -0,0 +1,86 @@\n+// run\n+\n+// Copyright 2020 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+// Test conversion from slice to array pointer.\n+\n+package main\n+\n+func wantPanic(fn func(), s string) {\n+\tdefer func() {\n+\t\terr := recover()\n+\t\tif err == nil {\n+\t\t\tpanic(\"expected panic\")\n+\t\t}\n+\t\tif got := err.(error).Error(); got != s {\n+\t\t\tpanic(\"expected panic \" + s + \" got \" + got)\n+\t\t}\n+\t}()\n+\tfn()\n+}\n+\n+func main() {\n+\ts := make([]byte, 8, 10)\n+\tif p := (*[8]byte)(s); &p[0] != &s[0] {\n+\t\tpanic(\"*[8]byte conversion failed\")\n+\t}\n+\twantPanic(\n+\t\tfunc() {\n+\t\t\t_ = (*[9]byte)(s)\n+\t\t},\n+\t\t\"runtime error: cannot convert slice with length 8 to pointer to array with length 9\",\n+\t)\n+\n+\tvar n []byte\n+\tif p := (*[0]byte)(n); p != nil {\n+\t\tpanic(\"nil slice converted to *[0]byte should be nil\")\n+\t}\n+\n+\tz := make([]byte, 0)\n+\tif p := (*[0]byte)(z); p == nil {\n+\t\tpanic(\"empty slice converted to *[0]byte should be non-nil\")\n+\t}\n+\n+\t// Test with named types\n+\ttype Slice []int\n+\ttype Int4 [4]int\n+\ttype PInt4 *[4]int\n+\tii := make(Slice, 4)\n+\tif p := (*Int4)(ii); &p[0] != &ii[0] {\n+\t\tpanic(\"*Int4 conversion failed\")\n+\t}\n+\tif p := PInt4(ii); &p[0] != &ii[0] {\n+\t\tpanic(\"PInt4 conversion failed\")\n+\t}\n+}\n+\n+// test static variable conversion\n+\n+var (\n+\tss  = make([]string, 10)\n+\ts5  = (*[5]string)(ss)\n+\ts10 = (*[10]string)(ss)\n+\n+\tns  []string\n+\tns0 = (*[0]string)(ns)\n+\n+\tzs  = make([]string, 0)\n+\tzs0 = (*[0]string)(zs)\n+)\n+\n+func init() {\n+\tif &ss[0] != &s5[0] {\n+\t\tpanic(\"s5 conversion failed\")\n+\t}\n+\tif &ss[0] != &s10[0] {\n+\t\tpanic(\"s5 conversion failed\")\n+\t}\n+\tif ns0 != nil {\n+\t\tpanic(\"ns0 should be nil\")\n+\t}\n+\tif zs0 == nil {\n+\t\tpanic(\"zs0 should not be nil\")\n+\t}\n+}"}, {"sha": "a8c82bbf8e8a7d27243738d1c37cd2a3ba665811", "filename": "libgo/go/runtime/error.go", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/libgo%2Fgo%2Fruntime%2Ferror.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/libgo%2Fgo%2Fruntime%2Ferror.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Ferror.go?ref=7459bfa8a37a4fbd6ed5153bff76f49d372b4ace", "patch": "@@ -175,6 +175,7 @@ const (\n \tboundsSlice3B    // s[?:x:y], 0 <= x <= y failed (but boundsSlice3A didn't happen)\n \tboundsSlice3C    // s[x:y:?], 0 <= x <= y failed (but boundsSlice3A/B didn't happen)\n \n+\tboundsConvert // (*[x]T)(s), 0 <= x <= len(s) failed\n \t// Note: in the above, len(s) and cap(s) are stored in y\n )\n \n@@ -190,6 +191,7 @@ var boundsErrorFmts = [...]string{\n \tboundsSlice3Acap: \"slice bounds out of range [::%x] with capacity %y\",\n \tboundsSlice3B:    \"slice bounds out of range [:%x:%y]\",\n \tboundsSlice3C:    \"slice bounds out of range [%x:%y:]\",\n+\tboundsConvert:    \"cannot convert slice with length %y to pointer to array with length %x\",\n }\n \n // boundsNegErrorFmts are overriding formats if x is negative. In this case there's no need to report y."}, {"sha": "a4b9a83d7764cf31021808a0d1a73f62026da154", "filename": "libgo/go/runtime/panic.go", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/libgo%2Fgo%2Fruntime%2Fpanic.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7459bfa8a37a4fbd6ed5153bff76f49d372b4ace/libgo%2Fgo%2Fruntime%2Fpanic.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fruntime%2Fpanic.go?ref=7459bfa8a37a4fbd6ed5153bff76f49d372b4ace", "patch": "@@ -38,6 +38,7 @@ import (\n //go:linkname goPanicSlice3BU\n //go:linkname goPanicSlice3C\n //go:linkname goPanicSlice3CU\n+//go:linkname goPanicSliceConvert\n //go:linkname panicshift\n //go:linkname panicdivide\n //go:linkname panicmem\n@@ -175,6 +176,12 @@ func goPanicSlice3CU(x uint, y int) {\n \tpanic(boundsError{x: int64(x), signed: false, y: y, code: boundsSlice3C})\n }\n \n+// failures in the conversion (*[x]T)s, 0 <= x <= y, x == cap(s)\n+func goPanicSliceConvert(x int, y int) {\n+\tpanicCheck1(getcallerpc(), \"slice length too short to convert to pointer to array\")\n+\tpanic(boundsError{x: int64(x), signed: true, y: y, code: boundsConvert})\n+}\n+\n var shiftError = error(errorString(\"negative shift amount\"))\n \n func panicshift() {"}]}