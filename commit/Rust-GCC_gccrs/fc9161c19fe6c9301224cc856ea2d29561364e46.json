{"sha": "fc9161c19fe6c9301224cc856ea2d29561364e46", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmM5MTYxYzE5ZmU2YzkzMDEyMjRjYzg1NmVhMmQyOTU2MTM2NGU0Ng==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2008-03-08T20:52:50Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2008-03-08T20:52:50Z"}, "message": "coverage.h (tree_coverage_counter_addr): Declare.\n\n2008-03-08  Richard Guenther  <rguenther@suse.de>\n\n\t* coverage.h (tree_coverage_counter_addr): Declare.\n\t* coverage.c (tree_coverage_counter_addr): New function.\n\t* tree-profile.c (tree_gen_edge_profiler): Unshare counter\n\tbefore using again.\n\t(tree_gen_pow2_profiler): Use tree_coverage_counter_addr.\n\t(tree_gen_one_value_profiler): Likewise.\n\t(tree_gen_ic_profiler): Likewise.\n\t(tree_gen_average_profiler): Likewise.\n\t(tree_gen_ior_profiler): Likewise.\n\nFrom-SVN: r133041", "tree": {"sha": "a11f8cead0a4695e09503341eb0a32f9c0b9d922", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a11f8cead0a4695e09503341eb0a32f9c0b9d922"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fc9161c19fe6c9301224cc856ea2d29561364e46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9161c19fe6c9301224cc856ea2d29561364e46", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fc9161c19fe6c9301224cc856ea2d29561364e46", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fc9161c19fe6c9301224cc856ea2d29561364e46/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "892f6e652e935a3ea26713d709b7268dd38a5b2e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/892f6e652e935a3ea26713d709b7268dd38a5b2e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/892f6e652e935a3ea26713d709b7268dd38a5b2e"}], "stats": {"total": 58, "additions": 42, "deletions": 16}, "files": [{"sha": "d17a993d69a842b90dff3b8ee24e78cccc8e5826", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9161c19fe6c9301224cc856ea2d29561364e46/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9161c19fe6c9301224cc856ea2d29561364e46/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=fc9161c19fe6c9301224cc856ea2d29561364e46", "patch": "@@ -1,3 +1,15 @@\n+2008-03-08  Richard Guenther  <rguenther@suse.de>\n+\n+\t* coverage.h (tree_coverage_counter_addr): Declare.\n+\t* coverage.c (tree_coverage_counter_addr): New function.\n+\t* tree-profile.c (tree_gen_edge_profiler): Unshare counter\n+\tbefore using again.\n+\t(tree_gen_pow2_profiler): Use tree_coverage_counter_addr.\n+\t(tree_gen_one_value_profiler): Likewise.\n+\t(tree_gen_ic_profiler): Likewise.\n+\t(tree_gen_average_profiler): Likewise.\n+\t(tree_gen_ior_profiler): Likewise.\n+\n 2008-03-08  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-ssa-sccvn.h (vn_binary_op_lookup): Remove."}, {"sha": "f3a0152ab9b856b82a8c838a8c2705c600396d3a", "filename": "gcc/coverage.c", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9161c19fe6c9301224cc856ea2d29561364e46/gcc%2Fcoverage.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9161c19fe6c9301224cc856ea2d29561364e46/gcc%2Fcoverage.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.c?ref=fc9161c19fe6c9301224cc856ea2d29561364e46", "patch": "@@ -442,6 +442,23 @@ tree_coverage_counter_ref (unsigned counter, unsigned no)\n   return build4 (ARRAY_REF, gcov_type_node, tree_ctr_tables[counter],\n \t\t build_int_cst (NULL_TREE, no), NULL, NULL);\n }\n+\n+/* Generate a tree to access the address of COUNTER NO.  */\n+\n+tree\n+tree_coverage_counter_addr (unsigned counter, unsigned no)\n+{\n+  tree gcov_type_node = get_gcov_type ();\n+\n+  gcc_assert (no < fn_n_ctrs[counter] - fn_b_ctrs[counter]);\n+  no += prg_n_ctrs[counter] + fn_b_ctrs[counter];\n+\n+  /* \"no\" here is an array index, scaled to bytes later.  */\n+  return build_fold_addr_expr (build4 (ARRAY_REF, gcov_type_node,\n+\t\t\t\t       tree_ctr_tables[counter],\n+\t\t\t\t       build_int_cst (NULL_TREE, no),\n+\t\t\t\t       NULL, NULL));\n+}\n \f\n /* Generate a checksum for a string.  CHKSUM is the current\n    checksum.  */"}, {"sha": "bf9917d52809199bb8fcea394166e6e08f484b60", "filename": "gcc/coverage.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9161c19fe6c9301224cc856ea2d29561364e46/gcc%2Fcoverage.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9161c19fe6c9301224cc856ea2d29561364e46/gcc%2Fcoverage.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcoverage.h?ref=fc9161c19fe6c9301224cc856ea2d29561364e46", "patch": "@@ -38,6 +38,8 @@ extern int coverage_begin_output (void);\n extern int coverage_counter_alloc (unsigned /*counter*/, unsigned/*num*/);\n /* Use a counter from the most recent allocation.  */\n extern tree tree_coverage_counter_ref (unsigned /*counter*/, unsigned/*num*/);\n+/* Use a counter address from the most recent allocation.  */\n+extern tree tree_coverage_counter_addr (unsigned /*counter*/, unsigned/*num*/);\n \n /* Get all the counters for the current function.  */\n extern gcov_type *get_coverage_counts (unsigned /*counter*/,"}, {"sha": "57c9f5c0c5af36bdaf772c21d9dd7674e40b346d", "filename": "gcc/tree-profile.c", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fc9161c19fe6c9301224cc856ea2d29561364e46/gcc%2Ftree-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fc9161c19fe6c9301224cc856ea2d29561364e46/gcc%2Ftree-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-profile.c?ref=fc9161c19fe6c9301224cc856ea2d29561364e46", "patch": "@@ -181,7 +181,7 @@ tree_gen_edge_profiler (int edgeno, edge e)\n   stmt2 = build_gimple_modify_stmt (gcov_type_tmp_var,\n \t\t\t\t    build2 (PLUS_EXPR, gcov_type_node,\n \t\t\t\t\t    gcov_type_tmp_var, one));\n-  stmt3 = build_gimple_modify_stmt (ref, gcov_type_tmp_var);\n+  stmt3 = build_gimple_modify_stmt (unshare_expr (ref), gcov_type_tmp_var);\n   bsi_insert_on_edge (e, stmt1);\n   bsi_insert_on_edge (e, stmt2);\n   bsi_insert_on_edge (e, stmt3);\n@@ -231,11 +231,10 @@ tree_gen_pow2_profiler (histogram_value value, unsigned tag, unsigned base)\n {\n   tree stmt = value->hvalue.stmt;\n   block_stmt_iterator bsi = bsi_for_stmt (stmt);\n-  tree ref = tree_coverage_counter_ref (tag, base), ref_ptr;\n+  tree ref_ptr = tree_coverage_counter_addr (tag, base);\n   tree call, val;\n   \n-  ref_ptr = force_gimple_operand_bsi (&bsi,\n-\t\t\t\t      build_addr (ref, current_function_decl),\n+  ref_ptr = force_gimple_operand_bsi (&bsi, ref_ptr,\n \t\t\t\t      true, NULL_TREE, true, BSI_SAME_STMT);\n   val = prepare_instrumented_value (&bsi, value);\n   call = build_call_expr (tree_pow2_profiler_fn, 2, ref_ptr, val);\n@@ -251,11 +250,10 @@ tree_gen_one_value_profiler (histogram_value value, unsigned tag, unsigned base)\n {\n   tree stmt = value->hvalue.stmt;\n   block_stmt_iterator bsi = bsi_for_stmt (stmt);\n-  tree ref = tree_coverage_counter_ref (tag, base), ref_ptr;\n+  tree ref_ptr = tree_coverage_counter_addr (tag, base);\n   tree call, val;\n   \n-  ref_ptr = force_gimple_operand_bsi (&bsi,\n-\t\t\t\t      build_addr (ref, current_function_decl),\n+  ref_ptr = force_gimple_operand_bsi (&bsi, ref_ptr,\n \t\t\t\t      true, NULL_TREE, true, BSI_SAME_STMT);\n   val = prepare_instrumented_value (&bsi, value);\n   call = build_call_expr (tree_one_value_profiler_fn, 2, ref_ptr, val);\n@@ -275,10 +273,9 @@ tree_gen_ic_profiler (histogram_value value, unsigned tag, unsigned base)\n   tree tmp1, stmt1, stmt2, stmt3;\n   tree stmt = value->hvalue.stmt;\n   block_stmt_iterator bsi = bsi_for_stmt (stmt);\n-  tree ref = tree_coverage_counter_ref (tag, base), ref_ptr;\n+  tree ref_ptr = tree_coverage_counter_addr (tag, base);\n \n-  ref_ptr = force_gimple_operand_bsi (&bsi,\n-\t\t\t\t      build_addr (ref, current_function_decl),\n+  ref_ptr = force_gimple_operand_bsi (&bsi, ref_ptr,\n \t\t\t\t      true, NULL_TREE, true, BSI_SAME_STMT);\n \n   /* Insert code:\n@@ -367,11 +364,10 @@ tree_gen_average_profiler (histogram_value value, unsigned tag, unsigned base)\n {\n   tree stmt = value->hvalue.stmt;\n   block_stmt_iterator bsi = bsi_for_stmt (stmt);\n-  tree ref = tree_coverage_counter_ref (tag, base), ref_ptr;\n+  tree ref_ptr = tree_coverage_counter_addr (tag, base);\n   tree call, val;\n   \n-  ref_ptr = force_gimple_operand_bsi (&bsi,\n-\t\t\t\t      build_addr (ref, current_function_decl),\n+  ref_ptr = force_gimple_operand_bsi (&bsi, ref_ptr,\n \t\t\t\t      true, NULL_TREE,\n \t\t\t\t      true, BSI_SAME_STMT);\n   val = prepare_instrumented_value (&bsi, value);\n@@ -388,11 +384,10 @@ tree_gen_ior_profiler (histogram_value value, unsigned tag, unsigned base)\n {\n   tree stmt = value->hvalue.stmt;\n   block_stmt_iterator bsi = bsi_for_stmt (stmt);\n-  tree ref = tree_coverage_counter_ref (tag, base), ref_ptr;\n+  tree ref_ptr = tree_coverage_counter_addr (tag, base);\n   tree call, val;\n   \n-  ref_ptr = force_gimple_operand_bsi (&bsi,\n-\t\t\t\t      build_addr (ref, current_function_decl),\n+  ref_ptr = force_gimple_operand_bsi (&bsi, ref_ptr,\n \t\t\t\t      true, NULL_TREE, true, BSI_SAME_STMT);\n   val = prepare_instrumented_value (&bsi, value);\n   call = build_call_expr (tree_ior_profiler_fn, 2, ref_ptr, val);"}]}