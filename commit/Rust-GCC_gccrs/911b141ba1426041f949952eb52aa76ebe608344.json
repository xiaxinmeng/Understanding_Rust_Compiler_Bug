{"sha": "911b141ba1426041f949952eb52aa76ebe608344", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTExYjE0MWJhMTQyNjA0MWY5NDk5NTJlYjUyYWE3NmViZTYwODM0NA==", "commit": {"author": {"name": "Will Schmidt", "email": "will_schmidt@vnet.ibm.com", "date": "2018-02-14T15:32:02Z"}, "committer": {"name": "Will Schmidt", "email": "willschm@gcc.gnu.org", "date": "2018-02-14T15:32:02Z"}, "message": "re PR target/84220 (rs6000 builtin __builtin_vec_sld() ICEs on invalid 3rd argument)\n\n\n[gcc]\n\n2018-02-14  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\tPR target/84220\n\t* config/rs6000/rs6000-c.c: Update definitions for\n\tALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VEC_SLDW,\n\tALTIVEC_BUILTIN_VEC_XXPERMDI builtins.\n\n[testsuite]\n\n2018-02-14  Will Schmidt  <will_schmidt@vnet.ibm.com>\n\n\tPR target/84220\n\t* gcc.target/powerpc/pr84220-sld.c: New test.\n\t* gcc.target/powerpc/pr84220-sld2.c: New test.\n\t* gcc.target/powerpc/pr84220-sldw.c: New test.\n\t* gcc.target/powerpc/pr84220-xxperm.c: New test.\n\t* gcc.target/powerpc/pr84220-xxsld.c: New test.\n\nFrom-SVN: r257662", "tree": {"sha": "a672909200281bb3e835dcfb589ecfa841f00654", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a672909200281bb3e835dcfb589ecfa841f00654"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/911b141ba1426041f949952eb52aa76ebe608344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911b141ba1426041f949952eb52aa76ebe608344", "html_url": "https://github.com/Rust-GCC/gccrs/commit/911b141ba1426041f949952eb52aa76ebe608344", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/911b141ba1426041f949952eb52aa76ebe608344/comments", "author": {"login": "willschm", "id": 44359, "node_id": "MDQ6VXNlcjQ0MzU5", "avatar_url": "https://avatars.githubusercontent.com/u/44359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/willschm", "html_url": "https://github.com/willschm", "followers_url": "https://api.github.com/users/willschm/followers", "following_url": "https://api.github.com/users/willschm/following{/other_user}", "gists_url": "https://api.github.com/users/willschm/gists{/gist_id}", "starred_url": "https://api.github.com/users/willschm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/willschm/subscriptions", "organizations_url": "https://api.github.com/users/willschm/orgs", "repos_url": "https://api.github.com/users/willschm/repos", "events_url": "https://api.github.com/users/willschm/events{/privacy}", "received_events_url": "https://api.github.com/users/willschm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f8de876d8c7323cbf4c51cbe38e7ea2ac2b4e4e2"}], "stats": {"total": 573, "additions": 530, "deletions": 43}, "files": [{"sha": "62c78631f010e3a5b2d102de200fc40567e20fb2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911b141ba1426041f949952eb52aa76ebe608344/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911b141ba1426041f949952eb52aa76ebe608344/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=911b141ba1426041f949952eb52aa76ebe608344", "patch": "@@ -1,3 +1,10 @@\n+2018-02-14  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\tPR target/84220\n+\t* config/rs6000/rs6000-c.c: Update definitions for\n+\tALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VEC_SLDW,\n+\tVEC_XXSLDWI and ALTIVEC_BUILTIN_VEC_XXPERMDI builtins.\n+\n 2018-02-14  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n \n \tPR target/84239"}, {"sha": "843a3750b821ea5d7b943659d0e7b045b4182f93", "filename": "gcc/config/rs6000/rs6000-c.c", "status": "modified", "additions": 45, "deletions": 43, "changes": 88, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Fconfig%2Frs6000%2Frs6000-c.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-c.c?ref=911b141ba1426041f949952eb52aa76ebe608344", "patch": "@@ -3656,60 +3656,61 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n   { ALTIVEC_BUILTIN_VEC_SEL, ALTIVEC_BUILTIN_VSEL_16QI,\n     RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_unsigned_V16QI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_4SF,\n-    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_4SI,\n-    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_4SI,\n-    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_bool_V4SI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_4SI,\n-    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_8HI,\n-    RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_8HI,\n-    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_8HI,\n-    RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, RS6000_BTI_bool_V8HI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_8HI,\n-    RS6000_BTI_pixel_V8HI, RS6000_BTI_pixel_V8HI, RS6000_BTI_pixel_V8HI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_pixel_V8HI, RS6000_BTI_pixel_V8HI, RS6000_BTI_pixel_V8HI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_16QI,\n-    RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_16QI,\n-    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_16QI,\n-    RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_bool_V16QI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_2DF,\n-    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_2DI,\n-    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_bool_V2DI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_2DI,\n-    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLD, ALTIVEC_BUILTIN_VSLDOI_2DI,\n-    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI },\n \n   { ALTIVEC_BUILTIN_VEC_SLDW, VSX_BUILTIN_XXSLDWI_16QI,\n     RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI,\n-    RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLDW, VSX_BUILTIN_XXSLDWI_16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n-    RS6000_BTI_unsigned_V16QI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLDW, VSX_BUILTIN_XXSLDWI_8HI,\n     RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI,\n-    RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLDW, VSX_BUILTIN_XXSLDWI_8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n-    RS6000_BTI_unsigned_V8HI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_unsigned_V8HI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLDW, VSX_BUILTIN_XXSLDWI_4SI,\n     RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI,\n-    RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLDW, VSX_BUILTIN_XXSLDWI_4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n-    RS6000_BTI_unsigned_V4SI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_unsigned_V4SI, RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLDW, VSX_BUILTIN_XXSLDWI_2DI,\n     RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI,\n-    RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_INTSI },\n   { ALTIVEC_BUILTIN_VEC_SLDW, VSX_BUILTIN_XXSLDWI_2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n-    RS6000_BTI_unsigned_V2DI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_unsigned_V2DI, RS6000_BTI_INTSI },\n+\n   { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DF,\n     RS6000_BTI_void, RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF },\n   { ALTIVEC_BUILTIN_VEC_ST, ALTIVEC_BUILTIN_STVX_V2DI,\n@@ -4154,53 +4155,54 @@ const struct altivec_builtin_types altivec_overloaded_builtins[] = {\n     RS6000_BTI_void, RS6000_BTI_unsigned_V16QI, RS6000_BTI_INTSI,\n     ~RS6000_BTI_UINTQI },\n   { VSX_BUILTIN_VEC_XXSLDWI, VSX_BUILTIN_XXSLDWI_16QI,\n-    RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXSLDWI, VSX_BUILTIN_XXSLDWI_16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n-    RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXSLDWI, VSX_BUILTIN_XXSLDWI_8HI,\n-    RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXSLDWI, VSX_BUILTIN_XXSLDWI_8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n-    RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXSLDWI, VSX_BUILTIN_XXSLDWI_4SI,\n-    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXSLDWI, VSX_BUILTIN_XXSLDWI_4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n-    RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXSLDWI, VSX_BUILTIN_XXSLDWI_2DI,\n-    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXSLDWI, VSX_BUILTIN_XXSLDWI_2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n-    RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXSLDWI, VSX_BUILTIN_XXSLDWI_4SF,\n-    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXSLDWI, VSX_BUILTIN_XXSLDWI_2DF,\n-    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_INTSI },\n+\n   { VSX_BUILTIN_VEC_XXPERMDI, VSX_BUILTIN_XXPERMDI_2DF,\n-    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_V2DF, RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXPERMDI, VSX_BUILTIN_XXPERMDI_2DI,\n-    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_V2DI, RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXPERMDI, VSX_BUILTIN_XXPERMDI_2DI,\n     RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI, RS6000_BTI_unsigned_V2DI,\n-    RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXPERMDI, VSX_BUILTIN_XXPERMDI_4SF,\n-    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_V4SF, RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXPERMDI, VSX_BUILTIN_XXPERMDI_4SI,\n-    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_V4SI, RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXPERMDI, VSX_BUILTIN_XXPERMDI_4SI,\n     RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI, RS6000_BTI_unsigned_V4SI,\n-    RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXPERMDI, VSX_BUILTIN_XXPERMDI_8HI,\n-    RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_V8HI, RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXPERMDI, VSX_BUILTIN_XXPERMDI_8HI,\n     RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI, RS6000_BTI_unsigned_V8HI,\n-    RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXPERMDI, VSX_BUILTIN_XXPERMDI_16QI,\n-    RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_V16QI, RS6000_BTI_INTSI },\n   { VSX_BUILTIN_VEC_XXPERMDI, VSX_BUILTIN_XXPERMDI_16QI,\n     RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI, RS6000_BTI_unsigned_V16QI,\n-    RS6000_BTI_NOT_OPAQUE },\n+    RS6000_BTI_INTSI },\n \n   { VSX_BUILTIN_VEC_LD, VSX_BUILTIN_LXVD2X_V2DF,\n     RS6000_BTI_V2DF, RS6000_BTI_INTSI, ~RS6000_BTI_V2DF, 0 },"}, {"sha": "f54dde8cb12473816c1a6d74509be2bd8212c5e9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=911b141ba1426041f949952eb52aa76ebe608344", "patch": "@@ -1,3 +1,12 @@\n+2018-02-14  Will Schmidt  <will_schmidt@vnet.ibm.com>\n+\n+\tPR target/84220\n+\t* gcc.target/powerpc/pr84220-sld.c: New test.\n+\t* gcc.target/powerpc/pr84220-sld2.c: New test.\n+\t* gcc.target/powerpc/pr84220-sldw.c: New test.\n+\t* gcc.target/powerpc/pr84220-xxperm.c: New test.\n+\t* gcc.target/powerpc/pr84220-xxsld.c: New test.\n+\n 2018-02-14  Igor Tsimbalist  <igor.v.tsimbalist@intel.com>\n \n \tPR target/84239"}, {"sha": "2536fc30b988e7f94a29b90b8a30195fe6881a7e", "filename": "gcc/testsuite/gcc.target/powerpc/pr84220-sld.c", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-sld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-sld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-sld.c?ref=911b141ba1426041f949952eb52aa76ebe608344", "patch": "@@ -0,0 +1,97 @@\n+/* PR target/84220 */\n+/* Test to ensure we generate invalid parameter errors rather than an ICE\n+    when calling builtin_vec_sld() with invalid parameters.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec\" } */\n+\n+#include <altivec.h>\n+\n+typedef vector bool char vbc_t;\n+typedef vector signed char vsc_t;\n+typedef vector unsigned char vuc_t;\n+typedef vector bool int vbi_t;\n+typedef vector signed int vsi_t;\n+typedef vector unsigned int vui_t;\n+typedef vector pixel vp_t;\n+typedef vector bool short vbs_t;\n+typedef vector signed short vss_t;\n+typedef vector unsigned short vus_t;\n+typedef vector float vf_t;\n+\n+void \n+test_vbc ( vbc_t v1, vbc_t v2, vbc_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}\n+\n+void \n+test_vsc ( vsc_t v1, vsc_t v2, vsc_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}\n+\n+void \n+test_vuc ( vuc_t v1, vuc_t v2, vuc_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}\n+\n+void \n+test_vbi ( vbi_t v1, vbi_t v2, vbi_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}\n+\n+void \n+test_vsi ( vsi_t v1, vsi_t v2, vsi_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}\n+\n+void \n+test_vui ( vui_t v1, vui_t v2, vui_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}\n+\n+void \n+test_vp ( vp_t v1, vp_t v2, vp_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}\n+\n+void \n+test_vbs ( vbs_t v1, vbs_t v2, vbs_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}\n+\n+void \n+test_vss ( vss_t v1, vss_t v2, vss_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}\n+\n+void \n+test_vus ( vus_t v1, vus_t v2, vus_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}\n+\n+void \n+test_vf ( vf_t v1, vf_t v2, vf_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}"}, {"sha": "5e973e01aa4e42fc76a32b37584dbc234da8af88", "filename": "gcc/testsuite/gcc.target/powerpc/pr84220-sld2.c", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-sld2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-sld2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-sld2.c?ref=911b141ba1426041f949952eb52aa76ebe608344", "patch": "@@ -0,0 +1,41 @@\n+/* PR target/84220 */\n+/* Test to ensure we generate invalid parameter errors rather than an ICE\n+    when calling builtin_vec_sld() with invalid parameters.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-maltivec -mpower8-vector\" } */\n+\n+#include <altivec.h>\n+\n+typedef  vector  bool long long vbl_t;\n+typedef  vector  signed long long vsl_t;\n+typedef  vector  unsigned long long vul_t;\n+typedef  vector  double vd_t;\n+\n+void \n+test_vbl ( vbl_t v1, vbl_t v2, vbl_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}\n+\n+void \n+test_vsl ( vsl_t v1, vsl_t v2, vsl_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}\n+\n+void \n+test_vul ( vul_t v1, vul_t v2, vul_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}\n+\n+void \n+test_vd ( vd_t v1, vd_t v2, vd_t v3 )  \\\n+{\n+  __builtin_vec_sld(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  __builtin_vec_sld(v1, v2, 3);\n+}"}, {"sha": "a3b4be6686b82a070ed93305bded46c405bcaa1e", "filename": "gcc/testsuite/gcc.target/powerpc/pr84220-sldw.c", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-sldw.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-sldw.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-sldw.c?ref=911b141ba1426041f949952eb52aa76ebe608344", "patch": "@@ -0,0 +1,80 @@\n+/* PR target/84220 */\n+/* Test to ensure we generate invalid parameter errors rather than an ICE\n+    when calling builtin_vec_sldw() with invalid parameters.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mvsx\" } */\n+\n+#include <altivec.h>\n+\n+typedef  vector bool char vbc_t;\n+typedef  vector  signed char vsc_t;\n+typedef  vector  unsigned char vuc_t;\n+typedef  vector  bool int vbi_t;\n+typedef  vector  signed int vsi_t;\n+typedef  vector  unsigned int vui_t;\n+typedef  vector  pixel vp_t;\n+typedef  vector  bool short vbs_t;\n+typedef  vector  signed short vss_t;\n+typedef  vector  unsigned short vus_t;\n+typedef  vector  float vf_t;\n+typedef  vector  bool long long vbl_t;\n+typedef  vector  signed long long vsl_t;\n+typedef  vector  unsigned long long vul_t;\n+typedef  vector  double vd_t;\n+\n+void \n+test_vsc ( vsc_t v1, vsc_t v2, vsc_t v3 )  \\\n+{\n+  vec_sldw(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  vec_sldw(v1, v2, 3);\n+}\n+\n+void \n+test_vuc ( vuc_t v1, vuc_t v2, vuc_t v3 )  \\\n+{\n+  vec_sldw(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  vec_sldw(v1, v2, 3);\n+}\n+\n+void \n+test_vsi ( vsi_t v1, vsi_t v2, vsi_t v3 )  \\\n+{\n+  vec_sldw(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  vec_sldw(v1, v2, 3);\n+}\n+\n+void \n+test_vui ( vui_t v1, vui_t v2, vui_t v3 )  \\\n+{\n+  vec_sldw(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  vec_sldw(v1, v2, 3);\n+}\n+\n+void \n+test_vsl ( vsl_t v1, vsl_t v2, vsl_t v3 )  \\\n+{\n+  vec_sldw(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  vec_sldw(v1, v2, 3);\n+}\n+\n+void \n+test_vul ( vul_t v1, vul_t v2, vul_t v3 )  \\\n+{\n+  vec_sldw(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  vec_sldw(v1, v2, 3);\n+}\n+\n+void \n+test_vss ( vss_t v1, vss_t v2, vss_t v3 )  \\\n+{\n+  vec_sldw(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  vec_sldw(v1, v2, 3);\n+}\n+\n+void \n+test_vus ( vus_t v1, vus_t v2, vus_t v3 )  \\\n+{\n+  vec_sldw(v1, v2, v3); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  vec_sldw(v1, v2, 3);\n+}"}, {"sha": "8a802eb337e761a0760a5f02f5222132989ad0cf", "filename": "gcc/testsuite/gcc.target/powerpc/pr84220-xxperm.c", "status": "added", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-xxperm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-xxperm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-xxperm.c?ref=911b141ba1426041f949952eb52aa76ebe608344", "patch": "@@ -0,0 +1,100 @@\n+/* PR target/84220 */\n+/* Test to ensure we generate invalid parameter errors rather than an ICE\n+    when calling vec_xxpermdi() with invalid parameters.  */\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-O2 -mvsx\" } */\n+\n+#include <altivec.h>\n+void abort (void);\n+\n+vector double vdx = { 0.0, 1.0 };\n+vector double vdy = { 2.0, 3.0 };\n+vector double vdz;\n+\n+vector signed long long vsllx = { 0, 1 };\n+vector signed long long vslly = { 2, 3 };\n+vector signed long long vsllz;\n+\n+vector unsigned long long vullx = { 0, 1 };\n+vector unsigned long long vully = { 2, 3 };\n+vector unsigned long long vullz;\n+\n+vector float vfx = { 0.0, 1.0, 2.0, 3.0 };\n+vector float vfy = { 4.0, 5.0, 6.0, 7.0 };\n+vector float vfz;\n+\n+vector signed int vsix = { 0, 1, 2, 3 };\n+vector signed int vsiy = { 4, 5, 6, 7 };\n+vector signed int vsiz;\n+\n+vector unsigned int vuix = { 0, 1, 2, 3 };\n+vector unsigned int vuiy = { 4, 5, 6, 7 };\n+vector unsigned int vuiz;\n+\n+vector signed short vssx = { 0, 1, 2, 3, 4, 5, 6, 7 };\n+vector signed short vssy = { 8, 9, 10, 11, 12, 13, 14, 15 };\n+vector signed short vssz;\n+\n+vector unsigned short vusx = { 0, 1, 2, 3, 4, 5, 6, 7 };\n+vector unsigned short vusy = { 8, 9, 10, 11, 12, 13, 14, 15 };\n+vector unsigned short vusz;\n+\n+vector signed char vscx = { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t    8, 9, 10, 11, 12, 13, 14, 15 };\n+vector signed char vscy = { 16, 17, 18, 19, 20, 21, 22, 23,\n+\t\t\t    24, 25, 26, 27, 28, 29, 30, 31 };\n+vector signed char vscz;\n+\n+vector unsigned char vucx = { 0, 1, 2, 3, 4, 5, 6, 7,\n+\t\t\t    8, 9, 10, 11, 12, 13, 14, 15 };\n+vector unsigned char vucy = { 16, 17, 18, 19, 20, 21, 22, 23,\n+\t\t\t    24, 25, 26, 27, 28, 29, 30, 31 };\n+vector unsigned char vucz;\n+\n+int\n+main ()\n+{\n+  vdz = vec_xxpermdi (vdx, vdy, 0b01);\n+  if (vdz[0] != 0.0 || vdz[1] != 3.0)\n+    abort ();\n+  vdz = vec_xxpermdi (vdx, vdy, vscx); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  vsllz = vec_xxpermdi (vsllx, vslly, 0b10);\n+  vsllz = vec_xxpermdi (vsllx, vslly, vslly); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  vullz = vec_xxpermdi (vullx, vully, 0b10);\n+  vullz = vec_xxpermdi (vullx, vully, vully); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  if (vsllz[0] != 1 || vsllz[1] != 2)\n+    abort ();\n+\n+  vfz = vec_xxpermdi (vfx, vfy, 0b01);\n+  vfz = vec_xxpermdi (vfx, vfy, vfy); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  if (vfz[0] != 0.0 || vfz[1] != 1.0 || vfz[2] != 6.0 || vfz[3] != 7.0)\n+    abort ();\n+\n+  vsiz = vec_xxpermdi (vsix, vsiy, 0b10);\n+  vsiz = vec_xxpermdi (vsix, vsiy, vsiy); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  vuiz = vec_xxpermdi (vuix, vuiy, 0b10);\n+  vuiz = vec_xxpermdi (vuix, vuiy, vuiy); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  if (vsiz[0] != 2 || vsiz[1] != 3 || vsiz[2] != 4 || vsiz[3] != 5)\n+    abort ();\n+\n+  vssz = vec_xxpermdi (vssx, vssy, 0b00);\n+  vssz = vec_xxpermdi (vssx, vssy, vssy); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  vusz = vec_xxpermdi (vusx, vusy, 0b00);\n+  vusz = vec_xxpermdi (vusx, vusy, vusy); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  if (vssz[0] != 0 || vssz[1] != 1 || vssz[2] != 2 || vssz[3] != 3\n+      || vssz[4] != 8 || vssz[5] != 9 || vssz[6] != 10 || vssz[7] != 11)\n+    abort ();\n+\n+  vscz = vec_xxpermdi (vscx, vscy, 0b11);\n+  vscz = vec_xxpermdi (vscx, vscy, vscy);/* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  vucz = vec_xxpermdi (vucx, vucy, 0b11);\n+  vucz = vec_xxpermdi (vucx, vucy, vucy);/* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  if (vscz[0] != 8 || vscz[1] != 9 || vscz[2] != 10 || vscz[3] != 11\n+      || vscz[4] != 12 || vscz[5] != 13 || vscz[6] != 14 || vscz[7] != 15\n+      || vscz[8] != 24 || vscz[9] != 25 || vscz[10] != 26 || vscz[11] != 27\n+      || vscz[12] != 28 || vscz[13] != 29 || vscz[14] != 30 || vscz[15] != 31)\n+    abort ();\n+\n+  return 0;\n+}"}, {"sha": "06e485dc45cc7f2208a80ce388b29fe0e2c8835c", "filename": "gcc/testsuite/gcc.target/powerpc/pr84220-xxsld.c", "status": "added", "additions": 151, "deletions": 0, "changes": 151, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-xxsld.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/911b141ba1426041f949952eb52aa76ebe608344/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-xxsld.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Fpr84220-xxsld.c?ref=911b141ba1426041f949952eb52aa76ebe608344", "patch": "@@ -0,0 +1,151 @@\n+/* PR target/84220 */\n+/* Test to ensure we generate invalid parameter errors rather than an ICE\n+    when calling vec_xxsldwi() and vec_xxpermdi() with invalid parameters.  */\n+/* { dg-do compile { target { powerpc*-*-* } } } */\n+/* { dg-skip-if \"\" { powerpc*-*-darwin* } } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-skip-if \"do not override -mcpu\" { powerpc*-*-* } { \"-mcpu=*\" } { \"-mcpu=power7\" } } */\n+/* { dg-options \"-O3 -mcpu=power7\" } */\n+\n+#include <altivec.h>\n+\n+vector double\n+v2df_shift (vector double a, vector double b)\n+{\n+  return vec_xxsldwi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxsldwi (a, b, 1);\n+}\n+\n+vector float\n+v4sf_shift (vector float a, vector float b)\n+{\n+  return vec_xxsldwi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxsldwi (a, b, 1);\n+}\n+\n+vector long long\n+v2di_shift (vector long long a, vector long long b)\n+{\n+  return vec_xxsldwi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxsldwi (a, b, 1);\n+}\n+\n+vector unsigned long long\n+v2diu_shift (vector unsigned long long a, vector unsigned long long b)\n+{\n+  return vec_xxsldwi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxsldwi (a, b, 1);\n+}\n+\n+vector int\n+v4si_shift (vector int a, vector int b)\n+{\n+  return vec_xxsldwi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxsldwi (a, b, 1);\n+}\n+\n+vector unsigned int\n+v4siu_shift (vector unsigned int a, vector unsigned int b)\n+{\n+  return vec_xxsldwi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxsldwi (a, b, 1);\n+}\n+\n+vector short\n+v8hi_shift (vector short a, vector short b)\n+{\n+  return vec_xxsldwi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxsldwi (a, b, 1);\n+}\n+\n+vector unsigned short\n+v8hiu_shift (vector unsigned short a, vector unsigned short b)\n+{\n+  return vec_xxsldwi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxsldwi (a, b, 1);\n+}\n+\n+vector signed char\n+v16qi_shift (vector signed char a, vector signed char b)\n+{\n+  return vec_xxsldwi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxsldwi (a, b, 1);\n+}\n+\n+vector unsigned char\n+v16qiu_shift (vector unsigned char a, vector unsigned char b)\n+{\n+  return vec_xxsldwi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxsldwi (a, b, 1);\n+}\n+\n+vector double\n+v2df_permute (vector double a, vector double b)\n+{\n+  return vec_xxpermdi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxpermdi (a, b, 1);\n+}\n+\n+vector float\n+v4sf_permute (vector float a, vector float b)\n+{\n+  return vec_xxpermdi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxpermdi (a, b, 1);\n+}\n+\n+vector long long\n+v2di_permute (vector long long a, vector long long b)\n+{\n+  return vec_xxpermdi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxpermdi (a, b, 1);\n+}\n+\n+vector unsigned long long\n+v2diu_permute (vector unsigned long long a, vector unsigned long long b)\n+{\n+  return vec_xxpermdi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxpermdi (a, b, 1);\n+}\n+\n+vector int\n+v4si_permute (vector int a, vector int b)\n+{\n+  return vec_xxpermdi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxpermdi (a, b, 1);\n+}\n+\n+vector unsigned int\n+v4siu_permute (vector unsigned int a, vector unsigned int b)\n+{\n+  return vec_xxpermdi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxpermdi (a, b, 1);\n+}\n+\n+vector short\n+v8hi_permute (vector short a, vector short b)\n+{\n+  return vec_xxpermdi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+;\n+  return vec_xxpermdi (a, b, 1);\n+}\n+\n+vector unsigned short\n+v8hiu_permute (vector unsigned short a, vector unsigned short b)\n+{\n+  return vec_xxpermdi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxpermdi (a, b, 1);\n+}\n+\n+vector signed char\n+v16qi_permute (vector signed char a, vector signed char b)\n+{\n+  return vec_xxpermdi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxpermdi (a, b, 1);\n+}\n+\n+vector unsigned char\n+v16qiu_permute (vector unsigned char a, vector unsigned char b)\n+{\n+  return vec_xxpermdi (a, b, b); /* { dg-error \"invalid parameter combination for AltiVec intrinsic\" } */\n+  return vec_xxpermdi (a, b, 1);\n+}"}]}