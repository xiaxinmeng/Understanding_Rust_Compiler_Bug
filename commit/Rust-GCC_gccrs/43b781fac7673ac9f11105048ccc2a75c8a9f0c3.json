{"sha": "43b781fac7673ac9f11105048ccc2a75c8a9f0c3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDNiNzgxZmFjNzY3M2FjOWYxMTEwNTA0OGNjYzJhNzVjOGE5ZjBjMw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2014-05-02T19:47:40Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2014-05-02T19:47:40Z"}, "message": "re PR c++/60992 (ICE in tsubst_copy, at cp/pt.c:12637)\n\n\tPR c++/60992\n\t* lambda.c (lambda_capture_field_type): Wrap anything dependent\n\tother than 'this'.\n\t(add_capture): Check for VLA before calling it.\n\t* semantics.c (is_this_parameter): Accept any 'this' parameter, not\n\tjust the current one.  Make non-static.\n\t* cp-tree.h: Declare it.\n\t* pt.c (tsubst_copy) [VAR_DECL]: Also build a new VAR_DECL if\n\tthe operand was static or constant.\n\nFrom-SVN: r210017", "tree": {"sha": "5f8a43ce0d7d633ca950be8f18dfbaf9acef0cbf", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5f8a43ce0d7d633ca950be8f18dfbaf9acef0cbf"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/43b781fac7673ac9f11105048ccc2a75c8a9f0c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b781fac7673ac9f11105048ccc2a75c8a9f0c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/43b781fac7673ac9f11105048ccc2a75c8a9f0c3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/43b781fac7673ac9f11105048ccc2a75c8a9f0c3/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "62da5a07b2f56f860e70c9bb66791ac665bf14d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/62da5a07b2f56f860e70c9bb66791ac665bf14d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/62da5a07b2f56f860e70c9bb66791ac665bf14d8"}], "stats": {"total": 98, "additions": 79, "deletions": 19}, "files": [{"sha": "422e98cb980a6b708f3eca5fd77118e746d87fc0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b781fac7673ac9f11105048ccc2a75c8a9f0c3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b781fac7673ac9f11105048ccc2a75c8a9f0c3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=43b781fac7673ac9f11105048ccc2a75c8a9f0c3", "patch": "@@ -1,3 +1,15 @@\n+2014-05-02  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/60992\n+\t* lambda.c (lambda_capture_field_type): Wrap anything dependent\n+\tother than 'this'.\n+\t(add_capture): Check for VLA before calling it.\n+\t* semantics.c (is_this_parameter): Accept any 'this' parameter, not\n+\tjust the current one.  Make non-static.\n+\t* cp-tree.h: Declare it.\n+\t* pt.c (tsubst_copy) [VAR_DECL]: Also build a new VAR_DECL if\n+\tthe operand was static or constant.\n+\n 2014-05-02  Marek Polacek  <polacek@redhat.com>\n \n \t* typeck.c (maybe_warn_about_returning_address_of_local): Separate"}, {"sha": "34d3d2033362ab1ea44aa77b377c0a7d73f70bf9", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b781fac7673ac9f11105048ccc2a75c8a9f0c3/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b781fac7673ac9f11105048ccc2a75c8a9f0c3/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=43b781fac7673ac9f11105048ccc2a75c8a9f0c3", "patch": "@@ -5773,6 +5773,7 @@ extern bool is_sub_constant_expr (tree);\n extern bool reduced_constant_expression_p (tree);\n extern void explain_invalid_constexpr_fn (tree);\n extern vec<tree> cx_error_context (void);\n+extern bool is_this_parameter (tree);\n \n enum {\n   BCS_NO_SCOPE = 1,"}, {"sha": "5ba6f141b72dd601ba68fbd5ad4dac9b5d3a5eb7", "filename": "gcc/cp/lambda.c", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b781fac7673ac9f11105048ccc2a75c8a9f0c3/gcc%2Fcp%2Flambda.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b781fac7673ac9f11105048ccc2a75c8a9f0c3/gcc%2Fcp%2Flambda.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flambda.c?ref=43b781fac7673ac9f11105048ccc2a75c8a9f0c3", "patch": "@@ -216,8 +216,8 @@ lambda_capture_field_type (tree expr, bool explicit_init_p)\n     }\n   else\n     type = non_reference (unlowered_expr_type (expr));\n-  if (!type || WILDCARD_TYPE_P (type) || type_uses_auto (type)\n-      || DECL_PACK_P (expr))\n+  if (type_dependent_expression_p (expr)\n+      && !is_this_parameter (tree_strip_nop_conversions (expr)))\n     {\n       type = cxx_make_type (DECLTYPE_TYPE);\n       DECLTYPE_TYPE_EXPR (type) = expr;\n@@ -455,7 +455,7 @@ add_capture (tree lambda, tree id, tree orig_init, bool by_reference_p,\n   if (TREE_CODE (initializer) == TREE_LIST)\n     initializer = build_x_compound_expr_from_list (initializer, ELK_INIT,\n \t\t\t\t\t\t   tf_warning_or_error);\n-  type = lambda_capture_field_type (initializer, explicit_init_p);\n+  type = TREE_TYPE (initializer);\n   if (array_of_runtime_bound_p (type))\n     {\n       vla = true;\n@@ -482,15 +482,19 @@ add_capture (tree lambda, tree id, tree orig_init, bool by_reference_p,\n \t\t\"variable size\", TREE_TYPE (type));\n       type = error_mark_node;\n     }\n-  else if (by_reference_p)\n+  else\n     {\n-      type = build_reference_type (type);\n-      if (!real_lvalue_p (initializer))\n-\terror (\"cannot capture %qE by reference\", initializer);\n+      type = lambda_capture_field_type (initializer, explicit_init_p);\n+      if (by_reference_p)\n+\t{\n+\t  type = build_reference_type (type);\n+\t  if (!real_lvalue_p (initializer))\n+\t    error (\"cannot capture %qE by reference\", initializer);\n+\t}\n+      else\n+\t/* Capture by copy requires a complete type.  */\n+\ttype = complete_type (type);\n     }\n-  else\n-    /* Capture by copy requires a complete type.  */\n-    type = complete_type (type);\n \n   /* Add __ to the beginning of the field name so that user code\n      won't find the field with name lookup.  We can't just leave the name"}, {"sha": "1584eb9045deb34aef3533e0834563aa88967f67", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b781fac7673ac9f11105048ccc2a75c8a9f0c3/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b781fac7673ac9f11105048ccc2a75c8a9f0c3/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=43b781fac7673ac9f11105048ccc2a75c8a9f0c3", "patch": "@@ -12629,13 +12629,17 @@ tsubst_copy (tree t, tree args, tsubst_flags_t complain, tree in_decl)\n \t\t}\n \t      else\n \t\t{\n-\t\t  /* This can happen for a variable used in a late-specified\n-\t\t     return type of a local lambda.  Just make a dummy decl\n-\t\t     since it's only used for its type.  */\n-\t\t  if (cp_unevaluated_operand)\n-\t\t    return tsubst_decl (t, args, complain);\n-\t\t  gcc_assert (errorcount || sorrycount);\n-\t\t  return error_mark_node;\n+\t\t  /* This can happen for a variable used in a\n+\t\t     late-specified return type of a local lambda, or for a\n+\t\t     local static or constant.  Building a new VAR_DECL\n+\t\t     should be OK in all those cases.  */\n+\t\t  r = tsubst_decl (t, args, complain);\n+\t\t  if (decl_constant_var_p (r))\n+\t\t    /* A use of a local constant must decay to its value.  */\n+\t\t    return integral_constant_value (r);\n+\t\t  gcc_assert (cp_unevaluated_operand || TREE_STATIC (r)\n+\t\t\t      || errorcount || sorrycount);\n+\t\t  return r;\n \t\t}\n \t    }\n \t}"}, {"sha": "4afb821de06ebfd78b61b3a68e795a47ed9bfa20", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b781fac7673ac9f11105048ccc2a75c8a9f0c3/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b781fac7673ac9f11105048ccc2a75c8a9f0c3/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=43b781fac7673ac9f11105048ccc2a75c8a9f0c3", "patch": "@@ -8155,10 +8155,11 @@ maybe_initialize_constexpr_call_table (void)\n \n /* Return true if T designates the implied `this' parameter.  */\n \n-static inline bool\n+bool\n is_this_parameter (tree t)\n {\n-  return t == current_class_ptr;\n+  return (TREE_CODE (t) == PARM_DECL\n+\t  && DECL_NAME (t) == this_identifier);\n }\n \n /* We have an expression tree T that represents a call, either CALL_EXPR"}, {"sha": "a1ffaddc4a7aac8a16b1c345c9473eddd99a510a", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-const3.C", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/43b781fac7673ac9f11105048ccc2a75c8a9f0c3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-const3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/43b781fac7673ac9f11105048ccc2a75c8a9f0c3/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-const3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-const3.C?ref=43b781fac7673ac9f11105048ccc2a75c8a9f0c3", "patch": "@@ -0,0 +1,38 @@\n+// PR c++/60992\n+// { dg-do compile { target c++11 } }\n+\n+struct ScopeGuardGenerator { };\n+\n+struct FF\n+{\n+  template < class F, class ... Ts >\n+  void\n+  operator () (F & ...)\n+  {\n+    const int n = sizeof ... (Ts) + 1;\n+    void *mutexes[n];\n+    auto _on_scope_exit_var_0 =\n+      ScopeGuardGenerator () + [&mutexes] { };\n+  }\n+};\n+\n+template < class F >\n+int operator+ (ScopeGuardGenerator, F) { return 1; }\n+\n+struct D\n+{\n+  template < class T0, class T1, class T2, class ... T >\n+  void\n+  operator () (T0, T1, const T2 & t2, T & ... t)\n+  {\n+    base (t2, t ...);\n+  }\n+  FF base;\n+};\n+\n+D run_with_locks;\n+\n+void Fn ()\n+{\n+  run_with_locks ([] { }, 0, 0);\n+}"}]}