{"sha": "e0b103c6599ffa3cbce35db561169b9f38acb842", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTBiMTAzYzY1OTlmZmEzY2JjZTM1ZGI1NjExNjliOWYzOGFjYjg0Mg==", "commit": {"author": {"name": "David Daney", "email": "ddaney@avtrex.com", "date": "2006-07-20T17:30:42Z"}, "committer": {"name": "David Daney", "email": "daney@gcc.gnu.org", "date": "2006-07-20T17:30:42Z"}, "message": "mips-signal.h: Update copyright.\n\n\t* include/mips-signal.h: Update copyright.\n\t(struct kernel_sigaction): Removed.\n\t(SIGNAL_HANDLER): Changed prototype.\n\t(MAKE_THROW_FRAME): Added cast.\n\t(INIT_SEGV): Use sigaction instead of syscall.\n\t(INIT_FPE): Likewise.\n\nFrom-SVN: r115624", "tree": {"sha": "4901ff76bce95e05ac80b1f098837516e5335bab", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4901ff76bce95e05ac80b1f098837516e5335bab"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e0b103c6599ffa3cbce35db561169b9f38acb842", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b103c6599ffa3cbce35db561169b9f38acb842", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e0b103c6599ffa3cbce35db561169b9f38acb842", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e0b103c6599ffa3cbce35db561169b9f38acb842/comments", "author": null, "committer": null, "parents": [{"sha": "b70f0f48c716c8571723ee667f9712fd7e097490", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b70f0f48c716c8571723ee667f9712fd7e097490", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b70f0f48c716c8571723ee667f9712fd7e097490"}], "stats": {"total": 73, "additions": 31, "deletions": 42}, "files": [{"sha": "cd75bf4f7ac6b458ffb69c0490d1cf4f3db5110c", "filename": "libjava/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b103c6599ffa3cbce35db561169b9f38acb842/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b103c6599ffa3cbce35db561169b9f38acb842/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=e0b103c6599ffa3cbce35db561169b9f38acb842", "patch": "@@ -1,3 +1,12 @@\n+2006-07-20  David Daney  <ddaney@avtrex.com>\n+\n+\t* include/mips-signal.h: Update copyright.\n+\t(struct kernel_sigaction): Removed.\n+\t(SIGNAL_HANDLER): Changed prototype.\n+\t(MAKE_THROW_FRAME): Added cast.\n+\t(INIT_SEGV): Use sigaction instead of syscall.\n+\t(INIT_FPE): Likewise.\n+\n 2006-07-18  Paolo Bonzini  <bonzini@gnu.org>\n \n         * configure: Regenerate."}, {"sha": "63218ea84a719122ec660b6b681f53c7212d6d56", "filename": "libjava/include/mips-signal.h", "status": "modified", "additions": 22, "deletions": 42, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e0b103c6599ffa3cbce35db561169b9f38acb842/libjava%2Finclude%2Fmips-signal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e0b103c6599ffa3cbce35db561169b9f38acb842/libjava%2Finclude%2Fmips-signal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Finclude%2Fmips-signal.h?ref=e0b103c6599ffa3cbce35db561169b9f38acb842", "patch": "@@ -1,7 +1,8 @@\n // mips-signal.h - Catch runtime signals and turn them into exceptions\n // on an mips based Linux system. \n \n-/* Copyright (C) 1998, 1999, 2001, 2002, 2003, 2004 Free Software Foundation\n+/* Copyright (C) 1998, 1999, 2001, 2002, 2003, 2004, 2006\n+   Free Software Foundation\n \n    This file is part of libgcj.\n \n@@ -35,28 +36,10 @@ typedef struct _sig_ucontext {\n     sigset_t\t  uc_sigmask;\n } sig_ucontext_t;\n \n-/* We use kernel_sigaction here because we're calling the kernel\n-   directly rather than via glibc. The sigaction structure that the\n-   syscall uses is a different shape from the one in userland and not\n-   visible to us in a header file so we define it here.\n-   Additionally we want a proper prototype for the handler function\n-   with the struct sigcontext pointer passed by the kernel as the 2nd\n-   argument, which isn't there in userland headers. */\n-\n-struct kernel_sigaction {\n-    unsigned int k_sa_flags;\n-    void       (*k_sa_handler) (int, siginfo_t *, sig_ucontext_t *);\n-    sigset_t     k_sa_mask;\n-    void       (*k_sa_restorer)(void);\n-    int          k_sa_resv[1];\t/* reserved */\n-};\n-\n-\n-\n #define SIGNAL_HANDLER(_name) \\\n static void _name (int _dummy __attribute__ ((__unused__)), \\\n \t\t   siginfo_t *_info __attribute__ ((__unused__)), \\\n-\t\t   sig_ucontext_t *_arg __attribute__ ((__unused__)))\n+\t\t   void *_arg __attribute__ ((__unused__)))\n \n /*\n  *  MIPS leaves pc pointing at the faulting instruction, but the\n@@ -66,35 +49,32 @@ static void _name (int _dummy __attribute__ ((__unused__)), \\\n #define MAKE_THROW_FRAME(_exception) \\\n do                                   \\\n {                                    \\\n-  _arg->uc_mcontext.sc_pc += 4;      \\\n+  ((sig_ucontext_t *)_arg)->uc_mcontext.sc_pc += 4;      \\\n   (void)_dummy;                      \\\n   (void)_info;                       \\\n }                                    \\\n while (0)\n \n-/* For an explanation why we cannot simply use sigaction to\n-   install the handlers, see i386-signal.h.  */\n-\n-#define INIT_SEGV                                    \\\n-do                                                   \\\n-  {                                                  \\\n-    struct kernel_sigaction kact;                    \\\n-    kact.k_sa_handler = catch_segv;                  \\\n-    kact.k_sa_flags = SA_SIGINFO | SA_NODEFER;       \\\n-    sigemptyset (&kact.k_sa_mask);                   \\\n-    syscall (SYS_sigaction, SIGSEGV, &kact, NULL);   \\\n-  }                                                  \\\n+#define INIT_SEGV                            \\\n+do                                           \\\n+  {                                          \\\n+    struct sigaction act;                    \\\n+    act.sa_sigaction = catch_segv;           \\\n+    act.sa_flags = SA_SIGINFO | SA_NODEFER;  \\\n+    sigemptyset (&act.sa_mask);              \\\n+    sigaction(SIGSEGV, &act, NULL);          \\\n+  }                                          \\\n while (0)\n \n-#define INIT_FPE                                     \\\n-do                                                   \\\n-  {                                                  \\\n-    struct kernel_sigaction kact;                    \\\n-    kact.k_sa_handler = catch_fpe;                   \\\n-    kact.k_sa_flags = SA_SIGINFO | SA_NODEFER;       \\\n-    sigemptyset (&kact.k_sa_mask);                   \\\n-    syscall (SYS_sigaction, SIGFPE, &kact, NULL);    \\\n-  }                                                  \\\n+#define INIT_FPE                             \\\n+do                                           \\\n+  {                                          \\\n+    struct sigaction act;                    \\\n+    act.sa_sigaction = catch_fpe;            \\\n+    act.sa_flags = SA_SIGINFO | SA_NODEFER;  \\\n+    sigemptyset (&act.sa_mask);              \\\n+    sigaction(SIGFPE, &act, NULL);           \\\n+  }                                          \\\n while (0)\n \n #undef HANDLE_DIVIDE_OVERFLOW"}]}