{"sha": "6407bc6703d1a33e231e73faabffb6ba2e15ce8d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjQwN2JjNjcwM2QxYTMzZTIzMWU3M2ZhYWJmZmI2YmEyZTE1Y2U4ZA==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2004-04-01T20:45:02Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2004-04-01T20:45:02Z"}, "message": "re PR c++/14804 ([unit-at-a-time] initializing const data with reinterpret_cast-ed pointer-to-member function crashes)\n\n        PR c++/14804\n        * decl.c (cp_finish_decl): Preserve TREE_READONLY more often.\n        * typeck2.c (split_nonconstant_init): Clear TREE_READONLY.\n\nFrom-SVN: r80318", "tree": {"sha": "5efbbd81037c2b7cc8dfa82daa715f56b0d77fb7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5efbbd81037c2b7cc8dfa82daa715f56b0d77fb7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6407bc6703d1a33e231e73faabffb6ba2e15ce8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6407bc6703d1a33e231e73faabffb6ba2e15ce8d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6407bc6703d1a33e231e73faabffb6ba2e15ce8d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6407bc6703d1a33e231e73faabffb6ba2e15ce8d/comments", "author": null, "committer": null, "parents": [{"sha": "54fdc910cf23c0f0c658db8f9d9e30f006e97513", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54fdc910cf23c0f0c658db8f9d9e30f006e97513", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54fdc910cf23c0f0c658db8f9d9e30f006e97513"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "37d322a61f5658a22ff6f71dc95f630c65a6d72c", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6407bc6703d1a33e231e73faabffb6ba2e15ce8d/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6407bc6703d1a33e231e73faabffb6ba2e15ce8d/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6407bc6703d1a33e231e73faabffb6ba2e15ce8d", "patch": "@@ -1,3 +1,9 @@\n+2004-04-01  Richard Henderson  <rth@redhat.com>\n+\n+\tPR c++/14804\n+\t* decl.c (cp_finish_decl): Preserve TREE_READONLY more often.\n+\t* typeck2.c (split_nonconstant_init): Clear TREE_READONLY.\n+\n 2004-04-01  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/14810"}, {"sha": "b228cd07748edc36f40d8d7d2580800bb62ee633", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6407bc6703d1a33e231e73faabffb6ba2e15ce8d/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6407bc6703d1a33e231e73faabffb6ba2e15ce8d/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=6407bc6703d1a33e231e73faabffb6ba2e15ce8d", "patch": "@@ -4753,16 +4753,17 @@ cp_finish_decl (tree decl, tree init, tree asmspec_tree, int flags)\n   if (TREE_CODE (decl) != FUNCTION_DECL)\n     ttype = target_type (type);\n \n-  if (! DECL_EXTERNAL (decl) && TREE_READONLY (decl)\n-      && (TYPE_NEEDS_CONSTRUCTING (type) \n-\t  || TREE_CODE (type) == REFERENCE_TYPE))\n-    {\n-      /* Currently, GNU C++ puts constants in text space, making them\n-\t impossible to initialize.  In the future, one would hope for\n-\t an operating system which understood the difference between\n-\t initialization and the running of a program.  */\n+  \n+  /* Currently, GNU C++ puts constants in text space, making them\n+     impossible to initialize.  In the future, one would hope for\n+     an operating system which understood the difference between\n+     initialization and the running of a program.  */\n+  if (! DECL_EXTERNAL (decl) && TREE_READONLY (decl))\n+    {\n       was_readonly = 1;\n-      TREE_READONLY (decl) = 0;\n+      if (TYPE_NEEDS_CONSTRUCTING (type) \n+\t  || TREE_CODE (type) == REFERENCE_TYPE)\n+\tTREE_READONLY (decl) = 0;\n     }\n \n   if (TREE_CODE (decl) == VAR_DECL)"}, {"sha": "0a0fdbc03112ef9141e202c20c35e8fb8f5879f0", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6407bc6703d1a33e231e73faabffb6ba2e15ce8d/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6407bc6703d1a33e231e73faabffb6ba2e15ce8d/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=6407bc6703d1a33e231e73faabffb6ba2e15ce8d", "patch": "@@ -380,6 +380,7 @@ split_nonconstant_init (tree dest, tree init)\n       code = build1 (STMT_EXPR, void_type_node, code);\n       TREE_SIDE_EFFECTS (code) = 1;\n       DECL_INITIAL (dest) = init;\n+      TREE_READONLY (dest) = 0;\n     }\n   else\n     code = build (INIT_EXPR, TREE_TYPE (dest), dest, init);"}, {"sha": "b0344f480669bf901413285f8f7858be8d37a0ac", "filename": "gcc/testsuite/g++.dg/init/static2.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6407bc6703d1a33e231e73faabffb6ba2e15ce8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstatic2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6407bc6703d1a33e231e73faabffb6ba2e15ce8d/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstatic2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Finit%2Fstatic2.C?ref=6407bc6703d1a33e231e73faabffb6ba2e15ce8d", "patch": "@@ -0,0 +1,25 @@\n+// PR 14804\n+// { dg-do run }\n+\n+struct A {\n+  virtual void foo() = 0;\n+};\n+\n+struct B : public A {\n+  virtual void bar() = 0;\n+};\n+\n+typedef void (A::*mfptr)();\n+\n+struct D {\n+  mfptr p;\n+};\n+\n+static const D ds[] = {\n+  { reinterpret_cast<mfptr>(&B::bar) },\n+};\n+\n+int main()\n+{\n+  return 0;\n+}"}]}