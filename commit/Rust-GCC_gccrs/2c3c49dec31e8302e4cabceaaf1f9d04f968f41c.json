{"sha": "2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmMzYzQ5ZGVjMzFlODMwMmU0Y2FiY2VhYWYxZjlkMDRmOTY4ZjQxYw==", "commit": {"author": {"name": "Rodney Brown", "email": "RodneyBrown@pmsc.com", "date": "2000-08-04T20:28:08Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2000-08-04T20:28:08Z"}, "message": "alias.c (mark_constant_function): Use INSN_P.\n\n\t* alias.c (mark_constant_function): Use INSN_P.\n\t(init_alias_analysis): Likewise.\n\t* combine.c (combine_instructions): Use INSN_P.\n\t(can_combine_p): Likewise.\n\t(try_combine): Likewise.\n\t(distribute_notes): Likewise.\n\t(distribute_links): Likewise.\n\t* cse.c (cse_around_loop): Use INSN_P.\n\t(invalidate_skipped_block): Likewise.\n\t(cse_set_around_loop): Likewise.\n\t(cse_end_of_basic_block): Likewise.\n\t(delete_trivially_dead_insns): Likewise.\n\t* emit-rtl.c (unshare_all_rtl_again): Use INSN_P.\n\t(unshare_all_rtl_1): Likewise.\n\t(next_cc0_user): Likewise.\n\t(try_split make_insn_raw): Likewise.\n\t(remove_unnecessary_notes): Likewise.\n\t* final.c (shorten_branches): Use INSN_P.\n\t(leaf_renumber_regs): Likewise.\n\t(leaf_renumber_regs_insn): Likewise.\n\t* flow.c (find_label_refs): Use INSN_P.\n\t(verify_wide_reg): Likewise.\n\t(notice_stack_pointer_modification): Likewise.\n\t(count_or_remove_death_notes): Likewise.\n\t(verify_flow_info): Likewise.\n\t(clear_log_links): Likewise.\n\t* function.c (fixup_var_refs_insns): Use INSN_P.\n\t(compute_insns_for_mem): Likewise.\n\t* gcse.c (alloc_gcse_mem): Use INSN_P.\n\t(compute_sets): Likewise.\n\t(compute_hash_table): Likewise.\n\t(classic_gcse): Likewise.\n\t(cprop): Likewise.\n\t(insert_insn_end_bb): Likewise.\n\t(delete_null_pointer_checks_1): Likewise.\n\t* global.c (expand_preferences): Use INSN_P.\n\t(build_insn_chain): Likewise.\n\t* graph.c (node_data): Use INSN_P.\n\t* haifa-sched.c (priority): Use INSN_P.\n\t(rm_line_notes): Likewise.\n\t(rm_other_notes): Likewise.\n\t(find_insn_reg_weight): Likewise.\n\t(init_target_units): Likewise.\n\t(schedule_block): Likewise.\n\t(compute_block_forward_dependences): Likewise.\n\t(debug_dependencies): Likewise.\n\t(set_priorities): Likewise.\n\t* integrate.c (function_cannot_inline_p): Use INSN_P.\n\t(save_parm_insns): Likewise.\n\t(copy_insn_list): Likewise.\n\t* jump.c (mark_all_labels): Use INSN_P.\n\t(never_reached_warning): Likewise.\n\t* lcm.c (optimize_mode_switching): Use INSN_P.\n\t* local-alloc.c (validate_equiv_mem): Use INSN_P.\n\t(memref_used_between_p): Likewise.\n\t(update_equiv_regs): Likewise.\n\t(block_alloc): Likewise.\n\t(no_conflict_p): Likewise.\n\t* loop.c (scan_loop): Use INSN_P.\n\t(find_and_verify_loops): Likewise.\n\t(count_loop_regs_set): Likewise.\n\t(loop_reg_used_before_p): Likewise.\n\t(strength_reduce): Likewise.\n\t(recombine_givs): Likewise.\n\t(check_dbra_loop): Likewise.\n\t(load_mems): Likewise.\n\t(try_copy_prop): Likewise.\n\t* print-rtl.c (print_rtx): Use INSN_P.\n\t* recog.c (find_single_use): Use INSN_P.\n\t* reg-stack.c (stack_regs_mentioned): Use INSN_P.\n\t(next_flags_user): Likewise.\n\t(swap_rtx_condition): Likewise.\n\t* regmove.c (mark_flags_life_zones): Use INSN_P.\n\t(optimize_reg_copy_1): Likewise.\n\t(optimize_reg_copy_2): Likewise.\n\t(optimize_reg_copy_3): Likewise.\n\t(reg_is_remote_constant_p): Likewise.\n\t(fixup_match_2): Likewise.\n\t(regmove_optimize): Likewise.\n\t(fixup_match_1): Likewise.\n\t* regrename.c (build_def_use): Use INSN_P.\n\t(replace_reg_in_block): Likewise.\n\t(consider_use): Likewise.\n\t* reload.c (find_equiv_reg): Use INSN_P.\n\t* reload1.c (reload): Use INSN_P.\n\t(maybe_fix_stack_asms): Likewise.\n\t(calculate_needs_all_insns): Likewise.\n\t(reload_as_needed): Likewise.\n\t(emit_output_reload_insns): Likewise.\n\t(delete_address_reloads_1): Likewise.\n\t(reload_cse_regs_1): Likewise.\n\t(reload_combine): Likewise.\n\t(reload_cse_move2add): Likewise.\n\t* reorg.c (redundant_insn): Use INSN_P.\n\t(dbr_schedule): Likewise.\n\t* resource.c (find_dead_or_set_registers): Use INSN_P.\n\t(mark_target_live_regs): Likewise.\n\t* rtlanal.c (reg_used_between_p): Use INSN_P.\n\t(reg_referenced_between_p): Likewise.\n\t(reg_set_between_p): Likewise.\n\t(reg_set_p): Likewise.\n\t(single_set): Likewise.\n\t(multiple_sets): Likewise.\n\t(find_last_value): Likewise.\n\t(reg_set_last): Likewise.\n\t(find_reg_note): Likewise.\n\t(find_regno_note): Likewise.\n\t* sibcall.c (sequence_uses_addressof): Use INSN_P.\n\t* simplify-rtx.c (cselib_process_insn): Use INSN_P.\n\t* ssa.c (find_evaluations): Use INSN_P.\n\t(rename_block): Likewise.\n\t(rename_equivalent_regs): Likewise.\n\t* unroll.c (loop_find_equiv_value): Use INSN_P.\n\t(set_dominates_use): Likewise.\n\t* varasm.c (mark_constant_pool): Use INSN_P.\n\t(mark_constants): Likewise.\n\t* config/alpha/alpha.c (alpha_does_function_need_gp): Use INSN_P.\n\t(alphaev4_next_group): Likewise.\n\t(alphaev5_next_group): Likewise.\n\t* config/c4x/c4x.c (c4x_process_after_reload): Use INSN_P.\n\t(c4x_rptb_rpts_p): Likewise.\n\t* config/mips/mips.c (mips16_optimize_gp): Use INSN_P.\n\t* config/rs6000/rs6000.c (uses_TOC): Use INSN_P.\n\t(rs6000_adjust_priority): Likewise.\n\t* config/sh/sh.c (sh_loop_align): Use INSN_P.\n\t(machine_dependent_reorg): Likewise.\n\t(split_branches): Likewise.\n\t* config/tahoe/tahoe.c (tahoe_cmp_check): Use INSN_P.\n\nFrom-SVN: r35494", "tree": {"sha": "4728a6c16ca9ef7bf7c4c6311e00739fbf72ecdc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4728a6c16ca9ef7bf7c4c6311e00739fbf72ecdc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/comments", "author": null, "committer": null, "parents": [{"sha": "54e1d3a6a9dd0caab503807de6fb85ae1a1db0de", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54e1d3a6a9dd0caab503807de6fb85ae1a1db0de", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54e1d3a6a9dd0caab503807de6fb85ae1a1db0de"}], "stats": {"total": 522, "additions": 311, "deletions": 211}, "files": [{"sha": "d9824063f262e9b75b866bc702cda9822229bf0d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 131, "deletions": 0, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -1,3 +1,134 @@\n+2000-08-04  Rodney Brown  <RodneyBrown@pmsc.com>\n+\n+\t* alias.c (mark_constant_function): Use INSN_P.\n+\t(init_alias_analysis): Likewise.\n+\t* combine.c (combine_instructions): Use INSN_P.\n+\t(can_combine_p): Likewise.\n+\t(try_combine): Likewise.\n+\t(distribute_notes): Likewise.\n+\t(distribute_links): Likewise.\n+\t* cse.c (cse_around_loop): Use INSN_P.\n+\t(invalidate_skipped_block): Likewise.\n+\t(cse_set_around_loop): Likewise.\n+\t(cse_end_of_basic_block): Likewise.\n+\t(delete_trivially_dead_insns): Likewise.\n+\t* emit-rtl.c (unshare_all_rtl_again): Use INSN_P.\n+\t(unshare_all_rtl_1): Likewise.\n+\t(next_cc0_user): Likewise.\n+\t(try_split make_insn_raw): Likewise.\n+\t(remove_unnecessary_notes): Likewise.\n+\t* final.c (shorten_branches): Use INSN_P.\n+\t(leaf_renumber_regs): Likewise.\n+\t(leaf_renumber_regs_insn): Likewise.\n+\t* flow.c (find_label_refs): Use INSN_P.\n+\t(verify_wide_reg): Likewise.\n+\t(notice_stack_pointer_modification): Likewise.\n+\t(count_or_remove_death_notes): Likewise.\n+\t(verify_flow_info): Likewise.\n+\t(clear_log_links): Likewise.\n+\t* function.c (fixup_var_refs_insns): Use INSN_P.\n+\t(compute_insns_for_mem): Likewise.\n+\t* gcse.c (alloc_gcse_mem): Use INSN_P.\n+\t(compute_sets): Likewise.\n+\t(compute_hash_table): Likewise.\n+\t(classic_gcse): Likewise.\n+\t(cprop): Likewise.\n+\t(insert_insn_end_bb): Likewise.\n+\t(delete_null_pointer_checks_1): Likewise.\n+\t* global.c (expand_preferences): Use INSN_P.\n+\t(build_insn_chain): Likewise.\n+\t* graph.c (node_data): Use INSN_P.\n+\t* haifa-sched.c (priority): Use INSN_P.\n+\t(rm_line_notes): Likewise.\n+\t(rm_other_notes): Likewise.\n+\t(find_insn_reg_weight): Likewise.\n+\t(init_target_units): Likewise.\n+\t(schedule_block): Likewise.\n+\t(compute_block_forward_dependences): Likewise.\n+\t(debug_dependencies): Likewise.\n+\t(set_priorities): Likewise.\n+\t* integrate.c (function_cannot_inline_p): Use INSN_P.\n+\t(save_parm_insns): Likewise.\n+\t(copy_insn_list): Likewise.\n+\t* jump.c (mark_all_labels): Use INSN_P.\n+\t(never_reached_warning): Likewise.\n+\t* lcm.c (optimize_mode_switching): Use INSN_P.\n+\t* local-alloc.c (validate_equiv_mem): Use INSN_P.\n+\t(memref_used_between_p): Likewise.\n+\t(update_equiv_regs): Likewise.\n+\t(block_alloc): Likewise.\n+\t(no_conflict_p): Likewise.\n+\t* loop.c (scan_loop): Use INSN_P.\n+\t(find_and_verify_loops): Likewise.\n+\t(count_loop_regs_set): Likewise.\n+\t(loop_reg_used_before_p): Likewise.\n+\t(strength_reduce): Likewise.\n+\t(recombine_givs): Likewise.\n+\t(check_dbra_loop): Likewise.\n+\t(load_mems): Likewise.\n+\t(try_copy_prop): Likewise.\n+\t* print-rtl.c (print_rtx): Use INSN_P.\n+\t* recog.c (find_single_use): Use INSN_P.\n+\t* reg-stack.c (stack_regs_mentioned): Use INSN_P.\n+\t(next_flags_user): Likewise.\n+\t(swap_rtx_condition): Likewise.\n+\t* regmove.c (mark_flags_life_zones): Use INSN_P.\n+\t(optimize_reg_copy_1): Likewise.\n+\t(optimize_reg_copy_2): Likewise.\n+\t(optimize_reg_copy_3): Likewise.\n+\t(reg_is_remote_constant_p): Likewise.\n+\t(fixup_match_2): Likewise.\n+\t(regmove_optimize): Likewise.\n+\t(fixup_match_1): Likewise.\n+\t* regrename.c (build_def_use): Use INSN_P.\n+\t(replace_reg_in_block): Likewise.\n+\t(consider_use): Likewise.\n+\t* reload.c (find_equiv_reg): Use INSN_P.\n+\t* reload1.c (reload): Use INSN_P.\n+\t(maybe_fix_stack_asms): Likewise.\n+\t(calculate_needs_all_insns): Likewise.\n+\t(reload_as_needed): Likewise.\n+\t(emit_output_reload_insns): Likewise.\n+\t(delete_address_reloads_1): Likewise.\n+\t(reload_cse_regs_1): Likewise.\n+\t(reload_combine): Likewise.\n+\t(reload_cse_move2add): Likewise.\n+\t* reorg.c (redundant_insn): Use INSN_P.\n+\t(dbr_schedule): Likewise.\n+\t* resource.c (find_dead_or_set_registers): Use INSN_P.\n+\t(mark_target_live_regs): Likewise.\n+\t* rtlanal.c (reg_used_between_p): Use INSN_P.\n+\t(reg_referenced_between_p): Likewise.\n+\t(reg_set_between_p): Likewise.\n+\t(reg_set_p): Likewise.\n+\t(single_set): Likewise.\n+\t(multiple_sets): Likewise.\n+\t(find_last_value): Likewise.\n+\t(reg_set_last): Likewise.\n+\t(find_reg_note): Likewise.\n+\t(find_regno_note): Likewise.\n+\t* sibcall.c (sequence_uses_addressof): Use INSN_P.\n+\t* simplify-rtx.c (cselib_process_insn): Use INSN_P.\n+\t* ssa.c (find_evaluations): Use INSN_P.\n+\t(rename_block): Likewise.\n+\t(rename_equivalent_regs): Likewise.\n+\t* unroll.c (loop_find_equiv_value): Use INSN_P.\n+\t(set_dominates_use): Likewise.\n+\t* varasm.c (mark_constant_pool): Use INSN_P.\n+\t(mark_constants): Likewise.\n+\t* config/alpha/alpha.c (alpha_does_function_need_gp): Use INSN_P.\n+\t(alphaev4_next_group): Likewise.\n+\t(alphaev5_next_group): Likewise.\n+\t* config/c4x/c4x.c (c4x_process_after_reload): Use INSN_P.\n+\t(c4x_rptb_rpts_p): Likewise.\n+\t* config/mips/mips.c (mips16_optimize_gp): Use INSN_P.\n+\t* config/rs6000/rs6000.c (uses_TOC): Use INSN_P.\n+\t(rs6000_adjust_priority): Likewise.\n+\t* config/sh/sh.c (sh_loop_align): Use INSN_P.\n+\t(machine_dependent_reorg): Likewise.\n+\t(split_branches): Likewise.\n+\t* config/tahoe/tahoe.c (tahoe_cmp_check): Use INSN_P.\n+\n Fri Aug  4 11:43:49 2000  John Wehle  (john@feith.com)\n \n \t* combine.c (recog_for_combine): Remove the old notes"}, {"sha": "f879da39a51d520709d50aaac5d3b1019928b160", "filename": "gcc/alias.c", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -1833,8 +1833,7 @@ mark_constant_function ()\n   /* Determine if this is a constant function.  */\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n-\t&& nonlocal_reference_p (insn))\n+    if (INSN_P (insn) && nonlocal_reference_p (insn))\n       return;\n \n   /* Mark the function.  */\n@@ -1979,7 +1978,7 @@ init_alias_analysis ()\n       /* Walk the insns adding values to the new_reg_base_value array.  */\n       for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n \t{\n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+\t  if (INSN_P (insn))\n \t    {\n \t      rtx note, set;\n "}, {"sha": "e4243179bd19a6986e7304485fcc813626b381d5", "filename": "gcc/combine.c", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fcombine.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fcombine.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcombine.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -588,7 +588,7 @@ combine_instructions (f, nregs)\n       subst_low_cuid = i;\n       subst_insn = insn;\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \t{\n \t  note_stores (PATTERN (insn), set_nonzero_bits_and_sign_copies,\n \t\t       NULL);\n@@ -629,7 +629,7 @@ combine_instructions (f, nregs)\n       if (GET_CODE (insn) == CODE_LABEL)\n \tlabel_tick++;\n \n-      else if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      else if (INSN_P (insn))\n \t{\n \t  /* See if we know about function return values before this\n \t     insn based upon SUBREG flags.  */\n@@ -1166,8 +1166,7 @@ can_combine_p (insn, i3, pred, succ, pdest, psrc)\n         return 0;\n \n       for (p = NEXT_INSN (insn); p != i3; p = NEXT_INSN (p))\n-        if (GET_RTX_CLASS (GET_CODE (p)) == 'i'\n-  \t  && p != succ && volatile_refs_p (PATTERN (p)))\n+        if (INSN_P (p) && p != succ && volatile_refs_p (PATTERN (p)))\n   \treturn 0;\n     }\n \n@@ -1182,8 +1181,7 @@ can_combine_p (insn, i3, pred, succ, pdest, psrc)\n      they might affect machine state.  */\n \n   for (p = NEXT_INSN (insn); p != i3; p = NEXT_INSN (p))\n-    if (GET_RTX_CLASS (GET_CODE (p)) == 'i'\n-\t&& p != succ && volatile_insn_p (PATTERN (p)))\n+    if (INSN_P (p) && p != succ && volatile_insn_p (PATTERN (p)))\n       return 0;\n \n   /* If INSN or I2 contains an autoincrement or autodecrement,\n@@ -1518,9 +1516,7 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n      REG_LIBCALL note since we don't want to disrupt the contiguity of a\n      libcall.  */\n \n-  if (GET_RTX_CLASS (GET_CODE (i3)) != 'i'\n-      || GET_RTX_CLASS (GET_CODE (i2)) != 'i'\n-      || (i1 && GET_RTX_CLASS (GET_CODE (i1)) != 'i')\n+  if (! INSN_P (i3) || ! INSN_P (i2) || (i1 && ! INSN_P (i1))\n #if 0\n       /* ??? This gives worse code, and appears to be unnecessary, since no\n \t pass after flow uses REG_LIBCALL/REG_RETVAL notes.  */\n@@ -2323,8 +2319,7 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n \t\t\t|| insn != BLOCK_HEAD (this_basic_block + 1));\n \t       insn = NEXT_INSN (insn))\n \t    {\n-\t      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n-\t\t  && reg_referenced_p (ni2dest, PATTERN (insn)))\n+\t      if (INSN_P (insn) && reg_referenced_p (ni2dest, PATTERN (insn)))\n \t\t{\n \t\t  for (link = LOG_LINKS (insn); link;\n \t\t       link = XEXP (link, 1))\n@@ -2525,7 +2520,7 @@ try_combine (i3, i2, i1, new_direct_jump_p)\n \t\t     temp && (this_basic_block == n_basic_blocks - 1\n \t\t\t      || BLOCK_HEAD (this_basic_block) != temp);\n \t\t     temp = NEXT_INSN (temp))\n-\t\t  if (temp != i3 && GET_RTX_CLASS (GET_CODE (temp)) == 'i')\n+\t\t  if (temp != i3 && INSN_P (temp))\n \t\t    for (link = LOG_LINKS (temp); link; link = XEXP (link, 1))\n \t\t      if (XEXP (link, 0) == i2)\n \t\t\tXEXP (link, 0) = i3;\n@@ -12213,7 +12208,7 @@ distribute_notes (notes, from_insn, i3, i2, elim_i2, elim_i1)\n \n \t      for (tem = PREV_INSN (i3); place == 0; tem = PREV_INSN (tem))\n \t\t{\n-\t\t  if (GET_RTX_CLASS (GET_CODE (tem)) != 'i')\n+\t\t  if (! INSN_P (tem))\n \t\t    {\n \t\t      if (tem == bb->head)\n \t\t\tbreak;\n@@ -12554,8 +12549,7 @@ distribute_links (links)\n \t   (insn && (this_basic_block == n_basic_blocks - 1\n \t\t     || BLOCK_HEAD (this_basic_block + 1) != insn));\n \t   insn = NEXT_INSN (insn))\n-\tif (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n-\t    && reg_overlap_mentioned_p (reg, PATTERN (insn)))\n+\tif (INSN_P (insn) && reg_overlap_mentioned_p (reg, PATTERN (insn)))\n \t  {\n \t    if (reg_referenced_p (reg, PATTERN (insn)))\n \t      place = insn;"}, {"sha": "1332af79c50183a785da95cceb8ad02fc5560d93", "filename": "gcc/config/alpha/alpha.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fconfig%2Falpha%2Falpha.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fconfig%2Falpha%2Falpha.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -4174,7 +4174,7 @@ alpha_does_function_need_gp ()\n   pop_topmost_sequence ();\n \n   for (; insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+    if (INSN_P (insn)\n \t&& GET_CODE (PATTERN (insn)) != USE\n \t&& GET_CODE (PATTERN (insn)) != CLOBBER)\n       {\n@@ -5453,7 +5453,7 @@ alphaev4_next_group (insn, pin_use, plen)\n \n   len = in_use = 0;\n \n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i'\n+  if (! INSN_P (insn)\n       || GET_CODE (PATTERN (insn)) == CLOBBER\n       || GET_CODE (PATTERN (insn)) == USE)\n     goto next_and_done;\n@@ -5518,7 +5518,7 @@ alphaev4_next_group (insn, pin_use, plen)\n     next:\n       insn = next_nonnote_insn (insn);\n \n-      if (!insn || GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (!insn || ! INSN_P (insn))\n \tgoto done;\n \n       /* Let Haifa tell us where it thinks insn group boundaries are.  */\n@@ -5553,7 +5553,7 @@ alphaev5_next_group (insn, pin_use, plen)\n \n   len = in_use = 0;\n \n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i'\n+  if (! INSN_P (insn)\n       || GET_CODE (PATTERN (insn)) == CLOBBER\n       || GET_CODE (PATTERN (insn)) == USE)\n     goto next_and_done;\n@@ -5651,7 +5651,7 @@ alphaev5_next_group (insn, pin_use, plen)\n     next:\n       insn = next_nonnote_insn (insn);\n \n-      if (!insn || GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (!insn || ! INSN_P (insn))\n \tgoto done;\n \n       /* Let Haifa tell us where it thinks insn group boundaries are.  */"}, {"sha": "c8d865c4b63984cb46add2a289d0efa788d6aa47", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -2353,7 +2353,7 @@ c4x_process_after_reload (first)\n   for (insn = first; insn; insn = NEXT_INSN (insn))\n     {\n       /* Look for insn.  */\n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \t{\n \t  int insn_code_number;\n \t  rtx old;\n@@ -4696,13 +4696,13 @@ c4x_rptb_rpts_p (insn, op)\n   insn = next_nonnote_insn (insn);\n \n   /* This should be our first insn in the loop.  */\n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+  if (! INSN_P (insn))\n     return 0;\n \n   /* Skip any notes.  */\n   insn = next_nonnote_insn (insn);\n \n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+  if (! INSN_P (insn))\n     return 0;\n \n   if (recog_memoized (insn) != CODE_FOR_rptb_end)"}, {"sha": "85e28c53cbb2c9801248eaf70b39d851da012ae5", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -8699,7 +8699,7 @@ mips16_optimize_gp (first)\n     {\n       rtx set;\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \tcontinue;\n \n       set = PATTERN (insn);\n@@ -8798,10 +8798,10 @@ mips16_optimize_gp (first)\n \t  if (next == NULL_RTX)\n \t    break;\n \n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+\t  if (! INSN_P (insn))\n \t    continue;\n \n-\t  if (GET_RTX_CLASS (GET_CODE (next)) != 'i')\n+\t  if (! INSN_P (next))\n \t    continue;\n \n \t  set1 = PATTERN (insn);\n@@ -8854,7 +8854,7 @@ mips16_optimize_gp (first)\n     {\n       rtx set;\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \tcontinue;\n \n       set = PATTERN (insn);"}, {"sha": "4c6577c732e8d0853781d11d82310d344a95f2d1", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -4950,7 +4950,7 @@ uses_TOC ()\n     rtx insn;\n \n     for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \t{\n \t  rtx pat = PATTERN (insn);\n \t  int i;\n@@ -6975,7 +6975,7 @@ rs6000_adjust_priority (insn, priority)\n      operationss.  */\n \n #if 0\n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+  if (! INSN_P (insn))\n     return priority;\n \n   if (GET_CODE (PATTERN (insn)) == USE)"}, {"sha": "3c493862109e665513e0f87024ac1b9e57540c2a", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -2825,7 +2825,7 @@ sh_loop_align (label)\n   while (next && GET_CODE (next) == CODE_LABEL);\n \n   if (! next\n-      || GET_RTX_CLASS (GET_CODE (next)) != 'i'\n+      || ! INSN_P (next)\n       || GET_CODE (PATTERN (next)) == ADDR_DIFF_VEC\n       || recog_memoized (next) == CODE_FOR_consttable_2)\n     return 0;\n@@ -2863,7 +2863,7 @@ machine_dependent_reorg (first)\n \t dependent REG_NOTE, or some other approach entirely.  */\n       for (insn = first; insn; insn = NEXT_INSN (insn))\n \t{\n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+\t  if (INSN_P (insn))\n \t    {\n \t      rtx note;\n \n@@ -2928,7 +2928,7 @@ machine_dependent_reorg (first)\n \t\t   scan && GET_CODE (scan) != CODE_LABEL;\n \t\t   scan = PREV_INSN (scan))\n \t\t{\n-\t\t  if (GET_RTX_CLASS (GET_CODE (scan)) != 'i')\n+\t\t  if (! INSN_P (scan))\n \t\t    continue;\n \n \t\t  if (! reg_mentioned_p (reg, scan))\n@@ -2981,7 +2981,7 @@ machine_dependent_reorg (first)\n \t      if (GET_CODE (scan) == CODE_LABEL && ! foundinsn)\n \t\tbreak;\n \n-\t      if (GET_RTX_CLASS (GET_CODE (scan)) != 'i')\n+\t      if (! INSN_P (scan))\n \t\tcontinue;\n \n \t      /* Don't try to trace forward past a JUMP.  To optimize\n@@ -3309,7 +3309,7 @@ split_branches (first)\n   bzero ((char *) uid_branch, max_uid * sizeof *uid_branch);\n \n   for (insn = first; insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+    if (! INSN_P (insn))\n       continue;\n     else if (INSN_DELETED_P (insn))\n       {"}, {"sha": "cbd68716011c3ac5b581b6d76641599d9a14c0b9", "filename": "gcc/config/tahoe/tahoe.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fconfig%2Ftahoe%2Ftahoe.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fconfig%2Ftahoe%2Ftahoe.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ftahoe%2Ftahoe.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -543,7 +543,7 @@ tahoe_cmp_check (insn, op, max)\n \t&& (INTVAL (op) < 0 || INTVAL (op) > max))\n       return 0;\n \n-  if (GET_RTX_CLASS (GET_CODE (next)) == 'i')\n+  if (INSN_P (next))\n     {\n       next = PATTERN (next);\n       if (GET_CODE (next) == SET"}, {"sha": "59921588e771af29f380a78551f1e9385da22e1f", "filename": "gcc/cse.c", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -6306,12 +6306,11 @@ cse_around_loop (loop_start)\n \t     && NOTE_LINE_NUMBER (insn) == NOTE_INSN_LOOP_END);\n        insn = NEXT_INSN (insn))\n     {\n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+      if (INSN_P (insn)\n \t  && (GET_CODE (PATTERN (insn)) == SET\n \t      || GET_CODE (PATTERN (insn)) == CLOBBER))\n \tcse_set_around_loop (PATTERN (insn), insn, loop_start);\n-      else if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n-\t       && GET_CODE (PATTERN (insn)) == PARALLEL)\n+      else if (INSN_P (insn) && GET_CODE (PATTERN (insn)) == PARALLEL)\n \tfor (i = XVECLEN (PATTERN (insn), 0) - 1; i >= 0; i--)\n \t  if (GET_CODE (XVECEXP (PATTERN (insn), 0, i)) == SET\n \t      || GET_CODE (XVECEXP (PATTERN (insn), 0, i)) == CLOBBER)\n@@ -6371,7 +6370,7 @@ invalidate_skipped_block (start)\n   for (insn = start; insn && GET_CODE (insn) != CODE_LABEL;\n        insn = NEXT_INSN (insn))\n     {\n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \tcontinue;\n \n       if (GET_CODE (insn) == CALL_INSN)\n@@ -6471,7 +6470,7 @@ cse_set_around_loop (x, insn, loop_start)\n \t\t    rtx q;\n \t\t    rtx cse_check_loop_start_value = SET_SRC (x);\n \t\t    for (q = p; q != loop_start; q = NEXT_INSN (q))\n-\t\t      if (GET_RTX_CLASS (GET_CODE (q)) == 'i')\n+\t\t      if (INSN_P (q))\n \t\t\tnote_stores (PATTERN (q),\n \t\t\t\t     cse_check_loop_start,\n \t\t\t\t     &cse_check_loop_start_value);\n@@ -6543,8 +6542,7 @@ cse_end_of_basic_block (insn, data, follow_jumps, after_loop, skip_blocks)\n   rtx p = insn, q;\n   int nsets = 0;\n   int low_cuid = INSN_CUID (insn), high_cuid = INSN_CUID (insn);\n-  rtx next =\n-    GET_RTX_CLASS (GET_CODE (insn)) == 'i' ? insn : next_real_insn (insn);\n+  rtx next = INSN_P (insn) ? insn : next_real_insn (insn);\n   int path_size = data->path_size;\n   int path_entry = 0;\n   int i;\n@@ -6602,8 +6600,7 @@ cse_end_of_basic_block (insn, data, follow_jumps, after_loop, skip_blocks)\n \n       /* A PARALLEL can have lots of SETs in it,\n \t especially if it is really an ASM_OPERANDS.  */\n-      if (GET_RTX_CLASS (GET_CODE (p)) == 'i'\n-\t  && GET_CODE (PATTERN (p)) == PARALLEL)\n+      if (INSN_P (p) && GET_CODE (PATTERN (p)) == PARALLEL)\n \tnsets += XVECLEN (PATTERN (p), 0);\n       else if (GET_CODE (p) != NOTE)\n \tnsets += 1;\n@@ -7270,7 +7267,7 @@ delete_trivially_dead_insns (insns, nreg)\n      insn in the function.   We must not skip that insn or we may end\n      up deleting code that is not really dead.   */\n   insn = get_last_insn ();\n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+  if (! INSN_P (insn))\n     insn = prev_real_insn (insn);\n \n   for (; insn; insn = prev)\n@@ -7331,7 +7328,7 @@ delete_trivially_dead_insns (insns, nreg)\n \t  else if (GET_CODE (SET_DEST (PATTERN (insn))) == CC0\n \t\t   && ! side_effects_p (SET_SRC (PATTERN (insn)))\n \t\t   && ((tem = next_nonnote_insn (insn)) == 0\n-\t\t       || GET_RTX_CLASS (GET_CODE (tem)) != 'i'\n+\t\t       || ! INSN_P (tem)\n \t\t       || ! reg_referenced_p (cc0_rtx, PATTERN (tem))))\n \t    ;\n #endif\n@@ -7363,7 +7360,7 @@ delete_trivially_dead_insns (insns, nreg)\n \t\telse if (GET_CODE (SET_DEST (elt)) == CC0\n \t\t\t && ! side_effects_p (SET_SRC (elt))\n \t\t\t && ((tem = next_nonnote_insn (insn)) == 0\n-\t\t\t     || GET_RTX_CLASS (GET_CODE (tem)) != 'i'\n+\t\t\t     || ! INSN_P (tem)\n \t\t\t     || ! reg_referenced_p (cc0_rtx, PATTERN (tem))))\n \t\t  ;\n #endif"}, {"sha": "ec8f06da9f54af9d4525d69f59bdf2f920a5d235", "filename": "gcc/emit-rtl.c", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Femit-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Femit-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Femit-rtl.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -1761,7 +1761,7 @@ unshare_all_rtl_again (insn)\n   tree decl;\n \n   for (p = insn; p; p = NEXT_INSN (p))\n-    if (GET_RTX_CLASS (GET_CODE (p)) == 'i')\n+    if (INSN_P (p))\n       {\n \treset_used_flags (PATTERN (p));\n \treset_used_flags (REG_NOTES (p));\n@@ -1788,7 +1788,7 @@ unshare_all_rtl_1 (insn)\n      rtx insn;\n {\n   for (; insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+    if (INSN_P (insn))\n       {\n \tPATTERN (insn) = copy_rtx_if_shared (PATTERN (insn));\n \tREG_NOTES (insn) = copy_rtx_if_shared (REG_NOTES (insn));\n@@ -2354,8 +2354,7 @@ next_cc0_user (insn)\n   if (insn && GET_CODE (insn) == INSN && GET_CODE (PATTERN (insn)) == SEQUENCE)\n     insn = XVECEXP (PATTERN (insn), 0, 0);\n \n-  if (insn && GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n-      && reg_mentioned_p (cc0_rtx, PATTERN (insn)))\n+  if (insn && INSN_P (insn) && reg_mentioned_p (cc0_rtx, PATTERN (insn)))\n     return insn;\n \n   return 0;\n@@ -2450,10 +2449,8 @@ try_split (pat, trial, last)\n \t     set LAST and continue from the insn after the one returned.\n \t     We can't use next_active_insn here since AFTER may be a note.\n \t     Ignore deleted insns, which can be occur if not optimizing.  */\n-\t  for (tem = NEXT_INSN (before); tem != after;\n-\t       tem = NEXT_INSN (tem))\n-\t    if (! INSN_DELETED_P (tem)\n-\t\t&& GET_RTX_CLASS (GET_CODE (tem)) == 'i')\n+\t  for (tem = NEXT_INSN (before); tem != after; tem = NEXT_INSN (tem))\n+\t    if (! INSN_DELETED_P (tem) && INSN_P (tem))\n \t      tem = try_split (PATTERN (tem), tem, 1);\n \t}\n       /* Avoid infinite loop if the result matches the original pattern.  */\n@@ -2503,7 +2500,7 @@ make_insn_raw (pattern)\n \n #ifdef ENABLE_RTL_CHECKING\n   if (insn\n-      && GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+      && INSN_P (insn)\n       && (returnjump_p (insn)\n \t  || (GET_CODE (insn) == SET\n \t      && SET_DEST (insn) == pc_rtx)))\n@@ -2865,7 +2862,7 @@ remove_unnecessary_notes ()\n \t\t don't include labels; if the only thing in the block\n \t\t is a label, then there are still no PC values that\n \t\t lie within the block.  */\n-\t      if (GET_RTX_CLASS (GET_CODE (prev)) == 'i')\n+\t      if (INSN_P (prev))\n \t\tbreak;\n \n \t      /* We're only interested in NOTEs.  */"}, {"sha": "e580d5ba0cacb69dbdebc015ab8bf1dc84ff7d20", "filename": "gcc/final.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -990,7 +990,7 @@ shorten_branches (first)\n      we must split them before we compute the address/length info.  */\n \n   for (insn = NEXT_INSN (first); insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+    if (INSN_P (insn))\n       {\n \trtx old = insn;\n \t/* Don't split the insn if it has been deleted.  */\n@@ -1037,7 +1037,7 @@ shorten_branches (first)\n       int log;\n \n       INSN_SHUID (insn) = i++;\n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \t{\n \t  /* reorg might make the first insn of a loop being run once only,\n              and delete the label in front of it.  Then we want to apply\n@@ -1086,7 +1086,7 @@ shorten_branches (first)\n \t{\n \t  rtx label;\n \n-\t  for (label = insn; label && GET_RTX_CLASS (GET_CODE (label)) != 'i';\n+\t  for (label = insn; label && ! INSN_P (label);\n \t       label = NEXT_INSN (label))\n \t    if (GET_CODE (label) == CODE_LABEL)\n \t      {\n@@ -4206,10 +4206,10 @@ leaf_renumber_regs (first)\n      The reg-notes can contain frame pointer refs,\n      and renumbering them could crash, and should not be needed.  */\n   for (insn = first; insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+    if (INSN_P (insn))\n       leaf_renumber_regs_insn (PATTERN (insn));\n   for (insn = current_function_epilogue_delay_list; insn; insn = XEXP (insn, 1))\n-    if (GET_RTX_CLASS (GET_CODE (XEXP (insn, 0))) == 'i')\n+    if (INSN_P (XEXP (insn, 0)))\n       leaf_renumber_regs_insn (PATTERN (XEXP (insn, 0)));\n }\n \n@@ -4255,7 +4255,7 @@ leaf_renumber_regs_insn (in_rtx)\n       in_rtx->used = 1;\n     }\n \n-  if (GET_RTX_CLASS (GET_CODE (in_rtx)) == 'i')\n+  if (INSN_P (in_rtx))\n     {\n       /* Inside a SEQUENCE, we find insns.\n \t Renumber just the patterns of these insns,"}, {"sha": "18395303c36b13435e7b4fb6cdc37844b4da26c8", "filename": "gcc/flow.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fflow.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fflow.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflow.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -570,7 +570,7 @@ find_label_refs (f, lvl)\n   rtx insn;\n \n   for (insn = f; insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+    if (INSN_P (insn))\n       {\n \trtx note;\n \n@@ -2708,7 +2708,7 @@ verify_wide_reg (regno, head, end)\n {\n   while (1)\n     {\n-      if (GET_RTX_CLASS (GET_CODE (head)) == 'i'\n+      if (INSN_P (head)\n \t  && for_each_rtx (&PATTERN (head), verify_wide_reg_1, &regno))\n \treturn;\n       if (head == end)\n@@ -2990,7 +2990,7 @@ notice_stack_pointer_modification (f)\n \n   for (insn = f; insn; insn = NEXT_INSN (insn))\n     {\n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \t{\n \t  /* Check if insn modifies the stack pointer.  */\n \t  note_stores (PATTERN (insn), notice_stack_pointer_modification_1,\n@@ -6330,7 +6330,7 @@ count_or_remove_death_notes (blocks, kill)\n \n       for (insn = bb->head; ; insn = NEXT_INSN (insn))\n \t{\n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+\t  if (INSN_P (insn))\n \t    {\n \t      rtx *pprev = &REG_NOTES (insn);\n \t      rtx link = *pprev;\n@@ -6642,7 +6642,7 @@ verify_flow_info ()\n \t    }\n \t}\n \n-      if (GET_RTX_CLASS (GET_CODE (x)) == 'i'\n+      if (INSN_P (x)\n \t  && GET_CODE (x) == JUMP_INSN\n \t  && returnjump_p (x) && ! condjump_p (x)\n \t  && ! (NEXT_INSN (x) && GET_CODE (NEXT_INSN (x)) == BARRIER))\n@@ -7938,7 +7938,7 @@ clear_log_links (insns)\n   int b;\n \n   for (i = insns; i; i = NEXT_INSN (i))\n-    if (GET_RTX_CLASS (GET_CODE (i)) == 'i')\n+    if (INSN_P (i))\n       LOG_LINKS (i) = 0;\n \n   for (b = 0; b < n_basic_blocks; b++)"}, {"sha": "1b5740917e00486108079ba5de01f153f9ecc9b9", "filename": "gcc/function.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -1647,7 +1647,7 @@ fixup_var_refs_insns (var, promoted_mode, unsignedp, insn, toplevel, ht)\n       rtx set, prev, prev_set;\n       rtx note;\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \t{\n \t  /* Remember the notes in case we delete the insn.  */\n \t  note = REG_NOTES (insn);\n@@ -3248,7 +3248,7 @@ compute_insns_for_mem (insns, last_insn, ht)\n \n   for (ifmwi.pass = 0; ifmwi.pass < 2; ++ifmwi.pass)\n     for (insn = insns; insn != last_insn; insn = NEXT_INSN (insn))\n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \t{\n \t  ifmwi.insn = insn;\n \t  for_each_rtx (&insn, insns_for_mem_walk, &ifmwi);"}, {"sha": "680eb4f5c1f9a3966fdeb596b39c798a704e8d8b", "filename": "gcc/gcse.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -892,7 +892,7 @@ alloc_gcse_mem (f)\n   bzero ((char *) uid_cuid, n);\n   for (insn = f, i = 0; insn; insn = NEXT_INSN (insn))\n     {\n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \tuid_cuid[INSN_UID (insn)] = i++;\n       else\n \tuid_cuid[INSN_UID (insn)] = i;\n@@ -905,7 +905,7 @@ alloc_gcse_mem (f)\n   cuid_insn = (rtx *) gmalloc (n);\n   bzero ((char *) cuid_insn, n);\n   for (insn = f, i = 0; insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+    if (INSN_P (insn))\n       CUID_INSN (i++) = insn;\n \n   /* Allocate vars to track sets of regs.  */\n@@ -1164,7 +1164,7 @@ compute_sets (f)\n   rtx insn;\n \n   for (insn = f; insn != 0; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+    if (INSN_P (insn))\n       note_stores (PATTERN (insn), record_set_info, insn);\n }\n \f\n@@ -2132,7 +2132,7 @@ compute_hash_table (set_p)\n \t    }\n #endif\n \n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+\t  if (! INSN_P (insn))\n \t    continue;\n \n \t  if (GET_CODE (insn) == CALL_INSN)\n@@ -2166,7 +2166,7 @@ compute_hash_table (set_p)\n       for (insn = BLOCK_HEAD (bb), in_libcall_block = 0;\n \t   insn && insn != NEXT_INSN (BLOCK_END (bb));\n \t   insn = NEXT_INSN (insn))\n-\tif (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+\tif (INSN_P (insn))\n \t  {\n \t    if (find_reg_note (insn, REG_LIBCALL, NULL_RTX))\n \t      in_libcall_block = 1;\n@@ -3226,7 +3226,7 @@ classic_gcse ()\n \n \t  /* Keep track of everything modified by this insn.  */\n \t  /* ??? Need to be careful w.r.t. mods done to INSN.  */\n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+\t  if (INSN_P (insn))\n \t    mark_oprs_set (insn);\n \t}\n     }\n@@ -3939,7 +3939,7 @@ cprop (alter_jumps)\n \t   insn != NULL && insn != NEXT_INSN (BLOCK_END (bb));\n \t   insn = NEXT_INSN (insn))\n \t{\n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+\t  if (INSN_P (insn))\n \t    {\n \t      changed |= cprop_insn (insn, alter_jumps);\n \n@@ -4265,7 +4265,7 @@ insert_insn_end_bb (expr, bb, pre)\n \t{\n \t  rtx maybe_cc0_setter = prev_nonnote_insn (insn);\n \t  if (maybe_cc0_setter\n-\t      && GET_RTX_CLASS (GET_CODE (maybe_cc0_setter)) == 'i'\n+\t      && INSN_P (maybe_cc0_setter)\n \t      && sets_cc0_p (PATTERN (maybe_cc0_setter)))\n \t    insn = maybe_cc0_setter;\n \t}\n@@ -4356,7 +4356,7 @@ insert_insn_end_bb (expr, bb, pre)\n \t  rtx insn = XVECEXP (pat, 0, i);\n \n \t  set_block_num (insn, bb);\n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+\t  if (INSN_P (insn))\n \t    add_label_notes (PATTERN (insn), new_insn);\n \n \t  note_stores (PATTERN (insn), record_set_info, insn);\n@@ -4908,7 +4908,7 @@ delete_null_pointer_checks_1 (block_reg, nonnull_avin, nonnull_avout, npi)\n \t  rtx reg;\n \n \t  /* Ignore anything that is not a normal insn.  */\n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+\t  if (! INSN_P (insn))\n \t    continue;\n \n \t  /* Basically ignore anything that is not a simple SET.  We do have"}, {"sha": "8f308fceb5a621c61e21448c1cda5c4af0157302", "filename": "gcc/global.c", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fglobal.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -835,7 +835,7 @@ expand_preferences ()\n      where this wins are reg-reg copies.  */\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+    if (INSN_P (insn)\n \t&& (set = single_set (insn)) != 0\n \t&& GET_CODE (SET_DEST (set)) == REG\n \t&& reg_allocno[REGNO (SET_DEST (set))] >= 0)\n@@ -1798,7 +1798,7 @@ build_insn_chain (first)\n \t  c->insn = first;\n \t  c->block = b;\n \n-\t  if (GET_RTX_CLASS (GET_CODE (first)) == 'i')\n+\t  if (INSN_P (first))\n \t    {\n \t      rtx link;\n \n@@ -1820,7 +1820,7 @@ build_insn_chain (first)\n \t  else\n \t    COPY_REG_SET (&c->live_throughout, live_relevant_regs);\n \n-\t  if (GET_RTX_CLASS (GET_CODE (first)) == 'i')\n+\t  if (INSN_P (first))\n \t    {\n \t      rtx link;\n \n@@ -1845,8 +1845,7 @@ build_insn_chain (first)\n       if (b == n_basic_blocks)\n \t{\n \t  for (first = NEXT_INSN (first) ; first; first = NEXT_INSN (first))\n-\t    if (GET_RTX_CLASS (GET_CODE (first)) == 'i'\n-\t\t&& GET_CODE (PATTERN (first)) != USE)\n+\t    if (INSN_P (first) && GET_CODE (PATTERN (first)) != USE)\n \t      abort ();\n \t  break;\n \t}"}, {"sha": "871831985409df891a93b5f68a5de57ed774868e", "filename": "gcc/graph.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgraph.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -152,7 +152,7 @@ darkgrey\\n  shape: ellipse\" : \"white\",\n \tname =  GET_NOTE_INSN_NAME (NOTE_LINE_NUMBER (tmp_rtx));\n       fprintf (fp, \" %s\", name);\n     }\n-  else if (GET_RTX_CLASS (GET_CODE (tmp_rtx)) == 'i')\n+  else if (INSN_P (tmp_rtx))\n     print_rtl_single (fp, PATTERN (tmp_rtx));\n   else\n     print_rtl_single (fp, tmp_rtx);"}, {"sha": "6371b454f30b1b2fcacd3334aff0b3a047f4f8bd", "filename": "gcc/haifa-sched.c", "status": "modified", "additions": 15, "deletions": 20, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fhaifa-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fhaifa-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fhaifa-sched.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -3132,7 +3132,7 @@ priority (insn)\n   int this_priority;\n   rtx link;\n \n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+  if (! INSN_P (insn))\n     return 0;\n \n   if ((this_priority = INSN_PRIORITY (insn)) == 0)\n@@ -4415,8 +4415,7 @@ rm_line_notes (bb)\n \n   get_bb_head_tail (bb, &head, &tail);\n \n-  if (head == tail\n-      && (GET_RTX_CLASS (GET_CODE (head)) != 'i'))\n+  if (head == tail && (! INSN_P (head)))\n     return;\n \n   next_tail = NEXT_INSN (tail);\n@@ -4597,8 +4596,7 @@ rm_other_notes (head, tail)\n   rtx next_tail;\n   rtx insn;\n \n-  if (head == tail\n-      && (GET_RTX_CLASS (GET_CODE (head)) != 'i'))\n+  if (head == tail && (! INSN_P (head)))\n     return;\n \n   next_tail = NEXT_INSN (tail);\n@@ -4644,7 +4642,7 @@ find_insn_reg_weight (b)\n       rtx x;\n \n       /* Handle register life information.  */\n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \tcontinue;\n \n       /* Increment weight for each register born here.  */\n@@ -4819,7 +4817,7 @@ init_target_units ()\n \n   for (insn = get_last_insn (); insn; insn = PREV_INSN (insn))\n     {\n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \tcontinue;\n \n       unit = insn_unit (insn);\n@@ -5811,7 +5809,7 @@ schedule_block (bb, rgn_n_insns)\n \n      FIXME: Probably the same thing should be done with REG_SAVE_NOTEs\n      referencing NOTE_INSN_SETJMP at the end of the block.  */\n-  if (GET_RTX_CLASS (GET_CODE (head)) == 'i')\n+  if (INSN_P (head))\n     {\n       rtx note;\n \n@@ -5834,8 +5832,7 @@ schedule_block (bb, rgn_n_insns)\n \n   /* If the only insn left is a NOTE or a CODE_LABEL, then there is no need\n      to schedule this block.  */\n-  if (head == tail\n-      && (GET_RTX_CLASS (GET_CODE (head)) != 'i'))\n+  if (head == tail && (! INSN_P (head)))\n     return (sched_n_insns);\n \n   /* Debug info.  */\n@@ -5900,12 +5897,12 @@ schedule_block (bb, rgn_n_insns)\n     {\n       rtx next;\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \tcontinue;\n       next = NEXT_INSN (insn);\n \n       if (INSN_DEP_COUNT (insn) == 0\n-\t  && (SCHED_GROUP_P (next) == 0 || GET_RTX_CLASS (GET_CODE (next)) != 'i'))\n+\t  && (SCHED_GROUP_P (next) == 0 || ! INSN_P (next)))\n \tready[n_ready++] = insn;\n       if (!(SCHED_GROUP_P (insn)))\n \ttarget_n_insns++;\n@@ -5925,13 +5922,12 @@ schedule_block (bb, rgn_n_insns)\n \tsrc_next_tail = NEXT_INSN (tail);\n \tsrc_head = head;\n \n-\tif (head == tail\n-\t    && (GET_RTX_CLASS (GET_CODE (head)) != 'i'))\n+\tif (head == tail && (! INSN_P (head)))\n \t  continue;\n \n \tfor (insn = src_head; insn != src_next_tail; insn = NEXT_INSN (insn))\n \t  {\n-\t    if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+\t    if (! INSN_P (insn))\n \t      continue;\n \n \t    if (!CANT_MOVE (insn)\n@@ -5949,7 +5945,7 @@ schedule_block (bb, rgn_n_insns)\n \t\tif (INSN_DEP_COUNT (insn) == 0\n \t\t    && (! next\n \t\t\t|| SCHED_GROUP_P (next) == 0\n-\t\t\t|| GET_RTX_CLASS (GET_CODE (next)) != 'i'))\n+\t\t\t|| ! INSN_P (next)))\n \t\t  ready[n_ready++] = insn;\n \t      }\n \t  }\n@@ -6213,7 +6209,7 @@ compute_block_forward_dependences (bb)\n   next_tail = NEXT_INSN (tail);\n   for (insn = head; insn != next_tail; insn = NEXT_INSN (insn))\n     {\n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \tcontinue;\n \n       insn = group_leader (insn);\n@@ -6599,7 +6595,7 @@ debug_dependencies ()\n \t      rtx link;\n \t      int unit, range;\n \n-\t      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+\t      if (! INSN_P (insn))\n \t\t{\n \t\t  int n;\n \t\t  fprintf (dump, \";;   %6d \", INSN_UID (insn));\n@@ -6659,8 +6655,7 @@ set_priorities (bb)\n   get_bb_head_tail (bb, &head, &tail);\n   prev_head = PREV_INSN (head);\n \n-  if (head == tail\n-      && (GET_RTX_CLASS (GET_CODE (head)) != 'i'))\n+  if (head == tail && (! INSN_P (head)))\n     return 0;\n \n   n_insn = 0;"}, {"sha": "2cf8813021fda5c1ae30586cf2131af51cef387e", "filename": "gcc/integrate.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fintegrate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fintegrate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fintegrate.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -211,7 +211,7 @@ function_cannot_inline_p (fndecl)\n       for (ninsns = 0, insn = get_first_nonparm_insn ();\n \t   insn && ninsns < max_insns;\n \t   insn = NEXT_INSN (insn))\n-\tif (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+\tif (INSN_P (insn))\n \t  ninsns++;\n \n       if (ninsns >= max_insns)\n@@ -480,7 +480,7 @@ save_parm_insns (insn, first_nonparm_insn)\n       if (insn == first_nonparm_insn)\n \tin_nonparm_insns = 1;\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \t{\n \t  /* Record what interesting things happen to our parameters.  */\n \t  note_stores (PATTERN (insn), note_modified_parmregs, NULL);\n@@ -1577,7 +1577,7 @@ copy_insn_list (insns, map, static_chain_value)\n      are valid across the entire function.  */\n   map->const_age++;\n   for (insn = insns; insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+    if (INSN_P (insn)\n \t&& map->insn_map[INSN_UID (insn)]\n \t&& REG_NOTES (insn))\n       {"}, {"sha": "848094ce9da6a3b98386f5293d9e414d374b33d1", "filename": "gcc/jump.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fjump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fjump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjump.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -855,7 +855,7 @@ mark_all_labels (f, cross_jump)\n   rtx insn;\n \n   for (insn = f; insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+    if (INSN_P (insn))\n       {\n \tif (GET_CODE (insn) == CALL_INSN\n \t    && GET_CODE (PATTERN (insn)) == CALL_PLACEHOLDER)\n@@ -3095,7 +3095,7 @@ never_reached_warning (avoided_insn)\n \t    two_avoided_lines |= (NOTE_LINE_NUMBER (a_line_note)\n \t\t\t\t  != NOTE_LINE_NUMBER (insn));\n \t}\n-      else if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      else if (INSN_P (insn))\n \tcontains_insn = 1;\n     }\n   if (two_avoided_lines && contains_insn)"}, {"sha": "dc037970f64df95ffae432e11f90d509c19ea8be", "filename": "gcc/lcm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -1061,7 +1061,7 @@ optimize_mode_switching (file)\n \t       insn != NULL && insn != NEXT_INSN (BLOCK_END (bb));\n \t       insn = NEXT_INSN (insn))\n \t    {\n-\t      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+\t      if (INSN_P (insn))\n \t\t{\n \t\t  int mode = MODE_NEEDED (e, insn);\n \t\t  rtx link;"}, {"sha": "02e969492b5769713f7ad6c3a665896e6bbabdde", "filename": "gcc/local-alloc.c", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Flocal-alloc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Flocal-alloc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flocal-alloc.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -472,7 +472,7 @@ validate_equiv_mem (start, reg, memref)\n \n   for (insn = start; insn && ! equiv_mem_modified; insn = NEXT_INSN (insn))\n     {\n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \tcontinue;\n \n       if (find_reg_note (insn, REG_DEAD, reg))\n@@ -632,8 +632,7 @@ memref_used_between_p (memref, start, end)\n \n   for (insn = NEXT_INSN (start); insn != NEXT_INSN (end);\n        insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n-\t&& memref_referenced_p (memref, PATTERN (insn)))\n+    if (INSN_P (insn) && memref_referenced_p (memref, PATTERN (insn)))\n       return 1;\n \n   return 0;\n@@ -698,7 +697,7 @@ update_equiv_regs ()\n \t    loop_depth--;\n \t}\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \tcontinue;\n \n       for (note = REG_NOTES (insn); note; note = XEXP (note, 1))\n@@ -909,7 +908,7 @@ update_equiv_regs ()\n \t  && BLOCK_HEAD (block + 1) == insn)\n \t++block;\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \t{\n \t  if (GET_CODE (insn) == NOTE)\n \t    {\n@@ -1076,7 +1075,7 @@ block_alloc (b)\n       if (GET_CODE (insn) != NOTE)\n \tinsn_number++;\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \t{\n \t  register rtx link, set;\n \t  register int win = 0;\n@@ -2168,7 +2167,7 @@ no_conflict_p (insn, r0, r1)\n   last = XEXP (note, 0);\n \n   for (p = NEXT_INSN (insn); p && p != last; p = NEXT_INSN (p))\n-    if (GET_RTX_CLASS (GET_CODE (p)) == 'i')\n+    if (INSN_P (p))\n       {\n \tif (find_reg_note (p, REG_DEAD, r1))\n \t  ok = 1;"}, {"sha": "3e1be34c3e94ce32138aae369c18ac07ce2253db", "filename": "gcc/loop.c", "status": "modified", "additions": 15, "deletions": 19, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -637,7 +637,7 @@ scan_loop (loop, flags)\n \n   for (p = NEXT_INSN (loop_start);\n        p != loop_end\n-\t && GET_CODE (p) != CODE_LABEL && GET_RTX_CLASS (GET_CODE (p)) != 'i'\n+\t && GET_CODE (p) != CODE_LABEL && ! INSN_P (p)\n \t && (GET_CODE (p) != NOTE\n \t     || (NOTE_LINE_NUMBER (p) != NOTE_INSN_LOOP_BEG\n \t\t && NOTE_LINE_NUMBER (p) != NOTE_INSN_LOOP_END));\n@@ -753,11 +753,9 @@ scan_loop (loop, flags)\n        p != NULL_RTX;\n        p = next_insn_in_loop (loop, p))\n     {\n-      if (GET_RTX_CLASS (GET_CODE (p)) == 'i'\n-\t  && find_reg_note (p, REG_LIBCALL, NULL_RTX))\n+      if (INSN_P (p) && find_reg_note (p, REG_LIBCALL, NULL_RTX))\n \tin_libcall = 1;\n-      else if (GET_RTX_CLASS (GET_CODE (p)) == 'i'\n-\t       && find_reg_note (p, REG_RETVAL, NULL_RTX))\n+      else if (INSN_P (p) && find_reg_note (p, REG_RETVAL, NULL_RTX))\n \tin_libcall = 0;\n \n       if (GET_CODE (p) == INSN\n@@ -2736,7 +2734,7 @@ find_and_verify_loops (f, loops)\n      possible second cse pass.  */\n \n   for (insn = f; insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+    if (INSN_P (insn))\n       {\n \tstruct loop *this_loop = uid_loop[INSN_UID (insn)];\n \n@@ -3556,7 +3554,7 @@ count_loop_regs_set (from, to, may_not_move, single_usage, count_ptr, nregs)\n \n   for (insn = from; insn != to; insn = NEXT_INSN (insn))\n     {\n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \t{\n \t  ++count;\n \n@@ -3609,8 +3607,7 @@ loop_reg_used_before_p (loop, set, insn)\n      are done.  Otherwise, if we hit LOOP->END, wrap around to LOOP->START.  */\n   for (p = loop->scan_start; p != insn; p = NEXT_INSN (p))\n     {\n-      if (GET_RTX_CLASS (GET_CODE (p)) == 'i'\n-\t  && reg_overlap_mentioned_p (reg, PATTERN (p)))\n+      if (INSN_P (p) && reg_overlap_mentioned_p (reg, PATTERN (p)))\n \treturn 1;\n \n       if (p == loop->end)\n@@ -4107,8 +4104,7 @@ strength_reduce (loop, insn_count, flags)\n \t\t\t      && insn_dependent_p (giv_insn, next)))\n \t\t\tbreak;\n #ifdef HAVE_cc0\n-\t\t      if (! INSN_P (next)\n-\t\t\t  || ! sets_cc0_p (PATTERN (next)))\n+\t\t      if (! INSN_P (next) || ! sets_cc0_p (PATTERN (next)))\n #endif\n \t\t\tdominator = next;\n \t\t    }\n@@ -4352,7 +4348,7 @@ strength_reduce (loop, insn_count, flags)\n \t\t{\n \t\t  rtx note;\n     \n-\t\t  if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+\t\t  if (! INSN_P (p))\n \t\t    continue;\n \t\t  if (reg_mentioned_p (old_reg, PATTERN (p)))\n \t\t    {\n@@ -4747,7 +4743,7 @@ strength_reduce (loop, insn_count, flags)\n \t\t    if ((auto_inc_opt == 1 && sets_cc0_p (PATTERN (v->insn)))\n \t\t\t|| (auto_inc_opt == -1\n \t\t\t    && (prev = prev_nonnote_insn (v->insn)) != 0\n-\t\t\t    && GET_RTX_CLASS (GET_CODE (prev)) == 'i'\n+\t\t\t    && INSN_P (prev)\n \t\t\t    && sets_cc0_p (PATTERN (prev))))\n \t\t      auto_inc_opt = 0;\n \t\t  }\n@@ -7474,7 +7470,7 @@ recombine_givs (loop, bl, unroll_p)\n \t  if (p == loop->start)\n \t    p = loop->end;\n \t  p = PREV_INSN (p);\n-\t  if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+\t  if (! INSN_P (p))\n \t    continue;\n \t  ends_need_computing -= find_life_end (PATTERN (p), stats, p, biv);\n \t}\n@@ -7913,7 +7909,7 @@ check_dbra_loop (loop, insn_count)\n \t     see if perhaps there are no uses except to count.  */\n \t  no_use_except_counting = 1;\n \t  for (p = loop_start; p != loop_end; p = NEXT_INSN (p))\n-\t    if (GET_RTX_CLASS (GET_CODE (p)) == 'i')\n+\t    if (INSN_P (p))\n \t      {\n \t\trtx set = single_set (p);\n \n@@ -7951,7 +7947,7 @@ check_dbra_loop (loop, insn_count)\n       else if (num_mem_sets <= 1)\n \t{\n \t  for (p = loop_start; p != loop_end; p = NEXT_INSN (p))\n-\t    if (GET_RTX_CLASS (GET_CODE (p)) == 'i')\n+\t    if (INSN_P (p))\n \t      num_nonfixed_reads += count_nonfixed_reads (loop, PATTERN (p));\n \n \t  /* If the loop has a single store, and the destination address is\n@@ -8292,7 +8288,7 @@ check_dbra_loop (loop, insn_count)\n \t\t remove all REG_EQUAL notes based on the reversed biv\n \t\t here.  */\n \t      for (p = loop_start; p != loop_end; p = NEXT_INSN (p))\n-\t\tif (GET_RTX_CLASS (GET_CODE (p)) == 'i')\n+\t\tif (INSN_P (p))\n \t\t  {\n \t\t    rtx *pnote;\n \t\t    rtx set = single_set (p);\n@@ -9552,7 +9548,7 @@ load_mems (loop)\n \t  rtx_and_int ri;\n \t  rtx set;\n \n-\t  if (GET_RTX_CLASS (GET_CODE (p)) == 'i')\n+\t  if (INSN_P (p))\n \t    {\n \t      /* See if this copies the mem into a register that isn't\n \t\t modified afterwards.  We'll try to do copy propagation\n@@ -9745,7 +9741,7 @@ try_copy_prop (loop, replacement, regno)\n       if (GET_CODE (insn) == CODE_LABEL && init_insn)\n \tbreak;\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \tcontinue;\n \n       /* Is this the initializing insn?  */"}, {"sha": "5d7cd5feebba8e82dfd301dbc82a786850ca8858", "filename": "gcc/print-rtl.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fprint-rtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fprint-rtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-rtl.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -89,7 +89,7 @@ print_rtx (in_rtx)\n       return;\n     }\n \n-  is_insn = (GET_RTX_CLASS (GET_CODE (in_rtx)) == 'i');\n+  is_insn = (INSN_P (in_rtx));\n \n   /* When printing in VCG format we write INSNs, NOTE, LABEL, and BARRIER\n      in separate nodes and therefore have to handle them special here.  */"}, {"sha": "87a8ec4e96a27a21e2edf18c8a3e35af7b3c8c40", "filename": "gcc/recog.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -856,7 +856,7 @@ find_single_use (dest, insn, ploc)\n   for (next = next_nonnote_insn (insn);\n        next != 0 && GET_CODE (next) != CODE_LABEL;\n        next = next_nonnote_insn (next))\n-    if (GET_RTX_CLASS (GET_CODE (next)) == 'i' && dead_or_set_p (next, dest))\n+    if (INSN_P (next) && dead_or_set_p (next, dest))\n       {\n \tfor (link = LOG_LINKS (next); link; link = XEXP (link, 1))\n \t  if (XEXP (link, 0) == insn)"}, {"sha": "0063cbdbdaa35092fc7ce8e6fde60205ec4e0bb2", "filename": "gcc/reg-stack.c", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Freg-stack.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Freg-stack.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freg-stack.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -302,7 +302,7 @@ stack_regs_mentioned (insn)\n   unsigned int uid, max;\n   int test;\n \n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+  if (! INSN_P (insn))\n     return 0;\n \n   uid = INSN_UID (insn);\n@@ -342,8 +342,7 @@ next_flags_user (insn)\n       if (!insn)\n \treturn NULL_RTX;\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n-          && reg_mentioned_p (ix86_flags_rtx, PATTERN (insn)))\n+      if (INSN_P (insn) && reg_mentioned_p (ix86_flags_rtx, PATTERN (insn)))\n         return insn;\n \n       if (GET_CODE (insn) == JUMP_INSN\n@@ -1237,8 +1236,7 @@ swap_rtx_condition (insn)\n \t  insn = NEXT_INSN (insn);\n \t  if (insn == NULL_RTX)\n \t    return 0;\n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n-\t      && reg_mentioned_p (dest, insn))\n+\t  if (INSN_P (insn) && reg_mentioned_p (dest, insn))\n \t    break;\n \t  if (GET_CODE (insn) == JUMP_INSN)\n \t    return 0;"}, {"sha": "1d6578f1f27c14a60d03fd40115341fca9b39706", "filename": "gcc/regmove.c", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fregmove.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fregmove.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregmove.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -284,7 +284,7 @@ mark_flags_life_zones (flags)\n \t     alive, death, birth.  This lets more important info\n \t     overwrite the mode of lesser info.  */\n \n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+\t  if (INSN_P (insn))\n \t    {\n #ifdef HAVE_cc0\n \t      /* In the cc0 case, death is not marked in reg notes,\n@@ -414,7 +414,7 @@ optimize_reg_copy_1 (insn, dest, src)\n       if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n \tbreak;\n \n-      if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+      if (! INSN_P (p))\n \tcontinue;\n \n       if (reg_set_p (src, p) || reg_set_p (dest, p)\n@@ -599,7 +599,7 @@ optimize_reg_copy_2 (insn, dest, src)\n       if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n \tbreak;\n \n-      if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+      if (! INSN_P (p))\n \tcontinue;\n \n       set = single_set (p);\n@@ -611,7 +611,7 @@ optimize_reg_copy_2 (insn, dest, src)\n \n \t  /* Set to stop at next insn.  */\n \t  for (q = insn; q != NEXT_INSN (p); q = NEXT_INSN (q))\n-\t    if (GET_RTX_CLASS (GET_CODE (q)) == 'i')\n+\t    if (INSN_P (q))\n \t      {\n \t\tif (reg_mentioned_p (dest, PATTERN (q)))\n \t\t  PATTERN (q) = replace_rtx (PATTERN (q), dest, src);\n@@ -673,7 +673,7 @@ optimize_reg_copy_3 (insn, dest, src)\n       if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n \treturn;\n \n-      if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+      if (! INSN_P (p))\n \tcontinue;\n     }\n   if (! p)\n@@ -709,7 +709,7 @@ optimize_reg_copy_3 (insn, dest, src)\n   subreg = gen_rtx_SUBREG (old_mode, src_reg, 0);\n   while (p = NEXT_INSN (p), p != insn)\n     {\n-      if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+      if (! INSN_P (p))\n \tcontinue;\n \n       /* Make a tenative change.  */\n@@ -884,7 +884,7 @@ reg_is_remote_constant_p (reg, insn, first)\n     {\n       rtx s;\n \n-      if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+      if (! INSN_P (p))\n \tcontinue;\n       s = single_set (p);\n       if (s != 0\n@@ -952,7 +952,7 @@ fixup_match_2 (insn, dst, src, offset, regmove_dump_file)\n       if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n \tbreak;\n \n-      if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+      if (! INSN_P (p))\n         continue;\n \n       if (find_regno_note (p, REG_DEAD, REGNO (dst)))\n@@ -991,7 +991,7 @@ fixup_match_2 (insn, dst, src, offset, regmove_dump_file)\n \t\t  if (GET_CODE (p) == CODE_LABEL\n \t\t      || GET_CODE (p) == JUMP_INSN)\n \t\t    break;\n-\t\t  if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+\t\t  if (! INSN_P (p))\n \t\t    continue;\n \t\t  if (reg_overlap_mentioned_p (dst, PATTERN (p)))\n \t\t    {\n@@ -1005,7 +1005,7 @@ fixup_match_2 (insn, dst, src, offset, regmove_dump_file)\n \t\t  if (GET_CODE (p) == CODE_LABEL\n \t\t      || GET_CODE (p) == JUMP_INSN)\n \t\t    break;\n-\t\t  if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+\t\t  if (! INSN_P (p))\n \t\t    continue;\n \t\t  if (reg_overlap_mentioned_p (dst, PATTERN (p)))\n \t\t    {\n@@ -1225,7 +1225,7 @@ regmove_optimize (f, nregs, regmove_dump_file)\n \n   for (insn = get_last_insn (); insn; insn = PREV_INSN (insn))\n     {\n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \t{\n \t  int op_no, match_no;\n \t  int success = 0;\n@@ -1384,7 +1384,7 @@ regmove_optimize (f, nregs, regmove_dump_file)\n \t\t  if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n \t\t    break;\n \n-\t\t  if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+\t\t  if (! INSN_P (p))\n \t\t    continue;\n \n \t\t  length++;\n@@ -1669,7 +1669,7 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n       if (flag_exceptions && GET_CODE (p) == CALL_INSN)\n \tbreak;\n \n-      if (GET_RTX_CLASS (GET_CODE (p)) != 'i')\n+      if (! INSN_P (p))\n \tcontinue;\n \n       length++;\n@@ -1723,7 +1723,7 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t\t      break;\n \t\t    }\n \n-\t\t  if (GET_RTX_CLASS (GET_CODE (q)) != 'i')\n+\t\t  if (! INSN_P (q))\n \t\t    continue;\n \t\t  if (reg_overlap_mentioned_p (src, PATTERN (q))\n \t\t      || reg_set_p (src, q))\n@@ -1859,8 +1859,7 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t  /* emit_insn_after_with_line_notes has no\n \t     return value, so search for the new insn.  */\n \t  insn = p;\n-\t  while (GET_RTX_CLASS (GET_CODE (insn)) != 'i'\n-\t\t || PATTERN (insn) != pat)\n+\t  while (! INSN_P (insn) || PATTERN (insn) != pat)\n \t    insn = PREV_INSN (insn);\n \n \t  REG_NOTES (insn) = notes;\n@@ -1899,7 +1898,7 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t\t  break;\n \t\t}\n \n-\t      if (GET_RTX_CLASS (GET_CODE (q)) != 'i')\n+\t      if (! INSN_P (q))\n \t\tcontinue;\n \t      s_length2++;\n \t      if (reg_set_p (src, q))\n@@ -1964,7 +1963,7 @@ fixup_match_1 (insn, set, src, src_subreg, dst, backward, operand_number,\n \t  if (flag_exceptions && GET_CODE (q) == CALL_INSN)\n \t    break;\n \n-\t  if (GET_RTX_CLASS (GET_CODE (q)) != 'i')\n+\t  if (! INSN_P (q))\n \t    continue;\n \t  if (src != inc_dest && (reg_overlap_mentioned_p (src, PATTERN (q))\n \t\t\t\t  || reg_set_p (src, q)))"}, {"sha": "fb0a3be028b0740053a3a3961b9709a2199ceff3", "filename": "gcc/regrename.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fregrename.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fregrename.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregrename.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -465,7 +465,7 @@ build_def_use (b, ebb, regs_used, du, defs_live_exit)\n \t  struct resources insn_res;\n \t  struct resources insn_sets;\n \n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+\t  if (! INSN_P (insn))\n \t    continue;\n \n \t  CLEAR_RESOURCE (&insn_sets);\n@@ -559,7 +559,7 @@ replace_reg_in_block (du, uid_ruid, def, reg_def, avail_reg)\n   /* Now replace in the uses. */\n   for (du_idx = def + 1; du_idx < du->high_bound; du_idx++)\n     {\n-      if (GET_RTX_CLASS (GET_CODE (VARRAY_RTX (*uid_ruid, du_idx))) != 'i')\n+      if (! INSN_P (VARRAY_RTX (*uid_ruid, du_idx)))\n \tcontinue;\n \n       reg_use = regno_use_in (r, PATTERN (VARRAY_RTX (*uid_ruid, du_idx)));\n@@ -802,7 +802,7 @@ consider_use (insn, regno, def_block, use_block)\n   edge e;\n   basic_block ub = BASIC_BLOCK (use_block);\n \n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+  if (! INSN_P (insn))\n     return 0;\n \n   /* If a use's basic block is different than the def's basic block, "}, {"sha": "c18da001ae448d2e18f952e4343abda9242a0100", "filename": "gcc/reload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -6309,7 +6309,7 @@ find_equiv_reg (goal, insn, class, other, reload_reg_p, goalreg, mode)\n \treturn 0;\n #endif\n \n-      if (GET_RTX_CLASS (GET_CODE (p)) == 'i')\n+      if (INSN_P (p))\n \t{\n \t  pat = PATTERN (p);\n "}, {"sha": "d77d08eb7ac52c4bf0b323bb8de2d812e4699ad1", "filename": "gcc/reload1.c", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Freload1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Freload1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload1.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -773,7 +773,7 @@ reload (first, global, dumpfile)\n \t  = gen_rtx_INSN_LIST (VOIDmode, insn,\n \t\t\t       reg_equiv_init[REGNO (SET_SRC (set))]);\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \tscan_paradoxical_subregs (PATTERN (insn));\n     }\n \n@@ -1113,7 +1113,7 @@ reload (first, global, dumpfile)\n      and regenerate REG_INC notes that may have been moved around.  */\n \n   for (insn = first; insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+    if (INSN_P (insn))\n       {\n \trtx *pnote;\n \n@@ -1225,7 +1225,7 @@ maybe_fix_stack_asms ()\n       HARD_REG_SET clobbered, allowed;\n       rtx pat;\n \n-      if (GET_RTX_CLASS (GET_CODE (chain->insn)) != 'i'\n+      if (! INSN_P (chain->insn)\n \t  || (noperands = asm_noperands (PATTERN (chain->insn))) < 0)\n \tcontinue;\n       pat = PATTERN (chain->insn);\n@@ -1360,11 +1360,10 @@ calculate_needs_all_insns (global)\n \t known offsets at labels.  */\n \n       if (GET_CODE (insn) == CODE_LABEL || GET_CODE (insn) == JUMP_INSN\n-\t  || (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n-\t      && REG_NOTES (insn) != 0))\n+\t  || (INSN_P (insn) && REG_NOTES (insn) != 0))\n \tset_label_offsets (insn, insn, 0);\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \t{\n \t  rtx old_body = PATTERN (insn);\n \t  int old_code = INSN_CODE (insn);\n@@ -3746,7 +3745,7 @@ reload_as_needed (live_known)\n       if (GET_CODE (insn) == CODE_LABEL)\n \tset_offsets_for_label (insn);\n \n-      else if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      else if (INSN_P (insn))\n \t{\n \t  rtx oldpat = PATTERN (insn);\n \n@@ -3834,7 +3833,7 @@ reload_as_needed (live_known)\n \n \t      if (asm_noperands (PATTERN (insn)) >= 0)\n \t\tfor (p = NEXT_INSN (prev); p != next; p = NEXT_INSN (p))\n-\t\t  if (p != insn && GET_RTX_CLASS (GET_CODE (p)) == 'i'\n+\t\t  if (p != insn && INSN_P (p)\n \t\t      && (recog_memoized (p) < 0\n \t\t\t  || (extract_insn (p), ! constrain_operands (1))))\n \t\t    {\n@@ -6560,7 +6559,7 @@ emit_output_reload_insns (chain, rl, j)\n \n   /* Look at all insns we emitted, just to be safe.  */\n   for (p = get_insns (); p; p = NEXT_INSN (p))\n-    if (GET_RTX_CLASS (GET_CODE (p)) == 'i')\n+    if (INSN_P (p))\n       {\n \trtx pat = PATTERN (p);\n \n@@ -7635,7 +7634,7 @@ delete_address_reloads_1 (dead_insn, x, current_insn)\n \t{\n \t  if (GET_CODE (i2) == CODE_LABEL)\n \t    break;\n-\t  if (GET_RTX_CLASS (GET_CODE (i2)) != 'i')\n+\t  if (! INSN_P (i2))\n \t    continue;\n \t  if (reg_referenced_p (dst, PATTERN (i2)))\n \t    {\n@@ -7969,7 +7968,7 @@ reload_cse_regs_1 (first)\n \n   for (insn = first; insn; insn = NEXT_INSN (insn))\n     {\n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \treload_cse_simplify (insn);\n \n       cselib_process_insn (insn);\n@@ -8424,7 +8423,7 @@ reload_combine ()\n \t  if (! fixed_regs[r])\n \t      reg_state[r].use_index = RELOAD_COMBINE_MAX_USES;\n \n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \tcontinue;\n \n       reload_combine_ruid++;\n@@ -8855,7 +8854,7 @@ reload_cse_move2add (first)\n \n       if (GET_CODE (insn) == CODE_LABEL)\n \tlast_label_luid = move2add_luid;\n-      if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+      if (! INSN_P (insn))\n \tcontinue;\n       pat = PATTERN (insn);\n       /* For simplicity, we only perform this optimization on"}, {"sha": "99f24c8bca4d3c08b08fea5989943b7a2f9f3431", "filename": "gcc/reorg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Freorg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Freorg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freorg.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -1631,7 +1631,7 @@ redundant_insn (insn, target, delay_list)\n       if (GET_CODE (trial) == CODE_LABEL)\n \treturn 0;\n \n-      if (GET_RTX_CLASS (GET_CODE (trial)) != 'i')\n+      if (! INSN_P (trial))\n \tcontinue;\n \n       pat = PATTERN (trial);\n@@ -3594,7 +3594,7 @@ dbr_schedule (first, file)\n       next = NEXT_INSN (insn);\n \n       if (GET_CODE (insn) == INSN && GET_CODE (PATTERN (insn)) == USE\n-\t  && GET_RTX_CLASS (GET_CODE (XEXP (PATTERN (insn), 0))) == 'i')\n+\t  && INSN_P (XEXP (PATTERN (insn), 0)))\n \tnext = delete_insn (insn);\n     }\n "}, {"sha": "de33cb12975a1c8d2253d1d8cf696c457c9f0763", "filename": "gcc/resource.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fresource.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fresource.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fresource.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -452,7 +452,7 @@ find_dead_or_set_registers (target, res, jump_target, jump_count, set, needed)\n \t      /* If INSN is a USE made by update_block, we care about the\n \t\t underlying insn.  Any registers set by the underlying insn\n \t\t are live since the insn is being done somewhere else.  */\n-\t      if (GET_RTX_CLASS (GET_CODE (XEXP (PATTERN (insn), 0))) == 'i')\n+\t      if (INSN_P (XEXP (PATTERN (insn), 0)))\n \t\tmark_set_resources (XEXP (PATTERN (insn), 0), res, 0,\n \t\t\t\t    MARK_SRC_DEST_CALL);\n \n@@ -991,7 +991,7 @@ mark_target_live_regs (insns, target, res)\n \t  /* If this insn is a USE made by update_block, we care about the\n \t     underlying insn.  */\n \t  if (GET_CODE (insn) == INSN && GET_CODE (PATTERN (insn)) == USE\n-\t      && GET_RTX_CLASS (GET_CODE (XEXP (PATTERN (insn), 0))) == 'i')\n+\t      && INSN_P (XEXP (PATTERN (insn), 0)))\n \t      real_insn = XEXP (PATTERN (insn), 0);\n \n \t  if (GET_CODE (real_insn) == CALL_INSN)"}, {"sha": "22e05662164d733fcb667301c56a234f5c0493c1", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -418,7 +418,7 @@ reg_used_between_p (reg, from_insn, to_insn)\n     return 0;\n \n   for (insn = NEXT_INSN (from_insn); insn != to_insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+    if (INSN_P (insn)\n \t&& (reg_overlap_mentioned_p (reg, PATTERN (insn))\n \t   || (GET_CODE (insn) == CALL_INSN\n \t      && (find_reg_fusage (insn, USE, reg)\n@@ -517,7 +517,7 @@ reg_referenced_between_p (reg, from_insn, to_insn)\n     return 0;\n \n   for (insn = NEXT_INSN (from_insn); insn != to_insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n+    if (INSN_P (insn)\n \t&& (reg_referenced_p (reg, PATTERN (insn))\n \t   || (GET_CODE (insn) == CALL_INSN\n \t      && find_reg_fusage (insn, USE, reg))))\n@@ -538,8 +538,7 @@ reg_set_between_p (reg, from_insn, to_insn)\n     return 0;\n \n   for (insn = NEXT_INSN (from_insn); insn != to_insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n-\t&& reg_set_p (reg, insn))\n+    if (INSN_P (insn) && reg_set_p (reg, insn))\n       return 1;\n   return 0;\n }\n@@ -571,7 +570,7 @@ reg_set_p (reg, insn)\n \n   /* We can be passed an insn or part of one.  If we are passed an insn,\n      check if a side-effect of the insn clobbers REG.  */\n-  if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+  if (INSN_P (insn))\n     {\n       if (FIND_REG_INC_NOTE (insn, reg)\n \t  || (GET_CODE (insn) == CALL_INSN\n@@ -802,7 +801,7 @@ single_set (insn)\n   rtx set;\n   int i;\n   \n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+  if (! INSN_P (insn))\n     return 0;\n \n   if (GET_CODE (PATTERN (insn)) == SET)\n@@ -852,7 +851,7 @@ multiple_sets (insn)\n   int i;\n   \n   /* INSN must be an insn.  */\n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+  if (! INSN_P (insn))\n     return 0;\n \n   /* Only a PARALLEL can have multiple SETs.  */\n@@ -891,7 +890,7 @@ find_last_value (x, pinsn, valid_to, allow_hwreg)\n \n   for (p = PREV_INSN (*pinsn); p && GET_CODE (p) != CODE_LABEL;\n        p = PREV_INSN (p))\n-    if (GET_RTX_CLASS (GET_CODE (p)) == 'i')\n+    if (INSN_P (p))\n       {\n \trtx set = single_set (p);\n \trtx note = find_reg_note (p, REG_EQUAL, NULL_RTX);\n@@ -1194,7 +1193,7 @@ reg_set_last (x, insn)\n        && ! (GET_CODE (insn) == CALL_INSN\n \t     && reg_set_last_last_regno <= FIRST_PSEUDO_REGISTER);\n        insn = PREV_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+    if (INSN_P (insn))\n       {\n \tnote_stores (PATTERN (insn), reg_set_last_1, NULL);\n \tif (reg_set_last_unknown)\n@@ -1427,7 +1426,7 @@ find_reg_note (insn, kind, datum)\n   register rtx link;\n \n   /* Ignore anything that is not an INSN, JUMP_INSN or CALL_INSN.  */\n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+  if (! INSN_P (insn))\n     return 0;\n \n   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))\n@@ -1451,7 +1450,7 @@ find_regno_note (insn, kind, regno)\n   register rtx link;\n \n   /* Ignore anything that is not an INSN, JUMP_INSN or CALL_INSN.  */\n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+  if (! INSN_P (insn))\n     return 0;\n \n   for (link = REG_NOTES (insn); link; link = XEXP (link, 1))"}, {"sha": "78e855eef78d6e859869f0037e68ccbea5be01dd", "filename": "gcc/sibcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fsibcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fsibcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsibcall.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -301,7 +301,7 @@ sequence_uses_addressof (seq)\n   rtx insn;\n \n   for (insn = seq; insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+    if (INSN_P (insn))\n       {\n \t/* If this is a CALL_PLACEHOLDER, then recursively call ourselves\n \t   with each nonempty sequence attached to the CALL_PLACEHOLDER.  */"}, {"sha": "e97e7b76a1b1251f984fc0bb2f9023b39db21e3f", "filename": "gcc/simplify-rtx.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fsimplify-rtx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fsimplify-rtx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsimplify-rtx.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -3189,7 +3189,7 @@ cselib_process_insn (insn)\n       return;\n     }\n \n-  if (GET_RTX_CLASS (GET_CODE (insn)) != 'i')\n+  if (! INSN_P (insn))\n     {\n       cselib_current_insn = 0;\n       return;"}, {"sha": "a32836881dc831c6933177b7c864c70788104be7", "filename": "gcc/ssa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fssa.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -491,7 +491,7 @@ find_evaluations (evals, nregs)\n       last = BLOCK_END (bb);\n       while (1)\n \t{\n-\t  if (GET_RTX_CLASS (GET_CODE (p)) == 'i')\n+\t  if (INSN_P (p))\n \t    note_stores (PATTERN (p), find_evaluations_1, NULL);\n \n \t  if (p == last)\n@@ -999,7 +999,7 @@ rename_block (bb, idom)\n   do\n     {\n       insn = next;\n-      if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+      if (INSN_P (insn))\n \t{\n \t  struct rename_context context;\n \t  context.done_renames = set_data;\n@@ -2122,7 +2122,7 @@ rename_equivalent_regs (reg_partition)\n       do\n \t{\n \t  insn = next;\n-\t  if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+\t  if (INSN_P (insn))\n \t    {\n \t      for_each_rtx (&PATTERN (insn), \n \t\t\t    rename_equivalent_regs_in_insn, "}, {"sha": "6976ebae6ed1b22781157b23c6d3d0067a37de3a", "filename": "gcc/unroll.c", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Funroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Funroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Funroll.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -3522,8 +3522,7 @@ loop_find_equiv_value (loop, reg)\n       if (GET_CODE (insn) == CODE_LABEL)\n \tbreak;\n \n-      else if (GET_RTX_CLASS (GET_CODE (insn)) == 'i'\n-\t       && reg_set_p (reg, insn))\n+      else if (INSN_P (insn) && reg_set_p (reg, insn))\n \t{\n \t  /* We found the last insn before the loop that sets the register.\n \t     If it sets the entire register, and has a REG_EQUAL note,\n@@ -4125,8 +4124,7 @@ set_dominates_use (regno, first_uid, last_uid, copy_start, copy_end)\n     }\n \n   /* Verify that FIRST_UID is an insn that entirely sets REGNO.  */\n-  if (GET_RTX_CLASS (GET_CODE (p)) != 'i'\n-      || ! dead_or_set_regno_p (p, regno))\n+  if (! INSN_P (p) || ! dead_or_set_regno_p (p, regno))\n     return 0;\n \n   /* FIRST_UID is always executed.  */"}, {"sha": "5b934e863ffc90b972a788eacf7e6290b5659cc0", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2c3c49dec31e8302e4cabceaaf1f9d04f968f41c/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=2c3c49dec31e8302e4cabceaaf1f9d04f968f41c", "patch": "@@ -3889,13 +3889,13 @@ mark_constant_pool ()\n     pool->mark = 0;\n \n   for (insn = get_insns (); insn; insn = NEXT_INSN (insn))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+    if (INSN_P (insn))\n       mark_constants (PATTERN (insn));\n \n   for (insn = current_function_epilogue_delay_list;\n        insn;\n        insn = XEXP (insn, 1))\n-    if (GET_RTX_CLASS (GET_CODE (insn)) == 'i')\n+    if (INSN_P (insn))\n       mark_constants (PATTERN (insn));\n \n   /* It's possible that the only reference to a symbol is in a symbol\n@@ -3953,7 +3953,7 @@ mark_constants (x)\n   /* Insns may appear inside a SEQUENCE.  Only check the patterns of\n      insns, not any notes that may be attached.  We don't want to mark\n      a constant just because it happens to appear in a REG_EQUIV note.  */\n-  if (GET_RTX_CLASS (GET_CODE (x)) == 'i')\n+  if (INSN_P (x))\n     {\n       mark_constants (PATTERN (x));\n       return;"}]}