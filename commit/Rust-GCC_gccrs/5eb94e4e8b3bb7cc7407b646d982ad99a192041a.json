{"sha": "5eb94e4e8b3bb7cc7407b646d982ad99a192041a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWViOTRlNGU4YjNiYjdjYzc0MDdiNjQ2ZDk4MmFkOTlhMTkyMDQxYQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-07-30T10:45:24Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1993-07-30T10:45:24Z"}, "message": "(expand_return): Don't use jumps for \"return x == y\" if they are\nexpensive.\n\nFrom-SVN: r5043", "tree": {"sha": "a88e78478bc5d780e136b01370495367a8533974", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a88e78478bc5d780e136b01370495367a8533974"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5eb94e4e8b3bb7cc7407b646d982ad99a192041a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb94e4e8b3bb7cc7407b646d982ad99a192041a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5eb94e4e8b3bb7cc7407b646d982ad99a192041a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5eb94e4e8b3bb7cc7407b646d982ad99a192041a/comments", "author": null, "committer": null, "parents": [{"sha": "790e949032a94bc90fc4fcf79b31c8c14850dcb1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/790e949032a94bc90fc4fcf79b31c8c14850dcb1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/790e949032a94bc90fc4fcf79b31c8c14850dcb1"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "af00b07b5ab91fc9a0428d55f5223eefe58c91e7", "filename": "gcc/stmt.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5eb94e4e8b3bb7cc7407b646d982ad99a192041a/gcc%2Fstmt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5eb94e4e8b3bb7cc7407b646d982ad99a192041a/gcc%2Fstmt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstmt.c?ref=5eb94e4e8b3bb7cc7407b646d982ad99a192041a", "patch": "@@ -1,5 +1,5 @@\n /* Expands front end tree to back end RTL for GNU C-Compiler\n-   Copyright (C) 1987, 1988, 1989, 1992 Free Software Foundation, Inc.\n+   Copyright (C) 1987, 1988, 1989, 1992, 1993 Free Software Foundation, Inc.\n \n This file is part of GNU CC.\n \n@@ -2388,11 +2388,13 @@ expand_return (retval)\n      because expand_null_return takes care of them, too.\n      Any reason why not?  */\n   if (HAVE_return && cleanup_label == 0\n-      && ! current_function_returns_pcc_struct)\n+      && ! current_function_returns_pcc_struct\n+      && BRANCH_COST <= 1)\n     {\n       /* If this is  return x == y;  then generate\n \t if (x == y) return 1; else return 0;\n-\t if we can do it with explicit return insns.  */\n+\t if we can do it with explicit return insns and\n+\t branches are cheap.  */\n       if (retval_rhs)\n \tswitch (TREE_CODE (retval_rhs))\n \t  {"}]}