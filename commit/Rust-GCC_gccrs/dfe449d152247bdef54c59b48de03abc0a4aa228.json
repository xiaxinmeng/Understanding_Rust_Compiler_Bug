{"sha": "dfe449d152247bdef54c59b48de03abc0a4aa228", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGZlNDQ5ZDE1MjI0N2JkZWY1NGM1OWI0OGRlMDNhYmMwYTRhYTIyOA==", "commit": {"author": {"name": "Bill Schmidt", "email": "wschmidt@linux.vnet.ibm.com", "date": "2014-04-15T18:20:01Z"}, "committer": {"name": "William Schmidt", "email": "wschmidt@gcc.gnu.org", "date": "2014-04-15T18:20:01Z"}, "message": "re PR target/60839 (PowerPC: internal compiler error: in extract_insn, at recog.c:2154)\n\n2014-04-15  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n\n\tPR target/60839\n\tRevert following patch\n\n\t2014-04-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n\n\tPR target/60735\n\t* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): If we have\n\tsoftware floating point or no floating point registers, do not\n\tallow any type in the FPRs.  Eliminate a test for SPE SIMD types\n\tin GPRs that occurs after we tested for GPRs that would never be\n\ttrue.\n\n\t* config/rs6000/rs6000.md (mov<mode>_softfloat32, FMOVE64):\n\tRewrite tests to use TARGET_DOUBLE_FLOAT and TARGET_E500_DOUBLE,\n\tsince the FMOVE64 type is DFmode/DDmode.  If TARGET_E500_DOUBLE,\n\tspecifically allow DDmode, since that does not use the SPE SIMD\n\tinstructions.\n\nFrom-SVN: r209425", "tree": {"sha": "a1a3df086944cc85f1140e5de744f5ceabb77fae", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a1a3df086944cc85f1140e5de744f5ceabb77fae"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dfe449d152247bdef54c59b48de03abc0a4aa228", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe449d152247bdef54c59b48de03abc0a4aa228", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfe449d152247bdef54c59b48de03abc0a4aa228", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfe449d152247bdef54c59b48de03abc0a4aa228/comments", "author": {"login": "wschmidt-ibm", "id": 5520937, "node_id": "MDQ6VXNlcjU1MjA5Mzc=", "avatar_url": "https://avatars.githubusercontent.com/u/5520937?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wschmidt-ibm", "html_url": "https://github.com/wschmidt-ibm", "followers_url": "https://api.github.com/users/wschmidt-ibm/followers", "following_url": "https://api.github.com/users/wschmidt-ibm/following{/other_user}", "gists_url": "https://api.github.com/users/wschmidt-ibm/gists{/gist_id}", "starred_url": "https://api.github.com/users/wschmidt-ibm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wschmidt-ibm/subscriptions", "organizations_url": "https://api.github.com/users/wschmidt-ibm/orgs", "repos_url": "https://api.github.com/users/wschmidt-ibm/repos", "events_url": "https://api.github.com/users/wschmidt-ibm/events{/privacy}", "received_events_url": "https://api.github.com/users/wschmidt-ibm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "25dce5c6fb72b00a31245938fb69fd198e1fe31f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/25dce5c6fb72b00a31245938fb69fd198e1fe31f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/25dce5c6fb72b00a31245938fb69fd198e1fe31f"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "4479bdc74cacb78c458b94a9a888b027b7217ac7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe449d152247bdef54c59b48de03abc0a4aa228/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe449d152247bdef54c59b48de03abc0a4aa228/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=dfe449d152247bdef54c59b48de03abc0a4aa228", "patch": "@@ -1,3 +1,23 @@\n+2014-04-15  Bill Schmidt  <wschmidt@linux.vnet.ibm.com>\n+\n+\tPR target/60839\n+\tRevert following patch\n+\n+\t2014-04-02  Michael Meissner  <meissner@linux.vnet.ibm.com>\n+\n+\tPR target/60735\n+\t* config/rs6000/rs6000.c (rs6000_hard_regno_mode_ok): If we have\n+\tsoftware floating point or no floating point registers, do not\n+\tallow any type in the FPRs.  Eliminate a test for SPE SIMD types\n+\tin GPRs that occurs after we tested for GPRs that would never be\n+\ttrue.\n+\n+\t* config/rs6000/rs6000.md (mov<mode>_softfloat32, FMOVE64):\n+\tRewrite tests to use TARGET_DOUBLE_FLOAT and TARGET_E500_DOUBLE,\n+\tsince the FMOVE64 type is DFmode/DDmode.  If TARGET_E500_DOUBLE,\n+\tspecifically allow DDmode, since that does not use the SPE SIMD\n+\tinstructions.\n+\n 2014-03-21  Mark Wielaard  <mjw@redhat.com>\n \n \t* dwarf2out.c (gen_enumeration_type_die): Add DW_AT_const_value"}, {"sha": "494efc562b7a86db2c95c6eb66ee0256816947cd", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe449d152247bdef54c59b48de03abc0a4aa228/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe449d152247bdef54c59b48de03abc0a4aa228/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=dfe449d152247bdef54c59b48de03abc0a4aa228", "patch": "@@ -1752,9 +1752,6 @@ rs6000_hard_regno_mode_ok (int regno, enum machine_mode mode)\n      modes and DImode.  */\n   if (FP_REGNO_P (regno))\n     {\n-      if (TARGET_SOFT_FLOAT || !TARGET_FPRS)\n-\treturn 0;\n-\n       if (SCALAR_FLOAT_MODE_P (mode)\n \t  && (mode != TDmode || (regno % 2) == 0)\n \t  && FP_REGNO_P (last_regno))\n@@ -1783,6 +1780,10 @@ rs6000_hard_regno_mode_ok (int regno, enum machine_mode mode)\n     return (VECTOR_MEM_ALTIVEC_OR_VSX_P (mode)\n \t    || mode == V1TImode);\n \n+  /* ...but GPRs can hold SIMD data on the SPE in one register.  */\n+  if (SPE_SIMD_REGNO_P (regno) && TARGET_SPE && SPE_VECTOR_MODE (mode))\n+    return 1;\n+\n   /* We cannot put non-VSX TImode or PTImode anywhere except general register\n      and it must be able to fit within the register set.  */\n "}, {"sha": "64c9e7c10069c34d1aa3887fbdd032e40dc238aa", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dfe449d152247bdef54c59b48de03abc0a4aa228/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dfe449d152247bdef54c59b48de03abc0a4aa228/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=dfe449d152247bdef54c59b48de03abc0a4aa228", "patch": "@@ -9394,9 +9394,8 @@\n   [(set (match_operand:FMOVE64 0 \"nonimmediate_operand\" \"=Y,r,r,r,r,r\")\n \t(match_operand:FMOVE64 1 \"input_operand\" \"r,Y,r,G,H,F\"))]\n   \"! TARGET_POWERPC64 \n-   && ((TARGET_FPRS && TARGET_DOUBLE_FLOAT) \n-       || TARGET_SOFT_FLOAT\n-       || (<MODE>mode == DDmode && TARGET_E500_DOUBLE))\n+   && ((TARGET_FPRS && TARGET_SINGLE_FLOAT) \n+       || TARGET_SOFT_FLOAT || TARGET_E500_SINGLE)\n    && (gpc_reg_operand (operands[0], <MODE>mode)\n        || gpc_reg_operand (operands[1], <MODE>mode))\"\n   \"#\""}]}