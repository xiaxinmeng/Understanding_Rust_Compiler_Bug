{"sha": "26adc870e3675591050f37edab46850b97a3c122", "node_id": "C_kwDOANBUbNoAKDI2YWRjODcwZTM2NzU1OTEwNTBmMzdlZGFiNDY4NTBiOTdhM2MxMjI", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-21T11:49:36Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2023-03-21T13:04:31Z"}, "message": "tree-optimization/109219 - avoid looking at STMT_SLP_TYPE\n\nThe following avoids looking at STMT_SLP_TYPE apart from the only\nplace needing it - transform and analysis of non-SLP loop stmts.\nIn particular it doesn't have a reliable meaning on SLP representatives\nwhich are also passed as stmt_vinfo to vectorizable_* routines.  The\nproper way to check in those is to look for the slp_node argument\ninstead.\n\n\tPR tree-optimization/109219\n\t* tree-vect-loop.cc (vectorizable_reduction): Check\n\tslp_node, not STMT_SLP_TYPE.\n\t* tree-vect-stmts.cc (vectorizable_condition): Likewise.\n\t* tree-vect-slp.cc (vect_slp_analyze_node_operations_1):\n\tRemove assertion on STMT_SLP_TYPE.\n\n\t* gcc.dg/torture/pr109219.c: New testcase.", "tree": {"sha": "a7a7c40e519ea641bd28274957522e931b3ab36a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a7a7c40e519ea641bd28274957522e931b3ab36a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/26adc870e3675591050f37edab46850b97a3c122", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26adc870e3675591050f37edab46850b97a3c122", "html_url": "https://github.com/Rust-GCC/gccrs/commit/26adc870e3675591050f37edab46850b97a3c122", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/26adc870e3675591050f37edab46850b97a3c122/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49a8bce43cdc1d1b48efa5eeb2a4097cfca1dc22", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/49a8bce43cdc1d1b48efa5eeb2a4097cfca1dc22", "html_url": "https://github.com/Rust-GCC/gccrs/commit/49a8bce43cdc1d1b48efa5eeb2a4097cfca1dc22"}], "stats": {"total": 27, "additions": 23, "deletions": 4}, "files": [{"sha": "2b5c514ad858e583e5f610101303429bcbf06780", "filename": "gcc/testsuite/gcc.dg/torture/pr109219.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26adc870e3675591050f37edab46850b97a3c122/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr109219.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26adc870e3675591050f37edab46850b97a3c122/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr109219.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr109219.c?ref=26adc870e3675591050f37edab46850b97a3c122", "patch": "@@ -0,0 +1,21 @@\n+/* { dg-do compile } */\n+/* { dg-additional-options \"-ftree-vectorize\" } */\n+\n+int safe_lshift_func_int32_t_s_s_left, safe_lshift_func_int32_t_s_s_right,\n+    safe_sub_func_uint64_t_u_u_ui2, safe_mul_func_uint64_t_u_u_ui2, g_79_2,\n+    g_97_l_439;\n+void g_97(int * __restrict l_437)\n+{\n+  for (; g_97_l_439; g_97_l_439 += 1)\n+    for (char l_502 = 0; l_502 < 4; l_502++)\n+      {\n+        int __trans_tmp_14 = ((safe_lshift_func_int32_t_s_s_right >= 2\n+                               || safe_lshift_func_int32_t_s_s_left)\n+                              ? 1 : safe_lshift_func_int32_t_s_s_right);\n+        long __trans_tmp_15 = __trans_tmp_14 * safe_mul_func_uint64_t_u_u_ui2;\n+        unsigned short __trans_tmp_16 = -__trans_tmp_15;\n+        int __trans_tmp_7\n+          = (__trans_tmp_16 ^ 65535UL) - safe_sub_func_uint64_t_u_u_ui2;\n+        *l_437 ^= (short)(__trans_tmp_7 ^ g_79_2);\n+      }\n+}"}, {"sha": "1ba9f18d73e17fbfea722470876f110080b24d05", "filename": "gcc/tree-vect-loop.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26adc870e3675591050f37edab46850b97a3c122/gcc%2Ftree-vect-loop.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26adc870e3675591050f37edab46850b97a3c122/gcc%2Ftree-vect-loop.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.cc?ref=26adc870e3675591050f37edab46850b97a3c122", "patch": "@@ -7424,7 +7424,7 @@ vectorizable_reduction (loop_vec_info loop_vinfo,\n     }\n \n   /* Check extra constraints for variable-length unchained SLP reductions.  */\n-  if (STMT_SLP_TYPE (stmt_info)\n+  if (slp_node\n       && !REDUC_GROUP_FIRST_ELEMENT (stmt_info)\n       && !nunits_out.is_constant ())\n     {"}, {"sha": "356bdfb93d9514d37706fd15790a4375f280772e", "filename": "gcc/tree-vect-slp.cc", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26adc870e3675591050f37edab46850b97a3c122/gcc%2Ftree-vect-slp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26adc870e3675591050f37edab46850b97a3c122/gcc%2Ftree-vect-slp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-slp.cc?ref=26adc870e3675591050f37edab46850b97a3c122", "patch": "@@ -5951,8 +5951,6 @@ vect_slp_analyze_node_operations_1 (vec_info *vinfo, slp_tree node,\n       return true;\n     }\n \n-  gcc_assert (STMT_SLP_TYPE (stmt_info) != loop_vect);\n-\n   bool dummy;\n   return vect_analyze_stmt (vinfo, stmt_info, &dummy,\n \t\t\t    node, node_instance, cost_vec);"}, {"sha": "efa2d0daa5248b0c6eb2cd12183db1d8915c5cd3", "filename": "gcc/tree-vect-stmts.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/26adc870e3675591050f37edab46850b97a3c122/gcc%2Ftree-vect-stmts.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/26adc870e3675591050f37edab46850b97a3c122/gcc%2Ftree-vect-stmts.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-stmts.cc?ref=26adc870e3675591050f37edab46850b97a3c122", "patch": "@@ -10510,7 +10510,7 @@ vectorizable_condition (vec_info *vinfo,\n     = STMT_VINFO_REDUC_DEF (vect_orig_stmt (stmt_info)) != NULL;\n   if (for_reduction)\n     {\n-      if (STMT_SLP_TYPE (stmt_info))\n+      if (slp_node)\n \treturn false;\n       reduc_info = info_for_reduction (vinfo, stmt_info);\n       reduction_type = STMT_VINFO_REDUC_TYPE (reduc_info);"}]}