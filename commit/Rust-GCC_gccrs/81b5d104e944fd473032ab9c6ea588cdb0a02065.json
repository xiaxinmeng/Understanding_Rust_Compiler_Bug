{"sha": "81b5d104e944fd473032ab9c6ea588cdb0a02065", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODFiNWQxMDRlOTQ0ZmQ0NzMwMzJhYjljNmVhNTg4Y2RiMGEwMjA2NQ==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-29T16:06:19Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2014-08-29T16:06:19Z"}, "message": "directives.c (check_eol_1): New.\n\nlibcpp/ChangeLog:\n\n2014-08-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* directives.c (check_eol_1): New.\n\t(check_eol_endif_labels): New.\n\t(check_eol): Call check_eol_1.\n\t(do_else,do_endif): Call check_eol_endif_labels.\n\ngcc/c-family/ChangeLog:\n\n2014-08-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\t* c.opt (Wbuiltin-macro-redefined,Wdeprecated,Wendif-labels,\n\tWinvalid-pch,Wliteral-suffix,Wmissing-include-dirs,Wtrigraphs,\n\tWundef): Use CPP, Var and Init.\n\t* c-opts.c (c_common_handle_option): Do not handle the above flags here.\n\nFrom-SVN: r214735", "tree": {"sha": "de65daf646063d398a29e838164556dae2e7bbc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/de65daf646063d398a29e838164556dae2e7bbc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/81b5d104e944fd473032ab9c6ea588cdb0a02065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b5d104e944fd473032ab9c6ea588cdb0a02065", "html_url": "https://github.com/Rust-GCC/gccrs/commit/81b5d104e944fd473032ab9c6ea588cdb0a02065", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/81b5d104e944fd473032ab9c6ea588cdb0a02065/comments", "author": null, "committer": null, "parents": [{"sha": "f71f9d3fb6156edd82822ad9a26d3e4c6495d041", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f71f9d3fb6156edd82822ad9a26d3e4c6495d041", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f71f9d3fb6156edd82822ad9a26d3e4c6495d041"}], "stats": {"total": 87, "additions": 45, "deletions": 42}, "files": [{"sha": "762f7e9a71fc6d774a34e0064ca3be45b80c8b63", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b5d104e944fd473032ab9c6ea588cdb0a02065/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b5d104e944fd473032ab9c6ea588cdb0a02065/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=81b5d104e944fd473032ab9c6ea588cdb0a02065", "patch": "@@ -1,3 +1,10 @@\n+2014-08-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* c.opt (Wbuiltin-macro-redefined,Wdeprecated,Wendif-labels,\n+\tWinvalid-pch,Wliteral-suffix,Wmissing-include-dirs,Wtrigraphs,\n+\tWundef): Use CPP, Var and Init.\n+\t* c-opts.c (c_common_handle_option): Do not handle the above flags here.\n+\n 2014-08-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* c.opt (Wbuiltin-macro-redefined): Use CPP, Var and Init."}, {"sha": "6093eb310e3538930c10aa9afbbde2d08ed47eab", "filename": "gcc/c-family/c-opts.c", "status": "modified", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b5d104e944fd473032ab9c6ea588cdb0a02065/gcc%2Fc-family%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b5d104e944fd473032ab9c6ea588cdb0a02065/gcc%2Fc-family%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-opts.c?ref=81b5d104e944fd473032ab9c6ea588cdb0a02065", "patch": "@@ -381,37 +381,17 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n     case OPT_Wall:\n       /* ??? Don't add new options here. Use LangEnabledBy in c.opt.  */\n \n-      cpp_opts->warn_trigraphs = value;\n       cpp_opts->warn_num_sign_change = value;\n       break;\n \n     case OPT_Wc___compat:\n       cpp_opts->warn_cxx_operator_names = value;\n       break;\n \n-    case OPT_Wdeprecated:\n-      cpp_opts->cpp_warn_deprecated = value;\n-      break;\n-\n-    case OPT_Wendif_labels:\n-      cpp_opts->warn_endif_labels = value;\n-      break;\n-\n-    case OPT_Winvalid_pch:\n-      cpp_opts->warn_invalid_pch = value;\n-      break;\n-\n-    case OPT_Wliteral_suffix:\n-      cpp_opts->warn_literal_suffix = value;\n-      break;\n-\n     case OPT_Wlong_long:\n       cpp_opts->cpp_warn_long_long = value;\n       break;\n \n-    case OPT_Wmissing_include_dirs:\n-      cpp_opts->warn_missing_include_dirs = value;\n-      break;\n     case OPT_Wnormalized_:\n       /* FIXME: Move all this to c.opt.  */\n       if (kind == DK_ERROR)\n@@ -439,14 +419,6 @@ c_common_handle_option (size_t scode, const char *arg, int value,\n       cpp_opts->cpp_warn_traditional = value;\n       break;\n \n-    case OPT_Wtrigraphs:\n-      cpp_opts->warn_trigraphs = value;\n-      break;\n-\n-    case OPT_Wundef:\n-      cpp_opts->warn_undef = value;\n-      break;\n-\n     case OPT_Wunknown_pragmas:\n       /* Set to greater than 1, so that even unknown pragmas in\n \t system headers will be warned about.  */"}, {"sha": "210a099a550c23858503dccdc4e2c5c2abe489c8", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b5d104e944fd473032ab9c6ea588cdb0a02065/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b5d104e944fd473032ab9c6ea588cdb0a02065/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=81b5d104e944fd473032ab9c6ea588cdb0a02065", "patch": "@@ -368,7 +368,7 @@ LangEnabledBy(C++ ObjC++,Weffc++)\n ;\n \n Wdeprecated\n-C C++ ObjC ObjC++ Var(warn_deprecated) Init(1) Warning\n+C C++ ObjC ObjC++ CPP(cpp_warn_deprecated) Var(warn_deprecated) Init(1) Warning\n Warn if a deprecated compiler feature, class, method, or field is used\n \n Wdesignated-init\n@@ -392,7 +392,7 @@ C ObjC C++ ObjC++ Var(warn_empty_body) Warning EnabledBy(Wextra)\n Warn about an empty body in an if or else statement\n \n Wendif-labels\n-C ObjC C++ ObjC++ Warning\n+C ObjC C++ ObjC++ CPP(warn_endif_labels) Var(cpp_warn_endif_labels) Init(1) Warning\n Warn about stray tokens after #elif and #endif\n \n Wenum-compare\n@@ -503,15 +503,15 @@ C++ ObjC++ Var(warn_invalid_offsetof) Init(1) Warning\n Warn about invalid uses of the \\\"offsetof\\\" macro\n \n Winvalid-pch\n-C ObjC C++ ObjC++ Warning\n+C ObjC C++ ObjC++ CPP(warn_invalid_pch) Var(cpp_warn_invalid_pch) Warning\n Warn about PCH files that are found but not used\n \n Wjump-misses-init\n C ObjC Var(warn_jump_misses_init) Warning LangEnabledby(C ObjC,Wc++-compat)\n Warn when a jump misses a variable initialization\n \n Wliteral-suffix\n-C++ ObjC++ Warning\n+C++ ObjC++ CPP(warn_literal_suffix) Var(cpp_warn_literal_suffix) Init(1) Warning\n Warn when a string or character literal is followed by a ud-suffix which does not begin with an underscore.\n \n Wlogical-op\n@@ -583,7 +583,7 @@ C ObjC C++ ObjC++ Alias(Wsuggest-attribute=format)\n ;\n \n Wmissing-include-dirs\n-C ObjC C++ ObjC++ Warning\n+C ObjC C++ ObjC++ CPP(warn_missing_include_dirs) Var(cpp_warn_missing_include_dirs) Warning\n Warn about user-specified include directories that do not exist\n \n Wmissing-parameter-type\n@@ -794,15 +794,15 @@ C ObjC Var(warn_traditional_conversion) Warning\n Warn of prototypes causing type conversions different from what would happen in the absence of prototype\n \n Wtrigraphs\n-C ObjC C++ ObjC++ Warning\n+C ObjC C++ ObjC++ CPP(warn_trigraphs) Var(cpp_warn_trigraphs) Init(2) Warning LangEnabledBy(C ObjC C++ ObjC++,Wall)\n Warn if trigraphs are encountered that might affect the meaning of the program\n \n Wundeclared-selector\n ObjC ObjC++ Var(warn_undeclared_selector) Warning\n Warn about @selector()s without previously declared methods\n \n Wundef\n-C ObjC C++ ObjC++ Warning\n+C ObjC C++ ObjC++ CPP(warn_undef) Var(cpp_warn_undef) Warning\n Warn if an undefined macro is used in an #if directive\n \n Wuninitialized"}, {"sha": "c1ac8c9967d4088baac7cfbd274ab92b5db71360", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b5d104e944fd473032ab9c6ea588cdb0a02065/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b5d104e944fd473032ab9c6ea588cdb0a02065/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=81b5d104e944fd473032ab9c6ea588cdb0a02065", "patch": "@@ -1,3 +1,10 @@\n+2014-08-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\t* directives.c (check_eol_1): New.\n+\t(check_eol_endif_labels): New.\n+\t(check_eol): Call check_eol_1.\n+\t(do_else,do_endif): Call check_eol_endif_labels.\n+\n 2014-08-29  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n \n \t* macro.c (warn_of_redefinition): Suppress warnings for builtins"}, {"sha": "173e609d1e07ccac92cf32466f06d6a71d7f64d5", "filename": "libcpp/directives.c", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/81b5d104e944fd473032ab9c6ea588cdb0a02065/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/81b5d104e944fd473032ab9c6ea588cdb0a02065/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=81b5d104e944fd473032ab9c6ea588cdb0a02065", "patch": "@@ -213,16 +213,33 @@ skip_rest_of_line (cpp_reader *pfile)\n       ;\n }\n \n-/* Ensure there are no stray tokens at the end of a directive.  If\n-   EXPAND is true, tokens macro-expanding to nothing are allowed.  */\n+/* Helper function for check_oel.  */\n+\n static void\n-check_eol (cpp_reader *pfile, bool expand)\n+check_eol_1 (cpp_reader *pfile, bool expand, int reason)\n {\n   if (! SEEN_EOL () && (expand\n \t\t\t? cpp_get_token (pfile)\n \t\t\t: _cpp_lex_token (pfile))->type != CPP_EOF)\n-    cpp_error (pfile, CPP_DL_PEDWARN, \"extra tokens at end of #%s directive\",\n-\t       pfile->directive->name);\n+    cpp_pedwarning (pfile, reason, \"extra tokens at end of #%s directive\",\n+\t\t    pfile->directive->name);\n+}\n+\n+/* Variant of check_eol used for Wendif-labels warnings.  */\n+\n+static void\n+check_eol_endif_labels (cpp_reader *pfile)\n+{\n+  check_eol_1 (pfile, false, CPP_W_ENDIF_LABELS);\n+}\n+\n+/* Ensure there are no stray tokens at the end of a directive.  If\n+   EXPAND is true, tokens macro-expanding to nothing are allowed.  */\n+\n+static void\n+check_eol (cpp_reader *pfile, bool expand)\n+{\n+  check_eol_1 (pfile, expand, CPP_W_NONE);\n }\n \n /* Ensure there are no stray tokens other than comments at the end of\n@@ -1990,7 +2007,7 @@ do_else (cpp_reader *pfile)\n \n       /* Only check EOL if was not originally skipping.  */\n       if (!ifs->was_skipping && CPP_OPTION (pfile, warn_endif_labels))\n-\tcheck_eol (pfile, false);\n+\tcheck_eol_endif_labels (pfile);\n     }\n }\n \n@@ -2051,7 +2068,7 @@ do_endif (cpp_reader *pfile)\n     {\n       /* Only check EOL if was not originally skipping.  */\n       if (!ifs->was_skipping && CPP_OPTION (pfile, warn_endif_labels))\n-\tcheck_eol (pfile, false);\n+\tcheck_eol_endif_labels (pfile);\n \n       /* If potential control macro, we go back outside again.  */\n       if (ifs->next == 0 && ifs->mi_cmacro)"}]}