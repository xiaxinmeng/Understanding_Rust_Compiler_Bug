{"sha": "fcbb6018abaf04d30e2cf6fff2eb35115412cdd5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmNiYjYwMThhYmFmMDRkMzBlMmNmNmZmZjJlYjM1MTE1NDEyY2RkNQ==", "commit": {"author": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-11-13T18:56:01Z"}, "committer": {"name": "Andrew MacLeod", "email": "amacleod@redhat.com", "date": "2020-11-13T18:59:44Z"}, "message": "Re: Fix gimple_expr_code?\n\nhave gimple_expr_code return the correct code for GIMPLE_ASSIGN.\nuse gassign and gcond in gimple_range_handler.\n\n\t* gimple-range.h (gimple_range_handler): Cast to gimple stmt\n\tkinds before asking for code and type.\n\t* gimple.h (gimple_expr_code): Call gassign and gcond routines\n\tto get their expr_code.", "tree": {"sha": "c727a4cb985b90cfcb860d5e8a09f54615a1bd45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c727a4cb985b90cfcb860d5e8a09f54615a1bd45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fcbb6018abaf04d30e2cf6fff2eb35115412cdd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcbb6018abaf04d30e2cf6fff2eb35115412cdd5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fcbb6018abaf04d30e2cf6fff2eb35115412cdd5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fcbb6018abaf04d30e2cf6fff2eb35115412cdd5/comments", "author": null, "committer": null, "parents": [{"sha": "84096498a7bd788599d4a7ca63543fc7c297645e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84096498a7bd788599d4a7ca63543fc7c297645e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84096498a7bd788599d4a7ca63543fc7c297645e"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "92bb5305c18df12b9065184cbefc39f560059881", "filename": "gcc/gimple-range.h", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcbb6018abaf04d30e2cf6fff2eb35115412cdd5/gcc%2Fgimple-range.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcbb6018abaf04d30e2cf6fff2eb35115412cdd5/gcc%2Fgimple-range.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-range.h?ref=fcbb6018abaf04d30e2cf6fff2eb35115412cdd5", "patch": "@@ -97,12 +97,12 @@ extern bool gimple_range_calc_op2 (irange &r, const gimple *s,\n static inline range_operator *\n gimple_range_handler (const gimple *s)\n {\n-  if (gimple_code (s) == GIMPLE_ASSIGN)\n-    return range_op_handler (gimple_assign_rhs_code (s),\n-\t\t\t     TREE_TYPE (gimple_assign_lhs (s)));\n-  if (gimple_code (s) == GIMPLE_COND)\n-    return range_op_handler (gimple_cond_code (s),\n-\t\t\t     TREE_TYPE (gimple_cond_lhs (s)));\n+  if (const gassign *ass = dyn_cast<const gassign *> (s))\n+    return range_op_handler (gimple_assign_rhs_code (ass),\n+\t\t\t     TREE_TYPE (gimple_assign_lhs (ass)));\n+  if (const gcond *cond = dyn_cast<const gcond *> (s))\n+    return range_op_handler (gimple_cond_code (cond),\n+\t\t\t     TREE_TYPE (gimple_cond_lhs (cond)));\n   return NULL;\n }\n "}, {"sha": "b935ad4f7614d6e4b78c6e2f8322b338551ed635", "filename": "gcc/gimple.h", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fcbb6018abaf04d30e2cf6fff2eb35115412cdd5/gcc%2Fgimple.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fcbb6018abaf04d30e2cf6fff2eb35115412cdd5/gcc%2Fgimple.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.h?ref=fcbb6018abaf04d30e2cf6fff2eb35115412cdd5", "patch": "@@ -2229,26 +2229,6 @@ gimple_set_modified (gimple *s, bool modifiedp)\n }\n \n \n-/* Return the tree code for the expression computed by STMT.  This is\n-   only valid for GIMPLE_COND, GIMPLE_CALL and GIMPLE_ASSIGN.  For\n-   GIMPLE_CALL, return CALL_EXPR as the expression code for\n-   consistency.  This is useful when the caller needs to deal with the\n-   three kinds of computation that GIMPLE supports.  */\n-\n-static inline enum tree_code\n-gimple_expr_code (const gimple *stmt)\n-{\n-  enum gimple_code code = gimple_code (stmt);\n-  if (code == GIMPLE_ASSIGN || code == GIMPLE_COND)\n-    return (enum tree_code) stmt->subcode;\n-  else\n-    {\n-      gcc_gimple_checking_assert (code == GIMPLE_CALL);\n-      return CALL_EXPR;\n-    }\n-}\n-\n-\n /* Return true if statement STMT contains volatile operands.  */\n \n static inline bool\n@@ -3793,6 +3773,28 @@ gimple_cond_set_condition (gcond *stmt, enum tree_code code, tree lhs,\n   gimple_cond_set_rhs (stmt, rhs);\n }\n \n+\n+/* Return the tree code for the expression computed by STMT.  This is\n+   only valid for GIMPLE_COND, GIMPLE_CALL and GIMPLE_ASSIGN.  For\n+   GIMPLE_CALL, return CALL_EXPR as the expression code for\n+   consistency.  This is useful when the caller needs to deal with the\n+   three kinds of computation that GIMPLE supports.  */\n+\n+static inline enum tree_code\n+gimple_expr_code (const gimple *stmt)\n+{\n+  if (const gassign *ass = dyn_cast<const gassign *> (stmt))\n+    return gimple_assign_rhs_code (ass);\n+  if (const gcond *cond = dyn_cast<const gcond *> (stmt))\n+    return gimple_cond_code (cond);\n+  else\n+    {\n+      gcc_gimple_checking_assert (gimple_code (stmt) == GIMPLE_CALL);\n+      return CALL_EXPR;\n+    }\n+}\n+\n+\n /* Return the LABEL_DECL node used by GIMPLE_LABEL statement GS.  */\n \n static inline tree"}]}