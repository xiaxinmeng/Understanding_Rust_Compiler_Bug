{"sha": "bb93f35da1612940266f5d159b6cc5a3e54fca14", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmI5M2YzNWRhMTYxMjk0MDI2NmY1ZDE1OWI2Y2M1YTNlNTRmY2ExNA==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2015-01-16T15:02:35Z"}, "committer": {"name": "Jonathan Wakely", "email": "redi@gcc.gnu.org", "date": "2015-01-16T15:02:35Z"}, "message": "acinclude.m4: Fix typo in comment.\n\n\t* acinclude.m4: Fix typo in comment.\n\t* configure: Regenerate.\n\t* include/bits/codecvt.h (codecvt<char16_t, char, mbstate_t>,\n\tcodecvt<char16_t, char, mbstate_t>): Declare specializations.\n\t* include/bits/locale_facets.h: Reserve space for new specializations.\n\t* src/c++11/Makefile.am: Add codecvt.cc.\n\t* src/c++11/Makefile.in: Regenerate.\n\t* src/c++11/codecvt.cc: New.\n\t* src/c++98/Makefile.am: Compile locale_init.cc and localename.cc\n\twith -std=gnu++11.\n\t* src/c++98/Makefile.in: Regenerate.\n\t* src/c++98/locale_init.cc: Initialize new codecvt specializations.\n\t* src/c++98/localename.cc: Likewise.\n\t* config/abi/pre/gnu.ver: Exports for new codecvt specializations.\n\t* testsuite/22_locale/codecvt/utf8.cc: New.\n\t* testsuite/22_locale/locale/cons/unicode.cc: Check that new\n\tspecializations are installed in locale objects.\n\nFrom-SVN: r219747", "tree": {"sha": "35c55b7f313c8b575890bc6c5ff53f4a265d3008", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/35c55b7f313c8b575890bc6c5ff53f4a265d3008"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bb93f35da1612940266f5d159b6cc5a3e54fca14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb93f35da1612940266f5d159b6cc5a3e54fca14", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bb93f35da1612940266f5d159b6cc5a3e54fca14", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bb93f35da1612940266f5d159b6cc5a3e54fca14/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16ab99ba1834991733483794d00f9c507017f6a3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/16ab99ba1834991733483794d00f9c507017f6a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/16ab99ba1834991733483794d00f9c507017f6a3"}], "stats": {"total": 769, "additions": 757, "deletions": 12}, "files": [{"sha": "7e68c450e6ba7c3509491390847f3f598b1ca537", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -1,3 +1,23 @@\n+2015-01-16  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* acinclude.m4: Fix typo in comment.\n+\t* configure: Regenerate.\n+\t* include/bits/codecvt.h (codecvt<char16_t, char, mbstate_t>,\n+\tcodecvt<char16_t, char, mbstate_t>): Declare specializations.\n+\t* include/bits/locale_facets.h: Reserve space for new specializations.\n+\t* src/c++11/Makefile.am: Add codecvt.cc.\n+\t* src/c++11/Makefile.in: Regenerate.\n+\t* src/c++11/codecvt.cc: New.\n+\t* src/c++98/Makefile.am: Compile locale_init.cc and localename.cc\n+\twith -std=gnu++11.\n+\t* src/c++98/Makefile.in: Regenerate.\n+\t* src/c++98/locale_init.cc: Initialize new codecvt specializations.\n+\t* src/c++98/localename.cc: Likewise.\n+\t* config/abi/pre/gnu.ver: Exports for new codecvt specializations.\n+\t* testsuite/22_locale/codecvt/utf8.cc: New.\n+\t* testsuite/22_locale/locale/cons/unicode.cc: Check that new\n+\tspecializations are installed in locale objects.\n+\n 2015-01-16  Torvald Riegel  <triegel@redhat.com>\n \n \t* include/std/shared_mutex (shared_timed_mutex): Add POSIX-based"}, {"sha": "74e8eaffe0a5efcb3e8898b5f6200d35ae95c928", "filename": "libstdc++-v3/acinclude.m4", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Facinclude.m4", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Facinclude.m4", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Facinclude.m4?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -1777,7 +1777,7 @@ AC_DEFUN([GLIBCXX_CHECK_C99_TR1], [\n \t      <tr1/cinttypes> in namespace std::tr1.])\n   fi\n \n-  # Check for the existence of whcar_t <inttypes.h> functions (NB: doesn't\n+  # Check for the existence of wchar_t <inttypes.h> functions (NB: doesn't\n   # make sense if the glibcxx_cv_c99_stdint_tr1 check fails, per C99, 7.8/1).\n   ac_c99_inttypes_wchar_t_tr1=no;\n   if test x\"$glibcxx_cv_c99_stdint_tr1\" = x\"yes\"; then"}, {"sha": "83f4e8c9c6fb370ab664ea6bd0a8a78e206bd8b3", "filename": "libstdc++-v3/config/abi/pre/gnu.ver", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fabi%2Fpre%2Fgnu.ver?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -1759,6 +1759,11 @@ GLIBCXX_3.4.21 {\n     _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE3getES3_S3_RSt8ios_baseRSt12_Ios_IostateP2tmPK[cw]SC_;\n     _ZNKSt8time_getI[cw]St19istreambuf_iteratorI[cw]St11char_traitsI[cw]EEE6do_getES3_S3_RSt8ios_baseRSt12_Ios_IostateP2tmcc;\n \n+    # codecvt<char16_t, char, mbstate_t>, codecvt<char32_t, char, mbstate_t>\n+    _ZNKSt7codecvtID[is]c11__mbstate_t*;\n+    _ZNSt7codecvtID[is]c11__mbstate_t*;\n+    _ZT[ISV]St7codecvtID[is]c11__mbstate_tE;\n+\n } GLIBCXX_3.4.20;\n \n "}, {"sha": "7bd1ede852effd065e722b9fc7d9c6c24b038b34", "filename": "libstdc++-v3/configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fconfigure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fconfigure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfigure?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -19216,7 +19216,7 @@ $as_echo \"#define _GLIBCXX_USE_C99_INTTYPES_TR1 1\" >>confdefs.h\n \n   fi\n \n-  # Check for the existence of whcar_t <inttypes.h> functions (NB: doesn't\n+  # Check for the existence of wchar_t <inttypes.h> functions (NB: doesn't\n   # make sense if the glibcxx_cv_c99_stdint_tr1 check fails, per C99, 7.8/1).\n   ac_c99_inttypes_wchar_t_tr1=no;\n   if test x\"$glibcxx_cv_c99_stdint_tr1\" = x\"yes\"; then"}, {"sha": "a6e59b5128f9595c8f2228387988a1b496206df1", "filename": "libstdc++-v3/include/bits/codecvt.h", "status": "modified", "additions": 123, "deletions": 1, "changes": 124, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fcodecvt.h?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -393,7 +393,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n   };\n \n #ifdef _GLIBCXX_USE_WCHAR_T\n-  /// class codecvt<wchar_t, char, mbstate_t> specialization.\n+  /** @brief  Class codecvt<wchar_t, char, mbstate_t> specialization.\n+   *\n+   *  Converts between narrow and wide characters in the native character set\n+   */\n   template<>\n     class codecvt<wchar_t, char, mbstate_t>\n     : public __codecvt_abstract_base<wchar_t, char, mbstate_t>\n@@ -455,6 +458,125 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     };\n #endif //_GLIBCXX_USE_WCHAR_T\n \n+#if __cplusplus >= 201103L\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  /** @brief  Class codecvt<char16_t, char, mbstate_t> specialization.\n+   *\n+   *  Converts between UTF-16 and UTF-8.\n+   */\n+  template<>\n+    class codecvt<char16_t, char, mbstate_t>\n+    : public __codecvt_abstract_base<char16_t, char, mbstate_t>\n+    {\n+    public:\n+      // Types:\n+      typedef char16_t\t\t\tintern_type;\n+      typedef char\t\t\textern_type;\n+      typedef mbstate_t\t\t\tstate_type;\n+\n+    public:\n+      static locale::id\t\t\tid;\n+\n+      explicit\n+      codecvt(size_t __refs = 0)\n+      : __codecvt_abstract_base<char16_t, char, mbstate_t>(__refs) { }\n+\n+    protected:\n+      virtual\n+      ~codecvt();\n+\n+      virtual result\n+      do_out(state_type& __state, const intern_type* __from,\n+\t     const intern_type* __from_end, const intern_type*& __from_next,\n+\t     extern_type* __to, extern_type* __to_end,\n+\t     extern_type*& __to_next) const;\n+\n+      virtual result\n+      do_unshift(state_type& __state,\n+\t\t extern_type* __to, extern_type* __to_end,\n+\t\t extern_type*& __to_next) const;\n+\n+      virtual result\n+      do_in(state_type& __state,\n+\t     const extern_type* __from, const extern_type* __from_end,\n+\t     const extern_type*& __from_next,\n+\t     intern_type* __to, intern_type* __to_end,\n+\t     intern_type*& __to_next) const;\n+\n+      virtual\n+      int do_encoding() const throw();\n+\n+      virtual\n+      bool do_always_noconv() const throw();\n+\n+      virtual\n+      int do_length(state_type&, const extern_type* __from,\n+\t\t    const extern_type* __end, size_t __max) const;\n+\n+      virtual int\n+      do_max_length() const throw();\n+    };\n+\n+  /** @brief  Class codecvt<char32_t, char, mbstate_t> specialization.\n+   *\n+   *  Converts between UTF-32 and UTF-8.\n+   */\n+  template<>\n+    class codecvt<char32_t, char, mbstate_t>\n+    : public __codecvt_abstract_base<char32_t, char, mbstate_t>\n+    {\n+    public:\n+      // Types:\n+      typedef char32_t\t\t\tintern_type;\n+      typedef char\t\t\textern_type;\n+      typedef mbstate_t\t\t\tstate_type;\n+\n+    public:\n+      static locale::id\t\t\tid;\n+\n+      explicit\n+      codecvt(size_t __refs = 0)\n+      : __codecvt_abstract_base<char32_t, char, mbstate_t>(__refs) { }\n+\n+    protected:\n+      virtual\n+      ~codecvt();\n+\n+      virtual result\n+      do_out(state_type& __state, const intern_type* __from,\n+\t     const intern_type* __from_end, const intern_type*& __from_next,\n+\t     extern_type* __to, extern_type* __to_end,\n+\t     extern_type*& __to_next) const;\n+\n+      virtual result\n+      do_unshift(state_type& __state,\n+\t\t extern_type* __to, extern_type* __to_end,\n+\t\t extern_type*& __to_next) const;\n+\n+      virtual result\n+      do_in(state_type& __state,\n+\t     const extern_type* __from, const extern_type* __from_end,\n+\t     const extern_type*& __from_next,\n+\t     intern_type* __to, intern_type* __to_end,\n+\t     intern_type*& __to_next) const;\n+\n+      virtual\n+      int do_encoding() const throw();\n+\n+      virtual\n+      bool do_always_noconv() const throw();\n+\n+      virtual\n+      int do_length(state_type&, const extern_type* __from,\n+\t\t    const extern_type* __end, size_t __max) const;\n+\n+      virtual int\n+      do_max_length() const throw();\n+    };\n+\n+#endif // _GLIBCXX_USE_C99_STDINT_TR1\n+#endif // C++11\n+\n   /// class codecvt_byname [22.2.1.6].\n   template<typename _InternT, typename _ExternT, typename _StateT>\n     class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>"}, {"sha": "77932a5060b71018897aeabd43f86c9e0fcac0ed", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -58,6 +58,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #else\n # define  _GLIBCXX_NUM_FACETS 14\n # define  _GLIBCXX_NUM_CXX11_FACETS 8\n+#endif\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+# define _GLIBCXX_NUM_UNICODE_FACETS 2\n+#else\n+# define _GLIBCXX_NUM_UNICODE_FACETS 0\n #endif\n \n   // Convert string to numeric value of type _Tp and store results."}, {"sha": "b57e552647eff7b3ccd97a8e2d1dfff482b5f6a2", "filename": "libstdc++-v3/src/c++11/Makefile.am", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.am?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -53,6 +53,7 @@ endif\n \n sources = \\\n \tchrono.cc \\\n+\tcodecvt.cc \\\n \tcondition_variable.cc \\\n \tcow-stdexcept.cc \\\n \tctype.cc \\"}, {"sha": "00a5c25293b674ef85ecfc0d4f215bea73675481", "filename": "libstdc++-v3/src/c++11/Makefile.in", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2FMakefile.in?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -72,12 +72,12 @@ libc__11convenience_la_LIBADD =\n @ENABLE_DUAL_ABI_TRUE@\tcxx11-ios_failure.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcxx11-shim_facets.lo cxx11-stdexcept.lo\n am__objects_2 = ctype_configure_char.lo ctype_members.lo\n-am__objects_3 = chrono.lo condition_variable.lo cow-stdexcept.lo \\\n-\tctype.lo debug.lo functexcept.lo functional.lo future.lo \\\n-\thash_c++0x.lo hashtable_c++0x.lo ios.lo limits.lo mutex.lo \\\n-\tplaceholders.lo random.lo regex.lo shared_ptr.lo \\\n-\tsnprintf_lite.lo system_error.lo thread.lo $(am__objects_1) \\\n-\t$(am__objects_2)\n+am__objects_3 = chrono.lo codecvt.lo condition_variable.lo \\\n+\tcow-stdexcept.lo ctype.lo debug.lo functexcept.lo \\\n+\tfunctional.lo future.lo hash_c++0x.lo hashtable_c++0x.lo \\\n+\tios.lo limits.lo mutex.lo placeholders.lo random.lo regex.lo \\\n+\tshared_ptr.lo snprintf_lite.lo system_error.lo thread.lo \\\n+\t$(am__objects_1) $(am__objects_2)\n @ENABLE_DUAL_ABI_TRUE@am__objects_4 = cow-fstream-inst.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-sstream-inst.lo cow-string-inst.lo \\\n @ENABLE_DUAL_ABI_TRUE@\tcow-wstring-inst.lo cxx11-locale-inst.lo \\\n@@ -344,6 +344,7 @@ host_sources = \\\n \n sources = \\\n \tchrono.cc \\\n+\tcodecvt.cc \\\n \tcondition_variable.cc \\\n \tcow-stdexcept.cc \\\n \tctype.cc \\"}, {"sha": "fdd49720384af47610c2d061ee80b020aa63a9ed", "filename": "libstdc++-v3/src/c++11/codecvt.cc", "status": "added", "additions": 461, "deletions": 0, "changes": 461, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B11%2Fcodecvt.cc?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -0,0 +1,461 @@\n+// Locale support (codecvt) -*- C++ -*-\n+\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// Under Section 7 of GPL version 3, you are granted additional\n+// permissions described in the GCC Runtime Library Exception, version\n+// 3.1, as published by the Free Software Foundation.\n+\n+// You should have received a copy of the GNU General Public License and\n+// a copy of the GCC Runtime Library Exception along with this program;\n+// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <bits/locale_classes.h>\n+#include <bits/codecvt.h>\n+#include <bits/stl_algobase.h>\t// std::max\n+#include <cstring>\t\t// std::memcpy, std::memcmp\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+namespace std _GLIBCXX_VISIBILITY(default)\n+{\n+_GLIBCXX_BEGIN_NAMESPACE_VERSION\n+\n+namespace\n+{\n+  // Largest code point that fits in a single UTF-16 code unit.\n+  const char32_t max_single_utf16_unit = 0xFFFF;\n+  const char32_t max_code_point = 0x10FFFF;\n+\n+  template<typename Elem>\n+    struct range\n+    {\n+      Elem* next;\n+      Elem* end;\n+\n+      Elem operator*() const { return *next; }\n+\n+      range& operator++() { ++next; return *this; }\n+\n+      size_t size() const { return end - next; }\n+    };\n+\n+  char32_t\n+  read_utf8_code_point(range<const char>& from, unsigned long maxcode)\n+  {\n+    size_t avail = from.size();\n+    if (avail == 0)\n+      return -1;\n+    unsigned char c1 = from.next[0];\n+    // https://en.wikipedia.org/wiki/UTF-8#Sample_code\n+    if (c1 < 0x80)\n+    {\n+      ++from.next;\n+      return c1;\n+    }\n+    else if (c1 < 0xC2) // continuation or overlong 2-byte sequence\n+      return -1;\n+    else if (c1 < 0xE0) // 2-byte sequence\n+    {\n+      if (avail < 2)\n+\treturn -1;\n+      unsigned char c2 = from.next[1];\n+      if ((c2 & 0xC0) != 0x80)\n+\treturn -1;\n+      char32_t c = (c1 << 6) + c2 - 0x3080;\n+      if (c > maxcode)\n+\treturn -1;\n+      from.next += 2;\n+      return c;\n+    }\n+    else if (c1 < 0xF0) // 3-byte sequence\n+    {\n+      if (avail < 3)\n+\treturn -1;\n+      unsigned char c2 = from.next[1];\n+      if ((c2 & 0xC0) != 0x80)\n+\treturn -1;\n+      if (c1 == 0xE0 && c2 < 0xA0) // overlong\n+\treturn -1;\n+      unsigned char c3 = from.next[2];\n+      if ((c3 & 0xC0) != 0x80)\n+\treturn -1;\n+      char32_t c = (c1 << 12) + (c2 << 6) + c3 - 0xE2080;\n+      if (c > maxcode)\n+\treturn -1;\n+      from.next += 3;\n+      return c;\n+    }\n+    else if (c1 < 0xF5) // 4-byte sequence\n+    {\n+      if (avail < 4)\n+\treturn -1;\n+      unsigned char c2 = from.next[1];\n+      if ((c2 & 0xC0) != 0x80)\n+\treturn -1;\n+      if (c1 == 0xF0 && c2 < 0x90) // overlong\n+\treturn -1;\n+      if (c1 == 0xF4 && c2 >= 0x90) // > U+10FFFF\n+      return -1;\n+      unsigned char c3 = from.next[2];\n+      if ((c3 & 0xC0) != 0x80)\n+\treturn -1;\n+      unsigned char c4 = from.next[3];\n+      if ((c4 & 0xC0) != 0x80)\n+\treturn -1;\n+      char32_t c = (c1 << 18) + (c2 << 12) + (c3 << 6) + c4 - 0x3C82080;\n+      if (c > maxcode)\n+\treturn -1;\n+      from.next += 4;\n+      return c;\n+    }\n+    else // > U+10FFFF\n+      return -1;\n+  }\n+\n+  bool\n+  write_utf8_code_point(range<char>& to, char32_t code_point)\n+  {\n+    if (code_point < 0x80)\n+      {\n+\tif (to.size() < 1)\n+\t  return false;\n+\t*to.next++ = code_point;\n+      }\n+    else if (code_point <= 0x7FF)\n+      {\n+\tif (to.size() < 2)\n+\t  return false;\n+\t*to.next++ = (code_point >> 6) + 0xC0;\n+\t*to.next++ = (code_point & 0x3F) + 0x80;\n+      }\n+    else if (code_point <= 0xFFFF)\n+      {\n+\tif (to.size() < 3)\n+\t  return false;\n+\t*to.next++ = (code_point >> 12) + 0xE0;\n+\t*to.next++ = ((code_point >> 6) & 0x3F) + 0x80;\n+\t*to.next++ = (code_point & 0x3F) + 0x80;\n+      }\n+    else if (code_point <= 0x10FFFF)\n+      {\n+\tif (to.size() < 4)\n+\t  return false;\n+\t*to.next++ = (code_point >> 18) + 0xF0;\n+\t*to.next++ = ((code_point >> 12) & 0x3F) + 0x80;\n+\t*to.next++ = ((code_point >> 6) & 0x3F) + 0x80;\n+\t*to.next++ = (code_point & 0x3F) + 0x80;\n+      }\n+    else\n+      return false;\n+    return true;\n+  }\n+\n+  bool\n+  write_utf16_code_point(range<char16_t>& to, char32_t codepoint)\n+  {\n+    if (codepoint < max_single_utf16_unit)\n+      {\n+\tif (to.size() > 0)\n+\t  {\n+\t    *to.next = codepoint;\n+\t    ++to.next;\n+\t    return true;\n+\t  }\n+      }\n+    else if (to.size() > 1)\n+      {\n+\t// Algorithm from http://www.unicode.org/faq/utf_bom.html#utf16-4\n+\tconst char32_t LEAD_OFFSET = 0xD800 - (0x10000 >> 10);\n+\tconst char32_t SURROGATE_OFFSET = 0x10000 - (0xD800 << 10) - 0xDC00;\n+\tchar16_t lead = LEAD_OFFSET + (codepoint >> 10);\n+\tchar16_t trail = 0xDC00 + (codepoint & 0x3FF);\n+\tchar32_t utf16bytes = (lead << 10) + trail + SURROGATE_OFFSET;\n+\n+\tto.next[0] = utf16bytes >> 16;\n+\tto.next[1] = utf16bytes & 0xFFFF;\n+\tto.next += 2;\n+\treturn true;\n+      }\n+    return false;\n+  }\n+\n+  // utf8 -> ucs4\n+  codecvt_base::result\n+  ucs4_in(range<const char>& from, range<char32_t>& to,\n+          unsigned long maxcode = max_code_point)\n+  {\n+    while (from.size() && to.size())\n+      {\n+\tconst char32_t codepoint = read_utf8_code_point(from, maxcode);\n+\tif (codepoint == char32_t(-1) || codepoint > maxcode)\n+\t  return codecvt_base::error;\n+\t*to.next++ = codepoint;\n+      }\n+    return from.size() ? codecvt_base::partial : codecvt_base::ok;\n+  }\n+\n+  // ucs4 -> utf8\n+  codecvt_base::result\n+  ucs4_out(range<const char32_t>& from, range<char>& to,\n+           unsigned long maxcode = max_code_point)\n+  {\n+    while (from.size())\n+      {\n+\tconst char32_t c = from.next[0];\n+\tif (c > maxcode)\n+\t  return codecvt_base::error;\n+\tif (!write_utf8_code_point(to, c))\n+\t  return codecvt_base::partial;\n+\t++from.next;\n+      }\n+    return codecvt_base::ok;\n+  }\n+\n+  // utf8 -> utf16\n+  codecvt_base::result\n+  utf16_in(range<const char>& from, range<char16_t>& to,\n+           unsigned long maxcode = max_code_point)\n+  {\n+    while (from.size() && to.size())\n+      {\n+\tconst char* first = from.next;\n+\tif ((unsigned char)*first >= 0xF0 && to.size() < 2)\n+\t  return codecvt_base::partial;\n+\tconst char32_t codepoint = read_utf8_code_point(from, maxcode);\n+\tif (codepoint == char32_t(-1) || codepoint > maxcode)\n+\t  return codecvt_base::error;\n+\tif (!write_utf16_code_point(to, codepoint))\n+\t  {\n+\t    from.next = first;\n+\t    return codecvt_base::partial;\n+\t  }\n+      }\n+    return codecvt_base::ok;\n+  }\n+\n+  // utf16 -> utf8\n+  codecvt_base::result\n+  utf16_out(range<const char16_t>& from, range<char>& to,\n+            unsigned long maxcode = max_code_point)\n+  {\n+    while (from.size())\n+      {\n+\tchar32_t c = from.next[0];\n+\tint inc = 1;\n+\tif (c >= 0xD800 && c < 0xDBFF) // start of surrogate pair\n+\t  {\n+\t    if (from.size() < 2)\n+\t      return codecvt_base::ok; // stop converting at this point\n+\n+\t    const char32_t c2 = from.next[1];\n+\t    if (c2 >= 0xDC00 && c2 <= 0xDFFF)\n+\t      {\n+\t\tinc = 2;\n+\t\tc = (c << 10) + c2 - 0x35FDC00;\n+\t      }\n+\t    else\n+\t      return codecvt_base::error;\n+\t  }\n+\tif (c > maxcode)\n+\t  return codecvt_base::error;\n+\tif (!write_utf8_code_point(to, c))\n+\t  return codecvt_base::partial;\n+\tfrom.next += inc;\n+      }\n+    return codecvt_base::ok;\n+  }\n+\n+  // return pos such that [begin,pos) is valid UTF-16 string no longer than max\n+  int\n+  utf16_len(const char* begin, const char* end, size_t max,\n+            char32_t maxcode = max_code_point)\n+  {\n+    range<const char> from{ begin, end };\n+    size_t count = 0;\n+    while (count+1 < max)\n+      {\n+\tchar32_t c = read_utf8_code_point(from, maxcode);\n+\tif (c == char32_t(-1))\n+\t  break;\n+\telse if (c > max_single_utf16_unit)\n+\t  ++count;\n+\t++count;\n+      }\n+    if (count+1 == max) // take one more character if it fits in a single unit\n+      read_utf8_code_point(from, std::max(max_single_utf16_unit, maxcode));\n+    return from.next - begin;\n+  }\n+\n+  // return pos such that [begin,pos) is valid UCS-4 string no longer than max\n+  int\n+  ucs4_len(const char* begin, const char* end, size_t max,\n+            char32_t maxcode = max_code_point)\n+  {\n+    range<const char> from{ begin, end };\n+    size_t count = 0;\n+    while (count < max)\n+      {\n+\tchar32_t c = read_utf8_code_point(from, maxcode);\n+\tif (c == char32_t(-1))\n+\t  break;\n+\t++count;\n+      }\n+    return from.next - begin;\n+  }\n+}\n+\n+// Define members of codecvt<char16_t, char, mbstate_t> specialization.\n+// Converts from UTF-8 to UTF-16.\n+\n+locale::id codecvt<char16_t, char, mbstate_t>::id;\n+\n+codecvt<char16_t, char, mbstate_t>::~codecvt() { }\n+\n+codecvt_base::result\n+codecvt<char16_t, char, mbstate_t>::\n+do_out(state_type&,\n+       const intern_type* __from,\n+       const intern_type* __from_end, const intern_type*& __from_next,\n+       extern_type* __to, extern_type* __to_end,\n+       extern_type*& __to_next) const\n+{\n+  range<const char16_t> from{ __from, __from_end };\n+  range<char> to{ __to, __to_end };\n+  auto res = utf16_out(from, to);\n+  __from_next = from.next;\n+  __to_next = to.next;\n+  return res;\n+}\n+\n+codecvt_base::result\n+codecvt<char16_t, char, mbstate_t>::\n+do_unshift(state_type&, extern_type* __to, extern_type*,\n+\t   extern_type*& __to_next) const\n+{\n+  __to_next = __to;\n+  return noconv; // we don't use mbstate_t for the unicode facets\n+}\n+\n+codecvt_base::result\n+codecvt<char16_t, char, mbstate_t>::\n+do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n+      const extern_type*& __from_next,\n+      intern_type* __to, intern_type* __to_end,\n+      intern_type*& __to_next) const\n+{\n+  range<const char> from{ __from, __from_end };\n+  range<char16_t> to{ __to, __to_end };\n+  auto res = utf16_in(from, to);\n+  __from_next = from.next;\n+  __to_next = to.next;\n+  return res;\n+}\n+\n+int\n+codecvt<char16_t, char, mbstate_t>::do_encoding() const throw()\n+{ return 0; }\n+\n+bool\n+codecvt<char16_t, char, mbstate_t>::do_always_noconv() const throw()\n+{ return false; }\n+\n+int\n+codecvt<char16_t, char, mbstate_t>::\n+do_length(state_type&, const extern_type* __from,\n+\t  const extern_type* __end, size_t __max) const\n+{\n+  return utf16_len(__from, __end, __max);\n+}\n+\n+int\n+codecvt<char16_t, char, mbstate_t>::do_max_length() const throw()\n+{\n+  // Any valid UTF-8 sequence of 3 bytes fits in a single 16-bit code unit,\n+  // whereas 4 byte sequences require two 16-bit code units.\n+  return 3;\n+}\n+\n+// Define members of codecvt<char32_t, char, mbstate_t> specialization.\n+// Converts from UTF-8 to UTF-32 (aka UCS-4).\n+\n+locale::id codecvt<char32_t, char, mbstate_t>::id;\n+\n+codecvt<char32_t, char, mbstate_t>::~codecvt() { }\n+\n+codecvt_base::result\n+codecvt<char32_t, char, mbstate_t>::\n+do_out(state_type&, const intern_type* __from, const intern_type* __from_end,\n+       const intern_type*& __from_next,\n+       extern_type* __to, extern_type* __to_end,\n+       extern_type*& __to_next) const\n+{\n+  range<const char32_t> from{ __from, __from_end };\n+  range<char> to{ __to, __to_end };\n+  auto res = ucs4_out(from, to);\n+  __from_next = from.next;\n+  __to_next = to.next;\n+  return res;\n+}\n+\n+codecvt_base::result\n+codecvt<char32_t, char, mbstate_t>::\n+do_unshift(state_type&, extern_type* __to, extern_type*,\n+\t   extern_type*& __to_next) const\n+{\n+  __to_next = __to;\n+  return noconv;\n+}\n+\n+codecvt_base::result\n+codecvt<char32_t, char, mbstate_t>::\n+do_in(state_type&, const extern_type* __from, const extern_type* __from_end,\n+      const extern_type*& __from_next,\n+      intern_type* __to, intern_type* __to_end,\n+      intern_type*& __to_next) const\n+{\n+  range<const char> from{ __from, __from_end };\n+  range<char32_t> to{ __to, __to_end };\n+  auto res = ucs4_in(from, to);\n+  __from_next = from.next;\n+  __to_next = to.next;\n+  return res;\n+}\n+\n+int\n+codecvt<char32_t, char, mbstate_t>::do_encoding() const throw()\n+{ return 0; }\n+\n+bool\n+codecvt<char32_t, char, mbstate_t>::do_always_noconv() const throw()\n+{ return false; }\n+\n+int\n+codecvt<char32_t, char, mbstate_t>::\n+do_length(state_type&, const extern_type* __from,\n+\t  const extern_type* __end, size_t __max) const\n+{\n+  return ucs4_len(__from, __end, __max);\n+}\n+\n+int\n+codecvt<char32_t, char, mbstate_t>::do_max_length() const throw()\n+{ return 4; }\n+\n+inline template class __codecvt_abstract_base<char16_t, char, mbstate_t>;\n+inline template class __codecvt_abstract_base<char32_t, char, mbstate_t>;\n+\n+_GLIBCXX_END_NAMESPACE_VERSION\n+}\n+#endif // _GLIBCXX_USE_C99_STDINT_TR1"}, {"sha": "e348dfb120587f2a12781ca4a88cf1e709ba1124", "filename": "libstdc++-v3/src/c++98/Makefile.am", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.am?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -176,6 +176,16 @@ numeric_members_cow.o: numeric_members_cow.cc\n \t$(CXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n endif\n \n+# XXX TODO move locale_init.cc and localename.cc to src/c++11\n+locale_init.lo: locale_init.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+locale_init.o: locale_init.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+localename.lo: localename.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+localename.o: localename.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+\n # Use special rules for the deprecated source files so that they find\n # deprecated include files.\n GLIBCXX_INCLUDE_DIR=$(glibcxx_builddir)/include"}, {"sha": "3c69791bb66f956588f05dc1c2d422282160560b", "filename": "libstdc++-v3/src/c++98/Makefile.in", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2FMakefile.in?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -764,6 +764,16 @@ vpath % $(top_srcdir)/src/c++98\n @ENABLE_DUAL_ABI_TRUE@\t$(LTCXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n @ENABLE_DUAL_ABI_TRUE@numeric_members_cow.o: numeric_members_cow.cc\n @ENABLE_DUAL_ABI_TRUE@\t$(CXXCOMPILE) $(GLIBCXX_ABI_FLAGS) -fimplicit-templates -c $<\n+\n+# XXX TODO move locale_init.cc and localename.cc to src/c++11\n+locale_init.lo: locale_init.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+locale_init.o: locale_init.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+localename.lo: localename.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n+localename.o: localename.cc\n+\t$(LTCXXCOMPILE) -std=gnu++11 -c $<\n strstream.lo: strstream.cc\n \t$(LTCXXCOMPILE) -I$(GLIBCXX_INCLUDE_DIR)/backward -Wno-deprecated -c $<\n strstream.o: strstream.cc"}, {"sha": "0a95b9ff4b54edbd91e1e84db835134880c4e983", "filename": "libstdc++-v3/src/c++98/locale_init.cc", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocale_init.cc?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -57,7 +57,7 @@ _GLIBCXX_LOC_ID(_ZNSt8messagesIwE2idE);\n \n namespace \n {\n-  const int num_facets = _GLIBCXX_NUM_FACETS\n+  const int num_facets = _GLIBCXX_NUM_FACETS + _GLIBCXX_NUM_UNICODE_FACETS\n     + (_GLIBCXX_USE_DUAL_ABI ? _GLIBCXX_NUM_CXX11_FACETS : 0);\n \n   __gnu_cxx::__mutex&\n@@ -201,6 +201,16 @@ namespace\n   fake_messages_w messages_w;\n #endif\n \n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+  typedef char fake_codecvt_c16[sizeof(codecvt<char16_t, char, mbstate_t>)]\n+  __attribute__ ((aligned(__alignof__(codecvt<char16_t, char, mbstate_t>))));\n+  fake_codecvt_c16 codecvt_c16;\n+\n+  typedef char fake_codecvt_c32[sizeof(codecvt<char32_t, char, mbstate_t>)]\n+  __attribute__ ((aligned(__alignof__(codecvt<char32_t, char, mbstate_t>))));\n+  fake_codecvt_c32 codecvt_c32;\n+#endif\n+\n   // Storage for \"C\" locale caches.\n   typedef char fake_num_cache_c[sizeof(std::__numpunct_cache<char>)]\n   __attribute__ ((aligned(__alignof__(std::__numpunct_cache<char>))));\n@@ -318,6 +328,10 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n #ifdef _GLIBCXX_USE_WCHAR_T\n     &std::ctype<wchar_t>::id,\n     &codecvt<wchar_t, char, mbstate_t>::id,\n+#endif\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+    &codecvt<char16_t, char, mbstate_t>::id,\n+    &codecvt<char32_t, char, mbstate_t>::id,\n #endif\n     0\n   };\n@@ -522,6 +536,11 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     _M_init_facet(new (&messages_w) std::messages<wchar_t>(1));\n #endif\n \n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+    _M_init_facet(new (&codecvt_c16) codecvt<char16_t, char, mbstate_t>(1));\n+    _M_init_facet(new (&codecvt_c32) codecvt<char32_t, char, mbstate_t>(1));\n+#endif\n+\n #if _GLIBCXX_USE_DUAL_ABI\n     facet* extra[] = { __npc, __mpcf, __mpct\n # ifdef  _GLIBCXX_USE_WCHAR_T"}, {"sha": "2884beebfe152ebead770b57be7c764b6299dacf", "filename": "libstdc++-v3/src/c++98/localename.cc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fc%2B%2B98%2Flocalename.cc?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -171,7 +171,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       }\n   }\n \n-const int num_facets = _GLIBCXX_NUM_FACETS\n+const int num_facets = _GLIBCXX_NUM_FACETS + _GLIBCXX_NUM_UNICODE_FACETS\n   + (_GLIBCXX_USE_DUAL_ABI ? _GLIBCXX_NUM_CXX11_FACETS : 0);\n \n   // Construct named _Impl.\n@@ -267,7 +267,12 @@ const int num_facets = _GLIBCXX_NUM_FACETS\n \t_M_init_facet(new time_get<wchar_t>);\n \t_M_init_facet(new time_put<wchar_t>);\n \t_M_init_facet(new std::messages<wchar_t>(__cloc, __s));\n-#endif\t  \n+#endif\n+\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+        _M_init_facet(new codecvt<char16_t, char, mbstate_t>);\n+        _M_init_facet(new codecvt<char32_t, char, mbstate_t>);\n+#endif\n \n #if _GLIBCXX_USE_DUAL_ABI\n         _M_init_extra(&__cloc, &__clocm, __s, __smon);"}, {"sha": "987233a130634a1b0cfb4ee0d6effd80810d166a", "filename": "libstdc++-v3/testsuite/22_locale/codecvt/utf8.cc", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Futf8.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Futf8.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcodecvt%2Futf8.cc?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -0,0 +1,76 @@\n+// Copyright (C) 2015 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-require-cstdint \"\" }\n+// { dg-options \"-std=gnu++11\" }\n+\n+#include <locale>\n+#include <iterator>\n+#include <string>\n+#include <testsuite_hooks.h>\n+\n+const char expected[] = u8\"\u00a3\u00a5\u20ac\";\n+const std::size_t expected_len = std::char_traits<char>::length(expected);\n+\n+template<typename C>\n+void test(const C* from)\n+{\n+  auto len = std::char_traits<C>::length(from);\n+  std::mbstate_t state{};\n+  char buf[16] = { };\n+  using test_type = std::codecvt<C, char, std::mbstate_t>;\n+  const test_type& cvt = std::use_facet<test_type>(std::locale::classic());\n+  auto from_end = from + len;\n+  auto from_next = from;\n+  auto buf_end = std::end(buf);\n+  auto buf_next = buf;\n+  auto res = cvt.out(state, from, from_end, from_next, buf, buf_end, buf_next);\n+  VERIFY( res == std::codecvt_base::ok );\n+  VERIFY( from_next == from_end );\n+  VERIFY( (buf_next - buf) == expected_len );\n+  VERIFY( 0 == std::char_traits<char>::compare(buf, expected, expected_len) );\n+\n+  C buf2[16];\n+  auto exp_end = expected + expected_len;\n+  auto exp_next = expected;\n+  auto buf2_end = std::end(buf2);\n+  auto buf2_next = buf2;\n+  res = cvt.in(state, expected, exp_end, exp_next, buf2, buf2_end, buf2_next);\n+  VERIFY( res == std::codecvt_base::ok );\n+  VERIFY( exp_next == exp_end );\n+  VERIFY( (buf2_next - buf2) == len );\n+  VERIFY( 0 == std::char_traits<C>::compare(buf2, from, len) );\n+}\n+\n+void\n+test01()\n+{\n+  test(u\"\u00a3\u00a5\u20ac\");\n+}\n+\n+void\n+test02()\n+{\n+  test(U\"\u00a3\u00a5\u20ac\");\n+}\n+\n+int\n+main()\n+{\n+  test01();\n+  test02();\n+}"}, {"sha": "33b5a8a7d4bac22884b7cc9c5d14f25e57ae753a", "filename": "libstdc++-v3/testsuite/22_locale/locale/cons/unicode.cc", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2Funicode.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bb93f35da1612940266f5d159b6cc5a3e54fca14/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2Funicode.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Flocale%2Fcons%2Funicode.cc?ref=bb93f35da1612940266f5d159b6cc5a3e54fca14", "patch": "@@ -1,4 +1,5 @@\n // { dg-require-iconv \"ISO-8859-1\" }\n+// { dg-options \"-std=gnu++11\" }\n \n // Copyright (C) 2006-2015 Free Software Foundation, Inc.\n //\n@@ -32,6 +33,11 @@ typedef std::codecvt<char, char, std::mbstate_t> \t      c_codecvt;\n typedef std::codecvt<wchar_t, char, std::mbstate_t>\t      w_codecvt;\n #endif\n \n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+typedef std::codecvt<char16_t, char, std::mbstate_t>\t      u16_codecvt;\n+typedef std::codecvt<char32_t, char, std::mbstate_t>\t      u32_codecvt;\n+#endif\n+\n class gnu_facet: public std::locale::facet\n {\n public:\n@@ -60,6 +66,10 @@ void test01()\n       VERIFY( has_facet<c_codecvt>(loc13) );\n #ifdef _GLIBCXX_USE_WCHAR_T\n       VERIFY( has_facet<w_codecvt>(loc13) );\n+#endif\n+#ifdef _GLIBCXX_USE_C99_STDINT_TR1\n+      VERIFY( has_facet<u16_codecvt>(loc13) );\n+      VERIFY( has_facet<u32_codecvt>(loc13) );\n #endif\n       VERIFY( has_facet<unicode_codecvt>(loc13) );\n     }"}]}