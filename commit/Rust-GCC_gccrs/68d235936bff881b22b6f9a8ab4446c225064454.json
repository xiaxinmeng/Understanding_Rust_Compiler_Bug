{"sha": "68d235936bff881b22b6f9a8ab4446c225064454", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjhkMjM1OTM2YmZmODgxYjIyYjZmOWE4YWI0NDQ2YzIyNTA2NDQ1NA==", "commit": {"author": {"name": "Andreas Schwab", "email": "schwab@suse.de", "date": "2018-08-15T06:57:45Z"}, "committer": {"name": "Andreas Schwab", "email": "schwab@gcc.gnu.org", "date": "2018-08-15T06:57:45Z"}, "message": "backport: ffi.c (ffi_call_go, [...]): New functions.\n\nBackport of RISC-V support for libffi go closures\n* src/riscv/ffi.c (ffi_call_go, ffi_prep_go_closure): New\nfunctions.\n(ffi_call_int): Renamed from ffi_call.\n(ffi_call_asm, ffi_closure_inner): Adjust interface.\n* src/riscv/ffitarget.h (FFI_GO_CLOSURES): Define.\n* src/riscv/sysv.S (ffi_go_closure_asm): New function.\n(ffi_closure_asm, ffi_call_asm): Update for adjusted interfaces.\n\nFrom-SVN: r263550", "tree": {"sha": "b9b8282cb3f81076d059c08749f5d1559a80d1b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b9b8282cb3f81076d059c08749f5d1559a80d1b4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/68d235936bff881b22b6f9a8ab4446c225064454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d235936bff881b22b6f9a8ab4446c225064454", "html_url": "https://github.com/Rust-GCC/gccrs/commit/68d235936bff881b22b6f9a8ab4446c225064454", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/68d235936bff881b22b6f9a8ab4446c225064454/comments", "author": {"login": "andreas-schwab", "id": 2175493, "node_id": "MDQ6VXNlcjIxNzU0OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/2175493?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andreas-schwab", "html_url": "https://github.com/andreas-schwab", "followers_url": "https://api.github.com/users/andreas-schwab/followers", "following_url": "https://api.github.com/users/andreas-schwab/following{/other_user}", "gists_url": "https://api.github.com/users/andreas-schwab/gists{/gist_id}", "starred_url": "https://api.github.com/users/andreas-schwab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andreas-schwab/subscriptions", "organizations_url": "https://api.github.com/users/andreas-schwab/orgs", "repos_url": "https://api.github.com/users/andreas-schwab/repos", "events_url": "https://api.github.com/users/andreas-schwab/events{/privacy}", "received_events_url": "https://api.github.com/users/andreas-schwab/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "107192f73ec949170ac5c65e52cf85c93be2f07a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/107192f73ec949170ac5c65e52cf85c93be2f07a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/107192f73ec949170ac5c65e52cf85c93be2f07a"}], "stats": {"total": 153, "additions": 140, "deletions": 13}, "files": [{"sha": "d63d1cee47c28b2f75ca4d6ae5eca1349a616fc3", "filename": "libffi/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d235936bff881b22b6f9a8ab4446c225064454/libffi%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d235936bff881b22b6f9a8ab4446c225064454/libffi%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2FChangeLog?ref=68d235936bff881b22b6f9a8ab4446c225064454", "patch": "@@ -1,3 +1,14 @@\n+2018-08-15  Andreas Schwab  <schwab@suse.de>\n+\n+\tBackport of RISC-V support for libffi go closures\n+\t* src/riscv/ffi.c (ffi_call_go, ffi_prep_go_closure): New\n+\tfunctions.\n+\t(ffi_call_int): Renamed from ffi_call.\n+\t(ffi_call_asm, ffi_closure_inner): Adjust interface.\n+\t* src/riscv/ffitarget.h (FFI_GO_CLOSURES): Define.\n+\t* src/riscv/sysv.S (ffi_go_closure_asm): New function.\n+\t(ffi_closure_asm, ffi_call_asm): Update for adjusted interfaces.\n+\n 2018-05-08  Andreas Schwab  <schwab@suse.de>\n \n \tBackport of RISC-V support for libffi"}, {"sha": "8c5a86050607194b5a29bc237d77cd488547efec", "filename": "libffi/src/riscv/ffi.c", "status": "modified", "additions": 42, "deletions": 6, "changes": 48, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d235936bff881b22b6f9a8ab4446c225064454/libffi%2Fsrc%2Friscv%2Fffi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d235936bff881b22b6f9a8ab4446c225064454/libffi%2Fsrc%2Friscv%2Fffi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Friscv%2Fffi.c?ref=68d235936bff881b22b6f9a8ab4446c225064454", "patch": "@@ -324,9 +324,12 @@ ffi_status ffi_prep_cif_machdep_var(ffi_cif *cif, unsigned int nfixedargs, unsig\n }\n \n /* Low level routine for calling functions */\n-extern void ffi_call_asm(void *stack, struct call_context *regs, void (*fn)(void)) FFI_HIDDEN;\n+extern void ffi_call_asm (void *stack, struct call_context *regs,\n+\t\t\t  void (*fn) (void), void *closure) FFI_HIDDEN;\n \n-void ffi_call(ffi_cif *cif, void (*fn)(void), void *rvalue, void **avalue)\n+static void\n+ffi_call_int (ffi_cif *cif, void (*fn) (void), void *rvalue, void **avalue,\n+\t      void *closure)\n {\n     /* this is a conservative estimate, assuming a complex return value and\n        that all remaining arguments are long long / __int128 */\n@@ -366,13 +369,26 @@ void ffi_call(ffi_cif *cif, void (*fn)(void), void *rvalue, void **avalue)\n     for (i = 0; i < cif->nargs; i++)\n         marshal(&cb, cif->arg_types[i], i >= cif->riscv_nfixedargs, avalue[i]);\n \n-    ffi_call_asm((void*)alloc_base, cb.aregs, fn);\n+    ffi_call_asm ((void *) alloc_base, cb.aregs, fn, closure);\n \n     cb.used_float = cb.used_integer = 0;\n     if (!return_by_ref && rvalue)\n         unmarshal(&cb, cif->rtype, 0, rvalue);\n }\n \n+void\n+ffi_call (ffi_cif *cif, void (*fn) (void), void *rvalue, void **avalue)\n+{\n+  ffi_call_int(cif, fn, rvalue, avalue, NULL);\n+}\n+\n+void\n+ffi_call_go (ffi_cif *cif, void (*fn) (void), void *rvalue,\n+\t     void **avalue, void *closure)\n+{\n+  ffi_call_int(cif, fn, rvalue, avalue, closure);\n+}\n+\n extern void ffi_closure_asm(void) FFI_HIDDEN;\n \n ffi_status ffi_prep_closure_loc(ffi_closure *closure, ffi_cif *cif, void (*fun)(ffi_cif*,void*,void**,void*), void *user_data, void *codeloc)\n@@ -406,11 +422,31 @@ ffi_status ffi_prep_closure_loc(ffi_closure *closure, ffi_cif *cif, void (*fun)(\n     return FFI_OK;\n }\n \n+extern void ffi_go_closure_asm (void) FFI_HIDDEN;\n+\n+ffi_status\n+ffi_prep_go_closure (ffi_go_closure *closure, ffi_cif *cif,\n+\t\t     void (*fun) (ffi_cif *, void *, void **, void *))\n+{\n+  if (cif->abi <= FFI_FIRST_ABI || cif->abi >= FFI_LAST_ABI)\n+    return FFI_BAD_ABI;\n+\n+  closure->tramp = (void *) ffi_go_closure_asm;\n+  closure->cif = cif;\n+  closure->fun = fun;\n+\n+  return FFI_OK;\n+}\n+\n /* Called by the assembly code with aregs pointing to saved argument registers\n    and stack pointing to the stacked arguments.  Return values passed in\n    registers will be reloaded from aregs. */\n-void FFI_HIDDEN ffi_closure_inner(size_t *stack, call_context *aregs, ffi_closure *closure) {\n-    ffi_cif *cif = closure->cif;\n+void FFI_HIDDEN\n+ffi_closure_inner (ffi_cif *cif,\n+\t\t   void (*fun) (ffi_cif *, void *, void **, void *),\n+\t\t   void *user_data,\n+\t\t   size_t *stack, call_context *aregs)\n+{\n     void **avalue = alloca(cif->nargs * sizeof(void*));\n     /* storage for arguments which will be copied by unmarshal().  We could\n        theoretically avoid the copies in many cases and use at most 128 bytes\n@@ -436,7 +472,7 @@ void FFI_HIDDEN ffi_closure_inner(size_t *stack, call_context *aregs, ffi_closur\n         avalue[i] = unmarshal(&cb, cif->arg_types[i],\n             i >= cif->riscv_nfixedargs, astorage + i*MAXCOPYARG);\n \n-    (closure->fun)(cif, rvalue, avalue, closure->user_data);\n+    fun (cif, rvalue, avalue, user_data);\n \n     if (!return_by_ref && cif->rtype->type != FFI_TYPE_VOID) {\n         cb.used_integer = cb.used_float = 0;"}, {"sha": "75e6462f5bbccd18e399c98350f6281ea9b081a8", "filename": "libffi/src/riscv/ffitarget.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d235936bff881b22b6f9a8ab4446c225064454/libffi%2Fsrc%2Friscv%2Fffitarget.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d235936bff881b22b6f9a8ab4446c225064454/libffi%2Fsrc%2Friscv%2Fffitarget.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Friscv%2Fffitarget.h?ref=68d235936bff881b22b6f9a8ab4446c225064454", "patch": "@@ -59,6 +59,7 @@ typedef enum ffi_abi {\n /* ---- Definitions for closures ----------------------------------------- */\n \n #define FFI_CLOSURES 1\n+#define FFI_GO_CLOSURES 1\n #define FFI_TRAMPOLINE_SIZE 24\n #define FFI_NATIVE_RAW_API 0\n #define FFI_EXTRA_CIF_FIELDS unsigned riscv_nfixedargs; unsigned riscv_unused;"}, {"sha": "522d0b0055004b1f440be2baf979a54309313aaa", "filename": "libffi/src/riscv/sysv.S", "status": "modified", "additions": 86, "deletions": 7, "changes": 93, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/68d235936bff881b22b6f9a8ab4446c225064454/libffi%2Fsrc%2Friscv%2Fsysv.S", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/68d235936bff881b22b6f9a8ab4446c225064454/libffi%2Fsrc%2Friscv%2Fsysv.S", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libffi%2Fsrc%2Friscv%2Fsysv.S?ref=68d235936bff881b22b6f9a8ab4446c225064454", "patch": "@@ -67,8 +67,8 @@\n       intreg pad[rv32 ? 2 : 0];\n       intreg save_fp, save_ra;\n   }\n-  void ffi_call_asm(size_t *stackargs, struct call_context *regargs,\n-      void (*fn)(void));\n+  void ffi_call_asm (size_t *stackargs, struct call_context *regargs,\n+                     void (*fn) (void), void *closure);\n */\n \n #define FRAME_LEN (8 * FLTS + 8 * PTRS + 16)\n@@ -98,6 +98,7 @@ ffi_call_asm:\n \n     # Load arguments\n     mv      t1, a2\n+    mv      t2, a3\n \n #if FLTS\n     FLARG   fa0, -FRAME_LEN+0*FLTS(fp)\n@@ -145,8 +146,10 @@ ffi_call_asm:\n \n /*\n   ffi_closure_asm. Expects address of the passed-in ffi_closure in t1.\n-  void ffi_closure_inner(size_t *stackargs, struct call_context *regargs,\n-      ffi_closure *closure);\n+  void ffi_closure_inner (ffi_cif *cif,\n+\t\t          void (*fun) (ffi_cif *, void *, void **, void *),\n+\t\t          void *user_data,\n+\t\t          size_t *stackargs, struct call_context *regargs)\n */\n \n     .globl ffi_closure_asm\n@@ -187,9 +190,11 @@ ffi_closure_asm:\n     SARG    a7, 8*FLTS+7*PTRS(sp)\n \n     /* enter C */\n-    addi    a0, sp, FRAME_LEN\n-    mv      a1, sp\n-    mv      a2, t1\n+    LARG    a0, FFI_TRAMPOLINE_SIZE+0*PTRS(t1)\n+    LARG    a1, FFI_TRAMPOLINE_SIZE+1*PTRS(t1)\n+    LARG    a2, FFI_TRAMPOLINE_SIZE+2*PTRS(t1)\n+    addi    a3, sp, FRAME_LEN\n+    mv      a4, sp\n \n     call    ffi_closure_inner\n \n@@ -212,3 +217,77 @@ ffi_closure_asm:\n     ret\n     .cfi_endproc\n     .size ffi_closure_asm, .-ffi_closure_asm\n+\n+/*\n+  ffi_go_closure_asm.  Expects address of the passed-in ffi_go_closure in t2.\n+  void ffi_closure_inner (ffi_cif *cif,\n+\t\t          void (*fun) (ffi_cif *, void *, void **, void *),\n+\t\t          void *user_data,\n+\t\t          size_t *stackargs, struct call_context *regargs)\n+*/\n+\n+    .globl ffi_go_closure_asm\n+    .hidden ffi_go_closure_asm\n+    .type ffi_go_closure_asm, @function\n+ffi_go_closure_asm:\n+    .cfi_startproc\n+\n+    addi    sp,  sp, -FRAME_LEN\n+    .cfi_def_cfa_offset FRAME_LEN\n+\n+    /* make a frame */\n+    SARG    fp, FRAME_LEN - 2*PTRS(sp)\n+    .cfi_offset 8, -2*PTRS\n+    SARG    ra, FRAME_LEN - 1*PTRS(sp)\n+    .cfi_offset 1, -1*PTRS\n+    addi    fp, sp, FRAME_LEN\n+\n+    /* save arguments */\n+#if FLTS\n+    FSARG   fa0, 0*FLTS(sp)\n+    FSARG   fa1, 1*FLTS(sp)\n+    FSARG   fa2, 2*FLTS(sp)\n+    FSARG   fa3, 3*FLTS(sp)\n+    FSARG   fa4, 4*FLTS(sp)\n+    FSARG   fa5, 5*FLTS(sp)\n+    FSARG   fa6, 6*FLTS(sp)\n+    FSARG   fa7, 7*FLTS(sp)\n+#endif\n+\n+    SARG    a0, 8*FLTS+0*PTRS(sp)\n+    SARG    a1, 8*FLTS+1*PTRS(sp)\n+    SARG    a2, 8*FLTS+2*PTRS(sp)\n+    SARG    a3, 8*FLTS+3*PTRS(sp)\n+    SARG    a4, 8*FLTS+4*PTRS(sp)\n+    SARG    a5, 8*FLTS+5*PTRS(sp)\n+    SARG    a6, 8*FLTS+6*PTRS(sp)\n+    SARG    a7, 8*FLTS+7*PTRS(sp)\n+\n+    /* enter C */\n+    LARG    a0, 1*PTRS(t2)\n+    LARG    a1, 2*PTRS(t2)\n+    mv      a2, t2\n+    addi    a3, sp, FRAME_LEN\n+    mv      a4, sp\n+\n+    call    ffi_closure_inner\n+\n+    /* return values */\n+#if FLTS\n+    FLARG   fa0, 0*FLTS(sp)\n+    FLARG   fa1, 1*FLTS(sp)\n+#endif\n+\n+    LARG    a0, 8*FLTS+0*PTRS(sp)\n+    LARG    a1, 8*FLTS+1*PTRS(sp)\n+\n+    /* restore and return */\n+    LARG    ra, FRAME_LEN-1*PTRS(sp)\n+    .cfi_restore 1\n+    LARG    fp, FRAME_LEN-2*PTRS(sp)\n+    .cfi_restore 8\n+    addi    sp, sp, FRAME_LEN\n+    .cfi_def_cfa_offset 0\n+    ret\n+    .cfi_endproc\n+    .size ffi_go_closure_asm, .-ffi_go_closure_asm"}]}