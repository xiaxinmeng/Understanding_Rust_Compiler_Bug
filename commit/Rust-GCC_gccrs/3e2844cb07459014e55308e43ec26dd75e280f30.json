{"sha": "3e2844cb07459014e55308e43ec26dd75e280f30", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2UyODQ0Y2IwNzQ1OTAxNGU1NTMwOGU0M2VjMjZkZDc1ZTI4MGYzMA==", "commit": {"author": {"name": "James E Wilson", "email": "wilson@specifixinc.com", "date": "2005-07-26T02:56:44Z"}, "committer": {"name": "Jim Wilson", "email": "wilson@gcc.gnu.org", "date": "2005-07-26T02:56:44Z"}, "message": "Better debug info for inlined functions.\n\n* dwarf2out.c (add_call_src_coords_attributes): New.\n(gen_inlined_subroutine_die): Call it.\n(maybe_emit_file, init_file_table): Add comments.\n(prune_unused_types_walk_attribs): Pass DW_AT_call_file through\nmaybe_emit_file.\n* tree-inline.c (remap_block): Copy BLOCK_SOURCE_LOCATION.\n(expand_call_inline): Set BLOCK_SOURCE_LOCATION.\n* tree.h (BLOCK_SOURCE_LOCATION): New.\n(struct tree_block): New field locus.\n\nFrom-SVN: r102379", "tree": {"sha": "21c55286c5bc2b5af118cad52bc71fa46c46a004", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/21c55286c5bc2b5af118cad52bc71fa46c46a004"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3e2844cb07459014e55308e43ec26dd75e280f30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2844cb07459014e55308e43ec26dd75e280f30", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3e2844cb07459014e55308e43ec26dd75e280f30", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3e2844cb07459014e55308e43ec26dd75e280f30/comments", "author": null, "committer": null, "parents": [{"sha": "dd4f41c3775d2d554849efffc0cd5ef7e806d4a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd4f41c3775d2d554849efffc0cd5ef7e806d4a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd4f41c3775d2d554849efffc0cd5ef7e806d4a1"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "b3bf9d29f5b8c286b8a5294e13b101d2a66c9fec", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2844cb07459014e55308e43ec26dd75e280f30/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2844cb07459014e55308e43ec26dd75e280f30/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3e2844cb07459014e55308e43ec26dd75e280f30", "patch": "@@ -1,3 +1,15 @@\n+2005-07-25  James E Wilson  <wilson@specifixinc.com>\n+\n+\t* dwarf2out.c (add_call_src_coords_attributes): New.\n+\t(gen_inlined_subroutine_die): Call it.\n+\t(maybe_emit_file, init_file_table): Add comments.\n+\t(prune_unused_types_walk_attribs): Pass DW_AT_call_file through\n+\tmaybe_emit_file.\n+\t* tree-inline.c (remap_block): Copy BLOCK_SOURCE_LOCATION.\n+\t(expand_call_inline): Set BLOCK_SOURCE_LOCATION.\n+\t* tree.h (BLOCK_SOURCE_LOCATION): New.\n+\t(struct tree_block): New field locus.\n+\n 2005-07-26  Andreas Schwab  <schwab@suse.de>\n \n \tPR rtl-optimization/23043"}, {"sha": "970cbb5a82d8a0dd97f86d7ee3f1dd65228a4c5b", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2844cb07459014e55308e43ec26dd75e280f30/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2844cb07459014e55308e43ec26dd75e280f30/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=3e2844cb07459014e55308e43ec26dd75e280f30", "patch": "@@ -11757,6 +11757,20 @@ gen_label_die (tree decl, dw_die_ref context_die)\n     }\n }\n \n+/* A helper function for gen_inlined_subroutine_die.  Add source coordinate\n+   attributes to the DIE for a block STMT, to describe where the inlined\n+   function was called from.  This is similar to add_src_coords_attributes.  */\n+\n+static inline void\n+add_call_src_coords_attributes (tree stmt, dw_die_ref die)\n+{\n+  expanded_location s = expand_location (BLOCK_SOURCE_LOCATION (stmt));\n+  unsigned file_index = lookup_filename (s.file);\n+\n+  add_AT_unsigned (die, DW_AT_call_file, file_index);\n+  add_AT_unsigned (die, DW_AT_call_line, s.line);\n+}\n+\n /* A helper function for gen_lexical_block_die and gen_inlined_subroutine_die.\n    Add low_pc and high_pc attributes to the DIE for a block STMT.  */\n \n@@ -11824,6 +11838,7 @@ gen_inlined_subroutine_die (tree stmt, dw_die_ref context_die, int depth)\n \n       add_abstract_origin_attribute (subr_die, decl);\n       add_high_low_attributes (stmt, subr_die);\n+      add_call_src_coords_attributes (stmt, subr_die);\n \n       decls_for_scope (stmt, subr_die, depth);\n       current_function_has_inlines = 1;\n@@ -13247,6 +13262,12 @@ lookup_filename (const char *file_name)\n   return i;\n }\n \n+/* If the assembler will construct the file table, then translate the compiler\n+   internal file table number into the assembler file table number, and emit\n+   a .file directive if we haven't already emitted one yet.  The file table\n+   numbers are different because we prune debug info for unused variables and\n+   types, which may include filenames.  */\n+\n static int\n maybe_emit_file (int fileno)\n {\n@@ -13267,6 +13288,8 @@ maybe_emit_file (int fileno)\n     return fileno;\n }\n \n+/* Initialize the compiler internal file table.  */\n+\n static void\n init_file_table (void)\n {\n@@ -13644,7 +13667,7 @@ prune_unused_types_walk_attribs (dw_die_ref die)\n \t     Make sure that it will get emitted.  */\n \t  prune_unused_types_mark (a->dw_attr_val.v.val_die_ref.die, 1);\n \t}\n-      else if (a->dw_attr == DW_AT_decl_file)\n+      else if (a->dw_attr == DW_AT_decl_file || a->dw_attr == DW_AT_call_file)\n \t{\n \t  /* A reference to a file.  Make sure the file name is emitted.  */\n \t  a->dw_attr_val.v.val_unsigned ="}, {"sha": "21d8ac003ed196caf0ee1ed9a2f30e8fa7536ca2", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2844cb07459014e55308e43ec26dd75e280f30/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2844cb07459014e55308e43ec26dd75e280f30/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=3e2844cb07459014e55308e43ec26dd75e280f30", "patch": "@@ -421,6 +421,7 @@ remap_block (tree *block, inline_data *id)\n   new_block = make_node (BLOCK);\n   TREE_USED (new_block) = TREE_USED (old_block);\n   BLOCK_ABSTRACT_ORIGIN (new_block) = old_block;\n+  BLOCK_SOURCE_LOCATION (new_block) = BLOCK_SOURCE_LOCATION (old_block);\n   *block = new_block;\n \n   /* Remap its variables.  */\n@@ -2025,9 +2026,9 @@ expand_call_inline (basic_block bb, tree stmt, tree *tp, void *data)\n      statement expression is the return type of the function call.  */\n   id->block = make_node (BLOCK);\n   BLOCK_ABSTRACT_ORIGIN (id->block) = fn;\n+  BLOCK_SOURCE_LOCATION (id->block) = input_location;\n   add_lexical_block (TREE_BLOCK (stmt), id->block);\n \n-\n   /* Local declarations will be replaced by their equivalents in this\n      map.  */\n   st = id->decl_map;"}, {"sha": "cae0c8b12d62afe0a7cdde08a35561ec3bfcf085", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3e2844cb07459014e55308e43ec26dd75e280f30/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3e2844cb07459014e55308e43ec26dd75e280f30/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=3e2844cb07459014e55308e43ec26dd75e280f30", "patch": "@@ -1570,6 +1570,12 @@ struct varray_head_tag;\n #define BLOCK_FRAGMENT_ORIGIN(NODE) (BLOCK_CHECK (NODE)->block.fragment_origin)\n #define BLOCK_FRAGMENT_CHAIN(NODE) (BLOCK_CHECK (NODE)->block.fragment_chain)\n \n+/* For an inlined function, this gives the location where it was called\n+   from.  This is only set in the top level block, which corresponds to the\n+   inlined function scope.  This is used in the debug output routines.  */\n+\n+#define BLOCK_SOURCE_LOCATION(NODE) (BLOCK_CHECK (NODE)->block.locus)\n+\n struct tree_block GTY(())\n {\n   struct tree_common common;\n@@ -1584,6 +1590,7 @@ struct tree_block GTY(())\n   tree abstract_origin;\n   tree fragment_origin;\n   tree fragment_chain;\n+  location_t locus;\n };\n \f\n /* Define fields and accessors for nodes representing data types.  */"}]}