{"sha": "e81dd3810b095e922795b16de27af819ee190ba8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTgxZGQzODEwYjA5NWU5MjI3OTViMTZkZTI3YWY4MTllZTE5MGJhOA==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2002-03-03T15:40:44Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2002-03-03T15:40:44Z"}, "message": "1750a.h, [...] (BITS_PER_WORD): Delete.\n\n\t* 1750a.h, a29k.h, alpha.h, arc.h, arm.h, avr.h, c4x.h, clipper.h,\n\tconvex.h, cris.h, d30v.h, dsp16xx.h, elxsi.h, fr30.h, h8300.h,\n\ti370.h, i386.h, i860.h, i960.h, ia64.h, m32r.h, m68hc11.h, m68k.h,\n\tm88k.h, mcore.h, mips.h, mmix.h, mn10200.h, mn10300.h, ns32k.h,\n\tpa.h, pdp11.h, pj.h, romp.h, rs6000.h, s390.h, sh.h, sparc.h,\n\tstormy16.h, v850.h, vax.h, we32k.h, xtensa.h (BITS_PER_WORD):\n\tDelete.\n\t* defaults.h (BITS_PER_WORD): Define.\n\t* doc/tm.texi (BITS_PER_WORD): Document default value.\n\nFrom-SVN: r50257", "tree": {"sha": "8c8c00f2cfc7e8998e2c678955be93f982798c1e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8c8c00f2cfc7e8998e2c678955be93f982798c1e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e81dd3810b095e922795b16de27af819ee190ba8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81dd3810b095e922795b16de27af819ee190ba8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e81dd3810b095e922795b16de27af819ee190ba8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e81dd3810b095e922795b16de27af819ee190ba8/comments", "author": null, "committer": null, "parents": [{"sha": "9a571cfd9db11887adbf8917aa1641047bcfd012", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9a571cfd9db11887adbf8917aa1641047bcfd012", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9a571cfd9db11887adbf8917aa1641047bcfd012"}], "stats": {"total": 225, "additions": 18, "deletions": 207}, "files": [{"sha": "60c2a8d1e27c3bbaf0e46cfed81f2c8d43bb3043", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -1,5 +1,15 @@\n 2002-03-03  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n \n+\t* 1750a.h, a29k.h, alpha.h, arc.h, arm.h, avr.h, c4x.h, clipper.h,\n+\tconvex.h, cris.h, d30v.h, dsp16xx.h, elxsi.h, fr30.h, h8300.h,\n+\ti370.h, i386.h, i860.h, i960.h, ia64.h, m32r.h, m68hc11.h, m68k.h,\n+\tm88k.h, mcore.h, mips.h, mmix.h, mn10200.h, mn10300.h, ns32k.h,\n+\tpa.h, pdp11.h, pj.h, romp.h, rs6000.h, s390.h, sh.h, sparc.h,\n+\tstormy16.h, v850.h, vax.h, we32k.h, xtensa.h (BITS_PER_WORD):\n+\tDelete.\n+\t* defaults.h (BITS_PER_WORD): Define.\n+\t* doc/tm.texi (BITS_PER_WORD): Document default value.\t\n+\n \t* 1750a.h, avr.h, convex.h, d30v.h, dsp16xx.h, fr30.h, ia64.h,\n \tm68hc11.h, m88k.h, mips.h, pdp11.h, rs6000.h, sparc.c,\n \tstormy16.h, xtensa.h, vmsdbgout.c (CHAR_TYPE_SIZE): Delete."}, {"sha": "f4f6d519ee5d6a3369c1202573400e06c44388df", "filename": "gcc/config/1750a/1750a.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2F1750a%2F1750a.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2F1750a%2F1750a.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2F1750a%2F1750a.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -93,12 +93,6 @@ extern const char *const sectname[4];\n /* number of bits in an addressable storage unit */\n #define BITS_PER_UNIT        16\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD        16\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD       1\n "}, {"sha": "5292d8fd10c06baf0c58a43f3ae0c53854868784", "filename": "gcc/config/a29k/a29k.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fa29k%2Fa29k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fa29k%2Fa29k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fa29k%2Fa29k.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -165,12 +165,6 @@ extern int target_flags;\n    for them.  Might as well be consistent with bytes.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n "}, {"sha": "d783997bc45a6ed577b320e73fcb4e9be7fb85f4", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -474,12 +474,6 @@ extern const char *alpha_mlat_string;\t/* For -mmemory-latency= */\n    for them.  Might as well be consistent with bytes.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 64\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 8\n "}, {"sha": "d6c24afc86a0988bd530b18a10e6da25b46b32ae", "filename": "gcc/config/arc/arc.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Farc%2Farc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Farc%2Farc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -191,12 +191,6 @@ do {\t\t\t\t\\\n #define LIBGCC2_WORDS_BIG_ENDIAN 0\n #endif\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n "}, {"sha": "524bfbf465c78c1e938b602498868ec06ef70400", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -696,8 +696,6 @@ extern int arm_is_6_or_7;\n    This is always true, even when in little-endian mode.  */\n #define FLOAT_WORDS_BIG_ENDIAN 1\n \n-#define BITS_PER_WORD  32\n-\n #define UNITS_PER_WORD\t4\n \n #define POINTER_SIZE  32"}, {"sha": "d1d06e81fc84488dec430ad957fb9a7811fe5515", "filename": "gcc/config/avr/avr.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Favr%2Favr.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Favr%2Favr.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -126,10 +126,6 @@ extern int avr_enhanced_p;\n    numbered.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';  */\n-#define BITS_PER_WORD 8\n-\n #ifdef IN_LIBGCC2\n /* This is to get correct SI and DI modes in libgcc2.c (32 and 64 bits).  */\n #define UNITS_PER_WORD 4"}, {"sha": "f0695ea703ae63b0ec432cf7d230373ec42c221e", "filename": "gcc/config/c4x/c4x.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fc4x%2Fc4x.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fc4x%2Fc4x.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -339,7 +339,6 @@ extern const char *c4x_rpts_cycles_string, *c4x_cpu_version_string;\n    sizeof(int) = sizeof(long) = sizeof(float) = sizeof(double) = 1.  */\n \n #define BITS_PER_UNIT\t\t32\n-#define BITS_PER_WORD\t\t32\n #define UNITS_PER_WORD\t\t1\n #define POINTER_SIZE\t\t32\n #define PARM_BOUNDARY\t        32"}, {"sha": "6ae383db3a305d1ab8c948935a21dfc5cb628e49", "filename": "gcc/config/clipper/clipper.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fclipper%2Fclipper.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fclipper%2Fclipper.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fclipper%2Fclipper.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -69,12 +69,6 @@ extern int target_flags;\n \n #define WORDS_BIG_ENDIAN 0\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n "}, {"sha": "62dc416f1734348230b71900c4c8c1b13922856d", "filename": "gcc/config/convex/convex.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fconvex%2Fconvex.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fconvex%2Fconvex.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fconvex%2Fconvex.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -434,12 +434,6 @@ extern int target_flags;\n /* Define this if most significant word of a multiword number is numbered.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 64\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 8\n "}, {"sha": "c547a23675554ccd482a33e1e279ada179b202d7", "filename": "gcc/config/cris/cris.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fcris%2Fcris.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fcris%2Fcris.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fcris%2Fcris.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -475,8 +475,6 @@ extern int target_flags;\n    post-increment on DImode indirect.  */\n #define WORDS_BIG_ENDIAN 0\n \n-#define BITS_PER_WORD 32\n-\n #define UNITS_PER_WORD 4\n \n #define POINTER_SIZE 32"}, {"sha": "0e665600b22079abb12696b88d70550e431bc5f7", "filename": "gcc/config/d30v/d30v.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fd30v%2Fd30v.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fd30v%2Fd30v.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fd30v%2Fd30v.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -161,8 +161,6 @@ extern int target_flags;\n \n #define WORDS_BIG_ENDIAN 1\n \n-#define BITS_PER_WORD 32\n-\n #define UNITS_PER_WORD 4\n \n #define POINTER_SIZE 32"}, {"sha": "0feb5e8966e035c92271c8d40fe18dc9348e2147", "filename": "gcc/config/dsp16xx/dsp16xx.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdsp16xx%2Fdsp16xx.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -316,12 +316,6 @@ extern int target_flags;\n /* number of bits in an addressable storage unit */\n #define BITS_PER_UNIT 16\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 16\n-\n /* Maximum number of bits in a word.  */\n #define MAX_BITS_PER_WORD 16\n "}, {"sha": "b33afd9542f7bb49aec84d9c44ec217c0f855dfa", "filename": "gcc/config/elxsi/elxsi.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Felxsi%2Felxsi.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Felxsi%2Felxsi.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felxsi%2Felxsi.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -71,12 +71,6 @@ extern int target_flags;\n /* Define this if most significant word of a multiword number is numbered.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 64\n-\n #define INT_TYPE_SIZE 32\n \n #define LONG_TYPE_SIZE 32"}, {"sha": "4d04bc678c0e15d89e0dde60e5e7b31b991fccec", "filename": "gcc/config/fr30/fr30.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Ffr30%2Ffr30.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Ffr30%2Ffr30.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Ffr30%2Ffr30.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -83,8 +83,6 @@ extern int target_flags;\n \n #define WORDS_BIG_ENDIAN 1\n \n-#define BITS_PER_WORD \t32\n-\n #define UNITS_PER_WORD \t4\n \n #define POINTER_SIZE \t32"}, {"sha": "3a6fe8fcb3d598bc9de7702ba1bded1e900487d4", "filename": "gcc/config/h8300/h8300.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fh8300%2Fh8300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fh8300%2Fh8300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -199,11 +199,6 @@ extern int target_flags;\n    be consistent).  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD\t\t(TARGET_H8300H || TARGET_H8300S ? 32 : 16)\n #define MAX_BITS_PER_WORD\t32\n \n /* Width of a word, in units (bytes).  */"}, {"sha": "628a021dfd260a54e19cb3fe58bd0b2099507456", "filename": "gcc/config/i370/i370.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fi370%2Fi370.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fi370%2Fi370.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi370%2Fi370.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -86,10 +86,6 @@ extern int mvs_function_name_length;\n \n #define WORDS_BIG_ENDIAN 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.  */\n-\n-#define BITS_PER_WORD 32\n-\n /* Width of a word, in units (bytes).  */\n \n #define UNITS_PER_WORD 4"}, {"sha": "f5b8e2f6cc9ff977a84a43f1e6e5b71dfb448612", "filename": "gcc/config/i386/i386.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fi386%2Fi386.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fi386%2Fi386.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -721,12 +721,6 @@ extern int ix86_arch;\n /* Not true for 80386 */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 80386, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD (TARGET_64BIT ? 64 : 32)\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD (TARGET_64BIT ? 8 : 4)\n #define MIN_UNITS_PER_WORD 4"}, {"sha": "4bba584969026d4ea90155560532e0dea492ef40", "filename": "gcc/config/i860/i860.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fi860%2Fi860.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fi860%2Fi860.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi860%2Fi860.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -82,12 +82,6 @@ extern int target_flags;\n    justify the trouble of changing this assumption.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n "}, {"sha": "c1446a2db039e06e2c42ff59d8eca4c87ba9bfc8", "filename": "gcc/config/i960/i960.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fi960%2Fi960.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fi960%2Fi960.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi960%2Fi960.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -400,12 +400,6 @@ extern int target_flags;\n /* Bitfields cannot cross word boundaries.  */\n #define BITFIELD_NBYTES_LIMITED 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n "}, {"sha": "afa7bfd212d76122dce98ba36d75d9a7c7febf05", "filename": "gcc/config/ia64/ia64.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fia64%2Fia64.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fia64%2Fia64.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -244,8 +244,6 @@ extern const char *ia64_fixed_range_string;\n #define LIBGCC2_WORDS_BIG_ENDIAN 0\n #endif\n \n-#define BITS_PER_WORD 64\n-\n #define UNITS_PER_WORD 8\n \n #define POINTER_SIZE (TARGET_ILP32 ? 32 : 64)"}, {"sha": "22a2f99c80e10f7a862169ad057e4e493d51f9bf", "filename": "gcc/config/m32r/m32r.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fm32r%2Fm32r.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fm32r%2Fm32r.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -442,12 +442,6 @@ extern enum m32r_sdata m32r_sdata;\n    value will be set based on preprocessor defines.  */\n /*#define LIBGCC2_WORDS_BIG_ENDIAN 1*/\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n "}, {"sha": "067c2a3eb756aa943ad953347baf7a9dad233153", "filename": "gcc/config/m68hc11/m68hc11.h", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -241,11 +241,8 @@ extern const struct processor_costs *m68hc11_cost;\n /* Define this if most significant word of a multiword number is numbered.  */\n #define WORDS_BIG_ENDIAN \t1\n \n-/* Number of bits in a word */\n-#define BITS_PER_WORD\t\t16\n-\n /* Width of a word, in units (bytes).  */\n-#define UNITS_PER_WORD\t\t(BITS_PER_WORD/8)\n+#define UNITS_PER_WORD\t\t2\n \n /* Define if you don't want extended real, but do want to use the\n    software floating point emulator for REAL_ARITHMETIC and"}, {"sha": "a33528826df75ed50d36302f8fcd9d08ed6615e9", "filename": "gcc/config/m68k/m68k.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fm68k%2Fm68k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fm68k%2Fm68k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -321,12 +321,6 @@ extern int target_flags;\n    So let's be consistent.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n "}, {"sha": "8e82c5c8eaac8547ff6517b36d6895a8920eb9d7", "filename": "gcc/config/m88k/m88k.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fm88k%2Fm88k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fm88k%2Fm88k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm88k%2Fm88k.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -335,12 +335,6 @@ extern int flag_pic;\t\t\t\t/* -fpic */\n    instructions for them.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n "}, {"sha": "3da212eed06c7f9d8fec2462e90cc040724c0ae0", "filename": "gcc/config/mcore/mcore.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fmcore%2Fmcore.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fmcore%2Fmcore.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -247,11 +247,6 @@ extern const char * mcore_stack_increment_string;\n #define LIBGCC2_WORDS_BIG_ENDIAN 0\n #endif\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD  32\n #define MAX_BITS_PER_WORD 32\n \n /* Width of a word, in units (bytes).  */"}, {"sha": "f1e170de21674829e4c4ab1540949c8ee0154649", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -1569,11 +1569,6 @@ do {\t\t\t\t\t\t\t\\\n #define LIBGCC2_WORDS_BIG_ENDIAN 0\n #endif\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD (TARGET_64BIT ? 64 : 32)\n #define MAX_BITS_PER_WORD 64\n \n /* Width of a word, in units (bytes).  */"}, {"sha": "7d2c7f20d391ce22600b53eb9e51206123e44f49", "filename": "gcc/config/mmix/mmix.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fmmix%2Fmmix.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fmmix%2Fmmix.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -251,7 +251,6 @@ extern int target_flags;\n #define BYTES_BIG_ENDIAN 1\n #define WORDS_BIG_ENDIAN 1\n #define FLOAT_WORDS_BIG_ENDIAN 1\n-#define BITS_PER_WORD 64\n #define UNITS_PER_WORD 8\n #define POINTER_SIZE 64\n "}, {"sha": "5652041b8b65da4b590027196c86ee4c66e90e3b", "filename": "gcc/config/mn10200/mn10200.h", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fmn10200%2Fmn10200.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10200%2Fmn10200.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -81,16 +81,9 @@ extern int target_flags;\n    This is not true on the Matsushita MN10200.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.\n-\n-   This is a white lie.  Registers are really 24bits, but most operations\n+/* This is a white lie.  Registers are really 24bits, but most operations\n    only operate on 16 bits.   GCC chokes badly if we set this to a value\n    that is not a power of two.  */\n-#define BITS_PER_WORD\t\t16\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD\t\t2\n "}, {"sha": "71b73840fb7dcb81a9f82d189a8d0ec73e4bf78d", "filename": "gcc/config/mn10300/mn10300.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fmn10300%2Fmn10300.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmn10300%2Fmn10300.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -90,12 +90,6 @@ extern int target_flags;\n    This is not true on the Matsushita MN10300.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD\t\t32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD\t\t4\n "}, {"sha": "58878a289dec86685506ed6dc7b0f4f7867744b9", "filename": "gcc/config/ns32k/ns32k.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fns32k%2Fns32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fns32k%2Fns32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -196,12 +196,6 @@ while (0)\n    numbered. This is not true on the ns32k.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 32000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n "}, {"sha": "c2bc2ea3c2c996f021655e1201d132eaf4f447a1", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -389,11 +389,6 @@ extern int target_flags;\n    numbered.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD (TARGET_64BIT ? 64 : 32)\n #define MAX_BITS_PER_WORD 64\n #define MAX_LONG_TYPE_SIZE 32\n #define MAX_WCHAR_TYPE_SIZE 32"}, {"sha": "38ee43e61d573f0d739a6f80d413870ce5d1e7c8", "filename": "gcc/config/pdp11/pdp11.h", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fpdp11%2Fpdp11.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpdp11%2Fpdp11.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -164,13 +164,6 @@ extern int target_flags;\n /* Define this if most significant word of a multiword number is numbered.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-/*  This is a machine with 16-bit registers */\n-#define BITS_PER_WORD 16\n-\n /* Width of a word, in units (bytes). \n \n    UNITS OR BYTES - seems like units */"}, {"sha": "ed824738b526168a66fba7870b5f3bc1a4c8c1d2", "filename": "gcc/config/pj/pj.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fpj%2Fpj.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fpj%2Fpj.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpj%2Fpj.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -133,11 +133,6 @@ extern int target_flags;\n #define LIBGCC2_WORDS_BIG_ENDIAN 1\n #endif\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD  32\n #define MAX_BITS_PER_WORD 32\n \n /* Width of a word, in units (bytes).  */"}, {"sha": "081b5181a491466ad5b847720e7272ad690ef55e", "filename": "gcc/config/romp/romp.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fromp%2Fromp.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fromp%2Fromp.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fromp%2Fromp.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -90,12 +90,6 @@ extern int target_flags;\n    for them.  Might as well be consistent with bits and bytes.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n "}, {"sha": "e8d9022eed4da7512784187a4df78a1d4d6b74cf", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -522,11 +522,6 @@ extern int rs6000_altivec_abi;\n    instructions for them.  Might as well be consistent with bits and bytes.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD (! TARGET_POWERPC64 ? 32 : 64)\n #define MAX_BITS_PER_WORD 64\n \n /* Width of a word, in units (bytes).  */"}, {"sha": "0d2d9ff4678bdaf61c61ce14766f031f226a668a", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -106,9 +106,6 @@ extern int current_function_outgoing_args_size;\n \n #define WORDS_BIG_ENDIAN 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.  */\n-\n-#define BITS_PER_WORD (TARGET_64BIT ? 64 : 32)\n #define MAX_BITS_PER_WORD 64\n \n /* Width of a word, in units (bytes).  */"}, {"sha": "8d98aa2573bf2dc21876fbd6ca72fb61b28f3e8b", "filename": "gcc/config/sh/sh.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fsh%2Fsh.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fsh%2Fsh.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -430,11 +430,6 @@ do {\t\t\t\t\t\t\t\t\t\\\n #define LIBGCC2_WORDS_BIG_ENDIAN 1\n #endif\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD  (TARGET_SHMEDIA ? 64 : 32)\n #define MAX_BITS_PER_WORD 64\n \n #define MAX_LONG_TYPE_SIZE MAX_BITS_PER_WORD"}, {"sha": "348d98c5888591ee9a8fc2665be42c609d571025", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -710,11 +710,6 @@ extern struct sparc_cpu_select sparc_select[];\n #define LIBGCC2_WORDS_BIG_ENDIAN 1\n #endif\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD\t\t(TARGET_ARCH64 ? 64 : 32)\n #define MAX_BITS_PER_WORD\t64\n \n /* Width of a word, in units (bytes).  */"}, {"sha": "8f5dbb851d73f087798d548a10e64f9d8e31ddde", "filename": "gcc/config/stormy16/stormy16.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fstormy16%2Fstormy16.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -89,8 +89,6 @@ extern int target_flags;\n \n #define WORDS_BIG_ENDIAN 0\n \n-#define BITS_PER_WORD 16\n-\n #define UNITS_PER_WORD 2\n \n #define POINTER_SIZE 16"}, {"sha": "a42eb74dea3492d002e73934ece30b298af00a4e", "filename": "gcc/config/v850/v850.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fv850%2Fv850.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fv850%2Fv850.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -228,12 +228,6 @@ extern struct small_memory_info small_memory[(int)SMALL_MEMORY_max];\n    This is not true on the NEC V850.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD\t\t32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD\t\t4\n "}, {"sha": "ce5d35064ddb6a1969aac371c4d2436512eb615f", "filename": "gcc/config/vax/vax.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fvax%2Fvax.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fvax%2Fvax.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvax%2Fvax.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -105,12 +105,6 @@ extern int target_flags;\n /* This is not true on the VAX.  */\n #define WORDS_BIG_ENDIAN 0\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a 68000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n "}, {"sha": "b3ff2062bb930dfc184e94780a5039fe2bc40217", "filename": "gcc/config/we32k/we32k.h", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fwe32k%2Fwe32k.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fwe32k%2Fwe32k.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -62,12 +62,6 @@ extern int target_flags;\n    since there are no machine instructions for them.  */\n #define WORDS_BIG_ENDIAN 1\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.\n-   Note that this is not necessarily the width of data type `int';\n-   if using 16-bit ints on a we32000, this would still be 32.\n-   But on a machine with 16-bit registers, this would be 16.  */\n-#define BITS_PER_WORD 32\n-\n /* Width of a word, in units (bytes).  */\n #define UNITS_PER_WORD 4\n "}, {"sha": "8e049a8f0aa2658d76265df48bfb16fe12003b34", "filename": "gcc/config/xtensa/xtensa.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fconfig%2Fxtensa%2Fxtensa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fxtensa%2Fxtensa.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -235,8 +235,6 @@ extern unsigned xtensa_current_frame_size;\n /* Define this if most significant word of a multiword number is the lowest. */\n #define WORDS_BIG_ENDIAN (TARGET_BIG_ENDIAN != 0)\n \n-/* Width in bits of a \"word\", which is the contents of a machine register.  */\n-#define BITS_PER_WORD 32\n #define MAX_BITS_PER_WORD 32\n \n /* Width of a word, in units (bytes).  */"}, {"sha": "fe467404a68f2e9a1b621cd0551a3ed0a3d932e8", "filename": "gcc/defaults.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -285,6 +285,10 @@ do {\t\t\t\t\t\t\t\t\\\n #define BITS_PER_UNIT 8\n #endif\n \n+#ifndef BITS_PER_WORD\n+#define BITS_PER_WORD (BITS_PER_UNIT * UNITS_PER_WORD)\n+#endif\n+\n #ifndef CHAR_TYPE_SIZE\n #define CHAR_TYPE_SIZE BITS_PER_UNIT\n #endif"}, {"sha": "2e8ee707d4df8138955cf8ed5ee532580b315e82", "filename": "gcc/doc/tm.texi", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fdoc%2Ftm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e81dd3810b095e922795b16de27af819ee190ba8/gcc%2Fdoc%2Ftm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Ftm.texi?ref=e81dd3810b095e922795b16de27af819ee190ba8", "patch": "@@ -928,7 +928,8 @@ unit (byte).  If you do not define this macro the default is 8.\n \n @findex BITS_PER_WORD\n @item BITS_PER_WORD\n-Number of bits in a word; normally 32.\n+Number of bits in a word.  If you do not define this macro, the default\n+is @code{BITS_PER_UNIT * UNITS_PER_WORD}.\n \n @findex MAX_BITS_PER_WORD\n @item MAX_BITS_PER_WORD"}]}