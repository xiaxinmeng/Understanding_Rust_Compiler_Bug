{"sha": "290358f770d21d9204ea621f839ee8fba606a275", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjkwMzU4Zjc3MGQyMWQ5MjA0ZWE2MjFmODM5ZWU4ZmJhNjA2YTI3NQ==", "commit": {"author": {"name": "Revital Eres", "email": "eres@il.ibm.com", "date": "2007-05-06T10:35:42Z"}, "committer": {"name": "Revital Eres", "email": "revitale@gcc.gnu.org", "date": "2007-05-06T10:35:42Z"}, "message": "Fix PR30957\n\nFrom-SVN: r124471", "tree": {"sha": "afc544361a73d639bfc241f109382f1c798f44ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/afc544361a73d639bfc241f109382f1c798f44ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/290358f770d21d9204ea621f839ee8fba606a275", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/290358f770d21d9204ea621f839ee8fba606a275", "html_url": "https://github.com/Rust-GCC/gccrs/commit/290358f770d21d9204ea621f839ee8fba606a275", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/290358f770d21d9204ea621f839ee8fba606a275/comments", "author": {"login": "revit13", "id": 16211463, "node_id": "MDQ6VXNlcjE2MjExNDYz", "avatar_url": "https://avatars.githubusercontent.com/u/16211463?v=4", "gravatar_id": "", "url": "https://api.github.com/users/revit13", "html_url": "https://github.com/revit13", "followers_url": "https://api.github.com/users/revit13/followers", "following_url": "https://api.github.com/users/revit13/following{/other_user}", "gists_url": "https://api.github.com/users/revit13/gists{/gist_id}", "starred_url": "https://api.github.com/users/revit13/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/revit13/subscriptions", "organizations_url": "https://api.github.com/users/revit13/orgs", "repos_url": "https://api.github.com/users/revit13/repos", "events_url": "https://api.github.com/users/revit13/events{/privacy}", "received_events_url": "https://api.github.com/users/revit13/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "19df3b836e5cc081f75cb25cc6e64d6d293f0e19", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19df3b836e5cc081f75cb25cc6e64d6d293f0e19", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19df3b836e5cc081f75cb25cc6e64d6d293f0e19"}], "stats": {"total": 76, "additions": 73, "deletions": 3}, "files": [{"sha": "d703c48294d68babaa36f65f49c6651ca345f97d", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290358f770d21d9204ea621f839ee8fba606a275/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290358f770d21d9204ea621f839ee8fba606a275/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=290358f770d21d9204ea621f839ee8fba606a275", "patch": "@@ -1,3 +1,9 @@\n+2007-06-05  Revital Eres  <eres@il.ibm.com>\n+\n+\tPR 30957\n+\t* loop-unroll.c (insert_var_expansion_initialization):\n+\tInitialize the expansions with -zero instead of +zero.\n+\n 2007-05-05  Aurelien Jarno  <aurelien@aurel32.net>\n \n \t* config/pa/pa.md: Split tgd_load, tld_load and tie_load"}, {"sha": "c5653b2c0515a5721890790921ebcfcaafd0e0de", "filename": "gcc/loop-unroll.c", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290358f770d21d9204ea621f839ee8fba606a275/gcc%2Floop-unroll.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290358f770d21d9204ea621f839ee8fba606a275/gcc%2Floop-unroll.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-unroll.c?ref=290358f770d21d9204ea621f839ee8fba606a275", "patch": "@@ -2014,7 +2014,30 @@ expand_var_during_unrolling (struct var_to_expand *ve, rtx insn)\n /* Initialize the variable expansions in loop preheader.  \n    Callbacks for htab_traverse.  PLACE_P is the loop-preheader \n    basic block where the initialization of the expansions \n-   should take place.  */\n+   should take place.  The expansions are initialized with (-0)\n+   when the operation is plus or minus to honor sign zero.\n+   This way we can prevent cases where the sign of the final result is\n+   effected by the sign of the expansion.\n+   Here is an example to demonstrate this:\n+   \n+   for (i = 0 ; i < n; i++)\n+     sum += something;\n+\n+   ==>\n+\n+   sum += something\n+   ....\n+   i = i+1;\n+   sum1 += something\n+   ....\n+   i = i+1\n+   sum2 += something;\n+   ....\n+   \n+   When SUM is initialized with -zero and SOMETHING is also -zero; the\n+   final result of sum should be -zero thus the expansions sum1 and sum2\n+   should be initialized with -zero as well (otherwise we will get +zero\n+   as the final result).  */\n \n static int\n insert_var_expansion_initialization (void **slot, void *place_p)\n@@ -2023,15 +2046,21 @@ insert_var_expansion_initialization (void **slot, void *place_p)\n   basic_block place = (basic_block)place_p;\n   rtx seq, var, zero_init, insn;\n   unsigned i;\n-  \n+  enum machine_mode mode = GET_MODE (ve->reg);\n+  bool honor_signed_zero_p = HONOR_SIGNED_ZEROS (mode);\n+\n   if (VEC_length (rtx, ve->var_expansions) == 0)\n     return 1;\n   \n   start_sequence ();\n   if (ve->op == PLUS || ve->op == MINUS) \n     for (i = 0; VEC_iterate (rtx, ve->var_expansions, i, var); i++)\n       {\n-        zero_init =  CONST0_RTX (GET_MODE (var));\n+\tif (honor_signed_zero_p)\n+\t  zero_init = simplify_gen_unary (NEG, mode, CONST0_RTX (mode), mode);\n+\telse\n+\t  zero_init = CONST0_RTX (mode);\n+       \t\n         emit_move_insn (var, zero_init);\n       }\n   else if (ve->op == MULT)"}, {"sha": "bcec964d959e619f1edd68260a8f5a9a68ef2428", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290358f770d21d9204ea621f839ee8fba606a275/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290358f770d21d9204ea621f839ee8fba606a275/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=290358f770d21d9204ea621f839ee8fba606a275", "patch": "@@ -1,3 +1,8 @@\n+2007-06-05  Revital Eres  <eres@il.ibm.com>\n+\t\n+\tPR 30957\n+\t* gcc.dg/pr30957-1.c: New test.\n+\n 2007-05-05  Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/31251"}, {"sha": "26d5de7f6f766536d37344e52ef631307824d003", "filename": "gcc/testsuite/gcc.dg/pr30957-1.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/290358f770d21d9204ea621f839ee8fba606a275/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/290358f770d21d9204ea621f839ee8fba606a275/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr30957-1.c?ref=290358f770d21d9204ea621f839ee8fba606a275", "patch": "@@ -0,0 +1,30 @@\n+/* { dg-do run { xfail vax-*-* powerpc-*-*spe } } */\n+/* { dg-options \"-O2 -funroll-loops -funsafe-math-optimizations -fvariable-expansion-in-unroller -dL\" } */\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+float\n+foo (float d, int n)\n+{\n+  unsigned i;\n+  float accum = d;\n+\n+  for (i = 0; i < n; i++)\n+    accum += d;\n+\n+  return accum;\n+}\n+\n+int\n+main ()\n+{\n+  if (__builtin_copysignf (1.0, foo (0.0 / -5.0, 10)) != -1.0)\n+    abort ();\n+  exit (0);\n+}\n+\n+/* { dg-final { scan-rtl-dump \"Expanding Accumulator\" \"loop2_unroll\" } } */\n+/* { dg-final { cleanup-rtl-dump \"loop*\" } } */\n+\n+"}]}