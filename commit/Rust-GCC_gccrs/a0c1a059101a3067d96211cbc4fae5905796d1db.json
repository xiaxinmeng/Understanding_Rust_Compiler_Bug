{"sha": "a0c1a059101a3067d96211cbc4fae5905796d1db", "node_id": "C_kwDOANBUbNoAKGEwYzFhMDU5MTAxYTMwNjdkOTYyMTFjYmM0ZmFlNTkwNTc5NmQxZGI", "commit": {"author": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-11T15:23:42Z"}, "committer": {"name": "Aldy Hernandez", "email": "aldyh@redhat.com", "date": "2022-10-12T18:25:44Z"}, "message": "Add range-op entry for floating point NEGATE_EXPR.\n\ngcc/ChangeLog:\n\n\t* range-op-float.cc (class foperator_negate): New.\n\t(floating_op_table::floating_op_table): Add NEGATE_EXPR\n\t(range_op_float_tests): Add negate tests.", "tree": {"sha": "1af3260731790937c62171d78cd66bac13b68b5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1af3260731790937c62171d78cd66bac13b68b5f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a0c1a059101a3067d96211cbc4fae5905796d1db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c1a059101a3067d96211cbc4fae5905796d1db", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a0c1a059101a3067d96211cbc4fae5905796d1db", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a0c1a059101a3067d96211cbc4fae5905796d1db/comments", "author": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aldyh", "id": 12937877, "node_id": "MDQ6VXNlcjEyOTM3ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/12937877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aldyh", "html_url": "https://github.com/aldyh", "followers_url": "https://api.github.com/users/aldyh/followers", "following_url": "https://api.github.com/users/aldyh/following{/other_user}", "gists_url": "https://api.github.com/users/aldyh/gists{/gist_id}", "starred_url": "https://api.github.com/users/aldyh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aldyh/subscriptions", "organizations_url": "https://api.github.com/users/aldyh/orgs", "repos_url": "https://api.github.com/users/aldyh/repos", "events_url": "https://api.github.com/users/aldyh/events{/privacy}", "received_events_url": "https://api.github.com/users/aldyh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7858368c3f3875f6bf634119e5731dc3c808a7c3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7858368c3f3875f6bf634119e5731dc3c808a7c3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7858368c3f3875f6bf634119e5731dc3c808a7c3"}], "stats": {"total": 62, "additions": 62, "deletions": 0}, "files": [{"sha": "229b9d233516dd914e70af3ac7645593163cabb1", "filename": "gcc/range-op-float.cc", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a0c1a059101a3067d96211cbc4fae5905796d1db/gcc%2Frange-op-float.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a0c1a059101a3067d96211cbc4fae5905796d1db/gcc%2Frange-op-float.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frange-op-float.cc?ref=a0c1a059101a3067d96211cbc4fae5905796d1db", "patch": "@@ -1132,6 +1132,52 @@ foperator_ordered::op1_range (frange &r, tree type,\n   return true;\n }\n \n+class foperator_negate : public range_operator_float\n+{\n+  using range_operator_float::fold_range;\n+  using range_operator_float::op1_range;\n+public:\n+  bool fold_range (frange &r, tree type,\n+\t\t   const frange &op1, const frange &op2,\n+\t\t   relation_kind = VREL_VARYING) const final override\n+  {\n+    if (empty_range_varying (r, type, op1, op2))\n+      return true;\n+    if (op1.known_isnan ())\n+      {\n+\tbool sign;\n+\tif (op1.nan_signbit_p (sign))\n+\t  r.set_nan (type, !sign);\n+\telse\n+\t  r.set_nan (type);\n+\treturn true;\n+      }\n+\n+    REAL_VALUE_TYPE lh_lb = op1.lower_bound ();\n+    REAL_VALUE_TYPE lh_ub = op1.upper_bound ();\n+    lh_lb = real_value_negate (&lh_lb);\n+    lh_ub = real_value_negate (&lh_ub);\n+    r.set (type, lh_ub, lh_lb);\n+    if (op1.maybe_isnan ())\n+      {\n+\tbool sign;\n+\tif (op1.nan_signbit_p (sign))\n+\t  r.update_nan (!sign);\n+\telse\n+\t  r.update_nan ();\n+      }\n+    else\n+      r.clear_nan ();\n+    return true;\n+  }\n+  bool op1_range (frange &r, tree type,\n+\t\t  const frange &lhs, const frange &op2,\n+\t\t  relation_kind rel = VREL_VARYING) const final override\n+  {\n+    return fold_range (r, type, lhs, op2, rel);\n+  }\n+} fop_negate;\n+\n class foperator_abs : public range_operator_float\n {\n   using range_operator_float::fold_range;\n@@ -1593,6 +1639,7 @@ floating_op_table::floating_op_table ()\n   set (UNORDERED_EXPR, fop_unordered);\n \n   set (ABS_EXPR, fop_abs);\n+  set (NEGATE_EXPR, fop_negate);\n }\n \n // Return a pointer to the range_operator_float instance, if there is\n@@ -1633,6 +1680,21 @@ frange_float (const char *lb, const char *ub, tree type = float_type_node)\n void\n range_op_float_tests ()\n {\n+  frange r, r0, r1;\n+  frange trange (float_type_node);\n+\n+  // negate([-5, +10]) => [-10, 5]\n+  r0 = frange_float (\"-5\", \"10\");\n+  fop_negate.fold_range (r, float_type_node, r0, trange);\n+  ASSERT_EQ (r, frange_float (\"-10\", \"5\"));\n+\n+  // negate([0, 1] -NAN) => [-1, -0] +NAN\n+  r0 = frange_float (\"0\", \"1\");\n+  r0.update_nan (true);\n+  fop_negate.fold_range (r, float_type_node, r0, trange);\n+  r1 = frange_float (\"-1\", \"-0\");\n+  r1.update_nan (false);\n+  ASSERT_EQ (r, r1);\n }\n \n } // namespace selftest"}]}