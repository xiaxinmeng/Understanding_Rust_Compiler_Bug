{"sha": "7bcac048fddfb4217b6457f61050f0499929a6c5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2JjYWMwNDhmZGRmYjQyMTdiNjQ1N2Y2MTA1MGYwNDk5OTI5YTZjNQ==", "commit": {"author": {"name": "David S. Miller", "email": "davem@tanya.rutgers.edu", "date": "1998-01-17T22:50:40Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-01-17T22:50:40Z"}, "message": "varasm.c (immed_double_const): Add casts to HOST_WIDE_INT where necessary.\n\n        * varasm.c (immed_double_const): Add casts to HOST_WIDE_INT where\n        necessary.\n        (const_hash): Hash val is unsigned long.\n        (SYMHASH): Likewise.\n        * tree.c (TYPE_HASH): Type of hash val is unsigned long.\n        * print-tree.c (print_node_brief): HOST_PTR_PRINTF format wants a\n        char pointer, not HOST_WIDE_INT.\n        (print_node): Likewise.  Also hash is unsigned long not\n        HOST_WIDE_INT.\n        * cse.c (canon_hash): Hash is unsigned long not HOST_WIDE_INT.\n\nFrom-SVN: r17403", "tree": {"sha": "e743d2ca1fcb604f39a4230fab8087c5f6870b63", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e743d2ca1fcb604f39a4230fab8087c5f6870b63"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7bcac048fddfb4217b6457f61050f0499929a6c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bcac048fddfb4217b6457f61050f0499929a6c5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7bcac048fddfb4217b6457f61050f0499929a6c5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7bcac048fddfb4217b6457f61050f0499929a6c5/comments", "author": null, "committer": null, "parents": [{"sha": "c9ec4f99bcd101ef4266f5476498187f270859fa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ec4f99bcd101ef4266f5476498187f270859fa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9ec4f99bcd101ef4266f5476498187f270859fa"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "3efb4cb1e3ef1826028d903476e01b004f3ebee4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bcac048fddfb4217b6457f61050f0499929a6c5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bcac048fddfb4217b6457f61050f0499929a6c5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=7bcac048fddfb4217b6457f61050f0499929a6c5", "patch": "@@ -1,5 +1,19 @@\n Sat Jan 17 23:41:36 1998  David S. Miller  <davem@tanya.rutgers.edu>\n \n+\t* varasm.c (immed_double_const): Add casts to HOST_WIDE_INT where\n+\tnecessary.\n+\t(const_hash): Hash val is unsigned long.\n+\t(SYMHASH): Likewise.\n+\n+\t* tree.c (TYPE_HASH): Type of hash val is unsigned long.\n+\n+\t* print-tree.c (print_node_brief): HOST_PTR_PRINTF format wants a\n+\tchar pointer, not HOST_WIDE_INT.\n+\t(print_node): Likewise.  Also hash is unsigned long not\n+\tHOST_WIDE_INT.\n+\n+\t* cse.c (canon_hash): Hash is unsigned long not HOST_WIDE_INT.\n+\n \t* explow.c (optimize_save_area_alloca): New function for targets\n \twhere SETJMP_VIA_SAVE_AREA is true.\n \t(allocate_dynamic_stack_space): On SETJMP_VIA_SAVE_AREA targets,"}, {"sha": "e001597558fe4365dea3ce22316b26f00e3db972", "filename": "gcc/cse.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bcac048fddfb4217b6457f61050f0499929a6c5/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bcac048fddfb4217b6457f61050f0499929a6c5/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=7bcac048fddfb4217b6457f61050f0499929a6c5", "patch": "@@ -1918,12 +1918,12 @@ canon_hash (x, mode)\n       /* Assume there is only one rtx object for any given label.  */\n     case LABEL_REF:\n       hash\n-\t+= ((unsigned) LABEL_REF << 7) + (unsigned HOST_WIDE_INT) XEXP (x, 0);\n+\t+= ((unsigned) LABEL_REF << 7) + (unsigned long) XEXP (x, 0);\n       return hash;\n \n     case SYMBOL_REF:\n       hash\n-\t+= ((unsigned) SYMBOL_REF << 7) + (unsigned HOST_WIDE_INT) XSTR (x, 0);\n+\t+= ((unsigned) SYMBOL_REF << 7) + (unsigned long) XSTR (x, 0);\n       return hash;\n \n     case MEM:"}, {"sha": "f075f0b3834634dbe462d1d597a08ea2fb5846fa", "filename": "gcc/print-tree.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bcac048fddfb4217b6457f61050f0499929a6c5/gcc%2Fprint-tree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bcac048fddfb4217b6457f61050f0499929a6c5/gcc%2Fprint-tree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprint-tree.c?ref=7bcac048fddfb4217b6457f61050f0499929a6c5", "patch": "@@ -80,7 +80,7 @@ print_node_brief (file, prefix, node, indent)\n   if (indent > 0)\n     fprintf (file, \" \");\n   fprintf (file, \"%s <%s \", prefix, tree_code_name[(int) TREE_CODE (node)]);\n-  fprintf (file, HOST_PTR_PRINTF, (HOST_WIDE_INT) node);\n+  fprintf (file, HOST_PTR_PRINTF, (char *) node);\n \n   if (class == 'd')\n     {\n@@ -216,7 +216,7 @@ print_node (file, prefix, node, indent)\n       return;\n     }\n \n-  hash = ((unsigned HOST_WIDE_INT) node) % HASH_SIZE;\n+  hash = ((unsigned long) node) % HASH_SIZE;\n \n   /* If node is in the table, just mention its address.  */\n   for (b = table[hash]; b; b = b->next)\n@@ -237,7 +237,7 @@ print_node (file, prefix, node, indent)\n \n   /* Print the slot this node is in, and its code, and address.  */\n   fprintf (file, \"%s <%s \", prefix, tree_code_name[(int) TREE_CODE (node)]);\n-  fprintf (file, HOST_PTR_PRINTF, (HOST_WIDE_INT) node);\n+  fprintf (file, HOST_PTR_PRINTF, (char *) node);\n \n   /* Print the name, if any.  */\n   if (class == 'd')\n@@ -433,7 +433,7 @@ print_node (file, prefix, node, indent)\n \t    {\n \t      fprintf (file, \"saved-insns \");\n \t      fprintf (file, HOST_PTR_PRINTF,\n- \t\t       (HOST_WIDE_INT) DECL_SAVED_INSNS (node));\n+ \t\t       (char *) DECL_SAVED_INSNS (node));\n \t    }\n \t}\n "}, {"sha": "eda61879f592fa76967192729a969a6b75d85f81", "filename": "gcc/tree.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bcac048fddfb4217b6457f61050f0499929a6c5/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bcac048fddfb4217b6457f61050f0499929a6c5/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=7bcac048fddfb4217b6457f61050f0499929a6c5", "patch": "@@ -272,7 +272,7 @@ static int next_type_uid = 1;\n \n /* Here is how primitive or already-canonicalized types' hash\n    codes are made.  */\n-#define TYPE_HASH(TYPE) ((HOST_WIDE_INT) (TYPE) & 0777777)\n+#define TYPE_HASH(TYPE) ((unsigned long) (TYPE) & 0777777)\n \n extern char *mode_name[];\n "}, {"sha": "5e0e3e4092cf142ccb53c5670f3551a3bfe52cfb", "filename": "gcc/varasm.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7bcac048fddfb4217b6457f61050f0499929a6c5/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7bcac048fddfb4217b6457f61050f0499929a6c5/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=7bcac048fddfb4217b6457f61050f0499929a6c5", "patch": "@@ -2178,7 +2178,7 @@ immed_double_const (i0, i1, mode)\n \t is being broken.  */\n \n       if (width <= HOST_BITS_PER_WIDE_INT)\n-\ti1 = (i0 < 0) ? ~0 : 0;\n+\ti1 = (i0 < 0) ? ~(HOST_WIDE_INT) 0 : 0;\n \n       /* If this integer fits in one word, return a CONST_INT.  */\n       if ((i1 == 0 && i0 >= 0)\n@@ -2490,7 +2490,7 @@ const_hash (exp)\n \t     Instead, we include the array size because the constructor could\n \t     be shorter.  */\n \t  if (TREE_CODE (TREE_TYPE (exp)) == RECORD_TYPE)\n-\t    hi = ((HOST_WIDE_INT) TREE_TYPE (exp) & ((1 << HASHBITS) - 1))\n+\t    hi = ((unsigned long) TREE_TYPE (exp) & ((1 << HASHBITS) - 1))\n \t      % MAX_HASH_TABLE;\n \t  else\n \t    hi = ((5 + int_size_in_bytes (TREE_TYPE (exp)))\n@@ -3257,7 +3257,7 @@ static struct pool_sym **const_rtx_sym_hash_table;\n    The argument is XSTR (... , 0)  */\n \n #define SYMHASH(LABEL)\t\\\n-  ((((HOST_WIDE_INT) (LABEL)) & ((1 << HASHBITS) - 1))  % MAX_RTX_HASH_TABLE)\n+  ((((unsigned long) (LABEL)) & ((1 << HASHBITS) - 1))  % MAX_RTX_HASH_TABLE)\n \f\n /* Initialize constant pool hashing for next function.  */\n "}]}