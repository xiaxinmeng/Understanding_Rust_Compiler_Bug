{"sha": "2d73cc4519cdf4a00eb7975e4429cf398456052e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmQ3M2NjNDUxOWNkZjRhMDBlYjc5NzVlNDQyOWNmMzk4NDU2MDUyZQ==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2013-11-19T22:53:06Z"}, "committer": {"name": "Martin Jambor", "email": "jamborm@gcc.gnu.org", "date": "2013-11-19T22:53:06Z"}, "message": "re PR rtl-optimization/59099 (Erroneous register allocation on 32-bit x86 using regparm)\n\n2013-11-19  Martin Jambor  <mjambor@suse.cz>\n\n\tPR rtl-optimization/59099\n\t* ira.c (find_moveable_pseudos): Put back various analyses from ira()\n\there.\n\t(ira): Move init_reg_equiv and call to\n\tsplit_live_ranges_for_shrink_wrap up, remove analyses around call\n\tto find_moveable_pseudos.\n\ntestsuite/\n\t* gcc.target/i386/pr59099.c: New test.\n\nFrom-SVN: r205061", "tree": {"sha": "77f125d9d6648d44ce0a3724256bad7615d241ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/77f125d9d6648d44ce0a3724256bad7615d241ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2d73cc4519cdf4a00eb7975e4429cf398456052e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d73cc4519cdf4a00eb7975e4429cf398456052e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2d73cc4519cdf4a00eb7975e4429cf398456052e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2d73cc4519cdf4a00eb7975e4429cf398456052e/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8ce616e22271df064568eafaa0f08c4862221074", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8ce616e22271df064568eafaa0f08c4862221074", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8ce616e22271df064568eafaa0f08c4862221074"}], "stats": {"total": 131, "additions": 114, "deletions": 17}, "files": [{"sha": "1ba54b031875a575127dec0b9e1e0ba2b5aae7e6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d73cc4519cdf4a00eb7975e4429cf398456052e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d73cc4519cdf4a00eb7975e4429cf398456052e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=2d73cc4519cdf4a00eb7975e4429cf398456052e", "patch": "@@ -1,3 +1,12 @@\n+2013-11-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR rtl-optimization/59099\n+\t* ira.c (find_moveable_pseudos): Put back various analyses from ira()\n+\there.\n+\t(ira): Move init_reg_equiv and call to\n+\tsplit_live_ranges_for_shrink_wrap up, remove analyses around call\n+\tto find_moveable_pseudos.\n+\n 2013-11-20  Alan Modra  <amodra@gmail.com>\n \n \t* config/rs6000/sysv4.h (CC1_ENDIAN_LITTLE_SPEC): Define as empty."}, {"sha": "93a2bbdc90eb35aa2f50579a34644ded4468d6cd", "filename": "gcc/ira.c", "status": "modified", "additions": 24, "deletions": 17, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d73cc4519cdf4a00eb7975e4429cf398456052e/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d73cc4519cdf4a00eb7975e4429cf398456052e/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=2d73cc4519cdf4a00eb7975e4429cf398456052e", "patch": "@@ -4522,6 +4522,9 @@ find_moveable_pseudos (void)\n   pseudo_replaced_reg.release ();\n   pseudo_replaced_reg.safe_grow_cleared (max_regs);\n \n+  df_analyze ();\n+  calculate_dominance_info (CDI_DOMINATORS);\n+\n   i = 0;\n   bitmap_initialize (&live, 0);\n   bitmap_initialize (&used, 0);\n@@ -4834,6 +4837,14 @@ find_moveable_pseudos (void)\n   free (bb_moveable_reg_sets);\n \n   last_moveable_pseudo = max_reg_num ();\n+\n+  fix_reg_equiv_init ();\n+  expand_reg_info ();\n+  regstat_free_n_sets_and_refs ();\n+  regstat_free_ri ();\n+  regstat_init_n_sets_and_refs ();\n+  regstat_compute_ri ();\n+  free_dominance_info (CDI_DOMINATORS);\n }\n \n \n@@ -5194,7 +5205,19 @@ ira (FILE *f)\n #endif\n   df_analyze ();\n \n+  init_reg_equiv ();\n+  if (ira_conflicts_p)\n+    {\n+      calculate_dominance_info (CDI_DOMINATORS);\n+\n+      if (split_live_ranges_for_shrink_wrap ())\n+\tdf_analyze ();\n+\n+      free_dominance_info (CDI_DOMINATORS);\n+    }\n+\n   df_clear_flags (DF_NO_INSN_RESCAN);\n+\n   regstat_init_n_sets_and_refs ();\n   regstat_compute_ri ();\n \n@@ -5212,7 +5235,6 @@ ira (FILE *f)\n   if (resize_reg_info () && flag_ira_loop_pressure)\n     ira_set_pseudo_classes (true, ira_dump_file);\n \n-  init_reg_equiv ();\n   rebuild_p = update_equiv_regs ();\n   setup_reg_equiv ();\n   setup_reg_equiv_init ();\n@@ -5235,22 +5257,7 @@ ira (FILE *f)\n      allocation because of -O0 usage or because the function is too\n      big.  */\n   if (ira_conflicts_p)\n-    {\n-      df_analyze ();\n-      calculate_dominance_info (CDI_DOMINATORS);\n-\n-      find_moveable_pseudos ();\n-      if (split_live_ranges_for_shrink_wrap ())\n-\tdf_analyze ();\n-\n-      fix_reg_equiv_init ();\n-      expand_reg_info ();\n-      regstat_free_n_sets_and_refs ();\n-      regstat_free_ri ();\n-      regstat_init_n_sets_and_refs ();\n-      regstat_compute_ri ();\n-      free_dominance_info (CDI_DOMINATORS);\n-    }\n+    find_moveable_pseudos ();\n \n   max_regno_before_ira = max_reg_num ();\n   ira_setup_eliminable_regset (true);"}, {"sha": "178dd39d5a455e201d6d91144e6c6ddcd60ebbe6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d73cc4519cdf4a00eb7975e4429cf398456052e/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d73cc4519cdf4a00eb7975e4429cf398456052e/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=2d73cc4519cdf4a00eb7975e4429cf398456052e", "patch": "@@ -1,3 +1,8 @@\n+2013-11-19  Martin Jambor  <mjambor@suse.cz>\n+\n+\tPR rtl-optimization/59099\n+\t* gcc.target/i386/pr59099.c: New test.\n+\n 2013-11-19  Sriraman Tallam  <tmsriram@google.com>\n \n \t* gcc.dg/tree-prof/cold_partition_label.c: New testcase."}, {"sha": "7dc12ff3f7c7f07324bb8b7e9a1a2a3523d01f0a", "filename": "gcc/testsuite/gcc.target/i386/pr59099.c", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2d73cc4519cdf4a00eb7975e4429cf398456052e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59099.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2d73cc4519cdf4a00eb7975e4429cf398456052e/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59099.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fpr59099.c?ref=2d73cc4519cdf4a00eb7975e4429cf398456052e", "patch": "@@ -0,0 +1,76 @@\n+/* { dg-do run } */\n+/* { dg-options \"-O2 -fPIC -m32\" } */\n+\n+void (*pfn)(void);\n+\n+struct s\n+{\n+  void** q;\n+  int h;\n+  int t;\n+  int s;\n+};\n+\n+\n+void* f (struct s *, struct s *) __attribute__ ((noinline, regparm(1)));\n+\n+void*\n+__attribute__ ((regparm(1)))\n+f (struct s *p, struct s *p2)\n+{\n+  void *gp, *gp1;\n+  int t, h, s, t2, h2, c, i;\n+\n+  if (p2->h == p2->t)\n+    return 0;\n+\n+  (*pfn) ();\n+\n+  h = p->h;\n+  t = p->t;\n+  s = p->s;\n+\n+  h2 = p2->h;\n+  t2 = p2->t;\n+\n+  gp = p2->q[h2++];\n+\n+  c = (t2 - h2) / 2;\n+  for (i = 0; i != c; i++)\n+    {\n+      if (t == h || (h == 0 && t == s - 1))\n+\tbreak;\n+      gp1 = p2->q[h2++];\n+      p->q[t++] = gp1;\n+      if (t == s)\n+\tt = 0;\n+    }\n+\n+  p2->h = h2;\n+  return gp;\n+}\n+\n+static void gn () { }\n+\n+int\n+main()\n+{\n+  struct s s1, s2;\n+  void *q[10];\n+\n+  pfn = gn;\n+\n+  s1.q = q;\n+  s1.h = 0;\n+  s1.t = 2;\n+  s1.s = 4;\n+\n+  s2.q = q;\n+  s2.h = 0;\n+  s2.t = 4;\n+  s2.s = 2;\n+\n+  f (&s1, &s2);\n+\n+  return 0;\n+}"}]}