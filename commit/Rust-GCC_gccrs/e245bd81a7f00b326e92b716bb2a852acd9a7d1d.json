{"sha": "e245bd81a7f00b326e92b716bb2a852acd9a7d1d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTI0NWJkODFhN2YwMGIzMjZlOTJiNzE2YmIyYTg1MmFjZDlhN2QxZA==", "commit": {"author": {"name": "Richard Sandiford", "email": "rsandifo@redhat.com", "date": "2004-03-01T19:40:10Z"}, "committer": {"name": "Richard Sandiford", "email": "rsandifo@gcc.gnu.org", "date": "2004-03-01T19:40:10Z"}, "message": "mips-protos.h (enum mips_symbol_type): Move from mips.h.\n\n\t* config/mips/mips-protos.h (enum mips_symbol_type): Move from mips.h.\n\t(NUM_SYMBOL_TYPES): Likewise.\n\t(SYMBOL_64_HIGH, SYMBOL_64_MID, SYMBOL_64_LOW): New symbol types.\n\t(mips_unspec_address): Declare.\n\t(mips_gotoff_page, mips_gotoff_global): Delete.\n\t* config/mips/mips.h (PREDICATE_CODES): Add general_symbolic_operand.\n\t* config/mips/mips.c (enum mips_symbol_type, NUM_SYMBOL_TYPES): Delete.\n\t(mips_symbolic_constant_p, mips_symbolic_address_p)\n\t(mips_symbol_insns): Handle new symbol types.\n\t(general_symbolic_operand): New predicate.\n\t(mips_unspec_address): Make extern.\n\t(mips_gotoff_page, mips_gotoff_global): Delete.\n\t(override_options): Allow -mabi=64 -mno-abicalls -mexplicit-relocs.\n\tHandle new symbol types.\n\t* config/mips/mips.md (*lea_high64, *lea64): New patterns.\n\t(*xgot_hi[sd]i, *xgot_lo[sd]i, *got_disp[sd]i, *got_disp[sd]i): Call\n\tmips_unspec_address directly.\n\t* doc/invoke.texi: Remove the -mabi=64 -mno-abicalls exception from\n\tthe documentation of -mexplicit-relocs.\n\nFrom-SVN: r78718", "tree": {"sha": "ed5c222d0fdded51607466b60be82b76a52949be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ed5c222d0fdded51607466b60be82b76a52949be"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e245bd81a7f00b326e92b716bb2a852acd9a7d1d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e245bd81a7f00b326e92b716bb2a852acd9a7d1d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e245bd81a7f00b326e92b716bb2a852acd9a7d1d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e245bd81a7f00b326e92b716bb2a852acd9a7d1d/comments", "author": null, "committer": null, "parents": [{"sha": "d0fe5ad3fdd9cead5941c0014822cbf07ee4e162", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0fe5ad3fdd9cead5941c0014822cbf07ee4e162", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0fe5ad3fdd9cead5941c0014822cbf07ee4e162"}], "stats": {"total": 312, "additions": 208, "deletions": 104}, "files": [{"sha": "f439fa08990c479a6ad39a277319a4b85ac21d15", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e245bd81a7f00b326e92b716bb2a852acd9a7d1d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e245bd81a7f00b326e92b716bb2a852acd9a7d1d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e245bd81a7f00b326e92b716bb2a852acd9a7d1d", "patch": "@@ -1,3 +1,25 @@\n+2004-03-01  Richard Sandiford  <rsandifo@redhat.com>\n+\n+\t* config/mips/mips-protos.h (enum mips_symbol_type): Move from mips.h.\n+\t(NUM_SYMBOL_TYPES): Likewise.\n+\t(SYMBOL_64_HIGH, SYMBOL_64_MID, SYMBOL_64_LOW): New symbol types.\n+\t(mips_unspec_address): Declare.\n+\t(mips_gotoff_page, mips_gotoff_global): Delete.\n+\t* config/mips/mips.h (PREDICATE_CODES): Add general_symbolic_operand.\n+\t* config/mips/mips.c (enum mips_symbol_type, NUM_SYMBOL_TYPES): Delete.\n+\t(mips_symbolic_constant_p, mips_symbolic_address_p)\n+\t(mips_symbol_insns): Handle new symbol types.\n+\t(general_symbolic_operand): New predicate.\n+\t(mips_unspec_address): Make extern.\n+\t(mips_gotoff_page, mips_gotoff_global): Delete.\n+\t(override_options): Allow -mabi=64 -mno-abicalls -mexplicit-relocs.\n+\tHandle new symbol types.\n+\t* config/mips/mips.md (*lea_high64, *lea64): New patterns.\n+\t(*xgot_hi[sd]i, *xgot_lo[sd]i, *got_disp[sd]i, *got_disp[sd]i): Call\n+\tmips_unspec_address directly.\n+\t* doc/invoke.texi: Remove the -mabi=64 -mno-abicalls exception from\n+\tthe documentation of -mexplicit-relocs.\n+\n 2004-03-01  Jeff Law  <law@redhat.com>\n \n \t* fold-const.c (fold): An equality comparison of a non-weak object"}, {"sha": "05a7983d1065b9024fc742d33bf149633da97878", "filename": "gcc/config/mips/mips-protos.h", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e245bd81a7f00b326e92b716bb2a852acd9a7d1d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e245bd81a7f00b326e92b716bb2a852acd9a7d1d/gcc%2Fconfig%2Fmips%2Fmips-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips-protos.h?ref=e245bd81a7f00b326e92b716bb2a852acd9a7d1d", "patch": "@@ -26,15 +26,76 @@ Boston, MA 02111-1307, USA.  */\n #ifndef GCC_MIPS_PROTOS_H\n #define GCC_MIPS_PROTOS_H\n \n+/* Classifies a SYMBOL_REF, LABEL_REF or UNSPEC address.\n+\n+   SYMBOL_GENERAL\n+       Used when none of the below apply.\n+\n+   SYMBOL_SMALL_DATA\n+       The symbol refers to something in a small data section.\n+\n+   SYMBOL_CONSTANT_POOL\n+       The symbol refers to something in the mips16 constant pool.\n+\n+   SYMBOL_GOT_LOCAL\n+       The symbol refers to local data that will be found using\n+       the global offset table.\n+\n+   SYMBOL_GOT_GLOBAL\n+       Likewise non-local data.\n+\n+   SYMBOL_GOTOFF_PAGE\n+       An UNSPEC wrapper around a SYMBOL_GOT_LOCAL.  It represents the\n+       offset from _gp of a GOT page entry.\n+\n+   SYMBOL_GOTOFF_GLOBAL\n+       An UNSPEC wrapper around a SYMBOL_GOT_GLOBAL.  It represents the\n+       the offset from _gp of the symbol's GOT entry.\n+\n+   SYMBOL_GOTOFF_CALL\n+       Like SYMBOL_GOTOFF_GLOBAL, but used when calling a global function.\n+       The GOT entry is allowed to point to a stub rather than to the\n+       function itself.\n+\n+   SYMBOL_GOTOFF_LOADGP\n+       An UNSPEC wrapper around a function's address.  It represents the\n+       offset of _gp from the start of the function.\n+\n+   SYMBOL_64_HIGH\n+       For a 64-bit symbolic address X, this is the value of\n+       (%highest(X) << 16) + %higher(X).\n+\n+   SYMBOL_64_MID\n+       For a 64-bit symbolic address X, this is the value of\n+       (%higher(X) << 16) + %hi(X).\n+\n+   SYMBOL_64_LOW\n+       For a 64-bit symbolic address X, this is the value of\n+       (%hi(X) << 16) + %lo(X).  */\n+enum mips_symbol_type {\n+  SYMBOL_GENERAL,\n+  SYMBOL_SMALL_DATA,\n+  SYMBOL_CONSTANT_POOL,\n+  SYMBOL_GOT_LOCAL,\n+  SYMBOL_GOT_GLOBAL,\n+  SYMBOL_GOTOFF_PAGE,\n+  SYMBOL_GOTOFF_GLOBAL,\n+  SYMBOL_GOTOFF_CALL,\n+  SYMBOL_GOTOFF_LOADGP,\n+  SYMBOL_64_HIGH,\n+  SYMBOL_64_MID,\n+  SYMBOL_64_LOW\n+};\n+#define NUM_SYMBOL_TYPES (SYMBOL_64_LOW + 1)\n+\n extern int mips_regno_mode_ok_for_base_p (int, enum machine_mode, int);\n extern int mips_address_insns (rtx, enum machine_mode);\n extern int mips_const_insns (rtx);\n extern int mips_fetch_insns (rtx);\n extern int mips_idiv_insns (void);\n extern bool mips_legitimate_address_p (enum machine_mode, rtx, int);\n+extern rtx mips_unspec_address (rtx, enum mips_symbol_type);\n extern bool mips_legitimize_address (rtx *, enum machine_mode);\n-extern rtx mips_gotoff_page (rtx);\n-extern rtx mips_gotoff_global (rtx);\n extern bool mips_legitimize_move (enum machine_mode, rtx, rtx);\n \n extern int m16_uimm3_b (rtx, enum machine_mode);"}, {"sha": "ad0e43e3aa126c2ba574ec81922325174624f7b1", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 50, "deletions": 81, "changes": 131, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e245bd81a7f00b326e92b716bb2a852acd9a7d1d/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e245bd81a7f00b326e92b716bb2a852acd9a7d1d/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=e245bd81a7f00b326e92b716bb2a852acd9a7d1d", "patch": "@@ -105,53 +105,6 @@ enum internal_test {\n    multi-instruction addu sequence.  Use 0x7fe0 to work around this.  */\n #define MIPS_MAX_FIRST_STACK_STEP (TARGET_MIPS16 ? 0x100 : 0x7fe0)\n \n-/* Classifies a SYMBOL_REF, LABEL_REF or UNSPEC address.\n-\n-   SYMBOL_GENERAL\n-       Used when none of the below apply.\n-\n-   SYMBOL_SMALL_DATA\n-       The symbol refers to something in a small data section.\n-\n-   SYMBOL_CONSTANT_POOL\n-       The symbol refers to something in the mips16 constant pool.\n-\n-   SYMBOL_GOT_LOCAL\n-       The symbol refers to local data that will be found using\n-       the global offset table.\n-\n-   SYMBOL_GOT_GLOBAL\n-       Likewise non-local data.\n-\n-   SYMBOL_GOTOFF_PAGE\n-       An UNSPEC wrapper around a SYMBOL_GOT_LOCAL.  It represents the\n-       offset from _gp of a GOT page entry.\n-\n-   SYMBOL_GOTOFF_GLOBAL\n-       An UNSPEC wrapper around a SYMBOL_GOT_GLOBAL.  It represents the\n-       the offset from _gp of the symbol's GOT entry.\n-\n-   SYMBOL_GOTOFF_CALL\n-       Like SYMBOL_GOTOFF_GLOBAL, but used when calling a global function.\n-       The GOT entry is allowed to point to a stub rather than to the\n-       function itself.\n-\n-   SYMBOL_GOTOFF_LOADGP\n-       An UNSPEC wrapper around a function's address.  It represents the\n-       offset of _gp from the start of the function.  */\n-enum mips_symbol_type {\n-  SYMBOL_GENERAL,\n-  SYMBOL_SMALL_DATA,\n-  SYMBOL_CONSTANT_POOL,\n-  SYMBOL_GOT_LOCAL,\n-  SYMBOL_GOT_GLOBAL,\n-  SYMBOL_GOTOFF_PAGE,\n-  SYMBOL_GOTOFF_GLOBAL,\n-  SYMBOL_GOTOFF_CALL,\n-  SYMBOL_GOTOFF_LOADGP\n-};\n-#define NUM_SYMBOL_TYPES (SYMBOL_GOTOFF_LOADGP + 1)\n-\n \n /* Classifies an address.\n \n@@ -196,7 +149,6 @@ static int mips_symbol_insns (enum mips_symbol_type);\n static bool mips16_unextended_reference_p (enum machine_mode mode, rtx, rtx);\n static rtx mips_force_temporary (rtx, rtx);\n static rtx mips_split_symbol (rtx, rtx);\n-static rtx mips_unspec_address (rtx, enum mips_symbol_type);\n static rtx mips_unspec_offset_high (rtx, rtx, rtx, enum mips_symbol_type);\n static rtx mips_add_offset (rtx, HOST_WIDE_INT);\n static unsigned int mips_build_shift (struct mips_integer_op *, HOST_WIDE_INT);\n@@ -951,6 +903,9 @@ mips_symbolic_constant_p (rtx x, enum mips_symbol_type *symbol_type)\n   switch (*symbol_type)\n     {\n     case SYMBOL_GENERAL:\n+    case SYMBOL_64_HIGH:\n+    case SYMBOL_64_MID:\n+    case SYMBOL_64_LOW:\n       /* If the target has 64-bit pointers and the object file only\n \t supports 32-bit symbols, the values of those symbols will be\n \t sign-extended.  In this case we can't allow an arbitrary offset\n@@ -1068,6 +1023,9 @@ mips_symbolic_address_p (enum mips_symbol_type symbol_type,\n     case SYMBOL_GOTOFF_GLOBAL:\n     case SYMBOL_GOTOFF_CALL:\n     case SYMBOL_GOTOFF_LOADGP:\n+    case SYMBOL_64_HIGH:\n+    case SYMBOL_64_MID:\n+    case SYMBOL_64_LOW:\n       return true;\n     }\n   abort ();\n@@ -1191,6 +1149,9 @@ mips_symbol_insns (enum mips_symbol_type type)\n     case SYMBOL_GOTOFF_GLOBAL:\n     case SYMBOL_GOTOFF_CALL:\n     case SYMBOL_GOTOFF_LOADGP:\n+    case SYMBOL_64_HIGH:\n+    case SYMBOL_64_MID:\n+    case SYMBOL_64_LOW:\n       /* Check whether the offset is a 16- or 32-bit value.  */\n       return mips_split_p[type] ? 2 : 1;\n     }\n@@ -1637,6 +1598,19 @@ symbolic_operand (rtx op, enum machine_mode mode ATTRIBUTE_UNUSED)\n }\n \n \n+/* Return true if OP is a symbolic constant of type SYMBOL_GENERAL.  */\n+\n+int\n+general_symbolic_operand (rtx op, enum machine_mode mode)\n+{\n+  enum mips_symbol_type symbol_type;\n+\n+  return ((mode == VOIDmode || mode == GET_MODE (op))\n+\t  && mips_symbolic_constant_p (op, &symbol_type)\n+\t  && symbol_type == SYMBOL_GENERAL);\n+}\n+\n+\n /* Return true if we're generating PIC and OP is a global symbol.  */\n \n int\n@@ -1728,7 +1702,7 @@ mips_split_symbol (rtx temp, rtx addr)\n /* Return an UNSPEC address with underlying address ADDRESS and symbol\n    type SYMBOL_TYPE.  */\n \n-static rtx\n+rtx\n mips_unspec_address (rtx address, enum mips_symbol_type symbol_type)\n {\n   rtx base;\n@@ -1761,25 +1735,6 @@ mips_unspec_offset_high (rtx temp, rtx base, rtx addr,\n }\n \n \n-/* Return the offset of a GOT page entry for local address ADDR.  */\n-\n-rtx\n-mips_gotoff_page (rtx addr)\n-{\n-  return mips_unspec_address (addr, SYMBOL_GOTOFF_PAGE);\n-}\n-\n-\n-/* Return the offset of ADDR's GOT entry from _gp.  ADDR is a\n-   global_got_operand.  */\n-\n-rtx\n-mips_gotoff_global (rtx addr)\n-{\n-  return mips_unspec_address (addr, SYMBOL_GOTOFF_GLOBAL);\n-}\n-\n-\n /* Return a legitimate address for REG + OFFSET.  This function will\n    create a temporary register if OFFSET is not a SMALL_OPERAND.  */\n \n@@ -4861,15 +4816,6 @@ override_options (void)\n   else\n     mips_split_addresses = 0;\n \n-  /* -mexplicit-relocs doesn't yet support non-PIC n64.  We don't know\n-     how to generate %highest/%higher/%hi/%lo sequences.  */\n-  if (mips_abi == ABI_64 && !TARGET_ABICALLS)\n-    {\n-      if ((target_flags_explicit & target_flags & MASK_EXPLICIT_RELOCS) != 0)\n-\tsorry (\"non-PIC n64 with explicit relocations\");\n-      target_flags &= ~MASK_EXPLICIT_RELOCS;\n-    }\n-\n   /* Explicit relocations for \"old\" ABIs are a GNU extension.  Unless\n      the user has said otherwise, assume that they are not available\n      with assemblers other than gas.  */\n@@ -5065,11 +5011,34 @@ override_options (void)\n   /* Function to allocate machine-dependent function status.  */\n   init_machine_status = &mips_init_machine_status;\n \n-  if (TARGET_EXPLICIT_RELOCS || mips_split_addresses)\n+  if (ABI_HAS_64BIT_SYMBOLS)\n     {\n-      mips_split_p[SYMBOL_GENERAL] = true;\n-      mips_hi_relocs[SYMBOL_GENERAL] = \"%hi(\";\n-      mips_lo_relocs[SYMBOL_GENERAL] = \"%lo(\";\n+      if (TARGET_EXPLICIT_RELOCS)\n+\t{\n+\t  mips_split_p[SYMBOL_64_HIGH] = true;\n+\t  mips_hi_relocs[SYMBOL_64_HIGH] = \"%highest(\";\n+\t  mips_lo_relocs[SYMBOL_64_HIGH] = \"%higher(\";\n+\n+\t  mips_split_p[SYMBOL_64_MID] = true;\n+\t  mips_hi_relocs[SYMBOL_64_MID] = \"%higher(\";\n+\t  mips_lo_relocs[SYMBOL_64_MID] = \"%hi(\";\n+\n+\t  mips_split_p[SYMBOL_64_LOW] = true;\n+\t  mips_hi_relocs[SYMBOL_64_LOW] = \"%hi(\";\n+\t  mips_lo_relocs[SYMBOL_64_LOW] = \"%lo(\";\n+\n+\t  mips_split_p[SYMBOL_GENERAL] = true;\n+\t  mips_lo_relocs[SYMBOL_GENERAL] = \"%lo(\";\n+\t}\n+    }\n+  else\n+    {\n+      if (TARGET_EXPLICIT_RELOCS || mips_split_addresses)\n+\t{\n+\t  mips_split_p[SYMBOL_GENERAL] = true;\n+\t  mips_hi_relocs[SYMBOL_GENERAL] = \"%hi(\";\n+\t  mips_lo_relocs[SYMBOL_GENERAL] = \"%lo(\";\n+\t}\n     }\n \n   if (TARGET_MIPS16)"}, {"sha": "585b6f1301312eb6dfc5673453f9b0fef4359e8e", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e245bd81a7f00b326e92b716bb2a852acd9a7d1d/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e245bd81a7f00b326e92b716bb2a852acd9a7d1d/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=e245bd81a7f00b326e92b716bb2a852acd9a7d1d", "patch": "@@ -2698,6 +2698,7 @@ typedef struct mips_args {\n #define PREDICATE_CODES\t\t\t\t\t\t\t\\\n   {\"uns_arith_operand\",\t\t{ REG, CONST_INT, SUBREG, ADDRESSOF }},\t\\\n   {\"symbolic_operand\",\t\t{ CONST, SYMBOL_REF, LABEL_REF }},\t\\\n+  {\"general_symbolic_operand\",\t{ CONST, SYMBOL_REF, LABEL_REF }},\t\\\n   {\"global_got_operand\",\t{ CONST, SYMBOL_REF, LABEL_REF }},\t\\\n   {\"local_got_operand\",\t\t{ CONST, SYMBOL_REF, LABEL_REF }},\t\\\n   {\"const_arith_operand\",\t{ CONST_INT }},\t\t\t\t\\"}, {"sha": "fa74ee2a679176829ffea0cc190db45560f7b43c", "filename": "gcc/config/mips/mips.md", "status": "modified", "additions": 69, "deletions": 8, "changes": 77, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e245bd81a7f00b326e92b716bb2a852acd9a7d1d/gcc%2Fconfig%2Fmips%2Fmips.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e245bd81a7f00b326e92b716bb2a852acd9a7d1d/gcc%2Fconfig%2Fmips%2Fmips.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.md?ref=e245bd81a7f00b326e92b716bb2a852acd9a7d1d", "patch": "@@ -4233,6 +4233,67 @@ dsrl\\t%3,%3,1\\n\\\n   [(set_attr \"type\" \"store\")\n    (set_attr \"mode\" \"DI\")])\n \n+;; An instruction to calculate the high part of a 64-bit SYMBOL_GENERAL.\n+;; The required value is:\n+;;\n+;;\t(%highest(op1) << 48) + (%higher(op1) << 32) + (%hi(op1) << 16)\n+;;\n+;; which translates to:\n+;;\n+;;\tlui\top0,%highest(op1)\n+;;\tdaddiu\top0,op0,%higher(op1)\n+;;\tdsll\top0,op0,16\n+;;\tdaddiu\top0,op0,%hi(op1)\n+;;\tdsll\top0,op0,16\n+(define_insn_and_split \"*lea_high64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(high:DI (match_operand:DI 1 \"general_symbolic_operand\" \"\")))]\n+  \"TARGET_EXPLICIT_RELOCS && ABI_HAS_64BIT_SYMBOLS\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (high:DI (match_dup 2)))\n+   (set (match_dup 0) (lo_sum:DI (match_dup 0) (match_dup 2)))\n+   (set (match_dup 0) (ashift:DI (match_dup 0) (const_int 16)))\n+   (set (match_dup 0) (lo_sum:DI (match_dup 0) (match_dup 3)))\n+   (set (match_dup 0) (ashift:DI (match_dup 0) (const_int 16)))]\n+{\n+  operands[2] = mips_unspec_address (operands[1], SYMBOL_64_HIGH);\n+  operands[3] = mips_unspec_address (operands[1], SYMBOL_64_MID);\n+}\n+  [(set_attr \"length\" \"20\")])\n+\n+;; On most targets, the expansion of (lo_sum (high X) X) for a 64-bit\n+;; SYMBOL_GENERAL X will take 6 cycles.  This next pattern allows combine\n+;; to merge the HIGH and LO_SUM parts of a move if the HIGH part is only\n+;; used once.  We can then use the sequence:\n+;;\n+;;\tlui\top0,%highest(op1)\n+;;\tlui\top2,%hi(op1)\n+;;\tdaddiu\top0,op0,%higher(op1)\n+;;\tdaddiu\top2,op2,%lo(op1)\n+;;\tdsll32\top0,op0,0\n+;;\tdaddu\top0,op0,op2\n+;;\n+;; which takes 4 cycles on most superscalar targets.\n+(define_insn_and_split \"*lea64\"\n+  [(set (match_operand:DI 0 \"register_operand\" \"=d\")\n+\t(match_operand:DI 1 \"general_symbolic_operand\" \"\"))\n+   (clobber (match_scratch:DI 2 \"=&d\"))]\n+  \"TARGET_EXPLICIT_RELOCS && ABI_HAS_64BIT_SYMBOLS && cse_not_expected\"\n+  \"#\"\n+  \"&& reload_completed\"\n+  [(set (match_dup 0) (high:DI (match_dup 3)))\n+   (set (match_dup 2) (high:DI (match_dup 4)))\n+   (set (match_dup 0) (lo_sum:DI (match_dup 0) (match_dup 3)))\n+   (set (match_dup 2) (lo_sum:DI (match_dup 2) (match_dup 4)))\n+   (set (match_dup 0) (ashift:DI (match_dup 0) (const_int 32)))\n+   (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 2)))]\n+{\n+  operands[3] = mips_unspec_address (operands[1], SYMBOL_64_HIGH);\n+  operands[4] = mips_unspec_address (operands[1], SYMBOL_64_LOW);\n+}\n+  [(set_attr \"length\" \"24\")])\n+\n ;; Insns to fetch a global symbol from a big GOT.\n \n (define_insn_and_split \"*xgot_hisi\"\n@@ -4244,7 +4305,7 @@ dsrl\\t%3,%3,1\\n\\\n   [(set (match_dup 0) (high:SI (match_dup 2)))\n    (set (match_dup 0) (plus:SI (match_dup 0) (match_dup 3)))]\n {\n-  operands[2] = mips_gotoff_global (operands[1]);\n+  operands[2] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_GLOBAL);\n   operands[3] = pic_offset_table_rtx;\n }\n   [(set_attr \"got\" \"xgot_high\")])\n@@ -4258,7 +4319,7 @@ dsrl\\t%3,%3,1\\n\\\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n \t(unspec:SI [(match_dup 1) (match_dup 3)] UNSPEC_LOAD_GOT))]\n-  { operands[3] = mips_gotoff_global (operands[2]); }\n+  { operands[3] = mips_unspec_address (operands[2], SYMBOL_GOTOFF_GLOBAL); }\n   [(set_attr \"got\" \"load\")])\n \n (define_insn_and_split \"*xgot_hidi\"\n@@ -4270,7 +4331,7 @@ dsrl\\t%3,%3,1\\n\\\n   [(set (match_dup 0) (high:DI (match_dup 2)))\n    (set (match_dup 0) (plus:DI (match_dup 0) (match_dup 3)))]\n {\n-  operands[2] = mips_gotoff_global (operands[1]);\n+  operands[2] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_GLOBAL);\n   operands[3] = pic_offset_table_rtx;\n }\n   [(set_attr \"got\" \"xgot_high\")])\n@@ -4284,7 +4345,7 @@ dsrl\\t%3,%3,1\\n\\\n   \"&& reload_completed\"\n   [(set (match_dup 0)\n \t(unspec:DI [(match_dup 1) (match_dup 3)] UNSPEC_LOAD_GOT))]\n-  { operands[3] = mips_gotoff_global (operands[2]); }\n+  { operands[3] = mips_unspec_address (operands[2], SYMBOL_GOTOFF_GLOBAL); }\n   [(set_attr \"got\" \"load\")])\n \n ;; Insns to fetch a global symbol from a normal GOT.\n@@ -4299,7 +4360,7 @@ dsrl\\t%3,%3,1\\n\\\n \t(unspec:SI [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n {\n   operands[2] = pic_offset_table_rtx;\n-  operands[3] = mips_gotoff_global (operands[1]);\n+  operands[3] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_GLOBAL);\n }\n   [(set_attr \"got\" \"load\")])\n \n@@ -4313,7 +4374,7 @@ dsrl\\t%3,%3,1\\n\\\n \t(unspec:DI [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n {\n   operands[2] = pic_offset_table_rtx;\n-  operands[3] = mips_gotoff_global (operands[1]);\n+  operands[3] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_GLOBAL);\n }\n   [(set_attr \"got\" \"load\")])\n \n@@ -4329,7 +4390,7 @@ dsrl\\t%3,%3,1\\n\\\n \t(unspec:SI [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n {\n   operands[2] = pic_offset_table_rtx;\n-  operands[3] = mips_gotoff_page (operands[1]);\n+  operands[3] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_PAGE);\n }\n   [(set_attr \"got\" \"load\")])\n \n@@ -4343,7 +4404,7 @@ dsrl\\t%3,%3,1\\n\\\n \t(unspec:DI [(match_dup 2) (match_dup 3)] UNSPEC_LOAD_GOT))]\n {\n   operands[2] = pic_offset_table_rtx;\n-  operands[3] = mips_gotoff_page (operands[1]);\n+  operands[3] = mips_unspec_address (operands[1], SYMBOL_GOTOFF_PAGE);\n }\n   [(set_attr \"got\" \"load\")])\n "}, {"sha": "a3e6232372fe42fca3aa297e350f7bc9c6663e64", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e245bd81a7f00b326e92b716bb2a852acd9a7d1d/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e245bd81a7f00b326e92b716bb2a852acd9a7d1d/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=e245bd81a7f00b326e92b716bb2a852acd9a7d1d", "patch": "@@ -7966,24 +7966,14 @@ Use (do not use) assembler relocation operators when dealing with symbolic\n addresses.  The alternative, selected by @option{-mno-explicit-relocs},\n is to use assembler macros instead.\n \n-@option{-mexplicit-relocs} is usually the default if GCC was\n-configured to use an assembler that supports relocation operators.\n-However, there are two exceptions:\n-\n-@itemize @bullet\n-@item\n-GCC is not yet able to generate explicit relocations for the combination\n-of @option{-mabi=64} and @option{-mno-abicalls}.  This will be addressed\n-in a future release.\n-\n-@item\n-The combination of @option{-mabicalls} and @option{-fno-unit-at-a-time}\n+@option{-mexplicit-relocs} is usually the default if GCC was configured\n+to use an assembler that supports relocation operators.  However, the\n+combination of @option{-mabicalls} and @option{-fno-unit-at-a-time}\n implies @option{-mno-explicit-relocs} unless explicitly overridden.\n This is because, when generating abicalls, the choice of relocation\n depends on whether a symbol is local or global.  In some rare cases,\n GCC will not be able to decide this until the whole compilation unit\n has been read.\n-@end itemize\n \n @item -mrnames\n @itemx -mno-rnames"}]}