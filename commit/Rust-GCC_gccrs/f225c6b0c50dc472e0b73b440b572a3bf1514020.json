{"sha": "f225c6b0c50dc472e0b73b440b572a3bf1514020", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjIyNWM2YjBjNTBkYzQ3MmUwYjczYjQ0MGI1NzJhM2JmMTUxNDAyMA==", "commit": {"author": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-03-24T19:27:27Z"}, "committer": {"name": "Martin Jambor", "email": "mjambor@suse.cz", "date": "2021-03-24T19:27:27Z"}, "message": "ipa: Check that scalar types that IPA-CP comes up with are sane (PR99122)\n\nThis patch fixes the last bit of PR 99122 where various bits of IPA\ninfrastructure are presented with a program with type mismatches that\nmake it have undefined behavior, and when inlining or performing\nIPA-CP, and encountering such mismatch, we basically try to\nVIEW_CONVERT_EXPR whatever the caller has into whatever the callee has\nor simply use an empty constructor if that cannot be done.  This\nhowever does not work when the callee has VLA parameters because we\nICE in the process.\n\nRichi has already disabled inlining for such cases, this patch avoids\nthe issue in IPA-CP.  It adds checks that whatever constant the\npropagation arrived at is actually compatible or fold_convertible to\nthe callees formal parameer type.  Unlike in the past, we now have\ntypes of all parameters of functions that we have analyzed, even with\nLTO, and so can do it.\n\nThis should prevent only bogus propagations.  I have looked at the\neffect of the patch on WPA of Firefox and did not have any.\n\nI have bootstrapped and LTO bootstrapped and tested the patch on\nx86_64-linux.  OK for trunk?  And perhaps later for GCC 10 too?\n\nThanks\n\ngcc/ChangeLog:\n\n2021-02-26  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/99122\n\t* ipa-cp.c (initialize_node_lattices): Mark as bottom all\n\tparameters with unknown type.\n\t(ipacp_value_safe_for_type): New function.\n\t(propagate_vals_across_arith_jfunc): Verify that the constant type\n\tcan be used for a type of the formal parameter.\n\t(propagate_vals_across_ancestor): Likewise.\n\t(propagate_scalar_across_jump_function): Likewise.  Pass the type\n\talso to propagate_vals_across_ancestor.\n\ngcc/testsuite/ChangeLog:\n\n2021-02-26  Martin Jambor  <mjambor@suse.cz>\n\n\tPR ipa/99122\n\t* gcc.dg/pr99122-3.c: Remove -fno-ipa-cp from options.", "tree": {"sha": "052304bf379d8d74a2ecb7b3f58b89fec8462e76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/052304bf379d8d74a2ecb7b3f58b89fec8462e76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f225c6b0c50dc472e0b73b440b572a3bf1514020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f225c6b0c50dc472e0b73b440b572a3bf1514020", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f225c6b0c50dc472e0b73b440b572a3bf1514020", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f225c6b0c50dc472e0b73b440b572a3bf1514020/comments", "author": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamborm", "id": 2180070, "node_id": "MDQ6VXNlcjIxODAwNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/2180070?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamborm", "html_url": "https://github.com/jamborm", "followers_url": "https://api.github.com/users/jamborm/followers", "following_url": "https://api.github.com/users/jamborm/following{/other_user}", "gists_url": "https://api.github.com/users/jamborm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamborm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamborm/subscriptions", "organizations_url": "https://api.github.com/users/jamborm/orgs", "repos_url": "https://api.github.com/users/jamborm/repos", "events_url": "https://api.github.com/users/jamborm/events{/privacy}", "received_events_url": "https://api.github.com/users/jamborm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79cdbabbc4cbf79491c274220928406dff3d4039", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/79cdbabbc4cbf79491c274220928406dff3d4039", "html_url": "https://github.com/Rust-GCC/gccrs/commit/79cdbabbc4cbf79491c274220928406dff3d4039"}], "stats": {"total": 39, "additions": 31, "deletions": 8}, "files": [{"sha": "6041f75d8242ccf49fbdaffadd0a7886fb6065fe", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 30, "deletions": 7, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f225c6b0c50dc472e0b73b440b572a3bf1514020/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f225c6b0c50dc472e0b73b440b572a3bf1514020/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=f225c6b0c50dc472e0b73b440b572a3bf1514020", "patch": "@@ -1276,6 +1276,7 @@ initialize_node_lattices (struct cgraph_node *node)\n     {\n       ipcp_param_lattices *plats = ipa_get_parm_lattices (info, i);\n       if (disable\n+\t  || !ipa_get_type (info, i)\n \t  || (pre_modified && (surviving_params.length () <= (unsigned) i\n \t\t\t       || !surviving_params[i])))\n \t{\n@@ -1304,6 +1305,21 @@ initialize_node_lattices (struct cgraph_node *node)\n       }\n }\n \n+/* Return true if VALUE can be safely IPA-CP propagated to a parameter of type\n+   PARAM_TYPE.  */\n+\n+static bool\n+ipacp_value_safe_for_type (tree param_type, tree value)\n+{\n+  tree val_type = TREE_TYPE (value);\n+  if (param_type == val_type\n+      || useless_type_conversion_p (param_type, val_type)\n+      || fold_convertible_p (param_type, value))\n+    return true;\n+  else\n+    return false;\n+}\n+\n /* Return true iff X and Y should be considered equal values by IPA-CP.  */\n \n static bool\n@@ -2072,7 +2088,8 @@ propagate_vals_across_arith_jfunc (cgraph_edge *cs,\n \t    {\n \t      tree cstval = get_val_across_arith_op (opcode, opnd1_type, opnd2,\n \t\t\t\t\t\t     src_val, res_type);\n-\t      if (!cstval)\n+\t      if (!cstval\n+\t\t  || !ipacp_value_safe_for_type (res_type, cstval))\n \t\tbreak;\n \n \t      ret |= dest_lat->add_value (cstval, cs, src_val, src_idx,\n@@ -2096,7 +2113,8 @@ propagate_vals_across_arith_jfunc (cgraph_edge *cs,\n \n \ttree cstval = get_val_across_arith_op (opcode, opnd1_type, opnd2,\n \t\t\t\t\t       src_val, res_type);\n-\tif (cstval)\n+\tif (cstval\n+\t    && ipacp_value_safe_for_type (res_type, cstval))\n \t  ret |= dest_lat->add_value (cstval, cs, src_val, src_idx,\n \t\t\t\t      src_offset);\n \telse\n@@ -2132,7 +2150,8 @@ static bool\n propagate_vals_across_ancestor (struct cgraph_edge *cs,\n \t\t\t\tstruct ipa_jump_func *jfunc,\n \t\t\t\tipcp_lattice<tree> *src_lat,\n-\t\t\t\tipcp_lattice<tree> *dest_lat, int src_idx)\n+\t\t\t\tipcp_lattice<tree> *dest_lat, int src_idx,\n+\t\t\t\ttree param_type)\n {\n   ipcp_value<tree> *src_val;\n   bool ret = false;\n@@ -2144,7 +2163,7 @@ propagate_vals_across_ancestor (struct cgraph_edge *cs,\n     {\n       tree t = ipa_get_jf_ancestor_result (jfunc, src_val->value);\n \n-      if (t)\n+      if (t && ipacp_value_safe_for_type (param_type, t))\n \tret |= dest_lat->add_value (t, cs, src_val, src_idx);\n       else\n \tret |= dest_lat->set_contains_variable ();\n@@ -2169,7 +2188,10 @@ propagate_scalar_across_jump_function (struct cgraph_edge *cs,\n   if (jfunc->type == IPA_JF_CONST)\n     {\n       tree val = ipa_get_jf_constant (jfunc);\n-      return dest_lat->add_value (val, cs, NULL, 0);\n+      if (ipacp_value_safe_for_type (param_type, val))\n+\treturn dest_lat->add_value (val, cs, NULL, 0);\n+      else\n+\treturn dest_lat->set_contains_variable ();\n     }\n   else if (jfunc->type == IPA_JF_PASS_THROUGH\n \t   || jfunc->type == IPA_JF_ANCESTOR)\n@@ -2196,10 +2218,11 @@ propagate_scalar_across_jump_function (struct cgraph_edge *cs,\n \n       if (jfunc->type == IPA_JF_PASS_THROUGH)\n \tret = propagate_vals_across_pass_through (cs, jfunc, src_lat,\n-\t\t\t\t\t\t  dest_lat, src_idx, param_type);\n+\t\t\t\t\t\t  dest_lat, src_idx,\n+\t\t\t\t\t\t  param_type);\n       else\n \tret = propagate_vals_across_ancestor (cs, jfunc, src_lat, dest_lat,\n-\t\t\t\t\t      src_idx);\n+\t\t\t\t\t      src_idx, param_type);\n \n       if (src_lat->contains_variable)\n \tret |= dest_lat->set_contains_variable ();"}, {"sha": "6a908ad86c0428e4ce9cc694bb2a2c700b91cd41", "filename": "gcc/testsuite/gcc.dg/pr99122-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f225c6b0c50dc472e0b73b440b572a3bf1514020/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99122-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f225c6b0c50dc472e0b73b440b572a3bf1514020/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99122-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr99122-3.c?ref=f225c6b0c50dc472e0b73b440b572a3bf1514020", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -g -fno-ipa-cp -w\" } */\n+/* { dg-options \"-O2 -g -w\" } */\n \n static int foo ();\n "}]}