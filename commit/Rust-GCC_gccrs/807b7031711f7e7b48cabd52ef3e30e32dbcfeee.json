{"sha": "807b7031711f7e7b48cabd52ef3e30e32dbcfeee", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODA3YjcwMzE3MTFmN2U3YjQ4Y2FiZDUyZWYzZTMwZTMyZGJjZmVlZQ==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2013-11-25T18:24:57Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2013-11-25T18:24:57Z"}, "message": "tree-ssa-threadupdate.c (thread_through_all_blocks): Selectively invalidate loop information.\n\n\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Selectively\n\tinvalidate loop information.\n\nFrom-SVN: r205361", "tree": {"sha": "d3d0304d1b85dd1a1617c991fefb0a307f3f5599", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d3d0304d1b85dd1a1617c991fefb0a307f3f5599"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/807b7031711f7e7b48cabd52ef3e30e32dbcfeee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807b7031711f7e7b48cabd52ef3e30e32dbcfeee", "html_url": "https://github.com/Rust-GCC/gccrs/commit/807b7031711f7e7b48cabd52ef3e30e32dbcfeee", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807b7031711f7e7b48cabd52ef3e30e32dbcfeee/comments", "author": null, "committer": null, "parents": [{"sha": "82552a29d4a6018eed326575e5a2a2e9baa2084a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82552a29d4a6018eed326575e5a2a2e9baa2084a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82552a29d4a6018eed326575e5a2a2e9baa2084a"}], "stats": {"total": 43, "additions": 14, "deletions": 29}, "files": [{"sha": "28b415bd44e7e1892b361146468e7771072f8f5a", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807b7031711f7e7b48cabd52ef3e30e32dbcfeee/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807b7031711f7e7b48cabd52ef3e30e32dbcfeee/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=807b7031711f7e7b48cabd52ef3e30e32dbcfeee", "patch": "@@ -1,3 +1,8 @@\n+2013-11-25  Jeff Law  <law@redhat.com>\n+\n+\t* tree-ssa-threadupdate.c (thread_through_all_blocks): Selectively\n+\tinvalidate loop information.\n+\n 2013-11-25  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \t* config/sh/sh.md (doloop_end_split): Add missing SI mode."}, {"sha": "1a52e4702fa00e015ba6b069c422464999062923", "filename": "gcc/tree-ssa-threadupdate.c", "status": "modified", "additions": 9, "deletions": 29, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807b7031711f7e7b48cabd52ef3e30e32dbcfeee/gcc%2Ftree-ssa-threadupdate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807b7031711f7e7b48cabd52ef3e30e32dbcfeee/gcc%2Ftree-ssa-threadupdate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-threadupdate.c?ref=807b7031711f7e7b48cabd52ef3e30e32dbcfeee", "patch": "@@ -1579,7 +1579,6 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n   bitmap_iterator bi;\n   bitmap threaded_blocks;\n   struct loop *loop;\n-  bool totally_clobbered_loops = false;\n \n   /* We must know about loops in order to preserve them.  */\n   gcc_assert (current_loops != NULL);\n@@ -1675,9 +1674,15 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n \t\t/* Our path is still valid, thread it.  */\n \t        if (e->aux)\n \t\t  {\n-\t\t    totally_clobbered_loops\n-\t\t      |= thread_block ((*path)[0]->e->dest, false);\n+\t\t    struct loop *loop = (*path)[0]->e->dest->loop_father;\n+\n+\t\t    retval |= thread_block ((*path)[0]->e->dest, false);\n \t\t    e->aux = NULL;\n+\n+\t\t    /* This jump thread likely totally scrambled this loop.\n+\t\t       So arrange for it to be fixed up.  */\n+\t\t    loop->header = NULL;\n+\t\t    loop->latch = NULL;\n \t\t  }\n \t      }\n \t   else\n@@ -1700,32 +1705,7 @@ thread_through_all_blocks (bool may_peel_loop_headers)\n   threaded_blocks = NULL;\n   paths.release ();\n \n-  /* If we made changes to the CFG that might have totally messed\n-     up the loop structure, then drop the old loop structure and\n-     rebuild.  */\n-  if (totally_clobbered_loops)\n-    {\n-      /* Release the current loop structures, they are totally\n-\t clobbered at this point.  */\n-      loop_optimizer_finalize ();\n-      current_loops = NULL;\n-\n-      /* Similarly for dominance information.  */\n-      free_dominance_info (CDI_DOMINATORS);\n-      free_dominance_info (CDI_POST_DOMINATORS);\n-\n-      /* Before we can rebuild the loop structures, we need dominators,\n-\t which requires no unreachable code.  So remove unreachable code.  */\n-      delete_unreachable_blocks ();\n-\n-      /* Now rebuild the loop structures.  */\n-      cfun->curr_properties &= ~PROP_loops;\n-      loop_optimizer_init (AVOID_CFG_MODIFICATIONS);\n-      cfun->curr_properties |= PROP_loops;\n-      retval = 1;\n-    }\n-\n-  if (retval && current_loops)\n+  if (retval)\n     loops_state_set (LOOPS_NEED_FIXUP);\n \n   return retval;"}]}