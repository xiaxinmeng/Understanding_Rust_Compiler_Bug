{"sha": "dd36d4e1da63d53dadd70ab711422ff925c6ee45", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGQzNmQ0ZTFkYTYzZDUzZGFkZDcwYWI3MTE0MjJmZjkyNWM2ZWU0NQ==", "commit": {"author": {"name": "Kazu Hirata", "email": "kazu@codesourcery.com", "date": "2005-11-05T20:34:08Z"}, "committer": {"name": "Kazu Hirata", "email": "kazu@gcc.gnu.org", "date": "2005-11-05T20:34:08Z"}, "message": "* decl2.c, init.c, typeck.c: Fix comment typos.\n\nFrom-SVN: r106533", "tree": {"sha": "1b4049b6f45d2784ecadd87b5005d6ee7089f90d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1b4049b6f45d2784ecadd87b5005d6ee7089f90d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dd36d4e1da63d53dadd70ab711422ff925c6ee45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd36d4e1da63d53dadd70ab711422ff925c6ee45", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dd36d4e1da63d53dadd70ab711422ff925c6ee45", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dd36d4e1da63d53dadd70ab711422ff925c6ee45/comments", "author": null, "committer": null, "parents": [{"sha": "c83eecadfde96f31d483f70c043572cfb24d9575", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c83eecadfde96f31d483f70c043572cfb24d9575", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c83eecadfde96f31d483f70c043572cfb24d9575"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "191bedf8690b0e9485311484a99c28c06235a7ce", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd36d4e1da63d53dadd70ab711422ff925c6ee45/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd36d4e1da63d53dadd70ab711422ff925c6ee45/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dd36d4e1da63d53dadd70ab711422ff925c6ee45", "patch": "@@ -1,3 +1,7 @@\n+2005-11-05  Kazu Hirata  <kazu@codesourcery.com>\n+\n+\t* decl2.c, init.c, typeck.c: Fix comment typos.\n+\n 2005-11-04  Richard Guenther  <rguenther@suse.de>\n \n \tPR c++/22487"}, {"sha": "77ac5f7ae9ea56e29bde4fd52d6891c249f6918f", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd36d4e1da63d53dadd70ab711422ff925c6ee45/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd36d4e1da63d53dadd70ab711422ff925c6ee45/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=dd36d4e1da63d53dadd70ab711422ff925c6ee45", "patch": "@@ -2320,7 +2320,7 @@ get_priority_info (int priority)\n \t((!DECL_HAS_INIT_PRIORITY_P (decl) || DECL_INIT_PRIORITY (decl) == 0) \\\n \t ? DEFAULT_INIT_PRIORITY : DECL_INIT_PRIORITY (decl))\n \n-/* Wether a DECL needs a guard to protect it against multiple\n+/* Whether a DECL needs a guard to protect it against multiple\n    initialization.  */\n \n #define NEEDS_GUARD_P(decl) (TREE_PUBLIC (decl) && (DECL_COMMON (decl)      \\"}, {"sha": "f43846719e5873a89106a40e57213f137d2f6b80", "filename": "gcc/cp/init.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd36d4e1da63d53dadd70ab711422ff925c6ee45/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd36d4e1da63d53dadd70ab711422ff925c6ee45/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=dd36d4e1da63d53dadd70ab711422ff925c6ee45", "patch": "@@ -1604,7 +1604,7 @@ constant_value_1 (tree decl, bool integral_p)\n \t      : (!TREE_CONSTANT (init)\n \t\t /* Do not return an aggregate constant (of which\n \t\t    string literals are a special case), as we do not\n-\t\t    want to make inadvertant copies of such entities,\n+\t\t    want to make inadvertent copies of such entities,\n \t\t    and we must be sure that their addresses are the\n \t\t    same everywhere.  */\n \t\t || TREE_CODE (init) == CONSTRUCTOR"}, {"sha": "b9be6fd694ff6601eb26340f2de58f6961d27f7b", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dd36d4e1da63d53dadd70ab711422ff925c6ee45/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dd36d4e1da63d53dadd70ab711422ff925c6ee45/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=dd36d4e1da63d53dadd70ab711422ff925c6ee45", "patch": "@@ -1858,7 +1858,7 @@ check_template_keyword (tree decl)\n      DR 228 removed the restriction that the template be a member\n      template.  \n      \n-     DR 96, if accepted would add the further restriction that explcit\n+     DR 96, if accepted would add the further restriction that explicit\n      template arguments must be provided if the template keyword is\n      used, but, as of 2005-10-16, that DR is still in \"drafting\".  If\n      this DR is accepted, then the semantic checks here can be"}]}