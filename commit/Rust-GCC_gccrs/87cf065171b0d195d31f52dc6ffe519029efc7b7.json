{"sha": "87cf065171b0d195d31f52dc6ffe519029efc7b7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODdjZjA2NTE3MWIwZDE5NWQzMWY1MmRjNmZmZTUxOTAyOWVmYzdiNw==", "commit": {"author": {"name": "Simon Baldwin", "email": "simonb@gcc.gnu.org", "date": "2010-04-07T17:18:10Z"}, "committer": {"name": "Simon Baldwin", "email": "simonb@gcc.gnu.org", "date": "2010-04-07T17:18:10Z"}, "message": "diagnostic.h (diagnostic_override_option_index): New macro to set a diagnostic's option_index.\n\n\t* diagnostic.h (diagnostic_override_option_index): New macro to\n\tset a diagnostic's option_index.\n\t* c-tree.h (c_cpp_error): Add warning reason argument.\n\t* opts.c (_warning_as_error_callback): New.\n\t(register_warning_as_error_callback): Store callback for\n\twarnings enabled via enable_warning_as_error.\n\t(enable_warning_as_error): Call callback, minor code tidy.\n\t* opts.h (register_warning_as_error_callback): Declare.\n\t* c-opts.c (warning_as_error_callback): New, set cpp_opts flag in\n\tresponse to -Werror=.\n\t(c_common_init_options): Register warning_as_error_callback in opts.c.\n\t* common.opt: Add -Wno-cpp option.\n\t* c-common.c (struct reason_option_codes_t): Map cpp warning\n\treason codes to gcc option indexes.\n\t* (c_option_controlling_cpp_error): New function, lookup the gcc\n\toption index for a cpp warning reason code.\n\t* (c_cpp_error): Add warning reason argument, call\n\tc_option_controlling_cpp_error for diagnostic_override_option_index.\n\t* doc/invoke.texi: Document -Wno-cpp.\n\n\t* cpp.c (cb_cpp_error): Add warning reason argument, set a value\n\tfor diagnostic_override_option_index if CPP_W_WARNING_DIRECTIVE.\n\n\t* directives.c (do_diagnostic): Add warning reason argument,\n\tcall appropriate error reporting function for code.\n\t(directive_diagnostics): Call specific warning functions with\n\twarning reason where appropriate.\n\t(do_error, do_warning, do_pragma_dependency): Add warning reason\n\targument to do_diagnostic calls.\n\t* macro.c (_cpp_warn_if_unused_macro, enter_macro_context,\n\t_cpp_create_definition): Call specific warning functions with\n        warning reason where appropriate.\n\t* Makefile.in: Add new diagnostic functions to gettext translations.\n\t* include/cpplib.h (struct cpp_callbacks): Add warning reason code\n\tto error callback.\n\t(CPP_DL_WARNING, CPP_DL_WARNING_SYSHDR, CPP_DL_PEDWARN, CPP_DL_ERROR,\n\tCPP_DL_ICE, CPP_DL_NOTE, CPP_DL_FATAL): Replace macros with enums.\n\t(CPP_W_NONE, CPP_W_DEPRECATED, CPP_W_COMMENTS,\n\tCPP_W_MISSING_INCLUDE_DIRS, CPP_W_TRIGRAPHS, CPP_W_MULTICHAR,\n\tCPP_W_TRADITIONAL, CPP_W_LONG_LONG, CPP_W_ENDIF_LABELS,\n\tCPP_W_NUM_SIGN_CHANGE, CPP_W_VARIADIC_MACROS,\n\tCPP_W_BUILTIN_MACRO_REDEFINED, CPP_W_DOLLARS, CPP_W_UNDEF,\n\tCPP_W_UNUSED_MACROS, CPP_W_CXX_OPERATOR_NAMES, CPP_W_NORMALIZE,\n\tCPP_W_INVALID_PCH, CPP_W_WARNING_DIRECTIVE): New enums for cpp\n\twarning reason codes.\n\t(cpp_warning, cpp_pedwarning, cpp_warning_syshdr,\n\tcpp_warning_with_line, cpp_pedwarning_with_line,\n\tcpp_warning_with_line_syshdr): New specific error reporting functions.\n\t* pch.c (cpp_valid_state): Call specific warning functions with\n        warning reason where appropriate.\n\t* errors.c (cpp_diagnostic, cpp_diagnostic_with_line): New central\n\tdiagnostic handlers.\n\t(cpp_warning, cpp_pedwarning, cpp_warning_syshdr,\n\tcpp_warning_with_line, cpp_pedwarning_with_line,\n\tcpp_warning_with_line_syshdr): New specific error reporting functions.\n\t* expr.c (cpp_classify_number, eval_token, num_unary_op): Call\n\tspecific warning functions with warning reason where appropriate.\n\t* lex.c (_cpp_process_line_notes, _cpp_skip_block_comment,\n\twarn_about_normalization, lex_identifier_intern, lex_identifier,\n\t_cpp_lex_direct): Ditto.\n\t* charset.c (_cpp_valid_ucn, convert_hex, convert_escape,\n\tnarrow_str_to_charconst): Ditto.\n\n\t* gcc.dg/cpp/warn-undef-2.c: New.\n\t* gcc.dg/cpp/warn-traditional-2.c: New.\n\t* gcc.dg/cpp/warn-comments-2.c: New.\n\t* gcc.dg/cpp/warning-directive-1.c: New.\n\t* gcc.dg/cpp/warn-long-long.c: New.\n\t* gcc.dg/cpp/warn-traditional.c: New.\n\t* gcc.dg/cpp/warn-variadic-2.c: New.\n\t* gcc.dg/cpp/warn-undef.c: New.\n\t* gcc.dg/cpp/warn-normalized-1.c: New.\n\t* gcc.dg/cpp/warning-directive-2.c: New.\n\t* gcc.dg/cpp/warn-long-long-2.c: New.\n\t* gcc.dg/cpp/warn-variadic.c: New.\n\t* gcc.dg/cpp/warn-normalized-2.c: New.\n\t* gcc.dg/cpp/warning-directive-3.c: New.\n\t* gcc.dg/cpp/warn-deprecated-2.c: New.\n\t* gcc.dg/cpp/warn-trigraphs-1.c: New.\n\t* gcc.dg/cpp/warn-multichar-2.c: New.\n\t* gcc.dg/cpp/warn-normalized-3.c: New.\n\t* gcc.dg/cpp/warning-directive-4.c: New.\n\t* gcc.dg/cpp/warn-unused-macros.c: New.\n\t* gcc.dg/cpp/warn-trigraphs-2.c: New.\n\t* gcc.dg/cpp/warn-cxx-compat-2.c: New.\n\t* gcc.dg/cpp/warn-cxx-compat.c: New.\n\t* gcc.dg/cpp/warn-redefined.c: New.\n\t* gcc.dg/cpp/warn-trigraphs-3.c: New.\n\t* gcc.dg/cpp/warn-unused-macros-2.c: New.\n\t* gcc.dg/cpp/warn-deprecated.c: New.\n\t* gcc.dg/cpp/warn-trigraphs-4.c: New.\n\t* gcc.dg/cpp/warn-redefined-2.c: New.\n\t* gcc.dg/cpp/warn-comments.c: New.\n\t* gcc.dg/cpp/warn-multichar.c: New.\n\t* g++.dg/cpp/warning-directive-1.C: New.\n\t* g++.dg/cpp/warning-directive-2.C: New.\n\t* g++.dg/cpp/warning-directive-3.C: New.\n\t* g++.dg/cpp/warning-directive-4.C: New.\n\t* gfortran.dg/warning-directive-1.F90: New.\n\t* gfortran.dg/warning-directive-3.F90: New.\n\t* gfortran.dg/warning-directive-2.F90: New.\n\t* gfortran.dg/warning-directive-4.F90: New.\n\nFrom-SVN: r158079", "tree": {"sha": "579586014184f45d4119737d83f6440cab3847ac", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/579586014184f45d4119737d83f6440cab3847ac"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/87cf065171b0d195d31f52dc6ffe519029efc7b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87cf065171b0d195d31f52dc6ffe519029efc7b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/87cf065171b0d195d31f52dc6ffe519029efc7b7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/87cf065171b0d195d31f52dc6ffe519029efc7b7/comments", "author": null, "committer": null, "parents": [{"sha": "58e0f0d345d1759d4af965b1592869f0583cb6eb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58e0f0d345d1759d4af965b1592869f0583cb6eb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58e0f0d345d1759d4af965b1592869f0583cb6eb"}], "stats": {"total": 1016, "additions": 878, "deletions": 138}, "files": [{"sha": "2a6c5938422b1009335f52907c502b685b231dfa", "filename": "gcc/ChangeLog", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -1,3 +1,25 @@\n+2010-04-07  Simon Baldwin  <simonb@google.com>\n+\n+\t* diagnostic.h (diagnostic_override_option_index): New macro to\n+\tset a diagnostic's option_index.\n+\t* c-tree.h (c_cpp_error): Add warning reason argument.\n+\t* opts.c (_warning_as_error_callback): New.\n+\t(register_warning_as_error_callback): Store callback for\n+\twarnings enabled via enable_warning_as_error.\n+\t(enable_warning_as_error): Call callback, minor code tidy.\n+\t* opts.h (register_warning_as_error_callback): Declare.\n+\t* c-opts.c (warning_as_error_callback): New, set cpp_opts flag in\n+\tresponse to -Werror=.\n+\t(c_common_init_options): Register warning_as_error_callback in opts.c.\n+\t* common.opt: Add -Wno-cpp option.\n+\t* c-common.c (struct reason_option_codes_t): Map cpp warning\n+\treason codes to gcc option indexes.\n+\t* (c_option_controlling_cpp_error): New function, lookup the gcc\n+\toption index for a cpp warning reason code.\n+\t* (c_cpp_error): Add warning reason argument, call\n+\tc_option_controlling_cpp_error for diagnostic_override_option_index.\n+\t* doc/invoke.texi: Document -Wno-cpp.\n+\n 2010-04-07  Richard Guenther  <rguenther@suse.de>\n \n \t* ipa-reference.c (mark_load): Use get_base_address."}, {"sha": "7daba6bfea13521a99c335c89a17167d332b431a", "filename": "gcc/c-common.c", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -8253,16 +8253,60 @@ c_parse_error (const char *gmsgid, enum cpp_ttype token_type,\n #undef catenate_messages\n }\n \n+/* Mapping for cpp message reasons to the options that enable them.  */\n+\n+struct reason_option_codes_t\n+{\n+  const int reason;\t\t/* cpplib message reason.  */\n+  const int option_code;\t/* gcc option that controls this message.  */\n+};\n+\n+static const struct reason_option_codes_t option_codes[] = {\n+  {CPP_W_DEPRECATED,\t\t\tOPT_Wdeprecated},\n+  {CPP_W_COMMENTS,\t\t\tOPT_Wcomments},\n+  {CPP_W_TRIGRAPHS,\t\t\tOPT_Wtrigraphs},\n+  {CPP_W_MULTICHAR,\t\t\tOPT_Wmultichar},\n+  {CPP_W_TRADITIONAL,\t\t\tOPT_Wtraditional},\n+  {CPP_W_LONG_LONG,\t\t\tOPT_Wlong_long},\n+  {CPP_W_ENDIF_LABELS,\t\t\tOPT_Wendif_labels},\n+  {CPP_W_VARIADIC_MACROS,\t\tOPT_Wvariadic_macros},\n+  {CPP_W_BUILTIN_MACRO_REDEFINED,\tOPT_Wbuiltin_macro_redefined},\n+  {CPP_W_UNDEF,\t\t\t\tOPT_Wundef},\n+  {CPP_W_UNUSED_MACROS,\t\t\tOPT_Wunused_macros},\n+  {CPP_W_CXX_OPERATOR_NAMES,\t\tOPT_Wc___compat},\n+  {CPP_W_NORMALIZE,\t\t\tOPT_Wnormalized_},\n+  {CPP_W_INVALID_PCH,\t\t\tOPT_Winvalid_pch},\n+  {CPP_W_WARNING_DIRECTIVE,\t\tOPT_Wcpp},\n+  {CPP_W_NONE,\t\t\t\t0}\n+};\n+\n+/* Return the gcc option code associated with the reason for a cpp\n+   message, or 0 if none.  */\n+\n+static int\n+c_option_controlling_cpp_error (int reason)\n+{\n+  const struct reason_option_codes_t *entry;\n+\n+  for (entry = option_codes; entry->reason != CPP_W_NONE; entry++)\n+    {\n+      if (entry->reason == reason)\n+\treturn entry->option_code;\n+    }\n+  return 0;\n+}\n+\n /* Callback from cpp_error for PFILE to print diagnostics from the\n-   preprocessor.  The diagnostic is of type LEVEL, at location\n+   preprocessor.  The diagnostic is of type LEVEL, with REASON set\n+   to the reason code if LEVEL is represents a warning, at location\n    LOCATION unless this is after lexing and the compiler's location\n    should be used instead, with column number possibly overridden by\n    COLUMN_OVERRIDE if not zero; MSG is the translated message and AP\n    the arguments.  Returns true if a diagnostic was emitted, false\n    otherwise.  */\n \n bool\n-c_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level,\n+c_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n \t     location_t location, unsigned int column_override,\n \t     const char *msg, va_list *ap)\n {\n@@ -8309,6 +8353,8 @@ c_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level,\n \t\t\t\t  location, dlevel);\n   if (column_override)\n     diagnostic_override_column (&diagnostic, column_override);\n+  diagnostic_override_option_index (&diagnostic,\n+                                    c_option_controlling_cpp_error (reason));\n   ret = report_diagnostic (&diagnostic);\n   if (level == CPP_DL_WARNING_SYSHDR)\n     warn_system_headers = save_warn_system_headers;"}, {"sha": "a680f2d79bd177e3cabcb7b143e82ab2d1c69033", "filename": "gcc/c-opts.c", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fc-opts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fc-opts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-opts.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -196,6 +196,90 @@ defer_opt (enum opt_code code, const char *arg)\n   deferred_count++;\n }\n \n+/* -Werror= may set a warning option to enable a warning that is emitted\n+   by the preprocessor.  Set any corresponding flag in cpp_opts.  */\n+\n+static void\n+warning_as_error_callback (int option_index)\n+{\n+  switch (option_index)\n+    {\n+      default:\n+\t/* Ignore options not associated with the preprocessor.  */\n+\tbreak;\n+\n+      case OPT_Wdeprecated:\n+\tcpp_opts->warn_deprecated = 1;\n+\tbreak;\n+\n+      case OPT_Wcomment:\n+      case OPT_Wcomments:\n+\tcpp_opts->warn_comments = 1;\n+\tbreak;\n+\n+      case OPT_Wtrigraphs:\n+\tcpp_opts->warn_trigraphs = 1;\n+\tbreak;\n+\n+      case OPT_Wmultichar:\n+\tcpp_opts->warn_multichar = 1;\n+\tbreak;\n+\n+      case OPT_Wtraditional:\n+\tcpp_opts->warn_traditional = 1;\n+\tbreak;\n+\n+      case OPT_Wlong_long:\n+\tcpp_opts->warn_long_long = 1;\n+\tbreak;\n+\n+      case OPT_Wendif_labels:\n+\tcpp_opts->warn_endif_labels = 1;\n+\tbreak;\n+\n+      case OPT_Wvariadic_macros:\n+\t/* Set the local flag that is used later to update cpp_opts.  */\n+\twarn_variadic_macros = 1;\n+\tbreak;\n+\n+      case OPT_Wbuiltin_macro_redefined:\n+\tcpp_opts->warn_builtin_macro_redefined = 1;\n+\tbreak;\n+\n+      case OPT_Wundef:\n+\tcpp_opts->warn_undef = 1;\n+\tbreak;\n+\n+      case OPT_Wunused_macros:\n+\t/* Set the local flag that is used later to update cpp_opts.  */\n+\twarn_unused_macros = 1;\n+\tbreak;\n+\n+      case OPT_Wc___compat:\n+\t/* Add warnings in the same way as c_common_handle_option below.  */\n+\tif (warn_enum_compare == -1)\n+\t  warn_enum_compare = 1;\n+\tif (warn_jump_misses_init == -1)\n+\t  warn_jump_misses_init = 1;\n+\tcpp_opts->warn_cxx_operator_names = 1;\n+\tbreak;\n+\n+      case OPT_Wnormalized_:\n+\tinform (input_location, \"-Werror=normalized=: Set -Wnormalized=nfc\");\n+\tcpp_opts->warn_normalize = normalized_C;\n+\tbreak;\n+\n+      case OPT_Winvalid_pch:\n+\tcpp_opts->warn_invalid_pch = 1;\n+\tbreak;\n+\n+      case OPT_Wcpp:\n+\t/* Handled by standard diagnostics using the option's associated\n+\t   boolean variable.  */\n+\tbreak;\n+    }\n+}\n+\n /* Common initialization before parsing options.  */\n unsigned int\n c_common_init_options (unsigned int argc, const char **argv)\n@@ -204,6 +288,9 @@ c_common_init_options (unsigned int argc, const char **argv)\n   unsigned int i, result;\n   struct cpp_callbacks *cb;\n \n+  /* Register callback for warnings enabled by -Werror=.  */\n+  register_warning_as_error_callback (warning_as_error_callback);\n+\n   /* This is conditionalized only because that is the way the front\n      ends used to do it.  Maybe this should be unconditional?  */\n   if (c_dialect_cxx ())"}, {"sha": "dab9d39175ec146ed154970a3c821188e3beec15", "filename": "gcc/c-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -608,8 +608,8 @@ extern void c_write_global_declarations (void);\n extern void pedwarn_c90 (location_t, int opt, const char *, ...) ATTRIBUTE_GCC_CDIAG(3,4);\n extern void pedwarn_c99 (location_t, int opt, const char *, ...) ATTRIBUTE_GCC_CDIAG(3,4);\n \n-extern bool c_cpp_error (cpp_reader *, int, location_t, unsigned int,\n+extern bool c_cpp_error (cpp_reader *, int, int, location_t, unsigned int,\n \t\t\t const char *, va_list *)\n-     ATTRIBUTE_GCC_CDIAG(5,0);\n+     ATTRIBUTE_GCC_CDIAG(6,0);\n \n #endif /* ! GCC_C_TREE_H */"}, {"sha": "49eb453f2a7e83ec9a96d2e07a7f2a9497b80d42", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -89,6 +89,10 @@ Wcast-align\n Common Var(warn_cast_align) Warning\n Warn about pointer casts which increase alignment\n \n+Wcpp\n+Common Var(warn_cpp) Init(1) Warning\n+Warn when a #warning directive is encountered\n+\n Wdeprecated-declarations\n Common Var(warn_deprecated_decl) Init(1) Warning\n Warn about uses of __attribute__((deprecated)) declarations"}, {"sha": "de76477baa7a494c26fac4752ac309611fb9e887", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -199,6 +199,11 @@ extern diagnostic_context *global_dc;\n    diagnostic.  */\n #define diagnostic_override_column(DI, COL) (DI)->override_column = (COL)\n \n+/* Override the option index to be used for reporting a\n+   diagnostic.  */\n+#define diagnostic_override_option_index(DI, OPTIDX) \\\n+    ((DI)->option_index = (OPTIDX))\n+\n /* Diagnostic related functions.  */\n extern void diagnostic_initialize (diagnostic_context *);\n extern void diagnostic_report_current_module (diagnostic_context *);"}, {"sha": "d356daaf021573061fd0967cb7f0848ac48ff456", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -232,7 +232,7 @@ Objective-C and Objective-C++ Dialects}.\n -Wno-attributes -Wno-builtin-macro-redefined @gol\n -Wc++-compat -Wc++0x-compat -Wcast-align  -Wcast-qual  @gol\n -Wchar-subscripts -Wclobbered  -Wcomment @gol\n--Wconversion  -Wcoverage-mismatch  -Wno-deprecated  @gol\n+-Wconversion  -Wcoverage-mismatch  -Wcpp  -Wno-deprecated  @gol\n -Wno-deprecated-declarations -Wdisabled-optimization  @gol\n -Wno-div-by-zero -Wempty-body  -Wenum-compare -Wno-endif-labels @gol\n -Werror  -Werror=* @gol\n@@ -2973,6 +2973,11 @@ Warn whenever a comment-start sequence @samp{/*} appears in a @samp{/*}\n comment, or whenever a Backslash-Newline appears in a @samp{//} comment.\n This warning is enabled by @option{-Wall}.\n \n+@item -Wno-cpp \\\n+@r{(C, Objective-C, C++, Objective-C++ and Fortran only)}\n+\n+Suppress warning messages emitted by @code{#warning} directives.\n+\n @item -Wformat\n @opindex Wformat\n @opindex Wno-format"}, {"sha": "6502b89757ddda412dee3c8a835bdfe6fcfe17bf", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -1,3 +1,8 @@\n+2010-04-07  Simon Baldwin  <simonb@google.com>\n+\n+\t* cpp.c (cb_cpp_error): Add warning reason argument, set a value\n+\tfor diagnostic_override_option_index if CPP_W_WARNING_DIRECTIVE.\n+\n 2010-04-07  Richard Guenther  <rguenther@suse.de>\n \n \t* options.c (gfc_init_options): Do not set."}, {"sha": "6ff464a8cf0d0b01d71867a84b7317636f051f73", "filename": "gcc/fortran/cpp.c", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ffortran%2Fcpp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ffortran%2Fcpp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fcpp.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -137,9 +137,9 @@ static void cb_include (cpp_reader *, source_location, const unsigned char *,\n static void cb_ident (cpp_reader *, source_location, const cpp_string *);\n static void cb_used_define (cpp_reader *, source_location, cpp_hashnode *);\n static void cb_used_undef (cpp_reader *, source_location, cpp_hashnode *);\n-static bool cb_cpp_error (cpp_reader *, int, location_t, unsigned int,\n+static bool cb_cpp_error (cpp_reader *, int, int, location_t, unsigned int,\n \t\t\t  const char *, va_list *)\n-     ATTRIBUTE_GCC_DIAG(5,0);\n+     ATTRIBUTE_GCC_DIAG(6,0);\n void pp_dir_change (cpp_reader *, const char *);\n \n static int dump_macro (cpp_reader *, cpp_hashnode *, void *);\n@@ -962,13 +962,14 @@ cb_used_define (cpp_reader *pfile, source_location line ATTRIBUTE_UNUSED,\n }\n \n /* Callback from cpp_error for PFILE to print diagnostics from the\n-   preprocessor.  The diagnostic is of type LEVEL, at location\n+   preprocessor.  The diagnostic is of type LEVEL, with REASON set\n+   to the reason code if LEVEL is represents a warning, at location\n    LOCATION, with column number possibly overridden by COLUMN_OVERRIDE\n    if not zero; MSG is the translated message and AP the arguments.\n    Returns true if a diagnostic was emitted, false otherwise.  */\n \n static bool\n-cb_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level,\n+cb_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level, int reason,\n \t      location_t location, unsigned int column_override,\n \t      const char *msg, va_list *ap)\n {\n@@ -1007,6 +1008,8 @@ cb_cpp_error (cpp_reader *pfile ATTRIBUTE_UNUSED, int level,\n \t\t\t\t  location, dlevel);\n   if (column_override)\n     diagnostic_override_column (&diagnostic, column_override);\n+  if (reason == CPP_W_WARNING_DIRECTIVE)\n+    diagnostic_override_option_index (&diagnostic, OPT_Wcpp);\n   ret = report_diagnostic (&diagnostic);\n   if (level == CPP_DL_WARNING_SYSHDR)\n     warn_system_headers = save_warn_system_headers;\n@@ -1090,5 +1093,3 @@ dump_queued_macros (cpp_reader *pfile ATTRIBUTE_UNUSED)\n     }\n   cpp_undefine_queue = NULL;\n }\n-\n-"}, {"sha": "19d56348e2ec7d6895576c9b3f8d8bfd4706d1ac", "filename": "gcc/opts.c", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -2396,6 +2396,20 @@ set_option (const struct cl_option *option, int value, const char *arg)\n     }\n }\n \n+\n+/* Callback function, called when -Werror= enables a warning.  */\n+\n+static void (*warning_as_error_callback) (int) = NULL;\n+\n+/* Register a callback for enable_warning_as_error calls.  */\n+\n+void\n+register_warning_as_error_callback (void (*callback) (int))\n+{\n+  gcc_assert (warning_as_error_callback == NULL || callback == NULL);\n+  warning_as_error_callback = callback;\n+}\n+\n /* Enable a warning option as an error.  This is used by -Werror= and\n    also by legacy Werror-implicit-function-declaration.  */\n \n@@ -2415,14 +2429,20 @@ enable_warning_as_error (const char *arg, int value, unsigned int lang_mask)\n     }\n   else\n     {\n-      diagnostic_t kind = value ? DK_ERROR : DK_WARNING;\n+      const diagnostic_t kind = value ? DK_ERROR : DK_WARNING;\n+\n       diagnostic_classify_diagnostic (global_dc, option_index, kind);\n+      if (kind == DK_ERROR)\n+\t{\n+\t  const struct cl_option * const option = cl_options + option_index;\n+\n+\t  /* -Werror=foo implies -Wfoo.  */\n+\t  if (option->var_type == CLVC_BOOLEAN && option->flag_var)\n+\t    *(int *) option->flag_var = 1;\n \n-      /* -Werror=foo implies -Wfoo.  */\n-      if (cl_options[option_index].var_type == CLVC_BOOLEAN\n-\t  && cl_options[option_index].flag_var\n-\t  && kind == DK_ERROR)\n-\t*(int *) cl_options[option_index].flag_var = 1;\n+\t  if (warning_as_error_callback)\n+\t    warning_as_error_callback (option_index);\n+\t}\n     }\n   free (new_option);\n }"}, {"sha": "54f57d114a3af17fd41dda68ab0e3218951bb043", "filename": "gcc/opts.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fopts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Fopts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.h?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -105,6 +105,7 @@ extern int option_enabled (int opt_idx);\n extern bool get_option_state (int, struct cl_option_state *);\n extern void set_option (const struct cl_option *, int, const char *);\n \n+extern void register_warning_as_error_callback (void (*callback) (int));\n extern void enable_warning_as_error (const char *arg, int value,\n \t\t\t\t     unsigned int lang_mask);\n extern void print_ignored_options (void);"}, {"sha": "816847848746b8150db3f7505483d62f28b72f92", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -1,6 +1,47 @@\n-2010-04-07  Iain Sandoe <iains@gcc.gnu.org>\n+2010-04-07  Simon Baldwin  <simonb@google.com>\n+\n+\t* gcc.dg/cpp/warn-undef-2.c: New.\n+\t* gcc.dg/cpp/warn-traditional-2.c: New.\n+\t* gcc.dg/cpp/warn-comments-2.c: New.\n+\t* gcc.dg/cpp/warning-directive-1.c: New.\n+\t* gcc.dg/cpp/warn-long-long.c: New.\n+\t* gcc.dg/cpp/warn-traditional.c: New.\n+\t* gcc.dg/cpp/warn-variadic-2.c: New.\n+\t* gcc.dg/cpp/warn-undef.c: New.\n+\t* gcc.dg/cpp/warn-normalized-1.c: New.\n+\t* gcc.dg/cpp/warning-directive-2.c: New.\n+\t* gcc.dg/cpp/warn-long-long-2.c: New.\n+\t* gcc.dg/cpp/warn-variadic.c: New.\n+\t* gcc.dg/cpp/warn-normalized-2.c: New.\n+\t* gcc.dg/cpp/warning-directive-3.c: New.\n+\t* gcc.dg/cpp/warn-deprecated-2.c: New.\n+\t* gcc.dg/cpp/warn-trigraphs-1.c: New.\n+\t* gcc.dg/cpp/warn-multichar-2.c: New.\n+\t* gcc.dg/cpp/warn-normalized-3.c: New.\n+\t* gcc.dg/cpp/warning-directive-4.c: New.\n+\t* gcc.dg/cpp/warn-unused-macros.c: New.\n+\t* gcc.dg/cpp/warn-trigraphs-2.c: New.\n+\t* gcc.dg/cpp/warn-cxx-compat-2.c: New.\n+\t* gcc.dg/cpp/warn-cxx-compat.c: New.\n+\t* gcc.dg/cpp/warn-redefined.c: New.\n+\t* gcc.dg/cpp/warn-trigraphs-3.c: New.\n+\t* gcc.dg/cpp/warn-unused-macros-2.c: New.\n+\t* gcc.dg/cpp/warn-deprecated.c: New.\n+\t* gcc.dg/cpp/warn-trigraphs-4.c: New.\n+\t* gcc.dg/cpp/warn-redefined-2.c: New.\n+\t* gcc.dg/cpp/warn-comments.c: New.\n+\t* gcc.dg/cpp/warn-multichar.c: New.\n+\t* g++.dg/cpp/warning-directive-1.C: New.\n+\t* g++.dg/cpp/warning-directive-2.C: New.\n+\t* g++.dg/cpp/warning-directive-3.C: New.\n+\t* g++.dg/cpp/warning-directive-4.C: New.\n+\t* gfortran.dg/warning-directive-1.F90: New.\n+\t* gfortran.dg/warning-directive-3.F90: New.\n+\t* gfortran.dg/warning-directive-2.F90: New.\n+\t* gfortran.dg/warning-directive-4.F90: New.\n \n-\tPR objc++/23716\n+2010-04-07  Iain Sandoe <iains@gcc.gnu.org>\n+PR objc++/23716\n \t* obj-c++.dg/comp-types-10.mm: Remove XFAIL.\n \n 2010-04-07  Jason Merrill  <jason@redhat.com>"}, {"sha": "1ce18c6e2c6619b4b2eac2b5fc78c6b6e1f93297", "filename": "gcc/testsuite/g++.dg/cpp/warning-directive-1.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-1.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-1.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-1.C?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-fdiagnostics-show-option\" }\n+\n+#warning \"Printed\"  // { dg-warning \"\\\"Printed\\\" .-Wcpp.\" }"}, {"sha": "abd6427cd8a4bf4ab2668545df3a5570c86e4f54", "filename": "gcc/testsuite/g++.dg/cpp/warning-directive-2.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-2.C?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-fdiagnostics-show-option -Werror=cpp\" }\n+\n+#warning \"Printed\"  // { dg-error \"\\\"Printed\\\" .-Wcpp.\" }"}, {"sha": "8ed66c66f1d3b8a798ea7827afa2858a9bb1184e", "filename": "gcc/testsuite/g++.dg/cpp/warning-directive-3.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-3.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-3.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-3.C?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-fdiagnostics-show-option -Werror -Wno-error=cpp\" }\n+\n+#warning \"Printed\"  // { dg-warning \"\\\"Printed\\\" .-Wcpp.\" }"}, {"sha": "a5db1b4d5cd4df70dcdcbdde385ea2fc50a17bcc", "filename": "gcc/testsuite/g++.dg/cpp/warning-directive-4.C", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-4.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-4.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp%2Fwarning-directive-4.C?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-fdiagnostics-show-option -Wno-cpp\" }\n+\n+#warning \"Not printed\"  // { dg-bogus \".\" }"}, {"sha": "5a17f2bdcf239ed3ec7fb0cb7553cd816c67878a", "filename": "gcc/testsuite/gcc.dg/cpp/warn-comments-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments-2.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=comments\" }\n+\n+/* /* */  // { dg-error \"\\\"\\.\\*\\\" within comment .-Wcomments.\" }\n+\n+// \\\n+          // { dg-error \"multi-line comment .-Wcomments.\" \"multi-line\" { target *-*-* } 6 }"}, {"sha": "6f3d5a56fa730c4885c0e94b69126c94148faa67", "filename": "gcc/testsuite/gcc.dg/cpp/warn-comments.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-comments.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wcomments\" }\n+\n+/* /* */  // { dg-warning \"\\\"\\.\\*\\\" within comment .-Wcomments.\" }\n+\n+// \\\n+          // { dg-warning \"multi-line comment .-Wcomments.\" \"multi-line\" { target *-*-* } 6 }"}, {"sha": "6bf7d555e142331ee556e28a3a0c978e62816a89", "filename": "gcc/testsuite/gcc.dg/cpp/warn-cxx-compat-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-cxx-compat-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-cxx-compat-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-cxx-compat-2.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=c++-compat\" }\n+\n+#define not !  // { dg-error \"identifier \\\"not\\\" is a special operator name in C\\\\+\\\\+ .-Wc\\\\+\\\\+-compat.\" }"}, {"sha": "2e7b25932351a80586ed2268b0805cafc4eda8cf", "filename": "gcc/testsuite/gcc.dg/cpp/warn-cxx-compat.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-cxx-compat.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-cxx-compat.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-cxx-compat.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wc++-compat\" }\n+\n+#define not !  // { dg-warning \"identifier \\\"not\\\" is a special operator name in C\\\\+\\\\+ .-Wc\\\\+\\\\+-compat.\" }"}, {"sha": "b9cfffb9630c196595022f6f3b64945da3a7e295", "filename": "gcc/testsuite/gcc.dg/cpp/warn-deprecated-2.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-deprecated-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-deprecated-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-deprecated-2.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=deprecated\" }\n+\n+#assert x(x)  // { dg-error \"#assert is a deprecated GCC extension .-Wdeprecated.\" }\n+\n+#if #x(x)     // { dg-error \"assertions are a deprecated extension .-Wdeprecated.\" }\n+#endif"}, {"sha": "84214b1f8dbdb052efb213dfce1b43c9a4cbd16e", "filename": "gcc/testsuite/gcc.dg/cpp/warn-deprecated.c", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-deprecated.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-deprecated.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-deprecated.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,7 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wdeprecated\" }\n+\n+#assert x(x)  // { dg-warning \"#assert is a deprecated GCC extension .-Wdeprecated.\" }\n+\n+#if #x(x)     // { dg-warning \"assertions are a deprecated extension .-Wdeprecated.\" }\n+#endif"}, {"sha": "11eb5fb26668485f37cb33584beb03b92a0a2162", "filename": "gcc/testsuite/gcc.dg/cpp/warn-long-long-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-long-long-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-long-long-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-long-long-2.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wtraditional -Werror=long-long\" }\n+\n+#if 0LL  // { dg-error \"traditional C rejects the \\\"LL\\\" suffix .-Wlong-long.\" }\n+         // { dg-error \"use of C99 long long integer constant .-Wlong-long.\" \"use long long\" { target *-*-* } 4 }\n+#endif"}, {"sha": "e86f9a6288d7d5d15ec7223694042723873f8665", "filename": "gcc/testsuite/gcc.dg/cpp/warn-long-long.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-long-long.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-long-long.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-long-long.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,6 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wtraditional -Wlong-long\" }\n+\n+#if 0LL  // { dg-warning \"traditional C rejects the \\\"LL\\\" suffix .-Wlong-long.\" }\n+         // { dg-warning \"use of C99 long long integer constant .-Wlong-long.\" \"use long long\" { target *-*-* } 4 }\n+#endif"}, {"sha": "31d33bb9bb8985d2a058c8432b3a0368576fd9bd", "filename": "gcc/testsuite/gcc.dg/cpp/warn-multichar-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-multichar-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-multichar-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-multichar-2.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=multichar\" }\n+\n+#if 'abc'  // { dg-error \"multi-character character constant .-Wmultichar.\" }\n+#endif"}, {"sha": "f5b02dad4792e6d9d82669f5af4cf537614661fa", "filename": "gcc/testsuite/gcc.dg/cpp/warn-multichar.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-multichar.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-multichar.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-multichar.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wmultichar\" }\n+\n+#if 'abc'  // { dg-warning \"multi-character character constant .-Wmultichar.\" }\n+#endif"}, {"sha": "fe1c575307475307efe85ea38858191bbac7e451", "filename": "gcc/testsuite/gcc.dg/cpp/warn-normalized-1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-1.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -fextended-identifiers -Wnormalized=nfc\" }\n+\n+\\u0F43  // { dg-warning \"`.U00000f43' is not in NFC .-Wnormalized=.\" }"}, {"sha": "f1fb96833d73db0600615f1cc5443f7a9b73f3cd", "filename": "gcc/testsuite/gcc.dg/cpp/warn-normalized-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-2.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -fextended-identifiers -Wnormalized=nfkc\" }\n+\n+\\u00AA  // { dg-warning \"`.U000000aa' is not in NFKC .-Wnormalized=.\" }"}, {"sha": "380c670b8aff32fea8f43176ff91edfd480f594b", "filename": "gcc/testsuite/gcc.dg/cpp/warn-normalized-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-normalized-3.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -fextended-identifiers -Werror=normalized=\" }\n+\n+        // { dg-prune-output \".*-Werror=normalized=: Set -Wnormalized=nfc.*\" }\n+\\u0F43  // { dg-error \"`.U00000f43' is not in NFC .-Wnormalized=.\" }"}, {"sha": "83cc3df76103fc305b20d6abfcb45a7025aa9b48", "filename": "gcc/testsuite/gcc.dg/cpp/warn-redefined-2.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-redefined-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-redefined-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-redefined-2.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=builtin-macro-redefined\" }\n+\n+#ifndef __TIME__\n+#error \"__TIME__ builtin is not defined\"\n+// { dg-bogus \"__TIME__ builtin is not defined\" \"no-time\" { target *-*-* } 5 }\n+#endif\n+\n+#define __TIME__ \"X\"  // { dg-error \"\\\"__TIME__\\\" redefined .-Wbuiltin-macro-redefined.\" }\n+\n+#define __TIME__ \"Y\"  // { dg-bogus \"-Wbuiltin-macro-redefined\" }\n+                      // { dg-warning \"\\\"__TIME__\\\" redefined\" \"not-builtin-1\" { target *-*-* } 11 }\n+                      // { dg-message \"previous definition\" \"previous-1\" { target *-*-* } 9 }\n+\n+#define X \"X\"\n+#define X \"Y\"         // { dg-bogus \"-Wbuiltin-macro-redefined\" }\n+                      // { dg-warning \"\\\"X\\\" redefined\" \"not-builtin-2\" { target *-*-* } 16 }\n+                      // { dg-message \"previous definition\" \"previous-2\" { target *-*-* } 15 }"}, {"sha": "1d3e7fc3ed3c6d1f5e47e5785814b385171d0412", "filename": "gcc/testsuite/gcc.dg/cpp/warn-redefined.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-redefined.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-redefined.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-redefined.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,18 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wbuiltin-macro-redefined\" }\n+\n+#ifndef __TIME__\n+#error \"__TIME__ builtin is not defined\"\n+// { dg-bogus \"__TIME__ builtin is not defined\" \"no-time\" { target *-*-* } 5 }\n+#endif\n+\n+#define __TIME__ \"X\"  // { dg-warning \"\\\"__TIME__\\\" redefined .-Wbuiltin-macro-redefined.\" }\n+\n+#define __TIME__ \"Y\"  // { dg-bogus \"-Wbuiltin-macro-redefined\" }\n+                      // { dg-warning \"\\\"__TIME__\\\" redefined\" \"not-builtin-1\" { target *-*-* } 11 }\n+                      // { dg-message \"previous definition\" \"previous-1\" { target *-*-* } 9 }\n+\n+#define X \"X\"\n+#define X \"Y\"         // { dg-bogus \"-Wbuiltin-macro-redefined\" }\n+                      // { dg-warning \"\\\"X\\\" redefined\" \"not-builtin-2\" { target *-*-* } 16 }\n+                      // { dg-message \"previous definition\" \"previous-2\" { target *-*-* } 15 }"}, {"sha": "cb5f690ccf7841cb825c4338776f8d158ae8ba28", "filename": "gcc/testsuite/gcc.dg/cpp/warn-traditional-2.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-traditional-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-traditional-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-traditional-2.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=traditional -Wno-deprecated -Wno-long-long\" }\n+\n+#assert x(x)         // { dg-error \"suggest hiding #assert from traditional C with an indented # .-Wtraditional.\" }\n+\n+ #define X X         // { dg-error \"traditional C ignores #define with the # indented .-Wtraditional.\" }\n+\n+#if 0\n+#elif 1              // { dg-error \"suggest not using #elif in traditional C .-Wtraditional.\" }\n+#endif\n+\n+#define f(X) X\n+int f;               // { dg-error \"function-like macro \\\"f\\\" must be used with arguments in traditional C .-Wtraditional.\" }\n+\n+#if 0U               // { dg-error \"traditional C rejects the \\\"U\\\" suffix .-Wtraditional.\" }\n+#endif\n+\n+#if +1               // { dg-error \" traditional C rejects the unary plus operator .-Wtraditional.\" }\n+#endif\n+\n+char *x = \"\\x0\";     // { dg-error \"the meaning of '.x' is different in traditional C .-Wtraditional.\" }\n+char *y = \"\\a\";      // { dg-error \"the meaning of '.a' is different in traditional C .-Wtraditional.\" }\n+char *z = \"\\u0F43\";  // { dg-error \"the meaning of '.u' is different in traditional C .-Wtraditional.\" }"}, {"sha": "f72f6db69d5b702e04835d7f772059018ca23003", "filename": "gcc/testsuite/gcc.dg/cpp/warn-traditional.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-traditional.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-traditional.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-traditional.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,23 @@\n+// { dg-do compile }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wtraditional -Wno-deprecated -Wno-long-long\" }\n+\n+#assert x(x)         // { dg-warning \"suggest hiding #assert from traditional C with an indented # .-Wtraditional.\" }\n+\n+ #define X X         // { dg-warning \"traditional C ignores #define with the # indented .-Wtraditional.\" }\n+\n+#if 0\n+#elif 1              // { dg-warning \"suggest not using #elif in traditional C .-Wtraditional.\" }\n+#endif\n+\n+#define f(X) X\n+int f;               // { dg-warning \"function-like macro \\\"f\\\" must be used with arguments in traditional C .-Wtraditional.\" }\n+\n+#if 0U               // { dg-warning \"traditional C rejects the \\\"U\\\" suffix .-Wtraditional.\" }\n+#endif\n+\n+#if +1               // { dg-warning \" traditional C rejects the unary plus operator .-Wtraditional.\" }\n+#endif\n+\n+char *x = \"\\x0\";     // { dg-warning \"the meaning of '.x' is different in traditional C .-Wtraditional.\" }\n+char *y = \"\\a\";      // { dg-warning \"the meaning of '.a' is different in traditional C .-Wtraditional.\" }\n+char *z = \"\\u0F43\";  // { dg-warning \"the meaning of '.u' is different in traditional C .-Wtraditional.\" }"}, {"sha": "4f3779df2212b3319a6d0f69110661620379c856", "filename": "gcc/testsuite/gcc.dg/cpp/warn-trigraphs-1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-1.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -trigraphs -Wtrigraphs\" }\n+\n+??=  // { dg-warning \"trigraph \\\\?\\\\?= converted to # .-Wtrigraphs.\" }"}, {"sha": "ff87ae549511aea7cc8812f7e287849d650ad184", "filename": "gcc/testsuite/gcc.dg/cpp/warn-trigraphs-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-2.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wtrigraphs\" }\n+\n+??=  // { dg-warning \"trigraph \\\\?\\\\?= ignored, use -trigraphs to enable .-Wtrigraphs.\" }"}, {"sha": "a993e2a190c94489882678217d9d81f60f430503", "filename": "gcc/testsuite/gcc.dg/cpp/warn-trigraphs-3.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-3.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -trigraphs -Werror=trigraphs\" }\n+\n+??=  // { dg-error \"trigraph \\\\?\\\\?= converted to # .-Wtrigraphs.\" }"}, {"sha": "240ae0f217586e5aa50f1ec6372971de0fa9e7ca", "filename": "gcc/testsuite/gcc.dg/cpp/warn-trigraphs-4.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-trigraphs-4.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=trigraphs\" }\n+\n+??=  // { dg-error \"trigraph \\\\?\\\\?= ignored, use -trigraphs to enable .-Wtrigraphs.\" }"}, {"sha": "4eb80e0e9452c6e00606546ae6c2bd9e4f8aa5fa", "filename": "gcc/testsuite/gcc.dg/cpp/warn-undef-2.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-undef-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-undef-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-undef-2.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=undef\" }\n+\n+#if x  // { dg-error \"\\\"x\\\" is not defined .-Wundef.\" }\n+#endif"}, {"sha": "dd4524d8136e4e297c14c6c177f7835663edff1e", "filename": "gcc/testsuite/gcc.dg/cpp/warn-undef.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-undef.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-undef.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-undef.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,5 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wundef\" }\n+\n+#if x  // { dg-warning \"\\\"x\\\" is not defined .-Wundef.\" }\n+#endif"}, {"sha": "58eeebfcdd9a836f7f8a28d2ddd131487c6e2b50", "filename": "gcc/testsuite/gcc.dg/cpp/warn-unused-macros-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-unused-macros-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-unused-macros-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-unused-macros-2.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=unused-macros\" }\n+\n+#define X X  // { dg-error \"macro \\\"X\\\" is not used .-Wunused-macros.\" }"}, {"sha": "e1ce94eeee6179061135eb40e47abf75898541b0", "filename": "gcc/testsuite/gcc.dg/cpp/warn-unused-macros.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-unused-macros.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-unused-macros.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-unused-macros.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wunused-macros\" }\n+\n+#define X X  // { dg-warning \"macro \\\"X\\\" is not used .-Wunused-macros.\" }"}, {"sha": "f43d96ab81b491c196b340d767ae1684f25bb938", "filename": "gcc/testsuite/gcc.dg/cpp/warn-variadic-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-variadic-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-variadic-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-variadic-2.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-ansi -fdiagnostics-show-option -pedantic -Werror=variadic-macros\" } */\n+\n+#define F(...) X   /* { dg-error \"anonymous variadic macros were introduced in C99 .-Wvariadic-macros.\" } */\n+\n+#define G(X...) X  /* { dg-error \"ISO C does not permit named variadic macros .-Wvariadic-macros.\" } */"}, {"sha": "ba66c901813d7560556b997cf17fa8be18114f4f", "filename": "gcc/testsuite/gcc.dg/cpp/warn-variadic.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-variadic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-variadic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarn-variadic.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do preprocess } */\n+/* { dg-options \"-ansi -fdiagnostics-show-option -pedantic -Wvariadic-macros\" } */\n+\n+#define F(...) X   /* { dg-warning \"anonymous variadic macros were introduced in C99 .-Wvariadic-macros.\" } */\n+\n+#define G(X...) X  /* { dg-warning \"ISO C does not permit named variadic macros .-Wvariadic-macros.\" } */"}, {"sha": "cb4bd326cc28a7c1aeb6c1ae8770b9deaf6543d4", "filename": "gcc/testsuite/gcc.dg/cpp/warning-directive-1.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-1.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option\" }\n+\n+#warning \"Printed\"  // { dg-warning \"\\\"Printed\\\" .-Wcpp.\" }"}, {"sha": "0889803cd11632d6e38499c2b24472e052b94e50", "filename": "gcc/testsuite/gcc.dg/cpp/warning-directive-2.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-2.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror=cpp\" }\n+\n+#warning \"Printed\"  // { dg-error \"\\\"Printed\\\" .-Wcpp.\" }"}, {"sha": "48c97f3ac5b1197a264856222727daa7965a1d9d", "filename": "gcc/testsuite/gcc.dg/cpp/warning-directive-3.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-3.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Werror -Wno-error=cpp\" }\n+\n+#warning \"Printed\"  // { dg-warning \"\\\"Printed\\\" .-Wcpp.\" }"}, {"sha": "2eb101765dad36adb5bd2634b0e790164a408ddc", "filename": "gcc/testsuite/gcc.dg/cpp/warning-directive-4.c", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fcpp%2Fwarning-directive-4.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,4 @@\n+// { dg-do preprocess }\n+// { dg-options \"-std=gnu99 -fdiagnostics-show-option -Wno-cpp\" }\n+\n+#warning \"Not printed\"  // { dg-bogus \".\" }"}, {"sha": "5f5931572c28f28b8546b5aa46c0ab396971369c", "filename": "gcc/testsuite/gfortran.dg/warning-directive-1.F90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-1.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-1.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-1.F90?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,5 @@\n+! { dg-do preprocess }\n+! { dg-options \"-std=f95 -fdiagnostics-show-option\" }\n+\n+#warning \"Printed\"\n+! { dg-warning \"\\\"Printed\\\" .-Wcpp.\" \"\" { target *-*-* } 4 }"}, {"sha": "75b78bf6dd9b1ef9010db0b60a0239af47c89b48", "filename": "gcc/testsuite/gfortran.dg/warning-directive-2.F90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-2.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-2.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-2.F90?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,5 @@\n+! { dg-do preprocess }\n+! { dg-options \"-std=f95 -fdiagnostics-show-option -Werror=cpp\" }\n+\n+#warning \"Printed\"\n+! { dg-error \"\\\"Printed\\\" .-Wcpp.\" \"\" { target *-*-* } 4 }"}, {"sha": "aa20c1942a199e3ceed2085bec6850ac3c6e663a", "filename": "gcc/testsuite/gfortran.dg/warning-directive-3.F90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-3.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-3.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-3.F90?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,5 @@\n+! { dg-do preprocess }\n+! { dg-options \"-std=f95 -fdiagnostics-show-option -Werror -Wno-error=cpp\" }\n+\n+#warning \"Printed\"\n+! { dg-warning \"\\\"Printed\\\" .-Wcpp.\" \"\" { target *-*-* } 4 }"}, {"sha": "a5c38114957f71fc1baff700235247c069b8c81e", "filename": "gcc/testsuite/gfortran.dg/warning-directive-4.F90", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-4.F90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-4.F90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarning-directive-4.F90?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -0,0 +1,5 @@\n+! { dg-do preprocess }\n+! { dg-options \"-std=f95 -fdiagnostics-show-option -Wno-cpp\" }\n+\n+#warning \"Not printed\"\n+! { dg-bogus \".\" \"\" { target *-*-* } 4 }"}, {"sha": "7762099dd12424e18f93e64aed8e114b82e2b5ce", "filename": "libcpp/ChangeLog", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FChangeLog?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -1,3 +1,45 @@\n+2010-04-07  Simon Baldwin  <simonb@google.com>\n+\n+\t* directives.c (do_diagnostic): Add warning reason argument,\n+\tcall appropriate error reporting function for code.\n+\t(directive_diagnostics): Call specific warning functions with\n+\twarning reason where appropriate.\n+\t(do_error, do_warning, do_pragma_dependency): Add warning reason\n+\targument to do_diagnostic calls.\n+\t* macro.c (_cpp_warn_if_unused_macro, enter_macro_context,\n+\t_cpp_create_definition): Call specific warning functions with\n+\twarning reason where appropriate.\n+\t* Makefile.in: Add new diagnostic functions to gettext translations.\n+\t* include/cpplib.h (struct cpp_callbacks): Add warning reason code\n+\tto error callback.\n+\t(CPP_DL_WARNING, CPP_DL_WARNING_SYSHDR, CPP_DL_PEDWARN, CPP_DL_ERROR,\n+\tCPP_DL_ICE, CPP_DL_NOTE, CPP_DL_FATAL): Replace macros with enums.\n+\t(CPP_W_NONE, CPP_W_DEPRECATED, CPP_W_COMMENTS,\n+\tCPP_W_MISSING_INCLUDE_DIRS, CPP_W_TRIGRAPHS, CPP_W_MULTICHAR,\n+\tCPP_W_TRADITIONAL, CPP_W_LONG_LONG, CPP_W_ENDIF_LABELS,\n+\tCPP_W_NUM_SIGN_CHANGE, CPP_W_VARIADIC_MACROS,\n+\tCPP_W_BUILTIN_MACRO_REDEFINED, CPP_W_DOLLARS, CPP_W_UNDEF,\n+\tCPP_W_UNUSED_MACROS, CPP_W_CXX_OPERATOR_NAMES, CPP_W_NORMALIZE,\n+\tCPP_W_INVALID_PCH, CPP_W_WARNING_DIRECTIVE): New enums for cpp\n+\twarning reason codes.\n+\t(cpp_warning, cpp_pedwarning, cpp_warning_syshdr,\n+\tcpp_warning_with_line, cpp_pedwarning_with_line,\n+\tcpp_warning_with_line_syshdr): New specific error reporting functions.\n+\t* pch.c (cpp_valid_state): Call specific warning functions with\n+\twarning reason where appropriate.\n+\t* errors.c (cpp_diagnostic, cpp_diagnostic_with_line): New central\n+\tdiagnostic handlers.\n+\t(cpp_warning, cpp_pedwarning, cpp_warning_syshdr,\n+\tcpp_warning_with_line, cpp_pedwarning_with_line,\n+\tcpp_warning_with_line_syshdr): New specific error reporting functions.\n+\t* expr.c (cpp_classify_number, eval_token, num_unary_op): Call\n+\tspecific warning functions with warning reason where appropriate.\n+\t* lex.c (_cpp_process_line_notes, _cpp_skip_block_comment,\n+\twarn_about_normalization, lex_identifier_intern, lex_identifier,\n+\t_cpp_lex_direct): Ditto.\n+\t* charset.c (_cpp_valid_ucn, convert_hex, convert_escape,\n+\tnarrow_str_to_charconst): Ditto.\n+\n 2010-04-06  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR preprocessor/43642"}, {"sha": "8d19d8dbf14789c8a8cfbc1a8531088e34b03811", "filename": "libcpp/Makefile.in", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2FMakefile.in?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -249,8 +249,15 @@ po/$(PACKAGE).pot: $(libcpp_a_SOURCES)\n \t$(mkinstalldirs) $(srcdir)/po\n \t$(XGETTEXT) --default-domain=$(PACKAGE) \\\n \t  --keyword=_ --keyword=N_ \\\n-\t  --keyword=cpp_error:3 --keyword=cpp_errno:3 \\\n+\t  --keyword=cpp_error:3 \\\n+\t  --keyword=cpp_warning:3 \\\n+\t  --keyword=cpp_pedwarning:3 \\\n+\t  --keyword=cpp_warning_syshdr:3 \\\n \t  --keyword=cpp_error_with_line:5 \\\n+\t  --keyword=cpp_warning_with_line:5 \\\n+\t  --keyword=cpp_pedwarning_with_line:5 \\\n+\t  --keyword=cpp_warning_with_line_syshdr:5 \\\n+\t  --keyword=cpp_errno:3 \\\n \t  --keyword=SYNTAX_ERROR --keyword=SYNTAX_ERROR2 \\\n \t  --copyright-holder=\"Free Software Foundation, Inc.\" \\\n \t  --msgid-bugs-address=\"http://gcc.gnu.org/bugs.html\" \\"}, {"sha": "7bc3db3b44fd01df732abf8759aee6196419ef09", "filename": "libcpp/charset.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Fcharset.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Fcharset.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fcharset.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -993,9 +993,9 @@ _cpp_valid_ucn (cpp_reader *pfile, const uchar **pstr,\n     cpp_error (pfile, CPP_DL_WARNING,\n \t       \"universal character names are only valid in C++ and C99\");\n   else if (CPP_WTRADITIONAL (pfile) && identifier_pos == 0)\n-    cpp_error (pfile, CPP_DL_WARNING,\n-\t       \"the meaning of '\\\\%c' is different in traditional C\",\n-\t       (int) str[-1]);\n+    cpp_warning (pfile, CPP_W_TRADITIONAL,\n+\t         \"the meaning of '\\\\%c' is different in traditional C\",\n+\t         (int) str[-1]);\n \n   if (str[-1] == 'u')\n     length = 4;\n@@ -1174,8 +1174,8 @@ convert_hex (cpp_reader *pfile, const uchar *from, const uchar *limit,\n   size_t mask = width_to_mask (width);\n \n   if (CPP_WTRADITIONAL (pfile))\n-    cpp_error (pfile, CPP_DL_WARNING,\n-\t       \"the meaning of '\\\\x' is different in traditional C\");\n+    cpp_warning (pfile, CPP_W_TRADITIONAL,\n+\t         \"the meaning of '\\\\x' is different in traditional C\");\n \n   from++;  /* Skip 'x'.  */\n   while (from < limit)\n@@ -1302,8 +1302,8 @@ convert_escape (cpp_reader *pfile, const uchar *from, const uchar *limit,\n \n     case 'a':\n       if (CPP_WTRADITIONAL (pfile))\n-\tcpp_error (pfile, CPP_DL_WARNING,\n-\t\t   \"the meaning of '\\\\a' is different in traditional C\");\n+\tcpp_warning (pfile, CPP_W_TRADITIONAL,\n+\t\t     \"the meaning of '\\\\a' is different in traditional C\");\n       c = charconsts[0];\n       break;\n \n@@ -1509,7 +1509,7 @@ narrow_str_to_charconst (cpp_reader *pfile, cpp_string str,\n \t\t \"character constant too long for its type\");\n     }\n   else if (i > 1 && CPP_OPTION (pfile, warn_multichar))\n-    cpp_error (pfile, CPP_DL_WARNING, \"multi-character character constant\");\n+    cpp_warning (pfile, CPP_W_MULTICHAR, \"multi-character character constant\");\n \n   /* Multichar constants are of type int and therefore signed.  */\n   if (i > 1)"}, {"sha": "77da485cda1dc65dafbe78d1fc2cc6b311d36516", "filename": "libcpp/directives.c", "status": "modified", "additions": 21, "deletions": 16, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Fdirectives.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Fdirectives.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fdirectives.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -104,7 +104,7 @@ static const char *parse_include (cpp_reader *, int *, const cpp_token ***,\n static void push_conditional (cpp_reader *, int, int, const cpp_hashnode *);\n static unsigned int read_flag (cpp_reader *, unsigned int);\n static bool strtolinenum (const uchar *, size_t, linenum_type *, bool *);\n-static void do_diagnostic (cpp_reader *, int, int);\n+static void do_diagnostic (cpp_reader *, int, int, int);\n static cpp_hashnode *lex_macro_node (cpp_reader *, bool);\n static int undefine_macros (cpp_reader *, cpp_hashnode *, void *);\n static void do_include_common (cpp_reader *, enum include_type);\n@@ -355,8 +355,8 @@ directive_diagnostics (cpp_reader *pfile, const directive *dir, int indented)\n       else if (((dir->flags & DEPRECATED) != 0\n \t\t|| (dir == &dtable[T_IMPORT] && !CPP_OPTION (pfile, objc)))\n \t       && CPP_OPTION (pfile, warn_deprecated))\n-\tcpp_error (pfile, CPP_DL_WARNING, \"#%s is a deprecated GCC extension\",\n-\t\t   dir->name);\n+\tcpp_warning (pfile, CPP_W_DEPRECATED,\n+                     \"#%s is a deprecated GCC extension\", dir->name);\n     }\n \n   /* Traditionally, a directive is ignored unless its # is in\n@@ -368,16 +368,16 @@ directive_diagnostics (cpp_reader *pfile, const directive *dir, int indented)\n   if (CPP_WTRADITIONAL (pfile))\n     {\n       if (dir == &dtable[T_ELIF])\n-\tcpp_error (pfile, CPP_DL_WARNING,\n-\t\t   \"suggest not using #elif in traditional C\");\n+\tcpp_warning (pfile, CPP_W_TRADITIONAL,\n+\t\t     \"suggest not using #elif in traditional C\");\n       else if (indented && dir->origin == KANDR)\n-\tcpp_error (pfile, CPP_DL_WARNING,\n-\t\t   \"traditional C ignores #%s with the # indented\",\n-\t\t   dir->name);\n+\tcpp_warning (pfile, CPP_W_TRADITIONAL,\n+\t\t     \"traditional C ignores #%s with the # indented\",\n+\t\t     dir->name);\n       else if (!indented && dir->origin != KANDR)\n-\tcpp_error (pfile, CPP_DL_WARNING,\n-\t\t   \"suggest hiding #%s from traditional C with an indented #\",\n-\t\t   dir->name);\n+\tcpp_warning (pfile, CPP_W_TRADITIONAL,\n+\t\t     \"suggest hiding #%s from traditional C with an indented #\",\n+\t\t     dir->name);\n     }\n }\n \n@@ -1045,7 +1045,7 @@ _cpp_do_file_change (cpp_reader *pfile, enum lc_reason reason,\n /* Report a warning or error detected by the program we are\n    processing.  Use the directive's tokens in the error message.  */\n static void\n-do_diagnostic (cpp_reader *pfile, int code, int print_dir)\n+do_diagnostic (cpp_reader *pfile, int code, int reason, int print_dir)\n {\n   const unsigned char *dir_name;\n   unsigned char *line;\n@@ -1059,21 +1059,26 @@ do_diagnostic (cpp_reader *pfile, int code, int print_dir)\n   line = cpp_output_line_to_string (pfile, dir_name);\n   pfile->state.prevent_expansion--;\n \n-  cpp_error_with_line (pfile, code, src_loc, 0, \"%s\", line);\n+  if (code == CPP_DL_WARNING_SYSHDR && reason)\n+    cpp_warning_with_line_syshdr (pfile, reason, src_loc, 0, \"%s\", line);\n+  else if (code == CPP_DL_WARNING && reason)\n+    cpp_warning_with_line (pfile, reason, src_loc, 0, \"%s\", line);\n+  else\n+    cpp_error_with_line (pfile, code, src_loc, 0, \"%s\", line);\n   free (line);\n }\n \n static void\n do_error (cpp_reader *pfile)\n {\n-  do_diagnostic (pfile, CPP_DL_ERROR, 1);\n+  do_diagnostic (pfile, CPP_DL_ERROR, 0, 1);\n }\n \n static void\n do_warning (cpp_reader *pfile)\n {\n   /* We want #warning diagnostics to be emitted in system headers too.  */\n-  do_diagnostic (pfile, CPP_DL_WARNING_SYSHDR, 1);\n+  do_diagnostic (pfile, CPP_DL_WARNING_SYSHDR, CPP_W_WARNING_DIRECTIVE, 1);\n }\n \n /* Report program identification.  */\n@@ -1595,7 +1600,7 @@ do_pragma_dependency (cpp_reader *pfile)\n       if (cpp_get_token (pfile)->type != CPP_EOF)\n \t{\n \t  _cpp_backup_tokens (pfile, 1);\n-\t  do_diagnostic (pfile, CPP_DL_WARNING, 0);\n+\t  do_diagnostic (pfile, CPP_DL_WARNING, 0, 0);\n \t}\n     }\n "}, {"sha": "b7783f54d31ef09ff41db98aab88897dda35f139", "filename": "libcpp/errors.c", "status": "modified", "additions": 154, "deletions": 12, "changes": 166, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Ferrors.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Ferrors.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Ferrors.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -28,16 +28,16 @@ along with this program; see the file COPYING3.  If not see\n #include \"cpplib.h\"\n #include \"internal.h\"\n \n-/* Print an error at the location of the previously lexed token.  */\n-bool\n-cpp_error (cpp_reader * pfile, int level, const char *msgid, ...)\n+/* Print a diagnostic at the location of the previously lexed token.  */\n+\n+ATTRIBUTE_FPTR_PRINTF(4,0)\n+static bool\n+cpp_diagnostic (cpp_reader * pfile, int level, int reason,\n+                const char *msgid, va_list *ap)\n {\n   source_location src_loc;\n-  va_list ap;\n   bool ret;\n \n-  va_start (ap, msgid);\n-\n   if (CPP_OPTION (pfile, traditional))\n     {\n       if (pfile->state.in_directive)\n@@ -61,31 +61,173 @@ cpp_error (cpp_reader * pfile, int level, const char *msgid, ...)\n \n   if (!pfile->cb.error)\n     abort ();\n-  ret = pfile->cb.error (pfile, level, src_loc, 0, _(msgid), &ap);\n+  ret = pfile->cb.error (pfile, level, reason, src_loc, 0, _(msgid), ap);\n+\n+  return ret;\n+}\n+\n+/* Print a warning or error, depending on the value of LEVEL.  */\n+\n+bool\n+cpp_error (cpp_reader * pfile, int level, const char *msgid, ...)\n+{\n+  va_list ap;\n+  bool ret;\n+\n+  va_start (ap, msgid);\n+\n+  ret = cpp_diagnostic (pfile, level, CPP_W_NONE, msgid, &ap);\n \n   va_end (ap);\n   return ret;\n }\n \n-/* Print an error at a specific location.  */\n+/* Print a warning.  The warning reason may be given in REASON.  */\n+\n+bool\n+cpp_warning (cpp_reader * pfile, int reason, const char *msgid, ...)\n+{\n+  va_list ap;\n+  bool ret;\n+\n+  va_start (ap, msgid);\n+\n+  ret = cpp_diagnostic (pfile, CPP_DL_WARNING, reason, msgid, &ap);\n+\n+  va_end (ap);\n+  return ret;\n+}\n+\n+/* Print a pedantic warning.  The warning reason may be given in REASON.  */\n+\n+bool\n+cpp_pedwarning (cpp_reader * pfile, int reason, const char *msgid, ...)\n+{\n+  va_list ap;\n+  bool ret;\n+\n+  va_start (ap, msgid);\n+\n+  ret = cpp_diagnostic (pfile, CPP_DL_PEDWARN, reason, msgid, &ap);\n+\n+  va_end (ap);\n+  return ret;\n+}\n+\n+/* Print a warning, including system headers.  The warning reason may be\n+   given in REASON.  */\n+\n+bool\n+cpp_warning_syshdr (cpp_reader * pfile, int reason, const char *msgid, ...)\n+{\n+  va_list ap;\n+  bool ret;\n+\n+  va_start (ap, msgid);\n+\n+  ret = cpp_diagnostic (pfile, CPP_DL_WARNING_SYSHDR, reason, msgid, &ap);\n+\n+  va_end (ap);\n+  return ret;\n+}\n+\n+/* Print a diagnostic at a specific location.  */\n+\n+ATTRIBUTE_FPTR_PRINTF(6,0)\n+static bool\n+cpp_diagnostic_with_line (cpp_reader * pfile, int level, int reason,\n+\t\t          source_location src_loc, unsigned int column,\n+\t\t          const char *msgid, va_list *ap)\n+{\n+  bool ret;\n+  \n+  if (!pfile->cb.error)\n+    abort ();\n+  ret = pfile->cb.error (pfile, level, reason, src_loc, column, _(msgid), ap);\n+\n+  return ret;\n+}\n+\n+/* Print a warning or error, depending on the value of LEVEL.  */\n+\n bool\n cpp_error_with_line (cpp_reader *pfile, int level,\n \t\t     source_location src_loc, unsigned int column,\n \t\t     const char *msgid, ...)\n {\n   va_list ap;\n   bool ret;\n-  \n+\n   va_start (ap, msgid);\n \n-  if (!pfile->cb.error)\n-    abort ();\n-  ret = pfile->cb.error (pfile, level, src_loc, column, _(msgid), &ap);\n+  ret = cpp_diagnostic_with_line (pfile, level, CPP_W_NONE, src_loc,\n+                                  column, msgid, &ap);\n+\n+  va_end (ap);\n+  return ret;\n+}\n+\n+/* Print a warning.  The warning reason may be given in REASON.  */\n+\n+bool\n+cpp_warning_with_line (cpp_reader *pfile, int reason,\n+\t\t       source_location src_loc, unsigned int column,\n+\t\t       const char *msgid, ...)\n+{\n+  va_list ap;\n+  bool ret;\n+\n+  va_start (ap, msgid);\n+\n+  ret = cpp_diagnostic_with_line (pfile, CPP_DL_WARNING, reason, src_loc,\n+                                  column, msgid, &ap);\n+\n+  va_end (ap);\n+  return ret;\n+}\n+\n+/* Print a pedantic warning.  The warning reason may be given in REASON.  */\n+\n+bool\n+cpp_pedwarning_with_line (cpp_reader *pfile, int reason,\n+\t\t          source_location src_loc, unsigned int column,\n+\t\t          const char *msgid, ...)\n+{\n+  va_list ap;\n+  bool ret;\n+\n+  va_start (ap, msgid);\n+\n+  ret = cpp_diagnostic_with_line (pfile, CPP_DL_PEDWARN, reason, src_loc,\n+                                  column, msgid, &ap);\n \n   va_end (ap);\n   return ret;\n }\n \n+/* Print a warning, including system headers.  The warning reason may be\n+   given in REASON.  */\n+\n+bool\n+cpp_warning_with_line_syshdr (cpp_reader *pfile, int reason,\n+\t\t              source_location src_loc, unsigned int column,\n+\t\t              const char *msgid, ...)\n+{\n+  va_list ap;\n+  bool ret;\n+\n+  va_start (ap, msgid);\n+\n+  ret = cpp_diagnostic_with_line (pfile, CPP_DL_WARNING_SYSHDR, reason, src_loc,\n+                                  column, msgid, &ap);\n+\n+  va_end (ap);\n+  return ret;\n+}\n+\n+/* Print a warning or error, depending on the value of LEVEL.  Include\n+   information from errno.  */\n+\n bool\n cpp_errno (cpp_reader *pfile, int level, const char *msgid)\n {"}, {"sha": "4dbc98974afe00a1f1561bc8ccdba5a8910fad00", "filename": "libcpp/expr.c", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fexpr.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -371,9 +371,9 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token)\n       if (limit != str\n \t  && CPP_WTRADITIONAL (pfile)\n \t  && ! cpp_sys_macro_p (pfile))\n-\tcpp_error (pfile, CPP_DL_WARNING,\n-\t\t   \"traditional C rejects the \\\"%.*s\\\" suffix\",\n-\t\t   (int) (limit - str), str);\n+\tcpp_warning (pfile, CPP_W_TRADITIONAL,\n+\t\t     \"traditional C rejects the \\\"%.*s\\\" suffix\",\n+\t\t     (int) (limit - str), str);\n \n       /* A suffix for double is a GCC extension via decimal float support.\n \t If the suffix also specifies an imaginary value we'll catch that\n@@ -417,21 +417,27 @@ cpp_classify_number (cpp_reader *pfile, const cpp_token *token)\n       if (CPP_WTRADITIONAL (pfile) && ! cpp_sys_macro_p (pfile))\n \t{\n \t  int u_or_i = (result & (CPP_N_UNSIGNED|CPP_N_IMAGINARY));\n-\t  int large = (result & CPP_N_WIDTH) == CPP_N_LARGE;\n+\t  int large = (result & CPP_N_WIDTH) == CPP_N_LARGE\n+\t\t       && CPP_OPTION (pfile, warn_long_long);\n \n-\t  if (u_or_i || (large && CPP_OPTION (pfile, warn_long_long)))\n-\t    cpp_error (pfile, CPP_DL_WARNING,\n-\t\t       \"traditional C rejects the \\\"%.*s\\\" suffix\",\n-\t\t       (int) (limit - str), str);\n+\t  if (u_or_i || large)\n+\t    cpp_warning (pfile, large ? CPP_W_LONG_LONG : CPP_W_TRADITIONAL,\n+\t\t         \"traditional C rejects the \\\"%.*s\\\" suffix\",\n+\t\t         (int) (limit - str), str);\n \t}\n \n       if ((result & CPP_N_WIDTH) == CPP_N_LARGE\n \t  && CPP_OPTION (pfile, warn_long_long))\n-\tcpp_error (pfile, \n-\t\t   CPP_OPTION (pfile, c99) ? CPP_DL_WARNING : CPP_DL_PEDWARN,\n-\t\t   CPP_OPTION (pfile, cplusplus) \n-\t\t   ? \"use of C++0x long long integer constant\"\n-\t\t   : \"use of C99 long long integer constant\");\n+        {\n+          const char *message = CPP_OPTION (pfile, cplusplus) \n+\t\t                ? N_(\"use of C++0x long long integer constant\")\n+\t\t                : N_(\"use of C99 long long integer constant\");\n+\n+\t  if (CPP_OPTION (pfile, c99))\n+            cpp_warning (pfile, CPP_W_LONG_LONG, message);\n+          else\n+            cpp_pedwarning (pfile, CPP_W_LONG_LONG, message);\n+        }\n \n       result |= CPP_N_INTEGER;\n     }\n@@ -792,8 +798,8 @@ eval_token (cpp_reader *pfile, const cpp_token *token)\n \t  result.high = 0;\n \t  result.low = 0;\n \t  if (CPP_OPTION (pfile, warn_undef) && !pfile->state.skip_eval)\n-\t    cpp_error (pfile, CPP_DL_WARNING, \"\\\"%s\\\" is not defined\",\n-\t\t       NODE_NAME (token->val.node.node));\n+\t    cpp_warning (pfile, CPP_W_UNDEF, \"\\\"%s\\\" is not defined\",\n+\t\t         NODE_NAME (token->val.node.node));\n \t}\n       break;\n \n@@ -806,8 +812,8 @@ eval_token (cpp_reader *pfile, const cpp_token *token)\n \t    cpp_error (pfile, CPP_DL_PEDWARN,\n \t\t       \"assertions are a GCC extension\");\n \t  else if (CPP_OPTION (pfile, warn_deprecated))\n-\t    cpp_error (pfile, CPP_DL_WARNING,\n-\t\t       \"assertions are a deprecated extension\");\n+\t    cpp_warning (pfile, CPP_W_DEPRECATED,\n+\t\t         \"assertions are a deprecated extension\");\n \t}\n       _cpp_test_assertion (pfile, &temp);\n       result.high = 0;\n@@ -1502,8 +1508,8 @@ num_unary_op (cpp_reader *pfile, cpp_num num, enum cpp_ttype op)\n     {\n     case CPP_UPLUS:\n       if (CPP_WTRADITIONAL (pfile) && !pfile->state.skip_eval)\n-\tcpp_error (pfile, CPP_DL_WARNING,\n-\t\t   \"traditional C rejects the unary plus operator\");\n+\tcpp_warning (pfile, CPP_W_TRADITIONAL,\n+\t\t     \"traditional C rejects the unary plus operator\");\n       num.overflow = false;\n       break;\n "}, {"sha": "9f29e6e63ae8282917d6d27d3bbea56eafcbf299", "filename": "libcpp/include/cpplib.h", "status": "modified", "additions": 61, "deletions": 19, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Finclude%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Finclude%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Finclude%2Fcpplib.h?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -497,9 +497,9 @@ struct cpp_callbacks\n \n   /* Called to emit a diagnostic.  This callback receives the\n      translated message.  */\n-  bool (*error) (cpp_reader *, int, source_location, unsigned int,\n+  bool (*error) (cpp_reader *, int, int, source_location, unsigned int,\n \t\t const char *, va_list *)\n-       ATTRIBUTE_FPTR_PRINTF(5,0);\n+       ATTRIBUTE_FPTR_PRINTF(6,0);\n \n   /* Callbacks for when a macro is expanded, or tested (whether\n      defined or not at the time) in #ifdef, #ifndef or \"defined\".  */\n@@ -829,25 +829,57 @@ cpp_num cpp_num_sign_extend (cpp_num, size_t);\n    position in the translation unit with it, use cpp_error_with_line\n    with a line number of zero.  */\n \n-/* Warning, an error with -Werror.  */\n-#define CPP_DL_WARNING\t\t0x00\n-/* Same as CPP_DL_WARNING, except it is not suppressed in system headers.  */\n-#define CPP_DL_WARNING_SYSHDR\t0x01\n-/* Warning, an error with -pedantic-errors or -Werror.  */\n-#define CPP_DL_PEDWARN\t\t0x02\n-/* An error.  */\n-#define CPP_DL_ERROR\t\t0x03\n-/* An internal consistency check failed.  Prints \"internal error: \",\n-   otherwise the same as CPP_DL_ERROR.  */\n-#define CPP_DL_ICE\t\t0x04\n-/* An informative note following a warning.  */\n-#define CPP_DL_NOTE\t\t0x05\n-/* A fatal error.  */\n-#define CPP_DL_FATAL\t\t0x06\n+enum {\n+  /* Warning, an error with -Werror.  */\n+  CPP_DL_WARNING = 0,\n+  /* Same as CPP_DL_WARNING, except it is not suppressed in system headers.  */\n+  CPP_DL_WARNING_SYSHDR,\n+  /* Warning, an error with -pedantic-errors or -Werror.  */\n+  CPP_DL_PEDWARN,\n+  /* An error.  */\n+  CPP_DL_ERROR,\n+  /* An internal consistency check failed.  Prints \"internal error: \",\n+     otherwise the same as CPP_DL_ERROR.  */\n+  CPP_DL_ICE,\n+  /* An informative note following a warning.  */\n+  CPP_DL_NOTE,\n+  /* A fatal error.  */\n+  CPP_DL_FATAL\n+};\n+\n+/* Warning reason codes. Use a reason code of zero for unclassified warnings\n+   and errors that are not warnings.  */\n+enum {\n+  CPP_W_NONE = 0,\n+  CPP_W_DEPRECATED,\n+  CPP_W_COMMENTS,\n+  CPP_W_MISSING_INCLUDE_DIRS,\n+  CPP_W_TRIGRAPHS,\n+  CPP_W_MULTICHAR,\n+  CPP_W_TRADITIONAL,\n+  CPP_W_LONG_LONG,\n+  CPP_W_ENDIF_LABELS,\n+  CPP_W_NUM_SIGN_CHANGE,\n+  CPP_W_VARIADIC_MACROS,\n+  CPP_W_BUILTIN_MACRO_REDEFINED,\n+  CPP_W_DOLLARS,\n+  CPP_W_UNDEF,\n+  CPP_W_UNUSED_MACROS,\n+  CPP_W_CXX_OPERATOR_NAMES,\n+  CPP_W_NORMALIZE,\n+  CPP_W_INVALID_PCH,\n+  CPP_W_WARNING_DIRECTIVE\n+};\n \n /* Output a diagnostic of some kind.  */\n extern bool cpp_error (cpp_reader *, int, const char *msgid, ...)\n   ATTRIBUTE_PRINTF_3;\n+extern bool cpp_warning (cpp_reader *, int, const char *msgid, ...)\n+  ATTRIBUTE_PRINTF_3;\n+extern bool cpp_pedwarning (cpp_reader *, int, const char *msgid, ...)\n+  ATTRIBUTE_PRINTF_3;\n+extern bool cpp_warning_syshdr (cpp_reader *, int, const char *msgid, ...)\n+  ATTRIBUTE_PRINTF_3;\n \n /* Output a diagnostic with \"MSGID: \" preceding the\n    error string of errno.  No location is printed.  */\n@@ -856,8 +888,18 @@ extern bool cpp_errno (cpp_reader *, int, const char *msgid);\n /* Same as cpp_error, except additionally specifies a position as a\n    (translation unit) physical line and physical column.  If the line is\n    zero, then no location is printed.  */\n-extern bool cpp_error_with_line (cpp_reader *, int, source_location, unsigned,\n-\t\t\t\t const char *msgid, ...) ATTRIBUTE_PRINTF_5;\n+extern bool cpp_error_with_line (cpp_reader *, int, source_location,\n+                                 unsigned, const char *msgid, ...)\n+  ATTRIBUTE_PRINTF_5;\n+extern bool cpp_warning_with_line (cpp_reader *, int, source_location,\n+                                   unsigned, const char *msgid, ...)\n+  ATTRIBUTE_PRINTF_5;\n+extern bool cpp_pedwarning_with_line (cpp_reader *, int, source_location,\n+                                      unsigned, const char *msgid, ...)\n+  ATTRIBUTE_PRINTF_5;\n+extern bool cpp_warning_with_line_syshdr (cpp_reader *, int, source_location,\n+                                          unsigned, const char *msgid, ...)\n+  ATTRIBUTE_PRINTF_5;\n \n /* In lex.c */\n extern int cpp_ideq (const cpp_token *, const char *);"}, {"sha": "f6282729946c658134ac819e721c53e89f4612df", "filename": "libcpp/lex.c", "status": "modified", "additions": 23, "deletions": 20, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Flex.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -301,14 +301,16 @@ _cpp_process_line_notes (cpp_reader *pfile, int in_comment)\n \t      && (!in_comment || warn_in_comment (pfile, note)))\n \t    {\n \t      if (CPP_OPTION (pfile, trigraphs))\n-\t\tcpp_error_with_line (pfile, CPP_DL_WARNING, pfile->line_table->highest_line, col,\n-\t\t\t\t     \"trigraph ??%c converted to %c\",\n-\t\t\t\t     note->type,\n-\t\t\t\t     (int) _cpp_trigraph_map[note->type]);\n+\t\tcpp_warning_with_line (pfile, CPP_W_TRIGRAPHS,\n+                                       pfile->line_table->highest_line, col,\n+\t\t\t\t       \"trigraph ??%c converted to %c\",\n+\t\t\t\t       note->type,\n+\t\t\t\t       (int) _cpp_trigraph_map[note->type]);\n \t      else\n \t\t{\n-\t\t  cpp_error_with_line \n-\t\t    (pfile, CPP_DL_WARNING, pfile->line_table->highest_line, col,\n+\t\t  cpp_warning_with_line \n+\t\t    (pfile, CPP_W_TRIGRAPHS,\n+                     pfile->line_table->highest_line, col,\n \t\t     \"trigraph ??%c ignored, use -trigraphs to enable\",\n \t\t     note->type);\n \t\t}\n@@ -355,9 +357,10 @@ _cpp_skip_block_comment (cpp_reader *pfile)\n \t      && cur[0] == '*' && cur[1] != '/')\n \t    {\n \t      buffer->cur = cur;\n-\t      cpp_error_with_line (pfile, CPP_DL_WARNING,\n-\t\t\t\t   pfile->line_table->highest_line, CPP_BUF_COL (buffer),\n-\t\t\t\t   \"\\\"/*\\\" within comment\");\n+\t      cpp_warning_with_line (pfile, CPP_W_COMMENTS,\n+\t\t\t\t     pfile->line_table->highest_line,\n+\t\t\t\t     CPP_BUF_COL (buffer),\n+\t\t\t\t     \"\\\"/*\\\" within comment\");\n \t    }\n \t}\n       else if (c == '\\n')\n@@ -460,11 +463,11 @@ warn_about_normalization (cpp_reader *pfile,\n \n       sz = cpp_spell_token (pfile, token, buf, false) - buf;\n       if (NORMALIZE_STATE_RESULT (s) == normalized_C)\n-\tcpp_error_with_line (pfile, CPP_DL_WARNING, token->src_loc, 0,\n-\t\t\t     \"`%.*s' is not in NFKC\", (int) sz, buf);\n+\tcpp_warning_with_line (pfile, CPP_W_NORMALIZE, token->src_loc, 0,\n+\t\t\t       \"`%.*s' is not in NFKC\", (int) sz, buf);\n       else\n-\tcpp_error_with_line (pfile, CPP_DL_WARNING, token->src_loc, 0,\n-\t\t\t     \"`%.*s' is not in NFC\", (int) sz, buf);\n+\tcpp_warning_with_line (pfile, CPP_W_NORMALIZE, token->src_loc, 0,\n+\t\t\t       \"`%.*s' is not in NFC\", (int) sz, buf);\n     }\n }\n \n@@ -545,9 +548,9 @@ lex_identifier_intern (cpp_reader *pfile, const uchar *base)\n \n       /* For -Wc++-compat, warn about use of C++ named operators.  */\n       if (result->flags & NODE_WARN_OPERATOR)\n-\tcpp_error (pfile, CPP_DL_WARNING,\n-\t\t   \"identifier \\\"%s\\\" is a special operator name in C++\",\n-\t\t   NODE_NAME (result));\n+\tcpp_warning (pfile, CPP_W_CXX_OPERATOR_NAMES,\n+\t\t     \"identifier \\\"%s\\\" is a special operator name in C++\",\n+\t\t     NODE_NAME (result));\n     }\n \n   return result;\n@@ -622,9 +625,9 @@ lex_identifier (cpp_reader *pfile, const uchar *base, bool starts_ucn,\n \n       /* For -Wc++-compat, warn about use of C++ named operators.  */\n       if (result->flags & NODE_WARN_OPERATOR)\n-\tcpp_error (pfile, CPP_DL_WARNING,\n-\t\t   \"identifier \\\"%s\\\" is a special operator name in C++\",\n-\t\t   NODE_NAME (result));\n+\tcpp_warning (pfile, CPP_W_CXX_OPERATOR_NAMES,\n+\t\t     \"identifier \\\"%s\\\" is a special operator name in C++\",\n+\t\t     NODE_NAME (result));\n     }\n \n   return result;\n@@ -1531,7 +1534,7 @@ _cpp_lex_direct (cpp_reader *pfile)\n \t    }\n \n \t  if (skip_line_comment (pfile) && CPP_OPTION (pfile, warn_comments))\n-\t    cpp_error (pfile, CPP_DL_WARNING, \"multi-line comment\");\n+\t    cpp_warning (pfile, CPP_W_COMMENTS, \"multi-line comment\");\n \t}\n       else if (c == '=')\n \t{"}, {"sha": "cbb0b0e715937db6745a99df6ba81c8b75914c7c", "filename": "libcpp/macro.c", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Fmacro.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Fmacro.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fmacro.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -83,8 +83,8 @@ _cpp_warn_if_unused_macro (cpp_reader *pfile, cpp_hashnode *node,\n \n       if (!macro->used\n \t  && MAIN_FILE_P (linemap_lookup (pfile->line_table, macro->line)))\n-\tcpp_error_with_line (pfile, CPP_DL_WARNING, macro->line, 0,\n-\t\t\t     \"macro \\\"%s\\\" is not used\", NODE_NAME (node));\n+\tcpp_warning_with_line (pfile, CPP_W_UNUSED_MACROS, macro->line, 0,\n+\t\t\t       \"macro \\\"%s\\\" is not used\", NODE_NAME (node));\n     }\n \n   return 1;\n@@ -860,9 +860,9 @@ enter_macro_context (cpp_reader *pfile, cpp_hashnode *node,\n \t  if (buff == NULL)\n \t    {\n \t      if (CPP_WTRADITIONAL (pfile) && ! node->value.macro->syshdr)\n-\t\tcpp_error (pfile, CPP_DL_WARNING,\n+\t\tcpp_warning (pfile, CPP_W_TRADITIONAL,\n  \"function-like macro \\\"%s\\\" must be used with arguments in traditional C\",\n-\t\t\t   NODE_NAME (node));\n+\t\t\t     NODE_NAME (node));\n \n \t      if (pragma_buff)\n \t\t_cpp_release_buff (pfile, pragma_buff);\n@@ -1585,13 +1585,14 @@ parse_params (cpp_reader *pfile, cpp_macro *macro)\n \t      if (! CPP_OPTION (pfile, c99)\n \t\t  && CPP_OPTION (pfile, pedantic)\n \t\t  && CPP_OPTION (pfile, warn_variadic_macros))\n-\t\tcpp_error (pfile, CPP_DL_PEDWARN,\n-\t\t\t   \"anonymous variadic macros were introduced in C99\");\n+\t\tcpp_pedwarning\n+                  (pfile, CPP_W_VARIADIC_MACROS,\n+\t\t   \"anonymous variadic macros were introduced in C99\");\n \t    }\n \t  else if (CPP_OPTION (pfile, pedantic)\n \t\t   && CPP_OPTION (pfile, warn_variadic_macros))\n-\t    cpp_error (pfile, CPP_DL_PEDWARN,\n-\t\t       \"ISO C does not permit named variadic macros\");\n+\t    cpp_pedwarning (pfile, CPP_W_VARIADIC_MACROS,\n+\t\t            \"ISO C does not permit named variadic macros\");\n \n \t  /* We're at the end, and just expect a closing parenthesis.  */\n \t  token = _cpp_lex_token (pfile);\n@@ -1894,10 +1895,14 @@ _cpp_create_definition (cpp_reader *pfile, cpp_hashnode *node)\n \n       if (warn_of_redefinition (pfile, node, macro))\n \t{\n+          const int reason = (node->flags & NODE_BUILTIN)\n+                             ? CPP_W_BUILTIN_MACRO_REDEFINED : CPP_W_NONE;\n \t  bool warned;\n-\t  warned = cpp_error_with_line (pfile, CPP_DL_PEDWARN,\n-\t\t\t\t\tpfile->directive_line, 0,\n-\t\t\t\t\t\"\\\"%s\\\" redefined\", NODE_NAME (node));\n+\n+\t  warned = cpp_pedwarning_with_line (pfile, reason,\n+\t\t\t\t\t     pfile->directive_line, 0,\n+\t\t\t\t\t     \"\\\"%s\\\" redefined\",\n+                                             NODE_NAME (node));\n \n \t  if (warned && node->type == NT_MACRO && !(node->flags & NODE_BUILTIN))\n \t    cpp_error_with_line (pfile, CPP_DL_NOTE,"}, {"sha": "2fb7ba543e787e52f87d928fe0d04938ddfece8b", "filename": "libcpp/pch.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Fpch.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/87cf065171b0d195d31f52dc6ffe519029efc7b7/libcpp%2Fpch.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libcpp%2Fpch.c?ref=87cf065171b0d195d31f52dc6ffe519029efc7b7", "patch": "@@ -613,9 +613,9 @@ cpp_valid_state (cpp_reader *r, const char *name, int fd)\n \t  || h->flags & NODE_POISONED)\n \t{\n \t  if (CPP_OPTION (r, warn_invalid_pch))\n-\t    cpp_error (r, CPP_DL_WARNING_SYSHDR,\n-\t\t       \"%s: not used because `%.*s' is poisoned\",\n-\t\t       name, m.name_length, namebuf);\n+\t    cpp_warning_syshdr (r, CPP_W_INVALID_PCH,\n+\t\t                \"%s: not used because `%.*s' is poisoned\",\n+\t\t                name, m.name_length, namebuf);\n \t  goto fail;\n \t}\n \n@@ -635,9 +635,9 @@ cpp_valid_state (cpp_reader *r, const char *name, int fd)\n \t    continue;\n \n \t  if (CPP_OPTION (r, warn_invalid_pch))\n-\t    cpp_error (r, CPP_DL_WARNING_SYSHDR,\n-\t\t       \"%s: not used because `%.*s' not defined\",\n-\t\t       name, m.name_length, namebuf);\n+\t    cpp_warning_syshdr (r, CPP_W_INVALID_PCH,\n+\t\t                \"%s: not used because `%.*s' not defined\",\n+\t\t                name, m.name_length, namebuf);\n \t  goto fail;\n \t}\n \n@@ -647,7 +647,7 @@ cpp_valid_state (cpp_reader *r, const char *name, int fd)\n \t  || memcmp (namebuf, newdefn, m.definition_length) != 0)\n \t{\n \t  if (CPP_OPTION (r, warn_invalid_pch))\n-\t    cpp_error (r, CPP_DL_WARNING_SYSHDR,\n+\t    cpp_warning_syshdr (r, CPP_W_INVALID_PCH,\n \t       \"%s: not used because `%.*s' defined as `%s' not `%.*s'\",\n \t\t       name, m.name_length, namebuf, newdefn + m.name_length,\n \t\t       m.definition_length - m.name_length,\n@@ -688,9 +688,9 @@ cpp_valid_state (cpp_reader *r, const char *name, int fd)\n       else\n \t{\n \t  if (CPP_OPTION (r, warn_invalid_pch))\n-\t    cpp_error (r, CPP_DL_WARNING_SYSHDR,\n-\t\t       \"%s: not used because `%s' is defined\",\n-\t\t       name, first);\n+\t    cpp_warning_syshdr (r, CPP_W_INVALID_PCH,\n+\t\t                \"%s: not used because `%s' is defined\",\n+\t\t                name, first);\n \t  goto fail;\n \t}\n     }\n@@ -708,9 +708,9 @@ cpp_valid_state (cpp_reader *r, const char *name, int fd)\n   if (counter && r->counter)\n     {\n       if (CPP_OPTION (r, warn_invalid_pch))\n-\tcpp_error (r, CPP_DL_WARNING_SYSHDR,\n-\t\t   \"%s: not used because `__COUNTER__' is invalid\",\n-\t\t   name);\n+\tcpp_warning_syshdr (r, CPP_W_INVALID_PCH,\n+\t\t            \"%s: not used because `__COUNTER__' is invalid\",\n+\t\t            name);\n \tgoto fail;\n     }\n "}]}