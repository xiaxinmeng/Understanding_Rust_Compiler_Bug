{"sha": "7de7ae1841e599746f1974ac507bb1d51483c47c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6N2RlN2FlMTg0MWU1OTk3NDZmMTk3NGFjNTA3YmIxZDUxNDgzYzQ3Yw==", "commit": {"author": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2012-02-02T21:20:14Z"}, "committer": {"name": "Paul Thomas", "email": "pault@gcc.gnu.org", "date": "2012-02-02T21:20:14Z"}, "message": "re PR fortran/52012 (Wrong-code with realloc on assignment and RESHAPE w/ ORDER=)\n\n2012-02-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/52012\n\t* trans-expr.c (fcncall_realloc_result): If variable shape is\n\tcorrect, retain the bounds, whatever they are.\n\n2012-02-02  Paul Thomas  <pault@gcc.gnu.org>\n\n\tPR fortran/52012\n\t* gfortran.dg/realloc_on_assign_11.f90: New test.\n\nFrom-SVN: r183849", "tree": {"sha": "8e91a276399af07e83fb1ee3b97ea7773e7533d3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/8e91a276399af07e83fb1ee3b97ea7773e7533d3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/7de7ae1841e599746f1974ac507bb1d51483c47c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de7ae1841e599746f1974ac507bb1d51483c47c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7de7ae1841e599746f1974ac507bb1d51483c47c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7de7ae1841e599746f1974ac507bb1d51483c47c/comments", "author": null, "committer": null, "parents": [{"sha": "1b3f07c72adadbffcfb035b986414e0a18fdd6a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1b3f07c72adadbffcfb035b986414e0a18fdd6a2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1b3f07c72adadbffcfb035b986414e0a18fdd6a2"}], "stats": {"total": 117, "additions": 104, "deletions": 13}, "files": [{"sha": "459e4e4c2808e0ccb817798a305499b88ccbdf50", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de7ae1841e599746f1974ac507bb1d51483c47c/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de7ae1841e599746f1974ac507bb1d51483c47c/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=7de7ae1841e599746f1974ac507bb1d51483c47c", "patch": "@@ -1,3 +1,9 @@\n+2012-02-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/52012\n+\t* trans-expr.c (fcncall_realloc_result): If variable shape is\n+\tcorrect, retain the bounds, whatever they are.\n+\n 2012-02-02  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/52093"}, {"sha": "b0fc79cbd55a3bc135f57112b260af650b43de3b", "filename": "gcc/fortran/trans-expr.c", "status": "modified", "additions": 57, "deletions": 13, "changes": 70, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de7ae1841e599746f1974ac507bb1d51483c47c/gcc%2Ffortran%2Ftrans-expr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de7ae1841e599746f1974ac507bb1d51483c47c/gcc%2Ffortran%2Ftrans-expr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Ftrans-expr.c?ref=7de7ae1841e599746f1974ac507bb1d51483c47c", "patch": "@@ -6276,7 +6276,7 @@ realloc_lhs_loop_for_fcn_call (gfc_se *se, locus *where, gfc_ss **ss,\n }\n \n \n-/* For Assignment to a reallocatable lhs from intrinsic functions,\n+/* For assignment to a reallocatable lhs from intrinsic functions,\n    replace the se.expr (ie. the result) with a temporary descriptor.\n    Null the data field so that the library allocates space for the\n    result. Free the data of the original descriptor after the function,\n@@ -6290,44 +6290,88 @@ fcncall_realloc_result (gfc_se *se, int rank)\n   tree res_desc;\n   tree tmp;\n   tree offset;\n+  tree zero_cond;\n   int n;\n \n   /* Use the allocation done by the library.  Substitute the lhs\n      descriptor with a copy, whose data field is nulled.*/\n   desc = build_fold_indirect_ref_loc (input_location, se->expr);\n+\n   /* Unallocated, the descriptor does not have a dtype.  */\n   tmp = gfc_conv_descriptor_dtype (desc);\n   gfc_add_modify (&se->pre, tmp, gfc_get_dtype (TREE_TYPE (desc)));\n+\n   res_desc = gfc_evaluate_now (desc, &se->pre);\n   gfc_conv_descriptor_data_set (&se->pre, res_desc, null_pointer_node);\n   se->expr = gfc_build_addr_expr (TREE_TYPE (se->expr), res_desc);\n \n-  /* Free the lhs after the function call and copy the result to\n+  /* Free the lhs after the function call and copy the result data to\n      the lhs descriptor.  */\n   tmp = gfc_conv_descriptor_data_get (desc);\n+  zero_cond = fold_build2_loc (input_location, EQ_EXPR,\n+\t\t\t       boolean_type_node, tmp,\n+\t\t\t       build_int_cst (TREE_TYPE (tmp), 0));\n+  zero_cond = gfc_evaluate_now (zero_cond, &se->post);\n   tmp = gfc_call_free (fold_convert (pvoid_type_node, tmp));\n   gfc_add_expr_to_block (&se->post, tmp);\n-  gfc_add_modify (&se->post, desc, res_desc);\n \n-  offset = gfc_index_zero_node;\n+  tmp = gfc_conv_descriptor_data_get (res_desc);\n+  gfc_conv_descriptor_data_set (&se->post, desc, tmp);\n \n-  /* Now reset the bounds from zero based to unity based and set the\n-     offset accordingly.  */\n+  /* Check that the shapes are the same between lhs and expression.  */\n+  for (n = 0 ; n < rank; n++)\n+    {\n+      tree tmp1;\n+      tmp = gfc_conv_descriptor_lbound_get (desc, gfc_rank_cst[n]);\n+      tmp1 = gfc_conv_descriptor_lbound_get (res_desc, gfc_rank_cst[n]);\n+      tmp = fold_build2_loc (input_location, MINUS_EXPR,\n+\t\t\t     gfc_array_index_type, tmp, tmp1);\n+      tmp1 = gfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[n]);\n+      tmp = fold_build2_loc (input_location, MINUS_EXPR,\n+\t\t\t     gfc_array_index_type, tmp, tmp1);\n+      tmp1 = gfc_conv_descriptor_ubound_get (res_desc, gfc_rank_cst[n]);\n+      tmp = fold_build2_loc (input_location, PLUS_EXPR,\n+\t\t\t     gfc_array_index_type, tmp, tmp1);\n+      tmp = fold_build2_loc (input_location, NE_EXPR,\n+\t\t\t     boolean_type_node, tmp,\n+\t\t\t     gfc_index_zero_node);\n+      tmp = gfc_evaluate_now (tmp, &se->post);\n+      zero_cond = fold_build2_loc (input_location, TRUTH_OR_EXPR,\n+\t\t\t\t   boolean_type_node, tmp,\n+\t\t\t\t   zero_cond);\n+    }\n+\n+  /* 'zero_cond' being true is equal to lhs not being allocated or the\n+     shapes being different.  */\n+  zero_cond = gfc_evaluate_now (zero_cond, &se->post);\n+\n+  /* Now reset the bounds returned from the function call to bounds based\n+     on the lhs lbounds, except where the lhs is not allocated or the shapes\n+     of 'variable and 'expr' are different. Set the offset accordingly.  */\n+  offset = gfc_index_zero_node;\n   for (n = 0 ; n < rank; n++)\n     {\n-      tmp = gfc_conv_descriptor_ubound_get (desc, gfc_rank_cst[n]);\n+      tree lbound;\n+\n+      lbound = gfc_conv_descriptor_lbound_get (desc, gfc_rank_cst[n]);\n+      lbound = fold_build3_loc (input_location, COND_EXPR,\n+\t\t\t\tgfc_array_index_type, zero_cond,\n+\t\t\t\tgfc_index_one_node, lbound);\n+      lbound = gfc_evaluate_now (lbound, &se->post);\n+\n+      tmp = gfc_conv_descriptor_ubound_get (res_desc, gfc_rank_cst[n]);\n       tmp = fold_build2_loc (input_location, PLUS_EXPR,\n-\t\t\t     gfc_array_index_type,\n-\t\t\t     tmp, gfc_index_one_node);\n+\t\t\t     gfc_array_index_type, tmp, lbound);\n       gfc_conv_descriptor_lbound_set (&se->post, desc,\n-\t\t\t\t      gfc_rank_cst[n],\n-\t\t\t\t      gfc_index_one_node);\n+\t\t\t\t      gfc_rank_cst[n], lbound);\n       gfc_conv_descriptor_ubound_set (&se->post, desc,\n \t\t\t\t      gfc_rank_cst[n], tmp);\n \n-      /* Accumulate the offset.  Since all lbounds are unity, offset\n-\t is just minus the sum of the strides.  */\n+      /* Accumulate the offset.  */\n       tmp = gfc_conv_descriptor_stride_get (desc, gfc_rank_cst[n]);\n+      tmp = fold_build2_loc (input_location, MULT_EXPR,\n+\t\t\t\tgfc_array_index_type,\n+\t\t\t\tlbound, tmp);\n       offset = fold_build2_loc (input_location, MINUS_EXPR,\n \t\t\t\tgfc_array_index_type,\n \t\t\t\toffset, tmp);"}, {"sha": "025480442b9c7d776f2f6606d2d193c49c3b606e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de7ae1841e599746f1974ac507bb1d51483c47c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de7ae1841e599746f1974ac507bb1d51483c47c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=7de7ae1841e599746f1974ac507bb1d51483c47c", "patch": "@@ -1,3 +1,8 @@\n+2012-02-02  Paul Thomas  <pault@gcc.gnu.org>\n+\n+\tPR fortran/52012\n+\t* gfortran.dg/realloc_on_assign_11.f90: New test.\n+\n 2012-02-02  Tobias Burnus  <burnus@net-b.de>\n \n \tPR fortran/52093"}, {"sha": "ab96bb9deaf837e1ce318ee11c4a96b8b1edfeeb", "filename": "gcc/testsuite/gfortran.dg/realloc_on_assign_11.f90", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/7de7ae1841e599746f1974ac507bb1d51483c47c/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_11.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/7de7ae1841e599746f1974ac507bb1d51483c47c/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_11.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Frealloc_on_assign_11.f90?ref=7de7ae1841e599746f1974ac507bb1d51483c47c", "patch": "@@ -0,0 +1,36 @@\n+! { dg-do run }\n+! PR52012 - tests of automatic reallocation on assignment for variable = array_intrinsic\n+!\n+! Contributed by Tobias Burnus and Dominique Dhumieres\n+!\n+  integer, allocatable :: a(:), b(:), e(:,:)\n+  integer :: c(1:5,1:5), d(1:5,1:5)\n+  allocate(b(3))\n+  b = [1,2,3]\n+\n+! Shape conforms so bounds follow allocation.\n+  allocate (a(7:9))\n+  a = reshape( b, shape=[size(b)])\n+  if (any ([lbound(a), ubound(a), size(a), shape (a)] .ne. [7,9,3,3])) call abort\n+\n+  deallocate (a)\n+! 'a' not allocated so lbound defaults to 1.\n+  a = reshape( b, shape=[size(b)])\n+  if (any ([lbound(a), ubound(a), size(a), shape (a)] .ne. [1,3,3,3])) call abort\n+\n+  deallocate (a)\n+! Shape conforms so bounds follow allocation.\n+  allocate (a(0:0))\n+  a(0) = 1\n+  if (any ([lbound(a), ubound(a), size(a), shape (a)] .ne. [0,0,1,1])) call abort\n+\n+! 'a' not allocated so lbound defaults to 1.\n+  e = matmul (c(2:5,:), d(:, 3:4))\n+  if (any ([lbound(e), ubound(e), size(e), shape (e)] .ne. [1,1,4,2,8,4,2])) call abort\n+  deallocate (e)\n+\n+! Shape conforms so bounds follow allocation.\n+  allocate (e(4:7, 11:12))\n+  e = matmul (c(2:5,:), d(:, 3:4))\n+  if (any ([lbound(e), ubound(e), size(e), shape (e)] .ne. [4,11,7,12,8,4,2])) call abort\n+end"}]}