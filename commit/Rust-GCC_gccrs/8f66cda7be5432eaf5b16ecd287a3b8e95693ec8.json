{"sha": "8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OGY2NmNkYTdiZTU0MzJlYWY1YjE2ZWNkMjg3YTNiOGU5NTY5M2VjOA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T08:32:46Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2011-08-29T08:32:46Z"}, "message": "[multiple changes]\n\n2011-08-29  Robert Dewar  <dewar@adacore.com>\n\n\t* sem_type.adb, einfo.ads, freeze.adb, exp_ch4.adb, sem_ch13.adb:\n\tMinor reformatting.\n\n2011-08-29  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* exp_util.adb (Requires_Cleanup_Actions (List_Id, Boolean, Boolean)):\n\tCorrect the check which involves the freeze node of a controlled or\n\taccess-to-controlled type.\n\n2011-08-29  Geert Bosch  <bosch@adacore.com>\n\n\t* sem_warn.adb (Check_Code_Statement): Remove check for consecutive Asm\n\tstatements.\n\t* s-vaflop-vms-alpha.adb: Remove bogus Volatile => True arguments from\n\tAsm statements.\n\nFrom-SVN: r178160", "tree": {"sha": "1eaaee9053b9ce0eacb82764012f0bd486fa3c54", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1eaaee9053b9ce0eacb82764012f0bd486fa3c54"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/comments", "author": null, "committer": null, "parents": [{"sha": "cf161d662097ee21f515df7c3cf407c1891c07f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cf161d662097ee21f515df7c3cf407c1891c07f6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cf161d662097ee21f515df7c3cf407c1891c07f6"}], "stats": {"total": 309, "additions": 119, "deletions": 190}, "files": [{"sha": "dd9bef673e279e8a071dc84f4401e9034612219c", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "patch": "@@ -1,3 +1,21 @@\n+2011-08-29  Robert Dewar  <dewar@adacore.com>\n+\n+\t* sem_type.adb, einfo.ads, freeze.adb, exp_ch4.adb, sem_ch13.adb:\n+\tMinor reformatting.\n+\n+2011-08-29  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* exp_util.adb (Requires_Cleanup_Actions (List_Id, Boolean, Boolean)):\n+\tCorrect the check which involves the freeze node of a controlled or\n+\taccess-to-controlled type.\n+\n+2011-08-29  Geert Bosch  <bosch@adacore.com>\n+\n+\t* sem_warn.adb (Check_Code_Statement): Remove check for consecutive Asm\n+\tstatements.\n+\t* s-vaflop-vms-alpha.adb: Remove bogus Volatile => True arguments from\n+\tAsm statements.\n+\n 2011-08-29  Yannick Moy  <moy@adacore.com>\n \n \t* sem_ch3.adb (Array_Type_Declaration): Insert a subtype declaration"}, {"sha": "7ed878d3a2c28af82ea8af9d9d342458216f46e8", "filename": "gcc/ada/einfo.ads", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Feinfo.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Feinfo.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Feinfo.ads?ref=8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "patch": "@@ -3515,12 +3515,12 @@ package Einfo is\n --       by-reference-type or because it uses explicitly the secondary stack.\n \n --    Reverse_Bit_Order (Flag164) [base type only]\n---       Present in all record type entities. Set if a valid pragma an\n---       attribute representation clause for Bit_Order has reversed the order\n---       of bits from the default value. When this flag is set, a component\n---       clause must specify a set of bits entirely contained in a single\n---       storage unit (Ada 95) or a single machine scalar (see Ada 2005\n---       AI-133), or must occupy in integral number of storage units.\n+--       Present in all record type entities. Set if entity has a Bit_Order\n+--       aspect (set by an aspect clause or attribute definition clause) that\n+--       has reversed the order of bits from the default value. When this flag\n+--       is set, a component clause must specify a set of bits entirely within\n+--       a single storage unit (Ada 95) or within a single machine scalar (see\n+--       Ada 2005 AI-133), or must occupy an integral number of storage units.\n \n --    RM_Size (Uint13)\n --       Present in all type and subtype entities. Contains the value of"}, {"sha": "ec58d31aa19a0df68995129ee036726f2e4c2427", "filename": "gcc/ada/exp_ch4.adb", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Fexp_ch4.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Fexp_ch4.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_ch4.adb?ref=8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "patch": "@@ -6193,25 +6193,23 @@ package body Exp_Ch4 is\n    begin\n       Binary_Op_Validity_Checks (N);\n \n+      --  CodePeer and GNATprove want to see the unexpanded N_Op_Expon node\n+\n+      if CodePeer_Mode or ALFA_Mode then\n+         return;\n+      end if;\n+\n       --  If either operand is of a private type, then we have the use of an\n       --  intrinsic operator, and we get rid of the privateness, by using root\n       --  types of underlying types for the actual operation. Otherwise the\n       --  private types will cause trouble if we expand multiplications or\n       --  shifts etc. We also do this transformation if the result type is\n       --  different from the base type.\n \n-      if CodePeer_Mode or ALFA_Mode then\n-         --  CodePeer and GNATprove want to see the unexpanded N_Op_Expon node\n-         return;\n-      end if;\n-\n       if Is_Private_Type (Etype (Base))\n-           or else\n-         Is_Private_Type (Typ)\n-           or else\n-         Is_Private_Type (Exptyp)\n-           or else\n-         Rtyp /= Root_Type (Bastyp)\n+        or else Is_Private_Type (Typ)\n+        or else Is_Private_Type (Exptyp)\n+        or else Rtyp /= Root_Type (Bastyp)\n       then\n          declare\n             Bt : constant Entity_Id := Root_Type (Underlying_Type (Bastyp));"}, {"sha": "27719642e16dfb1189b429a5a6b539c61cd14783", "filename": "gcc/ada/exp_util.adb", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Fexp_util.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Fexp_util.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_util.adb?ref=8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "patch": "@@ -6430,13 +6430,15 @@ package body Exp_Util is\n          then\n             Typ := Entity (Decl);\n \n-            if (Is_Access_Type (Typ)\n-                  and then not Is_Access_Subprogram_Type (Typ)\n-                  and then Needs_Finalization\n-                             (Available_View (Designated_Type (Typ))))\n-              or else\n-               (Is_Type (Typ)\n-                  and then Needs_Finalization (Typ))\n+            if ((Is_Access_Type (Typ)\n+                   and then not Is_Access_Subprogram_Type (Typ)\n+                   and then Needs_Finalization\n+                              (Available_View (Designated_Type (Typ))))\n+                 or else\n+                (Is_Type (Typ)\n+                   and then Needs_Finalization (Typ)))\n+              and then Requires_Cleanup_Actions\n+                         (Actions (Decl), For_Package, Nested_Constructs)\n             then\n                return True;\n             end if;"}, {"sha": "462ed34c5a871060ff7a5f0e6f6ab935a7f7f102", "filename": "gcc/ada/freeze.adb", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Ffreeze.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Ffreeze.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Ffreeze.adb?ref=8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "patch": "@@ -2029,8 +2029,7 @@ package body Freeze is\n             Next_Entity (Comp);\n          end loop;\n \n-         --  Deal with Bit_Order attribute definition specifying a non-default\n-         --  bit order.\n+         --  Deal with Bit_Order aspect specifying a non-default bit order\n \n          if Reverse_Bit_Order (Rec) and then Base_Type (Rec) = Rec then\n             if not Placed_Component then"}, {"sha": "02e4be46f0f06650582dbdb60fdb24a1b4dc7039", "filename": "gcc/ada/s-vaflop-vms-alpha.adb", "status": "modified", "additions": 74, "deletions": 150, "changes": 224, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Fs-vaflop-vms-alpha.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Fs-vaflop-vms-alpha.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fs-vaflop-vms-alpha.adb?ref=8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "patch": "@@ -6,7 +6,7 @@\n --                                                                          --\n --                                 B o d y                                  --\n --                                                                          --\n---          Copyright (C) 1997-2009, Free Software Foundation, Inc.         --\n+--          Copyright (C) 1997-2011, Free Software Foundation, Inc.         --\n --                       (Version for Alpha OpenVMS)                        --\n --                                                                          --\n -- GNAT is free software;  you can  redistribute it  and/or modify it under --\n@@ -67,12 +67,9 @@ package body System.Vax_Float_Operations is\n       A, B : T;\n       C    : G;\n    begin\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), D'Asm_Input (\"m\", X),\n-           Volatile => True);\n-      Asm (\"cvtdg %1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A),\n-           Volatile => True);\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B),\n-           Volatile => True);\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), D'Asm_Input (\"m\", X));\n+      Asm (\"cvtdg %1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B));\n       return C;\n    end D_To_G;\n \n@@ -84,10 +81,8 @@ package body System.Vax_Float_Operations is\n       A : T;\n       B : G;\n    begin\n-      Asm (\"ldf %0,%1\", T'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X),\n-           Volatile => True);\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", B), T'Asm_Input (\"f\", A),\n-           Volatile => True);\n+      Asm (\"ldf %0,%1\", T'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X));\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", B), T'Asm_Input (\"f\", A));\n       return B;\n    end F_To_G;\n \n@@ -103,8 +98,7 @@ package body System.Vax_Float_Operations is\n       --  Because converting to a wider FP format is a no-op, we say\n       --  A is 64-bit even though we are loading 32 bits into it.\n \n-      Asm (\"ldf %0,%1\", T'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X),\n-           Volatile => True);\n+      Asm (\"ldf %0,%1\", T'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X));\n \n       B := S (Cvt_G_T (A));\n       return B;\n@@ -118,12 +112,9 @@ package body System.Vax_Float_Operations is\n       A, B : T;\n       C    : D;\n    begin\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X),\n-           Volatile => True);\n-      Asm (\"cvtgd %1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A),\n-           Volatile => True);\n-      Asm (\"stg %1,%0\", D'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B),\n-           Volatile => True);\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X));\n+      Asm (\"cvtgd %1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n+      Asm (\"stg %1,%0\", D'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B));\n       return C;\n    end G_To_D;\n \n@@ -136,12 +127,9 @@ package body System.Vax_Float_Operations is\n       B : S;\n       C : F;\n    begin\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X),\n-           Volatile => True);\n-      Asm (\"cvtgf %1,%0\", S'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A),\n-           Volatile => True);\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", C), S'Asm_Input (\"f\", B),\n-           Volatile => True);\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X));\n+      Asm (\"cvtgf %1,%0\", S'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", C), S'Asm_Input (\"f\", B));\n       return C;\n    end G_To_F;\n \n@@ -153,10 +141,8 @@ package body System.Vax_Float_Operations is\n       A : T;\n       B : Q;\n    begin\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X),\n-           Volatile => True);\n-      Asm (\"cvtgq %1,%0\", Q'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A),\n-           Volatile => True);\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X));\n+      Asm (\"cvtgq %1,%0\", Q'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n       return B;\n    end G_To_Q;\n \n@@ -167,8 +153,7 @@ package body System.Vax_Float_Operations is\n    function G_To_T (X : G) return T is\n       A, B : T;\n    begin\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X),\n-           Volatile => True);\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X));\n       B := Cvt_G_T (A);\n       return B;\n    end G_To_T;\n@@ -190,10 +175,8 @@ package body System.Vax_Float_Operations is\n       A : S;\n       B : F;\n    begin\n-      Asm (\"cvtqf %1,%0\", S'Asm_Output (\"=f\", A), Q'Asm_Input (\"f\", X),\n-           Volatile => True);\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", B), S'Asm_Input (\"f\", A),\n-           Volatile => True);\n+      Asm (\"cvtqf %1,%0\", S'Asm_Output (\"=f\", A), Q'Asm_Input (\"f\", X));\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", B), S'Asm_Input (\"f\", A));\n       return B;\n    end Q_To_F;\n \n@@ -205,10 +188,8 @@ package body System.Vax_Float_Operations is\n       A : T;\n       B : G;\n    begin\n-      Asm (\"cvtqg %1,%0\", T'Asm_Output (\"=f\", A), Q'Asm_Input (\"f\", X),\n-           Volatile => True);\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", B), T'Asm_Input (\"f\", A),\n-           Volatile => True);\n+      Asm (\"cvtqg %1,%0\", T'Asm_Output (\"=f\", A), Q'Asm_Input (\"f\", X));\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", B), T'Asm_Input (\"f\", A));\n       return B;\n    end Q_To_G;\n \n@@ -221,8 +202,7 @@ package body System.Vax_Float_Operations is\n       B : F;\n    begin\n       A := Cvt_T_F (T (X));\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", B), S'Asm_Input (\"f\", A),\n-           Volatile => True);\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", B), S'Asm_Input (\"f\", A));\n       return B;\n    end S_To_F;\n \n@@ -244,8 +224,7 @@ package body System.Vax_Float_Operations is\n       B : G;\n    begin\n       A := Cvt_T_G (X);\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", B), T'Asm_Input (\"f\", A),\n-           Volatile => True);\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", B), T'Asm_Input (\"f\", A));\n       return B;\n    end T_To_G;\n \n@@ -257,12 +236,9 @@ package body System.Vax_Float_Operations is\n       A, B : S;\n       C    : F;\n    begin\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X),\n-           Volatile => True);\n-      Asm (\"cpys $f31,%1,%0\", S'Asm_Output (\"=f\", B), S'Asm_Input (\"f\", A),\n-           Volatile => True);\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", C), S'Asm_Input (\"f\", B),\n-           Volatile => True);\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X));\n+      Asm (\"cpys $f31,%1,%0\", S'Asm_Output (\"=f\", B), S'Asm_Input (\"f\", A));\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", C), S'Asm_Input (\"f\", B));\n       return C;\n    end Abs_F;\n \n@@ -275,10 +251,8 @@ package body System.Vax_Float_Operations is\n       C    : G;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X));\n-      Asm (\"cpys $f31,%1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A),\n-           Volatile => True);\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B),\n-           Volatile => True);\n+      Asm (\"cpys $f31,%1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B));\n       return C;\n    end Abs_G;\n \n@@ -291,13 +265,10 @@ package body System.Vax_Float_Operations is\n       R1        : F;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n       Asm (\"addf %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R),\n-           Volatile => True);\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R));\n       return R1;\n    end Add_F;\n \n@@ -310,13 +281,10 @@ package body System.Vax_Float_Operations is\n       R1        : G;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n       Asm (\"addg %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R),\n-           Volatile => True);\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R));\n       return R1;\n    end Add_G;\n \n@@ -392,13 +360,10 @@ package body System.Vax_Float_Operations is\n       R1        : F;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n       Asm (\"divf %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R),\n-           Volatile => True);\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R));\n       return R1;\n    end Div_F;\n \n@@ -411,13 +376,10 @@ package body System.Vax_Float_Operations is\n       R1        : G;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n       Asm (\"divg %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R),\n-           Volatile => True);\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R));\n       return R1;\n    end Div_G;\n \n@@ -429,11 +391,9 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : S;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n       Asm (\"cmpgeq %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n       return R /= 0.0;\n    end Eq_F;\n \n@@ -445,11 +405,9 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : T;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n       Asm (\"cmpgeq %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n       return R /= 0.0;\n    end Eq_G;\n \n@@ -461,11 +419,9 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : S;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n       Asm (\"cmpgle %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n       return R /= 0.0;\n    end Le_F;\n \n@@ -477,11 +433,9 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : T;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n       Asm (\"cmpgle %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n       return R /= 0.0;\n    end Le_G;\n \n@@ -493,11 +447,9 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : S;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n       Asm (\"cmpglt %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n       return R /= 0.0;\n    end Lt_F;\n \n@@ -509,11 +461,9 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : T;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n       Asm (\"cmpglt %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n       return R /= 0.0;\n    end Lt_G;\n \n@@ -526,13 +476,10 @@ package body System.Vax_Float_Operations is\n       R1        : F;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n       Asm (\"mulf %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R),\n-           Volatile => True);\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R));\n       return R1;\n    end Mul_F;\n \n@@ -545,13 +492,10 @@ package body System.Vax_Float_Operations is\n       R1        : G;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n       Asm (\"mulg %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R),\n-           Volatile => True);\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R));\n       return R1;\n    end Mul_G;\n \n@@ -563,11 +507,9 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : S;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n       Asm (\"cmpgeq %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n       return R = 0.0;\n    end Ne_F;\n \n@@ -579,11 +521,9 @@ package body System.Vax_Float_Operations is\n       X1, Y1, R : T;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n       Asm (\"cmpgeq %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n       return R = 0.0;\n    end Ne_G;\n \n@@ -596,10 +536,8 @@ package body System.Vax_Float_Operations is\n       C    : F;\n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", A), F'Asm_Input (\"m\", X));\n-      Asm (\"cpysn %1,%1,%0\", S'Asm_Output (\"=f\", B), S'Asm_Input (\"f\", A),\n-           Volatile => True);\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", C), S'Asm_Input (\"f\", B),\n-           Volatile => True);\n+      Asm (\"cpysn %1,%1,%0\", S'Asm_Output (\"=f\", B), S'Asm_Input (\"f\", A));\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", C), S'Asm_Input (\"f\", B));\n       return C;\n    end Neg_F;\n \n@@ -612,10 +550,8 @@ package body System.Vax_Float_Operations is\n       C    : G;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", A), G'Asm_Input (\"m\", X));\n-      Asm (\"cpysn %1,%1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A),\n-           Volatile => True);\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B),\n-           Volatile => True);\n+      Asm (\"cpysn %1,%1,%0\", T'Asm_Output (\"=f\", B), T'Asm_Input (\"f\", A));\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", C), T'Asm_Input (\"f\", B));\n       return C;\n    end Neg_G;\n \n@@ -652,13 +588,11 @@ package body System.Vax_Float_Operations is\n \n    function Return_D (X : D) return D is\n       R : D;\n-\n    begin\n       --  The return value is already in $f0 so we need to trick the compiler\n       --  into thinking that we're moving X to $f0.\n-\n       Asm (\"cvtdg $f0,$f0\", Inputs => D'Asm_Input (\"g\", X), Clobber => \"$f0\",\n-           Volatile => True);\n+        Volatile => True);\n       Asm (\"stg $f0,%0\", D'Asm_Output (\"=m\", R), Volatile => True);\n       return R;\n    end Return_D;\n@@ -669,13 +603,11 @@ package body System.Vax_Float_Operations is\n \n    function Return_F (X : F) return F is\n       R : F;\n-\n    begin\n       --  The return value is already in $f0 so we need to trick the compiler\n       --  into thinking that we're moving X to $f0.\n-\n       Asm (\"stf $f0,%0\", F'Asm_Output (\"=m\", R), F'Asm_Input (\"g\", X),\n-           Clobber => \"$f0\", Volatile => True);\n+        Clobber => \"$f0\", Volatile => True);\n       return R;\n    end Return_F;\n \n@@ -685,13 +617,11 @@ package body System.Vax_Float_Operations is\n \n    function Return_G (X : G) return G is\n       R : G;\n-\n    begin\n       --  The return value is already in $f0 so we need to trick the compiler\n       --  into thinking that we're moving X to $f0.\n-\n       Asm (\"stg $f0,%0\", G'Asm_Output (\"=m\", R), G'Asm_Input (\"g\", X),\n-           Clobber => \"$f0\", Volatile => True);\n+        Clobber => \"$f0\", Volatile => True);\n       return R;\n    end Return_G;\n \n@@ -705,13 +635,10 @@ package body System.Vax_Float_Operations is\n \n    begin\n       Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", X1), F'Asm_Input (\"m\", X));\n-      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldf %0,%1\", S'Asm_Output (\"=f\", Y1), F'Asm_Input (\"m\", Y));\n       Asm (\"subf %1,%2,%0\", S'Asm_Output (\"=f\", R),\n-           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n-      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R),\n-           Volatile => True);\n+           (S'Asm_Input (\"f\", X1), S'Asm_Input (\"f\", Y1)));\n+      Asm (\"stf %1,%0\", F'Asm_Output (\"=m\", R1), S'Asm_Input (\"f\", R));\n       return R1;\n    end Sub_F;\n \n@@ -724,13 +651,10 @@ package body System.Vax_Float_Operations is\n       R1        : G;\n    begin\n       Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", X1), G'Asm_Input (\"m\", X));\n-      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y),\n-           Volatile => True);\n+      Asm (\"ldg %0,%1\", T'Asm_Output (\"=f\", Y1), G'Asm_Input (\"m\", Y));\n       Asm (\"subg %1,%2,%0\", T'Asm_Output (\"=f\", R),\n-           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)),\n-           Volatile => True);\n-      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R),\n-           Volatile => True);\n+           (T'Asm_Input (\"f\", X1), T'Asm_Input (\"f\", Y1)));\n+      Asm (\"stg %1,%0\", G'Asm_Output (\"=m\", R1), T'Asm_Input (\"f\", R));\n       return R1;\n    end Sub_G;\n "}, {"sha": "abaf4156a643cfec2f820b60e871969253aeea7e", "filename": "gcc/ada/sem_ch13.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Fsem_ch13.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Fsem_ch13.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch13.adb?ref=8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "patch": "@@ -235,7 +235,7 @@ package body Sem_Ch13 is\n       --  Processing depends on version of Ada\n \n       --  For Ada 95, we just renumber bits within a storage unit. We do the\n-      --  same for Ada 83 mode, since we recognize attribute Bit_Order in\n+      --  same for Ada 83 mode, since we recognize the Bit_Order attribute in\n       --  Ada 83, and are free to add this extension.\n \n       if Ada_Version < Ada_2005 then"}, {"sha": "28b161ce8d5e07810ade306f7fa4a00b33ad450c", "filename": "gcc/ada/sem_type.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Fsem_type.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Fsem_type.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_type.adb?ref=8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "patch": "@@ -627,7 +627,7 @@ package body Sem_Type is\n                      --  within the instance must not be included.\n \n                      if (Scope (H) = Scope (Ent)\n-                           or else Scope (H) = Scope (Scope (Ent)))\n+                          or else Scope (H) = Scope (Scope (Ent)))\n                         and then In_Instance\n                         and then H /= Renamed_Entity (Ent)\n                         and then not Is_Inherited_Operation (H)"}, {"sha": "0fee04cddb2ddf0211ea774fbf5a2902a81498d9", "filename": "gcc/ada/sem_warn.adb", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Fsem_warn.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8f66cda7be5432eaf5b16ecd287a3b8e95693ec8/gcc%2Fada%2Fsem_warn.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_warn.adb?ref=8f66cda7be5432eaf5b16ecd287a3b8e95693ec8", "patch": "@@ -211,18 +211,6 @@ package body Sem_Warn is\n            (\"?code statement with no outputs should usually be Volatile!\", N);\n          return;\n       end if;\n-\n-      --  Check multiple code statements in a row\n-\n-      if Is_List_Member (N)\n-        and then Present (Prev (N))\n-        and then Nkind (Prev (N)) = N_Code_Statement\n-      then\n-         Error_Msg_F\n-           (\"?code statements in sequence should usually be Volatile!\", N);\n-         Error_Msg_F\n-           (\"\\?(suggest using template with multiple instructions)!\", N);\n-      end if;\n    end Check_Code_Statement;\n \n    ---------------------------------"}]}