{"sha": "810429b72c7c30f77a6b72c3553d06ed62b24026", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODEwNDI5YjcyYzdjMzBmNzdhNmI3MmMzNTUzZDA2ZWQ2MmIyNDAyNg==", "commit": {"author": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-11-02T00:58:36Z"}, "committer": {"name": "Jason Merrill", "email": "merrill@gnu.org", "date": "1996-11-02T00:58:36Z"}, "message": "x\n\nFrom-SVN: r13091", "tree": {"sha": "7f05dd70f20d7f135190b03d785d97ed5f839219", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f05dd70f20d7f135190b03d785d97ed5f839219"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/810429b72c7c30f77a6b72c3553d06ed62b24026", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810429b72c7c30f77a6b72c3553d06ed62b24026", "html_url": "https://github.com/Rust-GCC/gccrs/commit/810429b72c7c30f77a6b72c3553d06ed62b24026", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/810429b72c7c30f77a6b72c3553d06ed62b24026/comments", "author": null, "committer": null, "parents": [{"sha": "0e1c7fc777c69ec6b11e213ef5ba7143523f6c26", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0e1c7fc777c69ec6b11e213ef5ba7143523f6c26", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0e1c7fc777c69ec6b11e213ef5ba7143523f6c26"}], "stats": {"total": 41, "additions": 25, "deletions": 16}, "files": [{"sha": "b122e0bfed5184f200dc9ba5ccd5ba9569593ad7", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/810429b72c7c30f77a6b72c3553d06ed62b24026/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/810429b72c7c30f77a6b72c3553d06ed62b24026/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=810429b72c7c30f77a6b72c3553d06ed62b24026", "patch": "@@ -5096,13 +5096,15 @@ based_loc_descr (reg, offset)\n      long int offset;\n {\n   register dw_loc_descr_ref loc_result;\n-  register unsigned fp_reg = (frame_pointer_needed)\n-\t\t\t\t      ? FRAME_POINTER_REGNUM\n-\t\t\t              : STACK_POINTER_REGNUM;\n+  /* For the \"frame base\", we use the frame pointer or stack pointer\n+     registers, since the RTL for local variables is relative to one of\n+     them.  */\n+  register unsigned fp_reg = DBX_REGISTER_NUMBER (frame_pointer_needed\n+\t\t\t\t\t\t  ? FRAME_POINTER_REGNUM\n+\t\t\t\t\t\t  : STACK_POINTER_REGNUM);\n   if (reg == fp_reg)\n     {\n-      loc_result = new_loc_descr (DW_OP_fbreg,\n-\t\t\t\t  offset - current_funcdef_frame_size, 0);\n+      loc_result = new_loc_descr (DW_OP_fbreg, offset, 0);\n     }\n   else if (reg >= 0 && reg <= 31)\n     {\n@@ -6662,11 +6664,14 @@ gen_subprogram_die (decl, context_die)\n       add_AT_fde_ref (subr_die, DW_AT_MIPS_fde, current_funcdef_fde);\n #endif\n \n-      /* Define the frame pointer location for this routine.  */\n-      fp_reg = (frame_pointer_needed) ? FRAME_POINTER_REGNUM\n-\t\t\t\t      : STACK_POINTER_REGNUM;\n+      /* Define the \"frame base\" location for this routine.  We use the\n+         frame pointer or stack pointer registers, since the RTL for local\n+         variables is relative to one of them.  */\n+      fp_reg = DBX_REGISTER_NUMBER (frame_pointer_needed\n+\t\t\t\t    ? FRAME_POINTER_REGNUM\n+\t\t\t\t    : STACK_POINTER_REGNUM);\n       assert (fp_reg >= 0 && fp_reg <= 31);\n-      fp_loc = new_loc_descr (DW_OP_breg0 + fp_reg, current_funcdef_frame_size);\n+      fp_loc = new_loc_descr (DW_OP_reg0 + fp_reg);\n       add_AT_loc (subr_die, DW_AT_frame_base, fp_loc);\n \n #ifdef DWARF_GNU_EXTENSIONS\n@@ -7890,7 +7895,8 @@ dwarfout_begin_function ()\n   /* On entry, the Call Frame Address is in the stack pointer register.  */\n   cfi = new_cfi ();\n   cfi->dw_cfi_opc = DW_CFA_def_cfa;\n-  cfi->dw_cfi_oprnd1.dw_cfi_reg_num = STACK_POINTER_REGNUM;\n+  cfi->dw_cfi_oprnd1.dw_cfi_reg_num\n+    = DBX_REGISTER_NUMBER (STACK_POINTER_REGNUM);\n   cfi->dw_cfi_oprnd2.dw_cfi_offset = 0;\n   add_cfi (&fde->dw_fde_cfi, cfi);\n \n@@ -7904,9 +7910,9 @@ dwarfout_begin_function ()\n      or an offset from the stack pointer.  */\n   cfi = new_cfi ();\n   cfi->dw_cfi_opc = DW_CFA_def_cfa;\n-  cfi->dw_cfi_oprnd1.dw_cfi_reg_num = (frame_pointer_needed)\n-\t\t\t\t       ? FRAME_POINTER_REGNUM\n-\t\t\t\t       : STACK_POINTER_REGNUM;\n+  cfi->dw_cfi_oprnd1.dw_cfi_reg_num\n+    = DBX_REGISTER_NUMBER (frame_pointer_needed ? FRAME_POINTER_REGNUM\n+\t\t\t   : STACK_POINTER_REGNUM);\n   offset = current_frame_info.total_size;\n   cfi->dw_cfi_oprnd2.dw_cfi_offset = offset;\n   add_cfi (&fde->dw_fde_cfi, cfi);\n@@ -7921,8 +7927,10 @@ dwarfout_begin_function ()\n       /* Restore the stack register from the frame pointer.  */\n       cfi = new_cfi ();\n       cfi->dw_cfi_opc = DW_CFA_register;\n-      cfi->dw_cfi_oprnd1.dw_cfi_reg_num = STACK_POINTER_REGNUM;\n-      cfi->dw_cfi_oprnd2.dw_cfi_reg_num = FRAME_POINTER_REGNUM;\n+      cfi->dw_cfi_oprnd1.dw_cfi_reg_num\n+\t= DBX_REGISTER_NUMBER (STACK_POINTER_REGNUM);\n+      cfi->dw_cfi_oprnd2.dw_cfi_reg_num\n+\t= DBX_REGISTER_NUMBER (FRAME_POINTER_REGNUM);\n       add_cfi (&fde->dw_fde_cfi, cfi);\n     }\n \n@@ -7947,7 +7955,8 @@ dwarfout_begin_function ()\n       assert (offset >= 0);\n       cfi = new_cfi ();\n       cfi->dw_cfi_opc = DW_CFA_offset;\n-      cfi->dw_cfi_oprnd1.dw_cfi_reg_num = FRAME_POINTER_REGNUM;\n+      cfi->dw_cfi_oprnd1.dw_cfi_reg_num\n+\t= DBX_REGISTER_NUMBER (FRAME_POINTER_REGNUM);\n       cfi->dw_cfi_oprnd2.dw_cfi_offset = offset;\n       add_cfi (&fde->dw_fde_cfi, cfi);\n     }"}]}