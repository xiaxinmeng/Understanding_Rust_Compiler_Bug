{"sha": "cbf52bfab354f91e60cebcf3665a2efc88690fbe", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2JmNTJiZmFiMzU0ZjkxZTYwY2ViY2YzNjY1YTJlZmM4ODY5MGZiZQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2004-10-21T22:01:41Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2004-10-21T22:01:41Z"}, "message": "basic_string.h (_M_set_length_and_sharable): New.\n\n2004-10-21  Paolo Carlini  <pcarlini@suse.de>\n\t    Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/bits/basic_string.h (_M_set_length_and_sharable): New.\n\t* include/bits/basic_string.tcc (_S_construct, assign(const _CharT*,\n\tsize_type), _M_mutate, _M_clone): Use it.\n\t(_Rep::_S_create): Don't set/call _M_length/_M_set_sharable here.\n\nCo-Authored-By: Benjamin Kosnik <bkoz@redhat.com>\n\nFrom-SVN: r89415", "tree": {"sha": "3c711b8183645789744086e31065f591f7b3afef", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c711b8183645789744086e31065f591f7b3afef"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cbf52bfab354f91e60cebcf3665a2efc88690fbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf52bfab354f91e60cebcf3665a2efc88690fbe", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbf52bfab354f91e60cebcf3665a2efc88690fbe", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf52bfab354f91e60cebcf3665a2efc88690fbe/comments", "author": null, "committer": null, "parents": [{"sha": "d46cf62c7901fcbeaf1f79d09e04213da86cb163", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d46cf62c7901fcbeaf1f79d09e04213da86cb163", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d46cf62c7901fcbeaf1f79d09e04213da86cb163"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "a9a8d2113649004b698659b1dadec9f9598c995e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf52bfab354f91e60cebcf3665a2efc88690fbe/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf52bfab354f91e60cebcf3665a2efc88690fbe/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cbf52bfab354f91e60cebcf3665a2efc88690fbe", "patch": "@@ -1,3 +1,11 @@\n+2004-10-21  Paolo Carlini  <pcarlini@suse.de>\n+\t    Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/bits/basic_string.h (_M_set_length_and_sharable): New.\n+\t* include/bits/basic_string.tcc (_S_construct, assign(const _CharT*,\n+\tsize_type), _M_mutate, _M_clone): Use it.\n+\t(_Rep::_S_create): Don't set/call _M_length/_M_set_sharable here.\n+\n 2004-10-21  Paolo Carlini  <pcarlini@suse.de>\n \t    Dhruv Matani  <dhruvbird@gmx.net>\n \t    Nathan Myers  <ncm@cantrip.org>"}, {"sha": "5471299045ea3b79ca5b6aca6eab5cd1c48049c0", "filename": "libstdc++-v3/include/bits/basic_string.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf52bfab354f91e60cebcf3665a2efc88690fbe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf52bfab354f91e60cebcf3665a2efc88690fbe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.h?ref=cbf52bfab354f91e60cebcf3665a2efc88690fbe", "patch": "@@ -193,6 +193,15 @@ namespace std\n \t_M_set_sharable()\n         { this->_M_refcount = 0; }\n \n+\tvoid\n+\t_M_set_length_and_sharable(size_type __n)\n+\t{ \n+\t  this->_M_set_sharable();  // One reference.\n+\t  this->_M_length = __n;\n+\t  this->_M_refdata()[__n] = _S_terminal; // grrr. (per 21.3.4)\n+\t  // You cannot leave those LWG people alone for a second.\n+\t}\n+\n \t_CharT*\n \t_M_refdata() throw()\n \t{ return reinterpret_cast<_CharT*>(this + 1); }"}, {"sha": "583e447780d6804669e989ec569cc4a76831ba30", "filename": "libstdc++-v3/include/bits/basic_string.tcc", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cbf52bfab354f91e60cebcf3665a2efc88690fbe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cbf52bfab354f91e60cebcf3665a2efc88690fbe/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fbasic_string.tcc?ref=cbf52bfab354f91e60cebcf3665a2efc88690fbe", "patch": "@@ -124,8 +124,7 @@ namespace std\n \t    __r->_M_destroy(__a);\n \t    __throw_exception_again;\n \t  }\n-\t__r->_M_length = __len;\n-\t__r->_M_refdata()[__len] = _Rep::_S_terminal;       // grrr.\n+\t__r->_M_set_length_and_sharable(__len);\n \treturn __r->_M_refdata();\n       }\n \n@@ -155,8 +154,7 @@ namespace std\n \t    __r->_M_destroy(__a);\n \t    __throw_exception_again;\n \t  }\n-\t__r->_M_length = __dnew;\n-\t__r->_M_refdata()[__dnew] = _Rep::_S_terminal;  // grrr.\n+\t__r->_M_set_length_and_sharable(__dnew);\n \treturn __r->_M_refdata();\n       }\n \n@@ -174,8 +172,7 @@ namespace std\n       if (__n)\n \ttraits_type::assign(__r->_M_refdata(), __n, __c);\n \n-      __r->_M_length = __n;\n-      __r->_M_refdata()[__n] = _Rep::_S_terminal;  // grrr\n+      __r->_M_set_length_and_sharable(__n);\n       return __r->_M_refdata();\n     }\n \n@@ -278,9 +275,7 @@ namespace std\n \t     traits_type::copy(_M_data(), __s, __n);\n \t   else if (__pos)\n \t     traits_type::move(_M_data(), __s, __n);\n-\t   _M_rep()->_M_set_sharable();\n-\t   _M_rep()->_M_length = __n;\n-\t   _M_data()[__n] = _Rep::_S_terminal;  // grr.\n+\t   _M_rep()->_M_set_length_and_sharable(__n);\n \t   return *this;\n \t }\n      }\n@@ -415,10 +410,7 @@ namespace std\n \t  traits_type::move(_M_data() + __pos + __len2,\n \t\t\t    _M_data() + __pos + __len1, __how_much);\n \t}\n-      _M_rep()->_M_set_sharable();\n-      _M_rep()->_M_length = __new_size;\n-      _M_data()[__new_size] = _Rep::_S_terminal; // grrr. (per 21.3.4)\n-      // You cannot leave those LWG people alone for a second.\n+      _M_rep()->_M_set_length_and_sharable(__new_size);\n     }\n \n   template<typename _CharT, typename _Traits, typename _Alloc>\n@@ -473,7 +465,6 @@ namespace std\n     _S_create(size_type __capacity, size_type __old_capacity,\n \t      const _Alloc& __alloc)\n     {\n-      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;\n       // _GLIBCXX_RESOLVE_LIB_DEFECTS\n       // 83.  String::npos vs. string::max_size()\n       if (__capacity > _S_max_size)\n@@ -535,8 +526,6 @@ namespace std\n       void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);\n       _Rep *__p = new (__place) _Rep;\n       __p->_M_capacity = __capacity;\n-      __p->_M_set_sharable();  // One reference.\n-      __p->_M_length = 0;\n       return __p;\n     }\n \n@@ -550,11 +539,9 @@ namespace std\n       _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,\n \t\t\t\t  __alloc);\n       if (this->_M_length)\n-\ttraits_type::copy(__r->_M_refdata(), _M_refdata(),\n-\t\t\t  this->_M_length);\n+\ttraits_type::copy(__r->_M_refdata(), _M_refdata(), this->_M_length);\n \n-      __r->_M_length = this->_M_length;\n-      __r->_M_refdata()[this->_M_length] = _Rep::_S_terminal;\n+      __r->_M_set_length_and_sharable(this->_M_length);\n       return __r->_M_refdata();\n     }\n "}]}