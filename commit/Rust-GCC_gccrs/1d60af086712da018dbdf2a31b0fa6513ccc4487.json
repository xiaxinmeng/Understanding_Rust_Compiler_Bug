{"sha": "1d60af086712da018dbdf2a31b0fa6513ccc4487", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWQ2MGFmMDg2NzEyZGEwMThkYmRmMmEzMWIwZmE2NTEzY2NjNDQ4Nw==", "commit": {"author": {"name": "Kenneth Zadeck", "email": "zadeck@naturalbridge.com", "date": "2014-05-06T16:35:35Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2014-05-06T16:35:35Z"}, "message": "Update ChangeLogs for wide-int work.\n\nCo-Authored-By: Kyrylo Tkachov <kyrylo.tkachov@arm.com>\nCo-Authored-By: Mike Stump <mikestump@comcast.net>\nCo-Authored-By: Richard Sandiford <rdsandiford@googlemail.com>\n\nFrom-SVN: r210116", "tree": {"sha": "c122483e07919d83e97d9cc24e59922013688628", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c122483e07919d83e97d9cc24e59922013688628"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1d60af086712da018dbdf2a31b0fa6513ccc4487", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d60af086712da018dbdf2a31b0fa6513ccc4487", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1d60af086712da018dbdf2a31b0fa6513ccc4487", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1d60af086712da018dbdf2a31b0fa6513ccc4487/comments", "author": {"login": "zadeck", "id": 42682403, "node_id": "MDQ6VXNlcjQyNjgyNDAz", "avatar_url": "https://avatars.githubusercontent.com/u/42682403?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zadeck", "html_url": "https://github.com/zadeck", "followers_url": "https://api.github.com/users/zadeck/followers", "following_url": "https://api.github.com/users/zadeck/following{/other_user}", "gists_url": "https://api.github.com/users/zadeck/gists{/gist_id}", "starred_url": "https://api.github.com/users/zadeck/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zadeck/subscriptions", "organizations_url": "https://api.github.com/users/zadeck/orgs", "repos_url": "https://api.github.com/users/zadeck/repos", "events_url": "https://api.github.com/users/zadeck/events{/privacy}", "received_events_url": "https://api.github.com/users/zadeck/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "807e902eea17f3132488c256c963823976b2348c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/807e902eea17f3132488c256c963823976b2348c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/807e902eea17f3132488c256c963823976b2348c"}], "stats": {"total": 1819, "additions": 920, "deletions": 899}, "files": [{"sha": "0644a4d3d71d034567c7eb26129c856d5a751462", "filename": "gcc/ChangeLog", "status": "modified", "additions": 780, "deletions": 0, "changes": 780, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1d60af086712da018dbdf2a31b0fa6513ccc4487", "patch": "@@ -1,3 +1,783 @@\n+2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* alias.c (ao_ref_from_mem): Use wide-int interfaces.\n+\t(rtx_equal_for_memref_p): Update comment.\n+\t(adjust_offset_for_component_ref): Use wide-int interfaces.\n+\t* builtins.c (get_object_alignment_2): Likewise.\n+\t(c_readstr): Likewise.\n+\t(target_char_cast): Add comment.\n+\t(determine_block_size): Use wide-int interfaces.\n+\t(expand_builtin_signbit): Likewise.\n+\t(fold_builtin_int_roundingfn): Likewise.\n+\t(fold_builtin_bitop): Likewise.\n+\t(fold_builtin_bswap): Likewise.\n+\t(fold_builtin_logarithm): Use signop.\n+\t(fold_builtin_pow): Likewise.\n+\t(fold_builtin_memory_op): Use wide-int interfaces.\n+\t(fold_builtin_object_size): Likewise.\n+\t* cfgloop.c (alloc_loop): Initialize nb_iterations_upper_bound and\n+\tnb_iterations_estimate.\n+\t(record_niter_bound): Use wide-int interfaces.\n+\t(get_estimated_loop_iterations_int): Likewise.\n+\t(get_estimated_loop_iterations): Likewise.\n+\t(get_max_loop_iterations): Likewise.\n+\t* cfgloop.h: Include wide-int.h.\n+\t(struct nb_iter_bound): Change bound to widest_int.\n+\t(struct loop): Change nb_iterations_upper_bound and\n+\tnb_iterations_estimate to widest_int.\n+\t(record_niter_bound): Switch to use widest_int.\n+\t(get_estimated_loop_iterations): Likewise.\n+\t(get_max_loop_iterations): Likewise.\n+\t(gcov_type_to_double_int): Rename to gcov_type_to_wide_int and\n+\tupdate for wide-int.\n+\t* cgraph.c (cgraph_add_thunk): Use wide-int interfaces.\n+\t* combine.c (try_combine): Likewise.\n+\t(subst): Use CONST_SCALAR_INT_P rather than CONST_INT_P.\n+\t* config/aarch64/aarch64.c (aapcs_vfp_sub_candidate): Use wide-int\n+\tinterfaces.\n+\t(aarch64_float_const_representable_p): Likewise.\n+\t* config/arc/arc.c: Include wide-int.h.\n+\t(arc_can_use_doloop_p): Use wide-int interfaces.\n+\t* config/arm/arm.c (aapcs_vfp_sub_candidate): Likewise.\n+\t(vfp3_const_double_index): Likewise.\n+\t* config/avr/avr.c (avr_out_round): Likewise.\n+\t(avr_fold_builtin): Likewise.\n+\t* config/bfin/bfin.c (bfin_local_alignment): Likewise.\n+\t(bfin_can_use_doloop_p): Likewise.\n+\t* config/darwin.c (darwin_mergeable_constant_section): Likewise.\n+\t(machopic_select_rtx_section): Update to handle CONST_WIDE_INT.\n+\t* config/i386/i386.c: Include wide-int.h.\n+\t(ix86_data_alignment): Use wide-int interfaces.\n+\t(ix86_local_alignment): Likewise.\n+\t(ix86_emit_swsqrtsf): Update real_from_integer.\n+\t* config/msp430/msp430.c (msp430_attr): Use wide-int interfaces.\n+\t* config/nds32/nds32.c (nds32_insert_attributes): Likewise.\n+\t* config/rs6000/predicates.md (any_operand): Add const_wide_int.\n+\t(zero_constant): Likewise.\n+\t(input_operand): Likewise.\n+\t(splat_input_operand): Likewise.\n+\t(non_logical_cint_operand): Change const_double to const_wide_int.\n+\t* config/rs6000/rs6000.c (num_insns_constant): Handle CONST_WIDE_INT.\n+\t(easy_altivec_constant): Remove comment.\n+\t(paired_expand_vector_init): Use CONSTANT_P.\n+\t(rs6000_legitimize_address): Handle CONST_WIDE_INT.\n+\t(rs6000_emit_move): Update checks.\n+\t(rs6000_aggregate_candidate): Use wide-int interfaces.\n+\t(rs6000_expand_ternop_builtin): Likewise.\n+\t(rs6000_output_move_128bit): Handle CONST_WIDE_INT.\n+\t(rs6000_assemble_integer): Likewise.\n+\t(rs6000_hash_constant): Likewise.\n+\t(output_toc): Likewise.\n+\t(rs6000_rtx_costs): Likewise.\n+\t(rs6000_emit_swrsqrt); Update call to real_from_integer.\n+\t* config/rs6000/rs6000-c.c: Include wide-int.h.\n+\t(altivec_resolve_overloaded_builtin): Use wide-int interfaces.\n+\t* config/rs6000/rs6000.h (TARGET_SUPPORTS_WIDE_INT): New.\n+\t* config/rs6000/rs6000.md: Use const_scalar_int_operand.\n+\tHandle CONST_WIDE_INT.\n+\t* config/sol2-c.c (solaris_pragma_align): Change low to unsigned HWI.\n+\tUse tree_fits_uhwi_p.\n+\t* config/sparc/sparc.c: Include wide-int.h.\n+\t(sparc_fold_builtin): Use wide-int interfaces.\n+\t* config/vax/vax.c: Include wide-int.h.\n+\t(vax_float_literal): Use real_from_integer.\n+\t* coretypes.h (struct hwivec_def): New.\n+\t(hwivec): New.\n+\t(const_hwivec): New.\n+\t* cse.c (hash_rtx_cb): Handle CONST_WIDE_INT.\n+\t(equiv_constant): Handle CONST_WIDE_INT.\n+\t* cselib.c (rtx_equal_for_cselib_1): Use CASE_CONST_UNIQUE.\n+\t(cselib_hash_rtx): Handle CONST_WIDE_INT.\n+\t* dbxout.c (stabstr_U): Use wide-int interfaces.\n+\t(dbxout_type): Update to use cst_fits_shwi_p.\n+\t* defaults.h (LOG2_BITS_PER_UNIT): Define.\n+\t(TARGET_SUPPORTS_WIDE_INT): Add default.\n+\t* dfp.c: Include wide-int.h.\n+\t(decimal_real_to_integer2): Use wide-int interfaces and rename to\n+\tdecimal_real_to_integer.\n+\t* dfp.h (decimal_real_to_integer2): Return a wide_int and rename to\n+\tdecimal_real_to_integer.\n+\t* doc/generic.texi (Constant expressions): Update for wide_int.\n+\t* doc/rtl.texi (const_double): Likewise.\n+\t(const_wide_int, CONST_WIDE_INT, CONST_WIDE_INT_VEC): New.\n+\t(CONST_WIDE_INT_NUNITS, CONST_WIDE_INT_ELT): New.\n+\t* doc/tm.texi.in (REAL_VALUE_TO_INT): Remove.\n+\t(REAL_VALUE_FROM_INT): Remove.\n+\t(TARGET_SUPPORTS_WIDE_INT): New.\n+\t* doc/tm.texi: Regenerate.\n+\t* dojump.c (prefer_and_bit_test): Use wide-int interfaces.\n+\t* double-int.h: Include wide-int.h.\n+\t(struct wi::int_traits): New.\n+\t* dwarf2out.c (get_full_len): New.\n+\t(dw_val_equal_p): Add case dw_val_class_wide_int.\n+\t(size_of_loc_descr): Likewise.\n+\t(output_loc_operands): Likewise.\n+\t(insert_double): Remove.\n+\t(insert_wide_int): New.\n+\t(add_AT_wide): New.\n+\t(print_die): Add case dw_val_class_wide_int.\n+\t(attr_checksum): Likewise.\n+\t(attr_checksum_ordered): Likewise.\n+\t(same_dw_val_p): Likewise.\n+\t(size_of_die): Likewise.\n+\t(value_format): Likewise.\n+\t(output_die): Likewise.\n+\t(double_int_type_size_in_bits): Rename to offset_int_type_size_in_bits.\n+\tUse wide-int.\n+\t(clz_loc_descriptor): Use wide-int interfaces.\n+\t(mem_loc_descriptor): Likewise.  Handle CONST_WIDE_INT.\n+\t(loc_descriptor): Use wide-int interfaces.  Handle CONST_WIDE_INT.\n+\t(round_up_to_align): Use wide-int interfaces.\n+\t(field_byte_offset): Likewise.\n+\t(insert_double): Rename to insert_wide_int.  Use wide-int interfaces.\n+\t(add_const_value_attribute): Handle CONST_WIDE_INT.  Update\n+\tCONST_DOUBLE handling.  Use wide-int interfaces.\n+\t(add_bound_info): Use tree_fits_uhwi_p.  Use wide-int interfaces.\n+\t(gen_enumeration_type_die): Use add_AT_wide.\n+\t(hash_loc_operands): Add case dw_val_class_wide_int.\n+\t(compare_loc_operands): Likewise.\n+\t* dwarf2out.h: Include wide-int.h.\n+\t(wide_int_ptr): New.\n+\t(enum dw_val_class): Add dw_val_class_wide_int.\n+\t(struct dw_val_struct): Add val_wide.\n+\t* emit-rtl.c (const_wide_int_htab): New.\n+\t(const_wide_int_htab_hash): New.\n+\t(const_wide_int_htab_eq): New.\n+\t(lookup_const_wide_int): New.\n+\t(const_double_htab_hash): Use wide-int interfaces.\n+\t(const_double_htab_eq): Likewise.\n+\t(rtx_to_double_int): Conditionally compile for wide-int.\n+\t(immed_double_int_const): Rename to immed_wide_int_const and\n+\tupdate for wide-int.\n+\t(immed_double_const): Conditionally compile for wide-int.\n+\t(init_emit_once): Use wide-int interfaces.\n+\t* explow.c (plus_constant): Likewise.\n+\t* expmed.c (mask_rtx): Move further up file.  Use wide-int interfaces.\n+\t(lshift_value): Use wide-int interfaces.\n+\t(expand_mult): Likewise.\n+\t(choose_multiplier): Likewise.\n+\t(expand_smod_pow2): Likewise.\n+\t(make_tree): Likewise.\n+\t* expr.c (convert_modes): Consolidate handling of constants.\n+\tUse wide-int interfaces.\n+\t(emit_group_load_1): Add note.\n+\t(store_expr): Update comment.\n+\t(get_inner_reference): Use wide-int interfaces.\n+\t(expand_constructor): Update comment.\n+\t(expand_expr_real_2): Use wide-int interfaces.\n+\t(expand_expr_real_1): Likewise.\n+\t(reduce_to_bit_field_precision): Likewise.\n+\t(const_vector_from_tree): Likewise.\n+\t* final.c: Include wide-int-print.h.\n+\t(output_addr_const): Handle CONST_WIDE_INT.  Use CONST_DOUBLE_AS_INT_P.\n+\t* fixed-value.c: Include wide-int.h.\n+\t(fixed_from_string): Use wide-int interfaces.\n+\t(fixed_to_decimal): Likewise.\n+\t(fixed_convert_from_real): Likewise.\n+\t(real_convert_from_fixed): Likewise.\n+\t* fold-const.h (mem_ref_offset): Return an offset_int.\n+\t(div_if_zero_remainder): Remove code parameter.\n+\t* fold-const.c (div_if_zero_remainder): Remove code parameter.\n+\tUse wide-int interfaces.\n+\t(may_negate_without_overflow_p): Use wide-int interfaces.\n+\t(negate_expr_p): Likewise.\n+\t(fold_negate_expr): Likewise.\n+\t(int_const_binop_1): Likewise.\n+\t(const_binop): Likewise.\n+\t(fold_convert_const_int_from_int): Likewise.\n+\t(fold_convert_const_int_from_real): Likewise.\n+\t(fold_convert_const_int_from_fixed): Likewise.\n+\t(fold_convert_const_fixed_from_int): Likewise.\n+\t(all_ones_mask_p): Take an unsigned size.  Use wide-int interfaces.\n+\t(sign_bit_p): Use wide-int interfaces.\n+\t(make_range_step): Likewise.\n+\t(build_range_check): Likewise.  Pass an integer of the correct type\n+\tinstead of using integer_one_node.\n+\t(range_predecessor): Pass an integer of the correct type instead\n+\tof using integer_one_node.\n+\t(range_successor): Likewise.\n+\t(merge_ranges): Likewise.\n+\t(unextend): Use wide-int interfaces.\n+\t(extract_muldiv_1): Likewise.\n+\t(fold_div_compare): Likewise.\n+\t(fold_single_bit_test): Likewise.\n+\t(fold_sign_changed_comparison): Likewise.\n+\t(try_move_mult_to_index): Update calls to div_if_zero_remainder.\n+\t(fold_plusminus_mult_expr): Use wide-int interfaces.\n+\t(native_encode_int): Likewise.\n+\t(native_interpret_int): Likewise.\n+\t(fold_unary_loc): Likewise.\n+\t(pointer_may_wrap_p): Likewise.\n+\t(size_low_cst): Likewise.\n+\t(mask_with_tz): Likewise.\n+\t(fold_binary_loc): Likewise.\n+\t(fold_ternary_loc): Likewise.\n+\t(multiple_of_p): Likewise.\n+\t(tree_call_nonnegative_warnv_p): Update calls to\n+\ttree_int_cst_min_precision and real_from_integer.\n+\t(fold_negate_const): Use wide-int interfaces.\n+\t(fold_abs_const): Likewise.\n+\t(fold_relational_const): Use tree_int_cst_lt.\n+\t(round_up_loc): Use wide-int interfaces.\n+\t* genemit.c (gen_exp): Add CONST_WIDE_INT case.\n+\t* gengenrtl.c (excluded_rtx): Add CONST_WIDE_INT case.\n+\t* gengtype.c: Remove include of double-int.h.\n+\t(do_typedef): Use wide-int interfaces.\n+\t(open_base_files): Add wide-int.h.\n+\t(main): Add offset_int and widest_int typedefs.\n+\t* gengtype-lex.l: Handle \"^\".\n+\t(CXX_KEYWORD): Add \"static\".\n+\t* gengtype-parse.c (require3): New.\n+\t(require_template_declaration): Handle constant template arguments\n+\tand nested templates.\n+\t* gengtype-state.c: Don't include \"double-int.h\".\n+\t* genpreds.c (write_one_predicate_function): Update comment.\n+\t(write_tm_constrs_h): Add check for hval and lval use in\n+\tCONST_WIDE_INT.\n+\t* genrecog.c (validate_pattern): Add CONST_WIDE_INT case.\n+\t(add_to_sequence): Likewise.\n+\t* gensupport.c (struct std_pred_table): Add const_scalar_int_operand\n+\tand const_double_operand.\n+\t* gimple.c (preprocess_case_label_vec_for_gimple): Use wide-int\n+\tinterfaces.\n+\t* gimple-fold.c (get_base_constructor): Likewise.\n+\t(fold_array_ctor_reference): Likewise.\n+\t(fold_nonarray_ctor_reference): Likewise.\n+\t(fold_const_aggregate_ref_1): Likewise.\n+\t(gimple_val_nonnegative_real_p): Likewise.\n+\t(gimple_fold_indirect_ref): Likewise.\n+\t* gimple-pretty-print.c (dump_ssaname_info): Likewise.\n+\t* gimple-ssa-strength-reduction.c: Include wide-int-print.h.\n+\t(struct slsr_cand_d): Change index to be widest_int.\n+\t(struct incr_info_d): Change incr to be widest_int.\n+\t(alloc_cand_and_find_basis): Use wide-int interfaces.\n+\t(slsr_process_phi): Likewise.\n+\t(backtrace_base_for_ref): Likewise.  Return a widest_int.\n+\t(restructure_reference): Take a widest_int instead of a double_int.\n+\t(slsr_process_ref): Use wide-int interfaces.\n+\t(create_mul_ssa_cand): Likewise.\n+\t(create_mul_imm_cand): Likewise.\n+\t(create_add_ssa_cand): Likewise.\n+\t(create_add_imm_cand): Take a widest_int instead of a double_int.\n+\t(slsr_process_add): Use wide-int interfaces.\n+\t(slsr_process_cast): Likewise.\n+\t(slsr_process_copy): Likewise.\n+\t(dump_candidate): Likewise.\n+\t(dump_incr_vec): Likewise.\n+\t(replace_ref): Likewise.\n+\t(cand_increment): Likewise.  Return a widest_int.\n+\t(cand_abs_increment): Likewise.\n+\t(replace_mult_candidate): Take a widest_int instead of a double_int.\n+\t(replace_unconditional_candidate): Use wide-int interfaces.\n+\t(incr_vec_index): Take a widest_int instead of a double_int.\n+\t(create_add_on_incoming_edge): Likewise.\n+\t(create_phi_basis): Use wide-int interfaces.\n+\t(replace_conditional_candidate): Likewise.\n+\t(record_increment): Take a widest_int instead of a double_int.\n+\t(record_phi_increments): Use wide-int interfaces.\n+\t(phi_incr_cost): Take a widest_int instead of a double_int.\n+\t(lowest_cost_path): Likewise.\n+\t(total_savings): Likewise.\n+\t(analyze_increments): Use wide-int interfaces.\n+\t(ncd_with_phi): Take a widest_int instead of a double_int.\n+\t(ncd_of_cand_and_phis): Likewise.\n+\t(nearest_common_dominator_for_cands): Likewise.\n+\t(insert_initializers): Use wide-int interfaces.\n+\t(all_phi_incrs_profitable): Likewise.\n+\t(replace_one_candidate): Likewise.\n+\t(replace_profitable_candidates): Likewise.\n+\t* godump.c: Include wide-int-print.h.\n+\t(go_output_typedef): Use wide-int interfaces.\n+\t* graphite-clast-to-gimple.c (gmp_cst_to_tree): Likewise.\n+\t* graphite-sese-to-poly.c (tree_int_to_gmp): Likewise.\n+\t(build_loop_iteration_domains): Likewise.\n+\t* hooks.h: Include wide-int.h rather than double-int.h.\n+\t(hook_bool_dint_dint_uint_bool_true): Delete.\n+\t(hook_bool_wint_wint_uint_bool_true): Declare.\n+\t* hooks.c (hook_bool_dint_dint_uint_bool_true): Removed.\n+\t(hook_bool_wint_wint_uint_bool_true): New.\n+\t* internal-fn.c (ubsan_expand_si_overflow_addsub_check): Use wide-int\n+\tinterfaces.\n+\t(ubsan_expand_si_overflow_mul_check): Likewise.\n+\t* ipa-devirt.c (get_polymorphic_call_info): Likewise.\n+\t* ipa-prop.c (compute_complex_assign_jump_func): Likewise.\n+\t(get_ancestor_addr_info): Likewise.\n+\t(ipa_modify_call_arguments): Likewise.\n+\t* loop-doloop.c (doloop_modify): Likewise.\n+\t(doloop_optimize): Likewise.\n+\t* loop-iv.c (iv_number_of_iterations): Likewise.\n+\t* loop-unroll.c (decide_unroll_constant_iterations): Likewise.\n+\t(unroll_loop_constant_iterations): Likewise.\n+\t(decide_unroll_runtime_iterations): Likewise.\n+\t(unroll_loop_runtime_iterations): Likewise.\n+\t(decide_peel_simple): Likewise.\n+\t(decide_unroll_stupid): Likewise.\n+\t* lto-streamer-in.c (streamer_read_wi): Add.\n+\t(input_cfg): Use wide-int interfaces.\n+\t(lto_input_tree_1): Likewise.\n+\t* lto-streamer-out.c (streamer_write_wi): Add.\n+\t(hash_tree): Use wide-int interfaces.\n+\t(output_cfg): Likewise.\n+\t* Makefile.in (OBJS): Add wide-int.o and wide-int-print.o.\n+\t(GTFILES): Add wide-int.h and signop.h.\n+\t(TAGS): Look for .cc files too.\n+\t* omp-low.c (scan_omp_1_op): Use wide-int interfaces.\n+\t* optabs.c (expand_subword_shift): Likewise.\n+\t(expand_doubleword_shift): Likewise.\n+\t(expand_absneg_bit): Likewise.\n+\t(expand_copysign_absneg): Likewise.\n+\t(expand_copysign_bit): Likewise.\n+\t* postreload.c (reload_cse_simplify_set): Likewise.\n+\t* predict.c (predict_iv_comparison): Likewise.\n+\t* pretty-print.h: Include wide-int-print.h.\n+\t(pp_wide_int) New.\n+\t* print-rtl.c (print_rtx): Add CONST_WIDE_INT case.\n+\t* print-tree.c: Include wide-int-print.h.\n+\t(print_node_brief): Use wide-int interfaces.\n+\t(print_node): Likewise.\n+\t* read-rtl.c (validate_const_wide_int): New.\n+\t(read_rtx_code): Add CONST_WIDE_INT case.\n+\t* real.c: Include wide-int.h.\n+\t(real_to_integer2): Delete.\n+\t(real_to_integer): New function, returning a wide_int.\n+\t(real_from_integer): Take a wide_int rather than two HOST_WIDE_INTs.\n+\t(ten_to_ptwo): Update call to real_from_integer.\n+\t(real_digit): Likewise.\n+\t* real.h: Include signop.h, wide-int.h and insn-modes.h.\n+\t(real_to_integer2, REAL_VALUE_FROM_INT, REAL_VALUE_FROM_UNSIGNED_INT)\n+\t(REAL_VALUE_TO_INT): Delete.\n+\t(real_to_integer): Declare a wide-int form.\n+\t(real_from_integer): Take a wide_int rather than two HOST_WIDE_INTs.\n+\t* recog.c (const_int_operand): Improve comment.\n+\t(const_scalar_int_operand): New.\n+\t(const_double_operand): Add a separate definition for CONST_WIDE_INT.\n+\t* rtlanal.c (commutative_operand_precedence): Handle CONST_WIDE_INT.\n+\t(split_double): Likewise.\n+\t* rtl.c (DEF_RTL_EXPR): Handle CONST_WIDE_INT.\n+\t(rtx_size): Likewise.\n+\t(rtx_alloc_stat_v): New.\n+\t(rtx_alloc_stat): Now calls rtx_alloc_stat_v.\n+\t(cwi_output_hex): New.\n+\t(iterative_hash_rtx): Handle CONST_WIDE_INT.\n+\t(cwi_check_failed_bounds): New.\n+\t* rtl.def (CONST_WIDE_INT): New.\n+\t* rtl.h: Include <utility> and wide-int.h.\n+\t(struct hwivec_def): New.\n+\t(CWI_GET_NUM_ELEM): New.\n+\t(CWI_PUT_NUM_ELEM): New.\n+\t(struct rtx_def): Add num_elem and hwiv.\n+\t(CASE_CONST_SCALAR_INT): Modify for TARGET_SUPPORTS_WIDE_INT.\n+\t(CASE_CONST_UNIQUE): Likewise.\n+\t(CASE_CONST_ANY): Likewise.\n+\t(CONST_SCALAR_INT_P): Likewise.\n+\t(CONST_WIDE_INT_P): New.\n+\t(CWI_ELT): New.\n+\t(HWIVEC_CHECK): New.\n+\t(cwi_check_failed_bounds): New.\n+\t(CWI_ELT): New.\n+\t(HWIVEC_CHECK): New.\n+\t(CONST_WIDE_INT_VEC) New.\n+\t(CONST_WIDE_INT_NUNITS) New.\n+\t(CONST_WIDE_INT_ELT) New.\n+\t(rtx_mode_t): New type.\n+\t(wi::int_traits <rtx_mode_t>): New.\n+\t(wi::shwi): New.\n+\t(wi::min_value): New.\n+\t(wi::max_value): New.\n+\t(rtx_alloc_v) New.\n+\t(const_wide_int_alloc): New.\n+\t(immed_wide_int_const): New.\n+\t* sched-vis.c (print_value): Handle CONST_WIDE_INT.\n+\t* sel-sched-ir.c (lhs_and_rhs_separable_p): Update comment.\n+\t* signop.h: New file.\n+\t* simplify-rtx.c (mode_signbit_p): Handle CONST_WIDE_INT.\n+\t(simplify_const_unary_operation): Use wide-int interfaces.\n+\t(simplify_binary_operation_1): Likewise.\n+\t(simplify_const_binary_operation): Likewise.\n+\t(simplify_const_relational_operation): Likewise.\n+\t(simplify_immed_subreg): Likewise.\n+\t* stmt.c (expand_case): Likewise.\n+\t* stor-layout.h (set_min_and_max_values_for_integral_type): Take a\n+\tsignop rather than a bool.\n+\t* stor-layout.c (layout_type): Use wide-int interfaces.\n+\t(initialize_sizetypes): Update calls to\n+\tset_min_and_max_values_for_integral_type.\n+\t(set_min_and_max_values_for_integral_type): Take a signop rather\n+\tthan a bool.  Use wide-int interfaces.\n+\t(fixup_signed_type): Update accordingly.  Remove\n+\tHOST_BITS_PER_DOUBLE_INT limit.\n+\t(fixup_unsigned_type): Likewise.\n+\t* system.h (STATIC_CONSTANT_P): New.\n+\t(STATIC_ASSERT): New.\n+\t* target.def (can_use_doloop_p): Take widest_ints rather than\n+\tdouble_ints.\n+\t* target.h: Include wide-int.h rather than double-int.h.\n+\t* targhooks.h (can_use_doloop_if_innermost): Take widest_ints rather\n+\tthan double_ints.\n+\t* targhooks.c (default_cxx_get_cookie_size): Use tree_int_cst_lt\n+\trather than INT_CST_LT_UNSIGNED.\n+\t(can_use_doloop_if_innermost): Take widest_ints rather than\n+\tdouble_ints.\n+\t* tree-affine.c: Include wide-int-print.h.\n+\t(double_int_ext_for_comb): Delete.\n+\t(wide_int_ext_for_comb): New.\n+\t(aff_combination_zero): Use wide-int interfaces.\n+\t(aff_combination_const): Take a widest_int instead of a double_int.\n+\t(aff_combination_elt): Use wide-int interfaces.\n+\t(aff_combination_scale): Take a widest_int instead of a double_int.\n+\t(aff_combination_add_elt): Likewise.\n+\t(aff_combination_add_cst): Likewise.\n+\t(aff_combination_add): Use wide-int interfaces.\n+\t(aff_combination_convert): Likewise.\n+\t(tree_to_aff_combination): Likewise.\n+\t(add_elt_to_tree): Take a widest_int instead of a double_int.\n+\t(aff_combination_to_tree): Use wide-int interfaces.\n+\t(aff_combination_remove_elt): Likewise.\n+\t(aff_combination_add_product): Take a widest_int instead of\n+\ta double_int.\n+\t(aff_combination_mult): Use wide-int interfaces.\n+\t(aff_combination_expand): Likewise.\n+\t(double_int_constant_multiple_p): Delete.\n+\t(wide_int_constant_multiple_p): New.\n+\t(aff_combination_constant_multiple_p): Take a widest_int pointer\n+\tinstead of a double_int pointer.\n+\t(print_aff): Use wide-int interfaces.\n+\t(get_inner_reference_aff): Take a widest_int pointer\n+\tinstead of a double_int pointer.\n+\t(aff_comb_cannot_overlap_p): Take widest_ints instead of double_ints.\n+\t* tree-affine.h: Include wide-int.h.\n+\t(struct aff_comb_elt): Change type of coef to widest_int.\n+\t(struct affine_tree_combination): Change type of offset to widest_int.\n+\t(double_int_ext_for_comb): Delete.\n+\t(wide_int_ext_for_comb): New.\n+\t(aff_combination_const): Use widest_int instead of double_int.\n+\t(aff_combination_scale): Likewise.\n+\t(aff_combination_add_elt): Likewise.\n+\t(aff_combination_constant_multiple_p): Likewise.\n+\t(get_inner_reference_aff): Likewise.\n+\t(aff_comb_cannot_overlap_p): Likewise.\n+\t(aff_combination_zero_p): Use wide-int interfaces.\n+\t* tree.c: Include tree.h.\n+\t(init_ttree): Use make_int_cst.\n+\t(tree_code_size): Removed code for INTEGER_CST case.\n+\t(tree_size): Add INTEGER_CST case.\n+\t(make_node_stat): Update comment.\n+\t(get_int_cst_ext_nunits, build_new_int_cst, build_int_cstu): New.\n+\t(build_int_cst_type): Use wide-int interfaces.\n+\t(double_int_to_tree): Likewise.\n+\t(double_int_fits_to_tree_p): Delete.\n+\t(force_fit_type_double): Delete.\n+\t(force_fit_type): New.\n+\t(int_cst_hash_hash): Use wide-int interfaces.\n+\t(int_cst_hash_eq): Likewise.\n+\t(build_int_cst_wide): Delete.\n+\t(wide_int_to_tree): New.\n+\t(cache_integer_cst): Use wide-int interfaces.\n+\t(build_low_bits_mask): Likewise.\n+\t(cst_and_fits_in_hwi): Likewise.\n+\t(real_value_from_int_cst): Likewise.\n+\t(make_int_cst_stat): New.\n+\t(integer_zerop): Use wide_int interfaces.\n+\t(integer_onep): Likewise.\n+\t(integer_all_onesp): Likewise.\n+\t(integer_pow2p): Likewise.\n+\t(integer_nonzerop): Likewise.\n+\t(tree_log2): Likewise.\n+\t(tree_floor_log2): Likewise.\n+\t(tree_ctz): Likewise.\n+\t(int_size_in_bytes): Likewise.\n+\t(mem_ref_offset): Return an offset_int rather than a double_int.\n+\t(build_type_attribute_qual_variant): Use wide_int interfaces.\n+\t(type_hash_eq): Likewise\n+\t(tree_int_cst_equal): Likewise.\n+\t(tree_int_cst_lt): Delete.\n+\t(tree_int_cst_compare): Likewise.\n+\t(tree_fits_shwi_p): Use wide_int interfaces.\n+\t(tree_fits_uhwi_p): Likewise.\n+\t(tree_int_cst_sign_bit): Likewise.\n+\t(tree_int_cst_sgn): Likewise.\n+\t(tree_int_cst_min_precision): Take a signop rather than a bool.\n+\t(simple_cst_equal): Use wide_int interfaces.\n+\t(compare_tree_int): Likewise.\n+\t(iterative_hash_expr): Likewise.\n+\t(int_fits_type_p): Likewise.  Use tree_int_cst_lt rather than\n+\tINT_CST_LT.\n+\t(get_type_static_bounds): Use wide_int interfaces.\n+\t(tree_int_cst_elt_check_failed): New.\n+\t(build_common_tree_nodes): Reordered to set prec before filling in\n+\tvalue.\n+\t(int_cst_value): Check cst_and_fits_in_hwi.\n+\t(widest_int_cst_value): Use wide_int interfaces.\n+\t(upper_bound_in_type): Likewise.\n+\t(lower_bound_in_type): Likewise.\n+\t(num_ending_zeros): Likewise.\n+\t(drop_tree_overflow): Likewise.\n+\t* tree-call-cdce.c (check_pow): Update call to real_from_integer.\n+\t(gen_conditions_for_pow_cst_base): Likewise.\n+\t* tree-cfg.c: Include wide-int.h and wide-int-print.h.\n+\t(group_case_labels_stmt): Use wide-int interfaces.\n+\t(verify_gimple_assign_binary): Likewise.\n+\t(print_loop): Likewise.\n+\t* tree-chrec.c (tree_fold_binomial): Likewise.\n+\t* tree-core.h (struct tree_base): Add int_length.\n+\t(struct tree_int_cst): Change rep of value.\n+\t* tree-data-ref.c (dr_analyze_innermost): Use wide-int interfaces.\n+\t(dr_may_alias_p): Likewise.\n+\t(max_stmt_executions_tree): Likewise.\n+\t* tree.def (INTEGER_CST): Update comment.\n+\t* tree-dfa.c (get_ref_base_and_extent): Use wide-int interfaces.\n+\t* tree-dfa.h (get_addr_base_and_unit_offset_1): Likewise.\n+\t* tree-dump.c: Include wide-int.h and wide-int-print.h.\n+\t(dequeue_and_dump): Use wide-int interfaces.\n+\t* tree.h: Include wide-int.h.\n+\t(NULL_TREE): Moved to earlier loc in file.\n+\t(TREE_INT_CST_ELT_CHECK): New.\n+\t(tree_int_cst_elt_check_failed): New.\n+\t(TYPE_SIGN): New.\n+\t(TREE_INT_CST): Delete.\n+\t(TREE_INT_CST_LOW): Use wide-int interfaces.\n+\t(TREE_INT_CST_HIGH): Delete.\n+\t(TREE_INT_CST_NUNITS): New.\n+\t(TREE_INT_CST_EXT_NUNITS): Likewise.\n+\t(TREE_INT_CST_OFFSET_NUNITS): Likewise.\n+\t(TREE_INT_CST_ELT): Likewise.\n+\t(INT_CST_LT): Delete.\n+\t(tree_int_cst_elt_check): New (two forms).\n+\t(type_code_size): Update comment.\n+\t(make_int_cst_stat, make_int_cst): New.\n+\t(tree_to_double_int): Delete.\n+\t(double_int_fits_to_tree_p): Delete.\n+\t(force_fit_type_double): Delete.\n+\t(build_int_cstu): Replace with out-of-line function.\n+\t(build_int_cst_wide): Delete.\n+\t(tree_int_cst_lt): Define inline.\n+\t(tree_int_cst_le): New.\n+\t(tree_int_cst_compare): Define inline.\n+\t(tree_int_cst_min_precision): Take a signop rather than a bool.\n+\t(wi::int_traits <const_tree>): New.\n+\t(wi::int_traits <tree>): New.\n+\t(wi::extended_tree): New.\n+\t(wi::int_traits <wi::extended_tree>): New.\n+\t(wi::to_widest): New.\n+\t(wi::to_offset): New.\n+\t(wi::fits_to_tree_p): New.\n+\t(wi::min_value): New.\n+\t(wi::max_value): New.\n+\t* tree-inline.c (remap_gimple_op_r): Use wide-int interfaces.\n+\t(copy_tree_body_r): Likewise.\n+\t* tree-object-size.c (compute_object_offset): Likewise.\n+\t(addr_object_size): Likewise.\n+\t* tree-predcom.c: Include wide-int-print.h.\n+\t(struct dref_d): Change type of offset to widest_int.\n+\t(dump_dref): Call wide-int printer.\n+\t(aff_combination_dr_offset): Use wide-int interfaces.\n+\t(determine_offset): Take a widest_int pointer rather than a\n+\tdouble_int pointer.\n+\t(split_data_refs_to_components): Use wide-int interfaces.\n+\t(suitable_component_p): Likewise.\n+\t(order_drefs): Likewise.\n+\t(add_ref_to_chain): Likewise.\n+\t(valid_initializer_p): Likewise.\n+\t(determine_roots_comp): Likewise.\n+\t* tree-pretty-print.c: Include wide-int-print.h.\n+\t(dump_generic_node): Use wide-int interfaces.\n+\t* tree-sra.c (sra_ipa_modify_expr): Likewise.\n+\t* tree-ssa-address.c (addr_for_mem_ref): Likewise.\n+\t(move_fixed_address_to_symbol): Likewise.\n+\t(move_hint_to_base): Likewise.\n+\t(move_pointer_to_base): Likewise.\n+\t(move_variant_to_index): Likewise.\n+\t(most_expensive_mult_to_index): Likewise.\n+\t(addr_to_parts): Likewise.\n+\t(copy_ref_info): Likewise.\n+\t* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Likewise.\n+\t(indirect_refs_may_alias_p): Likewise.\n+\t(stmt_kills_ref_p_1): Likewise.\n+\t* tree-ssa.c (non_rewritable_mem_ref_base): Likewise.\n+\t* tree-ssa-ccp.c: Update comment at top of file.  Include\n+\twide-int-print.h.\n+\t(struct prop_value_d): Change type of mask to widest_int.\n+\t(extend_mask): New function.\n+\t(dump_lattice_value): Use wide-int interfaces.\n+\t(get_default_value): Likewise.\n+\t(set_constant_value): Likewise.\n+\t(set_value_varying): Likewise.\n+\t(valid_lattice_transition): Likewise.\n+\t(set_lattice_value): Likewise.\n+\t(value_to_double_int): Delete.\n+\t(value_to_wide_int): New.\n+\t(get_value_from_alignment): Use wide-int interfaces.\n+\t(get_value_for_expr): Likewise.\n+\t(do_dbg_cnt): Likewise.\n+\t(ccp_finalize): Likewise.\n+\t(ccp_lattice_meet): Likewise.\n+\t(bit_value_unop_1): Use widest_ints rather than double_ints.\n+\t(bit_value_binop_1): Likewise.\n+\t(bit_value_unop): Use wide-int interfaces.\n+\t(bit_value_binop): Likewise.\n+\t(bit_value_assume_aligned): Likewise.\n+\t(evaluate_stmt): Likewise.\n+\t(ccp_fold_stmt): Likewise.\n+\t(visit_cond_stmt): Likewise.\n+\t(ccp_visit_stmt): Likewise.\n+\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Likewise.\n+\t(constant_pointer_difference): Likewise.\n+\t(associate_pointerplus): Likewise.\n+\t(combine_conversions): Likewise.\n+\t* tree-ssa-loop.h: Include wide-int.h.\n+\t(struct tree_niter_desc): Change type of max to widest_int.\n+\t* tree-ssa-loop-im.c (mem_refs_may_alias_p): Use wide-int interfaces.\n+\t* tree-ssa-loop-ivcanon.c (remove_exits_and_undefined_stmts): Likewise.\n+\t(remove_redundant_iv_tests): Likewise.\n+\t(canonicalize_loop_induction_variables): Likewise.\n+\t* tree-ssa-loop-ivopts.c (alloc_iv): Likewise.\n+\t(constant_multiple_of): Take a widest_int pointer instead of\n+\ta double_int pointer.\n+\t(get_computation_aff): Use wide-int interfaces.\n+\t(ptr_difference_cost): Likewise.\n+\t(difference_cost): Likewise.\n+\t(get_loop_invariant_expr_id): Likewise.\n+\t(get_computation_cost_at): Likewise.\n+\t(iv_elimination_compare_lt): Likewise.\n+\t(may_eliminate_iv): Likewise.\n+\t* tree-ssa-loop-niter.h (estimated_loop_iterations): Use widest_int\n+\tinstead of double_int.\n+\t(max_loop_iterations): Likewise.\n+\t(max_stmt_executions): Likewise.\n+\t(estimated_stmt_executions): Likewise.\n+\t* tree-ssa-loop-niter.c: Include wide-int-print.h.\n+\t(split_to_var_and_offset): Use wide-int interfaces.\n+\t(determine_value_range): Likewise.\n+\t(bound_difference_of_offsetted_base): Likewise.\n+\t(bounds_add): Take a widest_int instead of a double_int.\n+\t(number_of_iterations_ne_max): Use wide-int interfaces.\n+\t(number_of_iterations_ne): Likewise.\n+\t(number_of_iterations_lt_to_ne): Likewise.\n+\t(assert_loop_rolls_lt): Likewise.\n+\t(number_of_iterations_lt): Likewise.\n+\t(number_of_iterations_le): Likewise.\n+\t(number_of_iterations_cond): Likewise.\n+\t(number_of_iterations_exit): Likewise.\n+\t(finite_loop_p): Likewise.\n+\t(derive_constant_upper_bound_assign): Likewise.\n+\t(derive_constant_upper_bound): Return a widest_int.\n+\t(derive_constant_upper_bound_ops): Likewise.\n+\t(do_warn_aggressive_loop_optimizations): Use wide-int interfaces.\n+\t(record_estimate): Take a widest_int rather than a double_int.\n+\t(record_nonwrapping_iv): Use wide-int interfaces.\n+\t(double_int_cmp): Delete.\n+\t(wide_int_cmp): New.\n+\t(bound_index): Take a widest_int rather than a double_int.\n+\t(discover_iteration_bound_by_body_walk): Use wide-int interfaces.\n+\t(maybe_lower_iteration_bound): Likewise.\n+\t(estimate_numbers_of_iterations_loop): Likewise.\n+\t(estimated_loop_iterations): Take a widest_int pointer than than\n+\ta double_int pointer.\n+\t(estimated_loop_iterations_int): Use wide-int interfaces.\n+\t(max_loop_iterations): Take a widest_int pointer than than\n+\ta double_int pointer.\n+\t(max_loop_iterations_int): Use wide-int interfaces.\n+\t(max_stmt_executions): Take a widest_int pointer than than\n+\ta double_int pointer.\n+\t(estimated_stmt_executions): Likewise.\n+\t(n_of_executions_at_most): Use wide-int interfaces.\n+\t(scev_probably_wraps_p): Likewise.\n+\t* tree-ssa-math-opts.c (gimple_expand_builtin_pow): Update calls\n+\tto real_to_integer.\n+\t* tree-scalar-evolution.c (simplify_peeled_chrec): Use wide-int\n+\tinterfaces.\n+\t* tree-ssanames.c (set_range_info): Use wide_int_refs rather than\n+\tdouble_ints.  Adjust for trailing_wide_ints <3> representation.\n+\t(set_nonzero_bits): Likewise.\n+\t(get_range_info): Return wide_ints rather than double_ints.\n+\tAdjust for trailing_wide_ints <3> representation.\n+\t(get_nonzero_bits): Likewise.\n+\t(duplicate_ssa_name_range_info): Adjust for trailing_wide_ints <3>\n+\trepresentation.\n+\t* tree-ssanames.h (struct range_info_def): Replace min, max and\n+\tnonzero_bits with a trailing_wide_ints <3>.\n+\t(set_range_info): Use wide_int_refs rather than double_ints.\n+\t(set_nonzero_bits): Likewise.\n+\t(get_range_info): Return wide_ints rather than double_ints.\n+\t(get_nonzero_bits): Likewise.\n+\t* tree-ssa-phiopt.c (jump_function_from_stmt): Use wide-int interfaces.\n+\t* tree-ssa-pre.c (phi_translate_1): Likewise.\n+\t* tree-ssa-reassoc.c (decrement_power): Use calls to real_from_integer.\n+\t(acceptable_pow_call): Likewise.\n+\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Use wide-int\n+\tinterfaces.\n+\t(vn_reference_fold_indirect): Likewise.\n+\t(vn_reference_maybe_forwprop_address): Likewise.\n+\t(valueize_refs_1): Likewise.\n+\t* tree-ssa-structalias.c (get_constraint_for_ptr_offset): Likewise.\n+\t* tree-ssa-uninit.c (is_value_included_in): Use wide-int interfaces,\n+\ttree_int_cst_lt and tree_int_cst_le.\n+\t* tree-streamer-in.c (unpack_ts_base_value_fields): Use wide-int\n+\tinterfaces.\n+\t(streamer_alloc_tree): Likewise.\n+\t* tree-streamer-out.c (pack_ts_int_cst_value_fields): Likewise.\n+\t(streamer_write_tree_header): Likewise.\n+\t(streamer_write_integer_cst): Likewise.\n+\t* tree-switch-conversion.c (emit_case_bit_tests): Likewise.\n+\t(build_constructors): Likewise.\n+\t(array_value_type): Likewise.\n+\t* tree-vect-data-refs.c (vect_prune_runtime_alias_test_list): Likewise.\n+\t(vect_check_gather): Likewise.\n+\t* tree-vect-generic.c (build_replicated_const): Likewise.\n+\t(expand_vector_divmod): Likewise.\n+\t* tree-vect-loop.c (vect_transform_loop): Likewise.\n+\t* tree-vect-loop-manip.c (vect_do_peeling_for_loop_bound): Likewise.\n+\t(vect_do_peeling_for_alignment): Likewise.\n+\t* tree-vect-patterns.c (vect_recog_divmod_pattern): Likewise.\n+\t* tree-vrp.c: Include wide-int.h.\n+\t(operand_less_p): Use wide-int interfaces and tree_int_cst_lt.\n+\t(extract_range_from_assert): Use wide-int interfaces.\n+\t(vrp_int_const_binop): Likewise.\n+\t(zero_nonzero_bits_from_vr): Take wide_int pointers rather than\n+\tdouble_int pointers.\n+\t(ranges_from_anti_range): Use wide-int interfaces.\n+\t(quad_int_cmp): Delete.\n+\t(quad_int_pair_sort): Likewise.\n+\t(extract_range_from_binary_expr_1): Use wide-int interfaces.\n+\t(extract_range_from_unary_expr_1): Likewise.\n+\t(adjust_range_with_scev): Likewise.\n+\t(masked_increment): Take and return wide_ints rather than double_ints.\n+\t(register_edge_assert_for_2): Use wide-int interfaces.\n+\t(check_array_ref): Likewise.\n+\t(search_for_addr_array): Likewise.\n+\t(maybe_set_nonzero_bits): Likewise.\n+\t(union_ranges): Pass an integer of the correct type instead of\n+\tusing integer_one_node.\n+\t(intersect_ranges): Likewise.\n+\t(simplify_truth_ops_using_ranges): Likewise.\n+\t(simplify_bit_ops_using_ranges): Use wide-int interfaces.\n+\t(range_fits_type_p): Likewise.\n+\t(simplify_cond_using_ranges): Likewise.  Take a signop rather than\n+\ta bool.\n+\t(simplify_conversion_using_ranges): Use wide-int interfaces.\n+\t(simplify_float_conversion_using_ranges): Likewise.\n+\t(vrp_finalize): Likewise.\n+\t* value-prof.c (gimple_divmod_fixed_value_transform): Likewise.\n+\t(gimple_stringops_transform): Likewise.\n+\t* varasm.c (decode_addr_const): Likewise.\n+\t(const_hash_1): Likewise.\n+\t(const_rtx_hash_1): Likewise\n+\t(output_constant): Likewise.\n+\t(array_size_for_constructor): Likewise.\n+\t(output_constructor_regular_field): Likewise.\n+\t(output_constructor_bitfield): Likewise.\n+\t* var-tracking.c (loc_cmp): Handle CONST_WIDE_INT.\n+\t* mkconfig.sh: Include machmode.h to pick up BITS_PER_UNIT for\n+\tGENERATOR_FILEs.\n+\t* gencheck.c: Define BITS_PER_UNIT.\n+\t* wide-int.cc: New.\n+\t* wide-int.h: New.\n+\t* wide-int-print.cc: New.\n+\t* wide-int-print.h: New.\n+\n 2014-05-06  Jan-Benedict Glaw  <jbglaw@lug-owl.de>\n \n \t* config/avr/avr.c (avr_can_eliminate): Mark unused argument."}, {"sha": "71057cfa9726f9923100a4f67a2028f997c126a8", "filename": "gcc/ChangeLog.wide-int", "status": "removed", "additions": 0, "deletions": 899, "changes": 899, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/807e902eea17f3132488c256c963823976b2348c/gcc%2FChangeLog.wide-int", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/807e902eea17f3132488c256c963823976b2348c/gcc%2FChangeLog.wide-int", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog.wide-int?ref=807e902eea17f3132488c256c963823976b2348c", "patch": "@@ -1,899 +0,0 @@\n-2013-11-21  Kenneth Zadeck  <zadeck@naturalbridge.com>\n-\t    Mike Stump  <mikestump@comcast.net>\n-\t    Richard Sandiford  <rdsandiford@googlemail.com>\n-\t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n-\n-\t* alias.c (ao_ref_from_mem): Use wide-int interfaces.\n-\t(rtx_equal_for_memref_p): Update comment.\n-\t(adjust_offset_for_component_ref): Use wide-int interfaces.\n-\t* builtins.c (get_object_alignment_2): Likewise.\n-\t(c_readstr): Likewise.\n-\t(target_char_cast): Add comment.\n-\t(determine_block_size): Use wide-int interfaces.\n-\t(expand_builtin_signbit): Likewise.\n-\t(fold_builtin_int_roundingfn): Likewise.\n-\t(fold_builtin_bitop): Likewise.\n-\t(fold_builtin_bswap): Likewise.\n-\t(fold_builtin_logarithm): Use signop.\n-\t(fold_builtin_pow): Likewise.\n-\t(fold_builtin_memory_op): Use wide-int interfaces.\n-\t(fold_builtin_object_size): Likewise.\n-\t* cfgloop.c (alloc_loop): Initialize nb_iterations_upper_bound and\n-\tnb_iterations_estimate.\n-\t(record_niter_bound): Use wide-int interfaces.\n-\t(get_estimated_loop_iterations_int): Likewise.\n-\t(get_estimated_loop_iterations): Likewise.\n-\t(get_max_loop_iterations): Likewise.\n-\t* cfgloop.h: Include wide-int.h.\n-\t(struct nb_iter_bound): Change bound to widest_int.\n-\t(struct loop): Change nb_iterations_upper_bound and\n-\tnb_iterations_estimate to widest_int.\n-\t(record_niter_bound): Switch to use widest_int.\n-\t(get_estimated_loop_iterations): Likewise.\n-\t(get_max_loop_iterations): Likewise.\n-\t(gcov_type_to_double_int): Rename to gcov_type_to_wide_int and\n-\tupdate for wide-int.\n-\t* cgraph.c (cgraph_add_thunk): Use wide-int interfaces.\n-\t* combine.c (try_combine): Likewise.\n-\t(subst): Use CONST_SCALAR_INT_P rather than CONST_INT_P.\n-\t* config/aarch64/aarch64.c (aapcs_vfp_sub_candidate): Use wide-int\n-\tinterfaces.\n-\t(aarch64_float_const_representable_p): Likewise.\n-\t* config/arc/arc.c: Include wide-int.h.\n-\t(arc_can_use_doloop_p): Use wide-int interfaces.\n-\t* config/arm/arm.c (aapcs_vfp_sub_candidate): Likewise.\n-\t(vfp3_const_double_index): Likewise.\n-\t* config/avr/avr.c (avr_out_round): Likewise.\n-\t(avr_fold_builtin): Likewise.\n-\t* config/bfin/bfin.c (bfin_local_alignment): Likewise.\n-\t(bfin_can_use_doloop_p): Likewise.\n-\t* config/darwin.c (darwin_mergeable_constant_section): Likewise.\n-\t(machopic_select_rtx_section): Update to handle CONST_WIDE_INT.\n-\t* config/i386/i386.c: Include wide-int.h.\n-\t(ix86_data_alignment): Use wide-int interfaces.\n-\t(ix86_local_alignment): Likewise.\n-\t(ix86_emit_swsqrtsf): Update real_from_integer.\n-\t* config/msp430/msp430.c (msp430_attr): Use wide-int interfaces.\n-\t* config/nds32/nds32.c (nds32_insert_attributes): Likewise.\n-\t* config/rs6000/predicates.md (any_operand): Add const_wide_int.\n-\t(zero_constant): Likewise.\n-\t(input_operand): Likewise.\n-\t(splat_input_operand): Likewise.\n-\t(non_logical_cint_operand): Change const_double to const_wide_int.\n-\t* config/rs6000/rs6000.c (num_insns_constant): Handle CONST_WIDE_INT.\n-\t(easy_altivec_constant): Remove comment.\n-\t(paired_expand_vector_init): Use CONSTANT_P.\n-\t(rs6000_legitimize_address): Handle CONST_WIDE_INT.\n-\t(rs6000_emit_move): Update checks.\n-\t(rs6000_aggregate_candidate): Use wide-int interfaces.\n-\t(rs6000_expand_ternop_builtin): Likewise.\n-\t(rs6000_output_move_128bit): Handle CONST_WIDE_INT.\n-\t(rs6000_assemble_integer): Likewise.\n-\t(rs6000_hash_constant): Likewise.\n-\t(output_toc): Likewise.\n-\t(rs6000_rtx_costs): Likewise.\n-\t(rs6000_emit_swrsqrt); Update call to real_from_integer.\n-\t* config/rs6000/rs6000-c.c: Include wide-int.h.\n-\t(altivec_resolve_overloaded_builtin): Use wide-int interfaces.\n-\t* config/rs6000/rs6000.h (TARGET_SUPPORTS_WIDE_INT): New.\n-\t* config/rs6000/rs6000.md: Use const_scalar_int_operand.\n-\tHandle CONST_WIDE_INT.\n-\t* config/sol2-c.c (solaris_pragma_align): Change low to unsigned HWI.\n-\tUse tree_fits_uhwi_p.\n-\t* config/sparc/sparc.c: Include wide-int.h.\n-\t(sparc_fold_builtin): Use wide-int interfaces.\n-\t* config/vax/vax.c: Include wide-int.h.\n-\t(vax_float_literal): Use real_from_integer.\n-\t* coretypes.h (struct hwivec_def): New.\n-\t(hwivec): New.\n-\t(const_hwivec): New.\n-\t* cse.c (hash_rtx_cb): Handle CONST_WIDE_INT.\n-\t(equiv_constant): Handle CONST_WIDE_INT.\n-\t* cselib.c (rtx_equal_for_cselib_1): Use CASE_CONST_UNIQUE.\n-\t(cselib_hash_rtx): Handle CONST_WIDE_INT.\n-\t* dbxout.c (stabstr_U): Use wide-int interfaces.\n-\t(dbxout_type): Update to use cst_fits_shwi_p.\n-\t* defaults.h (LOG2_BITS_PER_UNIT): Define.\n-\t(TARGET_SUPPORTS_WIDE_INT): Add default.\n-\t* dfp.c: Include wide-int.h.\n-\t(decimal_real_to_integer2): Use wide-int interfaces and rename to\n-\tdecimal_real_to_integer.\n-\t* dfp.h (decimal_real_to_integer2): Return a wide_int and rename to\n-\tdecimal_real_to_integer.\n-\t* doc/generic.texi (Constant expressions): Update for wide_int.\n-\t* doc/rtl.texi (const_double): Likewise.\n-\t(const_wide_int, CONST_WIDE_INT, CONST_WIDE_INT_VEC): New.\n-\t(CONST_WIDE_INT_NUNITS, CONST_WIDE_INT_ELT): New.\n-\t* doc/tm.texi.in (REAL_VALUE_TO_INT): Remove.\n-\t(REAL_VALUE_FROM_INT): Remove.\n-\t(TARGET_SUPPORTS_WIDE_INT): New.\n-\t* doc/tm.texi: Regenerate.\n-\t* dojump.c (prefer_and_bit_test): Use wide-int interfaces.\n-\t* double-int.h: Include wide-int.h.\n-\t(struct wi::int_traits): New.\n-\t* dwarf2out.c (get_full_len): New.\n-\t(dw_val_equal_p): Add case dw_val_class_wide_int.\n-\t(size_of_loc_descr): Likewise.\n-\t(output_loc_operands): Likewise.\n-\t(insert_double): Remove.\n-\t(insert_wide_int): New.\n-\t(add_AT_wide): New.\n-\t(print_die): Add case dw_val_class_wide_int.\n-\t(attr_checksum): Likewise.\n-\t(attr_checksum_ordered): Likewise.\n-\t(same_dw_val_p): Likewise.\n-\t(size_of_die): Likewise.\n-\t(value_format): Likewise.\n-\t(output_die): Likewise.\n-\t(double_int_type_size_in_bits): Rename to offset_int_type_size_in_bits.\n-\tUse wide-int.\n-\t(clz_loc_descriptor): Use wide-int interfaces.\n-\t(mem_loc_descriptor): Likewise.  Handle CONST_WIDE_INT.\n-\t(loc_descriptor): Use wide-int interfaces.  Handle CONST_WIDE_INT.\n-\t(round_up_to_align): Use wide-int interfaces.\n-\t(field_byte_offset): Likewise.\n-\t(insert_double): Rename to insert_wide_int.  Use wide-int interfaces.\n-\t(add_const_value_attribute): Handle CONST_WIDE_INT.  Update\n-\tCONST_DOUBLE handling.  Use wide-int interfaces.\n-\t(add_bound_info): Use tree_fits_uhwi_p.  Use wide-int interfaces.\n-\t(gen_enumeration_type_die): Use add_AT_wide.\n-\t(hash_loc_operands): Add case dw_val_class_wide_int.\n-\t(compare_loc_operands): Likewise.\n-\t* dwarf2out.h: Include wide-int.h.\n-\t(wide_int_ptr): New.\n-\t(enum dw_val_class): Add dw_val_class_wide_int.\n-\t(struct dw_val_struct): Add val_wide.\n-\t* emit-rtl.c (const_wide_int_htab): New.\n-\t(const_wide_int_htab_hash): New.\n-\t(const_wide_int_htab_eq): New.\n-\t(lookup_const_wide_int): New.\n-\t(const_double_htab_hash): Use wide-int interfaces.\n-\t(const_double_htab_eq): Likewise.\n-\t(rtx_to_double_int): Conditionally compile for wide-int.\n-\t(immed_double_int_const): Rename to immed_wide_int_const and\n-\tupdate for wide-int.\n-\t(immed_double_const): Conditionally compile for wide-int.\n-\t(init_emit_once): Use wide-int interfaces.\n-\t* explow.c (plus_constant): Likewise.\n-\t* expmed.c (mask_rtx): Move further up file.  Use wide-int interfaces.\n-\t(lshift_value): Use wide-int interfaces.\n-\t(expand_mult): Likewise.\n-\t(choose_multiplier): Likewise.\n-\t(expand_smod_pow2): Likewise.\n-\t(make_tree): Likewise.\n-\t* expr.c (convert_modes): Consolidate handling of constants.\n-\tUse wide-int interfaces.\n-\t(emit_group_load_1): Add note.\n-\t(store_expr): Update comment.\n-\t(get_inner_reference): Use wide-int interfaces.\n-\t(expand_constructor): Update comment.\n-\t(expand_expr_real_2): Use wide-int interfaces.\n-\t(expand_expr_real_1): Likewise.\n-\t(reduce_to_bit_field_precision): Likewise.\n-\t(const_vector_from_tree): Likewise.\n-\t* final.c: Include wide-int-print.h.\n-\t(output_addr_const): Handle CONST_WIDE_INT.  Use CONST_DOUBLE_AS_INT_P.\n-\t* fixed-value.c: Include wide-int.h.\n-\t(fixed_from_string): Use wide-int interfaces.\n-\t(fixed_to_decimal): Likewise.\n-\t(fixed_convert_from_real): Likewise.\n-\t(real_convert_from_fixed): Likewise.\n-\t* fold-const.h (mem_ref_offset): Return an offset_int.\n-\t(div_if_zero_remainder): Remove code parameter.\n-\t* fold-const.c (div_if_zero_remainder): Remove code parameter.\n-\tUse wide-int interfaces.\n-\t(may_negate_without_overflow_p): Use wide-int interfaces.\n-\t(negate_expr_p): Likewise.\n-\t(fold_negate_expr): Likewise.\n-\t(int_const_binop_1): Likewise.\n-\t(const_binop): Likewise.\n-\t(fold_convert_const_int_from_int): Likewise.\n-\t(fold_convert_const_int_from_real): Likewise.\n-\t(fold_convert_const_int_from_fixed): Likewise.\n-\t(fold_convert_const_fixed_from_int): Likewise.\n-\t(all_ones_mask_p): Take an unsigned size.  Use wide-int interfaces.\n-\t(sign_bit_p): Use wide-int interfaces.\n-\t(make_range_step): Likewise.\n-\t(build_range_check): Likewise.  Pass an integer of the correct type\n-\tinstead of using integer_one_node.\n-\t(range_predecessor): Pass an integer of the correct type instead\n-\tof using integer_one_node.\n-\t(range_successor): Likewise.\n-\t(merge_ranges): Likewise.\n-\t(unextend): Use wide-int interfaces.\n-\t(extract_muldiv_1): Likewise.\n-\t(fold_div_compare): Likewise.\n-\t(fold_single_bit_test): Likewise.\n-\t(fold_sign_changed_comparison): Likewise.\n-\t(try_move_mult_to_index): Update calls to div_if_zero_remainder.\n-\t(fold_plusminus_mult_expr): Use wide-int interfaces.\n-\t(native_encode_int): Likewise.\n-\t(native_interpret_int): Likewise.\n-\t(fold_unary_loc): Likewise.\n-\t(pointer_may_wrap_p): Likewise.\n-\t(size_low_cst): Likewise.\n-\t(mask_with_tz): Likewise.\n-\t(fold_binary_loc): Likewise.\n-\t(fold_ternary_loc): Likewise.\n-\t(multiple_of_p): Likewise.\n-\t(tree_call_nonnegative_warnv_p): Update calls to\n-\ttree_int_cst_min_precision and real_from_integer.\n-\t(fold_negate_const): Use wide-int interfaces.\n-\t(fold_abs_const): Likewise.\n-\t(fold_relational_const): Use tree_int_cst_lt.\n-\t(round_up_loc): Use wide-int interfaces.\n-\t* genemit.c (gen_exp): Add CONST_WIDE_INT case.\n-\t* gengenrtl.c (excluded_rtx): Add CONST_WIDE_INT case.\n-\t* gengtype.c: Remove include of double-int.h.\n-\t(do_typedef): Use wide-int interfaces.\n-\t(open_base_files): Add wide-int.h.\n-\t(main): Add offset_int and widest_int typedefs.\n-\t* gengtype-lex.l: Handle \"^\".\n-\t(CXX_KEYWORD): Add \"static\".\n-\t* gengtype-parse.c (require3): New.\n-\t(require_template_declaration): Handle constant template arguments\n-\tand nested templates.\n-\t* gengtype-state.c: Don't include \"double-int.h\".\n-\t* genpreds.c (write_one_predicate_function): Update comment.\n-\t(write_tm_constrs_h): Add check for hval and lval use in\n-\tCONST_WIDE_INT.\n-\t* genrecog.c (validate_pattern): Add CONST_WIDE_INT case.\n-\t(add_to_sequence): Likewise.\n-\t* gensupport.c (struct std_pred_table): Add const_scalar_int_operand\n-\tand const_double_operand.\n-\t* gimple.c (preprocess_case_label_vec_for_gimple): Use wide-int\n-\tinterfaces.\n-\t* gimple-fold.c (get_base_constructor): Likewise.\n-\t(fold_array_ctor_reference): Likewise.\n-\t(fold_nonarray_ctor_reference): Likewise.\n-\t(fold_const_aggregate_ref_1): Likewise.\n-\t(gimple_val_nonnegative_real_p): Likewise.\n-\t(gimple_fold_indirect_ref): Likewise.\n-\t* gimple-pretty-print.c (dump_ssaname_info): Likewise.\n-\t* gimple-ssa-strength-reduction.c: Include wide-int-print.h.\n-\t(struct slsr_cand_d): Change index to be widest_int.\n-\t(struct incr_info_d): Change incr to be widest_int.\n-\t(alloc_cand_and_find_basis): Use wide-int interfaces.\n-\t(slsr_process_phi): Likewise.\n-\t(backtrace_base_for_ref): Likewise.  Return a widest_int.\n-\t(restructure_reference): Take a widest_int instead of a double_int.\n-\t(slsr_process_ref): Use wide-int interfaces.\n-\t(create_mul_ssa_cand): Likewise.\n-\t(create_mul_imm_cand): Likewise.\n-\t(create_add_ssa_cand): Likewise.\n-\t(create_add_imm_cand): Take a widest_int instead of a double_int.\n-\t(slsr_process_add): Use wide-int interfaces.\n-\t(slsr_process_cast): Likewise.\n-\t(slsr_process_copy): Likewise.\n-\t(dump_candidate): Likewise.\n-\t(dump_incr_vec): Likewise.\n-\t(replace_ref): Likewise.\n-\t(cand_increment): Likewise.  Return a widest_int.\n-\t(cand_abs_increment): Likewise.\n-\t(replace_mult_candidate): Take a widest_int instead of a double_int.\n-\t(replace_unconditional_candidate): Use wide-int interfaces.\n-\t(incr_vec_index): Take a widest_int instead of a double_int.\n-\t(create_add_on_incoming_edge): Likewise.\n-\t(create_phi_basis): Use wide-int interfaces.\n-\t(replace_conditional_candidate): Likewise.\n-\t(record_increment): Take a widest_int instead of a double_int.\n-\t(record_phi_increments): Use wide-int interfaces.\n-\t(phi_incr_cost): Take a widest_int instead of a double_int.\n-\t(lowest_cost_path): Likewise.\n-\t(total_savings): Likewise.\n-\t(analyze_increments): Use wide-int interfaces.\n-\t(ncd_with_phi): Take a widest_int instead of a double_int.\n-\t(ncd_of_cand_and_phis): Likewise.\n-\t(nearest_common_dominator_for_cands): Likewise.\n-\t(insert_initializers): Use wide-int interfaces.\n-\t(all_phi_incrs_profitable): Likewise.\n-\t(replace_one_candidate): Likewise.\n-\t(replace_profitable_candidates): Likewise.\n-\t* godump.c: Include wide-int-print.h.\n-\t(go_output_typedef): Use wide-int interfaces.\n-\t* graphite-clast-to-gimple.c (gmp_cst_to_tree): Likewise.\n-\t* graphite-sese-to-poly.c (tree_int_to_gmp): Likewise.\n-\t(build_loop_iteration_domains): Likewise.\n-\t* hooks.h: Include wide-int.h rather than double-int.h.\n-\t(hook_bool_dint_dint_uint_bool_true): Delete.\n-\t(hook_bool_wint_wint_uint_bool_true): Declare.\n-\t* hooks.c (hook_bool_dint_dint_uint_bool_true): Removed.\n-\t(hook_bool_wint_wint_uint_bool_true): New.\n-\t* internal-fn.c (ubsan_expand_si_overflow_addsub_check): Use wide-int\n-\tinterfaces.\n-\t(ubsan_expand_si_overflow_mul_check): Likewise.\n-\t* ipa-devirt.c (get_polymorphic_call_info): Likewise.\n-\t* ipa-prop.c (compute_complex_assign_jump_func): Likewise.\n-\t(get_ancestor_addr_info): Likewise.\n-\t(ipa_modify_call_arguments): Likewise.\n-\t* loop-doloop.c (doloop_modify): Likewise.\n-\t(doloop_optimize): Likewise.\n-\t* loop-iv.c (iv_number_of_iterations): Likewise.\n-\t* loop-unroll.c (decide_unroll_constant_iterations): Likewise.\n-\t(unroll_loop_constant_iterations): Likewise.\n-\t(decide_unroll_runtime_iterations): Likewise.\n-\t(unroll_loop_runtime_iterations): Likewise.\n-\t(decide_peel_simple): Likewise.\n-\t(decide_unroll_stupid): Likewise.\n-\t* lto-streamer-in.c (streamer_read_wi): Add.\n-\t(input_cfg): Use wide-int interfaces.\n-\t(lto_input_tree_1): Likewise.\n-\t* lto-streamer-out.c (streamer_write_wi): Add.\n-\t(hash_tree): Use wide-int interfaces.\n-\t(output_cfg): Likewise.\n-\t* Makefile.in (OBJS): Add wide-int.o and wide-int-print.o.\n-\t(GTFILES): Add wide-int.h and signop.h.\n-\t(TAGS): Look for .cc files too.\n-\t* omp-low.c (scan_omp_1_op): Use wide-int interfaces.\n-\t* optabs.c (expand_subword_shift): Likewise.\n-\t(expand_doubleword_shift): Likewise.\n-\t(expand_absneg_bit): Likewise.\n-\t(expand_copysign_absneg): Likewise.\n-\t(expand_copysign_bit): Likewise.\n-\t* postreload.c (reload_cse_simplify_set): Likewise.\n-\t* predict.c (predict_iv_comparison): Likewise.\n-\t* pretty-print.h: Include wide-int-print.h.\n-\t(pp_wide_int) New.\n-\t* print-rtl.c (print_rtx): Add CONST_WIDE_INT case.\n-\t* print-tree.c: Include wide-int-print.h.\n-\t(print_node_brief): Use wide-int interfaces.\n-\t(print_node): Likewise.\n-\t* read-rtl.c (validate_const_wide_int): New.\n-\t(read_rtx_code): Add CONST_WIDE_INT case.\n-\t* real.c: Include wide-int.h.\n-\t(real_to_integer2): Delete.\n-\t(real_to_integer): New function, returning a wide_int.\n-\t(real_from_integer): Take a wide_int rather than two HOST_WIDE_INTs.\n-\t(ten_to_ptwo): Update call to real_from_integer.\n-\t(real_digit): Likewise.\n-\t* real.h: Include signop.h, wide-int.h and insn-modes.h.\n-\t(real_to_integer2, REAL_VALUE_FROM_INT, REAL_VALUE_FROM_UNSIGNED_INT)\n-\t(REAL_VALUE_TO_INT): Delete.\n-\t(real_to_integer): Declare a wide-int form.\n-\t(real_from_integer): Take a wide_int rather than two HOST_WIDE_INTs.\n-\t* recog.c (const_int_operand): Improve comment.\n-\t(const_scalar_int_operand): New.\n-\t(const_double_operand): Add a separate definition for CONST_WIDE_INT.\n-\t* rtlanal.c (commutative_operand_precedence): Handle CONST_WIDE_INT.\n-\t(split_double): Likewise.\n-\t* rtl.c (DEF_RTL_EXPR): Handle CONST_WIDE_INT.\n-\t(rtx_size): Likewise.\n-\t(rtx_alloc_stat_v): New.\n-\t(rtx_alloc_stat): Now calls rtx_alloc_stat_v.\n-\t(cwi_output_hex): New.\n-\t(iterative_hash_rtx): Handle CONST_WIDE_INT.\n-\t(cwi_check_failed_bounds): New.\n-\t* rtl.def (CONST_WIDE_INT): New.\n-\t* rtl.h: Include <utility> and wide-int.h.\n-\t(struct hwivec_def): New.\n-\t(CWI_GET_NUM_ELEM): New.\n-\t(CWI_PUT_NUM_ELEM): New.\n-\t(struct rtx_def): Add num_elem and hwiv.\n-\t(CASE_CONST_SCALAR_INT): Modify for TARGET_SUPPORTS_WIDE_INT.\n-\t(CASE_CONST_UNIQUE): Likewise.\n-\t(CASE_CONST_ANY): Likewise.\n-\t(CONST_SCALAR_INT_P): Likewise.\n-\t(CONST_WIDE_INT_P): New.\n-\t(CWI_ELT): New.\n-\t(HWIVEC_CHECK): New.\n-\t(cwi_check_failed_bounds): New.\n-\t(CWI_ELT): New.\n-\t(HWIVEC_CHECK): New.\n-\t(CONST_WIDE_INT_VEC) New.\n-\t(CONST_WIDE_INT_NUNITS) New.\n-\t(CONST_WIDE_INT_ELT) New.\n-\t(rtx_mode_t): New type.\n-\t(wi::int_traits <rtx_mode_t>): New.\n-\t(wi::shwi): New.\n-\t(wi::min_value): New.\n-\t(wi::max_value): New.\n-\t(rtx_alloc_v) New.\n-\t(const_wide_int_alloc): New.\n-\t(immed_wide_int_const): New.\n-\t* sched-vis.c (print_value): Handle CONST_WIDE_INT.\n-\t* sel-sched-ir.c (lhs_and_rhs_separable_p): Update comment.\n-\t* signop.h: New file.\n-\t* simplify-rtx.c (mode_signbit_p): Handle CONST_WIDE_INT.\n-\t(simplify_const_unary_operation): Use wide-int interfaces.\n-\t(simplify_binary_operation_1): Likewise.\n-\t(simplify_const_binary_operation): Likewise.\n-\t(simplify_const_relational_operation): Likewise.\n-\t(simplify_immed_subreg): Likewise.\n-\t* stmt.c (expand_case): Likewise.\n-\t* stor-layout.h (set_min_and_max_values_for_integral_type): Take a\n-\tsignop rather than a bool.\n-\t* stor-layout.c (layout_type): Use wide-int interfaces.\n-\t(initialize_sizetypes): Update calls to\n-\tset_min_and_max_values_for_integral_type.\n-\t(set_min_and_max_values_for_integral_type): Take a signop rather\n-\tthan a bool.  Use wide-int interfaces.\n-\t(fixup_signed_type): Update accordingly.  Remove\n-\tHOST_BITS_PER_DOUBLE_INT limit.\n-\t(fixup_unsigned_type): Likewise.\n-\t* system.h (STATIC_CONSTANT_P): New.\n-\t(STATIC_ASSERT): New.\n-\t* target.def (can_use_doloop_p): Take widest_ints rather than\n-\tdouble_ints.\n-\t* target.h: Include wide-int.h rather than double-int.h.\n-\t* targhooks.h (can_use_doloop_if_innermost): Take widest_ints rather\n-\tthan double_ints.\n-\t* targhooks.c (default_cxx_get_cookie_size): Use tree_int_cst_lt\n-\trather than INT_CST_LT_UNSIGNED.\n-\t(can_use_doloop_if_innermost): Take widest_ints rather than\n-\tdouble_ints.\n-\t* tree-affine.c: Include wide-int-print.h.\n-\t(double_int_ext_for_comb): Delete.\n-\t(wide_int_ext_for_comb): New.\n-\t(aff_combination_zero): Use wide-int interfaces.\n-\t(aff_combination_const): Take a widest_int instead of a double_int.\n-\t(aff_combination_elt): Use wide-int interfaces.\n-\t(aff_combination_scale): Take a widest_int instead of a double_int.\n-\t(aff_combination_add_elt): Likewise.\n-\t(aff_combination_add_cst): Likewise.\n-\t(aff_combination_add): Use wide-int interfaces.\n-\t(aff_combination_convert): Likewise.\n-\t(tree_to_aff_combination): Likewise.\n-\t(add_elt_to_tree): Take a widest_int instead of a double_int.\n-\t(aff_combination_to_tree): Use wide-int interfaces.\n-\t(aff_combination_remove_elt): Likewise.\n-\t(aff_combination_add_product): Take a widest_int instead of\n-\ta double_int.\n-\t(aff_combination_mult): Use wide-int interfaces.\n-\t(aff_combination_expand): Likewise.\n-\t(double_int_constant_multiple_p): Delete.\n-\t(wide_int_constant_multiple_p): New.\n-\t(aff_combination_constant_multiple_p): Take a widest_int pointer\n-\tinstead of a double_int pointer.\n-\t(print_aff): Use wide-int interfaces.\n-\t(get_inner_reference_aff): Take a widest_int pointer\n-\tinstead of a double_int pointer.\n-\t(aff_comb_cannot_overlap_p): Take widest_ints instead of double_ints.\n-\t* tree-affine.h: Include wide-int.h.\n-\t(struct aff_comb_elt): Change type of coef to widest_int.\n-\t(struct affine_tree_combination): Change type of offset to widest_int.\n-\t(double_int_ext_for_comb): Delete.\n-\t(wide_int_ext_for_comb): New.\n-\t(aff_combination_const): Use widest_int instead of double_int.\n-\t(aff_combination_scale): Likewise.\n-\t(aff_combination_add_elt): Likewise.\n-\t(aff_combination_constant_multiple_p): Likewise.\n-\t(get_inner_reference_aff): Likewise.\n-\t(aff_comb_cannot_overlap_p): Likewise.\n-\t(aff_combination_zero_p): Use wide-int interfaces.\n-\t* tree.c: Include tree.h.\n-\t(init_ttree): Use make_int_cst.\n-\t(tree_code_size): Removed code for INTEGER_CST case.\n-\t(tree_size): Add INTEGER_CST case.\n-\t(make_node_stat): Update comment.\n-\t(get_int_cst_ext_nunits, build_new_int_cst, build_int_cstu): New.\n-\t(build_int_cst_type): Use wide-int interfaces.\n-\t(double_int_to_tree): Likewise.\n-\t(double_int_fits_to_tree_p): Delete.\n-\t(force_fit_type_double): Delete.\n-\t(force_fit_type): New.\n-\t(int_cst_hash_hash): Use wide-int interfaces.\n-\t(int_cst_hash_eq): Likewise.\n-\t(build_int_cst_wide): Delete.\n-\t(wide_int_to_tree): New.\n-\t(cache_integer_cst): Use wide-int interfaces.\n-\t(build_low_bits_mask): Likewise.\n-\t(cst_and_fits_in_hwi): Likewise.\n-\t(real_value_from_int_cst): Likewise.\n-\t(make_int_cst_stat): New.\n-\t(integer_zerop): Use wide_int interfaces.\n-\t(integer_onep): Likewise.\n-\t(integer_all_onesp): Likewise.\n-\t(integer_pow2p): Likewise.\n-\t(integer_nonzerop): Likewise.\n-\t(tree_log2): Likewise.\n-\t(tree_floor_log2): Likewise.\n-\t(tree_ctz): Likewise.\n-\t(int_size_in_bytes): Likewise.\n-\t(mem_ref_offset): Return an offset_int rather than a double_int.\n-\t(build_type_attribute_qual_variant): Use wide_int interfaces.\n-\t(type_hash_eq): Likewise\n-\t(tree_int_cst_equal): Likewise.\n-\t(tree_int_cst_lt): Delete.\n-\t(tree_int_cst_compare): Likewise.\n-\t(tree_fits_shwi_p): Use wide_int interfaces.\n-\t(tree_fits_uhwi_p): Likewise.\n-\t(tree_int_cst_sign_bit): Likewise.\n-\t(tree_int_cst_sgn): Likewise.\n-\t(tree_int_cst_min_precision): Take a signop rather than a bool.\n-\t(simple_cst_equal): Use wide_int interfaces.\n-\t(compare_tree_int): Likewise.\n-\t(iterative_hash_expr): Likewise.\n-\t(int_fits_type_p): Likewise.  Use tree_int_cst_lt rather than\n-\tINT_CST_LT.\n-\t(get_type_static_bounds): Use wide_int interfaces.\n-\t(tree_int_cst_elt_check_failed): New.\n-\t(build_common_tree_nodes): Reordered to set prec before filling in\n-\tvalue.\n-\t(int_cst_value): Check cst_and_fits_in_hwi.\n-\t(widest_int_cst_value): Use wide_int interfaces.\n-\t(upper_bound_in_type): Likewise.\n-\t(lower_bound_in_type): Likewise.\n-\t(num_ending_zeros): Likewise.\n-\t(drop_tree_overflow): Likewise.\n-\t* tree-call-cdce.c (check_pow): Update call to real_from_integer.\n-\t(gen_conditions_for_pow_cst_base): Likewise.\n-\t* tree-cfg.c: Include wide-int.h and wide-int-print.h.\n-\t(group_case_labels_stmt): Use wide-int interfaces.\n-\t(verify_gimple_assign_binary): Likewise.\n-\t(print_loop): Likewise.\n-\t* tree-chrec.c (tree_fold_binomial): Likewise.\n-\t* tree-core.h (struct tree_base): Add int_length.\n-\t(struct tree_int_cst): Change rep of value.\n-\t* tree-data-ref.c (dr_analyze_innermost): Use wide-int interfaces.\n-\t(dr_may_alias_p): Likewise.\n-\t(max_stmt_executions_tree): Likewise.\n-\t* tree.def (INTEGER_CST): Update comment.\n-\t* tree-dfa.c (get_ref_base_and_extent): Use wide-int interfaces.\n-\t* tree-dfa.h (get_addr_base_and_unit_offset_1): Likewise.\n-\t* tree-dump.c: Include wide-int.h and wide-int-print.h.\n-\t(dequeue_and_dump): Use wide-int interfaces.\n-\t* tree.h: Include wide-int.h.\n-\t(NULL_TREE): Moved to earlier loc in file.\n-\t(TREE_INT_CST_ELT_CHECK): New.\n-\t(tree_int_cst_elt_check_failed): New.\n-\t(TYPE_SIGN): New.\n-\t(TREE_INT_CST): Delete.\n-\t(TREE_INT_CST_LOW): Use wide-int interfaces.\n-\t(TREE_INT_CST_HIGH): Delete.\n-\t(TREE_INT_CST_NUNITS): New.\n-\t(TREE_INT_CST_EXT_NUNITS): Likewise.\n-\t(TREE_INT_CST_OFFSET_NUNITS): Likewise.\n-\t(TREE_INT_CST_ELT): Likewise.\n-\t(INT_CST_LT): Delete.\n-\t(tree_int_cst_elt_check): New (two forms).\n-\t(type_code_size): Update comment.\n-\t(make_int_cst_stat, make_int_cst): New.\n-\t(tree_to_double_int): Delete.\n-\t(double_int_fits_to_tree_p): Delete.\n-\t(force_fit_type_double): Delete.\n-\t(build_int_cstu): Replace with out-of-line function.\n-\t(build_int_cst_wide): Delete.\n-\t(tree_int_cst_lt): Define inline.\n-\t(tree_int_cst_le): New.\n-\t(tree_int_cst_compare): Define inline.\n-\t(tree_int_cst_min_precision): Take a signop rather than a bool.\n-\t(wi::int_traits <const_tree>): New.\n-\t(wi::int_traits <tree>): New.\n-\t(wi::extended_tree): New.\n-\t(wi::int_traits <wi::extended_tree>): New.\n-\t(wi::to_widest): New.\n-\t(wi::to_offset): New.\n-\t(wi::fits_to_tree_p): New.\n-\t(wi::min_value): New.\n-\t(wi::max_value): New.\n-\t* tree-inline.c (remap_gimple_op_r): Use wide-int interfaces.\n-\t(copy_tree_body_r): Likewise.\n-\t* tree-object-size.c (compute_object_offset): Likewise.\n-\t(addr_object_size): Likewise.\n-\t* tree-predcom.c: Include wide-int-print.h.\n-\t(struct dref_d): Change type of offset to widest_int.\n-\t(dump_dref): Call wide-int printer.\n-\t(aff_combination_dr_offset): Use wide-int interfaces.\n-\t(determine_offset): Take a widest_int pointer rather than a\n-\tdouble_int pointer.\n-\t(split_data_refs_to_components): Use wide-int interfaces.\n-\t(suitable_component_p): Likewise.\n-\t(order_drefs): Likewise.\n-\t(add_ref_to_chain): Likewise.\n-\t(valid_initializer_p): Likewise.\n-\t(determine_roots_comp): Likewise.\n-\t* tree-pretty-print.c: Include wide-int-print.h.\n-\t(dump_generic_node): Use wide-int interfaces.\n-\t* tree-sra.c (sra_ipa_modify_expr): Likewise.\n-\t* tree-ssa-address.c (addr_for_mem_ref): Likewise.\n-\t(move_fixed_address_to_symbol): Likewise.\n-\t(move_hint_to_base): Likewise.\n-\t(move_pointer_to_base): Likewise.\n-\t(move_variant_to_index): Likewise.\n-\t(most_expensive_mult_to_index): Likewise.\n-\t(addr_to_parts): Likewise.\n-\t(copy_ref_info): Likewise.\n-\t* tree-ssa-alias.c (indirect_ref_may_alias_decl_p): Likewise.\n-\t(indirect_refs_may_alias_p): Likewise.\n-\t(stmt_kills_ref_p_1): Likewise.\n-\t* tree-ssa.c (non_rewritable_mem_ref_base): Likewise.\n-\t* tree-ssa-ccp.c: Update comment at top of file.  Include\n-\twide-int-print.h.\n-\t(struct prop_value_d): Change type of mask to widest_int.\n-\t(extend_mask): New function.\n-\t(dump_lattice_value): Use wide-int interfaces.\n-\t(get_default_value): Likewise.\n-\t(set_constant_value): Likewise.\n-\t(set_value_varying): Likewise.\n-\t(valid_lattice_transition): Likewise.\n-\t(set_lattice_value): Likewise.\n-\t(value_to_double_int): Delete.\n-\t(value_to_wide_int): New.\n-\t(get_value_from_alignment): Use wide-int interfaces.\n-\t(get_value_for_expr): Likewise.\n-\t(do_dbg_cnt): Likewise.\n-\t(ccp_finalize): Likewise.\n-\t(ccp_lattice_meet): Likewise.\n-\t(bit_value_unop_1): Use widest_ints rather than double_ints.\n-\t(bit_value_binop_1): Likewise.\n-\t(bit_value_unop): Use wide-int interfaces.\n-\t(bit_value_binop): Likewise.\n-\t(bit_value_assume_aligned): Likewise.\n-\t(evaluate_stmt): Likewise.\n-\t(ccp_fold_stmt): Likewise.\n-\t(visit_cond_stmt): Likewise.\n-\t(ccp_visit_stmt): Likewise.\n-\t* tree-ssa-forwprop.c (forward_propagate_addr_expr_1): Likewise.\n-\t(constant_pointer_difference): Likewise.\n-\t(associate_pointerplus): Likewise.\n-\t(combine_conversions): Likewise.\n-\t* tree-ssa-loop.h: Include wide-int.h.\n-\t(struct tree_niter_desc): Change type of max to widest_int.\n-\t* tree-ssa-loop-im.c (mem_refs_may_alias_p): Use wide-int interfaces.\n-\t* tree-ssa-loop-ivcanon.c (remove_exits_and_undefined_stmts): Likewise.\n-\t(remove_redundant_iv_tests): Likewise.\n-\t(canonicalize_loop_induction_variables): Likewise.\n-\t* tree-ssa-loop-ivopts.c (alloc_iv): Likewise.\n-\t(constant_multiple_of): Take a widest_int pointer instead of\n-\ta double_int pointer.\n-\t(get_computation_aff): Use wide-int interfaces.\n-\t(ptr_difference_cost): Likewise.\n-\t(difference_cost): Likewise.\n-\t(get_loop_invariant_expr_id): Likewise.\n-\t(get_computation_cost_at): Likewise.\n-\t(iv_elimination_compare_lt): Likewise.\n-\t(may_eliminate_iv): Likewise.\n-\t* tree-ssa-loop-niter.h (estimated_loop_iterations): Use widest_int\n-\tinstead of double_int.\n-\t(max_loop_iterations): Likewise.\n-\t(max_stmt_executions): Likewise.\n-\t(estimated_stmt_executions): Likewise.\n-\t* tree-ssa-loop-niter.c: Include wide-int-print.h.\n-\t(split_to_var_and_offset): Use wide-int interfaces.\n-\t(determine_value_range): Likewise.\n-\t(bound_difference_of_offsetted_base): Likewise.\n-\t(bounds_add): Take a widest_int instead of a double_int.\n-\t(number_of_iterations_ne_max): Use wide-int interfaces.\n-\t(number_of_iterations_ne): Likewise.\n-\t(number_of_iterations_lt_to_ne): Likewise.\n-\t(assert_loop_rolls_lt): Likewise.\n-\t(number_of_iterations_lt): Likewise.\n-\t(number_of_iterations_le): Likewise.\n-\t(number_of_iterations_cond): Likewise.\n-\t(number_of_iterations_exit): Likewise.\n-\t(finite_loop_p): Likewise.\n-\t(derive_constant_upper_bound_assign): Likewise.\n-\t(derive_constant_upper_bound): Return a widest_int.\n-\t(derive_constant_upper_bound_ops): Likewise.\n-\t(do_warn_aggressive_loop_optimizations): Use wide-int interfaces.\n-\t(record_estimate): Take a widest_int rather than a double_int.\n-\t(record_nonwrapping_iv): Use wide-int interfaces.\n-\t(double_int_cmp): Delete.\n-\t(wide_int_cmp): New.\n-\t(bound_index): Take a widest_int rather than a double_int.\n-\t(discover_iteration_bound_by_body_walk): Use wide-int interfaces.\n-\t(maybe_lower_iteration_bound): Likewise.\n-\t(estimate_numbers_of_iterations_loop): Likewise.\n-\t(estimated_loop_iterations): Take a widest_int pointer than than\n-\ta double_int pointer.\n-\t(estimated_loop_iterations_int): Use wide-int interfaces.\n-\t(max_loop_iterations): Take a widest_int pointer than than\n-\ta double_int pointer.\n-\t(max_loop_iterations_int): Use wide-int interfaces.\n-\t(max_stmt_executions): Take a widest_int pointer than than\n-\ta double_int pointer.\n-\t(estimated_stmt_executions): Likewise.\n-\t(n_of_executions_at_most): Use wide-int interfaces.\n-\t(scev_probably_wraps_p): Likewise.\n-\t* tree-ssa-math-opts.c (gimple_expand_builtin_pow): Update calls\n-\tto real_to_integer.\n-\t* tree-scalar-evolution.c (simplify_peeled_chrec): Use wide-int\n-\tinterfaces.\n-\t* tree-ssanames.c (set_range_info): Use wide_int_refs rather than\n-\tdouble_ints.  Adjust for trailing_wide_ints <3> representation.\n-\t(set_nonzero_bits): Likewise.\n-\t(get_range_info): Return wide_ints rather than double_ints.\n-\tAdjust for trailing_wide_ints <3> representation.\n-\t(get_nonzero_bits): Likewise.\n-\t(duplicate_ssa_name_range_info): Adjust for trailing_wide_ints <3>\n-\trepresentation.\n-\t* tree-ssanames.h (struct range_info_def): Replace min, max and\n-\tnonzero_bits with a trailing_wide_ints <3>.\n-\t(set_range_info): Use wide_int_refs rather than double_ints.\n-\t(set_nonzero_bits): Likewise.\n-\t(get_range_info): Return wide_ints rather than double_ints.\n-\t(get_nonzero_bits): Likewise.\n-\t* tree-ssa-phiopt.c (jump_function_from_stmt): Use wide-int interfaces.\n-\t* tree-ssa-pre.c (phi_translate_1): Likewise.\n-\t* tree-ssa-reassoc.c (decrement_power): Use calls to real_from_integer.\n-\t(acceptable_pow_call): Likewise.\n-\t* tree-ssa-sccvn.c (copy_reference_ops_from_ref): Use wide-int\n-\tinterfaces.\n-\t(vn_reference_fold_indirect): Likewise.\n-\t(vn_reference_maybe_forwprop_address): Likewise.\n-\t(valueize_refs_1): Likewise.\n-\t* tree-ssa-structalias.c (get_constraint_for_ptr_offset): Likewise.\n-\t* tree-ssa-uninit.c (is_value_included_in): Use wide-int interfaces,\n-\ttree_int_cst_lt and tree_int_cst_le.\n-\t* tree-streamer-in.c (unpack_ts_base_value_fields): Use wide-int\n-\tinterfaces.\n-\t(streamer_alloc_tree): Likewise.\n-\t* tree-streamer-out.c (pack_ts_int_cst_value_fields): Likewise.\n-\t(streamer_write_tree_header): Likewise.\n-\t(streamer_write_integer_cst): Likewise.\n-\t* tree-switch-conversion.c (emit_case_bit_tests): Likewise.\n-\t(build_constructors): Likewise.\n-\t(array_value_type): Likewise.\n-\t* tree-vect-data-refs.c (vect_prune_runtime_alias_test_list): Likewise.\n-\t(vect_check_gather): Likewise.\n-\t* tree-vect-generic.c (build_replicated_const): Likewise.\n-\t(expand_vector_divmod): Likewise.\n-\t* tree-vect-loop.c (vect_transform_loop): Likewise.\n-\t* tree-vect-loop-manip.c (vect_do_peeling_for_loop_bound): Likewise.\n-\t(vect_do_peeling_for_alignment): Likewise.\n-\t* tree-vect-patterns.c (vect_recog_divmod_pattern): Likewise.\n-\t* tree-vrp.c: Include wide-int.h.\n-\t(operand_less_p): Use wide-int interfaces and tree_int_cst_lt.\n-\t(extract_range_from_assert): Use wide-int interfaces.\n-\t(vrp_int_const_binop): Likewise.\n-\t(zero_nonzero_bits_from_vr): Take wide_int pointers rather than\n-\tdouble_int pointers.\n-\t(ranges_from_anti_range): Use wide-int interfaces.\n-\t(quad_int_cmp): Delete.\n-\t(quad_int_pair_sort): Likewise.\n-\t(extract_range_from_binary_expr_1): Use wide-int interfaces.\n-\t(extract_range_from_unary_expr_1): Likewise.\n-\t(adjust_range_with_scev): Likewise.\n-\t(masked_increment): Take and return wide_ints rather than double_ints.\n-\t(register_edge_assert_for_2): Use wide-int interfaces.\n-\t(check_array_ref): Likewise.\n-\t(search_for_addr_array): Likewise.\n-\t(maybe_set_nonzero_bits): Likewise.\n-\t(union_ranges): Pass an integer of the correct type instead of\n-\tusing integer_one_node.\n-\t(intersect_ranges): Likewise.\n-\t(simplify_truth_ops_using_ranges): Likewise.\n-\t(simplify_bit_ops_using_ranges): Use wide-int interfaces.\n-\t(range_fits_type_p): Likewise.\n-\t(simplify_cond_using_ranges): Likewise.  Take a signop rather than\n-\ta bool.\n-\t(simplify_conversion_using_ranges): Use wide-int interfaces.\n-\t(simplify_float_conversion_using_ranges): Likewise.\n-\t(vrp_finalize): Likewise.\n-\t* value-prof.c (gimple_divmod_fixed_value_transform): Likewise.\n-\t(gimple_stringops_transform): Likewise.\n-\t* varasm.c (decode_addr_const): Likewise.\n-\t(const_hash_1): Likewise.\n-\t(const_rtx_hash_1): Likewise\n-\t(output_constant): Likewise.\n-\t(array_size_for_constructor): Likewise.\n-\t(output_constructor_regular_field): Likewise.\n-\t(output_constructor_bitfield): Likewise.\n-\t* var-tracking.c (loc_cmp): Handle CONST_WIDE_INT.\n-\t* mkconfig.sh: Include machmode.h to pick up BITS_PER_UNIT for\n-\tGENERATOR_FILEs.\n-\t* gencheck.c: Define BITS_PER_UNIT.\n-\t* wide-int.cc: New.\n-\t* wide-int.h: New.\n-\t* wide-int-print.cc: New.\n-\t* wide-int-print.h: New.\n-\n-\n-ada:\n-\t* gcc-interface/cuintp.c (UI_From_gnu): Use wide-int interfaces.\n-\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use TYPE_SIGN.\n-\t(annotate_value): Use wide-int interfaces.\n-\t* gcc-interface/utils.c (get_nonnull_operand): Use tree_fits_uhwi_p.\n-\n-\n-c:\n-\t* c-decl.c (check_bitfield_type_and_width): Use TYPE_SIGN.\n-\t(finish_enum): Use wide-int interfaces.\n-\t* c-parser.c (c_parser_cilk_clause_vectorlength): Likewise.\n-\t* c-typeck.c (build_c_cast): Likewise.\n-\t(set_nonincremental_init_from_string): Likewise.\n-\t(c_tree_equal): Likewise.\n-\n-\n-c-family:\n-\t* c-ada-spec.c: Include wide-int.h.\n-\t(ADA_HOST_WIDE_INT_PRINT_DOUBLE_HEX): Remove.\n-\t(dump_generic_ada_node): Use wide-int interfaces.\n-\t* c-common.c: Include wide-int-print.h.\n-\t(shorten_compare): Use wide-int interfaces and tree_int_cst_lt.\n-\t(pointer_int_sum): Use wide-int interfaces.\n-\t(c_common_nodes_and_builtins): Use make_int_cst.\n-\t(match_case_to_enum_1): Use tree_fits_uhwi_p and tree_fits_shwi_p.\n-\t(handle_alloc_size_attribute): Use wide-int interfaces.\n-\t(get_nonnull_operand): Likewise.\n-\t* c-format.c (get_constant): Use tree_fits_uhwi_p.\n-\t* c-lex.c: Include wide-int.h.\n-\t(narrowest_unsigned_type): Take a widest_int rather than two\n-\tHOST_WIDE_INTs.\n-\t(narrowest_signed_type): Likewise.\n-\t(interpret_integer): Update accordingly.  Use wide-int interfaces.\n-\t(lex_charconst): Use wide-int interfaces.\n-\t* c-pretty-print.c: Include wide-int.h.\n-\t(pp_c_integer_constant): Use wide-int interfaces.\n-\t* cilk.c (declare_one_free_variable): Use tree_int_cst_lt instead of\n-\tINT_CST_LT_UNSIGNED.\n-\n-\n-cp:\n-\t* call.c: Include wide-int.h.\n-\t(type_passed_as): Use tree_int_cst_lt instead of INT_CST_LT_UNSIGNED.\n-\t(convert_for_arg_passing): Likewise.\n-\t* class.c: Include wide-int.h.\n-\t(walk_subobject_offsets): Use tree_int_cst_lt instead of INT_CST_LT.\n-\t(end_of_class): Use tree_int_cst_lt instead of INT_CST_LT_UNSIGNED.\n-\t(include_empty_classes): Likewise\n-\t(layout_class_type): Use tree_int_cst_lt instead of INT_CST_LT.\n-\t* cvt.c: Include wide-int.h.\n-\t(ignore_overflows): Use wide_int_to_tree.\n-\t* decl.c: Include wide-int.h.\n-\t(check_array_designated_initializer): Use wide-int interfaces.\n-\t(compute_array_index_type): Use tree_int_cst_lt instead of INT_CST_LT.\n-\t(finish_enum_value_list): Use signop.\n-\t(build_enumerator): Use wide-int interfaces.\n-\t* init.c: Include wide-int.h.\n-\t(build_new_1): Use wide-int interfaces.\n-\t* mangle.c: Include wide-int.h.\n-\t(write_integer_cst): Use wide-int interfaces.\n-\t(write_array_type): Likewise.\n-\t* tree.c: Include wide-int.h.\n-\t(cp_tree_equal): Use tree_int_cst_equal.\n-\t* typeck2.c: Include wide-int.h.\n-\t(process_init_constructor_array): Use wide-int interfaces.\n-\n-\n-fortran:\n-\t* target-memory.c: Include wide-int.h.\n-\t(gfc_interpret_logical): Use wide-int interfaces.\n-\t* trans-array.c: Include wide-int.h.\n-\t(gfc_conv_array_initializer): Use wide-int interfaces.\n-\t* trans-const.c: Include wide-int.h.\n-\t(gfc_conv_string_init): Use wide-int interfaces.\n-\t(gfc_conv_mpz_to_tree): Likewise.\n-\t(gfc_conv_tree_to_mpz): Likewise.\n-\t* trans-decl.c (gfc_can_put_var_on_stack): Use tree_fits_uhwi_p.\n-\t* trans-expr.c: Include wide-int.h.\n-\t(gfc_conv_cst_int_power): Use wide-int interfaces.\n-\t(gfc_string_to_single_character): Likewise.\n-\t(gfc_optimize_len_trim): Likewise.\n-\t* trans-intrinsic.c: Include wide-int.h.\n-\t(trans_this_image): Use wide-int interfaces.\n-\t(gfc_conv_intrinsic_bound): Likewise.\n-\t(conv_intrinsic_cobound): Likewise.\n-\t* trans-types.c (gfc_init_types): Likewise.\n-\t(gfc_get_array_type_bounds): Pass an integer of the correct type\n-\tinstead of using integer_one_node.\n-\n-\n-go:\n-\t* go-gcc.cc (Gcc_backend::type_size): Use tree_fits_uhwi_p.\n-\n-\n-java:\n-\t* boehm.c: Include wide-int.h.\n-\t(mark_reference_fields): Use a wide_int mask.\n-\t(get_boehm_type_descriptor): Use wide-int interfaces.\n-\t* expr.c: Include wide-int.h.\n-\t(build_newarray): Remove bogus \"== INTEGER_CST\".\n-\t(expand_java_pushc): Use real_from_integer.\n-\t(build_field_ref): Use tree_int_cst_lt instead of INT_CST_LT_UNSIGNED.\n-\t* jcf-parse.c: Include wide-int.h.\n-\t(get_constant): Use wide-int interfaces.\n-\n-\n-lto:\n-\t* lto.c (compare_tree_sccs_1): Use wide-int interfaces.\n-\t* lto-lang.c (get_nonnull_operand): Likewise.\n-\n-\n-objc:\n-\t* objc-act.c: Include wide-int.h.\n-\t(objc_decl_method_attributes): Use wide-int interfaces.\n-\n-\n-testsuite:\n-\t* gcc.dg/tree-ssa/pr45427.c: Update to look for 0x0 instead of 0."}, {"sha": "57c5176c838152c100acb0ea181c263193ef227d", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=1d60af086712da018dbdf2a31b0fa6513ccc4487", "patch": "@@ -1,3 +1,12 @@\n+2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc-interface/cuintp.c (UI_From_gnu): Use wide-int interfaces.\n+\t* gcc-interface/decl.c (gnat_to_gnu_entity): Use TYPE_SIGN.\n+\t(annotate_value): Use wide-int interfaces.\n+\t* gcc-interface/utils.c (get_nonnull_operand): Use tree_fits_uhwi_p.\n+\n 2014-04-28  Richard Henderson  <rth@redhat.com>\n \n \t* gcc-interface/Makefile.in: Support aarch64-linux."}, {"sha": "4673a16b10c10cd07dfe945bbe215f333f06d1a0", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=1d60af086712da018dbdf2a31b0fa6513ccc4487", "patch": "@@ -1,3 +1,29 @@\n+2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-ada-spec.c: Include wide-int.h.\n+\t(ADA_HOST_WIDE_INT_PRINT_DOUBLE_HEX): Remove.\n+\t(dump_generic_ada_node): Use wide-int interfaces.\n+\t* c-common.c: Include wide-int-print.h.\n+\t(shorten_compare): Use wide-int interfaces and tree_int_cst_lt.\n+\t(pointer_int_sum): Use wide-int interfaces.\n+\t(c_common_nodes_and_builtins): Use make_int_cst.\n+\t(match_case_to_enum_1): Use tree_fits_uhwi_p and tree_fits_shwi_p.\n+\t(handle_alloc_size_attribute): Use wide-int interfaces.\n+\t(get_nonnull_operand): Likewise.\n+\t* c-format.c (get_constant): Use tree_fits_uhwi_p.\n+\t* c-lex.c: Include wide-int.h.\n+\t(narrowest_unsigned_type): Take a widest_int rather than two\n+\tHOST_WIDE_INTs.\n+\t(narrowest_signed_type): Likewise.\n+\t(interpret_integer): Update accordingly.  Use wide-int interfaces.\n+\t(lex_charconst): Use wide-int interfaces.\n+\t* c-pretty-print.c: Include wide-int.h.\n+\t(pp_c_integer_constant): Use wide-int interfaces.\n+\t* cilk.c (declare_one_free_variable): Use tree_int_cst_lt instead of\n+\tINT_CST_LT_UNSIGNED.\n+\n 2014-05-06  Richard Biener  <rguenther@suse.de>\n \n \t* c-opts.c (c_common_post_options): For -freestanding,"}, {"sha": "379b8d749467a47f2df76399d461ce30f3f13c00", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=1d60af086712da018dbdf2a31b0fa6513ccc4487", "patch": "@@ -1,3 +1,14 @@\n+2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* c-decl.c (check_bitfield_type_and_width): Use TYPE_SIGN.\n+\t(finish_enum): Use wide-int interfaces.\n+\t* c-parser.c (c_parser_cilk_clause_vectorlength): Likewise.\n+\t* c-typeck.c (build_c_cast): Likewise.\n+\t(set_nonincremental_init_from_string): Likewise.\n+\t(c_tree_equal): Likewise.\n+\n 2014-05-02  Marek Polacek  <polacek@redhat.com>\n \n \tPR c/25801"}, {"sha": "dce8df6c28628269f2fd0fb57e0c7ce7bae03a5f", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=1d60af086712da018dbdf2a31b0fa6513ccc4487", "patch": "@@ -1,3 +1,32 @@\n+2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* call.c: Include wide-int.h.\n+\t(type_passed_as): Use tree_int_cst_lt instead of INT_CST_LT_UNSIGNED.\n+\t(convert_for_arg_passing): Likewise.\n+\t* class.c: Include wide-int.h.\n+\t(walk_subobject_offsets): Use tree_int_cst_lt instead of INT_CST_LT.\n+\t(end_of_class): Use tree_int_cst_lt instead of INT_CST_LT_UNSIGNED.\n+\t(include_empty_classes): Likewise\n+\t(layout_class_type): Use tree_int_cst_lt instead of INT_CST_LT.\n+\t* cvt.c: Include wide-int.h.\n+\t(ignore_overflows): Use wide_int_to_tree.\n+\t* decl.c: Include wide-int.h.\n+\t(check_array_designated_initializer): Use wide-int interfaces.\n+\t(compute_array_index_type): Use tree_int_cst_lt instead of INT_CST_LT.\n+\t(finish_enum_value_list): Use signop.\n+\t(build_enumerator): Use wide-int interfaces.\n+\t* init.c: Include wide-int.h.\n+\t(build_new_1): Use wide-int interfaces.\n+\t* mangle.c: Include wide-int.h.\n+\t(write_integer_cst): Use wide-int interfaces.\n+\t(write_array_type): Likewise.\n+\t* tree.c: Include wide-int.h.\n+\t(cp_tree_equal): Use tree_int_cst_equal.\n+\t* typeck2.c: Include wide-int.h.\n+\t(process_init_constructor_array): Use wide-int interfaces.\n+\n 2014-05-03  Paolo Carlini  <paolo.carlini@oracle.com>\n \n \tPR c++/58582"}, {"sha": "5e39b1305b85747035ae4222498b40eb0fc031ff", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=1d60af086712da018dbdf2a31b0fa6513ccc4487", "patch": "@@ -1,3 +1,28 @@\n+2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* target-memory.c: Include wide-int.h.\n+\t(gfc_interpret_logical): Use wide-int interfaces.\n+\t* trans-array.c: Include wide-int.h.\n+\t(gfc_conv_array_initializer): Use wide-int interfaces.\n+\t* trans-const.c: Include wide-int.h.\n+\t(gfc_conv_string_init): Use wide-int interfaces.\n+\t(gfc_conv_mpz_to_tree): Likewise.\n+\t(gfc_conv_tree_to_mpz): Likewise.\n+\t* trans-decl.c (gfc_can_put_var_on_stack): Use tree_fits_uhwi_p.\n+\t* trans-expr.c: Include wide-int.h.\n+\t(gfc_conv_cst_int_power): Use wide-int interfaces.\n+\t(gfc_string_to_single_character): Likewise.\n+\t(gfc_optimize_len_trim): Likewise.\n+\t* trans-intrinsic.c: Include wide-int.h.\n+\t(trans_this_image): Use wide-int interfaces.\n+\t(gfc_conv_intrinsic_bound): Likewise.\n+\t(conv_intrinsic_cobound): Likewise.\n+\t* trans-types.c (gfc_init_types): Likewise.\n+\t(gfc_get_array_type_bounds): Pass an integer of the correct type\n+\tinstead of using integer_one_node.\n+\n 2014-04-30  Tobias Burnus  <burnus@net-b.de>\n \n \t* trans-decl.c (create_function_arglist): Add hidden coarray arguments"}, {"sha": "ca9b4a2939105842e4ab36fad1e7371faaf67f90", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=1d60af086712da018dbdf2a31b0fa6513ccc4487", "patch": "@@ -1,3 +1,9 @@\n+2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* go-gcc.cc (Gcc_backend::type_size): Use tree_fits_uhwi_p.\n+\n 2014-05-06  Chris Manghane  <cmang@google.com>\n \n \t* go-c.h (go_create_gogo): Update declaration to add"}, {"sha": "93c634d8c2c93235d713238e0e70f771d00de248", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=1d60af086712da018dbdf2a31b0fa6513ccc4487", "patch": "@@ -1,3 +1,17 @@\n+2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* boehm.c: Include wide-int.h.\n+\t(mark_reference_fields): Use a wide_int mask.\n+\t(get_boehm_type_descriptor): Use wide-int interfaces.\n+\t* expr.c: Include wide-int.h.\n+\t(build_newarray): Remove bogus \"== INTEGER_CST\".\n+\t(expand_java_pushc): Use real_from_integer.\n+\t(build_field_ref): Use tree_int_cst_lt instead of INT_CST_LT_UNSIGNED.\n+\t* jcf-parse.c: Include wide-int.h.\n+\t(get_constant): Use wide-int interfaces.\n+\n 2014-01-02  Richard Sandiford  <rdsandiford@googlemail.com>\n \n \tUpdate copyright years"}, {"sha": "038f8a95a5239ee3c10458ba9bb3d668d39c5c3d", "filename": "gcc/lto/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Flto%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Flto%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flto%2FChangeLog?ref=1d60af086712da018dbdf2a31b0fa6513ccc4487", "patch": "@@ -1,3 +1,10 @@\n+2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* lto.c (compare_tree_sccs_1): Use wide-int interfaces.\n+\t* lto-lang.c (get_nonnull_operand): Likewise.\n+\n 2014-04-28  Richard Biener  <rguenther@suse.de>\n \n \tPR middle-end/60092"}, {"sha": "bcc5b82f97b2d44acc4d58604f169021940d5111", "filename": "gcc/objc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fobjc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Fobjc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjc%2FChangeLog?ref=1d60af086712da018dbdf2a31b0fa6513ccc4487", "patch": "@@ -1,3 +1,10 @@\n+2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* objc-act.c: Include wide-int.h.\n+\t(objc_decl_method_attributes): Use wide-int interfaces.\n+\n 2014-04-24  Dimitris Papavasiliou  <dpapavas@gmail.com>\n \n \tPR objc/56044"}, {"sha": "cdd4924a60238c7e9b48eb3d8980cdd21277d8f4", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1d60af086712da018dbdf2a31b0fa6513ccc4487/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=1d60af086712da018dbdf2a31b0fa6513ccc4487", "patch": "@@ -1,3 +1,9 @@\n+2014-05-06  Kenneth Zadeck  <zadeck@naturalbridge.com>\n+\t    Mike Stump  <mikestump@comcast.net>\n+\t    Richard Sandiford  <rdsandiford@googlemail.com>\n+\n+\t* gcc.dg/tree-ssa/pr45427.c: Update to look for 0x0 instead of 0.\n+\n 2014-05-05  Jan Hubicka  <hubicka@ucw.cz>\n \n \tPR ipa/60965"}]}