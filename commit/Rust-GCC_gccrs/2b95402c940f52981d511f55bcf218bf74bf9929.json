{"sha": "2b95402c940f52981d511f55bcf218bf74bf9929", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmI5NTQwMmM5NDBmNTI5ODFkNTExZjU1YmNmMjE4YmY3NGJmOTkyOQ==", "commit": {"author": {"name": "Michael Koch", "email": "konqueror@gmx.de", "date": "2003-12-02T13:44:23Z"}, "committer": {"name": "Michael Koch", "email": "mkoch@gcc.gnu.org", "date": "2003-12-02T13:44:23Z"}, "message": "2003-12-02  Michael Koch  <konqueror@gmx.de>\n\n\t* gnu/java/net/protocol//http/Connection.java\n\t(defRequestProperties): Removed. This dont gets used since JDK 1.3.\n\t(requestProperties): Initialize, documentation added.\n\t(inputStream): Renamed from bufferedIn.\n\t(Connection): Dont initialize requestProperties.\n\t(setDefaultRequestProperty): Removed.\n\t(getDefaultRequestProperty): Removed.\n\t(usingProxy): Documentation added.\n\t(getHttpHeaders): Likewise.\n\nFrom-SVN: r74176", "tree": {"sha": "4177316655f95c2d2eef08ccf78d4ea30c3db4ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4177316655f95c2d2eef08ccf78d4ea30c3db4ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b95402c940f52981d511f55bcf218bf74bf9929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b95402c940f52981d511f55bcf218bf74bf9929", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b95402c940f52981d511f55bcf218bf74bf9929", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b95402c940f52981d511f55bcf218bf74bf9929/comments", "author": null, "committer": null, "parents": [{"sha": "920ca197134f5d356d439b4e5ce860b5bfb6a956", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/920ca197134f5d356d439b4e5ce860b5bfb6a956", "html_url": "https://github.com/Rust-GCC/gccrs/commit/920ca197134f5d356d439b4e5ce860b5bfb6a956"}], "stats": {"total": 71, "additions": 39, "deletions": 32}, "files": [{"sha": "29bffd98a3a9ee3a5a1c7a0c698ce87137c23dda", "filename": "libjava/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b95402c940f52981d511f55bcf218bf74bf9929/libjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b95402c940f52981d511f55bcf218bf74bf9929/libjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2FChangeLog?ref=2b95402c940f52981d511f55bcf218bf74bf9929", "patch": "@@ -1,3 +1,15 @@\n+2003-12-02  Michael Koch  <konqueror@gmx.de>\n+\n+\t* gnu/java/net/protocol//http/Connection.java\n+\t(defRequestProperties): Removed. This dont gets used since JDK 1.3.\n+\t(requestProperties): Initialize, documentation added.\n+\t(inputStream): Renamed from bufferedIn.\n+\t(Connection): Dont initialize requestProperties.\n+\t(setDefaultRequestProperty): Removed.\n+\t(getDefaultRequestProperty): Removed.\n+\t(usingProxy): Documentation added.\n+\t(getHttpHeaders): Likewise.\n+\n 2003-12-02  Michael Koch  <konqueror@gmx.de>\n \n \t* java/text/DateFormat.java:"}, {"sha": "ac6cc692287b13c684da61b3930b4c02e8a9c222", "filename": "libjava/gnu/java/net/protocol/http/Connection.java", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b95402c940f52981d511f55bcf218bf74bf9929/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b95402c940f52981d511f55bcf218bf74bf9929/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libjava%2Fgnu%2Fjava%2Fnet%2Fprotocol%2Fhttp%2FConnection.java?ref=2b95402c940f52981d511f55bcf218bf74bf9929", "patch": "@@ -72,12 +72,6 @@ public final class Connection extends HttpURLConnection\n    * The socket we are connected to\n    */\n   private Socket socket;\n-  private static Hashtable defRequestProperties = new Hashtable();\n-  private Hashtable requestProperties;\n-  private Hashtable hdrHash = new Hashtable();\n-  private Vector hdrVec = new Vector();\n-  private BufferedInputStream bufferedIn;\n-\n   private static int proxyPort = 80;\n   private static boolean proxyInUse = false;\n   private static String proxyHost = null;\n@@ -105,28 +99,26 @@ public final class Connection extends HttpURLConnection\n       }\n   }\n \n+  /**\n+   * The InputStream for this connection.\n+   */\n+  private BufferedInputStream inputStream;\n+\n+  /**\n+   * This is the object that holds the header field information\n+   */\n+  private Hashtable requestProperties = new Hashtable();\n+  private Hashtable hdrHash = new Hashtable();\n+  private Vector hdrVec = new Vector();\n+\n   /**\n    * Calls superclass constructor to initialize\n    */\n   protected Connection(URL url)\n   {\n     super(url);\n-    requestProperties = (Hashtable) defRequestProperties.clone();\n   }\n \n-  // Override method in URLConnection.\n-  public static void setDefaultRequestProperty(String key, String value)\n-  {\n-    defRequestProperties.put(key, value);\n-  }\n-\n-  // Override method in URLConnection.\n-  public static String getDefaultRequestProperty(String key)\n-  {\n-    return (String) defRequestProperties.get(key);\n-  }\n-\n-  // Override method in URLConnection.\n   public void setRequestProperty(String key, String value)\n   {\n     if (connected)\n@@ -135,7 +127,6 @@ public void setRequestProperty(String key, String value)\n     requestProperties.put(key, value);\n   }\n \n-  // Override method in URLConnection.\n   public String getRequestProperty(String key)\n   {\n     if (connected)\n@@ -195,31 +186,36 @@ public void disconnect()\n \t  {\n \t    socket.close();\n \t  }\n-\tcatch (IOException ex)\n+\tcatch (IOException e)\n \t  {\n \t    // Ignore errors in closing socket.\n \t  }\n \tsocket = null;\n       }\n   }\n \n+  /**\n+   * Return a boolean indicating whether or not this connection is\n+   * going through a proxy\n+   *\n+   * @return true if using a proxy, false otherwise\n+   */\n   public boolean usingProxy()\n   {\n     return proxyInUse;\n   }\n \n-  // Override default method in URLConnection.\n   public InputStream getInputStream() throws IOException\n   {\n     if (!connected)\n       connect();\n \n     if (!doInput)\n       throw new ProtocolException(\"Can't open InputStream if doInput is false\");\n-    return bufferedIn;\n+    \n+    return inputStream;\n   }\n \n-  // Override default method in URLConnection.\n   public OutputStream getOutputStream() throws IOException\n   {\n     if (!connected)\n@@ -231,7 +227,6 @@ public OutputStream getOutputStream() throws IOException\n     return socket.getOutputStream();\n   }\n \n-  // Override default method in URLConnection.\n   public String getHeaderField(String name)\n   {\n     if (!connected)\n@@ -247,7 +242,6 @@ public String getHeaderField(String name)\n     return (String) hdrHash.get(name.toLowerCase());\n   }\n \n-  // Override default method in URLConnection.\n   public Map getHeaderFields()\n   {\n     if (!connected)\n@@ -263,7 +257,6 @@ public Map getHeaderFields()\n     return hdrHash;\n   }\n \n-  // Override default method in URLConnection.\n   public String getHeaderField(int n)\n   {\n     if (!connected)\n@@ -281,7 +274,6 @@ public String getHeaderField(int n)\n     return null;\n   }\n \n-  // Override default method in URLConnection.\n   public String getHeaderFieldKey(int n)\n   {\n     if (!connected)\n@@ -321,6 +313,9 @@ private String getField(String str)\n       return str;\n   }\n \n+  /**\n+   * Read HTTP reply from inputStream.\n+   */\n   private void getHttpHeaders() throws IOException\n   {\n     // Originally tried using a BufferedReader here to take advantage of\n@@ -329,7 +324,7 @@ private void getHttpHeaders() throws IOException\n     // It is probably more robust than it needs to be, e.g. the byte[]\n     // is unlikely to overflow and a '\\r' should always be followed by a '\\n',\n     // but it is better to be safe just in case.\n-    bufferedIn = new BufferedInputStream(socket.getInputStream());\n+    inputStream = new BufferedInputStream(socket.getInputStream());\n \n     int buflen = 100;\n     byte[] buf = new byte[buflen];\n@@ -348,12 +343,12 @@ private void getHttpHeaders() throws IOException\n \t// FIXME: This is rather inefficient.\n \tfor (i = 0; i < buflen; i++)\n \t  {\n-\t    buf[i] = (byte) bufferedIn.read();\n+\t    buf[i] = (byte) inputStream.read();\n \t    if (buf[i] == -1)\n \t      throw new IOException(\"Malformed HTTP header\");\n \t    if (buf[i] == '\\r')\n \t      {\n-\t        bufferedIn.read(ch, 0, 1);\n+\t        inputStream.read(ch, 0, 1);\n \t\tif (ch[0] == '\\n')\n \t\t  gotnl = true;\n \t\tbreak;"}]}