{"sha": "c9ee9c1e3553247c776f33eb0fe0aadee094a192", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzllZTljMWUzNTUzMjQ3Yzc3NmYzM2ViMGZlMGFhZGVlMDk0YTE5Mg==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2020-12-11T08:50:59Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-06T08:33:41Z"}, "message": "add signed_bool_precision attribute for GIMPLE FE use\n\nThis adds __attribute__((signed_bool_precision(precision))) to be able\nto construct nonstandard boolean types which for the included testcase\nis needed to simulate Ada and LTO interaction (Ada uses a 8 bit\nprecision boolean_type_node).  This will also be useful for vector\nunit testcases where we need to produce vector types with\nnon-standard precision signed boolean type components.\n\n2021-01-06  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/95582\ngcc/c-family/\n\t* c-attribs.c (c_common_attribute_table): Add entry for\n\tsigned_bool_precision.\n\t(handle_signed_bool_precision_attribute): New.\n\ngcc/testsuite/\n\t* gcc.dg/pr95582.c: New testcase.", "tree": {"sha": "767a296e7aa92d2b27b3e0184c87fb5074a0d0e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/767a296e7aa92d2b27b3e0184c87fb5074a0d0e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c9ee9c1e3553247c776f33eb0fe0aadee094a192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ee9c1e3553247c776f33eb0fe0aadee094a192", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c9ee9c1e3553247c776f33eb0fe0aadee094a192", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c9ee9c1e3553247c776f33eb0fe0aadee094a192/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a05cc70a6c1ae0e5b22e16f4d8d13995a38ea1f9"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "84ec86b209115afa060638e8c38c107669155f83", "filename": "gcc/c-family/c-attribs.c", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ee9c1e3553247c776f33eb0fe0aadee094a192/gcc%2Fc-family%2Fc-attribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ee9c1e3553247c776f33eb0fe0aadee094a192/gcc%2Fc-family%2Fc-attribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-attribs.c?ref=c9ee9c1e3553247c776f33eb0fe0aadee094a192", "patch": "@@ -161,6 +161,8 @@ static tree handle_copy_attribute (tree *, tree, tree, int, bool *);\n static tree handle_nsobject_attribute (tree *, tree, tree, int, bool *);\n static tree handle_objc_root_class_attribute (tree *, tree, tree, int, bool *);\n static tree handle_objc_nullability_attribute (tree *, tree, tree, int, bool *);\n+static tree handle_signed_bool_precision_attribute (tree *, tree, tree, int,\n+\t\t\t\t\t\t    bool *);\n \n /* Helper to define attribute exclusions.  */\n #define ATTR_EXCL(name, function, type, variable)\t\\\n@@ -274,6 +276,8 @@ const struct attribute_spec c_common_attribute_table[] =\n {\n   /* { name, min_len, max_len, decl_req, type_req, fn_type_req,\n        affects_type_identity, handler, exclude } */\n+  { \"signed_bool_precision\",  1, 1, false, true, false, true,\n+\t\t\t      handle_signed_bool_precision_attribute, NULL },\n   { \"packed\",                 0, 0, false, false, false, false,\n \t\t\t      handle_packed_attribute,\n \t                      attr_aligned_exclusions },\n@@ -894,6 +898,43 @@ validate_attr_arg (tree node[2], tree name, tree newarg)\n \n /* Attribute handlers common to C front ends.  */\n \n+/* Handle a \"signed_bool_precision\" attribute; arguments as in\n+   struct attribute_spec.handler.  */\n+\n+static tree\n+handle_signed_bool_precision_attribute (tree *node, tree name, tree args,\n+\t\t\t\t\tint, bool *no_add_attrs)\n+{\n+  *no_add_attrs = true;\n+  if (!flag_gimple)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n+      return NULL_TREE;\n+    }\n+\n+  if (!TYPE_P (*node) || TREE_CODE (*node) != BOOLEAN_TYPE)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute only supported on \"\n+\t       \"boolean types\", name);\n+      return NULL_TREE;\n+    }\n+\n+  unsigned HOST_WIDE_INT prec = HOST_WIDE_INT_M1U;\n+  if (tree_fits_uhwi_p (TREE_VALUE (args)))\n+    prec = tree_to_uhwi (TREE_VALUE (args));\n+  if (prec > MAX_FIXED_MODE_SIZE)\n+    {\n+      warning (OPT_Wattributes, \"%qE attribute with unsupported boolean \"\n+\t       \"precision\", name);\n+      return NULL_TREE;\n+    }\n+\n+  tree new_type = build_nonstandard_boolean_type (prec);\n+  *node = lang_hooks.types.reconstruct_complex_type (*node, new_type);\n+\n+  return NULL_TREE;\n+}\n+\n /* Handle a \"packed\" attribute; arguments as in\n    struct attribute_spec.handler.  */\n "}, {"sha": "cc2ab46ec95fa49c2da2c7b38c67b8ee5c4ed294", "filename": "gcc/testsuite/gcc.dg/pr95582.c", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c9ee9c1e3553247c776f33eb0fe0aadee094a192/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95582.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c9ee9c1e3553247c776f33eb0fe0aadee094a192/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95582.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fpr95582.c?ref=c9ee9c1e3553247c776f33eb0fe0aadee094a192", "patch": "@@ -0,0 +1,19 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-fgimple -O3\" } */\n+\n+typedef _Bool bool8 __attribute__((signed_bool_precision(8)));\n+\n+bool8 data[16];\n+\n+void __GIMPLE(ssa) foo(int f)\n+{\n+  _Bool t;\n+  bool8 tp;\n+\n+__BB(2):\n+   t_2 = f_1(D) != 0;\n+   tp_3 = (bool8) t_2;\n+   data[0] = tp_3;\n+   data[1] = tp_3;\n+   return;\n+}"}]}