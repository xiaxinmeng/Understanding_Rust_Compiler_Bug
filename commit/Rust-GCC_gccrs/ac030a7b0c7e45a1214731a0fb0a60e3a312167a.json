{"sha": "ac030a7b0c7e45a1214731a0fb0a60e3a312167a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YWMwMzBhN2IwYzdlNDVhMTIxNDczMWEwZmIwYTYwZTNhMzEyMTY3YQ==", "commit": {"author": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-24T21:11:41Z"}, "committer": {"name": "Richard Kenner", "email": "kenner@gcc.gnu.org", "date": "1994-08-24T21:11:41Z"}, "message": "(EXTRA_CONSTRAINT): Add new letter, `R'.\n\n(ENCODE_SECTION_INFO): Don't check TREE_ASM_WRITTEN.\n(PREDICATE_COSTS): Add call_operand.\n\nFrom-SVN: r7965", "tree": {"sha": "c5ec6c9156a100679940fbc3d2aa683f1bd572d2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c5ec6c9156a100679940fbc3d2aa683f1bd572d2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ac030a7b0c7e45a1214731a0fb0a60e3a312167a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac030a7b0c7e45a1214731a0fb0a60e3a312167a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac030a7b0c7e45a1214731a0fb0a60e3a312167a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac030a7b0c7e45a1214731a0fb0a60e3a312167a/comments", "author": null, "committer": null, "parents": [{"sha": "7eec3328e2b481e3bac07bda55e0fcbac2819377", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7eec3328e2b481e3bac07bda55e0fcbac2819377", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7eec3328e2b481e3bac07bda55e0fcbac2819377"}], "stats": {"total": 16, "additions": 9, "deletions": 7}, "files": [{"sha": "0c294417329245d848321a4608507cef9aa86957", "filename": "gcc/config/alpha/alpha.h", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ac030a7b0c7e45a1214731a0fb0a60e3a312167a/gcc%2Fconfig%2Falpha%2Falpha.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ac030a7b0c7e45a1214731a0fb0a60e3a312167a/gcc%2Fconfig%2Falpha%2Falpha.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Falpha.h?ref=ac030a7b0c7e45a1214731a0fb0a60e3a312167a", "patch": "@@ -510,10 +510,13 @@ enum reg_class { NO_REGS, GENERAL_REGS, FLOAT_REGS, ALL_REGS,\n /* Optional extra constraints for this machine.\n \n    For the Alpha, `Q' means that this is a memory operand but not a\n-   reference to an unaligned location.  */\n+   reference to an unaligned location.\n+   `R' is a SYMBOL_REF that has SYMBOL_REF_FLAG set or is the current\n+   function.  */\n \n #define EXTRA_CONSTRAINT(OP, C)\t\t\t\t\\\n   ((C) == 'Q' ? GET_CODE (OP) == MEM && GET_CODE (XEXP (OP, 0)) != AND \\\n+   : (C) == 'R' ? current_file_function_operand (OP, Pmode)\t\\\n    : 0)\n \n /* Given an rtx X being reloaded into a reg required to be\n@@ -1514,14 +1517,12 @@ literal_section ()\t\t\t\t\t\t\\\n \n #define READONLY_DATA_SECTION\tliteral_section\n \n-/* If we are referencing a function that is static or is known to be\n-   in this file, make the SYMBOL_REF special.  We can use this to see\n-   indicate that we can branch to this function without setting PV or\n-   restoring GP.  */\n+/* If we are referencing a function that is static, make the SYMBOL_REF\n+   special.  We use this to see indicate we can branch to this function\n+   without setting PV or restoring GP.  */\n \n #define ENCODE_SECTION_INFO(DECL)  \\\n-  if (TREE_CODE (DECL) == FUNCTION_DECL\t\t\t\\\n-      && (TREE_ASM_WRITTEN (DECL) || ! TREE_PUBLIC (DECL))) \\\n+  if (TREE_CODE (DECL) == FUNCTION_DECL && ! TREE_PUBLIC (DECL)) \\\n     SYMBOL_REF_FLAG (XEXP (DECL_RTL (DECL), 0)) = 1;\n \n /* How to refer to registers in assembler output.\n@@ -1837,6 +1838,7 @@ literal_section ()\t\t\t\t\t\t\\\n   {\"divmod_operator\", {DIV, MOD, UDIV, UMOD}},\t\t\\\n   {\"fp0_operand\", {CONST_DOUBLE}},\t\t\t\\\n   {\"current_file_function_operand\", {SYMBOL_REF}},\t\\\n+  {\"call_operand\", {REG, SYMBOL_REF}},\t\t\t\\\n   {\"input_operand\", {SUBREG, REG, MEM, CONST_INT, CONST_DOUBLE,\t\\\n \t\t     SYMBOL_REF, CONST, LABEL_REF}},\t\\\n   {\"aligned_memory_operand\", {MEM}},\t\t\t\\"}]}