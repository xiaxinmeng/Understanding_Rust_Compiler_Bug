{"sha": "9881adffaa5ceb049055fd7e3da9efab4dde32b1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg4MWFkZmZhYTVjZWIwNDkwNTVmZDdlM2RhOWVmYWI0ZGRlMzJiMQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "joern.rennecke@superh.com", "date": "2002-06-25T20:53:12Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2002-06-25T20:53:12Z"}, "message": "optabs.c (expand_vector_binop, [...]): Don't assume GET_MODE_UNIT_SIZE (mode) == UNITS_PER_WORD.\n\ngcc:\n\t* optabs.c (expand_vector_binop, expand_vector_unop): Don't assume\n\tGET_MODE_UNIT_SIZE (mode) == UNITS_PER_WORD.\ngcc/testsuite:\n\t* gcc.c-torture/execute/simd-2.c: New test.\n\nFrom-SVN: r54994", "tree": {"sha": "c2db4cd8de7d2c7b7267d32f1bb7a124d815bb5a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c2db4cd8de7d2c7b7267d32f1bb7a124d815bb5a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9881adffaa5ceb049055fd7e3da9efab4dde32b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9881adffaa5ceb049055fd7e3da9efab4dde32b1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9881adffaa5ceb049055fd7e3da9efab4dde32b1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9881adffaa5ceb049055fd7e3da9efab4dde32b1/comments", "author": null, "committer": null, "parents": [{"sha": "4de1b7a90705e2633e046feec8523116f564db3d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4de1b7a90705e2633e046feec8523116f564db3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4de1b7a90705e2633e046feec8523116f564db3d"}], "stats": {"total": 78, "additions": 70, "deletions": 8}, "files": [{"sha": "735d56ff00247f68d4a6bf44c603715ccbe886f9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9881adffaa5ceb049055fd7e3da9efab4dde32b1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9881adffaa5ceb049055fd7e3da9efab4dde32b1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9881adffaa5ceb049055fd7e3da9efab4dde32b1", "patch": "@@ -1,4 +1,7 @@\n-Tue Jun 25 20:59:56 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+Tue Jun 25 21:51:13 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* optabs.c (expand_vector_binop, expand_vector_unop): Don't assume\n+\tGET_MODE_UNIT_SIZE (mode) == UNITS_PER_WORD.\n \n \t* config/sh/lib1funcs.asm (udivdi3): Make first divide step \n \tproduce a 32 bit result before normalization, then normalize with a"}, {"sha": "d3568b2998e72c14f506de78981b8a0d10d3a882", "filename": "gcc/optabs.c", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9881adffaa5ceb049055fd7e3da9efab4dde32b1/gcc%2Foptabs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9881adffaa5ceb049055fd7e3da9efab4dde32b1/gcc%2Foptabs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Foptabs.c?ref=9881adffaa5ceb049055fd7e3da9efab4dde32b1", "patch": "@@ -1924,13 +1924,14 @@ expand_vector_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n      enum optab_methods methods;\n {\n   enum machine_mode submode;\n-  int elts, i;\n+  int elts, subsize, i;\n   rtx t, a, b, res, seq;\n   enum mode_class class;\n \n   class = GET_MODE_CLASS (mode);\n \n   submode = GET_MODE_INNER (mode);\n+  subsize = GET_MODE_UNIT_SIZE (mode);\n   elts = GET_MODE_NUNITS (mode);\n \n   if (!target)\n@@ -1951,11 +1952,11 @@ expand_vector_binop (mode, binoptab, op0, op1, target, unsignedp, methods)\n       for (i = 0; i < elts; ++i)\n \t{\n \t  t = simplify_gen_subreg (submode, target, mode,\n-\t\t\t\t   i * UNITS_PER_WORD);\n+\t\t\t\t   i * subsize);\n \t  a = simplify_gen_subreg (submode, op0, mode,\n-\t\t\t\t   i * UNITS_PER_WORD);\n+\t\t\t\t   i * subsize);\n \t  b = simplify_gen_subreg (submode, op1, mode,\n-\t\t\t\t   i * UNITS_PER_WORD);\n+\t\t\t\t   i * subsize);\n \n \t  if (binoptab->code == DIV)\n \t    {\n@@ -1999,10 +2000,11 @@ expand_vector_unop (mode, unoptab, op0, target, unsignedp)\n      int unsignedp;\n {\n   enum machine_mode submode;\n-  int elts, i;\n+  int elts, subsize, i;\n   rtx t, a, res, seq;\n \n   submode = GET_MODE_INNER (mode);\n+  subsize = GET_MODE_UNIT_SIZE (mode);\n   elts = GET_MODE_NUNITS (mode);\n \n   if (!target)\n@@ -2016,8 +2018,8 @@ expand_vector_unop (mode, unoptab, op0, target, unsignedp)\n \n   for (i = 0; i < elts; ++i)\n     {\n-      t = simplify_gen_subreg (submode, target, mode, i * UNITS_PER_WORD);\n-      a = simplify_gen_subreg (submode, op0, mode, i * UNITS_PER_WORD);\n+      t = simplify_gen_subreg (submode, target, mode, i * subsize);\n+      a = simplify_gen_subreg (submode, op0, mode, i * subsize);\n \n       res = expand_unop (submode, unoptab, a, t, unsignedp);\n "}, {"sha": "dacb054b92467d1b4bf294a9bd3e451b47cc82d2", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9881adffaa5ceb049055fd7e3da9efab4dde32b1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9881adffaa5ceb049055fd7e3da9efab4dde32b1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9881adffaa5ceb049055fd7e3da9efab4dde32b1", "patch": "@@ -1,3 +1,7 @@\n+Tue Jun 25 21:50:38 2002  J\"orn Rennecke <joern.rennecke@superh.com>\n+\n+\t* gcc.c-torture/execute/simd-2.c: New test.\n+\n 2002-06-25  Neil Booth  <neil@daikokuya.co.uk>\n \n \t* gcc.dg/cpp/mi7.c, gcc.dg/cpp/mi7a.h, gcc.dg/cpp/mi7b.h,"}, {"sha": "258477ec2eca76d6d67cec60213464bbfa55f76e", "filename": "gcc/testsuite/gcc.c-torture/execute/simd-2.c", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9881adffaa5ceb049055fd7e3da9efab4dde32b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9881adffaa5ceb049055fd7e3da9efab4dde32b1/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fsimd-2.c?ref=9881adffaa5ceb049055fd7e3da9efab4dde32b1", "patch": "@@ -0,0 +1,53 @@\n+/* \n+   Purpose: Test generic SIMD support, V8HImode.  This test should work\n+   regardless of if the target has SIMD instructions.\n+*/\n+\n+typedef int __attribute__((mode(V8HI))) vecint;\n+\n+vecint i = { 150, 100, 150, 200 };\n+vecint j = { 10, 13, 20, 30 };\n+vecint k;\n+\n+union {\n+  vecint v;\n+  short i[8];\n+} res;\n+\n+/* This should go away once we can use == and != on vector types.  */\n+void\n+verify (int a1, int a2, int a3, int a4,\n+\tint b1, int b2, int b3, int b4)\n+{\n+  if (a1 != b1\n+      || a2 != b2\n+      || a3 != b3\n+      || a4 != b4)\n+    abort ();\n+}\n+\n+int\n+main ()\n+{\n+  k = i + j;\n+  res.v = k;\n+\n+  verify (res.i[0], res.i[1], res.i[2], res.i[3], 160, 113, 170, 230);\n+\n+  k = i * j;\n+  res.v = k;\n+\n+  verify (res.i[0], res.i[1], res.i[2], res.i[3], 1500, 1300, 3000, 6000);\n+\n+  k = i / j;\n+  res.v = k;\n+\n+  verify (res.i[0], res.i[1], res.i[2], res.i[3], 15, 7, 7, 6);\n+\n+  k = -i;\n+  res.v = k;\n+  verify (res.i[0], res.i[1], res.i[2], res.i[3],\n+\t  -150, -100, -150, -200);\n+\n+  exit (0);\n+}"}]}