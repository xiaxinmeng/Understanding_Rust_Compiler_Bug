{"sha": "206048bd415aa4a985b6a2929b91bb86962f468f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjA2MDQ4YmQ0MTVhYTRhOTg1YjZhMjkyOWI5MWJiODY5NjJmNDY4Zg==", "commit": {"author": {"name": "Volker Reichelt", "email": "reichelt@igpm.rwth-aachen.de", "date": "2005-07-28T16:30:00Z"}, "committer": {"name": "Volker Reichelt", "email": "reichelt@gcc.gnu.org", "date": "2005-07-28T16:30:00Z"}, "message": "builtins.c: Fix comment typo(s).\n\n\t* builtins.c: Fix comment typo(s).\n\t* genautomata.c: Likewise.\n\t* gimplify.c: Likewise.\n\t* tree-dfa.c: Likewise.\n\t* tree-flow-inline.h: Likewise.\n\t* tree-into-ssa.c: Likewise.\n\t* tree-ssa-alias.c: Likewise.\n\t* tree-ssa-ccp.c: Likewise.\n\t* tree-ssa-copy.c: Likewise.\n\t* tree-ssa-dce.c: Likewise.\n\t* tree-ssa-dom.c: Likewise.\n\t* tree-ssa-operands.c: Likewise.\n\t* tree-tailcall.c: Likewise.\n\t* tree-vectorizer.c: Likewise.\n\t* tree-vrp.c: Likewise.\n\t* tree.c: Likewise.\n\nFrom-SVN: r102491", "tree": {"sha": "2ed1920be939f29875e5f270976036d79e5714a2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2ed1920be939f29875e5f270976036d79e5714a2"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/206048bd415aa4a985b6a2929b91bb86962f468f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206048bd415aa4a985b6a2929b91bb86962f468f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/206048bd415aa4a985b6a2929b91bb86962f468f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/206048bd415aa4a985b6a2929b91bb86962f468f/comments", "author": null, "committer": null, "parents": [{"sha": "c98718390719e6c7e7ded4b6c74abb72cab47022", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c98718390719e6c7e7ded4b6c74abb72cab47022", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c98718390719e6c7e7ded4b6c74abb72cab47022"}], "stats": {"total": 84, "additions": 52, "deletions": 32}, "files": [{"sha": "25772a9f6a6d3c7fbf20c522a806012151d1344b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -1,3 +1,22 @@\n+2005-07-28  Volker Reichelt  <reichelt@igpm.rwth-aachen.de>\n+\n+\t* builtins.c: Fix comment typo(s).\n+\t* genautomata.c: Likewise.\n+\t* gimplify.c: Likewise.\n+\t* tree-dfa.c: Likewise.\n+\t* tree-flow-inline.h: Likewise.\n+\t* tree-into-ssa.c: Likewise.\n+\t* tree-ssa-alias.c: Likewise.\n+\t* tree-ssa-ccp.c: Likewise.\n+\t* tree-ssa-copy.c: Likewise.\n+\t* tree-ssa-dce.c: Likewise.\n+\t* tree-ssa-dom.c: Likewise.\n+\t* tree-ssa-operands.c: Likewise.\n+\t* tree-tailcall.c: Likewise.\n+\t* tree-vectorizer.c: Likewise.\n+\t* tree-vrp.c: Likewise.\n+\t* tree.c: Likewise.\n+\n 2005-07-28  Jeff Law  <law@redhat.com>\n \n         * tree-vrp.c (test_for_singularity): Extracted from  ..."}, {"sha": "bd187c18356b7b0a97c9d6907e7213eca7794d30", "filename": "gcc/builtins.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -431,7 +431,7 @@ c_readstr (const char *str, enum machine_mode mode)\n }\n \n /* Cast a target constant CST to target CHAR and if that value fits into\n-   host char type, return zero and put that value into variable pointed by\n+   host char type, return zero and put that value into variable pointed to by\n    P.  */\n \n static int"}, {"sha": "e39d32727a9564ffd27d5f9074f9761b99b5f9d2", "filename": "gcc/genautomata.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Fgenautomata.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Fgenautomata.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgenautomata.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -7632,7 +7632,7 @@ output_state_ainsn_table (state_ainsn_table_t tab, char *table_name,\n }\n \n /* The following function adds vector with length VECT_LENGTH and\n-   elements pointed by VECT to table TAB as its line with number\n+   elements pointed to by VECT to table TAB as its line with number\n    VECT_NUM.  */\n static void\n add_vect (state_ainsn_table_t tab, int vect_num, vect_el_t *vect,"}, {"sha": "16a6aae69de9e03a87e6b1bc5269ab1c5f32c3b9", "filename": "gcc/gimplify.c", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -236,7 +236,7 @@ append_to_statement_list_1 (tree t, tree *list_p)\n   tsi_link_after (&i, t, TSI_CONTINUE_LINKING);\n }\n \n-/* Add T to the end of the list container pointed by LIST_P.\n+/* Add T to the end of the list container pointed to by LIST_P.\n    If T is an expression with no effects, it is ignored.  */\n \n void\n@@ -1409,7 +1409,7 @@ gimplify_conversion (tree *expr_p)\n }\n \n /* Gimplify the COMPONENT_REF, ARRAY_REF, REALPART_EXPR or IMAGPART_EXPR\n-   node pointed by EXPR_P.\n+   node pointed to by EXPR_P.\n \n       compound_lval\n \t      : min_lval '[' val ']'\n@@ -1593,7 +1593,8 @@ gimplify_compound_lval (tree *expr_p, tree *pre_p,\n   return ret;\n }\n \n-/*  Gimplify the self modifying expression pointed by EXPR_P (++, --, +=, -=).\n+/*  Gimplify the self modifying expression pointed to by EXPR_P\n+    (++, --, +=, -=).\n \n     PRE_P points to the list where side effects that must happen before\n \t*EXPR_P should be stored.\n@@ -1721,7 +1722,7 @@ gimplify_arg (tree *expr_p, tree *pre_p)\n   return gimplify_expr (expr_p, pre_p, NULL, test, fb);\n }\n \n-/* Gimplify the CALL_EXPR node pointed by EXPR_P.  PRE_P points to the\n+/* Gimplify the CALL_EXPR node pointed to by EXPR_P.  PRE_P points to the\n    list where side effects that must happen before *EXPR_P should be stored.\n    WANT_VALUE is true if the result of the call is desired.  */\n \n@@ -2111,7 +2112,7 @@ gimple_boolify (tree expr)\n     }\n }\n \n-/*  Convert the conditional expression pointed by EXPR_P '(p) ? a : b;'\n+/*  Convert the conditional expression pointed to by EXPR_P '(p) ? a : b;'\n     into\n \n     if (p)\t\t\tif (p)\n@@ -3109,7 +3110,7 @@ gimplify_modify_expr_complex_part (tree *expr_p, tree *pre_p, bool want_value)\n   return GS_ALL_DONE;\n }\n \n-/* Gimplify the MODIFY_EXPR node pointed by EXPR_P.\n+/* Gimplify the MODIFY_EXPR node pointed to by EXPR_P.\n \n       modify_expr\n \t      : varname '=' rhs\n@@ -3372,7 +3373,7 @@ gimplify_save_expr (tree *expr_p, tree *pre_p, tree *post_p)\n   return ret;\n }\n \n-/*  Re-write the ADDR_EXPR node pointed by EXPR_P\n+/*  Re-write the ADDR_EXPR node pointed to by EXPR_P\n \n       unary_expr\n \t      : ...\n@@ -3868,7 +3869,7 @@ gimplify_to_stmt_list (tree *stmt_p)\n }\n \n \n-/*  Gimplifies the expression tree pointed by EXPR_P.  Return 0 if\n+/*  Gimplifies the expression tree pointed to by EXPR_P.  Return 0 if\n     gimplification failed.\n \n     PRE_P points to the list where side effects that must happen before\n@@ -4702,7 +4703,7 @@ check_pointer_types_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n }\n #endif\n \n-/* Gimplify the body of statements pointed by BODY_P.  FNDECL is the\n+/* Gimplify the body of statements pointed to by BODY_P.  FNDECL is the\n    function decl containing BODY.  */\n \n void"}, {"sha": "7504d790f747e5828dcbc17ff1a165c807cd3ec4", "filename": "gcc/tree-dfa.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-dfa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-dfa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-dfa.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -463,7 +463,7 @@ debug_dfa_stats (void)\n }\n \n \n-/* Collect DFA statistics and store them in the structure pointed by\n+/* Collect DFA statistics and store them in the structure pointed to by\n    DFA_STATS_P.  */\n \n static void"}, {"sha": "299e1b51240e73cdd1bd7d699a169000db5cf862", "filename": "gcc/tree-flow-inline.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-flow-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-flow-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow-inline.h?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -56,7 +56,7 @@ end_htab_p (htab_iterator *hti)\n   return false;\n }\n \n-/* Advance the hashtable iterator pointed by HTI to the next element of the\n+/* Advance the hashtable iterator pointed to by HTI to the next element of the\n    hashtable.  */\n \n static inline void *\n@@ -321,7 +321,7 @@ link_imm_use (ssa_use_operand_t *linknode, tree def)\n     }\n }\n \n-/* Set the value of a use pointed by USE to VAL.  */\n+/* Set the value of a use pointed to by USE to VAL.  */\n static inline void\n set_ssa_use_from_ptr (use_operand_p use, tree val)\n {"}, {"sha": "97ddc73ab54cbfe1c3e362ba9e64ccfc857ff513", "filename": "gcc/tree-into-ssa.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-into-ssa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-into-ssa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-into-ssa.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -889,7 +889,7 @@ insert_phi_nodes (bitmap *dfs)\n \n /* Register DEF (an SSA_NAME) to be a new definition for its underlying\n    variable (SSA_NAME_VAR (DEF)) and push VAR's current reaching definition\n-   into the stack pointed by BLOCK_DEFS_P.  */\n+   into the stack pointed to by BLOCK_DEFS_P.  */\n \n void\n register_new_def (tree def, VEC(tree,heap) **block_defs_p)\n@@ -1486,7 +1486,7 @@ rewrite_update_stmt (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n }\n \n \n-/* Replace the operand pointed by USE_P with USE's current reaching\n+/* Replace the operand pointed to by USE_P with USE's current reaching\n    definition.  */\n \n static inline void"}, {"sha": "3b08b23de963d3b3423fb583bd2743022a9c9395", "filename": "gcc/tree-ssa-alias.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-ssa-alias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-ssa-alias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-alias.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -2128,7 +2128,7 @@ dump_points_to_info (FILE *file)\n }\n \n \n-/* Dump points-to info pointed by PTO into STDERR.  */\n+/* Dump points-to info pointed to by PTO into STDERR.  */\n \n void\n debug_points_to_info (void)"}, {"sha": "3edf3e7408b34cbe62f2a571e6d73b5fa9eaf63a", "filename": "gcc/tree-ssa-ccp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-ssa-ccp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-ssa-ccp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-ccp.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -2232,7 +2232,7 @@ ccp_fold_builtin (tree stmt, tree fn)\n }\n \n \n-/* Fold the statement pointed by STMT_P.  In some cases, this function may\n+/* Fold the statement pointed to by STMT_P.  In some cases, this function may\n    replace the whole statement with a new one.  Returns true iff folding\n    makes any changes.  */\n "}, {"sha": "d94b1b0f22e998d91c3a28e11b48e0ae72688ad5", "filename": "gcc/tree-ssa-copy.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-ssa-copy.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-ssa-copy.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-copy.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -267,7 +267,7 @@ replace_exp_1 (use_operand_p op_p, tree val,\n \n \n /* Propagate the value VAL (assumed to be a constant or another SSA_NAME)\n-   into the operand pointed by OP_P.\n+   into the operand pointed to by OP_P.\n \n    Use this version for const/copy propagation as it will perform additional\n    checks to ensure validity of the const/copy propagation.  */\n@@ -280,7 +280,7 @@ propagate_value (use_operand_p op_p, tree val)\n \n \n /* Propagate the value VAL (assumed to be a constant or another SSA_NAME)\n-   into the tree pointed by OP_P.\n+   into the tree pointed to by OP_P.\n \n    Use this version for const/copy propagation when SSA operands are not\n    available.  It will perform the additional checks to ensure validity of"}, {"sha": "8902d2a2e0a398153013feaeb998018ce42a6f17", "filename": "gcc/tree-ssa-dce.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-ssa-dce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-ssa-dce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dce.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -707,7 +707,7 @@ remove_dead_phis (basic_block bb)\n     }\n }\n \f\n-/* Remove dead statement pointed by iterator I.  Receives the basic block BB\n+/* Remove dead statement pointed to by iterator I.  Receives the basic block BB\n    containing I so that we don't have to look it up.  */\n \n static void"}, {"sha": "691887ce40f16d141f6cadaefe66169845303b7b", "filename": "gcc/tree-ssa-dom.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-ssa-dom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-ssa-dom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-dom.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -884,7 +884,7 @@ dom_opt_initialize_block (struct dom_walk_data *walk_data ATTRIBUTE_UNUSED,\n }\n \n /* Given an expression EXPR (a relational expression or a statement), \n-   initialize the hash table element pointed by by ELEMENT.  */\n+   initialize the hash table element pointed to by ELEMENT.  */\n \n static void\n initialize_hash_element (tree expr, tree lhs, struct expr_hash_elt *element)\n@@ -2851,7 +2851,7 @@ cprop_into_stmt (tree stmt)\n }\n \n \n-/* Optimize the statement pointed by iterator SI.\n+/* Optimize the statement pointed to by iterator SI.\n    \n    We try to perform some simplistic global redundancy elimination and\n    constant propagation:\n@@ -3061,7 +3061,7 @@ update_rhs_and_lookup_avail_expr (tree stmt, tree new_rhs, bool insert)\n    NULL_TREE.\n \n    Also, when an expression is first inserted in the AVAIL_EXPRS table, it\n-   is also added to the stack pointed by BLOCK_AVAIL_EXPRS_P, so that they\n+   is also added to the stack pointed to by BLOCK_AVAIL_EXPRS_P, so that they\n    can be removed when we finish processing this block and its children.\n \n    NOTE: This function assumes that STMT is a MODIFY_EXPR node that"}, {"sha": "9fa85ad264050877c2802974a2825c5172baa988", "filename": "gcc/tree-ssa-operands.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-ssa-operands.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-ssa-operands.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-operands.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -1207,9 +1207,9 @@ swap_tree_operands (tree stmt, tree *exp0, tree *exp1)\n }\n \n \n-/* Recursively scan the expression pointed by EXPR_P in statement referred to\n-   by INFO.  FLAGS is one of the OPF_* constants modifying how to interpret the\n-   operands found.  */\n+/* Recursively scan the expression pointed to by EXPR_P in statement referred\n+   to by INFO.  FLAGS is one of the OPF_* constants modifying how to interpret\n+   the operands found.  */\n \n static void\n get_expr_operands (tree stmt, tree *expr_p, int flags)"}, {"sha": "7d510af778225cb7645d945976a2d59c09f1467f", "filename": "gcc/tree-tailcall.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-tailcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-tailcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-tailcall.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -192,7 +192,7 @@ suitable_for_tail_call_opt_p (void)\n }\n \n /* Checks whether the expression EXPR in stmt AT is independent of the\n-   statement pointed by BSI (in a sense that we already know EXPR's value\n+   statement pointed to by BSI (in a sense that we already know EXPR's value\n    at BSI).  We use the fact that we are only called from the chain of\n    basic blocks that have only single successor.  Returns the expression\n    containing the value of EXPR at BSI.  */"}, {"sha": "4bdb552fa848dbf718ff6755191f8e2bcd7fa91b", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -91,7 +91,7 @@ Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA\n \n    To vectorize stmt S2, the vectorizer first finds the stmt that defines\n    the operand 'b' (S1), and gets the relevant vector def 'vb' from the\n-   vector stmt VS1 pointed by STMT_VINFO_VEC_STMT (stmt_info (S1)). The\n+   vector stmt VS1 pointed to by STMT_VINFO_VEC_STMT (stmt_info (S1)). The\n    resulting sequence would be:\n \n    VS1: vb = px[i];"}, {"sha": "4afe4151a4558af4d2980101c04579404f7450a0", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -2239,7 +2239,7 @@ register_new_assert_for (tree name,\n \n \n /* Try to register an edge assertion for SSA name NAME on edge E for\n-   the conditional jump pointed by SI.  Return true if an assertion\n+   the conditional jump pointed to by SI.  Return true if an assertion\n    for NAME could be registered.  */\n \n static bool"}, {"sha": "39e2f1f9e3c3e463461427857bb99aeffde12088", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/206048bd415aa4a985b6a2929b91bb86962f468f/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=206048bd415aa4a985b6a2929b91bb86962f468f", "patch": "@@ -883,7 +883,7 @@ cst_and_fits_in_hwi (tree x)\n }\n \n /* Return a new VECTOR_CST node whose type is TYPE and whose values\n-   are in a list pointed by VALS.  */\n+   are in a list pointed to by VALS.  */\n \n tree\n build_vector (tree type, tree vals)\n@@ -926,7 +926,7 @@ build_vector_from_ctor (tree type, VEC(constructor_elt,gc) *v)\n }\n \n /* Return a new CONSTRUCTOR node whose type is TYPE and whose values\n-   are in the VEC pointed by VALS.  */\n+   are in the VEC pointed to by VALS.  */\n tree\n build_constructor (tree type, VEC(constructor_elt,gc) *vals)\n {"}]}