{"sha": "bedb7f045f3bc4ccf17f4b58f840c93acb821a3f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVkYjdmMDQ1ZjNiYzRjY2YxN2Y0YjU4Zjg0MGM5M2FjYjgyMWEzZg==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-11-14T08:14:16Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-11-14T08:14:16Z"}, "message": "c-parser.c (c_parser_omp_context_selector): Don't require score argument to fit into shwi, just to be INTEGER_CST.\n\n\t* c-parser.c (c_parser_omp_context_selector): Don't require score\n\targument to fit into shwi, just to be INTEGER_CST.  Diagnose\n\tnegative score.\n\n\t* parser.c (cp_parser_omp_context_selector): Don't require score\n\targument to fit into shwi, just to be INTEGER_CST.  Diagnose\n\tnegative score.\n\t* pt.c (tsubst_attribute): Likewise.\n\n\t* c-c++-common/gomp/declare-variant-2.c: Add test for non-integral\n\tscore and for negative score.\n\t* c-c++-common/gomp/declare-variant-3.c: Add test for zero score.\n\t* g++.dg/gomp/declare-variant-8.C: Add test for negative and zero\n\tscores.\n\nFrom-SVN: r278204", "tree": {"sha": "fcccc411bdf6e64e0876f3eeeb76ff8b773b0243", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fcccc411bdf6e64e0876f3eeeb76ff8b773b0243"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d0ec7c935f0c961b13f75c906b8621e35ce1ace5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0ec7c935f0c961b13f75c906b8621e35ce1ace5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0ec7c935f0c961b13f75c906b8621e35ce1ace5"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "c19cf2fae3292527253c71f1c8a1af6e43c552ea", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=bedb7f045f3bc4ccf17f4b58f840c93acb821a3f", "patch": "@@ -1,5 +1,9 @@\n 2019-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-parser.c (c_parser_omp_context_selector): Don't require score\n+\targument to fit into shwi, just to be INTEGER_CST.  Diagnose\n+\tnegative score.\n+\n \t* c-parser.c (c_parser_omp_context_selector): Rename\n \tCTX_PROPERTY_IDLIST to CTX_PROPERTY_NAME_LIST, add CTX_PROPERTY_ID.\n \tUse CTX_PROPERTY_ID for atomic_default_mem_order, only allow a single"}, {"sha": "5e30a7f19168bb11f85b93dfee7ca7d6c23f7c01", "filename": "gcc/c/c-parser.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Fc%2Fc-parser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Fc%2Fc-parser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-parser.c?ref=bedb7f045f3bc4ccf17f4b58f840c93acb821a3f", "patch": "@@ -19823,9 +19823,12 @@ c_parser_omp_context_selector (c_parser *parser, tree set, tree parms)\n \t\t  mark_exp_read (score);\n \t\t  score = c_fully_fold (score, false, NULL);\n \t\t  if (!INTEGRAL_TYPE_P (TREE_TYPE (score))\n-\t\t      || !tree_fits_shwi_p (score))\n+\t\t      || TREE_CODE (score) != INTEGER_CST)\n \t\t    error_at (token->location, \"score argument must be \"\n \t\t\t      \"constant integer expression\");\n+\t\t  else if (tree_int_cst_sgn (score) < 0)\n+\t\t    error_at (token->location, \"score argument must be \"\n+\t\t\t      \"non-negative\");\n \t\t  else\n \t\t    properties = tree_cons (get_identifier (\" score\"),\n \t\t\t\t\t    score, properties);"}, {"sha": "c836859a6f516b2a7584718ca3f8e35faf2c1bc5", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=bedb7f045f3bc4ccf17f4b58f840c93acb821a3f", "patch": "@@ -1,5 +1,10 @@\n 2019-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* parser.c (cp_parser_omp_context_selector): Don't require score\n+\targument to fit into shwi, just to be INTEGER_CST.  Diagnose\n+\tnegative score.\n+\t* pt.c (tsubst_attribute): Likewise.\n+\n \t* parser.c (cp_parser_omp_context_selector): Rename\n \tCTX_PROPERTY_IDLIST to CTX_PROPERTY_NAME_LIST, add CTX_PROPERTY_ID.\n \tUse CTX_PROPERTY_ID for atomic_default_mem_order, only allow a single"}, {"sha": "c473e7fd92f2e956d276788e330f14553e9ab6cc", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=bedb7f045f3bc4ccf17f4b58f840c93acb821a3f", "patch": "@@ -40565,11 +40565,16 @@ cp_parser_omp_context_selector (cp_parser *parser, tree set, bool has_parms_p)\n \t\t  if (score != error_mark_node)\n \t\t    {\n \t\t      score = fold_non_dependent_expr (score);\n-\t\t      if (!value_dependent_expression_p (score)\n-\t\t\t  && (!INTEGRAL_TYPE_P (TREE_TYPE (score))\n-\t\t\t      || !tree_fits_shwi_p (score)))\n+\t\t      if (value_dependent_expression_p (score))\n+\t\t\tproperties = tree_cons (get_identifier (\" score\"),\n+\t\t\t\t\t\tscore, properties);\n+\t\t      else if (!INTEGRAL_TYPE_P (TREE_TYPE (score))\n+\t\t\t       || TREE_CODE (score) != INTEGER_CST)\n \t\t\terror_at (token->location, \"score argument must be \"\n \t\t\t\t  \"constant integer expression\");\n+\t\t      else if (tree_int_cst_sgn (score) < 0)\n+\t\t\terror_at (token->location, \"score argument must be \"\n+\t\t\t\t  \"non-negative\");\n \t\t      else\n \t\t\tproperties = tree_cons (get_identifier (\" score\"),\n \t\t\t\t\t\tscore, properties);"}, {"sha": "84db3f9c663683b9c637d88f00b9695401069358", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=bedb7f045f3bc4ccf17f4b58f840c93acb821a3f", "patch": "@@ -11172,7 +11172,9 @@ tsubst_attribute (tree t, tree *decl_p, tree args,\n \t\t\tv = tsubst_expr (v, args, complain, in_decl, true);\n \t\t\tv = fold_non_dependent_expr (v);\n \t\t\tif (!INTEGRAL_TYPE_P (TREE_TYPE (v))\n-\t\t\t    || !tree_fits_shwi_p (v))\n+\t\t\t    || (TREE_PURPOSE (t3) == score\n+\t\t\t\t? TREE_CODE (v) != INTEGER_CST\n+\t\t\t\t: !tree_fits_shwi_p (v)))\n \t\t\t  {\n \t\t\t    location_t loc\n \t\t\t      = cp_expr_loc_or_loc (TREE_VALUE (t3),\n@@ -11189,6 +11191,16 @@ tsubst_attribute (tree t, tree *decl_p, tree args,\n \t\t\t\t\t     \"integer expression\");\n \t\t\t    return NULL_TREE;\n \t\t\t  }\n+\t\t\telse if (TREE_PURPOSE (t3) == score\n+\t\t\t\t && tree_int_cst_sgn (v) < 0)\n+\t\t\t  {\n+\t\t\t    location_t loc\n+\t\t\t      = cp_expr_loc_or_loc (TREE_VALUE (t3),\n+\t\t\t\t\t\t    match_loc);\n+\t\t\t    error_at (loc, \"score argument must be \"\n+\t\t\t\t\t   \"non-negative\");\n+\t\t\t    return NULL_TREE;\n+\t\t\t  }\n \t\t\tTREE_VALUE (t3) = v;\n \t\t      }\n \t\t}"}, {"sha": "b94cac2b50bf04531229be54e72c9a585c60145d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=bedb7f045f3bc4ccf17f4b58f840c93acb821a3f", "patch": "@@ -1,5 +1,11 @@\n 2019-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n+\t* c-c++-common/gomp/declare-variant-2.c: Add test for non-integral\n+\tscore and for negative score.\n+\t* c-c++-common/gomp/declare-variant-3.c: Add test for zero score.\n+\t* g++.dg/gomp/declare-variant-8.C: Add test for negative and zero\n+\tscores.\n+\n \t* c-c++-common/gomp/declare-variant-3.c: Add testcase for vendor nvidia.\n \n \t* c-c++-common/gomp/declare-variant-2.c: Adjust expected diagnostics,"}, {"sha": "5554059bd60c100ce7818e1217f7af609bbc6ced", "filename": "gcc/testsuite/c-c++-common/gomp/declare-variant-2.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-2.c?ref=bedb7f045f3bc4ccf17f4b58f840c93acb821a3f", "patch": "@@ -153,3 +153,7 @@ void f74 (void);\n void f75 (void);\n #pragma omp declare variant (f1) match(implementation={atomic_default_mem_order(\"relaxed\")})\t/* { dg-error \"expected identifier before string constant\" } */\n void f76 (void);\n+#pragma omp declare variant (f1) match(user={condition(score(&f76):1)})\t/* { dg-error \"score argument must be constant integer expression\" \"\" { target { ! c++98_only } } } */\n+void f77 (void);\t\t\t\t\t\t\t/* { dg-error \"cannot appear in a constant-expression\" \"\" { target c++98_only } .-1 } */\n+#pragma omp declare variant (f1) match(user={condition(score(-130):1)})\t/* { dg-error \"score argument must be non-negative\" } */\n+void f78 (void);"}, {"sha": "f5d7797f45840889375a3756b78ac0200e90767f", "filename": "gcc/testsuite/c-c++-common/gomp/declare-variant-3.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fgomp%2Fdeclare-variant-3.c?ref=bedb7f045f3bc4ccf17f4b58f840c93acb821a3f", "patch": "@@ -147,3 +147,5 @@ void f76 (void);\n void f77 (void);\n #pragma omp declare variant (f13) match (implementation={vendor(nvidia)})\n void f78 (void);\n+#pragma omp declare variant (f13) match (user={condition(score(0):0)})\n+void f79 (void);"}, {"sha": "b5da619dd033e4820bb5c9f4d23f9579508db429", "filename": "gcc/testsuite/g++.dg/gomp/declare-variant-8.C", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-variant-8.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bedb7f045f3bc4ccf17f4b58f840c93acb821a3f/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-variant-8.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fgomp%2Fdeclare-variant-8.C?ref=bedb7f045f3bc4ccf17f4b58f840c93acb821a3f", "patch": "@@ -9,10 +9,20 @@ void f03 ();\n #pragma omp declare variant (f03) match (user={condition(score((T) 1):1)})\t// { dg-error \"score argument must be constant integer expression\" }\n template <typename T>\n void f04 ();\n+void f05 ();\n+#pragma omp declare variant (f05) match (user={condition(score(N):1)})\t// { dg-error \"score argument must be non-negative\" }\n+template <int N>\n+void f06 ();\n+void f07 ();\n+#pragma omp declare variant (f05) match (user={condition(score(N):1)})\n+template <int N>\n+void f08 ();\n \n void\n test ()\n {\n   f02 <double> ();\n   f04 <float> ();\n+  f06 <-1> ();\n+  f08 <0> ();\n }"}]}