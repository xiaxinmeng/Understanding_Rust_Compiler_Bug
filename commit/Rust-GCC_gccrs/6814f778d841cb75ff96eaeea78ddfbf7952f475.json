{"sha": "6814f778d841cb75ff96eaeea78ddfbf7952f475", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgxNGY3NzhkODQxY2I3NWZmOTZlYWVlYTc4ZGRmYmY3OTUyZjQ3NQ==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2012-03-16T14:49:48Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2012-03-16T14:49:48Z"}, "message": "fold-const.c (native_interpret_expr): Also support POINTER_TYPE and REFERENCE_TYPE interpretations.\n\n2012-03-16  Richard Guenther  <rguenther@suse.de>\n\n\t* fold-const.c (native_interpret_expr): Also support POINTER_TYPE\n\tand REFERENCE_TYPE interpretations.\n\t(can_native_interpret_type_p): New function.\n\t(fold_ternary_loc): Use native encode/interpret to fold\n\tBIT_FIELD_REFs of constants.\n\nFrom-SVN: r185469", "tree": {"sha": "667889b647704b21f167fc57a211fa1ef2fc27f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/667889b647704b21f167fc57a211fa1ef2fc27f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6814f778d841cb75ff96eaeea78ddfbf7952f475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6814f778d841cb75ff96eaeea78ddfbf7952f475", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6814f778d841cb75ff96eaeea78ddfbf7952f475", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6814f778d841cb75ff96eaeea78ddfbf7952f475/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ada3df5081a4fb89ae83bce787fc9c949cdfc9ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ada3df5081a4fb89ae83bce787fc9c949cdfc9ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ada3df5081a4fb89ae83bce787fc9c949cdfc9ce"}], "stats": {"total": 65, "additions": 65, "deletions": 0}, "files": [{"sha": "7f14c962d85252e80993d4264263530edcc089b0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6814f778d841cb75ff96eaeea78ddfbf7952f475/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6814f778d841cb75ff96eaeea78ddfbf7952f475/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6814f778d841cb75ff96eaeea78ddfbf7952f475", "patch": "@@ -1,3 +1,11 @@\n+2012-03-16  Richard Guenther  <rguenther@suse.de>\n+\n+\t* fold-const.c (native_interpret_expr): Also support POINTER_TYPE\n+\tand REFERENCE_TYPE interpretations.\n+\t(can_native_interpret_type_p): New function.\n+\t(fold_ternary_loc): Use native encode/interpret to fold\n+\tBIT_FIELD_REFs of constants.\n+\n 2012-03-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR middle-end/52584"}, {"sha": "33b8dc83b8b9a589b76f5c5ef415ec5c7435972a", "filename": "gcc/fold-const.c", "status": "modified", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6814f778d841cb75ff96eaeea78ddfbf7952f475/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6814f778d841cb75ff96eaeea78ddfbf7952f475/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=6814f778d841cb75ff96eaeea78ddfbf7952f475", "patch": "@@ -7530,6 +7530,8 @@ native_interpret_expr (tree type, const unsigned char *ptr, int len)\n     case INTEGER_TYPE:\n     case ENUMERAL_TYPE:\n     case BOOLEAN_TYPE:\n+    case POINTER_TYPE:\n+    case REFERENCE_TYPE:\n       return native_interpret_int (type, ptr, len);\n \n     case REAL_TYPE:\n@@ -7546,6 +7548,27 @@ native_interpret_expr (tree type, const unsigned char *ptr, int len)\n     }\n }\n \n+/* Returns true if we can interpret the contents of a native encoding\n+   as TYPE.  */\n+\n+static bool\n+can_native_interpret_type_p (tree type)\n+{\n+  switch (TREE_CODE (type))\n+    {\n+    case INTEGER_TYPE:\n+    case ENUMERAL_TYPE:\n+    case BOOLEAN_TYPE:\n+    case POINTER_TYPE:\n+    case REFERENCE_TYPE:\n+    case REAL_TYPE:\n+    case COMPLEX_TYPE:\n+    case VECTOR_TYPE:\n+      return true;\n+    default:\n+      return false;\n+    }\n+}\n \n /* Fold a VIEW_CONVERT_EXPR of a constant expression EXPR to type\n    TYPE at compile-time.  If we're unable to perform the conversion\n@@ -13978,6 +14001,40 @@ fold_ternary_loc (location_t loc, enum tree_code code, tree type,\n \t  && integer_zerop (op2))\n \treturn fold_convert_loc (loc, type, arg0);\n \n+      /* On constants we can use native encode/interpret to constant\n+         fold (nearly) all BIT_FIELD_REFs.  */\n+      if (CONSTANT_CLASS_P (arg0)\n+\t  && can_native_interpret_type_p (type)\n+\t  && host_integerp (TYPE_SIZE_UNIT (TREE_TYPE (arg0)), 1)\n+\t  /* This limitation should not be necessary, we just need to\n+\t     round this up to mode size.  */\n+\t  && tree_low_cst (op1, 1) % BITS_PER_UNIT == 0\n+\t  /* Need bit-shifting of the buffer to relax the following.  */\n+\t  && tree_low_cst (op2, 1) % BITS_PER_UNIT == 0)\n+\t{\n+\t  unsigned HOST_WIDE_INT bitpos = tree_low_cst (op1, 2);\n+\t  unsigned HOST_WIDE_INT bitsize = tree_low_cst (op1, 1);\n+\t  unsigned HOST_WIDE_INT clen;\n+\t  clen = tree_low_cst (TYPE_SIZE_UNIT (TREE_TYPE (arg0)), 1);\n+\t  /* ???  We cannot tell native_encode_expr to start at\n+\t     some random byte only.  So limit us to a reasonable amount\n+\t     of work.  */\n+\t  if (clen <= 4096)\n+\t    {\n+\t      unsigned char *b = XALLOCAVEC (unsigned char, clen);\n+\t      unsigned HOST_WIDE_INT len = native_encode_expr (arg0, b, clen);\n+\t      if (len > 0\n+\t\t  && len * BITS_PER_UNIT >= bitpos + bitsize)\n+\t\t{\n+\t\t  tree v = native_interpret_expr (type,\n+\t\t\t\t\t\t  b + bitpos / BITS_PER_UNIT,\n+\t\t\t\t\t\t  bitsize / BITS_PER_UNIT);\n+\t\t  if (v)\n+\t\t    return v;\n+\t\t}\n+\t    }\n+\t}\n+\n       return NULL_TREE;\n \n     case FMA_EXPR:"}]}