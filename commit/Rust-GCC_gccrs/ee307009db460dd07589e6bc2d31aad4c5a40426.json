{"sha": "ee307009db460dd07589e6bc2d31aad4c5a40426", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWUzMDcwMDlkYjQ2MGRkMDc1ODllNmJjMmQzMWFhZDRjNWE0MDQyNg==", "commit": {"author": {"name": "Nathan Sidwell", "email": "nathan@codesourcery.com", "date": "2005-04-03T12:33:02Z"}, "committer": {"name": "Nathan Sidwell", "email": "nathan@gcc.gnu.org", "date": "2005-04-03T12:33:02Z"}, "message": "re PR c++/20723 (ICE in more_specialized_fn, more than one user-defined conversion \"srp<int>\" to \"ptr<int>\")\n\ncp:\n\tPR c++/20723\n\t* pt.c (more_specialized_fn): Member functions are unordered wrt\n\tnon-members.  Conversion operators are unordered wrt other\n\tfunctions.\ntestsuite:\n\tPR c++/20723\n\t* g++.dg/template/spec22.C: New.\n\t* g++.dg/template/spec23.C: New.\n\nFrom-SVN: r97489", "tree": {"sha": "84435f4c3075396a4fd35c2ffd666145ccc1525f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/84435f4c3075396a4fd35c2ffd666145ccc1525f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ee307009db460dd07589e6bc2d31aad4c5a40426", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee307009db460dd07589e6bc2d31aad4c5a40426", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee307009db460dd07589e6bc2d31aad4c5a40426", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee307009db460dd07589e6bc2d31aad4c5a40426/comments", "author": null, "committer": null, "parents": [{"sha": "00b28cb030eded609070d66ad864d6ce09261504", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/00b28cb030eded609070d66ad864d6ce09261504", "html_url": "https://github.com/Rust-GCC/gccrs/commit/00b28cb030eded609070d66ad864d6ce09261504"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "90a68926ecfbc8c8cdd79ebffca820db53c289a3", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee307009db460dd07589e6bc2d31aad4c5a40426/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee307009db460dd07589e6bc2d31aad4c5a40426/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ee307009db460dd07589e6bc2d31aad4c5a40426", "patch": "@@ -1,3 +1,10 @@\n+2005-04-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/20723\n+\t* pt.c (more_specialized_fn): Member functions are unordered wrt\n+\tnon-members.  Conversion operators are unordered wrt other\n+\tfunctions.\n+\n 2005-04-01  Nathan Sidwell  <nathan@codesourcery.com>\n \n \t* call.c (add_template_candidates_real): Remove length parameter"}, {"sha": "e8b219080a5b289be34412a207b433588c1100c5", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee307009db460dd07589e6bc2d31aad4c5a40426/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee307009db460dd07589e6bc2d31aad4c5a40426/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ee307009db460dd07589e6bc2d31aad4c5a40426", "patch": "@@ -10407,17 +10407,23 @@ more_specialized_fn (tree pat1, tree pat2, int len)\n   int better1 = 0;\n   int better2 = 0;\n \n+  /* If only one is a member function, they are unordered.  */\n+  if (DECL_FUNCTION_MEMBER_P (decl1) != DECL_FUNCTION_MEMBER_P (decl2))\n+    return 0;\n+  \n   /* Don't consider 'this' parameter.  */\n   if (DECL_NONSTATIC_MEMBER_FUNCTION_P (decl1))\n     args1 = TREE_CHAIN (args1);\n-  \n   if (DECL_NONSTATIC_MEMBER_FUNCTION_P (decl2))\n     args2 = TREE_CHAIN (args2);\n \n+  /* If only one is a conversion operator, they are unordered.  */\n+  if (DECL_CONV_FN_P (decl1) != DECL_CONV_FN_P (decl2))\n+    return 0;\n+  \n   /* Consider the return type for a conversion function */\n   if (DECL_CONV_FN_P (decl1))\n     {\n-      gcc_assert (DECL_CONV_FN_P (decl2));\n       args1 = tree_cons (NULL_TREE, TREE_TYPE (TREE_TYPE (decl1)), args1);\n       args2 = tree_cons (NULL_TREE, TREE_TYPE (TREE_TYPE (decl2)), args2);\n       len++;"}, {"sha": "7191f88e7df79807a0aeb4183919c98c84493a99", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee307009db460dd07589e6bc2d31aad4c5a40426/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee307009db460dd07589e6bc2d31aad4c5a40426/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ee307009db460dd07589e6bc2d31aad4c5a40426", "patch": "@@ -1,3 +1,9 @@\n+2005-04-03  Nathan Sidwell  <nathan@codesourcery.com>\n+\n+\tPR c++/20723\n+\t* g++.dg/template/spec22.C: New.\n+\t* g++.dg/template/spec23.C: New.\n+\n 2005-04-03  Dale Ranta  <dir@lanl.gov>\n             Francois-Xavier Coudert  <coudert@clipper.ens.fr>\n "}, {"sha": "e2d439c9252aa253240cfc20f137493f1f097cf0", "filename": "gcc/testsuite/g++.dg/template/spec22.C", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee307009db460dd07589e6bc2d31aad4c5a40426/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec22.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee307009db460dd07589e6bc2d31aad4c5a40426/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec22.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec22.C?ref=ee307009db460dd07589e6bc2d31aad4c5a40426", "patch": "@@ -0,0 +1,22 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 2 Apr 2005 <nathan@codesourcery.com>\n+\n+// PR 20723\n+// Origin: Andrew Pinski <pinskia@gcc.gnu.org>\n+//         Nathan Sidwell <nathan@gcc.gnu.org>\n+\n+template <typename T>\n+int operator+ (T const &, int); // { dg-error \"T = Foo\" \"\" }\n+\n+struct Foo \n+{\n+  template <typename T>\n+  int operator+ (T) const; // { dg-error \"T = int\" \"\" }\n+};\n+\n+int main ()\n+{\n+  Foo f;\n+\n+  return f + 0; // { dg-error \"ambiguous overload\" \"\" }\n+}"}, {"sha": "15618b10b515cf435a769876e0ca301a75db9adb", "filename": "gcc/testsuite/g++.dg/template/spec23.C", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ee307009db460dd07589e6bc2d31aad4c5a40426/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ee307009db460dd07589e6bc2d31aad4c5a40426/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Ftemplate%2Fspec23.C?ref=ee307009db460dd07589e6bc2d31aad4c5a40426", "patch": "@@ -0,0 +1,25 @@\n+// Copyright (C) 2005 Free Software Foundation, Inc.\n+// Contributed by Nathan Sidwell 2 Apr 2005 <nathan@codesourcery.com>\n+\n+// PR 20723\n+// Origin: Andrew Pinski <pinskia@gcc.gnu.org>\n+//         Nathan Sidwell <nathan@gcc.gnu.org>\n+\n+struct Foo\n+{\n+  template <typename T>\n+  Foo (const T &); // { dg-error \"T = Bar\" \"\" }\n+};\n+\n+struct Bar\n+{\n+  template <typename T>\n+  operator T () const;   // { dg-error \"T = Foo\" \"\" }\n+};\n+\n+Foo Quux (Bar const &b)\n+{\n+  return b; // { dg-error \"ambiguous overload\" \"\" }\n+}\n+\n+"}]}