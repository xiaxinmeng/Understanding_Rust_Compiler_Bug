{"sha": "bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmVkMzY4NjlmMDM3ZGM2YzlhNTNjNWQ1YjVjY2ZkNWMwMzk0Y2Q3NQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2013-11-13T10:07:14Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2013-11-13T10:07:14Z"}, "message": "re PR ada/35998 (debug info invalid x86_64 DW_AT_byte_size 0xffffffff)\n\n\tPR ada/35998\n\t* dwarf2out.c (add_byte_size_attribute): Also use int_size_in_bytes\n\tfor fields.  Do not add the attribute if the size is negative.\n\nFrom-SVN: r204736", "tree": {"sha": "536c5db89f67f2f5f29306b79c7e0b96cc6b6c45", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/536c5db89f67f2f5f29306b79c7e0b96cc6b6c45"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75/comments", "author": null, "committer": null, "parents": [{"sha": "f819a56dc7984834ca5d0f5aaa09c719ab1c0883", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f819a56dc7984834ca5d0f5aaa09c719ab1c0883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f819a56dc7984834ca5d0f5aaa09c719ab1c0883"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "7e7f3ea385074882db5655d275acc4ec1b328de9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75", "patch": "@@ -1,3 +1,9 @@\n+2013-11-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\tPR ada/35998\n+\t* dwarf2out.c (add_byte_size_attribute): Also use int_size_in_bytes\n+\tfor fields.  Do not add the attribute if the size is negative.\n+\n 2013-11-13  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/arm/arm.c: Include aarch-cost-tables.h."}, {"sha": "3822a652d80c0ad0e6c3f5d96172c7f31e093eee", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=bed36869f037dc6c9a53c5d5b5ccfd5c0394cd75", "patch": "@@ -16318,11 +16318,13 @@ add_subscript_info (dw_die_ref type_die, tree type, bool collapse_p)\n     }\n }\n \n+/* Add a DW_AT_byte_size attribute to DIE with TREE_NODE's size.  */\n+\n static void\n add_byte_size_attribute (dw_die_ref die, tree tree_node)\n {\n   dw_die_ref decl_die;\n-  unsigned size;\n+  HOST_WIDE_INT size;\n \n   switch (TREE_CODE (tree_node))\n     {\n@@ -16346,7 +16348,7 @@ add_byte_size_attribute (dw_die_ref die, tree tree_node)\n \t generally given as the number of bytes normally allocated for an\n \t object of the *declared* type of the member itself.  This is true\n \t even for bit-fields.  */\n-      size = simple_type_size_in_bits (field_type (tree_node)) / BITS_PER_UNIT;\n+      size = int_size_in_bytes (field_type (tree_node));\n       break;\n     default:\n       gcc_unreachable ();\n@@ -16355,8 +16357,9 @@ add_byte_size_attribute (dw_die_ref die, tree tree_node)\n   /* Note that `size' might be -1 when we get to this point.  If it is, that\n      indicates that the byte size of the entity in question is variable.  We\n      have no good way of expressing this fact in Dwarf at the present time,\n-     so just let the -1 pass on through.  */\n-  add_AT_unsigned (die, DW_AT_byte_size, size);\n+     when location description was not used by the caller code instead.  */\n+  if (size >= 0)\n+    add_AT_unsigned (die, DW_AT_byte_size, size);\n }\n \n /* For a FIELD_DECL node which represents a bit-field, output an attribute"}]}