{"sha": "6623457026dcd56ff98d3671fa038818abceaf77", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjYyMzQ1NzAyNmRjZDU2ZmY5OGQzNjcxZmEwMzg4MThhYmNlYWY3Nw==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2000-11-08T02:18:00Z"}, "committer": {"name": "Richard Henderson", "email": "rth@gcc.gnu.org", "date": "2000-11-08T02:18:00Z"}, "message": "dwarfout.c (INSN_LABEL_FMT): Remove.\n\n        * dwarfout.c (INSN_LABEL_FMT): Remove.\n        (output_label_die): Use ASM_GENERATE_INTERNAL_LABEL.\n        (dwarfout_label): Remove.\n        * dwarfout.h: Remove it's prototype.\n        * dwarf2out.c (INSN_LABEL_FMT): Remove.\n        (gen_label_die): Use ASM_GENERATE_INTERNAL_LABEL.\n        (dwarf2out_label): Remove.\n        * dwarf2out.h: Remove it's prototype.\n        * final.c (final_scan_insn): Don't call dwarf[2]out_label.\n\nFrom-SVN: r37310", "tree": {"sha": "039cf362a9d26bfab7e7bde482045c4c205f1b48", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/039cf362a9d26bfab7e7bde482045c4c205f1b48"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6623457026dcd56ff98d3671fa038818abceaf77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6623457026dcd56ff98d3671fa038818abceaf77", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6623457026dcd56ff98d3671fa038818abceaf77", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6623457026dcd56ff98d3671fa038818abceaf77/comments", "author": null, "committer": null, "parents": [{"sha": "cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cd5c4048b3b393f2fe046b2d0f676e7f3c3822d8"}], "stats": {"total": 90, "additions": 14, "deletions": 76}, "files": [{"sha": "7bb1251612675f2c928210c64ed8b192e57e3ef9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6623457026dcd56ff98d3671fa038818abceaf77/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6623457026dcd56ff98d3671fa038818abceaf77/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6623457026dcd56ff98d3671fa038818abceaf77", "patch": "@@ -1,3 +1,15 @@\n+2000-11-07  Richard Henderson  <rth@redhat.com>\n+\n+\t* dwarfout.c (INSN_LABEL_FMT): Remove.\n+\t(output_label_die): Use ASM_GENERATE_INTERNAL_LABEL.\n+\t(dwarfout_label): Remove.\n+\t* dwarfout.h: Remove it's prototype.\n+\t* dwarf2out.c (INSN_LABEL_FMT): Remove.\n+\t(gen_label_die): Use ASM_GENERATE_INTERNAL_LABEL.\n+\t(dwarf2out_label): Remove.\n+\t* dwarf2out.h: Remove it's prototype.\n+\t* final.c (final_scan_insn): Don't call dwarf[2]out_label.\n+\n 2000-11-07  Richard Henderson  <rth@redhat.com>\n \n \t* config/ia64/fde-glibc.c (find_fde_for_dso): Do a binary"}, {"sha": "a5517a2436b3570444b9424e9acc2dd646fb5e44", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 25, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6623457026dcd56ff98d3671fa038818abceaf77/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6623457026dcd56ff98d3671fa038818abceaf77/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=6623457026dcd56ff98d3671fa038818abceaf77", "patch": "@@ -3594,9 +3594,6 @@ static char debug_line_section_label[MAX_ARTIFICIAL_LABEL_BYTES];\n #ifndef BSS_END_LABEL\n #define BSS_END_LABEL           \"Lebss\"\n #endif\n-#ifndef INSN_LABEL_FMT\n-#define INSN_LABEL_FMT\t\t\"LI%u_\"\n-#endif\n #ifndef BLOCK_BEGIN_LABEL\n #define BLOCK_BEGIN_LABEL\t\"LBB\"\n #endif\n@@ -9824,7 +9821,6 @@ gen_label_die (decl, context_die)\n   register dw_die_ref lbl_die = new_die (DW_TAG_label, context_die);\n   register rtx insn;\n   char label[MAX_ARTIFICIAL_LABEL_BYTES];\n-  char label2[MAX_ARTIFICIAL_LABEL_BYTES];\n \n   if (origin != NULL)\n     add_abstract_origin_attribute (lbl_die, origin);\n@@ -9852,9 +9848,7 @@ gen_label_die (decl, context_die)\n \t  if (INSN_DELETED_P (insn))\n \t    abort ();\n \n-\t  sprintf (label2, INSN_LABEL_FMT, current_funcdef_number);\n-\t  ASM_GENERATE_INTERNAL_LABEL (label, label2,\n-\t\t\t\t       (unsigned) INSN_UID (insn));\n+\t  ASM_GENERATE_INTERNAL_LABEL (label, \"L\", CODE_LABEL_NUMBER (insn));\n \t  add_AT_lbl_id (lbl_die, DW_AT_low_pc, label);\n \t}\n     }\n@@ -10966,24 +10960,6 @@ dwarf2out_ignore_block (block)\n   return 1;\n }\n \n-/* Output a marker (i.e. a label) at a point in the assembly code which\n-   corresponds to a given source level label.  */\n-\n-void\n-dwarf2out_label (insn)\n-     register rtx insn;\n-{\n-  char label[MAX_ARTIFICIAL_LABEL_BYTES];\n-\n-  if (debug_info_level >= DINFO_LEVEL_NORMAL)\n-    {\n-      function_section (current_function_decl);\n-      sprintf (label, INSN_LABEL_FMT, current_funcdef_number);\n-      ASM_OUTPUT_DEBUG_LABEL (asm_out_file, label,\n-\t\t\t\t (unsigned) INSN_UID (insn));\n-    }\n-}\n-\n /* Lookup a filename (in the list of filenames that we know about here in\n    dwarf2out.c) and return its \"index\".  The index of each (known) filename is\n    just a unique number which is associated with only that one filename."}, {"sha": "bced6a6a8a46626e6f7d5a42e924aec8691ab49a", "filename": "gcc/dwarf2out.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6623457026dcd56ff98d3671fa038818abceaf77/gcc%2Fdwarf2out.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6623457026dcd56ff98d3671fa038818abceaf77/gcc%2Fdwarf2out.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.h?ref=6623457026dcd56ff98d3671fa038818abceaf77", "patch": "@@ -29,7 +29,6 @@ extern void dwarf2out_end_source_file \tPARAMS ((void));\n extern void dwarf2out_begin_block\tPARAMS ((unsigned));\n extern void dwarf2out_end_block\t\tPARAMS ((unsigned));\n extern int dwarf2out_ignore_block\tPARAMS ((tree));\n-extern void dwarf2out_label\t\tPARAMS ((rtx));\t\t\t\n extern void dwarf2out_decl\t\tPARAMS ((tree));\t\n extern void dwarf2out_line\t\tPARAMS ((const char *, unsigned));\n extern void dwarf2out_frame_init\tPARAMS ((void));"}, {"sha": "708c574fa71536880a92b235cc6179ebef7756b6", "filename": "gcc/dwarfout.c", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6623457026dcd56ff98d3671fa038818abceaf77/gcc%2Fdwarfout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6623457026dcd56ff98d3671fa038818abceaf77/gcc%2Fdwarfout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.c?ref=6623457026dcd56ff98d3671fa038818abceaf77", "patch": "@@ -561,9 +561,6 @@ static void retry_incomplete_types\tPARAMS ((void));\n #ifndef PUB_DIE_LABEL_FMT\n #define PUB_DIE_LABEL_FMT\t\"*.L_P%u\"\n #endif\n-#ifndef INSN_LABEL_FMT\n-#define INSN_LABEL_FMT\t\t\"*.L_I%u_%u\"\n-#endif\n #ifndef BLOCK_BEGIN_LABEL_FMT\n #define BLOCK_BEGIN_LABEL_FMT\t\"*.L_B%u\"\n #endif\n@@ -3485,8 +3482,7 @@ output_label_die (arg)\n \t  if (INSN_DELETED_P (insn))\n \t    abort ();\t/* Should never happen.  */\n \n-\t  sprintf (label, INSN_LABEL_FMT, current_funcdef_number,\n-\t\t\t\t          (unsigned) INSN_UID (insn));\n+\t  ASM_GENERATE_INTERNAL_LABEL (label, \"L\", CODE_LABEL_NUMBER (insn));\n \t  low_pc_attribute (label);\n \t}\n     }\n@@ -5294,24 +5290,6 @@ dwarfout_end_block (blocknum)\n   ASM_OUTPUT_LABEL (asm_out_file, label);\n }\n \n-/* Output a marker (i.e. a label) at a point in the assembly code which\n-   corresponds to a given source level label.  */\n-\n-void\n-dwarfout_label (insn)\n-     register rtx insn;\n-{\n-  if (debug_info_level >= DINFO_LEVEL_NORMAL)\n-    {\n-      char label[MAX_ARTIFICIAL_LABEL_BYTES];\n-\n-      function_section (current_function_decl);\n-      sprintf (label, INSN_LABEL_FMT, current_funcdef_number,\n-\t\t\t\t      (unsigned) INSN_UID (insn));\n-      ASM_OUTPUT_LABEL (asm_out_file, label);\n-    }\n-}\n-\n /* Output a marker (i.e. a label) for the point in the generated code where\n    the real body of the function begins (after parameters have been moved\n    to their home locations).  */"}, {"sha": "1eeef5fb90e212249dd603103eddf403f59b1df0", "filename": "gcc/dwarfout.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6623457026dcd56ff98d3671fa038818abceaf77/gcc%2Fdwarfout.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6623457026dcd56ff98d3671fa038818abceaf77/gcc%2Fdwarfout.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarfout.h?ref=6623457026dcd56ff98d3671fa038818abceaf77", "patch": "@@ -34,8 +34,4 @@ extern void dwarfout_end_epilogue\tPARAMS ((void));\n extern void dwarfout_begin_block\tPARAMS ((unsigned));\n extern void dwarfout_end_block\t\tPARAMS ((unsigned));\n \n-#ifdef RTX_CODE\n-extern void dwarfout_label\t\tPARAMS ((rtx));\n-#endif\n extern void dwarfout_line\t\tPARAMS ((const char *, unsigned));\n-"}, {"sha": "9b76aa801a3beb896cd8adda4b2af801f75b3b0f", "filename": "gcc/final.c", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6623457026dcd56ff98d3671fa038818abceaf77/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6623457026dcd56ff98d3671fa038818abceaf77/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=6623457026dcd56ff98d3671fa038818abceaf77", "patch": "@@ -2268,22 +2268,7 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n \t  /* Emit the label.  We may have deleted the CODE_LABEL because\n \t     the label could be proved to be unreachable, though still\n \t     referenced (in the form of having its address taken.  */\n-\t  /* ??? Figure out how not to do this unconditionally.  This\n-\t     interferes with bundling on LIW targets.  */\n \t  ASM_OUTPUT_DEBUG_LABEL (file, \"L\", CODE_LABEL_NUMBER (insn));\n-\n-\t  if (debug_info_level == DINFO_LEVEL_NORMAL\n-\t      || debug_info_level == DINFO_LEVEL_VERBOSE)\n-\t    {\n-#ifdef DWARF_DEBUGGING_INFO\n-\t      if (write_symbols == DWARF_DEBUG)\n-\t\tdwarfout_label (insn);\n-#endif\n-#ifdef DWARF2_DEBUGGING_INFO\n-\t      if (write_symbols == DWARF2_DEBUG)\n-\t\tdwarf2out_label (insn);\n-#endif\n-\t    }\n \t  break;\n \n \tcase 0:\n@@ -2402,14 +2387,6 @@ final_scan_insn (insn, file, optimize, prescan, nopeepholes)\n #ifdef SDB_DEBUGGING_INFO\n       if (write_symbols == SDB_DEBUG && LABEL_NAME (insn))\n \tsdbout_label (insn);\n-#endif\n-#ifdef DWARF_DEBUGGING_INFO\n-      if (write_symbols == DWARF_DEBUG && LABEL_NAME (insn))\n-\tdwarfout_label (insn);\n-#endif\n-#ifdef DWARF2_DEBUGGING_INFO\n-      if (write_symbols == DWARF2_DEBUG && LABEL_NAME (insn))\n-\tdwarf2out_label (insn);\n #endif\n       if (app_on)\n \t{"}]}