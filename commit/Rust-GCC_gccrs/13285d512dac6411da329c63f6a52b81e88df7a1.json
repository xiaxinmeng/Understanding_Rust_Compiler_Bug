{"sha": "13285d512dac6411da329c63f6a52b81e88df7a1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTMyODVkNTEyZGFjNjQxMWRhMzI5YzYzZjZhNTJiODFlODhkZjdhMQ==", "commit": {"author": {"name": "Zdenek Dvorak", "email": "ook@ucw.cz", "date": "2007-11-30T00:32:04Z"}, "committer": {"name": "Zdenek Dvorak", "email": "rakdver@gcc.gnu.org", "date": "2007-11-30T00:32:04Z"}, "message": "re PR tree-optimization/34244 (VRP/SCEV miscompiles Firefox)\n\n\tPR tree-optimization/34244\n\t* tree-vrp.c (adjust_range_with_scev): Clear scev cache.\n\t(record_numbers_of_iterations): New function.\n\t(execute_vrp): Cache the numbers of iterations of loops.\n\t* tree-scalar-evolution.c (scev_reset_except_niters):\n\tNew function.\n\t(scev_reset): Use scev_reset_except_niters.\n\t* tree-scalar-evolution.h (scev_reset_except_niters): Declare.\n\n\t* gcc.dg/tree-ssa/pr34244.c: New test.\n\nFrom-SVN: r130527", "tree": {"sha": "573fc12944ab74427d5b1d5768b2a39ac6ed4847", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/573fc12944ab74427d5b1d5768b2a39ac6ed4847"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/13285d512dac6411da329c63f6a52b81e88df7a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13285d512dac6411da329c63f6a52b81e88df7a1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13285d512dac6411da329c63f6a52b81e88df7a1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13285d512dac6411da329c63f6a52b81e88df7a1/comments", "author": {"login": "rakdver", "id": 20416833, "node_id": "MDQ6VXNlcjIwNDE2ODMz", "avatar_url": "https://avatars.githubusercontent.com/u/20416833?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rakdver", "html_url": "https://github.com/rakdver", "followers_url": "https://api.github.com/users/rakdver/followers", "following_url": "https://api.github.com/users/rakdver/following{/other_user}", "gists_url": "https://api.github.com/users/rakdver/gists{/gist_id}", "starred_url": "https://api.github.com/users/rakdver/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rakdver/subscriptions", "organizations_url": "https://api.github.com/users/rakdver/orgs", "repos_url": "https://api.github.com/users/rakdver/repos", "events_url": "https://api.github.com/users/rakdver/events{/privacy}", "received_events_url": "https://api.github.com/users/rakdver/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54bded776c12100d755e2976fbd5f1b6733ea64b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54bded776c12100d755e2976fbd5f1b6733ea64b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54bded776c12100d755e2976fbd5f1b6733ea64b"}], "stats": {"total": 192, "additions": 191, "deletions": 1}, "files": [{"sha": "e1215f1bc9ddc5c6f10056471ec5421a685a4508", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13285d512dac6411da329c63f6a52b81e88df7a1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13285d512dac6411da329c63f6a52b81e88df7a1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=13285d512dac6411da329c63f6a52b81e88df7a1", "patch": "@@ -1,3 +1,14 @@\n+2007-11-29  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR tree-optimization/34244\n+\t* tree-vrp.c (adjust_range_with_scev): Clear scev cache.\n+\t(record_numbers_of_iterations): New function.\n+\t(execute_vrp): Cache the numbers of iterations of loops.\n+\t* tree-scalar-evolution.c (scev_reset_except_niters):\n+\tNew function.\n+\t(scev_reset): Use scev_reset_except_niters.\n+\t* tree-scalar-evolution.h (scev_reset_except_niters): Declare.\n+\n 2007-11-29  Jan Hubicka  <jh@suse.cz>\n \t    Jakub Jelinek  <jakub@redhat.com>\n "}, {"sha": "4a77150b92afc361f3a6dd851239f86145d04b2d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13285d512dac6411da329c63f6a52b81e88df7a1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13285d512dac6411da329c63f6a52b81e88df7a1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=13285d512dac6411da329c63f6a52b81e88df7a1", "patch": "@@ -1,3 +1,8 @@\n+2007-11-29  Zdenek Dvorak  <ook@ucw.cz>\n+\n+\tPR tree-optimization/34244\n+\t* gcc.dg/tree-ssa/pr34244.c: New test.\n+\n 2007-11-29  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/33434"}, {"sha": "8b538d34ff6a251558fbca4d4cae186106a42b70", "filename": "gcc/testsuite/gcc.dg/tree-ssa/pr34244.c", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13285d512dac6411da329c63f6a52b81e88df7a1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr34244.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13285d512dac6411da329c63f6a52b81e88df7a1/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr34244.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fpr34244.c?ref=13285d512dac6411da329c63f6a52b81e88df7a1", "patch": "@@ -0,0 +1,130 @@\n+/* PR tree-optimization/34244  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 \" } */\n+\n+int __attribute__((noinline)) GetParent(void)\n+{\n+  static int count = 0;\n+  count++;\n+  switch (count)\n+    {\n+    case 1:\n+    case 3:\n+    case 4:\n+        return 1;\n+    default:\n+        return 0;\n+    }\n+}\n+int __attribute__((noinline)) FindCommonAncestor(int aNode1, int aNode2)\n+{\n+  if (aNode1 && aNode2) {\n+    int offset = 0;\n+    int anc1 = aNode1;\n+    for (;;) {\n+      ++offset;\n+      int  parent = GetParent();\n+      if (!parent)\n+        break;\n+      anc1 = parent;\n+    }\n+    int anc2 = aNode2;\n+    for (;;) {\n+      --offset;\n+      int  parent = GetParent();\n+      if (!parent)\n+        break;\n+      anc2 = parent;\n+    }\n+    if (anc1 == anc2) {\n+      anc1 = aNode1;\n+      anc2 = aNode2;\n+      while (offset > 0) {\n+        anc1 = GetParent();\n+        --offset;\n+      }\n+      while (offset < 0) {\n+        anc2 = GetParent();\n+        ++offset;\n+      }\n+      while (anc1 != anc2) {\n+        anc1 = GetParent();\n+        anc2 = GetParent();\n+      } \n+      return anc1;\n+    }\n+  }\n+  return 0;\n+}\n+extern void abort (void);\n+int main()\n+{\n+  if (FindCommonAncestor (1, 1) != 0)\n+    abort ();\n+  return 0;\n+}\n+/* PR tree-optimization/34244  */\n+/* { dg-do run } */\n+/* { dg-options \"-O2 \" } */\n+\n+int __attribute__((noinline)) GetParent(void)\n+{\n+  static int count = 0;\n+  count++;\n+  switch (count)\n+    {\n+    case 1:\n+    case 3:\n+    case 4:\n+        return 1;\n+    default:\n+        return 0;\n+    }\n+}\n+int __attribute__((noinline)) FindCommonAncestor(int aNode1, int aNode2)\n+{\n+  if (aNode1 && aNode2) {\n+    int offset = 0;\n+    int anc1 = aNode1;\n+    for (;;) {\n+      ++offset;\n+      int  parent = GetParent();\n+      if (!parent)\n+        break;\n+      anc1 = parent;\n+    }\n+    int anc2 = aNode2;\n+    for (;;) {\n+      --offset;\n+      int  parent = GetParent();\n+      if (!parent)\n+        break;\n+      anc2 = parent;\n+    }\n+    if (anc1 == anc2) {\n+      anc1 = aNode1;\n+      anc2 = aNode2;\n+      while (offset > 0) {\n+        anc1 = GetParent();\n+        --offset;\n+      }\n+      while (offset < 0) {\n+        anc2 = GetParent();\n+        ++offset;\n+      }\n+      while (anc1 != anc2) {\n+        anc1 = GetParent();\n+        anc2 = GetParent();\n+      } \n+      return anc1;\n+    }\n+  }\n+  return 0;\n+}\n+extern void abort (void);\n+int main()\n+{\n+  if (FindCommonAncestor (1, 1) != 0)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "262ec764b3089199211d32f378c622f95dfae33a", "filename": "gcc/tree-scalar-evolution.c", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13285d512dac6411da329c63f6a52b81e88df7a1/gcc%2Ftree-scalar-evolution.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13285d512dac6411da329c63f6a52b81e88df7a1/gcc%2Ftree-scalar-evolution.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.c?ref=13285d512dac6411da329c63f6a52b81e88df7a1", "patch": "@@ -2608,6 +2608,16 @@ scev_initialize (void)\n     }\n }\n \n+/* Clean the scalar evolution analysis cache, but preserve the cached\n+   numbers of iterations for the loops.  */\n+\n+void\n+scev_reset_except_niters (void)\n+{\n+  if (scalar_evolution_info)\n+    htab_empty (scalar_evolution_info);\n+}\n+\n /* Cleans up the information cached by the scalar evolutions analysis.  */\n \n void\n@@ -2619,7 +2629,8 @@ scev_reset (void)\n   if (!scalar_evolution_info || !current_loops)\n     return;\n \n-  htab_empty (scalar_evolution_info);\n+  scev_reset_except_niters ();\n+\n   FOR_EACH_LOOP (li, loop, 0)\n     {\n       loop->nb_iterations = NULL_TREE;"}, {"sha": "c722579d9c93167c01c28621ff4a9c5c548e3364", "filename": "gcc/tree-scalar-evolution.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13285d512dac6411da329c63f6a52b81e88df7a1/gcc%2Ftree-scalar-evolution.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13285d512dac6411da329c63f6a52b81e88df7a1/gcc%2Ftree-scalar-evolution.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-scalar-evolution.h?ref=13285d512dac6411da329c63f6a52b81e88df7a1", "patch": "@@ -27,6 +27,7 @@ extern tree get_loop_exit_condition (const struct loop *);\n \n extern void scev_initialize (void);\n extern void scev_reset (void);\n+extern void scev_reset_except_niters (void);\n extern void scev_finalize (void);\n extern tree analyze_scalar_evolution (struct loop *, tree);\n extern tree instantiate_parameters (struct loop *, tree);"}, {"sha": "1e1ffaa7e69adfcc707dddf23687debeffec4075", "filename": "gcc/tree-vrp.c", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/13285d512dac6411da329c63f6a52b81e88df7a1/gcc%2Ftree-vrp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/13285d512dac6411da329c63f6a52b81e88df7a1/gcc%2Ftree-vrp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vrp.c?ref=13285d512dac6411da329c63f6a52b81e88df7a1", "patch": "@@ -2636,6 +2636,13 @@ adjust_range_with_scev (value_range_t *vr, struct loop *loop, tree stmt,\n   if (vr->type == VR_ANTI_RANGE)\n     return;\n \n+  /* Ensure that there are not values in the scev cache based on assumptions\n+     on ranges of ssa names that were changed\n+     (in set_value_range/set_value_range_to_varying).  Preserve cached numbers\n+     of iterations, that were computed before the start of VRP (we do not\n+     recompute these each time to save the compile time).  */\n+  scev_reset_except_niters ();\n+\n   chrec = instantiate_parameters (loop, analyze_scalar_evolution (loop, var));\n \n   /* Like in PR19590, scev can return a constant function.  */\n@@ -6047,6 +6054,20 @@ vrp_finalize (void)\n   vr_phi_edge_counts = NULL;\n }\n \n+/* Calculates number of iterations for all loops, to ensure that they are\n+   cached.  */\n+\n+static void\n+record_numbers_of_iterations (void)\n+{\n+  loop_iterator li;\n+  struct loop *loop;\n+\n+  FOR_EACH_LOOP (li, loop, 0)\n+    {\n+      number_of_latch_executions (loop);\n+    }\n+}\n \n /* Main entry point to VRP (Value Range Propagation).  This pass is\n    loosely based on J. R. C. Patterson, ``Accurate Static Branch\n@@ -6101,6 +6122,17 @@ execute_vrp (void)\n \n   insert_range_assertions ();\n \n+  /* Compute the # of iterations for each loop before we start the VRP\n+     analysis.  The value ranges determined by VRP are used in expression\n+     simplification, that is also used by the # of iterations analysis.\n+     However, in the middle of the VRP analysis, the value ranges do not take\n+     all the possible paths in CFG into account, so they do not have to be\n+     correct, and the # of iterations analysis can obtain wrong results.\n+     This is a problem, since the results of the # of iterations analysis\n+     are cached, so these mistakes would not be corrected when the value\n+     ranges are corrected.  */\n+  record_numbers_of_iterations ();\n+\n   vrp_initialize ();\n   ssa_propagate (vrp_visit_stmt, vrp_visit_phi_node);\n   vrp_finalize ();"}]}