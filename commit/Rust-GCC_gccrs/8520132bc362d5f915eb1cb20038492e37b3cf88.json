{"sha": "8520132bc362d5f915eb1cb20038492e37b3cf88", "node_id": "C_kwDOANBUbNoAKDg1MjAxMzJiYzM2MmQ1ZjkxNWViMWNiMjAwMzg0OTJlMzdiM2NmODg", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-24T13:03:49Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2023-02-24T14:23:36Z"}, "message": "libstdc++: Constrain net::executor constructors\n\nThe TS says the arguments to these constructors shall meet the Executor\nrequirements, so it's undefined if they don't. Constraining on a subset\nof those requirements won't affect valid cases, but prevents the\nmajority of invalid cases from trying to instantiate the constructor.\n\nThis prevents the non-explicit executor(Executor) constructor being a\ncandidate anywhere that a net::executor could be constructed e.g.\ncomparing ip::tcp::v4() == ip::udp::v4() would try to convert both\noperands to executor using that constructor, then compare then using\noperator==(const executor&, const executor&).\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/experimental/executor (executor): Constrain template\n\tconstructors.", "tree": {"sha": "1ba38f8caa87399719bb76f5c4a48e85f780e17a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1ba38f8caa87399719bb76f5c4a48e85f780e17a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/8520132bc362d5f915eb1cb20038492e37b3cf88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8520132bc362d5f915eb1cb20038492e37b3cf88", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8520132bc362d5f915eb1cb20038492e37b3cf88", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8520132bc362d5f915eb1cb20038492e37b3cf88/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97111dccf97d8b4dbf7c1ef11c72827295a72466", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/97111dccf97d8b4dbf7c1ef11c72827295a72466", "html_url": "https://github.com/Rust-GCC/gccrs/commit/97111dccf97d8b4dbf7c1ef11c72827295a72466"}], "stats": {"total": 9, "additions": 7, "deletions": 2}, "files": [{"sha": "1dae8925916d37eb664317a9380f799d465050de", "filename": "libstdc++-v3/include/experimental/executor", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/8520132bc362d5f915eb1cb20038492e37b3cf88/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/8520132bc362d5f915eb1cb20038492e37b3cf88/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fexperimental%2Fexecutor?ref=8520132bc362d5f915eb1cb20038492e37b3cf88", "patch": "@@ -1012,6 +1012,9 @@ inline namespace v1\n \n   class executor\n   {\n+    template<typename _Executor>\n+      using _Context_t = decltype(std::declval<_Executor&>().context());\n+\n   public:\n     // construct / copy / destroy:\n \n@@ -1021,12 +1024,14 @@ inline namespace v1\n     executor(const executor&) noexcept = default;\n     executor(executor&&) noexcept = default;\n \n-    template<typename _Executor>\n+    template<typename _Executor,\n+\t     typename = _Require<is_lvalue_reference<_Context_t<_Executor>>>>\n       executor(_Executor __e)\n       : _M_target(make_shared<_Tgt1<_Executor>>(std::move(__e)))\n       { }\n \n-    template<typename _Executor, typename _ProtoAlloc>\n+    template<typename _Executor, typename _ProtoAlloc,\n+\t     typename = _Require<is_lvalue_reference<_Context_t<_Executor>>>>\n       executor(allocator_arg_t, const _ProtoAlloc& __a, _Executor __e)\n       : _M_target(allocate_shared<_Tgt2<_Executor, _ProtoAlloc>>(__a,\n \t    std::move(__e), __a))"}]}