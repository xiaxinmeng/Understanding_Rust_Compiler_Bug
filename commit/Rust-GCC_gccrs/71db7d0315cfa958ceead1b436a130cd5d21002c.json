{"sha": "71db7d0315cfa958ceead1b436a130cd5d21002c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzFkYjdkMDMxNWNmYTk1OGNlZWFkMWI0MzZhMTMwY2Q1ZDIxMDAyYw==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2002-03-08T13:45:13Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2002-03-08T13:45:13Z"}, "message": "re PR c/3711 (ICE in instantiate_virtual_regs_1, at function.c:3880)\n\n\tPR c/3711\n\t* builtins.c (std_expand_builtin_va_arg): Do all computations on\n\ttrees.\n\n\t* gcc.c-torture/execute/20020307-2.c: New test.\n\nFrom-SVN: r50438", "tree": {"sha": "ca62fffdce452b4e9d9875e01e4aa2868d4a3388", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ca62fffdce452b4e9d9875e01e4aa2868d4a3388"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/71db7d0315cfa958ceead1b436a130cd5d21002c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71db7d0315cfa958ceead1b436a130cd5d21002c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/71db7d0315cfa958ceead1b436a130cd5d21002c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/71db7d0315cfa958ceead1b436a130cd5d21002c/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "127c1ba59832e7cbca6f86a38a9c6c090f3d0361", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/127c1ba59832e7cbca6f86a38a9c6c090f3d0361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/127c1ba59832e7cbca6f86a38a9c6c090f3d0361"}], "stats": {"total": 116, "additions": 99, "deletions": 17}, "files": [{"sha": "ea61862664c5367f71f09daaa90fe61cc640c035", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71db7d0315cfa958ceead1b436a130cd5d21002c/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71db7d0315cfa958ceead1b436a130cd5d21002c/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=71db7d0315cfa958ceead1b436a130cd5d21002c", "patch": "@@ -1,3 +1,9 @@\n+2002-03-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR c/3711\n+\t* builtins.c (std_expand_builtin_va_arg): Do all computations on\n+\ttrees.\n+\n Fri Mar  8 06:48:45 2002  Richard Kenner  <kenner@vlsi1.ultra.nyu.edu>\n \n \t* rtl.c (copy_most_rtx): Move from here ..."}, {"sha": "806dd0dc5d229d4c4d1aa751819a094b796a0f17", "filename": "gcc/builtins.c", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71db7d0315cfa958ceead1b436a130cd5d21002c/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71db7d0315cfa958ceead1b436a130cd5d21002c/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=71db7d0315cfa958ceead1b436a130cd5d21002c", "patch": "@@ -2986,37 +2986,54 @@ rtx\n std_expand_builtin_va_arg (valist, type)\n      tree valist, type;\n {\n-  tree addr_tree, t;\n-  HOST_WIDE_INT align;\n-  HOST_WIDE_INT rounded_size;\n+  tree addr_tree, t, type_size = NULL;\n+  tree align, alignm1;\n+  tree rounded_size;\n   rtx addr;\n \n   /* Compute the rounded size of the type.  */\n-  align = PARM_BOUNDARY / BITS_PER_UNIT;\n-  rounded_size = (((int_size_in_bytes (type) + align - 1) / align) * align);\n+  align = size_int (PARM_BOUNDARY / BITS_PER_UNIT);\n+  alignm1 = size_int (PARM_BOUNDARY / BITS_PER_UNIT - 1);\n+  if (type == error_mark_node\n+      || (type_size = TYPE_SIZE_UNIT (TYPE_MAIN_VARIANT (type))) == NULL\n+      || TREE_OVERFLOW (type_size))\n+    rounded_size = size_zero_node;\n+  else\n+    rounded_size = fold (build (MULT_EXPR, sizetype,\n+\t\t\t\tfold (build (TRUNC_DIV_EXPR, sizetype,\n+\t\t\t\t\t     fold (build (PLUS_EXPR, sizetype,\n+\t\t\t\t\t\t\t  type_size, alignm1)),\n+\t\t\t\t\t     align)),\n+\t\t\t\talign));\n \n   /* Get AP.  */\n   addr_tree = valist;\n-  if (PAD_VARARGS_DOWN)\n+  if (PAD_VARARGS_DOWN && ! integer_zerop (rounded_size))\n     {\n       /* Small args are padded downward.  */\n-\n-      HOST_WIDE_INT adj\n-\t= rounded_size > align ? rounded_size : int_size_in_bytes (type);\n-\n-      addr_tree = build (PLUS_EXPR, TREE_TYPE (addr_tree), addr_tree,\n-\t\t\t build_int_2 (rounded_size - adj, 0));\n+      addr_tree = fold (build (PLUS_EXPR, TREE_TYPE (addr_tree), addr_tree,\n+\t\t\t       fold (build (COND_EXPR, sizetype,\n+\t\t\t\t\t    fold (build (GT_EXPR, sizetype,\n+\t\t\t\t\t\t\t rounded_size,\n+\t\t\t\t\t\t\t align)),\n+\t\t\t\t\t    size_zero_node,\n+\t\t\t\t\t    fold (build (MINUS_EXPR, sizetype,\n+\t\t\t\t\t\t\t rounded_size,\n+\t\t\t\t\t\t\t type_size))))));\n     }\n \n   addr = expand_expr (addr_tree, NULL_RTX, Pmode, EXPAND_NORMAL);\n   addr = copy_to_reg (addr);\n \n   /* Compute new value for AP.  */\n-  t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n-\t     build (PLUS_EXPR, TREE_TYPE (valist), valist,\n-\t\t    build_int_2 (rounded_size, 0)));\n-  TREE_SIDE_EFFECTS (t) = 1;\n-  expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+  if (! integer_zerop (rounded_size))\n+    {\n+      t = build (MODIFY_EXPR, TREE_TYPE (valist), valist,\n+\t\t build (PLUS_EXPR, TREE_TYPE (valist), valist,\n+\t\t\trounded_size));\n+      TREE_SIDE_EFFECTS (t) = 1;\n+      expand_expr (t, const0_rtx, VOIDmode, EXPAND_NORMAL);\n+    }\n \n   return addr;\n }"}, {"sha": "1c069289aa8f5d79ce2ae6ee971286a2d245d167", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71db7d0315cfa958ceead1b436a130cd5d21002c/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71db7d0315cfa958ceead1b436a130cd5d21002c/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=71db7d0315cfa958ceead1b436a130cd5d21002c", "patch": "@@ -1,3 +1,7 @@\n+2002-03-08  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/20020307-2.c: New test.\n+\n Thu Mar  7 10:05:31 2002  Jeffrey A Law  (law@redhat.com)\n \n \t* g77.f-torture/compile/20020307-1.f: New test."}, {"sha": "0e67a2cf8c738d795ca89519fc827648bb4022d6", "filename": "gcc/testsuite/gcc.c-torture/execute/20020307-2.c", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/71db7d0315cfa958ceead1b436a130cd5d21002c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020307-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/71db7d0315cfa958ceead1b436a130cd5d21002c/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020307-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2F20020307-2.c?ref=71db7d0315cfa958ceead1b436a130cd5d21002c", "patch": "@@ -0,0 +1,55 @@\n+/* PR c/3711\n+   This testcase ICEd on IA-32 at -O0 and was miscompiled otherwise,\n+   because std_expand_builtin_va_arg didn't handle variable size types.  */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+extern void exit (int);\n+\n+void bar (int c)\n+{\n+  static int d = '0';\n+\n+  if (c != d++)\n+    abort ();\n+  if (c < '0' || c > '9')\n+    abort ();\n+}\n+\n+void foo (int size, ...)\n+{\n+  struct\n+  {\n+    char x[size];\n+  } d;\n+  va_list ap;\n+  int i;\n+\n+  va_start (ap, size);\n+  d = va_arg (ap, typeof (d));\n+  for (i = 0; i < size; i++)\n+    bar (d.x[i]);\n+  d = va_arg (ap, typeof (d));\n+  for (i = 0; i < size; i++)\n+    bar (d.x[i]);\n+  va_end (ap);\n+}\n+\n+int main (void)\n+{\n+  struct { char a[5]; } x, y;\n+          \n+  x.a[0] = '0';\n+  x.a[1] = '1';\n+  x.a[2] = '2';\n+  x.a[3] = '3';\n+  x.a[4] = '4';\n+  y.a[0] = '5';\n+  y.a[1] = '6';\n+  y.a[2] = '7';\n+  y.a[3] = '8';\n+  y.a[4] = '9';\n+  foo (5, x, y);\n+  exit (0);\n+}"}]}