{"sha": "6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmQ5NmQ3ZmY1ZWMzZDZiZDg4MTI3ZWMwZDVmNWZhNjVmYWM1YzY1MA==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2011-11-09T17:21:19Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2011-11-09T17:21:19Z"}, "message": "re PR c++/51045 (erroneous zero as null pointer constant warning at delete)\n\n/cp\n2011-11-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51045\n\t* init.c (build_new_1, build_vec_delete_1, build_delete):\n\tUse nullptr_node.\n\n/testsuite\n2011-11-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/51045\n\t* g++.dg/warn/Wzero-as-null-pointer-constant-2.C: New.\n\n\n2011-11-09  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* doc/invoke.texi ([Option Summary, C++ Language Options]):\n\tAdd -Wzero-as-null-pointer-constant.\n\nFrom-SVN: r181214", "tree": {"sha": "d22ede289f9b12d71716ebb1a4b6667f9a7198a1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d22ede289f9b12d71716ebb1a4b6667f9a7198a1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650/comments", "author": null, "committer": null, "parents": [{"sha": "db422ace3f052fe6c078db73c3699769e4ddde38", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db422ace3f052fe6c078db73c3699769e4ddde38", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db422ace3f052fe6c078db73c3699769e4ddde38"}], "stats": {"total": 87, "additions": 83, "deletions": 4}, "files": [{"sha": "f011be7d8a12ad203d4eae883aa4b6c9e06ab210", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650", "patch": "@@ -1,3 +1,8 @@\n+2011-11-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* doc/invoke.texi ([Option Summary, C++ Language Options]):\n+\tAdd -Wzero-as-null-pointer-constant.\n+\n 2011-11-07  Matthew Gretton-Dann  <matthew.gretton-dann@arm.com>\n \n \t* config/arm/arm-cores.def: Add -mcpu=cortex-a7."}, {"sha": "7ebe23fb8ebeaf5eee1b28424a9c7fb9049a4df8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650", "patch": "@@ -1,3 +1,28 @@\n+2011-11-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51045\n+\t* init.c (build_new_1, build_vec_delete_1, build_delete):\n+\tUse nullptr_node.\n+\n+2011-11-09  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/51047\n+\t* search.c (lookup_member): Change to take also a tsubst_flags_t\n+\tparameter.\n+\t(lookup_field, lookup_fnfields): Adjust calls.\n+\t* typeck.c (lookup_destructor, finish_class_member_access_expr,\n+\tbuild_ptrmemfunc_access_expr): Likewise.\n+\t* class.c (handle_using_decl, maybe_note_name_used_in_class):\n+\tLikewise.\n+\t* pt.c (resolve_typename_type): Likewise.\n+\t* semantics.c (lambda_function): Likewise.\n+\t* parser.c (cp_parser_perform_range_for_lookup,\n+\tcp_parser_lookup_name): Likewise.\n+\t* friend.c (make_friend_class): Likewise.\n+\t* name-lookup.c (pushdecl_maybe_friend_1, get_class_binding,\n+\tdo_class_using_decl, lookup_qualified_name): Likewise.\n+\t* cp-tree.h (lookup_member): Adjust declaration.\n+\n 2011-11-09  Dodji Seketeli  <dodji@redhat.com>\n \n \tPR c++/51027"}, {"sha": "77fe42e4dc64e28bc40effb70503b2b221ada12f", "filename": "gcc/cp/init.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650/gcc%2Fcp%2Finit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650/gcc%2Fcp%2Finit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Finit.c?ref=6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650", "patch": "@@ -2646,7 +2646,7 @@ build_new_1 (VEC(tree,gc) **placement, tree type, tree nelts,\n \t{\n \t  tree ifexp = cp_build_binary_op (input_location,\n \t\t\t\t\t   NE_EXPR, alloc_node,\n-\t\t\t\t\t   integer_zero_node,\n+\t\t\t\t\t   nullptr_node,\n \t\t\t\t\t   complain);\n \t  rval = build_conditional_expr (ifexp, rval, alloc_node, \n                                          complain);\n@@ -2958,7 +2958,7 @@ build_vec_delete_1 (tree base, tree maxindex, tree type,\n \t\t      fold_build2_loc (input_location,\n \t\t\t\t   NE_EXPR, boolean_type_node, base,\n \t\t\t\t   convert (TREE_TYPE (base),\n-\t\t\t\t\t    integer_zero_node)),\n+\t\t\t\t\t    nullptr_node)),\n \t\t      body, integer_zero_node);\n   body = build1 (NOP_EXPR, void_type_node, body);\n \n@@ -3685,7 +3685,7 @@ build_delete (tree type, tree addr, special_function_kind auto_delete,\n \t{\n \t  /* Handle deleting a null pointer.  */\n \t  ifexp = fold (cp_build_binary_op (input_location,\n-\t\t\t\t\t    NE_EXPR, addr, integer_zero_node,\n+\t\t\t\t\t    NE_EXPR, addr, nullptr_node,\n \t\t\t\t\t    complain));\n \t  if (ifexp == error_mark_node)\n \t    return error_mark_node;"}, {"sha": "54e4a48d11d1db8cb410a3163266fb9b0f3c9f25", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650", "patch": "@@ -200,7 +200,7 @@ in the following sections.\n -Weffc++  -Wstrict-null-sentinel @gol\n -Wno-non-template-friend  -Wold-style-cast @gol\n -Woverloaded-virtual  -Wno-pmf-conversions @gol\n--Wsign-promo}\n+-Wsign-promo -Wzero-as-null-pointer-constant}\n \n @item Objective-C and Objective-C++ Language Options\n @xref{Objective-C and Objective-C++ Dialect Options,,Options Controlling"}, {"sha": "317d852c95d8673da8ccd3410ad599c4ef990b46", "filename": "gcc/testsuite/g++.dg/warn/Wzero-as-null-pointer-constant-2.C", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fwarn%2FWzero-as-null-pointer-constant-2.C?ref=6d96d7ff5ec3d6bd88127ec0d5f5fa65fac5c650", "patch": "@@ -0,0 +1,49 @@\n+// PR c++/51045\n+// { dg-options \"-Wzero-as-null-pointer-constant\" }\n+\n+template <typename T>\n+struct A\n+{\n+  A() { t = new T; }\n+\n+  ~A()\n+  {\n+    delete t;\n+  }\n+  T* t;\n+};\n+\n+template <typename T>\n+struct B\n+{\n+  B() { t = new T[1]; }\n+\n+  ~B()\n+  {\n+    delete [] t;\n+  }\n+  T* t;\n+};\n+\n+template <typename Type>\n+class Variant\n+{\n+  Type t;\n+};\n+\n+class Op;\n+\n+typedef Variant<A<Op> > vara;\n+typedef Variant<B<Op> > varb;\n+\n+class Op\n+{\n+  vara x;\n+  varb y;\n+};\n+\n+int main()\n+{\n+  vara a;\n+  varb b;\n+}"}]}