{"sha": "116e3cfc7b8ab8afc4bdbc03db6b194413218af7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTE2ZTNjZmM3YjhhYjhhZmM0YmRiYzAzZGI2YjE5NDQxMzIxOGFmNw==", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-27T12:13:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2020-05-27T12:14:17Z"}, "message": "libstdc++: Add new testcase for comparison category types\n\nComparing a comparison category type to anything except a literal 0 is\nundefined. This verifies that at least some misuses are diagnosed at\ncompile time.\n\n\t* testsuite/18_support/comparisons/categories/zero_neg.cc: New test.", "tree": {"sha": "a189df9dce328403265309add12ffcc7b2ff236c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a189df9dce328403265309add12ffcc7b2ff236c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/116e3cfc7b8ab8afc4bdbc03db6b194413218af7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116e3cfc7b8ab8afc4bdbc03db6b194413218af7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/116e3cfc7b8ab8afc4bdbc03db6b194413218af7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/116e3cfc7b8ab8afc4bdbc03db6b194413218af7/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "764ef40ba185ef9245a209ba9260d1e50bec6934", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/764ef40ba185ef9245a209ba9260d1e50bec6934", "html_url": "https://github.com/Rust-GCC/gccrs/commit/764ef40ba185ef9245a209ba9260d1e50bec6934"}], "stats": {"total": 46, "additions": 46, "deletions": 0}, "files": [{"sha": "0a8af41acb967453a81f6423db502775c5d60d01", "filename": "libstdc++-v3/testsuite/18_support/comparisons/categories/zero_neg.cc", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/116e3cfc7b8ab8afc4bdbc03db6b194413218af7/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fcategories%2Fzero_neg.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/116e3cfc7b8ab8afc4bdbc03db6b194413218af7/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fcategories%2Fzero_neg.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F18_support%2Fcomparisons%2Fcategories%2Fzero_neg.cc?ref=116e3cfc7b8ab8afc4bdbc03db6b194413218af7", "patch": "@@ -0,0 +1,46 @@\n+// Copyright (C) 2020 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+#include <compare>\n+\n+// C++20 [cmp.categories.pre]\n+// \"an argument other than a literal 0 is undefined\"\n+\n+void\n+test01()\n+{\n+  std::partial_ordering::equivalent == 0; // OK\n+  std::weak_ordering::equivalent == 0;    // OK\n+  std::strong_ordering::equivalent == 0;  // OK\n+\n+  std::partial_ordering::equivalent == 1; // { dg-error \"invalid conversion\" }\n+  std::weak_ordering::equivalent == 1;    // { dg-error \"invalid conversion\" }\n+  std::strong_ordering::equivalent == 1;  // { dg-error \"invalid conversion\" }\n+\n+  constexpr void* p = nullptr;\n+  std::partial_ordering::equivalent == p; // { dg-error \"invalid conversion\" }\n+  std::weak_ordering::equivalent == p;    // { dg-error \"invalid conversion\" }\n+  std::strong_ordering::equivalent == p;  // { dg-error \"invalid conversion\" }\n+\n+  // Ideally these would be ill-formed, but the current code accepts it.\n+  std::partial_ordering::equivalent == nullptr;\n+  std::weak_ordering::equivalent == nullptr;\n+  std::strong_ordering::equivalent == nullptr;\n+}"}]}