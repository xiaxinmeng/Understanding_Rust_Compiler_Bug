{"sha": "a75ea627dde8af5b318341d3d2e37b70062f2737", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTc1ZWE2MjdkZGU4YWY1YjMxODM0MWQzZDJlMzdiNzAwNjJmMjczNw==", "commit": {"author": {"name": "Stephane Carrez", "email": "stcarrez@nerim.fr", "date": "2004-03-07T10:00:30Z"}, "committer": {"name": "Stephane Carrez", "email": "ciceron@gcc.gnu.org", "date": "2004-03-07T10:00:30Z"}, "message": "m68hc11.c (m68hc11_gen_movhi): Use 2,-sp to push the stack register.\n\n\t* config/m68hc11/m68hc11.c (m68hc11_gen_movhi): Use 2,-sp to push\n\tthe stack register.\n\t(expand_prologue): Don't make an interrupt or a trap handler a far\n\tsymbol.\n\t(m68hc11_initial_elimination_offset): Likewise.\n\nFrom-SVN: r79058", "tree": {"sha": "dd50c116b1a367e9af99451afd2bbfc84beb6dff", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dd50c116b1a367e9af99451afd2bbfc84beb6dff"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a75ea627dde8af5b318341d3d2e37b70062f2737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75ea627dde8af5b318341d3d2e37b70062f2737", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a75ea627dde8af5b318341d3d2e37b70062f2737", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a75ea627dde8af5b318341d3d2e37b70062f2737/comments", "author": null, "committer": null, "parents": [{"sha": "7179b6dbfef5c4cf3ef9bb5e21bbb43bae757aa5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7179b6dbfef5c4cf3ef9bb5e21bbb43bae757aa5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7179b6dbfef5c4cf3ef9bb5e21bbb43bae757aa5"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "4509825e0edd957df7ac838aa8a018e9ca1102ba", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75ea627dde8af5b318341d3d2e37b70062f2737/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75ea627dde8af5b318341d3d2e37b70062f2737/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=a75ea627dde8af5b318341d3d2e37b70062f2737", "patch": "@@ -1,3 +1,11 @@\n+2004-03-06  Stephane Carrez  <stcarrez@nerim.fr>\n+\n+\t* config/m68hc11/m68hc11.c (m68hc11_gen_movhi): Use 2,-sp to push\n+\tthe stack register.\n+\t(expand_prologue): Don't make an interrupt or a trap handler a far\n+\tsymbol.\n+\t(m68hc11_initial_elimination_offset): Likewise.\n+\n 2004-03-06  Richard Henderson  <rth@redhat.com>\n \n \t* config/alpha/alpha.c (alpha_in_small_data_p): False for functions."}, {"sha": "9fb9060555fadbfa6778214a13e2ce75e0846172", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a75ea627dde8af5b318341d3d2e37b70062f2737/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a75ea627dde8af5b318341d3d2e37b70062f2737/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=a75ea627dde8af5b318341d3d2e37b70062f2737", "patch": "@@ -1402,15 +1402,19 @@ m68hc11_initial_elimination_offset (int from, int to)\n   /* For a trap handler, we must take into account the registers which\n      are pushed on the stack during the trap (except the PC).  */\n   func_attr = TYPE_ATTRIBUTES (TREE_TYPE (current_function_decl));\n+  current_function_interrupt = lookup_attribute (\"interrupt\",\n+\t\t\t\t\t\t func_attr) != NULL_TREE;\n+  trap_handler = lookup_attribute (\"trap\", func_attr) != NULL_TREE;\n \n   if (lookup_attribute (\"far\", func_attr) != 0)\n     current_function_far = 1;\n   else if (lookup_attribute (\"near\", func_attr) != 0)\n     current_function_far = 0;\n   else\n-    current_function_far = TARGET_LONG_CALLS != 0;\n+    current_function_far = (TARGET_LONG_CALLS != 0\n+                            && !current_function_interrupt\n+                            && !trap_handler);\n \n-  trap_handler = lookup_attribute (\"trap\", func_attr) != NULL_TREE;\n   if (trap_handler && from == ARG_POINTER_REGNUM)\n     size = 7;\n \n@@ -1690,7 +1694,9 @@ expand_prologue (void)\n   else if (lookup_attribute (\"near\", func_attr) != NULL_TREE)\n     current_function_far = 0;\n   else\n-    current_function_far = TARGET_LONG_CALLS != 0;\n+    current_function_far = (TARGET_LONG_CALLS != 0\n+                            && !current_function_interrupt\n+                            && !current_function_trap);\n \n   /* Get the scratch register to build the frame and push registers.\n      If the first argument is a 32-bit quantity, the D+X registers\n@@ -3235,7 +3241,7 @@ m68hc11_gen_movhi (rtx insn, rtx *operands)\n \t      output_asm_insn (\"psh%1\", operands);\n \t      break;\n             case HARD_SP_REGNUM:\n-              output_asm_insn (\"sts\\t-2,sp\", operands);\n+              output_asm_insn (\"sts\\t2,-sp\", operands);\n               break;\n \t    default:\n \t      abort ();"}]}