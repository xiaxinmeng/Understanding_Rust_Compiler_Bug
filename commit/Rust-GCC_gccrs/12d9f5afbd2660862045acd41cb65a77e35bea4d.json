{"sha": "12d9f5afbd2660862045acd41cb65a77e35bea4d", "node_id": "C_kwDOANBUbNoAKDEyZDlmNWFmYmQyNjYwODYyMDQ1YWNkNDFjYjY1YTc3ZTM1YmVhNGQ", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-10-20T10:58:52Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-10-20T10:58:52Z"}, "message": "libgomp: Add offload_device_gcn check, add requires-4a.c test\n\nDuplicate libgomp.c-c++-common/requires-4.c (as ...-4a.c) but\nwith using a heap-allocated instead of static memory for a variable.\n\nThis change and the added offload_device_gcn check prepare for\npseudo-USM, where the device hardware cannot access all host\nmemory but only managed and pinned memory; for those, requires-4.c\nwill fail and the new check permits to add\n  target { ! { offload_device_nvptx || offload_device_gcn } }\nto requires-4.c; however, it has not been added yet as pseuo-USM\nsupport is not yet on mainline. (Review is pending for the USM\npatches.)\n\ninclude/ChangeLog:\n\n\t* gomp-constants.h (GOMP_DEVICE_HSA): Comment out unused define.\n\nlibgomp/ChangeLog:\n\n\t* testsuite/lib/libgomp.exp (check_effective_target_offload_device_gcn):\n\tNew.\n\t* testsuite/libgomp.c-c++-common/on_device_arch.h (device_arch_gcn,\n\ton_device_arch_gcn): New.\n\t* testsuite/libgomp.c-c++-common/requires-4a.c: New test; copied from\n\trequires-4.c but using heap-allocated memory.", "tree": {"sha": "9f6ce9c506c62938f9f40147dac4fa259e6fe7af", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f6ce9c506c62938f9f40147dac4fa259e6fe7af"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/12d9f5afbd2660862045acd41cb65a77e35bea4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d9f5afbd2660862045acd41cb65a77e35bea4d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/12d9f5afbd2660862045acd41cb65a77e35bea4d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/12d9f5afbd2660862045acd41cb65a77e35bea4d/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5362b5cc8dba9de70904613fff1d5391a9c087ce", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5362b5cc8dba9de70904613fff1d5391a9c087ce", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5362b5cc8dba9de70904613fff1d5391a9c087ce"}], "stats": {"total": 66, "additions": 65, "deletions": 1}, "files": [{"sha": "fac7316b858384eb356326efe51667d3db08426d", "filename": "include/gomp-constants.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d9f5afbd2660862045acd41cb65a77e35bea4d/include%2Fgomp-constants.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d9f5afbd2660862045acd41cb65a77e35bea4d/include%2Fgomp-constants.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2Fgomp-constants.h?ref=12d9f5afbd2660862045acd41cb65a77e35bea4d", "patch": "@@ -230,7 +230,7 @@ enum gomp_map_kind\n #define GOMP_DEVICE_NOT_HOST\t\t4\n #define GOMP_DEVICE_NVIDIA_PTX\t\t5\n #define GOMP_DEVICE_INTEL_MIC\t\t6\n-#define GOMP_DEVICE_HSA\t\t\t7\n+/* #define GOMP_DEVICE_HSA\t\t7 removed.  */\n #define GOMP_DEVICE_GCN\t\t\t8\n \n /* We have a compatibility issue.  OpenMP 5.2 introduced"}, {"sha": "4b8c64de8a5d74eab4111d84f668d24fd64be6e2", "filename": "libgomp/testsuite/lib/libgomp.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d9f5afbd2660862045acd41cb65a77e35bea4d/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d9f5afbd2660862045acd41cb65a77e35bea4d/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flib%2Flibgomp.exp?ref=12d9f5afbd2660862045acd41cb65a77e35bea4d", "patch": "@@ -415,6 +415,18 @@ proc check_effective_target_offload_device_nvptx { } {\n     } ]\n }\n \n+# Return 1 if using a GCN offload device.\n+proc check_effective_target_offload_device_gcn { } {\n+    return [check_runtime_nocache offload_device_gcn {\n+      #include <omp.h>\n+      #include \"testsuite/libgomp.c-c++-common/on_device_arch.h\"\n+      int main ()\n+\t{\n+\t  return !on_device_arch_gcn ();\n+\t}\n+    } ]\n+}\n+\n # Return 1 if at least one Nvidia GPU is accessible.\n \n proc check_effective_target_openacc_nvidia_accel_present { } {"}, {"sha": "6f66dbd784c5f37cbf230ea4edd8f5c7d0b16dea", "filename": "libgomp/testsuite/libgomp.c-c++-common/on_device_arch.h", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d9f5afbd2660862045acd41cb65a77e35bea4d/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fon_device_arch.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d9f5afbd2660862045acd41cb65a77e35bea4d/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fon_device_arch.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Fon_device_arch.h?ref=12d9f5afbd2660862045acd41cb65a77e35bea4d", "patch": "@@ -7,13 +7,20 @@ device_arch_nvptx (void)\n   return GOMP_DEVICE_NVIDIA_PTX;\n }\n \n+/* static */ int\n+device_arch_gcn (void)\n+{\n+  return GOMP_DEVICE_GCN;\n+}\n+\n /* static */ int\n device_arch_intel_mic (void)\n {\n   return GOMP_DEVICE_INTEL_MIC;\n }\n \n #pragma omp declare variant (device_arch_nvptx) match(construct={target},device={arch(nvptx)})\n+#pragma omp declare variant (device_arch_gcn) match(construct={target},device={arch(gcn)})\n #pragma omp declare variant (device_arch_intel_mic) match(construct={target},device={arch(intel_mic)})\n /* static */ int\n device_arch (void)\n@@ -37,6 +44,12 @@ on_device_arch_nvptx ()\n   return on_device_arch (GOMP_DEVICE_NVIDIA_PTX);\n }\n \n+int\n+on_device_arch_gcn ()\n+{\n+  return on_device_arch (GOMP_DEVICE_GCN);\n+}\n+\n int\n on_device_arch_intel_mic ()\n {"}, {"sha": "4fb9783a97ac9b4225f2f3c8785651c7e214cb4c", "filename": "libgomp/testsuite/libgomp.c-c++-common/requires-4a.c", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/12d9f5afbd2660862045acd41cb65a77e35bea4d/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Frequires-4a.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/12d9f5afbd2660862045acd41cb65a77e35bea4d/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Frequires-4a.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2Ftestsuite%2Flibgomp.c-c%2B%2B-common%2Frequires-4a.c?ref=12d9f5afbd2660862045acd41cb65a77e35bea4d", "patch": "@@ -0,0 +1,39 @@\n+/* { dg-additional-options \"-flto\" } */\n+/* { dg-additional-options \"-foffload-options=nvptx-none=-misa=sm_35\" { target { offload_target_nvptx } } } */\n+/* { dg-additional-sources requires-4-aux.c } */\n+\n+/* Same as requires-4.c, but uses heap memory for 'a'.  */\n+\n+/* Check no diagnostic by device-compiler's or host compiler's lto1.\n+   Other file uses: 'requires reverse_offload', but that's inactive as\n+   there are no declare target directives, device constructs nor device routines  */\n+\n+/* Depending on offload device capabilities, it may print something like the\n+   following (only) if GOMP_DEBUG=1:\n+   \"devices present but 'omp requires unified_address, unified_shared_memory, reverse_offload' cannot be fulfilled\"\n+   and in that case does host-fallback execution.\n+\n+   No offload devices support USM at present, so we may verify host-fallback\n+   execution by presence of separate memory spaces.  */\n+\n+#pragma omp requires unified_address,unified_shared_memory\n+\n+int *a;\n+extern void foo (void);\n+\n+int\n+main (void)\n+{\n+  a = (int *) __builtin_calloc (sizeof (int), 10);\n+  #pragma omp target map(to: a)\n+  for (int i = 0; i < 10; i++)\n+    a[i] = i;\n+\n+  for (int i = 0; i < 10; i++)\n+    if (a[i] != i)\n+      __builtin_abort ();\n+\n+  foo ();\n+  __builtin_free (a);\n+  return 0;\n+}"}]}