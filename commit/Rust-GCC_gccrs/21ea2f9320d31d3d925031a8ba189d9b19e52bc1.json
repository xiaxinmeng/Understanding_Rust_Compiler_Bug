{"sha": "21ea2f9320d31d3d925031a8ba189d9b19e52bc1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MjFlYTJmOTMyMGQzMWQzZDkyNTAzMWE4YmExODlkOWIxOWU1MmJjMQ==", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-20T00:16:38Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2021-07-20T00:16:38Z"}, "message": "Daily bump.", "tree": {"sha": "01f8e1d22e3071543cc16bfcc4c1363495eb5f23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/01f8e1d22e3071543cc16bfcc4c1363495eb5f23"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/21ea2f9320d31d3d925031a8ba189d9b19e52bc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21ea2f9320d31d3d925031a8ba189d9b19e52bc1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/21ea2f9320d31d3d925031a8ba189d9b19e52bc1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/21ea2f9320d31d3d925031a8ba189d9b19e52bc1/comments", "author": null, "committer": null, "parents": [{"sha": "476242fa5ceaa91393562814471c385ebfdd41f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/476242fa5ceaa91393562814471c385ebfdd41f3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/476242fa5ceaa91393562814471c385ebfdd41f3"}], "stats": {"total": 191, "additions": 190, "deletions": 1}, "files": [{"sha": "0d931bf85d516a072946073de8f299c880d2384f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ea2f9320d31d3d925031a8ba189d9b19e52bc1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ea2f9320d31d3d925031a8ba189d9b19e52bc1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=21ea2f9320d31d3d925031a8ba189d9b19e52bc1", "patch": "@@ -1,3 +1,85 @@\n+2021-07-19  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* config/elfos.h (CTF_DEBUGGING_INFO): New definition.\n+\t(BTF_DEBUGGING_INFO): Likewise.\n+\t* doc/tm.texi.in: Document the new macros.\n+\t* doc/tm.texi: Regenerated.\n+\t* toplev.c: Guard initialization of debug hooks.\n+\n+2021-07-19  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* flags.h (ctf_debuginfo_p): New function declaration.\n+\t* opts.c (ctf_debuginfo_p): New function definition.\n+\n+2021-07-19  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\tPR target/100208\n+\t* config/gcn/gcn-hsa.h (DRIVER_SELF_SPECS): New.\n+\t(ASM_SPEC): Set -mattr for xnack and sram-ecc.\n+\t* config/gcn/gcn-opts.h (enum sram_ecc_type): New.\n+\t* config/gcn/gcn-valu.md: Add a warning comment.\n+\t* config/gcn/gcn.c (gcn_option_override): Add \"sorry\" for -mxnack.\n+\t(output_file_start): Add xnack and sram-ecc state to \".amdgcn_target\".\n+\t* config/gcn/gcn.md: Add a warning comment.\n+\t* config/gcn/gcn.opt: Add -mxnack and -msram-ecc.\n+\t* config/gcn/mkoffload.c (EF_AMDGPU_MACH_AMDGCN_GFX908): Remove\n+\tSRAM-ECC flag.\n+\t(EF_AMDGPU_XNACK): New.\n+\t(EF_AMDGPU_SRAM_ECC): New.\n+\t(elf_flags): New.\n+\t(copy_early_debug_info): Use elf_flags.\n+\t(main): Handle -mxnack and -msram-ecc options.\n+\t* doc/invoke.texi: Document -mxnack and -msram-ecc.\n+\n+2021-07-19  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/101205\n+\t* config/aarch64/aarch64.md (csneg3_uxtw_insn): Rename to ...\n+\t(*cs<neg_not_cs>3_uxtw_insn4): and extend to NEG_NOT.\n+\n+2021-07-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101505\n+\t* tree-vect-patterns.c (vect_determine_precisions): Walk\n+\tPHIs also for loop vectorization.\n+\n+2021-07-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* gimple.h (gimple_expr_type): Remove.\n+\t* doc/gimple.texi: Remove gimple_expr_type documentation.\n+\n+2021-07-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-ssa-sccvn.c (vn_reference_eq): Handle NULL vr->type.\n+\t(ao_ref_init_from_vn_reference): Likewise.\n+\t(fully_constant_reference): Likewise.\n+\t(vn_reference_lookup_call): Do not set vr->type to random\n+\tvalues.\n+\t* tree-ssa-pre.c (compute_avail): Do not try to PRE calls\n+\twithout a value.\n+\t* tree-vect-generic.c (expand_vector_piecewise): Pass in\n+\twhether we expanded parallel.\n+\t(expand_vector_parallel): Adjust.\n+\t(expand_vector_addition): Likewise.\n+\t(expand_vector_comparison): Likewise.\n+\t(expand_vector_operation): Likewise.\n+\t(expand_vector_scalar_condition): Likewise.\n+\t(expand_vector_conversion): Likewise.\n+\n+2021-07-19  Richard Biener  <rguenther@suse.de>\n+\n+\t* tree-vrp.c (register_edge_assert_for_2): Use the\n+\ttype from the LHS.\n+\t(vrp_folder::fold_predicate_in): Likewise.\n+\t* vr-values.c (gimple_assign_nonzero_p): Likewise.\n+\t(vr_values::extract_range_from_comparison): Likewise.\n+\t(vr_values::extract_range_from_ubsan_builtin): Use the\n+\ttype of the first operand.\n+\t(vr_values::extract_range_basic): Push down type\n+\tcomputation, use the appropriate LHS.\n+\t(vr_values::extract_range_from_assignment): Use the\n+\ttype of the LHS.\n+\n 2021-07-18  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/101492"}, {"sha": "4d9def369fd0cc785a44e81ac1ce3f396b17a192", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ea2f9320d31d3d925031a8ba189d9b19e52bc1/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ea2f9320d31d3d925031a8ba189d9b19e52bc1/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=21ea2f9320d31d3d925031a8ba189d9b19e52bc1", "patch": "@@ -1 +1 @@\n-20210719\n+20210720"}, {"sha": "f32fe08318b8626ee657fbf397d3a8e94dae68f8", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ea2f9320d31d3d925031a8ba189d9b19e52bc1/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ea2f9320d31d3d925031a8ba189d9b19e52bc1/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=21ea2f9320d31d3d925031a8ba189d9b19e52bc1", "patch": "@@ -1,3 +1,37 @@\n+2021-07-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101503\n+\t* constraint-manager.cc (constraint_manager::add_constraint): Use\n+\tcan_have_associated_state_p rather than testing for unknown.\n+\t(constraint_manager::get_or_add_equiv_class): Likewise.\n+\t* program-state.cc (sm_state_map::set_state): Likewise.\n+\t(sm_state_map::impl_set_state): Add assertion.\n+\t* region-model-manager.cc\n+\t(region_model_manager::maybe_fold_unaryop): Handle poisoned\n+\tvalues.\n+\t(region_model_manager::maybe_fold_binop): Move handling of unknown\n+\tvalues...\n+\t(region_model_manager::get_or_create_binop): ...to here, and\n+\tgeneralize to use can_have_associated_state_p.\n+\t(region_model_manager::maybe_fold_sub_svalue): Use\n+\tcan_have_associated_state_p rather than testing for unknown.\n+\t(region_model_manager::maybe_fold_repeated_svalue): Use unknown\n+\twhen the size or repeated value is \"unknown\"/\"poisoned\".\n+\t* region-model.cc (region_model::purge_state_involving): Reject\n+\tattempts to purge unknown/poisoned svalues, as these svalues\n+\tshould not have state associated with them.\n+\t* svalue.cc (sub_svalue::sub_svalue): Assert that we're building\n+\ton top of an svalue with can_have_associated_state_p.\n+\t(repeated_svalue::repeated_svalue): Likewise.\n+\t(bits_within_svalue::bits_within_svalue): Likewise.\n+\t* svalue.h (svalue::can_have_associated_state_p): New.\n+\t(unknown_svalue::can_have_associated_state_p): New.\n+\t(poisoned_svalue::can_have_associated_state_p): New.\n+\t(unaryop_svalue::unaryop_svalue): Assert that we're building on\n+\ttop of an svalue with can_have_associated_state_p.\n+\t(binop_svalue::binop_svalue): Likewise.\n+\t(widening_svalue::widening_svalue): Likewise.\n+\n 2021-07-16  David Malcolm  <dmalcolm@redhat.com>\n \n \t* analyzer.h (enum access_direction): New."}, {"sha": "bb46293ab248125d81c742174a0ad193511946f8", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ea2f9320d31d3d925031a8ba189d9b19e52bc1/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ea2f9320d31d3d925031a8ba189d9b19e52bc1/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=21ea2f9320d31d3d925031a8ba189d9b19e52bc1", "patch": "@@ -1,3 +1,21 @@\n+2021-07-19  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95520\n+\t* coroutines.cc (struct coroutine_info): Add fields for\n+\tactor and destroy function decls.\n+\t(to_ramp): New.\n+\t(coro_get_ramp_function): New.\n+\t(coro_get_actor_function): New.\n+\t(coro_get_destroy_function): New.\n+\t(act_des_fn): Set up mapping between ramp, actor and\n+\tdestroy functions.\n+\t(morph_fn_to_coro): Adjust interface to the builder for\n+\thelper function decls.\n+\t* cp-tree.h (DECL_ACTOR_FN, DECL_DESTROY_FN, DECL_RAMP_FN,\n+\tJOIN_STR): New.\n+\t* mangle.c (write_encoding): Handle coroutine helpers.\n+\t(write_unqualified_name): Handle lambda coroutine helpers.\n+\n 2021-07-16  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/101233"}, {"sha": "501f5ab97030b42239f71c2d7452a72d38245c55", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ea2f9320d31d3d925031a8ba189d9b19e52bc1/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ea2f9320d31d3d925031a8ba189d9b19e52bc1/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=21ea2f9320d31d3d925031a8ba189d9b19e52bc1", "patch": "@@ -1,3 +1,52 @@\n+2021-07-19  Martin Sebor  <msebor@redhat.com>\n+\n+\t* gcc.target/powerpc/pr93658.c: Suppress valid warnings.\n+\n+2021-07-19  Iain Sandoe  <iain@sandoe.co.uk>\n+\n+\tPR c++/95520\n+\t* g++.dg/coroutines/pr95520.C: New test.\n+\n+2021-07-19  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/101503\n+\t* gcc.dg/analyzer/pr101503.c: New test.\n+\n+2021-07-19  Indu Bhagat  <indu.bhagat@oracle.com>\n+\n+\t* gcc.dg/debug/btf/btf.exp: Do not run BTF testsuite if target does not\n+\tsupport BTF format. Remove redundant check for AIX.\n+\t* gcc.dg/debug/ctf/ctf.exp: Do not run CTF testsuite if target does not\n+\tsupport CTF format. Remove redundant check for AIX.\n+\t* lib/gcc-dg.exp: Remove redundant check for AIX.\n+\n+2021-07-19  Andrew Stubbs  <ams@codesourcery.com>\n+\n+\tPR target/100208\n+\t* gcc.target/gcn/sram-ecc-1.c: New test.\n+\t* gcc.target/gcn/sram-ecc-2.c: New test.\n+\t* gcc.target/gcn/sram-ecc-3.c: New test.\n+\t* gcc.target/gcn/sram-ecc-4.c: New test.\n+\t* gcc.target/gcn/sram-ecc-5.c: New test.\n+\t* gcc.target/gcn/sram-ecc-6.c: New test.\n+\t* gcc.target/gcn/sram-ecc-7.c: New test.\n+\t* gcc.target/gcn/sram-ecc-8.c: New test.\n+\n+2021-07-19  Andrew Pinski  <apinski@marvell.com>\n+\n+\tPR target/101205\n+\t* gcc.target/aarch64/csinv-neg-1.c: New test.\n+\n+2021-07-19  Marek Polacek  <polacek@redhat.com>\n+\n+\tDR 2126\n+\t* g++.dg/cpp0x/constexpr-temp2.C: New test.\n+\n+2021-07-19  Richard Biener  <rguenther@suse.de>\n+\n+\tPR tree-optimization/101505\n+\t* gcc.dg/vect/pr101505.c: New testcase.\n+\n 2021-07-18  H.J. Lu  <hjl.tools@gmail.com>\n \n \tPR target/101492"}, {"sha": "6af696816cad55f8b4beb478f361d122f6eb99c5", "filename": "libgomp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/21ea2f9320d31d3d925031a8ba189d9b19e52bc1/libgomp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/21ea2f9320d31d3d925031a8ba189d9b19e52bc1/libgomp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgomp%2FChangeLog?ref=21ea2f9320d31d3d925031a8ba189d9b19e52bc1", "patch": "@@ -1,3 +1,9 @@\n+2021-07-19  Thomas Schwinge  <thomas@codesourcery.com>\n+\n+\tPR target/101484\n+\t* config/gcn/team.c: Apply '-Werror=array-bounds' work-around.\n+\t* libgomp.h [__AMDGCN__]: Likewise.\n+\n 2021-07-13  Jakub Jelinek  <jakub@redhat.com>\n \t    Florian Weimer  <fweimer@redhat.com>\n "}]}