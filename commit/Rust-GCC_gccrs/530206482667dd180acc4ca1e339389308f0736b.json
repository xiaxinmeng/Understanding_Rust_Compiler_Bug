{"sha": "530206482667dd180acc4ca1e339389308f0736b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTMwMjA2NDgyNjY3ZGQxODBhY2M0Y2ExZTMzOTM4OTMwOGYwNzM2Yg==", "commit": {"author": {"name": "Richard Guenther", "email": "rguenther@suse.de", "date": "2011-07-19T10:57:15Z"}, "committer": {"name": "Richard Biener", "email": "rguenth@gcc.gnu.org", "date": "2011-07-19T10:57:15Z"}, "message": "gimplify.c (gimplify_expr): Gimplify TRUTH_NOT_EXPR as BIT_XOR_EXPR, same as the RTL expander does.\n\n2011-07-19  Richard Guenther  <rguenther@suse.de>\n\n\t* gimplify.c (gimplify_expr): Gimplify TRUTH_NOT_EXPR as\n\tBIT_XOR_EXPR, same as the RTL expander does.\n\t* tree-cfg.c (verify_expr): Disallow TRUTH_NOT_EXPR in the gimple IL.\n\t(verify_gimple_assign_unary): Likewise.\n\t* tree-ssa-propagate.c (valid_gimple_rhs_p): Disallow TRUTH_*_EXPR.\n\t* tree-ssa-forwprop.c (forward_propagate_comparison): Handle\n\tBIT_NOT_EXPR and BIT_XOR_EXPR instead of TRUTH_NOT_EXPR.\n\n\t* gcc.dg/tree-ssa/bool-10.c: Adjust expected pattern.\n\t* gcc.dg/tree-ssa/bool-11.c: Likewise.\n\t* gcc.dg/torture/20110719-1.c: New testcase.\n\nFrom-SVN: r176442", "tree": {"sha": "fd9ee6dcb0f9d2b3d7aaed6a958cf751208c3602", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fd9ee6dcb0f9d2b3d7aaed6a958cf751208c3602"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/530206482667dd180acc4ca1e339389308f0736b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530206482667dd180acc4ca1e339389308f0736b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/530206482667dd180acc4ca1e339389308f0736b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/530206482667dd180acc4ca1e339389308f0736b/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b8b2b0094a9047a1ad476d96f0d20d4b56fca625", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b8b2b0094a9047a1ad476d96f0d20d4b56fca625", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b8b2b0094a9047a1ad476d96f0d20d4b56fca625"}], "stats": {"total": 95, "additions": 53, "deletions": 42}, "files": [{"sha": "2982c9bc13005060511510492e8638ed0a5a04a6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530206482667dd180acc4ca1e339389308f0736b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530206482667dd180acc4ca1e339389308f0736b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=530206482667dd180acc4ca1e339389308f0736b", "patch": "@@ -1,3 +1,13 @@\n+2011-07-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gimplify.c (gimplify_expr): Gimplify TRUTH_NOT_EXPR as\n+\tBIT_XOR_EXPR, same as the RTL expander does.\n+\t* tree-cfg.c (verify_expr): Disallow TRUTH_NOT_EXPR in the gimple IL.\n+\t(verify_gimple_assign_unary): Likewise.\n+\t* tree-ssa-propagate.c (valid_gimple_rhs_p): Disallow TRUTH_*_EXPR.\n+\t* tree-ssa-forwprop.c (forward_propagate_comparison): Handle\n+\tBIT_NOT_EXPR and BIT_XOR_EXPR instead of TRUTH_NOT_EXPR.\n+\n 2011-07-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/49768"}, {"sha": "03e2ca622cb23116b7a96a61b16bcc0cc91550b0", "filename": "gcc/gimplify.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530206482667dd180acc4ca1e339389308f0736b/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530206482667dd180acc4ca1e339389308f0736b/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=530206482667dd180acc4ca1e339389308f0736b", "patch": "@@ -6787,17 +6787,24 @@ gimplify_expr (tree *expr_p, gimple_seq *pre_p, gimple_seq *post_p,\n \n \tcase TRUTH_NOT_EXPR:\n \t  {\n-\t    tree orig_type = TREE_TYPE (*expr_p);\n+\t    tree type = TREE_TYPE (*expr_p);\n+\t    /* The parsers are careful to generate TRUTH_NOT_EXPR\n+\t       only with operands that are always zero or one.\n+\t       We do not fold here but handle the only interesting case\n+\t       manually, as fold may re-introduce the TRUTH_NOT_EXPR.  */\n \t    *expr_p = gimple_boolify (*expr_p);\n-\t    if (!useless_type_conversion_p (orig_type, TREE_TYPE (*expr_p)))\n-\t      {\n-\t\t*expr_p = fold_convert_loc (saved_location, orig_type, *expr_p);\n-\t\tret = GS_OK;\n-\t\tbreak;\n-\t      }\n-\t    ret = gimplify_expr (&TREE_OPERAND (*expr_p, 0), pre_p, post_p,\n-\t\t\t\t is_gimple_val, fb_rvalue);\n-\t    recalculate_side_effects (*expr_p);\n+\t    if (TYPE_PRECISION (TREE_TYPE (*expr_p)) == 1)\n+\t      *expr_p = build1_loc (input_location, BIT_NOT_EXPR,\n+\t\t\t\t    TREE_TYPE (*expr_p),\n+\t\t\t\t    TREE_OPERAND (*expr_p, 0));\n+\t    else\n+\t      *expr_p = build2_loc (input_location, BIT_XOR_EXPR,\n+\t\t\t\t    TREE_TYPE (*expr_p),\n+\t\t\t\t    TREE_OPERAND (*expr_p, 0),\n+\t\t\t\t    build_int_cst (TREE_TYPE (*expr_p), 1));\n+\t    if (!useless_type_conversion_p (type, TREE_TYPE (*expr_p)))\n+\t      *expr_p = fold_convert_loc (input_location, type, *expr_p);\n+\t    ret = GS_OK;\n \t    break;\n \t  }\n "}, {"sha": "d87ce8d7464e62f9f5ac4ddd7d981c5df51b4a36", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=530206482667dd180acc4ca1e339389308f0736b", "patch": "@@ -1,3 +1,9 @@\n+2011-07-19  Richard Guenther  <rguenther@suse.de>\n+\n+\t* gcc.dg/tree-ssa/bool-10.c: Adjust expected pattern.\n+\t* gcc.dg/tree-ssa/bool-11.c: Likewise.\n+\t* gcc.dg/torture/20110719-1.c: New testcase.\n+\n 2011-07-19  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR tree-optimization/49768"}, {"sha": "7797e08ad2b6b08f08356a4412059432b6f93824", "filename": "gcc/testsuite/gcc.dg/torture/20110719-1.c", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20110719-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20110719-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2F20110719-1.c?ref=530206482667dd180acc4ca1e339389308f0736b", "patch": "@@ -0,0 +1,10 @@\n+extern void abort (void);\n+int i;\n+int main()\n+{\n+  int b = i != 0;\n+  int c = ~b;\n+  if (c != -1)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "58d064539a76a7b817ba4ad7bc842fc1443a0c40", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-10.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-10.c?ref=530206482667dd180acc4ca1e339389308f0736b", "patch": "@@ -9,6 +9,6 @@ int f(_Bool x)\n /* There should be no != 1 which is produced by the front-end as\n    bool_var != 1 is the same as !bool_var. */\n /* { dg-final { scan-tree-dump-times \"!= 1\" 0 \"optimized\"} } */\n-/* { dg-final { scan-tree-dump-times \"!x\" 1 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"~x\" 1 \"optimized\"} } */\n \n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "ee266c79cb96325834b7b8a02855193bd84ecb7a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/bool-11.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbool-11.c?ref=530206482667dd180acc4ca1e339389308f0736b", "patch": "@@ -9,6 +9,6 @@ int f(_Bool x)\n /* There should be no == 0 which is produced by the front-end as\n    bool_var == 0 is the same as !bool_var. */\n /* { dg-final { scan-tree-dump-times \"== 0\" 0 \"optimized\"} } */\n-/* { dg-final { scan-tree-dump-times \"!x\" 1 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"~x\" 1 \"optimized\"} } */\n \n /* { dg-final { cleanup-tree-dump \"optimized\" } } */"}, {"sha": "cd134728bb7d2bbf5df69aedb86898f11c7af786", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=530206482667dd180acc4ca1e339389308f0736b", "patch": "@@ -2680,15 +2680,15 @@ verify_expr (tree *tp, int *walk_subtrees, void *data ATTRIBUTE_UNUSED)\n       break;\n \n     case NON_LVALUE_EXPR:\n-\tgcc_unreachable ();\n+    case TRUTH_NOT_EXPR:\n+      gcc_unreachable ();\n \n     CASE_CONVERT:\n     case FIX_TRUNC_EXPR:\n     case FLOAT_EXPR:\n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case BIT_NOT_EXPR:\n-    case TRUTH_NOT_EXPR:\n       CHECK_OP (0, \"invalid operand to unary operator\");\n       break;\n \n@@ -3344,19 +3344,6 @@ verify_gimple_assign_unary (gimple stmt)\n       /* FIXME.  */\n       return false;\n \n-    case TRUTH_NOT_EXPR:\n-      /* We require two-valued operand types.  */\n-      if (!(TREE_CODE (rhs1_type) == BOOLEAN_TYPE\n-\t    || (INTEGRAL_TYPE_P (rhs1_type)\n-\t\t&& TYPE_PRECISION (rhs1_type) == 1)))\n-        {\n-\t  error (\"invalid types in truth not\");\n-\t  debug_generic_expr (lhs_type);\n-\t  debug_generic_expr (rhs1_type);\n-\t  return true;\n-        }\n-      break;\n-\n     case NEGATE_EXPR:\n     case ABS_EXPR:\n     case BIT_NOT_EXPR:"}, {"sha": "1f2a60c49ba1d8f6ce5b60b8f122ca65a5207d3d", "filename": "gcc/tree-ssa-forwprop.c", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftree-ssa-forwprop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftree-ssa-forwprop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-forwprop.c?ref=530206482667dd180acc4ca1e339389308f0736b", "patch": "@@ -1127,7 +1127,8 @@ forward_propagate_comparison (gimple stmt)\n       && (CONVERT_EXPR_CODE_P (gimple_assign_rhs_code (use_stmt))\n \t  || TREE_CODE_CLASS (gimple_assign_rhs_code (use_stmt))\n \t     == tcc_comparison\n-          || gimple_assign_rhs_code (use_stmt) == TRUTH_NOT_EXPR)\n+          || gimple_assign_rhs_code (use_stmt) == BIT_NOT_EXPR\n+\t  || gimple_assign_rhs_code (use_stmt) == BIT_XOR_EXPR)\n       && INTEGRAL_TYPE_P (TREE_TYPE (gimple_assign_lhs (use_stmt))))\n     {\n       tree lhs = gimple_assign_lhs (use_stmt);\n@@ -1164,7 +1165,10 @@ forward_propagate_comparison (gimple stmt)\n       }\n       /* We can propagate the condition into a statement that\n \t computes the logical negation of the comparison result.  */\n-      else if (gimple_assign_rhs_code (use_stmt) == TRUTH_NOT_EXPR)\n+      else if ((gimple_assign_rhs_code (use_stmt) == BIT_NOT_EXPR\n+\t\t&& TYPE_PRECISION (TREE_TYPE (lhs)) == 1)\n+\t       || (gimple_assign_rhs_code (use_stmt) == BIT_XOR_EXPR\n+\t\t   && integer_onep (gimple_assign_rhs2 (use_stmt))))\n \t{\n \t  tree type = TREE_TYPE (gimple_assign_rhs1 (stmt));\n \t  bool nans = HONOR_NANS (TYPE_MODE (type));"}, {"sha": "64c3fdfe5704f16cdb662f994cc511b76298ff28", "filename": "gcc/tree-ssa-propagate.c", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftree-ssa-propagate.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/530206482667dd180acc4ca1e339389308f0736b/gcc%2Ftree-ssa-propagate.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-propagate.c?ref=530206482667dd180acc4ca1e339389308f0736b", "patch": "@@ -601,19 +601,6 @@ valid_gimple_rhs_p (tree expr)\n           }\n           break;\n \n-\tcase TRUTH_NOT_EXPR:\n-\t  if (!is_gimple_val (TREE_OPERAND (expr, 0)))\n-\t    return false;\n-\t  break;\n-\n-\tcase TRUTH_AND_EXPR:\n-\tcase TRUTH_XOR_EXPR:\n-\tcase TRUTH_OR_EXPR:\n-\t  if (!is_gimple_val (TREE_OPERAND (expr, 0))\n-\t      || !is_gimple_val (TREE_OPERAND (expr, 1)))\n-\t    return false;\n-\t  break;\n-\n \tdefault:\n \t  return false;\n \t}"}]}