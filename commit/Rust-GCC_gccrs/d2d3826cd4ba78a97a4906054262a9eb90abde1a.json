{"sha": "d2d3826cd4ba78a97a4906054262a9eb90abde1a", "node_id": "C_kwDOANBUbNoAKGQyZDM4MjZjZDRiYTc4YTk3YTQ5MDYwNTQyNjJhOWViOTBhYmRlMWE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-22T00:23:19Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-12-22T10:14:52Z"}, "message": "libstdc++: Define and use variable templates in <chrono>\n\nThi defines a variable template for the internal __is_duration helper\ntrait, defines a new __is_time_point_v variable template (to be used in\na subsequent commit), and adds explicit specializations of the standard\nchrono::treat_as_floating_point trait for common types.\n\nA fast path is added to chrono::duration_cast for the no-op case where\nno conversion is needed.\n\nFinally, some SFINAE constraints are simplified by using the\n__enable_if_t alias, or by using variable templates.\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/chrono.h (__is_duration_v, __is_time_point_v):\n\tNew variable templates.\n\t(duration_cast): Add simplified definition for noconv case.\n\t(treat_as_floating_point_v): Add explicit specializations.\n\t(duration::operator%=, floor, ceil, round): Simplify SFINAE\n\tconstraints.", "tree": {"sha": "3a3b52359a5867fc7668ea2564dc1fd40d7fb7f9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3a3b52359a5867fc7668ea2564dc1fd40d7fb7f9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d2d3826cd4ba78a97a4906054262a9eb90abde1a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d3826cd4ba78a97a4906054262a9eb90abde1a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d2d3826cd4ba78a97a4906054262a9eb90abde1a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d2d3826cd4ba78a97a4906054262a9eb90abde1a/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec8f914f572ce45dbf5743c801c6a101e9a785c7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ec8f914f572ce45dbf5743c801c6a101e9a785c7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ec8f914f572ce45dbf5743c801c6a101e9a785c7"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "56751d1c3a0fb4e096f975e34f1fd5b9f75357e6", "filename": "libstdc++-v3/include/bits/chrono.h", "status": "modified", "additions": 45, "deletions": 17, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d2d3826cd4ba78a97a4906054262a9eb90abde1a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d2d3826cd4ba78a97a4906054262a9eb90abde1a/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fchrono.h?ref=d2d3826cd4ba78a97a4906054262a9eb90abde1a", "patch": "@@ -244,6 +244,17 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       using __disable_if_is_duration\n \t= typename enable_if<!__is_duration<_Tp>::value, _Tp>::type;\n \n+#if __cpp_variable_templates\n+    template<typename _Tp>\n+      inline constexpr bool __is_duration_v = false;\n+    template<typename _Rep, typename _Period>\n+      inline constexpr bool __is_duration_v<duration<_Rep, _Period>> = true;\n+    template<typename _Tp>\n+      inline constexpr bool __is_time_point_v = false;\n+    template<typename _Clock, typename _Dur>\n+      inline constexpr bool __is_time_point_v<time_point<_Clock, _Dur>> = true;\n+#endif\n+\n     /// @endcond\n \n     /** Convert a `duration` to type `ToDur`.\n@@ -261,13 +272,20 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       constexpr __enable_if_is_duration<_ToDur>\n       duration_cast(const duration<_Rep, _Period>& __d)\n       {\n-\ttypedef typename _ToDur::period\t\t\t\t__to_period;\n-\ttypedef typename _ToDur::rep\t\t\t\t__to_rep;\n-\ttypedef ratio_divide<_Period, __to_period> \t\t__cf;\n-\ttypedef typename common_type<__to_rep, _Rep, intmax_t>::type __cr;\n-\ttypedef  __duration_cast_impl<_ToDur, __cf, __cr,\n-\t\t\t\t      __cf::num == 1, __cf::den == 1> __dc;\n-\treturn __dc::__cast(__d);\n+#if __cpp_inline_variables && __cpp_if_constexpr\n+\tif constexpr (is_same_v<_ToDur, duration<_Rep, _Period>>)\n+\t  return __d;\n+\telse\n+#endif\n+\t{\n+\t  using __to_period = typename _ToDur::period;\n+\t  using __to_rep = typename _ToDur::rep;\n+\t  using __cf = ratio_divide<_Period, __to_period>;\n+\t  using __cr = typename common_type<__to_rep, _Rep, intmax_t>::type;\n+\t  using __dc = __duration_cast_impl<_ToDur, __cf, __cr,\n+\t\t\t\t\t    __cf::num == 1, __cf::den == 1>;\n+\t  return __dc::__cast(__d);\n+\t}\n       }\n \n     /** Trait indicating whether to treat a type as a floating-point type.\n@@ -290,6 +308,19 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     template <typename _Rep>\n       inline constexpr bool treat_as_floating_point_v =\n \ttreat_as_floating_point<_Rep>::value;\n+\n+    template<>\n+      inline constexpr bool treat_as_floating_point_v<int> = false;\n+    template<>\n+      inline constexpr bool treat_as_floating_point_v<long> = false;\n+    template<>\n+      inline constexpr bool treat_as_floating_point_v<long long> = false;\n+    template<>\n+      inline constexpr bool treat_as_floating_point_v<float> = true;\n+    template<>\n+      inline constexpr bool treat_as_floating_point_v<double> = true;\n+    template<>\n+      inline constexpr bool treat_as_floating_point_v<long double> = true;\n #endif // C++17\n \n #if __cplusplus > 201703L\n@@ -632,8 +663,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t// DR 934.\n \ttemplate<typename _Rep2 = rep>\n \t  _GLIBCXX17_CONSTEXPR\n-\t  typename enable_if<!treat_as_floating_point<_Rep2>::value,\n-\t\t\t     duration&>::type\n+\t  __enable_if_t<!treat_as_floating_point<_Rep2>::value, duration&>\n \t  operator%=(const rep& __rhs)\n \t  {\n \t    __r %= __rhs;\n@@ -642,8 +672,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n \ttemplate<typename _Rep2 = rep>\n \t  _GLIBCXX17_CONSTEXPR\n-\t  typename enable_if<!treat_as_floating_point<_Rep2>::value,\n-\t\t\t     duration&>::type\n+\t  __enable_if_t<!treat_as_floating_point<_Rep2>::value, duration&>\n \t  operator%=(const duration& __d)\n \t  {\n \t    __r %= __d.count();\n@@ -1019,7 +1048,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      */\n     template<typename _ToDur, typename _Clock, typename _Dur>\n       [[nodiscard]] constexpr\n-      enable_if_t<__is_duration<_ToDur>::value, time_point<_Clock, _ToDur>>\n+      enable_if_t<__is_duration_v<_ToDur>, time_point<_Clock, _ToDur>>\n       floor(const time_point<_Clock, _Dur>& __tp)\n       {\n \treturn time_point<_Clock, _ToDur>{\n@@ -1040,7 +1069,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      */\n     template<typename _ToDur, typename _Clock, typename _Dur>\n       [[nodiscard]] constexpr\n-      enable_if_t<__is_duration<_ToDur>::value, time_point<_Clock, _ToDur>>\n+      enable_if_t<__is_duration_v<_ToDur>, time_point<_Clock, _ToDur>>\n       ceil(const time_point<_Clock, _Dur>& __tp)\n       {\n \treturn time_point<_Clock, _ToDur>{\n@@ -1062,10 +1091,9 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n      */\n     template<typename _ToDur, typename _Clock, typename _Dur>\n       [[nodiscard]] constexpr\n-      enable_if_t<\n-\t__and_<__is_duration<_ToDur>,\n-\t       __not_<treat_as_floating_point<typename _ToDur::rep>>>::value,\n-\ttime_point<_Clock, _ToDur>>\n+      enable_if_t<__is_duration_v<_ToDur>\n+\t\t    && !treat_as_floating_point_v<typename _ToDur::rep>,\n+\t\t  time_point<_Clock, _ToDur>>\n       round(const time_point<_Clock, _Dur>& __tp)\n       {\n \treturn time_point<_Clock, _ToDur>{"}]}