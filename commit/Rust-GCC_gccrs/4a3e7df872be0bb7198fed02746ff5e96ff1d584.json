{"sha": "4a3e7df872be0bb7198fed02746ff5e96ff1d584", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGEzZTdkZjg3MmJlMGJiNzE5OGZlZDAyNzQ2ZmY1ZTk2ZmYxZDU4NA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2019-01-05T11:12:35Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2019-01-05T11:12:35Z"}, "message": "re PR debug/88635 (Assembler error when building with \"-g -O2 -m32\")\n\n\tPR debug/88635\n\t* dwarf2out.c (const_ok_for_output_1): Reject MINUS that contains\n\tSYMBOL_REF, CODE_LABEL or UNSPEC in subexpressions of second argument.\n\tReject PLUS that contains SYMBOL_REF, CODE_LABEL or UNSPEC in\n\tsubexpressions of both operands.\n\t(mem_loc_descriptor): Handle UNSPEC if target hook acks it and all the\n\tsubrtxes are CONSTANT_P.\n\t* config/i386/i386.c (ix86_const_not_ok_for_debug_p): Revert\n\t2018-11-09 changes.\n\n\t* gcc.dg/debug/dwarf2/pr88635.c: New test.\n\nFrom-SVN: r267594", "tree": {"sha": "97a36f848c0517c5f72bd38b604a7d343cff158b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/97a36f848c0517c5f72bd38b604a7d343cff158b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a3e7df872be0bb7198fed02746ff5e96ff1d584", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3e7df872be0bb7198fed02746ff5e96ff1d584", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a3e7df872be0bb7198fed02746ff5e96ff1d584", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a3e7df872be0bb7198fed02746ff5e96ff1d584/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "46ca1b43ed79cb5627285bee59f15344df18d8d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/46ca1b43ed79cb5627285bee59f15344df18d8d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/46ca1b43ed79cb5627285bee59f15344df18d8d5"}], "stats": {"total": 119, "additions": 100, "deletions": 19}, "files": [{"sha": "e6992b0e982b313840ee27f17075448bd3b337e9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3e7df872be0bb7198fed02746ff5e96ff1d584/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3e7df872be0bb7198fed02746ff5e96ff1d584/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4a3e7df872be0bb7198fed02746ff5e96ff1d584", "patch": "@@ -1,3 +1,15 @@\n+2019-01-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR debug/88635\n+\t* dwarf2out.c (const_ok_for_output_1): Reject MINUS that contains\n+\tSYMBOL_REF, CODE_LABEL or UNSPEC in subexpressions of second argument.\n+\tReject PLUS that contains SYMBOL_REF, CODE_LABEL or UNSPEC in\n+\tsubexpressions of both operands.\n+\t(mem_loc_descriptor): Handle UNSPEC if target hook acks it and all the\n+\tsubrtxes are CONSTANT_P.\n+\t* config/i386/i386.c (ix86_const_not_ok_for_debug_p): Revert\n+\t2018-11-09 changes.\n+\n 2019-01-04  Jan Hubicka  <hubicka@ucw.cz>\n \n \t* params.def (hot-bb-count-ws-permille): Set to 990."}, {"sha": "5cf876a16a7e19f31decc167b96c6751cfcfc4d8", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3e7df872be0bb7198fed02746ff5e96ff1d584/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3e7df872be0bb7198fed02746ff5e96ff1d584/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=4a3e7df872be0bb7198fed02746ff5e96ff1d584", "patch": "@@ -17240,18 +17240,6 @@ ix86_const_not_ok_for_debug_p (rtx x)\n   if (SYMBOL_REF_P (x) && strcmp (XSTR (x, 0), GOT_SYMBOL_NAME) == 0)\n     return true;\n \n-  /* Reject UNSPECs within expressions.  We could accept symbol@gotoff\n-     + literal_constant, but that would hardly come up in practice,\n-     and it's not worth the trouble of having to reject that as an\n-     operand to pretty much anything else.  */\n-  if (UNARY_P (x)\n-      && GET_CODE (XEXP (x, 0)) == UNSPEC)\n-    return true;\n-  if (BINARY_P (x)\n-      && (GET_CODE (XEXP (x, 0)) == UNSPEC\n-\t  || GET_CODE (XEXP (x, 1)) == UNSPEC))\n-    return true;\n-\n   return false;\n }\n \f"}, {"sha": "0d643dd713d2bbd7eb4a197d59c36d526a291b08", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 60, "deletions": 4, "changes": 64, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3e7df872be0bb7198fed02746ff5e96ff1d584/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3e7df872be0bb7198fed02746ff5e96ff1d584/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=4a3e7df872be0bb7198fed02746ff5e96ff1d584", "patch": "@@ -14464,6 +14464,41 @@ const_ok_for_output_1 (rtx rtl)\n     case NOT:\n     case NEG:\n       return false;\n+    case PLUS:\n+      {\n+\t/* Make sure SYMBOL_REFs/UNSPECs are at most in one of the\n+\t   operands.  */\n+\tsubrtx_var_iterator::array_type array;\n+\tbool first = false;\n+\tFOR_EACH_SUBRTX_VAR (iter, array, XEXP (rtl, 0), ALL)\n+\t  if (SYMBOL_REF_P (*iter)\n+\t      || LABEL_P (*iter)\n+\t      || GET_CODE (*iter) == UNSPEC)\n+\t    {\n+\t      first = true;\n+\t      break;\n+\t    }\n+\tif (!first)\n+\t  return true;\n+\tFOR_EACH_SUBRTX_VAR (iter, array, XEXP (rtl, 1), ALL)\n+\t  if (SYMBOL_REF_P (*iter)\n+\t      || LABEL_P (*iter)\n+\t      || GET_CODE (*iter) == UNSPEC)\n+\t    return false;\n+\treturn true;\n+      }\n+    case MINUS:\n+      {\n+\t/* Disallow negation of SYMBOL_REFs or UNSPECs when they\n+\t   appear in the second operand of MINUS.  */\n+\tsubrtx_var_iterator::array_type array;\n+\tFOR_EACH_SUBRTX_VAR (iter, array, XEXP (rtl, 1), ALL)\n+\t  if (SYMBOL_REF_P (*iter)\n+\t      || LABEL_P (*iter)\n+\t      || GET_CODE (*iter) == UNSPEC)\n+\t    return false;\n+\treturn true;\n+      }\n     default:\n       return true;\n     }\n@@ -15607,13 +15642,38 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n \t pool.  */\n     case CONST:\n     case SYMBOL_REF:\n+    case UNSPEC:\n       if (!is_a <scalar_int_mode> (mode, &int_mode)\n \t  || (GET_MODE_SIZE (int_mode) > DWARF2_ADDR_SIZE\n #ifdef POINTERS_EXTEND_UNSIGNED\n \t      && (int_mode != Pmode || mem_mode == VOIDmode)\n #endif\n \t      ))\n \tbreak;\n+\n+      if (GET_CODE (rtl) == UNSPEC)\n+\t{\n+\t  /* If delegitimize_address couldn't do anything with the UNSPEC, we\n+\t     can't express it in the debug info.  This can happen e.g. with some\n+\t     TLS UNSPECs.  Allow UNSPECs formerly from CONST that the backend\n+\t     approves.  */\n+\t  bool not_ok = false;\n+\t  subrtx_var_iterator::array_type array;\n+\t  FOR_EACH_SUBRTX_VAR (iter, array, rtl, ALL)\n+\t    if ((*iter != rtl && !CONSTANT_P (*iter))\n+\t\t|| !const_ok_for_output_1 (*iter))\n+\t      {\n+\t\tnot_ok = true;\n+\t\tbreak;\n+\t      }\n+\n+\t  if (not_ok)\n+\t    break;\n+\n+\t  rtl = gen_rtx_CONST (GET_MODE (rtl), rtl);\n+\t  goto symref;\n+\t}\n+\n       if (GET_CODE (rtl) == SYMBOL_REF\n \t  && SYMBOL_REF_TLS_MODEL (rtl) != TLS_MODEL_NONE)\n \t{\n@@ -16282,7 +16342,6 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n     case VEC_CONCAT:\n     case VEC_DUPLICATE:\n     case VEC_SERIES:\n-    case UNSPEC:\n     case HIGH:\n     case FMA:\n     case STRICT_LOW_PART:\n@@ -16291,9 +16350,6 @@ mem_loc_descriptor (rtx rtl, machine_mode mode,\n     case CLRSB:\n     case CLOBBER:\n     case CLOBBER_HIGH:\n-      /* If delegitimize_address couldn't do anything with the UNSPEC, we\n-\t can't express it in the debug info.  This can happen e.g. with some\n-\t TLS UNSPECs.  */\n       break;\n \n     case CONST_STRING:"}, {"sha": "af59095b05b9a9632d78bd553d60cd4149e2e7d8", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3e7df872be0bb7198fed02746ff5e96ff1d584/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3e7df872be0bb7198fed02746ff5e96ff1d584/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=4a3e7df872be0bb7198fed02746ff5e96ff1d584", "patch": "@@ -1,10 +1,11 @@\n-2019-01-05  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n+2019-01-05  Jakub Jelinek  <jakub@redhat.com>\n \n-\tPR target/60563\n-\tMissing PR entry in the previous commit.\n+\tPR debug/88635\n+\t* gcc.dg/debug/dwarf2/pr88635.c: New test.\n \n 2019-01-05  Dominique d'Humieres  <dominiq@gcc.gnu.org>\n \n+\tPR target/60563\n \t* g++.dg/ext/sync-4.C: Add dg-xfail-run-if for darwin.\n \n 2019-01-04  Martin Sebor  <msebor@redhat.com>"}, {"sha": "02c53d1001aa5d052e7fbc605ac12523ec117a50", "filename": "gcc/testsuite/gcc.dg/debug/dwarf2/pr88635.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a3e7df872be0bb7198fed02746ff5e96ff1d584/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr88635.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a3e7df872be0bb7198fed02746ff5e96ff1d584/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr88635.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdebug%2Fdwarf2%2Fpr88635.c?ref=4a3e7df872be0bb7198fed02746ff5e96ff1d584", "patch": "@@ -0,0 +1,24 @@\n+/* PR debug/88635 */\n+/* { dg-do assemble } */\n+/* { dg-options \"-g -O2\" } */\n+/* { dg-additional-options \"-fpie\" { target pie } } */\n+\n+static void\n+foo (char *b)\n+{\n+  unsigned c = 0;\n+  --c;\n+  do\n+    if (++*b++ == 0)\n+      break;\n+  while (--c);\n+  if (c == 0)\n+    while (*b++)\n+      ;\n+}\n+\n+void\n+bar (void)\n+{\n+  foo (\"\");\n+}"}]}