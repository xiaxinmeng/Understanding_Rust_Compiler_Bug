{"sha": "ce889f00cd1e8c5fd27628746b53cd8f206e64a3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2U4ODlmMDBjZDFlOGM1ZmQyNzYyODc0NmI1M2NkOGYyMDZlNjRhMw==", "commit": {"author": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-16T19:26:42Z"}, "committer": {"name": "Richard Stallman", "email": "rms@gnu.org", "date": "1992-07-16T19:26:42Z"}, "message": "(build_binary_op): Improve shift warning messages.\n\nFrom-SVN: r1595", "tree": {"sha": "dfd594b6799045ac8a1d6e8bc9b1ef363200a286", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/dfd594b6799045ac8a1d6e8bc9b1ef363200a286"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ce889f00cd1e8c5fd27628746b53cd8f206e64a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce889f00cd1e8c5fd27628746b53cd8f206e64a3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ce889f00cd1e8c5fd27628746b53cd8f206e64a3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ce889f00cd1e8c5fd27628746b53cd8f206e64a3/comments", "author": null, "committer": null, "parents": [{"sha": "74bd77a8c6d93ee63bc3c3f604a64f2862754047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74bd77a8c6d93ee63bc3c3f604a64f2862754047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74bd77a8c6d93ee63bc3c3f604a64f2862754047"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "c542988f1f01bc93800fdf0eb64c7de5e7855e84", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ce889f00cd1e8c5fd27628746b53cd8f206e64a3/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ce889f00cd1e8c5fd27628746b53cd8f206e64a3/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=ce889f00cd1e8c5fd27628746b53cd8f206e64a3", "patch": "@@ -2356,7 +2356,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t      else if (TREE_INT_CST_LOW (op1) < 0)\n \t\twarning (\"shift count is negative\");\n \t      if (TREE_INT_CST_LOW (op1) >= TYPE_PRECISION (type0))\n-\t\twarning (\"shift count exceeds width of value shifted\");\n+\t\twarning (\"shift count >= width of type\");\n \t    }\n \t  /* Use the type of the value to be shifted.\n \t     This is what most traditional C compilers do.  */\n@@ -2381,7 +2381,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t    warning (\"shift count is negative\");\n \t  if (TREE_CODE (op1) == INTEGER_CST\n \t      && TREE_INT_CST_LOW (op1) >= TYPE_PRECISION (type0))\n-\t    warning (\"shift count exceeds width of value shifted\");\n+\t    warning (\"shift count >= width of type\");\n \t  /* Use the type of the value to be shifted.\n \t     This is what most traditional C compilers do.  */\n \t  result_type = type0;\n@@ -2406,7 +2406,7 @@ build_binary_op (code, orig_op0, orig_op1, convert_p)\n \t    warning (\"shift count is negative\");\n \t  if (TREE_CODE (op1) == INTEGER_CST\n \t      && TREE_INT_CST_LOW (op1) >= TYPE_PRECISION (type0))\n-\t    warning (\"shift count >= width of value shifted\");\n+\t    warning (\"shift count >= width of type\");\n \t  /* Use the type of the value to be shifted.\n \t     This is what most traditional C compilers do.  */\n \t  result_type = type0;"}]}