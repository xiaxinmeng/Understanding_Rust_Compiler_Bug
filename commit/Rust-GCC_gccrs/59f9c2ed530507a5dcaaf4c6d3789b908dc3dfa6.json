{"sha": "59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTlmOWMyZWQ1MzA1MDdhNWRjYWFmNGM2ZDM3ODliOTA4ZGMzZGZhNg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2010-06-16T15:45:36Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2010-06-16T15:45:36Z"}, "message": "c.opt: Add -Wnoexcept.\n\n\t* c.opt: Add -Wnoexcept.\n\t* except.c (check_noexcept_r): Return the problematic function.\n\t(finish_noexcept_expr): Give -Wnoexcept warning.  Add complain parm.\n\t* pt.c (tsubst_copy_and_build): Pass it.\n\t* parser.c (cp_parser_unary_expression): Likewise.\n\t* cp-tree.h: Adjust prototype.\n\nFrom-SVN: r160842", "tree": {"sha": "d0cfe8570eb95b543a4e2033811af7af2bda6204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d0cfe8570eb95b543a4e2033811af7af2bda6204"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7c69566f11b2361bcfac2c53e385a271792d09f2", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7c69566f11b2361bcfac2c53e385a271792d09f2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7c69566f11b2361bcfac2c53e385a271792d09f2"}], "stats": {"total": 77, "additions": 58, "deletions": 19}, "files": [{"sha": "8c7eed1886c781ac2552ed556e6c216445a75333", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "patch": "@@ -1,3 +1,7 @@\n+2010-06-16  Jason Merrill  <jason@redhat.com>\n+\n+\t* c.opt: Add -Wnoexcept.\n+\n 2010-06-16  Richard Guenther  <rguenther@suse.de>\n \n \tPR c/44555"}, {"sha": "0517d3506a210415739fa2d7d660dc6277ecc0bf", "filename": "gcc/c-family/c.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fc-family%2Fc.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fc-family%2Fc.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc.opt?ref=59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "patch": "@@ -341,6 +341,10 @@ Wnested-externs\n C ObjC Var(warn_nested_externs) Warning\n Warn about \\\"extern\\\" declarations not at file scope\n \n+Wnoexcept\n+C++ ObjC++ Var(warn_noexcept) Warning\n+Warn when a noexcept expression evaluates to true even though the expression can't actually throw\n+\n Wnon-template-friend\n C++ ObjC++ Var(warn_nontemplate_friend) Init(1) Warning\n Warn when non-templatized friend functions are declared within a template"}, {"sha": "8402afd176e84c2a28a963601bae6a767e2f60b6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "patch": "@@ -1,5 +1,11 @@\n 2010-06-16  Jason Merrill  <jason@redhat.com>\n \n+\t* except.c (check_noexcept_r): Return the problematic function.\n+\t(finish_noexcept_expr): Give -Wnoexcept warning.  Add complain parm.\n+\t* pt.c (tsubst_copy_and_build): Pass it.\n+\t* parser.c (cp_parser_unary_expression): Likewise.\n+\t* cp-tree.h: Adjust prototype.\n+\n \t* method.c (defaulted_late_check): Give the defaulted method\n \tthe same exception specification as the implicit declaration.\n "}, {"sha": "f63ec2e795c12d3993f7f72ba4a5c59654ae3362", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "patch": "@@ -4845,7 +4845,7 @@ extern tree build_exc_ptr\t\t\t(void);\n extern tree build_throw\t\t\t\t(tree);\n extern int nothrow_libfn_p\t\t\t(const_tree);\n extern void check_handlers\t\t\t(tree);\n-extern tree finish_noexcept_expr\t\t(tree);\n+extern tree finish_noexcept_expr\t\t(tree, tsubst_flags_t);\n extern bool nothrow_spec_p\t\t\t(const_tree);\n extern bool type_noexcept_p\t\t\t(const_tree);\n extern bool type_throw_all_p\t\t\t(const_tree);"}, {"sha": "64f417154ce399b3bdb9f0ab71ec9ecc63df86a7", "filename": "gcc/cp/except.c", "status": "modified", "additions": 27, "deletions": 12, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fcp%2Fexcept.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fcp%2Fexcept.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fexcept.c?ref=59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "patch": "@@ -1028,20 +1028,22 @@ check_noexcept_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n          We could use TREE_NOTHROW (t) for !TREE_PUBLIC fns, though... */\n       tree fn = (code == AGGR_INIT_EXPR\n \t\t ? AGGR_INIT_EXPR_FN (t) : CALL_EXPR_FN (t));\n+      tree type = TREE_TYPE (TREE_TYPE (fn));\n+\n+      STRIP_NOPS (fn);\n       if (TREE_CODE (fn) == ADDR_EXPR)\n \t{\n \t  /* We do use TREE_NOTHROW for ABI internals like __dynamic_cast,\n \t     and for C library functions known not to throw.  */\n-\t  tree fn2 = TREE_OPERAND (fn, 0);\n-\t  if (TREE_CODE (fn2) == FUNCTION_DECL\n-\t      && DECL_EXTERN_C_P (fn2)\n-\t      && (DECL_ARTIFICIAL (fn2)\n-\t\t  || nothrow_libfn_p (fn2)))\n-\t    return TREE_NOTHROW (fn2) ? NULL_TREE : t;\n+\t  fn = TREE_OPERAND (fn, 0);\n+\t  if (TREE_CODE (fn) == FUNCTION_DECL\n+\t      && DECL_EXTERN_C_P (fn)\n+\t      && (DECL_ARTIFICIAL (fn)\n+\t\t  || nothrow_libfn_p (fn)))\n+\t    return TREE_NOTHROW (fn) ? NULL_TREE : fn;\n \t}\n-      fn = TREE_TYPE (TREE_TYPE (fn));\n-      if (!TYPE_NOTHROW_P (fn))\n-\treturn t;\n+      if (!TYPE_NOTHROW_P (type))\n+\treturn fn;\n     }\n \n   return NULL_TREE;\n@@ -1050,13 +1052,26 @@ check_noexcept_r (tree *tp, int *walk_subtrees ATTRIBUTE_UNUSED,\n /* Evaluate noexcept ( EXPR ).  */\n \n tree\n-finish_noexcept_expr (tree expr)\n+finish_noexcept_expr (tree expr, tsubst_flags_t complain)\n {\n+  tree fn;\n+\n   if (processing_template_decl)\n     return build_min (NOEXCEPT_EXPR, boolean_type_node, expr);\n \n-  if (cp_walk_tree_without_duplicates (&expr, check_noexcept_r, 0))\n-    return boolean_false_node;\n+  fn = cp_walk_tree_without_duplicates (&expr, check_noexcept_r, 0);\n+  if (fn)\n+    {\n+      if ((complain & tf_warning) && TREE_CODE (fn) == FUNCTION_DECL\n+\t  && TREE_NOTHROW (fn) && !DECL_ARTIFICIAL (fn))\n+\t{\n+\t  warning (OPT_Wnoexcept, \"noexcept-expression evaluates to %<false%> \"\n+\t\t   \"because of a call to %qD\", fn);\n+\t  warning (OPT_Wnoexcept, \"but %q+D does not throw; perhaps \"\n+\t\t   \"it should be declared %<noexcept%>\", fn);\n+\t}\n+      return boolean_false_node;\n+    }\n   else\n     return boolean_true_node;\n }"}, {"sha": "c6f8d7ee769bd7f5a9ae41b9b435f812eee675af", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "patch": "@@ -5883,7 +5883,7 @@ cp_parser_unary_expression (cp_parser *parser, bool address_p, bool cast_p,\n \t    parser->type_definition_forbidden_message = saved_message;\n \n \t    cp_parser_require (parser, CPP_CLOSE_PAREN, RT_CLOSE_PAREN);\n-\t    return finish_noexcept_expr (expr);\n+\t    return finish_noexcept_expr (expr, tf_warning_or_error);\n \t  }\n \n \tdefault:"}, {"sha": "b97d3f5cc09a0a1fca4c7046678db37ab074137e", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "patch": "@@ -12259,7 +12259,7 @@ tsubst_copy_and_build (tree t,\n \t\t\t\t   /*integral_constant_expression_p=*/false);\n       --cp_unevaluated_operand;\n       --c_inhibit_evaluation_warnings;\n-      return finish_noexcept_expr (op1);\n+      return finish_noexcept_expr (op1, complain);\n \n     case MODOP_EXPR:\n       {"}, {"sha": "34acfbc526a66e40f163dd87a50ab61e89f43f02", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "patch": "@@ -196,7 +196,7 @@ in the following sections.\n -fno-default-inline  -fvisibility-inlines-hidden @gol\n -fvisibility-ms-compat @gol\n -Wabi  -Wconversion-null  -Wctor-dtor-privacy @gol\n--Wnon-virtual-dtor  -Wreorder @gol\n+-Wnoexcept -Wnon-virtual-dtor  -Wreorder @gol\n -Weffc++  -Wstrict-null-sentinel @gol\n -Wno-non-template-friend  -Wold-style-cast @gol\n -Woverloaded-virtual  -Wno-pmf-conversions @gol\n@@ -2282,6 +2282,14 @@ Warn when a class seems unusable because all the constructors or\n destructors in that class are private, and it has neither friends nor\n public static member functions.\n \n+@item -Wnoexcept @r{(C++ and Objective-C++ only)}\n+@opindex Wnoexcept\n+@opindex Wno-noexcept\n+Warn when a noexcept-expression evaluates to false because of a call\n+to a function that does not have a non-throwing exception\n+specification (i.e. @samp{throw()} or @samp{noexcept}) but is known by\n+the compiler to never throw an exception.\n+\n @item -Wnon-virtual-dtor @r{(C++ and Objective-C++ only)}\n @opindex Wnon-virtual-dtor\n @opindex Wno-non-virtual-dtor"}, {"sha": "d9ddc0b444d35b72dbe782a114c335c987a5fcdb", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "patch": "@@ -1,5 +1,7 @@\n 2010-06-16  Jason Merrill  <jason@redhat.com>\n \n+\t* g++.dg/cpp0x/noexcept03.C: Test -Wnoexcept.\n+\n \t* g++.dg/cpp0x/noexcept01.C: Test defaulted fns.\n \n 2010-06-16  Richard Guenther  <rguenther@suse.de>"}, {"sha": "c759f6fb21d27620023d9933c060fe0ee61d7560", "filename": "gcc/testsuite/g++.dg/cpp0x/noexcept03.C", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept03.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept03.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Fnoexcept03.C?ref=59f9c2ed530507a5dcaaf4c6d3789b908dc3dfa6", "patch": "@@ -1,5 +1,5 @@\n // Runtime test for noexcept-specification.\n-// { dg-options \"-std=c++0x\" }\n+// { dg-options \"-std=c++0x -Wnoexcept\" }\n // { dg-do run }\n \n #include <exception>\n@@ -23,7 +23,7 @@ void f () noexcept (false)\n }\n \n template <class T>\n-void f(T) noexcept (noexcept (T()))\n+void f(T) noexcept (noexcept (T())) // { dg-warning \"false\" }\n {\n   p();\n }\n@@ -34,7 +34,7 @@ void f2(T a) noexcept (noexcept (f (a)))\n   f(a);\n }\n \n-struct A { A() { } };\n+struct A { A() { } };\t\t// { dg-warning \"does not throw\" }\n \n // throw(int) overrides noexcept(false) in either order.\n void h() throw (int, std::bad_exception);"}]}