{"sha": "544958743884a85b1dba6d67a92901077767d99b", "node_id": "C_kwDOANBUbNoAKDU0NDk1ODc0Mzg4NGE4NWIxZGJhNmQ2N2E5MjkwMTA3Nzc2N2Q5OWI", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-05T09:33:43Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-04-12T12:20:18Z"}, "message": "hir: Add `Kind` enum to downcast safely", "tree": {"sha": "d681759b8bb1f1776fbef288508feb8360002de9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d681759b8bb1f1776fbef288508feb8360002de9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/544958743884a85b1dba6d67a92901077767d99b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544958743884a85b1dba6d67a92901077767d99b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/544958743884a85b1dba6d67a92901077767d99b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/544958743884a85b1dba6d67a92901077767d99b/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5b38698aa439a935f0c0f4c55611f2173a28b57", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a5b38698aa439a935f0c0f4c55611f2173a28b57", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a5b38698aa439a935f0c0f4c55611f2173a28b57"}], "stats": {"total": 67, "additions": 60, "deletions": 7}, "files": [{"sha": "2e35aea4abc4f398304a6921ab02700dd3533669", "filename": "gcc/rust/hir/tree/rust-hir-item.h", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544958743884a85b1dba6d67a92901077767d99b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544958743884a85b1dba6d67a92901077767d99b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-item.h?ref=544958743884a85b1dba6d67a92901077767d99b", "patch": "@@ -621,6 +621,8 @@ class VisItem : public Item\n public:\n   using HIR::Stmt::accept_vis;\n \n+  BaseKind get_hir_kind () override final { return VIS_ITEM; }\n+\n   /* Does the item have some kind of public visibility (non-default\n    * visibility)? */\n   bool has_visibility () const { return !visibility.is_error (); }\n@@ -2744,7 +2746,7 @@ class ImplBlock : public VisItem\n };\n \n // Abstract base class for an item used inside an extern block\n-class ExternalItem\n+class ExternalItem : public Node\n {\n   Analysis::NodeMapping mappings;\n   AST::AttrVec outer_attrs;\n@@ -2755,6 +2757,8 @@ class ExternalItem\n public:\n   virtual ~ExternalItem () {}\n \n+  BaseKind get_hir_kind () override final { return EXTERNAL; }\n+\n   // Returns whether item has outer attributes.\n   bool has_outer_attrs () const { return !outer_attrs.empty (); }\n "}, {"sha": "e2c930e1374ff8508e28693f2531acd042f97ec9", "filename": "gcc/rust/hir/tree/rust-hir.h", "status": "modified", "additions": 55, "deletions": 6, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/544958743884a85b1dba6d67a92901077767d99b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/544958743884a85b1dba6d67a92901077767d99b/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir.h?ref=544958743884a85b1dba6d67a92901077767d99b", "patch": "@@ -45,6 +45,41 @@ class HIRTypeVisitor;\n // forward decl for use in token tree method\n class Token;\n \n+// Kind for downcasting various HIR nodes to other base classes when visiting\n+// them\n+enum BaseKind\n+{\n+  /* class ExternalItem */\n+  EXTERNAL,\n+  /* class TraitItem */\n+  TRAIT_ITEM,\n+  /* class VisItem */\n+  VIS_ITEM,\n+  /* class Item */\n+  ITEM,\n+  /* class ImplItem */\n+  IMPL,\n+  /* class Type */\n+  TYPE,\n+  /* class Stmt */\n+  STMT,\n+  /* class Expr */\n+  EXPR,\n+  /* class Pattern */\n+  PATTERN,\n+};\n+\n+class Node\n+{\n+public:\n+  /**\n+   * Get the kind of HIR node we are dealing with. This is useful for\n+   * downcasting to more precise types when necessary, i.e going from an `Item*`\n+   * to a `VisItem*`\n+   */\n+  virtual BaseKind get_hir_kind () = 0;\n+};\n+\n // A literal - value with a type. Used in LiteralExpr and LiteralPattern.\n struct Literal\n {\n@@ -91,7 +126,7 @@ struct Literal\n \n /* Base statement abstract class. Note that most \"statements\" are not allowed in\n  * top-level module scope - only a subclass of statements called \"items\" are. */\n-class Stmt\n+class Stmt : public Node\n {\n public:\n   // Unique pointer custom clone function\n@@ -100,6 +135,8 @@ class Stmt\n     return std::unique_ptr<Stmt> (clone_stmt_impl ());\n   }\n \n+  BaseKind get_hir_kind () override { return STMT; }\n+\n   virtual ~Stmt () {}\n \n   virtual std::string as_string () const = 0;\n@@ -138,6 +175,8 @@ class Item : public Stmt\n     return std::unique_ptr<Item> (clone_item_impl ());\n   }\n \n+  BaseKind get_hir_kind () override { return ITEM; }\n+\n   std::string as_string () const override;\n \n   /* Adds crate names to the vector passed by reference, if it can\n@@ -171,7 +210,7 @@ class Item : public Stmt\n class ExprWithoutBlock;\n \n // Base expression HIR node - abstract\n-class Expr\n+class Expr : public Node\n {\n   AST::AttrVec outer_attrs;\n   Analysis::NodeMapping mappings;\n@@ -213,6 +252,8 @@ class Expr\n     Path,\n   };\n \n+  BaseKind get_hir_kind () override final { return EXPR; }\n+\n   const AST::AttrVec &get_outer_attrs () const { return outer_attrs; }\n \n   // Unique pointer custom clone function\n@@ -358,7 +399,7 @@ class IdentifierExpr : public ExprWithoutBlock\n };\n \n // Pattern base HIR node\n-class Pattern\n+class Pattern : public Node\n {\n public:\n   enum PatternType\n@@ -376,6 +417,8 @@ class Pattern\n     SLICE,\n   };\n \n+  BaseKind get_hir_kind () override final { return PATTERN; }\n+\n   // Unique pointer custom clone function\n   std::unique_ptr<Pattern> clone_pattern () const\n   {\n@@ -406,7 +449,7 @@ class Pattern\n class TraitBound;\n \n // Base class for types as represented in HIR - abstract\n-class Type\n+class Type : public Node\n {\n public:\n   // Unique pointer custom clone function\n@@ -418,6 +461,8 @@ class Type\n   // virtual destructor\n   virtual ~Type () {}\n \n+  BaseKind get_hir_kind () override final { return TYPE; }\n+\n   virtual std::string as_string () const = 0;\n \n   /* HACK: convert to trait bound. Virtual method overriden by classes that\n@@ -686,7 +731,7 @@ class LifetimeParam : public GenericParam\n };\n \n // Item used in trait declarations - abstract base class\n-class TraitItem\n+class TraitItem : public Node\n {\n public:\n   enum TraitItemKind\n@@ -696,6 +741,8 @@ class TraitItem\n     TYPE\n   };\n \n+  BaseKind get_hir_kind () override final { return TRAIT_ITEM; }\n+\n protected:\n   // Constructor\n   TraitItem (Analysis::NodeMapping mappings) : mappings (mappings) {}\n@@ -728,7 +775,7 @@ class TraitItem\n   virtual const AST::AttrVec &get_outer_attrs () const = 0;\n };\n \n-class ImplItem\n+class ImplItem : public Node\n {\n public:\n   enum ImplItemType\n@@ -740,6 +787,8 @@ class ImplItem\n \n   virtual ~ImplItem () {}\n \n+  BaseKind get_hir_kind () override final { return IMPL; }\n+\n   // Unique pointer custom clone function\n   std::unique_ptr<ImplItem> clone_inherent_impl_item () const\n   {"}]}