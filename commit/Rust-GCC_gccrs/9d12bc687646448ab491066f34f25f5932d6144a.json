{"sha": "9d12bc687646448ab491066f34f25f5932d6144a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWQxMmJjNjg3NjQ2NDQ4YWI0OTEwNjZmMzRmMjVmNTkzMmQ2MTQ0YQ==", "commit": {"author": {"name": "Dehao Chen", "email": "dehao@google.com", "date": "2012-09-20T03:17:26Z"}, "committer": {"name": "Dehao Chen", "email": "dehao@gcc.gnu.org", "date": "2012-09-20T03:17:26Z"}, "message": "s390.c (s390_chunkify_start): Replacing INSN_LOCATOR.\n\n2012-09-19  Dehao Chen  <dehao@google.com>\n\n\t* config/s390/s390.c (s390_chunkify_start): Replacing INSN_LOCATOR.\n\t* config/spu/spu.c (emit_nop_for_insn): Likewise.\n\t(pad_bb): Likewise.\n\t(spu_emit_branch_hint): Likewise.\n\t(insert_hbrp_for_ilb_runout): Likewise.\n\t* config/mep/mep.c (mep_make_bundle): Likewise.\n\t(mep_bundle_insns): Likewise.\n\t* config/sh/sh.c (gen_block_redirect): Likewise.\n\t* config/c6x/c6x.c (gen_one_bundle): Likewise.\n\t* config/rs6000/rs6000.c (rs6000_final_prescan_insn): Likewise.\n\t* config/picochip/picochip.c (picochip_reorg): Likewise.\n\t* config/arm/arm.c (require_pic_register): Likewise.\n\t* config/mips/mips.c (mips16_gp_pseudo_reg): Likewise.\n\t* config/bfin/bfin.c (gen_one_bundle): Likewise.\n\nFrom-SVN: r191510", "tree": {"sha": "2d6389caf57d7633824aacec223b70182e5a267c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/2d6389caf57d7633824aacec223b70182e5a267c"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9d12bc687646448ab491066f34f25f5932d6144a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d12bc687646448ab491066f34f25f5932d6144a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d12bc687646448ab491066f34f25f5932d6144a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d12bc687646448ab491066f34f25f5932d6144a/comments", "author": {"login": "danielcdh", "id": 694263, "node_id": "MDQ6VXNlcjY5NDI2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/694263?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielcdh", "html_url": "https://github.com/danielcdh", "followers_url": "https://api.github.com/users/danielcdh/followers", "following_url": "https://api.github.com/users/danielcdh/following{/other_user}", "gists_url": "https://api.github.com/users/danielcdh/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielcdh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielcdh/subscriptions", "organizations_url": "https://api.github.com/users/danielcdh/orgs", "repos_url": "https://api.github.com/users/danielcdh/repos", "events_url": "https://api.github.com/users/danielcdh/events{/privacy}", "received_events_url": "https://api.github.com/users/danielcdh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ac6d1200be5d5f6c49a8b6c4ae447bf82c449c25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ac6d1200be5d5f6c49a8b6c4ae447bf82c449c25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ac6d1200be5d5f6c49a8b6c4ae447bf82c449c25"}], "stats": {"total": 81, "additions": 49, "deletions": 32}, "files": [{"sha": "840be17aa7d3c8308d89a6b97dffc0e9888b61d0", "filename": "gcc/ChangeLog", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9d12bc687646448ab491066f34f25f5932d6144a", "patch": "@@ -1,3 +1,20 @@\n+2012-09-19  Dehao Chen  <dehao@google.com>\n+\n+\t* config/s390/s390.c (s390_chunkify_start): Replacing INSN_LOCATOR.\n+\t* config/spu/spu.c (emit_nop_for_insn): Likewise.\n+\t(pad_bb): Likewise.\n+\t(spu_emit_branch_hint): Likewise.\n+\t(insert_hbrp_for_ilb_runout): Likewise.\n+\t* config/mep/mep.c (mep_make_bundle): Likewise.\n+\t(mep_bundle_insns): Likewise.\n+\t* config/sh/sh.c (gen_block_redirect): Likewise.\n+\t* config/c6x/c6x.c (gen_one_bundle): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_final_prescan_insn): Likewise.\n+\t* config/picochip/picochip.c (picochip_reorg): Likewise.\n+\t* config/arm/arm.c (require_pic_register): Likewise.\n+\t* config/mips/mips.c (mips16_gp_pseudo_reg): Likewise.\n+\t* config/bfin/bfin.c (gen_one_bundle): Likewise.\n+\n 2012-09-19  Mark Kettenis  <kettenis@openbsd.org>\n \n         * config.gcc (hppa*-*-openbsd*): New target."}, {"sha": "619e96f535e9f128981f34b50d5df6bdf165a483", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=9d12bc687646448ab491066f34f25f5932d6144a", "patch": "@@ -5359,7 +5359,7 @@ require_pic_register (void)\n \n \t      for (insn = seq; insn; insn = NEXT_INSN (insn))\n \t\tif (INSN_P (insn))\n-\t\t  INSN_LOCATOR (insn) = prologue_locator;\n+\t\t  INSN_LOCATION (insn) = prologue_location;\n \n \t      /* We can be called during expansion of PHI nodes, where\n \t         we can't yet emit instructions directly in the final"}, {"sha": "2c01cf7a0920de0144b3e857f3349d178a248265", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=9d12bc687646448ab491066f34f25f5932d6144a", "patch": "@@ -3918,12 +3918,12 @@ gen_one_bundle (rtx slot[3])\n     }\n \n   /* Avoid line number information being printed inside one bundle.  */\n-  if (INSN_LOCATOR (slot[1])\n-      && INSN_LOCATOR (slot[1]) != INSN_LOCATOR (slot[0]))\n-    INSN_LOCATOR (slot[1]) = INSN_LOCATOR (slot[0]);\n-  if (INSN_LOCATOR (slot[2])\n-      && INSN_LOCATOR (slot[2]) != INSN_LOCATOR (slot[0]))\n-    INSN_LOCATOR (slot[2]) = INSN_LOCATOR (slot[0]);\n+  if (INSN_LOCATION (slot[1])\n+      && INSN_LOCATION (slot[1]) != INSN_LOCATION (slot[0]))\n+    INSN_LOCATION (slot[1]) = INSN_LOCATION (slot[0]);\n+  if (INSN_LOCATION (slot[2])\n+      && INSN_LOCATION (slot[2]) != INSN_LOCATION (slot[0]))\n+    INSN_LOCATION (slot[2]) = INSN_LOCATION (slot[0]);\n \n   /* Terminate them with \"|| \" instead of \";\" in the output.  */\n   PUT_MODE (slot[0], SImode);"}, {"sha": "32807d8eacab883ab7139b9d20e96cd40e6dd0cd", "filename": "gcc/config/c6x/c6x.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fc6x%2Fc6x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fc6x%2Fc6x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc6x%2Fc6x.c?ref=9d12bc687646448ab491066f34f25f5932d6144a", "patch": "@@ -4595,7 +4595,7 @@ gen_one_bundle (rtx *slot, int n_filled, int real_first)\n   bundle = gen_rtx_SEQUENCE (VOIDmode, gen_rtvec_v (n_filled, slot));\n   bundle = make_insn_raw (bundle);\n   BLOCK_FOR_INSN (bundle) = BLOCK_FOR_INSN (slot[0]);\n-  INSN_LOCATOR (bundle) = INSN_LOCATOR (slot[0]);\n+  INSN_LOCATION (bundle) = INSN_LOCATION (slot[0]);\n   PREV_INSN (bundle) = PREV_INSN (slot[real_first]);\n \n   t = NULL_RTX;\n@@ -4609,7 +4609,7 @@ gen_one_bundle (rtx *slot, int n_filled, int real_first)\n \tNEXT_INSN (t) = insn;\n       t = insn;\n       if (i > 0)\n-\tINSN_LOCATOR (slot[i]) = INSN_LOCATOR (bundle);\n+\tINSN_LOCATION (slot[i]) = INSN_LOCATION (bundle);\n     }\n \n   NEXT_INSN (bundle) = NEXT_INSN (PREV_INSN (bundle));"}, {"sha": "79611a8fdb31bd08cc3f8997c33ccc6e6d18b6d9", "filename": "gcc/config/mep/mep.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fmep%2Fmep.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fmep%2Fmep.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmep%2Fmep.c?ref=9d12bc687646448ab491066f34f25f5932d6144a", "patch": "@@ -6814,9 +6814,9 @@ mep_make_bundle (rtx core, rtx cop)\n   /* Derive a location for the bundle.  Individual instructions cannot\n      have their own location because there can be no assembler labels\n      between CORE and COP.  */\n-  INSN_LOCATOR (insn) = INSN_LOCATOR (INSN_LOCATOR (core) ? core : cop);\n-  INSN_LOCATOR (core) = 0;\n-  INSN_LOCATOR (cop) = 0;\n+  INSN_LOCATION (insn) = INSN_LOCATION (INSN_LOCATION (core) ? core : cop);\n+  INSN_LOCATION (core) = 0;\n+  INSN_LOCATION (cop) = 0;\n \n   return insn;\n }\n@@ -6913,7 +6913,7 @@ mep_bundle_insns (rtx insns)\n \t     whenever the current line changes, set the location info\n \t     for INSN to match FIRST.  */\n \n-\t  INSN_LOCATOR (insn) = INSN_LOCATOR (first);\n+\t  INSN_LOCATION (insn) = INSN_LOCATION (first);\n \n \t  note = PREV_INSN (insn);\n \t  while (note && note != first)"}, {"sha": "d37a2f4328d171860f7be79bcb5d2c10eb146b89", "filename": "gcc/config/mips/mips.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fmips%2Fmips.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fmips%2Fmips.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.c?ref=9d12bc687646448ab491066f34f25f5932d6144a", "patch": "@@ -2628,7 +2628,7 @@ mips16_gp_pseudo_reg (void)\n \n       insn = gen_load_const_gp (cfun->machine->mips16_gp_pseudo_rtx);\n       insn = emit_insn_after (insn, scan);\n-      INSN_LOCATOR (insn) = 0;\n+      INSN_LOCATION (insn) = 0;\n \n       pop_topmost_sequence ();\n     }"}, {"sha": "1a6c1ef6c150e9b4093f8f35001718b2e927ce3b", "filename": "gcc/config/picochip/picochip.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fpicochip%2Fpicochip.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpicochip%2Fpicochip.c?ref=9d12bc687646448ab491066f34f25f5932d6144a", "patch": "@@ -3298,16 +3298,16 @@ picochip_reorg (void)\n               if (GET_MODE (insn) == TImode)\n               {\n                 vliw_start = insn;\n-                vliw_insn_location = INSN_LOCATOR (insn);\n+                vliw_insn_location = INSN_LOCATION (insn);\n               }\n               if (JUMP_P (insn) || CALL_P(insn))\n               {\n-                vliw_insn_location = INSN_LOCATOR (insn);\n+                vliw_insn_location = INSN_LOCATION (insn);\n                 for (insn1 = vliw_start; insn1 != insn ; insn1 = next_real_insn (insn1))\n-                  INSN_LOCATOR (insn1) = vliw_insn_location;\n+                  INSN_LOCATION (insn1) = vliw_insn_location;\n               }\n               /* Tag subsequent instructions with the same location. */\n-              INSN_LOCATOR (insn) = vliw_insn_location;\n+              INSN_LOCATION (insn) = vliw_insn_location;\n \t    }\n \t}\n "}, {"sha": "211087ba37eeba1bc8fdb8a2c8e325ae0ffac632", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=9d12bc687646448ab491066f34f25f5932d6144a", "patch": "@@ -27351,7 +27351,7 @@ rs6000_final_prescan_insn (rtx insn, rtx *operand ATTRIBUTE_UNUSED,\n     {\n       const char *temp;\n       int insn_code_number = recog_memoized (insn);\n-      location_t location = locator_location (INSN_LOCATOR (insn));\n+      location_t location = INSN_LOCATION (insn);\n \n       /* Punt on insns we cannot recognize.  */\n       if (insn_code_number < 0)"}, {"sha": "3f3ace526b26e39158a309256ac64917f15f5671", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=9d12bc687646448ab491066f34f25f5932d6144a", "patch": "@@ -6869,7 +6869,7 @@ s390_chunkify_start (void)\n \t\tprev = prev_nonnote_insn (prev);\n \t      if (prev)\n \t\tjump = emit_jump_insn_after_setloc (gen_jump (label), insn,\n-\t\t\t\t\t\t    INSN_LOCATOR (prev));\n+\t\t\t\t\t\t    INSN_LOCATION (prev));\n \t      else\n \t\tjump = emit_jump_insn_after_noloc (gen_jump (label), insn);\n \t      barrier = emit_barrier_after (jump);"}, {"sha": "fd7879910dc0f837ad9b176c59174d5d819198e3", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=9d12bc687646448ab491066f34f25f5932d6144a", "patch": "@@ -5530,7 +5530,7 @@ gen_block_redirect (rtx jump, int addr, int need_block)\n \t NOTE_INSN_BLOCK_END notes between the indirect_jump_scratch and\n \t the jump.  */\n \n-      INSN_LOCATOR (insn) = INSN_LOCATOR (jump);\n+      INSN_LOCATION (insn) = INSN_LOCATION (jump);\n       INSN_CODE (insn) = CODE_FOR_indirect_jump_scratch;\n       return insn;\n     }"}, {"sha": "831d2b08a61632f9d744e60bf2a8433255161f21", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9d12bc687646448ab491066f34f25f5932d6144a/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=9d12bc687646448ab491066f34f25f5932d6144a", "patch": "@@ -1998,7 +1998,7 @@ emit_nop_for_insn (rtx insn)\n   else\n     new_insn = emit_insn_after (gen_lnop (), insn);\n   recog_memoized (new_insn);\n-  INSN_LOCATOR (new_insn) = INSN_LOCATOR (insn);\n+  INSN_LOCATION (new_insn) = INSN_LOCATION (insn);\n }\n \n /* Insert nops in basic blocks to meet dual issue alignment\n@@ -2037,7 +2037,7 @@ pad_bb(void)\n \t\t  prev_insn = emit_insn_before (gen_lnop (), insn);\n \t\t  PUT_MODE (prev_insn, GET_MODE (insn));\n \t\t  PUT_MODE (insn, TImode);\n-\t\t  INSN_LOCATOR (prev_insn) = INSN_LOCATOR (insn);\n+\t\t  INSN_LOCATION (prev_insn) = INSN_LOCATION (insn);\n \t\t  length += 4;\n \t\t}\n \t    }\n@@ -2106,7 +2106,7 @@ spu_emit_branch_hint (rtx before, rtx branch, rtx target,\n \n   hint = emit_insn_before (gen_hbr (branch_label, target), before);\n   recog_memoized (hint);\n-  INSN_LOCATOR (hint) = INSN_LOCATOR (branch);\n+  INSN_LOCATION (hint) = INSN_LOCATION (branch);\n   HINTED_P (branch) = 1;\n \n   if (GET_CODE (target) == LABEL_REF)\n@@ -2129,7 +2129,7 @@ spu_emit_branch_hint (rtx before, rtx branch, rtx target,\n          which could make it too far for the branch offest to fit */\n       insn = emit_insn_before (gen_blockage (), hint);\n       recog_memoized (insn);\n-      INSN_LOCATOR (insn) = INSN_LOCATOR (hint);\n+      INSN_LOCATION (insn) = INSN_LOCATION (hint);\n     }\n   else if (distance <= 8 * 4)\n     {\n@@ -2141,20 +2141,20 @@ spu_emit_branch_hint (rtx before, rtx branch, rtx target,\n \t  insn =\n \t    emit_insn_after (gen_nopn_nv (gen_rtx_REG (SImode, 127)), hint);\n \t  recog_memoized (insn);\n-\t  INSN_LOCATOR (insn) = INSN_LOCATOR (hint);\n+\t  INSN_LOCATION (insn) = INSN_LOCATION (hint);\n \t}\n \n       /* Make sure any nops inserted aren't scheduled before the hint. */\n       insn = emit_insn_after (gen_blockage (), hint);\n       recog_memoized (insn);\n-      INSN_LOCATOR (insn) = INSN_LOCATOR (hint);\n+      INSN_LOCATION (insn) = INSN_LOCATION (hint);\n \n       /* Make sure any nops inserted aren't scheduled after the call. */\n       if (CALL_P (branch) && distance < 8 * 4)\n \t{\n \t  insn = emit_insn_before (gen_blockage (), branch);\n \t  recog_memoized (insn);\n-\t  INSN_LOCATOR (insn) = INSN_LOCATOR (branch);\n+\t  INSN_LOCATION (insn) = INSN_LOCATION (branch);\n \t}\n     }\n }\n@@ -2340,7 +2340,7 @@ insert_hbrp_for_ilb_runout (rtx first)\n \t\tinsn =\n \t\t  emit_insn_before (gen_iprefetch (GEN_INT (1)), before_4);\n \t\trecog_memoized (insn);\n-\t\tINSN_LOCATOR (insn) = INSN_LOCATOR (before_4);\n+\t\tINSN_LOCATION (insn) = INSN_LOCATION (before_4);\n \t\tINSN_ADDRESSES_NEW (insn,\n \t\t\t\t    INSN_ADDRESSES (INSN_UID (before_4)));\n \t\tPUT_MODE (insn, GET_MODE (before_4));\n@@ -2349,7 +2349,7 @@ insert_hbrp_for_ilb_runout (rtx first)\n \t\t  {\n \t\t    insn = emit_insn_before (gen_lnop (), before_4);\n \t\t    recog_memoized (insn);\n-\t\t    INSN_LOCATOR (insn) = INSN_LOCATOR (before_4);\n+\t\t    INSN_LOCATION (insn) = INSN_LOCATION (before_4);\n \t\t    INSN_ADDRESSES_NEW (insn,\n \t\t\t\t\tINSN_ADDRESSES (INSN_UID (before_4)));\n \t\t    PUT_MODE (insn, TImode);\n@@ -2361,7 +2361,7 @@ insert_hbrp_for_ilb_runout (rtx first)\n \t\tinsn =\n \t\t  emit_insn_before (gen_iprefetch (GEN_INT (2)), before_16);\n \t\trecog_memoized (insn);\n-\t\tINSN_LOCATOR (insn) = INSN_LOCATOR (before_16);\n+\t\tINSN_LOCATION (insn) = INSN_LOCATION (before_16);\n \t\tINSN_ADDRESSES_NEW (insn,\n \t\t\t\t    INSN_ADDRESSES (INSN_UID (before_16)));\n \t\tPUT_MODE (insn, GET_MODE (before_16));\n@@ -2370,7 +2370,7 @@ insert_hbrp_for_ilb_runout (rtx first)\n \t\t  {\n \t\t    insn = emit_insn_before (gen_lnop (), before_16);\n \t\t    recog_memoized (insn);\n-\t\t    INSN_LOCATOR (insn) = INSN_LOCATOR (before_16);\n+\t\t    INSN_LOCATION (insn) = INSN_LOCATION (before_16);\n \t\t    INSN_ADDRESSES_NEW (insn,\n \t\t\t\t\tINSN_ADDRESSES (INSN_UID\n \t\t\t\t\t\t\t(before_16)));"}]}