{"sha": "3fef5b2b993df626994dbd39442090b45e88bb52", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6M2ZlZjViMmI5OTNkZjYyNjk5NGRiZDM5NDQyMDkwYjQ1ZTg4YmI1Mg==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-05-08T22:22:49Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-05-08T22:22:49Z"}, "message": "cpplex.c (spell_token): New function.\n\n\t* cpplex.c (spell_token): New function.\n\t  (TOKEN_LEN): Add 1 for whitespace.\n\t  (_cpp_lex_file): Update to use spell_token.\n\t* cpplib.h (E): Remove.\n\t(TTYPE_TABLE): Update CPP_VSPACE entry.\n\nFrom-SVN: r33777", "tree": {"sha": "b43d16681659989af0773735f517b068f63f272f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b43d16681659989af0773735f517b068f63f272f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3fef5b2b993df626994dbd39442090b45e88bb52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fef5b2b993df626994dbd39442090b45e88bb52", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3fef5b2b993df626994dbd39442090b45e88bb52", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3fef5b2b993df626994dbd39442090b45e88bb52/comments", "author": null, "committer": null, "parents": [{"sha": "549f0725741b0d8bc07fb98055f3d07d937f6071", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/549f0725741b0d8bc07fb98055f3d07d937f6071", "html_url": "https://github.com/Rust-GCC/gccrs/commit/549f0725741b0d8bc07fb98055f3d07d937f6071"}], "stats": {"total": 154, "additions": 89, "deletions": 65}, "files": [{"sha": "95a77c7aca45f21fb63049b732705c2810b5c674", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fef5b2b993df626994dbd39442090b45e88bb52/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fef5b2b993df626994dbd39442090b45e88bb52/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=3fef5b2b993df626994dbd39442090b45e88bb52", "patch": "@@ -1,3 +1,11 @@\n+Mon  8 May 22:17:35 2000  Neil Booth  <NeilB@earthling.net>\n+\n+\t* cpplex.c (spell_token): New function.\n+\t  (TOKEN_LEN): Add 1 for whitespace.\n+\t  (_cpp_lex_file): Update to use spell_token.\n+\t* cpplib.h (E): Remove.\n+\t(TTYPE_TABLE): Update CPP_VSPACE entry.\n+\n 2000-05-08  Richard Henderson  <rth@cygnus.com>\n \n \t* flow.c (init_propagate_block_info): Watch out for conditional"}, {"sha": "65c4b288971816e8df9dc0610424b6523c9a1e59", "filename": "gcc/cpplex.c", "status": "modified", "additions": 80, "deletions": 62, "changes": 142, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fef5b2b993df626994dbd39442090b45e88bb52/gcc%2Fcpplex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fef5b2b993df626994dbd39442090b45e88bb52/gcc%2Fcpplex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplex.c?ref=3fef5b2b993df626994dbd39442090b45e88bb52", "patch": "@@ -90,6 +90,9 @@ unsigned int spell_comment PARAMS ((unsigned char *, cpp_toklist *,\n \t\t\t\t    cpp_token *token));\n unsigned int spell_name PARAMS ((unsigned char *, cpp_toklist *,\n \t\t\t\t cpp_token *token));\n+static unsigned char * spell_token PARAMS ((cpp_reader *, cpp_token *,\n+\t\t\t\t\t    cpp_toklist *, unsigned char *,\n+\t\t\t\t\t    int));\n \n typedef unsigned int (* speller) PARAMS ((unsigned char *, cpp_toklist *,\n \t\t\t\t\t  cpp_token *));\n@@ -121,13 +124,11 @@ typedef unsigned int (* speller) PARAMS ((unsigned char *, cpp_toklist *,\n #define SPELL_HANDLER  1\n #define SPELL_CHAR     2\n #define SPELL_NONE     3\n-#define SPELL_EOL      4\n \n #define T(e, s) {SPELL_TEXT, s},\n #define H(e, s) {SPELL_HANDLER, (PTR) s},\n #define C(e, s) {SPELL_CHAR, s},\n #define N(e, s) {SPELL_NONE, s},\n-#define E(e, s) {SPELL_EOL, s},\n \n static const struct token_spelling\n {\n@@ -139,7 +140,6 @@ static const struct token_spelling\n #undef H\n #undef C\n #undef N\n-#undef E\n \n #define PUSH_TOKEN(ttype) cur_token++->type = ttype\n #define REVISE_TOKEN(ttype) cur_token[-1].type = ttype\n@@ -148,8 +148,8 @@ static const struct token_spelling\n   BACKUP_TOKEN(ttype); cur_token->flags |= DIGRAPH;} while (0)\n \n /* If there is this many bytes in a buffer, you have enough room to\n-   spell the token, not including preceding whitespace.  */\n-#define TOKEN_LEN(token) (4 + (token_spellings[token->type].type == \\\n+   spell the token, including preceding whitespace.  */\n+#define TOKEN_LEN(token) (5 + (token_spellings[token->type].type == \\\n \t\t\t       SPELL_HANDLER ? token->val.name.len: 0))\n \n #endif\n@@ -3350,6 +3350,65 @@ spell_name (buffer, list, token)\n   return len;\n }\n \n+/* Write the spelling of a token TOKEN to BUFFER.  The buffer must\n+   already contain the enough space to hold the token's spelling.  If\n+   WHITESPACE is true, and the token was preceded by whitespace,\n+   output a single space before the token proper.  Returns a pointer\n+   to the character after the last character written.  */\n+\n+static unsigned char *\n+spell_token (pfile, token, list, buffer, whitespace)\n+     cpp_reader *pfile;\t\t/* Would be nice to be rid of this...  */\n+     cpp_token *token;\n+     cpp_toklist *list;\t\t/* FIXME: get rid of this...  */\n+     unsigned char *buffer;\n+     int whitespace;\n+{\n+  /* Whitespace will not be wanted by handlers of the # and ##\n+     operators calling this function, but will be wanted by the\n+     function that writes out the preprocessed file.  */\n+  if (whitespace && token->flags & PREV_WHITESPACE)\n+    *buffer++ = ' ';\n+\n+  switch (token_spellings[token->type].type)\n+    {\n+    case SPELL_TEXT:\n+      {\n+\tconst unsigned char *spelling;\n+\tunsigned char c;\n+\n+\tif (token->flags & DIGRAPH)\n+\t  spelling = digraph_spellings[token->type - CPP_FIRST_DIGRAPH];\n+\telse\n+\t  spelling = token_spellings[token->type].speller;\n+\t\n+\twhile ((c = *spelling++) != '\\0')\n+\t  *buffer++ = c;\n+      }\n+      break;\n+\n+    case SPELL_HANDLER:\n+      {\n+\tspeller s;\n+\n+\ts = (speller) token_spellings[token->type].speller;\n+\tbuffer += s (buffer, list, token);\n+      }\n+      break;\n+\n+    case SPELL_CHAR:\n+      *buffer++ = token->aux;\n+      break;\n+\n+    case SPELL_NONE:\n+      cpp_ice (pfile, \"Unspellable token\");\n+      break;\n+    }\n+\n+  return buffer;\n+}\n+\n+/* Temporary function for illustrative purposes.  */\n void\n _cpp_lex_file (pfile)\n      cpp_reader* pfile;\n@@ -3394,70 +3453,29 @@ _cpp_output_list (pfile, list)\n   if (list->comments_used > 0)\n     comment_token = list->tokens + list->comments[0].aux;\n \n-  CPP_RESERVE (pfile, 2);\t/* Always have room for \" \\n\".  */\n-  for (token = &list->tokens[0];; token++)\n+  token = &list->tokens[0];\n+  do\n     {\n-      if (token->flags & PREV_WHITESPACE)\n+      /* Output comments if -C.  */\n+      if (token == comment_token)\n \t{\n-\t  /* Output comments if -C.  Otherwise a space will do.  */\n-\t  if (token == comment_token)\n+\t  cpp_token *comment = &list->comments[comment_no];\n+\t  do\n \t    {\n-\t      cpp_token *comment = &list->comments[comment_no];\n-\t      do\n-\t\t{\n-\t\t  CPP_RESERVE (pfile, 2 + TOKEN_LEN (comment));\n-\t\t  pfile->limit += spell_comment (pfile->limit, list, comment);\n-\t\t  comment_no++, comment++;\n-\t\t  if (comment_no == list->comments_used)\n-\t\t    break;\n-\t\t  comment_token = comment->aux + list->tokens;\n-\t\t}\n-\t      while (comment_token == token);\n+\t      CPP_RESERVE (pfile, TOKEN_LEN (comment));\n+\t      pfile->limit += spell_comment (pfile->limit, list, comment);\n+\t      comment_no++, comment++;\n+\t      if (comment_no == list->comments_used)\n+\t\tbreak;\n+\t      comment_token = comment->aux + list->tokens;\n \t    }\n-\t  else\n-\t    CPP_PUTC_Q (pfile, ' ');\n+\t  while (comment_token == token);\n \t}\n \n-      CPP_RESERVE (pfile, 2 + TOKEN_LEN (token));\n-      switch (token_spellings[token->type].type)\n-\t{\n-\tcase SPELL_TEXT:\n-\t  {\n-\t    const unsigned char *spelling;\n-\t    unsigned char c;\n-\n-\t    if (token->flags & DIGRAPH)\n-\t      spelling = digraph_spellings[token->type - CPP_FIRST_DIGRAPH];\n-\t    else\n-\t      spelling = token_spellings[token->type].speller;\n-\n-\t    while ((c = *spelling++) != '\\0')\n-\t      CPP_PUTC_Q (pfile, c);\n-\t  }\n-\t  break;\n-\n-\tcase SPELL_HANDLER:\n-\t  {\n-\t    speller s;\n-\n-\t    s = (speller) token_spellings[token->type].speller;\n-\t    pfile->limit += s (pfile->limit, list, token);\n-\t  }\n-\t  break;\n-\n-\tcase SPELL_CHAR:\n-\t  *pfile->limit++ = token->aux;\n-\t  break;\n-\n-\tcase SPELL_EOL:\n-\t  CPP_PUTC_Q (pfile, '\\n');\n-\t  return;\n-\n-\tcase SPELL_NONE:\n-\t  cpp_error (pfile, \"Unwriteable token\");\n-\t  break;\n-\t}\n+      CPP_RESERVE (pfile, TOKEN_LEN (token));\n+      pfile->limit = spell_token (pfile, token, list, pfile->limit, 1);\n     }\n+  while (token++->type != CPP_VSPACE);\n }\n \n #endif"}, {"sha": "17cc239ad5ac056eb039e3bc38458f1bc0a27255", "filename": "gcc/cpplib.h", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3fef5b2b993df626994dbd39442090b45e88bb52/gcc%2Fcpplib.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3fef5b2b993df626994dbd39442090b45e88bb52/gcc%2Fcpplib.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpplib.h?ref=3fef5b2b993df626994dbd39442090b45e88bb52", "patch": "@@ -123,7 +123,7 @@ typedef struct cpp_name cpp_name;\n   H(CPP_CHILL_COMMENT,\tspell_comment)\t/* Only if output comments.  */ \\\n   N(CPP_MACRO_ARG,      0)              /* Macro argument.  */          \\\n   N(CPP_SUBLIST,        0)\t        /* Sublist.  */                 \\\n-  E(CPP_VSPACE,\t\t\"\\n\")\t\t/* End of line.  */\t\t\\\n+  T(CPP_VSPACE,\t\t\"\\n\")\t\t/* End of line.  */\t\t\\\n   N(CPP_EOF,\t\t0)\t\t/* End of file.  */\t\t\\\n   N(CPP_HEADER_NAME,\t0)\t\t/* <stdio.h> in #include */\t\\\n   N(CPP_ASSERTION,\t0)\t\t/* (...) in #assert */\t\t\\\n@@ -138,7 +138,6 @@ typedef struct cpp_name cpp_name;\n #define H(e, s) e,\n #define C(e, s) e,\n #define N(e, s) e,\n-#define E(e, s) e,\n enum cpp_ttype\n {\n   TTYPE_TABLE\n@@ -148,7 +147,6 @@ enum cpp_ttype\n #undef H\n #undef C\n #undef N\n-#undef E\n \n /* Payload of a NAME, NUMBER, FLOAT, STRING, or COMMENT token.  */\n struct cpp_name"}]}