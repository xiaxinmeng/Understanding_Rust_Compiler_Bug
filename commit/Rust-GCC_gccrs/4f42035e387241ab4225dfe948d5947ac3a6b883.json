{"sha": "4f42035e387241ab4225dfe948d5947ac3a6b883", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGY0MjAzNWUzODcyNDFhYjQyMjVkZmU5NDhkNTk0N2FjM2E2Yjg4Mw==", "commit": {"author": {"name": "David Malcolm", "email": "dmalcolm@redhat.com", "date": "2013-12-09T21:16:25Z"}, "committer": {"name": "David Malcolm", "email": "dmalcolm@gcc.gnu.org", "date": "2013-12-09T21:16:25Z"}, "message": "Eliminate FOR_EACH_BB_REVERSE macro.\n\ngcc/\n\t* basic-block.h (FOR_EACH_BB_REVERSE): Eliminate macro.\n\n\t* cfghooks.c (verify_flow_info): Replace uses of FOR_EACH_BB_REVERSE\n\twith FOR_EACH_BB_REVERSE_FN, making uses of cfun explicit.\n\t* cfgrtl.c (print_rtl_with_bb, rtl_verify_edges,\n\trtl_verify_bb_insns, rtl_verify_bb_pointers,\n\trtl_verify_bb_insn_chain, rtl_verify_fallthru): Likewise.\n\t* config/ia64/ia64.c (emit_predicate_relation_info): Likewise.\n\t* config/sh/sh.c (sh_md_init_global): Likewise.\n\t* config/sh/sh_optimize_sett_clrt.cc\n\t(sh_optimize_sett_clrt::execute): Likewise.\n\t* dce.c (reset_unmarked_insns_debug_uses, delete_unmarked_insns):\n\tLikewise.\n\t* dominance.c (calc_dfs_tree): Likewise.\n\t* final.c (final): Likewise.\n\t* function.c (thread_prologue_and_epilogue_insns): Likewise.\n\t* gcse.c (compute_code_hoist_vbeinout): Likewise.\n\t* ira.c (update_equiv_regs, build_insn_chain): Likewise.\n\t* lcm.c (compute_antinout_edge): Likewise.\n\t* mode-switching.c (optimize_mode_switching): Likewise.\n\t* postreload.c (reload_combine): Likewise.\n\t* recog.c (split_all_insns, peephole2_optimize): Likewise.\n\t* tree-ssa-live.c (live_worklist): Likewise.\n\nFrom-SVN: r205829", "tree": {"sha": "787ef1ec64caf5f9b9d97ab45f8fb7979f442b3b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/787ef1ec64caf5f9b9d97ab45f8fb7979f442b3b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4f42035e387241ab4225dfe948d5947ac3a6b883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f42035e387241ab4225dfe948d5947ac3a6b883", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f42035e387241ab4225dfe948d5947ac3a6b883", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f42035e387241ab4225dfe948d5947ac3a6b883/comments", "author": {"login": "davidmalcolm", "id": 1553248, "node_id": "MDQ6VXNlcjE1NTMyNDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1553248?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidmalcolm", "html_url": "https://github.com/davidmalcolm", "followers_url": "https://api.github.com/users/davidmalcolm/followers", "following_url": "https://api.github.com/users/davidmalcolm/following{/other_user}", "gists_url": "https://api.github.com/users/davidmalcolm/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidmalcolm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidmalcolm/subscriptions", "organizations_url": "https://api.github.com/users/davidmalcolm/orgs", "repos_url": "https://api.github.com/users/davidmalcolm/repos", "events_url": "https://api.github.com/users/davidmalcolm/events{/privacy}", "received_events_url": "https://api.github.com/users/davidmalcolm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/11cd3bed28f13a1a0254d00c4b4d799d08cc266c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/11cd3bed28f13a1a0254d00c4b4d799d08cc266c"}], "stats": {"total": 82, "additions": 53, "deletions": 29}, "files": [{"sha": "0ddcecb92d3920a021acf3af4a66607ab2ef7186", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -1,3 +1,29 @@\n+2013-12-09  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* basic-block.h (FOR_EACH_BB_REVERSE): Eliminate macro.\n+\n+\t* cfghooks.c (verify_flow_info): Replace uses of FOR_EACH_BB_REVERSE\n+\twith FOR_EACH_BB_REVERSE_FN, making uses of cfun explicit.\n+\t* cfgrtl.c (print_rtl_with_bb, rtl_verify_edges,\n+\trtl_verify_bb_insns, rtl_verify_bb_pointers,\n+\trtl_verify_bb_insn_chain, rtl_verify_fallthru): Likewise.\n+\t* config/ia64/ia64.c (emit_predicate_relation_info): Likewise.\n+\t* config/sh/sh.c (sh_md_init_global): Likewise.\n+\t* config/sh/sh_optimize_sett_clrt.cc\n+\t(sh_optimize_sett_clrt::execute): Likewise.\n+\t* dce.c (reset_unmarked_insns_debug_uses, delete_unmarked_insns):\n+\tLikewise.\n+\t* dominance.c (calc_dfs_tree): Likewise.\n+\t* final.c (final): Likewise.\n+\t* function.c (thread_prologue_and_epilogue_insns): Likewise.\n+\t* gcse.c (compute_code_hoist_vbeinout): Likewise.\n+\t* ira.c (update_equiv_regs, build_insn_chain): Likewise.\n+\t* lcm.c (compute_antinout_edge): Likewise.\n+\t* mode-switching.c (optimize_mode_switching): Likewise.\n+\t* postreload.c (reload_combine): Likewise.\n+\t* recog.c (split_all_insns, peephole2_optimize): Likewise.\n+\t* tree-ssa-live.c (live_worklist): Likewise.\n+\n 2013-12-09  David Malcolm  <dmalcolm@redhat.com>\n \n \t* basic-block.h (FOR_EACH_BB): Eliminate macro."}, {"sha": "75f16acf52597a3e462bce7d10d0a944a7023485", "filename": "gcc/basic-block.h", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fbasic-block.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fbasic-block.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbasic-block.h?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -336,8 +336,6 @@ struct GTY(()) control_flow_graph {\n #define FOR_EACH_BB_REVERSE_FN(BB, FN) \\\n   FOR_BB_BETWEEN (BB, (FN)->cfg->x_exit_block_ptr->prev_bb, (FN)->cfg->x_entry_block_ptr, prev_bb)\n \n-#define FOR_EACH_BB_REVERSE(BB) FOR_EACH_BB_REVERSE_FN (BB, cfun)\n-\n /* For iterating over insns in basic block.  */\n #define FOR_BB_INSNS(BB, INSN)\t\t\t\\\n   for ((INSN) = BB_HEAD (BB);\t\t\t\\"}, {"sha": "78218b5f56e654873943300e7bb2c8f10603e61b", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -123,7 +123,7 @@ verify_flow_info (void)\n     }\n \n   /* Now check the basic blocks (boundaries etc.) */\n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       int n_fallthru = 0;\n       edge e;"}, {"sha": "7734ac1e0c3a785bd34d2782afb933f1737e7b46", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -2153,7 +2153,7 @@ print_rtl_with_bb (FILE *outf, const_rtx rtx_first, int flags)\n \n       if (flags & TDF_BLOCKS)\n \t{\n-\t  FOR_EACH_BB_REVERSE (bb)\n+\t  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n \t    {\n \t      rtx x;\n \n@@ -2408,7 +2408,7 @@ rtl_verify_edges (void)\n   int err = 0;\n   basic_block bb;\n \n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       int n_fallthru = 0, n_branch = 0, n_abnormal_call = 0, n_sibcall = 0;\n       int n_eh = 0, n_abnormal = 0;\n@@ -2586,7 +2586,7 @@ rtl_verify_bb_insns (void)\n   int err = 0;\n   basic_block bb;\n \n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       /* Now check the header of basic\n \t block.  It ought to contain optional CODE_LABEL followed\n@@ -2649,7 +2649,7 @@ rtl_verify_bb_pointers (void)\n   basic_block bb;\n \n   /* Check the general integrity of the basic blocks.  */\n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       rtx insn;\n \n@@ -2739,7 +2739,7 @@ rtl_verify_bb_insn_chain (void)\n \n   bb_info = XCNEWVEC (basic_block, max_uid);\n \n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       rtx head = BB_HEAD (bb);\n       rtx end = BB_END (bb);\n@@ -2821,7 +2821,7 @@ rtl_verify_fallthru (void)\n   basic_block bb;\n   int err = 0;\n \n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       edge e;\n "}, {"sha": "99bc094132c8bd82b39c20db6b62183e9174dc58", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -9613,7 +9613,7 @@ emit_predicate_relation_info (void)\n {\n   basic_block bb;\n \n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       int r;\n       rtx head = BB_HEAD (bb);\n@@ -9641,7 +9641,7 @@ emit_predicate_relation_info (void)\n      relations around them.  Otherwise the assembler will assume the call\n      returns, and complain about uses of call-clobbered predicates after\n      the call.  */\n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       rtx insn = BB_HEAD (bb);\n "}, {"sha": "864b04e9b0f3df571bea588d21a1861ed1ae5ec8", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -11115,7 +11115,7 @@ sh_md_init_global (FILE *dump ATTRIBUTE_UNUSED,\n   regmode_weight[1] = (short *) xcalloc (old_max_uid, sizeof (short));\n   r0_life_regions = 0;\n \n-  FOR_EACH_BB_REVERSE (b)\n+  FOR_EACH_BB_REVERSE_FN (b, cfun)\n   {\n     find_regmode_weight (b, SImode);\n     find_regmode_weight (b, SFmode);"}, {"sha": "8d40ce1270b6bfe5036b7827263bc0d9e2246ed7", "filename": "gcc/config/sh/sh_optimize_sett_clrt.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fconfig%2Fsh%2Fsh_optimize_sett_clrt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fconfig%2Fsh%2Fsh_optimize_sett_clrt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh_optimize_sett_clrt.cc?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -206,7 +206,7 @@ sh_optimize_sett_clrt::execute (void)\n   // Look for insns that set the ccreg to a constant value and see if it can\n   // be optimized.\n   basic_block bb;\n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     for (rtx next_i, i = NEXT_INSN (BB_HEAD (bb));\n \t i != NULL_RTX && i != BB_END (bb); i = next_i)\n       {"}, {"sha": "843dfc6204e6c7d5f9aa47dd2b649c1eec36d4fb", "filename": "gcc/dce.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fdce.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fdce.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdce.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -511,7 +511,7 @@ reset_unmarked_insns_debug_uses (void)\n   basic_block bb;\n   rtx insn, next;\n \n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     FOR_BB_INSNS_REVERSE_SAFE (bb, insn, next)\n       if (DEBUG_INSN_P (insn))\n \t{\n@@ -550,7 +550,7 @@ delete_unmarked_insns (void)\n   rtx insn, next;\n   bool must_clean = false;\n \n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     FOR_BB_INSNS_REVERSE_SAFE (bb, insn, next)\n       if (NONDEBUG_INSN_P (insn))\n \t{"}, {"sha": "69816c1186a559f157d2da619dcce7fc5dc47ec0", "filename": "gcc/dominance.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fdominance.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fdominance.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdominance.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -357,7 +357,7 @@ calc_dfs_tree (struct dom_info *di, bool reverse)\n       basic_block b;\n       bool saw_unconnected = false;\n \n-      FOR_EACH_BB_REVERSE (b)\n+      FOR_EACH_BB_REVERSE_FN (b, cfun)\n \t{\n \t  if (EDGE_COUNT (b->succs) > 0)\n \t    {\n@@ -376,7 +376,7 @@ calc_dfs_tree (struct dom_info *di, bool reverse)\n \n       if (saw_unconnected)\n \t{\n-\t  FOR_EACH_BB_REVERSE (b)\n+\t  FOR_EACH_BB_REVERSE_FN (b, cfun)\n \t    {\n \t      basic_block b2;\n \t      if (di->dfs_order[b->index])"}, {"sha": "55269741211c7770f09cc152b2c5782994969976", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -1996,7 +1996,7 @@ final (rtx first, FILE *file, int optimize_p)\n \n       /* There is no cfg for a thunk.  */\n       if (!cfun->is_thunk)\n-\tFOR_EACH_BB_REVERSE (bb)\n+\tFOR_EACH_BB_REVERSE_FN (bb, cfun)\n \t  {\n \t    start_to_bb[INSN_UID (BB_HEAD (bb))] = bb;\n \t    end_to_bb[INSN_UID (BB_END (bb))] = bb;"}, {"sha": "e2d0e233e80960f15288e6d7ad58eb54286317b3", "filename": "gcc/function.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Ffunction.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Ffunction.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffunction.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -6236,7 +6236,7 @@ thread_prologue_and_epilogue_insns (void)\n \t    }\n \t  /* Now duplicate the tails.  */\n \t  if (!bitmap_empty_p (&bb_tail))\n-\t    FOR_EACH_BB_REVERSE (bb)\n+\t    FOR_EACH_BB_REVERSE_FN (bb, cfun)\n \t      {\n \t\tbasic_block copy_bb, tbb;\n \t\trtx insert_point;"}, {"sha": "fdf0a572379d2b90a28d3a74778c12dd6e48a759", "filename": "gcc/gcse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fgcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fgcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcse.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -2829,7 +2829,7 @@ compute_code_hoist_vbeinout (void)\n \n       /* We scan the blocks in the reverse order to speed up\n \t the convergence.  */\n-      FOR_EACH_BB_REVERSE (bb)\n+      FOR_EACH_BB_REVERSE_FN (bb, cfun)\n \t{\n \t  if (bb->next_bb != EXIT_BLOCK_PTR_FOR_FN (cfun))\n \t    {"}, {"sha": "740387087be67b92a2fa3f3ab0863f86371c55e7", "filename": "gcc/ira.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -3772,7 +3772,7 @@ update_equiv_regs (void)\n      within the same loop (or in an inner loop), then move the register\n      initialization just before the use, so that they are in the same\n      basic block.  */\n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       loop_depth = bb_loop_depth (bb);\n       for (insn = BB_END (bb);\n@@ -4127,7 +4127,7 @@ build_insn_chain (void)\n   for (i = 0; i < FIRST_PSEUDO_REGISTER; i++)\n     if (TEST_HARD_REG_BIT (eliminable_regset, i))\n       bitmap_set_bit (elim_regset, i);\n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       bitmap_iterator bi;\n       rtx insn;"}, {"sha": "b5d56e05bf8a3907ff3ecb24170b05430e1e7aa6", "filename": "gcc/lcm.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Flcm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Flcm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Flcm.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -109,7 +109,7 @@ compute_antinout_edge (sbitmap *antloc, sbitmap *transp, sbitmap *antin,\n \n   /* Put every block on the worklist; this is necessary because of the\n      optimistic initialization of ANTIN above.  */\n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       *qin++ = bb;\n       bb->aux = bb;"}, {"sha": "4f68536d62295f86ced15c85774ac86d4f14c6f3", "filename": "gcc/mode-switching.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fmode-switching.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fmode-switching.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmode-switching.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -692,7 +692,7 @@ optimize_mode_switching (void)\n \t      insert_insn_on_edge (mode_set, eg);\n \t    }\n \n-\t  FOR_EACH_BB_REVERSE (bb)\n+\t  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n \t    if (bitmap_bit_p (del[bb->index], j))\n \t      {\n \t\tmake_preds_opaque (bb, j);\n@@ -712,7 +712,7 @@ optimize_mode_switching (void)\n     {\n       int no_mode = num_modes[entity_map[j]];\n \n-      FOR_EACH_BB_REVERSE (bb)\n+      FOR_EACH_BB_REVERSE_FN (bb, cfun)\n \t{\n \t  struct seginfo *ptr, *next;\n \t  for (ptr = bb_info[j][bb->index].seginfo; ptr; ptr = next)"}, {"sha": "37bd9ff6ae38668caed601be87809853dfc7a2c8", "filename": "gcc/postreload.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fpostreload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Fpostreload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpostreload.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -1281,7 +1281,7 @@ reload_combine (void)\n   label_live = XNEWVEC (HARD_REG_SET, n_labels);\n   CLEAR_HARD_REG_SET (ever_live_at_start);\n \n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       insn = BB_HEAD (bb);\n       if (LABEL_P (insn))"}, {"sha": "dbd9a8a506565a89b4f52d289b37213de3526795", "filename": "gcc/recog.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Frecog.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Frecog.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frecog.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -2902,7 +2902,7 @@ split_all_insns (void)\n   bitmap_clear (blocks);\n   changed = false;\n \n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       rtx insn, next;\n       bool finish = false;\n@@ -3556,7 +3556,7 @@ peephole2_optimize (void)\n   search_ofs = 0;\n   live = BITMAP_ALLOC (&reg_obstack);\n \n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     {\n       bool past_end = false;\n       int pos;"}, {"sha": "a37ef85d6fb6c605db92e49f25b6d5404b5c3378", "filename": "gcc/tree-ssa-live.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Ftree-ssa-live.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4f42035e387241ab4225dfe948d5947ac3a6b883/gcc%2Ftree-ssa-live.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-live.c?ref=4f42035e387241ab4225dfe948d5947ac3a6b883", "patch": "@@ -1050,7 +1050,7 @@ live_worklist (tree_live_info_p live)\n \n   /* Visit all the blocks in reverse order and propagate live on entry values\n      into the predecessors blocks.  */\n-  FOR_EACH_BB_REVERSE (bb)\n+  FOR_EACH_BB_REVERSE_FN (bb, cfun)\n     loe_visit_block (live, bb, visited, tmp);\n \n   /* Process any blocks which require further iteration.  */"}]}