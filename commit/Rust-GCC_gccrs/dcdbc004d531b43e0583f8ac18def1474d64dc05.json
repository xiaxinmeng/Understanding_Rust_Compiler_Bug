{"sha": "dcdbc004d531b43e0583f8ac18def1474d64dc05", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGNkYmMwMDRkNTMxYjQzZTA1ODNmOGFjMThkZWYxNDc0ZDY0ZGMwNQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-10-20T02:48:43Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-10-20T02:48:43Z"}, "message": "Expand PTRMEM_CST only when necessary.\n\n\t* constexpr.c (cxx_eval_constant_expression): Expand PTRMEM_CST\n\tonly when necessary.\n\t(cxx_eval_component_reference): Like here.\n\t* decl2.c (lower_var_init): And here.\n\t(c_parse_final_cleanups): Call it.\n\t* typeck2.c (digest_init_r): Not here.\n\t* decl.c (complete_vars): Or here.\n\t(cp_finish_decl): Add local statics to symbol table.\n\nFrom-SVN: r229018", "tree": {"sha": "a3ee54d747eb001c8c79a026521c8920f2221b27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a3ee54d747eb001c8c79a026521c8920f2221b27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/dcdbc004d531b43e0583f8ac18def1474d64dc05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcdbc004d531b43e0583f8ac18def1474d64dc05", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dcdbc004d531b43e0583f8ac18def1474d64dc05", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dcdbc004d531b43e0583f8ac18def1474d64dc05/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "13b380a3257189e5232010c982b8c691b348482c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/13b380a3257189e5232010c982b8c691b348482c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/13b380a3257189e5232010c982b8c691b348482c"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "6bc52c360804f36a98c1eeaed4289f4bc9eb4cb4", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdbc004d531b43e0583f8ac18def1474d64dc05/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdbc004d531b43e0583f8ac18def1474d64dc05/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=dcdbc004d531b43e0583f8ac18def1474d64dc05", "patch": "@@ -1,3 +1,14 @@\n+2015-10-19  Jason Merrill  <jason@redhat.com>\n+\n+\t* constexpr.c (cxx_eval_constant_expression): Expand PTRMEM_CST\n+\tonly when necessary.\n+\t(cxx_eval_component_reference): Like here.\n+\t* decl2.c (lower_var_init): And here.\n+\t(c_parse_final_cleanups): Call it.\n+\t* typeck2.c (digest_init_r): Not here.\n+\t* decl.c (complete_vars): Or here.\n+\t(cp_finish_decl): Add local statics to symbol table.\n+\n 2015-10-17  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/68006"}, {"sha": "3d682fd23f2a01c314ff3be4b5efa9f998eae7c6", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdbc004d531b43e0583f8ac18def1474d64dc05/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdbc004d531b43e0583f8ac18def1474d64dc05/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=dcdbc004d531b43e0583f8ac18def1474d64dc05", "patch": "@@ -1863,6 +1863,8 @@ cxx_eval_component_reference (const constexpr_ctx *ctx, tree t,\n   tree whole = cxx_eval_constant_expression (ctx, orig_whole,\n \t\t\t\t\t     lval,\n \t\t\t\t\t     non_constant_p, overflow_p);\n+  if (TREE_CODE (whole) == PTRMEM_CST)\n+    whole = cplus_expand_constant (whole);\n   if (whole == orig_whole)\n     return t;\n   if (lval)\n@@ -3129,9 +3131,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n     }\n   if (CONSTANT_CLASS_P (t))\n     {\n-      if (TREE_CODE (t) == PTRMEM_CST)\n-\tt = cplus_expand_constant (t);\n-      else if (TREE_OVERFLOW (t) && (!flag_permissive || ctx->quiet))\n+      if (TREE_OVERFLOW (t) && (!flag_permissive || ctx->quiet))\n \t*overflow_p = true;\n       return t;\n     }\n@@ -3545,7 +3545,11 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t\t\t\t\t\tnon_constant_p, overflow_p);\n \tif (*non_constant_p)\n \t  return t;\n-\tif (POINTER_TYPE_P (TREE_TYPE (t))\n+\ttree type = TREE_TYPE (t);\n+\tif (TREE_CODE (op) == PTRMEM_CST\n+\t    && !TYPE_PTRMEM_P (type))\n+\t  op = cplus_expand_constant (op);\n+\tif (POINTER_TYPE_P (type)\n \t    && TREE_CODE (op) == INTEGER_CST\n \t    && !integer_zerop (op))\n \t  {\n@@ -3559,7 +3563,7 @@ cxx_eval_constant_expression (const constexpr_ctx *ctx, tree t,\n \t  /* We didn't fold at the top so we could check for ptr-int\n \t     conversion.  */\n \t  return fold (t);\n-\tr = fold_build1 (TREE_CODE (t), TREE_TYPE (t), op);\n+\tr = fold_build1 (TREE_CODE (t), type, op);\n \t/* Conversion of an out-of-range value has implementation-defined\n \t   behavior; the language considers it different from arithmetic\n \t   overflow, which is undefined.  */"}, {"sha": "50bb39c8f9a7c71962c402dc23566c9fb83d9cdf", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdbc004d531b43e0583f8ac18def1474d64dc05/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdbc004d531b43e0583f8ac18def1474d64dc05/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=dcdbc004d531b43e0583f8ac18def1474d64dc05", "patch": "@@ -6714,6 +6714,9 @@ cp_finish_decl (tree decl, tree init, bool init_const_expr_p,\n \t       to put statics on the list so we can deal with the label\n \t       address extension.  FIXME.  */\n \t    add_local_decl (cfun, decl);\n+\t  /* And make sure it's in the symbol table for\n+\t     c_parse_final_cleanups to find.  */\n+\t  varpool_node::get_create (decl);\n \t}\n \n       /* Convert the initializer to the type of DECL, if we have not\n@@ -14887,10 +14890,6 @@ complete_vars (tree type)\n \t      cp_apply_type_quals_to_decl (cp_type_quals (type), var);\n \t    }\n \n-\t  if (DECL_INITIAL (var)\n-\t      && decl_constant_var_p (var))\n-\t    DECL_INITIAL (var) = cplus_expand_constant (DECL_INITIAL (var));\n-\n \t  /* Remove this entry from the list.  */\n \t  incomplete_vars->unordered_remove (ix);\n \t}"}, {"sha": "3b3817e6da9febde9d9574186b44308ea3be1682", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdbc004d531b43e0583f8ac18def1474d64dc05/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdbc004d531b43e0583f8ac18def1474d64dc05/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=dcdbc004d531b43e0583f8ac18def1474d64dc05", "patch": "@@ -4484,6 +4484,22 @@ maybe_warn_sized_delete ()\n   maybe_warn_sized_delete (VEC_DELETE_EXPR);\n }\n \n+/* Earlier we left PTRMEM_CST in variable initializers alone so that we could\n+   look them up when evaluating non-type template parameters.  Now we need to\n+   lower them to something the back end can understand.  */\n+\n+static void\n+lower_var_init ()\n+{\n+  varpool_node *node;\n+  FOR_EACH_VARIABLE (node)\n+    {\n+      tree d = node->decl;\n+      if (tree init = DECL_INITIAL (d))\n+\tDECL_INITIAL (d) = cplus_expand_constant (init);\n+    }\n+}\n+\n /* This routine is called at the end of compilation.\n    Its job is to create all the code needed to initialize and\n    destroy the global aggregates.  We do the destruction\n@@ -4793,6 +4809,8 @@ c_parse_final_cleanups (void)\n     }\n   while (reconsider);\n \n+  lower_var_init ();\n+\n   generate_mangling_aliases ();\n \n   /* All used inline functions must have a definition at this point.  */"}, {"sha": "e61a57f8b3540bcf8fe3ae2b7bf7dd2132b6bc92", "filename": "gcc/cp/typeck2.c", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/dcdbc004d531b43e0583f8ac18def1474d64dc05/gcc%2Fcp%2Ftypeck2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/dcdbc004d531b43e0583f8ac18def1474d64dc05/gcc%2Fcp%2Ftypeck2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck2.c?ref=dcdbc004d531b43e0583f8ac18def1474d64dc05", "patch": "@@ -1059,22 +1059,11 @@ digest_init_r (tree type, tree init, bool nested, int flags,\n        || BRACE_ENCLOSED_INITIALIZER_P (init))\n       && (SCALAR_TYPE_P (type) || code == REFERENCE_TYPE))\n     {\n-      tree *exp;\n-\n       if (nested)\n \tflags |= LOOKUP_NO_NARROWING;\n       init = convert_for_initialization (0, type, init, flags,\n \t\t\t\t\t ICR_INIT, NULL_TREE, 0,\n \t\t\t\t\t complain);\n-      exp = &init;\n-\n-      /* Skip any conversions since we'll be outputting the underlying\n-\t constant.  */\n-      while (CONVERT_EXPR_P (*exp)\n-\t     || TREE_CODE (*exp) == NON_LVALUE_EXPR)\n-\texp = &TREE_OPERAND (*exp, 0);\n-\n-      *exp = cplus_expand_constant (*exp);\n \n       return init;\n     }"}]}