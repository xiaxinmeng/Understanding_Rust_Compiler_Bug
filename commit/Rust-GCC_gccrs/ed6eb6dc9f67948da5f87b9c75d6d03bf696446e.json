{"sha": "ed6eb6dc9f67948da5f87b9c75d6d03bf696446e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ2ZWI2ZGM5ZjY3OTQ4ZGE1Zjg3YjljNzVkNmQwM2JmNjk2NDQ2ZQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2014-03-28T17:24:52Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2014-03-28T17:24:52Z"}, "message": "[ARM/AArch64][2/2] Crypto intrinsics tuning for Cortex-A53 - pipeline description\n\n\t* config/arm/aarch-common.c (aarch_crypto_can_dual_issue): New.\n\t* config/arm/aarch-common-protos.h (aarch_crypto_can_dual_issue):\n\tDeclare extern.\n\t* config/arm/cortex-a53.md: Add reservations and bypass for crypto\n\tinstructions as well as AdvancedSIMD loads.\n\nFrom-SVN: r208910", "tree": {"sha": "4449b0f8f099c92e987e7aa8b1311aaae0f48787", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/4449b0f8f099c92e987e7aa8b1311aaae0f48787"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "b10baa9584d009f3725083c97c7d44f88749abe0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b10baa9584d009f3725083c97c7d44f88749abe0", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b10baa9584d009f3725083c97c7d44f88749abe0"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "8434f0448ecbaf4c7adee2eb7e4f75c049dabd2e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed6eb6dc9f67948da5f87b9c75d6d03bf696446e", "patch": "@@ -1,3 +1,11 @@\n+2014-03-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/aarch-common.c (aarch_crypto_can_dual_issue): New.\n+\t* config/arm/aarch-common-protos.h (aarch_crypto_can_dual_issue):\n+\tDeclare extern.\n+\t* config/arm/cortex-a53.md: Add reservations and bypass for crypto\n+\tinstructions as well as AdvancedSIMD loads.\n+\n 2014-03-28  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n \n \t* config/aarch64/aarch64-simd.md (aarch64_crypto_aes<aes_op>v16qi):"}, {"sha": "3e6e2429f10cdcd9a4e0ce8a31cfec14b37e0232", "filename": "gcc/config/arm/aarch-common-protos.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e/gcc%2Fconfig%2Farm%2Faarch-common-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common-protos.h?ref=ed6eb6dc9f67948da5f87b9c75d6d03bf696446e", "patch": "@@ -23,6 +23,7 @@\n #ifndef GCC_AARCH_COMMON_PROTOS_H\n #define GCC_AARCH_COMMON_PROTOS_H\n \n+extern int aarch_crypto_can_dual_issue (rtx, rtx);\n extern int arm_early_load_addr_dep (rtx, rtx);\n extern int arm_early_store_addr_dep (rtx, rtx);\n extern int arm_mac_accumulator_is_mul_result (rtx, rtx);"}, {"sha": "af8fc9996fabebadb2aab07e4123945c9b9560af", "filename": "gcc/config/arm/aarch-common.c", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e/gcc%2Fconfig%2Farm%2Faarch-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e/gcc%2Fconfig%2Farm%2Faarch-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Faarch-common.c?ref=ed6eb6dc9f67948da5f87b9c75d6d03bf696446e", "patch": "@@ -31,6 +31,42 @@\n #include \"c-family/c-common.h\"\n #include \"rtl.h\"\n \n+/* In ARMv8-A there's a general expectation that AESE/AESMC\n+   and AESD/AESIMC sequences of the form:\n+\n+   AESE Vn, _\n+   AESMC Vn, Vn\n+\n+   will issue both instructions in a single cycle on super-scalar\n+   implementations.  This function identifies such pairs.  */\n+\n+int\n+aarch_crypto_can_dual_issue (rtx producer, rtx consumer)\n+{\n+  rtx producer_src, consumer_src;\n+\n+  producer = single_set (producer);\n+  consumer = single_set (consumer);\n+\n+  producer_src = producer ? SET_SRC (producer) : NULL;\n+  consumer_src = consumer ? SET_SRC (consumer) : NULL;\n+\n+  if (producer_src && consumer_src\n+      && GET_CODE (producer_src) == UNSPEC && GET_CODE (consumer_src) == UNSPEC\n+      && ((XINT (producer_src, 1) == UNSPEC_AESE\n+           && XINT (consumer_src, 1) == UNSPEC_AESMC)\n+          || (XINT (producer_src, 1) == UNSPEC_AESD\n+              && XINT (consumer_src, 1) == UNSPEC_AESIMC)))\n+  {\n+    unsigned int regno = REGNO (SET_DEST (producer));\n+\n+    return REGNO (SET_DEST (consumer)) == regno\n+           && REGNO (XVECEXP (consumer_src, 0, 0)) == regno;\n+  }\n+\n+  return 0;\n+}\n+\n typedef struct\n {\n   rtx_code search_code;"}, {"sha": "b131c814d0750ea026a5ff5b8571d901a0b04f7e", "filename": "gcc/config/arm/cortex-a53.md", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed6eb6dc9f67948da5f87b9c75d6d03bf696446e/gcc%2Fconfig%2Farm%2Fcortex-a53.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fcortex-a53.md?ref=ed6eb6dc9f67948da5f87b9c75d6d03bf696446e", "patch": "@@ -61,6 +61,11 @@\n \n (define_cpu_unit \"cortex_a53_fp_div_sqrt\" \"cortex_a53\")\n \n+;; The Advanced SIMD pipelines.\n+\n+(define_cpu_unit \"cortex_a53_simd0\" \"cortex_a53\")\n+(define_cpu_unit \"cortex_a53_simd1\" \"cortex_a53\")\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;; ALU instructions.\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -247,6 +252,39 @@\n        (eq_attr \"type\" \"fdivd, fsqrtd\"))\n   \"cortex_a53_slot0, cortex_a53_fp_div_sqrt * 28\")\n \n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; ARMv8-A Cryptographic extensions.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn_reservation \"cortex_a53_crypto_aese\" 2\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"crypto_aese\"))\n+  \"cortex_a53_simd0\")\n+\n+(define_insn_reservation \"cortex_a53_crypto_aesmc\" 2\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"crypto_aesmc\"))\n+  \"cortex_a53_simd0 | cortex_a53_simd1\")\n+\n+(define_insn_reservation \"cortex_a53_crypto_sha1_fast\" 2\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"crypto_sha1_fast, crypto_sha256_fast\"))\n+  \"cortex_a53_simd0\")\n+\n+(define_insn_reservation \"cortex_a53_crypto_sha1_xor\" 3\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"crypto_sha1_xor\"))\n+  \"cortex_a53_simd0\")\n+\n+(define_insn_reservation \"cortex_a53_crypto_sha_slow\" 5\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"crypto_sha1_slow, crypto_sha256_slow\"))\n+  \"cortex_a53_simd0\")\n+\n+(define_bypass 0 \"cortex_a53_crypto_aese\"\n+                 \"cortex_a53_crypto_aesmc\"\n+                 \"aarch_crypto_can_dual_issue\")\n+\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n ;; VFP to/from core transfers.\n ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n@@ -284,6 +322,16 @@\n        (eq_attr \"type\" \"f_loadd\"))\n   \"cortex_a53_slot0\")\n \n+(define_insn_reservation \"cortex_a53_f_load_2reg\" 5\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"neon_load2_2reg_q\"))\n+  \"(cortex_a53_slot_any+cortex_a53_ls)*2\")\n+\n+(define_insn_reservation \"cortex_a53_f_loadq\" 5\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"type\" \"neon_load1_1reg_q\"))\n+  \"cortex_a53_slot_any+cortex_a53_ls\")\n+\n (define_insn_reservation \"cortex_a53_f_stores\" 0\n   (and (eq_attr \"tune\" \"cortexa53\")\n        (eq_attr \"type\" \"f_stores\"))\n@@ -307,3 +355,11 @@\n \t\t  cortex_a53_fdivs, cortex_a53_fdivd,\\\n \t\t  cortex_a53_f2r\")\n \n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+;; Crude Advanced SIMD approximation.\n+;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n+\n+(define_insn_reservation \"cortex_53_advsimd\" 4\n+  (and (eq_attr \"tune\" \"cortexa53\")\n+       (eq_attr \"is_neon_type\" \"yes\"))\n+  \"cortex_a53_simd0\")"}]}