{"sha": "36bb088b048126eb29c92a5def5c2f7fe65b2700", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MzZiYjA4OGIwNDgxMjZlYjI5YzkyYTVkZWY1YzJmN2ZlNjViMjcwMA==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-07-11T11:21:38Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-07-11T11:21:38Z"}, "message": "PR libstdc++/28277 (partial: collate bits)\n\n2006-07-11  Paolo Carlini  <pcarlini@suse.de>\n\n\tPR libstdc++/28277 (partial: collate bits)\n\t* include/bits/locale_facets.tcc (collate<>::do_transform(\n\tconst _CharT*, const _CharT*)): Avoid __builtin_alloca with no\n\tlimit; also avoid multiple calls (in a loop).\n\t* testsuite/22_locale/collate/transform/char/28277.cc: New.\n\t* testsuite/22_locale/collate/transform/wchar_t/28277.cc: Likewise.\n\nFrom-SVN: r115332", "tree": {"sha": "252b02320f7138f79ec6e29074172cb3a0442ce6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/252b02320f7138f79ec6e29074172cb3a0442ce6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/36bb088b048126eb29c92a5def5c2f7fe65b2700", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36bb088b048126eb29c92a5def5c2f7fe65b2700", "html_url": "https://github.com/Rust-GCC/gccrs/commit/36bb088b048126eb29c92a5def5c2f7fe65b2700", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/36bb088b048126eb29c92a5def5c2f7fe65b2700/comments", "author": null, "committer": null, "parents": [{"sha": "9d6a4afbc8eac608855512c43de5dd939efc06b3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9d6a4afbc8eac608855512c43de5dd939efc06b3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9d6a4afbc8eac608855512c43de5dd939efc06b3"}], "stats": {"total": 188, "additions": 160, "deletions": 28}, "files": [{"sha": "249e6ac3c861d85af66cebfb694e510ac885826e", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36bb088b048126eb29c92a5def5c2f7fe65b2700/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36bb088b048126eb29c92a5def5c2f7fe65b2700/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=36bb088b048126eb29c92a5def5c2f7fe65b2700", "patch": "@@ -1,3 +1,12 @@\n+2006-07-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+\tPR libstdc++/28277 (partial: collate bits)\n+\t* include/bits/locale_facets.tcc (collate<>::do_transform(\n+\tconst _CharT*, const _CharT*)): Avoid __builtin_alloca with no\n+\tlimit; also avoid multiple calls (in a loop).\n+\t* testsuite/22_locale/collate/transform/char/28277.cc: New.\n+\t* testsuite/22_locale/collate/transform/wchar_t/28277.cc: Likewise.\n+\n 2006-07-10  Mike Stump  <mrs@apple.com>\n \n \t* libsupc++/eh_globals.cc (~__eh_globals_init): Unset _M_init."}, {"sha": "ad45863ee85b25523a2750f97008326c476eb6d8", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 47, "deletions": 28, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36bb088b048126eb29c92a5def5c2f7fe65b2700/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36bb088b048126eb29c92a5def5c2f7fe65b2700/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=36bb088b048126eb29c92a5def5c2f7fe65b2700", "patch": "@@ -2455,43 +2455,62 @@ _GLIBCXX_END_LDBL_NAMESPACE\n     collate<_CharT>::\n     do_transform(const _CharT* __lo, const _CharT* __hi) const\n     {\n-      // strxfrm assumes zero-terminated strings so we make a copy\n-      string_type __str(__lo, __hi);\n+      string_type __ret;\n \n-      const _CharT* __p = __str.c_str();\n-      const _CharT* __pend = __str.data() + __str.length();\n+      // Use alloca for an _M_transform temporary buffer up to an arbitrary,\n+      // but limited, asize, to avoid abusing the stack.  Otherwise fall back\n+      // to dynamic memory allocation.  This means splitting the computation\n+      // itself in hunks:  a size <= 8k (thus <= 16k asize) appear sufficient\n+      // for optimal performance.\n+      const size_t __size = std::min(size_t(__hi - __lo), size_t(8192));\n+      const size_t __asize = 2 * __size;\n \n-      size_t __len = (__hi - __lo) * 2;\n+      size_t __len = __asize;\n \n-      string_type __ret;\n+      _CharT* __c =\n+\tstatic_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __len));\n \n-      // strxfrm stops when it sees a nul character so we break\n-      // the string into zero-terminated substrings and pass those\n-      // to strxfrm.\n-      for (;;)\n+      for (size_t __hunk = __size; __lo < __hi;\n+\t   __lo += __hunk, __hunk = std::min(size_t(__hi - __lo), __hunk))\n \t{\n-\t  // First try a buffer perhaps big enough.\n-\t  _CharT* __c =\n-\t    static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT) * __len));\n-\t  size_t __res = _M_transform(__c, __p, __len);\n-\t  // If the buffer was not large enough, try again with the\n-\t  // correct size.\n-\t  if (__res >= __len)\n+\t  // strxfrm assumes zero-terminated strings so we make a copy\n+\t  const string_type __str(__lo, __lo + __hunk);\n+\n+\t  const _CharT* __p = __str.c_str();\n+\t  const _CharT* __pend = __str.data() + __hunk;\n+\n+\t  // strxfrm stops when it sees a nul character so we break\n+\t  // the string into zero-terminated substrings and pass those\n+\t  // to strxfrm.\n+\t  for (;;)\n \t    {\n-\t      __len = __res + 1;\n-\t      __c = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)\n-\t\t\t\t\t\t\t  * __len));\n-\t      __res = _M_transform(__c, __p, __len);\n-\t    }\n+\t      // First try a buffer perhaps big enough.\n+\t      size_t __res = _M_transform(__c, __p, __len);\n+\t      // If the buffer was not large enough, try again with the\n+\t      // correct size.\n+\t      if (__res >= __len)\n+\t\t{\n+\t\t  if (__len > __asize)\n+\t\t    delete [] __c;\n+\t\t  __len = __res + 1;\n+\t\t  __c = new _CharT[__len];\n+\t\t  __res = _M_transform(__c, __p, __len);\n+\t\t}\n \n-\t  __ret.append(__c, __res);\n-\t  __p += char_traits<_CharT>::length(__p);\n-\t  if (__p == __pend)\n-\t    return __ret;\n+\t      __ret.append(__c, __res);\n+\t      __p += char_traits<_CharT>::length(__p);\n+\t      if (__p == __pend)\n+\t\tbreak;\n \n-\t  __p++;\n-\t  __ret.push_back(_CharT());\n+\t      __p++;\n+\t      __ret.push_back(_CharT());\n+\t    }\n \t}\n+\n+      if (__len > __asize)\n+\tdelete [] __c;\n+\n+      return __ret;\n     }\n \n   template<typename _CharT>"}, {"sha": "c81cdaa4ce458914209b17162a92cafe04f0e4fe", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/char/28277.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36bb088b048126eb29c92a5def5c2f7fe65b2700/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F28277.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36bb088b048126eb29c92a5def5c2f7fe65b2700/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F28277.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fchar%2F28277.cc?ref=36bb088b048126eb29c92a5def5c2f7fe65b2700", "patch": "@@ -0,0 +1,52 @@\n+// 2006-07-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/28277\n+void test01()\n+{\n+  using namespace std;\n+  typedef collate<char>::string_type string_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+\n+  // cache the collate facets\n+  const collate<char>& coll_c = use_facet<collate<char> >(loc_c); \n+\n+  const string_type sstr(10000000, 'a');\n+\n+  const string_type dstr = coll_c.transform(sstr.data(),\n+\t\t\t\t\t    sstr.data() + sstr.size());\n+\n+  VERIFY( dstr == sstr );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "3a9fbb9fac7149ef49444b5ab5d97cf764595feb", "filename": "libstdc++-v3/testsuite/22_locale/collate/transform/wchar_t/28277.cc", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/36bb088b048126eb29c92a5def5c2f7fe65b2700/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F28277.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/36bb088b048126eb29c92a5def5c2f7fe65b2700/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F28277.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fcollate%2Ftransform%2Fwchar_t%2F28277.cc?ref=36bb088b048126eb29c92a5def5c2f7fe65b2700", "patch": "@@ -0,0 +1,52 @@\n+// 2006-07-11  Paolo Carlini  <pcarlini@suse.de>\n+\n+// Copyright (C) 2006 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,\n+// USA.\n+\n+// 22.2.4.1.1 collate members\n+\n+#include <locale>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/28277\n+void test01()\n+{\n+  using namespace std;\n+  typedef collate<wchar_t>::string_type string_type;\n+\n+  bool test __attribute__((unused)) = true;\n+\n+  // basic construction\n+  locale loc_c = locale::classic();\n+\n+  // cache the collate facets\n+  const collate<wchar_t>& coll_c = use_facet<collate<wchar_t> >(loc_c); \n+\n+  const string_type sstr(10000000, L'a');\n+\n+  const string_type dstr = coll_c.transform(sstr.data(),\n+\t\t\t\t\t    sstr.data() + sstr.size());\n+\n+  VERIFY( dstr == sstr );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}