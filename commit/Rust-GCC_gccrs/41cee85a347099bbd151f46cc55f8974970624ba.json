{"sha": "41cee85a347099bbd151f46cc55f8974970624ba", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDFjZWU4NWEzNDcwOTliYmQxNTFmNDZjYzU1Zjg5NzQ5NzA2MjRiYQ==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2015-03-18T10:31:24Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2015-03-18T10:31:24Z"}, "message": "re PR c++/65340 ([C++14]ICE in mark_used, at decl2.c:5040)\n\n2015-03-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/65340\n\t* call.c (build_over_call): Pass the tsubst_flags_t argument to\n\tmark_used.\n\t* decl2.c (mark_used): Inline the require_deduced_type call and\n\tguard the error call.\n\n2015-03-18  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\tPR c++/65340\n\t* g++.dg/cpp1y/pr65340.C: New.\n\nFrom-SVN: r221483", "tree": {"sha": "819d3cb9a40bb8851300051de452f6e65fefc204", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/819d3cb9a40bb8851300051de452f6e65fefc204"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41cee85a347099bbd151f46cc55f8974970624ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41cee85a347099bbd151f46cc55f8974970624ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41cee85a347099bbd151f46cc55f8974970624ba", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41cee85a347099bbd151f46cc55f8974970624ba/comments", "author": null, "committer": null, "parents": [{"sha": "4d1de54341f3d58260b7b11fabb95a0c5cd0e0b7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4d1de54341f3d58260b7b11fabb95a0c5cd0e0b7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4d1de54341f3d58260b7b11fabb95a0c5cd0e0b7"}], "stats": {"total": 41, "additions": 39, "deletions": 2}, "files": [{"sha": "c8135ffa56fcb95c8fdcd41e262a693254e47499", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41cee85a347099bbd151f46cc55f8974970624ba/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41cee85a347099bbd151f46cc55f8974970624ba/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=41cee85a347099bbd151f46cc55f8974970624ba", "patch": "@@ -1,3 +1,11 @@\n+2015-03-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/65340\n+\t* call.c (build_over_call): Pass the tsubst_flags_t argument to\n+\tmark_used.\n+\t* decl2.c (mark_used): Inline the require_deduced_type call and\n+\tguard the error call.\n+\n 2015-03-16  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/65061"}, {"sha": "31d2b9c2c9e1cd65146c147425abc842d2266bfa", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41cee85a347099bbd151f46cc55f8974970624ba/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41cee85a347099bbd151f46cc55f8974970624ba/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=41cee85a347099bbd151f46cc55f8974970624ba", "patch": "@@ -7486,7 +7486,7 @@ build_over_call (struct z_candidate *cand, int flags, tsubst_flags_t complain)\n     }\n \n   if (!already_used\n-      && !mark_used (fn))\n+      && !mark_used (fn, complain))\n     return error_mark_node;\n \n   if (DECL_VINDEX (fn) && (flags & LOOKUP_NONVIRTUAL) == 0"}, {"sha": "a2d1eae2015662cd6683fae887e548a956d9dc01", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41cee85a347099bbd151f46cc55f8974970624ba/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41cee85a347099bbd151f46cc55f8974970624ba/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=41cee85a347099bbd151f46cc55f8974970624ba", "patch": "@@ -5037,7 +5037,12 @@ mark_used (tree decl, tsubst_flags_t complain)\n       && uses_template_parms (DECL_TI_ARGS (decl)))\n     return true;\n \n-  require_deduced_type (decl);\n+  if (undeduced_auto_decl (decl))\n+    {\n+      if (complain & tf_error)\n+\terror (\"use of %qD before deduction of %<auto%>\", decl);\n+      return false;\n+    }\n \n   /* If we don't need a value, then we don't need to synthesize DECL.  */\n   if (cp_unevaluated_operand != 0)"}, {"sha": "16605f35f2a428d669862f486e10751d3c738740", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41cee85a347099bbd151f46cc55f8974970624ba/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41cee85a347099bbd151f46cc55f8974970624ba/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=41cee85a347099bbd151f46cc55f8974970624ba", "patch": "@@ -1,3 +1,8 @@\n+2015-03-18  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\tPR c++/65340\n+\t* g++.dg/cpp1y/pr65340.C: New.\n+\n 2015-03-17 Jerry DeLisle  <jvdelisle@gcc.gnu.org>\n \n \tPR fortran/64432"}, {"sha": "848eff965e5e7ae88b38cbb67a933207b6f564e0", "filename": "gcc/testsuite/g++.dg/cpp1y/pr65340.C", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41cee85a347099bbd151f46cc55f8974970624ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65340.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41cee85a347099bbd151f46cc55f8974970624ba/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65340.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1y%2Fpr65340.C?ref=41cee85a347099bbd151f46cc55f8974970624ba", "patch": "@@ -0,0 +1,19 @@\n+// PR c++/65340\n+// { dg-do compile { target c++14 } }\n+\n+template <typename Type> Type constant;\n+namespace reflect {\n+namespace functors {\n+  struct recurse { auto operator()(, ); }; // { dg-error \"expected\" }\n+}\n+  auto &recurse = constant < functors :: recurse > ;\n+}\n+namespace functors {\n+struct traverse {\n+  template <typename Algo, typename Value>\n+  auto operator()(Algo, Value) -> decltype(reflect\n+                                           :: recurse(0, 0)); // { dg-error \"use of\" }\n+};\n+}\n+auto &traverse = constant < functors :: traverse > ;\n+operator()()->decltype(traverse(0, 0)) // { dg-error \"no match|expected\" }"}]}