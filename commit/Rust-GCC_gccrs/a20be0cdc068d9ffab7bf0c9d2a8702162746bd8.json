{"sha": "a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTIwYmUwY2RjMDY4ZDlmZmFiN2JmMGM5ZDJhODcwMjE2Mjc0NmJkOA==", "commit": {"author": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-08-25T02:58:14Z"}, "committer": {"name": "Kewen Lin", "email": "linkw@linux.ibm.com", "date": "2021-08-25T02:58:14Z"}, "message": "rs6000: Add vec_unpacku_{hi,lo}_v4si\n\nThe existing vec_unpacku_{hi,lo} supports emulated unsigned\nunpacking for short and char but misses the support for int.\nThis patch adds the support of vec_unpacku_{hi,lo}_v4si.\n\nMeanwhile, the current implementation uses vector permutation\nway, which requires one extra customized constant vector as\nthe permutation control vector.  It's better to use vector\nmerge high/low with zero constant vector, to save the space\nin constant area as well as the cost to initialize pcv in\nprologue.  This patch updates it with vector merging and\nsimplify it with iterators.\n\ngcc/ChangeLog:\n\n\t* config/rs6000/altivec.md (vec_unpacku_hi_v16qi): Remove.\n\t(vec_unpacku_hi_v8hi): Likewise.\n\t(vec_unpacku_lo_v16qi): Likewise.\n\t(vec_unpacku_lo_v8hi): Likewise.\n\t(vec_unpacku_hi_<VP_small_lc>): New define_expand.\n\t(vec_unpacku_lo_<VP_small_lc>): Likewise.\n\ngcc/testsuite/ChangeLog:\n\n\t* gcc.target/powerpc/unpack-vectorize-1.c: New test.\n\t* gcc.target/powerpc/unpack-vectorize-1.h: New test.\n\t* gcc.target/powerpc/unpack-vectorize-2.c: New test.\n\t* gcc.target/powerpc/unpack-vectorize-2.h: New test.\n\t* gcc.target/powerpc/unpack-vectorize-3.c: New test.\n\t* gcc.target/powerpc/unpack-vectorize-3.h: New test.\n\t* gcc.target/powerpc/unpack-vectorize-run-1.c: New test.\n\t* gcc.target/powerpc/unpack-vectorize-run-2.c: New test.\n\t* gcc.target/powerpc/unpack-vectorize-run-3.c: New test.\n\t* gcc.target/powerpc/unpack-vectorize.h: New test.", "tree": {"sha": "b8aa5dd0159c14f6924996710f91d40ca926cb33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b8aa5dd0159c14f6924996710f91d40ca926cb33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/comments", "author": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedilyn", "id": 38515402, "node_id": "MDQ6VXNlcjM4NTE1NDAy", "avatar_url": "https://avatars.githubusercontent.com/u/38515402?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedilyn", "html_url": "https://github.com/jedilyn", "followers_url": "https://api.github.com/users/jedilyn/followers", "following_url": "https://api.github.com/users/jedilyn/following{/other_user}", "gists_url": "https://api.github.com/users/jedilyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedilyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedilyn/subscriptions", "organizations_url": "https://api.github.com/users/jedilyn/orgs", "repos_url": "https://api.github.com/users/jedilyn/repos", "events_url": "https://api.github.com/users/jedilyn/events{/privacy}", "received_events_url": "https://api.github.com/users/jedilyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f5391dde1a83086b451f7534c815ab1267bb6bc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4f5391dde1a83086b451f7534c815ab1267bb6bc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4f5391dde1a83086b451f7534c815ab1267bb6bc"}], "stats": {"total": 325, "additions": 196, "deletions": 129}, "files": [{"sha": "93d237156d57d00c050da939e782dc044a860128", "filename": "gcc/config/rs6000/altivec.md", "status": "modified", "additions": 29, "deletions": 129, "changes": 158, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Fconfig%2Frs6000%2Faltivec.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Fconfig%2Frs6000%2Faltivec.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Faltivec.md?ref=a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "patch": "@@ -134,10 +134,8 @@\n    UNSPEC_VMULWLUH\n    UNSPEC_VMULWHSH\n    UNSPEC_VMULWLSH\n-   UNSPEC_VUPKHUB\n-   UNSPEC_VUPKHUH\n-   UNSPEC_VUPKLUB\n-   UNSPEC_VUPKLUH\n+   UNSPEC_VUPKHU\n+   UNSPEC_VUPKLU\n    UNSPEC_VPERMSI\n    UNSPEC_VPERMHI\n    UNSPEC_INTERHI\n@@ -3688,143 +3686,45 @@\n   [(set_attr \"type\" \"vecperm\")\n    (set_attr \"isa\" \"p9v,*\")])\n \n-(define_expand \"vec_unpacku_hi_v16qi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")]\n-                     UNSPEC_VUPKHUB))]\n-  \"TARGET_ALTIVEC\"      \n-{  \n-  rtx vzero = gen_reg_rtx (V8HImode);\n-  rtx mask = gen_reg_rtx (V16QImode);\n-  rtvec v = rtvec_alloc (16);\n-  bool be = BYTES_BIG_ENDIAN;\n-   \n-  emit_insn (gen_altivec_vspltish (vzero, const0_rtx));\n-   \n-  RTVEC_ELT (v,  0) = gen_rtx_CONST_INT (QImode, be ? 16 :  7);\n-  RTVEC_ELT (v,  1) = gen_rtx_CONST_INT (QImode, be ?  0 : 16);\n-  RTVEC_ELT (v,  2) = gen_rtx_CONST_INT (QImode, be ? 16 :  6);\n-  RTVEC_ELT (v,  3) = gen_rtx_CONST_INT (QImode, be ?  1 : 16);\n-  RTVEC_ELT (v,  4) = gen_rtx_CONST_INT (QImode, be ? 16 :  5);\n-  RTVEC_ELT (v,  5) = gen_rtx_CONST_INT (QImode, be ?  2 : 16);\n-  RTVEC_ELT (v,  6) = gen_rtx_CONST_INT (QImode, be ? 16 :  4);\n-  RTVEC_ELT (v,  7) = gen_rtx_CONST_INT (QImode, be ?  3 : 16);\n-  RTVEC_ELT (v,  8) = gen_rtx_CONST_INT (QImode, be ? 16 :  3);\n-  RTVEC_ELT (v,  9) = gen_rtx_CONST_INT (QImode, be ?  4 : 16);\n-  RTVEC_ELT (v, 10) = gen_rtx_CONST_INT (QImode, be ? 16 :  2);\n-  RTVEC_ELT (v, 11) = gen_rtx_CONST_INT (QImode, be ?  5 : 16);\n-  RTVEC_ELT (v, 12) = gen_rtx_CONST_INT (QImode, be ? 16 :  1);\n-  RTVEC_ELT (v, 13) = gen_rtx_CONST_INT (QImode, be ?  6 : 16);\n-  RTVEC_ELT (v, 14) = gen_rtx_CONST_INT (QImode, be ? 16 :  0);\n-  RTVEC_ELT (v, 15) = gen_rtx_CONST_INT (QImode, be ?  7 : 16);\n-\n-  emit_insn (gen_vec_initv16qiqi (mask, gen_rtx_PARALLEL (V16QImode, v)));\n-  emit_insn (gen_vperm_v16qiv8hi (operands[0], operands[1], vzero, mask));\n-  DONE;\n-})\n-\n-(define_expand \"vec_unpacku_hi_v8hi\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n-                     UNSPEC_VUPKHUH))]\n+(define_expand \"vec_unpacku_hi_<VP_small_lc>\"\n+  [(set (match_operand:VP 0 \"register_operand\" \"=v\")\n+        (unspec:VP [(match_operand:<VP_small> 1 \"register_operand\" \"v\")]\n+         UNSPEC_VUPKHU))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtx vzero = gen_reg_rtx (V4SImode);\n-  rtx mask = gen_reg_rtx (V16QImode);\n-  rtvec v = rtvec_alloc (16);\n-  bool be = BYTES_BIG_ENDIAN;\n+  rtx vzero = gen_reg_rtx (<VP_small>mode);\n+  emit_insn (gen_altivec_vspltis<VU_char> (vzero, const0_rtx));\n \n-  emit_insn (gen_altivec_vspltisw (vzero, const0_rtx));\n- \n-  RTVEC_ELT (v,  0) = gen_rtx_CONST_INT (QImode, be ? 16 :  7);\n-  RTVEC_ELT (v,  1) = gen_rtx_CONST_INT (QImode, be ? 17 :  6);\n-  RTVEC_ELT (v,  2) = gen_rtx_CONST_INT (QImode, be ?  0 : 17);\n-  RTVEC_ELT (v,  3) = gen_rtx_CONST_INT (QImode, be ?  1 : 16);\n-  RTVEC_ELT (v,  4) = gen_rtx_CONST_INT (QImode, be ? 16 :  5);\n-  RTVEC_ELT (v,  5) = gen_rtx_CONST_INT (QImode, be ? 17 :  4);\n-  RTVEC_ELT (v,  6) = gen_rtx_CONST_INT (QImode, be ?  2 : 17);\n-  RTVEC_ELT (v,  7) = gen_rtx_CONST_INT (QImode, be ?  3 : 16);\n-  RTVEC_ELT (v,  8) = gen_rtx_CONST_INT (QImode, be ? 16 :  3);\n-  RTVEC_ELT (v,  9) = gen_rtx_CONST_INT (QImode, be ? 17 :  2);\n-  RTVEC_ELT (v, 10) = gen_rtx_CONST_INT (QImode, be ?  4 : 17);\n-  RTVEC_ELT (v, 11) = gen_rtx_CONST_INT (QImode, be ?  5 : 16);\n-  RTVEC_ELT (v, 12) = gen_rtx_CONST_INT (QImode, be ? 16 :  1);\n-  RTVEC_ELT (v, 13) = gen_rtx_CONST_INT (QImode, be ? 17 :  0);\n-  RTVEC_ELT (v, 14) = gen_rtx_CONST_INT (QImode, be ?  6 : 17);\n-  RTVEC_ELT (v, 15) = gen_rtx_CONST_INT (QImode, be ?  7 : 16);\n-\n-  emit_insn (gen_vec_initv16qiqi (mask, gen_rtx_PARALLEL (V16QImode, v)));\n-  emit_insn (gen_vperm_v8hiv4si (operands[0], operands[1], vzero, mask));\n-  DONE;\n-})\n+  rtx res = gen_reg_rtx (<VP_small>mode);\n+  rtx op1 = operands[1];\n \n-(define_expand \"vec_unpacku_lo_v16qi\"\n-  [(set (match_operand:V8HI 0 \"register_operand\" \"=v\")\n-        (unspec:V8HI [(match_operand:V16QI 1 \"register_operand\" \"v\")]\n-                     UNSPEC_VUPKLUB))]\n-  \"TARGET_ALTIVEC\"\n-{\n-  rtx vzero = gen_reg_rtx (V8HImode);\n-  rtx mask = gen_reg_rtx (V16QImode);\n-  rtvec v = rtvec_alloc (16);\n-  bool be = BYTES_BIG_ENDIAN;\n-\n-  emit_insn (gen_altivec_vspltish (vzero, const0_rtx));\n-\n-  RTVEC_ELT (v,  0) = gen_rtx_CONST_INT (QImode, be ? 16 : 15);\n-  RTVEC_ELT (v,  1) = gen_rtx_CONST_INT (QImode, be ?  8 : 16);\n-  RTVEC_ELT (v,  2) = gen_rtx_CONST_INT (QImode, be ? 16 : 14);\n-  RTVEC_ELT (v,  3) = gen_rtx_CONST_INT (QImode, be ?  9 : 16);\n-  RTVEC_ELT (v,  4) = gen_rtx_CONST_INT (QImode, be ? 16 : 13);\n-  RTVEC_ELT (v,  5) = gen_rtx_CONST_INT (QImode, be ? 10 : 16);\n-  RTVEC_ELT (v,  6) = gen_rtx_CONST_INT (QImode, be ? 16 : 12);\n-  RTVEC_ELT (v,  7) = gen_rtx_CONST_INT (QImode, be ? 11 : 16);\n-  RTVEC_ELT (v,  8) = gen_rtx_CONST_INT (QImode, be ? 16 : 11);\n-  RTVEC_ELT (v,  9) = gen_rtx_CONST_INT (QImode, be ? 12 : 16);\n-  RTVEC_ELT (v, 10) = gen_rtx_CONST_INT (QImode, be ? 16 : 10);\n-  RTVEC_ELT (v, 11) = gen_rtx_CONST_INT (QImode, be ? 13 : 16);\n-  RTVEC_ELT (v, 12) = gen_rtx_CONST_INT (QImode, be ? 16 :  9);\n-  RTVEC_ELT (v, 13) = gen_rtx_CONST_INT (QImode, be ? 14 : 16);\n-  RTVEC_ELT (v, 14) = gen_rtx_CONST_INT (QImode, be ? 16 :  8);\n-  RTVEC_ELT (v, 15) = gen_rtx_CONST_INT (QImode, be ? 15 : 16);\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_altivec_vmrgh<VU_char> (res, vzero, op1));\n+  else\n+    emit_insn (gen_altivec_vmrgl<VU_char> (res, op1, vzero));\n \n-  emit_insn (gen_vec_initv16qiqi (mask, gen_rtx_PARALLEL (V16QImode, v)));\n-  emit_insn (gen_vperm_v16qiv8hi (operands[0], operands[1], vzero, mask));\n+  emit_insn (gen_move_insn (operands[0], gen_lowpart (<MODE>mode, res)));\n   DONE;\n })\n \n-(define_expand \"vec_unpacku_lo_v8hi\"\n-  [(set (match_operand:V4SI 0 \"register_operand\" \"=v\")\n-        (unspec:V4SI [(match_operand:V8HI 1 \"register_operand\" \"v\")]\n-                     UNSPEC_VUPKLUH))]\n+(define_expand \"vec_unpacku_lo_<VP_small_lc>\"\n+  [(set (match_operand:VP 0 \"register_operand\" \"=v\")\n+        (unspec:VP [(match_operand:<VP_small> 1 \"register_operand\" \"v\")]\n+         UNSPEC_VUPKLU))]\n   \"TARGET_ALTIVEC\"\n {\n-  rtx vzero = gen_reg_rtx (V4SImode);\n-  rtx mask = gen_reg_rtx (V16QImode);\n-  rtvec v = rtvec_alloc (16);\n-  bool be = BYTES_BIG_ENDIAN;\n+  rtx vzero = gen_reg_rtx (<VP_small>mode);\n+  emit_insn (gen_altivec_vspltis<VU_char> (vzero, const0_rtx));\n \n-  emit_insn (gen_altivec_vspltisw (vzero, const0_rtx));\n- \n-  RTVEC_ELT (v,  0) = gen_rtx_CONST_INT (QImode, be ? 16 : 15);\n-  RTVEC_ELT (v,  1) = gen_rtx_CONST_INT (QImode, be ? 17 : 14);\n-  RTVEC_ELT (v,  2) = gen_rtx_CONST_INT (QImode, be ?  8 : 17);\n-  RTVEC_ELT (v,  3) = gen_rtx_CONST_INT (QImode, be ?  9 : 16);\n-  RTVEC_ELT (v,  4) = gen_rtx_CONST_INT (QImode, be ? 16 : 13);\n-  RTVEC_ELT (v,  5) = gen_rtx_CONST_INT (QImode, be ? 17 : 12);\n-  RTVEC_ELT (v,  6) = gen_rtx_CONST_INT (QImode, be ? 10 : 17);\n-  RTVEC_ELT (v,  7) = gen_rtx_CONST_INT (QImode, be ? 11 : 16);\n-  RTVEC_ELT (v,  8) = gen_rtx_CONST_INT (QImode, be ? 16 : 11);\n-  RTVEC_ELT (v,  9) = gen_rtx_CONST_INT (QImode, be ? 17 : 10);\n-  RTVEC_ELT (v, 10) = gen_rtx_CONST_INT (QImode, be ? 12 : 17);\n-  RTVEC_ELT (v, 11) = gen_rtx_CONST_INT (QImode, be ? 13 : 16);\n-  RTVEC_ELT (v, 12) = gen_rtx_CONST_INT (QImode, be ? 16 :  9);\n-  RTVEC_ELT (v, 13) = gen_rtx_CONST_INT (QImode, be ? 17 :  8);\n-  RTVEC_ELT (v, 14) = gen_rtx_CONST_INT (QImode, be ? 14 : 17);\n-  RTVEC_ELT (v, 15) = gen_rtx_CONST_INT (QImode, be ? 15 : 16);\n+  rtx res = gen_reg_rtx (<VP_small>mode);\n+  rtx op1 = operands[1];\n \n-  emit_insn (gen_vec_initv16qiqi (mask, gen_rtx_PARALLEL (V16QImode, v)));\n-  emit_insn (gen_vperm_v8hiv4si (operands[0], operands[1], vzero, mask));\n+  if (BYTES_BIG_ENDIAN)\n+    emit_insn (gen_altivec_vmrgl<VU_char> (res, vzero, op1));\n+  else\n+    emit_insn (gen_altivec_vmrgh<VU_char> (res, op1, vzero));\n+\n+  emit_insn (gen_move_insn (operands[0], gen_lowpart (<MODE>mode, res)));\n   DONE;\n })\n "}, {"sha": "dceb5b89bd134e16c6836c533f8bf1730fae0fce", "filename": "gcc/testsuite/gcc.target/powerpc/unpack-vectorize-1.c", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-1.c?ref=a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "patch": "@@ -0,0 +1,18 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_altivec_ok } */\n+/* { dg-options \"-maltivec -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fdump-tree-vect-details\" } */\n+\n+/* Test if unpack vectorization succeeds for type signed/unsigned\n+   short and char.  */\n+\n+#include \"unpack-vectorize-1.h\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 4 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\mvupkhsb\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvupklsb\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvupkhsh\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvupklsh\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvmrghb\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvmrglb\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvmrghh\\M} 2 } } */\n+/* { dg-final { scan-assembler-times {\\mvmrglh\\M} 2 } } */"}, {"sha": "1cb89aba392cc4208d81c896945f70ef0ad3401d", "filename": "gcc/testsuite/gcc.target/powerpc/unpack-vectorize-1.h", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-1.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-1.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-1.h?ref=a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "patch": "@@ -0,0 +1,14 @@\n+#include \"unpack-vectorize.h\"\n+\n+DEF_ARR (si)\n+DEF_ARR (ui)\n+DEF_ARR (sh)\n+DEF_ARR (uh)\n+DEF_ARR (sc)\n+DEF_ARR (uc)\n+\n+TEST1 (sh, si)\n+TEST1 (uh, ui)\n+TEST1 (sc, sh)\n+TEST1 (uc, uh)\n+"}, {"sha": "4f2e6ebb07b5c2849471206bd54fc1a06f43d946", "filename": "gcc/testsuite/gcc.target/powerpc/unpack-vectorize-2.c", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-2.c?ref=a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "patch": "@@ -0,0 +1,12 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_vsx_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power7 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fdump-tree-vect-details\" } */\n+\n+/* Test if unsigned int unpack vectorization succeeds.  V2DImode is\n+   supported since Power7 so guard it under Power7 and up.  */\n+\n+#include \"unpack-vectorize-2.h\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\mxxmrghw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mxxmrglw\\M} 1 } } */"}, {"sha": "e199229e6f7a7b390b03c7a19f4d61f619d3fd0f", "filename": "gcc/testsuite/gcc.target/powerpc/unpack-vectorize-2.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-2.h?ref=a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "patch": "@@ -0,0 +1,7 @@\n+#include \"unpack-vectorize.h\"\n+\n+DEF_ARR (ui)\n+DEF_ARR (ull)\n+\n+TEST1 (ui, ull)\n+"}, {"sha": "520a279ac1cb181c4a72eaa9869578b5befeec50", "filename": "gcc/testsuite/gcc.target/powerpc/unpack-vectorize-3.c", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-3.c?ref=a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "patch": "@@ -0,0 +1,11 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target powerpc_p8vector_ok } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O2 -ftree-vectorize -fno-vect-cost-model -fno-unroll-loops -fdump-tree-vect-details\" } */\n+\n+/* Test if signed int unpack vectorization succeeds.  */\n+\n+#include \"unpack-vectorize-3.h\"\n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 1 loops\" 1 \"vect\" } } */\n+/* { dg-final { scan-assembler-times {\\mvupkhsw\\M} 1 } } */\n+/* { dg-final { scan-assembler-times {\\mvupklsw\\M} 1 } } */"}, {"sha": "6a5191d28a715e48f523390a8f1e250df99a3477", "filename": "gcc/testsuite/gcc.target/powerpc/unpack-vectorize-3.h", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-3.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-3.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-3.h?ref=a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "patch": "@@ -0,0 +1,7 @@\n+#include \"unpack-vectorize.h\"\n+\n+DEF_ARR (si)\n+DEF_ARR (sll)\n+\n+TEST1 (si, sll)\n+"}, {"sha": "51f0e67524f495f9bef386112be33d99a0316acb", "filename": "gcc/testsuite/gcc.target/powerpc/unpack-vectorize-run-1.c", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-run-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-run-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-run-1.c?ref=a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "patch": "@@ -0,0 +1,24 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vmx_hw } */\n+/* { dg-options \"-maltivec -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+#include \"unpack-vectorize-1.h\"\n+\n+/* Test if unpack vectorization cases on signed/unsigned short and char\n+   run successfully.  */\n+\n+CHECK1 (sh, si)\n+CHECK1 (uh, ui)\n+CHECK1 (sc, sh)\n+CHECK1 (uc, uh)\n+\n+int\n+main ()\n+{\n+  check1_sh_si ();\n+  check1_uh_ui ();\n+  check1_sc_sh ();\n+  check1_uc_uh ();\n+\n+  return 0;\n+}"}, {"sha": "6d243602bbf64b0775639874dc4c1275ca57aee6", "filename": "gcc/testsuite/gcc.target/powerpc/unpack-vectorize-run-2.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-run-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-run-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-run-2.c?ref=a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target vsx_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power7 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+#include \"unpack-vectorize-2.h\"\n+\n+/* Test if unpack vectorization cases on unsigned int run successfully.  */\n+\n+CHECK1 (ui, ull)\n+\n+int\n+main ()\n+{\n+  check1_ui_ull ();\n+  return 0;\n+}"}, {"sha": "fec33c46abca20ed1f5ff86e3bed9876b674f6bf", "filename": "gcc/testsuite/gcc.target/powerpc/unpack-vectorize-run-3.c", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-run-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-run-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize-run-3.c?ref=a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "patch": "@@ -0,0 +1,16 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target p8vector_hw } */\n+/* { dg-options \"-mdejagnu-cpu=power8 -O2 -ftree-vectorize -fno-vect-cost-model\" } */\n+\n+#include \"unpack-vectorize-3.h\"\n+\n+/* Test if unpack vectorization cases on signed int run successfully.  */\n+\n+CHECK1 (si, sll)\n+\n+int\n+main ()\n+{\n+  check1_si_sll ();\n+  return 0;\n+}"}, {"sha": "11fa7d4aa6f8e03d1d1a5cc29028b4015fb21214", "filename": "gcc/testsuite/gcc.target/powerpc/unpack-vectorize.h", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a20be0cdc068d9ffab7bf0c9d2a8702162746bd8/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fpowerpc%2Funpack-vectorize.h?ref=a20be0cdc068d9ffab7bf0c9d2a8702162746bd8", "patch": "@@ -0,0 +1,42 @@\n+typedef signed long long sll;\n+typedef unsigned long long ull;\n+typedef signed int si;\n+typedef unsigned int ui;\n+typedef signed short sh;\n+typedef unsigned short uh;\n+typedef signed char sc;\n+typedef unsigned char uc;\n+\n+#ifndef ALIGN\n+#define ALIGN 32\n+#endif\n+\n+#define ALIGN_ATTR __attribute__((__aligned__(ALIGN)))\n+\n+#define N 128\n+\n+#define DEF_ARR(TYPE)                                                         \\\n+  TYPE TYPE##_a[N] ALIGN_ATTR;                                                \\\n+  TYPE TYPE##_b[N] ALIGN_ATTR;                                                \\\n+  TYPE TYPE##_c[N] ALIGN_ATTR;\n+\n+#define TEST1(NTYPE, WTYPE)                                                    \\\n+  __attribute__((noipa)) void test1_##NTYPE##_##WTYPE() {                      \\\n+    for (int i = 0; i < N; i++)                                                \\\n+      WTYPE##_c[i] = NTYPE##_a[i] + NTYPE##_b[i];                              \\\n+  }\n+\n+#define CHECK1(NTYPE, WTYPE)                                                   \\\n+  __attribute__((noipa, optimize(0))) void check1_##NTYPE##_##WTYPE() {        \\\n+    for (int i = 0; i < N; i++) {                                              \\\n+      NTYPE##_a[i] = 2 * i * sizeof(NTYPE) + 10;                               \\\n+      NTYPE##_b[i] = 7 * i * sizeof(NTYPE) / 5 - 10;                           \\\n+    }                                                                          \\\n+    test1_##NTYPE##_##WTYPE();                                                 \\\n+    for (int i = 0; i < N; i++) {                                              \\\n+      WTYPE exp = NTYPE##_a[i] + NTYPE##_b[i];                                 \\\n+      if (WTYPE##_c[i] != exp)                                                 \\\n+        __builtin_abort();                                                     \\\n+    }                                                                          \\\n+  }\n+"}]}