{"sha": "987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTg3YTMwODJmMWZjYjg0OTk5MmZmYjdmOTE5NmZjMGExZWE5ZTFiYg==", "commit": {"author": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-06-18T16:55:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2019-06-18T16:55:10Z"}, "message": "i386.md (@cmp<mode>_1): Rename from cmp<mode>_1.\n\n\t* config/i386/i386.md (@cmp<mode>_1): Rename from cmp<mode>_1.\n\t(@add<mode>3_carry): Rename from add<mode>3_carry.\n\t(@sub<mode>3_carry_ccc): Rename from sub<mode>3_carry_ccc.\n\t(@sub<mode>3_carry_ccgz): Rename form sub<mode>3_carry_ccgz.\n\t(@copysign<mode>3_const): Rename from copysign<mode>3_const.\n\t(@copysign<mode>3_var): Rename from copysign<mode>3_var.\n\t(@xorsign<mode>3_1): Rename from xorsign<mode>3_1.\n\t(@x86_shift<mode>_adj_1): Rename from x86_shift<mode>_adj_1.\n\t(@x86_shift<mode>_adj_2): Rename from x86_shift<mode>_adj_2.\n\t(@x86_shift<mode>_adj_3): Rename from x86_shift<mode>_adj_3.\n\t(cmpstrnsi): Use gen_cmp_1.\n\t(lwp_slwpcb): Use gen_lwp_slwpcb_1.\n\t(@lwp_slwpcb<mode>_1): Rename from lwp_slwpcb<mode>_1.\n\t(@umonitor_<mode>): Rename from umonitor_<mode>.\n\t* config/i386/i386-expand.c (ix86_expand_copysign):\n\tUse gen_copysign3_const and gen_copysign3_var.\n\t(ix86_expand_xorsign): Use gen_xorsign3_1.\n\t(ix86_expand_branch): Use gen_sub3_carry_ccc,\n\tgen_sub3_carry_ccgz and gen_cmp1.\n\t(ix86_expand_int_addcc): Use gen_sub3_carry and gen_add3_carry.\n\t(ix86_split_ashl): Use gen_x86_shift_adj_1 and gen_x86_shift_adj_2.\n\t(ix86_split_ashr): Use gen_x86_shift_adj_1 and gen_x86_shift_adj_3.\n\t(ix86_split_lshr): Ditto.\n\t(ix86_expand_builtin) <case IX86_BUILTIN_UMONITOR>: Use gen_umonitor.\n\nFrom-SVN: r272432", "tree": {"sha": "5e7b389049940dc1123fd156544f02b14b0034e5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5e7b389049940dc1123fd156544f02b14b0034e5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb/comments", "author": null, "committer": null, "parents": [{"sha": "d0aa42d276497d762934da72d7ad6d3d4b5551fc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0aa42d276497d762934da72d7ad6d3d4b5551fc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0aa42d276497d762934da72d7ad6d3d4b5551fc"}], "stats": {"total": 253, "additions": 88, "deletions": 165}, "files": [{"sha": "cbf6915c828660f28e3ec8c0e9425cc013674c62", "filename": "gcc/ChangeLog", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb", "patch": "@@ -1,3 +1,30 @@\n+2019-06-18  Uro\u0161 Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (@cmp<mode>_1): Rename from cmp<mode>_1.\n+\t(@add<mode>3_carry): Rename from add<mode>3_carry.\n+\t(@sub<mode>3_carry_ccc): Rename from sub<mode>3_carry_ccc.\n+\t(@sub<mode>3_carry_ccgz): Rename form sub<mode>3_carry_ccgz.\n+\t(@copysign<mode>3_const): Rename from copysign<mode>3_const.\n+\t(@copysign<mode>3_var): Rename from copysign<mode>3_var.\n+\t(@xorsign<mode>3_1): Rename from xorsign<mode>3_1.\n+\t(@x86_shift<mode>_adj_1): Rename from x86_shift<mode>_adj_1.\n+\t(@x86_shift<mode>_adj_2): Rename from x86_shift<mode>_adj_2.\n+\t(@x86_shift<mode>_adj_3): Rename from x86_shift<mode>_adj_3.\n+\t(cmpstrnsi): Use gen_cmp_1.\n+\t(lwp_slwpcb): Use gen_lwp_slwpcb_1.\n+\t(@lwp_slwpcb<mode>_1): Rename from lwp_slwpcb<mode>_1.\n+\t(@umonitor_<mode>): Rename from umonitor_<mode>.\n+\t* config/i386/i386-expand.c (ix86_expand_copysign):\n+\tUse gen_copysign3_const and gen_copysign3_var.\n+\t(ix86_expand_xorsign): Use gen_xorsign3_1.\n+\t(ix86_expand_branch): Use gen_sub3_carry_ccc,\n+\tgen_sub3_carry_ccgz and gen_cmp1.\n+\t(ix86_expand_int_addcc): Use gen_sub3_carry and gen_add3_carry.\n+\t(ix86_split_ashl): Use gen_x86_shift_adj_1 and gen_x86_shift_adj_2.\n+\t(ix86_split_ashr): Use gen_x86_shift_adj_1 and gen_x86_shift_adj_3.\n+\t(ix86_split_lshr): Ditto.\n+\t(ix86_expand_builtin) <case IX86_BUILTIN_UMONITOR>: Use gen_umonitor.\n+\n 2019-06-18  Jason Merrill  <jason@redhat.com>\n \n \t* tree.c (build_constructor): Add MEM_STAT_DECL.\n@@ -55,7 +82,8 @@\n \n \t* config/nvptx/nvptx-protos.h (gen_set_softstack_insn): Remove.\n \t* config/nvptx/nvptx.c (gen_set_softstack_insn): Remove.\n-\t* config/nvptx/nvptx.md (define_insn \"set_softstack_<mode>\"): Rename to ...\n+\t* config/nvptx/nvptx.md (define_insn \"set_softstack_<mode>\"):\n+\tRename to ...\n \t(define_insn \"@set_softstack_<mode>\"): ... this.\n \t(define_insn \"omp_simt_enter_<mode>\"): Rename to ...\n \t(define_insn \"@omp_simt_enter_<mode>\"): ... this."}, {"sha": "4acd7621cf2bdc63ab3d46267d6fe8298e4b26e4", "filename": "gcc/config/i386/i386-expand.c", "status": "modified", "additions": 44, "deletions": 135, "changes": 179, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb/gcc%2Fconfig%2Fi386%2Fi386-expand.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386-expand.c?ref=987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb", "patch": "@@ -1850,7 +1850,7 @@ void\n ix86_expand_copysign (rtx operands[])\n {\n   machine_mode mode, vmode;\n-  rtx dest, op0, op1, mask, nmask;\n+  rtx dest, op0, op1, mask;\n \n   dest = operands[0];\n   op0 = operands[1];\n@@ -1862,13 +1862,15 @@ ix86_expand_copysign (rtx operands[])\n     vmode = V4SFmode;\n   else if (mode == DFmode)\n     vmode = V2DFmode;\n-  else\n+  else if (mode == TFmode)\n     vmode = mode;\n+  else\n+    gcc_unreachable ();\n+\n+  mask = ix86_build_signbit_mask (vmode, 0, 0);\n \n   if (CONST_DOUBLE_P (op0))\n     {\n-      rtx (*copysign_insn)(rtx, rtx, rtx, rtx);\n-\n       if (real_isneg (CONST_DOUBLE_REAL_VALUE (op0)))\n \top0 = simplify_unary_operation (ABS, mode, op0, mode);\n \n@@ -1886,32 +1888,14 @@ ix86_expand_copysign (rtx operands[])\n       else if (op0 != CONST0_RTX (mode))\n \top0 = force_reg (mode, op0);\n \n-      mask = ix86_build_signbit_mask (vmode, 0, 0);\n-\n-      if (mode == SFmode)\n-\tcopysign_insn = gen_copysignsf3_const;\n-      else if (mode == DFmode)\n-\tcopysign_insn = gen_copysigndf3_const;\n-      else\n-\tcopysign_insn = gen_copysigntf3_const;\n-\n-      emit_insn (copysign_insn (dest, op0, op1, mask));\n+      emit_insn (gen_copysign3_const (mode, dest, op0, op1, mask));\n     }\n   else\n     {\n-      rtx (*copysign_insn)(rtx, rtx, rtx, rtx, rtx, rtx);\n-\n-      nmask = ix86_build_signbit_mask (vmode, 0, 1);\n-      mask = ix86_build_signbit_mask (vmode, 0, 0);\n-\n-      if (mode == SFmode)\n-\tcopysign_insn = gen_copysignsf3_var;\n-      else if (mode == DFmode)\n-\tcopysign_insn = gen_copysigndf3_var;\n-      else\n-\tcopysign_insn = gen_copysigntf3_var;\n+      rtx nmask = ix86_build_signbit_mask (vmode, 0, 1);\n \n-      emit_insn (copysign_insn (dest, NULL_RTX, op0, op1, nmask, mask));\n+      emit_insn (gen_copysign3_var\n+\t\t (mode, dest, NULL_RTX, op0, op1, nmask, mask));\n     }\n }\n \n@@ -2020,7 +2004,6 @@ ix86_split_copysign_var (rtx operands[])\n void\n ix86_expand_xorsign (rtx operands[])\n {\n-  rtx (*xorsign_insn)(rtx, rtx, rtx, rtx);\n   machine_mode mode, vmode;\n   rtx dest, op0, op1, mask;\n \n@@ -2031,21 +2014,15 @@ ix86_expand_xorsign (rtx operands[])\n   mode = GET_MODE (dest);\n \n   if (mode == SFmode)\n-    {\n-      xorsign_insn = gen_xorsignsf3_1;\n-      vmode = V4SFmode;\n-    }\n+    vmode = V4SFmode;\n   else if (mode == DFmode)\n-    {\n-      xorsign_insn = gen_xorsigndf3_1;\n-      vmode = V2DFmode;\n-    }\n+    vmode = V2DFmode;\n   else\n     gcc_unreachable ();\n \n   mask = ix86_build_signbit_mask (vmode, 0, 0);\n \n-  emit_insn (xorsign_insn (dest, op0, op1, mask));\n+  emit_insn (gen_xorsign3_1 (mode, dest, op0, op1, mask));\n }\n \n /* Deconstruct an xorsign operation into bit masks.  */\n@@ -2224,22 +2201,9 @@ ix86_expand_branch (enum rtx_code code, rtx op0, rtx op1, rtx label)\n \n \t  case LT: case LTU: case GE: case GEU:\n \t    {\n-\t      rtx (*cmp_insn) (rtx, rtx);\n-\t      rtx (*sbb_insn) (rtx, rtx, rtx);\n \t      bool uns = (code == LTU || code == GEU);\n-\n-\t      if (TARGET_64BIT)\n-\t\t{\n-\t\t  cmp_insn = gen_cmpdi_1;\n-\t\t  sbb_insn\n-\t\t    = uns ? gen_subdi3_carry_ccc : gen_subdi3_carry_ccgz;\n-\t\t}\n-\t      else\n-\t\t{\n-\t\t  cmp_insn = gen_cmpsi_1;\n-\t\t  sbb_insn\n-\t\t    = uns ? gen_subsi3_carry_ccc : gen_subsi3_carry_ccgz;\n-\t\t}\n+\t      rtx (*sbb_insn) (machine_mode, rtx, rtx, rtx)\n+\t\t= uns ? gen_sub3_carry_ccc : gen_sub3_carry_ccgz;\n \n \t      if (!nonimmediate_operand (lo[0], submode))\n \t\tlo[0] = force_reg (submode, lo[0]);\n@@ -2252,11 +2216,12 @@ ix86_expand_branch (enum rtx_code code, rtx op0, rtx op1, rtx label)\n \t\t  || (!uns && !x86_64_general_operand (hi[1], submode)))\n \t\thi[1] = force_reg (submode, hi[1]);\n \n-\t      emit_insn (cmp_insn (lo[0], lo[1]));\n-\t      emit_insn (sbb_insn (gen_rtx_SCRATCH (submode), hi[0], hi[1]));\n+\t      emit_insn (gen_cmp_1 (submode, lo[0], lo[1]));\n \n-\t      tmp = gen_rtx_REG (uns ? CCCmode : CCGZmode, FLAGS_REG);\n+\t      tmp = gen_rtx_SCRATCH (submode);\n+\t      emit_insn (sbb_insn (submode, tmp, hi[0], hi[1]));\n \n+\t      tmp = gen_rtx_REG (uns ? CCCmode : CCGZmode, FLAGS_REG);\n \t      ix86_expand_branch (code, tmp, const0_rtx, label);\n \t      return;\n \t    }\n@@ -2848,7 +2813,7 @@ ix86_expand_int_addcc (rtx operands[])\n {\n   enum rtx_code code = GET_CODE (operands[1]);\n   rtx flags;\n-  rtx (*insn)(rtx, rtx, rtx, rtx, rtx);\n+  rtx (*insn) (machine_mode, rtx, rtx, rtx, rtx, rtx);\n   rtx compare_op;\n   rtx val = const0_rtx;\n   bool fpcmp = false;\n@@ -2886,46 +2851,11 @@ ix86_expand_int_addcc (rtx operands[])\n \n   /* Construct either adc or sbb insn.  */\n   if ((code == LTU) == (operands[3] == constm1_rtx))\n-    {\n-      switch (mode)\n-\t{\n-\t  case E_QImode:\n-\t    insn = gen_subqi3_carry;\n-\t    break;\n-\t  case E_HImode:\n-\t    insn = gen_subhi3_carry;\n-\t    break;\n-\t  case E_SImode:\n-\t    insn = gen_subsi3_carry;\n-\t    break;\n-\t  case E_DImode:\n-\t    insn = gen_subdi3_carry;\n-\t    break;\n-\t  default:\n-\t    gcc_unreachable ();\n-\t}\n-    }\n+    insn = gen_sub3_carry;\n   else\n-    {\n-      switch (mode)\n-\t{\n-\t  case E_QImode:\n-\t    insn = gen_addqi3_carry;\n-\t    break;\n-\t  case E_HImode:\n-\t    insn = gen_addhi3_carry;\n-\t    break;\n-\t  case E_SImode:\n-\t    insn = gen_addsi3_carry;\n-\t    break;\n-\t  case E_DImode:\n-\t    insn = gen_adddi3_carry;\n-\t    break;\n-\t  default:\n-\t    gcc_unreachable ();\n-\t}\n-    }\n-  emit_insn (insn (operands[0], operands[2], val, flags, compare_op));\n+    insn = gen_add3_carry;\n+\n+  emit_insn (insn (mode, operands[0], operands[2], val, flags, compare_op));\n \n   return true;\n }\n@@ -5571,6 +5501,7 @@ ix86_split_ashl (rtx *operands, rtx scratch, machine_mode mode)\n   rtx (*gen_ashl3)(rtx, rtx, rtx);\n   rtx (*gen_shld)(rtx, rtx, rtx);\n   int half_width = GET_MODE_BITSIZE (mode) >> 1;\n+  machine_mode half_mode;\n \n   rtx low[2], high[2];\n   int count;\n@@ -5602,6 +5533,7 @@ ix86_split_ashl (rtx *operands, rtx scratch, machine_mode mode)\n     }\n \n   split_double_mode (mode, operands, 1, low, high);\n+  half_mode = mode == DImode ? SImode : DImode;\n \n   gen_ashl3 = mode == DImode ? gen_ashlsi3 : gen_ashldi3;\n \n@@ -5635,7 +5567,6 @@ ix86_split_ashl (rtx *operands, rtx scratch, machine_mode mode)\n \t pentium4 a bit; no one else seems to care much either way.  */\n       else\n \t{\n-\t  machine_mode half_mode;\n \t  rtx (*gen_lshr3)(rtx, rtx, rtx);\n \t  rtx (*gen_and3)(rtx, rtx, rtx);\n \t  rtx (*gen_xor3)(rtx, rtx, rtx);\n@@ -5644,15 +5575,13 @@ ix86_split_ashl (rtx *operands, rtx scratch, machine_mode mode)\n \n \t  if (mode == DImode)\n \t    {\n-\t      half_mode = SImode;\n \t      gen_lshr3 = gen_lshrsi3;\n \t      gen_and3 = gen_andsi3;\n \t      gen_xor3 = gen_xorsi3;\n \t      bits = 5;\n \t    }\n \t  else\n \t    {\n-\t      half_mode = DImode;\n \t      gen_lshr3 = gen_lshrdi3;\n \t      gen_and3 = gen_anddi3;\n \t      gen_xor3 = gen_xordi3;\n@@ -5701,19 +5630,12 @@ ix86_split_ashl (rtx *operands, rtx scratch, machine_mode mode)\n \n   if (TARGET_CMOVE && scratch)\n     {\n-      rtx (*gen_x86_shift_adj_1)(rtx, rtx, rtx, rtx)\n-\t= mode == DImode ? gen_x86_shiftsi_adj_1 : gen_x86_shiftdi_adj_1;\n-\n       ix86_expand_clear (scratch);\n-      emit_insn (gen_x86_shift_adj_1 (high[0], low[0], operands[2], scratch));\n+      emit_insn (gen_x86_shift_adj_1\n+\t\t (half_mode, high[0], low[0], operands[2], scratch));\n     }\n   else\n-    {\n-      rtx (*gen_x86_shift_adj_2)(rtx, rtx, rtx)\n-\t= mode == DImode ? gen_x86_shiftsi_adj_2 : gen_x86_shiftdi_adj_2;\n-\n-      emit_insn (gen_x86_shift_adj_2 (high[0], low[0], operands[2]));\n-    }\n+    emit_insn (gen_x86_shift_adj_2 (half_mode, high[0], low[0], operands[2]));\n }\n \n void\n@@ -5764,34 +5686,30 @@ ix86_split_ashr (rtx *operands, rtx scratch, machine_mode mode)\n     }\n   else\n     {\n+      machine_mode half_mode;\n+\n       gen_shrd = mode == DImode ? gen_x86_shrd : gen_x86_64_shrd;\n \n      if (!rtx_equal_p (operands[0], operands[1]))\n \temit_move_insn (operands[0], operands[1]);\n \n       split_double_mode (mode, operands, 1, low, high);\n+      half_mode = mode == DImode ? SImode : DImode;\n \n       emit_insn (gen_shrd (low[0], high[0], operands[2]));\n       emit_insn (gen_ashr3 (high[0], high[0], operands[2]));\n \n       if (TARGET_CMOVE && scratch)\n \t{\n-\t  rtx (*gen_x86_shift_adj_1)(rtx, rtx, rtx, rtx)\n-\t    = mode == DImode ? gen_x86_shiftsi_adj_1 : gen_x86_shiftdi_adj_1;\n-\n \t  emit_move_insn (scratch, high[0]);\n \t  emit_insn (gen_ashr3 (scratch, scratch,\n \t\t\t\tGEN_INT (half_width - 1)));\n-\t  emit_insn (gen_x86_shift_adj_1 (low[0], high[0], operands[2],\n-\t\t\t\t\t  scratch));\n+\t  emit_insn (gen_x86_shift_adj_1\n+\t\t     (half_mode, low[0], high[0], operands[2], scratch));\n \t}\n       else\n-\t{\n-\t  rtx (*gen_x86_shift_adj_3)(rtx, rtx, rtx)\n-\t    = mode == DImode ? gen_x86_shiftsi_adj_3 : gen_x86_shiftdi_adj_3;\n-\n-\t  emit_insn (gen_x86_shift_adj_3 (low[0], high[0], operands[2]));\n-\t}\n+\temit_insn (gen_x86_shift_adj_3\n+\t\t   (half_mode, low[0], high[0], operands[2]));\n     }\n }\n \n@@ -5833,32 +5751,28 @@ ix86_split_lshr (rtx *operands, rtx scratch, machine_mode mode)\n     }\n   else\n     {\n+      machine_mode half_mode;\n+\n       gen_shrd = mode == DImode ? gen_x86_shrd : gen_x86_64_shrd;\n \n       if (!rtx_equal_p (operands[0], operands[1]))\n \temit_move_insn (operands[0], operands[1]);\n \n       split_double_mode (mode, operands, 1, low, high);\n+      half_mode = mode == DImode ? SImode : DImode;\n \n       emit_insn (gen_shrd (low[0], high[0], operands[2]));\n       emit_insn (gen_lshr3 (high[0], high[0], operands[2]));\n \n       if (TARGET_CMOVE && scratch)\n \t{\n-\t  rtx (*gen_x86_shift_adj_1)(rtx, rtx, rtx, rtx)\n-\t    = mode == DImode ? gen_x86_shiftsi_adj_1 : gen_x86_shiftdi_adj_1;\n-\n \t  ix86_expand_clear (scratch);\n-\t  emit_insn (gen_x86_shift_adj_1 (low[0], high[0], operands[2],\n-\t\t\t\t\t  scratch));\n+\t  emit_insn (gen_x86_shift_adj_1\n+\t\t     (half_mode, low[0], high[0], operands[2], scratch));\n \t}\n       else\n-\t{\n-\t  rtx (*gen_x86_shift_adj_2)(rtx, rtx, rtx)\n-\t    = mode == DImode ? gen_x86_shiftsi_adj_2 : gen_x86_shiftdi_adj_2;\n-\n-\t  emit_insn (gen_x86_shift_adj_2 (low[0], high[0], operands[2]));\n-\t}\n+\temit_insn (gen_x86_shift_adj_2\n+\t\t   (half_mode, low[0], high[0], operands[2]));\n     }\n }\n \n@@ -11293,12 +11207,7 @@ ix86_expand_builtin (tree exp, rtx target, rtx subtarget,\n       op0 = expand_normal (arg0);\n \n       op0 = ix86_zero_extend_to_Pmode (op0);\n-\n-      insn = (TARGET_64BIT\n-\t      ? gen_umonitor_di (op0)\n-\t      : gen_umonitor_si (op0));\n-\n-      emit_insn (insn);\n+      emit_insn (gen_umonitor (Pmode, op0));\n       return 0;\n \n     case IX86_BUILTIN_UMWAIT:"}, {"sha": "e9b69233648038c7054755f12ebf87ebfa4fbb9a", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 15, "deletions": 29, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=987a3082f1fcb849992ffb7f9196fc0a1ea9e1bb", "patch": "@@ -1268,7 +1268,7 @@\n   DONE;\n })\n \n-(define_expand \"cmp<mode>_1\"\n+(define_expand \"@cmp<mode>_1\"\n   [(set (reg:CC FLAGS_REG)\n \t(compare:CC (match_operand:SWI48 0 \"nonimmediate_operand\")\n \t\t    (match_operand:SWI48 1 \"<general_operand>\")))])\n@@ -6503,7 +6503,7 @@\n \f\n ;; Add with carry and subtract with borrow\n \n-(define_insn \"add<mode>3_carry\"\n+(define_insn \"@add<mode>3_carry\"\n   [(set (match_operand:SWI 0 \"nonimmediate_operand\" \"=<r>m,<r>\")\n \t(plus:SWI\n \t  (plus:SWI\n@@ -6665,7 +6665,7 @@\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_insn \"sub<mode>3_carry_ccc\"\n+(define_insn \"@sub<mode>3_carry_ccc\"\n   [(set (reg:CCC FLAGS_REG)\n \t(compare:CCC\n \t  (zero_extend:<DWI> (match_operand:DWIH 1 \"register_operand\" \"0\"))\n@@ -6699,7 +6699,7 @@\n ;; (compare (match_dup 1) (plus:DWIH (ltu:DWIH ...) (match_dup 2)))\n ;; result, the overflow flag likewise, but the overflow flag is also\n ;; set if the (plus:DWIH (ltu:DWIH ...) (match_dup 2)) overflows.\n-(define_insn \"sub<mode>3_carry_ccgz\"\n+(define_insn \"@sub<mode>3_carry_ccgz\"\n   [(set (reg:CCGZ FLAGS_REG)\n \t(unspec:CCGZ [(match_operand:DWIH 1 \"register_operand\" \"0\")\n \t\t      (match_operand:DWIH 2 \"x86_64_general_operand\" \"rme\")\n@@ -9626,7 +9626,7 @@\n    || (TARGET_SSE && (<MODE>mode == TFmode))\"\n   \"ix86_expand_copysign (operands); DONE;\")\n \n-(define_insn_and_split \"copysign<mode>3_const\"\n+(define_insn_and_split \"@copysign<mode>3_const\"\n   [(set (match_operand:SSEMODEF 0 \"register_operand\" \"=Yv\")\n \t(unspec:SSEMODEF\n \t  [(match_operand:<ssevecmodef> 1 \"nonimm_or_0_operand\" \"YvmC\")\n@@ -9640,7 +9640,7 @@\n   [(const_int 0)]\n   \"ix86_split_copysign_const (operands); DONE;\")\n \n-(define_insn \"copysign<mode>3_var\"\n+(define_insn \"@copysign<mode>3_var\"\n   [(set (match_operand:SSEMODEF 0 \"register_operand\" \"=Yv,Yv,Yv,Yv,Yv\")\n \t(unspec:SSEMODEF\n \t  [(match_operand:SSEMODEF 2 \"register_operand\"\t\"Yv,0,0,Yv,Yv\")\n@@ -9677,7 +9677,7 @@\n   \"SSE_FLOAT_MODE_P (<MODE>mode) && TARGET_SSE_MATH\"\n   \"ix86_expand_xorsign (operands); DONE;\")\n \n-(define_insn_and_split \"xorsign<mode>3_1\"\n+(define_insn_and_split \"@xorsign<mode>3_1\"\n   [(set (match_operand:MODEF 0 \"register_operand\" \"=Yv\")\n \t(unspec:MODEF\n \t  [(match_operand:MODEF 1 \"register_operand\" \"Yv\")\n@@ -9977,7 +9977,7 @@\n    (set_attr \"amdfam10_decode\" \"vector\")\n    (set_attr \"bdver1_decode\" \"vector\")])\n \n-(define_expand \"x86_shift<mode>_adj_1\"\n+(define_expand \"@x86_shift<mode>_adj_1\"\n   [(set (reg:CCZ FLAGS_REG)\n \t(compare:CCZ (and:QI (match_operand:QI 2 \"register_operand\")\n \t\t\t     (match_dup 4))\n@@ -9993,7 +9993,7 @@\n   \"TARGET_CMOVE\"\n   \"operands[4] = GEN_INT (GET_MODE_BITSIZE (<MODE>mode));\")\n \n-(define_expand \"x86_shift<mode>_adj_2\"\n+(define_expand \"@x86_shift<mode>_adj_2\"\n   [(use (match_operand:SWI48 0 \"register_operand\"))\n    (use (match_operand:SWI48 1 \"register_operand\"))\n    (use (match_operand:QI 2 \"register_operand\"))]\n@@ -10773,7 +10773,7 @@\n    (set_attr \"modrm\" \"0,1\")\n    (set_attr \"mode\" \"SI\")])\n \n-(define_expand \"x86_shift<mode>_adj_3\"\n+(define_expand \"@x86_shift<mode>_adj_3\"\n   [(use (match_operand:SWI48 0 \"register_operand\"))\n    (use (match_operand:SWI48 1 \"register_operand\"))\n    (use (match_operand:QI 2 \"register_operand\"))]\n@@ -17059,12 +17059,7 @@\n     }\n   else\n     {\n-      rtx (*gen_cmp) (rtx, rtx);\n-\n-      gen_cmp = (TARGET_64BIT\n-\t\t ? gen_cmpdi_1 : gen_cmpsi_1);\n-\n-      emit_insn (gen_cmp (countreg, countreg));\n+      emit_insn (gen_cmp_1 (Pmode, countreg, countreg));\n       emit_insn (gen_cmpstrnqi_1 (addr1, addr2, countreg, align,\n \t\t\t\t  operands[1], operands[2]));\n     }\n@@ -19819,7 +19814,7 @@\n \t\t    UNSPECV_LLWP_INTRINSIC)]\n   \"TARGET_LWP\")\n \n-(define_insn \"*lwp_llwpcb<mode>1\"\n+(define_insn \"*lwp_llwpcb<mode>_1\"\n   [(unspec_volatile [(match_operand:P 0 \"register_operand\" \"r\")]\n \t\t    UNSPECV_LLWP_INTRINSIC)]\n   \"TARGET_LWP\"\n@@ -19832,18 +19827,9 @@\n   [(set (match_operand 0 \"register_operand\")\n \t(unspec_volatile [(const_int 0)] UNSPECV_SLWP_INTRINSIC))]\n   \"TARGET_LWP\"\n-{\n-  rtx (*insn)(rtx);\n-\n-  insn = (Pmode == DImode\n-\t  ? gen_lwp_slwpcbdi\n-\t  : gen_lwp_slwpcbsi);\n-\n-  emit_insn (insn (operands[0]));\n-  DONE;\n-})\n+  \"emit_insn (gen_lwp_slwpcb_1 (Pmode, operands[0])); DONE;\")\n \n-(define_insn \"lwp_slwpcb<mode>\"\n+(define_insn \"@lwp_slwpcb<mode>_1\"\n   [(set (match_operand:P 0 \"register_operand\" \"=r\")\n \t(unspec_volatile:P [(const_int 0)] UNSPECV_SLWP_INTRINSIC))]\n   \"TARGET_LWP\"\n@@ -20305,7 +20291,7 @@\n   \"umwait\\t%0\"\n   [(set_attr \"length\" \"3\")])\n \n-(define_insn \"umonitor_<mode>\"\n+(define_insn \"@umonitor_<mode>\"\n   [(unspec_volatile [(match_operand:P 0 \"register_operand\" \"r\")]\n \t\t    UNSPECV_UMONITOR)]\n   \"TARGET_WAITPKG\""}]}