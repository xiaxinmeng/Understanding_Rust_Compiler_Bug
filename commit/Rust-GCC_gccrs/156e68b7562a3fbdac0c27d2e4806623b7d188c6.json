{"sha": "156e68b7562a3fbdac0c27d2e4806623b7d188c6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTU2ZTY4Yjc1NjJhM2ZiZGFjMGMyN2QyZTQ4MDY2MjNiN2QxODhjNg==", "commit": {"author": {"name": "Jeffrey A Law", "email": "law@cygnus.com", "date": "1999-08-03T20:17:38Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1999-08-03T20:17:38Z"}, "message": "pa.h (HARD_REGNO_NREGS): FP registers are always 4 bytes wide for PA1.1 and above.\n\n\n        * pa.h (HARD_REGNO_NREGS): FP registers are always 4 bytes wide for\n        PA1.1 and above.\n        (CLASS_MAX_NREGS): Likewise.\n\nFrom-SVN: r28478", "tree": {"sha": "b76183ce1a85523407350f3abf2afbfcc7e173f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b76183ce1a85523407350f3abf2afbfcc7e173f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/156e68b7562a3fbdac0c27d2e4806623b7d188c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/156e68b7562a3fbdac0c27d2e4806623b7d188c6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/156e68b7562a3fbdac0c27d2e4806623b7d188c6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/156e68b7562a3fbdac0c27d2e4806623b7d188c6/comments", "author": null, "committer": null, "parents": [{"sha": "351b736c5438361650b73a5dbe79a5aa43e943b4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/351b736c5438361650b73a5dbe79a5aa43e943b4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/351b736c5438361650b73a5dbe79a5aa43e943b4"}], "stats": {"total": 15, "additions": 12, "deletions": 3}, "files": [{"sha": "b51cc4155edd4f38f4695aca6250924b50b414ab", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/156e68b7562a3fbdac0c27d2e4806623b7d188c6/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/156e68b7562a3fbdac0c27d2e4806623b7d188c6/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=156e68b7562a3fbdac0c27d2e4806623b7d188c6", "patch": "@@ -1,3 +1,9 @@\n+Tue Aug  3 14:14:52 1999  Jeffrey A Law  (law@cygnus.com)\n+\n+\t* pa.h (HARD_REGNO_NREGS): FP registers are always 4 bytes wide for\n+\tPA1.1 and above.\n+\t(CLASS_MAX_NREGS): Likewise.\n+\n Tue Aug  3 03:51:20 1999  Jeffrey A Law  (law@cygnus.com)\n \n \t* cse.c (cse_insn): Fix dumb thinko in last change."}, {"sha": "5bb196cf9fea2084a3324b1a7ee254e571041434", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/156e68b7562a3fbdac0c27d2e4806623b7d188c6/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/156e68b7562a3fbdac0c27d2e4806623b7d188c6/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=156e68b7562a3fbdac0c27d2e4806623b7d188c6", "patch": "@@ -563,7 +563,8 @@ int lhs_lshift_cint_operand ();\n    The floating point registers are 64 bits wide. Snake fp regs are 32\n    bits wide */\n #define HARD_REGNO_NREGS(REGNO, MODE)\t\t\t\t\t\\\n-  (!TARGET_PA_11 && FP_REGNO_P (REGNO) ? 1\t\t\t\t\\\n+  (FP_REGNO_P (REGNO)\t\t\t\t\t\t\t\\\n+   ? (!TARGET_PA_11 ? 1 : (GET_MODE_SIZE (MODE) + 4 - 1) / 4)\t\t\\\n    : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n \n /* Value is 1 if hard register REGNO can hold a value of machine-mode MODE.\n@@ -783,8 +784,10 @@ int zdepi_cint_p ();\n /* Return the maximum number of consecutive registers\n    needed to represent mode MODE in a register of class CLASS.  */\n #define CLASS_MAX_NREGS(CLASS, MODE)\t\t\t\t\t\\\n-  (!TARGET_PA_11 && ((CLASS) == FP_REGS || (CLASS) == FPUPPER_REGS) ? 1 :\t\t\t\t\\\n-   ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n+  ((CLASS) == FP_REGS || (CLASS) == FPUPPER_REGS\t\t\t\\\n+   ? (!TARGET_PA_11 ? 1 : (GET_MODE_SIZE (MODE) + 4 - 1) / 4)\t\t\\\n+   : ((GET_MODE_SIZE (MODE) + UNITS_PER_WORD - 1) / UNITS_PER_WORD))\n+\n \f\n /* Stack layout; function entry, exit and calling.  */\n "}]}