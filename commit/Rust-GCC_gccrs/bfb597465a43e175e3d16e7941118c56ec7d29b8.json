{"sha": "bfb597465a43e175e3d16e7941118c56ec7d29b8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmZiNTk3NDY1YTQzZTE3NWUzZDE2ZTc5NDExMThjNTZlYzdkMjliOA==", "commit": {"author": {"name": "Uros Bizjak", "email": "ubizjak@gmail.com", "date": "2009-10-11T21:49:10Z"}, "committer": {"name": "Uros Bizjak", "email": "uros@gcc.gnu.org", "date": "2009-10-11T21:49:10Z"}, "message": "i386.md (SWIM): New mode iterator.\n\n\t* config/i386/i386.md (SWIM): New mode iterator.\n\t(mov<mode>cc): Macroize expander from mov{qi,hi,si,di}cc patterns\n\tusing SWIM mode iterator.\n\t(x86_mov<mode>cc_0_m1): Macroize insn from x86_mov{si,di}cc_0_m1\n\tpatterns using SWI48 mode iterator.\n\t(*x86_mov<mode>cc_0_m1_se):  Macroize insn from\n\t*x86_mov{si,di}cc_0_m1_se patterns using SWI48 mode iterator.\n\t(*x86_mov<mode>cc_0_m1_neg): New insn pattern.\n\t(*mov<mode>cc_noc): Macroize insn from *mov{hi,si,di}cc_noc\n\tpatterns using SWI248 mode iterator.\n\t* config/i386/i386.c (ix86_expand_int_movcc): Update the call to\n\tgen_x86_movdicc_0_m1_rex64 for renamed function\n\nFrom-SVN: r152650", "tree": {"sha": "32d857effcb28498cdb116f1b9b785cedeba5551", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/32d857effcb28498cdb116f1b9b785cedeba5551"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bfb597465a43e175e3d16e7941118c56ec7d29b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb597465a43e175e3d16e7941118c56ec7d29b8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bfb597465a43e175e3d16e7941118c56ec7d29b8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bfb597465a43e175e3d16e7941118c56ec7d29b8/comments", "author": {"login": "ubizjak", "id": 55479990, "node_id": "MDQ6VXNlcjU1NDc5OTkw", "avatar_url": "https://avatars.githubusercontent.com/u/55479990?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubizjak", "html_url": "https://github.com/ubizjak", "followers_url": "https://api.github.com/users/ubizjak/followers", "following_url": "https://api.github.com/users/ubizjak/following{/other_user}", "gists_url": "https://api.github.com/users/ubizjak/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubizjak/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubizjak/subscriptions", "organizations_url": "https://api.github.com/users/ubizjak/orgs", "repos_url": "https://api.github.com/users/ubizjak/repos", "events_url": "https://api.github.com/users/ubizjak/events{/privacy}", "received_events_url": "https://api.github.com/users/ubizjak/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "cb7d60a67762a3e07c7e934feb0e923f8e6a92a7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cb7d60a67762a3e07c7e934feb0e923f8e6a92a7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cb7d60a67762a3e07c7e934feb0e923f8e6a92a7"}], "stats": {"total": 177, "additions": 62, "deletions": 115}, "files": [{"sha": "c7f874938c0e3239c616e78613a135fd440e4020", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb597465a43e175e3d16e7941118c56ec7d29b8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb597465a43e175e3d16e7941118c56ec7d29b8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bfb597465a43e175e3d16e7941118c56ec7d29b8", "patch": "@@ -1,3 +1,18 @@\n+2009-10-12  Uros Bizjak  <ubizjak@gmail.com>\n+\n+\t* config/i386/i386.md (SWIM): New mode iterator.\n+\t(mov<mode>cc): Macroize expander from mov{qi,hi,si,di}cc patterns\n+\tusing SWIM mode iterator.\n+\t(x86_mov<mode>cc_0_m1): Macroize insn from x86_mov{si,di}cc_0_m1\n+\tpatterns using SWI48 mode iterator.\n+\t(*x86_mov<mode>cc_0_m1_se):  Macroize insn from\n+\t*x86_mov{si,di}cc_0_m1_se patterns using SWI48 mode iterator.\n+\t(*x86_mov<mode>cc_0_m1_neg): New insn pattern.\n+\t(*mov<mode>cc_noc): Macroize insn from *mov{hi,si,di}cc_noc\n+\tpatterns using SWI248 mode iterator.\n+\t* config/i386/i386.c (ix86_expand_int_movcc): Update the call to\n+\tgen_x86_movdicc_0_m1_rex64 for renamed function\n+\n 2009-10-11  Jose Ruiz  <ruiz@adacore.com>\n             Eric Botcazou  <ebotcazou@adacore.com>\n \n@@ -569,7 +584,7 @@\n \tpatterns using plusminus code iterator.\n \t(<plusminus_insn><mode>3): Macroize expander from add<mode>3 and\n \tsub<mode>3 patterns using plusminus code iterator.\n-\t* config/i386/i386.c (override_options): Update call to\n+\t* config/i386/i386.c (override_options): Update the call to\n \tgen_subdi_carry_rex64 for renamed function.\n \t(ix86_expand_int_addcc): Update calls to gen_subdi3_carry_rex64\n \tand gen_adddi3_carry_rex64 for renamed functions.  Use indirect"}, {"sha": "b5bb6a0352f753eaf3ff7aa8b52ec3baef9ea67f", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb597465a43e175e3d16e7941118c56ec7d29b8/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb597465a43e175e3d16e7941118c56ec7d29b8/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=bfb597465a43e175e3d16e7941118c56ec7d29b8", "patch": "@@ -15247,9 +15247,10 @@ ix86_expand_int_movcc (rtx operands[])\n \t\ttmp = gen_reg_rtx (mode);\n \n \t      if (mode == DImode)\n-\t\temit_insn (gen_x86_movdicc_0_m1_rex64 (tmp, compare_op));\n+\t\temit_insn (gen_x86_movdicc_0_m1 (tmp, compare_op));\n \t      else\n-\t\temit_insn (gen_x86_movsicc_0_m1 (gen_lowpart (SImode, tmp), compare_op));\n+\t\temit_insn (gen_x86_movsicc_0_m1 (gen_lowpart (SImode, tmp),\n+\t\t\t\t\t\t compare_op));\n \t    }\n \t  else\n \t    {"}, {"sha": "63de5b9ff3a5c656533b613eb1598c967e811212", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 43, "deletions": 112, "changes": 155, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bfb597465a43e175e3d16e7941118c56ec7d29b8/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bfb597465a43e175e3d16e7941118c56ec7d29b8/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=bfb597465a43e175e3d16e7941118c56ec7d29b8", "patch": "@@ -731,6 +731,11 @@\n \t\t\t     (HI \"TARGET_HIMODE_MATH\")\n \t\t\t     SI DI (TI \"TARGET_64BIT\")])\n \n+;; Math-dependant single word integer modes.\n+(define_mode_iterator SWIM [(QI \"TARGET_QIMODE_MATH\")\n+\t\t\t    (HI \"TARGET_HIMODE_MATH\")\n+\t\t\t    SI (DI \"TARGET_64BIT\")])\n+\n ;; Math-dependant single word integer modes without QImode.\n (define_mode_iterator SWIM248 [(HI \"TARGET_HIMODE_MATH\")\n \t\t      \t       SI (DI \"TARGET_64BIT\")])\n@@ -19468,157 +19473,83 @@\n \f\n ;; Conditional move instructions.\n \n-(define_expand \"movdicc\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"\")\n-\t(if_then_else:DI (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:DI 2 \"general_operand\" \"\")\n-\t\t\t (match_operand:DI 3 \"general_operand\" \"\")))]\n-  \"TARGET_64BIT\"\n+(define_expand \"mov<mode>cc\"\n+  [(set (match_operand:SWIM 0 \"register_operand\" \"\")\n+\t(if_then_else:SWIM (match_operand 1 \"comparison_operator\" \"\")\n+\t\t\t   (match_operand:SWIM 2 \"general_operand\" \"\")\n+\t\t\t   (match_operand:SWIM 3 \"general_operand\" \"\")))]\n+  \"\"\n   \"if (ix86_expand_int_movcc (operands)) DONE; else FAIL;\")\n \n-(define_insn \"x86_movdicc_0_m1_rex64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(if_then_else:DI (match_operand 1 \"ix86_carry_flag_operator\" \"\")\n+;; Data flow gets confused by our desire for `sbbl reg,reg', and clearing\n+;; the register first winds up with `sbbl $0,reg', which is also weird.\n+;; So just document what we're doing explicitly.\n+\n+(define_insn \"x86_mov<mode>cc_0_m1\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(if_then_else:SWI48 (match_operand 1 \"ix86_carry_flag_operator\" \"\")\n \t  (const_int -1)\n \t  (const_int 0)))\n    (clobber (reg:CC FLAGS_REG))]\n-  \"TARGET_64BIT\"\n-  \"sbb{q}\\t%0, %0\"\n+  \"\"\n+  \"sbb{<imodesuffix>}\\t%0, %0\"\n   ; Since we don't have the proper number of operands for an alu insn,\n   ; fill in all the blanks.\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"memory\" \"none\")\n    (set_attr \"imm_disp\" \"false\")\n-   (set_attr \"mode\" \"DI\")\n-   (set_attr \"length_immediate\" \"0\")])\n-\n-(define_insn \"*x86_movdicc_0_m1_se\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r\")\n-\t(sign_extract:DI (match_operand 1 \"ix86_carry_flag_operator\" \"\")\n-\t\t\t (const_int 1)\n-\t\t\t (const_int 0)))\n-   (clobber (reg:CC FLAGS_REG))]\n-  \"\"\n-  \"sbb{q}\\t%0, %0\"\n-  [(set_attr \"type\" \"alu\")\n-   (set_attr \"use_carry\" \"1\")\n-   (set_attr \"pent_pair\" \"pu\")\n-   (set_attr \"memory\" \"none\")\n-   (set_attr \"imm_disp\" \"false\")\n-   (set_attr \"mode\" \"DI\")\n+   (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"length_immediate\" \"0\")])\n \n-(define_insn \"*movdicc_c_rex64\"\n-  [(set (match_operand:DI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:DI (match_operator 1 \"ix86_comparison_operator\"\n-\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n-\t\t      (match_operand:DI 2 \"nonimmediate_operand\" \"rm,0\")\n-\t\t      (match_operand:DI 3 \"nonimmediate_operand\" \"0,rm\")))]\n-  \"TARGET_64BIT && TARGET_CMOVE\n-   && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n-  \"@\n-   cmov%O2%C1\\t{%2, %0|%0, %2}\n-   cmov%O2%c1\\t{%3, %0|%0, %3}\"\n-  [(set_attr \"type\" \"icmov\")\n-   (set_attr \"mode\" \"DI\")])\n-\n-(define_expand \"movsicc\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"\")\n-\t(if_then_else:SI (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:SI 2 \"general_operand\" \"\")\n-\t\t\t (match_operand:SI 3 \"general_operand\" \"\")))]\n-  \"\"\n-  \"if (ix86_expand_int_movcc (operands)) DONE; else FAIL;\")\n-\n-;; Data flow gets confused by our desire for `sbbl reg,reg', and clearing\n-;; the register first winds up with `sbbl $0,reg', which is also weird.\n-;; So just document what we're doing explicitly.\n-\n-(define_insn \"x86_movsicc_0_m1\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(if_then_else:SI (match_operand 1 \"ix86_carry_flag_operator\" \"\")\n-\t  (const_int -1)\n-\t  (const_int 0)))\n+(define_insn \"*x86_mov<mode>cc_0_m1_se\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(sign_extract:SWI48 (match_operand 1 \"ix86_carry_flag_operator\" \"\")\n+\t\t\t    (const_int 1)\n+\t\t\t    (const_int 0)))\n    (clobber (reg:CC FLAGS_REG))]\n   \"\"\n-  \"sbb{l}\\t%0, %0\"\n-  ; Since we don't have the proper number of operands for an alu insn,\n-  ; fill in all the blanks.\n+  \"sbb{<imodesuffix>}\\t%0, %0\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"memory\" \"none\")\n    (set_attr \"imm_disp\" \"false\")\n-   (set_attr \"mode\" \"SI\")\n+   (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"length_immediate\" \"0\")])\n \n-(define_insn \"*x86_movsicc_0_m1_se\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r\")\n-\t(sign_extract:SI (match_operand 1 \"ix86_carry_flag_operator\" \"\")\n-\t\t\t (const_int 1)\n-\t\t\t (const_int 0)))\n-   (clobber (reg:CC FLAGS_REG))]\n+(define_insn \"*x86_mov<mode>cc_0_m1_neg\"\n+  [(set (match_operand:SWI48 0 \"register_operand\" \"=r\")\n+\t(neg:SWI48 (match_operand 1 \"ix86_carry_flag_operator\" \"\")))]\n   \"\"\n-  \"sbb{l}\\t%0, %0\"\n+  \"sbb{<imodesuffix>}\\t%0, %0\"\n   [(set_attr \"type\" \"alu\")\n    (set_attr \"use_carry\" \"1\")\n    (set_attr \"pent_pair\" \"pu\")\n    (set_attr \"memory\" \"none\")\n    (set_attr \"imm_disp\" \"false\")\n-   (set_attr \"mode\" \"SI\")\n+   (set_attr \"mode\" \"<MODE>\")\n    (set_attr \"length_immediate\" \"0\")])\n \n-(define_insn \"*movsicc_noc\"\n-  [(set (match_operand:SI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:SI (match_operator 1 \"ix86_comparison_operator\"\n-\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n-\t\t      (match_operand:SI 2 \"nonimmediate_operand\" \"rm,0\")\n-\t\t      (match_operand:SI 3 \"nonimmediate_operand\" \"0,rm\")))]\n-  \"TARGET_CMOVE\n-   && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n-  \"@\n-   cmov%O2%C1\\t{%2, %0|%0, %2}\n-   cmov%O2%c1\\t{%3, %0|%0, %3}\"\n-  [(set_attr \"type\" \"icmov\")\n-   (set_attr \"mode\" \"SI\")])\n-\n-(define_expand \"movhicc\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"\")\n-\t(if_then_else:HI (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:HI 2 \"general_operand\" \"\")\n-\t\t\t (match_operand:HI 3 \"general_operand\" \"\")))]\n-  \"TARGET_HIMODE_MATH\"\n-  \"if (ix86_expand_int_movcc (operands)) DONE; else FAIL;\")\n-\n-(define_insn \"*movhicc_noc\"\n-  [(set (match_operand:HI 0 \"register_operand\" \"=r,r\")\n-\t(if_then_else:HI (match_operator 1 \"ix86_comparison_operator\"\n-\t\t\t\t[(reg FLAGS_REG) (const_int 0)])\n-\t\t      (match_operand:HI 2 \"nonimmediate_operand\" \"rm,0\")\n-\t\t      (match_operand:HI 3 \"nonimmediate_operand\" \"0,rm\")))]\n-  \"TARGET_CMOVE\n-   && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n+(define_insn \"*mov<mode>cc_noc\"\n+  [(set (match_operand:SWI248 0 \"register_operand\" \"=r,r\")\n+\t(if_then_else:SWI248 (match_operator 1 \"ix86_comparison_operator\"\n+\t\t\t       [(reg FLAGS_REG) (const_int 0)])\n+\t  (match_operand:SWI248 2 \"nonimmediate_operand\" \"rm,0\")\n+\t  (match_operand:SWI248 3 \"nonimmediate_operand\" \"0,rm\")))]\n+  \"TARGET_CMOVE && !(MEM_P (operands[2]) && MEM_P (operands[3]))\"\n   \"@\n    cmov%O2%C1\\t{%2, %0|%0, %2}\n    cmov%O2%c1\\t{%3, %0|%0, %3}\"\n   [(set_attr \"type\" \"icmov\")\n-   (set_attr \"mode\" \"HI\")])\n-\n-(define_expand \"movqicc\"\n-  [(set (match_operand:QI 0 \"register_operand\" \"\")\n-\t(if_then_else:QI (match_operand 1 \"comparison_operator\" \"\")\n-\t\t\t (match_operand:QI 2 \"general_operand\" \"\")\n-\t\t\t (match_operand:QI 3 \"general_operand\" \"\")))]\n-  \"TARGET_QIMODE_MATH\"\n-  \"if (ix86_expand_int_movcc (operands)) DONE; else FAIL;\")\n+   (set_attr \"mode\" \"<MODE>\")])\n \n (define_insn_and_split \"*movqicc_noc\"\n   [(set (match_operand:QI 0 \"register_operand\" \"=r,r\")\n \t(if_then_else:QI (match_operator 1 \"ix86_comparison_operator\"\n-\t\t\t\t[(match_operand 4 \"flags_reg_operand\" \"\")\n-\t\t\t\t (const_int 0)])\n+\t\t\t   [(match_operand 4 \"flags_reg_operand\" \"\")\n+\t\t\t    (const_int 0)])\n \t\t      (match_operand:QI 2 \"register_operand\" \"r,0\")\n \t\t      (match_operand:QI 3 \"register_operand\" \"0,r\")))]\n   \"TARGET_CMOVE && !TARGET_PARTIAL_REG_STALL\""}]}