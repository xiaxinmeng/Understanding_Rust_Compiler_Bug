{"sha": "1f80c9ef1695ef6b3c26deeb059c5995f6ff56fd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MWY4MGM5ZWYxNjk1ZWY2YjNjMjZkZWViMDU5YzU5OTVmNmZmNTZmZA==", "commit": {"author": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2003-01-28T19:40:46Z"}, "committer": {"name": "Mike Stump", "email": "mrs@gcc.gnu.org", "date": "2003-01-28T19:40:46Z"}, "message": "regclass.c (init_reg_autoinc): New function.\n\n        * regclass.c (init_reg_autoinc): New function.\n        (regclass): Move initialization of forbidden_inc_dec_class from\n        here...\n        (init_regs): to here.  Avoids reinitialization for each function,\n        saving compilation time.\n\nFrom-SVN: r62006", "tree": {"sha": "a9e751c12051c1b66adda96fd5b4f24f86db3ebc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a9e751c12051c1b66adda96fd5b4f24f86db3ebc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/1f80c9ef1695ef6b3c26deeb059c5995f6ff56fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f80c9ef1695ef6b3c26deeb059c5995f6ff56fd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1f80c9ef1695ef6b3c26deeb059c5995f6ff56fd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1f80c9ef1695ef6b3c26deeb059c5995f6ff56fd/comments", "author": null, "committer": null, "parents": [{"sha": "9fbd3e416654b42041026f9d51d1115a42dd5d34", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fbd3e416654b42041026f9d51d1115a42dd5d34", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fbd3e416654b42041026f9d51d1115a42dd5d34"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "59d2479786463d7b0d858ea59f83386c2b348fa2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f80c9ef1695ef6b3c26deeb059c5995f6ff56fd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f80c9ef1695ef6b3c26deeb059c5995f6ff56fd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=1f80c9ef1695ef6b3c26deeb059c5995f6ff56fd", "patch": "@@ -1,3 +1,11 @@\n+ 2003-01-23  Mike Stump  <mrs@apple.com>\n+\n+\t* regclass.c (init_reg_autoinc): New function.\n+\t(regclass): Move initialization of forbidden_inc_dec_class from\n+ \there...\n+\t(init_regs): to here.  Avoids reinitialization for each function,\n+ \tsaving compilation time.\n+\n 2003-01-28  Jason Merrill  <jason@redhat.com>\n \n \t* cpplib.h (struct cpp_options): Add warn_deprecated field."}, {"sha": "ea6c86b6c578e7366f67823fd6b1c90abf45abd4", "filename": "gcc/regclass.c", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/1f80c9ef1695ef6b3c26deeb059c5995f6ff56fd/gcc%2Fregclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/1f80c9ef1695ef6b3c26deeb059c5995f6ff56fd/gcc%2Fregclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fregclass.c?ref=1f80c9ef1695ef6b3c26deeb059c5995f6ff56fd", "patch": "@@ -50,6 +50,7 @@ Software Foundation, 59 Temple Place - Suite 330, Boston, MA\n \n static void init_reg_sets_1\tPARAMS ((void));\n static void init_reg_modes\tPARAMS ((void));\n+static void init_reg_autoinc\tPARAMS ((void));\n \n /* If we have auto-increment or auto-decrement and we can have secondary\n    reloads, we are not allowed to use classes requiring secondary\n@@ -578,6 +579,8 @@ init_regs ()\n   init_reg_sets_1 ();\n \n   init_reg_modes ();\n+\n+  init_reg_autoinc ();\n }\n \n /* Initialize some fake stack-frame MEM references for use in\n@@ -1143,37 +1146,18 @@ scan_one_insn (insn, pass)\n   return insn;\n }\n \n-/* This is a pass of the compiler that scans all instructions\n-   and calculates the preferred class for each pseudo-register.\n-   This information can be accessed later by calling `reg_preferred_class'.\n-   This pass comes just before local register allocation.  */\n+/* Initialize information about which register classes can be used for\n+   pseudos that are auto-incremented or auto-decremented.  */\n \n-void\n-regclass (f, nregs, dump)\n-     rtx f;\n-     int nregs;\n-     FILE *dump;\n+static void\n+init_reg_autoinc ()\n {\n-  rtx insn;\n-  int i;\n-  int pass;\n-\n-  init_recog ();\n-\n-  costs = (struct costs *) xmalloc (nregs * sizeof (struct costs));\n-\n #ifdef FORBIDDEN_INC_DEC_CLASSES\n-\n-  in_inc_dec = (char *) xmalloc (nregs);\n-\n-  /* Initialize information about which register classes can be used for\n-     pseudos that are auto-incremented or auto-decremented.  It would\n-     seem better to put this in init_reg_sets, but we need to be able\n-     to allocate rtx, which we can't do that early.  */\n+  int i;\n \n   for (i = 0; i < N_REG_CLASSES; i++)\n     {\n-      rtx r = gen_rtx_REG (VOIDmode, 0);\n+      rtx r = gen_rtx_raw_REG (VOIDmode, 0);\n       enum machine_mode m;\n       int j;\n \n@@ -1213,6 +1197,32 @@ regclass (f, nregs, dump)\n \t\t}\n \t  }\n     }\n+#endif /* FORBIDDEN_INC_DEC_CLASSES */\n+}\n+\n+/* This is a pass of the compiler that scans all instructions\n+   and calculates the preferred class for each pseudo-register.\n+   This information can be accessed later by calling `reg_preferred_class'.\n+   This pass comes just before local register allocation.  */\n+\n+void\n+regclass (f, nregs, dump)\n+     rtx f;\n+     int nregs;\n+     FILE *dump;\n+{\n+  rtx insn;\n+  int i;\n+  int pass;\n+\n+  init_recog ();\n+\n+  costs = (struct costs *) xmalloc (nregs * sizeof (struct costs));\n+\n+#ifdef FORBIDDEN_INC_DEC_CLASSES\n+\n+  in_inc_dec = (char *) xmalloc (nregs);\n+\n #endif /* FORBIDDEN_INC_DEC_CLASSES */\n \n   /* Normally we scan the insns once and determine the best class to use for"}]}