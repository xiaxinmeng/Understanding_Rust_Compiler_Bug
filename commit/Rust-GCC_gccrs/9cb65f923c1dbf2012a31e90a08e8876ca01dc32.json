{"sha": "9cb65f923c1dbf2012a31e90a08e8876ca01dc32", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OWNiNjVmOTIzYzFkYmYyMDEyYTMxZTkwYTA4ZTg4NzZjYTAxZGMzMg==", "commit": {"author": {"name": "Kaveh R. Ghazi", "email": "ghazi@caip.rutgers.edu", "date": "2003-04-13T23:46:11Z"}, "committer": {"name": "Kaveh Ghazi", "email": "ghazi@gcc.gnu.org", "date": "2003-04-13T23:46:11Z"}, "message": "builtins.c (expand_builtin_memcpy): Add `endp' argument, use it.\n\ngcc:\n\t* builtins.c (expand_builtin_memcpy): Add `endp' argument, use it.\n\t(expand_builtin_stpcpy): New.\n\t(expand_builtin): Add BUILT_IN_MEMPCPY & BUILT_IN_STPCPY.\n\t* builtins.def: Add mempcpy & stpcpy support.\n\t* doc/extend.texi (mempcpy, stpcpy): Document new builtins.\n\ntestsuite:\n\t* gcc.c-torture/execute/string-opt-18.c: New test.\n\nFrom-SVN: r65551", "tree": {"sha": "6fe1e0659b55250f63aa29ca0be6aeef5e0dfe2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6fe1e0659b55250f63aa29ca0be6aeef5e0dfe2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9cb65f923c1dbf2012a31e90a08e8876ca01dc32", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb65f923c1dbf2012a31e90a08e8876ca01dc32", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9cb65f923c1dbf2012a31e90a08e8876ca01dc32", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9cb65f923c1dbf2012a31e90a08e8876ca01dc32/comments", "author": null, "committer": null, "parents": [{"sha": "f4f4610e036e239fb770127439d276439a621e3f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f4f4610e036e239fb770127439d276439a621e3f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f4f4610e036e239fb770127439d276439a621e3f"}], "stats": {"total": 195, "additions": 184, "deletions": 11}, "files": [{"sha": "25c09aa5530828b6cd33fee19bac04e63dce4677", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb65f923c1dbf2012a31e90a08e8876ca01dc32/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb65f923c1dbf2012a31e90a08e8876ca01dc32/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=9cb65f923c1dbf2012a31e90a08e8876ca01dc32", "patch": "@@ -1,3 +1,11 @@\n+2003-04-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* builtins.c (expand_builtin_memcpy): Add `endp' argument, use it.\n+\t(expand_builtin_stpcpy): New.\n+\t(expand_builtin): Add BUILT_IN_MEMPCPY & BUILT_IN_STPCPY.\n+\t* builtins.def: Add mempcpy & stpcpy support.\n+\t* doc/extend.texi (mempcpy, stpcpy): Document new builtins.\n+\n 2003-04-13  Nick Clifton  <nickc@redhat.com>\n \n \t* config/rs6000/rs6000.c: Replace occurrences of \"GNU CC\" with"}, {"sha": "51e89766ef73619b083dd09db6c27e98d2b2c19b", "filename": "gcc/builtins.c", "status": "modified", "additions": 69, "deletions": 9, "changes": 78, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb65f923c1dbf2012a31e90a08e8876ca01dc32/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb65f923c1dbf2012a31e90a08e8876ca01dc32/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=9cb65f923c1dbf2012a31e90a08e8876ca01dc32", "patch": "@@ -125,9 +125,11 @@ static rtx expand_builtin_strspn\tPARAMS ((tree, rtx,\n static rtx expand_builtin_strcspn\tPARAMS ((tree, rtx,\n \t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_memcpy\tPARAMS ((tree, rtx,\n-\t\t\t\t\t\t enum machine_mode));\n+\t\t\t\t\t\t enum machine_mode, int));\n static rtx expand_builtin_strcpy\tPARAMS ((tree, rtx,\n \t\t\t\t\t\t enum machine_mode));\n+static rtx expand_builtin_stpcpy\tPARAMS ((tree, rtx,\n+\t\t\t\t\t\t enum machine_mode));\n static rtx builtin_strncpy_read_str\tPARAMS ((PTR, HOST_WIDE_INT,\n \t\t\t\t\t\t enum machine_mode));\n static rtx expand_builtin_strncpy\tPARAMS ((tree, rtx,\n@@ -2252,15 +2254,18 @@ builtin_memcpy_read_str (data, offset, mode)\n }\n \n /* Expand a call to the memcpy builtin, with arguments in ARGLIST.\n-   Return 0 if we failed, the caller should emit a normal call, otherwise\n-   try to get the result in TARGET, if convenient (and in mode MODE if\n-   that's convenient).  */\n-\n+   Return 0 if we failed, the caller should emit a normal call,\n+   otherwise try to get the result in TARGET, if convenient (and in\n+   mode MODE if that's convenient).  If ENDP is 0 return the\n+   destination pointer, if ENDP is 1 return the end pointer ala\n+   mempcpy, and if ENDP is 2 return the end pointer minus one ala\n+   stpcpy.  */\n static rtx\n-expand_builtin_memcpy (arglist, target, mode)\n+expand_builtin_memcpy (arglist, target, mode, endp)\n      tree arglist;\n      rtx target;\n      enum machine_mode mode;\n+     int endp;\n {\n   if (!validate_arglist (arglist,\n \t\t\t POINTER_TYPE, POINTER_TYPE, INTEGER_TYPE, VOID_TYPE))\n@@ -2316,7 +2321,15 @@ expand_builtin_memcpy (arglist, target, mode)\n \t  if (GET_MODE (dest_mem) != ptr_mode)\n \t    dest_mem = convert_memory_address (ptr_mode, dest_mem);\n #endif\n-\t  return dest_mem;\n+\t  if (endp)\n+\t    {\n+\t      rtx result = gen_rtx_PLUS (GET_MODE(dest_mem), dest_mem, len_rtx);\n+\t      if (endp == 2)\n+\t\tresult = simplify_gen_binary (MINUS, GET_MODE(result), result, const1_rtx);\n+\t      return result;\n+\t    }\n+\t  else\n+\t    return dest_mem;\n \t}\n \n       src_mem = get_memory_rtx (src);\n@@ -2335,7 +2348,15 @@ expand_builtin_memcpy (arglist, target, mode)\n #endif\n \t}\n \n-      return dest_addr;\n+      if (endp)\n+        {\n+\t  rtx result = gen_rtx_PLUS (GET_MODE (dest_addr), dest_addr, len_rtx);\n+\t  if (endp == 2)\n+\t    result = simplify_gen_binary (MINUS, GET_MODE(result), result, const1_rtx);\n+\t  return result;\n+\t}\n+      else\n+\treturn dest_addr;\n     }\n }\n \n@@ -2370,6 +2391,31 @@ expand_builtin_strcpy (exp, target, mode)\n \t\t      target, mode, EXPAND_NORMAL);\n }\n \n+/* Expand a call to the stpcpy builtin, with arguments in ARGLIST.\n+   Return 0 if we failed the caller should emit a normal call,\n+   otherwise try to get the result in TARGET, if convenient (and in\n+   mode MODE if that's convenient).  */\n+\n+static rtx\n+expand_builtin_stpcpy (arglist, target, mode)\n+     tree arglist;\n+     rtx target;\n+     enum machine_mode mode;\n+{\n+  if (!validate_arglist (arglist, POINTER_TYPE, POINTER_TYPE, VOID_TYPE))\n+    return 0;\n+  else\n+    {\n+      tree len = c_strlen (TREE_VALUE (TREE_CHAIN (arglist)));\n+      if (len == 0)\n+\treturn 0;\n+\n+      len = fold (size_binop (PLUS_EXPR, len, ssize_int (1)));\n+      chainon (arglist, build_tree_list (NULL_TREE, len));\n+      return expand_builtin_memcpy (arglist, target, mode, /*endp=*/2);\n+    }\n+}\n+\n /* Callback routine for store_by_pieces.  Read GET_MODE_BITSIZE (MODE)\n    bytes from constant string DATA + OFFSET and return it as target\n    constant.  */\n@@ -4036,10 +4082,12 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       case BUILT_IN_MEMSET:\n       case BUILT_IN_MEMCPY:\n       case BUILT_IN_MEMCMP:\n+      case BUILT_IN_MEMPCPY:\n       case BUILT_IN_BCMP:\n       case BUILT_IN_BZERO:\n       case BUILT_IN_INDEX:\n       case BUILT_IN_RINDEX:\n+      case BUILT_IN_STPCPY:\n       case BUILT_IN_STRCHR:\n       case BUILT_IN_STRRCHR:\n       case BUILT_IN_STRLEN:\n@@ -4303,6 +4351,12 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n \treturn target;\n       break;\n \n+    case BUILT_IN_STPCPY:\n+      target = expand_builtin_stpcpy (arglist, target, mode);\n+      if (target)\n+\treturn target;\n+      break;\n+\n     case BUILT_IN_STRCAT:\n       target = expand_builtin_strcat (arglist, target, mode);\n       if (target)\n@@ -4354,7 +4408,13 @@ expand_builtin (exp, target, subtarget, mode, ignore)\n       break;\n \n     case BUILT_IN_MEMCPY:\n-      target = expand_builtin_memcpy (arglist, target, mode);\n+      target = expand_builtin_memcpy (arglist, target, mode, /*endp=*/0);\n+      if (target)\n+\treturn target;\n+      break;\n+\n+    case BUILT_IN_MEMPCPY:\n+      target = expand_builtin_memcpy (arglist, target, mode, /*endp=*/1);\n       if (target)\n \treturn target;\n       break;"}, {"sha": "1d456e9f2012a1854768870691cf11568fd788dd", "filename": "gcc/builtins.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb65f923c1dbf2012a31e90a08e8876ca01dc32/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb65f923c1dbf2012a31e90a08e8876ca01dc32/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=9cb65f923c1dbf2012a31e90a08e8876ca01dc32", "patch": "@@ -388,6 +388,10 @@ DEF_LIB_BUILTIN(BUILT_IN_MEMSET,\n \t\t\"__builtin_memset\",\n \t\tBT_FN_PTR_PTR_INT_SIZE,\n \t\tATTR_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_MEMPCPY,\n+\t\t\"__builtin_mempcpy\",\n+\t\tBT_FN_PTR_PTR_CONST_PTR_SIZE,\n+\t\tATTR_NOTHROW_LIST)\n \n DEF_LIB_BUILTIN(BUILT_IN_STRCAT,\n \t\t\"__builtin_strcat\",\n@@ -397,6 +401,10 @@ DEF_LIB_BUILTIN(BUILT_IN_STRNCAT,\n \t\t\"__builtin_strncat\",\n \t\tBT_FN_STRING_STRING_CONST_STRING_SIZE,\n \t\tATTR_NOTHROW_LIST)\n+DEF_EXT_LIB_BUILTIN(BUILT_IN_STPCPY,\n+\t\t\"__builtin_stpcpy\",\n+\t\tBT_FN_STRING_STRING_CONST_STRING,\n+\t\tATTR_NOTHROW_LIST)\n DEF_LIB_BUILTIN(BUILT_IN_STRCPY,\n \t\t\"__builtin_strcpy\",\n \t\tBT_FN_STRING_STRING_CONST_STRING,"}, {"sha": "b61a718b28787f33f45de7556171ed3f81779d47", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb65f923c1dbf2012a31e90a08e8876ca01dc32/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb65f923c1dbf2012a31e90a08e8876ca01dc32/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=9cb65f923c1dbf2012a31e90a08e8876ca01dc32", "patch": "@@ -4598,6 +4598,7 @@ v4si f (v4si a, v4si b, v4si c)\n @findex logl\n @findex memcmp\n @findex memcpy\n+@findex mempcpy\n @findex memset\n @findex nearbyint\n @findex nearbyintf\n@@ -4623,6 +4624,7 @@ v4si f (v4si a, v4si b, v4si c)\n @findex sqrtf\n @findex sqrtl\n @findex sscanf\n+@findex stpcpy\n @findex strcat\n @findex strchr\n @findex strcmp\n@@ -4667,8 +4669,8 @@ be emitted.\n Outside strict ISO C mode (@option{-ansi}, @option{-std=c89} or\n @option{-std=c99}), the functions @code{alloca}, @code{bcmp},\n @code{bzero}, @code{_exit}, @code{ffs}, @code{fprintf_unlocked},\n-@code{fputs_unlocked}, @code{index}, @code{printf_unlocked},\n-and @code{rindex} may be handled as built-in functions.\n+@code{fputs_unlocked}, @code{index}, @code{mempcpy}, @code{printf_unlocked},\n+@code{rindex}, and @code{stpcpy} may be handled as built-in functions.\n All these functions have corresponding versions\n prefixed with @code{__builtin_}, which may be used even in strict C89\n mode."}, {"sha": "3b8b5c51251e73163fd066817c738e25616c22f3", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb65f923c1dbf2012a31e90a08e8876ca01dc32/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb65f923c1dbf2012a31e90a08e8876ca01dc32/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=9cb65f923c1dbf2012a31e90a08e8876ca01dc32", "patch": "@@ -1,3 +1,7 @@\n+2003-04-13  Kaveh R. Ghazi  <ghazi@caip.rutgers.edu>\n+\n+\t* gcc.c-torture/execute/string-opt-18.c: New test.\n+\n 2003-04-13  Mark Mitchell  <mark@codesourcery.com>\n \n \tPR c++/10300"}, {"sha": "cc7448906a9fcd273711d376169da9dabdd6efe0", "filename": "gcc/testsuite/gcc.c-torture/execute/string-opt-18.c", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9cb65f923c1dbf2012a31e90a08e8876ca01dc32/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-18.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9cb65f923c1dbf2012a31e90a08e8876ca01dc32/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-18.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fstring-opt-18.c?ref=9cb65f923c1dbf2012a31e90a08e8876ca01dc32", "patch": "@@ -0,0 +1,91 @@\n+#include <stdio.h>\n+/* Copyright (C) 2000  Free Software Foundation.\n+\n+   Ensure builtin mempcpy and stpcpy perform correctly.\n+\n+   Written by Kaveh Ghazi, 4/11/2003.  */\n+\n+extern void abort (void);\n+extern char *strcpy (char *, const char *);\n+extern char *stpcpy (char *, const char *);\n+/*typedef __SIZE_TYPE__ size_t;*/\n+extern size_t strlen(const char *);\n+extern void *memcpy (void *, const void *, size_t);\n+extern void *mempcpy (void *, const void *, size_t);\n+extern int memcmp (const void *, const void *, size_t);\n+\n+const char s1[] = \"123\";\n+char p[32] = \"\";\n+\n+int main()\n+{\n+  int i;\n+  const char *s;\n+\n+  if (stpcpy (p, \"abcde\") != p + 5 || memcmp (p, \"abcde\", 6))\n+    abort ();\n+  if (stpcpy (p + 16, \"vwxyz\" + 1) != p + 16 + 4 || memcmp (p + 16, \"wxyz\", 5))\n+    abort ();\n+  if (stpcpy (p + 1, \"\") != p + 1 + 0 || memcmp (p, \"a\\0cde\", 6))\n+    abort ();  \n+  if (stpcpy (p + 3, \"fghij\") != p + 3 + 5 || memcmp (p, \"a\\0cfghij\", 9))\n+    abort ();\n+  if (mempcpy (p, \"ABCDE\", 6) != p + 6 || memcmp (p, \"ABCDE\", 6))\n+    abort ();\n+  if (mempcpy (p + 16, \"VWX\" + 1, 2) != p + 16 + 2 || memcmp (p + 16, \"WXyz\", 5))\n+    abort ();\n+  if (mempcpy (p + 1, \"\", 1) != p + 1 + 1 || memcmp (p, \"A\\0CDE\", 6))\n+    abort ();  \n+  if (mempcpy (p + 3, \"FGHI\", 4) != p + 3 + 4 || memcmp (p, \"A\\0CFGHIj\", 9))\n+    abort ();\n+\n+  i = 8;\n+  memcpy (p + 20, \"qrstu\", 6);\n+  if (stpcpy ((i++, p + 20 + 1), \"23\") != (p + 20 + 1 + 2) || i != 9 || memcmp (p + 20, \"q23\\0u\", 6))\n+    abort ();\n+\n+  s = s1; i = 3;\n+  memcpy (p + 25, \"QRSTU\", 6);\n+  if (mempcpy (p + 25 + 1, s++, i++) != (p + 25 + 1 + 3) || i != 4 || s != s1 + 1 || memcmp (p + 25, \"Q123U\", 6))\n+    abort ();\n+\n+  if (stpcpy (stpcpy (p, \"ABCD\"), \"EFG\") != p + 7 || memcmp (p, \"ABCDEFG\", 8))\n+    abort();\n+  if (mempcpy (mempcpy (p, \"abcdEFG\", 4), \"efg\", 4) != p + 8 || memcmp (p, \"abcdefg\", 8))\n+    abort();\n+  \n+  /* Test at least one instance of the __builtin_ style.  We do this\n+     to ensure that it works and that the prototype is correct.  */\n+  if (__builtin_stpcpy (p, \"abcde\") != p + 5 || memcmp (p, \"abcde\", 6))\n+    abort ();\n+  if (__builtin_mempcpy (p, \"ABCDE\", 6) != p + 6 || memcmp (p, \"ABCDE\", 6))\n+    abort ();\n+\n+  return 0;\n+}\n+\n+/* When optimizing, all the above cases should be transformed into\n+   something else.  So any remaining calls to the original function\n+   should abort.  When not optimizing, we provide fallback funcs for\n+   platforms that don't have mempcpy or stpcpy in libc.*/\n+__attribute__ ((noinline))\n+static char *\n+stpcpy (char *d, const char *s)\n+{\n+#ifdef __OPTIMIZE__\n+  abort ();\n+#else\n+  return strcpy (d, s) + strlen (s);\n+#endif\n+}\n+\n+__attribute__ ((noinline))\n+static void *\n+mempcpy (void *dst, const void *src, size_t sz)\n+{\n+#ifdef __OPTIMIZE__\n+  abort ();\n+#else\n+  return (char *) memcpy (dst, src, sz) + sz;\n+#endif\n+}"}]}