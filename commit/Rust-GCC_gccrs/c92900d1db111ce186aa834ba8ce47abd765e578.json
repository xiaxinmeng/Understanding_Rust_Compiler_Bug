{"sha": "c92900d1db111ce186aa834ba8ce47abd765e578", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YzkyOTAwZDFkYjExMWNlMTg2YWE4MzRiYThjZTQ3YWJkNzY1ZTU3OA==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-08-23T00:20:48Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-08-23T00:20:48Z"}, "message": "compiler: Remove old handling of unsafe.Pointer in type assertions.\n\nFixes issue 17.\n\nFrom-SVN: r190608", "tree": {"sha": "7edd9bd2aa5bc7de0078a507ca3e59e2e10df5f1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7edd9bd2aa5bc7de0078a507ca3e59e2e10df5f1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/c92900d1db111ce186aa834ba8ce47abd765e578", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92900d1db111ce186aa834ba8ce47abd765e578", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c92900d1db111ce186aa834ba8ce47abd765e578", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c92900d1db111ce186aa834ba8ce47abd765e578/comments", "author": null, "committer": null, "parents": [{"sha": "8489a21ac48e0a8d6760b1f7675d958dc5f5de23", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8489a21ac48e0a8d6760b1f7675d958dc5f5de23", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8489a21ac48e0a8d6760b1f7675d958dc5f5de23"}], "stats": {"total": 37, "additions": 3, "deletions": 34}, "files": [{"sha": "60856c48ef3c0b82e0ba5f5d3c1918d1928635bb", "filename": "gcc/go/gofrontend/expressions.cc", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92900d1db111ce186aa834ba8ce47abd765e578/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92900d1db111ce186aa834ba8ce47abd765e578/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fexpressions.cc?ref=c92900d1db111ce186aa834ba8ce47abd765e578", "patch": "@@ -12914,26 +12914,8 @@ Type_guard_expression::do_traverse(Traverse* traverse)\n void\n Type_guard_expression::do_check_types(Gogo*)\n {\n-  // 6g permits using a type guard with unsafe.pointer; we are\n-  // compatible.\n   Type* expr_type = this->expr_->type();\n-  if (expr_type->is_unsafe_pointer_type())\n-    {\n-      if (this->type_->points_to() == NULL\n-\t  && (this->type_->integer_type() == NULL\n-\t      || (this->type_->forwarded()\n-\t\t  != Type::lookup_integer_type(\"uintptr\"))))\n-\tthis->report_error(_(\"invalid unsafe.Pointer conversion\"));\n-    }\n-  else if (this->type_->is_unsafe_pointer_type())\n-    {\n-      if (expr_type->points_to() == NULL\n-\t  && (expr_type->integer_type() == NULL\n-\t      || (expr_type->forwarded()\n-\t\t  != Type::lookup_integer_type(\"uintptr\"))))\n-\tthis->report_error(_(\"invalid unsafe.Pointer conversion\"));\n-    }\n-  else if (expr_type->interface_type() == NULL)\n+  if (expr_type->interface_type() == NULL)\n     {\n       if (!expr_type->is_error() && !this->type_->is_error())\n \tthis->report_error(_(\"type assertion only valid for interface types\"));\n@@ -12966,23 +12948,10 @@ Type_guard_expression::do_check_types(Gogo*)\n tree\n Type_guard_expression::do_get_tree(Translate_context* context)\n {\n-  Gogo* gogo = context->gogo();\n   tree expr_tree = this->expr_->get_tree(context);\n   if (expr_tree == error_mark_node)\n     return error_mark_node;\n-  Type* expr_type = this->expr_->type();\n-  if ((this->type_->is_unsafe_pointer_type()\n-       && (expr_type->points_to() != NULL\n-\t   || expr_type->integer_type() != NULL))\n-      || (expr_type->is_unsafe_pointer_type()\n-\t  && this->type_->points_to() != NULL))\n-    return convert_to_pointer(type_to_tree(this->type_->get_backend(gogo)),\n-\t\t\t      expr_tree);\n-  else if (expr_type->is_unsafe_pointer_type()\n-\t   && this->type_->integer_type() != NULL)\n-    return convert_to_integer(type_to_tree(this->type_->get_backend(gogo)),\n-\t\t\t      expr_tree);\n-  else if (this->type_->interface_type() != NULL)\n+  if (this->type_->interface_type() != NULL)\n     return Expression::convert_interface_to_interface(context, this->type_,\n \t\t\t\t\t\t      this->expr_->type(),\n \t\t\t\t\t\t      expr_tree, true,"}, {"sha": "c77560fc08c5f4214cd541a1b553448a3dbf5e4d", "filename": "libgo/go/os/dir.go", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/c92900d1db111ce186aa834ba8ce47abd765e578/libgo%2Fgo%2Fos%2Fdir.go", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/c92900d1db111ce186aa834ba8ce47abd765e578/libgo%2Fgo%2Fos%2Fdir.go", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fgo%2Fos%2Fdir.go?ref=c92900d1db111ce186aa834ba8ce47abd765e578", "patch": "@@ -49,7 +49,7 @@ func (file *File) readdirnames(n int) (names []string, err error) {\n \t\tfile.dirinfo.dir = r\n \t}\n \n-\tentry_dirent := unsafe.Pointer(&file.dirinfo.buf[0]).(*syscall.Dirent)\n+\tentry_dirent := (*syscall.Dirent)(unsafe.Pointer(&file.dirinfo.buf[0]))\n \n \tsize := n\n \tif size < 0 {"}]}