{"sha": "a9ac13f7bf9f86977984590b32359f7f4742216f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTlhYzEzZjdiZjlmODY5Nzc5ODQ1OTBiMzIzNTlmN2Y0NzQyMjE2Zg==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "iant@google.com", "date": "2011-04-03T22:44:18Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2011-04-03T22:44:18Z"}, "message": "Start using backend interface separate from gofrontend.\n\n\t* go-gcc.cc: New file.\n\t* Make-lang.in (GO_OBJS): Add go/go-gcc.o.\n\t(go/go-gcc.o): New target.\n\t(go/go.o): Depend on go/gofrontend/backend.h.\n\t(go/statements.o): Likewise.\n\nFrom-SVN: r171917", "tree": {"sha": "9b87d695a50405dbc08b35a02db9db1e0ff0355f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9b87d695a50405dbc08b35a02db9db1e0ff0355f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a9ac13f7bf9f86977984590b32359f7f4742216f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ac13f7bf9f86977984590b32359f7f4742216f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a9ac13f7bf9f86977984590b32359f7f4742216f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a9ac13f7bf9f86977984590b32359f7f4742216f/comments", "author": null, "committer": null, "parents": [{"sha": "3edf1dd5bd3a7893f130e69a72839ca3637196cc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3edf1dd5bd3a7893f130e69a72839ca3637196cc", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3edf1dd5bd3a7893f130e69a72839ca3637196cc"}], "stats": {"total": 373, "additions": 361, "deletions": 12}, "files": [{"sha": "5d50db2d560ba49e25a56c389a28503bfaef1c36", "filename": "gcc/go/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FChangeLog?ref=a9ac13f7bf9f86977984590b32359f7f4742216f", "patch": "@@ -1,3 +1,11 @@\n+2011-04-03  Ian Lance Taylor  <iant@google.com>\n+\n+\t* go-gcc.cc: New file.\n+\t* Make-lang.in (GO_OBJS): Add go/go-gcc.o.\n+\t(go/go-gcc.o): New target.\n+\t(go/go.o): Depend on go/gofrontend/backend.h.\n+\t(go/statements.o): Likewise.\n+\n 2011-02-14  Ralf Wildenhues  <Ralf.Wildenhues@gmx.de>\n \n \t* gccgo.texi (Top, Import and Export): Fix a typo and a markup nit."}, {"sha": "07c884d6cb8890c9e57a376670af1df8f02e1946", "filename": "gcc/go/Make-lang.in", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2FMake-lang.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2FMake-lang.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2FMake-lang.in?ref=a9ac13f7bf9f86977984590b32359f7f4742216f", "patch": "@@ -50,6 +50,7 @@ GO_OBJS = \\\n \tgo/expressions.o \\\n \tgo/go-backend.o \\\n \tgo/go-dump.o \\\n+\tgo/go-gcc.o \\\n \tgo/go-lang.o \\\n \tgo/go.o \\\n \tgo/gogo-tree.o \\\n@@ -235,6 +236,9 @@ go/go-lang.o: go/go-lang.c $(CONFIG_H) $(SYSTEM_H) coretypes.h $(OPTS_H) \\\n \n GOINCLUDES = -I $(srcdir)/go -I $(srcdir)/go/gofrontend\n \n+go/go-gcc.o: go/go-gcc.cc $(GO_SYSTEM_H) $(TREE_H) go/gofrontend/backend.h\n+\t$(CXX) -c $(GOINCLUDES) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $< $(OUTPUT_OPTION)\n+\n go/%.o: go/gofrontend/%.cc\n \t$(CXX) -c $(GOINCLUDES) $(ALL_CPPFLAGS) $(ALL_CXXFLAGS) $< $(OUTPUT_OPTION)\n \n@@ -249,7 +253,7 @@ go/expressions.o: go/gofrontend/expressions.cc $(GO_SYSTEM_H) $(TOPLEV_H) \\\n \tgo/gofrontend/export.h $(GO_IMPORT_H) $(GO_STATEMENTS_H) $(GO_LEX_H) \\\n \t$(GO_EXPRESSIONS_H)\n go/go.o: go/gofrontend/go.cc $(GO_SYSTEM_H) $(GO_C_H) $(GO_LEX_H) \\\n-\t$(GO_PARSE_H) $(GO_GOGO_H)\n+\t$(GO_PARSE_H) go/gofrontend/backend.h $(GO_GOGO_H)\n go/go-dump.o: go/gofrontend/go-dump.cc $(GO_SYSTEM_H) $(GO_C_H) \\\n \tgo/gofrontend/go-dump.h\n go/gogo-tree.o: go/gofrontend/gogo-tree.cc $(GO_SYSTEM_H) $(TOPLEV_H) \\\n@@ -272,7 +276,7 @@ go/parse.o: go/gofrontend/parse.cc $(GO_SYSTEM_H) $(GO_LEX_H) $(GO_GOGO_H) \\\n go/statements.o: go/gofrontend/statements.cc $(GO_SYSTEM_H) intl.h $(TREE_H) \\\n \t$(GIMPLE_H) convert.h tree-iterator.h $(TREE_FLOW_H) $(REAL_H) \\\n \t$(GO_C_H) $(GO_TYPES_H) $(GO_EXPRESSIONS_H) $(GO_GOGO_H) \\\n-\t$(GO_STATEMENTS_H)\n+\tgo/gofrontend/backend.h $(GO_STATEMENTS_H)\n go/types.o: go/gofrontend/types.cc $(GO_SYSTEM_H) $(TOPLEV_H) intl.h $(TREE_H) \\\n \t$(GIMPLE_H) $(REAL_H) convert.h $(GO_C_H) $(GO_GOGO_H) \\\n \tgo/gofrontend/operator.h $(GO_EXPRESSIONS_H) $(GO_STATEMENTS_H) \\"}, {"sha": "ca2d63b1b665ab7b4973dcfcf1c74e661ec92dc5", "filename": "gcc/go/go-gcc.cc", "status": "added", "additions": 199, "deletions": 0, "changes": 199, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2Fgo-gcc.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2Fgo-gcc.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgo-gcc.cc?ref=a9ac13f7bf9f86977984590b32359f7f4742216f", "patch": "@@ -0,0 +1,199 @@\n+// go-gcc.cc -- Go frontend to gcc IR.\n+// Copyright (C) 2011 Free Software Foundation, Inc.\n+// Contributed by Ian Lance Taylor, Google.\n+\n+// This file is part of GCC.\n+\n+// GCC is free software; you can redistribute it and/or modify it under\n+// the terms of the GNU General Public License as published by the Free\n+// Software Foundation; either version 3, or (at your option) any later\n+// version.\n+\n+// GCC is distributed in the hope that it will be useful, but WITHOUT ANY\n+// WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+// for more details.\n+\n+// You should have received a copy of the GNU General Public License\n+// along with GCC; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include \"go-system.h\"\n+\n+// This has to be included outside of extern \"C\", so we have to\n+// include it here before tree.h includes it later.\n+#include <gmp.h>\n+\n+#ifndef ENABLE_BUILD_WITH_CXX\n+extern \"C\"\n+{\n+#endif\n+\n+#include \"tree.h\"\n+\n+#ifndef ENABLE_BUILD_WITH_CXX\n+}\n+#endif\n+\n+#include \"backend.h\"\n+\n+// A class wrapping a tree.\n+\n+class Gcc_tree\n+{\n+ public:\n+  Gcc_tree(tree t)\n+    : t_(t)\n+  { }\n+\n+  tree\n+  get_tree()\n+  { return this->t_; }\n+\n+ private:\n+  tree t_;\n+};\n+\n+// In gcc, types, expressions, and statements are all trees.\n+class Btype : public Gcc_tree\n+{\n+ public:\n+  Btype(tree t)\n+    : Gcc_tree(t)\n+  { }\n+};\n+\n+class Bexpression : public Gcc_tree\n+{\n+ public:\n+  Bexpression(tree t)\n+    : Gcc_tree(t)\n+  { }\n+};\n+\n+class Bstatement : public Gcc_tree\n+{\n+ public:\n+  Bstatement(tree t)\n+    : Gcc_tree(t)\n+  { }\n+};\n+\n+// This file implements the interface between the Go frontend proper\n+// and the gcc IR.  This implements specific instantiations of\n+// abstract classes defined by the Go frontend proper.  The Go\n+// frontend proper class methods of these classes to generate the\n+// backend representation.\n+\n+class Gcc_backend : public Backend\n+{\n+ public:\n+  // Types.\n+\n+  Btype*\n+  error_type()\n+  { gcc_unreachable(); }\n+\n+  Btype*\n+  void_type()\n+  { gcc_unreachable(); }\n+\n+  Btype*\n+  bool_type()\n+  { gcc_unreachable(); }\n+\n+  Btype*\n+  integer_type(bool /* is_unsigned */, int /* bits */)\n+  { gcc_unreachable(); }\n+\n+  Btype*\n+  float_type(int /* bits */)\n+  { gcc_unreachable(); }\n+\n+  Btype*\n+  string_type()\n+  { gcc_unreachable(); }\n+\n+  Btype*\n+  function_type(const Function_type*, Btype* /* receiver */,\n+\t\tconst Btypes* /* parameters */,\n+\t\tconst Btypes* /* results */)\n+  { gcc_unreachable(); }\n+\n+  Btype*\n+  struct_type(const Struct_type*, const Btypes* /* field_types */)\n+  { gcc_unreachable(); }\n+\n+  Btype*\n+  array_type(const Btype* /* element_type */, const Bexpression* /* length */)\n+  { gcc_unreachable(); }\n+\n+  Btype*\n+  slice_type(const Btype* /* element_type */)\n+  { gcc_unreachable(); }\n+\n+  Btype*\n+  map_type(const Btype* /* key_type */, const Btype* /* value_type */,\n+\t   source_location)\n+  { gcc_unreachable(); }\n+\n+  Btype*\n+  channel_type(const Btype* /* element_type */)\n+  { gcc_unreachable(); }\n+\n+  Btype*\n+  interface_type(const Interface_type*, const Btypes* /* method_types */)\n+  { gcc_unreachable(); }\n+\n+  // Statements.\n+\n+  // Create an assignment statement.\n+  Bstatement*\n+  assignment(Bexpression* lhs, Bexpression* rhs,\n+\t     source_location location);\n+\n+ private:\n+  // Make a Bstatement from a tree.\n+  Bstatement*\n+  make_statement(tree t)\n+  { return new Bstatement(t); }\n+};\n+\n+// Assignment.\n+\n+Bstatement*\n+Gcc_backend::assignment(Bexpression* lhs, Bexpression* rhs,\n+\t\t\tsource_location location)\n+{\n+  return this->make_statement(fold_build2_loc(location, MODIFY_EXPR,\n+\t\t\t\t\t      void_type_node,\n+\t\t\t\t\t      lhs->get_tree(),\n+\t\t\t\t\t      rhs->get_tree()));\n+}\n+\n+// The single backend.\n+\n+static Gcc_backend gcc_backend;\n+\n+// Return the backend generator.\n+\n+Backend*\n+go_get_backend()\n+{\n+  return &gcc_backend;\n+}\n+\n+// FIXME: Temporary functions while converting to the new backend\n+// interface.\n+\n+Bexpression*\n+tree_to_expr(tree t)\n+{\n+  return new Bexpression(t);\n+}\n+\n+tree\n+statement_to_tree(Bstatement* bs)\n+{\n+  return bs->get_tree();\n+}"}, {"sha": "babef83274283947d9f7247d40c3800fb2ff647d", "filename": "gcc/go/gofrontend/backend.h", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2Fgofrontend%2Fbackend.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fbackend.h?ref=a9ac13f7bf9f86977984590b32359f7f4742216f", "patch": "@@ -0,0 +1,119 @@\n+// backend.h -- Go frontend interface to backend  -*- C++ -*-\n+\n+// Copyright 2011 The Go Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style\n+// license that can be found in the LICENSE file.\n+\n+#ifndef GO_BACKEND_H\n+#define GO_BACKEND_H\n+\n+class Function_type;\n+class Struct_type;\n+class Interface_type;\n+\n+// Pointers to these types are created by the backend, passed to the\n+// frontend, and passed back to the backend.  The types must be\n+// defined by the backend using these names.\n+\n+// The backend representation of a type.\n+class Btype;\n+\n+// The backend represention of an expression.\n+class Bexpression;\n+\n+// The backend representation of a statement.\n+class Bstatement;\n+\n+// A list of backend types.\n+typedef std::vector<Btype*> Btypes;\n+\n+// The backend interface.  This is a pure abstract class that a\n+// specific backend will implement.\n+\n+class Backend\n+{\n+ public:\n+  virtual ~Backend() { }\n+\n+  // Types.\n+\n+  // Produce an error type.  Actually the backend could probably just\n+  // crash if this is called.\n+  virtual Btype*\n+  error_type() = 0;\n+\n+  // Get a void type.  This is used in (at least) two ways: 1) as the\n+  // return type of a function with no result parameters; 2)\n+  // unsafe.Pointer is represented as *void.\n+  virtual Btype*\n+  void_type() = 0;\n+\n+  // Get the unnamed boolean type.\n+  virtual Btype*\n+  bool_type() = 0;\n+\n+  // Get an unnamed integer type with the given signedness and number\n+  // of bits.\n+  virtual Btype*\n+  integer_type(bool is_unsigned, int bits) = 0;\n+\n+  // Get an unnamed floating point type with the given number of bits.\n+  virtual Btype*\n+  float_type(int bits) = 0;\n+\n+  // Get the unnamed string type.\n+  virtual Btype*\n+  string_type() = 0;\n+\n+  // Get a function type.  The receiver, parameter, and results are\n+  // generated from the types in the Function_type.  The Function_type\n+  // is provided so that the names are available.\n+  virtual Btype*\n+  function_type(const Function_type*, Btype* receiver,\n+\t\tconst Btypes* parameters,\n+\t\tconst Btypes* results) = 0;\n+\n+  // Get a struct type.  The Struct_type is provided to get the field\n+  // names.\n+  virtual Btype*\n+  struct_type(const Struct_type*, const Btypes* field_types) = 0;\n+\n+  // Get an array type.\n+  virtual Btype*\n+  array_type(const Btype* element_type, const Bexpression* length) = 0;\n+\n+  // Get a slice type.\n+  virtual Btype*\n+  slice_type(const Btype* element_type) = 0;\n+\n+  // Get a map type.\n+  virtual Btype*\n+  map_type(const Btype* key_type, const Btype* value_type, source_location) = 0;\n+\n+  // Get a channel type.\n+  virtual Btype*\n+  channel_type(const Btype* element_type) = 0;\n+\n+  // Get an interface type.  The Interface_type is provided to get the\n+  // method names.\n+  virtual Btype*\n+  interface_type(const Interface_type*, const Btypes* method_types) = 0;\n+\n+  // Statements.\n+\n+  // Create an assignment statement.\n+  virtual Bstatement*\n+  assignment(Bexpression* lhs, Bexpression* rhs, source_location location) = 0;\n+};\n+\n+// The backend interface has to define this function.\n+\n+extern Backend* go_get_backend();\n+\n+// FIXME: Temporary helper functions while converting to new backend\n+// interface.\n+\n+extern Bexpression* tree_to_expr(tree);\n+extern tree statement_to_tree(Bstatement*);\n+\n+#endif // !defined(GO_BACKEND_H)"}, {"sha": "e8729739e1214f866bb26b35d4ebab0ffadeb5ce", "filename": "gcc/go/gofrontend/go.cc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2Fgofrontend%2Fgo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgo.cc?ref=a9ac13f7bf9f86977984590b32359f7f4742216f", "patch": "@@ -10,6 +10,7 @@\n \n #include \"lex.h\"\n #include \"parse.h\"\n+#include \"backend.h\"\n #include \"gogo.h\"\n \n // The unique prefix to use for exported symbols.  This is set during\n@@ -27,7 +28,7 @@ void\n go_create_gogo(int int_type_size, int pointer_size)\n {\n   gcc_assert(::gogo == NULL);\n-  ::gogo = new Gogo(int_type_size, pointer_size);\n+  ::gogo = new Gogo(go_get_backend(), int_type_size, pointer_size);\n   if (!unique_prefix.empty())\n     ::gogo->set_unique_prefix(unique_prefix);\n }"}, {"sha": "645014154d5b4eb6a3f4193ea5c878ef3adbd788", "filename": "gcc/go/gofrontend/gogo.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2Fgofrontend%2Fgogo.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.cc?ref=a9ac13f7bf9f86977984590b32359f7f4742216f", "patch": "@@ -19,8 +19,9 @@\n \n // Class Gogo.\n \n-Gogo::Gogo(int int_type_size, int pointer_size)\n-  : package_(NULL),\n+Gogo::Gogo(Backend* backend, int int_type_size, int pointer_size)\n+  : backend_(backend),\n+    package_(NULL),\n     functions_(),\n     globals_(new Bindings(NULL)),\n     imports_(),"}, {"sha": "b6b1f4d7c1496251a23032a5fa248e1ad7b91a07", "filename": "gcc/go/gofrontend/gogo.h", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2Fgofrontend%2Fgogo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fgogo.h?ref=a9ac13f7bf9f86977984590b32359f7f4742216f", "patch": "@@ -37,6 +37,7 @@ class Methods;\n class Named_object;\n class Label;\n class Translate_context;\n+class Backend;\n class Export;\n class Import;\n \n@@ -102,7 +103,12 @@ class Gogo\n  public:\n   // Create the IR, passing in the sizes of the types \"int\" and\n   // \"uintptr\" in bits.\n-  Gogo(int int_type_size, int pointer_size);\n+  Gogo(Backend* backend, int int_type_size, int pointer_size);\n+\n+  // Get the backend generator.\n+  Backend*\n+  backend()\n+  { return this->backend_; }\n \n   // Get the package name.\n   const std::string&\n@@ -647,6 +653,8 @@ class Gogo\n   typedef Unordered_map_hash(const Type*, tree, Type_hash_identical,\n \t\t\t     Type_identical) Type_descriptor_decls;\n \n+  // The backend generator.\n+  Backend* backend_;\n   // The package we are compiling.\n   Package* package_;\n   // The list of currently open functions during parsing.\n@@ -2451,16 +2459,16 @@ class Traverse\n   Expressions_seen* expressions_seen_;\n };\n \n-// When translating the gogo IR into trees, this is the context we\n-// pass down the blocks and statements.\n+// When translating the gogo IR into the backend data structure, this\n+// is the context we pass down the blocks and statements.\n \n class Translate_context\n {\n  public:\n   Translate_context(Gogo* gogo, Named_object* function, Block* block,\n \t\t    tree block_tree)\n-    : gogo_(gogo), function_(function), block_(block), block_tree_(block_tree),\n-      is_const_(false)\n+    : gogo_(gogo), backend_(gogo->backend()), function_(function),\n+      block_(block), block_tree_(block_tree), is_const_(false)\n   { }\n \n   // Accessors.\n@@ -2469,6 +2477,10 @@ class Translate_context\n   gogo()\n   { return this->gogo_; }\n \n+  Backend*\n+  backend()\n+  { return this->backend_; }\n+\n   Named_object*\n   function()\n   { return this->function_; }\n@@ -2493,6 +2505,8 @@ class Translate_context\n  private:\n   // The IR for the entire compilation unit.\n   Gogo* gogo_;\n+  // The generator for the backend data structures.\n+  Backend* backend_;\n   // The function we are currently translating.\n   Named_object* function_;\n   // The block we are currently translating."}, {"sha": "b1e7613eb509f11b9eafbd4c4fdf7255ecbbc23d", "filename": "gcc/go/gofrontend/statements.cc", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a9ac13f7bf9f86977984590b32359f7f4742216f/gcc%2Fgo%2Fgofrontend%2Fstatements.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgo%2Fgofrontend%2Fstatements.cc?ref=a9ac13f7bf9f86977984590b32359f7f4742216f", "patch": "@@ -29,6 +29,7 @@ extern \"C\"\n #include \"types.h\"\n #include \"expressions.h\"\n #include \"gogo.h\"\n+#include \"backend.h\"\n #include \"statements.h\"\n \n // Class Statement.\n@@ -560,8 +561,10 @@ Assignment_statement::do_get_tree(Translate_context* context)\n   if (rhs_tree == error_mark_node)\n     return error_mark_node;\n \n-  return fold_build2_loc(this->location(), MODIFY_EXPR, void_type_node,\n-\t\t\t lhs_tree, rhs_tree);\n+  Bstatement* ret = context->backend()->assignment(tree_to_expr(lhs_tree),\n+\t\t\t\t\t\t   tree_to_expr(rhs_tree),\n+\t\t\t\t\t\t   this->location());\n+  return statement_to_tree(ret);\n }\n \n // Make an assignment statement."}]}