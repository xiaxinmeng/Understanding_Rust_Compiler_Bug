{"sha": "fe725c000bde67b9f30531e0b6beb0201c88a747", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmU3MjVjMDAwYmRlNjdiOWYzMDUzMWUwYjZiZWIwMjAxYzg4YTc0Nw==", "commit": {"author": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-15T18:56:48Z"}, "committer": {"name": "Ian Lance Taylor", "email": "ian@gcc.gnu.org", "date": "2012-05-15T18:56:48Z"}, "message": "runtime: Make all variables used across getcontext volatile.\n\nFrom-SVN: r187549", "tree": {"sha": "13237911691923e59273af3da119f118ad1f4fc3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13237911691923e59273af3da119f118ad1f4fc3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/fe725c000bde67b9f30531e0b6beb0201c88a747", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe725c000bde67b9f30531e0b6beb0201c88a747", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fe725c000bde67b9f30531e0b6beb0201c88a747", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fe725c000bde67b9f30531e0b6beb0201c88a747/comments", "author": null, "committer": null, "parents": [{"sha": "eb606595780c992930863e8f2db1f31b53bed7ba", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/eb606595780c992930863e8f2db1f31b53bed7ba", "html_url": "https://github.com/Rust-GCC/gccrs/commit/eb606595780c992930863e8f2db1f31b53bed7ba"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "0862c60464035aeb4168d018ad279af07ba07863", "filename": "libgo/runtime/proc.c", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/fe725c000bde67b9f30531e0b6beb0201c88a747/libgo%2Fruntime%2Fproc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/fe725c000bde67b9f30531e0b6beb0201c88a747/libgo%2Fruntime%2Fproc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libgo%2Fruntime%2Fproc.c?ref=fe725c000bde67b9f30531e0b6beb0201c88a747", "patch": "@@ -1322,7 +1322,7 @@ __go_go(void (*fn)(void*), void* arg)\n {\n \tbyte *sp;\n \tsize_t spsize;\n-\tG * volatile newg;\t// volatile to avoid longjmp warning\n+\tG *newg;\n \n \tschedlock();\n \n@@ -1363,19 +1363,26 @@ __go_go(void (*fn)(void*), void* arg)\n \tif(sp == nil)\n \t\truntime_throw(\"nil g->stack0\");\n \n-\tgetcontext(&newg->context);\n-\tnewg->context.uc_stack.ss_sp = sp;\n+\t{\n+\t\t// Avoid warnings about variables clobbered by\n+\t\t// longjmp.\n+\t\tbyte * volatile vsp = sp;\n+\t\tsize_t volatile vspsize = spsize;\n+\t\tG * volatile vnewg = newg;\n+\n+\t\tgetcontext(&vnewg->context);\n+\t\tvnewg->context.uc_stack.ss_sp = vsp;\n #ifdef MAKECONTEXT_STACK_TOP\n-\tnewg->context.uc_stack.ss_sp += spsize;\n+\t\tvnewg->context.uc_stack.ss_sp += vspsize;\n #endif\n-\tnewg->context.uc_stack.ss_size = spsize;\n-\tmakecontext(&newg->context, kickoff, 0);\n+\t\tvnewg->context.uc_stack.ss_size = vspsize;\n+\t\tmakecontext(&vnewg->context, kickoff, 0);\n \n-\tnewprocreadylocked(newg);\n-\tschedunlock();\n+\t\tnewprocreadylocked(vnewg);\n+\t\tschedunlock();\n \n-\treturn newg;\n-//printf(\" goid=%d\\n\", newg->goid);\n+\t\treturn vnewg;\n+\t}\n }\n \n // Put on gfree list.  Sched must be locked."}]}