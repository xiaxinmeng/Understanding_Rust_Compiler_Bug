{"sha": "169980942642c39a062529f747e00a7882d046d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTY5OTgwOTQyNjQyYzM5YTA2MjUyOWY3NDdlMDBhNzg4MmQwNDZkNw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2015-05-09T04:50:05Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2015-05-09T04:50:05Z"}, "message": "bitmap.c, [...]: Add space between string literal and macro name.\n\n\t* bitmap.c, c/c-aux-info.c, cfg.c, cfghooks.c, cgraph.c,\n\tconfig/aarch64/aarch64.md config/alpha/vms.h, config/darwin.c,\n\tconfig/darwin.h, config/darwin9.h, config/elfos.h,\n\tconfig/i386/bsd.h, config/ia64/ia64.c, config/lm32/lm32.h,\n\tconfig/microblaze/microblaze.h, config/mips/mips.h,\n\tconfig/mmix/mmix.c, config/msp430/msp430.c, config/nios2/nios2.h,\n\tconfig/nvptx/nvptx.c, config/nvptx/nvptx.h, config/pa/pa.c,\n\tconfig/pa/pa.h, config/rs6000/rs6000.c, config/rs6000/sysv4.h,\n\tconfig/rs6000/xcoff.h, config/rx/rx.h, config/s390/s390.h,\n\tconfig/sparc/sol2.h, config/sparc/sparc.h, config/visium/visium.h,\n\tcppbuiltin.c, defaults.h, doc/invoke.texi, dwarf2cfi.c,\n\tdwarf2out.c, final.c, gcc.c, gcov-dump.c, gcov.c, ipa-cp.c,\n\tipa-inline.c, ipa-polymorphic-call.c, ipa-profile.c, ipa-prop.c,\n\tira-color.c, ira.c, loop-doloop.c, loop-iv.c, mcf.c,\n\tmodulo-sched.c, predict.c, profile.c, stor-layout.c, toplev.c,\n\ttree-ssa-reassoc.c, value-prof.c, wide-int-print.cc: Add space\n\tbetween string literal and macro name.\n\nFrom-SVN: r222960", "tree": {"sha": "332b7ebee4f40f05eb7ab5af1cf1c26cf1111e16", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/332b7ebee4f40f05eb7ab5af1cf1c26cf1111e16"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/169980942642c39a062529f747e00a7882d046d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/169980942642c39a062529f747e00a7882d046d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/169980942642c39a062529f747e00a7882d046d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/169980942642c39a062529f747e00a7882d046d7/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "5c8d98af4f9c204f8a823d26a5de3ca4f1256f71", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c8d98af4f9c204f8a823d26a5de3ca4f1256f71", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c8d98af4f9c204f8a823d26a5de3ca4f1256f71"}], "stats": {"total": 402, "additions": 211, "deletions": 191}, "files": [{"sha": "7f5bd82d9b324b79738d05e320bcd13f5016ad3b", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -1,3 +1,23 @@\n+2015-05-08  Jason Merrill  <jason@redhat.com>\n+\n+\t* bitmap.c, c/c-aux-info.c, cfg.c, cfghooks.c, cgraph.c,\n+\tconfig/aarch64/aarch64.md config/alpha/vms.h, config/darwin.c,\n+\tconfig/darwin.h, config/darwin9.h, config/elfos.h,\n+\tconfig/i386/bsd.h, config/ia64/ia64.c, config/lm32/lm32.h,\n+\tconfig/microblaze/microblaze.h, config/mips/mips.h,\n+\tconfig/mmix/mmix.c, config/msp430/msp430.c, config/nios2/nios2.h,\n+\tconfig/nvptx/nvptx.c, config/nvptx/nvptx.h, config/pa/pa.c,\n+\tconfig/pa/pa.h, config/rs6000/rs6000.c, config/rs6000/sysv4.h,\n+\tconfig/rs6000/xcoff.h, config/rx/rx.h, config/s390/s390.h,\n+\tconfig/sparc/sol2.h, config/sparc/sparc.h, config/visium/visium.h,\n+\tcppbuiltin.c, defaults.h, doc/invoke.texi, dwarf2cfi.c,\n+\tdwarf2out.c, final.c, gcc.c, gcov-dump.c, gcov.c, ipa-cp.c,\n+\tipa-inline.c, ipa-polymorphic-call.c, ipa-profile.c, ipa-prop.c,\n+\tira-color.c, ira.c, loop-doloop.c, loop-iv.c, mcf.c,\n+\tmodulo-sched.c, predict.c, profile.c, stor-layout.c, toplev.c,\n+\ttree-ssa-reassoc.c, value-prof.c, wide-int-print.cc: Add space\n+\tbetween string literal and macro name.\n+\n 2015-05-08  Trevor Saunders  <tbsaunde+gcc@tbsaunde.org>\n \n \t* jump.c: Change argument types to rtx_insn *."}, {"sha": "66066a6859742eeb9aaf959add077da68fbfa274", "filename": "gcc/bitmap.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fbitmap.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fbitmap.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbitmap.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -2170,8 +2170,8 @@ print_statistics (bitmap_descriptor_d **slot, bitmap_output_info *i)\n       sprintf (s, \"%s:%i (%s)\", s1, d->line, d->function);\n       s[41] = 0;\n       fprintf (stderr,\n-\t       \"%-41s %9u %15\"PRId64\" %15\"PRId64\" %15\"PRId64\n-\t       \" %10\"PRId64\" %10\"PRId64\"\\n\",\n+\t       \"%-41s %9u %15\" PRId64\" %15\" PRId64\" %15\" PRId64\n+\t       \" %10\" PRId64\" %10\" PRId64\"\\n\",\n \t       s, d->created,\n \t       d->allocated, d->peak, d->current,\n \t       d->nsearches, d->search_iter);\n@@ -2204,7 +2204,7 @@ dump_bitmap_statistics (void)\n   bitmap_desc_hash->traverse <bitmap_output_info *, print_statistics> (&info);\n   fprintf (stderr, \"---------------------------------------------------------------------------------\\n\");\n   fprintf (stderr,\n-\t   \"%-41s %9\"PRId64\" %15\"PRId64\"\\n\",\n+\t   \"%-41s %9\" PRId64\" %15\" PRId64\"\\n\",\n \t   \"Total\", info.count, info.size);\n   fprintf (stderr, \"---------------------------------------------------------------------------------\\n\");\n }"}, {"sha": "d80418e0b2dace1e535c1c345a7179a387309ca9", "filename": "gcc/c/c-aux-info.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fc%2Fc-aux-info.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fc%2Fc-aux-info.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-aux-info.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -319,7 +319,7 @@ gen_type (const char *ret_val, tree t, formals_style style)\n \t  else\n \t    {\n \t      char buff[23];\n-\t      sprintf (buff, \"[\"HOST_WIDE_INT_PRINT_DEC\"]\",\n+\t      sprintf (buff, \"[\" HOST_WIDE_INT_PRINT_DEC\"]\",\n \t\t       int_size_in_bytes (t)\n \t\t       / int_size_in_bytes (TREE_TYPE (t)));\n \t      ret_val = gen_type (concat (ret_val, buff, NULL),"}, {"sha": "cdcc01c9a1cf0d5b5a0fce63cea6a39ac93fe746", "filename": "gcc/cfg.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fcfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fcfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfg.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -508,7 +508,7 @@ dump_edge_info (FILE *file, edge e, int flags, int do_succ)\n   if (e->count && do_details)\n     {\n       fputs (\" count:\", file);\n-      fprintf (file, \"%\"PRId64, e->count);\n+      fprintf (file, \"%\" PRId64, e->count);\n     }\n \n   if (e->flags && do_details)\n@@ -756,7 +756,7 @@ dump_bb_info (FILE *outf, basic_block bb, int indent, int flags,\n       if (flags & TDF_DETAILS)\n \t{\n \t  struct function *fun = DECL_STRUCT_FUNCTION (current_function_decl);\n-\t  fprintf (outf, \", count \" \"%\"PRId64,\n+\t  fprintf (outf, \", count \" \"%\" PRId64,\n \t\t   (int64_t) bb->count);\n \t  fprintf (outf, \", freq %i\", bb->frequency);\n \t  if (maybe_hot_bb_p (fun, bb))"}, {"sha": "02fc1ae649f04d932ab8165211ab5c494cf3f9ab", "filename": "gcc/cfghooks.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fcfghooks.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fcfghooks.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfghooks.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -330,7 +330,7 @@ dump_bb_for_graph (pretty_printer *pp, basic_block bb)\n     internal_error (\"%s does not support dump_bb_for_graph\",\n \t\t    cfg_hooks->name);\n   if (bb->count)\n-    pp_printf (pp, \"COUNT:\" \"%\"PRId64, bb->count);\n+    pp_printf (pp, \"COUNT:\" \"%\" PRId64, bb->count);\n   pp_printf (pp, \" FREQ:%i |\", bb->frequency);\n   pp_write_text_to_stream (pp);\n   if (!(dump_flags & TDF_SLIM))"}, {"sha": "dc7d3a74e1fa5e05d7e503c6c98f77c4b04e5503", "filename": "gcc/cgraph.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fcgraph.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fcgraph.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraph.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -1325,7 +1325,7 @@ cgraph_edge::redirect_call_stmt_to_callee (void)\n \t  if (dump_file)\n \t    fprintf (dump_file,\n \t\t     \"Expanding speculative call of %s/%i -> %s/%i count:\"\n-\t\t     \"%\"PRId64\"\\n\",\n+\t\t     \"%\" PRId64\"\\n\",\n \t\t     xstrdup_for_dump (e->caller->name ()),\n \t\t     e->caller->order,\n \t\t     xstrdup_for_dump (e->callee->name ()),\n@@ -1943,7 +1943,7 @@ cgraph_edge::dump_edge_flags (FILE *f)\n   if (indirect_inlining_edge)\n     fprintf (f, \"(indirect_inlining) \");\n   if (count)\n-    fprintf (f, \"(%\"PRId64\"x) \", (int64_t)count);\n+    fprintf (f, \"(%\" PRId64\"x) \", (int64_t)count);\n   if (frequency)\n     fprintf (f, \"(%.2f per call) \", frequency / (double)CGRAPH_FREQ_BASE);\n   if (can_throw_external)\n@@ -1979,7 +1979,7 @@ cgraph_node::dump (FILE *f)\n   fprintf (f, \"  First run: %i\\n\", tp_first_run);\n   fprintf (f, \"  Function flags:\");\n   if (count)\n-    fprintf (f, \" executed %\"PRId64\"x\",\n+    fprintf (f, \" executed %\" PRId64\"x\",\n \t     (int64_t)count);\n   if (origin)\n     fprintf (f, \" nested in: %s\", origin->asm_name ());"}, {"sha": "1dbadc0c5a45e809033b2570c498984873e75240", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -531,7 +531,7 @@\n \tchar buf[64];\n \tuint64_t val = ((uint64_t ) 1)\n \t\t\t<< (GET_MODE_SIZE (<MODE>mode) * BITS_PER_UNIT - 1);\n-\tsprintf (buf, \"tst\\t%%<w>0, %\"PRId64, val);\n+\tsprintf (buf, \"tst\\t%%<w>0, %\" PRId64, val);\n \toutput_asm_insn (buf, operands);\n \treturn \"<bcond>\\t%l1\";\n       }"}, {"sha": "884b41fd00b43b00e27da9eb6bbcb86442800ab2", "filename": "gcc/config/alpha/vms.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Falpha%2Fvms.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Falpha%2Fvms.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Falpha%2Fvms.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -219,15 +219,15 @@ typedef struct {int num_args; enum avms_arg_type atypes[6];} avms_arg_info;\n /* This is how to advance the location counter by SIZE bytes.  */\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.space \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.space \" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE,ROUNDED)\t\\\n ( fputs (\"\\t.lcomm \", (FILE)),\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\\\n-  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE)))\n+  fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE)))\n \n /* Switch into a generic section.  */\n #define TARGET_ASM_NAMED_SECTION vms_asm_named_section"}, {"sha": "5ea7088478af2de6735e622c9adfda8b4ecdeb63", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -2251,7 +2251,7 @@ fprintf (file, \"# dadon: %s %s (%llu, %u) local %d weak %d\"\n \n       ASM_OUTPUT_LABEL (file, xname);\n       size = 1;\n-      fprintf (file, \"\\t.space\\t\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n+      fprintf (file, \"\\t.space\\t\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n \n       /* Check that we've correctly picked up the zero-sized item and placed it\n          properly.  */\n@@ -2392,7 +2392,7 @@ darwin_emit_local_bss (FILE *fp, tree decl, const char *name,\n \tfprintf (fp, \"\\t.align\\t%u\\n\", l2align);\n \n       assemble_name (fp, name);        \n-      fprintf (fp, \":\\n\\t.space\\t\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n+      fprintf (fp, \":\\n\\t.space\\t\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n     }\n   else \n     {\n@@ -2413,10 +2413,10 @@ darwin_emit_local_bss (FILE *fp, tree decl, const char *name,\n \tsize = 1;\n \n       if (l2align)\n-\tfprintf (fp, \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\n+\tfprintf (fp, \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\n \t\t size, (unsigned) l2align);\n       else\n-\tfprintf (fp, \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n+\tfprintf (fp, \",\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n     }\n \n   (*targetm.encode_section_info) (decl, DECL_RTL (decl), false);\n@@ -2564,7 +2564,7 @@ fprintf (fp, \"# albss: %s (%lld,%d) ro %d cst %d stat %d com %d\"\n \tfprintf (fp, \"\\t.align\\t%u\\n\", l2align);\n \n       assemble_name (fp, name);\n-      fprintf (fp, \":\\n\\t.space\\t\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n+      fprintf (fp, \":\\n\\t.space\\t\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n     }\n   else \n     {\n@@ -2585,9 +2585,9 @@ fprintf (fp, \"# albss: %s (%lld,%d) ro %d cst %d stat %d com %d\"\n \tsize = 1;\n \n       if (l2align)\n-\tfprintf (fp, \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\", size, l2align);\n+\tfprintf (fp, \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\", size, l2align);\n       else\n-\tfprintf (fp, \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n+\tfprintf (fp, \",\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n     }\n   (* targetm.encode_section_info) (decl, DECL_RTL (decl), false);\n }"}, {"sha": "66f504ed35160285b14b5c3c3061f4b5355f6009", "filename": "gcc/config/darwin.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fdarwin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fdarwin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -532,7 +532,7 @@ extern GTY(()) int darwin_ms_struct;\n #define TARGET_ASM_LTO_END darwin_asm_lto_end\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.space \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", SIZE)\n+  fprintf (FILE, \"\\t.space \" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", SIZE)\n \n /* Give ObjC methods pretty symbol names.  */\n "}, {"sha": "4204825708e20d7c49b39ab71880cba82848d7ff", "filename": "gcc/config/darwin9.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fdarwin9.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fdarwin9.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin9.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -54,7 +54,7 @@ along with GCC; see the file COPYING3.  If not see\n     fprintf ((FILE), \"\\t.comm \");\t\t\t\t\t\t\\\n     assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n     if (_new_size == 0) _new_size = 1;\t\t\t\t\t\\\n-    fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n+    fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n \t     _new_size, floor_log2 ((ALIGN) / BITS_PER_UNIT));\t\t\\\n   } while (0)\n "}, {"sha": "bcc3870d93cf60a1e642c0c922c93b24dad3b2a6", "filename": "gcc/config/elfos.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Felfos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Felfos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Felfos.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -99,7 +99,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n \n #undef  ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n-   fprintf ((FILE), \"%s\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\\\n+   fprintf ((FILE), \"%s\" HOST_WIDE_INT_PRINT_UNSIGNED \"\\n\",\\\n \t    SKIP_ASM_OP, (SIZE))\n \n /* This is how to store into the string LABEL\n@@ -167,7 +167,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n     {\t\t\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n+      fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED \",%u\\n\",\t\t\\\n \t       (SIZE), (ALIGN) / BITS_PER_UNIT);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "2c2c08545b78b63cbf06367f5b5ccb5344c0cf6a", "filename": "gcc/config/i386/bsd.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fi386%2Fbsd.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fi386%2Fbsd.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fbsd.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -46,7 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n    that says to advance the location counter by SIZE bytes.  */\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.space \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.space \" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n \f\n /* Define the syntax of labels and symbol definitions/declarations.  */\n "}, {"sha": "380088e28f7979554557120f8cee08de888cdc88", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -858,7 +858,7 @@ ia64_vms_output_aligned_decl_common (FILE *file, tree decl, const char *name,\n \n   /*  Code from elfos.h.  */\n   assemble_name (file, name);\n-  fprintf (file, \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\",\n+  fprintf (file, \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\",\n            size, align / BITS_PER_UNIT);\n \n   fputc ('\\n', file);\n@@ -10018,7 +10018,7 @@ process_cfa_adjust_cfa (FILE *asm_out_file, rtx pat, rtx insn,\n \t      gcc_assert (!frame_pointer_needed);\n \t      if (unwind)\n \t\tfprintf (asm_out_file,\n-\t\t\t \"\\t.fframe \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n+\t\t\t \"\\t.fframe \" HOST_WIDE_INT_PRINT_DEC\"\\n\",\n \t\t\t -INTVAL (op1));\n \t    }\n \t  else"}, {"sha": "d2847035237cf21d22746c7c6f1b98ae093c84e6", "filename": "gcc/config/lm32/lm32.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Flm32%2Flm32.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Flm32%2Flm32.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Flm32%2Flm32.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -437,7 +437,7 @@ do \t\t\t\t\t\t\t\t\t\\\n       switch_to_section (bss_section);\t\t\t\t\t\\\n       fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",          \\\n+      fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",          \\\n                (SIZE), (ALIGN) / BITS_PER_UNIT);\t                \\\n     }\t\t\t\t\t\t\t\t\t\\\n }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "fa538485bcb7e1df13a93e81a9afceb42c003422", "filename": "gcc/config/microblaze/microblaze.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmicroblaze%2Fmicroblaze.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -657,7 +657,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }                                                                   \\\n   fprintf (FILE, \"%s\", COMMON_ASM_OP);                                  \\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n+  fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n            (SIZE), (ALIGN) / BITS_PER_UNIT);                            \\\n   ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\\n } while (0)\n@@ -677,7 +677,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n     }                                                                   \\\n   fprintf (FILE, \"%s\", LCOMMON_ASM_OP);                                 \\\n   assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n+  fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n            (SIZE), (ALIGN) / BITS_PER_UNIT);                            \\\n   ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\\n } while (0)"}, {"sha": "0ea4e6db693524ba72b91b5d69a3c73f7a6968be", "filename": "gcc/config/mips/mips.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fmips%2Fmips.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fmips%2Fmips.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmips%2Fmips.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -2910,7 +2910,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n #undef ASM_OUTPUT_SKIP\n #define ASM_OUTPUT_SKIP(STREAM,SIZE)\t\t\t\t\t\\\n-  fprintf (STREAM, \"\\t.space\\t\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n+  fprintf (STREAM, \"\\t.space\\t\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n \n /* This is how to output a string.  */\n #undef ASM_OUTPUT_ASCII"}, {"sha": "6e991207dbc09ca24d53bc19846fc8bd996c2b17", "filename": "gcc/config/mmix/mmix.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fmmix%2Fmmix.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmmix%2Fmmix.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -1654,7 +1654,7 @@ mmix_print_operand (FILE *stream, rtx x, int code)\n \t  fatal_insn (\"MMIX Internal: Bad value for 'm', not a CONST_INT\",\n \t\t      x);\n \t}\n-      fprintf (stream, \"%\"PRId64,\n+      fprintf (stream, \"%\" PRId64,\n \t       (int64_t) (mmix_intval (x) - 1));\n       return;\n \n@@ -2326,7 +2326,7 @@ mmix_output_register_setting (FILE *stream,\n     fprintf (stream, \"\\t\");\n \n   if (insn_const_int_ok_for_constraint (value, CONSTRAINT_K))\n-    fprintf (stream, \"NEGU %s,0,%\"PRId64, reg_names[regno], -value);\n+    fprintf (stream, \"NEGU %s,0,%\" PRId64, reg_names[regno], -value);\n   else if (mmix_shiftable_wyde_value ((uint64_t) value))\n     {\n       /* First, the one-insn cases.  */"}, {"sha": "bec168ca2ae22ac5e3f564ade07d4aa27b29f6c1", "filename": "gcc/config/msp430/msp430.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fmsp430%2Fmsp430.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmsp430%2Fmsp430.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -1696,7 +1696,7 @@ msp430_output_aligned_decl_common (FILE *                 stream,\n     {\n       fprintf (stream, COMMON_ASM_OP);\n       assemble_name (stream, name);\n-      fprintf (stream, \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\n+      fprintf (stream, \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\n \t       size, align / BITS_PER_UNIT);\n     }\n   else"}, {"sha": "510ab5fc7fe50593161587031151e760b497bc46", "filename": "gcc/config/nios2/nios2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fnios2%2Fnios2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fnios2%2Fnios2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnios2%2Fnios2.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -435,7 +435,7 @@ do                                                                      \\\n   {\t\t\t\t\t\t\t\t\t\\\n     fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n     assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-    fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\", (SIZE),\t\\\n+    fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\", (SIZE),\t\\\n \t     (ALIGN) / BITS_PER_UNIT);\t\t\t\t\t\\\n   }\t\t\t\t\t\t\t\t\t\\\n while (0)"}, {"sha": "e7fc66631aa6fdb8a5ece2a7a23136e837d962a9", "filename": "gcc/config/nvptx/nvptx.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fnvptx%2Fnvptx.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -600,7 +600,7 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n     sz = 1;\n   if (cfun->machine->has_call_with_varargs)\n     fprintf (file, \"\\t.reg.u%d %%outargs;\\n\"\n-\t     \"\\t.local.align 8 .b8 %%outargs_ar[\"HOST_WIDE_INT_PRINT_DEC\"];\\n\",\n+\t     \"\\t.local.align 8 .b8 %%outargs_ar[\" HOST_WIDE_INT_PRINT_DEC\"];\\n\",\n \t     BITS_PER_WORD, sz);\n   if (cfun->machine->punning_buffer_size > 0)\n     fprintf (file, \"\\t.reg.u%d %%punbuffer;\\n\"\n@@ -612,7 +612,7 @@ nvptx_declare_function_name (FILE *file, const char *name, const_tree decl)\n   if (sz > 0 || cfun->machine->has_call_with_sc)\n     {\n       fprintf (file, \"\\t.reg.u%d %%frame;\\n\"\n-\t       \"\\t.local.align 8 .b8 %%farray[\"HOST_WIDE_INT_PRINT_DEC\"];\\n\",\n+\t       \"\\t.local.align 8 .b8 %%farray[\" HOST_WIDE_INT_PRINT_DEC\"];\\n\",\n \t       BITS_PER_WORD, sz == 0 ? 1 : sz);\n       fprintf (file, \"\\tcvta.local.u%d %%frame, %%farray;\\n\",\n \t       BITS_PER_WORD);\n@@ -1472,7 +1472,7 @@ nvptx_assemble_undefined_decl (FILE *file, const char *name, const_tree decl)\n   fprintf (file, \".extern %s .b8 \", section);\n   assemble_name_raw (file, name);\n   if (size > 0)\n-    fprintf (file, \"[\"HOST_WIDE_INT_PRINT_DEC\"]\", size);\n+    fprintf (file, \"[\" HOST_WIDE_INT_PRINT_DEC\"]\", size);\n   fprintf (file, \";\\n\\n\");\n }\n "}, {"sha": "88359062a33ccb447298a451dffbe33070bc3e76", "filename": "gcc/config/nvptx/nvptx.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fnvptx%2Fnvptx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fnvptx%2Fnvptx.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -317,7 +317,7 @@ struct GTY(()) machine_function\n \t       (ALIGN) / BITS_PER_UNIT);\t\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n       if ((SIZE) > 0)\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"[\"HOST_WIDE_INT_PRINT_DEC\"]\", (SIZE));\t\t\\\n+\tfprintf (FILE, \"[\" HOST_WIDE_INT_PRINT_DEC\"]\", (SIZE));\t\t\\\n       fprintf (FILE, \";\\n\");\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)\n@@ -334,7 +334,7 @@ struct GTY(()) machine_function\n \t       (ALIGN) / BITS_PER_UNIT);\t\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n       if ((SIZE) > 0)\t\t\t\t\t\t\t\\\n-\tfprintf (FILE, \"[\"HOST_WIDE_INT_PRINT_DEC\"]\", (SIZE));\t\t\\\n+\tfprintf (FILE, \"[\" HOST_WIDE_INT_PRINT_DEC\"]\", (SIZE));\t\t\\\n       fprintf (FILE, \";\\n\");\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "cfdafa69c270173f6dbaee2c98da9eb15f59963b", "filename": "gcc/config/pa/pa.c", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fpa%2Fpa.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fpa%2Fpa.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -8612,7 +8612,7 @@ pa_asm_output_aligned_bss (FILE *stream,\n \n   fprintf (stream, \"\\t.align %u\\n\", align / BITS_PER_UNIT);\n   ASM_OUTPUT_LABEL (stream, name);\n-  fprintf (stream, \"\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n+  fprintf (stream, \"\\t.block \" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n }\n \n /* Both the HP and GNU assemblers under HP-UX provide a .comm directive\n@@ -8642,7 +8642,7 @@ pa_asm_output_aligned_common (FILE *stream,\n   switch_to_section (bss_section);\n \n   assemble_name (stream, name);\n-  fprintf (stream, \"\\t.comm \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\n+  fprintf (stream, \"\\t.comm \" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\n            MAX (size, align / BITS_PER_UNIT));\n }\n \n@@ -8669,7 +8669,7 @@ pa_asm_output_aligned_local (FILE *stream,\n #endif\n \n   ASM_OUTPUT_LABEL (stream, name);\n-  fprintf (stream, \"\\t.block \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n+  fprintf (stream, \"\\t.block \" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", size);\n }\n \n /* Returns 1 if the 6 operands specified in OPERANDS are suitable for"}, {"sha": "4259a07d1ebb905c4523d4443d25e58f31acc97f", "filename": "gcc/config/pa/pa.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fpa%2Fpa.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fpa%2Fpa.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fpa%2Fpa.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -1210,7 +1210,7 @@ do {\t\t\t\t\t\t\t\t\t     \\\n     fprintf (FILE, \"\\t.align %d\\n\", (1<<(LOG)))\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.blockz \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\t\\\n+  fprintf (FILE, \"\\t.blockz \" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\t\t\\\n \t   (unsigned HOST_WIDE_INT)(SIZE))\n \n /* This says how to output an assembler line to define an uninitialized"}, {"sha": "98180367a64098b43e0d07eed2cf3e31df247fbf", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -11316,8 +11316,8 @@ rs6000_va_start (tree valist, rtx nextarg)\n \t       FP_ARG_NUM_REG);\n \n   if (TARGET_DEBUG_ARG)\n-    fprintf (stderr, \"va_start: words = \"HOST_WIDE_INT_PRINT_DEC\", n_gpr = \"\n-\t     HOST_WIDE_INT_PRINT_DEC\", n_fpr = \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n+    fprintf (stderr, \"va_start: words = \" HOST_WIDE_INT_PRINT_DEC\", n_gpr = \"\n+\t     HOST_WIDE_INT_PRINT_DEC\", n_fpr = \" HOST_WIDE_INT_PRINT_DEC\"\\n\",\n \t     words, n_gpr, n_fpr);\n \n   if (cfun->va_list_gpr_size)\n@@ -22161,11 +22161,11 @@ debug_stack_info (rs6000_stack_t *info)\n     fprintf (stderr, \"\\tvarargs_save_offset = %5d\\n\", info->varargs_save_offset);\n \n   if (info->total_size)\n-    fprintf (stderr, \"\\ttotal_size          = \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n+    fprintf (stderr, \"\\ttotal_size          = \" HOST_WIDE_INT_PRINT_DEC\"\\n\",\n \t     info->total_size);\n \n   if (info->vars_size)\n-    fprintf (stderr, \"\\tvars_size           = \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n+    fprintf (stderr, \"\\tvars_size           = \" HOST_WIDE_INT_PRINT_DEC\"\\n\",\n \t     info->vars_size);\n \n   if (info->parm_size)"}, {"sha": "41ed4eff0662fea6c6d78ace4c2ec67c6401a8e3", "filename": "gcc/config/rs6000/sysv4.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Frs6000%2Fsysv4.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fsysv4.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -408,7 +408,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n     {\t\t\t\t\t\t\t\t\t\\\n       fprintf (FILE, \"%s\", LCOMM_ASM_OP);\t\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n+      fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n \t       (SIZE), (ALIGN) / BITS_PER_UNIT);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   ASM_OUTPUT_TYPE_DIRECTIVE (FILE, NAME, \"object\");\t\t\t\\"}, {"sha": "0bfe9d91ce548f40290418250f74c4ba64f79d69", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -208,7 +208,7 @@\n #define SKIP_ASM_OP \"\\t.space \"\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"%s\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", SKIP_ASM_OP, (SIZE))\n+  fprintf (FILE, \"%s\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", SKIP_ASM_OP, (SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n@@ -219,12 +219,12 @@\n   do { fputs (COMMON_ASM_OP, (FILE));\t\t\t\\\n        RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n        if ((ALIGN) > 32)\t\t\t\t\\\n-\t fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\", (SIZE), \\\n+\t fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\", (SIZE), \\\n \t\t  floor_log2 ((ALIGN) / BITS_PER_UNIT)); \\\n        else if ((SIZE) > 4)\t\t\t\t\\\n-         fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",3\\n\", (SIZE)); \\\n+         fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",3\\n\", (SIZE)); \\\n        else\t\t\t\t\t\t\\\n-\t fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE)); \\\n+\t fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE)); \\\n   } while (0)\n \n /* This says how to output an assembler line\n@@ -241,23 +241,23 @@\n   do { fputs (LOCAL_COMMON_ASM_OP, (FILE));\t\t\t\\\n        RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\t\\\n        if ((ALIGN) > 32)\t\t\t\t\t\\\n-\t fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%s%u_,%u\\n\",\t\\\n+\t fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%s%u_,%u\\n\",\t\\\n \t\t  (SIZE), xcoff_bss_section_name,\t\t\t\\\n \t\t  floor_log2 ((ALIGN) / BITS_PER_UNIT),\t\t\t\\\n \t\t  floor_log2 ((ALIGN) / BITS_PER_UNIT));\t\t\\\n        else if ((SIZE) > 4)\t\t\t\t\t\\\n-\t fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%s3_,3\\n\",\t\\\n+\t fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%s3_,3\\n\",\t\\\n \t\t  (SIZE), xcoff_bss_section_name);\t\t\\\n        else\t\t\t\t\t\t\t\\\n-\t fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%s,2\\n\",\t\\\n+\t fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%s,2\\n\",\t\\\n \t\t  (SIZE), xcoff_bss_section_name);\t\t\\\n      } while (0)\n #endif\n \n #define ASM_OUTPUT_LOCAL(FILE, NAME, SIZE, ROUNDED)\t\\\n   do { fputs (LOCAL_COMMON_ASM_OP, (FILE));\t\t\\\n        RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n-       fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%s\\n\", \\\n+       fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%s\\n\", \\\n \t\t(TARGET_32BIT ? (SIZE) : (ROUNDED)),\t\\\n \t\txcoff_bss_section_name);\t\t\\\n      } while (0)\n@@ -266,7 +266,7 @@\n #define ASM_OUTPUT_TLS_COMMON(FILE, DECL, NAME, SIZE)\t\\\n   do { fputs(COMMON_ASM_OP, (FILE));\t\t\t\\\n        RS6000_OUTPUT_BASENAME ((FILE), (NAME));\t\t\\\n-       fprintf ((FILE), \"[UL],\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", \\\n+       fprintf ((FILE), \"[UL],\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", \\\n        (SIZE));\t\t\t\t\t\t\\\n   } while (0)\n #endif"}, {"sha": "8391b5b25b0ee3e0b3690c2908f77385344acda0", "filename": "gcc/config/rx/rx.h", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Frx%2Frx.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Frx%2Frx.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frx%2Frx.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -562,15 +562,15 @@ typedef unsigned int CUMULATIVE_ARGS;\n \t  switch ((ALIGN) / BITS_PER_UNIT)\t\t\t\t\\\n             {\t\t\t\t\t\t\t\t\\\n             case 4:\t\t\t\t\t\t\t\\\n-              fprintf ((FILE), \":\\t.BLKL\\t\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\\\n+              fprintf ((FILE), \":\\t.BLKL\\t\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\\\n \t\t       (SIZE) / 4);\t\t\t\t\t\\\n \t      break;\t\t\t\t\t\t\t\\\n             case 2:\t\t\t\t\t\t\t\\\n-              fprintf ((FILE), \":\\t.BLKW\\t\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\\\n+              fprintf ((FILE), \":\\t.BLKW\\t\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\\\n \t\t       (SIZE) / 2);\t\t\t\t\t\\\n \t      break;\t\t\t\t\t\t\t\\\n             default:\t\t\t\t\t\t\t\\\n-              fprintf ((FILE), \":\\t.BLKB\\t\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\\\n+              fprintf ((FILE), \":\\t.BLKB\\t\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\",\\\n \t\t       (SIZE));\t\t\t\t\t\t\\\n \t      break;\t\t\t\t\t\t\t\\\n             }\t\t\t\t\t\t\t\t\\\n@@ -579,7 +579,7 @@ typedef unsigned int CUMULATIVE_ARGS;\n         {\t\t\t\t\t\t\t\t\\\n           fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\\\n           assemble_name ((FILE), (NAME));\t\t\t\t\\\n-          fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\\\n+          fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\\\n \t           (SIZE), (ALIGN) / BITS_PER_UNIT);\t\t\t\\\n \t}\t\t\t\t\t\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\"}, {"sha": "2984aa1c98c16a88d527797b88a54a394431977e", "filename": "gcc/config/s390/s390.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fs390%2Fs390.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fs390%2Fs390.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -807,7 +807,7 @@ do {\t\t\t\t\t\t\t\t\t\\\n \n /* Advance the location counter by SIZE bytes.  */\n #define ASM_OUTPUT_SKIP(FILE, SIZE) \\\n-  fprintf ((FILE), \"\\t.set\\t.,.+\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n+  fprintf ((FILE), \"\\t.set\\t.,.+\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n \n /* The LOCAL_LABEL_PREFIX variable is used by dbxelf.h.  */\n #define LOCAL_LABEL_PREFIX \".\""}, {"sha": "c169e7c69aa9e6f3e5f7fcec7afc8c0659f6ee9f", "filename": "gcc/config/sparc/sol2.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fsparc%2Fsol2.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fsparc%2Fsol2.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsol2.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -359,7 +359,7 @@ extern const char *host_detect_local_cpu (int argc, const char **argv);\n \tswitch_to_section (bss_section);\t\t\t\t\\\n       fprintf ((FILE), \"%s\", COMMON_ASM_OP);\t\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n+      fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n \t       (SIZE), (ALIGN) / BITS_PER_UNIT);\t\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "2fae9e88dbcc49f5f1122bda1a1ef0f91f14c729", "filename": "gcc/config/sparc/sparc.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fsparc%2Fsparc.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fsparc%2Fsparc.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsparc%2Fsparc.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -1694,23 +1694,23 @@ do {\t\t\t\t\t\t\t\t\t\\\n     fprintf (FILE, \"\\t.align %d\\n\", (1<<(LOG)))\n \n #define ASM_OUTPUT_SKIP(FILE,SIZE)  \\\n-  fprintf (FILE, \"\\t.skip \"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n+  fprintf (FILE, \"\\t.skip \" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", (SIZE))\n \n /* This says how to output an assembler line\n    to define a global common symbol.  */\n \n #define ASM_OUTPUT_COMMON(FILE, NAME, SIZE, ROUNDED)  \\\n ( fputs (\"\\t.common \", (FILE)),\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\\\n-  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",\\\"bss\\\"\\n\", (SIZE)))\n+  fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",\\\"bss\\\"\\n\", (SIZE)))\n \n /* This says how to output an assembler line to define a local common\n    symbol.  */\n \n #define ASM_OUTPUT_ALIGNED_LOCAL(FILE, NAME, SIZE, ALIGNED)\t\t\\\n ( fputs (\"\\t.reserve \", (FILE)),\t\t\t\t\t\\\n   assemble_name ((FILE), (NAME)),\t\t\t\t\t\\\n-  fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",\\\"bss\\\",%u\\n\",\t\\\n+  fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",\\\"bss\\\",%u\\n\",\t\\\n \t   (SIZE), ((ALIGNED) / BITS_PER_UNIT)))\n \n /* A C statement (sans semicolon) to output to the stdio stream"}, {"sha": "a2ab61c540b2b02e527e15a965236c44c4ff24e6", "filename": "gcc/config/visium/visium.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fvisium%2Fvisium.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fconfig%2Fvisium%2Fvisium.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fvisium%2Fvisium.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -1715,14 +1715,14 @@ do\t\t\t\t\t\t\t\t\t\\\n #define ASM_OUTPUT_COMMON(STREAM, NAME, SIZE, ROUNDED)      \\\n ( fputs (\"\\n\\t.comm  \", (STREAM)),                        \\\n   assemble_name ((STREAM), (NAME)),                         \\\n-  fprintf ((STREAM), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", ROUNDED))\n+  fprintf ((STREAM), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", ROUNDED))\n \n /* This says how to output assembler code to declare an\n    unitialised internal linkage data object. */\n #define ASM_OUTPUT_LOCAL(STREAM, NAME, SIZE, ROUNDED)     \\\n ( fputs (\"\\n\\t.lcomm \", (STREAM)),                      \\\n   assemble_name ((STREAM), (NAME)),                     \\\n-  fprintf ((STREAM), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", ROUNDED))\n+  fprintf ((STREAM), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\"\\n\", ROUNDED))\n \n /* Prettify the assembly.  */\n extern int visium_indent_opcode;"}, {"sha": "d9e9ab4003090d8d352d2a68d1115f02d9a40430", "filename": "gcc/cppbuiltin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fcppbuiltin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fcppbuiltin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcppbuiltin.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -143,7 +143,7 @@ static void\n define_builtin_macros_for_type_sizes (cpp_reader *pfile)\n {\n #define define_type_sizeof(NAME, TYPE)                             \\\n-    cpp_define_formatted (pfile, NAME\"=\"HOST_WIDE_INT_PRINT_DEC,   \\\n+    cpp_define_formatted (pfile, NAME\"=\" HOST_WIDE_INT_PRINT_DEC,   \\\n                           tree_to_uhwi (TYPE_SIZE_UNIT (TYPE)))\n \n   define_type_sizeof (\"__SIZEOF_INT__\", integer_type_node);"}, {"sha": "b3edcc9eff6de062537725be31f614ebee0806e8", "filename": "gcc/defaults.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fdefaults.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fdefaults.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdefaults.h?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -123,7 +123,7 @@ see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see\n     {\t\t\t\t\t\t\t\t\t\\\n       fprintf ((FILE), \"\\t%s\\t\", TLS_COMMON_ASM_OP);\t\t\t\\\n       assemble_name ((FILE), (NAME));\t\t\t\t\t\\\n-      fprintf ((FILE), \",\"HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n+      fprintf ((FILE), \",\" HOST_WIDE_INT_PRINT_UNSIGNED\",%u\\n\",\t\t\\\n \t       (SIZE), DECL_ALIGN (DECL) / BITS_PER_UNIT);\t\t\\\n     }\t\t\t\t\t\t\t\t\t\\\n   while (0)"}, {"sha": "c332f884b92fe8c74e67eeb4ca8b9d2f80c90ece", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -2689,7 +2689,7 @@ For example:\n \n int main() @{\n   int64_t i64 = 123;\n-  printf(\"My int64: %\"PRId64\"\\n\", i64);\n+  printf(\"My int64: %\" PRId64\"\\n\", i64);\n @}\n @end smallexample\n "}, {"sha": "7b5cecda1c2495ded645be67bac48360b3df0709", "filename": "gcc/dwarf2cfi.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fdwarf2cfi.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fdwarf2cfi.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2cfi.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -3260,7 +3260,7 @@ output_cfi_directive (FILE *f, dw_cfi_ref cfi)\n     case DW_CFA_offset_extended:\n     case DW_CFA_offset_extended_sf:\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, 1);\n-      fprintf (f, \"\\t.cfi_offset %lu, \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n+      fprintf (f, \"\\t.cfi_offset %lu, \" HOST_WIDE_INT_PRINT_DEC\"\\n\",\n \t       r, cfi->dw_cfi_oprnd2.dw_cfi_offset);\n       break;\n \n@@ -3283,7 +3283,7 @@ output_cfi_directive (FILE *f, dw_cfi_ref cfi)\n     case DW_CFA_def_cfa:\n     case DW_CFA_def_cfa_sf:\n       r = DWARF2_FRAME_REG_OUT (cfi->dw_cfi_oprnd1.dw_cfi_reg_num, 1);\n-      fprintf (f, \"\\t.cfi_def_cfa %lu, \"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n+      fprintf (f, \"\\t.cfi_def_cfa %lu, \" HOST_WIDE_INT_PRINT_DEC\"\\n\",\n \t       r, cfi->dw_cfi_oprnd2.dw_cfi_offset);\n       break;\n \n@@ -3318,13 +3318,13 @@ output_cfi_directive (FILE *f, dw_cfi_ref cfi)\n \t  fprintf (f, \"\\t.cfi_escape %#x,\", DW_CFA_GNU_args_size);\n \t  dw2_asm_output_data_uleb128_raw (cfi->dw_cfi_oprnd1.dw_cfi_offset);\n \t  if (flag_debug_asm)\n-\t    fprintf (f, \"\\t%s args_size \"HOST_WIDE_INT_PRINT_DEC,\n+\t    fprintf (f, \"\\t%s args_size \" HOST_WIDE_INT_PRINT_DEC,\n \t\t     ASM_COMMENT_START, cfi->dw_cfi_oprnd1.dw_cfi_offset);\n \t  fputc ('\\n', f);\n \t}\n       else\n \t{\n-\t  fprintf (f, \"\\t.cfi_GNU_args_size \"HOST_WIDE_INT_PRINT_DEC \"\\n\",\n+\t  fprintf (f, \"\\t.cfi_GNU_args_size \" HOST_WIDE_INT_PRINT_DEC \"\\n\",\n \t\t   cfi->dw_cfi_oprnd1.dw_cfi_offset);\n \t}\n       break;"}, {"sha": "a1394efd3d32690e1caa19e3808c599be1d3fdd6", "filename": "gcc/dwarf2out.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fdwarf2out.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fdwarf2out.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdwarf2out.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -5446,7 +5446,7 @@ print_dw_val (dw_val_node *val, bool recurse, FILE *outfile)\n       fprintf (outfile, HOST_WIDE_INT_PRINT_UNSIGNED, val->v.val_unsigned);\n       break;\n     case dw_val_class_const_double:\n-      fprintf (outfile, \"constant (\"HOST_WIDE_INT_PRINT_DEC\",\"\\\n+      fprintf (outfile, \"constant (\" HOST_WIDE_INT_PRINT_DEC\",\"\\\n \t\t\tHOST_WIDE_INT_PRINT_UNSIGNED\")\",\n \t       val->v.val_double.high,\n \t       val->v.val_double.low);"}, {"sha": "0c91095bae434cd1a8add162ec21d53109bf99ef", "filename": "gcc/final.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -1987,7 +1987,7 @@ dump_basic_block_info (FILE *file, rtx_insn *insn, basic_block *start_to_bb,\n       if (bb->frequency)\n         fprintf (file, \" freq:%d\", bb->frequency);\n       if (bb->count)\n-        fprintf (file, \" count:%\"PRId64,\n+        fprintf (file, \" count:%\" PRId64,\n                  bb->count);\n       fprintf (file, \" seq:%d\", (*bb_seqn)++);\n       fprintf (file, \"\\n%s PRED:\", ASM_COMMENT_START);"}, {"sha": "8f01e4202b04dc797d81257ecaada1d3bcbee4d0", "filename": "gcc/gcc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -771,12 +771,12 @@ proper position among the other output files.  */\n #define PLUGIN_COND_CLOSE \"\"\n #endif\n #define LINK_PLUGIN_SPEC \\\n-    \"%{\"PLUGIN_COND\": \\\n+    \"%{\" PLUGIN_COND\": \\\n     -plugin %(linker_plugin_file) \\\n     -plugin-opt=%(lto_wrapper) \\\n     -plugin-opt=-fresolution=%u.res \\\n     %{!nostdlib:%{!nodefaultlibs:%:pass-through-libs(%(link_gcc_c_sequence))}} \\\n-    }\"PLUGIN_COND_CLOSE\n+    }\" PLUGIN_COND_CLOSE\n #else\n /* The linker used doesn't support -plugin, reject -fuse-linker-plugin.  */\n #define LINK_PLUGIN_SPEC \"%{fuse-linker-plugin:\\"}, {"sha": "d72a17fd1582c4ee48d6e39c99204e1ba28bee23", "filename": "gcc/gcov-dump.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fgcov-dump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fgcov-dump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov-dump.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -448,7 +448,7 @@ tag_counters (const char *filename ATTRIBUTE_UNUSED,\n \n \t  count = gcov_read_counter ();\n \t  printf (\" \");\n-\t  printf (\"%\"PRId64, count);\n+\t  printf (\"%\" PRId64, count);\n \t}\n     }\n }\n@@ -471,11 +471,11 @@ tag_summary (const char *filename ATTRIBUTE_UNUSED,\n       printf (\"\\t\\tcounts=%u, runs=%u\",\n \t      summary.ctrs[ix].num, summary.ctrs[ix].runs);\n \n-      printf (\", sum_all=%\"PRId64,\n+      printf (\", sum_all=%\" PRId64,\n \t      (int64_t)summary.ctrs[ix].sum_all);\n-      printf (\", run_max=%\"PRId64,\n+      printf (\", run_max=%\" PRId64,\n \t      (int64_t)summary.ctrs[ix].run_max);\n-      printf (\", sum_max=%\"PRId64,\n+      printf (\", sum_max=%\" PRId64,\n \t      (int64_t)summary.ctrs[ix].sum_max);\n       if (ix != GCOV_COUNTER_ARCS)\n         continue;\n@@ -490,8 +490,8 @@ tag_summary (const char *filename ATTRIBUTE_UNUSED,\n           printf (\"\\n\");\n           print_prefix (filename, 0, 0);\n           printf (\"\\t\\t%d: num counts=%u, min counter=\"\n-              \"%\"PRId64 \", cum_counter=\"\n-              \"%\"PRId64,\n+              \"%\" PRId64 \", cum_counter=\"\n+              \"%\" PRId64,\n \t      h_ix, histo_bucket->num_counters,\n               (int64_t)histo_bucket->min_value,\n               (int64_t)histo_bucket->cum_value);\n@@ -526,7 +526,7 @@ dump_working_sets (const char *filename ATTRIBUTE_UNUSED,\n       printf (\"\\n\");\n       print_prefix (filename, 0, 0);\n       printf (\"\\t\\t%u.%02u%%: num counts=%u, min counter=\"\n-               \"%\"PRId64,\n+               \"%\" PRId64,\n                pct / 100, pct - (pct / 100 * 100),\n                ws_info->num_counters,\n                (int64_t)ws_info->min_counter);"}, {"sha": "60a9d4af1176b5b79414b2986c15dbfe4837539d", "filename": "gcc/gcov.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fgcov.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fgcov.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcov.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -1846,7 +1846,7 @@ format_gcov (gcov_type top, gcov_type bottom, int dp)\n \t}\n     }\n   else\n-    sprintf (buffer, \"%\"PRId64, (int64_t)top);\n+    sprintf (buffer, \"%\" PRId64, (int64_t)top);\n \n   return buffer;\n }"}, {"sha": "356f402fac4e23697138596775652f93b3acc9d9", "filename": "gcc/ipa-cp.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fipa-cp.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fipa-cp.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-cp.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -2193,7 +2193,7 @@ good_cloning_opportunity_p (struct cgraph_node *node, int time_benefit,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"     good_cloning_opportunity_p (time: %i, \"\n \t\t \"size: %i, count_sum: \" HOST_WIDE_INT_PRINT_DEC\n-\t\t \"%s%s) -> evaluation: \" \"%\"PRId64\n+\t\t \"%s%s) -> evaluation: \" \"%\" PRId64\n \t\t \", threshold: %i\\n\",\n \t\t time_benefit, size_cost, (HOST_WIDE_INT) count_sum,\n \t\t info->node_within_scc ? \", scc\" : \"\",\n@@ -2211,7 +2211,7 @@ good_cloning_opportunity_p (struct cgraph_node *node, int time_benefit,\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file, \"     good_cloning_opportunity_p (time: %i, \"\n \t\t \"size: %i, freq_sum: %i%s%s) -> evaluation: \"\n-\t\t \"%\"PRId64 \", threshold: %i\\n\",\n+\t\t \"%\" PRId64 \", threshold: %i\\n\",\n \t\t time_benefit, size_cost, freq_sum,\n \t\t info->node_within_scc ? \", scc\" : \"\",\n \t\t info->node_calling_single_call ? \", single_call\" : \"\","}, {"sha": "017f3a50090246ff40a2f9b20a7c4ee64de336f8", "filename": "gcc/ipa-inline.c", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fipa-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fipa-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-inline.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -1171,8 +1171,8 @@ edge_badness (struct cgraph_edge *edge, bool dump)\n       if (dump)\n \t{\n \t  fprintf (dump_file,\n-\t\t   \"      %f: guessed profile. frequency %f, count %\"PRId64\n-\t\t   \" caller count %\"PRId64\n+\t\t   \"      %f: guessed profile. frequency %f, count %\" PRId64\n+\t\t   \" caller count %\" PRId64\n \t\t   \" time w/o inlining %f, time w inlining %f\"\n \t\t   \" overall growth %i (current) %i (original)\"\n \t\t   \" %i (compensated)\\n\",\n@@ -1954,7 +1954,7 @@ inline_small_functions (void)\n \t\t   badness.to_double (),\n \t\t   edge->frequency / (double)CGRAPH_FREQ_BASE);\n \t  if (edge->count)\n-\t    fprintf (dump_file,\" Called %\"PRId64\"x\\n\",\n+\t    fprintf (dump_file,\" Called %\" PRId64\"x\\n\",\n \t\t     edge->count);\n \t  if (dump_flags & TDF_DETAILS)\n \t    edge_badness (edge, true);\n@@ -2241,8 +2241,8 @@ dump_overall_stats (void)\n \tsum_weighted += time * node->count;\n       }\n   fprintf (dump_file, \"Overall time estimate: \"\n-\t   \"%\"PRId64\" weighted by profile: \"\n-\t   \"%\"PRId64\"\\n\", sum, sum_weighted);\n+\t   \"%\" PRId64\" weighted by profile: \"\n+\t   \"%\" PRId64\"\\n\", sum, sum_weighted);\n }\n \n /* Output some useful stats about inlining.  */\n@@ -2320,31 +2320,31 @@ dump_inline_stats (void)\n   if (max_count)\n     {\n       fprintf (dump_file,\n-\t       \"Inlined %\"PRId64 \" + speculative \"\n-\t       \"%\"PRId64 \" + speculative polymorphic \"\n-\t       \"%\"PRId64 \" + previously indirect \"\n-\t       \"%\"PRId64 \" + virtual \"\n-\t       \"%\"PRId64 \" + virtual and previously indirect \"\n-\t       \"%\"PRId64 \"\\n\" \"Not inlined \"\n-\t       \"%\"PRId64 \" + previously indirect \"\n-\t       \"%\"PRId64 \" + virtual \"\n-\t       \"%\"PRId64 \" + virtual and previously indirect \"\n-\t       \"%\"PRId64 \" + stil indirect \"\n-\t       \"%\"PRId64 \" + still indirect polymorphic \"\n-\t       \"%\"PRId64 \"\\n\", inlined_cnt,\n+\t       \"Inlined %\" PRId64 \" + speculative \"\n+\t       \"%\" PRId64 \" + speculative polymorphic \"\n+\t       \"%\" PRId64 \" + previously indirect \"\n+\t       \"%\" PRId64 \" + virtual \"\n+\t       \"%\" PRId64 \" + virtual and previously indirect \"\n+\t       \"%\" PRId64 \"\\n\" \"Not inlined \"\n+\t       \"%\" PRId64 \" + previously indirect \"\n+\t       \"%\" PRId64 \" + virtual \"\n+\t       \"%\" PRId64 \" + virtual and previously indirect \"\n+\t       \"%\" PRId64 \" + stil indirect \"\n+\t       \"%\" PRId64 \" + still indirect polymorphic \"\n+\t       \"%\" PRId64 \"\\n\", inlined_cnt,\n \t       inlined_speculative, inlined_speculative_ply,\n \t       inlined_indir_cnt, inlined_virt_cnt, inlined_virt_indir_cnt,\n \t       noninlined_cnt, noninlined_indir_cnt, noninlined_virt_cnt,\n \t       noninlined_virt_indir_cnt, indirect_cnt, indirect_poly_cnt);\n       fprintf (dump_file,\n-\t       \"Removed speculations %\"PRId64 \"\\n\",\n+\t       \"Removed speculations %\" PRId64 \"\\n\",\n \t       spec_rem);\n     }\n   dump_overall_stats ();\n   fprintf (dump_file, \"\\nWhy inlining failed?\\n\");\n   for (i = 0; i < CIF_N_REASONS; i++)\n     if (reason[i][2])\n-      fprintf (dump_file, \"%-50s: %8i calls, %8i freq, %\"PRId64\" count\\n\",\n+      fprintf (dump_file, \"%-50s: %8i calls, %8i freq, %\" PRId64\" count\\n\",\n \t       cgraph_inline_failed_string ((cgraph_inline_failed_t) i),\n \t       (int) reason[i][2], (int) reason[i][1], reason[i][0]);\n }"}, {"sha": "41d56872e606d9e05e342ef3be8c79e5151865e1", "filename": "gcc/ipa-polymorphic-call.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fipa-polymorphic-call.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fipa-polymorphic-call.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-polymorphic-call.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -652,7 +652,7 @@ ipa_polymorphic_call_context::dump (FILE *f, bool newline) const\n \t    fprintf (f, \" (or a derived type)\");\n \t  if (maybe_in_construction)\n \t    fprintf (f, \" (maybe in construction)\");\n-\t  fprintf (f, \" offset \"HOST_WIDE_INT_PRINT_DEC,\n+\t  fprintf (f, \" offset \" HOST_WIDE_INT_PRINT_DEC,\n \t\t   offset);\n \t}\n       if (speculative_outer_type)\n@@ -663,7 +663,7 @@ ipa_polymorphic_call_context::dump (FILE *f, bool newline) const\n \t  print_generic_expr (f, speculative_outer_type, TDF_SLIM);\n \t  if (speculative_maybe_derived_type)\n \t    fprintf (f, \" (or a derived type)\");\n-\t  fprintf (f, \" at offset \"HOST_WIDE_INT_PRINT_DEC,\n+\t  fprintf (f, \" at offset \" HOST_WIDE_INT_PRINT_DEC,\n \t\t   speculative_offset);\n \t}\n     }"}, {"sha": "e0d426646455ddd055599a80225d5d3c0e0085e9", "filename": "gcc/ipa-profile.c", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fipa-profile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fipa-profile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-profile.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -186,7 +186,7 @@ dump_histogram (FILE *file, vec<histogram_entry *> histogram)\n     {\n       cumulated_time += histogram[i]->count * histogram[i]->time;\n       cumulated_size += histogram[i]->size;\n-      fprintf (file, \"  %\"PRId64\": time:%i (%2.2f) size:%i (%2.2f)\\n\",\n+      fprintf (file, \"  %\" PRId64\": time:%i (%2.2f) size:%i (%2.2f)\\n\",\n \t       (int64_t) histogram[i]->count,\n \t       histogram[i]->time,\n \t       cumulated_time * 100.0 / overall_time,\n@@ -543,7 +543,7 @@ ipa_profile (void)\n \t{\n \t  gcov_type min, cumulated_time = 0, cumulated_size = 0;\n \n-\t  fprintf (dump_file, \"Overall time: %\"PRId64\"\\n\",\n+\t  fprintf (dump_file, \"Overall time: %\" PRId64\"\\n\",\n \t\t   (int64_t)overall_time);\n \t  min = get_hot_bb_threshold ();\n           for (i = 0; i < (int)histogram.length () && histogram[i]->count >= min;\n@@ -552,7 +552,7 @@ ipa_profile (void)\n \t      cumulated_time += histogram[i]->count * histogram[i]->time;\n \t      cumulated_size += histogram[i]->size;\n \t    }\n-\t  fprintf (dump_file, \"GCOV min count: %\"PRId64\n+\t  fprintf (dump_file, \"GCOV min count: %\" PRId64\n \t\t   \" Time:%3.2f%% Size:%3.2f%%\\n\", \n \t\t   (int64_t)min,\n \t\t   cumulated_time * 100.0 / overall_time,\n@@ -578,7 +578,7 @@ ipa_profile (void)\n \t      cumulated_time += histogram[i]->count * histogram[i]->time;\n \t      cumulated_size += histogram[i]->size;\n \t    }\n-\t  fprintf (dump_file, \"Determined min count: %\"PRId64\n+\t  fprintf (dump_file, \"Determined min count: %\" PRId64\n \t\t   \" Time:%3.2f%% Size:%3.2f%%\\n\", \n \t\t   (int64_t)threshold,\n \t\t   cumulated_time * 100.0 / overall_time,"}, {"sha": "26be5f26ebafcf4864ab1fd5e60f76bed8f9394f", "filename": "gcc/ipa-prop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fipa-prop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fipa-prop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-prop.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -351,7 +351,7 @@ ipa_print_node_jump_functions_for_edge (FILE *f, struct cgraph_edge *cs)\n       else if (type == IPA_JF_ANCESTOR)\n \t{\n \t  fprintf (f, \"ANCESTOR: \");\n-\t  fprintf (f, \"%d, offset \"HOST_WIDE_INT_PRINT_DEC,\n+\t  fprintf (f, \"%d, offset \" HOST_WIDE_INT_PRINT_DEC,\n \t\t   jump_func->value.ancestor.formal_id,\n \t\t   jump_func->value.ancestor.offset);\n \t  if (jump_func->value.ancestor.agg_preserved)"}, {"sha": "47430b015a4ba4e01310384e21912b7d9c64cbd9", "filename": "gcc/ira-color.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fira-color.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fira-color.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira-color.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -549,7 +549,7 @@ print_hard_regs_subforest (FILE *f, allocno_hard_regs_node_t roots,\n \tfprintf (f, \" \");\n       fprintf (f, \"%d:(\", node->preorder_num);\n       print_hard_reg_set (f, node->hard_regs->set, false);\n-      fprintf (f, \")@%\"PRId64\"\\n\", node->hard_regs->cost);\n+      fprintf (f, \")@%\" PRId64\"\\n\", node->hard_regs->cost);\n       print_hard_regs_subforest (f, node->first, level + 1);\n     }\n }"}, {"sha": "07d6c6951f2dcd28d7a824288a6fbe5b4740b67f", "filename": "gcc/ira.c", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fira.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fira.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fira.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -2506,12 +2506,12 @@ calculate_allocation_cost (void)\n   if (internal_flag_ira_verbose > 0 && ira_dump_file != NULL)\n     {\n       fprintf (ira_dump_file,\n-\t       \"+++Costs: overall %\"PRId64\n-\t       \", reg %\"PRId64\n-\t       \", mem %\"PRId64\n-\t       \", ld %\"PRId64\n-\t       \", st %\"PRId64\n-\t       \", move %\"PRId64,\n+\t       \"+++Costs: overall %\" PRId64\n+\t       \", reg %\" PRId64\n+\t       \", mem %\" PRId64\n+\t       \", ld %\" PRId64\n+\t       \", st %\" PRId64\n+\t       \", move %\" PRId64,\n \t       ira_overall_cost, ira_reg_cost, ira_mem_cost,\n \t       ira_load_cost, ira_store_cost, ira_shuffle_cost);\n       fprintf (ira_dump_file, \"\\n+++       move loops %d, new jumps %d\\n\",\n@@ -5442,7 +5442,7 @@ do_reload (void)\n \n   if (internal_flag_ira_verbose > 0 && ira_dump_file != NULL\n       && overall_cost_before != ira_overall_cost)\n-    fprintf (ira_dump_file, \"+++Overall after reload %\"PRId64 \"\\n\",\n+    fprintf (ira_dump_file, \"+++Overall after reload %\" PRId64 \"\\n\",\n \t     ira_overall_cost);\n \n   flag_ira_share_spill_slots = saved_flag_ira_share_spill_slots;"}, {"sha": "b5adbacff4ed9ab5de1b2f5480984cba41d55f60", "filename": "gcc/loop-doloop.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Floop-doloop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Floop-doloop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-doloop.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -446,7 +446,7 @@ doloop_modify (struct loop *loop, struct niter_desc *desc,\n     {\n       fprintf (dump_file, \"Doloop: Inserting doloop pattern (\");\n       if (desc->const_iter)\n-\tfprintf (dump_file, \"%\"PRId64, desc->niter);\n+\tfprintf (dump_file, \"%\" PRId64, desc->niter);\n       else\n \tfputs (\"runtime\", dump_file);\n       fputs (\" iterations).\\n\", dump_file);"}, {"sha": "bf6359da4a082831443c54759dabce69048a8179", "filename": "gcc/loop-iv.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Floop-iv.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Floop-iv.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop-iv.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -2360,7 +2360,7 @@ determine_max_iter (struct loop *loop, struct niter_desc *desc, rtx old_niter)\n   if (andmax)\n     nmax = MIN (nmax, andmax);\n   if (dump_file)\n-    fprintf (dump_file, \";; Determined upper bound %\"PRId64\".\\n\",\n+    fprintf (dump_file, \";; Determined upper bound %\" PRId64\".\\n\",\n \t     nmax);\n   return nmax;\n }"}, {"sha": "9dacde2d783dff2646d79c00ece4b56ee7853704", "filename": "gcc/mcf.c", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fmcf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fmcf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmcf.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -214,23 +214,23 @@ dump_fixup_edge (FILE *file, fixup_graph_type *fixup_graph, fixup_edge_p fedge)\n \n   if (fedge->type)\n     {\n-      fprintf (file, \"flow/capacity=%\"PRId64 \"/\",\n+      fprintf (file, \"flow/capacity=%\" PRId64 \"/\",\n \t       fedge->flow);\n       if (fedge->max_capacity == CAP_INFINITY)\n \tfputs (\"+oo,\", file);\n       else\n-\tfprintf (file, \"%\"PRId64 \",\", fedge->max_capacity);\n+\tfprintf (file, \"%\" PRId64 \",\", fedge->max_capacity);\n     }\n \n   if (fedge->is_rflow_valid)\n     {\n       if (fedge->rflow == CAP_INFINITY)\n \tfputs (\" rflow=+oo.\", file);\n       else\n-\tfprintf (file, \" rflow=%\"PRId64 \",\", fedge->rflow);\n+\tfprintf (file, \" rflow=%\" PRId64 \",\", fedge->rflow);\n     }\n \n-  fprintf (file, \" cost=%\"PRId64 \".\", fedge->cost);\n+  fprintf (file, \" cost=%\" PRId64 \".\", fedge->cost);\n \n   fprintf (file, \"\\t(%d->%d)\", fedge->src, fedge->dest);\n \n@@ -637,9 +637,9 @@ create_fixup_graph (fixup_graph_type *fixup_graph)\n   if (dump_file)\n     {\n       fprintf (dump_file, \"\\nAdjust supply and demand:\\n\");\n-      fprintf (dump_file, \"supply_value=%\"PRId64 \"\\n\",\n+      fprintf (dump_file, \"supply_value=%\" PRId64 \"\\n\",\n \t       supply_value);\n-      fprintf (dump_file, \"demand_value=%\"PRId64 \"\\n\",\n+      fprintf (dump_file, \"demand_value=%\" PRId64 \"\\n\",\n \t       demand_value);\n     }\n \n@@ -909,10 +909,10 @@ cancel_negative_cycle (fixup_graph_type *fixup_graph,\n     {\n       fprintf (dump_file, \"%d\", cycle[k]);\n       fprintf (dump_file,\n-\t       \": (%\"PRId64 \", %\"PRId64\n+\t       \": (%\" PRId64 \", %\" PRId64\n \t       \")\\n\", sum_cost, cycle_flow);\n       fprintf (dump_file,\n-\t       \"Augment cycle with %\"PRId64 \"\\n\",\n+\t       \"Augment cycle with %\" PRId64 \"\\n\",\n \t       cycle_flow);\n     }\n \n@@ -1104,10 +1104,10 @@ find_max_flow (fixup_graph_type *fixup_graph, int source, int sink)\n \t      fprintf (dump_file, \"<-\");\n \t    }\n \t  fprintf (dump_file,\n-\t\t   \"ENTRY  (path_capacity=%\"PRId64 \")\\n\",\n+\t\t   \"ENTRY  (path_capacity=%\" PRId64 \")\\n\",\n \t\t   increment);\n \t  fprintf (dump_file,\n-\t\t   \"Network flow is %\"PRId64 \".\\n\",\n+\t\t   \"Network flow is %\" PRId64 \".\\n\",\n \t\t   max_flow);\n \t}\n     }\n@@ -1144,15 +1144,15 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n       /* Fixup BB.  */\n       if (dump_file)\n         fprintf (dump_file,\n-                 \"BB%d: %\"PRId64 \"\", bb->index, bb->count);\n+                 \"BB%d: %\" PRId64 \"\", bb->index, bb->count);\n \n       pfedge = find_fixup_edge (fixup_graph, i, i + 1);\n       if (pfedge->flow)\n         {\n           bb->count += pfedge->flow;\n \t  if (dump_file)\n \t    {\n-\t      fprintf (dump_file, \" + %\"PRId64 \"(\",\n+\t      fprintf (dump_file, \" + %\" PRId64 \"(\",\n \t               pfedge->flow);\n \t      print_edge (dump_file, fixup_graph, i, i + 1);\n \t      fprintf (dump_file, \")\");\n@@ -1167,15 +1167,15 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n           bb->count -= pfedge_n->flow;\n \t  if (dump_file)\n \t    {\n-\t      fprintf (dump_file, \" - %\"PRId64 \"(\",\n+\t      fprintf (dump_file, \" - %\" PRId64 \"(\",\n \t\t       pfedge_n->flow);\n \t      print_edge (dump_file, fixup_graph, i + 1,\n \t\t\t  pfedge->norm_vertex_index);\n \t      fprintf (dump_file, \")\");\n \t    }\n         }\n       if (dump_file)\n-        fprintf (dump_file, \" = %\"PRId64 \"\\n\", bb->count);\n+        fprintf (dump_file, \" = %\" PRId64 \"\\n\", bb->count);\n \n       /* Fixup edge.  */\n       FOR_EACH_EDGE (e, ei, bb->succs)\n@@ -1186,7 +1186,7 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n \n           j = 2 * e->dest->index;\n           if (dump_file)\n-\t    fprintf (dump_file, \"%d->%d: %\"PRId64 \"\",\n+\t    fprintf (dump_file, \"%d->%d: %\" PRId64 \"\",\n \t\t     bb->index, e->dest->index, e->count);\n \n           pfedge = find_fixup_edge (fixup_graph, i + 1, j);\n@@ -1199,7 +1199,7 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n \t          e->count += pfedge->flow;\n \t          if (dump_file)\n \t\t    {\n-\t\t      fprintf (dump_file, \" + %\"PRId64 \"(\",\n+\t\t      fprintf (dump_file, \" + %\" PRId64 \"(\",\n \t\t\t       pfedge->flow);\n \t\t      print_edge (dump_file, fixup_graph, i + 1, j);\n \t\t      fprintf (dump_file, \")\");\n@@ -1214,7 +1214,7 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n \t          e->count -= pfedge_n->flow;\n \t          if (dump_file)\n \t\t    {\n-\t\t      fprintf (dump_file, \" - %\"PRId64 \"(\",\n+\t\t      fprintf (dump_file, \" - %\" PRId64 \"(\",\n \t\t\t       pfedge_n->flow);\n \t\t      print_edge (dump_file, fixup_graph, j,\n \t\t\t          pfedge->norm_vertex_index);\n@@ -1234,7 +1234,7 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n \t      if (dump_file)\n \t        {\n \t          fprintf (dump_file, \"(self edge)\");\n-\t          fprintf (dump_file, \" + %\"PRId64 \"(\",\n+\t          fprintf (dump_file, \" + %\" PRId64 \"(\",\n \t\t           pfedge_n->flow);\n \t          print_edge (dump_file, fixup_graph, i + 1,\n \t\t\t      pfedge->norm_vertex_index);\n@@ -1245,7 +1245,7 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n           if (bb->count)\n \t    e->probability = REG_BR_PROB_BASE * e->count / bb->count;\n           if (dump_file)\n-\t    fprintf (dump_file, \" = %\"PRId64 \"\\t(%.1f%%)\\n\",\n+\t    fprintf (dump_file, \" = %\" PRId64 \"\\t(%.1f%%)\\n\",\n \t\t     e->count, e->probability * 100.0 / REG_BR_PROB_BASE);\n         }\n     }\n@@ -1298,14 +1298,14 @@ adjust_cfg_counts (fixup_graph_type *fixup_graph)\n                || (bb->count != sum_edge_counts (bb->succs)))\n             {\n               fprintf (dump_file,\n-                       \"BB%d(%\"PRId64 \")  **INVALID**: \",\n+                       \"BB%d(%\" PRId64 \")  **INVALID**: \",\n                        bb->index, bb->count);\n               fprintf (stderr,\n-                       \"******** BB%d(%\"PRId64\n+                       \"******** BB%d(%\" PRId64\n                        \")  **INVALID**: \\n\", bb->index, bb->count);\n-              fprintf (dump_file, \"in_edges=%\"PRId64 \" \",\n+              fprintf (dump_file, \"in_edges=%\" PRId64 \" \",\n                        sum_edge_counts (bb->preds));\n-              fprintf (dump_file, \"out_edges=%\"PRId64 \"\\n\",\n+              fprintf (dump_file, \"out_edges=%\" PRId64 \"\\n\",\n                        sum_edge_counts (bb->succs));\n             }\n          }"}, {"sha": "ca1ef83cce14f3ed8baba0de685f7cbeb69f506e", "filename": "gcc/modulo-sched.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fmodulo-sched.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fmodulo-sched.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmodulo-sched.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -1482,15 +1482,15 @@ sms_schedule (void)\n \t      if (profile_info && flag_branch_probabilities)\n \t    \t{\n \t      \t  fprintf (dump_file, \"SMS loop-count \");\n-\t      \t  fprintf (dump_file, \"%\"PRId64,\n+\t      \t  fprintf (dump_file, \"%\" PRId64,\n \t             \t   (int64_t) bb->count);\n \t      \t  fprintf (dump_file, \"\\n\");\n                   fprintf (dump_file, \"SMS trip-count \");\n-                  fprintf (dump_file, \"%\"PRId64,\n+                  fprintf (dump_file, \"%\" PRId64,\n                            (int64_t) trip_count);\n                   fprintf (dump_file, \"\\n\");\n \t      \t  fprintf (dump_file, \"SMS profile-sum-max \");\n-\t      \t  fprintf (dump_file, \"%\"PRId64,\n+\t      \t  fprintf (dump_file, \"%\" PRId64,\n \t          \t   (int64_t) profile_info->sum_max);\n \t      \t  fprintf (dump_file, \"\\n\");\n \t    \t}\n@@ -1604,11 +1604,11 @@ sms_schedule (void)\n \t  if (profile_info && flag_branch_probabilities)\n \t    {\n \t      fprintf (dump_file, \"SMS loop-count \");\n-\t      fprintf (dump_file, \"%\"PRId64,\n+\t      fprintf (dump_file, \"%\" PRId64,\n \t               (int64_t) bb->count);\n \t      fprintf (dump_file, \"\\n\");\n \t      fprintf (dump_file, \"SMS profile-sum-max \");\n-\t      fprintf (dump_file, \"%\"PRId64,\n+\t      fprintf (dump_file, \"%\" PRId64,\n \t               (int64_t) profile_info->sum_max);\n \t      fprintf (dump_file, \"\\n\");\n \t    }\n@@ -1635,7 +1635,7 @@ sms_schedule (void)\n       if (dump_file && count_init)\n         {\n           fprintf (dump_file, \"SMS const-doloop \");\n-          fprintf (dump_file, \"%\"PRId64,\n+          fprintf (dump_file, \"%\" PRId64,\n \t\t     loop_count);\n           fprintf (dump_file, \"\\n\");\n         }\n@@ -1696,9 +1696,9 @@ sms_schedule (void)\n \t\t  fprintf (dump_file, \"SMS failed... \\n\");\n \t\t  fprintf (dump_file, \"SMS sched-failed (stage-count=%d,\"\n \t\t\t   \" loop-count=\", stage_count);\n-\t\t  fprintf (dump_file, \"%\"PRId64, loop_count);\n+\t\t  fprintf (dump_file, \"%\" PRId64, loop_count);\n \t\t  fprintf (dump_file, \", trip-count=\");\n-\t\t  fprintf (dump_file, \"%\"PRId64, trip_count);\n+\t\t  fprintf (dump_file, \"%\" PRId64, trip_count);\n \t\t  fprintf (dump_file, \")\\n\");\n \t\t}\n \t      break;"}, {"sha": "1568633561ed0d8073fde26ccf00bc24ae828156", "filename": "gcc/predict.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fpredict.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fpredict.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fpredict.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -714,10 +714,10 @@ dump_prediction (FILE *file, enum br_predictor predictor, int probability,\n \n   if (bb->count)\n     {\n-      fprintf (file, \"  exec %\"PRId64, bb->count);\n+      fprintf (file, \"  exec %\" PRId64, bb->count);\n       if (e)\n \t{\n-\t  fprintf (file, \" hit %\"PRId64, e->count);\n+\t  fprintf (file, \" hit %\" PRId64, e->count);\n \t  fprintf (file, \" (%.1f%%)\", e->count * 100.0 / bb->count);\n \t}\n     }"}, {"sha": "abc1aadafd8d04d047b7e9b4d426ce58339f2f74", "filename": "gcc/profile.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fprofile.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fprofile.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fprofile.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -276,7 +276,7 @@ get_working_sets (void)\n           ws_info = &gcov_working_sets[ws_ix];\n           /* Print out the percentage using int arithmatic to avoid float.  */\n           fprintf (dump_file, \"\\t\\t%u.%02u%%: num counts=%u, min counter=\"\n-                   \"%\"PRId64 \"\\n\",\n+                   \"%\" PRId64 \"\\n\",\n                    pct / 100, pct - (pct / 100 * 100),\n                    ws_info->num_counters,\n                    (int64_t)ws_info->min_counter);\n@@ -357,7 +357,7 @@ is_edge_inconsistent (vec<edge, va_gc> *edges)\n \t      if (dump_file)\n \t\t{\n \t\t  fprintf (dump_file,\n-\t\t  \t   \"Edge %i->%i is inconsistent, count%\"PRId64,\n+\t\t  \t   \"Edge %i->%i is inconsistent, count%\" PRId64,\n \t\t\t   e->src->index, e->dest->index, e->count);\n \t\t  dump_bb (dump_file, e->src, 0, TDF_DETAILS);\n \t\t  dump_bb (dump_file, e->dest, 0, TDF_DETAILS);\n@@ -406,7 +406,7 @@ is_inconsistent (void)\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"BB %i count is negative \"\n-\t\t       \"%\"PRId64,\n+\t\t       \"%\" PRId64,\n \t\t       bb->index,\n \t\t       bb->count);\n \t      dump_bb (dump_file, bb, 0, TDF_DETAILS);\n@@ -418,7 +418,7 @@ is_inconsistent (void)\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"BB %i count does not match sum of incoming edges \"\n-\t\t       \"%\"PRId64\" should be %\"PRId64,\n+\t\t       \"%\" PRId64\" should be %\" PRId64,\n \t\t       bb->index,\n \t\t       bb->count,\n \t\t       sum_edge_counts (bb->preds));\n@@ -433,7 +433,7 @@ is_inconsistent (void)\n \t  if (dump_file)\n \t    {\n \t      fprintf (dump_file, \"BB %i count does not match sum of outgoing edges \"\n-\t\t       \"%\"PRId64\" should be %\"PRId64,\n+\t\t       \"%\" PRId64\" should be %\" PRId64,\n \t\t       bb->index,\n \t\t       bb->count,\n \t\t       sum_edge_counts (bb->succs));\n@@ -510,7 +510,7 @@ read_profile_edge_counts (gcov_type *exec_counts)\n \t      {\n \t\tfprintf (dump_file, \"\\nRead edge from %i to %i, count:\",\n \t\t\t bb->index, e->dest->index);\n-\t\tfprintf (dump_file, \"%\"PRId64,\n+\t\tfprintf (dump_file, \"%\" PRId64,\n \t\t\t (int64_t) e->count);\n \t      }\n \t  }"}, {"sha": "006ec5d6f7a6928b59c5f563d1cf033655b3290e", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -265,7 +265,7 @@ self_referential_size (tree size)\n   fntype = build_function_type (return_type, param_type_list);\n \n   /* Build the function declaration.  */\n-  sprintf (buf, \"SZ\"HOST_WIDE_INT_PRINT_UNSIGNED, fnno++);\n+  sprintf (buf, \"SZ\" HOST_WIDE_INT_PRINT_UNSIGNED, fnno++);\n   fnname = get_file_function_name (buf);\n   fndecl = build_decl (input_location, FUNCTION_DECL, fnname, fntype);\n   for (t = param_decl_list; t; t = DECL_CHAIN (t))"}, {"sha": "27736c29d08d7fb23599af4032353dff45f859cf", "filename": "gcc/toplev.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Ftoplev.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Ftoplev.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftoplev.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -1114,7 +1114,7 @@ output_stack_usage (void)\n \t}\n \n       fprintf (stack_usage_file,\n-\t       \"%s:%d:%d:%s\\t\"HOST_WIDE_INT_PRINT_DEC\"\\t%s\\n\",\n+\t       \"%s:%d:%d:%s\\t\" HOST_WIDE_INT_PRINT_DEC\"\\t%s\\n\",\n \t       lbasename (loc.file),\n \t       loc.line,\n \t       loc.column,"}, {"sha": "f79303b67e457dfa1305f149c19b72583bdb0b29", "filename": "gcc/tree-ssa-reassoc.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Ftree-ssa-reassoc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Ftree-ssa-reassoc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-reassoc.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -4549,7 +4549,7 @@ attempt_builtin_powi (gimple stmt, vec<operand_entry_t> *ops)\n \t\t      if (elt < vec_len - 1)\n \t\t\tfputs (\" * \", dump_file);\n \t\t    }\n-\t\t  fprintf (dump_file, \")^\"HOST_WIDE_INT_PRINT_DEC\"\\n\",\n+\t\t  fprintf (dump_file, \")^\" HOST_WIDE_INT_PRINT_DEC\"\\n\",\n \t\t\t   power);\n \t\t}\n \t    }\n@@ -4583,7 +4583,7 @@ attempt_builtin_powi (gimple stmt, vec<operand_entry_t> *ops)\n \t\t  if (elt < vec_len - 1)\n \t\t    fputs (\" * \", dump_file);\n \t\t}\n-\t      fprintf (dump_file, \")^\"HOST_WIDE_INT_PRINT_DEC\"\\n\", power);\n+\t      fprintf (dump_file, \")^\" HOST_WIDE_INT_PRINT_DEC\"\\n\", power);\n \t    }\n \n \t  reassociate_stats.pows_created++;"}, {"sha": "7252449d4ba2ae0755dd5e867771403594b490be", "filename": "gcc/value-prof.c", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fvalue-prof.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fvalue-prof.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvalue-prof.c?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -296,10 +296,10 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n \t   unsigned int i;\n \t   fprintf (dump_file, \" [\");\n            for (i = 0; i < hist->hdata.intvl.steps; i++)\n-\t     fprintf (dump_file, \" %d:%\"PRId64,\n+\t     fprintf (dump_file, \" %d:%\" PRId64,\n \t\t      hist->hdata.intvl.int_start + i,\n \t\t      (int64_t) hist->hvalue.counters[i]);\n-\t   fprintf (dump_file, \" ] outside range:%\"PRId64,\n+\t   fprintf (dump_file, \" ] outside range:%\" PRId64,\n \t\t    (int64_t) hist->hvalue.counters[i]);\n \t}\n       fprintf (dump_file, \".\\n\");\n@@ -309,8 +309,8 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n       fprintf (dump_file, \"Pow2 counter \");\n       if (hist->hvalue.counters)\n \t{\n-\t   fprintf (dump_file, \"pow2:%\"PRId64\n-\t\t    \" nonpow2:%\"PRId64,\n+\t   fprintf (dump_file, \"pow2:%\" PRId64\n+\t\t    \" nonpow2:%\" PRId64,\n \t\t    (int64_t) hist->hvalue.counters[0],\n \t\t    (int64_t) hist->hvalue.counters[1]);\n \t}\n@@ -321,9 +321,9 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n       fprintf (dump_file, \"Single value \");\n       if (hist->hvalue.counters)\n \t{\n-\t   fprintf (dump_file, \"value:%\"PRId64\n-\t\t    \" match:%\"PRId64\n-\t\t    \" wrong:%\"PRId64,\n+\t   fprintf (dump_file, \"value:%\" PRId64\n+\t\t    \" match:%\" PRId64\n+\t\t    \" wrong:%\" PRId64,\n \t\t    (int64_t) hist->hvalue.counters[0],\n \t\t    (int64_t) hist->hvalue.counters[1],\n \t\t    (int64_t) hist->hvalue.counters[2]);\n@@ -335,8 +335,8 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n       fprintf (dump_file, \"Average value \");\n       if (hist->hvalue.counters)\n \t{\n-\t   fprintf (dump_file, \"sum:%\"PRId64\n-\t\t    \" times:%\"PRId64,\n+\t   fprintf (dump_file, \"sum:%\" PRId64\n+\t\t    \" times:%\" PRId64,\n \t\t    (int64_t) hist->hvalue.counters[0],\n \t\t    (int64_t) hist->hvalue.counters[1]);\n \t}\n@@ -347,7 +347,7 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n       fprintf (dump_file, \"IOR value \");\n       if (hist->hvalue.counters)\n \t{\n-\t   fprintf (dump_file, \"ior:%\"PRId64,\n+\t   fprintf (dump_file, \"ior:%\" PRId64,\n \t\t    (int64_t) hist->hvalue.counters[0]);\n \t}\n       fprintf (dump_file, \".\\n\");\n@@ -357,9 +357,9 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n       fprintf (dump_file, \"Constant delta \");\n       if (hist->hvalue.counters)\n \t{\n-\t   fprintf (dump_file, \"value:%\"PRId64\n-\t\t    \" match:%\"PRId64\n-\t\t    \" wrong:%\"PRId64,\n+\t   fprintf (dump_file, \"value:%\" PRId64\n+\t\t    \" match:%\" PRId64\n+\t\t    \" wrong:%\" PRId64,\n \t\t    (int64_t) hist->hvalue.counters[0],\n \t\t    (int64_t) hist->hvalue.counters[1],\n \t\t    (int64_t) hist->hvalue.counters[2]);\n@@ -370,9 +370,9 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n       fprintf (dump_file, \"Indirect call \");\n       if (hist->hvalue.counters)\n \t{\n-\t   fprintf (dump_file, \"value:%\"PRId64\n-\t\t    \" match:%\"PRId64\n-\t\t    \" all:%\"PRId64,\n+\t   fprintf (dump_file, \"value:%\" PRId64\n+\t\t    \" match:%\" PRId64\n+\t\t    \" all:%\" PRId64,\n \t\t    (int64_t) hist->hvalue.counters[0],\n \t\t    (int64_t) hist->hvalue.counters[1],\n \t\t    (int64_t) hist->hvalue.counters[2]);\n@@ -383,7 +383,7 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n       fprintf (dump_file, \"Time profile \");\n       if (hist->hvalue.counters)\n       {\n-        fprintf (dump_file, \"time:%\"PRId64,\n+        fprintf (dump_file, \"time:%\" PRId64,\n                  (int64_t) hist->hvalue.counters[0]);\n       }\n       fprintf (dump_file, \".\\n\");\n@@ -394,10 +394,10 @@ dump_histogram_value (FILE *dump_file, histogram_value hist)\n \t{\n            int i;\n \n-           fprintf (dump_file, \"accu:%\"PRId64, hist->hvalue.counters[0]);\n+           fprintf (dump_file, \"accu:%\" PRId64, hist->hvalue.counters[0]);\n            for (i = 1; i < (GCOV_ICALL_TOPN_VAL << 2); i += 2)\n              {\n-               fprintf (dump_file, \" target:%\"PRId64 \" value:%\"PRId64,\n+               fprintf (dump_file, \" target:%\" PRId64 \" value:%\" PRId64,\n                        (int64_t) hist->hvalue.counters[i],\n                        (int64_t) hist->hvalue.counters[i+1]);\n              }\n@@ -1666,8 +1666,8 @@ gimple_ic_transform (gimple_stmt_iterator *gsi)\n       print_generic_expr (dump_file, direct_call->decl, TDF_SLIM);\n       fprintf (dump_file, \" transformation on insn postponned to ipa-profile\");\n       print_gimple_stmt (dump_file, stmt, 0, TDF_SLIM);\n-      fprintf (dump_file, \"hist->count %\"PRId64\n-\t       \" hist->all %\"PRId64\"\\n\", count, all);\n+      fprintf (dump_file, \"hist->count %\" PRId64\n+\t       \" hist->all %\" PRId64\"\\n\", count, all);\n     }\n \n   return true;"}, {"sha": "ead67714a36638d0f1777d9c0e5a5d1f43a9c689", "filename": "gcc/wide-int-print.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/169980942642c39a062529f747e00a7882d046d7/gcc%2Fwide-int-print.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/169980942642c39a062529f747e00a7882d046d7/gcc%2Fwide-int-print.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fwide-int-print.cc?ref=169980942642c39a062529f747e00a7882d046d7", "patch": "@@ -127,7 +127,7 @@ print_hex (const wide_int_ref &wi, char *buf)\n \n \t}\n       else\n-\tbuf += sprintf (buf, \"0x\"HOST_WIDE_INT_PRINT_HEX_PURE, wi.elt (--i));\n+\tbuf += sprintf (buf, \"0x\" HOST_WIDE_INT_PRINT_HEX_PURE, wi.elt (--i));\n \n       while (--i >= 0)\n \tbuf += sprintf (buf, HOST_WIDE_INT_PRINT_PADDED_HEX, wi.elt (i));"}]}