{"sha": "d34b48146ac2f07e78825c3e99da2e2e588f3c3d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDM0YjQ4MTQ2YWMyZjA3ZTc4ODI1YzNlOTlkYTJlMmU1ODhmM2MzZA==", "commit": {"author": {"name": "Alan Hayward", "email": "alan.hayward@arm.com", "date": "2015-10-27T16:43:13Z"}, "committer": {"name": "Alan Hayward", "email": "alahay01@gcc.gnu.org", "date": "2015-10-27T16:43:13Z"}, "message": "2015-10-27  Alan Hayward  <alan.hayward@arm.com>\n\n\t* tree-vect-looop.c\n\t(vectorizable_live_operation): Change iterator.\n\nFrom-SVN: r229447", "tree": {"sha": "1504962dd76b2a5f4d343456af3b2b09c1041282", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/1504962dd76b2a5f4d343456af3b2b09c1041282"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d34b48146ac2f07e78825c3e99da2e2e588f3c3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34b48146ac2f07e78825c3e99da2e2e588f3c3d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d34b48146ac2f07e78825c3e99da2e2e588f3c3d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d34b48146ac2f07e78825c3e99da2e2e588f3c3d/comments", "author": {"login": "a74nh", "id": 4146708, "node_id": "MDQ6VXNlcjQxNDY3MDg=", "avatar_url": "https://avatars.githubusercontent.com/u/4146708?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a74nh", "html_url": "https://github.com/a74nh", "followers_url": "https://api.github.com/users/a74nh/followers", "following_url": "https://api.github.com/users/a74nh/following{/other_user}", "gists_url": "https://api.github.com/users/a74nh/gists{/gist_id}", "starred_url": "https://api.github.com/users/a74nh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a74nh/subscriptions", "organizations_url": "https://api.github.com/users/a74nh/orgs", "repos_url": "https://api.github.com/users/a74nh/repos", "events_url": "https://api.github.com/users/a74nh/events{/privacy}", "received_events_url": "https://api.github.com/users/a74nh/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "54b96a2d6adb14e7158097f5d75c0aff6df8987f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/54b96a2d6adb14e7158097f5d75c0aff6df8987f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/54b96a2d6adb14e7158097f5d75c0aff6df8987f"}], "stats": {"total": 29, "additions": 10, "deletions": 19}, "files": [{"sha": "f26446c3080fa88afbd1f2878325b97553552568", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34b48146ac2f07e78825c3e99da2e2e588f3c3d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34b48146ac2f07e78825c3e99da2e2e588f3c3d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d34b48146ac2f07e78825c3e99da2e2e588f3c3d", "patch": "@@ -1,3 +1,8 @@\n+2015-10-27  Alan Hayward  <alan.hayward@arm.com>\n+\n+\t* tree-vect-looop.c\n+\t(vectorizable_live_operation): Change iterator.\n+\n 2015-10-27  Abderrazek Zaafrani  <a.zaafrani@samsung.com>\n \t    Aditya Kumar  <aditya.k7@samsung.com>\n "}, {"sha": "32d0bb580c00ecc7f1d34c149785fd2bcec016ca", "filename": "gcc/tree-vect-loop.c", "status": "modified", "additions": 5, "deletions": 19, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d34b48146ac2f07e78825c3e99da2e2e588f3c3d/gcc%2Ftree-vect-loop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d34b48146ac2f07e78825c3e99da2e2e588f3c3d/gcc%2Ftree-vect-loop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-loop.c?ref=d34b48146ac2f07e78825c3e99da2e2e588f3c3d", "patch": "@@ -5901,13 +5901,9 @@ vectorizable_live_operation (gimple *stmt,\n   stmt_vec_info stmt_info = vinfo_for_stmt (stmt);\n   loop_vec_info loop_vinfo = STMT_VINFO_LOOP_VINFO (stmt_info);\n   struct loop *loop = LOOP_VINFO_LOOP (loop_vinfo);\n-  int i;\n-  int op_type;\n   tree op;\n   gimple *def_stmt;\n-  enum vect_def_type dt;\n-  enum tree_code code;\n-  enum gimple_rhs_class rhs_class;\n+  ssa_op_iter iter;\n \n   gcc_assert (STMT_VINFO_LIVE_P (stmt_info));\n \n@@ -5958,24 +5954,14 @@ vectorizable_live_operation (gimple *stmt,\n   if (nested_in_vect_loop_p (loop, stmt))\n     return false;\n \n-  code = gimple_assign_rhs_code (stmt);\n-  op_type = TREE_CODE_LENGTH (code);\n-  rhs_class = get_gimple_rhs_class (code);\n-  gcc_assert (rhs_class != GIMPLE_UNARY_RHS || op_type == unary_op);\n-  gcc_assert (rhs_class != GIMPLE_BINARY_RHS || op_type == binary_op);\n-\n   /* FORNOW: support only if all uses are invariant.  This means\n      that the scalar operations can remain in place, unvectorized.\n      The original last scalar value that they compute will be used.  */\n-\n-  for (i = 0; i < op_type; i++)\n+  FOR_EACH_SSA_TREE_OPERAND (op, stmt, iter, SSA_OP_USE)\n     {\n-      if (rhs_class == GIMPLE_SINGLE_RHS)\n-\top = TREE_OPERAND (gimple_op (stmt, 1), i);\n-      else\n-\top = gimple_op (stmt, i + 1);\n-      if (op\n-          && !vect_is_simple_use (op, loop_vinfo, &def_stmt, &dt))\n+      enum vect_def_type dt = vect_uninitialized_def;\n+\n+      if (!vect_is_simple_use (op, loop_vinfo, &def_stmt, &dt))\n         {\n           if (dump_enabled_p ())\n \t    dump_printf_loc (MSG_MISSED_OPTIMIZATION, vect_location,"}]}