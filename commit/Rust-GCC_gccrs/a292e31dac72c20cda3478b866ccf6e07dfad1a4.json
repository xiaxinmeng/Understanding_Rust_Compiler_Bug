{"sha": "a292e31dac72c20cda3478b866ccf6e07dfad1a4", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTI5MmUzMWRhYzcyYzIwY2RhMzQ3OGI4NjZjY2Y2ZTA3ZGZhZDFhNA==", "commit": {"author": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-08-10T10:09:19Z"}, "committer": {"name": "Martin Liska", "email": "mliska@suse.cz", "date": "2020-09-01T12:25:52Z"}, "message": "vec: use inexact growth where possible.\n\ngcc/ChangeLog:\n\n\t* cfgrtl.c (rtl_create_basic_block): Use default value for\n\tgrowth vector function.\n\t* gimple.c (gimple_set_bb): Likewise.\n\t* symbol-summary.h: Likewise.\n\t* tree-cfg.c (init_empty_tree_cfg_for_function): Likewise.\n\t(build_gimple_cfg): Likewise.\n\t(create_bb): Likewise.\n\t(move_block_to_fn): Likewise.", "tree": {"sha": "7a9cdeeb1acb281f8d30ad084491c72188e9f77a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7a9cdeeb1acb281f8d30ad084491c72188e9f77a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a292e31dac72c20cda3478b866ccf6e07dfad1a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a292e31dac72c20cda3478b866ccf6e07dfad1a4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a292e31dac72c20cda3478b866ccf6e07dfad1a4", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a292e31dac72c20cda3478b866ccf6e07dfad1a4/comments", "author": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marxin", "id": 2658545, "node_id": "MDQ6VXNlcjI2NTg1NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/2658545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marxin", "html_url": "https://github.com/marxin", "followers_url": "https://api.github.com/users/marxin/followers", "following_url": "https://api.github.com/users/marxin/following{/other_user}", "gists_url": "https://api.github.com/users/marxin/gists{/gist_id}", "starred_url": "https://api.github.com/users/marxin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marxin/subscriptions", "organizations_url": "https://api.github.com/users/marxin/orgs", "repos_url": "https://api.github.com/users/marxin/repos", "events_url": "https://api.github.com/users/marxin/events{/privacy}", "received_events_url": "https://api.github.com/users/marxin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aa04a189b677159c475f7fc3409ee56c710f047", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8aa04a189b677159c475f7fc3409ee56c710f047", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8aa04a189b677159c475f7fc3409ee56c710f047"}], "stats": {"total": 53, "additions": 13, "deletions": 40}, "files": [{"sha": "45d84d39b2255fb3f44f7d29cabde99282e731a1", "filename": "gcc/cfgrtl.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a292e31dac72c20cda3478b866ccf6e07dfad1a4/gcc%2Fcfgrtl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a292e31dac72c20cda3478b866ccf6e07dfad1a4/gcc%2Fcfgrtl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcfgrtl.c?ref=a292e31dac72c20cda3478b866ccf6e07dfad1a4", "patch": "@@ -376,12 +376,8 @@ rtl_create_basic_block (void *headp, void *endp, basic_block after)\n   /* Grow the basic block array if needed.  */\n   if ((size_t) last_basic_block_for_fn (cfun)\n       >= basic_block_info_for_fn (cfun)->length ())\n-    {\n-      size_t new_size =\n-\t(last_basic_block_for_fn (cfun)\n-\t + (last_basic_block_for_fn (cfun) + 3) / 4);\n-      vec_safe_grow_cleared (basic_block_info_for_fn (cfun), new_size, true);\n-    }\n+    vec_safe_grow_cleared (basic_block_info_for_fn (cfun),\n+\t\t\t   last_basic_block_for_fn (cfun) + 1);\n \n   n_basic_blocks_for_fn (cfun)++;\n "}, {"sha": "fd4e0fac0d4a8da90e52ea7d6caff93b8570e222", "filename": "gcc/gimple.c", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a292e31dac72c20cda3478b866ccf6e07dfad1a4/gcc%2Fgimple.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a292e31dac72c20cda3478b866ccf6e07dfad1a4/gcc%2Fgimple.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple.c?ref=a292e31dac72c20cda3478b866ccf6e07dfad1a4", "patch": "@@ -1689,12 +1689,7 @@ gimple_set_bb (gimple *stmt, basic_block bb)\n \t    vec_safe_length (label_to_block_map_for_fn (cfun));\n \t  LABEL_DECL_UID (t) = uid = cfun->cfg->last_label_uid++;\n \t  if (old_len <= (unsigned) uid)\n-\t    {\n-\t      unsigned new_len = 3 * uid / 2 + 1;\n-\n-\t      vec_safe_grow_cleared (label_to_block_map_for_fn (cfun),\n-\t\t\t\t     new_len, true);\n-\t    }\n+\t    vec_safe_grow_cleared (label_to_block_map_for_fn (cfun), uid + 1);\n \t}\n \n       (*label_to_block_map_for_fn (cfun))[uid] = bb;"}, {"sha": "a38eb1db7787e62e888be8921af9309d85ba5d4f", "filename": "gcc/symbol-summary.h", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a292e31dac72c20cda3478b866ccf6e07dfad1a4/gcc%2Fsymbol-summary.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a292e31dac72c20cda3478b866ccf6e07dfad1a4/gcc%2Fsymbol-summary.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsymbol-summary.h?ref=a292e31dac72c20cda3478b866ccf6e07dfad1a4", "patch": "@@ -354,11 +354,8 @@ class GTY((user)) fast_function_summary <T *, V>\n       id = this->m_symtab->assign_summary_id (node);\n \n     if ((unsigned int)id >= m_vector->length ())\n-      {\n-\tint newlen = this->m_symtab->cgraph_max_summary_id;\n-\tvec_safe_reserve (m_vector, newlen - m_vector->length ());\n-\tm_vector->quick_grow_cleared (newlen);\n-      }\n+      vec_safe_grow_cleared (m_vector,\n+\t\t\t     this->m_symtab->cgraph_max_summary_id);\n \n     if ((*m_vector)[id] == NULL)\n       (*m_vector)[id] = this->allocate_new ();\n@@ -815,11 +812,7 @@ class GTY((user)) fast_call_summary <T *, V>: public call_summary_base<T>\n       id = this->m_symtab->assign_summary_id (edge);\n \n     if ((unsigned)id >= m_vector->length ())\n-      {\n-\tint newlen = this->m_symtab->edges_max_summary_id;\n-\tm_vector->reserve (newlen - m_vector->length ());\n-\tm_vector->quick_grow_cleared (newlen);\n-      }\n+      vec_safe_grow_cleared (m_vector, this->m_symtab->edges_max_summary_id);\n \n     if ((*m_vector)[id] == NULL)\n       (*m_vector)[id] = this->allocate_new ();"}, {"sha": "406441751a9686b5979beded227e75d666203846", "filename": "gcc/tree-cfg.c", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a292e31dac72c20cda3478b866ccf6e07dfad1a4/gcc%2Ftree-cfg.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a292e31dac72c20cda3478b866ccf6e07dfad1a4/gcc%2Ftree-cfg.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-cfg.c?ref=a292e31dac72c20cda3478b866ccf6e07dfad1a4", "patch": "@@ -181,12 +181,10 @@ init_empty_tree_cfg_for_function (struct function *fn)\n   profile_status_for_fn (fn) = PROFILE_ABSENT;\n   n_basic_blocks_for_fn (fn) = NUM_FIXED_BLOCKS;\n   last_basic_block_for_fn (fn) = NUM_FIXED_BLOCKS;\n-  vec_alloc (basic_block_info_for_fn (fn), initial_cfg_capacity);\n   vec_safe_grow_cleared (basic_block_info_for_fn (fn),\n \t\t\t initial_cfg_capacity, true);\n \n   /* Build a mapping of labels to their associated blocks.  */\n-  vec_alloc (label_to_block_map_for_fn (fn), initial_cfg_capacity);\n   vec_safe_grow_cleared (label_to_block_map_for_fn (fn),\n \t\t\t initial_cfg_capacity, true);\n \n@@ -232,7 +230,7 @@ build_gimple_cfg (gimple_seq seq)\n   if (basic_block_info_for_fn (cfun)->length ()\n       < (size_t) n_basic_blocks_for_fn (cfun))\n     vec_safe_grow_cleared (basic_block_info_for_fn (cfun),\n-\t\t\t   n_basic_blocks_for_fn (cfun), true);\n+\t\t\t   n_basic_blocks_for_fn (cfun));\n \n   /* To speed up statement iterator walks, we first purge dead labels.  */\n   cleanup_dead_labels ();\n@@ -681,12 +679,8 @@ create_bb (void *h, void *e, basic_block after)\n   /* Grow the basic block array if needed.  */\n   if ((size_t) last_basic_block_for_fn (cfun)\n       == basic_block_info_for_fn (cfun)->length ())\n-    {\n-      size_t new_size =\n-\t(last_basic_block_for_fn (cfun)\n-\t + (last_basic_block_for_fn (cfun) + 3) / 4);\n-      vec_safe_grow_cleared (basic_block_info_for_fn (cfun), new_size, true);\n-    }\n+    vec_safe_grow_cleared (basic_block_info_for_fn (cfun),\n+\t\t\t   last_basic_block_for_fn (cfun) + 1);\n \n   /* Add the newly created block to the array.  */\n   SET_BASIC_BLOCK_FOR_FN (cfun, last_basic_block_for_fn (cfun), bb);\n@@ -7094,7 +7088,7 @@ move_block_to_fn (struct function *dest_cfun, basic_block bb,\n   edge_iterator ei;\n   edge e;\n   gimple_stmt_iterator si;\n-  unsigned old_len, new_len;\n+  unsigned old_len;\n \n   /* Remove BB from dominance structures.  */\n   delete_from_dominance_info (CDI_DOMINATORS, bb);\n@@ -7130,10 +7124,8 @@ move_block_to_fn (struct function *dest_cfun, basic_block bb,\n \n   old_len = vec_safe_length (cfg->x_basic_block_info);\n   if ((unsigned) cfg->x_last_basic_block >= old_len)\n-    {\n-      new_len = cfg->x_last_basic_block + (cfg->x_last_basic_block + 3) / 4;\n-      vec_safe_grow_cleared (cfg->x_basic_block_info, new_len, true);\n-    }\n+    vec_safe_grow_cleared (cfg->x_basic_block_info,\n+\t\t\t   cfg->x_last_basic_block + 1);\n \n   (*cfg->x_basic_block_info)[bb->index] = bb;\n \n@@ -7206,10 +7198,7 @@ move_block_to_fn (struct function *dest_cfun, basic_block bb,\n \n \t  old_len = vec_safe_length (cfg->x_label_to_block_map);\n \t  if (old_len <= (unsigned) uid)\n-\t    {\n-\t      new_len = 3 * uid / 2 + 1;\n-\t      vec_safe_grow_cleared (cfg->x_label_to_block_map, new_len, true);\n-\t    }\n+\t    vec_safe_grow_cleared (cfg->x_label_to_block_map, uid + 1);\n \n \t  (*cfg->x_label_to_block_map)[uid] = bb;\n \t  (*cfun->cfg->x_label_to_block_map)[uid] = NULL;"}]}