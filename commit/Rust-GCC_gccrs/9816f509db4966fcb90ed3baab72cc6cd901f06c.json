{"sha": "9816f509db4966fcb90ed3baab72cc6cd901f06c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6OTgxNmY1MDlkYjQ5NjZmY2I5MGVkM2JhYWI3MmNjNmNkOTAxZjA2Yw==", "commit": {"author": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-04T16:49:06Z"}, "committer": {"name": "Martin Sebor", "email": "msebor@redhat.com", "date": "2021-06-04T16:49:39Z"}, "message": "PR middle-end/100732 - ICE on sprintf %s with integer argument\n\ngcc/ChangeLog:\n\n\tPR middle-end/100732\n\t* gimple-fold.c (gimple_fold_builtin_sprintf): Avoid folding calls\n\twith either source or destination argument of invalid type.\n\t* tree-ssa-uninit.c (maybe_warn_pass_by_reference): Avoid checking\n\tcalls with arguments of invalid type.\n\ngcc/testsuite/ChangeLog:\n\n\tPR middle-end/100732\n\t* gcc.dg/tree-ssa/builtin-snprintf-11.c: New test.\n\t* gcc.dg/tree-ssa/builtin-snprintf-12.c: New test.\n\t* gcc.dg/tree-ssa/builtin-sprintf-28.c: New test.\n\t* gcc.dg/tree-ssa/builtin-sprintf-29.c: New test.\n\t* gcc.dg/uninit-pr100732.c: New test.", "tree": {"sha": "abb2a4e7b5c79a640dc41d6d2b413b8963a37b06", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/abb2a4e7b5c79a640dc41d6d2b413b8963a37b06"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/9816f509db4966fcb90ed3baab72cc6cd901f06c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9816f509db4966fcb90ed3baab72cc6cd901f06c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9816f509db4966fcb90ed3baab72cc6cd901f06c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9816f509db4966fcb90ed3baab72cc6cd901f06c/comments", "author": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msebor", "id": 381149, "node_id": "MDQ6VXNlcjM4MTE0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/381149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msebor", "html_url": "https://github.com/msebor", "followers_url": "https://api.github.com/users/msebor/followers", "following_url": "https://api.github.com/users/msebor/following{/other_user}", "gists_url": "https://api.github.com/users/msebor/gists{/gist_id}", "starred_url": "https://api.github.com/users/msebor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msebor/subscriptions", "organizations_url": "https://api.github.com/users/msebor/orgs", "repos_url": "https://api.github.com/users/msebor/repos", "events_url": "https://api.github.com/users/msebor/events{/privacy}", "received_events_url": "https://api.github.com/users/msebor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6503fa93b5565c922f76611a55b0a53cd940a5f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c6503fa93b5565c922f76611a55b0a53cd940a5f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c6503fa93b5565c922f76611a55b0a53cd940a5f"}], "stats": {"total": 192, "additions": 176, "deletions": 16}, "files": [{"sha": "1c0e930aba50ff8fc07ddcd756aca2834acbbabb", "filename": "gcc/gimple-fold.c", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Fgimple-fold.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Fgimple-fold.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimple-fold.c?ref=9816f509db4966fcb90ed3baab72cc6cd901f06c", "patch": "@@ -3514,36 +3514,35 @@ bool\n gimple_fold_builtin_sprintf (gimple_stmt_iterator *gsi)\n {\n   gimple *stmt = gsi_stmt (*gsi);\n-  tree dest = gimple_call_arg (stmt, 0);\n-  tree fmt = gimple_call_arg (stmt, 1);\n-  tree orig = NULL_TREE;\n-  const char *fmt_str = NULL;\n \n   /* Verify the required arguments in the original call.  We deal with two\n      types of sprintf() calls: 'sprintf (str, fmt)' and\n      'sprintf (dest, \"%s\", orig)'.  */\n   if (gimple_call_num_args (stmt) > 3)\n     return false;\n \n+  tree orig = NULL_TREE;\n   if (gimple_call_num_args (stmt) == 3)\n     orig = gimple_call_arg (stmt, 2);\n \n   /* Check whether the format is a literal string constant.  */\n-  fmt_str = c_getstr (fmt);\n+  tree fmt = gimple_call_arg (stmt, 1);\n+  const char *fmt_str = c_getstr (fmt);\n   if (fmt_str == NULL)\n     return false;\n \n+  tree dest = gimple_call_arg (stmt, 0);\n+\n   if (!init_target_chars ())\n     return false;\n \n+  tree fn = builtin_decl_implicit (BUILT_IN_STRCPY);\n+  if (!fn)\n+    return false;\n+\n   /* If the format doesn't contain % args or %%, use strcpy.  */\n   if (strchr (fmt_str, target_percent) == NULL)\n     {\n-      tree fn = builtin_decl_implicit (BUILT_IN_STRCPY);\n-\n-      if (!fn)\n-\treturn false;\n-\n       /* Don't optimize sprintf (buf, \"abc\", ptr++).  */\n       if (orig)\n \treturn false;\n@@ -3584,16 +3583,15 @@ gimple_fold_builtin_sprintf (gimple_stmt_iterator *gsi)\n   /* If the format is \"%s\", use strcpy if the result isn't used.  */\n   else if (fmt_str && strcmp (fmt_str, target_percent_s) == 0)\n     {\n-      tree fn;\n-      fn = builtin_decl_implicit (BUILT_IN_STRCPY);\n-\n-      if (!fn)\n-\treturn false;\n-\n       /* Don't crash on sprintf (str1, \"%s\").  */\n       if (!orig)\n \treturn false;\n \n+      /* Don't fold calls with source arguments of invalid (nonpointer)\n+\t types.  */\n+      if (!POINTER_TYPE_P (TREE_TYPE (orig)))\n+\treturn false;\n+\n       tree orig_len = NULL_TREE;\n       if (gimple_call_lhs (stmt))\n \t{"}, {"sha": "73117c49a734f7213926ba16e01cb97b04d1da5a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-snprintf-11.c", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-11.c?ref=9816f509db4966fcb90ed3baab72cc6cd901f06c", "patch": "@@ -0,0 +1,32 @@\n+/* PR middle-end/100732 - ICE on sprintf %s with integer argument\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+char d[32];\n+\n+void gb (_Bool b)\n+{\n+  __builtin_snprintf (d, 32, \"%s\", b);  // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+void gi (int i)\n+{\n+  __builtin_snprintf (d, 32, \"%s\", i);  // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+void gd (char *d, double x)\n+{\n+  __builtin_snprintf (d, 32, \"%s\", x);  // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+\n+struct X { int i; };\n+\n+void gx (char *d, struct X x)\n+{\n+  __builtin_snprintf (d, 32, \"%s\", x);  // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+/* Also verify that the invalid sprintf call isn't folded to strcpy.\n+   { dg-final { scan-tree-dump-times \"snprintf\" 4 \"optimized\" } }\n+   { dg-final { scan-tree-dump-not \"strcpy\" \"optimized\" } } */"}, {"sha": "9e263568c1b925aac4dbb879909f5a35d99e0b00", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-snprintf-12.c", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-12.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-12.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-snprintf-12.c?ref=9816f509db4966fcb90ed3baab72cc6cd901f06c", "patch": "@@ -0,0 +1,36 @@\n+/* PR middle-end/100732 - ICE on sprintf %s with integer argument\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+#define snprintf(d, n, f, ...)\t\t\t\t\t\\\n+  __builtin___snprintf_chk (d, n, 0, 32, f, __VA_ARGS__)\n+\n+int n;\n+\n+void gb (char *d, _Bool b)\n+{\n+  snprintf (d, n, \"%s\", b);  // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+void gi (char *d, int i)\n+{\n+  snprintf (d, n, \"%s\", i);  // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+void gd (char *d, double x)\n+{\n+  snprintf (d, n, \"%s\", x);  // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+\n+struct X { int i; };\n+\n+void gx (char *d, struct X x)\n+{\n+  snprintf (d, n, \"%s\", x);  // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+\n+/* Also verify that the invalid sprintf call isn't folded to strcpy.\n+   { dg-final { scan-tree-dump-times \"snprintf_chk\" 4 \"optimized\" } }\n+   { dg-final { scan-tree-dump-not \"strcpy\" \"optimized\" } } */"}, {"sha": "c1d0083506fe7b82c32d9cb57846e0f076adaa54", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-28.c", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-28.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-28.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-28.c?ref=9816f509db4966fcb90ed3baab72cc6cd901f06c", "patch": "@@ -0,0 +1,30 @@\n+/* PR middle-end/100732 - ICE on sprintf %s with integer argument\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+void gb (char *d, _Bool b)\n+{\n+  __builtin_sprintf (d, \"%s\", b);       // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+void gi (char *d, int i)\n+{\n+  __builtin_sprintf (d, \"%s\", i);       // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+void gd (char *d, double x)\n+{\n+  __builtin_sprintf (d, \"%s\", x);       // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+\n+struct X { int i; };\n+\n+void gx (char *d, struct X x)\n+{\n+  __builtin_sprintf (d, \"%s\", x);       // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+/* Also verify that the invalid sprintf call isn't folded to strcpy.\n+   { dg-final { scan-tree-dump-times \"sprintf\" 4 \"optimized\" } }\n+   { dg-final { scan-tree-dump-not \"strcpy\" \"optimized\" } } */"}, {"sha": "d0f7db26391ee0f0341115c3c44624b5b483c338", "filename": "gcc/testsuite/gcc.dg/tree-ssa/builtin-sprintf-29.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-29.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-29.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fbuiltin-sprintf-29.c?ref=9816f509db4966fcb90ed3baab72cc6cd901f06c", "patch": "@@ -0,0 +1,40 @@\n+/* PR middle-end/100732 - ICE on sprintf %s with integer argument\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+#define sprintf(d, f, ...) \\\n+  __builtin___sprintf_chk (d, 0, 32, f, __VA_ARGS__)\n+\n+\n+void fi (int i, const char *s)\n+{\n+  sprintf (i, \"%s\", s);       // { dg-warning \"\\\\\\[-Wint-conversion\" }\n+}\n+\n+void gb (char *d, _Bool b)\n+{\n+  sprintf (d, \"%s\", b);       // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+void gi (char *d, int i)\n+{\n+  sprintf (d, \"%s\", i);       // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+void gd (char *d, double x)\n+{\n+  sprintf (d, \"%s\", x);       // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+\n+struct X { int i; };\n+\n+void gx (char *d, struct X x)\n+{\n+  sprintf (d, \"%s\", x);       // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+\n+/* Also verify that the invalid sprintf call isn't folded to strcpy.\n+   { dg-final { scan-tree-dump-times \"sprintf_chk\" 5 \"optimized\" } }\n+   { dg-final { scan-tree-dump-not \"strcpy\" \"optimized\" } } */"}, {"sha": "9c847ce1fa84599b1a10d0b615033d187b8808a4", "filename": "gcc/testsuite/gcc.dg/uninit-pr100732.c", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr100732.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr100732.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Funinit-pr100732.c?ref=9816f509db4966fcb90ed3baab72cc6cd901f06c", "patch": "@@ -0,0 +1,21 @@\n+/* PR middle-end/100732 - ICE on sprintf %s with integer argument\n+   { dg-do compile }\n+   { dg-options \"-O2 -Wall -fdump-tree-optimized\" } */\n+\n+void nowarn_s_i (char *d, int i)\n+{\n+  __builtin_sprintf (d, \"%s\", i);       // { dg-warning \"\\\\\\[-Wformat\" }\n+}\n+\n+void warn_s_i (char *d)\n+{\n+  int i;\n+  __builtin_sprintf (d, \"%s\", i);       // { dg-warning \"\\\\\\[-Wformat\" }\n+                                        // { dg-warning \"\\\\\\[-Wuninitialized\" \"\" { target *-*-* } .-1 }\n+}\n+\n+void warn_i_i (char *d)\n+{\n+  int i;\n+  __builtin_sprintf (d, \"%i\", i);       // { dg-warning \"\\\\\\[-Wuninitialized\" }\n+}"}, {"sha": "7c002f8ed87a3d526893c7dc4677cea573344ec2", "filename": "gcc/tree-ssa-uninit.c", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Ftree-ssa-uninit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/9816f509db4966fcb90ed3baab72cc6cd901f06c/gcc%2Ftree-ssa-uninit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-uninit.c?ref=9816f509db4966fcb90ed3baab72cc6cd901f06c", "patch": "@@ -541,6 +541,9 @@ maybe_warn_pass_by_reference (gcall *stmt, wlimits &wlims)\n \tcontinue;\n \n       tree arg = gimple_call_arg (stmt, argno - 1);\n+      if (!POINTER_TYPE_P (TREE_TYPE (arg)))\n+\t/* Avoid actual arguments with invalid types.  */\n+\tcontinue;\n \n       ao_ref ref;\n       ao_ref_init_from_ptr_and_size (&ref, arg, access_size);"}]}