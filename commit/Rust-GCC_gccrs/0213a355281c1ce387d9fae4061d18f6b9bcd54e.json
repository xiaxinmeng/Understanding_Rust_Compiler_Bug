{"sha": "0213a355281c1ce387d9fae4061d18f6b9bcd54e", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDIxM2EzNTUyODFjMWNlMzg3ZDlmYWU0MDYxZDE4ZjZiOWJjZDU0ZQ==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2001-08-24T12:07:46Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2001-08-24T12:07:46Z"}, "message": "c-common.c (c_alignof, [...]): Move here...\n\n        * c-common.c (c_alignof, c_alignof_expr): Move here...\n        * c-typeck.c: ...from here.\n        * c-tree.h, c-common.h: Adjust.\n\n        * tree.c (cp_build_qualified_type_real): Use get_qualified_type.\n        (build_cplus_array_type): Use cp_build_qualified_type, not\n        TYPE_MAIN_VARIANT, to get an unqualified version.\n\n        * decl2.c (grok_alignof): Lose.\n        (build_expr_from_tree): Use expr_sizeof and c_alignof_expr.\n        * typeck.c (c_alignof): Lose.\n        * semantics.c (finish_sizeof, finish_alignof): New.\n        * parse.y: Use them.\n        * cp-tree.h: Declare them.\n\nFrom-SVN: r45145", "tree": {"sha": "adef91f04544976faec6a008d13e5bd087582d2d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/adef91f04544976faec6a008d13e5bd087582d2d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0213a355281c1ce387d9fae4061d18f6b9bcd54e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0213a355281c1ce387d9fae4061d18f6b9bcd54e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0213a355281c1ce387d9fae4061d18f6b9bcd54e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0213a355281c1ce387d9fae4061d18f6b9bcd54e/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "2dc8352c90590135507210ce0638d31eaec88d0e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2dc8352c90590135507210ce0638d31eaec88d0e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2dc8352c90590135507210ce0638d31eaec88d0e"}], "stats": {"total": 314, "additions": 147, "deletions": 167}, "files": [{"sha": "f033914eb61ae908a525c12f2f8d96cf0f525943", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0213a355281c1ce387d9fae4061d18f6b9bcd54e", "patch": "@@ -1,3 +1,9 @@\n+2001-08-23  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* c-common.c (c_alignof, c_alignof_expr): Move here...\n+\t* c-typeck.c: ...from here.\n+\t* c-tree.h, c-common.h: Adjust.\n+\n 2001-08-23  Bernd Schmidt  <bernds@redhat.com>\n \n \t* config/ia64/ia64.c (rws_update): If !pred, set write_count"}, {"sha": "84a9262f022ab2c803341754637becbeebcc12c3", "filename": "gcc/c-common.c", "status": "modified", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=0213a355281c1ce387d9fae4061d18f6b9bcd54e", "patch": "@@ -2851,7 +2851,87 @@ lang_get_alias_set (t)\n \n   return -1;\n }\n+\f\n+/* Implement the __alignof keyword: Return the minimum required\n+   alignment of TYPE, measured in bytes.  */\n+\n+tree\n+c_alignof (type)\n+     tree type;\n+{\n+  enum tree_code code = TREE_CODE (type);\n+  tree t;\n \n+  /* In C++, sizeof applies to the referent.  Handle alignof the same way.  */\n+  if (code == REFERENCE_TYPE)\n+    {\n+      type = TREE_TYPE (type);\n+      code = TREE_CODE (type);\n+    }\n+\n+  if (code == FUNCTION_TYPE)\n+    t = size_int (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n+  else if (code == VOID_TYPE || code == ERROR_MARK)\n+    t = size_one_node;\n+  else if (!COMPLETE_TYPE_P (type))\n+    {\n+      error (\"__alignof__ applied to an incomplete type\");\n+      t = size_zero_node;\n+    }\n+  else\n+    t = size_int (TYPE_ALIGN (type) / BITS_PER_UNIT);\n+\n+  return fold (build1 (NOP_EXPR, c_size_type_node, t));\n+}\n+\n+/* Implement the __alignof keyword: Return the minimum required\n+   alignment of EXPR, measured in bytes.  For VAR_DECL's and\n+   FIELD_DECL's return DECL_ALIGN (which can be set from an\n+   \"aligned\" __attribute__ specification).  */\n+\n+tree\n+c_alignof_expr (expr)\n+     tree expr;\n+{\n+  tree t;\n+\n+  if (TREE_CODE (expr) == VAR_DECL)\n+    t = size_int (DECL_ALIGN (expr) / BITS_PER_UNIT);\n+ \n+  else if (TREE_CODE (expr) == COMPONENT_REF\n+\t   && DECL_C_BIT_FIELD (TREE_OPERAND (expr, 1)))\n+    {\n+      error (\"`__alignof' applied to a bit-field\");\n+      t = size_one_node;\n+    }\n+  else if (TREE_CODE (expr) == COMPONENT_REF\n+      && TREE_CODE (TREE_OPERAND (expr, 1)) == FIELD_DECL)\n+    t = size_int (DECL_ALIGN (TREE_OPERAND (expr, 1)) / BITS_PER_UNIT);\n+ \n+  else if (TREE_CODE (expr) == INDIRECT_REF)\n+    {\n+      tree t = TREE_OPERAND (expr, 0);\n+      tree best = t;\n+      int bestalign = TYPE_ALIGN (TREE_TYPE (TREE_TYPE (t)));\n+ \n+      while (TREE_CODE (t) == NOP_EXPR\n+\t      && TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 0))) == POINTER_TYPE)\n+\t{\n+\t  int thisalign;\n+\n+\t  t = TREE_OPERAND (t, 0);\n+\t  thisalign = TYPE_ALIGN (TREE_TYPE (TREE_TYPE (t)));\n+\t  if (thisalign > bestalign)\n+\t    best = t, bestalign = thisalign;\n+\t}\n+      return c_alignof (TREE_TYPE (TREE_TYPE (best)));\n+    }\n+  else\n+    return c_alignof (TREE_TYPE (expr));\n+\n+  return fold (build1 (NOP_EXPR, c_size_type_node, t));\n+}\n+\f\n /* Build tree nodes and builtin functions common to both C and C++ language\n    frontends.  */\n "}, {"sha": "e93f2123aaeb8e40293a25e97df6a648e920f273", "filename": "gcc/c-common.h", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.h?ref=0213a355281c1ce387d9fae4061d18f6b9bcd54e", "patch": "@@ -410,6 +410,11 @@ extern int warn_sequence_point;\n \n extern int warn_missing_format_attribute;\n \n+/* Nonzero means warn about sizeof (function) or addition/subtraction\n+   of function pointers.  */\n+\n+extern int warn_pointer_arith;\n+\n /* Nonzero means do some things the same way PCC does.  */\n \n extern int flag_traditional;\n@@ -522,6 +527,9 @@ extern void set_Wformat\t\t\t\tPARAMS ((int));\n extern void decl_handle_format_attribute\tPARAMS ((tree, tree));\n extern void decl_handle_format_arg_attribute\tPARAMS ((tree, tree));\n extern void c_apply_type_quals_to_decl\t\tPARAMS ((int, tree));\n+extern tree c_sizeof\t\t\t\tPARAMS ((tree));\n+extern tree c_alignof\t\t\t\tPARAMS ((tree));\n+extern tree c_alignof_expr\t\t\tPARAMS ((tree));\n /* Print an error message for invalid operands to arith operation CODE.\n    NOP_EXPR is used as a special case (see truthvalue_conversion).  */\n extern void binary_op_error\t\t\tPARAMS ((enum tree_code));"}, {"sha": "df3b7feee8b62b3c7790cb185f9db7f458bddc59", "filename": "gcc/c-tree.h", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-tree.h?ref=0213a355281c1ce387d9fae4061d18f6b9bcd54e", "patch": "@@ -218,11 +218,7 @@ extern void c_expand_decl_stmt                  PARAMS ((tree));\n /* in c-typeck.c */\n extern tree require_complete_type\t\tPARAMS ((tree));\n extern int comptypes\t\t\t\tPARAMS ((tree, tree));\n-extern tree c_sizeof                            PARAMS ((tree));\n-extern tree c_sizeof_nowarn                     PARAMS ((tree));\n extern tree c_size_in_bytes                     PARAMS ((tree));\n-extern tree c_alignof\t\t\t\tPARAMS ((tree));\n-extern tree c_alignof_expr\t\t\tPARAMS ((tree));\n extern tree build_component_ref                 PARAMS ((tree, tree));\n extern tree build_indirect_ref                  PARAMS ((tree, const char *));\n extern tree build_array_ref                     PARAMS ((tree, tree));\n@@ -287,11 +283,6 @@ extern int flag_no_asm;\n \n extern int warn_implicit;\n \n-/* Nonzero means warn about sizeof (function) or addition/subtraction\n-   of function pointers.  */\n-\n-extern int warn_pointer_arith;\n-\n /* Nonzero means warn for all old-style non-prototype function decls.  */\n \n extern int warn_strict_prototypes;"}, {"sha": "ec89e2603ed1a34b92e5d6a068e961704b46d1c7", "filename": "gcc/c-typeck.c", "status": "modified", "additions": 0, "deletions": 75, "changes": 75, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-typeck.c?ref=0213a355281c1ce387d9fae4061d18f6b9bcd54e", "patch": "@@ -783,82 +783,7 @@ c_size_in_bytes (type)\n \t\t     size_int (TYPE_PRECISION (char_type_node)\n \t\t\t       / BITS_PER_UNIT));\n }\n-\n-/* Implement the __alignof keyword: Return the minimum required\n-   alignment of TYPE, measured in bytes.  */\n-\n-tree\n-c_alignof (type)\n-     tree type;\n-{\n-  enum tree_code code = TREE_CODE (type);\n-  tree t;\n-\n-  if (code == FUNCTION_TYPE)\n-    t = size_int (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n-  else if (code == VOID_TYPE || code == ERROR_MARK)\n-    t = size_one_node;\n-  else if (code == ERROR_MARK)\n-    t = size_one_node;\n-  else if (!COMPLETE_TYPE_P (type))\n-    {\n-      error (\"__alignof__ applied to an incomplete type\");\n-      t = size_zero_node;\n-    }\n-  else\n-    t = size_int (TYPE_ALIGN (type) / BITS_PER_UNIT);\n-\n-  return fold (build1 (NOP_EXPR, c_size_type_node, t));\n-}\n \f\n-/* Implement the __alignof keyword: Return the minimum required\n-   alignment of EXPR, measured in bytes.  For VAR_DECL's and\n-   FIELD_DECL's return DECL_ALIGN (which can be set from an\n-   \"aligned\" __attribute__ specification).  */\n-\n-tree\n-c_alignof_expr (expr)\n-     tree expr;\n-{\n-  tree t;\n-\n-  if (TREE_CODE (expr) == VAR_DECL)\n-    t = size_int (DECL_ALIGN (expr) / BITS_PER_UNIT);\n- \n-  else if (TREE_CODE (expr) == COMPONENT_REF\n-\t   && DECL_C_BIT_FIELD (TREE_OPERAND (expr, 1)))\n-    {\n-      error (\"`__alignof' applied to a bit-field\");\n-      t = size_one_node;\n-    }\n-  else if (TREE_CODE (expr) == COMPONENT_REF\n-      && TREE_CODE (TREE_OPERAND (expr, 1)) == FIELD_DECL)\n-    t = size_int (DECL_ALIGN (TREE_OPERAND (expr, 1)) / BITS_PER_UNIT);\n- \n-  else if (TREE_CODE (expr) == INDIRECT_REF)\n-    {\n-      tree t = TREE_OPERAND (expr, 0);\n-      tree best = t;\n-      int bestalign = TYPE_ALIGN (TREE_TYPE (TREE_TYPE (t)));\n- \n-      while (TREE_CODE (t) == NOP_EXPR\n-\t      && TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 0))) == POINTER_TYPE)\n-\t{\n-\t  int thisalign;\n-\n-\t  t = TREE_OPERAND (t, 0);\n-\t  thisalign = TYPE_ALIGN (TREE_TYPE (TREE_TYPE (t)));\n-\t  if (thisalign > bestalign)\n-\t    best = t, bestalign = thisalign;\n-\t}\n-      return c_alignof (TREE_TYPE (TREE_TYPE (best)));\n-    }\n-  else\n-    return c_alignof (TREE_TYPE (expr));\n-\n-  return fold (build1 (NOP_EXPR, c_size_type_node, t));\n-}\n-\n /* Return either DECL or its known constant value (if it has one).  */\n \n tree"}, {"sha": "4a4f80d784edf62a8a2e70efbbe57ed961372b49", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=0213a355281c1ce387d9fae4061d18f6b9bcd54e", "patch": "@@ -1,3 +1,16 @@\n+2001-08-23  Jason Merrill  <jason_merrill@redhat.com>\n+\n+\t* tree.c (cp_build_qualified_type_real): Use get_qualified_type.\n+\t(build_cplus_array_type): Use cp_build_qualified_type, not\n+\tTYPE_MAIN_VARIANT, to get an unqualified version.\n+\n+\t* decl2.c (grok_alignof): Lose.\n+\t(build_expr_from_tree): Use expr_sizeof and c_alignof_expr.\n+\t* typeck.c (c_alignof): Lose.\n+\t* semantics.c (finish_sizeof, finish_alignof): New.\n+\t* parse.y: Use them.\n+\t* cp-tree.h: Declare them.\n+\n 2001-08-22  Jason Merrill  <jason_merrill@redhat.com>\n \n \t* pt.c (tsubst_expr): Hand off to the TREE_CHAIN of a statement."}, {"sha": "947c932110a05893ab8f1040b4ebf891f4278ee0", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=0213a355281c1ce387d9fae4061d18f6b9bcd54e", "patch": "@@ -943,11 +943,6 @@ extern int warn_ctor_dtor_privacy;\n \n extern int warn_write_strings;\n \n-/* Nonzero means warn about sizeof(function) or addition/subtraction\n-   of function pointers.  */\n-\n-extern int warn_pointer_arith;\n-\n /* Nonzero means warn about multiple (redundant) decls for the same single\n    variable or function.  */\n \n@@ -3729,7 +3724,6 @@ extern void grok_x_components\t\t\tPARAMS ((tree));\n extern void maybe_retrofit_in_chrg\t\tPARAMS ((tree));\n extern void maybe_make_one_only\t\t\tPARAMS ((tree));\n extern void grokclassfn\t\t\t\tPARAMS ((tree, tree, enum overload_flags, tree));\n-extern tree grok_alignof\t\t\tPARAMS ((tree));\n extern tree grok_array_decl\t\t\tPARAMS ((tree, tree));\n extern tree delete_sanity\t\t\tPARAMS ((tree, tree, int, int));\n extern tree check_classfn\t\t\tPARAMS ((tree, tree));\n@@ -4125,6 +4119,8 @@ extern tree finish_base_specifier               PARAMS ((tree, tree));\n extern void finish_member_declaration           PARAMS ((tree));\n extern void check_multiple_declarators          PARAMS ((void));\n extern tree finish_typeof\t\t\tPARAMS ((tree));\n+extern tree finish_sizeof\t\t\tPARAMS ((tree));\n+extern tree finish_alignof\t\t\tPARAMS ((tree));\n extern void finish_decl_cleanup                 PARAMS ((tree, tree));\n extern void finish_named_return_value           PARAMS ((tree, tree));\n extern void expand_body                         PARAMS ((tree));\n@@ -4243,9 +4239,7 @@ extern int compparms\t\t\t\tPARAMS ((tree, tree));\n extern int comp_cv_qualification                PARAMS ((tree, tree));\n extern int comp_cv_qual_signature               PARAMS ((tree, tree));\n extern tree expr_sizeof\t\t\t\tPARAMS ((tree));\n-extern tree c_sizeof\t\t\t\tPARAMS ((tree));\n extern tree c_sizeof_nowarn\t\t\tPARAMS ((tree));\n-extern tree c_alignof\t\t\t\tPARAMS ((tree));\n extern tree inline_conversion\t\t\tPARAMS ((tree));\n extern tree decay_conversion\t\t\tPARAMS ((tree));\n extern tree build_object_ref\t\t\tPARAMS ((tree, tree, tree));"}, {"sha": "cb84d2648f14f6dd377c190f0e5f9179ec033d30", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 3, "deletions": 38, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=0213a355281c1ce387d9fae4061d18f6b9bcd54e", "patch": "@@ -1018,42 +1018,6 @@ grokclassfn (ctype, function, flags, quals)\n     }\n }\n \n-/* Work on the expr used by alignof (this is only called by the parser).  */\n-\n-tree\n-grok_alignof (expr)\n-     tree expr;\n-{\n-  tree best, t;\n-  int bestalign;\n-\n-  if (processing_template_decl)\n-    return build_min (ALIGNOF_EXPR, sizetype, expr);\n-\n-  if (TREE_CODE (expr) == COMPONENT_REF\n-      && DECL_C_BIT_FIELD (TREE_OPERAND (expr, 1)))\n-    error (\"`__alignof__' applied to a bit-field\");\n-\n-  if (TREE_CODE (expr) == INDIRECT_REF)\n-    {\n-      best = t = TREE_OPERAND (expr, 0);\n-      bestalign = TYPE_ALIGN (TREE_TYPE (TREE_TYPE (t)));\n-\n-      while (TREE_CODE (t) == NOP_EXPR\n-\t     && TREE_CODE (TREE_TYPE (TREE_OPERAND (t, 0))) == POINTER_TYPE)\n-\t{\n-\t  int thisalign;\n-\t  t = TREE_OPERAND (t, 0);\n-\t  thisalign = TYPE_ALIGN (TREE_TYPE (TREE_TYPE (t)));\n-\t  if (thisalign > bestalign)\n-\t    best = t, bestalign = thisalign;\n-\t}\n-      return c_alignof (TREE_TYPE (TREE_TYPE (best)));\n-    }\n-  else\n-    return c_alignof (TREE_TYPE (expr));\n-}\n-\n /* Create an ARRAY_REF, checking for the user doing things backwards\n    along the way.  */\n \n@@ -3858,8 +3822,9 @@ build_expr_from_tree (t)\n       {\n \ttree r = build_expr_from_tree (TREE_OPERAND (t, 0));\n \tif (!TYPE_P (r))\n-\t  r = TREE_TYPE (r);\n-\treturn TREE_CODE (t) == SIZEOF_EXPR ? c_sizeof (r) : c_alignof (r);\n+\t  return TREE_CODE (t) == SIZEOF_EXPR ? expr_sizeof (r) : c_alignof_expr (r);\n+\telse\n+\t  return TREE_CODE (t) == SIZEOF_EXPR ? c_sizeof (r) : c_alignof (r);\n       }\n \n     case MODOP_EXPR:"}, {"sha": "3b89022191215e85c04594ecf9f61c8db0b12520", "filename": "gcc/cp/parse.y", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2Fparse.y", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2Fparse.y", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparse.y?ref=0213a355281c1ce387d9fae4061d18f6b9bcd54e", "patch": "@@ -1226,14 +1226,14 @@ unary_expr:\n \t| ANDAND identifier\n \t\t{ $$ = finish_label_address_expr ($2); }\n \t| SIZEOF unary_expr  %prec UNARY\n-\t\t{ $$ = expr_sizeof ($2); }\n+\t\t{ $$ = finish_sizeof ($2); }\n \t| SIZEOF '(' type_id ')'  %prec HYPERUNARY\n-\t\t{ $$ = c_sizeof (groktypename ($3.t));\n+\t\t{ $$ = finish_sizeof (groktypename ($3.t));\n \t\t  check_for_new_type (\"sizeof\", $3); }\n \t| ALIGNOF unary_expr  %prec UNARY\n-\t\t{ $$ = grok_alignof ($2); }\n+\t\t{ $$ = finish_alignof ($2); }\n \t| ALIGNOF '(' type_id ')'  %prec HYPERUNARY\n-\t\t{ $$ = c_alignof (groktypename ($3.t)); \n+\t\t{ $$ = finish_alignof (groktypename ($3.t)); \n \t\t  check_for_new_type (\"alignof\", $3); }\n \n \t/* The %prec EMPTY's here are required by the = init initializer"}, {"sha": "fbfd756d8ae25789a8daaae9b7e62b25bd80eb92", "filename": "gcc/cp/semantics.c", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2Fsemantics.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2Fsemantics.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fsemantics.c?ref=0213a355281c1ce387d9fae4061d18f6b9bcd54e", "patch": "@@ -2165,6 +2165,9 @@ check_multiple_declarators ()\n     cp_error (\"multiple declarators in template declaration\");\n }\n \n+/* Implement the __typeof keyword: Return the type of EXPR, suitable for\n+   use as a type-specifier.  */\n+\n tree\n finish_typeof (expr)\n      tree expr;\n@@ -2185,6 +2188,31 @@ finish_typeof (expr)\n   return TREE_TYPE (expr);\n }\n \n+/* Compute the value of the `sizeof' operator.  */\n+\n+tree\n+finish_sizeof (t)\n+     tree t;\n+{\n+  if (processing_template_decl)\n+    return build_min (SIZEOF_EXPR, sizetype, t);\n+\n+  return TYPE_P (t) ? c_sizeof (t) : expr_sizeof (t);\n+}\n+\n+/* Implement the __alignof keyword: Return the minimum required\n+   alignment of T, measured in bytes.  */\n+\n+tree\n+finish_alignof (t)\n+     tree t;\n+{\n+  if (processing_template_decl)\n+    return build_min (ALIGNOF_EXPR, sizetype, t);\n+\n+  return TYPE_P (t) ? c_alignof (t) : c_alignof_expr (t);\n+}\n+\n /* Generate RTL for the statement T, and its substatements, and any\n    other statements at its nesting level.  */\n "}, {"sha": "f5c651051d9319892ba5b9db25a9b0a36cc77967", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=0213a355281c1ce387d9fae4061d18f6b9bcd54e", "patch": "@@ -487,7 +487,8 @@ build_cplus_array_type (elt_type, index_type)\n   tree t;\n   int type_quals = CP_TYPE_QUALS (elt_type);\n \n-  elt_type = TYPE_MAIN_VARIANT (elt_type);\n+  if (type_quals != TYPE_UNQUALIFIED)\n+    elt_type = cp_build_qualified_type (elt_type, TYPE_UNQUALIFIED);\n \n   t = build_cplus_array_type_1 (elt_type, index_type);\n \n@@ -557,9 +558,7 @@ cp_build_qualified_type_real (type, type_quals, complain)\n \treturn error_mark_node;\n \n       /* See if we already have an identically qualified type.  */\n-      for (t = TYPE_MAIN_VARIANT (type); t; t = TYPE_NEXT_VARIANT (t))\n-\tif (CP_TYPE_QUALS (t) == type_quals)\n-\t  break;\n+      t = get_qualified_type (type, type_quals);\n \n       /* If we didn't already have it, create it now.  */\n       if (!t)"}, {"sha": "8a8456555a235d2019c0793762d106e32d46b82f", "filename": "gcc/cp/typeck.c", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2Ftypeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0213a355281c1ce387d9fae4061d18f6b9bcd54e/gcc%2Fcp%2Ftypeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftypeck.c?ref=0213a355281c1ce387d9fae4061d18f6b9bcd54e", "patch": "@@ -1670,35 +1670,6 @@ c_sizeof_nowarn (type)\n \t\t      20001021);\n   return size;\n }\n-\n-/* Implement the __alignof keyword: Return the minimum required\n-   alignment of TYPE, measured in bytes.  */\n-\n-tree\n-c_alignof (type)\n-     tree type;\n-{\n-  enum tree_code code = TREE_CODE (type);\n-  tree t;\n-\n-  if (processing_template_decl)\n-    return build_min (ALIGNOF_EXPR, sizetype, type);\n-\n-  if (code == FUNCTION_TYPE || code == METHOD_TYPE)\n-    t = size_int (FUNCTION_BOUNDARY / BITS_PER_UNIT);\n-  else if (code == VOID_TYPE || code == ERROR_MARK)\n-    t = size_one_node;\n-  else\n-    { \n-      /* Similar to sizeof, __alignof applies to the referant.  */\n-      if (code == REFERENCE_TYPE)\n-\ttype = TREE_TYPE (type);\n-\n-      t = size_int (TYPE_ALIGN (type) / BITS_PER_UNIT);\n-    }\n-\n-  return fold (build1 (NOP_EXPR, c_size_type_node, t));\n-}\n \f\n /* Perform the array-to-pointer and function-to-pointer conversions\n    for EXP.  "}]}