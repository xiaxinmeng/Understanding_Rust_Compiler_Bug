{"sha": "5cdd50a59159258c25a53b0a2bcee9c8d6081812", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWNkZDUwYTU5MTU5MjU4YzI1YTUzYjBhMmJjZWU5YzhkNjA4MTgxMg==", "commit": {"author": {"name": "Benjamin Kosnik", "email": "bkoz@redhat.com", "date": "2002-04-30T19:04:43Z"}, "committer": {"name": "Benjamin Kosnik", "email": "bkoz@gcc.gnu.org", "date": "2002-04-30T19:04:43Z"}, "message": "stdio_filebuf.h: New file.\n\n\n2002-04-30  Benjamin Kosnik  <bkoz@redhat.com>\n\n\t* include/ext/stdio_filebuf.h: New file.\n\t* include/ext/enc_filebuf.h: New file.\n\t* config/io/basic_file_stdio.h (__basic_file::sys_open): Add fd ctor.\n\t* config/io/basic_file_stdio.cc: Same.\n\t* include/bits/fstream.tcc (filebuf::_M_allocate_internal_buffer):\n\tRemove _M_unbuf hacks.\n\t(filebuf::_M_destroy_internal_buffer): Same.\n\t(filebuf::filebuf(cfile, openmode, int_type): Remove definition.\n\t(filebuf::fd): Remove.\n\t* include/std/std_fstream.h (filebuf::_M_unbuf): Remove.\n\t(filebuf::filebuf(__c_file*, openmode, int_type)): Remove.\n\t(filebuf::fd): Remove.\n\t* src/ios.cc (ios_base::_S_ios_create): Change to use specialized\n\tfilebufs.\n\t(ios_base::_S_ios_destroy): Same.\n\t* src/misc-inst.cc (file_filebuf<char>): Add instantiation.\n\t* include/Makefile.am (ext_headers): Add ext_filebuf.h,\n\tstdio_filebuf.h.  * include/Makefile.in: Regenerate.\n\nFrom-SVN: r52961", "tree": {"sha": "675e7bd479fa5aadbb72f715cd7b93fb419ebd2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/675e7bd479fa5aadbb72f715cd7b93fb419ebd2a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5cdd50a59159258c25a53b0a2bcee9c8d6081812", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cdd50a59159258c25a53b0a2bcee9c8d6081812", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5cdd50a59159258c25a53b0a2bcee9c8d6081812", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5cdd50a59159258c25a53b0a2bcee9c8d6081812/comments", "author": null, "committer": null, "parents": [{"sha": "2b46bc671e8df2b62b5e27c4deab768c641cdc79", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b46bc671e8df2b62b5e27c4deab768c641cdc79", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b46bc671e8df2b62b5e27c4deab768c641cdc79"}], "stats": {"total": 382, "additions": 285, "deletions": 97}, "files": [{"sha": "fd02dba763d38021d822b9af28df3a1d6af2a432", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5cdd50a59159258c25a53b0a2bcee9c8d6081812", "patch": "@@ -1,3 +1,24 @@\n+2002-04-30  Benjamin Kosnik  <bkoz@redhat.com>\n+\n+\t* include/ext/stdio_filebuf.h: New file.\n+\t* include/ext/enc_filebuf.h: New file.\t\n+\t* config/io/basic_file_stdio.h (__basic_file::sys_open): Add fd ctor.\n+\t* config/io/basic_file_stdio.cc: Same.\t\n+\t* include/bits/fstream.tcc (filebuf::_M_allocate_internal_buffer):\n+\tRemove _M_unbuf hacks.\n+\t(filebuf::_M_destroy_internal_buffer): Same.\n+\t(filebuf::filebuf(cfile, openmode, int_type): Remove definition.\n+\t(filebuf::fd): Remove.\n+\t* include/std/std_fstream.h (filebuf::_M_unbuf): Remove.\n+\t(filebuf::filebuf(__c_file*, openmode, int_type)): Remove.\n+\t(filebuf::fd): Remove.\t\n+\t* src/ios.cc (ios_base::_S_ios_create): Change to use specialized\n+\tfilebufs.\n+\t(ios_base::_S_ios_destroy): Same.\n+\t* src/misc-inst.cc (file_filebuf<char>): Add instantiation.\n+\t* include/Makefile.am (ext_headers): Add ext_filebuf.h,\n+\tstdio_filebuf.h.  * include/Makefile.in: Regenerate.\n+\n 2002-04-30  Benjamin Kosnik  <bkoz@redhat.com>\n \n \tPR libstdc++/6511"}, {"sha": "93ca6bc5de42c0c5073d4f214c2ec3f5cf5aa992", "filename": "libstdc++-v3/config/io/basic_file_stdio.cc", "status": "modified", "additions": 32, "deletions": 6, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.cc?ref=5cdd50a59159258c25a53b0a2bcee9c8d6081812", "patch": "@@ -74,8 +74,31 @@ namespace std\n     __basic_file* __ret = NULL;\n     if (!this->is_open() && __file)\n       {\n-\t_M_cfile = __file;\n-\t_M_cfile_created = false;\n+ \t_M_cfile = __file;\n+ \t_M_cfile_created = false;\n+  \t__ret = this;\n+      }\n+    return __ret;\n+  }\n+  \n+  __basic_file<char>*\n+  __basic_file<char>::sys_open(int __fd, ios_base::openmode __mode, \n+\t\t\t       bool __del) \n+  {\n+    __basic_file* __ret = NULL;\n+    int __p_mode = 0;\n+    int __rw_mode = 0;\n+    char __c_mode[4];\n+    \n+    _M_open_mode(__mode, __p_mode, __rw_mode, __c_mode);\n+    if (!this->is_open() && (_M_cfile = fdopen(__fd, __c_mode)))\n+      {\n+\t// Iff __del is true, then close will fclose the fd.\n+\t_M_cfile_created = __del;\n+\n+\tif (__fd == 0)\n+\t  setvbuf(_M_cfile, reinterpret_cast<char*>(NULL), _IONBF, 0);\n+\n \t__ret = this;\n       }\n     return __ret;\n@@ -84,7 +107,7 @@ namespace std\n   int\n   __basic_file<char>::sys_getc() \n   { return getc(_M_cfile); }\n-  \n+\n   int\n   __basic_file<char>::sys_ungetc(int __c) \n   { return ungetc(__c, _M_cfile); }\n@@ -112,10 +135,12 @@ namespace std\n   }\n   \n   bool \n-  __basic_file<char>::is_open() const { return _M_cfile != 0; }\n+  __basic_file<char>::is_open() const \n+  { return _M_cfile != 0; }\n   \n   int \n-  __basic_file<char>::fd() { return fileno(_M_cfile) ; }\n+  __basic_file<char>::fd() \n+  { return fileno(_M_cfile) ; }\n   \n   __basic_file<char>* \n   __basic_file<char>::close()\n@@ -157,5 +182,6 @@ namespace std\n   }\n   \n   int \n-  __basic_file<char>::sync() { return fflush(_M_cfile); }\n+  __basic_file<char>::sync() \n+  { return fflush(_M_cfile); }\n }  // namespace std"}, {"sha": "fe6edbb70582c0aa71b6a41a4d5328946a40c677", "filename": "libstdc++-v3/config/io/basic_file_stdio.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fconfig%2Fio%2Fbasic_file_stdio.h?ref=5cdd50a59159258c25a53b0a2bcee9c8d6081812", "patch": "@@ -70,7 +70,10 @@ namespace std\n       open(const char* __name, ios_base::openmode __mode, int __prot = 0664);\n \n       __basic_file*\n-      sys_open(__c_file* __file, ios_base::openmode __mode);\n+      sys_open(__c_file* __file, ios_base::openmode);\n+\n+      __basic_file*\n+      sys_open(int __fd, ios_base::openmode __mode, bool __del);\n \n       int\n       sys_getc();"}, {"sha": "38d1f7b90f86e1acbf7cc67741507a80765a7ce2", "filename": "libstdc++-v3/include/Makefile.am", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Finclude%2FMakefile.am", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.am?ref=5cdd50a59159258c25a53b0a2bcee9c8d6081812", "patch": "@@ -143,6 +143,8 @@ ext_srcdir = ${glibcpp_srcdir}/include/ext\n ext_builddir = ./ext\n ext_headers = \\\n \t${ext_srcdir}/algorithm \\\n+\t${ext_srcdir}/enc_filebuf.h \\\n+\t${ext_srcdir}/stdio_filebuf.h \\\n \t${ext_srcdir}/functional \\\n \t${ext_srcdir}/hash_map \\\n \t${ext_srcdir}/hash_set \\"}, {"sha": "4a2cecd2100e2f41a4819c1ad29fd6acf75b54b9", "filename": "libstdc++-v3/include/Makefile.in", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Finclude%2FMakefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2FMakefile.in?ref=5cdd50a59159258c25a53b0a2bcee9c8d6081812", "patch": "@@ -272,6 +272,8 @@ ext_srcdir = ${glibcpp_srcdir}/include/ext\n ext_builddir = ./ext\n ext_headers = \\\n \t${ext_srcdir}/algorithm \\\n+\t${ext_srcdir}/enc_filebuf.h \\\n+\t${ext_srcdir}/stdio_filebuf.h \\\n \t${ext_srcdir}/functional \\\n \t${ext_srcdir}/hash_map \\\n \t${ext_srcdir}/hash_set \\"}, {"sha": "40b9f32532de85249f3eb2c47dd6008d485104a2", "filename": "libstdc++-v3/include/bits/fstream.tcc", "status": "modified", "additions": 9, "deletions": 51, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Ffstream.tcc?ref=5cdd50a59159258c25a53b0a2bcee9c8d6081812", "patch": "@@ -48,19 +48,14 @@ namespace std\n \t{\n \t  _M_buf_size = _M_buf_size_opt;\n \n-\t  if (_M_buf_size != 1)\n+\t  // Allocate internal buffer.\n+\t  try { _M_buf = new char_type[_M_buf_size]; }\n+\t  catch(...) \n \t    {\n-\t      // Allocate internal buffer.\n-\t      try { _M_buf = new char_type[_M_buf_size]; }\n-\t      catch(...) \n-\t\t{\n-\t\t  delete [] _M_buf;\n-\t\t  __throw_exception_again;\n-\t\t}\n-\t      _M_buf_allocated = true;\n+\t      delete [] _M_buf;\n+\t      __throw_exception_again;\n \t    }\n-\t  else\n-\t    _M_buf = _M_unbuf;\n+\t  _M_buf_allocated = true;\n \t}\n     }\n \n@@ -78,52 +73,15 @@ namespace std\n \t  this->setg(NULL, NULL, NULL);\n \t  this->setp(NULL, NULL);\n \t}\n-      else\n-\t{\n-\t  if (_M_buf == _M_unbuf)\n-\t    {\n-\t      _M_buf = NULL;\n-\t      this->setg(NULL, NULL, NULL);\n-\t      this->setp(NULL, NULL);\n-\t    }\n-\t}\n     }\n \n   template<typename _CharT, typename _Traits>\n     basic_filebuf<_CharT, _Traits>::\n-    basic_filebuf() \n-    : __streambuf_type(), _M_file(&_M_lock), _M_state_cur(__state_type()), \n-    _M_state_beg(__state_type()), _M_buf_allocated(false), \n-    _M_last_overflowed(false)\n+    basic_filebuf() : __streambuf_type(), _M_file(&_M_lock), \n+    _M_state_cur(__state_type()), _M_state_beg(__state_type()), \n+    _M_buf_allocated(false), _M_last_overflowed(false)\n     { _M_buf_unified = true; }\n \n-  template<typename _CharT, typename _Traits>\n-    basic_filebuf<_CharT, _Traits>::\n-    basic_filebuf(__c_file* __f, ios_base::openmode __mode, int_type __s)\n-    : __streambuf_type(),  _M_file(&_M_lock), _M_state_cur(__state_type()), \n-    _M_state_beg(__state_type()), _M_buf_allocated(false), \n-    _M_last_overflowed(false)\n-    {\n-      _M_buf_unified = true; \n-      _M_file.sys_open(__f, __mode);\n-      if (this->is_open())\n-\t{\n-\t  _M_mode = __mode;\n-\t  if (__s)\n-\t    {\n-\t      _M_buf_size_opt = __s;\n-\t      _M_allocate_internal_buffer();\n-\t      _M_set_indeterminate();\n-\t    }\n-\t}\n-    }\n-\n-  template<typename _CharT, typename _Traits>\n-    int\n-    basic_filebuf<_CharT, _Traits>::\n-    fd()\n-    { return _M_file.fd(); }\n-\n   template<typename _CharT, typename _Traits>\n     typename basic_filebuf<_CharT, _Traits>::__filebuf_type* \n     basic_filebuf<_CharT, _Traits>::"}, {"sha": "e1152bd26f9f49de75212deae3db0d1cef2ab66d", "filename": "libstdc++-v3/include/ext/enc_filebuf.h", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fenc_filebuf.h?ref=5cdd50a59159258c25a53b0a2bcee9c8d6081812", "patch": "@@ -0,0 +1,61 @@\n+// __enc_traits layer for filebuf -*- C++ -*-\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <fstream>\n+#include <locale>\n+\n+namespace __gnu_cxx\n+{\n+  // Custom traits type with __enc_traits for state type, all other bits\n+  // equivalent to the required char_traits instantiations.\n+  template<typename _CharT>\n+    struct enc_char_traits: public std::char_traits<_CharT>\n+    {\n+      typedef std::__enc_traits\tstate_type;\n+    };\n+\n+  template<typename _CharT>\n+    class enc_filebuf\n+    : public std::basic_filebuf<_CharT, enc_char_traits<_CharT> >\n+    {\n+    public:\n+      typedef typename enc_char_traits<_CharT>::state_type state_type;\n+      \n+      enc_filebuf(state_type& __state)\n+      : std::basic_filebuf<_CharT, enc_char_traits<_CharT> >()\n+      { \n+\t// Set state type to something useful.\n+\t// Something more than copyconstructible is needed here, so\n+\t// require copyconstructible + assignment operator.\n+\t__glibcpp_class_requires(state_type, _SGIAssignableConcept);\n+\t_M_state_cur = __state;\n+\t_M_state_cur._M_init();\n+      };\n+    };\n+} // namespace __gnu_cxx"}, {"sha": "1b0d5ae72fc9c5d08eae0d89a8549d449eb0dd29", "filename": "libstdc++-v3/include/ext/stdio_filebuf.h", "status": "added", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Fstdio_filebuf.h?ref=5cdd50a59159258c25a53b0a2bcee9c8d6081812", "patch": "@@ -0,0 +1,113 @@\n+// File descriptor layer for filebuf -*- C++ -*-\n+\n+// Copyright (C) 2002 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// As a special exception, you may use this file as part of a free software\n+// library without restriction.  Specifically, if other files instantiate\n+// templates or use macros or inline functions from this file, or you compile\n+// this file and link it with other files to produce an executable, this\n+// file does not by itself cause the resulting executable to be covered by\n+// the GNU General Public License.  This exception does not however\n+// invalidate any other reasons why the executable file might be covered by\n+// the GNU General Public License.\n+\n+#include <fstream>\n+\n+namespace __gnu_cxx\n+{\n+  template<typename _CharT, typename _Traits = std::char_traits<_CharT> >\n+    class stdio_filebuf : public std::basic_filebuf<_CharT, _Traits>\n+    {\n+    public:\n+      // Types:\n+      typedef _CharT                     \t        char_type;\n+      typedef _Traits                    \t        traits_type;\n+      typedef typename traits_type::int_type \t\tint_type;\n+      typedef typename traits_type::pos_type \t\tpos_type;\n+      typedef typename traits_type::off_type \t\toff_type;\n+      \n+    protected:\n+      // Stack-based buffer for unbuffered input.\n+      char_type\t\t\t_M_unbuf[4];\n+      \n+    public:\n+      stdio_filebuf(int __fd, std::ios_base::openmode __mode, bool __del, \n+\t\t    int_type __size);\n+\n+      stdio_filebuf(std::__c_file* __f, std::ios_base::openmode __mode, \n+\t\t    int_type __size = static_cast<int_type>(BUFSIZ));\n+\n+      virtual\n+      ~stdio_filebuf();\n+\n+      int\n+      fd()\n+      { return _M_file.fd(); }\n+    };\n+\n+  template<typename _CharT, typename _Traits>\n+    stdio_filebuf<_CharT, _Traits>::~stdio_filebuf()\n+    { }\n+\n+  template<typename _CharT, typename _Traits>\n+    stdio_filebuf<_CharT, _Traits>::\n+    stdio_filebuf(int __fd, std::ios_base::openmode __mode, bool __del, \n+\t\t  int_type __size)\n+    {\n+      _M_file.sys_open(__fd, __mode, __del);\n+      if (this->is_open())\n+\t{\n+\t  _M_mode = __mode;\n+\t  _M_buf_size_opt = __size;\n+\t  \n+\t  if (__size > 0 && __size < 4)\n+\t    {\n+\t      _M_buf = _M_unbuf;\n+\t      _M_buf_size = __size;\n+\t    }\n+\t  else\n+\t    _M_allocate_internal_buffer();\n+\t  \n+\t  _M_set_indeterminate();\n+\t}\n+    }\n+\n+  template<typename _CharT, typename _Traits>\n+    stdio_filebuf<_CharT, _Traits>::\n+    stdio_filebuf(std::__c_file* __f, std::ios_base::openmode __mode, \n+\t\t  int_type __size)\n+    {\n+      _M_file.sys_open(__f, __mode);\n+      if (this->is_open())\n+\t{\n+\t  _M_mode = __mode;\n+\t  _M_buf_size_opt = __size;\n+\t  \n+\t  if (__size > 0 && __size < 4)\n+\t    {\n+\t      _M_buf = _M_unbuf;\n+\t      _M_buf_size = __size;\n+\t    }\n+\t  else\n+\t    _M_allocate_internal_buffer();\n+\t  \n+\t  _M_set_indeterminate();\n+\t}\n+    }\n+} // namespace __gnu_cxx"}, {"sha": "fb95965a06af3b5593c3ce262f7973a65bfc9640", "filename": "libstdc++-v3/include/std/std_fstream.h", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fstd%2Fstd_fstream.h?ref=5cdd50a59159258c25a53b0a2bcee9c8d6081812", "patch": "@@ -84,12 +84,9 @@ namespace std\n       __state_type\t\t_M_state_cur;\n       __state_type \t\t_M_state_beg;\n \n-      // Set iff _M_buf is allocated memory from _M_allocate_internal_buffer..\n+      // Set iff _M_buf is allocated memory from _M_allocate_internal_buffer.\n       bool\t\t\t_M_buf_allocated;\n       \n-      // Stack-based buffer for unbuffered input.\n-      char_type\t\t\t_M_unbuf[4];\n-\n       // XXX Needed?\n       bool\t\t\t_M_last_overflowed;\n \n@@ -101,14 +98,6 @@ namespace std\n       // Constructors/destructor:\n       basic_filebuf();\n \n-      // Non-standard ctor:\n-      basic_filebuf(__c_file* __f, ios_base::openmode __mode,\n-\t\t    int_type __s = static_cast<int_type>(BUFSIZ));\n-\n-      // Non-standard member:\n-      int\n-      fd();\n-\n       virtual\n       ~basic_filebuf()\n       {"}, {"sha": "36d193fb406b8543a1c2c60f66380349e330d76f", "filename": "libstdc++-v3/src/globals.cc", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fglobals.cc?ref=5cdd50a59159258c25a53b0a2bcee9c8d6081812", "patch": "@@ -31,6 +31,7 @@\n #include <istream>\n #include <ostream>\n #include <locale>\n+#include <ext/stdio_filebuf.h>\n \n // On AIX, and perhaps other systems, library initialization order is\n // not guaranteed.  For example, the static initializers for the main\n@@ -176,8 +177,8 @@ namespace std\n   fake_ostream cerr;\n   fake_ostream clog;\n \n-  typedef char fake_filebuf[sizeof(filebuf)]\n-  __attribute__ ((aligned(__alignof__(filebuf))));\n+  typedef char fake_filebuf[sizeof(__gnu_cxx::stdio_filebuf<char>)]\n+  __attribute__ ((aligned(__alignof__(__gnu_cxx::stdio_filebuf<char>))));\n   fake_filebuf buf_cout;\n   fake_filebuf buf_cin;\n   fake_filebuf buf_cerr;\n@@ -192,8 +193,8 @@ namespace std\n   fake_wostream wcerr;\n   fake_wostream wclog;\n \n-  typedef char fake_wfilebuf[sizeof(wfilebuf)]\n-  __attribute__ ((aligned(__alignof__(wfilebuf))));\n+  typedef char fake_wfilebuf[sizeof(__gnu_cxx::stdio_filebuf<wchar_t>)]\n+  __attribute__ ((aligned(__alignof__(__gnu_cxx::stdio_filebuf<wchar_t>))));\n   fake_wfilebuf buf_wcout;\n   fake_wfilebuf buf_wcin;\n   fake_wfilebuf buf_wcerr;"}, {"sha": "c1167f8c15cf6ee8f2cfe7ac7267bd59d4a754a1", "filename": "libstdc++-v3/src/ios.cc", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Fsrc%2Fios.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fios.cc?ref=5cdd50a59159258c25a53b0a2bcee9c8d6081812", "patch": "@@ -36,8 +36,8 @@\n #include <ostream>\n #include <istream>\n #include <fstream>\n-\n #include <bits/atomicity.h>\n+#include <ext/stdio_filebuf.h>\n \n namespace std \n {\n@@ -46,18 +46,21 @@ namespace std\n   extern ostream cout;\n   extern ostream cerr;\n   extern ostream clog;\n-  extern filebuf buf_cout;\n-  extern filebuf buf_cin;\n-  extern filebuf buf_cerr;\n+\n+  using __gnu_cxx::stdio_filebuf;\n+  extern stdio_filebuf<char> buf_cout;\n+  extern stdio_filebuf<char> buf_cin;\n+  extern stdio_filebuf<char> buf_cerr;\n \n #ifdef _GLIBCPP_USE_WCHAR_T\n   extern wistream wcin;\n   extern wostream wcout;\n   extern wostream wcerr;\n   extern wostream wclog;\n-  extern wfilebuf buf_wcout;\n-  extern wfilebuf buf_wcin;\n-  extern wfilebuf buf_wcerr;\n+\n+  extern stdio_filebuf<wchar_t> buf_wcout;\n+  extern stdio_filebuf<wchar_t> buf_wcin;\n+  extern stdio_filebuf<wchar_t> buf_wcerr;\n #endif\n \n   // Definitions for static const data members of __ios_flags.\n@@ -147,15 +150,15 @@ namespace std\n   void\n   ios_base::Init::_S_ios_create(bool __sync)\n   {\n-    int __out_bufsize = __sync ? 0 : static_cast<int>(BUFSIZ);\n-    int __in_bufsize = __sync ? 1 : static_cast<int>(BUFSIZ);\n+    int __out_size = __sync ? 0 : static_cast<int>(BUFSIZ);\n+    int __in_size = __sync ? 1 : static_cast<int>(BUFSIZ);\n \n     // NB: The file globals.cc creates the four standard files\n     // with NULL buffers. At this point, we swap out the dummy NULL\n     // [io]stream objects and buffers with the real deal.\n-    new (&buf_cout) filebuf(stdout, ios_base::out, __out_bufsize);\n-    new (&buf_cin) filebuf(stdin, ios_base::in, __in_bufsize);\n-    new (&buf_cerr) filebuf(stderr, ios_base::out, __out_bufsize);\n+    new (&buf_cout) stdio_filebuf<char>(stdout, ios_base::out, __out_size);\n+    new (&buf_cin) stdio_filebuf<char>(stdin, ios_base::in, __in_size);\n+    new (&buf_cerr) stdio_filebuf<char>(stderr, ios_base::out, __out_size);\n     new (&cout) ostream(&buf_cout);\n     new (&cin) istream(&buf_cin);\n     new (&cerr) ostream(&buf_cerr);\n@@ -164,9 +167,9 @@ namespace std\n     cerr.flags(ios_base::unitbuf);\n     \n #ifdef _GLIBCPP_USE_WCHAR_T\n-    new (&buf_wcout) wfilebuf(stdout, ios_base::out, __out_bufsize);\n-    new (&buf_wcin) wfilebuf(stdin, ios_base::in, __in_bufsize);\n-    new (&buf_wcerr) wfilebuf(stderr, ios_base::out, __out_bufsize);\n+    new (&buf_wcout) stdio_filebuf<wchar_t>(stdout, ios_base::out, __out_size);\n+    new (&buf_wcin) stdio_filebuf<wchar_t>(stdin, ios_base::in, __in_size);\n+    new (&buf_wcerr) stdio_filebuf<wchar_t>(stderr, ios_base::out, __out_size);\n     new (&wcout) wostream(&buf_wcout);\n     new (&wcin) wistream(&buf_wcin);\n     new (&wcerr) wostream(&buf_wcerr);\n@@ -182,13 +185,14 @@ namespace std\n     // Explicitly call dtors to free any memory that is dynamically\n     // allocated by filebuf ctor or member functions, but don't\n     // deallocate all memory by calling operator delete.\n-    buf_cout.~filebuf();\n-    buf_cin.~filebuf();\n-    buf_cerr.~filebuf();\n+    buf_cout.~stdio_filebuf();\n+    buf_cin.~stdio_filebuf();\n+    buf_cerr.~stdio_filebuf();\n+\n #ifdef _GLIBCPP_USE_WCHAR_T\n-    buf_wcout.~wfilebuf();\n-    buf_wcin.~wfilebuf();\n-    buf_wcerr.~wfilebuf();\n+    buf_wcout.~stdio_filebuf();\n+    buf_wcin.~stdio_filebuf();\n+    buf_wcerr.~stdio_filebuf();\n #endif\n   }\n "}, {"sha": "07a4b1a1aa21f5b60556662164edfdf2947ce5ce", "filename": "libstdc++-v3/src/misc-inst.cc", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Fmisc-inst.cc?ref=5cdd50a59159258c25a53b0a2bcee9c8d6081812", "patch": "@@ -44,6 +44,7 @@\n #include <istream>\n #include <ostream>\n #include <iomanip>\n+#include <ext/stdio_filebuf.h>\n \n // NB: Unnecessary if the .h headers already include these.\n #ifndef  _GLIBCPP_FULLY_COMPLIANT_HEADERS\n@@ -264,4 +265,10 @@ namespace std\n     __copy_streambufs(basic_ios<wchar_t>&, basic_streambuf<wchar_t>*,\n \t\t      basic_streambuf<wchar_t>*); \n #endif\n+  \n+  using __gnu_cxx::stdio_filebuf;\n+  template class stdio_filebuf<char>;\n+#ifdef _GLIBCPP_USE_WCHAR_T\n+  template class stdio_filebuf<wchar_t>;\n+#endif\n } //std"}, {"sha": "9f48229f67afb2baf1d7b42d7b53c01e228dd17e", "filename": "libstdc++-v3/testsuite/27_io/filebuf_members.cc", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5cdd50a59159258c25a53b0a2bcee9c8d6081812/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F27_io%2Ffilebuf_members.cc?ref=5cdd50a59159258c25a53b0a2bcee9c8d6081812", "patch": "@@ -30,6 +30,7 @@\n #include <fcntl.h>\n #include <sys/types.h>\n #include <sys/stat.h>\n+#include <ext/stdio_filebuf.h>\n #include <testsuite_hooks.h>\n \n const char name_01[] = \"filebuf_members-1.tst\";\n@@ -89,7 +90,7 @@ void test_02()\n   FILE* f2 = fopen(name_01, \"r\");\n   VERIFY( f2 != NULL );\n   {\n-    std::filebuf fb(f2, std::ios_base::in, 512);\n+    __gnu_cxx::stdio_filebuf<char> fb(f2, std::ios_base::in, 512);\n   }\n   close_num = fclose(f2);\n   VERIFY( close_num == 0 );\n@@ -115,7 +116,7 @@ void test_03()\n   VERIFY( first_fd != -1 );\n   FILE* first_file = ::fdopen(first_fd, \"r\");\n   VERIFY( first_file != NULL );\n-  std::filebuf fb (first_file, std::ios_base::in);\n+  __gnu_cxx::stdio_filebuf<char> fb(first_file, std::ios_base::in);\n \n   int second_fd = fb.fd();\n "}]}