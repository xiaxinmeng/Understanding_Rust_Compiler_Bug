{"sha": "ffd28c265e6d611983cd27e9332dc799039a3f04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZmZkMjhjMjY1ZTZkNjExOTgzY2QyN2U5MzMyZGM3OTkwMzlhM2YwNA==", "commit": {"author": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-13T08:43:52Z"}, "committer": {"name": "Richard Biener", "email": "rguenther@suse.de", "date": "2021-01-13T10:13:33Z"}, "message": "tree-optimization/98640 - fix bogus sign-extension with VN\n\nVN tried to express a sign extension from int to long of\na trucated quantity with a plain conversion but that loses the\ntruncation.  Since there's no single operand doing truncate plus\nsign extend (there was a proposed SEXT_EXPR to do that at some\npoint mapping to RTL sign_extract) don't bother to appropriately\nmodel this with two ops (which the VN insert machinery doesn't\nhandle and which is unlikely to CSE fully).\n\n2021-01-13  Richard Biener  <rguenther@suse.de>\n\n\tPR tree-optimization/98640\n\t* tree-ssa-sccvn.c (visit_nary_op): Do not try to\n\thandle plus or minus from a truncated operand to be\n\tsign-extended.\n\n\t* gcc.dg/torture/pr98640.c: New testcase.", "tree": {"sha": "c4cc185c351fc1a6805b62c9ea3740ce1835b876", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/c4cc185c351fc1a6805b62c9ea3740ce1835b876"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ffd28c265e6d611983cd27e9332dc799039a3f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd28c265e6d611983cd27e9332dc799039a3f04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ffd28c265e6d611983cd27e9332dc799039a3f04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ffd28c265e6d611983cd27e9332dc799039a3f04/comments", "author": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rguenth", "id": 2046526, "node_id": "MDQ6VXNlcjIwNDY1MjY=", "avatar_url": "https://avatars.githubusercontent.com/u/2046526?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rguenth", "html_url": "https://github.com/rguenth", "followers_url": "https://api.github.com/users/rguenth/followers", "following_url": "https://api.github.com/users/rguenth/following{/other_user}", "gists_url": "https://api.github.com/users/rguenth/gists{/gist_id}", "starred_url": "https://api.github.com/users/rguenth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rguenth/subscriptions", "organizations_url": "https://api.github.com/users/rguenth/orgs", "repos_url": "https://api.github.com/users/rguenth/repos", "events_url": "https://api.github.com/users/rguenth/events{/privacy}", "received_events_url": "https://api.github.com/users/rguenth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d057bfeff70e5b8d00e521844c476f62d51e22c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5d057bfeff70e5b8d00e521844c476f62d51e22c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5d057bfeff70e5b8d00e521844c476f62d51e22c"}], "stats": {"total": 37, "additions": 31, "deletions": 6}, "files": [{"sha": "b187781d614923e0f797e64f3253b34f5e622425", "filename": "gcc/testsuite/gcc.dg/torture/pr98640.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd28c265e6d611983cd27e9332dc799039a3f04/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98640.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd28c265e6d611983cd27e9332dc799039a3f04/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98640.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftorture%2Fpr98640.c?ref=ffd28c265e6d611983cd27e9332dc799039a3f04", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target stdint_types } */\n+\n+#include <stdint.h>\n+\n+uint64_t var_0 = 18128133247277979402ULL;\n+int64_t var_14 = 6557021550272328915LL;\n+uint64_t var_83 = 10966786425750692026ULL;\n+\n+void test()\n+{\n+  var_14 = var_0 + (_Bool)7;\n+  var_83 = 1 + (int)var_0; // 1 + 888395530\n+}\n+\n+int main()\n+{\n+  test();\n+  if (var_83 != 888395531)\n+    __builtin_abort ();\n+  return 0;\n+}"}, {"sha": "588f1b82478ee48406e4a99d656272b7c71589b7", "filename": "gcc/tree-ssa-sccvn.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ffd28c265e6d611983cd27e9332dc799039a3f04/gcc%2Ftree-ssa-sccvn.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ffd28c265e6d611983cd27e9332dc799039a3f04/gcc%2Ftree-ssa-sccvn.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-ssa-sccvn.c?ref=ffd28c265e6d611983cd27e9332dc799039a3f04", "patch": "@@ -4681,7 +4681,7 @@ visit_copy (tree lhs, tree rhs)\n    is the same.  */\n \n static tree\n-valueized_wider_op (tree wide_type, tree op)\n+valueized_wider_op (tree wide_type, tree op, bool allow_truncate)\n {\n   if (TREE_CODE (op) == SSA_NAME)\n     op = vn_valueize (op);\n@@ -4695,7 +4695,7 @@ valueized_wider_op (tree wide_type, tree op)\n     return tem;\n \n   /* Or the op is truncated from some existing value.  */\n-  if (TREE_CODE (op) == SSA_NAME)\n+  if (allow_truncate && TREE_CODE (op) == SSA_NAME)\n     {\n       gimple *def = SSA_NAME_DEF_STMT (op);\n       if (is_gimple_assign (def)\n@@ -4760,12 +4760,15 @@ visit_nary_op (tree lhs, gassign *stmt)\n \t\t  || gimple_assign_rhs_code (def) == MULT_EXPR))\n \t    {\n \t      tree ops[3] = {};\n+\t      /* When requiring a sign-extension we cannot model a\n+\t\t previous truncation with a single op so don't bother.  */\n+\t      bool allow_truncate = TYPE_UNSIGNED (TREE_TYPE (rhs1));\n \t      /* Either we have the op widened available.  */\n-\t      ops[0] = valueized_wider_op (type,\n-\t\t\t\t\t   gimple_assign_rhs1 (def));\n+\t      ops[0] = valueized_wider_op (type, gimple_assign_rhs1 (def),\n+\t\t\t\t\t   allow_truncate);\n \t      if (ops[0])\n-\t\tops[1] = valueized_wider_op (type,\n-\t\t\t\t\t     gimple_assign_rhs2 (def));\n+\t\tops[1] = valueized_wider_op (type, gimple_assign_rhs2 (def),\n+\t\t\t\t\t     allow_truncate);\n \t      if (ops[0] && ops[1])\n \t\t{\n \t\t  ops[0] = vn_nary_op_lookup_pieces"}]}