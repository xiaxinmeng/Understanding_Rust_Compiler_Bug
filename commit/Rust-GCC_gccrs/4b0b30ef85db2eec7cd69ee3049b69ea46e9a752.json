{"sha": "4b0b30ef85db2eec7cd69ee3049b69ea46e9a752", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGIwYjMwZWY4NWRiMmVlYzdjZDY5ZWUzMDQ5YjY5ZWE0NmU5YTc1Mg==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2016-01-18T15:54:26Z"}, "committer": {"name": "Jason Merrill", "email": "jason@gcc.gnu.org", "date": "2016-01-18T15:54:26Z"}, "message": "* cp-gimplify.c (cp_fold) [CONSTRUCTOR]: Don't clobber the input.\n\nFrom-SVN: r232524", "tree": {"sha": "e46a32ffd5183cc7dd2f2917d4d5e5063add2b6f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e46a32ffd5183cc7dd2f2917d4d5e5063add2b6f"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4b0b30ef85db2eec7cd69ee3049b69ea46e9a752", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b0b30ef85db2eec7cd69ee3049b69ea46e9a752", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4b0b30ef85db2eec7cd69ee3049b69ea46e9a752", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4b0b30ef85db2eec7cd69ee3049b69ea46e9a752/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "8d8f3235500c7aedcd93431b9c94c5839c833577", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8d8f3235500c7aedcd93431b9c94c5839c833577", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8d8f3235500c7aedcd93431b9c94c5839c833577"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "9325bb0bf3c07313910c8701ae3b435ff817b2f6", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b30ef85db2eec7cd69ee3049b69ea46e9a752/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b30ef85db2eec7cd69ee3049b69ea46e9a752/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=4b0b30ef85db2eec7cd69ee3049b69ea46e9a752", "patch": "@@ -1,5 +1,7 @@\n 2016-01-18  Jason Merrill  <jason@redhat.com>\n \n+\t* cp-gimplify.c (cp_fold) [CONSTRUCTOR]: Don't clobber the input.\n+\n \t* cp-gimplify.c (cp_fold): Remove unnecessary special cases.\n \n \tPR c++/68767"}, {"sha": "5c4d3c1bb1f8851d7e5f39f23d254d6f04035239", "filename": "gcc/cp/cp-gimplify.c", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4b0b30ef85db2eec7cd69ee3049b69ea46e9a752/gcc%2Fcp%2Fcp-gimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4b0b30ef85db2eec7cd69ee3049b69ea46e9a752/gcc%2Fcp%2Fcp-gimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-gimplify.c?ref=4b0b30ef85db2eec7cd69ee3049b69ea46e9a752", "patch": "@@ -2125,9 +2125,22 @@ cp_fold (tree x)\n       {\n \tunsigned i;\n \tconstructor_elt *p;\n+\tbool changed = false;\n \tvec<constructor_elt, va_gc> *elts = CONSTRUCTOR_ELTS (x);\n+\tvec<constructor_elt, va_gc> *nelts = NULL;\n+\tvec_safe_reserve (nelts, vec_safe_length (elts));\n \tFOR_EACH_VEC_SAFE_ELT (elts, i, p)\n-\t  p->value = cp_fold (p->value);\n+\t  {\n+\t    tree op = cp_fold (p->value);\n+\t    constructor_elt e = { p->index, op };\n+\t    nelts->quick_push (e);\n+\t    if (op != p->value)\n+\t      changed = true;\n+\t  }\n+\tif (changed)\n+\t  x = build_constructor (TREE_TYPE (x), nelts);\n+\telse\n+\t  vec_free (nelts);\n \tbreak;\n       }\n     case TREE_VEC:"}]}