{"sha": "08f3287eefea1d7c244db795d018870e8148d1c8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDhmMzI4N2VlZmVhMWQ3YzI0NGRiNzk1ZDAxODg3MGU4MTQ4ZDFjOA==", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-06T13:11:42Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2021-05-06T13:11:42Z"}, "message": "libstdc++: Implement LWG 3391 changes to move/counted_iterator::base()\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/bits/stl_iterator.h (move_iterator::base): Make the\n\tconst& overload unconstrained and return a const reference as\n\tper LWG 3391.  Make unconditionally noexcept.\n\t(counted_iterator::base): Likewise.\n\t* testsuite/24_iterators/move_iterator/lwg3391.cc: New test.\n\t* testsuite/24_iterators/move_iterator/move_only.cc: Adjust\n\thas_member_base concept to decay-copy the result of base().", "tree": {"sha": "7f87f25a172b0a08b76bdcbcbcf6a96244cb4ac4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f87f25a172b0a08b76bdcbcbcf6a96244cb4ac4"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/08f3287eefea1d7c244db795d018870e8148d1c8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f3287eefea1d7c244db795d018870e8148d1c8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/08f3287eefea1d7c244db795d018870e8148d1c8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/08f3287eefea1d7c244db795d018870e8148d1c8/comments", "author": null, "committer": null, "parents": [{"sha": "ee5361a16ddf478113dc5084d08b8c9ba9e4735e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ee5361a16ddf478113dc5084d08b8c9ba9e4735e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ee5361a16ddf478113dc5084d08b8c9ba9e4735e"}], "stats": {"total": 58, "additions": 48, "deletions": 10}, "files": [{"sha": "2409cd71f86c94557ff96dde5c0cf7e2be58ad7c", "filename": "libstdc++-v3/include/bits/stl_iterator.h", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f3287eefea1d7c244db795d018870e8148d1c8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f3287eefea1d7c244db795d018870e8148d1c8/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_iterator.h?ref=08f3287eefea1d7c244db795d018870e8148d1c8", "patch": "@@ -1409,11 +1409,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n       base() const\n       { return _M_current; }\n #else\n-      constexpr iterator_type\n-      base() const &\n-#if __cpp_lib_concepts\n-\trequires copy_constructible<iterator_type>\n-#endif\n+      constexpr const iterator_type&\n+      base() const & noexcept\n       { return _M_current; }\n \n       constexpr iterator_type\n@@ -2141,10 +2138,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t  return *this;\n \t}\n \n-      constexpr _It\n-      base() const &\n-      noexcept(is_nothrow_copy_constructible_v<_It>)\n-      requires copy_constructible<_It>\n+      constexpr const _It&\n+      base() const & noexcept\n       { return _M_current; }\n \n       constexpr _It"}, {"sha": "18e015777cd827bb9ea90bfc6b085fc7217d38e0", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/lwg3391.cc", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f3287eefea1d7c244db795d018870e8148d1c8/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Flwg3391.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f3287eefea1d7c244db795d018870e8148d1c8/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Flwg3391.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Flwg3391.cc?ref=08f3287eefea1d7c244db795d018870e8148d1c8", "patch": "@@ -0,0 +1,37 @@\n+// Copyright (C) 2021 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+// { dg-options \"-std=gnu++2a\" }\n+// { dg-do compile { target c++2a } }\n+\n+// Verify LWG 3391 changes.\n+\n+#include <iterator>\n+#include <ranges>\n+\n+#include <testsuite_iterators.h>\n+\n+using __gnu_test::test_range;\n+using __gnu_test::input_iterator_wrapper_nocopy;\n+\n+void\n+test01()\n+{\n+  extern test_range<int, input_iterator_wrapper_nocopy> rx;\n+  auto v = rx | std::views::take(5);\n+  std::ranges::begin(v) != std::ranges::end(v);\n+}"}, {"sha": "5537dfbf3cd497581a8e49567727d01d4d9b12a7", "filename": "libstdc++-v3/testsuite/24_iterators/move_iterator/move_only.cc", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/08f3287eefea1d7c244db795d018870e8148d1c8/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fmove_only.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/08f3287eefea1d7c244db795d018870e8148d1c8/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fmove_only.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F24_iterators%2Fmove_iterator%2Fmove_only.cc?ref=08f3287eefea1d7c244db795d018870e8148d1c8", "patch": "@@ -43,7 +43,13 @@ template<> struct std::iterator_traits<move_only_iterator>\n static_assert(std::input_iterator<move_only_iterator>);\n \n template<typename T>\n-  concept has_member_base = requires (T t) { std::forward<T>(t).base(); };\n+  concept has_member_base = requires (T t) {\n+    // LWG 3391 made the const& overload of move_iterator::base()\n+    // unconstrained and return a const reference.  So rather than checking\n+    // whether base() is valid (which is now trivially true in an unevaluated\n+    // context), the below now checks whether decay-copying base() is valid.\n+    [](auto){}(std::forward<T>(t).base());\n+  };\n \n using move_only_move_iterator = std::move_iterator<move_only_iterator>;\n "}]}