{"sha": "091534a9f44229b2643d84a0bfe0f07e678a3772", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDkxNTM0YTlmNDQyMjliMjY0M2Q4NGEwYmZlMGYwN2U2NzhhMzc3Mg==", "commit": {"author": {"name": "Jeff Law", "email": "law@redhat.com", "date": "2015-12-21T04:49:02Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "2015-12-21T04:49:02Z"}, "message": "re PR tree-optimization/64910 (tree reassociation results in poor code)\n\n\tPR tree-optimization/64910\n\t* config/i386/i386.md (testqi_ext_3): Allow HImode.\n\n\tPR tree-optimization/64910\n\t* gcc.target/i386/bittest.c: New test.\n\nFrom-SVN: r231871", "tree": {"sha": "814ab378430a168deedc959e3060adb489ed13ec", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/814ab378430a168deedc959e3060adb489ed13ec"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/091534a9f44229b2643d84a0bfe0f07e678a3772", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091534a9f44229b2643d84a0bfe0f07e678a3772", "html_url": "https://github.com/Rust-GCC/gccrs/commit/091534a9f44229b2643d84a0bfe0f07e678a3772", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/091534a9f44229b2643d84a0bfe0f07e678a3772/comments", "author": null, "committer": null, "parents": [{"sha": "58688a4ec04a2e3d73e2a381f0003f888ad305d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/58688a4ec04a2e3d73e2a381f0003f888ad305d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/58688a4ec04a2e3d73e2a381f0003f888ad305d1"}], "stats": {"total": 34, "additions": 33, "deletions": 1}, "files": [{"sha": "733c2898d25ce539067f82130ef23d5446b3a9d2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091534a9f44229b2643d84a0bfe0f07e678a3772/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091534a9f44229b2643d84a0bfe0f07e678a3772/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=091534a9f44229b2643d84a0bfe0f07e678a3772", "patch": "@@ -1,3 +1,8 @@\n+2015-12-20  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/64910\n+\t* config/i386/i386.md (testqi_ext_3): Allow HImode.\n+\n 2015-12-20  Andrew Pinsi  <apinski@cavium.com>\n \n \t* config/aarch64/atomics.md"}, {"sha": "e8178f3f9b6808f314620895118492e350852d4b", "filename": "gcc/config/i386/i386.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091534a9f44229b2643d84a0bfe0f07e678a3772/gcc%2Fconfig%2Fi386%2Fi386.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091534a9f44229b2643d84a0bfe0f07e678a3772/gcc%2Fconfig%2Fi386%2Fi386.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.md?ref=091534a9f44229b2643d84a0bfe0f07e678a3772", "patch": "@@ -7868,7 +7868,7 @@\n ;; Combine likes to form bit extractions for some tests.  Humor it.\n (define_insn \"*testqi_ext_3\"\n   [(set (reg FLAGS_REG)\n-\t(compare (zero_extract:SWI48\n+\t(compare (zero_extract:SWI248\n \t\t   (match_operand 0 \"nonimmediate_operand\" \"rm\")\n \t\t   (match_operand 1 \"const_int_operand\" \"n\")\n \t\t   (match_operand 2 \"const_int_operand\" \"n\"))"}, {"sha": "725ddef79aecc2efacf70d499732effeb5c1ab8e", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091534a9f44229b2643d84a0bfe0f07e678a3772/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091534a9f44229b2643d84a0bfe0f07e678a3772/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=091534a9f44229b2643d84a0bfe0f07e678a3772", "patch": "@@ -1,3 +1,8 @@\n+2015-12-20  Jeff Law  <law@redhat.com>\n+\n+\tPR tree-optimization/64910\n+\t* gcc.target/i386/bittest.c: New test.\n+\n 2015-12-20  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gnat.dg/complex1.adb: New test."}, {"sha": "7b7ce9eed105f2ddc8621deed6c65cf2c3406029", "filename": "gcc/testsuite/gcc.target/i386/bittest.c", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/091534a9f44229b2643d84a0bfe0f07e678a3772/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbittest.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/091534a9f44229b2643d84a0bfe0f07e678a3772/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbittest.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fbittest.c?ref=091534a9f44229b2643d84a0bfe0f07e678a3772", "patch": "@@ -0,0 +1,22 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+extern int dbg_cnt (void);\n+\n+struct function\n+{\n+  unsigned int calls_setjmp:1;\n+};\n+extern struct function *cfun;\n+unsigned char\n+gate_rtl_cprop (void)\n+{\n+  return !(cfun + 0)->calls_setjmp && dbg_cnt ();\n+}\n+\n+/* This should be implementable without performing a bitmask as we can\n+   just use a test imm,mem.  So instructions which load the object from\n+   memory and mask off bits are unnecessary.  In theory we can just count\n+   the move-with-extension, and and testb instructions.  There should be\n+   only one.  */\n+/* { dg-final { scan-assembler-times \"movzbl|and|testb\" 1 { target { i?86-*-* x86_64-*-*} } } } */"}]}