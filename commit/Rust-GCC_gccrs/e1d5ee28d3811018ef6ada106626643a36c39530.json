{"sha": "e1d5ee28d3811018ef6ada106626643a36c39530", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTFkNWVlMjhkMzgxMTAxOGVmNmFkYTEwNjYyNjY0M2EzNmMzOTUzMA==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2004-08-19T21:37:32Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2004-08-19T21:37:32Z"}, "message": "s390-protos.h (preferred_la_operand_p): Adapt prototype.\n\n\t* config/s390/s390-protos.h (preferred_la_operand_p): Adapt prototype.\n\t* config/s390/s390.c (preferred_la_operand_p): Accept two operands\n\tinstead of one.  Check for strictly legitimate address.\n\t* config/s390/s390.md (\"*la_31\"/\"*la_64\" peepholes): Adapt call\n\tto preferred_la_operand_p, do not call gen_rtx_PLUS in predicate.\n\nFrom-SVN: r86278", "tree": {"sha": "92cf3599fdae8c0d6fa4a05fd58682c4c0d20bbc", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/92cf3599fdae8c0d6fa4a05fd58682c4c0d20bbc"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e1d5ee28d3811018ef6ada106626643a36c39530", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d5ee28d3811018ef6ada106626643a36c39530", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e1d5ee28d3811018ef6ada106626643a36c39530", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e1d5ee28d3811018ef6ada106626643a36c39530/comments", "author": null, "committer": null, "parents": [{"sha": "19114537c55ae227cf8b295be3e2c924965cdb18", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/19114537c55ae227cf8b295be3e2c924965cdb18", "html_url": "https://github.com/Rust-GCC/gccrs/commit/19114537c55ae227cf8b295be3e2c924965cdb18"}], "stats": {"total": 38, "additions": 25, "deletions": 13}, "files": [{"sha": "6ac9d2f91f3f05ed42077e619d90a177cfbd32f6", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d5ee28d3811018ef6ada106626643a36c39530/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d5ee28d3811018ef6ada106626643a36c39530/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=e1d5ee28d3811018ef6ada106626643a36c39530", "patch": "@@ -1,3 +1,11 @@\n+2004-08-19  Ulrich Weigand  <uweigand@de.ibm.com>\n+\n+\t* config/s390/s390-protos.h (preferred_la_operand_p): Adapt prototype.\n+\t* config/s390/s390.c (preferred_la_operand_p): Accept two operands\n+\tinstead of one.  Check for strictly legitimate address.\n+\t* config/s390/s390.md (\"*la_31\"/\"*la_64\" peepholes): Adapt call\n+\tto preferred_la_operand_p, do not call gen_rtx_PLUS in predicate.\n+\n 2004-08-19  Eric Christopher  <echristo@redhat.com>\n \n \t* langhooks-def.h (LANG_HOOKS_UNSAVE_EXPR_NOW): Remove."}, {"sha": "b099122b63f40ba8af86a14b03e982f1d86449c3", "filename": "gcc/config/s390/s390-protos.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d5ee28d3811018ef6ada106626643a36c39530/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d5ee28d3811018ef6ada106626643a36c39530/gcc%2Fconfig%2Fs390%2Fs390-protos.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390-protos.h?ref=e1d5ee28d3811018ef6ada106626643a36c39530", "patch": "@@ -58,7 +58,7 @@ extern void s390_emit_jump (rtx, rtx);\n extern int symbolic_reference_mentioned_p (rtx);\n extern int tls_symbolic_reference_mentioned_p (rtx);\n extern int legitimate_la_operand_p (rtx);\n-extern int preferred_la_operand_p (rtx);\n+extern int preferred_la_operand_p (rtx, rtx);\n extern int legitimate_pic_operand_p (rtx);\n extern int legitimate_constant_p (rtx);\n extern int legitimate_reload_constant_p (rtx);"}, {"sha": "02c245f6f33b35b5dbcd2e34a3b081ba072d0f13", "filename": "gcc/config/s390/s390.c", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d5ee28d3811018ef6ada106626643a36c39530/gcc%2Fconfig%2Fs390%2Fs390.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d5ee28d3811018ef6ada106626643a36c39530/gcc%2Fconfig%2Fs390%2Fs390.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.c?ref=e1d5ee28d3811018ef6ada106626643a36c39530", "patch": "@@ -2495,14 +2495,22 @@ legitimate_la_operand_p (register rtx op)\n   return FALSE;\n }\n \n-/* Return 1 if OP is a valid operand for the LA instruction,\n-   and we prefer to use LA over addition to compute it.  */\n+/* Return 1 if it is valid *and* preferrable to use LA to\n+   compute the sum of OP1 and OP2.  */\n \n int\n-preferred_la_operand_p (register rtx op)\n+preferred_la_operand_p (rtx op1, rtx op2)\n {\n   struct s390_address addr;\n-  if (!s390_decompose_address (op, &addr))\n+\n+  if (op2 != const0_rtx)\n+    op1 = gen_rtx_PLUS (Pmode, op1, op2);\n+\n+  if (!s390_decompose_address (op1, &addr))\n+    return FALSE;\n+  if (addr.base && !REG_OK_FOR_BASE_STRICT_P (addr.base))\n+    return FALSE;\n+  if (addr.indx && !REG_OK_FOR_INDEX_STRICT_P (addr.indx))\n     return FALSE;\n \n   if (!TARGET_64BIT && !addr.pointer)"}, {"sha": "5ca28b5e5c2f5eefc683218fcf3023e94eeb5725", "filename": "gcc/config/s390/s390.md", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e1d5ee28d3811018ef6ada106626643a36c39530/gcc%2Fconfig%2Fs390%2Fs390.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e1d5ee28d3811018ef6ada106626643a36c39530/gcc%2Fconfig%2Fs390%2Fs390.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fs390%2Fs390.md?ref=e1d5ee28d3811018ef6ada106626643a36c39530", "patch": "@@ -971,8 +971,7 @@\n           (match_operand:QI 1 \"address_operand\" \"\"))\n      (clobber (reg:CC 33))])]\n   \"TARGET_64BIT\n-   && strict_memory_address_p (VOIDmode, operands[1])\n-   && preferred_la_operand_p (operands[1])\"\n+   && preferred_la_operand_p (operands[1], const0_rtx)\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"\")\n \n@@ -986,8 +985,7 @@\n      (clobber (reg:CC 33))])]\n   \"TARGET_64BIT\n    && !reg_overlap_mentioned_p (operands[0], operands[2])\n-   && strict_memory_address_p (VOIDmode, gen_rtx_PLUS (DImode, operands[1], operands[2]))\n-   && preferred_la_operand_p (gen_rtx_PLUS (DImode, operands[1], operands[2]))\"\n+   && preferred_la_operand_p (operands[1], operands[2])\"\n   [(set (match_dup 0) (plus:DI (match_dup 1) (match_dup 2)))]\n   \"\")\n \n@@ -1113,8 +1111,7 @@\n           (match_operand:QI 1 \"address_operand\" \"\"))\n      (clobber (reg:CC 33))])]\n   \"!TARGET_64BIT\n-   && strict_memory_address_p (VOIDmode, operands[1])\n-   && preferred_la_operand_p (operands[1])\"\n+   && preferred_la_operand_p (operands[1], const0_rtx)\"\n   [(set (match_dup 0) (match_dup 1))]\n   \"\")\n \n@@ -1128,8 +1125,7 @@\n      (clobber (reg:CC 33))])]\n   \"!TARGET_64BIT\n    && !reg_overlap_mentioned_p (operands[0], operands[2])\n-   && strict_memory_address_p (VOIDmode, gen_rtx_PLUS (SImode, operands[1], operands[2]))\n-   && preferred_la_operand_p (gen_rtx_PLUS (SImode, operands[1], operands[2]))\"\n+   && preferred_la_operand_p (operands[1], operands[2])\"\n   [(set (match_dup 0) (plus:SI (match_dup 1) (match_dup 2)))]\n   \"\")\n "}]}