{"sha": "48f9d59afe864246a4e3fd3608661516a95a7835", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NDhmOWQ1OWFmZTg2NDI0NmE0ZTNmZDM2MDg2NjE1MTZhOTVhNzgzNQ==", "commit": {"author": {"name": "Richard Henderson", "email": "rth@redhat.com", "date": "2011-06-06T09:00:36Z"}, "committer": {"name": "Georg-Johann Lay", "email": "gjl@gcc.gnu.org", "date": "2011-06-06T09:00:36Z"}, "message": "re PR target/42210 (avr: optimizing assignment to a bit field)\n\n\tPR target/42210\n\t* config/avr/predicates.md (const1_operand, const_0_to_7_operand):\n\tNew predicates.\n\t* config/avr/avr.md (\"insv\"): New insn expander.\n\t(\"*movbitqi.1-6.a\", \"*movbitqi.1-6.b\", \"*movbitqi.0\", \"*insv.io\",\n\t\"*insv.not.io\", \"*insv.reg\"): New insns.\n\nCo-Authored-By: Georg-Johann Lay <avr@gjlay.de>\n\nFrom-SVN: r174685", "tree": {"sha": "430502bce9663879ba2d9a769bcb295c462a0813", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/430502bce9663879ba2d9a769bcb295c462a0813"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/48f9d59afe864246a4e3fd3608661516a95a7835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f9d59afe864246a4e3fd3608661516a95a7835", "html_url": "https://github.com/Rust-GCC/gccrs/commit/48f9d59afe864246a4e3fd3608661516a95a7835", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/48f9d59afe864246a4e3fd3608661516a95a7835/comments", "author": null, "committer": {"login": "sprintersb", "id": 8905355, "node_id": "MDQ6VXNlcjg5MDUzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8905355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sprintersb", "html_url": "https://github.com/sprintersb", "followers_url": "https://api.github.com/users/sprintersb/followers", "following_url": "https://api.github.com/users/sprintersb/following{/other_user}", "gists_url": "https://api.github.com/users/sprintersb/gists{/gist_id}", "starred_url": "https://api.github.com/users/sprintersb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sprintersb/subscriptions", "organizations_url": "https://api.github.com/users/sprintersb/orgs", "repos_url": "https://api.github.com/users/sprintersb/repos", "events_url": "https://api.github.com/users/sprintersb/events{/privacy}", "received_events_url": "https://api.github.com/users/sprintersb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efcbfc1c357ca34faf9adf2558362f2e3b1b7b94", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/efcbfc1c357ca34faf9adf2558362f2e3b1b7b94", "html_url": "https://github.com/Rust-GCC/gccrs/commit/efcbfc1c357ca34faf9adf2558362f2e3b1b7b94"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "6e4895eeb0a581ac3f86fe9c7d43a82b98f35ad5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f9d59afe864246a4e3fd3608661516a95a7835/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f9d59afe864246a4e3fd3608661516a95a7835/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=48f9d59afe864246a4e3fd3608661516a95a7835", "patch": "@@ -1,3 +1,13 @@\n+2011-06-06  Richard Henderson  <rth@redhat.com>\n+\t    Georg-Johann Lay  <avr@gjlay.de>\n+\n+\tPR target/42210\n+\t* config/avr/predicates.md (const1_operand, const_0_to_7_operand):\n+\tNew predicates.\n+\t* config/avr/avr.md (\"insv\"): New insn expander.\n+\t(\"*movbitqi.1-6.a\", \"*movbitqi.1-6.b\", \"*movbitqi.0\", \"*insv.io\",\n+\t\"*insv.not.io\", \"*insv.reg\"): New insns.\n+\n 2011-06-06  Hans-Peter Nilsson  <hp@bitrange.com>\n \n \tPR target/49285"}, {"sha": "4138f2b9df98f4e3eb6d37f356018762ade429dc", "filename": "gcc/config/avr/avr.md", "status": "modified", "additions": 113, "deletions": 0, "changes": 113, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f9d59afe864246a4e3fd3608661516a95a7835/gcc%2Fconfig%2Favr%2Favr.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f9d59afe864246a4e3fd3608661516a95a7835/gcc%2Fconfig%2Favr%2Favr.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.md?ref=48f9d59afe864246a4e3fd3608661516a95a7835", "patch": "@@ -3389,6 +3389,119 @@\n   [(set_attr \"length\" \"3\")\n    (set_attr \"cc\" \"clobber\")])\n \n+\f\n+;; Some combiner patterns dealing with bits.\n+;; See PR42210\n+\n+;; Move bit $3.0 into bit $0.$4\n+(define_insn \"*movbitqi.1-6.a\"\n+  [(set (match_operand:QI 0 \"register_operand\"                               \"=r\")\n+        (ior:QI (and:QI (match_operand:QI 1 \"register_operand\"                \"0\")\n+                        (match_operand:QI 2 \"single_zero_operand\"             \"n\"))\n+                (and:QI (ashift:QI (match_operand:QI 3 \"register_operand\"     \"r\")\n+                                   (match_operand:QI 4 \"const_0_to_7_operand\" \"n\"))\n+                        (match_operand:QI 5 \"single_one_operand\"              \"n\"))))]\n+  \"INTVAL(operands[4]) == exact_log2 (~INTVAL(operands[2]) & GET_MODE_MASK (QImode))\n+   && INTVAL(operands[4]) == exact_log2 (INTVAL(operands[5]) & GET_MODE_MASK (QImode))\"\n+  \"bst %3,0\\;bld %0,%4\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"none\")])\n+\n+;; Move bit $3.0 into bit $0.$4\n+;; Variation of above. Unfortunately, there is no canonicalized representation\n+;; of moving around bits.  So what we see here depends on how user writes down\n+;; bit manipulations.\n+(define_insn \"*movbitqi.1-6.b\"\n+  [(set (match_operand:QI 0 \"register_operand\"                            \"=r\")\n+        (ior:QI (and:QI (match_operand:QI 1 \"register_operand\"             \"0\")\n+                        (match_operand:QI 2 \"single_zero_operand\"          \"n\"))\n+                (ashift:QI (and:QI (match_operand:QI 3 \"register_operand\"  \"r\")\n+                                   (const_int 1))\n+                           (match_operand:QI 4 \"const_0_to_7_operand\"      \"n\"))))]\n+  \"INTVAL(operands[4]) == exact_log2 (~INTVAL(operands[2]) & GET_MODE_MASK (QImode))\"\n+  \"bst %3,0\\;bld %0,%4\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"none\")])\n+\n+;; Move bit $3.0 into bit $0.0.\n+;; For bit 0, combiner generates slightly different pattern.\n+(define_insn \"*movbitqi.0\"\n+  [(set (match_operand:QI 0 \"register_operand\"                     \"=r\")\n+        (ior:QI (and:QI (match_operand:QI 1 \"register_operand\"      \"0\")\n+                        (match_operand:QI 2 \"single_zero_operand\"   \"n\"))\n+                (and:QI (match_operand:QI 3 \"register_operand\"      \"r\")\n+                        (const_int 1))))]\n+  \"0 == exact_log2 (~INTVAL(operands[2]) & GET_MODE_MASK (QImode))\"\n+  \"bst %3,0\\;bld %0,0\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"none\")])\n+\n+;; Move bit $2.0 into bit $0.7.\n+;; For bit 7, combiner generates slightly different pattern\n+(define_insn \"*movbitqi.7\"\n+  [(set (match_operand:QI 0 \"register_operand\"                      \"=r\")\n+        (ior:QI (and:QI (match_operand:QI 1 \"register_operand\"       \"0\")\n+                        (const_int 127))\n+                (ashift:QI (match_operand:QI 2 \"register_operand\"    \"r\")\n+                           (const_int 7))))]\n+  \"\"\n+  \"bst %2,0\\;bld %0,7\"\n+  [(set_attr \"length\" \"2\")\n+   (set_attr \"cc\" \"none\")])\n+\n+;; Combiner transforms above four pattern into ZERO_EXTRACT if it sees MEM\n+;; and input/output match.  We provide a special pattern for this, because\n+;; in contrast to a IN/BST/BLD/OUT sequence we need less registers and the\n+;; operation on I/O is atomic.\n+(define_insn \"*insv.io\"\n+  [(set (zero_extract:QI (mem:QI (match_operand 0 \"low_io_address_operand\" \"n,n,n\"))\n+                         (const_int 1)\n+                         (match_operand:QI 1 \"const_0_to_7_operand\"        \"n,n,n\"))\n+        (match_operand:QI 2 \"nonmemory_operand\"                            \"L,P,r\"))]\n+  \"\"\n+  \"@\n+\tcbi %m0-0x20,%1\n+\tsbi %m0-0x20,%1\n+\tsbrc %2,0\\;sbi %m0-0x20,%1\\;sbrs %2,0\\;cbi %m0-0x20,%1\"\n+  [(set_attr \"length\" \"1,1,4\")\n+   (set_attr \"cc\" \"none\")])\n+\n+(define_insn \"*insv.not.io\"\n+  [(set (zero_extract:QI (mem:QI (match_operand 0 \"low_io_address_operand\" \"n\"))\n+                         (const_int 1)\n+                         (match_operand:QI 1 \"const_0_to_7_operand\"        \"n\"))\n+        (not:QI (match_operand:QI 2 \"register_operand\"                     \"r\")))]\n+  \"\"\n+  \"sbrs %2,0\\;sbi %m0-0x20,%1\\;sbrc %2,0\\;cbi %m0-0x20,%1\"\n+  [(set_attr \"length\" \"4\")\n+   (set_attr \"cc\" \"none\")])\n+\n+;; The insv expander.\n+;; We only support 1-bit inserts\n+(define_expand \"insv\"\n+  [(set (zero_extract:QI (match_operand:QI 0 \"register_operand\" \"\")\n+                         (match_operand:QI 1 \"const1_operand\" \"\")        ; width\n+                         (match_operand:QI 2 \"const_0_to_7_operand\" \"\")) ; pos\n+        (match_operand:QI 3 \"nonmemory_operand\" \"\"))]\n+  \"optimize\"\n+  \"\")\n+\n+;; Insert bit $2.0 into $0.$1\n+(define_insn \"*insv.reg\"\n+  [(set (zero_extract:QI (match_operand:QI 0 \"register_operand\"    \"+r,d,d,l,l\")\n+                         (const_int 1)\n+                         (match_operand:QI 1 \"const_0_to_7_operand\" \"n,n,n,n,n\"))\n+        (match_operand:QI 2 \"nonmemory_operand\"                     \"r,L,P,L,P\"))]\n+  \"\"\n+  \"@\n+\tbst %2,0\\;bld %0,%1\n+\tandi %0,lo8(~(1<<%1))\n+\tori %0,lo8(1<<%1)\n+\tclt\\;bld %0,%1\n+\tset\\;bld %0,%1\"\n+  [(set_attr \"length\" \"2,1,1,2,2\")\n+   (set_attr \"cc\" \"none,set_zn,set_zn,none,none\")])\n+\n \f\n ;; Some combine patterns that try to fix bad code when a value is composed\n ;; from byte parts like in PR27663."}, {"sha": "056a1650b7948349513b725fb3d5117b2396fae0", "filename": "gcc/config/avr/predicates.md", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/48f9d59afe864246a4e3fd3608661516a95a7835/gcc%2Fconfig%2Favr%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/48f9d59afe864246a4e3fd3608661516a95a7835/gcc%2Fconfig%2Favr%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Fpredicates.md?ref=48f9d59afe864246a4e3fd3608661516a95a7835", "patch": "@@ -62,6 +62,17 @@\n   (and (match_code \"const_int,const_double\")\n        (match_test \"op == CONST0_RTX (mode)\")))\n \n+;; Return 1 if OP is the one constant integer for MODE.\n+(define_predicate \"const1_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"op == CONST1_RTX (mode)\")))\n+\n+\n+;; Return 1 if OP is constant integer 0..7 for MODE.\n+(define_predicate \"const_0_to_7_operand\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (INTVAL (op), 0, 7)\")))\n+\n ;; Returns true if OP is either the constant zero or a register.\n (define_predicate \"reg_or_0_operand\"\n   (ior (match_operand 0 \"register_operand\")"}]}