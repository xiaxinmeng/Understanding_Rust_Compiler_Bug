{"sha": "ed7656f693dfbf3e69bf1d05a8c69dca31908200", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZWQ3NjU2ZjY5M2RmYmYzZTY5YmYxZDA1YThjNjlkY2EzMTkwODIwMA==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-01-19T19:57:54Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-01-19T19:57:54Z"}, "message": "* ipa-split.c: Spelling fixes.\n\nFrom-SVN: r169019", "tree": {"sha": "86f1ca992ebbe6f1dd09ff69eee1e2fa1be9d495", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/86f1ca992ebbe6f1dd09ff69eee1e2fa1be9d495"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ed7656f693dfbf3e69bf1d05a8c69dca31908200", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed7656f693dfbf3e69bf1d05a8c69dca31908200", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed7656f693dfbf3e69bf1d05a8c69dca31908200", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed7656f693dfbf3e69bf1d05a8c69dca31908200/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "27098b6b4165eff15e9c2b3328763b5e16c47f99", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/27098b6b4165eff15e9c2b3328763b5e16c47f99", "html_url": "https://github.com/Rust-GCC/gccrs/commit/27098b6b4165eff15e9c2b3328763b5e16c47f99"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "50372d8ab842030cb61cd30b5bdf46977a26785e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed7656f693dfbf3e69bf1d05a8c69dca31908200/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed7656f693dfbf3e69bf1d05a8c69dca31908200/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ed7656f693dfbf3e69bf1d05a8c69dca31908200", "patch": "@@ -1,3 +1,7 @@\n+2011-01-19  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* ipa-split.c: Spelling fixes.\n+\n 2011-01-19  Richard Henderson  <rth@redhat.com>\n \n \t* config/mn10300/mn10300.md (mulsi3): Use reg_or_am33_const_operand."}, {"sha": "d5bf35fcc27e018097cc346f4c80759e159040e3", "filename": "gcc/ipa-split.c", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ed7656f693dfbf3e69bf1d05a8c69dca31908200/gcc%2Fipa-split.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ed7656f693dfbf3e69bf1d05a8c69dca31908200/gcc%2Fipa-split.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fipa-split.c?ref=ed7656f693dfbf3e69bf1d05a8c69dca31908200", "patch": "@@ -46,7 +46,7 @@ along with GCC; see the file COPYING3.  If not see\n      }\n \n    When func becomes inlinable and when cheap_test is often true, inlining func,\n-   but not fund.part leads to performance imrovement similar as inlining\n+   but not fund.part leads to performance improvement similar as inlining\n    original func while the code size growth is smaller.\n \n    The pass is organized in three stages:\n@@ -112,7 +112,7 @@ struct split_point\n   /* Size of the partitions.  */\n   unsigned int header_time, header_size, split_time, split_size;\n \n-  /* SSA names that need to be passed into spit funciton.  */\n+  /* SSA names that need to be passed into spit function.  */\n   bitmap ssa_names_to_pass;\n \n   /* Basic block where we split (that will become entry point of new function.  */\n@@ -285,24 +285,24 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n   edge_iterator ei;\n   gimple_stmt_iterator bsi;\n   unsigned int i;\n-  int incomming_freq = 0;\n+  int incoming_freq = 0;\n   tree retval;\n \n   if (dump_file && (dump_flags & TDF_DETAILS))\n     dump_split_point (dump_file, current);\n \n   FOR_EACH_EDGE (e, ei, current->entry_bb->preds)\n     if (!bitmap_bit_p (current->split_bbs, e->src->index))\n-      incomming_freq += EDGE_FREQUENCY (e);\n+      incoming_freq += EDGE_FREQUENCY (e);\n \n   /* Do not split when we would end up calling function anyway.  */\n-  if (incomming_freq\n+  if (incoming_freq\n       >= (ENTRY_BLOCK_PTR->frequency\n \t  * PARAM_VALUE (PARAM_PARTIAL_INLINING_ENTRY_PROBABILITY) / 100))\n     {\n       if (dump_file && (dump_flags & TDF_DETAILS))\n \tfprintf (dump_file,\n-\t\t \"  Refused: incomming frequency is too large.\\n\");\n+\t\t \"  Refused: incoming frequency is too large.\\n\");\n       return;\n     }\n \n@@ -313,8 +313,8 @@ consider_split (struct split_point *current, bitmap non_ssa_vars,\n       return;\n     }\n \n-  /* Verify that PHI args on entry are either virutal or all their operands\n-     incomming from header are the same.  */\n+  /* Verify that PHI args on entry are either virtual or all their operands\n+     incoming from header are the same.  */\n   for (bsi = gsi_start_phis (current->entry_bb); !gsi_end_p (bsi); gsi_next (&bsi))\n     {\n       gimple stmt = gsi_stmt (bsi);\n@@ -540,7 +540,7 @@ find_return_bb (void)\n   return return_bb;\n }\n \n-/* Given return basicblock RETURN_BB, see where return value is really\n+/* Given return basic block RETURN_BB, see where return value is really\n    stored.  */\n static tree\n find_retval (basic_block return_bb)\n@@ -703,7 +703,7 @@ visit_bb (basic_block bb, basic_block return_bb,\n \t\t\t\t\t\t   mark_nonssa_use,\n \t\t\t\t\t\t   mark_nonssa_use);\n     }\n-  /* Record also uses comming from PHI operand in return BB.  */\n+  /* Record also uses coming from PHI operand in return BB.  */\n   FOR_EACH_EDGE (e, ei, bb->succs)\n     if (e->dest == return_bb)\n       {\n@@ -741,11 +741,11 @@ typedef struct\n   bitmap bbs_visited;\n \n   /* Last examined edge in DFS walk.  Since we walk unoriented graph,\n-     the value is up to sum of incomming and outgoing edges of BB.  */\n+     the value is up to sum of incoming and outgoing edges of BB.  */\n   unsigned int edge_num;\n \n   /* Stack entry index of earliest BB reachable from current BB\n-     or any BB visited later in DFS valk.  */\n+     or any BB visited later in DFS walk.  */\n   int earliest;\n \n   /* Overall time and size of all BBs reached from this BB in DFS walk.  */\n@@ -888,8 +888,8 @@ find_split_points (int overall_time, int overall_size)\n \t\t   && (intptr_t)dest->aux < entry->earliest)\n \t    entry->earliest = (intptr_t)dest->aux;\n \t}\n-      /* We are done with examing the edges. pop off the value from stack and\n-\t merge stuff we cummulate during the walk.  */\n+      /* We are done with examining the edges.  Pop off the value from stack\n+\t and merge stuff we accumulate during the walk.  */\n       else if (entry->bb != ENTRY_BLOCK_PTR)\n \t{\n \t  stack_entry *prev = VEC_index (stack_entry, stack,\n@@ -1254,7 +1254,7 @@ execute_split_functions (void)\n   if (node->local.disregard_inline_limits)\n     {\n       if (dump_file)\n-\tfprintf (dump_file, \"Not splitting: disregading inline limits.\\n\");\n+\tfprintf (dump_file, \"Not splitting: disregarding inline limits.\\n\");\n       return 0;\n     }\n   /* This can be relaxed; most of versioning tests actually prevents"}]}