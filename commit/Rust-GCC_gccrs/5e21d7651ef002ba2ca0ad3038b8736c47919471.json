{"sha": "5e21d7651ef002ba2ca0ad3038b8736c47919471", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWUyMWQ3NjUxZWYwMDJiYTJjYTBhZDMwMzhiODczNmM0NzkxOTQ3MQ==", "commit": {"author": {"name": "Wilco Dijkstra", "email": "wdijkstr@arm.com", "date": "2018-11-14T12:45:29Z"}, "committer": {"name": "Wilco Dijkstra", "email": "wilco@gcc.gnu.org", "date": "2018-11-14T12:45:29Z"}, "message": "Simplify floating point comparisons\n\nThis patch implements some of the optimizations discussed in PR71026.\n\nSimplify (C / x >= 0.0) into x >= 0.0 with -funsafe-math-optimizations\n(since C / x can underflow to zero if x is huge, it's not safe otherwise).\nIf C is negative the comparison is reversed.\n\nSimplify (x * C1) > C2 into x > (C2 / C1) with -funsafe-math-optimizations.\nIf C1 is negative the comparison is reversed.\n\n    gcc/\n\tPR 71026/tree-optimization\n\t* match.pd: Simplify floating point comparisons.\n\n    gcc/testsuite/\n\tPR 71026/tree-optimization\n\t* gcc.dg/div-cmp-1.c: New test.\n\t* gcc.dg/div-cmp-2.c: New test.\n\nCo-Authored-By: Jackson Woodruff <jackson.woodruff@arm.com>\n\nFrom-SVN: r266142", "tree": {"sha": "5586a58c4cc31595b4cdedf33ea852fd97d90fc8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5586a58c4cc31595b4cdedf33ea852fd97d90fc8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5e21d7651ef002ba2ca0ad3038b8736c47919471", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e21d7651ef002ba2ca0ad3038b8736c47919471", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5e21d7651ef002ba2ca0ad3038b8736c47919471", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5e21d7651ef002ba2ca0ad3038b8736c47919471/comments", "author": null, "committer": null, "parents": [{"sha": "8cca0163fb468842f85ac8e8638ea6d1ca2f9181", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8cca0163fb468842f85ac8e8638ea6d1ca2f9181", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8cca0163fb468842f85ac8e8638ea6d1ca2f9181"}], "stats": {"total": 101, "additions": 101, "deletions": 0}, "files": [{"sha": "47d4930dd327fb32bea6e69ffce245ffd7fd78dd", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21d7651ef002ba2ca0ad3038b8736c47919471/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21d7651ef002ba2ca0ad3038b8736c47919471/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5e21d7651ef002ba2ca0ad3038b8736c47919471", "patch": "@@ -1,3 +1,9 @@\n+2018-11-14  Wilco Dijkstra  <wdijkstr@arm.com>  \n+\t    Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\tPR 71026/tree-optimization\n+\t* match.pd: Simplify floating point comparisons.\n+\n 2018-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR rtl-optimization/87817"}, {"sha": "e9f9e0c08f7e25022ca7f5dd94f78c4bc0ba9e1e", "filename": "gcc/match.pd", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21d7651ef002ba2ca0ad3038b8736c47919471/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21d7651ef002ba2ca0ad3038b8736c47919471/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=5e21d7651ef002ba2ca0ad3038b8736c47919471", "patch": "@@ -405,6 +405,21 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n  (rdiv @0 (negate @1))\n  (rdiv (negate @0) @1))\n \n+(if (flag_unsafe_math_optimizations)\n+ /* Simplify (C / x op 0.0) to x op 0.0 for C != 0, C != Inf/Nan.\n+    Since C / x may underflow to zero, do this only for unsafe math.  */\n+ (for op (lt le gt ge)\n+      neg_op (gt ge lt le)\n+  (simplify\n+   (op (rdiv REAL_CST@0 @1) real_zerop@2)\n+   (if (!HONOR_SIGNED_ZEROS (@1) && !HONOR_INFINITIES (@1))\n+    (switch\n+     (if (real_less (&dconst0, TREE_REAL_CST_PTR (@0)))\n+      (op @1 @2))\n+     /* For C < 0, use the inverted operator.  */\n+     (if (real_less (TREE_REAL_CST_PTR (@0), &dconst0))\n+      (neg_op @1 @2)))))))\n+\n /* Optimize (X & (-A)) / A where A is a power of 2, to X >> log2(A) */\n (for div (trunc_div ceil_div floor_div round_div exact_div)\n  (simplify\n@@ -4098,6 +4113,22 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        (rdiv @2 @1))\n    (rdiv (op @0 @2) @1)))\n \n+ (for cmp (lt le gt ge)\n+      neg_cmp (gt ge lt le)\n+  /* Simplify (x * C1) cmp C2 -> x cmp (C2 / C1), where C1 != 0.  */\n+  (simplify\n+   (cmp (mult @0 REAL_CST@1) REAL_CST@2)\n+   (with\n+    { tree tem = const_binop (RDIV_EXPR, type, @2, @1); }\n+    (if (tem\n+\t && !(REAL_VALUE_ISINF (TREE_REAL_CST (tem))\n+\t      || (real_zerop (tem) && !real_zerop (@1))))\n+     (switch\n+      (if (real_less (&dconst0, TREE_REAL_CST_PTR (@1)))\n+       (cmp @0 { tem; }))\n+      (if (real_less (TREE_REAL_CST_PTR (@1), &dconst0))\n+       (neg_cmp @0 { tem; })))))))\n+\n  /* Simplify sqrt(x) * sqrt(y) -> sqrt(x*y).  */\n  (for root (SQRT CBRT)\n   (simplify"}, {"sha": "e56706c152afaf7034475fa8e7f5eb81db22c937", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21d7651ef002ba2ca0ad3038b8736c47919471/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21d7651ef002ba2ca0ad3038b8736c47919471/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5e21d7651ef002ba2ca0ad3038b8736c47919471", "patch": "@@ -1,3 +1,10 @@\n+2018-11-14  Wilco Dijkstra  <wdijkstr@arm.com>  \n+\t    Jackson Woodruff  <jackson.woodruff@arm.com>\n+\n+\tPR 71026/tree-optimization\n+\t* gcc.dg/div-cmp-1.c: New test.\n+\t* gcc.dg/div-cmp-2.c: New test.\n+\n 2018-11-14  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR other/88007"}, {"sha": "cd1a5cd3d6fee5a10e9859ca99b344fa3fdb7f5f", "filename": "gcc/testsuite/gcc.dg/div-cmp-1.c", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21d7651ef002ba2ca0ad3038b8736c47919471/gcc%2Ftestsuite%2Fgcc.dg%2Fdiv-cmp-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21d7651ef002ba2ca0ad3038b8736c47919471/gcc%2Ftestsuite%2Fgcc.dg%2Fdiv-cmp-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdiv-cmp-1.c?ref=5e21d7651ef002ba2ca0ad3038b8736c47919471", "patch": "@@ -0,0 +1,29 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -funsafe-math-optimizations -fdump-tree-optimized-raw\" } */\n+\n+int\n+cmp_mul_1 (float x)\n+{\n+  return x * 3 <= 100;\n+}\n+\n+int\n+cmp_mul_2 (float x)\n+{\n+  return x * -5 > 100;\n+}\n+\n+int\n+div_cmp_1 (float x, float y)\n+{\n+  return x / 3 <= y;\n+}\n+\n+int\n+div_cmp_2 (float x, float y)\n+{\n+  return x / 3 <= 1;\n+}\n+\n+/* { dg-final { scan-tree-dump-times \"mult_expr\" 1 \"optimized\" } } */\n+/* { dg-final { scan-tree-dump-not \"rdiv_expr\" \"optimized\" } } */"}, {"sha": "95e5400d777d07f181e9b2bbff957e5e3783cbc6", "filename": "gcc/testsuite/gcc.dg/div-cmp-2.c", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5e21d7651ef002ba2ca0ad3038b8736c47919471/gcc%2Ftestsuite%2Fgcc.dg%2Fdiv-cmp-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5e21d7651ef002ba2ca0ad3038b8736c47919471/gcc%2Ftestsuite%2Fgcc.dg%2Fdiv-cmp-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fdiv-cmp-2.c?ref=5e21d7651ef002ba2ca0ad3038b8736c47919471", "patch": "@@ -0,0 +1,28 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2 -funsafe-math-optimizations -ffinite-math-only -fdump-tree-optimized-raw\" } */\n+\n+int\n+cmp_1 (float x)\n+{\n+  return 5 / x >= 0;\n+}\n+\n+int\n+cmp_2 (float x)\n+{\n+  return 1 / x <= 0;\n+}\n+\n+int\n+cmp_3 (float x)\n+{\n+  return -2 / x >= 0;\n+}\n+\n+int\n+cmp_4 (float x)\n+{\n+  return -5 / x <= 0;\n+}\n+\n+/* { dg-final { scan-tree-dump-not \"rdiv_expr\" \"optimized\" } } */"}]}