{"sha": "e7457c3eacf65a90b11d084434c20cd58ebbdb27", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTc0NTdjM2VhY2Y2NWE5MGIxMWQwODQ0MzRjMjBjZDU4ZWJiZGIyNw==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@suse.de", "date": "2006-10-28T22:02:44Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2006-10-28T22:02:44Z"}, "message": "array (array<>::_M_at): New.\n\n2006-10-28  Paolo Carlini  <pcarlini@suse.de>\n\t\n\t* include/tr1/array (array<>::_M_at): New.\n\t(array<>::at): Fix off-by-one bug, use the above.\n\t* testsuite/tr1/6_containers/array/element_access/\n\tat_out_of_range.cc: Adjust.\n\n\t* include/tr1/array (class array<>): Remove non-conforming default\n\tfor the second parameter.\n\t* include/ext/array_allocator.h: Adjust.\n\n\t* include/tr1/array (array<>::front, array<>::back): Do not return\n\ta reference to memory not belonging to the array when _Nm == 0.\n\nFrom-SVN: r118114", "tree": {"sha": "3206ab3ee6fca21ddeddab4ec985b4751ca13866", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3206ab3ee6fca21ddeddab4ec985b4751ca13866"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e7457c3eacf65a90b11d084434c20cd58ebbdb27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7457c3eacf65a90b11d084434c20cd58ebbdb27", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e7457c3eacf65a90b11d084434c20cd58ebbdb27", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e7457c3eacf65a90b11d084434c20cd58ebbdb27/comments", "author": null, "committer": null, "parents": [{"sha": "f1827a8c6996a8fc972db78323775b19f800a82d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f1827a8c6996a8fc972db78323775b19f800a82d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f1827a8c6996a8fc972db78323775b19f800a82d"}], "stats": {"total": 98, "additions": 70, "deletions": 28}, "files": [{"sha": "cb13016879dc6e4878fb8b46b421234cad8b386d", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7457c3eacf65a90b11d084434c20cd58ebbdb27/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7457c3eacf65a90b11d084434c20cd58ebbdb27/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=e7457c3eacf65a90b11d084434c20cd58ebbdb27", "patch": "@@ -1,3 +1,17 @@\n+2006-10-28  Paolo Carlini  <pcarlini@suse.de>\n+\t\n+\t* include/tr1/array (array<>::_M_at): New.\n+\t(array<>::at): Fix off-by-one bug, use the above.\n+\t* testsuite/tr1/6_containers/array/element_access/\n+\tat_out_of_range.cc: Adjust.\n+\n+\t* include/tr1/array (class array<>): Remove non-conforming default\n+\tfor the second parameter.\n+\t* include/ext/array_allocator.h: Adjust.\n+\n+\t* include/tr1/array (array<>::front, array<>::back): Do not return\n+\ta reference to memory not belonging to the array when _Nm == 0.\n+\n 2006-10-17  Paolo Carlini  <pcarlini@suse.de>\n \n \t* include/bits/locale_facets.tcc (money_get<>::__do_get(iter_type,"}, {"sha": "0bbd97a2d09492f8943d9bdf6c3231e007e4454f", "filename": "libstdc++-v3/include/ext/array_allocator.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7457c3eacf65a90b11d084434c20cd58ebbdb27/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7457c3eacf65a90b11d084434c20cd58ebbdb27/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fext%2Farray_allocator.h?ref=e7457c3eacf65a90b11d084434c20cd58ebbdb27", "patch": "@@ -87,7 +87,7 @@ _GLIBCXX_BEGIN_NAMESPACE(__gnu_cxx)\n    *  @brief  An allocator that uses previously allocated memory.\n    *  This memory can be externally, globally, or otherwise allocated.\n    */\n-  template<typename _Tp, typename _Array = std::tr1::array<_Tp> >\n+  template<typename _Tp, typename _Array = std::tr1::array<_Tp, 1> >\n     class array_allocator : public array_allocator_base<_Tp>\n     {\n     public:"}, {"sha": "43898740a1c1585e022ecaad7ae0590194f29502", "filename": "libstdc++-v3/include/tr1/array", "status": "modified", "additions": 50, "deletions": 24, "changes": 74, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7457c3eacf65a90b11d084434c20cd58ebbdb27/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7457c3eacf65a90b11d084434c20cd58ebbdb27/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Ftr1%2Farray?ref=e7457c3eacf65a90b11d084434c20cd58ebbdb27", "patch": "@@ -39,6 +39,7 @@\n #include <algorithm>\n #include <cstddef>\n #include <bits/functexcept.h>\n+#include <ext/type_traits.h>\n \n //namespace std::tr1\n namespace std\n@@ -47,7 +48,7 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n   /// @brief  struct array [6.2.2].\n   /// NB: Requires complete type _Tp.\n-  template<typename _Tp, std::size_t _Nm = 1>\n+  template<typename _Tp, std::size_t _Nm>\n     struct array\n     {\n       typedef _Tp \t    \t\t\t      value_type;\n@@ -60,9 +61,6 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       typedef std::reverse_iterator<iterator>\t      reverse_iterator;\n       typedef std::reverse_iterator<const_iterator>   const_reverse_iterator;\n \n-      // Compile time constant without other dependencies.\n-      enum { _S_index = _Nm };\n-\n       // Support for zero-sized arrays mandatory.\n       value_type _M_instance[_Nm ? _Nm : 1] __attribute__((__aligned__));\n \n@@ -120,29 +118,21 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       empty() const { return size() == 0; }\n \n       // Element access.\n-      reference \n+      reference\n       operator[](size_type __n)\n       { return _M_instance[__n]; }\n \n-      const_reference \n+      const_reference\n       operator[](size_type __n) const\n       { return _M_instance[__n]; }\n \n-      const_reference \n-      at(size_type __n) const\n-      { \n-\tif (__builtin_expect(__n > _Nm, false))\n-\t  std::__throw_out_of_range(\"array::at\");\n-\treturn _M_instance[__n]; \n-      }\n-\n-      reference \n+      reference\n       at(size_type __n)\n-      { \n-\tif (__builtin_expect(__n > _Nm, false))\n-\t  std::__throw_out_of_range(\"array::at\");\n-\treturn _M_instance[__n]; \n-      }\n+      { return _M_at<_Nm>(__n); }\n+\n+      const_reference\n+      at(size_type __n) const\n+      { return _M_at<_Nm>(__n); }\n \n       reference \n       front()\n@@ -154,11 +144,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n \n       reference \n       back()\n-      { return *(end() - 1); }\n+      { return _Nm ? *(end() - 1) : *end(); }\n \n       const_reference \n       back() const\n-      { return *(end() - 1); }\n+      { return _Nm ? *(end() - 1) : *end(); }\n \n       _Tp* \n       data()\n@@ -167,6 +157,42 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n       const _Tp* \n       data() const\n       { return &_M_instance[0]; }\n+\n+    private:\n+      template<std::size_t _Mm>\n+        typename __gnu_cxx::__enable_if<_Mm, reference>::__type\n+        _M_at(size_type __n)\n+        {\n+\t  if (__builtin_expect(__n >= _Mm, false))\n+\t    std::__throw_out_of_range(\"array::_M_at\");\n+\t  return _M_instance[__n];\n+\t}\n+\n+      // Avoid \"unsigned comparison with zero\" warnings.\n+      template<std::size_t _Mm>\n+        typename __gnu_cxx::__enable_if<!_Mm, reference>::__type\n+        _M_at(size_type)\n+        {\n+\t  std::__throw_out_of_range(\"array::_M_at\");\n+\t  return _M_instance[0];\n+\t}\n+\n+      template<std::size_t _Mm>\n+        typename __gnu_cxx::__enable_if<_Mm, const_reference>::__type\n+        _M_at(size_type __n) const\n+        {\n+\t  if (__builtin_expect(__n >= _Mm, false))\n+\t    std::__throw_out_of_range(\"array::_M_at\");\n+\t  return _M_instance[__n];\n+\t}\n+\n+      template<std::size_t _Mm>\n+        typename __gnu_cxx::__enable_if<!_Mm, const_reference>::__type\n+        _M_at(size_type) const\n+        {\n+\t  std::__throw_out_of_range(\"array::_M_at\");\n+\t  return _M_instance[0];\n+\t}     \n     };\n \n   // Array comparisons.\n@@ -212,11 +238,11 @@ _GLIBCXX_BEGIN_NAMESPACE(tr1)\n   // Tuple interface to class template array [6.2.2.5].\n   template<typename _Tp> class tuple_size;\n   template<int _Int, typename _Tp> class tuple_element;\n-  \n+\n   template<typename _Tp, std::size_t _Nm>\n     struct tuple_size<array<_Tp, _Nm> >\n     { static const int value = _Nm; };\n- \n+\n   template<int _Int, typename _Tp, std::size_t _Nm>\n     struct tuple_element<_Int, array<_Tp, _Nm> >\n     { typedef _Tp type; };"}, {"sha": "10796dccfb8b3cf0d7537d8db6a88e025cbc051d", "filename": "libstdc++-v3/testsuite/tr1/6_containers/array/element_access/at_out_of_range.cc", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e7457c3eacf65a90b11d084434c20cd58ebbdb27/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fat_out_of_range.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e7457c3eacf65a90b11d084434c20cd58ebbdb27/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fat_out_of_range.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Ftr1%2F6_containers%2Farray%2Felement_access%2Fat_out_of_range.cc?ref=e7457c3eacf65a90b11d084434c20cd58ebbdb27", "patch": "@@ -1,6 +1,6 @@\n // 2004-10-20  Benjamin Kosnik  <bkoz@redhat.com>\n //\n-// Copyright (C) 2004 Free Software Foundation, Inc.\n+// Copyright (C) 2004, 2005, 2006 Free Software Foundation, Inc.\n //\n // This file is part of the GNU ISO C++ Library.  This library is free\n // software; you can redistribute it and/or modify it under the\n@@ -22,6 +22,7 @@\n \n #include <tr1/array>\n #include <stdexcept>\n+#include <testsuite_hooks.h>\n \n void\n test01() \n@@ -34,15 +35,17 @@ test01()\n   try\n     {\n       a.at(len);\n+      VERIFY( false );\n     }\n   catch(std::out_of_range& obj)\n     {\n       // Expected.\n+      VERIFY( true );\n     }\n   catch(...)\n     {\n       // Failed.\n-      throw;\n+      VERIFY( false );\n     }\n }\n \n@@ -51,4 +54,3 @@ int main()\n   test01();\n   return 0;\n }\n-"}]}