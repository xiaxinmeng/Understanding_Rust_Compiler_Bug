{"sha": "6387ab2cbd837b41f9eedf0a17ab095c87f29bc5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjM4N2FiMmNiZDgzN2I0MWY5ZWVkZjBhMTdhYjA5NWM4N2YyOWJjNQ==", "commit": {"author": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-11-03T12:02:43Z"}, "committer": {"name": "Oleg Endo", "email": "olegendo@gcc.gnu.org", "date": "2012-11-03T12:02:43Z"}, "message": "sh.c (output_movedouble, [...]): Use multi-line strings for asm.\n\n\t* config/sh/sh.c (output_movedouble, output_far_jump,\n\toutput_ieee_ccmpeq): Use multi-line strings for asm.\n\t(find_regmode_weight): Wrap lines.\n\t(sh_optimize_target_register_callee_saved): Remove commented out\n\tvariable.\n\t(emit_load_ptr): Remove prototype.\n\nFrom-SVN: r193120", "tree": {"sha": "701a446ec41786b76562fc7687468220d83d118e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/701a446ec41786b76562fc7687468220d83d118e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6387ab2cbd837b41f9eedf0a17ab095c87f29bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6387ab2cbd837b41f9eedf0a17ab095c87f29bc5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6387ab2cbd837b41f9eedf0a17ab095c87f29bc5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6387ab2cbd837b41f9eedf0a17ab095c87f29bc5/comments", "author": null, "committer": null, "parents": [{"sha": "4aaf79c2cfeed3c57e923995a02fbe25d592bf25", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4aaf79c2cfeed3c57e923995a02fbe25d592bf25", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4aaf79c2cfeed3c57e923995a02fbe25d592bf25"}], "stats": {"total": 78, "additions": 53, "deletions": 25}, "files": [{"sha": "46734359aed055bd60309709202593c8f7462cd7", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6387ab2cbd837b41f9eedf0a17ab095c87f29bc5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6387ab2cbd837b41f9eedf0a17ab095c87f29bc5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6387ab2cbd837b41f9eedf0a17ab095c87f29bc5", "patch": "@@ -1,3 +1,12 @@\n+2012-11-03  Oleg Endo  <olegendo@gcc.gnu.org>\n+\n+\t* config/sh/sh.c (output_movedouble, output_far_jump,\n+\toutput_ieee_ccmpeq): Use multi-line strings for asm.\n+\t(find_regmode_weight): Wrap lines.\n+\t(sh_optimize_target_register_callee_saved): Remove commented out\n+\tvariable.\n+\t(emit_load_ptr): Remove prototype.\n+\n 2012-11-03  Oleg Endo  <olegendo@gcc.gnu.org>\n \n \tPR target/51244"}, {"sha": "b221a2d4de45e46ec7cddd58c0bbbcba20c483c0", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 44, "deletions": 25, "changes": 69, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6387ab2cbd837b41f9eedf0a17ab095c87f29bc5/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6387ab2cbd837b41f9eedf0a17ab095c87f29bc5/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=6387ab2cbd837b41f9eedf0a17ab095c87f29bc5", "patch": "@@ -2600,21 +2600,25 @@ output_movedouble (rtx insn ATTRIBUTE_UNUSED, rtx operands[],\n \n   if (MEM_P (dst)\n       && GET_CODE (XEXP (dst, 0)) == PRE_DEC)\n-    return \"mov.l\t%T1,%0\\n\\tmov.l\t%1,%0\";\n+    return     \"mov.l\t%T1,%0\"\t\"\\n\"\n+\t   \"\tmov.l\t%1,%0\";\n \n   if (register_operand (dst, mode)\n       && register_operand (src, mode))\n     {\n       if (REGNO (src) == MACH_REG)\n-\treturn \"sts\tmach,%S0\\n\\tsts\tmacl,%R0\";\n+\treturn         \"sts\tmach,%S0\" \"\\n\"\n+\t       \"\tsts\tmacl,%R0\";\n \n       /* When mov.d r1,r2 do r2->r3 then r1->r2;\n          when mov.d r1,r0 do r1->r0 then r2->r1.  */\n \n       if (REGNO (src) + 1 == REGNO (dst))\n-\treturn \"mov\t%T1,%T0\\n\\tmov\t%1,%0\";\n+\treturn         \"mov\t%T1,%T0\" \"\\n\"\n+\t       \"\tmov\t%1,%0\";\n       else\n-\treturn \"mov\t%1,%0\\n\\tmov\t%T1,%T0\";\n+\treturn         \"mov\t%1,%0\" \"\\n\"\n+\t       \"\tmov\t%T1,%T0\";\n     }\n   else if (CONST_INT_P (src))\n     {\n@@ -2654,19 +2658,23 @@ output_movedouble (rtx insn ATTRIBUTE_UNUSED, rtx operands[],\n \t  break;\n \t  \n \tcase LABEL_REF:\n-\t  return \"mov.l\t%1,%0\\n\\tmov.l\t%1+4,%T0\";\n+\t  return       \"mov.l\t%1,%0\" \"\\n\"\n+\t\t \"\tmov.l\t%1+4,%T0\";\n \tcase POST_INC:\n-\t  return \"mov.l\t%1,%0\\n\\tmov.l\t%1,%T0\";\n+\t  return       \"mov.l\t%1,%0\" \"\\n\"\n+\t\t \"\tmov.l\t%1,%T0\";\n \tdefault:\n \t  gcc_unreachable ();\n \t}\n \n       /* Work out the safe way to copy.  Copy into the second half first.  */\n       if (dreg == ptrreg)\n-\treturn \"mov.l\t%T1,%T0\\n\\tmov.l\t%1,%0\";\n+\treturn         \"mov.l\t%T1,%T0\" \"\\n\"\n+\t       \"\tmov.l\t%1,%0\";\n     }\n \n-  return \"mov.l\t%1,%0\\n\\tmov.l\t%T1,%T0\";\n+  return       \"mov.l\t%1,%0\" \"\\n\"\n+\t \"\tmov.l\t%T1,%T0\";\n }\n \n /* Print an instruction which would have gone into a delay slot after\n@@ -2698,28 +2706,41 @@ output_far_jump (rtx insn, rtx op)\n       && offset - get_attr_length (insn) <= 32766)\n     {\n       far = 0;\n-      jump = \"mov.w\t%O0,%1; braf\t%1\";\n+      jump =   \"mov.w\t%O0,%1\" \"\\n\"\n+\t     \"\tbraf\t%1\";\n     }\n   else\n     {\n       far = 1;\n       if (flag_pic)\n \t{\n \t  if (TARGET_SH2)\n-\t    jump = \"mov.l\t%O0,%1; braf\t%1\";\n+\t    jump =     \"mov.l\t%O0,%1\" \"\\n\"\n+\t\t   \"\tbraf\t%1\";\n \t  else\n-\t    jump = \"mov.l\tr0,@-r15; mova\t%O0,r0; mov.l\t@r0,%1; add\tr0,%1; mov.l\t@r15+,r0; jmp\t@%1\";\n+\t    jump =     \"mov.l\tr0,@-r15\"\t\"\\n\"\n+\t\t   \"\tmova\t%O0,r0\"\t\t\"\\n\"\n+\t\t   \"\tmov.l\t@r0,%1\"\t\t\"\\n\"\n+\t\t   \"\tadd\tr0,%1\"\t\t\"\\n\"\n+\t\t   \"\tmov.l\t@r15+,r0\"\t\"\\n\"\n+\t\t   \"\tjmp\t@%1\";\n \t}\n       else\n-\tjump = \"mov.l\t%O0,%1; jmp\t@%1\";\n+\tjump =         \"mov.l\t%O0,%1\" \"\\n\"\n+\t       \"\tjmp\t@%1\";\n     }\n   /* If we have a scratch register available, use it.  */\n   if (NONJUMP_INSN_P ((prev = prev_nonnote_insn (insn)))\n       && INSN_CODE (prev) == CODE_FOR_indirect_jump_scratch)\n     {\n       this_jmp.reg = SET_DEST (XVECEXP (PATTERN (prev), 0, 0));\n       if (REGNO (this_jmp.reg) == R0_REG && flag_pic && ! TARGET_SH2)\n-\tjump = \"mov.l\tr1,@-r15; mova\t%O0,r0; mov.l\t@r0,r1; add\tr1,r0; mov.l\t@r15+,r1; jmp\t@%1\";\n+\tjump =         \"mov.l\tr1,@-r15\"\t\"\\n\"\n+\t       \"\tmova\t%O0,r0\"\t\t\"\\n\"\n+\t       \"\tmov.l\t@r0,r1\"\t\t\"\\n\"\n+\t       \"\tadd\tr1,r0\"\t\t\"\\n\"\n+\t       \"\tmov.l\t@r15+,r1\"\t\"\\n\"\n+\t       \"\tjmp\t@%1\";\n       output_asm_insn (jump, &this_jmp.lab);\n       if (dbr_sequence_length ())\n \tprint_slot (final_sequence);\n@@ -2738,12 +2759,12 @@ output_far_jump (rtx insn, rtx op)\n \t need its value across jumps, so save r13 in it instead of in\n \t the stack.  */\n       if (TARGET_SH5)\n-\toutput_asm_insn (\"lds\tr13, macl\", 0);\n+\toutput_asm_insn (\"lds\tr13,macl\", 0);\n       else\n \toutput_asm_insn (\"mov.l\tr13,@-r15\", 0);\n       output_asm_insn (jump, &this_jmp.lab);\n       if (TARGET_SH5)\n-\toutput_asm_insn (\"sts\tmacl, r13\", 0);\n+\toutput_asm_insn (\"sts\tmacl,r13\", 0);\n       else\n \toutput_asm_insn (\"mov.l\t@r15+,r13\", 0);\n     }\n@@ -2911,7 +2932,8 @@ output_branchy_insn (enum rtx_code code, const char *templ,\n const char *\n output_ieee_ccmpeq (rtx insn, rtx *operands)\n {\n-  return output_branchy_insn (NE, \"bt\\t%l9\\n\\tfcmp/eq\\t%1,%0\",\n+  return output_branchy_insn (NE,      \"bt\t%l9\" \"\\n\"\n+\t\t\t\t  \"\tfcmp/eq\t%1,%0\",\n \t\t\t      insn, operands);\n }\n \f\n@@ -11051,10 +11073,12 @@ find_regmode_weight (basic_block b, enum machine_mode mode)\n \n       if (mode == SFmode)\n \tINSN_REGMODE_WEIGHT (insn, mode) =\n-\t  find_insn_regmode_weight (insn, mode) + 2 * find_insn_regmode_weight (insn, DFmode);\n+\t  find_insn_regmode_weight (insn, mode)\n+\t  + 2 * find_insn_regmode_weight (insn, DFmode);\n       else if (mode == SImode)\n \tINSN_REGMODE_WEIGHT (insn, mode) =\n-\t  find_insn_regmode_weight (insn, mode) + 2 * find_insn_regmode_weight (insn, DImode);\n+\t  find_insn_regmode_weight (insn, mode)\n+\t  + 2 * find_insn_regmode_weight (insn, DImode);\n     }\n }\n \n@@ -11350,15 +11374,12 @@ sh_target_reg_class (void)\n static bool\n sh_optimize_target_register_callee_saved (bool after_prologue_epilogue_gen)\n {\n-  HARD_REG_SET dummy;\n-#if 0\n-  rtx insn;\n-#endif\n-\n   if (! shmedia_space_reserved_for_target_registers)\n     return 0;\n   if (after_prologue_epilogue_gen && ! TARGET_SAVE_ALL_TARGET_REGS)\n     return 0;\n+\n+  HARD_REG_SET dummy;\n   if (calc_live_regs (&dummy) >= 6 * 8)\n     return 1;\n   return 0;\n@@ -12298,8 +12319,6 @@ sh_register_move_cost (enum machine_mode mode,\n   return 2 * ((GET_MODE_SIZE (mode) + 3) / 4U);\n }\n \n-static rtx emit_load_ptr (rtx, rtx);\n-\n static rtx\n emit_load_ptr (rtx reg, rtx addr)\n {"}]}