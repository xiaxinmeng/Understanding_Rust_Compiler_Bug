{"sha": "a10bad862ffabecf122bfbb6b506be673c867b89", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTEwYmFkODYyZmZhYmVjZjEyMmJmYmI2YjUwNmJlNjczYzg2N2I4OQ==", "commit": {"author": {"name": "Chris Jefferson", "email": "chris@bubblescope.net", "date": "2013-09-30T17:42:31Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2013-09-30T17:42:31Z"}, "message": "re PR libstdc++/58437 (Sorting value in reverse order is much slower compare to gcc44)\n\n2013-09-30  Chris Jefferson  <chris@bubblescope.net>\n\n\tPR libstdc++/58437\n\t* include/bits/stl_algo.h (__move_median_first): Rename to\n\t__move_median_to_first, change to take an addition argument.\n\t(__unguarded_partition_pivot): Adjust.\n\t* testsuite/performance/25_algorithms/sort.cc: New.\n\t* testsuite/performance/25_algorithms/sort_heap.cc: Likewise.\n\t* testsuite/performance/25_algorithms/stable_sort.cc: Likewise.\n\nFrom-SVN: r203035", "tree": {"sha": "e2a1924c7a0619ea61ac6abeabf09c8329395080", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e2a1924c7a0619ea61ac6abeabf09c8329395080"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a10bad862ffabecf122bfbb6b506be673c867b89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10bad862ffabecf122bfbb6b506be673c867b89", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a10bad862ffabecf122bfbb6b506be673c867b89", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a10bad862ffabecf122bfbb6b506be673c867b89/comments", "author": {"login": "ChrisJefferson", "id": 811527, "node_id": "MDQ6VXNlcjgxMTUyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/811527?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisJefferson", "html_url": "https://github.com/ChrisJefferson", "followers_url": "https://api.github.com/users/ChrisJefferson/followers", "following_url": "https://api.github.com/users/ChrisJefferson/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisJefferson/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisJefferson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisJefferson/subscriptions", "organizations_url": "https://api.github.com/users/ChrisJefferson/orgs", "repos_url": "https://api.github.com/users/ChrisJefferson/repos", "events_url": "https://api.github.com/users/ChrisJefferson/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisJefferson/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "ca406576e5d17d88540d65f62a4393b8f5fe5d8e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca406576e5d17d88540d65f62a4393b8f5fe5d8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca406576e5d17d88540d65f62a4393b8f5fe5d8e"}], "stats": {"total": 276, "additions": 246, "deletions": 30}, "files": [{"sha": "a607185fbf994cc83e66e884e2b400ffb8c7983a", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10bad862ffabecf122bfbb6b506be673c867b89/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10bad862ffabecf122bfbb6b506be673c867b89/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=a10bad862ffabecf122bfbb6b506be673c867b89", "patch": "@@ -1,3 +1,13 @@\n+2013-09-30  Chris Jefferson  <chris@bubblescope.net>\n+\n+\tPR libstdc++/58437\n+\t* include/bits/stl_algo.h (__move_median_first): Rename to\n+\t__move_median_to_first, change to take an addition argument.\n+\t(__unguarded_partition_pivot): Adjust.\n+\t* testsuite/performance/25_algorithms/sort.cc: New.\n+\t* testsuite/performance/25_algorithms/sort_heap.cc: Likewise.\n+\t* testsuite/performance/25_algorithms/stable_sort.cc: Likewise.\n+\n 2013-09-28  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n \n \t* include/bits/stl_algo.h (remove_copy, remove_copy_if): Declare\n@@ -607,23 +617,23 @@\n \n \t* regex_automaton.h: Rearrange _NFA's layout.\n \t* include/bits/regex_compiler.h: Add _AnyMatcher and _CharMatcher.\n-\t  Rearrange _BracketMatcher's layout.\n-\t  (_BracketMatcher<>::_M_add_char): Use set instead of vector for\n-\t  _M_char_set.\n-\t  (_BracketMatcher<>::_M_add_collating_element): Likewise.\n-\t  (_BracketMatcher<>::_M_make_range): Likewise.\n+\tRearrange _BracketMatcher's layout.\n+\t(_BracketMatcher<>::_M_add_char): Use set instead of vector for\n+\t_M_char_set.\n+\t(_BracketMatcher<>::_M_add_collating_element): Likewise.\n+\t(_BracketMatcher<>::_M_make_range): Likewise.\n \t* include/bits/regex_compiler.tcc (_Compiler<>::_M_atom): Use\n-\t  apropriate constructors of matchers above.\n+\tappropriate constructors of matchers above.\n \t* testsuite/28_regex/algorithms/regex_match/ecma/char/anymatcher.cc:\n-\t  New.\n+\tNew.\n \t* testsuite/28_regex/algorithms/regex_match/ecma/char/backref.cc: New.\n \t* testsuite/28_regex/algorithms/regex_match/ecma/char/empty_range.cc:\n-\t  New.\n+\tNew.\n \t* testsuite/28_regex/algorithms/regex_match/ecma/char/emptygroup.cc:\n-\t  New.\n+\tNew.\n \t* testsuite/28_regex/algorithms/regex_match/ecma/char/hex.cc: New.\n \t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/anymatcher.cc:\n-\t  New.\n+\tNew.\n \t* testsuite/28_regex/algorithms/regex_match/ecma/wchar_t/hex.cc: New.\n \n 2013-08-30  Fran\u00e7ois Dumont  <fdumont@gcc.gnu.org>\n@@ -656,33 +666,33 @@\n 2013-08-29  Tim Shen  <timshen91@gmail.com>\n \n \t* include/bits/regex.h (basic_regex<>::assign): Don't lose _M_traits.\n-\t  (regex_iterator<>::regex_iterator): Return nullptr when regex_search\n-\t     failed.\n-\t  (regex_token_iterator<>::_M_end_of_seq): Should be defined true when\n-\t    _M_result is(not isn't) nullptr.\n+\t(regex_iterator<>::regex_iterator): Return nullptr when regex_search\n+\tfailed.\n+\t(regex_token_iterator<>::_M_end_of_seq): Should be defined true when\n+\t_M_result is(not isn't) nullptr.\n \t* include/bits/regex_compiler.h: Store _Compiler::_M_traits by reference\n-\t  instead of by value.\n+\tinstead of by value.\n \t* include/bits/regex_executor.h (_DFSExecutor<>::_DFSExecutor): Add\n-\t  _M_traits to _DFSExecutor.\n+\t_M_traits to _DFSExecutor.\n \t* include/bits/regex_executor.tcc (__get_executor<>): Pass traits to\n-\t  _DFSExecutor too.\n+\t_DFSExecutor too.\n \t* testsuite/28_regex/algorithms/regex_match/extended/wstring_locale.cc:\n-\t  New.\n+\tNew.\n \t* testsuite/28_regex/iterators/regex_token_iterator/wchar_t/\n-\t  wstring_02.cc: New.\n+\twstring_02.cc: New.\n \n 2013-08-26  Tim Shen  <timshen91@gmail.com>\n \n \t* include/Makefile.am: Add regex_scanner.{h,tcc}.\n \t* include/Makefile.in: Regenerate.\n \t* include/bits/regex.h (match_search): Handle the `__first == __last`\n-\t  situation correctly.\n+\tsituation correctly.\n \t* include/bits/regex_compiler.h: Move _Scanner...\n \t* include/bits/regex_scanner.h: ...to here. New.\n \t* include/bits/regex_compiler.tcc: Move _Scanner...\n \t* include/bits/regex_scanner.tcc: ...to here, too. New.\n \t* include/bits/regex_executor.tcc: Use value instead of reference for\n-\t  submatch.\n+\tsubmatch.\n \t* include/std/regex: Add regex_scanner.h\n \t* testsuite/28_regex/algorithms/regex_match/awk/cstring_01.cc: New.\n \t* testsuite/28_regex/algorithms/regex_match/basic/empty_range.cc: New."}, {"sha": "51cbfeeb35dc83ec9a3481964311fdd953c08b84", "filename": "libstdc++-v3/include/bits/stl_algo.h", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10bad862ffabecf122bfbb6b506be673c867b89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10bad862ffabecf122bfbb6b506be673c867b89/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Fstl_algo.h?ref=a10bad862ffabecf122bfbb6b506be673c867b89", "patch": "@@ -72,25 +72,27 @@ namespace std _GLIBCXX_VISIBILITY(default)\n {\n _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \n-  /// Swaps the median value of *__a, *__b and *__c under __comp to *__a\n+  /// Swaps the median value of *__a, *__b and *__c under __comp to *__result\n   template<typename _Iterator, typename _Compare>\n     void\n-    __move_median_first(_Iterator __a, _Iterator __b, _Iterator __c,\n-\t\t\t_Compare __comp)\n+    __move_median_to_first(_Iterator __result,_Iterator __a, _Iterator __b,\n+\t\t\t   _Iterator __c, _Compare __comp)\n     {\n       if (__comp(__a, __b))\n \t{\n \t  if (__comp(__b, __c))\n-\t    std::iter_swap(__a, __b);\n+\t    std::iter_swap(__result, __b);\n \t  else if (__comp(__a, __c))\n-\t    std::iter_swap(__a, __c);\n+\t    std::iter_swap(__result, __c);\n+\t  else\n+\t    std::iter_swap(__result, __a);\n \t}\n       else if (__comp(__a, __c))\n-\treturn;\n+\tstd::iter_swap(__result, __a);\n       else if (__comp(__b, __c))\n-\tstd::iter_swap(__a, __c);\n+\tstd::iter_swap(__result, __c);\n       else\n-\tstd::iter_swap(__a, __b);\n+\tstd::iter_swap(__result, __b);\n     }\n \n   /// This is an overload used by find algos for the Input Iterator case.\n@@ -1915,7 +1917,8 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n \t\t\t\t_RandomAccessIterator __last, _Compare __comp)\n     {\n       _RandomAccessIterator __mid = __first + (__last - __first) / 2;\n-      std::__move_median_first(__first, __mid, (__last - 1), __comp);\n+      std::__move_median_to_first(__first, __first + 1, __mid, (__last - 2),\n+\t\t\t\t  __comp);\n       return std::__unguarded_partition(__first + 1, __last, __first, __comp);\n     }\n "}, {"sha": "07062ab8b3f487a113e444230c1af25db93a5ba4", "filename": "libstdc++-v3/testsuite/performance/25_algorithms/sort.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10bad862ffabecf122bfbb6b506be673c867b89/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fsort.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10bad862ffabecf122bfbb6b506be673c867b89/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fsort.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fsort.cc?ref=a10bad862ffabecf122bfbb6b506be673c867b89", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <algorithm>\n+#include <testsuite_performance.h>\n+\n+int main()\n+{\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  const int max_size = 10000000;\n+\n+  std::vector<int> v(max_size);\n+\n+  for (int i = 0; i < max_size; ++i)\n+    v[i] = -i;\n+\n+  start_counters(time, resource);\n+  std::sort(v.begin(), v.end());\n+  stop_counters(time, resource);\n+\n+  report_performance(__FILE__, \"reverse\", time, resource);\n+  clear_counters(time, resource);\n+\n+  for (int i = 0; i < max_size; ++i)\n+    v[i] = i;\n+\n+  start_counters(time, resource);\n+  std::sort(v.begin(), v.end());\n+  stop_counters(time, resource);\n+\n+  report_performance(__FILE__, \"forwards\", time, resource);\n+  clear_counters(time, resource);\n+\n+  // a simple psuedo-random series which does not rely on rand() and friends\n+  v[0] = 0;\n+  for (int i = 1; i < max_size; ++i)\n+    v[i] = (v[i-1] + 110211473) * 745988807;\n+\n+  start_counters(time, resource);\n+  std::sort(v.begin(), v.end());\n+  stop_counters(time, resource);\n+\n+  report_performance(__FILE__, \"random\", time, resource);\n+\n+  return 0;\n+}"}, {"sha": "63cb22480336a66dc0e0575d19f2242727772b54", "filename": "libstdc++-v3/testsuite/performance/25_algorithms/sort_heap.cc", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10bad862ffabecf122bfbb6b506be673c867b89/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fsort_heap.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10bad862ffabecf122bfbb6b506be673c867b89/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fsort_heap.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fsort_heap.cc?ref=a10bad862ffabecf122bfbb6b506be673c867b89", "patch": "@@ -0,0 +1,73 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <algorithm>\n+#include <testsuite_performance.h>\n+\n+int main()\n+{\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  const int max_size = 10000000;\n+\n+  std::vector<int> v(max_size);\n+\n+  for (int i = 0; i < max_size; ++i)\n+    v[i] = -i;\n+\n+  start_counters(time, resource);\n+  std::make_heap(v.begin(), v.end());\n+  stop_counters(time, resource);\n+\n+  report_performance(__FILE__, \"make_heap_reverse\", time, resource);\n+  clear_counters(time, resource);\n+\n+  for (int i = 0; i < max_size; ++i)\n+    v[i] = i;\n+\n+  start_counters(time, resource);\n+  std::make_heap(v.begin(), v.end());\n+  stop_counters(time, resource);\n+\n+  report_performance(__FILE__, \"make_heap_forwards\", time, resource);\n+  clear_counters(time, resource);\n+\n+  // a simple psuedo-random series which does not rely on rand() and friends\n+  v[0] = 0;\n+  for (int i = 1; i < max_size; ++i)\n+    v[i] = (v[i-1] + 110211473) * 745988807;\n+\n+  start_counters(time, resource);\n+  std::make_heap(v.begin(), v.end());\n+  stop_counters(time, resource);\n+\n+  report_performance(__FILE__, \"make_heap_random\", time, resource);\n+\n+\n+  start_counters(time, resource);\n+  std::sort_heap(v.begin(), v.end());\n+  stop_counters(time, resource);\n+\n+  report_performance(__FILE__, \"sort_heap\", time, resource);\n+  clear_counters(time, resource);\n+\n+  return 0;\n+}"}, {"sha": "6440eb35f8f537c80d704f3b33cc8402aaffd19e", "filename": "libstdc++-v3/testsuite/performance/25_algorithms/stable_sort.cc", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a10bad862ffabecf122bfbb6b506be673c867b89/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fstable_sort.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a10bad862ffabecf122bfbb6b506be673c867b89/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fstable_sort.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2Fperformance%2F25_algorithms%2Fstable_sort.cc?ref=a10bad862ffabecf122bfbb6b506be673c867b89", "patch": "@@ -0,0 +1,65 @@\n+// Copyright (C) 2013 Free Software Foundation, Inc.\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 3, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING3.  If not see\n+// <http://www.gnu.org/licenses/>.\n+\n+#include <vector>\n+#include <algorithm>\n+#include <testsuite_performance.h>\n+\n+int main()\n+{\n+  using namespace __gnu_test;\n+\n+  time_counter time;\n+  resource_counter resource;\n+\n+  const int max_size = 10000000;\n+\n+  std::vector<int> v(max_size);\n+\n+  for (int i = 0; i < max_size; ++i)\n+    v[i] = -i;\n+\n+  start_counters(time, resource);\n+  std::stable_sort(v.begin(), v.end());\n+  stop_counters(time, resource);\n+\n+  report_performance(__FILE__, \"reverse\", time, resource);\n+  clear_counters(time, resource);\n+\n+  for (int i = 0; i < max_size; ++i)\n+    v[i] = i;\n+\n+  start_counters(time, resource);\n+  std::stable_sort(v.begin(), v.end());\n+  stop_counters(time, resource);\n+\n+  report_performance(__FILE__, \"forwards\", time, resource);\n+  clear_counters(time, resource);\n+\n+  // a simple psuedo-random series which does not rely on rand() and friends\n+  v[0] = 0;\n+  for (int i = 1; i < max_size; ++i)\n+    v[i] = (v[i-1] + 110211473) * 745988807;\n+\n+  start_counters(time, resource);\n+  std::stable_sort(v.begin(), v.end());\n+  stop_counters(time, resource);\n+\n+  report_performance(__FILE__, \"random\", time, resource);\n+\n+  return 0;\n+}"}]}