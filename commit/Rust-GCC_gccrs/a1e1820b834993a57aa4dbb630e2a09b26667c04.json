{"sha": "a1e1820b834993a57aa4dbb630e2a09b26667c04", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTFlMTgyMGI4MzQ5OTNhNTdhYTRkYmI2MzBlMmEwOWIyNjY2N2MwNA==", "commit": {"author": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-27T11:12:14Z"}, "committer": {"name": "Arnaud Charlet", "email": "charlet@gcc.gnu.org", "date": "2015-10-27T11:12:14Z"}, "message": "[multiple changes]\n\n2015-10-27  Javier Miranda  <miranda@adacore.com>\n\n\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Improve previous patch.\n\n2015-10-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_ch12.adb (Analyze_Formal_Package_Declaration): Code cleanup. Set\n\tand restore the value of global flag Ignore_Pragma_SPARK_Mode. A\n\tformal package declaration acts as a package instantation with\n\trespect to SPARK_Mode legality.\n\n2015-10-27  Hristian Kirtchev  <kirtchev@adacore.com>\n\n\t* sem_prag.adb (Check_Constituent_Usage): Use\n\tlogical operators rather than short circuit operators. Emit an\n\terror when a state with visible refinement is not refined.\n\t* snames.ads-tmpl: Add names for detecting\n\tpredefined potentially blocking subprograms.\n\n2015-10-27  Arnaud Charlet  <charlet@adacore.com>\n\n\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Revert previous\n\tchange.\n\t(Expand_Array_Aggregate): Rewrite previous change here\n\tas done for other non GCC back-ends.\n\t(Build_Record_Aggr_Code): Add special case.\n\nFrom-SVN: r229414", "tree": {"sha": "6b3b38e74b8e1c8cdc1371e248bb2283ada3bfda", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6b3b38e74b8e1c8cdc1371e248bb2283ada3bfda"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a1e1820b834993a57aa4dbb630e2a09b26667c04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e1820b834993a57aa4dbb630e2a09b26667c04", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1e1820b834993a57aa4dbb630e2a09b26667c04", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1e1820b834993a57aa4dbb630e2a09b26667c04/comments", "author": null, "committer": null, "parents": [{"sha": "cbf3bf32926abd16cd5e38b2bee912f51cf30bbd", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cbf3bf32926abd16cd5e38b2bee912f51cf30bbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cbf3bf32926abd16cd5e38b2bee912f51cf30bbd"}], "stats": {"total": 166, "additions": 128, "deletions": 38}, "files": [{"sha": "9b17b2cc66892845f98644a9d67a2d661e6753fd", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e1820b834993a57aa4dbb630e2a09b26667c04/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e1820b834993a57aa4dbb630e2a09b26667c04/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=a1e1820b834993a57aa4dbb630e2a09b26667c04", "patch": "@@ -1,3 +1,30 @@\n+2015-10-27  Javier Miranda  <miranda@adacore.com>\n+\n+\t* sem_ch6.adb (Analyze_Subprogram_Body_Helper): Improve previous patch.\n+\n+2015-10-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_ch12.adb (Analyze_Formal_Package_Declaration): Code cleanup. Set\n+\tand restore the value of global flag Ignore_Pragma_SPARK_Mode. A\n+\tformal package declaration acts as a package instantation with\n+\trespect to SPARK_Mode legality.\n+\n+2015-10-27  Hristian Kirtchev  <kirtchev@adacore.com>\n+\n+\t* sem_prag.adb (Check_Constituent_Usage): Use\n+\tlogical operators rather than short circuit operators. Emit an\n+\terror when a state with visible refinement is not refined.\n+\t* snames.ads-tmpl: Add names for detecting\n+\tpredefined potentially blocking subprograms.\n+\n+2015-10-27  Arnaud Charlet  <charlet@adacore.com>\n+\n+\t* exp_aggr.adb (Aggr_Assignment_OK_For_Backend): Revert previous\n+\tchange.\n+\t(Expand_Array_Aggregate): Rewrite previous change here\n+\tas done for other non GCC back-ends.\n+\t(Build_Record_Aggr_Code): Add special case.\n+\n 2015-10-26  Hristian Kirtchev  <kirtchev@adacore.com>\n \n \t* sem_prag.adb (Add_Item_To_Name_Buffer): Update the comment on usage."}, {"sha": "dbc0d7afdf3d47657b9b7acec5b00889b6c1a4d9", "filename": "gcc/ada/exp_aggr.adb", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e1820b834993a57aa4dbb630e2a09b26667c04/gcc%2Fada%2Fexp_aggr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e1820b834993a57aa4dbb630e2a09b26667c04/gcc%2Fada%2Fexp_aggr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_aggr.adb?ref=a1e1820b834993a57aa4dbb630e2a09b26667c04", "patch": "@@ -2924,13 +2924,33 @@ package body Exp_Aggr is\n                   end if;\n                end if;\n \n-               Instr :=\n-                 Make_OK_Assignment_Statement (Loc,\n-                   Name       => Comp_Expr,\n-                   Expression => Expr_Q);\n+               if Generate_C_Code\n+                 and then Nkind (Expr_Q) = N_Aggregate\n+                 and then Is_Array_Type (Etype (Expr_Q))\n+                 and then Present (First_Index (Etype (Expr_Q)))\n+               then\n+                  declare\n+                     Expr_Q_Type : constant Node_Id := Etype (Expr_Q);\n+                  begin\n+                     Append_List_To (L,\n+                       Build_Array_Aggr_Code\n+                         (N           => Expr_Q,\n+                          Ctype       => Component_Type (Expr_Q_Type),\n+                          Index       => First_Index (Expr_Q_Type),\n+                          Into        => Comp_Expr,\n+                          Scalar_Comp => Is_Scalar_Type\n+                                           (Component_Type (Expr_Q_Type))));\n+                  end;\n+\n+               else\n+                  Instr :=\n+                    Make_OK_Assignment_Statement (Loc,\n+                      Name       => Comp_Expr,\n+                      Expression => Expr_Q);\n \n-               Set_No_Ctrl_Actions (Instr);\n-               Append_To (L, Instr);\n+                  Set_No_Ctrl_Actions (Instr);\n+                  Append_To (L, Instr);\n+               end if;\n \n                --  Adjust the tag if tagged (because of possible view\n                --  conversions), unless compiling for a VM where tags are\n@@ -4105,8 +4125,6 @@ package body Exp_Aggr is\n       --  Backend processing by Gigi/gcc is possible only if all the following\n       --  conditions are met:\n \n-      --    0. We are not generating C code\n-\n       --    1. N consists of a single OTHERS choice, possibly recursively\n \n       --    2. The array type is not packed\n@@ -4137,10 +4155,6 @@ package body Exp_Aggr is\n          Nunits    : Nat;\n \n       begin\n-         if Generate_C_Code then\n-            return False;\n-         end if;\n-\n          --  Recurse as far as possible to find the innermost component type\n \n          Ctyp := Etype (N);\n@@ -5476,7 +5490,8 @@ package body Exp_Aggr is\n \n          if (In_Place_Assign_OK_For_Declaration or else Maybe_In_Place_OK)\n            and then not AAMP_On_Target\n-           and then not Generate_SCIL\n+           and then not CodePeer_Mode\n+           and then not Generate_C_Code\n            and then not Possible_Bit_Aligned_Component (Target)\n            and then not Is_Possibly_Unaligned_Slice (Target)\n            and then Aggr_Assignment_OK_For_Backend (N)"}, {"sha": "61803ed290e90bed9cdeb42d720f9ecdac4ef507", "filename": "gcc/ada/sem_ch12.adb", "status": "modified", "additions": 38, "deletions": 22, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e1820b834993a57aa4dbb630e2a09b26667c04/gcc%2Fada%2Fsem_ch12.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e1820b834993a57aa4dbb630e2a09b26667c04/gcc%2Fada%2Fsem_ch12.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch12.adb?ref=a1e1820b834993a57aa4dbb630e2a09b26667c04", "patch": "@@ -2379,22 +2379,17 @@ package body Sem_Ch12 is\n    ----------------------------------------\n \n    procedure Analyze_Formal_Package_Declaration (N : Node_Id) is\n-      Loc              : constant Source_Ptr := Sloc (N);\n-      Pack_Id          : constant Entity_Id  := Defining_Identifier (N);\n-      Formal           : Entity_Id;\n-      Gen_Id           : constant Node_Id    := Name (N);\n-      Gen_Decl         : Node_Id;\n-      Gen_Unit         : Entity_Id;\n-      New_N            : Node_Id;\n-      Parent_Installed : Boolean := False;\n-      Renaming         : Node_Id;\n-      Parent_Instance  : Entity_Id;\n-      Renaming_In_Par  : Entity_Id;\n-      Associations     : Boolean := True;\n+      Gen_Id   : constant Node_Id    := Name (N);\n+      Loc      : constant Source_Ptr := Sloc (N);\n+      Pack_Id  : constant Entity_Id  := Defining_Identifier (N);\n+      Formal   : Entity_Id;\n+      Gen_Decl : Node_Id;\n+      Gen_Unit : Entity_Id;\n+      Renaming : Node_Id;\n \n       Vis_Prims_List : Elist_Id := No_Elist;\n       --  List of primitives made temporarily visible in the instantiation\n-      --  to match the visibility of the formal type\n+      --  to match the visibility of the formal type.\n \n       function Build_Local_Package return Node_Id;\n       --  The formal package is rewritten so that its parameters are replaced\n@@ -2506,6 +2501,17 @@ package body Sem_Ch12 is\n          return Pack_Decl;\n       end Build_Local_Package;\n \n+      --  Local variables\n+\n+      Save_IPSM : constant Boolean := Ignore_Pragma_SPARK_Mode;\n+      --  Save flag Ignore_Pragma_SPARK_Mode for restore on exit\n+\n+      Associations     : Boolean := True;\n+      New_N            : Node_Id;\n+      Parent_Installed : Boolean := False;\n+      Parent_Instance  : Entity_Id;\n+      Renaming_In_Par  : Entity_Id;\n+\n    --  Start of processing for Analyze_Formal_Package_Declaration\n \n    begin\n@@ -2605,19 +2611,18 @@ package body Sem_Ch12 is\n       Formal := New_Copy (Pack_Id);\n       Create_Instantiation_Source (N, Gen_Unit, False, S_Adjustment);\n \n-      begin\n-         --  Make local generic without formals. The formals will be replaced\n-         --  with internal declarations.\n+      --  Make local generic without formals. The formals will be replaced with\n+      --  internal declarations.\n \n+      begin\n          New_N := Build_Local_Package;\n \n-         --  If there are errors in the parameter list, Analyze_Associations\n-         --  raises Instantiation_Error. Patch the declaration to prevent\n-         --  further exception propagation.\n+      --  If there are errors in the parameter list, Analyze_Associations\n+      --  raises Instantiation_Error. Patch the declaration to prevent further\n+      --  exception propagation.\n \n       exception\n          when Instantiation_Error =>\n-\n             Enter_Name (Formal);\n             Set_Ekind  (Formal, E_Variable);\n             Set_Etype  (Formal, Any_Type);\n@@ -2669,6 +2674,15 @@ package body Sem_Ch12 is\n          Append_Entity (Renaming_In_Par, Parent_Instance);\n       end if;\n \n+      --  A formal package declaration behaves as a package instantiation with\n+      --  respect to SPARK_Mode \"off\". If the annotation is \"off\" or altogether\n+      --  missing, set the global flag which signals Analyze_Pragma to ingnore\n+      --  all SPARK_Mode pragmas within the generic_package_name.\n+\n+      if SPARK_Mode /= On then\n+         Ignore_Pragma_SPARK_Mode := True;\n+      end if;\n+\n       Analyze (Specification (N));\n \n       --  The formals for which associations are provided are not visible\n@@ -2714,8 +2728,8 @@ package body Sem_Ch12 is\n \n       Set_Has_Completion (Formal, True);\n \n-      --  Add semantic information to the original defining identifier.\n-      --  for ASIS use.\n+      --  Add semantic information to the original defining identifier for ASIS\n+      --  use.\n \n       Set_Ekind (Pack_Id, E_Package);\n       Set_Etype (Pack_Id, Standard_Void_Type);\n@@ -2726,6 +2740,8 @@ package body Sem_Ch12 is\n       if Has_Aspects (N) then\n          Analyze_Aspect_Specifications (N, Pack_Id);\n       end if;\n+\n+      Ignore_Pragma_SPARK_Mode := Save_IPSM;\n    end Analyze_Formal_Package_Declaration;\n \n    ---------------------------------"}, {"sha": "85d864a2c0ca50e0ce14c9b54498fc15829a568a", "filename": "gcc/ada/sem_ch6.adb", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e1820b834993a57aa4dbb630e2a09b26667c04/gcc%2Fada%2Fsem_ch6.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e1820b834993a57aa4dbb630e2a09b26667c04/gcc%2Fada%2Fsem_ch6.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch6.adb?ref=a1e1820b834993a57aa4dbb630e2a09b26667c04", "patch": "@@ -4062,7 +4062,7 @@ package body Sem_Ch6 is\n       --  that carries the return value.\n \n       if Present (Cloned_Body_For_C) then\n-         Replace (N,\n+         Rewrite (N,\n            Build_Procedure_Body_Form (Spec_Id, Cloned_Body_For_C));\n          Analyze (N);\n       end if;"}, {"sha": "8ac388e237f0472e27171c1d0d118031c3ba43a6", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e1820b834993a57aa4dbb630e2a09b26667c04/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e1820b834993a57aa4dbb630e2a09b26667c04/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=a1e1820b834993a57aa4dbb630e2a09b26667c04", "patch": "@@ -24184,15 +24184,24 @@ package body Sem_Prag is\n             --  A pair of one Input and one Output constituent is a valid\n             --  completion.\n \n-            elsif In_Seen and then Out_Seen then\n+            elsif In_Seen and Out_Seen then\n                null;\n \n             --  A single Output constituent is a valid completion only when\n             --  some of the other constituents are missing (SPARK RM 7.2.4(5)).\n \n-            elsif Has_Missing and then Out_Seen then\n+            elsif Out_Seen and Has_Missing then\n                null;\n \n+            --  The state lacks a completion\n+\n+            elsif not In_Seen and not In_Out_Seen and not Out_Seen then\n+               SPARK_Msg_NE\n+                 (\"missing global refinement of state &\", N, State_Id);\n+\n+            --  Otherwise the state has a malformed completion where at least\n+            --  one of the constituents has a different mode.\n+\n             else\n                SPARK_Msg_NE\n                  (\"global refinement of state & redefines the mode of its \""}, {"sha": "ba4053dab51a8f431e47d5126214074e6430e982", "filename": "gcc/ada/snames.ads-tmpl", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a1e1820b834993a57aa4dbb630e2a09b26667c04/gcc%2Fada%2Fsnames.ads-tmpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a1e1820b834993a57aa4dbb630e2a09b26667c04/gcc%2Fada%2Fsnames.ads-tmpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsnames.ads-tmpl?ref=a1e1820b834993a57aa4dbb630e2a09b26667c04", "patch": "@@ -261,6 +261,29 @@ package Snames is\n    Name_Wide_Text_IO                   : constant Name_Id := N + $;\n    Name_Wide_Wide_Text_IO              : constant Name_Id := N + $;\n \n+   --  Names for detecting predefined potentially blocking subprograms\n+\n+   Name_Abort_Task                     : constant Name_Id := N + $;\n+   Name_Bounded_IO                     : constant Name_Id := N + $;\n+   Name_C_Streams                      : constant Name_Id := N + $;\n+   Name_Complex_IO                     : constant Name_Id := N + $;\n+   Name_Directories                    : constant Name_Id := N + $;\n+   Name_Direct_IO                      : constant Name_Id := N + $;\n+   Name_Dispatching                    : constant Name_Id := N + $;\n+   Name_Editing                        : constant Name_Id := N + $;\n+   Name_EDF                            : constant Name_Id := N + $;\n+   Name_Reset_Standard_Files           : constant Name_Id := N + $;\n+   Name_Sequential_IO                  : constant Name_Id := N + $;\n+   Name_Streams                        : constant Name_Id := N + $;\n+   Name_Suspend_Until_True             : constant Name_Id := N + $;\n+   Name_Suspend_Until_True_And_Set_Deadline : constant Name_Id := N + $;\n+   Name_Synchronous_Barriers           : constant Name_Id := N + $;\n+   Name_Task_Identification            : constant Name_Id := N + $;\n+   Name_Text_Streams                   : constant Name_Id := N + $;\n+   Name_Unbounded_IO                   : constant Name_Id := N + $;\n+   Name_Wait_For_Release               : constant Name_Id := N + $;\n+   Name_Yield                          : constant Name_Id := N + $;\n+\n    --  Names of implementations of the distributed systems annex\n \n    First_PCS_Name                      : constant Name_Id := N + $;"}]}