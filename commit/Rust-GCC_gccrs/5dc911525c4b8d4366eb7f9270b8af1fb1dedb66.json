{"sha": "5dc911525c4b8d4366eb7f9270b8af1fb1dedb66", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWRjOTExNTI1YzRiOGQ0MzY2ZWI3ZjkyNzBiOGFmMWZiMWRlZGI2Ng==", "commit": {"author": {"name": "Paolo Carlini", "email": "pcarlini@unitus.it", "date": "2003-02-06T18:08:51Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2003-02-06T18:08:51Z"}, "message": "re PR libstdc++/9548 (Incorrect results from setf(ios::fixed) and precision(-1) [DR231])\n\n2003-02-06  Paolo Carlini  <pcarlini@unitus.it>\n\n\tPR libstdc++/9548\n\tImplement resolution of DR 231 (Ready)\n\t* include/bits/locale_facets.h (__num_base::_S_format_float):\n\tChange declaration: return void, remove __prec parameter.\n\t* src/locale.cc (__num_base::_S_format_float): Implement\n\tresolution of DR 231.\n\t* include/bits/locale_facets.tcc (num_put::_M_convert_float):\n\tTweak uses. Check for negative precision.\n\t* testsuite/22_locale/num_put/put/char/6.cc: Add\n\t* testsuite/22_locale/num_put/put/wchar_t/6.cc: Likewise.\n\nFrom-SVN: r62492", "tree": {"sha": "e0bf8cbb43f9951a50d4f791b1c6c73a5cbece85", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/e0bf8cbb43f9951a50d4f791b1c6c73a5cbece85"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66/comments", "author": null, "committer": null, "parents": [{"sha": "a1ba6e15ead41c8a0efd6add155553968ce3d64e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a1ba6e15ead41c8a0efd6add155553968ce3d64e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a1ba6e15ead41c8a0efd6add155553968ce3d64e"}], "stats": {"total": 179, "additions": 148, "deletions": 31}, "files": [{"sha": "716943f133da91bc1e5d315c74a25d8f439817f6", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=5dc911525c4b8d4366eb7f9270b8af1fb1dedb66", "patch": "@@ -1,3 +1,16 @@\n+2003-02-06  Paolo Carlini  <pcarlini@unitus.it>\n+\n+\tPR libstdc++/9548\n+\tImplement resolution of DR 231 (Ready)\n+\t* include/bits/locale_facets.h (__num_base::_S_format_float):\n+\tChange declaration: return void, remove __prec parameter.\n+\t* src/locale.cc (__num_base::_S_format_float): Implement\n+\tresolution of DR 231.\n+\t* include/bits/locale_facets.tcc (num_put::_M_convert_float):\n+\tTweak uses. Check for negative precision.\n+\t* testsuite/22_locale/num_put/put/char/6.cc: Add\n+\t* testsuite/22_locale/num_put/put/wchar_t/6.cc: Likewise.\n+\n 2003-02-06  Peter Soetens  <peter.soetens@mech.kuleuven.ac.be>\n \n \t* config/io/basic_file_libio.h: Fixups."}, {"sha": "59f9d5bb530ac6691d2513f42551cf4e76d44032", "filename": "libstdc++-v3/include/bits/locale_facets.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.h?ref=5dc911525c4b8d4366eb7f9270b8af1fb1dedb66", "patch": "@@ -546,9 +546,8 @@ namespace std\n \n     // num_put\n     // Construct and return valid scanf format for floating point types.\n-    static bool\n-    _S_format_float(const ios_base& __io, char* __fptr, char __mod, \n-\t\t    streamsize __prec);\n+    static void\n+    _S_format_float(const ios_base& __io, char* __fptr, char __mod);\n     \n     // Construct and return valid scanf format for integer types.\n     static void"}, {"sha": "a30404c03415fcadfb8070aa09911a03974d2348", "filename": "libstdc++-v3/include/bits/locale_facets.tcc", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fbits%2Flocale_facets.tcc?ref=5dc911525c4b8d4366eb7f9270b8af1fb1dedb66", "patch": "@@ -634,6 +634,9 @@ namespace std\n \n \tif (__prec > static_cast<streamsize>(__max_digits))\n \t  __prec = static_cast<streamsize>(__max_digits);\n+\telse if (__prec < static_cast<streamsize>(0))\n+\t  // Default precision.\n+\t  __prec = static_cast<streamsize>(6);\n \n \t// Long enough for the max format spec.\n \tchar __fbuf[16];\n@@ -646,24 +649,17 @@ namespace std\n \tint __cs_size = __max_digits * 3;\n \tchar* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n \n-\tconst bool __fp = _S_format_float(__io, __fbuf, __mod, __prec);\n-\tif (__fp)\n-\t  __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, \n-\t\t\t\t   _S_c_locale, __prec);\n-\telse\n-\t  __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, _S_c_locale);\n+\t_S_format_float(__io, __fbuf, __mod);\n+\t__len = __convert_from_v(__cs, __cs_size, __fbuf, __v,\n+\t\t\t\t _S_c_locale, __prec);\n \n \t// If the buffer was not large enough, try again with the correct size.\n \tif (__len >= __cs_size)\n \t  {\n \t    __cs_size = __len + 1; \n \t    __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n-\t    if (__fp)\n-\t      __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, \n-\t\t\t\t       _S_c_locale, __prec);\n-\t    else\n-\t      __len = __convert_from_v(__cs, __cs_size, __fbuf, __v, \n-\t\t\t\t       _S_c_locale);\n+\t    __len = __convert_from_v(__cs, __cs_size, __fbuf, __v,\n+\t\t\t\t     _S_c_locale, __prec);\n \t  }\n #else\n \t// Consider the possibility of long ios_base::fixed outputs\n@@ -678,10 +674,8 @@ namespace std\n \t                              : __max_digits * 3;\n \tchar* __cs = static_cast<char*>(__builtin_alloca(__cs_size));\n \n-\tif (_S_format_float(__io, __fbuf, __mod, __prec))\n-\t  __len = __convert_from_v(__cs, 0, __fbuf, __v, _S_c_locale, __prec);\n-\telse\n-\t  __len = __convert_from_v(__cs, 0, __fbuf, __v, _S_c_locale);\n+\t_S_format_float(__io, __fbuf, __mod);\n+\t__len = __convert_from_v(__cs, 0, __fbuf, __v, _S_c_locale, __prec);\n #endif\n \treturn _M_widen_float(__s, __io, __fill, __cs, __len);\n       }"}, {"sha": "4e90f37eac6ea21c0b635ef4b212d9124bb22c64", "filename": "libstdc++-v3/src/locale.cc", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Fsrc%2Flocale.cc?ref=5dc911525c4b8d4366eb7f9270b8af1fb1dedb66", "patch": "@@ -505,25 +505,25 @@ namespace std\n \n   const char __num_base::_S_atoms[] = \"0123456789eEabcdfABCDF\";\n \n-  bool\n-  __num_base::_S_format_float(const ios_base& __io, char* __fptr, char __mod,\n-\t\t\t      streamsize __prec)\n+  // _GLIBCPP_RESOLVE_LIB_DEFECTS\n+  // According to the resolution of DR 231, about 22.2.2.2.2, p11,\n+  // \"str.precision() is specified in the conversion specification\".\n+  void\n+  __num_base::_S_format_float(const ios_base& __io, char* __fptr, char __mod)\n   {\n-    bool __incl_prec = false;\n     ios_base::fmtflags __flags = __io.flags();\n     *__fptr++ = '%';\n     // [22.2.2.2.2] Table 60\n     if (__flags & ios_base::showpos)\n       *__fptr++ = '+';\n     if (__flags & ios_base::showpoint)\n       *__fptr++ = '#';\n-    // As per [22.2.2.2.2.11]\n-    if (__flags & ios_base::fixed || __prec > 0)\n-      {\n-\t*__fptr++ = '.';\n-\t*__fptr++ = '*';\n-\t__incl_prec = true;\n-      }\n+\n+    // As per DR 231: _always_, not only when \n+    // __flags & ios_base::fixed || __prec > 0\n+    *__fptr++ = '.';\n+    *__fptr++ = '*';\n+\n     if (__mod)\n       *__fptr++ = __mod;\n     ios_base::fmtflags __fltfield = __flags & ios_base::floatfield;\n@@ -535,7 +535,6 @@ namespace std\n     else\n       *__fptr++ = (__flags & ios_base::uppercase) ? 'G' : 'g';\n     *__fptr = '\\0';\n-    return __incl_prec;\n   }\n   \n   void"}, {"sha": "3cc550710bb17f31153e76a55a8b611aa343b1f9", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/char/6.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fchar%2F6.cc?ref=5dc911525c4b8d4366eb7f9270b8af1fb1dedb66", "patch": "@@ -0,0 +1,56 @@\n+// 2003-02-05 Paolo Carlini <pcarlini@unitus.it>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9548 and DR 231\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  ostringstream oss1, oss2;\n+  const num_put<char>& np1 = use_facet<num_put<char> >(oss1.getloc());\n+  const num_put<char>& np2 = use_facet<num_put<char> >(oss2.getloc());\n+\n+  string result1, result2;\n+\n+  oss1.precision(-1);\n+  oss1.setf(ios_base::fixed, ios_base::floatfield);\n+  np1.put(oss1.rdbuf(), oss1, '+', 30.5);\n+  result1 = oss1.str();\n+  VERIFY( result1 == \"30.500000\" );\n+\n+  oss2.precision(0);\n+  oss2.setf(ios_base::scientific, ios_base::floatfield);\n+  np2.put(oss2.rdbuf(), oss2, '+', 1.0);\n+  result2 = oss2.str();\n+  VERIFY( result2 == \"1e+00\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}, {"sha": "01733603cfc1a9970c0db9cb9640b851de2783b5", "filename": "libstdc++-v3/testsuite/22_locale/num_put/put/wchar_t/6.cc", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F6.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5dc911525c4b8d4366eb7f9270b8af1fb1dedb66/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F6.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Ftestsuite%2F22_locale%2Fnum_put%2Fput%2Fwchar_t%2F6.cc?ref=5dc911525c4b8d4366eb7f9270b8af1fb1dedb66", "patch": "@@ -0,0 +1,56 @@\n+// 2003-02-05 Paolo Carlini <pcarlini@unitus.it>\n+\n+// Copyright (C) 2003 Free Software Foundation\n+//\n+// This file is part of the GNU ISO C++ Library.  This library is free\n+// software; you can redistribute it and/or modify it under the\n+// terms of the GNU General Public License as published by the\n+// Free Software Foundation; either version 2, or (at your option)\n+// any later version.\n+\n+// This library is distributed in the hope that it will be useful,\n+// but WITHOUT ANY WARRANTY; without even the implied warranty of\n+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+// GNU General Public License for more details.\n+\n+// You should have received a copy of the GNU General Public License along\n+// with this library; see the file COPYING.  If not, write to the Free\n+// Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307,\n+// USA.\n+\n+// 22.2.2.2.1  num_put members\n+\n+#include <locale>\n+#include <sstream>\n+#include <testsuite_hooks.h>\n+\n+// libstdc++/9548 and DR 231\n+void test01()\n+{\n+  using namespace std;\n+  bool test = true;\n+\n+  wostringstream woss1, woss2;\n+  const num_put<wchar_t>& np1 = use_facet<num_put<wchar_t> >(woss1.getloc());\n+  const num_put<wchar_t>& np2 = use_facet<num_put<wchar_t> >(woss2.getloc());\n+\n+  wstring result1, result2;\n+\n+  woss1.precision(-1);\n+  woss1.setf(ios_base::fixed, ios_base::floatfield);\n+  np1.put(woss1.rdbuf(), woss1, '+', 30.5);\n+  result1 = woss1.str();\n+  VERIFY( result1 == L\"30.500000\" );\n+\n+  woss2.precision(0);\n+  woss2.setf(ios_base::scientific, ios_base::floatfield);\n+  np2.put(woss2.rdbuf(), woss2, '+', 1.0);\n+  result2 = woss2.str();\n+  VERIFY( result2 == L\"1e+00\" );\n+}\n+\n+int main()\n+{\n+  test01();\n+  return 0;\n+}"}]}