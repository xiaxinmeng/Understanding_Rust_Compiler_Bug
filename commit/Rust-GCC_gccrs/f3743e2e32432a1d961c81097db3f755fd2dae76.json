{"sha": "f3743e2e32432a1d961c81097db3f755fd2dae76", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjM3NDNlMmUzMjQzMmExZDk2MWM4MTA5N2RiM2Y3NTVmZDJkYWU3Ng==", "commit": {"author": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2018-09-14T23:26:12Z"}, "committer": {"name": "John David Anglin", "email": "danglin@gcc.gnu.org", "date": "2018-09-14T23:26:12Z"}, "message": "re PR middle-end/87188 (Function pointer canonicalization optimized away)\n\n\tPR middle-end/87188\n\t* dojump.c (do_compare_and_jump): Canonicalize function pointers\n\twhen one operand is a function pointer.  Use POINTER_TYPE_P and\n\tFUNC_OR_METHOD_TYPE_P.\n\t* expr.c (do_store_flag): Use POINTER_TYPE_P and FUNC_OR_METHOD_TYPE_P.\n\t* fold-const.c (build_range_check): Likewise.\n\t* match.pd (simple_comparison): Likewise.\n\nFrom-SVN: r264336", "tree": {"sha": "408d2c467782ee84c4590e65b055f6b0cb4fbc1a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/408d2c467782ee84c4590e65b055f6b0cb4fbc1a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f3743e2e32432a1d961c81097db3f755fd2dae76", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3743e2e32432a1d961c81097db3f755fd2dae76", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f3743e2e32432a1d961c81097db3f755fd2dae76", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f3743e2e32432a1d961c81097db3f755fd2dae76/comments", "author": null, "committer": null, "parents": [{"sha": "07f879058339c496273c9960562c3fdad317001a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/07f879058339c496273c9960562c3fdad317001a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/07f879058339c496273c9960562c3fdad317001a"}], "stats": {"total": 44, "additions": 26, "deletions": 18}, "files": [{"sha": "8fda90ac6ce684701e00d3195e8c4459ec6a94d4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3743e2e32432a1d961c81097db3f755fd2dae76/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3743e2e32432a1d961c81097db3f755fd2dae76/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f3743e2e32432a1d961c81097db3f755fd2dae76", "patch": "@@ -1,3 +1,13 @@\n+2018-09-14  John David Anglin  <danglin@gcc.gnu.org>\n+\n+\tPR middle-end/87188\n+\t* dojump.c (do_compare_and_jump): Canonicalize function pointers\n+\twhen one operand is a function pointer.  Use POINTER_TYPE_P and\n+\tFUNC_OR_METHOD_TYPE_P.\n+\t* expr.c (do_store_flag): Use POINTER_TYPE_P and FUNC_OR_METHOD_TYPE_P.\n+\t* fold-const.c (build_range_check): Likewise.\n+\t* match.pd (simple_comparison): Likewise.\n+\n 2018-09-14  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR c/82967"}, {"sha": "56c82c5fdb5b60e674aa355d4e78832ae229a099", "filename": "gcc/dojump.c", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3743e2e32432a1d961c81097db3f755fd2dae76/gcc%2Fdojump.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3743e2e32432a1d961c81097db3f755fd2dae76/gcc%2Fdojump.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdojump.c?ref=f3743e2e32432a1d961c81097db3f755fd2dae76", "patch": "@@ -1215,15 +1215,15 @@ do_compare_and_jump (tree treeop0, tree treeop1, enum rtx_code signed_code,\n   code = unsignedp ? unsigned_code : signed_code;\n \n   /* If function pointers need to be \"canonicalized\" before they can\n-     be reliably compared, then canonicalize them.\n-     Only do this if *both* sides of the comparison are function pointers.\n-     If one side isn't, we want a noncanonicalized comparison.  See PR\n-     middle-end/17564.  */\n+     be reliably compared, then canonicalize them.  Canonicalize the\n+     expression when one of the operands is a function pointer.  This\n+     handles the case where the other operand is a void pointer.  See\n+     PR middle-end/17564.  */\n   if (targetm.have_canonicalize_funcptr_for_compare ()\n-      && POINTER_TYPE_P (TREE_TYPE (treeop0))\n-      && POINTER_TYPE_P (TREE_TYPE (treeop1))\n-      && FUNC_OR_METHOD_TYPE_P (TREE_TYPE (TREE_TYPE (treeop0)))\n-      && FUNC_OR_METHOD_TYPE_P (TREE_TYPE (TREE_TYPE (treeop1))))\n+      && ((POINTER_TYPE_P (TREE_TYPE (treeop0))\n+\t   && FUNC_OR_METHOD_TYPE_P (TREE_TYPE (TREE_TYPE (treeop0))))\n+\t  || (POINTER_TYPE_P (TREE_TYPE (treeop1))\n+\t      && FUNC_OR_METHOD_TYPE_P (TREE_TYPE (TREE_TYPE (treeop1))))))\n     {\n       rtx new_op0 = gen_reg_rtx (mode);\n       rtx new_op1 = gen_reg_rtx (mode);"}, {"sha": "b8782b9b1339e49b974a1fe22394293ba089fca7", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3743e2e32432a1d961c81097db3f755fd2dae76/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3743e2e32432a1d961c81097db3f755fd2dae76/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=f3743e2e32432a1d961c81097db3f755fd2dae76", "patch": "@@ -11842,12 +11842,10 @@ do_store_flag (sepops ops, rtx target, machine_mode mode)\n   /* We won't bother with store-flag operations involving function pointers\n      when function pointers must be canonicalized before comparisons.  */\n   if (targetm.have_canonicalize_funcptr_for_compare ()\n-      && ((TREE_CODE (TREE_TYPE (arg0)) == POINTER_TYPE\n-\t   && (TREE_CODE (TREE_TYPE (TREE_TYPE (arg0)))\n-\t       == FUNCTION_TYPE))\n-\t  || (TREE_CODE (TREE_TYPE (arg1)) == POINTER_TYPE\n-\t      && (TREE_CODE (TREE_TYPE (TREE_TYPE (arg1)))\n-\t\t  == FUNCTION_TYPE))))\n+      && ((POINTER_TYPE_P (TREE_TYPE (arg0))\n+\t   && FUNC_OR_METHOD_TYPE_P (TREE_TYPE (TREE_TYPE (arg0))))\n+\t  || (POINTER_TYPE_P (TREE_TYPE (arg1))\n+\t      && FUNC_OR_METHOD_TYPE_P (TREE_TYPE (TREE_TYPE (arg1))))))\n     return 0;\n \n   STRIP_NOPS (arg0);"}, {"sha": "3a6d1b19b487c830e52a3913d448bc369998c0e0", "filename": "gcc/fold-const.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3743e2e32432a1d961c81097db3f755fd2dae76/gcc%2Ffold-const.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3743e2e32432a1d961c81097db3f755fd2dae76/gcc%2Ffold-const.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffold-const.c?ref=f3743e2e32432a1d961c81097db3f755fd2dae76", "patch": "@@ -4956,8 +4956,8 @@ build_range_check (location_t loc, tree type, tree exp, int in_p,\n   /* Disable this optimization for function pointer expressions\n      on targets that require function pointer canonicalization.  */\n   if (targetm.have_canonicalize_funcptr_for_compare ()\n-      && TREE_CODE (etype) == POINTER_TYPE\n-      && TREE_CODE (TREE_TYPE (etype)) == FUNCTION_TYPE)\n+      && POINTER_TYPE_P (etype)\n+      && FUNC_OR_METHOD_TYPE_P (TREE_TYPE (etype)))\n     return NULL_TREE;\n \n   if (! in_p)"}, {"sha": "74244f348a03951cbb4683a00a844d696f90ffad", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f3743e2e32432a1d961c81097db3f755fd2dae76/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f3743e2e32432a1d961c81097db3f755fd2dae76/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=f3743e2e32432a1d961c81097db3f755fd2dae76", "patch": "@@ -3558,8 +3558,8 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n        /* Disable this optimization if we're casting a function pointer\n \t  type on targets that require function pointer canonicalization.  */\n        && !(targetm.have_canonicalize_funcptr_for_compare ()\n-\t    && TREE_CODE (TREE_TYPE (@00)) == POINTER_TYPE\n-\t    && TREE_CODE (TREE_TYPE (TREE_TYPE (@00))) == FUNCTION_TYPE)\n+\t    && POINTER_TYPE_P (TREE_TYPE (@00))\n+\t    && FUNC_OR_METHOD_TYPE_P (TREE_TYPE (TREE_TYPE (@00))))\n        && single_use (@0))\n    (if (TYPE_PRECISION (TREE_TYPE (@00)) == TYPE_PRECISION (TREE_TYPE (@0))\n \t&& (TREE_CODE (@10) == INTEGER_CST"}]}