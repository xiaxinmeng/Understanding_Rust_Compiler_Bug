{"sha": "a835e351374fc5a3c9f0758ba98ab8ea44763e21", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YTgzNWUzNTEzNzRmYzVhM2M5ZjA3NThiYTk4YWI4ZWE0NDc2M2UyMQ==", "commit": {"author": {"name": "Craig Burley", "email": "burley@gnu.org", "date": "1998-06-04T10:41:23Z"}, "committer": {"name": "Dave Love", "email": "fx@gcc.gnu.org", "date": "1998-06-04T10:41:23Z"}, "message": "com.c (ffecom_init_0): Fix setup of INTEGER(KIND=7) pointer type.\n\nMon Jun  1 19:37:42 1998  Craig Burley  <burley@gnu.org>\n\t* com.c (ffecom_init_0): Fix setup of INTEGER(KIND=7)\n\tpointer type.\n\t* info.c (ffeinfo_type): Don't crash on null type.\n\t* expr.c (ffeexpr_fulfill_call_): Don't special-case\n\t%LOC(expr) or LOC(expr).\n\tDelete FFEGLOBAL_argsummaryPTR.\n\t* global.c, global.h: Delete FFEGLOBAL_argsummaryPTR.\n\nFrom-SVN: r20225", "tree": {"sha": "61d49e5c61994c0545ddeebea225f27e1bc925a0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/61d49e5c61994c0545ddeebea225f27e1bc925a0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/a835e351374fc5a3c9f0758ba98ab8ea44763e21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a835e351374fc5a3c9f0758ba98ab8ea44763e21", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a835e351374fc5a3c9f0758ba98ab8ea44763e21", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a835e351374fc5a3c9f0758ba98ab8ea44763e21/comments", "author": null, "committer": null, "parents": [{"sha": "e69bc5b0b3dbd0ddd2fec59d37c0603b5007450d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e69bc5b0b3dbd0ddd2fec59d37c0603b5007450d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e69bc5b0b3dbd0ddd2fec59d37c0603b5007450d"}], "stats": {"total": 67, "additions": 58, "deletions": 9}, "files": [{"sha": "98fdfd748e868632c79b0de46d323fa9dcb2ae62", "filename": "gcc/f/ChangeLog", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2FChangeLog?ref=a835e351374fc5a3c9f0758ba98ab8ea44763e21", "patch": "@@ -1,3 +1,13 @@\n+Mon Jun  1 19:37:42 1998  Craig Burley  <burley@gnu.org>\n+\n+\t* com.c (ffecom_init_0): Fix setup of INTEGER(KIND=7)\n+\tpointer type.\n+\t* info.c (ffeinfo_type): Don't crash on null type.\n+\t* expr.c (ffeexpr_fulfill_call_): Don't special-case\n+\t%LOC(expr) or LOC(expr).\n+\tDelete FFEGLOBAL_argsummaryPTR.\n+\t* global.c, global.h: Delete FFEGLOBAL_argsummaryPTR.\n+\n Mon May 25 03:34:42 1998  Craig Burley  <burley@gnu.org>\n \n \t* com.c (ffecom_expr_): Fix D**I and Z**I cases to\n@@ -9,7 +19,8 @@ Sat May 23 06:32:52 1998  Craig Burley  <burley@gnu.org>\n \t* com.c (ffecom_finish_symbol_transform_): Don't transform\n \tstatement (nested) functions, to avoid gcc compiling them\n \tand thus producing linker errors if they refer to undefined\n-\texteral functions.  But warn if they're unused and -Wunused.\n+\texternal functions.  But warn if they're unused and -Wunused.\n+\t* bad.def (FFEBAD_SFUNC_UNUSED): New diagnostic.\n \n Tue May 19 14:52:41 1998  Craig Burley  <burley@gnu.org>\n "}, {"sha": "4f524288a0ee7e51b499daf1877c3307d6e7da83", "filename": "gcc/f/com.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Fcom.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Fcom.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fcom.c?ref=a835e351374fc5a3c9f0758ba98ab8ea44763e21", "patch": "@@ -12351,10 +12351,11 @@ ffecom_init_0 ()\n     fatal (\"no INTEGER type can hold a pointer on this configuration\");\n   else if (0 && ffe_is_do_internal_checks ())\n     fprintf (stderr, \"Pointer type kt=%d\\n\", ffecom_pointer_kind_);\n-  type = ffetype_new ();\n   ffetype_set_kind (ffeinfo_type (FFEINFO_basictypeINTEGER,\n \t\t\t\t  FFEINFO_kindtypeINTEGERDEFAULT),\n-\t\t    7, type);\n+\t\t    7,\n+\t\t    ffeinfo_type (FFEINFO_basictypeINTEGER,\n+\t\t\t\t  ffecom_pointer_kind_));\n \n   if (ffe_is_ugly_assign ())\n     ffecom_label_kind_ = ffecom_pointer_kind_;\t/* Require ASSIGN etc to this. */"}, {"sha": "e1187808a3b5908d73e7675058a8da3d95726cfc", "filename": "gcc/f/expr.c", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fexpr.c?ref=a835e351374fc5a3c9f0758ba98ab8ea44763e21", "patch": "@@ -9385,9 +9385,13 @@ ffeexpr_fulfill_call_ (ffebld *expr, ffelexToken t)\n \t\t  as = FFEGLOBAL_argsummaryALTRTN;\n \t\t  break;\n \n+#if 0\n+\t\t  /* No, %LOC(foo) is just like any INTEGER(KIND=7)\n+\t\t     expression, so don't treat it specially.  */\n \t\tcase FFEBLD_opPERCENT_LOC:\n \t\t  as = FFEGLOBAL_argsummaryPTR;\n \t\t  break;\n+#endif\n \n \t\tcase FFEBLD_opPERCENT_VAL:\n \t\t  as = FFEGLOBAL_argsummaryVAL;\n@@ -9402,13 +9406,17 @@ ffeexpr_fulfill_call_ (ffebld *expr, ffelexToken t)\n \t\t  break;\n \n \t\tcase FFEBLD_opFUNCREF:\n+#if 0\n+\t\t  /* No, LOC(foo) is just like any INTEGER(KIND=7)\n+\t\t     expression, so don't treat it specially.  */\n \t\t  if ((ffebld_op (ffebld_left (item)) == FFEBLD_opSYMTER)\n \t\t      && (ffesymbol_specific (ffebld_symter (ffebld_left (item)))\n \t\t\t  == FFEINTRIN_specLOC))\n \t\t    {\n \t\t      as = FFEGLOBAL_argsummaryPTR;\n \t\t      break;\n \t\t    }\n+#endif\n \t\t  /* Fall through.  */\n \t\tdefault:\n \t\t  if (ffebld_op (item) == FFEBLD_opSYMTER)"}, {"sha": "3d36685aa07e9c741539cadb76f3dd420cc786f8", "filename": "gcc/f/g77.texi", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Fg77.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Fg77.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fg77.texi?ref=a835e351374fc5a3c9f0758ba98ab8ea44763e21", "patch": "@@ -5409,16 +5409,17 @@ arguments (those not passed using a construct such as @code{%VAL()})\n by reference or descriptor, depending on the type of\n the actual argument.\n Thus, given @samp{INTEGER I}, @samp{CALL FOO(I)} would\n-seem to mean the same thing as @samp{CALL FOO(%LOC(I))}, and\n+seem to mean the same thing as @samp{CALL FOO(%VAL(%LOC(I)))}, and\n in fact might compile to identical code.\n \n-However, @samp{CALL FOO(%LOC(I))} emphatically means ``pass the\n-address of @samp{I} in memory''.\n+However, @samp{CALL FOO(%VAL(%LOC(I)))} emphatically means\n+``pass, by value, the address of @samp{I} in memory''.\n While @samp{CALL FOO(I)} might use that same approach in a\n particular version of @code{g77}, another version or compiler\n might choose a different implementation, such as copy-in/copy-out,\n to effect the desired behavior---and which will therefore not\n-necessarily compile to the same code as would @samp{CALL FOO(%LOC(I))}\n+necessarily compile to the same code as would\n+@samp{CALL FOO(%VAL(%LOC(I)))}\n using the same version or compiler.\n \n @xref{Debugging and Interfacing}, for detailed information on"}, {"sha": "932a9d83387d84443aab77031ad6b80f4ba96814", "filename": "gcc/f/global.c", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Fglobal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Fglobal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fglobal.c?ref=a835e351374fc5a3c9f0758ba98ab8ea44763e21", "patch": "@@ -616,9 +616,11 @@ ffeglobal_proc_def_arg (ffesymbol s, int argno, char *name, ffeglobalArgSummary\n \t      defwhy = \"an alternate-return label\";\n \t      break;\n \n+#if 0\n \t    case FFEGLOBAL_argsummaryPTR:\n \t      defwhy = \"a pointer\";\n \t      break;\n+#endif\n \n \t    default:\n \t      defwhy = \"???\";\n@@ -868,6 +870,7 @@ ffeglobal_proc_ref_arg (ffesymbol s, int argno, ffeglobalArgSummary as,\n \t    }\n \t  break;\n \n+#if 0\n \tcase FFEGLOBAL_argsummaryPTR:\n \t  if ((ai->as != FFEGLOBAL_argsummaryPTR)\n \t      && (ai->as != FFEGLOBAL_argsummaryNONE))\n@@ -876,6 +879,7 @@ ffeglobal_proc_ref_arg (ffesymbol s, int argno, ffeglobalArgSummary as,\n \t      refwhy = \"a pointer\";\n \t    }\n \t  break;\n+#endif\n \n \tdefault:\n \t  break;\n@@ -919,9 +923,11 @@ ffeglobal_proc_ref_arg (ffesymbol s, int argno, ffeglobalArgSummary as,\n \t      defwhy = \"an alternate-return label\";\n \t      break;\n \n+#if 0\n \t    case FFEGLOBAL_argsummaryPTR:\n \t      defwhy = \"a pointer\";\n \t      break;\n+#endif\n \n \t    default:\n \t      defwhy = \"???\";"}, {"sha": "d0ac871b71c9e8e1cc24e98f45df7ac86f177a82", "filename": "gcc/f/global.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Fglobal.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Fglobal.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fglobal.h?ref=a835e351374fc5a3c9f0758ba98ab8ea44763e21", "patch": "@@ -55,7 +55,6 @@ typedef enum\n     FFEGLOBAL_argsummarySUBR,\t/* Subroutine (intrinsic, external). */\n     FFEGLOBAL_argsummaryFUNC,\t/* Function (intrinsic, external). */\n     FFEGLOBAL_argsummaryALTRTN,\t/* Alternate-return (label). */\n-    FFEGLOBAL_argsummaryPTR,\t/* Pointer (%LOC, LOC()). */\n     FFEGLOBAL_argsummaryANY,\n     FFEGLOBAL_argsummary\n   } ffeglobalArgSummary;"}, {"sha": "05a6e26c0164274ddb74683e7621459fba8a243c", "filename": "gcc/f/info.c", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Finfo.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Finfo.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Finfo.c?ref=a835e351374fc5a3c9f0758ba98ab8ea44763e21", "patch": "@@ -256,7 +256,6 @@ ffeinfo_type (ffeinfoBasictype basictype, ffeinfoKindtype kindtype)\n {\n   assert (basictype < FFEINFO_basictype);\n   assert (kindtype < FFEINFO_kindtype);\n-  assert (ffeinfo_types_[basictype][kindtype] != NULL);\n \n   return ffeinfo_types_[basictype][kindtype];\n }"}, {"sha": "753c861ea2f84ef01428cb1a76c181420968687e", "filename": "gcc/f/news.texi", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Fnews.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/a835e351374fc5a3c9f0758ba98ab8ea44763e21/gcc%2Ff%2Fnews.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ff%2Fnews.texi?ref=a835e351374fc5a3c9f0758ba98ab8ea44763e21", "patch": "@@ -46,6 +46,30 @@ Miscellany\n This order is not strict---for example, some items\n involve a combination of these elements.\n \n+@heading In 0.5.24:\n+@itemize @bullet\n+@item\n+@code{g77} no longer crashes when compiling code\n+containing specification statements such as\n+@samp{INTEGER(KIND=7) PTR}.\n+\n+@item\n+@code{g77} now treats @samp{%LOC(@var{expr})} and\n+@samp{LOC(@var{expr})} as ``ordinary'' expressions\n+when they are used as arguments in procedure calls.\n+This change applies only to global (filewide) analysis,\n+making it consistent with\n+how @code{g77} actually generates code\n+for these cases.\n+\n+Previously, @code{g77} treated these expressions\n+as denoting special ``pointer'' arguments\n+for the purposes of filewide analysis.\n+\n+@item\n+Improve documentation and indexing.\n+@end itemize\n+\n @heading In 0.5.23:\n @itemize @bullet\n @item"}]}