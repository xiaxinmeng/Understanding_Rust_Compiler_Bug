{"sha": "ca071303a504199e2ded9caad0d441196ede757b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2EwNzEzMDNhNTA0MTk5ZTJkZWQ5Y2FhZDBkNDQxMTk2ZWRlNzU3Yg==", "commit": {"author": {"name": "Francois-Xavier Coudert", "email": "fxcoudert@gcc.gnu.org", "date": "2009-12-27T09:30:57Z"}, "committer": {"name": "Daniel Kraft", "email": "domob@gcc.gnu.org", "date": "2009-12-27T09:30:57Z"}, "message": "re PR fortran/22552 (Would like warning when an undeclared function is called)\n\n2009-12-27  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n\t    Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/22552\n\t* lang.opt (Wimplicit-procedure): New option.\n\t* gfortran.h (struct gfc_option_t): New member `warn_implicit_procedure'\n\t* options.c (gfc_handle_option): Handle -Wimplicit-procedure.\n\t* interface.c (gfc_procedure_use): Warn about procedure never\n\texplicitly declared if requested by the new flag.\n\t* invoke.texi: Document new flag -Wimplicit-procedure.\n\n2009-12-27  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n\t    Daniel Kraft  <d@domob.eu>\n\n\tPR fortran/22552\n\t* gfortran.dg/warn_implicit_procedure_1.f90: New test.\n\nCo-Authored-By: Daniel Kraft <d@domob.eu>\n\nFrom-SVN: r155479", "tree": {"sha": "f5dbe5c613b211c7d20ee051b0b26433da3aca76", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f5dbe5c613b211c7d20ee051b0b26433da3aca76"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca071303a504199e2ded9caad0d441196ede757b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca071303a504199e2ded9caad0d441196ede757b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca071303a504199e2ded9caad0d441196ede757b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca071303a504199e2ded9caad0d441196ede757b/comments", "author": {"login": "fxcoudert", "id": 1980544, "node_id": "MDQ6VXNlcjE5ODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1980544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fxcoudert", "html_url": "https://github.com/fxcoudert", "followers_url": "https://api.github.com/users/fxcoudert/followers", "following_url": "https://api.github.com/users/fxcoudert/following{/other_user}", "gists_url": "https://api.github.com/users/fxcoudert/gists{/gist_id}", "starred_url": "https://api.github.com/users/fxcoudert/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fxcoudert/subscriptions", "organizations_url": "https://api.github.com/users/fxcoudert/orgs", "repos_url": "https://api.github.com/users/fxcoudert/repos", "events_url": "https://api.github.com/users/fxcoudert/events{/privacy}", "received_events_url": "https://api.github.com/users/fxcoudert/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "6f352c3a70dffef99f478c25b48e64c8ab4de991", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6f352c3a70dffef99f478c25b48e64c8ab4de991", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6f352c3a70dffef99f478c25b48e64c8ab4de991"}], "stats": {"total": 99, "additions": 90, "deletions": 9}, "files": [{"sha": "0f2ecc7e8db26c5ed0cf65290afcdf7ee208f98a", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=ca071303a504199e2ded9caad0d441196ede757b", "patch": "@@ -1,3 +1,14 @@\n+2009-12-27  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\t    Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/22552\n+\t* lang.opt (Wimplicit-procedure): New option.\n+\t* gfortran.h (struct gfc_option_t): New member `warn_implicit_procedure'\n+\t* options.c (gfc_handle_option): Handle -Wimplicit-procedure.\n+\t* interface.c (gfc_procedure_use): Warn about procedure never\n+\texplicitly declared if requested by the new flag.\n+\t* invoke.texi: Document new flag -Wimplicit-procedure.\n+\n 2009-12-17 Janus Weil  <janus@gcc.gnu.org>\n \n \tPR fortran/42144"}, {"sha": "20f52eaed32a7dcfd4b561addff3cf42256842bc", "filename": "gcc/fortran/gfortran.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ffortran%2Fgfortran.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ffortran%2Fgfortran.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fgfortran.h?ref=ca071303a504199e2ded9caad0d441196ede757b", "patch": "@@ -2103,6 +2103,7 @@ typedef struct\n   int warn_ampersand;\n   int warn_conversion;\n   int warn_implicit_interface;\n+  int warn_implicit_procedure;\n   int warn_line_truncation;\n   int warn_surprising;\n   int warn_tabs;"}, {"sha": "0034f75b92e9751f331ee638ec1babde9f0720d2", "filename": "gcc/fortran/interface.c", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ffortran%2Finterface.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ffortran%2Finterface.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finterface.c?ref=ca071303a504199e2ded9caad0d441196ede757b", "patch": "@@ -2380,12 +2380,18 @@ gfc_procedure_use (gfc_symbol *sym, gfc_actual_arglist **ap, locus *where)\n \n   /* Warn about calls with an implicit interface.  Special case\n      for calling a ISO_C_BINDING becase c_loc and c_funloc\n-     are pseudo-unknown.  */\n-  if (gfc_option.warn_implicit_interface\n-      && sym->attr.if_source == IFSRC_UNKNOWN\n-      && ! sym->attr.is_iso_c)\n-    gfc_warning (\"Procedure '%s' called with an implicit interface at %L\",\n-\t\t sym->name, where);\n+     are pseudo-unknown.  Additionally, warn about procedures not\n+     explicitly declared at all if requested.  */\n+  if (sym->attr.if_source == IFSRC_UNKNOWN && ! sym->attr.is_iso_c)\n+    {\n+      if (gfc_option.warn_implicit_interface)\n+\tgfc_warning (\"Procedure '%s' called with an implicit interface at %L\",\n+\t\t     sym->name, where);\n+      else if (gfc_option.warn_implicit_procedure\n+\t       && sym->attr.proc == PROC_UNKNOWN)\n+\tgfc_warning (\"Procedure '%s' called at %L is not explicitly declared\",\n+\t\t     sym->name, where);\n+    }\n \n   if (sym->attr.if_source == IFSRC_UNKNOWN)\n     {"}, {"sha": "2485e37b986895edb3973ccf731638c78aa910d8", "filename": "gcc/fortran/invoke.texi", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ffortran%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ffortran%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Finvoke.texi?ref=ca071303a504199e2ded9caad0d441196ede757b", "patch": "@@ -137,9 +137,9 @@ and warnings}.\n @gccoptlist{-fmax-errors=@var{n} @gol\n -fsyntax-only  -pedantic  -pedantic-errors @gol\n -Wall  -Waliasing  -Wampersand  -Warray-bounds -Wcharacter-truncation @gol\n--Wconversion -Wimplicit-interface  -Wline-truncation  -Wintrinsics-std @gol\n--Wsurprising -Wno-tabs  -Wunderflow -Wunused-parameter -Wintrinsics-shadow @gol\n--Wno-align-commons}\n+-Wconversion -Wimplicit-interface  -Wimplicit-procedure  -Wline-truncation @gol\n+-Wintrinsics-std  -Wsurprising  -Wno-tabs  -Wunderflow  -Wunused-parameter @gol\n+-Wintrinsics-shadow  -Wno-align-commons}\n \n @item Debugging Options\n @xref{Debugging Options,,Options for debugging your program or GNU Fortran}.\n@@ -754,6 +754,12 @@ Warn if a procedure is called without an explicit interface.\n Note this only checks that an explicit interface is present.  It does not\n check that the declared interfaces are consistent across program units.\n \n+@item -Wimplicit-procedure\n+@opindex @code{Wimplicit-procedure}\n+@cindex warnings, implicit procedure\n+Warn if a procedure is called that has neither an explicit interface\n+nor has been declared as @code{EXTERNAL}.\n+\n @item -Wintrinsics-std\n @opindex @code{Wintrinsics-std}\n @cindex warnings, non-standard intrinsics"}, {"sha": "10f4a891e12ddd10e60e4b94df3a2a182b13bccc", "filename": "gcc/fortran/lang.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ffortran%2Flang.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ffortran%2Flang.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Flang.opt?ref=ca071303a504199e2ded9caad0d441196ede757b", "patch": "@@ -96,6 +96,10 @@ Wimplicit-interface\n Fortran Warning\n Warn about calls with implicit interface\n \n+Wimplicit-procedure\n+Fortran Warning\n+Warn about called procedures not explicitly declared\n+\n Wline-truncation\n Fortran Warning\n Warn about truncated source lines"}, {"sha": "43c44db09115727d4104882a37b4ebc4919a6ce8", "filename": "gcc/fortran/options.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ffortran%2Foptions.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ffortran%2Foptions.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Foptions.c?ref=ca071303a504199e2ded9caad0d441196ede757b", "patch": "@@ -561,6 +561,10 @@ gfc_handle_option (size_t scode, const char *arg, int value)\n       gfc_option.warn_implicit_interface = value;\n       break;\n \n+    case OPT_Wimplicit_procedure:\n+      gfc_option.warn_implicit_procedure = value;\n+      break;\n+\n     case OPT_Wline_truncation:\n       gfc_option.warn_line_truncation = value;\n       break;"}, {"sha": "dbf9831cc65bd513545a682ef1e0d9eeae636845", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=ca071303a504199e2ded9caad0d441196ede757b", "patch": "@@ -1,3 +1,9 @@\n+2009-12-27  Francois-Xavier Coudert  <fxcoudert@gcc.gnu.org>\n+\t    Daniel Kraft  <d@domob.eu>\n+\n+\tPR fortran/22552\n+\t* gfortran.dg/warn_implicit_procedure_1.f90: New test.\n+\n 2009-12-24  Jason Merrill  <jason@redhat.com>\n \n \tPR c++/41305"}, {"sha": "8f21b60e9c2dbef5e4e573772997695cbabdf649", "filename": "gcc/testsuite/gfortran.dg/warn_implicit_procedure_1.f90", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_implicit_procedure_1.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca071303a504199e2ded9caad0d441196ede757b/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_implicit_procedure_1.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fwarn_implicit_procedure_1.f90?ref=ca071303a504199e2ded9caad0d441196ede757b", "patch": "@@ -0,0 +1,43 @@\n+! { dg-do compile }\n+! { dg-options \"-Wimplicit-procedure\" }\n+\n+! PR fortran/22552\n+! Check for correct -Wimplicit-procedure warnings.\n+\n+MODULE m\n+\n+CONTAINS\n+\n+  SUBROUTINE my_sub ()\n+  END SUBROUTINE my_sub\n+\n+  INTEGER FUNCTION my_func ()\n+    my_func = 42\n+  END FUNCTION my_func\n+\n+END MODULE m\n+\n+SUBROUTINE test (proc)\n+  IMPLICIT NONE\n+  CALL proc () ! { dg-bogus \"is not explicitly declared\" }\n+END SUBROUTINE test\n+\n+PROGRAM main\n+  USE m\n+  EXTERNAL :: ext_sub\n+  EXTERNAL :: test\n+  INTEGER :: ext_func\n+\n+  CALL ext_sub () ! { dg-bogus \"is not explicitly declared\" }\n+  PRINT *, ext_func () ! { dg-bogus \"is not explicitly declared\" }\n+  PRINT *, implicit_func () ! { dg-bogus \"is not explicitly declared\" }\n+  CALL my_sub () ! { dg-bogus \"is not explicitly declared\" }\n+  PRINT *, my_func () ! { dg-bogus \"is not explicitly declared\" }\n+  PRINT *, SIN (3.14159) ! { dg-bogus \"is not explicitly declared\" }\n+\n+  CALL undef_sub (1, 2, 3) ! { dg-warning \"is not explicitly declared\" }\n+  ! Can't check undefined function, because it needs to be declared a type\n+  ! in any case (and the implicit type is enough to not trigger this warning).\n+END PROGRAM\n+\n+! { dg-final { cleanup-modules \"m\" } }"}]}