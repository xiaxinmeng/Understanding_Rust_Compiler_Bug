{"sha": "3c4a54adb2164315d18fd8980c0fc37eb3d22252", "node_id": "C_kwDOANBUbNoAKDNjNGE1NGFkYjIxNjQzMTVkMThmZDg5ODBjMGZjMzdlYjNkMjIyNTI", "commit": {"author": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-18T19:50:06Z"}, "committer": {"name": "Patrick Palka", "email": "ppalka@redhat.com", "date": "2022-01-18T19:50:06Z"}, "message": "c++: DEPENDENT_OPERATOR_TYPE as type of NTTP [PR104074]\n\nWe're incorrectly rejecting the below testcase during template argument\ncoercion because invalid_nontype_parm_type_p returns true for\nDEPENDENT_OPERATOR_TYPE in C++17 mode.\n\nThis patch fixes this by partially rewriting invalid_nontype_parm_type_p\nin terms of WILDCARD_TYPE_P, for which DEPENDENT_OPERATOR_TYPE is true,\nso that the predicate handles wildcard types consistently.\n\n\tPR c++/104074\n\ngcc/cp/ChangeLog:\n\n\t* pt.cc (invalid_nontype_parm_type_p): Use WILDCARD_TYPE_P so\n\tthat we return false for DEPENDENT_OPERATOR_TYPE too.\n\ngcc/testsuite/ChangeLog:\n\n\t* g++.dg/cpp1z/nontype-auto20.C: New test.", "tree": {"sha": "628d008a2cb57b6b5bdc07d8fb34cde1056d8e91", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/628d008a2cb57b6b5bdc07d8fb34cde1056d8e91"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/3c4a54adb2164315d18fd8980c0fc37eb3d22252", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4a54adb2164315d18fd8980c0fc37eb3d22252", "html_url": "https://github.com/Rust-GCC/gccrs/commit/3c4a54adb2164315d18fd8980c0fc37eb3d22252", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/3c4a54adb2164315d18fd8980c0fc37eb3d22252/comments", "author": null, "committer": null, "parents": [{"sha": "dad495e30135904b0d0305eab8c0ce5f838440d4", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dad495e30135904b0d0305eab8c0ce5f838440d4", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dad495e30135904b0d0305eab8c0ce5f838440d4"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "586ad1c97f63454584fabf2284badd5b646e54f8", "filename": "gcc/cp/pt.cc", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4a54adb2164315d18fd8980c0fc37eb3d22252/gcc%2Fcp%2Fpt.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4a54adb2164315d18fd8980c0fc37eb3d22252/gcc%2Fcp%2Fpt.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.cc?ref=3c4a54adb2164315d18fd8980c0fc37eb3d22252", "patch": "@@ -26931,16 +26931,14 @@ invalid_nontype_parm_type_p (tree type, tsubst_flags_t complain)\n \t}\n       return false;\n     }\n-  else if (TREE_CODE (type) == TYPENAME_TYPE)\n-    return false;\n-  else if (TREE_CODE (type) == DECLTYPE_TYPE)\n-    return false;\n   else if (TREE_CODE (type) == NULLPTR_TYPE)\n     return false;\n-  /* A bound template template parm could later be instantiated to have a valid\n-     nontype parm type via an alias template.  */\n-  else if (cxx_dialect >= cxx11\n-\t   && TREE_CODE (type) == BOUND_TEMPLATE_TEMPLATE_PARM)\n+  else if (TREE_CODE (type) == BOUND_TEMPLATE_TEMPLATE_PARM\n+\t   && cxx_dialect < cxx11)\n+    /* Fall through; before C++11 alias templates, a bound ttp\n+       always instantiates into a class type.  */;\n+  else if (WILDCARD_TYPE_P (type))\n+    /* Any other wildcard type not already handled above is allowed.  */\n     return false;\n   else if (TREE_CODE (type) == COMPLEX_TYPE)\n     /* Fall through.  */;"}, {"sha": "87a2a5fb9f7746e74ed5d519a35d2b68a796ef22", "filename": "gcc/testsuite/g++.dg/cpp1z/nontype-auto20.C", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/3c4a54adb2164315d18fd8980c0fc37eb3d22252/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto20.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/3c4a54adb2164315d18fd8980c0fc37eb3d22252/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto20.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnontype-auto20.C?ref=3c4a54adb2164315d18fd8980c0fc37eb3d22252", "patch": "@@ -0,0 +1,5 @@\n+// PR c++/104074\n+// { dg-do compile { target c++17 } }\n+\n+template<auto> class gr_sp;\n+template<class T> using gr_rp = gr_sp<T::value + 42>;"}]}