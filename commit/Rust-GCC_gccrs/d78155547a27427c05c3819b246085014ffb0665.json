{"sha": "d78155547a27427c05c3819b246085014ffb0665", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDc4MTU1NTQ3YTI3NDI3YzA1YzM4MTliMjQ2MDg1MDE0ZmZiMDY2NQ==", "commit": {"author": {"name": "Ulrich Weigand", "email": "uweigand@de.ibm.com", "date": "2009-02-14T01:32:17Z"}, "committer": {"name": "Ulrich Weigand", "email": "uweigand@gcc.gnu.org", "date": "2009-02-14T01:32:17Z"}, "message": "spu_internals.h (spu_sr, [...]): Define.\n\nChangeLog:\n\n\t* config/spu/spu_internals.h (spu_sr, spu_sra, spu_srqw,\n\tspu_srqwbyte, spu_srqwbytebc): Define.\n\t* config/spu/spu-builtins.def (spu_sr, spu_sra, spu_srqw,\n\tspu_srqwbyte, spu_srqwbytebc): New overloaded builtins.\n\t* config/spu/spu.md (\"shrqbybi_<mode>\", \"shrqbi_<mode>\",\n\t\"shrqby_<mode>\"): New insn-and-split patterns.\n\t* config/spu/spu.c (expand_builtin_args): Determine and return\n\tnumber of operands using spu_builtin_description data.\n\t(spu_expand_builtin_1): Use it.\n\ntestsuite/ChangeLog:\n\n\t* gcc.target/spu/intrinsics-sr.c: New test.\n\nFrom-SVN: r144178", "tree": {"sha": "765ff7750861e77e5dda68236f77d49715ccad24", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/765ff7750861e77e5dda68236f77d49715ccad24"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d78155547a27427c05c3819b246085014ffb0665", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78155547a27427c05c3819b246085014ffb0665", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d78155547a27427c05c3819b246085014ffb0665", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d78155547a27427c05c3819b246085014ffb0665/comments", "author": null, "committer": null, "parents": [{"sha": "64cfbcc3cf20c885ca561831d609cb89193343a5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/64cfbcc3cf20c885ca561831d609cb89193343a5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/64cfbcc3cf20c885ca561831d609cb89193343a5"}], "stats": {"total": 645, "additions": 640, "deletions": 5}, "files": [{"sha": "c4fd2bc17437727221b9277c7b38e32a52e30cc2", "filename": "gcc/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78155547a27427c05c3819b246085014ffb0665/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78155547a27427c05c3819b246085014ffb0665/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=d78155547a27427c05c3819b246085014ffb0665", "patch": "@@ -1,3 +1,15 @@\n+2009-02-13  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* config/spu/spu_internals.h (spu_sr, spu_sra, spu_srqw,\n+\tspu_srqwbyte, spu_srqwbytebc): Define.\n+\t* config/spu/spu-builtins.def (spu_sr, spu_sra, spu_srqw,\n+\tspu_srqwbyte, spu_srqwbytebc): New overloaded builtins.\n+\t* config/spu/spu.md (\"shrqbybi_<mode>\", \"shrqbi_<mode>\",\n+\t\"shrqby_<mode>\"): New insn-and-split patterns.\n+\t* config/spu/spu.c (expand_builtin_args): Determine and return\n+\tnumber of operands using spu_builtin_description data.\n+\t(spu_expand_builtin_1): Use it.\n+\n 2009-02-13  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR target/38056"}, {"sha": "17ce6163b5a0ad2155b53daaad521edee24d774f", "filename": "gcc/config/spu/spu-builtins.def", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78155547a27427c05c3819b246085014ffb0665/gcc%2Fconfig%2Fspu%2Fspu-builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78155547a27427c05c3819b246085014ffb0665/gcc%2Fconfig%2Fspu%2Fspu-builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu-builtins.def?ref=d78155547a27427c05c3819b246085014ffb0665", "patch": "@@ -670,6 +670,57 @@ DEF_BUILTIN (SPU_SLQWBYTEBC_6,     CODE_FOR_shlqbybi_ti,   \"spu_slqwbytebc_6\",\n DEF_BUILTIN (SPU_SLQWBYTEBC_7,     CODE_FOR_shlqbybi_ti,   \"spu_slqwbytebc_7\",     B_INTERNAL, _A3(SPU_BTI_UV16QI, SPU_BTI_UV16QI, SPU_BTI_UINTSI))\n DEF_BUILTIN (SPU_SLQWBYTEBC_8,     CODE_FOR_shlqbybi_ti,   \"spu_slqwbytebc_8\",     B_INTERNAL, _A3(SPU_BTI_V4SF,   SPU_BTI_V4SF,   SPU_BTI_UINTSI))\n DEF_BUILTIN (SPU_SLQWBYTEBC_9,     CODE_FOR_shlqbybi_ti,   \"spu_slqwbytebc_9\",     B_INTERNAL, _A3(SPU_BTI_V2DF,   SPU_BTI_V2DF,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SR,               CODE_FOR_nothing,       \"spu_sr\",               B_OVERLOAD, _A1(SPU_BTI_VOID))\n+DEF_BUILTIN (SPU_SR_0,             CODE_FOR_vlshrv8hi3,    \"spu_sr_0\",             B_INTERNAL, _A3(SPU_BTI_UV8HI,  SPU_BTI_UV8HI,  SPU_BTI_UV8HI))\n+DEF_BUILTIN (SPU_SR_1,             CODE_FOR_vlshrv8hi3,    \"spu_sr_1\",             B_INTERNAL, _A3(SPU_BTI_V8HI,   SPU_BTI_V8HI,   SPU_BTI_UV8HI))\n+DEF_BUILTIN (SPU_SR_2,             CODE_FOR_vlshrv4si3,    \"spu_sr_2\",             B_INTERNAL, _A3(SPU_BTI_UV4SI,  SPU_BTI_UV4SI,  SPU_BTI_UV4SI))\n+DEF_BUILTIN (SPU_SR_3,             CODE_FOR_vlshrv4si3,    \"spu_sr_3\",             B_INTERNAL, _A3(SPU_BTI_V4SI,   SPU_BTI_V4SI,   SPU_BTI_UV4SI))\n+DEF_BUILTIN (SPU_SR_4,             CODE_FOR_vlshrv8hi3,    \"spu_sr_4\",             B_INTERNAL, _A3(SPU_BTI_UV8HI,  SPU_BTI_UV8HI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SR_5,             CODE_FOR_vlshrv8hi3,    \"spu_sr_5\",             B_INTERNAL, _A3(SPU_BTI_V8HI,   SPU_BTI_V8HI,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SR_6,             CODE_FOR_vlshrv4si3,    \"spu_sr_6\",             B_INTERNAL, _A3(SPU_BTI_UV4SI,  SPU_BTI_UV4SI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SR_7,             CODE_FOR_vlshrv4si3,    \"spu_sr_7\",             B_INTERNAL, _A3(SPU_BTI_V4SI,   SPU_BTI_V4SI,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRA,              CODE_FOR_nothing,       \"spu_sra\",              B_OVERLOAD, _A1(SPU_BTI_VOID))\n+DEF_BUILTIN (SPU_SRA_0,            CODE_FOR_vashrv8hi3,    \"spu_sra_0\",            B_INTERNAL, _A3(SPU_BTI_UV8HI,  SPU_BTI_UV8HI,  SPU_BTI_UV8HI))\n+DEF_BUILTIN (SPU_SRA_1,            CODE_FOR_vashrv8hi3,    \"spu_sra_1\",            B_INTERNAL, _A3(SPU_BTI_V8HI,   SPU_BTI_V8HI,   SPU_BTI_UV8HI))\n+DEF_BUILTIN (SPU_SRA_2,            CODE_FOR_vashrv4si3,    \"spu_sra_2\",            B_INTERNAL, _A3(SPU_BTI_UV4SI,  SPU_BTI_UV4SI,  SPU_BTI_UV4SI))\n+DEF_BUILTIN (SPU_SRA_3,            CODE_FOR_vashrv4si3,    \"spu_sra_3\",            B_INTERNAL, _A3(SPU_BTI_V4SI,   SPU_BTI_V4SI,   SPU_BTI_UV4SI))\n+DEF_BUILTIN (SPU_SRA_4,            CODE_FOR_vashrv8hi3,    \"spu_sra_4\",            B_INTERNAL, _A3(SPU_BTI_UV8HI,  SPU_BTI_UV8HI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRA_5,            CODE_FOR_vashrv8hi3,    \"spu_sra_5\",            B_INTERNAL, _A3(SPU_BTI_V8HI,   SPU_BTI_V8HI,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRA_6,            CODE_FOR_vashrv4si3,    \"spu_sra_6\",            B_INTERNAL, _A3(SPU_BTI_UV4SI,  SPU_BTI_UV4SI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRA_7,            CODE_FOR_vashrv4si3,    \"spu_sra_7\",            B_INTERNAL, _A3(SPU_BTI_V4SI,   SPU_BTI_V4SI,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQW,             CODE_FOR_nothing,       \"spu_srqw\",             B_OVERLOAD, _A1(SPU_BTI_VOID))\n+DEF_BUILTIN (SPU_SRQW_0,           CODE_FOR_shrqbi_ti,     \"spu_srqw_0\",           B_INTERNAL, _A3(SPU_BTI_V2DI,   SPU_BTI_V2DI,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQW_1,           CODE_FOR_shrqbi_ti,     \"spu_srqw_1\",           B_INTERNAL, _A3(SPU_BTI_UV2DI,  SPU_BTI_UV2DI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQW_2,           CODE_FOR_shrqbi_ti,     \"spu_srqw_2\",           B_INTERNAL, _A3(SPU_BTI_V4SI,   SPU_BTI_V4SI,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQW_3,           CODE_FOR_shrqbi_ti,     \"spu_srqw_3\",           B_INTERNAL, _A3(SPU_BTI_UV4SI,  SPU_BTI_UV4SI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQW_4,           CODE_FOR_shrqbi_ti,     \"spu_srqw_4\",           B_INTERNAL, _A3(SPU_BTI_V8HI,   SPU_BTI_V8HI,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQW_5,           CODE_FOR_shrqbi_ti,     \"spu_srqw_5\",           B_INTERNAL, _A3(SPU_BTI_UV8HI,  SPU_BTI_UV8HI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQW_6,           CODE_FOR_shrqbi_ti,     \"spu_srqw_6\",           B_INTERNAL, _A3(SPU_BTI_V16QI,  SPU_BTI_V16QI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQW_7,           CODE_FOR_shrqbi_ti,     \"spu_srqw_7\",           B_INTERNAL, _A3(SPU_BTI_UV16QI, SPU_BTI_UV16QI, SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQW_8,           CODE_FOR_shrqbi_ti,     \"spu_srqw_8\",           B_INTERNAL, _A3(SPU_BTI_V4SF,   SPU_BTI_V4SF,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQW_9,           CODE_FOR_shrqbi_ti,     \"spu_srqw_9\",           B_INTERNAL, _A3(SPU_BTI_V2DF,   SPU_BTI_V2DF,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTE,         CODE_FOR_nothing,       \"spu_srqwbyte\",         B_OVERLOAD, _A1(SPU_BTI_VOID))\n+DEF_BUILTIN (SPU_SRQWBYTE_0,       CODE_FOR_shrqby_ti,     \"spu_srqwbyte_0\",       B_INTERNAL, _A3(SPU_BTI_V2DI,   SPU_BTI_V2DI,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTE_1,       CODE_FOR_shrqby_ti,     \"spu_srqwbyte_1\",       B_INTERNAL, _A3(SPU_BTI_UV2DI,  SPU_BTI_UV2DI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTE_2,       CODE_FOR_shrqby_ti,     \"spu_srqwbyte_2\",       B_INTERNAL, _A3(SPU_BTI_V4SI,   SPU_BTI_V4SI,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTE_3,       CODE_FOR_shrqby_ti,     \"spu_srqwbyte_3\",       B_INTERNAL, _A3(SPU_BTI_UV4SI,  SPU_BTI_UV4SI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTE_4,       CODE_FOR_shrqby_ti,     \"spu_srqwbyte_4\",       B_INTERNAL, _A3(SPU_BTI_V8HI,   SPU_BTI_V8HI,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTE_5,       CODE_FOR_shrqby_ti,     \"spu_srqwbyte_5\",       B_INTERNAL, _A3(SPU_BTI_UV8HI,  SPU_BTI_UV8HI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTE_6,       CODE_FOR_shrqby_ti,     \"spu_srqwbyte_6\",       B_INTERNAL, _A3(SPU_BTI_V16QI,  SPU_BTI_V16QI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTE_7,       CODE_FOR_shrqby_ti,     \"spu_srqwbyte_7\",       B_INTERNAL, _A3(SPU_BTI_UV16QI, SPU_BTI_UV16QI, SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTE_8,       CODE_FOR_shrqby_ti,     \"spu_srqwbyte_8\",       B_INTERNAL, _A3(SPU_BTI_V4SF,   SPU_BTI_V4SF,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTE_9,       CODE_FOR_shrqby_ti,     \"spu_srqwbyte_9\",       B_INTERNAL, _A3(SPU_BTI_V2DF,   SPU_BTI_V2DF,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTEBC,       CODE_FOR_nothing,       \"spu_srqwbytebc\",       B_OVERLOAD, _A1(SPU_BTI_VOID))\n+DEF_BUILTIN (SPU_SRQWBYTEBC_0,     CODE_FOR_shrqbybi_ti,   \"spu_srqwbytebc_0\",     B_INTERNAL, _A3(SPU_BTI_V2DI,   SPU_BTI_V2DI,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTEBC_1,     CODE_FOR_shrqbybi_ti,   \"spu_srqwbytebc_1\",     B_INTERNAL, _A3(SPU_BTI_UV2DI,  SPU_BTI_UV2DI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTEBC_2,     CODE_FOR_shrqbybi_ti,   \"spu_srqwbytebc_2\",     B_INTERNAL, _A3(SPU_BTI_V4SI,   SPU_BTI_V4SI,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTEBC_3,     CODE_FOR_shrqbybi_ti,   \"spu_srqwbytebc_3\",     B_INTERNAL, _A3(SPU_BTI_UV4SI,  SPU_BTI_UV4SI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTEBC_4,     CODE_FOR_shrqbybi_ti,   \"spu_srqwbytebc_4\",     B_INTERNAL, _A3(SPU_BTI_V8HI,   SPU_BTI_V8HI,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTEBC_5,     CODE_FOR_shrqbybi_ti,   \"spu_srqwbytebc_5\",     B_INTERNAL, _A3(SPU_BTI_UV8HI,  SPU_BTI_UV8HI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTEBC_6,     CODE_FOR_shrqbybi_ti,   \"spu_srqwbytebc_6\",     B_INTERNAL, _A3(SPU_BTI_V16QI,  SPU_BTI_V16QI,  SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTEBC_7,     CODE_FOR_shrqbybi_ti,   \"spu_srqwbytebc_7\",     B_INTERNAL, _A3(SPU_BTI_UV16QI, SPU_BTI_UV16QI, SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTEBC_8,     CODE_FOR_shrqbybi_ti,   \"spu_srqwbytebc_8\",     B_INTERNAL, _A3(SPU_BTI_V4SF,   SPU_BTI_V4SF,   SPU_BTI_UINTSI))\n+DEF_BUILTIN (SPU_SRQWBYTEBC_9,     CODE_FOR_shrqbybi_ti,   \"spu_srqwbytebc_9\",     B_INTERNAL, _A3(SPU_BTI_V2DF,   SPU_BTI_V2DF,   SPU_BTI_UINTSI))\n \n DEF_BUILTIN (SPU_SPLATS,           CODE_FOR_nothing,       \"spu_splats\",           B_OVERLOAD, _A1(SPU_BTI_VOID))\n DEF_BUILTIN (SPU_SPLATS_0,         CODE_FOR_spu_splats,    \"spu_splats_0\",         B_INTERNAL, _A2(SPU_BTI_UV16QI, SPU_BTI_UINTQI))"}, {"sha": "a008830d02baffbba993ec441008b1e1b1346ecc", "filename": "gcc/config/spu/spu.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78155547a27427c05c3819b246085014ffb0665/gcc%2Fconfig%2Fspu%2Fspu.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78155547a27427c05c3819b246085014ffb0665/gcc%2Fconfig%2Fspu%2Fspu.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.c?ref=d78155547a27427c05c3819b246085014ffb0665", "patch": "@@ -5878,7 +5878,7 @@ spu_check_builtin_parm (struct spu_builtin_description *d, rtx op, int p)\n }\n \n \n-static void\n+static int\n expand_builtin_args (struct spu_builtin_description *d, tree exp,\n \t\t     rtx target, rtx ops[])\n {\n@@ -5890,13 +5890,18 @@ expand_builtin_args (struct spu_builtin_description *d, tree exp,\n   if (d->parm[0] != SPU_BTI_VOID)\n     ops[i++] = target;\n \n-  for (a = 0; i < insn_data[icode].n_operands; i++, a++)\n+  for (a = 0; d->parm[a+1] != SPU_BTI_END_OF_PARAMS; i++, a++)\n     {\n       tree arg = CALL_EXPR_ARG (exp, a);\n       if (arg == 0)\n \tabort ();\n       ops[i] = expand_expr (arg, NULL_RTX, VOIDmode, 0);\n     }\n+\n+  /* The insn pattern may have additional operands (SCRATCH).\n+     Return the number of actual non-SCRATCH operands.  */\n+  gcc_assert (i <= insn_data[icode].n_operands);\n+  return i;\n }\n \n static rtx\n@@ -5908,10 +5913,11 @@ spu_expand_builtin_1 (struct spu_builtin_description *d,\n   enum insn_code icode = d->icode;\n   enum machine_mode mode, tmode;\n   int i, p;\n+  int n_operands;\n   tree return_type;\n \n   /* Set up ops[] with values from arglist. */\n-  expand_builtin_args (d, exp, target, ops);\n+  n_operands = expand_builtin_args (d, exp, target, ops);\n \n   /* Handle the target operand which must be operand 0. */\n   i = 0;\n@@ -5969,7 +5975,7 @@ spu_expand_builtin_1 (struct spu_builtin_description *d,\n     return 0;\n \n   /* Handle the rest of the operands. */\n-  for (p = 1; i < insn_data[icode].n_operands; i++, p++)\n+  for (p = 1; i < n_operands; i++, p++)\n     {\n       if (insn_data[d->icode].operand[i].mode != VOIDmode)\n \tmode = insn_data[d->icode].operand[i].mode;\n@@ -6009,7 +6015,7 @@ spu_expand_builtin_1 (struct spu_builtin_description *d,\n \tops[i] = spu_force_reg (mode, ops[i]);\n     }\n \n-  switch (insn_data[icode].n_operands)\n+  switch (n_operands)\n     {\n     case 0:\n       pat = GEN_FCN (icode) (0);"}, {"sha": "cb951558e7da0b330f3e8eacbfe14eeaadc08a0b", "filename": "gcc/config/spu/spu.md", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78155547a27427c05c3819b246085014ffb0665/gcc%2Fconfig%2Fspu%2Fspu.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78155547a27427c05c3819b246085014ffb0665/gcc%2Fconfig%2Fspu%2Fspu.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu.md?ref=d78155547a27427c05c3819b246085014ffb0665", "patch": "@@ -2401,6 +2401,27 @@\n     emit_insn (gen_subsi3(operands[5], GEN_INT(7), operands[2]));\n   })\n \n+(define_insn_and_split \"shrqbybi_<mode>\"\n+  [(set (match_operand:DTI 0 \"spu_reg_operand\" \"=r,r\")\n+\t(lshiftrt:DTI (match_operand:DTI 1 \"spu_reg_operand\" \"r,r\")\n+\t\t      (and:SI (match_operand:SI 2 \"spu_nonmem_operand\" \"r,I\")\n+\t\t\t      (const_int -8))))\n+   (clobber (match_scratch:SI 3 \"=&r,X\"))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup:DTI 0)\n+\t(lshiftrt:DTI (match_dup:DTI 1)\n+\t\t      (and:SI (neg:SI (and:SI (match_dup:SI 3) (const_int -8)))\n+\t\t\t      (const_int -8))))]\n+  {\n+    if (GET_CODE (operands[2]) == CONST_INT)\n+      operands[3] = GEN_INT (7 - INTVAL (operands[2]));\n+    else\n+      emit_insn (gen_subsi3 (operands[3], GEN_INT (7), operands[2]));\n+  }\n+  [(set_attr \"type\" \"shuf\")])\n+\n (define_insn \"rotqmbybi_<mode>\"\n   [(set (match_operand:DTI 0 \"spu_reg_operand\" \"=r,r\")\n \t(lshiftrt:DTI (match_operand:DTI 1 \"spu_reg_operand\" \"r,r\")\n@@ -2413,6 +2434,26 @@\n    rotqmbyi\\t%0,%1,-%H2\"\n   [(set_attr \"type\" \"shuf\")])\n \n+(define_insn_and_split \"shrqbi_<mode>\"\n+  [(set (match_operand:DTI 0 \"spu_reg_operand\" \"=r,r\")\n+\t(lshiftrt:DTI (match_operand:DTI 1 \"spu_reg_operand\" \"r,r\")\n+\t\t      (and:SI (match_operand:SI 2 \"spu_nonmem_operand\" \"r,I\")\n+\t\t\t      (const_int 7))))\n+   (clobber (match_scratch:SI 3 \"=&r,X\"))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup:DTI 0)\n+\t(lshiftrt:DTI (match_dup:DTI 1)\n+\t\t      (and:SI (neg:SI (match_dup:SI 3)) (const_int 7))))]\n+  {\n+    if (GET_CODE (operands[2]) == CONST_INT)\n+      operands[3] = GEN_INT (-INTVAL (operands[2]));\n+    else\n+      emit_insn (gen_subsi3 (operands[3], GEN_INT (0), operands[2]));\n+  }\n+  [(set_attr \"type\" \"shuf\")])\n+\n (define_insn \"rotqmbi_<mode>\"\n   [(set (match_operand:DTI 0 \"spu_reg_operand\" \"=r,r\")\n \t(lshiftrt:DTI (match_operand:DTI 1 \"spu_reg_operand\" \"r,r\")\n@@ -2424,6 +2465,26 @@\n    rotqmbii\\t%0,%1,-%E2\"\n   [(set_attr \"type\" \"shuf\")])\n \n+(define_insn_and_split \"shrqby_<mode>\"\n+  [(set (match_operand:DTI 0 \"spu_reg_operand\" \"=r,r\")\n+\t(lshiftrt:DTI (match_operand:DTI 1 \"spu_reg_operand\" \"r,r\")\n+\t\t      (mult:SI (match_operand:SI 2 \"spu_nonmem_operand\" \"r,I\")\n+\t\t\t       (const_int 8))))\n+   (clobber (match_scratch:SI 3 \"=&r,X\"))]\n+  \"\"\n+  \"#\"\n+  \"reload_completed\"\n+  [(set (match_dup:DTI 0)\n+\t(lshiftrt:DTI (match_dup:DTI 1)\n+\t\t      (mult:SI (neg:SI (match_dup:SI 3)) (const_int 8))))]\n+  {\n+    if (GET_CODE (operands[2]) == CONST_INT)\n+      operands[3] = GEN_INT (-INTVAL (operands[2]));\n+    else\n+      emit_insn (gen_subsi3 (operands[3], GEN_INT (0), operands[2]));\n+  }\n+  [(set_attr \"type\" \"shuf\")])\n+\n (define_insn \"rotqmby_<mode>\"\n   [(set (match_operand:DTI 0 \"spu_reg_operand\" \"=r,r\")\n \t(lshiftrt:DTI (match_operand:DTI 1 \"spu_reg_operand\" \"r,r\")"}, {"sha": "af66ecd3e32b055c79cb9cbb530322b54643c924", "filename": "gcc/config/spu/spu_internals.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78155547a27427c05c3819b246085014ffb0665/gcc%2Fconfig%2Fspu%2Fspu_internals.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78155547a27427c05c3819b246085014ffb0665/gcc%2Fconfig%2Fspu%2Fspu_internals.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fspu%2Fspu_internals.h?ref=d78155547a27427c05c3819b246085014ffb0665", "patch": "@@ -337,6 +337,11 @@\n #define spu_slqw(ra,rb)           __builtin_spu_slqw(ra,rb) \n #define spu_slqwbyte(ra,rb)       __builtin_spu_slqwbyte(ra,rb) \n #define spu_slqwbytebc(ra,rb)     __builtin_spu_slqwbytebc(ra,rb) \n+#define spu_sr(ra,rb)             __builtin_spu_sr(ra,rb) \n+#define spu_sra(ra,rb)            __builtin_spu_sra(ra,rb) \n+#define spu_srqw(ra,rb)           __builtin_spu_srqw(ra,rb) \n+#define spu_srqwbyte(ra,rb)       __builtin_spu_srqwbyte(ra,rb) \n+#define spu_srqwbytebc(ra,rb)     __builtin_spu_srqwbytebc(ra,rb) \n #define spu_extract(ra,pos)       __builtin_spu_extract(ra,pos) \n #define spu_insert(scalar,ra,pos) __builtin_spu_insert(scalar,ra,pos) \n #define spu_promote(scalar,pos)   __builtin_spu_promote(scalar,pos) "}, {"sha": "390b2fa86f7fff228ce67a9458af8db64e8affed", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78155547a27427c05c3819b246085014ffb0665/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78155547a27427c05c3819b246085014ffb0665/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=d78155547a27427c05c3819b246085014ffb0665", "patch": "@@ -1,3 +1,7 @@\n+2009-02-13  Ulrich Weigand  <Ulrich.Weigand@de.ibm.com>\n+\n+\t* gcc.target/spu/intrinsics-sr.c: New test.\n+\n 2009-02-13  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR target/38056"}, {"sha": "f7c62ddcb6de6722c574b8b7045eb168ab1a2b5e", "filename": "gcc/testsuite/gcc.target/spu/intrinsics-sr.c", "status": "added", "additions": 496, "deletions": 0, "changes": 496, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d78155547a27427c05c3819b246085014ffb0665/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fintrinsics-sr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d78155547a27427c05c3819b246085014ffb0665/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fintrinsics-sr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fspu%2Fintrinsics-sr.c?ref=d78155547a27427c05c3819b246085014ffb0665", "patch": "@@ -0,0 +1,496 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-std=c99\" } */\n+\n+#include <spu_intrinsics.h>\n+\n+/* spu_sr */\n+\n+vector unsigned short test_sr_1 (vector unsigned short ra, vector unsigned short count)\n+{\n+  return spu_sr (ra, count);\n+}\n+\n+vector signed short test_sr_2 (vector signed short ra, vector unsigned short count)\n+{\n+  return spu_sr (ra, count);\n+}\n+\n+vector unsigned int test_sr_3 (vector unsigned int ra, vector unsigned int count)\n+{\n+  return spu_sr (ra, count);\n+}\n+\n+vector signed int test_sr_4 (vector signed int ra, vector unsigned int count)\n+{\n+  return spu_sr (ra, count);\n+}\n+\n+vector unsigned short test_sr_5 (vector unsigned short ra)\n+{\n+  return spu_sr (ra, 11);\n+}\n+\n+vector signed short test_sr_6 (vector signed short ra)\n+{\n+  return spu_sr (ra, 11);\n+}\n+\n+vector unsigned short test_sr_7 (vector unsigned short ra, unsigned int count)\n+{\n+  return spu_sr (ra, count);\n+}\n+\n+vector signed short test_sr_8 (vector signed short ra, unsigned int count)\n+{\n+  return spu_sr (ra, count);\n+}\n+\n+vector unsigned int test_sr_9 (vector unsigned int ra)\n+{\n+  return spu_sr (ra, 11);\n+}\n+\n+vector signed int test_sr_10 (vector signed int ra)\n+{\n+  return spu_sr (ra, 11);\n+}\n+\n+vector unsigned int test_sr_11 (vector unsigned int ra, unsigned int count)\n+{\n+  return spu_sr (ra, count);\n+}\n+\n+vector signed int test_sr_12 (vector signed int ra, unsigned int count)\n+{\n+  return spu_sr (ra, count);\n+}\n+\n+\n+/* spu_sra */\n+\n+vector unsigned short test_sra_1 (vector unsigned short ra, vector unsigned short count)\n+{\n+  return spu_sra (ra, count);\n+}\n+\n+vector signed short test_sra_2 (vector signed short ra, vector unsigned short count)\n+{\n+  return spu_sra (ra, count);\n+}\n+\n+vector unsigned int test_sra_3 (vector unsigned int ra, vector unsigned int count)\n+{\n+  return spu_sra (ra, count);\n+}\n+\n+vector signed int test_sra_4 (vector signed int ra, vector unsigned int count)\n+{\n+  return spu_sra (ra, count);\n+}\n+\n+vector unsigned short test_sra_5 (vector unsigned short ra)\n+{\n+  return spu_sra (ra, 11);\n+}\n+\n+vector signed short test_sra_6 (vector signed short ra)\n+{\n+  return spu_sra (ra, 11);\n+}\n+\n+vector unsigned short test_sra_7 (vector unsigned short ra, unsigned int count)\n+{\n+  return spu_sra (ra, count);\n+}\n+\n+vector signed short test_sra_8 (vector signed short ra, unsigned int count)\n+{\n+  return spu_sra (ra, count);\n+}\n+\n+vector unsigned int test_sra_9 (vector unsigned int ra)\n+{\n+  return spu_sra (ra, 11);\n+}\n+\n+vector signed int test_sra_10 (vector signed int ra)\n+{\n+  return spu_sra (ra, 11);\n+}\n+\n+vector unsigned int test_sra_11 (vector unsigned int ra, unsigned int count)\n+{\n+  return spu_sra (ra, count);\n+}\n+\n+vector signed int test_sra_12 (vector signed int ra, unsigned int count)\n+{\n+  return spu_sra (ra, count);\n+}\n+\n+/* spu_srqw */\n+\n+vector unsigned char test_srqw_1 (vector unsigned char ra)\n+{\n+  return spu_srqw (ra, 5);\n+}\n+\n+vector signed char test_srqw_2 (vector signed char ra)\n+{\n+  return spu_srqw (ra, 5);\n+}\n+\n+vector unsigned short test_srqw_3 (vector unsigned short ra)\n+{\n+  return spu_srqw (ra, 5);\n+}\n+\n+vector signed short test_srqw_4 (vector signed short ra)\n+{\n+  return spu_srqw (ra, 5);\n+}\n+\n+vector unsigned int test_srqw_5 (vector unsigned int ra)\n+{\n+  return spu_srqw (ra, 5);\n+}\n+\n+vector signed int test_srqw_6 (vector signed int ra)\n+{\n+  return spu_srqw (ra, 5);\n+}\n+\n+vector unsigned long test_srqw_7 (vector unsigned long ra)\n+{\n+  return spu_srqw (ra, 5);\n+}\n+\n+vector signed long test_srqw_8 (vector signed long ra)\n+{\n+  return spu_srqw (ra, 5);\n+}\n+\n+vector unsigned long long test_srqw_9 (vector unsigned long long ra)\n+{\n+  return spu_srqw (ra, 5);\n+}\n+\n+vector signed long long test_srqw_10 (vector signed long long ra)\n+{\n+  return spu_srqw (ra, 5);\n+}\n+\n+vector float test_srqw_11 (vector float ra)\n+{\n+  return spu_srqw (ra, 5);\n+}\n+\n+vector double test_srqw_12 (vector double ra)\n+{\n+  return spu_srqw (ra, 5);\n+}\n+\n+vector unsigned char test_srqw_13 (vector unsigned char ra, unsigned int count)\n+{\n+  return spu_srqw (ra, count);\n+}\n+\n+vector signed char test_srqw_14 (vector signed char ra, unsigned int count)\n+{\n+  return spu_srqw (ra, count);\n+}\n+\n+vector unsigned short test_srqw_15 (vector unsigned short ra, unsigned int count)\n+{\n+  return spu_srqw (ra, count);\n+}\n+\n+vector signed short test_srqw_16 (vector signed short ra, unsigned int count)\n+{\n+  return spu_srqw (ra, count);\n+}\n+\n+vector unsigned int test_srqw_17 (vector unsigned int ra, unsigned int count)\n+{\n+  return spu_srqw (ra, count);\n+}\n+\n+vector signed int test_srqw_18 (vector signed int ra, unsigned int count)\n+{\n+  return spu_srqw (ra, count);\n+}\n+\n+vector unsigned long test_srqw_19 (vector unsigned long ra, unsigned int count)\n+{\n+  return spu_srqw (ra, count);\n+}\n+\n+vector signed long test_srqw_20 (vector signed long ra, unsigned int count)\n+{\n+  return spu_srqw (ra, count);\n+}\n+\n+vector unsigned long long test_srqw_21 (vector unsigned long long ra, unsigned int count)\n+{\n+  return spu_srqw (ra, count);\n+}\n+\n+vector signed long long test_srqw_22 (vector signed long long ra, unsigned int count)\n+{\n+  return spu_srqw (ra, count);\n+}\n+\n+vector float test_srqw_23 (vector float ra, unsigned int count)\n+{\n+  return spu_srqw (ra, count);\n+}\n+\n+vector double test_srqw_24 (vector double ra, unsigned int count)\n+{\n+  return spu_srqw (ra, count);\n+}\n+\n+/* spu_srqwbyte */\n+\n+vector unsigned char test_srqwbyte_1 (vector unsigned char ra)\n+{\n+  return spu_srqwbyte (ra, 5);\n+}\n+\n+vector signed char test_srqwbyte_2 (vector signed char ra)\n+{\n+  return spu_srqwbyte (ra, 5);\n+}\n+\n+vector unsigned short test_srqwbyte_3 (vector unsigned short ra)\n+{\n+  return spu_srqwbyte (ra, 5);\n+}\n+\n+vector signed short test_srqwbyte_4 (vector signed short ra)\n+{\n+  return spu_srqwbyte (ra, 5);\n+}\n+\n+vector unsigned int test_srqwbyte_5 (vector unsigned int ra)\n+{\n+  return spu_srqwbyte (ra, 5);\n+}\n+\n+vector signed int test_srqwbyte_6 (vector signed int ra)\n+{\n+  return spu_srqwbyte (ra, 5);\n+}\n+\n+vector unsigned long test_srqwbyte_7 (vector unsigned long ra)\n+{\n+  return spu_srqwbyte (ra, 5);\n+}\n+\n+vector signed long test_srqwbyte_8 (vector signed long ra)\n+{\n+  return spu_srqwbyte (ra, 5);\n+}\n+\n+vector unsigned long long test_srqwbyte_9 (vector unsigned long long ra)\n+{\n+  return spu_srqwbyte (ra, 5);\n+}\n+\n+vector signed long long test_srqwbyte_10 (vector signed long long ra)\n+{\n+  return spu_srqwbyte (ra, 5);\n+}\n+\n+vector float test_srqwbyte_11 (vector float ra)\n+{\n+  return spu_srqwbyte (ra, 5);\n+}\n+\n+vector double test_srqwbyte_12 (vector double ra)\n+{\n+  return spu_srqwbyte (ra, 5);\n+}\n+\n+vector unsigned char test_srqwbyte_13 (vector unsigned char ra, unsigned int count)\n+{\n+  return spu_srqwbyte (ra, count);\n+}\n+\n+vector signed char test_srqwbyte_14 (vector signed char ra, unsigned int count)\n+{\n+  return spu_srqwbyte (ra, count);\n+}\n+\n+vector unsigned short test_srqwbyte_15 (vector unsigned short ra, unsigned int count)\n+{\n+  return spu_srqwbyte (ra, count);\n+}\n+\n+vector signed short test_srqwbyte_16 (vector signed short ra, unsigned int count)\n+{\n+  return spu_srqwbyte (ra, count);\n+}\n+\n+vector unsigned int test_srqwbyte_17 (vector unsigned int ra, unsigned int count)\n+{\n+  return spu_srqwbyte (ra, count);\n+}\n+\n+vector signed int test_srqwbyte_18 (vector signed int ra, unsigned int count)\n+{\n+  return spu_srqwbyte (ra, count);\n+}\n+\n+vector unsigned long test_srqwbyte_19 (vector unsigned long ra, unsigned int count)\n+{\n+  return spu_srqwbyte (ra, count);\n+}\n+\n+vector signed long test_srqwbyte_20 (vector signed long ra, unsigned int count)\n+{\n+  return spu_srqwbyte (ra, count);\n+}\n+\n+vector unsigned long long test_srqwbyte_21 (vector unsigned long long ra, unsigned int count)\n+{\n+  return spu_srqwbyte (ra, count);\n+}\n+\n+vector signed long long test_srqwbyte_22 (vector signed long long ra, unsigned int count)\n+{\n+  return spu_srqwbyte (ra, count);\n+}\n+\n+vector float test_srqwbyte_23 (vector float ra, unsigned int count)\n+{\n+  return spu_srqwbyte (ra, count);\n+}\n+\n+vector double test_srqwbyte_24 (vector double ra, unsigned int count)\n+{\n+  return spu_srqwbyte (ra, count);\n+}\n+\n+/* spu_srqwbytebc */\n+\n+vector unsigned char test_srqwbytebc_1 (vector unsigned char ra)\n+{\n+  return spu_srqwbytebc (ra, 40);\n+}\n+\n+vector signed char test_srqwbytebc_2 (vector signed char ra)\n+{\n+  return spu_srqwbytebc (ra, 40);\n+}\n+\n+vector unsigned short test_srqwbytebc_3 (vector unsigned short ra)\n+{\n+  return spu_srqwbytebc (ra, 40);\n+}\n+\n+vector signed short test_srqwbytebc_4 (vector signed short ra)\n+{\n+  return spu_srqwbytebc (ra, 40);\n+}\n+\n+vector unsigned int test_srqwbytebc_5 (vector unsigned int ra)\n+{\n+  return spu_srqwbytebc (ra, 40);\n+}\n+\n+vector signed int test_srqwbytebc_6 (vector signed int ra)\n+{\n+  return spu_srqwbytebc (ra, 40);\n+}\n+\n+vector unsigned long test_srqwbytebc_7 (vector unsigned long ra)\n+{\n+  return spu_srqwbytebc (ra, 40);\n+}\n+\n+vector signed long test_srqwbytebc_8 (vector signed long ra)\n+{\n+  return spu_srqwbytebc (ra, 40);\n+}\n+\n+vector unsigned long long test_srqwbytebc_9 (vector unsigned long long ra)\n+{\n+  return spu_srqwbytebc (ra, 40);\n+}\n+\n+vector signed long long test_srqwbytebc_10 (vector signed long long ra)\n+{\n+  return spu_srqwbytebc (ra, 40);\n+}\n+\n+vector float test_srqwbytebc_11 (vector float ra)\n+{\n+  return spu_srqwbytebc (ra, 40);\n+}\n+\n+vector double test_srqwbytebc_12 (vector double ra)\n+{\n+  return spu_srqwbytebc (ra, 40);\n+}\n+\n+vector unsigned char test_srqwbytebc_13 (vector unsigned char ra, unsigned int count)\n+{\n+  return spu_srqwbytebc (ra, count);\n+}\n+\n+vector signed char test_srqwbytebc_14 (vector signed char ra, unsigned int count)\n+{\n+  return spu_srqwbytebc (ra, count);\n+}\n+\n+vector unsigned short test_srqwbytebc_15 (vector unsigned short ra, unsigned int count)\n+{\n+  return spu_srqwbytebc (ra, count);\n+}\n+\n+vector signed short test_srqwbytebc_16 (vector signed short ra, unsigned int count)\n+{\n+  return spu_srqwbytebc (ra, count);\n+}\n+\n+vector unsigned int test_srqwbytebc_17 (vector unsigned int ra, unsigned int count)\n+{\n+  return spu_srqwbytebc (ra, count);\n+}\n+\n+vector signed int test_srqwbytebc_18 (vector signed int ra, unsigned int count)\n+{\n+  return spu_srqwbytebc (ra, count);\n+}\n+\n+vector unsigned long test_srqwbytebc_19 (vector unsigned long ra, unsigned int count)\n+{\n+  return spu_srqwbytebc (ra, count);\n+}\n+\n+vector signed long test_srqwbytebc_20 (vector signed long ra, unsigned int count)\n+{\n+  return spu_srqwbytebc (ra, count);\n+}\n+\n+vector unsigned long long test_srqwbytebc_21 (vector unsigned long long ra, unsigned int count)\n+{\n+  return spu_srqwbytebc (ra, count);\n+}\n+\n+vector signed long long test_srqwbytebc_22 (vector signed long long ra, unsigned int count)\n+{\n+  return spu_srqwbytebc (ra, count);\n+}\n+\n+vector float test_srqwbytebc_23 (vector float ra, unsigned int count)\n+{\n+  return spu_srqwbytebc (ra, count);\n+}\n+\n+vector double test_srqwbytebc_24 (vector double ra, unsigned int count)\n+{\n+  return spu_srqwbytebc (ra, count);\n+}\n+"}]}