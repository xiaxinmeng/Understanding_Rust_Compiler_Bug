{"sha": "4a5e71f2348adcc49939804889d9f1a64d97005a", "node_id": "C_kwDOANBUbNoAKDRhNWU3MWYyMzQ4YWRjYzQ5OTM5ODA0ODg5ZDlmMWE2NGQ5NzAwNWE", "commit": {"author": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-11-13T14:11:41Z"}, "committer": {"name": "H.J. Lu", "email": "hjl.tools@gmail.com", "date": "2021-12-15T22:20:49Z"}, "message": "Sync with binutils: Support the PGO build for binutils+gdb\n\nSync with binutils for building binutils with LTO:\n\n1dbde357be3 Add missing changes to Makefile.tpl\naf019bfde9b Support the PGO build for binutils+gdb\n\nAdd the --enable-pgo-build[=lto] configure option.  When binutils+gdb\nis not built together with GCC, --enable-pgo-build enables the PGO build:\n\n1. First build with -fprofile-generate.\n2. Use \"make maybe-check-*\" to generate profiling data and pass -i to make\nto ignore errors when generating profiling data.\n3. Use \"make clean\" to remove the previous build.\n4. Rebuild with -fprofile-use.\n\nWith --enable-pgo-build=lto, -flto=jobserver -ffat-lto-objects are used\ntogether with -fprofile-generate and -fprofile-use.  Add '+' to the command\nline for recursive make to support -flto=jobserver -ffat-lto-objects.\n\nNB: --enable-pgo-build=lto enables the PGO build with LTO while\n--enable-lto enables LTO support in toolchain.\n\n\tBZ binutils/26766\n\t* Makefile.tpl (BUILD_CFLAGS): New.\n\t(CFLAGS): Append $(BUILD_CFLAGS).\n\t(CXXFLAGS): Likewise.\n\t(PGO_BUILD_GEN_FLAGS_TO_PASS): New.\n\t(PGO_BUILD_TRAINING_CFLAGS): Likewise.\n\t(PGO_BUILD_TRAINING_CXXFLAGS): Likewise.\n\t(PGO_BUILD_TRAINING_FLAGS_TO_PASS): Likewise.\n\t(PGO_BUILD_TRAINING_MFLAGS): Likewise.\n\t(PGO_BUILD_USE_FLAGS_TO_PASS): Likewise.\n\t(PGO-TRAINING-TARGETS): Likewise.\n\t(PGO_BUILD_TRAINING): Likewise.\n\t(all): Add '+' to the command line for recursive make.  Support\n\tthe PGO build.\n\t* configure.ac: Add --enable-pgo-build[=lto].\n\tAC_SUBST PGO_BUILD_GEN_CFLAGS, PGO_BUILD_USE_CFLAGS and\n\tPGO_BUILD_LTO_CFLAGS.  Enable the PGO build in Makefile.\n\t* Makefile.in: Regenerated.\n\t* configure: Likewise.", "tree": {"sha": "6c16473f5b0033713a80c1f62e241cd0fd0d91b1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/6c16473f5b0033713a80c1f62e241cd0fd0d91b1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4a5e71f2348adcc49939804889d9f1a64d97005a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a5e71f2348adcc49939804889d9f1a64d97005a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4a5e71f2348adcc49939804889d9f1a64d97005a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4a5e71f2348adcc49939804889d9f1a64d97005a/comments", "author": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hjl-tools", "id": 1072356, "node_id": "MDQ6VXNlcjEwNzIzNTY=", "avatar_url": "https://avatars.githubusercontent.com/u/1072356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hjl-tools", "html_url": "https://github.com/hjl-tools", "followers_url": "https://api.github.com/users/hjl-tools/followers", "following_url": "https://api.github.com/users/hjl-tools/following{/other_user}", "gists_url": "https://api.github.com/users/hjl-tools/gists{/gist_id}", "starred_url": "https://api.github.com/users/hjl-tools/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hjl-tools/subscriptions", "organizations_url": "https://api.github.com/users/hjl-tools/orgs", "repos_url": "https://api.github.com/users/hjl-tools/repos", "events_url": "https://api.github.com/users/hjl-tools/events{/privacy}", "received_events_url": "https://api.github.com/users/hjl-tools/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf8cdd35117dea2049abbeebcdf14de11b323ef7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf8cdd35117dea2049abbeebcdf14de11b323ef7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf8cdd35117dea2049abbeebcdf14de11b323ef7"}], "stats": {"total": 291, "additions": 285, "deletions": 6}, "files": [{"sha": "1e5d218941b23daf14ca8b5591a654cf49efdbed", "filename": "Makefile.in", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5e71f2348adcc49939804889d9f1a64d97005a/Makefile.in", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5e71f2348adcc49939804889d9f1a64d97005a/Makefile.in", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.in?ref=4a5e71f2348adcc49939804889d9f1a64d97005a", "patch": "@@ -447,6 +447,49 @@ LIBCXXFLAGS = $(CXXFLAGS) -fno-implicit-templates\n GOCFLAGS = $(CFLAGS)\n GDCFLAGS = $(CFLAGS)\n \n+# Pass additional PGO and LTO compiler options to the PGO build.\n+BUILD_CFLAGS = $(PGO_BUILD_CFLAGS) $(PGO_BUILD_LTO_CFLAGS)\n+override CFLAGS += $(BUILD_CFLAGS)\n+override CXXFLAGS += $(BUILD_CFLAGS)\n+\n+# Additional PGO and LTO compiler options to generate profiling data\n+# for the PGO build.\n+PGO_BUILD_GEN_FLAGS_TO_PASS = \\\n+\tPGO_BUILD_CFLAGS=\"@PGO_BUILD_GEN_CFLAGS@\" \\\n+\tPGO_BUILD_LTO_CFLAGS=\"@PGO_BUILD_LTO_CFLAGS@\"\n+\n+# NB: Filter out any compiler options which may fail PGO training runs.\n+PGO_BUILD_TRAINING_CFLAGS:= \\\n+\t$(filter-out -Werror=%,$(CFLAGS))\n+PGO_BUILD_TRAINING_CXXFLAGS:=\\\n+\t$(filter-out -Werror=%,$(CXXFLAGS))\n+PGO_BUILD_TRAINING_CFLAGS:= \\\n+\t$(filter-out -Wall,$(PGO_BUILD_TRAINING_CFLAGS))\n+PGO_BUILD_TRAINING_CXXFLAGS:= \\\n+\t$(filter-out -Wall,$(PGO_BUILD_TRAINING_CXXFLAGS))\n+PGO_BUILD_TRAINING_CFLAGS:= \\\n+\t$(filter-out -specs=%,$(PGO_BUILD_TRAINING_CFLAGS))\n+PGO_BUILD_TRAINING_CXXFLAGS:= \\\n+\t$(filter-out -specs=%,$(PGO_BUILD_TRAINING_CXXFLAGS))\n+PGO_BUILD_TRAINING_FLAGS_TO_PASS = \\\n+\tPGO_BUILD_TRAINING=yes \\\n+\tCFLAGS_FOR_TARGET=\"$(PGO_BUILD_TRAINING_CFLAGS)\" \\\n+\tCXXFLAGS_FOR_TARGET=\"$(PGO_BUILD_TRAINING_CXXFLAGS)\"\n+\n+# Ignore \"make check\" errors in PGO training runs.\n+PGO_BUILD_TRAINING_MFLAGS = -i\n+\n+# Additional PGO and LTO compiler options to use profiling data for the\n+# PGO build.\n+PGO_BUILD_USE_FLAGS_TO_PASS = \\\n+\tPGO_BUILD_CFLAGS=\"@PGO_BUILD_USE_CFLAGS@\" \\\n+\tPGO_BUILD_LTO_CFLAGS=\"@PGO_BUILD_LTO_CFLAGS@\"\n+\n+# PGO training targets for the PGO build.  FIXME: Add gold tests to\n+# training.\n+PGO-TRAINING-TARGETS = binutils gas gdb ld sim\n+PGO_BUILD_TRAINING = $(addprefix maybe-check-,$(PGO-TRAINING-TARGETS))\n+\n CREATE_GCOV = create_gcov\n \n TFLAGS =\n@@ -1099,6 +1142,12 @@ configure-target:  \\\n \n # The target built for a native non-bootstrap build.\n .PHONY: all\n+\n+# --enable-pgo-build enables the PGO build.\n+# 1. First build with -fprofile-generate.\n+# 2. Use \"make maybe-check-*\" to generate profiling data.\n+# 3. Use \"make clean\" to remove the previous build.\n+# 4. Rebuild with -fprofile-use.\n all:\n @if gcc-bootstrap\n \t[ -f stage_final ] || echo stage3 > stage_final\n@@ -1107,15 +1156,25 @@ all:\n \t$(MAKE) $(RECURSE_FLAGS_TO_PASS) `cat stage_final`-bubble\n @endif gcc-bootstrap\n \t@: $(MAKE); $(unstage)\n-\t@r=`${PWD_COMMAND}`; export r; \\\n+\t+@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n @if gcc-bootstrap\n \tif [ -f stage_last ]; then \\\n \t  TFLAGS=\"$(STAGE$(shell test ! -f stage_last || sed s,^stage,, stage_last)_TFLAGS)\"; \\\n \t  $(MAKE) $(TARGET_FLAGS_TO_PASS) all-host all-target; \\\n \telse \\\n @endif gcc-bootstrap\n-\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-host all-target \\\n+\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) \\\n+\t\t$(PGO_BUILD_GEN_FLAGS_TO_PASS) all-host all-target \\\n+@if pgo-build\n+\t&& $(MAKE) $(RECURSE_FLAGS_TO_PASS) \\\n+\t\t$(PGO_BUILD_TRAINING_MFLAGS) \\\n+\t\t$(PGO_BUILD_TRAINING_FLAGS_TO_PASS) \\\n+\t\t$(PGO_BUILD_TRAINING) \\\n+\t&& $(MAKE) $(RECURSE_FLAGS_TO_PASS) clean \\\n+\t&& $(MAKE) $(RECURSE_FLAGS_TO_PASS) \\\n+\t\t$(PGO_BUILD_USE_FLAGS_TO_PASS) all-host all-target \\\n+@endif pgo-build\n @if gcc-bootstrap\n \t    ; \\\n \tfi \\"}, {"sha": "268bbc7af1c5db6e896836ebc636a4cb98e8ef6c", "filename": "Makefile.tpl", "status": "modified", "additions": 61, "deletions": 2, "changes": 63, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5e71f2348adcc49939804889d9f1a64d97005a/Makefile.tpl", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5e71f2348adcc49939804889d9f1a64d97005a/Makefile.tpl", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/Makefile.tpl?ref=4a5e71f2348adcc49939804889d9f1a64d97005a", "patch": "@@ -450,6 +450,49 @@ LIBCXXFLAGS = $(CXXFLAGS) -fno-implicit-templates\n GOCFLAGS = $(CFLAGS)\n GDCFLAGS = $(CFLAGS)\n \n+# Pass additional PGO and LTO compiler options to the PGO build.\n+BUILD_CFLAGS = $(PGO_BUILD_CFLAGS) $(PGO_BUILD_LTO_CFLAGS)\n+override CFLAGS += $(BUILD_CFLAGS)\n+override CXXFLAGS += $(BUILD_CFLAGS)\n+\n+# Additional PGO and LTO compiler options to generate profiling data\n+# for the PGO build.\n+PGO_BUILD_GEN_FLAGS_TO_PASS = \\\n+\tPGO_BUILD_CFLAGS=\"@PGO_BUILD_GEN_CFLAGS@\" \\\n+\tPGO_BUILD_LTO_CFLAGS=\"@PGO_BUILD_LTO_CFLAGS@\"\n+\n+# NB: Filter out any compiler options which may fail PGO training runs.\n+PGO_BUILD_TRAINING_CFLAGS:= \\\n+\t$(filter-out -Werror=%,$(CFLAGS))\n+PGO_BUILD_TRAINING_CXXFLAGS:=\\\n+\t$(filter-out -Werror=%,$(CXXFLAGS))\n+PGO_BUILD_TRAINING_CFLAGS:= \\\n+\t$(filter-out -Wall,$(PGO_BUILD_TRAINING_CFLAGS))\n+PGO_BUILD_TRAINING_CXXFLAGS:= \\\n+\t$(filter-out -Wall,$(PGO_BUILD_TRAINING_CXXFLAGS))\n+PGO_BUILD_TRAINING_CFLAGS:= \\\n+\t$(filter-out -specs=%,$(PGO_BUILD_TRAINING_CFLAGS))\n+PGO_BUILD_TRAINING_CXXFLAGS:= \\\n+\t$(filter-out -specs=%,$(PGO_BUILD_TRAINING_CXXFLAGS))\n+PGO_BUILD_TRAINING_FLAGS_TO_PASS = \\\n+\tPGO_BUILD_TRAINING=yes \\\n+\tCFLAGS_FOR_TARGET=\"$(PGO_BUILD_TRAINING_CFLAGS)\" \\\n+\tCXXFLAGS_FOR_TARGET=\"$(PGO_BUILD_TRAINING_CXXFLAGS)\"\n+\n+# Ignore \"make check\" errors in PGO training runs.\n+PGO_BUILD_TRAINING_MFLAGS = -i\n+\n+# Additional PGO and LTO compiler options to use profiling data for the\n+# PGO build.\n+PGO_BUILD_USE_FLAGS_TO_PASS = \\\n+\tPGO_BUILD_CFLAGS=\"@PGO_BUILD_USE_CFLAGS@\" \\\n+\tPGO_BUILD_LTO_CFLAGS=\"@PGO_BUILD_LTO_CFLAGS@\"\n+\n+# PGO training targets for the PGO build.  FIXME: Add gold tests to\n+# training.\n+PGO-TRAINING-TARGETS = binutils gas gdb ld sim\n+PGO_BUILD_TRAINING = $(addprefix maybe-check-,$(PGO-TRAINING-TARGETS))\n+\n CREATE_GCOV = create_gcov\n \n TFLAGS =\n@@ -784,6 +827,12 @@ configure-target: [+\n \n # The target built for a native non-bootstrap build.\n .PHONY: all\n+\n+# --enable-pgo-build enables the PGO build.\n+# 1. First build with -fprofile-generate.\n+# 2. Use \"make maybe-check-*\" to generate profiling data.\n+# 3. Use \"make clean\" to remove the previous build.\n+# 4. Rebuild with -fprofile-use.\n all:\n @if gcc-bootstrap\n \t[ -f stage_final ] || echo stage3 > stage_final\n@@ -792,15 +841,25 @@ all:\n \t$(MAKE) $(RECURSE_FLAGS_TO_PASS) `cat stage_final`-bubble\n @endif gcc-bootstrap\n \t@: $(MAKE); $(unstage)\n-\t@r=`${PWD_COMMAND}`; export r; \\\n+\t+@r=`${PWD_COMMAND}`; export r; \\\n \ts=`cd $(srcdir); ${PWD_COMMAND}`; export s; \\\n @if gcc-bootstrap\n \tif [ -f stage_last ]; then \\\n \t  TFLAGS=\"$(STAGE$(shell test ! -f stage_last || sed s,^stage,, stage_last)_TFLAGS)\"; \\\n \t  $(MAKE) $(TARGET_FLAGS_TO_PASS) all-host all-target; \\\n \telse \\\n @endif gcc-bootstrap\n-\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) all-host all-target \\\n+\t  $(MAKE) $(RECURSE_FLAGS_TO_PASS) \\\n+\t\t$(PGO_BUILD_GEN_FLAGS_TO_PASS) all-host all-target \\\n+@if pgo-build\n+\t&& $(MAKE) $(RECURSE_FLAGS_TO_PASS) \\\n+\t\t$(PGO_BUILD_TRAINING_MFLAGS) \\\n+\t\t$(PGO_BUILD_TRAINING_FLAGS_TO_PASS) \\\n+\t\t$(PGO_BUILD_TRAINING) \\\n+\t&& $(MAKE) $(RECURSE_FLAGS_TO_PASS) clean \\\n+\t&& $(MAKE) $(RECURSE_FLAGS_TO_PASS) \\\n+\t\t$(PGO_BUILD_USE_FLAGS_TO_PASS) all-host all-target \\\n+@endif pgo-build\n @if gcc-bootstrap\n \t    ; \\\n \tfi \\"}, {"sha": "97d2a554019d3b6f0a467b5830a90e1c70dae76a", "filename": "configure", "status": "modified", "additions": 98, "deletions": 2, "changes": 100, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5e71f2348adcc49939804889d9f1a64d97005a/configure", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5e71f2348adcc49939804889d9f1a64d97005a/configure", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure?ref=4a5e71f2348adcc49939804889d9f1a64d97005a", "patch": "@@ -702,6 +702,9 @@ extra_mpc_gmp_configure_flags\n extra_mpfr_configure_flags\n gmpinc\n gmplibs\n+PGO_BUILD_LTO_CFLAGS\n+PGO_BUILD_USE_CFLAGS\n+PGO_BUILD_GEN_CFLAGS\n HAVE_CXX11_FOR_BUILD\n HAVE_CXX11\n do_compare\n@@ -806,6 +809,7 @@ enable_libssp\n enable_libstdcxx\n enable_liboffloadmic\n enable_bootstrap\n+enable_pgo_build\n with_mpc\n with_mpc_include\n with_mpc_lib\n@@ -1546,6 +1550,8 @@ Optional Features:\n   --enable-liboffloadmic=ARG\n                           build liboffloadmic [ARG={no,host,target}]\n   --enable-bootstrap      enable bootstrapping [yes if native build]\n+  --enable-pgo-build[=lto]\n+                          enable the PGO build\n   --disable-isl-version-check\n                           disable check for isl version\n   --enable-lto            enable link time optimization support\n@@ -7812,6 +7818,91 @@ $as_echo \"#define HAVE_CXX11_FOR_BUILD 1\" >>confdefs.h\n   fi\n fi\n \n+# Check whether --enable-pgo-build was given.\n+if test \"${enable_pgo_build+set}\" = set; then :\n+  enableval=$enable_pgo_build; enable_pgo_build=$enableval\n+else\n+  enable_pgo_build=no\n+fi\n+\n+\n+# Issue errors and warnings for invalid/strange PGO build combinations.\n+case \"$have_compiler:$host:$target:$enable_pgo_build\" in\n+  *:*:*:no) ;;\n+\n+  # Allow the PGO build only if we aren't building a compiler and\n+  # we are in a native configuration.\n+  no:$build:$build:yes | no:$build:$build:lto) ;;\n+\n+  # Disallow the PGO bootstrap if we are building a compiler.\n+  yes:*:*:yes | yes:*:*:lto)\n+    as_fn_error $? \"cannot perform the PGO bootstrap when building a compiler\" \"$LINENO\" 5 ;;\n+\n+  *)\n+    as_fn_error $? \"invalid option for --enable-pgo-build\" \"$LINENO\" 5\n+    ;;\n+esac\n+\n+if test \"$enable_pgo_build\" != \"no\"; then\n+  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the compiler supports -fprofile-generate\" >&5\n+$as_echo_n \"checking whether the compiler supports -fprofile-generate... \" >&6; }\n+  old_CFLAGS=\"$CFLAGS\"\n+  PGO_BUILD_GEN_CFLAGS=\"-fprofile-generate\"\n+  CFLAGS=\"$CFLAGS $PGO_BUILD_CFLAGS\"\n+\n+cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+int foo;\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+else\n+  PGO_BUILD_GEN_CFLAGS=\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+  CFLAGS=\"$old_CFLAGS\"\n+  if test -n \"$PGO_BUILD_GEN_CFLAGS\"; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+$as_echo \"yes\" >&6; }\n+    PGO_BUILD_USE_CFLAGS=\"-fprofile-use\"\n+  else\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+    as_fn_error $? \"cannot perform the PGO build without -fprofile-generate\" \"$LINENO\" 5\n+  fi\n+\n+  if test \"$enable_pgo_build\" = \"lto\"; then\n+    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the compiler supports -flto=jobserver -ffat-lto-objects\" >&5\n+$as_echo_n \"checking whether the compiler supports -flto=jobserver -ffat-lto-objects... \" >&6; }\n+    old_CFLAGS=\"$CFLAGS\"\n+    PGO_BUILD_LTO_CFLAGS=\"-flto=jobserver -ffat-lto-objects\"\n+    CFLAGS=\"$CFLAGS $PGO_BUILD_LTO_CFLAGS\"\n+    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+/* end confdefs.h.  */\n+int foo;\n+_ACEOF\n+if ac_fn_c_try_compile \"$LINENO\"; then :\n+\n+else\n+  PGO_BUILD_LTO_CFLAGS=\n+fi\n+rm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n+    CFLAGS=\"$old_CFLAGS\"\n+    if test -n \"$PGO_BUILD_LTO_CFLAGS\"; then\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n+$as_echo \"yes\" >&6; }\n+    else\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n+$as_echo \"no\" >&6; }\n+      { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: LTO is disabled for the PGO build\" >&5\n+$as_echo \"$as_me: WARNING: LTO is disabled for the PGO build\" >&2;}\n+    fi\n+  fi\n+fi\n+\n+\n+\n+\n # Used for setting $lt_cv_objdir\n { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for objdir\" >&5\n $as_echo_n \"checking for objdir... \" >&6; }\n@@ -8001,8 +8092,7 @@ if test -d ${srcdir}/gcc && test \"x$have_gmp\" = xno; then\n   # Check for the recommended and required versions of GMP.\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for the correct version of gmp.h\" >&5\n $as_echo_n \"checking for the correct version of gmp.h... \" >&6; }\n-\n-cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n+  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n /* end confdefs.h.  */\n #include \"gmp.h\"\n int\n@@ -9780,6 +9870,12 @@ extrasub_target=\"$extrasub_target\n /^@unless /d\n /^@endunless /d\"\n \n+if test \"$enable_pgo_build\" != \"no\"; then\n+  extrasub_build=\"$extrasub_build\n+/^@if pgo-build\\$/d\n+/^@endif pgo-build\\$/d\"\n+fi\n+\n # Create the serialization dependencies.  This uses a temporary file.\n \n # Check whether --enable-serial-configure was given."}, {"sha": "5a8ef70444d6e20832e5295e7c73e3dc26fc1e6c", "filename": "configure.ac", "status": "modified", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4a5e71f2348adcc49939804889d9f1a64d97005a/configure.ac", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4a5e71f2348adcc49939804889d9f1a64d97005a/configure.ac", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/configure.ac?ref=4a5e71f2348adcc49939804889d9f1a64d97005a", "patch": "@@ -1466,6 +1466,65 @@ elif test \"$have_compiler\" = yes; then\n   fi\n fi\n \n+AC_ARG_ENABLE([pgo-build],\n+[AS_HELP_STRING([--enable-pgo-build[[=lto]]],\n+\t\t[enable the PGO build])],\n+[enable_pgo_build=$enableval],\n+[enable_pgo_build=no])\n+\n+# Issue errors and warnings for invalid/strange PGO build combinations.\n+case \"$have_compiler:$host:$target:$enable_pgo_build\" in\n+  *:*:*:no) ;;\n+\n+  # Allow the PGO build only if we aren't building a compiler and\n+  # we are in a native configuration.\n+  no:$build:$build:yes | no:$build:$build:lto) ;;\n+\n+  # Disallow the PGO bootstrap if we are building a compiler.\n+  yes:*:*:yes | yes:*:*:lto)\n+    AC_MSG_ERROR([cannot perform the PGO bootstrap when building a compiler]) ;;\n+\n+  *)\n+    AC_MSG_ERROR([invalid option for --enable-pgo-build])\n+    ;;\n+esac\n+\n+if test \"$enable_pgo_build\" != \"no\"; then\n+  AC_MSG_CHECKING([whether the compiler supports -fprofile-generate])\n+  old_CFLAGS=\"$CFLAGS\"\n+  PGO_BUILD_GEN_CFLAGS=\"-fprofile-generate\"\n+  CFLAGS=\"$CFLAGS $PGO_BUILD_CFLAGS\"\n+  AC_COMPILE_IFELSE([AC_LANG_SOURCE([int foo;])],,\n+\t\t    [PGO_BUILD_GEN_CFLAGS=])\n+  CFLAGS=\"$old_CFLAGS\"\n+  if test -n \"$PGO_BUILD_GEN_CFLAGS\"; then\n+    AC_MSG_RESULT([yes])\n+    PGO_BUILD_USE_CFLAGS=\"-fprofile-use\"\n+  else\n+    AC_MSG_RESULT([no])\n+    AC_MSG_ERROR([cannot perform the PGO build without -fprofile-generate])\n+  fi\n+\n+  if test \"$enable_pgo_build\" = \"lto\"; then\n+    AC_MSG_CHECKING([whether the compiler supports -flto=jobserver -ffat-lto-objects])\n+    old_CFLAGS=\"$CFLAGS\"\n+    PGO_BUILD_LTO_CFLAGS=\"-flto=jobserver -ffat-lto-objects\"\n+    CFLAGS=\"$CFLAGS $PGO_BUILD_LTO_CFLAGS\"\n+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([int foo;])],,\n+\t\t      [PGO_BUILD_LTO_CFLAGS=])\n+    CFLAGS=\"$old_CFLAGS\"\n+    if test -n \"$PGO_BUILD_LTO_CFLAGS\"; then\n+      AC_MSG_RESULT([yes])\n+    else\n+      AC_MSG_RESULT([no])\n+      AC_MSG_WARN([LTO is disabled for the PGO build])\n+    fi\n+  fi\n+fi\n+AC_SUBST(PGO_BUILD_GEN_CFLAGS)\n+AC_SUBST(PGO_BUILD_USE_CFLAGS)\n+AC_SUBST(PGO_BUILD_LTO_CFLAGS)\n+\n # Used for setting $lt_cv_objdir\n _LT_CHECK_OBJDIR\n \n@@ -2997,6 +3056,12 @@ extrasub_target=\"$extrasub_target\n /^@unless /d\n /^@endunless /d\"\n \n+if test \"$enable_pgo_build\" != \"no\"; then\n+  extrasub_build=\"$extrasub_build\n+/^@if pgo-build\\$/d\n+/^@endif pgo-build\\$/d\"\n+fi\n+\n # Create the serialization dependencies.  This uses a temporary file.\n \n AC_ARG_ENABLE([serial-configure],"}]}