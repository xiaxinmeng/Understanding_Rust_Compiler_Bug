{"sha": "725730f272e7ef4d05a6af48313c3cbdac636a5d", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzI1NzMwZjI3MmU3ZWY0ZDA1YTZhZjQ4MzEzYzNjYmRhYzYzNmE1ZA==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-09-13T10:46:11Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2009-09-13T10:46:11Z"}, "message": "tree.h (DECL_IGNORED_P): Document further effect for FUNCTION_DECL.\n\n\t* tree.h (DECL_IGNORED_P): Document further effect for FUNCTION_DECL.\n\t* dbxout.c (dbxout_function_end): Do not test DECL_IGNORED_P.\n\t(dbxout_begin_function): Likewise.\n\t* final.c (dwarf2_debug_info_emitted_p): New predicate.\n\t(final_start_function): Do not emit debug info if DECL_IGNORED_P is\n\tset on the function.\n\t(final_end_function): Likewise.\n\t(final_scan_insn): Likewise.\n\t(rest_of_handle_final): Likewise.\n\t* varasm.c (assemble_start_function): Likewise.\n\t* config/rs6000/xcoff.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n\nFrom-SVN: r151670", "tree": {"sha": "ccd535803458c5e9c5296cc0d263b63525bbd580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ccd535803458c5e9c5296cc0d263b63525bbd580"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/725730f272e7ef4d05a6af48313c3cbdac636a5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725730f272e7ef4d05a6af48313c3cbdac636a5d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/725730f272e7ef4d05a6af48313c3cbdac636a5d", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/725730f272e7ef4d05a6af48313c3cbdac636a5d/comments", "author": null, "committer": null, "parents": [{"sha": "75152bcb194ff350853ac5cc13a1e04ff82c7f81", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/75152bcb194ff350853ac5cc13a1e04ff82c7f81", "html_url": "https://github.com/Rust-GCC/gccrs/commit/75152bcb194ff350853ac5cc13a1e04ff82c7f81"}], "stats": {"total": 92, "additions": 62, "deletions": 30}, "files": [{"sha": "a2016ed738e0151249e809e03ad82e7aa93ed8ca", "filename": "gcc/ChangeLog", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725730f272e7ef4d05a6af48313c3cbdac636a5d/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725730f272e7ef4d05a6af48313c3cbdac636a5d/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=725730f272e7ef4d05a6af48313c3cbdac636a5d", "patch": "@@ -1,4 +1,18 @@\n-2009-09-10  Jason Merrill  <jason@redhat.com>\n+2009-09-13  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* tree.h (DECL_IGNORED_P): Document further effect for FUNCTION_DECL.\n+\t* dbxout.c (dbxout_function_end): Do not test DECL_IGNORED_P.\n+\t(dbxout_begin_function): Likewise.\n+\t* final.c (dwarf2_debug_info_emitted_p): New predicate.\n+\t(final_start_function): Do not emit debug info if DECL_IGNORED_P is\n+\tset on the function.\n+\t(final_end_function): Likewise.\n+\t(final_scan_insn): Likewise.\n+\t(rest_of_handle_final): Likewise.\n+\t* varasm.c (assemble_start_function): Likewise.\n+\t* config/rs6000/xcoff.h (ASM_DECLARE_FUNCTION_NAME): Likewise.\n+\n+2009-09-12  Jason Merrill  <jason@redhat.com>\n \n \t* dbgcnt.c (dbg_cnt_process_single_pair): constify.\n \t* opts.c (common_handle_option): constify."}, {"sha": "e5c47822355df140d1e92c777137c15ea8ba5788", "filename": "gcc/config/rs6000/xcoff.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725730f272e7ef4d05a6af48313c3cbdac636a5d/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725730f272e7ef4d05a6af48313c3cbdac636a5d/gcc%2Fconfig%2Frs6000%2Fxcoff.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fxcoff.h?ref=725730f272e7ef4d05a6af48313c3cbdac636a5d", "patch": "@@ -190,7 +190,7 @@\n   putc ('.', FILE);\t\t\t\t\t\t\\\n   RS6000_OUTPUT_BASENAME (FILE, buffer);\t\t\t\\\n   fputs (\":\\n\", FILE);\t\t\t\t\t\t\\\n-  if (write_symbols != NO_DEBUG)\t\t\t\t\\\n+  if (write_symbols != NO_DEBUG && !DECL_IGNORED_P (DECL))\t\\\n     xcoffout_declare_function (FILE, DECL, buffer);\t\t\\\n }\n "}, {"sha": "097b20be860e48cabbcba858163dfd7c67d28d24", "filename": "gcc/dbxout.c", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725730f272e7ef4d05a6af48313c3cbdac636a5d/gcc%2Fdbxout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725730f272e7ef4d05a6af48313c3cbdac636a5d/gcc%2Fdbxout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdbxout.c?ref=725730f272e7ef4d05a6af48313c3cbdac636a5d", "patch": "@@ -902,7 +902,7 @@ dbxout_finish_complex_stabs (tree sym, stab_code_type code,\n #if defined (DBX_DEBUGGING_INFO)\n \n static void\n-dbxout_function_end (tree decl)\n+dbxout_function_end (tree decl ATTRIBUTE_UNUSED)\n {\n   char lscope_label_name[100];\n \n@@ -921,8 +921,7 @@ dbxout_function_end (tree decl)\n      named sections.  */\n   if (!use_gnu_debug_info_extensions\n       || NO_DBX_FUNCTION_END\n-      || !targetm.have_named_sections\n-      || DECL_IGNORED_P (decl))\n+      || !targetm.have_named_sections)\n     return;\n \n   /* By convention, GCC will mark the end of a function with an N_FUN\n@@ -3683,9 +3682,6 @@ dbxout_begin_function (tree decl)\n {\n   int saved_tree_used1;\n \n-  if (DECL_IGNORED_P (decl))\n-    return;\n-\n   saved_tree_used1 = TREE_USED (decl);\n   TREE_USED (decl) = 1;\n   if (DECL_NAME (DECL_RESULT (decl)) != 0)"}, {"sha": "3ecb415d79525f1649877396bc84a709d8b8cada", "filename": "gcc/final.c", "status": "modified", "additions": 40, "deletions": 20, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725730f272e7ef4d05a6af48313c3cbdac636a5d/gcc%2Ffinal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725730f272e7ef4d05a6af48313c3cbdac636a5d/gcc%2Ffinal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffinal.c?ref=725730f272e7ef4d05a6af48313c3cbdac636a5d", "patch": "@@ -1484,6 +1484,20 @@ remap_debug_filename (const char *filename)\n   return ggc_strdup (s);\n }\n \f\n+/* Return true if DWARF2 debug info can be emitted for DECL.  */\n+\n+static bool\n+dwarf2_debug_info_emitted_p (tree decl)\n+{\n+  if (write_symbols != DWARF2_DEBUG && write_symbols != VMS_AND_DWARF2_DEBUG)\n+    return false;\n+\n+  if (DECL_IGNORED_P (decl))\n+    return false;\n+\n+  return true;\n+}\n+\n /* Output assembler code for the start of a function,\n    and initialize some of the variables in this file\n    for the new function.  The label for the function and associated\n@@ -1508,10 +1522,11 @@ final_start_function (rtx first ATTRIBUTE_UNUSED, FILE *file,\n \n   high_block_linenum = high_function_linenum = last_linenum;\n \n-  (*debug_hooks->begin_prologue) (last_linenum, last_filename);\n+  if (!DECL_IGNORED_P (current_function_decl))\n+    debug_hooks->begin_prologue (last_linenum, last_filename);\n \n #if defined (DWARF2_UNWIND_INFO) || defined (TARGET_UNWIND_INFO)\n-  if (write_symbols != DWARF2_DEBUG && write_symbols != VMS_AND_DWARF2_DEBUG)\n+  if (!dwarf2_debug_info_emitted_p (current_function_decl))\n     dwarf2out_begin_prologue (0, NULL);\n #endif\n \n@@ -1648,17 +1663,19 @@ final_end_function (void)\n {\n   app_disable ();\n \n-  (*debug_hooks->end_function) (high_function_linenum);\n+  if (!DECL_IGNORED_P (current_function_decl))\n+    debug_hooks->end_function (high_function_linenum);\n \n   /* Finally, output the function epilogue:\n      code to restore the stack frame and return to the caller.  */\n   targetm.asm_out.function_epilogue (asm_out_file, get_frame_size ());\n \n   /* And debug output.  */\n-  (*debug_hooks->end_epilogue) (last_linenum, last_filename);\n+  if (!DECL_IGNORED_P (current_function_decl))\n+    debug_hooks->end_epilogue (last_linenum, last_filename);\n \n #if defined (DWARF2_UNWIND_INFO)\n-  if (write_symbols != DWARF2_DEBUG && write_symbols != VMS_AND_DWARF2_DEBUG\n+  if (!dwarf2_debug_info_emitted_p (current_function_decl)\n       && dwarf2out_do_frame ())\n     dwarf2out_end_epilogue (last_linenum, last_filename);\n #endif\n@@ -1839,7 +1856,8 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t    dwarf2out_switch_text_section ();\n \t  else\n #endif\n-\t    (*debug_hooks->switch_text_section) ();\n+\t  if (!DECL_IGNORED_P (current_function_decl))\n+\t    debug_hooks->switch_text_section ();\n \n \t  switch_to_section (current_function_section ());\n \t  break;\n@@ -1905,7 +1923,8 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \n \tcase NOTE_INSN_FUNCTION_BEG:\n \t  app_disable ();\n-\t  (*debug_hooks->end_prologue) (last_linenum, last_filename);\n+\t  if (!DECL_IGNORED_P (current_function_decl))\n+\t    debug_hooks->end_prologue (last_linenum, last_filename);\n \n \t  if ((*seen & (SEEN_EMITTED | SEEN_NOTE)) == SEEN_NOTE)\n \t    {\n@@ -1931,7 +1950,8 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t      high_block_linenum = last_linenum;\n \n \t      /* Output debugging info about the symbol-block beginning.  */\n-\t      (*debug_hooks->begin_block) (last_linenum, n);\n+\t      if (!DECL_IGNORED_P (current_function_decl))\n+\t\tdebug_hooks->begin_block (last_linenum, n);\n \n \t      /* Mark this block as output.  */\n \t      TREE_ASM_WRITTEN (NOTE_BLOCK (insn)) = 1;\n@@ -1965,7 +1985,8 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t      --block_depth;\n \t      gcc_assert (block_depth >= 0);\n \n-\t      (*debug_hooks->end_block) (high_block_linenum, n);\n+\t      if (!DECL_IGNORED_P (current_function_decl))\n+\t\tdebug_hooks->end_block (high_block_linenum, n);\n \t    }\n \t  if (write_symbols == DBX_DEBUG\n \t      || write_symbols == SDB_DEBUG)\n@@ -1995,7 +2016,8 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t  break;\n \n \tcase NOTE_INSN_VAR_LOCATION:\n-\t  (*debug_hooks->var_location) (insn);\n+\t  if (!DECL_IGNORED_P (current_function_decl))\n+\t    debug_hooks->var_location (insn);\n \t  break;\n \n \tdefault:\n@@ -2038,8 +2060,8 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n       CC_STATUS_INIT;\n #endif\n \n-      if (LABEL_NAME (insn))\n-\t(*debug_hooks->label) (insn);\n+      if (!DECL_IGNORED_P (current_function_decl) && LABEL_NAME (insn))\n+\tdebug_hooks->label (insn);\n \n       app_disable ();\n \n@@ -2193,13 +2215,10 @@ final_scan_insn (rtx insn, FILE *file, int optimize ATTRIBUTE_UNUSED,\n \t  }\n \t/* Output this line note if it is the first or the last line\n \t   note in a row.  */\n-\tif (notice_source_line (insn, &is_stmt))\n-\t  {\n-\t    (*debug_hooks->source_line) (last_linenum,\n-\t                                 last_filename,\n-\t                                 last_discriminator,\n-\t                                 is_stmt);\n-\t  }\n+\tif (!DECL_IGNORED_P (current_function_decl)\n+\t    && notice_source_line (insn, &is_stmt))\n+\t  (*debug_hooks->source_line) (last_linenum, last_filename,\n+\t\t\t\t       last_discriminator, is_stmt);\n \n \tif (GET_CODE (body) == ASM_INPUT)\n \t  {\n@@ -4261,7 +4280,8 @@ rest_of_handle_final (void)\n      *will* be routed past here.  */\n \n   timevar_push (TV_SYMOUT);\n-  (*debug_hooks->function_decl) (current_function_decl);\n+  if (!DECL_IGNORED_P (current_function_decl))\n+    debug_hooks->function_decl (current_function_decl);\n   timevar_pop (TV_SYMOUT);\n \n   /* Release the blocks that are linked to DECL_INITIAL() to free the memory.  */"}, {"sha": "45391d3fb9493a11b69b02a9db1a7a7372bc1175", "filename": "gcc/tree.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725730f272e7ef4d05a6af48313c3cbdac636a5d/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725730f272e7ef4d05a6af48313c3cbdac636a5d/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=725730f272e7ef4d05a6af48313c3cbdac636a5d", "patch": "@@ -2539,7 +2539,8 @@ struct GTY(()) tree_decl_minimal {\n   (DECL_COMMON_CHECK (NODE)->decl_common.debug_expr_is_from)\n \n /* Nonzero for a given ..._DECL node means that the name of this node should\n-   be ignored for symbolic debug purposes.  */\n+   be ignored for symbolic debug purposes.  Moreover, for a FUNCTION_DECL,\n+   the body of the function should also be ignored.  */\n #define DECL_IGNORED_P(NODE) (DECL_COMMON_CHECK (NODE)->decl_common.ignored_flag)\n \n /* Nonzero for a given ..._DECL node means that this node represents an"}, {"sha": "f8cc2914693b57365ffcf00d745f26203b5626bb", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/725730f272e7ef4d05a6af48313c3cbdac636a5d/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/725730f272e7ef4d05a6af48313c3cbdac636a5d/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=725730f272e7ef4d05a6af48313c3cbdac636a5d", "patch": "@@ -1749,7 +1749,8 @@ assemble_start_function (tree decl, const char *fnname)\n   ASM_OUTPUT_FUNCTION_PREFIX (asm_out_file, fnname);\n #endif\n \n-  (*debug_hooks->begin_function) (decl);\n+  if (!DECL_IGNORED_P (decl))\n+    (*debug_hooks->begin_function) (decl);\n \n   /* Make function name accessible from other files, if appropriate.  */\n "}]}