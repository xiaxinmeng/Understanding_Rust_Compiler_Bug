{"sha": "0d179691da597b8e2cb9ff55a5875f2c60e1cfbd", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGQxNzk2OTFkYTU5N2I4ZTJjYjlmZjU1YTU4NzVmMmM2MGUxY2ZiZA==", "commit": {"author": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-14T19:27:50Z"}, "committer": {"name": "Manuel L\u00f3pez-Ib\u00e1\u00f1ez", "email": "manu@gcc.gnu.org", "date": "2015-09-14T19:27:50Z"}, "message": "The flag diagnostic_context::some_warnings_are_errors controls whether to give...\n\nThe flag diagnostic_context::some_warnings_are_errors controls whether\nto give the message \"all warnings being treated as errors\". However, when\nwarnings are buffered and then discarded, this flag is not reset. It turns\nout we do not need this flag at all, since we already count explicitly how\nmany warnings were converted into errors, and this number is kept up to\ndate for the buffered diagnostics used by Fortran.\n\ngcc/ChangeLog:\n\n2015-09-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR fortran/67460\n\t* diagnostic.c (diagnostic_initialize): Do not set\n\tsome_warnings_are_errors.\n\t(diagnostic_finish): Use DK_WERROR count instead.\n\t(diagnostic_report_diagnostic): Do not set\n\tsome_warnings_are_errors.\n\t* diagnostic.h (struct diagnostic_context): Remove\n\tsome_warnings_are_errors.\n\ngcc/testsuite/ChangeLog:\n\n2015-09-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n\n\tPR fortran/67460\n\t* gfortran.dg/pr67460.f90: New test.\n\nFrom-SVN: r227760", "tree": {"sha": "d1111a6ca96f46cd25e7fb0b9fc44f1375d175e1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d1111a6ca96f46cd25e7fb0b9fc44f1375d175e1"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd/comments", "author": null, "committer": null, "parents": [{"sha": "34e985136246df6832aed4dccdf7ed0cbcf4a9aa", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/34e985136246df6832aed4dccdf7ed0cbcf4a9aa", "html_url": "https://github.com/Rust-GCC/gccrs/commit/34e985136246df6832aed4dccdf7ed0cbcf4a9aa"}], "stats": {"total": 50, "additions": 41, "deletions": 9}, "files": [{"sha": "f731a1fd0126aeff520a44a1d4c8a3451c207101", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0d179691da597b8e2cb9ff55a5875f2c60e1cfbd", "patch": "@@ -1,3 +1,14 @@\n+2015-09-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/67460\n+\t* diagnostic.c (diagnostic_initialize): Do not set\n+\tsome_warnings_are_errors.\n+\t(diagnostic_finish): Use DK_WERROR count instead.\n+\t(diagnostic_report_diagnostic): Do not set\n+\tsome_warnings_are_errors.\n+\t* diagnostic.h (struct diagnostic_context): Remove\n+\tsome_warnings_are_errors.\n+\n 2015-09-14  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* config/sparc/predicates.md (const_all_ones_operand): Use"}, {"sha": "e5c3c1dbfec20ee77012d4c13d206f9869708070", "filename": "gcc/diagnostic.c", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd/gcc%2Fdiagnostic.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd/gcc%2Fdiagnostic.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.c?ref=0d179691da597b8e2cb9ff55a5875f2c60e1cfbd", "patch": "@@ -137,7 +137,6 @@ diagnostic_initialize (diagnostic_context *context, int n_opts)\n   new (context->printer) pretty_printer ();\n \n   memset (context->diagnostic_count, 0, sizeof context->diagnostic_count);\n-  context->some_warnings_are_errors = false;\n   context->warning_as_error_requested = false;\n   context->n_opts = n_opts;\n   context->classify_diagnostic = XNEWVEC (diagnostic_t, n_opts);\n@@ -204,7 +203,7 @@ void\n diagnostic_finish (diagnostic_context *context)\n {\n   /* Some of the errors may actually have been warnings.  */\n-  if (context->some_warnings_are_errors)\n+  if (diagnostic_kind_count (context, DK_WERROR))\n     {\n       /* -Werror was given.  */\n       if (context->warning_as_error_requested)\n@@ -861,9 +860,6 @@ diagnostic_report_diagnostic (diagnostic_context *context,\n \treturn false;\n     }\n \n-  if (orig_diag_kind == DK_WARNING && diagnostic->kind == DK_ERROR)\n-    context->some_warnings_are_errors = true;\n-\n   context->lock++;\n \n   if (diagnostic->kind == DK_ICE || diagnostic->kind == DK_ICE_NOBT)"}, {"sha": "7fcb6a8cd0eb4b856cea01eb4c434e22d8728f9a", "filename": "gcc/diagnostic.h", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd/gcc%2Fdiagnostic.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd/gcc%2Fdiagnostic.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdiagnostic.h?ref=0d179691da597b8e2cb9ff55a5875f2c60e1cfbd", "patch": "@@ -66,10 +66,6 @@ struct diagnostic_context\n   /* The number of times we have issued diagnostics.  */\n   int diagnostic_count[DK_LAST_DIAGNOSTIC_KIND];\n \n-  /* True if we should display the \"warnings are being tread as error\"\n-     message, usually displayed once per compiler run.  */\n-  bool some_warnings_are_errors;\n-\n   /* True if it has been requested that warnings be treated as errors.  */\n   bool warning_as_error_requested;\n "}, {"sha": "69722d073be6796348773a4f379e1fad8f698d86", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0d179691da597b8e2cb9ff55a5875f2c60e1cfbd", "patch": "@@ -1,3 +1,8 @@\n+2015-09-14  Manuel L\u00f3pez-Ib\u00e1\u00f1ez  <manu@gcc.gnu.org>\n+\n+\tPR fortran/67460\n+\t* gfortran.dg/pr67460.f90: New test.\n+\n 2015-09-14  Uros Bizjak  <ubizjak@gmail.com>\n \n \t* gcc.dg/gomp/dump-new-function-3.c (dg-final): Also scan for $loopfn."}, {"sha": "ede55e1229b789c080e77af6e35a246badb26c82", "filename": "gcc/testsuite/gfortran.dg/pr67460.f90", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67460.f90", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0d179691da597b8e2cb9ff55a5875f2c60e1cfbd/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67460.f90", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgfortran.dg%2Fpr67460.f90?ref=0d179691da597b8e2cb9ff55a5875f2c60e1cfbd", "patch": "@@ -0,0 +1,24 @@\n+! Bogus \"all warnings being treated as errors\"\n+! { dg-do compile }\n+! { dg-options \"-std=f2003 -Werror\" }\n+MODULE btree_i8_k_sp2d_v\n+  TYPE btree_node\n+     INTEGER id\n+     TYPE(btree_node_p), DIMENSION(:), POINTER :: subtrees\n+     TYPE(btree_node), POINTER :: parent\n+  END TYPE btree_node\n+  TYPE btree_node_p\n+     TYPE(btree_node), POINTER :: node\n+  END TYPE btree_node_p\n+CONTAINS\n+  RECURSIVE SUBROUTINE btree_verify_node (tree, node, level, nids, lastv,&\n+               count, num_nodes, max_leaf_level, min_leaf_level, printing)\n+    TYPE(btree_node), INTENT(IN)             :: node\n+    INTEGER                                  :: branch\n+    IF (ASSOCIATED (node%subtrees(branch)%node)) THEN\n+       IF (node%subtrees(branch)%node%parent%id .NE. node%id) THEN\n+          WRITE(*,*)'foo'\n+       ENDIF\n+    ENDIF\n+  END SUBROUTINE btree_verify_node\n+END MODULE btree_i8_k_sp2d_v"}]}