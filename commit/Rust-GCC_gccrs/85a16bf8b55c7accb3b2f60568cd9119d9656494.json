{"sha": "85a16bf8b55c7accb3b2f60568cd9119d9656494", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODVhMTZiZjhiNTVjN2FjY2IzYjJmNjA1NjhjZDkxMTlkOTY1NjQ5NA==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2014-05-23T14:44:42Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2014-05-23T14:44:42Z"}, "message": "builtins.def: Change SANITIZE_FLOAT_DIVIDE to SANITIZE_NONDEFAULT.\n\n\t* builtins.def: Change SANITIZE_FLOAT_DIVIDE to SANITIZE_NONDEFAULT.\n\t* gcc.c (sanitize_spec_function): Likewise.\n\t* convert.c (convert_to_integer): Include \"ubsan.h\".  Add\n\tfloating-point to integer instrumentation.\n\t* doc/invoke.texi: Document -fsanitize=float-cast-overflow.\n\t* flag-types.h (enum sanitize_code): Add SANITIZE_FLOAT_CAST and\n\tSANITIZE_NONDEFAULT.\n\t* opts.c (common_handle_option): Handle -fsanitize=float-cast-overflow.\n\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW,\n\tBUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT): Add.\n\t* ubsan.c: Include \"realmpfr.h\" and \"dfp.h\".\n\t(get_ubsan_type_info_for_type): Handle REAL_TYPEs.\n\t(ubsan_type_descriptor): Set tkind to 0xffff for types other than\n\tfloat/double/long double.\n\t(ubsan_instrument_float_cast): New function.\n\t* ubsan.h (ubsan_instrument_float_cast): Declare.\ntestsuite/\n\t* c-c++-common/ubsan/float-cast-overflow-1.c: New test.\n\t* c-c++-common/ubsan/float-cast-overflow-10.c: New test.\n\t* c-c++-common/ubsan/float-cast-overflow-2.c: New test.\n\t* c-c++-common/ubsan/float-cast-overflow-3.c: New test.\n\t* c-c++-common/ubsan/float-cast-overflow-4.c: New test.\n\t* c-c++-common/ubsan/float-cast-overflow-5.c: New test.\n\t* c-c++-common/ubsan/float-cast-overflow-6.c: New test.\n\t* c-c++-common/ubsan/float-cast-overflow-7.c: New test.\n\t* c-c++-common/ubsan/float-cast-overflow-7.h: New file.\n\t* c-c++-common/ubsan/float-cast-overflow-8.c: New test.\n\t* c-c++-common/ubsan/float-cast-overflow-9.c: New test.\n\t* c-c++-common/ubsan/float-cast.h: New file.\n\t* g++.dg/ubsan/float-cast-overflow-bf.C: New test.\n\t* gcc.dg/ubsan/float-cast-overflow-bf.c: New test.\nlibsanitizer/\n\t* ubsan/ubsan_value.cc (getFloatValue): Handle 96-bit\n\tfloating-point types.\n\nCo-Authored-By: Jakub Jelinek <jakub@redhat.com>\n\nFrom-SVN: r210862", "tree": {"sha": "76c97d7e36a0b8b32edf3400c6c2d38538e33618", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/76c97d7e36a0b8b32edf3400c6c2d38538e33618"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/85a16bf8b55c7accb3b2f60568cd9119d9656494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a16bf8b55c7accb3b2f60568cd9119d9656494", "html_url": "https://github.com/Rust-GCC/gccrs/commit/85a16bf8b55c7accb3b2f60568cd9119d9656494", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/85a16bf8b55c7accb3b2f60568cd9119d9656494/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "fee9ba422f9193fb5e560bd430d7b14c55c128d1", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/fee9ba422f9193fb5e560bd430d7b14c55c128d1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/fee9ba422f9193fb5e560bd430d7b14c55c128d1"}], "stats": {"total": 1538, "additions": 1530, "deletions": 8}, "files": [{"sha": "9a3b0c94650fa8bb11e417c1ea779cbbcb2ec516", "filename": "gcc/ChangeLog", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -1,3 +1,23 @@\n+2014-05-23  Marek Polacek  <polacek@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* builtins.def: Change SANITIZE_FLOAT_DIVIDE to SANITIZE_NONDEFAULT.\n+\t* gcc.c (sanitize_spec_function): Likewise.\n+\t* convert.c (convert_to_integer): Include \"ubsan.h\".  Add\n+\tfloating-point to integer instrumentation.\n+\t* doc/invoke.texi: Document -fsanitize=float-cast-overflow.\n+\t* flag-types.h (enum sanitize_code): Add SANITIZE_FLOAT_CAST and\n+\tSANITIZE_NONDEFAULT.\n+\t* opts.c (common_handle_option): Handle -fsanitize=float-cast-overflow.\n+\t* sanitizer.def (BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW,\n+\tBUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT): Add.\n+\t* ubsan.c: Include \"realmpfr.h\" and \"dfp.h\".\n+\t(get_ubsan_type_info_for_type): Handle REAL_TYPEs.\n+\t(ubsan_type_descriptor): Set tkind to 0xffff for types other than\n+\tfloat/double/long double.\n+\t(ubsan_instrument_float_cast): New function.\n+\t* ubsan.h (ubsan_instrument_float_cast): Declare.\n+\n 2014-05-23  Jiong Wang   <jiong.wang@arm.com>\n \n \t* config/aarch64/predicates.md (aarch64_call_insn_operand): New"}, {"sha": "cd823a3be49a89148e56c1c84e2ed2dd23389e71", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -176,7 +176,7 @@ along with GCC; see the file COPYING3.  If not see\n   DEF_BUILTIN (ENUM, \"__builtin_\" NAME, BUILT_IN_NORMAL, TYPE, TYPE,    \\\n \t       true, true, true, ATTRS, true, \\\n \t      (flag_sanitize & (SANITIZE_ADDRESS | SANITIZE_THREAD \\\n-\t\t\t\t| SANITIZE_UNDEFINED | SANITIZE_FLOAT_DIVIDE)))\n+\t\t\t\t| SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT)))\n \n #undef DEF_CILKPLUS_BUILTIN\n #define DEF_CILKPLUS_BUILTIN(ENUM, NAME, TYPE, ATTRS)  \\"}, {"sha": "b8f36710cdfd922384259fe7a69207720317bdba", "filename": "gcc/convert.c", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fconvert.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fconvert.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconvert.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -32,6 +32,7 @@ along with GCC; see the file COPYING3.  If not see\n #include \"diagnostic-core.h\"\n #include \"target.h\"\n #include \"langhooks.h\"\n+#include \"ubsan.h\"\n \n /* Convert EXPR to some pointer or reference type TYPE.\n    EXPR must be pointer, reference, integer, enumeral, or literal zero;\n@@ -394,6 +395,7 @@ convert_to_integer (tree type, tree expr)\n   tree intype = TREE_TYPE (expr);\n   unsigned int inprec = element_precision (intype);\n   unsigned int outprec = element_precision (type);\n+  location_t loc = EXPR_LOCATION (expr);\n \n   /* An INTEGER_TYPE cannot be incomplete, but an ENUMERAL_TYPE can\n      be.  Consider `enum E = { a, b = (enum E) 3 };'.  */\n@@ -844,7 +846,17 @@ convert_to_integer (tree type, tree expr)\n       return build1 (CONVERT_EXPR, type, expr);\n \n     case REAL_TYPE:\n-      return build1 (FIX_TRUNC_EXPR, type, expr);\n+      if (flag_sanitize & SANITIZE_FLOAT_CAST)\n+\t{\n+\t  expr = save_expr (expr);\n+\t  tree check = ubsan_instrument_float_cast (loc, type, expr);\n+\t  expr = build1 (FIX_TRUNC_EXPR, type, expr);\n+\t  if (check == NULL)\n+\t    return expr;\n+\t  return fold_build2 (COMPOUND_EXPR, TREE_TYPE (expr), check, expr);\n+\t}\n+      else\n+\treturn build1 (FIX_TRUNC_EXPR, type, expr);\n \n     case FIXED_POINT_TYPE:\n       return build1 (FIXED_CONVERT_EXPR, type, expr);"}, {"sha": "34ba721db82cad9da860ded5aa46e5df0bfb7acb", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -5427,6 +5427,13 @@ Detect floating-point division by zero.  Unlike other similar options,\n @option{-fsanitize=undefined}, since floating-point division by zero can\n be a legitimate way of obtaining infinities and NaNs.\n \n+@item -fsanitize=float-cast-overflow\n+@opindex fsanitize=float-cast-overflow\n+\n+This option enables floating-point type to integer conversion checking.\n+We check that the result of the conversion does not overflow.\n+This option does not work well with @code{FE_INVALID} exceptions enabled.\n+\n @item -fsanitize-recover\n @opindex fsanitize-recover\n By default @option{-fsanitize=undefined} sanitization (and its suboptions"}, {"sha": "ed00046c8eed14fc46bf9ad9f1dc74191de909b1", "filename": "gcc/flag-types.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fflag-types.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fflag-types.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fflag-types.h?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -229,9 +229,11 @@ enum sanitize_code {\n   SANITIZE_BOOL = 1 << 10,\n   SANITIZE_ENUM = 1 << 11,\n   SANITIZE_FLOAT_DIVIDE = 1 << 12,\n+  SANITIZE_FLOAT_CAST = 1 << 13,\n   SANITIZE_UNDEFINED = SANITIZE_SHIFT | SANITIZE_DIVIDE | SANITIZE_UNREACHABLE\n \t\t       | SANITIZE_VLA | SANITIZE_NULL | SANITIZE_RETURN\n-\t\t       | SANITIZE_SI_OVERFLOW | SANITIZE_BOOL | SANITIZE_ENUM\n+\t\t       | SANITIZE_SI_OVERFLOW | SANITIZE_BOOL | SANITIZE_ENUM,\n+  SANITIZE_NONDEFAULT = SANITIZE_FLOAT_DIVIDE | SANITIZE_FLOAT_CAST\n };\n \n /* flag_vtable_verify initialization levels. */"}, {"sha": "9ac18e60d8014eb5b62ea1f12a80b6f9335ab719", "filename": "gcc/gcc.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fgcc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fgcc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgcc.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -8170,7 +8170,7 @@ sanitize_spec_function (int argc, const char **argv)\n   if (strcmp (argv[0], \"thread\") == 0)\n     return (flag_sanitize & SANITIZE_THREAD) ? \"\" : NULL;\n   if (strcmp (argv[0], \"undefined\") == 0)\n-    return ((flag_sanitize & (SANITIZE_UNDEFINED | SANITIZE_FLOAT_DIVIDE))\n+    return ((flag_sanitize & (SANITIZE_UNDEFINED | SANITIZE_NONDEFAULT))\n \t    && !flag_sanitize_undefined_trap_on_error) ? \"\" : NULL;\n   if (strcmp (argv[0], \"leak\") == 0)\n     return ((flag_sanitize"}, {"sha": "2f4f913ca9fef53ac8a56617c5f71edef3a6cb26", "filename": "gcc/opts.c", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fopts.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fopts.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fopts.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -1463,6 +1463,8 @@ common_handle_option (struct gcc_options *opts,\n \t      { \"enum\", SANITIZE_ENUM, sizeof \"enum\" - 1 },\n \t      { \"float-divide-by-zero\", SANITIZE_FLOAT_DIVIDE,\n \t\tsizeof \"float-divide-by-zero\" - 1 },\n+\t      { \"float-cast-overflow\", SANITIZE_FLOAT_CAST,\n+\t\tsizeof \"float-cast-overflow\" - 1 },\n \t      { NULL, 0, 0 }\n \t    };\n \t    const char *comma;"}, {"sha": "a2f7ff058ce66b0eaacb938efaceac5ac0f79641", "filename": "gcc/sanitizer.def", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fsanitizer.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fsanitizer.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fsanitizer.def?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -371,3 +371,11 @@ DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_LOAD_INVALID_VALUE_ABORT,\n \t\t      \"__ubsan_handle_load_invalid_value_abort\",\n \t\t      BT_FN_VOID_PTR_PTR,\n \t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW,\n+\t\t      \"__ubsan_handle_float_cast_overflow\",\n+\t\t      BT_FN_VOID_PTR_PTR,\n+\t\t      ATTR_COLD_NOTHROW_LEAF_LIST)\n+DEF_SANITIZER_BUILTIN(BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT,\n+\t\t      \"__ubsan_handle_float_cast_overflow_abort\",\n+\t\t      BT_FN_VOID_PTR_PTR,\n+\t\t      ATTR_COLD_NORETURN_NOTHROW_LEAF_LIST)"}, {"sha": "05fea9e2da6cfa4b308ed1bea09270147799f174", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -1,3 +1,21 @@\n+2014-05-23  Marek Polacek  <polacek@redhat.com>\n+\t    Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* c-c++-common/ubsan/float-cast-overflow-1.c: New test.\n+\t* c-c++-common/ubsan/float-cast-overflow-10.c: New test.\n+\t* c-c++-common/ubsan/float-cast-overflow-2.c: New test.\n+\t* c-c++-common/ubsan/float-cast-overflow-3.c: New test.\n+\t* c-c++-common/ubsan/float-cast-overflow-4.c: New test.\n+\t* c-c++-common/ubsan/float-cast-overflow-5.c: New test.\n+\t* c-c++-common/ubsan/float-cast-overflow-6.c: New test.\n+\t* c-c++-common/ubsan/float-cast-overflow-7.c: New test.\n+\t* c-c++-common/ubsan/float-cast-overflow-7.h: New file.\n+\t* c-c++-common/ubsan/float-cast-overflow-8.c: New test.\n+\t* c-c++-common/ubsan/float-cast-overflow-9.c: New test.\n+\t* c-c++-common/ubsan/float-cast.h: New file.\n+\t* g++.dg/ubsan/float-cast-overflow-bf.C: New test.\n+\t* gcc.dg/ubsan/float-cast-overflow-bf.c: New test.\n+\n 2014-05-23  Jiong Wang   <jiong.wang@arm.com>\n \n \t* gcc.target/aarch64/tail_indirect_call_1.c: New."}, {"sha": "249731dab44c956bfad2cfe59ad33360ef4ce70f", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-1.c", "status": "added", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-1.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,204 @@\n+/* { dg-do run { target { lp64 || ilp32 } } } */\n+/* { dg-options \"-fsanitize=float-cast-overflow\" } */\n+/* { dg-additional-options \"-msse2 -mfpmath=sse\" { target { sse2_runtime && ia32 } } } */\n+\n+#include <limits.h>\n+#include \"float-cast.h\"\n+\n+int\n+main (void)\n+{\n+  const double inf = __builtin_inf ();\n+  const double nan = __builtin_nan (\"\");\n+  volatile double d;\n+\n+  volatile signed char sc;\n+  d = SCHAR_MIN;\n+  CHECK_BOUNDARY (sc, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (sc, d);\n+  d = SCHAR_MAX;\n+  CHECK_BOUNDARY (sc, d);\n+  CHECK_NONNUMBERS (sc);\n+\n+  volatile unsigned char uc;\n+  d = UCHAR_MAX;\n+  CHECK_BOUNDARY (uc, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (uc, d);\n+  CHECK_NONNUMBERS (uc);\n+\n+  volatile short int s;\n+  d = SHRT_MIN;\n+  CHECK_BOUNDARY (s, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (s, d);\n+  d = SHRT_MAX;\n+  CHECK_BOUNDARY (s, d);\n+  CHECK_NONNUMBERS (s);\n+\n+  volatile unsigned short int us;\n+  d = USHRT_MAX;\n+  CHECK_BOUNDARY (us, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (us, d);\n+  CHECK_NONNUMBERS (us);\n+\n+  volatile int i;\n+  d = INT_MIN;\n+  CHECK_BOUNDARY (i, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (i, d);\n+  d = INT_MAX;\n+  CHECK_BOUNDARY (i, d);\n+  CHECK_NONNUMBERS (i);\n+\n+  volatile unsigned int u;\n+  d = UINT_MAX;\n+  CHECK_BOUNDARY (u, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (u, d);\n+  CHECK_NONNUMBERS (u);\n+\n+  volatile long l;\n+  /* 64-bit vs 32-bit longs matter causes too much of a headache.  */\n+  d = 0.0;\n+  CHECK_BOUNDARY (l, d);\n+  CHECK_NONNUMBERS (l);\n+\n+  volatile unsigned long ul;\n+  d = 0.0;\n+  CHECK_BOUNDARY (ul, d);\n+  CHECK_NONNUMBERS (ul);\n+\n+  volatile long long ll;\n+  d = LLONG_MIN;\n+  CHECK_BOUNDARY (ll, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (ll, d);\n+  d = LLONG_MAX;\n+  CHECK_BOUNDARY (ll, d);\n+  CHECK_NONNUMBERS (ll);\n+\n+  volatile unsigned long long ull;\n+  d = ULLONG_MAX;\n+  CHECK_BOUNDARY (ull, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (ull, d);\n+  CHECK_NONNUMBERS (ull);\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"value -133 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -129.5 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -129 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 128 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 128.5 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 132 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value nan is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -nan is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value inf is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -inf is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 256 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 256.5 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 260 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -5 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1.5 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value nan is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -nan is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value inf is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -inf is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -32773 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -32769.5 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -32769 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 32768 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 32768.5 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 32772 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value nan is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -nan is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value inf is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -inf is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 65536 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 65536.5 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 65540 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -5 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1.5 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value nan is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -nan is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value inf is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -inf is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -2.14748e\\\\\\+09 is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -2.14748e\\\\\\+09 is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -2.14748e\\\\\\+09 is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 2.14748e\\\\\\+09 is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 2.14748e\\\\\\+09 is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 2.14748e\\\\\\+09 is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value nan is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -nan is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value inf is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -inf is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 4.29497e\\\\\\+09 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 4.29497e\\\\\\+09 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 4.29497e\\\\\\+09 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -5 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1.5 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value nan is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -nan is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value inf is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -inf is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value nan is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -nan is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value inf is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -inf is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -5 is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1.5 is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value nan is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -nan is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value inf is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -inf is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 9.22337e\\\\\\+18 is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value nan is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -nan is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value inf is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -inf is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.84467e\\\\\\+19 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -5 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1.5 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value nan is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -nan is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value inf is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -inf is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "81ceb92afab44ccceadf88079f73698a7761cde9", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-10.c", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-10.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-10.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-10.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,79 @@\n+/* { dg-do run { target dfp } } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests } { \"*\" } { \"-O2\" } } */\n+/* { dg-options \"-fsanitize=float-cast-overflow -fsanitize-recover\" } */\n+/* { dg-additional-options \"-DUSE_INT128\" { target int128 } } */\n+/* FIXME: When _DecimalXX <-> {signed, unsigned} __int128 conversions are\n+   supported, -DBROKEN_DECIMAL_INT128 can be removed.  */\n+/* { dg-additional-options \"-DUSE_DFP -DBROKEN_DECIMAL_INT128\" } */\n+\n+#include \"float-cast-overflow-8.c\"\n+\n+/* _Decimal32 */\n+/* { dg-output \"value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* _Decimal64 */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* _Decimal128 */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "15eacc9c1a9cd7a3e2cff977ed95d03994fe87eb", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-2.c", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-2.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,73 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target int128 } */\n+/* { dg-options \"-fsanitize=float-cast-overflow\" } */\n+\n+#include \"float-cast.h\"\n+\n+int\n+main (void)\n+{\n+  const double inf = __builtin_inf ();\n+  const double nan = __builtin_nan (\"\");\n+  volatile double d;\n+\n+  __int128 i;\n+  d = INT128_MIN;\n+  CHECK_BOUNDARY (i, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (i, d);\n+  d = INT128_MAX;\n+  CHECK_BOUNDARY (i, d);\n+  CHECK_NONNUMBERS (i);\n+\n+  unsigned __int128 u;\n+  d = UINT128_MAX;\n+  CHECK_BOUNDARY (u, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (u, d);\n+  CHECK_NONNUMBERS (u);\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 1.70141e\\\\\\+38 is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value nan is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value -nan is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value inf is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value -inf is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value 3.40282e\\\\\\+38 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value -5 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value -1.5 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value -1 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value nan is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value -nan is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value inf is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*runtime error: value -inf is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "2200e669239a11acae43999d348850eba21921c4", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-3.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-3.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run { target { lp64 || ilp32 } } } */\n+/* { dg-options \"-fsanitize=float-cast-overflow\" } */\n+\n+#include <limits.h>\n+#include \"float-cast.h\"\n+\n+int\n+main (void)\n+{\n+  volatile float f;\n+\n+  volatile signed char s;\n+  f = SCHAR_MIN;\n+  CHECK_BOUNDARY (s, f);\n+  f = 0.0;\n+  CHECK_BOUNDARY (s, f);\n+  f = SCHAR_MAX;\n+  CHECK_BOUNDARY (s, f);\n+\n+  volatile unsigned char u;\n+  f = UCHAR_MAX;\n+  CHECK_BOUNDARY (u, f);\n+  f = 0.0;\n+  CHECK_BOUNDARY (u, f);\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"value -133* is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -129.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -129 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 128 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 128.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 132 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 256 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 256.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 260 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "7704aa950aee4633b0542e27f359667a3d0c0fc0", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-4.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-4.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do run { target { lp64 } } } */\n+/* { dg-options \"-fsanitize=float-cast-overflow\" } */\n+\n+#include <limits.h>\n+#include \"float-cast.h\"\n+\n+int\n+main (void)\n+{\n+  const long double inf = __builtin_infl ();\n+  const long double nan = __builtin_nanl (\"\");\n+  volatile long double ld;\n+\n+  volatile int i;\n+  ld = INT_MIN;\n+  CHECK_BOUNDARY (i, ld);\n+  ld = 0.0l;\n+  CHECK_BOUNDARY (i, ld);\n+  ld = INT_MAX;\n+  CHECK_BOUNDARY (i, ld);\n+  CHECK_NONNUMBERS (i);\n+\n+  volatile unsigned int u;\n+  ld = UINT_MAX;\n+  CHECK_BOUNDARY (u, ld);\n+  ld = 0.0l;\n+  CHECK_BOUNDARY (u, ld);\n+  CHECK_NONNUMBERS (u);\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"value -2.14748e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -2.14748e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -2.14748e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 2.14748e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 2.14748e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 2.14748e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value nan is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -nan is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value inf is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -inf is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 4.29497e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 4.29497e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 4.29497e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value nan is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -nan is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value inf is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -inf is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "44910eedba7d6b24760862b629904054c3aa9ed6", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-5.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-5.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-5.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-5.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run { target i?86-*-* x86_64-*-* ia64-*-* } } */\n+/* { dg-options \"-fsanitize=float-cast-overflow\" } */\n+\n+#include <limits.h>\n+#include \"float-cast.h\"\n+\n+int\n+main (void)\n+{\n+  volatile __float128 f;\n+\n+  volatile signed char s;\n+  f = SCHAR_MIN;\n+  CHECK_BOUNDARY (s, f);\n+  f = 0.0q;\n+  CHECK_BOUNDARY (s, f);\n+  f = SCHAR_MAX;\n+  CHECK_BOUNDARY (s, f);\n+\n+  volatile unsigned char u;\n+  f = UCHAR_MAX;\n+  CHECK_BOUNDARY (u, f);\n+  f = 0.0q;\n+  CHECK_BOUNDARY (u, f);\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"value \\[^\\n\\r]* is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[^\\n\\r]* is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[^\\n\\r]* is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[^\\n\\r]* is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[^\\n\\r]* is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[^\\n\\r]* is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[^\\n\\r]* is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[^\\n\\r]* is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[^\\n\\r]* is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[^\\n\\r]* is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[^\\n\\r]* is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[^\\n\\r]* is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "f51a2c838fdef2d17ede4f33a5a310cdd8216099", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-6.c", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-6.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-6.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-6.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,40 @@\n+/* { dg-do run { target { { x86_64-*-* ia64-*-* } && { ! { ia32 } } } } } */\n+/* { dg-options \"-fsanitize=float-cast-overflow\" } */\n+\n+#include <limits.h>\n+#include \"float-cast.h\"\n+\n+int\n+main (void)\n+{\n+  volatile __float80 f;\n+\n+  volatile signed char s;\n+  f = SCHAR_MIN;\n+  CHECK_BOUNDARY (s, f);\n+  f = 0.0w;\n+  CHECK_BOUNDARY (s, f);\n+  f = SCHAR_MAX;\n+  CHECK_BOUNDARY (s, f);\n+\n+  volatile unsigned char u;\n+  f = UCHAR_MAX;\n+  CHECK_BOUNDARY (u, f);\n+  f = 0.0w;\n+  CHECK_BOUNDARY (u, f);\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"value -133 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -129.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -129 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 128 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 128.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 132 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 256 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 256.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 260 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "3223d5ec5758492f5cd4f8c70d4ddddd013008d6", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-7.c", "status": "added", "additions": 196, "deletions": 0, "changes": 196, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-7.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-7.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-7.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,196 @@\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests } { \"*\" } { \"-O2\" } } */\n+/* { dg-options \"-fsanitize=float-cast-overflow -fno-sanitize-recover\" } */\n+/* FIXME: When _DecimalXX <-> {signed, unsigned} __int128 conversions are\n+   supported, -DBROKEN_DECIMAL_INT128 can be removed.  */\n+/* { dg-additional-options \"-DUSE_DFP -DBROKEN_DECIMAL_INT128\" { target dfp } } */\n+\n+#define USE_FLT_DBL_LDBL\n+#ifdef __SIZEOF_INT128__\n+#define USE_INT128\n+#endif\n+#ifdef __SIZEOF_FLOAT80__\n+#define USE_FLOAT80\n+#endif\n+#ifdef __SIZEOF_FLOAT128__\n+#define USE_FLOAT128\n+#endif\n+\n+#include \"float-cast-overflow-7.h\"\n+\n+#define TEST(type1, type2) \\\n+  if (cvt_##type1##_##type2 (-0.5f) != 0) abort ();\t\t\\\n+  if (cvt_##type1##_##type2 (0.5f) != 0) abort ();\t\t\\\n+  if (cvt_##type1##_##type2 (-0.75f) != 0) abort ();\t\t\\\n+  if (cvt_##type1##_##type2 (0.75f) != 0) abort ();\t\t\\\n+  if (type1##_MIN)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      /* For RADIX 2 type1##_MIN should be always */\t\t\\\n+      /* exactly representable in type2.  */\t\t\t\\\n+      if (type2##_RADIX == 2\t\t\t\t\t\\\n+\t  || type1##_MAX <= type2##_MAX)\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  if (cvt_##type1##_##type2 (type1##_MIN)\t\t\\\n+\t      != type1##_MIN) abort ();\t\t\t\t\\\n+\t  volatile type2 tem = ((type2) -0.75f) + type1##_MIN;\t\\\n+\t  volatile type2 tem2 = ((type2) -1.0f) + type1##_MIN;\t\\\n+\t  if (tem != tem2\t\t\t\t\t\\\n+\t      && cvt_##type1##_##type2 ((type2) -0.75f\t\t\\\n+\t\t\t\t\t+ type1##_MIN)\t\t\\\n+\t\t != type1##_MIN) abort ();\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      else\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  type2 min = type1##_MIN;\t\t\t\t\\\n+\t  /* tem could be below minimum here due to */\t\t\\\n+\t  /* rounding.  */\t\t\t\t\t\\\n+\t  MAXT add = 1;\t\t\t\t\t\t\\\n+\t  while (add)\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      volatile type2 tem = type1##_MIN + (type1) add;\t\\\n+\t      if (tem != min)\t\t\t\t\t\\\n+\t\tbreak;\t\t\t\t\t\t\\\n+\t      MAXT newadd = add * type2##_RADIX;\t\t\\\n+\t      if (newadd < add || newadd > type1##_MAX)\t\t\\\n+\t\tadd = 0;\t\t\t\t\t\\\n+\t      else\t\t\t\t\t\t\\\n+\t\tadd = newadd;\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (add)\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      MAXT newadd\t\t\t\t\t\\\n+\t\t= (-(type1##_MIN + (type1) add)) % add;\t\t\\\n+\t      volatile type2 tem = type1##_MIN + (type1) newadd;\\\n+\t      volatile type2 tem2 = type1##_MIN + (type1) add;\t\\\n+\t      if (tem == tem2)\t\t\t\t\t\\\n+\t\tadd = newadd;\t\t\t\t\t\\\n+\t      else\t\t\t\t\t\t\\\n+\t\t{\t\t\t\t\t\t\\\n+\t\t  newadd += add;\t\t\t\t\\\n+\t\t  if (newadd < add || newadd > type1##_MAX)\t\\\n+\t\t    add = 0;\t\t\t\t\t\\\n+\t\t  else\t\t\t\t\t\t\\\n+\t\t    {\t\t\t\t\t\t\\\n+\t\t      tem = type1##_MIN + (type1) newadd;\t\\\n+\t\t      if (tem == tem2)\t\t\t\t\\\n+\t\t\tadd = newadd;\t\t\t\t\\\n+\t\t      else\t\t\t\t\t\\\n+\t\t\tadd = 0;\t\t\t\t\\\n+\t\t    }\t\t\t\t\t\t\\\n+\t\t}\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  if (add\t\t\t\t\t\t\\\n+\t      && cvt_##type1##_##type2 (type1##_MIN\t\t\\\n+\t\t\t\t\t+ (type1) add)\t\t\\\n+\t\t != type1##_MIN + (type1) add) abort ();\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  if (type1##_MAX <= type2##_MAX)\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      if (cvt_##type1##_##type2 (type1##_MAX) != type1##_MAX)\t\\\n+\tabort ();\t\t\t\t\t\t\\\n+      volatile type2 tem = ((type2) 0.75f) + type1##_MAX;\t\\\n+      volatile type2 tem2 = ((type2) 1.0f) + type1##_MAX;\t\\\n+      if (tem < tem2\t\t\t\t\t\t\\\n+\t  && cvt_##type1##_##type2 ((type2) 0.75f + type1##_MAX)\\\n+\t     != type1##_MAX) abort ();\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      type2 max = type1##_MAX;\t\t\t\t\t\\\n+      /* tem could be above maximum here due to rounding.  */\t\\\n+      MAXT sub = 1;\t\t\t\t\t\t\\\n+      while (sub)\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  volatile type2 tem = type1##_MAX - sub;\t\t\\\n+\t  if (tem != max)\t\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\\\n+\t  MAXT newsub = sub * type2##_RADIX;\t\t\t\\\n+\t  if (newsub < sub || newsub > type1##_MAX)\t\t\\\n+\t    sub = 0;\t\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\\\n+\t    sub = newsub;\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      if (sub)\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  MAXT newsub = ((type1##_MAX - sub) % sub);\t\t\\\n+\t  volatile type2 tem = type1##_MAX - newsub;\t\t\\\n+\t  volatile type2 tem2 = type1##_MAX - sub;\t\t\\\n+\t  if (tem == tem2)\t\t\t\t\t\\\n+\t    sub = newsub;\t\t\t\t\t\\\n+\t  else\t\t\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      newsub += sub;\t\t\t\t\t\\\n+\t      if (newsub < sub || newsub > type1##_MAX)\t\t\\\n+\t\tsub = 0;\t\t\t\t\t\\\n+\t      else\t\t\t\t\t\t\\\n+\t\t{\t\t\t\t\t\t\\\n+\t\t  tem = type1##_MAX - newsub;\t\t\t\\\n+\t\t  if (tem == tem2)\t\t\t\t\\\n+\t\t    sub = newsub;\t\t\t\t\\\n+\t\t  else\t\t\t\t\t\t\\\n+\t\t    sub = 0;\t\t\t\t\t\\\n+\t\t}\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+      if (sub\t\t\t\t\t\t\t\\\n+\t  && cvt_##type1##_##type2 (type1##_MAX - sub)\t\t\\\n+\t     != type1##_MAX - sub) abort ();\t\t\t\\\n+    }\n+\n+\n+#ifdef si128_MAX\n+# define TESTS128(type2) TEST (si128, type2) TEST (ui128, type2)\n+#else\n+# define TESTS128(type2)\n+#endif\n+\n+#define TESTS(type2) \\\n+  TEST (sc, type2) TEST (c, type2) TEST (uc, type2)\t\\\n+  TEST (ss, type2) TEST (us, type2)\t\t\t\\\n+  TEST (si, type2) TEST (ui, type2)\t\t\t\\\n+  TEST (sl, type2) TEST (ul, type2)\t\t\t\\\n+  TEST (sll, type2) TEST (ull, type2)\t\t\t\\\n+  TESTS128 (type2)\n+\n+int\n+main ()\n+{\n+#ifdef f_MAX\n+  TESTS (f)\n+#endif\n+#ifdef d_MAX\n+  TESTS (d)\n+#endif\n+#ifdef ld_MAX\n+  TESTS (ld)\n+#endif\n+#ifdef f80_MAX\n+  TESTS (f80)\n+#endif\n+#ifdef f128_MAX\n+  TESTS (f128)\n+#endif\n+#ifdef BROKEN_DECIMAL_INT128\n+# undef TESTS128\n+# define TESTS128(type2)\n+# undef TWO\n+# undef M1U\n+# undef MAXS\n+# undef MAXT\n+# define TWO 2ULL\n+# define M1U -1ULL\n+# define MAXS (__CHAR_BIT__ * __SIZEOF_LONG_LONG__)\n+# define MAXT unsigned long long\n+#endif\n+#ifdef d32_MAX\n+  TESTS (d32)\n+#endif\n+#ifdef d64_MAX\n+  TESTS (d64)\n+#endif\n+#ifdef d128_MAX\n+  TESTS (d128)\n+#endif\n+  return 0;\n+}"}, {"sha": "b839a6cb52f20d94f7b105e1e9fbc4f2635e72fb", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-7.h", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-7.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-7.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-7.h?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,156 @@\n+#define CVTFN(type1, type2) \\\n+__attribute__((noinline)) type1\t\\\n+cvt_##type1##_##type2 (type2 x)\t\\\n+{\t\t\t\t\\\n+  return x;\t\t\t\\\n+}\n+\n+typedef signed char sc;\n+#define sc_MIN (-__SCHAR_MAX__ - 1)\n+#define sc_MAX __SCHAR_MAX__\n+typedef unsigned char uc;\n+#define uc_MIN 0\n+#define uc_MAX (2U * __SCHAR_MAX__ + 1U)\n+typedef char c;\n+#define c_MIN ((((char) -1) > (char) 0) ? uc_MIN : sc_MIN)\n+#define c_MAX ((((char) -1) > (char) 0) ? uc_MAX : sc_MAX)\n+typedef signed short ss;\n+#define ss_MIN (-__SHRT_MAX__ - 1)\n+#define ss_MAX __SHRT_MAX__\n+typedef unsigned short us;\n+#define us_MIN 0\n+#define us_MAX (2U * __SHRT_MAX__ + 1U)\n+typedef signed int si;\n+#define si_MIN (-__INT_MAX__ - 1)\n+#define si_MAX __INT_MAX__\n+typedef unsigned int ui;\n+#define ui_MIN 0\n+#define ui_MAX (2U * __INT_MAX__ + 1U)\n+typedef signed long sl;\n+#define sl_MIN (-__LONG_MAX__ - 1L)\n+#define sl_MAX __LONG_MAX__\n+typedef unsigned long ul;\n+#define ul_MIN 0L\n+#define ul_MAX (2UL * __LONG_MAX__ + 1UL)\n+typedef signed long long sll;\n+#define sll_MIN (-__LONG_LONG_MAX__ - 1LL)\n+#define sll_MAX __LONG_LONG_MAX__\n+typedef unsigned long long ull;\n+#define ull_MIN 0LL\n+#define ull_MAX (2ULL * __LONG_LONG_MAX__ + 1ULL)\n+#ifdef USE_INT128\n+typedef signed __int128 si128;\n+# define si128_MAX \\\n+  ((signed __int128) ((((unsigned __int128) 1) \\\n+\t\t       << (__CHAR_BIT__ * __SIZEOF_INT128__ - 1)) - 1))\n+# define si128_MIN (-si128_MAX - 1)\n+typedef unsigned __int128 ui128;\n+#define ui128_MIN ((unsigned __int128) 0)\n+#define ui128_MAX (((unsigned __int128) 2) * si128_MAX + 1)\n+#endif\n+\n+#ifdef si128_MAX\n+# define CVTS128(type2) CVTFN (si128, type2) CVTFN (ui128, type2)\n+#else\n+# define CVTS128(type2)\n+#endif\n+\n+#define CVTS(type2) \\\n+  CVTFN (sc, type2) CVTFN (c, type2) CVTFN (uc, type2)\t\\\n+  CVTFN (ss, type2) CVTFN (us, type2)\t\t\t\\\n+  CVTFN (si, type2) CVTFN (ui, type2)\t\t\t\\\n+  CVTFN (sl, type2) CVTFN (ul, type2)\t\t\t\\\n+  CVTFN (sll, type2) CVTFN (ull, type2)\t\t\t\\\n+  CVTS128 (type2)\n+\n+#ifdef __SIZEOF_INT128__\n+# define TWO ((unsigned __int128) 2)\n+# define M1U ((unsigned __int128) -1)\n+# define MAXS (__CHAR_BIT__ * __SIZEOF_INT128__)\n+# define MAXT unsigned __int128\n+#else\n+# define TWO 2ULL\n+# define M1U -1ULL\n+# define MAXS (__CHAR_BIT__ * __SIZEOF_LONG_LONG__)\n+# define MAXT unsigned long long\n+#endif\n+\n+#ifdef USE_FLT_DBL_LDBL\n+typedef float f;\n+#define f_RADIX 2\n+#define f_MANT_DIG __FLT_MANT_DIG__\n+#define f_MAX ((TWO << (f_MANT_DIG - 1)) - 1)\n+typedef double d;\n+#define d_RADIX 2\n+#define d_MANT_DIG __DBL_MANT_DIG__\n+#define d_MAX ((TWO << (d_MANT_DIG - 1)) - 1)\n+typedef long double ld;\n+#define ld_RADIX 2\n+#define ld_MANT_DIG __LDBL_MANT_DIG__\n+#define ld_MAX \\\n+  (ld_MANT_DIG > MAXS ? M1U : (TWO << (ld_MANT_DIG > MAXS \\\n+\t\t\t\t       ? 0 : ld_MANT_DIG - 1)) - 1)\n+CVTS (f)\n+CVTS (d)\n+CVTS (ld)\n+#endif\n+#ifdef USE_FLOAT80\n+typedef __float80 f80;\n+# define f80_RADIX 2\n+# define f80_MANT_DIG 64\n+# define f80_MAX ((TWO << (f80_MANT_DIG - 1)) - 1)\n+CVTS (f80)\n+#endif\n+#ifdef USE_FLOAT128\n+typedef __float128 f128;\n+# define f128_RADIX 2\n+# define f128_MANT_DIG 113\n+# define f128_MAX \\\n+  (f128_MANT_DIG > MAXS ? M1U : (TWO << (f128_MANT_DIG > MAXS \\\n+\t\t\t\t\t ? 0 : f128_MANT_DIG - 1)) - 1)\n+CVTS (f128)\n+#endif\n+#ifdef USE_DFP\n+# ifdef __cplusplus\n+typedef float _Decimal32 __attribute__((mode(SD)));\n+typedef float _Decimal64 __attribute__((mode(DD)));\n+typedef float _Decimal128 __attribute__((mode(TD)));\n+# endif\n+typedef _Decimal32 d32;\n+# define d32_RADIX 10\n+# define d32_MANT_DIG __DEC32_MANT_DIG__\n+# if d32_MANT_DIG == 7\n+#  define d32_MAX 9999999ULL\n+# endif\n+typedef _Decimal64 d64;\n+# define d64_RADIX 10\n+# define d64_MANT_DIG __DEC64_MANT_DIG__\n+# if d64_MANT_DIG == 16\n+#  define d64_MAX 9999999999999999ULL\n+# endif\n+typedef _Decimal128 d128;\n+# define d128_RADIX 10\n+# define d128_MANT_DIG __DEC128_MANT_DIG__\n+# if d128_MANT_DIG == 34\n+#  ifdef __SIZEOF_INT128__\n+/* #define d128_MAX 0x1ed09bead87c0378d8e63ffffffff */\n+#   define d128_MAX \\\n+  ((((unsigned __int128) 0x1ed09bead87c0) << 64) + 0x378d8e63ffffffffULL)\n+#  else\n+#   define d128_MAX M1U\n+#  endif\n+# endif\n+# ifdef BROKEN_DECIMAL_INT128\n+#  undef CVTS128\n+#  define CVTS128(type2)\n+# endif\n+CVTS (d32)\n+CVTS (d64)\n+CVTS (d128)\n+#endif\n+\n+extern\n+#ifdef __cplusplus\n+\"C\"\n+#endif\n+void abort ();"}, {"sha": "aa1c0da27684a9a622b26bd9c91324ea38241191", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-8.c", "status": "added", "additions": 205, "deletions": 0, "changes": 205, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-8.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-8.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-8.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,205 @@\n+/* { dg-do run } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests } { \"*\" } { \"-O2\" } } */\n+/* { dg-options \"-fsanitize=float-cast-overflow -fsanitize-recover -DUSE_FLT_DBL_LDBL\" } */\n+/* { dg-additional-options \"-DUSE_INT128\" { target int128 } } */\n+\n+#include \"float-cast-overflow-7.h\"\n+\n+#define TEST(type1, type2) \\\n+  if (type1##_MIN)\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      type2 min = type1##_MIN;\t\t\t\t\t\\\n+      type2 add = -1.0;\t\t\t\t\t\t\\\n+      while (1)\t\t\t\t\t\t\t\\\n+\t{\t\t\t\t\t\t\t\\\n+\t  volatile type2 tem = min + add;\t\t\t\\\n+\t  if (tem != min)\t\t\t\t\t\\\n+\t    {\t\t\t\t\t\t\t\\\n+\t      volatile type1 tem3 = cvt_##type1##_##type2 (tem);\\\n+\t      break;\t\t\t\t\t\t\\\n+\t    }\t\t\t\t\t\t\t\\\n+\t  add = add * type2##_RADIX;\t\t\t\t\\\n+\t  if (min == add)\t\t\t\t\t\\\n+\t    break;\t\t\t\t\t\t\\\n+\t}\t\t\t\t\t\t\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  else\t\t\t\t\t\t\t\t\\\n+    {\t\t\t\t\t\t\t\t\\\n+      volatile type1 tem3 = cvt_##type1##_##type2 (-1.0f);\t\\\n+    }\t\t\t\t\t\t\t\t\\\n+  {\t\t\t\t\t\t\t\t\\\n+    type2 max = type1##_MAX;\t\t\t\t\t\\\n+    type2 add = 1.0;\t\t\t\t\t\t\\\n+    while (1)\t\t\t\t\t\t\t\\\n+      {\t\t\t\t\t\t\t\t\\\n+\tvolatile type2 tem = max + add;\t\t\t\t\\\n+\tif (tem != max)\t\t\t\t\t\t\\\n+\t  {\t\t\t\t\t\t\t\\\n+\t    volatile type1 tem3 = cvt_##type1##_##type2 (tem);\t\\\n+\t    break;\t\t\t\t\t\t\\\n+\t  }\t\t\t\t\t\t\t\\\n+\tadd = add * type2##_RADIX;\t\t\t\t\\\n+\tif (max == add)\t\t\t\t\t\t\\\n+\t  break;\t\t\t\t\t\t\\\n+      }\t\t\t\t\t\t\t\t\\\n+  }\n+\n+#ifdef si128_MAX\n+# define TESTS128(type2) TEST (si128, type2) TEST (ui128, type2)\n+#else\n+# define TESTS128(type2)\n+#endif\n+\n+#define TESTS(type2) \\\n+  TEST (sc, type2) TEST (c, type2) TEST (uc, type2)\t\\\n+  TEST (ss, type2) TEST (us, type2)\t\t\t\\\n+  TEST (si, type2) TEST (ui, type2)\t\t\t\\\n+  TEST (sl, type2) TEST (ul, type2)\t\t\t\\\n+  TEST (sll, type2) TEST (ull, type2)\t\t\t\\\n+  TESTS128 (type2)\n+\n+int\n+main ()\n+{\n+#ifdef f_MAX\n+  TESTS (f)\n+#endif\n+#ifdef d_MAX\n+  TESTS (d)\n+#endif\n+#ifdef ld_MAX\n+  TESTS (ld)\n+#endif\n+#ifdef f80_MAX\n+  TESTS (f80)\n+#endif\n+#ifdef f128_MAX\n+  TESTS (f128)\n+#endif\n+#ifdef BROKEN_DECIMAL_INT128\n+# undef TESTS128\n+# define TESTS128(type2)\n+# undef TWO\n+# undef M1U\n+# undef MAXS\n+# define TWO 2ULL\n+# define M1U -1ULL\n+# define MAXS (__CHAR_BIT__ * __SIZEOF_LONG_LONG__)\n+#endif\n+#ifdef d32_MAX\n+  TESTS (d32)\n+#endif\n+#ifdef d64_MAX\n+  TESTS (d64)\n+#endif\n+#ifdef d128_MAX\n+  TESTS (d128)\n+#endif\n+  return 0;\n+}\n+\n+/* float */\n+/* { dg-output \"value -129 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"value \\[0-9.e+-]* is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value 128 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value (-129|-1) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value (128|256) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 256 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value -32769 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value 32768 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 65536 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n+/* No error for float and __int128 unsigned max value, as ui128_MAX is +Inf in float.  */\n+/* double */\n+/* { dg-output \"\\[^\\n\\r]*value -129 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value 128 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value (-129|-1) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value (128|256) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 256 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value -32769 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value 32768 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 65536 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n+/* long double */\n+/* { dg-output \"\\[^\\n\\r]*value -129 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value 128 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value (-129|-1) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value (128|256) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 256 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value -32769 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value 32768 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 65536 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ilp32 || lp64 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { ! { ilp32 || lp64 } } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target { int128 } } } */"}, {"sha": "cadef311121b4b0498bb3b7f0acb301276c3baba", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast-overflow-9.c", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-9.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-9.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast-overflow-9.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,61 @@\n+/* { dg-do run { target { i?86-*-linux* x86_64-*-linux* } } } */\n+/* { dg-skip-if \"\" { ! run_expensive_tests } { \"*\" } { \"-O2\" } } */\n+/* { dg-options \"-fsanitize=float-cast-overflow -fsanitize-recover -DUSE_FLOAT80 -DUSE_FLOAT128\" } */\n+/* { dg-additional-options \"-DUSE_INT128\" { target int128 } } */\n+\n+#include \"float-cast-overflow-8.c\"\n+\n+/* __float80 */\n+/* { dg-output \"value -129 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 128 is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value (-129|-1) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value (128|256) is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 256 is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -32769 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 32768 is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 65536 is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n+/* { dg-output \"\\[^\\n\\r]*value \\[0-9.e+-]* is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n+/* __float128 */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'signed char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned char'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'short unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type 'long long unsigned int'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type '__int128'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */\n+/* { dg-output \"\\[^\\n\\r]*value <unknown> is outside the range of representable values of type '__int128 unsigned'\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" { target int128 } } */"}, {"sha": "166da8fc4067f157d5a56bba3713e4a43996e47a", "filename": "gcc/testsuite/c-c++-common/ubsan/float-cast.h", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fc-c%2B%2B-common%2Fubsan%2Ffloat-cast.h?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,28 @@\n+/* Various macros for -fsanitize=float-cast-overflow testing.  */\n+\n+#define INT128_MAX (__int128) (((unsigned __int128) 1 << ((__SIZEOF_INT128__ * __CHAR_BIT__) - 1)) - 1)\n+#define INT128_MIN (-INT128_MAX - 1)\n+#define UINT128_MAX ((2 * (unsigned __int128) INT128_MAX) + 1)\n+\n+#define CHECK_BOUNDARY(VAR, VAL)\t\\\n+  (VAR) = (VAL) - 5.0;\t\t\t\\\n+  (VAR) = (VAL) - 1.5;\t\t\t\\\n+  (VAR) = (VAL) - 1.0;\t\t\t\\\n+  (VAR) = (VAL) - 0.75;\t\t\t\\\n+  (VAR) = (VAL) - 0.5;\t\t\t\\\n+  (VAR) = (VAL) - 0.0000001;\t\t\\\n+  (VAR) = (VAL) - 0.0;\t\t\t\\\n+  (VAR) = (VAL);\t\t\t\\\n+  (VAR) = (VAL) + 0.0;\t\t\t\\\n+  (VAR) = (VAL) + 0.0000001;\t\t\\\n+  (VAR) = (VAL) + 0.5;\t\t\t\\\n+  (VAR) = (VAL) + 0.75;\t\t\t\\\n+  (VAR) = (VAL) + 1.0;\t\t\t\\\n+  (VAR) = (VAL) + 1.5;\t\t\t\\\n+  (VAR) = (VAL) + 5.0;\n+\n+#define CHECK_NONNUMBERS(VAR)\t\t\\\n+  (VAR) = nan;\t\t\t\t\\\n+  (VAR) = -nan;\t\t\t\t\\\n+  (VAR) = inf;\t\t\t\t\\\n+  (VAR) = -inf;"}, {"sha": "d1df76da6325b6d4afab17a314cd85026b4f8f77", "filename": "gcc/testsuite/g++.dg/ubsan/float-cast-overflow-bf.C", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Ffloat-cast-overflow-bf.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Ffloat-cast-overflow-bf.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fubsan%2Ffloat-cast-overflow-bf.C?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,62 @@\n+// { dg-do run { target { int32 } } }\n+// { dg-options \"-fsanitize=float-cast-overflow\" }\n+\n+#define INT_MAX __INT_MAX__\n+#define INT_MIN (-__INT_MAX__ - 1)\n+#define UINT_MAX 2 * (unsigned) __INT_MAX__ + 1\n+\n+struct S\n+{\n+  int i:1;\n+} s;\n+\n+struct T\n+{\n+  unsigned int i:1;\n+} t;\n+\n+int\n+main (void)\n+{\n+  volatile double d;\n+\n+#define CHECK_BOUNDARY(VAR, VAL)        \\\n+  (VAR) = (VAL) - 1.5;                  \\\n+  (VAR) = (VAL) - 1.0;                  \\\n+  (VAR) = (VAL) - 0.75;                  \\\n+  (VAR) = (VAL) - 0.5;                  \\\n+  (VAR) = (VAL) - 0.0000001;            \\\n+  (VAR) = (VAL) - 0.0;                  \\\n+  (VAR) = (VAL);                        \\\n+  (VAR) = (VAL) + 0.0;                  \\\n+  (VAR) = (VAL) + 0.0000001;            \\\n+  (VAR) = (VAL) + 0.5;                  \\\n+  (VAR) = (VAL) + 0.75;                  \\\n+  (VAR) = (VAL) + 1.0;                  \\\n+  (VAR) = (VAL) + 1.5;\n+\n+  /* Signed bit-field.  (INT_MIN, INT_MAX) is valid.  */\n+  d = INT_MIN;\n+  CHECK_BOUNDARY (s.i, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (s.i, d);\n+  d = INT_MAX;\n+  CHECK_BOUNDARY (s.i, d);\n+\n+  /* Unsigned bit-field.  (0, UINT_MAX) is valid.  */\n+  d = UINT_MAX;\n+  CHECK_BOUNDARY (t.i, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (t.i, d);\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"value -2.14748e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -2.14748e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 2.14748e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 2.14748e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 4.29497e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 4.29497e\\\\\\+09 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "298d0d91849e95d6709abd4afc351aa6400c1a46", "filename": "gcc/testsuite/gcc.dg/ubsan/float-cast-overflow-bf.c", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Ffloat-cast-overflow-bf.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Ffloat-cast-overflow-bf.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fubsan%2Ffloat-cast-overflow-bf.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -0,0 +1,72 @@\n+/* { dg-do run } */\n+/* { dg-options \"-fsanitize=float-cast-overflow\" } */\n+\n+struct\n+{\n+  int i:1;\n+} s;\n+\n+struct\n+{\n+  unsigned int i:1;\n+} t;\n+\n+int\n+main (void)\n+{\n+  volatile double d;\n+\n+#define CHECK_BOUNDARY(VAR, VAL)        \\\n+  (VAR) = (VAL) - 1.5;                  \\\n+  (VAR) = (VAL) - 1.0;                  \\\n+  (VAR) = (VAL) - 0.5;                  \\\n+  (VAR) = (VAL) - 0.0000001;            \\\n+  (VAR) = (VAL) - 0.0;                  \\\n+  (VAR) = (VAL);                        \\\n+  (VAR) = (VAL) + 0.0;                  \\\n+  (VAR) = (VAL) + 0.0000001;            \\\n+  (VAR) = (VAL) + 0.5;                  \\\n+  (VAR) = (VAL) + 1.0;                  \\\n+  (VAR) = (VAL) + 1.5;\n+\n+  /* Signed bit-field.  (-1, 0) is valid.  */\n+  d = -1.0;\n+  CHECK_BOUNDARY (s.i, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (s.i, d);\n+  d = 1.0;\n+  CHECK_BOUNDARY (s.i, d);\n+\n+  /* Unsigned bit-field.  (0, 1) is valid.  */\n+  d = -1.0;\n+  CHECK_BOUNDARY (t.i, d);\n+  d = 0.0;\n+  CHECK_BOUNDARY (t.i, d);\n+  d = 1.0;\n+  CHECK_BOUNDARY (t.i, d);\n+\n+  return 0;\n+}\n+\n+/* { dg-output \"value -2.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -2 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 1.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 2 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 2.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -2.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -2 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value -1 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 2 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */\n+/* { dg-output \"\\[^\\n\\r]*value 2.5 is outside the range of representable values of type\\[^\\n\\r]*(\\n|\\r\\n|\\r)\" } */"}, {"sha": "4de6d6e8ae3acd9fec6cc06caa45e92b4e419829", "filename": "gcc/ubsan.c", "status": "modified", "additions": 142, "deletions": 4, "changes": 146, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fubsan.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fubsan.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.c?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -47,6 +47,8 @@ along with GCC; see the file COPYING3.  If not see\n #include \"asan.h\"\n #include \"gimplify-me.h\"\n #include \"intl.h\"\n+#include \"realmpfr.h\"\n+#include \"dfp.h\"\n \n /* Map from a tree to a VAR_DECL tree.  */\n \n@@ -267,9 +269,14 @@ static unsigned short\n get_ubsan_type_info_for_type (tree type)\n {\n   gcc_assert (TYPE_SIZE (type) && tree_fits_uhwi_p (TYPE_SIZE (type)));\n-  int prec = exact_log2 (tree_to_uhwi (TYPE_SIZE (type)));\n-  gcc_assert (prec != -1);\n-  return (prec << 1) | !TYPE_UNSIGNED (type);\n+  if (TREE_CODE (type) == REAL_TYPE)\n+    return tree_to_uhwi (TYPE_SIZE (type));\n+  else\n+    {\n+      int prec = exact_log2 (tree_to_uhwi (TYPE_SIZE (type)));\n+      gcc_assert (prec != -1);\n+      return (prec << 1) | !TYPE_UNSIGNED (type);\n+    }\n }\n \n /* Helper routine that returns ADDR_EXPR of a VAR_DECL of a type\n@@ -359,7 +366,14 @@ ubsan_type_descriptor (tree type, bool want_pointer_type_p)\n       tkind = 0x0000;\n       break;\n     case REAL_TYPE:\n-      tkind = 0x0001;\n+      /* FIXME: libubsan right now only supports float, double and\n+\t long double type formats.  */\n+      if (TYPE_MODE (type) == TYPE_MODE (float_type_node)\n+\t  || TYPE_MODE (type) == TYPE_MODE (double_type_node)\n+\t  || TYPE_MODE (type) == TYPE_MODE (long_double_type_node))\n+\ttkind = 0x0001;\n+      else\n+\ttkind = 0xffff;\n       break;\n     default:\n       tkind = 0xffff;\n@@ -891,6 +905,130 @@ instrument_bool_enum_load (gimple_stmt_iterator *gsi)\n   gsi_insert_before (&gsi2, g, GSI_SAME_STMT);\n }\n \n+/* Instrument float point-to-integer conversion.  TYPE is an integer type of\n+   destination, EXPR is floating-point expression.  */\n+\n+tree\n+ubsan_instrument_float_cast (location_t loc, tree type, tree expr)\n+{\n+  tree expr_type = TREE_TYPE (expr);\n+  tree t, tt, fn, min, max;\n+  enum machine_mode mode = TYPE_MODE (expr_type);\n+  int prec = TYPE_PRECISION (type);\n+  bool uns_p = TYPE_UNSIGNED (type);\n+\n+  /* Float to integer conversion first truncates toward zero, so\n+     even signed char c = 127.875f; is not problematic.\n+     Therefore, we should complain only if EXPR is unordered or smaller\n+     or equal than TYPE_MIN_VALUE - 1.0 or greater or equal than\n+     TYPE_MAX_VALUE + 1.0.  */\n+  if (REAL_MODE_FORMAT (mode)->b == 2)\n+    {\n+      /* For maximum, TYPE_MAX_VALUE might not be representable\n+\t in EXPR_TYPE, e.g. if TYPE is 64-bit long long and\n+\t EXPR_TYPE is IEEE single float, but TYPE_MAX_VALUE + 1.0 is\n+\t either representable or infinity.  */\n+      REAL_VALUE_TYPE maxval = dconst1;\n+      SET_REAL_EXP (&maxval, REAL_EXP (&maxval) + prec - !uns_p);\n+      real_convert (&maxval, mode, &maxval);\n+      max = build_real (expr_type, maxval);\n+\n+      /* For unsigned, assume -1.0 is always representable.  */\n+      if (uns_p)\n+\tmin = build_minus_one_cst (expr_type);\n+      else\n+\t{\n+\t  /* TYPE_MIN_VALUE is generally representable (or -inf),\n+\t     but TYPE_MIN_VALUE - 1.0 might not be.  */\n+\t  REAL_VALUE_TYPE minval = dconstm1, minval2;\n+\t  SET_REAL_EXP (&minval, REAL_EXP (&minval) + prec - 1);\n+\t  real_convert (&minval, mode, &minval);\n+\t  real_arithmetic (&minval2, MINUS_EXPR, &minval, &dconst1);\n+\t  real_convert (&minval2, mode, &minval2);\n+\t  if (real_compare (EQ_EXPR, &minval, &minval2)\n+\t      && !real_isinf (&minval))\n+\t    {\n+\t      /* If TYPE_MIN_VALUE - 1.0 is not representable and\n+\t\t rounds to TYPE_MIN_VALUE, we need to subtract\n+\t\t more.  As REAL_MODE_FORMAT (mode)->p is the number\n+\t\t of base digits, we want to subtract a number that\n+\t\t will be 1 << (REAL_MODE_FORMAT (mode)->p - 1)\n+\t\t times smaller than minval.  */\n+\t      minval2 = dconst1;\n+\t      gcc_assert (prec > REAL_MODE_FORMAT (mode)->p);\n+\t      SET_REAL_EXP (&minval2,\n+\t\t\t    REAL_EXP (&minval2) + prec - 1\n+\t\t\t    - REAL_MODE_FORMAT (mode)->p + 1);\n+\t      real_arithmetic (&minval2, MINUS_EXPR, &minval, &minval2);\n+\t      real_convert (&minval2, mode, &minval2);\n+\t    }\n+\t  min = build_real (expr_type, minval2);\n+\t}\n+    }\n+  else if (REAL_MODE_FORMAT (mode)->b == 10)\n+    {\n+      /* For _Decimal128 up to 34 decimal digits, - sign,\n+\t dot, e, exponent.  */\n+      char buf[64];\n+      mpfr_t m;\n+      int p = REAL_MODE_FORMAT (mode)->p;\n+      REAL_VALUE_TYPE maxval, minval;\n+\n+      /* Use mpfr_snprintf rounding to compute the smallest\n+\t representable decimal number greater or equal than\n+\t 1 << (prec - !uns_p).  */\n+      mpfr_init2 (m, prec + 2);\n+      mpfr_set_ui_2exp (m, 1, prec - !uns_p, GMP_RNDN);\n+      mpfr_snprintf (buf, sizeof buf, \"%.*RUe\", p - 1, m);\n+      decimal_real_from_string (&maxval, buf);\n+      max = build_real (expr_type, maxval);\n+\n+      /* For unsigned, assume -1.0 is always representable.  */\n+      if (uns_p)\n+\tmin = build_minus_one_cst (expr_type);\n+      else\n+\t{\n+\t  /* Use mpfr_snprintf rounding to compute the largest\n+\t     representable decimal number less or equal than\n+\t     (-1 << (prec - 1)) - 1.  */\n+\t  mpfr_set_si_2exp (m, -1, prec - 1, GMP_RNDN);\n+\t  mpfr_sub_ui (m, m, 1, GMP_RNDN);\n+\t  mpfr_snprintf (buf, sizeof buf, \"%.*RDe\", p - 1, m);\n+\t  decimal_real_from_string (&minval, buf);\n+\t  min = build_real (expr_type, minval);\n+\t}\n+      mpfr_clear (m);\n+    }\n+  else\n+    return NULL_TREE;\n+\n+  if (flag_sanitize_undefined_trap_on_error)\n+    fn = build_call_expr_loc (loc, builtin_decl_explicit (BUILT_IN_TRAP), 0);\n+  else\n+    {\n+      /* Create the __ubsan_handle_float_cast_overflow fn call.  */\n+      tree data = ubsan_create_data (\"__ubsan_float_cast_overflow_data\", NULL,\n+\t\t\t\t     NULL,\n+\t\t\t\t     ubsan_type_descriptor (expr_type, false),\n+\t\t\t\t     ubsan_type_descriptor (type, false),\n+\t\t\t\t     NULL_TREE);\n+      enum built_in_function bcode\n+\t= flag_sanitize_recover\n+\t  ? BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW\n+\t  : BUILT_IN_UBSAN_HANDLE_FLOAT_CAST_OVERFLOW_ABORT;\n+      fn = builtin_decl_explicit (bcode);\n+      fn = build_call_expr_loc (loc, fn, 2,\n+\t\t\t\tbuild_fold_addr_expr_loc (loc, data),\n+\t\t\t\tubsan_encode_value (expr, false));\n+    }\n+\n+  t = fold_build2 (UNLE_EXPR, boolean_type_node, expr, min);\n+  tt = fold_build2 (UNGE_EXPR, boolean_type_node, expr, max);\n+  return fold_build3 (COND_EXPR, void_type_node,\n+\t\t      fold_build2 (TRUTH_OR_EXPR, boolean_type_node, t, tt),\n+\t\t      fn, integer_zero_node);\n+}\n+\n namespace {\n \n const pass_data pass_data_ubsan ="}, {"sha": "b0084192b7e6688bdfb9a4923fbd09bd77df0726", "filename": "gcc/ubsan.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fubsan.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/gcc%2Fubsan.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fubsan.h?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -44,6 +44,7 @@ extern tree ubsan_type_descriptor (tree, bool);\n extern tree ubsan_encode_value (tree, bool = false);\n extern bool is_ubsan_builtin_p (tree);\n extern tree ubsan_build_overflow_builtin (tree_code, location_t, tree, tree, tree);\n+extern tree ubsan_instrument_float_cast (location_t, tree, tree);\n \n #endif  /* GCC_UBSAN_H  */\n "}, {"sha": "b6ed9bca5d8866f6f8a91350c3ed84bdacc52d4f", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -1,3 +1,8 @@\n+2014-05-23  Marek Polacek  <polacek@redhat.com>\n+\n+\t* ubsan/ubsan_value.cc (getFloatValue): Handle 96-bit\n+\tfloating-point types.\n+\n 2014-05-22  Kostya Serebryany  <kcc@google.com>\n \n \t* All source files: Merge from upstream r209283."}, {"sha": "e2f664d3b24da24830dff1092abb576cd7b15147", "filename": "libsanitizer/ubsan/ubsan_value.cc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/85a16bf8b55c7accb3b2f60568cd9119d9656494/libsanitizer%2Fubsan%2Fubsan_value.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/85a16bf8b55c7accb3b2f60568cd9119d9656494/libsanitizer%2Fubsan%2Fubsan_value.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2Fubsan%2Fubsan_value.cc?ref=85a16bf8b55c7accb3b2f60568cd9119d9656494", "patch": "@@ -92,6 +92,7 @@ FloatMax Value::getFloatValue() const {\n     switch (getType().getFloatBitWidth()) {\n     case 64: return *reinterpret_cast<double*>(Val);\n     case 80: return *reinterpret_cast<long double*>(Val);\n+    case 96: return *reinterpret_cast<long double*>(Val);\n     case 128: return *reinterpret_cast<long double*>(Val);\n     }\n   }"}]}