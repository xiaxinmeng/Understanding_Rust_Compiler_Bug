{"sha": "4977507e329ee3ed410fc7338b9aaada81b68361", "node_id": "C_kwDOANBUbNoAKDQ5Nzc1MDdlMzI5ZWUzZWQ0MTBmYzczMzhiOWFhYWRhODFiNjgzNjE", "commit": {"author": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-08T12:46:02Z"}, "committer": {"name": "Jonathan Wakely", "email": "jwakely@redhat.com", "date": "2022-09-08T18:29:12Z"}, "message": "libstdc++: Add always_inline attribute to std::byte operators\n\nlibstdc++-v3/ChangeLog:\n\n\t* include/c_global/cstddef (byte): Add always_inline attribute\n\tto all operator overloads.\n\t(to_integer): Add always_inline attribute.", "tree": {"sha": "18376f11588432775a9cb11726c27017f9d1c7d5", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/18376f11588432775a9cb11726c27017f9d1c7d5"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4977507e329ee3ed410fc7338b9aaada81b68361", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4977507e329ee3ed410fc7338b9aaada81b68361", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4977507e329ee3ed410fc7338b9aaada81b68361", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4977507e329ee3ed410fc7338b9aaada81b68361/comments", "author": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwakely", "id": 1254480, "node_id": "MDQ6VXNlcjEyNTQ0ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1254480?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwakely", "html_url": "https://github.com/jwakely", "followers_url": "https://api.github.com/users/jwakely/followers", "following_url": "https://api.github.com/users/jwakely/following{/other_user}", "gists_url": "https://api.github.com/users/jwakely/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwakely/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwakely/subscriptions", "organizations_url": "https://api.github.com/users/jwakely/orgs", "repos_url": "https://api.github.com/users/jwakely/repos", "events_url": "https://api.github.com/users/jwakely/events{/privacy}", "received_events_url": "https://api.github.com/users/jwakely/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "157236dbd621644b3cec50b6cf38811959f3e78c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/157236dbd621644b3cec50b6cf38811959f3e78c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/157236dbd621644b3cec50b6cf38811959f3e78c"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "df2d88a2ce5547f30877aa13defbe5af97ff96e4", "filename": "libstdc++-v3/include/c_global/cstddef", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4977507e329ee3ed410fc7338b9aaada81b68361/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4977507e329ee3ed410fc7338b9aaada81b68361/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2Finclude%2Fc_global%2Fcstddef?ref=4977507e329ee3ed410fc7338b9aaada81b68361", "patch": "@@ -119,55 +119,66 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION\n     using __byte_op_t = typename __byte_operand<_IntegerType>::__type;\n \n   template<typename _IntegerType>\n+    [[__gnu__::__always_inline__]]\n     constexpr __byte_op_t<_IntegerType>\n     operator<<(byte __b, _IntegerType __shift) noexcept\n     { return (byte)(unsigned char)((unsigned)__b << __shift); }\n \n   template<typename _IntegerType>\n+    [[__gnu__::__always_inline__]]\n     constexpr __byte_op_t<_IntegerType>\n     operator>>(byte __b, _IntegerType __shift) noexcept\n     { return (byte)(unsigned char)((unsigned)__b >> __shift); }\n \n+  [[__gnu__::__always_inline__]]\n   constexpr byte\n   operator|(byte __l, byte __r) noexcept\n   { return (byte)(unsigned char)((unsigned)__l | (unsigned)__r); }\n \n+  [[__gnu__::__always_inline__]]\n   constexpr byte\n   operator&(byte __l, byte __r) noexcept\n   { return (byte)(unsigned char)((unsigned)__l & (unsigned)__r); }\n \n+  [[__gnu__::__always_inline__]]\n   constexpr byte\n   operator^(byte __l, byte __r) noexcept\n   { return (byte)(unsigned char)((unsigned)__l ^ (unsigned)__r); }\n \n+  [[__gnu__::__always_inline__]]\n   constexpr byte\n   operator~(byte __b) noexcept\n   { return (byte)(unsigned char)~(unsigned)__b; }\n \n   template<typename _IntegerType>\n+    [[__gnu__::__always_inline__]]\n     constexpr __byte_op_t<_IntegerType>&\n     operator<<=(byte& __b, _IntegerType __shift) noexcept\n     { return __b = __b << __shift; }\n \n   template<typename _IntegerType>\n+    [[__gnu__::__always_inline__]]\n     constexpr __byte_op_t<_IntegerType>&\n     operator>>=(byte& __b, _IntegerType __shift) noexcept\n     { return __b = __b >> __shift; }\n \n+  [[__gnu__::__always_inline__]]\n   constexpr byte&\n   operator|=(byte& __l, byte __r) noexcept\n   { return __l = __l | __r; }\n \n+  [[__gnu__::__always_inline__]]\n   constexpr byte&\n   operator&=(byte& __l, byte __r) noexcept\n   { return __l = __l & __r; }\n \n+  [[__gnu__::__always_inline__]]\n   constexpr byte&\n   operator^=(byte& __l, byte __r) noexcept\n   { return __l = __l ^ __r; }\n \n   template<typename _IntegerType>\n-    [[nodiscard]]\n+    [[nodiscard,__gnu__::__always_inline__]]\n     constexpr _IntegerType\n     to_integer(__byte_op_t<_IntegerType> __b) noexcept\n     { return _IntegerType(__b); }"}]}