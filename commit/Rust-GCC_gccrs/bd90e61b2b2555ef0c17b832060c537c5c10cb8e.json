{"sha": "bd90e61b2b2555ef0c17b832060c537c5c10cb8e", "node_id": "C_kwDOANBUbNoAKGJkOTBlNjFiMmIyNTU1ZWYwYzE3YjgzMjA2MGM1MzdjNWMxMGNiOGU", "commit": {"author": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-05-12T22:47:17Z"}, "committer": {"name": "David Faust", "email": "david.faust@oracle.com", "date": "2022-05-12T22:47:17Z"}, "message": "HIR: Add RangePatternBoundType and helpers", "tree": {"sha": "9006f55b32a5f690b220a04d3baa9059601806f6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9006f55b32a5f690b220a04d3baa9059601806f6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd90e61b2b2555ef0c17b832060c537c5c10cb8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd90e61b2b2555ef0c17b832060c537c5c10cb8e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd90e61b2b2555ef0c17b832060c537c5c10cb8e", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd90e61b2b2555ef0c17b832060c537c5c10cb8e/comments", "author": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dafaust", "id": 4460334, "node_id": "MDQ6VXNlcjQ0NjAzMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4460334?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dafaust", "html_url": "https://github.com/dafaust", "followers_url": "https://api.github.com/users/dafaust/followers", "following_url": "https://api.github.com/users/dafaust/following{/other_user}", "gists_url": "https://api.github.com/users/dafaust/gists{/gist_id}", "starred_url": "https://api.github.com/users/dafaust/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dafaust/subscriptions", "organizations_url": "https://api.github.com/users/dafaust/orgs", "repos_url": "https://api.github.com/users/dafaust/repos", "events_url": "https://api.github.com/users/dafaust/events{/privacy}", "received_events_url": "https://api.github.com/users/dafaust/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c31d0c5f78f038baa48cb68f26ce84ed31ce3732", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c31d0c5f78f038baa48cb68f26ce84ed31ce3732", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c31d0c5f78f038baa48cb68f26ce84ed31ce3732"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "7129b5a36849961fa68989e741aa898fd1612093", "filename": "gcc/rust/hir/tree/rust-hir-pattern.h", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd90e61b2b2555ef0c17b832060c537c5c10cb8e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd90e61b2b2555ef0c17b832060c537c5c10cb8e/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fhir%2Ftree%2Frust-hir-pattern.h?ref=bd90e61b2b2555ef0c17b832060c537c5c10cb8e", "patch": "@@ -197,6 +197,13 @@ class WildcardPattern : public Pattern\n class RangePatternBound\n {\n public:\n+  enum RangePatternBoundType\n+  {\n+    LITERAL,\n+    PATH,\n+    QUALPATH\n+  };\n+\n   virtual ~RangePatternBound () {}\n \n   // Unique pointer custom clone function\n@@ -210,6 +217,8 @@ class RangePatternBound\n \n   virtual void accept_vis (HIRFullVisitor &vis) = 0;\n \n+  virtual RangePatternBoundType get_bound_type () const = 0;\n+\n protected:\n   // pure virtual as RangePatternBound is abstract\n   virtual RangePatternBound *clone_range_pattern_bound_impl () const = 0;\n@@ -238,8 +247,15 @@ class RangePatternBoundLiteral : public RangePatternBound\n \n   Location get_locus () const { return locus; }\n \n+  Literal get_literal () const { return literal; }\n+\n   void accept_vis (HIRFullVisitor &vis) override;\n \n+  RangePatternBoundType get_bound_type () const override\n+  {\n+    return RangePatternBoundType::LITERAL;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -264,8 +280,16 @@ class RangePatternBoundPath : public RangePatternBound\n \n   Location get_locus () const { return path.get_locus (); }\n \n+  PathInExpression &get_path () { return path; }\n+  const PathInExpression &get_path () const { return path; }\n+\n   void accept_vis (HIRFullVisitor &vis) override;\n \n+  RangePatternBoundType get_bound_type () const override\n+  {\n+    return RangePatternBoundType::PATH;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -294,6 +318,14 @@ class RangePatternBoundQualPath : public RangePatternBound\n \n   void accept_vis (HIRFullVisitor &vis) override;\n \n+  QualifiedPathInExpression &get_qualified_path () { return path; }\n+  const QualifiedPathInExpression &get_qualified_path () const { return path; }\n+\n+  RangePatternBoundType get_bound_type () const override\n+  {\n+    return RangePatternBoundType::QUALPATH;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */\n@@ -368,6 +400,18 @@ class RangePattern : public Pattern\n     return PatternType::RANGE;\n   }\n \n+  std::unique_ptr<RangePatternBound> &get_lower_bound ()\n+  {\n+    rust_assert (lower != nullptr);\n+    return lower;\n+  }\n+\n+  std::unique_ptr<RangePatternBound> &get_upper_bound ()\n+  {\n+    rust_assert (upper != nullptr);\n+    return upper;\n+  }\n+\n protected:\n   /* Use covariance to implement clone function as returning this object rather\n    * than base */"}]}