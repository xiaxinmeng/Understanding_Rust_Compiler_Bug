{"sha": "730c196aab01296486d21c90ffac2d9f6a338422", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzMwYzE5NmFhYjAxMjk2NDg2ZDIxYzkwZmZhYzJkOWY2YTMzODQyMg==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2021-02-04T09:27:48Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2021-05-07T09:29:11Z"}, "message": "[Ada] Small cleanup in C header file\n\ngcc/ada/\n\n\t* atree.h (Parent): Remove duplicate declaration.\n\t(Get_1_Bit_Field): Also use INLINE specifier in the declaration,\n\tfix formatting and use gcc_unreachable for the default case.\n\t(Get_2_Bit_Field): Likewise.\n\t(Get_4_Bit_Field): Likewise.\n\t(Get_8_Bit_Field): Likewise.\n\t(Get_32_Bit_Field): Likewise.\n\t(Get_32_Bit_Field_With_Default): Likewise.", "tree": {"sha": "f3a2e81b5ea212a38cbafeb18e89b3f405a3dc4a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f3a2e81b5ea212a38cbafeb18e89b3f405a3dc4a"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/730c196aab01296486d21c90ffac2d9f6a338422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730c196aab01296486d21c90ffac2d9f6a338422", "html_url": "https://github.com/Rust-GCC/gccrs/commit/730c196aab01296486d21c90ffac2d9f6a338422", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/730c196aab01296486d21c90ffac2d9f6a338422/comments", "author": null, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76f9c7f44fffb0b03266730b137313fe79f1c99e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/76f9c7f44fffb0b03266730b137313fe79f1c99e", "html_url": "https://github.com/Rust-GCC/gccrs/commit/76f9c7f44fffb0b03266730b137313fe79f1c99e"}], "stats": {"total": 97, "additions": 49, "deletions": 48}, "files": [{"sha": "c3fd09ec01c72a61ddeced31a75f2c30b1f126b3", "filename": "gcc/ada/atree.h", "status": "modified", "additions": 49, "deletions": 48, "changes": 97, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/730c196aab01296486d21c90ffac2d9f6a338422/gcc%2Fada%2Fatree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/730c196aab01296486d21c90ffac2d9f6a338422/gcc%2Fada%2Fatree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fatree.h?ref=730c196aab01296486d21c90ffac2d9f6a338422", "patch": "@@ -41,14 +41,14 @@ extern Node_Id Parent (Node_Id);\n #define Original_Node atree__original_node\n extern Node_Id Original_Node (Node_Id);\n \n-/* Type used for union of Node_Id, List_Id, Elist_Id. */\n+/* Type used for union of Node_Id, List_Id, Elist_Id.  */\n typedef Int Tree_Id;\n \n /* These two functions can only be used for Node_Id and List_Id values and\n    they work in the C version because Empty = No_List = 0.  */\n \n-static Boolean No\t(Tree_Id);\n-static Boolean Present\t(Tree_Id);\n+INLINE Boolean No (Tree_Id);\n+INLINE Boolean Present (Tree_Id);\n \n INLINE Boolean\n No (Tree_Id N)\n@@ -62,33 +62,32 @@ Present (Tree_Id N)\n   return !No (N);\n }\n \n-extern Node_Id Parent\t\t(Tree_Id);\n-\n #define Current_Error_Node atree__current_error_node\n extern Node_Id Current_Error_Node;\n \n-// The following code corresponds to the Get_n_Bit_Field functions (for\n-// various n) in package Atree. The low-level getters in sinfo.h call\n-// these even-lower-level getters.\n+/* The following code corresponds to the Get_n_Bit_Field functions (for\n+   various n) in package Atree.  The low-level getters in sinfo.h call\n+   these even-lower-level getters.  */\n \n extern Field_Offset *Node_Offsets_Ptr;\n-extern slot* Slots_Ptr;\n+extern slot *Slots_Ptr;\n \n-static Union_Id Get_1_Bit_Field(Node_Id N, Field_Offset Offset);\n-static Union_Id Get_2_Bit_Field(Node_Id N, Field_Offset Offset);\n-static Union_Id Get_4_Bit_Field(Node_Id N, Field_Offset Offset);\n-static Union_Id Get_8_Bit_Field(Node_Id N, Field_Offset Offset);\n-static Union_Id Get_32_Bit_Field(Node_Id N, Field_Offset Offset);\n-static Union_Id Get_32_Bit_Field_With_Default\n-    (Node_Id N, Field_Offset Offset, Union_Id Default_Value);\n+INLINE Union_Id Get_1_Bit_Field (Node_Id N, Field_Offset Offset);\n+INLINE Union_Id Get_2_Bit_Field (Node_Id N, Field_Offset Offset);\n+INLINE Union_Id Get_4_Bit_Field (Node_Id N, Field_Offset Offset);\n+INLINE Union_Id Get_8_Bit_Field (Node_Id N, Field_Offset Offset);\n+INLINE Union_Id Get_32_Bit_Field (Node_Id N, Field_Offset Offset);\n+INLINE Union_Id Get_32_Bit_Field_With_Default (Node_Id N, Field_Offset Offset,\n+\t\t\t\t\t       Union_Id Default_Value);\n \n INLINE Union_Id\n-Get_1_Bit_Field(Node_Id N, Field_Offset Offset)\n+Get_1_Bit_Field (Node_Id N, Field_Offset Offset)\n {\n-    const Field_Offset L = 32;\n-    slot_1_bit slot = (Slots_Ptr + (Node_Offsets_Ptr[N] + Offset/L))->slot_1;\n+  const Field_Offset L = 32;\n+\n+  slot_1_bit slot = (Slots_Ptr + (Node_Offsets_Ptr[N] + Offset / L))->slot_1;\n \n-    switch (Offset%L)\n+  switch (Offset % L)\n     {\n     case 0: return slot.f0;\n     case 1: return slot.f1;\n@@ -122,17 +121,18 @@ Get_1_Bit_Field(Node_Id N, Field_Offset Offset)\n     case 29: return slot.f29;\n     case 30: return slot.f30;\n     case 31: return slot.f31;\n-    default: gcc_assert(false);\n+    default: gcc_unreachable ();\n     }\n }\n \n INLINE Union_Id\n-Get_2_Bit_Field(Node_Id N, Field_Offset Offset)\n+Get_2_Bit_Field (Node_Id N, Field_Offset Offset)\n {\n-    const Field_Offset L = 16;\n-    slot_2_bit slot = (Slots_Ptr + (Node_Offsets_Ptr[N] + Offset/L))->slot_2;\n+  const Field_Offset L = 16;\n+\n+  slot_2_bit slot = (Slots_Ptr + (Node_Offsets_Ptr[N] + Offset / L))->slot_2;\n \n-    switch (Offset%L)\n+  switch (Offset % L)\n     {\n     case 0: return slot.f0;\n     case 1: return slot.f1;\n@@ -150,17 +150,18 @@ Get_2_Bit_Field(Node_Id N, Field_Offset Offset)\n     case 13: return slot.f13;\n     case 14: return slot.f14;\n     case 15: return slot.f15;\n-    default: gcc_assert(false);\n+    default: gcc_unreachable ();\n     }\n }\n \n INLINE Union_Id\n-Get_4_Bit_Field(Node_Id N, Field_Offset Offset)\n+Get_4_Bit_Field (Node_Id N, Field_Offset Offset)\n {\n-    const Field_Offset L = 8;\n-    slot_4_bit slot = (Slots_Ptr + (Node_Offsets_Ptr[N] + Offset/L))->slot_4;\n+  const Field_Offset L = 8;\n \n-    switch (Offset%L)\n+  slot_4_bit slot = (Slots_Ptr + (Node_Offsets_Ptr[N] + Offset / L))->slot_4;\n+\n+  switch (Offset % L)\n     {\n     case 0: return slot.f0;\n     case 1: return slot.f1;\n@@ -170,46 +171,46 @@ Get_4_Bit_Field(Node_Id N, Field_Offset Offset)\n     case 5: return slot.f5;\n     case 6: return slot.f6;\n     case 7: return slot.f7;\n-    default: gcc_assert(false);\n+    default: gcc_unreachable ();\n     }\n }\n \n INLINE Union_Id\n-Get_8_Bit_Field(Node_Id N, Field_Offset Offset)\n+Get_8_Bit_Field (Node_Id N, Field_Offset Offset)\n {\n-    const Field_Offset L = 4;\n-    slot_8_bit slot = (Slots_Ptr + (Node_Offsets_Ptr[N] + Offset/L))->slot_8;\n+  const Field_Offset L = 4;\n+\n+  slot_8_bit slot = (Slots_Ptr + (Node_Offsets_Ptr[N] + Offset / L))->slot_8;\n \n-    switch (Offset%L)\n+  switch (Offset % L)\n     {\n     case 0: return slot.f0;\n     case 1: return slot.f1;\n     case 2: return slot.f2;\n     case 3: return slot.f3;\n-    default: gcc_assert(false);\n+    default: gcc_unreachable ();\n     }\n }\n \n INLINE Union_Id\n-Get_32_Bit_Field(Node_Id N, Field_Offset Offset)\n+Get_32_Bit_Field (Node_Id N, Field_Offset Offset)\n {\n-    const Field_Offset L = 1;\n-    slot_32_bit slot = (Slots_Ptr + (Node_Offsets_Ptr[N] + Offset/L))->slot_32;\n-    return slot;\n+  const Field_Offset L = 1;\n+\n+  slot_32_bit slot = (Slots_Ptr + (Node_Offsets_Ptr[N] + Offset / L))->slot_32;\n+\n+  return slot;\n }\n \n INLINE Union_Id\n-Get_32_Bit_Field_With_Default(Node_Id N, Field_Offset Offset, Union_Id Default_Value)\n+Get_32_Bit_Field_With_Default (Node_Id N, Field_Offset Offset,\n+\t\t\t       Union_Id Default_Value)\n {\n-    const Field_Offset L = 1;\n-    slot_32_bit slot = (Slots_Ptr + (Node_Offsets_Ptr[N] + Offset/L))->slot_32;\n+  const Field_Offset L = 1;\n \n-    if (slot == Empty)\n-    {\n-        return Default_Value;\n-    }\n+  slot_32_bit slot = (Slots_Ptr + (Node_Offsets_Ptr[N] + Offset / L))->slot_32;\n \n-    return slot;\n+  return slot == Empty ? Default_Value : slot;\n }\n \n #ifdef __cplusplus"}]}