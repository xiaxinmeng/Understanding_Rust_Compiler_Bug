{"sha": "6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NmVmNTIzMWJkZjUyYWJhMDg1NDQ5MWQyNGFiMzBiZWJkOGYyYWIwYQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-09-05T20:45:27Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2007-09-05T20:45:27Z"}, "message": "builtins.def (BUILT_IN_VA_ARG_PACK): New built-in.\n\n\t* builtins.def (BUILT_IN_VA_ARG_PACK): New built-in.\n\t* tree.h (CALL_EXPR_VA_ARG_PACK): Define.\n\t* tree-inline.h (copy_body_data): Add call_expr field.\n\t* tree-inline.c (expand_call_inline): Initialize call_expr.\n\t(copy_bb): Append anonymous inline fn arguments to arguments\n\twhen inlining a CALL_EXPR_VA_ARG_PACK call.\n\t* builtins.c (expand_builtin): Issue an error if\n\tBUILT_IN_VA_ARG_PACK is seen during expand.\n\t(fold_call_expr, fold_builtin_call_array): Don't fold\n\tCALL_EXPR_VA_ARG_PACK CALL_EXPRs or calls with\n\t__builtin_va_arg_pack () call as last argument.\n\t* gimplify.c (gimplify_call_expr): If last argument to a vararg\n\tfunction is __builtin_va_arg_pack (), decrease number of call\n\targuments and instead set CALL_EXPR_VA_ARG_PACK on the CALL_EXPR.\n\t* expr.c (expand_expr_real_1): Issue an error if\n\tCALL_EXPR_VA_ARG_PACK CALL_EXPR is seen during expand.\n\t* tree-pretty-print.c (dump_generic_node): Handle printing\n\tCALL_EXPR_VA_ARG_PACK bit on CALL_EXPRs.\n\t* doc/extend.texi (__builtin_va_arg_pack): Document.\n\n\t* gcc.c-torture/execute/va-arg-pack-1.c: New test.\n\t* gcc.dg/va-arg-pack-1.c: New test.\n\nFrom-SVN: r128150", "tree": {"sha": "0065cd65b39b8419a3be598915506370819405f7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/0065cd65b39b8419a3be598915506370819405f7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/comments", "author": null, "committer": null, "parents": [{"sha": "e050d7958c2fc910926d046fe1e72a513a580489", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e050d7958c2fc910926d046fe1e72a513a580489", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e050d7958c2fc910926d046fe1e72a513a580489"}], "stats": {"total": 513, "additions": 457, "deletions": 56}, "files": [{"sha": "ea2f73f8ed389f9afe50cbecea0800c95604fc33", "filename": "gcc/ChangeLog", "status": "modified", "additions": 72, "deletions": 50, "changes": 122, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "patch": "@@ -1,3 +1,25 @@\n+2007-09-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* builtins.def (BUILT_IN_VA_ARG_PACK): New built-in.\n+\t* tree.h (CALL_EXPR_VA_ARG_PACK): Define.\n+\t* tree-inline.h (copy_body_data): Add call_expr field.\n+\t* tree-inline.c (expand_call_inline): Initialize call_expr.\n+\t(copy_bb): Append anonymous inline fn arguments to arguments\n+\twhen inlining a CALL_EXPR_VA_ARG_PACK call.\n+\t* builtins.c (expand_builtin): Issue an error if\n+\tBUILT_IN_VA_ARG_PACK is seen during expand.\n+\t(fold_call_expr, fold_builtin_call_array): Don't fold\n+\tCALL_EXPR_VA_ARG_PACK CALL_EXPRs or calls with\n+\t__builtin_va_arg_pack () call as last argument.\n+\t* gimplify.c (gimplify_call_expr): If last argument to a vararg\n+\tfunction is __builtin_va_arg_pack (), decrease number of call\n+\targuments and instead set CALL_EXPR_VA_ARG_PACK on the CALL_EXPR.\n+\t* expr.c (expand_expr_real_1): Issue an error if\n+\tCALL_EXPR_VA_ARG_PACK CALL_EXPR is seen during expand.\n+\t* tree-pretty-print.c (dump_generic_node): Handle printing\n+\tCALL_EXPR_VA_ARG_PACK bit on CALL_EXPRs.\n+\t* doc/extend.texi (__builtin_va_arg_pack): Document.\n+\n 2007-09-05  Adam Nemet  <anemet@caviumnetworks.com>\n \n \tPR tree-optimization/21513\n@@ -92,7 +114,7 @@\n \t(was_mips16_p): New.\n \t(mips_set_mips16_mode): New, split out from override_options.\n \t(mips_set_current_function): New.\n-\t(override_options):  Add sorry for unsupported mips16/pic\n+\t(override_options): Add sorry for unsupported mips16/pic\n \tcombination.  Remove error for mips16/dsp combination.\tSave\n \tbase option settings.  \n \t(mips_file_start): Move mips16 mode setting output from here....\n@@ -114,7 +136,7 @@\n \n \t* config/mips/mips.c (mips_legitimize_tls_address): Call sorry\n \tif we encounter TLS address in MIPS16 mode.\n-\t(mips_legitimize_const_move):  Check cannot_force_const_mem for\n+\t(mips_legitimize_const_move): Check cannot_force_const_mem for\n \tthe (const (plus symbol offset)) case; this forces invalid TLS\n \taddress in MIPS16 mode to be caught by the above call to sorry.\n \t(override_options): Don't reset targetm.have_tls in MIPS16 mode,\n@@ -134,7 +156,7 @@\n \t* function.h: Here.\n \t(set_cfun): Declare.\n \t* tree-inline.c (cfun_stack, push_cfun, pop_cfun): Moved to...\n-\t* function.c:  Here.\n+\t* function.c: Here.\n \t(push_function_context_to): Use allocate_struct_function\n \tto create null context, not init_dummy_function_start.  Use set_cfun.\n \t(pop_function_context_from): Use set_cfun.\n@@ -168,7 +190,7 @@\n \n 2007-09-05  Kenneth Zadeck <zadeck@naturalbridge.com>\n \n-\t* regrename.c (rerename_optimize):  Use deferred rescanning and\n+\t* regrename.c (rerename_optimize): Use deferred rescanning and\n \tinsert explicit calls to rescan insns when changed.\n \t\n 2007-09-05  Jan Hubicka  <jh@suse.cz>\n@@ -1178,9 +1200,9 @@\n \n \t* toplev.c (init_alignments): New, split out from...\n \t(process_options): ...here.\n-\t(backend_init_target):  New, split out from...\n+\t(backend_init_target): New, split out from...\n \t(backend_init): ...here.\n-\t(lang_dependent_init_target):  New, split out from...\n+\t(lang_dependent_init_target): New, split out from...\n \t(lang_dependent_init): ...here.\n \t(target_reinit): New.\n \t* toplev.h (target_reinit): Declare.\n@@ -3338,7 +3360,7 @@\n \n 2007-08-11  David Daney  <ddaney@avtrex.com>\n \n-\t* config/mips/mips.c (mips_sched_reorder):  Mark cycle parameter\n+\t* config/mips/mips.c (mips_sched_reorder): Mark cycle parameter\n \tas ATTRIBUTE_UNUSED.\n \n 2007-08-11  David Edelsohn  <edelsohn@gnu.org>\n@@ -3514,17 +3536,17 @@\n \n 2007-08-09  Sandra Loosemore  <sandra@codesourcery.com>\n \n-\t* config/mips/mips.opt (mhard-float, msoft-float):  Make these\n+\t* config/mips/mips.opt (mhard-float, msoft-float): Make these\n \tcontrol TARGET_HARD_FLOAT_ABI and TARGET_SOFT_FLOAT_ABI, rather\n \tthan TARGET_HARD_FLOAT and TARGET_SOFT_FLOAT.  \n \t* config/mips/mips.h (mips16_hard_float): Delete.\n-\t(TARGET_HARD_FLOAT_ABI, TARGET_SOFT_FLOAT_ABI):  Delete these\n+\t(TARGET_HARD_FLOAT_ABI, TARGET_SOFT_FLOAT_ABI): Delete these\n \tdefinitions, and replace with....\n \t(TARGET_HARD_FLOAT, TARGET_SOFT_FLOAT): Define.\n \t* config/mips/mips.c (mips16_hard_float): Delete.  Replace\n \tall references with (TARGET_MIPS16 && TARGET_HARD_FLOAT_ABI).\n \t(MIPS_MARCH_CONTROLS_SOFT_FLOAT): Update comments.\n-\t(override_options):  Replace MASK_SOFT_FLOAT references with\n+\t(override_options): Replace MASK_SOFT_FLOAT references with\n \tMASK_SOFT_FLOAT_ABI.  Delete twiddling with MASK_SOFT_FLOAT\n \tand mips16_hard_float when TARGET_MIPS16.\n \t\n@@ -3562,7 +3584,7 @@\n \ttri-state integer.\n \t* optabs.c (expand_ffs, expand_ctz): New functions to compute\n \tffs and ctz using clz.\n-\t(expand_unop):  Call them.\n+\t(expand_unop): Call them.\n \t* config/rs6000/rs6000.h (CLZ_DEFINED_VALUE_AT_ZERO): Fix its\n \tresult value.\n \t(CTZ_DEFINED_VALUE_AT_ZERO): Likewise.\n@@ -4687,7 +4709,7 @@\n \n 2007-08-01  Sandra Loosemore  <sandra@codesourcery.com>\n \n-\t* reload.c (find_reloads_address_part):  Pass correct MEMREFLOC\n+\t* reload.c (find_reloads_address_part): Pass correct MEMREFLOC\n \targument to find_reloads_address.\n \n 2007-08-01  Daniel Jacobowitz  <dan@codesourcery.com>\n@@ -4846,7 +4868,7 @@\n \n 2007-07-31  Sandra Loosemore  <sandra@codesourcery.com>\n \n-\t* config/mips/mips.h (ISA_HAS_SYNCI):  Add !TARGET_MIPS16 test.\n+\t* config/mips/mips.h (ISA_HAS_SYNCI): Add !TARGET_MIPS16 test.\n \n 2007-07-31  Revital Eres  <eres@il.ibm.com>\n \n@@ -6228,7 +6250,7 @@\n \n 2007-07-18  Caroline Tice  <ctice@apple.com>\n \t\n-\t* var-tracking.c (find_src_status):  Check for  COND_EXEC insns\n+\t* var-tracking.c (find_src_status): Check for  COND_EXEC insns\n \tand handle them correctly; check that src is not NULL before\n \ttrying to use it.\n \t(find_src_set_src): Likewise.\n@@ -6392,7 +6414,7 @@\n 2007-07-16  Sandra Loosemore  <sandra@codesourcery.com>\n \t    Nigel Stephens  <nigel@mips.com>\n \n-\t* config/mips/mips.md:  Include 20kc.md.\n+\t* config/mips/mips.md: Include 20kc.md.\n \t* config/mips/20kc.md: New file.\n \t* config/mips/mips.c (mips_rtx_cost_data): Fill in 20Kc costs.\n \t(mips_adjust_cost): Tweak for 20Kc.\n@@ -8876,7 +8898,7 @@\n \t* df-problems.c (df_ru_alloc, df_rd_alloc, df_lr_alloc,\n \tdf_live_alloc, df_urec_alloc, df_note_alloc): set optional_p.\n \t(problem_RU, problem_RD, problem_LR, problem_UREC, problem_CHAIN,\n-\tproblem_NOTE):  Initialize free_blocks_on_set_blocks.\n+\tproblem_NOTE): Initialize free_blocks_on_set_blocks.\n \t(df_lr_bb_local_compute): Recompute luids if df_live problem is\n \tnot active.\n \t(df_live_set_all_dirty, df_note_alloc): New function.\n@@ -9341,7 +9363,7 @@\n \t* tree-ssa.c (tree_ssa_useless_type_conversion_1):\n \tConvert the MIN/MAX of the inner type to the outer\n \ttype before comparing them.\n-\t* tree-ssa-loop-prefetch.c (idx_analyze_ref):  Handle\n+\t* tree-ssa-loop-prefetch.c (idx_analyze_ref): Handle\n \tPOINTER_PLUS_EXPR instead of PLUS_EXPR.\n \t(issue_prefetch_ref): Create a POINTER_PLUS_EXPR instead\n \tof PLUS_EXPR for pointers.\n@@ -10916,7 +10938,7 @@\n \t* config/mn10300/mn10300.md: Include.\n \t* config/mn10300/mn10300.c(mn10300_secondary_reload_class):\n \tFix up for removed macro.\n-\t* config/mn10300/predicates.md (call_address_operand):  Ditto.\n+\t* config/mn10300/predicates.md (call_address_operand): Ditto.\n \t* config/mn10300/mn10300.h (REG_CLASS_FROM_LETTER): Delete.\n \t(CONST_OK_FOR_I): Ditto.\n \t(CONST_OK_FOR_J): Ditto.\n@@ -11279,10 +11301,10 @@\n \t* doc/extend.texi (Function Attributes): Document MIPS \"near\" and\n \t\"far\" attributes.\n \n-\t* testsuite/gcc.target/mips/near-far-1.c:  New test case.\n-\t* testsuite/gcc.target/mips/near-far-2.c:  New test case.\n-\t* testsuite/gcc.target/mips/near-far-3.c:  New test case.\n-\t* testsuite/gcc.target/mips/near-far-4.c:  New test case.\n+\t* testsuite/gcc.target/mips/near-far-1.c: New test case.\n+\t* testsuite/gcc.target/mips/near-far-2.c: New test case.\n+\t* testsuite/gcc.target/mips/near-far-3.c: New test case.\n+\t* testsuite/gcc.target/mips/near-far-4.c: New test case.\n \n 2007-05-25  Eric Christopher  <echristo@apple.com>\n \n@@ -11444,7 +11466,7 @@\n \tstmt_dominates_stmt_p, get_lsm_tmp_name): Declare.\n \t* Makefile.in (tree-predcom.o): Add.\n \t(tree-affine.o): Add TREE_GIMPLE_H dependency.\n-\t* passes.c (init_optimization_passes):  Add dceloop after\n+\t* passes.c (init_optimization_passes): Add dceloop after\n \tcopy propagation in loop optimizer.  Add predictive commoning\n \tto loop optimizer passes.\n \n@@ -12692,7 +12714,7 @@\n \n 2007-05-14  Dave Korn  <dave.korn@artimi.com>\n \n-\t* genautomata.c (gen_regexp_el):  Allocate correct size for regexp.\n+\t* genautomata.c (gen_regexp_el): Allocate correct size for regexp.\n \n 2007-05-14  Rafael Avila de Espindola  <espindola@google.com>\n \n@@ -13905,7 +13927,7 @@\n \n 2007-04-26  Steve Ellcey  <sje@cup.hp.com>\n \n-\t* config/ia64/ia64.md (ip_value):  Fix itanium_class attribute.\n+\t* config/ia64/ia64.md (ip_value): Fix itanium_class attribute.\n \n 2007-04-26  Richard Guenther  <rguenther@suse.de>\n \n@@ -14219,7 +14241,7 @@\n \t(create_phi_node): Use set_phi_nodes.\n \t* omp-low.c (expand_omp_parallel): Use bb_stmt_list.\n \t* tree-if-conv.c (process_phi_nodes): Use set_phi_nodes.\n-\t(combine_blocks):  Use bb_stmt_list and set_bb_stmt_list.\n+\t(combine_blocks): Use bb_stmt_list and set_bb_stmt_list.\n \t* tree-flow-inline.h (phi_nodes, set_phi_nodes,\n \t(bsi_start, bsi_last): Use bb_stmt_list.\n \t(phi_nodes_ptr, bb_stmt_list, set_bb_stmt_list): New functions.\n@@ -14788,7 +14810,7 @@\n \t* tree-ssa-loop-ivopts.c (ivopts_global_cost_for_size): Use\n \testimate_reg_pressure_cost.  Add number of ivs.\n \t(determine_set_costs): Dump target_reg_cost.\n-\t* loop-invariant.c (gain_for_invariant):  Use\n+\t* loop-invariant.c (gain_for_invariant): Use\n \testimate_reg_pressure_cost.  Removed n_inv_uses argument.\n \t(best_gain_for_invariant, find_invariants_to_move): Remove\n \tn_inv_uses.\n@@ -15663,7 +15685,7 @@\n 2007-04-07  Bruce Korb  <bkorb@gnu.org>\n \n \t* c.opt: Add -Wformat-contains-nul.\n-\t* c-format.c (set_Wformat):  Set warn_format_contains_nul to the\n+\t* c-format.c (set_Wformat): Set warn_format_contains_nul to the\n \t  -Wformat setting.\n \t(check_format_info_main): Check OPT_Wformat_contains_nul before emitting\n \tthe NUL byte warning.\n@@ -15689,7 +15711,7 @@\n \targument \"reliable\".\n \t(infer_loop_bounds_from_ref, infer_loop_bounds_from_array):\n \tAdd argument \"reliable\".  Propagate it through calls.\n-\t(infer_loop_bounds_from_undefined):  Derive number of iterations\n+\t(infer_loop_bounds_from_undefined): Derive number of iterations\n \testimates from references in blocks that do not dominate loop latch.\n \t(gcov_type_to_double_int): New function.\n \t(estimate_numbers_of_iterations_loop): Use gcov_type_to_double_int\n@@ -17893,7 +17915,7 @@\n \t(dsp_32only_bdesc): New description table for 32-bit only DSP REV 1\n \tand 2 builtins.\n \t(bdesc_map): Add one field of unsupported_target_flags.\n-\t(bdesc_arrays):  Update entries to have extra fields.  Add\n+\t(bdesc_arrays): Update entries to have extra fields.  Add\n \tdsp_32only_bdesc.\n \t(mips_init_builtins): Initialize new function types.\n \tCheck unsupported_target_fileds to filter out builtins.\n@@ -18896,7 +18918,7 @@\n \n 2007-03-01  Zdenek Dvorak  <dvorakz@suse.cz>\n \n-\t* tree-ssa-loop-prefetch.c (determine_unroll_factor):  Bound the\n+\t* tree-ssa-loop-prefetch.c (determine_unroll_factor): Bound the\n \tunroll factor by the estimated number of iterations.\n \t(loop_prefetch_arrays): Do not prefetch in loops that iterate less\n \tthan prefetch latency.\n@@ -19352,7 +19374,7 @@\n 2007-02-23  Steve Ellcey  <sje@cup.hp.com>\n \n \tPR debug/29614\n-\t* varpool.c (varpool_assemble_pending_decls):  Set\n+\t* varpool.c (varpool_assemble_pending_decls): Set\n \tvarpool_last_needed_node to null.\n \n 2007-02-23  DJ Delorie  <dj@redhat.com>\n@@ -19456,8 +19478,8 @@\n \t* config/spu/spu-protos.h (spu_init_expanders): Declare.\n \t* config/spu/spu.c (spu_expand_prologue): Set REGNO_POINTER_ALIGN for\n \tHARD_FRAME_POINTER_REGNUM.\n-\t(spu_legitimate_address):  Use regno_aligned_for_reload.\n-\t(regno_aligned_for_load):  HARD_FRAME_POINTER_REGNUM is only 16 byte\n+\t(spu_legitimate_address): Use regno_aligned_for_reload.\n+\t(regno_aligned_for_load): HARD_FRAME_POINTER_REGNUM is only 16 byte\n \taligned when frame_pointer_needed is true.\n \t(spu_init_expanders): New.  Set alignment of HARD_FRAME_POINTER_REGNUM\n \tto 8 bits.\n@@ -19473,7 +19495,7 @@\n \trotqmbi_<mode>, rotqmby_<mode>, ashr<mode>3, rotma_<mode>,\n \trotl<mode>3, rotlti3, rotqbybi_ti, rotqby_ti, rotqbi_ti): Use\n \tspu_nonmem_operand instead of spu_shift_operands.  Use new modifiers.\n-\t(lshr<mode>3_reg):  Fix rtl description.\n+\t(lshr<mode>3_reg): Fix rtl description.\n \n \tMake sure mulhisi immediate operands are valid.\n \t* config/spu/predicates.md (imm_K_operand): Add.\n@@ -19488,7 +19510,7 @@\n \t* config/spu/spu.c (print_operand): Handle HIGH correctly.\n \t(spu_split_immediate): Split CONST_VECTORs with -mlarge-mem.\n \t(immediate_load_p): Allow symbols that use 2 instructions to create.\n-\t(classify_immediate, spu_builtin_splats):  Don't accept a CONST_VECTOR\n+\t(classify_immediate, spu_builtin_splats): Don't accept a CONST_VECTOR\n \twith symbols when flag_pic is set.\n \t(const_vector_immediate_p): New.\n \t(logical_immediate_p, iohl_immediate_p, arith_immediate_p): Don't\n@@ -19531,14 +19553,14 @@\n \t* config/spu/spu_internals.h: Ditto.\n \n \tFix incorrect operand modifiers.\n-\t* config/spu/spu-builtins.md (spu_mpy, spu_mpyu):  Remove use of %H.\n-\t* config/spu/spu.md (xor<mode>3):  Change %S to %J.\n+\t* config/spu/spu-builtins.md (spu_mpy, spu_mpyu): Remove use of %H.\n+\t* config/spu/spu.md (xor<mode>3): Change %S to %J.\n \n \tOptimize one case of zero_extend of a vec_select.\n-\t* config/spu/spu.md (_vec_extractv8hi_ze):  Add.\n+\t* config/spu/spu.md (_vec_extractv8hi_ze): Add.\n \n \tAccept any immediate for hbr.\n-\t* config/spu/spu.md (hbr):  Change s constraints to i.\n+\t* config/spu/spu.md (hbr): Change s constraints to i.\n \n 2007-02-21  Paul Brook  <paul@codesourcery.com>\n \n@@ -19843,7 +19865,7 @@\n 2007-02-18  Roger Sayle  <roger@eyesopen.com>\n \n \tPR rtl-optimization/28173\n-\t* simplify-rtx.c (simplify_binary_operation_1) <IOR>:  Optimize\n+\t* simplify-rtx.c (simplify_binary_operation_1) <IOR>: Optimize\n \t(X & C1) | C2 as C2 when (C1 & C2) == C1 and X has no side-effects.\n \tOptimize (X & C1) | C2 as X | C2 when (C1 | C2) == ~0.\n \tCanonicalize (X & C1) | C2 as (X & (C1 & ~C2)) | C2.\n@@ -20275,7 +20297,7 @@\n \tof an arglist.  Change return type to bool.  Use new CALL_EXPR\n \taccessors.\n \n-\t(fold_builtin_strstr):  Pass call arguments individually instead\n+\t(fold_builtin_strstr): Pass call arguments individually instead\n \tof as an arglist, fixing callers appropriately.  Use new CALL_EXPR\n \taccessors and constructors.  Return NULL_TREE instead of 0.\n \t(fold_builtin_strchr): Likewise.\n@@ -20320,7 +20342,7 @@\n \t(fold_ternary): Remove CALL_EXPR case, since they are no longer\n \tternary expressions.\n \t(fold): Add logic for tcc_vl_exp.\n-\t(fold_checksum_tree):  Make it know about tcc_vl_exp.  Use\n+\t(fold_checksum_tree): Make it know about tcc_vl_exp.  Use\n \tTREE_OPERAND_LENGTH instead of TREE_CODE_LENGTH.\n \t(fold_build3_stat): Add assertion to flag broken interface for\n \tconstructing CALL_EXPRs.\n@@ -20350,7 +20372,7 @@\n \t* tree-vrp.c (stmt_interesting_for_vrp): Use new CALL_EXPR accessors.\n \t(vrp_visit_stmt): Likewise.\n \n-\t* tree-ssa-loop-im.c (outermost_invariant_loop_expr):  Make it\n+\t* tree-ssa-loop-im.c (outermost_invariant_loop_expr): Make it\n \tknow about tcc_vl_exp.  Use TREE_OPERAND_LENGTH instead of\n \tTREE_CODE_LENGTH.\n \t(force_move_till_expr): Likewise.\n@@ -20544,7 +20566,7 @@\n \t(estimate_num_insns_1): Use new CALL_EXPR accessors.\n \t(expand_call_inline): Tidy up call to initialize_inlined_parameters.\n \n-\t* tree-vect-transform.c (vect_create_epilog_for_reduction):  Use\n+\t* tree-vect-transform.c (vect_create_epilog_for_reduction): Use\n \tTREE_OPERAND_LENGTH instead of TREE_CODE_LENGTH.\n \t(vectorizable_reduction): Likewise.\n \t(vectorizable_call): Use new CALL_EXPR iterators.\n@@ -20647,7 +20669,7 @@\n \t(arm_expand_unop_builtin): Likewise.\n \t(arm_expand_builtin): Use new CALL_EXPR accessors.\n \n-\t* config/mips/mips.c (mips_expand_builtin):  Use new CALL_EXPR\n+\t* config/mips/mips.c (mips_expand_builtin): Use new CALL_EXPR\n \taccessors.\n \n \t* config/bfin/bfin.c (bfin_expand_binop_builtin): Pass entire\n@@ -22819,7 +22841,7 @@\n \t* tree-data-ref.c (tree_fold_divides_p): Don't use tree_fold_gcd to\n \ttest whether one constant integer is a multiple of another.  Instead\n \tcall int_const_binop with TRUNC_MOD_EXPR and test for a zero result.\n-\t* fold-const.c (multiple_of_p):  We've determined both TOP and\n+\t* fold-const.c (multiple_of_p): We've determined both TOP and\n \tBOTTOM are integer constants so we can call int_const_binop directly\n \tinstead of the more generic const_binop.\n \n@@ -22962,7 +22984,7 @@\n \n \tPR other/30182\n \t* config/pa/pa.c (pa_init_builtins): Set asm names for finite routines.\n-\t* config/ia64/ia64.c (ia64_init_builtins):  Ditto.\n+\t* config/ia64/ia64.c (ia64_init_builtins): Ditto.\n \n 2007-01-25  Richard Guenther  <rguenther@suse.de>\n \n@@ -23505,7 +23527,7 @@\n \t* longlong.h (count_leading_zeros, COUNT_LEADING_ZEROS_0): Add\n \tColdFire alternatives.\n \t* config/m68k/m68k.h (CLZ_DEFINED_VALUE_AT_ZERO): New macro.\n-\t* config/m68k/m68k.md (clzsi2):  Define for ColdFire\n+\t* config/m68k/m68k.md (clzsi2): Define for ColdFire\n \tarchitectures that support ff1 instruction.\n \n 2007-01-19  Richard Sandiford  <richard@codesourcery.com>\n@@ -25667,7 +25689,7 @@\n \n 2007-01-02  Steve Ellcey  <sje@cup.hp.com>\n \n-\t* sbitmap.c (HOST_BITS_PER_LONG_LONG):  Change to\n+\t* sbitmap.c (HOST_BITS_PER_LONG_LONG): Change to\n \tHOST_BITS_PER_LONGLONG\n \n 2007-01-02  Manuel Lopez-Ibanez <manu@gcc.gnu.org>"}, {"sha": "566e1cc2e1b883038440f559e506b67a85af44e4", "filename": "gcc/builtins.c", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Fbuiltins.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Fbuiltins.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.c?ref=6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "patch": "@@ -6270,6 +6270,12 @@ expand_builtin (tree exp, rtx target, rtx subtarget, enum machine_mode mode,\n     case BUILT_IN_ARGS_INFO:\n       return expand_builtin_args_info (exp);\n \n+    case BUILT_IN_VA_ARG_PACK:\n+      /* All valid uses of __builtin_va_arg_pack () are removed during\n+\t inlining.  */\n+      error (\"invalid use of %<__builtin_va_arg_pack ()%>\");\n+      return const0_rtx;\n+\n       /* Return the address of the first anonymous stack arg.  */\n     case BUILT_IN_NEXT_ARG:\n       if (fold_builtin_next_arg (exp, false))\n@@ -10472,14 +10478,32 @@ fold_call_expr (tree exp, bool ignore)\n   tree fndecl = get_callee_fndecl (exp);\n   if (fndecl\n       && TREE_CODE (fndecl) == FUNCTION_DECL\n-      && DECL_BUILT_IN (fndecl))\n-    {\n+      && DECL_BUILT_IN (fndecl)\n+      /* If CALL_EXPR_VA_ARG_PACK is set, the arguments aren't finalized\n+\t yet.  Defer folding until we see all the arguments\n+\t (after inlining).  */\n+      && !CALL_EXPR_VA_ARG_PACK (exp))\n+    {\n+      int nargs = call_expr_nargs (exp);\n+\n+      /* Before gimplification CALL_EXPR_VA_ARG_PACK is not set, but\n+\t instead last argument is __builtin_va_arg_pack ().  Defer folding\n+\t even in that case, until arguments are finalized.  */\n+      if (nargs && TREE_CODE (CALL_EXPR_ARG (exp, nargs - 1)) == CALL_EXPR)\n+\t{\n+\t  tree fndecl2 = get_callee_fndecl (CALL_EXPR_ARG (exp, nargs - 1));\n+\t  if (fndecl2\n+\t      && TREE_CODE (fndecl2) == FUNCTION_DECL\n+\t      && DECL_BUILT_IN_CLASS (fndecl2) == BUILT_IN_NORMAL\n+\t      && DECL_FUNCTION_CODE (fndecl2) == BUILT_IN_VA_ARG_PACK)\n+\t    return NULL_TREE;\n+\t}\n+\n       /* FIXME: Don't use a list in this interface.  */\n       if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n \t  return targetm.fold_builtin (fndecl, CALL_EXPR_ARGS (exp), ignore);\n       else\n \t{\n-\t  int nargs = call_expr_nargs (exp);\n \t  if (nargs <= MAX_ARGS_TO_FOLD_BUILTIN)\n \t    {\n \t      tree *args = CALL_EXPR_ARGP (exp);\n@@ -10565,6 +10589,17 @@ fold_builtin_call_array (tree type,\n     if (TREE_CODE (fndecl) == FUNCTION_DECL\n         && DECL_BUILT_IN (fndecl))\n       {\n+\t/* If last argument is __builtin_va_arg_pack (), arguments to this\n+\t   function are not finalized yet.  Defer folding until they are.  */\n+\tif (n && TREE_CODE (argarray[n - 1]) == CALL_EXPR)\n+\t  {\n+\t    tree fndecl2 = get_callee_fndecl (argarray[n - 1]);\n+\t    if (fndecl2\n+\t\t&& TREE_CODE (fndecl2) == FUNCTION_DECL\n+\t\t&& DECL_BUILT_IN_CLASS (fndecl2) == BUILT_IN_NORMAL\n+\t\t&& DECL_FUNCTION_CODE (fndecl2) == BUILT_IN_VA_ARG_PACK)\n+\t      return build_call_array (type, fn, n, argarray);\n+\t  }\n         if (DECL_BUILT_IN_CLASS (fndecl) == BUILT_IN_MD)\n           {\n             tree arglist = NULL_TREE;"}, {"sha": "01ba3b365877015a2c70ecbc65841c7564a8ed50", "filename": "gcc/builtins.def", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Fbuiltins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Fbuiltins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fbuiltins.def?ref=6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "patch": "@@ -701,6 +701,7 @@ DEF_GCC_BUILTIN        (BUILT_IN_UPDATE_SETJMP_BUF, \"update_setjmp_buf\", BT_FN_V\n DEF_GCC_BUILTIN        (BUILT_IN_VA_COPY, \"va_copy\", BT_FN_VOID_VALIST_REF_VALIST_ARG, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_VA_END, \"va_end\", BT_FN_VOID_VALIST_REF, ATTR_NULL)\n DEF_GCC_BUILTIN        (BUILT_IN_VA_START, \"va_start\", BT_FN_VOID_VALIST_REF_VAR, ATTR_NULL)\n+DEF_GCC_BUILTIN        (BUILT_IN_VA_ARG_PACK, \"va_arg_pack\", BT_FN_INT, ATTR_PURE_NOTHROW_LIST)\n DEF_EXT_LIB_BUILTIN    (BUILT_IN__EXIT, \"_exit\", BT_FN_VOID_INT, ATTR_NORETURN_NOTHROW_LIST)\n DEF_C99_BUILTIN        (BUILT_IN__EXIT2, \"_Exit\", BT_FN_VOID_INT, ATTR_NORETURN_NOTHROW_LIST)\n "}, {"sha": "9f306a44e484007d78958dfee6aee30e59d4738e", "filename": "gcc/doc/extend.texi", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Fdoc%2Fextend.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Fdoc%2Fextend.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fextend.texi?ref=6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "patch": "@@ -556,6 +556,32 @@ the containing function.  You should specify, for @var{result}, a value\n returned by @code{__builtin_apply}.\n @end deftypefn\n \n+@deftypefn {Built-in Function} __builtin_va_arg_pack ()\n+This built-in function represents all anonymous arguments of an inline\n+function.  It can be used only in inline functions which will be always\n+inlined, never compiled as a separate function, such as those using\n+@code{__attribute__ ((__always_inline__))} or\n+@code{__attribute__ ((__gnu_inline__))} extern inline functions.\n+It must be only passed as last argument to some other function\n+with variable arguments.  This is useful for writing small wrapper\n+inlines for variable argument functions, when using preprocessor\n+macros is undesirable.  For example:\n+@smallexample\n+extern int myprintf (FILE *f, const char *format, ...);\n+extern inline __attribute__ ((__gnu_inline__)) int\n+myprintf (FILE *f, const char *format, ...)\n+@{\n+  int r = fprintf (f, \"myprintf: \");\n+  if (r < 0)\n+    return r;\n+  int s = fprintf (f, format, __builtin_va_arg_pack ());\n+  if (s < 0)\n+    return s;\n+  return r + s;\n+@}\n+@end smallexample\n+@end deftypefn\n+\n @node Typeof\n @section Referring to a Type with @code{typeof}\n @findex typeof"}, {"sha": "054f4f13add7875b1cd66f3dbefc85558475146d", "filename": "gcc/expr.c", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Fexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Fexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fexpr.c?ref=6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "patch": "@@ -7935,6 +7935,10 @@ expand_expr_real_1 (tree exp, rtx target, enum machine_mode tmode,\n       return expand_expr (OBJ_TYPE_REF_EXPR (exp), target, tmode, modifier);\n \n     case CALL_EXPR:\n+      /* All valid uses of __builtin_va_arg_pack () are removed during\n+\t inlining.  */\n+      if (CALL_EXPR_VA_ARG_PACK (exp))\n+\terror (\"invalid use of %<__builtin_va_arg_pack ()%>\");\n       /* Check for a built-in function.  */\n       if (TREE_CODE (CALL_EXPR_FN (exp)) == ADDR_EXPR\n \t  && (TREE_CODE (TREE_OPERAND (CALL_EXPR_FN (exp), 0))"}, {"sha": "ee8ef09a10302269f97c69931424835657468a3e", "filename": "gcc/gimplify.c", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Fgimplify.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Fgimplify.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fgimplify.c?ref=6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "patch": "@@ -2170,8 +2170,50 @@ gimplify_call_expr (tree *expr_p, tree *pre_p, bool want_value)\n \t    }\n \t}\n     }\n-  else if (nargs != 0)\n-    CALL_CANNOT_INLINE_P (*expr_p) = 1;\n+  else\n+    {\n+      if (nargs != 0)\n+\tCALL_CANNOT_INLINE_P (*expr_p) = 1;\n+      i = 0;\n+      p = NULL_TREE;\n+    }\n+\n+  /* If the last argument is __builtin_va_arg_pack () and it is not\n+     passed as a named argument, decrease the number of CALL_EXPR\n+     arguments and set instead the CALL_EXPR_VA_ARG_PACK flag.  */\n+  if (!p\n+      && i < nargs\n+      && TREE_CODE (CALL_EXPR_ARG (*expr_p, nargs - 1)) == CALL_EXPR)\n+    {\n+      tree last_arg = CALL_EXPR_ARG (*expr_p, nargs - 1);\n+      tree last_arg_fndecl = get_callee_fndecl (last_arg);\n+\n+      if (last_arg_fndecl\n+\t  && TREE_CODE (last_arg_fndecl) == FUNCTION_DECL\n+\t  && DECL_BUILT_IN_CLASS (last_arg_fndecl) == BUILT_IN_NORMAL\n+\t  && DECL_FUNCTION_CODE (last_arg_fndecl) == BUILT_IN_VA_ARG_PACK)\n+\t{\n+\t  tree call = *expr_p;\n+\n+\t  --nargs;\n+\t  *expr_p = build_call_array (TREE_TYPE (call), CALL_EXPR_FN (call),\n+\t\t\t\t      nargs, CALL_EXPR_ARGP (call));\n+\t  /* Copy all CALL_EXPR flags, locus and block, except\n+\t     CALL_EXPR_VA_ARG_PACK flag.  */\n+\t  CALL_EXPR_STATIC_CHAIN (*expr_p) = CALL_EXPR_STATIC_CHAIN (call);\n+\t  CALL_EXPR_TAILCALL (*expr_p) = CALL_EXPR_TAILCALL (call);\n+\t  CALL_EXPR_RETURN_SLOT_OPT (*expr_p)\n+\t    = CALL_EXPR_RETURN_SLOT_OPT (call);\n+\t  CALL_FROM_THUNK_P (*expr_p) = CALL_FROM_THUNK_P (call);\n+\t  CALL_CANNOT_INLINE_P (*expr_p)\n+\t    = CALL_CANNOT_INLINE_P (call);\n+\t  TREE_NOTHROW (*expr_p) = TREE_NOTHROW (call);\n+\t  SET_EXPR_LOCUS (*expr_p, EXPR_LOCUS (call));\n+\t  TREE_BLOCK (*expr_p) = TREE_BLOCK (call);\n+\t  /* Set CALL_EXPR_VA_ARG_PACK.  */\n+\t  CALL_EXPR_VA_ARG_PACK (*expr_p) = 1;\n+\t}\n+    }\n \n   /* Finally, gimplify the function arguments.  */\n   for (i = (PUSH_ARGS_REVERSED ? nargs - 1 : 0);"}, {"sha": "7a2a20bd149acd6e6b21402b3a8f97e07eaf34c6", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "patch": "@@ -1,3 +1,8 @@\n+2007-09-05  Jakub Jelinek  <jakub@redhat.com>\n+\n+\t* gcc.c-torture/execute/va-arg-pack-1.c: New test.\n+\t* gcc.dg/va-arg-pack-1.c: New test.\n+\n 2007-09-05  Adam Nemet  <anemet@caviumnetworks.com>\n \n \t* gcc.dg/tree-ssa/builtin-expect-1.c: New test."}, {"sha": "baefe87582193d8a3b28318b84c985eb455e9666", "filename": "gcc/testsuite/gcc.c-torture/execute/va-arg-pack-1.c", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-pack-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-pack-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.c-torture%2Fexecute%2Fva-arg-pack-1.c?ref=6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "patch": "@@ -0,0 +1,143 @@\n+/* __builtin_va_arg_pack () builtin tests.  */\n+\n+#include <stdarg.h>\n+\n+extern void abort (void);\n+\n+int v1 = 8;\n+long int v2 = 3;\n+void *v3 = (void *) &v2;\n+struct A { char c[16]; } v4 = { \"foo\" };\n+long double v5 = 40;\n+char seen[20];\n+int cnt;\n+\n+__attribute__ ((noinline)) int\n+foo1 (int x, int y, ...)\n+{\n+  int i;\n+  long int l;\n+  void *v;\n+  struct A a;\n+  long double ld;\n+  va_list ap;\n+\n+  va_start (ap, y);\n+  if (x < 0 || x >= 20 || seen[x])\n+    abort ();\n+  seen[x] = ++cnt;\n+  if (y != 6)\n+    abort ();\n+  i = va_arg (ap, int);\n+  if (i != 5)\n+    abort ();\n+  switch (x)\n+    {\n+    case 0:\n+      i = va_arg (ap, int);\n+      if (i != 9 || v1 != 9)\n+\tabort ();\n+      a = va_arg (ap, struct A);\n+      if (__builtin_memcmp (a.c, v4.c, sizeof (a.c)) != 0)\n+\tabort ();\n+      v = (void *) va_arg (ap, struct A *);\n+      if (v != (void *) &v4)\n+\tabort ();\n+      l = va_arg (ap, long int);\n+      if (l != 3 || v2 != 4)\n+\tabort ();\n+      break;\n+    case 1:\n+      ld = va_arg (ap, long double);\n+      if (ld != 41 || v5 != ld)\n+\tabort ();\n+      i = va_arg (ap, int);\n+      if (i != 8)\n+\tabort ();\n+      v = va_arg (ap, void *);\n+      if (v != &v2)\n+\tabort ();\n+      break;\n+    case 2:\n+      break;\n+    default:\n+      abort ();\n+    }\n+  va_end (ap);\n+  return x;\n+}\n+\n+__attribute__ ((noinline)) int\n+foo2 (int x, int y, ...)\n+{\n+  long long int ll;\n+  void *v;\n+  struct A a, b;\n+  long double ld;\n+  va_list ap;\n+\n+  va_start (ap, y);\n+  if (x < 0 || x >= 20 || seen[x])\n+    abort ();\n+  seen[x] = ++cnt | 64;\n+  if (y != 10)\n+    abort ();\n+  switch (x)\n+    {\n+    case 11:\n+      break;\n+    case 12:\n+      ld = va_arg (ap, long double);\n+      if (ld != 41 || v5 != 40)\n+\tabort ();\n+      a = va_arg (ap, struct A);\n+      if (__builtin_memcmp (a.c, v4.c, sizeof (a.c)) != 0)\n+\tabort ();\n+      b = va_arg (ap, struct A);\n+      if (__builtin_memcmp (b.c, v4.c, sizeof (b.c)) != 0)\n+\tabort ();\n+      v = va_arg (ap, void *);\n+      if (v != &v2)\n+\tabort ();\n+      ll = va_arg (ap, long long int);\n+      if (ll != 16LL)\n+\tabort ();\n+      break;\n+    case 2:\n+      break;\n+    default:\n+      abort ();\n+    }\n+  va_end (ap);\n+  return x + 8;\n+}\n+\n+__attribute__ ((noinline)) int\n+foo3 (void)\n+{\n+  return 6;\n+}\n+\n+extern inline __attribute__ ((always_inline, gnu_inline)) int\n+bar (int x, ...)\n+{\n+  if (x < 10)\n+    return foo1 (x, foo3 (), 5, __builtin_va_arg_pack ());\n+  return foo2 (x, foo3 () + 4, __builtin_va_arg_pack ());\n+}\n+\n+int\n+main (void)\n+{\n+  if (bar (0, ++v1, v4, &v4, v2++) != 0)\n+    abort ();\n+  if (bar (1, ++v5, 8, v3) != 1)\n+    abort ();\n+  if (bar (2) != 2)\n+    abort ();\n+  if (bar (v1 + 2) != 19)\n+    abort ();\n+  if (bar (v1 + 3, v5--, v4, v4, v3, 16LL) != 20)\n+    abort ();\n+  return 0;\n+}"}, {"sha": "09ae97917e4a6f8164ce3ca12b4141383e129c87", "filename": "gcc/testsuite/gcc.dg/va-arg-pack-1.c", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-pack-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-pack-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fva-arg-pack-1.c?ref=6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "patch": "@@ -0,0 +1,52 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-O2\" } */\n+\n+int bar (int, const char *, int, ...);\n+int baz (int, const char *, long int);\n+\n+int\n+f1 (int x, ...)\n+{\n+  return bar (5, \"\", 6, __builtin_va_arg_pack ());\t/* { dg-error \"invalid use of\" } */\n+}\n+\n+extern inline __attribute__((always_inline)) int\n+f2 (int y, ...)\n+{\n+  return bar (y, \"\", __builtin_va_arg_pack ());\t\t/* { dg-error \"invalid use of\" } */\n+}\n+\n+extern inline __attribute__((always_inline)) int\n+f3 (int y, ...)\n+{\n+  return bar (y, \"\", 5, __builtin_va_arg_pack ());\n+}\n+\n+extern inline __attribute__((always_inline)) int\n+f4 (int y, ...)\n+{\n+  return bar (y, \"\", 4, __builtin_va_arg_pack (), 6);\t/* { dg-error \"invalid use of\" } */\n+}\n+\n+extern inline __attribute__((always_inline)) int\n+f5 (int y, ...)\n+{\n+  return baz (y, \"\", __builtin_va_arg_pack ());\t\t/* { dg-error \"invalid use of\" } */\n+}\n+\n+extern inline __attribute__((always_inline)) int\n+f6 (int y, ...)\n+{\n+  return __builtin_va_arg_pack ();\t\t\t/* { dg-error \"invalid use of\" } */\n+}\n+\n+int\n+test (void)\n+{\n+  int a = f2 (5, \"a\", 6);\n+  a += f3 (6, \"ab\", 17LL);\n+  a += f4 (7, 1, 2, 3);\n+  a += f5 (8, 7L);\n+  a += f6 (9);\n+  return a;\n+}"}, {"sha": "d49c3c8c49055b855090e48c09840fbbb92d634c", "filename": "gcc/tree-inline.c", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftree-inline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftree-inline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.c?ref=6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "patch": "@@ -815,9 +815,59 @@ copy_bb (copy_body_data *id, basic_block bb, int frequency_scale, int count_scal\n \t     into multiple statements, we need to process all of them.  */\n \t  while (!bsi_end_p (copy_bsi))\n \t    {\n-\t      stmt = bsi_stmt (copy_bsi);\n+\t      tree *stmtp = bsi_stmt_ptr (copy_bsi);\n+\t      tree stmt = *stmtp;\n \t      call = get_call_expr_in (stmt);\n \n+\t      if (call && CALL_EXPR_VA_ARG_PACK (call) && id->call_expr)\n+\t\t{\n+\t\t  /* __builtin_va_arg_pack () should be replaced by\n+\t\t     all arguments corresponding to ... in the caller.  */\n+\t\t  tree p, *argarray, new_call, *call_ptr;\n+\t\t  int nargs = call_expr_nargs (id->call_expr);\n+\n+\t\t  for (p = DECL_ARGUMENTS (id->src_fn); p; p = TREE_CHAIN (p))\n+\t\t    nargs--;\n+\n+\t\t  argarray = (tree *) alloca ((nargs + call_expr_nargs (call))\n+\t\t\t\t\t      * sizeof (tree));\n+\n+\t\t  memcpy (argarray, CALL_EXPR_ARGP (call),\n+\t\t\t  call_expr_nargs (call) * sizeof (*argarray));\n+\t\t  memcpy (argarray + call_expr_nargs (call),\n+\t\t\t  CALL_EXPR_ARGP (id->call_expr)\n+\t\t\t  + (call_expr_nargs (id->call_expr) - nargs),\n+\t\t\t  nargs * sizeof (*argarray));\n+\n+\t\t  new_call = build_call_array (TREE_TYPE (call),\n+\t\t\t\t\t       CALL_EXPR_FN (call),\n+\t\t\t\t\t       nargs + call_expr_nargs (call),\n+\t\t\t\t\t       argarray);\n+\t\t  /* Copy all CALL_EXPR flags, locus and block, except\n+\t\t     CALL_EXPR_VA_ARG_PACK flag.  */\n+\t\t  CALL_EXPR_STATIC_CHAIN (new_call)\n+\t\t    = CALL_EXPR_STATIC_CHAIN (call);\n+\t\t  CALL_EXPR_TAILCALL (new_call) = CALL_EXPR_TAILCALL (call);\n+\t\t  CALL_EXPR_RETURN_SLOT_OPT (new_call)\n+\t\t    = CALL_EXPR_RETURN_SLOT_OPT (call);\n+\t\t  CALL_FROM_THUNK_P (new_call) = CALL_FROM_THUNK_P (call);\n+\t\t  CALL_CANNOT_INLINE_P (new_call)\n+\t\t    = CALL_CANNOT_INLINE_P (call);\n+\t\t  TREE_NOTHROW (new_call) = TREE_NOTHROW (call);\n+\t\t  SET_EXPR_LOCUS (new_call, EXPR_LOCUS (call));\n+\t\t  TREE_BLOCK (new_call) = TREE_BLOCK (call);\n+\n+\t\t  call_ptr = stmtp;\n+\t\t  if (TREE_CODE (*call_ptr) == GIMPLE_MODIFY_STMT)\n+\t\t    call_ptr = &GIMPLE_STMT_OPERAND (*call_ptr, 1);\n+\t\t  if (TREE_CODE (*call_ptr) == WITH_SIZE_EXPR)\n+\t\t    call_ptr = &TREE_OPERAND (*call_ptr, 0);\n+\t\t  gcc_assert (*call_ptr == call);\n+\t\t  *call_ptr = new_call;\n+\t\t  stmt = *stmtp;\n+\t\t  update_stmt (stmt);\n+\t\t}\n+\n \t      /* Statements produced by inlining can be unfolded, especially\n \t\t when we constant propagated some operands.  We can't fold\n \t\t them right now for two reasons:\n@@ -2518,6 +2568,7 @@ expand_call_inline (basic_block bb, tree stmt, tree *tp, void *data)\n   id->src_fn = fn;\n   id->src_node = cg_edge->callee;\n   id->src_cfun = DECL_STRUCT_FUNCTION (fn);\n+  id->call_expr = t;\n \n   initialize_inlined_parameters (id, t, fn, bb);\n "}, {"sha": "1fa360ad3459ff1b82ad491a8812db5a7e3eab56", "filename": "gcc/tree-inline.h", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftree-inline.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftree-inline.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-inline.h?ref=6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "patch": "@@ -56,6 +56,10 @@ typedef struct copy_body_data\n   /* Current BLOCK.  */\n   tree block;\n \n+  /* CALL_EXPR if va arg parameter packs should be expanded or NULL\n+     is not.  */\n+  tree call_expr;\n+\n   /* Exception region the inlined call lie in.  */\n   int eh_region;\n   /* Take region number in the function being copied, add this value and"}, {"sha": "bc7ebf4ea79b84d63bb60ccb43a16ba6dc458b65", "filename": "gcc/tree-pretty-print.c", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftree-pretty-print.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftree-pretty-print.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-pretty-print.c?ref=6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "patch": "@@ -1228,6 +1228,15 @@ dump_generic_node (pretty_printer *buffer, tree node, int spc, int flags,\n \t      }\n \t  }\n       }\n+      if (CALL_EXPR_VA_ARG_PACK (node))\n+\t{\n+\t  if (call_expr_nargs (node) > 0)\n+\t    {\n+\t      pp_character (buffer, ',');\n+\t      pp_space (buffer);\n+\t    }\n+\t  pp_string (buffer, \"__builtin_va_arg_pack ()\");\n+\t}\n       pp_character (buffer, ')');\n \n       op1 = CALL_EXPR_STATIC_CHAIN (node);"}, {"sha": "c274fb6ec245382f660c4d7c7383b01dc40b5912", "filename": "gcc/tree.h", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/6ef5231bdf52aba0854491d24ab30bebd8f2ab0a/gcc%2Ftree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.h?ref=6ef5231bdf52aba0854491d24ab30bebd8f2ab0a", "patch": "@@ -464,6 +464,8 @@ struct gimple_stmt GTY(())\n            VAR_DECL or FUNCTION_DECL or IDENTIFIER_NODE\n        ASM_VOLATILE_P in\n            ASM_EXPR\n+       CALL_EXPR_VA_ARG_PACK in\n+\t  CALL_EXPR\n        TYPE_CACHED_VALUES_P in\n           ..._TYPE\n        SAVE_EXPR_RESOLVED_P in\n@@ -1222,6 +1224,11 @@ extern void omp_clause_range_check_failed (const_tree, const char *, int,\n #define SAVE_EXPR_RESOLVED_P(NODE) \\\n   (TREE_CHECK (NODE, SAVE_EXPR)->base.public_flag)\n \n+/* Set on a CALL_EXPR if this stdarg call should be passed the argument\n+   pack.  */\n+#define CALL_EXPR_VA_ARG_PACK(NODE) \\\n+  (CALL_EXPR_CHECK(NODE)->base.public_flag)\n+\n /* In any expression, decl, or constant, nonzero means it has side effects or\n    reevaluation of the whole expression could produce a different value.\n    This is set if any subexpression is a function call, a side effect or a"}]}