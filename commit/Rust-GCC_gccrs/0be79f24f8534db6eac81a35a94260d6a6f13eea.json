{"sha": "0be79f24f8534db6eac81a35a94260d6a6f13eea", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MGJlNzlmMjRmODUzNGRiNmVhYzgxYTM1YTk0MjYwZDZhNmYxM2VlYQ==", "commit": {"author": {"name": "Dorit Nuzman", "email": "dorit@il.ibm.com", "date": "2006-08-03T20:35:05Z"}, "committer": {"name": "Dorit Nuzman", "email": "dorit@gcc.gnu.org", "date": "2006-08-03T20:35:05Z"}, "message": "re PR middle-end/27770 (wrong code in spec tests for -ftree-vectorize -maltivec)\n\n        PR tree-optimization/27770\n        * tree-vectorizer.h (get_vectype_for_scalar_type): Function\n        declaration removed (moved to tree-flow.h).\n        (vect_can_force_dr_alignment_p): Likewise.\n        * tree-flow.h (get_vectype_for_scalar_type): New function declaration\n        (moved from tree-vectorizer.h).\n        (vect_can_force_dr_alignment_p): Likewise.\n        * tree-vectorizer.c (vect_print_dump_info): Allow calling this function\n        from outside the vectorizer - in particular from cgraph stage.\n        * tree-vect-analyze.c (vect_compute_data_ref_alignment): Don't increase\n        the alignment of global arrays when -fsection-anchors is enabled.\n        * cgraphunit.c (cgraph_increase_alignment): New function.\n        (cgraph_optimize): Call cgraph_increase_alignment.\n\nFrom-SVN: r115910", "tree": {"sha": "5600c4515b0df41a7300352395b0f3c145a96196", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5600c4515b0df41a7300352395b0f3c145a96196"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/0be79f24f8534db6eac81a35a94260d6a6f13eea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be79f24f8534db6eac81a35a94260d6a6f13eea", "html_url": "https://github.com/Rust-GCC/gccrs/commit/0be79f24f8534db6eac81a35a94260d6a6f13eea", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/0be79f24f8534db6eac81a35a94260d6a6f13eea/comments", "author": null, "committer": null, "parents": [{"sha": "224aaa4139918fa03e1a490f99bcb8bfb35c91be", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/224aaa4139918fa03e1a490f99bcb8bfb35c91be", "html_url": "https://github.com/Rust-GCC/gccrs/commit/224aaa4139918fa03e1a490f99bcb8bfb35c91be"}], "stats": {"total": 265, "additions": 263, "deletions": 2}, "files": [{"sha": "baafabfdc6403f063f0ff0387aace761ef03b259", "filename": "gcc/ChangeLog", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=0be79f24f8534db6eac81a35a94260d6a6f13eea", "patch": "@@ -1,3 +1,19 @@\n+2006-08-03  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+        PR tree-optimization/27770\n+        * tree-vectorizer.h (get_vectype_for_scalar_type): Function\n+        declaration removed (moved to tree-flow.h).\n+        (vect_can_force_dr_alignment_p): Likewise.\n+        * tree-flow.h (get_vectype_for_scalar_type): New function declaration\n+        (moved from tree-vectorizer.h).\n+        (vect_can_force_dr_alignment_p): Likewise.\n+        * tree-vectorizer.c (vect_print_dump_info): Allow calling this function\n+        from outside the vectorizer - in particular from cgraph stage.\n+        * tree-vect-analyze.c (vect_compute_data_ref_alignment): Don't increase\n+        the alignment of global arrays when -fsection-anchors is enabled.\n+        * cgraphunit.c (cgraph_increase_alignment): New function.\n+        (cgraph_optimize): Call cgraph_increase_alignment.\n+\n 2006-08-03  David Edelsohn  <edelsohn@gnu.org>\n \n \tPR target/27566"}, {"sha": "ddaecd3aa1c6a579f6770d327fc9cf52afcaac2d", "filename": "gcc/cgraphunit.c", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Fcgraphunit.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Fcgraphunit.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcgraphunit.c?ref=0be79f24f8534db6eac81a35a94260d6a6f13eea", "patch": "@@ -172,6 +172,7 @@ static void cgraph_mark_functions_to_output (void);\n static void cgraph_expand_function (struct cgraph_node *);\n static tree record_reference (tree *, int *, void *);\n static void cgraph_output_pending_asms (void);\n+static void cgraph_increase_alignment (void);\n \n /* Records tree nodes seen in record_reference.  Simply using\n    walk_tree_without_duplicates doesn't guarantee each node is visited\n@@ -1506,6 +1507,7 @@ cgraph_optimize (void)\n   /* This pass remove bodies of extern inline functions we never inlined.\n      Do this later so other IPA passes see what is really going on.  */\n   cgraph_remove_unreachable_nodes (false, dump_file);\n+  cgraph_increase_alignment ();\n   cgraph_global_info_ready = true;\n   if (cgraph_dump_file)\n     {\n@@ -1565,6 +1567,51 @@ cgraph_optimize (void)\n #endif\n }\n \n+/* Increase alignment of global arrays to improve vectorization potential.\n+   TODO:\n+   - Consider also structs that have an array field.\n+   - Use ipa analysis to prune arrays that can't be vectorized?\n+     This should involve global alignment analysis and in the future also\n+     array padding.  */\n+\n+static void\n+cgraph_increase_alignment (void)\n+{\n+  if (flag_section_anchors && flag_tree_vectorize)\n+    {\n+      struct cgraph_varpool_node *vnode;\n+\n+      /* Increase the alignment of all global arrays for vectorization.  */\n+      for (vnode = cgraph_varpool_nodes_queue;\n+           vnode;\n+           vnode = vnode->next_needed)\n+        {\n+          tree vectype, decl = vnode->decl;\n+          unsigned int alignment;\n+\n+          if (TREE_CODE (TREE_TYPE (decl)) != ARRAY_TYPE)\n+            continue;\n+          vectype = get_vectype_for_scalar_type (TREE_TYPE (TREE_TYPE (decl)));\n+          if (!vectype)\n+            continue;\n+          alignment = TYPE_ALIGN (vectype);\n+          if (DECL_ALIGN (decl) >= alignment)\n+            continue;\n+\n+          if (vect_can_force_dr_alignment_p (decl, alignment))\n+            { \n+              DECL_ALIGN (decl) = TYPE_ALIGN (vectype);\n+              DECL_USER_ALIGN (decl) = 1;\n+              if (cgraph_dump_file)\n+                { \n+                  fprintf (cgraph_dump_file, \"Increasing alignment of decl: \");\n+                  print_generic_expr (cgraph_dump_file, decl, TDF_SLIM);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n /* Generate and emit a static constructor or destructor.  WHICH must be\n    one of 'I' or 'D'.  BODY should be a STATEMENT_LIST containing\n    GENERIC statements.  */"}, {"sha": "a2256d5d2cf5e1ad59a61f3733977c37e0ecc33d", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=0be79f24f8534db6eac81a35a94260d6a6f13eea", "patch": "@@ -1,3 +1,14 @@\n+2006-08-03  Dorit Nuzman  <dorit@il.ibm.com>\n+\n+\tPR tree-optimization/27770\n+\t* lib/target-support.exp: New target keyword \"section_anchors\". \n+\t* gcc.dg/vect/vect.exp: Add -fsection-anchors to compilation of some\n+\ttests.\n+\t* gcc.dg/vect/section-anchors-pr27770.c: New test.\n+\t* gcc.dg/vect/vect-69.c: Removed. Replaced by:\n+\t* gcc.dg/vect/section-anchors-vect-69.c: New test.\n+\t* gcc.dg/vect/no-section-anchors-vect-69.c: New test.\n+\t\n 2006-08-03  John David Anglin  <dave.anglin@nrc-cnrc.gc.ca>\n \n \t* gcc.dg/20060801-1.c: Add missing '}'."}, {"sha": "6da9bfbfdcc1a698241151ef732484c68ecfaa7d", "filename": "gcc/testsuite/gcc.dg/vect/no-section-anchors-vect-69.c", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fno-section-anchors-vect-69.c?ref=0be79f24f8534db6eac81a35a94260d6a6f13eea", "previous_filename": "gcc/testsuite/gcc.dg/vect/vect-69.c"}, {"sha": "7513d93a43db917d0d493be6f3870aa87551bdfc", "filename": "gcc/testsuite/gcc.dg/vect/section-anchors-pr27770.c", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-pr27770.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-pr27770.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-pr27770.c?ref=0be79f24f8534db6eac81a35a94260d6a6f13eea", "patch": "@@ -0,0 +1,31 @@\n+/* { dg-require-effective-target section_anchors } */ \n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+short x;\n+static short f[100] = {0};\n+int\n+bar (void)\n+{\n+  return f[0];\n+}\n+void\n+foo (void)\n+{\n+  int i;\n+  for (i = 0; i < 100; i++)\n+    f[i]++;\n+}\n+int main (void)\n+{\n+  int i;\n+  check_vect ();\n+  foo ();\n+  for (i = 0; i < 100; i++)\n+    if (f[i]!=1) \n+      abort ();\n+  return 0;\n+}\n+\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "f33a37df027b51f3d59dd840d4769ae2ff625120", "filename": "gcc/testsuite/gcc.dg/vect/section-anchors-vect-69.c", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-69.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-69.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fsection-anchors-vect-69.c?ref=0be79f24f8534db6eac81a35a94260d6a6f13eea", "patch": "@@ -0,0 +1,119 @@\n+/* { dg-require-effective-target section_anchors } */\n+\n+#include <stdarg.h>\n+#include \"tree-vect.h\"\n+\n+#define N 32\n+\n+struct s{\n+  int m;\n+  int n[N][N][N];\n+};\n+\n+struct s2{\n+  int m;\n+  int n[N-1][N-1][N-1];\n+};\n+\n+struct test1{\n+  struct s a; /* array a.n is unaligned */\n+  int b;\n+  int c;\n+  struct s e; /* array e.n is aligned */\n+};\n+\n+struct test2{\n+  struct s2 a; /* array a.n is unaligned */\n+  int b;\n+  int c;\n+  struct s2 e; /* array e.n is aligned */\n+};\n+\n+\n+struct test1 tmp1[4];\n+struct test2 tmp2[4];\n+\n+int main1 ()\n+{  \n+  int i,j;\n+\n+  /* 1. unaligned */\n+  for (i = 0; i < N; i++)\n+    {\n+      tmp1[2].a.n[1][2][i] = 5;\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i <N; i++)\n+    {\n+      if (tmp1[2].a.n[1][2][i] != 5)\n+        abort ();\n+    }\n+\n+  /* 2. aligned */\n+  for (i = 3; i < N-1; i++)\n+    {\n+      tmp1[2].a.n[1][2][i] = 6;\n+    }\n+\n+  /* check results:  */\n+  for (i = 3; i < N-1; i++)\n+    {\n+      if (tmp1[2].a.n[1][2][i] != 6)\n+        abort ();\n+    }\n+\n+  /* 3. aligned */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+\t{\n+          tmp1[2].e.n[1][i][j] = 8;\n+\t}\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N; i++)\n+    {\n+      for (j = 0; j < N; j++)\n+\t{\n+          if (tmp1[2].e.n[1][i][j] != 8)\n+\t    abort ();\n+\t}\n+    }\n+\n+  /* 4. unaligned */\n+  for (i = 0; i < N-4; i++)\n+    {\n+      for (j = 0; j < N-4; j++)\n+\t{\n+          tmp2[2].e.n[1][i][j] = 8;\n+\t}\n+    }\n+\n+  /* check results:  */\n+  for (i = 0; i < N-4; i++)\n+    {\n+      for (j = 0; j < N-4; j++)\n+\t{\n+          if (tmp2[2].e.n[1][i][j] != 8)\n+\t    abort ();\n+\t}\n+    }\n+\n+  return 0;\n+}\n+\n+int main (void)\n+{ \n+  check_vect ();\n+  \n+  return main1 ();\n+} \n+\n+/* { dg-final { scan-tree-dump-times \"vectorized 4 loops\" 1 \"vect\" { target vect_int } } } */\n+/* { dg-final { scan-tree-dump-times \"Vectorizing an unaligned access\" 0 \"vect\" } } */\n+/* Alignment forced using versioning until the pass that increases alignment\n+  is extended to handle structs.  */\n+/* { dg-final { scan-tree-dump-times \"Alignment of access forced using peeling\" 4 \"vect\" { target vect_int } } } */\n+/* { dg-final { cleanup-tree-dump \"vect\" } } */"}, {"sha": "007aa203f7d576e7670345eaa61a6aa0f21ca075", "filename": "gcc/testsuite/gcc.dg/vect/vect.exp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fvect%2Fvect.exp?ref=0be79f24f8534db6eac81a35a94260d6a6f13eea", "patch": "@@ -121,6 +121,18 @@ lappend DEFAULT_VECTCFLAGS \"-fno-tree-dce\"\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/no-tree-dce-*.\\[cS\\]]]  \\\n \t\"\" $DEFAULT_VECTCFLAGS\n \n+# -fsection-anchors tests\n+set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n+lappend DEFAULT_VECTCFLAGS \"-fsection-anchors\"\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/section-anchors-*.\\[cS\\]]]  \\\n+\t\"\" $DEFAULT_VECTCFLAGS\n+\n+# -fno-section-anchors tests\n+set DEFAULT_VECTCFLAGS $SAVED_DEFAULT_VECTCFLAGS\n+lappend DEFAULT_VECTCFLAGS \"-fno-section-anchors\"\n+dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/no-section-anchors-*.\\[cS\\]]]  \\\n+\t\"\" $DEFAULT_VECTCFLAGS\n+\n # With -Os\n lappend DEFAULT_VECTCFLAGS \"-Os\"\n dg-runtest [lsort [glob -nocomplain $srcdir/$subdir/Os-vect-*.\\[cS\\]]]  \\"}, {"sha": "bf8f7e796bb68b5fc47689cc23ce3baa41230ed4", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=0be79f24f8534db6eac81a35a94260d6a6f13eea", "patch": "@@ -1726,6 +1726,24 @@ proc check_effective_target_vect_int_mult { } {\n     return $et_vect_int_mult_saved\n }\n \n+# Return 1 if the target supports section-anchors\n+\n+proc check_effective_target_section_anchors { } {\n+    global et_section_anchors_saved\n+\n+    if [info exists et_section_anchors_saved] {\n+        verbose \"check_effective_target_section_anchors: using cached result\" 2\n+    } else {\n+        set et_section_anchors_saved 0\n+        if { [istarget powerpc*-*-*] } {\n+           set et_section_anchors_saved 1\n+        }\n+    }\n+\n+    verbose \"check_effective_target_section_anchors: returning $et_section_anchors_saved\" 2\n+    return $et_section_anchors_saved\n+}\n+\n # Return 1 if the target supports atomic operations on \"int\" and \"long\".\n \n proc check_effective_target_sync_int_long { } {"}, {"sha": "d0c81515a26a6845169cb29d116978fd9b98cb11", "filename": "gcc/tree-flow.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftree-flow.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftree-flow.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-flow.h?ref=0be79f24f8534db6eac81a35a94260d6a6f13eea", "patch": "@@ -789,6 +789,8 @@ struct tree_niter_desc\n \n /* In tree-vectorizer.c */\n void vectorize_loops (struct loops *);\n+extern bool vect_can_force_dr_alignment_p (tree, unsigned int);\n+extern tree get_vectype_for_scalar_type (tree);\n \n /* In tree-ssa-phiopt.c */\n bool empty_block_p (basic_block);"}, {"sha": "9df8ba26606d7ffbf25eb24a1341f7240cf7df10", "filename": "gcc/tree-vect-analyze.c", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftree-vect-analyze.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftree-vect-analyze.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vect-analyze.c?ref=0be79f24f8534db6eac81a35a94260d6a6f13eea", "patch": "@@ -754,7 +754,10 @@ vect_compute_data_ref_alignment (struct data_reference *dr)\n \n   if (!base_aligned) \n     {\n-      if (!vect_can_force_dr_alignment_p (base, TYPE_ALIGN (vectype)))\n+      /* Do not change the alignment of global variables if \n+\t flag_section_anchors is enabled.  */\n+      if (!vect_can_force_dr_alignment_p (base, TYPE_ALIGN (vectype))\n+\t  || (TREE_STATIC (base) && flag_section_anchors))\n \t{\n \t  if (vect_print_dump_info (REPORT_DETAILS))\n \t    {"}, {"sha": "bfdac3bdfbba63d2dde97c4ab7914bf69c952594", "filename": "gcc/tree-vectorizer.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftree-vectorizer.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/0be79f24f8534db6eac81a35a94260d6a6f13eea/gcc%2Ftree-vectorizer.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree-vectorizer.c?ref=0be79f24f8534db6eac81a35a94260d6a6f13eea", "patch": "@@ -1327,6 +1327,9 @@ vect_print_dump_info (enum verbosity_levels vl)\n   if (vl > vect_verbosity_level)\n     return false;\n \n+  if (!current_function_decl || !vect_dump)\n+    return false;\n+\n   if (vect_loop_location == UNKNOWN_LOC)\n     fprintf (vect_dump, \"\\n%s:%d: note: \",\n \t\t DECL_SOURCE_FILE (current_function_decl),\n@@ -1335,7 +1338,6 @@ vect_print_dump_info (enum verbosity_levels vl)\n     fprintf (vect_dump, \"\\n%s:%d: note: \", \n \t     LOC_FILE (vect_loop_location), LOC_LINE (vect_loop_location));\n \n-\n   return true;\n }\n "}]}