{"sha": "ca158af378fe7727ec100bd03b3a07a540f25d9b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Y2ExNThhZjM3OGZlNzcyN2VjMTAwYmQwM2IzYTA3YTU0MGYyNWQ5Yg==", "commit": {"author": {"name": "Segher Boessenkool", "email": "segher@kernel.crashing.org", "date": "2017-10-11T00:11:23Z"}, "committer": {"name": "Segher Boessenkool", "email": "segher@gcc.gnu.org", "date": "2017-10-11T00:11:23Z"}, "message": "rs6000: insn_cost\n\nThis adds an implementation of the insn_cost hook to rs6000.\n\nThis implementations is very minimal (so far).  It is mostly based on\nhow many machine instructions are generated by an RTL insn, and it also\nlooks at the instruction type.  Floating point insns are costed as if\nall machine instructions it generates are floating point; the other\ninsns are treated as if all but one are integer insns (and one is the\nspecified type).  Load instructions are treated as costing twice as\nmuch, and load locked and sync insns as three times as much (just like\nthe original costs), and integer div and mul are handled as well.\n\nEach define_insn (etc.) can set a \"cost\" attribute to override this\ngeneral cost.  With optimization for size, the cost is set equal to the\nvalue of the \"length\" attribute.\n\nWith this, the majority of cost differences between old and new are\nwhere the old was wrong.  Also, benchmarks show a slight win (if\nanything).  Some refinements are obviously needed.\n\n\n\t* config/rs6000/rs6000.c (TARGET_INSN_COST): New.\n\t(rs6000_insn_cost): New function.\n\t* config/rs6000/rs6000.md (cost): New attribute.\n\nFrom-SVN: r253624", "tree": {"sha": "3f837ba72fb8a8c01712d6d66ce33a3dec74cb39", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3f837ba72fb8a8c01712d6d66ce33a3dec74cb39"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ca158af378fe7727ec100bd03b3a07a540f25d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca158af378fe7727ec100bd03b3a07a540f25d9b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ca158af378fe7727ec100bd03b3a07a540f25d9b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ca158af378fe7727ec100bd03b3a07a540f25d9b/comments", "author": {"login": "segher", "id": 417629, "node_id": "MDQ6VXNlcjQxNzYyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/417629?v=4", "gravatar_id": "", "url": "https://api.github.com/users/segher", "html_url": "https://github.com/segher", "followers_url": "https://api.github.com/users/segher/followers", "following_url": "https://api.github.com/users/segher/following{/other_user}", "gists_url": "https://api.github.com/users/segher/gists{/gist_id}", "starred_url": "https://api.github.com/users/segher/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/segher/subscriptions", "organizations_url": "https://api.github.com/users/segher/orgs", "repos_url": "https://api.github.com/users/segher/repos", "events_url": "https://api.github.com/users/segher/events{/privacy}", "received_events_url": "https://api.github.com/users/segher/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7cd6ea64f8b4abb51debc41cba2558fbda814a7f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/7cd6ea64f8b4abb51debc41cba2558fbda814a7f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/7cd6ea64f8b4abb51debc41cba2558fbda814a7f"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "e42eb5062eae21dbe6db3175d82a7f97194f8d54", "filename": "gcc/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca158af378fe7727ec100bd03b3a07a540f25d9b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca158af378fe7727ec100bd03b3a07a540f25d9b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=ca158af378fe7727ec100bd03b3a07a540f25d9b", "patch": "@@ -1,3 +1,9 @@\n+2017-10-10  Segher Boessenkool  <segher@kernel.crashing.org>\n+\n+\t* config/rs6000/rs6000.c (TARGET_INSN_COST): New.\n+\t(rs6000_insn_cost): New function.\n+\t* config/rs6000/rs6000.md (cost): New attribute.\n+\n 2017-10-10  Jakub Jelinek  <jakub@redhat.com>\n \t    H.J. Lu  <hongjiu.lu@intel.com>\n "}, {"sha": "8b014e75fae553489bd9d2ce0edf0985e24374a4", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca158af378fe7727ec100bd03b3a07a540f25d9b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca158af378fe7727ec100bd03b3a07a540f25d9b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=ca158af378fe7727ec100bd03b3a07a540f25d9b", "patch": "@@ -1728,6 +1728,8 @@ static const struct attribute_spec rs6000_attribute_table[] =\n #define TARGET_RTX_COSTS rs6000_rtx_costs\n #undef TARGET_ADDRESS_COST\n #define TARGET_ADDRESS_COST hook_int_rtx_mode_as_bool_0\n+#undef TARGET_INSN_COST\n+#define TARGET_INSN_COST rs6000_insn_cost\n \n #undef TARGET_INIT_DWARF_REG_SIZES_EXTRA\n #define TARGET_INIT_DWARF_REG_SIZES_EXTRA rs6000_init_dwarf_reg_sizes_extra\n@@ -34936,6 +34938,88 @@ rs6000_debug_rtx_costs (rtx x, machine_mode mode, int outer_code,\n   return ret;\n }\n \n+static int\n+rs6000_insn_cost (rtx_insn *insn, bool speed)\n+{\n+  if (recog_memoized (insn) < 0)\n+    return 0;\n+\n+  if (!speed)\n+    return get_attr_length (insn);\n+\n+  int cost = get_attr_cost (insn);\n+  if (cost > 0)\n+    return cost;\n+\n+  int n = get_attr_length (insn) / 4;\n+  enum attr_type type = get_attr_type (insn);\n+\n+  switch (type)\n+    {\n+    case TYPE_LOAD:\n+    case TYPE_FPLOAD:\n+    case TYPE_VECLOAD:\n+      cost = COSTS_N_INSNS (n + 1);\n+      break;\n+\n+    case TYPE_MUL:\n+      switch (get_attr_size (insn))\n+\t{\n+\tcase SIZE_8:\n+\t  cost = COSTS_N_INSNS (n - 1) + rs6000_cost->mulsi_const9;\n+\t  break;\n+\tcase SIZE_16:\n+\t  cost = COSTS_N_INSNS (n - 1) + rs6000_cost->mulsi_const;\n+\t  break;\n+\tcase SIZE_32:\n+\t  cost = COSTS_N_INSNS (n - 1) + rs6000_cost->mulsi;\n+\t  break;\n+\tcase SIZE_64:\n+\t  cost = COSTS_N_INSNS (n - 1) + rs6000_cost->muldi;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      break;\n+    case TYPE_DIV:\n+      switch (get_attr_size (insn))\n+\t{\n+\tcase SIZE_32:\n+\t  cost = COSTS_N_INSNS (n - 1) + rs6000_cost->divsi;\n+\t  break;\n+\tcase SIZE_64:\n+\t  cost = COSTS_N_INSNS (n - 1) + rs6000_cost->divdi;\n+\t  break;\n+\tdefault:\n+\t  gcc_unreachable ();\n+\t}\n+      break;\n+\n+    case TYPE_FP:\n+      cost = n * rs6000_cost->fp;\n+      break;\n+    case TYPE_DMUL:\n+      cost = n * rs6000_cost->dmul;\n+      break;\n+    case TYPE_SDIV:\n+      cost = n * rs6000_cost->sdiv;\n+      break;\n+    case TYPE_DDIV:\n+      cost = n * rs6000_cost->ddiv;\n+      break;\n+\n+    case TYPE_SYNC:\n+    case TYPE_LOAD_L:\n+      cost = COSTS_N_INSNS (n + 2);\n+      break;\n+\n+    default:\n+      cost = COSTS_N_INSNS (n);\n+    }\n+\n+  return cost;\n+}\n+\n /* Debug form of ADDRESS_COST that is selected if -mdebug=cost.  */\n \n static int"}, {"sha": "6efc1134fc48c73d58a5eea372058e06e1ec5498", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ca158af378fe7727ec100bd03b3a07a540f25d9b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ca158af378fe7727ec100bd03b3a07a540f25d9b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=ca158af378fe7727ec100bd03b3a07a540f25d9b", "patch": "@@ -193,6 +193,10 @@\n ;; This is used for insert, mul and others as necessary.\n (define_attr \"size\" \"8,16,32,64,128\" (const_string \"32\"))\n \n+;; What is the insn_cost for this insn?  The target hook can still override\n+;; this.  For optimizing for size the \"length\" attribute is used instead.\n+(define_attr \"cost\" \"\" (const_int 0))\n+\n ;; Is this instruction record form (\"dot\", signed compare to 0, writing CR0)?\n ;; This is used for add, logical, shift, exts, mul.\n (define_attr \"dot\" \"no,yes\" (const_string \"no\"))"}]}