{"sha": "02a3554879001e8f1405d17e096ed68fc3f76975", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDJhMzU1NDg3OTAwMWU4ZjE0MDVkMTdlMDk2ZWQ2OGZjM2Y3Njk3NQ==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-03-04T19:25:01Z"}, "committer": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2021-03-05T23:00:02Z"}, "message": "c++: Pointer-to-member fn conversion with noexcept [PR99374]\n\nThe issue in this PR is that we wrongly reject converting pointers to\nmember function of incomplete types, one of which has noexcept.  Recall\nthat pointers (including pointers to member functions) to non-throwing\nfunctions can be implicitly converted to potentially-throwing functions\n(but not vice versa).\n\nWe reject the conversion when called from can_convert_arg_bad because\nstandard_conversion can't create such a conversion.  It comes down to\nthe DERIVED_FROM_P check in the TYPE_PTRMEMFUNC_P block.  It considers\nevery class derived from itself, but not when the class is incomplete.\nBut surely we want to reach fnptr_conv_p when tbase is fbase (one of\nthem could be an alias to the other so use same_type_p instead of ==).\n\nAnother approach would be to not perform DERIVED_FROM_P at all when\neither tbase or fbase are incomplete (so perhaps something like at the\nend of ptr_reasonably_similar).\n\ngcc/cp/ChangeLog:\n\n\tPR c++/99374\n\t* call.c (standard_conversion): When converting pointers to\n\tmember, don't return NULL when the bases are equivalent but\n\tincomplete.\n\ngcc/testsuite/ChangeLog:\n\n\tPR c++/99374\n\t* g++.dg/cpp1z/noexcept-type23.C: New test.", "tree": {"sha": "15d3d2b3ec01576d67f0731aa4cad0024211b245", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/15d3d2b3ec01576d67f0731aa4cad0024211b245"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/02a3554879001e8f1405d17e096ed68fc3f76975", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a3554879001e8f1405d17e096ed68fc3f76975", "html_url": "https://github.com/Rust-GCC/gccrs/commit/02a3554879001e8f1405d17e096ed68fc3f76975", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/02a3554879001e8f1405d17e096ed68fc3f76975/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2e64c33d9d903f0a52565ad98300feea0ffc580", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c2e64c33d9d903f0a52565ad98300feea0ffc580", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c2e64c33d9d903f0a52565ad98300feea0ffc580"}], "stats": {"total": 18, "additions": 17, "deletions": 1}, "files": [{"sha": "7d12fea60f242e4fa083c35064336baeceaa9d02", "filename": "gcc/cp/call.c", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a3554879001e8f1405d17e096ed68fc3f76975/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a3554879001e8f1405d17e096ed68fc3f76975/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=02a3554879001e8f1405d17e096ed68fc3f76975", "patch": "@@ -1449,7 +1449,9 @@ standard_conversion (tree to, tree from, tree expr, bool c_cast_p,\n       tree fbase = class_of_this_parm (fromfn);\n       tree tbase = class_of_this_parm (tofn);\n \n-      if (!DERIVED_FROM_P (fbase, tbase))\n+      /* If FBASE and TBASE are equivalent but incomplete, DERIVED_FROM_P\n+\t yields false.  But a pointer to member of incomplete class is OK.  */\n+      if (!same_type_p (fbase, tbase) && !DERIVED_FROM_P (fbase, tbase))\n \treturn NULL;\n \n       tree fstat = static_fn_type (fromfn);"}, {"sha": "612dd6ceb5e7daac9505b6c71e64a08bcc88f6ae", "filename": "gcc/testsuite/g++.dg/cpp1z/noexcept-type23.C", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/02a3554879001e8f1405d17e096ed68fc3f76975/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type23.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/02a3554879001e8f1405d17e096ed68fc3f76975/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type23.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp1z%2Fnoexcept-type23.C?ref=02a3554879001e8f1405d17e096ed68fc3f76975", "patch": "@@ -0,0 +1,14 @@\n+// PR c++/99374\n+// { dg-do compile { target c++17 } }\n+\n+struct S;\n+struct R;\n+using F1 = int (S::*)();\n+using F2 = int (S::*)() noexcept;\n+using F3 = int (R::*)() noexcept;\n+using T = S;\n+using F4 = int (T::*)() noexcept;\n+F1 f21 = F2();\n+F1 f41 = F4();\n+F2 f12 = F1(); // { dg-error \"cannot convert\" }\n+F1 f31 = F3(); // { dg-error \"cannot convert\" }"}]}