{"sha": "b74a056019b07731f0c0f87c71486acd268198d2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6Yjc0YTA1NjAxOWIwNzczMWYwYzBmODdjNzE0ODZhY2QyNjgxOThkMg==", "commit": {"author": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-04-14T13:20:19Z"}, "committer": {"name": "Mark Mitchell", "email": "mmitchel@gcc.gnu.org", "date": "1999-04-14T13:20:19Z"}, "message": "cp-tree.h (popclass): Change declaration.\n\n\t* cp-tree.h (popclass): Change declaration.\n\t(pop_nested_class): Likewise.\n\t(poplevel_class): Remove declaration.\n\t* call.c (convert_default_argument): Pass no arguments to\n\tpopclass.\n\t* class.c (finish_struct_1): Likewise.\n\t(finish_struct): Likewise.\n\t(popclass): Remove argument.  Simplify code accordingly.\n\t(pop_nested_class): Likewise.\n\t* decl.c (poplevel_class): Declare it here, and make it static.\n\t(poplevel): Handle class scopes.\n\t(pop_level_class): Don't take an rgument.  Simplify.\n\t(pop_everything): Pass no arguments to pop_nested_class.\n\t(cp_finish_decl): Pass no arguments to popclass.\n\t(grokdeclarator): Pass no arguments to pop_nested_class.\n\t(finish_function): Likewise.\n\t* decl2.c (grokfield): Likewise.\n\t(pop_scope): Pass no arguments to popclass.\n\t* lex.c (do_pending_defargs): Pass no arguments to pop_nested_class.\n\t* pt.c (instantiate_class_template): Move call to pushclass, and\n\tdocument.  Pass no arguments to popclass.\n\t(regenerate_decl_from_template): Likewise.\n\nFrom-SVN: r26454", "tree": {"sha": "3c6fd4ee9e272bb0a8dee5ac2dda4323c7cb6f9e", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3c6fd4ee9e272bb0a8dee5ac2dda4323c7cb6f9e"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b74a056019b07731f0c0f87c71486acd268198d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74a056019b07731f0c0f87c71486acd268198d2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b74a056019b07731f0c0f87c71486acd268198d2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b74a056019b07731f0c0f87c71486acd268198d2/comments", "author": null, "committer": null, "parents": [{"sha": "d15985c8f85090082ea8d09075af0e07d5e957ca", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d15985c8f85090082ea8d09075af0e07d5e957ca", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d15985c8f85090082ea8d09075af0e07d5e957ca"}], "stats": {"total": 168, "additions": 112, "deletions": 56}, "files": [{"sha": "bb4e6b71265492cb53a1b1036b2dd6f28cc1aa24", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 66, "deletions": 1, "changes": 67, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=b74a056019b07731f0c0f87c71486acd268198d2", "patch": "@@ -1,3 +1,28 @@\n+1999-04-14  Mark Mitchell  <mark@codesourcery.com>\n+\n+\t* cp-tree.h (popclass): Change declaration.\n+\t(pop_nested_class): Likewise.\n+\t(poplevel_class): Remove declaration.\n+\t* call.c (convert_default_argument): Pass no arguments to\n+\tpopclass.\n+\t* class.c (finish_struct_1): Likewise.\n+\t(finish_struct): Likewise.\n+\t(popclass): Remove argument.  Simplify code accordingly.\n+\t(pop_nested_class): Likewise.\n+\t* decl.c (poplevel_class): Declare it here, and make it static.\n+\t(poplevel): Handle class scopes.\n+\t(pop_level_class): Don't take an rgument.  Simplify.\n+\t(pop_everything): Pass no arguments to pop_nested_class.\n+\t(cp_finish_decl): Pass no arguments to popclass.\n+\t(grokdeclarator): Pass no arguments to pop_nested_class.\n+\t(finish_function): Likewise.\n+\t* decl2.c (grokfield): Likewise.\n+\t(pop_scope): Pass no arguments to popclass.\n+\t* lex.c (do_pending_defargs): Pass no arguments to pop_nested_class.\n+\t* pt.c (instantiate_class_template): Move call to pushclass, and\n+\tdocument.  Pass no arguments to popclass.\n+\t(regenerate_decl_from_template): Likewise.\n+\t\n 1999-04-14  Jason Merrill  <jason@yorick.cygnus.com>\n \n \t* typeck.c (build_unary_op): Handle taking the address of a unique\n@@ -9135,6 +9160,26 @@ Sat Sep 27 16:22:48 1997  Jason Merrill  <jason@yorick.cygnus.com>\n \t(notype_qualified_id): Don't add template declarators here.\n \n Sat Sep 27 16:21:58 1997  Mark Mitchell  <mmitchell@usa.net>\n+<<<<<<< ChangeLog\n+<<<<<<< ChangeLog\n+\n+        * call.c (add_template_candidate): Add explicit_targs parameter.\n+        (build_scoped_method_call): Use it.\n+        (build_overload_call_real): Likewise.\n+        (build_user_type_conversion_1): Likewise.\n+        (build_new_function_call): Likewise.\n+        (build_object_call): Likewise.\n+        (build_new_op): Likewise.\n+        (build_new_method_call): Likewise.\n+        (build_new_function_call): Handle TEMPLATE_ID_EXPR.\n+        (build_new_method_call): Likewise.\n+\n+        * class.c (finish_struct_methods): Add specialization pass to\n+        determine which methods were specializing which other methods.\n+        (instantiate_type): Handle TEMPLATE_ID_EXPR.\n+=======\n+=======\n+>>>>>>> 1.996\n \n \t* call.c (add_template_candidate): Add explicit_targs parameter.\n \t(build_scoped_method_call): Use it.\n@@ -9179,11 +9224,31 @@ Sat Sep 27 16:21:58 1997  Mark Mitchell  <mmitchell@usa.net>\n \n \t* friend.c (do_friend): Don't call pushdecl for template\n \tinstantiations.\n-\n+<<<<<<< ChangeLog\n+>>>>>>> 1.988\n+=======\n+>>>>>>> 1.996\n+\n+<<<<<<< ChangeLog\n+<<<<<<< ChangeLog\n+        * init.c (build_member_call): Handle TEMPLATE_ID_EXPR.\n+\n+        * lang-options.h: Add -fname-mangling-version, -fguiding-decls, \n+=======\n+=======\n+>>>>>>> 1.996\n \t* init.c (build_member_call): Handle TEMPLATE_ID_EXPR.\n \n \t* lang-options.h: Add -fname-mangling-version, -fguiding-decls,\n \tand -fno-guiding-decls.\n+<<<<<<< ChangeLog\n+<<<<<<< ChangeLog\n+\n+        * lex.c (identifier_type): Return PFUNCNAME for template function\n+        names.\n+=======\n+=======\n+>>>>>>> 1.996\n \n \t* lex.c (identifier_type): Return PFUNCNAME for template function\n \tnames."}, {"sha": "7a20421e2b23ce686e33f90aec247ae4510ad9ab", "filename": "gcc/cp/call.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Fcall.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Fcall.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcall.c?ref=b74a056019b07731f0c0f87c71486acd268198d2", "patch": "@@ -3196,7 +3196,7 @@ convert_default_arg (type, arg, fn)\n       arg = tsubst_expr (arg, DECL_TI_ARGS (fn), /*complain=*/1, NULL_TREE);\n \n       if (DECL_CLASS_SCOPE_P (fn))\n-\tpopclass (1);\n+\tpopclass ();\n \n       /* Make sure the default argument is reasonable.  */\n       arg = check_default_argument (type, arg);"}, {"sha": "0df7470d5084d558e8ade4dd9d0c6421b9bbc61e", "filename": "gcc/cp/class.c", "status": "modified", "additions": 16, "deletions": 28, "changes": 44, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fclass.c?ref=b74a056019b07731f0c0f87c71486acd268198d2", "patch": "@@ -3143,7 +3143,7 @@ finish_struct_1 (t, warn_anon)\n \tcp_error (\"redefinition of `%#T'\", t);\n       else\n \tmy_friendly_abort (172);\n-      popclass (1);\n+      popclass ();\n       return t;\n     }\n \n@@ -4220,7 +4220,7 @@ finish_struct (t, attributes, warn_anon)\n   TYPE_BEING_DEFINED (t) = 0;\n \n   if (current_class_type)\n-    popclass (1);\n+    popclass ();\n   else\n     error (\"trying to finish struct, but kicked out due to previous parse errors.\");\n \n@@ -4551,36 +4551,25 @@ invalidate_class_lookup_cache ()\n }\n  \n /* Get out of the current class scope. If we were in a class scope\n-   previously, that is the one popped to.  The flag MODIFY tells whether\n-   the current scope declarations needs to be modified as a result of\n-   popping to the previous scope.  0 is used for class definitions.  */\n+   previously, that is the one popped to.  */\n \n void\n-popclass (modify)\n-     int modify;\n+popclass ()\n {\n-  if (modify)\n-    {\n-      /* Just remove from this class what didn't make\n+  /* Just remove from this class what didn't make\n \t it into IDENTIFIER_CLASS_VALUE.  */\n-      tree tags = CLASSTYPE_TAGS (current_class_type);\n+  tree tags = CLASSTYPE_TAGS (current_class_type);\n \n-      while (tags)\n-\t{\n-\t  TREE_NONLOCAL_FLAG (TREE_VALUE (tags)) = 0;\n-\t  tags = TREE_CHAIN (tags);\n-\t}\n+  while (tags)\n+    {\n+      TREE_NONLOCAL_FLAG (TREE_VALUE (tags)) = 0;\n+      tags = TREE_CHAIN (tags);\n     }\n \n-  /* Force clearing of IDENTIFIER_CLASS_VALUEs after a class definition,\n-     since not all class decls make it there currently.  */\n-  poplevel_class (! modify);\n-\n+  poplevel (1, 0, 0);\n   /* Since poplevel_class does the popping of class decls nowadays,\n-     this really only frees the obstack used for these decls.\n-     That's why it had to be moved down here.  */\n-  if (modify)\n-    pop_class_decls ();\n+     this really only frees the obstack used for these decls.  */\n+  pop_class_decls ();\n \n   current_class_depth--;\n   current_class_name = current_class_stack[current_class_depth].name;\n@@ -4636,14 +4625,13 @@ push_nested_class (type, modify)\n /* Undoes a push_nested_class call.  MODIFY is passed on to popclass.  */\n \n void\n-pop_nested_class (modify)\n-     int modify;\n+pop_nested_class ()\n {\n   tree context = DECL_CONTEXT (TYPE_MAIN_DECL (current_class_type));\n \n-  popclass (modify);\n+  popclass ();\n   if (context && TREE_CODE (context) == RECORD_TYPE)\n-    pop_nested_class (modify);\n+    pop_nested_class ();\n }\n \n /* Set global variables CURRENT_LANG_NAME to appropriate value"}, {"sha": "0ec7f8e91a4a130f8215702cd1623dd23e712686", "filename": "gcc/cp/cp-tree.h", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Fcp-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Fcp-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fcp-tree.h?ref=b74a056019b07731f0c0f87c71486acd268198d2", "patch": "@@ -2721,9 +2721,9 @@ extern int resolves_to_fixed_type_p\t\tPROTO((tree, int *));\n extern void init_class_processing\t\tPROTO((void));\n extern int is_empty_class\t\t\tPROTO((tree));\n extern void pushclass\t\t\t\tPROTO((tree, int));\n-extern void popclass\t\t\t\tPROTO((int));\n+extern void popclass\t\t\t\tPROTO((void));\n extern void push_nested_class\t\t\tPROTO((tree, int));\n-extern void pop_nested_class\t\t\tPROTO((int));\n+extern void pop_nested_class\t\t\tPROTO((void));\n extern void push_lang_context\t\t\tPROTO((tree));\n extern void pop_lang_context\t\t\tPROTO((void));\n extern tree instantiate_type\t\t\tPROTO((tree, tree, int));\n@@ -2775,7 +2775,6 @@ extern void insert_block\t\t\tPROTO((tree));\n extern void add_block_current_level\t\tPROTO((tree));\n extern void set_block\t\t\t\tPROTO((tree));\n extern void pushlevel_class\t\t\tPROTO((void));\n-extern tree poplevel_class\t\t\tPROTO((int));\n extern void print_binding_stack\t\t\tPROTO((void));\n extern void print_binding_level\t\t\tPROTO((struct binding_level *));\n extern void push_namespace\t\t\tPROTO((tree));"}, {"sha": "ce8754844ecc4c1e0682cf9895813e84effe675f", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=b74a056019b07731f0c0f87c71486acd268198d2", "patch": "@@ -191,6 +191,7 @@ static tree record_builtin_java_type PROTO((const char *, int));\n static const char *tag_name PROTO((enum tag_types code));\n static void find_class_binding_level PROTO((void));\n static struct binding_level *innermost_nonclass_level PROTO((void));\n+static tree poplevel_class PROTO((void));\n \n #if defined (DEBUG_CP_BINDING_LEVELS)\n static void indent PROTO((void));\n@@ -1330,11 +1331,11 @@ poplevel (keep, reverse, functionbody)\n   int block_previously_created;\n   int leaving_for_scope;\n \n-  if (current_binding_level->parm_flag == 2\n-      || current_binding_level->class_shadowed)\n-    /* We should not be using poplevel to pop a class binding level.\n-       Use poplevel_class instead.  */\n-    my_friendly_abort (0);\n+  if (current_binding_level->parm_flag == 2)\n+    return poplevel_class ();\n+\n+  my_friendly_assert (!current_binding_level->class_shadowed,\n+\t\t      19990414);\n \n   /* We used to use KEEP == 2 to indicate that the new block should go\n      at the beginning of the list of blocks at this binding level,\n@@ -1723,15 +1724,12 @@ pushlevel_class ()\n   class_binding_level->parm_flag = 2;\n }\n \n-/* ...and a poplevel for class declarations.  FORCE is used to force\n-   clearing out of CLASS_VALUEs after a class definition.  */\n+/* ...and a poplevel for class declarations.  */\n \n-tree\n-poplevel_class (force)\n-     int force;\n+static tree\n+poplevel_class ()\n {\n   register struct binding_level *level = class_binding_level;\n-  tree block = NULL_TREE;\n   tree shadowed;\n \n   my_friendly_assert (level != 0, 354);\n@@ -1742,7 +1740,7 @@ poplevel_class (force)\n      shouldn't even be used when current_class_type isn't set, and second,\n      if we don't touch it here, we're able to use the cache effect if the\n      next time we're entering a class scope, it is the same class.  */\n-  if (current_class_depth != 1 || force)\n+  if (current_class_depth != 1)\n     {\n       struct binding_level* b;\n \n@@ -1805,7 +1803,7 @@ poplevel_class (force)\n \n   pop_binding_level ();\n \n-  return block;\n+  return NULL_TREE;\n }\n \n /* We are entering the scope of a class.  Clear IDENTIFIER_CLASS_VALUE\n@@ -2533,7 +2531,7 @@ pop_everything ()\n   while (!toplevel_bindings_p ())\n     {\n       if (current_binding_level->parm_flag == 2)\n-\tpop_nested_class (1);\n+\tpop_nested_class ();\n       else\n \tpoplevel (0, 0, 0);\n     }\n@@ -8160,7 +8158,7 @@ cp_finish_decl (decl, init, asmspec_tree, need_pop, flags)\n \t       the binding level..  */\n \t    && TYPE_SIZE (context) != NULL_TREE\n \t    && context == current_class_type)\n-\t  popclass (1);\n+\t  popclass ();\n       }\n     }\n \n@@ -10569,7 +10567,7 @@ grokdeclarator (declarator, declspecs, decl_context, initialized, attrlist)\n                    push_nested_class used to push into class scope for\n                    parsing the argument list of a function decl, in\n                    qualified_id.  */\n-\t\tpop_nested_class (1);\n+\t\tpop_nested_class ();\n \t\tTREE_COMPLEXITY (declarator) = current_class_depth;\n \t      }\n \t    else\n@@ -14129,7 +14127,7 @@ finish_function (lineno, flags, nested)\n   if (current_class_name)\n     {\n       ctype = current_class_type;\n-      pop_nested_class (1);\n+      pop_nested_class ();\n     }\n \n   /* Must mark the RESULT_DECL as being in this function.  */"}, {"sha": "3b7446cb784549b039d142d24a8c3ce88c86149a", "filename": "gcc/cp/decl2.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Fdecl2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Fdecl2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl2.c?ref=b74a056019b07731f0c0f87c71486acd268198d2", "patch": "@@ -1505,7 +1505,7 @@ grokfield (declarator, declspecs, init, asmspec_tree, attrlist)\n       if (! IS_AGGR_TYPE_CODE (TREE_CODE (TREE_OPERAND (declarator, 0))))\n \t;\n       else if (TREE_COMPLEXITY (declarator) == current_class_depth)\n-\tpop_nested_class (1);\n+\tpop_nested_class ();\n       return do_class_using_decl (declarator);\n     }\n \n@@ -4380,7 +4380,7 @@ pop_scope (t)\n   if (TREE_CODE (t) == NAMESPACE_DECL)\n     pop_decl_namespace ();\n   else\n-    popclass (1);\n+    popclass ();\n }\n \n /* [basic.lookup.koenig] */"}, {"sha": "84fd7a9910fb27063213aaa4fc19a4a2f35102e3", "filename": "gcc/cp/lex.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Flex.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Flex.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Flex.c?ref=b74a056019b07731f0c0f87c71486acd268198d2", "patch": "@@ -1888,7 +1888,7 @@ do_pending_defargs ()\n \t}\n \n       poplevel (0, 0, 0);\n-      pop_nested_class (1);\n+      pop_nested_class ();\n     }\n }\n "}, {"sha": "9a63099c88a265afcbebbf8634ef7cc3468c3aab", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b74a056019b07731f0c0f87c71486acd268198d2/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=b74a056019b07731f0c0f87c71486acd268198d2", "patch": "@@ -4737,7 +4737,6 @@ instantiate_class_template (type)\n   TYPE_BEING_DEFINED (type) = 1;\n \n   maybe_push_to_top_level (uses_template_parms (type));\n-  pushclass (type, 0);\n \n   if (t)\n     {\n@@ -4882,6 +4881,13 @@ instantiate_class_template (type)\n \t\t      base_list);\n     }\n \n+  /* Now that our base classes are set up, enter the scope of the\n+     class, so that name lookups into base classes, etc. will work\n+     corectly.  This is precisely analagous to what we do in\n+     begin_class_definition when defining an ordinary non-template\n+     class.  */\n+  pushclass (type, 1);\n+\n   for (t = CLASSTYPE_TAGS (pattern); t; t = TREE_CHAIN (t))\n     {\n       tree tag = TREE_VALUE (t);\n@@ -5058,7 +5064,7 @@ instantiate_class_template (type)\n   TYPE_BEING_DEFINED (type) = 0;\n   repo_template_used (type);\n \n-  popclass (0);\n+  popclass ();\n   pop_from_top_level ();\n   pop_tinst_level ();\n \n@@ -9077,7 +9083,7 @@ regenerate_decl_from_template (decl, tmpl)\n \ttsubst_expr (DECL_INITIAL (code_pattern), args, \n \t\t     /*complain=*/1, DECL_TI_TEMPLATE (decl));\n       /* Pop the class context we pushed above.  */\n-      popclass (1);\n+      popclass ();\n     }\n   else if (TREE_CODE (decl) == FUNCTION_DECL)\n     {"}]}