{"sha": "138e79e7854509c60fd9ff9e9274b36ad6873ab8", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTM4ZTc5ZTc4NTQ1MDljNjBmZDlmZjllOTI3NGIzNmFkNjg3M2FiOA==", "commit": {"author": {"name": "Neil Booth", "email": "neilb@earthling.net", "date": "2000-10-25T17:23:23Z"}, "committer": {"name": "Neil Booth", "email": "neil@gcc.gnu.org", "date": "2000-10-25T17:23:23Z"}, "message": "cpp.texi: Update with implementation-defined behavior and internal limits.\n\n        * cpp.texi: Update with implementation-defined behavior and\n        internal limits.\n\nFrom-SVN: r37054", "tree": {"sha": "7004a3dbecb3902a103477d5d73a6ae1255f9d5b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7004a3dbecb3902a103477d5d73a6ae1255f9d5b"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/138e79e7854509c60fd9ff9e9274b36ad6873ab8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138e79e7854509c60fd9ff9e9274b36ad6873ab8", "html_url": "https://github.com/Rust-GCC/gccrs/commit/138e79e7854509c60fd9ff9e9274b36ad6873ab8", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/138e79e7854509c60fd9ff9e9274b36ad6873ab8/comments", "author": null, "committer": null, "parents": [{"sha": "dfb1d76f1caaa5448184522716fc7c05276ffc49", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/dfb1d76f1caaa5448184522716fc7c05276ffc49", "html_url": "https://github.com/Rust-GCC/gccrs/commit/dfb1d76f1caaa5448184522716fc7c05276ffc49"}], "stats": {"total": 124, "additions": 111, "deletions": 13}, "files": [{"sha": "f40ab8eead81c1184ae071ef3a7bdb146a125631", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138e79e7854509c60fd9ff9e9274b36ad6873ab8/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138e79e7854509c60fd9ff9e9274b36ad6873ab8/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=138e79e7854509c60fd9ff9e9274b36ad6873ab8", "patch": "@@ -1,3 +1,8 @@\n+2000-10-25  Neil Booth  <neilb@earthling.net>\n+\n+        * cpp.texi: Update with implementation-defined behavior and\n+        internal limits.\n+\n 2000-10-25  Jakub Jelinek  <jakub@redhat.com>\n \n \t* stor-layout.c (layout_type): If TYPE_ALIAS_SET was already set on the"}, {"sha": "8508c1fde2458635a2b22c48f5a9b88fe86ad46c", "filename": "gcc/cpp.texi", "status": "modified", "additions": 106, "deletions": 13, "changes": 119, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/138e79e7854509c60fd9ff9e9274b36ad6873ab8/gcc%2Fcpp.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/138e79e7854509c60fd9ff9e9274b36ad6873ab8/gcc%2Fcpp.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcpp.texi?ref=138e79e7854509c60fd9ff9e9274b36ad6873ab8", "patch": "@@ -136,6 +136,7 @@ must also use @samp{-pedantic}.  @xref{Invocation}.\n * Line Control::         Use of line control when you combine source files.\n * Other Directives::     Miscellaneous preprocessing directives.\n * Output::               Format of output from the C preprocessor.\n+* Implementation::       Implementation limits and behavior.\n * Unreliable Features::  Undefined behavior and deprecated features.\n * Invocation::           How to invoke the preprocessor; command options.\n * Concept Index::        Index of concepts and terms.\n@@ -421,7 +422,7 @@ include.  The text @var{anything else} is checked for macro calls, which\n are expanded (@pxref{Macros}).  When this is done, the result must match\n one of the above two variants --- in particular, the expansion must form\n a string literal token, or a sequence of tokens surrounded by angle\n-braces. @xref{Unreliable Features}.\n+braces. @xref{Implementation}.\n \n This feature allows you to define a macro which controls the file name\n to be used at a later point in the program.  One application of this is\n@@ -943,7 +944,7 @@ forbidden in open text; the standard is ambiguous.  We recommend you\n avoid using it except for its defined purpose.\n \n If your macro is complicated, you may want a more descriptive name for\n-the variable argument than @code{__VA_ARGS__}.  GNU CPP permits this, as\n+the variable argument than @code{__VA_ARGS__}.  GNU cpp permits this, as\n an extension.  You may write an argument name immediately before the\n @samp{@dots{}}; that name is used for the variable argument.  The\n @code{eprintf} macro above could be written\n@@ -2744,7 +2745,7 @@ warning message.\n #pragma GCC dependency \"/usr/include/time.h\" rerun /path/to/fixincludes\n @end smallexample\n \n-@node Output, Unreliable Features, Other Directives, Top\n+@node Output, Implementation, Other Directives, Top\n @section C Preprocessor Output\n \n @cindex output format\n@@ -2791,7 +2792,108 @@ This indicates that the following text should be treated as C@.\n @c maybe cross reference NO_IMPLICIT_EXTERN_C\n @end table\n \n-@node Unreliable Features, Invocation, Output, Top\n+@node Implementation, Unreliable Features, Output, Top\n+@section Implementation-defined Behavior and Implemenation Limits\n+@cindex implementation limits\n+@cindex implementation-defined behavior\n+\n+The ISO C standard mandates that implementations document various\n+aspects of preprocessor behavior.  You should try to avoid undue\n+reliance on behaviour described here, as it is probable that it will\n+change subtly in future implementations.\n+\n+@itemize @bullet\n+\n+@item The mapping of physical source file multibyte characters to the execution\n+character set.\n+\n+Currenty, GNU cpp only supports character sets that are strict supersets\n+of ASCII, and performs no translation of characters.\n+\n+@item Non-empty sequences of whitespace characters.\n+\n+Each whitespace sequence is not preserved, but collapsed to a single\n+space.\n+\n+@item The numeric value of characeter constants in preprocessor expressions.\n+\n+The preprocessor interprets character constants in preprocessing\n+directives on the host machine.  Expressions outside preprocessing\n+directives are compiled to be interpreted on the target machine.  In the\n+normal case of a native compiler, these two environments are the same\n+and so character constants will be evaluated identically in both cases.\n+However, in the case of a cross compiler, the values may be different.\n+\n+@item Source file inclusion.\n+\n+For a discussion on how the preprocessor locates header files,\n+@pxref{Include Operation}.\n+\n+@item Interpretation of the filename resulting from a macro-expanded\n+@samp{#include} directive.\n+\n+If the macro expands to a string literal, the @samp{#include} directive\n+is processed as if the string had been specified directly.  Otherwise,\n+the macro must expand to a token stream beginning with a @samp{<} token\n+and including a @samp{>} token.  In this case, the tokens between the\n+@samp{<} and the first @samp{>} are combined to form the filename to be\n+included.  Any whitespace between tokens is reduced to a single space;\n+then any space after the initial @samp{<} is retained, but a trailing\n+space before the closing @samp{>} is ignored.\n+\n+In either case, if any excess tokens remain, an error occurs and the\n+directive is not processed.\n+\n+@item Treatment of a @samp{#pragma} directive that after macro-expansion\n+results in a standard pragma.\n+\n+The pragma is processed as if it were a normal standard pragma.\n+\n+@end itemize\n+\n+The following documents internal limits of GNU cpp.\n+\n+@itemize @bullet\n+\n+@item Nesting levels of @samp{#include} files.\n+\n+We impose an arbitrary limit of 200 levels, to avoid runaway recursion.\n+The standard requires at least 15 levels be permitted.\n+\n+@item Nesting levels of conditional inclusion.\n+\n+The C standard mandates this be at least 63.  The GNU C preprocessor\n+is limited only by available memory.\n+\n+@item Levels of paranthesised expressions within a full expression.\n+\n+The C standard requires this to be at least 63.  In preprocessor\n+conditional expresssions it is limited only by available memory.\n+\n+@item Significant initial characters in an identifier or macro name.\n+\n+The preprocessor treats all characters as significant.  The C standard\n+requires only that the first 63 be significant.\n+\n+@item Number of macros simultaneously defined in a single translation unit.\n+\n+The standard requires at least 4095 be possible; GNU cpp is limited only\n+by available memory.\n+\n+@item Number of paramters in a macro definition and arguments in a macro call.\n+\n+We allow USHRT_MAX, which is normally 65,535, and above the minimum of\n+127 required by the standard.\n+\n+@item Number of characters on a logical source line.\n+\n+The C standard requires a minimum of 4096 be permitted.  GNU cpp places\n+no limits on this, but you may get incorrect column numbers reported in\n+diagnostics for lines longer than 65,535 characters.\n+\n+@end itemize\n+\n+@node Unreliable Features, Invocation, Implementation, Top\n @section Undefined Behavior and Deprecated Features\n @cindex undefined behavior\n @cindex deprecated features\n@@ -2810,15 +2912,6 @@ The following are undocumented and subject to change:-\n \n @itemize @bullet\n \n-@item Interpretation of the filename between @samp{<} and @samp{>} tokens\n- resulting from a macro-expanded filename in a @samp{#include} directive\n-\n-The text between the @samp{<} and @samp{>} is taken literally if given\n-directly within a @samp{#include} or similar directive.  If the\n-angle-bracketed filename is obtained through macro expansion, however,\n-preservation of whitespace and interpretation of backslashes and quotes\n-is undefined. @xref{Include Syntax}.\n-\n @item Precedence of ## operators with respect to each other\n \n Whether a sequence of ## operators is evaluated left-to-right,"}]}