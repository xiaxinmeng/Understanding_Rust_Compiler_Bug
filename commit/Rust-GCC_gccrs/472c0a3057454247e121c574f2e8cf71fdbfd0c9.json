{"sha": "472c0a3057454247e121c574f2e8cf71fdbfd0c9", "node_id": "C_kwDOANBUbNoAKDQ3MmMwYTMwNTc0NTQyNDdlMTIxYzU3NGYyZThjZjcxZmRiZmQwYzk", "commit": {"author": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-18T10:18:03Z"}, "committer": {"name": "Arthur Cohen", "email": "arthur.cohen@embecosm.com", "date": "2022-02-18T10:18:03Z"}, "message": "macro-repetition: Rename enum variants to better reflect repetition kind", "tree": {"sha": "b78a826a666d2a38e7d930660c66e5ed26eddb27", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b78a826a666d2a38e7d930660c66e5ed26eddb27"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/472c0a3057454247e121c574f2e8cf71fdbfd0c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472c0a3057454247e121c574f2e8cf71fdbfd0c9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/472c0a3057454247e121c574f2e8cf71fdbfd0c9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/472c0a3057454247e121c574f2e8cf71fdbfd0c9/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fb06d66cef70584e7aa2fa3a6ad22ef7def6b84", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9fb06d66cef70584e7aa2fa3a6ad22ef7def6b84", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9fb06d66cef70584e7aa2fa3a6ad22ef7def6b84"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "52445019078c12ffbb4ab17f122bbe764e3f2e91", "filename": "gcc/rust/ast/rust-ast-full-test.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472c0a3057454247e121c574f2e8cf71fdbfd0c9/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472c0a3057454247e121c574f2e8cf71fdbfd0c9/gcc%2Frust%2Fast%2Frust-ast-full-test.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-ast-full-test.cc?ref=472c0a3057454247e121c574f2e8cf71fdbfd0c9", "patch": "@@ -2446,13 +2446,13 @@ MacroMatchRepetition::as_string () const\n   str += \"\\n Op: \";\n   switch (op)\n     {\n-    case ASTERISK:\n+    case ANY:\n       str += \"*\";\n       break;\n-    case PLUS:\n+    case ONE_OR_MORE:\n       str += \"+\";\n       break;\n-    case QUESTION_MARK:\n+    case ZERO_OR_ONE:\n       str += \"?\";\n       break;\n     case NONE:"}, {"sha": "fed45895eb8e877dea37ffe086825c7d3fb52538", "filename": "gcc/rust/ast/rust-macro.h", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472c0a3057454247e121c574f2e8cf71fdbfd0c9/gcc%2Frust%2Fast%2Frust-macro.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472c0a3057454247e121c574f2e8cf71fdbfd0c9/gcc%2Frust%2Fast%2Frust-macro.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fast%2Frust-macro.h?ref=472c0a3057454247e121c574f2e8cf71fdbfd0c9", "patch": "@@ -134,9 +134,9 @@ class MacroMatchRepetition : public MacroMatch\n   enum MacroRepOp\n   {\n     NONE,\n-    ASTERISK,\n-    PLUS,\n-    QUESTION_MARK\n+    ANY,\n+    ONE_OR_MORE,\n+    ZERO_OR_ONE,\n   };\n \n private:"}, {"sha": "e667ebe5ff6a611e7625f892477a9941b18426ac", "filename": "gcc/rust/parse/rust-parse-impl.h", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/472c0a3057454247e121c574f2e8cf71fdbfd0c9/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/472c0a3057454247e121c574f2e8cf71fdbfd0c9/gcc%2Frust%2Fparse%2Frust-parse-impl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frust%2Fparse%2Frust-parse-impl.h?ref=472c0a3057454247e121c574f2e8cf71fdbfd0c9", "patch": "@@ -1991,20 +1991,19 @@ Parser<ManagedTokenSource>::parse_macro_match_repetition ()\n \n   // parse repetition operator\n   t = lexer.peek_token ();\n-  AST::MacroMatchRepetition::MacroRepOp op\n-    = AST::MacroMatchRepetition::ASTERISK;\n+  AST::MacroMatchRepetition::MacroRepOp op = AST::MacroMatchRepetition::NONE;\n   switch (t->get_id ())\n     {\n     case ASTERISK:\n-      op = AST::MacroMatchRepetition::ASTERISK;\n+      op = AST::MacroMatchRepetition::ANY;\n       lexer.skip_token ();\n       break;\n     case PLUS:\n-      op = AST::MacroMatchRepetition::PLUS;\n+      op = AST::MacroMatchRepetition::ONE_OR_MORE;\n       lexer.skip_token ();\n       break;\n     case QUESTION_MARK:\n-      op = AST::MacroMatchRepetition::QUESTION_MARK;\n+      op = AST::MacroMatchRepetition::ZERO_OR_ONE;\n       lexer.skip_token ();\n       break;\n     default:"}]}