{"sha": "09db7afe4f724be4582250bd68a0110a60896e95", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDlkYjdhZmU0ZjcyNGJlNDU4MjI1MGJkNjhhMDExMGE2MDg5NmU5NQ==", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2011-04-14T21:30:37Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@gcc.gnu.org", "date": "2011-04-14T21:30:37Z"}, "message": "re PR target/48605 (gcc.target/i386/sse4_1-insertps-2.c FAILs with -mtune=geode - instruction insertps with memory operands behaves differently)\n\n\tPR target/48605\n\t* config/i386/sse.md (sse4_1_insertps): If operands[2] is a MEM,\n\toffset it as needed based on top 2 bits in operands[3], change\n\tMEM mode to SFmode and mask those 2 bits away from operands[3].\n\n\t* gcc.target/i386/sse4_1-insertps-3.c: New test.\n\t* gcc.target/i386/sse4_1-insertps-4.c: New test.\n\t* gcc.target/i386/avx-insertps-3.c: New test.\n\t* gcc.target/i386/avx-insertps-4.c: New test.\n\nFrom-SVN: r172458", "tree": {"sha": "d29b70a327471a0ddf109fe2ca38f6fa09cc3315", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/d29b70a327471a0ddf109fe2ca38f6fa09cc3315"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/09db7afe4f724be4582250bd68a0110a60896e95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09db7afe4f724be4582250bd68a0110a60896e95", "html_url": "https://github.com/Rust-GCC/gccrs/commit/09db7afe4f724be4582250bd68a0110a60896e95", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/09db7afe4f724be4582250bd68a0110a60896e95/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "c59633d9da23d48847f3b1bc8f14772beffb1435", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/c59633d9da23d48847f3b1bc8f14772beffb1435", "html_url": "https://github.com/Rust-GCC/gccrs/commit/c59633d9da23d48847f3b1bc8f14772beffb1435"}], "stats": {"total": 149, "additions": 146, "deletions": 3}, "files": [{"sha": "a8b773f2dbe1098ca5a7671c9b193d7cf137b0f4", "filename": "gcc/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=09db7afe4f724be4582250bd68a0110a60896e95", "patch": "@@ -1,3 +1,10 @@\n+2011-04-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/48605\n+\t* config/i386/sse.md (sse4_1_insertps): If operands[2] is a MEM,\n+\toffset it as needed based on top 2 bits in operands[3], change\n+\tMEM mode to SFmode and mask those 2 bits away from operands[3].\n+\n 2011-04-14  Nicola Pero  <nicola.pero@meta-innovation.com>\n \n \t* c-parser.c (c_parser_objc_protocol_definition): Updated for"}, {"sha": "df5e216fd29ff09dfc52a18718df982dc6fcf356", "filename": "gcc/config/i386/sse.md", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2Fconfig%2Fi386%2Fsse.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2Fconfig%2Fi386%2Fsse.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fsse.md?ref=09db7afe4f724be4582250bd68a0110a60896e95", "patch": "@@ -3572,9 +3572,24 @@\n \t\t      (match_operand:SI 3 \"const_0_to_255_operand\" \"n,n\")]\n \t\t     UNSPEC_INSERTPS))]\n   \"TARGET_SSE4_1\"\n-  \"@\n-   insertps\\t{%3, %2, %0|%0, %2, %3}\n-   vinsertps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\"\n+{\n+  if (MEM_P (operands[2]))\n+    {\n+      unsigned count_s = INTVAL (operands[3]) >> 6;\n+      if (count_s)\n+\toperands[3] = GEN_INT (INTVAL (operands[3]) & 0x3f);\n+      operands[2] = adjust_address_nv (operands[2], SFmode, count_s * 4);\n+    }\n+  switch (which_alternative)\n+    {\n+    case 0:\n+      return \"insertps\\t{%3, %2, %0|%0, %2, %3}\";\n+    case 1:\n+      return \"vinsertps\\t{%3, %2, %1, %0|%0, %1, %2, %3}\";\n+    default:\n+      gcc_unreachable ();\n+    }\n+}\n   [(set_attr \"isa\" \"noavx,avx\")\n    (set_attr \"type\" \"sselog\")\n    (set_attr \"prefix_data16\" \"1,*\")"}, {"sha": "0c37e5339e775a79ff7cd8d0ed4b9424b7fcfdb9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=09db7afe4f724be4582250bd68a0110a60896e95", "patch": "@@ -1,3 +1,11 @@\n+2011-04-14  Jakub Jelinek  <jakub@redhat.com>\n+\n+\tPR target/48605\n+\t* gcc.target/i386/sse4_1-insertps-3.c: New test.\n+\t* gcc.target/i386/sse4_1-insertps-4.c: New test.\n+\t* gcc.target/i386/avx-insertps-3.c: New test.\n+\t* gcc.target/i386/avx-insertps-4.c: New test.\n+\n 2011-04-14  Georg-Johann Lay  <avr@gjlay.de>\n \n \t* gcc.target/avr/torture/pr41885.c (dg-options): Add"}, {"sha": "9397729340c0a2a2fcd9ab0099ebb32abe715e26", "filename": "gcc/testsuite/gcc.target/i386/avx-vinsertps-3.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertps-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertps-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertps-3.c?ref=09db7afe4f724be4582250bd68a0110a60896e95", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run { target ilp32 } } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx -mtune=geode\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-insertps-3.c\""}, {"sha": "527b070f6b69a2280119675070f3a3a9f6ccedf9", "filename": "gcc/testsuite/gcc.target/i386/avx-vinsertps-4.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertps-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertps-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Favx-vinsertps-4.c?ref=09db7afe4f724be4582250bd68a0110a60896e95", "patch": "@@ -0,0 +1,8 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target avx } */\n+/* { dg-options \"-O2 -mfpmath=sse -mavx\" } */\n+\n+#define CHECK_H \"avx-check.h\"\n+#define TEST avx_test\n+\n+#include \"sse4_1-insertps-4.c\""}, {"sha": "75a8073354309babe35b8326be316c845c3f4fe0", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-insertps-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insertps-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insertps-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insertps-3.c?ref=09db7afe4f724be4582250bd68a0110a60896e95", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do run { target ilp32 } } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1 -mtune=geode\" } */\n+\n+#include \"sse4_1-insertps-2.c\""}, {"sha": "30defca25e2803b4a8ee5b32885da71766b622a9", "filename": "gcc/testsuite/gcc.target/i386/sse4_1-insertps-4.c", "status": "added", "additions": 92, "deletions": 0, "changes": 92, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insertps-4.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/09db7afe4f724be4582250bd68a0110a60896e95/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insertps-4.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse4_1-insertps-4.c?ref=09db7afe4f724be4582250bd68a0110a60896e95", "patch": "@@ -0,0 +1,92 @@\n+/* { dg-do run } */\n+/* { dg-require-effective-target sse4 } */\n+/* { dg-options \"-O2 -msse4.1\" } */\n+\n+#ifndef CHECK_H\n+#define CHECK_H \"sse4_1-check.h\"\n+#endif\n+\n+#ifndef TEST\n+#define TEST sse4_1_test\n+#endif\n+\n+#include CHECK_H\n+\n+#include <smmintrin.h>\n+#include <string.h>\n+\n+#define msk0 0x41\n+#define msk1 0x90\n+#define msk2 0xe9\n+#define msk3 0x70\n+\n+#define msk4 0xFC\n+#define msk5 0x05\n+#define msk6 0x0A\n+#define msk7 0x0F\n+\n+union\n+  {\n+    __m128 x;\n+    float f[4];\n+  } val1;\n+\n+static void\n+TEST (void)\n+{\n+  union\n+    {\n+      __m128 x;\n+      float f[4];\n+    } res[8], val2, tmp;\n+  int masks[8];\n+  int i, j;\n+\n+  val2.f[0] = 55.0;\n+  val2.f[1] = 55.0;\n+  val2.f[2] = 55.0;\n+  val2.f[3] = 55.0;\n+\n+  val1.f[0] = 1.;\n+  val1.f[1] = 2.;\n+  val1.f[2] = 3.;\n+  val1.f[3] = 4.;\n+\n+  asm volatile (\"\" : \"+m\" (val1));\n+  res[0].x = _mm_insert_ps (val2.x, val1.x, msk0);\n+  asm volatile (\"\" : \"+m\" (val1));\n+  res[1].x = _mm_insert_ps (val2.x, val1.x, msk1);\n+  asm volatile (\"\" : \"+m\" (val1));\n+  res[2].x = _mm_insert_ps (val2.x, val1.x, msk2);\n+  asm volatile (\"\" : \"+m\" (val1));\n+  res[3].x = _mm_insert_ps (val2.x, val1.x, msk3);\n+\n+  masks[0] = msk0;\n+  masks[1] = msk1;\n+  masks[2] = msk2;\n+  masks[3] = msk3;\n+\n+  for (i = 0; i < 4; i++)\n+    {\n+      asm volatile (\"\" : \"+m\" (val1));\n+      res[i + 4].x = _mm_insert_ps (val2.x, val1.x, msk4);\n+    }\n+\n+  masks[4] = msk4;\n+  masks[5] = msk4;\n+  masks[6] = msk4;\n+  masks[7] = msk4;\n+\n+  for (i=0; i < 8; i++)\n+    {\n+      tmp = val2;\n+      tmp.f[(masks[i] & 0x30) >> 4] = val1.f[(masks[i] & 0xC0) >> 6];\n+\n+      for (j = 0; j < 4; j++)\n+\tif (masks[i] & (0x1 << j))\n+\t  tmp.f[j] = 0.f;\n+\n+      if (memcmp (&res[i], &tmp, sizeof (tmp)))\n+\tabort ();\n+    }\n+} "}]}