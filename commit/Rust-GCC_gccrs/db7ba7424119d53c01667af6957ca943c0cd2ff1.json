{"sha": "db7ba7424119d53c01667af6957ca943c0cd2ff1", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZGI3YmE3NDI0MTE5ZDUzYzAxNjY3YWY2OTU3Y2E5NDNjMGNkMmZmMQ==", "commit": {"author": {"name": "J\"orn Rennecke", "email": "amylaar@cygnus.co.uk", "date": "2000-05-25T01:11:22Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2000-05-25T01:11:22Z"}, "message": "rtl.h (loc_mentioned_in_p): Declare.\n\n\t* rtl.h (loc_mentioned_in_p): Declare.\n\t* reload.c (loc_mentioned_in_p): Moved from here...\n\t* rtlanal.c (loc_mentioned_in_p): to here.  No longer static.\n\tFix loop increment for 'E' handling.\n\t* loop.c (strength_reduce): When doing biv->giv conversion,\n\ttake multi-insn biv increments into account.\n\nFrom-SVN: r34150", "tree": {"sha": "58a6300e6b755d51992c7ba3c862952aada55ae8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/58a6300e6b755d51992c7ba3c862952aada55ae8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/db7ba7424119d53c01667af6957ca943c0cd2ff1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7ba7424119d53c01667af6957ca943c0cd2ff1", "html_url": "https://github.com/Rust-GCC/gccrs/commit/db7ba7424119d53c01667af6957ca943c0cd2ff1", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/db7ba7424119d53c01667af6957ca943c0cd2ff1/comments", "author": null, "committer": null, "parents": [{"sha": "04da69d3a6eeb4b9cbd3efc5473d063577e66d58", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04da69d3a6eeb4b9cbd3efc5473d063577e66d58", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04da69d3a6eeb4b9cbd3efc5473d063577e66d58"}], "stats": {"total": 82, "additions": 51, "deletions": 31}, "files": [{"sha": "a584ccae5cf7e1ecf78c8aaf17ee4a2d16dbcbf9", "filename": "gcc/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7ba7424119d53c01667af6957ca943c0cd2ff1/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7ba7424119d53c01667af6957ca943c0cd2ff1/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=db7ba7424119d53c01667af6957ca943c0cd2ff1", "patch": "@@ -1,3 +1,12 @@\n+Thu May 25 02:09:10 2000  J\"orn Rennecke <amylaar@cygnus.co.uk>\n+\n+\t* rtl.h (loc_mentioned_in_p): Declare.\n+\t* reload.c (loc_mentioned_in_p): Moved from here...\n+\t* rtlanal.c (loc_mentioned_in_p): to here.  No longer static.\n+\tFix loop increment for 'E' handling.\n+\t* loop.c (strength_reduce): When doing biv->giv conversion,\n+\ttake multi-insn biv increments into account.\n+\n 2000-05-24  Jason Merrill  <jason@casey.soma.redhat.com>\n \n \t* stmt.c (expand_end_bindings): Look through NOTEs to find a"}, {"sha": "0c37c34036ee26c33a2582fe9a4827daa0f678f9", "filename": "gcc/loop.c", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7ba7424119d53c01667af6957ca943c0cd2ff1/gcc%2Floop.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7ba7424119d53c01667af6957ca943c0cd2ff1/gcc%2Floop.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Floop.c?ref=db7ba7424119d53c01667af6957ca943c0cd2ff1", "patch": "@@ -4228,6 +4228,7 @@ strength_reduce (loop, insn_count, flags)\n \t      HOST_WIDE_INT offset;\n \t      rtx set, add_val, old_reg, dest_reg, last_use_insn, note;\n \t      int old_regno, new_regno;\n+\t      rtx next_loc_insn;\n \n \t      if (! v->always_executed\n \t\t  || v->maybe_multiple\n@@ -4262,7 +4263,17 @@ strength_reduce (loop, insn_count, flags)\n \t\t  VARRAY_GROW (reg_single_usage, nregs);\n \t\t}\n     \n-\t      if (! validate_change (next->insn, next->location, add_val, 0))\n+\t      /* Some bivs are incremented with a multi-insn sequence.\n+\t\t The first insn contains the add.  */\n+\t      next_loc_insn = next->insn;\n+\t      while (! loc_mentioned_in_p (next->location,\n+\t\t\t\t\t   PATTERN (next_loc_insn)))\n+\t\tnext_loc_insn = PREV_INSN (next_loc_insn);\n+\n+\t      if (next_loc_insn == v->insn)\n+\t\tabort ();\n+\n+\t      if (! validate_change (next_loc_insn, next->location, add_val, 0))\n \t\t{\n \t\t  vp = &v->next_iv;\n \t\t  continue;\n@@ -4274,7 +4285,7 @@ strength_reduce (loop, insn_count, flags)\n \t      /* Set last_use_insn so that we can check against it.  */\n \n \t      for (last_use_insn = v->insn, p = NEXT_INSN (v->insn);\n-\t\t   p != next->insn;\n+\t\t   p != next_loc_insn;\n \t\t   p = next_insn_in_loop (loop, p))\n \t\t{\n \t\t  if (!INSN_P (p))\n@@ -4294,7 +4305,7 @@ strength_reduce (loop, insn_count, flags)\n \t\t  || ! validate_change (v->insn, &SET_DEST (set), dest_reg, 0))\n \t\t{\n \t\t  /* Change the increment at NEXT back to what it was.  */\n-\t\t  if (! validate_change (next->insn, next->location,\n+\t\t  if (! validate_change (next_loc_insn, next->location,\n \t\t      next->add_val, 0))\n \t\t    abort ();\n \t\t  vp = &v->next_iv;\n@@ -4353,7 +4364,7 @@ strength_reduce (loop, insn_count, flags)\n \t\t the replaced increment and the next increment, and\n \t\t remember the last insn that needed a replacement.  */\n \t      for (last_use_insn = v->insn, p = NEXT_INSN (v->insn);\n-\t\t   p != next->insn;\n+\t\t   p != next_loc_insn;\n \t\t   p = next_insn_in_loop (loop, p))\n \t\t{\n \t\t  rtx note;"}, {"sha": "eb4302d117a542003ec1ace068e0370b9b34d6ce", "filename": "gcc/reload.c", "status": "modified", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7ba7424119d53c01667af6957ca943c0cd2ff1/gcc%2Freload.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7ba7424119d53c01667af6957ca943c0cd2ff1/gcc%2Freload.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Freload.c?ref=db7ba7424119d53c01667af6957ca943c0cd2ff1", "patch": "@@ -272,7 +272,6 @@ static void find_reloads_address_part PARAMS ((rtx, rtx *, enum reg_class,\n static rtx find_reloads_subreg_address PARAMS ((rtx, int, int, enum reload_type,\n \t\t\t\t\t      int, rtx));\n static int find_inc_amount\tPARAMS ((rtx, rtx));\n-static int loc_mentioned_in_p\tPARAMS ((rtx *, rtx));\n extern void debug_reload_to_stream PARAMS ((FILE *));\n extern void debug_reload PARAMS ((void));\n \f\n@@ -1557,32 +1556,6 @@ remove_address_replacements (in_rtx)\n     }\n   return something_changed;\n }\n-\n-/* Return non-zero if IN contains a piece of rtl that has the address LOC */\n-static int\n-loc_mentioned_in_p (loc, in)\n-     rtx *loc, in;\n-{\n-  enum rtx_code code = GET_CODE (in);\n-  const char *fmt = GET_RTX_FORMAT (code);\n-  int i, j;\n-\n-  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n-    {\n-      if (loc == &in->fld[i].rtx)\n-\treturn 1;\n-      if (fmt[i] == 'e')\n-\t{\n-\t  if (loc_mentioned_in_p (loc, XEXP (in, i)))\n-\t    return 1;\n-\t}\n-      else if (fmt[i] == 'E')\n-\tfor (j = XVECLEN (in, i) - 1; i >= 0; i--)\n-\t  if (loc_mentioned_in_p (loc, XVECEXP (in, i, j)))\n-\t    return 1;\n-    }\n-  return 0;\n-}\n \f\n /* If there is only one output reload, and it is not for an earlyclobber\n    operand, try to combine it with a (logically unrelated) input reload"}, {"sha": "79d1bca98f75f4fc4556c8779f04f922812ea950", "filename": "gcc/rtl.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7ba7424119d53c01667af6957ca943c0cd2ff1/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7ba7424119d53c01667af6957ca943c0cd2ff1/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=db7ba7424119d53c01667af6957ca943c0cd2ff1", "patch": "@@ -1248,6 +1248,7 @@ extern rtx regno_use_in\t\t\tPARAMS ((unsigned int, rtx));\n extern int auto_inc_p\t\t\tPARAMS ((rtx));\n extern void remove_node_from_expr_list\tPARAMS ((rtx, rtx *));\n extern int insns_safe_to_move_p         PARAMS ((rtx, rtx, rtx *));\n+extern int loc_mentioned_in_p\t\tPARAMS ((rtx *, rtx));\n \n /* flow.c */\n "}, {"sha": "8af6c7c1ffe96dd78d7bd9e544393ef09d78e504", "filename": "gcc/rtlanal.c", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/db7ba7424119d53c01667af6957ca943c0cd2ff1/gcc%2Frtlanal.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/db7ba7424119d53c01667af6957ca943c0cd2ff1/gcc%2Frtlanal.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtlanal.c?ref=db7ba7424119d53c01667af6957ca943c0cd2ff1", "patch": "@@ -2358,3 +2358,29 @@ insns_safe_to_move_p (from, to, new_to)\n   \n   return 0;\n }\n+\n+/* Return non-zero if IN contains a piece of rtl that has the address LOC */\n+int\n+loc_mentioned_in_p (loc, in)\n+     rtx *loc, in;\n+{\n+  enum rtx_code code = GET_CODE (in);\n+  const char *fmt = GET_RTX_FORMAT (code);\n+  int i, j;\n+\n+  for (i = GET_RTX_LENGTH (code) - 1; i >= 0; i--)\n+    {\n+      if (loc == &in->fld[i].rtx)\n+\treturn 1;\n+      if (fmt[i] == 'e')\n+\t{\n+\t  if (loc_mentioned_in_p (loc, XEXP (in, i)))\n+\t    return 1;\n+\t}\n+      else if (fmt[i] == 'E')\n+\tfor (j = XVECLEN (in, i) - 1; j >= 0; j--)\n+\t  if (loc_mentioned_in_p (loc, XVECEXP (in, i, j)))\n+\t    return 1;\n+    }\n+  return 0;\n+}"}]}