{"sha": "41602390456901c14ecdfa2fa64c3cebd5b6ff09", "node_id": "C_kwDOANBUbNoAKDQxNjAyMzkwNDU2OTAxYzE0ZWNkZmEyZmE2NGMzY2ViZDViNmZmMDk", "commit": {"author": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-31T08:20:34Z"}, "committer": {"name": "Jakub Jelinek", "email": "jakub@redhat.com", "date": "2023-01-31T08:20:34Z"}, "message": "i386: Fix up -Wuninitialized warnings in avx512erintrin.h [PR105593]\n\nAs reported in the PR, there are some -Wuninitialized warnings in\navx512erintrin.h.  One can see that by compiling sse-23.c testcase with\n-Wuninitialized (or when actually using those intrinsics).\nThose 6 spots use an uninitialized variable and pass it as one of the\nargument to a builtin with constant mask -1, because there is no unmasked\nbuiltin.  It is true that expansion of those builtins into RTL will see\nmask is all ones and ignore the unneeded argument, but -Wuninitialized\nis diagnosed on GIMPLE and on GIMPLE these builtins are just builtin calls.\navx512fintrin.h and other headers use in these cases the _mm*_undefined_* ()\nintrinsics, like:\n  return (__m512i) __builtin_ia32_psrav8di_mask ((__v8di) __X,\n                                                 (__v8di) __Y,\n                                                 (__v8di)\n                                                 _mm512_undefined_epi32 (),\n                                                 (__mmask8) -1);\netc. and the following patch does the same for avx512erintrin.h.\nWith the recent changes in C++ FE and the _mm*_undefined_* intrinsics,\nwe don't emit -Wuninitialized warnings for those (previously we didn't\njust in C due to self-initialization).  Of course we could also\njust self-initialize these uninitialized vars and add the #pragma GCC\ndiagnostic dances around it, but using the intrinsics is consistent with\nthe rest and IMHO cleaner.\n\n2023-01-31  Jakub Jelinek  <jakub@redhat.com>\n\n\tPR c++/105593\n\t* config/i386/avx512erintrin.h (_mm512_exp2a23_round_pd,\n\t_mm512_exp2a23_round_ps, _mm512_rcp28_round_pd, _mm512_rcp28_round_ps,\n\t_mm512_rsqrt28_round_pd, _mm512_rsqrt28_round_ps): Use\n\t_mm512_undefined_pd () or _mm512_undefined_ps () instead of using\n\tuninitialized automatic variable __W.\n\n\t* gcc.target/i386/sse-23.c: Add -Wuninitialized to dg-options.", "tree": {"sha": "3ebbe3ba0129daf2658325eafbec3e07556e98f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/3ebbe3ba0129daf2658325eafbec3e07556e98f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/41602390456901c14ecdfa2fa64c3cebd5b6ff09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41602390456901c14ecdfa2fa64c3cebd5b6ff09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/41602390456901c14ecdfa2fa64c3cebd5b6ff09", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/41602390456901c14ecdfa2fa64c3cebd5b6ff09/comments", "author": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakubjelinek", "id": 9370665, "node_id": "MDQ6VXNlcjkzNzA2NjU=", "avatar_url": "https://avatars.githubusercontent.com/u/9370665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakubjelinek", "html_url": "https://github.com/jakubjelinek", "followers_url": "https://api.github.com/users/jakubjelinek/followers", "following_url": "https://api.github.com/users/jakubjelinek/following{/other_user}", "gists_url": "https://api.github.com/users/jakubjelinek/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakubjelinek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakubjelinek/subscriptions", "organizations_url": "https://api.github.com/users/jakubjelinek/orgs", "repos_url": "https://api.github.com/users/jakubjelinek/repos", "events_url": "https://api.github.com/users/jakubjelinek/events{/privacy}", "received_events_url": "https://api.github.com/users/jakubjelinek/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a190f583050630802438bce9aa854fdfa7a4433c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/a190f583050630802438bce9aa854fdfa7a4433c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/a190f583050630802438bce9aa854fdfa7a4433c"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "bd83b7fbbc657c5f0b0263fb2474bc29921ed04e", "filename": "gcc/config/i386/avx512erintrin.h", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41602390456901c14ecdfa2fa64c3cebd5b6ff09/gcc%2Fconfig%2Fi386%2Favx512erintrin.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41602390456901c14ecdfa2fa64c3cebd5b6ff09/gcc%2Fconfig%2Fi386%2Favx512erintrin.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Favx512erintrin.h?ref=41602390456901c14ecdfa2fa64c3cebd5b6ff09", "patch": "@@ -51,9 +51,8 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_exp2a23_round_pd (__m512d __A, int __R)\n {\n-  __m512d __W;\n   return (__m512d) __builtin_ia32_exp2pd_mask ((__v8df) __A,\n-\t\t\t\t\t       (__v8df) __W,\n+\t\t\t\t\t       (__v8df) _mm512_undefined_pd (),\n \t\t\t\t\t       (__mmask8) -1, __R);\n }\n \n@@ -79,9 +78,8 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_exp2a23_round_ps (__m512 __A, int __R)\n {\n-  __m512 __W;\n   return (__m512) __builtin_ia32_exp2ps_mask ((__v16sf) __A,\n-\t\t\t\t\t      (__v16sf) __W,\n+\t\t\t\t\t      (__v16sf) _mm512_undefined_ps (),\n \t\t\t\t\t      (__mmask16) -1, __R);\n }\n \n@@ -107,9 +105,8 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_rcp28_round_pd (__m512d __A, int __R)\n {\n-  __m512d __W;\n   return (__m512d) __builtin_ia32_rcp28pd_mask ((__v8df) __A,\n-\t\t\t\t\t\t(__v8df) __W,\n+\t\t\t\t\t\t(__v8df) _mm512_undefined_pd (),\n \t\t\t\t\t\t(__mmask8) -1, __R);\n }\n \n@@ -135,9 +132,8 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_rcp28_round_ps (__m512 __A, int __R)\n {\n-  __m512 __W;\n   return (__m512) __builtin_ia32_rcp28ps_mask ((__v16sf) __A,\n-\t\t\t\t\t       (__v16sf) __W,\n+\t\t\t\t\t       (__v16sf) _mm512_undefined_ps (),\n \t\t\t\t\t       (__mmask16) -1, __R);\n }\n \n@@ -229,9 +225,8 @@ extern __inline __m512d\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_rsqrt28_round_pd (__m512d __A, int __R)\n {\n-  __m512d __W;\n   return (__m512d) __builtin_ia32_rsqrt28pd_mask ((__v8df) __A,\n-\t\t\t\t\t\t  (__v8df) __W,\n+\t\t\t\t\t\t  (__v8df) _mm512_undefined_pd (),\n \t\t\t\t\t\t  (__mmask8) -1, __R);\n }\n \n@@ -257,9 +252,8 @@ extern __inline __m512\n __attribute__ ((__gnu_inline__, __always_inline__, __artificial__))\n _mm512_rsqrt28_round_ps (__m512 __A, int __R)\n {\n-  __m512 __W;\n   return (__m512) __builtin_ia32_rsqrt28ps_mask ((__v16sf) __A,\n-\t\t\t\t\t\t (__v16sf) __W,\n+\t\t\t\t\t\t (__v16sf) _mm512_undefined_ps (),\n \t\t\t\t\t\t (__mmask16) -1, __R);\n }\n "}, {"sha": "37cc2fd50df7312a40e7c9e1872507cd9330e7e5", "filename": "gcc/testsuite/gcc.target/i386/sse-23.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/41602390456901c14ecdfa2fa64c3cebd5b6ff09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/41602390456901c14ecdfa2fa64c3cebd5b6ff09/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Fi386%2Fsse-23.c?ref=41602390456901c14ecdfa2fa64c3cebd5b6ff09", "patch": "@@ -1,5 +1,5 @@\n /* { dg-do compile } */\n-/* { dg-options \"-O2 -Werror-implicit-function-declaration -march=k8\" } */\n+/* { dg-options \"-O2 -Werror-implicit-function-declaration -Wuninitialized -march=k8\" } */\n /* { dg-add-options bind_pic_locally } */\n \n #include <mm_malloc.h>"}]}