{"sha": "53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NTNjZDBhYzY0M2VkMWZjYjUwN2NlYjAxZGM1MzFkYTE4NjhmODhkNw==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2019-09-26T10:46:14Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2019-09-26T10:46:14Z"}, "message": "[arm] Implement non-GE-setting SIMD32 intrinsics\n\nThis patch is part of a series to implement the SIMD32 ACLE intrinsics [1].\nThe interesting parts implementation-wise involve adding support for setting and reading\nthe Q bit for saturation and the GE-bits for the packed SIMD instructions.\nThat will come in a later patch.\n\nFor now, this patch implements the other intrinsics that don't need anything special ;\njust a mapping from arm_acle.h function to builtin to RTL expander+unspec.\n\nI've compressed as many as I could with iterators so that we end up needing only 3\nnew define_insns.\n\nBootstrapped and tested on arm-none-linux-gnueabihf.\n\n[1] https://developer.arm.com/docs/101028/latest/data-processing-intrinsics\n\n\t* config/arm/arm.md (arm_<simd32_op>): New define_insn.\n\t(arm_<sup>xtb16): Likewise.\n\t(arm_usada8): Likewise.\n\t* config/arm/arm_acle.h (__qadd8, __qsub8, __shadd8, __shsub8,\n\t__uhadd8, __uhsub8, __uqadd8, __uqsub8, __qadd16, __qasx, __qsax,\n\t__qsub16, __shadd16, __shasx, __shsax, __shsub16, __uhadd16, __uhasx,\n\t__uhsax, __uhsub16, __uqadd16, __uqasx, __uqsax, __uqsub16, __sxtab16,\n\t__sxtb16, __uxtab16, __uxtb16): Define.\n\t* config/arm/arm_acle_builtins.def: Define builtins for the above.\n\t* config/arm/unspecs.md: Define unspecs for the above.\n\t* config/arm/iterators.md (SIMD32_NOGE_BINOP): New int_iterator.\n\t(USXTB16): Likewise.\n\t(simd32_op): New int_attribute.\n\t(sup): Handle UNSPEC_SXTB16, UNSPEC_UXTB16.\n\t* doc/sourcebuild.exp (arm_simd32_ok): Document.\n\n\t* lib/target-supports.exp\n\t(check_effective_target_arm_simd32_ok_nocache): New procedure.\n\t(check_effective_target_arm_simd32_ok): Likewise.\n\t(add_options_for_arm_simd32): Likewise.\n\t* gcc.target/arm/acle/simd32.c: New test.\n\nFrom-SVN: r276146", "tree": {"sha": "13204f7a6043c6707171f93949eb635c37243741", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/13204f7a6043c6707171f93949eb635c37243741"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "1275a541a59e4d74101bd34eb907ba6d5844f810", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/1275a541a59e4d74101bd34eb907ba6d5844f810", "html_url": "https://github.com/Rust-GCC/gccrs/commit/1275a541a59e4d74101bd34eb907ba6d5844f810"}], "stats": {"total": 677, "additions": 677, "deletions": 0}, "files": [{"sha": "fad363b93db91b570d3b6e6d2b08aeabdb21c1bf", "filename": "gcc/ChangeLog", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "patch": "@@ -1,3 +1,21 @@\n+2019-09-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/arm/arm.md (arm_<simd32_op>): New define_insn.\n+\t(arm_<sup>xtb16): Likewise.\n+\t(arm_usada8): Likewise.\n+\t* config/arm/arm_acle.h (__qadd8, __qsub8, __shadd8, __shsub8,\n+\t__uhadd8, __uhsub8, __uqadd8, __uqsub8, __qadd16, __qasx, __qsax,\n+\t__qsub16, __shadd16, __shasx, __shsax, __shsub16, __uhadd16, __uhasx,\n+\t__uhsax, __uhsub16, __uqadd16, __uqasx, __uqsax, __uqsub16, __sxtab16,\n+\t__sxtb16, __uxtab16, __uxtb16): Define.\n+\t* config/arm/arm_acle_builtins.def: Define builtins for the above.\n+\t* config/arm/unspecs.md: Define unspecs for the above.\n+\t* config/arm/iterators.md (SIMD32_NOGE_BINOP): New int_iterator.\n+\t(USXTB16): Likewise.\n+\t(simd32_op): New int_attribute.\n+\t(sup): Handle UNSPEC_SXTB16, UNSPEC_UXTB16.\n+\t* doc/sourcebuild.exp (arm_simd32_ok): Document.\n+\n 2019-09-26  Martin Jambor  <mjambor@suse.cz>\n \n \t* ipa-sra.c (verify_splitting_accesses): Fix quoting in a call to"}, {"sha": "99e4acde55e1e7520d88abde6294b872e5210485", "filename": "gcc/config/arm/arm.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Fconfig%2Farm%2Farm.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Fconfig%2Farm%2Farm.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.md?ref=53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "patch": "@@ -5058,6 +5058,36 @@\n    (set_attr \"predicable\" \"yes\")]\n )\n \n+(define_insn \"arm_<sup>xtb16\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:SI\n+\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")] USXTB16))]\n+  \"TARGET_INT_SIMD\"\n+  \"<sup>xtb16%?\\\\t%0, %1\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"alu_dsp_reg\")])\n+\n+(define_insn \"arm_<simd32_op>\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:SI\n+\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 2 \"s_register_operand\" \"r\")] SIMD32_NOGE_BINOP))]\n+  \"TARGET_INT_SIMD\"\n+  \"<simd32_op>%?\\\\t%0, %1, %2\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"alu_dsp_reg\")])\n+\n+(define_insn \"arm_usada8\"\n+  [(set (match_operand:SI 0 \"s_register_operand\" \"=r\")\n+\t(unspec:SI\n+\t  [(match_operand:SI 1 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 2 \"s_register_operand\" \"r\")\n+\t   (match_operand:SI 3 \"s_register_operand\" \"r\")] UNSPEC_USADA8))]\n+  \"TARGET_INT_SIMD\"\n+  \"usada8%?\\\\t%0, %1, %2, %3\"\n+  [(set_attr \"predicable\" \"yes\")\n+   (set_attr \"type\" \"alu_dsp_reg\")])\n+\n (define_expand \"extendsfdf2\"\n   [(set (match_operand:DF                  0 \"s_register_operand\")\n \t(float_extend:DF (match_operand:SF 1 \"s_register_operand\")))]"}, {"sha": "9c6f12d556654b094a23a327c030820172a03a4c", "filename": "gcc/config/arm/arm_acle.h", "status": "modified", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Fconfig%2Farm%2Farm_acle.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Fconfig%2Farm%2Farm_acle.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle.h?ref=53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "patch": "@@ -173,6 +173,238 @@ __arm_mrrc2 (const unsigned int __coproc, const unsigned int __opc1,\n #endif /*  __ARM_ARCH >= 5.  */\n #endif /* (!__thumb__ || __thumb2__) &&  __ARM_ARCH >= 4.  */\n \n+#ifdef __ARM_FEATURE_SIMD32\n+typedef int32_t int16x2_t;\n+typedef uint32_t uint16x2_t;\n+typedef int32_t int8x4_t;\n+typedef uint32_t uint8x4_t;\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__sxtab16 (int16x2_t __a, int8x4_t __b)\n+{\n+  return __builtin_arm_sxtab16 (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__sxtb16 (int8x4_t __a)\n+{\n+  return __builtin_arm_sxtb16 (__a);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uxtab16 (uint16x2_t __a, uint8x4_t __b)\n+{\n+  return __builtin_arm_uxtab16 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uxtb16 (uint8x4_t __a)\n+{\n+  return __builtin_arm_uxtb16 (__a);\n+}\n+\n+__extension__ extern __inline int8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__qadd8 (int8x4_t __a, int8x4_t __b)\n+{\n+  return __builtin_arm_qadd8 (__a, __b);\n+}\n+\n+__extension__ extern __inline int8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__qsub8 (int8x4_t __a, int8x4_t __b)\n+{\n+  return __builtin_arm_qsub8 (__a, __b);\n+}\n+\n+__extension__ extern __inline int8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__shadd8 (int8x4_t __a, int8x4_t __b)\n+{\n+  return __builtin_arm_shadd8 (__a, __b);\n+}\n+\n+__extension__ extern __inline int8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__shsub8 (int8x4_t __a, int8x4_t __b)\n+{\n+  return __builtin_arm_shsub8 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uhadd8 (uint8x4_t __a, uint8x4_t __b)\n+{\n+  return __builtin_arm_uhadd8 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uhsub8 (uint8x4_t __a, uint8x4_t __b)\n+{\n+  return __builtin_arm_uhsub8 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uqadd8 (uint8x4_t __a, uint8x4_t __b)\n+{\n+  return __builtin_arm_uqadd8 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint8x4_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uqsub8 (uint8x4_t __a, uint8x4_t __b)\n+{\n+  return __builtin_arm_uqsub8 (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__qadd16 (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_qadd16 (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__qasx (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_qasx (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__qsax (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_qsax (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__qsub16 (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_qsub16 (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__shadd16 (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_shadd16 (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__shasx (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_shasx (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__shsax (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_shsax (__a, __b);\n+}\n+\n+__extension__ extern __inline int16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__shsub16 (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_shsub16 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uhadd16 (uint16x2_t __a, uint16x2_t __b)\n+{\n+  return __builtin_arm_uhadd16 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uhasx (uint16x2_t __a, uint16x2_t __b)\n+{\n+  return __builtin_arm_uhasx (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uhsax (uint16x2_t __a, uint16x2_t __b)\n+{\n+  return __builtin_arm_uhsax (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uhsub16 (uint16x2_t __a, uint16x2_t __b)\n+{\n+  return __builtin_arm_uhsub16 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uqadd16 (uint16x2_t __a, uint16x2_t __b)\n+{\n+  return __builtin_arm_uqadd16 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uqasx (uint16x2_t __a, uint16x2_t __b)\n+{\n+  return __builtin_arm_uqasx (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uqsax (uint16x2_t __a, uint16x2_t __b)\n+{\n+  return __builtin_arm_uqsax (__a, __b);\n+}\n+\n+__extension__ extern __inline uint16x2_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__uqsub16 (uint16x2_t __a, uint16x2_t __b)\n+{\n+  return __builtin_arm_uqsub16 (__a, __b);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smusd (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_smusd (__a, __b);\n+}\n+\n+__extension__ extern __inline int32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__smusdx (int16x2_t __a, int16x2_t __b)\n+{\n+  return __builtin_arm_smusdx (__a, __b);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__usad8 (uint8x4_t __a, uint8x4_t __b)\n+{\n+  return __builtin_arm_usad8 (__a, __b);\n+}\n+\n+__extension__ extern __inline uint32_t\n+__attribute__ ((__always_inline__, __gnu_inline__, __artificial__))\n+__usada8 (uint8x4_t __a, uint8x4_t __b, uint32_t __c)\n+{\n+  return __builtin_arm_usada8 (__a, __b, __c);\n+}\n+\n+#endif\n+\n #pragma GCC push_options\n #ifdef __ARM_FEATURE_CRC32\n #ifdef __ARM_FP"}, {"sha": "c675fc46dae6552b8762e9bbb6147d8a6d15133a", "filename": "gcc/config/arm/arm_acle_builtins.def", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm_acle_builtins.def?ref=53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "patch": "@@ -42,3 +42,36 @@ VAR1 (MCRR, mcrr, void)\n VAR1 (MCRR, mcrr2, void)\n VAR1 (MRRC, mrrc, di)\n VAR1 (MRRC, mrrc2, di)\n+\n+VAR1 (BINOP, sxtab16, si)\n+VAR1 (UBINOP, uxtab16, si)\n+VAR1 (UNOP, sxtb16, si)\n+VAR1 (BSWAP, uxtb16, si)\n+VAR1 (BINOP, qadd8, si)\n+VAR1 (BINOP, qsub8, si)\n+VAR1 (BINOP, shadd8, si)\n+VAR1 (BINOP, shsub8, si)\n+VAR1 (UBINOP, uhadd8, si)\n+VAR1 (UBINOP, uhsub8, si)\n+VAR1 (UBINOP, uqadd8, si)\n+VAR1 (UBINOP, uqsub8, si)\n+VAR1 (BINOP, qadd16, si)\n+VAR1 (BINOP, qasx, si)\n+VAR1 (BINOP, qsax, si)\n+VAR1 (BINOP, qsub16, si)\n+VAR1 (BINOP, shadd16, si)\n+VAR1 (BINOP, shasx, si)\n+VAR1 (BINOP, shsax, si)\n+VAR1 (BINOP, shsub16, si)\n+VAR1 (UBINOP, uhadd16, si)\n+VAR1 (UBINOP, uhasx, si)\n+VAR1 (UBINOP, uhsax, si)\n+VAR1 (UBINOP, uhsub16, si)\n+VAR1 (UBINOP, uqadd16, si)\n+VAR1 (UBINOP, uqasx, si)\n+VAR1 (UBINOP, uqsax, si)\n+VAR1 (UBINOP, uqsub16, si)\n+VAR1 (BINOP, smusd, si)\n+VAR1 (BINOP, smusdx, si)\n+VAR1 (UBINOP, usad8, si)\n+VAR1 (UBINOP, usada8, si)"}, {"sha": "538f5bf6b0116f49b27eef589b0140aa7792e976", "filename": "gcc/config/arm/iterators.md", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Fconfig%2Farm%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Fconfig%2Farm%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Fiterators.md?ref=53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "patch": "@@ -430,6 +430,19 @@\n (define_int_iterator CRYPTO_SELECTING [UNSPEC_SHA1C UNSPEC_SHA1M\n                                        UNSPEC_SHA1P])\n \n+(define_int_iterator USXTB16 [UNSPEC_SXTB16 UNSPEC_UXTB16])\n+(define_int_iterator SIMD32_NOGE_BINOP\n+\t\t\t\t[UNSPEC_QADD8 UNSPEC_QSUB8 UNSPEC_SHADD8\n+\t\t\t\t UNSPEC_SHSUB8 UNSPEC_UHADD8 UNSPEC_UHSUB8\n+\t\t\t\t UNSPEC_UQADD8 UNSPEC_UQSUB8\n+\t\t\t\t UNSPEC_QADD16 UNSPEC_QASX UNSPEC_QSAX\n+\t\t\t\t UNSPEC_QSUB16 UNSPEC_SHADD16 UNSPEC_SHASX\n+\t\t\t\t UNSPEC_SHSAX UNSPEC_SHSUB16 UNSPEC_UHADD16\n+\t\t\t\t UNSPEC_UHASX UNSPEC_UHSAX UNSPEC_UHSUB16\n+\t\t\t\t UNSPEC_UQADD16 UNSPEC_UQASX UNSPEC_UQSAX\n+\t\t\t\t UNSPEC_UQSUB16 UNSPEC_SMUSD UNSPEC_SMUSDX\n+\t\t\t\t UNSPEC_SXTAB16 UNSPEC_UXTAB16 UNSPEC_USAD8])\n+\n (define_int_iterator VQRDMLH_AS [UNSPEC_VQRDMLAH UNSPEC_VQRDMLSH])\n \n (define_int_iterator VFM_LANE_AS [UNSPEC_VFMA_LANE UNSPEC_VFMS_LANE])\n@@ -835,6 +848,7 @@\n ;; Mapping between vector UNSPEC operations and the signed ('s'),\n ;; unsigned ('u'), poly ('p') or float ('f') nature of their data type.\n (define_int_attr sup [\n+  (UNSPEC_SXTB16 \"s\") (UNSPEC_UXTB16 \"u\")\n   (UNSPEC_VADDL_S \"s\") (UNSPEC_VADDL_U \"u\")\n   (UNSPEC_VADDW_S \"s\") (UNSPEC_VADDW_U \"u\")\n   (UNSPEC_VRHADD_S \"s\") (UNSPEC_VRHADD_U \"u\")\n@@ -1023,6 +1037,22 @@\n \t\t      (UNSPEC_VCMLA180 \"180\")\n \t\t      (UNSPEC_VCMLA270 \"270\")])\n \n+(define_int_attr simd32_op [(UNSPEC_QADD8 \"qadd8\") (UNSPEC_QSUB8 \"qsub8\")\n+\t\t\t    (UNSPEC_SHADD8 \"shadd8\") (UNSPEC_SHSUB8 \"shsub8\")\n+\t\t\t    (UNSPEC_UHADD8 \"uhadd8\") (UNSPEC_UHSUB8 \"uhsub8\")\n+\t\t\t    (UNSPEC_UQADD8 \"uqadd8\") (UNSPEC_UQSUB8 \"uqsub8\")\n+\t\t\t    (UNSPEC_QADD16 \"qadd16\") (UNSPEC_QASX \"qasx\")\n+\t\t\t    (UNSPEC_QSAX \"qsax\") (UNSPEC_QSUB16 \"qsub16\")\n+\t\t\t    (UNSPEC_SHADD16 \"shadd16\") (UNSPEC_SHASX \"shasx\")\n+\t\t\t    (UNSPEC_SHSAX \"shsax\") (UNSPEC_SHSUB16 \"shsub16\")\n+\t\t\t    (UNSPEC_UHADD16 \"uhadd16\") (UNSPEC_UHASX \"uhasx\")\n+\t\t\t    (UNSPEC_UHSAX \"uhsax\") (UNSPEC_UHSUB16 \"uhsub16\")\n+\t\t\t    (UNSPEC_UQADD16 \"uqadd16\") (UNSPEC_UQASX \"uqasx\")\n+\t\t\t    (UNSPEC_UQSAX \"uqsax\") (UNSPEC_UQSUB16 \"uqsub16\")\n+\t\t\t    (UNSPEC_SMUSD \"smusd\") (UNSPEC_SMUSDX \"smusdx\")\n+\t\t\t    (UNSPEC_SXTAB16 \"sxtab16\") (UNSPEC_UXTAB16 \"uxtab16\")\n+\t\t\t    (UNSPEC_USAD8 \"usad8\")])\n+\n ;; Both kinds of return insn.\n (define_code_iterator RETURNS [return simple_return])\n (define_code_attr return_str [(return \"\") (simple_return \"simple_\")])"}, {"sha": "08a6cd77ce08d8c9cf42abcf3c9277b769043cfd", "filename": "gcc/config/arm/unspecs.md", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Fconfig%2Farm%2Funspecs.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Fconfig%2Farm%2Funspecs.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Funspecs.md?ref=53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "patch": "@@ -90,8 +90,42 @@\n   UNSPEC_SP_TEST\t; Represent the testing of stack protector's canary\n \t\t\t; against the guard.\n   UNSPEC_PIC_RESTORE\t; Use to restore fdpic register\n+\n+  UNSPEC_SXTAB16\t; Represent the SXTAB16 operation.\n+  UNSPEC_UXTAB16\t; Represent the UXTAB16 operation.\n+  UNSPEC_SXTB16\t\t; Represent the SXTB16 operation.\n+  UNSPEC_UXTB16\t\t; Represent the UXTB16 operation.\n+  UNSPEC_QADD8\t\t; Represent the QADD8 operation.\n+  UNSPEC_QSUB8\t\t; Represent the QSUB8 operation.\n+  UNSPEC_SHADD8\t\t; Represent the SHADD8 operation.\n+  UNSPEC_SHSUB8\t\t; Represent the SHSUB8 operation.\n+  UNSPEC_UHADD8\t\t; Represent the UHADD8 operation.\n+  UNSPEC_UHSUB8\t\t; Represent the UHSUB8 operation.\n+  UNSPEC_UQADD8\t\t; Represent the UQADD8 operation.\n+  UNSPEC_UQSUB8\t\t; Represent the UQSUB8 operation.\n+  UNSPEC_QADD16\t\t; Represent the QADD16 operation.\n+  UNSPEC_QASX\t\t; Represent the QASX operation.\n+  UNSPEC_QSAX\t\t; Represent the QSAX operation.\n+  UNSPEC_QSUB16\t\t; Represent the QSUB16 operation.\n+  UNSPEC_SHADD16\t; Represent the SHADD16 operation.\n+  UNSPEC_SHASX\t\t; Represent the SHASX operation.\n+  UNSPEC_SHSAX\t\t; Represent the SSAX operation.\n+  UNSPEC_SHSUB16\t; Represent the SHSUB16 operation.\n+  UNSPEC_UHADD16\t; Represent the UHADD16 operation.\n+  UNSPEC_UHASX\t\t; Represent the UHASX operation.\n+  UNSPEC_UHSAX\t\t; Represent the USAX operation.\n+  UNSPEC_UHSUB16\t; Represent the UHSUB16 operation.\n+  UNSPEC_UQADD16\t; Represent the UQADD16 operation.\n+  UNSPEC_UQASX\t\t; Represent the UQASX operation.\n+  UNSPEC_UQSAX\t\t; Represent the UQSAX operation.\n+  UNSPEC_UQSUB16\t; Represent the UQSUB16 operation.\n+  UNSPEC_SMUSD\t\t; Represent the SMUSD operation.\n+  UNSPEC_SMUSDX\t\t; Represent the SMUSDX operation.\n+  UNSPEC_USAD8\t\t; Represent the USAD8 operation.\n+  UNSPEC_USADA8\t\t; Represent the USADA8 operation.\n ])\n \n+\n (define_c_enum \"unspec\" [\n   UNSPEC_WADDC\t\t; Used by the intrinsic form of the iWMMXt WADDC instruction.\n   UNSPEC_WABS\t\t; Used by the intrinsic form of the iWMMXt WABS instruction."}, {"sha": "9b98f0132635f470bf25a420b68dbdfeafd73c7a", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "patch": "@@ -1900,6 +1900,13 @@ in @ref{arm_coproc2_ok} in addition the following: @code{MCRR} and @code{MRRC}.\n @item arm_coproc4_ok\n ARM target supports all the coprocessor instructions also listed as supported\n in @ref{arm_coproc3_ok} in addition the following: @code{MCRR2} and @code{MRRC2}.\n+\n+@item arm_simd32_ok\n+@anchor{arm_simd32_ok}\n+ARM Target supports options suitable for accessing the SIMD32 intrinsics from\n+@code{arm_acle.h}.\n+Some multilibs may be incompatible with these options.\n+\n @end table\n \n @subsubsection AArch64-specific attributes"}, {"sha": "d3a0af6ced1612794eb2ce8946c284a3fbd58ff0", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "patch": "@@ -1,3 +1,11 @@\n+2019-09-26  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* lib/target-supports.exp\n+\t(check_effective_target_arm_simd32_ok_nocache): New procedure.\n+\t(check_effective_target_arm_simd32_ok): Likewise.\n+\t(add_options_for_arm_simd32): Likewise.\n+\t* gcc.target/arm/acle/simd32.c: New test.\n+\n 2019-09-26  Richard Sandiford  <richard.sandiford@arm.com>\n \n \t* gcc.target/arm/fp16-compile-alt-3.c: Expect (__fp16) -2.0"}, {"sha": "f5c116d13968eefa42bea86b1e44bba8c66d7b77", "filename": "gcc/testsuite/gcc.target/arm/acle/simd32.c", "status": "added", "additions": 246, "deletions": 0, "changes": 246, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Farm%2Facle%2Fsimd32.c?ref=53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "patch": "@@ -0,0 +1,246 @@\n+/* { dg-do compile } */\n+/* { dg-require-effective-target arm_simd32_ok } */\n+/* { dg-add-options arm_simd32 } */\n+\n+#include <arm_acle.h>\n+\n+int16x2_t\n+test_sxtab16 (int16x2_t a, int8x4_t b)\n+{\n+  return __sxtab16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sxtab16\\t...?, ...?, ...?\" 1 } } */\n+\n+\n+int16x2_t\n+test_sxtb16 (int8x4_t a)\n+{\n+  return __sxtb16 (a);\n+}\n+\n+/* { dg-final { scan-assembler-times \"sxtab16\\t...?, ...?\" 1 } } */\n+\n+int8x4_t\n+test_qadd8 (int8x4_t a, int8x4_t b)\n+{\n+  return __qadd8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tqadd8\\t...?, ...?, ...?\" 1 } } */\n+\n+int8x4_t\n+test_qsub8 (int8x4_t a, int8x4_t b)\n+{\n+  return __qsub8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tqsub8\\t...?, ...?, ...?\" 1 } } */\n+\n+int8x4_t\n+test_shadd8 (int8x4_t a, int8x4_t b)\n+{\n+  return __shadd8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tshadd8\\t...?, ...?, ...?\" 1 } } */\n+\n+int8x4_t\n+test_shsub8 (int8x4_t a, int8x4_t b)\n+{\n+  return __shsub8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tshsub8\\t...?, ...?, ...?\" 1 } } */\n+\n+uint8x4_t\n+test_uhadd8 (uint8x4_t a, uint8x4_t b)\n+{\n+  return __uhadd8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuhadd8\\t...?, ...?, ...?\" 1 } } */\n+\n+uint8x4_t\n+test_uhsub8 (uint8x4_t a, uint8x4_t b)\n+{\n+  return __uhsub8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuhsub8\\t...?, ...?, ...?\" 1 } } */\n+\n+uint8x4_t\n+test_uqadd8 (uint8x4_t a, uint8x4_t b)\n+{\n+  return __uqadd8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuqadd8\\t...?, ...?, ...?\" 1 } } */\n+\n+uint8x4_t\n+test_uqsub8 (uint8x4_t a, uint8x4_t b)\n+{\n+  return __uqsub8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuqsub8\\t...?, ...?, ...?\" 1 } } */\n+\n+int16x2_t\n+test_qadd16 (int16x2_t a, int16x2_t b)\n+{\n+  return __qadd16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tqadd16\\t...?, ...?, ...?\" 1 } } */\n+\n+int16x2_t\n+test_qasx (int16x2_t a, int16x2_t b)\n+{\n+  return __qasx (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tqasx\\t...?, ...?, ...?\" 1 } } */\n+\n+int16x2_t\n+test_qsax (int16x2_t a, int16x2_t b)\n+{\n+  return __qsax (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tqsax\\t...?, ...?, ...?\" 1 } } */\n+\n+int16x2_t\n+test_qsub16 (int16x2_t a, int16x2_t b)\n+{\n+  return __qsub16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tqsub16\\t...?, ...?, ...?\" 1 } } */\n+\n+int16x2_t\n+test_shadd16 (int16x2_t a, int16x2_t b)\n+{\n+  return __shadd16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tshadd16\\t...?, ...?, ...?\" 1 } } */\n+\n+int16x2_t\n+test_shasx (int16x2_t a, int16x2_t b)\n+{\n+  return __shasx (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tshasx\\t...?, ...?, ...?\" 1 } } */\n+\n+int16x2_t\n+test_shsax (int16x2_t a, int16x2_t b)\n+{\n+  return __shsax (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tshsax\\t...?, ...?, ...?\" 1 } } */\n+\n+int16x2_t\n+test_shsub16 (int16x2_t a, int16x2_t b)\n+{\n+  return __shsub16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tshsub16\\t...?, ...?, ...?\" 1 } } */\n+\n+uint16x2_t\n+test_uhadd16 (uint16x2_t a, uint16x2_t b)\n+{\n+  return __uhadd16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuhadd16\\t...?, ...?, ...?\" 1 } } */\n+\n+uint16x2_t\n+test_uhasx (uint16x2_t a, uint16x2_t b)\n+{\n+  return __uhasx (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuhasx\\t...?, ...?, ...?\" 1 } } */\n+\n+uint16x2_t\n+test_uhsax (uint16x2_t a, uint16x2_t b)\n+{\n+  return __uhsax (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuhsax\\t...?, ...?, ...?\" 1 } } */\n+\n+uint16x2_t\n+test_uhsub16 (uint16x2_t a, uint16x2_t b)\n+{\n+  return __uhsub16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuhsub16\\t...?, ...?, ...?\" 1 } } */\n+\n+uint16x2_t\n+test_uqadd16 (uint16x2_t a, uint16x2_t b)\n+{\n+  return __uqadd16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuqadd16\\t...?, ...?, ...?\" 1 } } */\n+\n+uint16x2_t\n+test_uqasx (uint16x2_t a, uint16x2_t b)\n+{\n+  return __uqasx (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuqasx\\t...?, ...?, ...?\" 1 } } */\n+\n+uint16x2_t\n+test_uqsax (uint16x2_t a, uint16x2_t b)\n+{\n+  return __uqsax (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuqsax\\t...?, ...?, ...?\" 1 } } */\n+\n+uint16x2_t\n+test_uqsub16 (uint16x2_t a, uint16x2_t b)\n+{\n+  return __uqsub16 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tuqsub16\\t...?, ...?, ...?\" 1 } } */\n+\n+int32_t\n+test_smusd (int16x2_t a, int16x2_t b)\n+{\n+  return __smusd (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsmusd\\t...?, ...?, ...?\" 1 } } */\n+\n+int32_t\n+test_smusdx (int16x2_t a, int16x2_t b)\n+{\n+  return __smusdx (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tsmusdx\\t...?, ...?, ...?\" 1 } } */\n+\n+uint32_t\n+test_usad8 (uint8x4_t a, uint8x4_t b)\n+{\n+  return __usad8 (a, b);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tusad8\\t...?, ...?, ...?\" 1 } } */\n+\n+uint32_t\n+test_usada8 (uint8x4_t a, uint8x4_t b, uint32_t c)\n+{\n+  return __usada8 (a, b, c);\n+}\n+\n+/* { dg-final { scan-assembler-times \"\\tusada8\\t...?, ...?, ...?, ...?\" 1 } } */"}, {"sha": "0268acd91d8f65e7a24653592dbe1d374d24359c", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/53cd0ac643ed1fcb507ceb01dc531da1868f88d7/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=53cd0ac643ed1fcb507ceb01dc531da1868f88d7", "patch": "@@ -3806,6 +3806,45 @@ proc check_effective_target_arm_neon_ok { } {\n \t\tcheck_effective_target_arm_neon_ok_nocache]\n }\n \n+\n+# Return 1 if this is an ARM target supporting the SIMD32 intrinsics\n+# from arm_acle.h.  Some multilibs may be incompatible with these options.\n+# Also set et_arm_simd32_flags to the best options to add.\n+# arm_acle.h includes stdint.h which can cause trouble with incompatible\n+# -mfloat-abi= options.\n+\n+proc check_effective_target_arm_simd32_ok_nocache { } {\n+    global et_arm_simd32_flags\n+    set et_arm_simd32_flags \"\"\n+    foreach flags {\"\" \"-march=armv6\" \"-march=armv6 -mfloat-abi=softfp\" \"-march=armv6 -mfloat-abi=hard\"} {\n+      if { [check_no_compiler_messages_nocache arm_simd32_ok object {\n+\t#include <arm_acle.h>\n+\tint dummy;\n+\t#ifndef __ARM_FEATURE_SIMD32\n+\t#error not SIMD32\n+\t#endif\n+      } \"$flags\"] } {\n+\tset et_arm_simd32_flags $flags\n+\treturn 1\n+      }\n+    }\n+\n+  return 0\n+}\n+\n+proc check_effective_target_arm_simd32_ok { } {\n+    return [check_cached_effective_target arm_simd32_ok \\\n+\t\tcheck_effective_target_arm_simd32_ok_nocache]\n+}\n+\n+proc add_options_for_arm_simd32 { flags } {\n+    if { ! [check_effective_target_arm_simd32_ok] } {\n+\treturn \"$flags\"\n+    }\n+    global et_arm_simd32_flags\n+    return \"$flags $et_arm_simd32_flags\"\n+}\n+\n # Return 1 if this is an ARM target supporting -mfpu=neon without any\n # -mfloat-abi= option.  Useful in tests where add_options is not\n # supported (such as lto tests)."}]}