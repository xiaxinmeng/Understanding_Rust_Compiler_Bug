{"sha": "bd280792f0d07edaca70aabe97ab873bcdda8de2", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmQyODA3OTJmMGQwN2VkYWNhNzBhYWJlOTdhYjg3M2JjZGRhOGRlMg==", "commit": {"author": {"name": "Joern Rennecke", "email": "joern.rennecke@embecosm.com", "date": "2013-06-20T12:43:29Z"}, "committer": {"name": "Joern Rennecke", "email": "amylaar@gcc.gnu.org", "date": "2013-06-20T12:43:29Z"}, "message": "re PR rtl-optimization/57425 (RTL alias analysis unprepared to handle stack slot sharing)\n\n        PR rtl-optimization/57425\n        PR rtl-optimization/57569\n        * alias.c (write_dependence_p): Remove parameters mem_mode and\n        canon_mem_addr.  Add parameters x_mode, x_addr and x_canonicalized.\n        Changed all callers.\n        (canon_anti_dependence): Get comments and semantics in sync.\n        Add parameter mem_canonicalized.  Changed all callers.\n        * rtl.h (canon_anti_dependence): Update prototype.\n\nFrom-SVN: r200241", "tree": {"sha": "9061645d80e98b754d68939deb5f6aaf1b2dbf33", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9061645d80e98b754d68939deb5f6aaf1b2dbf33"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/bd280792f0d07edaca70aabe97ab873bcdda8de2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd280792f0d07edaca70aabe97ab873bcdda8de2", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bd280792f0d07edaca70aabe97ab873bcdda8de2", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bd280792f0d07edaca70aabe97ab873bcdda8de2/comments", "author": {"login": "amylaar", "id": 1663475, "node_id": "MDQ6VXNlcjE2NjM0NzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1663475?v=4", "gravatar_id": "", "url": "https://api.github.com/users/amylaar", "html_url": "https://github.com/amylaar", "followers_url": "https://api.github.com/users/amylaar/followers", "following_url": "https://api.github.com/users/amylaar/following{/other_user}", "gists_url": "https://api.github.com/users/amylaar/gists{/gist_id}", "starred_url": "https://api.github.com/users/amylaar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/amylaar/subscriptions", "organizations_url": "https://api.github.com/users/amylaar/orgs", "repos_url": "https://api.github.com/users/amylaar/repos", "events_url": "https://api.github.com/users/amylaar/events{/privacy}", "received_events_url": "https://api.github.com/users/amylaar/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "d16e9a99f948b7080132e0c4830faa4f0eba712c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d16e9a99f948b7080132e0c4830faa4f0eba712c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d16e9a99f948b7080132e0c4830faa4f0eba712c"}], "stats": {"total": 107, "additions": 64, "deletions": 43}, "files": [{"sha": "63e100ba563f2eeae3d20d796505bed0d1f67ed5", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd280792f0d07edaca70aabe97ab873bcdda8de2/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd280792f0d07edaca70aabe97ab873bcdda8de2/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=bd280792f0d07edaca70aabe97ab873bcdda8de2", "patch": "@@ -1,3 +1,14 @@\n+2013-06-20  Joern Rennecke <joern.rennecke@embecosm.com>\n+\n+\tPR rtl-optimization/57425\n+\tPR rtl-optimization/57569\n+\t* alias.c (write_dependence_p): Remove parameters mem_mode and\n+\tcanon_mem_addr.  Add parameters x_mode, x_addr and x_canonicalized.\n+\tChanged all callers.\n+\t(canon_anti_dependence): Get comments and semantics in sync.\n+\tAdd parameter mem_canonicalized.  Changed all callers.\n+\t* rtl.h (canon_anti_dependence): Update prototype.\n+\n 2013-06-20  Richard Biener  <rguenther@suse.de>\n \n \t* data-streamer-in.c (streamer_read_uhwi): Optimize single"}, {"sha": "18445794f9e7b4f3d009badd845b1389acacf5a2", "filename": "gcc/alias.c", "status": "modified", "additions": 48, "deletions": 38, "changes": 86, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd280792f0d07edaca70aabe97ab873bcdda8de2/gcc%2Falias.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd280792f0d07edaca70aabe97ab873bcdda8de2/gcc%2Falias.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Falias.c?ref=bd280792f0d07edaca70aabe97ab873bcdda8de2", "patch": "@@ -156,8 +156,9 @@ static int insert_subset_children (splay_tree_node, void*);\n static alias_set_entry get_alias_set_entry (alias_set_type);\n static bool nonoverlapping_component_refs_p (const_rtx, const_rtx);\n static tree decl_for_component_ref (tree);\n-static int write_dependence_p (const_rtx, enum machine_mode, rtx, const_rtx,\n-\t\t\t       bool, bool);\n+static int write_dependence_p (const_rtx,\n+\t\t\t       const_rtx, enum machine_mode, rtx,\n+\t\t\t       bool, bool, bool);\n \n static void memory_modified_1 (rtx, const_rtx, void *);\n \n@@ -2555,20 +2556,22 @@ canon_true_dependence (const_rtx mem, enum machine_mode mem_mode, rtx mem_addr,\n \n /* Returns nonzero if a write to X might alias a previous read from\n    (or, if WRITEP is true, a write to) MEM.\n-   If MEM_CANONCALIZED is nonzero, CANON_MEM_ADDR is the canonicalized\n-   address of MEM, and MEM_MODE the mode for that access.  */\n+   If X_CANONCALIZED is true, then X_ADDR is the canonicalized address of X,\n+   and X_MODE the mode for that access.\n+   If MEM_CANONICALIZED is true, MEM is canonicalized.  */\n \n static int\n-write_dependence_p (const_rtx mem, enum machine_mode mem_mode,\n-\t\t    rtx canon_mem_addr, const_rtx x,\n-\t\t    bool mem_canonicalized, bool writep)\n+write_dependence_p (const_rtx mem,\n+\t\t    const_rtx x, enum machine_mode x_mode, rtx x_addr,\n+\t\t    bool mem_canonicalized, bool x_canonicalized, bool writep)\n {\n-  rtx x_addr, mem_addr;\n+  rtx mem_addr;\n   rtx base;\n   int ret;\n \n-  gcc_checking_assert (mem_canonicalized ? (canon_mem_addr != NULL_RTX)\n-\t\t       : (canon_mem_addr == NULL_RTX && mem_mode == VOIDmode));\n+  gcc_checking_assert (x_canonicalized\n+\t\t       ? (x_addr != NULL_RTX && x_mode != VOIDmode)\n+\t\t       : (x_addr == NULL_RTX && x_mode == VOIDmode));\n \n   if (MEM_VOLATILE_P (x) && MEM_VOLATILE_P (mem))\n     return 1;\n@@ -2593,17 +2596,21 @@ write_dependence_p (const_rtx mem, enum machine_mode mem_mode,\n   if (MEM_ADDR_SPACE (mem) != MEM_ADDR_SPACE (x))\n     return 1;\n \n-  x_addr = XEXP (x, 0);\n   mem_addr = XEXP (mem, 0);\n-  if (!((GET_CODE (x_addr) == VALUE\n-\t && GET_CODE (mem_addr) != VALUE\n-\t && reg_mentioned_p (x_addr, mem_addr))\n-\t|| (GET_CODE (x_addr) != VALUE\n-\t    && GET_CODE (mem_addr) == VALUE\n-\t    && reg_mentioned_p (mem_addr, x_addr))))\n+  if (!x_addr)\n     {\n-      x_addr = get_addr (x_addr);\n-      mem_addr = get_addr (mem_addr);\n+      x_addr = XEXP (x, 0);\n+      if (!((GET_CODE (x_addr) == VALUE\n+\t     && GET_CODE (mem_addr) != VALUE\n+\t     && reg_mentioned_p (x_addr, mem_addr))\n+\t    || (GET_CODE (x_addr) != VALUE\n+\t\t&& GET_CODE (mem_addr) == VALUE\n+\t\t&& reg_mentioned_p (mem_addr, x_addr))))\n+\t{\n+\t  x_addr = get_addr (x_addr);\n+\t  if (!mem_canonicalized)\n+\t    mem_addr = get_addr (mem_addr);\n+\t}\n     }\n \n   base = find_base_term (mem_addr);\n@@ -2619,17 +2626,16 @@ write_dependence_p (const_rtx mem, enum machine_mode mem_mode,\n \t\t\t  GET_MODE (mem)))\n     return 0;\n \n-  x_addr = canon_rtx (x_addr);\n-  if (mem_canonicalized)\n-    mem_addr = canon_mem_addr;\n-  else\n+  if (!x_canonicalized)\n     {\n-      mem_addr = canon_rtx (mem_addr);\n-      mem_mode = GET_MODE (mem);\n+      x_addr = canon_rtx (x_addr);\n+      x_mode = GET_MODE (x);\n     }\n+  if (!mem_canonicalized)\n+    mem_addr = canon_rtx (mem_addr);\n \n-  if ((ret = memrefs_conflict_p (GET_MODE_SIZE (mem_mode), mem_addr,\n-\t\t\t\t SIZE_FOR_MODE (x), x_addr, 0)) != -1)\n+  if ((ret = memrefs_conflict_p (SIZE_FOR_MODE (mem), mem_addr,\n+\t\t\t\t GET_MODE_SIZE (x_mode), x_addr, 0)) != -1)\n     return ret;\n \n   if (nonoverlapping_memrefs_p (x, mem, false))\n@@ -2643,29 +2649,33 @@ write_dependence_p (const_rtx mem, enum machine_mode mem_mode,\n int\n anti_dependence (const_rtx mem, const_rtx x)\n {\n-  return write_dependence_p (mem, VOIDmode, NULL_RTX, x,\n-\t\t\t     /*mem_canonicalized=*/false, /*writep=*/false);\n+  return write_dependence_p (mem, x, VOIDmode, NULL_RTX,\n+\t\t\t     /*mem_canonicalized=*/false,\n+\t\t\t     /*x_canonicalized*/false, /*writep=*/false);\n }\n \n-/* Likewise, but we already have a canonicalized MEM_ADDR for MEM.\n-   Also, consider MEM in MEM_MODE (which might be from an enclosing\n-   STRICT_LOW_PART / ZERO_EXTRACT).  */\n+/* Likewise, but we already have a canonicalized MEM, and X_ADDR for X.\n+   Also, consider X in X_MODE (which might be from an enclosing\n+   STRICT_LOW_PART / ZERO_EXTRACT).\n+   If MEM_CANONICALIZED is true, MEM is canonicalized.  */\n \n int\n-canon_anti_dependence (const_rtx mem, enum machine_mode mem_mode,\n-\t\t       rtx mem_addr, const_rtx x)\n+canon_anti_dependence (const_rtx mem, bool mem_canonicalized,\n+\t\t       const_rtx x, enum machine_mode x_mode, rtx x_addr)\n {\n-  return write_dependence_p (mem, mem_mode, mem_addr, x,\n-\t\t\t     /*mem_canonicalized=*/true, /*writep=*/false);\n+  return write_dependence_p (mem, x, x_mode, x_addr,\n+\t\t\t     mem_canonicalized, /*x_canonicalized=*/true,\n+\t\t\t     /*writep=*/false);\n }\n \n /* Output dependence: X is written after store in MEM takes place.  */\n \n int\n output_dependence (const_rtx mem, const_rtx x)\n {\n-  return write_dependence_p (mem, VOIDmode, NULL_RTX, x,\n-\t\t\t     /*mem_canonicalized=*/false, /*writep=*/true);\n+  return write_dependence_p (mem, x, VOIDmode, NULL_RTX,\n+\t\t\t     /*mem_canonicalized=*/false,\n+\t\t\t     /*x_canonicalized*/false, /*writep=*/true);\n }\n \f\n "}, {"sha": "31a1cd03f6642352744841b6a8cd077e51f10850", "filename": "gcc/cse.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd280792f0d07edaca70aabe97ab873bcdda8de2/gcc%2Fcse.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd280792f0d07edaca70aabe97ab873bcdda8de2/gcc%2Fcse.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcse.c?ref=bd280792f0d07edaca70aabe97ab873bcdda8de2", "patch": "@@ -1837,7 +1837,7 @@ check_dependence (rtx *x, void *data)\n {\n   struct check_dependence_data *d = (struct check_dependence_data *) data;\n   if (*x && MEM_P (*x))\n-    return canon_anti_dependence (d->exp, d->mode, d->addr, *x);\n+    return canon_anti_dependence (*x, true, d->exp, d->mode, d->addr);\n   else\n     return 0;\n }"}, {"sha": "c3431af12469365eb4e3df8b357be120d3aba72a", "filename": "gcc/cselib.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd280792f0d07edaca70aabe97ab873bcdda8de2/gcc%2Fcselib.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd280792f0d07edaca70aabe97ab873bcdda8de2/gcc%2Fcselib.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcselib.c?ref=bd280792f0d07edaca70aabe97ab873bcdda8de2", "patch": "@@ -2263,8 +2263,8 @@ cselib_invalidate_mem (rtx mem_rtx)\n \t      continue;\n \t    }\n \t  if (num_mems < PARAM_VALUE (PARAM_MAX_CSELIB_MEMORY_LOCATIONS)\n-\t      && ! canon_anti_dependence (mem_rtx, GET_MODE (mem_rtx),\n-\t\t\t\t\t  mem_addr, x))\n+\t      && ! canon_anti_dependence (x, false, mem_rtx,\n+\t\t\t\t\t  GET_MODE (mem_rtx), mem_addr))\n \t    {\n \t      has_mem = true;\n \t      num_mems++;"}, {"sha": "0846aabbd292c3e29f275fcd3fca09a5460d3361", "filename": "gcc/rtl.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/bd280792f0d07edaca70aabe97ab873bcdda8de2/gcc%2Frtl.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/bd280792f0d07edaca70aabe97ab873bcdda8de2/gcc%2Frtl.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Frtl.h?ref=bd280792f0d07edaca70aabe97ab873bcdda8de2", "patch": "@@ -2705,8 +2705,8 @@ extern int canon_true_dependence (const_rtx, enum machine_mode, rtx,\n \t\t\t\t  const_rtx, rtx);\n extern int read_dependence (const_rtx, const_rtx);\n extern int anti_dependence (const_rtx, const_rtx);\n-extern int canon_anti_dependence (const_rtx, enum machine_mode, rtx,\n-\t\t\t\t  const_rtx);\n+extern int canon_anti_dependence (const_rtx, bool,\n+\t\t\t\t  const_rtx, enum machine_mode, rtx);\n extern int output_dependence (const_rtx, const_rtx);\n extern int may_alias_p (const_rtx, const_rtx);\n extern void init_alias_target (void);"}]}