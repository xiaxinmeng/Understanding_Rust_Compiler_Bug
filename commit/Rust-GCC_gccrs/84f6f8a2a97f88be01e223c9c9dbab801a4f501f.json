{"sha": "84f6f8a2a97f88be01e223c9c9dbab801a4f501f", "node_id": "C_kwDOANBUbNoAKDg0ZjZmOGEyYTk3Zjg4YmUwMWUyMjNjOWM5ZGJhYjgwMWE0ZjUwMWY", "commit": {"author": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-12-10T07:34:04Z"}, "committer": {"name": "Tobias Burnus", "email": "tobias@codesourcery.com", "date": "2022-12-10T07:34:04Z"}, "message": "Fortran: Replace simple '.' quotes by %<.%>\n\nWhen using %qs instead of '%s' or %<=%> instead of '=' looks nicer\nby having nicer quotes and bold text, if the terminal supports it;\notherwise, plain quotes are used.\n\ngcc/fortran/ChangeLog:\n\n\t* match.cc (gfc_match_member_sep): Use %<...%> in gfc_error.\n\t* openmp.cc (gfc_match_oacc_routine, gfc_match_omp_context_selector,\n\tgfc_match_omp_context_selector_specification,\n\tgfc_match_omp_declare_variant, resolve_omp_clauses): Likewise;\n\tuse %qs instead of '%s'.\n\t* primary.cc (match_real_constant, gfc_match_varspec): Likewise.\n\t* resolve.cc (gfc_resolve_formal_arglist, resolve_operator,\n\tresolve_ordinary_assign): Likewise.", "tree": {"sha": "fe3f1ad91b58718ccc7aa8b51ff6678fa6457292", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/fe3f1ad91b58718ccc7aa8b51ff6678fa6457292"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/84f6f8a2a97f88be01e223c9c9dbab801a4f501f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f6f8a2a97f88be01e223c9c9dbab801a4f501f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/84f6f8a2a97f88be01e223c9c9dbab801a4f501f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/84f6f8a2a97f88be01e223c9c9dbab801a4f501f/comments", "author": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tob2", "id": 264461, "node_id": "MDQ6VXNlcjI2NDQ2MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/264461?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tob2", "html_url": "https://github.com/tob2", "followers_url": "https://api.github.com/users/tob2/followers", "following_url": "https://api.github.com/users/tob2/following{/other_user}", "gists_url": "https://api.github.com/users/tob2/gists{/gist_id}", "starred_url": "https://api.github.com/users/tob2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tob2/subscriptions", "organizations_url": "https://api.github.com/users/tob2/orgs", "repos_url": "https://api.github.com/users/tob2/repos", "events_url": "https://api.github.com/users/tob2/events{/privacy}", "received_events_url": "https://api.github.com/users/tob2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "325529e21e81fbc3561d2568cb7e8a26296e5b2f", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/325529e21e81fbc3561d2568cb7e8a26296e5b2f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/325529e21e81fbc3561d2568cb7e8a26296e5b2f"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "89fb115c0f61e07b26999669438a591dd2fe2479", "filename": "gcc/fortran/match.cc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f6f8a2a97f88be01e223c9c9dbab801a4f501f/gcc%2Ffortran%2Fmatch.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f6f8a2a97f88be01e223c9c9dbab801a4f501f/gcc%2Ffortran%2Fmatch.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fmatch.cc?ref=84f6f8a2a97f88be01e223c9c9dbab801a4f501f", "patch": "@@ -193,7 +193,7 @@ gfc_match_member_sep(gfc_symbol *sym)\n   if (gfc_match_name (name) != MATCH_YES)\n     {\n       gfc_error (\"Expected structure component or operator name \"\n-                 \"after '.' at %C\");\n+\t\t \"after %<.%> at %C\");\n       goto error;\n     }\n "}, {"sha": "7edc78ad0cb0ae1b7c957c2e337165f29be230ee", "filename": "gcc/fortran/openmp.cc", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f6f8a2a97f88be01e223c9c9dbab801a4f501f/gcc%2Ffortran%2Fopenmp.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f6f8a2a97f88be01e223c9c9dbab801a4f501f/gcc%2Ffortran%2Fopenmp.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fopenmp.cc?ref=84f6f8a2a97f88be01e223c9c9dbab801a4f501f", "patch": "@@ -4059,7 +4059,7 @@ gfc_match_oacc_routine (void)\n       if (gfc_match_char (')') != MATCH_YES)\n \t{\n \t  gfc_error (\"Syntax error in !$ACC ROUTINE ( NAME ) at %C, expecting\"\n-\t\t     \" ')' after NAME\");\n+\t\t     \" %<)%> after NAME\");\n \t  gfc_current_locus = old_loc;\n \t  return MATCH_ERROR;\n \t}\n@@ -5348,8 +5348,8 @@ gfc_match_omp_context_selector (gfc_omp_set_selector *oss)\n \t\t}\n \t      else\n \t\t{\n-\t\t  gfc_error (\"selector '%s' not allowed for context selector \"\n-\t\t\t     \"set '%s' at %C\",\n+\t\t  gfc_error (\"selector %qs not allowed for context selector \"\n+\t\t\t     \"set %qs at %C\",\n \t\t\t     selector, oss->trait_set_selector_name);\n \t\t  return MATCH_ERROR;\n \t\t}\n@@ -5368,7 +5368,7 @@ gfc_match_omp_context_selector (gfc_omp_set_selector *oss)\n \t{\n \t  if (property_kind == CTX_PROPERTY_NONE)\n \t    {\n-\t      gfc_error (\"selector '%s' does not accept any properties at %C\",\n+\t      gfc_error (\"selector %qs does not accept any properties at %C\",\n \t\t\t selector);\n \t      return MATCH_ERROR;\n \t    }\n@@ -5377,7 +5377,7 @@ gfc_match_omp_context_selector (gfc_omp_set_selector *oss)\n \t    {\n \t      if (gfc_match (\" (\") != MATCH_YES)\n \t\t{\n-\t\t  gfc_error (\"expected '(' at %C\");\n+\t\t  gfc_error (\"expected %<(%> at %C\");\n \t\t  return MATCH_ERROR;\n \t\t}\n \t      if (gfc_match_expr (&os->score) != MATCH_YES\n@@ -5399,7 +5399,7 @@ gfc_match_omp_context_selector (gfc_omp_set_selector *oss)\n \n \t      if (gfc_match (\" )\") != MATCH_YES)\n \t\t{\n-\t\t  gfc_error (\"expected ')' at %C\");\n+\t\t  gfc_error (\"expected %<)%> at %C\");\n \t\t  return MATCH_ERROR;\n \t\t}\n \n@@ -5512,7 +5512,7 @@ gfc_match_omp_context_selector (gfc_omp_set_selector *oss)\n \n \t  if (gfc_match (\" )\") != MATCH_YES)\n \t    {\n-\t      gfc_error (\"expected ')' at %C\");\n+\t      gfc_error (\"expected %<)%> at %C\");\n \t      return MATCH_ERROR;\n \t    }\n \t}\n@@ -5522,7 +5522,7 @@ gfc_match_omp_context_selector (gfc_omp_set_selector *oss)\n \t{\n \t  if (gfc_match (\" (\") != MATCH_YES)\n \t    {\n-\t      gfc_error (\"expected '(' at %C\");\n+\t      gfc_error (\"expected %<(%> at %C\");\n \t      return MATCH_ERROR;\n \t    }\n \t}\n@@ -5568,22 +5568,22 @@ gfc_match_omp_context_selector_specification (gfc_omp_declare_variant *odv)\n \n       if (m != MATCH_YES || i == selector_set_count)\n \t{\n-\t  gfc_error (\"expected 'construct', 'device', 'implementation' or \"\n-\t\t     \"'user' at %C\");\n+\t  gfc_error (\"expected %<constructs%>, %<device%>, %<implementation%> \"\n+\t\t     \"or %<user%> at %C\");\n \t  return MATCH_ERROR;\n \t}\n \n       m = gfc_match (\" =\");\n       if (m != MATCH_YES)\n \t{\n-\t  gfc_error (\"expected '=' at %C\");\n+\t  gfc_error (\"expected %<=%> at %C\");\n \t  return MATCH_ERROR;\n \t}\n \n       m = gfc_match (\" {\");\n       if (m != MATCH_YES)\n \t{\n-\t  gfc_error (\"expected '{' at %C\");\n+\t  gfc_error (\"expected %<{%> at %C\");\n \t  return MATCH_ERROR;\n \t}\n \n@@ -5598,7 +5598,7 @@ gfc_match_omp_context_selector_specification (gfc_omp_declare_variant *odv)\n       m = gfc_match (\" }\");\n       if (m != MATCH_YES)\n \t{\n-\t  gfc_error (\"expected '}' at %C\");\n+\t  gfc_error (\"expected %<}%> at %C\");\n \t  return MATCH_ERROR;\n \t}\n \n@@ -5620,7 +5620,7 @@ gfc_match_omp_declare_variant (void)\n \n   if (gfc_match (\" (\") != MATCH_YES)\n     {\n-      gfc_error (\"expected '(' at %C\");\n+      gfc_error (\"expected %<(%> at %C\");\n       return MATCH_ERROR;\n     }\n \n@@ -5668,7 +5668,7 @@ gfc_match_omp_declare_variant (void)\n \n   if (gfc_match (\" )\") != MATCH_YES)\n     {\n-      gfc_error (\"expected ')' at %C\");\n+      gfc_error (\"expected %<)%> at %C\");\n       return MATCH_ERROR;\n     }\n \n@@ -5678,7 +5678,7 @@ gfc_match_omp_declare_variant (void)\n \t{\n \t  if (first_p)\n \t    {\n-\t      gfc_error (\"expected 'match' at %C\");\n+\t      gfc_error (\"expected %<match%> at %C\");\n \t      return MATCH_ERROR;\n \t    }\n \t  else\n@@ -5687,7 +5687,7 @@ gfc_match_omp_declare_variant (void)\n \n       if (gfc_match (\" (\") != MATCH_YES)\n \t{\n-\t  gfc_error (\"expected '(' at %C\");\n+\t  gfc_error (\"expected %<(%> at %C\");\n \t  return MATCH_ERROR;\n \t}\n \n@@ -5696,7 +5696,7 @@ gfc_match_omp_declare_variant (void)\n \n       if (gfc_match (\" )\") != MATCH_YES)\n \t{\n-\t  gfc_error (\"expected ')' at %C\");\n+\t  gfc_error (\"expected %<)%> at %C\");\n \t  return MATCH_ERROR;\n \t}\n \n@@ -7378,7 +7378,7 @@ resolve_omp_clauses (gfc_code *code, gfc_omp_clauses *omp_clauses,\n \n \t  for (n = omp_clauses->lists[OMP_LIST_ALLOCATE]; n; n = n->next)\n \t    if (n->sym->mark == 1)\n-\t      gfc_error (\"%qs specified in 'allocate' clause at %L but not \"\n+\t      gfc_error (\"%qs specified in %<allocate%> clause at %L but not \"\n \t\t\t \"in an explicit privatization clause\",\n \t\t\t n->sym->name, &n->where);\n \t}"}, {"sha": "21a8eb73c2352066fde23974ebd41b2ffa10f367", "filename": "gcc/fortran/primary.cc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f6f8a2a97f88be01e223c9c9dbab801a4f501f/gcc%2Ffortran%2Fprimary.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f6f8a2a97f88be01e223c9c9dbab801a4f501f/gcc%2Ffortran%2Fprimary.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fprimary.cc?ref=84f6f8a2a97f88be01e223c9c9dbab801a4f501f", "patch": "@@ -586,7 +586,7 @@ match_real_constant (gfc_expr **result, int signflag)\n \n   if (c == 'q')\n     {\n-      if (!gfc_notify_std (GFC_STD_GNU, \"exponent-letter 'q' in \"\n+      if (!gfc_notify_std (GFC_STD_GNU, \"exponent-letter %<q%> in \"\n \t\t\t   \"real-literal-constant at %C\"))\n \treturn MATCH_ERROR;\n       else if (warn_real_q_constant)\n@@ -2070,8 +2070,8 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,\n \t  || (sym->ts.type == BT_CLASS && CLASS_DATA (sym)\n \t      && CLASS_DATA (sym)->attr.dimension))\n \t{\n-\t  gfc_error (\"Array section designator, e.g. '(:)', is required \"\n-\t\t     \"besides the coarray designator '[...]' at %C\");\n+\t  gfc_error (\"Array section designator, e.g. %<(:)%>, is required \"\n+\t\t     \"besides the coarray designator %<[...]%> at %C\");\n \t  return MATCH_ERROR;\n \t}\n       if ((sym->ts.type != BT_CLASS && !sym->attr.codimension)"}, {"sha": "0f5f1d277e488e5be58cd4f2824cbe81306ac444", "filename": "gcc/fortran/resolve.cc", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/84f6f8a2a97f88be01e223c9c9dbab801a4f501f/gcc%2Ffortran%2Fresolve.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/84f6f8a2a97f88be01e223c9c9dbab801a4f501f/gcc%2Ffortran%2Fresolve.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2Fresolve.cc?ref=84f6f8a2a97f88be01e223c9c9dbab801a4f501f", "patch": "@@ -514,7 +514,7 @@ gfc_resolve_formal_arglist (gfc_symbol *proc)\n \t    {\n \t      /* F03:C1263 (R1238) The function-name and each dummy-arg-name\n \t\t shall be specified, explicitly or implicitly, to be scalar.  */\n-\t      gfc_error (\"Argument '%s' of statement function '%s' at %L \"\n+\t      gfc_error (\"Argument %qs of statement function %qs at %L \"\n \t\t\t \"must be scalar\", sym->name, proc->name,\n \t\t\t &proc->declared_at);\n \t      continue;\n@@ -4381,8 +4381,8 @@ resolve_operator (gfc_expr *e)\n \t  guessed = lookup_uop_fuzzy (name, e->value.op.uop->ns->uop_root);\n \t  if (guessed)\n \t    snprintf (msg, sizeof (msg),\n-\t\t      _(\"Unknown operator %%<%s%%> at %%L; did you mean '%s'?\"),\n-\t\t      name, guessed);\n+\t\t      _(\"Unknown operator %%<%s%%> at %%L; did you mean \"\n+\t\t\t\"%%<%s%%>?\"), name, guessed);\n \t  else\n \t    snprintf (msg, sizeof (msg), _(\"Unknown operator %%<%s%%> at %%L\"),\n \t\t      name);\n@@ -8213,7 +8213,7 @@ resolve_allocate_expr (gfc_expr *e, gfc_code *code, bool *array_alloc_wo_spec)\n \t{\n \t  if (i == (ar->dimen + ar->codimen - 1))\n \t    {\n-\t      gfc_error (\"Expected '*' in coindex specification in ALLOCATE \"\n+\t      gfc_error (\"Expected %<*%> in coindex specification in ALLOCATE \"\n \t\t\t \"statement at %L\", &e->where);\n \t      goto failure;\n \t    }\n@@ -11187,7 +11187,7 @@ resolve_ordinary_assign (gfc_code *code, gfc_namespace *ns)\n     {\n       gfc_error (\"Nonallocatable variable must not be polymorphic in intrinsic \"\n \t\t \"assignment at %L - check that there is a matching specific \"\n-\t\t \"subroutine for '=' operator\", &lhs->where);\n+\t\t \"subroutine for %<=%> operator\", &lhs->where);\n       return false;\n     }\n "}]}