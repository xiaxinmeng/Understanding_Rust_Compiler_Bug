{"sha": "714e1b3b4f22c4afd2891e956b5c05d7614ab0f9", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NzE0ZTFiM2I0ZjIyYzRhZmQyODkxZTk1NmI1YzA1ZDc2MTRhYjBmOQ==", "commit": {"author": {"name": "Kyrylo Tkachov", "email": "kyrylo.tkachov@arm.com", "date": "2015-11-24T13:08:56Z"}, "committer": {"name": "Kyrylo Tkachov", "email": "ktkachov@gcc.gnu.org", "date": "2015-11-24T13:08:56Z"}, "message": "[AArch64][v2] Improve comparison with complex immediates followed by branch/cset\n\n\t* config/aarch64/aarch64.md (*condjump): Rename to...\n\t(condjump): ... This.\n\t(*compare_condjump<mode>): New define_insn_and_split.\n\t(*compare_cstore<mode>_insn): Likewise.\n\t(*cstore<mode>_insn): Rename to...\n\t(cstore<mode>_insn): ... This.\n\t* config/aarch64/iterators.md (CMP): Handle ne code.\n\t* config/aarch64/predicates.md (aarch64_imm24): New predicate.\n\n\t* gcc.target/aarch64/cmpimm_branch_1.c: New test.\n\t* gcc.target/aarch64/cmpimm_cset_1.c: Likewise.\n\nFrom-SVN: r230805", "tree": {"sha": "9f39e12c374484b29285b9f51564dca909447dc0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/9f39e12c374484b29285b9f51564dca909447dc0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/comments", "author": {"login": "ktkachov-arm", "id": 74917949, "node_id": "MDQ6VXNlcjc0OTE3OTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/74917949?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktkachov-arm", "html_url": "https://github.com/ktkachov-arm", "followers_url": "https://api.github.com/users/ktkachov-arm/followers", "following_url": "https://api.github.com/users/ktkachov-arm/following{/other_user}", "gists_url": "https://api.github.com/users/ktkachov-arm/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktkachov-arm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktkachov-arm/subscriptions", "organizations_url": "https://api.github.com/users/ktkachov-arm/orgs", "repos_url": "https://api.github.com/users/ktkachov-arm/repos", "events_url": "https://api.github.com/users/ktkachov-arm/events{/privacy}", "received_events_url": "https://api.github.com/users/ktkachov-arm/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "9211bbb2782fd934e697bcfd13f4547bfff8be37", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9211bbb2782fd934e697bcfd13f4547bfff8be37", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9211bbb2782fd934e697bcfd13f4547bfff8be37"}], "stats": {"total": 146, "additions": 143, "deletions": 3}, "files": [{"sha": "ada1e3094c861f214a833f266d76e0a0a81107f3", "filename": "gcc/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=714e1b3b4f22c4afd2891e956b5c05d7614ab0f9", "patch": "@@ -1,3 +1,14 @@\n+2015-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.md (*condjump): Rename to...\n+\t(condjump): ... This.\n+\t(*compare_condjump<mode>): New define_insn_and_split.\n+\t(*compare_cstore<mode>_insn): Likewise.\n+\t(*cstore<mode>_insn): Rename to...\n+\t(cstore<mode>_insn): ... This.\n+\t* config/aarch64/iterators.md (CMP): Handle ne code.\n+\t* config/aarch64/predicates.md (aarch64_imm24): New predicate.\n+\n 2015-11-24  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \tPR target/68497"}, {"sha": "28a7f8c6fc8f63e194cfa3ede3cea39e1abefe25", "filename": "gcc/config/aarch64/aarch64.md", "status": "modified", "additions": 71, "deletions": 2, "changes": 73, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2Fconfig%2Faarch64%2Faarch64.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Faarch64.md?ref=714e1b3b4f22c4afd2891e956b5c05d7614ab0f9", "patch": "@@ -376,7 +376,7 @@\n   }\n )\n \n-(define_insn \"*condjump\"\n+(define_insn \"condjump\"\n   [(set (pc) (if_then_else (match_operator 0 \"aarch64_comparison_operator\"\n \t\t\t    [(match_operand 1 \"cc_register\" \"\") (const_int 0)])\n \t\t\t   (label_ref (match_operand 2 \"\" \"\"))\n@@ -401,6 +401,41 @@\n \t\t      (const_int 1)))]\n )\n \n+;; For a 24-bit immediate CST we can optimize the compare for equality\n+;; and branch sequence from:\n+;; \tmov\tx0, #imm1\n+;; \tmovk\tx0, #imm2, lsl 16 /* x0 contains CST.  */\n+;; \tcmp\tx1, x0\n+;; \tb<ne,eq> .Label\n+;; into the shorter:\n+;; \tsub\tx0, x1, #(CST & 0xfff000)\n+;; \tsubs\tx0, x0, #(CST & 0x000fff)\n+;; \tb<ne,eq> .Label\n+(define_insn_and_split \"*compare_condjump<mode>\"\n+  [(set (pc) (if_then_else (EQL\n+\t\t\t      (match_operand:GPI 0 \"register_operand\" \"r\")\n+\t\t\t      (match_operand:GPI 1 \"aarch64_imm24\" \"n\"))\n+\t\t\t   (label_ref:P (match_operand 2 \"\" \"\"))\n+\t\t\t   (pc)))]\n+  \"!aarch64_move_imm (INTVAL (operands[1]), <MODE>mode)\n+   && !aarch64_plus_operand (operands[1], <MODE>mode)\n+   && !reload_completed\"\n+  \"#\"\n+  \"&& true\"\n+  [(const_int 0)]\n+  {\n+    HOST_WIDE_INT lo_imm = UINTVAL (operands[1]) & 0xfff;\n+    HOST_WIDE_INT hi_imm = UINTVAL (operands[1]) & 0xfff000;\n+    rtx tmp = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_add<mode>3 (tmp, operands[0], GEN_INT (-hi_imm)));\n+    emit_insn (gen_add<mode>3_compare0 (tmp, tmp, GEN_INT (-lo_imm)));\n+    rtx cc_reg = gen_rtx_REG (CC_NZmode, CC_REGNUM);\n+    rtx cmp_rtx = gen_rtx_fmt_ee (<EQL:CMP>, <MODE>mode, cc_reg, const0_rtx);\n+    emit_jump_insn (gen_condjump (cmp_rtx, cc_reg, operands[2]));\n+    DONE;\n+  }\n+)\n+\n (define_expand \"casesi\"\n   [(match_operand:SI 0 \"register_operand\" \"\")\t; Index\n    (match_operand:SI 1 \"const_int_operand\" \"\")\t; Lower bound\n@@ -2905,7 +2940,7 @@\n   \"\n )\n \n-(define_insn \"*cstore<mode>_insn\"\n+(define_insn \"aarch64_cstore<mode>\"\n   [(set (match_operand:ALLI 0 \"register_operand\" \"=r\")\n \t(match_operator:ALLI 1 \"aarch64_comparison_operator\"\n \t [(match_operand 2 \"cc_register\" \"\") (const_int 0)]))]\n@@ -2914,6 +2949,40 @@\n   [(set_attr \"type\" \"csel\")]\n )\n \n+;; For a 24-bit immediate CST we can optimize the compare for equality\n+;; and branch sequence from:\n+;; \tmov\tx0, #imm1\n+;; \tmovk\tx0, #imm2, lsl 16 /* x0 contains CST.  */\n+;; \tcmp\tx1, x0\n+;; \tcset\tx2, <ne,eq>\n+;; into the shorter:\n+;; \tsub\tx0, x1, #(CST & 0xfff000)\n+;; \tsubs\tx0, x0, #(CST & 0x000fff)\n+;; \tcset x2, <ne, eq>.\n+(define_insn_and_split \"*compare_cstore<mode>_insn\"\n+  [(set (match_operand:GPI 0 \"register_operand\" \"=r\")\n+\t (EQL:GPI (match_operand:GPI 1 \"register_operand\" \"r\")\n+\t\t  (match_operand:GPI 2 \"aarch64_imm24\" \"n\")))]\n+  \"!aarch64_move_imm (INTVAL (operands[2]), <MODE>mode)\n+   && !aarch64_plus_operand (operands[2], <MODE>mode)\n+   && !reload_completed\"\n+  \"#\"\n+  \"&& true\"\n+  [(const_int 0)]\n+  {\n+    HOST_WIDE_INT lo_imm = UINTVAL (operands[2]) & 0xfff;\n+    HOST_WIDE_INT hi_imm = UINTVAL (operands[2]) & 0xfff000;\n+    rtx tmp = gen_reg_rtx (<MODE>mode);\n+    emit_insn (gen_add<mode>3 (tmp, operands[1], GEN_INT (-hi_imm)));\n+    emit_insn (gen_add<mode>3_compare0 (tmp, tmp, GEN_INT (-lo_imm)));\n+    rtx cc_reg = gen_rtx_REG (CC_NZmode, CC_REGNUM);\n+    rtx cmp_rtx = gen_rtx_fmt_ee (<EQL:CMP>, <MODE>mode, cc_reg, const0_rtx);\n+    emit_insn (gen_aarch64_cstore<mode> (operands[0], cmp_rtx, cc_reg));\n+    DONE;\n+  }\n+  [(set_attr \"type\" \"csel\")]\n+)\n+\n ;; zero_extend version of the above\n (define_insn \"*cstoresi_insn_uxtw\"\n   [(set (match_operand:DI 0 \"register_operand\" \"=r\")"}, {"sha": "422bc879f7f6c495349bf0a40a471e7dce5780e6", "filename": "gcc/config/aarch64/iterators.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2Fconfig%2Faarch64%2Fiterators.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2Fconfig%2Faarch64%2Fiterators.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fiterators.md?ref=714e1b3b4f22c4afd2891e956b5c05d7614ab0f9", "patch": "@@ -824,7 +824,8 @@\n \t\t\t   (ltu \"1\") (leu \"1\") (geu \"2\") (gtu \"2\")])\n \n (define_code_attr CMP [(lt \"LT\") (le \"LE\") (eq \"EQ\") (ge \"GE\") (gt \"GT\")\n-\t\t\t   (ltu \"LTU\") (leu \"LEU\") (geu \"GEU\") (gtu \"GTU\")])\n+\t\t\t(ltu \"LTU\") (leu \"LEU\") (ne \"NE\") (geu \"GEU\")\n+\t\t\t(gtu \"GTU\")])\n \n (define_code_attr fix_trunc_optab [(fix \"fix_trunc\")\n \t\t\t\t   (unsigned_fix \"fixuns_trunc\")])"}, {"sha": "c0c3ff5dc20ea9e4d7cf3ade1ec9d6c869f55399", "filename": "gcc/config/aarch64/predicates.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2Fconfig%2Faarch64%2Fpredicates.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Faarch64%2Fpredicates.md?ref=714e1b3b4f22c4afd2891e956b5c05d7614ab0f9", "patch": "@@ -145,6 +145,11 @@\n   (and (match_code \"const_int\")\n        (match_test \"(unsigned HOST_WIDE_INT) INTVAL (op) <= 4\")))\n \n+;; An immediate that fits into 24 bits.\n+(define_predicate \"aarch64_imm24\"\n+  (and (match_code \"const_int\")\n+       (match_test \"IN_RANGE (UINTVAL (op), 0, 0xffffff)\")))\n+\n (define_predicate \"aarch64_pwr_imm3\"\n   (and (match_code \"const_int\")\n        (match_test \"INTVAL (op) != 0"}, {"sha": "47f7ea55c21426d3343959c2776e4c37f9c31c39", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=714e1b3b4f22c4afd2891e956b5c05d7614ab0f9", "patch": "@@ -1,3 +1,8 @@\n+2015-11-24  Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/cmpimm_branch_1.c: New test.\n+\t* gcc.target/aarch64/cmpimm_cset_1.c: Likewise.\n+\n 2015-11-24  Mikhail Maltsev  <maltsevm@gmail.com>\n \n \tPR target/68497"}, {"sha": "7ad736b5e1dbb91a0bf17c6ae2717b72147bb84d", "filename": "gcc/testsuite/gcc.target/aarch64/cmpimm_branch_1.c", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmpimm_branch_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmpimm_branch_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmpimm_branch_1.c?ref=714e1b3b4f22c4afd2891e956b5c05d7614ab0f9", "patch": "@@ -0,0 +1,26 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O2\" } */\n+\n+/* Test that we emit a sub+subs sequence rather than mov+movk+cmp.  */\n+\n+void g (void);\n+void\n+foo (int x)\n+{\n+  if (x != 0x123456)\n+    g ();\n+}\n+\n+void\n+fool (long long x)\n+{\n+  if (x != 0x123456)\n+    g ();\n+}\n+\n+/* { dg-final { scan-assembler-not \"cmp\\tw\\[0-9\\]*.*\" } } */\n+/* { dg-final { scan-assembler-not \"cmp\\tx\\[0-9\\]*.*\" } } */\n+/* { dg-final { scan-assembler-times \"sub\\tw\\[0-9\\]+.*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sub\\tx\\[0-9\\]+.*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"subs\\tw\\[0-9\\]+.*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"subs\\tx\\[0-9\\]+.*\" 1 } } */"}, {"sha": "f6fd69f4984e7d32ba020909cdd5341aae423160", "filename": "gcc/testsuite/gcc.target/aarch64/cmpimm_cset_1.c", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmpimm_cset_1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/714e1b3b4f22c4afd2891e956b5c05d7614ab0f9/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmpimm_cset_1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.target%2Faarch64%2Fcmpimm_cset_1.c?ref=714e1b3b4f22c4afd2891e956b5c05d7614ab0f9", "patch": "@@ -0,0 +1,23 @@\n+/* { dg-do compile } */\n+/* { dg-options \"-save-temps -O2\" } */\n+\n+/* Test that we emit a sub+subs sequence rather than mov+movk+cmp.  */\n+\n+int\n+foo (int x)\n+{\n+  return x == 0x123456;\n+}\n+\n+long long\n+fool (long long x)\n+{\n+  return x == 0x123456;\n+}\n+\n+/* { dg-final { scan-assembler-not \"cmp\\tw\\[0-9\\]*.*\" } } */\n+/* { dg-final { scan-assembler-not \"cmp\\tx\\[0-9\\]*.*\" } } */\n+/* { dg-final { scan-assembler-times \"sub\\tw\\[0-9\\]+.*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"sub\\tx\\[0-9\\]+.*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"subs\\tw\\[0-9\\]+.*\" 1 } } */\n+/* { dg-final { scan-assembler-times \"subs\\tx\\[0-9\\]+.*\" 1 } } */"}]}