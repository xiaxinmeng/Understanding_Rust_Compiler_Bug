{"sha": "cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "node_id": "C_kwDOANBUbNoAKGNkYzM0MjI5YzExZmY5NTVhYTFhMDhmYjM5MTkzMjdmM2MxYTRlOGE", "commit": {"author": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-16T00:17:09Z"}, "committer": {"name": "GCC Administrator", "email": "gccadmin@gcc.gnu.org", "date": "2022-11-16T00:17:09Z"}, "message": "Daily bump.", "tree": {"sha": "ffd65c3bebdb7c6f749036a3b8e290ec76f4767d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ffd65c3bebdb7c6f749036a3b8e290ec76f4767d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/comments", "author": null, "committer": null, "parents": [{"sha": "ed1797ddf8285f59a50d9c883beb97705279d980", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ed1797ddf8285f59a50d9c883beb97705279d980", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ed1797ddf8285f59a50d9c883beb97705279d980"}], "stats": {"total": 483, "additions": 482, "deletions": 1}, "files": [{"sha": "31bd07333c6e2781decd491ce0e017b17046da0d", "filename": "contrib/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/contrib%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/contrib%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/contrib%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,8 @@\n+2022-11-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* gcc-changelog/git_commit.py: Revert temporary rule\n+\trelaxation.\n+\n 2022-11-14  Martin Liska  <mliska@suse.cz>\n \n \t* gcc-changelog/git_commit.py: Temporarily disable"}, {"sha": "06d4daddec53ca8ab0ca7afa56e46dbc632e9a06", "filename": "gcc/ChangeLog", "status": "modified", "additions": 87, "deletions": 0, "changes": 87, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,90 @@\n+2022-11-15  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* config/riscv/riscv-builtins.cc (struct riscv_builtin_description):\n+\tadd the pause machine-dependent builtin with no result and no\n+\targuments; mark it as always present (pause is a true hint\n+\tthat encodes into a fence-insn, if not supported with the new\n+\tpause semantics).\n+\t* config/riscv/riscv-ftypes.def: Add type for void -> void.\n+\t* config/riscv/riscv.md (riscv_pause): Add risc_pause and\n+\tUNSPECV_PAUSE\n+\t* doc/extend.texi: Document __builtin_riscv_pause.\n+\t* optabs.cc (maybe_gen_insn): Allow nops == 0 (void -> void).\n+\n+2022-11-15  David Faust  <david.faust@oracle.com>\n+\n+\t* config/bpf/bpf.cc (bpf_expand_builtin): Avoid use of uninitialized\n+\tvariable in error case.\n+\n+2022-11-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106140\n+\t* doc/invoke.texi (Static Analyzer Options): Add\n+\t-Wanalyzer-fd-phase-mismatch and -Wanalyzer-fd-type-mismatch.  Add\n+\t\"socket\", \"bind\", \"listen\", \"accept\", and \"connect\" to the list of\n+\tfunctions known to the analyzer.\n+\n+2022-11-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106302\n+\t* Makefile.in (ANALYZER_OBJS): Add analyzer/analyzer-language.o.\n+\t(GTFILES): Add analyzer/analyzer-language.cc.\n+\t* doc/analyzer.texi: Document __analyzer_dump_named_constant.\n+\n+2022-11-15  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* json.h (class string): Add M_LEN member to store the length of\n+\tthe data.  Add constructor taking an explicit length.\n+\t* json.cc (string::string):  Implement the new constructor.\n+\t(string::print): Support printing strings that are not\n+\tnull-terminated.  Escape embdedded null bytes on output.\n+\t(test_writing_strings): Test the new null-byte-related features of\n+\tjson::string.\n+\n+2022-11-15  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* diagnostic.cc (diagnostic_get_location_text): Use\n+\tspecial_fname_builtin () rather than a hardcoded string (which was\n+\talso incorrectly left untranslated previously.)\n+\t* input.cc (special_fname_builtin): New function.\n+\t(expand_location_1): Use special_fname_builtin () rather than a\n+\thard-coded string.\n+\t(test_builtins): Likewise.\n+\t* input.h (special_fname_builtin): Declare.\n+\n+2022-11-15  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* tree-diagnostic.cc (maybe_unwind_expanded_macro_loc): Handle ad-hoc\n+\tlocation in return value of linemap_resolve_location().\n+\n+2022-11-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/cpp.texi (Pragmas): Use @item and @itemx for region\n+\tpragmas.\n+\n+2022-11-15  Maciej W. Rozycki  <macro@embecosm.com>\n+\n+\t* ira-color.cc (assign_hard_reg): Remove duplicate `memset' over\n+\t`full_costs'.\n+\n+2022-11-15  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* config/aarch64/atomics.md\n+\t(*aarch64_atomic_load<ALLX:mode>_rcpc_zext): New pattern.\n+\t(*aarch64_atomic_load<ALLX:mode>_rcpc_sext): New pattern.\n+\n+2022-11-15  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* config/aarch64/aarch64.h (AARCH64_ISA_RCPC): New Macro.\n+\t(TARGET_RCPC): New Macro.\n+\t* config/aarch64/atomics.md (atomic_load<mode>): Change into an expand.\n+\t(aarch64_atomic_load<mode>_rcpc): New define_insn for ldapr.\n+\t(aarch64_atomic_load<mode>): Rename of old define_insn for ldar.\n+\t* config/aarch64/iterators.md (UNSPEC_LDAP): New unspec enum value.\n+\t* doc/invoke.texi (rcpc): Ammend documentation to mention the effects\n+\ton code generation.\n+\n 2022-11-15  Hongyu Wang  <hongyu.wang@intel.com>\n \n \tPR target/98167"}, {"sha": "c559bd9ee8e2e8e72654c58d7b67facf97c07346", "filename": "gcc/DATESTAMP", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2FDATESTAMP", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2FDATESTAMP", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FDATESTAMP?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1 +1 @@\n-20221115\n+20221116"}, {"sha": "a8b4312c63d08019c4728ac871cac54a2d34b9b0", "filename": "gcc/analyzer/ChangeLog", "status": "modified", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Fanalyzer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Fanalyzer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fanalyzer%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,108 @@\n+2022-11-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106140\n+\t* analyzer-language.cc (on_finish_translation_unit): Stash named\n+\tconstants \"SOCK_STREAM\" and \"SOCK_DGRAM\".\n+\t* analyzer.opt (Wanalyzer-fd-phase-mismatch): New.\n+\t(Wanalyzer-fd-type-mismatch): New.\n+\t* engine.cc (impl_region_model_context::get_state_map_by_name):\n+\tAdd \"out_sm_context\" param.  Allow out_sm_idx to be NULL.\n+\t* exploded-graph.h\n+\t(impl_region_model_context::get_state_map_by_name):\n+\tAdd \"out_sm_context\" param.\n+\t* region-model-impl-calls.cc (region_model::impl_call_accept): New.\n+\t(region_model::impl_call_bind): New.\n+\t(region_model::impl_call_connect): New.\n+\t(region_model::impl_call_listen): New.\n+\t(region_model::impl_call_socket): New.\n+\t* region-model.cc (region_model::on_call_pre): Special-case\n+\t\"bind\".\n+\t(region_model::on_call_post): Special-case \"accept\", \"bind\",\n+\t\"connect\", \"listen\", and \"socket\".\n+\t* region-model.h (region_model::impl_call_accept): New decl.\n+\t(region_model::impl_call_bind): New decl.\n+\t(region_model::impl_call_connect): New decl.\n+\t(region_model::impl_call_listen): New decl.\n+\t(region_model::impl_call_socket): New decl.\n+\t(region_model::on_socket): New decl.\n+\t(region_model::on_bind): New decl.\n+\t(region_model::on_listen): New decl.\n+\t(region_model::on_accept): New decl.\n+\t(region_model::on_connect): New decl.\n+\t(region_model::add_constraint): Make public.\n+\t(region_model::check_for_poison): Make public.\n+\t(region_model_context::get_state_map_by_name): Add out_sm_context param.\n+\t(region_model_context::get_fd_map): Likewise.\n+\t(region_model_context::get_malloc_map): Likewise.\n+\t(region_model_context::get_taint_map): Likewise.\n+\t(noop_region_model_context::get_state_map_by_name): Likewise.\n+\t(region_model_context_decorator::get_state_map_by_name): Likewise.\n+\t* sm-fd.cc: Include \"analyzer/supergraph.h\" and\n+\t\"analyzer/analyzer-language.h\".\n+\t(enum expected_phase): New enum.\n+\t(fd_state_machine::m_new_datagram_socket): New.\n+\t(fd_state_machine::m_new_stream_socket): New.\n+\t(fd_state_machine::m_new_unknown_socket): New.\n+\t(fd_state_machine::m_bound_datagram_socket): New.\n+\t(fd_state_machine::m_bound_stream_socket): New.\n+\t(fd_state_machine::m_bound_unknown_socket): New.\n+\t(fd_state_machine::m_listening_stream_socket): New.\n+\t(fd_state_machine::m_m_connected_stream_socket): New.\n+\t(fd_state_machine::m_SOCK_STREAM): New.\n+\t(fd_state_machine::m_SOCK_DGRAM): New.\n+\t(fd_diagnostic::describe_state_change): Handle socket states.\n+\t(fd_diagnostic::get_meaning_for_state_change): Likewise.\n+\t(class fd_phase_mismatch): New.\n+\t(enum expected_type): New enum.\n+\t(class fd_type_mismatch): New.\n+\t(fd_state_machine::fd_state_machine): Initialize new states and\n+\tstashed named constants.\n+\t(fd_state_machine::is_socket_fd_p): New.\n+\t(fd_state_machine::is_datagram_socket_fd_p): New.\n+\t(fd_state_machine::is_stream_socket_fd_p): New.\n+\t(fd_state_machine::on_close): Handle the socket states.\n+\t(fd_state_machine::check_for_open_fd): Complain about fncalls on\n+\tsockets in the wrong phase.  Support socket FDs.\n+\t(add_constraint_ge_zero): New.\n+\t(fd_state_machine::get_state_for_socket_type): New.\n+\t(fd_state_machine::on_socket): New.\n+\t(fd_state_machine::check_for_socket_fd): New.\n+\t(fd_state_machine::check_for_new_socket_fd): New.\n+\t(fd_state_machine::on_bind): New.\n+\t(fd_state_machine::on_listen): New.\n+\t(fd_state_machine::on_accept): New.\n+\t(fd_state_machine::on_connect): New.\n+\t(fd_state_machine::can_purge_p): Don't purge socket values.\n+\t(get_fd_state): New.\n+\t(region_model::mark_as_valid_fd): Use get_fd_state.\n+\t(region_model::on_socket): New.\n+\t(region_model::on_bind): New.\n+\t(region_model::on_listen): New.\n+\t(region_model::on_accept): New.\n+\t(region_model::on_connect): New.\n+\t* sm-fd.dot: Update to reflect sm-fd.cc changes.\n+\n+2022-11-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106302\n+\t* analyzer-language.cc: New file.\n+\t* analyzer-language.h: New file.\n+\t* analyzer.h (get_stashed_constant_by_name): New decl.\n+\t(log_stashed_constants): New decl.\n+\t* engine.cc (impl_run_checkers): Call log_stashed_constants.\n+\t* region-model-impl-calls.cc\n+\t(region_model::impl_call_analyzer_dump_named_constant): New.\n+\t* region-model.cc (region_model::on_stmt_pre): Handle\n+\t__analyzer_dump_named_constant.\n+\t* region-model.h\n+\t(region_model::impl_call_analyzer_dump_named_constant): New decl.\n+\t* sm-fd.cc (fd_state_machine::m_O_ACCMODE): New.\n+\t(fd_state_machine::m_O_RDONLY): New.\n+\t(fd_state_machine::m_O_WRONLY): New.\n+\t(fd_state_machine::fd_state_machine): Initialize the new fields.\n+\t(fd_state_machine::get_access_mode_from_flag): Use the new fields,\n+\trather than using the host values.\n+\n 2022-11-13  David Malcolm  <dmalcolm@redhat.com>\n \n \tPR analyzer/106235"}, {"sha": "76ca2aa319ee43ab629f33619eac90a0b21960d3", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,8 @@\n+2022-11-15  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* c-opts.cc (c_finish_options): Use special_fname_builtin () rather\n+\tthan a hard-coded string.\n+\n 2022-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* c-cppbuiltin.cc (c_cpp_builtins): Bump C++23"}, {"sha": "43b6d94002479799aba72c0c12ad673861980078", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,10 @@\n+2022-11-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106302\n+\t* c-parser.cc: Include \"analyzer/analyzer-language.h\" and \"toplev.h\".\n+\t(class ana::c_translation_unit): New.\n+\t(c_parser_translation_unit): Call ana::on_finish_translation_unit.\n+\n 2022-11-12  Joseph Myers  <joseph@codesourcery.com>\n \n \t* c-decl.cc (start_underspecified_init)"}, {"sha": "70aac6075b0d7ad0f1f8516ccbf731a83a85c232", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,88 @@\n+2022-11-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107492\n+\t* decl.cc (grokdeclarator): Only emit a -Wignored-qualifiers warning\n+\twhen funcdecl_p.\n+\n+2022-11-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* constexpr.cc (potential_constant_expression_1)\n+\t<case *_CAST_EXPR>: Use\n+\tcast_valid_in_integral_constant_expression_p instead of\n+\topen coding it.\n+\t* constraint.cc (tsubst_valid_expression_requirement): Adjust\n+\tcalls to tsubst_copy_and_build and tsubst_expr.\n+\t(tsubst_constraint): Likewise.\n+\t(satisfy_atom): Likewise.\n+\t(diagnose_trait_expr): Likewise.\n+\t* cp-tree.h (tsubst_copy_and_build): Remove i_c_e_p parameter.\n+\t(tsubst_expr): Likewise.\n+\t* init.cc (get_nsdmi): Adjust calls to tsubst_copy_and_build\n+\tand tsubst_expr.\n+\t* pt.cc (expand_integer_pack): Likewise.\n+\t(instantiate_non_dependent_expr_internal): Likewise.\n+\t(tsubst_friend_function): Likewise.\n+\t(tsubst_attribute): Likewise.\n+\t(instantiate_class_template): Likewise.\n+\t(tsubst_template_arg): Likewise.\n+\t(gen_elem_of_pack_expansion_instantiation): Likewise.\n+\t(tsubst_fold_expr_init): Likewise.\n+\t(tsubst_pack_expansion): Likewise.\n+\t(tsubst_default_argument): Likewise.\n+\t(tsubst_function_decl): Likewise.\n+\t(tsubst_decl): Likewise.\n+\t(tsubst_arg_types): Likewise.\n+\t(tsubst_exception_specification): Likewise.\n+\t(tsubst): Likewise.\n+\t(tsubst_init): Likewise.\n+\t(tsubst_copy): Likewise.\n+\t(tsubst_omp_clause_decl): Likewise.\n+\t(tsubst_omp_clauses): Likewise.\n+\t(tsubst_copy_asm_operands): Likewise.\n+\t(tsubst_omp_for_iterator): Likewise.\n+\t(tsubst_expr): Likewise.  Remove i_c_e_p parameter.\n+\t(tsubst_omp_udr): Likewise.\n+\t(tsubst_non_call_postfix_expression): Likewise.  Remove i_c_e_p parameter.\n+\t(tsubst_lambda_expr): Likewise.\n+\t(tsubst_copy_and_build_call_args): Likewise.\n+\t(tsubst_copy_and_build): Likewise.  Remove i_c_e_p parameter.\n+\t<case IDENTIFIER_NODE>: Adjust call to finish_id_expression\n+\tfollowing removal of i_c_e_p.\n+\t<case *_CAST_EXPR>: Remove C++98-specific cast validity check\n+\tguarded by i_c_e_p.\n+\t(maybe_instantiate_noexcept): Adjust calls to\n+\ttsubst_copy_and_build and tsubst_expr.\n+\t(instantiate_body): Likewise.\n+\t(instantiate_decl): Likewise.\n+\t(tsubst_initializer_list): Likewise.\n+\t(tsubst_enum): Likewise.\n+\n+2022-11-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* cp-lang.cc (objcp_tsubst_copy_and_build): Remove\n+\tfunction_p parameter.\n+\t* cp-objcp-common.h (objcp_tsubst_copy_and_build):\n+\tLikewise.\n+\t* cp-tree.h (tsubst_copy_and_build): Likewise.\n+\t* init.cc (get_nsdmi): Adjust calls to tsubst_copy_and_build.\n+\t* pt.cc (expand_integer_pack): Likewise.\n+\t(instantiate_non_dependent_expr_internal): Likewise.\n+\t(tsubst_function_decl): Likewise.\n+\t(tsubst_arg_types): Likewise.\n+\t(tsubst_exception_specification): Likewise.\n+\t(tsubst): Likewise.\n+\t(tsubst_copy_asm_operands): Likewise.\n+\t(tsubst_expr): Likewise.\n+\t(tsubst_non_call_postfix_expression): Likewise.\n+\t(tsubst_lambda_expr): Likewise.\n+\t(tsubst_copy_and_build_call_args): Likewise.\n+\t(tsubst_copy_and_build): Remove function_p parameter\n+\tand adjust function comment.  Adjust recursive calls.\n+\t<case CALL_EXPR>: Update outdated comment about when\n+\twe can see an IDENTIFIER_NODE callee with koenig_p=false.\n+\t(maybe_instantiate_noexcept): Adjust calls to\n+\ttsubst_copy_and_build.\n+\n 2022-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* cp-tree.h (next_common_initial_seqence): Rename to ..."}, {"sha": "d8bf128041f0473afcbe4c8bb2a20cf5ea7d6bb8", "filename": "gcc/fortran/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Ffortran%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Ffortran%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ffortran%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,11 @@\n+2022-11-15  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* cpp.cc (gfc_cpp_init): Use special_fname_builtin () rather than a\n+\thardcoded string (which was also incorrectly left untranslated\n+\tpreviously.)\n+\t* error.cc (gfc_diagnostic_build_locus_prefix): Likewise.\n+\t* f95-lang.cc (gfc_init): Likewise.\n+\n 2022-11-14  Harald Anlauf  <anlauf@gmx.de>\n \n \tPR fortran/107444"}, {"sha": "da57932788f2f79390b76bb28a70fd4d5980a872", "filename": "gcc/objcp/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Fobjcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Fobjcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fobjcp%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,13 @@\n+2022-11-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* objcp-lang.cc (objcp_tsubst_copy_and_build): Adjust calls to\n+\ttsubst_copy_and_build and tsubst_expr.\n+\n+2022-11-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* objcp-lang.cc (objcp_tsubst_copy_and_build): Remove\n+\tfunction_p parameter.\n+\n 2022-05-31  Jason Merrill  <jason@redhat.com>\n \n \t* Make-lang.in (obj-c++.tags): Look at *.cc."}, {"sha": "41fdbc499337ee0a72f28fbc2caeaaaebca9c7d9", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,102 @@\n+2022-11-15  Marek Polacek  <polacek@redhat.com>\n+\n+\tPR c++/107492\n+\t* g++.dg/warn/Wignored-qualifiers3.C: New test.\n+\n+2022-11-15  Philipp Tomsich  <philipp.tomsich@vrull.eu>\n+\n+\t* gcc.target/riscv/builtin_pause.c: New test.\n+\n+2022-11-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\tPR analyzer/106140\n+\t* gcc.dg/analyzer/fd-accept.c: New test.\n+\t* gcc.dg/analyzer/fd-bind.c: New test.\n+\t* gcc.dg/analyzer/fd-connect.c: New test.\n+\t* gcc.dg/analyzer/fd-datagram-socket.c: New test.\n+\t* gcc.dg/analyzer/fd-glibc-byte-stream-connection-server.c: New test.\n+\t* gcc.dg/analyzer/fd-glibc-byte-stream-socket.c: New test.\n+\t* gcc.dg/analyzer/fd-glibc-datagram-client.c: New test.\n+\t* gcc.dg/analyzer/fd-glibc-datagram-socket.c: New test.\n+\t* gcc.dg/analyzer/fd-glibc-make_named_socket.h: New test.\n+\t* gcc.dg/analyzer/fd-listen.c: New test.\n+\t* gcc.dg/analyzer/fd-manpage-getaddrinfo-client.c: New test.\n+\t* gcc.dg/analyzer/fd-mappage-getaddrinfo-server.c: New test.\n+\t* gcc.dg/analyzer/fd-socket-meaning.c: New test.\n+\t* gcc.dg/analyzer/fd-socket-misuse.c: New test.\n+\t* gcc.dg/analyzer/fd-stream-socket-active-open.c: New test.\n+\t* gcc.dg/analyzer/fd-stream-socket-passive-open.c: New test.\n+\t* gcc.dg/analyzer/fd-stream-socket.c: New test.\n+\t* gcc.dg/analyzer/fd-symbolic-socket.c: New test.\n+\t* gcc.dg/analyzer/pr104369-1.c: Add -Wno-analyzer-too-complex and\n+\t-Wno-analyzer-fd-leak to options.\n+\t* gcc.dg/analyzer/pr104369-2.c: Add -Wno-analyzer-fd-leak to\n+\toptions.\n+\n+2022-11-15  David Malcolm  <dmalcolm@redhat.com>\n+\n+\t* gcc.dg/analyzer/analyzer-decls.h\n+\t(__analyzer_dump_named_constant): New decl.\n+\t* gcc.dg/analyzer/fd-4.c (void): Likewise.\n+\t(O_ACCMODE): Define.\n+\t* gcc.dg/analyzer/fd-access-mode-enum.c: New test, based on .\n+\t* gcc.dg/analyzer/fd-5.c: ...this.  Rename to...\n+\t* gcc.dg/analyzer/fd-access-mode-macros.c: ...this.\n+\t(O_ACCMODE): Define.\n+\t* gcc.dg/analyzer/fd-access-mode-target-headers.c: New test, also\n+\tbased on fd-5.c.\n+\t(test_sm_fd_constants): New.\n+\t* gcc.dg/analyzer/fd-dup-1.c (O_ACCMODE): Define.\n+\t* gcc.dg/analyzer/named-constants-via-enum.c: New test.\n+\t* gcc.dg/analyzer/named-constants-via-enum-and-macro.c: New test.\n+\t* gcc.dg/analyzer/named-constants-via-macros-2.c: New test.\n+\t* gcc.dg/analyzer/named-constants-via-macros.c: New test.\n+\n+2022-11-15  Lewis Hyatt  <lhyatt@gmail.com>\n+\n+\t* c-c++-common/cpp/macro-trace-1.c: New test.\n+\n+2022-11-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* c-c++-common/asan/global-overflow-1.c: Update\n+\texpected format.\n+\t* c-c++-common/asan/heap-overflow-1.c: Likewise.\n+\t* c-c++-common/asan/strlen-overflow-1.c: Likewise.\n+\t* c-c++-common/asan/strncpy-overflow-1.c: Likewise.\n+\t* c-c++-common/hwasan/heap-overflow.c: Likewise.\n+\t* g++.dg/asan/asan_mem_test.cc: Likewise.\n+\t* g++.dg/asan/asan_oob_test.cc: Likewise.\n+\t* g++.dg/asan/asan_str_test.cc: Likewise.\n+\t* g++.dg/asan/asan_test.cc: Likewise.\n+\t* g++.dg/asan/large-func-test-1.C: Likewise.\n+\n+2022-11-15  Patrick Palka  <ppalka@redhat.com>\n+\n+\t* g++.dg/template/crash55.C: Don't expect additional\n+\tC++98-specific diagnostics.\n+\t* g++.dg/template/ref3.C: Remove C++98-specific xfail.\n+\n+2022-11-15  Martin Liska  <mliska@suse.cz>\n+\n+\tRevert:\n+\t2022-11-09  Martin Liska  <mliska@suse.cz>\n+\n+\tPR c++/107599\n+\t* c-c++-common/diagnostic-format-json-2.c: Fix expected URL.\n+\t* c-c++-common/diagnostic-format-json-3.c: Likewise.\n+\t* c-c++-common/diagnostic-format-json-4.c: Likewise.\n+\t* gfortran.dg/diagnostic-format-json-2.F90: Likewise.\n+\t* gfortran.dg/diagnostic-format-json-3.F90: Likewise.\n+\n+2022-11-15  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\n+\t* gcc.target/aarch64/ldapr-ext.c: New test.\n+\n+2022-11-15  Andre Vieira  <andre.simoesdiasvieira@arm.com>\n+\t    Kyrylo Tkachov  <kyrylo.tkachov@arm.com>\n+\n+\t* gcc.target/aarch64/ldapr.c: New test.\n+\n 2022-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n \t* g++.dg/DRs/dr2392.C: Add testcase for DR 2392."}, {"sha": "dda005335c085fca161029513c6aa59b8eba83bf", "filename": "include/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/include%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/include%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/include%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,12 @@\n+2022-11-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* demangle.h (enum demangle_component_type): Add\n+\tDEMANGLE_COMPONENT_TEMPLATE_HEAD,\n+\tDEMANGLE_COMPONENT_TEMPLATE_TYPE_PARM,\n+\tDEMANGLE_COMPONENT_TEMPLATE_NON_TYPE_PARM,\n+\tDEMANGLE_COMPONENT_TEMPLATE_TEMPLATE_PARM,\n+\tDEMANGLE_COMPONENT_TEMPLATE_PACK_PARM.\n+\n 2022-11-04  Thomas Schwinge  <thomas@codesourcery.com>\n \n \t* gomp-constants.h (GOMP_DEVICE_INTEL_MIC): Comment out."}, {"sha": "ceefbd3f823ef3ea0be99db78e84650cd181a3df", "filename": "libatomic/ChangeLog", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/libatomic%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/libatomic%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libatomic%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,14 @@\n+2022-11-15  Wilco Dijkstra  <wilco.dijkstra@arm.com>\n+\n+\t* Makefile.in: Regenerated with automake 1.15.1.\n+\t* Makefile.am: Add atomic_16.S for AArch64.\n+\t* configure.tgt: Disable outline atomics in AArch64 build.\n+\t* config/linux/aarch64/atomic_16.S: New file - implementation of\n+\tifuncs for 16-byte atomics.\n+\t* config/linux/aarch64/host-config.h: Enable ifuncs, use LSE\n+\t(HWCAP_ATOMICS) for 1-8-byte atomics and LSE2 (HWCAP_USCAT) for\n+\t16-byte atomics.\n+\n 2022-11-15  Jakub Jelinek  <jakub@redhat.com>\n \n \tPR target/104688"}, {"sha": "01a1afd5b910734316588d4d3ac6907a32f31660", "filename": "libiberty/ChangeLog", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/libiberty%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/libiberty%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libiberty%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,15 @@\n+2022-11-15  Nathan Sidwell  <nathan@acm.org>\n+\n+\t* cp-demangle.c (struct d_print_info): Rename is_lambda_arg to\n+\tlambda_tpl_parms.  Augment semantics.\n+\t(d_make_comp): Add checks for new components.\n+\t(d_template_parm, d_template_head): New.\n+\t(d_lambda): Add templated lambda support.\n+\t(d_print_init): Adjust.\n+\t(d_print_lambda_parm_name): New.\n+\t(d_print_comp_inner): Support templated lambdas,\n+\t* testsuite/demangle-expected: Add testcases.\n+\n 2022-11-14  Martin Liska  <mliska@suse.cz>\n \n \tRevert:"}, {"sha": "db7b9588ea4fb568ebbecd80d916d70248c518d8", "filename": "libsanitizer/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/libsanitizer%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/libsanitizer%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libsanitizer%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,11 @@\n+2022-11-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* LOCAL_PATCHES: Update local patches.\n+\n+2022-11-15  Martin Liska  <mliska@suse.cz>\n+\n+\t* merge.sh: Use git clone --depth 1.\n+\n 2022-10-19  Martin Liska  <mliska@suse.cz>\n \n \t* configure: Regenerate."}, {"sha": "5fa0cea44b497337804cded0dec9d1706be90ad4", "filename": "libstdc++-v3/ChangeLog", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/libstdc%2B%2B-v3%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/cdc34229c11ff955aa1a08fb3919327f3c1a4e8a/libstdc%2B%2B-v3%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B-v3%2FChangeLog?ref=cdc34229c11ff955aa1a08fb3919327f3c1a4e8a", "patch": "@@ -1,3 +1,33 @@\n+2022-11-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* testsuite/std/format/functions/format.cc: Do not use\n+\tstd::make_unsigned_t<__int128>.\n+\n+2022-11-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* include/std/format (formattable): Only define for C++23/\n+\t* testsuite/std/format/formatter.cc: Moved to...\n+\t* testsuite/std/format/formatter/requirements.cc: ...here.\n+\t* testsuite/std/format/formatter/concept.cc: New test.\n+\t* testsuite/std/format/functions/format.cc: Replace use of\n+\tstd::formattable in C++20.\n+\n+2022-11-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\tPR libstdc++/107693\n+\t* include/std/format (_GLIBCXX_FORMAT_F128): Define to 2 when\n+\tbasic_format_arg needs to use its _M_f128 member.\n+\t(__extended_floating_point, __floating_point): Replace with ...\n+\t(__formattable_floating_point): New concept.\n+\t* testsuite/std/format/functions/format.cc: Check whether\n+\t__float128 is supported. Also test _Float128.\n+\n+2022-11-15  Jonathan Wakely  <jwakely@redhat.com>\n+\n+\t* doc/xml/manual/documentation_hacking.xml: Document use of\n+\tMarkdown for Doxygen comments. Tweak formatting.\n+\t* doc/html/manual/documentation_hacking.html: Regenerate.\n+\n 2022-11-14  Jonathan Wakely  <jwakely@redhat.com>\n \n \t* python/Makefile.am (install-data-local): Use mkdirs_p for debug"}]}