{"sha": "ba05366bad9d07eb62822e78c5eb762831a7d16f", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmEwNTM2NmJhZDlkMDdlYjYyODIyZTc4YzVlYjc2MjgzMWE3ZDE2Zg==", "commit": {"author": {"name": "Paolo Carlini", "email": "paolo.carlini@oracle.com", "date": "2017-10-27T17:32:58Z"}, "committer": {"name": "Paolo Carlini", "email": "paolo@gcc.gnu.org", "date": "2017-10-27T17:32:58Z"}, "message": "pt.c (invalid_nontype_parm_type_p): Return a bool instead of an int.\n\n2017-10-27  Paolo Carlini  <paolo.carlini@oracle.com>\n\n\t* pt.c (invalid_nontype_parm_type_p): Return a bool instead of an int.\n\nFrom-SVN: r254158", "tree": {"sha": "72d87f6ed8dd9f2fcaf1f8220c627e98a7e6dfd3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/72d87f6ed8dd9f2fcaf1f8220c627e98a7e6dfd3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/ba05366bad9d07eb62822e78c5eb762831a7d16f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba05366bad9d07eb62822e78c5eb762831a7d16f", "html_url": "https://github.com/Rust-GCC/gccrs/commit/ba05366bad9d07eb62822e78c5eb762831a7d16f", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/ba05366bad9d07eb62822e78c5eb762831a7d16f/comments", "author": null, "committer": null, "parents": [{"sha": "6c6bde30706c29ffe41415f95ef3f48b6712cbe7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/6c6bde30706c29ffe41415f95ef3f48b6712cbe7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/6c6bde30706c29ffe41415f95ef3f48b6712cbe7"}], "stats": {"total": 30, "additions": 17, "deletions": 13}, "files": [{"sha": "a4259f14a59a5d86dd301738a219be1f546287db", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba05366bad9d07eb62822e78c5eb762831a7d16f/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba05366bad9d07eb62822e78c5eb762831a7d16f/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=ba05366bad9d07eb62822e78c5eb762831a7d16f", "patch": "@@ -1,3 +1,7 @@\n+2017-10-27  Paolo Carlini  <paolo.carlini@oracle.com>\n+\n+\t* pt.c (invalid_nontype_parm_type_p): Return a bool instead of an int.\n+\n 2017-10-26  Nathan Sidwell  <nathan@acm.org>\n \n \t* decl.c (sort_labels): Restore function."}, {"sha": "9457aea5ed53aacfe1adae1955dd15392cefcedb", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/ba05366bad9d07eb62822e78c5eb762831a7d16f/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/ba05366bad9d07eb62822e78c5eb762831a7d16f/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=ba05366bad9d07eb62822e78c5eb762831a7d16f", "patch": "@@ -203,7 +203,7 @@ static void tsubst_default_arguments (tree, tsubst_flags_t);\n static tree for_each_template_parm_r (tree *, int *, void *);\n static tree copy_default_args_to_explicit_spec_1 (tree, tree);\n static void copy_default_args_to_explicit_spec (tree);\n-static int invalid_nontype_parm_type_p (tree, tsubst_flags_t);\n+static bool invalid_nontype_parm_type_p (tree, tsubst_flags_t);\n static bool dependent_template_arg_p (tree);\n static bool any_template_arguments_need_structural_equality_p (tree);\n static bool dependent_type_p_r (tree);\n@@ -23618,31 +23618,31 @@ instantiating_current_function_p (void)\n }\n \n /* [temp.param] Check that template non-type parm TYPE is of an allowable\n-   type. Return zero for ok, nonzero for disallowed. Issue error and\n-   warning messages under control of COMPLAIN.  */\n+   type.  Return false for ok, true for disallowed.  Issue error and\n+   inform messages under control of COMPLAIN.  */\n \n-static int\n+static bool\n invalid_nontype_parm_type_p (tree type, tsubst_flags_t complain)\n {\n   if (INTEGRAL_OR_ENUMERATION_TYPE_P (type))\n-    return 0;\n+    return false;\n   else if (POINTER_TYPE_P (type))\n-    return 0;\n+    return false;\n   else if (TYPE_PTRMEM_P (type))\n-    return 0;\n+    return false;\n   else if (TREE_CODE (type) == TEMPLATE_TYPE_PARM)\n-    return 0;\n+    return false;\n   else if (TREE_CODE (type) == TYPENAME_TYPE)\n-    return 0;\n+    return false;\n   else if (TREE_CODE (type) == DECLTYPE_TYPE)\n-    return 0;\n+    return false;\n   else if (TREE_CODE (type) == NULLPTR_TYPE)\n-    return 0;\n+    return false;\n   /* A bound template template parm could later be instantiated to have a valid\n      nontype parm type via an alias template.  */\n   else if (cxx_dialect >= cxx11\n \t   && TREE_CODE (type) == BOUND_TEMPLATE_TEMPLATE_PARM)\n-    return 0;\n+    return false;\n \n   if (complain & tf_error)\n     {\n@@ -23652,7 +23652,7 @@ invalid_nontype_parm_type_p (tree type, tsubst_flags_t complain)\n \terror (\"%q#T is not a valid type for a template non-type parameter\",\n \t       type);\n     }\n-  return 1;\n+  return true;\n }\n \n /* Returns TRUE if TYPE is dependent, in the sense of [temp.dep.type]."}]}