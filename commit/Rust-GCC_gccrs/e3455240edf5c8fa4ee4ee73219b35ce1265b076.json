{"sha": "e3455240edf5c8fa4ee4ee73219b35ce1265b076", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZTM0NTUyNDBlZGY1YzhmYTRlZTRlZTczMjE5YjM1Y2UxMjY1YjA3Ng==", "commit": {"author": {"name": "Marek Polacek", "email": "polacek@redhat.com", "date": "2017-05-18T10:55:59Z"}, "committer": {"name": "Marek Polacek", "email": "mpolacek@gcc.gnu.org", "date": "2017-05-18T10:55:59Z"}, "message": "c-common.c (self_promoting_args_p): Change the return type to bool.\n\n\t* c-common.c (self_promoting_args_p): Change the return type to bool.\n\tUse false/true instead of 0/1.\n\t* c-common.h (self_promoting_args_p): Update.\n\n\t* c-decl.c (start_decl): Use false/true instead of 0/1.\n\t(grokdeclarator): Likewise.\n\t(finish_struct): Likewise.\n\t(start_function): Change the return type to bool.  Use false/true\n\tinstead of 0/1.\n\t(declspecs_add_qual): Use UNKNOWN_LOCATION instead of 0.\n\t* c-tree.h (start_function): Update.\n\t* c-typeck.c (same_translation_unit_p): Change the return type to bool.\n\t(set_designator): Change the return type to bool.  Use false/true\n\tinstead of 0/1.\n\nFrom-SVN: r248192", "tree": {"sha": "b1e8c78c93b3e808826efcfce13bb407c2bb95b8", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b1e8c78c93b3e808826efcfce13bb407c2bb95b8"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e3455240edf5c8fa4ee4ee73219b35ce1265b076", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3455240edf5c8fa4ee4ee73219b35ce1265b076", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e3455240edf5c8fa4ee4ee73219b35ce1265b076", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e3455240edf5c8fa4ee4ee73219b35ce1265b076/comments", "author": {"login": "mpolacek", "id": 10496300, "node_id": "MDQ6VXNlcjEwNDk2MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/10496300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mpolacek", "html_url": "https://github.com/mpolacek", "followers_url": "https://api.github.com/users/mpolacek/followers", "following_url": "https://api.github.com/users/mpolacek/following{/other_user}", "gists_url": "https://api.github.com/users/mpolacek/gists{/gist_id}", "starred_url": "https://api.github.com/users/mpolacek/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mpolacek/subscriptions", "organizations_url": "https://api.github.com/users/mpolacek/orgs", "repos_url": "https://api.github.com/users/mpolacek/repos", "events_url": "https://api.github.com/users/mpolacek/events{/privacy}", "received_events_url": "https://api.github.com/users/mpolacek/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "59a4ede94fed26e12efabde29d5d25a50f3ec59b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/59a4ede94fed26e12efabde29d5d25a50f3ec59b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/59a4ede94fed26e12efabde29d5d25a50f3ec59b"}], "stats": {"total": 96, "additions": 57, "deletions": 39}, "files": [{"sha": "23a6afedb18f507e253c1f953eae83bf7e805920", "filename": "gcc/c-family/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc-family%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc-family%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2FChangeLog?ref=e3455240edf5c8fa4ee4ee73219b35ce1265b076", "patch": "@@ -1,3 +1,9 @@\n+2017-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-common.c (self_promoting_args_p): Change the return type to bool.\n+\tUse false/true instead of 0/1.\n+\t* c-common.h (self_promoting_args_p): Update.\n+\n 2017-05-17  Marek Polacek  <polacek@redhat.com>\n \n \t* c-common.c: Use NULL_TREE instead of 0 where appropriate."}, {"sha": "a9e2408cabac8e92ec69d8dcd7f7bfc445d03575", "filename": "gcc/c-family/c-common.c", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc-family%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc-family%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.c?ref=e3455240edf5c8fa4ee4ee73219b35ce1265b076", "patch": "@@ -4640,7 +4640,7 @@ c_promoting_integer_type_p (const_tree t)\n /* Return 1 if PARMS specifies a fixed number of parameters\n    and none of their types is affected by default promotions.  */\n \n-int\n+bool\n self_promoting_args_p (const_tree parms)\n {\n   const_tree t;\n@@ -4652,18 +4652,18 @@ self_promoting_args_p (const_tree parms)\n \tcontinue;\n \n       if (TREE_CHAIN (t) == NULL_TREE && type != void_type_node)\n-\treturn 0;\n+\treturn false;\n \n       if (type == NULL_TREE)\n-\treturn 0;\n+\treturn false;\n \n       if (TYPE_MAIN_VARIANT (type) == float_type_node)\n-\treturn 0;\n+\treturn false;\n \n       if (c_promoting_integer_type_p (type))\n-\treturn 0;\n+\treturn false;\n     }\n-  return 1;\n+  return true;\n }\n \n /* Recursively remove any '*' or '&' operator from TYPE.  */"}, {"sha": "502dc2f95cd1d5946396d51dd213780f92856844", "filename": "gcc/c-family/c-common.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc-family%2Fc-common.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc-family%2Fc-common.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-family%2Fc-common.h?ref=e3455240edf5c8fa4ee4ee73219b35ce1265b076", "patch": "@@ -908,7 +908,7 @@ extern FILE *get_dump_info (int, dump_flags_t *);\n extern alias_set_type c_common_get_alias_set (tree);\n extern void c_register_builtin_type (tree, const char*);\n extern bool c_promoting_integer_type_p (const_tree);\n-extern int self_promoting_args_p (const_tree);\n+extern bool self_promoting_args_p (const_tree);\n extern tree strip_pointer_operator (tree);\n extern tree strip_pointer_or_array_types (tree);\n extern HOST_WIDE_INT c_common_to_target_charset (HOST_WIDE_INT);"}, {"sha": "4dbeedfe7fbc498ed2e528251071081a18b35a3f", "filename": "gcc/c/ChangeLog", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2FChangeLog?ref=e3455240edf5c8fa4ee4ee73219b35ce1265b076", "patch": "@@ -1,3 +1,16 @@\n+2017-05-18  Marek Polacek  <polacek@redhat.com>\n+\n+\t* c-decl.c (start_decl): Use false/true instead of 0/1.\n+\t(grokdeclarator): Likewise.\n+\t(finish_struct): Likewise.\n+\t(start_function): Change the return type to bool.  Use false/true\n+\tinstead of 0/1.\n+\t(declspecs_add_qual): Use UNKNOWN_LOCATION instead of 0.\n+\t* c-tree.h (start_function): Update.\n+\t* c-typeck.c (same_translation_unit_p): Change the return type to bool.\n+\t(set_designator): Change the return type to bool.  Use false/true\n+\tinstead of 0/1.\n+\n 2017-05-17  Marek Polacek  <polacek@redhat.com>\n \n \t* c-decl.c: Use NULL_TREE instead of 0 where appropriate."}, {"sha": "52d89f80350c9ece1fe9a4f32989c81e48bd73a0", "filename": "gcc/c/c-decl.c", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-decl.c?ref=e3455240edf5c8fa4ee4ee73219b35ce1265b076", "patch": "@@ -4663,18 +4663,18 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n       {\n       case TYPE_DECL:\n \terror (\"typedef %qD is initialized (use __typeof__ instead)\", decl);\n-\tinitialized = 0;\n+\tinitialized = false;\n \tbreak;\n \n       case FUNCTION_DECL:\n \terror (\"function %qD is initialized like a variable\", decl);\n-\tinitialized = 0;\n+\tinitialized = false;\n \tbreak;\n \n       case PARM_DECL:\n \t/* DECL_INITIAL in a PARM_DECL is really DECL_ARG_TYPE.  */\n \terror (\"parameter %qD is initialized\", decl);\n-\tinitialized = 0;\n+\tinitialized = false;\n \tbreak;\n \n       default:\n@@ -4684,7 +4684,7 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n \t/* This can happen if the array size is an undefined macro.\n \t   We already gave a warning, so we don't need another one.  */\n \tif (TREE_TYPE (decl) == error_mark_node)\n-\t  initialized = 0;\n+\t  initialized = false;\n \telse if (COMPLETE_TYPE_P (TREE_TYPE (decl)))\n \t  {\n \t    /* A complete type is ok if size is fixed.  */\n@@ -4693,13 +4693,13 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n \t\t|| C_DECL_VARIABLE_SIZE (decl))\n \t      {\n \t\terror (\"variable-sized object may not be initialized\");\n-\t\tinitialized = 0;\n+\t\tinitialized = false;\n \t      }\n \t  }\n \telse if (TREE_CODE (TREE_TYPE (decl)) != ARRAY_TYPE)\n \t  {\n \t    error (\"variable %qD has initializer but incomplete type\", decl);\n-\t    initialized = 0;\n+\t    initialized = false;\n \t  }\n \telse if (C_DECL_VARIABLE_SIZE (decl))\n \t  {\n@@ -4708,7 +4708,7 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n \t       sense to permit them to be initialized given that\n \t       ordinary VLAs may not be initialized.  */\n \t    error (\"variable-sized object may not be initialized\");\n-\t    initialized = 0;\n+\t    initialized = false;\n \t  }\n       }\n \n@@ -5573,7 +5573,7 @@ grokdeclarator (const struct c_declarator *declarator,\n   tree decl_attr = declspecs->decl_attr;\n   int array_ptr_quals = TYPE_UNQUALIFIED;\n   tree array_ptr_attrs = NULL_TREE;\n-  int array_parm_static = 0;\n+  bool array_parm_static = false;\n   bool array_parm_vla_unspec_p = false;\n   tree returned_attrs = NULL_TREE;\n   bool bitfield = width != NULL;\n@@ -5907,7 +5907,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t  error_at (loc, \"static or type qualifiers in non-parameter array declarator\");\n \t  array_ptr_quals = TYPE_UNQUALIFIED;\n \t  array_ptr_attrs = NULL_TREE;\n-\t  array_parm_static = 0;\n+\t  array_parm_static = false;\n \t}\n \n       switch (declarator->kind)\n@@ -6277,7 +6277,7 @@ grokdeclarator (const struct c_declarator *declarator,\n \t\t\t  \"array declarator\");\n \t\tarray_ptr_quals = TYPE_UNQUALIFIED;\n \t\tarray_ptr_attrs = NULL_TREE;\n-\t\tarray_parm_static = 0;\n+\t\tarray_parm_static = false;\n \t      }\n \t    orig_qual_indirect++;\n \t    break;\n@@ -7862,7 +7862,6 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n {\n   tree x;\n   bool toplevel = file_scope == current_scope;\n-  int saw_named_field;\n \n   /* If this type was previously laid out as a forward reference,\n      make sure we lay it out again.  */\n@@ -7907,7 +7906,7 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n      type.  (Correct layout requires the original type to have been preserved\n      until now.)  */\n \n-  saw_named_field = 0;\n+  bool saw_named_field = false;\n   for (x = fieldlist; x; x = DECL_CHAIN (x))\n     {\n       if (TREE_TYPE (x) == error_mark_node)\n@@ -7982,7 +7981,7 @@ finish_struct (location_t loc, tree t, tree fieldlist, tree attributes,\n \n       if (DECL_NAME (x)\n \t  || RECORD_OR_UNION_TYPE_P (TREE_TYPE (x)))\n-\tsaw_named_field = 1;\n+\tsaw_named_field = true;\n     }\n \n   detect_field_duplicates (fieldlist);\n@@ -8518,11 +8517,10 @@ build_enumerator (location_t decl_loc, location_t loc,\n    This function creates a binding context for the function body\n    as well as setting up the FUNCTION_DECL in current_function_decl.\n \n-   Returns 1 on success.  If the DECLARATOR is not suitable for a function\n-   (it defines a datum instead), we return 0, which tells\n-   yyparse to report a parse error.  */\n+   Returns true on success.  If the DECLARATOR is not suitable for a function\n+   (it defines a datum instead), we return false to report a parse error.  */\n \n-int\n+bool\n start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n \t\ttree attributes)\n {\n@@ -8549,7 +8547,7 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n      cause a syntax error.  */\n   if (decl1 == NULL_TREE\n       || TREE_CODE (decl1) != FUNCTION_DECL)\n-    return 0;\n+    return false;\n \n   loc = DECL_SOURCE_LOCATION (decl1);\n \n@@ -8749,7 +8747,7 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n \n   start_fname_decls ();\n \n-  return 1;\n+  return true;\n }\n \f\n /* Subroutine of store_parm_decls which handles new-style function\n@@ -9773,7 +9771,7 @@ declspecs_add_qual (source_location loc,\n   gcc_assert (TREE_CODE (qual) == IDENTIFIER_NODE\n \t      && C_IS_RESERVED_WORD (qual));\n   i = C_RID_CODE (qual);\n-  location_t prev_loc = 0;\n+  location_t prev_loc = UNKNOWN_LOCATION;\n   switch (i)\n     {\n     case RID_CONST:"}, {"sha": "17a88979bd42548f0751948ff53e2d3a6c63c36c", "filename": "gcc/c/c-tree.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc%2Fc-tree.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc%2Fc-tree.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-tree.h?ref=e3455240edf5c8fa4ee4ee73219b35ce1265b076", "patch": "@@ -561,7 +561,7 @@ extern tree c_builtin_function_ext_scope (tree);\n extern void shadow_tag (const struct c_declspecs *);\n extern void shadow_tag_warned (const struct c_declspecs *, int);\n extern tree start_enum (location_t, struct c_enum_contents *, tree);\n-extern int  start_function (struct c_declspecs *, struct c_declarator *, tree);\n+extern bool start_function (struct c_declspecs *, struct c_declarator *, tree);\n extern tree start_decl (struct c_declarator *, struct c_declspecs *, bool,\n \t\t\ttree);\n extern tree start_struct (location_t, enum tree_code, tree,\n@@ -616,7 +616,7 @@ extern struct c_switch *c_switch_stack;\n \n extern tree c_objc_common_truthvalue_conversion (location_t, tree);\n extern tree require_complete_type (location_t, tree);\n-extern int same_translation_unit_p (const_tree, const_tree);\n+extern bool same_translation_unit_p (const_tree, const_tree);\n extern int comptypes (tree, tree);\n extern int comptypes_check_different_types (tree, tree, bool *);\n extern bool c_vla_type_p (const_tree);"}, {"sha": "96f7a5c17ed8ff5d908893021d1f331e50e4eaf3", "filename": "gcc/c/c-typeck.c", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc%2Fc-typeck.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e3455240edf5c8fa4ee4ee73219b35ce1265b076/gcc%2Fc%2Fc-typeck.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc%2Fc-typeck.c?ref=e3455240edf5c8fa4ee4ee73219b35ce1265b076", "patch": "@@ -105,7 +105,7 @@ static tree digest_init (location_t, tree, tree, tree, bool, bool, int);\n static void output_init_element (location_t, tree, tree, bool, tree, tree, int,\n \t\t\t\t bool, struct obstack *);\n static void output_pending_init_elements (int, struct obstack *);\n-static int set_designator (location_t, int, struct obstack *);\n+static bool set_designator (location_t, int, struct obstack *);\n static void push_range_stack (tree, struct obstack *);\n static void add_pending_init (location_t, tree, tree, tree, bool,\n \t\t\t      struct obstack *);\n@@ -1306,7 +1306,8 @@ comp_target_types (location_t location, tree ttl, tree ttr)\n    If the CONTEXT chain ends in a null, that tree's context is still\n    being parsed, so if two trees have context chains ending in null,\n    they're in the same translation unit.  */\n-int\n+\n+bool\n same_translation_unit_p (const_tree t1, const_tree t2)\n {\n   while (t1 && TREE_CODE (t1) != TRANSLATION_UNIT_DECL)\n@@ -8176,9 +8177,9 @@ pop_init_level (location_t loc, int implicit,\n }\n \n /* Common handling for both array range and field name designators.\n-   ARRAY argument is nonzero for array ranges.  Returns zero for success.  */\n+   ARRAY argument is nonzero for array ranges.  Returns false for success.  */\n \n-static int\n+static bool\n set_designator (location_t loc, int array,\n \t\tstruct obstack *braced_init_obstack)\n {\n@@ -8188,12 +8189,12 @@ set_designator (location_t loc, int array,\n   /* Don't die if an entire brace-pair level is superfluous\n      in the containing level.  */\n   if (constructor_type == NULL_TREE)\n-    return 1;\n+    return true;\n \n   /* If there were errors in this designator list already, bail out\n      silently.  */\n   if (designator_erroneous)\n-    return 1;\n+    return true;\n \n   if (!designator_depth)\n     {\n@@ -8207,7 +8208,7 @@ set_designator (location_t loc, int array,\n \t\t\t\t\t      last_init_list_comma),\n \t\t\t      true, braced_init_obstack);\n       constructor_designated = 1;\n-      return 0;\n+      return false;\n     }\n \n   switch (TREE_CODE (constructor_type))\n@@ -8229,18 +8230,18 @@ set_designator (location_t loc, int array,\n   if (array && subcode != ARRAY_TYPE)\n     {\n       error_init (loc, \"array index in non-array initializer\");\n-      return 1;\n+      return true;\n     }\n   else if (!array && subcode != RECORD_TYPE && subcode != UNION_TYPE)\n     {\n       error_init (loc, \"field name not in record or union initializer\");\n-      return 1;\n+      return true;\n     }\n \n   constructor_designated = 1;\n   finish_implicit_inits (loc, braced_init_obstack);\n   push_init_level (loc, 2, braced_init_obstack);\n-  return 0;\n+  return false;\n }\n \n /* If there are range designators in designator list, push a new designator"}]}