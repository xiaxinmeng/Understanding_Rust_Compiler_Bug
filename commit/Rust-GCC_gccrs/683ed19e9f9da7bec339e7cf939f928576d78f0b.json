{"sha": "683ed19e9f9da7bec339e7cf939f928576d78f0b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NjgzZWQxOWU5ZjlkYTdiZWMzMzllN2NmOTM5ZjkyODU3NmQ3OGYwYg==", "commit": {"author": {"name": "Edmar Wienskoski", "email": "edmar@freescale.com", "date": "2012-06-05T16:05:16Z"}, "committer": {"name": "Edmar Wienskoski", "email": "edmarwjr@gcc.gnu.org", "date": "2012-06-05T16:05:16Z"}, "message": "e5500.md: New file.\n\n2012-06-01  Edmar Wienskoski  <edmar@freescale.com>\n\n\t* config/rs6000/e5500.md: New file.\n\t* config/rs6000/e6500.md: New file.\n\t* config/rs6000/rs6000.c (processor_costs): Add new costs for\n\te5500 and e6500.\n\t(rs6000_option_override_internal): Altivec and Spe options not\n\tallowed with e5500. Spe options not allowed with e6500. Increase\n\tmove inline limit for e5500 and e6500. Disable string instructions\n\tfor e5500 and e6500. Enable branch targets alignment for e5500 and\n\te6500. Initialize rs6000_cost for e5500 and e6500.\n\t(rs6000_adjust_cost): Add extra scheduling cycles between compare\n\tand brnach for e5500 and e6500.\n\t(rs6000_issue_rate): Set issue rate for e5500 and e6500.\n\t* config/rs6000/rs6000-cpus.def: Add cpu definitions for e5500 and\n\te6500.\n\t* config/rs6000/rs6000.h (ASM_CPU_SPEC): Add e5500 and e6500.\n\t* config/rs6000/rs6000.md (define_attr \"cpu\"): Add ppce5500 and\n\tppce6500.\n\tInclude e5500.md and e6500.md.\n\t* config/rs6000/rs6000-opt.h (processor_type): Add\n\tPROCESSOR_PPCE5500 and PROCESSOR_PPCE6500.\n\t* config.gcc (cpu_is_64bit): Add new cores e5500, e6500.\n\t(powerpc*-*-*): Add new cores e5500, e6500.\n\t* doc/invoke.texi: (item -mcpu): Add e5500 and e6500 to list of cpus.\n\ngcc/testsuite\n2012-06-01  Edmar Wienskoski  <edmar@freescale.com>\n\n\t* gcc.dg/tree-ssa/vector-3.c: Adjust regular expression.\n\nFrom-SVN: r188244", "tree": {"sha": "ec23bd2b2db42e1e1f8d5f1bd9b93ef51a03eaa7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec23bd2b2db42e1e1f8d5f1bd9b93ef51a03eaa7"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/683ed19e9f9da7bec339e7cf939f928576d78f0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/683ed19e9f9da7bec339e7cf939f928576d78f0b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/683ed19e9f9da7bec339e7cf939f928576d78f0b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/683ed19e9f9da7bec339e7cf939f928576d78f0b/comments", "author": null, "committer": null, "parents": [{"sha": "d4d5e1468fd34b1cfc1fd5704529810fcbf66e6c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d4d5e1468fd34b1cfc1fd5704529810fcbf66e6c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d4d5e1468fd34b1cfc1fd5704529810fcbf66e6c"}], "stats": {"total": 519, "additions": 506, "deletions": 13}, "files": [{"sha": "15f60380f6f6fe0c4b0c7a2351d868256974298f", "filename": "gcc/ChangeLog", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=683ed19e9f9da7bec339e7cf939f928576d78f0b", "patch": "@@ -1,3 +1,29 @@\n+2012-06-01  Edmar Wienskoski  <edmar@freescale.com>\n+\n+\t* config/rs6000/e5500.md: New file.\n+\t* config/rs6000/e6500.md: New file.\n+\t* config/rs6000/rs6000.c (processor_costs): Add new costs for\n+\te5500 and e6500.\n+\t(rs6000_option_override_internal): Altivec and Spe options not\n+\tallowed with e5500. Spe options not allowed with e6500. Increase\n+\tmove inline limit for e5500 and e6500. Disable string instructions\n+\tfor e5500 and e6500. Enable branch targets alignment for e5500 and\n+\te6500. Initialize rs6000_cost for e5500 and e6500.\n+\t(rs6000_adjust_cost): Add extra scheduling cycles between compare\n+\tand brnach for e5500 and e6500.\n+\t(rs6000_issue_rate): Set issue rate for e5500 and e6500.\n+\t* config/rs6000/rs6000-cpus.def: Add cpu definitions for e5500 and\n+\te6500.\n+\t* config/rs6000/rs6000.h (ASM_CPU_SPEC): Add e5500 and e6500.\n+\t* config/rs6000/rs6000.md (define_attr \"cpu\"): Add ppce5500 and\n+\tppce6500.\n+\tInclude e5500.md and e6500.md.\n+\t* config/rs6000/rs6000-opt.h (processor_type): Add\n+\tPROCESSOR_PPCE5500 and PROCESSOR_PPCE6500.\n+\t* config.gcc (cpu_is_64bit): Add new cores e5500, e6500.\n+\t(powerpc*-*-*): Add new cores e5500, e6500.\n+\t* doc/invoke.texi: (item -mcpu): Add e5500 and e6500 to list of cpus.\n+\n 2012-06-05  Richard Guenther  <rguenther@suse.de>\n \n \t* tree-vect-data-refs.c (vect_analyze_data_refs): Fix last"}, {"sha": "f2b09363992f220d637c896f499cf2acd904723a", "filename": "gcc/config.gcc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig.gcc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig.gcc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig.gcc?ref=683ed19e9f9da7bec339e7cf939f928576d78f0b", "patch": "@@ -415,7 +415,7 @@ powerpc*-*-*)\n \textra_headers=\"ppc-asm.h altivec.h spe.h ppu_intrinsics.h paired.h spu2vmx.h vec_types.h si2vmx.h\"\n \tneed_64bit_hwint=yes\n \tcase x$with_cpu in\n-\t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[34567]|xpower6x|xrs64a|xcell|xa2|xe500mc64)\n+\t    xpowerpc64|xdefault64|x6[23]0|x970|xG5|xpower[34567]|xpower6x|xrs64a|xcell|xa2|xe500mc64|xe5500|Xe6500)\n \t\tcpu_is_64bit=yes\n \t\t;;\n \tesac\n@@ -3322,8 +3322,8 @@ case \"${target}\" in\n \t\t\t| 401 | 403 | 405 | 405fp | 440 | 440fp | 464 | 464fp \\\n \t\t\t| 476 | 476fp | 505 | 601 | 602 | 603 | 603e | ec603e \\\n \t\t\t| 604 | 604e | 620 | 630 | 740 | 750 | 7400 | 7450 \\\n-\t\t\t| a2 | e300c[23] | 854[08] | e500mc | e500mc64 | titan\\\n-\t\t\t| 801 | 821 | 823 | 860 | 970 | G3 | G4 | G5 | cell)\n+\t\t\t| a2 | e300c[23] | 854[08] | e500mc | e500mc64 | e5500 | e6500 \\\n+\t\t\t| titan | 801 | 821 | 823 | 860 | 970 | G3 | G4 | G5 | cell)\n \t\t\t\t# OK\n \t\t\t\t;;\n \t\t\t*)"}, {"sha": "4c1c8b3a7353621440cecc23f1e9bba9bf4d6104", "filename": "gcc/config/rs6000/e5500.md", "status": "added", "additions": 176, "deletions": 0, "changes": 176, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Fe5500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Fe5500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe5500.md?ref=683ed19e9f9da7bec339e7cf939f928576d78f0b", "patch": "@@ -0,0 +1,176 @@\n+;; Pipeline description for Freescale PowerPC e5500 core.\n+;;   Copyright (C) 2012 Free Software Foundation, Inc.\n+;;   Contributed by Edmar Wienskoski (edmar@freescale.com)\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+;;\n+;; e5500 64-bit SFX(2), CFX, LSU, FPU, BU\n+;; Max issue 3 insns/clock cycle (includes 1 branch)\n+\n+(define_automaton \"e5500_most,e5500_long\")\n+(define_cpu_unit \"e5500_decode_0,e5500_decode_1\" \"e5500_most\")\n+\n+;; SFX.\n+(define_cpu_unit \"e5500_sfx_0,e5500_sfx_1\" \"e5500_most\")\n+\n+;; CFX.\n+(define_cpu_unit \"e5500_cfx_stage0,e5500_cfx_stage1\" \"e5500_most\")\n+\n+;; Non-pipelined division.\n+(define_cpu_unit \"e5500_cfx_div\" \"e5500_long\")\n+\n+;; LSU.\n+(define_cpu_unit \"e5500_lsu\" \"e5500_most\")\n+\n+;; FPU.\n+(define_cpu_unit \"e5500_fpu\" \"e5500_long\")\n+\n+;; BU.\n+(define_cpu_unit \"e5500_bu\" \"e5500_most\")\n+\n+;; The following units are used to make the automata deterministic.\n+(define_cpu_unit \"present_e5500_decode_0\" \"e5500_most\")\n+(define_cpu_unit \"present_e5500_sfx_0\" \"e5500_most\")\n+(presence_set \"present_e5500_decode_0\" \"e5500_decode_0\")\n+(presence_set \"present_e5500_sfx_0\" \"e5500_sfx_0\")\n+\n+;; Some useful abbreviations.\n+(define_reservation \"e5500_decode\"\n+    \"e5500_decode_0|e5500_decode_1+present_e5500_decode_0\")\n+(define_reservation \"e5500_sfx\"\n+   \"e5500_sfx_0|e5500_sfx_1+present_e5500_sfx_0\")\n+\n+;; SFX.\n+(define_insn_reservation \"e5500_sfx\" 1\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,delayed_compare,\\\n+\tshift,cntlz,exts\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_sfx\")\n+\n+(define_insn_reservation \"e5500_sfx2\" 2\n+  (and (eq_attr \"type\" \"cmp,compare,fast_compare,trap\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_sfx\")\n+\n+(define_insn_reservation \"e5500_delayed\" 2\n+  (and (eq_attr \"type\" \"var_shift_rotate,var_delayed_compare\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_sfx*2\")\n+\n+(define_insn_reservation \"e5500_two\" 2\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_decode+e5500_sfx,e5500_sfx\")\n+\n+(define_insn_reservation \"e5500_three\" 3\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,(e5500_decode+e5500_sfx)*2,e5500_sfx\")\n+\n+;; SFX - Mfcr.\n+(define_insn_reservation \"e5500_mfcr\" 4\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_sfx_0*4\")\n+\n+;; SFX - Mtcrf.\n+(define_insn_reservation \"e5500_mtcrf\" 1\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_sfx_0\")\n+\n+;; SFX - Mtjmpr.\n+(define_insn_reservation \"e5500_mtjmpr\" 1\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_sfx\")\n+\n+;; CFX - Multiply.\n+(define_insn_reservation \"e5500_multiply\" 4\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_cfx_stage0,e5500_cfx_stage1\")\n+\n+(define_insn_reservation \"e5500_multiply_i\" 5\n+  (and (eq_attr \"type\" \"imul2,imul3,imul_compare\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_cfx_stage0,\\\n+   e5500_cfx_stage0+e5500_cfx_stage1,e5500_cfx_stage1\")\n+\n+;; CFX - Divide.\n+(define_insn_reservation \"e5500_divide\" 16\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_cfx_stage0+e5500_cfx_div,\\\n+   e5500_cfx_div*15\")\n+\n+(define_insn_reservation \"e5500_divide_d\" 26\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_cfx_stage0+e5500_cfx_div,\\\n+   e5500_cfx_div*25\")\n+\n+;; LSU - Loads.\n+(define_insn_reservation \"e5500_load\" 3\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n+\t\t\tload_l,sync\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_lsu\")\n+\n+(define_insn_reservation \"e5500_fpload\" 4\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_lsu\")\n+\n+;; LSU - Stores.\n+(define_insn_reservation \"e5500_store\" 3\n+  (and (eq_attr \"type\" \"store,store_ux,store_u,store_c\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_lsu\")\n+\n+(define_insn_reservation \"e5500_fpstore\" 3\n+  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_lsu\")\n+\n+;; FP.\n+(define_insn_reservation \"e5500_float\" 7\n+  (and (eq_attr \"type\" \"fpsimple,fp,fpcompare,dmul\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_fpu\")\n+\n+(define_insn_reservation \"e5500_sdiv\" 20\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_fpu*20\")\n+\n+(define_insn_reservation \"e5500_ddiv\" 35\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_fpu*35\")\n+\n+;; BU.\n+(define_insn_reservation \"e5500_branch\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_bu\")\n+\n+;; BU - CR logical.\n+(define_insn_reservation \"e5500_cr_logical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppce5500\"))\n+  \"e5500_decode,e5500_bu\")"}, {"sha": "c6476e5f903221e7f3a010f9de95303d8b745a3e", "filename": "gcc/config/rs6000/e6500.md", "status": "added", "additions": 213, "deletions": 0, "changes": 213, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Fe6500.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Fe6500.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Fe6500.md?ref=683ed19e9f9da7bec339e7cf939f928576d78f0b", "patch": "@@ -0,0 +1,213 @@\n+;; Pipeline description for Freescale PowerPC e6500 core.\n+;;   Copyright (C) 2012 Free Software Foundation, Inc.\n+;;   Contributed by Edmar Wienskoski (edmar@freescale.com)\n+;;\n+;; This file is part of GCC.\n+;;\n+;; GCC is free software; you can redistribute it and/or modify it\n+;; under the terms of the GNU General Public License as published\n+;; by the Free Software Foundation; either version 3, or (at your\n+;; option) any later version.\n+;;\n+;; GCC is distributed in the hope that it will be useful, but WITHOUT\n+;; ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n+;; or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public\n+;; License for more details.\n+;;\n+;; You should have received a copy of the GNU General Public License\n+;; along with GCC; see the file COPYING3.  If not see\n+;; <http://www.gnu.org/licenses/>.\n+;;\n+;; e6500 64-bit SFX(2), CFX, LSU, FPU, BU, VSFX, VCFX, VFPU, VPERM\n+;; Max issue 3 insns/clock cycle (includes 1 branch)\n+\n+(define_automaton \"e6500_most,e6500_long,e6500_vec\")\n+(define_cpu_unit \"e6500_decode_0,e6500_decode_1\" \"e6500_most\")\n+\n+;; SFX.\n+(define_cpu_unit \"e6500_sfx_0,e6500_sfx_1\" \"e6500_most\")\n+\n+;; CFX.\n+(define_cpu_unit \"e6500_cfx_stage0,e6500_cfx_stage1\" \"e6500_most\")\n+\n+;; Non-pipelined division.\n+(define_cpu_unit \"e6500_cfx_div\" \"e6500_long\")\n+\n+;; LSU.\n+(define_cpu_unit \"e6500_lsu\" \"e6500_most\")\n+\n+;; FPU.\n+(define_cpu_unit \"e6500_fpu\" \"e6500_long\")\n+\n+;; BU.\n+(define_cpu_unit \"e6500_bu\" \"e6500_most\")\n+\n+;; Altivec unit\n+(define_cpu_unit \"e6500_vec,e6500_vecperm\" \"e6500_vec\")\n+\n+;; The following units are used to make the automata deterministic.\n+(define_cpu_unit \"present_e6500_decode_0\" \"e6500_most\")\n+(define_cpu_unit \"present_e6500_sfx_0\" \"e6500_most\")\n+(presence_set \"present_e6500_decode_0\" \"e6500_decode_0\")\n+(presence_set \"present_e6500_sfx_0\" \"e6500_sfx_0\")\n+\n+;; Some useful abbreviations.\n+(define_reservation \"e6500_decode\"\n+    \"e6500_decode_0|e6500_decode_1+present_e6500_decode_0\")\n+(define_reservation \"e6500_sfx\"\n+   \"e6500_sfx_0|e6500_sfx_1+present_e6500_sfx_0\")\n+\n+;; SFX.\n+(define_insn_reservation \"e6500_sfx\" 1\n+  (and (eq_attr \"type\" \"integer,insert_word,insert_dword,delayed_compare,\\\n+\tshift,cntlz,exts\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_sfx\")\n+\n+(define_insn_reservation \"e6500_sfx2\" 2\n+  (and (eq_attr \"type\" \"cmp,compare,fast_compare,trap\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_sfx\")\n+\n+(define_insn_reservation \"e6500_delayed\" 2\n+  (and (eq_attr \"type\" \"var_shift_rotate,var_delayed_compare\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_sfx*2\")\n+\n+(define_insn_reservation \"e6500_two\" 2\n+  (and (eq_attr \"type\" \"two\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_decode+e6500_sfx,e6500_sfx\")\n+\n+(define_insn_reservation \"e6500_three\" 3\n+  (and (eq_attr \"type\" \"three\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,(e6500_decode+e6500_sfx)*2,e6500_sfx\")\n+\n+;; SFX - Mfcr.\n+(define_insn_reservation \"e6500_mfcr\" 4\n+  (and (eq_attr \"type\" \"mfcr\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_sfx_0*4\")\n+\n+;; SFX - Mtcrf.\n+(define_insn_reservation \"e6500_mtcrf\" 1\n+  (and (eq_attr \"type\" \"mtcr\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_sfx_0\")\n+\n+;; SFX - Mtjmpr.\n+(define_insn_reservation \"e6500_mtjmpr\" 1\n+  (and (eq_attr \"type\" \"mtjmpr,mfjmpr\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_sfx\")\n+\n+;; CFX - Multiply.\n+(define_insn_reservation \"e6500_multiply\" 4\n+  (and (eq_attr \"type\" \"imul\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_cfx_stage0,e6500_cfx_stage1\")\n+\n+(define_insn_reservation \"e6500_multiply_i\" 5\n+  (and (eq_attr \"type\" \"imul2,imul3,imul_compare\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_cfx_stage0,\\\n+   e6500_cfx_stage0+e6500_cfx_stage1,e6500_cfx_stage1\")\n+\n+;; CFX - Divide.\n+(define_insn_reservation \"e6500_divide\" 16\n+  (and (eq_attr \"type\" \"idiv\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_cfx_stage0+e6500_cfx_div,\\\n+   e6500_cfx_div*15\")\n+\n+(define_insn_reservation \"e6500_divide_d\" 26\n+  (and (eq_attr \"type\" \"ldiv\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_cfx_stage0+e6500_cfx_div,\\\n+   e6500_cfx_div*25\")\n+\n+;; LSU - Loads.\n+(define_insn_reservation \"e6500_load\" 3\n+  (and (eq_attr \"type\" \"load,load_ext,load_ext_u,load_ext_ux,load_ux,load_u,\\\n+\t\t\tload_l,sync\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_lsu\")\n+\n+(define_insn_reservation \"e6500_fpload\" 4\n+  (and (eq_attr \"type\" \"fpload,fpload_ux,fpload_u\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_lsu\")\n+\n+(define_insn_reservation \"e6500_vecload\" 4\n+  (and (eq_attr \"type\" \"vecload\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_lsu\")\n+\n+;; LSU - Stores.\n+(define_insn_reservation \"e6500_store\" 3\n+  (and (eq_attr \"type\" \"store,store_ux,store_u,store_c\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_lsu\")\n+\n+(define_insn_reservation \"e6500_fpstore\" 3\n+  (and (eq_attr \"type\" \"fpstore,fpstore_ux,fpstore_u\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_lsu\")\n+\n+(define_insn_reservation \"e6500_vecstore\" 4\n+  (and (eq_attr \"type\" \"vecstore\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_lsu\")\n+\n+;; FP.\n+(define_insn_reservation \"e6500_float\" 7\n+  (and (eq_attr \"type\" \"fpsimple,fp,fpcompare,dmul\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_fpu\")\n+\n+(define_insn_reservation \"e6500_sdiv\" 20\n+  (and (eq_attr \"type\" \"sdiv\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_fpu*20\")\n+\n+(define_insn_reservation \"e6500_ddiv\" 35\n+  (and (eq_attr \"type\" \"ddiv\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_fpu*35\")\n+\n+;; BU.\n+(define_insn_reservation \"e6500_branch\" 1\n+  (and (eq_attr \"type\" \"jmpreg,branch,isync\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_bu\")\n+\n+;; BU - CR logical.\n+(define_insn_reservation \"e6500_cr_logical\" 1\n+  (and (eq_attr \"type\" \"cr_logical,delayed_cr\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_bu\")\n+\n+;; VSFX.\n+(define_insn_reservation \"e6500_vecsimple\" 1\n+  (and (eq_attr \"type\" \"vecsimple,veccmp\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_vec\")\n+\n+;; VCFX.\n+(define_insn_reservation \"e6500_veccomplex\" 4\n+  (and (eq_attr \"type\" \"veccomplex\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_vec\")\n+\n+;; VFPU.\n+(define_insn_reservation \"e6500_vecfloat\" 6\n+  (and (eq_attr \"type\" \"vecfloat\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_vec\")\n+\n+;; VPERM.\n+(define_insn_reservation \"e6500_vecperm\" 2\n+  (and (eq_attr \"type\" \"vecperm\")\n+       (eq_attr \"cpu\" \"ppce6500\"))\n+  \"e6500_decode,e6500_vecperm\")"}, {"sha": "6f4e055a6574f815974ea37a66a7e14c7ddbda31", "filename": "gcc/config/rs6000/rs6000-cpus.def", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-cpus.def?ref=683ed19e9f9da7bec339e7cf939f928576d78f0b", "patch": "@@ -87,6 +87,10 @@ RS6000_CPU (\"e500mc\", PROCESSOR_PPCE500MC, POWERPC_BASE_MASK | MASK_PPC_GFXOPT\n \t    | MASK_ISEL)\n RS6000_CPU (\"e500mc64\", PROCESSOR_PPCE500MC64,\n \t    POWERPC_BASE_MASK | MASK_POWERPC64 | MASK_PPC_GFXOPT | MASK_ISEL)\n+RS6000_CPU (\"e5500\", PROCESSOR_PPCE5500, POWERPC_BASE_MASK | MASK_POWERPC64\n+\t    | MASK_PPC_GFXOPT | MASK_ISEL)\n+RS6000_CPU (\"e6500\", PROCESSOR_PPCE6500, POWERPC_7400_MASK | MASK_POWERPC64\n+\t    | MASK_MFCRF | MASK_ISEL)\n RS6000_CPU (\"860\", PROCESSOR_MPCCORE, POWERPC_BASE_MASK | MASK_SOFT_FLOAT)\n RS6000_CPU (\"970\", PROCESSOR_POWER4,\n \t    POWERPC_7400_MASK | MASK_PPC_GPOPT | MASK_MFCRF | MASK_POWERPC64)"}, {"sha": "604fe171f97ddf4f8baca09fb946dda6b87f0a65", "filename": "gcc/config/rs6000/rs6000-opts.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000-opts.h?ref=683ed19e9f9da7bec339e7cf939f928576d78f0b", "patch": "@@ -54,6 +54,8 @@ enum processor_type\n    PROCESSOR_PPCE300C3,\n    PROCESSOR_PPCE500MC,\n    PROCESSOR_PPCE500MC64,\n+   PROCESSOR_PPCE5500,\n+   PROCESSOR_PPCE6500,\n    PROCESSOR_POWER4,\n    PROCESSOR_POWER5,\n    PROCESSOR_POWER6,"}, {"sha": "ffb00230acd7c5936df8f72db6f4ce297ad8ce55", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 65, "deletions": 3, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=683ed19e9f9da7bec339e7cf939f928576d78f0b", "patch": "@@ -755,6 +755,44 @@ struct processor_costs ppce500mc64_cost = {\n   1,\t\t\t/* prefetch streams /*/\n };\n \n+/* Instruction costs on PPCE5500 processors.  */\n+static const\n+struct processor_costs ppce5500_cost = {\n+  COSTS_N_INSNS (5),    /* mulsi */\n+  COSTS_N_INSNS (5),    /* mulsi_const */\n+  COSTS_N_INSNS (4),    /* mulsi_const9 */\n+  COSTS_N_INSNS (5),    /* muldi */\n+  COSTS_N_INSNS (14),   /* divsi */\n+  COSTS_N_INSNS (14),   /* divdi */\n+  COSTS_N_INSNS (7),    /* fp */\n+  COSTS_N_INSNS (10),   /* dmul */\n+  COSTS_N_INSNS (36),   /* sdiv */\n+  COSTS_N_INSNS (66),   /* ddiv */\n+  64,\t\t\t/* cache line size */\n+  32,\t\t\t/* l1 cache */\n+  128,\t\t\t/* l2 cache */\n+  1,\t\t\t/* prefetch streams /*/\n+};\n+\n+/* Instruction costs on PPCE6500 processors.  */\n+static const\n+struct processor_costs ppce6500_cost = {\n+  COSTS_N_INSNS (5),    /* mulsi */\n+  COSTS_N_INSNS (5),    /* mulsi_const */\n+  COSTS_N_INSNS (4),    /* mulsi_const9 */\n+  COSTS_N_INSNS (5),    /* muldi */\n+  COSTS_N_INSNS (14),   /* divsi */\n+  COSTS_N_INSNS (14),   /* divdi */\n+  COSTS_N_INSNS (7),    /* fp */\n+  COSTS_N_INSNS (10),   /* dmul */\n+  COSTS_N_INSNS (36),   /* sdiv */\n+  COSTS_N_INSNS (66),   /* ddiv */\n+  64,\t\t\t/* cache line size */\n+  32,\t\t\t/* l1 cache */\n+  128,\t\t\t/* l2 cache */\n+  1,\t\t\t/* prefetch streams /*/\n+};\n+\n /* Instruction costs on AppliedMicro Titan processors.  */\n static const\n struct processor_costs titan_cost = {\n@@ -2520,13 +2558,19 @@ rs6000_option_override_internal (bool global_init_p)\n     error (\"target attribute or pragma changes SPE ABI\");\n \n   if (rs6000_cpu == PROCESSOR_PPCE300C2 || rs6000_cpu == PROCESSOR_PPCE300C3\n-      || rs6000_cpu == PROCESSOR_PPCE500MC || rs6000_cpu == PROCESSOR_PPCE500MC64)\n+      || rs6000_cpu == PROCESSOR_PPCE500MC || rs6000_cpu == PROCESSOR_PPCE500MC64\n+      || rs6000_cpu == PROCESSOR_PPCE5500)\n     {\n       if (TARGET_ALTIVEC)\n \terror (\"AltiVec not supported in this target\");\n       if (TARGET_SPE)\n \terror (\"SPE not supported in this target\");\n     }\n+  if (rs6000_cpu == PROCESSOR_PPCE6500)\n+    {\n+      if (TARGET_SPE)\n+\terror (\"SPE not supported in this target\");\n+    }\n \n   /* Disable Cell microcode if we are optimizing for the Cell\n      and not optimizing for size.  */\n@@ -2621,7 +2665,9 @@ rs6000_option_override_internal (bool global_init_p)\n      user's opinion, though.  */\n   if (rs6000_block_move_inline_limit == 0\n       && (rs6000_cpu == PROCESSOR_PPCE500MC\n-\t  || rs6000_cpu == PROCESSOR_PPCE500MC64))\n+\t  || rs6000_cpu == PROCESSOR_PPCE500MC64\n+\t  || rs6000_cpu == PROCESSOR_PPCE5500\n+\t  || rs6000_cpu == PROCESSOR_PPCE6500))\n     rs6000_block_move_inline_limit = 128;\n \n   /* store_one_arg depends on expand_block_move to handle at least the\n@@ -2768,6 +2814,8 @@ rs6000_option_override_internal (bool global_init_p)\n     case PROCESSOR_PPC8548:\n     case PROCESSOR_PPCE500MC:\n     case PROCESSOR_PPCE500MC64:\n+    case PROCESSOR_PPCE5500:\n+    case PROCESSOR_PPCE6500:\n \n       rs6000_single_float = TARGET_E500_SINGLE || TARGET_E500_DOUBLE;\n       rs6000_double_float = TARGET_E500_DOUBLE;\n@@ -2812,7 +2860,9 @@ rs6000_option_override_internal (bool global_init_p)\n \t\t\t\t || rs6000_cpu == PROCESSOR_POWER6\n \t\t\t\t || rs6000_cpu == PROCESSOR_POWER7\n \t\t\t\t || rs6000_cpu == PROCESSOR_PPCE500MC\n-\t\t\t\t || rs6000_cpu == PROCESSOR_PPCE500MC64);\n+\t\t\t\t || rs6000_cpu == PROCESSOR_PPCE500MC64\n+\t\t\t\t || rs6000_cpu == PROCESSOR_PPCE5500\n+\t\t\t\t || rs6000_cpu == PROCESSOR_PPCE6500);\n \n   /* Allow debug switches to override the above settings.  These are set to -1\n      in rs6000.opt to indicate the user hasn't directly set the switch.  */\n@@ -3035,6 +3085,14 @@ rs6000_option_override_internal (bool global_init_p)\n \trs6000_cost = &ppce500mc64_cost;\n \tbreak;\n \n+      case PROCESSOR_PPCE5500:\n+\trs6000_cost = &ppce5500_cost;\n+\tbreak;\n+\n+      case PROCESSOR_PPCE6500:\n+\trs6000_cost = &ppce6500_cost;\n+\tbreak;\n+\n       case PROCESSOR_TITAN:\n \trs6000_cost = &titan_cost;\n \tbreak;\n@@ -22422,6 +22480,8 @@ rs6000_adjust_cost (rtx insn, rtx link, rtx dep_insn, int cost)\n                  || rs6000_cpu_attr == CPU_PPC750\n                  || rs6000_cpu_attr == CPU_PPC7400\n                  || rs6000_cpu_attr == CPU_PPC7450\n+                 || rs6000_cpu_attr == CPU_PPCE5500\n+                 || rs6000_cpu_attr == CPU_PPCE6500\n                  || rs6000_cpu_attr == CPU_POWER4\n                  || rs6000_cpu_attr == CPU_POWER5\n \t\t || rs6000_cpu_attr == CPU_POWER7\n@@ -22997,6 +23057,8 @@ rs6000_issue_rate (void)\n   case CPU_PPCE300C3:\n   case CPU_PPCE500MC:\n   case CPU_PPCE500MC64:\n+  case CPU_PPCE5500:\n+  case CPU_PPCE6500:\n   case CPU_TITAN:\n     return 2;\n   case CPU_RIOS2:"}, {"sha": "97d551c2b295b741a0ea774f9c928a346fb59f04", "filename": "gcc/config/rs6000/rs6000.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Frs6000.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.h?ref=683ed19e9f9da7bec339e7cf939f928576d78f0b", "patch": "@@ -168,6 +168,8 @@\n %{mcpu=e300c3: -me300} \\\n %{mcpu=e500mc: -me500mc} \\\n %{mcpu=e500mc64: -me500mc64} \\\n+%{mcpu=e5500: -me5500} \\\n+%{mcpu=e6500: -me6500} \\\n %{maltivec: -maltivec} \\\n %{mvsx: -mvsx %{!maltivec: -maltivec} %{!mcpu*: %(asm_cpu_power7)}} \\\n -many\""}, {"sha": "8098b8f2ce6ef96313c23ae61324b6d0f009ca65", "filename": "gcc/config/rs6000/rs6000.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fconfig%2Frs6000%2Frs6000.md", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.md?ref=683ed19e9f9da7bec339e7cf939f928576d78f0b", "patch": "@@ -167,7 +167,7 @@\n ;; Processor type -- this attribute must exactly match the processor_type\n ;; enumeration in rs6000.h.\n \n-(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc476,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,ppc8548,ppce300c2,ppce300c3,ppce500mc,ppce500mc64,power4,power5,power6,power7,cell,ppca2,titan\"\n+(define_attr \"cpu\" \"rios1,rios2,rs64a,mpccore,ppc403,ppc405,ppc440,ppc476,ppc601,ppc603,ppc604,ppc604e,ppc620,ppc630,ppc750,ppc7400,ppc7450,ppc8540,ppc8548,ppce300c2,ppce300c3,ppce500mc,ppce500mc64,ppce5500,ppce6500,power4,power5,power6,power7,cell,ppca2,titan\"\n   (const (symbol_ref \"rs6000_cpu_attr\")))\n \n \n@@ -195,6 +195,8 @@\n (include \"e300c2c3.md\")\n (include \"e500mc.md\")\n (include \"e500mc64.md\")\n+(include \"e5500.md\")\n+(include \"e6500.md\")\n (include \"power4.md\")\n (include \"power5.md\")\n (include \"power6.md\")"}, {"sha": "6312fc003e674fa41b27fe54976965c5acd3c0ad", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=683ed19e9f9da7bec339e7cf939f928576d78f0b", "patch": "@@ -16630,11 +16630,13 @@ Supported values for @var{cpu_type} are @samp{401}, @samp{403},\n @samp{603e}, @samp{604}, @samp{604e}, @samp{620}, @samp{630}, @samp{740},\n @samp{7400}, @samp{7450}, @samp{750}, @samp{801}, @samp{821}, @samp{823},\n @samp{860}, @samp{970}, @samp{8540}, @samp{a2}, @samp{e300c2},\n-@samp{e300c3}, @samp{e500mc}, @samp{e500mc64}, @samp{ec603e}, @samp{G3},\n-@samp{G4}, @samp{G5}, @samp{titan}, @samp{power}, @samp{power2}, @samp{power3},\n-@samp{power4}, @samp{power5}, @samp{power5+}, @samp{power6}, @samp{power6x},\n-@samp{power7}, @samp{common}, @samp{powerpc}, @samp{powerpc64}, @samp{rios},\n-@samp{rios1}, @samp{rios2}, @samp{rsc}, and @samp{rs64}.\n+@samp{e300c3}, @samp{e500mc}, @samp{e500mc64}, @samp{e5500},\n+@samp{e6500}, @samp{ec603e}, @samp{G3}, @samp{G4}, @samp{G5},\n+@samp{titan}, @samp{power}, @samp{power2}, @samp{power3},\n+@samp{power4}, @samp{power5}, @samp{power5+}, @samp{power6},\n+@samp{power6x}, @samp{power7}, @samp{common}, @samp{powerpc},\n+@samp{powerpc64}, @samp{rios}, @samp{rios1}, @samp{rios2}, @samp{rsc},\n+and @samp{rs64}.\n \n @option{-mcpu=common} selects a completely generic processor.  Code\n generated under this option runs on any POWER or PowerPC processor."}, {"sha": "2594e34db7630030b4bd432fb7252bd220171a1b", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=683ed19e9f9da7bec339e7cf939f928576d78f0b", "patch": "@@ -1,3 +1,7 @@\n+2012-06-01  Edmar Wienskoski  <edmar@freescale.com>\n+\n+\t* gcc.dg/tree-ssa/vector-3.c: Adjust regular expression.\n+\n 2012-06-05  Richard Guenther  <rguenther@suse.de>\n \n \tPR tree-optimization/30442"}, {"sha": "f5e337fb49527fe2b51edc8a87196e3cc94b692a", "filename": "gcc/testsuite/gcc.dg/tree-ssa/vector-3.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/683ed19e9f9da7bec339e7cf939f928576d78f0b/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Ftree-ssa%2Fvector-3.c?ref=683ed19e9f9da7bec339e7cf939f928576d78f0b", "patch": "@@ -14,7 +14,7 @@ float f(float b)\n \n /* We should be able to optimize this to just \"return 0.0;\" */\n /* { dg-final { scan-tree-dump-times \"BIT_FIELD_REF\" 0 \"optimized\"} } */\n-/* { dg-final { scan-tree-dump-times \"0.0\" 1 \"optimized\"} } */\n+/* { dg-final { scan-tree-dump-times \"0\\\\\\.0\" 1 \"optimized\"} } */\n \n /* { dg-final { cleanup-tree-dump \"optimized\" } } */\n "}]}