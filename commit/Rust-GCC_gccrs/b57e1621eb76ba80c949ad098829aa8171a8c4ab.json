{"sha": "b57e1621eb76ba80c949ad098829aa8171a8c4ab", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YjU3ZTE2MjFlYjc2YmE4MGM5NDlhZDA5ODgyOWFhODE3MWE4YzRhYg==", "commit": {"author": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-14T16:27:49Z"}, "committer": {"name": "Iain Buclaw", "email": "ibuclaw@gdcproject.org", "date": "2020-04-18T12:07:41Z"}, "message": "testsuite: Disable gdc standard runtime tests if phobos is not built.\n\nThe current check_effective_target_d_runtime procedure returns false if\nthe target is built without any core runtime library for D being\navailable (--disable-libphobos).  This additional procedure is for\ntargets where the core runtime library exists, but without the higher\nlevel standard library.\n\ngcc/ChangeLog:\n\n\t* doc/sourcebuild.texi (Effective-Target Keywords, Environment\n\tattributes): Document d_runtime_has_std_library.\n\ngcc/testsuite/ChangeLog:\n\n\t* gdc.dg/link.d: Use d_runtime_has_std_library effective target.\n\t* gdc.dg/runnable.d: Move phobos tests to...\n\t* gdc.dg/runnable2.d: ...here.  New test.\n\t* lib/target-supports.exp\n\t(check_effective_target_d_runtime_has_std_library): New.\n\nlibphobos/ChangeLog:\n\n\t* testsuite/libphobos.phobos/phobos.exp: Skip if effective target is\n\tnot d_runtime_has_std_library.\n\t* testsuite/libphobos.phobos_shared/phobos_shared.exp: Likewise.", "tree": {"sha": "b0168c025fc021ada1d6422072fd82f748e9b037", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/b0168c025fc021ada1d6422072fd82f748e9b037"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/b57e1621eb76ba80c949ad098829aa8171a8c4ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b57e1621eb76ba80c949ad098829aa8171a8c4ab", "html_url": "https://github.com/Rust-GCC/gccrs/commit/b57e1621eb76ba80c949ad098829aa8171a8c4ab", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/b57e1621eb76ba80c949ad098829aa8171a8c4ab/comments", "author": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ibuclaw", "id": 397929, "node_id": "MDQ6VXNlcjM5NzkyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/397929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ibuclaw", "html_url": "https://github.com/ibuclaw", "followers_url": "https://api.github.com/users/ibuclaw/followers", "following_url": "https://api.github.com/users/ibuclaw/following{/other_user}", "gists_url": "https://api.github.com/users/ibuclaw/gists{/gist_id}", "starred_url": "https://api.github.com/users/ibuclaw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ibuclaw/subscriptions", "organizations_url": "https://api.github.com/users/ibuclaw/orgs", "repos_url": "https://api.github.com/users/ibuclaw/repos", "events_url": "https://api.github.com/users/ibuclaw/events{/privacy}", "received_events_url": "https://api.github.com/users/ibuclaw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f83adb68ed9cef1fbd4c16447eb4e89676df9f62", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f83adb68ed9cef1fbd4c16447eb4e89676df9f62", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f83adb68ed9cef1fbd4c16447eb4e89676df9f62"}], "stats": {"total": 522, "additions": 292, "deletions": 230}, "files": [{"sha": "aa0902274e5eb70433431a0b22f3247229b46b3e", "filename": "gcc/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=b57e1621eb76ba80c949ad098829aa8171a8c4ab", "patch": "@@ -1,3 +1,8 @@\n+2020-04-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* doc/sourcebuild.texi (Effective-Target Keywords, Environment\n+\tattributes): Document d_runtime_has_std_library.\n+\n 2020-04-17  Jeff Law  <law@redhat.com>\n \n \tPR rtl-optimization/90275"}, {"sha": "c1642bad39851cdf4188c21cad6e13722ba86f2a", "filename": "gcc/doc/sourcebuild.texi", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2Fdoc%2Fsourcebuild.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2Fdoc%2Fsourcebuild.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Fsourcebuild.texi?ref=b57e1621eb76ba80c949ad098829aa8171a8c4ab", "patch": "@@ -2207,6 +2207,9 @@ overloads for @code{strchr} etc. functions.\n @item d_runtime\n Target provides the D runtime.\n \n+@item d_runtime_has_std_library\n+Target provides the D standard library (Phobos).\n+\n @item dummy_wcsftime\n Target uses a dummy @code{wcsftime} function that always returns zero.\n "}, {"sha": "db691564bbaab82be293600fe72f9408c0f7cedc", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=b57e1621eb76ba80c949ad098829aa8171a8c4ab", "patch": "@@ -1,3 +1,11 @@\n+2020-04-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* gdc.dg/link.d: Use d_runtime_has_std_library effective target.\n+\t* gdc.dg/runnable.d: Move phobos tests to...\n+\t* gdc.dg/runnable2.d: ...here.  New test.\n+\t* lib/target-supports.exp\n+\t(check_effective_target_d_runtime_has_std_library): New.\n+\n 2020-04-18  Patrick Palka  <ppalka@redhat.com>\n \n \tPR c++/94632"}, {"sha": "5efd0ad347f6a77285fdee50f01b0151dc68cfc1", "filename": "gcc/testsuite/gdc.dg/link.d", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2Ftestsuite%2Fgdc.dg%2Flink.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2Ftestsuite%2Fgdc.dg%2Flink.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Flink.d?ref=b57e1621eb76ba80c949ad098829aa8171a8c4ab", "patch": "@@ -1,4 +1,4 @@\n-// { dg-do link { target d_runtime } }\n+// { dg-do link { target d_runtime_has_std_library } }\n \n /******************************************/\n "}, {"sha": "7307e09a645d2a1e93d21ab446dc6430324bc9dd", "filename": "gcc/testsuite/gdc.dg/runnable.d", "status": "modified", "additions": 0, "deletions": 229, "changes": 229, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable.d?ref=b57e1621eb76ba80c949ad098829aa8171a8c4ab", "patch": "@@ -9,20 +9,6 @@ import core.stdc.stdio;\n import gcc.attribute;\n \n \n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=2\n-\n-struct S\n-{\n-    string toString() { return \"foo\"; }\n-}\n-\n-void test2()\n-{\n-    import std.string : format;\n-    assert(format(\"%s\", S()) == \"foo\");\n-}\n-\n /******************************************/\n // https://bugzilla.gdcproject.org/show_bug.cgi?id=4\n \n@@ -33,35 +19,6 @@ void test4()\n     static assert(!__traits(compiles, str.sort));\n }\n \n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=15\n-\n-class B\n-{\n-    class A { }\n-    A a;\n-}\n-\n-class C\n-{\n-    void visit(B b)\n-    {\n-        import std.algorithm : map;\n-        auto as = [b.a];\n-        as.map!(d => d);\n-    }\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=16\n-\n-void test16()\n-{\n-    import std.parallelism : taskPool;\n-\n-    taskPool.reduce!\"a+b\"([0, 1, 2, 3]);\n-}\n-\n /******************************************/\n // https://bugzilla.gdcproject.org/show_bug.cgi?id=17\n \n@@ -99,59 +56,6 @@ void test17()\n   (new ModuleWriter()).save (\"test.0.mci\");\n }\n \n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=18\n-\n-class C18\n-{\n-    struct Link\n-    {\n-        int x;\n-        int y;\n-    }\n-\n-    void sort_links()\n-    {\n-        import std.algorithm : sort;\n-        import std.array : empty;\n-        import std.exception : enforce;\n-\n-        enforce(!_link.empty);\n-\n-        bool lt(Link a, Link b)\n-        {\n-            if(a.x > b.x)\n-                return false;\n-            if(a.x < b.x)\n-                return true;\n-            if(a.y >= b.y)\n-                return false;\n-            else\n-                return true;\n-        }\n-        sort!(lt)(_link);\n-    }\n-\n-    this()\n-    {\n-        _link ~= Link(8, 3);\n-        _link ~= Link(4, 7);\n-        _link ~= Link(4, 6);\n-        _link ~= Link(3, 7);\n-        _link ~= Link(2, 7);\n-        _link ~= Link(2, 2);\n-        _link ~= Link(4, 1);\n-    }\n-\n-    Link[] _link;\n-}\n-\n-void test18()\n-{\n-    C18 foo = new C18;\n-    foo.sort_links();\n-}\n-\n /******************************************/\n // https://bugzilla.gdcproject.org/show_bug.cgi?id=19\n \n@@ -177,22 +81,6 @@ void test24()\n         return;\n }\n \n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=29\n-\n-void test29()\n-{\n-    import std.string : format;\n-    import std.conv : text;\n-\n-    string s;\n-    for (auto i = 0; i < 100000; i++)\n-    {\n-        s = format(\"%d\", i);\n-        s = text(i);\n-    }\n-}\n-\n /******************************************/\n // https://bugzilla.gdcproject.org/show_bug.cgi?id=31\n \n@@ -499,54 +387,6 @@ void test51()\n     assert (s.x == 0);\n }\n \n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=52\n-\n-class C52\n-{\n-    C52 a;\n-\n-    this()\n-    {\n-        printf(\"Construct: this=%p\\n\", cast(void*)this);\n-        a = this;\n-    }\n-\n-    bool check()\n-    {\n-        printf(\"Check: this=%p a=%p\\n\", cast(void*)this, cast(void*)a);\n-        return this is a;\n-    }\n-}\n-\n-auto test52a()\n-{\n-    import std.conv, std.traits;\n-\n-    struct Scoped\n-    {\n-        void[__traits (classInstanceSize, C52) ] Scoped_store = void;\n-\n-        inout(C52) Scoped_payload() inout\n-        {\n-            void* alignedStore = cast(void*) Scoped_store.ptr;\n-            return cast(inout (C52)) alignedStore;\n-        }\n-        alias Scoped_payload this;\n-    }\n-\n-    Scoped result;\n-    emplace!(Unqual!C52)(result.Scoped_store);\n-    assert(result.Scoped_payload().check);\n-    return result;\n-}\n-\n-void test52()\n-{\n-    auto a1 = test52a();\n-    assert(a1.Scoped_payload().check);\n-}\n-\n /******************************************/\n // https://bugzilla.gdcproject.org/show_bug.cgi?id=57\n \n@@ -588,54 +428,6 @@ void test66()\n __vector(float[4]) d[2];  // ICE\n \n \n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=71\n-\n-struct Leaf\n-{\n-    ubyte symbol;\n-    ubyte codeLen;\n-}\n-\n-struct CanonicalHuffman\n-{\n-    Leaf[] table;\n-\n-    void print()\n-    {\n-        import std.algorithm;\n-        import std.range;\n-\n-        auto list = zip(iota(table.length), table.dup).array\n-            .sort!((a, b) => a[1].symbol < b[1].symbol)\n-            .uniq!((a, b) => (a[0] & (1 << a[1].codeLen) - 1) == (b[0] & (1 << b[1].codeLen) - 1));\n-    }\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=77\n-\n-void fun(ubyte[3] buf)\n-{\n-    import std.bitmanip : bigEndianToNative;\n-    bigEndianToNative!ushort(buf[0..2]);\n-}\n-\n-void test77()\n-{\n-    fun([1,2,3]);\n-}\n-\n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=108\n-\n-@attribute(\"forceinline\")\n-void test108()\n-{\n-    import std.stdio : writeln;\n-    writeln(\"Here\");\n-}\n-\n /******************************************/\n // https://bugzilla.gdcproject.org/show_bug.cgi?id=115\n \n@@ -657,21 +449,6 @@ void test115()\n \n immutable char C121 = void; // ICE\n \n-/******************************************/\n-// https://bugzilla.gdcproject.org/show_bug.cgi?id=122\n-\n-void test122()\n-{\n-    import std.algorithm : map;\n-    import std.parallelism : taskPool;\n-    import std.range : iota;\n-\n-    immutable n = 10000;\n-    enum delta = 1.0 / n;       // XBUG: was 'immutable delta' https://issues.dlang.org/show_bug.cgi?id=17092\n-    immutable pi = 4.0 * delta * taskPool.reduce!\"a + b\"(\n-        map!((int i) { immutable x = (i - 0.5) * delta; return 1.0 / (1.0 + x * x); })(iota(n)));\n-}\n-\n /******************************************/\n // https://bugzilla.gdcproject.org/show_bug.cgi?id=127\n \n@@ -1584,20 +1361,14 @@ void test309()\n \n void main()\n {\n-    test2();\n     test4();\n-    test16();\n     test17();\n-    test18();\n     test35();\n     test36();\n     test43();\n     test51();\n-    test52();\n     test57();\n     test66();\n-    test77();\n-    test108();\n     test115();\n     test131();\n     test133();"}, {"sha": "d9463e337c15d6494743b9fe6397f9963503b323", "filename": "gcc/testsuite/gdc.dg/runnable2.d", "status": "added", "additions": 244, "deletions": 0, "changes": 244, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable2.d", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable2.d", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgdc.dg%2Frunnable2.d?ref=b57e1621eb76ba80c949ad098829aa8171a8c4ab", "patch": "@@ -0,0 +1,244 @@\n+// { dg-do run { target { hw && d_runtime_has_std_library } } }\n+\n+module runnable;\n+\n+import core.stdc.stdio;\n+import gcc.attribute;\n+\n+\n+/******************************************/\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=2\n+\n+struct S\n+{\n+    string toString() { return \"foo\"; }\n+}\n+\n+void test2()\n+{\n+    import std.string : format;\n+    assert(format(\"%s\", S()) == \"foo\");\n+}\n+\n+/******************************************/\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=15\n+\n+class B\n+{\n+    class A { }\n+    A a;\n+}\n+\n+class C\n+{\n+    void visit(B b)\n+    {\n+        import std.algorithm : map;\n+        auto as = [b.a];\n+        as.map!(d => d);\n+    }\n+}\n+\n+/******************************************/\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=16\n+\n+void test16()\n+{\n+    import std.parallelism : taskPool;\n+\n+    taskPool.reduce!\"a+b\"([0, 1, 2, 3]);\n+}\n+\n+/******************************************/\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=18\n+\n+class C18\n+{\n+    struct Link\n+    {\n+        int x;\n+        int y;\n+    }\n+\n+    void sort_links()\n+    {\n+        import std.algorithm : sort;\n+        import std.array : empty;\n+        import std.exception : enforce;\n+\n+        enforce(!_link.empty);\n+\n+        bool lt(Link a, Link b)\n+        {\n+            if(a.x > b.x)\n+                return false;\n+            if(a.x < b.x)\n+                return true;\n+            if(a.y >= b.y)\n+                return false;\n+            else\n+                return true;\n+        }\n+        sort!(lt)(_link);\n+    }\n+\n+    this()\n+    {\n+        _link ~= Link(8, 3);\n+        _link ~= Link(4, 7);\n+        _link ~= Link(4, 6);\n+        _link ~= Link(3, 7);\n+        _link ~= Link(2, 7);\n+        _link ~= Link(2, 2);\n+        _link ~= Link(4, 1);\n+    }\n+\n+    Link[] _link;\n+}\n+\n+void test18()\n+{\n+    C18 foo = new C18;\n+    foo.sort_links();\n+}\n+\n+/******************************************/\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=29\n+\n+void test29()\n+{\n+    import std.string : format;\n+    import std.conv : text;\n+\n+    string s;\n+    for (auto i = 0; i < 100000; i++)\n+    {\n+        s = format(\"%d\", i);\n+        s = text(i);\n+    }\n+}\n+\n+/******************************************/\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=52\n+\n+class C52\n+{\n+    C52 a;\n+\n+    this()\n+    {\n+        printf(\"Construct: this=%p\\n\", cast(void*)this);\n+        a = this;\n+    }\n+\n+    bool check()\n+    {\n+        printf(\"Check: this=%p a=%p\\n\", cast(void*)this, cast(void*)a);\n+        return this is a;\n+    }\n+}\n+\n+auto test52a()\n+{\n+    import std.conv, std.traits;\n+\n+    struct Scoped\n+    {\n+        void[__traits (classInstanceSize, C52) ] Scoped_store = void;\n+\n+        inout(C52) Scoped_payload() inout\n+        {\n+            void* alignedStore = cast(void*) Scoped_store.ptr;\n+            return cast(inout (C52)) alignedStore;\n+        }\n+        alias Scoped_payload this;\n+    }\n+\n+    Scoped result;\n+    emplace!(Unqual!C52)(result.Scoped_store);\n+    assert(result.Scoped_payload().check);\n+    return result;\n+}\n+\n+void test52()\n+{\n+    auto a1 = test52a();\n+    assert(a1.Scoped_payload().check);\n+}\n+\n+/******************************************/\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=71\n+\n+struct Leaf\n+{\n+    ubyte symbol;\n+    ubyte codeLen;\n+}\n+\n+struct CanonicalHuffman\n+{\n+    Leaf[] table;\n+\n+    void print()\n+    {\n+        import std.algorithm;\n+        import std.range;\n+\n+        auto list = zip(iota(table.length), table.dup).array\n+            .sort!((a, b) => a[1].symbol < b[1].symbol)\n+            .uniq!((a, b) => (a[0] & (1 << a[1].codeLen) - 1) == (b[0] & (1 << b[1].codeLen) - 1));\n+    }\n+}\n+\n+/******************************************/\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=77\n+\n+void fun(ubyte[3] buf)\n+{\n+    import std.bitmanip : bigEndianToNative;\n+    bigEndianToNative!ushort(buf[0..2]);\n+}\n+\n+void test77()\n+{\n+    fun([1,2,3]);\n+}\n+\n+/******************************************/\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=108\n+\n+@attribute(\"forceinline\")\n+void test108()\n+{\n+    import std.stdio : writeln;\n+    writeln(\"Here\");\n+}\n+\n+/******************************************/\n+// https://bugzilla.gdcproject.org/show_bug.cgi?id=122\n+\n+void test122()\n+{\n+    import std.algorithm : map;\n+    import std.parallelism : taskPool;\n+    import std.range : iota;\n+\n+    immutable n = 10000;\n+    enum delta = 1.0 / n;       // XBUG: was 'immutable delta' https://issues.dlang.org/show_bug.cgi?id=17092\n+    immutable pi = 4.0 * delta * taskPool.reduce!\"a + b\"(\n+        map!((int i) { immutable x = (i - 0.5) * delta; return 1.0 / (1.0 + x * x); })(iota(n)));\n+}\n+\n+/******************************************/\n+\n+void main()\n+{\n+    test2();\n+    test16();\n+    test18();\n+    test52();\n+    test77();\n+    test108();\n+\n+    printf(\"Success!\\n\");\n+}"}, {"sha": "5704a2fc5830d5b4290f5f777c2389a3d78daea9", "filename": "gcc/testsuite/lib/target-supports.exp", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57e1621eb76ba80c949ad098829aa8171a8c4ab/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Flib%2Ftarget-supports.exp?ref=b57e1621eb76ba80c949ad098829aa8171a8c4ab", "patch": "@@ -8069,6 +8069,21 @@ proc check_effective_target_d_runtime { } {\n     }]\n }\n \n+# Return 1 if the target provides the D standard library.\n+\n+proc check_effective_target_d_runtime_has_std_library { } {\n+    return [check_no_compiler_messages d_runtime_has_std_library executable {\n+\t// D\n+\tmodule mod;\n+\n+\textern(C) int main() {\n+\t    import std.math;\n+\t    real function(real) pcos = &cos;\n+\t    return 0;\n+\t}\n+    }]\n+}\n+\n # Return 1 if  target wchar_t is at least 4 bytes.\n \n proc check_effective_target_4byte_wchar_t { } {"}, {"sha": "838544ee828e156096e163791ba0a13c6fd97230", "filename": "libphobos/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57e1621eb76ba80c949ad098829aa8171a8c4ab/libphobos%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57e1621eb76ba80c949ad098829aa8171a8c4ab/libphobos%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2FChangeLog?ref=b57e1621eb76ba80c949ad098829aa8171a8c4ab", "patch": "@@ -1,3 +1,9 @@\n+2020-04-18  Iain Buclaw  <ibuclaw@gdcproject.org>\n+\n+\t* testsuite/libphobos.phobos/phobos.exp: Skip if effective target is\n+\tnot d_runtime_has_std_library.\n+\t* testsuite/libphobos.phobos_shared/phobos_shared.exp: Likewise.\n+\n 2020-04-13  Iain Buclaw  <ibuclaw@gdcproject.org>\n \n \t* libdruntime/core/stdc/stdarg.d: Remove run-time va_list template."}, {"sha": "aad877c24c26b07a2304d9617b82420d3e31ee25", "filename": "libphobos/testsuite/libphobos.phobos/phobos.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57e1621eb76ba80c949ad098829aa8171a8c4ab/libphobos%2Ftestsuite%2Flibphobos.phobos%2Fphobos.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57e1621eb76ba80c949ad098829aa8171a8c4ab/libphobos%2Ftestsuite%2Flibphobos.phobos%2Fphobos.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flibphobos.phobos%2Fphobos.exp?ref=b57e1621eb76ba80c949ad098829aa8171a8c4ab", "patch": "@@ -19,6 +19,11 @@ if { ![isnative] || ![is-effective-target static] } {\n     return\n }\n \n+# Skip running test if phobos was not built on the target.\n+if { ![is-effective-target d_runtime_has_std_library] } {\n+    return\n+}\n+\n # Gather a list of all tests.\n set tests [lsort [filter_libphobos_unittests [find $srcdir/../src \"*.d\"]]]\n "}, {"sha": "a00ecf11ac9a5e8bfb10a0bd7d048fd8ce9df987", "filename": "libphobos/testsuite/libphobos.phobos_shared/phobos_shared.exp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/b57e1621eb76ba80c949ad098829aa8171a8c4ab/libphobos%2Ftestsuite%2Flibphobos.phobos_shared%2Fphobos_shared.exp", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/b57e1621eb76ba80c949ad098829aa8171a8c4ab/libphobos%2Ftestsuite%2Flibphobos.phobos_shared%2Fphobos_shared.exp", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libphobos%2Ftestsuite%2Flibphobos.phobos_shared%2Fphobos_shared.exp?ref=b57e1621eb76ba80c949ad098829aa8171a8c4ab", "patch": "@@ -19,6 +19,11 @@ if { ![isnative] || ![is-effective-target shared] } {\n     return\n }\n \n+# Skip running test if phobos was not built on the target.\n+if { ![is-effective-target d_runtime_has_std_library] } {\n+    return\n+}\n+\n # Gather a list of all tests.\n set tests [lsort [filter_libphobos_unittests [find $srcdir/../src \"*.d\"]]]\n "}]}