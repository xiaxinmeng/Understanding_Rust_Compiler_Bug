{"sha": "15cf7fe3556d11aa895cee0f162f6678da9daca6", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MTVjZjdmZTM1NTZkMTFhYTg5NWNlZTBmMTYyZjY2NzhkYTlkYWNhNg==", "commit": {"author": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-03-02T14:51:11Z"}, "committer": {"name": "Richard Earnshaw", "email": "rearnsha@arm.com", "date": "2021-03-03T13:53:37Z"}, "message": "arm: Ignore --with-mode when CPU only supports one instruction set.\n\nArm processors can support up to two instruction sets.  Some early\ncores only support the traditional A32 (Arm) instructions, while some\nmore recent devices only support T32 (Thumb) instructions.\n\nWhen configuring the compiler,--with-mode can be used to select the\ndefault instruction set to target if the user has not made an explicit\nchoice, but this can cause needless problems if the default is not\nsupported by the requested CPU.\n\nTo fix this this patch adjusts the way that the --with-mode selection\nis processed so that it can take into account the selected CPU or\narchitecture and not create a meaningless combination.\n\ngcc:\n\t* common/config/arm/arm-common.c: Include configargs.h.\n\t(arm_config_default): New function.\n\t(arm_target_mode): Renamed from arm_target_thumb_only.  Handle\n\tprocessors that do not support Thumb.  Take into account the\n\t--with-mode configuration setting for selecting the default.\n\t* config/arm/arm.h (OPTION_DEFAULT_SPECS): Remove entry for 'mode'.\n\t(TARGET_MODE_SPEC_FUNCTIONS): Update for function name change.", "tree": {"sha": "a594a13126ddf917e040c76f34fb805b8833b4bb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a594a13126ddf917e040c76f34fb805b8833b4bb"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/15cf7fe3556d11aa895cee0f162f6678da9daca6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15cf7fe3556d11aa895cee0f162f6678da9daca6", "html_url": "https://github.com/Rust-GCC/gccrs/commit/15cf7fe3556d11aa895cee0f162f6678da9daca6", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/15cf7fe3556d11aa895cee0f162f6678da9daca6/comments", "author": null, "committer": null, "parents": [{"sha": "74aee6d20872e8d87558eb5bf601042e3ed3fb2a", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/74aee6d20872e8d87558eb5bf601042e3ed3fb2a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/74aee6d20872e8d87558eb5bf601042e3ed3fb2a"}], "stats": {"total": 59, "additions": 49, "deletions": 10}, "files": [{"sha": "5b03b86724db7fce451c2b0f49d0ae1c35da562c", "filename": "gcc/common/config/arm/arm-common.c", "status": "modified", "additions": 43, "deletions": 6, "changes": 49, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15cf7fe3556d11aa895cee0f162f6678da9daca6/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15cf7fe3556d11aa895cee0f162f6678da9daca6/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon%2Fconfig%2Farm%2Farm-common.c?ref=15cf7fe3556d11aa895cee0f162f6678da9daca6", "patch": "@@ -33,6 +33,8 @@\n #include \"sbitmap.h\"\n #include \"diagnostic.h\"\n \n+#include \"configargs.h\"\n+\n /* Set default optimization options.  */\n static const struct default_options arm_option_optimization_table[] =\n   {\n@@ -240,16 +242,34 @@ check_isa_bits_for (const enum isa_feature* bits, enum isa_feature bit)\n   return false;\n }\n \n+/* Look up NAME in the configuration defaults for this build of the\n+   the compiler.  Return the value associated with that name, or NULL\n+   if no value is found.  */\n+static const char *\n+arm_config_default (const char *name)\n+{\n+  int i;\n+\n+  if (configure_default_options[0].name == NULL)\n+    return NULL;\n+\n+  for (i = 0; i < ARRAY_SIZE (configure_default_options); i++)\n+    if (strcmp (configure_default_options[i].name, name) == 0)\n+      return configure_default_options[i].value;\n+\n+  return NULL;\n+}\n+\n /* Called by the driver to check whether the target denoted by current\n-   command line options is a Thumb-only target.  ARGV is an array of\n-   tupples (normally only one) where the first element of the tupple\n-   is 'cpu' or 'arch' and the second is the option passed to the\n-   compiler for that.  An architecture tupple is always taken in\n-   preference to a cpu tupple and the last of each type always\n+   command line options is a Thumb-only, or ARM-only, target.  ARGV is\n+   an array of tupples (normally only one) where the first element of\n+   the tupple is 'cpu' or 'arch' and the second is the option passed\n+   to the compiler for that.  An architecture tupple is always taken\n+   in preference to a cpu tupple and the last of each type always\n    overrides any earlier setting.  */\n \n const char *\n-arm_target_thumb_only (int argc, const char **argv)\n+arm_target_mode (int argc, const char **argv)\n {\n   const char *arch = NULL;\n   const char *cpu = NULL;\n@@ -285,6 +305,9 @@ arm_target_thumb_only (int argc, const char **argv)\n       if (arch_opt && !check_isa_bits_for (arch_opt->common.isa_bits,\n \t\t\t\t\t   isa_bit_notm))\n \treturn \"-mthumb\";\n+      if (arch_opt && !check_isa_bits_for (arch_opt->common.isa_bits,\n+\t\t\t\t\t   isa_bit_thumb))\n+\treturn \"-marm\";\n     }\n   else if (cpu)\n     {\n@@ -294,6 +317,20 @@ arm_target_thumb_only (int argc, const char **argv)\n       if (cpu_opt && !check_isa_bits_for (cpu_opt->common.isa_bits,\n \t\t\t\t\t  isa_bit_notm))\n \treturn \"-mthumb\";\n+      if (cpu_opt && !check_isa_bits_for (cpu_opt->common.isa_bits,\n+\t\t\t\t\t   isa_bit_thumb))\n+\treturn \"-marm\";\n+    }\n+\n+  const char *default_mode = arm_config_default (\"mode\");\n+  if (default_mode)\n+    {\n+      if (strcmp (default_mode, \"thumb\") == 0)\n+\treturn \"-mthumb\";\n+      else if (strcmp (default_mode, \"arm\") == 0)\n+\treturn \"-marm\";\n+      else\n+\tgcc_unreachable ();\n     }\n \n   /* Compiler hasn't been configured with a default, and the CPU"}, {"sha": "113c015c4551e6cd555c14d752255013ab97a8b3", "filename": "gcc/config/arm/arm.h", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/15cf7fe3556d11aa895cee0f162f6678da9daca6/gcc%2Fconfig%2Farm%2Farm.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/15cf7fe3556d11aa895cee0f162f6678da9daca6/gcc%2Fconfig%2Farm%2Farm.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.h?ref=15cf7fe3556d11aa895cee0f162f6678da9daca6", "patch": "@@ -390,15 +390,17 @@ emission of floating point pcs attributes.  */\n    --with-float is ignored if -mfloat-abi is specified.\n    --with-fpu is ignored if -mfpu is specified.\n    --with-abi is ignored if -mabi is specified.\n-   --with-tls is ignored if -mtls-dialect is specified. */\n+   --with-tls is ignored if -mtls-dialect is specified.\n+   Note: --with-mode is not handled here, that has a special rule\n+   TARGET_MODE_CHECK that also takes into account the selected CPU and\n+   architecture.  */\n #define OPTION_DEFAULT_SPECS \\\n   {\"arch\", \"%{!march=*:%{!mcpu=*:-march=%(VALUE)}}\" }, \\\n   {\"cpu\", \"%{!march=*:%{!mcpu=*:-mcpu=%(VALUE)}}\" }, \\\n   {\"tune\", \"%{!mcpu=*:%{!mtune=*:-mtune=%(VALUE)}}\" }, \\\n   {\"float\", \"%{!mfloat-abi=*:-mfloat-abi=%(VALUE)}\" }, \\\n   {\"fpu\", \"%{!mfpu=*:-mfpu=%(VALUE)}\"}, \\\n   {\"abi\", \"%{!mabi=*:-mabi=%(VALUE)}\"}, \\\n-  {\"mode\", \"%{!marm:%{!mthumb:-m%(VALUE)}}\"}, \\\n   {\"tls\", \"%{!mtls-dialect=*:-mtls-dialect=%(VALUE)}\"},\n \n extern const struct arm_fpu_desc\n@@ -2424,9 +2426,9 @@ extern const char *arm_asm_auto_mfpu (int argc, const char **argv);\n   \"   mcpu=*:-mcpu=%:rewrite_mcpu(%{mcpu=*:%*})\"\t\t\t\\\n   \" }\"\n \n-extern const char *arm_target_thumb_only (int argc, const char **argv);\n+extern const char *arm_target_mode (int argc, const char **argv);\n #define TARGET_MODE_SPEC_FUNCTIONS\t\t\t\\\n-  { \"target_mode_check\", arm_target_thumb_only },\n+  { \"target_mode_check\", arm_target_mode },\n \n /* -mcpu=native handling only makes sense with compiler running on\n    an ARM chip.  */"}]}