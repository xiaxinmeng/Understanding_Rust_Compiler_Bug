{"sha": "2b0aa3c5b341dece22d6cb6d07741ba8677f4917", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MmIwYWEzYzViMzQxZGVjZTIyZDZjYjZkMDc3NDFiYTg2NzdmNDkxNw==", "commit": {"author": {"name": "H.J. Lu", "email": "hjl@gnu.org", "date": "1998-02-01T12:29:15Z"}, "committer": {"name": "Jeff Law", "email": "law@gcc.gnu.org", "date": "1998-02-01T12:29:15Z"}, "message": "filebuf.cc (filebuf::open): Call _IO_file_open if _G_HAVE_IO_FILE_OPEN is 1.\n\n        * filebuf.cc (filebuf::open): Call _IO_file_open if\n        _G_HAVE_IO_FILE_OPEN is 1.\n        * libio.h (_IO_fpos64_t, _IO_off64_t): Defined if\n        _G_IO_IO_FILE_VERSION == 0x20001.\n        * libioP.h (_IO_file_open): New declaration.\n        * libio.h (_IO_FILE, _IO_stdin_, _IO_stdout_, _IO_stderr_,\n        _IO_seekoff, _IO_seekpos): Add support for libio in egcs 2.1.\n        * libioP.h (_IO_seekoff_t, _IO_seekpos_t, _IO_seek_t,\n        _IO_seekoff, _IO_seekpos, _IO_default_seekoff,\n        _IO_default_seekpos, _IO_default_seek, _IO_file_seekoff,\n        _IO_file_seek, _IO_str_seekoff, _IO_pos_BAD, _IO_pos_as_off,\n        _IO_pos_0): Ditto.\n        * streambuf.h (streamoff, streampos): Ditto.\n        * gen-params (__extension__): Use only if gcc version >= 2.8.\n\nFrom-SVN: r17580", "tree": {"sha": "7f82432d8e5d72c64bd5ab979676321ca1746dc6", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/7f82432d8e5d72c64bd5ab979676321ca1746dc6"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/2b0aa3c5b341dece22d6cb6d07741ba8677f4917", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b0aa3c5b341dece22d6cb6d07741ba8677f4917", "html_url": "https://github.com/Rust-GCC/gccrs/commit/2b0aa3c5b341dece22d6cb6d07741ba8677f4917", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/2b0aa3c5b341dece22d6cb6d07741ba8677f4917/comments", "author": null, "committer": null, "parents": [{"sha": "9563abe0c2ebe9d5ec1117b272bb6de4ac9ffa09", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/9563abe0c2ebe9d5ec1117b272bb6de4ac9ffa09", "html_url": "https://github.com/Rust-GCC/gccrs/commit/9563abe0c2ebe9d5ec1117b272bb6de4ac9ffa09"}], "stats": {"total": 116, "additions": 112, "deletions": 4}, "files": [{"sha": "7fd5bebcb3fc492eacbc45d494c0c14e50cb927d", "filename": "libio/ChangeLog", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0aa3c5b341dece22d6cb6d07741ba8677f4917/libio%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0aa3c5b341dece22d6cb6d07741ba8677f4917/libio%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FChangeLog?ref=2b0aa3c5b341dece22d6cb6d07741ba8677f4917", "patch": "@@ -1,3 +1,24 @@\n+Sun Feb  1 13:29:47 1998  H.J. Lu  (hjl@gnu.org)\n+\n+\t* filebuf.cc (filebuf::open): Call _IO_file_open if\n+\t_G_HAVE_IO_FILE_OPEN is 1.\n+\n+\t* libio.h (_IO_fpos64_t, _IO_off64_t): Defined if\n+\t_G_IO_IO_FILE_VERSION == 0x20001.\n+\n+\t* libioP.h (_IO_file_open): New declaration.\n+\n+\t* libio.h (_IO_FILE, _IO_stdin_, _IO_stdout_, _IO_stderr_,\n+\t_IO_seekoff, _IO_seekpos): Add support for libio in egcs 2.1.\n+\t* libioP.h (_IO_seekoff_t, _IO_seekpos_t, _IO_seek_t,\n+\t_IO_seekoff, _IO_seekpos, _IO_default_seekoff,\n+\t_IO_default_seekpos, _IO_default_seek, _IO_file_seekoff,\n+\t_IO_file_seek, _IO_str_seekoff, _IO_pos_BAD, _IO_pos_as_off,\n+\t_IO_pos_0): Ditto.\n+\t* streambuf.h (streamoff, streampos): Ditto.\n+\n+\t* gen-params (__extension__): Use only if gcc version >= 2.8.\n+\n Sun Feb  1 13:08:18 1998  Krister Walfridsson (cato@df.lth.se)\n \n \t* dbz/dbz.c (putconf): Handle systems which use \"long long\" as type"}, {"sha": "0cc67493a48cbcfc04c8f04281e63063372bb548", "filename": "libio/filebuf.cc", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0aa3c5b341dece22d6cb6d07741ba8677f4917/libio%2Ffilebuf.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0aa3c5b341dece22d6cb6d07741ba8677f4917/libio%2Ffilebuf.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Ffilebuf.cc?ref=2b0aa3c5b341dece22d6cb6d07741ba8677f4917", "patch": "@@ -111,6 +111,10 @@ filebuf* filebuf::open(const char *filename, ios::openmode mode, int prot)\n     posix_mode |= O_CREAT;\n   if (mode & (int)ios::noreplace)\n     posix_mode |= O_EXCL;\n+#if _G_HAVE_IO_FILE_OPEN\n+  return (filebuf*)_IO_file_open (this, filename, posix_mode, prot,\n+\t\t\t\t  read_write, 0);\n+#else\n   int fd = ::open(filename, posix_mode, prot);\n   if (fd < 0)\n     return NULL;\n@@ -122,6 +126,7 @@ filebuf* filebuf::open(const char *filename, ios::openmode mode, int prot)\n   }\n   _IO_link_in(this);\n   return this;\n+#endif\n }\n \n filebuf* filebuf::open(const char *filename, const char *mode)"}, {"sha": "bd652b68da5e8f536a50499d82ddd825a7938c99", "filename": "libio/gen-params", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0aa3c5b341dece22d6cb6d07741ba8677f4917/libio%2Fgen-params", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0aa3c5b341dece22d6cb6d07741ba8677f4917/libio%2Fgen-params", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fgen-params?ref=2b0aa3c5b341dece22d6cb6d07741ba8677f4917", "patch": "@@ -382,8 +382,10 @@ typedef          int  ${macro_prefix}int32_t __attribute__((__mode__(__SI__)));\n typedef unsigned int ${macro_prefix}uint32_t __attribute__((__mode__(__SI__)));\n typedef          int  ${macro_prefix}int64_t __attribute__((__mode__(__DI__)));\n typedef unsigned int ${macro_prefix}uint64_t __attribute__((__mode__(__DI__)));\n+#if __GNUC__ > 2 || __GNUC_MINOR__ >= 8\n __extension__ typedef long long ${macro_prefix}llong;\n __extension__ typedef unsigned long long ${macro_prefix}ullong;\n+#endif\n #else\n typedef  $int16_t  ${macro_prefix}int16_t;\n typedef $uint16_t ${macro_prefix}uint16_t;"}, {"sha": "6e3edcc30416c331e78e36be83b0c94052dacf94", "filename": "libio/libio.h", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0aa3c5b341dece22d6cb6d07741ba8677f4917/libio%2Flibio.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0aa3c5b341dece22d6cb6d07741ba8677f4917/libio%2Flibio.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Flibio.h?ref=2b0aa3c5b341dece22d6cb6d07741ba8677f4917", "patch": "@@ -39,6 +39,10 @@\n #define _IO_HAVE_ST_BLKSIZE _G_HAVE_ST_BLKSIZE\n #define _IO_BUFSIZ _G_BUFSIZ\n #define _IO_va_list _G_va_list\n+#if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+#define _IO_fpos64_t _G_fpos64_t\n+#define _IO_off64_t _G_off64_t\n+#endif\n \n #ifdef _G_NEED_STDARG_H\n /* This define avoids name pollution if we're using GNU stdarg.h */\n@@ -220,7 +224,11 @@ struct _IO_FILE {\n \n   int _fileno;\n   int _blksize;\n+#ifdef _G_IO_IO_FILE_VERSION\n+  _IO_off_t _old_offset;\n+#else\n   _IO_off_t _offset;\n+#endif\n \n #define __HAVE_COLUMN /* temporary */\n   /* 1+column number of pbase(); 0 is unknown. */\n@@ -233,12 +241,22 @@ struct _IO_FILE {\n #ifdef _IO_LOCK_T\n   _IO_LOCK_T _lock;\n #endif\n+#if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+  _IO_off64_t _offset;\n+  int _unused2[16];\t/* Make sure we don't get into trouble again.  */\n+#endif\n };\n \n #ifndef __cplusplus\n typedef struct _IO_FILE _IO_FILE;\n #endif\n \n+#if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+#define _IO_stdin_ _IO_2_1_stdin_\n+#define _IO_stdout_ _IO_2_1_stdout_\n+#define _IO_stderr_ _IO_2_1_stderr_\n+#endif\n+\n struct _IO_FILE_plus;\n extern struct _IO_FILE_plus _IO_stdin_, _IO_stdout_, _IO_stderr_;\n #define _IO_stdin ((_IO_FILE*)(&_IO_stdin_))\n@@ -321,8 +339,13 @@ extern int _IO_vfprintf __P ((_IO_FILE *, const char *, _IO_va_list));\n extern _IO_ssize_t _IO_padn __P ((_IO_FILE *, int, _IO_ssize_t));\n extern _IO_size_t _IO_sgetn __P ((_IO_FILE *, void *, _IO_size_t));\n \n+#if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+extern _IO_fpos64_t _IO_seekoff __P ((_IO_FILE *, _IO_off64_t, int, int));      \n+extern _IO_fpos64_t _IO_seekpos __P ((_IO_FILE *, _IO_fpos64_t, int));\n+#else\n extern _IO_fpos_t _IO_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n extern _IO_fpos_t _IO_seekpos __P ((_IO_FILE *, _IO_fpos_t, int));\n+#endif\n \n extern void _IO_free_backup_area __P ((_IO_FILE *));\n "}, {"sha": "7a5ca9044e8eef1c13ba25c034068f0bb0417464", "filename": "libio/libioP.h", "status": "modified", "additions": 56, "deletions": 4, "changes": 60, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0aa3c5b341dece22d6cb6d07741ba8677f4917/libio%2FlibioP.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0aa3c5b341dece22d6cb6d07741ba8677f4917/libio%2FlibioP.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2FlibioP.h?ref=2b0aa3c5b341dece22d6cb6d07741ba8677f4917", "patch": "@@ -138,16 +138,25 @@ typedef _IO_size_t (*_IO_xsgetn_t) __P ((_IO_FILE *FP, void *DATA,\n    (MODE==1), or the end of the file (MODE==2).\n    It matches the streambuf::seekoff virtual function.\n    It is also used for the ANSI fseek function. */\n+#if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+typedef _IO_fpos64_t (*_IO_seekoff_t) __P ((_IO_FILE *FP, _IO_off64_t OFF,\n+\t\t\t\t\t  int DIR, int MODE));\n+#else\n typedef _IO_fpos_t (*_IO_seekoff_t) __P ((_IO_FILE *FP, _IO_off_t OFF,\n \t\t\t\t\t  int DIR, int MODE));\n+#endif\n #define _IO_SEEKOFF(FP, OFF, DIR, MODE) JUMP3 (__seekoff, FP, OFF, DIR, MODE)\n \n /* The 'seekpos' hook also moves the stream position,\n    but to an absolute position given by a fpos_t (seekpos).\n    It matches the streambuf::seekpos virtual function.\n    It is also used for the ANSI fgetpos and fsetpos functions.  */\n /* The _IO_seek_cur and _IO_seek_end options are not allowed. */\n+#if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+typedef _IO_fpos64_t (*_IO_seekpos_t) __P ((_IO_FILE *, _IO_fpos64_t, int));\n+#else\n typedef _IO_fpos_t (*_IO_seekpos_t) __P ((_IO_FILE *, _IO_fpos_t, int));\n+#endif\n #define _IO_SEEKPOS(FP, POS, FLAGS) JUMP2 (__seekpos, FP, POS, FLAGS)\n \n /* The 'setbuf' hook gives a buffer to the file.\n@@ -196,7 +205,11 @@ typedef _IO_ssize_t (*_IO_write_t) __P ((_IO_FILE *,const void *,_IO_ssize_t));\n    It generalizes the Unix lseek(2) function.\n    It matches the streambuf::sys_seek virtual function, which is\n    specific to this implementation. */\n+#if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+typedef _IO_fpos64_t (*_IO_seek_t) __P ((_IO_FILE *, _IO_off64_t, int));\n+#else\n typedef _IO_fpos_t (*_IO_seek_t) __P ((_IO_FILE *, _IO_off_t, int));\n+#endif\n #define _IO_SYSSEEK(FP, OFFSET, MODE) JUMP2 (__seek, FP, OFFSET, MODE)\n \n /* The 'sysclose' hook is used to finalize (close, finish up) an\n@@ -260,8 +273,13 @@ struct _IO_FILE_plus\n \n /* Generic functions */\n \n+#if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+extern _IO_fpos64_t _IO_seekoff __P ((_IO_FILE *, _IO_off64_t, int, int));\n+extern _IO_fpos64_t _IO_seekpos __P ((_IO_FILE *, _IO_fpos64_t, int));\n+#else\n extern _IO_fpos_t _IO_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n extern _IO_fpos_t _IO_seekpos __P ((_IO_FILE *, _IO_fpos_t, int));\n+#endif\n \n extern void _IO_switch_to_main_get_area __P ((_IO_FILE *));\n extern void _IO_switch_to_backup_area __P ((_IO_FILE *));\n@@ -297,13 +315,24 @@ extern _IO_FILE* _IO_default_setbuf __P ((_IO_FILE *, char *, _IO_ssize_t));\n extern _IO_size_t _IO_default_xsputn __P ((_IO_FILE *, const void *,\n \t\t\t\t\t   _IO_size_t));\n extern _IO_size_t _IO_default_xsgetn __P ((_IO_FILE *, void *, _IO_size_t));\n+#if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+extern _IO_fpos64_t _IO_default_seekoff __P ((_IO_FILE *,\n+\t\t\t\t\t      _IO_off64_t, int, int));\n+extern _IO_fpos64_t _IO_default_seekpos __P ((_IO_FILE *,\n+\t\t\t\t\t      _IO_fpos64_t, int));\n+#else\n extern _IO_fpos_t _IO_default_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n extern _IO_fpos_t _IO_default_seekpos __P ((_IO_FILE *, _IO_fpos_t, int));\n+#endif\n extern _IO_ssize_t _IO_default_write __P ((_IO_FILE *, const void *,\n \t\t\t\t\t   _IO_ssize_t));\n extern _IO_ssize_t _IO_default_read __P ((_IO_FILE *, void *, _IO_ssize_t));\n extern int _IO_default_stat __P ((_IO_FILE *, void *));\n+#if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+extern _IO_fpos64_t _IO_default_seek __P ((_IO_FILE *, _IO_off64_t, int));\n+#else\n extern _IO_fpos_t _IO_default_seek __P ((_IO_FILE *, _IO_off_t, int));\n+#endif\n extern int _IO_default_sync __P ((_IO_FILE *));\n #define _IO_default_close ((_IO_close_t) _IO_default_sync)\n \n@@ -335,7 +364,13 @@ extern void _IO_flush_all_linebuffered __P ((void));\n \n extern int _IO_file_doallocate __P ((_IO_FILE *));\n extern _IO_FILE* _IO_file_setbuf __P ((_IO_FILE *, char *, _IO_ssize_t));\n+#if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+extern _IO_fpos64_t _IO_file_seekoff __P ((_IO_FILE *, _IO_off64_t, int, int));\n+extern _IO_fpos64_t _IO_file_seek __P ((_IO_FILE *, _IO_off64_t, int));\n+#else\n extern _IO_fpos_t _IO_file_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n+extern _IO_fpos_t _IO_file_seek __P ((_IO_FILE *, _IO_off_t, int));\n+#endif\n extern _IO_size_t _IO_file_xsputn __P ((_IO_FILE *, const void *, _IO_size_t));\n extern int _IO_file_stat __P ((_IO_FILE *, void *));\n extern int _IO_file_close __P ((_IO_FILE *));\n@@ -344,13 +379,14 @@ extern int _IO_file_overflow __P ((_IO_FILE *, int));\n #define _IO_file_is_open(__fp) ((__fp)->_fileno >= 0)\n extern void _IO_file_init __P ((_IO_FILE *));\n extern _IO_FILE* _IO_file_attach __P ((_IO_FILE *, int));\n+extern _IO_FILE* _IO_file_open __P ((_IO_FILE *, const char *, int, int,\n+\t\t\t\t     int, int));\n extern _IO_FILE* _IO_file_fopen __P ((_IO_FILE *, const char *, const char *));\n extern _IO_ssize_t _IO_file_write __P ((_IO_FILE *, const void *,\n \t\t\t\t\t_IO_ssize_t));\n extern _IO_ssize_t _IO_file_read __P ((_IO_FILE *, void *, _IO_ssize_t));\n extern int _IO_file_sync __P ((_IO_FILE *));\n extern int _IO_file_close_it __P ((_IO_FILE *));\n-extern _IO_fpos_t _IO_file_seek __P ((_IO_FILE *, _IO_off_t, int));\n extern void _IO_file_finish __P ((_IO_FILE *, int));\n \n /* Jumptable functions for proc_files. */\n@@ -361,7 +397,11 @@ extern int _IO_proc_close __P ((_IO_FILE *));\n extern int _IO_str_underflow __P ((_IO_FILE *));\n extern int _IO_str_overflow __P ((_IO_FILE *, int));\n extern int _IO_str_pbackfail __P ((_IO_FILE *, int));\n+#if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+extern _IO_fpos64_t _IO_str_seekoff __P ((_IO_FILE *, _IO_off64_t, int, int));\n+#else\n extern _IO_fpos_t _IO_str_seekoff __P ((_IO_FILE *, _IO_off_t, int, int));\n+#endif\n extern void _IO_str_finish __P ((_IO_FILE *, int));\n \n /* Other strfile functions */\n@@ -475,19 +515,31 @@ extern int _IO_vscanf __P ((const char *, _IO_va_list));\n \n /* _IO_pos_BAD is an _IO_fpos_t value indicating error, unknown, or EOF. */\n #ifndef _IO_pos_BAD\n-# define _IO_pos_BAD ((_IO_fpos_t) -1)\n+# if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+#  define _IO_pos_BAD ((_IO_fpos64_t) -1)\n+# else\n+#  define _IO_pos_BAD ((_IO_fpos_t) -1)\n+# endif\n #endif\n /* _IO_pos_as_off converts an _IO_fpos_t value to an _IO_off_t value. */\n #ifndef _IO_pos_as_off\n-# define _IO_pos_as_off(__pos) ((_IO_off_t) (__pos))\n+# if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+#  define _IO_pos_as_off(__pos) ((_IO_off64_t) (__pos))\n+# else\n+#  define _IO_pos_as_off(__pos) ((_IO_off_t) (__pos))\n+# endif\n #endif\n /* _IO_pos_adjust adjust an _IO_fpos_t by some number of bytes. */\n #ifndef _IO_pos_adjust\n # define _IO_pos_adjust(__pos, __delta) ((__pos) += (__delta))\n #endif\n /* _IO_pos_0 is an _IO_fpos_t value indicating beginning of file. */\n #ifndef _IO_pos_0\n-# define _IO_pos_0 ((_IO_fpos_t) 0)\n+# if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+#  define _IO_pos_0 ((_IO_fpos64_t) 0)\n+# else\n+#  define _IO_pos_0 ((_IO_fpos_t) 0)\n+# endif\n #endif\n \n #ifdef __cplusplus"}, {"sha": "9ef47243be64bffeeb1646b5f8bf6f95f4612c07", "filename": "libio/streambuf.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/2b0aa3c5b341dece22d6cb6d07741ba8677f4917/libio%2Fstreambuf.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/2b0aa3c5b341dece22d6cb6d07741ba8677f4917/libio%2Fstreambuf.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libio%2Fstreambuf.h?ref=2b0aa3c5b341dece22d6cb6d07741ba8677f4917", "patch": "@@ -66,8 +66,13 @@ class ostream; class streambuf;\n #undef open\n #undef close\n \n+#if defined(_G_IO_IO_FILE_VERSION) && _G_IO_IO_FILE_VERSION == 0x20001\n+typedef _IO_off64_t streamoff;\n+typedef _IO_fpos64_t streampos;\n+#else\n typedef _IO_off_t streamoff;\n typedef _IO_fpos_t streampos;\n+#endif\n typedef _IO_ssize_t streamsize;\n \n typedef unsigned long __fmtflags;"}]}