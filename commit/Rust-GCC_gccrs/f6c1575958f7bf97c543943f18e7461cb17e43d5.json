{"sha": "f6c1575958f7bf97c543943f18e7461cb17e43d5", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZjZjMTU3NTk1OGY3YmY5N2M1NDM5NDNmMThlNzQ2MWNiMTdlNDNkNQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-10-26T17:02:48Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2015-10-26T17:02:48Z"}, "message": "match.pd (fold_widened_comparison): Apply simplifications to all integral types.\n\n\t* match.pd (fold_widened_comparison): Apply simplifications to all\n\tintegral types.\n\nFrom-SVN: r229384", "tree": {"sha": "668aeb9f2a1030de3b15dcc446ab7c5adfdd5069", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/668aeb9f2a1030de3b15dcc446ab7c5adfdd5069"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/f6c1575958f7bf97c543943f18e7461cb17e43d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c1575958f7bf97c543943f18e7461cb17e43d5", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f6c1575958f7bf97c543943f18e7461cb17e43d5", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f6c1575958f7bf97c543943f18e7461cb17e43d5/comments", "author": null, "committer": null, "parents": [{"sha": "f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9", "html_url": "https://github.com/Rust-GCC/gccrs/commit/f52a73a48ee7123e3db494c6b0ac72d0d4359ad9"}], "stats": {"total": 73, "additions": 53, "deletions": 20}, "files": [{"sha": "f90887f84b37585bbb8d5b9a3a77ad44a3ffa4c8", "filename": "gcc/ChangeLog", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=f6c1575958f7bf97c543943f18e7461cb17e43d5", "patch": "@@ -1,4 +1,9 @@\n-2015-10-26  Simon Dardis <simon.dardis@imgtec.com>\n+2015-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* match.pd (fold_widened_comparison): Apply simplifications to all\n+\tintegral types.\n+\n+2015-10-26  Simon Dardis  <simon.dardis@imgtec.com>\n \n \t* target.def (TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P): New hook.\n \t* doc/tm.texi.in (TARGET_NO_SPECULATION_IN_DELAY_SLOTS_P): Document.\n@@ -9,9 +14,8 @@\n 2015-10-26  Jeff Law  <law@redhat.com>\n \n \tPR tree-optimization/68013\n-\t* tree-ssa-threadbackward.c\n-\t(fsm_find_control_statement_thread_paths): Make sure the first block\n-\tin the path is in VISITED_BBs.\n+\t* tree-ssa-threadbackward.c (fsm_find_control_statement_thread_paths):\n+\tMake sure the first block in the path is in VISITED_BBs.\n \n 2015-10-26  Richard Biener  <rguenther@suse.de>\n \tDominik Vogt  <vogt@linux.vnet.ibm.com>"}, {"sha": "6535b597e957c22b86bfd205f9f58a1cd07a6125", "filename": "gcc/match.pd", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2Fmatch.pd", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2Fmatch.pd", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fmatch.pd?ref=f6c1575958f7bf97c543943f18e7461cb17e43d5", "patch": "@@ -2099,12 +2099,11 @@ DEFINE_INT_AND_FLOAT_ROUND_FN (RINT)\n \t\t  && (TYPE_UNSIGNED (TREE_TYPE (@00))\n \t\t      == TYPE_UNSIGNED (TREE_TYPE (@10))))\n \t      || (TREE_CODE (@10) == INTEGER_CST\n-\t\t  && (TREE_CODE (TREE_TYPE (@00)) == INTEGER_TYPE\n-\t\t      || TREE_CODE (TREE_TYPE (@00)) == BOOLEAN_TYPE)\n+\t\t  && INTEGRAL_TYPE_P (TREE_TYPE (@00))\n \t\t  && int_fits_type_p (@10, TREE_TYPE (@00)))))\n       (cmp @00 (convert @10))\n       (if (TREE_CODE (@10) == INTEGER_CST\n-\t   && TREE_CODE (TREE_TYPE (@00)) == INTEGER_TYPE\n+\t   && INTEGRAL_TYPE_P (TREE_TYPE (@00))\n \t   && !int_fits_type_p (@10, TREE_TYPE (@00)))\n        (with\n \t{"}, {"sha": "db008b260a3ea9030fc409289f0847f563d709ef", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=f6c1575958f7bf97c543943f18e7461cb17e43d5", "patch": "@@ -1,3 +1,10 @@\n+2015-10-26  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc.dg/atomic-noinline.c: Change test on __atomic_is_lock_free.\n+\t* gcc.dg/atomic-noinline-aux.c: Adjust accordingly.\n+\t* gnat.dg/opt51.adb: New test.\n+\t* gnat.dg/opt51_pkg.ads: New helper.\n+\n 2015-10-26  Simon Dardis  <simon.dardis@imgtec.com>\n \n \t* gcc.target/mips/ds-schedule-1.c: New."}, {"sha": "97989798fe5beaa388a049ab3ca2ffae9af39e43", "filename": "gcc/testsuite/gcc.dg/atomic-noinline-aux.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline-aux.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline-aux.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline-aux.c?ref=f6c1575958f7bf97c543943f18e7461cb17e43d5", "patch": "@@ -64,7 +64,8 @@ __atomic_fetch_nand_1 (unsigned char *p, unsigned char v, int i)\n   return ret;\n }\n \n-int __atomic_is_lock_free (int i, void *p)\n+bool __atomic_is_lock_free (int i, void *p)\n {\n-  return 10;\n+  *(short *)p = 1;\n+  return true;\n }"}, {"sha": "99912cc87e7963be3f6818738d7d130f7997b975", "filename": "gcc/testsuite/gcc.dg/atomic-noinline.c", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2Fatomic-noinline.c?ref=f6c1575958f7bf97c543943f18e7461cb17e43d5", "patch": "@@ -11,13 +11,13 @@\n #include <stdlib.h>\n #include <stdbool.h>\n \n-extern void abort();\n+extern void abort (void);\n \n-short as,bs,cs;\n+short as,bs,cs,ds;\n char ac,bc,cc;\n \n int\n-main ()\n+main (void)\n {\n \n   ac = __atomic_exchange_n (&bc, cc, __ATOMIC_RELAXED);\n@@ -42,23 +42,20 @@ main ()\n \n   /* This should be translated to __atomic_fetch_add for the library */\n   as = __atomic_add_fetch (&cs, 10, __ATOMIC_RELAXED);\n-\n   if (cs != 1)\n     abort ();\n \n-  /* The fake external function should return 10.  */\n-  if (__atomic_is_lock_free (4, 0) != 10)\n-    abort ();\n-   \n   /* PR 51040 was caused by arithmetic code not patching up nand_fetch properly\n      when used an an external function.  Look for proper return value here.  */\n   ac = 0x3C;\n   bc = __atomic_nand_fetch (&ac, 0x0f, __ATOMIC_RELAXED);\n   if (bc != ac)\n     abort ();\n \n+  if (!__atomic_is_lock_free (2, &ds))\n+    abort ();\n+  if (ds != 1)\n+    abort ();\n+\n   return 0;\n }\n-\n-\n-"}, {"sha": "0d2c82007bf140606cac81dfff2146c49f32ac90", "filename": "gcc/testsuite/gnat.dg/opt51.adb", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2Ftestsuite%2Fgnat.dg%2Fopt51.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2Ftestsuite%2Fgnat.dg%2Fopt51.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt51.adb?ref=f6c1575958f7bf97c543943f18e7461cb17e43d5", "patch": "@@ -0,0 +1,20 @@\n+-- { dg-do compile }\n+-- { dg-options \"-O2 -fdump-tree-optimized\" }\n+\n+with Opt51_Pkg; use Opt51_Pkg;\n+\n+procedure Opt51 (E: Enum; F : out Float) is\n+begin\n+  case (E) is\n+    when One =>\n+      F := 1.0;\n+    when Two =>\n+      F := 2.0;\n+    when Three =>\n+      F := 3.0;\n+    when others =>\n+      raise Program_Error;\n+  end case;\n+end;\n+\n+-- { dg-final { scan-tree-dump-not \"check_PE_Explicit_Raise\" \"optimized\" } }"}, {"sha": "8ce1817653ad855aa4a59d8d86e31b3562bdb1c0", "filename": "gcc/testsuite/gnat.dg/opt51_pkg.ads", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2Ftestsuite%2Fgnat.dg%2Fopt51_pkg.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/f6c1575958f7bf97c543943f18e7461cb17e43d5/gcc%2Ftestsuite%2Fgnat.dg%2Fopt51_pkg.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgnat.dg%2Fopt51_pkg.ads?ref=f6c1575958f7bf97c543943f18e7461cb17e43d5", "patch": "@@ -0,0 +1,5 @@\n+package Opt51_Pkg is\n+\n+  type Enum is (One, Two, Three);\n+\n+end Opt51_Pkg;"}]}