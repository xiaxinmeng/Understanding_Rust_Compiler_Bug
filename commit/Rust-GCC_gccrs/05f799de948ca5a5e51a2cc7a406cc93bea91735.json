{"sha": "05f799de948ca5a5e51a2cc7a406cc93bea91735", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDVmNzk5ZGU5NDhjYTVhNWU1MWEyY2M3YTQwNmNjOTNiZWE5MTczNQ==", "commit": {"author": {"name": "Bob Duff", "email": "duff@adacore.com", "date": "2020-03-23T16:40:45Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2020-06-12T08:29:19Z"}, "message": "[Ada] Put_Image: preload type Sink, change what types have it enabled\n\n2020-06-12  Bob Duff  <duff@adacore.com>\n\ngcc/ada/\n\n\t* exp_put_image.ads, exp_put_image.adb (Preload_Sink): Procedure\n\tfor preloading type Sink.  This has the side effect of loading\n\tvarious dependents, including Ada.Strings.UTF_Encoding.\n\t(Enable_Put_Image): Disable Put_Image in pre-2020 versions of\n\tAda.  This limitation can probably be lifted later.  Enable for\n\ttagged types except in predefined units.  Disable for CPP types;\n\tPut_Image is legal, just prints the type name.\n\t* sem_attr.adb (Check_Put_Image_Attribute): Don't complain about\n\tPut_Image of CPP types; instead call the \"unknown\" version of\n\tPut_Image.\n\t* sem_ch10.adb (Analyze_Compilation_Unit): Call Preload_Sink.", "tree": {"sha": "a71bddb19cac1d4f2ffb4fe56f37f2aab717c8db", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/a71bddb19cac1d4f2ffb4fe56f37f2aab717c8db"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/05f799de948ca5a5e51a2cc7a406cc93bea91735", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f799de948ca5a5e51a2cc7a406cc93bea91735", "html_url": "https://github.com/Rust-GCC/gccrs/commit/05f799de948ca5a5e51a2cc7a406cc93bea91735", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/05f799de948ca5a5e51a2cc7a406cc93bea91735/comments", "author": {"login": "bobduff", "id": 29099567, "node_id": "MDQ6VXNlcjI5MDk5NTY3", "avatar_url": "https://avatars.githubusercontent.com/u/29099567?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bobduff", "html_url": "https://github.com/bobduff", "followers_url": "https://api.github.com/users/bobduff/followers", "following_url": "https://api.github.com/users/bobduff/following{/other_user}", "gists_url": "https://api.github.com/users/bobduff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bobduff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bobduff/subscriptions", "organizations_url": "https://api.github.com/users/bobduff/orgs", "repos_url": "https://api.github.com/users/bobduff/repos", "events_url": "https://api.github.com/users/bobduff/events{/privacy}", "received_events_url": "https://api.github.com/users/bobduff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "052d6488478db2b3c55d165aac653dc63582e38b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/052d6488478db2b3c55d165aac653dc63582e38b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/052d6488478db2b3c55d165aac653dc63582e38b"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "286640d2552c6aca1eb480d6de2fd502614d3831", "filename": "gcc/ada/exp_put_image.adb", "status": "modified", "additions": 35, "deletions": 3, "changes": 38, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f799de948ca5a5e51a2cc7a406cc93bea91735/gcc%2Fada%2Fexp_put_image.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f799de948ca5a5e51a2cc7a406cc93bea91735/gcc%2Fada%2Fexp_put_image.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.adb?ref=05f799de948ca5a5e51a2cc7a406cc93bea91735", "patch": "@@ -31,6 +31,7 @@ with Lib;      use Lib;\n with Namet;    use Namet;\n with Nlists;   use Nlists;\n with Nmake;    use Nmake;\n+with Opt;      use Opt;\n with Rtsfind;  use Rtsfind;\n with Sem_Aux;  use Sem_Aux;\n with Sem_Util; use Sem_Util;\n@@ -815,6 +816,12 @@ package body Exp_Put_Image is\n \n    function Enable_Put_Image (Typ : Entity_Id) return Boolean is\n    begin\n+      --  Disable in pre-2020 versions for now???\n+\n+      if Ada_Version < Ada_2020 then\n+         return False;\n+      end if;\n+\n       --  There's a bit of a chicken&egg problem. The compiler is likely to\n       --  have trouble if we refer to the Put_Image of Sink itself, because\n       --  Sink is part of the parameter profile:\n@@ -841,7 +848,7 @@ package body Exp_Put_Image is\n       --  Put_Image doesn't work for private types whose full type is real.\n \n       if Is_Remote_Types (Scope (Typ))\n-        or else Is_Tagged_Type (Typ)\n+        or else (Is_Tagged_Type (Typ) and then In_Predefined_Unit (Typ))\n         or else Is_Real_Type (Typ)\n       then\n          return False;\n@@ -864,6 +871,16 @@ package body Exp_Put_Image is\n          end if;\n       end;\n \n+      --  Disable for CPP types, because the components are unavailable on the\n+      --  Ada side.\n+\n+      if Is_Tagged_Type (Typ)\n+        and then Convention (Typ) = Convention_CPP\n+        and then Is_CPP_Class (Root_Type (Typ))\n+      then\n+         return False;\n+      end if;\n+\n       return Is_Scalar_Type (Typ) or else not In_Predefined_Unit (Typ);\n    end Enable_Put_Image;\n \n@@ -890,9 +907,24 @@ package body Exp_Put_Image is\n       return Make_Defining_Identifier (Loc, Sname);\n    end Make_Put_Image_Name;\n \n-   ----------------------\n+   ------------------\n+   -- Preload_Sink --\n+   ------------------\n+\n+   procedure Preload_Sink is\n+   begin\n+      if RTE_Available (RE_Sink) then\n+         declare\n+            Ignore : constant Entity_Id := RTE (RE_Sink);\n+         begin\n+            null;\n+         end;\n+      end if;\n+   end Preload_Sink;\n+\n+   -------------------------\n    -- Put_Image_Base_Type --\n-   ----------------------\n+   -------------------------\n \n    function Put_Image_Base_Type (E : Entity_Id) return Entity_Id is\n    begin"}, {"sha": "6b5f6b05dd18e0e467f9edb236bafd4c965e7032", "filename": "gcc/ada/exp_put_image.ads", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f799de948ca5a5e51a2cc7a406cc93bea91735/gcc%2Fada%2Fexp_put_image.ads", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f799de948ca5a5e51a2cc7a406cc93bea91735/gcc%2Fada%2Fexp_put_image.ads", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fexp_put_image.ads?ref=05f799de948ca5a5e51a2cc7a406cc93bea91735", "patch": "@@ -85,4 +85,10 @@ package Exp_Put_Image is\n    function Build_Unknown_Put_Image_Call (N : Node_Id) return Node_Id;\n    --  Build a call to Put_Image_Unknown\n \n+   procedure Preload_Sink;\n+   --  Call RTE (RE_Sink), to load the packages involved in Put_Image. We\n+   --  need to do this explicitly, fairly early during compilation, because\n+   --  otherwise it happens during freezing, which triggers visibility bugs\n+   --  in generic instantiations.\n+\n end Exp_Put_Image;"}, {"sha": "ce57b308025380a35b172d00c7ce92f6207c7feb", "filename": "gcc/ada/sem_attr.adb", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f799de948ca5a5e51a2cc7a406cc93bea91735/gcc%2Fada%2Fsem_attr.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f799de948ca5a5e51a2cc7a406cc93bea91735/gcc%2Fada%2Fsem_attr.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_attr.adb?ref=05f799de948ca5a5e51a2cc7a406cc93bea91735", "patch": "@@ -2359,7 +2359,6 @@ package body Sem_Attr is\n \n          Analyze (E2);\n          Resolve (E2, P_Type);\n-         Check_Not_CPP_Type;\n       end Check_Put_Image_Attribute;\n \n       ----------------------------"}, {"sha": "a4de98bade558fb668832026393755486c87ffc6", "filename": "gcc/ada/sem_ch10.adb", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/05f799de948ca5a5e51a2cc7a406cc93bea91735/gcc%2Fada%2Fsem_ch10.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/05f799de948ca5a5e51a2cc7a406cc93bea91735/gcc%2Fada%2Fsem_ch10.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_ch10.adb?ref=05f799de948ca5a5e51a2cc7a406cc93bea91735", "patch": "@@ -29,6 +29,7 @@ with Contracts; use Contracts;\n with Debug;     use Debug;\n with Einfo;     use Einfo;\n with Errout;    use Errout;\n+with Exp_Put_Image;\n with Exp_Util;  use Exp_Util;\n with Elists;    use Elists;\n with Fname;     use Fname;\n@@ -621,6 +622,17 @@ package body Sem_Ch10 is\n    --  Start of processing for Analyze_Compilation_Unit\n \n    begin\n+      --  We can't call Preload_Sink for at least some predefined units,\n+      --  because it would introduce cyclic dependences. The package where Sink\n+      --  is declared, for example, and things it depends on. See Exp_Put_Image\n+      --  for documentation. We don't call Preload_Sink in pre-2020 Ada\n+      --  versions, because the default Put_Image is disabled in those\n+      --  versions, at least for now.\n+\n+      if Ada_Version >= Ada_2020 and then not In_Predefined_Unit (N) then\n+         Exp_Put_Image.Preload_Sink;\n+      end if;\n+\n       Process_Compilation_Unit_Pragmas (N);\n \n       --  If the unit is a subunit whose parent has not been analyzed (which"}]}