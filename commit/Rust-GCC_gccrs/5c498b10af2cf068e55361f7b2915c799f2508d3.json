{"sha": "5c498b10af2cf068e55361f7b2915c799f2508d3", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NWM0OThiMTBhZjJjZjA2OGU1NTM2MWY3YjI5MTVjNzk5ZjI1MDhkMw==", "commit": {"author": {"name": "DJ Delorie", "email": "dj@redhat.com", "date": "2005-05-25T04:18:19Z"}, "committer": {"name": "DJ Delorie", "email": "dj@gcc.gnu.org", "date": "2005-05-25T04:18:19Z"}, "message": "common.opt (-Wattributes): New.\n\n* common.opt (-Wattributes): New.  Default true.\n* doc/invoke.texi (-Wno-attributes): Document.\n\n* attribs.c (decl_attributes): Move warning control from if() to\nwarning(OPT_*).\n* c-common.c (handle_packed_attribute): Likewise.\n(handle_nocommon_attribute): Likewise.\n(handle_common_attribute): Likewise.\n(handle_noreturn_attribute): Likewise.\n(handle_noinline_attribute): Likewise.\n(handle_always_inline_attribute): Likewise.\n(handle_used_attribute): Likewise.\n(handle_unused_attribute): Likewise.\n(handle_const_attribute): Likewise.\n(handle_transparent_union_attribute): Likewise.\n(handle_constructor_attribute): Likewise.\n(handle_destructor_attribute): Likewise.\n(handle_mode_attribute): Likewise.\n(handle_alias_attribute): Likewise.\n(handle_visibility_attribute): Likewise.\n(handle_tls_model_attribute): Likewise.\n(handle_malloc_attribute): Likewise.\n(handle_returns_twice_attribute): Likewise.\n(handle_pure_attribute): Likewise.\n(handle_deprecated_attribute): Likewise.\n(handle_vector_size_attribute): Likewise.\n(handle_nothrow_attribute): Likewise.\n(handle_cleanup_attribute): Likewise.\n(handle_warn_unused_result_attribute): Likewise.\n(handle_sentinel_attribute): Likewise.\n* c-decl.c (diagnose_mismatched_decls): Likewise.\n(start_decl): Likewise.\n(grokdeclarator): Likewise.\n(start_function): Likewise.\n* c-format.c (check_function_format): Likewise.\n* stor-layout.c (place_field): Likewise.\n(finalize_record_size): Likewise.\n* tree.c (handle_dll_attribute)): Likewise.\n* varasm.c (default_assemble_visibility): Likewise.\n* config/darwin.c (darwin_handle_weak_import_attribute): Likewise.\n(darwin_assemble_visibility): Likewise.\n* config/arc/arc.c (arc_handle_interrupt_attribute): Likewise.\n* config/arm/arm.c (arm_handle_fndecl_attribute): Likewise.\n(arm_handle_isr_attribute): Likewise.\n* config/avr/avr.c (avr_handle_progmem_attribute): Likewise.\n(avr_handle_fndecl_attribute): Likewise.\n* config/bfin/bfin.c (handle_int_attribute): Likewise.\n* config/c4x/c4x.c (c4x_handle_fntype_attribute): Likewise.\n* config/h8300/h8300.c (h8300_handle_fndecl_attribute): Likewise.\n(h8300_handle_eightbit_data_attribute): Likewise.\n(h8300_handle_tiny_data_attribute): Likewise.\n* config/i386/i386.c (ix86_handle_cdecl_attribute): Likewise.\n(ix86_handle_regparm_attribute): Likewise.\n(ix86_handle_struct_attribute): Likewise.\n* config/i386/winnt.c (ix86_handle_shared_attribute): Likewise.\n(i386_pe_encode_section_info): Likewise.\n* config/ia64/ia64.c (ia64_handle_model_attribute): Likewise.\n* config/ip2k/ip2k.c (ip2k_handle_progmem_attribute): Likewise.\n(ip2k_handle_fndecl_attribute): Likewise.\n* config/m32r/m32r.c (m32r_handle_model_attribute): Likewise.\n* config/m68hc11/m68hc11 (m68hc11_handle_page0_attribute): Likewise.\n(m68hc11_handle_fntype_attribute): Likewise.\n(m68hc11_encode_section_info): Likewise.\n* config/m68k/m68k.c (m68k_handle_fndecl_attribute): Likewise.\n* config/mcore/mcore.c (mcore_handle_naked_attribute): Likewise.\n* config/ns32k/ns32k.c (ns32k_handle_fntype_attribute): Likewise.\n* config/rs6000/rs6000.c (rs6000_handle_longcall_attribute): Likewise.\n* config/sh/sh.c (sh_handle_interrupt_handler_attribute): Likewise.\n(sh_handle_sp_switch_attribute): Likewise.\n(sh_handle_trap_exit_attribute): Likewise.\n* config/sh/symbian.c (sh_symbian_dllimport_p): Likewise.\n(sh_symbian_handle_dll_attribute): Likewise.\n* config/stormy16/stormy16.c (xstormy16_handle_interrupt_attribute): Likewise.\n(xstormy16_handle_below100_attribute): Likewise.\n* config/v850/v850.c (v850_handle_interrupt_attribute): Likewise.\n\n[testsuite]\n\n* gcc.dg/Wattributes-1.c: New.\n* gcc.dg/Wattributes-2.c: New.\n* gcc.dg/Wattributes-3.c: New.\n\n[cp]\n\n* decl.c (duplicate_decls): Move warning control from if() to\nwarning(OPT_*).\n* name-lookup.c (parse_using_directive): Likewise.\n* parser.c (cp_parser_elaborated_type_specifier): Likewise.\n(cp_parser_init_declarator): Likewise.\n* tree.c (handle_com_interface_attribute): Likewise.\n\n[java]\n\n* class.c (set_constant_value): Move warning control from if() to\nwarning(OPT_*).\n\nFrom-SVN: r100136", "tree": {"sha": "f2b16cd3336a6bcdf0b58025f27679c1e19056ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/f2b16cd3336a6bcdf0b58025f27679c1e19056ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/5c498b10af2cf068e55361f7b2915c799f2508d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c498b10af2cf068e55361f7b2915c799f2508d3", "html_url": "https://github.com/Rust-GCC/gccrs/commit/5c498b10af2cf068e55361f7b2915c799f2508d3", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/5c498b10af2cf068e55361f7b2915c799f2508d3/comments", "author": null, "committer": null, "parents": [{"sha": "44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/44c21c7f0304a014f491b822f7eaea34f2cc4c3c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/44c21c7f0304a014f491b822f7eaea34f2cc4c3c"}], "stats": {"total": 415, "additions": 290, "deletions": 125}, "files": [{"sha": "01d57e2da3ded4fbc419e53438d0347cdea14788", "filename": "gcc/ChangeLog", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2FChangeLog?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -1,4 +1,80 @@\n 2005-05-24  DJ Delorie  <dj@redhat.com>\n+\t\n+\t* common.opt (-Wattributes): New.  Default true.\n+\t* doc/invoke.texi (-Wno-attributes): Document.\n+\t\n+\t* attribs.c (decl_attributes): Move warning control from if() to\n+\twarning(OPT_*).\n+\t* c-common.c (handle_packed_attribute): Likewise.\n+\t(handle_nocommon_attribute): Likewise.\n+\t(handle_common_attribute): Likewise.\n+\t(handle_noreturn_attribute): Likewise.\n+\t(handle_noinline_attribute): Likewise.\n+\t(handle_always_inline_attribute): Likewise.\n+\t(handle_used_attribute): Likewise.\n+\t(handle_unused_attribute): Likewise.\n+\t(handle_const_attribute): Likewise.\n+\t(handle_transparent_union_attribute): Likewise.\n+\t(handle_constructor_attribute): Likewise.\n+\t(handle_destructor_attribute): Likewise.\n+\t(handle_mode_attribute): Likewise.\n+\t(handle_alias_attribute): Likewise.\n+\t(handle_visibility_attribute): Likewise.\n+\t(handle_tls_model_attribute): Likewise.\n+\t(handle_malloc_attribute): Likewise.\n+\t(handle_returns_twice_attribute): Likewise.\n+\t(handle_pure_attribute): Likewise.\n+\t(handle_deprecated_attribute): Likewise.\n+\t(handle_vector_size_attribute): Likewise.\n+\t(handle_nothrow_attribute): Likewise.\n+\t(handle_cleanup_attribute): Likewise.\n+\t(handle_warn_unused_result_attribute): Likewise.\n+\t(handle_sentinel_attribute): Likewise.\n+\t* c-decl.c (diagnose_mismatched_decls): Likewise.\n+\t(start_decl): Likewise.\n+\t(grokdeclarator): Likewise.\n+\t(start_function): Likewise.\n+\t* c-format.c (check_function_format): Likewise.\n+\t* stor-layout.c (place_field): Likewise.\n+\t(finalize_record_size): Likewise.\n+\t* tree.c (handle_dll_attribute)): Likewise.\n+\t* varasm.c (default_assemble_visibility): Likewise.\n+\t* config/darwin.c (darwin_handle_weak_import_attribute): Likewise.\n+\t(darwin_assemble_visibility): Likewise.\n+\t* config/arc/arc.c (arc_handle_interrupt_attribute): Likewise.\n+\t* config/arm/arm.c (arm_handle_fndecl_attribute): Likewise.\n+\t(arm_handle_isr_attribute): Likewise.\n+\t* config/avr/avr.c (avr_handle_progmem_attribute): Likewise.\n+\t(avr_handle_fndecl_attribute): Likewise.\n+\t* config/bfin/bfin.c (handle_int_attribute): Likewise.\n+\t* config/c4x/c4x.c (c4x_handle_fntype_attribute): Likewise.\n+\t* config/h8300/h8300.c (h8300_handle_fndecl_attribute): Likewise.\n+\t(h8300_handle_eightbit_data_attribute): Likewise.\n+\t(h8300_handle_tiny_data_attribute): Likewise.\n+\t* config/i386/i386.c (ix86_handle_cdecl_attribute): Likewise.\n+\t(ix86_handle_regparm_attribute): Likewise.\n+\t(ix86_handle_struct_attribute): Likewise.\n+\t* config/i386/winnt.c (ix86_handle_shared_attribute): Likewise.\n+\t(i386_pe_encode_section_info): Likewise.\n+\t* config/ia64/ia64.c (ia64_handle_model_attribute): Likewise.\n+\t* config/ip2k/ip2k.c (ip2k_handle_progmem_attribute): Likewise.\n+\t(ip2k_handle_fndecl_attribute): Likewise.\n+\t* config/m32r/m32r.c (m32r_handle_model_attribute): Likewise.\n+\t* config/m68hc11/m68hc11 (m68hc11_handle_page0_attribute): Likewise.\n+\t(m68hc11_handle_fntype_attribute): Likewise.\n+\t(m68hc11_encode_section_info): Likewise.\n+\t* config/m68k/m68k.c (m68k_handle_fndecl_attribute): Likewise.\n+\t* config/mcore/mcore.c (mcore_handle_naked_attribute): Likewise.\n+\t* config/ns32k/ns32k.c (ns32k_handle_fntype_attribute): Likewise.\n+\t* config/rs6000/rs6000.c (rs6000_handle_longcall_attribute): Likewise.\n+\t* config/sh/sh.c (sh_handle_interrupt_handler_attribute): Likewise.\n+\t(sh_handle_sp_switch_attribute): Likewise.\n+\t(sh_handle_trap_exit_attribute): Likewise.\n+\t* config/sh/symbian.c (sh_symbian_dllimport_p): Likewise.\n+\t(sh_symbian_handle_dll_attribute): Likewise.\n+\t* config/stormy16/stormy16.c (xstormy16_handle_interrupt_attribute): Likewise.\n+\t(xstormy16_handle_below100_attribute): Likewise.\n+\t* config/v850/v850.c (v850_handle_interrupt_attribute): Likewise.\n \n \t* c-common.c (unsigned_conversion_warning): Move warning control\n \tfrom if() to warning(OPT_*)."}, {"sha": "019618cccecbcf2dccdd97b739867d94d9490437", "filename": "gcc/attribs.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fattribs.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fattribs.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fattribs.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -172,7 +172,7 @@ decl_attributes (tree *node, tree attributes, int flags)\n \n       if (spec == NULL)\n \t{\n-\t  warning (0, \"%qs attribute directive ignored\",\n+\t  warning (OPT_Wattributes, \"%qs attribute directive ignored\",\n \t\t   IDENTIFIER_POINTER (name));\n \t  continue;\n \t}\n@@ -197,7 +197,7 @@ decl_attributes (tree *node, tree attributes, int flags)\n \t    }\n \t  else\n \t    {\n-\t      warning (0, \"%qs attribute does not apply to types\",\n+\t      warning (OPT_Wattributes, \"%qs attribute does not apply to types\",\n \t\t       IDENTIFIER_POINTER (name));\n \t      continue;\n \t    }\n@@ -243,7 +243,8 @@ decl_attributes (tree *node, tree attributes, int flags)\n \t  if (TREE_CODE (*anode) != FUNCTION_TYPE\n \t      && TREE_CODE (*anode) != METHOD_TYPE)\n \t    {\n-\t      warning (0, \"%qs attribute only applies to function types\",\n+\t      warning (OPT_Wattributes,\n+\t\t       \"%qs attribute only applies to function types\",\n \t\t       IDENTIFIER_POINTER (name));\n \t      continue;\n \t    }"}, {"sha": "cd7f65350979891164500425282391c4fcb808a7", "filename": "gcc/c-common.c", "status": "modified", "additions": 36, "deletions": 32, "changes": 68, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fc-common.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fc-common.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-common.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -3959,7 +3959,7 @@ handle_packed_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n      that changes what the typedef is typing.  */\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -3978,7 +3978,7 @@ handle_nocommon_attribute (tree *node, tree name,\n     DECL_COMMON (*node) = 0;\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -3996,7 +3996,7 @@ handle_common_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n     DECL_COMMON (*node) = 1;\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4023,7 +4023,7 @@ handle_noreturn_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t\t     TYPE_READONLY (TREE_TYPE (type)), 1));\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4042,7 +4042,7 @@ handle_noinline_attribute (tree *node, tree name,\n     DECL_UNINLINABLE (*node) = 1;\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4065,7 +4065,7 @@ handle_always_inline_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4089,7 +4089,7 @@ handle_used_attribute (tree *pnode, tree name, tree ARG_UNUSED (args),\n     }\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4115,7 +4115,7 @@ handle_unused_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \tTREE_USED (decl) = 1;\n       else\n \t{\n-\t  warning (0, \"%qE attribute ignored\", name);\n+\t  warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n \t  *no_add_attrs = true;\n \t}\n     }\n@@ -4149,7 +4149,7 @@ handle_const_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n \t\t\t     TREE_THIS_VOLATILE (TREE_TYPE (type))));\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4193,7 +4193,7 @@ handle_transparent_union_attribute (tree *node, tree name,\n     DECL_TRANSPARENT_UNION (decl) = 1;\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4221,7 +4221,7 @@ handle_constructor_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4249,7 +4249,7 @@ handle_destructor_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4268,7 +4268,7 @@ handle_mode_attribute (tree *node, tree name, tree args,\n   *no_add_attrs = true;\n \n   if (TREE_CODE (TREE_VALUE (args)) != IDENTIFIER_NODE)\n-    warning (0, \"%qE attribute ignored\", name);\n+    warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n   else\n     {\n       int j;\n@@ -4326,9 +4326,10 @@ handle_mode_attribute (tree *node, tree name, tree args,\n \n \tcase MODE_VECTOR_INT:\n \tcase MODE_VECTOR_FLOAT:\n-\t  warning (0, \"specifying vector types with __attribute__ ((mode)) \"\n-\t\t   \"is deprecated\");\n-\t  warning (0, \"use __attribute__ ((vector_size)) instead\");\n+\t  warning (OPT_Wattributes, \"specifying vector types with \"\n+\t\t   \"__attribute__ ((mode)) is deprecated\");\n+\t  warning (OPT_Wattributes,\n+\t\t   \"use __attribute__ ((vector_size)) instead\");\n \t  valid_mode = vector_mode_valid_p (mode);\n \t  break;\n \n@@ -4593,7 +4594,7 @@ handle_alias_attribute (tree *node, tree name, tree args,\n     }\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4617,13 +4618,14 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n     {\n       if (TREE_CODE (*node) != RECORD_TYPE && TREE_CODE (*node) != UNION_TYPE)\n        {\n-         warning (0, \"%qE attribute ignored on non-class types\", name);\n+         warning (OPT_Wattributes, \"%qE attribute ignored on non-class types\",\n+\t\t  name);\n          return NULL_TREE;\n        }\n     }\n   else if (decl_function_context (decl) != 0 || !TREE_PUBLIC (decl))\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       return NULL_TREE;\n     }\n \n@@ -4641,7 +4643,7 @@ handle_visibility_attribute (tree *node, tree name, tree args,\n         return NULL_TREE;\n       if (TREE_CODE (decl) == IDENTIFIER_NODE)\n \t{\n-\t   warning (0, \"%qE attribute ignored on types\",\n+\t   warning (OPT_Wattributes, \"%qE attribute ignored on types\",\n \t\t    name);\n \t   return NULL_TREE;\n \t}\n@@ -4715,7 +4717,7 @@ handle_tls_model_attribute (tree *node, tree name, tree args,\n \n   if (!DECL_THREAD_LOCAL (decl))\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n   else\n@@ -4782,7 +4784,7 @@ handle_malloc_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n     DECL_IS_MALLOC (*node) = 1;\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4800,7 +4802,7 @@ handle_returns_twice_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n     DECL_IS_RETURNS_TWICE (*node) = 1;\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4846,7 +4848,7 @@ handle_pure_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   /* ??? TODO: Support types.  */\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -4914,9 +4916,9 @@ handle_deprecated_attribute (tree *node, tree name,\n \t    what = DECL_NAME (TYPE_NAME (type));\n \t}\n       if (what)\n-\twarning (0, \"%qE attribute ignored for %qE\", name, what);\n+\twarning (OPT_Wattributes, \"%qE attribute ignored for %qE\", name, what);\n       else\n-\twarning (0, \"%qE attribute ignored\", name);\n+\twarning (OPT_Wattributes, \"%qE attribute ignored\", name);\n     }\n \n   return NULL_TREE;\n@@ -4940,7 +4942,7 @@ handle_vector_size_attribute (tree *node, tree name, tree args,\n \n   if (!host_integerp (size, 1))\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       return NULL_TREE;\n     }\n \n@@ -5218,7 +5220,7 @@ handle_nothrow_attribute (tree *node, tree name, tree ARG_UNUSED (args),\n   /* ??? TODO: Support types.  */\n   else\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -5241,7 +5243,7 @@ handle_cleanup_attribute (tree *node, tree name, tree args,\n      we'd be missing too much, since we do have attribute constructor.  */\n   if (TREE_CODE (decl) != VAR_DECL || TREE_STATIC (decl))\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n       return NULL_TREE;\n     }\n@@ -5280,7 +5282,7 @@ handle_warn_unused_result_attribute (tree *node, tree name,\n   /* Ignore the attribute for functions not returning any value.  */\n   if (VOID_TYPE_P (TREE_TYPE (*node)))\n     {\n-      warning (0, \"%qE attribute ignored\", name);\n+      warning (OPT_Wattributes, \"%qE attribute ignored\", name);\n       *no_add_attrs = true;\n     }\n \n@@ -5297,7 +5299,8 @@ handle_sentinel_attribute (tree *node, tree name, tree args,\n \n   if (!params)\n     {\n-      warning (0, \"%qE attribute requires prototypes with named arguments\", name);\n+      warning (OPT_Wattributes,\n+\t       \"%qE attribute requires prototypes with named arguments\", name);\n       *no_add_attrs = true;\n     }\n   else\n@@ -5307,7 +5310,8 @@ handle_sentinel_attribute (tree *node, tree name, tree args,\n \n       if (VOID_TYPE_P (TREE_VALUE (params)))\n         {\n-\t  warning (0, \"%qE attribute only applies to variadic functions\", name);\n+\t  warning (OPT_Wattributes,\n+\t\t   \"%qE attribute only applies to variadic functions\", name);\n \t  *no_add_attrs = true;\n \t}\n     }"}, {"sha": "d5e13abca878df88290857ae7c07b3a2df86447a", "filename": "gcc/c-decl.c", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fc-decl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fc-decl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-decl.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -1480,15 +1480,15 @@ diagnose_mismatched_decls (tree newdecl, tree olddecl,\n       if (DECL_DECLARED_INLINE_P (newdecl)\n \t  && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n \t{\n-\t  warning (0, \"%Jinline declaration of %qD follows \"\n+\t  warning (OPT_Wattributes, \"%Jinline declaration of %qD follows \"\n \t\t   \"declaration with attribute noinline\", newdecl, newdecl);\n \t  warned = true;\n \t}\n       else if (DECL_DECLARED_INLINE_P (olddecl)\n \t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n \t{\n-\t  warning (0, \"%Jdeclaration of %qD with attribute noinline follows \"\n-\t\t   \"inline declaration \", newdecl, newdecl);\n+\t  warning (OPT_Wattributes, \"%Jdeclaration of %qD with attribute \"\n+\t\t   \"noinline follows inline declaration \", newdecl, newdecl);\n \t  warned = true;\n \t}\n \n@@ -3198,7 +3198,8 @@ start_decl (struct c_declarator *declarator, struct c_declspecs *declspecs,\n       && DECL_DECLARED_INLINE_P (decl)\n       && DECL_UNINLINABLE (decl)\n       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (decl)))\n-    warning (0, \"%Jinline function %qD given attribute noinline\", decl, decl);\n+    warning (OPT_Wattributes, \"%Jinline function %qD given attribute noinline\",\n+\t     decl, decl);\n \n   /* Add this decl to the current scope.\n      TEM may equal DECL or it may be a previous decl of the same name.  */\n@@ -4433,7 +4434,8 @@ grokdeclarator (const struct c_declarator *declarator,\n \n \t    /* We don't yet implement attributes in this context.  */\n \t    if (array_ptr_attrs != NULL_TREE)\n-\t      warning (0, \"attributes in parameter array declarator ignored\");\n+\t      warning (OPT_Wattributes,\n+\t\t       \"attributes in parameter array declarator ignored\");\n \n \t    size_varies = 0;\n \t  }\n@@ -5782,7 +5784,8 @@ start_function (struct c_declspecs *declspecs, struct c_declarator *declarator,\n   if (DECL_DECLARED_INLINE_P (decl1)\n       && DECL_UNINLINABLE (decl1)\n       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (decl1)))\n-    warning (0, \"%Jinline function %qD given attribute noinline\", decl1, decl1);\n+    warning (OPT_Wattributes, \"%Jinline function %qD given attribute noinline\",\n+\t     decl1, decl1);\n \n   announce_function (decl1);\n "}, {"sha": "f27d6d03a116e03db4935c64e1187bc29307bcc3", "filename": "gcc/c-format.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fc-format.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fc-format.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fc-format.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -833,7 +833,8 @@ check_function_format (tree attrs, tree params)\n \t\t\tbreak;\n \t\t    }\n \t\t  if (args != 0)\n-\t\t    warning (0, \"function might be possible candidate for %qs format attribute\",\n+\t\t    warning (OPT_Wattributes, \"function might be possible \"\n+\t\t\t     \"candidate for %qs format attribute\",\n \t\t\t     format_types[info.format_type].name);\n \t\t}\n \t    }"}, {"sha": "91cc3c1ccc219151cac3341d8b5ea5845b788307", "filename": "gcc/common.opt", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fcommon.opt", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fcommon.opt", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcommon.opt?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -57,6 +57,10 @@ Waggregate-return\n Common Var(warn_aggregate_return)\n Warn about returning structures, unions or arrays\n \n+Wattributes\n+Common Var(warn_attributes) Init(1)\n+Warn about inappropriate attribute usage\n+\n Wcast-align\n Common Var(warn_cast_align)\n Warn about pointer casts which increase alignment"}, {"sha": "2161817ca95724dcf13b21f661a7574b76f32bbc", "filename": "gcc/config/arc/arc.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Farc%2Farc.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Farc%2Farc.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farc%2Farc.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -410,14 +410,16 @@ arc_handle_interrupt_attribute (tree *node ATTRIBUTE_UNUSED,\n \n   if (TREE_CODE (value) != STRING_CST)\n     {\n-      warning (0, \"argument of %qs attribute is not a string constant\",\n+      warning (OPT_Wattributes,\n+\t       \"argument of %qs attribute is not a string constant\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (strcmp (TREE_STRING_POINTER (value), \"ilink1\")\n \t   && strcmp (TREE_STRING_POINTER (value), \"ilink2\"))\n     {\n-      warning (0, \"argument of %qs attribute is not \\\"ilink1\\\" or \\\"ilink2\\\"\",\n+      warning (OPT_Wattributes,\n+\t       \"argument of %qs attribute is not \\\"ilink1\\\" or \\\"ilink2\\\"\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "f2266c7c9910159c2531276b656c0369f0694866", "filename": "gcc/config/arm/arm.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Farm%2Farm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Farm%2Farm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Farm%2Farm.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -2812,7 +2812,7 @@ arm_handle_fndecl_attribute (tree *node, tree name, tree args ATTRIBUTE_UNUSED,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -2830,7 +2830,7 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n     {\n       if (TREE_CODE (*node) != FUNCTION_DECL)\n \t{\n-\t  warning (0, \"%qs attribute only applies to functions\",\n+\t  warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t\t   IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n@@ -2844,7 +2844,8 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n \t{\n \t  if (arm_isr_value (args) == ARM_FT_UNKNOWN)\n \t    {\n-\t      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+\t      warning (OPT_Wattributes, \"%qs attribute ignored\",\n+\t\t       IDENTIFIER_POINTER (name));\n \t      *no_add_attrs = true;\n \t    }\n \t}\n@@ -2871,7 +2872,8 @@ arm_handle_isr_attribute (tree *node, tree name, tree args, int flags,\n \t    }\n \t  else\n \t    {\n-\t      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+\t      warning (OPT_Wattributes, \"%qs attribute ignored\",\n+\t\t       IDENTIFIER_POINTER (name));\n \t    }\n \t}\n     }"}, {"sha": "45b51f24fb5b77b3752b75ebd074c06455486c95", "filename": "gcc/config/avr/avr.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Favr%2Favr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Favr%2Favr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Favr%2Favr.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -4676,7 +4676,8 @@ avr_handle_progmem_attribute (tree *node, tree name,\n \t}\n       else\n \t{\n-\t  warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  warning (OPT_Wattributes, \"%qs attribute ignored\",\n+\t\t   IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n     }\n@@ -4695,7 +4696,7 @@ avr_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "8f3e0547457b21de411aa591374f0564b50343b2", "filename": "gcc/config/bfin/bfin.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fbfin%2Fbfin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fbfin%2Fbfin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fbfin%2Fbfin.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -2558,7 +2558,7 @@ handle_int_attribute (tree *node, tree name,\n \n   if (TREE_CODE (x) != FUNCTION_TYPE)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "119c7be80d8a9c7764f0ada47a937a27136cff6e", "filename": "gcc/config/c4x/c4x.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fc4x%2Fc4x.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fc4x%2Fc4x.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fc4x%2Fc4x.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -4486,7 +4486,7 @@ c4x_handle_fntype_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "7b3289ffe4948d15b71d54be2ec84d8f16796b91", "filename": "gcc/config/darwin.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fdarwin.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fdarwin.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fdarwin.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -1222,7 +1222,8 @@ darwin_handle_weak_import_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL && TREE_CODE (*node) != VAR_DECL)\n     {\n-      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qs attribute ignored\",\n+\t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else\n@@ -1335,8 +1336,8 @@ darwin_assemble_visibility (tree decl, int vis)\n       fputs (\"\\n\", asm_out_file);\n     }\n   else\n-    warning (0, \"internal and protected visibility attributes not supported \"\n-\t     \"in this configuration; ignored\");\n+    warning (OPT_Wattributes, \"internal and protected visibility attributes \"\n+\t     \"not supported in this configuration; ignored\");\n }\n \n /* Output a difference of two labels that will be an assembly time"}, {"sha": "45fb514f2266d0b62d0f0d7b7a94db54c0b24f08", "filename": "gcc/config/h8300/h8300.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fh8300%2Fh8300.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fh8300%2Fh8300.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fh8300%2Fh8300.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -5255,7 +5255,7 @@ h8300_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -5279,7 +5279,8 @@ h8300_handle_eightbit_data_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qs attribute ignored\",\n+\t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -5302,7 +5303,8 @@ h8300_handle_tiny_data_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qs attribute ignored\",\n+\t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n "}, {"sha": "43fcd2ef4e4175150d1f2013c9634b500292e6be", "filename": "gcc/config/i386/i386.c", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fi386%2Fi386.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fi386%2Fi386.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fi386.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -1815,7 +1815,7 @@ ix86_handle_cdecl_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -1843,7 +1843,8 @@ ix86_handle_cdecl_attribute (tree *node, tree name,\n \n   if (TARGET_64BIT)\n     {\n-      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qs attribute ignored\",\n+\t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -1861,7 +1862,7 @@ ix86_handle_regparm_attribute (tree *node, tree name, tree args,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -1872,13 +1873,14 @@ ix86_handle_regparm_attribute (tree *node, tree name, tree args,\n       cst = TREE_VALUE (args);\n       if (TREE_CODE (cst) != INTEGER_CST)\n \t{\n-\t  warning (0, \"%qs attribute requires an integer constant argument\",\n+\t  warning (OPT_Wattributes,\n+\t\t   \"%qs attribute requires an integer constant argument\",\n \t\t   IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n       else if (compare_tree_int (cst, REGPARM_MAX) > 0)\n \t{\n-\t  warning (0, \"argument to %qs attribute larger than %d\",\n+\t  warning (OPT_Wattributes, \"argument to %qs attribute larger than %d\",\n \t\t   IDENTIFIER_POINTER (name), REGPARM_MAX);\n \t  *no_add_attrs = true;\n \t}\n@@ -16054,7 +16056,8 @@ ix86_handle_struct_attribute (tree *node, tree name,\n   if (!(type && (TREE_CODE (*type) == RECORD_TYPE\n \t\t || TREE_CODE (*type) == UNION_TYPE)))\n     {\n-      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qs attribute ignored\",\n+\t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -16063,7 +16066,7 @@ ix86_handle_struct_attribute (tree *node, tree name,\n \t   || ((is_attribute_p (\"gcc_struct\", name)\n \t\t&& lookup_attribute (\"ms_struct\", TYPE_ATTRIBUTES (*type)))))\n     {\n-      warning (0, \"%qs incompatible attribute ignored\",\n+      warning (OPT_Wattributes, \"%qs incompatible attribute ignored\",\n                IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "6eae2e74efad27c28795e5540baed8c019e8620c", "filename": "gcc/config/i386/winnt.c", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fi386%2Fwinnt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fi386%2Fwinnt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fi386%2Fwinnt.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -71,7 +71,7 @@ ix86_handle_shared_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != VAR_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to variables\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to variables\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -466,8 +466,9 @@ i386_pe_encode_section_info (tree decl, rtx rtl, int first)\n \twarning (0, \"%J'%D' defined locally after being \"\n \t\t \"referenced with dllimport linkage\", decl, decl);\n       else\n-\twarning (0, \"%J'%D' redeclared without dllimport attribute \"\n-\t\t \"after being referenced with dllimport linkage\", decl, decl);\n+\twarning (OPT_Wattributes, \"%J'%D' redeclared without dllimport \"\n+\t\t \"attribute after being referenced with dllimport linkage\",\n+\t\t decl, decl);\n     }\n }\n "}, {"sha": "a52b7d850d484769dcc2c6d77dc04e7aecb9193b", "filename": "gcc/config/ia64/ia64.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fia64%2Fia64.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fia64%2Fia64.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fia64%2Fia64.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -484,7 +484,7 @@ ia64_handle_model_attribute (tree *node, tree name, tree args,\n     }\n   else\n     {\n-      warning (0, \"invalid argument of %qs attribute\",\n+      warning (OPT_Wattributes, \"invalid argument of %qs attribute\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -516,7 +516,8 @@ ia64_handle_model_attribute (tree *node, tree name, tree args,\n       break;\n \n     default:\n-      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qs attribute ignored\",\n+\t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n       break;\n     }"}, {"sha": "7542b46b6fead7f6a19a8a18ac7aabe76c15d023", "filename": "gcc/config/ip2k/ip2k.c", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fip2k%2Fip2k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fip2k%2Fip2k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fip2k%2Fip2k.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -3161,7 +3161,8 @@ ip2k_handle_progmem_attribute (tree *node, tree name,\n \t}\n       else\n \t{\n-\t  warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  warning (OPT_Wattributes, \"%qs attribute ignored\",\n+\t\t   IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n     }\n@@ -3179,7 +3180,7 @@ ip2k_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "c27b2441127b22bd29e54489ddc2fbd9b9424de9", "filename": "gcc/config/m32r/m32r.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fm32r%2Fm32r.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fm32r%2Fm32r.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm32r%2Fm32r.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -387,7 +387,7 @@ m32r_handle_model_attribute (tree *node ATTRIBUTE_UNUSED, tree name,\n       && arg != large_ident1\n       && arg != large_ident2)\n     {\n-      warning (0, \"invalid argument of %qs attribute\",\n+      warning (OPT_Wattributes, \"invalid argument of %qs attribute\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "fca34d27e2f50fe28f1c75c8070a601052b7841d", "filename": "gcc/config/m68hc11/m68hc11.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68hc11%2Fm68hc11.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -1115,7 +1115,8 @@ m68hc11_handle_page0_attribute (tree *node, tree name,\n     }\n   else\n     {\n-      warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qs attribute ignored\",\n+\t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n \n@@ -1151,7 +1152,7 @@ m68hc11_handle_fntype_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -1236,13 +1237,14 @@ m68hc11_encode_section_info (tree decl, rtx rtl, int first ATTRIBUTE_UNUSED)\n   trap_handler = lookup_attribute (\"trap\", func_attr) != NULL_TREE;\n   if (trap_handler && is_far)\n     {\n-      warning (0, \"%<trap%> and %<far%> attributes are not compatible, ignoring %<far%>\");\n+      warning (OPT_Wattributes, \"%<trap%> and %<far%> attributes are \"\n+\t       \"not compatible, ignoring %<far%>\");\n       trap_handler = 0;\n     }\n   if (trap_handler)\n     {\n       if (trap_handler_symbol != 0)\n-        warning (0, \"%<trap%> attribute is already used\");\n+        warning (OPT_Wattributes, \"%<trap%> attribute is already used\");\n       else\n         trap_handler_symbol = XEXP (rtl, 0);\n     }"}, {"sha": "9db2ddd7fddc6d94dc0175905a2babf553546a6c", "filename": "gcc/config/m68k/m68k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fm68k%2Fm68k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fm68k%2Fm68k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fm68k%2Fm68k.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -373,7 +373,7 @@ m68k_handle_fndecl_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "e07f2470b1a4c033659f4ebb2082c653016cf5b1", "filename": "gcc/config/mcore/mcore.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fmcore%2Fmcore.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fmcore%2Fmcore.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fmcore%2Fmcore.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -3029,7 +3029,7 @@ mcore_handle_naked_attribute (tree * node, tree name, tree args ATTRIBUTE_UNUSED\n     }\n   else\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "e4448efac65077af385abaa14e3ba8f12642a09c", "filename": "gcc/config/ns32k/ns32k.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fns32k%2Fns32k.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fns32k%2Fns32k.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fns32k%2Fns32k.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -1106,7 +1106,7 @@ ns32k_handle_fntype_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "228af5d3aa106a0d9a8ae37b8d4af8a84c8b8a8a", "filename": "gcc/config/rs6000/rs6000.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Frs6000%2Frs6000.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Frs6000%2Frs6000.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -16527,7 +16527,7 @@ rs6000_handle_longcall_attribute (tree *node, tree name,\n       && TREE_CODE (*node) != FIELD_DECL\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "9da837e4aa10d9956462038aa0b1925e035bc0b3", "filename": "gcc/config/sh/sh.c", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fsh%2Fsh.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fsh%2Fsh.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsh.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -7393,7 +7393,7 @@ sh_handle_interrupt_handler_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -7414,21 +7414,21 @@ sh_handle_sp_switch_attribute (tree *node, tree name, tree args,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (!pragma_interrupt)\n     {\n       /* The sp_switch attribute only has meaning for interrupt functions.  */\n-      warning (0, \"%qs attribute only applies to interrupt functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qs attribute only applies to \"\n+\t       \"interrupt functions\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (TREE_CODE (TREE_VALUE (args)) != STRING_CST)\n     {\n       /* The argument must be a constant string.  */\n-      warning (0, \"%qs attribute argument not a string constant\",\n+      warning (OPT_Wattributes, \"%qs attribute argument not a string constant\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -7449,22 +7449,22 @@ sh_handle_trap_exit_attribute (tree *node, tree name, tree args,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (!pragma_interrupt)\n     {\n       /* The trap_exit attribute only has meaning for interrupt functions.  */\n-      warning (0, \"%qs attribute only applies to interrupt functions\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qs attribute only applies to \"\n+\t       \"interrupt functions\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else if (TREE_CODE (TREE_VALUE (args)) != INTEGER_CST)\n     {\n       /* The argument must be a constant integer.  */\n-      warning (0, \"%qs attribute argument not an integer constant\",\n-\t       IDENTIFIER_POINTER (name));\n+      warning (OPT_Wattributes, \"%qs attribute argument not an \"\n+\t       \"integer constant\", IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n   else"}, {"sha": "cc51841979274092850f999443cc6c2465f6267d", "filename": "gcc/config/sh/symbian.c", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fsh%2Fsymbian.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fsh%2Fsymbian.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fsh%2Fsymbian.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -144,7 +144,8 @@ sh_symbian_dllimport_p (tree decl)\n     {\n       /* Don't warn about artificial methods.  */\n       if (!DECL_ARTIFICIAL (decl))\n-\twarning (0, \"%H function '%D' is defined after prior declaration as dllimport: attribute ignored\",\n+\twarning (OPT_Wattributes, \"%H function '%D' is defined after prior \"\n+\t\t \"declaration as dllimport: attribute ignored\",\n \t\t & DECL_SOURCE_LOCATION (decl), decl);\n       return false;\n     }\n@@ -155,7 +156,8 @@ sh_symbian_dllimport_p (tree decl)\n   else if (TREE_CODE (decl) == FUNCTION_DECL && DECL_INLINE (decl))\n     {\n       if (extra_warnings)\n-\twarning (0, \"%Hinline function '%D' is declared as dllimport: attribute ignored.\",\n+\twarning (OPT_Wattributes, \"%Hinline function '%D' is declared as \"\n+\t\t \"dllimport: attribute ignored.\",\n \t\t & DECL_SOURCE_LOCATION (decl), decl);\n       return false;\n     }\n@@ -403,14 +405,14 @@ sh_symbian_handle_dll_attribute (tree *pnode, tree name, tree args,\n \t\t   | (int) ATTR_FLAG_FUNCTION_NEXT\n \t\t   | (int) ATTR_FLAG_ARRAY_NEXT))\n \t{\n-\t  warning (0, \"%qs attribute ignored\", attr);\n+\t  warning (OPT_Wattributes, \"%qs attribute ignored\", attr);\n \t  *no_add_attrs = true;\n \t  return tree_cons (name, args, NULL_TREE);\n \t}\n \n       if (TREE_CODE (node) != RECORD_TYPE && TREE_CODE (node) != UNION_TYPE)\n \t{\n-\t  warning (0, \"%qs attribute ignored\", attr);\n+\t  warning (OPT_Wattributes, \"%qs attribute ignored\", attr);\n \t  *no_add_attrs = true;\n \t}\n "}, {"sha": "469ecf589663667be46ea1c7305478b886d5b444", "filename": "gcc/config/stormy16/stormy16.c", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fstormy16%2Fstormy16.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fstormy16%2Fstormy16.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -2276,7 +2276,7 @@ xstormy16_handle_interrupt_attribute (tree *node, tree name,\n {\n   if (TREE_CODE (*node) != FUNCTION_TYPE)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }\n@@ -2297,14 +2297,16 @@ xstormy16_handle_below100_attribute (tree *node,\n       && TREE_CODE (*node) != POINTER_TYPE\n       && TREE_CODE (*node) != TYPE_DECL)\n     {\n-      warning (0, \"%<__BELOW100__%> attribute only applies to variables\");\n+      warning (OPT_Wattributes,\n+\t       \"%<__BELOW100__%> attribute only applies to variables\");\n       *no_add_attrs = true;\n     }\n   else if (args == NULL_TREE && TREE_CODE (*node) == VAR_DECL)\n     {\n       if (! (TREE_PUBLIC (*node) || TREE_STATIC (*node)))\n \t{\n-\t  warning (0, \"__BELOW100__ attribute not allowed with auto storage class.\");\n+\t  warning (OPT_Wattributes, \"__BELOW100__ attribute not allowed \"\n+\t\t   \"with auto storage class.\");\n \t  *no_add_attrs = true;\n \t}\n     }"}, {"sha": "f67c4e734cd0cde1b9f665736d7340b62a5a40db", "filename": "gcc/config/v850/v850.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fv850%2Fv850.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fconfig%2Fv850%2Fv850.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fconfig%2Fv850%2Fv850.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -2101,7 +2101,7 @@ v850_handle_interrupt_attribute (tree * node,\n {\n   if (TREE_CODE (*node) != FUNCTION_DECL)\n     {\n-      warning (0, \"%qs attribute only applies to functions\",\n+      warning (OPT_Wattributes, \"%qs attribute only applies to functions\",\n \t       IDENTIFIER_POINTER (name));\n       *no_add_attrs = true;\n     }"}, {"sha": "aa8b26c4a11765747d0197e6921d2fb92f9f6ffb", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -1,3 +1,12 @@\n+2005-05-25  DJ Delorie  <dj@redhat.com>\n+\n+\t* decl.c (duplicate_decls): Move warning control from if() to\n+\twarning(OPT_*).\n+\t* name-lookup.c (parse_using_directive): Likewise.\n+\t* parser.c (cp_parser_elaborated_type_specifier): Likewise.\n+\t(cp_parser_init_declarator): Likewise.\n+\t* tree.c (handle_com_interface_attribute): Likewise.\n+\n 2005-05-24  Ziemowit Laski  <zlaski@apple.com>\n \n \t* class.c (layout_class_type): Do not issue C++ ABI warnings"}, {"sha": "d3544172bc4cdac038f0b41099c708aedac3ad49", "filename": "gcc/cp/decl.c", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fcp%2Fdecl.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fcp%2Fdecl.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fdecl.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -1051,17 +1051,18 @@ duplicate_decls (tree newdecl, tree olddecl)\n \t       && DECL_UNINLINABLE (olddecl)\n \t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (olddecl)))\n \t{\n-\t  warning (0, \"%Jfunction %qD redeclared as inline\", newdecl, newdecl);\n-\t  warning (0, \"%Jprevious declaration of %qD with attribute noinline\",\n-                   olddecl, olddecl);\n+\t  warning (OPT_Wattributes, \"%Jfunction %qD redeclared as inline\",\n+\t\t   newdecl, newdecl);\n+\t  warning (OPT_Wattributes, \"%Jprevious declaration of %qD \"\n+\t\t   \"with attribute noinline\", olddecl, olddecl);\n \t}\n       else if (DECL_DECLARED_INLINE_P (olddecl)\n \t       && DECL_UNINLINABLE (newdecl)\n \t       && lookup_attribute (\"noinline\", DECL_ATTRIBUTES (newdecl)))\n \t{\n-\t  warning (0, \"%Jfunction %qD redeclared with attribute noinline\",\n-\t\t   newdecl, newdecl);\n-\t  warning (0, \"%Jprevious declaration of %qD was inline\",\n+\t  warning (OPT_Wattributes, \"%Jfunction %qD redeclared with \"\n+\t\t   \"attribute noinline\", newdecl, newdecl);\n+\t  warning (OPT_Wattributes, \"%Jprevious declaration of %qD was inline\",\n \t\t   olddecl, olddecl);\n \t}\n     }\n@@ -1802,9 +1803,10 @@ duplicate_decls (tree newdecl, tree olddecl)\n       && DECL_VISIBILITY_SPECIFIED (newdecl)\n       && DECL_VISIBILITY (newdecl) != DECL_VISIBILITY (olddecl))\n     {\n-      warning (0, \"%J%qD: visibility attribute ignored because it\",\n-\t       newdecl, newdecl);\n-      warning (0, \"%Jconflicts with previous declaration here\", olddecl);\n+      warning (OPT_Wattributes, \"%J%qD: visibility attribute ignored \"\n+\t       \"because it\", newdecl, newdecl);\n+      warning (OPT_Wattributes, \"%Jconflicts with previous \"\n+\t       \"declaration here\", olddecl);\n     }\n   /* Choose the declaration which specified visibility.  */\n   if (DECL_VISIBILITY_SPECIFIED (olddecl))"}, {"sha": "bd83695cd0a7e758758e8118dd80f0dd1d2dac6e", "filename": "gcc/cp/name-lookup.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fcp%2Fname-lookup.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fcp%2Fname-lookup.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fname-lookup.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -3207,7 +3207,7 @@ parse_using_directive (tree namespace, tree attribs)\n \t\t\t   DECL_NAMESPACE_ASSOCIATIONS (namespace));\n \t}\n       else\n-\twarning (0, \"%qD attribute directive ignored\", name);\n+\twarning (OPT_Wattributes, \"%qD attribute directive ignored\", name);\n     }\n }\n "}, {"sha": "a0d71b3141f9bc3a2a18309191e7dcc2579c7ec9", "filename": "gcc/cp/parser.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fcp%2Fparser.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fcp%2Fparser.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fparser.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -10024,7 +10024,8 @@ cp_parser_elaborated_type_specifier (cp_parser* parser,\n \n  \t  /* Warn about attributes. They are ignored.  */\n  \t  if (attributes)\n-\t    warning (0, \"type attributes are honored only at type definition\");\n+\t    warning (OPT_Wattributes,\n+\t\t     \"type attributes are honored only at type definition\");\n \n \t  type = xref_tag (tag_type, identifier, ts,\n \t\t\t   parser->num_template_parameter_lists);\n@@ -10869,7 +10870,8 @@ cp_parser_init_declarator (cp_parser* parser,\n      attributes -- but ignores them.  */\n   if (cp_parser_allow_gnu_extensions_p (parser) && is_parenthesized_init)\n     if (cp_parser_attributes_opt (parser))\n-      warning (0, \"attributes after parenthesized initializer ignored\");\n+      warning (OPT_Wattributes,\n+\t       \"attributes after parenthesized initializer ignored\");\n \n   /* For an in-class declaration, use `grokfield' to create the\n      declaration.  */"}, {"sha": "64a5aa5bd258f49852611e1b33ff95f695712f6c", "filename": "gcc/cp/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fcp%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fcp%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Ftree.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -1769,7 +1769,8 @@ handle_com_interface_attribute (tree* node,\n       || !CLASS_TYPE_P (*node)\n       || *node != TYPE_MAIN_VARIANT (*node))\n     {\n-      warning (0, \"%qE attribute can only be applied to class definitions\", name);\n+      warning (OPT_Wattributes, \"%qE attribute can only be applied \"\n+\t       \"to class definitions\", name);\n       return NULL_TREE;\n     }\n "}, {"sha": "a104c548e380880be7a269c2462e0aad513c8c22", "filename": "gcc/doc/invoke.texi", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fdoc%2Finvoke.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fdoc%2Finvoke.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fdoc%2Finvoke.texi?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -218,7 +218,7 @@ Objective-C and Objective-C++ Dialects}.\n @item Warning Options\n @xref{Warning Options,,Options to Request or Suppress Warnings}.\n @gccoptlist{-fsyntax-only  -pedantic  -pedantic-errors @gol\n--w  -Wextra  -Wall  -Waggregate-return @gol\n+-w  -Wextra  -Wall  -Waggregate-return -Wno-attributes @gol\n -Wcast-align  -Wcast-qual  -Wchar-subscripts  -Wcomment @gol\n -Wconversion  -Wno-deprecated-declarations @gol\n -Wdisabled-optimization  -Wno-div-by-zero  -Wno-endif-labels @gol\n@@ -3046,6 +3046,14 @@ Warn if any functions that return structures or unions are defined or\n called.  (In languages where you can return an array, this also elicits\n a warning.)\n \n+@item -Wno-attributes\n+@opindex Wno-attributes\n+@opindex Wattributes\n+Do not warn if an unexpected @code{__attribute__} is used, such as\n+unrecognized attributes, function attributes applied to variables,\n+etc.  This will not stop errors for incorrect use of supported\n+attributes.\n+\n @item -Wstrict-prototypes @r{(C only)}\n @opindex Wstrict-prototypes\n Warn if a function is declared or defined without specifying the"}, {"sha": "a9bcf444403843a188654c76de5e10d1aa299ccf", "filename": "gcc/java/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fjava%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fjava%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2FChangeLog?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -1,3 +1,8 @@\n+2005-05-25  DJ Delorie  <dj@redhat.com>\n+\n+\t* class.c (set_constant_value): Move warning control from if() to\n+\twarning(OPT_*).\n+\n 2005-05-24  Richard Henderson  <rth@redhat.com>\n \n \t* builtins.c (define_builtin): Don't call make_decl_rtl."}, {"sha": "3e8ae2693d65b607d6ada27c5dbdf563ef017883", "filename": "gcc/java/class.c", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fjava%2Fclass.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fjava%2Fclass.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fjava%2Fclass.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -790,9 +790,11 @@ void\n set_constant_value (tree field, tree constant)\n {\n   if (field == NULL_TREE)\n-    warning (0, \"misplaced ConstantValue attribute (not in any field)\");\n+    warning (OPT_Wattributes,\n+\t     \"misplaced ConstantValue attribute (not in any field)\");\n   else if (DECL_INITIAL (field) != NULL_TREE)\n-    warning (0, \"duplicate ConstantValue attribute for field '%s'\",\n+    warning (OPT_Wattributes,\n+\t     \"duplicate ConstantValue attribute for field '%s'\",\n \t     IDENTIFIER_POINTER (DECL_NAME (field)));\n   else\n     {"}, {"sha": "12581c5072c88e77ea2174eaa5bd1e41c3a6ec52", "filename": "gcc/stor-layout.c", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fstor-layout.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fstor-layout.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fstor-layout.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -851,11 +851,11 @@ place_field (record_layout_info rli, tree field)\n \t  if (TYPE_ALIGN (type) > desired_align)\n \t    {\n \t      if (STRICT_ALIGNMENT)\n-\t\twarning (0, \"%Jpacked attribute causes inefficient alignment \"\n-                         \"for %qD\", field, field);\n+\t\twarning (OPT_Wattributes, \"%Jpacked attribute causes \"\n+                         \"inefficient alignment for %qD\", field, field);\n \t      else\n-\t\twarning (0, \"%Jpacked attribute is unnecessary for %qD\",\n-\t\t\t field, field);\n+\t\twarning (OPT_Wattributes, \"%Jpacked attribute is \"\n+\t\t\t \"unnecessary for %qD\", field, field);\n \t    }\n \t}\n       else\n@@ -1298,17 +1298,19 @@ finalize_record_size (record_layout_info rli)\n \t\tname = IDENTIFIER_POINTER (DECL_NAME (TYPE_NAME (rli->t)));\n \n \t      if (STRICT_ALIGNMENT)\n-\t\twarning (0, \"packed attribute causes inefficient \"\n+\t\twarning (OPT_Wattributes, \"packed attribute causes inefficient \"\n \t\t\t \"alignment for %qs\", name);\n \t      else\n-\t\twarning (0, \"packed attribute is unnecessary for %qs\", name);\n+\t\twarning (OPT_Wattributes,\n+\t\t\t \"packed attribute is unnecessary for %qs\", name);\n \t    }\n \t  else\n \t    {\n \t      if (STRICT_ALIGNMENT)\n-\t\twarning (0, \"packed attribute causes inefficient alignment\");\n+\t\twarning (OPT_Wattributes,\n+\t\t\t \"packed attribute causes inefficient alignment\");\n \t      else\n-\t\twarning (0, \"packed attribute is unnecessary\");\n+\t\twarning (OPT_Wattributes, \"packed attribute is unnecessary\");\n \t    }\n \t}\n     }"}, {"sha": "9adf65f10858f2a67db00b517eafec774cf275cf", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -1,3 +1,9 @@\n+2005-05-25  DJ Delorie  <dj@redhat.com>\n+\n+\t* gcc.dg/Wattributes-1.c: New.\n+\t* gcc.dg/Wattributes-2.c: New.\n+\t* gcc.dg/Wattributes-3.c: New.\n+\n 20005-05-24  Janis Johnson  <janis187@us.ibm.com>\n \n \tPR tree-optimization/19833"}, {"sha": "29e07e412759f9af7b5eb49123fd1f73129485ac", "filename": "gcc/testsuite/gcc.dg/Wattributes-1.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-1.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-1.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-1.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options -Wattributes } */\n+\n+void __attribute__((dj)) foo() { }\t/* { dg-warning \"attribute directive ignored\" } */\n+\n+int j __attribute__((unrecognized));\t/* { dg-warning \"attribute directive ignored\" } */"}, {"sha": "6918704202d6fb7e7bf744b246ae9a51c21f8b8f", "filename": "gcc/testsuite/gcc.dg/Wattributes-2.c", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-2.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -0,0 +1,6 @@\n+/* { dg-do compile } */\n+/* { dg-options -Wno-attributes } */\n+\n+void __attribute__((dj)) foo() { }\t/* { dg-bogus \"attribute directive ignored\" } */\n+\n+int j __attribute__((unrecognized));\t/* { dg-bogus \"attribute directive ignored\" } */"}, {"sha": "59d14c7b926b3493fd4b58a1690326272e5ab882", "filename": "gcc/testsuite/gcc.dg/Wattributes-3.c", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-3.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-3.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fgcc.dg%2FWattributes-3.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -0,0 +1,5 @@\n+/* { dg-do compile } */\n+\n+void __attribute__((dj)) foo() { }\t/* { dg-warning \"attribute directive ignored\" } */\n+\n+int j __attribute__((unrecognized));\t/* { dg-warning \"attribute directive ignored\" } */"}, {"sha": "9b45e0a3a5aaa05dc76fa98e98f33a7be1609243", "filename": "gcc/tree.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Ftree.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Ftree.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftree.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -3270,7 +3270,8 @@ handle_dll_attribute (tree * pnode, tree name, tree args, int flags,\n \t}\n       if (TREE_CODE (node) != RECORD_TYPE && TREE_CODE (node) != UNION_TYPE)\n \t{\n-\t  warning (0, \"%qs attribute ignored\", IDENTIFIER_POINTER (name));\n+\t  warning (OPT_Wattributes, \"%qs attribute ignored\",\n+\t\t   IDENTIFIER_POINTER (name));\n \t  *no_add_attrs = true;\n \t}\n "}, {"sha": "8192a7a5981b86b4967175bb1877385b9a124da9", "filename": "gcc/varasm.c", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fvarasm.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/5c498b10af2cf068e55361f7b2915c799f2508d3/gcc%2Fvarasm.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fvarasm.c?ref=5c498b10af2cf068e55361f7b2915c799f2508d3", "patch": "@@ -4689,7 +4689,8 @@ default_assemble_visibility (tree decl, int vis)\n   assemble_name (asm_out_file, name);\n   fprintf (asm_out_file, \"\\n\");\n #else\n-  warning (0, \"visibility attribute not supported in this configuration; ignored\");\n+  warning (OPT_Wattributes, \"visibility attribute not supported \"\n+\t   \"in this configuration; ignored\");\n #endif\n }\n "}]}