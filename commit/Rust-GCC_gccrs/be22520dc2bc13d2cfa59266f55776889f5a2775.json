{"sha": "be22520dc2bc13d2cfa59266f55776889f5a2775", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6YmUyMjUyMGRjMmJjMTNkMmNmYTU5MjY2ZjU1Nzc2ODg5ZjVhMjc3NQ==", "commit": {"author": {"name": "Dodji Seketeli", "email": "dodji@redhat.com", "date": "2012-11-13T16:07:39Z"}, "committer": {"name": "Dodji Seketeli", "email": "dodji@gcc.gnu.org", "date": "2012-11-13T16:07:39Z"}, "message": "PR c++/54466 - ICE with alias template which type-id is const qualified\n\nConsider this short example:\n\n    template<typename T>\n      struct X { };\n\n    template<typename T>\n      using Y = const X<T>;\n\n    using Z = Y<int>;\n\nG++ crashes in lookup_class_template_1 while trying to build the alias\ntemplate instantiation Y<int>.\n\nI think this is indirectly due to the fact that that\nlookup_class_template_1 can now yield a const qualified type like\n'const X<T>'.\n\nAs a consequence, the code in lookup_template_class_1 that was trying\nto access the TYPE_STUB_DECL field of the result of\nlookup_template_class_1 should now be adjusted to access the\nTYPE_STUB_DECL of the main variant of the resulting type instead (and\nthat is TYPE_MAIN_DECL); because qualified types (constructed with\nbuild_qualified_type) have their TYPE_STUB_DECL set to NULL.\n\nFixed thus and tested on x86_64-unknown-linux-gnu against trunk.\n\ngcc/cp\n\n\tPR c++/54466\n\t* pt.c (lookup_template_class_1): TYPE_STUB_DECL should be\n\taccessed on the main variant of the type.\n\ngcc/testsuite/\n\n\t* g++.dg/cpp0x/alias-decl-26.C: New test file.\n\nIn the example of this patch, g++ crashes when trying to build the\nalias template Y<int\n\nFrom-SVN: r193479", "tree": {"sha": "ec9c5e766874a50e7788247a78b4d686f70b0720", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/ec9c5e766874a50e7788247a78b4d686f70b0720"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/be22520dc2bc13d2cfa59266f55776889f5a2775", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be22520dc2bc13d2cfa59266f55776889f5a2775", "html_url": "https://github.com/Rust-GCC/gccrs/commit/be22520dc2bc13d2cfa59266f55776889f5a2775", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/be22520dc2bc13d2cfa59266f55776889f5a2775/comments", "author": null, "committer": null, "parents": [{"sha": "d6531d8364a6dc74c61462743c52dc6275d54beb", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d6531d8364a6dc74c61462743c52dc6275d54beb", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d6531d8364a6dc74c61462743c52dc6275d54beb"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "0f23cbca9b7c4ba9238e00862787f07adcf8939e", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be22520dc2bc13d2cfa59266f55776889f5a2775/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be22520dc2bc13d2cfa59266f55776889f5a2775/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=be22520dc2bc13d2cfa59266f55776889f5a2775", "patch": "@@ -1,3 +1,9 @@\n+2012-11-13  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/54466\n+\t* pt.c (lookup_template_class_1): TYPE_STUB_DECL should be\n+\taccessed on the main variant of the type.\n+\n 2012-11-12  Ed Smith-Rowland  <3dw4rd@verizon.net>\n \n \t* parser.c (cp_parser_objc_class_ivars):"}, {"sha": "802c79b875579ef9f7c5d80732bc27a7eed2aac3", "filename": "gcc/cp/pt.c", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be22520dc2bc13d2cfa59266f55776889f5a2775/gcc%2Fcp%2Fpt.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be22520dc2bc13d2cfa59266f55776889f5a2775/gcc%2Fcp%2Fpt.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fpt.c?ref=be22520dc2bc13d2cfa59266f55776889f5a2775", "patch": "@@ -7372,9 +7372,9 @@ lookup_template_class_1 (tree d1, tree arglist, tree in_decl, tree context,\n       if (CLASS_TYPE_P (template_type))\n \t{\n \t  TREE_PRIVATE (type_decl)\n-\t    = TREE_PRIVATE (TYPE_STUB_DECL (template_type));\n+\t    = TREE_PRIVATE (TYPE_MAIN_DECL (template_type));\n \t  TREE_PROTECTED (type_decl)\n-\t    = TREE_PROTECTED (TYPE_STUB_DECL (template_type));\n+\t    = TREE_PROTECTED (TYPE_MAIN_DECL (template_type));\n \t  if (CLASSTYPE_VISIBILITY_SPECIFIED (template_type))\n \t    {\n \t      DECL_VISIBILITY_SPECIFIED (type_decl) = 1;"}, {"sha": "e82a88fb9a9e0616a487351c1711b90d5ff3a808", "filename": "gcc/testsuite/ChangeLog", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be22520dc2bc13d2cfa59266f55776889f5a2775/gcc%2Ftestsuite%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be22520dc2bc13d2cfa59266f55776889f5a2775/gcc%2Ftestsuite%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2FChangeLog?ref=be22520dc2bc13d2cfa59266f55776889f5a2775", "patch": "@@ -1,3 +1,8 @@\n+2012-11-13  Dodji Seketeli  <dodji@redhat.com>\n+\n+\tPR c++/54466\n+\t* g++.dg/cpp0x/alias-decl-26.C: New test file.\n+\n 2012-11-13  H.J. Lu  <hongjiu.lu@intel.com>\n \n \t* gcc.target/i386/avx256-unaligned-load-2.c: Requre !ia32"}, {"sha": "dd4cc0286a11bfc35d2f4e86984d00475e409e6a", "filename": "gcc/testsuite/g++.dg/cpp0x/alias-decl-26.C", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/be22520dc2bc13d2cfa59266f55776889f5a2775/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-26.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/be22520dc2bc13d2cfa59266f55776889f5a2775/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-26.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Falias-decl-26.C?ref=be22520dc2bc13d2cfa59266f55776889f5a2775", "patch": "@@ -0,0 +1,10 @@\n+// Origin: PR c++/54466\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T>\n+  struct X { };\n+\n+template<typename T>\n+  using Y = const X<T>;\n+\n+using Z = Y<int>;"}]}