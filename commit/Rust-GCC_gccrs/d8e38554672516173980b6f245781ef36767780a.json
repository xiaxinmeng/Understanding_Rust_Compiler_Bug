{"sha": "d8e38554672516173980b6f245781ef36767780a", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ZDhlMzg1NTQ2NzI1MTYxNzM5ODBiNmYyNDU3ODFlZjM2NzY3NzgwYQ==", "commit": {"author": {"name": "Eric Botcazou", "email": "ebotcazou@adacore.com", "date": "2011-09-11T18:28:05Z"}, "committer": {"name": "Eric Botcazou", "email": "ebotcazou@gcc.gnu.org", "date": "2011-09-11T18:28:05Z"}, "message": "trans.c (build_return_expr): Use void_type_node for MODIFY_EXPR.\n\n\t* gcc-interface/trans.c (build_return_expr): Use void_type_node for\n\tMODIFY_EXPR.\n\t* gcc-interface/utils2.c (build_binary_op) <MODIFY_EXPR>: Assert that\n\tthe result type is null if ENABLE_CHECKING.  Set operation_type at the\n\tend unconditionally if not set in the previous cases.\n\tUse build2 and void_type_node for MODIFY_EXPR.\n\t(build_allocator): Use NULL_TREE for MODIFY_EXPR.\n\nFrom-SVN: r178761", "tree": {"sha": "687bf8a11600a3aefc37f9c57880e09c771778f0", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/687bf8a11600a3aefc37f9c57880e09c771778f0"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/d8e38554672516173980b6f245781ef36767780a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e38554672516173980b6f245781ef36767780a", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d8e38554672516173980b6f245781ef36767780a", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d8e38554672516173980b6f245781ef36767780a/comments", "author": null, "committer": null, "parents": [{"sha": "bf0b8cbee52bf89f558d515a05b2fa5d03e9080d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/bf0b8cbee52bf89f558d515a05b2fa5d03e9080d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/bf0b8cbee52bf89f558d515a05b2fa5d03e9080d"}], "stats": {"total": 28, "additions": 22, "deletions": 6}, "files": [{"sha": "259677a5e38c0630321a95fdf6b442ceb3027382", "filename": "gcc/ada/ChangeLog", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e38554672516173980b6f245781ef36767780a/gcc%2Fada%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e38554672516173980b6f245781ef36767780a/gcc%2Fada%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2FChangeLog?ref=d8e38554672516173980b6f245781ef36767780a", "patch": "@@ -1,3 +1,13 @@\n+2011-09-11  Eric Botcazou  <ebotcazou@adacore.com>\n+\n+\t* gcc-interface/trans.c (build_return_expr): Use void_type_node for\n+\tMODIFY_EXPR.\n+\t* gcc-interface/utils2.c (build_binary_op) <MODIFY_EXPR>: Assert that\n+\tthe result type is null if ENABLE_CHECKING.  Set operation_type at the\n+\tend unconditionally if not set in the previous cases.\n+\tUse build2 and void_type_node for MODIFY_EXPR.\n+\t(build_allocator): Use NULL_TREE for MODIFY_EXPR.\n+\n 2011-09-08  Eric Botcazou  <ebotcazou@adacore.com>\n \n \t* gcc-interface/utils.c (unchecked_convert): Use a field of the right"}, {"sha": "b831918e274a7370ada3bea760366c3e7e591065", "filename": "gcc/ada/gcc-interface/trans.c", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e38554672516173980b6f245781ef36767780a/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e38554672516173980b6f245781ef36767780a/gcc%2Fada%2Fgcc-interface%2Ftrans.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Ftrans.c?ref=d8e38554672516173980b6f245781ef36767780a", "patch": "@@ -2482,7 +2482,7 @@ build_return_expr (tree ret_obj, tree ret_val)\n       if (operation_type != TREE_TYPE (ret_val))\n \tret_val = convert (operation_type, ret_val);\n \n-      result_expr = build2 (MODIFY_EXPR, operation_type, ret_obj, ret_val);\n+      result_expr = build2 (MODIFY_EXPR, void_type_node, ret_obj, ret_val);\n     }\n   else\n     result_expr = ret_obj;"}, {"sha": "977f881949a7939b58bcd5e22cf1408362106913", "filename": "gcc/ada/gcc-interface/utils2.c", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/d8e38554672516173980b6f245781ef36767780a/gcc%2Fada%2Fgcc-interface%2Futils2.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/d8e38554672516173980b6f245781ef36767780a/gcc%2Fada%2Fgcc-interface%2Futils2.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgcc-interface%2Futils2.c?ref=d8e38554672516173980b6f245781ef36767780a", "patch": "@@ -518,8 +518,9 @@ nonbinary_modular_operation (enum tree_code op_code, tree type, tree lhs,\n \f\n /* Make a binary operation of kind OP_CODE.  RESULT_TYPE is the type\n    desired for the result.  Usually the operation is to be performed\n-   in that type.  For MODIFY_EXPR and ARRAY_REF, RESULT_TYPE may be 0\n-   in which case the type to be used will be derived from the operands.\n+   in that type.  For INIT_EXPR and MODIFY_EXPR, RESULT_TYPE must be\n+   NULL_TREE.  For ARRAY_REF, RESULT_TYPE may be NULL_TREE, in which\n+   case the type to be used will be derived from the operands.\n \n    This function is very much unlike the ones for C and C++ since we\n    have already done any type conversion and matching required.  All we\n@@ -557,6 +558,9 @@ build_binary_op (enum tree_code op_code, tree result_type,\n     {\n     case INIT_EXPR:\n     case MODIFY_EXPR:\n+#ifdef ENABLE_CHECKING\n+      gcc_assert (result_type == NULL_TREE);\n+#endif\n       /* If there were integral or pointer conversions on the LHS, remove\n \t them; we'll be putting them back below if needed.  Likewise for\n \t conversions between array and record types, except for justified\n@@ -633,7 +637,7 @@ build_binary_op (enum tree_code op_code, tree result_type,\n \toperation_type = best_type;\n \n       /* Otherwise use the LHS type.  */\n-      else if (!operation_type)\n+      else\n \toperation_type = left_type;\n \n       /* Ensure everything on the LHS is valid.  If we have a field reference,\n@@ -955,6 +959,8 @@ build_binary_op (enum tree_code op_code, tree result_type,\n   else if (op_code == ARRAY_REF || op_code == ARRAY_RANGE_REF)\n     result = fold (build4 (op_code, operation_type, left_operand,\n \t\t\t   right_operand, NULL_TREE, NULL_TREE));\n+  else if (op_code == INIT_EXPR || op_code == MODIFY_EXPR)\n+    result = build2 (op_code, void_type_node, left_operand, right_operand);\n   else\n     result\n       = fold_build2 (op_code, operation_type, left_operand, right_operand);\n@@ -2114,7 +2120,7 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n \t    (result_type,\n \t     build2 (COMPOUND_EXPR, storage_ptr_type,\n \t\t     build_binary_op\n-\t\t     (MODIFY_EXPR, storage_type,\n+\t\t     (MODIFY_EXPR, NULL_TREE,\n \t\t      build_unary_op (INDIRECT_REF, NULL_TREE,\n \t\t\t\t      convert (storage_ptr_type, storage)),\n \t\t      gnat_build_constructor (storage_type, v)),\n@@ -2124,7 +2130,7 @@ build_allocator (tree type, tree init, tree result_type, Entity_Id gnat_proc,\n \treturn build2\n \t  (COMPOUND_EXPR, result_type,\n \t   build_binary_op\n-\t   (MODIFY_EXPR, template_type,\n+\t   (MODIFY_EXPR, NULL_TREE,\n \t    build_component_ref\n \t    (build_unary_op (INDIRECT_REF, NULL_TREE,\n \t\t\t     convert (storage_ptr_type, storage)),"}]}