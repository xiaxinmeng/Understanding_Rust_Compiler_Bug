{"sha": "e79b45ef0adb26d13923d8a1632ab81171f72255", "node_id": "C_kwDOANBUbNoAKGU3OWI0NWVmMGFkYjI2ZDEzOTIzZDhhMTYzMmFiODExNzFmNzIyNTU", "commit": {"author": {"name": "Piotr Trojanek", "email": "trojanek@adacore.com", "date": "2022-02-04T08:47:27Z"}, "committer": {"name": "Pierre-Marie de Rodat", "email": "derodat@adacore.com", "date": "2022-05-11T08:53:21Z"}, "message": "[Ada] Fix unbalanced paren in documentation marker for GNAT Studio\n\nUnbalanced parens can be found when editing in emacs using the\n\"check-parens\" command. Offending occurrences must be examined manually,\nbecause few of them are intentional.\n\nMinor cleanup of typos in documentation.\n\ngcc/ada/\n\n\t* doc/gnat_rm/implementation_defined_pragmas.rst,\n\tdoc/gnat_rm/implementation_of_specific_ada_features.rst,\n\tdoc/gnat_rm/representation_clauses_and_pragmas.rst,\n\tdoc/gnat_rm/the_gnat_library.rst,\n\tdoc/gnat_rm/the_implementation_of_standard_i_o.rst,\n\tdoc/gnat_ugn/building_executable_programs_with_gnat.rst,\n\tdoc/gnat_ugn/gnat_and_program_execution.rst,\n\tdoc/gnat_ugn/platform_specific_information.rst: Fix unbalanced\n\tparentheses and brackets.\n\t* sem_prag.adb (pragma Obsolescent): Likewise.\n\t* gnat_rm.texi, gnat_ugn.texi: Regenerate.", "tree": {"sha": "98a19fad6ab63e7d97219a651b70fb763168b34d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/98a19fad6ab63e7d97219a651b70fb763168b34d"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/e79b45ef0adb26d13923d8a1632ab81171f72255", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79b45ef0adb26d13923d8a1632ab81171f72255", "html_url": "https://github.com/Rust-GCC/gccrs/commit/e79b45ef0adb26d13923d8a1632ab81171f72255", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/e79b45ef0adb26d13923d8a1632ab81171f72255/comments", "author": {"login": "ptroja", "id": 161602, "node_id": "MDQ6VXNlcjE2MTYwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/161602?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ptroja", "html_url": "https://github.com/ptroja", "followers_url": "https://api.github.com/users/ptroja/followers", "following_url": "https://api.github.com/users/ptroja/following{/other_user}", "gists_url": "https://api.github.com/users/ptroja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ptroja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ptroja/subscriptions", "organizations_url": "https://api.github.com/users/ptroja/orgs", "repos_url": "https://api.github.com/users/ptroja/repos", "events_url": "https://api.github.com/users/ptroja/events{/privacy}", "received_events_url": "https://api.github.com/users/ptroja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pmderodat", "id": 758452, "node_id": "MDQ6VXNlcjc1ODQ1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/758452?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pmderodat", "html_url": "https://github.com/pmderodat", "followers_url": "https://api.github.com/users/pmderodat/followers", "following_url": "https://api.github.com/users/pmderodat/following{/other_user}", "gists_url": "https://api.github.com/users/pmderodat/gists{/gist_id}", "starred_url": "https://api.github.com/users/pmderodat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pmderodat/subscriptions", "organizations_url": "https://api.github.com/users/pmderodat/orgs", "repos_url": "https://api.github.com/users/pmderodat/repos", "events_url": "https://api.github.com/users/pmderodat/events{/privacy}", "received_events_url": "https://api.github.com/users/pmderodat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cfd39b0ff56c20db588385ee7be9853278ea142", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4cfd39b0ff56c20db588385ee7be9853278ea142", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4cfd39b0ff56c20db588385ee7be9853278ea142"}], "stats": {"total": 96, "additions": 48, "deletions": 48}, "files": [{"sha": "823db1ca60484983e307dccf13aeaf22745d1333", "filename": "gcc/ada/doc/gnat_rm/implementation_defined_pragmas.rst", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_defined_pragmas.rst?ref=e79b45ef0adb26d13923d8a1632ab81171f72255", "patch": "@@ -508,7 +508,7 @@ applies to both the ``Precondition`` pragma\n and the aspect ``Precondition``. Note that the identifiers for\n pragmas Pre_Class and Post_Class are Pre'Class and Post'Class (not\n Pre_Class and Post_Class), since these pragmas are intended to be\n-identical to the corresponding aspects).\n+identical to the corresponding aspects.\n \n If the policy is ``CHECK``, then assertions are enabled, i.e.\n the corresponding pragma or aspect is activated.\n@@ -1177,7 +1177,7 @@ Syntax:\n \n .. code-block:: ada\n \n-  pragma Contract_Cases ((CONTRACT_CASE {, CONTRACT_CASE));\n+  pragma Contract_Cases (CONTRACT_CASE {, CONTRACT_CASE});\n \n   CONTRACT_CASE ::= CASE_GUARD => CONSEQUENCE\n \n@@ -3261,7 +3261,7 @@ with some extended implementations of this pragma in certain Ada 83\n implementations.  The only difference between pragma ``Interface``\n and pragma ``Import`` is that there is special circuitry to allow\n both pragmas to appear for the same subprogram entity (normally it\n-is illegal to have multiple ``Import`` pragmas. This is useful in\n+is illegal to have multiple ``Import`` pragmas). This is useful in\n maintaining Ada 83/Ada 95 compatibility and is compatible with other\n Ada 83 compilers.\n \n@@ -4275,12 +4275,12 @@ Syntax:\n \n   pragma Obsolescent (\n     [Message =>] static_string_EXPRESSION\n-  [,[Version =>] Ada_05]]);\n+  [,[Version =>] Ada_05]);\n \n   pragma Obsolescent (\n     [Entity  =>] NAME\n   [,[Message =>] static_string_EXPRESSION\n-  [,[Version =>] Ada_05]] );\n+  [,[Version =>] Ada_05]]);\n \n \n This pragma can occur immediately following a declaration of an entity,\n@@ -6134,7 +6134,7 @@ Syntax:\n Use this to override the normal naming convention.  It is a configuration\n pragma, and so has the usual applicability of configuration pragmas\n (i.e., it applies to either an entire partition, or to all units in a\n-compilation, or to a single unit, depending on how it is used.\n+compilation, or to a single unit, depending on how it is used).\n ``unit_name`` is mapped to ``file_name_literal``.  The identifier for\n the second argument is required, and indicates whether this is the file\n name for the spec or for the body.\n@@ -7176,7 +7176,7 @@ for this purpose, see :ref:`Pragma_Obsolescent`.\n The second form of pragma ``Unreferenced`` is used within a context\n clause. In this case the arguments must be unit names of units previously\n mentioned in ``with`` clauses (similar to the usage of pragma\n-``Elaborate_All``. The effect is to suppress warnings about unreferenced\n+``Elaborate_All``). The effect is to suppress warnings about unreferenced\n units and unreferenced entities within these units.\n \n For the variable case, warnings are never given for unreferenced variables"}, {"sha": "5464da3da01dcd294558fb80c72a96ba090a0e8f", "filename": "gcc/ada/doc/gnat_rm/implementation_of_specific_ada_features.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_specific_ada_features.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_specific_ada_features.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fimplementation_of_specific_ada_features.rst?ref=e79b45ef0adb26d13923d8a1632ab81171f72255", "patch": "@@ -402,7 +402,7 @@ routines, since these are architecture independent.\n If active synchronization is required for access to the variables in the\n shared passive package, then as described in the Ada Reference Manual, the\n package may contain protected objects used for this purpose. In this case\n-a lock file (whose name is :file:`___lock` (three underscores)\n+a lock file (whose name is :file:`___lock`, with three underscores)\n is created in the shared memory directory.\n \n .. index:: ___lock file (for shared passive packages)"}, {"sha": "a30ad5f75892e9f7bf713f4e49b3920374200aef", "filename": "gcc/ada/doc/gnat_rm/representation_clauses_and_pragmas.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Frepresentation_clauses_and_pragmas.rst?ref=e79b45ef0adb26d13923d8a1632ab81171f72255", "patch": "@@ -525,7 +525,7 @@ The default rules for the value of ``Value_Size`` are as follows:\n \n *\n   If a subtype statically matches the first subtype of a given type, then it has\n-  by default the same ``Value_Size`` as the first subtype.  This is a\n+  by default the same ``Value_Size`` as the first subtype.  (This is a\n   consequence of RM 13.1(14): \"if two subtypes statically match,\n   then their subtype-specific aspects are the same\".)\n \n@@ -873,7 +873,7 @@ Suppose that we have an external device which presents two bytes, the first\n byte presented, which is the first (low addressed byte) of the two byte\n record is called Master, and the second byte is called Slave.\n \n-The left most (most significant bit is called Control for each byte, and\n+The left most (most significant) bit is called Control for each byte, and\n the remaining 7 bits are called V1, V2, ... V7, where V7 is the rightmost\n (least significant) bit.\n "}, {"sha": "abc848c61e0e9dcd9994e480294b9840f536b19c", "filename": "gcc/ada/doc/gnat_rm/the_gnat_library.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_gnat_library.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_gnat_library.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_gnat_library.rst?ref=e79b45ef0adb26d13923d8a1632ab81171f72255", "patch": "@@ -2177,7 +2177,7 @@ x86, and x86_64 platforms.\n \n This package provides the interface to the low level routines used\n by the generated code for allocation and freeing storage for the\n-default storage pool (analogous to the C routines malloc and free.\n+default storage pool (analogous to the C routines malloc and free).\n It also provides a reallocation interface analogous to the C routine\n realloc. The body of this unit may be modified to provide alternative\n allocation mechanisms for the default pool, and in addition, direct"}, {"sha": "e0b9e0c00d822533712ec1060f67522c4285c856", "filename": "gcc/ada/doc/gnat_rm/the_implementation_of_standard_i_o.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_implementation_of_standard_i_o.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_implementation_of_standard_i_o.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_rm%2Fthe_implementation_of_standard_i_o.rst?ref=e79b45ef0adb26d13923d8a1632ab81171f72255", "patch": "@@ -617,7 +617,7 @@ of stream pointer positioning (:ref:`Text_IO`).  There is one additional\n case:\n \n If ``Ada.Wide_Text_IO.Look_Ahead`` reads a character outside the\n-normal lower ASCII set (i.e., a character in the range:\n+normal lower ASCII set, i.e. a character in the range:\n \n \n .. code-block:: ada\n@@ -761,7 +761,7 @@ of stream pointer positioning (:ref:`Text_IO`).  There is one additional\n case:\n \n If ``Ada.Wide_Wide_Text_IO.Look_Ahead`` reads a character outside the\n-normal lower ASCII set (i.e., a character in the range:\n+normal lower ASCII set, i.e. a character in the range:\n \n \n .. code-block:: ada"}, {"sha": "1dd3162e0d4ef6348bc949e183ca1989734b41c4", "filename": "gcc/ada/doc/gnat_ugn/building_executable_programs_with_gnat.rst", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fbuilding_executable_programs_with_gnat.rst?ref=e79b45ef0adb26d13923d8a1632ab81171f72255", "patch": "@@ -1454,7 +1454,7 @@ Alphabetical List of All Switches\n   Check syntax and semantics only (no code generation attempted). When the\n   compiler is invoked by ``gnatmake``, if the switch :switch:`-gnatc` is\n   only given to the compiler (after :switch:`-cargs` or in package Compiler of\n-  the project file, ``gnatmake`` will fail because it will not find the\n+  the project file), ``gnatmake`` will fail because it will not find the\n   object file after compilation. If ``gnatmake`` is called with\n   :switch:`-gnatc` as a builder switch (before :switch:`-cargs` or in package\n   Builder of the project file) then ``gnatmake`` will not fail because\n@@ -1786,7 +1786,7 @@ Alphabetical List of All Switches\n \n \n   where ``name`` is the string name of the type (which can have\n-  single spaces embedded in the name (e.g. long double), ``digs`` is\n+  single spaces embedded in the name, e.g. long double), ``digs`` is\n   the number of digits for the floating-point type, ``float_rep`` is\n   the float representation (I for IEEE-754-Binary, which is\n   the only one supported at this time),\n@@ -2389,7 +2389,7 @@ format:\n :switch:`-gnatv`\n   The ``v`` stands for verbose.\n   The effect of this setting is to write long-format error\n-  messages to :file:`stdout` (the standard output file.\n+  messages to :file:`stdout` (the standard output file).\n   The same program compiled with the\n   :switch:`-gnatv` switch would generate:\n \n@@ -2489,7 +2489,7 @@ format:\n   brief format error messages to :file:`stderr` (the standard error\n   file) as well as the verbose\n   format message or full listing (which as usual is written to\n-  :file:`stdout` (the standard output file).\n+  :file:`stdout`, the standard output file).\n \n \n .. index:: -gnatm  (gcc)\n@@ -5165,7 +5165,7 @@ checks to be performed. The following checks are defined:\n \n \n .. end of switch description (leave this comment to ease automatic parsing for\n-.. GNAT Studio\n+.. GNAT Studio)\n \n In the above rules, appearing in column one is always permitted, that is,\n counts as meeting either a requirement for a required preceding space,\n@@ -7618,9 +7618,9 @@ which might help you in case your project has a lot of subdirectories.\n   ##    Each of these csc is put in its own directory.\n   ##    Their name are referenced by the directory names.\n   ##    They will be compiled into shared library (although this would also work\n-  ##    with static libraries\n+  ##    with static libraries)\n   ##  - The main program (and possibly other packages that do not belong to any\n-  ##    csc is put in the top level directory (where the Makefile is).\n+  ##    csc) is put in the top level directory (where the Makefile is).\n   ##       toplevel_dir __ first_csc  (sources) __ lib (will contain the library)\n   ##                    \\\\_ second_csc (sources) __ lib (will contain the library)\n   ##                    \\\\_ ..."}, {"sha": "610415299d38b2d4a37a0ca290fdbadbc714fefc", "filename": "gcc/ada/doc/gnat_ugn/gnat_and_program_execution.rst", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fgnat_and_program_execution.rst?ref=e79b45ef0adb26d13923d8a1632ab81171f72255", "patch": "@@ -1494,7 +1494,7 @@ Use of Restrictions\n The use of pragma Restrictions allows you to control which features are\n permitted in your program. Apart from the obvious point that if you avoid\n relatively expensive features like finalization (enforceable by the use\n-of pragma Restrictions (No_Finalization), the use of this pragma does not\n+of pragma Restrictions (No_Finalization)), the use of this pragma does not\n affect the generated code in most cases.\n \n One notable exception to this rule is that the possibility of task abort\n@@ -2452,7 +2452,7 @@ If ``Text_IO`` must be used, note that by default output to the standard\n output and standard error files is unbuffered (this provides better\n behavior when output statements are used for debugging, or if the\n progress of a program is observed by tracking the output, e.g. by\n-using the Unix *tail -f* command to watch redirected output.\n+using the Unix *tail -f* command to watch redirected output).\n \n If you are generating large volumes of output with ``Text_IO`` and\n performance is an important factor, use a designated file instead"}, {"sha": "4d25dea3d1e784a3dc472279a763031702234245", "filename": "gcc/ada/doc/gnat_ugn/platform_specific_information.rst", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fdoc%2Fgnat_ugn%2Fplatform_specific_information.rst?ref=e79b45ef0adb26d13923d8a1632ab81171f72255", "patch": "@@ -1719,7 +1719,7 @@ is\n :switch:`-k`\n   Kill :samp:`@{nn}` from exported names\n   (:ref:`Windows_Calling_Conventions`\n-  for a discussion about ``Stdcall``-style symbols.\n+  for a discussion about ``Stdcall``-style symbols).\n \n \n .. index:: --help (dlltool)"}, {"sha": "a002498161d175363a38679e7262a4952ea465ad", "filename": "gcc/ada/gnat_rm.texi", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fgnat_rm.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fgnat_rm.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_rm.texi?ref=e79b45ef0adb26d13923d8a1632ab81171f72255", "patch": "@@ -1895,7 +1895,7 @@ applies to both the @code{Precondition} pragma\n and the aspect @code{Precondition}. Note that the identifiers for\n pragmas Pre_Class and Post_Class are Pre\u2019Class and Post\u2019Class (not\n Pre_Class and Post_Class), since these pragmas are intended to be\n-identical to the corresponding aspects).\n+identical to the corresponding aspects.\n \n If the policy is @code{CHECK}, then assertions are enabled, i.e.\n the corresponding pragma or aspect is activated.\n@@ -2583,7 +2583,7 @@ For the semantics of this pragma, see the entry for aspect\n Syntax:\n \n @example\n-pragma Contract_Cases ((CONTRACT_CASE @{, CONTRACT_CASE));\n+pragma Contract_Cases (CONTRACT_CASE @{, CONTRACT_CASE@});\n \n CONTRACT_CASE ::= CASE_GUARD => CONSEQUENCE\n \n@@ -4749,7 +4749,7 @@ with some extended implementations of this pragma in certain Ada 83\n implementations.  The only difference between pragma @code{Interface}\n and pragma @code{Import} is that there is special circuitry to allow\n both pragmas to appear for the same subprogram entity (normally it\n-is illegal to have multiple @code{Import} pragmas. This is useful in\n+is illegal to have multiple @code{Import} pragmas). This is useful in\n maintaining Ada 83/Ada 95 compatibility and is compatible with other\n Ada 83 compilers.\n \n@@ -5802,12 +5802,12 @@ pragma Obsolescent;\n \n pragma Obsolescent (\n   [Message =>] static_string_EXPRESSION\n-[,[Version =>] Ada_05]]);\n+[,[Version =>] Ada_05]);\n \n pragma Obsolescent (\n   [Entity  =>] NAME\n [,[Message =>] static_string_EXPRESSION\n-[,[Version =>] Ada_05]] );\n+[,[Version =>] Ada_05]]);\n @end example\n \n This pragma can occur immediately following a declaration of an entity,\n@@ -7693,7 +7693,7 @@ pragma Source_File_Name (\n Use this to override the normal naming convention.  It is a configuration\n pragma, and so has the usual applicability of configuration pragmas\n (i.e., it applies to either an entire partition, or to all units in a\n-compilation, or to a single unit, depending on how it is used.\n+compilation, or to a single unit, depending on how it is used).\n @code{unit_name} is mapped to @code{file_name_literal}.  The identifier for\n the second argument is required, and indicates whether this is the file\n name for the spec or for the body.\n@@ -8716,7 +8716,7 @@ for this purpose, see @ref{ac,,Pragma Obsolescent}.\n The second form of pragma @code{Unreferenced} is used within a context\n clause. In this case the arguments must be unit names of units previously\n mentioned in @code{with} clauses (similar to the usage of pragma\n-@code{Elaborate_All}. The effect is to suppress warnings about unreferenced\n+@code{Elaborate_All}). The effect is to suppress warnings about unreferenced\n units and unreferenced entities within these units.\n \n For the variable case, warnings are never given for unreferenced variables\n@@ -18987,7 +18987,7 @@ only if negative values are possible).\n \n @item \n If a subtype statically matches the first subtype of a given type, then it has\n-by default the same @code{Value_Size} as the first subtype.  This is a\n+by default the same @code{Value_Size} as the first subtype.  (This is a\n consequence of RM 13.1(14): \u201cif two subtypes statically match,\n then their subtype-specific aspects are the same\u201d.)\n \n@@ -19421,7 +19421,7 @@ Suppose that we have an external device which presents two bytes, the first\n byte presented, which is the first (low addressed byte) of the two byte\n record is called Master, and the second byte is called Slave.\n \n-The left most (most significant bit is called Control for each byte, and\n+The left most (most significant) bit is called Control for each byte, and\n the remaining 7 bits are called V1, V2, \u2026 V7, where V7 is the rightmost\n (least significant) bit.\n \n@@ -22298,7 +22298,7 @@ of stream pointer positioning (@ref{2ad,,Text_IO}).  There is one additional\n case:\n \n If @code{Ada.Wide_Text_IO.Look_Ahead} reads a character outside the\n-normal lower ASCII set (i.e., a character in the range:\n+normal lower ASCII set, i.e. a character in the range:\n \n @example\n Wide_Character'Val (16#0080#) .. Wide_Character'Val (16#FFFF#)\n@@ -22502,7 +22502,7 @@ of stream pointer positioning (@ref{2ad,,Text_IO}).  There is one additional\n case:\n \n If @code{Ada.Wide_Wide_Text_IO.Look_Ahead} reads a character outside the\n-normal lower ASCII set (i.e., a character in the range:\n+normal lower ASCII set, i.e. a character in the range:\n \n @example\n Wide_Wide_Character'Val (16#0080#) .. Wide_Wide_Character'Val (16#10FFFF#)\n@@ -25445,7 +25445,7 @@ x86, and x86_64 platforms.\n \n This package provides the interface to the low level routines used\n by the generated code for allocation and freeing storage for the\n-default storage pool (analogous to the C routines malloc and free.\n+default storage pool (analogous to the C routines malloc and free).\n It also provides a reallocation interface analogous to the C routine\n realloc. The body of this unit may be modified to provide alternative\n allocation mechanisms for the default pool, and in addition, direct\n@@ -26364,7 +26364,7 @@ routines, since these are architecture independent.\n If active synchronization is required for access to the variables in the\n shared passive package, then as described in the Ada Reference Manual, the\n package may contain protected objects used for this purpose. In this case\n-a lock file (whose name is @code{___lock} (three underscores)\n+a lock file (whose name is @code{___lock}, with three underscores)\n is created in the shared memory directory.\n \n @geindex ___lock file (for shared passive packages)"}, {"sha": "cf363c6d868f095612519e83369104f8e5c923c5", "filename": "gcc/ada/gnat_ugn.texi", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fgnat_ugn.texi", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fgnat_ugn.texi", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fgnat_ugn.texi?ref=e79b45ef0adb26d13923d8a1632ab81171f72255", "patch": "@@ -8865,7 +8865,7 @@ Assume no invalid (bad) values except for \u2018Valid attribute use\n Check syntax and semantics only (no code generation attempted). When the\n compiler is invoked by @code{gnatmake}, if the switch @code{-gnatc} is\n only given to the compiler (after @code{-cargs} or in package Compiler of\n-the project file, @code{gnatmake} will fail because it will not find the\n+the project file), @code{gnatmake} will fail because it will not find the\n object file after compilation. If @code{gnatmake} is called with\n @code{-gnatc} as a builder switch (before @code{-cargs} or in package\n Builder of the project file) then @code{gnatmake} will not fail because\n@@ -9281,7 +9281,7 @@ name  digs float_rep size alignment\n @end example\n \n where @code{name} is the string name of the type (which can have\n-single spaces embedded in the name (e.g. long double), @code{digs} is\n+single spaces embedded in the name, e.g. long double), @code{digs} is\n the number of digits for the floating-point type, @code{float_rep} is\n the float representation (I for IEEE-754-Binary, which is\n the only one supported at this time),\n@@ -10217,7 +10217,7 @@ format:\n \n The @code{v} stands for verbose.\n The effect of this setting is to write long-format error\n-messages to @code{stdout} (the standard output file.\n+messages to @code{stdout} (the standard output file).\n The same program compiled with the\n @code{-gnatv} switch would generate:\n \n@@ -10333,7 +10333,7 @@ This switch causes GNAT to generate the\n brief format error messages to @code{stderr} (the standard error\n file) as well as the verbose\n format message or full listing (which as usual is written to\n-@code{stdout} (the standard output file).\n+@code{stdout}, the standard output file).\n @end table\n \n @geindex -gnatm (gcc)\n@@ -13909,7 +13909,7 @@ if any.\n \n @c end of switch description (leave this comment to ease automatic parsing for\n \n-@c GNAT Studio\n+@c GNAT Studio)\n \n In the above rules, appearing in column one is always permitted, that is,\n counts as meeting either a requirement for a required preceding space,\n@@ -17008,9 +17008,9 @@ which might help you in case your project has a lot of subdirectories.\n ##    Each of these csc is put in its own directory.\n ##    Their name are referenced by the directory names.\n ##    They will be compiled into shared library (although this would also work\n-##    with static libraries\n+##    with static libraries)\n ##  - The main program (and possibly other packages that do not belong to any\n-##    csc is put in the top level directory (where the Makefile is).\n+##    csc) is put in the top level directory (where the Makefile is).\n ##       toplevel_dir __ first_csc  (sources) __ lib (will contain the library)\n ##                    \\\\_ second_csc (sources) __ lib (will contain the library)\n ##                    \\\\_ ...\n@@ -19770,7 +19770,7 @@ checks) in the program source.\n The use of pragma Restrictions allows you to control which features are\n permitted in your program. Apart from the obvious point that if you avoid\n relatively expensive features like finalization (enforceable by the use\n-of pragma Restrictions (No_Finalization), the use of this pragma does not\n+of pragma Restrictions (No_Finalization)), the use of this pragma does not\n affect the generated code in most cases.\n \n One notable exception to this rule is that the possibility of task abort\n@@ -20844,7 +20844,7 @@ If @code{Text_IO} must be used, note that by default output to the standard\n output and standard error files is unbuffered (this provides better\n behavior when output statements are used for debugging, or if the\n progress of a program is observed by tracking the output, e.g. by\n-using the Unix @emph{tail -f} command to watch redirected output.\n+using the Unix @emph{tail -f} command to watch redirected output).\n \n If you are generating large volumes of output with @code{Text_IO} and\n performance is an important factor, use a designated file instead\n@@ -24424,7 +24424,7 @@ DLL in the static import library generated by @code{dlltool} with switch\n \n Kill @code{@@@emph{nn}} from exported names\n (@ref{1d2,,Windows Calling Conventions}\n-for a discussion about @code{Stdcall}-style symbols.\n+for a discussion about @code{Stdcall}-style symbols).\n @end table\n \n @geindex --help (dlltool)"}, {"sha": "7e13d4933bd40f18e8de2ab1df89afe68b5aaf13", "filename": "gcc/ada/sem_prag.adb", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fsem_prag.adb", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/e79b45ef0adb26d13923d8a1632ab81171f72255/gcc%2Fada%2Fsem_prag.adb", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fada%2Fsem_prag.adb?ref=e79b45ef0adb26d13923d8a1632ab81171f72255", "patch": "@@ -20381,12 +20381,12 @@ package body Sem_Prag is\n \n          --  pragma Obsolescent (\n          --    [Message =>] static_string_EXPRESSION\n-         --  [,[Version =>] Ada_05]]);\n+         --  [,[Version =>] Ada_05]);\n \n          --  pragma Obsolescent (\n          --    [Entity  =>] NAME\n          --  [,[Message =>] static_string_EXPRESSION\n-         --  [,[Version =>] Ada_05]] );\n+         --  [,[Version =>] Ada_05]]);\n \n          when Pragma_Obsolescent => Obsolescent : declare\n             Decl  : Node_Id;"}]}