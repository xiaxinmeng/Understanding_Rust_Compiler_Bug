{"sha": "04b89192ace3a766a17374d5bef8fb19d9be2d7c", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6MDRiODkxOTJhY2UzYTc2NmExNzM3NGQ1YmVmOGZiMTlkOWJlMmQ3Yw==", "commit": {"author": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-05T21:39:19Z"}, "committer": {"name": "Jason Merrill", "email": "jason@redhat.com", "date": "2020-05-05T21:39:31Z"}, "message": "c++: constexpr and lambda capture [PR90212]\n\nThis is the same issue as PR86429, just in potential_constant_expression_1\nrather than cxx_eval_constant_expression.  As in that case, when we're\ntrying to evaluate a constant expression within a lambda, we don't have a\nconstant closure object to refer to, but we can try to refer directly to the\ncaptured variable.\n\ngcc/cp/ChangeLog\n2020-05-05  Jason Merrill  <jason@redhat.com>\n\n\tPR c++/90212\n\t* constexpr.c (potential_constant_expression_1): In a lambda\n\tfunction, consider a captured variable directly.", "tree": {"sha": "5311f78e69d7c223b1fbbee8f33d64a0f3a351f3", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/5311f78e69d7c223b1fbbee8f33d64a0f3a351f3"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/04b89192ace3a766a17374d5bef8fb19d9be2d7c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b89192ace3a766a17374d5bef8fb19d9be2d7c", "html_url": "https://github.com/Rust-GCC/gccrs/commit/04b89192ace3a766a17374d5bef8fb19d9be2d7c", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/04b89192ace3a766a17374d5bef8fb19d9be2d7c/comments", "author": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jicama", "id": 266146, "node_id": "MDQ6VXNlcjI2NjE0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/266146?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jicama", "html_url": "https://github.com/jicama", "followers_url": "https://api.github.com/users/jicama/followers", "following_url": "https://api.github.com/users/jicama/following{/other_user}", "gists_url": "https://api.github.com/users/jicama/gists{/gist_id}", "starred_url": "https://api.github.com/users/jicama/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jicama/subscriptions", "organizations_url": "https://api.github.com/users/jicama/orgs", "repos_url": "https://api.github.com/users/jicama/repos", "events_url": "https://api.github.com/users/jicama/events{/privacy}", "received_events_url": "https://api.github.com/users/jicama/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0aed8d5ba77e0756f3c9ebcd65eba1bfb11f24b", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/d0aed8d5ba77e0756f3c9ebcd65eba1bfb11f24b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/d0aed8d5ba77e0756f3c9ebcd65eba1bfb11f24b"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "71ca21f24e45887aa64876aa699babf189483df0", "filename": "gcc/cp/ChangeLog", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b89192ace3a766a17374d5bef8fb19d9be2d7c/gcc%2Fcp%2FChangeLog", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b89192ace3a766a17374d5bef8fb19d9be2d7c/gcc%2Fcp%2FChangeLog", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2FChangeLog?ref=04b89192ace3a766a17374d5bef8fb19d9be2d7c", "patch": "@@ -1,3 +1,9 @@\n+2020-05-05  Jason Merrill  <jason@redhat.com>\n+\n+\tPR c++/90212\n+\t* constexpr.c (potential_constant_expression_1): In a lambda\n+\tfunction, consider a captured variable directly.\n+\n 2020-05-05  Iain Sandoe  <iain@sandoe.co.uk>\n \n \t* coroutines.cc (transform_await_wrapper): Check that we have"}, {"sha": "706d8a13d8ef4879d5ee58db315b7b8c9236e6e1", "filename": "gcc/cp/constexpr.c", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b89192ace3a766a17374d5bef8fb19d9be2d7c/gcc%2Fcp%2Fconstexpr.c", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b89192ace3a766a17374d5bef8fb19d9be2d7c/gcc%2Fcp%2Fconstexpr.c", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fcp%2Fconstexpr.c?ref=04b89192ace3a766a17374d5bef8fb19d9be2d7c", "patch": "@@ -7520,12 +7520,18 @@ potential_constant_expression_1 (tree t, bool want_rval, bool strict, bool now,\n \t\t variable with automatic storage duration defined outside that\n \t\t lambda-expression, where the reference would be an\n \t\t odr-use.  */\n+\n+\t      if (want_rval)\n+\t\t/* Since we're doing an lvalue-rvalue conversion, this might\n+\t\t   not be an odr-use, so evaluate the variable directly. */\n+\t\treturn RECUR (DECL_CAPTURED_VARIABLE (t), rval);\n+\n \t      if (flags & tf_error)\n \t\t{\n \t\t  tree cap = DECL_CAPTURED_VARIABLE (t);\n \t\t  error (\"lambda capture of %qE is not a constant expression\",\n \t\t\t cap);\n-\t\t  if (!want_rval && decl_constant_var_p (cap))\n+\t\t  if (decl_constant_var_p (cap))\n \t\t    inform (input_location, \"because it is used as a glvalue\");\n \t\t}\n \t      return false;"}, {"sha": "b1982ab050633c2780f135c9787b865a33655b39", "filename": "gcc/testsuite/g++.dg/cpp0x/lambda/lambda-constexpr2.C", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/04b89192ace3a766a17374d5bef8fb19d9be2d7c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-constexpr2.C", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/04b89192ace3a766a17374d5bef8fb19d9be2d7c/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-constexpr2.C", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Ftestsuite%2Fg%2B%2B.dg%2Fcpp0x%2Flambda%2Flambda-constexpr2.C?ref=04b89192ace3a766a17374d5bef8fb19d9be2d7c", "patch": "@@ -0,0 +1,13 @@\n+// PR c++/90212\n+// { dg-do compile { target c++11 } }\n+\n+template<typename T> struct tuple {\n+    constexpr tuple(T&& t) : t(t) { }\n+    int t;\n+};\n+\n+void foo() {\n+    constexpr tuple<int> v1{1};\n+    constexpr auto v2 = v1;\n+    [&]{ constexpr auto v2 = v1; };\n+}"}]}