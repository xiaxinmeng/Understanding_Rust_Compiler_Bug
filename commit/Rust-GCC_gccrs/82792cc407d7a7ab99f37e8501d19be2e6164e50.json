{"sha": "82792cc407d7a7ab99f37e8501d19be2e6164e50", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6ODI3OTJjYzQwN2Q3YTdhYjk5ZjM3ZTg1MDFkMTliZTJlNjE2NGU1MA==", "commit": {"author": {"name": "Julian Brown", "email": "julian@codesourcery.com", "date": "2020-06-29T20:16:51Z"}, "committer": {"name": "Thomas Schwinge", "email": "thomas@codesourcery.com", "date": "2021-09-17T19:04:29Z"}, "message": "openacc: Turn off worker partitioning if num_workers==1\n\nThis patch turns off the middle-end worker-partitioning support if the\nnumber of workers for an outlined offload function is one.  In that case,\nwe do not need to perform the broadcasting/neutering code transformation.\n\n\tgcc/\n\t* omp-oacc-neuter-broadcast.cc\n\t(pass_omp_oacc_neuter_broadcast::gate): Disable if num_workers is\n\t1.\n\t(execute_omp_oacc_neuter_broadcast): Adjust.\n\nCo-Authored-By: Thomas Schwinge <thomas@codesourcery.com>", "tree": {"sha": "17389c9571d795bbf51eefbdab23dc0d5e6f73ed", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/17389c9571d795bbf51eefbdab23dc0d5e6f73ed"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/82792cc407d7a7ab99f37e8501d19be2e6164e50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82792cc407d7a7ab99f37e8501d19be2e6164e50", "html_url": "https://github.com/Rust-GCC/gccrs/commit/82792cc407d7a7ab99f37e8501d19be2e6164e50", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/82792cc407d7a7ab99f37e8501d19be2e6164e50/comments", "author": {"login": "jtb20", "id": 6094880, "node_id": "MDQ6VXNlcjYwOTQ4ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/6094880?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jtb20", "html_url": "https://github.com/jtb20", "followers_url": "https://api.github.com/users/jtb20/followers", "following_url": "https://api.github.com/users/jtb20/following{/other_user}", "gists_url": "https://api.github.com/users/jtb20/gists{/gist_id}", "starred_url": "https://api.github.com/users/jtb20/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jtb20/subscriptions", "organizations_url": "https://api.github.com/users/jtb20/orgs", "repos_url": "https://api.github.com/users/jtb20/repos", "events_url": "https://api.github.com/users/jtb20/events{/privacy}", "received_events_url": "https://api.github.com/users/jtb20/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tschwinge", "id": 21753, "node_id": "MDQ6VXNlcjIxNzUz", "avatar_url": "https://avatars.githubusercontent.com/u/21753?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tschwinge", "html_url": "https://github.com/tschwinge", "followers_url": "https://api.github.com/users/tschwinge/followers", "following_url": "https://api.github.com/users/tschwinge/following{/other_user}", "gists_url": "https://api.github.com/users/tschwinge/gists{/gist_id}", "starred_url": "https://api.github.com/users/tschwinge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tschwinge/subscriptions", "organizations_url": "https://api.github.com/users/tschwinge/orgs", "repos_url": "https://api.github.com/users/tschwinge/repos", "events_url": "https://api.github.com/users/tschwinge/events{/privacy}", "received_events_url": "https://api.github.com/users/tschwinge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8251f90e87f67e09f5203e8edd77bfe73b68a54d", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/8251f90e87f67e09f5203e8edd77bfe73b68a54d", "html_url": "https://github.com/Rust-GCC/gccrs/commit/8251f90e87f67e09f5203e8edd77bfe73b68a54d"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "3fe92248c4e2b278cdea217acc1727918fef9fa2", "filename": "gcc/omp-oacc-neuter-broadcast.cc", "status": "modified", "additions": 31, "deletions": 16, "changes": 47, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/82792cc407d7a7ab99f37e8501d19be2e6164e50/gcc%2Fomp-oacc-neuter-broadcast.cc", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/82792cc407d7a7ab99f37e8501d19be2e6164e50/gcc%2Fomp-oacc-neuter-broadcast.cc", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/gcc%2Fomp-oacc-neuter-broadcast.cc?ref=82792cc407d7a7ab99f37e8501d19be2e6164e50", "patch": "@@ -1378,18 +1378,17 @@ execute_omp_oacc_neuter_broadcast ()\n \n   /* If this is a routine, calculate MASK as if the outer levels are already\n      partitioned.  */\n-  tree attr = oacc_get_fn_attrib (current_function_decl);\n-  if (attr)\n-    {\n-      tree dims = TREE_VALUE (attr);\n-      unsigned ix;\n-      for (ix = 0; ix != GOMP_DIM_MAX; ix++, dims = TREE_CHAIN (dims))\n-\t{\n-\t  tree allowed = TREE_PURPOSE (dims);\n-\t  if (allowed && integer_zerop (allowed))\n-\t    mask |= GOMP_DIM_MASK (ix);\n-\t}\n-    }\n+  {\n+    tree attr = oacc_get_fn_attrib (current_function_decl);\n+    tree dims = TREE_VALUE (attr);\n+    unsigned ix;\n+    for (ix = 0; ix != GOMP_DIM_MAX; ix++, dims = TREE_CHAIN (dims))\n+      {\n+\ttree allowed = TREE_PURPOSE (dims);\n+\tif (allowed && integer_zerop (allowed))\n+\t  mask |= GOMP_DIM_MASK (ix);\n+      }\n+  }\n \n   parallel_g *par = omp_sese_discover_pars (&bb_stmt_map);\n   populate_single_mode_bitmaps (par, worker_single, vector_single, mask, 0);\n@@ -1506,11 +1505,27 @@ class pass_omp_oacc_neuter_broadcast : public gimple_opt_pass\n   {}\n \n   /* opt_pass methods: */\n-  virtual bool gate (function *)\n+  virtual bool gate (function *fun)\n   {\n-    return (flag_openacc\n-\t    && targetm.goacc.create_worker_broadcast_record);\n-  };\n+    if (!flag_openacc)\n+      return false;\n+\n+    if (!targetm.goacc.create_worker_broadcast_record)\n+      return false;\n+\n+    /* Only relevant for OpenACC offloaded functions.  */\n+    tree attr = oacc_get_fn_attrib (fun->decl);\n+    if (!attr)\n+      return false;\n+\n+    /* Not relevant for 'num_workers(1)'.  */\n+    int worker_dim\n+      = oacc_get_fn_dim_size (fun->decl, GOMP_DIM_WORKER);\n+    if (worker_dim == 1)\n+      return false;\n+\n+    return true;\n+  }\n \n   virtual unsigned int execute (function *)\n     {"}]}