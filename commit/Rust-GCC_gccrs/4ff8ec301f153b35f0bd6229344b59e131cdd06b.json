{"sha": "4ff8ec301f153b35f0bd6229344b59e131cdd06b", "node_id": "MDY6Q29tbWl0MTM2NTMxMDA6NGZmOGVjMzAxZjE1M2IzNWYwYmQ2MjI5MzQ0YjU5ZTEzMWNkZDA2Yg==", "commit": {"author": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "1999-05-07T10:16:09Z"}, "committer": {"name": "Ulrich Drepper", "email": "drepper@gcc.gnu.org", "date": "1999-05-07T10:16:09Z"}, "message": "(class basic_string::Rep): Make release member function thread-safe for\nix86 (x>=4) and UltraSPARC.\n\nFrom-SVN: r26820", "tree": {"sha": "67c931fedbc81397924fffc01bd713931f0517e9", "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/trees/67c931fedbc81397924fffc01bd713931f0517e9"}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/git/commits/4ff8ec301f153b35f0bd6229344b59e131cdd06b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff8ec301f153b35f0bd6229344b59e131cdd06b", "html_url": "https://github.com/Rust-GCC/gccrs/commit/4ff8ec301f153b35f0bd6229344b59e131cdd06b", "comments_url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/4ff8ec301f153b35f0bd6229344b59e131cdd06b/comments", "author": null, "committer": null, "parents": [{"sha": "199343c5914ef2bda2a4c6a4932a768ef9591bc7", "url": "https://api.github.com/repos/Rust-GCC/gccrs/commits/199343c5914ef2bda2a4c6a4932a768ef9591bc7", "html_url": "https://github.com/Rust-GCC/gccrs/commit/199343c5914ef2bda2a4c6a4932a768ef9591bc7"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "6206713b6c9c59f7d99733d4be3422ebd58078aa", "filename": "libstdc++/std/bastring.h", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/Rust-GCC/gccrs/blob/4ff8ec301f153b35f0bd6229344b59e131cdd06b/libstdc%2B%2B%2Fstd%2Fbastring.h", "raw_url": "https://github.com/Rust-GCC/gccrs/raw/4ff8ec301f153b35f0bd6229344b59e131cdd06b/libstdc%2B%2B%2Fstd%2Fbastring.h", "contents_url": "https://api.github.com/repos/Rust-GCC/gccrs/contents/libstdc%2B%2B%2Fstd%2Fbastring.h?ref=4ff8ec301f153b35f0bd6229344b59e131cdd06b", "patch": "@@ -73,7 +73,34 @@ class basic_string\n     charT* data () { return reinterpret_cast<charT *>(this + 1); }\n     charT& operator[] (size_t s) { return data () [s]; }\n     charT* grab () { if (selfish) return clone (); ++ref; return data (); }\n+#if defined __i486__ || defined __i586__ || defined __i686__\n+    void release ()\n+      {\n+\tsize_t __val;\n+\tasm (\"lock; xaddl %0, %2\"\n+\t     : \"=r\" (__val) : \"0\" (-1), \"m\" (ref) : \"memory\");\n+\tif (__val == 1)\n+\t  delete this;\n+      }\n+#elif defined __sparcv9__\n+    void release ()\n+      {\n+\tsize_t __newval, __oldval = ref;\n+\tdo\n+\t  {\n+\t    __newval = __oldval - 1;\n+\t    __asm__ (\"cas\t[%4], %2, %0\"\n+\t\t     : \"=r\" (__oldval), \"=m\" (ref)\n+\t\t     : \"r\" (__oldval), \"m\" (ref), \"r\"(&(ref)), \"0\" (__newval));\n+\t  }\n+\twhile (__newval != __oldval);\n+\n+\tif (__oldval == 0)\n+\t  delete this;\n+      }\n+#else\n     void release () { if (--ref == 0) delete this; }\n+#endif\n \n     inline static void * operator new (size_t, size_t);\n     inline static void operator delete (void *);"}]}